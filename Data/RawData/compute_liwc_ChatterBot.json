[{"repo": "ChatterBot", "type": "elite", "title": "", "number of text": 1058, "text": "  Hi @jays1, I believe you are running Django 2.0 (which is currently in an alpha release state). ChatterBot doesn't support Django 2.0 yet.\r\n\r\nTo fix this problem you can install the latest current version of Django.\r\n\r\n```\r\npip install django<2.0\r\n``` I'm fairly certain I know the cause of this error and I will be making a changes in the near future to support Django 2.0  For #904  I'm going to mark this as a bug. Realistically the calculation should be set up so that it doesn't raise an exception.  The Naive Bayes Classifier was chosen because it provides a fairly simple and efficient way to achieve text classification. Since the classification is feature based, it can determine what features are important based on the examples provided.\r\n\r\nText classification was chosen because it seemed like the best solution to solve the problem of determining if the input text was time-related. Text comparison might not work as well here because it would be less efficient, requiring each example statement to be compared for every text input.  Hi @ayushecps, when you instantiate a new instance of the chat bot class in a new file that you have created, you will need to set the `read_only` parameter to `True`. Here is a quick example:\r\n\r\n```python\r\n# my_chat_bot.py\r\nchatbot = ChatBot(\r\n    \"My Chat Bot\",\r\n    read_only=True\r\n)\r\n```\r\n\r\nFeel free to check out more examples in the documentation.\r\nhttp://chatterbot.readthedocs.io/en/latest/quickstart.html#read-only-mode  It would be useful if the storage adapters allows queries to be made for any database model that a chat bot is using. This would allow more generic queries to be made and it would greatly benefit filters and logic adapters.  Hi @vedantnarayan,\r\n\r\nI have never tried this, but one possibility _might_ be Iron Python (http://ironpython.net/). I've never tried it but it might be worth experimenting with.  Hi @chellem thank you for the pull request. The title of this pull request is a bit misleading as this appears to add new documentation, not fix a typo.\r\n\r\nThe documentation being added appears to address the json storage adapter which is deprecated and is going to be removed from ChatterBot soon. I'm going to decline these changes because the json storage adapter was intentionally undocumented to encourage developers not to use it any more.  @skanda09 I think this thread will provide some information to you https://github.com/gunthercox/ChatterBot/issues/931,  @skanda09 \r\n\r\n> What is the type of Network that is used to do the Machine learning in ChatterBot\r\n\r\nI don't understand you question, could you elaborate your question with more information? \r\n\r\nIf you are look for What kinds of machine learning does ChatterBot use?\r\n\r\nSee this [documentation ](https://github.com/gunthercox/ChatterBot/blob/aeb6a37c3a73e938d00c9dc710fd5929ece1bf05/docs/faq.rst#what-kinds-of-machine-learning-does-chatterbot-use) > Can you tell me what is the neural network used?\r\n\r\nNot implemented, Chatterbot purely implemented using search algorithms techniques and [naive Bayesian classification\r\n](https://en.wikipedia.org/wiki/Naive_Bayes_classifier)\r\n\r\n> If it is not there then how can I do it.\r\n\r\nI think you could start this one https://github.com/gunthercox/ChatterBot/issues/289\r\n  Currently this is not implemented, but there is a plan in near future to implement using chat forms https://github.com/gunthercox/ChatterBot/wiki/Chat-Forms @skanda09 I totally misunderstood you question, Yes, you were correct you could write your own custom adapter to do, I found a similar thread https://github.com/gunthercox/ChatterBot/issues/323  @s0rata Are you looking something like this https://github.com/gunthercox/ChatterBot/issues/357  An edge case currently exists where a statements that a chat bot could return exist in the chat bot's database, but due to constraints enforced by the storage adapter, no valid responses that can be used can be returned.\r\n\r\n**Steps to recreate this issue**\r\n\r\n1. Train a database entirely with statements that have no response\r\n2. Try to get a response from the chat bot\r\n\r\n**Cause of issue**\r\n\r\nThe main piece of logic that causes this is the notion that if a statement doesn't have a known response, then it should be filtered out of the list of possible responses that the storage adapter returns.\r\n\r\nWhen a chat bot receives an input statement that has no known response, it chooses a response randomly from the database. The issue is that this causes a case where no response can be selected, but the chat bot knows that there are statements in the database.\r\n\r\n**Steps to resolve**\r\n\r\nChatterBot's match-based logic adapters need to be modified to return the randomly chosen statement instead of proceeding to the next step of selecting a response for the random choice.\r\n\r\n- [ ] Add tests to verify issue (@gunthercox)\r\n- [ ] Modify logic adapters  @vedantnarayan Django unable to find your custom corpus file in Pythons ``site-packages`` folder. Place your CustomCorpus in site-packages and try. for example ``C:\\Python27\\Lib\\site-packages\\circus\\example_app\\CustomCorpus``\r\n\r\nLet me know if you need any furthermore.  @taiwotman I have commented here https://stackoverflow.com/questions/45911071/empty-chatterbot-conversation-table-in-django-admin/45936303#45936303 @taiwotman \r\n\r\n> The Statement and Response table ought to have only the training data as populated using python manage train and nothing else from the user's input.\r\n\r\nThe framework built like this, the [conversation ](http://chatterbot.readthedocs.io/en/stable/conversations.html#conversations) is a combination of ``Statements and Responses``\r\n\r\nStatement: The Bot will consider a statements either inputs from external/user or corpus file. \r\nResponse: The relationship between two statements.\r\n\r\nThat is the reason you were seeing both user input and as-well-as corpus statements.\r\n\r\n![bot_conversations](https://user-images.githubusercontent.com/13664257/29859446-b8edd8d0-8d7f-11e7-809c-8f19a6fab7ea.png)\r\n\r\n@gunthercox Do you have any comments/inputs?\r\n\r\n  @taiwotman I don't know the corpus files trained. In short the best match algorithm works like this, Bot will iterate all the statements which you have trained the bot.\r\n\r\n``` Python\r\nclosest_match.confidence = 0\r\n\r\n# Find the closest matching known statement\r\nfor statement in statement_list:\r\n    confidence = self.compare_statements(input_statement, statement)\r\n\r\n    if confidence > closest_match.confidence:\r\n        statement.confidence = confidence\r\n        closest_match = statement\r\n```\r\n\r\nThe default comparision algorithm is [levenshtein_distance](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/comparisons.py#L35)\r\n\r\nIn your example the scenario look like this \r\n\r\n``` Python\r\nconfidence = self.compare_statements('What is ai?',  'what is ai')\r\n```\r\nIn this the **confidence is 1.0** and you will get answer ``Artificial Intelligence is the branch of engineering and science devoted to constructing machines that think.``\r\n\r\nI think you were confused with this case. The chatterbot ``default threshold values is 65%``. Among on all statement which have **greater confidence** then it will become as response.\r\n\r\n``` Python\r\nconfidence = self.compare_statements('What is ai?',  'What is a joke?')\r\n```\r\nIn this the **confidence is 0.77 which is greater than 0.65** and you will get answer ``Artificial Intelligence is the branch of engineering and science devoted to constructing machines that think.`` I think you tried your bot ``ai conversations`` other you may get accurate results.\r\n\r\nHowever you could get more granular results by setting confidence to **0.90** by using [low-confidence-response-adapter](http://chatterbot.readthedocs.io/en/stable/logic/index.html#low-confidence-response-adapter).\r\n\r\nThe same answer applies to second question also. Let me know your suggestion/improvements on this question\r\n @taiwotman I am closing this issue, please feel free to reopen if you have any questions  @elcolie I didn't understand you question? could you provide with some examples?\r\n\r\nDo want access dbshell of chatterbot,\r\n\r\n``` Bash\r\ncd examples/django_app\r\npython manage.py dbshell\r\nSQLite version 3.8.4.1 2014-03-11 15:27:36\r\nEnter \".help\" for usage hints.\r\nsqlite> .tables\r\nauth_group                               \r\nauth_group_permissions                   \r\nauth_permission                          \r\nauth_user                                \r\nauth_user_groups                         \r\nauth_user_user_permissions               \r\ndjango_admin_log                         \r\ndjango_chatterbot_conversation           \r\ndjango_chatterbot_conversation_statements\r\ndjango_chatterbot_response               \r\ndjango_chatterbot_statement              \r\ndjango_content_type                      \r\ndjango_migrations                        \r\ndjango_session                           \r\nsqlite> select * from django_chatterbot_statement;\r\n```\r\n\r\nOr Are you trying to access [custom management commands](https://docs.djangoproject.com/en/dev/howto/custom-management-commands/), then the [train](http://chatterbot.readthedocs.io/en/stable/django/training.html#management-command) command and source [code](https://github.com/gunthercox/ChatterBot/tree/master/chatterbot/ext/django_chatterbot/management/commands)  @hochochoc could you please provide more information about this issue? Currently training process is static, if you made any changes in your train data, you have to retrain your bot or create new one.\r\n\r\nI don't understand why you are trying to change existing statements? Is there any use case behind?\r\n\r\nSome of the reference, that might useful to you\r\n\r\nhttps://github.com/gunthercox/ChatterBot/pull/103\r\nhttps://github.com/gunthercox/ChatterBot/issues/94#issuecomment-167920604\r\n @milanmaximo In your case you could write your own pre-processors to convert your text into desired format, if these chars are unicode apply [convert_to_ascii](http://chatterbot.readthedocs.io/en/stable/preprocessors.html#chatterbot.preprocessors.convert_to_ascii).\r\n\r\nIf not write your own pre-processor, here some documentation how to write [own processor]( http://chatterbot.readthedocs.io/en/stable/preprocessors.html#creating-new-preprocessors)  similar issue https://github.com/gunthercox/ChatterBot/issues/917 and Django http://chatterbot.readthedocs.io/en/stable/django/index.html  I'm considering starting a ChatterBot newsletter. It would be sent out periodically, probably about once a month, and it would highlight some of the following topics:\r\n\r\n- Major changes being made\r\n- Project goals and planned changes\r\n- Developer highlights, if someone submits a significant fix or contribution.\r\n\r\nFor convenience, the Mailchimp signup form. (I'm thinking the footer and index page of the documentation are prime candidates for the form location?).\r\n```\r\n<link href=\"//cdn-images.mailchimp.com/embedcode/classic-10_7.css\" rel=\"stylesheet\" type=\"text/css\">\r\n<style type=\"text/css\">\r\n\t#mc_embed_signup{background:#fff; clear:left; font:14px Helvetica,Arial,sans-serif; }\r\n</style>\r\n\r\n<div id=\"mc_embed_signup\">\r\n<form action=\"//salvius.us15.list-manage.com/subscribe/post?u=580aa1ae653acac0a2d60dc17&amp;id=6ebc548663\" method=\"post\" id=\"mc-embedded-subscribe-form\" name=\"mc-embedded-subscribe-form\" class=\"validate\" target=\"_blank\" novalidate>\r\n    <div id=\"mc_embed_signup_scroll\">\r\n\t<h2>Subscribe to our mailing list</h2>\r\n<div class=\"mc-field-group\">\r\n\t<label for=\"mce-EMAIL\">Email Address </label>\r\n\t<input type=\"email\" value=\"\" name=\"EMAIL\" class=\"required email\" id=\"mce-EMAIL\">\r\n</div>\r\n\t<div id=\"mce-responses\" class=\"clear\">\r\n\t\t<div class=\"response\" id=\"mce-error-response\" style=\"display:none\"></div>\r\n\t\t<div class=\"response\" id=\"mce-success-response\" style=\"display:none\"></div>\r\n\t</div>    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\r\n    <div style=\"position: absolute; left: -5000px;\" aria-hidden=\"true\"><input type=\"text\" name=\"b_580aa1ae653acac0a2d60dc17_6ebc548663\" tabindex=\"-1\" value=\"\"></div>\r\n    <div class=\"clear\"><input type=\"submit\" value=\"Subscribe\" name=\"subscribe\" id=\"mc-embedded-subscribe\" class=\"button\"></div>\r\n    </div>\r\n</form>\r\n</div>\r\n\r\n<script type='text/javascript' src='//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js'></script><script type='text/javascript'>(function($) {window.fnames = new Array(); window.ftypes = new Array();fnames[0]='EMAIL';ftypes[0]='email';fnames[1]='FNAME';ftypes[1]='text';fnames[2]='LNAME';ftypes[2]='text';}(jQuery));var $mcj = jQuery.noConflict(true);</script>\r\n``` \ud83d\udcaf   @zhouzebiao Could you please provide fallowing details to resolve issue very quickly\r\n\r\n1. version of chatterbot, to know chatterbot version ``python -m catterbot chatterbot.__version__``\r\n2. corpus data examples\r\n3. example code snippet that produced erros\r\n\r\nRead this documentation to fix python encoding issues http://chatterbot.readthedocs.io/en/stable/encoding.html#how-do-i-fix-python-encoding-errors  @liqiang311 could you provide more information and a simple usecases you looking for? Current chatterbot uses [BestMatch](http://chatterbot.readthedocs.io/en/stable/logic/index.html#best-match-adapter) algorithm to match statements using different [statement_comparison_functions](http://chatterbot.readthedocs.io/en/stable/conversations.html#statement-comparison)\r\n this bot configuration will produce a good results for you\r\n\r\n\r\n``` python\r\n\r\nchatbot = ChatBot(\r\n    \"My ChatterBot\",\r\n    logic_adapters=[\r\n        {\r\n            \"import_path\": \"chatterbot.logic.BestMatch\",\r\n            \"statement_comparison_function\": \"chatterbot.comparisons.levenshtein_distance\",\r\n            \"response_selection_method\": \"chatterbot.response_selection.get_first_response\"\r\n        }\r\n    ]\r\n)\r\n```  You could write something like this\r\n\r\n``` Python\r\nchatbot = ChatBot(\r\n    \"My ChatterBot\",\r\n    logic_adapters=[\r\n        {\r\n            \"import_path\": \"chatterbot.logic.BestMatch\",\r\n            \"statement_comparison_function\": \"chatterbot.comparisons.jaccard_similarity\",\r\n            \"response_selection_method\": \"chatterbot.response_selection.get_first_response\"\r\n        }\r\n    ]\r\n)\r\n```\r\n\r\nor\r\n\r\n``` Python\r\nfrom chatterbot import ChatBot\r\nfrom chatterbot.comparisons import jaccard_similarity\r\n\r\nchatbot = ChatBot(\r\n    'Test bot',\r\n    statement_comparison_function=jaccard_similarity\r\n)\r\n```\r\n\r\nThe comparison class are converted to calable names at line number [325](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/comparisons.py)\r\n\r\nMore information about comparison functions http://chatterbot.readthedocs.io/en/stable/conversations.html#statement-comparison  Currently the associations are defined as association_table,\r\n\r\nInstead i would propose to create a separate table for tag_association for example ``TagAssociation`` table. More information available here http://docs.sqlalchemy.org/en/latest/orm/extensions/associationproxy.html#simplifying-association-objects\r\n\r\n@gunthercox Master any comments/suggestions?  Hi @neutralboy, I don't believe the error you are seeing is related to ChatterBot. It looks like it might be an error generated in one of your browser extensions. @neutralboy if you want get conversations from chatterbot you have do post operation. \r\n\r\nhttps://github.com/gunthercox/ChatterBot/blob/324c312e036ef63fa80885f93ed2ff808919592f/examples/django_app/example_app/templates/app.html#L82\r\n\r\nthe error message came from here \r\n\r\nhttps://github.com/gunthercox/ChatterBot/blob/324c312e036ef63fa80885f93ed2ff808919592f/chatterbot/ext/django_chatterbot/views.py#L103\r\n  It seems to me the build failed due to network issue, I have restarted the job, hope it will pass Some useful reference about invert index https://stackoverflow.com/a/8360932/358458 @corcassia Thank you for you PR, could you please clarify the different between [mongodb text indexing](https://docs.mongodb.com/v3.2/core/index-text/) and this PR invert indexing @corcassia Thank you, I am not sure with performance. \r\n\r\nTo improve @gunthercox came with an idea **tag filtering** to speed up retrieval process https://github.com/gunthercox/ChatterBot/issues/925.  @corcassia Thank you, I'm really impressed with the performance improvements after this change. I'm going to pull these changes down locally and test out a few things. I might have further questions. @corcassia Apologies for my delay, I will be reviewing this pull request as soon as possible.  @7633 Yes, it should work, I would recommand to you write serveral response before you check YAML lint http://www.yamllint.com/\r\n\r\nThe below example save it into .yaml and train your bot it should work.\r\n\r\n``` YAML\r\n--- \r\n- \r\n  - Hello\r\n  - hi\r\n  - \"good morning\"\r\n  - hello\r\n  - hey\r\n  - \"what's up\"\r\n- \r\n  - \"How are you\"\r\n  - \"I'm fine\"\r\n  - good\r\n  - \"I'm fine, and what about you?\"\r\n  - \"I'm sad\"\r\n``` short and detail described here https://github.com/gunthercox/ChatterBot/issues/925\r\n\r\n  A line probably needs to be modified in there to create that statement. I probably missed it when I did the conversation changes for #828  Hi @nggary some changes have recently been made and the session object is being removed in the next release. It was replaced with a \"conversation\" object which is persisted in the database.\r\n\r\nAdditionally I opened issue #904 which, once completed, will make it possible for the existing objects such as statements, responses and conversations to be overwritten so that additional method and variables can be added to them.\r\n\r\nI agree with all of the functionality you are asking for, this is a question that has come up on multiple occasions. Let me know what you think of these changes. I'm hoping that they will make it much easier to accomplish what you want.  Does this fix anything or is this just an ascetic change?  There currently some brief documentation on this page: http://chatterbot.readthedocs.io/en/latest/chatterbot.html#adapter-defaults\r\n\r\nI agree that many of the defaults are lacking. I'll see what I can do about updating these \ud83d\udc4d   Right now, the MongoDB storage adapter and the SQL storage adapter each support both of the following parameters.\r\n\r\n- `database`: A simple string such as \"chat-bot-database\" that then gets turned into a database connection string by the storage adapter.\r\n- `database_uri` A database connection string.\r\n\r\nI think it might simplify things if one of these parameters was removed. Considering they both almost do the same thing I don't think there would be too much of an issue if `database` was removed completely as a possible parameter for these two adapters.\r\n\r\n***\r\n\r\n> \"Explicit is better than implicit.\"\r\n> ~ [The Zen of Python](https://www.python.org/dev/peps/pep-0020/)  This pull request is referenced to https://github.com/gunthercox/ChatterBot/issues/925\r\n\r\nStill needs to complete\r\n\r\n***\r\n\r\n- [ ] Update training process\r\n- [ ] Tests\r\n- [ ] Statement update\r\n- [ ] Mongodb update\r\n- [ ] Documentation?\r\n\r\n Any comments about this Preserve categories https://github.com/gunthercox/chatterbot-corpus/pull/38  Hi @Arvhus Take a look at the existing comparison functions:\r\n\r\nhttps://github.com/gunthercox/ChatterBot/blob/master/chatterbot/comparisons.py\r\n\r\nYour comparison function should be on a class that inherits from `Comparator` which can be imported using:\r\n\r\n```\r\nfrom chatterbot.comparisons import Comparator\r\n```\r\n\r\nThe reason this class is used is because sometime it is necessary for various setup processes to be run a single time when a chat bot first starts up and the `Comparator` class makes it easier to package all of these prerequisite steps together.\r\n\r\nAfter you create the class, you'll want to put your comparison logic in a function called `compare` on your class. The `compare` method should return a number between 0 and 1 representing the percent of similarity between the two statements being compared.\r\n\r\nLet me know if there is anything I can help with or clarify.  I'm wondering about the pros and cons of supporting this. If a particular database architecture (MongoDB, Sqlite, etc.) allows this than I'm all for it.\r\n\r\nOne possible issue I can foresee is the challenge of merging the results from multiple non-homogeneous database. For example, someone wants to use a Postgres database and a MongoDB database together for their data.  @sedemmler I don't see any issues on my machine hp pro-book 440 g3\r\n\r\nI googled your issue found some answer, i think this could help solve your problem\r\n\r\nhttps://stackoverflow.com/a/41692664/358458\r\nhttps://stackoverflow.com/a/39142816/358458\r\n\r\nHowever the post suggested workaround related to SSL , i am not sure how this will effect on other platforms? @gunthercox any comments?\r\n\r\n``` Python\r\nimport nltk\r\nimport ssl\r\n\r\ntry:\r\n    _create_unverified_https_context = ssl._create_unverified_context\r\nexcept AttributeError:\r\n    pass\r\nelse:\r\n    ssl._create_default_https_context = _create_unverified_https_context\r\n\r\nnltk.download()\r\n```\r\n\r\n I'm going to close this ticket off because it hasn't been reported again. I'm assuming it could have possibly been a temporary error on the side of the servers hosting NLTK's data.  @vansh215 by looking into error console, you are just copy and pasted you code on terminal, that is the reason you are seeing many failures. \r\n\r\nTo avoid these kind error, open text editor and save it.\r\n```Bash\r\nVANSH@LAPTOP-A0Q1OIQ:~$vi chatterbot_example.py\r\n```\r\nor you could launch python interpreter from your terminal\r\n``` Bash\r\nVANSH@LAPTOP-A0Q1OIQ:~$python\r\npast your code here \r\n```  I don't see any issues with python virtualenv. Many users/developers facing issues while installation chatterbot on ``anacoda``.\r\n\r\nI am ok, if you are going add both ``python`` and ``anaconda`` installation instructions.\r\n\r\nAnd also a similar issue https://github.com/gunthercox/ChatterBot/issues/781, if you want you could start work on this issue also.\r\n\r\n I decided to take a look at the Django documentation as a roll model for what the best documentation practice would be for adding a note about virtualenv.\r\n\r\nFrom what I found, it looks like the Django docs mention it in two main places:\r\n\r\n1. As a recommended step in the development workflow (https://docs.djangoproject.com/en/1.11/intro/contributing/#getting-a-copy-of-django-s-development-version)\r\n2. For installation on Windows (https://docs.djangoproject.com/en/1.11/howto/windows/)\r\n\r\nI really like the idea of adding a recommendation in the [development documentation](http://chatterbot.readthedocs.io/en/stable/development.html). I think **if** a step is added to the installation instructions we just need to make is very clear that it is optional. Agreed. Thank you!  I'd like to add a page to the [development documentation](http://chatterbot.readthedocs.io/en/latest/development.html) that highlights a handful of useful development tools that can be helpful when creating chat bots or working on ChatterBot's codebase. In general, these tools should preferably be cross-platform (not something that *only* Mac or Windows or Linux users can use).\r\n\r\nA few ideas so far include...\r\n\r\n### NoSQLClient\r\n\r\nThis is an absolutely awesome tool for testing out no-sql databases like MongoDB.\r\n\r\nhttps://github.com/nosqlclient/nosqlclient\r\n\r\n### A sqlite browser\r\n\r\nI'm open to recommendations for a good one. I was looking into sqlite-viewer, maybe someone has used a better one, I haven't tested this one out yet.\r\n\r\nhttps://github.com/inloop/sqlite-viewer\r\n\r\n### Others\r\n\r\nI'm sure there are plenty of other useful tools out there. I would love to get some recommendations before I start curating the new documentation page. I have been using \r\n\r\n1. DB browser SQLite http://sqlitebrowser.org/, It looks good and works well for me\r\n2. Robomongo for Mongo DB browser https://robomongo.org/  _This issue is blocked by #924 and can't be worked on until those changes are made._\r\n\r\n***\r\n\r\nChanges need to be made to ChatterBot's storage adapters so that statements can be filtered by their `tags` attribute.\r\n\r\nThis is an important change that will allow more efficient response generation. After this change is made it will be possible to add a processing step where new input statements are classified based on the labels of categories of the dialog that was used to train the chat bot (adding this additional processing step will have a separate issue and pull request created for it). @gunthercox Master, If you didn't started working on this, I am happy to work on this feature, Is there any ETA to do this? I am planning to write a utility method to find categories something like below\r\n\r\nQuestion: If same/similar statement present in multiple categories are we going considering those?\r\n\r\n``` Python\r\ndef find_categories(corpus_paths, input_statement):\r\n    data_file_paths = self.list_corpus_files(corpus_paths)\r\n    categories = [list]\r\n    for file_path in data_file_paths:\r\n        data = read_corpus(file_path):\r\n        for k, v in data.items():\r\n            if input_statement in v:\r\n                categories.append(k)\r\n                \r\n    return categories\r\n``` @vkosuri Thank you, that would be greatly appreciated.\r\n\r\nYes, multiple categories for a statement should be supported.\r\n\r\nAlso, if you check the `corpora` variable on [#L119](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py#L119) of trainers.py you should be able to get the categories from it. They are being added in the [`load_corpus`](https://github.com/gunthercox/chatterbot-corpus/blob/master/chatterbot_corpus/corpus.py#L77) function of `chatterbot-corpus`.\r\n\r\n```\r\ncorpora = self.corpus.load_corpus(corpus_path)\r\nfor category in corpora.categories:\r\n    # ...\r\n```\r\n\r\nThank you again, let me know if anything comes up that I can assist with. \ud83d\udc4d  Thanks Master, Another question\r\n\r\n1. is ``None`` is the default category?\r\n2. If user didn't specified any category, do we need search whole corpora? If not what's your thoughts? > 1. is None is the default category?\r\n\r\nSince a statement can have multiple categories, the default should be an empty list.\r\n\r\n> 2. If user didn't specified any category, do we need search whole corpora? If not what's your thoughts?\r\n\r\nYes, but that is going to be a different pull request. #925 describes this a bit more. @Issen007 Tags will be added to the statements based on the `category` field from their corpus data (at least when training with the `chatterbot-corpus`).  Hi @dileepkantapop, I'm not sure what Luis is. I would be happy to try to help. Do you have a link to project you are working with? Luis is an Microsoft AI https://www.luis.ai/home\r\n\r\n@dileepkantapop I think this thread will help you https://github.com/Microsoft/Cognitive-LUIS-Windows/issues/18#issuecomment-289385413  how about increased it to 16K, \r\n\r\n```Python\r\ntext = models.CharField(\r\n        unique=True,\r\n        blank=False,\r\n        null=False,\r\n        max_length=16384\r\n)\r\n```\r\nor make it as TextField\r\n\r\n```Python\r\ntext = models.TextField(\r\n        unique=True,\r\n        blank=False,\r\n        null=False\r\n)\r\n``` @cho-is It working fine on my machine. I am not sure in what you are getting this error.\r\n\r\n``` Python\r\ntext = models.TextField(\r\n        unique=True,\r\n        blank=False,\r\n        null=False\r\n)\r\n```  @nalancer08 I think the example are working fine, which version of chatterbot are you using? To know current version of chatterbot, please paste below commands on your terminal.\r\n\r\n``` Bash\r\npython -m chatterbot --version\r\n```  @neofob try placing the following at the top of your files:\r\n\r\n```\r\nfrom __future__ import unicode_literals\r\n```\r\n\r\nThis will give you Python3-like unicode literal support and it should resolve the error you encountered. Let me know if you have any questions.  @hochochoc recently ResponseQueue concept has been removed https://github.com/gunthercox/ChatterBot/commit/e7a1d9c42ac0b3e0f03c585f43852756ad5705d7 from chatterbot. \r\n\r\nI think documentation is pending will update soon.\r\n\r\n> I am wondering that how chatterbot works when ResponseQueue is full (maxsize=10).\r\n\r\nIt won't create another session, it will pop top element from the list.\r\n\r\n```Python\r\nif len(self.queue) == self.maxsize:\r\n    # Remove an element from the top of the list\r\n    self.queue.pop(0)\r\n```  @hochochoc \r\n\r\n> but I don't know whether I have to create a new input adapter or not.\r\n\r\nYes\r\n\r\nPlease be aware of future expansion https://github.com/gunthercox/ChatterBot/issues/528\r\n\r\nI found some resources this might be useful to you http://masnun.com/2016/05/22/building-a-facebook-messenger-bot-with-python.html\r\n @hochochoc Sure  @lesleslie There are some great changes here, thank you. Once the tests are passing I'll be happy to merge in your changes.\r\n\r\nThank you again. Thank you again. Fantastic job @lesleslie putting all this together. It is greatly appreciated!  @vimerzhao I am unable to figured it out, could you please let me know failure points or improvements with this PR? Gotcha, thanks @vimerzhao \r\n\r\nhttps://github.com/gunthercox/ChatterBot/blob/68527223db52c39cbb94393cdf313f39485c5856/chatterbot/storage/sql_storage.py#L55 @vimerzhao Thank you. I'll check over the code and try to post something to help guide you through the necessary changes. I'll post the information as soon as I can but you might not hear from me until later today or tomorrow. I believe the change you'd need to make is just dropping the \".db\" from the end of this line in sql_storage.py\r\n\r\n```python\r\nself.database_uri = \"sqlite:///\" + database_name + \".db\"\r\n```\r\n\r\n[chatterbot/storage/sql_storage.py#L55](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/storage/sql_storage.py#L55) Hi @vimerzhao, I ended up making some changes just to verify what would be needed to resolve this and ended up making a pull request. I apologize for taking away your chance to contribute code to the project but I hope to see pull requests from you in the future. Thank you again for your help in tracking down this bug.\r\n\r\nSee #933 for details on the changes.  Hi @nalancer08 I don't have a Mac to test with but I'll see what I can do to resolve this. One thing I just noticed is that there have been [some updates](https://pypi.python.org/pypi/ruamel.yaml) to the `ruamel.yaml` library since version 0.15, one of which seems to include Python wheels (which may fix some of the c-related errors you are seeing in your output).\r\n\r\nWant to try running the following and let me know if it installs?\r\n\r\n```\r\npip install ruamel.yaml --upgrade\r\n```\r\n\r\nThis should install the latest version of `ruamel.yaml`. It looks like I need to update the version that is pinned in the `chatterbot-corpus` package: https://github.com/gunthercox/chatterbot-corpus/blob/master/requirements.txt Similar issue https://bitbucket.org/ruamel/yaml/issues/37/osx-not-able-to-install-using-pip @nalancer08 I'm glad your issue was resolved. I am going to make changes to switch to a different Python YAML library to hopefully fix and prevent issues like this in the future.  Yes, it should.  @bainadeashish I _believe_ this should work. I'd be more than happy to look into it and add some tests to confirm that it works. There might even be some interesting potential here to add a data set containing emoticons to the [chatterbot corpus](https://github.com/gunthercox/chatterbot-corpus). @bainadeashish happy to hear from you,Full emoji list  http://www.unicode.org/emoji/charts/full-emoji-list.html @bainadeashish Thank you for that note, I'll take that into consideration. A preprocessor would probably be the most optimal way to accomplish the conversion you mentioned http://chatterbot.readthedocs.io/en/stable/preprocessors.html  @anilneeluri I think this something is related to twitter API token broken issue, I have found a similar question comment which will guide to resolve your problem https://stackoverflow.com/a/17994472/358458  Right now, no. Luckily training only has to be done once for a chat bot. You may encounter further issues once you finish training with that much data. I'm currently working on changes to solve performance issues for large data sets.  I believe a few of ChatterBot's logic adapters that use NLTK have english-specific restrictions. The logic adapter for telling the current time is an example of this.\r\n\r\nAn plan should be developed for supporting other languages in these adapters. I'm not yet sure what the best approach will be. One possibility I am considering is adding that data to the ChatterBot corpus and implementing a warning in the logic adapter if it can't load the required data for that language. Some of the resources i have found https://hugonlp.wordpress.com/2015/10/07/how-to-do-pos-tagging-and-lemmatization-in-languages-other-than-english/  A common request is that a developer wants to add an additional field to one of the database models. To easily allow this and also to encourage loose coupling of ChatterBot with its database models, changes should be made so that it is possible to specify the model classes that a chat bot should use.\r\n\r\n- [x] Django models\r\n- [x] SQL Alchemy models\r\n- [x] Python object models\r\n- [x] Remove the `extra_data` field in a future pull request because this is a way better method to facilitate adding custom fields.\r\n- Blocks #1097  ChatterBot's `SQL Storage Adapter uses SqlAlchemy internally. According to the latest documentation, SQL Alchemy supports PostgresSQL. This is something that I haven't tested out so I'm not sure if it will work.\r\n\r\n**Sources**\r\n\r\n- SQL Alchemy docs: http://docs.sqlalchemy.org/en/latest/dialects/postgresql.html\r\n- ChatterBot SQL Storage documentation: http://chatterbot.readthedocs.io/en/stable/storage/index.html#sql-storage-adapter\r\n- ChatterBot's SQL storage adapter: https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/storage/sql_storage.py Thank you, I will be interested to know if it works.  @sherinmannambeth which version of chatterbot are you using?\r\n\r\nTo know current of chatterbot issue this command on your terminal ``(venv)user$python -m chatterbot --version``  https://github.com/gunthercox/ChatterBot/blob/9f4b385b052b467ac6dcf9995d13dc6544143b42/examples/django_app/example_app/templates/app.html#L84 I think you are looking this\r\n\r\nhttps://github.com/gunthercox/ChatterBot/blob/9f4b385b052b467ac6dcf9995d13dc6544143b42/chatterbot/ext/django_chatterbot/views.py#L72 My guess, check proper order it is saving into database. i.e update procedure \r\n\r\nhttps://github.com/gunthercox/ChatterBot/blob/9f4b385b052b467ac6dcf9995d13dc6544143b42/chatterbot/storage/django_storage.py#L79 I think the meaning of keeping another create is, if Response didn't created create it, create Response object. it should something like below.\r\n\r\n``` Python\r\nif not created:\r\n    Response.objects.create(\r\n                    statement=response_statement,\r\n                    response=statement\r\n    )\r\n```  @bainadeashish Chatterbot does support multiple response selection methods, from your example, you have choose [random response method](http://chatterbot.readthedocs.io/en/stable/logic/response_selection.html#chatterbot.response_selection.get_random_response), and threshold values as ``0.6``. \r\n\r\nFor example In your case and based on your inputs the fallowing statements will fall under threshold value as ``0.6`` among all those values a random response will pick by chatterbot.\r\n\r\n\r\nConfidence | Statement\r\n-- | --\r\n0.8 | hello\r\n0.7 | how are you\r\n0.6 | doing great!\r\n\r\n\r\nHere more documentation on multiple [response selection modes ](http://chatterbot.readthedocs.io/en/stable/logic/response_selection.html#module-chatterbot.response_selection) @bainadeashish I think it is slightly confusing, the documentation needs to corrected here, Based on ``closet_match`` the optimal values are selected. Here are the steps the bot is performing. The information started from this [steps ](https://github.com/gunthercox/ChatterBot/blob/351971a21e603642f5797c33e924c4195f96682b/chatterbot/logic/best_match.py#L55)\r\n\r\n1. Select the closest match to the input statement\r\n2. Get all statements that are in response to the closest match\r\n3. Selecting optimal responses\r\n4. Response selection\r\n\r\nI am not sure did i answer question, let me know what are your inputs/thoughts/suggestions/comments?  Hi @vyz1194, If by \"inbuilt session module\" you mean the one included in ChatterBot, I would recommend against using it. I've made changes to remove ChatterBot's session management system in the next version in favor of storing a history of individual conversations in the database. I think this might be closer to what you are looking for.  > how can we train the chatterbot effectively to achieve the good response from bot.\r\n\r\nA high amount of confidence. will give accurate response from bot. To set threshold like this\r\n\r\n``` Python\r\nbot = ChatBot(\r\n    'Default Response Example Bot',\r\n    storage_adapter='chatterbot.storage.SQLStorageAdapter',\r\n    logic_adapters=[\r\n        {\r\n            'import_path': 'chatterbot.logic.BestMatch'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 0.90,\r\n            'default_response': 'I am sorry, but I do not understand.'\r\n        }\r\n    ],\r\n    trainer='chatterbot.trainers.ListTrainer'\r\n)\r\n``` > Actually i want to know about  HOW TO TRAIN a basic chatbot with more amount of data. \r\n\r\n@Hemanth2396 and @anilneeluri \r\n\r\nFor large amount of data, it is recommended to write your corpus file. I think the below Q&A will answer your questions.\r\n\r\n1. How to write a corpus file?\r\n2. What is training and what are different training class are available?\r\n\r\n### 1. How to write a corpus file?\r\nChatterbot does support both [YAML ](https://en.wikipedia.org/wiki/YAML) and JSON format in question and answers. You could find a large number of corpus files here https://github.com/gunthercox/chatterbot-corpus/tree/master/chatterbot_corpus/data.\r\n\r\nExample\r\n\r\n```YAML\r\n- - text: Hello, how are you doing today?\r\n  - text: I am doing well, thank you.\r\n- - text: I cannot find my keys.\r\n  - text: Where was the last place you remember having them?\r\n```\r\n\r\n### 2. What is training and what are different training class are available?\r\nTraining is the process involves loading example dialog into the chat bot\u2019s database. Chatterbot does support different [training classes](http://chatterbot.readthedocs.io/en/stable/training.html#training-classes) to train your bot.  You could write your own training class for example UbuntuDialogCorpus and Twitter Training classes take a look exists training classes https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py  @yeshoujquery Yes, that is correct. Version 0.7.5 doesn't contain any performance improving features and none were planned for this version.\r\n\r\nI assure you that I am aware of the performance issues and they will be greatly improved through future releases.\r\n\r\nFor reference, you can review the details for the changes in each release in ChatterBot's release notes section: https://github.com/gunthercox/ChatterBot/releases @yeshoujquery Hopefully within the releases for either 0.8 or 0.9.  > Is this framework based on sequence to sequence model? \r\n\r\nNo\r\n\r\nMay be we could take up this as feature request\r\n\r\nDetail information about algorithms available in this comment https://github.com/gunthercox/ChatterBot/issues/64#issuecomment-149007645  random_seed_word is keyword argument you could pass through ChatBot parameter. I hope this example will give idea.\r\n\r\n``` Python\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\nfrom settings import TWITTER\r\nimport logging\r\n\r\n\r\n'''\r\nThis example demonstrates how you can train your chat bot\r\nusing data from Twitter.\r\n\r\nTo use this example, create a new file called settings.py.\r\nIn settings.py define the following:\r\n\r\nTWITTER = {\r\n    \"CONSUMER_KEY\": \"my-twitter-consumer-key\",\r\n    \"CONSUMER_SECRET\": \"my-twitter-consumer-secret\",\r\n    \"ACCESS_TOKEN\": \"my-access-token\",\r\n    \"ACCESS_TOKEN_SECRET\": \"my-access-token-secret\"\r\n}\r\n'''\r\n\r\n# Comment out the following line to disable verbose logging\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\nchatbot = ChatBot(\r\n    \"TwitterBot\",\r\n    logic_adapters=[\r\n        \"chatterbot.logic.BestMatch\"\r\n    ],\r\n    input_adapter=\"chatterbot.input.TerminalAdapter\",\r\n    output_adapter=\"chatterbot.output.TerminalAdapter\",\r\n    database=\"./twitter-database.db\",\r\n    twitter_consumer_key=TWITTER[\"CONSUMER_KEY\"],\r\n    twitter_consumer_secret=TWITTER[\"CONSUMER_SECRET\"],\r\n    twitter_access_token_key=TWITTER[\"ACCESS_TOKEN\"],\r\n    twitter_access_token_secret=TWITTER[\"ACCESS_TOKEN_SECRET\"],\r\n    trainer=\"chatterbot.trainers.TwitterTrainer\",\r\n    random_seed_word=\"random\"\r\n)\r\n\r\nchatbot.train()\r\n\r\nchatbot.logger.info('Trained database generated successfully!')\r\n``` The seed word parameter, as well as other available parameters are also described in detail the documentation (I'm just posting a line for convenient reference).\r\n\r\nhttp://chatterbot.readthedocs.io/en/latest/training.html#training-with-the-twitter-api\r\n\r\nI believe this question has been answered. I'm going to close it off. @liberaltech feel free to reopen it if you have any further questions. @vkosuri thank you, as always, for the prompt response.  @edwardinubuntu I agree with your suggestion. I'll add additional logging to cover the scenario where this adapter isn't used due to the value of the confidence threshold.  I think adding a progress is much useful to know how percentage is left/completed. I see a variety of example are available in stack overflow https://stackoverflow.com/questions/3160699/python-progress-bar\r\n\r\n@gunthercox if it useful, then i will make a PR\r\n\r\nRef Issue: https://github.com/gunthercox/ChatterBot/issues/876  This PR will enable sql engine with ``convert_unicode=True`` More information available here http://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine.params.convert_unicode\r\n\r\nCloses: https://github.com/gunthercox/ChatterBot/issues/887 The character set UTF-8 Default encoding is UTF-8 http://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine.params.encoding\r\n\r\nI have trained with Chinese corpus it worked very well\r\n\r\n``` SQL\r\nsqlite> .read db.sqlite3\r\n\u0003\ufffdcompleid INTEGER NOT NULL,  3\u0002\r\n\ttext VARCHAR, \r\n\tcreated_at DATETIME DEFAULT CURRENT_TIMESTAMP, \r\n\toccurrence INTEGER, \r\n\tstatement_text VARCHAR, \r\n\tPRIMARY KEY (id), \r\n\tFOREIGN KEY(statement_text) REFERENCES \"StatementTable\" (text)\r\n)\ufffd'\u0001\u0017))\u0001\ufffd\ttableStatementTableStatementTable\u0002CREATE TABLE \"StatementTable\" (\r\n\tid INTEGER NOT NULL, \r\n\ttext VARCHAR, \r\n\textra_data BLOB, \r\n\tPRIMARY KEY (id), \r\n\tUNIQUE (text)\r\n\u0006017-07-31 08:53:45\u662f\u7684\uff0c\u6211\u6709\u4e2a\u95ee\u9898.5?\u001a\u00039\u0001\u4f60\u662f\u4e2a\u673a\u5668\u4eba\u5417?0\u0003\ufffd-07-31 08:53:45\u4f60\u597d9\u0011\u000631 08:53:45\u5f88\u62b1\u6b49\uff0c\u6211\u6ca1\u6709.B\r\n\u0006'3\t\u001f\u6211\u8fd8\u4e0d\u9519.2017-07-31 08:53:45\u90a3\u5f88\u597d0\u0006D\u0001\u0006\ufffd\u770b\u5f97\u51fa\u6765.B\u001a\u0006\ufffd\ufffd\u559c\u6b22\u4ec0\u4e48\u989c\u8272?2017-07-31 08:53:45\u84dd\u8272?\u0016\u0006\ufffd\u95fb?3\u0013\u0006Q\ufffd\ufffd\u4e48\u4e66?\ufffd\u0004\ufffd\u0003\ufffd\u8fd8\u4e0d\u9519\uff0c\u4f60\u5462?\ufffd\u0004\ufffd\u0003\ufffd\ufffd\u5417?\ufffd\u0004\ufffd\u0003\u0004\u597d\ufffd\u0004\ufffd\u0003\u7684\uff0c\u4f60\u5462\ufffd\u0004\ufffd\u0003\ufffd\ufffd\ufffd\u0004\ufffd\u0003\ufffd\u86cb\u7cd5\u5f88\u7f8e\u5473\u554a.\ufffd\u0004\ufffd\u0003\ufffd\ufffd\u8fd9\u4ec5\u4ec5\u662f\u95ee\u4e00\u4e2a\u6234\u9762\u5177\u7684\u4eba\u7684\u77db\u76fe\u6027\u8d28. \u8bf7\u544a\u8bc9\u6211\uff0c\u4f60\u559c\u6b22\u97f3\u4e50\u5417?\ufffd\u0004\ufffd\u0003\ufffd\u7f8e\u5473\u7684\u4e1c\u897f?2017-07-31 08:53:45\u6ca1\u4e86N%\u0006\ufffd\ufffd\u5168\u75af\u4e86\u3002\u4f46\u6211\u4f1a\u544a\u8bc9\u4f60\u4e00\u4e2a\u79d8\u5bc6\u3002\u6240\u6709\u6700\u68d2\u7684\u4eba\u90fd\u662f.J \u0006\ufffd\u4ec5\u4ec5\u662f\u95ee\u4e00\u4e2a\u6234\u9762\u5177\u7684\u4eba\u7684\u77db\u76fe\u6027\u8d28. \u8bf7\u544a\u8bc9\u6211\uff0c\u4f60\u559c\u6b22\u97f3\u4e50\u5417?2017-07-31 08:53:45\u6211\u559c\u6b22\u7535\u5f71.\r\n\u0015\u0003-\u0002\u4ed9\u5973\u5ea7\u661f\u7cfb.\ufffd\u7f8e\u80dc\u4e8e\u4e11\u964b.;,\u0003]\u0001\u4f46\u4e0d\u5047\u601d\u7d22\u5c31\u52a8\u624b\u8fd8\u4e0d\u5982\u4e0d\u505a.I\"\u0003I\u0001\u4f60\u4f3c\u4e4e\u5f88\u719f\u6089Python\u4e4b\u79859\u001d\u0003?\u0001\u4f60\u4f7f\u7528\u4ec0\u4e48\u8bed\u8a00\u5462?P\u001a\u00039\u0001\u4f60\u542c\u5230\u65b0\u95fb\u4e86\u5417?\u0015\u001a\u00039\u0001\u4f60\u559c\u6b22\u4ec0\u4e48\u98df\u7269?_\u001a\u00039\u0001\u4f60\u559c\u6b22\u54ea\u7c7b\u7535\u5f71?\"\u0014\u0003-\u0001\u4f60\u5728\u4f5c\u4ec0\u4e48?''\u0001\u4ec0\u4e48\u95ee\u9898?\r\n\u0003\u0019\u0001\u4f60\u597d\u0006\u0003!\u0001\u4f60\u597d\u5417?\u0014\u0003-\u0001\u4f60\u5982\u4f55\u8fd0\u4f5c?4Q\u0004\ufffd%\u0001\u4f60\u5b8c\u5168\u75af\u4e86\u3002\u4f46\u6211\u4f1a\u544a\u8bc9\u4f60\u4e00\u4e2a\u79d8\u5bc6\u3002\u6240\u6709\u6700\u68d2\u7684\u4eba\u90fd\u662f.%\u001a\u00039\u0001\u4f60\u60f3\u4e86\u89e3\u4e9b\u4ec0\u4e48?/\u001a\u00039\u0001\u4f60\u60f3\u4e86\u89e3\u54ea\u65b9\u9762?3\u001d\u0003?\u0001\u4f60\u662f\u4e00\u4e2a\u7a0b\u5e8f\u5458\u5417?N\r\n\u0001\u4f60\u6700\u559c\u6b22\u4ec0\u4e48\u989c\u8272?\u0019\u0013\u0003+\u0001\u4f60\u7231\u6211\u5417\uff1fi\u001c\u0003=\u0001\u4f60\u7684\u7231\u597d\u662f\u4ec0\u4e48\uff1fa#\u0003K\u0001\u4f60\u77e5\u9053\u5b83\u7684\u6240\u6709\u5185\u5bb9\u5417?:\u0011\u0003'\u0001\u4f60\u8fd8\u597d\u5417?y\u001a\u00039\u0001\u505a\u4e5f\u8bb8\u597d\u8fc7\u4e0d\u505a.H\u0016\u00031\u0001\u5176\u4ed6\u4e1c\u897f\u4e5f\u884c-@\u0004\ufffd\u0001\u0002\u51ef\u5c14\u7279\u9646\u68da\uff0c\u662f\u4ec0\u4e48\u5927\u9646\u7684\u5927\u9646\u67b6\u7684\u4e00\u90e8\u5206?\ufffd\ufffd\u5982\u4f55\u5b9a\u4e49\u751f\u6d3bZ\u0017\u00033\u0001\u53ef\u8bfb\u6027\u5f88\u91cd\u8981.@1\u0003g\u0001\u5403\u559d\u7761 \u8fd8\u6709\u65c5\u884c\u3002 \u4f60\u559c\u6b22\u65c5\u884c\u5417?bC\u0004\ufffd\t\u0001\u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u7edd\u5999\u7684\u7406\u5ff5.\u6211\u4eec\u5e94\u5f53\u591a\u52a0\u5229\u7528.Ln\u0004\ufffd]\u0002\u54c8\u52c3\u592a\u7a7a\u671b\u8fdc\u955c\uff0c\u4e8e1990\u5e74\u53d1\u5c04\u8fdb\u5165\u8fd1\u5730\u8f68\u9053\uff0c\u5b83\u662f\u4ee5\u4ec0\u4e48\u7f8e\u56fd\u5929\u6587\u5b66\u5bb6\u547d\u540d\u7684?\u0003\u0019\u0001\u559c\u6b22c\u0003\u0013\u0001\u55e8k\u001d\u0003?\u0001\u55e8\uff0c\u5f88\u9ad8\u5174\u89c1\u5230\u4f60.|\u0017\u00033\u0001\u55e8\uff0c\u6700\u8fd1\u5982\u4f55?3:46\u6211\u4e0d\u600e\u4e48\u559c\u6b22 Java.SM\u0006\ufffd\u7684\u3002\u4f60\u5462\uff1f\ufffd\u0004\ufffd\u0003\u0002\ufffd\u0002L\u0001\ufffd\u0001\ufffd\u0001%\u98df\u7269?2017-07-31 08:53:46\u6d77\u9c9c\u3002\u9c9c\u5f97\u6211\u4e0d\u8981\u4e0d\u8981\u7684\u3002\u4f60\u5462\uff1fEV\u0006\u0003\u0019\u0001\u84dd\u8272\u001a:\u0003y\u0001\u867d\u7136\u8fd9\u5e76\u4e0d\u5bb9\u6613\uff0c\u56e0\u4e3a\u4f60\u4e0d\u662f Python \u4e4b\u7236.G\u001a\u00039\u0001\u86cb\u7cd5\u662f\u4e00\u4e2a\u8c0e\u8a00.)*\u0003Y\u0001\u8c01? \u8c01\u53ea\u662f\u4ee3\u8868\u4e86\u4e00\u4e2a\u4eba\u7f62\u4e86\u001c\r\n\u0003\u001f\u0001\u633a\u597d\u7684o\u0019\u00039\u0001\u001b\u001f\u65e9\u4e0a\u597d\uff0c\u4f60\u597d\u5417?\u0017\u00033\u0001\u660e\u4e86\u80dc\u4e8e\u6666\u6da9.< 08:53:46\u633a\u597d\u76842b\u0006\ufffd\u4ec0\u4e48\u0003\u0019\u0001\u633a\u597dn\u68f1\u4e24\u53ef\uff0c\u62d2\u7edd\u731c\u6d4b\u7684\u8bf1\u60d1.8\r\n\u0003\u0019\u0001\u662f\u554a\r\n\r\n\u0003\u001b\u0001\u662f\u554a.\r\n        \u0003\u001b\u0001\u662f\u7684.1\u001d\u0003?\u0001\u662f\u7684\uff0c\u6211\u6709\u4e2a\u95ee\u9898.\r\n\r\n                                      \u0003\u001b\u0001\u6b22\u8fce!l\r\ny:53:46\u4e0d\u600e\u4e48\u7684-r\u0006\ufffd\u5b83\u7684\u8f6c\u8f74\u65b9\u5411\uff0c\u4e0d\u53d7\u503e\u659c\u548c\u65cb\u8f6c\u7684\u5f71\u54cd\uff0c\u5b83\u53eb\u4ec0\u4e48?\ufffd\u0004\ufffd\u0003\u0004\u0003\ufffd\ufffd\u56fd\u6b4c?2017-07-31 08:53:47\u5927\u4e0d\u5217\u98a0\u8054\u5408\u738b\u56fdT}\u0006\uff0c\u5b83\u53eb\u4ec0\u4e48?2017-07-31 08:53:46\u9640\u87ba.\u5bb9\u548c\u7406\u89e3\u3002h\r\n\ufffd\ufffd\u5462?{\ufffd\u0002\u0004\ufffd\u0001\u6211\u6000\u7591\u8fd9\u4e0d\u662f\u4f60\u7684\u89c2\u5bdf\u529b, \u4f46\u8fd9\u4ec5\u4ec5\u662f\u95ee\u4e00\u4e2a\u6234\u9762\u5177\u7684\u4eba\u7684\u77db\u76fe\u6027\u8d28. \u8bf7\u544a\u8bc9\u6211\uff0c\u4f60\u559c\u6b22\u97f3\u4e50\u5417? \u0019\u00037\u0001\u6211\u633a\u597d\u7684\uff0c\u4f60\u5462\u0002\u0016\u00031\u0001\u6211\u662f\u4e2a\u7a0b\u5e8f\u5458O\u0011\u0003'\u0001\u6211\u770b\u4e0d\u61c2.\u0018\u0014\u0003-\u0001\u6211\u770b\u5f97\u51fa\u6765.\u001f*\u0003Y\u0001\u6211\u7ecf\u5e38\u4f7f\u7528 Python, Java \u548c C++ .Q\u001a\u00039\u0001\u6211\u80fd\u5e2e\u4f60\u4ec0\u4e48\u5417?\r\n\u0001\ufffd\ufffd\ufffd\u6b4c?\ufffd\u0004\ufffd\u0003\u6211\u80fd\u95ee\u4f60\u4e00\u4e2a\u95ee\u9898\u5417?]\r\nsqlite> \r\n``` \ufffd\ufffd\ufffd\ufffd \uff1f what's this... \r\n\r\n```\r\n1|\u00e5\u00a4\u00a7\u00e6\u00b1\ufffd\u00e4\u00b8\ufffd\u00e5\ufffd\u00bb\u00e6\u00b5\u00aa\u00e6\u00b6\ufffd\u00e9\ufffd\ufffd\u00ef\u00bc\ufffd\u00e6\ufffd\ufffd\u00e9\u00bb\ufffd\u00e9\u00a3\ufffd\u00e9\u00ab\ufffd\u00ef\u00bc\ufffd\u00e5\u00ae\ufffd\u00e5\u00be\ufffd\u00e5\u00b9\u00bf\u00e5\ufffd\u00a6\u00e5\ufffd\ufffd\u00e4\u00b8\ufffd\u00e9\ufffd\u00b4|\ufffd\ufffd\r\n```\r\n\r\nBut I used Chinese corpus will get this. \r\nMy server side code is :\r\n\r\n```python\r\nclass ChatbotHandler(RequestHandler):\r\n    def get(self, question):\r\n        result = '\u5c0f\u76ca\u8d39\u5c3d\u4e86\u4e5d\u725b\u4e8c\u864e\u4e4b\u529b\u672a\u80fd\u627e\u5230\u76f8\u5173\u5185\u5bb9'\r\n        try:\r\n            if question:\r\n                bot_result = chatbot.get_response(question)\r\n                if bot_result:\r\n                    result = str(bot_result)\r\n        except e:\r\n            print(e)\r\n        self.write(json.dumps({'data': result}, ensure_ascii=False))\r\n        self.finish()\r\n\r\ndef make_app():\r\n    return Application([\r\n        (\"/split/(.*)\", SplitHandler),\r\n        (\"/chat/(.*)\", ChatbotHandler)\r\n    ], autoreload=True)\r\n\r\ndef main():\r\n    print(\"listening port 8888...\")\r\n    app = make_app()\r\n    app.listen(8888)\r\n    IOLoop.current().start()\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n``` It's all my console error messages. I open db.sqlite3 in DB Browser it all looks good\r\n\r\n![image](https://user-images.githubusercontent.com/13664257/28775612-a40c0774-7610-11e7-9375-8009c3588678.png)\r\n Can you provide an address to download `DB Browser`? here source link http://sqlitebrowser.org/\r\n\r\non ubuntu these commands will work\r\n\r\n```\r\nsudo add-apt-repository -y ppa:linuxgndu/sqlitebrowser\r\n\r\nThen update the cache using:\r\n\r\n   sudo apt-get update\r\n\r\nInstall the package using:\r\n\r\n   sudo apt-get install sqlitebrowser\r\n```  I think adding this phase to here is much informative https://github.com/gunthercox/ChatterBot/blob/0dc1c1d22a27beb3c7bd7a2c4119201b4aceafe0/docs/django/wsgi.rst\r\n  When use SQLitestorage, Chinese looks like have some encoding problems.\r\n\r\n```sql\r\nsqlite> select * from StatementTable;\r\n11|\u00e5\u00a4\u00a7\u00e6\u00b1\u009f\u00e4\u00b8\u009c\u00e5\u008e\u00bb\u00e6\u00b5\u00aa\u00e6\u00b6\u009b\u00e9\u009d\u0099\u00ef\u00bc\u008c\u00e4\u00bd\u00a0\u00e5\u008f\u00af\u00e7\u009c\u009f\u00e5\u0083\u008f\u00e6\u0088\u0091\u00e7\u009a\u0084\u00e9\u009d\u0099\u00e9\u009d\u0099|\ufffd\ufffd\r\n12|\u00e4\u00b8\u008a\u00e6\u00b5\u00b7\u00e7\u009a\u0084|\ufffd\ufffd\r\n13|\u00e9\u0095\u00bf\u00e6\u00b1\u009f\u00e4\u00b8\u008d\u00e9\u0095\u00bf\u00ef\u00bc\u008c\u00e9\u00bb\u0084\u00e6\u00b2\u00b3\u00e4\u00b8\u008d\u00e9\u0095\u00bf\u00ef\u00bc\u008c\u00e4\u00bd\u00a0\u00e5\u0088\u00b0\u00e5\u00ba\u0095\u00e6\u0083\u00b3\u00e8\u00a6\u0081\u00e5\u00b9\u00b2\u00e5\u0098\u009b\u00ef\u00bc\u009f|\ufffd\ufffd\r\n```\r\n\r\nWhat's wrong with it...\r\n\r\nWhen I use this bot in server:\r\n\r\n```python\r\nclass ChatbotHandler(RequestHandler):\r\n    def get(self, question):\r\n        result = '\u5c0f\u76ca\u8d39\u5c3d\u4e86\u4e5d\u725b\u4e8c\u864e\u4e4b\u529b\u672a\u80fd\u627e\u5230\u76f8\u5173\u5185\u5bb9'\r\n        try:\r\n            if question:\r\n                bot_result = chatbot.get_response(str(question))\r\n                if bot_result:\r\n                    result = str(bot_result)\r\n        except e:\r\n            print(e)\r\n        self.write(json.dumps({'data': result}, ensure_ascii=False))\r\n        self.finish()\r\n```\r\n\r\nresponse with a fail encoding was:\r\n\r\n```json\r\n{\"data\": \"\u00e4\u00b8\u008a\u00e6\u00b5\u00b7\u00e7\u009a\u0084\"}\r\n```  Wiki link https://github.com/gunthercox/ChatterBot/wiki/Chat-Forms @gunthercox Master, I would like work on this feature, could you please guide how to do and where to do @vkosuri I'll put together a ticket for it with more details. @VanRH Nope, I will be sure to design it so that it can work independently from the environment where the chat bot is being hosted. It is the bot that will be filling in the fields for the form anyway.  @Issen007 Thank you, that would be greatly appreciated.  Smilar issue with nltk unable to download punkt  Build failed due to network issue unable to download nltk files, i am going to restart the job, hope this time it will green I am not sure why nltk not downloading ``/english.pickle`` Similar issue https://stackoverflow.com/questions/26570944/resource-utokenizers-punkt-english-pickle-not-found\r\n\r\n```Bash\r\n Resource u'tokenizers/punkt/english.pickle' not found.  Please\r\n\r\n  use the NLTK Downloader to obtain the resource:  >>>\r\n\r\n  nltk.download()\r\n\r\n  Searched in:\r\n\r\n    - '/home/travis/nltk_data'\r\n\r\n    - '/usr/share/nltk_data'\r\n\r\n    - '/usr/local/share/nltk_data'\r\n\r\n    - '/usr/lib/nltk_data'\r\n\r\n    - '/usr/local/lib/nltk_data'\r\n\r\n    - u''\r\n```  You can also specify file paths to corpus files or directories of corpus files when calling the train method.\r\n\r\n```\r\nchatterbot.train(\r\n    \"./data/greetings_corpus/custom.corpus.json\",\r\n    \"./data/my_corpus/\"\r\n)\r\n```\r\n\r\nWhat json format the corpus needed?\r\ndo you have an example for `custom.corpus.json`? Fixed wit #799  I have 1 million conversation, when train with ListTrainer, it's slowly. how to speed up it. yep, Does `ChatterBot ` used `processor` or other multiple thread when training? #799  ```\r\nfrom chatterbot.trainers import ListTrainer\r\n\r\n...\r\n\r\nchatbot.set_trainer(ListTrainer)\r\ntrainingSet = [\r\n\"Hello\",\r\n\"Hi\"\r\n]\r\n\r\nchatbot.train(trainingSet)\r\nchatbot.trainer.export_for_training('./train_export.json')\r\n``` @gunthercox When I use SQLite as the storage adapter, get this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/chatterbot/storage/sql_storage.py\", line 292, in _session_finish\r\n    session.commit()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/orm/session.py\", line 906, in commit\r\n    self.transaction.commit()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/orm/session.py\", line 461, in commit\r\n    self._prepare_impl()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/orm/session.py\", line 441, in _prepare_impl\r\n    self.session.flush()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/orm/session.py\", line 2171, in flush\r\n    self._flush(objects)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/orm/session.py\", line 2291, in _flush\r\n    transaction.rollback(_capture_exception=True)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/util/langhelpers.py\", line 66, in __exit__\r\n    compat.reraise(exc_type, exc_value, exc_tb)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/util/compat.py\", line 187, in reraise\r\n    raise value\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/orm/session.py\", line 2255, in _flush\r\n    flush_context.execute()\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py\", line 389, in execute\r\n    rec.execute(self)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/orm/unitofwork.py\", line 548, in execute\r\n    uow\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py\", line 181, in save_obj\r\n    mapper, table, insert)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/orm/persistence.py\", line 835, in _emit_insert_statements\r\n    execute(statement, params)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 945, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/sql/elements.py\", line 263, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1053, in _execute_clauseelement\r\n    compiled_sql, distilled_params\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1189, in _execute_context\r\n    context)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1402, in _handle_dbapi_exception\r\n    exc_info\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/util/compat.py\", line 203, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/util/compat.py\", line 186, in reraise\r\n    raise value.with_traceback(tb)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/engine/base.py\", line 1182, in _execute_context\r\n    context)\r\n  File \"/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sqlalchemy/engine/default.py\", line 470, in do_execute\r\n    cursor.execute(statement, parameters)\r\nsqlalchemy.exc.IntegrityError: (sqlite3.IntegrityError) UNIQUE constraint failed: ResponseTable.text, ResponseTable.text_search [SQL: 'INSERT INTO \"ResponseTable\" (id, text, occurrence, statement_text, text_search) VALUES (?, ?, ?, ?, ?)'] [parameters: (None, '\u77eb\u60c5\u7239\u5939\u7684\u5973\u4eba\u6211\u8981\u6084\u6084\u5bf9\u4f60\u8bf4:\u597d\u60f3\u4e00\u811a\u8e39\u6b7b\u4f60[\u53ef\u7231]', 1, '\u540c\u611f!', '{\"id\": null, \"text\": \"\\\\u77eb\\\\u60c5\\\\u7239\\\\u5939\\\\u7684\\\\u5973\\\\u4eba\\\\u6211\\\\u8981\\\\u6084\\\\u6084\\\\u5bf9\\\\u4f60\\\\u8bf4:\\\\u597d\\\\u60f3\\\\u4e00\\\\u811a\\\\u8e39\\\\u6b7b\\\\u4f60[\\\\u53ef\\\\u7231]\", \"occurrence\": 1, \"statement_text\": \"\\\\u540c\\\\u611f!\"}')]\r\nNone\r\n``` @WildDylan Which version of chatterbot are you using, I believe this error fixed in https://github.com/gunthercox/ChatterBot/pull/850,\r\n\r\nCould you please try to upgrade chatterbot to latest version to resolve this issue.\r\n\r\n```Bash\r\npip install --upgrade chatterbot\r\n``` @vkosuri Thx, I upgrade it Fixed that problem.\r\nanother question I need help: how to speed up the `get_response` when I have 1 million corpus in my database There any many other workarounds you could do with this great project. Thanks to Master @gunthercox made such a beautiful project. \r\n\r\nYou could consider this is a workaround, There are much more improvements on training and retrieval responses are  in pipeline in upcoming release.\r\n\r\nComing to speed up, you could write [your own training class ](http://chatterbot.readthedocs.io/en/stable/training.html#creating-a-new-training-class) with list comprehension example are located in this PR https://github.com/gunthercox/ChatterBot/pull/823\r\n\r\nThe reason this PR not consider into account due to lack of readability Okey, I will give a try.  I have use 1 million conversation to train this bot, How to know list training progress let's do it. Thanks for invitation  Some information about input and output adapters https://github.com/gunthercox/ChatterBot/issues/528\r\n\r\nThe tests are failing due to pep8 issue \r\n```\r\n4.20s$ flake8\r\n./chatterbot/output/hipchat.py:32:5: E303 too many blank lines (3)\r\n```  @Achimh3011 Thanks for your interest.\r\n\r\nThe tests are failing due flake8 issue\r\n\r\n``` Bash\r\n2.94s$ flake8\r\n\r\n./chatterbot/chatterbot.py:26:9: E303 too many blank lines (2)\r\n\r\nThe command \"flake8\" exited with 1.\r\n```  Closed by #914 \u2714\ufe0f   @nggary Chatterbot default storage adapter is ``SQLStorageAdapter``. \r\n\r\nIt uses database_uri to connect your database, more information available [here](http://chatterbot.readthedocs.io/en/stable/storage/index.html#sql-alchemy-storage-adapter). \r\n\r\nIf you want to know table properties use [find(statement_text)](http://chatterbot.readthedocs.io/en/stable/storage/index.html#chatterbot.storage.SQLStorageAdapter.find) procedure to check your statements are there or not  @Listade Could you please share your example code, to debug further.  Some references https://docs.mongodb.com/manual/tutorial/optimize-query-performance-with-indexes-and-projections/  @prakhar21 Yes, could you provide usecase/example how and what you are looking?  @nggary we haven't added ``python 3.6`` to travis. I think we have to add those @gunthercox Master any comments adding python 3.6 to travis?\r\n\r\n@nggary May be i think dateutil package won't come with python3.6, could you please try to install dateutil using pip ``pip install python-dateutil``  You have to write your own logic adapter to handle above scenario, For more information about custom logic adapter will find [here ](http://chatterbot.readthedocs.io/en/stable/logic/create-a-logic-adapter.html).\r\n\r\nHowever an example code located in this issue comment https://github.com/gunthercox/ChatterBot/issues/309#issuecomment-249583779  @PrabinPC I am assuming you are trying use this example on fallowing details\r\n\r\nOS: Linux\r\nLanguage: Python\r\n\r\n> Where to write the this section of code. Please kindly help me\r\n\r\nIf want run your script, here some of the steps i am trying to plot in Linux terminal\r\n\r\n1. Activate [virtual environment](http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/)\r\n2. Install chatterbot using [pip](https://github.com/gunthercox/ChatterBot#installation)\r\n3. Open new file using your [favorite editor](https://www.cs.colostate.edu/helpdocs/vi.html)\r\n4. Paste above [example](https://github.com/gunthercox/ChatterBot#basic-usage)\r\n5. Run it using Python interpreter.\r\n\r\n```Bash\r\n$virtuenv venv\r\n$source venv/bin/activate\r\n(venv)$pip install --upgrade chatterbot\r\n(venv)$vi bot.py\r\n# -- coding: utf-8 --\r\nfrom chatterbot import ChatBot\r\nchatbot = ChatBot(\"Ron Obvious\")\r\n:wq\r\n(venv)$python bot.py\r\n```  @nggary \r\n\r\n> Do i need to create a new logic adpater for this? If so, how to teach the bot to identify the currecny code/name/amount from input and match it with database.\r\n\r\nYes, here is an example of [Mathematics Evaluation](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/logic/mathematical_evaluation.py)\r\n\r\n> Second question is how to create corpus embedded with dynamic value from database. For example, if i want to ask the bot about the open time of office\r\n\r\nYou could found more information in this thread https://github.com/gunthercox/ChatterBot/issues/820\r\n Yes, you can write using some type template mechanism, here is an example i have wrote long back https://github.com/gunthercox/ChatterBot/issues/518#issuecomment-268188844  @amanvars Similar issue https://github.com/gunthercox/ChatterBot/issues/831  Similar issue https://github.com/gunthercox/ChatterBot/issues/717.\r\n\r\n@anantbara might be this solution will work https://github.com/gunthercox/ChatterBot/issues/717#issuecomment-309488888  @gunthercox Master, Looks good to me the above approach. I have few question on above process.\r\n\r\nIf the entire corpus database has question and answers,  For example UbuntuCorpus.\r\n\r\nthe above approach will improve request and response time? how could be the approach such corpus models? @mymusise We are working on changes that will prevent the full dataset from needing to be searched each time a new input is received. #924 and #925 have further details on what changes will be made.  @juanpialbano Currently there is no support on Java. However you could make other workarounds like [Django integration](http://chatterbot.readthedocs.io/en/stable/django/index.html)  I thought this feature would be useful while creating pull requests and issues. More information https://github.com/blog/2111-issue-and-pull-request-templates and https://www.talater.com/open-source-templates/#/page/1\r\n\r\nSome examples exists here https://github.com/stevemao/github-issue-templates\r\n\r\n@gunthercox Master, it seems to useful, I'll create PR.   @Olagsfark Thank you. ``chatterbot_corpus`` will come through ``chatterbot`` requirements. \r\n\r\nCould you please try to do update chatterbot by using  ``pip install --upgrade chatterbot``. \r\n\r\nStill if you are seeing same error message. Try to install ``chatterbot_corpus`` individually ``pip install --upgrade chatterbot_corpus``\r\n  @juanpialbano A detailed information available here http://chatterbot.readthedocs.io/en/stable/#how-chatterbot-works\r\n\r\nHowever i would like add some information here on learning process. \r\n\r\n1. Chatterbot is Retrieval-Based Bot , all retrieval-based bot are uses some [pre-defined responses](https://github.com/gunthercox/ChatterBot/wiki/ChatterBot-Corpus-Specification#data-representation-schema). If you want you could look [chatterbot multilingual dialog corpus](https://github.com/gunthercox/chatterbot-corpus/tree/master/chatterbot_corpus/data) to get more families with chatterbot corpus.\r\n\r\n2. After that you have to [train](http://chatterbot.readthedocs.io/en/stable/quickstart.html#training-your-chatbot) your bot. \r\n\r\n3.  The [training process](http://chatterbot.readthedocs.io/en/stable/training.html#training) stores all  [statements ](http://chatterbot.readthedocs.io/en/stable/conversations.html#statements) and [responses ](http://chatterbot.readthedocs.io/en/stable/conversations.html#responses) into a [specified database](http://chatterbot.readthedocs.io/en/stable/storage/index.html#storage-adapters).\r\n\r\n4. And also forms a [statement-response-relationship ](http://chatterbot.readthedocs.io/en/stable/conversations.html#statement-response-relationship)\r\n\r\n5. When ever user inputs statements, the response selection process uses some [logic adapters](http://chatterbot.readthedocs.io/en/stable/storage/index.html) to select proper response by [compare ](http://chatterbot.readthedocs.io/en/stable/conversations.html#statement-comparison) each statement with inputted statement.\r\n\r\nPlease let me know if you are still looking any more information.\r\n @juanpialbano Thanks for your inputs we will improve that phase\r\n\r\n> When the Chabot makes a response, it stores the request-response in the database for future queries?\r\n\r\nYes, \r\n\r\n> How does he know if a request-response was right o wrong so he can use it in the future ?\r\n\r\nUsing [Response selection methods](http://chatterbot.readthedocs.io/en/stable/logic/response_selection.html#module-chatterbot.response_selection)\r\n\r\nLet me know if you need any further help\r\n  \ud83d\udcaf   @harshalgaydhankar which version of chatterbot version are you using currently? To know current version chatterbot use below command.\r\n\r\n``` Bassh\r\npython -m chatterbot --version\r\n```\r\n\r\nIf you are unable to get ``chatterbot`` version, try to install chatterbot by using this command. If you get any permission related errors try to append ``sudo`` before pip if you are using ``Linux/Ubuntu`` Platforms.\r\n\r\n```Bash\r\npip install --upgrade chatterbot\r\n``` I am unable to figure your issue, how are you installing/upgrading ``chatterbot`` through virtual enviroment or system level? Your were in current chatterbot installation directory, could you try relative import like below? \r\n\r\n```Python\r\nfrom .chatterbot import ChatBot\r\n```\r\n\r\nMore information available here https://stackoverflow.com/questions/12172791/changes-in-import-statement-python3 Thanks @shashwatbhatt, Another guess could be ``D:\\Program Files (x86)\\Python35-32\\`` is not in system path. \r\n\r\nTo know system path, try below commands. If ``D:\\Program Files (x86)\\Python35-32\\`` not added to python path, please add it in [windows system environment variables](https://stackoverflow.com/questions/3701646/how-to-add-to-the-pythonpath-in-windows-7).\r\n\r\n```Python\r\nimport sys\r\nprint(sys.path)\r\n``` I am sorry i am unable to figure it your issue on my machine with python 3.4, I see these type issues if you have multiple variants of pythons installed in your machine. Do you have multiple variants of pythons are installed in your machine?  Makefiles are a simple way to organize code compilation on ``Linux platforms``.  Ref Issue: https://github.com/gunthercox/ChatterBot/issues/815\r\n\r\n@gunthercox Master comments/suggestion on this PR? @gunthercox any comments / suggestions  @gunthercox Master any comments/suggestion?  I think having this example would be useful Ref: https://github.com/gunthercox/ChatterBot/issues/820 \ud83d\udc4d  @davizucon My views are like this. Yes you could truly achieve this task but applying some hacks on chatterbot.\r\n\r\nYou have to prepare a your train data with some external input/event methods for example external REST API calls. \r\n\r\nThere are many open external event generators are available open. For example Google, Microsoft, etc. \r\n\r\nRelated issue https://github.com/gunthercox/ChatterBot/issues/482\r\n\r\nI have described this issue through an example. \r\n\r\n```Python\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\n\r\n\r\n# Create a new instance of a ChatBot\r\nbot = ChatBot(\r\n    'Action or Intent Response Example Bot',\r\n    storage_adapter='chatterbot.storage.SqlStorageAdapter',\r\n    logic_adapters=[\r\n        {\r\n            'import_path': 'chatterbot.logic.BestMatch',\r\n            'statement_comparison_function': 'chatterbot.comparisons.jaccard_similarity',\r\n            'response_selection_method': 'chatterbot.response_selection.get_first_response'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.SpecificResponseAdapter',\r\n            'input_text': 'Help me!',\r\n            'output_text': 'Ok, here is a link: https://openweathermap.org/current'\r\n        }\r\n    ],\r\n    trainer='chatterbot.trainers.ListTrainer'\r\n)\r\n\r\n# Train the chat bot with a few responses\r\nbot.train([\r\n    'Current weather in London',\r\n    'http://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b1b15e88fa797225412429c1c50c122a1',\r\n    'Have you read the documentation?',\r\n    'No, I have not',\r\n    'This should help get you started: http://chatterbot.rtfd.org/en/latest/quickstart.html'\r\n])\r\n\r\n# Get a response from bot\r\nresponse = bot.get_response('weather in London?')\r\n# Handle JSON data, get all required data and print them\r\nprint(response)\r\n```\r\n\r\n @davizucon I think the specified information is sufficient, I am closing off this issue, please feel free reopen if you have any specific question on this issue.  With Referencing pull request comment https://github.com/gunthercox/ChatterBot/pull/809#discussion_r125018676\r\n\r\nYes, I agree with @gunthercox comment, readability :eyes: is very important it will gives us many advantages for example\r\n\r\n- Catching issues will be very easier and new develop/integration will become very easier.\r\n- Etc.\r\n\r\nYes sometime it is necessary to pick response also, With some hacks the below formats are looking good to me, the method i named it here :arrow_heading_up: **Bottom to top approach for list comprehension**, will provide more readability :eyes:\r\n\r\nI did some exercise on some examples, please provide your comments/suggestion on this.\r\n\r\n```Python\r\n# Find the closest matching known statement\r\nfor statement in statement_list:\r\n    confidence = self.compare_statements(input_statement, statement)\r\n\r\n    if confidence > closest_match.confidence:\r\n        statement.confidence = confidence\r\n        closest_match = statement\r\n```\r\n\r\nvs\r\n\r\n```Python\r\n# The bottom to top approach for list comprehension, gives more readability\r\nclosest_match_and_confidence = [\r\n    [\r\n        statement,\r\n        self.compare_statements(input_statement, statement)\r\n    ] for statement in statement_list\r\n]\r\n```\r\n\r\nSome more examples\r\n```Python\r\nfor statement in statement_list:\r\n    for response in statement.in_response_to:\r\n        responses.add(response.text)\r\n```\r\nvs\r\n```Python\r\n# The bottom down approach for list comprehension, gives more readability\r\n[\r\n    responses.add(response.text)\r\n    for statement in statement_list\r\n    for response in statement.in_response_to\r\n]\r\n````\r\n\r\nIf it is looks good I'll try to make a PR which discussed here https://github.com/gunthercox/ChatterBot/pull/738  It is failing at\r\n\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/travis/build/gunthercox/ChatterBot/tests_django/test_django_adapter.py\", line 323, in test_confidence\r\n\r\n    self.assertEqual(statement_updated.confidence, 0)\r\n\r\nAttributeError: 'Statement' object has no attribute 'confidence'\r\n```  @bilalbayasut Any further updates?  @neopedro Try to add ``encoding header`` to your source file. for example ``# -*- coding: utf-8 -*-``.\r\n\r\nIf you share stack trace of what you have encountered error to debug further. @neopedro I think you want `statement.text`, this is the string value of the statement.  It seems to me that you transfer your requests from a ``web server`` to ``chatterbot``. This might converted your statmenet object into a string, If possible could you try to run your code stand alone before integrated into ``webserver`` If possible I'll will help you, if you could share your server code? learn_response accepts ``statement`` object but you are passing ``strings``, try to look feedback example once again for more information  I am closing this issue, feel free to reopen if you have any questions   This pipeline could be better described. This is something I was thinking of tackling. However, I would not be opposed to it if anyone wanted to submit a pull request or even just make suggestions.\r\n\r\nThis is primarily going to be closer to the code perspective, possibly not mentioning any specific adapters. My goal is to go through the code and outline some useful implementation details, such as what order various method are called in, and when initialization occurs for different types of classes.  Hi @sanyam8182, have the required NLTK files been downloaded to your local server? > have the required NLTK files been downloaded to your local server?\r\n\r\nIt means, the chatterbot running machine, in your case your NLTK downloaded machine. Try to do fallowing steps\r\n\r\n``` Bash\r\n>>> import nltk\r\n>>> print(nltk.data.path)\r\n```\r\nCheck the files are copied into specified above directory or not. If files are there then it should work, even after also you are getting same error, try to download all corpus files\r\n\r\n```Bash\r\n$ python3\r\n>>> import nltk\r\n>>> nltk.download('all')\r\n``` your home dir i.e '/Users/yuvikakoul/nltk_data'\r\n @sanyam8182 Remove the files it contains. They will be re-downloaded (hopefully without errors this time) automatically by ChatterBot.  Now that the SQL adapter is fully working it should be safe to add documentation on it so that other developers can learn about it and use it for their projects. Thank you very much. \ud83d\udc4d   Hi @Barathwaja, it looks like the data you downloaded isn't in a format that ChatterBot can read. You can still use this data but you will need to find a way to convert it to match the format that ChatterBot's training classes expect.\r\n\r\nHere is a short example of the format that ChatterBot expects it's corpus data to be in:\r\n\r\n```json\r\n\r\n{\r\n    \"conversations\": [\r\n        [\r\n            \"Good morning, how are you?\",\r\n            \"I am doing well, how about you?\",\r\n            \"I'm also good.\",\r\n            \"That's good to hear.\",\r\n            \"Yes it is.\"\r\n        ],\r\n        [\r\n            \"How are you doing?\",\r\n            \"I am doing well, how about you?\",\r\n            \"I am also good.\",\r\n            \"That's good.\"\r\n        ],\r\n        [\r\n            \"Have you heard the news?\",\r\n            \"What good news?\"\r\n        ],\r\n        [\r\n            \"What is your favorite book?\",\r\n            \"I can't read.\",\r\n            \"So what's your favorite color?\",\r\n            \"Blue\"\r\n        ]\r\n    ]\r\n}\r\n```\r\n\r\nThere is more information on the current set of available corpus trainers for ChatterBot in the documentation http://chatterbot.readthedocs.io/en/stable/training.html You could always write your own training class that takes the planetary data file directly. Sure, maybe an example would help? This is what the corpus trainer that is currently used looks like. It takes each conversation that is listed in the corpus and adds it to the bot's knowledge base. Each \"conversation\" in the training data is a series of statements where each statement is a response to the previous one.\r\n\r\nYou would probably want to make modifications so that your version converts the planetary data into sentence-like data so that the chat bot's responses sound natural.\r\n\r\n```python\r\n# https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py\r\nfrom chatterbot.trainers import Trainer\r\n\r\nclass ChatterBotCorpusTrainer(Trainer):\r\n    \"\"\"\r\n    Allows the chat bot to be trained using data from the ChatterBot dialog corpus.\r\n    \"\"\"\r\n\r\n    def __init__(self, storage, **kwargs):\r\n        super(ChatterBotCorpusTrainer, self).__init__(storage, **kwargs)\r\n        from .corpus import Corpus\r\n\r\n        self.corpus = Corpus()\r\n\r\n    def train(self, *corpora):\r\n        trainer = ListTrainer(self.storage)\r\n\r\n        # Allow a list of corpora to be passed instead of arguments\r\n        if len(corpora) == 1:\r\n            if isinstance(corpora[0], list):\r\n                corpora = corpora[0]\r\n\r\n        # Train the chat bot with each statement and response pair\r\n        for corpus in corpora:\r\n            corpus_data = self.corpus.load_corpus(corpus)\r\n            for data in corpus_data:\r\n                for pair in data:\r\n                    trainer.train(pair)\r\n```  I am using only cProfile, you could try like this\r\n\r\n```Bash\r\npython -m cProfile -o output_file.log examples/terminal_example.py\r\n```  A development spike should be do to experiment with the idea that not all storage adapters need to support the `extra_data` parameter for statements. This parameter is easy to support for no-sql databases but it is difficult to implement for sql based databases.\r\n\r\nI'm assigning myself to complete this research. Depending on what I find regarding the feasibility of implementing this I will either create a pull request with the necessary changes or I will close this ticket, noting the reasons why it was not the path to follow.  `Even after @gabru-md suggestion didn't worked, try to ``pip install chatterbot`` If it is Linux flavor try to ``sudo pip install chatterbot``  @sal48 Great resolving your issue, if possible could you make a PR to solve this issue? Hi @sal48, I can confirm the issue that you encountered.\r\n\r\n```\r\n 31, in __init__\r\n    room_data = self.join_room(self.gitter_room)\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/input/gitter.py\", line 58, in join_room\r\n    self._validate_status_code(response)\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/input/gitter.py\", line 41, in _validate_status_code\r\n    raise self.HTTPStatusException('{} status code recieved'.format(code))\r\nchatterbot.input.gitter.HTTPStatusException: u'404 status code recieved'\r\n```  @AmusingThrone Yes, The corpus files are located here https://github.com/gunthercox/chatterbot-corpus/tree/master/chatterbot_corpus/data\r\n\r\n I am closing off this issue, it was addressed here https://github.com/gunthercox/chatterbot-corpus/pull/23  @saraalosaid any updates about this issue?  @decode007 Current chatterbot support only simple JSON.\r\n\r\n``` JSON\r\n{ \"converstation\":\r\n   [\r\n      \"statement\",\r\n      \"response\"\r\n   ]\r\n}\r\n```\r\n\r\nBy looking your JSON response, you could write your own trainer class by extending base [Train ](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py#L5) class and override it member [train ](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py#L14) function, for example [UbuntuCorpus](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py#L216)\r\n\r\nAdd addition details using [add_extra](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py#L350) statement object\r\n\r\nMore information about we could found here [statement ](http://chatterbot.readthedocs.io/en/stable/conversations.html?highlight=extra_data#statements) @decode007 I am closing this issue, Feel free reopen this issue if you have any questions.  @decode007 I think you have to write you own logic adapter based on your question, more information about how to write a new logic adapter documented here http://chatterbot.readthedocs.io/en/stable/logic/create-a-logic-adapter.html @decode007 I am closing off this issue, Still your problem isn't resolved, please feel free to reopen this issue.  1. Neural networks :heavy_multiplication_x:\r\n2. ML :heavy_check_mark:\r\n3. Deep learning :heavy_multiplication_x:\r\n4. just some rule based (string distance -levenshtein distance) methodologies :heavy_check_mark:\r\n5. contextual :heavy_check_mark:\r\n\r\n  I'm assigning this task to my self to make sure that the documentation on training chat bots under Django configurations is clear and concise. @MYZ88 could you please let us know what changes you did make it work? I think it can help improve more documentation I haven't started work on this yet. Any feedback regarding the current documentation and any unclear parts of it would be useful.  Master, I see many users are using anaconda for development/production environments. I think adding anaconda/conda to Travis will give a value add. For more information https://conda.io/docs/travis.html\r\n\r\nIf it is ok, can i make a PR? Feel free to make a pull request. I'm not sure if all tests will pass at first, there seems to be some odd differences between normal Python installations and Anaconda setups. Thanks Master i'll post my observations along with pull change   Hi @lucas-alberto98 , I have seen this error reported several times. It is caused by a broken NLTK data download. This problem can be fixed if you remove the NLTK corpus files that get automatically downloaded. The folder you want to delete is called `nltk_data`. It is created automatically by the NLTK Python library. Usually, `nltk_data` can be found in your home directory, although it can be different depending on what operating system you have.  I think the last line of this stack trace might be the best clue as to what is going wrong.\r\n\r\n> PermissionError: [Errno 13] Permission denied: 'database.db'\r\n\r\nFor some reason ChatterBot can't create a new database file in whatever directory the chat bot is being executed in. The reason, as specified in the stack trace is that it doesn't have permission to do this.\r\n\r\nOne way you may be able to fix this is to create a new file called `database.db` in the directory that you want to execute your chat bot from.  Apologies, I don't understand Chinese language could you please elaborated in English? Please correct me if I'm wrong. I want to try to paraphrase the problem you are describing to make sure that I understand it.\r\n\r\nYour chat bot always returns the same output, regardless of what input it receives. Am I correct? @Air-boy Is it possible that the response is being given on every input because there isn't another alternative for the chat bot to respond with? @Air-boy I apologize, I don't think I fully understand what you are asking. @Air-boy I apologies, I have modified your post to understand more, From your question i understood like this, correct me if i am wrong.\r\n\r\nThe [RepetitiveResponseFilter ](http://chatterbot.readthedocs.io/en/stable/filters/index.html?highlight=RepetitiveResponseFilter) isn't working as expected, then you have written your own filters, is this correct?\r\n\r\nYou are suggesting here, If you use [RepetitiveResponseFilter ](http://chatterbot.readthedocs.io/en/stable/filters/index.html?highlight=RepetitiveResponseFilter) the ``response`` should be corresponding ``statement`` only in your corpus file, even if you have tried ``n`` number times that should not change, this is correct?\r\n\r\nIf you feel it is a bug, please submit a PR  Hope this will help\r\n\r\n``` Python\r\nchatterbot = ChatBot(\"chatterbot\",\r\n    'response_selection_method'': 'get_random_response',\r\n    'storage_adapter': 'chatterbot.storage.MongoDatabaseAdapter',\r\n    'logic_adapters' : [    \r\n        {\r\n            'import_path': 'chatterbot.logic.BestMatch'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 0.90,\r\n            'default_response': 'OhNo'\r\n        }\r\n    ],\r\n    'database':'Chat_Questions'\r\n)\r\n```\r\n\r\n @MYZ88 The solution suggested by @vkosuri is accurate. You just need to modify your Django settings to follow a the parameter pattern. For example, your Django settings might look like this:\r\n\r\n```python\r\nCHATTERBOT = {\r\n    'name': 'Django ChatterBot Example',\r\n    'logic_adapters': [\r\n        {\r\n            'import_path': 'chatterbot.logic.BestMatch'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 0.90,\r\n            'default_response': 'OhNo'\r\n        }\r\n    ],\r\n```  I think the current version of chatterbot does support this feature. Hi @Cosmos19, I don't believe an example for this has been included. You can do this by passing a unique identifier to the chat bot when getting a response. For example:\r\n\r\n```python\r\nunique_id = 'something_unique'\r\nchatbot.get_response(user_input, unique_id)\r\n```\r\n\r\nLet me know if you have any questions or if there is anything you I clarify. @Cosmos19 because there is no session with your unique_id, instead you could try to create a separate session for conversation, I think this line will help how to create sessions https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/chatterbot.py#L75  @Cosmos19 I think if you specific question about how to do this, please post your question in stack-overflow https://github.com/gunthercox/ChatterBot/issues/703 with https://stackoverflow.com/questions/tagged/chatterbot tag, hope you will get more responses.\r\n\r\nInstead asking question here make use of stack-overflow,  this issues tracker is meant only for Chatterbot issues. \r\n\r\n@gunthercox Any inputs? @Cosmos19 You don't need to worry about re-posting your question on Stack Overflow. You have already asked it here and I will make sure that it gets answered if possible.\r\n\r\nThere is actually an existing example that is used in ChatterBot's codebase. In one of the default Django views (typically only used when one is using ChatterBot with Django), a new session is created for different users that visit the site. I believe the code from the view may provide an additional example that would be helpful. https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/ext/django_chatterbot/views.py\r\n\r\nI believe the error that you are encountering is because a session id needs to be created by the chat bot before it can be used. You can create a new session like this:\r\n\r\n```python\r\nchat_session = self.chatterbot.conversation_sessions.new()\r\n```\r\n\r\nThen, if you save the session somewhere, you can use the id later when you need to access it again like this:\r\n\r\n```python\r\nresponse = chatbot.get_response(input_data, chat_session.id_string)\r\n```  Its python requests error, instead I'll try make a PR, to download Ubuntu corpus file  @peterel I am busy with my other tasks, If possible could you make a PR?  @iamhssingh Thanks, I am very new to [Aragon DB](https://www.arangodb.com/), I have few questions on this\r\n\r\n> Now I am thinking to create edges and graphs. This will boost the speed to getting statement significantly. How does that sound as a feature?\r\n\r\nDoes this feature has capable to know prior graphs information. for example\r\n\r\n```\r\nUser: Hey, Give me some milk\r\nBot: no, you have to purchase a token before\r\n``` @iamhssingh sure  thanks, and documentation possible  I am closing this issue, Updated in PR https://github.com/gunthercox/ChatterBot/pull/770  Its pep8 failure at chatterbot/storage/arangodb.py:134:42: W503 line break before binary operator\r\n It seems to me a network issue, i have restarted the job again, hope it will pass see this example https://github.com/gunthercox/ChatterBot/blob/master/tests/storage_adapter_tests/test_mongo_adapter.py  @iamhssingh so far looks good to me, I never used aragon db i need to try something on machine to explore more, I feel @gunthercox needs review this PR @gunthercox Master any comments  I'll total agree with @gunthercox   This could help you http://chatterbot.readthedocs.io/en/stable/storage/create-a-storage-adapter.html https://help.github.com/articles/creating-a-pull-request/  @dekken201 Currently chatterbot uses json files.\r\n\r\nYou have two lists of data right?, one for question and one for answer?\r\n\r\none  question related to your question, Is your questions and answers are in same ordered lists?\r\n\r\nIf so, you could use [zip](https://docs.python.org/2/library/functions.html#zip) to combine your lists and train your bot\r\n\r\nIf not if possible could you share example train data?\r\n Yes, You could write your own class by extending Train class train method https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py#L16  No  I checked it is working as expected. Could you please let me how you are Inputted your inputs @nonlin could you place your solution, It helps others.  I'm going to close this ticket off. @vkosuri is correct, ChatterBot uses NLTK for natural language processing (NLP).  This functionality isn't currently supported. Do you have an example use case for when this would be needed? ChatterBot supports the ability for you to [add your own](http://chatterbot.readthedocs.io/en/latest/storage/create-a-storage-adapter.html) \"storage adapters\" to connect to databases as you see fit. You are welcome to modify the [existing storage adapter for Mongo DB](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/storage/mongodb.py) to switch databases depending on the requested content.\r\n\r\nRight now this isn't a feature that has been commonly requested in ChatterBot and I'm not sure that I can justify adding this functionality to the project. Luckily the flexibility to create custom storage adapters does exist and I hope that it will provide enough functionality for you to accomplish what you need.  I can't seem to recreate this error on my system. If anyone can create a training test case that fails when it should pass for this data it would help to resolve the error. Until then there isn't much I can do because I don't have a way to test or recreate this. @lashkarpalash What version of ChatterBot did you encounter this issue with? current chatterbot version is ``0.7.0``, could you try to upgrade to latest version and let me know\r\n\r\n``pip install --upgrade chatterbot``\r\n\r\n  @gabru-md It can be done. Responses can be updated directly in the database (no utility methods have been added for doing this). Do you have any recommendations for what would be useful to provide for correcting \"incorrect\" responses? Given @sanyam8182's answer I am going to close this off. ChatterBot is a learning-based chat bot and the example above show a good example of how to get additional information from the user to teach the chat bot with.  It currently does not support queries but it will in the future.\n\n>\n  Hi @ralic thank you for this pull request. It look like the tool you used made a number of changes that actually break ChatterBot in both Python 2 and 3.\r\n\r\nDid you encounter any errors in Python 3 that motivated these changes?\r\n\r\nChatterBot designed to be compatible with both Python 2 and 3 and it has continuous integration that helps ensure this https://travis-ci.org/gunthercox/ChatterBot (however there is always a chance that something was missed in due to an oversight in the test cases)  @telkomops I'm working on a solution that involves caching and additional filtering. The solution to this issue likely wont be available until the next major release of ChatterBot. @dyf6372 Database-level caching is a good start. When I mentioned caching I was referring to the various search and comparison algorithms that the chat bot uses to analyse statements and select responses. These often calculate values and these calculations can be costly when it comes to time. Closing this as a duplicate of #697  @davizucon I might add some changes to this pull request later today. Is it alright if I work on it?  This is an error that occurs sometimes as a result of a bad NLTK corpus download. ChatterBot downloads this data automatically when it starts up.\r\n\r\nSee if the solution that was reached in https://github.com/gunthercox/ChatterBot/issues/736#issuecomment-301325738 works for you. Let me know if deleting the downloaded data files doesn't solve the issue.\r\n\r\nAlso noting that this was reported in (#662, #634, #657, #672).  Hi @Marcogb81, what editor are you using? I see that there is a `.idea` directory in the trceback and I am wondering if this error is occurring because of the configuration of this editor.  Currently it is required for `create=True` to be set when using to `SQLAlchemyDatabaseAdapter` for the first time so that it creates the tables in the database. This should only need to happen once.\r\n\r\n- A check should be added so that when the storage adapter is initialized it checks to see if the tables exist.\r\n- If the tables do not exist, then they should be created.\r\n- The `create=True` parameter should be removed. @apoorv-mishra My apologies for the delayed response. It is usually best to avoid the use of global variables unless absolutely necessary. I'm still familiarizing myself with how SQL Alchemy works and at this point I don't have an accurate recommendation that I can provide. I believe that the part you mentioned about checking if the table is created upon initialization is correct. If I were going to implement this I would likely investigate a solution following that notion.  Hi @lijun900302 It sounds like this might be a simple Python encoding issue. I noticed that you are using iPython and I am aware that developers seem to encounter errors like this more frequently with Anaconda distrobutions of Python. If you have a way to set the encoding in iPython this might fix the problem. I've attempted to recreate this issue using the latest version of ChatterBot and `chatterbot-corpus`. I believe this may have been corrected in a previous release.  @vkosuri, I manually restarted the test. Ideally it wont encounter any network issues this time. @gunthercox Master, any updates? do you want me close this issue or can I rework? I am closing this PR, It's not an optimal solution  I've seen this happen sometimes when the NLTK library downloads its data files incorrectly the first time. You can fix it by deleting the NLTK data files so that it then re-downloads them correctly. You will need to figure out where they have been downloaded to on your computer, there are a few places you can check:\r\n\r\n- 'C:\\Users\\<username>/nltk_data'\r\n- '/home/<username>/nltk_data'\r\n\r\nIf the `nltk_data` file isn't in either of these locations on your computer then you can run the following to get the full list of locations that it checks for the data:\r\n\r\n```python\r\nimport nltk\r\nprint(nltk.data.path)\r\n``` No problem, I check my email quite frequently. Although, I prefer issues for things related to this project because it lets me keep track of everything better and I already have so many emails to respond to.\r\n\r\nOne suggestion I have is that it might be a good idea to open one issue per question, that way I can mark it as closed once it is completely answered.  Hi @xilu0, it is important to note that the ChatterBot storage adapter for Mongo DB is not designed to work with the Django ORM. If you want to use Mongo DB with ChatterBot you will need to modify your Django project to use a \"Django storage backend\" for MongoDB. There are a few popular ones available such as:\r\n\r\nhttps://django-mongodb-engine.readthedocs.io/en/latest/topics/setup.html  Hi @apoorv-mishra, thank you very much!  @MYZ88 Hopefully I can address each of your questions.\r\n\r\n> I still not getting the learning part of chatterbot although I go through the documentation. When I talk to the chatterbot I understand that it save what I write in the database but how it will affect the future response what I see its remain same. Can you give me example of this part.\r\n\r\nAs you talk to the chat bot, it learns based on how you respond to it. For example, if the chat bot says \"How are you?\" and you reply \"I am well\", then the chat bot will learn that \"I am well\" is a possible valid response to the phrase \"How are you?\".\r\n\r\n> If I want to access chatterbot, I mean to talk to the bot from the smartphone is there a simple way to do that. If you have a tutorial of example if will be great\r\n\r\nThere isn't _really_ a simple way to do that. You could create a small web service, with an API that a smart phone app could could communicate with, but I wouldn't call that simple.  I'm going to close this issue as the question in the title has been answered and the additional questions asked in the comments appear to be duplicates of #725. I will respond to them on their corresponding ticket to try to keep this organized.  Hi @kenyeung128, could you describe what you mean by a \"flow based\" conversation? If you could provided an example or link to an article that describes it that would be perfect.  @FakerGit I attempted to recreate the issue you encountered under the following conditions:\r\n\r\n- ChatterBot version 0.6.0\r\n- Python 2.7\r\n\r\nRunning the code snippet you provided I could not recreate this error. The only possibility I can think of is that you may have made modifications to the source code locally?\r\n\r\nI'm going to close this issue, feel free to reopen it if you believe this is an error in ChatterBot's codebase.  @Air-boy There is not a simpler way to organize the training data. The corpus files that ChatterBot uses are just simple structured data. If you need to generate data that has lots of redundant responses to a particular input I would assume that it would be simple to write some code to generate a corpus training file that contained each variation of the statement and it's possible responses.  It would be optimal if the tests for the SQL adapter could be run with the database in memory. This would have better performance and make cleanup easier. Sqlite does support this.\r\n\r\n**From the documentation (http://docs.sqlalchemy.org/en/latest/core/engines.html):**\r\n\r\nTo use a SQLite `:memory:` database, specify an empty URL:\r\n```python\r\nengine = create_engine('sqlite://')\r\n``` Closed by #745  I believe it is an issue in the storage adapter, I still need to check over the code and figure out where the inconsistency is. @andpark could you please submit a PR for this issue? Do the changes in #630 solve this issue? No Master, Still they are in reverse order even after #630\r\n\r\n![image](https://user-images.githubusercontent.com/13664257/27212375-3ef85204-527d-11e7-90a9-0d8cef91fe10.png)\r\n\r\n![image](https://user-images.githubusercontent.com/13664257/27212441-a593a874-527d-11e7-9481-d81c23358a19.png)\r\n  Thank you  Could you elaborate a bit more about what frequency and density are? I'm not sure if this would benefit ChatterBot either. I'd be open to suggestions on design or implementation details regarding this if you or anyone else has suggestions about how something like this could be used to accomplish any learning or response generation tasks. For now however, I'm going to close this ticket off.  I've labeled this as a possible bug. I will investigate this as soon as possible.  Can you confirm that mongodb is running? It's possible that this is getting stuck because it it waiting for a connection. @reubenkhanna I apologize for the late response. The reason you are not getting a response is because of the chat bot is waiting for input from the console. You likely need to use a different input adapter so that the bot won't be waiting for console input.\r\n\r\nI recommend using the `VariableInputTypeAdapter` which is describe in more detail here: http://chatterbot.readthedocs.io/en/stable/input/  I think the error message is correct. See the line that says:\r\n\r\n> NameError: name 'chatbot' is not defined\r\n\r\nHave a look at this example for what needs to be included: http://chatterbot.readthedocs.io/en/latest/examples.html#simple-example  Hi @ProdigyTech Based on your description it sounds like you don't have the Python `python-twitter`  package installed.  I noticed that the test databases created by the SQLite storage adapter test cases are not being deleted when testing is concluded. As a result, several database files are created each time tests are run.  Yes, possibly this weekend. @vkosuri Apologies. I haven't had a chance to get around to drafting a new release yet. There is still a few possible issues that I want to investigate with the new SQL Alchemy adapter before doing the release.  Currently there isn't one. I wouldn't be opposed to creating a community forum for ChatterBot.\r\n\r\nDo you have any recommendations or examples of other projects that do a good job of this? Right now I think I'm leaning towards Stack Overflow. Google even uses it for many of their Python packages. I do agree that there is a barrier for beginners but I think that may possibly be a positive element because there are a lot of other resources out there for absolute beginners when it comes to programming. I may be wrong about this, but from my perspective it is somewhat beneficial if some of the beginner \r\nquestions get filtered out. Maintaining open source projects can be a lot of work and it is easier if the maintainers can focus on fixing bugs and evolving the software.\r\n\r\nI think the massive community backing Stack Overflow would also be helpful for answering some of the more general questions that come up.\r\n\r\nRight now I don't have enough points on Stack Overflow to create a `chatterbot` tag. I'll look into seeing if I can find someone to create it. If not I will work on answering some questions on there until I have enough points to create the tag. Feel free to. @rajasimon If you can create the `chatterbot` tag, that would be very much appreciated. :+1:  @rajasimon Thank you. This is going to make a huge difference in how questions are able to be asked and allowing them to be responded to. @BLCKPSTV There is a ticket currently open requesting more documentation for ChatterBot's Django integration. I will be adding additional documentation as soon as possible. Feel free to open a ticket if you think any examples or additional explanations would benefit the project documentation.  @PremVarma There are a few ways to install ChatterBot.\r\n\r\nAs @vkosuri mentioned, `pip` is the recommended way to install.\r\n\r\n```\r\npip install chatterbot\r\n```\r\n\r\nYou can also install your local copy using pip, for example\r\n\r\n```\r\ngit clone https://github.com/gunthercox/ChatterBot.git\r\npip install ./ChatterBot\r\n```\r\n\r\nThese are described also in the documentation: http://chatterbot.readthedocs.io/en/latest/setup.html  @frossaren did you by any chance write your code in a file called `chatterbot.py`? If you did this will cause import errors.  @jinfagang Thanks for your inputs, May be i don't have exact answers to your questions, but there are some workarounds to do so.\r\n\r\n> I found that, once a statement store into database like mongo, I can not replace it, that means, if previous reply is wrong by bot, I can not fix that, maybe there are some flag allow me to override that?\r\n\r\nThere is [learning_feedback_example](https://github.com/gunthercox/ChatterBot/blob/master/examples/learning_feedback_example.py) which will provide a workaround/trick to do.\r\n\r\n> Another things is about the reply, the bot learned one question and an according answer, So if I asked that question twice, the answer would be same forever and never change, this is not good, even not intelligent than I using an random.choice to choose random condidate replies.\r\n\r\nI think for every question the occurrence count will increase, I think this area needs to improve, @gunthercox Master do you any comments on this question. However you could write [your own logic adapter](http://chatterbot.readthedocs.io/en/stable/logic/create-a-logic-adapter.html) to fulfill your needs\r\n\r\n> Wish get discuss about there puzzels\r\n\r\nI don't have any idea about puzzles, could you please elaborate more on this question?  Tests are failing because these changes make it so that statements are removed from the `statement_list` while iterating through it. Although this doesn't cause any errors to be triggered it creates problems due to the condition of the list size changing. @Madhu009 Thank you for the attempted improvement. Unfortunately I can't merge in the change because it would cause errors.  Hi @addelll, you can use this storage adapter the same way that the others are used.\r\n\r\nFor example,\r\n\r\n```python\r\nchatbot = ChatBot(\r\n    \"My ChatterBot\",\r\n    storage_adapter=\"chatterbot.storage.SQLAlchemyDatabaseAdapter\"\r\n)\r\n```\r\n\r\nIs this what you are looking for as an example? The reason you are seeing that message is likely because the current version of ChatterBot (`0.6.0`) doesn't contain the changes that were added in this pull request. One possible way is to install directly from GitHub.\r\n\r\n```\r\npip install git+git://github.com/gunthercox/ChatterBot.git@master\r\n``` @addelll I believe you will need to set `create=True` when using this adapter for the first time.  Hi @oddrock, I haven't encountered this issue before. Can you provide any additional information about the setup of your chat bot?  I think it would be an Input and Output adapter  @peterel i trained my bot with Offline Ubuntu corpus https://arxiv.org/abs/1506.08909, insted of above issue, I have seen file not found issues. I'll give another try today. \r\n\r\nIf possible where exactly you have seen the above error? I mean on which tsv file you encountered above error? Instead removing it from chatterbot, how about moving it to https://github.com/gunthercox/chatterbot-corpus. If any users are like to use UbuntuCorpusTrainer they will use it.\r\n\r\n``` Python\r\nfrom chatterbot_corpus.trainers import UbuntuCorpusTrainer\r\n```  Hi @Gustavo6046, it looks like there are a few issues with this storage adapter. I've also been thinking about the best way to solve the issue with this adapter being non-thread safe. The requirements necessary to create a proper JSON formatted database are enormous and if I started working on it I would end up with something close to Mongo DB (which is essentially a powerful JSON database).\r\n\r\nAt this point I've decided to steer the ChatterBot project away from using my original home-rolled file database and add support for SQLite which can still be used locally without any additional non-python dependencies and its developers have already solved the issues of read and write locking, querying for data, etc.  @monokal Sorry for my late response! Thank you for the detailed bug report, I will aim to have this corrected in the next release. @coreyauger You are correct, the primary issue is that the chat bot needs to search the entire space for each response. I am working on a solution to use cacheing as well as additional filtering for optimization but this is still largely an unsolved problem as far as I am aware because there isn't an efficient way to do NLP operations on a database level. At the current time I would recommend avoiding training a chat bot with the entire Ubuntu corpus. This is a problem that I'm working to resolve but I don't have an ideal solution yet. @coreyauger No problem, I would be happy to hear any ideas you have.  If you are using the default JSON file storage adapter then the **entire** file has to be loaded into memory to search for matching statements. It works well for testing and very small data sets but it is completely impractical for larger data sets. This is the main reason that a real database is highly recommended. Sure, to clarify what I meant, by default the chat bot will use the value `chatterbot.storage.JsonFileStorageAdapter` which is a file based database. The file database can become very slow when large amounts of data are added.\r\n\r\nYou can switch the parameter to make is use a database such as Mongo DB, which has much better performance.\r\n\r\nHere is an example of what this might look like in your code.\r\n\r\n```python\r\nchatbot = ChatBot(\r\n    \"My ChatterBot\",\r\n    storage_adapter=\"chatterbot.storage.MongoDatabaseAdapter\"\r\n)\r\n```\r\n\r\nThere is also more details on each of the storage adapters in ChatterBot's documentation if you are interested in reading about it http://chatterbot.readthedocs.io/en/latest/storage/index.html  Test failed on this pull request because @anuragvickey submitted it to the `development` branch instead of the `master` branch. Tests don't currently pass on the development branch. The commit will make it to the master branch eventually, it will just take much longer for it to become a public part of the documentation.\r\n\r\n@anuragvickey If you wish, you can resubmit this pull request against `master` and I can merge it in sooner.  @ttrd06 I will look into your issue as soon as I can.\r\n\r\n:coffee: :coffee: :coffee: \r\n\r\nIt looks like you have encountered several possible issues. Scanning over all your previous comments it also looks like you possibly have the wrong `twitter` package installed (it should be `python-twitter`).\r\n\r\n```\r\npip uninstall twitter\r\npip install python-twitter\r\n``` @ttrd06 I did not have time to check your issue. I will look into it as soon as I can.  Images are not supported by the ChatterBot corpus. It is a text-based collection of structured dialog.  @6d6366726c If you haven't already done so, I would recommend making sure that you have the latest version of NLTK installed. To do this you can run:\r\n\r\n```\r\npip install nltk --upgrade\r\n```\r\n\r\nThis error is very likely occurring due to an issue with one ore more of the NLTK data files. These files are not downloaded with the NLTK python package and have to be downloaded separately. Typically ChatterBot will attempt to trigger the download of these files if they cannot be found locally. I'm wondering if the download partially failed and resulted in incomplete or damaged data files. If you can find the default NLTK download location on your computer you should be able to delete them so the they get re-downloaded by ChatterBot the next time you run your program.  Hi @kail518, your observation is correct. Knowledge is retained by the chat bot each time it is trained.\r\n\r\nMethods exist to remove all learned statements from the chat bot if you wish to do so. You can do:\r\n\r\n```\r\nmy_chatbot.storage.drop()\r\n```  Hi @galeej, that is correct. Occurrence counts are incremented for each duplicate statement received.  Thank you  @nony05 Sorry about the late response. If you are still encountering this issue, based on the error you are receiving (`zipfile.BadZipfile: File is not a zip file`) it appears that there is an issue with your NLTK data files. \r\n\r\nIs there any chance that you downloaded the NLTK data files manually? I'm going to close this issue due to lack of activity.  @toopay Thank you for the offer. In the nearer future I may be significantly changing the way storage adapters work in ChatterBot. As much as I want to support as many different databases as possible, refactoring will be much easier for me if there are fewer of them in the core of the repository. I don't have any finalized plans at the current time. @vkosuri That is not correct. #528 is for input and output adapters. @toopay was talking about a storage adapter for using RethinkDB.  Hi @galeej, you are welcome to submit a pull request. I can't guarantee it will get merged into the code base but I would be glad to review it.  Looks good. Thank you @web-maker \ud83d\udc4d   This sounds like a structured data analysis problem. I'd recommend taking a look at some of the functionality provided by NLTK http://www.nltk.org/book/ch07.html  Hi @pavanAlluri, I have inspected the code and I can confirm that there is\nan issue with this function. I will make a pull request with corrections as\nsoon as I can. In the mean time it is possible that another contributor may\npropose a solution.\n  Hi @johnduxx I'm glad you're interested in contributing to this project. To answer your question, ChatterBot uses a number of algorithms to select a response. ChatterBot is designed to be modular so each response selection algorithm is broken up into its own module called a logic adapter. A number of logic adapters have been written, at the moment most of them implement search-based artificial intelligence to select an appropriate response to the user's input. Bayesian networks are also used but to a limited extent.\r\n\r\nI have been researching seq-to-seq machine learning methods using technologies such as TensorFlow, maybe in the future ChatterBot will have these capabilities as well.\r\n\r\nLet me know if you have any further questions \ud83d\ude03 @arafat-al-mahmud That is correct.  @neatville Your chat bot does get trained each time `chatterbot.get_response()` is called. This is by design to help the chat bot learn to communicate. You can also disable this learning by passing the parameter `read_only=True` to the `ChatBot` class.  Thank you  Thank you!  Hi @addelll, I based on the stack trace I can't pinpoint the exact cause of your failed Heroku deployment. What parameters are you passing to the `ChatBot` class in your code? Are you able to run @chamkank's flask app example locally without error? Python 3.5 is the recommended version of Python for ChatterBot. ChatterBot's requirements are listed with the version ranges specified in this file: https://github.com/gunthercox/ChatterBot/blob/master/requirements.txt @vkosuri Does your example still work? It looks like the heroku site may be broken.  Hi @elviraC, this is happening because the [requirements.txt](https://github.com/gunthercox/chatterbot-voice/blob/master/requirements.txt) file in the `chatterbot-voice` package is pined for `ChatterBot>=0.3.5,<0.5.0`. It needs to be updated, probably to something like `ChatterBot>=0.4.0,<0.6.0`.\r\n\r\nFeel free to make a pull request with the change if you want to contribute. Otherwise I will make the change as soon as I can. I've updated the version requirements. https://github.com/gunthercox/chatterbot-voice/commit/9fdb29bd1ee5bdbcbe72af8cf386bd0760329fa6\r\n\r\nThe change will be available when I release the next version of the `chatterbot-voice` package. The next version of the `chatterbot-voice` package has been released to the Python package index. Please upgrade to the latest version to receive this fix.  Hi @mayank11196, thank you very much for your pull request. I apologize about the delay in merging it. I'm actually in the process of moving ChatterBot's data corpus to it's own repository: https://github.com/gunthercox/chatterbot-corpus\r\n\r\nWould you mind submitting your pull request there instead? Thank you, I have merged your contribution to the `chatterbot-corpus` repository.  Hi @jbmlaird, this isn't an issue I have encountered before. To me it looks like an authentication issue with the server hosting your database.  Hi @alequeiroz, I'm not exactly certain what you mean by \"force\". Do you just need a string type value to be returned from ChatterBot? Have a look at this example: https://github.com/gunthercox/ChatterBot/blob/master/examples/basic_example.py\r\n\r\nI believe it is pretty close to what you are looking for.  @priyanka22kar Based on your output it looks like you are using Anaconda and an iPython notebook. I haven't tested ChatterBot heavily under these environments but I am aware of a few reports of developers encountering issues when attempting to use ChatterBot in an iPython notebook.\r\n\r\nChatterBot has been developed and is heavily tested under the normal Python installation, Anaconda and iPython are a bit new to me but I would be happy to install them locally to try to see if I can replicate and fix) the same issue that you are encountering. You can certainly edit the corpus files. The Ubuntu dialog corpus is a separate project but ChatterBot has a smaller built in corpus in the `corpus/data` directory in this repository. The Ubuntu dialog corpus should be downloaded to the same directory that\nyour Python code is being executed from. I test out the download process as\nsoon as I can. It is possible that some change has been made since I wrote\nthe download code.\n\nOn Wed, Mar 1, 2017 at 3:39 AM Priyanka baviskar <notifications@github.com>\nwrote:\n\n> One last doubt @gunthercox <https://github.com/gunthercox>\n> when we download the The Ubuntu dialog corpus via the program were does it\n> get stored ?\n> Because it isn't extracting the whole data for me its throwing error.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n>\n>\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/637#issuecomment-283278489>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AB778iO6I2HULH9fbGE9nYOc2_WCB0E6ks5rhS6rgaJpZM4MMuFZ>\n> .\n>\n @priyanka22kar Yes, you can edit the corpus by editing the json file.  Hi @kumarneeraj2005, based on the information you have provided I cannot determine how you encountered this problem. Can you provide a list of steps that I can use to recreate this issue? Hi @darenr, the issue you are seeing was fixed in https://github.com/gunthercox/ChatterBot/pull/608, it will be available for download when the next version of ChatterBot is released.  @TernTuring Make sure that you have the correct requirements installed. There are several Python twitter libraries available, some of them can have conflicting package names if both are installed on the same system. Check the `requirements.txt` file for the exact packages and versions that ChatterBot uses. Let me know if you have any questions.  I'm closing this ticket because it contains no information and appears to be inactive.  I'm closing this issue because it is inactive and there wan't enough information provided to recreate the problem.  Currently there is no way to deploy a trained chat bot, I would highly recommend training the bot _after_ it is deployed to a hosting service such as AWS.  Hi @LorenDavie, thank you for your interest in contributing. I actually have plans to eventually phase-out ChatterBot's input and output adapters in favor of making the library simpler. More details on this can be found here: https://github.com/gunthercox/ChatterBot/issues/528\r\n\r\nLet me know if you have any questions.  Looks good. Thank you!  I agree with @vkosuri. I like the idea of having these instructions available to point people to if they have questions. However I'm not sure how useful a Docker container is for the typical Python developer who wants to use or contribute to this project.  Hi @janMbugti, I am aware of this issue. I am currently working on a fix. The issue stems from the current lack of the ability of the chat bot to search it's knowledge graph for similar conversation sequences. I'm hoping to introduce this functionality in an upcoming major release but there is still a good amount of design work that I need to complete.  I'm reopening this as it is a valid issue that I wish to address. I haven't had a chance to implement anything yet but I do want to provide a way to support this functionality. @thedp This is something that I would like to implement, but I don't have any estimates on when I will be able to get around to working on it. It may be a few more weeks before I have a chance.  Storage adapters have a `get_response_statements` method that returns all statements that are in response to another statement. A much more elegant solution would be to have the `filter` method be versatile enough to return this same information. @vkosuri, some of the other filtering options will likely just be join operations on related fields. The setup will likely end up being similar to the way Django does their filtering for querysets.  I agree with this decision. Let's make sure that the following steps have been completed before removing the data from the `chatterbot` repository.\r\n\r\n- [x] The corpus data has been copied to the `chatterbot-corpus` module.\r\n- [x] ChatterBot's documentation has been updated to describe how to download or install the ChatterBot corpus data.\r\n- [x] Check if any changes need to be made to ChatterBot's corpus trainer for it to work with the files from the `chatterbot-corpus` module.  Hi @kushalbabel, the confidence score is returned with the statement when you call `.get_response()`. So for example:\r\n\r\n```python\r\nresponse = mychatbot.get_response(input)\r\nprint response.conficence\r\n>>> 0.25\r\n```  Hi @cesarandreslopez, currently ChatterBot only returns a single response. I can definitely see the value in being able to set how may close responses are returned. I'd be happy to make changes that would allow this. I'm reopening this ticket, the changes that I mentioned were never made.  @lucaszanella I agree, I would be happy to make changes to allow this. I'm actually in the process of making some rather large changes that will make this much easier to do. Each statement will end up having a reference to the session that it is a part of. @lucaszanella I don't have a date set yet for releasing the changes that will associate statements with specific chat sessions. Right now I'd estimate that the release is about a month away. The reason for this is that it is a part of a much larger change that is intended to make it easier to search through past conversations to find ones that were similar to the current conversation. As a side effect each statement will have a reference to the conversation (session) that it was a part of.\r\n\r\nI'm planning on creating a \"development\" branch which will contain the latest changes before the official release. Hi @360d-io-labs, I appreciate the offer. The development branch currently contains some major changes and improvements but I am currently getting random test failures. I haven't had a chance to pinpoint the exact cause. Examples of these failures can be viewed in the Travis CI output https://travis-ci.org/gunthercox/ChatterBot/builds/196184505 @saurabhzuve I think you need `self.chatbot` insted of `self.bot`  The file database that ChatterBot uses by default isn't thread safe. It's the default because it doesn't require any databases to be installed locally so it is easy for people to get started and test out their chat bots. The error you are seeing is because multiple threads have attempted to read and write to the the same file at the same time and a write was not completed so the data was invalid.  Hi @phpmind, assuming you have access to an API for a botkit app you can definitely make requests to it from ChatterBot. Vice versa, it would not be difficult to create a small API based Python app that could provide responses to a botkit based chatbot. (Either should be able to get information from each other depending on the setup you desire).\r\n\r\nYour question doesn't make it entirely clear what information you are looking for. Yes, you can write code to use HTTP request to access information between chat bot's written in different programming languages. For Python I highly recommend the [requests](http://docs.python-requests.org/en/master/) framework.  I've identified the cause of this issue. Working on a fix.  This sounds like is might work well as a [preprocessor](http://chatterbot.readthedocs.io/en/latest/preprocessors.html).  Hi @HelloJyo, right now ChatterBot doesn't have this functionality built in. I'm aiming to introduce it in a future release but I'm still working on changes that will make it possible to select responses from a specific bot in situations where multiple bits are being used.  Hi @martmists, I apologize about the amount of time this pull request has remained open for. I'm going to close it off because I'm moving the project away from `jsondb` in favor of supporting popular, existing types of databases.\r\n\r\nThe JsonDatabaseAdapter in ChatterBot will be supported until the 0.7 version release but I'm not looking to add additional JSON type adapters anymore. I appreciate the work you put into this pull request and I'm sorry that I could not be merged into the project. If you still want to make it available for others to use you can always set it up as it's own Python package on PyPi.  This pull request will make changes to store sessions in the database. Sessions will eventually be used to track individual conversations. The session needs to be stored so that statements can reference the individual conversation that they are a part of.\r\n\r\nFor #513 @meanchun You are correct, it is important. Additional work is still required to add this functionality.  Are you saving a statement in your custom logic adapter? The `extra_data` attribute is empty by default so if a new statement gets created and that statement has the same text as an existing one, then when it gets saved the empty value for `extra_data` would replace the existing value. Setting `read_only=True` just controls if the chat bot can \"learn\", if it is set to true then none of of the input the chat bot gets will be saved to the database.\r\n\r\nIt sounds like this might be a bug. I will test it out and make changes to make sure it gets fixed.  I like this idea. What do you think of the idea of allowing developers to set the JSON library via a parameter?\r\nFor example, something like:\r\n\r\n```python\r\nchatbot = ChatBot(\r\n    'My Bot',\r\n    # ...\r\n    json_library={\r\n        # json.loads and json.dumps have different method names in various JSON libraries\r\n        'loads': 'import.path.for.json_library.loads',\r\n        'dumps': 'import.path.for.json_library.dumps',\r\n    }\r\n)\r\n```\r\n\r\nThe advantage would be that it reduces the amount of code that has to be added to ChatterBot to support different JSON libraries in the future. It also gives the developer more control.  Hi @brunotikami, could you add a list of step-by-step instructions that I can use to attempt to recreate the error you encountered? Ok, so one thing I just noticed as I was checking over your traceback:\r\n\r\n> File \"/bot/lib/python2.7/site-packages/chatterbot/storage/mongodb.py\", line 141, in deserialize_responses\r\nreturn proxy_statement.in_response_to\r\n> File \"/bot/lib/python2.7/site-packages/chatterbot/ext/django_chatterbot/models.py\", line 48, in in_response_to\r\n\r\nI'm assuming that you are using Django with MongoDB as it's database in your project.\r\nI've never actually tested to see if ChatterBot's MongoDB adapter will work with a Django & MongoDB setup. Let me know if I my assumption about your project setup is correct. If so, I will try to set up a project with the same configuration locally to test this out. Ok, I'll write up an example and test this out locally as soon as I can.\r\n\r\nJust a note, ChatterBot's storage adapters are not the same thing as Django's database backends. By default, ChatterBot will use it's built in _Django storage adapter_ which uses whatever database backend your Django settings are set up to use. So, if you use a Django storage backend like [Django MongoDB Engine](https://django-mongodb-engine.readthedocs.io/en/latest/) then ChatterBot will access your instance of MongoDB through that adapter directly (probably avoiding the error you encountered). @web-maker If you are interested in submitting a pull request I would be happy to review it. @web-maker Thank you, I'll check it out.  Hi @shashigharti, all of the parameters you're passing to `ChatBot` appear to be correct.\r\n\r\nYou said that you are not getting the expected result. Are you getting _any_ result? If so, what is the result you are getting?  Hi @RominYue Thank you, I will make adjustments to the documentation to clarify this.\r\n***\r\nRegarding your last question, `from .MyAdapter import MyAdapter` is not required to be added to the `__init__.py` file.\r\n\r\nAdding it to `__init__.py` is just a Python convention that allows you to import the class like this:\r\n\r\n```python\r\nfrom myadapters import MyAdapter\r\n```\r\n instead of like this:\r\n\r\n```python\r\nfrom myadapters.logic.my_adapter import MyAdapter\r\n``` I'm going to close this off as I believe all of the issues have been addresses. Feel free to reopen it if I missed any documentation changes that were needed,  I believe @buildithub encountered the same issue: https://github.com/gunthercox/ChatterBot/issues/523\r\nIt was resolved by using the latest version of the example.  Theoretically the distinct shouldn't be needed. I can remove it to correct this issue. Actually, after looking into this a bit further, it doesn't appear that the distinct can be avoided. This method needs to return a list of statements that are responses and it cause larger performance issues if duplicate statements were returned.\r\n\r\nIt might be possible to improve performance by applying an index, but I currently don't have a way to test what the performance increase (if any) would be. I'm closing this ticket off. It doesn't appear to contain anything actionable to improve ChatterBot.  Hmmm, strange. I can't seem to verify this. I'm checking that this functionality works using the following unit test in [/tests/test_chatbot.py#L117](https://github.com/gunthercox/ChatterBot/blob/master/tests/test_chatbot.py#L117)\r\n\r\n```python\r\ndef test_learn_response(self):\r\n    previous_response = Statement('Define Hemoglobin.')\r\n    statement = Statement('Hemoglobin is an oxygen-transport metalloprotein.')\r\n    self.chatbot.learn_response(statement, previous_response)\r\n    exists = self.chatbot.storage.find(statement.text)\r\n\r\n    self.assertIsNotNone(exists)\r\n``` That sounds like it is probably it. If `read_only` is True, the bot won't learn. Possibly, under what conditions are you looking to have learning occur? For example, if you only what a bot to learn when talking to a particular user you could do something like:\r\n\r\n```python\r\n# Get a response to the input statement\r\nstatement, response, confidence = bot.generate_response(input_statement)\r\n\r\n# Only learn on this condition\r\nif user.email == 'admin@gmail.com'\r\n    bot.learn_response(response, input_statement)\r\n```\r\n  This is a great question. I'm not actually sure if there is a good answer\r\nfor you right now but I'm hoping that we can figure something out. It might\r\nrequire making some improvements to ChatterBot itself to make this happen.\r\nLet's see if we can figure something out because I realize this is a real\r\nproblem that will only get worse as chat bots build with ChatterBot are\r\nused with larger data sets.\r\n\r\nThe main problem is that NLP is significantly slower than the set logic\r\nused for querying a database. There are a few approaches that can be used\r\nto make it so that NLP has less to process less data.\r\n\r\n1. *Loosening constraints:* One option that could help make this process\r\nfaster would be to make the assumption that we do not need to search all of\r\nthe data to find the best result. It might be possible that an *optimal\r\nresponse* could be selected from a subset of the known data.\r\n\r\n2. *Queries:* it might be possible to generate a query that eliminates\r\nstatements that can't possibly be a response to the input the bot received.\r\nDoing this requires those attributes to be identified but this could help\r\nprevent extraneous statements from being returned in the response from the\r\ndatabase.\r\n\r\nAn example of this could be that the user asks a question. Let's assume\r\nthat all statements in the database now have an `is_question` attribute. We\r\ncould eliminate any statement that is not in response to a question.\r\nCategorization of statements by some kind of \"type\" could help\r\nreduce the data set that has to be processed for large databases if it is\r\npossible to determine the \"type\" of response that is expected as a response.\r\n\r\n3. *Preprocessing:* I *very* recently added a preprossessor feature that\r\nmakes it possible to do *something* to each statement a chat bot receives\r\nas input. Incoming statements could be tagged with NLP scores and values so\r\nthat these could be searched on later. This wouldn't solve the problem for\r\nexisting statements but a line could be added somewhere to save the NLP\r\nevaluations if they have not been generated for a statement yet. This makes\r\nit so that NLP evaluations only ever have to be run once for a statement.\r\nThis may work well when logic adapters depend on things such as the tagged\r\nparts of speech of a statement.\r\n\r\nHowever, this does not solve a larger portion of the problem which exists\r\nbecause of the need to make NLP comparisons between statements. For\r\nexample, if we want to find the closest known match to a statement, then we\r\nhave to compare that statement to *every* other statement. (This is where\r\nI'm currently stuck on how to make this process more efficient.)\r\n Noting has been written (that I'm aware of) for using the models designed for open-intent.io with ChatterBot. I think the concept of the dictionary file that they have you define might be a good way to handle the \"tagging\" of statements that I mentioned before.\r\n\r\nIn their example dictionary file they provide the following example, it looks like they are grouping synonyms for a particular word and then encompassing that inside it's own category.\r\n```json\r\n\"greetings\": {\r\n  \"hello\": [\"hi\", \"yep\", \"yo\", \"hey\"]\r\n},\r\n\"food_type\": {\r\n  \"pizza\": [],\r\n  \"hamburger\": [\"big mac\", \"cheeseburger\", \"burger\"],\r\n  \"salad\": []\r\n}\r\n```\r\n\r\nThis is something that could definitely be added to ChatterBot, however I'm going to be adding it then I will need some time to plan what kinds of changes would be required.  If you have a way to train your bot with the desired responses you could\nuse the [get_most_frequent_response](\nhttp://chatterbot.readthedocs.io/en/latest/logic/response_selection.html#chatterbot.response_selection.get_most_frequent_response)\nresponse selection method. Training multiple times with the desired data\nwould increment occurrence counts for those responses and it would ensure\nthat they get selected.\n\nUsing [training](\nhttp://chatterbot.readthedocs.io/en/latest/training.html#training-via-list-data)\nto increment the occurrence counts is probably the most efficient way to do\nthis.\n  This adds a new feature called _preprocessors_. These are simple functions that modify the input statement before it is processed by the logic adaper.  @martmists Do you have the unicode header at the top of your python file? `# -*- coding: utf-8 -*-`  #565 Makes changes to store the computed confidence value on the statement object that get's returned from the logic adapter. The return values for the `process` method could be simplified to just return one value.  Hi, this likely wouldn't be too difficult. I would estimate a difficulty of maybe 2 out of 5 with 5 being the hardest to implement.\r\n\r\n:star: :star:  This looks great, thank you!  Hi @aliabbasjp, sorry about the late reply. Please make sure that you have the latest version of ChatterBot and it's dependencies by running `pip install chatterbot --upgrade`.\r\n\r\nLooking at the traceback you can see that the error is being triggered in `jsondb\\compat.py` which is one of ChatterBot's dependencies. JsonDB recently had some updates and it's possible that you either have an older version or the latest version has a problem.\r\n\r\nWhat version of Python do you have installed? That is strange, I can't recreate this issue. I'm wondering if is is possibly a difference with Anaconda and regular Python? @vkosuri I don't have a better answer at the moment. I think recommending to delete the database is a poor solution. I need to look into this further to see if I can recreate the issue. If I can recreate it then I can fix it. Unfortunately when I run the code locally, it works. I can't get any unicode errors to show up. This leads me to believe that there is one of the two following problems happening here:\r\n\r\n1. There is a local error occurring with the system configuration for those who have encountered this error.\r\n2. There is a decoding issue with the jsondb library: https://github.com/gunthercox/jsondb  You can access the database from within the logic adapter via `self.chatbot.storage`.  Hi @thedp, I've pushed up a fix for this. The error message was correct in stating that the `'Response' object has no attribute 'serialize'`. Ok, I'm glad your issue was resolved. The fix will be available through pip once I release the next version. For now it just exists in the latest changes on GitHub.  Hi @aliabbasjp ChatterBot currently has no support for ChatScript. I actually hadn't heard of ChatScript before but it looks interesting.\r\n\r\nI've been working on planning updates to ChatterBot's [training](http://chatterbot.readthedocs.io/en/latest/training.html) data format to support more functionality. The current plans are described here: https://github.com/gunthercox/ChatterBot/wiki/ChatterBot-Corpus-Specification. If you have any input I would definitely be interested in hearing it. I can't promise support for ChatScript integration but similar functionality might be possible to achieve when the new corpus format is introduced.  Closes #467  Thank you \ud83d\udc4d   There has been updates to correct a few issues with sessions since the 0.5.0 release. Feel free to check the release notes for more details: https://github.com/gunthercox/ChatterBot/releases. The latest release is 0.5.4. I'd recommend updating to the latest version to check if the problem persists. ChatterBot can be updated to the latest version using pip. The command is:\r\n\r\n```\r\npip install chatterbot --upgrade\r\n```  Hi @DangMinh24, the ordering of these parameters doesn't matter. You are correct, it looks like the values for the parameters are reversed. Thank you for pointing this out. I'll make changes to correct it. Closed by #545   It would be useful to have some documentation on how to use unicode encoding in Python and how troubleshoot unicode errors and warnings. ChatterBot's domain involves working with string type data and a variety of unicode-related questions come up frequently.  The `filter` method of storage adapters is currently doing an OR operation for each specified attribute. This should actually be an AND operation. Right now this isn't causing any issues but the AND logic would allow some existing code to be simplified and it would also make the method more consistent with similar methods of other frameworks.  @Nixellion Thanks for the heads up. I will make changes to correct the broken link.  @NotSoSuper, See my response to https://github.com/gunthercox/ChatterBot/issues/443#issuecomment-264070500, I believe you may be encountering a similar issue. Ok, so just to confirm, the solution from https://github.com/gunthercox/ChatterBot/issues/443#issuecomment-264070500 did correct your issue?  Currently there is no way to do this, but I agree that it would be useful.\nI would be happy to add this capability.\n  **Pros:**\r\n- Doing this makes it possible for ChatterBot maintainers to focus on the communication aspect of the project instead of maintaining numerous modules for integrations with existing communication APIs. There will always be new communication APIs being created. As the number of these APIs that ChatterBot supports increases over time it will become more difficult to maintain them. Instead of expending time maintaining these integrations and adding new integrations to ChatterBot, it might be better to put that effort into making sure that ChatterBot is generally usable with existing software libraries and clients designed to connect to those APIs.\r\n- Being required to create an input and an output adapter to connect to a particular API can restrict the developer by requiring them to work around the constraints of ChatterBot's input and output adapters.\r\n\r\n**Cons:**\r\n- Developers who have created applications that use ChatterBot's input and output adapter classes probably won't be happy.\r\n- Session management would likely have to be handled by the developer, so it would need to be really easy to use. At the moment, session management primarily occurs internally because it does not have the most friendly interface.\r\n\r\n**How would things change if input and output adapters were removed?**\r\n\r\nWith the current version of ChatterBot, if we want our chat bot to interact with some source of data, then we would need an input and an output adapter. Lets use MailGun's API as an example. In this case, we need an input adapter to check MailGun for new messages and an output adapter to send the chat bot's responses back to whoever sent them.\r\n\r\n<details>\r\n<summary>Here is an example of the input adapter for MailGun.</summary>\r\n<code>\r\nimport datetime\r\nfrom chatterbot.input import InputAdapter\r\nfrom chatterbot.conversation import Statement\r\n\r\nclass Mailgun(InputAdapter):\r\n\r\n    def __init__(self, **kwargs):\r\n        super(Mailgun, self).__init__(**kwargs)\r\n\r\n        # Use the bot's name for the name of the sender\r\n        self.name = kwargs.get('name')\r\n        self.from_address = kwargs.get('mailgun_from_address')\r\n        self.api_key = kwargs.get('mailgun_api_key')\r\n        self.endpoint = kwargs.get('mailgun_api_endpoint')\r\n\r\n    def get_email_stored_events(self):\r\n        import requests\r\n\r\n        yesterday = datetime.datetime.now() - datetime.timedelta(1)\r\n        return requests.get(\r\n            '{}/events'.format(self.endpoint),\r\n            auth=('api', self.api_key),\r\n            params={\r\n                'begin': yesterday.isoformat(),\r\n                'ascending': 'yes',\r\n                'limit': 1\r\n            }\r\n        )\r\n\r\n    def get_stored_email_urls(self):\r\n        response = self.get_email_stored_events()\r\n        data = response.json()\r\n\r\n        for item in data.get('items', []):\r\n            if 'storage' in item:\r\n                if 'url' in item['storage']:\r\n                    yield item['storage']['url']\r\n\r\n    def get_message(self, url):\r\n        import requests\r\n\r\n        return requests.get(\r\n            url,\r\n            auth=('api', self.api_key)\r\n        )\r\n\r\n    def process_input(self, statement):\r\n        urls = self.get_stored_email_urls()\r\n        url = first(urls)\r\n\r\n        response = self.get_message(url)\r\n        message = response.json()\r\n\r\n        text = message.get('stripped-text')\r\n\r\n        return Statement(text)\r\n</code>\r\n</details>\r\n\r\n<details>\r\n<summary>Here is an example of the output adapter for MailGun.</summary>\r\n<code>\r\nfrom .output_adapter import OutputAdapter\r\n\r\nclass Mailgun(OutputAdapter):\r\n\r\n    def __init__(self, **kwargs):\r\n        super(Mailgun, self).__init__(**kwargs)\r\n\r\n        # Use the bot's name for the name of the sender\r\n        self.name = kwargs.get('name')\r\n        self.from_address = kwargs.get('mailgun_from_address')\r\n        self.api_key = kwargs.get('mailgun_api_key')\r\n        self.endpoint = kwargs.get('mailgun_api_endpoint')\r\n        self.recipients = kwargs.get('mailgun_recipients')\r\n\r\n    def send_message(self, subject, text, from_address, recipients):\r\n        \"\"\"\r\n        * subject: Subject of the email.\r\n        * text: Text body of the email.\r\n        * from_email: The email address that the message will be sent from.\r\n        * recipients: A list of recipient email addresses.\r\n        \"\"\"\r\n        import requests\r\n\r\n        return requests.post(\r\n            self.endpoint,\r\n            auth=('api', self.api_key),\r\n            data={\r\n                'from': '%s <%s>' % (self.name, from_address),\r\n                'to': recipients,\r\n                'subject': subject,\r\n                'text': text\r\n            })\r\n\r\n    def process_response(self, statement, session_id=None):\r\n        \"\"\"\r\n        Send the response statement as an email.\r\n        \"\"\"\r\n        subject = 'Message from %s' % (self.name)\r\n\r\n        self.send_message(\r\n            subject,\r\n            statement.text,\r\n            self.from_address,\r\n            self.recipients\r\n        )\r\n\r\n        return statement\r\n</code>\r\n</details>\r\n\r\nInput and output adapters are used by the chat bot as follows.\r\n\r\n1. First, a chat bot's `get_response()` method is called.\r\n2. The `get_response` method gets a `Statement` object as input from the input adapter.\r\n3. The input statement is evaluated by the chat bot and a response is produced.\r\n4. The response is passed to the output adapter.\r\n\r\n**Note the following:**\r\n- The `get_response()` method can take optional parameters depending on the input adapter that is being used.\r\n- The `get_response()` method always returns the response that was passed to the output adapter.\r\n\r\nNow that we have covered how things currently are, lets go over how things would be different if there were no input or output adapters.\r\n\r\n1. The developer would write their code to check MailGun's API for new messages.\r\n2. If a new message was found then a `Statement` object would be passed to the chat bot's `get_response` method.\r\n3. The `get_response()` method would return the chat bot's response (a `Statement` object) to the input statement.\r\n4. The developer would send this response back to the original sender.\r\n\r\nTo reiterate the main motivation behind this change: it is difficult to maintain code for every communications API. This change is meant to simplify things so that other libraries can handle interacting with external data sources and ChatterBot will just handle generating the response.\r\n\r\nAdditionally, input and output adapters don't always work with all developer's code setups. They assume that you want to create your chat bot entirely inside of ChatterBot related classes. Instead of trying to support every use case it seems like it would be simpler to simplify how ChatterBot gets and returns information in general. The examples would have to be modified to manage sessions properly. For most of the simple examples that are currently included with ChatterBot there would be just one session. @lucaszanella I've updated the original ticket to cover how things would work if input and output adapters were discontinued. It's under the new section titled:\r\n> How would things change if input and output adapters were removed?\r\n\r\nLet me know if you have any questions. @davizucon I believe what you are describing is accurate. After this change is made the only difference there will be is that programmers will pass data TO chatterbot and a response will be returned, they will then write code to do something with that response. Right now input and output adapters are somewhat limiting to the developer and I would prefer to encourage design patterns that don't force the developer into a difficult or limited scope.  Doing this will enforce the use of sessions. The `get_default` and `update_default` methods were implemented to ensure backwards compatibility to versions of ChatterBot that were created before sessions were implemented. Removing these methods will also simplify the design of the session manager.\r\n\r\n- After deprecation is added, an issue should be created containing the following details:\r\n- When the methods will be removed (what version)  This looks pretty cool. I'd be happy to add a link.  If you are modifying chatterbot's codebase, you will likely need to\nre-install chatterbot after the modification (`pip install . --upgrade`).\nAfter than you should be able to call the train method to re-train the chat\nbot with your updated data.\n  Hi everyone, #608 corrects this problem. I apologize about the delay in tracking down the issue.  Hi, the ability to specify a path currently isn't available in ChatterBot.\nThere are plans to add the ability to do so and there is currently a ticket\nopen that requests this feature (\nhttps://github.com/gunthercox/ChatterBot/issues/467).\n\nThis will be a relatively simple feature to add and it should be possible\nto add it in one of the upcoming releases.\n Hi @rajasimon The ability to specify custom corpus paths has been added in https://github.com/gunthercox/ChatterBot/pull/549 and it will be available to use in the next release. I will update the documentation as well.  I like the idea of having some kind of templateing functionality. However, I don't think that the corpus is the right place to have this feature. ChatterBot's corpus is intended to a be a source of **raw** data (examples of conversations, bits of factual information, etc.). A separate directory definitely sounds better. Unfortunately I don't have a concise answer for either of your questions.\n\nAs a long-term solution, it might work well, or it might have unexpected\nconflicts with a future item called `Personas`. Personas will be\nrepresentations of personality for both users and chat bots. I think some\nof your recent comments and pull requests hint upon the necessity of this\nfunctionality but unfortunately it is not a feature that I have had time to\nfully plan out yet.\n I don't think the above example is needed in the example section right at the moment.\r\n\r\nI don't think I've documented the idea for personas anywhere yet. I will be sure to do so soon.  If the owner agrees to allow the content to be released under a different license, then yes, it is safe to use. Usually it just takes an email to get in contact with the copyright owner. Because reusing text from https://github.com/drwallace/aiml-en-us-foundation-alice was authorized by @drwallace, this should be ok to merge soon. I will check over the changes to make sure everything is valid before merging it. I rebased this pull request against the master branch to bring in the existing fix for the 2017 new years test bug.  Given the first example with two short lists, the chat bot would not make a connection between \"I am good.\" and \"That is good to hear.\". That is, it would not know that \"I am good.\" has \"That is good to hear.\" as a possible response.\r\n\r\nIn the single longer list, each statement will be learned as a response to the previous. Hmm, maybe you could set [get_most_frequent_response](http://chatterbot.readthedocs.io/en/latest/logic/response_selection.html#module-chatterbot.response_selection):\r\n```python\r\nresponse_selection_method=get_most_frequent_response\r\n```\r\n\r\nMaking this change would cause your bot to select the response that occurs most frequently. If your correcting methods incremented the occurrence count of the correct response, it should cause that response to be selected the next time.  I believe your unicode header is incorrect. It should be `# -*- coding: utf-8 -*-` ChatterBot is able to handle unicode values correctly. You can pass it non-encoded data and it should be able to process it properly (you'll just need to decode the output that it returns).\r\n\r\nBellow is one of ChatterBot's tests from [tests/test_chatbot.py](https://github.com/gunthercox/ChatterBot/blob/master/tests/test_chatbot.py), this is just a simple check that a unicode response can be passed in.\r\n```python\r\n    def test_get_response_unicode(self):\r\n        \"\"\"\r\n        Test the case that a unicode string is passed in.\r\n        \"\"\"\r\n        response = self.chatbot.get_response(u'\u0633\u0644\u0627\u0645')\r\n        self.assertGreater(len(response.text), 0)\r\n```\r\nThis test passes in both Python 2.7 and 3.x. It also demonstrates that ChatterBot currently _can_ take unicode input without issue. Based on this, I believe the unicode error you are encountering may be in your own code, rather than ChatterBot's (I could be wrong, but this is pretty strong evidence). edited version\r\n\r\n<pre><code lang=\"python\">\r\ndef on_chat_message(self, msg):\r\n    global chat_id\r\n    content_type, chat_type, chat_id = telepot.glance(msg)\r\n    <b>reload(sys)</b>\r\n    <b>sys.setdefaultencoding(\"utf-8\")</b>\r\n\r\n    try:\r\n        chat_id = msg['chat']['id']\r\n        firstname = msg['from']['first_name']<b>.encode('utf8')</b>\r\n        username = msg['from']['username']<b>.encode('utf8')</b>\r\n</code>\r\n</pre>  Hi @engineer34 Could you please provide some information on how you got the error? Right now there isn't anything there that can let me help you. Some items that you might wight want to include **at minimum** are:\r\n\r\n- The version of Python you are using\r\n- The version of ChatterBot you have installed\r\n- **A list of steps that other developers could follow to recreate the error that you encountered**  Hi @barseghyanartur Thank you for the pull request. The example at https://github.com/gunthercox/django_chatterbot is no longer actively maintained. A while back the example was moved to: https://github.com/gunthercox/ChatterBot/tree/master/examples/django_app\r\n\r\nIt is very likely that the issue you encountered no longer exists in the updated version of the app. Would you mind confirming that?  This is a good suggestion. Making changes to use IETF language tags sounds like it would really benefit ChatterBot.  These tests should be in the [`tests_django`](https://github.com/gunthercox/ChatterBot/tree/master/tests_django) directory. You can run these django-specific tests with:\r\n\r\n```\r\npython runtests.py\r\n``` I don't have an ETA yet, I'm possibly looking to do one either this weekend or next week. This looks great, thank you for adding the test cases. They help make sure that this functionality never breaks again in the future.  Closed by #498  Closed by #505  I can see it is currently having the issue you reported in #497. As soon as the issue is resolved I'll draft a new version of chatterbot to release to pypi. Sure! Feel free to make a pull request. There is also a section in the readme.md that lists various examples with Django and Flask, a link to the live example might work well there as well.  There are currently integration tests for basic input and output adapters, however some of the more complex ones that connect to APIs such as Gitter and Hipchat currently do not have tests. Closing this to eliminate unnecessary work in lieu of #528.  Hi, there are several different example programs in the examples directory oh GitHub: https://github.com/gunthercox/ChatterBot/tree/master/examples\r\n\r\nFeel free to check them out, I believe they should provide sufficient examples to help guide you.  Each of the items in the `in_response_to` list is technically a `Response()` objects. Each `Response()` object is a representation of the relationship between two statements. If the proposed `properties` attribute is intended for styling the response statement, would there be any issues saving them as `extra_data` on the statement itself?\r\n\r\n![image](https://cloud.githubusercontent.com/assets/2030578/21076166/68482b3a-bef2-11e6-9edb-50ebea58ee21.png)\r\n Agreed, my plan is to add a version of that diagram and an explanation to the documentation on statements and responses. http://chatterbot.readthedocs.io/en/latest/conversations.html  @engineer34 I think you are using an old version of ChatterBot. The twitter storage adapter has been removed because it had a number of issues. There is a new training module that replaces it and it should work much better: http://chatterbot.readthedocs.io/en/latest/training.html#training-with-the-twitter-api Maybe that module doesn't exist in the version you have?\r\n\r\nYou can install the latest version of chatterbot by running:\r\n\r\n```\r\npip install chatterbot --upgrade\r\n```  Under some circumstances, saying nothing is a valid response. I am considering experimenting with adding functionality for a special response type that indicates that the bot should _not_ respond. It would also be interesting to see if a long pause in a conversation with a user could be interpreted as a non-response in which case the bot could learn to reply with something like _\"Are you still there?\"_.\r\n\r\n***\r\n\r\n**Possible attributes**\r\n\r\n- duration - the length of time that the pause lasts\r\n\r\n**Use cases**\r\n\r\n- An adapter needs a default response for a case where it should not respond (0 confidence)\r\n- A filter removes all possible responses  Creating efficient scheduling operations can often be a challenging problem to solve. What about offloading the task to the user's calendar? Most calendar apps already display notifications when a scheduled event is coming up, and it would also make it possible synchronize the events across the user's devices if they were all connected to the same calendar.\r\n\r\n- https://msdn.microsoft.com/en-us/office/office365/api/calendar-rest-operations\r\n- https://developers.google.com/google-apps/calendar/v3/reference/ Slack has a great API, I've been meaning to look into it at some point. @vkosuri Unfortunately I don't have any recommendations. Actually, there is a very cool datetime parsing utility that @rmdort contributed a while back. You can check it out here: https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/parsing.py\r\n\r\nThis might be useful for converting phrases like \"later today\" to an actual datetime object.  @boris314159 I think this issue was addressed in this PR https://github.com/gunthercox/ChatterBot/pull/817  Hi @HelloJyo, what do you get as output when you enter `python -m chatterbot --version` in your terminal? @HelloJyo can you post your `CHATTERBOT` configuration from your `settings.py` file? It may be able to help me determine what the cause of this issue is.\r\n***\r\n@ThomasKoscheck I don't think you have chatterbot installed correctly. The output `ImportError: No module named jsondb` tells me that you don't have that package installed and that you are likely missing other requirements as well. The recommended way to install chatterbot is by running:\r\n```\r\npip install chatterbot --upgrade\r\n```\r\nor, if you are using linux:\r\n```\r\nsudo pip install chatterbot\r\n``` @HelloJyo Did you follow the setup instructions for using ChatterBot with Django?\r\nhttp://chatterbot.readthedocs.io/en/latest/django/index.html#installation Ah, I'm pretty sure I see your issue. For ChatterBot to work in Django, you need to include it's Django extension module in your `INSTALLED_APPS` list. So you should add `'chatterbot.ext.django_chatterbot',` in your installed apps.\r\n\r\nAlso, I see that you have the following in your installed apps as well:\r\n```\r\n    'chatbot',\r\n    'chatbot.chatterbot',\r\n    'chatbot.chatterbot.storage',\r\n```\r\n\r\nIf the `chatterbot` module is something you made yourself, you should rename it to stop import errors. For example, if you try to import something `from chatterbot ...` it will import from that module instead of the actual `chatterbot` package and you will get errors about things like modules not being found.\r\n\r\nIf the  `chatterbot` module is just a downloaded copy of ChatterBot, I recommend you install in with pip so that you don't have to worry about managing the package manually.\r\n\r\nI hope this helps. There is also a Django example on GitHub if an example would help:\r\nhttps://github.com/gunthercox/ChatterBot/tree/master/examples/django_app Sure, you'll just have to remember to modify any imports to match the name spacing of your django app.  Hi, I just took a quick look at their [API documentation](https://docs.api.ai/docs/reference). It should definitely be possible to create a logic adapter that interacts with their API.\r\n\r\nI would be happy to accept a pull request that adds this functionality if you, or other developers were interested in contributing to the project. Looking forward to seeing git. In the meantime, I'm going to close this ticket off. Thank you.  The current codebase does not support reinforcement learning. I would be happy to accept this as a feature request though. @Issen007 Minimal changes have been made so far to facilitate feedback learning in ChatterBot. I agree this would be an awesome feature.  Hi @bekerov, here is a link to the documentation for this function for reference: [link](http://chatterbot.readthedocs.io/en/latest/conversations.html#chatterbot.conversation.Statement.add_response). The `add_response` method adds the Response object as an element in the list of statements that the current statement is in response to. So, for example:\r\n\r\n```python\r\nfrom chatterbot.conversation import Statement, Response\r\n\r\nstatement = Statement(\"I am doing well.\")\r\nresponse = Response(\"Hello, how are you?\")\r\n\r\nstatement.add_response(response)\r\n```\r\n\r\nAlso, keep in mind that doing this only modifies the objects in memory, it does not commit them to the chat bot's database until you pass the statement object to the `update` method of the chat bot's storage adapter. Documentation on the available storage adapters can be found here: http://chatterbot.readthedocs.io/en/latest/storage/index.html\r\n\r\nLet me know if you have any further questions.  Ok, this makes sense. I never made changes to add it \ud83d\ude10  @vkosuri If you are interested in working on this that would be greatly appreciated.  Hi @SunYunyun, the warning that you are seeing is just a warning, not an error. It is displayed to make sure that developers are aware of the poor performance of the default file storage that is used unless they specify a different database.\r\n\r\n***\r\n\r\nYou said that nothing happens after this, which example are you using?  This makes changes so that if ChatterBot is being used with Django, the Django Statement and Response models can be used in place of ChatterBot's Statement and Response objects. Previously the storage adapter converted incoming statement objects into Django model objects before saving and/or returning them. Now this conversion is no longer required.\r\n\r\nThis is going to need further testing before it gets merged.\r\n\r\nItems that need to be checked off before this can be merged:\r\n\r\n- [x] Make sure ChatterBot statements/responses and the Django models have the same methods\r\n- [x] Make sure logic adapters all work with in Django\r\n- [x] Make sure input adapters all work in Django\r\n- [x] Make sure output adapters all work in Django\r\n\r\nCloses #464 @vkosuri I'm planning on taking care of #308 in a pull request after this one gets merged. I'm pretty sure the \"reversal\" is just an issue with confusing variable names.  Hi @alex-dh, this is an interesting question. Normally I would recommend just training the chat bot based on the available data but it sounds like you data source is something that gets changed externally.\r\n\r\nI'll have to think about this, but I would definitely be interested in making changes to ChatterBot to better accommodate this functionality. Sure, statements can be deleted using the `remove` method on the storage adapter: http://chatterbot.readthedocs.io/en/latest/storage/index.html#chatterbot.storage.JsonFileStorageAdapter.remove  Currently, ChatterBot's corpus format is essentially just a list of dialog sets. For example\"\r\n\r\n```json\r\n{\r\n    \"conversations\": [\r\n        [\r\n                \"...\",\r\n                \"...\",\r\n                \"...\",\r\n                \"...\",\r\n        ],\r\n        [\r\n                \"...\",\r\n                \"...\",\r\n                \"...\",\r\n                \"...\",\r\n        ]\r\n    ]\r\n}\r\n```\r\n\r\n It would be a good idea to modify the format so that it can store more information as you suggested. @kennetham Right now you can export your chat bot's knowledge as a JSON file: http://chatterbot.readthedocs.io/en/latest/corpus.html?highlight=export#exporting-your-chat-bot-s-database-as-a-training-corpus\r\n\r\nThe ability to specify a file path for a training corpus will be added in https://github.com/gunthercox/ChatterBot/issues/467 @vkosuri I haven't started working on anything to allow custom paths for corpus data (#467) yet, feel free to start if you are interested in working on it.\r\n***\r\nFor this ticket (#469) i'm in the process of researching the formats of other existing data corpora. I'm interested to see if there are any design patterns that might be beneficial to follow. I just wanted to post a link for later reference. This is for the current work-in-progress concept for the future version of ChatterBot's dialog corpus files. I'm still considering other ideas so this document will be updated in the future.\r\n\r\nhttps://github.com/gunthercox/ChatterBot/wiki/ChatterBot-Corpus-Specification In this model, responses are indicated by consecutive statements in each list. No problem, any questions you have about it are helpful because it lets me consider things that I might not have thought about. If you have any other questions, please ask them. I want to get as much feedback on the design as possible before committing to it.\r\n\r\nAlso, you are correct. For representing multiple responses to the same input, the input will have to be listed multiple times. I designed it this way to avoid deep nested lists of responses which might be difficult for developers to read, and more intensive for programs to traverse.\r\n\r\nFor programmable responses, I usually recommend some form of a customized logic adapter. However, I have seen valid cases where there are, for example, wildcards in statements. So a if a statement is something like: \"My favorite color is  {color}\". In this case, color can be any valid color. These wildcards are something that is well supported by [AIML](https://github.com/gunthercox/ChatterBot/issues/137), but it is currently something that is not well supported by ChatterBot. I will definitely look into the possibility of supporting AIML in the new corpus format, or something similar. Were there any features that you saw in Alice bot that ChatterBot doesn't have?  Hi @rajasimon, I am not very familiar with Django channels but they look quite interesting. Maybe take a look at the existing API view that is provided in the project: https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/ext/django_chatterbot/views.py @rajasimon Django encourages secure requests. If you are seeing an error about CSRF tokens, then you likely need to add the token to the request you are sending to your API.\r\n\r\nDjango provides several examples on how you can do this in their documentation: https://docs.djangoproject.com/en/1.10/ref/csrf/\r\n\r\nThe solution you use depends on the setup of your code. If you are sending your requests to the API using JavaScript then you probably want the AJAX solution.  @vkosuri Looks good to me \ud83d\udc4d   Hi @tshrjn, sorry about the error, `BestMatch` was a new class name that I added a few hours ago. I've released the latest version of ChatterBot which included this class. To upgraded run:\r\n\r\n```\r\npip install chatterbot --upgrade\r\n```\r\n\r\nThis should fix your issue.  ChatterBot uses logic adapters, which are essentially just modules that take input and return a response. Each response that is returned has a confidence value associated with it. The confidence value is a numeric indicator of how accurate the logic adapter _thinks_ the response is.\r\n\r\nA confidence score is _kind of_ a metric for accuracy but it probably better reflects the breadth of a particular bot's knowledge than the accuracy of it's responses. Arguably a chat bot that responds more confidently may also be more accurate, but that is based on the assumption that the set of logic adapters the bot uses are all completely accurate in their ability to judge the precision of the response they generate.\r\n\r\nBecause ChatterBot's logic adapters each encompass a modular process for selecting a response, there isn't necessarily a common way to gauge the accuracy of all of them. On an individual basis this might be possible but I don't have anything in the code base right now for doing a full evaluation of accuracy.\r\n\r\nPlease let me know if I can clarify anything. Currently `get_response` does not return the confidence value. I can see how this would be useful and I would be happy to add it as a feature in one of the upcoming releases of ChatterBot. Hi @csrgxtu I've opened #565 which makes a change so that the confidence score can be accessed on the returned statement object. (`response.confidence`)  What action would the logic adapter be taking in this example?\r\nNormally an input adapter would receive the input from Twitter and an output adapter send it back to Twitter. Right now there isn't a way to do this _exactly_. However, one simple way to achieve it would be to create two separate chat bot instances that share the same database. At one point, this feature was actually added: https://github.com/gunthercox/ChatterBot/pull/116\r\nI removed it because there wasn't a way to specify where an input from one source should be returned to (So for example, input from Twitter should return output to Twitter).\r\n\r\nI don't think this functionality would benefit ChatterBot. Supporting multiple inputs and outputs really increases the complexity of getting and returning responses. As I mentioned before, using multiple chat bots should provide the same functionality, but with no changes required to the code base.  Hi @boris314159, glad you were able to resolve the issue. Sorry I didn't get a chance to respond earlier.  @HelloJyo Did you try setting the database parameter to match the name of the one you are using? The available parameters are listed at the documentation link that @vkosuri provided.\r\n\r\nAlso, if you are looking to add data to the chat bot's database, I recommend taking a look at the [training documentation](http://chatterbot.readthedocs.io/en/latest/training.html). The training process will conveniently set up all of the required relationship data between dialog in the database. There is other methods for training: http://chatterbot.readthedocs.io/en/latest/training.html  This looks correct. This is an issue I am still looking in to. I think I have to look deeper into how Django's sessions work and specifically what triggers them to be created and destroyed. Hi @vkosuri, I apologize for not responding to your comment sooner. Somehow I missed the notification for it. I've opened up a pull request that should resolve the issue you encountered #480. It appears that I forgot to handle the case that a chat session id could be held in the Django session, but missing from the ChatBot's sessions.  Was this error produced by running one of the examples? I'm going to close this ticket off as it is a duplicate of #261  Hi @tryzombie501 See my response here for how to fix: https://github.com/gunthercox/ChatterBot/issues/443 @tryzombie501 That is correct, the chat bot will learn by speaking to the user. You can prevent the chat bot from learning by setting `read_only=True`, but by default the chat bot will continuously learn based on how the user responds to it.  Ok, hopefully I can help.\r\n\r\n1. \"I want my bot to instantiate the conversation\"\r\n\r\nI'm not exactly clear on this. Do you mean that you want the bot to start the conversation with the user instead of the way it is now where the users says something to the bot?\r\n\r\n2. This stack overflow post looks like it has a good answer for how to bind an event listener to the enter key: http://stackoverflow.com/questions/16996432/cant-figure-out-how-to-bind-the-enter-key-to-a-function-in-tkinter What about just manually displaying the text? Does it necessarily have to come from the chat bot? Great, I'm glad to hear you figured it out.  See https://github.com/gunthercox/ChatterBot/issues/443#issuecomment-264070500 If you also changed the example file as @nimraTassawar described, undo those changes. This issue is a duplicate of https://github.com/gunthercox/ChatterBot/issues/443\r\nPlease direct any further questions to that ticket.  My original intention for the example django app was to keep it as simple as possible so that new developers could easily see the changes they need to make to add ChatterBot to their Django project. I'm not opposed to the idea of making additions, but what would the benefit of a login page be? Since ChatterBot is now supporting concurrent chat sessions, I can see the ability to log into the Django example being useful. I think a good use case might be that someone wants to test out the chat bot having two different conversations. They could make two user accounts and sign in on different browsers.  After looking at the documentation in [their quickstart guide](https://wit.ai/docs/quickstart) I think ChatterBot actually already supports all of the _story_ functionality that you mentioned. The terminology between the two ChatterBot and wit.ai is rather different but I'm seeing a lot of similarities.\r\n\r\n1. **Creating a story** in wit.ai looks to be the same thing as **training** in chatterbot.\r\n2. **Adding a branch to a story** in wit.ai appears to be the same as **training with multiple variations of a conversation** in ChatterBot\r\n\r\nI will note that wit.ia does categorize input statements with a label called `intent`. This categorization is something that ChatterBot does not do.\r\n\r\n@bilalbayasut Is there a feature of _stories_ that I missed? ChatterBot currently doesn't support form-like information gathering in the core. Typically this is a somewhat specialized process that depends highly on the type of information being gathered and the circumstances under which the information is needed. So yes, if a someone wants to gather specific information from a user, they must code this logic themselves.\r\n\r\nChatterBot does allow you to [create your own logic adapters](http://chatterbot.readthedocs.io/en/latest/logic/create-a-logic-adapter.html). Typically, logic adapters are where responses are selected, but you can also write your own modified ones that look for specific inputs to respond to. In the case of your example of ordering flowers, it would be a simple enough case to check if the user's input says something close to \"Place my order of flowers\" then make an API call to place the order.\r\n\r\nDoes this help at all? Hi @bilalbayasut, my apologies for the late response. I appear to have missed your last comment.\r\n\r\nYou can create response pairs in ChatterBot using it's _training_ functionality. Here is a link to the documentation with more info and examples: http://chatterbot.readthedocs.io/en/latest/training.html\r\n\r\nEssentially, training provides several different methods to add statements, as you described. For example, if I want to tech the chat bot that \"Hi there!\" is a response to \"Hello\", then I would do the following:\r\n\r\n```python\r\nfrom chatterbot.trainers import ListTrainer\r\n\r\nchatterbot = ChatBot(\"Training Example\")\r\nchatterbot.set_trainer(ListTrainer)\r\n\r\nchatterbot.train([\r\n    \"Hi there!\",\r\n    \"Hello\",\r\n])\r\n```\r\n\r\nYou can make that conversation of statements as long as you want, ChatterBot treats it as a single conversation. You can also create variations of the conversation by training on different data.\r\n\r\nI hope this helps, please let me know if you have any further questions or if you think there is anything I could add to the documentation to help explain this better.\r\n\r\nFor now, I'm going to close this issue as I believe everything here should be resolved.  Go to `/Users/Hiruma/MyWorkSpace/GitHub/tzchatbot/env/lib/python3.5/site-packages/chatterbot/`\r\n\r\nIf you see a **directory** named `utils` delete it.\r\nAlso if you see a directory named `adapters` delete it.\r\n\r\nI had a similar issue recently. For some reason pip appears to be adding cached outdated modules from the previous version when ChatterBot gets upgraded. @vkosuri I thought this might be the case as well. I checked out the zip file that pypi has stored for the 0.5 release and all of the files appear to be correct.\r\n\r\nI did find that deleting the /build directory in my ChatterBot directory locally corrected the issue for me. @mohitgoyal001, Like most programming languages, Python imports are case-sensitive. `Chatbot` should be `ChatBot` in your import.  Just a quick note, the `add_extra_data` method adds the data to the statement object. If you want to save the modified statement to your database you can do something like this:\r\n\r\n```python\r\nst = Statement(input_statement)\r\nst.add_extra_data('intent', 'greetings')\r\n\r\nbot.storage.update(st)\r\n``` I think I see the issue. In `input_statement = bot.input.process_input_statement()`, the item returned (`input_statement`) is a statement object. Then you have `st = Statement(input_statement)` which is creating a new statement where the text is another statement object.\r\n\r\nTry changing `st = Statement(input_statement)` to `st = Statement(input_statement.text)`.\r\n     No problem! Happy to help.  Hi @loveJasmine, the reason that a `settings.py` file is not included in the examples directory is because it would contain [private API keys](http://softwareengineering.stackexchange.com/questions/205606/strategy-for-keeping-secret-info-such-as-api-keys-out-of-source-control) for the various examples that require them. To use this example, you would need to register a bot on the Microsoft Bot Framework website and use the credentials given there.\r\n\r\nYour `settings.py` file should look similar to the following:\r\n\r\n**settings.py**\r\n```python\r\nMicrosoft = {\r\n    'direct_line_token_or_secret': 'xxxxxxxxxxxxxxxxx',\r\n    'conversation_id': 'xxxxxxxxxxxxxxxxx'\r\n}\r\n```  See https://github.com/gunthercox/ChatterBot/issues/437 for my explanation of why there is no `settings.py` file included.\r\n\r\nIn the case of this example, if you look at the code you should see a comment that provides instructions on how to get set up:\r\n\r\n```python\r\n'''\r\nThis example demonstrates how you can train your chat bot\r\nusing data from Twitter.\r\n\r\nTo use this example, create a new file called settings.py.\r\nIn settings.py define the following:\r\n\r\nTWITTER = {\r\n    \"CONSUMER_KEY\": \"my-twitter-consumer-key\",\r\n    \"CONSUMER_SECRET\": \"my-twitter-consumer-secret\",\r\n    \"ACCESS_TOKEN\": \"my-access-token\",\r\n    \"ACCESS_TOKEN_SECRET\": \"my-access-token-secret\"\r\n}\r\n'''\r\n```  The following adapters share the same codebase but they use different comparison functions to compare statements.\r\n\r\n- `ApproximateSentenceMatchAdapter`\r\n- `ClosestMatchAdapter`\r\n- `ClosestMeaningAdapter`\r\n- `SentimentAdapter`\r\n\r\nThe `BaseMatchAdapter` can be renamed to `MatchAdapter`.\r\nDocumentation will need to be updated to show how to get the same functionality using the `MatchAdapter` as was available using the four other logic adapters.  Hi @shank7485, thank you for opening this ticket. I will make changes to the documentation to hopefully clarify these points. I've updated several pages of the documentation to hopefully clarify these questions. Thank you again for asking for clarification. It is very helpful for improving ChatterBot's documentation. Please let me know if there is anything else that can be improved further.  Hi @12520054, @bkrmendy is correct. You should be able to resolve this issue by installing ChatterBot's dependencies before installing chatterbot itself. I've opened a pull request (#426) that makes changes to correct this issue in future versions of ChatterBot. Thank you for reporting the issue.  - [x] Create new session objects\r\n- [x] Allow integration with Django sessions\r\n- [x] Add tests for sessions\r\n- [x] Update documentation\r\n\r\nCloses #372 If two bots are created, each will have sessions separate from each other.\r\n\r\n```\r\nbot1 = ChatBot()\r\nbot2 = ChatBot()\r\n```\r\n\r\nFor each bot, the sessions _could_ be shared across multiple adapters as long as there is a shared session id. Right now this is something that the developer would have to handle manually because a `ChatBot` instance has no way of knowing that a Gitter user is the same person as a user on the Microsoft Bot Framework. To handle this, the developer would likely have to store associations between a unique identifier and a user's verified usernames for each service (Gitter, HipChat, Microsoft Bot Framework, etc.).\r\n\r\nHopefully this answers your question. I'm planning to add more documentation on this to hopefully make it clearer.  So your recommendation is to compare the text of each statement with the stop words removed when searching for the closest match? Please correct me if I'm wrong, I just want to make sure I'm understanding correctly. Hi @vishnu-ks, @alekaizer, I'm going to close this issue because I'm still uncertain that it actually solves anything. I welcome any pull requests or code samples as those may provide better grounds for demonstrating and collaborating on a solution.  I think it's definitely possible, but because it's a web app the audio will have to be processed on the client's side. This might make things easier because there is likely several javascript libraries available that handle speech recognition and speech synthesis. It looks like Google Chrome has built in support for both speech recognition and speech synthesis: https://developers.google.com/web/updates/2014/01/Web-apps-that-talk-Introduction-to-the-Speech-Synthesis-API\r\n\r\nTo implement this, you would have to add some javascript to listen to the user's speech, then it could send that to the Django ChatterBot API to get the response. Once the response was returned, it could be spoken aloud to the user. Hi @vkosuri, I'm going to close this ticket off. I believe your question was answered, feel free to reopen the ticket if I missed something or you still have questions.  @vishnu-ks Thank you for posting your your `settings.py` this might help me to recreate this issue.\r\n\r\nThis appears to be the same error reported by @josefernandez91 here: https://github.com/gunthercox/ChatterBot/issues/398\r\n\r\nI'm going to close this ticket for now as it appears to be a duplicate. Feel free to click the subscribe button on #398 to get notified of updates on this issue.  @gullyy I'm going to close this off. Feel free to re-open it if the diagram in the documentation is not what you were looking for or if there are any details of ChatterBot's design that could befit by having another diagram created.  Hi, I've made a change to the `mongo_to_object` method to make sure that the absence of the `in_response_to` attribute will not cause an error. You can take a look at #415 for details on what was changed.  Hi @onlydarkknight, I've made changes to correct the issue. I've also added a unit test to make sure this doesn't break again in the future. These changes will be available when I release the next version of ChatterBot.\n\nThank you for posting both your example code and the error traceback. It made debugging the issue much easier.\n You don't have to wait. I released the next version this morning. Version 0.4.13 includes the fix.\n Looking at the traceback, it appears that the issue is coming from the `jsondb` package (`File \"D:\\Python27\\Lib\\site-packages\\jsondb\\db.py\"`). Please make sure you have the latest version installed by running `pip install jsondatabase --upgrade`\r\n\r\nYou may also find that you need to encode test from the response statement to display it in the terminal. I've added an example bellow to help you.\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\n\r\nchatbot = ChatBot(\r\n    'Ron Obvious',\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer'\r\n)\r\nchatbot.train(\"chatterbot.corpus.hindi.greetings\")\r\n\r\ntext = unicode(u\"\u0928\u092e\u0938\u094d\u0924\u0947\")\r\nresponse = chatbot.get_response(text)\r\nprint response.text.encode('utf-8')\r\n``` I was able to run the example I posted without error. In the traceback you posted, the part that says `character maps to <undefined>` looks very odd to me. Is it possible that the default encoding isn't set on your computer? To check this, what is the output of:\r\n\r\n```python\r\nimport sys\r\nprint sys.getdefaultencoding()\r\n```\r\n\r\n(This [Stack Overflow](http://stackoverflow.com/questions/11741574/how-to-print-utf-8-encoded-text-to-the-console-in-python-3) question might serve as a good reference if this is the case.)  Could you check what version of ChatterBot you have installed?\n If you have version 0.4.12 or lower then you don't have this method available. Right now it is only available if you install ChatterBot from source to get the current version, or if you wait until version 0.4.13 is released.\n\nFeel free to reopen this ticket if I have incorrectly addressed the issue.\n  Hi @graylu21, would removing the try/except block and setting your own termination condition work for you? For example, you could do something like:\n\n``` python\n while my_condition:\n     bot_input = bot.get_response(None)\n```\n How are you using ChatterBot in Spyder (I'm not very familiar with Spyder)? Maybe I can help figure out a solution based on your setup.\n For a GUI example, there is one using Tkinter in the examples directory: https://github.com/gunthercox/ChatterBot/blob/master/examples/tkinter_gui.py\n I'm looking into possible solution. According to a few sources online you should be able to exit a process running in a Spyder console by pressing `ctrl c`.\n\nAnother source stated that you can press `I` _twice_ to interrupt the kernel (http://stackoverflow.com/a/38229513/1547223).\n\nLet me know if either of these work for you?\n @graylu21 I'm sorry, but I don't think this is a functionality that I can add to ChatterBot. I'm not very familiar with the iPython ecosystem and I can't make a recommendation on how to do this. I've looked into the possibility that other Python frameworks that typically run in a loop might handle this (Django or Flask for example), but I could not find any evidence of other developers attempting this.\r\n\r\nI'm open to accepting a pull request if anyone is interested and can figure out a good way to handle this. For now, I'm going to close this ticket because I'm not sure that there is a good way to do this.  @larkinscott Thanks, this sounds useful. I'm willing to give it a shot.\n  Awesome, glad this got resolved.\n  Sure, let's pick just one version of Python to use and go from there. Which version of Python would you _prefer_ to get chatterbot installed under?\n Ok, so bear with me if you have already done this. Can you tell me the output if you enter the following:\n\n```\npip3 install chatterbot --upgrade\npython3 -m chatterbot --version\n```\n Ok, so looking at the traceback, the `UnsuitableForProductionWarning` is just a warning and _can_ be ignored. The `MissingCorpusError` is a definitely an issue. What happens when you run the command it reccomends?\n\n```\npython3 -m textblob.download_corpora\npython3 chatbot.py\n```\n Awesome, I'm glad it worked. I will note that I do have plans to remove `textblob` from ChatterBot in the future in favor of handling tasks like this automatically.\n ChatterBot actually already handles this internally for the NLTK data corpus. An example can be seen here: https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/utils/wordnet.py#L16. The issue is textblob (which is just another library that wraps NLTK to provide convenient functionality). Textblob, as you saw, handles the downloads explicitly instead of automatically. The goal moving forward would be simply to remove ChatterBot's dependency on textblob.\n  Hi @josefernandez91, I'm looking in to this. My goal is to create a test case that recreates the issue.\n @josefernandez91 Could you tell me what version of ChatterBot you have installed? You should be able to check this by running `python -m chatterbot --version`.\n Not yet. For some reason, I can't seem to recreate the error. I will try to look into if further as soon as I have time.\n\nIn the mean time, if anyone else feels like taking a crack at this, the issue is coming from these lines [34-37] in https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/ext/django_chatterbot/views.py#L34\n\n``` python\n        if request.is_ajax():\n            input_data = json.loads(request.read().decode('utf-8'))\n```\n I believe this issue has been corrected by #428. I'm going to close this ticket off for now, feel free to reopen it if the issue persists.  Hi @phpmind, It sounds like you might need to [create a logic adapter](http://chatterbot.readthedocs.io/en/latest/adapters/create-a-logic-adapter.html) that handles the lookups to the endpoint that you are getting your flight data from. This will allow you to control what \"pattern\" your bot looks for to trigger a lookup and control how it extracts that information from the user's input.\n\nChatterBot doesn't have any kind of char generating functionality, maybe look into something like [matplotlib](http://matplotlib.org/)?\n For machine learning, ChatterBot does searches on statements stored as a graph data structure. Many of the logic adapters use different methods such as Bayesian Networks for statement analysis to select responses.\n\nI'm actually in the process of researching the Ubuntu data corpus and looking at ways to allow it to be easily loaded into a ChatterBot instance's knowledge base.\n\nHere are a few resources if you are interested in checking out the current training modules that are used:\n- Training documentation: http://chatterbot.readthedocs.io/en/latest/training.html\n- Training source: https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py\n\nGPU processing isn't something that I have a lot of experience with. I think you might get a better answer to that question by rephrasing it to be slightly more generic (maybe just about GPU processing in Python in general) and asking on a site like [Stack Overflow](https://stackoverflow.com).\n  @davideboschetto Thank you, this looks good. I'll merge it in.\n  Hi @alekaizer, I think I might be able to provide a few suggestions. When an instance of the `ChatBot` class is trained, all of the knowledge it learns get's written to it's database. Each `ChatBot`, by default, is actually mostly stateless, the only exception being it's `recent_statements` attribute that stores the current conversation that the user is having with the bot.\n\nWhat database are you using for your chat bots?\n\nI'm wondering if instead of serializing the entire chat bot, if it would be simpler to specify a different storage location for each user's bot's data..\n If the new bots are using the same database there is no need to train them. Otherwise, if it is an empty database, training is definitely recommended.\n  @alekaizer That is an excellent example. There isn't a better way to provide a default response, I usually recommend something similar to that as a solution.\n @datta90 Are you sure you are typing it into the terminal _exactly_ as it was written above?\nThe error message is correct, there is no `.input` attribute after `.logic`. I think maybe you meant to type just `bot.input.process_input`.\n A `UnicodeDecodeError` is a Python error that is triggered when a file is opened for reading without the encoding being properly specified. I'll look into this to make sure that ChatterBot's corpus reader is specifying it correctly.\n @datta90 I've made a correction to the German corpus that should fix the issue you reported: https://github.com/gunthercox/ChatterBot/pull/394\n  This should definitely be possible. I'll have to look into the format of the data in the Ubuntu corpora before I can make a recommendation on how to do this. In the mean time, feel free to take a look at the existing training modules for some ideas: https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py\n  @vkosuri Looks good, is this ready to be reviewed?\n @vkosuri From what I can see, this looks fantastic.\n\nIn the examples, is the value for `directline_access_token_or_secret` an actual access token?\n **Comments & feedback**\n- Overall, the code looks fantastic.\n- I'm very glad to see that logging statements were included.\n- It might be useful to include a simple example program in the `examples` directory. This would also be helpful for manual testing since there aren't any unit tests yet.\n\nI would be happy to help write tests for this, let me know.\n How did you get the value to use for the `conversation_id`? I'm trying to set up the example to run locally, do I need to manually authenticate with the API and start a new conversation to get a conversation_id?\n I believe all the changes here look good.\n  @ThomasKoscheck I'm going to close this pull request due to the aforementioned issues.\n  Lack of a way to train in Django is currently a known issue (https://github.com/gunthercox/ChatterBot/issues/295). I'm in the process of developing a method to add this functionality.\n\nIt looks like occurrences currently aren't being tracked by the Django models, I will add a migration to fix this for the next release.\n @maclogan Actually, I was wrong. Occurrence counts are already on the Django models: https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/ext/django_chatterbot/models.py\n  Hi @alekaizer, how are you getting these results? I don't believe it should be possible for these two statements to exist separately. The _two_ statements you have listed are the same statement because they have the same ID. Mongo DB won't allow two objects to have the same ID and ChatterBot applies a unique index constraint to the `text` attribute of statements so two statements cannot be the same.\n\nI might have missed something, but maybe the issue is just how you are inspecting the database?\n I _think_ this is the correct functionality. If an entry exists for `\"Go ahead and ask.\"`, then the `in_response_to` attribute for that statement should list `\"Can I ask you a question?\"` as a response. The actual entry for `\"Can I ask you a question?\"` should have `\"in_response_to\": []` as empty because the chat bot hasn't learned anything in response to `\"Can I ask you a question?\"`.\n\nI think the issue here might just be the wording on the attributes.\n `\"Go ahead and ask.\"` is in response to `\"Can I ask you a question?\"`.\n`\"Can I ask you a question?\"` is in response to nothing.\n\nLet me know if this answers your question.\n There are a few reasons why statements like `\"Can I ask you a question?\"` are stored when they have an empty `in_response_to` attribute.\n1. Other data can be stored on the statement object. For example, statements can have an `extra_data` attribute that holds information generated by various adapters.\n2. For data consistency. Every response has a corresponding statement that _can_ have responses.\n3. From a performance perspective, it is useful to have it in case we need to list all statements known by the chat bot. If we did not do this, then we would need to traverse all statements and all statement-responses to list them.\n4. Since the chat bot's database is essentially storing a graph data structure represented as the relationship between statements and responses, then it is useful to have the next statement in the graph, even if that statement has no known responses. This just tells us that there is more to learn.\n\nI hope these help.\n  Closes #169 Sure, consider a scenario where multiple logic adapters are being used. In a case where the outputs generated by the logic adapters are as follows:\n\n| Confidence | Statement |\n| --- | --- |\n| 0.2 | 'Good morning.' |\n| 0.5 | 'Good morning.' |\n| 0.7 | 'Good night.' |\n\nIn this case, two of the logic adapters have generated the same result. The idea behind these changes is to treat the fact that the two adapters have agreed on a response as a significant indicator that this particular response has a greater probability of being a more accurate response to the input.\n  It looks like it was renamed to `compliment.corpus.json`: https://github.com/gunthercox/ChatterBot/tree/master/chatterbot/corpus/data/portuguese\n Are PT and BR representing different dialects of Portuguese? If they are, removing the suffix was my mistake, in which case I will go back and make the necessary changes.\n\n---\n\nSorry I haven't responded to #367 yet, I haven't had a chance to look into it. It may be a bug, or it might be the result of the existing algorithms being used. Once I have a chance to walk through what is happening I will respond with some kind of answer.\n Ok, I'll create a pull request to separate the dialects (i'm also not an expert of Portuguese).\nI think I'm going to keep the directories separate though, so something like:\n`/data/portuguese-brazilian/compliment.corpus.json` and `/data/portuguese/somethingelse.corpus.json`\n @alekaizer Actually, after [a bit of research](https://en.wikipedia.org/wiki/Portuguese_dialects), it looks like the two dialects are otherwise indistinguishable. I'm going to leave the directory as-is for now. Even google translate appear to not distinguish between Portuguese and Brazilian Portuguese.\n  Yes, I briefly mentioned adding support for supporting conversations with multiple different users in https://github.com/gunthercox/ChatterBot/issues/313#issuecomment-250967889, but essentially the way it would be supported is with a form of session management for each conversation _session_ that that the bot is having.\n So far, I was considering changing the `recent_statements` variable to be a dictionary where the keys are unique session ids and the values are the queues holding the most recent conversation for that session. A few of the methods in the `ChatBot` class will have to be modified and a number of tests will need to be modified or created.\n\nOne thing I'm still unsure about is what to add for methods to allow the current session to be specified.\n @rmdort That might cause a slight issue if the same `Statement` object in the database becomes a part of multiple conversation sessions that users are having with the bot. It would allow session ids to be overwritten by other user's conversations.\n @vkosuri Looks interesting, in the `ConnectionCache`, what are the _connections_ usually?\n Session management for ChatterBot will essentially just be adding support for having conversations with multiple users at the same time.\n\nRight now, the the `ChatBot` class just stores the current conversation.\n\n```\nChatBot -----> Conversation\n```\n\nThe change that needs to be made is to allow the chat bot to store multiple conversations.\n\n```\n            |-----> Conversation 1\n            |\nChatBot --> |-----> Conversation 2\n            |\n            |-----> Conversation 3\n```\n\nRight now my thoughts are as follows, feel free to ask questions or add suggestions.\n- Each logic adapter only needs access to the one conversation at a time so no changes to logic adapters should be necessary to facilitate these changes.\n- The _current_ conversation will need to be specified by passing an additional argument to the `ChatBot.get_response()` method. This additional argument should be a unique identifier that can be used to select conversation and from the chat bot to be passed to the logic adapter.\n- There needs to be a method that adds a new conversation and returns the unique identifier to access it.\n\n**Security:** There is a security component to this. My plan is to investigate how other Python frameworks like Django and Flask handle their session security.\n  Do you have a unicode header at the top of your Python file?\n\n``` python\n# -*- coding: utf-8 -*-\n```\n Hi @ThomasKoscheck, I've made some changes to the formatting of the data in the German corpus (https://github.com/gunthercox/ChatterBot/issues/394) so that it passes JSON validation tests. Locally I was able to trigger a `UnicodeDecodeError` due to invalid JSON. This may have been related to the issue you encountered.\n  Looks great, thank you.\n  Looks great! Thank you.\n  The solution; more training data. Because `'what is your name'` is very similar to `'what is your address'` (they both share a common `what is your`) the logic adapters are picking it up as a possible response. However, if you train your bot with other variations of the input, something like: `['where are you located','R2D2 AI Street, TUXVILLE, PC-Land']`, then it will generate a higher confidence for inputs similar to that text.\n  Adding information is currently supported through the [training process](http://chatterbot.readthedocs.io/en/latest/training.html), however not to the extent that you describe.\n\nI'm planning to (very soon) introduce a `Conversation` object that allows the chat bot to manage information from individual conversations that it has had or has been trained with. I believe this will provide the functionality you are looking for as it will, among other things, allow statements from those individual conversations to be removed.\n\nFor having the bot maintain different conversations, this functionality will be added as a part of #313. My plan is to add the ability for a chat bot to track different chat `sessions` that it is having with different users. These changes are a bit further off at the moment though.\n  I'm going to close this ticket as I believe @rmdort has provided a good solution.\n  @saadj55 I just came across an article that you might find interesting or useful: http://www.nltk.org/book/ch07.html\n  @maclogan What version of Django do you have installed?\nYou can run `python -m django --version` to check this.\n Hmm, OK. I can't create this issue testing with Python 3, Django 1.10.2 and the latest version of ChatterBot.\n\nIs there any chance that you are using the old example code from https://github.com/gunthercox/django_chatterbot (which is outdated and no longer maintained)\n\ninstead of https://github.com/gunthercox/ChatterBot/tree/master/examples/django_app (which is the latest, tested copy of the example)?\n @maclogan What version of ChatterBot do you have installed?\n Ok, I was just able to replicate the issue you are having. I've released ChatterBot `0.4.11` which appears to fix this problem. What to upgrade and check if the issue is fixed for you? You should be able to run `pip install chatterbot --upgrade` to get the latest copy.\n  In this case, what if you modified your logic adapter to have a variable like `self.last_ticket_referenced`. Then, if the input contains the desired trigger phrase, `self.last_ticket_referenced` is updated to match. Perhaps something like this:\n\n``` python\nclass JiraLogicAdapter(LogicAdapter):\n\n    def __init__(self, **kwargs):\n        super(JiraLogicAdapter, self).__init__(**kwargs)\n\n        self.last_ticket_referenced = \"\"\n\n    def can_process (self, statement):\n        is_match = re.match(r'^/jira', statement.text)\n\n        if is_match:\n            self.last_ticket_referenced = # Insert code to get ticket id from text here\n\n        return is_match \n```\n\nThis will allow the logic adapter that handles jira related input to keep track of the last ticket that was mentioned by the user.\n  I like what this idea is trying to accomplish, unfortunately I think it might be going slightly against what ChatterBot aims to accomplish. This seems more like a command line application than an interactive conversation.\n\nThe goal for ChatterBot is to understand the user's input and then respond appropriately. If there is any opportunities to improve it's ability to answer questions and respond to input I will be happy to execute the necessary changes. However, I don't think specifying the logic adapter can be supported in the project's core.\n  Currently no. Getting this set up would require some modifications to the current codebase. With that said, I think this would be a fantastic thing to support. I will look into the required changes in the current Django views that would be needed to allow this.\n @thedp I've made changes in #374 that now allow data to be passed with the statement to the django view using the already existing `extra_data` attribute supported by `Statement` objects.\n  Hi @liberaltech, I currently don't have any plans to recreate ChatterBot in JavaScript. I would not be opposed to helping out with a JavaScript fork of the project if anyone ever decides to create one, but for the time being most of my efforts are placed on developing and expanding the current codebase.\n\n---\n\nAs a side note, I've seen several examples of ChatterBot being used in web APIs which can easily be called from Node applications. I realize this isn't the same, but it could be a way to quickly get ChatterBot's functionality present in a JavaScript app.\n  Using python's multiprocessing, large amounts of training data can be applied to a ChatterBot instance in parallel as long as the database being used with that chat bot supports concurrent writes.\n\nThe goal would to be to create a new training class that will split a large file into multiple files, and then train the chat bot using multiple parallel processes.\n  I've seen this before, but it appears to be somewhat sporadic. Occasionally data files will be downloaded for NLTK even when they have already been downloaded. I will look into the issue.\n This should be resolved by #369 \n  Look great, thank you!\n  Looks great!\n  Sure, contributing changes with GutHub and git is fairly easy. The basic flow to do this is:\n- Fork the project\n- Clone your fork locally\n- Create a new git branch to start working on your changes\n- Make code changes in your local copy\n- Commit changes to git and push them up to your clone\n- Create a pull request to merge changes from your project to the original\n\nIf you need more info on any of these steps feel free to ask, I'm sure there is also a ton of information out on the web on how to do this.\n ChatterBot actually doesn't define a language anywhere. It learns based on user input. As a result, the only time a language is really \"set\" is when a chat bot is being trained with a particular language.\n\nHowever, the math words language does have to be set manually (currently). This is done by specifying the parameter `math_words_language='russian'` when initializing the chat bot.\n  Looks awesome \ud83d\udc4d \n  @armsmani I suspect you may have named one of the classes in your code `ChatBot`, however I can't be certain based on the information provided.\n  See some comments from other PR https://github.com/gunthercox/ChatterBot/pull/770#pullrequestreview-47294006 and https://github.com/gunthercox/ChatterBot/pull/770#issuecomment-312465339\r\n  Tests are currently failing on this pull request so unfortunately I cannot merge it yet.\n  I'm not sure if I understand what the benefit of removing it would be. If a bot hasn't been trained and it hasn't communicated with anyone before, then it has no information about how to respond to input. In this scenario (which should only ever occur once) the only information it has to respond with is the user's input.\n  I don't believe this is an error.\n  Looks good \ud83d\udc4d \n  This makes it possible for the output adapter to make a decision about if some kind of action (such as an API call) should be taken based on that confidence value.\n @rmdort Sure, it comes down to implementing that in your own output adapter, but that could definitely be done.\n  (Added in #330)\n  Check out `test_response_extra_data` in https://github.com/gunthercox/ChatterBot/blob/master/tests/test_chatbot.py#L134. It appears to confirm that the `extra_data` parameter is being saved from the input statement.\n  Yes you can, just be sure to save it back to the database.\n The input statement is passed to the logic adapter so it should definitely\nbe possible to modify. I may be misunderstanding your question, but you can\nmodify any attribute of the statement in your logic adapter and it will be\navailable to the next adapter as long as you save it to the database.\n\nOn Fri, Oct 7, 2016 at 9:23 AM Vinay M notifications@github.com wrote:\n\n> ok noted. How about the input response?\n> \n> I want to create a logic adapter that does spell correction and handles\n> the output to the next logic adapter.\n> \n> \u2014\n> You are receiving this because you commented.\n> \n> Reply to this email directly, view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/325#issuecomment-252250796,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AB778kzf_O6_bSid3GGHzfkDFubOEiSaks5qxkfmgaJpZM4KQ7dE\n> .\n Correct.\n I would recommend writing this as a preprocessor instead of a logic\nadapter. Logic adapters typically are for generating a response while\npreprocessors are specifically designed to alow you to modify the input\nthat the bot recieves.\n\nhttp://chatterbot.readthedocs.io/en/stable/preprocessors.html\n  I believe you could achieve this by creating a different chat bot instance for each subservice that you wich to provide. Tanking a look at the existing chat bot API view might provide you with a good idea on how to add this in your own code: https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/ext/django_chatterbot/views.py\n  This would need a custom logic adapter and possibly a custom output adapter to handle this case. At the moment, the existing ones just handle returning a single response.\n  Thank you, looks good :+1: \n  @rmdort, this looks fantastic so far.\n @rmdort NLTK is used internally in this project, but as a dependency that is installed separately though the python package manager. This is different than redistributing code from anther project.\n Looks good :+1: Thank you!\n  This should make it easier to create bots that share a common configuration or just have large configurations in general. The file should be in json or yaml format.\n\n```\nfrom chatterbot import ChatBot\n\nchatbot = ChatBot.from_config_file('./my_bot_config.json')\n```\n  It would be useful to have access to a utility function that could parse date time objects out of sentences. Use cases include scheduling reminders and looking up historical information.\n\n**Example input:**\n- \"Let's meet next tuesday.\"\n- \"Do you want to meet on Tuesday or Thursday?\"\n- \"We will deploy our new app in the first quarter of 2016.\"\n- (Standard datetime formats)\n- \"My birthday is on January 1st.\"\n For the API I was thinking of just a simple function that takes a string as input and returns a list of Python datetime objects in the order that they were found in the string. So something like:\n\n``` python\nfrom chatterbot.utils.parsing import datetime_parsing\n\ndates = datetime_parsing('I have meetings on November 2nd and 3rd.')\nprint(dates)\n\n>>> [datetime(xxx), datetime(yyy)]\n```\n ChatterBot is distributed under the BSD 3-clause licence (similar to many other Python projects such as Django). This license does allow for commercial use.\n\nFor running tests, this project uses nose. Nose can be installed with pip by running `pip install nose`.\nTests can be run using the command `nosetests` and individual test files can be specified by running `nosetests path/to/test/file.py`\n Closed by https://github.com/gunthercox/ChatterBot/pull/321\n  Closes #314\n  This is just a thought (still needs to get expanded upon) but it may be interesting to experiment with event-driven patterns in Python for response generation.\n  I believe there is actually two cases here, both of which I'd like to implement.\n1. One bot is having many different conversations with single users (https://github.com/gunthercox/ChatterBot/issues/372).\n2. The bot has a conversation with a group of users. The users may address the bot or each other. (This is a bit more complex than the first case).\n  @rmdort I'm glad you figured it out. I agree with the idea to add methods to add and remove logic adapters. Feel free to open a ticket with that request.\n  Yes, this is possible. When you create your chat bot, set `tie_breaking_method=\"random_response\"` like this:\n\n``` python\nchatbot = ChatBot(\n    # ... other parameters ...\n    tie_breaking_method=\"random_response\"\n)\n```\n\nhttp://chatterbot.readthedocs.io/en/latest/adapters/tie_breaking_method_mixins.html#chatterbot.adapters.logic.mixins.TieBreaking.get_random_response\n  This should be possible to do, but you will need to handle the state of this interaction within your custom logic adapter.\n It looks like you are going in the right direction.\n\nLet me know if you have any feedback or thoughts on the current setup of logic adapters. I originally designed them for just processing responses to a user's input but I am seeing a lot of developers creating action-style logic adapters. I'm interested in making changes to better accommodate multi-step workflows like the one you are working on.\n @rmdort It looks like topics have to be set manual in these implementations. I have a few notes on the subject which I can create a ticket for, but I'm wondering if a setup where the chat bot **learns** to group similar conversations together by \"topic\" might be more flexible.\n\nIs there a use case for setting topics manually? From my understanding, the goal of a topic is just to group similar conversation data together so make responses more coherent.\n  Looks good. Thank you!\n  Hi @sjpatil & @EnderShadow , lets take a look at the code for `basic_example.py`.\n\nThe goal of this line is to get a response to the input \"How are you?\". However, it is important to keep in mind that this chat bot is untrained at this point, so it doesn't know **anything** about the world or how to communicate. The first thing we do to it is say \"How are you?\" so now, it knows one thing (that phrase). So, the only thing it can do is respond back with that input.\n\n``` python\nresponse = chatbot.get_response(\"How are you?\")\n\nprint(response)\n```\n\nOk, so let's try something else. If we train the bot, it can learn more about the structure of responses.\nHere is another example:\n\n``` python\nfrom chatterbot.trainers import ListTrainer\n\nchatbot.set_trainer(ListTrainer)\n\n# Tran the chat bot  with an example conversation\nchatbot.train([\n    \"How are you?\",\n    \"I am good\",\n])\n\nresponse = chatbot.get_response(\"How are you?\")\n\nprint(response)\n```\n\nNow that we have trained the bot with a bit of information, the response it will return when given \"How are you\" is \"I am good\".\n\nI hope this helps. Please let me know if you encounter any other issues.\n  > Also some documentation on how to add some functional adapters, things that actually do stuff like play music, google something or check your mail. Right now I did a few, and they do stuff within adapter itself, after checking if they can process the input, but I'm not sure if thats the correct approach either.\n> ~ @Nixellion https://github.com/gunthercox/ChatterBot/issues/234#issuecomment-246184411\n  When `read_only=True` the bot will select the best response it can from what it already knows. The only difference from normal operation is that the user's response to whatever the bot says will not be learned by the bot.\n  Thank you! Looks good \ud83d\udc4d \n  @rileyjshaw There is a known issue with the current release where the filters parameter is expecting a callable for the filter class instead of a string path to the callable class. This has been fixed but the changes won't be available until the next version of ChatterBot is released.\n @rileyjshaw ChatterBot version 0.4.10 has been released.\n  Yes, you can create a custom logic adapter that checks for your specific phrases. Check out the documentation and the existing logic adapters. Let me know if you have any questions.\n- http://chatterbot.readthedocs.io/en/stable/adapters/logic.html\n- http://chatterbot.readthedocs.io/en/stable/adapters/create_a_logic_adapter.html\n- https://github.com/gunthercox/ChatterBot/tree/master/chatterbot/adapters/logic\n  It appears I overlooked this functionality when adding Django integration to ChatterBot. There is currently no way to do this within a django app.\n @liberaltech @shuboy2014 Not really. If the \"external\" training updated the statement and response entries in the django app's database, then yes. Otherwise it is not possible.\n\nThe solution that I am currently considering, is adding an API endpoint for training the chat bot, or at least for passing data to it's training function.\n I'm currently working to add a Django management command and `training_data` parameter that will allow chat bots to be trained. This functionality should be available in the next version released.\n\nUpdated documentation will be available, but essentially all you will need to do is call the following command in your Django project.\n\n```\npython manage.py train\n```\n\nThe changes can be seen here: https://github.com/gunthercox/ChatterBot/pull/401\n  @navyad the changes look good. I'll have to test the changes out but the code looks like it works. (I believe the remaining failing tests are just due to the old parameter styles being passed in)\n @navyad Thank you for the attempt on this. I'm going to have to close this off because tests never passed and there has been a number of changes to the master branch since this pull request was opened. I may reattempt this in the future, but I think I need to redesign it so that it doesn't completely break backwards comparability with code written for previous versions of ChatterBot. Thank you again for your time, I'm sorry this can't get added in right now.\n  Hi @hobson, these changes look great. I just had question about the changes, once that is resolved I think this should be good to merge.\n  Hi @Jackojc,\n\nThe `DeprecationWarning` is being triggered in the codebase of NLTK, which is another library that ChatterBot uses internally to handle various text analysis tasks. You can see where this code is being used around line 59 in https://github.com/nltk/nltk/blob/develop/nltk/decorators.py\n\nThe `UnsuitableForProductionWarning` warning is being triggered by ChatterBot. Keep in mind that it is just a warning, not an error. The warning is being displayed because the default storage adapter stores conversation information that the bot learns in a json file. Doing this works great for testing and debugging and even small projects. However, if someone tries to train the bot with something like ~10,000 statements, then the performance of the chat bot will be extremely slow because of the disk io and memory constraints (making it unsuitable for production).\n Hi @Jackojc,\n\nThe latest release of ChatterBot (0.4.10) now allows a parameter to be passed in that will suppress the JSON File Database performance warning. To use it, you must set it when constructing your chat bot:\n\n``` python\nchatbot = ChatBot(\n    # ...\n    silence_performance_warning=True\n)\n```\n  The Microsoft Bot Framework has some great features that allow a chat bot to easily connect with various online services. Adding support so that ChatterBot adapters can connect to the Bot Framework endpoint to do various tasks might be useful.\n- REST API Documentation: https://docs.botframework.com/en-us/restapi/connector/\n @vkosuri Unfortunately I haven't had a chance to look into this yet. The REST API documentation for the bot framework looks to be rather thorough, but I haven't been able to look into what would be required to support integration with it or how much work it would involve.\n @vkosuri Sure, a pull request would be fantastic!\n @phpmind There are different advantages to using ChatterBot and Microsoft Bot Framework. Choosing one over the other greatly depends on what you want to create. Here are a few major differences that I can point out. There may be others, but these seem like the most important.\n\n| ChatterBot | Microsoft Bot Framework |\n| --- | --- |\n| Open source, allows you to host it your self online or offline. | Requires a developer account and a connection to the Microsoft Bot Framework API |\n| Supports integration with some chat platforms and allows for new platforms to be added by the developer. | Supports integration with many chat platforms. |\n| Does not support survey data gathering out of the box. The developer is responsible for coding this logic. | Has great support for allowing the bot to survey the user for information. This is useful for allowing a bot to ask a user for information needed to schedule an appointment. |\n| Supports learning to communicate based on interactions with users. |  |\n| Supports highly customizable response selection logic. |  |\n\nRight now, Microsoft Bot Framework is ideal if you want to create a bot that handles a repetitive task that requires a user to provide several different informational components. ChatterBot is intended to provide support for textual _conversations_ but it leaves prompting for questions up to the developer. A good use case for ChatterBot might be a bot that answers questions in a chat room when you are not around. The bot would be able to learn from past conversations and it's knowledge and accuracy would improve over time.\n\nThere are advantages to both, the goal of adding support for integration with Microsoft Bot Framework to ChatterBot is to allow developers to leverage the best parts of both.\n  SyntaxNet is an open source project released by Google for analysing the parts of a statement. \nI haven't had a chance to look fully into it yet but this might be a usefull feature to add to ChatterBot. Essentially it could make it so that ChatterBot can learn to understand what statements mean.\n- Google Research Blog article: https://research.googleblog.com/2016/05/announcing-syntaxnet-worlds-most.html\n- Penn Treebank Project: http://www.cis.upenn.edu/~treebank/\n I think the best way to implement this would be as a comparison method, similar to the ones found in [chatterbot/conversation/comparisons.py](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/conversation/comparisons.py).\n\nAt this point, I'm not sure if this will be possible to do, but it would be amazing if the SyntaxNet library could be used to compare the similarity of two statements.\n @narvind2003 Sure feel free to submit a PR what you have.\r\n\r\nAnd also I was planning do this task using [Dependencies and Dependency Grammar](http://www.nltk.org/book/ch08.html) 5th topic in this chapter.\r\n\r\n  At the moment, statement objects have an `extra_data` attribute designed to allow additional information to be stored on the statement object. This is useful for allowing logic adapters to cache calculated information on the statement.\n\nThe issue with the current setup is that having this as a dynamic field may not be the best way to store this data for multiple reasons. Mainly, No-SQL databases like Mongo DB work great with a dynamic field attributes, but SQL databases make it a bit more difficult to accomplish the same functionality.\n\nThe addition of the ability to set different caching backends for ChatterBot may be the most elegant solution. A key-value store for statements could provide an efficient way to maintain additional data associated with a statement. This change would also make ChatterBot more scalable by allowing it to integrate with key value stores like redis. Simple in-memory or file storage cache backends could also be made available for testing.\n\nThis may also be a better alternative to resolving #286.\n Closing this off, there are many cases where the cached extra data should never expire. Because of this it makes more sense to store it in the database with the statement. I'm going to re-open this ticket. I'm exploring new options for using a caching module to improve response generation performance.  Currently, all of the parameters passed to a chat bot are also passed to each of the chat bot's adapters regardless of whether or not that adapter uses that parameter. This setup also makes it a bit unclear as to which adapter an extra parameter is used for. As ChatterBot grows, there might also be future issues with parameter name conflicts between multiple adapters that expect the same argument.\n\n**Proposed parameter change:**\n\n``` python\nChatBot(\n    storage_adapter={\n        'class_name': 'my.storage.AdapterClass',\n        'database_name': 'my_database'\n    },\n    logic_adapters=[\n       {\n           'adapter_class': '.some.adapter.ClassName',\n           'api_key': 'my_api_key_string'\n        },\n        {\n           'adapter_class': '.some.adapter.ClassName',\n           'api_key': 'my_api_key_string'\n       }\n    ]\n)\n```\n  The name `context` is confusing. It is actually the ChatBot instance.\r\n\r\n**Details**\r\nWhen any adapter (input, output, logic, storage) is added to an instance of ChatterBot, it is initialized with a variable called `context` which allows the adapter to access other adapters and variables that were set on the ChatBot instance.\r\nThe `context` variable should be renamed to `chatbot` to be more self-explanatory  At the moment, not all of ChatterBot's storage backends support querying and filters. To maintain backwards compatibility, a field (`adapter_supports_queries`) has been included on all storage adapters. By default, `adapter_supports_queries` is false. If a storage adapter supports queries, then it needs to have `adapter_supports_queries = True` set in it's `__init__` method.\n\nIn some future release, storage adapters should be set to support queries by default.\n  When I'm presenting an application built with ChatterBot, having this filter enabled will make it so that the chat bot cannot return a response with a swear in it :)\r\n\r\nThat's what I get for using Twitter as a source of training data :dizzy_face: \r\n\r\nWIP status:\r\n- [x] Resolve issue with random response and base query\r\n  - Priority for filters?\r\n- [x] Resolve issue with response data containing results that we want to ignore\r\n\r\n***\r\n\r\nCloses #1052 Hi Thomas, it currently can't be used because I never finished these\nchanges. I've been meaning to work on it but I've been busy creating and\nupdating other parts of ChatterBot.\n  ChatterBot currently has a [few response selection methods](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/conversation/response_selection.py) that can be used to determine how it selects a response when there are multiple equivalent possible responses.\r\n\r\nHypothetically, the current conversation that the user is having with the chat bot could be compared to past conversations for similarity. This information could then be used to select a response from the list of possible options.\r\n\r\n**Getting information about the current conversation**\r\n\r\nEach instance of ChatterBot stores a list (`recent_statements`) of the last 10 interactions that it has processed. Each interaction is stored as a tuple containing the input that the chat bot received and the output that the chat bot responded with.  Hi @navyad, I'm not sure if there are any significant advantages by making the base Filter class abstract. I appreciate the suggestion but I'm going to close this ticket off for now. Feel free to message me if I missed something significant regarding this.\n  Thank you! Looks good :smile: \n  Hi @PengTedShen Yes, ChatterBot does automatically update it's knowledge database based on the user's input. This is how the program learns new responses to statements that it can use to communicate with.\n\nAlso, I am sure that there are numerous other algorithms out there that could be used to select possible responses. For example, in the past I have looked into adding logic adapters that use markov-chains (https://en.wikipedia.org/wiki/Markov_chain) to generate new candidate responses.\n @PengTedShen I am not aware of a generic library for markov chains.\n  Hi, could you tell me what version of NLTK you have installed? I'm testing with version 3.2.1 and I'm not seeing this error.\nYou can check the version you have by running:\n\n```\npython -c \"import nltk; print nltk.__version__\"\n```\n Lets try making sure you have all of the latest dependencies for NLTK installed.\n\nFirst, uninstall `nltk` by running `pip uninstall nltk`.\nNext, install nltk with the latest dependencies by running `pip install nltk --upgrade`.\n\nSometimes installing python packages using `setup.py` can have some issues. Using `pip` is usually a safe bet that the package and all of it's dependencies will be installed properly.\n\nLet me know if this works for you.\n Hi @adryr83, Michele Simionato is correct. Warnings in python are just warnings, not errors. Regarding your error, I'm not entirely sure I understand what you mean when you say that it _compares only Deprecated Warning_. It sounds like you are saying that an exception is being compared against something else (which is entirely possible).\n\nPerhaps you could describe the issue you are encountering a bit more and post a snippet of the code your have written so that I can help.\n I'm going to close this as I believe it is a non-issue. Feel free to re-open the ticket if I've missed something.\n  Hi @davizucon, sorry about the delay in reviewing this. I was able to confirm the issue, but I'm going to have to make a small change to the pull request so that it doesn't break Python 3 compatibility.\n\nPython 3 has an improved way of dealing with strings which eliminates issues with unicode characters, however it breaks backwards compatibility with the string decode method.\n\nPython 3:\n\n``` python\n'\u00e9'.decode('utf-8')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'str' object has no attribute 'decode'\n```\n\nPython 2.7:\n\n``` python\n'\u00e9'.decode('utf-8')\n\n>>> u'\\xe9'\n```\n This has been closed by https://github.com/gunthercox/ChatterBot/commit/35760762280d082f777545dc11ca2be0355ecfaf\n  Looks great! :+1: \n  Hi @sumn2u, there are a few issues I can see right off the bat. I think I can help you solve the issue you are encountering.\n\n---\n\nFirst, it appears that your logic adapter is inheriting from the `Adapter` class when it should be inheriting from the `LogicAdapter class. To fix this, you can just change your imports from:\n\n``` python\nfrom chatterbot.adapters import Adapter\n...\nclass LogicAdapter(Adapter):\n```\n\nto:\n\n``` python\nfrom chatterbot.adapters.logic import LogicAdapter\n\nclass LogicAdapter(LogicAdapter):\n```\n\n(Another example of the imports can be seen in the [documentation](http://chatterbot.readthedocs.io/en/latest/adapters/logic.html#creating-a-new-logic-adapter) on logic adapters.)\n\n---\n\nYou can remove the `can_process` from your adapter if you don't pan to implement any logic for it. This method returns true by default and now that we are inheriting from `LogicAdapter` the method will be inherited from the parent class. \n\nFor the same reason as described above, you can also remove the `EmptyDatasetException` subclass from your new logic adapter unless you specifically plan to override it.\n\n---\n\nThe other thing I noticed is that there is an edge case that may cause problems when you are iterating over your statement list. I believe the return statement needs to be tabbed back one indentation level. As it is currently written, it will return the first `confidence` and `closest_match` value that it comes across on the first iteration of the for loop. Another issue caused by this is that if `statement_list` is empty, **nothing** will be returned from this method because the return statement is never hit (I believe this is the cause of the exception you were getting).\n\nSo change:\n\n``` python\n            for statement in statement_list:\n                ...\n                return confidence, closest_match\n```\n\nto:\n\n``` python\n            for statement in statement_list:\n                ...\n            return confidence, closest_match\n```\n\n---\n\nThose are the only immediate issues I can see. I did not get a chance to test the piece of code you submitted but I believe you should be in a better place now. Bellow you will find a the full snippet with all the changes I've suggested already made.\n\n``` python\n# Imports\nimport nltk.corpus\nimport nltk.tokenize.punkt\nimport nltk.stem.snowball\nfrom nltk.corpus import wordnet\nimport string\nfrom chatterbot.adapters.logic import LogicAdapter\n\nclass LogicAdapter(LogicAdapter):\n    \"\"\"\n    This is an abstract class that represents the interface\n    that all logic adapters should implement.\n    \"\"\"\n\n    def process(self, statement):\n        # Get default English stopwords and extend with punctuation\n        stopwords = nltk.corpus.stopwords.words('english')\n        stopwords.extend(string.punctuation)\n        stopwords.append('')\n\n    def get_wordnet_pos(pos_tag):\n        if pos_tag[1].startswith('J'):\n            return (pos_tag[0], wordnet.ADJ)\n        elif pos_tag[1].startswith('V'):\n            return (pos_tag[0], wordnet.VERB)\n        elif pos_tag[1].startswith('N'):\n            return (pos_tag[0], wordnet.NOUN)\n        elif pos_tag[1].startswith('R'):\n            return (pos_tag[0], wordnet.ADV)\n        else:\n            return (pos_tag[0], wordnet.NOUN)\n\n    # Create tokenizer and stemmer\n    # tokenizer = nltk.tokenize.word_tokenize()\n    lemmatizer = nltk.stem.wordnet.WordNetLemmatizer()\n\n    def is_ci_lemma_stopword_set_match(a, b, threshold=0.5):\n        \"\"\"Check if a and b are matches.\"\"\"\n        pos_a = map(get_wordnet_pos, nltk.pos_tag(tokenizer.nltk.tokenize.word_tokenize(a)))\n        pos_b = map(get_wordnet_pos, nltk.pos_tag(tokenizer.nltk.tokenize.word_tokenize(b)))\n        lemmae_a = [lemmatizer.lemmatize(token.lower().strip(string.punctuation), pos) for token, pos in pos_a \\\n                        if pos == wordnet.NOUN and token.lower().strip(string.punctuation) not in stopwords]\n        lemmae_b = [lemmatizer.lemmatize(token.lower().strip(string.punctuation), pos) for token, pos in pos_b \\\n                        if pos == wordnet.NOUN and token.lower().strip(string.punctuation) not in stopwords]\n\n        # Calculate Jaccard similarity\n        ratio = len(set(lemmae_a).intersection(lemmae_b)) / float(len(set(lemmae_a).union(lemmae_b)))\n        return (ratio >= threshold)\n\n    def get(self, input_statement):\n        \"\"\"\n        Takes a statement string and a list of statement strings.\n        Returns the approximate matching statement from the list.\n        \"\"\"\n        statement_list = self.context.storage.get_response_statements()\n        print(statement_list)\n        if not statement_list:\n            if self.has_storage_context:\n                # Use a randomly picked statement\n                self.logger.info(\n                    u'No statements have known responses. ' +\n                    u'Choosing a random response to return.'\n                    )\n                return 0, self.context.storage.get_random()\n            else:\n                raise self.EmptyDatasetException()\n\n        confidence = -1\n        closest_match = input_statement\n        # Find the closest matching known statement\n        for statement in statement_list:\n            print(\"statement\", statement.text);\n            # ratio = fuzz.ratio(input_statement.text, statement.text)\n            ratio = is_ci_lemma_stopword_set_match(input_statement.text, statement.text)\n            if ratio > confidence:\n                confidence = ratio\n                closest_match = statement\n                # Convert the confidence integer to a percent\n            confidence /= 100.0\n        return confidence, closest_match\n```\n @sumn2u Has the issue you encountered been fixed? Let me know if there is anything else I can clarify or help with.\n  Thank you :+1: Looks good.\n  I believe this issue has been fully resolved now. Feel fee to reopen it if I missed something.\n  Just a note on this, newer versions of ChatterBot include more verbose error handling for MongoDB and part of message for this error now also states `distinct too big, 16mb cap`.  Hi @gsingers, this currently isn't possible to do but I like the idea. Currently, the learning done by ChatterBot is done in the `get_response` method of the main `ChatBot` class. The \"learning\" is done by updating the database with the user's response to the chat bot's output.\n\nI think it might be an excellent idea to separate the learning code from the response generation code. After making this change, an additional value could be returned from the logic adapter responsible for retrieving input from Slack.\n @gsingers The slack adapters sound like a great addition. If you're interested in making a pull request I'd be happy to accept it.\n @gsingers Check out the two training modules (`ListTrainer`, `ChatterBotCorpusTrainer`) in [trainers.py](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py)\n @gsingers I've made changes that break up the response generation and response learning parts of the `get_response` method. #365 adds a new example file that demonstrates this. Feel free to provide feedback if you have any.\n  Thank you!\n  @davizucon is correct. There is not currently an adapter for OrientDB but this looks like something that would be awesome to add.\n @davizucon I think having a Slack channel sounds like a good idea. I've added one for the project at https://chatterbot.slack.com\n @davizucon I just realized Slack doesn't have support for letting anyone join (each new member has to be explicitly invited). I think Gitter might end up being a better solution because of this.\n\nhttps://gitter.im/chatter_bot/Lobby\n  Hi @davizucon This definitely corrects the issue, however it appears that a few unit tests are now failing after these changes h(ttps://travis-ci.org/gunthercox/ChatterBot/builds/155098760). Unfortunately I cannot merge in the changes if tests are not passing.\n  Hi @davizucon, I can't confirm what this fixes. Could you provide me with the steps needed to replicate the issue so I can test this?\n  This issue was fixed in https://github.com/gunthercox/ChatterBot/pull/268/files, closing this ticket off.\n Hi @slin17, there is on Gitter: https://gitter.im/chatter_bot/Lobby\n  Thank you!\n  Hi @chamkank, I would be happy to add the link.\n  Thank you, I believe this has been recently corrected and will be fixed in the next release of ChatterBot. The commit https://github.com/gunthercox/ChatterBot/commit/1ed1afad690ee5c4e10d81f285dcb5ddb2a4bad1 appears to contain the fix.\n\nI'm going to close this issue. Feel free to reopen it if that was not a fix for the error you were refering to.\n  Hi @navyad Thank you for adding this. The reason I hadn't documented the twitter storage adapter was because I wanted to avoid people using the possibly malfunctioning adapter. Before I merge it I will need to check out issue #142 to make sure it is resolved.\n Thank you, I believe this should be all set. merging...\n  :+1: Thanks!\n  In the base class for the matching adapters, if no possible responses to the input are known then a random response is chosen from the database.\n- [x] This needs to be changes so that if a random response is selected, a confidence value of zero is returned.\n- [x] Create unit test\n  SQLite will provide better performance than the `JsonFileAdapter` while still allowing for an easy setup (MongoDB and other databases require additional packages to be installed).\n @navyad Thank you! I don't believe that anyone is working on this.\n @davizucon I'd be happy to bring in the SQLite adapter for an alpha release. I have been getting a number of complaints about the performance of the JSON file adapter lately and I think I'm going to make plans to remove it completely (eventually) in favor of the SQLite adapter once it is stable. Hi @addelll, you can use this storage adapter the same way that the others are used.\r\n\r\nFor example,\r\n\r\n```python\r\nchatbot = ChatBot(\r\n    \"My ChatterBot\",\r\n    storage_adapter=\"chatterbot.storage.SQLAlchemyDatabaseAdapter\"\r\n)\r\n```\r\n\r\nIs this what you are looking for as an example?  Hi @vince06fr, it appears that there was an empty file in the french training corpus that was causing this issue. It looks like an empty file is invalid JSON :trophy: I have removed the file and the issue appears to be fixed. https://github.com/gunthercox/ChatterBot/commit/db2f758bc0d7d1632e5f9dfaab2b48721518af88\n  Unfortunately the `BulkWriteError` does not give me enough information to debug this issue. Could you tell me what the content of your `conversacao` variable was?\n I'm closing this ticket off as it hasn't been reported in quite some time and I'm fairly certain it was resolved.  Thank you\n  Is there any specific data that you are training your bot with when this occurs?\n Hi @PengTedShen, I created a test case to try to replicate the issue you reported. I have not been able to recreate the issue. Based on my tests, if a user enters `\u65e9\u4e0a\u597d`, then `'\u60a8\u597d'` is correctly returned as a response.\n\nI'm going to close this ticket for now, please reopen it if I missed something or misinterpreted your question.\n\nHere is the test case that I created to try to very the problem:\n\n``` python\n# -*- coding: utf-8 -*-\nfrom .base_case import ChatBotTestCase\nfrom chatterbot.trainers import ListTrainer\n\n\nclass ChatterBotQATests(ChatBotTestCase):\n\n    def setUp(self):\n        \"\"\"\n        Create a chat bot with our test data.\n        \"\"\"\n        super(ChatterBotQATests, self).setUp()\n\n        self.chatbot.set_trainer(ListTrainer)\n        hospital_qa = [\n            [\n                u'\u65e9\u4e0a\u597d',\n                u'\u60a8\u597d'\n            ],\n            [    \n                u'\u6211\u6709\u4e9b\u5934\u75bc.',\n                u'\u9664\u4e86\u5934\u75bc\u5916,\u8fd8\u6709\u522b\u7684\u4ec0\u4e48\u75c7\u72b6\u5417?'\n            ],\n            [    \n                u'\u54e6,\u5bf9\u4e86,\u6211\u9f3b\u5b50\u4e0d\u900f\u6c14.',\n                u'\u6709\u6ca1\u6709\u53d1\u70ed?'\n            ],\n            [    \n                u'\u4eca\u5929\u65e9\u4e0a\u81ea\u5df1\u91cf\u4e86\u4e00\u4e0b\u8fbe\u5230\u4e8638\u5ea66,\u70e7\u5f97\u6211\u5168\u8eab\u75bc\u75db.',\n                u'\u4f60\u8fd9\u79cd\u75c7\u72b6\u591a\u957f\u65f6\u95f4\u4e86?'\n            ],\n            [    \n                u'\u5927\u6982\u6709\u4e24\u5468\u4e86.',\n                u'\u4f60\u5bf9\u4ec0\u4e48\u836f\u7269\u8fc7\u654f\u5417?'\n            ],\n            [    \n                u'\u6ca1\u6709,\u6ca1\u4ec0\u4e48\u8fc7\u654f\u7684.',\n                u'\u4ece\u4f60\u8bf4\u7684\u75c7\u72b6\u770b\u5c31\u662f\u611f\u5192\u5f15\u8d77\u7684\u4f4e\u70e7,\u7ed9\u4f60\u5148\u5f00\u4e09\u5929\u7684\u611f\u5192\u836f\u548c\u6d88\u708e\u836f.'\n            ],    \n            [\n                u'\u8c22\u8c22\u533b\u751f',\n                u'\u795d\u4f60\u65e9\u65e5\u5eb7\u590d'\n            ]    \n        ]\n\n        for qa in hospital_qa:\n            self.chatbot.train(qa)\n\n    def test_for_correct_response(self):\n        response1 = self.chatbot.get_response(u'\u65e9\u4e0a\u597d')\n        response2 = self.chatbot.get_response(u'\u6211\u6709\u4e9b\u5934\u75bc')\n        response3 = self.chatbot.get_response(u'\u54e6,\u5bf9\u4e86,\u6211\u9f3b\u5b50\u4e0d\u900f\u6c14.')\n        response4 = self.chatbot.get_response(u'\u4eca\u5929\u65e9\u4e0a\u81ea\u5df1\u91cf\u4e86\u4e00\u4e0b\u8fbe\u5230\u4e8638\u5ea66,\u70e7\u5f97\u6211\u5168\u8eab\u75bc\u75db.')\n        response5 = self.chatbot.get_response(u'\u5927\u6982\u6709\u4e24\u5468\u4e86.')\n        response6 = self.chatbot.get_response(u'\u6ca1\u6709,\u6ca1\u4ec0\u4e48\u8fc7\u654f\u7684.')\n        response7 = self.chatbot.get_response(u'\u8c22\u8c22\u533b\u751f')\n\n        self.assertEqual(response1, u'\u60a8\u597d')\n        self.assertEqual(response2, u'\u9664\u4e86\u5934\u75bc\u5916,\u8fd8\u6709\u522b\u7684\u4ec0\u4e48\u75c7\u72b6\u5417?')\n        self.assertEqual(response3, u'\u6709\u6ca1\u6709\u53d1\u70ed?')\n        self.assertEqual(response4, u'\u4f60\u8fd9\u79cd\u75c7\u72b6\u591a\u957f\u65f6\u95f4\u4e86?')\n        self.assertEqual(response5, u'\u4f60\u5bf9\u4ec0\u4e48\u836f\u7269\u8fc7\u654f\u5417?')\n        self.assertEqual(response6, u'\u4ece\u4f60\u8bf4\u7684\u75c7\u72b6\u770b\u5c31\u662f\u611f\u5192\u5f15\u8d77\u7684\u4f4e\u70e7,\u7ed9\u4f60\u5148\u5f00\u4e09\u5929\u7684\u611f\u5192\u836f\u548c\u6d88\u708e\u836f.')\n        self.assertEqual(response7, u'\u795d\u4f60\u65e9\u65e5\u5eb7\u590d')\n```\n  Hi @PengTedShen, for your question:\n1. It is possible that 10 is not the most optimal value for that code example. Feel free to adjust it as needed.\n2. The method call to `self.context.storage.update(closest_match)` will return the updated statement that is passed in to the method. Although, it's meta data may change, the statement text will be the same. I would advocate keeping the random response fallback for now rather than just returning the input as a closest match, but I'm open to other suggestion.\n3. Note that the chat bot also continues to learn as you talk to it, so it may be learning additional response options from your input. If this functionality is not desired then it is possible to but the database into read-only mode by specifying `read_only=True` when initializing the chat bot.\n  Hi, I will have to look into this issue a bit more. In the mean time, could you tell me what version of Python you are using?\nI'm aware that Python 2.7 can sometimes have issues handling unicode text.\n Hi @Nixellion @asperduti, the latest release of ChatterBot now includes much more verbose logging that can be enabled to help debug issues like these. You can enable the logging by setting Python's logging level to info:\n\n``` python\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n\nChatBot(\n    # ...\n)\n```\n\nThis should allow you to actually see what is happening inside ChatterBot and it will also tell you exactly why a particular response was returned.\n\nIf anything strange shows up in the logs, please open an issue about it or post the log output in a comment somewhere.\n\nLogging documentation: http://chatterbot.readthedocs.io/en/latest/chatterbot.html#logger\n You can actually specify this when you construct your chat bot:\n\n``` python\nchatbot = ChatBot(\n    # ...\n   tie_breaking_method=\"random_response\"\n)\n```\n\nThe documentation on these methods was _very_ recently added: http://chatterbot.readthedocs.io/en/latest/adapters/tie_breaking_method_mixins.html\n Note, that there are currently plans to improve the selection process. Specifically, https://github.com/gunthercox/ChatterBot/issues/276 will add functionality so that the the response is selected based on the context of the current conversation. This will help make these responses much more relevant.\n @neatville Setting the `response_selection_method` is correct.  It looks like there is an issue with the example. The `VariableInputTypeAdapter` expects an input value which is why it is erroring out when give a `None` value. Want to swap out the input and output adapters you are using with the following:\n\n``` python\ninput_adapter=\"chatterbot.adapters.input.TerminalAdapter\",\noutput_adapter=\"chatterbot.adapters.output.TerminalAdapter\",\n```\n Correct, you would want to create an adapter for handling that.\n  Yes, that would likely be an excellent source of training data.\n  Hi, @futetest. The [ClosestMeaningAdapter](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/closest_meaning.py) compares all the words.\n\n![image](https://cloud.githubusercontent.com/assets/2030578/17620135/2ce1b046-6058-11e6-809b-31c6f89933fa.png)\n\nTo explain a bit further, it selects the highest value combination of matching tokenized versions of the words in each pair being compared. To do this, it first creates a list of the tokenized words for both statements being compared using NLTK's `get_tokens` function. It then produces what is essentially a matrix of each possible combination of the ordering of the tokens in both lists using Pythons built in `itertools.product` function.\n\n**Note, that the reason that the order of the words is ignored is because the goal of this adapter is to compare the meaning of each word, so order was deemed an invalid heuristic.**\n\nThe adapter selects and returns the statement with the highest matching token list comparison to the input statements.\n  Hi, @Matgek your logic seems valid.. I will set up some test cases to try to benchmark any changes in performance by reversing how the statements are stored.\n  Thank you :+1: \n  @kevin-brown is correct.\n\nIf you're goal is to remove the warning, your options are:\n1. Install the python-Levenshtein package with pip.\n2. Silence `UserWarning` level warnings when running your code.\n  Hi @alekaizer, this looks great. Could you possibly remove the merge commit that is showing up in this pull request? Once that is fixed I'd be happy to pull it in.\n  Hi @z4nD4R, I cannot replicate your issue with the code you posted. I'm going to close this issue off for now, but feel free to reopen it if you continue to run into the problem.\n  Thank you, looks good!\n  Thank you!\n  Looks good :+1: \n  Hi @Nykho, I've been able to confirm this issue on my end. I will attempt to issue a patch as soon as I can.\n Just a quick note for anyone else running into this issue. This issue is fixed in Python 3. Although this project aims to fully support multiple versions of Python, if you are using Python 2.7 and you can upgrade that may be the best course of action.\n  I'm aware that there are a few user-created ones floating around out there\nfor non-english languages. If you or anyone else is interested in\ncontributing a larger selection of corpus data to the project the addition\nwould be greatly welcomed.\n  Thanks!\n  Thank you!\n  ChatterBot is designed to be language independent so bots can be created that can communicate using any language. You can either train your chat bot using pre-recorded data, or it can learn to speak as you communicate with it.\n  Obrigado :+1: \n  It sounds like you need to include the file name in the path as well. For example, if your adapter class `MyLogicAdapter` is in a file named `my_logic_adapter.py` then you would want the string passed to the chat bot's list of adapters to look like `\"my_logic_adapter.MyLogicAdapter\"`. This string is essentially just an python import path. The class gets split off the end of the string and imported.\n  This variable is an object passed to each type of adapter. It allows each adapter to access other adapters. There are cases where it may be beneficial for logic adapters to have direct access to the storage adapter for example.\n I've added updated documentation to cover this. http://chatterbot.readthedocs.io/en/latest/adapters/index.html#context\n\nFeel free to reopen this ticket or submit a pull request if more information is needed.\n  @LucasZielke That is partially correct, part of the process of selecting a response is trying to find the closest possible match to the input, but there is also another step that involves choosing a response from the selection of closest matching known inputs.\n Hi everyone. Here is a solution that may work for you. All you need to do is create a file containing the following logic adapter and add it to your chat bot setup. You will likely need to customize the output based on your needs, but I think this should be a pretty good basis for everyone to work from.\n\n``` python\n# -*- coding: utf-8 -*-\nfrom chatterbot.adapters.logic.base_match import BaseMatchAdapter\nfrom chatterbot.conversation import Statement\nfrom fuzzywuzzy import fuzz\n\n\nclass TheIDontKnowAdapter(BaseMatchAdapter):\n    \"\"\"\n    This adapter checks if a closely matching response is known.\n    \"\"\"\n\n    def get(self, input_statement):\n        \"\"\"\n        Takes a statement string and a list of statement strings.\n        Returns the closest matching statement from the list.\n        \"\"\"\n        statement_list = self.context.storage.get_response_statements()\n\n        default_response = Statement(\"I don't understand.\")\n\n        # Return the default response if there is no data in the database\n        if not statement_list:\n                return 1, default_response\n\n        confidence = -1\n        closest_match = input_statement\n\n        # Find the closest matching known statement\n        for statement in statement_list:\n            ratio = fuzz.ratio(input_statement.text, statement.text)\n\n            if ratio > confidence:\n                confidence = ratio\n                closest_match = statement\n\n        # Return the default response if a close match cannot be found\n        if confidence < 10:\n            return 1, default_response\n\n        return 0, closest_match\n```\n  ChatterBot represents the knowledge it has learned internally as a graph data structure with connections between each statement and it's known responses. The program then uses a logic adapter to apply the response selection algorithm. ChatterBot has a few different selection algorithms built in. One uses NLTK for matching the closeness of word synonyms, another uses Levenshtein distance.\n  There is not currently a way to set a default response. Having a default response prevents the chat bot from learning new responses (even when it responds incorrectly). It is not likely that this is something that will be added in the future.\n If no responses are known, there is an internal logic adapter that returns the input statement: https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/no_knowledge_adapter.py\n  This sounds like an issue that may have been fixed in a recent release of ChatterBot, can you confirm what version you are using?\n Hi, I can't seem to replicate this issue. Can you post some more information to help me debug this:\n1. The parameters you are passing to the `ChatBot()` constructor.\n2. The version of python you are using.\n Alright, thank you. I will see if I can track down where this is happening.\n @NotSoSuper Not sure if this is part of the issue, but I believe you may needs to specify `output_format='text'` instead of `format='text'` in your code. It appears this was incorrect in the documentation.\n Sorry about the long wait on this. I believe I have finally tracked down the source of the issue. It appears that in some cases, statement objects were being added to the response list of other statements. While this should have been Ok in theory since both objects share a similar API, it actually caused a problem during deserialization because some of the attributes remained in dictionary form. #224 should correct this issue.\n @NotSoSuper I haven't created a new release on PyPy with the changes I made yet. Did you upgrade with pip or from the code on GitHub?\n\nAlso, its good that you are reporting the issue. It all helps to improve ChatterBot for everyone who uses it.\n You could specify a different database name and your old data would be safe while you test your theory.\n @NotSoSuper Any success?\n Awesome, glad to hear!\n  Hi @SirIvanMoReau, this looks great, thank you!\n  Have you tried the MongoDB storage adapter? http://chatterbot.readthedocs.io/en/latest/adapters/storage.html#mongo-database-adapter\n  One way to do this could be to create your own training corpus. Check out the existing ones that come with ChatterBot for an example: https://github.com/gunthercox/ChatterBot/tree/master/chatterbot/corpus/data/english\n\nYou may also want to see the documentation on training from corpus data if you haven't yet: http://chatterbot.readthedocs.io/en/latest/training.html#training-with-corpus-data\n  This sounds possible. You may be able to implement a custom storage adapter that connects to HDFS and a custom logic adapter that uses Spark. ChatterBot's documentation covers these and there is also various existing adapters that can be used as examples in this repository.\n  Hi @nvartolomei, This looks like a case where a statement is being saved as a response somewhere in the code base. It won't cause any problems but I will take a look through and see if I can determine where this is occurring. Could you let me know what adapters you are using for your chat bot?\n I believe this issue has been resolved by https://github.com/gunthercox/ChatterBot/pull/224\nFeel free to reopen if it continues.\n  You may be able to use the [`extra_data`](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/conversation/statement.py#L32) attribute on statements to store this information in your database. This method is currently undocumented because it is not being directly used anywhere in the code base. Essentially it just allows extra information to be stored in the database attached to a statement.\n\nAlthough ChatterBot currently does not support tracking conversations it has with different people, I originally added the extra-data feature to do something very similar to what it sounds like you want to achieve.\n\nYour best bet might be to create a custom logic adapter to handle this meta-information.\n\nAlso note that #38 covers a bit of this as well with the proposal for a `persona` object to represent the users that the chat bot interacts with.\n  This sounds like a bug somewhere in the logic adapter.\n Hi, I cannot seem to replicate this issue. I have added a test case to verify that the adapter is handling punctuation correctly. Please feel free to reopen this ticket it the problem continues.\n\n``` python\n    def test_different_punctuation(self):\n        possible_choices = [\n            Statement('Who are you?'),\n            Statement('Are you good?'),\n            Statement('You are good')\n        ]\n        self.adapter.context.storage.get_response_statements = MagicMock(\n            return_value=possible_choices\n        )\n\n        statement = Statement('Are you good')\n        confidence, match = self.adapter.get(statement)\n\n        self.assertEqual('Are you good?', match)\n```\n  Looks good :+1: Thank you!\n  Hi @dcsan \n\nJust to clarify further, if you wish to limit the scope of the training data to just the English conversations you can do so by passing the following value to your chat bot's train method.\n\n``` python\nmy_chat_bot.train(\"chatterbot.corpus.english.conversations\")\n```\n\nLikewise, the following would train the bot off of every data set in the English corpus.\n\n``` python\nmy_chat_bot.train(\"chatterbot.corpus.english\")\n```\n\nHope this helps.\n @kevin-brown Corrected spelling https://github.com/gunthercox/ChatterBot/commit/db06771539b4a09dc5cca2ee92145bd8d973e63e\n  Hi @digitaldesaster, this looks like a good improvement. Would you be interested in creating a pull request?\n  Hi @futetest \n\nThe primary feature of the conversation representations in ChatterBot's databases is the ability for the known responses to a given statement to be tracked.\n\nEach statement object in the database represents something that someone has said to the chat bot. On top of that, each statement in the database also holds a reference to each other statement that it has been issued in response to.\n\nSo for example, the statement \"Thank you very much!\" could be in response to any number of the following statements: \"Have a good day madam.\", \"Here is the cake you ordered.\", and \"Wow, I like your motorcycle!\".\n\nDoes this explanation help? If not please let me know so I can clarify.\n  If you specify a different database endpoint for each bot, this should provide the functionality you desire. http://chatterbot.readthedocs.io/en/latest/adapters/storage.html#database\n  Looks great, thank you!\n  Hi, could you possibly link to the page where this is unclear? I am currently looking at the [docs](http://chatterbot.readthedocs.io/en/latest/training.html) and all the examples appear to have this included.\n\n![image](https://cloud.githubusercontent.com/assets/2030578/15558512/89c6d928-22a8-11e6-8337-b6d8973b66b8.png)\n\n![image](https://cloud.githubusercontent.com/assets/2030578/15558528/97f6d660-22a8-11e6-8943-58751599e6cd.png)\n\n---\n\nI will attempt to go through and make things a bit more clear. Please let me know if there is anything else I can clarify.\n I have updated a few outdated code examples in the readme and wiki pages. I believe everything should be up to date now. Feel free to reopen this ticket if there are any other issues.\n  The read the docs link appears to be working. The wiki page is currently in the process of being phased out as all of the updated documentation is being written for read the docs.\n Can you confirm that the link is still broken for you? Or was this possibly a network hickup?\n  Signature objects were originally added to the conversation module to support additional relationships between statements and other data (such as who the said the statement). The current road map for the future of ChatterBot suggests the possibility that the Signature object will not be needed because this data can likely be better represented as additional dynamic attributes on the statement objects themselves (which is already fully supported and being used by various adapters).\n  I actually had the python syntax highlighting in there a while back. The issue is that it is valid markdown syntax on GitHub, but it is not a part of the markdown specification. I use pandoc in the projects `setup.py` file to convert markdown to restructured text format when I deploy to pypi. Unfortunately if I include the GitHub style syntax highlighting the page fails to render properly in pypi (https://pypi.python.org/pypi/ChatterBot).\n  :rocket:\n  Commit https://github.com/gunthercox/ChatterBot/commit/e5a986968a0844549283d14ae77d60a98d2987a1 makes one small change to start to address this by reducing the number of read and write transactions that are made to the database. I will continue to post updates on this ticket to track performance improvement changes.\n Pull request https://github.com/gunthercox/ChatterBot/pull/173 allows the storage adapter to override an expensive method to provide a more efficient implementation. The `get_response_statements` method has been overridden on the MongoDB storage adapter to provide a much more efficient version that should yield a significant improvement in performance.\n @Nixellion I'm glad you are getting better results with the Mongo DB adapter. The JSON file adapter is really just meant for testing and development because it is limited by the fact that it has to write to the hard disk each time it needs to save.\n\nSill looking into the bulk insert error, and I've opened a ticket for tracking the addition of a new SQLite storage adapter #241.\n Parallel training is only supported if the database being used supports concurrent writes. The default file database that ChatterBot uses does not support concurrent writes, but if you use mongo db it will.\n You will probably need to do a bit of work to get the import process ready to bring in 2GB of data in parallel. I would recommend breaking it up, if possible, into a few files of manageable size. You will then have to use python's multiprocessing capabilities to start training processes on each subset of the data file. This functionality isn't built into ChatterBot at the moment, if you are unsure on how to accomplish this, feel free to ask any questions. Otherwise, I have opened a ticket to get support for this functionality added to ChatterBot (https://github.com/gunthercox/ChatterBot/issues/354).\n  ChatterBot is written in Python. How are you using the Java implementation?\n  I currently haven't written a research paper for ChatterBot, although I would not be opposed to eventually writing one. You may have luck with finding research papers related to some of the project's dependencies:\n- [FuzzyWuzzy](https://github.com/seatgeek/fuzzywuzzy) - A Python implementation of the [Levenshtein Distance](https://en.wikipedia.org/wiki/Levenshtein_distance) algorithm\n- [Natural Language Toolkit](http://www.nltk.org/)\n\nAside from that I apologize if those links aren't exactly what you're looking for. Feel free to use anything from the project wiki (https://github.com/gunthercox/ChatterBot/wiki) if it is useful. Don't hesitate to let me know if there is specifically anything I can add that would improve the projects's descriptions or documentation.\n Hi @imumair, from NLTK, the classify machine learning algorithm is used in logic adapters such as the time logic adapter. NLTK is also used in the closest meaning adapter, but it is only used for calculating synonyms when traversing the knowledge graph. Another adapter (the closest match adapter) uses [Levenshtein distance](https://en.wikipedia.org/wiki/Levenshtein_distance) as an alternate method of knowledge graph traversal.\n  The practice of using imports within init files is rather common in python projects. I've never received a report about this issue before so I'm wondering if the issue have been caused by something else.\n\nJust to be clear, you mentioned that you installed the module using `setup.py`, I'm guessing this means you **did not** use pip to install the package (`pip install chatterbot`)?\n Ok, I've tested this locally and it looks good to me. Thank you for the pull request.\n  You can delete the database or you can remove what a bot has learned by calling: `mychatbot.storage.drop()`.\n\nFor example:\n\n``` python\nmychatbot = ChatBot(\"Example\")\nmychatbot.storage.drop()\n```\n After you delete the old database, ChatterBot should create a new one automatically the next time you run your program.\n I'm not sure what you mean by regenerate. If you're looking to populate the database with content you can use the `.train()` method as described in the [documentation](https://github.com/gunthercox/ChatterBot/wiki/Training).\n  This data file had a few invalid quote characters, I've corrected the issue and manually merged the changes.\n![image](https://cloud.githubusercontent.com/assets/2030578/15092891/f2f8515a-1444-11e6-90de-0e9ba3b6b295.png)\n  I like the idea of teaching ChatterBot polite ways to respond to various insults and curses. At the moment I'm hesitant to merge this because the bot can possibly respond from either the input or the response in some cases.\n  The import error (`LocationLogicAdapterchatterbot.adapters.logic`) suggests a possible issue in your code.\n\nPerhaps you meant `chatterbot.adapters.logic.LocationLogicAdapter`?\n  Based on the description of a dialog tree from @jeromeetienne's README, I believe this is something that ChatterBot is already doing (except for the GUI component).\n\n> A Dialog tree is used in game to code the conversation the player may have with bots (or non playable characterer).\n> \n> A dialog tree is in fact a graph, multiple answer may lead to the same questions. In this tree, what is a node ? A dialog node encodes one exchange in the dialog. 1. Bot can say something. 1. Player got multiple choises to pick 1. depending on player choise, we go to the next node 1. if there are no more children, the conversation is over.\n\nChatterBot stores all of the input statements it receives as a graph data structure with connections between a statement and it's possible responses.\n\nFor visualizations, another ticket was recently opened (#257) which proposes adding support for Orient DB as a storage backend. Orient DB looks like it has some cool features for generating visualizations of the graph http://orientdb.com/orientdb/\n\n---\n\nI'm going to close this ticket off as I believe it is all set. Please feel free to reopen it if I missed something.\n  :+1: \n  For large amounts of data there is a natural limit based on the amount of hard disk space and free memory that your system has. Using the MongoDB adapter is advised for large amounts of data (https://github.com/gunthercox/ChatterBot/wiki/Storage-adapters#mongo-database-adapter).\n  Your chat bot saves what it learns on your computer. It's knowledge is not erased when the computer is shut down. You should only need to train it once.\n You can remove what a bot has learned by calling: `mychatbot.storage.drop()`.\n\nFor example:\n\n``` python\nmychatbot = ChatBot(\"Example\")\nmychatbot.storage.drop()\n```\n  I agree with this. There is currently a `recent_statements` variable which I added so that this could eventually be accomplished. Currently the variable holds a list of the bot's responses for the current session. At some point I would love to make the change so that it avoids repeating the same words frequently.\n A new feature called _filters_ was recently introduced to ChatterBot. A filter called the `RepetitiveResponseFilter` has been added which eliminates recent responses from the set of possible replies that the chat bot can return. Currently, not all storage adapters support filtering but in the future they will.\n\nSee documentation http://chatterbot.readthedocs.io/en/stable/filters/index.html\n  Ok, glad you found what you were looking for. :+1: \n  This is a circular import error. You named your file `chatterbot.py`, then imported _from chatterbot_.\nTo fix this rename your `chatterbot.py` in `/root/taartbot/` to something else.\n  This is not currently supported, however I would be in favor of adding this as an import / export feature.\n The implementation of database exporting capabilities is currently waiting on my designs for AIML Integration (#137). Some of the features in the AIML specification currently do not agree with ChatterBot's design (such as wildcard statements). I need to create a common internal format for storing this information before database exports can be allowed.\n  I am aware of limitations with speed when saving statements. I'm not sure how much can be done to fix it considering the problem has to do with the amount of time it takes a computer to read and write to its hard disk.\n\nI would reccomend using the MongoDB database for significantly better performance.\nhttps://github.com/gunthercox/ChatterBot/wiki/Storage-adapters#mongo-database-adapter\n  Hi @vojcio, I'm still debugging this. I can replicate it, but I believe the problem has a few factors contributing to it. For example, if a bot is created with an empty database and no results are found through twitter's api, then the only response that the bot knows to give is the user's previous input. The issue is that something should always be returned by the twitter storage adapter but this is currently not happening. I will keep you posted on a solution.\n  Good idea. You might want to take a look at the [jsondatabase](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/storage/jsondatabase.py) adapter that comes included in this project. It uses a dictionary to do exactly what you described.\n\nThe adapter uses a package called jsondb which is also available here on GitHub: https://github.com/gunthercox/jsondb\n  This is a great idea. I would be more than happy to add direct support for this. I will need to look into the AIML spec a bit fist as it looks like they support a few things like wildcard input which ChatterBot currently does not support. Also, this is really cool because it looks like there is a lot of data already available in this format: http://www.alicebot.org/aiml/aaa/.\n @davizucon Looks promising, definitely something to look in to.\n I've was reminded about AIML recently and I just wanted to record a brief though about a possible direction for supporting it in ChatterBot.\r\n\r\n1. It would be easy to add a field to mark Statements that contain AIML.\r\n2. A filter would have to be created to control when AIML responses are used.\r\n3. I'm not certain about how the AIML statements should be evaluated, but I'm fairly sure a custom logic adapter would be need for this so that the AIML responses could be processed into statement text.  I am assuming the file `/media/solarpolarman/hdd/code/discord/markov/chatterbot.py` is one you created. I have no way of knowing what the contents of this file are, _but_ if you are importing something from the chatterbot module you installed with pip inside of another file named chatterbot.py this can cause some issues.\n\n**Solution:** Rename your chatterbot.py file to something else.\n\nPlease let me know if this works.\n @SolarPolarMan Any update on this? I'm closing this off, feel free to comment or reopen if you need more assistance.\n  Hi, could you try running the following and let me know if it fixes the issue for you?\n\n``` python\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nfrom chatterbot import ChatBot\nchatbot = ChatBot(\"BotItaliano\")\nchatbot.train(\"chatterbot.corpus.italian\")\nchatbot.get_response(u\"la vita \u00e8 vita\")\n```\n\nIn this case I've made two changes. I've added a unicode header to the main program, and I have added a unicode prefix to the input string containing the unicode characters.\n\n``` diff\n+ #!/usr/bin/env python\n+ # -*- coding: utf-8 -*-\n\nfrom chatterbot import ChatBot\n    chatbot = ChatBot(\"BotItaliano\")\n    chatbot.train(\"chatterbot.corpus.italian\")  \n    chatbot.get_response(\"la vita \u00e8 vita\")\n+    chatbot.get_response(u\"la vita \u00e8 vita\")\n```\n  :+1: Looks great! Thank you!\n  I just noticed that there is an extra parameter for in the `process_input` method of the JSON io adapter. A change needs to be made so that all io adapters meet the same interface specification.\n As a side note, I am also considering making the following changes:\n- Rename no output adapter to something that describes what it does, rather than what it does not do\n- Rename json adapter since it actual returns a dictionary, not a json object\n- Add an object adapter that returns the original statement object\n\nI'm just adding these as a comment for now since I am not yet sure on the scope of the pull request for these changes.\n The extra parameter issue described in the body of the ticket has been resolved by [https://github.com/gunthercox/ChatterBot/commit/15c1935b956edd85b2648d48583558cce077a1e9].\n\nLeaving this open for now until [my other comment](https://github.com/gunthercox/ChatterBot/issues/133#issuecomment-186848301) is resolved as well.\n  The updated representation should be a list of tuples:\n\n```\n[\n    (input_statement, output_statement),\n    (input_statement, output_statement),\n    (input_statement, output_statement),\n   ...\n]\n```\n\nThis change will be needed for upcoming additions of logic adapters that look at the context of the current conversation.\n  Looks good :+1: \n  I created the banner using GIMP, it appears that I no longer have the original `.xcf` file for the banner (which would have made editing it much easier), but the font in GIMP was called **Courier 10 Pitch**.\n Also, the only other github project I could find that has additional readme languages appears to just include them in the base directory of the project: https://github.com/tiimgreen/github-cheat-sheet/blob/master/README.md\n Looks great :+1: Thank you.\n Sorry, looks like I forgot to hit merge on this :smile: \n  Currently, no. You would have to manually remove it.\n\nThis seems like a reasonable problem. I will leave this ticket open until I have a chance to add a method to address it.\n @The-Penultimate-Defenestrator https://github.com/gunthercox/ChatterBot/pull/130 Adds a method for removing statements. It will be included in the next release.\n  I'm not sure I see why this change is needed. Isn't is possible to get the directory the database is in from the database path variable?\n\nAdditionally, a file path is an attribute that does not apply to every type of database. Mongo db is a good example of this.\n > That is true, but for a number of logic adapters additional files need to be created once they are used (dynamic training data is a great example).\n\nI actually don't know what adapters you are referring to here, I don't think chatterbot has any logic adapters that create additional files during runtime.\n I am going to veto this change for now. I am a strong supporter of only writing code that is necessary. Unused code can add unnecessary complications and decrease readability.\n  @DarkmatterVale Looks like this involves the speech adapter. Any thoughts on what might be causing it?\n I'm closing this off as I believe this has been resolved.\n  The `self.context` variable is typically the current instance of the `ChatBot` class or a subclass of `Adaptation`. What tests are you trying to write tests for that you are seeing these errors on?\n > An example of when this occurs is if I have \"self.context.io.process(...)\", it will throw an error because self.context is of NoneType.\n\nThis makes sense, since nothing has been assigned to `self.context` then it is None. By default, the context also doesn't have any adapters added to it so there is nothing to call the `process()` method on.\n\nYou have two options for setting up tests.\n1 Create a mock object and add the adapters you want to test with to it.\nYou may be able to do this by doing something like:\n\n``` python\ncontext = Adaptation()\ncontext.add_adapter(my_io_adapter)\ncontext.add_adapter(my_storage_adapter)\n...\nself.my_adapter = MyAdaper()\nself.my_adapter.add_context(context)\n```\n\n2 Test at a higher level.\nCreate a test ChatBot() instance and specify only your adapter as a parameter.\n  @DarkmatterVale I agree, perhaps it would be possible to package the developer assistant as it's own library. I had been thinking of creating something similar at one point, my idea was to create an agent that would automatically detect issues with code on github and leave a comment or create a pull request.\n  :ghost: Looks good... merging.\n  Not sure at the moment, looks like the issue is with numpy https://travis-ci.org/gunthercox/ChatterBot/jobs/105661593\n I cannot, it appears to work correctly for me as well (although I already have numpy installed).\n\nWhat was the reason for adding numpy to the requirements file? I don't actually see it being imported anywhere.\n I don't believe it's needed. I do see that it is included in NLTK's requirements, but they don't appear to be installing it on setup (https://github.com/nltk/nltk/blob/develop/pip-req.txt#L5). Their documentation does say that numpy **is** optional (http://www.nltk.org/install.html).\n Ah, interesting just found a note in the documentation for travis-ci (https://docs.travis-ci.com/user/ci-environment/#Preinstalled-pip-packages)\n\n> On all versions except pypy and pypy3 have numpy as well.\n\nSo the \"issue\" is occurring on travis's side. Travis normally has numpy preinstalled so that test builds can be created faster in the virtual environment. So far I have seen a lot of remarks that manually installing numpy and other scientific python packages significantly increases build time.\n\nIt should also be noted that there is currently known issues that will occur in a Windows environment when installing python modules with c extensions as requirements. This is the reason for instance that the `python-Levenshtein` package isn't required in this module.\n\nThere may be a way to include numpy in the .travis configuration file (similar to how it is done for mongodb: https://github.com/gunthercox/ChatterBot/blob/master/.travis.yml (Although I have not been able to find evidence of this in any of the documentation yet).\n\n---\n\nAlso, I just noticed the test case for the named entity taggger (https://github.com/gunthercox/ChatterBot/pull/120/files#diff-87010571bbeeee0b9a13279c493670f3R42). This looks like a good negative test case (the case that no named entities are found). It is important to include a positive test case as well to show the case of the named entity tagger succeeding.\n @DarkmatterVale I believe you can add numpy to the travis builds manually by manually installing it:\n\n``` diff\n install:\n+  - sudo apt-get install python-numpy\n   - pip install coveralls\n-  - pip install nltk\n   - pip install -r requirements.txt\n```\n\n(you can also remove the `pip install nltk` line as it is already included in the requirements.txt file.)\n Sorry, my mistake.\nThe package should have been apt-get install **python-numpy** without the sudo. I believe travis while lists it so it can be installed this way without sudo.\n The first line in `.travis.yml` is `sudo: false`, want to try removing that and adding back the _sudo_ to the apt-get install line?\n  This looks good :+1: \n  Internally documenting code as well as descriptive variable names are always a good idea.\n I believe this has been accomplished by #119.\n  This looks like a good addition. I don't have access to a mac to test this on, but I trust that it works.\n  It looks like there was a conflict after one of the other pull requests was merged. This will need to be rebased.\n This looks great :+1: \n\nWould you mind updating the documentation in the wiki? You can probably do something very similar to what we have for logic adapters already: https://github.com/gunthercox/ChatterBot/wiki/Logic-adapters#using-multiple-logic-adapters\n  I like the direction this is going in to break some of the code out into utils. What would your thoughts be on renaming these classes to be more generic? It is possible in the future that we may use something other than NLTK to accomplish these tasks.\n\nNLTKWordnet --> Wordnet\nNLTKStopWordsManager --> StopWordsManager\nNLTKPOSTagger --> POSTagger (or PartOfSpeechTagger to be more verbose)\n Awesome :+1: Looks good.\n  I'm not sure if classifiers would make sense as a subclass of Adapter since I don't believe they will be used the same was as each of the three adapter types. Perhaps just creating a Classifier base class with a namespace at `chatterbot.classifiers` would be a better direction to go in.\n\nStill... at this point, I am still not sure that I see the need for a separate set of classifier objects. It is important to consider the fact that many machine learning algorithms (such as Naive Bayes Classification) are relatively specific to the types of problems they can solve. And in many cases, it is better to have a machine learning algorithm that is optimized for a specific problem, rather than a generic algorithm designed to solve a range of problems.\n\nSome things to think about:\n1. What other classifiers are needed / would be useful?\n2. What is the [need](http://www.gettingagile.com/2006/09/25/need-driven-design-as-an-integration-strategy/) that is driving this addition?\n3. How do you define a classifier and what does it do? This is important for designing a good interface for the base class.\n4. Is there any existing code (aside from the time adapter) that contains logic that would work as a classifier?\n  This updates and adds tests to ensure that the confidence value returned by the closest match adapter fall within the range between 0 and 1.\n @DarkmatterVale I believe this corrects the issue observed in #111. Feel free to review and merge this pull request.\n This did correct the issue.\n  :+1: Changes look good.\n\nAlso, I'm currently looking into #111. Should have some sort of feedback shortly.\n  I believe the issue here is due to an overly aggressive confidence threshold on the closest match adapter.\n\nAs you mentioned, [line 11 in multi_adapter.py](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/multi_adapter.py#L11) appears to be ignoring output from evaluate_mathematically, even when it properly generates a response with a confidence of 1.\n\nLogging the output of each adapter being used, I noticed that the closest match adapter's confidence value is being returned as an integer percentage (above 1). Dividing by 100 appears to correct the issue by bringing it back down to a representation between 0 and 1.\n\nI am currently writing up tests and I will create a pull request shortly.\n Some general thoughts on adding a variable to determine if a given statement should be saved to the database when returned from a logic adapter:\n\nMy initial thought on this is that whatever is returned from a logic adapter should always be saved (I am open to alternate suggestions). My reasoning for this is that the response that a logic adapter returns is part of a conversation. In a conversation each statement and the order in which they occur is an important characteristic. Although there is nothing implemented at the moment that takes the context of the current conversation into account, it is my hope that there will be in the future. For each statement that exists in a bot's database, the most valuable statements are those in which the bot has learned which other statement(s) the given statement is in response to. This is because this data makes it possible to select a match to a user's input that is known to yield a response.\n\nSo if a user asks the bot a question, lets say something like \"What time is it?\", and the bot replies that \"The current time is 10:59pm\", we can only assume that whatever the user says next is a response to the bot's output. I would say that reasonably that would warrant maintaining the integrity of this data relationship by saving this data to the database.\n Hmm, that's strange. This might actually be an issue with the response selection algorithm. Technically that should only happen if there are very few possible responses in the database and it is choosing one at random, or if the use's input is very close to a question about the current time. I will write up a few test cases to see if I can consistently recreate this. It may be possible to refine the response selection process without blocking previous responses from being stored.\n I believe this should be safe to close.\n  It might be a good idea to weight the advantages of threading vs multiprocessing for this task. Most computers nowadays are built with multi-core processors.\n\nA multiprocessor implementation of this example would allow multi_adapter.py to run the processes for several adapters in parallel on separate processors. Of course the adapter would still need to wait for each adapter to finish processing, but running them in parallel would still accomplish this faster even if a few adapters were lagging behind the others.\n\nAlso, (I have to verify this) but I believe that threading would be restricted to a single core. I do think threading would be quite useful for tasks in _some_ adapters such as where a bit of background processing could provide an advantage. (For instance, an email IO adapter could use a thread to periodically check for new emails, if there were new ones it would add them to a queue for the next time it was called to retrieve data. This would remove the need to wait for a web request to return with the updated information every time the adapter is used.)\n  Looks great! :+1: \n\nThank you again for the contribution!\n  Thank you!\n\nIt looks like the test failures on this branch are unrelated.\n   @DarkmatterVale Logic adapters and plugin adapters both accomplish the same task (now). I think it would be beneficial to make a move to migrate the existing selection of plugin adapters to become logic adapters (this should not require a huge amount of modification). Apart from sharing a more unified code base, the other benefit is that there will be no restrictions to define what parts of the program are \"deeply integrated\" and what parts are not.\n  This looks great! Thank you.\n  - [x] Add new multi logic adapter that can hold multiple other logic adapters\n- [x] Change logic adapters to return confidence value\n\nFor #85\n Not yet. I still have changes to make before this gets merged.\n  Looks great! Thank you.\n  @sgoblin You can add a default for kwargs like this:\n\n``` python\nsomething = kwargs.get(\"some_key\", \"default_value\")\n```\n  Thank you, this is an awesome addition. I will review and merge this as soon as I can.\n This looks great! Thank you for contributing this!\n  Hi guys, sorry for the late response. If you are still looking to migrate from jsondb to mongo then I believe the following code snippet should help quite a bit.\n\n``` python\nfrom chatterbot.adapters.storage import MongoDatabaseAdapter\nfrom chatterbot.adapters.storage import JsonDatabaseAdapter\n\nmongo_adapter = MongoDatabaseAdapter(database=my_mongo_database_name)\njson_adapter = JsonDatabaseAdapter(database=my_json_database_name)\n\n# Loop through every statement that exists in the json database\nfor statement in json_adapter.filter():\n\n    # Add the statement to the mongo database\n    mongo_adapter.update(statement)\n```\n I will look into this. This may indicate an issue with the mongodb adapter.\n I believe I have tracked down the issue. Response objects on each statement were being returned as a dictionary instead of a normalized list of objects when the filter method was being called. https://github.com/gunthercox/ChatterBot/pull/96 should correct the problem. I will merge it as soon as tests pass.\n @The-Penultimate-Defenestrator I'm not seeing this error on my end, and the code appears correct.\n\nTo explain what is being done circa line 41:\n\n``` python\n                                            # The response list is a list of dictionaries in which each dict is a response\n        for response in response_list:      # For each response that the current statement is in response to\n            text = response[\"text\"]         # Save the text value of the response\n            del(response[\"text\"])           # remove the text key from the dictionary\n\n                                            # Append the normalized Response object to the Statement's response list\n            in_response_to.append(\n                Response(text, **response)\n            )\n```\n\nCan you post the stack trace you are getting?\n I apologize, I'm fairly certain I just figured out what the issue is. There was a schema change in the json database format the also got released in 0.3.2. (https://github.com/gunthercox/ChatterBot/pull/84). The change improves response object representations to make them more flexible, however it breaks backwards compatibility.\n Not sure if there is simple a solution now that the database has both types of data structures within it.\n Possibly. This script may help. This should remove any invalid response keys that were created by the new version, assuming it can load a statement. I recommend saving a backup first.\n\n``` python\nfrom chatterbot.conversation import Statement\nfrom chatterbot.adapters.storage import JsonDatabaseAdapter\n\nadapter = JsonDatabaseAdapter(.....)\n\n# Step 1: Remove invalid response data from statements (there should be very few of these)\nfor key in adapter._keys():\n    try:\n        statement = adapter.find(key)\n    except:\n        adapter.update(Statement(key))\n```\n From there, if you want to migrate the database to the new version, it might be best to attempt to export it as a corpus format. See https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/corpus/data/english/conversations.json\n\nThen it would be possible to import it into the new database schema and retain all of the existing structure.\n\nI don't have a script for this yet, but it would not be difficult to create.\n @The-Penultimate-Defenestrator Were you ever able to resolve your issue?\n Hi, @The-Penultimate-Defenestrator I am going to close this issue, please re-open if you need further assistance.\n  I'm going to vote against the proposed implementation of this one. Something like this would be better implemented as a logic adapter as ChatterBot moves towards a muti-adapter structure in the future. As a logic adapter the setup would need to check if the input value contained a time-centric question and then return the current time as a response statement.\n\nThe reason for this design choice is to ensure greater flexibility in the future by preferring analysis over regex. A logic adapter would be modular and easily maintained, while a training method such as the one proposed leaves the database in a state in which it will always require statements to be checked for this dynamic format.\n\n**The most ideal implementation** would be a logic adapter that internally trains itself based on a set of similar questions such as \"What time is it?\", \"Do you know the time?\", etc. As well as false values such as \"Do you have a dog?\", \"Is it time to go?\", etc. The adapter should then recognize when an input statement contains a valid question and return the current time accordingly. This would provide the greatest flexibility, likely accomplish language independence, and still accomplish the desired result as proposed initially.\n If you take a look at https://github.com/gunthercox/ChatterBot/issues/85, it covers the future changes to logic adapters that will make this possible. The key parts are rating confidence values and tie-breaking.\n @The-Penultimate-Defenestrator I am closing this off as #103 demonstrates the implementation of this feature as I described it. Feel free to checkout the code for these changes: https://github.com/gunthercox/ChatterBot/pull/103/files\n  Awesome point! Feel free to make a pull request, otherwise I will make sure to add it in a commit before the next release.\n\nThank you!\n  Currently there is some very similar code in https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/closest_meaning.py#L18\n\nI will check this out, wondering if it might be an NLTK version related issue.\n I am going to close this one off for now. I have not been able to replicate it.\n  Currently, logic adapters select a match based on a given algorithm and return that match. This pull request makes changes so that they will return the response instead of the match. The reason this is needed is because as ChatterBot continues to develop, it is likely that there will be logic adapters in the future that do not always follow this pattern, thus it would be better if the current selection of logic adapters completely encompassed all of the logic they require to produce a response.\n- [x] Reconfigure logic adapters to have access to storage adapters\n- [x] Move response selection logic inside of logic adapters\n- [x] Do something with those three response selection methods in the main class\n No problem.\n  These all sound great. I can't think of any additions at the moment, but I will make a comment if I do.\n @DarkmatterVale Not a problem, these next few weeks will likely be very busy for me as well. Good luck with your coding!\n I'm closing this off as some of these adapters go beyond the scope of chatbot communication. It would be great to see them created as third party python packages that could be imported by the main ChatterBot module.\n  Speech synthesis and recognition would be an awesome addition.\n Closing this ticket off as work on this component of chatterbot will be continuing at https://github.com/gunthercox/chatterbot-voice\n  This looks great :+1: \n  Thank you. Can't believe I missed this! :+1: \n  Thank you, I have removed the requirements for requests and requests-oauthlib because these are not actually used anywhere in the project anymore.\n\nI will be releasing version 0.3.1 later tonight because there was additional errors in the 0.3.0 release.\n Version 0.3.1 has been released to pypi.\n  This ticket introduces the road map for the next set of major changes to ChatterBot. Multiadapter support is the addition of the ability for ChatterBot instances to be configured with any number of each type of adapter.\n- [ ] Storage adapters\n- [x] Logic adapters\n- [x] Input/Output (IO) adapters\n# Storage Adapters\n\nMulti adapter support for storage adapters means that it will be possible for ChatterBot to be connected to multiple storage backends. The advantage that this will provide is the the ability for a ChatterBot instance to derive responses from multiple sources. In some cases these databases may be dynamically updated independently of the current ChatterBot instance. An example where this configuration would be useful is demonstrated in cases such as the [twitter storage adapter](https://github.com/gunthercox/ChatterBot/pull/54). A chat bot configured with a local database adapter and the twitter storage adapter would be able to join results from both sources to produce a response, increasing the diversity of the knowledge base.\n\nThe upgrade to a multi-storage adapter setup will require the following changes to be implemented:\n- It should be possible to individually set which databases are read-only.\n# Logic adapters\n\nSetting multiple logic adapters will make it possible to produce more advanced responses while keeping each logic algorithm modular.\n\nThe upgrade to a multi-logic adapter setup will require the following changes to be implemented:\n1. Logic adapters will need to have a method for determining the confidence that the result produced by each adapter is correct. This value should be a percentage represented by a value between 0 to 1. In the case of existing adapters such as `closest_match`, this value could be determined by the percentage that the closest matching statement matches the input statement. In other adapters, the resulting value could simply return a 1 or a 0 depending on if a specific input matching a given requirement is detected.\n2. It will be important to watch out for cases where one logic adapter's confidence algorithm has an incorrectly increased probability of resulting in a higher confidence than another algorithm's. This may be handled best by allowing for the manual specification of scaling factors.\n3. Tie breaking will be accomplished via an order of precedence determined by the order in which each logic adapter is listed. In the case of a tie in resulting confidence values, the adapter that was listed first will be given the highest priority and thus, it's result will be returned.\n# IO adapters\n\nMulti adapter support for IO adapters entails that a ChatterBot instance will be able to receive input from multiple sources. There are many cases where this would be useful. A simple example is a setup where a single bot is required to communicate with users through two different endpoints (such as google hangouts and an IRC channel (or multiple IRC channels)).\n @LucasZielke What brings you to that conclusion?\n - Just a note, although multi-logic adapter support has been added, it is not currently using the weighting based on adapter order as described in the initial ticket. Right now it will simply select the first, highest confidence result that it can generate.\n I had a chance to think about the implementation for multiple io adapters a bit more yesterday. When retrieving input from multiple sources, the response should be returned to the adapter that the input came  from. So for a hypothetical scenario with multiple io adapters:\n\n| Process input | Process response | Process response |\n| --- | --- | --- |\n| Input received from email adapter | --> | Return email |\n| Input from terminal) | --> | Reply in terminal |\n Closing this ticket off because the multi-adapter has been created for logic adapters. I am not planning on adding support for multiple databases because the amount of time it would take to query multiple large databases causes more problems than it fixes in the long run. I am also re-thinking having multiple IO adapters as it adds a lot of complexity without many advantages. For many cases it makes more sense to just create multiple bot instances when more than one input and output method is needed.\n  @DarkmatterVale This is awesome. I will go over this pull request and provide some thorough feedback as soon as possible.\n\nSo far I think I like the concept of the processor adapter. This might be a really good addition in the future for determining if logic adapters need to run in other multi-logic adapter scenarios.\n I'm checking this out locally using `examples/terminal_example.py`. It appears that when I enter a value that contains a mathematical expression, such as \"What is 5 + 5?\", no response is returned. This is strange since I can clearly see that tests are passing.\n In general, a good way to test out changes to python packages that are also imported in other local projects is just to install the package (with the changes you have made) locally.\n\nThis can be done using:\n\n```\npip install . --upgrade\n```\n\nThis should be run from within the same directory as `setup.py`.\n\n---\n\nAlso, another item I noticed is that you will need to include the json data file you created in the installed package. This can be done by adding the following line to `MANIFEST.in`:\n\n```\nrecursive-include chatterbot/adapters/* *.json\n```\n No problem, this is all really good work and its cool to see it coming together. Also, that corrected the issue.\n Code review is a part of programming. It's always possible to make a mistake, having a few more sets of eyes on it never hurts.\n\nSo far everything that I'm seeing here looks great. Performance-wise it works excellently. At the moment I believe there is only one more thing in the code that I believe could be improved, I'll leave a comment about it on the line.\n @DarkmatterVale These changes look good to me. Did you have any more additions before I merge this?\n Alright, just did a manual merge with master because there was some conflicts that GitHub couldn't resolve automatically. Either way, this is an awesome addition and it will be available in the next release on pypi.\n  I am aware of the issue. It is due to an improper conversion of `.md` format to `.rst`. I have been meaning to figure out what line the problem is happening on but haven't had time yet. Thank you.\n This issue has been corrected in the release of ChatterBot v 0.3.0.\n  Sorry, I noticed this too after merging yesterday and didn't get a chance to respond. It looks like tests didn't run on the pull request so I never got a notification about the python 3 issue.\n\nNlpnet had a few python 3 compatibility issues as well that I was able to open a pull request to fix\n(https://github.com/erickrf/nlpnet/pull/18). I also agree that the dependency file is rather large for nlpnet and I noticed that it uses c extensions for faster processing, the issue is that it may also cause this library to fail to install in some windows environments.\n\nI would be interested to see if it was possible to accomplish SVO triplet identification with NLTK which has excellent support across platforms and python versions.\n\nFor the time being, I am going to move the last commits for the SVO adapter to different branch until we can get these issues corrected.\n That's ok, new branch is up at https://github.com/gunthercox/ChatterBot/tree/svo\n  The new adapter looks great! I also just added you to the git repo so you can directly create new branches and push to the repo if you want to.\n Also, you should now have access edit the project wiki. Would you mind adding a brief description for the new logic adapter?\nhttps://github.com/gunthercox/ChatterBot/wiki/Logic-adapters\n That looks good. Thank you.\n  Looks good :+1:\n\nThank you for the pull request!\n  python-levenshtein unfortunately cannot be a requirement. It has to remain optional because it is a c extension and it currently fails to build on most windows operating systems.\n  Hi, it appears that the corpus data files were not included in the package. I've corrected the issue by including them in the project's `MANIFEST.in` file.\n\nYou should now be able to upgrade to chatterbot 0.2.9 where this should now be fixed.\n  Thank you for the pull request. This looks like it should be good to merge, I just want to check a few things locally first. Mainly because this makes modifications to the response statement, which was previously unmodified so this creates a small hole for test results because nothing is checking to see what is added to the response statement in the database.\n Hi @jamdagni86, I just checked over this pull request. I cannot merge the changes to `chatterbot.py` because they modify the response statement that the chatterbot returns. The issue with this is that it is possible for a bot to return an incorrect response. If we modify an incorrect response to say that it is _in response to_ a users input then that response will be treated as a valid reply to that input statement when it is encountered again in the future.\n\nI believe the issue may be being caused elsewhere in the code. Running the test case you created against the current codebase I noticed that subsequent calls of the `get_response` method are adding the previous response statement to the \"in_response_to\" field of the users input. This is because the current implementation of get_response treats the input statement as a part of the current conversation that the chatbot is having with the user. So a test such as:\n\n``` python\nresponse1 = self.chatbot.get_response('how do you login to gmail?')\nresponse2 = self.chatbot.get_response('how do I login to gmail?')\nresponse3 = self.chatbot.get_response('how do I login to gmail?')\n```\n\nactually ignores the chatbot's responses so that it thinks _'how do I login to gmail?'_ is a response to whatever was returned from _'how do you login to gmail?'_.\n\nThis can also be seen in the database dumps from each step in the test case:\n\n---\n\nAfter training:\n\n``` json\n{  \n   \"Goto gmail.com, enter your login information and hit enter!\":{  \n      \"in_response_to\":[  \n         [\"how do you login to gmail?\", 1]\n      ]\n   },\n   \"how do you login to gmail?\":{  \n      \"in_response_to\":[]\n   }\n}\n```\n\nAfter response_to_trained_set\n\n``` json\n{  \n   \"Goto gmail.com, enter your login information and hit enter!\":{  \n      \"in_response_to\":[  \n         [\"how do you login to gmail?\", 1]\n      ]\n   },\n   \"how do you login to gmail?\":{  \n      \"in_response_to\":[]\n   }\n}\n```\n\nAfter similar_question_1:\n\n``` json\n{  \n   \"Goto gmail.com, enter your login information and hit enter!\":{  \n      \"in_response_to\":[  \n         [\"how do you login to gmail?\", 1]\n      ]\n   },\n   \"how do you login to gmail?\":{  \n      \"in_response_to\":[]\n   },\n   \"how do I login to gmail?\":{  \n      \"in_response_to\":[  \n         [\"Goto gmail.com, enter your login information and hit enter!\", 1]\n      ]\n   }\n}\n```\n\nAfter similar_question_2:\n\n``` json\n{  \n   \"Goto gmail.com, enter your login information and hit enter!\":{  \n      \"in_response_to\":[  \n         [\"how do you login to gmail?\", 1]\n      ]\n   },\n   \"how do you login to gmail?\":{  \n      \"in_response_to\":[]\n   },\n   \"how do I login to gmail?\":{  \n      \"in_response_to\":[  \n         [\"Goto gmail.com, enter your login information and hit enter!\", 2]\n      ]\n   }\n}\n```\n\n---\n\nBased on what I am seeing I don't believer there is an issue here. I can see how it would be useful to get a response independent of the current conversation. Perhaps an additional method to accomplish this would be a better solution?\n Hi @jamdagni86, I'm very sorry about not getting back to you promptly. My schedule has been very busy lately. I just had a chance to walk through the test output you provided and figured out where the main part of the issue is.\n\nIn the main `chatterbot.py` file, there is a variable called `all_statements` which is a list of every statement in the database. This list is then passed to the logic adapter which searches for the closest match to the known input and returns whatever statement the match was in response to.\n\nThe issue that you ran into was because after the first time the the similar statement was entered as input, the statement then existed in the database, however it had no response values. Your fix modifies the input statement to correct this. However this can lead to possible problems later if the input response that chatterbot provides is incorrect (very possible when working with small data sets).\n\nTo correct this issue with out modifying response data, I am going to modify the storage adapter to include a _not_ filter. This will allow the initial filter set of all known responses to exclude any statements that do not have a known response.\n\nI am currently working on adding these changes and will create a new pull request later (likely tonight).\n\nAgain, thank you for bringing this issue to my attention, and my apologies for not getting to this sooner.\n I just opened #81 which adds a check to remove statements that are no in response to a known statement. Contrary to what I mentioned yesterday, it wasn't actually that statements with no values in their `in_response_to` list needed to be removed, instead actually needed to be any statement for which there was no other statement that listed it in it's `in_response_to` field that needed to be removed before passing the list to the logic adapter.\n\nI've made additional comments to explain this where the modification was added in the main `chatterbot.py` file.\n\nI have also included the test case that you provided all except for the last line:\n\n``` python\nself.assertIn(similar_question, self.chatbot.storage.find(response_to_trained_set).in_response_to)\n```\n\nThis had to be removed because the response should not have the input added to it.\n\nThank you again for opening this ticket and for your time. This was a significant bug that I likely wouldn't have noticed otherwise.\n  I believe you might be looking to use the [`no_output`](https://github.com/gunthercox/ChatterBot/wiki/IO-adapters#no-output-adapter) adapter here instead of the `terminal` adapter.\n\nYou can switch the adapter by setting the `io_adapter` parameter:\n\n``` python\nchatbot = ChatBot(\n    \"My ChatterBot\",\n    io_adapter=\"chatterbot.adapters.io.NoOutputAdapter\"\n)\n```\n\nhttps://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/io/no_output.py\n\nPlease let me know if this solution works for you.\n  Hi, thank you for the pull request. This is actually not a typo in the readme, it a a [bug in the code that is preventing the whole english corpus from being loaded](https://github.com/gunthercox/ChatterBot/issues/67). I will hopefully have a fix up soon.\n Alright, just reconsidered this because I am still trying to figure out some of the issues that are happening here. Thank you for the suggestions.\n  I can confirm as well. Interestingly it appears that the [unit test for this](https://github.com/gunthercox/ChatterBot/blob/master/tests/training_tests/test_training_from_corpus.py#L23) is passing.\n\nI believe the issue has something to do with relative / non-relative import paths being loaded in the corpus utility module: https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/corpus/utils.py\n\nI will be looking into this more later today.\n I am continuing to look into this issue. I am still trying to debug what is going on here.\n\nWhat I am seeing is that the corpus modules are being imported differently depending on where the method is called from.\n\nI can currently duplicate both successful and failing module imports by running either:\n`nosetests tests/training_tests/` (failing)\n\nor just `nosetests` (passing).\n Hi @zeandrade, this should be all set now. I've switched from using python imports to simply traversing the data directory of files. This makes things much easier to work in general and corrects the issue with the import location you encountered.\n  Serialized response lists should be a list of json objects so that additional data such can be added in the future.\n\nCurrent format:\n\n```\n[\"Response text\", 4]\n```\n\nNew format:\n\n``` json\n{\n    \"text\": \"Response text\",\n    \"occurrence\": 4\n}\n```\n @DarkmatterVale Definitely, I agree.\n I haven't had a chance to work on this yet. I was thinking of implementing it over this upcoming weekend.\n  The [Closest Meaning Logic Adapter](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/closest_meaning.py) currently only checks the path similarity between the first synset for each word (`synset1[0].path_similarity(synset2[0])`). This heuristic might be more accurate if it selected the maximum (shortest path) pair of synsets for the two words.\n\nBecause this operation might greatly increase the amount of time required to process each result, it may be useful to look into the possibility of caching logical evaluations made by this adapter on the statement object when it is saved to the database. Then, the check would only need to be processed if the value of the overall synonymous meaning between two statements had not already been evaluated. \n Thank you, I didn't know about `wup_similarity` until now. I will look into it.\n  ChatterBot currently supports two different dialogue algorithms.\n\nThe first is the _closest match_ algorithm that determines the similarity between the statement provided by the user and a set of known statements. For example, based on the sample input you provided, there is a 65% similarity between `\"where is the post office?\"` and `\"looking for the post office\"`. The closest match algorithm selects the highest matching known statements and returns a response based on that selection.\n\nThe second is the _closest meaning_ algorithm. This algorithm uses the wordnet functionality of [nltk](http://www.nltk.org) to determine the similarity of two statements based on the path similarity between each token in each statement. The sum of the path similarities is used so that the statement that has the closest path similarity (basically the closeness of synonyms) is returned.\n- In the case of both algorithms and the training examples you provided, the input of \"looking for the post office\" would match close enough to \"where is the post office?\" to return \"it is right behind you\".\n\n---\n\nSo, to answer your questions about what functionality is available:\n- **enriching or at least retaining a context during a dialogue**  \n  (Currently not present.) ChatterBot **does** retain a copy of the current conversation and it a parameter that is provided to all logic adapters. However, it is currently not used. I have plans to create a new logic adapter that uses the context of the current conversation to alter the decision of what result is returned. This feature is most likely to be added next.\n- **learning from humans**\n  (Yes) ChatterBot does have a readonly mode where it will not learn, however by default the ChatterBot will add to it's known selection of responses as an individual communicates with it. It maintains the context of what the statement was and what it was in response to. It also records the number of times a given response has occurred, a useful metric when selecting the most likely response to a given statement.\n- **making prediction or/and deduction based on available knowledge**\n  (Yes) The logic that is currently available is more deduction based, but it just comes down to how each selection is chosen in a given response algorithm. In all cases, the current selection of response algorithms always go with the most likely response.\n\n---\n\nAdditionally, creating new response algorithms is fairly simple. To create one, just define a class that completed this interface:\n\n``` python\nclass MyLogicAdapter(LogicAdapter):\n    def get(self, text, statement_list, current_conversation):\n        # TODO\n        return selected_statement\n```\n Thank you, I am planning on making these updates to the documentation soon.\n I have updated these sections in the wiki. Thank you for posting these questions, please let me know if there is anything else I can improve or clarify.\n  It would be interesting to have an IO adapter for ChatterBot that makes it possible for a instance of the program to communicate through an IRC client. I don't have a lot of experience with IRC, but this would be a great addition and a pull request would be welcomed if anyone is ever interested.\n I would be more than happy to accept a pull request if this can be accomplished. I have had people ask me about this before which is why I created the ticket. Again, I don't know a ton about IRC so I can't offer much help if you want to look into this.\n\nOne idea which might help is that I have been considering designing an adapter for email communication. The structure is set up so that there is a background thread that periodically checks for a new message. If it finds one, it saves it in a queue until a get_latest_message method is called. I'm wondering if a similar structure would work in this case?\n  It would be really cool to have an IO adapter for ChatterBot that makes it possible for a chatbot instance to communicate through the Google Hangouts API.\n\nIt may be useful to look at https://github.com/hangoutsbot/hangoutsbot\n\nPull requests welcomed if anyone is interested.\n That looks promising! I will have to check out how they are accomplishing their [event handling](https://github.com/Rapptz/discord.py/blob/master/examples/reply.py) but something like that may work well.\n  I believe the included database contains a validation error. I haven't been able to isolate where exactly it is. My plan to correct this is to remove the included database in a future release of ChatterBot and to add a corpus of training material that can be used to easily populate a database.\n\nMy recommendation in the mean time is to use a different database than the one that comes included with ChatterBot. I apologize about the issue, I will correct it as soon as I am able.\n  I haven't heard about this before but it looks very interesting. This might work well as a new logic adapter that takes Cortical's API credentials as a keyword argument.\n Feel free to explore this, I will be traveling for the next four days and won't have a chance to thoroughly experiment with Cortical's API. From what I've seen so far it sounds extremely promising. Keep me posted with what you come up with.\n Awesome, let me know how it goes.\n Yes, here is how I would recommend setting this up.\n\nLets say we create a new ChatBot instance like this:\n\n``` python\nbot = ChatBot(\n    \"My ChatterBot\",\n    storage_adapter=\"chatterbot.adapters.storage.JsonDatabaseAdapter\",\n    logic_adapter=\"chatterbot.adapters.logic.CorticalLogicAdapter\",\n    io_adapter=\"chatterbot.adapters.io.TerminalAdapter\",\n    database=\"../database.db\",\n    cortical_api_key=\"XXXXXX-XXX-XXXXXX-XXXXXX-XXXXXXX\"\n)\n```\n\nNote the last parameter being passed in (`cortical_api_key`). ChatterBot passes all keyword argument parameters to it's adapters. This means you can access these from inside your logic adapter (or any other adapter for that matter).\n\nThen, your new logic adapter would likely look something like this:\n\n``` python\nclass CorticalLogicAdapter(LogicAdapter):\n    def __init__(self, **kwargs):\n        self.api_key = kwards.get(\"cortical_api_key\")\n\n    def get(self, text, statement_list, current_conversation):\n        \"\"\"\n        Post data to cortical api and process results here.\n        We can now reference self.api_key any time we need it.\n        \"\"\"\n        return response_statement\n```\n No problem\n Hi @GeraldLoeffler, this adapter has not been implemented yet. Thank you, I was unaware of the Python API.\n  Looks good :+1: \n I will keep you posted.\n  This adds an IO adapter that allows ChatterBot to send and retrieve messages through Twitter's API.\n- [ ] Set up [mock api for tests](http://cramer.io/2014/05/20/mocking-requests-with-responses/)\n\nCloses #15\n @DarkmatterVale This still needs some work. I haven't looked at these changes in a while but I believe I was running into an issue with authentication.\n Closing off this pull request as it will not be possible to complete. The main issue is that there is no way to reliably determine if a response has been issued to a direct message sent to the current user using Twitter's API. See http://stackoverflow.com/questions/34027036/check-if-a-user-has-responded-to-a-direct-message/34038986#34038986\n\nFor not, the closest support for this will be the availability of the Twitter Storage Adapter: https://github.com/gunthercox/ChatterBot/pull/54\n  Looks good :+1: \n\nThank you!\n  Sorry, this is because the version of ChatterBot on PyPi is behind the version of ChatterBot on master. I plan on doing a release of the next version of ChatterBot within the next week. Until then I recommend downloading the current copy of the repo from github, and installing it locally via `pip install . --upgrade`.\n\nI apologize for the inconvenience, I hope this solution helps.  \n  Hi @dambros, the default _database_ used by ChatterBot is just a json formatted file. You shouldn't need to make any adjustments to the database itself in this case. I recommend you checkout the `get_response_data` method in the main `ChatBot` object (chatterbot.py). Around line 70 of this file you will see that I assign a few values like this:\n\n``` python\nvalues[\"name\"] = name\nvalues[\"occurrence\"] = count\nvalues[\"in_response_to\"] = response_list\n```\n\nThese are the attributes that are being saved to the database. In your case, you would just want to add another one here that would look like:\n\n``` python\nvalues[\"score_value\"] = my_score_value\n```\n\nLet me know if you need additional information on this.\n For this you will want to modify the `train` method in the `StorageController` class. You can assign the score in the same way in this method. Since the train method in the `ChatBot` class calls the train method in the `StorageController` class, you may want to modify it to take an additional parameter for the score.\n  This is a known issue. I'm working on writing database adapters for mongodb and possibly sqllite. The mongodb adapter should be available in the next release of ChatterBot.\n Greetings! Just to provide an update, https://github.com/gunthercox/ChatterBot/pull/51 adds support for connecting ChatterBot to MongoDB which should yield significant performance improvements on large databases.\n  If you install `python-cjson` ChatterBot's [default database module](https://github.com/gunthercox/jsondb) will detect it and use it instead of python's built in `json`. The [cjson module](https://pypi.python.org/pypi/python-cjson) has much better preformance and supposedly offers up to 250 times the speed when processing data.\n\nAside from this, as I briefly mentioned in https://github.com/gunthercox/ChatterBot/issues/41#issuecomment-106066687, there is the oppertunity to write storage adapters for other types of databases. ChatterBot's default storage system uses a json file. An adapter to use another type of database could easily be created. Let me know if you end up creating an adapter for another database type, pull requests are always welcome :smile:.\n  These classes have been moved out of the package for the latest release. This was done in favor of keeping the main ChatBot class as abstract as possible while simultaneously introducing the concept of **adapters** for various operations.\n\n**Example Classes**\nAll of the classes such as `Terminal` and `TalkWithCleverBot` have been moved into the [examples](https://github.com/gunthercox/ChatterBot/tree/master/examples) directory in the repo.\n\n**Adapter Classes**\nChatterBot version 0.2.0 introduces the concept of adapters for three categories of operations. ChatterBot defines these three categories as **storage**, **logic**, and **io**. This change will make it possible for future modules to be created that allow ChatterBot to be set up to use any type of database, and communicate with users through any medium such as web apis.\n\nCurrently there isn't any documentation on these items since I forgot about updating the readme. I'll add thorough documentation as soon as possible.\n I've updated the documentation in the readme for these changes. Please let me know if anything is unclear or could be improved.\n  Hi @asya-bergal, thank you. Including `requirements.txt` in the manifest fixed this problem. I've released the latest version of ChatterBot (0.2.0) which includes this fix.\n  Hi, sorry for the late reply. The changes look good and I've merged them onto master.\nI'm going to go ahead with @kevin-brown's recommendation and have the database adapter return the newly inserted statement.\n  I'm really interested in implementing this. I've done some experiments with creating 'personas' by custom-training multiple bots. However, I think the option to have ChatterBot learn based on weighted training data is closer to how people learn (based on choosing role models).\n  Looks good. Thank you!\n  Thanks. Closed in cfdd9bc8bf02924f3f6334b6ad8faa110a4da105.\n  ChatterBot is allows alternate statement selection algorithms to be passed into it's constructor. The default selection algorithm is `engram`, which looks for the closest existing match to a statement in the database and then returns a known response to that statement.\n\nAt the moment there is a placeholder file in `chatterbot/algorithms/markov.py` that is intended to be created as an option for selecting statements.\n\nThe markov algorithm would retrieve a list of statements that can be recognized as matches to the input text. A [Markov chain](https://en.wikipedia.org/wiki/Markov_chain) based algorithm can then be used to build a new response based on the collection of matching statements.\n- Ideally, a method to validate the grammatical correctness of the newly created statement could also be created. It may be useful to look into [NLTK ](http://www.nltk.org/) to determine this validation.\n- I'm open to suggestions on how to determine the number of words required to satisfy the markov algorithm.\n  ChatterBot currently keeps count of the number of times it receives a particular statement as input. This count is not being used anywhere at the moment, however it would useful to use it as a weighting factor to determine what response should be returned. Statements that occur frequently should be returned at a roughly equal frequency.\n- [x] Training should be modified to increment this count so that desirable responses can be reinforced.\n Added in 78a9406ecc883f4cadeb620d6359982a00c1c545\n  Awesome, thank you.\n  Looks great! :+1:\n  I'm in favor of dropping Python 2.6 support for improved testing. I've made the change already on the master branch.\n\nMuch appreciation @Alkalit \n  This pull request introduces a new format for how chatterbot stores data that has been added. Previously, chatterbot stored conversation data in csv files where each line represented a user's input and the bot's responses. The problem with this was that because chatterbot's responses were being recorded it was returning incorrect data. That is, it was returning what it saw as the most accurate response when that response was the one that it provided to the user. To fix this problem, the chatterbot now only stores the responses that the user gives to it.\n\nConversations are now saved in a dictionary object instead of csv. This change makes it easier to store unique statements and to retrieve all possible responses for a given statement. This change will also make a future adaptation to use [mongodb](http://www.mongodb.org/) much easier because mongo uses very similar formats.\n\nA counter variable has been added which records the number of times each statement is said by the user. This will be used in the future to determine common responses for statements.\n\nWhen selecting a response it is possible that no close match can be determined. If if this is the case, then a random response will be returned. This change is to help the chatterbot increase the number of possible responses it can give by changing the conversation to a new topic.\n\nAmong other minor items, this pull request also removes the deprecated `exit()` command used for terminating the terminal chatterbot instance.\n  Thank you, I've made the change.\n  This fixes incompatibilities with python3 by removing the `python-oauth2` library in favor of `requests-oauthlib`.\nThis also changes the oauth workflow to make it possible to redirect request urls to third party apps.\n\nCloses #16\n  Can you confirm that your responses to  the chatterbot are being saved and that the flag for logging is set to true? (Logging is enabled by default).\n Looking into this a bit more I realized that there was an issue with common responses not being returned. The frequency at which a statement is received by the chat bot is now taken into consideration when returning responses such that more common statements are returned with precedence. This change was made for #31.\n  Did you have any more changes to make in this pull?\n  These methods aren't being used. Feel free to create a branch and make the changes as needed.\n  Let me know if I need to clarify any of these. Also feel free to object to any of the planned changes, I realize that running local database might not always be convenient and while I'm not sure if there is any workarounds, I am not opposed to attempting to maintain flat file support of some kind. I want this project to be as useful as possible for everyone so any feedback is extremely helpful.\n\n**1. Do anyone who is using this project need to install its own instance of mondodb and have to open mongod.exe on their machine ?**\n\nCorrect, the chatterbot needs a database instance to connect to. For windows `mongod.exe` needs to be running. [[docs link](http://docs.mongodb.org/manual/tutorial/install-mongodb-on-windows/#start-mongodb)]\n\n**2. Will it replace flat files or can we have both flat files and mongodb in such a way if someone dont have db installed can still use flat files conversations ?**\n\nIn the branch i've been working on, I replaced the flat file access completely because I didn't have a way to maintain the ability to store object references for each statement. Future changes that need to be made to this program really require a database of some kind, and csv files don't provide an adequate level of flexibility. For instance, the database implementation will allow the bot to query responses that are specific to a single user, or recall conversations that it had with a particular person.\n\n**3. Do we still need to specify logfiles directory ?**\n\nNope, this won't be needed.\n\n**4. How are we going to add default conversations to mongodb for every new installations ?**\n\nFor this, I've added a method called `train()` which takes a list of usernames and statements as a parameter. I've included a sample below. In the future, it should also be possible to pass a file in as a parameter to the training method.\n\n```\nfrom chatterbot import Terminal\nfrom chatterbot.algorithms.engram import engram\n\n# Create a new terminal chat bot and use the engram algorithm to select responses.\nchatbot = Terminal(engram)\n\nconversation = [\n    [\"user\", \"Hello\"],\n    [\"salvius\", \"Hi there!\"],\n    [\"user\", \"How are you doing?\"],\n    [\"salvius\", \"I'm great.\"],\n    [\"user\", \"That is good to hear\"],\n    [\"salvius\", \"Thank you.\"],\n    [\"user\", \"Your welcome.\"],\n    [\"salvius\", \"Sure, any time.\"],\n    [\"user\", \"Yeah\"],\n    [\"salvius\", \"Can I help you with anything?\"]\n]\n\n# Train the chat bot on these know conversations\nchatbot.train(conversation)\n\n# Start the terminal session\nchatbot.begin()\n```\n I'm closing this one off since commit f26da1bef066455c0526431fb3d9d7179ddece29 introduces an adapter class that can be used to incorporate other database types.\n  Awesome, looks great!\n  I would like to allow this program to begin to address the Turing test concept.\n\nA few common ways that users from a study attempted to determine if an entity was a computer or a person included the following:\n- Ask name\n- Ask gender\n- Notice repeated information\n- Ask questions repeatedly to see if different answers are given\n- Try to get the entity to contradict itself\n- Ask math questions\n- Length of time taken to respond\n\nI do not plan to immediately address the last two bullets regarding math and speed. The math questions inherently suggest that the chat bot should get some math problems wrong in order to seem more human. My view on this is that it is more useful to have a bot that is good at math, which could just as easily be a human. Also, the amount of time taken to respond is not critical at this point but could be easily added if needed.\n\nA great selection of turing test questions: http://greatbird.com/turing/\n @justindomingue You have a valid point. As I've researched this topic more in-depth I'm beginning to see a trend in the types of questions that are asked. An example might be something such as\n\n> \"What is the meaning of life?\"\n\nwhich is actually an invalid Turing test question. The problem with it is the assumption that the machine can't define the meaning of life because it isn't alive. In reality, producing a definition to answer a question is very easy to do.\n\nAt the moment, I believe that the best questions for a Turing test require the subject to express abstract application of their own knowledge. By this I mean that they have to be able to leverage their own knowledge toward an end result. An example I've been using for this is the following question:\n\n> Pretend you are Arnold Schwarzenegger.\n\nThis command should invoke some serious cognitive requirements to test the subject. This is because it requires self-recognition, knowledge of an existing subject, and the ability to apply that knowledge onto itself while using it to issue a response.\n\nI'm in the process of researching more possibilities for valid Turing test questions. This is obviously a very long-term goal, but it is useful to have the idea out in the open so that it can be discussed.\n Just wanted to post a few more thoughts here.\n1. **Testing awareness of own knowledge.** In this case if the entity being tested confirms competency to answer a given question, then it should be able to answer the question when it is asked. This also could be modified to ask a more generalized version that questions if the entity knows how about a general subject, for instance _do you know how to compute natural logs?_\n   - Q: Do you know how to compute the natural log of seven fifths? \n   - A: Yes\n   - Q: What is the natural log of seven fifths?\n   - A: I do not know.\n2. **Testing creative intelligence.** \"Make up a story about _X_.\" This tests the ability of the entity in question to hypothesize about the nature of a given object or situation. This also demonstrates how well an entity might be able theorize when dealing with incomplete information.\n3. **Ability to resolve states of cognitive dissonance**. A simple way to test this may be to lie to the entity in question at one point in a conversation. By giving it contradictory information where one of the two components is clearly false, the entity should assume the fact to be incorrect.\n4. **Test grouping of information**. Humans have a natural tendency to mentally group similar objects and ideas.\n   - Which one of these things is not like the other...\n5. **Can a concept of _self_ be defined?**\n   - There is a problem when the intelligence comes from the brilliance of the programmer and not the power of the machine.\n   - Emergent order in chaotic systems \u2192 Neurons in the brain\n   - Test based: That playing a sound causes an activity in x part of the brain.\n I'm going to close this off as a ticket and move the content of the discussion into the project wiki (https://github.com/gunthercox/ChatterBot/wiki/Turing-Test-Questions). Eventually my goal will be to create a document that proposes a methodology for creating good questions to ask a computer / human to try to determine which is which. Obviously this project is still a ways away from this level of interaction, but this is still a concept that is somewhat interesting.\n  Agreed. For the current version I just wanted to have the ability to interact with Twitter's api available since the previous method wasn't generating a signature correctly which meant that post requests were failing. In the future, oauth2 support **will** need to be enabled.\n\nI have plans on how I want to set up methods for getting tokens and redirect urls so that ChatterBot can integrate easier with web apps. \n  ChatterBot has the capability to integrate with various social networking sites to learn from user input and also respond to input. Implementation has been specified for the following social platforms.\n\n**Twitter**\n- [x] Retrieve OAuth token for Twitter\n- [ ] Reply to direct messages\n\n**Communication**\n- [x] Create statements / replies based on statements learned from social media sites.\n Originally, I was also considering the creation of methods to retrieve data and interact with people through the APIs of Google+, Discus, and GitHub. I'm going to hold off on those for now until I can determine how well each platform will work as a potential source of training data and a medium for communication.\n  There is two ways to end the chat with the bot, you can either terminate the program using `crtl c` or you can type `exit()` to end the terminal session.\n\nAlso, this is the correct place to ask questions. It helps because anyone who has the same questions might be able to find an answer in one of these. It is also helpful because it allows me to keep track of issues and make improvements to the software.\n  This will happen if the program hasn't been trained with any pre-existing engrams. You will need to either create these your self or you can [download the sample copy](https://gist.github.com/gunthercox/6bde8279615b9b638f71/download). The engram files just need to be placed in the specified log directory.\n\nAs the chatbot has conversations with people, the number of possible responses it can give will increase.\n For specific phrases, it may be easiest to manually create a conversation log which contains the desired responses.\n\nThis is a known limitation of the engram selection algorithm which only returns a known response to the phrase which is the closest match to the user's input.\n\nI currently have a ticket open (#2) to address this by allowing the chat bot to track the current conversation by building a profile about the conversation which it can reference in order to maintain accurate responses. I have been planning to implementing [NLTK](http://www.nltk.org/) inorder to extract names and sentence topics for the this purpose.\n I would definitely be interested in implementing something to allowing the program to extract responses from books. [Project Gutenberg](https://www.gutenberg.org) is a perfect source to use for this. It might also be interesting to extract information from Wikipedia database dumps https://dumps.wikimedia.org.\n Any help or contributions would be greatly appreciated. I will write up some ideas on implementing this and post them.\n Alright, I have set up a document which briefly outlines my thoughts on implementing this feature. Feel free to modify or comment on it as needed. https://docs.google.com/document/d/1AWPgrpEyzs2T1gm3Vlp-oBaoMpgO860GfDFWcqCq5To/edit#\n Awesome, sorry for the late reply. I've read over the additions and left a few comments in the document. Let me know what you think. I'm hoping to finish up the changes for the database pull request sometime in the next few days. Once its finished I think we should be good to finalize the knowledge-base training plan. I've also added you as a project contributor, you should now have push access to this repository which will be useful if you're interested in making additions to the code base.\n Sorry, didn't mean to close this.\n This has been fixed by the changes made in https://github.com/gunthercox/ChatterBot/pull/27\n  It appears that this might be an issue with pip, rather than this library. See https://github.com/pypa/pip/issues/2109 for details. If it is related then there should be a fix for it in an upcoming release.\n\nI'm closing this one for now as not replicable/unrelated.\n  The goal for this pull request is to create an object that can be used to make managing conversations easier and more efficient.\n\nI've also...\n- Increased the selection of html characters that get converted to ASCII\n- Fixed issue with while loop running forever because of recursive calls\n- Updated the Engram selector algorithm to use the new conversation objects\n- Seriously improved the modularity and maintainability of the codebase\n  These are additional methods for returning responses from ChatterBot. These methods will increase the accuracy of any possible output that the program can provide. For example, questions about a specific subject will have to be processed much differently than simple greetings. Some algorithms that would be useful to implement may include the following:\n- [ ] **find_a_name()** A method designed to determine the most likely answer to a question regarding a name of a person, place, etc.\n  Example input: \"Who was the president of the United States in 1953?\"\n  Example output: \"Dwight D. Eisenhower\"\n- [x] **evaluate_mathematically()** A method which checks an input value for any references to mathematical operations. If they exist, it will attempt to return a solution. This method should be able to evaluate both words and mathematical characters.\n  Example input: \"What is 2 \\* the square root of 4?\"\n  Example output: \"4\"\n- [x] **custom_methods()** This would allow a user to ask the bot to run a specific command, for instance entering \"Do I have any new messages?\" could check several services for new notifications. This would be based on loading in a reference to a third party method upon initialization of the program. (Accomplished through the addition of the adapter system)\n\n---\n- ~~**small_truths()** This idea suggests that by knowing a collection of true facts about everyday items, the program will be able to determine the truth of more complex statements. For instance, note the statement \"can a can can cans\". As a human we are able to determine that a can is a metal container which cannot engage in the act of canning because it is a non-mechanized inanimate object. A computer on the other hand would find this statement more challenging to decipher. Microsoft Word 2010 detects this statement as incorrect http://imgur.com/crDA3eh.~~\n- ~~When the program receives an input item, it will process the input using each of the different algorithms and saving the value returned from each.~~ This will be addressed in https://github.com/gunthercox/ChatterBot/issues/85\n\nCompare each answer to known questions and answers. There will need to be a way to  to calculate how successful an algorithm is at generating the appropriate response. The result of this calculation will be used to determine the most appropriate response to return. To do this, the result of each algorithm which was run on the input statement will be compared to training text statements which most closely resemble the initial question. The closest matching response should be the result which has the closest matching question.\n\n**Future optimization**\nFurther optimization may be possible by performing preliminary checks to determine if certain algorithms do not need to be run when evaluating an input item. An example of this might be that an algorithm designed to extract and interpret mathematical operations in an input statement will not need to be executed if the input contains no numeric values or mathematical characters.\n Sure, the only thing I can think of for mathematical evaluation is that you should decide ahead of time if you just want to deal with numbers and operators, or a combination of those and words. Such as seven + 8.\n\nFor the other questions,\n\n1) I am currently unsure about how to logically determine which algorithm to apply. This feature requires an element of trail and error testing that is not currently present in the program. The main issue stems from the difficulty of measuring the \"success\" of a given response. For instance the response of \"You are welcome\" could be considered a _successful_ response to \"Thank you\", however there is no basis for measuring the value of success without prior experience or a way to verify the _correctness_.\n\n2) I think the concept of the find_a_name method could be refactored into something more general that would allow the program to search a knowledge base for a result and format the findings as a proper sentence. Wikipedia database dumps might be a good source of information to use as a knowledge base.\n\n3) This ticket predates the addition of adapters in ChatterBot, the concept for a custom_method feature was a possible precursor to this. I think in the future, the direction will be moving towards the ability to set multiple logic adapters where some could handle things such as conversations and others could accomplish more complex tasks when the bot is appropriately prompted. Completion of this stage of design would rely a bit on question (1) because there needs to be a way to measure the success of a one response choice against another.\n Awesome, I will be interested to see what you come up with!\n I agree these would be useful additions. At the moment chatterbot lacks the ability to use the knowledge it accumulates to understand the context or meaning of the input it receives. I would recommend taking a look at NLTK, I believe it already has implementations of a few of these algorithms.\n I'm going to close this ticket off because it appears that all of the items it covers have either been implemented or are covered in #90\n  Currently, ChatterBot only responds to the last statement that was entered. For better conversations and more accurate responses it would be useful to track the last statements that were entered in a given conversation and use these details to determine what to say next.\n\nShould the chatterbot's responses to the user be remembered as well? In the past these were stored in the database along with user inputs, however this caused issues with the chat bot learning the wrong output because it was recalling its own responses.\n- [ ] Research how the weight of a statement in a conversation changes as the conversation goes on.\n- [ ] Use statements from the current conversation to help determine the most appropriate response.\n- [ ] Statements decrease in weight as time increases.\n- Add set_persona method & set_user_persons() methods\n\nIt might be interesting to investigate the NLTK [PositiveNaiveBayesClassifier](http://www.nltk.org/api/nltk.classify.html) for determining if a statement shares a subject with a list of past statemets.\n Commit 177ad7b314f56039f27f8b05f83a3f7b7d48448d introduces a parameter to pass the current conversation into the logic adapter. This makes it possible to access this information from within a future logic adapter that will make choices in based on the context of the current conversation.\n Work is being done on the subtree branch (https://github.com/gunthercox/ChatterBot/tree/subtree) to support finding past conversations that are similar to the current one.\n Not yet, but in future additions that functionality will definitely be added.\n Closing this ticket off as #276 is essentially the same thing, except with a more defined scope.  Currently the logs in which each conversation is recorded contain the name of the speaker. These details could be used to allow the program to have a conversation with multiple people simultaneously in which each person can be replied to but the relevance of topics in the conversation still hold weight.\n This is possible to do with the conversation objects added in #11, however addition tracking will not be added for this issue. The tracking would need to be added in an application where the library has been implemented, the application would be responsible for creating new conversation objects. In the case of a group conversation, multiple conversations may exist, and some of the statements might be a part of multiple conversations.\n Yes, one way that this would be possible would be to simply create a number of chatterbot instances and set the parameter so that they all use the same database.\n", "text_all_count": 51563, "text_word_token": ["Hi", "jays", "NUMBER", "I", "believe", "you", "be", "run", "Django", "NUMBER", "which", "be", "currently", "in", "an", "alpha", "release", "state", "NUMBER", "ChatterBot", "doesn", "t", "support", "Django", "NUMBER", "yet", "NUMBER", "To", "fix", "this", "problem", "you", "can", "install", "the", "latest", "current", "version", "of", "Django", "NUMBER", "pip", "install", "django", "TAG", "What", "be", "the", "type", "of", "Network", "that", "be", "use", "to", "do", "the", "Machine", "learning", "in", "ChatterBot", "I", "don", "t", "understand", "you", "question", "could", "you", "elaborate", "your", "question", "with", "more", "information", "If", "you", "be", "look", "for", "What", "kinds", "of", "machine", "learning", "do", "ChatterBot", "use", "See", "this", "documentation", "LINK", "what", "kinds", "of", "machine", "learning", "do", "chatterbot", "use", "Can", "you", "tell", "me", "what", "be", "the", "neural", "network", "use", "Not", "implement", "Chatterbot", "purely", "implement", "use", "search", "algorithms", "techniques", "and", "naive", "Bayesian", "classification", "LINK", "_Bayes_classifier", "If", "it", "be", "not", "there", "then", "how", "can", "I", "do", "it", "NUMBER", "I", "think", "you", "could", "start", "this", "one", "LINK", "Currently", "this", "be", "not", "implement", "but", "there", "be", "a", "plan", "in", "near", "future", "to", "implement", "use", "chat", "form", "LINK", "Forms", "skanda", "NUMBER", "I", "totally", "misunderstood", "you", "question", "Yes", "you", "were", "correct", "you", "could", "write", "your", "own", "custom", "adapter", "to", "do", "I", "find", "a", "similar", "thread", "LINK", "s", "NUMBER", "rata", "Are", "you", "looking", "something", "like", "this", "LINK", "An", "edge", "case", "currently", "exists", "where", "a", "statements", "that", "a", "chat", "bot", "could", "return", "exist", "in", "the", "chat", "bot", "s", "database", "but", "due", "to", "constraints", "enforced", "by", "the", "storage", "adapter", "no", "valid", "responses", "that", "can", "be", "use", "can", "be", "returned", "NUMBER", "Steps", "to", "recreate", "this", "issue", "NUMBER", "Train", "a", "database", "entirely", "with", "statements", "that", "have", "no", "response", "NUMBER", "Try", "to", "get", "a", "response", "from", "the", "chat", "bot", "Cause", "of", "issue", "The", "main", "piece", "of", "logic", "that", "causes", "this", "be", "the", "notion", "that", "if", "a", "statement", "doesn", "t", "have", "a", "know", "response", "then", "it", "should", "be", "filtered", "out", "of", "the", "list", "of", "possible", "responses", "that", "the", "storage", "adapter", "returns", "NUMBER", "When", "a", "chat", "bot", "receives", "an", "input", "statement", "that", "has", "no", "know", "response", "it", "chooses", "a", "response", "randomly", "from", "the", "database", "NUMBER", "The", "issue", "be", "that", "this", "causes", "a", "case", "where", "no", "response", "can", "be", "selected", "but", "the", "chat", "bot", "knows", "that", "there", "be", "statements", "in", "the", "database", "NUMBER", "Steps", "to", "resolve", "ChatterBot", "s", "match", "based", "logic", "adapters", "need", "to", "be", "modify", "to", "return", "the", "randomly", "chosen", "statement", "instead", "of", "proceeding", "to", "the", "next", "step", "of", "selecting", "a", "response", "for", "the", "random", "choice", "NUMBER", "Add", "test", "to", "verify", "issue", "gunthercox", "Modify", "logic", "adapters", "vedantnarayan", "Django", "unable", "to", "find", "your", "custom", "corpus", "file", "in", "Pythons", "site", "package", "folder", "NUMBER", "Place", "your", "CustomCorpus", "in", "site", "package", "and", "try", "NUMBER", "for", "example", "C", "Python", "NUMBER", "Lib", "site", "package", "circus", "example_app", "CustomCorpus", "Let", "me", "know", "if", "you", "need", "any", "furthermore", "NUMBER", "taiwotman", "I", "have", "commented", "here", "LINK", "chatterbot", "conversation", "table", "in", "django", "admin", "NUMBER", "NUMBER", "taiwotman", "The", "Statement", "and", "Response", "table", "ought", "to", "have", "only", "the", "training", "data", "as", "populated", "use", "python", "manage", "train", "and", "nothing", "else", "from", "the", "user", "s", "input", "NUMBER", "The", "framework", "build", "like", "this", "the", "conversation", "LINK", "conversations", "be", "a", "combination", "of", "Statements", "and", "Responses", "Statement", "The", "Bot", "will", "consider", "a", "statements", "either", "inputs", "from", "external", "user", "or", "corpus", "file", "NUMBER", "Response", "The", "relationship", "between", "two", "statements", "NUMBER", "That", "be", "the", "reason", "you", "were", "seeing", "both", "user", "input", "and", "as", "well", "as", "corpus", "statements", "NUMBER", "bot_conversations", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "b", "NUMBER", "edd", "NUMBER", "d", "NUMBER", "NUMBER", "d", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fab", "NUMBER", "ea", "NUMBER", "png", "gunthercox", "Do", "you", "have", "any", "comments", "inputs", "taiwotman", "I", "don", "t", "know", "the", "corpus", "file", "trained", "NUMBER", "In", "short", "the", "best", "match", "algorithm", "works", "like", "this", "Bot", "will", "iterate", "all", "the", "statements", "which", "you", "have", "trained", "the", "bot", "NUMBER", "Python", "closest_match", "NUMBER", "confidence", "NUMBER", "Find", "the", "closest", "matching", "know", "statement", "for", "statement", "in", "statement_list", "confidence", "self", "NUMBER", "compare_statements", "input_statement", "statement", "if", "confidence", "closest_match", "NUMBER", "confidence", "statement", "NUMBER", "confidence", "confidence", "closest_match", "statement", "The", "default", "comparision", "algorithm", "be", "levenshtein_distance", "LINK", "L", "NUMBER", "In", "your", "example", "the", "scenario", "look", "like", "this", "Python", "confidence", "self", "NUMBER", "compare_statements", "What", "be", "ai", "what", "be", "ai", "In", "this", "the", "confidence", "be", "NUMBER", "and", "you", "will", "get", "answer", "Artificial", "Intelligence", "be", "the", "branch", "of", "engineering", "and", "science", "devoted", "to", "constructing", "machines", "that", "think", "NUMBER", "I", "think", "you", "were", "confused", "with", "this", "case", "NUMBER", "The", "chatterbot", "default", "threshold", "values", "be", "NUMBER", "NUMBER", "Among", "on", "all", "statement", "which", "have", "greater", "confidence", "then", "it", "will", "become", "as", "response", "NUMBER", "Python", "confidence", "self", "NUMBER", "compare_statements", "What", "be", "ai", "What", "be", "a", "joke", "In", "this", "the", "confidence", "be", "NUMBER", "which", "be", "greater", "than", "NUMBER", "and", "you", "will", "get", "answer", "Artificial", "Intelligence", "be", "the", "branch", "of", "engineering", "and", "science", "devoted", "to", "constructing", "machines", "that", "think", "NUMBER", "I", "think", "you", "tried", "your", "bot", "ai", "conversations", "other", "you", "may", "get", "accurate", "results", "NUMBER", "However", "you", "could", "get", "more", "granular", "results", "by", "setting", "confidence", "to", "NUMBER", "by", "use", "low", "confidence", "response", "adapter", "LINK", "low", "confidence", "response", "adapter", "NUMBER", "The", "same", "answer", "applies", "to", "second", "question", "also", "NUMBER", "Let", "me", "know", "your", "suggestion", "improvement", "on", "this", "question", "taiwotman", "I", "be", "closing", "this", "issue", "please", "feel", "free", "to", "reopen", "if", "you", "have", "any", "question", "elcolie", "I", "didn", "t", "understand", "you", "question", "could", "you", "provide", "with", "some", "examples", "Do", "want", "access", "dbshell", "of", "chatterbot", "Bash", "cd", "examples", "django_app", "python", "manage", "NUMBER", "py", "dbshell", "SQLite", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Enter", "NUMBER", "help", "for", "usage", "hints", "NUMBER", "sqlite", "NUMBER", "tables", "auth_group", "auth_group_permissions", "auth_permission", "auth_user", "auth_user_groups", "auth_user_user_permissions", "django_admin_log", "django_chatterbot_conversation", "django_chatterbot_conversation_statements", "django_chatterbot_response", "django_chatterbot_statement", "django_content_type", "django_migrations", "django_session", "sqlite", "select", "from", "django_chatterbot_statement", "Or", "Are", "you", "trying", "to", "access", "custom", "management", "commands", "LINK", "management", "commands", "then", "the", "train", "LINK", "management", "command", "command", "and", "source", "code", "LINK", "_chatterbot", "management", "commands", "hochochoc", "could", "you", "please", "provide", "more", "information", "about", "this", "issue", "Currently", "training", "process", "be", "static", "if", "you", "made", "any", "change", "in", "your", "train", "data", "you", "have", "to", "retrain", "your", "bot", "or", "create", "new", "one", "NUMBER", "I", "don", "t", "understand", "why", "you", "be", "trying", "to", "change", "exist", "statements", "Is", "there", "any", "use", "case", "behind", "Some", "of", "the", "reference", "that", "might", "useful", "to", "you", "LINK", "LINK", "issuecomment", "NUMBER", "milanmaximo", "In", "your", "case", "you", "could", "write", "your", "own", "pre", "processors", "to", "convert", "your", "text", "into", "desired", "format", "if", "these", "chars", "be", "unicode", "apply", "convert_to_ascii", "LINK", "chatterbot", "NUMBER", "preprocessors", "NUMBER", "convert_to_ascii", "NUMBER", "If", "not", "write", "your", "own", "pre", "processor", "here", "some", "documentation", "how", "to", "write", "own", "processor", "LINK", "creating", "new", "preprocessors", "similar", "issue", "LINK", "and", "Django", "LINK", "I", "m", "considering", "starting", "a", "ChatterBot", "newsletter", "NUMBER", "It", "would", "be", "sent", "out", "periodically", "probably", "about", "once", "a", "month", "and", "it", "would", "highlight", "some", "of", "the", "following", "topics", "Major", "change", "be", "made", "Project", "goal", "and", "planned", "change", "Developer", "highlights", "if", "someone", "submits", "a", "significant", "fix", "or", "contribution", "NUMBER", "For", "convenience", "the", "Mailchimp", "signup", "form", "NUMBER", "I", "m", "thinking", "the", "footer", "and", "index", "page", "of", "the", "documentation", "be", "prime", "candidates", "for", "the", "form", "location", "NUMBER", "TAG", "TAG", "mc_embed_signup", "background", "fff", "clear", "left", "font", "NUMBER", "px", "Helvetica", "Arial", "sans", "serif", "TAG", "TAG", "TAG", "TAG", "TAG", "Subscribe", "to", "our", "mailing", "list", "TAG", "TAG", "TAG", "Email", "Address", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "function", "window", "NUMBER", "fnames", "new", "Array", "window", "NUMBER", "ftypes", "new", "Array", "fnames", "NUMBER", "EMAIL", "ftypes", "NUMBER", "email", "fnames", "NUMBER", "FNAME", "ftypes", "NUMBER", "text", "fnames", "NUMBER", "LNAME", "ftypes", "NUMBER", "text", "jQuery", "var", "mcj", "jQuery", "NUMBER", "noConflict", "true", "TAG", "zhouzebiao", "Could", "you", "please", "provide", "fallowing", "details", "to", "resolve", "issue", "very", "quickly", "NUMBER", "version", "of", "chatterbot", "to", "know", "chatterbot", "version", "python", "m", "catterbot", "chatterbot", "NUMBER", "__version__", "NUMBER", "corpus", "data", "examples", "NUMBER", "example", "code", "snippet", "that", "produced", "erros", "Read", "this", "documentation", "to", "fix", "python", "encoding", "issue", "LINK", "how", "do", "i", "fix", "python", "encoding", "error", "liqiang", "NUMBER", "could", "you", "provide", "more", "information", "and", "a", "simple", "usecases", "you", "looking", "for", "Current", "chatterbot", "uses", "BestMatch", "LINK", "best", "match", "adapter", "algorithm", "to", "match", "statements", "use", "different", "statement_comparison_functions", "LINK", "statement", "comparison", "this", "bot", "configuration", "will", "produce", "a", "good", "results", "for", "you", "python", "chatbot", "ChatBot", "My", "ChatterBot", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "statement_comparison_function", "chatterbot", "NUMBER", "comparisons", "NUMBER", "levenshtein_distance", "response_selection_method", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_first_response", "You", "could", "write", "something", "like", "this", "Python", "chatbot", "ChatBot", "My", "ChatterBot", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "statement_comparison_function", "chatterbot", "NUMBER", "comparisons", "NUMBER", "jaccard_similarity", "response_selection_method", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_first_response", "or", "Python", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "comparisons", "import", "jaccard_similarity", "chatbot", "ChatBot", "Test", "bot", "statement_comparison_function", "jaccard_similarity", "The", "comparison", "class", "be", "converted", "to", "calable", "names", "at", "line", "number", "NUMBER", "LINK", "More", "information", "about", "comparison", "function", "LINK", "statement", "comparison", "Currently", "the", "associations", "be", "defined", "as", "association_table", "Instead", "i", "would", "propose", "to", "create", "a", "separate", "table", "for", "tag_association", "for", "example", "TagAssociation", "table", "NUMBER", "More", "information", "available", "here", "LINK", "simplifying", "association", "objects", "gunthercox", "Master", "any", "comments", "suggestions", "Hi", "neutralboy", "I", "don", "t", "believe", "the", "error", "you", "be", "seeing", "be", "relate", "to", "ChatterBot", "NUMBER", "It", "looks", "like", "it", "might", "be", "an", "error", "generate", "in", "one", "of", "your", "browser", "extensions", "NUMBER", "neutralboy", "if", "you", "want", "get", "conversations", "from", "chatterbot", "you", "have", "do", "post", "operation", "NUMBER", "LINK", "_app", "example_app", "template", "app", "NUMBER", "html", "L", "NUMBER", "the", "error", "message", "came", "from", "here", "LINK", "_chatterbot", "views", "NUMBER", "py", "L", "NUMBER", "It", "seems", "to", "me", "the", "build", "fail", "due", "to", "network", "issue", "I", "have", "restarted", "the", "job", "hope", "it", "will", "pass", "Some", "useful", "reference", "about", "invert", "index", "LINK", "corcassia", "Thank", "you", "for", "you", "PR", "could", "you", "please", "clarify", "the", "different", "between", "mongodb", "text", "indexing", "LINK", "text", "and", "this", "PR", "invert", "indexing", "corcassia", "Thank", "you", "I", "be", "not", "sure", "with", "performance", "NUMBER", "To", "improve", "gunthercox", "came", "with", "an", "idea", "tag", "filtering", "to", "speed", "up", "retrieval", "process", "LINK", "corcassia", "Thank", "you", "I", "m", "really", "impressed", "with", "the", "performance", "improvement", "after", "this", "change", "NUMBER", "I", "m", "going", "to", "pull", "these", "change", "down", "locally", "and", "test", "out", "a", "few", "things", "NUMBER", "I", "might", "have", "further", "question", "NUMBER", "corcassia", "Apologies", "for", "my", "delay", "I", "will", "be", "reviewing", "this", "pull", "request", "as", "soon", "as", "possible", "NUMBER", "NUMBER", "Yes", "it", "should", "work", "I", "would", "recommand", "to", "you", "write", "serveral", "response", "before", "you", "check", "YAML", "lint", "LINK", "The", "below", "example", "save", "it", "into", "NUMBER", "yaml", "and", "train", "your", "bot", "it", "should", "work", "NUMBER", "YAML", "Hello", "hi", "good", "morning", "hello", "hey", "what", "s", "up", "How", "be", "you", "I", "m", "fine", "good", "I", "m", "fine", "and", "what", "about", "you", "I", "m", "sad", "short", "and", "detail", "describe", "here", "LINK", "A", "line", "probably", "needs", "to", "be", "modify", "in", "there", "to", "create", "that", "statement", "NUMBER", "I", "probably", "miss", "it", "when", "I", "did", "the", "conversation", "change", "for", "NUMBER", "Hi", "nggary", "some", "change", "have", "recently", "be", "made", "and", "the", "session", "object", "be", "be", "remove", "in", "the", "next", "release", "NUMBER", "It", "was", "replaced", "with", "a", "conversation", "object", "which", "be", "persisted", "in", "the", "database", "NUMBER", "Additionally", "I", "opened", "issue", "NUMBER", "which", "once", "completed", "will", "make", "it", "possible", "for", "the", "exist", "objects", "such", "as", "statements", "responses", "and", "conversations", "to", "be", "overwritten", "so", "that", "additional", "method", "and", "variables", "can", "be", "add", "to", "them", "NUMBER", "I", "agree", "with", "all", "of", "the", "functionality", "you", "be", "ask", "for", "this", "be", "a", "question", "that", "has", "come", "up", "on", "multiple", "occasions", "NUMBER", "Let", "me", "know", "what", "you", "think", "of", "these", "change", "NUMBER", "I", "m", "hoping", "that", "they", "will", "make", "it", "much", "easier", "to", "accomplish", "what", "you", "want", "NUMBER", "Does", "this", "fix", "anything", "or", "be", "this", "just", "an", "ascetic", "change", "There", "currently", "some", "brief", "documentation", "on", "this", "page", "LINK", "adapter", "defaults", "I", "agree", "that", "many", "of", "the", "defaults", "be", "lacking", "NUMBER", "I", "ll", "see", "what", "I", "can", "do", "about", "update", "these", "Right", "now", "the", "MongoDB", "storage", "adapter", "and", "the", "SQL", "storage", "adapter", "each", "support", "both", "of", "the", "following", "parameters", "NUMBER", "database", "A", "simple", "string", "such", "as", "chat", "bot", "database", "that", "then", "gets", "turned", "into", "a", "database", "connection", "string", "by", "the", "storage", "adapter", "NUMBER", "database_uri", "A", "database", "connection", "string", "NUMBER", "I", "think", "it", "might", "simplify", "things", "if", "one", "of", "these", "parameters", "was", "remove", "NUMBER", "Considering", "they", "both", "almost", "do", "the", "same", "thing", "I", "don", "t", "think", "there", "would", "be", "too", "much", "of", "an", "issue", "if", "database", "was", "remove", "completely", "as", "a", "possible", "parameter", "for", "these", "two", "adapters", "NUMBER", "Explicit", "be", "better", "than", "implicit", "NUMBER", "The", "Zen", "of", "Python", "LINK", "NUMBER", "This", "pull", "request", "be", "referenced", "to", "LINK", "Still", "needs", "to", "complete", "Update", "training", "process", "Tests", "Statement", "update", "Mongodb", "update", "Documentation", "Any", "comments", "about", "this", "Preserve", "categories", "LINK", "corpus", "pull", "NUMBER", "Hi", "Arvhus", "Take", "a", "look", "at", "the", "exist", "comparison", "function", "LINK", "Your", "comparison", "function", "should", "be", "on", "a", "class", "that", "inherits", "from", "Comparator", "which", "can", "be", "imported", "use", "from", "chatterbot", "NUMBER", "comparisons", "import", "Comparator", "The", "reason", "this", "class", "be", "use", "be", "because", "sometime", "it", "be", "necessary", "for", "various", "setup", "processes", "to", "be", "run", "a", "single", "time", "when", "a", "chat", "bot", "first", "starts", "up", "and", "the", "Comparator", "class", "makes", "it", "easier", "to", "package", "all", "of", "these", "prerequisite", "steps", "together", "NUMBER", "After", "you", "create", "the", "class", "you", "ll", "want", "to", "put", "your", "comparison", "logic", "in", "a", "function", "call", "compare", "on", "your", "class", "NUMBER", "The", "compare", "method", "should", "return", "a", "number", "between", "NUMBER", "and", "NUMBER", "representing", "the", "percent", "of", "similarity", "between", "the", "two", "statements", "be", "compared", "NUMBER", "Let", "me", "know", "if", "there", "be", "anything", "I", "can", "help", "with", "or", "clarify", "NUMBER", "I", "m", "wondering", "about", "the", "pros", "and", "cons", "of", "support", "this", "NUMBER", "If", "a", "particular", "database", "architecture", "MongoDB", "Sqlite", "etc", "NUMBER", "allows", "this", "than", "I", "m", "all", "for", "it", "NUMBER", "One", "possible", "issue", "I", "can", "foresee", "be", "the", "challenge", "of", "merge", "the", "results", "from", "multiple", "non", "homogeneous", "database", "NUMBER", "For", "example", "someone", "wants", "to", "use", "a", "Postgres", "database", "and", "a", "MongoDB", "database", "together", "for", "their", "data", "NUMBER", "sedemmler", "I", "don", "t", "see", "any", "issue", "on", "my", "machine", "hp", "pro", "book", "NUMBER", "g", "NUMBER", "I", "googled", "your", "issue", "find", "some", "answer", "i", "think", "this", "could", "help", "solve", "your", "problem", "LINK", "LINK", "However", "the", "post", "suggested", "workaround", "relate", "to", "SSL", "i", "be", "not", "sure", "how", "this", "will", "effect", "on", "other", "platforms", "gunthercox", "any", "comments", "Python", "import", "nltk", "import", "ssl", "try", "_create_unverified_https_context", "ssl", "NUMBER", "_create_unverified_context", "except", "AttributeError", "pass", "else", "ssl", "NUMBER", "_create_default_https_context", "_create_unverified_https_context", "nltk", "NUMBER", "download", "I", "m", "going", "to", "close", "this", "ticket", "off", "because", "it", "hasn", "t", "be", "report", "again", "NUMBER", "I", "m", "assuming", "it", "could", "have", "possibly", "be", "a", "temporary", "error", "on", "the", "side", "of", "the", "servers", "hosting", "NLTK", "s", "data", "NUMBER", "vansh", "NUMBER", "by", "looking", "into", "error", "console", "you", "be", "just", "copy", "and", "pasted", "you", "code", "on", "terminal", "that", "be", "the", "reason", "you", "be", "seeing", "many", "failures", "NUMBER", "To", "avoid", "these", "kind", "error", "open", "text", "editor", "and", "save", "it", "NUMBER", "Bash", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "vi", "chatterbot_example", "NUMBER", "py", "or", "you", "could", "launch", "python", "interpreter", "from", "your", "terminal", "Bash", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "python", "past", "your", "code", "here", "I", "don", "t", "see", "any", "issue", "with", "python", "virtualenv", "NUMBER", "Many", "users", "developers", "facing", "issue", "while", "installation", "chatterbot", "on", "anacoda", "NUMBER", "I", "be", "ok", "if", "you", "be", "going", "add", "both", "python", "and", "anaconda", "installation", "instructions", "NUMBER", "And", "also", "a", "similar", "issue", "LINK", "if", "you", "want", "you", "could", "start", "work", "on", "this", "issue", "also", "NUMBER", "I", "decided", "to", "take", "a", "look", "at", "the", "Django", "documentation", "as", "a", "roll", "model", "for", "what", "the", "best", "documentation", "practice", "would", "be", "for", "add", "a", "note", "about", "virtualenv", "NUMBER", "From", "what", "I", "find", "it", "looks", "like", "the", "Django", "docs", "mention", "it", "in", "two", "main", "places", "NUMBER", "As", "a", "recommended", "step", "in", "the", "development", "workflow", "LINK", "get", "a", "copy", "of", "django", "s", "development", "version", "NUMBER", "For", "installation", "on", "Windows", "LINK", "I", "really", "like", "the", "idea", "of", "add", "a", "recommendation", "in", "the", "development", "documentation", "LINK", "NUMBER", "I", "think", "if", "a", "step", "be", "add", "to", "the", "installation", "instructions", "we", "just", "need", "to", "make", "be", "very", "clear", "that", "it", "be", "optional", "NUMBER", "Agreed", "NUMBER", "Thank", "you", "I", "d", "like", "to", "add", "a", "page", "to", "the", "development", "documentation", "LINK", "that", "highlights", "a", "handful", "of", "useful", "development", "tool", "that", "can", "be", "helpful", "when", "creating", "chat", "bots", "or", "work", "on", "ChatterBot", "s", "codebase", "NUMBER", "In", "general", "these", "tool", "should", "preferably", "be", "cross", "platform", "not", "something", "that", "only", "Mac", "or", "Windows", "or", "Linux", "users", "can", "use", "NUMBER", "A", "few", "ideas", "so", "far", "include", "NUMBER", "NoSQLClient", "This", "be", "an", "absolutely", "awesome", "tool", "for", "test", "out", "no", "sql", "databases", "like", "MongoDB", "NUMBER", "LINK", "A", "sqlite", "browser", "I", "m", "open", "to", "recommendations", "for", "a", "good", "one", "NUMBER", "I", "was", "looking", "into", "sqlite", "viewer", "maybe", "someone", "has", "use", "a", "better", "one", "I", "haven", "t", "test", "this", "one", "out", "yet", "NUMBER", "LINK", "viewer", "Others", "I", "m", "sure", "there", "be", "plenty", "of", "other", "useful", "tool", "out", "there", "NUMBER", "I", "would", "love", "to", "get", "some", "recommendations", "before", "I", "start", "curating", "the", "new", "documentation", "page", "NUMBER", "I", "have", "be", "use", "NUMBER", "DB", "browser", "SQLite", "LINK", "It", "looks", "good", "and", "works", "well", "for", "me", "NUMBER", "Robomongo", "for", "Mongo", "DB", "browser", "LINK", "_This", "issue", "be", "blocked", "by", "NUMBER", "and", "can", "t", "be", "worked", "on", "until", "those", "change", "be", "made", "NUMBER", "_", "Changes", "need", "to", "be", "made", "to", "ChatterBot", "s", "storage", "adapters", "so", "that", "statements", "can", "be", "filtered", "by", "their", "tags", "attribute", "NUMBER", "This", "be", "an", "important", "change", "that", "will", "allow", "more", "efficient", "response", "generation", "NUMBER", "After", "this", "change", "be", "made", "it", "will", "be", "possible", "to", "add", "a", "processing", "step", "where", "new", "input", "statements", "be", "classified", "based", "on", "the", "labels", "of", "categories", "of", "the", "dialog", "that", "was", "use", "to", "train", "the", "chat", "bot", "add", "this", "additional", "processing", "step", "will", "have", "a", "separate", "issue", "and", "pull", "request", "created", "for", "it", "NUMBER", "gunthercox", "Master", "If", "you", "didn", "t", "start", "work", "on", "this", "I", "be", "happy", "to", "work", "on", "this", "feature", "Is", "there", "any", "ETA", "to", "do", "this", "I", "be", "planning", "to", "write", "a", "utility", "method", "to", "find", "categories", "something", "like", "below", "Question", "If", "same", "similar", "statement", "present", "in", "multiple", "categories", "be", "we", "going", "considering", "those", "Python", "def", "find_categories", "corpus_paths", "input_statement", "data_file_paths", "self", "NUMBER", "list_corpus_files", "corpus_paths", "categories", "list", "for", "file_path", "in", "data_file_paths", "data", "read_corpus", "file_path", "for", "k", "v", "in", "data", "NUMBER", "items", "if", "input_statement", "in", "v", "categories", "NUMBER", "append", "k", "return", "categories", "vkosuri", "Thank", "you", "that", "would", "be", "greatly", "appreciated", "NUMBER", "Yes", "multiple", "categories", "for", "a", "statement", "should", "be", "support", "NUMBER", "Also", "if", "you", "check", "the", "corpora", "variable", "on", "L", "NUMBER", "LINK", "L", "NUMBER", "of", "trainers", "NUMBER", "py", "you", "should", "be", "able", "to", "get", "the", "categories", "from", "it", "NUMBER", "They", "be", "be", "add", "in", "the", "load_corpus", "LINK", "corpus", "blob", "master", "chatterbot_corpus", "corpus", "NUMBER", "py", "L", "NUMBER", "function", "of", "chatterbot", "corpus", "NUMBER", "corpora", "self", "NUMBER", "corpus", "NUMBER", "load_corpus", "corpus_path", "for", "category", "in", "corpora", "NUMBER", "categories", "NUMBER", "Thank", "you", "again", "let", "me", "know", "if", "anything", "comes", "up", "that", "I", "can", "assist", "with", "NUMBER", "Thanks", "Master", "Another", "question", "NUMBER", "be", "None", "be", "the", "default", "category", "NUMBER", "If", "user", "didn", "t", "specified", "any", "category", "do", "we", "need", "search", "whole", "corpora", "If", "not", "what", "s", "your", "thoughts", "NUMBER", "be", "None", "be", "the", "default", "category", "Since", "a", "statement", "can", "have", "multiple", "categories", "the", "default", "should", "be", "an", "empty", "list", "NUMBER", "NUMBER", "If", "user", "didn", "t", "specified", "any", "category", "do", "we", "need", "search", "whole", "corpora", "If", "not", "what", "s", "your", "thoughts", "Yes", "but", "that", "be", "going", "to", "be", "a", "different", "pull", "request", "NUMBER", "NUMBER", "describes", "this", "a", "bit", "more", "NUMBER", "Issen", "NUMBER", "Tags", "will", "be", "add", "to", "the", "statements", "based", "on", "the", "category", "field", "from", "their", "corpus", "data", "at", "least", "when", "training", "with", "the", "chatterbot", "corpus", "NUMBER", "Hi", "dileepkantapop", "I", "m", "not", "sure", "what", "Luis", "be", "NUMBER", "I", "would", "be", "happy", "to", "try", "to", "help", "NUMBER", "Do", "you", "have", "a", "link", "to", "project", "you", "be", "work", "with", "Luis", "be", "an", "Microsoft", "AI", "LINK", "dileepkantapop", "I", "think", "this", "thread", "will", "help", "you", "LINK", "LUIS", "Windows", "issue", "NUMBER", "issuecomment", "NUMBER", "how", "about", "increase", "it", "to", "NUMBER", "K", "Python", "text", "models", "NUMBER", "CharField", "unique", "True", "blank", "False", "null", "False", "max_length", "NUMBER", "or", "make", "it", "as", "TextField", "Python", "text", "models", "NUMBER", "TextField", "unique", "True", "blank", "False", "null", "False", "cho", "be", "It", "work", "fine", "on", "my", "machine", "NUMBER", "I", "be", "not", "sure", "in", "what", "you", "be", "get", "this", "error", "NUMBER", "Python", "text", "models", "NUMBER", "TextField", "unique", "True", "blank", "False", "null", "False", "nalancer", "NUMBER", "I", "think", "the", "example", "be", "work", "fine", "which", "version", "of", "chatterbot", "be", "you", "use", "To", "know", "current", "version", "of", "chatterbot", "please", "paste", "below", "commands", "on", "your", "terminal", "NUMBER", "Bash", "python", "m", "chatterbot", "version", "neofob", "try", "placing", "the", "following", "at", "the", "top", "of", "your", "file", "from", "__future__", "import", "unicode_literals", "This", "will", "give", "you", "Python", "NUMBER", "like", "unicode", "literal", "support", "and", "it", "should", "resolve", "the", "error", "you", "encountered", "NUMBER", "Let", "me", "know", "if", "you", "have", "any", "question", "NUMBER", "hochochoc", "recently", "ResponseQueue", "concept", "has", "be", "remove", "LINK", "from", "chatterbot", "NUMBER", "I", "think", "documentation", "be", "pending", "will", "update", "soon", "NUMBER", "I", "be", "wondering", "that", "how", "chatterbot", "works", "when", "ResponseQueue", "be", "full", "maxsize", "NUMBER", "NUMBER", "It", "won", "t", "create", "another", "session", "it", "will", "pop", "top", "element", "from", "the", "list", "NUMBER", "Python", "if", "len", "self", "NUMBER", "queue", "self", "NUMBER", "maxsize", "Remove", "an", "element", "from", "the", "top", "of", "the", "list", "self", "NUMBER", "queue", "NUMBER", "pop", "NUMBER", "hochochoc", "but", "I", "don", "t", "know", "whether", "I", "have", "to", "create", "a", "new", "input", "adapter", "or", "not", "NUMBER", "Yes", "Please", "be", "aware", "of", "future", "expansion", "LINK", "I", "find", "some", "resources", "this", "might", "be", "useful", "to", "you", "LINK", "a", "facebook", "messenger", "bot", "with", "python", "NUMBER", "html", "hochochoc", "Sure", "lesleslie", "There", "be", "some", "great", "change", "here", "thank", "you", "NUMBER", "Once", "the", "test", "be", "passing", "I", "ll", "be", "happy", "to", "merge", "in", "your", "change", "NUMBER", "Thank", "you", "again", "NUMBER", "Thank", "you", "again", "NUMBER", "Fantastic", "job", "lesleslie", "putting", "all", "this", "together", "NUMBER", "It", "be", "greatly", "appreciated", "vimerzhao", "I", "be", "unable", "to", "figured", "it", "out", "could", "you", "please", "let", "me", "know", "failure", "points", "or", "improvement", "with", "this", "PR", "Gotcha", "thanks", "vimerzhao", "LINK", "_storage", "NUMBER", "py", "L", "NUMBER", "vimerzhao", "Thank", "you", "NUMBER", "I", "ll", "check", "over", "the", "code", "and", "try", "to", "post", "something", "to", "help", "guide", "you", "through", "the", "necessary", "change", "NUMBER", "I", "ll", "post", "the", "information", "as", "soon", "as", "I", "can", "but", "you", "might", "not", "hear", "from", "me", "until", "later", "today", "or", "tomorrow", "NUMBER", "I", "believe", "the", "change", "you", "d", "need", "to", "make", "be", "just", "dropping", "the", "NUMBER", "db", "from", "the", "end", "of", "this", "line", "in", "sql_storage", "NUMBER", "py", "python", "self", "NUMBER", "database_uri", "sqlite", "database_name", "NUMBER", "db", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "L", "NUMBER", "LINK", "_storage", "NUMBER", "py", "L", "NUMBER", "Hi", "vimerzhao", "I", "ended", "up", "make", "some", "change", "just", "to", "verify", "what", "would", "be", "needed", "to", "resolve", "this", "and", "ended", "up", "make", "a", "pull", "request", "NUMBER", "I", "apologize", "for", "taking", "away", "your", "chance", "to", "contribute", "code", "to", "the", "project", "but", "I", "hope", "to", "see", "pull", "request", "from", "you", "in", "the", "future", "NUMBER", "Thank", "you", "again", "for", "your", "help", "in", "track", "down", "this", "bug", "NUMBER", "See", "NUMBER", "for", "details", "on", "the", "change", "NUMBER", "Hi", "nalancer", "NUMBER", "I", "don", "t", "have", "a", "Mac", "to", "test", "with", "but", "I", "ll", "see", "what", "I", "can", "do", "to", "resolve", "this", "NUMBER", "One", "thing", "I", "just", "notice", "be", "that", "there", "have", "be", "some", "update", "LINK", "to", "the", "ruamel", "NUMBER", "yaml", "library", "since", "version", "NUMBER", "one", "of", "which", "seems", "to", "include", "Python", "wheels", "which", "may", "fix", "some", "of", "the", "c", "relate", "error", "you", "be", "seeing", "in", "your", "output", "NUMBER", "Want", "to", "try", "run", "the", "following", "and", "let", "me", "know", "if", "it", "installs", "pip", "install", "ruamel", "NUMBER", "yaml", "upgrade", "This", "should", "install", "the", "latest", "version", "of", "ruamel", "NUMBER", "yaml", "NUMBER", "It", "looks", "like", "I", "need", "to", "update", "the", "version", "that", "be", "pinned", "in", "the", "chatterbot", "corpus", "package", "LINK", "corpus", "blob", "master", "requirements", "NUMBER", "txt", "Similar", "issue", "LINK", "not", "able", "to", "install", "use", "pip", "nalancer", "NUMBER", "I", "m", "glad", "your", "issue", "was", "resolve", "NUMBER", "I", "be", "going", "to", "make", "change", "to", "switch", "to", "a", "different", "Python", "YAML", "library", "to", "hopefully", "fix", "and", "prevent", "issue", "like", "this", "in", "the", "future", "NUMBER", "Yes", "it", "should", "NUMBER", "bainadeashish", "I", "_believe_", "this", "should", "work", "NUMBER", "I", "d", "be", "more", "than", "happy", "to", "look", "into", "it", "and", "add", "some", "test", "to", "confirm", "that", "it", "works", "NUMBER", "There", "might", "even", "be", "some", "interesting", "potential", "here", "to", "add", "a", "data", "set", "containing", "emoticons", "to", "the", "chatterbot", "corpus", "LINK", "corpus", "NUMBER", "bainadeashish", "happy", "to", "hear", "from", "you", "Full", "emoji", "list", "LINK", "emoji", "list", "NUMBER", "html", "bainadeashish", "Thank", "you", "for", "that", "note", "I", "ll", "take", "that", "into", "consideration", "NUMBER", "A", "preprocessor", "would", "probably", "be", "the", "most", "optimal", "way", "to", "accomplish", "the", "conversion", "you", "mention", "LINK", "anilneeluri", "I", "think", "this", "something", "be", "relate", "to", "twitter", "API", "token", "broken", "issue", "I", "have", "find", "a", "similar", "question", "comment", "which", "will", "guide", "to", "resolve", "your", "problem", "LINK", "Right", "now", "no", "NUMBER", "Luckily", "training", "only", "has", "to", "be", "do", "once", "for", "a", "chat", "bot", "NUMBER", "You", "may", "encounter", "further", "issue", "once", "you", "finish", "training", "with", "that", "much", "data", "NUMBER", "I", "m", "currently", "work", "on", "change", "to", "solve", "performance", "issue", "for", "large", "data", "sets", "NUMBER", "I", "believe", "a", "few", "of", "ChatterBot", "s", "logic", "adapters", "that", "use", "NLTK", "have", "english", "specific", "restrictions", "NUMBER", "The", "logic", "adapter", "for", "telling", "the", "current", "time", "be", "an", "example", "of", "this", "NUMBER", "An", "plan", "should", "be", "developed", "for", "support", "other", "languages", "in", "these", "adapters", "NUMBER", "I", "m", "not", "yet", "sure", "what", "the", "best", "approach", "will", "be", "NUMBER", "One", "possibility", "I", "be", "considering", "be", "add", "that", "data", "to", "the", "ChatterBot", "corpus", "and", "implement", "a", "warning", "in", "the", "logic", "adapter", "if", "it", "can", "t", "load", "the", "required", "data", "for", "that", "language", "NUMBER", "Some", "of", "the", "resources", "i", "have", "find", "LINK", "to", "do", "pos", "tagging", "and", "lemmatization", "in", "languages", "other", "than", "english", "A", "common", "request", "be", "that", "a", "developer", "wants", "to", "add", "an", "additional", "field", "to", "one", "of", "the", "database", "models", "NUMBER", "To", "easily", "allow", "this", "and", "also", "to", "encourage", "loose", "coupling", "of", "ChatterBot", "with", "its", "database", "models", "change", "should", "be", "made", "so", "that", "it", "be", "possible", "to", "specify", "the", "model", "classes", "that", "a", "chat", "bot", "should", "use", "NUMBER", "x", "Django", "models", "x", "SQL", "Alchemy", "models", "x", "Python", "object", "models", "x", "Remove", "the", "extra_data", "field", "in", "a", "future", "pull", "request", "because", "this", "be", "a", "way", "better", "method", "to", "facilitate", "add", "custom", "field", "NUMBER", "Blocks", "NUMBER", "ChatterBot", "s", "SQL", "Storage", "Adapter", "uses", "SqlAlchemy", "internally", "NUMBER", "According", "to", "the", "latest", "documentation", "SQL", "Alchemy", "support", "PostgresSQL", "NUMBER", "This", "be", "something", "that", "I", "haven", "t", "test", "out", "so", "I", "m", "not", "sure", "if", "it", "will", "work", "NUMBER", "Sources", "SQL", "Alchemy", "docs", "LINK", "ChatterBot", "SQL", "Storage", "documentation", "LINK", "sql", "storage", "adapter", "ChatterBot", "s", "SQL", "storage", "adapter", "LINK", "_storage", "NUMBER", "py", "Thank", "you", "I", "will", "be", "interested", "to", "know", "if", "it", "works", "NUMBER", "sherinmannambeth", "which", "version", "of", "chatterbot", "be", "you", "use", "To", "know", "current", "of", "chatterbot", "issue", "this", "command", "on", "your", "terminal", "venv", "user", "python", "m", "chatterbot", "version", "LINK", "_app", "example_app", "template", "app", "NUMBER", "html", "L", "NUMBER", "I", "think", "you", "be", "looking", "this", "LINK", "_chatterbot", "views", "NUMBER", "py", "L", "NUMBER", "My", "guess", "check", "proper", "order", "it", "be", "saving", "into", "database", "NUMBER", "i", "NUMBER", "e", "update", "procedure", "LINK", "_storage", "NUMBER", "py", "L", "NUMBER", "I", "think", "the", "meaning", "of", "keep", "another", "create", "be", "if", "Response", "didn", "t", "created", "create", "it", "create", "Response", "object", "NUMBER", "it", "should", "something", "like", "below", "NUMBER", "Python", "if", "not", "created", "Response", "NUMBER", "objects", "NUMBER", "create", "statement", "response_statement", "response", "statement", "bainadeashish", "Chatterbot", "do", "support", "multiple", "response", "selection", "methods", "from", "your", "example", "you", "have", "choose", "random", "response", "method", "LINK", "_selection", "NUMBER", "html", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_random_response", "and", "threshold", "values", "as", "NUMBER", "NUMBER", "For", "example", "In", "your", "case", "and", "based", "on", "your", "inputs", "the", "fallowing", "statements", "will", "fall", "under", "threshold", "value", "as", "NUMBER", "among", "all", "those", "values", "a", "random", "response", "will", "pick", "by", "chatterbot", "NUMBER", "Confidence", "Statement", "NUMBER", "hello", "NUMBER", "how", "be", "you", "NUMBER", "doing", "great", "Here", "more", "documentation", "on", "multiple", "response", "selection", "modes", "LINK", "_selection", "NUMBER", "html", "module", "chatterbot", "NUMBER", "response_selection", "bainadeashish", "I", "think", "it", "be", "slightly", "confusing", "the", "documentation", "needs", "to", "correct", "here", "Based", "on", "closet_match", "the", "optimal", "values", "be", "selected", "NUMBER", "Here", "be", "the", "steps", "the", "bot", "be", "performing", "NUMBER", "The", "information", "start", "from", "this", "steps", "LINK", "_match", "NUMBER", "py", "L", "NUMBER", "NUMBER", "Select", "the", "closest", "match", "to", "the", "input", "statement", "NUMBER", "Get", "all", "statements", "that", "be", "in", "response", "to", "the", "closest", "match", "NUMBER", "Selecting", "optimal", "responses", "NUMBER", "Response", "selection", "I", "be", "not", "sure", "did", "i", "answer", "question", "let", "me", "know", "what", "be", "your", "inputs", "thoughts", "suggestions", "comments", "Hi", "vyz", "NUMBER", "If", "by", "inbuilt", "session", "module", "you", "mean", "the", "one", "include", "in", "ChatterBot", "I", "would", "recommend", "against", "use", "it", "NUMBER", "I", "ve", "made", "change", "to", "remove", "ChatterBot", "s", "session", "management", "system", "in", "the", "next", "version", "in", "favor", "of", "storing", "a", "history", "of", "individual", "conversations", "in", "the", "database", "NUMBER", "I", "think", "this", "might", "be", "closer", "to", "what", "you", "be", "looking", "for", "NUMBER", "how", "can", "we", "train", "the", "chatterbot", "effectively", "to", "achieve", "the", "good", "response", "from", "bot", "NUMBER", "A", "high", "amount", "of", "confidence", "NUMBER", "will", "give", "accurate", "response", "from", "bot", "NUMBER", "To", "set", "threshold", "like", "this", "Python", "bot", "ChatBot", "Default", "Response", "Example", "Bot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "SQLStorageAdapter", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ListTrainer", "Actually", "i", "want", "to", "know", "about", "HOW", "TO", "TRAIN", "a", "basic", "chatbot", "with", "more", "amount", "of", "data", "NUMBER", "Hemanth", "NUMBER", "and", "anilneeluri", "For", "large", "amount", "of", "data", "it", "be", "recommended", "to", "write", "your", "corpus", "file", "NUMBER", "I", "think", "the", "below", "Q", "A", "will", "answer", "your", "question", "NUMBER", "NUMBER", "How", "to", "write", "a", "corpus", "file", "NUMBER", "What", "be", "training", "and", "what", "be", "different", "training", "class", "be", "available", "NUMBER", "How", "to", "write", "a", "corpus", "file", "Chatterbot", "do", "support", "both", "YAML", "LINK", "and", "JSON", "format", "in", "question", "and", "answers", "NUMBER", "You", "could", "find", "a", "large", "number", "of", "corpus", "file", "here", "LINK", "corpus", "tree", "master", "chatterbot_corpus", "data", "NUMBER", "Example", "YAML", "text", "Hello", "how", "be", "you", "doing", "today", "text", "I", "be", "doing", "well", "thank", "you", "NUMBER", "text", "I", "cannot", "find", "my", "keys", "NUMBER", "text", "Where", "was", "the", "last", "place", "you", "remember", "having", "them", "NUMBER", "What", "be", "training", "and", "what", "be", "different", "training", "class", "be", "available", "Training", "be", "the", "process", "involves", "loading", "example", "dialog", "into", "the", "chat", "bot", "s", "database", "NUMBER", "Chatterbot", "do", "support", "different", "training", "classes", "LINK", "training", "classes", "to", "train", "your", "bot", "NUMBER", "You", "could", "write", "your", "own", "training", "class", "for", "example", "UbuntuDialogCorpus", "and", "Twitter", "Training", "classes", "take", "a", "look", "exists", "training", "classes", "LINK", "yeshoujquery", "Yes", "that", "be", "correct", "NUMBER", "Version", "NUMBER", "doesn", "t", "contain", "any", "performance", "improving", "features", "and", "none", "were", "planned", "for", "this", "version", "NUMBER", "I", "assure", "you", "that", "I", "be", "aware", "of", "the", "performance", "issue", "and", "they", "will", "be", "greatly", "improved", "through", "future", "release", "NUMBER", "For", "reference", "you", "can", "review", "the", "details", "for", "the", "change", "in", "each", "release", "in", "ChatterBot", "s", "release", "note", "section", "LINK", "yeshoujquery", "Hopefully", "within", "the", "release", "for", "either", "NUMBER", "or", "NUMBER", "Is", "this", "framework", "based", "on", "sequence", "to", "sequence", "model", "No", "May", "be", "we", "could", "take", "up", "this", "as", "feature", "request", "Detail", "information", "about", "algorithms", "available", "in", "this", "comment", "LINK", "issuecomment", "NUMBER", "random_seed_word", "be", "keyword", "argument", "you", "could", "pass", "through", "ChatBot", "parameter", "NUMBER", "I", "hope", "this", "example", "will", "give", "idea", "NUMBER", "Python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "from", "settings", "import", "TWITTER", "import", "logging", "This", "example", "demonstrates", "how", "you", "can", "train", "your", "chat", "bot", "use", "data", "from", "Twitter", "NUMBER", "To", "use", "this", "example", "create", "a", "new", "file", "call", "settings", "NUMBER", "py", "NUMBER", "In", "settings", "NUMBER", "py", "define", "the", "following", "TWITTER", "CONSUMER_KEY", "my", "twitter", "consumer", "key", "CONSUMER_SECRET", "my", "twitter", "consumer", "secret", "ACCESS_TOKEN", "my", "access", "token", "ACCESS_TOKEN_SECRET", "my", "access", "token", "secret", "Comment", "out", "the", "following", "line", "to", "disable", "verbose", "logging", "logging", "NUMBER", "basicConfig", "level", "logging", "NUMBER", "INFO", "chatbot", "ChatBot", "TwitterBot", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "NUMBER", "twitter", "database", "NUMBER", "db", "twitter_consumer_key", "TWITTER", "CONSUMER_KEY", "twitter_consumer_secret", "TWITTER", "CONSUMER_SECRET", "twitter_access_token_key", "TWITTER", "ACCESS_TOKEN", "twitter_access_token_secret", "TWITTER", "ACCESS_TOKEN_SECRET", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "TwitterTrainer", "random_seed_word", "random", "chatbot", "NUMBER", "train", "chatbot", "NUMBER", "logger", "NUMBER", "info", "Trained", "database", "generate", "successfully", "The", "seed", "word", "parameter", "as", "well", "as", "other", "available", "parameters", "be", "also", "describe", "in", "detail", "the", "documentation", "I", "m", "just", "posting", "a", "line", "for", "convenient", "reference", "NUMBER", "LINK", "training", "with", "the", "twitter", "api", "I", "believe", "this", "question", "has", "be", "answered", "NUMBER", "I", "m", "going", "to", "close", "it", "off", "NUMBER", "liberaltech", "feel", "free", "to", "reopen", "it", "if", "you", "have", "any", "further", "question", "NUMBER", "vkosuri", "thank", "you", "as", "always", "for", "the", "prompt", "response", "NUMBER", "edwardinubuntu", "I", "agree", "with", "your", "suggestion", "NUMBER", "I", "ll", "add", "additional", "logging", "to", "cover", "the", "scenario", "where", "this", "adapter", "isn", "t", "use", "due", "to", "the", "value", "of", "the", "confidence", "threshold", "NUMBER", "I", "think", "add", "a", "progress", "be", "much", "useful", "to", "know", "how", "percentage", "be", "left", "completed", "NUMBER", "I", "see", "a", "variety", "of", "example", "be", "available", "in", "stack", "overflow", "LINK", "progress", "bar", "gunthercox", "if", "it", "useful", "then", "i", "will", "make", "a", "PR", "Ref", "Issue", "LINK", "This", "PR", "will", "enable", "sql", "engine", "with", "convert_unicode", "True", "More", "information", "available", "here", "LINK", "sqlalchemy", "NUMBER", "create_engine", "NUMBER", "params", "NUMBER", "convert_unicode", "Closes", "LINK", "The", "character", "set", "UTF", "NUMBER", "Default", "encoding", "be", "UTF", "NUMBER", "LINK", "sqlalchemy", "NUMBER", "create_engine", "NUMBER", "params", "NUMBER", "encoding", "I", "have", "trained", "with", "Chinese", "corpus", "it", "worked", "very", "well", "SQL", "sqlite", "NUMBER", "read", "db", "NUMBER", "sqlite", "NUMBER", "compleid", "INTEGER", "NOT", "NULL", "NUMBER", "text", "VARCHAR", "created_at", "DATETIME", "DEFAULT", "CURRENT_TIMESTAMP", "occurrence", "INTEGER", "statement_text", "VARCHAR", "PRIMARY", "KEY", "id", "FOREIGN", "KEY", "statement_text", "REFERENCES", "StatementTable", "text", "tableStatementTableStatementTable", "CREATE", "TABLE", "StatementTable", "id", "INTEGER", "NOT", "NULL", "text", "VARCHAR", "extra_data", "BLOB", "PRIMARY", "KEY", "id", "UNIQUE", "text", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "\u662f\u7684", "\u6211\u6709\u4e2a\u95ee\u9898", "NUMBER", "NUMBER", "\u4f60\u662f\u4e2a\u673a\u5668\u4eba\u5417", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "\u4f60\u597d", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "\u5f88\u62b1\u6b49", "\u6211\u6ca1\u6709", "NUMBER", "B", "NUMBER", "\u6211\u8fd8\u4e0d\u9519", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "\u90a3\u5f88\u597d", "NUMBER", "D", "\u770b\u5f97\u51fa\u6765", "NUMBER", "B", "\u559c\u6b22\u4ec0\u4e48\u989c\u8272", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "\u84dd\u8272", "\u95fb", "NUMBER", "Q", "\u4e48\u4e66", "\u8fd8\u4e0d\u9519", "\u4f60\u5462", "\u5417", "\u597d", "\u7684", "\u4f60\u5462", "\u86cb\u7cd5\u5f88\u7f8e\u5473\u554a", "NUMBER", "\u8fd9\u4ec5\u4ec5\u662f\u95ee\u4e00\u4e2a\u6234\u9762\u5177\u7684\u4eba\u7684\u77db\u76fe\u6027\u8d28", "NUMBER", "\u8bf7\u544a\u8bc9\u6211", "\u4f60\u559c\u6b22\u97f3\u4e50\u5417", "\u7f8e\u5473\u7684\u4e1c\u897f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "\u6ca1\u4e86N", "\u5168\u75af\u4e86", "\u4f46\u6211\u4f1a\u544a\u8bc9\u4f60\u4e00\u4e2a\u79d8\u5bc6", "\u6240\u6709\u6700\u68d2\u7684\u4eba\u90fd\u662f", "NUMBER", "J", "\u4ec5\u4ec5\u662f\u95ee\u4e00\u4e2a\u6234\u9762\u5177\u7684\u4eba\u7684\u77db\u76fe\u6027\u8d28", "NUMBER", "\u8bf7\u544a\u8bc9\u6211", "\u4f60\u559c\u6b22\u97f3\u4e50\u5417", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "\u6211\u559c\u6b22\u7535\u5f71", "NUMBER", "\u4ed9\u5973\u5ea7\u661f\u7cfb", "NUMBER", "\u7f8e\u80dc\u4e8e\u4e11\u964b", "NUMBER", "\u4f46\u4e0d\u5047\u601d\u7d22\u5c31\u52a8\u624b\u8fd8\u4e0d\u5982\u4e0d\u505a", "NUMBER", "I", "I", "\u4f60\u4f3c\u4e4e\u5f88\u719f\u6089Python\u4e4b\u7985", "NUMBER", "\u4f60\u4f7f\u7528\u4ec0\u4e48\u8bed\u8a00\u5462", "P", "NUMBER", "\u4f60\u542c\u5230\u65b0\u95fb\u4e86\u5417", "NUMBER", "\u4f60\u559c\u6b22\u4ec0\u4e48\u98df\u7269", "_", "NUMBER", "\u4f60\u559c\u6b22\u54ea\u7c7b\u7535\u5f71", "\u4f60\u5728\u4f5c\u4ec0\u4e48", "\u4ec0\u4e48\u95ee\u9898", "\u4f60\u597d", "\u4f60\u597d\u5417", "\u4f60\u5982\u4f55\u8fd0\u4f5c", "NUMBER", "Q", "\u4f60\u5b8c\u5168\u75af\u4e86", "\u4f46\u6211\u4f1a\u544a\u8bc9\u4f60\u4e00\u4e2a\u79d8\u5bc6", "\u6240\u6709\u6700\u68d2\u7684\u4eba\u90fd\u662f", "NUMBER", "NUMBER", "\u4f60\u60f3\u4e86\u89e3\u4e9b\u4ec0\u4e48", "NUMBER", "\u4f60\u60f3\u4e86\u89e3\u54ea\u65b9\u9762", "NUMBER", "\u4f60\u662f\u4e00\u4e2a\u7a0b\u5e8f\u5458\u5417", "N", "\u4f60\u6700\u559c\u6b22\u4ec0\u4e48\u989c\u8272", "\u4f60\u7231\u6211\u5417", "i", "\u4f60\u7684\u7231\u597d\u662f\u4ec0\u4e48", "a", "K", "\u4f60\u77e5\u9053\u5b83\u7684\u6240\u6709\u5185\u5bb9\u5417", "\u4f60\u8fd8\u597d\u5417", "y", "NUMBER", "\u505a\u4e5f\u8bb8\u597d\u8fc7\u4e0d\u505a", "NUMBER", "H", "NUMBER", "\u5176\u4ed6\u4e1c\u897f\u4e5f\u884c", "\u51ef\u5c14\u7279\u9646\u68da", "\u662f\u4ec0\u4e48\u5927\u9646\u7684\u5927\u9646\u67b6\u7684\u4e00\u90e8\u5206", "\u5982\u4f55\u5b9a\u4e49\u751f\u6d3bZ", "NUMBER", "\u53ef\u8bfb\u6027\u5f88\u91cd\u8981", "NUMBER", "NUMBER", "g", "\u5403\u559d\u7761", "\u8fd8\u6709\u65c5\u884c", "\u4f60\u559c\u6b22\u65c5\u884c\u5417", "bC", "\u547d\u540d\u7a7a\u95f4\u662f\u4e00\u79cd\u7edd\u5999\u7684\u7406\u5ff5", "NUMBER", "\u6211\u4eec\u5e94\u5f53\u591a\u52a0\u5229\u7528", "NUMBER", "Ln", "\u54c8\u52c3\u592a\u7a7a\u671b\u8fdc\u955c", "\u4e8e", "NUMBER", "\u5e74\u53d1\u5c04\u8fdb\u5165\u8fd1\u5730\u8f68\u9053", "\u5b83\u662f\u4ee5\u4ec0\u4e48\u7f8e\u56fd\u5929\u6587\u5b66\u5bb6\u547d\u540d\u7684", "\u559c\u6b22c", "\u55e8k", "\u55e8", "\u5f88\u9ad8\u5174\u89c1\u5230\u4f60", "NUMBER", "NUMBER", "\u55e8", "\u6700\u8fd1\u5982\u4f55", "NUMBER", "NUMBER", "\u6211\u4e0d\u600e\u4e48\u559c\u6b22", "Java", "NUMBER", "SM", "\u7684", "\u4f60\u5462", "L", "\u98df\u7269", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "\u6d77\u9c9c", "\u9c9c\u5f97\u6211\u4e0d\u8981\u4e0d\u8981\u7684", "\u4f60\u5462", "EV", "\u84dd\u8272", "y", "\u867d\u7136\u8fd9\u5e76\u4e0d\u5bb9\u6613", "\u56e0\u4e3a\u4f60\u4e0d\u662f", "Python", "\u4e4b\u7236", "NUMBER", "G", "NUMBER", "\u86cb\u7cd5\u662f\u4e00\u4e2a\u8c0e\u8a00", "NUMBER", "Y", "\u8c01", "\u8c01\u53ea\u662f\u4ee3\u8868\u4e86\u4e00\u4e2a\u4eba\u7f62\u4e86", "\u633a\u597d\u7684o", "NUMBER", "\u65e9\u4e0a\u597d", "\u4f60\u597d\u5417", "NUMBER", "\u660e\u4e86\u80dc\u4e8e\u6666\u6da9", "NUMBER", "TAG", "what", "s", "this", "NUMBER", "NUMBER", "\u00e5", "\u00e6", "\u00e4", "\u00e5", "\u00e6\u00b5\u00aa\u00e6", "\u00e9", "\u00ef\u00bc", "\u00e6", "\u00e9", "\u00e9", "\u00e9", "\u00ef\u00bc", "\u00e5", "\u00e5\u00be", "\u00e5\u00b9", "\u00e5", "\u00e5", "\u00e4", "\u00e9", "But", "I", "use", "Chinese", "corpus", "will", "get", "this", "NUMBER", "My", "server", "side", "code", "be", "python", "class", "ChatbotHandler", "RequestHandler", "def", "get", "self", "question", "result", "\u5c0f\u76ca\u8d39\u5c3d\u4e86\u4e5d\u725b\u4e8c\u864e\u4e4b\u529b\u672a\u80fd\u627e\u5230\u76f8\u5173\u5185\u5bb9", "try", "if", "question", "bot_result", "chatbot", "NUMBER", "get_response", "question", "if", "bot_result", "result", "str", "bot_result", "except", "e", "print", "e", "self", "NUMBER", "write", "json", "NUMBER", "dumps", "data", "result", "ensure_ascii", "False", "self", "NUMBER", "finish", "def", "make_app", "return", "Application", "split", "NUMBER", "SplitHandler", "chat", "NUMBER", "ChatbotHandler", "autoreload", "True", "def", "main", "print", "listening", "port", "NUMBER", "app", "make_app", "app", "NUMBER", "listen", "NUMBER", "IOLoop", "NUMBER", "current", "NUMBER", "art", "if", "__name__", "__main__", "main", "It", "s", "all", "my", "console", "error", "message", "NUMBER", "I", "open", "db", "NUMBER", "sqlite", "NUMBER", "in", "DB", "Browser", "it", "all", "looks", "good", "image", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "a", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "c", "NUMBER", "png", "Can", "you", "provide", "an", "address", "to", "download", "DB", "Browser", "here", "source", "link", "LINK", "on", "ubuntu", "these", "commands", "will", "work", "sudo", "add", "apt", "repository", "y", "ppa", "linuxgndu", "sqlitebrowser", "Then", "update", "the", "cache", "use", "sudo", "apt", "get", "update", "Install", "the", "package", "use", "sudo", "apt", "get", "install", "sqlitebrowser", "I", "think", "add", "this", "phase", "to", "here", "be", "much", "informative", "LINK", "When", "use", "SQLitestorage", "Chinese", "looks", "like", "have", "some", "encoding", "problem", "NUMBER", "sql", "sqlite", "select", "from", "StatementTable", "NUMBER", "\u00e5", "\u00e6", "\u00e4", "\u00e5", "\u00e6\u00b5\u00aa\u00e6", "\u00e9", "\u00ef\u00bc", "\u00e4\u00bd", "\u00e5", "\u00e7", "\u00e5", "\u00e6", "\u00e7", "\u00e9", "\u00e9", "NUMBER", "\u00e4", "\u00e6\u00b5", "\u00e7", "NUMBER", "\u00e9", "\u00e6", "\u00e4", "\u00e9", "\u00ef\u00bc", "\u00e9", "\u00e6\u00b2\u00b3\u00e4", "\u00e9", "\u00ef\u00bc", "\u00e4\u00bd", "\u00e5", "\u00e5\u00ba", "\u00e6", "\u00b3\u00e8", "\u00e5\u00b9\u00b2\u00e5", "\u00ef\u00bc", "What", "s", "wrong", "with", "it", "NUMBER", "When", "I", "use", "this", "bot", "in", "server", "python", "class", "ChatbotHandler", "RequestHandler", "def", "get", "self", "question", "result", "\u5c0f\u76ca\u8d39\u5c3d\u4e86\u4e5d\u725b\u4e8c\u864e\u4e4b\u529b\u672a\u80fd\u627e\u5230\u76f8\u5173\u5185\u5bb9", "try", "if", "question", "bot_result", "chatbot", "NUMBER", "get_response", "str", "question", "if", "bot_result", "result", "str", "bot_result", "except", "e", "print", "e", "self", "NUMBER", "write", "json", "NUMBER", "dumps", "data", "result", "ensure_ascii", "False", "self", "NUMBER", "finish", "response", "with", "a", "fail", "encoding", "was", "json", "data", "\u00e4", "\u00e6\u00b5", "\u00e7", "Wiki", "link", "LINK", "Forms", "gunthercox", "Master", "I", "would", "like", "work", "on", "this", "feature", "could", "you", "please", "guide", "how", "to", "do", "and", "where", "to", "do", "vkosuri", "I", "ll", "put", "together", "a", "ticket", "for", "it", "with", "more", "details", "NUMBER", "VanRH", "Nope", "I", "will", "be", "sure", "to", "design", "it", "so", "that", "it", "can", "work", "independently", "from", "the", "environment", "where", "the", "chat", "bot", "be", "be", "hosted", "NUMBER", "It", "be", "the", "bot", "that", "will", "be", "filling", "in", "the", "field", "for", "the", "form", "anyway", "NUMBER", "Issen", "NUMBER", "Thank", "you", "that", "would", "be", "greatly", "appreciated", "NUMBER", "Smilar", "issue", "with", "nltk", "unable", "to", "download", "punkt", "Build", "fail", "due", "to", "network", "issue", "unable", "to", "download", "nltk", "file", "i", "be", "going", "to", "restart", "the", "job", "hope", "this", "time", "it", "will", "green", "I", "be", "not", "sure", "why", "nltk", "not", "downloading", "english", "NUMBER", "pickle", "Similar", "issue", "LINK", "utokenizers", "punkt", "english", "pickle", "not", "find", "Bash", "Resource", "u", "tokenizers", "punkt", "english", "NUMBER", "pickle", "not", "find", "NUMBER", "Please", "use", "the", "NLTK", "Downloader", "to", "obtain", "the", "resource", "nltk", "NUMBER", "download", "Searched", "in", "home", "travis", "nltk_data", "usr", "share", "nltk_data", "usr", "local", "share", "nltk_data", "usr", "lib", "nltk_data", "usr", "local", "lib", "nltk_data", "u", "You", "can", "also", "specify", "file", "paths", "to", "corpus", "file", "or", "directories", "of", "corpus", "file", "when", "calling", "the", "train", "method", "NUMBER", "chatterbot", "NUMBER", "train", "NUMBER", "data", "greetings_corpus", "custom", "NUMBER", "corpus", "NUMBER", "json", "NUMBER", "data", "my_corpus", "What", "json", "format", "the", "corpus", "needed", "do", "you", "have", "an", "example", "for", "custom", "NUMBER", "corpus", "NUMBER", "json", "Fixed", "wit", "NUMBER", "I", "have", "NUMBER", "million", "conversation", "when", "train", "with", "ListTrainer", "it", "s", "slowly", "NUMBER", "how", "to", "speed", "up", "it", "NUMBER", "yep", "Does", "ChatterBot", "use", "processor", "or", "other", "multiple", "thread", "when", "training", "NUMBER", "from", "chatterbot", "NUMBER", "trainers", "import", "ListTrainer", "NUMBER", "chatbot", "NUMBER", "set_trainer", "ListTrainer", "trainingSet", "Hello", "Hi", "chatbot", "NUMBER", "train", "trainingSet", "chatbot", "NUMBER", "trainer", "NUMBER", "export_for_training", "NUMBER", "train_export", "NUMBER", "json", "gunthercox", "When", "I", "use", "SQLite", "as", "the", "storage", "adapter", "get", "this", "error", "Traceback", "most", "recent", "call", "last", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "line", "NUMBER", "in", "_session_finish", "session", "NUMBER", "commit", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "commit", "self", "NUMBER", "transaction", "NUMBER", "commit", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "commit", "self", "NUMBER", "_prepare_impl", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "_prepare_impl", "self", "NUMBER", "session", "NUMBER", "flush", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "flush", "self", "NUMBER", "_flush", "objects", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "_flush", "transaction", "NUMBER", "rollback", "_capture_exception", "True", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "util", "langhelpers", "NUMBER", "py", "line", "NUMBER", "in", "__exit__", "compat", "NUMBER", "reraise", "exc_type", "exc_value", "exc_tb", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "util", "compat", "NUMBER", "py", "line", "NUMBER", "in", "reraise", "raise", "value", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "_flush", "flush_context", "NUMBER", "execute", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "orm", "unitofwork", "NUMBER", "py", "line", "NUMBER", "in", "execute", "rec", "NUMBER", "execute", "self", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "orm", "unitofwork", "NUMBER", "py", "line", "NUMBER", "in", "execute", "uow", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "orm", "persistence", "NUMBER", "py", "line", "NUMBER", "in", "save_obj", "mapper", "table", "insert", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "orm", "persistence", "NUMBER", "py", "line", "NUMBER", "in", "_emit_insert_statements", "execute", "statement", "params", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "engine", "base", "NUMBER", "py", "line", "NUMBER", "in", "execute", "return", "meth", "self", "multiparams", "params", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "sql", "elements", "NUMBER", "py", "line", "NUMBER", "in", "_execute_on_connection", "return", "connection", "NUMBER", "_execute_clauseelement", "self", "multiparams", "params", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "engine", "base", "NUMBER", "py", "line", "NUMBER", "in", "_execute_clauseelement", "compiled_sql", "distilled_params", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "engine", "base", "NUMBER", "py", "line", "NUMBER", "in", "_execute_context", "context", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "engine", "base", "NUMBER", "py", "line", "NUMBER", "in", "_handle_dbapi_exception", "exc_info", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "util", "compat", "NUMBER", "py", "line", "NUMBER", "in", "raise_from_cause", "reraise", "type", "exception", "exception", "tb", "exc_tb", "cause", "cause", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "util", "compat", "NUMBER", "py", "line", "NUMBER", "in", "reraise", "raise", "value", "NUMBER", "with_traceback", "tb", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "engine", "base", "NUMBER", "py", "line", "NUMBER", "in", "_execute_context", "context", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "sqlalchemy", "engine", "default", "NUMBER", "py", "line", "NUMBER", "in", "do_execute", "cursor", "NUMBER", "execute", "statement", "parameters", "sqlalchemy", "NUMBER", "exc", "NUMBER", "IntegrityError", "sqlite", "NUMBER", "IntegrityError", "UNIQUE", "constraint", "fail", "ResponseTable", "NUMBER", "text", "ResponseTable", "NUMBER", "text_search", "SQL", "INSERT", "INTO", "ResponseTable", "id", "text", "occurrence", "statement_text", "text_search", "VALUES", "parameters", "None", "\u77eb\u60c5\u7239\u5939\u7684\u5973\u4eba\u6211\u8981\u6084\u6084\u5bf9\u4f60\u8bf4", "\u597d\u60f3\u4e00\u811a\u8e39\u6b7b\u4f60", "\u53ef\u7231", "NUMBER", "\u540c\u611f", "id", "null", "text", "u", "NUMBER", "eb", "u", "NUMBER", "c", "NUMBER", "u", "NUMBER", "u", "NUMBER", "u", "NUMBER", "u", "NUMBER", "u", "NUMBER", "eba", "u", "NUMBER", "u", "NUMBER", "u", "NUMBER", "u", "NUMBER", "u", "NUMBER", "bf", "NUMBER", "u", "NUMBER", "f", "NUMBER", "u", "NUMBER", "bf", "NUMBER", "u", "NUMBER", "d", "u", "NUMBER", "f", "NUMBER", "u", "NUMBER", "e", "NUMBER", "u", "NUMBER", "a", "u", "NUMBER", "e", "NUMBER", "u", "NUMBER", "b", "NUMBER", "b", "u", "NUMBER", "f", "NUMBER", "u", "NUMBER", "ef", "u", "NUMBER", "occurrence", "NUMBER", "statement_text", "u", "NUMBER", "c", "u", "NUMBER", "f", "None", "WildDylan", "Which", "version", "of", "chatterbot", "be", "you", "use", "I", "believe", "this", "error", "fix", "in", "LINK", "Could", "you", "please", "try", "to", "upgrade", "chatterbot", "to", "latest", "version", "to", "resolve", "this", "issue", "NUMBER", "Bash", "pip", "install", "upgrade", "chatterbot", "vkosuri", "Thx", "I", "upgrade", "it", "Fixed", "that", "problem", "NUMBER", "another", "question", "I", "need", "help", "how", "to", "speed", "up", "the", "get_response", "when", "I", "have", "NUMBER", "million", "corpus", "in", "my", "database", "There", "any", "many", "other", "workarounds", "you", "could", "do", "with", "this", "great", "project", "NUMBER", "Thanks", "to", "Master", "gunthercox", "made", "such", "a", "beautiful", "project", "NUMBER", "You", "could", "consider", "this", "be", "a", "workaround", "There", "be", "much", "more", "improvement", "on", "training", "and", "retrieval", "responses", "be", "in", "pipeline", "in", "upcoming", "release", "NUMBER", "Coming", "to", "speed", "up", "you", "could", "write", "your", "own", "training", "class", "LINK", "creating", "a", "new", "training", "class", "with", "list", "comprehension", "example", "be", "located", "in", "this", "PR", "LINK", "The", "reason", "this", "PR", "not", "consider", "into", "account", "due", "to", "lack", "of", "readability", "Okey", "I", "will", "give", "a", "try", "NUMBER", "I", "have", "use", "NUMBER", "million", "conversation", "to", "train", "this", "bot", "How", "to", "know", "list", "training", "progress", "let", "s", "do", "it", "NUMBER", "Thanks", "for", "invitation", "Some", "information", "about", "input", "and", "output", "adapters", "LINK", "The", "test", "be", "fail", "due", "to", "pep", "NUMBER", "issue", "NUMBER", "s", "flake", "NUMBER", "NUMBER", "chatterbot", "output", "hipchat", "NUMBER", "py", "NUMBER", "NUMBER", "E", "NUMBER", "too", "many", "blank", "lines", "NUMBER", "Achimh", "NUMBER", "Thanks", "for", "your", "interest", "NUMBER", "The", "test", "be", "fail", "due", "flake", "NUMBER", "issue", "Bash", "NUMBER", "s", "flake", "NUMBER", "NUMBER", "chatterbot", "chatterbot", "NUMBER", "py", "NUMBER", "NUMBER", "E", "NUMBER", "too", "many", "blank", "lines", "NUMBER", "The", "command", "flake", "NUMBER", "exited", "with", "NUMBER", "Closed", "by", "NUMBER", "nggary", "Chatterbot", "default", "storage", "adapter", "be", "SQLStorageAdapter", "NUMBER", "It", "uses", "database_uri", "to", "connect", "your", "database", "more", "information", "available", "here", "LINK", "sql", "alchemy", "storage", "adapter", "NUMBER", "If", "you", "want", "to", "know", "table", "properties", "use", "find", "statement_text", "LINK", "chatterbot", "NUMBER", "orage", "NUMBER", "SQLStorageAdapter", "NUMBER", "find", "procedure", "to", "check", "your", "statements", "be", "there", "or", "not", "Listade", "Could", "you", "please", "share", "your", "example", "code", "to", "debug", "further", "NUMBER", "Some", "references", "LINK", "query", "performance", "with", "indexes", "and", "projections", "prakhar", "NUMBER", "Yes", "could", "you", "provide", "usecase", "example", "how", "and", "what", "you", "be", "looking", "nggary", "we", "haven", "t", "add", "python", "NUMBER", "to", "travis", "NUMBER", "I", "think", "we", "have", "to", "add", "those", "gunthercox", "Master", "any", "comments", "add", "python", "NUMBER", "to", "travis", "nggary", "May", "be", "i", "think", "dateutil", "package", "won", "t", "come", "with", "python", "NUMBER", "could", "you", "please", "try", "to", "install", "dateutil", "use", "pip", "pip", "install", "python", "dateutil", "You", "have", "to", "write", "your", "own", "logic", "adapter", "to", "handle", "above", "scenario", "For", "more", "information", "about", "custom", "logic", "adapter", "will", "find", "here", "LINK", "a", "logic", "adapter", "NUMBER", "html", "NUMBER", "However", "an", "example", "code", "located", "in", "this", "issue", "comment", "LINK", "issuecomment", "NUMBER", "PrabinPC", "I", "be", "assuming", "you", "be", "trying", "use", "this", "example", "on", "fallowing", "details", "OS", "Linux", "Language", "Python", "Where", "to", "write", "the", "this", "section", "of", "code", "NUMBER", "Please", "kindly", "help", "me", "If", "want", "run", "your", "script", "here", "some", "of", "the", "steps", "i", "be", "trying", "to", "plot", "in", "Linux", "terminal", "NUMBER", "Activate", "virtual", "environment", "LINK", "guide", "pt", "br", "NUMBER", "readthedocs", "NUMBER", "io", "en", "latest", "dev", "virtualenvs", "NUMBER", "Install", "chatterbot", "use", "pip", "LINK", "installation", "NUMBER", "Open", "new", "file", "use", "your", "favorite", "editor", "LINK", "NUMBER", "Paste", "above", "example", "LINK", "basic", "usage", "NUMBER", "Run", "it", "use", "Python", "interpreter", "NUMBER", "Bash", "virtuenv", "venv", "source", "venv", "bin", "activate", "venv", "pip", "install", "upgrade", "chatterbot", "venv", "vi", "bot", "NUMBER", "py", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Ron", "Obvious", "wq", "venv", "python", "bot", "NUMBER", "py", "nggary", "Do", "i", "need", "to", "create", "a", "new", "logic", "adpater", "for", "this", "If", "so", "how", "to", "teach", "the", "bot", "to", "identify", "the", "currecny", "code", "name", "amount", "from", "input", "and", "match", "it", "with", "database", "NUMBER", "Yes", "here", "be", "an", "example", "of", "Mathematics", "Evaluation", "LINK", "_evaluation", "NUMBER", "py", "Second", "question", "be", "how", "to", "create", "corpus", "embedded", "with", "dynamic", "value", "from", "database", "NUMBER", "For", "example", "if", "i", "want", "to", "ask", "the", "bot", "about", "the", "open", "time", "of", "office", "You", "could", "find", "more", "information", "in", "this", "thread", "LINK", "Yes", "you", "can", "write", "use", "some", "type", "template", "mechanism", "here", "be", "an", "example", "i", "have", "write", "long", "back", "LINK", "issuecomment", "NUMBER", "amanvars", "Similar", "issue", "LINK", "Similar", "issue", "LINK", "anantbara", "might", "be", "this", "solution", "will", "work", "LINK", "issuecomment", "NUMBER", "gunthercox", "Master", "Looks", "good", "to", "me", "the", "above", "approach", "NUMBER", "I", "have", "few", "question", "on", "above", "process", "NUMBER", "If", "the", "entire", "corpus", "database", "has", "question", "and", "answers", "For", "example", "UbuntuCorpus", "NUMBER", "the", "above", "approach", "will", "improve", "request", "and", "response", "time", "how", "could", "be", "the", "approach", "such", "corpus", "models", "mymusise", "We", "be", "work", "on", "change", "that", "will", "prevent", "the", "full", "dataset", "from", "needing", "to", "be", "search", "each", "time", "a", "new", "input", "be", "received", "NUMBER", "NUMBER", "and", "NUMBER", "have", "further", "details", "on", "what", "change", "will", "be", "made", "NUMBER", "juanpialbano", "Currently", "there", "be", "no", "support", "on", "Java", "NUMBER", "However", "you", "could", "make", "other", "workarounds", "like", "Django", "integration", "LINK", "I", "thought", "this", "feature", "would", "be", "useful", "while", "creating", "pull", "request", "and", "issue", "NUMBER", "More", "information", "LINK", "issue", "and", "pull", "request", "template", "and", "LINK", "source", "template", "page", "NUMBER", "Some", "examples", "exists", "here", "LINK", "issue", "template", "gunthercox", "Master", "it", "seems", "to", "useful", "I", "ll", "create", "PR", "NUMBER", "Olagsfark", "Thank", "you", "NUMBER", "chatterbot_corpus", "will", "come", "through", "chatterbot", "requirements", "NUMBER", "Could", "you", "please", "try", "to", "do", "update", "chatterbot", "by", "use", "pip", "install", "upgrade", "chatterbot", "NUMBER", "Still", "if", "you", "be", "seeing", "same", "error", "message", "NUMBER", "Try", "to", "install", "chatterbot_corpus", "individually", "pip", "install", "upgrade", "chatterbot_corpus", "juanpialbano", "A", "detailed", "information", "available", "here", "LINK", "how", "chatterbot", "works", "However", "i", "would", "like", "add", "some", "information", "here", "on", "learning", "process", "NUMBER", "NUMBER", "Chatterbot", "be", "Retrieval", "Based", "Bot", "all", "retrieval", "based", "bot", "be", "uses", "some", "pre", "defined", "responses", "LINK", "Corpus", "Specification", "data", "representation", "schema", "NUMBER", "If", "you", "want", "you", "could", "look", "chatterbot", "multilingual", "dialog", "corpus", "LINK", "corpus", "tree", "master", "chatterbot_corpus", "data", "to", "get", "more", "families", "with", "chatterbot", "corpus", "NUMBER", "NUMBER", "After", "that", "you", "have", "to", "train", "LINK", "training", "your", "chatbot", "your", "bot", "NUMBER", "NUMBER", "The", "training", "process", "LINK", "training", "stores", "all", "statements", "LINK", "statements", "and", "responses", "LINK", "responses", "into", "a", "specified", "database", "LINK", "storage", "adapters", "NUMBER", "NUMBER", "And", "also", "form", "a", "statement", "response", "relationship", "LINK", "statement", "response", "relationship", "NUMBER", "When", "ever", "user", "inputs", "statements", "the", "response", "selection", "process", "uses", "some", "logic", "adapters", "LINK", "to", "select", "proper", "response", "by", "compare", "LINK", "statement", "comparison", "each", "statement", "with", "inputted", "statement", "NUMBER", "Please", "let", "me", "know", "if", "you", "be", "still", "looking", "any", "more", "information", "NUMBER", "juanpialbano", "Thanks", "for", "your", "inputs", "we", "will", "improve", "that", "phase", "When", "the", "Chabot", "makes", "a", "response", "it", "stores", "the", "request", "response", "in", "the", "database", "for", "future", "queries", "Yes", "How", "do", "he", "know", "if", "a", "request", "response", "was", "right", "o", "wrong", "so", "he", "can", "use", "it", "in", "the", "future", "Using", "Response", "selection", "methods", "LINK", "_selection", "NUMBER", "html", "module", "chatterbot", "NUMBER", "response_selection", "Let", "me", "know", "if", "you", "need", "any", "further", "help", "harshalgaydhankar", "which", "version", "of", "chatterbot", "version", "be", "you", "use", "currently", "To", "know", "current", "version", "chatterbot", "use", "below", "command", "NUMBER", "Bassh", "python", "m", "chatterbot", "version", "If", "you", "be", "unable", "to", "get", "chatterbot", "version", "try", "to", "install", "chatterbot", "by", "use", "this", "command", "NUMBER", "If", "you", "get", "any", "permission", "relate", "error", "try", "to", "append", "sudo", "before", "pip", "if", "you", "be", "use", "Linux", "Ubuntu", "Platforms", "NUMBER", "Bash", "pip", "install", "upgrade", "chatterbot", "I", "be", "unable", "to", "figure", "your", "issue", "how", "be", "you", "installing", "upgrading", "chatterbot", "through", "virtual", "enviroment", "or", "system", "level", "Your", "were", "in", "current", "chatterbot", "installation", "directory", "could", "you", "try", "relative", "import", "like", "below", "Python", "from", "NUMBER", "chatterbot", "import", "ChatBot", "More", "information", "available", "here", "LINK", "in", "import", "statement", "python", "NUMBER", "Thanks", "shashwatbhatt", "Another", "guess", "could", "be", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "be", "not", "in", "system", "path", "NUMBER", "To", "know", "system", "path", "try", "below", "commands", "NUMBER", "If", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "not", "add", "to", "python", "path", "please", "add", "it", "in", "windows", "system", "environment", "variables", "LINK", "to", "add", "to", "the", "pythonpath", "in", "windows", "NUMBER", "NUMBER", "Python", "import", "sys", "print", "sys", "NUMBER", "path", "I", "be", "sorry", "i", "be", "unable", "to", "figure", "it", "your", "issue", "on", "my", "machine", "with", "python", "NUMBER", "I", "see", "these", "type", "issue", "if", "you", "have", "multiple", "variants", "of", "pythons", "install", "in", "your", "machine", "NUMBER", "Do", "you", "have", "multiple", "variants", "of", "pythons", "be", "install", "in", "your", "machine", "Makefiles", "be", "a", "simple", "way", "to", "organize", "code", "compilation", "on", "Linux", "platforms", "NUMBER", "Ref", "Issue", "LINK", "gunthercox", "Master", "comments", "suggestion", "on", "this", "PR", "gunthercox", "any", "comments", "suggestions", "gunthercox", "Master", "any", "comments", "suggestion", "I", "think", "having", "this", "example", "would", "be", "useful", "Ref", "LINK", "davizucon", "My", "views", "be", "like", "this", "NUMBER", "Yes", "you", "could", "truly", "achieve", "this", "task", "but", "applying", "some", "hacks", "on", "chatterbot", "NUMBER", "You", "have", "to", "prepare", "a", "your", "train", "data", "with", "some", "external", "input", "event", "methods", "for", "example", "external", "REST", "API", "calls", "NUMBER", "There", "be", "many", "open", "external", "event", "generators", "be", "available", "open", "NUMBER", "For", "example", "Google", "Microsoft", "etc", "NUMBER", "Related", "issue", "LINK", "I", "have", "describe", "this", "issue", "through", "an", "example", "NUMBER", "Python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "Create", "a", "new", "instance", "of", "a", "ChatBot", "bot", "ChatBot", "Action", "or", "Intent", "Response", "Example", "Bot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "SqlStorageAdapter", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "statement_comparison_function", "chatterbot", "NUMBER", "comparisons", "NUMBER", "jaccard_similarity", "response_selection_method", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_first_response", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "SpecificResponseAdapter", "input_text", "Help", "me", "output_text", "Ok", "here", "be", "a", "link", "LINK", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ListTrainer", "Train", "the", "chat", "bot", "with", "a", "few", "responses", "bot", "NUMBER", "train", "Current", "weather", "in", "London", "LINK", "London", "uk", "appid", "b", "NUMBER", "b", "NUMBER", "e", "NUMBER", "fa", "NUMBER", "c", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "Have", "you", "read", "the", "documentation", "No", "I", "have", "not", "This", "should", "help", "get", "you", "start", "LINK", "Get", "a", "response", "from", "bot", "response", "bot", "NUMBER", "get_response", "weather", "in", "London", "Handle", "JSON", "data", "get", "all", "required", "data", "and", "print", "them", "print", "response", "davizucon", "I", "think", "the", "specified", "information", "be", "sufficient", "I", "be", "closing", "off", "this", "issue", "please", "feel", "free", "reopen", "if", "you", "have", "any", "specific", "question", "on", "this", "issue", "NUMBER", "With", "Referencing", "pull", "request", "comment", "LINK", "discussion_r", "NUMBER", "Yes", "I", "agree", "with", "gunthercox", "comment", "readability", "eyes", "be", "very", "important", "it", "will", "gives", "us", "many", "advantages", "for", "example", "Catching", "issue", "will", "be", "very", "easier", "and", "new", "develop", "integration", "will", "become", "very", "easier", "NUMBER", "Etc", "NUMBER", "Yes", "sometime", "it", "be", "necessary", "to", "pick", "response", "also", "With", "some", "hacks", "the", "below", "formats", "be", "looking", "good", "to", "me", "the", "method", "i", "named", "it", "here", "arrow_heading_up", "Bottom", "to", "top", "approach", "for", "list", "comprehension", "will", "provide", "more", "readability", "eyes", "I", "did", "some", "exercise", "on", "some", "examples", "please", "provide", "your", "comments", "suggestion", "on", "this", "NUMBER", "Python", "Find", "the", "closest", "matching", "know", "statement", "for", "statement", "in", "statement_list", "confidence", "self", "NUMBER", "compare_statements", "input_statement", "statement", "if", "confidence", "closest_match", "NUMBER", "confidence", "statement", "NUMBER", "confidence", "confidence", "closest_match", "statement", "vs", "Python", "The", "bottom", "to", "top", "approach", "for", "list", "comprehension", "gives", "more", "readability", "closest_match_and_confidence", "statement", "self", "NUMBER", "compare_statements", "input_statement", "statement", "for", "statement", "in", "statement_list", "Some", "more", "examples", "Python", "for", "statement", "in", "statement_list", "for", "response", "in", "statement", "NUMBER", "in_response_to", "responses", "NUMBER", "add", "response", "NUMBER", "text", "vs", "Python", "The", "bottom", "down", "approach", "for", "list", "comprehension", "gives", "more", "readability", "responses", "NUMBER", "add", "response", "NUMBER", "text", "for", "statement", "in", "statement_list", "for", "response", "in", "statement", "NUMBER", "in_response_to", "If", "it", "be", "looks", "good", "I", "ll", "try", "to", "make", "a", "PR", "which", "discussed", "here", "LINK", "It", "be", "fail", "at", "Traceback", "most", "recent", "call", "last", "File", "home", "travis", "build", "gunthercox", "ChatterBot", "tests_django", "test_django_adapter", "NUMBER", "py", "line", "NUMBER", "in", "test_confidence", "self", "NUMBER", "assertEqual", "statement_updated", "NUMBER", "confidence", "NUMBER", "AttributeError", "Statement", "object", "has", "no", "attribute", "confidence", "bilalbayasut", "Any", "further", "update", "neopedro", "Try", "to", "add", "encoding", "header", "to", "your", "source", "file", "NUMBER", "for", "example", "code", "utf", "NUMBER", "NUMBER", "If", "you", "share", "stack", "trace", "of", "what", "you", "have", "encountered", "error", "to", "debug", "further", "NUMBER", "neopedro", "I", "think", "you", "want", "statement", "NUMBER", "text", "this", "be", "the", "string", "value", "of", "the", "statement", "NUMBER", "It", "seems", "to", "me", "that", "you", "transfer", "your", "request", "from", "a", "web", "server", "to", "chatterbot", "NUMBER", "This", "might", "converted", "your", "statmenet", "object", "into", "a", "string", "If", "possible", "could", "you", "try", "to", "run", "your", "code", "stand", "alone", "before", "integrated", "into", "webserver", "If", "possible", "I", "ll", "will", "help", "you", "if", "you", "could", "share", "your", "server", "code", "learn_response", "accepts", "statement", "object", "but", "you", "be", "passing", "strings", "try", "to", "look", "feedback", "example", "once", "again", "for", "more", "information", "I", "be", "closing", "this", "issue", "feel", "free", "to", "reopen", "if", "you", "have", "any", "question", "This", "pipeline", "could", "be", "better", "describe", "NUMBER", "This", "be", "something", "I", "was", "thinking", "of", "tackling", "NUMBER", "However", "I", "would", "not", "be", "oppose", "to", "it", "if", "anyone", "wanted", "to", "submit", "a", "pull", "request", "or", "even", "just", "make", "suggestions", "NUMBER", "This", "be", "primarily", "going", "to", "be", "closer", "to", "the", "code", "perspective", "possibly", "not", "mentioning", "any", "specific", "adapters", "NUMBER", "My", "goal", "be", "to", "go", "through", "the", "code", "and", "outline", "some", "useful", "implementation", "details", "such", "as", "what", "order", "various", "method", "be", "call", "in", "and", "when", "initialization", "occur", "for", "different", "types", "of", "classes", "NUMBER", "Hi", "sanyam", "NUMBER", "have", "the", "required", "NLTK", "file", "be", "downloaded", "to", "your", "local", "server", "have", "the", "required", "NLTK", "file", "be", "downloaded", "to", "your", "local", "server", "It", "means", "the", "chatterbot", "run", "machine", "in", "your", "case", "your", "NLTK", "downloaded", "machine", "NUMBER", "Try", "to", "do", "fallowing", "steps", "Bash", "import", "nltk", "print", "nltk", "NUMBER", "data", "NUMBER", "path", "Check", "the", "file", "be", "copied", "into", "specified", "above", "directory", "or", "not", "NUMBER", "If", "file", "be", "there", "then", "it", "should", "work", "even", "after", "also", "you", "be", "get", "same", "error", "try", "to", "download", "all", "corpus", "file", "Bash", "python", "NUMBER", "import", "nltk", "nltk", "NUMBER", "download", "all", "your", "home", "dir", "i", "NUMBER", "e", "Users", "yuvikakoul", "nltk_data", "sanyam", "NUMBER", "Remove", "the", "file", "it", "contains", "NUMBER", "They", "will", "be", "re", "downloaded", "hopefully", "without", "error", "this", "time", "automatically", "by", "ChatterBot", "NUMBER", "Now", "that", "the", "SQL", "adapter", "be", "fully", "work", "it", "should", "be", "safe", "to", "add", "documentation", "on", "it", "so", "that", "other", "developers", "can", "learn", "about", "it", "and", "use", "it", "for", "their", "projects", "NUMBER", "Thank", "you", "very", "much", "NUMBER", "Hi", "Barathwaja", "it", "looks", "like", "the", "data", "you", "downloaded", "isn", "t", "in", "a", "format", "that", "ChatterBot", "can", "read", "NUMBER", "You", "can", "still", "use", "this", "data", "but", "you", "will", "need", "to", "find", "a", "way", "to", "convert", "it", "to", "match", "the", "format", "that", "ChatterBot", "s", "training", "classes", "expect", "NUMBER", "Here", "be", "a", "short", "example", "of", "the", "format", "that", "ChatterBot", "expects", "it", "s", "corpus", "data", "to", "be", "in", "json", "conversations", "Good", "morning", "how", "be", "you", "I", "be", "doing", "well", "how", "about", "you", "I", "m", "also", "good", "NUMBER", "That", "s", "good", "to", "hear", "NUMBER", "Yes", "it", "be", "NUMBER", "How", "be", "you", "doing", "I", "be", "doing", "well", "how", "about", "you", "I", "be", "also", "good", "NUMBER", "That", "s", "good", "NUMBER", "Have", "you", "heard", "the", "news", "What", "good", "news", "What", "be", "your", "favorite", "book", "I", "can", "t", "read", "NUMBER", "So", "what", "s", "your", "favorite", "color", "Blue", "There", "be", "more", "information", "on", "the", "current", "set", "of", "available", "corpus", "trainers", "for", "ChatterBot", "in", "the", "documentation", "LINK", "You", "could", "always", "write", "your", "own", "training", "class", "that", "takes", "the", "planetary", "data", "file", "directly", "NUMBER", "Sure", "maybe", "an", "example", "would", "help", "This", "be", "what", "the", "corpus", "trainer", "that", "be", "currently", "use", "looks", "like", "NUMBER", "It", "takes", "each", "conversation", "that", "be", "listed", "in", "the", "corpus", "and", "add", "it", "to", "the", "bot", "s", "knowledge", "base", "NUMBER", "Each", "conversation", "in", "the", "training", "data", "be", "a", "series", "of", "statements", "where", "each", "statement", "be", "a", "response", "to", "the", "previous", "one", "NUMBER", "You", "would", "probably", "want", "to", "make", "modifications", "so", "that", "your", "version", "converts", "the", "planetary", "data", "into", "sentence", "like", "data", "so", "that", "the", "chat", "bot", "s", "responses", "sound", "natural", "NUMBER", "python", "LINK", "from", "chatterbot", "NUMBER", "trainers", "import", "Trainer", "class", "ChatterBotCorpusTrainer", "Trainer", "Allows", "the", "chat", "bot", "to", "be", "trained", "use", "data", "from", "the", "ChatterBot", "dialog", "corpus", "NUMBER", "def", "__init__", "self", "storage", "kwargs", "super", "ChatterBotCorpusTrainer", "self", "NUMBER", "__init__", "storage", "kwargs", "from", "NUMBER", "corpus", "import", "Corpus", "self", "NUMBER", "corpus", "Corpus", "def", "train", "self", "corpora", "trainer", "ListTrainer", "self", "NUMBER", "orage", "Allow", "a", "list", "of", "corpora", "to", "be", "pass", "instead", "of", "argument", "if", "len", "corpora", "NUMBER", "if", "isinstance", "corpora", "NUMBER", "list", "corpora", "corpora", "NUMBER", "Train", "the", "chat", "bot", "with", "each", "statement", "and", "response", "pair", "for", "corpus", "in", "corpora", "corpus_data", "self", "NUMBER", "corpus", "NUMBER", "load_corpus", "corpus", "for", "data", "in", "corpus_data", "for", "pair", "in", "data", "trainer", "NUMBER", "train", "pair", "I", "be", "use", "only", "cProfile", "you", "could", "try", "like", "this", "Bash", "python", "m", "cProfile", "o", "output_file", "NUMBER", "log", "examples", "terminal_example", "NUMBER", "py", "A", "development", "spike", "should", "be", "do", "to", "experiment", "with", "the", "idea", "that", "not", "all", "storage", "adapters", "need", "to", "support", "the", "extra_data", "parameter", "for", "statements", "NUMBER", "This", "parameter", "be", "easy", "to", "support", "for", "no", "sql", "databases", "but", "it", "be", "difficult", "to", "implement", "for", "sql", "based", "databases", "NUMBER", "I", "m", "assigning", "myself", "to", "complete", "this", "research", "NUMBER", "Depending", "on", "what", "I", "find", "regard", "the", "feasibility", "of", "implement", "this", "I", "will", "either", "create", "a", "pull", "request", "with", "the", "necessary", "change", "or", "I", "will", "close", "this", "ticket", "noting", "the", "reasons", "why", "it", "was", "not", "the", "path", "to", "follow", "NUMBER", "Even", "after", "gabru", "md", "suggestion", "didn", "t", "worked", "try", "to", "pip", "install", "chatterbot", "If", "it", "be", "Linux", "flavor", "try", "to", "sudo", "pip", "install", "chatterbot", "sal", "NUMBER", "Great", "resolving", "your", "issue", "if", "possible", "could", "you", "make", "a", "PR", "to", "solve", "this", "issue", "Hi", "sal", "NUMBER", "I", "can", "confirm", "the", "issue", "that", "you", "encountered", "NUMBER", "NUMBER", "in", "__init__", "room_data", "self", "NUMBER", "join_room", "self", "NUMBER", "gitter_room", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "input", "gitter", "NUMBER", "py", "line", "NUMBER", "in", "join_room", "self", "NUMBER", "_validate_status_code", "response", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "input", "gitter", "NUMBER", "py", "line", "NUMBER", "in", "_validate_status_code", "raise", "self", "NUMBER", "HTTPStatusException", "status", "code", "recieved", "NUMBER", "format", "code", "chatterbot", "NUMBER", "input", "NUMBER", "gitter", "NUMBER", "HTTPStatusException", "u", "NUMBER", "status", "code", "recieved", "AmusingThrone", "Yes", "The", "corpus", "file", "be", "located", "here", "LINK", "corpus", "tree", "master", "chatterbot_corpus", "data", "I", "be", "closing", "off", "this", "issue", "it", "was", "address", "here", "LINK", "corpus", "pull", "NUMBER", "saraalosaid", "any", "update", "about", "this", "issue", "decode", "NUMBER", "Current", "chatterbot", "support", "only", "simple", "JSON", "NUMBER", "JSON", "converstation", "statement", "response", "By", "looking", "your", "JSON", "response", "you", "could", "write", "your", "own", "trainer", "class", "by", "extending", "base", "Train", "LINK", "L", "NUMBER", "class", "and", "override", "it", "member", "train", "LINK", "L", "NUMBER", "function", "for", "example", "UbuntuCorpus", "LINK", "L", "NUMBER", "Add", "addition", "details", "use", "add_extra", "LINK", "L", "NUMBER", "statement", "object", "More", "information", "about", "we", "could", "find", "here", "statement", "LINK", "extra_data", "statements", "decode", "NUMBER", "I", "be", "closing", "this", "issue", "Feel", "free", "reopen", "this", "issue", "if", "you", "have", "any", "question", "NUMBER", "decode", "NUMBER", "I", "think", "you", "have", "to", "write", "you", "own", "logic", "adapter", "based", "on", "your", "question", "more", "information", "about", "how", "to", "write", "a", "new", "logic", "adapter", "documented", "here", "LINK", "a", "logic", "adapter", "NUMBER", "html", "decode", "NUMBER", "I", "be", "closing", "off", "this", "issue", "Still", "your", "problem", "isn", "t", "resolve", "please", "feel", "free", "to", "reopen", "this", "issue", "NUMBER", "NUMBER", "Neural", "networks", "heavy_multiplication_x", "NUMBER", "ML", "heavy_check_mark", "NUMBER", "Deep", "learning", "heavy_multiplication_x", "NUMBER", "just", "some", "rule", "based", "string", "distance", "levenshtein", "distance", "methodologies", "heavy_check_mark", "NUMBER", "contextual", "heavy_check_mark", "I", "m", "assigning", "this", "task", "to", "my", "self", "to", "make", "sure", "that", "the", "documentation", "on", "training", "chat", "bots", "under", "Django", "configurations", "be", "clear", "and", "concise", "NUMBER", "MYZ", "NUMBER", "could", "you", "please", "let", "us", "know", "what", "change", "you", "did", "make", "it", "work", "I", "think", "it", "can", "help", "improve", "more", "documentation", "I", "haven", "t", "start", "work", "on", "this", "yet", "NUMBER", "Any", "feedback", "regard", "the", "current", "documentation", "and", "any", "unclear", "parts", "of", "it", "would", "be", "useful", "NUMBER", "Master", "I", "see", "many", "users", "be", "use", "anaconda", "for", "development", "production", "environments", "NUMBER", "I", "think", "add", "anaconda", "conda", "to", "Travis", "will", "give", "a", "value", "add", "NUMBER", "For", "more", "information", "LINK", "If", "it", "be", "ok", "can", "i", "make", "a", "PR", "Feel", "free", "to", "make", "a", "pull", "request", "NUMBER", "I", "m", "not", "sure", "if", "all", "test", "will", "pass", "at", "first", "there", "seems", "to", "be", "some", "odd", "differences", "between", "normal", "Python", "installations", "and", "Anaconda", "setups", "NUMBER", "Thanks", "Master", "i", "ll", "post", "my", "observations", "along", "with", "pull", "change", "Hi", "lucas", "alberto", "NUMBER", "I", "have", "seen", "this", "error", "report", "several", "times", "NUMBER", "It", "be", "cause", "by", "a", "broken", "NLTK", "data", "download", "NUMBER", "This", "problem", "can", "be", "fix", "if", "you", "remove", "the", "NLTK", "corpus", "file", "that", "get", "automatically", "downloaded", "NUMBER", "The", "folder", "you", "want", "to", "delete", "be", "call", "nltk_data", "NUMBER", "It", "be", "created", "automatically", "by", "the", "NLTK", "Python", "library", "NUMBER", "Usually", "nltk_data", "can", "be", "find", "in", "your", "home", "directory", "although", "it", "can", "be", "different", "depending", "on", "what", "operate", "system", "you", "have", "NUMBER", "I", "think", "the", "last", "line", "of", "this", "stack", "trace", "might", "be", "the", "best", "clue", "as", "to", "what", "be", "going", "wrong", "NUMBER", "PermissionError", "Errno", "NUMBER", "Permission", "denied", "database", "NUMBER", "db", "For", "some", "reason", "ChatterBot", "can", "t", "create", "a", "new", "database", "file", "in", "whatever", "directory", "the", "chat", "bot", "be", "be", "executed", "in", "NUMBER", "The", "reason", "as", "specified", "in", "the", "stack", "trace", "be", "that", "it", "doesn", "t", "have", "permission", "to", "do", "this", "NUMBER", "One", "way", "you", "may", "be", "able", "to", "fix", "this", "be", "to", "create", "a", "new", "file", "call", "database", "NUMBER", "db", "in", "the", "directory", "that", "you", "want", "to", "execute", "your", "chat", "bot", "from", "NUMBER", "Apologies", "I", "don", "t", "understand", "Chinese", "language", "could", "you", "please", "elaborated", "in", "English", "Please", "correct", "me", "if", "I", "m", "wrong", "NUMBER", "I", "want", "to", "try", "to", "paraphrase", "the", "problem", "you", "be", "describing", "to", "make", "sure", "that", "I", "understand", "it", "NUMBER", "Your", "chat", "bot", "always", "returns", "the", "same", "output", "regardless", "of", "what", "input", "it", "receives", "NUMBER", "Am", "I", "correct", "Air", "boy", "Is", "it", "possible", "that", "the", "response", "be", "be", "given", "on", "every", "input", "because", "there", "isn", "t", "another", "alternative", "for", "the", "chat", "bot", "to", "respond", "with", "Air", "boy", "I", "apologize", "I", "don", "t", "think", "I", "fully", "understand", "what", "you", "be", "ask", "NUMBER", "Air", "boy", "I", "apologies", "I", "have", "modify", "your", "post", "to", "understand", "more", "From", "your", "question", "i", "understood", "like", "this", "correct", "me", "if", "i", "be", "wrong", "NUMBER", "The", "RepetitiveResponseFilter", "LINK", "RepetitiveResponseFilter", "isn", "t", "work", "as", "expected", "then", "you", "have", "write", "your", "own", "filters", "be", "this", "correct", "You", "be", "suggesting", "here", "If", "you", "use", "RepetitiveResponseFilter", "LINK", "RepetitiveResponseFilter", "the", "response", "should", "be", "corresponding", "statement", "only", "in", "your", "corpus", "file", "even", "if", "you", "have", "tried", "n", "number", "times", "that", "should", "not", "change", "this", "be", "correct", "If", "you", "feel", "it", "be", "a", "bug", "please", "submit", "a", "PR", "Hope", "this", "will", "help", "Python", "chatterbot", "ChatBot", "chatterbot", "response_selection_method", "get_random_response", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "OhNo", "database", "Chat_Questions", "MYZ", "NUMBER", "The", "solution", "suggested", "by", "vkosuri", "be", "accurate", "NUMBER", "You", "just", "need", "to", "modify", "your", "Django", "settings", "to", "follow", "a", "the", "parameter", "pattern", "NUMBER", "For", "example", "your", "Django", "settings", "might", "look", "like", "this", "python", "CHATTERBOT", "name", "Django", "ChatterBot", "Example", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "OhNo", "I", "think", "the", "current", "version", "of", "chatterbot", "do", "support", "this", "feature", "NUMBER", "Hi", "Cosmos", "NUMBER", "I", "don", "t", "believe", "an", "example", "for", "this", "has", "be", "include", "NUMBER", "You", "can", "do", "this", "by", "passing", "a", "unique", "identifier", "to", "the", "chat", "bot", "when", "get", "a", "response", "NUMBER", "For", "example", "python", "unique_id", "something_unique", "chatbot", "NUMBER", "get_response", "user_input", "unique_id", "Let", "me", "know", "if", "you", "have", "any", "question", "or", "if", "there", "be", "anything", "you", "I", "clarify", "NUMBER", "Cosmos", "NUMBER", "because", "there", "be", "no", "session", "with", "your", "unique_id", "instead", "you", "could", "try", "to", "create", "a", "separate", "session", "for", "conversation", "I", "think", "this", "line", "will", "help", "how", "to", "create", "sessions", "LINK", "L", "NUMBER", "Cosmos", "NUMBER", "I", "think", "if", "you", "specific", "question", "about", "how", "to", "do", "this", "please", "post", "your", "question", "in", "stack", "overflow", "LINK", "with", "LINK", "tag", "hope", "you", "will", "get", "more", "responses", "NUMBER", "Instead", "ask", "question", "here", "make", "use", "of", "stack", "overflow", "this", "issue", "tracker", "be", "meant", "only", "for", "Chatterbot", "issue", "NUMBER", "gunthercox", "Any", "inputs", "Cosmos", "NUMBER", "You", "don", "t", "need", "to", "worry", "about", "re", "posting", "your", "question", "on", "Stack", "Overflow", "NUMBER", "You", "have", "already", "asked", "it", "here", "and", "I", "will", "make", "sure", "that", "it", "gets", "answered", "if", "possible", "NUMBER", "There", "be", "actually", "an", "exist", "example", "that", "be", "use", "in", "ChatterBot", "s", "codebase", "NUMBER", "In", "one", "of", "the", "default", "Django", "views", "typically", "only", "use", "when", "one", "be", "use", "ChatterBot", "with", "Django", "a", "new", "session", "be", "created", "for", "different", "users", "that", "visit", "the", "site", "NUMBER", "I", "believe", "the", "code", "from", "the", "view", "may", "provide", "an", "additional", "example", "that", "would", "be", "helpful", "NUMBER", "LINK", "_chatterbot", "views", "NUMBER", "py", "I", "believe", "the", "error", "that", "you", "be", "encountering", "be", "because", "a", "session", "id", "needs", "to", "be", "created", "by", "the", "chat", "bot", "before", "it", "can", "be", "use", "NUMBER", "You", "can", "create", "a", "new", "session", "like", "this", "python", "chat_session", "self", "NUMBER", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "new", "Then", "if", "you", "save", "the", "session", "somewhere", "you", "can", "use", "the", "id", "later", "when", "you", "need", "to", "access", "it", "again", "like", "this", "python", "response", "chatbot", "NUMBER", "get_response", "input_data", "chat_session", "NUMBER", "id_string", "Its", "python", "request", "error", "instead", "I", "ll", "try", "make", "a", "PR", "to", "download", "Ubuntu", "corpus", "file", "peterel", "I", "be", "busy", "with", "my", "other", "tasks", "If", "possible", "could", "you", "make", "a", "PR", "iamhssingh", "Thanks", "I", "be", "very", "new", "to", "Aragon", "DB", "LINK", "I", "have", "few", "question", "on", "this", "Now", "I", "be", "thinking", "to", "create", "edges", "and", "graphs", "NUMBER", "This", "will", "boost", "the", "speed", "to", "get", "statement", "significantly", "NUMBER", "How", "do", "that", "sound", "as", "a", "feature", "Does", "this", "feature", "has", "capable", "to", "know", "prior", "graphs", "information", "NUMBER", "for", "example", "User", "Hey", "Give", "me", "some", "milk", "Bot", "no", "you", "have", "to", "purchase", "a", "token", "before", "iamhssingh", "sure", "thanks", "and", "documentation", "possible", "I", "be", "closing", "this", "issue", "Updated", "in", "PR", "LINK", "Its", "pep", "NUMBER", "failure", "at", "chatterbot", "storage", "arangodb", "NUMBER", "py", "NUMBER", "NUMBER", "W", "NUMBER", "line", "break", "before", "binary", "operator", "It", "seems", "to", "me", "a", "network", "issue", "i", "have", "restarted", "the", "job", "again", "hope", "it", "will", "pass", "see", "this", "example", "LINK", "_adapter_tests", "test_mongo_adapter", "NUMBER", "py", "iamhssingh", "so", "far", "looks", "good", "to", "me", "I", "never", "use", "aragon", "db", "i", "need", "to", "try", "something", "on", "machine", "to", "explore", "more", "I", "feel", "gunthercox", "needs", "review", "this", "PR", "gunthercox", "Master", "any", "comments", "I", "ll", "total", "agree", "with", "gunthercox", "This", "could", "help", "you", "LINK", "a", "storage", "adapter", "NUMBER", "html", "LINK", "a", "pull", "request", "dekken", "NUMBER", "Currently", "chatterbot", "uses", "json", "file", "NUMBER", "You", "have", "two", "lists", "of", "data", "right", "one", "for", "question", "and", "one", "for", "answer", "one", "question", "relate", "to", "your", "question", "Is", "your", "question", "and", "answers", "be", "in", "same", "ordered", "lists", "If", "so", "you", "could", "use", "zip", "LINK", "zip", "to", "combine", "your", "lists", "and", "train", "your", "bot", "If", "not", "if", "possible", "could", "you", "share", "example", "train", "data", "Yes", "You", "could", "write", "your", "own", "class", "by", "extending", "Train", "class", "train", "method", "LINK", "L", "NUMBER", "No", "I", "checked", "it", "be", "work", "as", "expected", "NUMBER", "Could", "you", "please", "let", "me", "how", "you", "be", "Inputted", "your", "inputs", "nonlin", "could", "you", "place", "your", "solution", "It", "helps", "others", "NUMBER", "I", "m", "going", "to", "close", "this", "ticket", "off", "NUMBER", "vkosuri", "be", "correct", "ChatterBot", "uses", "NLTK", "for", "natural", "language", "processing", "NLP", "NUMBER", "This", "functionality", "isn", "t", "currently", "support", "NUMBER", "Do", "you", "have", "an", "example", "use", "case", "for", "when", "this", "would", "be", "needed", "ChatterBot", "support", "the", "ability", "for", "you", "to", "add", "your", "own", "LINK", "a", "storage", "adapter", "NUMBER", "html", "storage", "adapters", "to", "connect", "to", "databases", "as", "you", "see", "fit", "NUMBER", "You", "be", "welcome", "to", "modify", "the", "exist", "storage", "adapter", "for", "Mongo", "DB", "LINK", "to", "switch", "databases", "depending", "on", "the", "request", "content", "NUMBER", "Right", "now", "this", "isn", "t", "a", "feature", "that", "has", "be", "commonly", "request", "in", "ChatterBot", "and", "I", "m", "not", "sure", "that", "I", "can", "justify", "add", "this", "functionality", "to", "the", "project", "NUMBER", "Luckily", "the", "flexibility", "to", "create", "custom", "storage", "adapters", "do", "exist", "and", "I", "hope", "that", "it", "will", "provide", "enough", "functionality", "for", "you", "to", "accomplish", "what", "you", "need", "NUMBER", "I", "can", "t", "seem", "to", "recreate", "this", "error", "on", "my", "system", "NUMBER", "If", "anyone", "can", "create", "a", "training", "test", "case", "that", "fail", "when", "it", "should", "pass", "for", "this", "data", "it", "would", "help", "to", "resolve", "the", "error", "NUMBER", "Until", "then", "there", "isn", "t", "much", "I", "can", "do", "because", "I", "don", "t", "have", "a", "way", "to", "test", "or", "recreate", "this", "NUMBER", "lashkarpalash", "What", "version", "of", "ChatterBot", "did", "you", "encounter", "this", "issue", "with", "current", "chatterbot", "version", "be", "NUMBER", "could", "you", "try", "to", "upgrade", "to", "latest", "version", "and", "let", "me", "know", "pip", "install", "upgrade", "chatterbot", "gabru", "md", "It", "can", "be", "do", "NUMBER", "Responses", "can", "be", "update", "directly", "in", "the", "database", "no", "utility", "methods", "have", "be", "add", "for", "doing", "this", "NUMBER", "Do", "you", "have", "any", "recommendations", "for", "what", "would", "be", "useful", "to", "provide", "for", "correcting", "incorrect", "responses", "Given", "sanyam", "NUMBER", "s", "answer", "I", "be", "going", "to", "close", "this", "off", "NUMBER", "ChatterBot", "be", "a", "learning", "based", "chat", "bot", "and", "the", "example", "above", "show", "a", "good", "example", "of", "how", "to", "get", "additional", "information", "from", "the", "user", "to", "teach", "the", "chat", "bot", "with", "NUMBER", "It", "currently", "do", "not", "support", "queries", "but", "it", "will", "in", "the", "future", "NUMBER", "Hi", "ralic", "thank", "you", "for", "this", "pull", "request", "NUMBER", "It", "look", "like", "the", "tool", "you", "use", "made", "a", "number", "of", "change", "that", "actually", "break", "ChatterBot", "in", "both", "Python", "NUMBER", "and", "NUMBER", "Did", "you", "encounter", "any", "error", "in", "Python", "NUMBER", "that", "motivated", "these", "change", "ChatterBot", "designed", "to", "be", "compatible", "with", "both", "Python", "NUMBER", "and", "NUMBER", "and", "it", "has", "continuous", "integration", "that", "helps", "ensure", "this", "LINK", "ci", "NUMBER", "org", "gunthercox", "ChatterBot", "however", "there", "be", "always", "a", "chance", "that", "something", "was", "miss", "in", "due", "to", "an", "oversight", "in", "the", "test", "cases", "telkomops", "I", "m", "work", "on", "a", "solution", "that", "involves", "caching", "and", "additional", "filtering", "NUMBER", "The", "solution", "to", "this", "issue", "likely", "wont", "be", "available", "until", "the", "next", "major", "release", "of", "ChatterBot", "NUMBER", "dyf", "NUMBER", "Database", "level", "caching", "be", "a", "good", "start", "NUMBER", "When", "I", "mention", "caching", "I", "was", "referring", "to", "the", "various", "search", "and", "comparison", "algorithms", "that", "the", "chat", "bot", "uses", "to", "analyse", "statements", "and", "select", "responses", "NUMBER", "These", "often", "calculate", "values", "and", "these", "calculations", "can", "be", "costly", "when", "it", "comes", "to", "time", "NUMBER", "Closing", "this", "as", "a", "duplicate", "of", "NUMBER", "davizucon", "I", "might", "add", "some", "change", "to", "this", "pull", "request", "later", "today", "NUMBER", "Is", "it", "alright", "if", "I", "work", "on", "it", "This", "be", "an", "error", "that", "occur", "sometimes", "as", "a", "result", "of", "a", "bad", "NLTK", "corpus", "download", "NUMBER", "ChatterBot", "downloads", "this", "data", "automatically", "when", "it", "starts", "up", "NUMBER", "See", "if", "the", "solution", "that", "was", "reached", "in", "LINK", "issuecomment", "NUMBER", "works", "for", "you", "NUMBER", "Let", "me", "know", "if", "deleting", "the", "downloaded", "data", "file", "doesn", "t", "solve", "the", "issue", "NUMBER", "Also", "noting", "that", "this", "was", "report", "in", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Hi", "Marcogb", "NUMBER", "what", "editor", "be", "you", "use", "I", "see", "that", "there", "be", "a", "NUMBER", "idea", "directory", "in", "the", "trceback", "and", "I", "be", "wondering", "if", "this", "error", "be", "occurring", "because", "of", "the", "configuration", "of", "this", "editor", "NUMBER", "Currently", "it", "be", "required", "for", "create", "True", "to", "be", "set", "when", "use", "to", "SQLAlchemyDatabaseAdapter", "for", "the", "first", "time", "so", "that", "it", "creates", "the", "tables", "in", "the", "database", "NUMBER", "This", "should", "only", "need", "to", "happen", "once", "NUMBER", "A", "check", "should", "be", "add", "so", "that", "when", "the", "storage", "adapter", "be", "initialized", "it", "checks", "to", "see", "if", "the", "tables", "exist", "NUMBER", "If", "the", "tables", "do", "not", "exist", "then", "they", "should", "be", "created", "NUMBER", "The", "create", "True", "parameter", "should", "be", "remove", "NUMBER", "apoorv", "mishra", "My", "apologies", "for", "the", "delayed", "response", "NUMBER", "It", "be", "usually", "best", "to", "avoid", "the", "use", "of", "global", "variables", "unless", "absolutely", "necessary", "NUMBER", "I", "m", "still", "familiarizing", "myself", "with", "how", "SQL", "Alchemy", "works", "and", "at", "this", "point", "I", "don", "t", "have", "an", "accurate", "recommendation", "that", "I", "can", "provide", "NUMBER", "I", "believe", "that", "the", "part", "you", "mention", "about", "checking", "if", "the", "table", "be", "created", "upon", "initialization", "be", "correct", "NUMBER", "If", "I", "were", "going", "to", "implement", "this", "I", "would", "likely", "investigate", "a", "solution", "following", "that", "notion", "NUMBER", "Hi", "lijun", "NUMBER", "It", "sounds", "like", "this", "might", "be", "a", "simple", "Python", "encoding", "issue", "NUMBER", "I", "notice", "that", "you", "be", "use", "iPython", "and", "I", "be", "aware", "that", "developers", "seem", "to", "encounter", "error", "like", "this", "more", "frequently", "with", "Anaconda", "distrobutions", "of", "Python", "NUMBER", "If", "you", "have", "a", "way", "to", "set", "the", "encoding", "in", "iPython", "this", "might", "fix", "the", "problem", "NUMBER", "I", "ve", "attempted", "to", "recreate", "this", "issue", "use", "the", "latest", "version", "of", "ChatterBot", "and", "chatterbot", "corpus", "NUMBER", "I", "believe", "this", "may", "have", "be", "correct", "in", "a", "previous", "release", "NUMBER", "vkosuri", "I", "manually", "restarted", "the", "test", "NUMBER", "Ideally", "it", "wont", "encounter", "any", "network", "issue", "this", "time", "NUMBER", "gunthercox", "Master", "any", "update", "do", "you", "want", "me", "close", "this", "issue", "or", "can", "I", "rework", "I", "be", "closing", "this", "PR", "It", "s", "not", "an", "optimal", "solution", "I", "ve", "seen", "this", "happen", "sometimes", "when", "the", "NLTK", "library", "downloads", "its", "data", "file", "incorrectly", "the", "first", "time", "NUMBER", "You", "can", "fix", "it", "by", "deleting", "the", "NLTK", "data", "file", "so", "that", "it", "then", "re", "downloads", "them", "correctly", "NUMBER", "You", "will", "need", "to", "figure", "out", "where", "they", "have", "be", "downloaded", "to", "on", "your", "computer", "there", "be", "a", "few", "places", "you", "can", "check", "C", "Users", "TAG", "nltk_data", "home", "TAG", "nltk_data", "If", "the", "nltk_data", "file", "isn", "t", "in", "either", "of", "these", "locations", "on", "your", "computer", "then", "you", "can", "run", "the", "following", "to", "get", "the", "full", "list", "of", "locations", "that", "it", "checks", "for", "the", "data", "python", "import", "nltk", "print", "nltk", "NUMBER", "data", "NUMBER", "path", "No", "problem", "I", "check", "my", "email", "quite", "frequently", "NUMBER", "Although", "I", "prefer", "issue", "for", "things", "relate", "to", "this", "project", "because", "it", "lets", "me", "keep", "track", "of", "everything", "better", "and", "I", "already", "have", "so", "many", "emails", "to", "respond", "to", "NUMBER", "One", "suggestion", "I", "have", "be", "that", "it", "might", "be", "a", "good", "idea", "to", "open", "one", "issue", "per", "question", "that", "way", "I", "can", "mark", "it", "as", "close", "once", "it", "be", "completely", "answered", "NUMBER", "Hi", "xilu", "NUMBER", "it", "be", "important", "to", "note", "that", "the", "ChatterBot", "storage", "adapter", "for", "Mongo", "DB", "be", "not", "designed", "to", "work", "with", "the", "Django", "ORM", "NUMBER", "If", "you", "want", "to", "use", "Mongo", "DB", "with", "ChatterBot", "you", "will", "need", "to", "modify", "your", "Django", "project", "to", "use", "a", "Django", "storage", "backend", "for", "MongoDB", "NUMBER", "There", "be", "a", "few", "popular", "ones", "available", "such", "as", "LINK", "mongodb", "engine", "NUMBER", "readthedocs", "NUMBER", "io", "en", "latest", "topics", "setup", "NUMBER", "html", "Hi", "apoorv", "mishra", "thank", "you", "very", "much", "MYZ", "NUMBER", "Hopefully", "I", "can", "address", "each", "of", "your", "question", "NUMBER", "I", "still", "not", "get", "the", "learning", "part", "of", "chatterbot", "although", "I", "go", "through", "the", "documentation", "NUMBER", "When", "I", "talk", "to", "the", "chatterbot", "I", "understand", "that", "it", "save", "what", "I", "write", "in", "the", "database", "but", "how", "it", "will", "affect", "the", "future", "response", "what", "I", "see", "its", "remain", "same", "NUMBER", "Can", "you", "give", "me", "example", "of", "this", "part", "NUMBER", "As", "you", "talk", "to", "the", "chat", "bot", "it", "learns", "based", "on", "how", "you", "respond", "to", "it", "NUMBER", "For", "example", "if", "the", "chat", "bot", "says", "How", "be", "you", "and", "you", "reply", "I", "be", "well", "then", "the", "chat", "bot", "will", "learn", "that", "I", "be", "well", "be", "a", "possible", "valid", "response", "to", "the", "phrase", "How", "be", "you", "NUMBER", "If", "I", "want", "to", "access", "chatterbot", "I", "mean", "to", "talk", "to", "the", "bot", "from", "the", "smartphone", "be", "there", "a", "simple", "way", "to", "do", "that", "NUMBER", "If", "you", "have", "a", "tutorial", "of", "example", "if", "will", "be", "great", "There", "isn", "t", "_really_", "a", "simple", "way", "to", "do", "that", "NUMBER", "You", "could", "create", "a", "small", "web", "service", "with", "an", "API", "that", "a", "smart", "phone", "app", "could", "could", "communicate", "with", "but", "I", "wouldn", "t", "call", "that", "simple", "NUMBER", "I", "m", "going", "to", "close", "this", "issue", "as", "the", "question", "in", "the", "title", "has", "be", "answered", "and", "the", "additional", "question", "asked", "in", "the", "comments", "appear", "to", "be", "duplicates", "of", "NUMBER", "I", "will", "respond", "to", "them", "on", "their", "corresponding", "ticket", "to", "try", "to", "keep", "this", "organized", "NUMBER", "Hi", "kenyeung", "NUMBER", "could", "you", "describe", "what", "you", "mean", "by", "a", "flow", "based", "conversation", "If", "you", "could", "provide", "an", "example", "or", "link", "to", "an", "article", "that", "describes", "it", "that", "would", "be", "perfect", "NUMBER", "FakerGit", "I", "attempted", "to", "recreate", "the", "issue", "you", "encountered", "under", "the", "following", "conditions", "ChatterBot", "version", "NUMBER", "Python", "NUMBER", "Running", "the", "code", "snippet", "you", "provide", "I", "could", "not", "recreate", "this", "error", "NUMBER", "The", "only", "possibility", "I", "can", "think", "of", "be", "that", "you", "may", "have", "made", "modifications", "to", "the", "source", "code", "locally", "I", "m", "going", "to", "close", "this", "issue", "feel", "free", "to", "reopen", "it", "if", "you", "believe", "this", "be", "an", "error", "in", "ChatterBot", "s", "codebase", "NUMBER", "Air", "boy", "There", "be", "not", "a", "simpler", "way", "to", "organize", "the", "training", "data", "NUMBER", "The", "corpus", "file", "that", "ChatterBot", "uses", "be", "just", "simple", "structured", "data", "NUMBER", "If", "you", "need", "to", "generate", "data", "that", "has", "lots", "of", "redundant", "responses", "to", "a", "particular", "input", "I", "would", "assume", "that", "it", "would", "be", "simple", "to", "write", "some", "code", "to", "generate", "a", "corpus", "training", "file", "that", "contained", "each", "variation", "of", "the", "statement", "and", "it", "s", "possible", "responses", "NUMBER", "It", "would", "be", "optimal", "if", "the", "test", "for", "the", "SQL", "adapter", "could", "be", "run", "with", "the", "database", "in", "memory", "NUMBER", "This", "would", "have", "better", "performance", "and", "make", "cleanup", "easier", "NUMBER", "Sqlite", "do", "support", "this", "NUMBER", "From", "the", "documentation", "LINK", "To", "use", "a", "SQLite", "memory", "database", "specify", "an", "empty", "URL", "python", "engine", "create_engine", "sqlite", "Closed", "by", "NUMBER", "I", "believe", "it", "be", "an", "issue", "in", "the", "storage", "adapter", "I", "still", "need", "to", "check", "over", "the", "code", "and", "figure", "out", "where", "the", "inconsistency", "be", "NUMBER", "andpark", "could", "you", "please", "submit", "a", "PR", "for", "this", "issue", "Do", "the", "change", "in", "NUMBER", "solve", "this", "issue", "No", "Master", "Still", "they", "be", "in", "reverse", "order", "even", "after", "NUMBER", "image", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "ef", "NUMBER", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "d", "NUMBER", "cef", "NUMBER", "fe", "NUMBER", "png", "image", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "a", "NUMBER", "a", "NUMBER", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "c", "NUMBER", "a", "NUMBER", "png", "Thank", "you", "Could", "you", "elaborate", "a", "bit", "more", "about", "what", "frequency", "and", "density", "be", "I", "m", "not", "sure", "if", "this", "would", "benefit", "ChatterBot", "either", "NUMBER", "I", "d", "be", "open", "to", "suggestions", "on", "design", "or", "implementation", "details", "regard", "this", "if", "you", "or", "anyone", "else", "has", "suggestions", "about", "how", "something", "like", "this", "could", "be", "use", "to", "accomplish", "any", "learning", "or", "response", "generation", "tasks", "NUMBER", "For", "now", "however", "I", "m", "going", "to", "close", "this", "ticket", "off", "NUMBER", "I", "ve", "labeled", "this", "as", "a", "possible", "bug", "NUMBER", "I", "will", "investigate", "this", "as", "soon", "as", "possible", "NUMBER", "Can", "you", "confirm", "that", "mongodb", "be", "run", "It", "s", "possible", "that", "this", "be", "get", "stuck", "because", "it", "it", "waiting", "for", "a", "connection", "NUMBER", "reubenkhanna", "I", "apologize", "for", "the", "late", "response", "NUMBER", "The", "reason", "you", "be", "not", "get", "a", "response", "be", "because", "of", "the", "chat", "bot", "be", "waiting", "for", "input", "from", "the", "console", "NUMBER", "You", "likely", "need", "to", "use", "a", "different", "input", "adapter", "so", "that", "the", "bot", "won", "t", "be", "waiting", "for", "console", "input", "NUMBER", "I", "recommend", "use", "the", "VariableInputTypeAdapter", "which", "be", "describe", "in", "more", "detail", "here", "LINK", "I", "think", "the", "error", "message", "be", "correct", "NUMBER", "See", "the", "line", "that", "says", "NameError", "name", "chatbot", "be", "not", "defined", "Have", "a", "look", "at", "this", "example", "for", "what", "needs", "to", "be", "include", "LINK", "simple", "example", "Hi", "ProdigyTech", "Based", "on", "your", "description", "it", "sounds", "like", "you", "don", "t", "have", "the", "Python", "python", "twitter", "package", "install", "NUMBER", "I", "notice", "that", "the", "test", "databases", "created", "by", "the", "SQLite", "storage", "adapter", "test", "cases", "be", "not", "be", "delete", "when", "test", "be", "concluded", "NUMBER", "As", "a", "result", "several", "database", "file", "be", "created", "each", "time", "test", "be", "run", "NUMBER", "Yes", "possibly", "this", "weekend", "NUMBER", "vkosuri", "Apologies", "NUMBER", "I", "haven", "t", "had", "a", "chance", "to", "get", "around", "to", "drafting", "a", "new", "release", "yet", "NUMBER", "There", "be", "still", "a", "few", "possible", "issue", "that", "I", "want", "to", "investigate", "with", "the", "new", "SQL", "Alchemy", "adapter", "before", "doing", "the", "release", "NUMBER", "Currently", "there", "isn", "t", "one", "NUMBER", "I", "wouldn", "t", "be", "oppose", "to", "creating", "a", "community", "forum", "for", "ChatterBot", "NUMBER", "Do", "you", "have", "any", "recommendations", "or", "examples", "of", "other", "projects", "that", "do", "a", "good", "job", "of", "this", "Right", "now", "I", "think", "I", "m", "leaning", "towards", "Stack", "Overflow", "NUMBER", "Google", "even", "uses", "it", "for", "many", "of", "their", "Python", "package", "NUMBER", "I", "do", "agree", "that", "there", "be", "a", "barrier", "for", "beginners", "but", "I", "think", "that", "may", "possibly", "be", "a", "positive", "element", "because", "there", "be", "a", "lot", "of", "other", "resources", "out", "there", "for", "absolute", "beginners", "when", "it", "comes", "to", "programming", "NUMBER", "I", "may", "be", "wrong", "about", "this", "but", "from", "my", "perspective", "it", "be", "somewhat", "beneficial", "if", "some", "of", "the", "beginner", "question", "get", "filtered", "out", "NUMBER", "Maintaining", "open", "source", "projects", "can", "be", "a", "lot", "of", "work", "and", "it", "be", "easier", "if", "the", "maintainers", "can", "focus", "on", "fix", "bug", "and", "evolving", "the", "software", "NUMBER", "I", "think", "the", "massive", "community", "backing", "Stack", "Overflow", "would", "also", "be", "helpful", "for", "answering", "some", "of", "the", "more", "general", "question", "that", "come", "up", "NUMBER", "Right", "now", "I", "don", "t", "have", "enough", "points", "on", "Stack", "Overflow", "to", "create", "a", "chatterbot", "tag", "NUMBER", "I", "ll", "look", "into", "seeing", "if", "I", "can", "find", "someone", "to", "create", "it", "NUMBER", "If", "not", "I", "will", "work", "on", "answering", "some", "question", "on", "there", "until", "I", "have", "enough", "points", "to", "create", "the", "tag", "NUMBER", "Feel", "free", "to", "NUMBER", "rajasimon", "If", "you", "can", "create", "the", "chatterbot", "tag", "that", "would", "be", "very", "much", "appreciated", "NUMBER", "NUMBER", "rajasimon", "Thank", "you", "NUMBER", "This", "be", "going", "to", "make", "a", "huge", "difference", "in", "how", "question", "be", "able", "to", "be", "asked", "and", "allowing", "them", "to", "be", "responded", "to", "NUMBER", "BLCKPSTV", "There", "be", "a", "ticket", "currently", "open", "request", "more", "documentation", "for", "ChatterBot", "s", "Django", "integration", "NUMBER", "I", "will", "be", "add", "additional", "documentation", "as", "soon", "as", "possible", "NUMBER", "Feel", "free", "to", "open", "a", "ticket", "if", "you", "think", "any", "examples", "or", "additional", "explanations", "would", "benefit", "the", "project", "documentation", "NUMBER", "PremVarma", "There", "be", "a", "few", "ways", "to", "install", "ChatterBot", "NUMBER", "As", "vkosuri", "mention", "pip", "be", "the", "recommended", "way", "to", "install", "NUMBER", "pip", "install", "chatterbot", "You", "can", "also", "install", "your", "local", "copy", "use", "pip", "for", "example", "git", "clone", "LINK", "pip", "install", "NUMBER", "ChatterBot", "These", "be", "describe", "also", "in", "the", "documentation", "LINK", "frossaren", "did", "you", "by", "any", "chance", "write", "your", "code", "in", "a", "file", "call", "chatterbot", "NUMBER", "py", "If", "you", "did", "this", "will", "cause", "import", "error", "NUMBER", "jinfagang", "Thanks", "for", "your", "inputs", "May", "be", "i", "don", "t", "have", "exact", "answers", "to", "your", "question", "but", "there", "be", "some", "workarounds", "to", "do", "so", "NUMBER", "I", "find", "that", "once", "a", "statement", "store", "into", "database", "like", "mongo", "I", "can", "not", "replace", "it", "that", "means", "if", "previous", "reply", "be", "wrong", "by", "bot", "I", "can", "not", "fix", "that", "maybe", "there", "be", "some", "flag", "allow", "me", "to", "override", "that", "There", "be", "learning_feedback_example", "LINK", "_feedback_example", "NUMBER", "py", "which", "will", "provide", "a", "workaround", "trick", "to", "do", "NUMBER", "Another", "things", "be", "about", "the", "reply", "the", "bot", "learned", "one", "question", "and", "an", "according", "answer", "So", "if", "I", "asked", "that", "question", "twice", "the", "answer", "would", "be", "same", "forever", "and", "never", "change", "this", "be", "not", "good", "even", "not", "intelligent", "than", "I", "use", "an", "random", "NUMBER", "choice", "to", "choose", "random", "condidate", "replies", "NUMBER", "I", "think", "for", "every", "question", "the", "occurrence", "count", "will", "increase", "I", "think", "this", "area", "needs", "to", "improve", "gunthercox", "Master", "do", "you", "any", "comments", "on", "this", "question", "NUMBER", "However", "you", "could", "write", "your", "own", "logic", "adapter", "LINK", "a", "logic", "adapter", "NUMBER", "html", "to", "fulfill", "your", "needs", "Wish", "get", "discuss", "about", "there", "puzzels", "I", "don", "t", "have", "any", "idea", "about", "puzzles", "could", "you", "please", "elaborate", "more", "on", "this", "question", "Tests", "be", "fail", "because", "these", "change", "make", "it", "so", "that", "statements", "be", "remove", "from", "the", "statement_list", "while", "iterating", "through", "it", "NUMBER", "Although", "this", "doesn", "t", "cause", "any", "error", "to", "be", "triggered", "it", "creates", "problem", "due", "to", "the", "condition", "of", "the", "list", "size", "change", "NUMBER", "Madhu", "NUMBER", "Thank", "you", "for", "the", "attempted", "improvement", "NUMBER", "Unfortunately", "I", "can", "t", "merge", "in", "the", "change", "because", "it", "would", "cause", "error", "NUMBER", "Hi", "addelll", "you", "can", "use", "this", "storage", "adapter", "the", "same", "way", "that", "the", "others", "be", "use", "NUMBER", "For", "example", "python", "chatbot", "ChatBot", "My", "ChatterBot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "SQLAlchemyDatabaseAdapter", "Is", "this", "what", "you", "be", "looking", "for", "as", "an", "example", "The", "reason", "you", "be", "seeing", "that", "message", "be", "likely", "because", "the", "current", "version", "of", "ChatterBot", "NUMBER", "doesn", "t", "contain", "the", "change", "that", "were", "add", "in", "this", "pull", "request", "NUMBER", "One", "possible", "way", "be", "to", "install", "directly", "from", "GitHub", "NUMBER", "pip", "install", "git", "git", "github", "NUMBER", "com", "gunthercox", "ChatterBot", "NUMBER", "git", "master", "addelll", "I", "believe", "you", "will", "need", "to", "set", "create", "True", "when", "use", "this", "adapter", "for", "the", "first", "time", "NUMBER", "Hi", "oddrock", "I", "haven", "t", "encountered", "this", "issue", "before", "NUMBER", "Can", "you", "provide", "any", "additional", "information", "about", "the", "setup", "of", "your", "chat", "bot", "I", "think", "it", "would", "be", "an", "Input", "and", "Output", "adapter", "peterel", "i", "trained", "my", "bot", "with", "Offline", "Ubuntu", "corpus", "LINK", "insted", "of", "above", "issue", "I", "have", "seen", "file", "not", "find", "issue", "NUMBER", "I", "ll", "give", "another", "try", "today", "NUMBER", "If", "possible", "where", "exactly", "you", "have", "seen", "the", "above", "error", "I", "mean", "on", "which", "tsv", "file", "you", "encountered", "above", "error", "Instead", "remove", "it", "from", "chatterbot", "how", "about", "moving", "it", "to", "LINK", "corpus", "NUMBER", "If", "any", "users", "be", "like", "to", "use", "UbuntuCorpusTrainer", "they", "will", "use", "it", "NUMBER", "Python", "from", "chatterbot_corpus", "NUMBER", "trainers", "import", "UbuntuCorpusTrainer", "Hi", "Gustavo", "NUMBER", "it", "looks", "like", "there", "be", "a", "few", "issue", "with", "this", "storage", "adapter", "NUMBER", "I", "ve", "also", "be", "thinking", "about", "the", "best", "way", "to", "solve", "the", "issue", "with", "this", "adapter", "be", "non", "thread", "safe", "NUMBER", "The", "requirements", "necessary", "to", "create", "a", "proper", "JSON", "formatted", "database", "be", "enormous", "and", "if", "I", "start", "work", "on", "it", "I", "would", "end", "up", "with", "something", "close", "to", "Mongo", "DB", "which", "be", "essentially", "a", "powerful", "JSON", "database", "NUMBER", "At", "this", "point", "I", "ve", "decided", "to", "steer", "the", "ChatterBot", "project", "away", "from", "use", "my", "original", "home", "rolled", "file", "database", "and", "add", "support", "for", "SQLite", "which", "can", "still", "be", "use", "locally", "without", "any", "additional", "non", "python", "dependencies", "and", "its", "developers", "have", "already", "solve", "the", "issue", "of", "read", "and", "write", "locking", "querying", "for", "data", "etc", "NUMBER", "monokal", "Sorry", "for", "my", "late", "response", "Thank", "you", "for", "the", "detailed", "bug", "report", "I", "will", "aim", "to", "have", "this", "correct", "in", "the", "next", "release", "NUMBER", "coreyauger", "You", "be", "correct", "the", "primary", "issue", "be", "that", "the", "chat", "bot", "needs", "to", "search", "the", "entire", "space", "for", "each", "response", "NUMBER", "I", "be", "work", "on", "a", "solution", "to", "use", "cacheing", "as", "well", "as", "additional", "filtering", "for", "optimization", "but", "this", "be", "still", "largely", "an", "unsolved", "problem", "as", "far", "as", "I", "be", "aware", "because", "there", "isn", "t", "an", "efficient", "way", "to", "do", "NLP", "operations", "on", "a", "database", "level", "NUMBER", "At", "the", "current", "time", "I", "would", "recommend", "avoiding", "training", "a", "chat", "bot", "with", "the", "entire", "Ubuntu", "corpus", "NUMBER", "This", "be", "a", "problem", "that", "I", "m", "work", "to", "resolve", "but", "I", "don", "t", "have", "an", "ideal", "solution", "yet", "NUMBER", "coreyauger", "No", "problem", "I", "would", "be", "happy", "to", "hear", "any", "ideas", "you", "have", "NUMBER", "If", "you", "be", "use", "the", "default", "JSON", "file", "storage", "adapter", "then", "the", "entire", "file", "has", "to", "be", "loaded", "into", "memory", "to", "search", "for", "matching", "statements", "NUMBER", "It", "works", "well", "for", "test", "and", "very", "small", "data", "sets", "but", "it", "be", "completely", "impractical", "for", "larger", "data", "sets", "NUMBER", "This", "be", "the", "main", "reason", "that", "a", "real", "database", "be", "highly", "recommended", "NUMBER", "Sure", "to", "clarify", "what", "I", "meant", "by", "default", "the", "chat", "bot", "will", "use", "the", "value", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "which", "be", "a", "file", "based", "database", "NUMBER", "The", "file", "database", "can", "become", "very", "slow", "when", "large", "amounts", "of", "data", "be", "add", "NUMBER", "You", "can", "switch", "the", "parameter", "to", "make", "be", "use", "a", "database", "such", "as", "Mongo", "DB", "which", "has", "much", "better", "performance", "NUMBER", "Here", "be", "an", "example", "of", "what", "this", "might", "look", "like", "in", "your", "code", "NUMBER", "python", "chatbot", "ChatBot", "My", "ChatterBot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "There", "be", "also", "more", "details", "on", "each", "of", "the", "storage", "adapters", "in", "ChatterBot", "s", "documentation", "if", "you", "be", "interested", "in", "reading", "about", "it", "LINK", "Test", "fail", "on", "this", "pull", "request", "because", "anuragvickey", "submitted", "it", "to", "the", "development", "branch", "instead", "of", "the", "master", "branch", "NUMBER", "Tests", "don", "t", "currently", "pass", "on", "the", "development", "branch", "NUMBER", "The", "commit", "will", "make", "it", "to", "the", "master", "branch", "eventually", "it", "will", "just", "take", "much", "longer", "for", "it", "to", "become", "a", "public", "part", "of", "the", "documentation", "NUMBER", "anuragvickey", "If", "you", "wish", "you", "can", "resubmit", "this", "pull", "request", "against", "master", "and", "I", "can", "merge", "it", "in", "sooner", "NUMBER", "ttrd", "NUMBER", "I", "will", "look", "into", "your", "issue", "as", "soon", "as", "I", "can", "NUMBER", "coffee", "coffee", "coffee", "It", "looks", "like", "you", "have", "encountered", "several", "possible", "issue", "NUMBER", "Scanning", "over", "all", "your", "previous", "comments", "it", "also", "looks", "like", "you", "possibly", "have", "the", "wrong", "twitter", "package", "install", "it", "should", "be", "python", "twitter", "NUMBER", "pip", "uninstall", "twitter", "pip", "install", "python", "twitter", "ttrd", "NUMBER", "I", "did", "not", "have", "time", "to", "check", "your", "issue", "NUMBER", "I", "will", "look", "into", "it", "as", "soon", "as", "I", "can", "NUMBER", "Images", "be", "not", "support", "by", "the", "ChatterBot", "corpus", "NUMBER", "It", "be", "a", "text", "based", "collection", "of", "structured", "dialog", "NUMBER", "NUMBER", "d", "NUMBER", "c", "If", "you", "haven", "t", "already", "do", "so", "I", "would", "recommend", "make", "sure", "that", "you", "have", "the", "latest", "version", "of", "NLTK", "install", "NUMBER", "To", "do", "this", "you", "can", "run", "pip", "install", "nltk", "upgrade", "This", "error", "be", "very", "likely", "occurring", "due", "to", "an", "issue", "with", "one", "ore", "more", "of", "the", "NLTK", "data", "file", "NUMBER", "These", "file", "be", "not", "downloaded", "with", "the", "NLTK", "python", "package", "and", "have", "to", "be", "downloaded", "separately", "NUMBER", "Typically", "ChatterBot", "will", "attempt", "to", "trigger", "the", "download", "of", "these", "file", "if", "they", "cannot", "be", "find", "locally", "NUMBER", "I", "m", "wondering", "if", "the", "download", "partially", "fail", "and", "resulted", "in", "incomplete", "or", "damaged", "data", "file", "NUMBER", "If", "you", "can", "find", "the", "default", "NLTK", "download", "location", "on", "your", "computer", "you", "should", "be", "able", "to", "delete", "them", "so", "the", "they", "get", "re", "downloaded", "by", "ChatterBot", "the", "next", "time", "you", "run", "your", "program", "NUMBER", "Hi", "kail", "NUMBER", "your", "observation", "be", "correct", "NUMBER", "Knowledge", "be", "retained", "by", "the", "chat", "bot", "each", "time", "it", "be", "trained", "NUMBER", "Methods", "exist", "to", "remove", "all", "learned", "statements", "from", "the", "chat", "bot", "if", "you", "wish", "to", "do", "so", "NUMBER", "You", "can", "do", "my_chatbot", "NUMBER", "orage", "NUMBER", "drop", "Hi", "galeej", "that", "be", "correct", "NUMBER", "Occurrence", "counts", "be", "incremented", "for", "each", "duplicate", "statement", "received", "NUMBER", "Thank", "you", "nony", "NUMBER", "Sorry", "about", "the", "late", "response", "NUMBER", "If", "you", "be", "still", "encountering", "this", "issue", "based", "on", "the", "error", "you", "be", "receiving", "zipfile", "NUMBER", "BadZipfile", "File", "be", "not", "a", "zip", "file", "it", "appears", "that", "there", "be", "an", "issue", "with", "your", "NLTK", "data", "file", "NUMBER", "Is", "there", "any", "chance", "that", "you", "downloaded", "the", "NLTK", "data", "file", "manually", "I", "m", "going", "to", "close", "this", "issue", "due", "to", "lack", "of", "activity", "NUMBER", "toopay", "Thank", "you", "for", "the", "offer", "NUMBER", "In", "the", "nearer", "future", "I", "may", "be", "significantly", "change", "the", "way", "storage", "adapters", "work", "in", "ChatterBot", "NUMBER", "As", "much", "as", "I", "want", "to", "support", "as", "many", "different", "databases", "as", "possible", "refactoring", "will", "be", "much", "easier", "for", "me", "if", "there", "be", "fewer", "of", "them", "in", "the", "core", "of", "the", "repository", "NUMBER", "I", "don", "t", "have", "any", "finalized", "plan", "at", "the", "current", "time", "NUMBER", "vkosuri", "That", "be", "not", "correct", "NUMBER", "NUMBER", "be", "for", "input", "and", "output", "adapters", "NUMBER", "toopay", "was", "talking", "about", "a", "storage", "adapter", "for", "use", "RethinkDB", "NUMBER", "Hi", "galeej", "you", "be", "welcome", "to", "submit", "a", "pull", "request", "NUMBER", "I", "can", "t", "guarantee", "it", "will", "get", "merge", "into", "the", "code", "base", "but", "I", "would", "be", "glad", "to", "review", "it", "NUMBER", "Looks", "good", "NUMBER", "Thank", "you", "web", "maker", "This", "sounds", "like", "a", "structured", "data", "analysis", "problem", "NUMBER", "I", "d", "recommend", "taking", "a", "look", "at", "some", "of", "the", "functionality", "provide", "by", "NLTK", "LINK", "Hi", "pavanAlluri", "I", "have", "inspected", "the", "code", "and", "I", "can", "confirm", "that", "there", "be", "an", "issue", "with", "this", "function", "NUMBER", "I", "will", "make", "a", "pull", "request", "with", "corrections", "as", "soon", "as", "I", "can", "NUMBER", "In", "the", "mean", "time", "it", "be", "possible", "that", "another", "contributor", "may", "propose", "a", "solution", "NUMBER", "Hi", "johnduxx", "I", "m", "glad", "you", "re", "interested", "in", "contribute", "to", "this", "project", "NUMBER", "To", "answer", "your", "question", "ChatterBot", "uses", "a", "number", "of", "algorithms", "to", "select", "a", "response", "NUMBER", "ChatterBot", "be", "designed", "to", "be", "modular", "so", "each", "response", "selection", "algorithm", "be", "broken", "up", "into", "its", "own", "module", "call", "a", "logic", "adapter", "NUMBER", "A", "number", "of", "logic", "adapters", "have", "be", "write", "at", "the", "moment", "most", "of", "them", "implement", "search", "based", "artificial", "intelligence", "to", "select", "an", "appropriate", "response", "to", "the", "user", "s", "input", "NUMBER", "Bayesian", "networks", "be", "also", "use", "but", "to", "a", "limited", "extent", "NUMBER", "I", "have", "be", "researching", "seq", "to", "seq", "machine", "learning", "methods", "use", "technologies", "such", "as", "TensorFlow", "maybe", "in", "the", "future", "ChatterBot", "will", "have", "these", "capabilities", "as", "well", "NUMBER", "Let", "me", "know", "if", "you", "have", "any", "further", "question", "arafat", "al", "mahmud", "That", "be", "correct", "NUMBER", "neatville", "Your", "chat", "bot", "do", "get", "trained", "each", "time", "chatterbot", "NUMBER", "get_response", "be", "call", "NUMBER", "This", "be", "by", "design", "to", "help", "the", "chat", "bot", "learn", "to", "communicate", "NUMBER", "You", "can", "also", "disable", "this", "learning", "by", "passing", "the", "parameter", "read_only", "True", "to", "the", "ChatBot", "class", "NUMBER", "Thank", "you", "Thank", "you", "Hi", "addelll", "I", "based", "on", "the", "stack", "trace", "I", "can", "t", "pinpoint", "the", "exact", "cause", "of", "your", "fail", "Heroku", "deployment", "NUMBER", "What", "parameters", "be", "you", "passing", "to", "the", "ChatBot", "class", "in", "your", "code", "Are", "you", "able", "to", "run", "chamkank", "s", "flask", "app", "example", "locally", "without", "error", "Python", "NUMBER", "be", "the", "recommended", "version", "of", "Python", "for", "ChatterBot", "NUMBER", "ChatterBot", "s", "requirements", "be", "listed", "with", "the", "version", "ranges", "specified", "in", "this", "file", "LINK", "vkosuri", "Does", "your", "example", "still", "work", "It", "looks", "like", "the", "heroku", "site", "may", "be", "broken", "NUMBER", "Hi", "elviraC", "this", "be", "happening", "because", "the", "requirements", "NUMBER", "txt", "LINK", "voice", "blob", "master", "requirements", "NUMBER", "txt", "file", "in", "the", "chatterbot", "voice", "package", "be", "pined", "for", "ChatterBot", "NUMBER", "TAG", "NUMBER", "TAG", "write", "One", "last", "doubt", "gunthercox", "TAG", "when", "we", "download", "the", "The", "Ubuntu", "dialog", "corpus", "via", "the", "program", "were", "do", "it", "get", "stored", "Because", "it", "isn", "t", "extracting", "the", "whole", "data", "for", "me", "its", "throw", "error", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "priyanka", "NUMBER", "kar", "Yes", "you", "can", "edit", "the", "corpus", "by", "editing", "the", "json", "file", "NUMBER", "Hi", "kumarneeraj", "NUMBER", "based", "on", "the", "information", "you", "have", "provide", "I", "cannot", "determine", "how", "you", "encountered", "this", "problem", "NUMBER", "Can", "you", "provide", "a", "list", "of", "steps", "that", "I", "can", "use", "to", "recreate", "this", "issue", "Hi", "darenr", "the", "issue", "you", "be", "seeing", "was", "fix", "in", "LINK", "it", "will", "be", "available", "for", "download", "when", "the", "next", "version", "of", "ChatterBot", "be", "release", "NUMBER", "TernTuring", "Make", "sure", "that", "you", "have", "the", "correct", "requirements", "install", "NUMBER", "There", "be", "several", "Python", "twitter", "libraries", "available", "some", "of", "them", "can", "have", "conflicting", "package", "names", "if", "both", "be", "install", "on", "the", "same", "system", "NUMBER", "Check", "the", "requirements", "NUMBER", "txt", "file", "for", "the", "exact", "package", "and", "version", "that", "ChatterBot", "uses", "NUMBER", "Let", "me", "know", "if", "you", "have", "any", "question", "NUMBER", "I", "m", "closing", "this", "ticket", "because", "it", "contains", "no", "information", "and", "appears", "to", "be", "inactive", "NUMBER", "I", "m", "closing", "this", "issue", "because", "it", "be", "inactive", "and", "there", "wan", "t", "enough", "information", "provide", "to", "recreate", "the", "problem", "NUMBER", "Currently", "there", "be", "no", "way", "to", "deploy", "a", "trained", "chat", "bot", "I", "would", "highly", "recommend", "training", "the", "bot", "_after_", "it", "be", "deployed", "to", "a", "hosting", "service", "such", "as", "AWS", "NUMBER", "Hi", "LorenDavie", "thank", "you", "for", "your", "interest", "in", "contribute", "NUMBER", "I", "actually", "have", "plan", "to", "eventually", "phase", "out", "ChatterBot", "s", "input", "and", "output", "adapters", "in", "favor", "of", "make", "the", "library", "simpler", "NUMBER", "More", "details", "on", "this", "can", "be", "find", "here", "LINK", "Let", "me", "know", "if", "you", "have", "any", "question", "NUMBER", "Looks", "good", "NUMBER", "Thank", "you", "I", "agree", "with", "vkosuri", "NUMBER", "I", "like", "the", "idea", "of", "having", "these", "instructions", "available", "to", "point", "people", "to", "if", "they", "have", "question", "NUMBER", "However", "I", "m", "not", "sure", "how", "useful", "a", "Docker", "container", "be", "for", "the", "typical", "Python", "developer", "who", "wants", "to", "use", "or", "contribute", "to", "this", "project", "NUMBER", "Hi", "janMbugti", "I", "be", "aware", "of", "this", "issue", "NUMBER", "I", "be", "currently", "work", "on", "a", "fix", "NUMBER", "The", "issue", "stems", "from", "the", "current", "lack", "of", "the", "ability", "of", "the", "chat", "bot", "to", "search", "it", "s", "knowledge", "graph", "for", "similar", "conversation", "sequences", "NUMBER", "I", "m", "hoping", "to", "introduce", "this", "functionality", "in", "an", "upcoming", "major", "release", "but", "there", "be", "still", "a", "good", "amount", "of", "design", "work", "that", "I", "need", "to", "complete", "NUMBER", "I", "m", "reopening", "this", "as", "it", "be", "a", "valid", "issue", "that", "I", "wish", "to", "address", "NUMBER", "I", "haven", "t", "had", "a", "chance", "to", "implement", "anything", "yet", "but", "I", "do", "want", "to", "provide", "a", "way", "to", "support", "this", "functionality", "NUMBER", "thedp", "This", "be", "something", "that", "I", "would", "like", "to", "implement", "but", "I", "don", "t", "have", "any", "estimates", "on", "when", "I", "will", "be", "able", "to", "get", "around", "to", "work", "on", "it", "NUMBER", "It", "may", "be", "a", "few", "more", "weeks", "before", "I", "have", "a", "chance", "NUMBER", "Storage", "adapters", "have", "a", "get_response_statements", "method", "that", "returns", "all", "statements", "that", "be", "in", "response", "to", "another", "statement", "NUMBER", "A", "much", "more", "elegant", "solution", "would", "be", "to", "have", "the", "filter", "method", "be", "versatile", "enough", "to", "return", "this", "same", "information", "NUMBER", "vkosuri", "some", "of", "the", "other", "filtering", "options", "will", "likely", "just", "be", "join", "operations", "on", "relate", "field", "NUMBER", "The", "setup", "will", "likely", "end", "up", "be", "similar", "to", "the", "way", "Django", "do", "their", "filtering", "for", "querysets", "NUMBER", "I", "agree", "with", "this", "decision", "NUMBER", "Let", "s", "make", "sure", "that", "the", "following", "steps", "have", "be", "completed", "before", "remove", "the", "data", "from", "the", "chatterbot", "repository", "NUMBER", "x", "The", "corpus", "data", "has", "be", "copied", "to", "the", "chatterbot", "corpus", "module", "NUMBER", "x", "ChatterBot", "s", "documentation", "has", "be", "update", "to", "describe", "how", "to", "download", "or", "install", "the", "ChatterBot", "corpus", "data", "NUMBER", "x", "Check", "if", "any", "change", "need", "to", "be", "made", "to", "ChatterBot", "s", "corpus", "trainer", "for", "it", "to", "work", "with", "the", "file", "from", "the", "chatterbot", "corpus", "module", "NUMBER", "Hi", "kushalbabel", "the", "confidence", "score", "be", "returned", "with", "the", "statement", "when", "you", "call", "NUMBER", "get_response", "NUMBER", "So", "for", "example", "python", "response", "mychatbot", "NUMBER", "get_response", "input", "print", "response", "NUMBER", "conficence", "NUMBER", "Hi", "cesarandreslopez", "currently", "ChatterBot", "only", "returns", "a", "single", "response", "NUMBER", "I", "can", "definitely", "see", "the", "value", "in", "be", "able", "to", "set", "how", "may", "close", "responses", "be", "returned", "NUMBER", "I", "d", "be", "happy", "to", "make", "change", "that", "would", "allow", "this", "NUMBER", "I", "m", "reopening", "this", "ticket", "the", "change", "that", "I", "mention", "were", "never", "made", "NUMBER", "lucaszanella", "I", "agree", "I", "would", "be", "happy", "to", "make", "change", "to", "allow", "this", "NUMBER", "I", "m", "actually", "in", "the", "process", "of", "make", "some", "rather", "large", "change", "that", "will", "make", "this", "much", "easier", "to", "do", "NUMBER", "Each", "statement", "will", "end", "up", "having", "a", "reference", "to", "the", "session", "that", "it", "be", "a", "part", "of", "NUMBER", "lucaszanella", "I", "don", "t", "have", "a", "date", "set", "yet", "for", "release", "the", "change", "that", "will", "associate", "statements", "with", "specific", "chat", "sessions", "NUMBER", "Right", "now", "I", "d", "estimate", "that", "the", "release", "be", "about", "a", "month", "away", "NUMBER", "The", "reason", "for", "this", "be", "that", "it", "be", "a", "part", "of", "a", "much", "larger", "change", "that", "be", "intended", "to", "make", "it", "easier", "to", "search", "through", "past", "conversations", "to", "find", "ones", "that", "were", "similar", "to", "the", "current", "conversation", "NUMBER", "As", "a", "side", "effect", "each", "statement", "will", "have", "a", "reference", "to", "the", "conversation", "session", "that", "it", "was", "a", "part", "of", "NUMBER", "I", "m", "planning", "on", "creating", "a", "development", "branch", "which", "will", "contain", "the", "latest", "change", "before", "the", "official", "release", "NUMBER", "Hi", "NUMBER", "d", "io", "labs", "I", "appreciate", "the", "offer", "NUMBER", "The", "development", "branch", "currently", "contains", "some", "major", "change", "and", "improvement", "but", "I", "be", "currently", "get", "random", "test", "failures", "NUMBER", "I", "haven", "t", "had", "a", "chance", "to", "pinpoint", "the", "exact", "cause", "NUMBER", "Examples", "of", "these", "failures", "can", "be", "viewed", "in", "the", "Travis", "CI", "output", "LINK", "ci", "NUMBER", "org", "gunthercox", "ChatterBot", "build", "NUMBER", "saurabhzuve", "I", "think", "you", "need", "self", "NUMBER", "chatbot", "insted", "of", "self", "NUMBER", "bot", "The", "file", "database", "that", "ChatterBot", "uses", "by", "default", "isn", "t", "thread", "safe", "NUMBER", "It", "s", "the", "default", "because", "it", "doesn", "t", "require", "any", "databases", "to", "be", "install", "locally", "so", "it", "be", "easy", "for", "people", "to", "get", "start", "and", "test", "out", "their", "chat", "bots", "NUMBER", "The", "error", "you", "be", "seeing", "be", "because", "multiple", "threads", "have", "attempted", "to", "read", "and", "write", "to", "the", "the", "same", "file", "at", "the", "same", "time", "and", "a", "write", "was", "not", "completed", "so", "the", "data", "was", "invalid", "NUMBER", "Hi", "phpmind", "assuming", "you", "have", "access", "to", "an", "API", "for", "a", "botkit", "app", "you", "can", "definitely", "make", "request", "to", "it", "from", "ChatterBot", "NUMBER", "Vice", "versa", "it", "would", "not", "be", "difficult", "to", "create", "a", "small", "API", "based", "Python", "app", "that", "could", "provide", "responses", "to", "a", "botkit", "based", "chatbot", "NUMBER", "Either", "should", "be", "able", "to", "get", "information", "from", "each", "other", "depending", "on", "the", "setup", "you", "desire", "NUMBER", "Your", "question", "doesn", "t", "make", "it", "entirely", "clear", "what", "information", "you", "be", "looking", "for", "NUMBER", "Yes", "you", "can", "write", "code", "to", "use", "HTTP", "request", "to", "access", "information", "between", "chat", "bot", "s", "write", "in", "different", "programming", "languages", "NUMBER", "For", "Python", "I", "highly", "recommend", "the", "request", "LINK", "request", "NUMBER", "org", "en", "master", "framework", "NUMBER", "I", "ve", "identified", "the", "cause", "of", "this", "issue", "NUMBER", "Working", "on", "a", "fix", "NUMBER", "This", "sounds", "like", "be", "might", "work", "well", "as", "a", "preprocessor", "LINK", "NUMBER", "Hi", "HelloJyo", "right", "now", "ChatterBot", "doesn", "t", "have", "this", "functionality", "build", "in", "NUMBER", "I", "m", "aiming", "to", "introduce", "it", "in", "a", "future", "release", "but", "I", "m", "still", "work", "on", "change", "that", "will", "make", "it", "possible", "to", "select", "responses", "from", "a", "specific", "bot", "in", "situations", "where", "multiple", "bits", "be", "be", "use", "NUMBER", "Hi", "martmists", "I", "apologize", "about", "the", "amount", "of", "time", "this", "pull", "request", "has", "remained", "open", "for", "NUMBER", "I", "m", "going", "to", "close", "it", "off", "because", "I", "m", "moving", "the", "project", "away", "from", "jsondb", "in", "favor", "of", "support", "popular", "exist", "types", "of", "databases", "NUMBER", "The", "JsonDatabaseAdapter", "in", "ChatterBot", "will", "be", "support", "until", "the", "NUMBER", "version", "release", "but", "I", "m", "not", "looking", "to", "add", "additional", "JSON", "type", "adapters", "anymore", "NUMBER", "I", "appreciate", "the", "work", "you", "put", "into", "this", "pull", "request", "and", "I", "m", "sorry", "that", "I", "could", "not", "be", "merge", "into", "the", "project", "NUMBER", "If", "you", "still", "want", "to", "make", "it", "available", "for", "others", "to", "use", "you", "can", "always", "set", "it", "up", "as", "it", "s", "own", "Python", "package", "on", "PyPi", "NUMBER", "This", "pull", "request", "will", "make", "change", "to", "store", "sessions", "in", "the", "database", "NUMBER", "Sessions", "will", "eventually", "be", "use", "to", "track", "individual", "conversations", "NUMBER", "The", "session", "needs", "to", "be", "stored", "so", "that", "statements", "can", "reference", "the", "individual", "conversation", "that", "they", "be", "a", "part", "of", "NUMBER", "For", "NUMBER", "meanchun", "You", "be", "correct", "it", "be", "important", "NUMBER", "Additional", "work", "be", "still", "required", "to", "add", "this", "functionality", "NUMBER", "Are", "you", "saving", "a", "statement", "in", "your", "custom", "logic", "adapter", "The", "extra_data", "attribute", "be", "empty", "by", "default", "so", "if", "a", "new", "statement", "gets", "created", "and", "that", "statement", "has", "the", "same", "text", "as", "an", "exist", "one", "then", "when", "it", "gets", "saved", "the", "empty", "value", "for", "extra_data", "would", "replace", "the", "exist", "value", "NUMBER", "Setting", "read_only", "True", "just", "controls", "if", "the", "chat", "bot", "can", "learn", "if", "it", "be", "set", "to", "true", "then", "none", "of", "of", "the", "input", "the", "chat", "bot", "gets", "will", "be", "saved", "to", "the", "database", "NUMBER", "It", "sounds", "like", "this", "might", "be", "a", "bug", "NUMBER", "I", "will", "test", "it", "out", "and", "make", "change", "to", "make", "sure", "it", "gets", "fix", "NUMBER", "I", "like", "this", "idea", "NUMBER", "What", "do", "you", "think", "of", "the", "idea", "of", "allowing", "developers", "to", "set", "the", "JSON", "library", "via", "a", "parameter", "For", "example", "something", "like", "python", "chatbot", "ChatBot", "My", "Bot", "NUMBER", "json_library", "json", "NUMBER", "loads", "and", "json", "NUMBER", "dumps", "have", "different", "method", "names", "in", "various", "JSON", "libraries", "loads", "import", "NUMBER", "path", "NUMBER", "for", "NUMBER", "json_library", "NUMBER", "loads", "dumps", "import", "NUMBER", "path", "NUMBER", "for", "NUMBER", "json_library", "NUMBER", "dumps", "The", "advantage", "would", "be", "that", "it", "reduces", "the", "amount", "of", "code", "that", "has", "to", "be", "add", "to", "ChatterBot", "to", "support", "different", "JSON", "libraries", "in", "the", "future", "NUMBER", "It", "also", "gives", "the", "developer", "more", "control", "NUMBER", "Hi", "brunotikami", "could", "you", "add", "a", "list", "of", "step", "by", "step", "instructions", "that", "I", "can", "use", "to", "attempt", "to", "recreate", "the", "error", "you", "encountered", "Ok", "so", "one", "thing", "I", "just", "notice", "as", "I", "was", "checking", "over", "your", "traceback", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "deserialize_responses", "return", "proxy_statement", "NUMBER", "in_response_to", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "models", "NUMBER", "py", "line", "NUMBER", "in", "in_response_to", "I", "m", "assuming", "that", "you", "be", "use", "Django", "with", "MongoDB", "as", "it", "s", "database", "in", "your", "project", "NUMBER", "I", "ve", "never", "actually", "test", "to", "see", "if", "ChatterBot", "s", "MongoDB", "adapter", "will", "work", "with", "a", "Django", "MongoDB", "setup", "NUMBER", "Let", "me", "know", "if", "I", "my", "assumption", "about", "your", "project", "setup", "be", "correct", "NUMBER", "If", "so", "I", "will", "try", "to", "set", "up", "a", "project", "with", "the", "same", "configuration", "locally", "to", "test", "this", "out", "NUMBER", "Ok", "I", "ll", "write", "up", "an", "example", "and", "test", "this", "out", "locally", "as", "soon", "as", "I", "can", "NUMBER", "Just", "a", "note", "ChatterBot", "s", "storage", "adapters", "be", "not", "the", "same", "thing", "as", "Django", "s", "database", "backends", "NUMBER", "By", "default", "ChatterBot", "will", "use", "it", "s", "build", "in", "_Django", "storage", "adapter_", "which", "uses", "whatever", "database", "backend", "your", "Django", "settings", "be", "set", "up", "to", "use", "NUMBER", "So", "if", "you", "use", "a", "Django", "storage", "backend", "like", "Django", "MongoDB", "Engine", "LINK", "mongodb", "engine", "NUMBER", "readthedocs", "NUMBER", "io", "en", "latest", "then", "ChatterBot", "will", "access", "your", "instance", "of", "MongoDB", "through", "that", "adapter", "directly", "probably", "avoiding", "the", "error", "you", "encountered", "NUMBER", "web", "maker", "If", "you", "be", "interested", "in", "submit", "a", "pull", "request", "I", "would", "be", "happy", "to", "review", "it", "NUMBER", "web", "maker", "Thank", "you", "I", "ll", "check", "it", "out", "NUMBER", "Hi", "shashigharti", "all", "of", "the", "parameters", "you", "re", "passing", "to", "ChatBot", "appear", "to", "be", "correct", "NUMBER", "You", "said", "that", "you", "be", "not", "get", "the", "expected", "result", "NUMBER", "Are", "you", "get", "_any_", "result", "If", "so", "what", "be", "the", "result", "you", "be", "get", "Hi", "RominYue", "Thank", "you", "I", "will", "make", "adjustments", "to", "the", "documentation", "to", "clarify", "this", "NUMBER", "Regarding", "your", "last", "question", "from", "NUMBER", "MyAdapter", "import", "MyAdapter", "be", "not", "required", "to", "be", "add", "to", "the", "__init__", "NUMBER", "py", "file", "NUMBER", "Adding", "it", "to", "__init__", "NUMBER", "py", "be", "just", "a", "Python", "convention", "that", "allows", "you", "to", "import", "the", "class", "like", "this", "python", "from", "myadapters", "import", "MyAdapter", "instead", "of", "like", "this", "python", "from", "myadapters", "NUMBER", "logic", "NUMBER", "my_adapter", "import", "MyAdapter", "I", "m", "going", "to", "close", "this", "off", "as", "I", "believe", "all", "of", "the", "issue", "have", "be", "address", "NUMBER", "Feel", "free", "to", "reopen", "it", "if", "I", "miss", "any", "documentation", "change", "that", "were", "needed", "I", "believe", "buildithub", "encountered", "the", "same", "issue", "LINK", "It", "was", "resolve", "by", "use", "the", "latest", "version", "of", "the", "example", "NUMBER", "Theoretically", "the", "distinct", "shouldn", "t", "be", "needed", "NUMBER", "I", "can", "remove", "it", "to", "correct", "this", "issue", "NUMBER", "Actually", "after", "looking", "into", "this", "a", "bit", "further", "it", "doesn", "t", "appear", "that", "the", "distinct", "can", "be", "avoided", "NUMBER", "This", "method", "needs", "to", "return", "a", "list", "of", "statements", "that", "be", "responses", "and", "it", "cause", "larger", "performance", "issue", "if", "duplicate", "statements", "were", "returned", "NUMBER", "It", "might", "be", "possible", "to", "improve", "performance", "by", "applying", "an", "index", "but", "I", "currently", "don", "t", "have", "a", "way", "to", "test", "what", "the", "performance", "increase", "if", "any", "would", "be", "NUMBER", "I", "m", "closing", "this", "ticket", "off", "NUMBER", "It", "doesn", "t", "appear", "to", "contain", "anything", "actionable", "to", "improve", "ChatterBot", "NUMBER", "Hmmm", "strange", "NUMBER", "I", "can", "t", "seem", "to", "verify", "this", "NUMBER", "I", "m", "checking", "that", "this", "functionality", "works", "use", "the", "following", "unit", "test", "in", "test", "test_chatbot", "NUMBER", "py", "L", "NUMBER", "LINK", "_chatbot", "NUMBER", "py", "L", "NUMBER", "python", "def", "test_learn_response", "self", "previous_response", "Statement", "Define", "Hemoglobin", "NUMBER", "statement", "Statement", "Hemoglobin", "be", "an", "oxygen", "transport", "metalloprotein", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "learn_response", "statement", "previous_response", "exists", "self", "NUMBER", "chatbot", "NUMBER", "orage", "NUMBER", "find", "statement", "NUMBER", "text", "self", "NUMBER", "assertIsNotNone", "exists", "That", "sounds", "like", "it", "be", "probably", "it", "NUMBER", "If", "read_only", "be", "True", "the", "bot", "won", "t", "learn", "NUMBER", "Possibly", "under", "what", "conditions", "be", "you", "looking", "to", "have", "learning", "occur", "For", "example", "if", "you", "only", "what", "a", "bot", "to", "learn", "when", "talking", "to", "a", "particular", "user", "you", "could", "do", "something", "like", "python", "Get", "a", "response", "to", "the", "input", "statement", "statement", "response", "confidence", "bot", "NUMBER", "generate_response", "input_statement", "Only", "learn", "on", "this", "condition", "if", "user", "NUMBER", "email", "admin", "gmail", "NUMBER", "com", "bot", "NUMBER", "learn_response", "response", "input_statement", "This", "be", "a", "great", "question", "NUMBER", "I", "m", "not", "actually", "sure", "if", "there", "be", "a", "good", "answer", "for", "you", "right", "now", "but", "I", "m", "hoping", "that", "we", "can", "figure", "something", "out", "NUMBER", "It", "might", "require", "make", "some", "improvement", "to", "ChatterBot", "itself", "to", "make", "this", "happen", "NUMBER", "Let", "s", "see", "if", "we", "can", "figure", "something", "out", "because", "I", "realize", "this", "be", "a", "real", "problem", "that", "will", "only", "get", "worse", "as", "chat", "bots", "build", "with", "ChatterBot", "be", "use", "with", "larger", "data", "sets", "NUMBER", "The", "main", "problem", "be", "that", "NLP", "be", "significantly", "slower", "than", "the", "set", "logic", "use", "for", "querying", "a", "database", "NUMBER", "There", "be", "a", "few", "approaches", "that", "can", "be", "use", "to", "make", "it", "so", "that", "NLP", "has", "less", "to", "process", "less", "data", "NUMBER", "NUMBER", "Loosening", "constraints", "One", "option", "that", "could", "help", "make", "this", "process", "faster", "would", "be", "to", "make", "the", "assumption", "that", "we", "do", "not", "need", "to", "search", "all", "of", "the", "data", "to", "find", "the", "best", "result", "NUMBER", "It", "might", "be", "possible", "that", "an", "optimal", "response", "could", "be", "selected", "from", "a", "subset", "of", "the", "know", "data", "NUMBER", "NUMBER", "Queries", "it", "might", "be", "possible", "to", "generate", "a", "query", "that", "eliminates", "statements", "that", "can", "t", "possibly", "be", "a", "response", "to", "the", "input", "the", "bot", "received", "NUMBER", "Doing", "this", "requires", "those", "attributes", "to", "be", "identified", "but", "this", "could", "help", "prevent", "extraneous", "statements", "from", "be", "returned", "in", "the", "response", "from", "the", "database", "NUMBER", "An", "example", "of", "this", "could", "be", "that", "the", "user", "asks", "a", "question", "NUMBER", "Let", "s", "assume", "that", "all", "statements", "in", "the", "database", "now", "have", "an", "is_question", "attribute", "NUMBER", "We", "could", "eliminate", "any", "statement", "that", "be", "not", "in", "response", "to", "a", "question", "NUMBER", "Categorization", "of", "statements", "by", "some", "kind", "of", "type", "could", "help", "reduce", "the", "data", "set", "that", "has", "to", "be", "processed", "for", "large", "databases", "if", "it", "be", "possible", "to", "determine", "the", "type", "of", "response", "that", "be", "expected", "as", "a", "response", "NUMBER", "NUMBER", "Preprocessing", "I", "very", "recently", "add", "a", "preprossessor", "feature", "that", "makes", "it", "possible", "to", "do", "something", "to", "each", "statement", "a", "chat", "bot", "receives", "as", "input", "NUMBER", "Incoming", "statements", "could", "be", "tag", "with", "NLP", "scores", "and", "values", "so", "that", "these", "could", "be", "search", "on", "later", "NUMBER", "This", "wouldn", "t", "solve", "the", "problem", "for", "exist", "statements", "but", "a", "line", "could", "be", "add", "somewhere", "to", "save", "the", "NLP", "evaluations", "if", "they", "have", "not", "be", "generate", "for", "a", "statement", "yet", "NUMBER", "This", "makes", "it", "so", "that", "NLP", "evaluations", "only", "ever", "have", "to", "be", "run", "once", "for", "a", "statement", "NUMBER", "This", "may", "work", "well", "when", "logic", "adapters", "depend", "on", "things", "such", "as", "the", "tag", "parts", "of", "speech", "of", "a", "statement", "NUMBER", "However", "this", "do", "not", "solve", "a", "larger", "portion", "of", "the", "problem", "which", "exists", "because", "of", "the", "need", "to", "make", "NLP", "comparisons", "between", "statements", "NUMBER", "For", "example", "if", "we", "want", "to", "find", "the", "closest", "know", "match", "to", "a", "statement", "then", "we", "have", "to", "compare", "that", "statement", "to", "every", "other", "statement", "NUMBER", "This", "be", "where", "I", "m", "currently", "stuck", "on", "how", "to", "make", "this", "process", "more", "efficient", "NUMBER", "Noting", "has", "be", "write", "that", "I", "m", "aware", "of", "for", "use", "the", "models", "designed", "for", "open", "intent", "NUMBER", "io", "with", "ChatterBot", "NUMBER", "I", "think", "the", "concept", "of", "the", "dictionary", "file", "that", "they", "have", "you", "define", "might", "be", "a", "good", "way", "to", "handle", "the", "tagging", "of", "statements", "that", "I", "mention", "before", "NUMBER", "In", "their", "example", "dictionary", "file", "they", "provide", "the", "following", "example", "it", "looks", "like", "they", "be", "grouping", "synonyms", "for", "a", "particular", "word", "and", "then", "encompassing", "that", "inside", "it", "s", "own", "category", "NUMBER", "json", "greetings", "hello", "hi", "yep", "yo", "hey", "food_type", "pizza", "hamburger", "big", "mac", "cheeseburger", "burger", "salad", "This", "be", "something", "that", "could", "definitely", "be", "add", "to", "ChatterBot", "however", "I", "m", "going", "to", "be", "add", "it", "then", "I", "will", "need", "some", "time", "to", "plan", "what", "kinds", "of", "change", "would", "be", "required", "NUMBER", "If", "you", "have", "a", "way", "to", "train", "your", "bot", "with", "the", "desired", "responses", "you", "could", "use", "the", "get_most_frequent_response", "LINK", "_selection", "NUMBER", "html", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_most_frequent_response", "response", "selection", "method", "NUMBER", "Training", "multiple", "times", "with", "the", "desired", "data", "would", "increment", "occurrence", "counts", "for", "those", "responses", "and", "it", "would", "ensure", "that", "they", "get", "selected", "NUMBER", "Using", "training", "LINK", "training", "via", "list", "data", "to", "increment", "the", "occurrence", "counts", "be", "probably", "the", "most", "efficient", "way", "to", "do", "this", "NUMBER", "This", "add", "a", "new", "feature", "call", "_preprocessors_", "NUMBER", "These", "be", "simple", "function", "that", "modify", "the", "input", "statement", "before", "it", "be", "processed", "by", "the", "logic", "adaper", "NUMBER", "martmists", "Do", "you", "have", "the", "unicode", "header", "at", "the", "top", "of", "your", "python", "file", "code", "utf", "NUMBER", "NUMBER", "Makes", "change", "to", "store", "the", "computed", "confidence", "value", "on", "the", "statement", "object", "that", "get", "s", "returned", "from", "the", "logic", "adapter", "NUMBER", "The", "return", "values", "for", "the", "process", "method", "could", "be", "simplified", "to", "just", "return", "one", "value", "NUMBER", "Hi", "this", "likely", "wouldn", "t", "be", "too", "difficult", "NUMBER", "I", "would", "estimate", "a", "difficulty", "of", "maybe", "NUMBER", "out", "of", "NUMBER", "with", "NUMBER", "be", "the", "hardest", "to", "implement", "NUMBER", "star", "star", "This", "looks", "great", "thank", "you", "Hi", "aliabbasjp", "sorry", "about", "the", "late", "reply", "NUMBER", "Please", "make", "sure", "that", "you", "have", "the", "latest", "version", "of", "ChatterBot", "and", "it", "s", "dependencies", "by", "run", "pip", "install", "chatterbot", "upgrade", "NUMBER", "Looking", "at", "the", "traceback", "you", "can", "see", "that", "the", "error", "be", "be", "triggered", "in", "jsondb", "compat", "NUMBER", "py", "which", "be", "one", "of", "ChatterBot", "s", "dependencies", "NUMBER", "JsonDB", "recently", "had", "some", "update", "and", "it", "s", "possible", "that", "you", "either", "have", "an", "older", "version", "or", "the", "latest", "version", "has", "a", "problem", "NUMBER", "What", "version", "of", "Python", "do", "you", "have", "install", "That", "be", "strange", "I", "can", "t", "recreate", "this", "issue", "NUMBER", "I", "m", "wondering", "if", "be", "be", "possibly", "a", "difference", "with", "Anaconda", "and", "regular", "Python", "vkosuri", "I", "don", "t", "have", "a", "better", "answer", "at", "the", "moment", "NUMBER", "I", "think", "recommending", "to", "delete", "the", "database", "be", "a", "poor", "solution", "NUMBER", "I", "need", "to", "look", "into", "this", "further", "to", "see", "if", "I", "can", "recreate", "the", "issue", "NUMBER", "If", "I", "can", "recreate", "it", "then", "I", "can", "fix", "it", "NUMBER", "Unfortunately", "when", "I", "run", "the", "code", "locally", "it", "works", "NUMBER", "I", "can", "t", "get", "any", "unicode", "error", "to", "show", "up", "NUMBER", "This", "leads", "me", "to", "believe", "that", "there", "be", "one", "of", "the", "two", "following", "problem", "happening", "here", "NUMBER", "There", "be", "a", "local", "error", "occurring", "with", "the", "system", "configuration", "for", "those", "who", "have", "encountered", "this", "error", "NUMBER", "NUMBER", "There", "be", "a", "decoding", "issue", "with", "the", "jsondb", "library", "LINK", "You", "can", "access", "the", "database", "from", "within", "the", "logic", "adapter", "via", "self", "NUMBER", "chatbot", "NUMBER", "orage", "NUMBER", "Hi", "thedp", "I", "ve", "push", "up", "a", "fix", "for", "this", "NUMBER", "The", "error", "message", "was", "correct", "in", "stating", "that", "the", "Response", "object", "has", "no", "attribute", "serialize", "NUMBER", "Ok", "I", "m", "glad", "your", "issue", "was", "resolve", "NUMBER", "The", "fix", "will", "be", "available", "through", "pip", "once", "I", "release", "the", "next", "version", "NUMBER", "For", "now", "it", "just", "exists", "in", "the", "latest", "change", "on", "GitHub", "NUMBER", "Hi", "aliabbasjp", "ChatterBot", "currently", "has", "no", "support", "for", "ChatScript", "NUMBER", "I", "actually", "hadn", "t", "heard", "of", "ChatScript", "before", "but", "it", "looks", "interesting", "NUMBER", "I", "ve", "be", "work", "on", "planning", "update", "to", "ChatterBot", "s", "training", "LINK", "data", "format", "to", "support", "more", "functionality", "NUMBER", "The", "current", "plan", "be", "describe", "here", "LINK", "Corpus", "Specification", "NUMBER", "If", "you", "have", "any", "input", "I", "would", "definitely", "be", "interested", "in", "hearing", "it", "NUMBER", "I", "can", "t", "promise", "support", "for", "ChatScript", "integration", "but", "similar", "functionality", "might", "be", "possible", "to", "achieve", "when", "the", "new", "corpus", "format", "be", "introduce", "NUMBER", "Closes", "NUMBER", "Thank", "you", "There", "has", "be", "update", "to", "correct", "a", "few", "issue", "with", "sessions", "since", "the", "NUMBER", "release", "NUMBER", "Feel", "free", "to", "check", "the", "release", "note", "for", "more", "details", "LINK", "The", "latest", "release", "be", "NUMBER", "I", "d", "recommend", "update", "to", "the", "latest", "version", "to", "check", "if", "the", "problem", "persists", "NUMBER", "ChatterBot", "can", "be", "update", "to", "the", "latest", "version", "use", "pip", "NUMBER", "The", "command", "be", "pip", "install", "chatterbot", "upgrade", "Hi", "DangMinh", "NUMBER", "the", "ordering", "of", "these", "parameters", "doesn", "t", "matter", "NUMBER", "You", "be", "correct", "it", "looks", "like", "the", "values", "for", "the", "parameters", "be", "reversed", "NUMBER", "Thank", "you", "for", "point", "this", "out", "NUMBER", "I", "ll", "make", "change", "to", "correct", "it", "NUMBER", "Closed", "by", "NUMBER", "It", "would", "be", "useful", "to", "have", "some", "documentation", "on", "how", "to", "use", "unicode", "encoding", "in", "Python", "and", "how", "troubleshoot", "unicode", "error", "and", "warnings", "NUMBER", "ChatterBot", "s", "domain", "involves", "work", "with", "string", "type", "data", "and", "a", "variety", "of", "unicode", "relate", "question", "come", "up", "frequently", "NUMBER", "The", "filter", "method", "of", "storage", "adapters", "be", "currently", "doing", "an", "OR", "operation", "for", "each", "specified", "attribute", "NUMBER", "This", "should", "actually", "be", "an", "AND", "operation", "NUMBER", "Right", "now", "this", "isn", "t", "cause", "any", "issue", "but", "the", "AND", "logic", "would", "allow", "some", "exist", "code", "to", "be", "simplified", "and", "it", "would", "also", "make", "the", "method", "more", "consistent", "with", "similar", "methods", "of", "other", "frameworks", "NUMBER", "Nixellion", "Thanks", "for", "the", "heads", "up", "NUMBER", "I", "will", "make", "change", "to", "correct", "the", "broken", "link", "NUMBER", "NotSoSuper", "See", "my", "response", "to", "LINK", "issuecomment", "NUMBER", "I", "believe", "you", "may", "be", "encountering", "a", "similar", "issue", "NUMBER", "Ok", "so", "just", "to", "confirm", "the", "solution", "from", "LINK", "issuecomment", "NUMBER", "did", "correct", "your", "issue", "Currently", "there", "be", "no", "way", "to", "do", "this", "but", "I", "agree", "that", "it", "would", "be", "useful", "NUMBER", "I", "would", "be", "happy", "to", "add", "this", "capability", "NUMBER", "Pros", "Doing", "this", "makes", "it", "possible", "for", "ChatterBot", "maintainers", "to", "focus", "on", "the", "communication", "aspect", "of", "the", "project", "instead", "of", "maintaining", "numerous", "modules", "for", "integrations", "with", "exist", "communication", "APIs", "NUMBER", "There", "will", "always", "be", "new", "communication", "APIs", "be", "created", "NUMBER", "As", "the", "number", "of", "these", "APIs", "that", "ChatterBot", "support", "increases", "over", "time", "it", "will", "become", "more", "difficult", "to", "maintain", "them", "NUMBER", "Instead", "of", "expending", "time", "maintaining", "these", "integrations", "and", "add", "new", "integrations", "to", "ChatterBot", "it", "might", "be", "better", "to", "put", "that", "effort", "into", "make", "sure", "that", "ChatterBot", "be", "generally", "usable", "with", "exist", "software", "libraries", "and", "clients", "designed", "to", "connect", "to", "those", "APIs", "NUMBER", "Being", "required", "to", "create", "an", "input", "and", "an", "output", "adapter", "to", "connect", "to", "a", "particular", "API", "can", "restrict", "the", "developer", "by", "requiring", "them", "to", "work", "around", "the", "constraints", "of", "ChatterBot", "s", "input", "and", "output", "adapters", "NUMBER", "Cons", "Developers", "who", "have", "created", "applications", "that", "use", "ChatterBot", "s", "input", "and", "output", "adapter", "classes", "probably", "won", "t", "be", "happy", "NUMBER", "Session", "management", "would", "likely", "have", "to", "be", "handle", "by", "the", "developer", "so", "it", "would", "need", "to", "be", "really", "easy", "to", "use", "NUMBER", "At", "the", "moment", "session", "management", "primarily", "occur", "internally", "because", "it", "do", "not", "have", "the", "most", "friendly", "interface", "NUMBER", "How", "would", "things", "change", "if", "input", "and", "output", "adapters", "were", "remove", "With", "the", "current", "version", "of", "ChatterBot", "if", "we", "want", "our", "chat", "bot", "to", "interact", "with", "some", "source", "of", "data", "then", "we", "would", "need", "an", "input", "and", "an", "output", "adapter", "NUMBER", "Lets", "use", "MailGun", "s", "API", "as", "an", "example", "NUMBER", "In", "this", "case", "we", "need", "an", "input", "adapter", "to", "check", "MailGun", "for", "new", "message", "and", "an", "output", "adapter", "to", "send", "the", "chat", "bot", "s", "responses", "back", "to", "whoever", "sent", "them", "NUMBER", "TAG", "TAG", "Here", "be", "an", "example", "of", "the", "input", "adapter", "for", "MailGun", "NUMBER", "TAG", "TAG", "import", "datetime", "from", "chatterbot", "NUMBER", "input", "import", "InputAdapter", "from", "chatterbot", "NUMBER", "conversation", "import", "Statement", "class", "Mailgun", "InputAdapter", "def", "__init__", "self", "kwargs", "super", "Mailgun", "self", "NUMBER", "__init__", "kwargs", "Use", "the", "bot", "s", "name", "for", "the", "name", "of", "the", "sender", "self", "NUMBER", "name", "kwargs", "NUMBER", "get", "name", "self", "NUMBER", "from_address", "kwargs", "NUMBER", "get", "mailgun_from_address", "self", "NUMBER", "api_key", "kwargs", "NUMBER", "get", "mailgun_api_key", "self", "NUMBER", "endpoint", "kwargs", "NUMBER", "get", "mailgun_api_endpoint", "def", "get_email_stored_events", "self", "import", "request", "yesterday", "datetime", "NUMBER", "datetime", "NUMBER", "now", "datetime", "NUMBER", "timedelta", "NUMBER", "return", "request", "NUMBER", "get", "events", "NUMBER", "format", "self", "NUMBER", "endpoint", "auth", "api", "self", "NUMBER", "api_key", "params", "begin", "yesterday", "NUMBER", "isoformat", "ascending", "yes", "limit", "NUMBER", "def", "get_stored_email_urls", "self", "response", "self", "NUMBER", "get_email_stored_events", "data", "response", "NUMBER", "json", "for", "item", "in", "data", "NUMBER", "get", "items", "if", "storage", "in", "item", "if", "url", "in", "item", "storage", "yield", "item", "storage", "url", "def", "get_message", "self", "url", "import", "request", "return", "request", "NUMBER", "get", "url", "auth", "api", "self", "NUMBER", "api_key", "def", "process_input", "self", "statement", "urls", "self", "NUMBER", "get_stored_email_urls", "url", "first", "urls", "response", "self", "NUMBER", "get_message", "url", "message", "response", "NUMBER", "json", "text", "message", "NUMBER", "get", "stripped", "text", "return", "Statement", "text", "TAG", "TAG", "TAG", "TAG", "Here", "be", "an", "example", "of", "the", "output", "adapter", "for", "MailGun", "NUMBER", "TAG", "TAG", "from", "NUMBER", "output_adapter", "import", "OutputAdapter", "class", "Mailgun", "OutputAdapter", "def", "__init__", "self", "kwargs", "super", "Mailgun", "self", "NUMBER", "__init__", "kwargs", "Use", "the", "bot", "s", "name", "for", "the", "name", "of", "the", "sender", "self", "NUMBER", "name", "kwargs", "NUMBER", "get", "name", "self", "NUMBER", "from_address", "kwargs", "NUMBER", "get", "mailgun_from_address", "self", "NUMBER", "api_key", "kwargs", "NUMBER", "get", "mailgun_api_key", "self", "NUMBER", "endpoint", "kwargs", "NUMBER", "get", "mailgun_api_endpoint", "self", "NUMBER", "recipients", "kwargs", "NUMBER", "get", "mailgun_recipients", "def", "send_message", "self", "subject", "text", "from_address", "recipients", "subject", "Subject", "of", "the", "email", "NUMBER", "text", "Text", "body", "of", "the", "email", "NUMBER", "from_email", "The", "email", "address", "that", "the", "message", "will", "be", "sent", "from", "NUMBER", "recipients", "A", "list", "of", "recipient", "email", "address", "NUMBER", "import", "request", "return", "request", "NUMBER", "post", "self", "NUMBER", "endpoint", "auth", "api", "self", "NUMBER", "api_key", "data", "from", "s", "TAG", "self", "NUMBER", "name", "from_address", "to", "recipients", "subject", "subject", "text", "text", "def", "process_response", "self", "statement", "session_id", "None", "Send", "the", "response", "statement", "as", "an", "email", "NUMBER", "subject", "Message", "from", "s", "self", "NUMBER", "name", "self", "NUMBER", "send_message", "subject", "statement", "NUMBER", "text", "self", "NUMBER", "from_address", "self", "NUMBER", "recipients", "return", "statement", "TAG", "TAG", "Input", "and", "output", "adapters", "be", "use", "by", "the", "chat", "bot", "as", "follows", "NUMBER", "NUMBER", "First", "a", "chat", "bot", "s", "get_response", "method", "be", "call", "NUMBER", "NUMBER", "The", "get_response", "method", "gets", "a", "Statement", "object", "as", "input", "from", "the", "input", "adapter", "NUMBER", "NUMBER", "The", "input", "statement", "be", "evaluated", "by", "the", "chat", "bot", "and", "a", "response", "be", "produced", "NUMBER", "NUMBER", "The", "response", "be", "pass", "to", "the", "output", "adapter", "NUMBER", "Note", "the", "following", "The", "get_response", "method", "can", "take", "optional", "parameters", "depending", "on", "the", "input", "adapter", "that", "be", "be", "use", "NUMBER", "The", "get_response", "method", "always", "returns", "the", "response", "that", "was", "pass", "to", "the", "output", "adapter", "NUMBER", "Now", "that", "we", "have", "covered", "how", "things", "currently", "be", "lets", "go", "over", "how", "things", "would", "be", "different", "if", "there", "were", "no", "input", "or", "output", "adapters", "NUMBER", "NUMBER", "The", "developer", "would", "write", "their", "code", "to", "check", "MailGun", "s", "API", "for", "new", "message", "NUMBER", "NUMBER", "If", "a", "new", "message", "was", "find", "then", "a", "Statement", "object", "would", "be", "pass", "to", "the", "chat", "bot", "s", "get_response", "method", "NUMBER", "NUMBER", "The", "get_response", "method", "would", "return", "the", "chat", "bot", "s", "response", "a", "Statement", "object", "to", "the", "input", "statement", "NUMBER", "NUMBER", "The", "developer", "would", "send", "this", "response", "back", "to", "the", "original", "sender", "NUMBER", "To", "reiterate", "the", "main", "motivation", "behind", "this", "change", "it", "be", "difficult", "to", "maintain", "code", "for", "every", "communications", "API", "NUMBER", "This", "change", "be", "meant", "to", "simplify", "things", "so", "that", "other", "libraries", "can", "handle", "interacting", "with", "external", "data", "sources", "and", "ChatterBot", "will", "just", "handle", "generating", "the", "response", "NUMBER", "Additionally", "input", "and", "output", "adapters", "don", "t", "always", "work", "with", "all", "developer", "s", "code", "setups", "NUMBER", "They", "assume", "that", "you", "want", "to", "create", "your", "chat", "bot", "entirely", "inside", "of", "ChatterBot", "relate", "classes", "NUMBER", "Instead", "of", "trying", "to", "support", "every", "use", "case", "it", "seems", "like", "it", "would", "be", "simpler", "to", "simplify", "how", "ChatterBot", "gets", "and", "returns", "information", "in", "general", "NUMBER", "The", "examples", "would", "have", "to", "be", "modify", "to", "manage", "sessions", "properly", "NUMBER", "For", "most", "of", "the", "simple", "examples", "that", "be", "currently", "include", "with", "ChatterBot", "there", "would", "be", "just", "one", "session", "NUMBER", "lucaszanella", "I", "ve", "update", "the", "original", "ticket", "to", "cover", "how", "things", "would", "work", "if", "input", "and", "output", "adapters", "were", "discontinued", "NUMBER", "It", "s", "under", "the", "new", "section", "titled", "How", "would", "things", "change", "if", "input", "and", "output", "adapters", "were", "remove", "Let", "me", "know", "if", "you", "have", "any", "question", "NUMBER", "davizucon", "I", "believe", "what", "you", "be", "describing", "be", "accurate", "NUMBER", "After", "this", "change", "be", "made", "the", "only", "difference", "there", "will", "be", "be", "that", "programmers", "will", "pass", "data", "TO", "chatterbot", "and", "a", "response", "will", "be", "returned", "they", "will", "then", "write", "code", "to", "do", "something", "with", "that", "response", "NUMBER", "Right", "now", "input", "and", "output", "adapters", "be", "somewhat", "limiting", "to", "the", "developer", "and", "I", "would", "prefer", "to", "encourage", "design", "patterns", "that", "don", "t", "force", "the", "developer", "into", "a", "difficult", "or", "limited", "scope", "NUMBER", "Doing", "this", "will", "enforce", "the", "use", "of", "sessions", "NUMBER", "The", "get_default", "and", "update_default", "methods", "were", "implement", "to", "ensure", "backwards", "compatibility", "to", "version", "of", "ChatterBot", "that", "were", "created", "before", "sessions", "were", "implement", "NUMBER", "Removing", "these", "methods", "will", "also", "simplify", "the", "design", "of", "the", "session", "manager", "NUMBER", "After", "deprecation", "be", "add", "an", "issue", "should", "be", "created", "containing", "the", "following", "details", "When", "the", "methods", "will", "be", "remove", "what", "version", "This", "looks", "pretty", "cool", "NUMBER", "I", "d", "be", "happy", "to", "add", "a", "link", "NUMBER", "If", "you", "be", "modifying", "chatterbot", "s", "codebase", "you", "will", "likely", "need", "to", "re", "install", "chatterbot", "after", "the", "modification", "pip", "install", "NUMBER", "upgrade", "NUMBER", "After", "than", "you", "should", "be", "able", "to", "call", "the", "train", "method", "to", "re", "train", "the", "chat", "bot", "with", "your", "update", "data", "NUMBER", "Hi", "everyone", "NUMBER", "corrects", "this", "problem", "NUMBER", "I", "apologize", "about", "the", "delay", "in", "track", "down", "the", "issue", "NUMBER", "Hi", "the", "ability", "to", "specify", "a", "path", "currently", "isn", "t", "available", "in", "ChatterBot", "NUMBER", "There", "be", "plan", "to", "add", "the", "ability", "to", "do", "so", "and", "there", "be", "currently", "a", "ticket", "open", "that", "request", "this", "feature", "LINK", "NUMBER", "This", "will", "be", "a", "relatively", "simple", "feature", "to", "add", "and", "it", "should", "be", "possible", "to", "add", "it", "in", "one", "of", "the", "upcoming", "release", "NUMBER", "Hi", "rajasimon", "The", "ability", "to", "specify", "custom", "corpus", "paths", "has", "be", "add", "in", "LINK", "and", "it", "will", "be", "available", "to", "use", "in", "the", "next", "release", "NUMBER", "I", "will", "update", "the", "documentation", "as", "well", "NUMBER", "I", "like", "the", "idea", "of", "having", "some", "kind", "of", "templateing", "functionality", "NUMBER", "However", "I", "don", "t", "think", "that", "the", "corpus", "be", "the", "right", "place", "to", "have", "this", "feature", "NUMBER", "ChatterBot", "s", "corpus", "be", "intended", "to", "a", "be", "a", "source", "of", "raw", "data", "examples", "of", "conversations", "bits", "of", "factual", "information", "etc", "NUMBER", "NUMBER", "A", "separate", "directory", "definitely", "sounds", "better", "NUMBER", "Unfortunately", "I", "don", "t", "have", "a", "concise", "answer", "for", "either", "of", "your", "question", "NUMBER", "As", "a", "long", "term", "solution", "it", "might", "work", "well", "or", "it", "might", "have", "unexpect", "conflict", "with", "a", "future", "item", "call", "Personas", "NUMBER", "Personas", "will", "be", "representations", "of", "personality", "for", "both", "users", "and", "chat", "bots", "NUMBER", "I", "think", "some", "of", "your", "recent", "comments", "and", "pull", "request", "hint", "upon", "the", "necessity", "of", "this", "functionality", "but", "unfortunately", "it", "be", "not", "a", "feature", "that", "I", "have", "had", "time", "to", "fully", "plan", "out", "yet", "NUMBER", "I", "don", "t", "think", "the", "above", "example", "be", "needed", "in", "the", "example", "section", "right", "at", "the", "moment", "NUMBER", "I", "don", "t", "think", "I", "ve", "documented", "the", "idea", "for", "personas", "anywhere", "yet", "NUMBER", "I", "will", "be", "sure", "to", "do", "so", "soon", "NUMBER", "If", "the", "owner", "agrees", "to", "allow", "the", "content", "to", "be", "release", "under", "a", "different", "license", "then", "yes", "it", "be", "safe", "to", "use", "NUMBER", "Usually", "it", "just", "takes", "an", "email", "to", "get", "in", "contact", "with", "the", "copyright", "owner", "NUMBER", "Because", "reusing", "text", "from", "LINK", "en", "us", "foundation", "alice", "was", "authorized", "by", "drwallace", "this", "should", "be", "ok", "to", "merge", "soon", "NUMBER", "I", "will", "check", "over", "the", "change", "to", "make", "sure", "everything", "be", "valid", "before", "merge", "it", "NUMBER", "I", "rebased", "this", "pull", "request", "against", "the", "master", "branch", "to", "bring", "in", "the", "exist", "fix", "for", "the", "NUMBER", "new", "years", "test", "bug", "NUMBER", "Given", "the", "first", "example", "with", "two", "short", "lists", "the", "chat", "bot", "would", "not", "make", "a", "connection", "between", "I", "be", "good", "NUMBER", "and", "That", "be", "good", "to", "hear", "NUMBER", "NUMBER", "That", "be", "it", "would", "not", "know", "that", "I", "be", "good", "NUMBER", "has", "That", "be", "good", "to", "hear", "NUMBER", "as", "a", "possible", "response", "NUMBER", "In", "the", "single", "longer", "list", "each", "statement", "will", "be", "learned", "as", "a", "response", "to", "the", "previous", "NUMBER", "Hmm", "maybe", "you", "could", "set", "get_most_frequent_response", "LINK", "_selection", "NUMBER", "html", "module", "chatterbot", "NUMBER", "response_selection", "python", "response_selection_method", "get_most_frequent_response", "Making", "this", "change", "would", "cause", "your", "bot", "to", "select", "the", "response", "that", "occur", "most", "frequently", "NUMBER", "If", "your", "correcting", "methods", "incremented", "the", "occurrence", "count", "of", "the", "correct", "response", "it", "should", "cause", "that", "response", "to", "be", "selected", "the", "next", "time", "NUMBER", "I", "believe", "your", "unicode", "header", "be", "incorrect", "NUMBER", "It", "should", "be", "code", "utf", "NUMBER", "ChatterBot", "be", "able", "to", "handle", "unicode", "values", "correctly", "NUMBER", "You", "can", "pass", "it", "non", "encoded", "data", "and", "it", "should", "be", "able", "to", "process", "it", "properly", "you", "ll", "just", "need", "to", "decode", "the", "output", "that", "it", "returns", "NUMBER", "Bellow", "be", "one", "of", "ChatterBot", "s", "test", "from", "test", "test_chatbot", "NUMBER", "py", "LINK", "_chatbot", "NUMBER", "py", "this", "be", "just", "a", "simple", "check", "that", "a", "unicode", "response", "can", "be", "pass", "in", "NUMBER", "python", "def", "test_get_response_unicode", "self", "Test", "the", "case", "that", "a", "unicode", "string", "be", "pass", "in", "NUMBER", "response", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "u", "\u0633\u0644\u0627\u0645", "self", "NUMBER", "assertGreater", "len", "response", "NUMBER", "text", "NUMBER", "This", "test", "pass", "in", "both", "Python", "NUMBER", "and", "NUMBER", "x", "NUMBER", "It", "also", "demonstrates", "that", "ChatterBot", "currently", "_can_", "take", "unicode", "input", "without", "issue", "NUMBER", "Based", "on", "this", "I", "believe", "the", "unicode", "error", "you", "be", "encountering", "may", "be", "in", "your", "own", "code", "rather", "than", "ChatterBot", "s", "I", "could", "be", "wrong", "but", "this", "be", "pretty", "strong", "evidence", "NUMBER", "edit", "version", "TAG", "TAG", "def", "on_chat_message", "self", "msg", "global", "chat_id", "content_type", "chat_type", "chat_id", "telepot", "NUMBER", "glance", "msg", "TAG", "reload", "sys", "TAG", "TAG", "sys", "NUMBER", "setdefaultencoding", "utf", "NUMBER", "TAG", "try", "chat_id", "msg", "chat", "id", "firstname", "msg", "from", "first_name", "TAG", "NUMBER", "encode", "utf", "NUMBER", "TAG", "username", "msg", "from", "username", "TAG", "NUMBER", "encode", "utf", "NUMBER", "TAG", "TAG", "TAG", "Hi", "engineer", "NUMBER", "Could", "you", "please", "provide", "some", "information", "on", "how", "you", "get", "the", "error", "Right", "now", "there", "isn", "t", "anything", "there", "that", "can", "let", "me", "help", "you", "NUMBER", "Some", "items", "that", "you", "might", "wight", "want", "to", "include", "at", "minimum", "be", "The", "version", "of", "Python", "you", "be", "use", "The", "version", "of", "ChatterBot", "you", "have", "install", "A", "list", "of", "steps", "that", "other", "developers", "could", "follow", "to", "recreate", "the", "error", "that", "you", "encountered", "Hi", "barseghyanartur", "Thank", "you", "for", "the", "pull", "request", "NUMBER", "The", "example", "at", "LINK", "_chatterbot", "be", "no", "longer", "actively", "maintained", "NUMBER", "A", "while", "back", "the", "example", "was", "moved", "to", "LINK", "_app", "It", "be", "very", "likely", "that", "the", "issue", "you", "encountered", "no", "longer", "exists", "in", "the", "update", "version", "of", "the", "app", "NUMBER", "Would", "you", "mind", "confirming", "that", "This", "be", "a", "good", "suggestion", "NUMBER", "Making", "change", "to", "use", "IETF", "language", "tags", "sounds", "like", "it", "would", "really", "benefit", "ChatterBot", "NUMBER", "These", "test", "should", "be", "in", "the", "tests_django", "LINK", "_django", "directory", "NUMBER", "You", "can", "run", "these", "django", "specific", "test", "with", "python", "runtests", "NUMBER", "py", "I", "don", "t", "have", "an", "ETA", "yet", "I", "m", "possibly", "looking", "to", "do", "one", "either", "this", "weekend", "or", "next", "week", "NUMBER", "This", "looks", "great", "thank", "you", "for", "add", "the", "test", "cases", "NUMBER", "They", "help", "make", "sure", "that", "this", "functionality", "never", "breaks", "again", "in", "the", "future", "NUMBER", "Closed", "by", "NUMBER", "Closed", "by", "NUMBER", "I", "can", "see", "it", "be", "currently", "having", "the", "issue", "you", "report", "in", "NUMBER", "As", "soon", "as", "the", "issue", "be", "resolve", "I", "ll", "draft", "a", "new", "version", "of", "chatterbot", "to", "release", "to", "pypi", "NUMBER", "Sure", "Feel", "free", "to", "make", "a", "pull", "request", "NUMBER", "There", "be", "also", "a", "section", "in", "the", "readme", "NUMBER", "md", "that", "lists", "various", "examples", "with", "Django", "and", "Flask", "a", "link", "to", "the", "live", "example", "might", "work", "well", "there", "as", "well", "NUMBER", "There", "be", "currently", "integration", "test", "for", "basic", "input", "and", "output", "adapters", "however", "some", "of", "the", "more", "complex", "ones", "that", "connect", "to", "APIs", "such", "as", "Gitter", "and", "Hipchat", "currently", "do", "not", "have", "test", "NUMBER", "Closing", "this", "to", "eliminate", "unnecessary", "work", "in", "lieu", "of", "NUMBER", "Hi", "there", "be", "several", "different", "example", "program", "in", "the", "examples", "directory", "oh", "GitHub", "LINK", "Feel", "free", "to", "check", "them", "out", "I", "believe", "they", "should", "provide", "sufficient", "examples", "to", "help", "guide", "you", "NUMBER", "Each", "of", "the", "items", "in", "the", "in_response_to", "list", "be", "technically", "a", "Response", "objects", "NUMBER", "Each", "Response", "object", "be", "a", "representation", "of", "the", "relationship", "between", "two", "statements", "NUMBER", "If", "the", "propose", "properties", "attribute", "be", "intended", "for", "styling", "the", "response", "statement", "would", "there", "be", "any", "issue", "saving", "them", "as", "extra_data", "on", "the", "statement", "itself", "image", "LINK", "bef", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "edb", "NUMBER", "ebea", "NUMBER", "ee", "NUMBER", "png", "Agreed", "my", "plan", "be", "to", "add", "a", "version", "of", "that", "diagram", "and", "an", "explanation", "to", "the", "documentation", "on", "statements", "and", "responses", "NUMBER", "LINK", "engineer", "NUMBER", "I", "think", "you", "be", "use", "an", "old", "version", "of", "ChatterBot", "NUMBER", "The", "twitter", "storage", "adapter", "has", "be", "remove", "because", "it", "had", "a", "number", "of", "issue", "NUMBER", "There", "be", "a", "new", "training", "module", "that", "replaces", "it", "and", "it", "should", "work", "much", "better", "LINK", "training", "with", "the", "twitter", "api", "Maybe", "that", "module", "doesn", "t", "exist", "in", "the", "version", "you", "have", "You", "can", "install", "the", "latest", "version", "of", "chatterbot", "by", "run", "pip", "install", "chatterbot", "upgrade", "Under", "some", "circumstances", "saying", "nothing", "be", "a", "valid", "response", "NUMBER", "I", "be", "considering", "experimenting", "with", "add", "functionality", "for", "a", "special", "response", "type", "that", "indicates", "that", "the", "bot", "should", "_not_", "respond", "NUMBER", "It", "would", "also", "be", "interesting", "to", "see", "if", "a", "long", "pause", "in", "a", "conversation", "with", "a", "user", "could", "be", "interpreted", "as", "a", "non", "response", "in", "which", "case", "the", "bot", "could", "learn", "to", "reply", "with", "something", "like", "_", "Are", "you", "still", "there", "_", "NUMBER", "Possible", "attributes", "duration", "the", "length", "of", "time", "that", "the", "pause", "lasts", "Use", "cases", "An", "adapter", "needs", "a", "default", "response", "for", "a", "case", "where", "it", "should", "not", "respond", "NUMBER", "confidence", "A", "filter", "remove", "all", "possible", "responses", "Creating", "efficient", "scheduling", "operations", "can", "often", "be", "a", "challenging", "problem", "to", "solve", "NUMBER", "What", "about", "offloading", "the", "task", "to", "the", "user", "s", "calendar", "Most", "calendar", "apps", "already", "display", "notifications", "when", "a", "scheduled", "event", "be", "come", "up", "and", "it", "would", "also", "make", "it", "possible", "synchronize", "the", "events", "across", "the", "user", "s", "devices", "if", "they", "were", "all", "connected", "to", "the", "same", "calendar", "NUMBER", "LINK", "us", "office", "office", "NUMBER", "api", "calendar", "rest", "operations", "LINK", "apps", "calendar", "v", "NUMBER", "reference", "Slack", "has", "a", "great", "API", "I", "ve", "be", "meaning", "to", "look", "into", "it", "at", "some", "point", "NUMBER", "vkosuri", "Unfortunately", "I", "don", "t", "have", "any", "recommendations", "NUMBER", "Actually", "there", "be", "a", "very", "cool", "datetime", "parsing", "utility", "that", "rmdort", "contributed", "a", "while", "back", "NUMBER", "You", "can", "check", "it", "out", "here", "LINK", "This", "might", "be", "useful", "for", "converting", "phrases", "like", "later", "today", "to", "an", "actual", "datetime", "object", "NUMBER", "boris", "NUMBER", "I", "think", "this", "issue", "was", "address", "in", "this", "PR", "LINK", "Hi", "HelloJyo", "what", "do", "you", "get", "as", "output", "when", "you", "enter", "python", "m", "chatterbot", "version", "in", "your", "terminal", "HelloJyo", "can", "you", "post", "your", "CHATTERBOT", "configuration", "from", "your", "settings", "NUMBER", "py", "file", "It", "may", "be", "able", "to", "help", "me", "determine", "what", "the", "cause", "of", "this", "issue", "be", "NUMBER", "ThomasKoscheck", "I", "don", "t", "think", "you", "have", "chatterbot", "install", "correctly", "NUMBER", "The", "output", "ImportError", "No", "module", "named", "jsondb", "tells", "me", "that", "you", "don", "t", "have", "that", "package", "install", "and", "that", "you", "be", "likely", "miss", "other", "requirements", "as", "well", "NUMBER", "The", "recommended", "way", "to", "install", "chatterbot", "be", "by", "run", "pip", "install", "chatterbot", "upgrade", "or", "if", "you", "be", "use", "linux", "sudo", "pip", "install", "chatterbot", "HelloJyo", "Did", "you", "follow", "the", "setup", "instructions", "for", "use", "ChatterBot", "with", "Django", "LINK", "installation", "Ah", "I", "m", "pretty", "sure", "I", "see", "your", "issue", "NUMBER", "For", "ChatterBot", "to", "work", "in", "Django", "you", "need", "to", "include", "it", "s", "Django", "extension", "module", "in", "your", "INSTALLED_APPS", "list", "NUMBER", "So", "you", "should", "add", "chatterbot", "NUMBER", "ext", "NUMBER", "django_chatterbot", "in", "your", "install", "apps", "NUMBER", "Also", "I", "see", "that", "you", "have", "the", "following", "in", "your", "install", "apps", "as", "well", "chatbot", "chatbot", "NUMBER", "chatterbot", "chatbot", "NUMBER", "chatterbot", "NUMBER", "orage", "If", "the", "chatterbot", "module", "be", "something", "you", "made", "yourself", "you", "should", "rename", "it", "to", "stop", "import", "error", "NUMBER", "For", "example", "if", "you", "try", "to", "import", "something", "from", "chatterbot", "NUMBER", "it", "will", "import", "from", "that", "module", "instead", "of", "the", "actual", "chatterbot", "package", "and", "you", "will", "get", "error", "about", "things", "like", "modules", "not", "be", "find", "NUMBER", "If", "the", "chatterbot", "module", "be", "just", "a", "downloaded", "copy", "of", "ChatterBot", "I", "recommend", "you", "install", "in", "with", "pip", "so", "that", "you", "don", "t", "have", "to", "worry", "about", "managing", "the", "package", "manually", "NUMBER", "I", "hope", "this", "helps", "NUMBER", "There", "be", "also", "a", "Django", "example", "on", "GitHub", "if", "an", "example", "would", "help", "LINK", "_app", "Sure", "you", "ll", "just", "have", "to", "remember", "to", "modify", "any", "imports", "to", "match", "the", "name", "space", "of", "your", "django", "app", "NUMBER", "Hi", "I", "just", "took", "a", "quick", "look", "at", "their", "API", "documentation", "LINK", "NUMBER", "It", "should", "definitely", "be", "possible", "to", "create", "a", "logic", "adapter", "that", "interacts", "with", "their", "API", "NUMBER", "I", "would", "be", "happy", "to", "accept", "a", "pull", "request", "that", "add", "this", "functionality", "if", "you", "or", "other", "developers", "were", "interested", "in", "contribute", "to", "the", "project", "NUMBER", "Looking", "forward", "to", "seeing", "git", "NUMBER", "In", "the", "meantime", "I", "m", "going", "to", "close", "this", "ticket", "off", "NUMBER", "Thank", "you", "NUMBER", "The", "current", "codebase", "do", "not", "support", "reinforcement", "learning", "NUMBER", "I", "would", "be", "happy", "to", "accept", "this", "as", "a", "feature", "request", "though", "NUMBER", "Issen", "NUMBER", "Minimal", "change", "have", "be", "made", "so", "far", "to", "facilitate", "feedback", "learning", "in", "ChatterBot", "NUMBER", "I", "agree", "this", "would", "be", "an", "awesome", "feature", "NUMBER", "Hi", "bekerov", "here", "be", "a", "link", "to", "the", "documentation", "for", "this", "function", "for", "reference", "link", "LINK", "chatterbot", "NUMBER", "conversation", "NUMBER", "Statement", "NUMBER", "add_response", "NUMBER", "The", "add_response", "method", "add", "the", "Response", "object", "as", "an", "element", "in", "the", "list", "of", "statements", "that", "the", "current", "statement", "be", "in", "response", "to", "NUMBER", "So", "for", "example", "python", "from", "chatterbot", "NUMBER", "conversation", "import", "Statement", "Response", "statement", "Statement", "I", "be", "doing", "well", "NUMBER", "response", "Response", "Hello", "how", "be", "you", "statement", "NUMBER", "add_response", "response", "Also", "keep", "in", "mind", "that", "doing", "this", "only", "modifies", "the", "objects", "in", "memory", "it", "do", "not", "commit", "them", "to", "the", "chat", "bot", "s", "database", "until", "you", "pass", "the", "statement", "object", "to", "the", "update", "method", "of", "the", "chat", "bot", "s", "storage", "adapter", "NUMBER", "Documentation", "on", "the", "available", "storage", "adapters", "can", "be", "find", "here", "LINK", "Let", "me", "know", "if", "you", "have", "any", "further", "question", "NUMBER", "Ok", "this", "makes", "sense", "NUMBER", "I", "never", "made", "change", "to", "add", "it", "vkosuri", "If", "you", "be", "interested", "in", "work", "on", "this", "that", "would", "be", "greatly", "appreciated", "NUMBER", "Hi", "SunYunyun", "the", "warning", "that", "you", "be", "seeing", "be", "just", "a", "warning", "not", "an", "error", "NUMBER", "It", "be", "display", "to", "make", "sure", "that", "developers", "be", "aware", "of", "the", "poor", "performance", "of", "the", "default", "file", "storage", "that", "be", "use", "unless", "they", "specify", "a", "different", "database", "NUMBER", "You", "said", "that", "nothing", "happens", "after", "this", "which", "example", "be", "you", "use", "This", "makes", "change", "so", "that", "if", "ChatterBot", "be", "be", "use", "with", "Django", "the", "Django", "Statement", "and", "Response", "models", "can", "be", "use", "in", "place", "of", "ChatterBot", "s", "Statement", "and", "Response", "objects", "NUMBER", "Previously", "the", "storage", "adapter", "converted", "incoming", "statement", "objects", "into", "Django", "model", "objects", "before", "saving", "and", "or", "returning", "them", "NUMBER", "Now", "this", "conversion", "be", "no", "longer", "required", "NUMBER", "This", "be", "going", "to", "need", "further", "test", "before", "it", "gets", "merge", "NUMBER", "Items", "that", "need", "to", "be", "checked", "off", "before", "this", "can", "be", "merge", "x", "Make", "sure", "ChatterBot", "statements", "responses", "and", "the", "Django", "models", "have", "the", "same", "methods", "x", "Make", "sure", "logic", "adapters", "all", "work", "with", "in", "Django", "x", "Make", "sure", "input", "adapters", "all", "work", "in", "Django", "x", "Make", "sure", "output", "adapters", "all", "work", "in", "Django", "Closes", "NUMBER", "vkosuri", "I", "m", "planning", "on", "taking", "care", "of", "NUMBER", "in", "a", "pull", "request", "after", "this", "one", "gets", "merge", "NUMBER", "I", "m", "pretty", "sure", "the", "reversal", "be", "just", "an", "issue", "with", "confusing", "variable", "names", "NUMBER", "Hi", "alex", "dh", "this", "be", "an", "interesting", "question", "NUMBER", "Normally", "I", "would", "recommend", "just", "training", "the", "chat", "bot", "based", "on", "the", "available", "data", "but", "it", "sounds", "like", "you", "data", "source", "be", "something", "that", "gets", "change", "externally", "NUMBER", "I", "ll", "have", "to", "think", "about", "this", "but", "I", "would", "definitely", "be", "interested", "in", "make", "change", "to", "ChatterBot", "to", "better", "accommodate", "this", "functionality", "NUMBER", "Sure", "statements", "can", "be", "delete", "use", "the", "remove", "method", "on", "the", "storage", "adapter", "LINK", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "NUMBER", "remove", "Currently", "ChatterBot", "s", "corpus", "format", "be", "essentially", "just", "a", "list", "of", "dialog", "sets", "NUMBER", "For", "example", "json", "conversations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "It", "would", "be", "a", "good", "idea", "to", "modify", "the", "format", "so", "that", "it", "can", "store", "more", "information", "as", "you", "suggested", "NUMBER", "kennetham", "Right", "now", "you", "can", "export", "your", "chat", "bot", "s", "knowledge", "as", "a", "JSON", "file", "LINK", "export", "exporting", "your", "chat", "bot", "s", "database", "as", "a", "training", "corpus", "The", "ability", "to", "specify", "a", "file", "path", "for", "a", "training", "corpus", "will", "be", "add", "in", "LINK", "vkosuri", "I", "haven", "t", "start", "work", "on", "anything", "to", "allow", "custom", "paths", "for", "corpus", "data", "NUMBER", "yet", "feel", "free", "to", "start", "if", "you", "be", "interested", "in", "work", "on", "it", "NUMBER", "For", "this", "ticket", "NUMBER", "i", "m", "in", "the", "process", "of", "researching", "the", "formats", "of", "other", "exist", "data", "corpora", "NUMBER", "I", "m", "interested", "to", "see", "if", "there", "be", "any", "design", "patterns", "that", "might", "be", "beneficial", "to", "follow", "NUMBER", "I", "just", "wanted", "to", "post", "a", "link", "for", "later", "reference", "NUMBER", "This", "be", "for", "the", "current", "work", "in", "progress", "concept", "for", "the", "future", "version", "of", "ChatterBot", "s", "dialog", "corpus", "file", "NUMBER", "I", "m", "still", "considering", "other", "ideas", "so", "this", "document", "will", "be", "update", "in", "the", "future", "NUMBER", "LINK", "Corpus", "Specification", "In", "this", "model", "responses", "be", "indicated", "by", "consecutive", "statements", "in", "each", "list", "NUMBER", "No", "problem", "any", "question", "you", "have", "about", "it", "be", "helpful", "because", "it", "lets", "me", "consider", "things", "that", "I", "might", "not", "have", "thought", "about", "NUMBER", "If", "you", "have", "any", "other", "question", "please", "ask", "them", "NUMBER", "I", "want", "to", "get", "as", "much", "feedback", "on", "the", "design", "as", "possible", "before", "committing", "to", "it", "NUMBER", "Also", "you", "be", "correct", "NUMBER", "For", "representing", "multiple", "responses", "to", "the", "same", "input", "the", "input", "will", "have", "to", "be", "listed", "multiple", "times", "NUMBER", "I", "designed", "it", "this", "way", "to", "avoid", "deep", "nested", "lists", "of", "responses", "which", "might", "be", "difficult", "for", "developers", "to", "read", "and", "more", "intensive", "for", "program", "to", "traverse", "NUMBER", "For", "programmable", "responses", "I", "usually", "recommend", "some", "form", "of", "a", "customized", "logic", "adapter", "NUMBER", "However", "I", "have", "seen", "valid", "cases", "where", "there", "be", "for", "example", "wildcards", "in", "statements", "NUMBER", "So", "a", "if", "a", "statement", "be", "something", "like", "My", "favorite", "color", "be", "color", "NUMBER", "In", "this", "case", "color", "can", "be", "any", "valid", "color", "NUMBER", "These", "wildcards", "be", "something", "that", "be", "well", "support", "by", "AIML", "LINK", "but", "it", "be", "currently", "something", "that", "be", "not", "well", "support", "by", "ChatterBot", "NUMBER", "I", "will", "definitely", "look", "into", "the", "possibility", "of", "support", "AIML", "in", "the", "new", "corpus", "format", "or", "something", "similar", "NUMBER", "Were", "there", "any", "features", "that", "you", "saw", "in", "Alice", "bot", "that", "ChatterBot", "doesn", "t", "have", "Hi", "rajasimon", "I", "be", "not", "very", "familiar", "with", "Django", "channels", "but", "they", "look", "quite", "interesting", "NUMBER", "Maybe", "take", "a", "look", "at", "the", "exist", "API", "view", "that", "be", "provide", "in", "the", "project", "LINK", "_chatterbot", "views", "NUMBER", "py", "rajasimon", "Django", "encourages", "secure", "request", "NUMBER", "If", "you", "be", "seeing", "an", "error", "about", "CSRF", "tokens", "then", "you", "likely", "need", "to", "add", "the", "token", "to", "the", "request", "you", "be", "sending", "to", "your", "API", "NUMBER", "Django", "provides", "several", "examples", "on", "how", "you", "can", "do", "this", "in", "their", "documentation", "LINK", "The", "solution", "you", "use", "depends", "on", "the", "setup", "of", "your", "code", "NUMBER", "If", "you", "be", "sending", "your", "request", "to", "the", "API", "use", "JavaScript", "then", "you", "probably", "want", "the", "AJAX", "solution", "NUMBER", "vkosuri", "Looks", "good", "to", "me", "Hi", "tshrjn", "sorry", "about", "the", "error", "BestMatch", "was", "a", "new", "class", "name", "that", "I", "add", "a", "few", "hours", "ago", "NUMBER", "I", "ve", "release", "the", "latest", "version", "of", "ChatterBot", "which", "include", "this", "class", "NUMBER", "To", "upgrade", "run", "pip", "install", "chatterbot", "upgrade", "This", "should", "fix", "your", "issue", "NUMBER", "ChatterBot", "uses", "logic", "adapters", "which", "be", "essentially", "just", "modules", "that", "take", "input", "and", "return", "a", "response", "NUMBER", "Each", "response", "that", "be", "returned", "has", "a", "confidence", "value", "associated", "with", "it", "NUMBER", "The", "confidence", "value", "be", "a", "numeric", "indicator", "of", "how", "accurate", "the", "logic", "adapter", "_thinks_", "the", "response", "be", "NUMBER", "A", "confidence", "score", "be", "_kind", "of_", "a", "metric", "for", "accuracy", "but", "it", "probably", "better", "reflects", "the", "breadth", "of", "a", "particular", "bot", "s", "knowledge", "than", "the", "accuracy", "of", "it", "s", "responses", "NUMBER", "Arguably", "a", "chat", "bot", "that", "responds", "more", "confidently", "may", "also", "be", "more", "accurate", "but", "that", "be", "based", "on", "the", "assumption", "that", "the", "set", "of", "logic", "adapters", "the", "bot", "uses", "be", "all", "completely", "accurate", "in", "their", "ability", "to", "judge", "the", "precision", "of", "the", "response", "they", "generate", "NUMBER", "Because", "ChatterBot", "s", "logic", "adapters", "each", "encompass", "a", "modular", "process", "for", "selecting", "a", "response", "there", "isn", "t", "necessarily", "a", "common", "way", "to", "gauge", "the", "accuracy", "of", "all", "of", "them", "NUMBER", "On", "an", "individual", "basis", "this", "might", "be", "possible", "but", "I", "don", "t", "have", "anything", "in", "the", "code", "base", "right", "now", "for", "doing", "a", "full", "evaluation", "of", "accuracy", "NUMBER", "Please", "let", "me", "know", "if", "I", "can", "clarify", "anything", "NUMBER", "Currently", "get_response", "do", "not", "return", "the", "confidence", "value", "NUMBER", "I", "can", "see", "how", "this", "would", "be", "useful", "and", "I", "would", "be", "happy", "to", "add", "it", "as", "a", "feature", "in", "one", "of", "the", "upcoming", "release", "of", "ChatterBot", "NUMBER", "Hi", "csrgxtu", "I", "ve", "opened", "NUMBER", "which", "makes", "a", "change", "so", "that", "the", "confidence", "score", "can", "be", "accessed", "on", "the", "returned", "statement", "object", "NUMBER", "response", "NUMBER", "confidence", "What", "action", "would", "the", "logic", "adapter", "be", "taking", "in", "this", "example", "Normally", "an", "input", "adapter", "would", "receive", "the", "input", "from", "Twitter", "and", "an", "output", "adapter", "send", "it", "back", "to", "Twitter", "NUMBER", "Right", "now", "there", "isn", "t", "a", "way", "to", "do", "this", "_exactly_", "NUMBER", "However", "one", "simple", "way", "to", "achieve", "it", "would", "be", "to", "create", "two", "separate", "chat", "bot", "instances", "that", "share", "the", "same", "database", "NUMBER", "At", "one", "point", "this", "feature", "was", "actually", "add", "LINK", "I", "remove", "it", "because", "there", "wasn", "t", "a", "way", "to", "specify", "where", "an", "input", "from", "one", "source", "should", "be", "returned", "to", "So", "for", "example", "input", "from", "Twitter", "should", "return", "output", "to", "Twitter", "NUMBER", "I", "don", "t", "think", "this", "functionality", "would", "benefit", "ChatterBot", "NUMBER", "Supporting", "multiple", "inputs", "and", "outputs", "really", "increases", "the", "complexity", "of", "get", "and", "returning", "responses", "NUMBER", "As", "I", "mention", "before", "use", "multiple", "chat", "bots", "should", "provide", "the", "same", "functionality", "but", "with", "no", "change", "required", "to", "the", "code", "base", "NUMBER", "Hi", "boris", "NUMBER", "glad", "you", "were", "able", "to", "resolve", "the", "issue", "NUMBER", "Sorry", "I", "didn", "t", "get", "a", "chance", "to", "respond", "earlier", "NUMBER", "HelloJyo", "Did", "you", "try", "setting", "the", "database", "parameter", "to", "match", "the", "name", "of", "the", "one", "you", "be", "use", "The", "available", "parameters", "be", "listed", "at", "the", "documentation", "link", "that", "vkosuri", "provide", "NUMBER", "Also", "if", "you", "be", "looking", "to", "add", "data", "to", "the", "chat", "bot", "s", "database", "I", "recommend", "taking", "a", "look", "at", "the", "training", "documentation", "LINK", "NUMBER", "The", "training", "process", "will", "conveniently", "set", "up", "all", "of", "the", "required", "relationship", "data", "between", "dialog", "in", "the", "database", "NUMBER", "There", "be", "other", "methods", "for", "training", "LINK", "This", "looks", "correct", "NUMBER", "This", "be", "an", "issue", "I", "be", "still", "looking", "in", "to", "NUMBER", "I", "think", "I", "have", "to", "look", "deeper", "into", "how", "Django", "s", "sessions", "work", "and", "specifically", "what", "triggers", "them", "to", "be", "created", "and", "destroyed", "NUMBER", "Hi", "vkosuri", "I", "apologize", "for", "not", "responding", "to", "your", "comment", "sooner", "NUMBER", "Somehow", "I", "miss", "the", "notification", "for", "it", "NUMBER", "I", "ve", "opened", "up", "a", "pull", "request", "that", "should", "resolve", "the", "issue", "you", "encountered", "NUMBER", "It", "appears", "that", "I", "forgot", "to", "handle", "the", "case", "that", "a", "chat", "session", "id", "could", "be", "held", "in", "the", "Django", "session", "but", "miss", "from", "the", "ChatBot", "s", "sessions", "NUMBER", "Was", "this", "error", "produced", "by", "run", "one", "of", "the", "examples", "I", "m", "going", "to", "close", "this", "ticket", "off", "as", "it", "be", "a", "duplicate", "of", "NUMBER", "Hi", "tryzombie", "NUMBER", "See", "my", "response", "here", "for", "how", "to", "fix", "LINK", "tryzombie", "NUMBER", "That", "be", "correct", "the", "chat", "bot", "will", "learn", "by", "speaking", "to", "the", "user", "NUMBER", "You", "can", "prevent", "the", "chat", "bot", "from", "learning", "by", "setting", "read_only", "True", "but", "by", "default", "the", "chat", "bot", "will", "continuously", "learn", "based", "on", "how", "the", "user", "responds", "to", "it", "NUMBER", "Ok", "hopefully", "I", "can", "help", "NUMBER", "NUMBER", "I", "want", "my", "bot", "to", "instantiate", "the", "conversation", "I", "m", "not", "exactly", "clear", "on", "this", "NUMBER", "Do", "you", "mean", "that", "you", "want", "the", "bot", "to", "start", "the", "conversation", "with", "the", "user", "instead", "of", "the", "way", "it", "be", "now", "where", "the", "users", "says", "something", "to", "the", "bot", "NUMBER", "This", "stack", "overflow", "post", "looks", "like", "it", "has", "a", "good", "answer", "for", "how", "to", "bind", "an", "event", "listener", "to", "the", "enter", "key", "LINK", "figure", "out", "how", "to", "bind", "the", "enter", "key", "to", "a", "function", "in", "tkinter", "What", "about", "just", "manually", "display", "the", "text", "Does", "it", "necessarily", "have", "to", "come", "from", "the", "chat", "bot", "Great", "I", "m", "glad", "to", "hear", "you", "figured", "it", "out", "NUMBER", "See", "LINK", "issuecomment", "NUMBER", "If", "you", "also", "change", "the", "example", "file", "as", "nimraTassawar", "describe", "undo", "those", "change", "NUMBER", "This", "issue", "be", "a", "duplicate", "of", "LINK", "Please", "direct", "any", "further", "question", "to", "that", "ticket", "NUMBER", "My", "original", "intention", "for", "the", "example", "django", "app", "was", "to", "keep", "it", "as", "simple", "as", "possible", "so", "that", "new", "developers", "could", "easily", "see", "the", "change", "they", "need", "to", "make", "to", "add", "ChatterBot", "to", "their", "Django", "project", "NUMBER", "I", "m", "not", "oppose", "to", "the", "idea", "of", "make", "additions", "but", "what", "would", "the", "benefit", "of", "a", "login", "page", "be", "Since", "ChatterBot", "be", "now", "support", "concurrent", "chat", "sessions", "I", "can", "see", "the", "ability", "to", "log", "into", "the", "Django", "example", "be", "useful", "NUMBER", "I", "think", "a", "good", "use", "case", "might", "be", "that", "someone", "wants", "to", "test", "out", "the", "chat", "bot", "having", "two", "different", "conversations", "NUMBER", "They", "could", "make", "two", "user", "accounts", "and", "sign", "in", "on", "different", "browsers", "NUMBER", "After", "looking", "at", "the", "documentation", "in", "their", "quickstart", "guide", "LINK", "I", "think", "ChatterBot", "actually", "already", "support", "all", "of", "the", "_story_", "functionality", "that", "you", "mention", "NUMBER", "The", "terminology", "between", "the", "two", "ChatterBot", "and", "wit", "NUMBER", "ai", "be", "rather", "different", "but", "I", "m", "seeing", "a", "lot", "of", "similarities", "NUMBER", "NUMBER", "Creating", "a", "story", "in", "wit", "NUMBER", "ai", "looks", "to", "be", "the", "same", "thing", "as", "training", "in", "chatterbot", "NUMBER", "NUMBER", "Adding", "a", "branch", "to", "a", "story", "in", "wit", "NUMBER", "ai", "appears", "to", "be", "the", "same", "as", "training", "with", "multiple", "variations", "of", "a", "conversation", "in", "ChatterBot", "I", "will", "note", "that", "wit", "NUMBER", "ia", "do", "categorize", "input", "statements", "with", "a", "label", "call", "intent", "NUMBER", "This", "categorization", "be", "something", "that", "ChatterBot", "do", "not", "do", "NUMBER", "bilalbayasut", "Is", "there", "a", "feature", "of", "_stories_", "that", "I", "miss", "ChatterBot", "currently", "doesn", "t", "support", "form", "like", "information", "gathering", "in", "the", "core", "NUMBER", "Typically", "this", "be", "a", "somewhat", "specialized", "process", "that", "depends", "highly", "on", "the", "type", "of", "information", "be", "gathered", "and", "the", "circumstances", "under", "which", "the", "information", "be", "needed", "NUMBER", "So", "yes", "if", "a", "someone", "wants", "to", "gather", "specific", "information", "from", "a", "user", "they", "must", "code", "this", "logic", "themselves", "NUMBER", "ChatterBot", "do", "allow", "you", "to", "create", "your", "own", "logic", "adapters", "LINK", "a", "logic", "adapter", "NUMBER", "html", "NUMBER", "Typically", "logic", "adapters", "be", "where", "responses", "be", "selected", "but", "you", "can", "also", "write", "your", "own", "modify", "ones", "that", "look", "for", "specific", "inputs", "to", "respond", "to", "NUMBER", "In", "the", "case", "of", "your", "example", "of", "ordering", "flowers", "it", "would", "be", "a", "simple", "enough", "case", "to", "check", "if", "the", "user", "s", "input", "says", "something", "close", "to", "Place", "my", "order", "of", "flowers", "then", "make", "an", "API", "call", "to", "place", "the", "order", "NUMBER", "Does", "this", "help", "at", "all", "Hi", "bilalbayasut", "my", "apologies", "for", "the", "late", "response", "NUMBER", "I", "appear", "to", "have", "miss", "your", "last", "comment", "NUMBER", "You", "can", "create", "response", "pairs", "in", "ChatterBot", "use", "it", "s", "_training_", "functionality", "NUMBER", "Here", "be", "a", "link", "to", "the", "documentation", "with", "more", "info", "and", "examples", "LINK", "Essentially", "training", "provides", "several", "different", "methods", "to", "add", "statements", "as", "you", "describe", "NUMBER", "For", "example", "if", "I", "want", "to", "tech", "the", "chat", "bot", "that", "Hi", "there", "be", "a", "response", "to", "Hello", "then", "I", "would", "do", "the", "following", "python", "from", "chatterbot", "NUMBER", "trainers", "import", "ListTrainer", "chatterbot", "ChatBot", "Training", "Example", "chatterbot", "NUMBER", "set_trainer", "ListTrainer", "chatterbot", "NUMBER", "train", "Hi", "there", "Hello", "You", "can", "make", "that", "conversation", "of", "statements", "as", "long", "as", "you", "want", "ChatterBot", "treats", "it", "as", "a", "single", "conversation", "NUMBER", "You", "can", "also", "create", "variations", "of", "the", "conversation", "by", "training", "on", "different", "data", "NUMBER", "I", "hope", "this", "helps", "please", "let", "me", "know", "if", "you", "have", "any", "further", "question", "or", "if", "you", "think", "there", "be", "anything", "I", "could", "add", "to", "the", "documentation", "to", "help", "explain", "this", "better", "NUMBER", "For", "now", "I", "m", "going", "to", "close", "this", "issue", "as", "I", "believe", "everything", "here", "should", "be", "resolve", "NUMBER", "Go", "to", "Users", "Hiruma", "MyWorkSpace", "GitHub", "tzchatbot", "env", "lib", "python", "NUMBER", "site", "package", "chatterbot", "If", "you", "see", "a", "directory", "named", "utils", "delete", "it", "NUMBER", "Also", "if", "you", "see", "a", "directory", "named", "adapters", "delete", "it", "NUMBER", "I", "had", "a", "similar", "issue", "recently", "NUMBER", "For", "some", "reason", "pip", "appears", "to", "be", "add", "cached", "outdate", "modules", "from", "the", "previous", "version", "when", "ChatterBot", "gets", "upgrade", "NUMBER", "vkosuri", "I", "thought", "this", "might", "be", "the", "case", "as", "well", "NUMBER", "I", "checked", "out", "the", "zip", "file", "that", "pypi", "has", "stored", "for", "the", "NUMBER", "release", "and", "all", "of", "the", "file", "appear", "to", "be", "correct", "NUMBER", "I", "did", "find", "that", "deleting", "the", "build", "directory", "in", "my", "ChatterBot", "directory", "locally", "correct", "the", "issue", "for", "me", "NUMBER", "mohitgoyal", "NUMBER", "Like", "most", "programming", "languages", "Python", "imports", "be", "case", "sensitive", "NUMBER", "Chatbot", "should", "be", "ChatBot", "in", "your", "import", "NUMBER", "Just", "a", "quick", "note", "the", "add_extra_data", "method", "add", "the", "data", "to", "the", "statement", "object", "NUMBER", "If", "you", "want", "to", "save", "the", "modify", "statement", "to", "your", "database", "you", "can", "do", "something", "like", "this", "python", "st", "Statement", "input_statement", "st", "NUMBER", "add_extra_data", "intent", "greetings", "bot", "NUMBER", "orage", "NUMBER", "update", "st", "I", "think", "I", "see", "the", "issue", "NUMBER", "In", "input_statement", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "the", "item", "returned", "input_statement", "be", "a", "statement", "object", "NUMBER", "Then", "you", "have", "st", "Statement", "input_statement", "which", "be", "creating", "a", "new", "statement", "where", "the", "text", "be", "another", "statement", "object", "NUMBER", "Try", "change", "st", "Statement", "input_statement", "to", "st", "Statement", "input_statement", "NUMBER", "text", "NUMBER", "No", "problem", "Happy", "to", "help", "NUMBER", "Hi", "loveJasmine", "the", "reason", "that", "a", "settings", "NUMBER", "py", "file", "be", "not", "include", "in", "the", "examples", "directory", "be", "because", "it", "would", "contain", "private", "API", "keys", "LINK", "for", "keep", "secret", "info", "such", "as", "api", "keys", "out", "of", "source", "control", "for", "the", "various", "examples", "that", "require", "them", "NUMBER", "To", "use", "this", "example", "you", "would", "need", "to", "register", "a", "bot", "on", "the", "Microsoft", "Bot", "Framework", "website", "and", "use", "the", "credentials", "given", "there", "NUMBER", "Your", "settings", "NUMBER", "py", "file", "should", "look", "similar", "to", "the", "following", "settings", "NUMBER", "py", "python", "Microsoft", "direct_line_token_or_secret", "xxxxxxxxxxxxxxxxx", "conversation_id", "xxxxxxxxxxxxxxxxx", "See", "LINK", "for", "my", "explanation", "of", "why", "there", "be", "no", "settings", "NUMBER", "py", "file", "include", "NUMBER", "In", "the", "case", "of", "this", "example", "if", "you", "look", "at", "the", "code", "you", "should", "see", "a", "comment", "that", "provides", "instructions", "on", "how", "to", "get", "set", "up", "python", "This", "example", "demonstrates", "how", "you", "can", "train", "your", "chat", "bot", "use", "data", "from", "Twitter", "NUMBER", "To", "use", "this", "example", "create", "a", "new", "file", "call", "settings", "NUMBER", "py", "NUMBER", "In", "settings", "NUMBER", "py", "define", "the", "following", "TWITTER", "CONSUMER_KEY", "my", "twitter", "consumer", "key", "CONSUMER_SECRET", "my", "twitter", "consumer", "secret", "ACCESS_TOKEN", "my", "access", "token", "ACCESS_TOKEN_SECRET", "my", "access", "token", "secret", "The", "following", "adapters", "share", "the", "same", "codebase", "but", "they", "use", "different", "comparison", "function", "to", "compare", "statements", "NUMBER", "ApproximateSentenceMatchAdapter", "ClosestMatchAdapter", "ClosestMeaningAdapter", "SentimentAdapter", "The", "BaseMatchAdapter", "can", "be", "renamed", "to", "MatchAdapter", "NUMBER", "Documentation", "will", "need", "to", "be", "update", "to", "show", "how", "to", "get", "the", "same", "functionality", "use", "the", "MatchAdapter", "as", "was", "available", "use", "the", "four", "other", "logic", "adapters", "NUMBER", "Hi", "shank", "NUMBER", "thank", "you", "for", "open", "this", "ticket", "NUMBER", "I", "will", "make", "change", "to", "the", "documentation", "to", "hopefully", "clarify", "these", "points", "NUMBER", "I", "ve", "update", "several", "pages", "of", "the", "documentation", "to", "hopefully", "clarify", "these", "question", "NUMBER", "Thank", "you", "again", "for", "ask", "for", "clarification", "NUMBER", "It", "be", "very", "helpful", "for", "improving", "ChatterBot", "s", "documentation", "NUMBER", "Please", "let", "me", "know", "if", "there", "be", "anything", "else", "that", "can", "be", "improved", "further", "NUMBER", "Hi", "NUMBER", "bkrmendy", "be", "correct", "NUMBER", "You", "should", "be", "able", "to", "resolve", "this", "issue", "by", "installing", "ChatterBot", "s", "dependencies", "before", "installing", "chatterbot", "itself", "NUMBER", "I", "ve", "opened", "a", "pull", "request", "NUMBER", "that", "makes", "change", "to", "correct", "this", "issue", "in", "future", "version", "of", "ChatterBot", "NUMBER", "Thank", "you", "for", "report", "the", "issue", "NUMBER", "x", "Create", "new", "session", "objects", "x", "Allow", "integration", "with", "Django", "sessions", "x", "Add", "test", "for", "sessions", "x", "Update", "documentation", "Closes", "NUMBER", "If", "two", "bots", "be", "created", "each", "will", "have", "sessions", "separate", "from", "each", "other", "NUMBER", "bot", "NUMBER", "ChatBot", "bot", "NUMBER", "ChatBot", "For", "each", "bot", "the", "sessions", "_could_", "be", "shared", "across", "multiple", "adapters", "as", "long", "as", "there", "be", "a", "shared", "session", "id", "NUMBER", "Right", "now", "this", "be", "something", "that", "the", "developer", "would", "have", "to", "handle", "manually", "because", "a", "ChatBot", "instance", "has", "no", "way", "of", "knowing", "that", "a", "Gitter", "user", "be", "the", "same", "person", "as", "a", "user", "on", "the", "Microsoft", "Bot", "Framework", "NUMBER", "To", "handle", "this", "the", "developer", "would", "likely", "have", "to", "store", "associations", "between", "a", "unique", "identifier", "and", "a", "user", "s", "verify", "usernames", "for", "each", "service", "Gitter", "HipChat", "Microsoft", "Bot", "Framework", "etc", "NUMBER", "NUMBER", "Hopefully", "this", "answers", "your", "question", "NUMBER", "I", "m", "planning", "to", "add", "more", "documentation", "on", "this", "to", "hopefully", "make", "it", "clearer", "NUMBER", "So", "your", "recommendation", "be", "to", "compare", "the", "text", "of", "each", "statement", "with", "the", "stop", "words", "remove", "when", "searching", "for", "the", "closest", "match", "Please", "correct", "me", "if", "I", "m", "wrong", "I", "just", "want", "to", "make", "sure", "I", "m", "understanding", "correctly", "NUMBER", "Hi", "vishnu", "ks", "alekaizer", "I", "m", "going", "to", "close", "this", "issue", "because", "I", "m", "still", "uncertain", "that", "it", "actually", "solves", "anything", "NUMBER", "I", "welcome", "any", "pull", "request", "or", "code", "samples", "as", "those", "may", "provide", "better", "grounds", "for", "demonstrating", "and", "collaborating", "on", "a", "solution", "NUMBER", "I", "think", "it", "s", "definitely", "possible", "but", "because", "it", "s", "a", "web", "app", "the", "audio", "will", "have", "to", "be", "processed", "on", "the", "client", "s", "side", "NUMBER", "This", "might", "make", "things", "easier", "because", "there", "be", "likely", "several", "javascript", "libraries", "available", "that", "handle", "speech", "recognition", "and", "speech", "synthesis", "NUMBER", "It", "looks", "like", "Google", "Chrome", "has", "build", "in", "support", "for", "both", "speech", "recognition", "and", "speech", "synthesis", "LINK", "apps", "that", "talk", "Introduction", "to", "the", "Speech", "Synthesis", "API", "To", "implement", "this", "you", "would", "have", "to", "add", "some", "javascript", "to", "listen", "to", "the", "user", "s", "speech", "then", "it", "could", "send", "that", "to", "the", "Django", "ChatterBot", "API", "to", "get", "the", "response", "NUMBER", "Once", "the", "response", "was", "returned", "it", "could", "be", "spoken", "aloud", "to", "the", "user", "NUMBER", "Hi", "vkosuri", "I", "m", "going", "to", "close", "this", "ticket", "off", "NUMBER", "I", "believe", "your", "question", "was", "answered", "feel", "free", "to", "reopen", "the", "ticket", "if", "I", "miss", "something", "or", "you", "still", "have", "question", "NUMBER", "vishnu", "ks", "Thank", "you", "for", "posting", "your", "your", "settings", "NUMBER", "py", "this", "might", "help", "me", "to", "recreate", "this", "issue", "NUMBER", "This", "appears", "to", "be", "the", "same", "error", "report", "by", "josefernandez", "NUMBER", "here", "LINK", "I", "m", "going", "to", "close", "this", "ticket", "for", "now", "as", "it", "appears", "to", "be", "a", "duplicate", "NUMBER", "Feel", "free", "to", "click", "the", "subscribe", "button", "on", "NUMBER", "to", "get", "notified", "of", "update", "on", "this", "issue", "NUMBER", "gullyy", "I", "m", "going", "to", "close", "this", "off", "NUMBER", "Feel", "free", "to", "re", "open", "it", "if", "the", "diagram", "in", "the", "documentation", "be", "not", "what", "you", "were", "looking", "for", "or", "if", "there", "be", "any", "details", "of", "ChatterBot", "s", "design", "that", "could", "befit", "by", "having", "another", "diagram", "created", "NUMBER", "Hi", "I", "ve", "made", "a", "change", "to", "the", "mongo_to_object", "method", "to", "make", "sure", "that", "the", "absence", "of", "the", "in_response_to", "attribute", "will", "not", "cause", "an", "error", "NUMBER", "You", "can", "take", "a", "look", "at", "NUMBER", "for", "details", "on", "what", "was", "change", "NUMBER", "Hi", "onlydarkknight", "I", "ve", "made", "change", "to", "correct", "the", "issue", "NUMBER", "I", "ve", "also", "add", "a", "unit", "test", "to", "make", "sure", "this", "doesn", "t", "break", "again", "in", "the", "future", "NUMBER", "These", "change", "will", "be", "available", "when", "I", "release", "the", "next", "version", "of", "ChatterBot", "NUMBER", "Thank", "you", "for", "posting", "both", "your", "example", "code", "and", "the", "error", "traceback", "NUMBER", "It", "made", "debugging", "the", "issue", "much", "easier", "NUMBER", "You", "don", "t", "have", "to", "wait", "NUMBER", "I", "release", "the", "next", "version", "this", "morning", "NUMBER", "Version", "NUMBER", "include", "the", "fix", "NUMBER", "Looking", "at", "the", "traceback", "it", "appears", "that", "the", "issue", "be", "come", "from", "the", "jsondb", "package", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "jsondb", "db", "NUMBER", "py", "NUMBER", "Please", "make", "sure", "you", "have", "the", "latest", "version", "install", "by", "run", "pip", "install", "jsondatabase", "upgrade", "You", "may", "also", "find", "that", "you", "need", "to", "encode", "test", "from", "the", "response", "statement", "to", "display", "it", "in", "the", "terminal", "NUMBER", "I", "ve", "add", "an", "example", "bellow", "to", "help", "you", "NUMBER", "python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Ron", "Obvious", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "hindi", "NUMBER", "greetings", "text", "unicode", "u", "\u0928\u092e\u0938", "\u0924", "response", "chatbot", "NUMBER", "get_response", "text", "print", "response", "NUMBER", "text", "NUMBER", "encode", "utf", "NUMBER", "I", "was", "able", "to", "run", "the", "example", "I", "posted", "without", "error", "NUMBER", "In", "the", "traceback", "you", "posted", "the", "part", "that", "says", "character", "maps", "to", "TAG", "looks", "very", "odd", "to", "me", "NUMBER", "Is", "it", "possible", "that", "the", "default", "encoding", "isn", "t", "set", "on", "your", "computer", "To", "check", "this", "what", "be", "the", "output", "of", "python", "import", "sys", "print", "sys", "NUMBER", "getdefaultencoding", "This", "Stack", "Overflow", "LINK", "to", "print", "utf", "NUMBER", "encoded", "text", "to", "the", "console", "in", "python", "NUMBER", "question", "might", "serve", "as", "a", "good", "reference", "if", "this", "be", "the", "case", "NUMBER", "Could", "you", "check", "what", "version", "of", "ChatterBot", "you", "have", "install", "If", "you", "have", "version", "NUMBER", "or", "lower", "then", "you", "don", "t", "have", "this", "method", "available", "NUMBER", "Right", "now", "it", "be", "only", "available", "if", "you", "install", "ChatterBot", "from", "source", "to", "get", "the", "current", "version", "or", "if", "you", "wait", "until", "version", "NUMBER", "be", "release", "NUMBER", "Feel", "free", "to", "reopen", "this", "ticket", "if", "I", "have", "incorrectly", "address", "the", "issue", "NUMBER", "Hi", "graylu", "NUMBER", "would", "remove", "the", "try", "except", "block", "and", "setting", "your", "own", "termination", "condition", "work", "for", "you", "For", "example", "you", "could", "do", "something", "like", "python", "while", "my_condition", "bot_input", "bot", "NUMBER", "get_response", "None", "How", "be", "you", "use", "ChatterBot", "in", "Spyder", "I", "m", "not", "very", "familiar", "with", "Spyder", "Maybe", "I", "can", "help", "figure", "out", "a", "solution", "based", "on", "your", "setup", "NUMBER", "For", "a", "GUI", "example", "there", "be", "one", "use", "Tkinter", "in", "the", "examples", "directory", "LINK", "_gui", "NUMBER", "py", "I", "m", "looking", "into", "possible", "solution", "NUMBER", "According", "to", "a", "few", "sources", "online", "you", "should", "be", "able", "to", "exit", "a", "process", "run", "in", "a", "Spyder", "console", "by", "pressing", "ctrl", "c", "NUMBER", "Another", "source", "stated", "that", "you", "can", "press", "I", "_twice_", "to", "interrupt", "the", "kernel", "LINK", "NUMBER", "Let", "me", "know", "if", "either", "of", "these", "work", "for", "you", "graylu", "NUMBER", "I", "m", "sorry", "but", "I", "don", "t", "think", "this", "be", "a", "functionality", "that", "I", "can", "add", "to", "ChatterBot", "NUMBER", "I", "m", "not", "very", "familiar", "with", "the", "iPython", "ecosystem", "and", "I", "can", "t", "make", "a", "recommendation", "on", "how", "to", "do", "this", "NUMBER", "I", "ve", "looked", "into", "the", "possibility", "that", "other", "Python", "frameworks", "that", "typically", "run", "in", "a", "loop", "might", "handle", "this", "Django", "or", "Flask", "for", "example", "but", "I", "could", "not", "find", "any", "evidence", "of", "other", "developers", "attempting", "this", "NUMBER", "I", "m", "open", "to", "accepting", "a", "pull", "request", "if", "anyone", "be", "interested", "and", "can", "figure", "out", "a", "good", "way", "to", "handle", "this", "NUMBER", "For", "now", "I", "m", "going", "to", "close", "this", "ticket", "because", "I", "m", "not", "sure", "that", "there", "be", "a", "good", "way", "to", "do", "this", "NUMBER", "larkinscott", "Thanks", "this", "sounds", "useful", "NUMBER", "I", "m", "willing", "to", "give", "it", "a", "shot", "NUMBER", "Awesome", "glad", "this", "get", "resolve", "NUMBER", "Sure", "let", "s", "pick", "just", "one", "version", "of", "Python", "to", "use", "and", "go", "from", "there", "NUMBER", "Which", "version", "of", "Python", "would", "you", "_prefer_", "to", "get", "chatterbot", "install", "under", "Ok", "so", "bear", "with", "me", "if", "you", "have", "already", "do", "this", "NUMBER", "Can", "you", "tell", "me", "the", "output", "if", "you", "enter", "the", "following", "pip", "NUMBER", "install", "chatterbot", "upgrade", "python", "NUMBER", "m", "chatterbot", "version", "Ok", "so", "looking", "at", "the", "traceback", "the", "UnsuitableForProductionWarning", "be", "just", "a", "warning", "and", "_can_", "be", "ignored", "NUMBER", "The", "MissingCorpusError", "be", "a", "definitely", "an", "issue", "NUMBER", "What", "happens", "when", "you", "run", "the", "command", "it", "reccomends", "python", "NUMBER", "m", "textblob", "NUMBER", "download_corpora", "python", "NUMBER", "chatbot", "NUMBER", "py", "Awesome", "I", "m", "glad", "it", "worked", "NUMBER", "I", "will", "note", "that", "I", "do", "have", "plan", "to", "remove", "textblob", "from", "ChatterBot", "in", "the", "future", "in", "favor", "of", "handle", "tasks", "like", "this", "automatically", "NUMBER", "ChatterBot", "actually", "already", "handles", "this", "internally", "for", "the", "NLTK", "data", "corpus", "NUMBER", "An", "example", "can", "be", "seen", "here", "LINK", "L", "NUMBER", "The", "issue", "be", "textblob", "which", "be", "just", "another", "library", "that", "wraps", "NLTK", "to", "provide", "convenient", "functionality", "NUMBER", "Textblob", "as", "you", "saw", "handles", "the", "downloads", "explicitly", "instead", "of", "automatically", "NUMBER", "The", "goal", "moving", "forward", "would", "be", "simply", "to", "remove", "ChatterBot", "s", "dependency", "on", "textblob", "NUMBER", "Hi", "josefernandez", "NUMBER", "I", "m", "looking", "in", "to", "this", "NUMBER", "My", "goal", "be", "to", "create", "a", "test", "case", "that", "recreates", "the", "issue", "NUMBER", "josefernandez", "NUMBER", "Could", "you", "tell", "me", "what", "version", "of", "ChatterBot", "you", "have", "install", "You", "should", "be", "able", "to", "check", "this", "by", "run", "python", "m", "chatterbot", "version", "NUMBER", "Not", "yet", "NUMBER", "For", "some", "reason", "I", "can", "t", "seem", "to", "recreate", "the", "error", "NUMBER", "I", "will", "try", "to", "look", "into", "if", "further", "as", "soon", "as", "I", "have", "time", "NUMBER", "In", "the", "mean", "time", "if", "anyone", "else", "feels", "like", "taking", "a", "crack", "at", "this", "the", "issue", "be", "come", "from", "these", "lines", "NUMBER", "NUMBER", "in", "LINK", "_chatterbot", "views", "NUMBER", "py", "L", "NUMBER", "python", "if", "request", "NUMBER", "is_ajax", "input_data", "json", "NUMBER", "loads", "request", "NUMBER", "read", "NUMBER", "decode", "utf", "NUMBER", "I", "believe", "this", "issue", "has", "be", "correct", "by", "NUMBER", "I", "m", "going", "to", "close", "this", "ticket", "off", "for", "now", "feel", "free", "to", "reopen", "it", "if", "the", "issue", "persists", "NUMBER", "Hi", "phpmind", "It", "sounds", "like", "you", "might", "need", "to", "create", "a", "logic", "adapter", "LINK", "a", "logic", "adapter", "NUMBER", "html", "that", "handles", "the", "lookups", "to", "the", "endpoint", "that", "you", "be", "get", "your", "flight", "data", "from", "NUMBER", "This", "will", "allow", "you", "to", "control", "what", "pattern", "your", "bot", "looks", "for", "to", "trigger", "a", "lookup", "and", "control", "how", "it", "extracts", "that", "information", "from", "the", "user", "s", "input", "NUMBER", "ChatterBot", "doesn", "t", "have", "any", "kind", "of", "char", "generating", "functionality", "maybe", "look", "into", "something", "like", "matplotlib", "LINK", "For", "machine", "learning", "ChatterBot", "do", "searches", "on", "statements", "stored", "as", "a", "graph", "data", "structure", "NUMBER", "Many", "of", "the", "logic", "adapters", "use", "different", "methods", "such", "as", "Bayesian", "Networks", "for", "statement", "analysis", "to", "select", "responses", "NUMBER", "I", "m", "actually", "in", "the", "process", "of", "researching", "the", "Ubuntu", "data", "corpus", "and", "looking", "at", "ways", "to", "allow", "it", "to", "be", "easily", "loaded", "into", "a", "ChatterBot", "instance", "s", "knowledge", "base", "NUMBER", "Here", "be", "a", "few", "resources", "if", "you", "be", "interested", "in", "checking", "out", "the", "current", "training", "modules", "that", "be", "use", "Training", "documentation", "LINK", "Training", "source", "LINK", "GPU", "processing", "isn", "t", "something", "that", "I", "have", "a", "lot", "of", "experience", "with", "NUMBER", "I", "think", "you", "might", "get", "a", "better", "answer", "to", "that", "question", "by", "rephrasing", "it", "to", "be", "slightly", "more", "generic", "maybe", "just", "about", "GPU", "processing", "in", "Python", "in", "general", "and", "ask", "on", "a", "site", "like", "Stack", "Overflow", "LINK", "NUMBER", "davideboschetto", "Thank", "you", "this", "looks", "good", "NUMBER", "I", "ll", "merge", "it", "in", "NUMBER", "Hi", "alekaizer", "I", "think", "I", "might", "be", "able", "to", "provide", "a", "few", "suggestions", "NUMBER", "When", "an", "instance", "of", "the", "ChatBot", "class", "be", "trained", "all", "of", "the", "knowledge", "it", "learns", "get", "s", "write", "to", "it", "s", "database", "NUMBER", "Each", "ChatBot", "by", "default", "be", "actually", "mostly", "stateless", "the", "only", "exception", "be", "it", "s", "recent_statements", "attribute", "that", "stores", "the", "current", "conversation", "that", "the", "user", "be", "having", "with", "the", "bot", "NUMBER", "What", "database", "be", "you", "use", "for", "your", "chat", "bots", "I", "m", "wondering", "if", "instead", "of", "serializing", "the", "entire", "chat", "bot", "if", "it", "would", "be", "simpler", "to", "specify", "a", "different", "storage", "location", "for", "each", "user", "s", "bot", "s", "data", "NUMBER", "If", "the", "new", "bots", "be", "use", "the", "same", "database", "there", "be", "no", "need", "to", "train", "them", "NUMBER", "Otherwise", "if", "it", "be", "an", "empty", "database", "training", "be", "definitely", "recommended", "NUMBER", "alekaizer", "That", "be", "an", "excellent", "example", "NUMBER", "There", "isn", "t", "a", "better", "way", "to", "provide", "a", "default", "response", "I", "usually", "recommend", "something", "similar", "to", "that", "as", "a", "solution", "NUMBER", "datta", "NUMBER", "Are", "you", "sure", "you", "be", "typing", "it", "into", "the", "terminal", "_exactly_", "as", "it", "was", "write", "above", "The", "error", "message", "be", "correct", "there", "be", "no", "NUMBER", "input", "attribute", "after", "NUMBER", "logic", "NUMBER", "I", "think", "maybe", "you", "meant", "to", "type", "just", "bot", "NUMBER", "input", "NUMBER", "process_input", "NUMBER", "A", "UnicodeDecodeError", "be", "a", "Python", "error", "that", "be", "triggered", "when", "a", "file", "be", "opened", "for", "reading", "without", "the", "encoding", "be", "properly", "specified", "NUMBER", "I", "ll", "look", "into", "this", "to", "make", "sure", "that", "ChatterBot", "s", "corpus", "reader", "be", "specify", "it", "correctly", "NUMBER", "datta", "NUMBER", "I", "ve", "made", "a", "correction", "to", "the", "German", "corpus", "that", "should", "fix", "the", "issue", "you", "report", "LINK", "This", "should", "definitely", "be", "possible", "NUMBER", "I", "ll", "have", "to", "look", "into", "the", "format", "of", "the", "data", "in", "the", "Ubuntu", "corpora", "before", "I", "can", "make", "a", "recommendation", "on", "how", "to", "do", "this", "NUMBER", "In", "the", "mean", "time", "feel", "free", "to", "take", "a", "look", "at", "the", "exist", "training", "modules", "for", "some", "ideas", "LINK", "vkosuri", "Looks", "good", "be", "this", "ready", "to", "be", "review", "vkosuri", "From", "what", "I", "can", "see", "this", "looks", "fantastic", "NUMBER", "In", "the", "examples", "be", "the", "value", "for", "directline_access_token_or_secret", "an", "actual", "access", "token", "Comments", "feedback", "Overall", "the", "code", "looks", "fantastic", "NUMBER", "I", "m", "very", "glad", "to", "see", "that", "logging", "statements", "were", "include", "NUMBER", "It", "might", "be", "useful", "to", "include", "a", "simple", "example", "program", "in", "the", "examples", "directory", "NUMBER", "This", "would", "also", "be", "helpful", "for", "manual", "test", "since", "there", "aren", "t", "any", "unit", "test", "yet", "NUMBER", "I", "would", "be", "happy", "to", "help", "write", "test", "for", "this", "let", "me", "know", "NUMBER", "How", "did", "you", "get", "the", "value", "to", "use", "for", "the", "conversation_id", "I", "m", "trying", "to", "set", "up", "the", "example", "to", "run", "locally", "do", "I", "need", "to", "manually", "authenticate", "with", "the", "API", "and", "start", "a", "new", "conversation", "to", "get", "a", "conversation_id", "I", "believe", "all", "the", "change", "here", "look", "good", "NUMBER", "ThomasKoscheck", "I", "m", "going", "to", "close", "this", "pull", "request", "due", "to", "the", "aforementioned", "issue", "NUMBER", "Lack", "of", "a", "way", "to", "train", "in", "Django", "be", "currently", "a", "know", "issue", "LINK", "NUMBER", "I", "m", "in", "the", "process", "of", "developing", "a", "method", "to", "add", "this", "functionality", "NUMBER", "It", "looks", "like", "occurrences", "currently", "aren", "t", "be", "tracked", "by", "the", "Django", "models", "I", "will", "add", "a", "migration", "to", "fix", "this", "for", "the", "next", "release", "NUMBER", "maclogan", "Actually", "I", "was", "wrong", "NUMBER", "Occurrence", "counts", "be", "already", "on", "the", "Django", "models", "LINK", "_chatterbot", "models", "NUMBER", "py", "Hi", "alekaizer", "how", "be", "you", "get", "these", "results", "I", "don", "t", "believe", "it", "should", "be", "possible", "for", "these", "two", "statements", "to", "exist", "separately", "NUMBER", "The", "_two_", "statements", "you", "have", "listed", "be", "the", "same", "statement", "because", "they", "have", "the", "same", "ID", "NUMBER", "Mongo", "DB", "won", "t", "allow", "two", "objects", "to", "have", "the", "same", "ID", "and", "ChatterBot", "applies", "a", "unique", "index", "constraint", "to", "the", "text", "attribute", "of", "statements", "so", "two", "statements", "cannot", "be", "the", "same", "NUMBER", "I", "might", "have", "miss", "something", "but", "maybe", "the", "issue", "be", "just", "how", "you", "be", "inspecting", "the", "database", "I", "_think_", "this", "be", "the", "correct", "functionality", "NUMBER", "If", "an", "entry", "exists", "for", "Go", "ahead", "and", "ask", "NUMBER", "then", "the", "in_response_to", "attribute", "for", "that", "statement", "should", "list", "Can", "I", "ask", "you", "a", "question", "as", "a", "response", "NUMBER", "The", "actual", "entry", "for", "Can", "I", "ask", "you", "a", "question", "should", "have", "in_response_to", "as", "empty", "because", "the", "chat", "bot", "hasn", "t", "learned", "anything", "in", "response", "to", "Can", "I", "ask", "you", "a", "question", "NUMBER", "I", "think", "the", "issue", "here", "might", "just", "be", "the", "word", "on", "the", "attributes", "NUMBER", "Go", "ahead", "and", "ask", "NUMBER", "be", "in", "response", "to", "Can", "I", "ask", "you", "a", "question", "NUMBER", "Can", "I", "ask", "you", "a", "question", "be", "in", "response", "to", "nothing", "NUMBER", "Let", "me", "know", "if", "this", "answers", "your", "question", "NUMBER", "There", "be", "a", "few", "reasons", "why", "statements", "like", "Can", "I", "ask", "you", "a", "question", "be", "stored", "when", "they", "have", "an", "empty", "in_response_to", "attribute", "NUMBER", "NUMBER", "Other", "data", "can", "be", "stored", "on", "the", "statement", "object", "NUMBER", "For", "example", "statements", "can", "have", "an", "extra_data", "attribute", "that", "holds", "information", "generate", "by", "various", "adapters", "NUMBER", "NUMBER", "For", "data", "consistency", "NUMBER", "Every", "response", "has", "a", "corresponding", "statement", "that", "_can_", "have", "responses", "NUMBER", "NUMBER", "From", "a", "performance", "perspective", "it", "be", "useful", "to", "have", "it", "in", "case", "we", "need", "to", "list", "all", "statements", "know", "by", "the", "chat", "bot", "NUMBER", "If", "we", "did", "not", "do", "this", "then", "we", "would", "need", "to", "traverse", "all", "statements", "and", "all", "statement", "responses", "to", "list", "them", "NUMBER", "NUMBER", "Since", "the", "chat", "bot", "s", "database", "be", "essentially", "storing", "a", "graph", "data", "structure", "represented", "as", "the", "relationship", "between", "statements", "and", "responses", "then", "it", "be", "useful", "to", "have", "the", "next", "statement", "in", "the", "graph", "even", "if", "that", "statement", "has", "no", "know", "responses", "NUMBER", "This", "just", "tells", "us", "that", "there", "be", "more", "to", "learn", "NUMBER", "I", "hope", "these", "help", "NUMBER", "Closes", "NUMBER", "Sure", "consider", "a", "scenario", "where", "multiple", "logic", "adapters", "be", "be", "use", "NUMBER", "In", "a", "case", "where", "the", "outputs", "generate", "by", "the", "logic", "adapters", "be", "as", "follows", "Confidence", "Statement", "NUMBER", "Good", "morning", "NUMBER", "NUMBER", "Good", "morning", "NUMBER", "NUMBER", "Good", "night", "NUMBER", "In", "this", "case", "two", "of", "the", "logic", "adapters", "have", "generate", "the", "same", "result", "NUMBER", "The", "idea", "behind", "these", "change", "be", "to", "treat", "the", "fact", "that", "the", "two", "adapters", "have", "agreed", "on", "a", "response", "as", "a", "significant", "indicator", "that", "this", "particular", "response", "has", "a", "greater", "probability", "of", "be", "a", "more", "accurate", "response", "to", "the", "input", "NUMBER", "It", "looks", "like", "it", "was", "renamed", "to", "compliment", "NUMBER", "corpus", "NUMBER", "json", "LINK", "Are", "PT", "and", "BR", "representing", "different", "dialects", "of", "Portuguese", "If", "they", "be", "remove", "the", "suffix", "was", "my", "mistake", "in", "which", "case", "I", "will", "go", "back", "and", "make", "the", "necessary", "change", "NUMBER", "Sorry", "I", "haven", "t", "responded", "to", "NUMBER", "yet", "I", "haven", "t", "had", "a", "chance", "to", "look", "into", "it", "NUMBER", "It", "may", "be", "a", "bug", "or", "it", "might", "be", "the", "result", "of", "the", "exist", "algorithms", "be", "use", "NUMBER", "Once", "I", "have", "a", "chance", "to", "walk", "through", "what", "be", "happening", "I", "will", "respond", "with", "some", "kind", "of", "answer", "NUMBER", "Ok", "I", "ll", "create", "a", "pull", "request", "to", "separate", "the", "dialects", "i", "m", "also", "not", "an", "expert", "of", "Portuguese", "NUMBER", "I", "think", "I", "m", "going", "to", "keep", "the", "directories", "separate", "though", "so", "something", "like", "data", "portuguese", "brazilian", "compliment", "NUMBER", "corpus", "NUMBER", "json", "and", "data", "portuguese", "somethingelse", "NUMBER", "corpus", "NUMBER", "json", "alekaizer", "Actually", "after", "a", "bit", "of", "research", "LINK", "_dialects", "it", "looks", "like", "the", "two", "dialects", "be", "otherwise", "indistinguishable", "NUMBER", "I", "m", "going", "to", "leave", "the", "directory", "as", "be", "for", "now", "NUMBER", "Even", "google", "translate", "appear", "to", "not", "distinguish", "between", "Portuguese", "and", "Brazilian", "Portuguese", "NUMBER", "Yes", "I", "briefly", "mention", "add", "support", "for", "support", "conversations", "with", "multiple", "different", "users", "in", "LINK", "issuecomment", "NUMBER", "but", "essentially", "the", "way", "it", "would", "be", "support", "be", "with", "a", "form", "of", "session", "management", "for", "each", "conversation", "_session_", "that", "that", "the", "bot", "be", "having", "NUMBER", "So", "far", "I", "was", "considering", "change", "the", "recent_statements", "variable", "to", "be", "a", "dictionary", "where", "the", "keys", "be", "unique", "session", "ids", "and", "the", "values", "be", "the", "queues", "holding", "the", "most", "recent", "conversation", "for", "that", "session", "NUMBER", "A", "few", "of", "the", "methods", "in", "the", "ChatBot", "class", "will", "have", "to", "be", "modify", "and", "a", "number", "of", "test", "will", "need", "to", "be", "modify", "or", "created", "NUMBER", "One", "thing", "I", "m", "still", "unsure", "about", "be", "what", "to", "add", "for", "methods", "to", "allow", "the", "current", "session", "to", "be", "specified", "NUMBER", "rmdort", "That", "might", "cause", "a", "slight", "issue", "if", "the", "same", "Statement", "object", "in", "the", "database", "becomes", "a", "part", "of", "multiple", "conversation", "sessions", "that", "users", "be", "having", "with", "the", "bot", "NUMBER", "It", "would", "allow", "session", "ids", "to", "be", "overwritten", "by", "other", "user", "s", "conversations", "NUMBER", "vkosuri", "Looks", "interesting", "in", "the", "ConnectionCache", "what", "be", "the", "_connections_", "usually", "Session", "management", "for", "ChatterBot", "will", "essentially", "just", "be", "add", "support", "for", "having", "conversations", "with", "multiple", "users", "at", "the", "same", "time", "NUMBER", "Right", "now", "the", "the", "ChatBot", "class", "just", "stores", "the", "current", "conversation", "NUMBER", "ChatBot", "Conversation", "The", "change", "that", "needs", "to", "be", "made", "be", "to", "allow", "the", "chat", "bot", "to", "store", "multiple", "conversations", "NUMBER", "Conversation", "NUMBER", "ChatBot", "Conversation", "NUMBER", "Conversation", "NUMBER", "Right", "now", "my", "thoughts", "be", "as", "follows", "feel", "free", "to", "ask", "question", "or", "add", "suggestions", "NUMBER", "Each", "logic", "adapter", "only", "needs", "access", "to", "the", "one", "conversation", "at", "a", "time", "so", "no", "change", "to", "logic", "adapters", "should", "be", "necessary", "to", "facilitate", "these", "change", "NUMBER", "The", "_current_", "conversation", "will", "need", "to", "be", "specified", "by", "passing", "an", "additional", "argument", "to", "the", "ChatBot", "NUMBER", "get_response", "method", "NUMBER", "This", "additional", "argument", "should", "be", "a", "unique", "identifier", "that", "can", "be", "use", "to", "select", "conversation", "and", "from", "the", "chat", "bot", "to", "be", "pass", "to", "the", "logic", "adapter", "NUMBER", "There", "needs", "to", "be", "a", "method", "that", "add", "a", "new", "conversation", "and", "returns", "the", "unique", "identifier", "to", "access", "it", "NUMBER", "Security", "There", "be", "a", "security", "component", "to", "this", "NUMBER", "My", "plan", "be", "to", "investigate", "how", "other", "Python", "frameworks", "like", "Django", "and", "Flask", "handle", "their", "session", "security", "NUMBER", "Do", "you", "have", "a", "unicode", "header", "at", "the", "top", "of", "your", "Python", "file", "python", "code", "utf", "NUMBER", "Hi", "ThomasKoscheck", "I", "ve", "made", "some", "change", "to", "the", "format", "of", "the", "data", "in", "the", "German", "corpus", "LINK", "so", "that", "it", "pass", "JSON", "validation", "test", "NUMBER", "Locally", "I", "was", "able", "to", "trigger", "a", "UnicodeDecodeError", "due", "to", "invalid", "JSON", "NUMBER", "This", "may", "have", "be", "relate", "to", "the", "issue", "you", "encountered", "NUMBER", "Looks", "great", "thank", "you", "NUMBER", "Looks", "great", "Thank", "you", "NUMBER", "The", "solution", "more", "training", "data", "NUMBER", "Because", "what", "be", "your", "name", "be", "very", "similar", "to", "what", "be", "your", "address", "they", "both", "share", "a", "common", "what", "be", "your", "the", "logic", "adapters", "be", "picking", "it", "up", "as", "a", "possible", "response", "NUMBER", "However", "if", "you", "train", "your", "bot", "with", "other", "variations", "of", "the", "input", "something", "like", "where", "be", "you", "located", "R", "NUMBER", "D", "NUMBER", "AI", "Street", "TUXVILLE", "PC", "Land", "then", "it", "will", "generate", "a", "higher", "confidence", "for", "inputs", "similar", "to", "that", "text", "NUMBER", "Adding", "information", "be", "currently", "support", "through", "the", "training", "process", "LINK", "however", "not", "to", "the", "extent", "that", "you", "describe", "NUMBER", "I", "m", "planning", "to", "very", "soon", "introduce", "a", "Conversation", "object", "that", "allows", "the", "chat", "bot", "to", "manage", "information", "from", "individual", "conversations", "that", "it", "has", "had", "or", "has", "be", "trained", "with", "NUMBER", "I", "believe", "this", "will", "provide", "the", "functionality", "you", "be", "looking", "for", "as", "it", "will", "among", "other", "things", "allow", "statements", "from", "those", "individual", "conversations", "to", "be", "remove", "NUMBER", "For", "having", "the", "bot", "maintain", "different", "conversations", "this", "functionality", "will", "be", "add", "as", "a", "part", "of", "NUMBER", "My", "plan", "be", "to", "add", "the", "ability", "for", "a", "chat", "bot", "to", "track", "different", "chat", "sessions", "that", "it", "be", "having", "with", "different", "users", "NUMBER", "These", "change", "be", "a", "bit", "further", "off", "at", "the", "moment", "though", "NUMBER", "I", "m", "going", "to", "close", "this", "ticket", "as", "I", "believe", "rmdort", "has", "provide", "a", "good", "solution", "NUMBER", "saadj", "NUMBER", "I", "just", "came", "across", "an", "article", "that", "you", "might", "find", "interesting", "or", "useful", "LINK", "maclogan", "What", "version", "of", "Django", "do", "you", "have", "install", "You", "can", "run", "python", "m", "django", "version", "to", "check", "this", "NUMBER", "Hmm", "OK", "NUMBER", "I", "can", "t", "create", "this", "issue", "test", "with", "Python", "NUMBER", "Django", "NUMBER", "and", "the", "latest", "version", "of", "ChatterBot", "NUMBER", "Is", "there", "any", "chance", "that", "you", "be", "use", "the", "old", "example", "code", "from", "LINK", "_chatterbot", "which", "be", "outdate", "and", "no", "longer", "maintained", "instead", "of", "LINK", "_app", "which", "be", "the", "latest", "test", "copy", "of", "the", "example", "maclogan", "What", "version", "of", "ChatterBot", "do", "you", "have", "install", "Ok", "I", "was", "just", "able", "to", "replicate", "the", "issue", "you", "be", "having", "NUMBER", "I", "ve", "release", "ChatterBot", "NUMBER", "which", "appears", "to", "fix", "this", "problem", "NUMBER", "What", "to", "upgrade", "and", "check", "if", "the", "issue", "be", "fix", "for", "you", "You", "should", "be", "able", "to", "run", "pip", "install", "chatterbot", "upgrade", "to", "get", "the", "latest", "copy", "NUMBER", "In", "this", "case", "what", "if", "you", "modify", "your", "logic", "adapter", "to", "have", "a", "variable", "like", "self", "NUMBER", "last_ticket_referenced", "NUMBER", "Then", "if", "the", "input", "contains", "the", "desired", "trigger", "phrase", "self", "NUMBER", "last_ticket_referenced", "be", "update", "to", "match", "NUMBER", "Perhaps", "something", "like", "this", "python", "class", "JiraLogicAdapter", "LogicAdapter", "def", "__init__", "self", "kwargs", "super", "JiraLogicAdapter", "self", "NUMBER", "__init__", "kwargs", "self", "NUMBER", "last_ticket_referenced", "def", "can_process", "self", "statement", "is_match", "re", "NUMBER", "match", "r", "jira", "statement", "NUMBER", "text", "if", "is_match", "self", "NUMBER", "last_ticket_referenced", "Insert", "code", "to", "get", "ticket", "id", "from", "text", "here", "return", "is_match", "This", "will", "allow", "the", "logic", "adapter", "that", "handles", "jira", "relate", "input", "to", "keep", "track", "of", "the", "last", "ticket", "that", "was", "mention", "by", "the", "user", "NUMBER", "I", "like", "what", "this", "idea", "be", "trying", "to", "accomplish", "unfortunately", "I", "think", "it", "might", "be", "going", "slightly", "against", "what", "ChatterBot", "aims", "to", "accomplish", "NUMBER", "This", "seems", "more", "like", "a", "command", "line", "application", "than", "an", "interactive", "conversation", "NUMBER", "The", "goal", "for", "ChatterBot", "be", "to", "understand", "the", "user", "s", "input", "and", "then", "respond", "appropriately", "NUMBER", "If", "there", "be", "any", "opportunities", "to", "improve", "it", "s", "ability", "to", "answer", "question", "and", "respond", "to", "input", "I", "will", "be", "happy", "to", "execute", "the", "necessary", "change", "NUMBER", "However", "I", "don", "t", "think", "specify", "the", "logic", "adapter", "can", "be", "support", "in", "the", "project", "s", "core", "NUMBER", "Currently", "no", "NUMBER", "Getting", "this", "set", "up", "would", "require", "some", "modifications", "to", "the", "current", "codebase", "NUMBER", "With", "that", "said", "I", "think", "this", "would", "be", "a", "fantastic", "thing", "to", "support", "NUMBER", "I", "will", "look", "into", "the", "required", "change", "in", "the", "current", "Django", "views", "that", "would", "be", "needed", "to", "allow", "this", "NUMBER", "thedp", "I", "ve", "made", "change", "in", "NUMBER", "that", "now", "allow", "data", "to", "be", "pass", "with", "the", "statement", "to", "the", "django", "view", "use", "the", "already", "exist", "extra_data", "attribute", "support", "by", "Statement", "objects", "NUMBER", "Hi", "liberaltech", "I", "currently", "don", "t", "have", "any", "plan", "to", "recreate", "ChatterBot", "in", "JavaScript", "NUMBER", "I", "would", "not", "be", "oppose", "to", "helping", "out", "with", "a", "JavaScript", "fork", "of", "the", "project", "if", "anyone", "ever", "decides", "to", "create", "one", "but", "for", "the", "time", "be", "most", "of", "my", "efforts", "be", "placed", "on", "developing", "and", "expanding", "the", "current", "codebase", "NUMBER", "As", "a", "side", "note", "I", "ve", "seen", "several", "examples", "of", "ChatterBot", "be", "use", "in", "web", "APIs", "which", "can", "easily", "be", "call", "from", "Node", "applications", "NUMBER", "I", "realize", "this", "isn", "t", "the", "same", "but", "it", "could", "be", "a", "way", "to", "quickly", "get", "ChatterBot", "s", "functionality", "present", "in", "a", "JavaScript", "app", "NUMBER", "Using", "python", "s", "multiprocessing", "large", "amounts", "of", "training", "data", "can", "be", "applied", "to", "a", "ChatterBot", "instance", "in", "parallel", "as", "long", "as", "the", "database", "be", "use", "with", "that", "chat", "bot", "support", "concurrent", "writes", "NUMBER", "The", "goal", "would", "to", "be", "to", "create", "a", "new", "training", "class", "that", "will", "split", "a", "large", "file", "into", "multiple", "file", "and", "then", "train", "the", "chat", "bot", "use", "multiple", "parallel", "processes", "NUMBER", "I", "ve", "seen", "this", "before", "but", "it", "appears", "to", "be", "somewhat", "sporadic", "NUMBER", "Occasionally", "data", "file", "will", "be", "downloaded", "for", "NLTK", "even", "when", "they", "have", "already", "be", "downloaded", "NUMBER", "I", "will", "look", "into", "the", "issue", "NUMBER", "This", "should", "be", "resolve", "by", "NUMBER", "Look", "great", "thank", "you", "Looks", "great", "Sure", "contribute", "change", "with", "GutHub", "and", "git", "be", "fairly", "easy", "NUMBER", "The", "basic", "flow", "to", "do", "this", "be", "Fork", "the", "project", "Clone", "your", "fork", "locally", "Create", "a", "new", "git", "branch", "to", "start", "work", "on", "your", "change", "Make", "code", "change", "in", "your", "local", "copy", "Commit", "change", "to", "git", "and", "push", "them", "up", "to", "your", "clone", "Create", "a", "pull", "request", "to", "merge", "change", "from", "your", "project", "to", "the", "original", "If", "you", "need", "more", "info", "on", "any", "of", "these", "steps", "feel", "free", "to", "ask", "I", "m", "sure", "there", "be", "also", "a", "ton", "of", "information", "out", "on", "the", "web", "on", "how", "to", "do", "this", "NUMBER", "ChatterBot", "actually", "doesn", "t", "define", "a", "language", "anywhere", "NUMBER", "It", "learns", "based", "on", "user", "input", "NUMBER", "As", "a", "result", "the", "only", "time", "a", "language", "be", "really", "set", "be", "when", "a", "chat", "bot", "be", "be", "trained", "with", "a", "particular", "language", "NUMBER", "However", "the", "math", "words", "language", "do", "have", "to", "be", "set", "manually", "currently", "NUMBER", "This", "be", "do", "by", "specify", "the", "parameter", "math_words_language", "russian", "when", "initializing", "the", "chat", "bot", "NUMBER", "Looks", "awesome", "armsmani", "I", "suspect", "you", "may", "have", "named", "one", "of", "the", "classes", "in", "your", "code", "ChatBot", "however", "I", "can", "t", "be", "certain", "based", "on", "the", "information", "provide", "NUMBER", "See", "some", "comments", "from", "other", "PR", "LINK", "pullrequestreview", "NUMBER", "and", "LINK", "issuecomment", "NUMBER", "Tests", "be", "currently", "fail", "on", "this", "pull", "request", "so", "unfortunately", "I", "cannot", "merge", "it", "yet", "NUMBER", "I", "m", "not", "sure", "if", "I", "understand", "what", "the", "benefit", "of", "remove", "it", "would", "be", "NUMBER", "If", "a", "bot", "hasn", "t", "be", "trained", "and", "it", "hasn", "t", "communicated", "with", "anyone", "before", "then", "it", "has", "no", "information", "about", "how", "to", "respond", "to", "input", "NUMBER", "In", "this", "scenario", "which", "should", "only", "ever", "occur", "once", "the", "only", "information", "it", "has", "to", "respond", "with", "be", "the", "user", "s", "input", "NUMBER", "I", "don", "t", "believe", "this", "be", "an", "error", "NUMBER", "Looks", "good", "This", "makes", "it", "possible", "for", "the", "output", "adapter", "to", "make", "a", "decision", "about", "if", "some", "kind", "of", "action", "such", "as", "an", "API", "call", "should", "be", "taken", "based", "on", "that", "confidence", "value", "NUMBER", "rmdort", "Sure", "it", "comes", "down", "to", "implement", "that", "in", "your", "own", "output", "adapter", "but", "that", "could", "definitely", "be", "do", "NUMBER", "Added", "in", "NUMBER", "Check", "out", "test_response_extra_data", "in", "LINK", "_chatbot", "NUMBER", "py", "L", "NUMBER", "It", "appears", "to", "confirm", "that", "the", "extra_data", "parameter", "be", "be", "saved", "from", "the", "input", "statement", "NUMBER", "Yes", "you", "can", "just", "be", "sure", "to", "save", "it", "back", "to", "the", "database", "NUMBER", "The", "input", "statement", "be", "pass", "to", "the", "logic", "adapter", "so", "it", "should", "definitely", "be", "possible", "to", "modify", "NUMBER", "I", "may", "be", "misunderstanding", "your", "question", "but", "you", "can", "modify", "any", "attribute", "of", "the", "statement", "in", "your", "logic", "adapter", "and", "it", "will", "be", "available", "to", "the", "next", "adapter", "as", "long", "as", "you", "save", "it", "to", "the", "database", "NUMBER", "On", "Fri", "Oct", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Vinay", "M", "notifications", "github", "NUMBER", "com", "write", "ok", "noted", "NUMBER", "How", "about", "the", "input", "response", "I", "want", "to", "create", "a", "logic", "adapter", "that", "do", "spell", "correction", "and", "handles", "the", "output", "to", "the", "next", "logic", "adapter", "NUMBER", "You", "be", "receiving", "this", "because", "you", "commented", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "or", "mute", "the", "thread", "LINK", "auth", "AB", "NUMBER", "kzf_O", "NUMBER", "_bSid", "NUMBER", "GGHzfkDFubOEiSaks", "NUMBER", "qxkfmgaJpZM", "NUMBER", "KQ", "NUMBER", "dE", "NUMBER", "Correct", "NUMBER", "I", "would", "recommend", "write", "this", "as", "a", "preprocessor", "instead", "of", "a", "logic", "adapter", "NUMBER", "Logic", "adapters", "typically", "be", "for", "generating", "a", "response", "while", "preprocessors", "be", "specifically", "designed", "to", "alow", "you", "to", "modify", "the", "input", "that", "the", "bot", "recieves", "NUMBER", "LINK", "I", "believe", "you", "could", "achieve", "this", "by", "creating", "a", "different", "chat", "bot", "instance", "for", "each", "subservice", "that", "you", "wich", "to", "provide", "NUMBER", "Tanking", "a", "look", "at", "the", "exist", "chat", "bot", "API", "view", "might", "provide", "you", "with", "a", "good", "idea", "on", "how", "to", "add", "this", "in", "your", "own", "code", "LINK", "_chatterbot", "views", "NUMBER", "py", "This", "would", "need", "a", "custom", "logic", "adapter", "and", "possibly", "a", "custom", "output", "adapter", "to", "handle", "this", "case", "NUMBER", "At", "the", "moment", "the", "exist", "ones", "just", "handle", "returning", "a", "single", "response", "NUMBER", "Thank", "you", "looks", "good", "NUMBER", "rmdort", "this", "looks", "fantastic", "so", "far", "NUMBER", "rmdort", "NLTK", "be", "use", "internally", "in", "this", "project", "but", "as", "a", "dependency", "that", "be", "install", "separately", "though", "the", "python", "package", "manager", "NUMBER", "This", "be", "different", "than", "redistributing", "code", "from", "anther", "project", "NUMBER", "Looks", "good", "NUMBER", "Thank", "you", "This", "should", "make", "it", "easier", "to", "create", "bots", "that", "share", "a", "common", "configuration", "or", "just", "have", "large", "configurations", "in", "general", "NUMBER", "The", "file", "should", "be", "in", "json", "or", "yaml", "format", "NUMBER", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "NUMBER", "from_config_file", "NUMBER", "my_bot_config", "NUMBER", "json", "It", "would", "be", "useful", "to", "have", "access", "to", "a", "utility", "function", "that", "could", "parse", "date", "time", "objects", "out", "of", "sentences", "NUMBER", "Use", "cases", "include", "scheduling", "reminders", "and", "looking", "up", "historical", "information", "NUMBER", "Example", "input", "Let", "s", "meet", "next", "tuesday", "NUMBER", "Do", "you", "want", "to", "meet", "on", "Tuesday", "or", "Thursday", "We", "will", "deploy", "our", "new", "app", "in", "the", "first", "quarter", "of", "NUMBER", "Standard", "datetime", "formats", "My", "birthday", "be", "on", "January", "NUMBER", "NUMBER", "For", "the", "API", "I", "was", "thinking", "of", "just", "a", "simple", "function", "that", "takes", "a", "string", "as", "input", "and", "returns", "a", "list", "of", "Python", "datetime", "objects", "in", "the", "order", "that", "they", "were", "find", "in", "the", "string", "NUMBER", "So", "something", "like", "python", "from", "chatterbot", "NUMBER", "utils", "NUMBER", "parsing", "import", "datetime_parsing", "dates", "datetime_parsing", "I", "have", "meetings", "on", "November", "NUMBER", "and", "NUMBER", "NUMBER", "print", "dates", "datetime", "xxx", "datetime", "yyy", "ChatterBot", "be", "distributed", "under", "the", "BSD", "NUMBER", "clause", "licence", "similar", "to", "many", "other", "Python", "projects", "such", "as", "Django", "NUMBER", "This", "license", "do", "allow", "for", "commercial", "use", "NUMBER", "For", "run", "test", "this", "project", "uses", "nose", "NUMBER", "Nose", "can", "be", "install", "with", "pip", "by", "run", "pip", "install", "nose", "NUMBER", "Tests", "can", "be", "run", "use", "the", "command", "nosetests", "and", "individual", "test", "file", "can", "be", "specified", "by", "run", "nosetests", "path", "to", "test", "file", "NUMBER", "py", "Closed", "by", "LINK", "Closes", "NUMBER", "This", "be", "just", "a", "thought", "still", "needs", "to", "get", "expanded", "upon", "but", "it", "may", "be", "interesting", "to", "experiment", "with", "event", "driven", "patterns", "in", "Python", "for", "response", "generation", "NUMBER", "I", "believe", "there", "be", "actually", "two", "cases", "here", "both", "of", "which", "I", "d", "like", "to", "implement", "NUMBER", "NUMBER", "One", "bot", "be", "having", "many", "different", "conversations", "with", "single", "users", "LINK", "NUMBER", "NUMBER", "The", "bot", "has", "a", "conversation", "with", "a", "group", "of", "users", "NUMBER", "The", "users", "may", "address", "the", "bot", "or", "each", "other", "NUMBER", "This", "be", "a", "bit", "more", "complex", "than", "the", "first", "case", "NUMBER", "rmdort", "I", "m", "glad", "you", "figured", "it", "out", "NUMBER", "I", "agree", "with", "the", "idea", "to", "add", "methods", "to", "add", "and", "remove", "logic", "adapters", "NUMBER", "Feel", "free", "to", "open", "a", "ticket", "with", "that", "request", "NUMBER", "Yes", "this", "be", "possible", "NUMBER", "When", "you", "create", "your", "chat", "bot", "set", "tie_breaking_method", "random_response", "like", "this", "python", "chatbot", "ChatBot", "NUMBER", "other", "parameters", "NUMBER", "tie_breaking_method", "random_response", "LINK", "_breaking_method_mixins", "NUMBER", "html", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "mixins", "NUMBER", "TieBreaking", "NUMBER", "get_random_response", "This", "should", "be", "possible", "to", "do", "but", "you", "will", "need", "to", "handle", "the", "state", "of", "this", "interaction", "within", "your", "custom", "logic", "adapter", "NUMBER", "It", "looks", "like", "you", "be", "going", "in", "the", "right", "direction", "NUMBER", "Let", "me", "know", "if", "you", "have", "any", "feedback", "or", "thoughts", "on", "the", "current", "setup", "of", "logic", "adapters", "NUMBER", "I", "originally", "designed", "them", "for", "just", "processing", "responses", "to", "a", "user", "s", "input", "but", "I", "be", "seeing", "a", "lot", "of", "developers", "creating", "action", "style", "logic", "adapters", "NUMBER", "I", "m", "interested", "in", "make", "change", "to", "better", "accommodate", "multi", "step", "workflows", "like", "the", "one", "you", "be", "work", "on", "NUMBER", "rmdort", "It", "looks", "like", "topics", "have", "to", "be", "set", "manual", "in", "these", "implementations", "NUMBER", "I", "have", "a", "few", "note", "on", "the", "subject", "which", "I", "can", "create", "a", "ticket", "for", "but", "I", "m", "wondering", "if", "a", "setup", "where", "the", "chat", "bot", "learns", "to", "group", "similar", "conversations", "together", "by", "topic", "might", "be", "more", "flexible", "NUMBER", "Is", "there", "a", "use", "case", "for", "setting", "topics", "manually", "From", "my", "understanding", "the", "goal", "of", "a", "topic", "be", "just", "to", "group", "similar", "conversation", "data", "together", "so", "make", "responses", "more", "coherent", "NUMBER", "Looks", "good", "NUMBER", "Thank", "you", "Hi", "sjpatil", "EnderShadow", "lets", "take", "a", "look", "at", "the", "code", "for", "basic_example", "NUMBER", "py", "NUMBER", "The", "goal", "of", "this", "line", "be", "to", "get", "a", "response", "to", "the", "input", "How", "be", "you", "NUMBER", "However", "it", "be", "important", "to", "keep", "in", "mind", "that", "this", "chat", "bot", "be", "untrained", "at", "this", "point", "so", "it", "doesn", "t", "know", "anything", "about", "the", "world", "or", "how", "to", "communicate", "NUMBER", "The", "first", "thing", "we", "do", "to", "it", "be", "say", "How", "be", "you", "so", "now", "it", "knows", "one", "thing", "that", "phrase", "NUMBER", "So", "the", "only", "thing", "it", "can", "do", "be", "respond", "back", "with", "that", "input", "NUMBER", "python", "response", "chatbot", "NUMBER", "get_response", "How", "be", "you", "print", "response", "Ok", "so", "let", "s", "try", "something", "else", "NUMBER", "If", "we", "train", "the", "bot", "it", "can", "learn", "more", "about", "the", "structure", "of", "responses", "NUMBER", "Here", "be", "another", "example", "python", "from", "chatterbot", "NUMBER", "trainers", "import", "ListTrainer", "chatbot", "NUMBER", "set_trainer", "ListTrainer", "Tran", "the", "chat", "bot", "with", "an", "example", "conversation", "chatbot", "NUMBER", "train", "How", "be", "you", "I", "be", "good", "response", "chatbot", "NUMBER", "get_response", "How", "be", "you", "print", "response", "Now", "that", "we", "have", "trained", "the", "bot", "with", "a", "bit", "of", "information", "the", "response", "it", "will", "return", "when", "given", "How", "be", "you", "be", "I", "be", "good", "NUMBER", "I", "hope", "this", "helps", "NUMBER", "Please", "let", "me", "know", "if", "you", "encounter", "any", "other", "issue", "NUMBER", "Also", "some", "documentation", "on", "how", "to", "add", "some", "functional", "adapters", "things", "that", "actually", "do", "stuff", "like", "play", "music", "google", "something", "or", "check", "your", "mail", "NUMBER", "Right", "now", "I", "did", "a", "few", "and", "they", "do", "stuff", "within", "adapter", "itself", "after", "checking", "if", "they", "can", "process", "the", "input", "but", "I", "m", "not", "sure", "if", "thats", "the", "correct", "approach", "either", "NUMBER", "Nixellion", "LINK", "issuecomment", "NUMBER", "When", "read_only", "True", "the", "bot", "will", "select", "the", "best", "response", "it", "can", "from", "what", "it", "already", "knows", "NUMBER", "The", "only", "difference", "from", "normal", "operation", "be", "that", "the", "user", "s", "response", "to", "whatever", "the", "bot", "says", "will", "not", "be", "learned", "by", "the", "bot", "NUMBER", "Thank", "you", "Looks", "good", "rileyjshaw", "There", "be", "a", "know", "issue", "with", "the", "current", "release", "where", "the", "filters", "parameter", "be", "expecting", "a", "callable", "for", "the", "filter", "class", "instead", "of", "a", "string", "path", "to", "the", "callable", "class", "NUMBER", "This", "has", "be", "fix", "but", "the", "change", "won", "t", "be", "available", "until", "the", "next", "version", "of", "ChatterBot", "be", "release", "NUMBER", "rileyjshaw", "ChatterBot", "version", "NUMBER", "has", "be", "release", "NUMBER", "Yes", "you", "can", "create", "a", "custom", "logic", "adapter", "that", "checks", "for", "your", "specific", "phrases", "NUMBER", "Check", "out", "the", "documentation", "and", "the", "exist", "logic", "adapters", "NUMBER", "Let", "me", "know", "if", "you", "have", "any", "question", "NUMBER", "LINK", "LINK", "_a_logic_adapter", "NUMBER", "html", "LINK", "It", "appears", "I", "overlooked", "this", "functionality", "when", "add", "Django", "integration", "to", "ChatterBot", "NUMBER", "There", "be", "currently", "no", "way", "to", "do", "this", "within", "a", "django", "app", "NUMBER", "liberaltech", "shuboy", "NUMBER", "Not", "really", "NUMBER", "If", "the", "external", "training", "update", "the", "statement", "and", "response", "entries", "in", "the", "django", "app", "s", "database", "then", "yes", "NUMBER", "Otherwise", "it", "be", "not", "possible", "NUMBER", "The", "solution", "that", "I", "be", "currently", "considering", "be", "add", "an", "API", "endpoint", "for", "training", "the", "chat", "bot", "or", "at", "least", "for", "passing", "data", "to", "it", "s", "training", "function", "NUMBER", "I", "m", "currently", "work", "to", "add", "a", "Django", "management", "command", "and", "training_data", "parameter", "that", "will", "allow", "chat", "bots", "to", "be", "trained", "NUMBER", "This", "functionality", "should", "be", "available", "in", "the", "next", "version", "release", "NUMBER", "Updated", "documentation", "will", "be", "available", "but", "essentially", "all", "you", "will", "need", "to", "do", "be", "call", "the", "following", "command", "in", "your", "Django", "project", "NUMBER", "python", "manage", "NUMBER", "py", "train", "The", "change", "can", "be", "seen", "here", "LINK", "navyad", "the", "change", "look", "good", "NUMBER", "I", "ll", "have", "to", "test", "the", "change", "out", "but", "the", "code", "looks", "like", "it", "works", "NUMBER", "I", "believe", "the", "remaining", "fail", "test", "be", "just", "due", "to", "the", "old", "parameter", "styles", "be", "pass", "in", "navyad", "Thank", "you", "for", "the", "attempt", "on", "this", "NUMBER", "I", "m", "going", "to", "have", "to", "close", "this", "off", "because", "test", "never", "pass", "and", "there", "has", "be", "a", "number", "of", "change", "to", "the", "master", "branch", "since", "this", "pull", "request", "was", "opened", "NUMBER", "I", "may", "reattempt", "this", "in", "the", "future", "but", "I", "think", "I", "need", "to", "redesign", "it", "so", "that", "it", "doesn", "t", "completely", "break", "backwards", "comparability", "with", "code", "write", "for", "previous", "version", "of", "ChatterBot", "NUMBER", "Thank", "you", "again", "for", "your", "time", "I", "m", "sorry", "this", "can", "t", "get", "add", "in", "right", "now", "NUMBER", "Hi", "hobson", "these", "change", "look", "great", "NUMBER", "I", "just", "had", "question", "about", "the", "change", "once", "that", "be", "resolve", "I", "think", "this", "should", "be", "good", "to", "merge", "NUMBER", "Hi", "Jackojc", "The", "DeprecationWarning", "be", "be", "triggered", "in", "the", "codebase", "of", "NLTK", "which", "be", "another", "library", "that", "ChatterBot", "uses", "internally", "to", "handle", "various", "text", "analysis", "tasks", "NUMBER", "You", "can", "see", "where", "this", "code", "be", "be", "use", "around", "line", "NUMBER", "in", "LINK", "The", "UnsuitableForProductionWarning", "warning", "be", "be", "triggered", "by", "ChatterBot", "NUMBER", "Keep", "in", "mind", "that", "it", "be", "just", "a", "warning", "not", "an", "error", "NUMBER", "The", "warning", "be", "be", "display", "because", "the", "default", "storage", "adapter", "stores", "conversation", "information", "that", "the", "bot", "learns", "in", "a", "json", "file", "NUMBER", "Doing", "this", "works", "great", "for", "test", "and", "debugging", "and", "even", "small", "projects", "NUMBER", "However", "if", "someone", "try", "to", "train", "the", "bot", "with", "something", "like", "NUMBER", "NUMBER", "statements", "then", "the", "performance", "of", "the", "chat", "bot", "will", "be", "extremely", "slow", "because", "of", "the", "disk", "io", "and", "memory", "constraints", "make", "it", "unsuitable", "for", "production", "NUMBER", "Hi", "Jackojc", "The", "latest", "release", "of", "ChatterBot", "NUMBER", "now", "allows", "a", "parameter", "to", "be", "pass", "in", "that", "will", "suppress", "the", "JSON", "File", "Database", "performance", "warning", "NUMBER", "To", "use", "it", "you", "must", "set", "it", "when", "constructing", "your", "chat", "bot", "python", "chatbot", "ChatBot", "NUMBER", "silence_performance_warning", "True", "The", "Microsoft", "Bot", "Framework", "has", "some", "great", "features", "that", "allow", "a", "chat", "bot", "to", "easily", "connect", "with", "various", "online", "services", "NUMBER", "Adding", "support", "so", "that", "ChatterBot", "adapters", "can", "connect", "to", "the", "Bot", "Framework", "endpoint", "to", "do", "various", "tasks", "might", "be", "useful", "NUMBER", "REST", "API", "Documentation", "LINK", "us", "restapi", "connector", "vkosuri", "Unfortunately", "I", "haven", "t", "had", "a", "chance", "to", "look", "into", "this", "yet", "NUMBER", "The", "REST", "API", "documentation", "for", "the", "bot", "framework", "looks", "to", "be", "rather", "thorough", "but", "I", "haven", "t", "be", "able", "to", "look", "into", "what", "would", "be", "required", "to", "support", "integration", "with", "it", "or", "how", "much", "work", "it", "would", "involve", "NUMBER", "vkosuri", "Sure", "a", "pull", "request", "would", "be", "fantastic", "phpmind", "There", "be", "different", "advantages", "to", "use", "ChatterBot", "and", "Microsoft", "Bot", "Framework", "NUMBER", "Choosing", "one", "over", "the", "other", "greatly", "depends", "on", "what", "you", "want", "to", "create", "NUMBER", "Here", "be", "a", "few", "major", "differences", "that", "I", "can", "point", "out", "NUMBER", "There", "may", "be", "others", "but", "these", "seem", "like", "the", "most", "important", "NUMBER", "ChatterBot", "Microsoft", "Bot", "Framework", "Open", "source", "allows", "you", "to", "host", "it", "your", "self", "online", "or", "offline", "NUMBER", "Requires", "a", "developer", "account", "and", "a", "connection", "to", "the", "Microsoft", "Bot", "Framework", "API", "Supports", "integration", "with", "some", "chat", "platforms", "and", "allows", "for", "new", "platforms", "to", "be", "add", "by", "the", "developer", "NUMBER", "Supports", "integration", "with", "many", "chat", "platforms", "NUMBER", "Does", "not", "support", "survey", "data", "gathering", "out", "of", "the", "box", "NUMBER", "The", "developer", "be", "responsible", "for", "code", "this", "logic", "NUMBER", "Has", "great", "support", "for", "allowing", "the", "bot", "to", "survey", "the", "user", "for", "information", "NUMBER", "This", "be", "useful", "for", "allowing", "a", "bot", "to", "ask", "a", "user", "for", "information", "needed", "to", "schedule", "an", "appointment", "NUMBER", "Supports", "learning", "to", "communicate", "based", "on", "interactions", "with", "users", "NUMBER", "Supports", "highly", "customizable", "response", "selection", "logic", "NUMBER", "Right", "now", "Microsoft", "Bot", "Framework", "be", "ideal", "if", "you", "want", "to", "create", "a", "bot", "that", "handles", "a", "repetitive", "task", "that", "requires", "a", "user", "to", "provide", "several", "different", "informational", "components", "NUMBER", "ChatterBot", "be", "intended", "to", "provide", "support", "for", "textual", "_conversations_", "but", "it", "leaves", "prompting", "for", "question", "up", "to", "the", "developer", "NUMBER", "A", "good", "use", "case", "for", "ChatterBot", "might", "be", "a", "bot", "that", "answers", "question", "in", "a", "chat", "room", "when", "you", "be", "not", "around", "NUMBER", "The", "bot", "would", "be", "able", "to", "learn", "from", "past", "conversations", "and", "it", "s", "knowledge", "and", "accuracy", "would", "improve", "over", "time", "NUMBER", "There", "be", "advantages", "to", "both", "the", "goal", "of", "add", "support", "for", "integration", "with", "Microsoft", "Bot", "Framework", "to", "ChatterBot", "be", "to", "allow", "developers", "to", "leverage", "the", "best", "parts", "of", "both", "NUMBER", "SyntaxNet", "be", "an", "open", "source", "project", "release", "by", "Google", "for", "analysing", "the", "parts", "of", "a", "statement", "NUMBER", "I", "haven", "t", "had", "a", "chance", "to", "look", "fully", "into", "it", "yet", "but", "this", "might", "be", "a", "usefull", "feature", "to", "add", "to", "ChatterBot", "NUMBER", "Essentially", "it", "could", "make", "it", "so", "that", "ChatterBot", "can", "learn", "to", "understand", "what", "statements", "mean", "NUMBER", "Google", "Research", "Blog", "article", "LINK", "syntaxnet", "worlds", "most", "NUMBER", "html", "Penn", "Treebank", "Project", "LINK", "treebank", "I", "think", "the", "best", "way", "to", "implement", "this", "would", "be", "as", "a", "comparison", "method", "similar", "to", "the", "ones", "find", "in", "chatterbot", "conversation", "comparisons", "NUMBER", "py", "LINK", "NUMBER", "At", "this", "point", "I", "m", "not", "sure", "if", "this", "will", "be", "possible", "to", "do", "but", "it", "would", "be", "amazing", "if", "the", "SyntaxNet", "library", "could", "be", "use", "to", "compare", "the", "similarity", "of", "two", "statements", "NUMBER", "narvind", "NUMBER", "Sure", "feel", "free", "to", "submit", "a", "PR", "what", "you", "have", "NUMBER", "And", "also", "I", "was", "planning", "do", "this", "task", "use", "Dependencies", "and", "Dependency", "Grammar", "LINK", "NUMBER", "topic", "in", "this", "chapter", "NUMBER", "At", "the", "moment", "statement", "objects", "have", "an", "extra_data", "attribute", "designed", "to", "allow", "additional", "information", "to", "be", "stored", "on", "the", "statement", "object", "NUMBER", "This", "be", "useful", "for", "allowing", "logic", "adapters", "to", "cache", "calculated", "information", "on", "the", "statement", "NUMBER", "The", "issue", "with", "the", "current", "setup", "be", "that", "having", "this", "as", "a", "dynamic", "field", "may", "not", "be", "the", "best", "way", "to", "store", "this", "data", "for", "multiple", "reasons", "NUMBER", "Mainly", "No", "SQL", "databases", "like", "Mongo", "DB", "work", "great", "with", "a", "dynamic", "field", "attributes", "but", "SQL", "databases", "make", "it", "a", "bit", "more", "difficult", "to", "accomplish", "the", "same", "functionality", "NUMBER", "The", "addition", "of", "the", "ability", "to", "set", "different", "caching", "backends", "for", "ChatterBot", "may", "be", "the", "most", "elegant", "solution", "NUMBER", "A", "key", "value", "store", "for", "statements", "could", "provide", "an", "efficient", "way", "to", "maintain", "additional", "data", "associated", "with", "a", "statement", "NUMBER", "This", "change", "would", "also", "make", "ChatterBot", "more", "scalable", "by", "allowing", "it", "to", "integrate", "with", "key", "value", "stores", "like", "redis", "NUMBER", "Simple", "in", "memory", "or", "file", "storage", "cache", "backends", "could", "also", "be", "made", "available", "for", "test", "NUMBER", "This", "may", "also", "be", "a", "better", "alternative", "to", "resolving", "NUMBER", "Closing", "this", "off", "there", "be", "many", "cases", "where", "the", "cached", "extra", "data", "should", "never", "expire", "NUMBER", "Because", "of", "this", "it", "makes", "more", "sense", "to", "store", "it", "in", "the", "database", "with", "the", "statement", "NUMBER", "I", "m", "going", "to", "re", "open", "this", "ticket", "NUMBER", "I", "m", "exploring", "new", "options", "for", "use", "a", "caching", "module", "to", "improve", "response", "generation", "performance", "NUMBER", "Currently", "all", "of", "the", "parameters", "pass", "to", "a", "chat", "bot", "be", "also", "pass", "to", "each", "of", "the", "chat", "bot", "s", "adapters", "regardless", "of", "whether", "or", "not", "that", "adapter", "uses", "that", "parameter", "NUMBER", "This", "setup", "also", "makes", "it", "a", "bit", "unclear", "as", "to", "which", "adapter", "an", "extra", "parameter", "be", "use", "for", "NUMBER", "As", "ChatterBot", "grows", "there", "might", "also", "be", "future", "issue", "with", "parameter", "name", "conflict", "between", "multiple", "adapters", "that", "expect", "the", "same", "argument", "NUMBER", "Proposed", "parameter", "change", "python", "ChatBot", "storage_adapter", "class_name", "my", "NUMBER", "orage", "NUMBER", "AdapterClass", "database_name", "my_database", "logic_adapters", "adapter_class", "NUMBER", "some", "NUMBER", "adapter", "NUMBER", "ClassName", "api_key", "my_api_key_string", "adapter_class", "NUMBER", "some", "NUMBER", "adapter", "NUMBER", "ClassName", "api_key", "my_api_key_string", "The", "name", "context", "be", "confusing", "NUMBER", "It", "be", "actually", "the", "ChatBot", "instance", "NUMBER", "Details", "When", "any", "adapter", "input", "output", "logic", "storage", "be", "add", "to", "an", "instance", "of", "ChatterBot", "it", "be", "initialized", "with", "a", "variable", "call", "context", "which", "allows", "the", "adapter", "to", "access", "other", "adapters", "and", "variables", "that", "were", "set", "on", "the", "ChatBot", "instance", "NUMBER", "The", "context", "variable", "should", "be", "renamed", "to", "chatbot", "to", "be", "more", "self", "explanatory", "At", "the", "moment", "not", "all", "of", "ChatterBot", "s", "storage", "backends", "support", "querying", "and", "filters", "NUMBER", "To", "maintain", "backwards", "compatibility", "a", "field", "adapter_supports_queries", "has", "be", "include", "on", "all", "storage", "adapters", "NUMBER", "By", "default", "adapter_supports_queries", "be", "false", "NUMBER", "If", "a", "storage", "adapter", "support", "queries", "then", "it", "needs", "to", "have", "adapter_supports_queries", "True", "set", "in", "it", "s", "__init__", "method", "NUMBER", "In", "some", "future", "release", "storage", "adapters", "should", "be", "set", "to", "support", "queries", "by", "default", "NUMBER", "When", "I", "m", "presenting", "an", "application", "build", "with", "ChatterBot", "having", "this", "filter", "enable", "will", "make", "it", "so", "that", "the", "chat", "bot", "cannot", "return", "a", "response", "with", "a", "swear", "in", "it", "That", "s", "what", "I", "get", "for", "use", "Twitter", "as", "a", "source", "of", "training", "data", "dizzy_face", "WIP", "status", "x", "Resolve", "issue", "with", "random", "response", "and", "base", "query", "Priority", "for", "filters", "x", "Resolve", "issue", "with", "response", "data", "containing", "results", "that", "we", "want", "to", "ignore", "Closes", "NUMBER", "Hi", "Thomas", "it", "currently", "can", "t", "be", "use", "because", "I", "never", "finished", "these", "change", "NUMBER", "I", "ve", "be", "meaning", "to", "work", "on", "it", "but", "I", "ve", "be", "busy", "creating", "and", "update", "other", "parts", "of", "ChatterBot", "NUMBER", "ChatterBot", "currently", "has", "a", "few", "response", "selection", "methods", "LINK", "_selection", "NUMBER", "py", "that", "can", "be", "use", "to", "determine", "how", "it", "selects", "a", "response", "when", "there", "be", "multiple", "equivalent", "possible", "responses", "NUMBER", "Hypothetically", "the", "current", "conversation", "that", "the", "user", "be", "having", "with", "the", "chat", "bot", "could", "be", "compared", "to", "past", "conversations", "for", "similarity", "NUMBER", "This", "information", "could", "then", "be", "use", "to", "select", "a", "response", "from", "the", "list", "of", "possible", "options", "NUMBER", "Getting", "information", "about", "the", "current", "conversation", "Each", "instance", "of", "ChatterBot", "stores", "a", "list", "recent_statements", "of", "the", "last", "NUMBER", "interactions", "that", "it", "has", "processed", "NUMBER", "Each", "interaction", "be", "stored", "as", "a", "tuple", "containing", "the", "input", "that", "the", "chat", "bot", "received", "and", "the", "output", "that", "the", "chat", "bot", "responded", "with", "NUMBER", "Hi", "navyad", "I", "m", "not", "sure", "if", "there", "be", "any", "significant", "advantages", "by", "make", "the", "base", "Filter", "class", "abstract", "NUMBER", "I", "appreciate", "the", "suggestion", "but", "I", "m", "going", "to", "close", "this", "ticket", "off", "for", "now", "NUMBER", "Feel", "free", "to", "message", "me", "if", "I", "miss", "something", "significant", "regard", "this", "NUMBER", "Thank", "you", "Looks", "good", "smile", "Hi", "PengTedShen", "Yes", "ChatterBot", "do", "automatically", "update", "it", "s", "knowledge", "database", "based", "on", "the", "user", "s", "input", "NUMBER", "This", "be", "how", "the", "program", "learns", "new", "responses", "to", "statements", "that", "it", "can", "use", "to", "communicate", "with", "NUMBER", "Also", "I", "be", "sure", "that", "there", "be", "numerous", "other", "algorithms", "out", "there", "that", "could", "be", "use", "to", "select", "possible", "responses", "NUMBER", "For", "example", "in", "the", "past", "I", "have", "looked", "into", "add", "logic", "adapters", "that", "use", "markov", "chains", "LINK", "_chain", "to", "generate", "new", "candidate", "responses", "NUMBER", "PengTedShen", "I", "be", "not", "aware", "of", "a", "generic", "library", "for", "markov", "chains", "NUMBER", "Hi", "could", "you", "tell", "me", "what", "version", "of", "NLTK", "you", "have", "install", "I", "m", "test", "with", "version", "NUMBER", "and", "I", "m", "not", "seeing", "this", "error", "NUMBER", "You", "can", "check", "the", "version", "you", "have", "by", "run", "python", "c", "import", "nltk", "print", "nltk", "NUMBER", "__version__", "Lets", "try", "make", "sure", "you", "have", "all", "of", "the", "latest", "dependencies", "for", "NLTK", "install", "NUMBER", "First", "uninstall", "nltk", "by", "run", "pip", "uninstall", "nltk", "NUMBER", "Next", "install", "nltk", "with", "the", "latest", "dependencies", "by", "run", "pip", "install", "nltk", "upgrade", "NUMBER", "Sometimes", "installing", "python", "package", "use", "setup", "NUMBER", "py", "can", "have", "some", "issue", "NUMBER", "Using", "pip", "be", "usually", "a", "safe", "bet", "that", "the", "package", "and", "all", "of", "it", "s", "dependencies", "will", "be", "install", "properly", "NUMBER", "Let", "me", "know", "if", "this", "works", "for", "you", "NUMBER", "Hi", "adryr", "NUMBER", "Michele", "Simionato", "be", "correct", "NUMBER", "Warnings", "in", "python", "be", "just", "warnings", "not", "error", "NUMBER", "Regarding", "your", "error", "I", "m", "not", "entirely", "sure", "I", "understand", "what", "you", "mean", "when", "you", "say", "that", "it", "_compares", "only", "Deprecated", "Warning_", "NUMBER", "It", "sounds", "like", "you", "be", "saying", "that", "an", "exception", "be", "be", "compared", "against", "something", "else", "which", "be", "entirely", "possible", "NUMBER", "Perhaps", "you", "could", "describe", "the", "issue", "you", "be", "encountering", "a", "bit", "more", "and", "post", "a", "snippet", "of", "the", "code", "your", "have", "write", "so", "that", "I", "can", "help", "NUMBER", "I", "m", "going", "to", "close", "this", "as", "I", "believe", "it", "be", "a", "non", "issue", "NUMBER", "Feel", "free", "to", "re", "open", "the", "ticket", "if", "I", "ve", "miss", "something", "NUMBER", "Hi", "davizucon", "sorry", "about", "the", "delay", "in", "reviewing", "this", "NUMBER", "I", "was", "able", "to", "confirm", "the", "issue", "but", "I", "m", "going", "to", "have", "to", "make", "a", "small", "change", "to", "the", "pull", "request", "so", "that", "it", "doesn", "t", "break", "Python", "NUMBER", "compatibility", "NUMBER", "Python", "NUMBER", "has", "an", "improved", "way", "of", "dealing", "with", "strings", "which", "eliminates", "issue", "with", "unicode", "characters", "however", "it", "breaks", "backwards", "compatibility", "with", "the", "string", "decode", "method", "NUMBER", "Python", "NUMBER", "python", "\u00e9", "NUMBER", "decode", "utf", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "AttributeError", "str", "object", "has", "no", "attribute", "decode", "Python", "NUMBER", "python", "\u00e9", "NUMBER", "decode", "utf", "NUMBER", "u", "xe", "NUMBER", "This", "has", "be", "close", "by", "LINK", "Looks", "great", "NUMBER", "Hi", "sumn", "NUMBER", "u", "there", "be", "a", "few", "issue", "I", "can", "see", "right", "off", "the", "bat", "NUMBER", "I", "think", "I", "can", "help", "you", "solve", "the", "issue", "you", "be", "encountering", "NUMBER", "First", "it", "appears", "that", "your", "logic", "adapter", "be", "inheriting", "from", "the", "Adapter", "class", "when", "it", "should", "be", "inheriting", "from", "the", "LogicAdapter", "class", "NUMBER", "To", "fix", "this", "you", "can", "just", "change", "your", "imports", "from", "python", "from", "chatterbot", "NUMBER", "adapters", "import", "Adapter", "NUMBER", "class", "LogicAdapter", "Adapter", "to", "python", "from", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "import", "LogicAdapter", "class", "LogicAdapter", "LogicAdapter", "Another", "example", "of", "the", "imports", "can", "be", "seen", "in", "the", "documentation", "LINK", "creating", "a", "new", "logic", "adapter", "on", "logic", "adapters", "NUMBER", "You", "can", "remove", "the", "can_process", "from", "your", "adapter", "if", "you", "don", "t", "pan", "to", "implement", "any", "logic", "for", "it", "NUMBER", "This", "method", "returns", "true", "by", "default", "and", "now", "that", "we", "be", "inheriting", "from", "LogicAdapter", "the", "method", "will", "be", "inherited", "from", "the", "parent", "class", "NUMBER", "For", "the", "same", "reason", "as", "describe", "above", "you", "can", "also", "remove", "the", "EmptyDatasetException", "subclass", "from", "your", "new", "logic", "adapter", "unless", "you", "specifically", "plan", "to", "override", "it", "NUMBER", "The", "other", "thing", "I", "notice", "be", "that", "there", "be", "an", "edge", "case", "that", "may", "cause", "problem", "when", "you", "be", "iterating", "over", "your", "statement", "list", "NUMBER", "I", "believe", "the", "return", "statement", "needs", "to", "be", "tabbed", "back", "one", "indentation", "level", "NUMBER", "As", "it", "be", "currently", "write", "it", "will", "return", "the", "first", "confidence", "and", "closest_match", "value", "that", "it", "comes", "across", "on", "the", "first", "iteration", "of", "the", "for", "loop", "NUMBER", "Another", "issue", "cause", "by", "this", "be", "that", "if", "statement_list", "be", "empty", "nothing", "will", "be", "returned", "from", "this", "method", "because", "the", "return", "statement", "be", "never", "hit", "I", "believe", "this", "be", "the", "cause", "of", "the", "exception", "you", "were", "get", "NUMBER", "So", "change", "python", "for", "statement", "in", "statement_list", "NUMBER", "return", "confidence", "closest_match", "to", "python", "for", "statement", "in", "statement_list", "NUMBER", "return", "confidence", "closest_match", "Those", "be", "the", "only", "immediate", "issue", "I", "can", "see", "NUMBER", "I", "did", "not", "get", "a", "chance", "to", "test", "the", "piece", "of", "code", "you", "submitted", "but", "I", "believe", "you", "should", "be", "in", "a", "better", "place", "now", "NUMBER", "Bellow", "you", "will", "find", "a", "the", "full", "snippet", "with", "all", "the", "change", "I", "ve", "suggested", "already", "made", "NUMBER", "python", "Imports", "import", "nltk", "NUMBER", "corpus", "import", "nltk", "NUMBER", "tokenize", "NUMBER", "punkt", "import", "nltk", "NUMBER", "em", "NUMBER", "snowball", "from", "nltk", "NUMBER", "corpus", "import", "wordnet", "import", "string", "from", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "import", "LogicAdapter", "class", "LogicAdapter", "LogicAdapter", "This", "be", "an", "abstract", "class", "that", "represents", "the", "interface", "that", "all", "logic", "adapters", "should", "implement", "NUMBER", "def", "process", "self", "statement", "Get", "default", "English", "stopwords", "and", "extend", "with", "punctuation", "stopwords", "nltk", "NUMBER", "corpus", "NUMBER", "opwords", "NUMBER", "words", "english", "stopwords", "NUMBER", "extend", "string", "NUMBER", "punctuation", "stopwords", "NUMBER", "append", "def", "get_wordnet_pos", "pos_tag", "if", "pos_tag", "NUMBER", "NUMBER", "artswith", "J", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "ADJ", "elif", "pos_tag", "NUMBER", "NUMBER", "artswith", "V", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "VERB", "elif", "pos_tag", "NUMBER", "NUMBER", "artswith", "N", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "NOUN", "elif", "pos_tag", "NUMBER", "NUMBER", "artswith", "R", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "ADV", "else", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "NOUN", "Create", "tokenizer", "and", "stemmer", "tokenizer", "nltk", "NUMBER", "tokenize", "NUMBER", "word_tokenize", "lemmatizer", "nltk", "NUMBER", "em", "NUMBER", "wordnet", "NUMBER", "WordNetLemmatizer", "def", "is_ci_lemma_stopword_set_match", "a", "b", "threshold", "NUMBER", "Check", "if", "a", "and", "b", "be", "matches", "NUMBER", "pos_a", "map", "get_wordnet_pos", "nltk", "NUMBER", "pos_tag", "tokenizer", "NUMBER", "nltk", "NUMBER", "tokenize", "NUMBER", "word_tokenize", "a", "pos_b", "map", "get_wordnet_pos", "nltk", "NUMBER", "pos_tag", "tokenizer", "NUMBER", "nltk", "NUMBER", "tokenize", "NUMBER", "word_tokenize", "b", "lemmae_a", "lemmatizer", "NUMBER", "lemmatize", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "pos", "for", "token", "pos", "in", "pos_a", "if", "pos", "wordnet", "NUMBER", "NOUN", "and", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "not", "in", "stopwords", "lemmae_b", "lemmatizer", "NUMBER", "lemmatize", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "pos", "for", "token", "pos", "in", "pos_b", "if", "pos", "wordnet", "NUMBER", "NOUN", "and", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "not", "in", "stopwords", "Calculate", "Jaccard", "similarity", "ratio", "len", "set", "lemmae_a", "NUMBER", "intersection", "lemmae_b", "float", "len", "set", "lemmae_a", "NUMBER", "union", "lemmae_b", "return", "ratio", "threshold", "def", "get", "self", "input_statement", "Takes", "a", "statement", "string", "and", "a", "list", "of", "statement", "strings", "NUMBER", "Returns", "the", "approximate", "matching", "statement", "from", "the", "list", "NUMBER", "statement_list", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "get_response_statements", "print", "statement_list", "if", "not", "statement_list", "if", "self", "NUMBER", "has_storage_context", "Use", "a", "randomly", "pick", "statement", "self", "NUMBER", "logger", "NUMBER", "info", "u", "No", "statements", "have", "know", "responses", "NUMBER", "u", "Choosing", "a", "random", "response", "to", "return", "NUMBER", "return", "NUMBER", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "get_random", "else", "raise", "self", "NUMBER", "EmptyDatasetException", "confidence", "NUMBER", "closest_match", "input_statement", "Find", "the", "closest", "matching", "know", "statement", "for", "statement", "in", "statement_list", "print", "statement", "statement", "NUMBER", "text", "ratio", "fuzz", "NUMBER", "ratio", "input_statement", "NUMBER", "text", "statement", "NUMBER", "text", "ratio", "is_ci_lemma_stopword_set_match", "input_statement", "NUMBER", "text", "statement", "NUMBER", "text", "if", "ratio", "confidence", "confidence", "ratio", "closest_match", "statement", "Convert", "the", "confidence", "integer", "to", "a", "percent", "confidence", "NUMBER", "return", "confidence", "closest_match", "sumn", "NUMBER", "u", "Has", "the", "issue", "you", "encountered", "be", "fix", "Let", "me", "know", "if", "there", "be", "anything", "else", "I", "can", "clarify", "or", "help", "with", "NUMBER", "Thank", "you", "NUMBER", "Looks", "good", "NUMBER", "I", "believe", "this", "issue", "has", "be", "fully", "resolve", "now", "NUMBER", "Feel", "fee", "to", "reopen", "it", "if", "I", "miss", "something", "NUMBER", "Just", "a", "note", "on", "this", "newer", "version", "of", "ChatterBot", "include", "more", "verbose", "error", "handle", "for", "MongoDB", "and", "part", "of", "message", "for", "this", "error", "now", "also", "state", "distinct", "too", "big", "NUMBER", "mb", "cap", "NUMBER", "Hi", "gsingers", "this", "currently", "isn", "t", "possible", "to", "do", "but", "I", "like", "the", "idea", "NUMBER", "Currently", "the", "learning", "do", "by", "ChatterBot", "be", "do", "in", "the", "get_response", "method", "of", "the", "main", "ChatBot", "class", "NUMBER", "The", "learning", "be", "do", "by", "update", "the", "database", "with", "the", "user", "s", "response", "to", "the", "chat", "bot", "s", "output", "NUMBER", "I", "think", "it", "might", "be", "an", "excellent", "idea", "to", "separate", "the", "learning", "code", "from", "the", "response", "generation", "code", "NUMBER", "After", "make", "this", "change", "an", "additional", "value", "could", "be", "returned", "from", "the", "logic", "adapter", "responsible", "for", "retrieving", "input", "from", "Slack", "NUMBER", "gsingers", "The", "slack", "adapters", "sound", "like", "a", "great", "addition", "NUMBER", "If", "you", "re", "interested", "in", "make", "a", "pull", "request", "I", "d", "be", "happy", "to", "accept", "it", "NUMBER", "gsingers", "Check", "out", "the", "two", "training", "modules", "ListTrainer", "ChatterBotCorpusTrainer", "in", "trainers", "NUMBER", "py", "LINK", "gsingers", "I", "ve", "made", "change", "that", "break", "up", "the", "response", "generation", "and", "response", "learning", "parts", "of", "the", "get_response", "method", "NUMBER", "NUMBER", "add", "a", "new", "example", "file", "that", "demonstrates", "this", "NUMBER", "Feel", "free", "to", "provide", "feedback", "if", "you", "have", "any", "NUMBER", "Thank", "you", "davizucon", "be", "correct", "NUMBER", "There", "be", "not", "currently", "an", "adapter", "for", "OrientDB", "but", "this", "looks", "like", "something", "that", "would", "be", "awesome", "to", "add", "NUMBER", "davizucon", "I", "think", "having", "a", "Slack", "channel", "sounds", "like", "a", "good", "idea", "NUMBER", "I", "ve", "add", "one", "for", "the", "project", "at", "LINK", "davizucon", "I", "just", "realized", "Slack", "doesn", "t", "have", "support", "for", "letting", "anyone", "join", "each", "new", "member", "has", "to", "be", "explicitly", "invited", "NUMBER", "I", "think", "Gitter", "might", "end", "up", "be", "a", "better", "solution", "because", "of", "this", "NUMBER", "LINK", "_bot", "Lobby", "Hi", "davizucon", "This", "definitely", "corrects", "the", "issue", "however", "it", "appears", "that", "a", "few", "unit", "test", "be", "now", "fail", "after", "these", "change", "h", "ttps", "travis", "ci", "NUMBER", "org", "gunthercox", "ChatterBot", "build", "NUMBER", "NUMBER", "Unfortunately", "I", "cannot", "merge", "in", "the", "change", "if", "test", "be", "not", "passing", "NUMBER", "Hi", "davizucon", "I", "can", "t", "confirm", "what", "this", "fix", "NUMBER", "Could", "you", "provide", "me", "with", "the", "steps", "needed", "to", "replicate", "the", "issue", "so", "I", "can", "test", "this", "This", "issue", "was", "fix", "in", "LINK", "closing", "this", "ticket", "off", "NUMBER", "Hi", "slin", "NUMBER", "there", "be", "on", "Gitter", "LINK", "_bot", "Lobby", "Thank", "you", "Hi", "chamkank", "I", "would", "be", "happy", "to", "add", "the", "link", "NUMBER", "Thank", "you", "I", "believe", "this", "has", "be", "recently", "correct", "and", "will", "be", "fix", "in", "the", "next", "release", "of", "ChatterBot", "NUMBER", "The", "commit", "LINK", "appears", "to", "contain", "the", "fix", "NUMBER", "I", "m", "going", "to", "close", "this", "issue", "NUMBER", "Feel", "free", "to", "reopen", "it", "if", "that", "was", "not", "a", "fix", "for", "the", "error", "you", "were", "refering", "to", "NUMBER", "Hi", "navyad", "Thank", "you", "for", "add", "this", "NUMBER", "The", "reason", "I", "hadn", "t", "documented", "the", "twitter", "storage", "adapter", "was", "because", "I", "wanted", "to", "avoid", "people", "use", "the", "possibly", "malfunctioning", "adapter", "NUMBER", "Before", "I", "merge", "it", "I", "will", "need", "to", "check", "out", "issue", "NUMBER", "to", "make", "sure", "it", "be", "resolve", "NUMBER", "Thank", "you", "I", "believe", "this", "should", "be", "all", "set", "NUMBER", "merge", "NUMBER", "NUMBER", "Thanks", "In", "the", "base", "class", "for", "the", "matching", "adapters", "if", "no", "possible", "responses", "to", "the", "input", "be", "know", "then", "a", "random", "response", "be", "chosen", "from", "the", "database", "NUMBER", "x", "This", "needs", "to", "be", "change", "so", "that", "if", "a", "random", "response", "be", "selected", "a", "confidence", "value", "of", "zero", "be", "returned", "NUMBER", "x", "Create", "unit", "test", "SQLite", "will", "provide", "better", "performance", "than", "the", "JsonFileAdapter", "while", "still", "allowing", "for", "an", "easy", "setup", "MongoDB", "and", "other", "databases", "require", "additional", "package", "to", "be", "install", "NUMBER", "navyad", "Thank", "you", "I", "don", "t", "believe", "that", "anyone", "be", "work", "on", "this", "NUMBER", "davizucon", "I", "d", "be", "happy", "to", "bring", "in", "the", "SQLite", "adapter", "for", "an", "alpha", "release", "NUMBER", "I", "have", "be", "get", "a", "number", "of", "complaints", "about", "the", "performance", "of", "the", "JSON", "file", "adapter", "lately", "and", "I", "think", "I", "m", "going", "to", "make", "plan", "to", "remove", "it", "completely", "eventually", "in", "favor", "of", "the", "SQLite", "adapter", "once", "it", "be", "stable", "NUMBER", "Hi", "addelll", "you", "can", "use", "this", "storage", "adapter", "the", "same", "way", "that", "the", "others", "be", "use", "NUMBER", "For", "example", "python", "chatbot", "ChatBot", "My", "ChatterBot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "SQLAlchemyDatabaseAdapter", "Is", "this", "what", "you", "be", "looking", "for", "as", "an", "example", "Hi", "vince", "NUMBER", "fr", "it", "appears", "that", "there", "was", "an", "empty", "file", "in", "the", "french", "training", "corpus", "that", "was", "cause", "this", "issue", "NUMBER", "It", "looks", "like", "an", "empty", "file", "be", "invalid", "JSON", "trophy", "I", "have", "remove", "the", "file", "and", "the", "issue", "appears", "to", "be", "fix", "NUMBER", "LINK", "Unfortunately", "the", "BulkWriteError", "do", "not", "give", "me", "enough", "information", "to", "debug", "this", "issue", "NUMBER", "Could", "you", "tell", "me", "what", "the", "content", "of", "your", "conversacao", "variable", "was", "I", "m", "closing", "this", "ticket", "off", "as", "it", "hasn", "t", "be", "report", "in", "quite", "some", "time", "and", "I", "m", "fairly", "certain", "it", "was", "resolve", "NUMBER", "Thank", "you", "Is", "there", "any", "specific", "data", "that", "you", "be", "training", "your", "bot", "with", "when", "this", "occur", "Hi", "PengTedShen", "I", "created", "a", "test", "case", "to", "try", "to", "replicate", "the", "issue", "you", "report", "NUMBER", "I", "have", "not", "be", "able", "to", "recreate", "the", "issue", "NUMBER", "Based", "on", "my", "test", "if", "a", "user", "enters", "\u65e9\u4e0a\u597d", "then", "\u60a8\u597d", "be", "correctly", "returned", "as", "a", "response", "NUMBER", "I", "m", "going", "to", "close", "this", "ticket", "for", "now", "please", "reopen", "it", "if", "I", "miss", "something", "or", "misinterpreted", "your", "question", "NUMBER", "Here", "be", "the", "test", "case", "that", "I", "created", "to", "try", "to", "very", "the", "problem", "python", "code", "utf", "NUMBER", "from", "NUMBER", "base_case", "import", "ChatBotTestCase", "from", "chatterbot", "NUMBER", "trainers", "import", "ListTrainer", "class", "ChatterBotQATests", "ChatBotTestCase", "def", "setUp", "self", "Create", "a", "chat", "bot", "with", "our", "test", "data", "NUMBER", "super", "ChatterBotQATests", "self", "NUMBER", "setUp", "self", "NUMBER", "chatbot", "NUMBER", "set_trainer", "ListTrainer", "hospital_qa", "u", "\u65e9\u4e0a\u597d", "u", "\u60a8\u597d", "u", "\u6211\u6709\u4e9b\u5934\u75bc", "NUMBER", "u", "\u9664\u4e86\u5934\u75bc\u5916", "\u8fd8\u6709\u522b\u7684\u4ec0\u4e48\u75c7\u72b6\u5417", "u", "\u54e6", "\u5bf9\u4e86", "\u6211\u9f3b\u5b50\u4e0d\u900f\u6c14", "NUMBER", "u", "\u6709\u6ca1\u6709\u53d1\u70ed", "u", "\u4eca\u5929\u65e9\u4e0a\u81ea\u5df1\u91cf\u4e86\u4e00\u4e0b\u8fbe\u5230\u4e86", "NUMBER", "\u5ea6", "NUMBER", "\u70e7\u5f97\u6211\u5168\u8eab\u75bc\u75db", "NUMBER", "u", "\u4f60\u8fd9\u79cd\u75c7\u72b6\u591a\u957f\u65f6\u95f4\u4e86", "u", "\u5927\u6982\u6709\u4e24\u5468\u4e86", "NUMBER", "u", "\u4f60\u5bf9\u4ec0\u4e48\u836f\u7269\u8fc7\u654f\u5417", "u", "\u6ca1\u6709", "\u6ca1\u4ec0\u4e48\u8fc7\u654f\u7684", "NUMBER", "u", "\u4ece\u4f60\u8bf4\u7684\u75c7\u72b6\u770b\u5c31\u662f\u611f\u5192\u5f15\u8d77\u7684\u4f4e\u70e7", "\u7ed9\u4f60\u5148\u5f00\u4e09\u5929\u7684\u611f\u5192\u836f\u548c\u6d88\u708e\u836f", "NUMBER", "u", "\u8c22\u8c22\u533b\u751f", "u", "\u795d\u4f60\u65e9\u65e5\u5eb7\u590d", "for", "qa", "in", "hospital_qa", "self", "NUMBER", "chatbot", "NUMBER", "train", "qa", "def", "test_for_correct_response", "self", "response", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "u", "\u65e9\u4e0a\u597d", "response", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "u", "\u6211\u6709\u4e9b\u5934\u75bc", "response", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "u", "\u54e6", "\u5bf9\u4e86", "\u6211\u9f3b\u5b50\u4e0d\u900f\u6c14", "NUMBER", "response", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "u", "\u4eca\u5929\u65e9\u4e0a\u81ea\u5df1\u91cf\u4e86\u4e00\u4e0b\u8fbe\u5230\u4e86", "NUMBER", "\u5ea6", "NUMBER", "\u70e7\u5f97\u6211\u5168\u8eab\u75bc\u75db", "NUMBER", "response", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "u", "\u5927\u6982\u6709\u4e24\u5468\u4e86", "NUMBER", "response", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "u", "\u6ca1\u6709", "\u6ca1\u4ec0\u4e48\u8fc7\u654f\u7684", "NUMBER", "response", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "u", "\u8c22\u8c22\u533b\u751f", "self", "NUMBER", "assertEqual", "response", "NUMBER", "u", "\u60a8\u597d", "self", "NUMBER", "assertEqual", "response", "NUMBER", "u", "\u9664\u4e86\u5934\u75bc\u5916", "\u8fd8\u6709\u522b\u7684\u4ec0\u4e48\u75c7\u72b6\u5417", "self", "NUMBER", "assertEqual", "response", "NUMBER", "u", "\u6709\u6ca1\u6709\u53d1\u70ed", "self", "NUMBER", "assertEqual", "response", "NUMBER", "u", "\u4f60\u8fd9\u79cd\u75c7\u72b6\u591a\u957f\u65f6\u95f4\u4e86", "self", "NUMBER", "assertEqual", "response", "NUMBER", "u", "\u4f60\u5bf9\u4ec0\u4e48\u836f\u7269\u8fc7\u654f\u5417", "self", "NUMBER", "assertEqual", "response", "NUMBER", "u", "\u4ece\u4f60\u8bf4\u7684\u75c7\u72b6\u770b\u5c31\u662f\u611f\u5192\u5f15\u8d77\u7684\u4f4e\u70e7", "\u7ed9\u4f60\u5148\u5f00\u4e09\u5929\u7684\u611f\u5192\u836f\u548c\u6d88\u708e\u836f", "NUMBER", "self", "NUMBER", "assertEqual", "response", "NUMBER", "u", "\u795d\u4f60\u65e9\u65e5\u5eb7\u590d", "Hi", "PengTedShen", "for", "your", "question", "NUMBER", "It", "be", "possible", "that", "NUMBER", "be", "not", "the", "most", "optimal", "value", "for", "that", "code", "example", "NUMBER", "Feel", "free", "to", "adjust", "it", "as", "needed", "NUMBER", "NUMBER", "The", "method", "call", "to", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "update", "closest_match", "will", "return", "the", "update", "statement", "that", "be", "pass", "in", "to", "the", "method", "NUMBER", "Although", "it", "s", "meta", "data", "may", "change", "the", "statement", "text", "will", "be", "the", "same", "NUMBER", "I", "would", "advocate", "keep", "the", "random", "response", "fallback", "for", "now", "rather", "than", "just", "returning", "the", "input", "as", "a", "closest", "match", "but", "I", "m", "open", "to", "other", "suggestion", "NUMBER", "NUMBER", "Note", "that", "the", "chat", "bot", "also", "continues", "to", "learn", "as", "you", "talk", "to", "it", "so", "it", "may", "be", "learning", "additional", "response", "options", "from", "your", "input", "NUMBER", "If", "this", "functionality", "be", "not", "desired", "then", "it", "be", "possible", "to", "but", "the", "database", "into", "read", "only", "mode", "by", "specify", "read_only", "True", "when", "initializing", "the", "chat", "bot", "NUMBER", "Hi", "I", "will", "have", "to", "look", "into", "this", "issue", "a", "bit", "more", "NUMBER", "In", "the", "mean", "time", "could", "you", "tell", "me", "what", "version", "of", "Python", "you", "be", "use", "I", "m", "aware", "that", "Python", "NUMBER", "can", "sometimes", "have", "issue", "handle", "unicode", "text", "NUMBER", "Hi", "Nixellion", "asperduti", "the", "latest", "release", "of", "ChatterBot", "now", "include", "much", "more", "verbose", "logging", "that", "can", "be", "enable", "to", "help", "debug", "issue", "like", "these", "NUMBER", "You", "can", "enable", "the", "logging", "by", "setting", "Python", "s", "logging", "level", "to", "info", "python", "import", "logging", "logging", "NUMBER", "basicConfig", "level", "logging", "NUMBER", "INFO", "ChatBot", "NUMBER", "This", "should", "allow", "you", "to", "actually", "see", "what", "be", "happening", "inside", "ChatterBot", "and", "it", "will", "also", "tell", "you", "exactly", "why", "a", "particular", "response", "was", "returned", "NUMBER", "If", "anything", "strange", "shows", "up", "in", "the", "logs", "please", "open", "an", "issue", "about", "it", "or", "post", "the", "log", "output", "in", "a", "comment", "somewhere", "NUMBER", "Logging", "documentation", "LINK", "logger", "You", "can", "actually", "specify", "this", "when", "you", "construct", "your", "chat", "bot", "python", "chatbot", "ChatBot", "NUMBER", "tie_breaking_method", "random_response", "The", "documentation", "on", "these", "methods", "was", "_very_", "recently", "add", "LINK", "_breaking_method_mixins", "NUMBER", "html", "Note", "that", "there", "be", "currently", "plan", "to", "improve", "the", "selection", "process", "NUMBER", "Specifically", "LINK", "will", "add", "functionality", "so", "that", "the", "the", "response", "be", "selected", "based", "on", "the", "context", "of", "the", "current", "conversation", "NUMBER", "This", "will", "help", "make", "these", "responses", "much", "more", "relevant", "NUMBER", "neatville", "Setting", "the", "response_selection_method", "be", "correct", "NUMBER", "It", "looks", "like", "there", "be", "an", "issue", "with", "the", "example", "NUMBER", "The", "VariableInputTypeAdapter", "expects", "an", "input", "value", "which", "be", "why", "it", "be", "error", "out", "when", "give", "a", "None", "value", "NUMBER", "Want", "to", "swap", "out", "the", "input", "and", "output", "adapters", "you", "be", "use", "with", "the", "following", "python", "input_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "output", "NUMBER", "TerminalAdapter", "Correct", "you", "would", "want", "to", "create", "an", "adapter", "for", "handle", "that", "NUMBER", "Yes", "that", "would", "likely", "be", "an", "excellent", "source", "of", "training", "data", "NUMBER", "Hi", "futetest", "NUMBER", "The", "ClosestMeaningAdapter", "LINK", "_meaning", "NUMBER", "py", "compares", "all", "the", "words", "NUMBER", "image", "LINK", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "b", "NUMBER", "c", "NUMBER", "f", "NUMBER", "fa", "NUMBER", "png", "To", "explain", "a", "bit", "further", "it", "selects", "the", "highest", "value", "combination", "of", "matching", "tokenized", "version", "of", "the", "words", "in", "each", "pair", "be", "compared", "NUMBER", "To", "do", "this", "it", "first", "creates", "a", "list", "of", "the", "tokenized", "words", "for", "both", "statements", "be", "compared", "use", "NLTK", "s", "get_tokens", "function", "NUMBER", "It", "then", "produces", "what", "be", "essentially", "a", "matrix", "of", "each", "possible", "combination", "of", "the", "ordering", "of", "the", "tokens", "in", "both", "lists", "use", "Pythons", "build", "in", "itertools", "NUMBER", "product", "function", "NUMBER", "Note", "that", "the", "reason", "that", "the", "order", "of", "the", "words", "be", "ignored", "be", "because", "the", "goal", "of", "this", "adapter", "be", "to", "compare", "the", "meaning", "of", "each", "word", "so", "order", "was", "deemed", "an", "invalid", "heuristic", "NUMBER", "The", "adapter", "selects", "and", "returns", "the", "statement", "with", "the", "highest", "matching", "token", "list", "comparison", "to", "the", "input", "statements", "NUMBER", "Hi", "Matgek", "your", "logic", "seems", "valid", "NUMBER", "I", "will", "set", "up", "some", "test", "cases", "to", "try", "to", "benchmark", "any", "change", "in", "performance", "by", "reversing", "how", "the", "statements", "be", "stored", "NUMBER", "Thank", "you", "NUMBER", "kevin", "brown", "be", "correct", "NUMBER", "If", "you", "re", "goal", "be", "to", "remove", "the", "warning", "your", "options", "be", "NUMBER", "Install", "the", "python", "Levenshtein", "package", "with", "pip", "NUMBER", "NUMBER", "Silence", "UserWarning", "level", "warnings", "when", "run", "your", "code", "NUMBER", "Hi", "alekaizer", "this", "looks", "great", "NUMBER", "Could", "you", "possibly", "remove", "the", "merge", "commit", "that", "be", "showing", "up", "in", "this", "pull", "request", "Once", "that", "be", "fix", "I", "d", "be", "happy", "to", "pull", "it", "in", "NUMBER", "Hi", "z", "NUMBER", "nD", "NUMBER", "R", "I", "cannot", "replicate", "your", "issue", "with", "the", "code", "you", "posted", "NUMBER", "I", "m", "going", "to", "close", "this", "issue", "off", "for", "now", "but", "feel", "free", "to", "reopen", "it", "if", "you", "continue", "to", "run", "into", "the", "problem", "NUMBER", "Thank", "you", "looks", "good", "Thank", "you", "Looks", "good", "NUMBER", "Hi", "Nykho", "I", "ve", "be", "able", "to", "confirm", "this", "issue", "on", "my", "end", "NUMBER", "I", "will", "attempt", "to", "issue", "a", "patch", "as", "soon", "as", "I", "can", "NUMBER", "Just", "a", "quick", "note", "for", "anyone", "else", "run", "into", "this", "issue", "NUMBER", "This", "issue", "be", "fix", "in", "Python", "NUMBER", "Although", "this", "project", "aims", "to", "fully", "support", "multiple", "version", "of", "Python", "if", "you", "be", "use", "Python", "NUMBER", "and", "you", "can", "upgrade", "that", "may", "be", "the", "best", "course", "of", "action", "NUMBER", "I", "m", "aware", "that", "there", "be", "a", "few", "user", "created", "ones", "floating", "around", "out", "there", "for", "non", "english", "languages", "NUMBER", "If", "you", "or", "anyone", "else", "be", "interested", "in", "contribute", "a", "larger", "selection", "of", "corpus", "data", "to", "the", "project", "the", "addition", "would", "be", "greatly", "welcomed", "NUMBER", "Thanks", "Thank", "you", "ChatterBot", "be", "designed", "to", "be", "language", "independent", "so", "bots", "can", "be", "created", "that", "can", "communicate", "use", "any", "language", "NUMBER", "You", "can", "either", "train", "your", "chat", "bot", "use", "pre", "recorded", "data", "or", "it", "can", "learn", "to", "speak", "as", "you", "communicate", "with", "it", "NUMBER", "Obrigado", "NUMBER", "It", "sounds", "like", "you", "need", "to", "include", "the", "file", "name", "in", "the", "path", "as", "well", "NUMBER", "For", "example", "if", "your", "adapter", "class", "MyLogicAdapter", "be", "in", "a", "file", "named", "my_logic_adapter", "NUMBER", "py", "then", "you", "would", "want", "the", "string", "pass", "to", "the", "chat", "bot", "s", "list", "of", "adapters", "to", "look", "like", "my_logic_adapter", "NUMBER", "MyLogicAdapter", "NUMBER", "This", "string", "be", "essentially", "just", "an", "python", "import", "path", "NUMBER", "The", "class", "gets", "split", "off", "the", "end", "of", "the", "string", "and", "imported", "NUMBER", "This", "variable", "be", "an", "object", "pass", "to", "each", "type", "of", "adapter", "NUMBER", "It", "allows", "each", "adapter", "to", "access", "other", "adapters", "NUMBER", "There", "be", "cases", "where", "it", "may", "be", "beneficial", "for", "logic", "adapters", "to", "have", "direct", "access", "to", "the", "storage", "adapter", "for", "example", "NUMBER", "I", "ve", "add", "update", "documentation", "to", "cover", "this", "NUMBER", "LINK", "context", "Feel", "free", "to", "reopen", "this", "ticket", "or", "submit", "a", "pull", "request", "if", "more", "information", "be", "needed", "NUMBER", "LucasZielke", "That", "be", "partially", "correct", "part", "of", "the", "process", "of", "selecting", "a", "response", "be", "trying", "to", "find", "the", "closest", "possible", "match", "to", "the", "input", "but", "there", "be", "also", "another", "step", "that", "involves", "choosing", "a", "response", "from", "the", "selection", "of", "closest", "matching", "know", "inputs", "NUMBER", "Hi", "everyone", "NUMBER", "Here", "be", "a", "solution", "that", "may", "work", "for", "you", "NUMBER", "All", "you", "need", "to", "do", "be", "create", "a", "file", "containing", "the", "following", "logic", "adapter", "and", "add", "it", "to", "your", "chat", "bot", "setup", "NUMBER", "You", "will", "likely", "need", "to", "customize", "the", "output", "based", "on", "your", "needs", "but", "I", "think", "this", "should", "be", "a", "pretty", "good", "basis", "for", "everyone", "to", "work", "from", "NUMBER", "python", "code", "utf", "NUMBER", "from", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "base_match", "import", "BaseMatchAdapter", "from", "chatterbot", "NUMBER", "conversation", "import", "Statement", "from", "fuzzywuzzy", "import", "fuzz", "class", "TheIDontKnowAdapter", "BaseMatchAdapter", "This", "adapter", "checks", "if", "a", "closely", "matching", "response", "be", "know", "NUMBER", "def", "get", "self", "input_statement", "Takes", "a", "statement", "string", "and", "a", "list", "of", "statement", "strings", "NUMBER", "Returns", "the", "closest", "matching", "statement", "from", "the", "list", "NUMBER", "statement_list", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "get_response_statements", "default_response", "Statement", "I", "don", "t", "understand", "NUMBER", "Return", "the", "default", "response", "if", "there", "be", "no", "data", "in", "the", "database", "if", "not", "statement_list", "return", "NUMBER", "default_response", "confidence", "NUMBER", "closest_match", "input_statement", "Find", "the", "closest", "matching", "know", "statement", "for", "statement", "in", "statement_list", "ratio", "fuzz", "NUMBER", "ratio", "input_statement", "NUMBER", "text", "statement", "NUMBER", "text", "if", "ratio", "confidence", "confidence", "ratio", "closest_match", "statement", "Return", "the", "default", "response", "if", "a", "close", "match", "cannot", "be", "find", "if", "confidence", "TAG", "A", "Dialog", "tree", "be", "use", "in", "game", "to", "code", "the", "conversation", "the", "player", "may", "have", "with", "bots", "or", "non", "playable", "characterer", "NUMBER", "A", "dialog", "tree", "be", "in", "fact", "a", "graph", "multiple", "answer", "may", "lead", "to", "the", "same", "question", "NUMBER", "In", "this", "tree", "what", "be", "a", "node", "A", "dialog", "node", "encodes", "one", "exchange", "in", "the", "dialog", "NUMBER", "NUMBER", "Bot", "can", "say", "something", "NUMBER", "NUMBER", "Player", "get", "multiple", "choises", "to", "pick", "NUMBER", "depending", "on", "player", "choise", "we", "go", "to", "the", "next", "node", "NUMBER", "if", "there", "be", "no", "more", "children", "the", "conversation", "be", "over", "NUMBER", "ChatterBot", "stores", "all", "of", "the", "input", "statements", "it", "receives", "as", "a", "graph", "data", "structure", "with", "connections", "between", "a", "statement", "and", "it", "s", "possible", "responses", "NUMBER", "For", "visualizations", "another", "ticket", "was", "recently", "opened", "NUMBER", "which", "proposes", "add", "support", "for", "Orient", "DB", "as", "a", "storage", "backend", "NUMBER", "Orient", "DB", "looks", "like", "it", "has", "some", "cool", "features", "for", "generating", "visualizations", "of", "the", "graph", "LINK", "I", "m", "going", "to", "close", "this", "ticket", "off", "as", "I", "believe", "it", "be", "all", "set", "NUMBER", "Please", "feel", "free", "to", "reopen", "it", "if", "I", "miss", "something", "NUMBER", "NUMBER", "For", "large", "amounts", "of", "data", "there", "be", "a", "natural", "limit", "based", "on", "the", "amount", "of", "hard", "disk", "space", "and", "free", "memory", "that", "your", "system", "has", "NUMBER", "Using", "the", "MongoDB", "adapter", "be", "advised", "for", "large", "amounts", "of", "data", "LINK", "adapters", "mongo", "database", "adapter", "NUMBER", "Your", "chat", "bot", "saves", "what", "it", "learns", "on", "your", "computer", "NUMBER", "It", "s", "knowledge", "be", "not", "erased", "when", "the", "computer", "be", "shut", "down", "NUMBER", "You", "should", "only", "need", "to", "train", "it", "once", "NUMBER", "You", "can", "remove", "what", "a", "bot", "has", "learned", "by", "calling", "mychatbot", "NUMBER", "orage", "NUMBER", "drop", "NUMBER", "For", "example", "python", "mychatbot", "ChatBot", "Example", "mychatbot", "NUMBER", "orage", "NUMBER", "drop", "I", "agree", "with", "this", "NUMBER", "There", "be", "currently", "a", "recent_statements", "variable", "which", "I", "add", "so", "that", "this", "could", "eventually", "be", "accomplished", "NUMBER", "Currently", "the", "variable", "holds", "a", "list", "of", "the", "bot", "s", "responses", "for", "the", "current", "session", "NUMBER", "At", "some", "point", "I", "would", "love", "to", "make", "the", "change", "so", "that", "it", "avoids", "repeating", "the", "same", "words", "frequently", "NUMBER", "A", "new", "feature", "call", "_filters_", "was", "recently", "introduce", "to", "ChatterBot", "NUMBER", "A", "filter", "call", "the", "RepetitiveResponseFilter", "has", "be", "add", "which", "eliminates", "recent", "responses", "from", "the", "set", "of", "possible", "replies", "that", "the", "chat", "bot", "can", "return", "NUMBER", "Currently", "not", "all", "storage", "adapters", "support", "filtering", "but", "in", "the", "future", "they", "will", "NUMBER", "See", "documentation", "LINK", "Ok", "glad", "you", "find", "what", "you", "were", "looking", "for", "NUMBER", "NUMBER", "This", "be", "a", "circular", "import", "error", "NUMBER", "You", "named", "your", "file", "chatterbot", "NUMBER", "py", "then", "imported", "_from", "chatterbot_", "NUMBER", "To", "fix", "this", "rename", "your", "chatterbot", "NUMBER", "py", "in", "root", "taartbot", "to", "something", "else", "NUMBER", "This", "be", "not", "currently", "support", "however", "I", "would", "be", "in", "favor", "of", "add", "this", "as", "an", "import", "export", "feature", "NUMBER", "The", "implementation", "of", "database", "exporting", "capabilities", "be", "currently", "waiting", "on", "my", "designs", "for", "AIML", "Integration", "NUMBER", "NUMBER", "Some", "of", "the", "features", "in", "the", "AIML", "specification", "currently", "do", "not", "agree", "with", "ChatterBot", "s", "design", "such", "as", "wildcard", "statements", "NUMBER", "I", "need", "to", "create", "a", "common", "internal", "format", "for", "storing", "this", "information", "before", "database", "export", "can", "be", "allow", "NUMBER", "I", "be", "aware", "of", "limitations", "with", "speed", "when", "saving", "statements", "NUMBER", "I", "m", "not", "sure", "how", "much", "can", "be", "do", "to", "fix", "it", "considering", "the", "problem", "has", "to", "do", "with", "the", "amount", "of", "time", "it", "takes", "a", "computer", "to", "read", "and", "write", "to", "its", "hard", "disk", "NUMBER", "I", "would", "reccomend", "use", "the", "MongoDB", "database", "for", "significantly", "better", "performance", "NUMBER", "LINK", "adapters", "mongo", "database", "adapter", "Hi", "vojcio", "I", "m", "still", "debugging", "this", "NUMBER", "I", "can", "replicate", "it", "but", "I", "believe", "the", "problem", "has", "a", "few", "factors", "contribute", "to", "it", "NUMBER", "For", "example", "if", "a", "bot", "be", "created", "with", "an", "empty", "database", "and", "no", "results", "be", "find", "through", "twitter", "s", "api", "then", "the", "only", "response", "that", "the", "bot", "knows", "to", "give", "be", "the", "user", "s", "previous", "input", "NUMBER", "The", "issue", "be", "that", "something", "should", "always", "be", "returned", "by", "the", "twitter", "storage", "adapter", "but", "this", "be", "currently", "not", "happening", "NUMBER", "I", "will", "keep", "you", "posted", "on", "a", "solution", "NUMBER", "Good", "idea", "NUMBER", "You", "might", "want", "to", "take", "a", "look", "at", "the", "jsondatabase", "LINK", "adapter", "that", "comes", "include", "in", "this", "project", "NUMBER", "It", "uses", "a", "dictionary", "to", "do", "exactly", "what", "you", "describe", "NUMBER", "The", "adapter", "uses", "a", "package", "call", "jsondb", "which", "be", "also", "available", "here", "on", "GitHub", "LINK", "This", "be", "a", "great", "idea", "NUMBER", "I", "would", "be", "more", "than", "happy", "to", "add", "direct", "support", "for", "this", "NUMBER", "I", "will", "need", "to", "look", "into", "the", "AIML", "spec", "a", "bit", "fist", "as", "it", "looks", "like", "they", "support", "a", "few", "things", "like", "wildcard", "input", "which", "ChatterBot", "currently", "do", "not", "support", "NUMBER", "Also", "this", "be", "really", "cool", "because", "it", "looks", "like", "there", "be", "a", "lot", "of", "data", "already", "available", "in", "this", "format", "LINK", "davizucon", "Looks", "promising", "definitely", "something", "to", "look", "in", "to", "NUMBER", "I", "ve", "was", "reminded", "about", "AIML", "recently", "and", "I", "just", "wanted", "to", "record", "a", "brief", "though", "about", "a", "possible", "direction", "for", "support", "it", "in", "ChatterBot", "NUMBER", "NUMBER", "It", "would", "be", "easy", "to", "add", "a", "field", "to", "mark", "Statements", "that", "contain", "AIML", "NUMBER", "NUMBER", "A", "filter", "would", "have", "to", "be", "created", "to", "control", "when", "AIML", "responses", "be", "use", "NUMBER", "NUMBER", "I", "m", "not", "certain", "about", "how", "the", "AIML", "statements", "should", "be", "evaluated", "but", "I", "m", "fairly", "sure", "a", "custom", "logic", "adapter", "would", "be", "need", "for", "this", "so", "that", "the", "AIML", "responses", "could", "be", "processed", "into", "statement", "text", "NUMBER", "I", "be", "assuming", "the", "file", "media", "solarpolarman", "hdd", "code", "discord", "markov", "chatterbot", "NUMBER", "py", "be", "one", "you", "created", "NUMBER", "I", "have", "no", "way", "of", "knowing", "what", "the", "contents", "of", "this", "file", "be", "_but_", "if", "you", "be", "importing", "something", "from", "the", "chatterbot", "module", "you", "install", "with", "pip", "inside", "of", "another", "file", "named", "chatterbot", "NUMBER", "py", "this", "can", "cause", "some", "issue", "NUMBER", "Solution", "Rename", "your", "chatterbot", "NUMBER", "py", "file", "to", "something", "else", "NUMBER", "Please", "let", "me", "know", "if", "this", "works", "NUMBER", "SolarPolarMan", "Any", "update", "on", "this", "I", "m", "closing", "this", "off", "feel", "free", "to", "comment", "or", "reopen", "if", "you", "need", "more", "assistance", "NUMBER", "Hi", "could", "you", "try", "run", "the", "following", "and", "let", "me", "know", "if", "it", "fix", "the", "issue", "for", "you", "python", "usr", "bin", "env", "python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "BotItaliano", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "italian", "chatbot", "NUMBER", "get_response", "u", "la", "vita", "\u00e8", "vita", "In", "this", "case", "I", "ve", "made", "two", "change", "NUMBER", "I", "ve", "add", "a", "unicode", "header", "to", "the", "main", "program", "and", "I", "have", "add", "a", "unicode", "prefix", "to", "the", "input", "string", "containing", "the", "unicode", "characters", "NUMBER", "diff", "usr", "bin", "env", "python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "BotItaliano", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "italian", "chatbot", "NUMBER", "get_response", "la", "vita", "\u00e8", "vita", "chatbot", "NUMBER", "get_response", "u", "la", "vita", "\u00e8", "vita", "NUMBER", "Looks", "great", "Thank", "you", "I", "just", "notice", "that", "there", "be", "an", "extra", "parameter", "for", "in", "the", "process_input", "method", "of", "the", "JSON", "io", "adapter", "NUMBER", "A", "change", "needs", "to", "be", "made", "so", "that", "all", "io", "adapters", "meet", "the", "same", "interface", "specification", "NUMBER", "As", "a", "side", "note", "I", "be", "also", "considering", "make", "the", "following", "change", "Rename", "no", "output", "adapter", "to", "something", "that", "describes", "what", "it", "do", "rather", "than", "what", "it", "do", "not", "do", "Rename", "json", "adapter", "since", "it", "actual", "returns", "a", "dictionary", "not", "a", "json", "object", "Add", "an", "object", "adapter", "that", "returns", "the", "original", "statement", "object", "I", "m", "just", "add", "these", "as", "a", "comment", "for", "now", "since", "I", "be", "not", "yet", "sure", "on", "the", "scope", "of", "the", "pull", "request", "for", "these", "change", "NUMBER", "The", "extra", "parameter", "issue", "describe", "in", "the", "body", "of", "the", "ticket", "has", "be", "resolve", "by", "LINK", "NUMBER", "Leaving", "this", "open", "for", "now", "until", "my", "other", "comment", "LINK", "issuecomment", "NUMBER", "be", "resolve", "as", "well", "NUMBER", "The", "update", "representation", "should", "be", "a", "list", "of", "tuples", "input_statement", "output_statement", "input_statement", "output_statement", "input_statement", "output_statement", "NUMBER", "This", "change", "will", "be", "needed", "for", "upcoming", "additions", "of", "logic", "adapters", "that", "look", "at", "the", "context", "of", "the", "current", "conversation", "NUMBER", "Looks", "good", "NUMBER", "I", "created", "the", "banner", "use", "GIMP", "it", "appears", "that", "I", "no", "longer", "have", "the", "original", "NUMBER", "xcf", "file", "for", "the", "banner", "which", "would", "have", "made", "editing", "it", "much", "easier", "but", "the", "font", "in", "GIMP", "was", "call", "Courier", "NUMBER", "Pitch", "NUMBER", "Also", "the", "only", "other", "github", "project", "I", "could", "find", "that", "has", "additional", "readme", "languages", "appears", "to", "just", "include", "them", "in", "the", "base", "directory", "of", "the", "project", "LINK", "cheat", "sheet", "blob", "master", "README", "NUMBER", "md", "Looks", "great", "NUMBER", "Thank", "you", "NUMBER", "Sorry", "looks", "like", "I", "forgot", "to", "hit", "merge", "on", "this", "smile", "Currently", "no", "NUMBER", "You", "would", "have", "to", "manually", "remove", "it", "NUMBER", "This", "seems", "like", "a", "reasonable", "problem", "NUMBER", "I", "will", "leave", "this", "ticket", "open", "until", "I", "have", "a", "chance", "to", "add", "a", "method", "to", "address", "it", "NUMBER", "The", "Penultimate", "Defenestrator", "LINK", "Adds", "a", "method", "for", "remove", "statements", "NUMBER", "It", "will", "be", "include", "in", "the", "next", "release", "NUMBER", "I", "m", "not", "sure", "I", "see", "why", "this", "change", "be", "needed", "NUMBER", "Isn", "t", "be", "possible", "to", "get", "the", "directory", "the", "database", "be", "in", "from", "the", "database", "path", "variable", "Additionally", "a", "file", "path", "be", "an", "attribute", "that", "do", "not", "apply", "to", "every", "type", "of", "database", "NUMBER", "Mongo", "db", "be", "a", "good", "example", "of", "this", "NUMBER", "That", "be", "true", "but", "for", "a", "number", "of", "logic", "adapters", "additional", "file", "need", "to", "be", "created", "once", "they", "be", "use", "dynamic", "training", "data", "be", "a", "great", "example", "NUMBER", "I", "actually", "don", "t", "know", "what", "adapters", "you", "be", "referring", "to", "here", "I", "don", "t", "think", "chatterbot", "has", "any", "logic", "adapters", "that", "create", "additional", "file", "during", "runtime", "NUMBER", "I", "be", "going", "to", "veto", "this", "change", "for", "now", "NUMBER", "I", "be", "a", "strong", "supporter", "of", "only", "write", "code", "that", "be", "necessary", "NUMBER", "Unused", "code", "can", "add", "unnecessary", "complications", "and", "decrease", "readability", "NUMBER", "DarkmatterVale", "Looks", "like", "this", "involves", "the", "speech", "adapter", "NUMBER", "Any", "thoughts", "on", "what", "might", "be", "cause", "it", "I", "m", "closing", "this", "off", "as", "I", "believe", "this", "has", "be", "resolve", "NUMBER", "The", "self", "NUMBER", "context", "variable", "be", "typically", "the", "current", "instance", "of", "the", "ChatBot", "class", "or", "a", "subclass", "of", "Adaptation", "NUMBER", "What", "test", "be", "you", "trying", "to", "write", "test", "for", "that", "you", "be", "seeing", "these", "error", "on", "An", "example", "of", "when", "this", "occur", "be", "if", "I", "have", "self", "NUMBER", "context", "NUMBER", "io", "NUMBER", "process", "NUMBER", "it", "will", "throw", "an", "error", "because", "self", "NUMBER", "context", "be", "of", "NoneType", "NUMBER", "This", "makes", "sense", "since", "nothing", "has", "be", "assigned", "to", "self", "NUMBER", "context", "then", "it", "be", "None", "NUMBER", "By", "default", "the", "context", "also", "doesn", "t", "have", "any", "adapters", "add", "to", "it", "so", "there", "be", "nothing", "to", "call", "the", "process", "method", "on", "NUMBER", "You", "have", "two", "options", "for", "setting", "up", "test", "NUMBER", "NUMBER", "Create", "a", "mock", "object", "and", "add", "the", "adapters", "you", "want", "to", "test", "with", "to", "it", "NUMBER", "You", "may", "be", "able", "to", "do", "this", "by", "doing", "something", "like", "python", "context", "Adaptation", "context", "NUMBER", "add_adapter", "my_io_adapter", "context", "NUMBER", "add_adapter", "my_storage_adapter", "NUMBER", "self", "NUMBER", "my_adapter", "MyAdaper", "self", "NUMBER", "my_adapter", "NUMBER", "add_context", "context", "NUMBER", "Test", "at", "a", "higher", "level", "NUMBER", "Create", "a", "test", "ChatBot", "instance", "and", "specify", "only", "your", "adapter", "as", "a", "parameter", "NUMBER", "DarkmatterVale", "I", "agree", "perhaps", "it", "would", "be", "possible", "to", "package", "the", "developer", "assistant", "as", "it", "s", "own", "library", "NUMBER", "I", "had", "be", "thinking", "of", "creating", "something", "similar", "at", "one", "point", "my", "idea", "was", "to", "create", "an", "agent", "that", "would", "automatically", "detect", "issue", "with", "code", "on", "github", "and", "leave", "a", "comment", "or", "create", "a", "pull", "request", "NUMBER", "ghost", "Looks", "good", "NUMBER", "merge", "NUMBER", "Not", "sure", "at", "the", "moment", "looks", "like", "the", "issue", "be", "with", "numpy", "LINK", "ci", "NUMBER", "org", "gunthercox", "ChatterBot", "jobs", "NUMBER", "I", "cannot", "it", "appears", "to", "work", "correctly", "for", "me", "as", "well", "although", "I", "already", "have", "numpy", "install", "NUMBER", "What", "was", "the", "reason", "for", "add", "numpy", "to", "the", "requirements", "file", "I", "don", "t", "actually", "see", "it", "be", "imported", "anywhere", "NUMBER", "I", "don", "t", "believe", "it", "s", "needed", "NUMBER", "I", "do", "see", "that", "it", "be", "include", "in", "NLTK", "s", "requirements", "but", "they", "don", "t", "appear", "to", "be", "installing", "it", "on", "setup", "LINK", "req", "NUMBER", "txt", "L", "NUMBER", "NUMBER", "Their", "documentation", "do", "say", "that", "numpy", "be", "optional", "LINK", "NUMBER", "Ah", "interesting", "just", "find", "a", "note", "in", "the", "documentation", "for", "travis", "ci", "LINK", "ci", "NUMBER", "com", "user", "ci", "environment", "Preinstalled", "pip", "package", "On", "all", "version", "except", "pypy", "and", "pypy", "NUMBER", "have", "numpy", "as", "well", "NUMBER", "So", "the", "issue", "be", "occurring", "on", "travis", "s", "side", "NUMBER", "Travis", "normally", "has", "numpy", "preinstalled", "so", "that", "test", "build", "can", "be", "created", "faster", "in", "the", "virtual", "environment", "NUMBER", "So", "far", "I", "have", "seen", "a", "lot", "of", "remarks", "that", "manually", "installing", "numpy", "and", "other", "scientific", "python", "package", "significantly", "increases", "build", "time", "NUMBER", "It", "should", "also", "be", "noted", "that", "there", "be", "currently", "know", "issue", "that", "will", "occur", "in", "a", "Windows", "environment", "when", "installing", "python", "modules", "with", "c", "extensions", "as", "requirements", "NUMBER", "This", "be", "the", "reason", "for", "instance", "that", "the", "python", "Levenshtein", "package", "isn", "t", "required", "in", "this", "module", "NUMBER", "There", "may", "be", "a", "way", "to", "include", "numpy", "in", "the", "NUMBER", "travis", "configuration", "file", "similar", "to", "how", "it", "be", "do", "for", "mongodb", "LINK", "Although", "I", "have", "not", "be", "able", "to", "find", "evidence", "of", "this", "in", "any", "of", "the", "documentation", "yet", "NUMBER", "Also", "I", "just", "notice", "the", "test", "case", "for", "the", "named", "entity", "taggger", "LINK", "diff", "NUMBER", "bbeeee", "NUMBER", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "f", "NUMBER", "R", "NUMBER", "NUMBER", "This", "looks", "like", "a", "good", "negative", "test", "case", "the", "case", "that", "no", "named", "entities", "be", "find", "NUMBER", "It", "be", "important", "to", "include", "a", "positive", "test", "case", "as", "well", "to", "show", "the", "case", "of", "the", "named", "entity", "tagger", "succeeding", "NUMBER", "DarkmatterVale", "I", "believe", "you", "can", "add", "numpy", "to", "the", "travis", "build", "manually", "by", "manually", "installing", "it", "diff", "install", "sudo", "apt", "get", "install", "python", "numpy", "pip", "install", "coveralls", "pip", "install", "nltk", "pip", "install", "r", "requirements", "NUMBER", "txt", "you", "can", "also", "remove", "the", "pip", "install", "nltk", "line", "as", "it", "be", "already", "include", "in", "the", "requirements", "NUMBER", "txt", "file", "NUMBER", "Sorry", "my", "mistake", "NUMBER", "The", "package", "should", "have", "be", "apt", "get", "install", "python", "numpy", "without", "the", "sudo", "NUMBER", "I", "believe", "travis", "while", "lists", "it", "so", "it", "can", "be", "install", "this", "way", "without", "sudo", "NUMBER", "The", "first", "line", "in", "NUMBER", "travis", "NUMBER", "yml", "be", "sudo", "false", "want", "to", "try", "remove", "that", "and", "add", "back", "the", "_sudo_", "to", "the", "apt", "get", "install", "line", "This", "looks", "good", "NUMBER", "Internally", "documenting", "code", "as", "well", "as", "descriptive", "variable", "names", "be", "always", "a", "good", "idea", "NUMBER", "I", "believe", "this", "has", "be", "accomplished", "by", "NUMBER", "This", "looks", "like", "a", "good", "addition", "NUMBER", "I", "don", "t", "have", "access", "to", "a", "mac", "to", "test", "this", "on", "but", "I", "trust", "that", "it", "works", "NUMBER", "It", "looks", "like", "there", "was", "a", "conflict", "after", "one", "of", "the", "other", "pull", "request", "was", "merge", "NUMBER", "This", "will", "need", "to", "be", "rebased", "NUMBER", "This", "looks", "great", "NUMBER", "Would", "you", "mind", "update", "the", "documentation", "in", "the", "wiki", "You", "can", "probably", "do", "something", "very", "similar", "to", "what", "we", "have", "for", "logic", "adapters", "already", "LINK", "adapters", "use", "multiple", "logic", "adapters", "I", "like", "the", "direction", "this", "be", "going", "in", "to", "break", "some", "of", "the", "code", "out", "into", "utils", "NUMBER", "What", "would", "your", "thoughts", "be", "on", "renaming", "these", "classes", "to", "be", "more", "generic", "It", "be", "possible", "in", "the", "future", "that", "we", "may", "use", "something", "other", "than", "NLTK", "to", "accomplish", "these", "tasks", "NUMBER", "NLTKWordnet", "Wordnet", "NLTKStopWordsManager", "StopWordsManager", "NLTKPOSTagger", "POSTagger", "or", "PartOfSpeechTagger", "to", "be", "more", "verbose", "Awesome", "NUMBER", "Looks", "good", "NUMBER", "I", "m", "not", "sure", "if", "classifiers", "would", "make", "sense", "as", "a", "subclass", "of", "Adapter", "since", "I", "don", "t", "believe", "they", "will", "be", "use", "the", "same", "was", "as", "each", "of", "the", "three", "adapter", "types", "NUMBER", "Perhaps", "just", "creating", "a", "Classifier", "base", "class", "with", "a", "namespace", "at", "chatterbot", "NUMBER", "classifiers", "would", "be", "a", "better", "direction", "to", "go", "in", "NUMBER", "Still", "NUMBER", "at", "this", "point", "I", "be", "still", "not", "sure", "that", "I", "see", "the", "need", "for", "a", "separate", "set", "of", "classifier", "objects", "NUMBER", "It", "be", "important", "to", "consider", "the", "fact", "that", "many", "machine", "learning", "algorithms", "such", "as", "Naive", "Bayes", "Classification", "be", "relatively", "specific", "to", "the", "types", "of", "problem", "they", "can", "solve", "NUMBER", "And", "in", "many", "cases", "it", "be", "better", "to", "have", "a", "machine", "learning", "algorithm", "that", "be", "optimized", "for", "a", "specific", "problem", "rather", "than", "a", "generic", "algorithm", "designed", "to", "solve", "a", "range", "of", "problem", "NUMBER", "Some", "things", "to", "think", "about", "NUMBER", "What", "other", "classifiers", "be", "needed", "would", "be", "useful", "NUMBER", "What", "be", "the", "need", "LINK", "driven", "design", "as", "an", "integration", "strategy", "that", "be", "driving", "this", "addition", "NUMBER", "How", "do", "you", "define", "a", "classifier", "and", "what", "do", "it", "do", "This", "be", "important", "for", "designing", "a", "good", "interface", "for", "the", "base", "class", "NUMBER", "NUMBER", "Is", "there", "any", "exist", "code", "aside", "from", "the", "time", "adapter", "that", "contains", "logic", "that", "would", "work", "as", "a", "classifier", "This", "update", "and", "add", "test", "to", "ensure", "that", "the", "confidence", "value", "returned", "by", "the", "closest", "match", "adapter", "fall", "within", "the", "range", "between", "NUMBER", "and", "NUMBER", "DarkmatterVale", "I", "believe", "this", "corrects", "the", "issue", "observed", "in", "NUMBER", "Feel", "free", "to", "review", "and", "merge", "this", "pull", "request", "NUMBER", "This", "did", "correct", "the", "issue", "NUMBER", "NUMBER", "Changes", "look", "good", "NUMBER", "Also", "I", "m", "currently", "looking", "into", "NUMBER", "Should", "have", "some", "sort", "of", "feedback", "shortly", "NUMBER", "I", "believe", "the", "issue", "here", "be", "due", "to", "an", "overly", "aggressive", "confidence", "threshold", "on", "the", "closest", "match", "adapter", "NUMBER", "As", "you", "mention", "line", "NUMBER", "in", "multi_adapter", "NUMBER", "py", "LINK", "_adapter", "NUMBER", "py", "L", "NUMBER", "appears", "to", "be", "ignoring", "output", "from", "evaluate_mathematically", "even", "when", "it", "properly", "generates", "a", "response", "with", "a", "confidence", "of", "NUMBER", "Logging", "the", "output", "of", "each", "adapter", "be", "use", "I", "notice", "that", "the", "closest", "match", "adapter", "s", "confidence", "value", "be", "be", "returned", "as", "an", "integer", "percentage", "above", "NUMBER", "NUMBER", "Dividing", "by", "NUMBER", "appears", "to", "correct", "the", "issue", "by", "bringing", "it", "back", "down", "to", "a", "representation", "between", "NUMBER", "and", "NUMBER", "I", "be", "currently", "write", "up", "test", "and", "I", "will", "create", "a", "pull", "request", "shortly", "NUMBER", "Some", "general", "thoughts", "on", "add", "a", "variable", "to", "determine", "if", "a", "given", "statement", "should", "be", "saved", "to", "the", "database", "when", "returned", "from", "a", "logic", "adapter", "My", "initial", "thought", "on", "this", "be", "that", "whatever", "be", "returned", "from", "a", "logic", "adapter", "should", "always", "be", "saved", "I", "be", "open", "to", "alternate", "suggestions", "NUMBER", "My", "reasoning", "for", "this", "be", "that", "the", "response", "that", "a", "logic", "adapter", "returns", "be", "part", "of", "a", "conversation", "NUMBER", "In", "a", "conversation", "each", "statement", "and", "the", "order", "in", "which", "they", "occur", "be", "an", "important", "characteristic", "NUMBER", "Although", "there", "be", "nothing", "implement", "at", "the", "moment", "that", "takes", "the", "context", "of", "the", "current", "conversation", "into", "account", "it", "be", "my", "hope", "that", "there", "will", "be", "in", "the", "future", "NUMBER", "For", "each", "statement", "that", "exists", "in", "a", "bot", "s", "database", "the", "most", "valuable", "statements", "be", "those", "in", "which", "the", "bot", "has", "learned", "which", "other", "statement", "s", "the", "given", "statement", "be", "in", "response", "to", "NUMBER", "This", "be", "because", "this", "data", "makes", "it", "possible", "to", "select", "a", "match", "to", "a", "user", "s", "input", "that", "be", "know", "to", "yield", "a", "response", "NUMBER", "So", "if", "a", "user", "asks", "the", "bot", "a", "question", "lets", "say", "something", "like", "What", "time", "be", "it", "and", "the", "bot", "replies", "that", "The", "current", "time", "be", "NUMBER", "NUMBER", "pm", "we", "can", "only", "assume", "that", "whatever", "the", "user", "says", "next", "be", "a", "response", "to", "the", "bot", "s", "output", "NUMBER", "I", "would", "say", "that", "reasonably", "that", "would", "warrant", "maintaining", "the", "integrity", "of", "this", "data", "relationship", "by", "saving", "this", "data", "to", "the", "database", "NUMBER", "Hmm", "that", "s", "strange", "NUMBER", "This", "might", "actually", "be", "an", "issue", "with", "the", "response", "selection", "algorithm", "NUMBER", "Technically", "that", "should", "only", "happen", "if", "there", "be", "very", "few", "possible", "responses", "in", "the", "database", "and", "it", "be", "choosing", "one", "at", "random", "or", "if", "the", "use", "s", "input", "be", "very", "close", "to", "a", "question", "about", "the", "current", "time", "NUMBER", "I", "will", "write", "up", "a", "few", "test", "cases", "to", "see", "if", "I", "can", "consistently", "recreate", "this", "NUMBER", "It", "may", "be", "possible", "to", "refine", "the", "response", "selection", "process", "without", "blocking", "previous", "responses", "from", "be", "stored", "NUMBER", "I", "believe", "this", "should", "be", "safe", "to", "close", "NUMBER", "It", "might", "be", "a", "good", "idea", "to", "weight", "the", "advantages", "of", "threading", "vs", "multiprocessing", "for", "this", "task", "NUMBER", "Most", "computers", "nowadays", "be", "build", "with", "multi", "core", "processors", "NUMBER", "A", "multiprocessor", "implementation", "of", "this", "example", "would", "allow", "multi_adapter", "NUMBER", "py", "to", "run", "the", "processes", "for", "several", "adapters", "in", "parallel", "on", "separate", "processors", "NUMBER", "Of", "course", "the", "adapter", "would", "still", "need", "to", "wait", "for", "each", "adapter", "to", "finish", "processing", "but", "run", "them", "in", "parallel", "would", "still", "accomplish", "this", "faster", "even", "if", "a", "few", "adapters", "were", "lagging", "behind", "the", "others", "NUMBER", "Also", "I", "have", "to", "verify", "this", "but", "I", "believe", "that", "threading", "would", "be", "restricted", "to", "a", "single", "core", "NUMBER", "I", "do", "think", "threading", "would", "be", "quite", "useful", "for", "tasks", "in", "_some_", "adapters", "such", "as", "where", "a", "bit", "of", "background", "processing", "could", "provide", "an", "advantage", "NUMBER", "For", "instance", "an", "email", "IO", "adapter", "could", "use", "a", "thread", "to", "periodically", "check", "for", "new", "emails", "if", "there", "were", "new", "ones", "it", "would", "add", "them", "to", "a", "queue", "for", "the", "next", "time", "it", "was", "call", "to", "retrieve", "data", "NUMBER", "This", "would", "remove", "the", "need", "to", "wait", "for", "a", "web", "request", "to", "return", "with", "the", "update", "information", "every", "time", "the", "adapter", "be", "use", "NUMBER", "Looks", "great", "NUMBER", "Thank", "you", "again", "for", "the", "contribution", "Thank", "you", "It", "looks", "like", "the", "test", "failures", "on", "this", "branch", "be", "unrelated", "NUMBER", "DarkmatterVale", "Logic", "adapters", "and", "plugin", "adapters", "both", "accomplish", "the", "same", "task", "now", "NUMBER", "I", "think", "it", "would", "be", "beneficial", "to", "make", "a", "move", "to", "migrate", "the", "exist", "selection", "of", "plugin", "adapters", "to", "become", "logic", "adapters", "this", "should", "not", "require", "a", "huge", "amount", "of", "modification", "NUMBER", "Apart", "from", "sharing", "a", "more", "unified", "code", "base", "the", "other", "benefit", "be", "that", "there", "will", "be", "no", "restrictions", "to", "define", "what", "parts", "of", "the", "program", "be", "deeply", "integrated", "and", "what", "parts", "be", "not", "NUMBER", "This", "looks", "great", "Thank", "you", "NUMBER", "x", "Add", "new", "multi", "logic", "adapter", "that", "can", "hold", "multiple", "other", "logic", "adapters", "x", "Change", "logic", "adapters", "to", "return", "confidence", "value", "For", "NUMBER", "Not", "yet", "NUMBER", "I", "still", "have", "change", "to", "make", "before", "this", "gets", "merge", "NUMBER", "Looks", "great", "Thank", "you", "NUMBER", "sgoblin", "You", "can", "add", "a", "default", "for", "kwargs", "like", "this", "python", "something", "kwargs", "NUMBER", "get", "some_key", "default_value", "Thank", "you", "this", "be", "an", "awesome", "addition", "NUMBER", "I", "will", "review", "and", "merge", "this", "as", "soon", "as", "I", "can", "NUMBER", "This", "looks", "great", "Thank", "you", "for", "contribute", "this", "Hi", "guys", "sorry", "for", "the", "late", "response", "NUMBER", "If", "you", "be", "still", "looking", "to", "migrate", "from", "jsondb", "to", "mongo", "then", "I", "believe", "the", "following", "code", "snippet", "should", "help", "quite", "a", "bit", "NUMBER", "python", "from", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "import", "MongoDatabaseAdapter", "from", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "import", "JsonDatabaseAdapter", "mongo_adapter", "MongoDatabaseAdapter", "database", "my_mongo_database_name", "json_adapter", "JsonDatabaseAdapter", "database", "my_json_database_name", "Loop", "through", "every", "statement", "that", "exists", "in", "the", "json", "database", "for", "statement", "in", "json_adapter", "NUMBER", "filter", "Add", "the", "statement", "to", "the", "mongo", "database", "mongo_adapter", "NUMBER", "update", "statement", "I", "will", "look", "into", "this", "NUMBER", "This", "may", "indicate", "an", "issue", "with", "the", "mongodb", "adapter", "NUMBER", "I", "believe", "I", "have", "tracked", "down", "the", "issue", "NUMBER", "Response", "objects", "on", "each", "statement", "were", "be", "returned", "as", "a", "dictionary", "instead", "of", "a", "normalized", "list", "of", "objects", "when", "the", "filter", "method", "was", "be", "call", "NUMBER", "LINK", "should", "correct", "the", "problem", "NUMBER", "I", "will", "merge", "it", "as", "soon", "as", "test", "pass", "NUMBER", "The", "Penultimate", "Defenestrator", "I", "m", "not", "seeing", "this", "error", "on", "my", "end", "and", "the", "code", "appears", "correct", "NUMBER", "To", "explain", "what", "be", "be", "do", "circa", "line", "NUMBER", "python", "The", "response", "list", "be", "a", "list", "of", "dictionaries", "in", "which", "each", "dict", "be", "a", "response", "for", "response", "in", "response_list", "For", "each", "response", "that", "the", "current", "statement", "be", "in", "response", "to", "text", "response", "text", "Save", "the", "text", "value", "of", "the", "response", "del", "response", "text", "remove", "the", "text", "key", "from", "the", "dictionary", "Append", "the", "normalized", "Response", "object", "to", "the", "Statement", "s", "response", "list", "in_response_to", "NUMBER", "append", "Response", "text", "response", "Can", "you", "post", "the", "stack", "trace", "you", "be", "get", "I", "apologize", "I", "m", "fairly", "certain", "I", "just", "figured", "out", "what", "the", "issue", "be", "NUMBER", "There", "was", "a", "schema", "change", "in", "the", "json", "database", "format", "the", "also", "get", "release", "in", "NUMBER", "LINK", "NUMBER", "The", "change", "improves", "response", "object", "representations", "to", "make", "them", "more", "flexible", "however", "it", "breaks", "backwards", "compatibility", "NUMBER", "Not", "sure", "if", "there", "be", "simple", "a", "solution", "now", "that", "the", "database", "has", "both", "types", "of", "data", "structures", "within", "it", "NUMBER", "Possibly", "NUMBER", "This", "script", "may", "help", "NUMBER", "This", "should", "remove", "any", "invalid", "response", "keys", "that", "were", "created", "by", "the", "new", "version", "assuming", "it", "can", "load", "a", "statement", "NUMBER", "I", "recommend", "saving", "a", "backup", "first", "NUMBER", "python", "from", "chatterbot", "NUMBER", "conversation", "import", "Statement", "from", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "import", "JsonDatabaseAdapter", "adapter", "JsonDatabaseAdapter", "NUMBER", "Step", "NUMBER", "Remove", "invalid", "response", "data", "from", "statements", "there", "should", "be", "very", "few", "of", "these", "for", "key", "in", "adapter", "NUMBER", "_keys", "try", "statement", "adapter", "NUMBER", "find", "key", "except", "adapter", "NUMBER", "update", "Statement", "key", "From", "there", "if", "you", "want", "to", "migrate", "the", "database", "to", "the", "new", "version", "it", "might", "be", "best", "to", "attempt", "to", "export", "it", "as", "a", "corpus", "format", "NUMBER", "See", "LINK", "Then", "it", "would", "be", "possible", "to", "import", "it", "into", "the", "new", "database", "schema", "and", "retain", "all", "of", "the", "exist", "structure", "NUMBER", "I", "don", "t", "have", "a", "script", "for", "this", "yet", "but", "it", "would", "not", "be", "difficult", "to", "create", "NUMBER", "The", "Penultimate", "Defenestrator", "Were", "you", "ever", "able", "to", "resolve", "your", "issue", "Hi", "The", "Penultimate", "Defenestrator", "I", "be", "going", "to", "close", "this", "issue", "please", "re", "open", "if", "you", "need", "further", "assistance", "NUMBER", "I", "m", "going", "to", "vote", "against", "the", "propose", "implementation", "of", "this", "one", "NUMBER", "Something", "like", "this", "would", "be", "better", "implement", "as", "a", "logic", "adapter", "as", "ChatterBot", "moves", "towards", "a", "muti", "adapter", "structure", "in", "the", "future", "NUMBER", "As", "a", "logic", "adapter", "the", "setup", "would", "need", "to", "check", "if", "the", "input", "value", "contained", "a", "time", "centric", "question", "and", "then", "return", "the", "current", "time", "as", "a", "response", "statement", "NUMBER", "The", "reason", "for", "this", "design", "choice", "be", "to", "ensure", "greater", "flexibility", "in", "the", "future", "by", "preferring", "analysis", "over", "regex", "NUMBER", "A", "logic", "adapter", "would", "be", "modular", "and", "easily", "maintained", "while", "a", "training", "method", "such", "as", "the", "one", "propose", "leaves", "the", "database", "in", "a", "state", "in", "which", "it", "will", "always", "require", "statements", "to", "be", "checked", "for", "this", "dynamic", "format", "NUMBER", "The", "most", "ideal", "implementation", "would", "be", "a", "logic", "adapter", "that", "internally", "trains", "itself", "based", "on", "a", "set", "of", "similar", "question", "such", "as", "What", "time", "be", "it", "Do", "you", "know", "the", "time", "etc", "NUMBER", "As", "well", "as", "false", "values", "such", "as", "Do", "you", "have", "a", "dog", "Is", "it", "time", "to", "go", "etc", "NUMBER", "The", "adapter", "should", "then", "recognize", "when", "an", "input", "statement", "contains", "a", "valid", "question", "and", "return", "the", "current", "time", "accordingly", "NUMBER", "This", "would", "provide", "the", "greatest", "flexibility", "likely", "accomplish", "language", "independence", "and", "still", "accomplish", "the", "desired", "result", "as", "propose", "initially", "NUMBER", "If", "you", "take", "a", "look", "at", "LINK", "it", "covers", "the", "future", "change", "to", "logic", "adapters", "that", "will", "make", "this", "possible", "NUMBER", "The", "key", "parts", "be", "rating", "confidence", "values", "and", "tie", "breaking", "NUMBER", "The", "Penultimate", "Defenestrator", "I", "be", "closing", "this", "off", "as", "NUMBER", "demonstrates", "the", "implementation", "of", "this", "feature", "as", "I", "describe", "it", "NUMBER", "Feel", "free", "to", "checkout", "the", "code", "for", "these", "change", "LINK", "Awesome", "point", "Feel", "free", "to", "make", "a", "pull", "request", "otherwise", "I", "will", "make", "sure", "to", "add", "it", "in", "a", "commit", "before", "the", "next", "release", "NUMBER", "Thank", "you", "Currently", "there", "be", "some", "very", "similar", "code", "in", "LINK", "_meaning", "NUMBER", "py", "L", "NUMBER", "I", "will", "check", "this", "out", "wondering", "if", "it", "might", "be", "an", "NLTK", "version", "relate", "issue", "NUMBER", "I", "be", "going", "to", "close", "this", "one", "off", "for", "now", "NUMBER", "I", "have", "not", "be", "able", "to", "replicate", "it", "NUMBER", "Currently", "logic", "adapters", "select", "a", "match", "based", "on", "a", "given", "algorithm", "and", "return", "that", "match", "NUMBER", "This", "pull", "request", "makes", "change", "so", "that", "they", "will", "return", "the", "response", "instead", "of", "the", "match", "NUMBER", "The", "reason", "this", "be", "needed", "be", "because", "as", "ChatterBot", "continues", "to", "develop", "it", "be", "likely", "that", "there", "will", "be", "logic", "adapters", "in", "the", "future", "that", "do", "not", "always", "follow", "this", "pattern", "thus", "it", "would", "be", "better", "if", "the", "current", "selection", "of", "logic", "adapters", "completely", "encompassed", "all", "of", "the", "logic", "they", "require", "to", "produce", "a", "response", "NUMBER", "x", "Reconfigure", "logic", "adapters", "to", "have", "access", "to", "storage", "adapters", "x", "Move", "response", "selection", "logic", "inside", "of", "logic", "adapters", "x", "Do", "something", "with", "those", "three", "response", "selection", "methods", "in", "the", "main", "class", "No", "problem", "NUMBER", "These", "all", "sound", "great", "NUMBER", "I", "can", "t", "think", "of", "any", "additions", "at", "the", "moment", "but", "I", "will", "make", "a", "comment", "if", "I", "do", "NUMBER", "DarkmatterVale", "Not", "a", "problem", "these", "next", "few", "weeks", "will", "likely", "be", "very", "busy", "for", "me", "as", "well", "NUMBER", "Good", "luck", "with", "your", "code", "I", "m", "closing", "this", "off", "as", "some", "of", "these", "adapters", "go", "beyond", "the", "scope", "of", "chatbot", "communication", "NUMBER", "It", "would", "be", "great", "to", "see", "them", "created", "as", "third", "party", "python", "package", "that", "could", "be", "imported", "by", "the", "main", "ChatterBot", "module", "NUMBER", "Speech", "synthesis", "and", "recognition", "would", "be", "an", "awesome", "addition", "NUMBER", "Closing", "this", "ticket", "off", "as", "work", "on", "this", "component", "of", "chatterbot", "will", "be", "continuing", "at", "LINK", "voice", "This", "looks", "great", "NUMBER", "Thank", "you", "NUMBER", "Can", "t", "believe", "I", "miss", "this", "NUMBER", "Thank", "you", "I", "have", "remove", "the", "requirements", "for", "request", "and", "request", "oauthlib", "because", "these", "be", "not", "actually", "use", "anywhere", "in", "the", "project", "anymore", "NUMBER", "I", "will", "be", "release", "version", "NUMBER", "later", "tonight", "because", "there", "was", "additional", "error", "in", "the", "NUMBER", "release", "NUMBER", "Version", "NUMBER", "has", "be", "release", "to", "pypi", "NUMBER", "This", "ticket", "introduces", "the", "road", "map", "for", "the", "next", "set", "of", "major", "change", "to", "ChatterBot", "NUMBER", "Multiadapter", "support", "be", "the", "addition", "of", "the", "ability", "for", "ChatterBot", "instances", "to", "be", "configured", "with", "any", "number", "of", "each", "type", "of", "adapter", "NUMBER", "Storage", "adapters", "x", "Logic", "adapters", "x", "Input", "Output", "IO", "adapters", "Storage", "Adapters", "Multi", "adapter", "support", "for", "storage", "adapters", "means", "that", "it", "will", "be", "possible", "for", "ChatterBot", "to", "be", "connected", "to", "multiple", "storage", "backends", "NUMBER", "The", "advantage", "that", "this", "will", "provide", "be", "the", "the", "ability", "for", "a", "ChatterBot", "instance", "to", "derive", "responses", "from", "multiple", "sources", "NUMBER", "In", "some", "cases", "these", "databases", "may", "be", "dynamically", "update", "independently", "of", "the", "current", "ChatterBot", "instance", "NUMBER", "An", "example", "where", "this", "configuration", "would", "be", "useful", "be", "demonstrated", "in", "cases", "such", "as", "the", "twitter", "storage", "adapter", "LINK", "NUMBER", "A", "chat", "bot", "configured", "with", "a", "local", "database", "adapter", "and", "the", "twitter", "storage", "adapter", "would", "be", "able", "to", "join", "results", "from", "both", "sources", "to", "produce", "a", "response", "increasing", "the", "diversity", "of", "the", "knowledge", "base", "NUMBER", "The", "upgrade", "to", "a", "multi", "storage", "adapter", "setup", "will", "require", "the", "following", "change", "to", "be", "implement", "It", "should", "be", "possible", "to", "individually", "set", "which", "databases", "be", "read", "only", "NUMBER", "Logic", "adapters", "Setting", "multiple", "logic", "adapters", "will", "make", "it", "possible", "to", "produce", "more", "advance", "responses", "while", "keep", "each", "logic", "algorithm", "modular", "NUMBER", "The", "upgrade", "to", "a", "multi", "logic", "adapter", "setup", "will", "require", "the", "following", "change", "to", "be", "implement", "NUMBER", "Logic", "adapters", "will", "need", "to", "have", "a", "method", "for", "determining", "the", "confidence", "that", "the", "result", "produced", "by", "each", "adapter", "be", "correct", "NUMBER", "This", "value", "should", "be", "a", "percentage", "represented", "by", "a", "value", "between", "NUMBER", "to", "NUMBER", "In", "the", "case", "of", "exist", "adapters", "such", "as", "closest_match", "this", "value", "could", "be", "determined", "by", "the", "percentage", "that", "the", "closest", "matching", "statement", "matches", "the", "input", "statement", "NUMBER", "In", "other", "adapters", "the", "resulting", "value", "could", "simply", "return", "a", "NUMBER", "or", "a", "NUMBER", "depending", "on", "if", "a", "specific", "input", "matching", "a", "given", "requirement", "be", "detected", "NUMBER", "NUMBER", "It", "will", "be", "important", "to", "watch", "out", "for", "cases", "where", "one", "logic", "adapter", "s", "confidence", "algorithm", "has", "an", "incorrectly", "increase", "probability", "of", "resulting", "in", "a", "higher", "confidence", "than", "another", "algorithm", "s", "NUMBER", "This", "may", "be", "handle", "best", "by", "allowing", "for", "the", "manual", "specification", "of", "scaling", "factors", "NUMBER", "NUMBER", "Tie", "breaking", "will", "be", "accomplished", "via", "an", "order", "of", "precedence", "determined", "by", "the", "order", "in", "which", "each", "logic", "adapter", "be", "listed", "NUMBER", "In", "the", "case", "of", "a", "tie", "in", "resulting", "confidence", "values", "the", "adapter", "that", "was", "listed", "first", "will", "be", "given", "the", "highest", "priority", "and", "thus", "it", "s", "result", "will", "be", "returned", "NUMBER", "IO", "adapters", "Multi", "adapter", "support", "for", "IO", "adapters", "entails", "that", "a", "ChatterBot", "instance", "will", "be", "able", "to", "receive", "input", "from", "multiple", "sources", "NUMBER", "There", "be", "many", "cases", "where", "this", "would", "be", "useful", "NUMBER", "A", "simple", "example", "be", "a", "setup", "where", "a", "single", "bot", "be", "required", "to", "communicate", "with", "users", "through", "two", "different", "endpoints", "such", "as", "google", "hangouts", "and", "an", "IRC", "channel", "or", "multiple", "IRC", "channels", "NUMBER", "LucasZielke", "What", "brings", "you", "to", "that", "conclusion", "Just", "a", "note", "although", "multi", "logic", "adapter", "support", "has", "be", "add", "it", "be", "not", "currently", "use", "the", "weighting", "based", "on", "adapter", "order", "as", "describe", "in", "the", "initial", "ticket", "NUMBER", "Right", "now", "it", "will", "simply", "select", "the", "first", "highest", "confidence", "result", "that", "it", "can", "generate", "NUMBER", "I", "had", "a", "chance", "to", "think", "about", "the", "implementation", "for", "multiple", "io", "adapters", "a", "bit", "more", "yesterday", "NUMBER", "When", "retrieving", "input", "from", "multiple", "sources", "the", "response", "should", "be", "returned", "to", "the", "adapter", "that", "the", "input", "came", "from", "NUMBER", "So", "for", "a", "hypothetical", "scenario", "with", "multiple", "io", "adapters", "Process", "input", "Process", "response", "Process", "response", "Input", "received", "from", "email", "adapter", "Return", "email", "Input", "from", "terminal", "Reply", "in", "terminal", "Closing", "this", "ticket", "off", "because", "the", "multi", "adapter", "has", "be", "created", "for", "logic", "adapters", "NUMBER", "I", "be", "not", "planning", "on", "add", "support", "for", "multiple", "databases", "because", "the", "amount", "of", "time", "it", "would", "take", "to", "query", "multiple", "large", "databases", "causes", "more", "problem", "than", "it", "fix", "in", "the", "long", "run", "NUMBER", "I", "be", "also", "re", "thinking", "having", "multiple", "IO", "adapters", "as", "it", "add", "a", "lot", "of", "complexity", "without", "many", "advantages", "NUMBER", "For", "many", "cases", "it", "makes", "more", "sense", "to", "just", "create", "multiple", "bot", "instances", "when", "more", "than", "one", "input", "and", "output", "method", "be", "needed", "NUMBER", "DarkmatterVale", "This", "be", "awesome", "NUMBER", "I", "will", "go", "over", "this", "pull", "request", "and", "provide", "some", "thorough", "feedback", "as", "soon", "as", "possible", "NUMBER", "So", "far", "I", "think", "I", "like", "the", "concept", "of", "the", "processor", "adapter", "NUMBER", "This", "might", "be", "a", "really", "good", "addition", "in", "the", "future", "for", "determining", "if", "logic", "adapters", "need", "to", "run", "in", "other", "multi", "logic", "adapter", "scenarios", "NUMBER", "I", "m", "checking", "this", "out", "locally", "use", "examples", "terminal_example", "NUMBER", "py", "NUMBER", "It", "appears", "that", "when", "I", "enter", "a", "value", "that", "contains", "a", "mathematical", "expression", "such", "as", "What", "be", "NUMBER", "NUMBER", "no", "response", "be", "returned", "NUMBER", "This", "be", "strange", "since", "I", "can", "clearly", "see", "that", "test", "be", "passing", "NUMBER", "In", "general", "a", "good", "way", "to", "test", "out", "change", "to", "python", "package", "that", "be", "also", "imported", "in", "other", "local", "projects", "be", "just", "to", "install", "the", "package", "with", "the", "change", "you", "have", "made", "locally", "NUMBER", "This", "can", "be", "do", "use", "pip", "install", "NUMBER", "upgrade", "This", "should", "be", "run", "from", "within", "the", "same", "directory", "as", "setup", "NUMBER", "py", "NUMBER", "Also", "another", "item", "I", "notice", "be", "that", "you", "will", "need", "to", "include", "the", "json", "data", "file", "you", "created", "in", "the", "install", "package", "NUMBER", "This", "can", "be", "do", "by", "add", "the", "following", "line", "to", "MANIFEST", "NUMBER", "in", "recursive", "include", "chatterbot", "adapters", "NUMBER", "json", "No", "problem", "this", "be", "all", "really", "good", "work", "and", "its", "cool", "to", "see", "it", "come", "together", "NUMBER", "Also", "that", "correct", "the", "issue", "NUMBER", "Code", "review", "be", "a", "part", "of", "programming", "NUMBER", "It", "s", "always", "possible", "to", "make", "a", "mistake", "having", "a", "few", "more", "sets", "of", "eyes", "on", "it", "never", "hurts", "NUMBER", "So", "far", "everything", "that", "I", "m", "seeing", "here", "looks", "great", "NUMBER", "Performance", "wise", "it", "works", "excellently", "NUMBER", "At", "the", "moment", "I", "believe", "there", "be", "only", "one", "more", "thing", "in", "the", "code", "that", "I", "believe", "could", "be", "improved", "I", "ll", "leave", "a", "comment", "about", "it", "on", "the", "line", "NUMBER", "DarkmatterVale", "These", "change", "look", "good", "to", "me", "NUMBER", "Did", "you", "have", "any", "more", "additions", "before", "I", "merge", "this", "Alright", "just", "did", "a", "manual", "merge", "with", "master", "because", "there", "was", "some", "conflict", "that", "GitHub", "couldn", "t", "resolve", "automatically", "NUMBER", "Either", "way", "this", "be", "an", "awesome", "addition", "and", "it", "will", "be", "available", "in", "the", "next", "release", "on", "pypi", "NUMBER", "I", "be", "aware", "of", "the", "issue", "NUMBER", "It", "be", "due", "to", "an", "improper", "conversion", "of", "NUMBER", "md", "format", "to", "NUMBER", "rst", "NUMBER", "I", "have", "be", "meaning", "to", "figure", "out", "what", "line", "the", "problem", "be", "happening", "on", "but", "haven", "t", "had", "time", "yet", "NUMBER", "Thank", "you", "NUMBER", "This", "issue", "has", "be", "correct", "in", "the", "release", "of", "ChatterBot", "v", "NUMBER", "Sorry", "I", "notice", "this", "too", "after", "merge", "yesterday", "and", "didn", "t", "get", "a", "chance", "to", "respond", "NUMBER", "It", "looks", "like", "test", "didn", "t", "run", "on", "the", "pull", "request", "so", "I", "never", "get", "a", "notification", "about", "the", "python", "NUMBER", "issue", "NUMBER", "Nlpnet", "had", "a", "few", "python", "NUMBER", "compatibility", "issue", "as", "well", "that", "I", "was", "able", "to", "open", "a", "pull", "request", "to", "fix", "LINK", "NUMBER", "I", "also", "agree", "that", "the", "dependency", "file", "be", "rather", "large", "for", "nlpnet", "and", "I", "notice", "that", "it", "uses", "c", "extensions", "for", "faster", "processing", "the", "issue", "be", "that", "it", "may", "also", "cause", "this", "library", "to", "fail", "to", "install", "in", "some", "windows", "environments", "NUMBER", "I", "would", "be", "interested", "to", "see", "if", "it", "was", "possible", "to", "accomplish", "SVO", "triplet", "identification", "with", "NLTK", "which", "has", "excellent", "support", "across", "platforms", "and", "python", "version", "NUMBER", "For", "the", "time", "be", "I", "be", "going", "to", "move", "the", "last", "commit", "for", "the", "SVO", "adapter", "to", "different", "branch", "until", "we", "can", "get", "these", "issue", "correct", "NUMBER", "That", "s", "ok", "new", "branch", "be", "up", "at", "LINK", "The", "new", "adapter", "looks", "great", "I", "also", "just", "add", "you", "to", "the", "git", "repo", "so", "you", "can", "directly", "create", "new", "branch", "and", "push", "to", "the", "repo", "if", "you", "want", "to", "NUMBER", "Also", "you", "should", "now", "have", "access", "edit", "the", "project", "wiki", "NUMBER", "Would", "you", "mind", "add", "a", "brief", "description", "for", "the", "new", "logic", "adapter", "LINK", "adapters", "That", "looks", "good", "NUMBER", "Thank", "you", "NUMBER", "Looks", "good", "NUMBER", "Thank", "you", "for", "the", "pull", "request", "python", "levenshtein", "unfortunately", "cannot", "be", "a", "requirement", "NUMBER", "It", "has", "to", "remain", "optional", "because", "it", "be", "a", "c", "extension", "and", "it", "currently", "fail", "to", "build", "on", "most", "windows", "operate", "systems", "NUMBER", "Hi", "it", "appears", "that", "the", "corpus", "data", "file", "were", "not", "include", "in", "the", "package", "NUMBER", "I", "ve", "correct", "the", "issue", "by", "including", "them", "in", "the", "project", "s", "MANIFEST", "NUMBER", "in", "file", "NUMBER", "You", "should", "now", "be", "able", "to", "upgrade", "to", "chatterbot", "NUMBER", "where", "this", "should", "now", "be", "fix", "NUMBER", "Thank", "you", "for", "the", "pull", "request", "NUMBER", "This", "looks", "like", "it", "should", "be", "good", "to", "merge", "I", "just", "want", "to", "check", "a", "few", "things", "locally", "first", "NUMBER", "Mainly", "because", "this", "makes", "modifications", "to", "the", "response", "statement", "which", "was", "previously", "unmodified", "so", "this", "creates", "a", "small", "hole", "for", "test", "results", "because", "nothing", "be", "checking", "to", "see", "what", "be", "add", "to", "the", "response", "statement", "in", "the", "database", "NUMBER", "Hi", "jamdagni", "NUMBER", "I", "just", "checked", "over", "this", "pull", "request", "NUMBER", "I", "cannot", "merge", "the", "change", "to", "chatterbot", "NUMBER", "py", "because", "they", "modify", "the", "response", "statement", "that", "the", "chatterbot", "returns", "NUMBER", "The", "issue", "with", "this", "be", "that", "it", "be", "possible", "for", "a", "bot", "to", "return", "an", "incorrect", "response", "NUMBER", "If", "we", "modify", "an", "incorrect", "response", "to", "say", "that", "it", "be", "_in", "response", "to_", "a", "users", "input", "then", "that", "response", "will", "be", "treated", "as", "a", "valid", "reply", "to", "that", "input", "statement", "when", "it", "be", "encountered", "again", "in", "the", "future", "NUMBER", "I", "believe", "the", "issue", "may", "be", "be", "cause", "elsewhere", "in", "the", "code", "NUMBER", "Running", "the", "test", "case", "you", "created", "against", "the", "current", "codebase", "I", "notice", "that", "subsequent", "calls", "of", "the", "get_response", "method", "be", "add", "the", "previous", "response", "statement", "to", "the", "in_response_to", "field", "of", "the", "users", "input", "NUMBER", "This", "be", "because", "the", "current", "implementation", "of", "get_response", "treats", "the", "input", "statement", "as", "a", "part", "of", "the", "current", "conversation", "that", "the", "chatbot", "be", "having", "with", "the", "user", "NUMBER", "So", "a", "test", "such", "as", "python", "response", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "how", "do", "you", "login", "to", "gmail", "response", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "how", "do", "I", "login", "to", "gmail", "response", "NUMBER", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "how", "do", "I", "login", "to", "gmail", "actually", "ignores", "the", "chatbot", "s", "responses", "so", "that", "it", "thinks", "_", "how", "do", "I", "login", "to", "gmail", "_", "be", "a", "response", "to", "whatever", "was", "returned", "from", "_", "how", "do", "you", "login", "to", "gmail", "_", "NUMBER", "This", "can", "also", "be", "seen", "in", "the", "database", "dumps", "from", "each", "step", "in", "the", "test", "case", "After", "training", "json", "Goto", "gmail", "NUMBER", "com", "enter", "your", "login", "information", "and", "hit", "enter", "in_response_to", "how", "do", "you", "login", "to", "gmail", "NUMBER", "how", "do", "you", "login", "to", "gmail", "in_response_to", "After", "response_to_trained_set", "json", "Goto", "gmail", "NUMBER", "com", "enter", "your", "login", "information", "and", "hit", "enter", "in_response_to", "how", "do", "you", "login", "to", "gmail", "NUMBER", "how", "do", "you", "login", "to", "gmail", "in_response_to", "After", "similar_question_", "NUMBER", "json", "Goto", "gmail", "NUMBER", "com", "enter", "your", "login", "information", "and", "hit", "enter", "in_response_to", "how", "do", "you", "login", "to", "gmail", "NUMBER", "how", "do", "you", "login", "to", "gmail", "in_response_to", "how", "do", "I", "login", "to", "gmail", "in_response_to", "Goto", "gmail", "NUMBER", "com", "enter", "your", "login", "information", "and", "hit", "enter", "NUMBER", "After", "similar_question_", "NUMBER", "json", "Goto", "gmail", "NUMBER", "com", "enter", "your", "login", "information", "and", "hit", "enter", "in_response_to", "how", "do", "you", "login", "to", "gmail", "NUMBER", "how", "do", "you", "login", "to", "gmail", "in_response_to", "how", "do", "I", "login", "to", "gmail", "in_response_to", "Goto", "gmail", "NUMBER", "com", "enter", "your", "login", "information", "and", "hit", "enter", "NUMBER", "Based", "on", "what", "I", "be", "seeing", "I", "don", "t", "believer", "there", "be", "an", "issue", "here", "NUMBER", "I", "can", "see", "how", "it", "would", "be", "useful", "to", "get", "a", "response", "independent", "of", "the", "current", "conversation", "NUMBER", "Perhaps", "an", "additional", "method", "to", "accomplish", "this", "would", "be", "a", "better", "solution", "Hi", "jamdagni", "NUMBER", "I", "m", "very", "sorry", "about", "not", "get", "back", "to", "you", "promptly", "NUMBER", "My", "schedule", "has", "be", "very", "busy", "lately", "NUMBER", "I", "just", "had", "a", "chance", "to", "walk", "through", "the", "test", "output", "you", "provide", "and", "figured", "out", "where", "the", "main", "part", "of", "the", "issue", "be", "NUMBER", "In", "the", "main", "chatterbot", "NUMBER", "py", "file", "there", "be", "a", "variable", "call", "all_statements", "which", "be", "a", "list", "of", "every", "statement", "in", "the", "database", "NUMBER", "This", "list", "be", "then", "pass", "to", "the", "logic", "adapter", "which", "searches", "for", "the", "closest", "match", "to", "the", "know", "input", "and", "returns", "whatever", "statement", "the", "match", "was", "in", "response", "to", "NUMBER", "The", "issue", "that", "you", "run", "into", "was", "because", "after", "the", "first", "time", "the", "the", "similar", "statement", "was", "entered", "as", "input", "the", "statement", "then", "existed", "in", "the", "database", "however", "it", "had", "no", "response", "values", "NUMBER", "Your", "fix", "modifies", "the", "input", "statement", "to", "correct", "this", "NUMBER", "However", "this", "can", "lead", "to", "possible", "problem", "later", "if", "the", "input", "response", "that", "chatterbot", "provides", "be", "incorrect", "very", "possible", "when", "work", "with", "small", "data", "sets", "NUMBER", "To", "correct", "this", "issue", "with", "out", "modifying", "response", "data", "I", "be", "going", "to", "modify", "the", "storage", "adapter", "to", "include", "a", "_not_", "filter", "NUMBER", "This", "will", "allow", "the", "initial", "filter", "set", "of", "all", "know", "responses", "to", "exclude", "any", "statements", "that", "do", "not", "have", "a", "know", "response", "NUMBER", "I", "be", "currently", "work", "on", "add", "these", "change", "and", "will", "create", "a", "new", "pull", "request", "later", "likely", "tonight", "NUMBER", "Again", "thank", "you", "for", "bringing", "this", "issue", "to", "my", "attention", "and", "my", "apologies", "for", "not", "get", "to", "this", "sooner", "NUMBER", "I", "just", "opened", "NUMBER", "which", "add", "a", "check", "to", "remove", "statements", "that", "be", "no", "in", "response", "to", "a", "know", "statement", "NUMBER", "Contrary", "to", "what", "I", "mention", "yesterday", "it", "wasn", "t", "actually", "that", "statements", "with", "no", "values", "in", "their", "in_response_to", "list", "needed", "to", "be", "remove", "instead", "actually", "needed", "to", "be", "any", "statement", "for", "which", "there", "was", "no", "other", "statement", "that", "listed", "it", "in", "it", "s", "in_response_to", "field", "that", "needed", "to", "be", "remove", "before", "passing", "the", "list", "to", "the", "logic", "adapter", "NUMBER", "I", "ve", "made", "additional", "comments", "to", "explain", "this", "where", "the", "modification", "was", "add", "in", "the", "main", "chatterbot", "NUMBER", "py", "file", "NUMBER", "I", "have", "also", "include", "the", "test", "case", "that", "you", "provide", "all", "except", "for", "the", "last", "line", "python", "self", "NUMBER", "assertIn", "similar_question", "self", "NUMBER", "chatbot", "NUMBER", "orage", "NUMBER", "find", "response_to_trained_set", "NUMBER", "in_response_to", "This", "had", "to", "be", "remove", "because", "the", "response", "should", "not", "have", "the", "input", "add", "to", "it", "NUMBER", "Thank", "you", "again", "for", "open", "this", "ticket", "and", "for", "your", "time", "NUMBER", "This", "was", "a", "significant", "bug", "that", "I", "likely", "wouldn", "t", "have", "notice", "otherwise", "NUMBER", "I", "believe", "you", "might", "be", "looking", "to", "use", "the", "no_output", "LINK", "adapters", "no", "output", "adapter", "adapter", "here", "instead", "of", "the", "terminal", "adapter", "NUMBER", "You", "can", "switch", "the", "adapter", "by", "setting", "the", "io_adapter", "parameter", "python", "chatbot", "ChatBot", "My", "ChatterBot", "io_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "io", "NUMBER", "NoOutputAdapter", "LINK", "_output", "NUMBER", "py", "Please", "let", "me", "know", "if", "this", "solution", "works", "for", "you", "NUMBER", "Hi", "thank", "you", "for", "the", "pull", "request", "NUMBER", "This", "be", "actually", "not", "a", "typo", "in", "the", "readme", "it", "a", "a", "bug", "in", "the", "code", "that", "be", "preventing", "the", "whole", "english", "corpus", "from", "be", "loaded", "LINK", "NUMBER", "I", "will", "hopefully", "have", "a", "fix", "up", "soon", "NUMBER", "Alright", "just", "reconsidered", "this", "because", "I", "be", "still", "trying", "to", "figure", "out", "some", "of", "the", "issue", "that", "be", "happening", "here", "NUMBER", "Thank", "you", "for", "the", "suggestions", "NUMBER", "I", "can", "confirm", "as", "well", "NUMBER", "Interestingly", "it", "appears", "that", "the", "unit", "test", "for", "this", "LINK", "_tests", "test_training_from_corpus", "NUMBER", "py", "L", "NUMBER", "be", "passing", "NUMBER", "I", "believe", "the", "issue", "has", "something", "to", "do", "with", "relative", "non", "relative", "import", "paths", "be", "loaded", "in", "the", "corpus", "utility", "module", "LINK", "I", "will", "be", "looking", "into", "this", "more", "later", "today", "NUMBER", "I", "be", "continuing", "to", "look", "into", "this", "issue", "NUMBER", "I", "be", "still", "trying", "to", "debug", "what", "be", "going", "on", "here", "NUMBER", "What", "I", "be", "seeing", "be", "that", "the", "corpus", "modules", "be", "be", "imported", "differently", "depending", "on", "where", "the", "method", "be", "call", "from", "NUMBER", "I", "can", "currently", "duplicate", "both", "successful", "and", "fail", "module", "imports", "by", "run", "either", "nosetests", "test", "training_tests", "fail", "or", "just", "nosetests", "passing", "NUMBER", "Hi", "zeandrade", "this", "should", "be", "all", "set", "now", "NUMBER", "I", "ve", "switched", "from", "use", "python", "imports", "to", "simply", "traversing", "the", "data", "directory", "of", "file", "NUMBER", "This", "makes", "things", "much", "easier", "to", "work", "in", "general", "and", "corrects", "the", "issue", "with", "the", "import", "location", "you", "encountered", "NUMBER", "Serialized", "response", "lists", "should", "be", "a", "list", "of", "json", "objects", "so", "that", "additional", "data", "such", "can", "be", "add", "in", "the", "future", "NUMBER", "Current", "format", "Response", "text", "NUMBER", "New", "format", "json", "text", "Response", "text", "occurrence", "NUMBER", "DarkmatterVale", "Definitely", "I", "agree", "NUMBER", "I", "haven", "t", "had", "a", "chance", "to", "work", "on", "this", "yet", "NUMBER", "I", "was", "thinking", "of", "implement", "it", "over", "this", "upcoming", "weekend", "NUMBER", "The", "Closest", "Meaning", "Logic", "Adapter", "LINK", "_meaning", "NUMBER", "py", "currently", "only", "checks", "the", "path", "similarity", "between", "the", "first", "synset", "for", "each", "word", "synset", "NUMBER", "NUMBER", "NUMBER", "path_similarity", "synset", "NUMBER", "NUMBER", "NUMBER", "This", "heuristic", "might", "be", "more", "accurate", "if", "it", "selected", "the", "maximum", "shortest", "path", "pair", "of", "synsets", "for", "the", "two", "words", "NUMBER", "Because", "this", "operation", "might", "greatly", "increase", "the", "amount", "of", "time", "required", "to", "process", "each", "result", "it", "may", "be", "useful", "to", "look", "into", "the", "possibility", "of", "caching", "logical", "evaluations", "made", "by", "this", "adapter", "on", "the", "statement", "object", "when", "it", "be", "saved", "to", "the", "database", "NUMBER", "Then", "the", "check", "would", "only", "need", "to", "be", "processed", "if", "the", "value", "of", "the", "overall", "synonymous", "meaning", "between", "two", "statements", "had", "not", "already", "be", "evaluated", "NUMBER", "Thank", "you", "I", "didn", "t", "know", "about", "wup_similarity", "until", "now", "NUMBER", "I", "will", "look", "into", "it", "NUMBER", "ChatterBot", "currently", "support", "two", "different", "dialogue", "algorithms", "NUMBER", "The", "first", "be", "the", "_closest", "match_", "algorithm", "that", "determines", "the", "similarity", "between", "the", "statement", "provide", "by", "the", "user", "and", "a", "set", "of", "know", "statements", "NUMBER", "For", "example", "based", "on", "the", "sample", "input", "you", "provide", "there", "be", "a", "NUMBER", "similarity", "between", "where", "be", "the", "post", "office", "and", "looking", "for", "the", "post", "office", "NUMBER", "The", "closest", "match", "algorithm", "selects", "the", "highest", "matching", "know", "statements", "and", "returns", "a", "response", "based", "on", "that", "selection", "NUMBER", "The", "second", "be", "the", "_closest", "meaning_", "algorithm", "NUMBER", "This", "algorithm", "uses", "the", "wordnet", "functionality", "of", "nltk", "LINK", "to", "determine", "the", "similarity", "of", "two", "statements", "based", "on", "the", "path", "similarity", "between", "each", "token", "in", "each", "statement", "NUMBER", "The", "sum", "of", "the", "path", "similarities", "be", "use", "so", "that", "the", "statement", "that", "has", "the", "closest", "path", "similarity", "basically", "the", "closeness", "of", "synonyms", "be", "returned", "NUMBER", "In", "the", "case", "of", "both", "algorithms", "and", "the", "training", "examples", "you", "provide", "the", "input", "of", "looking", "for", "the", "post", "office", "would", "match", "close", "enough", "to", "where", "be", "the", "post", "office", "to", "return", "it", "be", "right", "behind", "you", "NUMBER", "So", "to", "answer", "your", "question", "about", "what", "functionality", "be", "available", "enriching", "or", "at", "least", "retaining", "a", "context", "during", "a", "dialogue", "Currently", "not", "present", "NUMBER", "ChatterBot", "do", "retain", "a", "copy", "of", "the", "current", "conversation", "and", "it", "a", "parameter", "that", "be", "provide", "to", "all", "logic", "adapters", "NUMBER", "However", "it", "be", "currently", "not", "use", "NUMBER", "I", "have", "plan", "to", "create", "a", "new", "logic", "adapter", "that", "uses", "the", "context", "of", "the", "current", "conversation", "to", "alter", "the", "decision", "of", "what", "result", "be", "returned", "NUMBER", "This", "feature", "be", "most", "likely", "to", "be", "add", "next", "NUMBER", "learning", "from", "humans", "Yes", "ChatterBot", "do", "have", "a", "readonly", "mode", "where", "it", "will", "not", "learn", "however", "by", "default", "the", "ChatterBot", "will", "add", "to", "it", "s", "know", "selection", "of", "responses", "as", "an", "individual", "communicates", "with", "it", "NUMBER", "It", "maintains", "the", "context", "of", "what", "the", "statement", "was", "and", "what", "it", "was", "in", "response", "to", "NUMBER", "It", "also", "records", "the", "number", "of", "times", "a", "given", "response", "has", "occur", "a", "useful", "metric", "when", "selecting", "the", "most", "likely", "response", "to", "a", "given", "statement", "NUMBER", "make", "prediction", "or", "and", "deduction", "based", "on", "available", "knowledge", "Yes", "The", "logic", "that", "be", "currently", "available", "be", "more", "deduction", "based", "but", "it", "just", "comes", "down", "to", "how", "each", "selection", "be", "chosen", "in", "a", "given", "response", "algorithm", "NUMBER", "In", "all", "cases", "the", "current", "selection", "of", "response", "algorithms", "always", "go", "with", "the", "most", "likely", "response", "NUMBER", "Additionally", "creating", "new", "response", "algorithms", "be", "fairly", "simple", "NUMBER", "To", "create", "one", "just", "define", "a", "class", "that", "completed", "this", "interface", "python", "class", "MyLogicAdapter", "LogicAdapter", "def", "get", "self", "text", "statement_list", "current_conversation", "TODO", "return", "selected_statement", "Thank", "you", "I", "be", "planning", "on", "make", "these", "update", "to", "the", "documentation", "soon", "NUMBER", "I", "have", "update", "these", "sections", "in", "the", "wiki", "NUMBER", "Thank", "you", "for", "posting", "these", "question", "please", "let", "me", "know", "if", "there", "be", "anything", "else", "I", "can", "improve", "or", "clarify", "NUMBER", "It", "would", "be", "interesting", "to", "have", "an", "IO", "adapter", "for", "ChatterBot", "that", "makes", "it", "possible", "for", "a", "instance", "of", "the", "program", "to", "communicate", "through", "an", "IRC", "client", "NUMBER", "I", "don", "t", "have", "a", "lot", "of", "experience", "with", "IRC", "but", "this", "would", "be", "a", "great", "addition", "and", "a", "pull", "request", "would", "be", "welcomed", "if", "anyone", "be", "ever", "interested", "NUMBER", "I", "would", "be", "more", "than", "happy", "to", "accept", "a", "pull", "request", "if", "this", "can", "be", "accomplished", "NUMBER", "I", "have", "had", "people", "ask", "me", "about", "this", "before", "which", "be", "why", "I", "created", "the", "ticket", "NUMBER", "Again", "I", "don", "t", "know", "a", "ton", "about", "IRC", "so", "I", "can", "t", "offer", "much", "help", "if", "you", "want", "to", "look", "into", "this", "NUMBER", "One", "idea", "which", "might", "help", "be", "that", "I", "have", "be", "considering", "designing", "an", "adapter", "for", "email", "communication", "NUMBER", "The", "structure", "be", "set", "up", "so", "that", "there", "be", "a", "background", "thread", "that", "periodically", "checks", "for", "a", "new", "message", "NUMBER", "If", "it", "finds", "one", "it", "saves", "it", "in", "a", "queue", "until", "a", "get_latest_message", "method", "be", "call", "NUMBER", "I", "m", "wondering", "if", "a", "similar", "structure", "would", "work", "in", "this", "case", "It", "would", "be", "really", "cool", "to", "have", "an", "IO", "adapter", "for", "ChatterBot", "that", "makes", "it", "possible", "for", "a", "chatbot", "instance", "to", "communicate", "through", "the", "Google", "Hangouts", "API", "NUMBER", "It", "may", "be", "useful", "to", "look", "at", "LINK", "Pull", "request", "welcomed", "if", "anyone", "be", "interested", "NUMBER", "That", "looks", "promising", "I", "will", "have", "to", "check", "out", "how", "they", "be", "accomplishing", "their", "event", "handle", "LINK", "but", "something", "like", "that", "may", "work", "well", "NUMBER", "I", "believe", "the", "include", "database", "contains", "a", "validation", "error", "NUMBER", "I", "haven", "t", "be", "able", "to", "isolate", "where", "exactly", "it", "be", "NUMBER", "My", "plan", "to", "correct", "this", "be", "to", "remove", "the", "include", "database", "in", "a", "future", "release", "of", "ChatterBot", "and", "to", "add", "a", "corpus", "of", "training", "material", "that", "can", "be", "use", "to", "easily", "populate", "a", "database", "NUMBER", "My", "recommendation", "in", "the", "mean", "time", "be", "to", "use", "a", "different", "database", "than", "the", "one", "that", "comes", "include", "with", "ChatterBot", "NUMBER", "I", "apologize", "about", "the", "issue", "I", "will", "correct", "it", "as", "soon", "as", "I", "be", "able", "NUMBER", "I", "haven", "t", "heard", "about", "this", "before", "but", "it", "looks", "very", "interesting", "NUMBER", "This", "might", "work", "well", "as", "a", "new", "logic", "adapter", "that", "takes", "Cortical", "s", "API", "credentials", "as", "a", "keyword", "argument", "NUMBER", "Feel", "free", "to", "explore", "this", "I", "will", "be", "traveling", "for", "the", "next", "four", "days", "and", "won", "t", "have", "a", "chance", "to", "thoroughly", "experiment", "with", "Cortical", "s", "API", "NUMBER", "From", "what", "I", "ve", "seen", "so", "far", "it", "sounds", "extremely", "promising", "NUMBER", "Keep", "me", "posted", "with", "what", "you", "come", "up", "with", "NUMBER", "Awesome", "let", "me", "know", "how", "it", "goes", "NUMBER", "Yes", "here", "be", "how", "I", "would", "recommend", "setting", "this", "up", "NUMBER", "Lets", "say", "we", "create", "a", "new", "ChatBot", "instance", "like", "this", "python", "bot", "ChatBot", "My", "ChatterBot", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "JsonDatabaseAdapter", "logic_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "CorticalLogicAdapter", "io_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "io", "NUMBER", "TerminalAdapter", "database", "NUMBER", "database", "NUMBER", "db", "cortical_api_key", "XXXXXX", "XXX", "XXXXXX", "XXXXXX", "XXXXXXX", "Note", "the", "last", "parameter", "be", "pass", "in", "cortical_api_key", "NUMBER", "ChatterBot", "pass", "all", "keyword", "argument", "parameters", "to", "it", "s", "adapters", "NUMBER", "This", "means", "you", "can", "access", "these", "from", "inside", "your", "logic", "adapter", "or", "any", "other", "adapter", "for", "that", "matter", "NUMBER", "Then", "your", "new", "logic", "adapter", "would", "likely", "look", "something", "like", "this", "python", "class", "CorticalLogicAdapter", "LogicAdapter", "def", "__init__", "self", "kwargs", "self", "NUMBER", "api_key", "kwards", "NUMBER", "get", "cortical_api_key", "def", "get", "self", "text", "statement_list", "current_conversation", "Post", "data", "to", "cortical", "api", "and", "process", "results", "here", "NUMBER", "We", "can", "now", "reference", "self", "NUMBER", "api_key", "any", "time", "we", "need", "it", "NUMBER", "return", "response_statement", "No", "problem", "Hi", "GeraldLoeffler", "this", "adapter", "has", "not", "be", "implement", "yet", "NUMBER", "Thank", "you", "I", "was", "unaware", "of", "the", "Python", "API", "NUMBER", "Looks", "good", "NUMBER", "I", "will", "keep", "you", "posted", "NUMBER", "This", "add", "an", "IO", "adapter", "that", "allows", "ChatterBot", "to", "send", "and", "retrieve", "message", "through", "Twitter", "s", "API", "NUMBER", "Set", "up", "mock", "api", "for", "test", "LINK", "request", "with", "responses", "Closes", "NUMBER", "DarkmatterVale", "This", "still", "needs", "some", "work", "NUMBER", "I", "haven", "t", "looked", "at", "these", "change", "in", "a", "while", "but", "I", "believe", "I", "was", "run", "into", "an", "issue", "with", "authentication", "NUMBER", "Closing", "off", "this", "pull", "request", "as", "it", "will", "not", "be", "possible", "to", "complete", "NUMBER", "The", "main", "issue", "be", "that", "there", "be", "no", "way", "to", "reliably", "determine", "if", "a", "response", "has", "be", "issue", "to", "a", "direct", "message", "sent", "to", "the", "current", "user", "use", "Twitter", "s", "API", "NUMBER", "See", "LINK", "if", "a", "user", "has", "responded", "to", "a", "direct", "message", "NUMBER", "NUMBER", "For", "not", "the", "closest", "support", "for", "this", "will", "be", "the", "availability", "of", "the", "Twitter", "Storage", "Adapter", "LINK", "Looks", "good", "NUMBER", "Thank", "you", "Sorry", "this", "be", "because", "the", "version", "of", "ChatterBot", "on", "PyPi", "be", "behind", "the", "version", "of", "ChatterBot", "on", "master", "NUMBER", "I", "plan", "on", "doing", "a", "release", "of", "the", "next", "version", "of", "ChatterBot", "within", "the", "next", "week", "NUMBER", "Until", "then", "I", "recommend", "downloading", "the", "current", "copy", "of", "the", "repo", "from", "github", "and", "installing", "it", "locally", "via", "pip", "install", "NUMBER", "upgrade", "NUMBER", "I", "apologize", "for", "the", "inconvenience", "I", "hope", "this", "solution", "helps", "NUMBER", "Hi", "dambros", "the", "default", "_database_", "use", "by", "ChatterBot", "be", "just", "a", "json", "formatted", "file", "NUMBER", "You", "shouldn", "t", "need", "to", "make", "any", "adjustments", "to", "the", "database", "itself", "in", "this", "case", "NUMBER", "I", "recommend", "you", "checkout", "the", "get_response_data", "method", "in", "the", "main", "ChatBot", "object", "chatterbot", "NUMBER", "py", "NUMBER", "Around", "line", "NUMBER", "of", "this", "file", "you", "will", "see", "that", "I", "assign", "a", "few", "values", "like", "this", "python", "values", "name", "name", "values", "occurrence", "count", "values", "in_response_to", "response_list", "These", "be", "the", "attributes", "that", "be", "be", "saved", "to", "the", "database", "NUMBER", "In", "your", "case", "you", "would", "just", "want", "to", "add", "another", "one", "here", "that", "would", "look", "like", "python", "values", "score_value", "my_score_value", "Let", "me", "know", "if", "you", "need", "additional", "information", "on", "this", "NUMBER", "For", "this", "you", "will", "want", "to", "modify", "the", "train", "method", "in", "the", "StorageController", "class", "NUMBER", "You", "can", "assign", "the", "score", "in", "the", "same", "way", "in", "this", "method", "NUMBER", "Since", "the", "train", "method", "in", "the", "ChatBot", "class", "calls", "the", "train", "method", "in", "the", "StorageController", "class", "you", "may", "want", "to", "modify", "it", "to", "take", "an", "additional", "parameter", "for", "the", "score", "NUMBER", "This", "be", "a", "know", "issue", "NUMBER", "I", "m", "work", "on", "write", "database", "adapters", "for", "mongodb", "and", "possibly", "sqllite", "NUMBER", "The", "mongodb", "adapter", "should", "be", "available", "in", "the", "next", "release", "of", "ChatterBot", "NUMBER", "Greetings", "Just", "to", "provide", "an", "update", "LINK", "add", "support", "for", "connecting", "ChatterBot", "to", "MongoDB", "which", "should", "yield", "significant", "performance", "improvement", "on", "large", "databases", "NUMBER", "If", "you", "install", "python", "cjson", "ChatterBot", "s", "default", "database", "module", "LINK", "will", "detect", "it", "and", "use", "it", "instead", "of", "python", "s", "build", "in", "json", "NUMBER", "The", "cjson", "module", "LINK", "cjson", "has", "much", "better", "preformance", "and", "supposedly", "offers", "up", "to", "NUMBER", "times", "the", "speed", "when", "processing", "data", "NUMBER", "Aside", "from", "this", "as", "I", "briefly", "mention", "in", "LINK", "issuecomment", "NUMBER", "there", "be", "the", "oppertunity", "to", "write", "storage", "adapters", "for", "other", "types", "of", "databases", "NUMBER", "ChatterBot", "s", "default", "storage", "system", "uses", "a", "json", "file", "NUMBER", "An", "adapter", "to", "use", "another", "type", "of", "database", "could", "easily", "be", "created", "NUMBER", "Let", "me", "know", "if", "you", "end", "up", "creating", "an", "adapter", "for", "another", "database", "type", "pull", "request", "be", "always", "welcome", "smile", "NUMBER", "These", "classes", "have", "be", "moved", "out", "of", "the", "package", "for", "the", "latest", "release", "NUMBER", "This", "was", "do", "in", "favor", "of", "keep", "the", "main", "ChatBot", "class", "as", "abstract", "as", "possible", "while", "simultaneously", "introduce", "the", "concept", "of", "adapters", "for", "various", "operations", "NUMBER", "Example", "Classes", "All", "of", "the", "classes", "such", "as", "Terminal", "and", "TalkWithCleverBot", "have", "be", "moved", "into", "the", "examples", "LINK", "directory", "in", "the", "repo", "NUMBER", "Adapter", "Classes", "ChatterBot", "version", "NUMBER", "introduces", "the", "concept", "of", "adapters", "for", "three", "categories", "of", "operations", "NUMBER", "ChatterBot", "defines", "these", "three", "categories", "as", "storage", "logic", "and", "io", "NUMBER", "This", "change", "will", "make", "it", "possible", "for", "future", "modules", "to", "be", "created", "that", "allow", "ChatterBot", "to", "be", "set", "up", "to", "use", "any", "type", "of", "database", "and", "communicate", "with", "users", "through", "any", "medium", "such", "as", "web", "apis", "NUMBER", "Currently", "there", "isn", "t", "any", "documentation", "on", "these", "items", "since", "I", "forgot", "about", "update", "the", "readme", "NUMBER", "I", "ll", "add", "thorough", "documentation", "as", "soon", "as", "possible", "NUMBER", "I", "ve", "update", "the", "documentation", "in", "the", "readme", "for", "these", "change", "NUMBER", "Please", "let", "me", "know", "if", "anything", "be", "unclear", "or", "could", "be", "improved", "NUMBER", "Hi", "asya", "bergal", "thank", "you", "NUMBER", "Including", "requirements", "NUMBER", "txt", "in", "the", "manifest", "fix", "this", "problem", "NUMBER", "I", "ve", "release", "the", "latest", "version", "of", "ChatterBot", "NUMBER", "which", "include", "this", "fix", "NUMBER", "Hi", "sorry", "for", "the", "late", "reply", "NUMBER", "The", "change", "look", "good", "and", "I", "ve", "merge", "them", "onto", "master", "NUMBER", "I", "m", "going", "to", "go", "ahead", "with", "kevin", "brown", "s", "recommendation", "and", "have", "the", "database", "adapter", "return", "the", "newly", "inserted", "statement", "NUMBER", "I", "m", "really", "interested", "in", "implement", "this", "NUMBER", "I", "ve", "do", "some", "experiments", "with", "creating", "personas", "by", "custom", "training", "multiple", "bots", "NUMBER", "However", "I", "think", "the", "option", "to", "have", "ChatterBot", "learn", "based", "on", "weighted", "training", "data", "be", "closer", "to", "how", "people", "learn", "based", "on", "choosing", "role", "models", "NUMBER", "Looks", "good", "NUMBER", "Thank", "you", "Thanks", "NUMBER", "Closed", "in", "cfdd", "NUMBER", "bc", "NUMBER", "bf", "NUMBER", "f", "NUMBER", "f", "NUMBER", "b", "NUMBER", "ad", "NUMBER", "faa", "NUMBER", "a", "NUMBER", "da", "NUMBER", "ChatterBot", "be", "allows", "alternate", "statement", "selection", "algorithms", "to", "be", "pass", "into", "it", "s", "constructor", "NUMBER", "The", "default", "selection", "algorithm", "be", "engram", "which", "looks", "for", "the", "closest", "exist", "match", "to", "a", "statement", "in", "the", "database", "and", "then", "returns", "a", "know", "response", "to", "that", "statement", "NUMBER", "At", "the", "moment", "there", "be", "a", "placeholder", "file", "in", "chatterbot", "algorithms", "markov", "NUMBER", "py", "that", "be", "intended", "to", "be", "created", "as", "an", "option", "for", "selecting", "statements", "NUMBER", "The", "markov", "algorithm", "would", "retrieve", "a", "list", "of", "statements", "that", "can", "be", "recognized", "as", "matches", "to", "the", "input", "text", "NUMBER", "A", "Markov", "chain", "LINK", "_chain", "based", "algorithm", "can", "then", "be", "use", "to", "build", "a", "new", "response", "based", "on", "the", "collection", "of", "matching", "statements", "NUMBER", "Ideally", "a", "method", "to", "validate", "the", "grammatical", "correctness", "of", "the", "newly", "created", "statement", "could", "also", "be", "created", "NUMBER", "It", "may", "be", "useful", "to", "look", "into", "NLTK", "LINK", "to", "determine", "this", "validation", "NUMBER", "I", "m", "open", "to", "suggestions", "on", "how", "to", "determine", "the", "number", "of", "words", "required", "to", "satisfy", "the", "markov", "algorithm", "NUMBER", "ChatterBot", "currently", "keep", "count", "of", "the", "number", "of", "times", "it", "receives", "a", "particular", "statement", "as", "input", "NUMBER", "This", "count", "be", "not", "be", "use", "anywhere", "at", "the", "moment", "however", "it", "would", "useful", "to", "use", "it", "as", "a", "weighting", "factor", "to", "determine", "what", "response", "should", "be", "returned", "NUMBER", "Statements", "that", "occur", "frequently", "should", "be", "returned", "at", "a", "roughly", "equal", "frequency", "NUMBER", "x", "Training", "should", "be", "modify", "to", "increment", "this", "count", "so", "that", "desirable", "responses", "can", "be", "reinforced", "NUMBER", "Added", "in", "NUMBER", "a", "NUMBER", "ecc", "NUMBER", "f", "NUMBER", "cadeb", "NUMBER", "d", "NUMBER", "a", "NUMBER", "c", "NUMBER", "c", "NUMBER", "Awesome", "thank", "you", "NUMBER", "Looks", "great", "NUMBER", "I", "m", "in", "favor", "of", "dropping", "Python", "NUMBER", "support", "for", "improved", "test", "NUMBER", "I", "ve", "made", "the", "change", "already", "on", "the", "master", "branch", "NUMBER", "Much", "appreciation", "Alkalit", "This", "pull", "request", "introduces", "a", "new", "format", "for", "how", "chatterbot", "stores", "data", "that", "has", "be", "add", "NUMBER", "Previously", "chatterbot", "stored", "conversation", "data", "in", "csv", "file", "where", "each", "line", "represented", "a", "user", "s", "input", "and", "the", "bot", "s", "responses", "NUMBER", "The", "problem", "with", "this", "was", "that", "because", "chatterbot", "s", "responses", "were", "be", "recorded", "it", "was", "returning", "incorrect", "data", "NUMBER", "That", "be", "it", "was", "returning", "what", "it", "saw", "as", "the", "most", "accurate", "response", "when", "that", "response", "was", "the", "one", "that", "it", "provide", "to", "the", "user", "NUMBER", "To", "fix", "this", "problem", "the", "chatterbot", "now", "only", "stores", "the", "responses", "that", "the", "user", "gives", "to", "it", "NUMBER", "Conversations", "be", "now", "saved", "in", "a", "dictionary", "object", "instead", "of", "csv", "NUMBER", "This", "change", "makes", "it", "easier", "to", "store", "unique", "statements", "and", "to", "retrieve", "all", "possible", "responses", "for", "a", "given", "statement", "NUMBER", "This", "change", "will", "also", "make", "a", "future", "adaptation", "to", "use", "mongodb", "LINK", "much", "easier", "because", "mongo", "uses", "very", "similar", "formats", "NUMBER", "A", "counter", "variable", "has", "be", "add", "which", "records", "the", "number", "of", "times", "each", "statement", "be", "said", "by", "the", "user", "NUMBER", "This", "will", "be", "use", "in", "the", "future", "to", "determine", "common", "responses", "for", "statements", "NUMBER", "When", "selecting", "a", "response", "it", "be", "possible", "that", "no", "close", "match", "can", "be", "determined", "NUMBER", "If", "if", "this", "be", "the", "case", "then", "a", "random", "response", "will", "be", "returned", "NUMBER", "This", "change", "be", "to", "help", "the", "chatterbot", "increase", "the", "number", "of", "possible", "responses", "it", "can", "give", "by", "change", "the", "conversation", "to", "a", "new", "topic", "NUMBER", "Among", "other", "minor", "items", "this", "pull", "request", "also", "remove", "the", "deprecate", "exit", "command", "use", "for", "terminating", "the", "terminal", "chatterbot", "instance", "NUMBER", "Thank", "you", "I", "ve", "made", "the", "change", "NUMBER", "This", "fix", "incompatibilities", "with", "python", "NUMBER", "by", "remove", "the", "python", "oauth", "NUMBER", "library", "in", "favor", "of", "request", "oauthlib", "NUMBER", "This", "also", "change", "the", "oauth", "workflow", "to", "make", "it", "possible", "to", "redirect", "request", "urls", "to", "third", "party", "apps", "NUMBER", "Closes", "NUMBER", "Can", "you", "confirm", "that", "your", "responses", "to", "the", "chatterbot", "be", "be", "saved", "and", "that", "the", "flag", "for", "logging", "be", "set", "to", "true", "Logging", "be", "enable", "by", "default", "NUMBER", "Looking", "into", "this", "a", "bit", "more", "I", "realized", "that", "there", "was", "an", "issue", "with", "common", "responses", "not", "be", "returned", "NUMBER", "The", "frequency", "at", "which", "a", "statement", "be", "received", "by", "the", "chat", "bot", "be", "now", "taken", "into", "consideration", "when", "returning", "responses", "such", "that", "more", "common", "statements", "be", "returned", "with", "precedence", "NUMBER", "This", "change", "was", "made", "for", "NUMBER", "Did", "you", "have", "any", "more", "change", "to", "make", "in", "this", "pull", "These", "methods", "aren", "t", "be", "use", "NUMBER", "Feel", "free", "to", "create", "a", "branch", "and", "make", "the", "change", "as", "needed", "NUMBER", "Let", "me", "know", "if", "I", "need", "to", "clarify", "any", "of", "these", "NUMBER", "Also", "feel", "free", "to", "object", "to", "any", "of", "the", "planned", "change", "I", "realize", "that", "run", "local", "database", "might", "not", "always", "be", "convenient", "and", "while", "I", "m", "not", "sure", "if", "there", "be", "any", "workarounds", "I", "be", "not", "oppose", "to", "attempting", "to", "maintain", "flat", "file", "support", "of", "some", "kind", "NUMBER", "I", "want", "this", "project", "to", "be", "as", "useful", "as", "possible", "for", "everyone", "so", "any", "feedback", "be", "extremely", "helpful", "NUMBER", "NUMBER", "Do", "anyone", "who", "be", "use", "this", "project", "need", "to", "install", "its", "own", "instance", "of", "mondodb", "and", "have", "to", "open", "mongod", "NUMBER", "exe", "on", "their", "machine", "Correct", "the", "chatterbot", "needs", "a", "database", "instance", "to", "connect", "to", "NUMBER", "For", "windows", "mongod", "NUMBER", "exe", "needs", "to", "be", "run", "NUMBER", "docs", "link", "LINK", "mongodb", "on", "windows", "start", "mongodb", "NUMBER", "Will", "it", "replace", "flat", "file", "or", "can", "we", "have", "both", "flat", "file", "and", "mongodb", "in", "such", "a", "way", "if", "someone", "dont", "have", "db", "install", "can", "still", "use", "flat", "file", "conversations", "In", "the", "branch", "i", "ve", "be", "work", "on", "I", "replaced", "the", "flat", "file", "access", "completely", "because", "I", "didn", "t", "have", "a", "way", "to", "maintain", "the", "ability", "to", "store", "object", "references", "for", "each", "statement", "NUMBER", "Future", "change", "that", "need", "to", "be", "made", "to", "this", "program", "really", "require", "a", "database", "of", "some", "kind", "and", "csv", "file", "don", "t", "provide", "an", "adequate", "level", "of", "flexibility", "NUMBER", "For", "instance", "the", "database", "implementation", "will", "allow", "the", "bot", "to", "query", "responses", "that", "be", "specific", "to", "a", "single", "user", "or", "recall", "conversations", "that", "it", "had", "with", "a", "particular", "person", "NUMBER", "NUMBER", "Do", "we", "still", "need", "to", "specify", "logfiles", "directory", "Nope", "this", "won", "t", "be", "needed", "NUMBER", "NUMBER", "How", "be", "we", "going", "to", "add", "default", "conversations", "to", "mongodb", "for", "every", "new", "installations", "For", "this", "I", "ve", "add", "a", "method", "call", "train", "which", "takes", "a", "list", "of", "usernames", "and", "statements", "as", "a", "parameter", "NUMBER", "I", "ve", "include", "a", "sample", "below", "NUMBER", "In", "the", "future", "it", "should", "also", "be", "possible", "to", "pass", "a", "file", "in", "as", "a", "parameter", "to", "the", "training", "method", "NUMBER", "from", "chatterbot", "import", "Terminal", "from", "chatterbot", "NUMBER", "algorithms", "NUMBER", "engram", "import", "engram", "Create", "a", "new", "terminal", "chat", "bot", "and", "use", "the", "engram", "algorithm", "to", "select", "responses", "NUMBER", "chatbot", "Terminal", "engram", "conversation", "user", "Hello", "salvius", "Hi", "there", "user", "How", "be", "you", "doing", "salvius", "I", "m", "great", "NUMBER", "user", "That", "be", "good", "to", "hear", "salvius", "Thank", "you", "NUMBER", "user", "Your", "welcome", "NUMBER", "salvius", "Sure", "any", "time", "NUMBER", "user", "Yeah", "salvius", "Can", "I", "help", "you", "with", "anything", "Train", "the", "chat", "bot", "on", "these", "know", "conversations", "chatbot", "NUMBER", "train", "conversation", "Start", "the", "terminal", "session", "chatbot", "NUMBER", "begin", "I", "m", "closing", "this", "one", "off", "since", "commit", "f", "NUMBER", "da", "NUMBER", "bef", "NUMBER", "c", "NUMBER", "fb", "NUMBER", "d", "NUMBER", "d", "NUMBER", "ddece", "NUMBER", "introduces", "an", "adapter", "class", "that", "can", "be", "use", "to", "incorporate", "other", "database", "types", "NUMBER", "Awesome", "looks", "great", "I", "would", "like", "to", "allow", "this", "program", "to", "begin", "to", "address", "the", "Turing", "test", "concept", "NUMBER", "A", "few", "common", "ways", "that", "users", "from", "a", "study", "attempted", "to", "determine", "if", "an", "entity", "was", "a", "computer", "or", "a", "person", "include", "the", "following", "Ask", "name", "Ask", "gender", "Notice", "repeated", "information", "Ask", "question", "repeatedly", "to", "see", "if", "different", "answers", "be", "given", "Try", "to", "get", "the", "entity", "to", "contradict", "itself", "Ask", "math", "question", "Length", "of", "time", "taken", "to", "respond", "I", "do", "not", "plan", "to", "immediately", "address", "the", "last", "two", "bullets", "regard", "math", "and", "speed", "NUMBER", "The", "math", "question", "inherently", "suggest", "that", "the", "chat", "bot", "should", "get", "some", "math", "problem", "wrong", "in", "order", "to", "seem", "more", "human", "NUMBER", "My", "view", "on", "this", "be", "that", "it", "be", "more", "useful", "to", "have", "a", "bot", "that", "be", "good", "at", "math", "which", "could", "just", "as", "easily", "be", "a", "human", "NUMBER", "Also", "the", "amount", "of", "time", "taken", "to", "respond", "be", "not", "critical", "at", "this", "point", "but", "could", "be", "easily", "add", "if", "needed", "NUMBER", "A", "great", "selection", "of", "turing", "test", "question", "LINK", "justindomingue", "You", "have", "a", "valid", "point", "NUMBER", "As", "I", "ve", "researched", "this", "topic", "more", "in", "depth", "I", "m", "beginning", "to", "see", "a", "trend", "in", "the", "types", "of", "question", "that", "be", "asked", "NUMBER", "An", "example", "might", "be", "something", "such", "as", "What", "be", "the", "meaning", "of", "life", "which", "be", "actually", "an", "invalid", "Turing", "test", "question", "NUMBER", "The", "problem", "with", "it", "be", "the", "assumption", "that", "the", "machine", "can", "t", "define", "the", "meaning", "of", "life", "because", "it", "isn", "t", "alive", "NUMBER", "In", "reality", "producing", "a", "definition", "to", "answer", "a", "question", "be", "very", "easy", "to", "do", "NUMBER", "At", "the", "moment", "I", "believe", "that", "the", "best", "question", "for", "a", "Turing", "test", "require", "the", "subject", "to", "express", "abstract", "application", "of", "their", "own", "knowledge", "NUMBER", "By", "this", "I", "mean", "that", "they", "have", "to", "be", "able", "to", "leverage", "their", "own", "knowledge", "toward", "an", "end", "result", "NUMBER", "An", "example", "I", "ve", "be", "use", "for", "this", "be", "the", "following", "question", "Pretend", "you", "be", "Arnold", "Schwarzenegger", "NUMBER", "This", "command", "should", "invoke", "some", "serious", "cognitive", "requirements", "to", "test", "the", "subject", "NUMBER", "This", "be", "because", "it", "requires", "self", "recognition", "knowledge", "of", "an", "exist", "subject", "and", "the", "ability", "to", "apply", "that", "knowledge", "onto", "itself", "while", "use", "it", "to", "issue", "a", "response", "NUMBER", "I", "m", "in", "the", "process", "of", "researching", "more", "possibilities", "for", "valid", "Turing", "test", "question", "NUMBER", "This", "be", "obviously", "a", "very", "long", "term", "goal", "but", "it", "be", "useful", "to", "have", "the", "idea", "out", "in", "the", "open", "so", "that", "it", "can", "be", "discussed", "NUMBER", "Just", "wanted", "to", "post", "a", "few", "more", "thoughts", "here", "NUMBER", "NUMBER", "Testing", "awareness", "of", "own", "knowledge", "NUMBER", "In", "this", "case", "if", "the", "entity", "be", "test", "confirms", "competency", "to", "answer", "a", "given", "question", "then", "it", "should", "be", "able", "to", "answer", "the", "question", "when", "it", "be", "asked", "NUMBER", "This", "also", "could", "be", "modify", "to", "ask", "a", "more", "generalized", "version", "that", "question", "if", "the", "entity", "knows", "how", "about", "a", "general", "subject", "for", "instance", "_do", "you", "know", "how", "to", "compute", "natural", "logs", "_", "Q", "Do", "you", "know", "how", "to", "compute", "the", "natural", "log", "of", "seven", "fifths", "A", "Yes", "Q", "What", "be", "the", "natural", "log", "of", "seven", "fifths", "A", "I", "do", "not", "know", "NUMBER", "NUMBER", "Testing", "creative", "intelligence", "NUMBER", "Make", "up", "a", "story", "about", "_X_", "NUMBER", "This", "test", "the", "ability", "of", "the", "entity", "in", "question", "to", "hypothesize", "about", "the", "nature", "of", "a", "given", "object", "or", "situation", "NUMBER", "This", "also", "demonstrates", "how", "well", "an", "entity", "might", "be", "able", "theorize", "when", "dealing", "with", "incomplete", "information", "NUMBER", "NUMBER", "Ability", "to", "resolve", "state", "of", "cognitive", "dissonance", "NUMBER", "A", "simple", "way", "to", "test", "this", "may", "be", "to", "lie", "to", "the", "entity", "in", "question", "at", "one", "point", "in", "a", "conversation", "NUMBER", "By", "giving", "it", "contradictory", "information", "where", "one", "of", "the", "two", "components", "be", "clearly", "false", "the", "entity", "should", "assume", "the", "fact", "to", "be", "incorrect", "NUMBER", "NUMBER", "Test", "grouping", "of", "information", "NUMBER", "Humans", "have", "a", "natural", "tendency", "to", "mentally", "group", "similar", "objects", "and", "ideas", "NUMBER", "Which", "one", "of", "these", "things", "be", "not", "like", "the", "other", "NUMBER", "NUMBER", "Can", "a", "concept", "of", "_self_", "be", "defined", "There", "be", "a", "problem", "when", "the", "intelligence", "comes", "from", "the", "brilliance", "of", "the", "programmer", "and", "not", "the", "power", "of", "the", "machine", "NUMBER", "Emergent", "order", "in", "chaotic", "systems", "Neurons", "in", "the", "brain", "Test", "based", "That", "playing", "a", "sound", "causes", "an", "activity", "in", "x", "part", "of", "the", "brain", "NUMBER", "I", "m", "going", "to", "close", "this", "off", "as", "a", "ticket", "and", "move", "the", "content", "of", "the", "discussion", "into", "the", "project", "wiki", "LINK", "Test", "Questions", "NUMBER", "Eventually", "my", "goal", "will", "be", "to", "create", "a", "document", "that", "proposes", "a", "methodology", "for", "creating", "good", "question", "to", "ask", "a", "computer", "human", "to", "try", "to", "determine", "which", "be", "which", "NUMBER", "Obviously", "this", "project", "be", "still", "a", "ways", "away", "from", "this", "level", "of", "interaction", "but", "this", "be", "still", "a", "concept", "that", "be", "somewhat", "interesting", "NUMBER", "Agreed", "NUMBER", "For", "the", "current", "version", "I", "just", "wanted", "to", "have", "the", "ability", "to", "interact", "with", "Twitter", "s", "api", "available", "since", "the", "previous", "method", "wasn", "t", "generating", "a", "signature", "correctly", "which", "meant", "that", "post", "request", "were", "fail", "NUMBER", "In", "the", "future", "oauth", "NUMBER", "support", "will", "need", "to", "be", "enable", "NUMBER", "I", "have", "plan", "on", "how", "I", "want", "to", "set", "up", "methods", "for", "get", "tokens", "and", "redirect", "urls", "so", "that", "ChatterBot", "can", "integrate", "easier", "with", "web", "apps", "NUMBER", "ChatterBot", "has", "the", "capability", "to", "integrate", "with", "various", "social", "networking", "sites", "to", "learn", "from", "user", "input", "and", "also", "respond", "to", "input", "NUMBER", "Implementation", "has", "be", "specified", "for", "the", "following", "social", "platforms", "NUMBER", "Twitter", "x", "Retrieve", "OAuth", "token", "for", "Twitter", "Reply", "to", "direct", "message", "Communication", "x", "Create", "statements", "replies", "based", "on", "statements", "learned", "from", "social", "media", "sites", "NUMBER", "Originally", "I", "was", "also", "considering", "the", "creation", "of", "methods", "to", "retrieve", "data", "and", "interact", "with", "people", "through", "the", "APIs", "of", "Google", "Discus", "and", "GitHub", "NUMBER", "I", "m", "going", "to", "hold", "off", "on", "those", "for", "now", "until", "I", "can", "determine", "how", "well", "each", "platform", "will", "work", "as", "a", "potential", "source", "of", "training", "data", "and", "a", "medium", "for", "communication", "NUMBER", "There", "be", "two", "ways", "to", "end", "the", "chat", "with", "the", "bot", "you", "can", "either", "terminate", "the", "program", "use", "crtl", "c", "or", "you", "can", "type", "exit", "to", "end", "the", "terminal", "session", "NUMBER", "Also", "this", "be", "the", "correct", "place", "to", "ask", "question", "NUMBER", "It", "helps", "because", "anyone", "who", "has", "the", "same", "question", "might", "be", "able", "to", "find", "an", "answer", "in", "one", "of", "these", "NUMBER", "It", "be", "also", "helpful", "because", "it", "allows", "me", "to", "keep", "track", "of", "issue", "and", "make", "improvement", "to", "the", "software", "NUMBER", "This", "will", "happen", "if", "the", "program", "hasn", "t", "be", "trained", "with", "any", "pre", "exist", "engrams", "NUMBER", "You", "will", "need", "to", "either", "create", "these", "your", "self", "or", "you", "can", "download", "the", "sample", "copy", "LINK", "NUMBER", "The", "engram", "file", "just", "need", "to", "be", "placed", "in", "the", "specified", "log", "directory", "NUMBER", "As", "the", "chatbot", "has", "conversations", "with", "people", "the", "number", "of", "possible", "responses", "it", "can", "give", "will", "increase", "NUMBER", "For", "specific", "phrases", "it", "may", "be", "easiest", "to", "manually", "create", "a", "conversation", "log", "which", "contains", "the", "desired", "responses", "NUMBER", "This", "be", "a", "know", "limitation", "of", "the", "engram", "selection", "algorithm", "which", "only", "returns", "a", "know", "response", "to", "the", "phrase", "which", "be", "the", "closest", "match", "to", "the", "user", "s", "input", "NUMBER", "I", "currently", "have", "a", "ticket", "open", "NUMBER", "to", "address", "this", "by", "allowing", "the", "chat", "bot", "to", "track", "the", "current", "conversation", "by", "build", "a", "profile", "about", "the", "conversation", "which", "it", "can", "reference", "in", "order", "to", "maintain", "accurate", "responses", "NUMBER", "I", "have", "be", "planning", "to", "implement", "NLTK", "LINK", "inorder", "to", "extract", "names", "and", "sentence", "topics", "for", "the", "this", "purpose", "NUMBER", "I", "would", "definitely", "be", "interested", "in", "implement", "something", "to", "allowing", "the", "program", "to", "extract", "responses", "from", "books", "NUMBER", "Project", "Gutenberg", "LINK", "be", "a", "perfect", "source", "to", "use", "for", "this", "NUMBER", "It", "might", "also", "be", "interesting", "to", "extract", "information", "from", "Wikipedia", "database", "dumps", "LINK", "Any", "help", "or", "contributions", "would", "be", "greatly", "appreciated", "NUMBER", "I", "will", "write", "up", "some", "ideas", "on", "implement", "this", "and", "post", "them", "NUMBER", "Alright", "I", "have", "set", "up", "a", "document", "which", "briefly", "outlines", "my", "thoughts", "on", "implement", "this", "feature", "NUMBER", "Feel", "free", "to", "modify", "or", "comment", "on", "it", "as", "needed", "NUMBER", "LINK", "oBaoMpgO", "NUMBER", "GfDFWcqCq", "NUMBER", "To", "edit", "Awesome", "sorry", "for", "the", "late", "reply", "NUMBER", "I", "ve", "read", "over", "the", "additions", "and", "left", "a", "few", "comments", "in", "the", "document", "NUMBER", "Let", "me", "know", "what", "you", "think", "NUMBER", "I", "m", "hoping", "to", "finish", "up", "the", "change", "for", "the", "database", "pull", "request", "sometime", "in", "the", "next", "few", "days", "NUMBER", "Once", "its", "finished", "I", "think", "we", "should", "be", "good", "to", "finalize", "the", "knowledge", "base", "training", "plan", "NUMBER", "I", "ve", "also", "add", "you", "as", "a", "project", "contributor", "you", "should", "now", "have", "push", "access", "to", "this", "repository", "which", "will", "be", "useful", "if", "you", "re", "interested", "in", "make", "additions", "to", "the", "code", "base", "NUMBER", "Sorry", "didn", "t", "mean", "to", "close", "this", "NUMBER", "This", "has", "be", "fix", "by", "the", "change", "made", "in", "LINK", "It", "appears", "that", "this", "might", "be", "an", "issue", "with", "pip", "rather", "than", "this", "library", "NUMBER", "See", "LINK", "for", "details", "NUMBER", "If", "it", "be", "relate", "then", "there", "should", "be", "a", "fix", "for", "it", "in", "an", "upcoming", "release", "NUMBER", "I", "m", "closing", "this", "one", "for", "now", "as", "not", "replicable", "unrelated", "NUMBER", "The", "goal", "for", "this", "pull", "request", "be", "to", "create", "an", "object", "that", "can", "be", "use", "to", "make", "managing", "conversations", "easier", "and", "more", "efficient", "NUMBER", "I", "ve", "also", "NUMBER", "Increased", "the", "selection", "of", "html", "characters", "that", "get", "converted", "to", "ASCII", "Fixed", "issue", "with", "while", "loop", "run", "forever", "because", "of", "recursive", "calls", "Updated", "the", "Engram", "selector", "algorithm", "to", "use", "the", "new", "conversation", "objects", "Seriously", "improved", "the", "modularity", "and", "maintainability", "of", "the", "codebase", "These", "be", "additional", "methods", "for", "returning", "responses", "from", "ChatterBot", "NUMBER", "These", "methods", "will", "increase", "the", "accuracy", "of", "any", "possible", "output", "that", "the", "program", "can", "provide", "NUMBER", "For", "example", "question", "about", "a", "specific", "subject", "will", "have", "to", "be", "processed", "much", "differently", "than", "simple", "greetings", "NUMBER", "Some", "algorithms", "that", "would", "be", "useful", "to", "implement", "may", "include", "the", "following", "find_a_name", "A", "method", "designed", "to", "determine", "the", "most", "likely", "answer", "to", "a", "question", "regard", "a", "name", "of", "a", "person", "place", "etc", "NUMBER", "Example", "input", "Who", "was", "the", "president", "of", "the", "United", "States", "in", "NUMBER", "Example", "output", "Dwight", "D", "NUMBER", "Eisenhower", "x", "evaluate_mathematically", "A", "method", "which", "checks", "an", "input", "value", "for", "any", "references", "to", "mathematical", "operations", "NUMBER", "If", "they", "exist", "it", "will", "attempt", "to", "return", "a", "solution", "NUMBER", "This", "method", "should", "be", "able", "to", "evaluate", "both", "words", "and", "mathematical", "characters", "NUMBER", "Example", "input", "What", "be", "NUMBER", "the", "square", "root", "of", "NUMBER", "Example", "output", "NUMBER", "x", "custom_methods", "This", "would", "allow", "a", "user", "to", "ask", "the", "bot", "to", "run", "a", "specific", "command", "for", "instance", "entering", "Do", "I", "have", "any", "new", "message", "could", "check", "several", "services", "for", "new", "notifications", "NUMBER", "This", "would", "be", "based", "on", "loading", "in", "a", "reference", "to", "a", "third", "party", "method", "upon", "initialization", "of", "the", "program", "NUMBER", "Accomplished", "through", "the", "addition", "of", "the", "adapter", "system", "small_truths", "This", "idea", "suggests", "that", "by", "knowing", "a", "collection", "of", "true", "facts", "about", "everyday", "items", "the", "program", "will", "be", "able", "to", "determine", "the", "truth", "of", "more", "complex", "statements", "NUMBER", "For", "instance", "note", "the", "statement", "can", "a", "can", "can", "cans", "NUMBER", "As", "a", "human", "we", "be", "able", "to", "determine", "that", "a", "can", "be", "a", "metal", "container", "which", "cannot", "engage", "in", "the", "act", "of", "canning", "because", "it", "be", "a", "non", "mechanized", "inanimate", "object", "NUMBER", "A", "computer", "on", "the", "other", "hand", "would", "find", "this", "statement", "more", "challenging", "to", "decipher", "NUMBER", "Microsoft", "Word", "NUMBER", "detects", "this", "statement", "as", "incorrect", "LINK", "When", "the", "program", "receives", "an", "input", "item", "it", "will", "process", "the", "input", "use", "each", "of", "the", "different", "algorithms", "and", "saving", "the", "value", "returned", "from", "each", "NUMBER", "This", "will", "be", "address", "in", "LINK", "Compare", "each", "answer", "to", "know", "question", "and", "answers", "NUMBER", "There", "will", "need", "to", "be", "a", "way", "to", "to", "calculate", "how", "successful", "an", "algorithm", "be", "at", "generating", "the", "appropriate", "response", "NUMBER", "The", "result", "of", "this", "calculation", "will", "be", "use", "to", "determine", "the", "most", "appropriate", "response", "to", "return", "NUMBER", "To", "do", "this", "the", "result", "of", "each", "algorithm", "which", "was", "run", "on", "the", "input", "statement", "will", "be", "compared", "to", "training", "text", "statements", "which", "most", "closely", "resemble", "the", "initial", "question", "NUMBER", "The", "closest", "matching", "response", "should", "be", "the", "result", "which", "has", "the", "closest", "matching", "question", "NUMBER", "Future", "optimization", "Further", "optimization", "may", "be", "possible", "by", "performing", "preliminary", "checks", "to", "determine", "if", "certain", "algorithms", "do", "not", "need", "to", "be", "run", "when", "evaluating", "an", "input", "item", "NUMBER", "An", "example", "of", "this", "might", "be", "that", "an", "algorithm", "designed", "to", "extract", "and", "interpret", "mathematical", "operations", "in", "an", "input", "statement", "will", "not", "need", "to", "be", "executed", "if", "the", "input", "contains", "no", "numeric", "values", "or", "mathematical", "characters", "NUMBER", "Sure", "the", "only", "thing", "I", "can", "think", "of", "for", "mathematical", "evaluation", "be", "that", "you", "should", "decide", "ahead", "of", "time", "if", "you", "just", "want", "to", "deal", "with", "numbers", "and", "operators", "or", "a", "combination", "of", "those", "and", "words", "NUMBER", "Such", "as", "seven", "NUMBER", "For", "the", "other", "question", "NUMBER", "I", "be", "currently", "unsure", "about", "how", "to", "logically", "determine", "which", "algorithm", "to", "apply", "NUMBER", "This", "feature", "requires", "an", "element", "of", "trail", "and", "error", "test", "that", "be", "not", "currently", "present", "in", "the", "program", "NUMBER", "The", "main", "issue", "stems", "from", "the", "difficulty", "of", "measuring", "the", "success", "of", "a", "given", "response", "NUMBER", "For", "instance", "the", "response", "of", "You", "be", "welcome", "could", "be", "considered", "a", "_successful_", "response", "to", "Thank", "you", "however", "there", "be", "no", "basis", "for", "measuring", "the", "value", "of", "success", "without", "prior", "experience", "or", "a", "way", "to", "verify", "the", "_correctness_", "NUMBER", "NUMBER", "I", "think", "the", "concept", "of", "the", "find_a_name", "method", "could", "be", "refactored", "into", "something", "more", "general", "that", "would", "allow", "the", "program", "to", "search", "a", "knowledge", "base", "for", "a", "result", "and", "format", "the", "findings", "as", "a", "proper", "sentence", "NUMBER", "Wikipedia", "database", "dumps", "might", "be", "a", "good", "source", "of", "information", "to", "use", "as", "a", "knowledge", "base", "NUMBER", "NUMBER", "This", "ticket", "predates", "the", "addition", "of", "adapters", "in", "ChatterBot", "the", "concept", "for", "a", "custom_method", "feature", "was", "a", "possible", "precursor", "to", "this", "NUMBER", "I", "think", "in", "the", "future", "the", "direction", "will", "be", "moving", "towards", "the", "ability", "to", "set", "multiple", "logic", "adapters", "where", "some", "could", "handle", "things", "such", "as", "conversations", "and", "others", "could", "accomplish", "more", "complex", "tasks", "when", "the", "bot", "be", "appropriately", "prompted", "NUMBER", "Completion", "of", "this", "stage", "of", "design", "would", "rely", "a", "bit", "on", "question", "NUMBER", "because", "there", "needs", "to", "be", "a", "way", "to", "measure", "the", "success", "of", "a", "one", "response", "choice", "against", "another", "NUMBER", "Awesome", "I", "will", "be", "interested", "to", "see", "what", "you", "come", "up", "with", "I", "agree", "these", "would", "be", "useful", "additions", "NUMBER", "At", "the", "moment", "chatterbot", "lacks", "the", "ability", "to", "use", "the", "knowledge", "it", "accumulates", "to", "understand", "the", "context", "or", "meaning", "of", "the", "input", "it", "receives", "NUMBER", "I", "would", "recommend", "taking", "a", "look", "at", "NLTK", "I", "believe", "it", "already", "has", "implementations", "of", "a", "few", "of", "these", "algorithms", "NUMBER", "I", "m", "going", "to", "close", "this", "ticket", "off", "because", "it", "appears", "that", "all", "of", "the", "items", "it", "covers", "have", "either", "be", "implement", "or", "be", "covered", "in", "NUMBER", "Currently", "ChatterBot", "only", "responds", "to", "the", "last", "statement", "that", "was", "entered", "NUMBER", "For", "better", "conversations", "and", "more", "accurate", "responses", "it", "would", "be", "useful", "to", "track", "the", "last", "statements", "that", "were", "entered", "in", "a", "given", "conversation", "and", "use", "these", "details", "to", "determine", "what", "to", "say", "next", "NUMBER", "Should", "the", "chatterbot", "s", "responses", "to", "the", "user", "be", "remembered", "as", "well", "In", "the", "past", "these", "were", "stored", "in", "the", "database", "along", "with", "user", "inputs", "however", "this", "cause", "issue", "with", "the", "chat", "bot", "learning", "the", "wrong", "output", "because", "it", "was", "recalling", "its", "own", "responses", "NUMBER", "Research", "how", "the", "weight", "of", "a", "statement", "in", "a", "conversation", "change", "as", "the", "conversation", "goes", "on", "NUMBER", "Use", "statements", "from", "the", "current", "conversation", "to", "help", "determine", "the", "most", "appropriate", "response", "NUMBER", "Statements", "decrease", "in", "weight", "as", "time", "increases", "NUMBER", "Add", "set_persona", "method", "set_user_persons", "methods", "It", "might", "be", "interesting", "to", "investigate", "the", "NLTK", "PositiveNaiveBayesClassifier", "LINK", "for", "determining", "if", "a", "statement", "shares", "a", "subject", "with", "a", "list", "of", "past", "statemets", "NUMBER", "Commit", "NUMBER", "ad", "NUMBER", "b", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "b", "NUMBER", "f", "NUMBER", "a", "NUMBER", "f", "NUMBER", "b", "NUMBER", "d", "NUMBER", "d", "introduces", "a", "parameter", "to", "pass", "the", "current", "conversation", "into", "the", "logic", "adapter", "NUMBER", "This", "makes", "it", "possible", "to", "access", "this", "information", "from", "within", "a", "future", "logic", "adapter", "that", "will", "make", "choices", "in", "based", "on", "the", "context", "of", "the", "current", "conversation", "NUMBER", "Work", "be", "be", "do", "on", "the", "subtree", "branch", "LINK", "to", "support", "finding", "past", "conversations", "that", "be", "similar", "to", "the", "current", "one", "NUMBER", "Not", "yet", "but", "in", "future", "additions", "that", "functionality", "will", "definitely", "be", "add", "NUMBER", "Closing", "this", "ticket", "off", "as", "NUMBER", "be", "essentially", "the", "same", "thing", "except", "with", "a", "more", "defined", "scope", "NUMBER", "Currently", "the", "logs", "in", "which", "each", "conversation", "be", "recorded", "contain", "the", "name", "of", "the", "speaker", "NUMBER", "These", "details", "could", "be", "use", "to", "allow", "the", "program", "to", "have", "a", "conversation", "with", "multiple", "people", "simultaneously", "in", "which", "each", "person", "can", "be", "replied", "to", "but", "the", "relevance", "of", "topics", "in", "the", "conversation", "still", "hold", "weight", "NUMBER", "This", "be", "possible", "to", "do", "with", "the", "conversation", "objects", "add", "in", "NUMBER", "however", "addition", "track", "will", "not", "be", "add", "for", "this", "issue", "NUMBER", "The", "track", "would", "need", "to", "be", "add", "in", "an", "application", "where", "the", "library", "has", "be", "implement", "the", "application", "would", "be", "responsible", "for", "creating", "new", "conversation", "objects", "NUMBER", "In", "the", "case", "of", "a", "group", "conversation", "multiple", "conversations", "may", "exist", "and", "some", "of", "the", "statements", "might", "be", "a", "part", "of", "multiple", "conversations", "NUMBER", "Yes", "one", "way", "that", "this", "would", "be", "possible", "would", "be", "to", "simply", "create", "a", "number", "of", "chatterbot", "instances", "and", "set", "the", "parameter", "so", "that", "they", "all", "use", "the", "same", "database", "NUMBER"], "text_count": [0, 22432, 5446, 2470, 1198, 56, 2107, 2, 105, 2971, 3494, 5763, 4217, 1843, 1911, 643, 0, 0, 0, 0, 7496, 2014, 1219, 733, 1487, 1107, 0, 0, 0, 0, 12675, 8231, 4624, 148, 2174, 943, 0, 0, 0, 0, 17180, 81, 6195, 5557, 5265, 0, 0, 0, 0, 0, 4832, 2730, 2684, 1208, 1768, 769, 1203, 0, 0, 0, 10479, 699, 8445, 725, 0, 0, 0, 0, 0, 0, 8993, 747, 6794, 2970, 978, 0, 0, 0, 0, 0, 14646, 7194, 1592, 5212, 944, 715, 0, 0, 0, 0, 991, 5099, 766, 0, 0, 0, 0, 0, 0, 0, 11988, 2469, 6252, 3457, 0, 0, 0, 0, 0, 0, 23464, 51914, 759, 1647, 503, 1030, 0, 0, 0, 0, 61812, 188, 46113, 627, 12048, 14051]}, {"repo": "ChatterBot", "type": "nonelite", "title": "", "number of text": 1804, "text": "  I am getting the below mentioned error when running the server. Has anybody experienced it ?\r\n\r\nPython 3.6.1 :: Anaconda 4.4.0 (64-bit)\r\nDjango 2.1.dev20170928183954\r\nchatterbot 0.7.6\r\n\r\non running >>>>>>\r\nC:\\Users\\JS\\scrapy\\ChatterBot\\examples\\django_app>python manage.py runserver 0.0.0.0:8000\r\n>>>>>>>>>>>>>\r\n\r\nUnhandled exception in thread started by <function check_errors.<locals>.wrapper at 0x000001C67A937510>\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\js\\scrapy\\django\\django\\utils\\autoreload.py\", line 225, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"c:\\users\\js\\scrapy\\django\\django\\core\\management\\commands\\runserver.py\", line 112, in inner_run\r\n    autoreload.raise_last_exception()\r\n  File \"c:\\users\\js\\scrapy\\django\\django\\utils\\autoreload.py\", line 248, in raise_last_exception\r\n    raise _exception[0](_exception[1]).with_traceback(_exception[2])\r\n  File \"c:\\users\\js\\scrapy\\django\\django\\utils\\autoreload.py\", line 225, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"c:\\users\\js\\scrapy\\django\\django\\__init__.py\", line 24, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"c:\\users\\js\\scrapy\\django\\django\\apps\\registry.py\", line 112, in populate\r\n    app_config.import_models()\r\n  File \"c:\\users\\js\\scrapy\\django\\django\\apps\\config.py\", line 198, in import_models\r\n    self.models_module = import_module(models_module_name)\r\n  File \"C:\\Users\\JS\\AppData\\Local\\Continuum\\Anaconda3\\lib\\importlib\\__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 978, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 961, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 950, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 655, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 678, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 205, in _call_with_frames_removed\r\n  File \"C:\\Users\\JS\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\chatterbot\\ext\\django_chatterbot\\models.py\", line 123, in <module>\r\n    class AbstractBaseResponse(models.Model):\r\n  File \"C:\\Users\\JS\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\chatterbot\\ext\\django_chatterbot\\models.py\", line 132, in AbstractBaseResponse\r\n    related_name='in_response'\r\nTypeError: __init__() missing 1 required positional argument: 'on_delete'  \n[![Coverage Status](https://coveralls.io/builds/13487912/badge)](https://coveralls.io/builds/13487912)\n\nCoverage increased (+0.1%) to 73.625% when pulling **1c8d0fb584cf1cb719fba5972c752b3400ea5c4d on models** into **b611cbd0629eb2aed9f840b50d1b3f8869c2589e on master**.\n \n[![Coverage Status](https://coveralls.io/builds/13487912/badge)](https://coveralls.io/builds/13487912)\n\nCoverage increased (+0.1%) to 73.625% when pulling **1c8d0fb584cf1cb719fba5972c752b3400ea5c4d on models** into **b611cbd0629eb2aed9f840b50d1b3f8869c2589e on master**.\n  Code:\r\n\r\n                       trainer='chatterbot.trainers.ChatterBotCorpusTrainer',\r\n\t\t\tstatement_comparison_function=jaccard_similarity,\r\n\t\t\tdatabase=\"chatterbot-database\"\r\n\r\nI have installed NLTK data and then i have changed to jaccard_similarity algo. \r\n\r\nPlease help me to solve this.\r\n\r\nThanks in advance. @Cosmos19 This is an expected behavior, those are only warning message, but it will not stop your bot\r\n\r\n``` Python\r\n# Calculate Jaccard similarity\r\n        try:\r\n            ratio = len(set(lemma_a).intersection(lemma_b)) / float(len(set(lemma_a).union(lemma_b)))\r\n        except Exception as e:\r\n            print('Error', e)\r\n        return ratio >= self.SIMILARITY_THRESHOLD\r\n```\r\n\r\nDid you bot program was terminated?  [NLTK Naive Bayes Classifier](http://www.nltk.org/_modules/nltk/classify/naivebayes.html) only return 1 or 0 as confidence and it always return 1 wrongly when user input several characters(e.g abc), \r\n\r\nhttps://github.com/gunthercox/ChatterBot/blob/a4a7b0287c3516975770d6f9ab1e5b8fa5572e1c/chatterbot/logic/time_adapter.py#L61\r\n\r\nwhy don't you use compare_statements in best match adapter which return a proper confidence and more standardized. \r\n\r\nhttps://github.com/gunthercox/ChatterBot/blob/351971a21e603642f5797c33e924c4195f96682b/chatterbot/logic/best_match.py#L36  From which file and which line of the file can we enable read only mode of chatterbot ?\r\n\r\nPlease Help !   Hello All,\r\n\r\nThis is not an issue. Just a question. \r\n\r\nI have build a chatbot using django using chatterbot. I want it to integrate in an existing .Net web application. I want to call this application from an existing .Net application. Please guide me if anyone has any information regarding this. \r\n\r\n    You see there are some things that are already maintained in one database and used for other purposes.\r\n\r\nOne is getting created for the conversation. For example let us say that the second database is used to get data from the net and store it there.\r\n\r\nSo I need to answer the question from one database(The Conversation) and give the results of searches already there in the other database.  What is the type of Network that is used to do the Machine learning in ChatterBot\r\n\r\nCan you tell me what is the network? If it is not there then how can I do it. I mean which is the Neural Network Used?  Can I know how the saving and retrieval from database is happening? In which program would I find this info so that I can plan my json file on specific format You will find line number 115 https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/chatterbot.py Saving is fine retrival where is it done? How the the processing is happening can you tell me? Here is the process flow diagram http://chatterbot.readthedocs.io/en/stable/#process-flow-diagram\r\n\r\nSome useful information you will find here https://github.com/gunthercox/ChatterBot/issues/832#issuecomment-314052937 \r\n  Can I get an example for the custom logic adapter to handle this. \r\nuser: Hi\r\nbot: Hello, How do you do?\r\nbot: Good afternoon\r\nbot: How can I help you today?\r\n\r\nI presume that there is a requirement for an custom output adapter. Kindly help me. Can this be done using a Custom Adapter in the present setup  Hello,\r\nI am interested in this engine and I want to build a chat bot with multiple logic adapters. Let's say, one logic adapter for asking questions related to weather, another logic adapter for booking events in calendar, and more logic adapters. In this case, I want to have one adapter to handle the input_statement and this adapter will match input_statement with logic adapter.\r\n\r\nMy question is that is it possible to build chatbot to handle different purpose like this?\r\nIf it possible, how can I implement multiple logic adapters like I described above.\r\n\r\nThanks, Hello @s0rata, you could implement your willings with ChatterBot. \r\nFirst of all, multiplelogic adapter have already implemented in ChatterBot, when you create it, and it handle all of [standart logic adapters](http://chatterbot.readthedocs.io/en/stable/logic/index.html).\r\nHow MultipleLogicAdapter works? - [answer](http://chatterbot.readthedocs.io/en/stable/logic/multi-logic-adapter.html)\r\n\r\nSeperate statement processing may be implemented by using method can_process in LogicAdapter class. If input_statement satisfy to handle by your adapter (e.g. weather), you may set confidence = 1, process it and MultipleLogicAdapter choose response from this adapter.\r\n\r\n> If it possible, how can I implement multiple logic adapters like I described above.\r\n\r\nYou don't need to implement multiple logic adapter again, or reimplement it, you just need implement your LogicAdapter and method can_proces, as I described above Hi 7633,\r\nCan you provide an example where we use one sql database to respond and a second response from another sql database using this MultipleLogicAdapter  @skanda09 \r\nIn the case, that I described above, we use one database for all logic adapters. You can't use several databases in one ChatterBot to process different logic adapters. There is no such functionality.\r\n\r\nIf you think, that each logic adapter should keep statements in different databases, I recommend you review your project architecture. 7633\r\nYou see there are some things that are already maintained in one database and used for other purposes.\r\n\r\nOne is getting created for the conversation. For example let us say that the second database is used to get data from the net and store it there.\r\n\r\nSo I need to answer the question from one database(The Conversation) and give the results of searches already there in the other database.   7633\r\nCan you at least give an example for multiple outputs for a single statement\r\n\r\nE.g.,\r\n\r\nUser Hi\r\nBot Hello! How are you doing?\r\nBot Good Afternoon\r\nBot How can I help you today?\r\n\r\nWhere do I have make the changes to the code? @skanda09 \r\n\r\n> Can you at least give an example for multiple outputs for a single statement\r\n\r\nSee documentation for MultipleLogicAdapter: [link](http://chatterbot.readthedocs.io/en/stable/logic/multi-logic-adapter.html#selecting-a-response-from-multiple-logic-adapters):\r\n\r\n> The MultiLogicAdapter is used to select a single response from the responses returned by all of the logic adapters that the chat bot has been configured to use. Each response returned by the logic adapters includes a confidence score that indicates the likeliness that the returned statement is a valid response to the input.\r\n\r\nTherefore, I can't get such example.\r\n\r\nIf I'm not mistaken, first database only with questions, another one is answers. For use Chatterbot, you should preprocess this databases into one training format, for example into '*.yml' files contain question and answers line by line. This data you may use to train ChatterBot and then, use to search correct answers in database using LogicAdapters. I haven't see other ways. 7633 \r\nNo One is with questions and Answers. Another is a search of all hotels and taxis in the area @7533 thank you. So from what you said, the Multi Adapter class will handle this for me. What I need to do is to classify the input_statement to match with adapter. I think I have an idea for now. Thank again. @vkosuri #357 is similar. But that somehow give me another idea of what I want to do. Thank for pointing that out. @7633 @vkosuri Is there any text classifier library for python you can recommend? Because I intend to use it to categorize the input_statement. Am I going to the right direction? Sorry to ask like this since I am new to this. Thank again. I recommend you to look textblob, nltk [link with more info](https://elitedatascience.com/python-nlp-libraries) @7633 Thank you for your recommendation. @s0rata Please feel free ask any question if you need information. Some of the resources that might help you.\r\n\r\n1. https://stackoverflow.com/questions/30821188/python-nltk-pos-tag-not-returning-the-correct-part-of-speech-tag\r\n2. Facts and figures https://spacy.io/docs/api/\r\n @vkosuri Thank you.    Hi ,\r\n\r\nI have added a custom corpus . my directory structure is as follows - circus/example_app/CustomCorpus/oneWindow.yml\r\n\r\nand my Settings.py looks like this -- \r\n``` Python\r\nCHATTERBOT = {\r\n    'name': 'Django ChatterBot Example',\r\n    'logic_adapters': [\r\n        \"chatterbot.logic.MathematicalEvaluation\",\r\n        \"chatterbot.logic.BestMatch\"\r\n    ],\r\n    'trainer': 'chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    'training_data': [\r\n        'circus.example_app.CustomCorpus'\r\n    ]\r\n}\r\n```\r\nWhen I am running manage.py train, I am getting the following error-\r\n``` Bash\r\nC:\\Python27\\python.exe C:/Python27/Scripts/circus/manage.py train\r\nTraceback (most recent call last):\r\n  File \"C:/Python27/Scripts/circus/manage.py\", line 10, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"C:\\Python27\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 363, in execute_from_command_line\r\n    utility.execute()\r\n  File \"C:\\Python27\\lib\\site-packages\\django\\core\\management\\__init__.py\", line 355, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"C:\\Python27\\lib\\site-packages\\django\\core\\management\\base.py\", line 283, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"C:\\Python27\\lib\\site-packages\\django\\core\\management\\base.py\", line 330, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot\\ext\\django_chatterbot\\management\\commands\\train.py\", line 19, in handle\r\n    chatterbot.train(chatterbot.training_data)\r\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot\\trainers.py\", line 119, in train\r\n    corpora = self.corpus.load_corpus(corpus_path)\r\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot_corpus\\corpus.py\", line 86, in load_corpus\r\n    corpus = self.read_corpus(file_path)\r\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot_corpus\\corpus.py\", line 52, in read_corpus\r\n    with io.open(file_name, encoding='utf-8') as data_file:\r\nIOError: [Errno 2] No such file or directory: 'circus\\\\example_app\\\\CustomCorpus'\r\n```\r\nPlease help. The issue is solved. Please close this.  In Django admin, the chatterbot conversion table is empty after training has been performed using\r\n\r\n`python manage.py train`\r\n\r\nThe above code populates the statement and response tables with the training data based on the yml file. This is fine.\r\n\r\nHowever, during testing, the statements posted to the chatbot and the response ought to go to the empty conversation table and should not be added to the trained statement and respond data table.  \r\n\r\n @vkosuri, thanks a lot. \r\nHere is my final recommendation based on our [StackExchange](https://stackoverflow.com/questions/45911071/empty-chatterbot-conversation-table-in-django-admin/45936303#45936303):\r\nI feel that there is duplication going on and I hope future chatterbot release would correct this. The conversation table should only contain the user's statement that is posted and the response. The Statement and Response table ought to have only the training data as populated using\u00a0`python manage train`\u00a0and nothing else from the user's input.\r\n\r\n\r\n\r\n  Using the BestMatchAdapter of Chatterbot, it confuses two questions with the same answer. For example, training the ai.yml.\r\n\r\n> What is ai?\r\n> \r\n> Artificial Intelligence is the branch of engineering and science devoted to constructing machines that think.\r\n> \r\n> What is a joke?\r\n> \r\n> Artificial Intelligence is the branch of engineering and science devoted to constructing machines that think.\r\n\r\nOn the other hand, the following similar questions make much sense in the bot answer:\r\n\r\n> Can you bend?\r\n> \r\n> No I can be perpetuated indefinitely.\r\n> \r\n> Can you lie?\r\n> \r\n> No I can be perpetuated indefinitely. This adjustment makes it work @vkosuri (much credit for your suggestion).\r\n\r\n```\r\nCHATTERBOT = {\r\n        'name': 'Tech Support Bot',\r\n        'logic_adapters': [\r\n             {\r\n                \"import_path\": \"chatterbot.logic.BestMatch\",\r\n                \"statement_comparison_function\": \"chatterbot.comparisons.levenshtein_distance\",\r\n                \"response_selection_method\": \"chatterbot.response_selection.get_first_response\"\r\n             },\r\n\r\n                {\r\n                    'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n                    'threshold': 0.90,\r\n                    'default_response': 'I am sorry, but I do not understand.'\r\n                },\r\n\r\n        ],\r\n```  I am working with Django and Infra.\r\nI have read all the given example in the repo. But it does focus on training, dataset, feedback, ... etc\r\n\r\nHow to let `Chatbot` execute `Django query` and `OS commands`? I am considering the very simple plain task like.\r\n\r\n```\r\n\"How many orders are the this month?\"\r\n```\r\n\r\nThen I expect `Chatbot` be able to execute my given `custom management commands`.\r\nOr\r\n\r\n```\r\n\"How long does server up without reboot?\"\r\n```\r\n\r\nThen I expect `Chatbot` be able to execute `uptime` directly to OS level.\r\n\r\nThis technique is similar to `customer management commands`.\r\nBut I branches a question since I do not known the technical implementation behind the scenes.\r\nHowever, in opinion. I think first solution can be able to reuse with 2nd one. \r\nhttps://stackoverflow.com/questions/89228/calling-an-external-command-in-python\r\n\r\nYour answer is about how to config `Chatbot` and let it shares `Django` database.   Sorry, \r\nI train my bot with ListTrainer. However, when I change something in Response B to Statement A in train list, I will receive the old response, not the new I have changed. I understand how ListTrainer works and how chatbot select response. But can you guess me how to get the new response, not the old one? May I have to make a new chatbot - select response or something like that? \r\nThank you very much.  I don't know why it keep processing the old response when I try to create new bot with new ListTrainer.\r\n Same is here, and I have a problem to delete letters with another iso code, let's say I have letter with \u010c,\u0106,\u0110.. I cant delete them from admin  Hello, \r\ndoes anyone have experience with ChatterBot on Facebook messenger?\r\nI would like to try to make create answers with emoticons. \r\nThanks a lot\r\n emoticons issue #911  Thank you @vkosuri  and @hochochoc \r\nIt seems that there is no pure python Facebook messenger, except this one with Flask maybe could help this video https://www.youtube.com/watch?v=6DQ6v1hcNyk&t=185s \r\n\r\nfrom this source https://github.com/twtrubiks/facebook-messenger-bot-tutorial    **when i use it in Chinese\uff0cit don't work in python2\uff1a**\r\n\r\n\r\n`      chatbot.set_trainer(ChatterBotCorpusTrainer)\r\n \r\n     chatbot.train(\r\n\r\n      \"chatterbot.corpus.chinese\"\r\n\r\n      )`\r\n\r\n\r\n\r\n**when i run the code, the error is:**\r\n\r\n\r\nconversations.yml Training: [####################] 100%\r\ngreetings.yml Training: [####################] 100%\r\ntrivia.yml Training: [####################] 100%\r\n>\u4f60\u597d\r\nTraceback (most recent call last):\r\n  File \"chat.py\", line 40, in <module>\r\n    print(chatbot.get_response(input(\">\")))\r\n  File \"<string>\", line 1\r\n    \u4f60\u597d\r\n\r\nSyntaxError: invalid syntax\r\n\r\n\r\ni use the latest chatterbot 's version\r\n This Chinese article may solve your problem, http://blog.just4fun.site/create-a-smart-chat-bot.html, please read the section of \"\u5751\", it mention that might be a encoding problem in python2.\r\nWithout further ado, you may want to upgrade to python3 I get an error like this when I train Chinese \r\n\r\n``` Bash\r\n_sqlalchemy.exc.ProgrammingError: (sqlite3.ProgrammingError) You must not use 8-bit bytestrings unless you use a text_factory that can interpret 8-bit bytestrings (like text_factory = str). \r\nIt is highly recommended that you instead just switch your application to Unicode strings. \r\n[SQL: u'SELECT \"StatementTable\".id AS \"StatementTable_id\", \"StatementTable\".text AS \"StatementTable_text\", \"StatementTable\".extra_data AS \"StatementTable_extra_data\" \\nFROM \"StatementTable\" \\nWHERE \"StatementTable\".text = ?\\n LIMIT ? OFFSET ?'] [parameters: ('\\xe5\\x97\\xb3\\xef\\xbc\\x8c\\xe6\\xb8\\xa1\\xe8\\xbe\\xb9\\xe5\\x90\\x9b\\xef\\xbc\\x8c\\xe7\\x9c\\x9f\\xe5\\x96\\x9c\\xe6\\xac\\xa2\\xe6\\x88\\x91?', 1, 0)]_\r\n```\r\n\r\nFinally, I install the mongodb and set `storage_adapter=\"chatterbot.storage.MongoDatabaseAdapter\"`, then it works.  How to make the robot as much as possible to identify the user's different questions? Two same questions with different wordings in it -semantic similarity \r\n1. I want to order a pizza \r\n2. I need to book a pizza   ```\r\nfrom chatterbot import ChatBot\r\nfrom chatterbot.comparisons import JaccardSimilarity\r\n\r\nchatbot = ChatBot(\r\n    'Test bot',\r\n    statement_comparison_function=JaccardSimilarity\r\n)\r\n```\r\n\r\nI'm trying to implement the Jaccard similarity comparison, but even just using a basic setup with or without any logic adapters renders the error TypeError: get_initialization_functions() missing 1 required positional argument\": 'self'\r\n\r\nI can provide the entire exception thrown if necessary  Ah, okay. Everything appears to be functioning as normal now after using the correct class. Thank you   Every time I perform a request to the server, it returns a **[19/Aug/2017 22:21:30] \"GET /chatterbot/ HTTP/1.1\" 405 110**. \r\nI changed nothing from the *example_app* for integration of Django and Chatterbot, I have just copied all of it.\r\nLater when I examined the console I found this `Loading failed for the <script> with source \u201cresource://devtools/client/shared/vendor/react-dev.js\u201d`. I have no idea what it means, please help me regarding this. Thanks in advance! \r\n![screenshot from 2017-08-19 22-31-56](https://user-images.githubusercontent.com/21339738/29488713-43be7938-852e-11e7-8a41-99a32ce4db45.png)\r\n @gunthercox : **The error isnt related to the browser extensions.** I disabled all the browser extensions and then tried it again, it didnt work.\r\n@vkosuri : I tried the views.py and html template you had in your github page and even that gave me the **same error.** Can you send over a code snip view to us so it is easier for us to understand what you are try to do?   Signed-off-by: corcassia <mymusise1@gmail.com>\r\nHi, I add the Inverted Index for mongodb. What new:\r\n- Creating the Inverted Index when training dataset\r\n- It will just compare the similar statement when getting a response (Only `BestMatch`)\r\n\r\nImproving performance\uff1a\r\n\r\n| Version | Response Time(s) |\r\n| ---------- | ------------------------ |\r\n| Before | 3.1 |\r\n| After | 0.1 |\r\n\r\nIt test with 28000 rows dataset on Ubuntu 14.04 + Core i5 4670 + 12G Menery.\r\n\r\nHope it helps. @vkosuri  Ok, my pleasure.\r\n\r\nBefore this PR, I found it will compare all samples when calling `ChatBot.get_response`. So, if we have trained a large dataset, it will spend many time to response.\r\n~~`mongodb text indexing` is a `forward index`~~, in this change, I hope it just select the similar sample from database by adding `invert indexing`, rather than select all.\r\n\r\n**For example:**\r\nThere some samples in our databases:\r\n```\r\n- - 1. Hello, how are you.\r\n-   2. I'm fine, thank you~\r\n- - 3. Mongodb is faster than sqlite\r\n-   4. Yes, of course.\r\n- - 5. Hello, would you do me a favor\uff1f\r\n-   6. Yes~\r\n....\r\n```\r\nand the invert indexing will look like:\r\n```\r\nhello: [1, 5, ...]\r\nMongodb: [3, ...]\r\nsqlite: [3, ...]\r\nfavor: [5, ...]\r\n...\r\n```\r\neach key word corresponds to samples ID\r\n \r\nIf we call `bot.get_response('The different between mongodb and sqlite')`, there are some key word in this statement:\r\n `different`, `mongodb`, `text`, `indexing`, `invert`\r\n\r\nThen, we use invert indexing to find out which samples have those key word.\r\n\r\nFinally, we compare those samples with the input statement just like before.\r\n\r\nI wish I made it clear. @vkosuri  Yes, I think **tag filtering** is a good idea. \r\nTo get the labels of input statement, will it iterate all sample or pass a **classify model**? @gunthercox  @gunthercox It's all right, and I found some problem with this change in these days. @vkosuri I'm sorry about my wrong clarification. `MongoDB text indexing` is one of the practices of `invert indexing`.  After a few test, I found `MongoDB text indexing` behave better. \r\nI remove my `invert indexing` and change the `_statement_query`, it runs faster than before.  I have two questions according to corpus data:\r\n\r\n1. How are the specified categories in *.yaml files using in training?\r\nIn the source code I found out only parsing separately categories and conversations inside.\r\n\r\n```\r\n            corpora.categories = corpus.get('categories', [])\r\n            conversations = corpus.get('conversations', [])\r\n\r\n            corpora.extend([conversations])\r\n```\r\n\r\n2. How should I write corpus in yaml, if parser doesn't pay attention at `--` and `-` statements?\r\nexmaple from `conversations.yaml`:\r\n```\r\n- - Good morning, how are you?\r\n  - I am doing well, how about you?\r\n  - I'm also good.\r\n  - That's good to hear.\r\n  - Yes it is.\r\n- - Hello\r\n```\r\n\r\nexample from `ai.yaml`:\r\n```\r\n- - What is ai\r\n  - Artificial Intelligence is the branch of engineering and science devoted to constructing\r\n    machines that think.\r\n- - What language are you written in\r\n  - python\r\n- - You sound like data\r\n  - Yes I am inspired by commander data's artificial personality.\r\n```\r\nI want to write several responses in one statement. e.g.:\r\n```\r\n- - Hello\r\n  - hi\r\n  - good morning\r\n  - hello\r\n  - hey\r\n  - what's up\r\n- - How are you\r\n  - I'm fine\r\n  - good\r\n  - I'm fine, and what about you?\r\n  - I'm sad\r\n``` @vkosuri yep, but how Chatterbot use this information about category?  After upgrading the code I got a new bug.\r\nThis is happening when I type in a unknown word for the ChatterBot.\r\n````\r\nInternal Server Error: /api/chatterbot/\r\nTraceback (most recent call last):\r\n  File \"/home/chrisp/lib/python3.6/site-packages/django/core/handlers/exception.py\", line 41, in inner\r\n    response = get_response(request)\r\n  File \"/home/chrisp/lib/python3.6/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/chrisp/lib/python3.6/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/chrisp/lib/python3.6/site-packages/django/views/generic/base.py\", line 68, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/home/chrisp/lib/python3.6/site-packages/django/views/generic/base.py\", line 88, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File \"/home/chrisp/lib/python3.6/site-packages/chatterbot/ext/django_chatterbot/views.py\", line 78, in post\r\n    response = self.chatterbot.get_response(input_data, conversation.id)\r\n  File \"/home/chrisp/lib/python3.6/site-packages/chatterbot/chatterbot.py\", line 119, in get_response\r\n    self.storage.add_to_conversation(conversation_id, statement, response)\r\n  File \"/home/chrisp/lib/python3.6/site-packages/chatterbot/storage/django_storage.py\", line 176, in add_to_conversation\r\n    first_response = Statement.objects.get(text=response.text)\r\n  File \"/home/chrisp/lib/python3.6/site-packages/django/db/models/manager.py\", line 85, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/home/chrisp/lib/python3.6/site-packages/django/db/models/query.py\", line 380, in get\r\n    self.model._meta.object_name\r\nchatterbot.ext.django_chatterbot.models.DoesNotExist: Statement matching query does not exist.\r\n````  Hi there, I am working on a way to customize the intention of a conversation seesion, It world be nice to have extra storage variable in session object, so that make each conversation has its own intention\r\nCurrently there are only uuid, id_string, id included in session class:\r\nhttp://chatterbot.readthedocs.io/en/stable/_modules/chatterbot/conversation/session.html#Session\r\n Good to hear that, I would put my work of session on hold. Hope you would give some examples of how to overwrite the variables/method once you released. I look forward to the next release.  \u2026so this field is not required anymore when creating a new Statement/responds manually in Django Admin. @gunthercox  @gunthercox this is only a smaller change, because in existing version if I try to create a Statement or Responds manually today, then is the `Extra Data` field a required field that you must fill out.\r\n\r\nWith this smaller change I have change that column to no mandatory field so you can still create a statement or responds manually without to fill out the `Extra data` field.\r\n  As the title suggests the default choice for Logic Adapter and comparison functions should be called out in the documentation. If this is present then I apologize, I didn't see it and thought people might like to know. Thanks a lot @gunthercox I'm playing around with chatterbot and really like it. Others will definitely also do so if they understand easier    Hi I recently tried to incorporate my own comparison method into Chatterbot and received the following error\r\n\r\n> 'function' object has no attribute 'get_initialization_functions'\r\n\r\nFrom the documentation I understood that all that was required was handling the statements that would come into the function and returning a confidence value. Could you tell me where I'm going wrong? Why should there be a get_initialization_functions function? Thanks a lot @gunthercox ! Tried it out and it works perfectly :+1:   As suggested, I open a new request for this.\r\nBut it should be really nice to be able to have multiple databases connections to a single chatterbot.\r\nAnd in the chatterbot configuration area you should be able to tell it if you only should have Reaad-Only mode or read-write mode.\r\n\r\nIn this case you can then have a larger master databases where multiple chatterbots can be connected to, to be able to have a larger standard data.\r\nAnd a local attach database that has local knowledge such names of people, hardware and data that is only internal use and no use for any other people.\r\n\r\n  \r\n\r\n sqlalchemy does support multiple binds and allows for multiple database\nconnections.  I can't give you a time frame but I need to see how flask\nimplements this anyway and I'll get back to you, unless of course someone\nis able to get to it before.\n\nI'm pretty sure using multiple mongodbs  wouldn't be that hard to implement\neither.\n\n-- les\n\nOn Aug 14, 2017 12:20 AM, \"Christian Petersson\" <notifications@github.com>\nwrote:\n\n> As suggested, I open a new request for this.\n> But it should be really nice to be able to have multiple databases\n> connections to a single chatterbot.\n> And in the chatterbot configuration area you should be able to tell it if\n> you only should have Reaad-Only mode or read-write mode.\n>\n> In this case you can then have a larger master databases where multiple\n> chatterbots can be connected to, to be able to have a larger standard data.\n> And a local attach database that has local knowledge such names of people,\n> hardware and data that is only internal use and no use for any other people.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/931>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AOUGNx3sRmR7rg_lFQ3GHGswGPK8j0Ieks5sX_VFgaJpZM4O2BOW>\n> .\n>\n Yeah, i think this would have to be implemented using multiple mongos OR\nmultiple sql's.  I know the ability exists in sqlalchemy to mix and a match\nyour sqldb's, but I just can't see trying to use a sql and a mongo.\n\n-- les\n\nOn Aug 14, 2017 5:42 PM, \"Gunther Cox\" <notifications@github.com> wrote:\n\n> I'm wondering about the pros and cons of supporting this. If a particular\n> database architecture (MongoDB, Sqlite, etc.) allows this than I'm all for\n> it.\n>\n> One possible issue I can foresee is the challenge of merging the results\n> from multiple non-homogeneous database. For example, someone wants to use a\n> Postgres database and a MongoDB database together for their data.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/931#issuecomment-322347151>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AOUGNzP3EglLkDLPt0uDKnEOEFhdiiOqks5sYOlhgaJpZM4O2BOW>\n> .\n>\n @lesleslie in our case we will probably mix between Centralize Postgress and local SQLite  I didn't see this directly addressed earlier, but please correct me if I missed it.\r\n\r\nI'm receiving these NLTK related errors when running ChatBot (but no issues when I'm coding up NLTK separately on another project.\r\n\r\nAny guidance would be wonderful. Thanks guys.\r\n\r\n```\r\n[nltk_data] Error loading stopwords: <urlopen error [SSL:\r\n[nltk_data]     CERTIFICATE_VERIFY_FAILED] certificate verify failed\r\n[nltk_data]     (_ssl.c:749)>\r\n[nltk_data] Error loading wordnet: <urlopen error [SSL:\r\n[nltk_data]     CERTIFICATE_VERIFY_FAILED] certificate verify failed\r\n[nltk_data]     (_ssl.c:749)>\r\n[nltk_data] Error loading punkt: <urlopen error [SSL:\r\n[nltk_data]     CERTIFICATE_VERIFY_FAILED] certificate verify failed\r\n[nltk_data]     (_ssl.c:749)>\r\n[nltk_data] Error loading vader_lexicon: <urlopen error [SSL:\r\n[nltk_data]     CERTIFICATE_VERIFY_FAILED] certificate verify failed\r\n[nltk_data]     (_ssl.c:749)>\r\n``` I appreciate you taking a look. Let me give your suggestion ago tomorrow and I'll let you know how it goes. Thanks!  ```\r\nfrom chatterbot import ChatBot\r\nchatterbot.trainers.ChatterBotCorpusTrainer'\r\n)\r\nfrom: can't read /var/mail/chatterbot\r\nVANSH@LAPTOP-A0Q1OIQ:~$\r\nVANSH@LAPTOP-A0Q1OIQ:~$ chatbot = ChatBot(\r\nbash: syntax error near unexpected token `('\r\nVANSH@LAPTOP-A0Q1OIQ:~$     'Ron Obvious',\r\nRon Obvious,: command not found\r\nVANSH@LAPTOP-A0Q1OIQ:~$     trainer='chatterbot.trainers.ChatterBotCorpusTrainer'\r\nVANSH@LAPTOP-A0Q1OIQ:~$ )\r\nbash: syntax error near unexpected token `)'\r\nVANSH@LAPTOP-A0Q1OIQ:~$ chatbot.train(\"chatterbot.corpus.english\")\r\nbash: syntax error near unexpected token `\"chatterbot.corpus.english\"'\r\nVANSH@LAPTOP-A0Q1OIQ:~$ chatbot.train(\"chatterbot.corpus.english\")\r\nbash: syntax error near unexpected token `\"chatterbot.corpus.english\"'\r\nVANSH@LAPTOP-A0Q1OIQ:~$ chatbot.get_response(\"Hello, how are you today?\")\r\nbash: syntax error near unexpected token `\"Hello, how are you today?\"'\r\nVANSH@LAPTOP-A0Q1OIQ:~$ chatbot.train(\"chatterbot.corpus.english\")\r\nbash: syntax error near unexpected token `\"chatterbot.corpus.english\"'\r\nVANSH@LAPTOP-A0Q1OIQ:~$ sphinx-build -b html docs/ build/\r\nsphinx-build: command not found\r\n``` @vansh215 You should first of all start a python command prompt. thank you @vkosuri @Issen007  \r\n  I recommended updating the installation instructions to install chatterbot into a virtualenv.\r\n\r\nI would be more than happy to do this if everyone agrees. i don't have any experience with anaconda.  looks interesting.  i'll give it a try and see what i can do. ok.  i have virtualenv instructions that i use for my own projects i can reference too.  i can make the instructions optional too.  i personally feel though that installing chatterbox using a virtualenv, by default, is a much better practice - especially for development so i'll definitely add them there.  I use the exact same as @vkosuri and can recommend them as well.\r\n\r\nIt should be noted that Robomongo is now called Robo 3T. The url is still the same though https://robomongo.org/\r\n I could also recommend Postico for PostgreSQL and Mac:  https://eggerapps.at/postico/  @gunthercox @vkosuri in what area should we start using tags?\r\nI'm playing around with this at the moment and could I add tags example in to the Corpus training data files?\r\n\r\nThanks @vkosuri hi,bro. you are really great. I am caught in problem with efficiency, even i use mongodb to be storage adapter, the response is still too slow. I found you are very active. So can you share some experience of improving efficiency or using methods. thank u very much!!!  Hi Folks,\r\n\r\nI am facing the issue with the spell checker option in LUIS, As i am checked it and published. When i see again its showing as unchecked. I had purchased Bing spell check key too. \r\n\r\nPlease help me with this...\r\n\r\nThank you...!! Hi @dileepkantapop , If you are referring to this screenshot, then the state of selection is not saved. It does not persists the selection.\r\n![screen shot 2017-08-11 at 4 53 36 pm](https://user-images.githubusercontent.com/4955155/29211258-a9cf465a-7eb5-11e7-84ee-43e6e4b141fd.png)\r\n\r\nHowever, the following are the steps, \r\n\r\n1.  Get a bing spell check API key\r\n2. Add it in external Association \r\n3. Publish it with Bing spell check API on\r\n4. Every time the invocation is done from your code - have \"spellCheck=true\" is set.\r\n\r\nhttps://westus.api.cognitive.microsoft.com/luis/v2.0/apps/c003afeb-e2b1-4890-a780-63a31812c735?subscription-key=8fb772cfd44c492a98280b53edb40c61&verbose=true&timezoneOffset=0&spellCheck=true&q=\r\n buddy @yescay i am using the LUIS in Bot framework C# i can't call API to get the result. I know that it has \"spellCheck=true\" in API. But my problem is different! The state of the checkbox is not saving. The state of the check box does not matter \u2013 the parameter value is what matters. Explore the Request object of your C# code to see if you can set the bing spellcheck that you can set to \u201ctrue\u201d.\n\n \n\nAFAIK This checkox in LUIS publish page \u2013 does not retain state. \n\n \n\nThanks\n\nKamesh\n\n \n\n \n\n \n\n \n\nFrom: Dileep Kanta Bivanapalli <notifications@github.com>\nReply-To: gunthercox/ChatterBot <reply@reply.github.com>\nDate: Friday, 11 August 2017 at 5:42 PM\nTo: gunthercox/ChatterBot <ChatterBot@noreply.github.com>\nCc: yescay <yescay@gmail.com>, Mention <mention@noreply.github.com>\nSubject: Re: [gunthercox/ChatterBot] How to unable Enable bing spell checker in Luis? (#922)\n\n \n\nbuddy @yescay i am using the LUIS in Bot framework C# i can't call API to get the result. I know that it has \"spellCheck=true\" in API. But my problem is different! The state of the checkbox is not saving.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n Buddy! In Bot framework we won't call API, we just have Intents in which we will get data in entities.  `AbstractBaseStatement`[models.py#L12](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/ext/django_chatterbot/models.py#L12) has `max_length=255` so the corpus fails at: [corpus.english.ai#L57](https://github.com/gunthercox/chatterbot-corpus/blob/master/chatterbot_corpus/data/english/ai.yml#L57)\r\n\r\nI understand using `CharField` and maximum length might be more efficient in terms of performance or storage, but that forces to short statements. Just tried making it a `TextField` and then got \r\n\r\n```\r\nTraining: [####################] 98%Traceback (most recent call last):\r\n  File \"manage.py\", line 22, in <module>\r\n    execute_from_command_line(sys.argv)\r\n  File \"/local/lib/python2.7/site-packages/django/core/management/__init__.py\", line 363, in execute_from_command_line\r\n    utility.execute()\r\n  File \"/local/lib/python2.7/site-packages/django/core/management/__init__.py\", line 355, in execute\r\n    self.fetch_command(subcommand).run_from_argv(self.argv)\r\n  File \"/local/lib/python2.7/site-packages/django/core/management/base.py\", line 283, in run_from_argv\r\n    self.execute(*args, **cmd_options)\r\n  File \"/local/lib/python2.7/site-packages/django/core/management/base.py\", line 330, in execute\r\n    output = self.handle(*args, **options)\r\n  File \"/vagrant/api/django_chatterbot/management/commands/train.py\", line 19, in handle\r\n    chatterbot.train(chatterbot.training_data)\r\n  File \"/local/lib/python2.7/site-packages/chatterbot/trainers.py\", line 141, in train\r\n    self.storage.update(statement)\r\n  File \"/local/lib/python2.7/site-packages/chatterbot/storage/django_storage.py\", line 107, in update\r\n    response.occurrence += 1\r\nAttributeError: can't set attribute\r\n```  I trying to run example for feedback, with this code:\r\n\r\n``` Python\r\nbot = ChatBot(\r\n    'test',\r\n    storage_adapter='chatterbot.storage.SQLStorageAdapter',\r\n    logic_adapters=[\r\n        'chatterbot.logic.BestMatch'\r\n    ],\r\n    input_adapter='chatterbot.input.TerminalAdapter',\r\n    output_adapter='chatterbot.output.TerminalAdapter',\r\n    database=\"../database.db\",\r\n)\r\nDEFAULT_SESSION_ID = bot.default_session.id\r\ndef get_feedback():\r\n    from chatterbot.utils import input_function\r\n    text = input_function()\r\n\r\n    if 'yes' in text.lower():\r\n        return True\r\n    elif 'no' in text.lower():\r\n        return False\r\n    else:\r\n        print('Please type either \"Yes\" or \"No\"')\r\n        return get_feedback()\r\nprint('Type something to begin...')\r\nwhile True:\r\n    try:\r\n        input_statement = bot.input.process_input_statement()\r\n        statement, response = bot.generate_response(input_statement, DEFAULT_SESSION_ID)\r\n        print('\\n Is \"{}\" this a coherent response to \"{}\"? \\n'.format(response, input_statement))\r\n        if get_feedback():\r\n            bot.learn_response(response, input_statement)\r\n        bot.output.process_response(response)\r\n        bot.storage.add_to_converation(bot.default_session, statement, response)\r\n    except (KeyboardInterrupt, EOFError, SystemExit):\r\n        break\r\n```\r\n\r\nAnd I got this error:\r\n\r\n```Bash\r\nType something to begin...\r\nhola\r\n\r\n Is \"hola\" this a coherent response to \"hola\"? \r\n\r\nyes\r\nhola\r\nTraceback (most recent call last):\r\n  File \"feedback.py\", line 61, in <module>\r\n    bot.storage.add_to_converation(bot.default_session, statement, response)\r\n**AttributeError: 'SQLStorageAdapter' object has no attribute 'add_to_converation'`**\r\n``` Hi @vkosuri , I have 0.7.6 Check your code.  converation has prob been corrected to conversation.\nYou're also going to run into an issue with the default_session.id cause it\nhas changed too.  See pull request #916.\n\nCheers,\n\n-- les\n\nOn Aug 10, 2017 5:54 AM, \"Erick S\u00e1nchez P\u00e9rez\" <notifications@github.com>\nwrote:\n\n> Hi, I have 0.7.6\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/920#issuecomment-321542541>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AOUGN5SMw1ynZZ-k75X0ANLf4k_Q7Bexks5sWv2VgaJpZM4Oy6EZ>\n> .\n>\n Hello @lesleslie how can I updated the code? Is there an a command? If your getting that error the problem is in your code not chatterbot.  The\nspelling correction of conversation took place 6 hours ago.  Follow the\ntraceback from the error code you're getting and it will point you to which\nmodule and which line is calling the wrong function.\n\n-- les\n\n\nOn Aug 10, 2017 6:11 AM, \"Erick S\u00e1nchez P\u00e9rez\" <notifications@github.com>\nwrote:\n\n> Hello @lesleslie <https://github.com/lesleslie> how can I updated the\n> code? Is there an a command?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/920#issuecomment-321546334>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AOUGN5IO-KY_eTmBFd76smUrZnjyA-dKks5sWwFrgaJpZM4Oy6EZ>\n> .\n>\n In your case line 61 in feedback.py needs converation changed to\nconversation.\n\nOn Aug 10, 2017 6:17 AM, \"les\" <les@wedgwoodwebworks.com> wrote:\n\n> If your getting that error the problem is in your code not chatterbot.\n> The spelling correction of conversation took place 6 hours ago.  Follow the\n> traceback from the error code you're getting and it will point you to which\n> module and which line is calling the wrong function.\n>\n> -- les\n>\n>\n> On Aug 10, 2017 6:11 AM, \"Erick S\u00e1nchez P\u00e9rez\" <notifications@github.com>\n> wrote:\n>\n>> Hello @lesleslie <https://github.com/lesleslie> how can I updated the\n>> code? Is there an a command?\n>>\n>> \u2014\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/gunthercox/ChatterBot/issues/920#issuecomment-321546334>,\n>> or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AOUGN5IO-KY_eTmBFd76smUrZnjyA-dKks5sWwFrgaJpZM4Oy6EZ>\n>> .\n>>\n>\n Don't forget too to change default_session.id to default_conversation_id\ntoo in your code.\n\nOn Aug 10, 2017 6:18 AM, \"les\" <les@wedgwoodwebworks.com> wrote:\n\n> In your case line 61 in feedback.py needs converation changed to\n> conversation.\n>\n> On Aug 10, 2017 6:17 AM, \"les\" <les@wedgwoodwebworks.com> wrote:\n>\n>> If your getting that error the problem is in your code not chatterbot.\n>> The spelling correction of conversation took place 6 hours ago.  Follow the\n>> traceback from the error code you're getting and it will point you to which\n>> module and which line is calling the wrong function.\n>>\n>> -- les\n>>\n>>\n>> On Aug 10, 2017 6:11 AM, \"Erick S\u00e1nchez P\u00e9rez\" <notifications@github.com>\n>> wrote:\n>>\n>>> Hello @lesleslie <https://github.com/lesleslie> how can I updated the\n>>> code? Is there an a command?\n>>>\n>>> \u2014\n>>> You are receiving this because you were mentioned.\n>>> Reply to this email directly, view it on GitHub\n>>> <https://github.com/gunthercox/ChatterBot/issues/920#issuecomment-321546334>,\n>>> or mute the thread\n>>> <https://github.com/notifications/unsubscribe-auth/AOUGN5IO-KY_eTmBFd76smUrZnjyA-dKks5sWwFrgaJpZM4Oy6EZ>\n>>> .\n>>>\n>>\n @lesleslie yes, I was reading the last corrections, this is my code with the corrections\r\n\r\n```Python\r\nfrom chatterbot import ChatBot\r\n\r\nbot = ChatBot(\r\n    'Feedback Learning Bot',\r\n    storage_adapter='chatterbot.storage.SQLStorageAdapter',\r\n    logic_adapters=[\r\n        'chatterbot.logic.BestMatch'\r\n    ],\r\n    input_adapter='chatterbot.input.TerminalAdapter',\r\n    output_adapter='chatterbot.output.TerminalAdapter'\r\n)\r\n\r\nDEFAULT_SESSION_ID = bot.default_conversation_id\r\n\r\ndef get_feedback():\r\n    from chatterbot.utils import input_function\r\n\r\n    text = input_function()\r\n\r\n    if 'yes' in text.lower():\r\n        return True\r\n    elif 'no' in text.lower():\r\n        return False\r\n    else:\r\n        print('Please type either \"Yes\" or \"No\"')\r\n        return get_feedback()\r\n\r\n\r\nprint('Type something to begin...')\r\n\r\nwhile True:\r\n    try:\r\n        input_statement = bot.input.process_input_statement()\r\n        statement, response = bot.generate_response(input_statement, DEFAULT_SESSION_ID)\r\n\r\n        print('\\n Is \"{}\" this a coherent response to \"{}\"? \\n'.format(response, input_statement))\r\n\r\n        if get_feedback():\r\n            bot.learn_response(response, input_statement)\r\n\r\n        bot.output.process_response(response)\r\n        bot.storage.add_to_conversation(bot.default_session, statement, response)\r\n\r\n    except (KeyboardInterrupt, EOFError, SystemExit):\r\n        break\r\n```\r\n\r\nBut now, I getting this error:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"feedback.py\", line 15, in <module>\r\n    DEFAULT_SESSION_ID = bot.default_conversation_id\r\nAttributeError: 'ChatBot' object has no attribute 'default_conversation_id'\r\n``` @lesleslie I was checking the SQLAdapter code, but the function `add_to_conversation` doesn't exists, only `add_to_converation`\r\n\r\nIn the file sql_storage.py, line 248, ` def add_to_converation(self, conversation_id, statement, response):`\r\n\r\nBut in both cases, return error @lesleslie \r\nI was cheking your fork, and you updated the code and adapters, to use the correct function `add_to_converation`, how can I upgrade the ChatterBot code to use correctly the examples? Ok, change back to default_session.id and try that.  We may be using\nslightly different versions.\n\nOn Aug 10, 2017 6:28 AM, \"Erick S\u00e1nchez P\u00e9rez\" <notifications@github.com>\nwrote:\n\n> @lesleslie <https://github.com/lesleslie> yes, I was reading the last\n> corrections, this is my code with the corrections\n>\n> from chatterbot import ChatBot\n>\n> bot = ChatBot(\n>     'Feedback Learning Bot',\n>     storage_adapter='chatterbot.storage.SQLStorageAdapter',\n>     logic_adapters=[\n>         'chatterbot.logic.BestMatch'\n>     ],\n>     input_adapter='chatterbot.input.TerminalAdapter',\n>     output_adapter='chatterbot.output.TerminalAdapter',\n>     database=\"../database.db\",\n>\n> )\n> DEFAULT_SESSION_ID = bot.default_conversation_id\n> def get_feedback():\n>     from chatterbot.utils import input_function\n>\n>     text = input_function()\n>\n>     if 'yes' in text.lower():\n>         return True\n>     elif 'no' in text.lower():\n>         return False\n>     else:\n>         print('Please type either \"Yes\" or \"No\"')\n>         return get_feedback()\n>\n> print('Type something to begin...')\n> while True:\n>     try:\n>         input_statement = bot.input.process_input_statement()\n>         statement, response = bot.generate_response(input_statement, DEFAULT_SESSION_ID)\n>\n>         print('\\n Is \"{}\" this a coherent response to \"{}\"? \\n'.format(response, input_statement))\n>\n>         if get_feedback():\n>             bot.learn_response(response, input_statement)\n>\n>         bot.output.process_response(response)\n>         bot.storage.add_to_conversation(bot.default_session, statement, response)\n>\n>     except (KeyboardInterrupt, EOFError, SystemExit):\n>         break\n>\n> But now, I getting this error:\n>\n> Traceback (most recent call last):\n>   File \"feedback.py\", line 15, in <module>\n>     DEFAULT_SESSION_ID = bot.default_conversation_id\n> AttributeError: 'ChatBot' object has no attribute 'default_conversation_id'\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/920#issuecomment-321550788>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AOUGN8BTVb0WoCWgr4vyztrP53lm1dyaks5sWwV_gaJpZM4Oy6EZ>\n> .\n>\n @lesleslie I did it, but gave me this error\r\n\r\n```\r\nType something to begin...\r\nhola\r\n\r\n Is \"hola\" this a coherent response to \"hola\"? \r\n\r\nyes\r\nhola\r\nTraceback (most recent call last):\r\n  File \"feedback.py\", line 42, in <module>\r\n    bot.storage.add_to_conversation(bot.default_session, statement, response)\r\nAttributeError: 'SQLStorageAdapter' object has no attribute 'add_to_conversation'\r\nm-C02SH023G8WP:bot2 eec000i$ \r\n\r\n ``` Look at chatterbot/storage/sql_storage.py and see what the name of the\nfunction is in your version and adjust accordingly.\n\n-- les\n\nOn Aug 10, 2017 7:52 AM, \"Erick S\u00e1nchez P\u00e9rez\" <notifications@github.com>\nwrote:\n\n> @lesleslie <https://github.com/lesleslie> I did it, but give me this error\n>\n> Type something to begin...\n> hola\n>\n>  Is \"hola\" this a coherent response to \"hola\"?\n>\n> yes\n> hola\n> Traceback (most recent call last):\n>   File \"feedback.py\", line 42, in <module>\n>     bot.storage.add_to_conversation(bot.default_session, statement, response)\n> AttributeError: 'SQLStorageAdapter' object has no attribute 'add_to_conversation'\n> m-C02SH023G8WP:bot2 eec000i$\n>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/920#issuecomment-321575251>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AOUGNw0W43XRkfV_Q8OVCe8TN7VmBY6xks5sWxkxgaJpZM4Oy6EZ>\n> .\n>\n Hi again @lesleslie \r\n\r\nI tested you fork repo, and installed, but the same example, now gave me this error\r\n\r\n```\r\nType something to begin...\r\nhi\r\n\r\n Is \"hi\" this a coherent response to \"hi\"? \r\n\r\nno\r\nhi\r\nTraceback (most recent call last):\r\n  File \"so.py\", line 47, in <module>\r\n    bot.storage.add_to_conversation(bot.default_session, statement, response)\r\n  File \"build/bdist.macosx-10.12-intel/egg/chatterbot/storage/sql_storage.py\", line 266, in add_to_conversation\r\n  File \"build/bdist.macosx-10.12-intel/egg/sqlalchemy/orm/query.py\", line 864, in get\r\n  File \"build/bdist.macosx-10.12-intel/egg/sqlalchemy/orm/query.py\", line 875, in _get_impl\r\nTypeError: object of type 'NoneType' has no len()\r\n\r\n``` My repo was constantly being tweaked and worked on recently so I'm not sure\nwhen you downloaded it.  As of just a few hours ago is it passing all of\nthe tests and is stable.  Please try forking my version again and if you\nrun into the same problem again I'll give it a good look and help resolve\nthe issue.  My repo, as at stands as of RIGHT NOW is, I believe, about to\nbe merged into the main branch.\n\n-- les\n\nOn Aug 11, 2017 9:59 AM, \"Erick S\u00e1nchez P\u00e9rez\" <notifications@github.com>\nwrote:\n\n> Hi again @lesleslie <https://github.com/lesleslie>\n>\n> I tested you fork repo, and installed, but the same example, now gave me\n> this error\n>\n> Type something to begin...\n> hi\n>\n>  Is \"hi\" this a coherent response to \"hi\"?\n>\n> no\n> hi\n> Traceback (most recent call last):\n>   File \"so.py\", line 47, in <module>\n>     bot.storage.add_to_conversation(bot.default_session, statement, response)\n>   File \"build/bdist.macosx-10.12-intel/egg/chatterbot/storage/sql_storage.py\", line 266, in add_to_conversation\n>   File \"build/bdist.macosx-10.12-intel/egg/sqlalchemy/orm/query.py\", line 864, in get\n>   File \"build/bdist.macosx-10.12-intel/egg/sqlalchemy/orm/query.py\", line 875, in _get_impl\n> TypeError: object of type 'NoneType' has no len()\n>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/920#issuecomment-321865598>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AOUGNzl236gQciCKkZ0M-SSRfu_ZcJY9ks5sXIhngaJpZM4Oy6EZ>\n> .\n>\n Nevermind that last statement.  You need to change default_session to\nconversation_id in line 61 of so.py.  Again if you follow the traceback, to\nthe Exception, it will tell you exactly where the error is occurring in the\ncode.  It may do you some good to read a python debugging tutorial.\n\n-- les\n\nOn Aug 11, 2017 10:09 AM, \"les\" <les@wedgwoodwebworks.com> wrote:\n\n> My repo was constantly being tweaked and worked on recently so I'm not\n> sure when you downloaded it.  As of just a few hours ago is it passing all\n> of the tests and is stable.  Please try forking my version again and if you\n> run into the same problem again I'll give it a good look and help resolve\n> the issue.  My repo, as at stands as of RIGHT NOW is, I believe, about to\n> be merged into the main branch.\n>\n> -- les\n>\n> On Aug 11, 2017 9:59 AM, \"Erick S\u00e1nchez P\u00e9rez\" <notifications@github.com>\n> wrote:\n>\n>> Hi again @lesleslie <https://github.com/lesleslie>\n>>\n>> I tested you fork repo, and installed, but the same example, now gave me\n>> this error\n>>\n>> Type something to begin...\n>> hi\n>>\n>>  Is \"hi\" this a coherent response to \"hi\"?\n>>\n>> no\n>> hi\n>> Traceback (most recent call last):\n>>   File \"so.py\", line 47, in <module>\n>>     bot.storage.add_to_conversation(bot.default_session, statement, response)\n>>   File \"build/bdist.macosx-10.12-intel/egg/chatterbot/storage/sql_storage.py\", line 266, in add_to_conversation\n>>   File \"build/bdist.macosx-10.12-intel/egg/sqlalchemy/orm/query.py\", line 864, in get\n>>   File \"build/bdist.macosx-10.12-intel/egg/sqlalchemy/orm/query.py\", line 875, in _get_impl\n>> TypeError: object of type 'NoneType' has no len()\n>>\n>>\n>> \u2014\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/gunthercox/ChatterBot/issues/920#issuecomment-321865598>,\n>> or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AOUGNzl236gQciCKkZ0M-SSRfu_ZcJY9ks5sXIhngaJpZM4Oy6EZ>\n>> .\n>>\n>\n Make that line 47 in so.py.  I think I got it right this time.\n\n-- les\n\nOn Aug 11, 2017 10:17 AM, les <les@wedgwoodwebworks.com> wrote:\n\n> Sorry again, that's line 41 in so.py.  I'm doing this from my phone.\n>\n>\n>\n> On Aug 11, 2017 10:15 AM, \"les\" <les@wedgwoodwebworks.com> wrote:\n>\n>> Nevermind that last statement.  You need to change default_session to\n>> conversation_id in line 61 of so.py.  Again if you follow the traceback, to\n>> the Exception, it will tell you exactly where the error is occurring in the\n>> code.  It may do you some good to read a python debugging tutorial.\n>>\n>> -- les\n>>\n>> On Aug 11, 2017 10:09 AM, \"les\" <les@wedgwoodwebworks.com> wrote:\n>>\n>>> My repo was constantly being tweaked and worked on recently so I'm not\n>>> sure when you downloaded it.  As of just a few hours ago is it passing all\n>>> of the tests and is stable.  Please try forking my version again and if you\n>>> run into the same problem again I'll give it a good look and help resolve\n>>> the issue.  My repo, as at stands as of RIGHT NOW is, I believe, about to\n>>> be merged into the main branch.\n>>>\n>>> -- les\n>>>\n>>> On Aug 11, 2017 9:59 AM, \"Erick S\u00e1nchez P\u00e9rez\" <notifications@github.com>\n>>> wrote:\n>>>\n>>>> Hi again @lesleslie <https://github.com/lesleslie>\n>>>>\n>>>> I tested you fork repo, and installed, but the same example, now gave\n>>>> me this error\n>>>>\n>>>> Type something to begin...\n>>>> hi\n>>>>\n>>>>  Is \"hi\" this a coherent response to \"hi\"?\n>>>>\n>>>> no\n>>>> hi\n>>>> Traceback (most recent call last):\n>>>>   File \"so.py\", line 47, in <module>\n>>>>     bot.storage.add_to_conversation(bot.default_session, statement, response)\n>>>>   File \"build/bdist.macosx-10.12-intel/egg/chatterbot/storage/sql_storage.py\", line 266, in add_to_conversation\n>>>>   File \"build/bdist.macosx-10.12-intel/egg/sqlalchemy/orm/query.py\", line 864, in get\n>>>>   File \"build/bdist.macosx-10.12-intel/egg/sqlalchemy/orm/query.py\", line 875, in _get_impl\n>>>> TypeError: object of type 'NoneType' has no len()\n>>>>\n>>>>\n>>>> \u2014\n>>>> You are receiving this because you were mentioned.\n>>>> Reply to this email directly, view it on GitHub\n>>>> <https://github.com/gunthercox/ChatterBot/issues/920#issuecomment-321865598>,\n>>>> or mute the thread\n>>>> <https://github.com/notifications/unsubscribe-auth/AOUGNzl236gQciCKkZ0M-SSRfu_ZcJY9ks5sXIhngaJpZM4Oy6EZ>\n>>>> .\n>>>>\n>>>\n Sorry again, that's line 41 in so.py.  I'm doing this from my phone.\n\n-- les\n\nOn Aug 11, 2017 10:15 AM, \"les\" <les@wedgwoodwebworks.com> wrote:\n\nNevermind that last statement.  You need to change default_session to\nconversation_id in line 61 of so.py.  Again if you follow the traceback, to\nthe Exception, it will tell you exactly where the error is occurring in the\ncode.  It may do you some good to read a python debugging tutorial.\n\n-- les\n\nOn Aug 11, 2017 10:09 AM, \"les\" <les@wedgwoodwebworks.com> wrote:\n\n> My repo was constantly being tweaked and worked on recently so I'm not\n> sure when you downloaded it.  As of just a few hours ago is it passing all\n> of the tests and is stable.  Please try forking my version again and if you\n> run into the same problem again I'll give it a good look and help resolve\n> the issue.  My repo, as at stands as of RIGHT NOW is, I believe, about to\n> be merged into the main branch.\n>\n> -- les\n>\n> On Aug 11, 2017 9:59 AM, \"Erick S\u00e1nchez P\u00e9rez\" <notifications@github.com>\n> wrote:\n>\n>> Hi again @lesleslie <https://github.com/lesleslie>\n>>\n>> I tested you fork repo, and installed, but the same example, now gave me\n>> this error\n>>\n>> Type something to begin...\n>> hi\n>>\n>>  Is \"hi\" this a coherent response to \"hi\"?\n>>\n>> no\n>> hi\n>> Traceback (most recent call last):\n>>   File \"so.py\", line 47, in <module>\n>>     bot.storage.add_to_conversation(bot.default_session, statement, response)\n>>   File \"build/bdist.macosx-10.12-intel/egg/chatterbot/storage/sql_storage.py\", line 266, in add_to_conversation\n>>   File \"build/bdist.macosx-10.12-intel/egg/sqlalchemy/orm/query.py\", line 864, in get\n>>   File \"build/bdist.macosx-10.12-intel/egg/sqlalchemy/orm/query.py\", line 875, in _get_impl\n>> TypeError: object of type 'NoneType' has no len()\n>>\n>>\n>> \u2014\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/gunthercox/ChatterBot/issues/920#issuecomment-321865598>,\n>> or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AOUGNzl236gQciCKkZ0M-SSRfu_ZcJY9ks5sXIhngaJpZM4Oy6EZ>\n>> .\n>>\n>\n @nalancer08 sorry but there is an issue with the sql_storage adapter right now.  the default_conversation_id can not be 'None' when querying sql databases.  i've been strictly using mongodb so i didn't see it and somehow all the tests pass this way.  i was just playing around with the sql_adapter again and see what you are talking about. good catch.  i have solution that i'll be proposing and pushing hopefully within the next hour or so.  stay tuned .....   i'll keep you informed.\r\n\r\ni am referring to this:\r\n\r\nTypeError: object of type 'NoneType' has no len()\r\n\r\nas I got it too. @nalancer08 \r\n\r\nthis is my the workaround that i propose for you:\r\n\r\nchange DEFAULT_CONVERSATION_ID or DEFAULT_SESSION_ID or whatever you have in your code to bot.storage.create_conversation().  ie:\r\n\r\nDEFAULT_CONVERSATION_ID = bot.storage.create_conversation()\r\n\r\nthis change makes more sense to me because each time you access the bot via terminal, or however you're doing it, it actually is it's own conversation and should be treated as such.  Let's say you talk to your bot in terminal mode and the somebody else then talks your bot in terminal mode - these are two separate conversations and should be treated as such.\r\n\r\nwhat i am going to recommend in my pull request is changing DEFAULT_CONVERSATION_ID to just CONVERSATION_ID in examples/learning_feedback_example.py and examples/learning_new_response.py like so:\r\n\r\nCONVERSATION_ID = bot.storage.create_conversation()\r\n\r\nthis would mean the rest of your code would need to change DEFAULT_CONVERSATION_ID to CONVERSATION_ID.\r\n\r\ni will also be adding a line to learning new_response.py so lines 45-50 will now look like this:\r\n\r\n        if get_feedback():\r\n            print(\"please input the correct one\")\r\n            response1 = bot.input.process_input_statement()\r\n            bot.learn_response(response1, input_statement)\r\n            bot.storage.add_to_conversation(CONVERSATION_ID, statement, response1)\r\n            print(\"Responses added to bot!\")\r\n\r\nthis way the new response will be saved to the conversation too.\r\n\r\n-- les\r\n @nalancer08 \r\n\r\nsee #927 \r\n\r\n @lesleslie let me check  chatterbot/trainers.py:\r\n* Some lines of Ubuntu data are non-ascii  I'm reading about ResponseQueue and Session docs, but I am wondering that how chatterbot works when ResponseQueue is full (maxsize=10). Chatterbot will create a new Session or something i don't know. \r\nPlease help me to explain this. Thanks.   I want to do a Facebook chatbot using Chatterbot, but I  don't know whether I have to create a new input adapter or not. Can you give me a guess?  Thank you so much  I have just made a simple chatbot using Fb and chatterbot, but I didn't create a new input adapter. \r\nI only followed this project https://github.com/chamkank/flask-chatterbot . However, I think, in future, I will create a Facebook adapter for chatterbot. This maybe interesting. \r\nThank you very much.  This commit is in response to #873.  It allows sqlite pragma settings to be set.  This commit sets \r\n\r\nPRAGMA journal_mode=WAL\r\nPRAGMA synchronous=NORMAL\r\n\r\nwhen sqlite is used for the database.  These settings should speed things up while still maintaining data integrity.\r\n\r\nSee #873 for more details. Also, change default_session.id to default_conversation_id\r\nfor examples learning_feedback_example.py and learning_new_response.py.\r\n\r\nThose examples were broken somewhere between 7.4 and 7.6. change distinct to aggregate for response_query in mongodb.py get_response_statements.\r\n\r\nThis probably closes #747, #697, #686.\r\n\r\nI didn't actually clock it, but the query now seems to be running about at least 4x faster on an 18MB collection.\r\n\r\nand yes, you should be able to break the 16MB BSON limit?. Thank you.\n\nThis is a great app and I'm thrilled to be able to contribute to it.\n\n-- les\n\nOn Aug 10, 2017 2:43 PM, \"Gunther Cox\" <notifications@github.com> wrote:\n\n> @lesleslie <https://github.com/lesleslie> There are some great changes\n> here, thank you. Once the tests are passing I'll be happy to merge in your\n> changes.\n>\n> Thank you again.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/pull/916#issuecomment-321681589>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AOUGNzhIOkcQoBp1HBlwTPDe_1VfzKETks5sW3l0gaJpZM4Ox279>\n> .\n>\n Just fyi,  you should expect contributions from me for the kensor/tensor\nflow logic adapter as well as Facebook messenger input and output adapters.\n\nOn Aug 10, 2017 6:15 PM, \"les\" <les@wedgwoodwebworks.com> wrote:\n\n> Thank you.\n>\n> This is a great app and I'm thrilled to be able to contribute to it.\n>\n> -- les\n>\n> On Aug 10, 2017 2:43 PM, \"Gunther Cox\" <notifications@github.com> wrote:\n>\n>> @lesleslie <https://github.com/lesleslie> There are some great changes\n>> here, thank you. Once the tests are passing I'll be happy to merge in your\n>> changes.\n>>\n>> Thank you again.\n>>\n>> \u2014\n>> You are receiving this because you were mentioned.\n>> Reply to this email directly, view it on GitHub\n>> <https://github.com/gunthercox/ChatterBot/pull/916#issuecomment-321681589>,\n>> or mute the thread\n>> <https://github.com/notifications/unsubscribe-auth/AOUGNzhIOkcQoBp1HBlwTPDe_1VfzKETks5sW3l0gaJpZM4Ox279>\n>> .\n>>\n>\n Ok - all tests pass!  \r\n\r\nSorry about the sloppy pull request and all the commits.  I have a better idea of the process now.  This was also my first experience with Travis-CI but I think I have a good handle on that now too.\r\nI'll be much cleaner about my pull requests moving forward.\r\n\r\nI will note it hear that increasing the sort buffer size using:\r\n\r\nself.client.admin.command({'setParameter': 1, 'internalQueryExecMaxBlockingSortBytes': 44040192})\r\n\r\ndoes not currently work for Python 2 on Linux or Python 3 on Windows.\r\n\r\n  1. according to `./chatterbot/storage/sql_storage.py`, no need fox suffix\r\n2. use `sys.path[0]`, otherwise the relative path will change with location where python interpreter start @vkosuri \r\nfor example,if I use`bot = ChatBot(\"Name\", database=\"./databse.db\")` according to docs,`database.db.db` will be generated because of `./chatterbot/storage/sql_storage.py` add `.db` default.\r\nanother problem,if I use `bot = ChatBot(\"Name\", database=\"./databse.db\")` in `~/dir1/dir2/demo.py`,\r\n```\r\n~/dir1 $ python dir2/demo.py\r\n``` \r\nwould generated databse file in `dir1`;\r\n```\r\n~/dir1/dir2 $ python demo.py\r\n```\r\nwolud generated database file in `dir2`\r\nthis is confused!use `sys.path[0]` can avoid it.\r\nsorry for my pool english.\r\n I agree with you !!!  However,I can't pass all tests when I tried to change sqladapter due to\r\n```python\r\n    def test_set_database_name(self):\r\n        adapter = SQLStorageAdapter(database='test')\r\n        self.assertEqual(adapter.database_uri, 'sqlite:///test.db')\r\n```\r\nin `./tests/storage_adapter_tests/test_sqlalchemy_adapter.py` .Therefore, I fixed the docs.\r\nI am a beginner,but I like to fix the problem. @gunthercox  @gunthercox I modify the code and commit it.This is my first time to contribute code like this,**thanks** for you guidance! that can't pass the test case\r\n```\r\n    def test_set_database_name(self):\r\n        adapter = SQLStorageAdapter(database='test')\r\n        self.assertEqual(adapter.database_uri, 'sqlite:///test.db')\r\n```\r\n[/ChatterBot/tests/storage_adapter_tests/test_sqlalchemy_adapter.py#L34](https://github.com/gunthercox/ChatterBot/blob/d20263aef280428def71dc9d4e8aa12a3b5c1f7f/tests/storage_adapter_tests/test_sqlalchemy_adapter.py#L34)\r\n@gunthercox   Hi, I use a Mac with python 2.7.10 and pip2\r\n\r\nWhen i tried to install the bot with pip, gives me this error, can you help me.\r\n\r\n```\r\nCollecting ruamel.yaml<=0.15 (from chatterbot-corpus<1.1,>=1.0->chatterbot)\r\n  Downloading ruamel.yaml-0.15.0.tar.gz (247kB)\r\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 256kB 3.0MB/s \r\n    Complete output from command python setup.py egg_info:\r\n    /tmp/tmp_ruamel_0utFWU/test_ruamel_yaml.c:6:8: warning: explicitly assigning value of variable of type 'yaml_parser_t' (aka 'struct yaml_parser_s') to itself [-Wself-assign]\r\n    parser = parser;  /* prevent warning */\r\n    ~~~~~~ ^ ~~~~~~\r\n    /tmp/tmp_ruamel_0utFWU/test_ruamel_yaml.c:6:10: warning: variable 'parser' is uninitialized when used here [-Wuninitialized]\r\n    parser = parser;  /* prevent warning */\r\n             ^~~~~~\r\n    /tmp/tmp_ruamel_0utFWU/test_ruamel_yaml.c:5:1: note: variable 'parser' is declared here\r\n    yaml_parser_t parser;\r\n    ^\r\n    2 warnings generated.\r\n    /tmp/tmp_ruamel_0utFWU/test_ruamel_yaml.c:6:8: warning: explicitly assigning value of variable of type 'yaml_parser_t' (aka 'struct yaml_parser_s') to itself [-Wself-assign]\r\n    parser = parser;  /* prevent warning */\r\n    ~~~~~~ ^ ~~~~~~\r\n    /tmp/tmp_ruamel_0utFWU/test_ruamel_yaml.c:6:10: warning: variable 'parser' is uninitialized when used here [-Wuninitialized]\r\n    parser = parser;  /* prevent warning */\r\n             ^~~~~~\r\n    /tmp/tmp_ruamel_0utFWU/test_ruamel_yaml.c:5:1: note: variable 'parser' is declared here\r\n    yaml_parser_t parser;\r\n    ^\r\n    2 warnings generated.\r\n    sys.argv ['-c', 'egg_info', '--egg-base', 'pip-egg-info']\r\n    test compiling test_ruamel_yaml\r\n    Traceback (most recent call last):\r\n      File \"<string>\", line 1, in <module>\r\n      File \"/private/tmp/pip-build-_9XDX7/ruamel.yaml/setup.py\", line 858, in <module>\r\n        main()\r\n      File \"/private/tmp/pip-build-_9XDX7/ruamel.yaml/setup.py\", line 847, in main\r\n        setup(**kw)\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/core.py\", line 111, in setup\r\n        _setup_distribution = dist = klass(attrs)\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/setuptools/dist.py\", line 272, in __init__\r\n        _Distribution.__init__(self,attrs)\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/distutils/dist.py\", line 287, in __init__\r\n        self.finalize_options()\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/setuptools/dist.py\", line 326, in finalize_options\r\n        ep.require(installer=self.fetch_build_egg)\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py\", line 2385, in require\r\n        reqs = self.dist.requires(self.extras)\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py\", line 2617, in requires\r\n        dm = self._dep_map\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py\", line 2606, in _dep_map\r\n        if invalid_marker(marker):\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py\", line 1424, in is_invalid_marker\r\n        cls.evaluate_marker(text)\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py\", line 1549, in _markerlib_evaluate\r\n        env = cls._translate_metadata2(_markerlib.default_environment())\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py\", line 1537, in _translate_metadata2\r\n        for key, value in env\r\n      File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources/__init__.py\", line 1536, in <genexpr>\r\n        (key.replace('.', '_'), value)\r\n    ValueError: too many values to unpack\r\n    \r\n    ----------------------------------------\r\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/tmp/pip-build-_9XDX7/ruamel.yaml/\r\n\r\n``` How about python 3? Thank you so much for everyone, I fixed compiling direct with\r\n\r\npython setup.py build\r\npython setup.py install\r\n\r\nBut, with PIP I didnt make it works  https://github.com/gunthercox/ChatterBot/blob/68527223db52c39cbb94393cdf313f39485c5856/chatterbot/trainers.py#L67  Can we train chatterbot with smiley as input or response?\r\nI tried using python library emojione with chatterbot but it didn't help.\r\nanyone succeeded in doing this, your help is appreciated.\r\n  @gunthercox  thank you.\r\nif your attempt succeeds i will add corpus for emoticons. Hi @gunthercox ,i have update on this.\r\nWe can use emojipy --Python library for working with emojione.\r\nThere are shortcodes associated with each emoticon.\r\nsmiling face ---> shortcode is    : grinning  :\r\nHence we can train chatbot as \r\nInput :  grinning  :  response \"You seems to be happy today\"\r\nHence,the task is first convert smiley image into short code.\r\nHope I have written in a way you should understand it.\r\n\r\n\r\n  I have trying to train with the twitter trainer because of the following error\r\n\r\n   twitter.error.TwitterError: [{'code': 89, 'message': 'Invalid or expired token.'}]\r\n\r\n\r\nhow can I solve this problem? @vkosuri Thanks. Solved it.  i have corps with 6000000 lines data , and i try to train the corps but it's too slow ,is there any ways to improve the performance in ChatterBot ? @aliray , if you don't mind can you please state where you acquired the data from? Corps with 900000 lines data, use mongodb, super slow. @laonan hello, have u solved the problem of efficiency. I meet the same problem not yet, if u have any good news, would pls let me know? thx.\n\n> \u5728 2017\u5e749\u670830\u65e5\uff0c\u4e0b\u53484:43\uff0cLee Tao <notifications@github.com> \u5199\u9053\uff1a\n> \n> @laonan <https://github.com/laonan> hello, have u solved the problem of efficiency. I meet the same problem\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/gunthercox/ChatterBot/issues/908#issuecomment-333294204>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABYyVo7otDYXF_A6xGfCTk_Ht8Tfp13Yks5snf9OgaJpZM4OwNqn>.\n> \n\n    I guess the answer to my question is yes.\r\nBut it shouldn't be any issue to connect the Chatterbot to PostgresSQL?\r\n\r\nDo you have any guide lines how to connect the Chatterbot to other databases?\r\n\r\nThanks\r\nChristian @gunthercox Next questions, is it then possible to have multiple databases sources?\r\nI'm thinking to have a central Database where multiple chatterbot only will read from and also have a local database that contain data that Chatterbot can read/write to.\r\n\r\nThanks @gunthercox will try with PostgreSQL and get back to you if it works or not. i actually used postgresql before even trying chatterbot with sqlite and it worked just fine.\r\n\r\ni went back to test it again for you and came across #927 btw.\r\n\r\nwith the patch in #927 added to my personal code, it worked just fine.  i've used sqlalchemy with postgresql and sqlite in another project of mine and it was seamless.  you will need to install psycopg2 in order to use postgresql with sqlalchemy.\r\n\r\nso:\r\n\r\npip install psycopg2\r\n\r\nthen set database uri to one of the following:\r\n\r\ndatabase_uri='postgresql://localhost/database_name',\r\ndatabase_uri='postgresql://localhost:port_number/database_name',\r\ndatabase_uri='postgresql://user:password@localhost/database_name',\r\ndatabase_uri='postgresql://user:password@remote_host/database_name',\r\ndatabase_uri='postgresql://user:password@remote_host:port_number/database_name',\r\n\r\nyou get the picture.\r\n\r\nunless someone else beats me to it, i'll look and see if this can be added anywhere in the documentation and then recommend that this issue be closed.\r\n\r\n-- les @Issen007 the multiple databases sources question should probably be opened up in another issue as a feature request. Thanks @lesleslie, I will try this tomorrow in our lab. @lesleslie I did a quick test but I got a import issue when loading the chatterbot module.\r\nIt complain it can't import the StorageAdapter.\r\nBut I need some more time to verify what's going on. @lesleslie I got the PostgreSQL connection to work. But now by changing the `sql_storage.py` but via the Django `settings.py` file.\r\n\r\nMaybe the chatterbot works different between if you are going though the Django App and if you go though the pure python app. \r\nBecause if I only import the ChatBot module from chatterbot it doesn't complain during the load but it complain during the training but it complaining that the module chatbot.train.\r\n\r\nThanks I will close this ticket because it works when I change the Django Settings for PostgreSQL and that is good enough for me.  ![image](https://user-images.githubusercontent.com/25637940/29024661-b77f6bcc-7b90-11e7-83e3-0e65b8bd624f.png)\r\n I used 0.7.4 and upgraded to version 0.7.5 now but still the same issue.\r\n\r\nI got a feeling that, chatterbot responds back to me and the questions I ask back will be the answer for the Chatterbot. So all data it getting to the wrong database table. \r\n\r\n @vkosuri I am using 0.7.5 version\r\n@Issen007 sometimes the questions I ask are also returned to me as answers.\r\n @sherinmannambeth  I think you are using mongodb storage adapter,if yes the work around is use tochatterbot version 0.5.4.It will resolve your issue.\r\n I can now see that with 0.7.6 that if I ask a question I got the correct responds, but when I ask another question or continue the conversation, the chatterbot think that is the answer for the statement that the Chatterbot responded back to be from the first question.\r\nThen next time I ask the 2nd question I got the wrong answer back.\r\n\r\nFirst Time:\r\nMe: Hello\r\nBot: Hi,\r\nMe: How are you?\r\nBot: I'm good\r\n\r\nSecond Time:\r\nMe: Hello\r\nBot: Hi,\r\nMe: How are you?\r\nBot: Hi, \r\n\r\nWhen I look in the SQLite Database I can now see following info\r\n\r\nStatement           |          Responds\r\nHi,                       |       How are you\r\nHello                   |       Hi\r\n\r\nI got a feeling that I'm pushing in data for each statement.\r\n\r\n/Christian  @bainadeashish I am using \"chatterbot.storage.DjangoStorageAdapter\" @sherinmannambeth just a question for you, are you using it together with Django?\r\nAnd have you sort of copycat the django App HTML code that includes as an example with the GitHub package?\r\n\r\nBecause I start thinking this is not a Chatterbot problem. I think this is a HTML/Django problem that the responds start to be the question and everything you and I type will be the responds. @Issen007 Yes, I am using the same Django App HTML Code. But this issue doesnt happen when I train data from the corpus. When trained, the question goes to statement and answer goes to response. If this where to be Django's problem then y doesnt it reflect on training? Even during when you run the corpus data file?  For trained data its normal. Only while running the bot the problem persists. And that's what's I mean. I think we have a JavaScript / Python issue here and not a Python problem. \r\nWhen I follow the code in the HTML form we pushing in the same data though the same field and variable. \r\nSo I think we need to debug the webpage/javascript and make sure that is proper configured.  ![capture](https://user-images.githubusercontent.com/18008787/29272456-74b42bbe-8100-11e7-96d0-1e255e4736b0.PNG)\r\n\r\nThis is what you got when you run your chatbot? @gunthercox @vkosuri can you point me to the area where you take the Javascript inputData and POST it to Python chatterbotURL?\r\nBecause I can see that we don't insert the first statement. And I got a feeling that you take the first sentence and then the second sentence match that data with existing data in the database.\r\nIf not match, then do you add the data to the data.\r\nIf exist you just add the counter with +1.\r\n\r\nNeed to follow that entire data flow to see where it goes wrong. \r\n\r\nThanks Thanks, That one did I already found out but what python file does that one pointing to? \r\nI did search in view.py and url.py but can't find that inputData line.  @vkosuri Thanks and this was the area I looking for.\r\nBut can now see that there is updates in the code at GitHub but no formal update that could be used though `pip install --upgrade chatterbot` command.\r\n\r\nBut I will upgrade though GitHub and see if that fix solve the issue for us. The new code sort of solve the issue for me. \r\nBut now do I get the Chatterbot Respond in the Statement column and the Responds column, also my statement also get in both columns. \r\n\r\nI think this could be great by design function to be able to predict where the conversation will end. @gunthercox @vkosuri from my point of view has this issue been solved by the new code.\r\n\r\n@sherinmannambeth FYI, if you run a git clone from GitHub on this project to a separate directory.\r\nCopy the all data from directory `ChatterBot/chatterbot/*` to your `<virt env>/lib/pythonX.X/site-packages/chatterbot`\r\nThen will your Statement/Responds issue been solved and we can close this ticket.  @Issen007  I have done what you said and this is what I got when tested,\r\nMy conversation\r\n![conv](https://user-images.githubusercontent.com/25637940/29357306-ab597d1e-8294-11e7-9c14-2f66f192ecfb.JPG)\r\n\r\nIn Django admin\r\n![admin](https://user-images.githubusercontent.com/25637940/29357362-d674fd02-8294-11e7-939e-84ecc27c3844.JPG)\r\n This is correct, and this is what I asked @gunthercox and @vkosuri \r\nIf the idea was to create a conversation we need both ChatterBot Reponds and what will your Responds be to his previews answer to be able to predict future conversation. \r\n\r\nThanks No no..the conversation is working fine..but what comes in Django admin later becomes part of the training  data...according to my conversation only two rows should be created in the admin part..but theres an extra row which finally adds up to be a wrong training data.\r\n![29357362-d674fd02-8294-11e7-939e-84ecc27c3844](https://user-images.githubusercontent.com/25637940/29395716-8a9cf622-8330-11e7-86f3-5e6502cc05d3.JPG)\r\nThe later effect is that when I ask \"Hello\", it will respond \"How are you\" @sherinmannambeth I'll will work on this today and see if I can solve it. Because I agree with you with that result.\r\nBut let me go though the code and see if I can find that statement in the code and see where it push in the responds in to the database.\r\n\r\n@vkosuri maybe you have some sort of guidelines to come up with where I should search for.  @sherinmannambeth I think I found the issue.\r\nIf you put a # infront of line [101-105](https://github.com/gunthercox/ChatterBot/blob/9f4b385b052b467ac6dcf9995d13dc6544143b42/chatterbot/storage/django_storage.py#L101) in django_storage.py then will you remove the double statement.\r\n\r\n@gunthercox @vkosuri do we know why we got that function?\r\nBecause when I switch that values to \r\n```\r\n            Response.objects.create(\r\n                response=response_statement,\r\n                statement=statement\r\n            )\r\n```\r\nthe Chatterbot will then insert the correct statement and responds in the correct field.\r\nBut that function do also help the chatterbot to create the statement / responds twice. \r\nI can do a new pull request and fix that for you, but need to understand why we even have it in the first place.  Has this issue been fixed? I am also getting this issue. @vkosuri @Issen007 @gunthercox  @rdt712 No idea, where were this, Might @Issen007 know about this? In order to get around this, I am just setting the read_only flag to true. I don't particularly care that the chatbot learns from my users and the current way produces weird results. @vkosuri   Hi Team,\r\n\r\nInitially i was using JsonFileStorageAdapter it was giving correct responses but it was slow.Hence I moved to MongoDatabaseAdapter.It is giving quick responses but inaccurate.:(\r\n\r\nCode is :+1: \r\n``` Python\r\nbot = ChatBot(\r\n    'IVLI',\r\n    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',\r\n    database='chatterbot-database',\r\n\tlogic_adapters=[\r\n\t\t{\r\n            'import_path': 'chatterbot.logic.BestMatch',\r\n\t\t\t\"response_selection_method\": \"chatterbot.response_selection.get_random_response\"\r\n\t\t\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 0.60,\r\n            'default_response': 'I am sorry, but I do not understand.'\r\n        },\r\n\r\n    ],\r\n    preprocessors=['chatterbot.preprocessors.clean_whitespace','chatterbot.preprocessors.unescape_html','chatterbot.preprocessors.convert_to_ascii'],\r\n    silence_performance_warning=True,\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    filters=[\"chatterbot.filters.RepetitiveResponseFilter\"]\r\n)\r\nbot.train(\"chatterbot.corpus.english.greetings\")\r\nbot.read_only=True\r\n```\r\n\r\nBelow is sample log for MongoDatabaseAdapter:\r\n\r\n\r\nSTART OF MESSAGE\r\n```\r\nDEBUG:root:Original messaage was : hello\r\nDEBUG:root:Complete message was : hello\r\nDEBUG:root:Corrected message was : hello\r\nINFO:chatterbot.adapters:Recieved input statement: hello\r\nINFO:chatterbot.adapters:\"hello\" is not a known statement\r\nINFO:chatterbot.adapters:Using \"hello\" as a close match to \"Hello\"\r\nINFO:chatterbot.adapters:Selecting response from 1 optimal responses.\r\nINFO:chatterbot.response_selection:Selecting a response from list of 1 options.\r\nINFO:chatterbot.adapters:Response selected. Using \"Hi\"\r\nINFO:chatterbot.adapters:BestMatch selected \"Hi\" as a response with a confidence of 1.0\r\nINFO:chatterbot.adapters:LowConfidenceAdapter selected \"I am sorry, but I do not understand.\" as a response with a confidence of 0\r\nINFO:chatterbot.adapters:NoKnowledgeAdapter selected \"hello\" as a response with a confidence of 0\r\nINFO:chatterbot.chatterbot:Adding \"hello\" as a response to \"Greetings!\"\r\nDEBUG:root:Response for message was : Hi\r\nDEBUG:root:\r\n```\r\nSTART OF MESSAGE\r\n```\r\nDEBUG:root:Original messaage was : hello\r\nDEBUG:root:Complete message was : hello\r\nDEBUG:root:Corrected message was : hello\r\nINFO:chatterbot.adapters:Recieved input statement: hello\r\nINFO:chatterbot.adapters:\"hello\" is not a known statement\r\nINFO:chatterbot.adapters:Using \"hello\" as a close match to \"Hello\"\r\nINFO:chatterbot.adapters:No response to \"Hello\" found. Selecting a random response.\r\nINFO:chatterbot.adapters:BestMatch selected \"I'm doing well.\" as a response with a confidence of 0\r\nINFO:chatterbot.adapters:LowConfidenceAdapter selected \"I am sorry, but I do not understand.\" as a response with a confidence of 0\r\nINFO:chatterbot.adapters:NoKnowledgeAdapter selected \"hello\" as a response with a confidence of 0\r\nINFO:chatterbot.chatterbot:Adding \"hello\" as a response to \"Hi\"\r\n**DEBUG:root:Response for message was : I'm doing well.** ---WRONG RESPONSE\r\nDEBUG:root:\r\n```\r\n\r\nWhat should I do to avoid such false responses? Hi @vkosuri ,I dont think its because of random response method.\r\nFrom the log i have shared earlier,\r\nINFO:chatterbot.adapters:Selecting response from 1 optimal responses.\r\nwhen i gave hello as input ,it tries to select from 1 optimal response .\r\n\r\nBut second time i have given hello as input,log says\r\nINFO:chatterbot.adapters:No response to \"Hello\" found. Selecting a random response.\r\nHere it is not able to find any optimal response.  i think this is problem & it then it is giving a random response.\r\n\r\n @vkosuri yesterday i debug the code & found that it is working weird for mongodb storage adapter.\r\nIt is removing optimal response at each iteration by 1.\r\n\r\nFor Hello i was having 3 response Hi,Greetings,Hey.\r\nfor the 1st hello input ,it gave me below:\r\nINFO:chatterbot.adapters:Selecting response from 3 optimal responses.\r\nFor 2 nd hello input\r\nINFO:chatterbot.adapters:Selecting response from 2 optimal responses.\r\nfor 3 rd hello input\r\nINFO:chatterbot.adapters:Selecting response from 1 optimal responses.\r\n\r\nfor 4 th hello input \r\nINFO:chatterbot.adapters:No response to \"Hello\" found. Selecting a random response.\r\n\r\n\r\n\r\n @vkosuri  which version of chatterbot works fine with mongodb storage adapter?\r\nso that I can  use previous versions of chatterbot till the time any of us fix this bug. @vkosuri tag 0.5.4 working fine with mongodb storage adaptor ,post 0.5.5 to latest version which is 0.7.5 there is bug for mongodb storage adaptor.\r\nHope this helps for resolving bug.\r\nWe need to check what went wrong from 0.5.4 to 0.5.5.  I have  modified the response selector by adding a variable to keep track of the context \r\nbut when I tried it out with multiple users, I see the context get overwritten by the last incoming message from any user\r\n\r\nSo thinking of writing the context with the session id into the mongo\r\n\r\nCan anybody guide me on how I can use  inbuilt session module to enable this functionality \r\nor if there any better approach please do suggest \r\n\r\nAny help is welcome :)\r\nThanks in advance ! \r\n Thanks for the Reply @gunthercox \r\n\r\nCan please tell me which all modules will/have change with your update ?\r\n\r\n*very sorry for responding this late*\r\n Reference pull request https://github.com/gunthercox/ChatterBot/pull/828  hello all ,\r\n\r\n     how can we train the chatterbot effectively to achieve the good response from bot.\r\ncan you give suggestions to improve the quality of response from chatbot. thanks for the reply .\r\n \r\n    Actually i want to know about  HOW TO TRAIN a basic chatbot with more amount of data.  @Hemanth2396, you should just create a dataset (dialogue corpus) and format it to one of the using [formats to training](http://chatterbot.readthedocs.io/en/stable/training.html). \r\nThere are list of state-of-the-art corpuses for training chatbots: [chat_corpus](https://github.com/Marsan-Ma/chat_corpus) @7633 Can you give a detailed explanation about this, If you have tried and succeeded in doing this? So this is not an easy thing to complete. We don't usually get the data set in the yaml format i.e the question and answer format and practically is it possible to get the large amount of data in that format?  The current version is updated to.75, but it still doesn't solve the big data problem\r\nOnly 373754 took 164 seconds\r\n![qq 20170801182431](https://user-images.githubusercontent.com/10823306/28821183-134c3bdc-76e7-11e7-90ce-d9d400f6a5e6.png)\r\n\r\nRecommend the following robot\r\n![fc2305d9cbdc0f86db2b46e2a5835fa8](https://user-images.githubusercontent.com/10823306/28821252-50a45e56-76e7-11e7-9f67-268791a36369.png)\r\nWeChat applet\r\n @gunthercox  OK, which version of the performance problem is likely to be solved? @gunthercox  Quietly waiting, hope can be realized  as the tittle typed,i want to know some basic principle of this project  How does one change this parameter for the TwitterTrainer, could you give me an example?  Here is the settings \r\n```\r\nlogic_adapters=[\r\n  {\r\n    'import_path': \"chatterbot.logic.BestMatch\"\r\n  },\r\n  {\r\n    'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n    'threshold': 0.3,\r\n    'default_response': gettext('You can ask other question')\r\n  }\r\n]\r\n```\r\nBut in my logging file, I found out it turn out \r\n```\r\n2017-07-31 19:41:05,379 INFO Recieved input statement: \u54c8\u54c8\u54c8\r\n2017-07-31 19:41:06,045 INFO \"\u54c8\u54c8\u54c8\" is not a known statement\r\n2017-07-31 19:41:08,230 INFO Using \"\u54c8\u54c8\u54c8\" as a close match to \"\u54c8\u56c9\"\r\n2017-07-31 19:41:09,772 INFO No response to \"\u54c8\u56c9\" found. Selecting a random response.\r\n2017-07-31 19:41:09,772 INFO BestMatch selected \"\u597d\u554a\uff0c\u6b61\u8fce\" as a response with a confidence of 0\r\n2017-07-31 19:41:11,607 INFO LowConfidenceAdapter selected \"\u4f60\u53ef\u4ee5\u5617\u8a66\u554f\u5225\u7684\u554f\u984c\" as a response with a confidence of 0\r\n2017-07-31 19:41:11,867 INFO NoKnowledgeAdapter selected \"\u54c8\u54c8\u54c8\" as a response with a confidence of 0\r\n```\r\n\r\nAnd the Low Confidence log is written: LowConfidenceAdapter as a response with a confidence of 0\r\n\r\nAll the confidence is 0, and it reply the random, not the one I define 'threshold': 0.3, you can ask other question. \r\n I think I am using too low threshold. After increase above 0.5, lots of dialog works.\r\nMaybe we can add a log info about closest_match.confidence with confidence_threshold.  Definitely, thank you.  ![](http://ocef2grmj.bkt.clouddn.com/qq20170801-195011-2x-png(2017-08-01T19:50:47+08:00).png)\r\n\r\nI also get the error unicode.\r\n\r\n[the database](http://ocef2grmj.bkt.clouddn.com/chatterbot-database-db(2017-08-01T19:53:00+08:00).db)\r\n\r\nthis is my [code](http://ocef2grmj.bkt.clouddn.com/split-py(2017-08-01T19:56:55+08:00).py)\r\n @vkosuri I fixed this bug, change web framework from `turnado` to `sanic`.\r\n\r\n```python\r\n# coding = utf-8\r\n\r\nfrom chatterbot import ChatBot\r\nfrom sanic import Sanic\r\nfrom sanic.response import json\r\n\r\n# Initialized API\r\napp = Sanic()\r\n\r\n# Initialized chatbot\r\nchatbot = ChatBot(\r\n    'SMART-XY',\r\n    storage_adapter=\"chatterbot.storage.SQLStorageAdapter\",\r\n    database='chatterbot-database',\r\n)\r\n\r\n@app.route(\"/chat\", methods=['GET'])\r\nasync def chatWithBot(request):\r\n    result = str('\u5c0f\u76ca\u8d39\u5c3d\u4e86\u4e5d\u725b\u4e8c\u864e\u4e4b\u529b\u672a\u80fd\u627e\u5230\u76f8\u5173\u5185\u5bb9')\r\n    sentence = str('\u4f60\u8bf4\u4e86\u53e5\u5565???')\r\n    try:\r\n        sentence = str(request.args.get('sentence'))\r\n        if sentence:\r\n            bot_result = chatbot.get_response(sentence)\r\n            if bot_result:\r\n                result = str(bot_result)\r\n    except e:\r\n        print(e)\r\n    return json(\r\n        {'data': result, 'question': sentence},\r\n        ensure_ascii=False\r\n    )\r\n\r\ndef main():\r\n    app.run(host=\"localhost\", port=8888)\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n```  This adds general documentation on how to deploy a chat bot as a web application. It might be much too general at the moment so any feedback on how it could be improved would be greatly appreciated.\r\n\r\nCloses #884  Fixed by #890   After Its come to custom adapter, chat should hold the state and continue until the form data filled.\r\nExample, If I have 5 fields in a form : have to do validate and should get input from user. Like iDialog Form in Microsoft Bot Framework In the future, this is a feature that might possibly be added. I have notes about a possible design in the project wiki. Right now my focus is on improving the performance and accuracy of the chat bot's responses so this feature likely won't be added any time in the near future. This would be really useful. Being able to keep context and track what's required in a \"form\" would be great.  Would the chat-forms- https://github.com/gunthercox/ChatterBot/wiki/Chat-Forms - require a django integration to hold a session?  I have a chat bot that isn't on a webserver and integrates with our Jabber chat server. I think the session manager is web only? Would this form-chat be restricted to a web server (that can hold a session)?  Hi,\r\nI'm new on Django but I got the Chatterbot installed successfully in my own Django installation.\r\nI have also successfully imported the Exampel App you guys have wroted so I can talk though the API.\r\n\r\nBut now do I have a large list of training data that I want to import to the Database.\r\nHow is the easiest way to import that?\r\n\r\nI have a text file in the same format as following documentation shows me.\r\nhttps://chatterbot.readthedocs.io/en/stable/training.html#training-via-list-data\r\nBut I don't understand how I can import that list to the Django Chatterbot app?\r\n\r\nThanks for advice\r\nChristian There is an additional setting for this that can be used in Django's settings for ChatterBot.\r\n\r\nhttp://chatterbot.readthedocs.io/en/latest/django/training.html#training-settings\r\n\r\nThe content of the `training_data` can be different, depending on the training class that you are using. I've been meaning to add more documentation to the section on using ChatterBot with Django so I apologize about the lack of guidance. gunthercox, no problem. I more then happy to help out here if you want to.\r\nI'm more then open to take a quick chat so I can help with documentation for you. \r\n\r\nBecause I can probably help you out to create a corpus version in Swedish for you and we probably also want to create a German for you. \r\nAnd from here I can probably also with your guidelines get all the steps documentation so more people can create or expand the once we have.  Let's try to catch up over Hangout or similar to do a quick chat and see what I can help you with.\r\n This has now been documented at chatterbot-corpus website \"[Chatterbot-Corpus](https://github.com/gunthercox/chatterbot-corpus/)\"  Closes #877  This prevents the issues seen in #867. Query support (using ChatterBot's query builder) still needs to be added for this adapter.\r\n\r\nCloses #867   Hi @WildDylan This is something I will have to look into. That's a pretty large data set and some changes to ChatterBot may be required to speed that up. What are the formats used to train the chatbot? Thanks for responding. But, I want to know the default formats used to train the chatbot. thanks for providing the code for the chatter bot ,i have two questions .\r\none is regarding can NLP be included for the coding to give the appropriate response for the unknown input data without training?\r\nsecond one is regarding the to get a response we must have to add response of unknown question or else is there any possibility to get GOOD RESPONSE for the unknown input.   Right now there isn't a way to do this. I'll mark this as a feature request. I agree that this would be useful.  Allow specification of ssl verification for hipchat adapters by adding an optional config variable to the chatbot instance. Fixed flake8.\r\n\r\nBlinking test  ````tests/storage_adapter_tests/test_sqlalchemy_adapter.py````is also unstable on ````master````.\r\n\r\nI saw that removal of I/O adapters is still \"future\", so it might not hurt to merge this small feature.\r\n @Achimh3011 Thank you.  Fixes the hipchat example by providing a usable backlink of the Chatbot instance to the Adapter instance. Fixed flake8.\r\n\r\nBlinking test  ````tests/storage_adapter_tests/test_sqlalchemy_adapter.py````is also unstable on ````master````.  I need to speed up sqlite with \r\nPRAGMA journal_mode = OFF;\r\nPRAGMA synchronous = OFF; , Where should this be added?\r\n Internally, ChatterBot uses SQLAlchemy to connect to sqlite databases. It looks like I might have to make some changes to the setup of the SQL Storage adapter so that additional parameters can be specified. I'll look into this and get back to you as soon as possible.  Try the following (lines 119 to 134) of sql_storage.py:\r\n\r\n        self.engine = create_engine(self.database_uri)\r\n\r\n        from re import search\r\n\r\n        if search('^sqlite://', self.database_uri):\r\n            from sqlalchemy.engine import Engine\r\n            from sqlalchemy import event\r\n\r\n            @event.listens_for(Engine, \"connect\")\r\n            def set_sqlite_pragma(dbapi_connection, connection_record):\r\n                dbapi_connection.execute('PRAGMA journal_mode=WAL')\r\n                dbapi_connection.execute('PRAGMA synchronous=NORMAL')\r\n\r\n        self.read_only = self.kwargs.get(\r\n            \"read_only\", False\r\n        )\r\n\r\nI am not the expert on this at all by any means, but from what I found googling turning journal_mode all the way off doesn't give you much, if any, of a substantial speed increase, over turning it to WAL, but dramatically increases your chance of db corruption (at least with *nix, it may be worth doing on Windows).  I used to execute the following code to train my chatbot and the database.db will be auto generated, but It doesn't happen in this version.\r\n\r\n``` Python\r\nfrom chatterbot.trainers import ListTrainer\r\n\r\nchatterbot = ChatBot(\"Training Example\")\r\nchatterbot.set_trainer(ListTrainer)\r\n\r\nchatterbot.train([\r\n    \"Hi there!\",\r\n    \"Hello\",\r\n])\r\n\r\nchatterbot.train([\r\n    \"Greetings!\",\r\n    \"Hello\",\r\n])\r\n``` I don't know it is a bug or on purpose on the document modification. There should be something writen about the JsonFileStorageAdapter, but now its gone, and that is what I'm looking for.  ``` Python\r\ndef filter_selection(self, chatterbot, session_id):\r\n\r\n        session = chatterbot.conversation_sessions.get(session_id)\r\n\r\n        if session.conversation.empty():\r\n            return chatterbot.storage.base_query\r\n\r\n        text_of_recent_responses = []\r\n\r\n        for statement, response in session.conversation:\r\n            text_of_recent_responses.append(response.text)\r\n\r\n        query = chatterbot.storage.base_query.statement_text_not_in(\r\n            text_of_recent_responses\r\n        )\r\n\r\n        return query\r\n```\r\n\r\n``` Bash\r\n>\r\nINFO:ChatBot:\"\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u043b\u0438\u0430\u043b\u043e\u0432?\" is not a known statement\r\nTraceback (most recent call last):\r\n  File \"/home/listade/.IdeaIC2017.1/config/plugins/python-ce/helpers/pydev/pydevd.py\", line 1585, in <module>\r\n    globals = debugger.run(setup['file'], None, None, is_module)\r\n  File \"/home/listade/.IdeaIC2017.1/config/plugins/python-ce/helpers/pydev/pydevd.py\", line 1021, in run\r\n    runpy._run_module_as_main(module_name, alter_argv=False)\r\n  File \"/usr/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"/usr/lib/python3.6/runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"/home/listade/Desktop/speech_bot-project/speech_bot/__main__.py\", line 71, in <module>\r\n    main()\r\n  File \"/home/listade/Desktop/speech_bot-project/speech_bot/__main__.py\", line 65, in main\r\n    chatbot.get_response(None)\r\n  File \"/usr/lib/python3.6/site-packages/chatterbot/chatterbot.py\", line 109, in get_response\r\n    statement, response = self.generate_response(input_statement, session_id)\r\n  File \"/usr/lib/python3.6/site-packages/chatterbot/chatterbot.py\", line 126, in generate_response\r\n    self.storage.generate_base_query(self, session_id)\r\n  File \"/usr/lib/python3.6/site-packages/chatterbot/storage/storage_adapter.py\", line 45, in generate_base_query\r\n    self.base_query = filter_instance.filter_selection(chatterbot, session_id)\r\n  File \"/usr/lib/python3.6/site-packages/chatterbot/filters.py\", line 39, in filter_selection\r\n    query = chatterbot.storage.base_query.statement_text_not_in(\r\nAttributeError: 'NoneType' object has no attribute 'statement_text_not_in'\r\n> \r\n``` I'm having this same issue, same traceback. same\r\nIf you want to continue developing dont use the repetitive response filter  This is something I'm interested in looking into. Possibly, this would remove the overhead of the database having to rebuild the index each time a statement is added (some research on this is still required).\r\n\r\n```python\r\nself.statements.create_index('text', unique=True)\r\n```  Hi, is it possible to give list of possible default response in LowConfidenceAdapter instead of just one statement. or maybe programatically this functionality can be achieved ? @vkosuri For example: For any query user asks the bot, the score comes out to be less that the LowConfidenceAdapter threshold (say 0.65) I should be able to generate randomized responses from certain predefined list of responses rather than just displaying hardcoded value of \"default_response\"  I've execute the command \"pip install --upgrade chatterbot\" already.\r\n\r\nWhen I try to execute the sample code from https://chatterbot.readthedocs.io/en/stable/training.html#\r\n\r\n``` Python\r\nfrom chatterbot import ChatBot\r\nfrom chatterbot.trainers import ListTrainer\r\n\r\nchatterbot = ChatBot(\"Training Example\")\r\nchatterbot.set_trainer(ListTrainer)\r\n\r\nchatterbot.train([\r\n    \"Hi there!\",\r\n    \"Hello\"\r\n])\r\n\r\nchatterbot.train([\r\n    \"Greetings!\",\r\n    \"Hello\"\r\n])\r\n```\r\nError message:\r\n\r\n``` BASH\r\n\"D:\\Program Files\\Python\\Python36-32\\python.exe\" D:/Files/PycharmProjects/untitled/trainer.py\r\nTraceback (most recent call last):\r\n  File \"D:/Files/PycharmProjects/untitled/trainer.py\", line 10, in <module>\r\n    \"Hello\"\r\n  File \"D:\\Program Files\\Python\\Python36-32\\lib\\site-packages\\chatterbot\\trainers.py\", line 87, in train\r\n    Response(previous_statement_text)\r\n  File \"D:\\Program Files\\Python\\Python36-32\\lib\\site-packages\\chatterbot\\conversation\\response.py\", line 8, in __init__\r\n    import dateutil.parser as date_parser\r\nModuleNotFoundError: No module named 'dateutil'\r\n```\r\nProcess finished with exit code 1\r\n\r\nThe same code works fine before I updated the chatterbot, but fail after I updated it.\r\n @nggary It appears I was overzealous in my eagerness to embrace the [\"release early, release often\"](https://en.wikipedia.org/wiki/Release_early,_release_often) philosophy of the [Cathedral and the Bazaar](https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar). My apologies. I will push up a fix shortly that adds `python-dateutil` to the project requirements. No worries, take your time.  If I want to create an account by the chatbot:\r\n\r\nMe: Hi, I want to book the dinner.\r\nBot: May I have your name?\r\nMe: Peter\r\nBot: May I have your mobile number?\r\nMe: xxxxxxxxxxxxxx\r\nBot: What time you want to eat at?\r\nMe: 8:00 pm\r\nBot: Your table is reserved.\r\n\r\nThis conversation involve few questions:\r\n1. How do the chatbot store the booking information from multiple input (name, mobile no. and time)?\r\n2. How to validate the input from user and move on to next question or ask the user to re-enter?\r\n3. How to process/cancel this booking request at the end of conversation? \r\n Thanks for pointing me the direction. [#309 (comment)](https://github.com/gunthercox/ChatterBot/issues/309#issuecomment-249583779) is a good example, but it still doesn't have the multi-step. I found that there is a sample code of [Chat form](https://github.com/gunthercox/ChatterBot/wiki/Chat-Forms) inside the wiki page, which is perfectly suit my requirement, may I know is this feature is under development? @nggary Chat Forms are just a feature idea that I recorded a while ago. The functionality you are looking for is a common request that I've had from different developers. I'd love to add it in the future but right now it is something that isn't even on the development roadmap. Thanks for the answer!  Where to write the this section of code. Please kindly help me\r\nIf you are using Python 2.7, be sure that the unicode header is the first line of your Python file: \r\n```Python\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\nchatbot = ChatBot(\"Ron Obvious\")\r\n``` Please take a look at the example code:\r\nhttps://github.com/gunthercox/ChatterBot/blob/master/examples/basic_example.py  Hi there, first of all, I would like to say thank you to gunthercox for writing this engine, this engine is amazing.\r\n\r\nAssume that i had a currency exchane rate table based on hong kong dollar in database:\r\nUsd: 0.13\r\nYen: 700\r\nEtc...\r\n\r\nIf I want to impletment currency checker function to bot like this:\r\n\r\n(Default currency is Hong Kong dolloar)\r\nMe: usd rate \r\nBot: 1 hkd = 0.13 usd\r\nMe: us dollar rate\r\nBot: 1 hkd = 0.13 usd\r\nMe: yen rate. *(Yen is japanese dollar name )\r\nBot: 1 hkd = 700 yen\r\nMe: 1000 yen = ? Usd\r\nBot: 1000 yen = 20 usd\r\n\r\nDo i need to create a new logic adpater for this? If so, how to teach the bot to identify the currecny code/name/amount from input and match it with database.\r\n\r\nSecond question is how to create corpus embedded with dynamic value from database. For example, if i want to ask the bot about the open time of office, i would expect the bot answer: The open time is 10:00am, but if i train this answer with traidition corpus, i would have to train it every time when open time is changed, which make nk sense to program this.\r\n For the second part of this question is it possible to make a enhancement to the engine? Such like this:\r\n\r\n```\r\n{\r\n    \"test\": \r\n    [\r\n        [\r\n            \"What is the best selling product?\",\r\n            \"The best selling product is [class.method]\"\r\n        ],......\r\n```\r\nThe response with automatically replace the tag [class.method] to the return value from static method of specific class.  ```\r\nERROR:chatterbot.storage.storage_adapter:None\r\nTraceback (most recent call last):\r\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot\\storage\\sql_storage.py\", line 292, in _session_finish\r\n    session.commit()\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 906, in commit\r\n    self.transaction.commit()\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 461, in commit\r\n    self._prepare_impl()\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 441, in _prepare_impl\r\n    self.session.flush()\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 2171, in flush\r\n    self._flush(objects)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 2291, in _flush\r\n    transaction.rollback(_capture_exception=True)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\util\\langhelpers.py\", line 66, in __exit__\r\n    compat.reraise(exc_type, exc_value, exc_tb)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 2255, in _flush\r\n    flush_context.execute()\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py\", line 389, in execute\r\n    rec.execute(self)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\orm\\unitofwork.py\", line 548, in execute\r\n    uow\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\orm\\persistence.py\", line 181, in save_obj\r\n    mapper, table, insert)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\orm\\persistence.py\", line 835, in _emit_insert_statements\r\n    execute(statement, params)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 945, in execute\r\n    return meth(self, multiparams, params)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\sql\\elements.py\", line 263, in _execute_on_connection\r\n    return connection._execute_clauseelement(self, multiparams, params)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1053, in _execute_clauseelement\r\n    compiled_sql, distilled_params\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1189, in _execute_context\r\n    context)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1402, in _handle_dbapi_exception\r\n    exc_info\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\util\\compat.py\", line 203, in raise_from_cause\r\n    reraise(type(exception), exception, tb=exc_tb, cause=cause)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\engine\\base.py\", line 1182, in _execute_context\r\n    context)\r\n  File \"C:\\Python27\\lib\\site-packages\\sqlalchemy\\engine\\default.py\", line 470, in do_execute\r\n    cursor.execute(statement, parameters)\r\nIntegrityError: (sqlite3.IntegrityError) columns text, text_search are not unique [SQL: u'INSERT INTO \"ResponseTable\" (id, text, occurrence, statement_text, text_search) VALUES (?, ?, ?, ?, ?)'] [parameters: (None, u\"That's good to hear.\", 1, 'Yes it is.', '{\"id\": null, \"statement_text\": \"Yes it is.\", \"occurrence\": 1, \"text\": \"That\\'s good to hear.\"}')]\r\n```  Getting issue in training with below chatterbot settings in settings.py\r\n\r\n``` Python\r\n# Chatbot Settings\r\nCHATTERBOT = {\r\n    'name': 'Vyabl Bot',\r\n    'storage_adapter':'chatterbot.storage.MongoDatabaseAdapter',\r\n    'database':'vyablbot_db',\r\n    'database_uri':'mongodb://127.0.0.1:27017',\r\n    'logic_adapters': [{\r\n                                        'import_path': 'chatterbot.logic.BestMatch',\r\n                                        'statement_comparison_function': 'chatterbot.comparisons.levenshtein_distance',\r\n                                        'response_selection_method': 'chatterbot.response_selection.get_most_frequent_response'\r\n                                    },\r\n                                     {\r\n                                        'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n                                        'threshold': 0.6,\r\n                                        'default_response': 'I am sorry, but I do not understand.'\r\n                                    },],\r\n    'filters':['chatterbot.filters.RepetitiveResponseFilter'],\r\n    'trainer': 'chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    'training_data': [\r\n            'D:\\\\Anant\\\\Anant\\\\ChatBot\\\\ChatBot_3_Chatterbot\\\\ChatbotDjango-new\\\\VyablBot\\\\Data\\\\Greetings',\r\n            'D:\\\\Anant\\\\Anant\\\\ChatBot\\\\ChatBot_3_Chatterbot\\\\ChatbotDjango-new\\\\VyablBot\\\\Data\\\\FAQ_Json',\r\n            'D:\\\\Anant\\\\Anant\\\\ChatBot\\\\ChatBot_3_Chatterbot\\\\ChatbotDjango-new\\\\VyablBot\\\\Data\\\\FAQ_Dataset_1',\r\n\t\t\t\r\n    ],\r\n    'django_app_name': 'django_chatterbot',\r\n    'use_django_models':False,\r\n}\r\n```\r\n\r\n*Error generated*\r\n![error](https://user-images.githubusercontent.com/24452345/28198400-88aec676-687b-11e7-8ef5-027d42af8c74.jpg)\r\n Having issue in logic adapter ('import_path')  I used the ubuntu corpus trainer.\r\nI just did usual training (I use MongoDB).\r\n\r\nThe bot sends messages to the web interface via web sockets. Earlier, when there was no data, he responded instantly. Now you need to wait 5-10 seconds until he answers.\r\n\r\nI understand that this problem is related to mongo and not to the chatterbot, but is this really normal ?\r\nOr am I the only one who has this problem? It takes longer because there is more data to process when selecting a response. @gunthercox, yeah, but this is a problem. It's the problem I currently have with my chatbot. I've trained my chatbot with the movie dialogs from Cornell (https://www.cs.cornell.edu/~cristian/Cornell_Movie-Dialogs_Corpus.html), and the timings have gone from a few seconds, to about 80 secs. The bot isn't usable in that state anymore.\r\n\r\nWhat is the best way to handle this? Should I load everything from disk and just keep it in RAM? I've ran the problem to ground, and I see that the most time is spent when it gets all response statements from the DB. I had this issue both with MongoDB and SQLite. (best_match.BestMatch.get method)\r\n\r\nWhat is the best way to tackle this? Should I just create a new Storage adapter that keeps all of the convos in RAM? I'll try to keep my answer general, so it can be committed and used. Let me know your thoughts, and I'll see if I can get better timings by keeping the data structures loaded in RAM. @gunthercox, It is obvious.\r\nAlso, I see how my processor is overloaded, when searching for an answer.\r\n\r\nI'm interested in the industrial way of using this technology.\r\nThe whole problem especially in the database, in particular, mongo?\r\n\r\nThere are a number of other, faster ones, NoSQL, if it makes sense to consider them? @narnikgamarnikus Actually, I looked deeper at the problem. Retrieving data from the tables doesn't take any time at all. (Putting all of the cornell data mentioned above takes about 100 MB, and it's accessed really quickly.)\r\n\r\nThe real issue is finding a close match. Out of the 88 seconds that it took to retrieve an answer, 72 seconds were spent iterating over the statement list and using the comparison functions. logic.best_match.get function. Specifically, the part where it iterates over the statement_list structure. Maybe adding a check with something like, if confidence over some threshold, like .8, then exit the loop and return that statement. This will be more easily generalized as a parameter that can be passed in on startup. Also, @narnikgamarnikus, MongoDB is a NoSQL database, and it's perfectly fine for production projects.\r\n\r\nHowever, if you'd prefer to get away from the storage options available, you can code a storage adapter. It's really not too bad, there's only a handful of methods you need to code. (It's mostly code to connect to your instance.) @sal48, Maybe it makes sense to write in the documentation about the threshold values for storing the number of records, after which the bot starts to slow down significantly? This issue is a problem that I am aware of and working to fix. My plan is to reduce the amount of statements that need to be analysed when searching for a match. To accomplish this I am going to modify the training process so that it categorizes each statement. The categorization process will be flexible and will even allow developers to add their own categorization functions. Here is a quick example of how this will improve performance:\r\n\r\n1. User enters input: \"How are you?\"\r\n2. Chat bot categorizes the input as a `question`.\r\n3. Chat bot adds query parameter that specifies that the returned statements must be categorized as an `answer`. As a result, a much smaller set of possible responses is returned and processing time is reduced. @gunthercox I think that's the correct direction, but the codebase seems pretty far from that point. I'll try experimenting with different confidence thresholds tonight, as the chatbot simply isn't production ready when it takes 80 secs to respond.\r\n\r\n@narnikgamarnikus The threshold value seems to vary on application. For instance, if you're running a chatbot for a company that needs to answer technical troubleshooting issues, it may be permissible for a 30 second response. I want to stand up the chatbot because it's so damn cool, so in my case, I don't want users waiting more than 10ish seconds. I'm gonna add some javascript to my page and possibly just have a timer that shows \"Chatbot is typing...\" while I await the response, so it feels a little more natural.\r\n\r\nI'll report my findings, and we can see what part of my code we'd like to add to the repo. I sure hope the time lag issue is fixed. the timing on my bots is way too much for production. The time it takes to startup alone is a lot!\r\nI really hope to see this fixed. \r\nAnyways, @gunthercox great JOB!!! Truly great job Man!!!! @gunthercox  Hi, if the bot will find a response from all dataset everytime, is it better to make a reprocess after training and filter the statement just need not all when calling `get_response`. Such as `Inverted index`.  Hi, I want to run Chatterbot from a Java program, Which is the best option?\r\n\r\nHow can I achieve that?\r\n\r\n\r\n\r\n @juanpialbano Just to add to what @vkosuri mentioned, it is possible to build a web API that could allow a Java application to post data and get responses from a chat bot. I  want to put it in Production in my job, I developed an api with werkzeug  but there is not suppor for python in the server ... \r\n\r\nI'm trying to make it work with Jython but I have a lot of problems \r\n\r\nHave you used Chatterbot with Jython ?\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n Sorry, I don't have any experience with Jython. I believe if you make a server and then access the chatterbot with custom setup api then you can definitely run chatterbot inside java. \r\nIf there will be a web api , like which produces JSON objects as response then it can be used over multiple platforms.\r\n\r\nI hope this helps. And feel free to ping.\r\nCheers! @gunthercox  sir,\r\n\r\ncan i make the API for chatterbot? @gabru-md What kind of web platform are you imagining? sorry! i mean an API as i discussed above.\r\nIt will give JSON results for every query. So that any Chatterbot can be used with any programming language.\r\ni have it ready. Is your API build using ChatterBot's Django integration or does it use a different framework? mine is simple.\r\n\r\nIt uses node.js for backend and python for response prediction.\r\nsir, you can see it here: [chatterbot-api](https://github.com/gabru-md/chatterbot-api)\r\ni've tried it on localhost though! :P\r\n\r\n#justaBeginner any suggestions sir ? ChatterBot is intended to support the ability for developer to use it in web based APIs. I'm glad that you were able to get this to work for your project.\r\n\r\nRight now I don't think I'm ready to support an additional API example being added to the project.\r\n\r\n@juanpialbano I'm going to close this ticket off. I hope this conversation has served to provide a sufficient response. There are many ways to get software written in different programming languages to communicate with each other.   **Hi; firstly i must commend your work, its amazing! Good job!!\r\n\r\nSo i ran the _tkinter_gui.py_ example perfectly well with no issues. But then i tried to train the bot with an English corpus trainer and ended up with moduleImportError.** \r\n\r\n## Here is the final code i ran\r\n\r\n```\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\r\nimport tkinter as tk\r\ntry:\r\n    import ttk as ttk\r\n    import ScrolledText\r\nexcept ImportError:\r\n    import tkinter.ttk as ttk\r\n    import tkinter.scrolledtext as ScrolledText\r\nimport time\r\n\r\n\r\nclass TkinterGUIExample(tk.Tk):\r\n\r\n    def __init__(self, *args, **kwargs):\r\n        \"\"\"\r\n        Create & set window variables.\r\n        \"\"\"\r\n        tk.Tk.__init__(self, *args, **kwargs)\r\n\r\n        self.chatbot = ChatBot(\r\n            \"GUI Bot\",\r\n            storage_adapter=\"chatterbot.storage.JsonFileStorageAdapter\",\r\n            logic_adapters=[\r\n                \"chatterbot.logic.BestMatch\"\r\n            ],\r\n            input_adapter=\"chatterbot.input.VariableInputTypeAdapter\",\r\n            output_adapter=\"chatterbot.output.OutputAdapter\",\r\n            database=\"database.json\"\r\n        )\r\n        self.chatbot.set_trainer(ChatterBotCorpusTrainer)\r\n        self.chatbot.train('chatterbot.corpus.english')\r\n        \r\n        self.title(\"Chatterbot\")\r\n\r\n        self.initialize()\r\n\r\n    def initialize(self):\r\n        \"\"\"\r\n        Set window layout.\r\n        \"\"\"\r\n        self.grid()\r\n\r\n        self.respond = ttk.Button(self, text='Get Response', command=self.get_response)\r\n        self.respond.grid(column=0, row=0, sticky='nesw', padx=3, pady=3)\r\n\r\n        self.usr_input = ttk.Entry(self, state='normal')\r\n        self.usr_input.grid(column=1, row=0, sticky='nesw', padx=3, pady=3)\r\n\r\n        self.conversation_lbl = ttk.Label(self, anchor=tk.E, text='Conversation:')\r\n        self.conversation_lbl.grid(column=0, row=1, sticky='nesw', padx=3, pady=3)\r\n\r\n        self.conversation = ScrolledText.ScrolledText(self, state='disabled')\r\n        self.conversation.grid(column=0, row=2, columnspan=2, sticky='nesw', padx=3, pady=3)\r\n\r\n    def get_response(self):\r\n        \"\"\"\r\n        Get a response from the chatbot and display it.\r\n        \"\"\"\r\n        user_input = self.usr_input.get()\r\n        self.usr_input.delete(0, tk.END)\r\n\r\n        response = self.chatbot.get_response(user_input)\r\n\r\n        self.conversation['state'] = 'normal'\r\n        self.conversation.insert(\r\n            tk.END, \"Human: \" + user_input + \"\\n\" + \"ChatBot: \" + str(response.text) + \"\\n\"\r\n        )\r\n        self.conversation['state'] = 'disabled'\r\n\r\n        time.sleep(0.5)\r\n\r\n\r\ngui_example = TkinterGUIExample()\r\ngui_example.mainloop()\r\n\r\n```\r\n\r\n## here is the error log\r\n\r\n```\r\nWarning (from warnings module):\r\n  File \"C:\\Users\\foo\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\chatterbot-0.6.1-py3.6.egg\\chatterbot\\storage\\jsonfile.py\", line 26\r\nUnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\foo\\Codes\\AI\\projects\\carl\\tkinter_gui.py\", line 75, in <module>\r\n    gui_example = TkinterGUIExample()\r\n  File \"C:\\Users\\foo\\Codes\\AI\\projects\\carl\\tkinter_gui.py\", line 32, in __init__\r\n    self.chatbot.set_trainer(ChatterBotCorpusTrainer)\r\n  File \"C:\\Users\\foo\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\chatterbot-0.6.1-py3.6.egg\\chatterbot\\chatterbot.py\", line 166, in set_trainer\r\n    self.trainer = training_class(self.storage, **kwargs)\r\n  File \"C:\\Users\\foo\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\chatterbot-0.6.1-py3.6.egg\\chatterbot\\trainers.py\", line 101, in __init__\r\n    from .corpus import Corpus\r\n  File \"C:\\Users\\foo\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\chatterbot-0.6.1-py3.6.egg\\chatterbot\\corpus\\__init__.py\", line 6, in <module>\r\n    from chatterbot_corpus import Corpus\r\nModuleNotFoundError: No module named 'chatterbot_corpus'\r\n```\r\n\r\ni am actually planning to integrate this bot in a live project as a replacement of a Chatscript server, your response and support will go a looong long way. Thanks Okay, i'll follow those instructions. Thanks!     \r\n   Hi, \r\n   \r\n   When the chatbot starts to work and answers the questions of different users, how does the chatbot learn? \r\n\r\nHow does the chatbot get **feedback**? \r\n\r\nHow does the chatbot know if the answer was correct or not?\r\n   \r\n Also\r\n   \r\n What are the best practices for building a chatbot? How should it be configured?\r\n   \r\n Should I use Adapters, Filters, etc?\r\n\r\n @vkosuri thanks but I have doubt, How does the Chabot learn ? \r\n\r\nhere it doesn't explain so much : [ http://chatterbot.readthedocs.io/en/stable/#how-chatterbot-works](url)\r\n\r\nWhen the Chabot makes a response, it stores the request-response in the database for future queries?\r\nHow does he know if a request-response was right o wrong so he can use it in the future ? \r\n\r\nThanks in advance\r\n\r\n\r\n\r\n\r\n\r\n Hi Query on the  [response relationship](http://chatterbot.readthedocs.io/en/stable/conversations.html#statement-response-relationship). does the statement have user affinity. for e.g. User A Says Statement 1, User A Says Statement 2 , User B Says statement 3.\r\nStored as Statement 1 , Statement_2 ::: In_response_To Statement_1 , Statement_3 :: in_Response_To_Statement_2.\r\nIn here the user affinity is lost , correct? how is it typically handled by other users, do you format , 1 and 2 as 1 statement , so that indexing happens as Statement1+Statement 2 , Statement3 :: in_response_to_Statement1_Statement2 ?  This pull request is currently a work-in-progress.\r\n\r\nFor #811 to create consistent sessions that are tracked in the database instead of in memory.\r\nCloses #513 by replacing it.  code :\r\n``` Python\r\nfrom chatterbot import ChatBot\r\nchatbot = ChatBot(\r\n    'Ron Obvious',\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer'\r\n)\r\nchatbot.train(\"chatterbot.corpus.english\")\r\nchatbot.get_response(\"Hello, how are you today?\")\r\n```\r\nerror : \r\n\r\n``` Bash\r\npython test.py \r\nTraceback (most recent call last):\r\n  File \"test.py\", line 1, in <module>\r\n    from chatterbot import ChatBot\r\nImportError: No module named chatterbot\r\n``` i met the same problem today,  and i had upgraded chatterbot ,but i am unable to get chatterbot version yet. when using \"from chatterbot import ChatBot\", Python still show importError\uff1a No module named chatterbot.\r\n(Windows 10 64bit, python3.5) \r\nMicrosoft Windows [version 10.0.14393]\r\n(c) 2016 Microsoft Corporation\r\n## \u30101\u3001i install chatterbot via CMD,use pip install./chatterbot\u3011\r\n``` Bash\r\nC:\\WINDOWS\\system32>d:\r\nD:\\>cd D:\\Program Files (x86)\\Python35-32\\Lib\\site-packages\r\nD:\\Program Files (x86)\\Python35-32\\Lib\\site-packages>pip install ./chatterbot\r\n\r\nProcessing d:\\program files (x86)\\python35-32\\lib\\site-packages\\chatterbot\r\n  Requirement already satisfied (use --upgrade to upgrade): ChatterBot==0.7.0 from file:///D:/Program%20Files%20%28x86%29/Python35-32/Lib/site-packages/chatterbot in d:\\program files (x86)\\python35-32\\lib\\site-packages\r\nRequirement already satisfied: chatterbot-corpus<1.1.0,>=1.0.0 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from ChatterBot==0.7.0)\r\nRequirement already satisfied: jsondatabase<1.0.0,>=0.1.7 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from ChatterBot==0.7.0)\r\nRequirement already satisfied: nltk<4.0.0,>=3.2.0 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from ChatterBot==0.7.0)\r\nRequirement already satisfied: pymongo<4.0.0,>=3.3.0 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from ChatterBot==0.7.0)\r\nRequirement already satisfied: python-twitter<4.0.0,>=3.0.0 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from ChatterBot==0.7.0)\r\nRequirement already satisfied: SQLAlchemy<1.2,>=1.1 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from ChatterBot==0.7.0)\r\nRequirement already satisfied: ruamel.yaml<=0.15 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from chatterbot-corpus<1.1.0,>=1.0.0->ChatterBot==0.7.0)\r\nRequirement already satisfied: six in d:\\program files (x86)\\python35-32\\lib\\site-packages (from nltk<4.0.0,>=3.2.0->ChatterBot==0.7.0)\r\nRequirement already satisfied: future in d:\\program files (x86)\\python35-32\\lib\\site-packages (from python-twitter<4.0.0,>=3.0.0->ChatterBot==0.7.0)\r\nRequirement already satisfied: requests in d:\\program files (x86)\\python35-32\\lib\\site-packages (from python-twitter<4.0.0,>=3.0.0->ChatterBot==0.7.0)\r\nRequirement already satisfied: requests-oauthlib in d:\\program files (x86)\\python35-32\\lib\\site-packages (from python-twitter<4.0.0,>=3.0.0->ChatterBot==0.7.0)\r\nRequirement already satisfied: idna<2.6,>=2.5 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from requests->python-twitter<4.0.0,>=3.0.0->ChatterBot==0.7.0)\r\nRequirement already satisfied: certifi>=2017.4.17 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from requests->python-twitter<4.0.0,>=3.0.0->ChatterBot==0.7.0)\r\nRequirement already satisfied: urllib3<1.22,>=1.21.1 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from requests->python-twitter<4.0.0,>=3.0.0->ChatterBot==0.7.0)\r\nRequirement already satisfied: chardet<3.1.0,>=3.0.2 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from requests->python-twitter<4.0.0,>=3.0.0->ChatterBot==0.7.0)\r\nRequirement already satisfied: oauthlib>=0.6.2 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from requests-oauthlib->python-twitter<4.0.0,>=3.0.0->ChatterBot==0.7.0)\r\n```\r\n## \u30102\u3001after successfully installed chatterbot, i used \"python -m chatterbot --version\" to get version  imformation, but failed\u3011\r\n``` Bash\r\nD:\\Program Files (x86)\\Python35-32\\Lib\\site-packages>cd..\r\nD:\\Program Files (x86)\\Python35-32\\Lib>cd..\r\nD:\\Program Files (x86)\\Python35-32>python -m chatterbot --version\r\nD:\\Program Files (x86)\\Python35-32\\python.exe: No module named chatterbot\r\n\r\nD:\\Program Files (x86)\\Python35-32>cd D:\\Program Files (x86)\\Python35-32\\Lib\\site-packages\r\n```\r\n## \u30103\u3001Even after i upgrade chatterbot, it still couldn't show the version imformation\u3011\r\n``` Bash\r\nD:\\Program Files (x86)\\Python35-32\\Lib\\site-packages>pip install --upgrade chatterbot\r\nRequirement already up-to-date: chatterbot in d:\\program files (x86)\\python35-32\\lib\\site-packages\r\nRequirement already up-to-date: nltk<4.0.0,>=3.2.0 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from chatterbot)\r\nRequirement already up-to-date: chatterbot-corpus<1.1.0,>=1.0.0 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from chatterbot)\r\nRequirement already up-to-date: python-twitter<4.0.0,>=3.0.0 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from chatterbot)\r\nRequirement already up-to-date: SQLAlchemy<1.2,>=1.1 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from chatterbot)\r\nRequirement already up-to-date: jsondatabase<1.0.0,>=0.1.7 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from chatterbot)\r\nRequirement already up-to-date: pymongo<4.0.0,>=3.3.0 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from chatterbot)\r\nRequirement already up-to-date: six in d:\\program files (x86)\\python35-32\\lib\\site-packages (from nltk<4.0.0,>=3.2.0->chatterbot)\r\nRequirement already up-to-date: ruamel.yaml<=0.15 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from chatterbot-corpus<1.1.0,>=1.0.0->chatterbot)\r\nRequirement already up-to-date: future in d:\\program files (x86)\\python35-32\\lib\\site-packages (from python-twitter<4.0.0,>=3.0.0->chatterbot)\r\nRequirement already up-to-date: requests in d:\\program files (x86)\\python35-32\\lib\\site-packages (from python-twitter<4.0.0,>=3.0.0->chatterbot)\r\nRequirement already up-to-date: requests-oauthlib in d:\\program files (x86)\\python35-32\\lib\\site-packages (from python-twitter<4.0.0,>=3.0.0->chatterbot)\r\nRequirement already up-to-date: urllib3<1.22,>=1.21.1 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from requests->python-twitter<4.0.0,>=3.0.0->chatterbot)\r\nRequirement already up-to-date: chardet<3.1.0,>=3.0.2 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from requests->python-twitter<4.0.0,>=3.0.0->chatterbot)\r\nRequirement already up-to-date: idna<2.6,>=2.5 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from requests->python-twitter<4.0.0,>=3.0.0->chatterbot)\r\nRequirement already up-to-date: certifi>=2017.4.17 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from requests->python-twitter<4.0.0,>=3.0.0->chatterbot)\r\nRequirement already up-to-date: oauthlib>=0.6.2 in d:\\program files (x86)\\python35-32\\lib\\site-packages (from requests-oauthlib->python-twitter<4.0.0,>=3.0.0->chatterbot)\r\n\r\nD:\\Program Files (x86)\\Python35-32\\Lib\\site-packages>\r\n``` Then\uff0c i met the same problem like@harshalgaydhankar, python3.5 show importError,\" No module named chatterbot.\"\r\njust like:\r\n```\r\nPython 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:38:48) [MSC v.1900 32 bit (Intel)] on win32\r\nType \"copyright\", \"credits\" or \"license()\" for more information.\r\n>>> from chatterbot import ChatBot\r\nTraceback (most recent call last):\r\n  File \"<pyshell#0>\", line 1, in <module>\r\n    from chatterbot import ChatBot\r\nImportError: No module named 'chatterbot'\r\n```\r\n\r\n\r\n Can you import _any_ python packages that have been installed?\r\nI'm wondering if this isn't an issue that is specific to ChatterBot.\r\n\r\nFor example, if you run:\r\n```\r\npip install nose --upgrade\r\n```\r\nand then try to import it:\r\n```\r\nPython 3.5.1 (v3.5.1:37a07cee5969, Dec  6 2015, 01:38:48) [MSC v.1900 32 bit (Intel)] on win32\r\nType \"copyright\", \"credits\" or \"license()\" for more information.\r\n>>> import nose\r\n``` i import nose successfully , @gunthercox \r\n\r\nand i tried relative import, but also failed, @vkosuri \r\n\r\nthanks for your help, i  am totally a newcomer to chatterbot and python.\r\n```\r\n>>> from .chatterbot import ChatBot\r\nTraceback (most recent call last):\r\n  File \"<pyshell#7>\", line 1, in <module>\r\n    from .chatterbot import ChatBot\r\nSystemError: Parent module '' not loaded, cannot perform relative import\r\n>>> \r\n``` ```\r\n>>> import sys\r\n>>> print(sys.path)\r\n['', 'D:\\\\Program Files (x86)\\\\Python35-32\\\\Lib\\\\idlelib', 'D:\\\\Program Files (x86)\\\\Python35-\r\n\r\n32\\\\python35.zip', 'D:\\\\Program Files (x86)\\\\Python35-32\\\\DLLs', 'D:\\\\Program Files (x86)\\\\Python35-\r\n\r\n32\\\\lib', 'D:\\\\Program Files (x86)\\\\Python35-32', 'D:\\\\Program Files (x86)\\\\Python35-32\\\\lib\\\\site-packages']\r\n\r\n>>> \r\n```\r\n@vkosuri \r\n thanks, only python3.5 installed in my PC What do you get as an output from the command `pip freeze` ? my god~~i am so sorry , i made a stupid mistake, after i download the \"ChatterBot-master\" from git,  i used this folder directly.Instead, i should copy the subfolder\"chatterbot\" in \"ChatterBot-master\" . No problem, it happens \u00af\\_(\u30c4)_/\u00af  @vkosuri sir,\r\nthere are a lot of typos in the `testing.rst`. Kindly remove it, I'll restructure it and send a PR for the same.\r\n\r\nThanks sir.\r\n  @vkosuri Thank you for creating this pull request, I really appreciate it. I've voiced concerns about the readability of list comprehension statements in the past and after looking over the changes here my concerns have been re-raised. I think I'd like to keep the for loops in ChatterBot as they stand so that the code remains as straight forward and easy-to-understand as possible for potential contributes.  @gunthercox Hi, will you do a enhancement for this purpose? @nggary I'm not planning on doing one.  I wonder if I can interact with bot and it recognize several words or phrases that fire an Action or recognize an Intention that interact with external source and give me a response. \r\n\r\neg:\r\nUser: How about the weather today?\r\nBot : <city>,<state> ... forecast today.\r\n\r\nor: (intention) \r\nUser: I want to run outside today.\r\nBot : It may rain today.\r\n\r\nor (action/execution)\r\nUser: Turn on living room lights.\r\nBot: Sure ! A minute!\r\nBot: Done, enjoy!\r\n\r\nI don't know if LogicAdapter, StorageAdapter either I/OAdapter is the right place to put this logic. \r\nMaybe some kind of Intention/ActionAdapter, that complements an kind of specific answers that have an special blank space to fill in with results from integration.\r\n\r\nThanks.\r\n\r\n\r\n @vkosuri nice hack! Issue #482 for is very specific, anyway I'll give a try! \r\nBy the way, my initial idea would be to have something apart from the conversation,  but its ok, using your hack, it can be extended with some metadata inside it.\r\n\r\nWhat you think ?\r\n\r\neg:.\r\n``` Python\r\nbot.train([\r\n    'Current weather in London',\r\n    '{\"adapter\":\"chatterbot.logic.SpecificResponseAdapter\"},\r\n    'Have you read the documentation?',\r\n    'No, I have not',\r\n    '{ \"text\" : \"This should help get you started\", \"url\": \"http://chatterbot.rtfd.org/en/latest/quickstart.html\"}'\r\n])\r\n```\r\n\r\n\r\n\r\n\r\n  @vkosuri I agree that this formatting does improve the readability of the list comprehension. Feel free to create a pull request. :+1:    ```python\r\nself.confidence = AbstractBaseStatement.confidence\r\n```\r\nwill adding this line to the Statement Class work?\r\nSince all it needs is a \r\n````python\r\nself.confidence\r\n````\r\nfor itself. If this helps! XD I'm going to close this off. This doesn't actually accomplish what I wanted.  Hi friends, does anyone experienced this problem :\r\n\r\nI tried to make the chatbot to be used by multiple user \r\n\r\n``` Python\r\nclass SystemSession(object):\r\n    def __init__(self, **kwargs):\r\n        self.agent_id = kwargs.get('agent_id')\r\n        self.session_id = kwargs.get('session_id')\r\n        self.default_session_id = kwargs.get('default_session_id')\r\n\r\n    def process(self):\r\n        existing_session = Database.find_one('system_session', {\"agent_id\": self.agent_id})\r\n        if not existing_session:\r\n            session_id = self.create()\r\n        else:\r\n            session_id = existing_session['session_id']\r\n        return session_id\r\n\r\n    def get_all(self):\r\n        pass\r\n\r\n    def create(self):\r\n        default_session = self.default_session_id\r\n        data = {\r\n            \"agent_id\": self.agent_id,\r\n            \"session_id\": default_session,\r\n            \"created_at\": datetime.now(),\r\n            \"updated_at\": datetime.now()\r\n        }\r\n        Database.insert(collection='system_session', data=data)\r\n        return default_session\r\n```\r\nBy using code above, when I do json post and retrieve the session_id, the session_id is duplicated, means that the code generates the same session_id instead of unique one.. any ideas ?\r\n\r\nFYI for this code I use the self.bot.default_session.id_string , as it generates new session. but I just realized when I post from the same PC by passing email and utterance , the bot code generates identical session_id string which makes it duplicated @bilalbayasut The default session id will be the same for each instance of a chat bot. You will want to generate a new id for each \"user session\" (however you are tracking that) that is created. Ok I have used the conversationManager, but the weird thing is when I use the ``generate_response()`` function and add ``seession_id`` within it, somehow the ``generate_base_query`` is failed.. somehow it looks like the session_id is None\r\n\r\n```Bash\r\n File \"/home/bilal/.local/lib/python3.6/site-packages/chatterbot/storage/storage_adapter.py\", line 41, in generate_base_query\r\n    self.base_query = filter_instance.filter_selection(chatterbot, session_id)\r\n  File \"/home/bilal/.local/lib/python3.6/site-packages/chatterbot/filters.py\", line 31, in filter_selection\r\n```\r\nso that it fails in this line, in chatterbot/filters.py : - \r\n```Python\r\n    if session.conversation.empty():\r\n```\r\n```Bash\r\nAttributeError: 'NoneType' object has no attribute 'conversation'\r\n```\r\nand after I check, the session = {} is empty..\r\n\r\nI don't understand, where Chatterbot save its sessions\r\n\r\n\r\nUPDATE : \r\nI just get it worked by modifying the session.get() function in chatterbot/conversation/session.py\r\n```Python\r\n    def get(self, session_id, default=None):\r\n        \"\"\"\r\n        Return a session given a unique identifier.\r\n        \"\"\"\r\n        session = Session()\r\n        self.sessions[session_id] = session\r\n    \r\n        return self.sessions.get(str(session_id), default)\r\n```\r\nBut I don't like modifying the core of the chatterbot.. any ideas fellas @vkosuri ? @gunthercox as the founder, what do you think ? @bilalbayasut I'm currently working on changes that will allow \"sessions\" to be stored in the database. They are currently only stored in memory. I'm still working on the changes but they should definitely resolve this problem.  I have an issue with encodings, I can't use the str() function to convert the response to a string without getting errors and I can't use an encode function, because the Statement is not a string.   when using a feedback chatterbot it shows the following error:\r\n\r\n```Bash\r\nTraceback (most recent call last):\r\nFile \"/Applications/XAMPP/xamppfiles/htdocs/chat1.cgi\", line 65, in <module>\r\n    bot.learn_response(response1, input_statement)\r\n  File \"/Users/yuvikakoul/anaconda/lib/python2.7/site-packages/chatterbot/chatterbot.py\", line 145, in learn_response\r\n    statement.add_response(\r\nAttributeError: 'str' object has no attribute 'add_response'\r\n``` it works when i try to run it stand alone, but i need it to work on the server. How can i do that ? ```python\r\n#!/Users/yuvikakoul/anaconda/bin/python\r\n# -*- coding: utf-8 -*-\r\n\r\nimport cgi\r\n\r\ndef htmlTop():\r\n    print(\"\"\"Content-type:text/html\\n\\n\r\n            <!DOCTYPE html>\r\n                    <meta charset=\"utf-8\"/>\r\n                    <title>chat</title>\r\n                </head>\r\n                <body>\"\"\")\r\n\r\ndef htmlTail():\r\n    print(\"\"\"</body>\r\n        </html>\"\"\")\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    try:\r\n        htmlTop()\r\n\r\n        from chatterbot import ChatBot\r\n\r\n        import logging\r\n\r\n        bot = ChatBot(\"Terminal\",\r\n            storage_adapter=\"chatterbot.storage.JsonFileStorageAdapter\",\r\n\r\n        )\r\n        def getdata1():\r\n            formData = cgi.FieldStorage()\r\n            text1 = formData.getvalue('text1')\r\n            text = formData.getvalue('text')\r\n            text2 = formData.getvalue('text2')\r\n            print(text)\r\n            print(text1)\r\n            print(text2)\r\n            def get_feedback():\r\n              if 'Yes' in text1 :\r\n                  return False\r\n              elif 'No' in text1 :\r\n                  return True\r\n              else:\r\n                  print('\\n\\nPlease type either \"Yes\" or \"No\"')\r\n                  return get_feedback()\r\n            bol=get_feedback()\r\n            if bol :\r\n              bot.learn_response(text2, text)\r\n        getdata1()\r\n\r\n        htmlTail()\r\n    except:\r\n        cgi.print_exception()\r\n``` I have to get the input from a Html page, so it will be a string, but how can i convert it into a statement object  Problem solved, added this\r\nif bol :\r\n              text3 = bot.input.process_input_statement(text2)\r\n              text4 = bot.input.process_input_statement(text)\r\n              bot.learn_response(text3, text4)  Is this something you're gonna tackle? Or do you wanna farm out the work?\r\n\r\nAlso, are you talking about from a code perspective, to inform people about what filters and things they want to use? Or do you mean from a slightly higher, theoretical perspective, that talks about the steps from a scholastic approach? (Lots of questions, I know.)  When i try to run chatterbot on the local server it shows this error:\r\n\r\n[nltk_data] Error loading stopwords: [nltk_data] Error loading wordnet: [nltk_data] Error loading punkt: [nltk_data] Error loading vader_lexicon\r\n\r\nAlong with it, it also shows the correct response.\r\n i have downloaded the files in my system but i dont know about the server. yes i have all the files mentioned in the error on running the above commands i get this output:\r\n['/Users/yuvikakoul/nltk_data', '/usr/share/nltk_data', '/usr/local/share/nltk_data', '/usr/lib/nltk_data', '/usr/local/lib/nltk_data']\r\n\r\nwhich directory am i supposed to check it contains all the files, still i'll try downloading all the corpora files  Sure, almost done, there is a branch sql-doc, I`ll update docs and make a PR  Hi there I downloaded a corpus json file has data about planets. when I imported it in train function and talks about any planet it doesn't speak.\r\nCan anyone help me on this.. Thanks.. !! \r\n\r\n![image](https://user-images.githubusercontent.com/5066436/27508488-c0d44d82-5903-11e7-9a46-b57a4be8322c.png)\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/5066436/27508460-fbdcac18-5902-11e7-9441-af5a6c42a2b5.png)\r\n Yep sure mate.. thanks will try .. but if I wanna du like wat I asked say I feeded info about something and if I ask a question it should frame or through output based on that soo I hope you understand wat I have said so where do I start?? Can you shed some light ?? Thanks..  I feel like I can't understand how to write a training class in ur docs.. can you please tell a bit clear .. and thanks custom QA corpus worked \ud83d\ude0a Thanks I will look into it .. will close the issue now thanks . .. :)   Hi guys,\r\n\r\nI'm adding chatterbot to a server, so people can interact with it from my website. The server which will host the chatterbot (2 GB RAM, 2 cores) runs much slower than my home computer, and the kernel seems to kill my chatbot after a few minutes of use. (It usually responds to about 3-4 statements before getting killed.) Further, I'm having a hard time profiling my chatterbot to find out exactly where the CPU resources are causing the kernel to pull the plug on it. I'm relatively new to python, and I'd like to know what kind of tools you guys have been using to profile performance issues. This is how I'm initializing my instance:\r\n\r\n```\r\n# Create a new ChatBot instance\r\nbot = ChatBot('Ava',\r\n    logic_adapters=[\r\n        {\r\n            \"import_path\": \"chatterbot.logic.BestMatch\",\r\n\t    \"statement_comparison_function\": \"chatterbot.comparisons.levenshtein_distance\",\r\n            \"response_selection_method\": \"chatterbot.response_selection.get_first_response\"\r\n        }\r\n    ],\r\n    filters=[\r\n        'chatterbot.filters.RepetitiveResponseFilter'\r\n    ],\r\n\t# Gitter information\r\n\tinput_adapter=\"chatterbot.input.Gitter\",\r\n    gitter_api_token=\"***\",\r\n    gitter_room=\"59434886d73408ce4f67af23\",\r\n    gitter_only_respond_to_mentions=False,\r\n\toutput_adapter=\"chatterbot.output.Gitter\",\r\n\r\n    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',\r\n    database='ava_movie',\r\n\tdatabase_uri='127.0.0.1:27017',\r\n\ttrainer='chatterbot.trainers.ListTrainer'\r\n)\r\n```\r\nThe chatbot will take a good amount of time to respond, and after a few minutes of slow responses, the kernel kills my bot. I trained the bot with the Cornell Movie Dialog Corpus (https://www.cs.cornell.edu/~cristian/Cornell_Movie-Dialogs_Corpus.html), which contains roughly 220k conversations, and I don't think the problem is with the amount of conversations used.\r\n\r\nI've tried toggling some of the logic adapters, but those don't seem to have much of an effect.\r\n\r\nIs there any profiling tools/debug configs you guys use specifically for chatterbot? If not, is there some general tools for profiling python programs?  I'm going to close this ticket off. I had thought this functionality was going to be needed in order to get the SQL Storage adapter to work but the problems that were occurring there have been resolved. I'm considering the possibility of removing the `extra_data` parameter, however I think a better way to provide similar functionality would be to allow developers to extend the existing models for statements so that they can add additional fields and store the values properly in the database.  `python -m chatterbot --version`\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python2.7/runpy.py\", line 174, in _run_module_as_main\r\n    \"__main__\", fname, loader, pkg_name)\r\n  File \"/usr/lib/python2.7/runpy.py\", line 72, in _run_code\r\n    exec code in run_globals\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/__main__.py\", line 8, in <module>\r\n    print(chatterbot.__version__)\r\nAttributeError: 'module' object has no attribute '__version__'\r\n``` @yazdat \r\nto get the version number try:\r\n```sh\r\nimport chatterbot\r\nchatterbot.__version__\r\n```\r\n\r\nThis should possibly result in an outcome like:\r\n\r\n```sh\r\n'0.6.0'\r\n```\r\n Thanks for the response  gabru-md and  vkosuri. \r\n\r\nimport chatterbot\r\nchatterbot.__version__\r\n\r\nworked fine. I am running 0.6.1\r\nI'm experimenting with chatterbot to use on a robot. I'm sure I will have more questions. I hope to contribute where I can. even for me this **python -m chatterbot --version** at beginning then I used **chatterbot.__version__** to find my version ...   I saw that people requested Gitter examples, and some were added. However, I haven't been able to get the bot to connect to Gitter, and when looking at the constructor, it looks so basic. No where in the examples do we pass an OAuth key or secret key. Has anyone been able to connect to Gitter using simply the API key? Here's my sample below attempting to connect to a room called 'meta-game'. (I blocked out my API key for obvious reasons.)\r\n\r\n```\r\n# Create a new ChatBot instance\r\nbot = ChatBot('Ava',\r\n    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',\r\n    logic_adapters=[\r\n        {\r\n            \"import_path\": \"chatterbot.logic.BestMatch\"\r\n        }\r\n    ],\r\n    filters=[\r\n        'chatterbot.filters.RepetitiveResponseFilter'\r\n    ],\r\n\t# Gitter information\r\n    input_adapter=\"chatterbot.input.Gitter\",\r\n    gitter_api_token=\"[my_api_key]\",\r\n    gitter_room=\"meta-game\",\r\n    gitter_only_respond_to_mentions=True,\r\n    output_adapter=\"chatterbot.output.Gitter\",\r\n\r\n    database='ava_gitter',\r\n    database_uri='127.0.0.1:27017',\r\n    trainer='chatterbot.trainers.ListTrainer'\r\n)\r\n```\r\nThe above code fails to connect to Gitter with the failure code:\r\n\r\n```chatterbot.input.gitter.HTTPStatusException: u'404 status code recieved'```\r\n\r\nHas anyone been successful with Gitter? Am I missing something obvious?\r\n I figured this out, and there seems to be a bug when joining a room. I know the room id I wanted to join, so I hardcoded the value in input.gitter.py. I can run this to ground, if anyone else has an issue with it, and they don't know python code well. (The issue seems to be that the call was a post, where only a get is supported to get room information.) Sure. After I finish profiling chatterbot to figure out my performance issues, I can make a general fix for the Gitter adapter.\r\n\r\nI would like someone else to confirm that they're having issues. Basically, I tried to use the current chatterbot on master, and I was getting 404's when connecting.  So I was just testing ChatterBot, and made a simple Discord Bot. I found the following logs in my files:\r\n\r\n```\r\n[%] Query: \"What are you?\"\r\n[%] Response: \"Who? Who is but a form following the function of what\"\r\n[%] Query: \"Who are you\"\r\n[%] Response: \"Who? Who is but a form following the function of what\"\r\n```\r\n\r\nI also found quite a bit of grammar mistakes, responses that made no sense, etc. Is there any place I can contribute to this, or I can go ahead and manually fix. It would be a pain to have to manually override this by using a list.\r\n\r\nEdit: I maybe confused, but I cannot create my own corpus bank in JSON if I am using MongoDB right?  i am trying to add new corpus to train chatterbot but i have these errors \r\nTraceback (most recent call last):\r\n```\r\n  File \"C:\\Users\\user1\\Desktop\\py\\mmm.py\", line 23, in <module>\r\n    \"C:\\Python27\\Lib\\site-packages\\chatterbot_corpus\\data\\english\\bank.corpus.js\r\non\"\r\n  File \"C:\\Python27\\chatterbot\\trainers.py\", line 114, in train\r\n    corpus_data = self.corpus.load_corpus(corpus)\r\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot_corpus\\corpus.py\", line 71, in\r\nload_corpus\r\n    corpus = self.read_corpus(file_path)\r\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot_corpus\\corpus.py\", line 39, in\r\nread_corpus\r\n    with io.open(file_name, encoding='utf-8') as data_file:\r\nIOError: [Errno 22] Invalid argument: 'C:\\\\Python27\\\\Lib\\\\site-packages\\\\chatterbot_corpus\\\\data\\\\english\\x08ank.corpus.json'\r\n\r\nthis the path for corpus:\r\nchatterbot.train(\r\n\"C:\\Python27\\Lib\\site-packages\\chatterbot_corpus\\data\\english\\bank.corpus.json\"\r\n)\r\n``` Your issue is pin-pointed with this statement right here:\r\n```'IOError: [Errno 22] Invalid argument: 'C:\\\\Python27\\\\Lib\\\\site-packages\\\\chatterbot_corpus\\\\data\\\\english\\x08ank.corpus.json'```\r\n\r\nYou can solve this with:\r\n`chatterbot.train(r'C:\\Python27\\Lib\\site-packages\\chatterbot_corpus\\data\\english\\bank.corpus.json')` i try chatterbot.train(r'C:\\Python27\\Lib\\site-packages\\chatterbot_corpus\\data\\english\\bank.corpus.json') but it gives me the same error Q&A sample corpus I was able to add and it worked fine.. used the same syntax wat described in the docs ...   Can  chatterbot handle the nested json data and get the response on the basis of ``primary key``?\r\nInternal keys could be same. Like in sample below: ``key1``, ``key2`` will have same internal key parms.\r\n\r\n```Json\r\n{\r\n  \"key1\": {\r\n    \"details\": [\r\n      { \"name\" : \"xxx\",\r\n         \"surname\" : \"yyy\"\r\n      }]\r\n  },\r\n  \"key2\": {\r\n    \"details\": [\r\n      { \"name\" : \"xxx\",\r\n         \"surname\" : \"yyy\"\r\n      }]\r\n  }\r\n}\r\n```  I want to perform a FTP operation on the basis of input data.\r\nFunction performing is task is there.\r\n\r\nHow to call that function.  conversation will be like:\r\n\r\n```Bash\r\nchatbot.get_response(\"I am having some alarms on node\")\r\nresponse - \"do you want me to take db backup. Yes/No\"\r\nchatbot.get_response(\"Yes\")\r\nreponse - \"please wait, I'll notify once backup done\"\r\n```\r\nNow, here when user give \"Yes\" how will I call the FTP backup function\r\nAlso, that operation will take time. \r\n\r\nSo do I proceed with thread approach, and notify once operation will be done\r\nOr can I make chatterBot inactive, till the time operation completes.\r\n\r\nDo i have to write a separate logical adapter for this, or we have inbuilt support for calling functions on the basis of input @decode007 \r\nI would suggest using `threading` as an option. Because we know that Python does not provide an Asynchronous model for programming just like NodeJS. \r\nIt does not work on callbacks and hence managing time would be a problem in your case.\r\n\r\nYou can create threads corresponding to different works that you want to do.\r\nt1 = Thread() to run ChatBot\r\nt2 = Thread() to run the Backup process.\r\n\r\nand then creating 'the condition' to operate between the two threads.\r\n\r\nThreading will help you establish an asynchronous model to perform the backup task and you'll not have to keep ChatBot inactive.\r\n\r\nHope it helps.\r\n:)   1. Can you please shed some light on how chatter bot training works and how it chooses the utterance for a response.\r\n\r\nI mean, do you use Neural networks, ML, deep learning or just some rule based (string distance -\r\n levenshtein distance) methodologies?\r\n\r\n2. Is it contextual?\r\n\r\nThanks,\r\nYuval So I just started delving into the backend, and I can share what I know with you. If you wanted to know the exact lines of code, you can find the relevant code in chatterbot.generate_response method. Basically, when you setup your chatbot instance, you should setup the logic adapters you want to use:\r\n\r\n```\r\nbot = ChatBot('Ava',\r\n    logic_adapters=[\r\n        {\r\n            \"import_path\": \"chatterbot.logic.BestMatch\",\r\n\t    \"statement_comparison_function\": \"chatterbot.comparisons.levenshtein_distance\",\r\n            \"response_selection_method\": \"chatterbot.response_selection.get_first_response\"\r\n        }\r\n    ],\r\n    filters=[\r\n        'chatterbot.filters.RepetitiveResponseFilter'\r\n    ]\r\n)\r\n```\r\n\r\nIn the above snippet, I use Levenshtein Distance for statement comparison, but I also use the Best Match algorithm for lookups, as well a last adapter for response selection. These logic adapters will be used after the preprocessor code (trim white space, escape chars, anything else you added) is executed.\r\n\r\nHope this helps!  Thanks for your efforts. I believe this will help a lot of less experience users like me.\r\n\r\nI faced a trouble to follow the current tutorial. Then, I used the modify Django example and follow the tutorial from django website to make it run.  @gunthercox Please keep us posted on this. Currently, training using this app is somewhat unclear...Thanks. What is the status of this @gunthercox ? I was setting up my chatterbot to work with gitter, but that won't actually suit my needs. I'll be setting up the chatterbot as a django app this weekend.\r\n\r\nIf needed, I can either provide feedback behind what portions are currently unclear, or I can add comments to the current codebase. What would be more beneficial? Adding how add custom adaptors and configure them within django would be helpful, especially if you could provide examples on custom logic and storage adaptors. Yup, as @yousifa mentioned, the docs in the website are great for getting chatterbot integrated with Django: http://chatterbot.readthedocs.io/en/stable/django/index.html. However, I was a little lost immediately after.\r\n\r\nAfter syncing  the database for chatterbot, \u2018python manage.py migrate django_chatterbot\u2019, what is the next step? I can launch the django server, but I don\u2019t know where to initialize the chatterbot instance as my own. (Naming the chatbot, setting up the logic processors, filters, etc.) It seems that the views.py inside of django_chatterbot  folder contains the API endpoint, but I don\u2019t know where to customize the code to ensure it makes it to my customized chat bot. How is this coming along @gunthercox? I'm having issues setting up API Authorization from a separate server. (I want to create a section to allow users to interact with my chatbot from my blog, meta-game.org, hosted on a separate server.)\r\n\r\nThe easiest way to setup authorization seems to be setting up a [CSRF Token](https://docs.djangoproject.com/en/1.10/ref/csrf/), but I can't seem to get that to work. How have you worked with django and chatterbot? Was the django application hosting the html files that interacted with the bot, or did you setup an API that allows people to communicate with it from anywhere? Did you run into issues with CSRF Tokens? @sal48 I haven't started work on it yet.\r\n\r\nIt sounds like you need to allow cross-domain requests to the API. There is a number of ways to do this. I highly recommend the `django-cors-headers` package for achieving this: https://github.com/ottoyiu/django-cors-headers/   I installed everything as the ChatterBot site says, but still gets this error.\r\n```Bash\r\n> /usr/local/lib/python3.5/dist-packages/chatterbot/storage/jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\nTraceback (most recent call last):\r\n  File \"terminal_example.py\", line 20, in <module>\r\n    database=\"../database.db\"\r\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 84, in __init__\r\n    self.initialize()\r\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 94, in initialize\r\n    nltk_download_corpus('corpora/wordnet')\r\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/utils.py\", line 118, in nltk_download_corpus\r\n    find(resource_path)\r\n  File \"/usr/local/lib/python3.5/dist-packages/nltk/data.py\", line 640, in find\r\n    return find(modified_name, paths)\r\n  File \"/usr/local/lib/python3.5/dist-packages/nltk/data.py\", line 626, in find\r\n    return ZipFilePathPointer(p, zipentry)\r\n  File \"/usr/local/lib/python3.5/dist-packages/nltk/compat.py\", line 221, in _decorator\r\n    return init_func(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/nltk/data.py\", line 473, in __init__\r\n    zipfile = OpenOnDemandZipFile(os.path.abspath(zipfile))\r\n  File \"/usr/local/lib/python3.5/dist-packages/nltk/compat.py\", line 221, in _decorator\r\n    return init_func(*args, **kwargs)\r\n  File \"/usr/local/lib/python3.5/dist-packages/nltk/data.py\", line 992, in __init__\r\n    zipfile.ZipFile.__init__(self, filename)\r\n  File \"/usr/lib/python3.5/zipfile.py\", line 1026, in __init__\r\n    self._RealGetContents()\r\n  File \"/usr/lib/python3.5/zipfile.py\", line 1093, in _RealGetContents\r\n    raise BadZipFile(\"File is not a zip file\")\r\nzipfile.BadZipFile: File is not a zip file\r\n```\r\n\r\n\r\nI've tried reinstalling everything, but the error has already been reinstalled a thousand times the ChatterBot lib and ntlk and continues with this error.\r\nThe error happens in python2 and python3\r\nCan someone help me? But I already tried to delete the nltk and install, but the error continues.\r\nHave to delete which folder/file?  Hi,\r\n\r\nFacing an issue as below. Please help.\r\n\r\n``` Bash\r\nC:\\>python\r\nPython 3.6.0 |Anaconda 4.3.1 (64-bit)| (default, Dec 23 2016, 11:57:41) [MSC v.1\r\n900 64 bit (AMD64)] on win32\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import ChatBot from chatterbot\r\n  File \"<stdin>\", line 1\r\n    import ChatBot from chatterbot\r\n                      ^\r\nSyntaxError: invalid syntax\r\n>>> from chatterbot import ChatBot\r\n>>> chatbot = ChatBot('Ujbuk')\r\nC:\\Users\\eparsen\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\chatterbot\\\r\nstorage\\jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapt\r\ner is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\eparsen\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\cha\r\ntterbot\\chatterbot.py\", line 37, in __init__\r\n    self.storage = utils.initialize_class(storage_adapter, **kwargs)\r\n  File \"C:\\Users\\eparsen\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\cha\r\ntterbot\\utils.py\", line 33, in initialize_class\r\n    return Class(**kwargs)\r\n  File \"C:\\Users\\eparsen\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\cha\r\ntterbot\\storage\\jsonfile.py\", line 30, in __init__\r\n    self.database = Database(database_path)\r\n  File \"C:\\Users\\eparsen\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\jso\r\nndb\\db.py\", line 22, in __init__\r\n    self.set_path(file_path)\r\n  File \"C:\\Users\\eparsen\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\jso\r\nndb\\db.py\", line 47, in set_path\r\n    self.write_data(file_path, {})\r\n  File \"C:\\Users\\eparsen\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\jso\r\nndb\\file_writer.py\", line 25, in write_data\r\n    with open_file_for_writing(path) as db:\r\n  File \"C:\\Users\\eparsen\\AppData\\Local\\Continuum\\Anaconda3\\lib\\site-packages\\jso\r\nndb\\compat.py\", line 70, in open_file_for_writing\r\n    return io.open(*args, **kwargs)\r\nPermissionError: [Errno 13] Permission denied: 'database.db'\r\n>>>\r\n``` Hi,\r\nThanks for your reply.\r\nI have tried changing permission to all directories and sub-directories of the location where it's installed and also tried creating a blank file names 'database.db' in most of the directories under chatterbot, however it didn't work.  I have used mango db to train my bot.\r\n```\r\n[\"\u5927\u6d77\",\"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"],\r\n[\"\u5927\u6d77\",\"\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77\"],\r\n```\r\nI have used chatterbot filters in my python file\r\n```Python\r\nfilters=['chatterbot.filters.RepetitiveResponseFilter'],\r\n```\r\nwhen I input first time ``\"\u5927\u6d77\"``\uff0cchatterbot response is ``\"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"`` \r\nwhen I input second time ``\"\u5927\u6d77\"``, chatterbot response is \"\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77\"\r\nwhen I input third time ``\"\u5927\u6d77\"``\uff0cchatterbot response neither \"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\" nor \"\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77\" ,\r\n\r\nWhen i removed filters from my python the response are differ from previous and\r\n\r\n```Python\r\nfilters=['chatterbot.filters.RepetitiveResponseFilter'],\r\n```\r\nwhen I input first time ``\"\u5927\u6d77\"``\uff0cchatterbot response is ``\"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"``\r\nwhen I input second time ``\"\u5927\u6d77\"``\uff0cchatterbot response is ``\"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"``\r\nwhen I third input ``\"\u5927\u6d77\"``\uff0cchatterbot response is ``\"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"``\r\nalways reponse \"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"\r\n\r\nNow, I want chatterbot has to reply one of both ``(\"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\" and \"\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77\" )``, when i input ``\"\u5927\u6d77\"`` and No matter how many times i input ``\"\u5927\u6d77\"`` @gunthercox @vkosuri   matser @gunthercox   master, this question and #725  is different question. @vkosuri  using Chinese is question and answer.   ``[\"\u5927\u6d77\",\"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"]`` equal ``[\"sea,\"blue and vast\"]``, this is question and answer.\r\n\r\n@gunthercox when i used ``RepetitiveResponseFilter`` chatterbot returns only answer,\r\n\r\nwhen I haven't included response filter, chatterbot returns other responses that is not expected\r\n\r\nSo then i have rewrite RepetitiveResponseFilter filter like this\r\n\r\n``` Python\r\nclass ResponseFilter(Filter):\r\n\tdef filter_selection(self, chatterbot, session_id):\r\n\t\tsession=chatterbot.conversation_sessions.get(session_id)\r\n\r\n\t\tif session.conversation.empty():\r\n\t\t\treturn chatterbot.storage.base_query\r\n\t\t\r\n\t\ttext_of_recent_responses = []\r\n\t\t\r\n\t\tfor statement, response in session.conversation:\r\n\t\t\ttext_of_recent_responses.append(response.text)\r\n\t\t\r\n\t\tquery = chatterbot.storage.base_query.get_random(text_of_recent_responses)\r\n\t\treturn query\r\n```\r\n I just want it to output one of the answers I give\r\n\r\n```python\r\n    def filter_selection(self, chatterbot, session_id):\r\n\r\n        session = chatterbot.conversation_sessions.get(session_id)\r\n\r\n        if session.conversation.empty():\r\n            return chatterbot.storage.base_query\r\n\r\n        text_of_recent_responses = []\r\n\r\n        for statement, response in session.conversation:\r\n            text_of_recent_responses.append(response.text)\r\n\r\n#        query = chatterbot.storage.base_query.statement_text_in(\r\n            text_of_recent_responses\r\n        )\r\n\r\n        return query\r\n``` @gunthercox i give you my server address http://47.92.106.197:8890/?message=\u4f60\u5403\u4e86\u5417\r\nand my sample corpus.json\r\n``` JSON\r\n{\r\n    \"testFilter\":[        \r\n        [\"\u4f60\u5403\u4e86\u5417\",\"\u6211\u4e0d\u9700\u8981\u5403\u4e1c\u897f\uff0c\u4e5f\u4f1a\u6709\u65e0\u7a77\u7684\u529b\u91cf\u6ef4\u3002\u54c8\u54c8\u54c8\u54c8\u54c8\"],\r\n        [\"\u4f60\u5403\u4e86\u5417\",\"\u60a8\u8981\u7ed9\u6211\u5403\u7684\u4e1c\u897f\u5417\uff1f\u662f\u4ec0\u4e48\u662f\u4ec0\u4e48\uff1f\u6211\u5f88\u597d\u5947\u3002\"],\r\n        [\"\u4f60\u5403\u4e86\u5417\",\"\u8fd8\u6ca1\u8fd8\u6ca1\uff0c\u60a8\u8981\u662f\u5e26\u7ed9\u6211\u4e1c\u897f\u5403\u6211\u662f\u4e0d\u4f1a\u4ecb\u610f\u6ef4\uff0c\u5c3d\u7ba1\u6765\uff01\"]        \r\n    ]\r\n}\r\n```\r\nand my example chatterbot,py file\r\n\r\n``` Python\r\nimport tornado.ioloop\r\nimport tornado.web\r\n\r\nfrom chatterbot import ChatBot\r\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\r\n\r\nbot = ChatBot(\"hebi\",\r\n    read_only=True,\r\n    storage_adapter=\"chatterbot.storage.MongoDatabaseAdapter\",\r\n    logic_adapters=[\r\n        {\r\n            'import_path':\"chatterbot.logic.BestMatch\"\r\n        },\r\n        {\r\n            'import_path':'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 1.0,\r\n            'default_response': 'I din't understand'\r\n        }\r\n    ],\r\n    #filters=['chatterbot.filters.RepetitiveResponseFilter'],\r\n    database=\"chatterbot-testFilter-database\",\r\n    database_uri=\"mongodb://*********:27017\"\r\n)\r\n\r\n#\u6307\u5b9a\u8bed\u6599\u6570\u636e\u96c6\u7684training class\r\nbot.set_trainer(ChatterBotCorpusTrainer)\r\nbot.train(\"./testFilter.corpus.json\")\r\n\r\nclass MainHandler( tornado.web.RequestHandler ):\r\n    def get( self ):\r\n        response = bot.get_response(self.get_argument('message'))\r\n        self.write(str(response))\r\n        application = tornado.web.Application( [( r'/', MainHandler ), ])\r\n\r\nif name == 'main':\r\n    application.listen( 8890 )\r\n    print( 'Listening port : 8890 ...' )\r\n\r\n    tornado.ioloop.IOLoop.instance().start()  \r\n    print( 'Tornado Instance started ...' )\r\n\r\n```\r\nyou can use server address request message.\r\n\r\nMaybe my English is so bad, I can't describe it clearly. i am sorry @vkosuri @gunthercox yes ,you are right!    language is a big obstacles @vkosuri @gunthercox   i am so sorry ,i hava solve this problem. i am very stupid  Hello,\r\n\r\nI am trying to follow django integration tutorial with chatterbot.\r\n\r\nHow can I add SpecificResponseAdapter and lowconfiedance adapter **parameters** in django setting.py\r\n\r\n``` Python\r\nCHATTERBOT = {\r\n    'name': 'Django ChatterBot Example',\r\n    'logic_adapters': [\r\n        'chatterbot.logic.BestMatch',\r\n        'chatterbot.logic.SpecificResponseAdapter', << how to add parameters\r\n        'chatterbot.logic.LowConfidenceAdapter' << how to add parameters\r\n    ],\r\n```   Hi @gunthercox  Thanks for your quick reply.\r\n\r\nI have done that. But am facing below error.\r\n\r\nC:\\Python27\\lib\\site-packages\\chatterbot\\chatterbot.py\", line 119,\r\n**AttributeError: 'NoneType' object has no attribute 'conversation'**\r\n\r\nversion: chatterbot-0.6.1\r\n\r\n @vkosuri  I have tried this. But still same error.\r\n\r\nHere is my code. \r\n                self.chatbot.conversation_sessions = ConversationSessionManager()\r\n\t\tself.chatbot.unique_session = self.chatbot.conversation_sessions.new()\r\n\t\tself.chatbot.unique_session.id = '234.1.34.56'\r\n\t\tstatement = self.chatbot.get_response(message,self.chatbot.unique_session.id) I just found this repo and I wanted to give @gunthercox a million thanks not only for your work here, but also for being supportive, something I saw just going through your answers, like the above for instance. Great to see this!  Hi,\r\n\r\nWhen trying to use the Ubuntu corpus Im facing below. Note, all worked well approx 1 week ago when I tried the same training with this corpus. \r\n\r\nrequests.exceptions.ChunkedEncodingError: (\"Connection broken: TimeoutError(60, 'Operation timed out')\", TimeoutError(60, 'Operation timed out'))\r\n\r\nThe downloading starts but doesnt finish, end up with above error. When restarting the training it starts extracting for a while but then ends in:\r\n\r\nEOFError: Compressed file ended before the end-of-stream marker was reached\r\n\r\nAny idea what I can do about this?\r\n\r\nNote: Ive tired for some days and get the same error. So its not about temporary internet connection issue. @vkosuri Not sure I follow. Shall I do something or just await your PR to be approved and update my chatterbot? @vkosuri Very strange. I was looking to try one more time to pinpoint where the issue was and it all started to work again. It downloaded and extracted \"as before\". So, Ill close this ticket for now.  I have successfully implemented ArangoDB Storage Adapter. I have also checked it with DJango. It works like charm. (But for some weird reason online tests are failing. See for yourself: [Pull #770](https://github.com/gunthercox/ChatterBot/pull/770 )\r\n\r\nNow I am thinking to create edges and graphs. This will boost the speed to getting statement significantly. How does that sound as a feature? \r\n\r\nI will start working on it right away. But need your feedbacks about if I should and what should I keep in my mind! I am also kind of new to Arango. Currently I only want to add graph system to existing logic. Basically, all responses will be connected to each other and as user types statement, we can add \"nodes\" which will link to other node with respective weight (how similar are they?). I need to structure it. \r\n\r\nBut yes, context setup is also possible. And I have already written some stuff on setting up the context. Hopefully, I will share something soon. Give me a week or two?  I created a new pull but the automated tests are failing! How do I add support for Python 2.7? For more info, I have added ArangoDB Storage Support.\r\n\r\nDo I have to create Test Case also?  I have added ArangoDB storage adapter.\r\n\r\nExample of using ArangoDB:\r\n```Python\r\nbot = ChatBot(\r\n        \"ChatBot Name\",\r\n        storage_adapter='chatterbot.storage.ArangoStorageAdapter',\r\n        logic_adapters=[\r\n            \"chatterbot.logic.MathematicalEvaluation\",\r\n            \"chatterbot.logic.TimeLogicAdapter\",\r\n            \"chatterbot.logic.BestMatch\"\r\n        ],\r\n        input_adapter=\"chatterbot.input.TerminalAdapter\",\r\n        output_adapter=\"chatterbot.output.TerminalAdapter\",\r\n        username='chatterbot', # This is the username to be used to connect with Arango (required)\r\n        password='chatterbot', # This is the password. (required)\r\n        database_name='chatterbot', # This is the database_name. (default: chatterbot-database)\r\n        collection='statements' # This is the collection. (default: statements)\r\n    )\r\n``` Well, I have not added a test case. I don't know if I should.\r\n\r\nSorry I had to make 5 commits. New in Git. \r\n-> Added ArangoDB storage adapter\r\n-> Added ArangoDB import in __init__.py\r\n-> Removed error that PyCharm made in __init__.py by AutoRearranging\r\n-> Added python-arango in requirements.txt (wrong commit title)\r\n-> Corrected commit title and version >= I don't know why tests are failing. I ran on my computer, all ran fine. I can't find the error in online test except for some network error! Pfft.. Can anyone check again for me the error? It's in Python 2.7! I see the error, I don't know what change do I make! I will try to add test. But the test requires to setup an ArangoDB with user and password. I have no idea how to do that!\r\n\r\nHow to Use documentation, yes I can. I don't know where to put them in project. @vkosuri  In MongoDB you don't need any `username` or `password`. Also in Mongo, `database` and `collection` is created dynamically. This is not same in Arango. `username`, `password` and pre-set `database` and `collection` is required. Should I create `test_arango_adapter.py` with sample `username` and `password`? @vkosuri Hey, can you check and let me know if documentation and how to do that I added are fine?\r\n\r\nI am working on adding `Test Cases`.  @gunthercox Sure. \r\n\r\n- Considering the High Demand: MultiModel database will actually make ChatterBot highly efficient. The concept of edges is really amazing. In fact, with the help of edges, you can actually create a Graph which can make ChatterBot reply as per the **context** of the chat. \r\n\r\n- That being said, yes you are right. There is need to regular maintenance of code with additional features that are coming up. But the storage adapter is only there for storage, right? \r\n\r\n- About third party Python package, how do you mean the package? A package for ChatterBot. Or a package for Python connectivity. Because I have already used a 3rd party package for Python connectivity based on which I have written the whole code. \r\n\r\n- The automated testing, I actually have no idea how to set it up. I have copied and pasted the MongoDB testing but unlike MonogoDB, ArangoDB requires a preset userid, password and database with collection. So, a little help in setting one will be awesome.\r\n\r\n- Future changes that are needed: I have already written in ToDo that I need to implement a query system to enable some query features. But currently I am working on implementing the edges and creating Graph that will make ChatterBot more efficient. @iamhssingh  The third party package would be a Python package for ChatterBot (something that could be installed with a command such as `pip install chatterbot-arangodb-storage`. It's fairly easy to create an additional module that can be installed to add functionality to ChatterBot. There are a few existing examples of this, for instance [`chatterbot-weather`](https://github.com/gunthercox/chatterbot-weather) is a logic adapter that allows a chat bot to answer weather related questions.\r\n\r\nIf you create a new GitHub repository and add me to it I would be more than happy to help set this up and help get automated testing to work.  This may not be an issue, just lack of documentation maybe. \r\n\r\nHow to use custom adapter in Django version?  Okay, its easy. Just follow the patter used while initialising w/o Django. Apologies! I have already created a storage adapter. Didn't know how to use it in Django. Figured it out. BTW, can you tell how can I contribute by adding my adapter in this project? No experience in Git!   Hello! I'm doing a college project and would like to ask a question and see if it applies with ChatterBot. \r\nI have a bunch of answers in a list for some specific questions about a specific subject. Is there some way I can \"train\" a model and make it give out the answer that matches best with whatever question the user inputs?\r\nFor example, user asks \"what's the meaning of existance\" and the bot will give out the most relevant \"string\" from my answers database related to that question? \r\nAll questions and answers are to be of the same topic, for example, cotton. How it's produced, how are it's seeds, how do you plant it, etc. Would it still work, taking from the point that many answers would have a lot of keywords in common? Doesn't sound like you have an issue but rather asking how to train a bot?\r\n\r\nThere is docs on how to do that here.\r\n\r\nhttp://chatterbot.readthedocs.io/en/stable/training.html I've checked the docs, but I couldn't find the exact way of developing what I described, and if it's even doable.\r\nShould I just create a new training class? How should I go about doing it?  Actually, right now, I only got one list with the answers, but I'd like to at least know if it will work.  What are the parameters for list training? How should I go about making my own training class, if necessary?\r\nDo I really need the questions that go with it, or can I just feed the answers? Does the bot accept other formats? Csv, from database? I'll see if I can transform my data to json if not.\n\n-----Mensagem Original-----\nDe: \"Mallikarjunarao Kosuri\" <notifications@github.com>\nEnviada em: \u200e03/\u200e06/\u200e2017 10:09\nPara: \"gunthercox/ChatterBot\" <ChatterBot@noreply.github.com>\nCc: \"Dekken201\" <lucksbp@gmail.com>; \"Mention\" <mention@noreply.github.com>\nAssunto: Re: [gunthercox/ChatterBot] Training bot (#767)\n\nYes, You could write your own class by extending Train class train method https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py#L16\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread. Alright, thanks.  I've followed the migration and train commands and have my django site running on Heroku but every message I give it results in \"hello\". \r\n\r\nHere is my site live. \r\n\r\nhttps://polar-basin-92507.herokuapp.com/\r\n\r\nHere is my current source. \r\n\r\nhttps://github.com/nonlin/SEBot\r\n\r\nWhat am I missing to get this to train?  @vkosuri I try \"How are you?\",  \"Good Morning\". And different stuff. \r\nWhat input did you try and what responses did you get? \r\nI'm not sure exactly what input will work with the default training I'm using.  I found the source to the corpus and asking questions from there seems to work.  when i input :i want to withdraw money or i want to withdraw 20K  ,this mean is withdraw @vkosuri @gunthercox  @Air-boy Chatterbot uses http://www.nltk.org/  like this\r\ndatabase=\"chatterbot-one-database\"\r\ndatabase=\"chatterbot-two-database\"\r\n  can run? @Air-boy could you please let me why you required two DB files for a single instance, and if possible usecase? @vkosuri @gunthercox yeah,i want to use many field. for example: political,economy and so on. i want this chatbot Switch freely in two areas.   such as : i input political,it swith political  , i input economy ,it swith economy    @Air-boy I think you have to train your bot with two database and make a programming logic to switch between databases based on your input. I think this link will provide more information https://github.com/cool-shark/mongoengine @gunthercox  this is very well ,really master  When i try to run the bot i get the below output.\r\n\r\n# Train based on the english corpus\r\n... chatbot.train(\"chatterbot.corpus.english\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 2, in <module>\r\n  File \"chatterbot/trainers.py\", line 117, in train\r\n    trainer.train(pair)\r\n  File \"chatterbot/trainers.py\", line 82, in train\r\n    statement = self.get_or_create(text)\r\n  File \"chatterbot/trainers.py\", line 25, in get_or_create\r\n    statement = self.storage.find(statement_text)\r\n  File \"chatterbot/storage/jsonfile.py\", line 42, in find\r\n    values = self.database.data(key=statement_text)\r\n  File \"/Users/yuvikakoul/anaconda/lib/python2.7/site-packages/jsondb/db.py\", line 98, in data\r\n    return self._get_content(key)\r\n  File \"/Users/yuvikakoul/anaconda/lib/python2.7/site-packages/jsondb/db.py\", line 52, in _get_content\r\n    obj = self.read_data(self.path)\r\n  File \"/Users/yuvikakoul/anaconda/lib/python2.7/site-packages/jsondb/file_writer.py\", line 15, in read_data\r\n    obj = decode(content)\r\n  File \"/Users/yuvikakoul/anaconda/lib/python2.7/site-packages/jsondb/compat.py\", line 32, in decode\r\n    return json_decode(value, encoding='utf-8', object_hook=json_util.object_hook)\r\n  File \"/Users/yuvikakoul/anaconda/lib/python2.7/json/__init__.py\", line 352, in loads\r\n    return cls(encoding=encoding, **kw).decode(s)\r\n  File \"/Users/yuvikakoul/anaconda/lib/python2.7/json/decoder.py\", line 367, in decode\r\n    raise ValueError(errmsg(\"Extra data\", s, end, len(s)))\r\nValueError: Extra data: line 1 column 1026 - line 1 column 158860 (char 1025 - 158859)\r\n>>> \r\n\r\ni cant figure out what the problem is. I tried to reinstall the bot but the problem still remained.\r\nPlease help me out here. Currently chatterbot doesn't tested on anaconda, please try with Python2 or Python3 variants,  If it reproduces please feel to reopen this issue. 367             raise ValueError(errmsg(\"Extra data\", s, end, len(s)))\r\n    368         return obj\r\n    369 \r\n\r\nValueError: Extra data: line 1 column 3 - line 1 column 223466 (char 2 - 223465)\r\n------------------------ \r\nBy the way it appears to work fine with anaconda2 -\r\n\r\nWhen I opened the english corpa I found an extra ] at the end making the json invalid. . . .\r\nWhen I corrected it it ran okay. The error was not on Github, but something corrupted else where.\r\nAlso if you use:\r\n bot = ChatBot     then you must use   bot.set_trainer \r\nif you used:\r\n chatterbot = ChatBot  then match it with chatterbot.set_trainer\r\n\r\nDon't forget to initiate your trainer with:    bot.set_trainer(ChatterBotCorpusTrainer),\r\n\r\nexample:\r\nbot.set_trainer(ChatterBotCorpusTrainer),\r\nbot.train(\r\n\"chatterbot.corpus.english\",\r\n\"chatterbot.corpus.english.slang\",\r\n\"chatterbot.corpus.english.tagalog\",\r\n              ) \r\n\r\n@sanyam8182    I encountered same issue running on python 2.7. \r\nWhat is the location of the  english corpa JSON file ? \r\n\r\n-PL  Found 20 JSON files in <>python\\v2.7\\Lib\\site-packages\\chatterbot_corpus\\data\\english . \r\nWhich file @BlogBlocks ?\r\n\r\n\r\nai.corpus.json\r\nbotprofile.corpus.json\r\ncomputers.corpus.json\r\nconversations.corpus.json\r\ndrugs.corpus.json\r\nemotion.corpus.json\r\nfood.corpus.json\r\ngossip.corpus.json\r\ngreetings.corpus.json\r\nhistory.corpus.json\r\nhumor.corpus.json\r\nliterature.corpus.json\r\nmath_words.json\r\nmoney.corpus.json\r\nmovies.corpus.json\r\npolitics.corpus.json\r\npsychology.corpus.json\r\nscience.corpus.json\r\nsports.corpus.json\r\ntrivia.corpus.json I was on python2.7 while I had that error, later using virtualenv tried testing on python3.6 and it worked fine without making any change to any JSON file. I am on a 64 bit machine/os.    been away, its v 0.6.3\n\nOn Thu, Jun 29, 2017 at 6:14 PM, Gunther Cox <notifications@github.com>\nwrote:\n\n> @lashkarpalash <https://github.com/lashkarpalash> What version of\n> ChatterBot did you encounter this issue with?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/760#issuecomment-312123280>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AC7V6rsrFp6IQtFn3m_D3Am_gmUJIA7uks5sJCHFgaJpZM4NlAC_>\n> .\n>\n  Can someone explain me why we do not take the correct response from the user if the user enters 'NO'.\r\nWe must take what is the correct output according to the User and then feed the ChatBot with the actual output that one expects !\r\n\r\n- please enlighten me! and if there is something wrong then kindly forgive me. :p \r\n- gabru-md If you want make accurate response make threshold value as 1.0, for example For more information please read this documentation http://chatterbot.readthedocs.io/en/stable/logic/index.html#low-confidence-response-adapter\r\n\r\n``` Python\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\n\r\n# Create a new instance of a ChatBot\r\nbot = ChatBot(\r\n    'Default Response Example Bot',\r\n    storage_adapter='chatterbot.storage.JsonFileStorageAdapter',\r\n    logic_adapters=[\r\n        {\r\n            'import_path': 'chatterbot.logic.BestMatch'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 1.0,\r\n            'default_response': 'I am sorry, but I do not understand.'\r\n        }\r\n    ],\r\n    trainer='chatterbot.trainers.ListTrainer'\r\n)\r\n\r\n# Train the chat bot with a few responses\r\nbot.train([\r\n    'How can I help you?',\r\n    'I want to create a chat bot',\r\n    'Have you read the documentation?',\r\n    'No',\r\n    'This should help get you started: http://chatterbot.rtfd.org/en/latest/quickstart.html'\r\n])\r\n\r\n# Get a response for some unexpected input\r\nresponse = bot.get_response('How do I make an omelette?')\r\nprint(response)\r\n``` I am saying why cannot we add the correct response to the input text. It would then be added to the data-file to train the chatterbot the next time.\r\n\r\nCan it not be done ? This will also help the chatbot generate unique responses depending upon what the user wants! @gunthercox \r\nDirectly updating the database would mean to create a user specific training data-set.\r\n\r\nWhat can be done is that as soon as the user enters \"No\", he/she must be prompted for a reply as to \"What can be an apt response for {{QUESTION}} ?\"\r\nand then the correct response can be taken as input and stored directly into a database. This can be helpful and will then help generate a unique data-set/corpus for the chatterbot model. The more the users perform the testing the bigger the dataset will be and better will be the responses!\r\n\r\nIt is quite difficult for me to understand the code and so i am not able to resolve this problem on my own and issue a PR.\r\nAny help would be appreciated :)\r\n\r\n Try out this \r\n\r\n```Python\r\nfrom chatterbot import ChatBot\r\nimport logging\r\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\r\n\r\n# Uncomment the following line to enable verbose logging\r\n# logging.basicConfig(level=logging.INFO)\r\n\r\n# Create a new instance of a ChatBot\r\nbot = ChatBot(\"Terminal\",\r\n    storage_adapter=\"chatterbot.storage.JsonFileStorageAdapter\",\r\n    input_adapter=\"chatterbot.input.TerminalAdapter\",\r\n    output_adapter=\"chatterbot.output.TerminalAdapter\"\r\n)\r\nbot.set_trainer(ChatterBotCorpusTrainer)\r\n\r\nbot.train(\r\n    \"chatterbot.corpus.english\"\r\n)\r\n\r\nDEFAULT_SESSION_ID = bot.default_session.id\r\n\r\ndef get_feedback():\r\n    from chatterbot.utils import input_function\r\n\r\n    text = input_function()\r\n\r\n    if 'yes' in text.lower():\r\n        return False\r\n    elif 'no' in text.lower():\r\n        return True\r\n    else:\r\n        print('Please type either \"Yes\" or \"No\"')\r\n        return get_feedback()\r\n\r\nprint(\"Type something to begin...\")\r\n\r\n# The following loop will execute each time the user enters input\r\nwhile True:\r\n    try:\r\n               input_statement = bot.input.process_input_statement()\r\n               statement, response = bot.generate_response(input_statement, DEFAULT_SESSION_ID)\r\n               bot.output.process_response(response)\r\n               print('\\n Is \"{}\" a coherent response to \"{}\"? \\n'.format(response, input_statement))                      \r\n               if get_feedback():\r\n                    print(\"please input the correct one\")\r\n                    response1 = bot.input.process_input_statement()\r\n                    bot.learn_response(response1, input_statement)\r\n\r\n    # Press ctrl-c or ctrl-d on the keyboard to exit\r\n    except (KeyboardInterrupt, EOFError, SystemExit):\r\n        break\r\n```  SQLAlchemyDatabaseAdapter set adapter_supports_queries = False?\r\nOr it will support base_query in the future?  using : find . -name '*.py' | xargs 2to3 -w  mybot = ChatBot('Terminal',\r\n    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',\r\n    database='db'\r\n)\r\n\r\n2017-05-18,00:17:08.864 INFO {input_adapter} [process_input_statement] Recieved input statement: abc\r\n2017-05-18,00:17:08.866 INFO {input_adapter} [process_input_statement] \"abc\" is not a known statement\r\n2017-05-18,00:17:16.571 INFO {best_match} [process] Using \"abc\" as a close match to \"abcd\"\r\n\r\nit takes a long time go get best match An improvement PR is here https://github.com/gunthercox/ChatterBot/pull/738 Please checkout latest changes and experiment let me know your inputs how best we can speedup. @vkosuri PR #738 is not work for me.\r\nI checkout the latest changes using Mongo Database Adapter, training about 120000 lines.\r\nI have tried on other machines, still can't get the response in 1s. \r\n\r\n[I 170518 01:10:18 input_adapter:22] Recieved input statement: abc\r\n[I 170518 01:10:18 input_adapter:30] \"abc\" is not a known statement\r\n[I 170518 01:10:20 best_match:51] Using \"abc\" as a close match to \"abcd\" Thanks for your inputs. I debug the program and find out that it takes a long time in function get_response_statements in mongodb.py.\r\n\r\n    def get_response_statements(self):\r\n        \"\"\"\r\n        Return only statements that are in response to another statement.\r\n        A statement must exist which lists the closest matching statement in the\r\n        in_response_to field. Otherwise, the logic adapter may find a closest\r\n        matching statement that does not have a known response.\r\n        \"\"\"\r\n        response_query = self.statements.distinct('in_response_to.text')\r\n\r\n        _statement_query = {\r\n            'text': {\r\n                '$in': response_query\r\n            }\r\n        }\r\n\r\n        _statement_query.update(self.base_query.value())\r\n\r\n        statement_query = self.statements.find(_statement_query)\r\n\r\n        statement_objects = []\r\n\r\n        for statement in list(statement_query):\r\n            statement_objects.append(self.mongo_to_object(statement))\r\n\r\n        return statement_objects\r\n\r\nresponse_query is a huge list contains 50000+ elements.\r\n\r\nIs there a way to cache the data in memory? issue is with,  response_query = self.statements.distinct('in_response_to.text');\r\nNeed to find a solution to generate distinct text and add it to a different collection if possible.\r\nfails with ubuntu corpus with 16MB error when invoking the .distinct.\r\nUsing the MongoDB aggregation framework and use disk also fails as the collection exceeds 16 MB.\r\nAny solutions?\r\n @gunthercox I have cached the result in memory so i don't need to get from MongoDB every time.   This will address this #723  Can someone help ? \r\nhttps://travis-ci.org/gunthercox/ChatterBot/jobs/233244184\r\n\r\nWarning, treated as error:\r\n/home/travis/build/gunthercox/ChatterBot/docs/sessions.rst.rst:39:Over dedent has detected Here two issues are there one is pep8 issue\r\n\r\nExpected single line but it has multiple lines \r\n\r\n```\r\n./tests/storage_adapter_tests/test_sqlalchemy_adapter.py:402:1: E303 too many blank lines (3)\r\n./chatterbot/storage/sqlalchemy_storage.py:16:5: E303 too many blank lines (2)\r\n./chatterbot/storage/sqlalchemy_storage.py:41:5: E303 too many blank lines (2)\r\n```\r\n\r\nAnother issue dedent issue http://www.sphinx-doc.org/en/stable/markup/code.html#dedent\r\n\r\nYou should specify line number also here \r\n```\r\n.. literalinclude:: ../chatterbot/ext/django_chatterbot/views.py\r\n   :language: python\r\n   :pyobject: ChatterBotView.post\r\n   :dedent: 4\r\n```\r\n\r\nThe it should be like this\r\n\r\n```\r\n.. literalinclude:: ../chatterbot/ext/django_chatterbot/views.py\r\n   :language: python\r\n   :pyobject: ChatterBotView.post\r\n   :dedent: 4\r\n   :lines: 31-32\r\n``` @vkosuri thanks, but I don't know why now build is failing by sphinx documentation in classes that I not touched. :(\r\n\r\n Not sure, A similar issue found here also https://github.com/sphinx-doc/sphinx/issues/3755 It's sphinx bug fixed in this revision https://github.com/sphinx-doc/sphinx/commit/dabd356f8eb4d88ce363ed8078b29a160d065c5e Great news! Maybe need to wait Sphinx v1.6.2 be released. Hi @gunthercox , sorry, I got stuck. @gunthercox Absolutely, feel free.  I actualiced the chatterbot to new version 6.0 and give me this error in python 2.7:\r\nthis code:\r\n# -*- coding: utf-8 -*-\r\n\"\"\"RESET: por si te da guerra este pedazo de desgraciado\r\n   cibernetico, aqui tienes el enlace:\r\n   https://chatterbot.readthedocs.io/en/stable/tutorial.html\"\"\"\r\nfrom chatterbot import ChatBot\r\n\r\n# new instance, databse, logic adapters\r\nbot = ChatBot('TeRiehBot',\r\n              storage_adapter='chatterbot.adapters.storage.JsonFileStorageAdapter',\r\n              input_adapter='chatterbot.adapters.input.TerminalAdapter',\r\n              output_adapter='chatterbot.adapters.output.TerminalAdapter',\r\n              database='./database.json'\r\n              )\r\n\r\n# get response and scape bt control + C\r\nwhile True:\r\n    try:\r\n        bot_input = bot.get_response(None)\r\n    except(KeyboardInterrupt, EOFError, SystemExit):\r\n        break\r\n\r\n# training\r\nbot.train([\r\n    'Hola',\r\n    '\u00bfQu\u00e9 tal?',\r\n    '\u00bfC\u00f3mo te va?',\r\n    '\u00a1\u00bfTe Rieh!?',\r\n    'Gracias.',\r\n    'Adios.',\r\n])\r\n\r\nthis output error\r\n\r\n/usr/bin/python2.7 /home/marco/Desktop/.idea/TeRiehBot.py\r\n/usr/local/lib/python2.7/dist-packages/chatterbot/storage/jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\nTraceback (most recent call last):\r\n  File \"/home/marco/Desktop/.idea/TeRiehBot.py\", line 12, in <module>\r\n    database='./database.json'\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/chatterbot.py\", line 83, in __init__\r\n    self.initialize()\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/chatterbot.py\", line 94, in initialize\r\n    nltk_download_corpus('tokenizers/punkt')\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/utils.py\", line 118, in nltk_download_corpus\r\n    find(resource_path)\r\n  File \"/usr/local/lib/python2.7/dist-packages/nltk/data.py\", line 635, in find\r\n    return find(modified_name, paths)\r\n  File \"/usr/local/lib/python2.7/dist-packages/nltk/data.py\", line 621, in find\r\n    return ZipFilePathPointer(p, zipentry)\r\n  File \"/usr/local/lib/python2.7/dist-packages/nltk/compat.py\", line 366, in _decorator\r\n    return init_func(*args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/nltk/data.py\", line 470, in __init__\r\n    zipfile = OpenOnDemandZipFile(os.path.abspath(zipfile))\r\n  File \"/usr/local/lib/python2.7/dist-packages/nltk/compat.py\", line 366, in _decorator\r\n    return init_func(*args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/nltk/data.py\", line 986, in __init__\r\n    zipfile.ZipFile.__init__(self, filename)\r\n  File \"/usr/lib/python2.7/zipfile.py\", line 770, in __init__\r\n    self._RealGetContents()\r\n  File \"/usr/lib/python2.7/zipfile.py\", line 811, in _RealGetContents\r\n    raise BadZipfile, \"File is not a zip file\"\r\nzipfile.BadZipfile: File is not a zip file  Hello,\r\n\r\nI follow the first steps of documentation 'CHatterbot Tutorial' and received this error:\r\n\r\n```Bash\r\nTraceback (most recent call last):\r\n  File \"/home/marco/Desktop/.idea/TeRiehBot.py\", line 12, in <module>\r\n    database='./database.json',\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/chatterbot.py\", line 39, in __init__\r\n    self.validate_adapter_class(storage_adapter, StorageAdapter)\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/chatterbot.py\", line 85, in validate_adapter_class\r\n    if not issubclass(import_module(validate_class), Adapter):\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/utils/module_loading.py\", line 12, in import_module\r\n    module = importlib.import_module(module_path)\r\n  File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\r\n    __import__(name)\r\nImportError: No module named storage\r\n``` Hi Gunther,\n\nDo not worry, finally I found my error: I do not use virtualenv and mi actual versi\u00f3n of Ubuntu 16.04 is a big disastre. Finally I can run the code.\n\nMi IDE is PyCharm.\n\nBest regards,\n\nMGB\n\n\n________________________________\nDe: Gunther Cox <notifications@github.com>\nEnviado: lunes, 29 de mayo de 2017 21:40\nPara: gunthercox/ChatterBot\nCc: Marco Garcia Baturan; Mention\nAsunto: Re: [gunthercox/ChatterBot] Error in documentation (#742)\n\n\nHi @Marcogb81<https://github.com/marcogb81>, what editor are you using? I see that there is a .idea directory in the trceback and I am wondering if this error is occurring because of the configuration of this editor.\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub<https://github.com/gunthercox/ChatterBot/issues/742#issuecomment-304720670>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AGuBASTygq6IIZlBzozGSp64YknKDdFNks5r-x81gaJpZM4Nboe5>.\n @Marcogb81 It seems to you have resolved your issue. Please feel free to reopen this issue if you found any issue?  Hi @gunthercox , I am relatively new to open-source. I just wanted to validate my approach to achieving what you mentioned above. I think of creating a global variable in `sqlalchemy_storage.py`, say `table_created` and initialising it to `false`, then within the `__init__` method of `SQLAlchemyDatabaseAdapter` class, we check whether `table_created` is `false`. If so, we create the tables by calling `create()` method, else, we don't. Am I right?(I may be completely wrong, since, I am new to this) @gunthercox Alright, thanks.  I  changed  chatbot.train('chatterbot.corpus.english') to chatbot.train('chatterbot.corpus.chinese'), then I got the problem  \u201cUnicodeDecodeError: 'utf8' codec can't decode byte 0xd4 in position 0: invalid continuation byte\u201d. Then all of examples (  https://github.com/gunthercox/ChatterBot/tree/master/examples) have the sam problem.How can I solve this problem?\r\n\r\n```\r\n D:\\Anaconda\\lib\\site-packages\\IPython\\utils\\traitlets.py:5: UserWarning: IPython.utils.traitlets has moved to a top-level traitlets package.\r\n  warn(\"IPython.utils.traitlets has moved to a top-level traitlets package.\")\r\npydev debugger: process 27696 is connecting\r\n\r\nConnected to pydev debugger (build 141.2569)\r\nD:\\Anaconda\\lib\\site-packages\\chatterbot\\storage\\jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\nTraceback (most recent call last):\r\n  File \"D:\\PyCharm 4.5.4\\helpers\\pydev\\pydevd.py\", line 2358, in <module>\r\n    globals = debugger.run(setup['file'], None, None, is_module)\r\n  File \"D:\\PyCharm 4.5.4\\helpers\\pydev\\pydevd.py\", line 1778, in run\r\n    pydev_imports.execfile(file, globals, locals)  # execute the script\r\n  File \"D:/pycharm/ChatterBot/examples/export_example.py\", line 15, in <module>\r\n    chatbot.train('chatterbot.corpus.english')\r\n  File \"D:\\Anaconda\\lib\\site-packages\\chatterbot\\trainers.py\", line 117, in train\r\n    trainer.train(pair)\r\n  File \"D:\\Anaconda\\lib\\site-packages\\chatterbot\\trainers.py\", line 82, in train\r\n    statement = self.get_or_create(text)\r\n  File \"D:\\Anaconda\\lib\\site-packages\\chatterbot\\trainers.py\", line 25, in get_or_create\r\n    statement = self.storage.find(statement_text)\r\n  File \"D:\\Anaconda\\lib\\site-packages\\chatterbot\\storage\\jsonfile.py\", line 42, in find\r\n    values = self.database.data(key=statement_text)\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jsondb\\db.py\", line 98, in data\r\n    return self._get_content(key)\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jsondb\\db.py\", line 52, in _get_content\r\n    obj = self.read_data(self.path)\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jsondb\\file_writer.py\", line 15, in read_data\r\n    obj = decode(content)\r\n  File \"D:\\Anaconda\\lib\\site-packages\\jsondb\\compat.py\", line 32, in decode\r\n    return json_decode(value, encoding='utf-8', object_hook=json_util.object_hook)\r\n  File \"D:\\Anaconda\\lib\\json\\__init__.py\", line 352, in loads\r\n    return cls(encoding=encoding, **kw).decode(s)\r\n  File \"D:\\Anaconda\\lib\\json\\decoder.py\", line 364, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"D:\\Anaconda\\lib\\json\\decoder.py\", line 380, in raw_decode\r\n    obj, end = self.scan_once(s, idx)\r\nUnicodeDecodeError: 'utf8' codec can't decode byte 0xd4 in position 0: invalid continuation byte \r\n```  This PR will address issue https://github.com/gunthercox/ChatterBot/issues/679\r\n\r\n***\r\n\r\nObserved some significant changes are observed with my machine and other previous PRs\r\n\r\nhttps://travis-ci.org/gunthercox/ChatterBot/jobs/228723891#L409, this execution took ``Ran 340 tests in 16.152s``\r\n\r\nWith New approach took ``Ran 340 tests in 10.266s`` @yeshoujquery, @whm2300 if you want you could try with this patch, let me know is there any improvement with patch? @vkosuri  Mongodb 373753 data time-consuming 89ms, relatively fast before, but can it be faster? Seconds out of that kind? Failed due to network issue https://travis-ci.org/gunthercox/ChatterBot/jobs/232412009#L213, @gunthercox do you want me re-run tests? @gunthercox and @yeshoujquery any further updates? @vkosuri The latest changes I have merged into my local, i5,8g, or previous data structures and forms, and the corresponding time is 92ms, with no obvious improvement\r\n\r\n![results of enforcement](https://cloud.githubusercontent.com/assets/10823306/26087612/6c24b7a2-3a24-11e7-847c-7aebc55659d6.png)\r\n @yeshoujquery I think i am converted all loops into iterators for some better process. i.e *315831ms (315.831sec)* reduced to *92ms(0.092sec)* the response what you are seeing is within in a sec.\r\n\r\nI am not familiar with other chatbots, could you please let me know what is the idea time to response from chatbot, if we trained 2M data?\r\n\r\n 92ms doesn't feel like it. The robot I made with tensorflow reflects the speed of milliseconds. Address: [http://bot.mxgome.com](http://bot.mxgome.com), I still prefer chatterbot. @vkosuri 92ms doesn't feel like it. The robot I made with tensorflow reflects the speed of milliseconds. Address: [http://bot.mxgome.com](http://bot.mxgome.com), I still prefer chatterbot. I further nailed down the percentage of process utilization, it look something like this\r\n\r\n![image](https://cloud.githubusercontent.com/assets/13664257/26098111/4d12f480-3a44-11e7-9522-bdb90e635359.png)\r\n\r\nThe firgures look like this\r\n\r\n1. mongodb - 30%\r\n2. tarining - 25.29%\r\n3. multi_adapter 23.56%\r\n4. nltk_download - 10.19%\r\n5. chatterbot - 7.1% @vkosuri I checked the source code, and I feel it is to take the data after the processing, it is relatively slow, take data and results show relatively fast, matching accuracy there slow @vkosuri @gunthercox Is the chatterbot author not maintained? @gunthercox Master, i am done with my changes, let me know any comments/suggestions on this PR? Any improvement thoughts? @yeshoujquery if you want give a try to test this PR, i see some improvement from previous  I got an error TypeError: object of type 'map' has no len() when trying Look into failures It's dedent issue https://travis-ci.org/gunthercox/ChatterBot/jobs/235183780#L429 @zhantongz could try now? @vkosuri I've lost confidence in chatterbot and handled too little data @gunthercox The author is not very well maintained, right? It works but the improvement is minimal for me.  Hello there! I'm a programming begginer and am having a problem when running the examples. It's probably a dumb mistake I'm making, but I couldn't really figure out what is happening. Every time I run even the most basic example, I get this message:\r\n![error](https://cloud.githubusercontent.com/assets/20584812/26031254/950c8640-383a-11e7-810f-5f4206ab3624.jpg)\r\nI can't figure out why it's saying there's a ZipFile error... I'm not even dealing with this kind of file.\r\n![error2](https://cloud.githubusercontent.com/assets/20584812/26031260/bf4ed976-383a-11e7-8133-cdaea30f02e5.jpg)\r\n\r\nThis happens with any of the examples. Do I have to do something else for this to work? I've already removed all Python from my computer and installed a fresh version. I was using Anaconda because of some ML projects. Now I've removed it and it still doesn't work.\r\n\r\nAlso, I've tested it in another computer with a clean python install and it worked flawlessly. Do you guys have any idea how to work this out?\r\n\r\n Many thanks for the answer! That was it. \r\nAlso, just one unrelated question. Do you check your e-mail often? I'd like to talk more about this bot and make some more questions.\r\nOr should I just make more issues? I don't know how this works very well. Alright. Thanks again! Could you check if my e-mails didn't go to your spambox? My email is lucksbp@gmail.com.\r\nI'll close the issue now.  hi,\r\nHow to configure the MongoDB storage adapter of django_chatterbot ,Hoping to give me a sample you can read chatterbot doc Here is an example about https://github.com/gunthercox/ChatterBot/blob/master/examples/terminal_mongo_example.py\r\n\r\nDocumentation available here http://chatterbot.readthedocs.io/en/stable/storage/index.html#mongo-database-adapter Thank you for your answer!\r\nganthercox,You know me, I hope support MongoDB, but Django is not good for MONGO, it's ideal to separate databases.  Hi, found some typos in the docs as well as in multi_adapter.py. Fixed them, so please have a look.\r\n  Hello,\r\n\r\nI have two \"beginner\" question: \r\n\r\n1. I still not getting the learning part of chatterbot although I go through the documentation. When I talk to the chatterbot I understand that it save what I write in the database but how it will affect the future response what I see its remain same. Can you give me example of this part.\r\n\r\n2. If I want to access chatterbot, I mean to talk to the bot from the smartphone is there a simple way to do that. If you have a tutorial of example if will be great \ud83d\udc4d \r\n\r\nThanks a lot.  This bot is very old chatterbot version, I think this like what your are looking https://chatterbot-live-example.herokuapp.com/ Thanks for your reply but what do you main by very old chatterbot. I am using the latest one 0.60 on my PC. \r\n\r\nJust to clarify my concern. How chatterbot will learn from my conversation inputs? and will it affect the future response?\r\n\r\nMy understating is as below conversation:\r\n\r\nMe: whats my name?\r\nChatterbot: Mike\r\nMe: My name is John\r\nChatterbot: ..\r\nMe: whats my name?\r\nChatterbot: John\r\n\r\nIs it like that, if not is it possible? Any support here. Exactly. am also having same kind of doubt here. \r\n\r\nWhat i have observed is , the bot will store all the user inputs. but it doesn't map with exact question/answer. When u talk to the bot in future. It will try to match the user given inputs too. If it matches it will return as a response. But those responses are always not correct. \r\n\r\nMay be u should configure in such a way that the bot should ask \"Doest that helps you\" if the user says \"yes\". then you can update the dataset accordingly for future answer. I guess this kind of workaround only currently possible with chatterbot. Because i dont think such deep learning is applied to chatterbot. \r\n\r\nPlease correct me if am wrong on this understanding. @gunthercox   @gunthercox @vkosuri  This?\r\nhttps://github.com/gunthercox/ChatterBot/blob/master/chatterbot/filters.py\r\n @sporting   yeah,i find it ,  but now  i want to write my filter,to realize search result this confidence is 1.0  This might help you https://github.com/gunthercox/ChatterBot/blob/351971a21e603642f5797c33e924c4195f96682b/chatterbot/logic/low_confidence.py#L32\r\n\r\nMore information http://chatterbot.readthedocs.io/en/stable/logic/index.html#low-confidence-response-adapter i mean that when i input \"hello\",they can response and only response ,and response  can cycle, \r\nfor examaple:\r\n```\r\nhello--->hi\r\nhello--->hello\r\n-----------\r\nhello--->hi\r\nhello--->hello\r\n```\r\n\r\ni use mongodb database @vkosuri  Then you have to use ``Specific Response Adapter`` http://chatterbot.readthedocs.io/en/stable/logic/index.html#specific-response-adapter I stored in the mongo database and a lot of data, a question has more than one answer, I want to ask a question, and then answer the matched the answer machine, with each answer in my answer \r\n@vkosuri \r\nmy english not well,\r\nhope you can understand Could try like this, The logic will work what you are asking, other response you will get ``'I am sorry, but I do not understand.'``. Let me know if you need any help.\r\n\r\n``` Python\r\n# Create a new instance of a ChatBot\r\nbot = ChatBot(\r\n    'Default Response Example Bot',\r\n    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',\r\n    logic_adapters=[\r\n        {\r\n            'import_path': 'chatterbot.logic.BestMatch'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 1.0,\r\n            'default_response': 'I am sorry, but I do not understand.'\r\n        }\r\n    ],\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer'\r\n)\r\n``` i use mongodb database, in the *.corpus.json file \uff0ci hava this data:\r\n[\"\u5927\u6d77\",\"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"],\r\n[\"\u5927\u6d77\",\"\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77\"],\r\n\r\ni write filter in my .py  ,this:\r\n\tfilters=['chatterbot.filters.RepetitiveResponseFilter'],\r\nwhen i first input \"\u5927\u6d77\"\uff0cchatterbot  first response \"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"  \r\nwhen i second input \"\u5927\u6d77\"\uff0cchatterbot  second response \"\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77\"  \r\n\r\nwhen i third input \"\u5927\u6d77\"\uff0cchatterbot  third response  neither \"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"  nor  \"\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77\" ,\r\n\r\n\r\nwhen i not write filter in my .py  for this:\tfilters=['chatterbot.filters.RepetitiveResponseFilter'],\r\nwhen i first input \"\u5927\u6d77\"\uff0cchatterbot  first response \"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"  \r\nwhen i second input \"\u5927\u6d77\"\uff0cchatterbot  second response \"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"  \r\nwhen i third input \"\u5927\u6d77\"\uff0cchatterbot  third response \"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"  \r\n......  always reponse \"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\" \r\n\r\n\r\nnow ,i want chatterbot to reply one of  both(\"\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645\"  and \"\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77\"   ),when  i  input \"\u5927\u6d77\"and  No matter how many times i input  \"\u5927\u6d77\"\r\n\r\n@vkosuri  \r\n  Does it support flow based dialog conversation? Am also facing the same problem.  if am right.\r\n\r\nLets take below scenario.\r\n\r\nJSON:\r\n[\r\n\"right\",\r\n\"okay\"\r\n],\r\n[\r\n\"i have problem with eye\",\r\n\"which side\",\r\n\"right\",\r\n\"oh...thats bad. What happened to right eye.?\"\r\n]\r\n\r\nconversation:\r\nMe: I have problem with eye.\r\nbot: which side\r\nMe: right\r\nBot: Okay\r\n\r\nIn the above scenario. if am replying with \"right\" means I want the bot to reply \"oh...thats bad. What happened to right eye.?\". but instead of that it will reply \"okay\". because of the best match.\r\n\r\n@kenyeung128 Please correct me if am wrong.\r\n\r\n@gunthercox  Am facing this situation. :(\r\n\r\nThanks in advance.! I'm closing this ticket as a duplicate of #276. Feel free to click the subscribe button on that page to follow the progress for when it is resolved.  While I use the django(python manage.py runserver) , it always tell me that there is a InvaliadAdapterTypeException: chatterbot.storage.MongoDatabaseAdapter must be a subclass of StorageAdatpter . \r\nHere is the setting of my bot:\r\n``` Python\r\n self.ciri = ChatBot(\r\n            'Ciri',\r\n            storage_adapter='chatterbot.storage.MongoDatabaseAdapter',\r\n            logic_adapter=[\r\n                'chatterbot.logic.BestMatch'\r\n            ],\r\n            filters=[\r\n                'chatterbot.filters.RepetitiveResponseFilter'\r\n            ],\r\n            input_adapter='chatterbot.input.VariableInputTypeAdapter',\r\n            output_adapter='chatterbot.output.TerminalAdapter',\r\n            database='chat_ciri_db',\r\n        )\r\n\r\n``` @FakerGit which version chatterbot are you using? To know current version user ``python -m chatterbot --version`` @vkosuri  It is 0.6.0.  Without using Django,  my program is functioning well. By the way , the version of Django is 1.11.     have simple method?    \r\ndo not write    \r\n\r\nchatterbot.train([\r\n    \"Hi there!\",\r\n    \"Hello\",\r\n])\r\n\r\n\r\nchatterbot.train([\r\n    \"Greetings!\",\r\n    \"Hello\",\r\n])\r\n\r\n\r\n\r\n@gunthercox @vkosuri  @Air-boy i didn't understand could you please elaborate your question? when i input \"Hi there\",robot response \"Hello\" or \"OK, i know\"\r\n\r\ni write a *.corpus.json file  fellow:\r\n{\r\n\"conversations\":[\r\n\"i love you\",\r\n\"me too\"\r\n],\r\n[\r\n\"i love you\",\r\n\"i love you too\"\r\n]\r\n}\r\ni input one request ,robot response \"me too\" or \"i love you too\"\r\nif i have ten response, i hava to repeat ten times\r\nif i write ten times this \"i love you\",  it is  redundancy\r\n\r\nso i want to find a simple write way\r\n\r\n\r\n\r\n @vkosuri   Yep, I will change the default behavior of database creation, where if unspecified database file, will always create a sqlite memory a database.\r\n\r\n\r\n\r\n  While i trained on ChatterbotCorpusTrainer, and ListTrainer, the statement and Response both are reversed.\r\n\r\nPrevious issue https://github.com/gunthercox/ChatterBot/issues/308 To reproduce this issue\r\n\r\n``` Python\r\nCHATTERBOT_TRAIN = {\r\n    'name': 'Django Chatter Bot',\r\n    'trainer': 'chatterbot.trainers.ListTrainer',\r\n    'training_data': [\r\n        \"how to train your bot\",\r\n        \"python managem.py train\",\r\n        \"Will it work\",\r\n        \"Not sure\"\r\n    ],\r\n    'storage_adapter': 'chatterbot.storage.DjangoStorageAdapter',\r\n    'django_app_name': 'abot',\r\n    'use_django_models': True\r\n}\r\n```\r\n![image](https://cloud.githubusercontent.com/assets/13664257/25772722/a56ec7b6-328e-11e7-8440-2e00e8f21712.png)\r\n i think ,you train only 4 message, they random ? This happening due to foreign key mapping at [L136](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/ext/django_chatterbot/models.py#L136) \r\n\r\n```Python \r\n    statement = models.ForeignKey(\r\n        'Statement',\r\n        related_name='in_response'\r\n    )\r\n\r\n    response = models.ForeignKey(\r\n        'Statement',\r\n        related_name='responses'\r\n    )\r\n``` @gunthercox Master, Do you have any idea how to solve this? Hi gunthercox, any news?  I got same problem.\r\nSo I inspected trainer code and I've found the solution.\r\n\r\nThe problem was in trainers.py\r\n\r\n```\r\nclass ListTrainer(Trainer):\r\n    \"\"\"\r\n    Allows a chat bot to be trained using a list of strings\r\n    where the list represents a conversation.\r\n    \"\"\"\r\n\r\n    def train(self, conversation):\r\n        \"\"\"\r\n        Train the chat bot based on the provided list of\r\n        statements that represents a single conversation.\r\n        \"\"\"\r\n        statement_history = []\r\n\r\n        for text in conversation:\r\n            statement = self.get_or_create(text)\r\n\r\n            if statement_history:\r\n                statement.add_response(\r\n                    Response(statement_history[-1].text)\r\n                )\r\n\r\n            statement_history.append(statement)\r\n            self.storage.update(statement)\r\n```\r\n\r\n\r\nThis code puts previous statement as a response of current statement.\r\nSo, you should traverse the conversation in reversed order like this.\r\n`for text in reversed(conversation):`\r\n\r\nThis should work fine.\r\n\r\n![image](https://user-images.githubusercontent.com/3851262/26860808-e90c5a6a-4b7a-11e7-8c80-961eabb24597.png)\r\n @vkosuri Thanks. I made pull request.  This PR fixes some typos.  Is it possible to calculate frequency and Density for a given statement and response? I am not sure this will benefit to chatterbot, My idea is to identify ``frequent words`` in all the ``statements``, so that i can guess my users are writing sentence or statements in such a way i can update my corpus based on those words\r\n\r\nI find we could find frequency through ``NLTK`` module\r\n\r\n``` Python\r\nwords = nltk.tokenize.word_tokenize(p)\r\nfdist = FreqDist(words)\r\n```\r\n\r\nMore information https://languagelearning.stackexchange.com/questions/449/what-are-the-advantages-of-studying-words-by-their-frequency/452\r\n  Hi,\r\n\r\nI am creating a chatbot application using Django and Chatterbot and setting the basic static data in the \"training_data\" parameter,\r\n```Python\r\nCHATTERBOT = {\r\n    'name': 'ChatterBot Example',\r\n    'trainer':'chatterbot.trainers.ListTrainer',\r\n\t'logic_adapters': [\t               \r\n        'chatterbot.logic.BestMatch'\r\n    ],\r\n    'training_data': [ \"How are you?\",\"I am good.\", \"That is good to hear.\",\"Thank you\",\"You are welcome.\" ],\t\r\n    'django_app_name': 'django_chatterbot'\r\n}\r\n```\r\n\r\nWhen i run the application in browser, not able to get the response which i am setting in training_data.\r\nCan someone please let me know how to set the data here? The reason you were not getting response from chatbot because you haven't trained your bot. Training bot from Django interface is different form regular chatterbot. \r\n\r\n``` Bash\r\npython manage.py train\r\n``` \r\nMore information about Django training available here http://chatterbot.readthedocs.io/en/stable/django/training.html @vkosuri : Thank you so much for the response,\r\n\r\nThe response is not as expected. Meaning it is responding with 'hello' all the time. Even after running the train command\r\n\r\nNow i am training the python as mentioned \"python manage.py train\". The code mentioned below.\r\n\r\n```Python\r\nCHATTERBOT = {\r\n    'name': 'Tech Support Bot',\r\n    'logic_adapters': [       \r\n        'chatterbot.logic.BestMatch'\r\n    ],\r\n    'trainer': 'chatterbot.trainers.ListTrainer',\r\n    'training_data': [\r\n         'Hello','hi there!'\r\n    ]\r\n}\r\n```\r\nAlso,Can anyone please let me know is there any specific set response we can get for particular response, for example, \r\n```Python\r\n 'training_data': [ {\"how are you\":\"I am doing great\"},{\"Hello\":\"hi there!\"}  ]\r\n```\r\nSomething like the above\r\n\r\n\r\nThanks in advance\r\n\r\n Is this what you want? \r\nhttp://chatterbot.readthedocs.io/en/stable/logic/index.html#specific-response-adapter Training with the default settings.py doesn't seem to do anything for me as well. Still results in Hello responses.  @gunthercox hi,i run the python manage.py train but the response is not what i want .did this bug had fixed? using sql databases with django seems to be resulting in wrong training i.e responses mapping to wrong input statements @ahmedshoaib are you suggesting that using a different database like mongodb could potentially solve this problem? @gabru-md  yes mongodb works perfectly fine with the django_app (I.e  with [use_django_models](https://github.com/gunthercox/ChatterBot/pull/653) : False). There seems to be a problem in storing training data in relational dbs.  i have the same problem ,iam wondering how to use mongodb with the django @saraalosaid If you want to use MongoDB and Django then you will need to configure configure Django's storage backend to use one the is build for MongDB. I highly recommend **Django MongoDB Engine** for this: https://django-mongodb-engine.readthedocs.io/en/latest/  Hi having this issues since 2 days now. \r\n\r\nI followed the documentation and created  a database stored the conversations in my collections. \r\nNow when I run it I dont get any response when I use the get_response() Method . \r\nand the program just get stuck over that line. \r\n```\r\nbot = ChatBot(\r\n    'Terminal',\r\n    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',\r\n    logic_adapters=[\r\n        'chatterbot.logic.BestMatch'\r\n    ],\r\n    filters=[\r\n        'chatterbot.filters.RepetitiveResponseFilter'\r\n    ],\r\n    input_adapter='chatterbot.input.TerminalAdapter',\r\n    output_adapter='chatterbot.output.TerminalAdapter',\r\n    database='ChatBotdb'\r\n    #database_uri='mongodb://127.0.0.1:27017/'\r\n)\r\ntry: \r\nprint here\r\nresponse= bot.get_response(text)\r\n                print response\r\nexcept :\r\n except (KeyboardInterrupt, EOFError, SystemExit):\r\n        break\r\n```\r\n\r\n\r\nit does enter the try block and prints here and gets stuck after that \r\n\r\n\r\n\r\n\r\n\r\n\r\n Yes mongoDB is running. I am running this on pycharm also when I use 'None' I am able to give input in my console and it replies correctly. but what if I just want a reply from the get request which I am sending. \r\n\r\nEx; http://localhost:8080/search/hi \r\n\r\nso it should reply to this 'hi'  I am sending it in \"text\" and trying to get a response using bot.get_response(text)\r\n\r\nThis used to work fine while using json adapter but doesnt seem to work in MongoDB approach and I will be using mongo DB as I have a huge data set on which I have to train the bot \r\n\r\n @gunthercox  Can you help me with this   Hello, I think ListTrainer is broken again.\r\nSee the error message:\r\n\r\nfrom chatterbot.trainers import ListTrainer\r\nconversation = [ \"Ol\u00e1\" , \"Ol\u00e1!\"  ]\r\nchatbot.set_trainer(ListTrainer)\r\nchatbot.train(conversation)\r\n\r\n------------------------------------------------------------\r\n\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\Weslley\\Desktop\\treino.py\", line 3, in <module>\r\n    chatbot.set_trainer(ListTrainer)\r\nNameError: name 'chatbot' is not defined\r\n[Finished in 0.2s with exit code 1]\r\n[shell_cmd: python -u \"C:\\Users\\Weslley\\Desktop\\treino.py\"]\r\n[dir: C:\\Users\\Weslley\\Desktop]\r\n[path: C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files (x86)\\NVIDIA Corporation\\PhysX\\Common;C:\\Users\\Weslley\\AppData\\Local\\Programs\\Python\\Python36\\Scripts\\;C:\\Users\\Weslley\\AppData\\Local\\Programs\\Python\\Python36\\;C:\\Users\\Weslley\\AppData\\Local\\Microsoft\\WindowsApps;]\r\n  Can someone help me with this error? I followed instructions from the documentation, but I can't seem to get the trainer to work. I have a settings.py file in the same directory as my app.py with the correct twitter keys. \r\n\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8797862/25627468/893a3f6e-2f17-11e7-889d-9bd7db18e37d.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/8797862/25627580/e6aca8d0-2f17-11e7-89c0-e61fb0ae7546.png)\r\n\r\n  Observed same issue while running tests  Currently the django_storage adapter tightly coupled with django_chatterbot. By introduce this fix, others can reuse storage adapter.\r\n\r\n@gunthercox please provide your comments/suggestions on this PR. @gunthercox Master, any plans to release chatterbot minor version this week? @gunthercox Any updates?  Is there a discusgroup or forum where there can be talked about chatterbot?\r\n\r\nI'm having problems importing custom corpus in the Djange example on heroku. And I don't want to bother the Issues everytime.\r\n\r\nWould be nice and good to create a community. Stackoverflow - but there's a barrier crossing for beginners. (They policy of comments/posting/etc...)\r\nGoogle Groups page? - Openface has one and I got answers pretty quick though not a solution and there's a better chance of solutions with stackoverflow. (do to the same policy)\r\nHitchhike on a pythonforum or in my case a django forum... \r\nI would like to contribute, but my knowledge isn't sufficient to act as a helpful wizard in chatterbotfora/community. I would mostly ask the questions myself. But this wil be in a long run helpful for other beginners at python, django etc... and this in using chatterbot. @gunthercox Master, Can i ask them http://stackoverflow.com/contact here? Well I have some reputation [Raja Simon](https://stackoverflow.com/users/3762142/raja-simon?tab=profile). Shall I create tag in SO. Can't wait to bring this community to SO. So amazing.  Thanks. I created it. I'm editing as much question now to include chatterbot tags. \r\n\r\nhttps://stackoverflow.com/questions/tagged/chatterbot Hey, awesome that this is becoming something. Would you mind asking a thourough explanation to use a own corpuses and activating them on the django platform?   ![image](https://cloud.githubusercontent.com/assets/28188631/25554895/20264a6c-2cf7-11e7-8538-16d9a1eecda5.png)\r\n\r\nHelp Me Please To Solving This Error!! The reason you were seeing due to default ``JsonStorageAdapter``. It's warning only, if you want avoid this warning please change storage adapter. For more info please read this documentation http://chatterbot.readthedocs.io/en/stable/storage/index.html   Getting: Traceback (most recent call last) : \r\nFile \"/home/usr/Chatterbot/chatterbot/chatterbot.py\", line 3, in <module>\r\nfrom .storage import Storageadapter\r\nValueerror: Attempted relative import in non-package\r\n\r\n\r\nI am a bit unsecure what is causing this and i dont seem to find anything here You can't execute chatterbot cloned file. Before that you have to install chatterbot by using\r\n\r\n```\r\npip install --upgrade chatterbot \r\n```\r\n\r\nRecommend use Python Virtual Environment  @vkosuri I have tried that too but just gets this error\r\nFile\" /home/usr/lib/python2.7/site-packages/chatterbot/chatterbot.py\", line 3, in <module> from .storage import Storageadapter\r\nValueerror: attempted relative import in non-package seems like python had corrupted files on that computer... suddenly realized that nothing with python was working. Tried to copy the code to my main pc and it worked like a charm. Great job  Hi, this project are very elgant and clean. I like this style. I have 2 issue consider about the design about this framework:\r\n\r\n* I found that, once a statement store into database like mongo, I can not replace it, that means, if previous reply is wrong by bot, I can not fix that, maybe there are some flag allow me to override that?\r\n\r\n* Another things is about the reply, the bot learned one question and an according answer, So if I asked that question twice, the answer would be same forever and never change, this is not good, even not intelligent than I using an random.choice to choose random condidate replies.\r\n\r\nWish get discuss about there puzzels, if they are already solve, could u please teach me how to implement in chatterbot?many thanks pal. i met the same problem as you .once  a problem 's answer  is set , it 's can't  be changed . My English already bad. Puzzles sounds like mystery but I want to express meaning is just questions.   @gunthercox Master, Is there any reason behind that tests are failing on only ``Python 3.4``\r\n\r\n```\r\n16.04s$ nosetests --with-coverage --cover-package=chatterbot\r\n\r\n........................................................................................................................................F...........................................................................S.....S................................................................S..........................S..\r\n\r\n======================================================================\r\n\r\nFAIL: Test that we are able to get a list of only statements\r\n\r\n----------------------------------------------------------------------\r\n\r\nTraceback (most recent call last):\r\n\r\n  File \"/home/travis/build/gunthercox/ChatterBot/tests/storage_adapter_tests/test_json_file_storage_adapter.py\", line 220, in test_get_response_statements\r\n\r\n    self.assertEqual(len(responses), 2)\r\n\r\nAssertionError: 3 != 2\r\n```  This is the very first release of Sqlalchemy adapter, that have SQLite as default implementation, remains in **alpha**.\r\n\r\n- Notes: \r\n   - Tables may change (and will), so, save your training data. There no data migration (yet, not for alpha).\r\n   - Performance test not done yet.\r\n   - Tests using others databases not finished.\r\n   - Documentation on the way, any question, go to  #241  or chat on gitter. (faster with mention)\r\n\r\nThanks,\r\nDavi\r\n Finally !   Hi @vkosuri , Indeed.  \r\n there is any way to see exemple using sqlalchemy ?  AttributeError: module 'chatterbot.storage' has no attribute 'SQLAlchemyDatabaseAdapter' ??? so any suggestions or i must copy directly from github ??\r\n Thanks @gunthercox  but some errors :\r\nsqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such table: StatementTable @gunthercox @addelll , Sorry, I'll update documentation, asap.\r\n @gunthercox @davizucon thanks for the greate work , i need one full exemple using Sqlalchemy adapter because i have some errors after second release in heroku like \r\n**_Arguments: ('columns text, text_search are not unique',)_**\r\nI tried to fix that but ....  When I run the chatterbot on my pc server(4c 8 GB)\uff0cit responses very slow\uff0c about serverl seconds. I found that the chatterbot process only use one core although my pc server has 4 cores.\r\nWhy\uff1fHave there some parameter I should ajust!\r\n\r\nHelp! PS : I found every time when i get repsponse from a chatterbot , one core of CPU's usage is 100%. I think it is alse very strange. @gunthercox thank you. I have solved this problem just by changing the storage adpater to mongodb.\r\n  Official example using the Raspberry Pi. Nice thing is that as it uses a 3rd party \"wake word engine\", we don't have to stick to activating the bot with \"Alexa\".\r\n\r\nhttps://github.com/alexa/alexa-avs-sample-app/wiki/Raspberry-Pi Oh hell, https://aws.amazon.com/lex/ Hi @monokal, maybe I'm wrong but I think its a kind of Logic Adapter, right ? You are right, for avs, should be IO adapter, lex is a full chatbot and depends which service will be used. \r\n  When trying to train from and use the Ubuntu Dialog Corpus with the MongoDB Storage Adapter I'm hitting the following exception. The code is pretty much identical to the Ubuntu Corpus example in this repo.\r\n\r\nI believe the issue is related MongoDB not being able to handle strings over 160 characters (which there is in the Ubuntu Corpus). So this should either be somehow resolved, or support dropped as it's currently \"broken\".\r\n\r\n```python\r\nTraceback (most recent call last):\r\n  File \"./InfraBot.py\", line 198, in <module>\r\n    main()\r\n  File \"./InfraBot.py\", line 194, in main\r\n    bot(args)\r\n  File \"./InfraBot.py\", line 91, in __call__\r\n    r = self.bot.get_response(\"are you there?\")\r\n  File \"/usr/local/lib/python3.6/site-packages/chatterbot/chatterbot.py\", line 114, in get_response\r\n    statement, response = self.generate_response(input_statement, session_id)\r\n  File \"/usr/local/lib/python3.6/site-packages/chatterbot/chatterbot.py\", line 134, in generate_response\r\n    response = self.logic.process(input_statement)\r\n  File \"/usr/local/lib/python3.6/site-packages/chatterbot/logic/multi_adapter.py\", line 39, in process\r\n    output = adapter.process(statement)\r\n  File \"/usr/local/lib/python3.6/site-packages/chatterbot/logic/best_match.py\", line 54, in process\r\n    closest_match = self.get(input_statement)\r\n  File \"/usr/local/lib/python3.6/site-packages/chatterbot/logic/best_match.py\", line 16, in get\r\n    statement_list = self.chatbot.storage.get_response_statements()\r\n  File \"/usr/local/lib/python3.6/site-packages/chatterbot/storage/mongodb.py\", line 275, in get_response_statements\r\n    response_query = self.statements.distinct('in_response_to.text')\r\n  File \"/usr/local/lib/python3.6/site-packages/pymongo/collection.py\", line 2030, in distinct\r\n    collation=collation)[\"values\"]\r\n  File \"/usr/local/lib/python3.6/site-packages/pymongo/collection.py\", line 232, in _command\r\n    collation=collation)\r\n  File \"/usr/local/lib/python3.6/site-packages/pymongo/pool.py\", line 419, in command\r\n    collation=collation)\r\n  File \"/usr/local/lib/python3.6/site-packages/pymongo/network.py\", line 116, in command\r\n    parse_write_concern_error=parse_write_concern_error)\r\n  File \"/usr/local/lib/python3.6/site-packages/pymongo/helpers.py\", line 210, in _check_command_response\r\n    raise OperationFailure(msg % errmsg, code, response)\r\npymongo.errors.OperationFailure: distinct too big, 16mb cap\r\n``` I got around the 16mb cap by pulling up mongo shell and entering\r\n\r\ndb.collection.allowDiskUse=\"true\"\r\n\r\nbut... then you hit issues such as this in mongo, after entering an input and while waiting for a response- \r\n\r\n2017-05-15T21:30:24.661-0400 I COMMAND  [conn40] warning: log line attempted (5147kB) over max size (10kB)\r\n\r\nhaven't figured out a workaround for that, but as of right now... It's looking like that corpus is just wayyyy too large tried `db.collection.allowDiskUse=\"true\"` on mongo shell. Does not work in Mongo 3.4 , is a mongo restart needed?\r\n\r\nEven when mongodb aggregation framework is used. MongoDB restricts the BSON document to be not more than 16 MB, so fails .\r\n```\r\ndb.statements.aggregate(\r\n   [\r\n     {\r\n       $group:\r\n         {\r\n           _id: null ,\r\n           distinctText: { $addToSet: \"$in_response_to.text\" }\r\n         }\r\n     },\r\n     { $out : \"aggResults\" }\r\n   ],\r\n   {\r\n       allowDiskUse:true\r\n   }\r\n);\r\n```\r\n More info about this issue https://jira.mongodb.org/browse/SERVER-431?focusedCommentId=22283&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-22283 Running in to this as well now. So, its simply not possible to train on the Ubuntu corpus? @vkosuri  @peterel I never tried, i'll give a try by next week @peterl , tried training on Ubuntu Corpus, In 16 hours, about 70% of the corpus is indexed.\r\ncurrently the bottle neck is the 16MB issue being discussed around using MongoDB Adapter.  @telkomops Then we are in the same situation. I had it running for around 15 hours and now running in to the 16MB issue. How did you proceed? Im thinking of scrapping MongoDB all together and try either some sql-version or maybe some other \"chatbot framework\". The jsonAdapter is simply much too slow to use in my testrunts.   IMO, ChatterBot would really benefit from a rewrite to integrate Keras/TensorFlow as the Machine/Deep Learning backend. It's not a difficult implementation now that Keras has been re-written by Google, complete with high-level Python APIs.\r\n\r\nIt provides powerful, well-maintained Machine Learning models/algorithms which have numerous NLP/chatbot examples on the web, will handle training storage, provides a web-UI to dig in to the bot's Neural Network, training progress, etc), and far more.\r\n\r\nI'd be very happy to contribute should the proposal be accepted as I was thinking of migrating my project away from ChatterBot to Keras anyways, but I'd much rather make a good thing great here.\r\n\r\nSome useful links:\r\n- https://blog.keras.io/keras-as-a-simplified-interface-to-tensorflow-tutorial.html\r\n- https://www.tensorflow.org/\r\n- https://www.youtube.com/watch?v=SJDEOWLHYVo\r\n- https://www.youtube.com/watch?v=5DknTFbcGVM\r\n- https://www.youtube.com/playlist?list=PLQVvvaa0QuDeETZEOy4VdocT7TOjfSA8a Opened proposal under https://github.com/gunthercox/ChatterBot/issues/761\r\n\r\n\"+1\" if you're interested.  +1 @vkosuri Did you find the time to give this a try and reproduce the issue? @vkosuri Hmm, not sure I follow. This issue is regarding using the Ubuntu corpus and training it for a long time only to get a \"pymongo.errors.OperationFailure: distinct too big, 16mb cap\" error. In my case, I trained with the Ubuntu corpus for a couple of hours and all was well, it gave \"decent\" answers. Then I left if over night and when I tried a new conversation I hit this 16mb cap error. \r\n\r\nOr is your comment referring to that it matter which version of the Ubuntu corpus one trains with (the \"built in\" one or this offline one you are referring to)? @peterel , i gave up on the ubuntu corpus, as my ideal scenarios was to train with my internal chat conversations and hit upon the bug #759 ,kind of giving up on chatterbot for now. :( @telkomops I gave up on the Ubuntu corpus as well. Using the built in one and hope users will \"fill up\" som proper responses. Are you going with Keras or Tensorflow instead? Or is there any other similar \"framework\" as Chatterbot youd recommend? @telkomops / @peterel, The Ubuntu corpus is a massive data set. I think it may have been a mistake for me to add documentation and training support for it. ChatterBot isn't ready to handle that much data, yet. I'm working to improve this but the changes required to optimize these queries on large data sets are still a few releases away. @gunthercox Many thanks for your efforts. Chatterbot is very cool :) I do agree though about the Ubuntu corpus. Since it wont \"work\" with Chatterbot atm its probably better to remove it from the docs or at least make folks aware that this wont work now. The alternative is, like for me, to spend days on training and then realizing that it doesnt work. Again, thanks for your efforts!  @vkosuri Hmm, if the Ubuntu Corpus cant be used with Chatterbot, I think its better not to include it at all or at least show a \"disclaimer\". Otherwise, youll end up with folks spending days in training only to see it crash...which is not so good :) The maximum BSON document size is 16 megabytes.\r\n\r\nThere is lots of stuff on this and workarounds on stack overflow.\r\n\r\nMost recommend using GridFS.  Which would mean switching from '.distinct' to '.aggregate' (as mentioned above in this thread too).\r\n\r\nThis doesn't work but it would probably look something like this (mongodb.py):\r\n\r\n    def get_response_statements(self):\r\n        \"\"\"\r\n        Return only statements that are in response to another statement.\r\n        A statement must exist which lists the closest matching statement in the\r\n        in_response_to field. Otherwise, the logic adapter may find a closest\r\n        matching statement that does not have a known response.\r\n        \"\"\"\r\n        #response_query = self.statements.distinct('in_response_to.text')  # current\r\n        response_query = self.statements.aggregate({'$group': {'_id': '$in_response_to.text'}})\r\n\r\n        _statement_query = {\r\n            'text': {\r\n                # '$in': response_query  # current\r\n                '$in': list(response_query)  # works with aggregate\r\n            }\r\n        }\r\n\r\n        _statement_query.update(self.base_query.value())\r\n\r\n        statement_query = self.statements.find(_statement_query)\r\n\r\n        statement_objects = []\r\n\r\n        for statement in list(statement_query):\r\n            statement_objects.append(self.mongo_to_object(statement))\r\n\r\n        return statement_objects\r\n\r\n\r\nhttp://api.mongodb.com/python/current/examples/aggregation.html\r\nhttp://docs.mongodb.org/manual/reference/gridfs/  I know, it doesn't really work THAT well right now, but once one of us trace the origin we will fix it. The only bug? Most statements simply aren't saved. But then again I'm not the best code interpreter myself. :P That seems like a good idea, thanks.  So, using the example from `ChatterBot/examples/ubuntu_corpus_training_example.py`, it seems that the `ubuntu_dialogs.tgz` archive is downloaded and extracted successfully, however, the bot doesn't seem to be picking responses from it after `.train()` and also seems to want to extract the archive on every run. I've tried completely removing the data directory and re-training but nothing I've found seems to help. See below for details:\r\n\r\n**ubuntu_corpus_training_example.py with comments removed:**\r\n```python\r\nfrom chatterbot import ChatBot\r\nimport logging\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\nchatbot = ChatBot(\r\n    'Example Bot',\r\n    trainer='chatterbot.trainers.UbuntuCorpusTrainer'\r\n)\r\n\r\nchatbot.train()\r\n\r\nresponse = chatbot.get_response('How are you doing today?')\r\nprint(response)\r\n```\r\n**The contents of the data directory:**\r\n```sh\r\ndrwxr-xr-x    4 dmi29  1226777485   136B  9 Apr 14:56 .\r\ndrwxr-xr-x    8 dmi29  1226777485   272B  9 Apr 17:45 ..\r\ndrwx------  352 dmi29  1226777485    12K 26 Apr  2015 dialogs\r\n-rw-r--r--    1 dmi29  1226777485   527M  9 Apr 14:56 ubuntu_dialogs.tgz\r\n```\r\n**Execution:**\r\n```sh\r\nExtracting dialogs/10/9995.tsv\r\nExtracting dialogs/10/9996.tsv\r\nExtracting dialogs/10/9997.tsv\r\nExtracting dialogs/10/9998.tsv\r\nExtracting dialogs/10/9999.tsv\r\n... etc ...\r\nINFO:chatterbot.trainers:File extraction complete\r\nINFO:chatterbot.adapters:Recieved input statement: How are you doing today?\r\nINFO:chatterbot.adapters:\"How are you doing today?\" is a known statement\r\nINFO:chatterbot.adapters:No statements have known responses. Choosing a random response to return.\r\nINFO:chatterbot.adapters:Using \"How are you doing today?\" as a close match to \"How are you doing today?\"\r\nINFO:chatterbot.adapters:No response to \"How are you doing today?\" found. Selecting a random response.\r\nINFO:chatterbot.adapters:BestMatch selected \"How are you doing today?\" as a response with a confidence of 0\r\nINFO:chatterbot.adapters:NoKnowledgeAdapter selected \"How are you doing today?\" as a response with a confidence of 0\r\nHow are you doing today?\r\n``` Having dug a little deeper, it seems the issue is that the code in https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/trainers.py#L216 is expecting to find the Ubuntu Dialogs in `data/ubuntu_dialogs`, however, the extraction process places them in `data/dialogs`. On renaming the directory, things seem to be getting read.\r\n\r\n```\r\n[2017-04-11 10:49:02,396][InfraBot][DEBUG] Loaded config: {'general': {'name': 'DELboy'}, 'training': {'readonly': True, 'trainer': 'chatterbot.trainers.UbuntuCorpusTrainer'}}\r\n/usr/local/lib/python3.6/site-packages/chatterbot/storage/jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\n[2017-04-11 10:49:02,683][InfraBot][INFO] Training DELboy...\r\nthats not using 3d glasses 4\r\ni have not seen his second line 4\r\ncrank all the sliders up 4\r\nor buy a preamp ;) 4\r\nall up and i dont want to use a preamp on my eeepc 4\r\ni'm pretty sure the speaker in an eepc will be fairly poor 4\r\non windows its much loader then on ubuntu 4\r\nso i think its a software-problem 4\r\ntry a different driver or different driver settings 4\r\nsame deal, yours is quicker 4\r\ni think so :) 4\r\n... etc ...\r\n``` Hey guys.. just curious, but have you been able to train on the data.  After applying this patch.. and another one regarding utf-8 data formatting (only applicable in py-2.7), I was able to start the training process.  This was very slow.. and after several minutes it appears that only processed a couple meg of training data.  Additionally what is the time complexity for a search... at first glance it would appear that we do a search over the entire space for a best match? Thanks for the quick response.  So I would be right in assuming that it is currently unfeasible to experiment with the entire ubuntu corpus?  Thanks again :) I have some ideas on how you would accomplish this.  If you are interested I will compose them more and share them with you?\r\n\r\nAlso it is pretty cool that your project is mentioned in the upcoming book\r\nhttps://www.manning.com/books/natural-language-processing-in-action\r\n\r\nWhich is how I found it to begin with :)\r\n\r\nThanks again!  4G memory usage is not particularly large, but after the training data reflects a very slow data only 2M did not use mongodb to answer @gunthercox Can you give me a way to write it? If I use the database in the case of trouble to help me stick to your implementation code I learn about my learning chatterbot for a long time has been reflected very slowly on the very distress @gunthercox\r\n I used the mongodb training 373753 data query once the time is 315831ms what way can be faster? This speed really a bit unacceptable ... seeking answers\r\n\r\n`chatbotEnglish = ChatBot(\r\n    \"english mongodb\",\r\n    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',\r\n    logic_adapters=[\r\n        \"chatterbot.logic.MathematicalEvaluation\",\r\n        \"chatterbot.logic.TimeLogicAdapter\",\r\n        'chatterbot.logic.BestMatch'\r\n    ],\r\n    preprocessors = [\r\n        'chatterbot.preprocessors.clean_whitespace',\r\n        'chatterbot.preprocessors.unescape_html'\r\n    ],\r\n    filters=[\r\n        'chatterbot.filters.RepetitiveResponseFilter'\r\n    ],\r\n    input_adapter=\"chatterbot.input.VariableInputTypeAdapter\",\r\n    output_adapter=\"chatterbot.output.OutputAdapter\",\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    database='chatterbot-database',\r\n    read_only=False\r\n)` `        \r\n  for statement in statement_list:\r\n            confidence = self.compare_statements(input_statement, statement)\r\n\r\n            if confidence > closest_match.confidence:\r\n                statement.confidence = confidence\r\n                closest_match = statement\r\n`\r\n\r\nThere has been a cycle in which all cause special slow query data fairly fast here loop matching accuracy can be maintained by the author? @gunthercox \r\n`\r\nfor statement in statement_list:\r\n       confidence = self.compare_statements(input_statement, statement)\r\n        if confidence > closest_match.confidence:\r\n            statement.confidence = confidence\r\n            closest_match = statement\r\n`\r\n\r\nThere has been a cycle in which all cause special slow query data fairly fast here loop matching accuracy can be maintained by the author? @yeshoujquery. I have the same problem,  do you fix it? @whm2300 Did not solve the problem, the author seems to be unable to solve the problem should be the framework itself, I look at the conclusion of the source code thanks \n\n\u53d1\u81ea\u6211\u7684 iPhone\n\n> \u5728 2017\u5e745\u67088\u65e5\uff0c18:08\uff0cyeshoujquery <notifications@github.com> \u5199\u9053\uff1a\n> \n> @whm2300 Did not solve the problem, the author seems to be unable to solve the problem should be the framework itself, I look at the conclusion of the source code\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n @yeshoujquery I'll try to reproduce this problem on my machine next week, will get it back soon. @vkosuri That's better, waiting for your good news, can you let me know? sure @vkosuri Thanks very much @vkosuri Upload it, or can you give me a copy? @vkosuri Where is the code chatterbot seems to be particularly slow to solve @gunthercox  This problem can be solved using the mongodb also useless, or very slow The problem is rather simple to detect. Comparing more than 2000 responses with lexical comparison makes it super slow. Nothing to do with MongoDB. \r\n\r\nA solution can be:\r\ncompute the word vectors for each statement to determine the vector for the whole phrase.\r\nRinse and repeat for the user input. The only thing we then having to do is query the vectors in MongoDB on closest similarity (Cosine Similarity). This will also be more accurate than lexical comparison.\r\n\r\nDrawback:\r\nLoading in a good and accurate word embeddings model into memory will take time.\r\n\r\nSome tips on where to start Google for word2vec, doc2vec, glove, fast text. @vkosuri Mongodb 373753 data time-consuming 89ms, relatively fast before, but can it be faster? Seconds out of that kind? @anthdm You say the solution, I don't choose chatterbot, then I directly choose tensorflow, now want to use chatterbot @yeshoujquery is it possible share your train data? I will debug further more on your train data @vkosuri Some Chinese data, in fact, as long as the order of magnitude will be slow,Do you need? Or chatterbot, how many orders of maximum support? @yeshoujquery I took [English corpus](https://github.com/gunthercox/chatterbot-corpus/tree/master/chatterbot_corpus/data/english), made it as 8MB data, started debugging will update more on this issue. @vkosuri  Well, thank you very much. The amount of data will be slow, and no way out @vkosuri Thank you very much. I'm waiting for your good news @gunthercox  Trained 8.9MB data, with some minor changes observed fallowing stats on machine. i7, 8GB\r\n\r\n<pre>\r\n(venv)vkosuri@vkosuri:~/ChatterBot$ python terminal_mongo_example.py \r\nStarted Trainig\r\nTrainig completed\r\n<b>148.540009022 seconds</b>\r\n2017-05-15,17:59:09.073 INFO {input_adapter} [process_input_statement] Recieved input statement: I enjoy raspberry ice cream.\r\n2017-05-15,17:59:09.074 INFO {input_adapter} [process_input_statement] \"I enjoy raspberry ice cream.\" is a known statement\r\n2017-05-15,17:59:09.180 INFO {best_match} [process] Using \"I enjoy raspberry ice cream.\" as a close match to \"Is it cramped in the computer\"\r\n2017-05-15,17:59:09.182 INFO {best_match} [process] Selecting response from 1 optimal responses.\r\n2017-05-15,17:59:09.182 INFO {response_selection} [get_first_response] Selecting first response from list of 1 options.\r\n2017-05-15,17:59:09.182 INFO {best_match} [process] Response selected. Using \"No.\"\r\n2017-05-15,17:59:09.183 INFO {multi_adapter} [process] BestMatch selected \"No.\" as a response with a confidence of 0.46\r\n2017-05-15,17:59:09.183 INFO {multi_adapter} [process] NoKnowledgeAdapter selected \"I enjoy raspberry ice cream.\" as a response with a confidence of 0\r\nNo.\r\n<b>0.111059904099 seconds</b>\r\n2017-05-15,17:59:09.184 INFO {input_adapter} [process_input_statement] Recieved input statement: I enjoy raspberry ice cream.\r\n2017-05-15,17:59:09.185 INFO {input_adapter} [process_input_statement] \"I enjoy raspberry ice cream.\" is a known statement\r\n2017-05-15,17:59:09.393 INFO {best_match} [process] Using \"I enjoy raspberry ice cream.\" as a close match to \"I enjoy raspberry ice cream.\"\r\n2017-05-15,17:59:09.396 INFO {best_match} [process] No response to \"I enjoy raspberry ice cream.\" found. Selecting a random response.\r\n2017-05-15,17:59:09.397 INFO {multi_adapter} [process] BestMatch selected \"Do you feel.\" as a response with a confidence of 0\r\n2017-05-15,17:59:09.397 INFO {multi_adapter} [process] NoKnowledgeAdapter selected \"I enjoy raspberry ice cream.\" as a response with a confidence of 0\r\n2017-05-15,17:59:09.397 INFO {chatterbot} [learn_response] Adding \"I enjoy raspberry ice cream.\" as a response to \"No.\"\r\nDo you feel.\r\n<b>0.21406006813 seconds</b>\r\n</pre> @yeshoujquery Did you observed any improvement with new changes?  Fixed a typo in the code snippet @gunthercox Master, is there any reason behind the test are failing? Thank you Master! Created a pull request for master :\nhttps://github.com/gunthercox/ChatterBot/pull/677\n\n\nThanks & Regards,\nAnurag Sharma\n\n2017-04-03 9:17 GMT-07:00 Mallikarjunarao Kosuri <notifications@github.com>:\n\n> Thank you Master!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/pull/676#issuecomment-291193389>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AM5g_RnmWNPPa5521Qkh1r2BmrPwTkc8ks5rsRuQgaJpZM4MxAnJ>\n> .\n>\n  hello at all,\r\n\r\ni followed examples and tutorials for testing chatterbot but i have a 'bug' or there is something i don't understand:\r\ni used the terminal example and \r\ni have to wait until 10-15 seconds before the answers come from chatterbot. the conversation is not 'normal'...\r\nmy config is: win10 64 - core I7 - 16gb of ram -- 1To SSD.\r\n\r\nis there here a complete project to test it ? I tired on my machine it is quite fast and working fine as expected. \r\n\r\nSome times it might delay using JsonStorageAdapter because of if it is very huge size around 1MB. \r\n\r\nCould you try un-comment this [line ](https://github.com/gunthercox/ChatterBot/blob/master/examples/terminal_example.py#L7). It will verbose more information on terminal how your request and response are selecting using different logic adapters.\r\n\r\nFor example\r\n\r\n```Bash\r\nType something to begin...\r\nhello\r\nINFO:chatterbot.adapters:Recieved input statement: hello\r\nINFO:chatterbot.adapters:\"hello\" is not a known statement\r\nINFO:chatterbot.adapters:Not processing the statement using <class 'chatterbot.logic.mathematical_evaluation.MathematicalEvaluation'>\r\nINFO:chatterbot.adapters:<class 'chatterbot.logic.time_adapter.TimeLogicAdapter'> selected \"The current time is 09:20 PM\" as a response with a confidence of 0\r\nINFO:chatterbot.adapters:Not processing the statement using <class 'chatterbot.logic.best_match.BestMatch'>\r\nINFO:chatterbot.adapters:<class 'chatterbot.logic.no_knowledge_adapter.NoKnowledgeAdapter'> selected \"hello\" as a response with a confidence of 1\r\nhello\r\nhow are you\r\nINFO:chatterbot.adapters:Recieved input statement: how are you\r\nINFO:chatterbot.adapters:\"how are you\" is not a known statement\r\nINFO:chatterbot.adapters:Not processing the statement using <class 'chatterbot.logic.mathematical_evaluation.MathematicalEvaluation'>\r\nINFO:chatterbot.adapters:<class 'chatterbot.logic.time_adapter.TimeLogicAdapter'> selected \"The current time is 09:20 PM\" as a response with a confidence of 1\r\nINFO:chatterbot.adapters:No statements have known responses. Choosing a random response to return.\r\nINFO:chatterbot.adapters:Using \"how are you\" as a close match to \"hello\"\r\nINFO:chatterbot.adapters:No response to \"hello\" found. Selecting a random response.\r\nINFO:chatterbot.adapters:<class 'chatterbot.logic.best_match.BestMatch'> selected \"hello\" as a response with a confidence of 0\r\nINFO:chatterbot.adapters:<class 'chatterbot.logic.no_knowledge_adapter.NoKnowledgeAdapter'> selected \"how are you\" as a response with a confidence of 0\r\nINFO:chatterbot.chatterbot:Adding \"how are you\" as a response to \"hello\"\r\nThe current time is 09:20 PM\r\n``` thank's for reply,\r\n\r\ni un-commented the line you asked then you have below:\r\n\r\nType something to begin...\r\nhello\r\nINFO:chatterbot.adapters:Recieved input statement: hello\r\nINFO:chatterbot.adapters:\"hello\" is a known statement\r\nINFO:chatterbot.adapters:Not processing the statement using MathematicalEvaluation\r\nINFO:chatterbot.adapters:TimeLogicAdapter selected \"The current time is 06:10 PM\" as a response with a confidence of 0\r\nINFO:chatterbot.adapters:Using \"hello\" as a close match to \"hello\"\r\nINFO:chatterbot.adapters:Selecting response from 1 optimal responses.\r\nINFO:chatterbot.response_selection:Selecting first response from list of 1 options.\r\nINFO:chatterbot.adapters:Response selected. Using \"Greetings!\"\r\nINFO:chatterbot.adapters:BestMatch selected \"Greetings!\" as a response with a confidence of 1.0\r\nINFO:chatterbot.adapters:NoKnowledgeAdapter selected \"hello\" as a response with a confidence of 0\r\nGreetings!\r\n\r\ni have to wait 30 seconds to have this answer... not glad about that as you can expect\r\nthe size of database after training is 151 k not huge at all !\r\nhow many seconds you are waiting for  ? I don't see any issue with my machine.\r\n\r\n```Bash\r\nhelo\r\n2017-04-02,22:22:59.725 INFO {input_adapter}[process_input_statement] Recieved input statement: helo\r\n2017-04-02,22:22:59.815 INFO {input_adapter}[process_input_statement] \"helo\" is not a known statement\r\n2017-04-02,22:22:59.820 INFO {multi_adapter}[process] Not processing the statement using MathematicalEvaluation\r\n2017-04-02,22:22:59.822 INFO {multi_adapter}[process] TimeLogicAdapter selected \"The current time is 10:22 PM\" as a response with a confidence of 0\r\n2017-04-02,22:22:59.825 INFO {best_match}[process] Using \"helo\" as a close match to \"hello\"\r\n2017-04-02,22:22:59.826 INFO {best_match}[process] Selecting response from 1 optimal responses.\r\n2017-04-02,22:22:59.830 INFO {response_selection}[get_first_response] Selecting first response from list of 1 options.\r\n2017-04-02,22:22:59.830 INFO {best_match}[process] Response selected. Using \"how are you\"\r\n2017-04-02,22:22:59.831 INFO {multi_adapter}[process] BestMatch selected \"how are you\" as a response with a confidence of 0.89\r\n2017-04-02,22:22:59.831 INFO {multi_adapter}[process] NoKnowledgeAdapter selected \"helo\" as a response with a confidence of 0\r\nhow are you\r\n ``` You could add logger formatter after line number 8 to know exact time you have been waited\r\n``` python\r\nlogging.basicConfig(format='%(asctime)s.%(msecs)03d %(levelname)s {%(module)s} [%(funcName)s] %(message)s', datefmt='%Y-%m-%d,%H:%M:%S', level=logging.INFO)\r\n``` you'll see now with the new infos provided:\r\n\r\nType something to begin...\r\nhello\r\n2017-04-02,19:23:44.506 INFO {input_adapter} [process_input_statement] Recieved input statement: hello\r\n2017-04-02,19:23:44.568 INFO {input_adapter} [process_input_statement] \"hello\" is a known statement\r\n2017-04-02,19:23:44.568 INFO {multi_adapter} [process] Not processing the statement using MathematicalEvaluation\r\n2017-04-02,19:23:44.568 INFO {multi_adapter} [process] TimeLogicAdapter selected \"The current time is 07:23 PM\" as a response with a confidence of 0\r\n2017-04-02,19:24:03.009 INFO {best_match} [process] Using \"hello\" as a close match to \"Hello\"\r\n2017-04-02,19:24:21.181 INFO {best_match} [process] Selecting response from 2 optimal responses.\r\n2017-04-02,19:24:21.181 INFO {response_selection} [get_first_response] Selecting first response from list of 2 options.\r\n2017-04-02,19:24:21.181 INFO {best_match} [process] Response selected. Using \"Greetings!\"\r\n2017-04-02,19:24:21.181 INFO {multi_adapter} [process] BestMatch selected \"Greetings!\" as a response with a confidence of 1.0\r\n2017-04-02,19:24:21.197 INFO {multi_adapter} [process] NoKnowledgeAdapter selected \"hello\" as a response with a confidence of 0\r\nGreetings!\r\n\r\nAny new ideas with that ?\r\nOr do you have an example to provide more infos for debug this ?\r\n and in the same time, i tried the twitter example and i had an another bug:\r\nFile \"C:\\Python27\\lib\\site-packages\\chatterbot\\trainers.py\", line 131, in __init__\r\n    from twitter import Api as TwitterApi\r\nImportError: cannot import name Api\r\n\r\ndid you experienced the same bug ?\r\n last news, i uninstalled my python 2.7 (but working with others projects) and installed python 3 (clean install)\r\ni have both the sames issues ... if someone can explain me clearly what happens ? another news: tested with Linux too and i have same issues with the twitter error:\r\nPython27\\lib\\site-packages\\chatterbot\\trainers.py\", line 131, in init\r\nfrom twitter import Api as TwitterApi\r\nImportError: cannot import name Api\r\n\r\nSo windows is not faulty because Linux has the same issue ...\r\nAnyone have this bug ? For slowness issue try this example\r\n```Python\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\nimport logging\r\n\r\n# Uncomment the following line to enable verbose logging\r\nlogging.basicConfig(format='%(asctime)s.%(msecs)03d %(levelname)s {%(module)s} [%(funcName)s] %(message)s', datefmt='%Y-%m-%d,%H:%M:%S', level=logging.INFO)\r\n\r\n# Create a new instance of a ChatBot\r\nbot = ChatBot(\"Terminal\",\r\n    storage_adapter=\"chatterbot.storage.JsonFileStorageAdapter\",\r\n    logic_adapters=[\r\n        \"chatterbot.logic.BestMatch\"\r\n    ],\r\n    input_adapter=\"chatterbot.input.TerminalAdapter\",\r\n    output_adapter=\"chatterbot.output.TerminalAdapter\",\r\n    database=\"../database.db\"\r\n)\r\n\r\nprint(\"Type something to begin...\")\r\n\r\n# The following loop will execute each time the user enters input\r\nwhile True:\r\n    try:\r\n        # We pass None to this method because the parameter\r\n        # is not used by the TerminalAdapter\r\n        bot_input = bot.get_response(None)\r\n\r\n    # Press ctrl-c or ctrl-d on the keyboard to exit\r\n    except (KeyboardInterrupt, EOFError, SystemExit):\r\n        break\r\n```\r\nFor twitter issue try to install twitter \r\n``` Bash\r\npip install --upgrade twitter\r\n``` good morning,\r\n\r\ni followed what you said @vkosuri and no changes appears as you can check below:\r\n\r\n```\r\nType something to begin...\r\nhello\r\n2017-04-03,08:40:24.539 INFO {input_adapter} [process_input_statement] Recieved input statement: hello\r\n2017-04-03,08:40:24.618 INFO {input_adapter} [process_input_statement] \"hello\" is a known statement\r\n2017-04-03,08:40:42.808 INFO {best_match} [process] Using \"hello\" as a close match to \"hello\"\r\n2017-04-03,08:41:00.575 INFO {best_match} [process] Selecting response from 1 optimal responses.\r\n2017-04-03,08:41:00.575 INFO {response_selection} [get_first_response] Selecting first response from list of 1 options.\r\n2017-04-03,08:41:00.575 INFO {best_match} [process] Response selected. Using \"Greetings!\"\r\n2017-04-03,08:41:00.575 INFO {multi_adapter} [process] BestMatch selected \"Greetings!\" as a response with a confidence of 1.0\r\n2017-04-03,08:41:00.592 INFO {multi_adapter} [process] NoKnowledgeAdapter selected \"hello\" as a response with a confidence of 0\r\nGreetings!\r\n\r\n```\r\n\r\n36 sec to wait from the beginning ... \r\ntwitter, it's the same but what about \r\n`pip install --upgrade twitter`\r\nin the requirements file from chatterbot, you have:\r\n`chatterbot-corpus>=0.0.1,<1.0.0\r\njsondatabase>=0.1.7,<1.0.0\r\nnltk>=3.2.0,<4.0.0\r\npymongo>=3.3.0,<4.0.0\r\npython-twitter>=3.0.0,<4.0.0`\r\n\r\nthe twitter package is not mentioned, but i installed as you told me but as explained before, the bug is always here and tested both linux and windows and under python 2.7.13 and 3.6.\r\nnow i don't think my config is faulty but bugs in chatterbot. Am i wrong ?\r\n\r\nMy config:\r\nwin10 64 & linux 64 - 16gb ram - 1To SSD - intel I7\r\n @ttrd06 As per my knowledge, I think there is no specified time limit to get response for all requests, it is dependent on different factors for example memory, Operating system, etc.\r\n\r\nDid you problem was resolved after installing ``twitter``.\r\n\r\n@gunthercox Master, could you please comment on this topic?\r\n\r\n @vkosuri twiter pb has been resolved since 2 minutes and others bugs inside with:\r\n`INFO:chatterbot.trainers:Requesting 50 random tweets containing the word Google\r\nINFO:chatterbot.trainers:Adding 1 tweets with responses\r\nTraceback (most recent call last):\r\n  File \"C:/AI/Python/chat/twitter-test.py\", line 40, in <module>\r\n    chatbot.train().encode(\"utf-8\")\r\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot\\trainers.py\", line 213, in train\r\n    self.storage.update(statement)\r\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot\\storage\\jsonfile.py\", line 161, in update\r\n    self.database.data(key=statement.text, value=data)\r\n  File \"C:\\Python27\\lib\\site-packages\\jsondb\\db.py\", line 102, in data\r\n    self._set_content(key, value)\r\n  File \"C:\\Python27\\lib\\site-packages\\jsondb\\db.py\", line 63, in _set_content\r\n    obj = self._get_content()\r\n  File \"C:\\Python27\\lib\\site-packages\\jsondb\\db.py\", line 52, in _get_content\r\n    obj = self.read_data(self.path)\r\n  File \"C:\\Python27\\lib\\site-packages\\jsondb\\file_writer.py\", line 15, in read_data\r\n    obj = decode(content)\r\n  File \"C:\\Python27\\lib\\site-packages\\jsondb\\compat.py\", line 32, in decode\r\n    return json_decode(value, encoding='utf-8', object_hook=json_util.object_hook)\r\n  File \"C:\\Python27\\lib\\json\\__init__.py\", line 352, in loads\r\n    return cls(encoding=encoding, **kw).decode(s)\r\n  File \"C:\\Python27\\lib\\json\\decoder.py\", line 364, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"C:\\Python27\\lib\\json\\decoder.py\", line 380, in raw_decode\r\n    obj, end = self.scan_once(s, idx)\r\nUnicodeDecodeError: 'utf8' codec can't decode byte 0x85 in position 115: invalid start byte\r\n`\r\nso i think this example is completly faulty and not ready to use. i decided to abandon it\r\nyou told me about factors, but did you seen my specs ? 16 gb of ram, SSD, intel I7 ... do you think it's a bad computer ?\r\ni tried CNTK, tensorflow with no issues ...\r\nyou know, if you install something it must work or not.\r\nif it don't work: recycle and try another one\r\n\r\nif @gunthercox has a solution about that, i will do everything he wants for \r\n\r\n hi again,\r\n\r\nnobody have explaination about this too big consuming time ? thank's for reply @gunthercox,\r\n\r\nat this time, twitter is important but secondary. my goal is use chatterbox with a raisonable time to answer.\r\nAs i said before, i followed your tuto:\r\n\r\n`pip install chatterbot`\r\n\r\nand\r\n\r\n`from chatterbot import ChatBot\r\n\r\nchatbot = ChatBot(\r\n    'Ron Obvious',\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer'\r\n)\r\n\r\n# Train based on the english corpus\r\nchatbot.train(\"chatterbot.corpus.english\")\r\n\r\n# Get a response to an input statement\r\nchatbot.get_response(\"Hello, how are you today?\")`\r\n\r\nand finally:\r\n\r\n`# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\nimport logging\r\n\r\n#bot = ChatBot(\"Terminal\")\r\n#bot.storage.drop()\r\n#exit()\r\n# Uncomment the following line to enable verbose logging\r\nlogging.basicConfig(format='%(asctime)s.%(msecs)03d %(levelname)s {%(module)s} [%(funcName)s] %(message)s', datefmt='%Y-%m-%d,%H:%M:%S', level=logging.INFO)\r\n\r\n# Create a new instance of a ChatBot\r\nbot = ChatBot(\"Terminal\",\r\n    storage_adapter=\"chatterbot.storage.JsonFileStorageAdapter\",\r\n    logic_adapters=[\r\n        {\r\n            \"import_path\": \"chatterbot.logic.BestMatch\",\r\n            \"statement_comparison_function\": \"chatterbot.comparisons.levenshtein_distance\",\r\n            \"response_selection_method\": \"chatterbot.response_selection.get_first_response\"\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 0.65,\r\n            'default_response': 'I am sorry, but I do not understand.'\r\n        }\r\n    ],\r\n    input_adapter=\"chatterbot.input.TerminalAdapter\",\r\n    output_adapter=\"chatterbot.output.TerminalAdapter\",\r\n    database=\"./database.db\"\r\n)\r\n\r\nprint(\"Type something to begin...\")\r\n\r\n# The following loop will execute each time the user enters input\r\nwhile True:\r\n    try:\r\n        # We pass None to this method because the parameter\r\n        # is not used by the TerminalAdapter\r\n        bot_input = bot.get_response(None)\r\n\r\n    # Press ctrl-c or ctrl-d on the keyboard to exit\r\n    except (KeyboardInterrupt, EOFError, SystemExit):\r\n        break`\r\n\r\nAnd i have 50 secs of execution with this code or code pasted above from @vkosuri  hello at all,\r\n@gunthercox did you had time to check my issue ?\r\ni tried again today and i always have the same \"bug\" but not with CNTK or Tensorflow.\r\ni wait for your answer please.\r\nThank's in advance Hi, I am also facing the same issue, I also tried creating a completely new virtualenv with new installs.\r\n```Type something to begin...\r\nHello\r\n2017-04-09,22:41:02.238 INFO {input_adapter} [process_input_statement] Recieved input statement: Hello\r\n2017-04-09,22:41:02.383 INFO {input_adapter} [process_input_statement] \"Hello\" is a known statement\r\n2017-04-09,22:41:02.385 INFO {multi_adapter} [process] Not processing the statement using MathematicalEvaluation\r\n2017-04-09,22:41:02.386 INFO {multi_adapter} [process] TimeLogicAdapter selected \"The current time is 10:41 PM\" as a response with a confidence of 0\r\n2017-04-09,22:41:16.632 INFO {best_match} [process] Using \"Hello\" as a close match to \"Hello\"\r\n2017-04-09,22:41:31.025 INFO {best_match} [process] Selecting response from 2 optimal responses.\r\n2017-04-09,22:41:31.025 INFO {response_selection} [get_first_response] Selecting first response from list of 2 options.\r\n2017-04-09,22:41:31.025 INFO {best_match} [process] Response selected. Using \"Greetings!\"\r\n2017-04-09,22:41:31.025 INFO {multi_adapter} [process] BestMatch selected \"Greetings!\" as a response with a confidence of 1.0\r\n2017-04-09,22:41:31.038 INFO {multi_adapter} [process] NoKnowledgeAdapter selected \"Hello\" as a response with a confidence of 0\r\nGreetings!\r\n```\r\nAs you can see it is taking 30 seconds for me with just around 500 statements in the json db file.\r\nI tried debugging it, in \"best_match.py\" module, fetching the data takes 15 seconds and filtering another 15 seconds.\r\n`statement_list = self.chatbot.storage.get_response_statements()` takes 15 seconds\r\n`response_list = self.chatbot.storage.filter(\r\n            in_response_to__contains=closest_match.text\r\n        )` takes 15 seconds.\r\n\r\nThis is for JsonFileStorage which might be the culprit, I haven't tried using MongoDB. I will try using MongoDB and update. Alright, with the MongoDB it seems to work fine without any excessive delays. So the issue seems to be related to JsonFileStorage.\r\n@ttrd06 Try using MongoDB instead, that should solve your problem for now. thank's for you help @somerandomdudeontheinternet and sorry for the late, i took some days for hollidays.\r\ni will try it asap and back to close this issue if ok.\r\n\r\nNice day at all hello at all,\r\n\r\ni confirm what @somerandomdudeontheinternet has said before, use only mongodb adaptor to feel a good experience. json db is just worst with training example include in tutorials.\r\n\r\nthank's for all,\r\nthis issue is closed for me  How do i use images in my corpus, any suggestions? Thanks Master, will it possible through Django framework using some trick of preprocessor   Hey folks,\r\nI pip installed chatterbot to a new virtualenv, but having trouble running the first basic example here: \r\nhttps://chatterbot.readthedocs.io/en/stable/examples.html\r\n\r\nI can see from a search on previous issues that UnsuitableForProductionWarning is an alert only so can be ignored, but the rest of the errors have me stumped.\r\n\r\nHelp please!\r\n\r\n`/Library/Python/2.7/site-packages/chatterbot/storage/jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\nTraceback (most recent call last):\r\n  File \"Basic.py\", line 4, in <module>\r\n    chatbot = ChatBot('Charlie')\r\n  File \"/Library/Python/2.7/site-packages/chatterbot/chatterbot.py\", line 83, in __init__\r\n    self.initialize()\r\n  File \"/Library/Python/2.7/site-packages/chatterbot/chatterbot.py\", line 94, in initialize\r\n    nltk_download_corpus('tokenizers/punkt')\r\n  File \"/Library/Python/2.7/site-packages/chatterbot/utils.py\", line 118, in nltk_download_corpus\r\n    find(resource_path)\r\n  File \"/Library/Python/2.7/site-packages/nltk/data.py\", line 635, in find\r\n    return find(modified_name, paths)\r\n  File \"/Library/Python/2.7/site-packages/nltk/data.py\", line 621, in find\r\n    return ZipFilePathPointer(p, zipentry)\r\n  File \"/Library/Python/2.7/site-packages/nltk/compat.py\", line 366, in _decorator\r\n    return init_func(*args, **kwargs)\r\n  File \"/Library/Python/2.7/site-packages/nltk/data.py\", line 470, in __init__\r\n    zipfile = OpenOnDemandZipFile(os.path.abspath(zipfile))\r\n  File \"/Library/Python/2.7/site-packages/nltk/compat.py\", line 366, in _decorator\r\n    return init_func(*args, **kwargs)\r\n  File \"/Library/Python/2.7/site-packages/nltk/data.py\", line 986, in __init__\r\n    zipfile.ZipFile.__init__(self, filename)\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/zipfile.py\", line 770, in __init__\r\n    self._RealGetContents()\r\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/zipfile.py\", line 811, in _RealGetContents\r\n    raise BadZipfile, \"File is not a zip file\"\r\nzipfile.BadZipfile: File is not a zip file` I also have this problem on python3.5.\r\n\r\nPlease help me, thank you!\r\n\r\n`C:\\Program Files\\Python 3.5\\lib\\site-packages\\chatterbot\\storage\\jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\site-packages\\chatterbot\\chatterbot.py\", line 83, in __init__\r\n    self.initialize()\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\site-packages\\chatterbot\\chatterbot.py\", line 93, in initialize\r\n    nltk_download_corpus('corpora/wordnet')\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\site-packages\\chatterbot\\utils.py\", line 118, in nltk_download_corpus\r\n    find(resource_path)\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\site-packages\\nltk\\data.py\", line 635, in find\r\n    return find(modified_name, paths)\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\site-packages\\nltk\\data.py\", line 621, in find\r\n    return ZipFilePathPointer(p, zipentry)\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\site-packages\\nltk\\compat.py\", line 366, in _decorator\r\n    return init_func(*args, **kwargs)\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\site-packages\\nltk\\data.py\", line 470, in __init__\r\n    zipfile = OpenOnDemandZipFile(os.path.abspath(zipfile))\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\site-packages\\nltk\\compat.py\", line 366, in _decorator\r\n    return init_func(*args, **kwargs)\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\site-packages\\nltk\\data.py\", line 986, in __init__\r\n    zipfile.ZipFile.__init__(self, filename)\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\zipfile.py\", line 1023, in __init__\r\n    self._RealGetContents()\r\n  File \"C:\\Program Files\\Python 3.5\\lib\\zipfile.py\", line 1090, in _RealGetContents\r\n    raise BadZipFile(\"File is not a zip file\")\r\nzipfile.BadZipFile: File is not a zip file` similar issue see https://github.com/gunthercox/ChatterBot/issues/662#issuecomment-289863176 I didn't download NLTK manually. Any ideas on how to resolve?  download NLTK manually, and the issue resolved. @vkosuri thank you vary much! @yumupinglan Thanks Master @gunthercox   Hi everyone\r\nI just started using chatterbot and played around by importing different corpus, as well as adding manual conversations. It seems there is memory from previous conversations. For example, if I do training on the ubuntu database, then redotraining on the English corpus, it seems to have memory of responses from ubuntu. This is creating some very unusual responses  Hi,\r\n\r\nI'd like to know what happens if I happen to train the chatbot twice with the same corpus in the same session.\r\n\r\nWould the database.db (assuming I'm using the JsonFileStorageAdapter) get updated with the training dataset (with increment to the 'occurence' field)?  Fixed some minor typos in the doc files  When i initialize a chatterbot  like this \r\nInstall chatterbot using  `pip install django chatterbot`, then add `chatterbot.ext.django_chatterbot` in Installed apps and then run `./manage.py runserver`\r\n\r\nshows Error\r\n```\r\nUnhandled exception in thread started by <function wrapper at 0x7f5f7ea17410>\r\nTraceback (most recent call last):\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/utils/autoreload.py\", line 226, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/core/management/commands/runserver.py\", line 121, in inner_run\r\n    self.check(display_num_errors=True)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/core/management/base.py\", line 374, in check\r\n    include_deployment_checks=include_deployment_checks,\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/core/management/base.py\", line 361, in _run_checks\r\n    return checks.run_checks(**kwargs)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/core/checks/registry.py\", line 81, in run_checks\r\n    new_errors = check(app_configs=app_configs)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/core/checks/urls.py\", line 14, in check_url_config\r\n    return check_resolver(resolver)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/core/checks/urls.py\", line 24, in check_resolver\r\n    for pattern in resolver.url_patterns:\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/utils/functional.py\", line 35, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/urls/resolvers.py\", line 313, in url_patterns\r\n    patterns = getattr(self.urlconf_module, \"urlpatterns\", self.urlconf_module)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/utils/functional.py\", line 35, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/urls/resolvers.py\", line 306, in urlconf_module\r\n    return import_module(self.urlconf_name)\r\n  File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\r\n    __import__(name)\r\n  File \"/home/tapish/noransoft/chatbot/chatbot/urls.py\", line 21, in <module>\r\n    url(r'^chatterbot/', include('chatterbot.ext.django_chatterbot.urls', namespace='chatterbot')),\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/django/conf/urls/__init__.py\", line 50, in include\r\n    urlconf_module = import_module(urlconf_module)\r\n  File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\r\n    __import__(name)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/chatterbot/ext/django_chatterbot/urls.py\", line 3, in <module>\r\n    from .views import ChatterBotView\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/chatterbot/ext/django_chatterbot/views.py\", line 8, in <module>\r\n    class ChatterBotViewMixin(object):\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/chatterbot/ext/django_chatterbot/views.py\", line 13, in ChatterBotViewMixin\r\n    chatterbot = ChatBot(**settings.CHATTERBOT)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/chatterbot/chatterbot.py\", line 83, in __init__\r\n    self.initialize()\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/chatterbot/chatterbot.py\", line 94, in initialize\r\n    nltk_download_corpus('tokenizers/punkt')\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/chatterbot/utils.py\", line 118, in nltk_download_corpus\r\n    find(resource_path)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/nltk/data.py\", line 635, in find\r\n    return find(modified_name, paths)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/nltk/data.py\", line 621, in find\r\n    return ZipFilePathPointer(p, zipentry)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/nltk/compat.py\", line 366, in _decorator\r\n    return init_func(*args, **kwargs)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/nltk/data.py\", line 470, in __init__\r\n    zipfile = OpenOnDemandZipFile(os.path.abspath(zipfile))\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/nltk/compat.py\", line 366, in _decorator\r\n    return init_func(*args, **kwargs)\r\n  File \"/home/tapish/noransoft/chatbot/venv/local/lib/python2.7/site-packages/nltk/data.py\", line 986, in __init__\r\n    zipfile.ZipFile.__init__(self, filename)\r\n  File \"/usr/lib/python2.7/zipfile.py\", line 770, in __init__\r\n    self._RealGetContents()\r\n  File \"/usr/lib/python2.7/zipfile.py\", line 811, in _RealGetContents\r\n    raise BadZipfile, \"File is not a zip file\"\r\nzipfile.BadZipfile: File is not a zip file\r\n``` @nony05 did you tried manually download the files? And also try to upgrade chatterbot to latest version  ``pip install --upgrade chatterbot``  I have an experiment using [RethinkDB](https://rethinkdb.com/) as storage recently - since JSON definetely couldn't be used in production and i'm not Mongo fan. @gunthercox is this something you might be interested in? I could submit a PR soon if that is the case :)\r\n\r\nCool library anyway. Cheers! Interesting. Could you outline the direction of those refactor?  How this is going to be implemented in distant future described here https://github.com/gunthercox/ChatterBot/issues/528 @gunthercox apologies i thought #528 will apply storage adapters also. Thanks Master.  Hi,\r\n\r\nI have written a couchdb trainer that trains data stored in couchdb.  It works on my local... Would it be possible for me to submit the trainer to you?\r\n\r\nSorry, first time contributor to any git project.\r\n\r\nRegards,\r\nSunil\r\n  Added boolean `use_django_models` option for ChatterBot settings to avoid problems with splitted databases usage.  How can we make the bot to extract certain keywords from a sentence?\r\n\r\nExample 1:\r\n\r\n`User Question:         What is the weather in Seattle?`\r\n\r\n_(Bot reads keyword 'Seattle'. Gets weather in Seattle by some Weather API. Return the weather)_\r\n\r\n`Bot Answer:              Weather in Seattle is XX.`\r\n\r\nExample 2:\r\n\r\n`User Question:          May I know the weather in London?`\r\n\r\n_(Bot reads keyword 'London'. Gets weather in London by some Weather API. Return the weather)_\r\n\r\n`Bot Answer:              Weather in London is XX. `\r\n\r\nIn the above question, I need to extract the key words 'Seattle' and 'London'. How is this possible in the chatbot? \r\n\r\nAny idea how to implement this feature? I think this might also help you https://textblob.readthedocs.io/en/dev/  Hello,\r\n\r\nAs i use the parsing module for datetime conversion, in the function '**date_from_relative_week_year**' the ordinal value that is being passed into the function is not being used. \r\n\r\nFor example if the text input was next 3 weeks... the output is being of only one week. i believe this is because ordinal is not being used here. I tried to fix it my myself i adding the ordinal value to the relative date, but i am unsuccessful in doing so. \r\n\r\nAny help on this issue is appreciated. Thank you for looking into this @gunthercox   Dear Altruist,\r\n\r\nI want to contribute in this project. Before going to join with it, i have a very simple question. What machine learning techniques has been used in this project?\r\n\r\nCan you please share in details if possible?\r\n\r\n The purpose of [chatterbot ](http://chatterbot.readthedocs.io/en/stable/index.html) is use in [Salvius the Robot ](http://blog.salvius.org/) for more information available [here](http://blog.salvius.org/2014/09/when-good-chat-bots-go-bad.html).\r\n\r\nThe major techniques used here, as far of i know\r\n\r\n1. You could [train](http://chatterbot.readthedocs.io/en/stable/training.html) your bot\r\n2. Build your [corpus data](http://chatterbot.readthedocs.io/en/stable/corpus.html)\r\n3. Store corpus into different [DB](http://chatterbot.readthedocs.io/en/stable/storage/index.html)\r\n4. You could apply [preprocessors ](http://chatterbot.readthedocs.io/en/stable/preprocessors.html) on your corpus.\r\n5. [Django integration](http://chatterbot.readthedocs.io/en/stable/django/index.html)\r\n\r\n @gunthercox  Please correct me if I am wrong.\r\n\r\nFor the sake of **Search-based artificial intelligence** I have found following optional algorithms implemented in **ChatterBot** that can be used as the 'statement_comparison_function' for a logic adapter:\r\n\r\n**_levenshtein_distance_** : for measuring character based text similarity\r\n\r\n**_synset_distance_** : for calculating the synonymous similarity between statements\r\n\r\n**_jaccard_similarity_** : for measuring term based text similarity\r\n\r\nAnd **Bayesian networks** is used in comparing _sentiments_.\r\n\r\nAmong these **levenshtein_distance** is being used as the default method for finding the best match among statements\r\n\r\n`chatterbot/comparisons.py` contains the implementation of the above mentioned methods.  Here's my setup. \r\n```\r\nchatterbot = ChatBot(\"Training Example\",\r\n\tdatabase='CommentDatabase.json',\r\n\tlogic_adapters=[\t\r\n\t    {\r\n            'import_path': 'chatterbot.logic.BestMatch'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 0.70,\r\n            'default_response': 'OhNo'\r\n        }\r\n        ],\r\n\r\n\t)\r\nchatterbot.set_trainer(ChatterBotCorpusTrainer)\r\n\r\nchatterbot.train(\r\n    \"chatterbot.corpus.test\"\r\n)  \r\n```\r\n\r\nI thought it only gave the types of responses originally found in the corpus (then the database, the corpus I created was pretty small). An example of it not doing what it's supposed to be doing, is if it receives a 'no' response, it might type 'No' back. Another weird thing is it has given responses that were previously received as questions. Does it also get trained each time `chatterbot.get_response()` is called? \r\n\r\n```\r\nfor q in questions:\r\n\tfull_text = q.find_element_by_class_name(\"full-text\").text\r\n\tif len(full_text) < 20:\r\n\t\tprint(full_text)\r\n\t\tresponse = chatterbot.get_response(full_text)\r\n\t\tif response == 'OhNo':\t\t\t\t\r\n\t\t\tcontinue\r\n```\r\nInside of the test folder: \r\nhttp://pastebin.com/UVCyKYYB \r\nhttp://pastebin.com/JNmzSrN4\r\n\r\nI also wondered if any json file I had was malformed, like a missing or extra comma, an unclosed quote, etc. There doesn't seem to be any of those things going on. I did not write any code to actually store the types of input it gets, other than inside of the variables of course until the looping is done with.  \r\nOf course, I deleted the CommentDatabase.json file a number of times to try and get it to start fresh from the corpus I specified, but it continued to behave poorly like the two examples I've given.  Same is the case here. I am even getting unexpected results. If i train it only for Corpus and the previously i trained only for greetings. Still it retrieves bad output (which i have never trained ) some times simple \"single letter words\". I did deleted the json file still. I checked it , There was a path difference as well if you are using an IDE like PYCHARM, check the path that the pYCHARM is considering , there must be another json file which its referring too. I checked it and i did had on the active path of PYCHARM. plus I did faced some anonymus responces like \"V\" <-- only when i said \"Tweet on twitter\" Interesting, I didn't see another file it was referring to. I didn't use PyCharm for it, but the problem seemed to just go away after I started using mongodb. Not sure if that's what solved it or not, in my case.   While reading the Django docs, I noticed a few spelling errors. I fixed them on this branch.     **# have created a simple Flask app using ChatterBot with Heroku but \ud83d\udc4d:** \r\n`\r\n2017-03-03T09:29:05.195670+00:00 app[web.1]: Traceback (most recent call last):\r\n2017-03-03T09:29:05.195672+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/gunicorn/arbiter.py\", line 557, in spawn_worker\r\n2017-03-03T09:29:05.195673+00:00 app[web.1]:     worker.init_process()\r\n2017-03-03T09:29:05.195675+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/gunicorn/workers/base.py\", line 126, in init_process\r\n2017-03-03T09:29:05.195675+00:00 app[web.1]:     self.load_wsgi()\r\n2017-03-03T09:29:05.195676+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/gunicorn/workers/base.py\", line 136, in load_wsgi\r\n2017-03-03T09:29:05.195676+00:00 app[web.1]:     self.wsgi = self.app.wsgi()\r\n2017-03-03T09:29:05.195678+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/gunicorn/app/base.py\", line 67, in wsgi\r\n2017-03-03T09:29:05.195678+00:00 app[web.1]:     self.callable = self.load()\r\n2017-03-03T09:29:05.195679+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/gunicorn/app/wsgiapp.py\", line 65, in load\r\n2017-03-03T09:29:05.195680+00:00 app[web.1]:     return self.load_wsgiapp()\r\n2017-03-03T09:29:05.195681+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/gunicorn/app/wsgiapp.py\", line 52, in load_wsgiapp\r\n2017-03-03T09:29:05.195681+00:00 app[web.1]:     return util.import_app(self.app_uri)\r\n2017-03-03T09:29:05.195682+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/gunicorn/util.py\", line 357, in import_app\r\n2017-03-03T09:29:05.195683+00:00 app[web.1]:     __import__(module)\r\n2017-03-03T09:29:05.195684+00:00 app[web.1]:   File \"/app/app_me.py\", line 7, in <module>\r\n2017-03-03T09:29:05.195687+00:00 app[web.1]:     english_bot = ChatBot(\"English Bot\")\r\n2017-03-03T09:29:05.195688+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/chatterbot/chatterbot.py\", line 83, in __init__\r\n2017-03-03T09:29:05.195688+00:00 app[web.1]:     self.initialize()\r\n2017-03-03T09:29:05.195689+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/chatterbot/chatterbot.py\", line 93, in initialize\r\n2017-03-03T09:29:05.195690+00:00 app[web.1]:     nltk_download_corpus('corpora/wordnet')\r\n2017-03-03T09:29:05.195690+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/chatterbot/utils.py\", line 118, in nltk_download_corpus\r\n2017-03-03T09:29:05.195691+00:00 app[web.1]:     find(resource_path)\r\n2017-03-03T09:29:05.195692+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/nltk/data.py\", line 635, in find\r\n2017-03-03T09:29:05.195692+00:00 app[web.1]:     return find(modified_name, paths)\r\n2017-03-03T09:29:05.195693+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/nltk/data.py\", line 621, in find\r\n2017-03-03T09:29:05.195694+00:00 app[web.1]:     return ZipFilePathPointer(p, zipentry)\r\n2017-03-03T09:29:05.195695+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/nltk/compat.py\", line 366, in _decorator\r\n2017-03-03T09:29:05.195695+00:00 app[web.1]:     return init_func(*args, **kwargs)\r\n2017-03-03T09:29:05.195696+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/nltk/data.py\", line 470, in __init__\r\n2017-03-03T09:29:05.195697+00:00 app[web.1]:     zipfile = OpenOnDemandZipFile(os.path.abspath(zipfile))\r\n2017-03-03T09:29:05.195697+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/nltk/compat.py\", line 366, in _decorator\r\n2017-03-03T09:29:05.195698+00:00 app[web.1]:     return init_func(*args, **kwargs)\r\n2017-03-03T09:29:05.195699+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/site-packages/nltk/data.py\", line 986, in __init__\r\n2017-03-03T09:29:05.195699+00:00 app[web.1]:     zipfile.ZipFile.__init__(self, filename)\r\n2017-03-03T09:29:05.195700+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/zipfile.py\", line 1100, in __init__\r\n2017-03-03T09:29:05.195701+00:00 app[web.1]:     self._RealGetContents()\r\n2017-03-03T09:29:05.195701+00:00 app[web.1]:   File \"/app/.heroku/python/lib/python3.6/zipfile.py\", line 1167, in _RealGetContents\r\n2017-03-03T09:29:05.195702+00:00 app[web.1]:     raise BadZipFile(\"File is not a zip file\")\r\n2017-03-03T09:29:05.195702+00:00 app[web.1]: zipfile.BadZipFile: File is not a zip file\r\n2017-03-03T09:29:05.195985+00:00 app[web.1]: [2017-03-03 09:29:05 +0000] [9] [INFO] Worker exiting (pid: 9)\r\n2017-03-03T09:29:05.338455+00:00 app[web.1]: [nltk_data]   Unzipping corpora/wordnet.zip.\r\n2017-03-03T09:29:05.802331+00:00 app[web.1]: [nltk_data] Downloading package punkt to /app/nltk_data...\r\n2017-03-03T09:29:06.093500+00:00 app[web.1]: [nltk_data]   Unzipping tokenizers/punkt.zip.\r\n2017-03-03T09:29:06.598217+00:00 app[web.1]: [nltk_data] Downloading package vader_lexicon to /app/nltk_data...\r\n2017-03-03T09:29:06.613188+00:00 app[web.1]: [2017-03-03 09:29:06 +0000] [8] [INFO] Worker exiting (pid: 8)\r\n2017-03-03T09:29:06.752578+00:00 app[web.1]: [2017-03-03 09:29:06 +0000] [4] [INFO] Shutting down: Master\r\n2017-03-03T09:29:06.752664+00:00 app[web.1]: [2017-03-03 09:29:06 +0000] [4] [INFO] Reason: Worker failed to boot.\r\n2017-03-03T09:29:06.866228+00:00 heroku[web.1]: State changed from up to crashed\r\n2017-03-03T09:29:06.822642+00:00 heroku[web.1]: Process exited with status 3 ` the simple example didn't work with flask in heroku , i tested the example https://github.com/chamkank/flask-chatterbot\r\n\r\nfrom chatterbot import ChatBot\r\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\r\nfrom langdetect import detect_langs\r\nfrom time import sleep\r\nimport json\r\nfrom chatterbot.conversation.session import ConversationSessionManager\r\nimport uuid\r\n\r\nchatbot = ChatBot(\"Adddell\", silence_performance_warning=False)\r\n\r\nchatbot.set_trainer(ChatterBotCorpusTrainer)\r\nchatbot.train(\"chatterbot.corpus.french\")\r\nchatbot.train(\r\n    \"chatterbot.corpus.french.greetings\",\r\n    \"chatterbot.corpus.french.trivia\", )\r\n\r\n yes it's working localy  hi just tell me best config (python version and requirements) that should i use to test it in server If it still doesn't work after that, I recommend using [PythonAnywhere](https://www.pythonanywhere.com/) instead of Heroku. It worked without a hitch in the past, when I hosted the live demo. You should add these to your `nltk.txt` so heroku will download these when build.\r\n\r\n```\r\nwordnet\r\nstopwords\r\npunkt\r\nvader_lexicon\r\n\r\n``` A example project here https://github.com/vkosuri/chatterbot-live-example No it is working https://chatterbot-live-example.herokuapp.com/ @vkosuri I doubt that. Can you try with fresh installation. I too ran into the same problem when I deploy in the first time.  Hello,\r\n\r\nI wanted to test out the ChatterBot-Voice. But when I used the \"pip install chatterbot-voice\" command, it uninstalled my chatterbot 5.0, which is really annoying. I had to uninstall chatterbot-voice and chatterbot, to reinstall chatterbot to get chatterbot to work again.\r\n\r\nHow can I install chatterbot-voice, without it uninstalling chatterbot..?\r\n  Added corpus training data on the topic of computers in english language. Hi @gunthercox  I can see that you have aproved my pull request but i cant see it on the master branch that is i cant see it merged with the master. I'm relatively new to open source contribution so if you could tell me what to do now i'll really appreciate it. I have lots of corpus training data on other topics that i want to commit.\r\nThanks. No not at all. Infact have already created a pull request on that repository.\r\nThanks for the guidance.  Upon trying to run my app locally I get the above error that occurs on the database_uri line.\r\n\r\n```\r\n# Create a new instance of a ChatBot\r\nbot = ChatBot(\"Terminal\",\r\n              storage_adapter=\"chatterbot.storage.MongoDatabaseAdapter\",\r\n              logic_adapters=[\r\n                  \"chatterbot.logic.MathematicalEvaluation\",\r\n                  \"chatterbot.logic.TimeLogicAdapter\",\r\n                  \"chatterbot.logic.BestMatch\"\r\n              ],\r\n              input_adapter=\"chatterbot.input.VariableInputTypeAdapter\",\r\n              output_adapter=\"chatterbot.output.OutputAdapter\",\r\n              output_format='text',\r\n              database_uri=\"mongodb://heroku_address:password@ds1234567.mlab.com:12345/heroku_address\"\r\n              )\r\n```\r\n\r\nFull stack trace:\r\n\r\n```\r\nUnhandled exception in thread started by <function check_errors.<locals>.wrapper at 0x04BC6198>\r\nTraceback (most recent call last):\r\n  File \"g:\\Python\\lib\\site-packages\\django\\utils\\autoreload.py\", line 226, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"g:\\Python\\lib\\site-packages\\django\\core\\management\\commands\\runserver.py\", line 121, in inner_run\r\n    self.check(display_num_errors=True)\r\n  File \"g:\\Python\\lib\\site-packages\\django\\core\\management\\base.py\", line 374, in check\r\n    include_deployment_checks=include_deployment_checks,\r\n  File \"g:\\Python\\lib\\site-packages\\django\\core\\management\\base.py\", line 361, in _run_checks\r\n    return checks.run_checks(**kwargs)\r\n  File \"g:\\Python\\lib\\site-packages\\django\\core\\checks\\registry.py\", line 81, in run_checks\r\n    new_errors = check(app_configs=app_configs)\r\n  File \"g:\\Python\\lib\\site-packages\\django\\core\\checks\\urls.py\", line 14, in check_url_config\r\n    return check_resolver(resolver)\r\n  File \"g:\\Python\\lib\\site-packages\\django\\core\\checks\\urls.py\", line 24, in check_resolver\r\n    for pattern in resolver.url_patterns:\r\n  File \"g:\\Python\\lib\\site-packages\\django\\utils\\functional.py\", line 35, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"g:\\Python\\lib\\site-packages\\django\\urls\\resolvers.py\", line 313, in url_patterns\r\n    patterns = getattr(self.urlconf_module, \"urlpatterns\", self.urlconf_module)\r\n  File \"g:\\Python\\lib\\site-packages\\django\\utils\\functional.py\", line 35, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"g:\\Python\\lib\\site-packages\\django\\urls\\resolvers.py\", line 306, in urlconf_module\r\n    return import_module(self.urlconf_name)\r\n  File \"g:\\Python\\lib\\importlib\\__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 665, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\r\n  File \"g:\\Git\\ChatterbotTest\\chatterbottest\\urls.py\", line 22, in <module>\r\n    url(r'^myapp/', include('myapp.urls')),\r\n  File \"g:\\Python\\lib\\site-packages\\django\\conf\\urls\\__init__.py\", line 50, in include\r\n    urlconf_module = import_module(urlconf_module)\r\n  File \"g:\\Python\\lib\\importlib\\__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 958, in _find_and_load_unlocked\r\n  File \"<frozen importlib._bootstrap>\", line 673, in _load_unlocked\r\n  File \"<frozen importlib._bootstrap_external>\", line 665, in exec_module\r\n  File \"<frozen importlib._bootstrap>\", line 222, in _call_with_frames_removed\r\n  File \"g:\\Git\\ChatterbotTest\\myapp\\urls.py\", line 3, in <module>\r\n    from myapp.views import MyApp\r\n  File \"g:\\Git\\ChatterbotTest\\myapp\\views.py\", line 29, in <module>\r\n    database_uri=\"mongodb://heroku_24sw30n9:bla8gdmaukpnmdau20e3aaeaba@ds113938.mlab.com:13938/heroku_24sw30n9\"\r\n  File \"g:\\Python\\lib\\site-packages\\chatterbot\\chatterbot.py\", line 37, in __init__\r\n    self.storage = utils.initialize_class(storage_adapter, **kwargs)\r\n  File \"g:\\Python\\lib\\site-packages\\chatterbot\\utils.py\", line 33, in initialize_class\r\n    return Class(**kwargs)\r\n  File \"g:\\Python\\lib\\site-packages\\chatterbot\\storage\\mongodb.py\", line 102, in __init__\r\n    self.statements.create_index('text', unique=True)\r\n  File \"g:\\Python\\lib\\site-packages\\pymongo\\collection.py\", line 1529, in create_index\r\n    self.__create_index(keys, kwargs)\r\n  File \"g:\\Python\\lib\\site-packages\\pymongo\\collection.py\", line 1430, in __create_index\r\n    parse_write_concern_error=True)\r\n  File \"g:\\Python\\lib\\site-packages\\pymongo\\collection.py\", line 232, in _command\r\n    collation=collation)\r\n  File \"g:\\Python\\lib\\site-packages\\pymongo\\pool.py\", line 419, in command\r\n    collation=collation)\r\n  File \"g:\\Python\\lib\\site-packages\\pymongo\\network.py\", line 116, in command\r\n    parse_write_concern_error=parse_write_concern_error)\r\n  File \"g:\\Python\\lib\\site-packages\\pymongo\\helpers.py\", line 210, in _check_command_response\r\n    raise OperationFailure(msg % errmsg, code, response)\r\npymongo.errors.OperationFailure: not authorized on chatterbot-database to execute command { createIndexes: \"statements\", indexes: [ { key: { text: 1 }, unique: true, name: \"text_1\" } ] }\r\n```\r\n\r\nInterestingly, I connected to the database using the command line and ran the above command and got a success message returned. Running the app still causes this error, however.\r\n\r\nIs this an error with mLab?  I'm currently to build a system that process some errors and returns a string message, and need to force it,  changing the \"Keyboard\" to a str variable, for chatterbot give a response. Anyone have any idea how to do this?  Hello @gunthercox Not returned, but inserted in someway, instead of getting the value from the keyboard, i need to use string that is in my python program.  me too facing the same issue!!!\r\n\r\nFile \"C:/Users/Priyanka Baviskar/Documents/py_2/chatbot_demo.py\", line 8, in \r\nfrom chatterbot import ChatBot\r\n\r\nFile \"chatterbot.py\", line 7, in\r\n\r\nImportError: cannot import name ChatBot\r\n\r\nand yes I don't have any directories named utils and adapters checked that approach too!!\r\nplease help.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/26005427/23350198/ede4a7da-fcde-11e6-879a-7f09cdd5c4bb.png)\r\n![image](https://cloud.githubusercontent.com/assets/26005427/23350215/17adda82-fcdf-11e6-9dbd-a8751a660f6c.png)\r\n\r\nI am using anaconda 2 for python 2.7.\r\nyour help would be really appreciated \r\nThank You. @priyanka22kar did you tried same example on ``Python2.7``, \r\n\r\nWhich version of chatterbot are you using, to get chatterbot version ``python -m chatterbot --version`` ![image](https://cloud.githubusercontent.com/assets/26005427/23350645/fc8ace38-fce1-11e6-94c0-2ff87493a3d5.png)\r\n\r\nI did try in python 2.7 still the same error could you provide error stack trace for python2.7 I \r\n![image](https://cloud.githubusercontent.com/assets/26005427/23350891/be98970c-fce3-11e6-9685-c17bb85e633b.png)\r\n My guess could issue with your python path. http://stackoverflow.com/questions/33549546/python-path-issue\r\n\r\nAdd these steps at startup to know where your path is setted.\r\n\r\n``` Python\r\nprint sys.path\r\n``` ![image](https://cloud.githubusercontent.com/assets/26005427/23351551/e040ed88-fce7-11e6-9e1c-92ee112c2379.png)\r\n I am not sure what happening, In a general process what i am doing on a new windows machine\r\n\r\n```\r\npip install --upgrade pip\r\npip install chatterbot\r\npython -m chatterbot --version\r\n```\r\n\r\nI am not familer with Anaconda, By looking into [setup.py](https://github.com/gunthercox/ChatterBot/blob/master/setup.py#L60) it supports only python.\r\n\r\n**It is not recommended,** you may try to \r\n\r\n``` \r\npip uninstall chatterbot\r\npip install chatterbot\r\npython -m chatterbot --version\r\n```\r\n\r\nStill if problem persists try to remove python2 and install a fresh copy do above steps. I hope this will help you. Sir I tried your suggestion\r\nStill not working  its working fine with python 3.5\r\nbut  over here i am tring to execute the twitter data training example its showing an error\r\n![image](https://cloud.githubusercontent.com/assets/26005427/23356236/1ce97d2e-fcff-11e6-8dfe-b3246d17a63d.png)\r\n\r\n[{'code': 179, 'message': 'Sorry, you are not authorized to see this status.'}]\r\n[{'code': 144, 'message': 'No status found with that ID.'}]\r\n\r\n\r\ncan you explain how to resolve it? and further more after training the twitter data to the bot \r\nwill the bot be able to fetch the answers from twitter for a given question or how is this example useful? \r\nThank You\r\n  Here is an example located here http://chatterbot.readthedocs.io/en/stable/training.html#twitter-training-example it stopped executing in python 3.5 too\r\n \r\n![image](https://cloud.githubusercontent.com/assets/26005427/23361868/d1649ca2-fd18-11e6-84fe-c6565669b360.png)\r\n\r\ni searched solution for this problem\r\nfind . -name '*.pyc' -delete\r\nfor removing pyc files \r\nbut it says\r\n\r\n\r\n![Uploading image.png\u2026]()\r\n\r\n @gunthercox  That would be really helpful \r\nThank You I re-installed everything \r\nnow previous error isn't displaying \r\nbut when i am trying to run the gitter bot example is gives me error\r\n\r\nThis is how the simple example is working :\r\n![image](https://cloud.githubusercontent.com/assets/26005427/23401389/86a95738-fdcd-11e6-98d7-220a0dd45d6b.png)\r\n\r\nThis is the new error i am facing \r\n![image](https://cloud.githubusercontent.com/assets/26005427/23401560/2cc3e62e-fdce-11e6-9c17-8315cbeb1765.png)\r\n\r\nplease Kindly help !! Your help will be really appreciated!!!\r\n@gunthercox @vkosuri \r\n\r\nThank You.\r\n  @priyanka22kar I assume the settings is from ``Django``, You can rewrite like this, replace with your gitter ``room_id`` and ``api_key``\r\n\r\n\r\n```Python\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\nimport logging\r\n\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\nchatbot = ChatBot(\r\n    'GitterBot',\r\n    gitter_room=\"YOUR_GITTER_ROOM_ID\",\r\n    gitter_api_token=\"YOUR_GITTER_API_TOKEN\",\r\n    gitter_only_respond_to_mentions=False,\r\n    input_adapter='chatterbot.input.Gitter',\r\n    output_adapter='chatterbot.output.Gitter',\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer'\r\n)\r\n``` @vkosuri \r\nThe above changes in code executes but throws an error:\r\n\r\n\r\nrunfile('C:/Users/Priyanka Baviskar/Documents/py_2/chatbot_demo_gitter_demo.py', wdir='C:/Users/Priyanka Baviskar/Documents/py_2')\r\nC:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\storage\\jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): api.gitter.im\r\nINFO:chatterbot.adapters:401 joining room https://api.gitter.im/v1/rooms\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-23-983eb2bfb276>\", line 1, in <module>\r\n    runfile('C:/Users/Priyanka Baviskar/Documents/py_2/chatbot_demo_gitter_demo.py', wdir='C:/Users/Priyanka Baviskar/Documents/py_2')\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\spyder\\utils\\site\\sitecustomize.py\", line 866, in runfile\r\n    execfile(filename, namespace)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\spyder\\utils\\site\\sitecustomize.py\", line 102, in execfile\r\n    exec(compile(f.read(), filename, 'exec'), namespace)\r\n\r\n  File \"C:/Users/Priyanka Baviskar/Documents/py_2/chatbot_demo_gitter_demo.py\", line 19, in <module>\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer'\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\chatterbot.py\", line 38, in __init__\r\n    self.input = utils.initialize_class(input_adapter, **kwargs)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\utils.py\", line 33, in initialize_class\r\n    return Class(**kwargs)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\input\\gitter.py\", line 31, in __init__\r\n    room_data = self.join_room(self.gitter_room)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\input\\gitter.py\", line 58, in join_room\r\n    self._validate_status_code(response)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\input\\gitter.py\", line 41, in _validate_status_code\r\n    raise self.HTTPStatusException('{} status code recieved'.format(code))\r\n\r\nHTTPStatusException: '401 status code recieved'\r\n\r\n 401 represent unauthorized, check with api and room id 401 represent unauthorized, check with api and room id @vkosuri  @gunthercox  Sir I have 2 Queries:\r\n[1]\r\nWhen I created an app using gitter \r\nI received:\r\nTOKEN\t\r\nOAUTH KEY\t\r\nOAUTH SECRET\t\r\nREDIRECT URL\t\r\n\r\nSo I applied it in the code as follows:\r\n![image](https://cloud.githubusercontent.com/assets/26005427/23403106/9c2f2eaa-fdd4-11e6-8ade-5aea00d64c8c.png)\r\n\r\n\r\nAnd when executed got the following error:\r\nrunfile('C:/Users/Priyanka Baviskar/Documents/py_2/chatbot_demo_gitter_demo.py', wdir='C:/Users/Priyanka Baviskar/Documents/py_2')\r\nC:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\storage\\jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): api.gitter.im\r\nINFO:chatterbot.adapters:404 joining room https://api.gitter.im/v1/rooms\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-25-983eb2bfb276>\", line 1, in <module>\r\n    runfile('C:/Users/Priyanka Baviskar/Documents/py_2/chatbot_demo_gitter_demo.py', wdir='C:/Users/Priyanka Baviskar/Documents/py_2')\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\spyder\\utils\\site\\sitecustomize.py\", line 866, in runfile\r\n    execfile(filename, namespace)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\spyder\\utils\\site\\sitecustomize.py\", line 102, in execfile\r\n    exec(compile(f.read(), filename, 'exec'), namespace)\r\n\r\n  File \"C:/Users/Priyanka Baviskar/Documents/py_2/chatbot_demo_gitter_demo.py\", line 19, in <module>\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer'\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\chatterbot.py\", line 38, in __init__\r\n    self.input = utils.initialize_class(input_adapter, **kwargs)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\utils.py\", line 33, in initialize_class\r\n    return Class(**kwargs)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\input\\gitter.py\", line 31, in __init__\r\n    room_data = self.join_room(self.gitter_room)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\input\\gitter.py\", line 58, in join_room\r\n    self._validate_status_code(response)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\input\\gitter.py\", line 41, in _validate_status_code\r\n    raise self.HTTPStatusException('{} status code recieved'.format(code))\r\n\r\nHTTPStatusException: '404 status code recieved'\r\n\r\n[2]\r\nIn the example to train the classifier with the ubuntu corpus:\r\nthe corpus is downloaded but while extracting:\r\n![image](https://cloud.githubusercontent.com/assets/26005427/23403280/738bf2d4-fdd5-11e6-961e-c6fd7aaebab8.png)\r\nit extracts till here and then throws the error:\r\n\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-26-d9c17baf69d4>\", line 1, in <module>\r\n    runfile('C:/Users/Priyanka Baviskar/Documents/py_2/chatbot_demo_ubuntu_corpus.py', wdir='C:/Users/Priyanka Baviskar/Documents/py_2')\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\spyder\\utils\\site\\sitecustomize.py\", line 866, in runfile\r\n    execfile(filename, namespace)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\spyder\\utils\\site\\sitecustomize.py\", line 102, in execfile\r\n    exec(compile(f.read(), filename, 'exec'), namespace)\r\n\r\n  File \"C:/Users/Priyanka Baviskar/Documents/py_2/chatbot_demo_ubuntu_corpus.py\", line 26, in <module>\r\n    chatbot.train()\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\trainers.py\", line 320, in train\r\n    self.extract(corpus_download_path)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\site-packages\\chatterbot\\trainers.py\", line 306, in extract\r\n    tar.extractall(path=self.data_directory, members=track_progress(tar))\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\tarfile.py\", line 1996, in extractall\r\n    numeric_owner=numeric_owner)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\tarfile.py\", line 2038, in extract\r\n    numeric_owner=numeric_owner)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\tarfile.py\", line 2108, in _extract_member\r\n    self.makefile(tarinfo, targetpath)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\tarfile.py\", line 2156, in makefile\r\n    copyfileobj(source, target, tarinfo.size, ReadError)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\tarfile.py\", line 247, in copyfileobj\r\n    buf = src.read(remainder)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\gzip.py\", line 274, in read\r\n    return self._buffer.read(size)\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\_compression.py\", line 68, in readinto\r\n    data = self.read(len(byte_view))\r\n\r\n  File \"C:\\Users\\Priyanka Baviskar\\Anaconda_\\lib\\gzip.py\", line 480, in read\r\n    raise EOFError(\"Compressed file ended before the \"\r\n\r\nEOFError: Compressed file ended before the end-of-stream marker was reached\r\n\r\nThank You for answering all my queries with patience .Much appreciated Sir\r\n On Gitter see some example over here https://github.com/gunthercox/ChatterBot/blob/master/tests/input_adapter_tests/test_gitter_input_adapter.py#L23\r\n\r\nI am not sure with Ubuntu corpus issues Can I edit the Corpus ?\r\nadd more conversations directly into the json file ? One last doubt @gunthercox  \r\nwhen we download the The Ubuntu dialog corpus via the program were does it get stored ?\r\nBecause it isn't extracting the whole data for me its throwing error.\r\n\r\n  django.core.exceptions.ImproperlyConfigured: Requested setting CHATTERBOT, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.\r\n\r\n\r\nhi\r\n{'text': u'hi', 'created_at': datetime.datetime(2017, 2, 24, 17, 15, 31, 350875, tzinfo=<UTC>), 'extra_data': {}, 'in_response_to': [{'text': u'Hi', 'occurrence': 1}, {'text': u'Hello', 'occurrence': 1}]} Using Mac Os/anaconda 2.7\r\nPlease guide me how to solve this issue. @kumarneeraj2005 I think the app is working, the response contains \"hi\" which is \"correct\". I think what you're noticing is that the serialization of the api is not valid json, the api returns a json structure with the \"text\" node pointing to python serialized (as opposed to json) so you get in the app the data that you show. This is why the app shows the following:\r\n\r\n![screenshot from 2017-02-28 14-43-49](https://cloud.githubusercontent.com/assets/5496117/23437786/3ff49496-fdc4-11e6-9fc8-5dbc8abf9961.png)\r\n @gunthercox awesome, thanks, I also fixed it in my local copy, but I'm glad to hear there's a new version, the project has a lot of interesting ideas.  /usr/local/lib/python2.7/site-packages/chatterbot/storage/jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\nTraceback (most recent call last):\r\n  File \"twitter.py\", line 36, in <module>\r\n    trainer=\"chatterbot.trainers.TwitterTrainer\"\r\n  File \"/usr/local/lib/python2.7/site-packages/chatterbot/chatterbot.py\", line 71, in __init__\r\n    self.trainer = TrainerClass(self.storage, **kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/chatterbot/trainers.py\", line 131, in __init__\r\n    from twitter import Api as TwitterApi\r\n  File \"/Users/aiosdeveloper/Downloads/chatbot/twitter.py\", line 36, in <module>\r\n    trainer=\"chatterbot.trainers.TwitterTrainer\"\r\n  File \"/usr/local/lib/python2.7/site-packages/chatterbot/chatterbot.py\", line 71, in __init__\r\n    self.trainer = TrainerClass(self.storage, **kwargs)\r\n  File \"/usr/local/lib/python2.7/site-packages/chatterbot/trainers.py\", line 131, in __init__\r\n    from twitter import Api as TwitterApi\r\nImportError: cannot import name Api\r\n\r\nThanks! Try to do fallowing steps, Recommended use [virtual environments ](http://docs.python-guide.org/en/latest/dev/virtualenvs/)\r\n\r\n```\r\nvirtualvenv venv\r\nsource venv/bin/activate\r\npip install --upgrade pip\r\npip install chatterbot\r\n```\r\n\r\nLet me know still if you are facing this issue. python twitter.py \r\n/opt/chatbot/mengbao/venv/lib/python3.4/site-packages/chatterbot/storage/jsonfile.py:26: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production environments.\r\n  self.UnsuitableForProductionWarning\r\nTraceback (most recent call last):\r\n  File \"twitter.py\", line 36, in <module>\r\n    trainer=\"chatterbot.trainers.TwitterTrainer\"\r\n  File \"/opt/chatbot/mengbao/venv/lib/python3.4/site-packages/chatterbot/chatterbot.py\", line 71, in __init__\r\n    self.trainer = TrainerClass(self.storage, **kwargs)\r\n  File \"/opt/chatbot/mengbao/venv/lib/python3.4/site-packages/chatterbot/trainers.py\", line 131, in __init__\r\n    from twitter import Api as TwitterApi\r\n  File \"/opt/chatbot/mengbao/twitter.py\", line 36, in <module>\r\n    trainer=\"chatterbot.trainers.TwitterTrainer\"\r\n  File \"/opt/chatbot/mengbao/venv/lib/python3.4/site-packages/chatterbot/chatterbot.py\", line 71, in __init__\r\n    self.trainer = TrainerClass(self.storage, **kwargs)\r\n  File \"/opt/chatbot/mengbao/venv/lib/python3.4/site-packages/chatterbot/trainers.py\", line 131, in __init__\r\n    from twitter import Api as TwitterApi\r\nImportError: cannot import name 'Api'\r\n Read the documentation https://pypi.python.org/pypi/twitter/1.17.1   @theteerapon could you please describe problem description?   RuntimeError: Model class chatterbot.ext.django_chatterbot.models.Statement doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS.\r\n Does your Django app settings include the lines marked with arrows?\r\n\r\n```\r\n# Application definition\r\n\r\nINSTALLED_APPS = (\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'chatterbot.ext.django_chatterbot',     <-----------\r\n    'example_app',                          <----------- What I think is the app_label\r\n)\r\n``` when I set Django app as this:\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'chatterbot.ext.django_chatterbot',\r\n    'meizu_ai',\r\n]\r\n\r\n\r\nthe result is:\r\nValueError: invalid literal for int() with base 10: ''\r\n[13/Feb/2017 16:20:47] \"GET /query/?q=%E4%BD%A0%E5%A5%BD%2F*%2F1111 HTTP/1.1\" 500 17898 @Near-Tam Did you problem is resolved, Could you please elaborate your problem to understand more. Which version chatterbot are you using?\r\nCould you please share stack trace of your problem.\r\n\r\nAnd also If Django settings should like this\r\n\r\n``` Django\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'chatterbot.ext.django_chatterbot',\r\n    'example_app',       \r\n    'meizu_ai',\r\n]\r\n```\r\n\r\n  Hi \r\nI was wondering if there is a way to deploy chatterbot on a site or a platform after im done training it using my  terminal\r\nany ideas? You can use diferent public cloud applications for your app for example [AWS](aws.amazon.com/), [Heroku](heroku.com). Here an example app rl[chatterbot-live-example](https://github.com/vkosuri/chatterbot-live-example) @Mustyy I am closing this issue, if you have any thoughts to improve this thread please feel free to reopen this issue.  I'd like to build a chatbot that integrates with (among other things) Facebook Messenger, Slack, and SMS. It looks like there's currently no adaptors for these platforms, nor do I see it anywhere in the roadmap (maybe I'm missing it though).\r\n\r\nAny interest in this stuff?  I suppose I could fork Chatterbot, build these adaptors out and submit pull requests. Is this the sort of thing you would theoretically want in the project?\r\n\r\nThanks - Loren Forgot to mention, - I started working on a similar project (https://github.com/Axilent/talkback) a ways back, but I'd rather contribute to a project with momentum than handling this stuff all by myself. LorenDavie - We already have   Microsoft bot framework. \r\n\r\nhttps://github.com/gunthercox/ChatterBot/blob/master/chatterbot/output/microsoft.py \r\n\r\nI think creating Adaptors  for wit.ai will be good for us.  @LorenDavie I am closing this issue, Please feel free to reopen if you have any thoughts/ideas on this issue.     @kelonye Thanks for PR, I believe this very specific to a user chatterbot app. I felt this PR should goes [chatterbot-tricks](https://github.com/vkosuri/chatterbot-tricks).\r\n\r\nAny comments @gunthercox  Just thought docker is preferred over virtualenv nowadays. Nice project btw .. @kelonye if you are interested make use of please PR, please submit a PR chatterbot-tricks.  hi i want to get reply on context based.... example if i trained my bot with two sets of conversations i.e \r\nconversation_1=[\"hi\",\"hi too\",\"please send me sms packages\",\"these are sms packages\",\"price?\",\"these are sms price list\"]\r\nconversation_1=[\"hi\",\"hi too\",\"please send me internet packages\",\"these are internet packages\",\"price?\",\"these are internet price list\"]\r\n\r\nNote: Now against price statement we have two responses 1(\"these are sms price list\"),2(\"these are internet price list\").......now problem is that when i entered price? it reply some time sms related response and some time internet related ,Now i want  it reply based on previous based dailogs mens my previous dailogs if sms related then it reply sms based response...  @janMbugti Master already addressed your question hence i am closing this issue, please feel free reopen this issue if you have anything to discuss further.  I've created multiple logic adapters to handle the input by calling 3rd party APIs and access a DB.\r\n\r\nI want to avoid unneeded calls to the APIs and my DB.\r\nHow can I prevent other logic adapters from even running when there is already confidence == 1 ?\r\n\r\nThank you. If you want more specific about your app create your new logic adapter\r\n\r\nIf you want restric a specific adapter override [can_process](http://chatterbot.readthedocs.io/en/stable/logic/create-a-logic-adapter.html#chatterbot.logic.LogicAdapter.can_process) method. @gunthercox Do you think this is something you might implement soon?\r\nThank you.  @gunthercox Master,\r\n\r\n [filter](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/storage/storage_adapter.py#L69) state that ``Returns a list of objects from the database.`` and \r\n\r\n[get_response_statements](https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/storage/storage_adapter.py#L106) `` Return only statements that are in response to another statement.``\r\n\r\nQuestion is What are different filters are we going support?  @gunthercox Master, Due to new repository [chatterbot-corpus](https://github.com/gunthercox/chatterbot-corpus). I am planning remove corpus data and tests from this repo. Let me know your inputs  Is there any way of getting to know about how much the bot is confident while answering a question?\r\nThe purpose is, if the confidence is low, i would redirect the question to a human and learn the answer for future\r\nIt would be great if you could reply fast because I have some deadlines\r\nThanks for the awesome code I think it is based on your comparison method used \r\nMore info http://chatterbot.readthedocs.io/en/stable/conversations.html#statement-comparison  No, I dont have the other statement to compare with. I just want to know if my corpus has some \"good enough\" answer or not Thanks Master @gunthercox Thanks you so much @gunthercox  @vkosuri   Is it possible to get the n amount of best results? I'm using ChatterBot for autocomplete suggestions for a chat system and it would be great to have something that returns several potential answers instead of just the \"Best\" one.  Yes, it would be great to have that!  @cesarandreslopez If you any improvements on this feature please feel free to open this issue.  As I see, in `get_response()` we have this line:\r\n\r\n`statement, response = self.generate_response(input_statement, session_id)`\r\n\r\nand `generate_response()` does the following:\r\n\r\n```\r\nself.storage.generate_base_query(self, session_id)\r\n\r\n# Select a response to the input statement\r\nresponse = self.logic.process(input_statement)\r\n\r\nreturn input_statement, response\r\n```\r\n\r\nas I see, the logic adapters aren't able to work with sessions. That is, they can't consult previous messages to learn the **context** of the chat (although the bot learns answers from previous ones). \r\n\r\nWouldn't it be nice to pass `session_id` for logic adapters so they could maintain a context for the message?  This way we could implement **stories**, just like [wit.ai](https://wit.ai), not just static replies based on what the bot learned somewhere.  Nice! Context is good for bots, it'll be crucial to have sessions in order\nto implement stories. Imagine a bot for a store: it first needs to get\ninformation about the client, which is a story. Then, it needs to chat with\nthe client to pick the product he wants to buy, that's another story.\nStories can start other stores, just like wit.ai does.\n\nYour project is the most modern one (that's still offline) I've found while\nsearching for bots, and I like it being in python: easy and good for\ncomputations.\n\nI'm thinking in writing a logic adapter which breaks up a phrase in a list\nof words, searches in a dictionary of the most common words in the\nlanguage, and then pick the most uncommon words. This would be great for\nphrases like this:\n\n\"I want to order a pizza\"\n\n'pizza' would be the most uncommon word. Associated with the verb 'order',\nyou know that the client wants to order a pizza. What you think?\n\nAgain, nice work, definitely using it in my project!\n\nOn Wed, Jan 25, 2017 at 12:09 AM, Gunther Cox <notifications@github.com>\nwrote:\n\n> I'm actually in the process of making some rather large changes that will\n> make this much easier to do. Each statement will end up having a reference\n> to the session that it is a part of.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/605#issuecomment-274999682>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AGUzgWRAFlHBouCmaBDETjSIM72S-96iks5rVq71gaJpZM4Ls7wK>\n> .\n>\n I think this could you help you [Analyzing Sentence Structure](http://www.nltk.org/book/ch08.html) Did you implement these things in chatterbot yet?\n\nEm 25 de jan de 2017 00:47, \"Mallikarjunarao Kosuri\" <\nnotifications@github.com> escreveu:\n\n> I think this could you help you Analyzing Sentence Structure\n> <http://www.nltk.org/book/ch08.html>\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/605#issuecomment-275004904>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AGUzge9e9hD5GWVxYPt60nJSObPFPwwkks5rVrfYgaJpZM4Ls7wK>\n> .\n>\n No i am learning these techniques Do you have a date to release it? I was thinking about implementing myself\nbut it's better to wait for your implementation\n\nEm 24 de jan de 2017 23:30, \"Gunther Cox\" <notifications@github.com>\nescreveu:\n\n> @lucaszanella <https://github.com/lucaszanella> I agree, I would be happy\n> to make changes to allow this.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/605#issuecomment-274993707>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AGUzgcEuipaki6blV-iaN2WTnXEaRKX2ks5rVqXLgaJpZM4Ls7wK>\n> .\n>\n Hi is there any news regarding this? I checked the dev branch but it has not been updated for a while? Is there something we can do to help? @gunthercox @lucaszanella @vkosuri \r\nHey in order to maintain context I was trying to build a Logical Adapter for each context that I want in my conversation. But the problem is that I need the last statements that were made in the conversation in the Logical Adapter such that I can define the rules to be followed if a particular set of statements have already been passed.\r\nI am unable to get the last mentioned response or input statement in my Logical Adapter. I know that I can get these by the following commands:\r\nbot.conversation_sessions.get(self.bot.default_session.uuid).conversation.get_last_response_statement().text\r\nbut this is not working inside the Logical Adapter\r\nIt says bot not defined.\r\n\r\nPlease help! How can I get through this? I am new to python.  I'm thinking about using ChatterBot to answer lots of people in a server. The messages are going to be received through NodeJS and passed to python through ZeroMQ. I'm thinking about the best strategy to process all messages, but I didn't see anything in the documentation. \r\n\r\nAs I see, it'd be necessary for the ChatterBot object to be global, because we don't want more than one instance of the same logic adapter in memory, that's not necessary. I wonder which are the consequences of calling `chatbot.get_response(message)` in each thread. Is it enough?\r\n\r\nI'd create like, 10 threads, where each one would wait for a socket message and then call a get_response. Do you think this would be enough? \r\n\r\nAre there risks of race condition? As I see, you implemented your own Queue, and the storage adapters may or may not suffer from race conditions. \r\n\r\nWould be nice to hear from you the best methods for this and if there'll be further work in the future to make it easier. Or even to add an example in `examples/` where threading is used. Here's the output when trying to call get_response inside a thread:\r\n\r\n```\r\nException in thread Thread-1:\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python3.5/threading.py\", line 914, in _bootstrap_inner\r\n    self.run()\r\n  File \"/usr/lib/python3.5/threading.py\", line 862, in run\r\n    self._target(*self._args, **self._kwargs)\r\n  File \"bot.py\", line 13, in process_message\r\n    response = chatbot.get_response(\"How are you?\")\r\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 120, in get_response\r\n    self.learn_response(statement, previous_statement)\r\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 159, in learn_response\r\n    self.storage.update(statement)\r\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/storage/jsonfile.py\", line 161, in update\r\n    self.database.data(key=statement.text, value=data)\r\n  File \"/usr/local/lib/python3.5/dist-packages/jsondb/db.py\", line 109, in data\r\n    return self._get_content()\r\n  File \"/usr/local/lib/python3.5/dist-packages/jsondb/db.py\", line 52, in _get_content\r\n    obj = self.read_data(self.path)\r\n  File \"/usr/local/lib/python3.5/dist-packages/jsondb/file_writer.py\", line 15, in read_data\r\n    obj = decode(content)\r\n  File \"/usr/local/lib/python3.5/dist-packages/jsondb/compat.py\", line 32, in decode\r\n    return json_decode(value, encoding='utf-8', object_hook=json_util.object_hook)\r\n  File \"/usr/lib/python3.5/json/__init__.py\", line 332, in loads\r\n    return cls(**kw).decode(s)\r\n  File \"/usr/lib/python3.5/json/decoder.py\", line 342, in decode\r\n    raise JSONDecodeError(\"Extra data\", s, end)\r\njson.decoder.JSONDecodeError: Extra data: line 1 column 3 (char 2)\r\n\r\n```\r\n\r\nIf you, however, set training to False, it works without any problems, so the problem is really something related to json storage and threading. I'm trying to understand where's the problem how to resolve this probleme? Use a supported database @addelll. A MongoDB storage adapter is documented here: http://chatterbot.readthedocs.io/en/stable/storage/  https://github.com/howdyai/botkit \r\n\r\nbotkit is API based so i guess somehow we can make it ?  I'm having some trouble parsing the reply from django.\r\nIt seems the reply contains single quotes instead of JSON standard double quote.\r\nAlso, other values that can't be converted with javascript jsonParse, like datatime: `'created_at': datetime.datetime(2017, 1, 22, 17, 38, 35, 878994)`.\r\n\r\nIs it a bug?\r\n\r\nThanks.\r\n @thedp can you elaborate more on this issue? @thedp datetime is not JSON serializable \r\nMaybe you receiving a byte-type response too, can you provide more infos ?  @vkosuri \r\nThe JSON reply is structured like this:   `{\"text\": {'text':'something', 'created_at': datetime.datetime( . . `\r\nIn order for this JSON to be valid, the single quotes need to be double quotes, and the datetime shouldn't be there, or replaced with Unix epoch maybe.\r\n\r\n@alekaizer What kind of info should I provide?  @gunthercox how about adding this feature to Chatterbot? \r\n\r\nMore information https://cloud.google.com/translate/docs/translating-text#translate-translate-text-python\r\n\r\nAny comments? If it is feasible to add preprocesser i will make PR, otherwise i will add this to [chatterbot-tricks](https://github.com/vkosuri/chatterbot-tricks)\r\n\r\n``` Python\r\ndef translate_text(chatbot, statement, target):\r\n    \"\"\"Translates text into the target language.\r\n\r\n    Target must be an ISO 639-1 language code.\r\n    See https://g.co/cloud/translate/v2/translate-reference#supported_languages\r\n    \"\"\"\r\n    from google.cloud import translate\r\n    \r\n    translate_client = translate.Client()\r\n\r\n    # Text can also be a sequence of strings, in which case this method\r\n    # will return a sequence of results for each text.\r\n    result = translate_client.translate(\r\n        statement.text,\r\n        target_language=target)\r\n    \r\n    # Input language: result['input']\r\n    # Translated language: result['translatedText']\r\n    # Detected source language: result['detectedSourceLanguage']\r\n    statement.text = str(result['translatedText'])\r\n    return statement\r\n```\r\n  I am trying to implement an application where **several users** exists and each user can have **many chatterbots**. Each bot needs to have **its own** training data.  I am using **mongo db** as the storage adapter. How can I do it? Yes this is possible, you can as many as but point single storage adapter. For more information read http://chatterbot.readthedocs.io/en/stable/storage/index.html To be more specific, **I want to store the bot_id (that identifies a particular bot of a user) along with the training data** in the collection(ie, 'statements'). The training-data of a bot is unique and is meant only for that particular bot (unique training data-set for each bot). When giving responses a bot will only look upon its own training data-set, by comparing the current bot_id to the stored one in the training data set. I think it is very much similar issue https://github.com/gunthercox/ChatterBot/issues/357\r\n\r\nFor creating multiple instances of db on same server this link will help you http://stackoverflow.com/questions/15124610/multiple-instances-of-mongo-db-on-same-server @HelloJyo I am closing this issue, if you need any specific information please feel free to reopen this issue. **how can i filter the responses so that each bot will get responses that are meant for them**. All the training data are residing in the same collection. Thus selecting a response means first **check the bot_id** (which are saved during training of each bots) and if the test passes the bot can have access to the particular response. How can I filter responses with respect to the bot_id.  thanks guys...I'm gonna give it a try  The purpose of this adapter is to make use of different JSON parsing libraries, such as ujson or python-rapidjson. \r\n\r\nExample usage:\r\n```python\r\nchatbot = chatterbot.ChatBot(\r\n    \"Example bot\",\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    storage_adapter={\r\n        \"import_path\": \"chatterbot.storage.CustomJsonFileStorageAdapter\",\r\n        \"dump_func\":\"ujson.dumps\",\r\n        \"load_func\":\"ujson.loads\"\r\n    }\r\n)\r\nchatbot.train(\"chatterbot.corpus.english\")\r\n```\r\n\r\nAs you can see, all that has to be done is to make `storage_adapter` a dict with an `import_path`, `dump_func` and `load_func`.\r\nboth dump and load functions default back to the stdlib json module. Note that `dumps` and `loads` WILL NOT WORK.\r\n\r\nThis has successfully been tested, however I do not know if I messed anything up by accident which could make it function less like it should.\r\n\r\nFixes #592  @gunthercox feel free to merge whenever Noted. The reason I redid most of the I/O handling is because the current JSON adapter uses File I/O about 4 times for every `filter` call, causing it to slow down a lot (Not sure how much that matters on SSDs but I don't have any of those to test with). Once for every `update` call looked too much as well, so I set it up to save for every `get_response`. I will see if changing jsondb's source changes any of this, but I'm fairly sure it's the constant I/O that slows it down. At the moment even the default json.load and json.dump with the custom adapter are performing faster than jsondb, so I'll see what I can do there.\r\n I made a PR to jsondb [here](https://github.com/gunthercox/jsondb/pull/7). Using my PR as a test, I found that, despite it being a little faster due to it using ujson, it is still relatively slow. My guess is that the amount of File I/O calls is too high, which is why I propose to either make the amount of jsondb calls lower, or implement the custom adapter which makes less I/O calls. Above two commits were made to support libraries such as `rapidjson`, which only supports `dumps` and `loads` calls. @martmists before pushing your commits try to runs tests your locally. @vkosuri if you could explain to me how I will, but as said before I have no clue how to test\r\n\r\nThe weird thing with this one is that is somehow fails on py2 django 1.8 and 1.9, which I'm actually unsure of why this errors.\r\n @martmists I think this will help you http://chatterbot.readthedocs.io/en/stable/testing.html I'll probably rewrite this storage adapter to use any dumping/loading method as to enable it to use for example the `erlpack` module.\r\n I see, thanks for showing interest though!\r\nI'm going to continue using this adapter myself, and I'll leave my fork of the repo up and up to date for people who want to use it as well.  I think Store sessions in database is  important. why it not be used?\r\n\r\nand I found a function. But I didn't find the way to use him. it is in \r\n http://chatterbot.readthedocs.io/en/stable/sessions.html\r\n\r\n> Each session object holds a queue of the most recent communications that have occurred during that session. The queue holds tuples with two values each, the first value is the input that the bot received and the second value is the response that the bot returned.\r\n\r\nvery thanks!\r\n@gunthercox  @vkosuri \r\n  I'm using the django as in/out.\r\nI've noticed that extra_data doesn't always arrive to my custom logic_adapter. But when I delete the sqlite3 db, it starts working again, and then stops again.\r\n\r\nIs this by design?\r\n\r\n\r\nThank you.\r\n\r\n\r\n I'm not intentionally saving.\r\nI'm talking only about the statement from the client. You say after recieving the exact same statement, the extra_data doesn't get passed to the logic adapter?\r\n\r\nIs the only way to always get the extra_data from the client is by setting chatterbot to read_only=True ?  As mentioned in #42, cjson is used when installed automatically to speed up. However, cjson does not yet support Python 3. This is why I'm proposing to add a similar method for a Py3 version of a fast JSON library, such as ujson or python-rapidjson.  This looks like a great format to me, along with the advantages for configurable JSON libraries I'd say this is something to work on. I'll see what I myself can do, though I'm not extremely skilled at Python nor do I understand the current way storage based on JSON works. Closing this as I'll be using #597  Hello everybody, I've just started with chatterbot so please excuse me if this is not related to your project.\r\n\r\nWhen I try to get a response for a statement for the first time, everything works as expected but when I send it again, I get the following error:\r\n\r\n` response = chatter.get_response(payload, session_id)\r\n  File \"/bot/lib/python2.7/site-packages/chatterbot/chatterbot.py\", line 108, in get_response\r\n    input_statement = self.input.process_input_statement(input_item)\r\n  File \"/bot/lib/python2.7/site-packages/chatterbot/input/input_adapter.py\", line 24, in process_input_statement\r\n    existing_statement = self.chatbot.storage.find(input_statement.text)\r\n  File \"/bot/lib/python2.7/site-packages/chatterbot/storage/mongodb.py\", line 121, in find\r\n    values.get('in_response_to', [])\r\n  File \"/bot/lib/python2.7/site-packages/chatterbot/storage/mongodb.py\", line 141, in deserialize_responses\r\n    return proxy_statement.in_response_to\r\n  File \"/bot/lib/python2.7/site-packages/chatterbot/ext/django_chatterbot/models.py\", line 48, in in_response_to\r\n    return Response.objects.filter(statement=self)\r\n  File \"/bot/lib/python2.7/site-packages/django/db/models/manager.py\", line 85, in manager_method\r\n    return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n  File \"/bot/lib/python2.7/site-packages/django/db/models/query.py\", line 796, in filter\r\n    return self._filter_or_exclude(False, *args, **kwargs)\r\n  File \"/bot/lib/python2.7/site-packages/django/db/models/query.py\", line 814, in _filter_or_exclude\r\n    clone.query.add_q(Q(*args, **kwargs))\r\n  File \"/bot/lib/python2.7/site-packages/django/db/models/sql/query.py\", line 1227, in add_q\r\n    clause, _ = self._add_q(q_object, self.used_aliases)\r\n  File \"/bot/lib/python2.7/site-packages/django/db/models/sql/query.py\", line 1253, in _add_q\r\n    allow_joins=allow_joins, split_subq=split_subq,\r\n  File \"/bot/lib/python2.7/site-packages/django/db/models/sql/query.py\", line 1183, in build_filter\r\n    condition = lookup_class(lhs, value)\r\n  File \"/bot/lib/python2.7/site-packages/django/db/models/lookups.py\", line 19, in __init__\r\n    self.rhs = self.get_prep_lookup()\r\n  File \"/bot/lib/python2.7/site-packages/django/db/models/fields/related_lookups.py\", line 100, in get_prep_lookup\r\n    self.rhs = target_field.get_prep_value(self.rhs)\r\n  File \"/bot/lib/python2.7/site-packages/django/db/models/fields/__init__.py\", line 946, in get_prep_value\r\n    return int(value)\r\nValueError: invalid literal for int() with base 10: ''\r\n`\r\n\r\n<payload> is a <chatterbot.conversation.Statement> object and I have create a custom LogicAdapter that returns a <chatterbot.conversation.Response> object after processing the input.\r\n\r\nAm I doing something wrong with this approach ? \r\n\r\nThanks,\r\n\r\nTkm Sure! I'll remove some business logic from my application but the flow is basically this:\r\n\r\n1) a Facebook messaging event is POSTed to my Django view;\r\n2) for each \"messaging event\" from inside the payload, I do this:\r\n\r\n```python\r\n# chatterbot_settings is a property that loads the default settings\r\n# to create a ChatBot instance\r\nchatter = ChatBot(self.slug, **self.chatterbot_settings)\r\n\r\n# the <interaction_handler> parses the event according to the payload and returns a \r\n# <chatterbot.conversation.Statement> instance\r\npayload = self.interaction_handler.get_payload_from(messaging_event, bot_slug=self.slug)\r\nresponse = chatter.get_response(payload, session_id)\r\n````\r\n\r\n2.1) the code of <interaction_handler.get_payload_from>:\r\n\r\n```python\r\nif 'text' in messaging_event[\"message\"]:\r\n   statement = Statement(text=messaging_event[\"message\"][\"text\"])  # the message's text\r\nelif 'quick_reply' in messaging_event[\"message\"]:\r\n   statement = Statement(json.dumps(messaging_event[\"message\"]))\r\n```\r\n\r\n3) I have a custom LogicAdapter that uses Python's difflib SequenceMatcher.ratio() to calculate the confidence of a match and the response's text is fetch from my database. Before returning the confidence / response tuple, I explicitly call `statement.add_response(response)`\r\n\r\n4) I send a message \"preciso de ajuda com isso aqui\", MongoDB gets this records:\r\n\r\n```\r\n/* 1 */\r\n{\r\n    \"_id\" : ObjectId(\"587cffc1bf3462590b73a5fd\"),\r\n    \"text\" : \"preciso de ajuda com isso aqui\",\r\n    \"created_at\" : ISODate(\"2017-01-16T17:15:45.901Z\"),\r\n    \"extra_data\" : {\r\n        \"bot_slug\" : \"blabot\"\r\n    },\r\n    \"in_response_to\" : [ \r\n        {\r\n            \"text\" : \"OK, qual a sua pergunta?\",\r\n            \"occurrence\" : 1\r\n        }\r\n    ]\r\n}\r\n\r\n/* 2 */\r\n{\r\n    \"_id\" : ObjectId(\"587cffc1bf3462590b73a5fe\"),\r\n    \"text\" : \"OK, qual a sua pergunta?\",\r\n    \"occurrence\" : 1\r\n}\r\n\r\n```\r\n\r\n4.1) If I send another message (that will match the same response) \"por favor, me ajuda\", MongoDB records are:\r\n\r\n```\r\n/* 1 */\r\n{\r\n    \"_id\" : ObjectId(\"587cffc1bf3462590b73a5fd\"),\r\n    \"text\" : \"preciso de ajuda com isso aqui\",\r\n    \"created_at\" : ISODate(\"2017-01-16T17:15:45.901Z\"),\r\n    \"extra_data\" : {\r\n        \"bot_slug\" : \"blabot\"\r\n    },\r\n    \"in_response_to\" : [ \r\n        {\r\n            \"text\" : \"OK, qual a sua pergunta?\",\r\n            \"occurrence\" : 1\r\n        }\r\n    ]\r\n}\r\n\r\n/* 2 */\r\n{\r\n    \"_id\" : ObjectId(\"587cffc1bf3462590b73a5fe\"),\r\n    \"text\" : \"OK, qual a sua pergunta?\",\r\n    \"occurrence\" : 1\r\n}\r\n\r\n/* 3 */\r\n{\r\n    \"_id\" : ObjectId(\"587d0006bf3462590b73a61a\"),\r\n    \"text\" : \"por favor, me ajuda\",\r\n    \"created_at\" : ISODate(\"2017-01-16T17:16:54.368Z\"),\r\n    \"extra_data\" : {\r\n        \"bot_slug\" : \"blabot\"\r\n    },\r\n    \"in_response_to\" : [ \r\n        {\r\n            \"text\" : \"OK, qual a sua pergunta?\",\r\n            \"occurrence\" : 1\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n4.3) If I send any of this messages again, I get the error message below:\r\n\r\n>   File \"/bot/nexus/models.py\", line 70, in reply_to\r\n>     response = chatter.get_response(payload, session.id_string)\r\n>   File \"/bot/lib/python2.7/site-packages/chatterbot/chatterbot.py\", line 108, in get_response\r\n>     input_statement = self.input.process_input_statement(input_item)\r\n>   File \"/bot/lib/python2.7/site-packages/chatterbot/input/input_adapter.py\", line 24, in process_input_statement\r\n>     existing_statement = self.chatbot.storage.find(input_statement.text)\r\n>   File \"/bot/lib/python2.7/site-packages/chatterbot/storage/mongodb.py\", line 121, in find\r\n>     values.get('in_response_to', [])\r\n>   File \"/bot/lib/python2.7/site-packages/chatterbot/storage/mongodb.py\", line 141, in deserialize_responses\r\n>     return proxy_statement.in_response_to\r\n>   File \"/bot/lib/python2.7/site-packages/chatterbot/ext/django_chatterbot/models.py\", line 48, in in_response_to\r\n>     return Response.objects.filter(statement=self)\r\n>   File \"/bot/lib/python2.7/site-packages/django/db/models/manager.py\", line 85, in manager_method\r\n>     return getattr(self.get_queryset(), name)(*args, **kwargs)\r\n>   File \"/bot/lib/python2.7/site-packages/django/db/models/query.py\", line 796, in filter\r\n>     return self._filter_or_exclude(False, *args, **kwargs)\r\n>   File \"/bot/lib/python2.7/site-packages/django/db/models/query.py\", line 814, in _filter_or_exclude\r\n>     clone.query.add_q(Q(*args, **kwargs))\r\n>   File \"/bot/lib/python2.7/site-packages/django/db/models/sql/query.py\", line 1227, in add_q\r\n>     clause, _ = self._add_q(q_object, self.used_aliases)\r\n>   File \"/bot/lib/python2.7/site-packages/django/db/models/sql/query.py\", line 1253, in _add_q\r\n>     allow_joins=allow_joins, split_subq=split_subq,\r\n>   File \"/bot/lib/python2.7/site-packages/django/db/models/sql/query.py\", line 1183, in build_filter\r\n>     condition = lookup_class(lhs, value)\r\n>   File \"/bot/lib/python2.7/site-packages/django/db/models/lookups.py\", line 19, in __init__\r\n>     self.rhs = self.get_prep_lookup()\r\n>   File \"/bot/lib/python2.7/site-packages/django/db/models/fields/related_lookups.py\", line 100, in get_prep_lookup\r\n>     self.rhs = target_field.get_prep_value(self.rhs)\r\n>   File \"/bot/lib/python2.7/site-packages/django/db/models/fields/__init__.py\", line 946, in get_prep_value\r\n>     return int(value)\r\n> ValueError: invalid literal for int() with base 10: ''\r\n> [16/Jan/2017 17:20:06] \"POST /api/channel/EAAPUd0t1RMUBANyMZBlQGce3IJVbL4RQASOcsPZBZAUr5FPxR4YN8JqikKr2hZB2pBHswVhOUisbaejWZAG6EnZASncbyc7L9hZAIAwCkJVOuoQlbu15Nl6WrE3bqxaCpMBeZAkLaNjpuPpozRT6AZDZD/webhook HT Yes, that's correct. I'm using <chatterbot.storage.MongoDatabaseAdapter> as the storage_adapter while also using the <chatterbot.ext.django_chatterbot> Django app. Sorry, I'm not sure if I got it right. You're saying that I should set the DEFAULT_FILE_STORAGE to django_mongodb_engine (from the backend you've mentioned) or add a different database to the DATABASES map ? \r\n Hey @gunthercox, any news on this ? Thanks I'm getting similar issue. I'm using django 1.10.x and mongodb. \r\n\r\nThe exception of\r\n> ValueError: invalid literal for int() with base 10: ''\r\n\r\nstarts from here\r\n> File \"/Users/dev/chatdjango/lib/python2.7/site-packages/chatterbot/ext/django_chatterbot/models.py\", line 59, in in_response_to\r\n>    return Response.objects.filter(statement=self)\r\n\r\nAnd I tried to switch to JSONfile storage, same problem happened on this line. It seems there'r something wrong with the Statement/Response object who inherits from django model? +1 Hi all. I have a same error. I want to use Django 1.10 and a separate MongoDB for bot data. When I tried to get response from bot, I got an error `invalid literal for int() with base 10: '\"`.\r\nI found a bottleneck in StorageAdapter class, in next lines:\r\n```python\r\n    def Statement(self):\r\n        \"\"\"\r\n        Create a storage-aware statement.\r\n        \"\"\"\r\n        import os\r\n\r\n        if 'DJANGO_SETTINGS_MODULE' in os.environ:\r\n            from chatterbot.ext.django_chatterbot.models import Statement\r\n            return Statement\r\n        else:\r\n            from chatterbot.conversation.statement import Statement\r\n            statement = Statement\r\n            statement.storage = self\r\n            return statement \r\n```\r\nIf we use Django - we always get Statement from django models, if we even doesn't need it.\r\nIs it possible to add some option for ChatterBot settings ('use_django_models': True/False, for example), which would triggered what Statement instance we need to use?\r\nI can provide pull request with this changes.  @gunthercox Thanks, I added pull request #653   I am trying to execute chatterbot from PHP and not getting the expected result. I am using python3.7 and chatterbot 0.5.5\r\n\r\nfrom chatterbot import ChatBot\r\nimport sys\r\nimport requests\r\n\r\nbot = ChatBot('Agri',\r\n    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',\r\n    logic_adapters=[\r\n            \"chatterbot.logic.MathematicalEvaluation\",\r\n            \"chatterbot.logic.BestMatch\"\r\n        ],\r\n    output_adapter=\"chatterbot.output.TerminalAdapter\",\r\n    database='test1'\r\n)\r\nresponse = bot.get_response(sys.argv[1])\r\nprint(response)\r\n\r\nThe response is not sent back to PHP function:\r\n\r\n\\Log::info(\"$cmd $message\");\r\n $response = exec(\"python3 customchat.py $message\");\r\n \\Log::info($response); Hi @gunthercox \r\n\r\nThanks for the quick response. I wasn't getting any errors only an empty result so couldn't debug. After adding debug code:\r\n\r\n exec(\"$cmd $message 2>&1\", $retArr, $retVal);\r\n\r\nI was able to figure out the issue. The issue was while the function call was made from the POST method(web) nltk was being downloaded in /var/www directory and there was a permission error. \r\nThe problem is solved.\r\n\r\nThanks for your quick response  1. Error\r\n    In Providing extra arguments part, these several lines of code:\r\n```\r\nclass MyLogicAdapter(LogicAdapter):\r\n    def __init__(self, **kwargs):\r\n        super(MyLogicAdapter, self).__init__(kwargs)\r\n\r\n        self.api_key = kwargs.get('secret_key')\r\n```\r\n\r\n**super(MyLogicAdapter, self).__init__(kwargs)** \"kwargs\" should be \"**kwargs\"\r\n\r\n2. enhancement:\r\n    In Directory structure part, there is only one file example.\r\n    Now I want to put adapter into directory. such as /myadpters/logic/Myadpter.py\r\n    \r\n    Do we must add /myadpters/__init__.py, add /myadpters/logic/__init__.py\r\n    and add content in /myadpters/logic/__init__.py\r\n\r\n```\r\nfrom .MyAdapter import MyAdapter\r\n``` yeah...\r\nbut when I want to use it in ChatBot,\r\n```\r\nChatBot('RominYue',\r\n        logic_adapters=[\r\n            'chatterbot.logic.BestMatch',\r\n            'adapters.logic.MyAdapter'\r\n        ]\r\n    )\r\n```\r\n\r\nit would pop out error when I do not add **from myadapters import MyAdapter** in __init__.py  Hi, \r\n\r\nInstead printing only the 'text' value as response to the input chat from the user, it responds the entire json output there.\r\n\r\npython3 --version\r\nPython 3.5.2\r\npython3 -m django --version\r\n1.10.5\r\npython3 -m chatterbot --version\r\n0.5.4\r\n\r\n**Input:**\r\n20\r\n\r\n**Expected output:**\r\n( 20 ) = 20\r\n\r\n**But the output I got:** \r\n{'text': 'b\"{\\'extra_data\\': {}, \\'text\\': \\'( 20 ) = 20\\', \\'in_response_to\\': [], \\'created_at\\': datetime.datetime(2017, 1, 13, 14, 59, 18, 347756)}\"'}\r\n\r\n**Workaround:**\r\n\r\n/usr/local/lib/python3.5/dist-packages/chatterbot/ext/django_chatterbot/views.py\r\n\r\n**# Modified the below in views.py**\r\n        #response_data = {'text': str(response_data)}\r\n        response_data = {'text': response.text}\r\n\r\nPlease fix this issue.\r\n\r\nRegards,\r\nGoutham GTM  I put 20,000 data in mongo DB now.\r\n\r\nThe following code will make the query speed too slow.\r\nResponse_query = self.statements.distinct ('in_response_to.text')\r\n\r\nI need action to improve conversation speed.\r\n\r\nCan you recommend it?\r\nthank you. Please explain in more detail.\r\nThank you.. I would say, using elastic search could be a better choice. But a bit of work involved. https://github.com/elastic/elasticsearch-py/blob/master/docs/index.rst \r\nI am going to test this and will let you know. \r\n\r\nOnce data is in elastic you can visualize and can do a lot more for free using kibana. \r\na new adapter needs to be written but it's not that difficult. \r\n I will not use mongodb.\r\nPlease suggest a reference.\r\nThank you. vusdo@ - You need to install elastic search if you want to use for millions/bill of records and also text based search is very fast. \r\n https://www.digitalocean.com/community/tutorials/how-to-install-elasticsearch-logstash-and-kibana-elk-stack-on-ubuntu-14-04 \r\n\r\nInstall elastic and kibana. You don't need Logstash. \r\n\r\nThen use this lib to manipulate data,  insert search etc.  https://github.com/elastic/elasticsearch-py/blob/master/docs/index.rst .\r\n\r\nThis all have a learning curve if you are not using elastic search already. \r\n\r\nLet me know if you have more questions.  I am happy to learn a new solution.\r\nShare elasticsearch storage adapter\r\nThank you.  When using a mongoDB database, I sometimes manually need to save the response in the database.\r\nAssuming ```st1``` and ```st2``` are two valid statements, ```chatbot.learn_response(st1,st2)``` does not seem to do anything.\r\nAny suggestions? Can this possibly be happening because ```read_only``` is equal to True? I rewrote the ```learn_response()``` method but I think this flag still prevents from writing the database. The goal is essentially to write only specific responses, based on some feedback. Is it possible to make it so that it doesn't learn **all** of the responses, but only some? I think this will do the job, thanks!  I have to use multiple Logic adapters as in my case I have tons of queries based on different requests. \r\nBut I am not sure how Logic adapters will route or determine which adapters is most appropriate. \r\n\r\nI will be using elastic search for data query and there are billions of records. I can not allow NLP to search in all indexes. That will be the waste of resources.  \r\n\r\nSo my question is how to make it more efficient and accurate.  \r\n\r\n I think this something you are looking http://chatterbot.readthedocs.io/en/stable/logic/response_selection.html Thanks vkosuri. gunthercox@ - Is it possible to use this kind of ( https://github.com/phpmind/open-intent )  intent entity format like API.AI is using. If we can have that we can get the correct result and narrow down the request and send to the correct query type using routing then different logical adopters can be connected which\r\n could be elastic search, MongoDb or Dynamodb or anything wherever data is stored.  \r\n\r\n Thanks Gunther. Gunther @ - Apart from open-intent.io,  i found this URL this is written in python \r\n https://github.com/MycroftAI/adapt\r\nNot sure how useful this would be but just posting to validate. \r\n  Hi!\r\nIn my case, I have two sets of conversations: general ones (the english corpus you provided, movie conversations,..) and some questions and answers that are relevant to answer technical questions. \r\nThe problem comes up in the fact that these specific conversations are not weighted enough to be selected by the bot. Example:\r\nQ: What is the location of this event?\r\nA: *Some irrelevant answer from english corpus* , but should instead be the specific answer learned.\r\nIs there a way to weight some sentences more than others? I can indeed manually increase the frequency of these phrases in the JSON /MongoDB databases, but is there any efficient way around it?\r\nMany thanks! Thanks, this makes sense!  \ud83d\udc4d  ```python\r\n>>> b = ChatBot(\r\n...     \"my bot\",\r\n...     trainer='chatterbot.trainers.ChatterBotCorpusTrainer',\r\n...     logic_adapters=[\r\n...         {\r\n...          \t\"import_path\": \"chatterbot.logic.MathematicalEvaluation\"\r\n...\t    },\r\n... \t    {\r\n...             \"import_path\": \"chatterbot.logic.TimeLogicAdapter\",\r\n...         },\r\n...         {\r\n...             'import_path': 'chatterbot.logic.BestMatch'\r\n...         },\r\n...         {\r\n...             'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n...             'threshold': 0.8,\r\n...             'default_response': \"Sorry, but I don't understand.\"\r\n...         }\r\n...     ]\r\n... )\r\n...\r\n\r\n>>> b.train(\"chatterbot.corpus.english\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/trainers.py\", line 117, in train\r\n    trainer.train(pair)\r\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/trainers.py\", line 82, in train\r\n    statement = self.get_or_create(text)\r\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/trainers.py\", line 25, in get_or_create\r\n    statement = self.storage.find(statement_text)\r\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/storage/jsonfile.py\", line 46, in find\r\n    values = self.database.data(key=statement_text)\r\n  File \"/usr/local/lib/python3.5/dist-packages/jsondb/db.py\", line 98, in data\r\n    return self._get_content(key)\r\n  File \"/usr/local/lib/python3.5/dist-packages/jsondb/db.py\", line 52, in _get_content\r\n    obj = self.read_data(self.path)\r\n  File \"/usr/local/lib/python3.5/dist-packages/jsondb/file_writer.py\", line 13, in read_data\r\n    content = db.read()\r\n  File \"/usr/lib/python3.5/codecs.py\", line 321, in decode\r\n    (result, consumed) = self._buffer_decode(data, self.errors, final)\r\nUnicodeDecodeError: 'utf-8' codec can't decode byte 0xe9 in position 98: invalid continuation byte\r\n```\r\n\r\n Indents may look a little messed up but I can assure you they are fine on my end. @martmists I guess you are mixing with both double quotes and single quotes, I think this will work\r\n```Python\r\nb = ChatBot(\r\n    'my bot',\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    logic_adapters=[\r\n        {\r\n            'import_path': 'chatterbot.logic.MathematicalEvaluation'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.TimeLogicAdapter',\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.BestMatch'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 0.8,\r\n            'default_response': 'Sorry, but I don't understand.'\r\n        }\r\n    ]\r\n)\r\n\r\n``` How is that an issue? \r\n1. Python supports both\r\n2. Yours doesn't work because of an unescaped `'`\r\n3. The error pops up in `b.train`, so why would there be an error in ChatBot's `__init__` are you solution? Thanks @martmists which version of chatter bot are you using, i have tried below example it is working fine.\r\n\r\n```bash\r\n(env)vkosuri:~/chatterbox/ChatterBot$ python -m chatterbot --version\r\n0.5.3\r\n```\r\n\r\n``` Python\r\nfrom chatterbot import ChatBot\r\nb = ChatBot(\r\n    'my bot',\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    logic_adapters=[\r\n        {\r\n            'import_path': 'chatterbot.logic.MathematicalEvaluation'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.TimeLogicAdapter',\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.BestMatch'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 0.8,\r\n            'default_response': 'Sorry, but I dont understand.'\r\n        }\r\n    ]\r\n)\r\n```\r\n I'm using the latest from pypi. (0.5.4) \r\nAgain, the error IS NOT in the `__init__` for ChatBot, it's in the `b.train` @gunthercox gonna wait for a response from you since I'm afraid this guy doesn't know English. No, does that matter on Windows when using `chcp 65001`? just checked, adding that does NOT fix this. I also checked the windows 10 linux subsystem, and it results in the same error.\r\n @gunthercox The problem seems to have fixed itself after deleting database.db, will investigate further.   Hi,\r\nHow hard will it be to Implement retrieval-based model using Tensorflow as part of this project ?\r\nI want to use seq2seq model as a part of this improvement. \r\nThanks\r\n Some useful links, If you haven't seen before\r\nhttps://keras.io/\r\nhttps://github.com/farizrahman4u/seq2seq @gunthercox could you please let me know, what are advantages and disadvantages using seq2seq model in chatterbot Some reference - \r\nhttp://www.wildml.com/2016/07/deep-learning-for-chatbots-2-retrieval-based-model-tensorflow/ \r\nhttps://github.com/dennybritz/chatbot-retrieval/     I just copy pasted following example:\r\n```\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\n\r\n\r\n# Create a new instance of a ChatBot\r\nbot = ChatBot(\r\n    'Default Response Example Bot',\r\n    storage_adapter='chatterbot.storage.JsonFileStorageAdapter',\r\n    logic_adapters=[\r\n        {\r\n            'import_path': 'chatterbot.logic.BestMatch'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 0.65,\r\n            'default_response': 'I am sorry, but I do not understand.'\r\n        }\r\n    ],\r\n    trainer='chatterbot.trainers.ListTrainer'\r\n)\r\n\r\n# Train the chat bot with a few responses\r\nbot.train([\r\n    'How can I help you?',\r\n    'I want to create a chat bot',\r\n    'Have you read the documentation?',\r\n    'No, I have not'\r\n    # 'This should help get you started: http://chatterbot.rtfd.org/en/latest/quickstart.html'\r\n])\r\n\r\n# Get a response for some unexpected input\r\nresponse = bot.get_response('How do I make an omelette?')\r\nprint(response)\r\n```\r\nI get following error:\r\n```\r\n\r\nTraceback (most recent call last):\r\n  File \"C:/Users/ccx/work/pscripts/conversationalspeech/t2.py\", line 27, in <module>\r\n    'No, I have not'\r\n  File \"C:\\Users\\ccx\\Anaconda2\\lib\\site-packages\\chatterbot\\trainers.py\", line 82, in train\r\n    statement = self.get_or_create(text)\r\n  File \"C:\\Users\\ccx\\Anaconda2\\lib\\site-packages\\chatterbot\\trainers.py\", line 25, in get_or_create\r\n    statement = self.storage.find(statement_text)\r\n  File \"C:\\Users\\ccx\\Anaconda2\\lib\\site-packages\\chatterbot\\storage\\jsonfile.py\", line 46, in find\r\n    values = self.database.data(key=statement_text)\r\n  File \"C:\\Users\\ccx\\Anaconda2\\lib\\site-packages\\jsondb\\db.py\", line 98, in data\r\n    return self._get_content(key)\r\n  File \"C:\\Users\\ccx\\Anaconda2\\lib\\site-packages\\jsondb\\db.py\", line 52, in _get_content\r\n    obj = self.read_data(self.path)\r\n  File \"C:\\Users\\ccx\\Anaconda2\\lib\\site-packages\\jsondb\\file_writer.py\", line 15, in read_data\r\n    obj = decode(content)\r\n  File \"C:\\Users\\ccx\\Anaconda2\\lib\\site-packages\\jsondb\\compat.py\", line 32, in decode\r\n    return json_decode(value, encoding='utf-8', object_hook=json_util.object_hook)\r\n  File \"C:\\Users\\ccx\\Anaconda2\\lib\\json\\__init__.py\", line 352, in loads\r\n    return cls(encoding=encoding, **kw).decode(s)\r\n  File \"C:\\Users\\ccx\\Anaconda2\\lib\\json\\decoder.py\", line 364, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"C:\\Users\\ccx\\Anaconda2\\lib\\json\\decoder.py\", line 380, in raw_decode\r\n    obj, end = self.scan_once(s, idx)\r\nUnicodeDecodeError: 'utf8' codec can't decode byte 0x92 in position 48: invalid start byte\r\n\r\n``` Is there any resolution to this? I am still unable to use chatterbot due to unicode issues. @gunthercox Yes I am using the updated latest versions of both.\r\n\r\nPython:\r\nPython 2.7.12 |Anaconda 2.5.0 (64-bit)| (default, Jun 29 2016, 11:07:13) [MSC v.\r\n1500 64 bit (AMD64)] on win32 Also I tried on linux with the same exact problem. @aliabbasjp\r\nI got same issue when my training dataset is having some  characters like normal white space is causing some issues while I copy data from some other editors which is causing unicode decode error. Pls check your input data, I think that is causing the error. @deepukr85 @gunthercox  I tried all ways of giving examples but all of them fail like above. @aliabbasjp can you try to delete existing ``database.db``, retrain your bot? If still problems exists let us know @vkosuri  where is this database.db ? i think it will be in your current directory, If you are using Ubuntu try ``locate database.db`` @vkosuri  that worked! @vkosuri @gunthercox  The problem is that I have to delete this database.db each time I run a new script, as there are multiple bot scripts in a directory.\r\n\r\nMoreover same error happens if we pass  unicode training statements  in bot.train\r\n\r\nHence should not be closed. @aliabbasjp Two things here i observed. May be it will vary.\r\n\r\n1. Python2.7\r\ni. In python 2.7 if you train your bot with regular data, it will create a new file called ``database.db`` and then your are trying train your bot with **new data which has unicode values** with name ``database.db`` file Then it is failing.\r\n2. Python3.x\r\ni. You won't see these failures. In odd cases it may fail.\r\n\r\nI think @gunthercox have more appropriate answer on this, My initial assumption was, while python2.x trying inserting unicdoe values into json ``database.db`` at that it was failing.\r\n  Hi,\r\nI want to access the database in which the input from the user has been stored. For example his name.\r\n\r\nOR \r\nIs there anyway to access a global variable, inside my logic adaptor.  I'm getting this error when trying to talk to the bot over localhost:8000.\r\nWhat am I missing? Thanks.\r\n\r\n```\r\nInternal Server Error: /api/chatterbot/\r\nTraceback (most recent call last):\r\n  File \"/Library/Python/2.7/site-packages/django/core/handlers/base.py\", line 149, in get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/Library/Python/2.7/site-packages/django/core/handlers/base.py\", line 147, in get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/Library/Python/2.7/site-packages/django/views/generic/base.py\", line 68, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/Library/Python/2.7/site-packages/django/views/generic/base.py\", line 88, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File \"/Library/Python/2.7/site-packages/chatterbot/ext/django_chatterbot/views.py\", line 68, in post\r\n    response_data = response.serialize()\r\n  File \"/Library/Python/2.7/site-packages/chatterbot/ext/django_chatterbot/models.py\", line 115, in serialize\r\n    data['in_response_to'].append(response.serialize())\r\nAttributeError: 'Response' object has no attribute 'serialize'\r\n[04/Jan/2017 23:00:05] \"POST /api/chatterbot/ HTTP/1.1\" 500 14479\r\n``` which version of chatterbot are you using? To get current version, use this ``python -m chatterbot --version`` command on your terminal I'm using the version from GitHub. Cloned yesterday. @gunthercox thank you so much for this project and quick fix.\r\nBut I'm still getting this error. I've uninstalled the pip and reinstalled it.\r\nI'm trying to run the example django_app. Am I doing something wrong to trigger this?\r\n\r\nThank you.\r\n\r\nP.S pip shows it's 0.5.4\r\n\r\nEDIT: I've just tested by cloning the project and the error is gone.  Hi,\r\nI need to integerate chatscript  (https://github.com/bwilcox-1234/ChatScript) such that a new Logic adapter named \"Chatscript\" is possible.\r\nIs this a good thing to do, if yes which methods I need to implement ? And how can I start about doing that?\r\n\r\nI need chatscript because it allows us to explicitly model a sequence of conversation and not like a lookup list where responses are looked up from a list database. Is this possible in chatterbot itself without using chatscript?  \ud83d\udc4d  `nltk_download_corpus` always downloads nltk resources even if it's already there.\r\n\r\nIt's because neither `nltk.data.find('stopwords.zip')` nor `nltk.data.find('stopwords')` finds the resource. Maybe `nltk_data` directory tree was flat at some point in the past, but right now it gets populated like this: \r\n\r\n```bash\r\n- corpora\r\n  |- stopwords\r\n  |- stopwords.zip\r\n  |- wordnet\r\n  |- wordnet.zip\r\n- sentiment\r\n  |- vader_lexicon.zip\r\n- tokenizers\r\n  |- punkt\r\n  |- punkt.zip\r\n```\r\n\r\nand so only a call like `nltk.data.find('corpora/stopwords')` works.  hi @gunthercox , I tried to embed session in my flask app, and when I create a session, I save the session_id in my database. but when I pass the session_id in generate_response() , then the function call the get() to get the session, suddenly the session changed (as well as the id) , how to solve this? thanks @bilalbayasut which version of chatterbot are you using? Use python -m chatterbot --version in your terminal to get version? @vkosuri  0.5.0 @gunthercox how to safely update to the latest? thanks can I update it by simply pull origin and merge with my existing one ? thanks @gunthercox \r\n\r\nI've tried to do --upgrade but when I checked the version it's still 0.5.0.\r\n\r\nhow is the best procedure to do updates via git pulling ? I don't which OS are you using, If it is Linux I would recommend virtual environments, \r\n\r\n```Bash\r\nvirtualenv venv\r\nsource venv/bin/activate\r\npip install --upgrade pip\r\npip install --upgrade chatterbot\r\n```  In  _**Setting parameters**_ section, I think _**response_selection_method**_ and _**\"statement_comparison_function\"**_ are in incorrect order. \r\n Hi @gunthercox , I means in [Setting parameters](https://github.com/gunthercox/ChatterBot/blob/master/docs/logic/index.rst), I try:\r\n\r\n> logic_adapters=[\r\n>         {\r\n>             \"import_path\": \"chatterbot.logic.BestMatch\",\r\n>             \"response_selection_method\": \"chatterbot.comparisons.levenshtein_distance\",\r\n>             \"statement_comparison_function\": \"chatterbot.response_selection.get_first_response\"\r\n>         }\r\n\r\nIt got TypeErrors. Then I try \r\n\r\n> logic_adapters=[\r\n>         {\r\n>             \"import_path\": \"chatterbot.logic.BestMatch\",\r\n>             \"statement_comparison_function\": \"chatterbot.comparisons.levenshtein_distance\",\r\n>             \"response_selection_method\": \"chatterbot.response_selection.get_first_response\"\r\n>         }\r\n\r\nIt works great. So I think there is a mistake in an example   @gunthercox a useful tag,\r\n\r\nI want share some of my thoughts here, If i found unicode issues how i resolved those issues\r\n\r\nRecommended use [virtual environments](https://virtualenv.pypa.io/en/stable/userguide/) for python2 and [python3](https://docs.python.org/3/library/venv.html).\r\n\r\n**python2**\r\n```Bash\r\nvirtualenv venv\r\nsource venv/bin/activate\r\npython chatterbot-example.py\r\n```\r\n**python3**\r\n```\r\npython3 -m venv /path/to/new/virtual/environment\r\nsource venv/bin/activate\r\npython chatterbot-example.py\r\n```\r\n\r\n1. [Learn the differences between Python 2 & 3](http://python-future.org/compatible_idioms.html#)\r\n2. Use [Futurize ](http://python-future.org/automatic_conversion.html)(or [Modernize](https://python-modernize.readthedocs.org/en/latest/)) to update your code (e.g. pip install future)\r\n3. Use [Pylint ](https://pypi.python.org/pypi/pylint)to help make sure you don\u2019t regress on your Python 3 support (pip install pylint)\r\n4. Use [caniusepython3 ](https://pypi.python.org/pypi/caniusepython3) to find out which of your \r\n5. Consider using optional static type checking to make sure your type usage works in both Python 2 & 3 (e.g. use [mypy ](http://mypy-lang.org/)to check your typing under both Python 2 & Python 3).   \r\nJust updated to the latest git version of chatterbot, and I now get this error when running `chatbot = ChatBot(...` command. Before the update everything worked quite well. Do I need to change something in the way I initialize a bot? I did not update it for a long time actually, so it's possible I missed something. Thanks!\r\n\r\n`chatbot = ChatBot(\"Chatbotname\", logic_adapters=[\r\n        \"chatterbot.adapters.logic.TimeLogicAdapter\",\r\n        # \"chatterbot.adapters.logic.ClosestMeaningAdapter\",\r\n        # \"chatterbot.adapters.logic.ApproximateSentenceMatchAdapter\",\r\n        \"chatterbot.adapters.logic.ClosestMatchAdapter\",\r\n        # \"chatterbot.adapters.logic.MathematicalEvaluation\"\r\n    ],\r\n                      input_adapter=\"chatterbot.adapters.input.VariableInputTypeAdapter\",\r\n                      output_adapter=\"chatterbot.adapters.output.OutputFormatAdapter\",\r\n                      storage_adapter=\"chatterbot.adapters.storage.MongoDatabaseAdapter\",\r\n                      database='Chatbotname-database',\r\n                      tie_breaking_method=\"random_response\"\r\n                      )`\r\n\r\n`Traceback (most recent call last):\r\n  File \"D:/Projects/Python/Code/server/app.py\", line 764, in <module>\r\n    storage_adapter=\"chatterbot.adapters.storage.MongoDatabaseAdapter\",\r\n  File \"D:\\Projects\\Python\\Code\\server\\chatterbot\\chatterbot.py\", line 32, in __init__\r\n    utils.validate_adapter_class(storage_adapter, StorageAdapter)\r\n  File \"D:\\Projects\\Python\\Code\\server\\chatterbot\\utils.py\", line 112, in validate_adapter_class\r\n    if not issubclass(import_module(validate_class), Adapter):\r\n  File \"D:\\Projects\\Python\\Code\\server\\chatterbot\\utils.py\", line 64, in import_module\r\n    module = importlib.import_module(module_path)\r\n  File \"C:\\Python34\\lib\\importlib\\__init__.py\", line 109, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 2254, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 2237, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 2221, in _find_and_load_unlocked\r\nImportError: No module named 'chatterbot.adapters.storage'; 'chatterbot.adapters' is not a package` Oh, haha. Well. Obviously, i just had to remove \".adapters\" from all adapters, I see the change in directories now. Sorry to bother. Will keep digging into further things that changed.  Sorry about this.\r\n\r\nNow I get another warning, that tie-breaking-method is deprecated. But the link to the documentation is not there anymore: http://chatterbot.readthedocs.io/en/latest/adapters/response_selection.html#setting-the-response-selection-method\r\n\r\nIt's not hard to find it, but still this is a minor bug, I think.  Attempting to import `from chatterbot import ChatBot` yields error \r\n\r\n```\r\nroot@host:~# python3.6\r\nPython 3.6.0 (default, Dec 24 2016, 00:44:03)\r\n[GCC 4.8.4] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from chatterbot import ChatBot\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/local/lib/python3.6/site-packages/ChatterBot-0.5.3-py3.6.egg/chatterbot/__init__.py\", line 4, in <module>\r\n    from .chatterbot import ChatBot\r\n  File \"/usr/local/lib/python3.6/site-packages/ChatterBot-0.5.3-py3.6.egg/chatterbot/chatterbot.py\", line 4, in <module>\r\n    from .input import InputAdapter\r\n  File \"/usr/local/lib/python3.6/site-packages/ChatterBot-0.5.3-py3.6.egg/chatterbot/input/__init__.py\", line 6, in <module>\r\n    from .terminal import TerminalAdapter\r\n  File \"/usr/local/lib/python3.6/site-packages/ChatterBot-0.5.3-py3.6.egg/chatterbot/input/terminal.py\", line 4, in <module>\r\n    from chatterbot.utils import input_function\r\nImportError: cannot import name 'input_function'\r\n```\r\n\r\nPython 3.6 was just recently released and I'm not really sure what's causing this import error... Thanks, we haven't add it to in Travis also, You could try it Python earlier versions at this moment.\r\n\r\nCheers \ud83d\udc4d Alright, thanks, I just ported my project to Python 3.6 (and other modules) and this was the only one that wasn't working. Correct, deleting the `utils` and `adapters` folders fixed the problem.   Is there a way to set the base_word to a custom word instead of \"random\" or use a user account for training the bot?  Looks good, one question on session management, Please correct me if i am wrong\r\n\r\n**Developer**\r\nHe has create a session object and reuse the same\r\n\r\n**End user**\r\ni.e If a user installed chatbot on his machine, started an basic example, there is no session management? I didn't understand. How will the bot talk to the world? For example, I was going to develop a ZeroMQ input/output. How I'm supposed to integrate it with the bot in the future when there is no input/output adapters? I thought it was a nice idea to have a base class and then people could install the desired adapters. Didn't understand why you're removing it. I will try to write below what i understood, @gunthercox please correct if i wrong.\r\n\r\n> ChatterBot maintainers to focus on the communication aspect\r\n\r\nThis means user look on only chatterbot specific data, not looking for integration which currently chatterbot providing (HipChat, Microsoft, etc.) \r\n\r\n``` Python\r\nfrom chatterbot.trainers import ListTrainer\r\n\r\nconversation = [\r\n    \"Hello\",\r\n    \"Hi there!\",\r\n    \"How are you doing?\",\r\n    \"I'm doing great.\",\r\n    \"That is good to hear\",\r\n    \"Thank you.\",\r\n    \"You're welcome.\"\r\n]\r\n\r\nchatbot.set_trainer(ListTrainer)\r\nchatbot.train(conversation)\r\n```\r\n\r\n> How will the bot talk to the world? \r\n\r\n``chatterbot`` will expose its Northbound API to end user, using that API his/her develop their application.\r\n @gunthercox and @vkosuri ,\r\nIf I understood well, there will be some kind of asynchronous Statement and maybe a session to have conversations(user) related with external conversations(?) (API exposed or consumed) and eventually the Statement will appear in brain (data) and/or will be show in the user conversation. \r\n\r\nSaid that, it will expand/change how ChatterBot interact, and how logic adapters process the new information. It will enable to integrate with Zapier(?), IFTTT(?) some kind of API that send/receive push notifications. Well, will expose API to integrate. Right or I went too far?\r\n\r\nThanks\r\n\r\n\r\n\r\n\r\n   JimTheBot is a bot running on sgoblin's experimental Rhubarb Chat platform.\r\nIt has now been added to the examples section.  @gunthercox \r\nWhen I add new Questions/Answers to the existing corpus(I used 'conversations') and then on training it again, the bot doesn't respond with the newly added questions.\r\n![1](https://cloud.githubusercontent.com/assets/12198973/21397898/7450b55a-c7cb-11e6-9d09-63cd4cdd2bae.png)\r\n![2](https://cloud.githubusercontent.com/assets/12198973/21397908/7ca1cffa-c7cb-11e6-9da3-d6d6dfccecb3.png)\r\n![3](https://cloud.githubusercontent.com/assets/12198973/21397912/8336bb0a-c7cb-11e6-8436-292e7b85c02b.png)\r\nApologise in advance if the question has been asked.\r\nThank you.\r\n @gunthercox \r\nTo be more specific: \r\n1. **I added the entry** _[\"This is a test question?\",\"Testing123\"]_ to the **english.conversations corpus**\r\n![1](https://cloud.githubusercontent.com/assets/12198973/21427402/64285ab6-c87a-11e6-98d3-9100deda6c60.png)\r\n2. Now I created a bot and trained it with the already **modified and saved** conversations corpus.\r\nSo basically the program gets response from the bot for :  \"This is a test question?\".\r\n![2](https://cloud.githubusercontent.com/assets/12198973/21427420/88951600-c87a-11e6-8aed-7c084eabc12e.png)\r\n3. This was followed by running the code. Instead of getting _\"Testing123\"_ as the answer, I get some random answer as highlighted.\r\n![3](https://cloud.githubusercontent.com/assets/12198973/21427463/ce353a8c-c87a-11e6-8b78-b12402320013.png)\r\nI did not modify the code, just modified the corpus. Although I did try (`pip install . --upgrade`), and got the same results.\r\n @melvinabraham any updates on this? Try to search your test statement exists in database.db or not, if it is there then your data is trained.\r\n\r\nIf you try to get more specific output you have to use comparison functions http://chatterbot.readthedocs.io/en/stable/logic/index.html#best-match-adapter @vkosuri @gunthercox \r\nWith reference to the previous answer, the bot was supposed to answer for \"**This is a test question**\" as \"**Testing123**\". On searching the **database.db** file for this question I found out that it exists: \r\n![4](https://cloud.githubusercontent.com/assets/12198973/21589597/6f1ca40c-d119-11e6-8aea-45e953a1994a.png)\r\n\r\nCompiling the testcase, I get the same output:\r\n![3](https://cloud.githubusercontent.com/assets/12198973/21591281/b3bf567c-d128-11e6-85da-31c34f6fd294.png)\r\n\r\n\r\n\r\n @melvinabraham thanks, did you added statement comparison adapters? And also please read http://chatterbot.readthedocs.io/en/stable/conversations.html#statement-comparison  @vkosuri Issue resolved! A comma went haywire in the .json file. \r\nSorry and thank you! @melvinabraham no problem @vkosuri \r\nHow do I link your awesome bot and my custom corpus with an android application?  ![screenshot from 2016-12-21 12 24 01](https://cloud.githubusercontent.com/assets/18592572/21380041/60a84b24-c778-11e6-9809-29907693680f.png)\r\n @buildithub how you are trying? Did you see this error while running example_app ? Could you please explain a bit your problem, so that is easier to help? yes I ran example_app and the above problem is occuring. This is happening since 0.5.3 version. Before that I used 0.5.1 version of the chatterbot and there was no problem. I can able reproduce this issue\n I used 0.5.1 version's django_app with 0.5.3's chatterbot. Still not working. Only working with 0.5.1. I used 0.5.3 version's django_app with 0.5.1's chatterbot. It's working. I am still having this issue running the newest example code with chatterbot 0.5.5, django 10.5.2, and python 3.4.  Any ideas? Same answer\r\n\r\n> I used 0.5.3 version's django_app with 0.5.1's chatterbot. It's working.  I'm planning to create corpus directory inside my Django project, say I have the project called `funstuff` \r\n\r\n```\r\nfunstuff\r\n|__corpus\r\n    |__data\r\n        |__english\r\n            |_greetings.json\r\n|__funstuff\r\n    |__settings.py\r\n|__manage.py\r\n\r\n```\r\n\r\nI like to modify the settings.py file like this\r\n```\r\n\r\n# Chatterbot\r\nCHATTERBOT = {\r\n    'name': 'Fun stuff bot',\r\n    'logic_adapters': [\r\n        'chatterbot.logic.MathematicalEvaluation',\r\n        'chatterbot.logic.BestMatch'\r\n    ],\r\n    'trainer': 'chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    'training_data': [\r\n         'chatterbot.corpus.english.greetings',\r\n         'funstuff.corpus.english.greetings'\r\n    ]\r\n}\r\n```\r\n\r\nFinally I want `./manage.py train` should pick those corpus file and start the training! You could more documentation from here http://chatterbot.readthedocs.io/en/stable/django/training.html#training\r\n\r\n``` Bash\r\npython manage.py train\r\n``` @vkosuri  Nope still it's not picking my Django project corpus file. Can you replicate my above setup and give me solution Thanks @gunthercox  With reference #469 I felt introducing jinja2 template into corpus, A more useful to users and developers.\r\n\r\nAn example located here https://gist.github.com/sevennineteen/4400462\r\n\r\n@gunthercox any comments/suggestion before implementing this feature? Agreed, By making another directory **templates** will make a separation from **raw** data, \r\n\r\n``` tree\r\n|-- corpus/\r\n|\r\n|---- data/\r\n|----- conversation.corups.json\r\n|---- templates/\r\n|----- conversation.temp.corpus.json\r\n```\r\n\r\n``` Python\r\ndef read_corpus_from_template(self, template_file_name)\r\n``` Got other ideas, Instead modifying everythin can write like this\r\n\r\nQuestions: \r\n\r\n1. Will it work as a long term solution?\r\n2. will address template mechanism?\r\n\r\nI will document this, soon\r\n\r\n```Json\r\n{\r\n    \"conversations\": [\r\n        [\r\n            \"What's you name\",\r\n            \"{{bot.name}}\"\r\n        ],\r\n        [\r\n            \"How many years\",\r\n            \"{{bot.years}}\"\r\n        ]   \r\n    ]\r\n}\r\n\r\n```\r\n``` Python\r\nfrom chatterbot import ChatBot\r\nfrom chatterbot.trainers import ListTrainer\r\nfrom jinja2 import Environment, FileSystemLoader\r\nimport json\r\nimport os\r\n\r\n# Jinja2 corpus template\r\nTHIS_DIR = os.path.dirname(os.path.abspath(__file__))\r\nenv = Environment(loader=FileSystemLoader(THIS_DIR), trim_blocks=True)\r\nproperties = {\"name\":\"Chatterbot\" , \"years\":2}\r\ncorpus_template = env.get_template('example.corpus.json').render(bot=properties)\r\nprint(corpus_template)\r\ncorpus_data = json.loads(corpus_template)\r\n\r\n# Train chatterbot\r\nchatterbot = ChatBot(\"Template Training Example\")\r\nchatterbot.set_trainer(ListTrainer)\r\nfor pair in corpus_data['conversations']:\r\n    chatterbot.train(pair)\r\n```\r\n @gunthercox Agreed totally with you, If above example will be useful others, i will add this example in example section.\r\n\r\nI really liked ``Personas`` Any future plans on this. Thank you  By looking into Repo https://github.com/drwallace/aiml-en-us-foundation-alice, i think we need update many conversations. I am started updating few important one\r\n\r\n- [x] science\r\n- [x] food\r\n- [x] drugs\r\n- [x] bot profile\r\n- [x] psychology\r\n- [x] politics\r\n- [x] humor\r\n- [x] history\r\n- [x] gossip\r\n- [x] emotion\r\n- [x] ai\r\n- [ ] knowledge\r\n- [x] literature\r\n- [x] movies\r\n- [x] money\r\n- [x] sports @gunthercox any comments/suggestion on this PR, I almost done except knowledge, I'll make another PR soon @gunthercox i will re-submit knowledge corpus some other time. Any comments/suggestions? If he agrres re use can we use this stuff? Is there any sprcific mechanism license request changes? @gunthercox any updates? @gunthercox thank you very much  can you explain - in a default setup how a long list of responses will change the possible weighty of response  from say doing them in separate lsits. That is how does a list of responses weight the setup to move through to those responses. I am asking mainly to understand how to author these, that is when to keep a long list going as opposed to making another list. \r\n\r\nSo then the difference between do this:\r\n\r\nchatterbot.train([\r\n     \"How are you?\",\r\n     \"I am good.\"\r\n])\r\nchatterbot.train([\r\n    \"That is good to hear.\",\r\n    \"Thank you\",\r\n])\r\n\r\n\r\n-- compared to do them in a list:\r\n\r\nchatterbot.train([\r\n    \"How are you?\",\r\n    \"I am good.\",\r\n    \"That is good to hear.\",\r\n    \"Thank you\",\r\n    \"You are welcome.\",\r\n])\r\n\r\nthanks, Steve Thanks, ok that came off as a dumb question, I was looking for the next level of detail or better yet I should have just explained my issue.  we have a chatterbot setup working with slack (wonderful program and setup! - thanks) and in our code the ability to correct on the fly. So this way, as one current approach, I can start with nothing, then start with a question and after that  answer live just use correction as the better answer. And built up a conversation that way. What the issue is, I appear to be  getting too many latter matching responses to my input questions then my answers. So a never said before \"who are you\" matches to the question \"are you a bot\" rather than the answer \"yes I am a AI chatbot, my name is ivbot\". It hit me that this live correction method just creates two phrase length Q then A lists rather than the longer conversation lists and that might be why this is happening (which means I should abandon this technique and go to the more conventioanl premaking lists) - so that drove my original question. It could be that I have a different mistake in my code that is causing this too. I am using\r\n logic_adapter=\"chatterbot.logic.BestMatch\", \r\nstatement_comparison_function=synset_distance,\r\n\r\nany suggestions appreciated.\r\n\r\nthanks, steve  I want to request, if it is possible to encode the response from chatterbot with utf-8, because in the moment it is an object as far as I know and that is problematic for the use with special characters and umlauts (\u00e4,\u00f6,\u00fc).\r\n\r\nPython is giving me the following error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/telepot/__init__.py\", line 781, in collector\r\n    callback(item)\r\n  File \"chatterbot.py\", line 42, in handle\r\n    bot.sendMessage(chat_id, str(response))\r\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\ufffd' in position 11: ordinal not in range(128)\r\n```\r\n_I am using Chatterbot with the Telegram- API_ \r\n\r\nThe code for this is:\r\n```\r\n#!/usr/bin/env python\r\n# coding: utf8\r\n...\r\ndef handle(msg):\r\n\tglobal chat_id \r\n\tchat_id = msg['chat']['id']\r\n\tcommand = msg['text'].encode('utf8')  #Incoming text from telegramuser\r\n\r\n\tresponse = susan.get_response(command) #response from chatterbot to the given text\r\n\t   \r\n\tbot.sendMessage(chat_id, str(response)) #trys to reply response to the telegramchat\r\n``` I tried it with both versions of the headers, but for that it doesnt make any difference. You are right, there was a issue in my encoding. Thanks for your help!\r\n\r\nYou can close this issue. @ThomasKoscheck  can you post how you solved your problem i am facing the same issue, i cant use arabic with chatterbot @mouhsinelonly This is my solution:\r\n\r\n```\r\ndef on_chat_message(self, msg):\r\n\t\tglobal chat_id\r\n\t\tcontent_type, chat_type, chat_id = telepot.glance(msg)\r\n\t\t**reload(sys)**\r\n\t\t**sys.setdefaultencoding(\"utf-8\")**\r\n\r\n\t\ttry:\t\t\t\r\n\t\t\tchat_id = msg['chat']['id']\r\n\t\t\tfirstname = msg['from']['first_name']**.encode('utf8')**\r\n\t\t\tusername = msg['from']['username']**.encode('utf8')**\r\n```\r\n\r\nThe bold ones are the important ones. i solved another way by using python3 and exporting the envitrenment\nencoding for python . thank you\n\nOn Mon, Aug 21, 2017, 4:52 AM Mallikarjunarao Kosuri <\nnotifications@github.com> wrote:\n\n> correct format\n>\n>\n> def on_chat_message(self, msg):\n>     global chat_id\n>     content_type, chat_type, chat_id = telepot.glance(msg)\n>     *reload(sys)*\n>     *sys.setdefaultencoding(\"utf-8\")*\n>\n>     try:\n>         chat_id = msg['chat']['id']\n>         firstname = msg['from']['first_name']*.encode('utf8')*\n>         username = msg['from']['username']*.encode('utf8')*\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/509#issuecomment-323623412>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAfal6TMhPRzqdigGQl-lm9ykVUb9r4-ks5saNSzgaJpZM4LPcEB>\n> .\n>\n-- \n\n\u0645\u062d\u0633\u0646 \u0628\u062e\u064a\u0634\n\u0645\u062f\u064a\u0631 \u0642\u0633\u0645 \u0627\u0644\u0628\u0631\u0645\u062c\u0629 \u0628\u0645\u0631\u0643\u0632 \u0627\u0644\u062a\u0639\u0644\u064a\u0645 \u0639\u0646 \u0628\u0639\u062f \u060c\u0643\u0644\u064a\u0629 \u0627\u0644\u0639\u0644\u0648\u0645 \u0627\u0644\u0634\u0631\u0639\u064a\u0629 \u060c\u0645\u0633\u0642\u0637 \u060c \u0639\u0645\u0627\u0646\n\u0627\u0644\u0645\u062d\u0645\u0648\u0644 : +96890164489\n  I got this error can you help me please ?  Discovered a bug when testing the [django_chatterbot](https://github.com/gunthercox/django_chatterbot). This patch solves the problem. @gunthercox:\r\n\r\nI see. I'll confirm it tomorrow and let you know. Thanks!\r\n\r\nPerhaps a notice \"This is no longer actively maintained\" with link to the well maintained version would be useful then.  My suggestion is to Identify the \"Corpus\" by [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) rather than just language. What are the benefits? it would allow for different dialects to be made independent as i might want to just \"teach\" just one of them. \r\n### Why i'm bringging this idea up?\r\nFor example the corpus for the _Portuguese_ language taking a look at it seems to have mostly _Portuguese Brazilian_ (**pt-BR**) strings and some, here and there, in the Portuguese (**pt** or **pt-PT**). Using said corpus makes the bot a bit of biliangual freak, i'f im allowed to call it that :P\r\n\r\nSame goes for the english corpus which, i'd say (not totally sure, but from some expressions), is _English_ (**en** or **en-GB**) with  _United States English_ (**en-US**) in it.\r\n\r\nChinese is another language with _ALOT_ of dialects.. (but this one is an unkown to me as i have zero knowledge in the language) \r\nThe story goes on..  Somehow the current djanog response isn't converting into JSON object, it always returns. https://github.com/gunthercox/ChatterBot/issues/497 issue will fix this error.\r\n\r\n @gunthercox sure will work on those two tests, One question, where do i need to add these test either in django example app [tests ](https://github.com/gunthercox/ChatterBot/blob/master/examples/django_app/tests/test_example.py)or in [django_tests](https://github.com/gunthercox/ChatterBot/blob/master/tests_django/test_views.py) @gunthercox i am little busy with other tasks, It may take another day or two, Could you please let me are there any ETAs for new release? appologies for many failures, needs to learn  ``python3`` \ud83d\udce6   Captured Traceback of thsi errror\r\n\r\n``` Bash\r\nTraceback:  \r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/django/core/handlers/exception.py\" in inner\r\n  39.             response = get_response(request)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/django/core/handlers/base.py\" in _legacy_get_response\r\n  249.             response = self._get_response(request)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/django/core/handlers/base.py\" in _get_response\r\n  187.                 response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/django/core/handlers/base.py\" in _get_response\r\n  185.                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/django/views/generic/base.py\" in view\r\n  68.             return self.dispatch(request, *args, **kwargs)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/django/views/generic/base.py\" in dispatch\r\n  88.         return handler(request, *args, **kwargs)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/chatterbot/ext/django_chatterbot/views.py\" in post\r\n  67.         response_data = self.chatterbot.get_response(input_data, chat_session.id_string)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/chatterbot/chatterbot.py\" in get_response\r\n  98.         statement, response, confidence = self.generate_response(input_statement, session_id)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/chatterbot/chatterbot.py\" in generate_response\r\n  122.         confidence, response = self.logic.process(input_statement)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/chatterbot/logic/multi_adapter.py\" in process\r\n  37.                 confidence, output = adapter.process(statement)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/chatterbot/logic/best_match.py\" in process\r\n  59.         confidence, closest_match = self.get(input_statement)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/chatterbot/logic/best_match.py\" in get\r\n  23.         statement_list = self.chatbot.storage.get_response_statements()\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/chatterbot/storage/storage_adapter.py\" in get_response_statements\r\n  88.         statement_list = self.filter()\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/chatterbot/storage/django_storage.py\" in filter\r\n  80.             results.append(self.model_to_object(statement_object))\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/site-packages/chatterbot/storage/django_storage.py\" in model_to_object\r\n  27.             extra_data=json.loads(statement_model.extra_data, encoding='utf8')\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/json/__init__.py\" in loads\r\n  352.     return cls(encoding=encoding, **kw).decode(s)\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/json/decoder.py\" in decode\r\n  364.         obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n\r\nFile \"/app/.heroku/python/lib/python2.7/json/decoder.py\" in raw_decode\r\n  382.             raise ValueError(\"No JSON object could be decoded\")\r\n\r\nException Type: ValueError at /api/chatterbot/\r\nException Value: No JSON object could be decoded\r\nRequest information:\r\nUSER: AnonymousUser\r\n``` And also it was failed due to unable to convert Unicode data into string  I have found some issue will submit PR.  I have made a heroku live example for chatterbot to more familiar with chatterbot and what it does. you can access this app from here https://chatterbot-live-example.herokuapp.com/\r\n\r\nAny comments/suggestion?\r\n And alos source of this example you can found here https://github.com/vkosuri/chatterbot-live-example @gunthercox is it possible add this https://chatterbot-live-example.herokuapp.com/ url in somewhere in documentation?   how can provide\r\n response = chatbot.get_response(\"Hi\") \r\ninstead of using terminal  I think adding a properties object to in_response_to, it will give more control to developer make many decisions by filling in_response properties dict.. For example\r\n\r\n``` Json\r\n{\r\n\t\"Can i get python square root\": {\r\n\t\t\"extra_data\": {},\r\n\t\t\"in_response_to\": [{\r\n\t\t\t\"text\": \"def square_root(x): return math.sqrt(x)\",\r\n\t\t\t\"occurrence\": 15,\r\n\t\t\t\"properties\": [{\r\n\t\t\t\t\"style\": \"markdown\",\r\n\t\t\t\t\"code\": \"python\",\r\n\t\t\t\t\"color\": \"no\"\r\n\t\t\t}]\r\n\r\n\t\t}]\r\n\t}\r\n}\r\n```\r\n\r\n***\r\nI am assuming it may add extra overhead to chatterbot, Any suggestions/comments? Awesome, this makes me more clear. I think this could be documented? Thanks Master  I am creating a twitter bot with your project but The data received from twitter is not copied to the database. self.storage.(statement) part is not working ? @engineer34 Could you please let me know type adapter are you using for example Terminal/django/etc storage_adapter = \"chatterbot.adapters.storage.TwitterAdapter\"     I try this example but I get an error message :\r\nImportError: No module named input thank you so much  I think this can turned into questions **bot-user**,\r\n\r\n1. If user repeating same questions asking **Are you a robot?**\r\n2. Restrict users flooding with chat message other than corpus data  It would be great by convert chatterbot text into events. For example, any suggestion/comments?\r\n\r\n``` bash\r\nfeed baby at 7\r\nSchedule a meeting\r\n``` very impressed me alot by looking this https://api.slack.com/rtm, do you have any comments on this? @gunthercox By looking into this, any thoughts on best implementation methods?\r\n\r\n- https://msdn.microsoft.com/en-us/office/office365/api/calendar-rest-operations\r\n- https://developers.google.com/google-apps/calendar/v3/reference/\r\n\r\n @gunthercox Thanks, I have few thoughts i will reopen with detailed plan May I know how @vkosuri do the conversation from text to event action? I see there are several calendar API for us to call, but are you do it by the logical adapter?  I really like this example, it provides the basis for interactive training of bots. There seems to be logical error if the user responds negatively to the query below. If get_feedback() returns \"No\", the output is simply the original bot response (which was incorrect), and is assigned a confidence value of 1.0.\r\n\r\n```\r\n        print('\\n Is \"{}\" this a coherent response to \"{}\"? \\n'.format(response, input_statement))\r\n        if get_feedback():\r\n            bot.learn_response(response,input_statement)\r\n        bot.output.process_response(response, confidence)\r\n```  I am trying to create a web site to which i need to integrate the chatterbot. I created my own web page using Django. But when tried to integrate the chatterbot, i got this error.... i didn't used \"django_chatterbot\" and just used the chatterbot package...\r\n\r\n```\r\npython manage.py runserver causes the below error\r\n----------------------------------------------------------------------------------------------------------------------------------\r\n\r\nPerforming system checks...\r\n\r\nUnhandled exception in thread started by <function wrapper at 0x7fe0db2610c8>\r\nTraceback (most recent call last):\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/utils/autoreload.py\", line 226, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/management/commands/runserver.py\", line 116, in inner_run\r\n    self.check(display_num_errors=True)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/management/base.py\", line 426, in check\r\n    include_deployment_checks=include_deployment_checks,\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/checks/registry.py\", line 75, in run_checks\r\n    new_errors = check(app_configs=app_configs)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/checks/urls.py\", line 13, in check_url_config\r\n    return check_resolver(resolver)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/checks/urls.py\", line 23, in check_resolver\r\n    for pattern in resolver.url_patterns:\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/utils/functional.py\", line 33, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/urlresolvers.py\", line 417, in url_patterns\r\n    patterns = getattr(self.urlconf_module, \"urlpatterns\", self.urlconf_module)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/utils/functional.py\", line 33, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/urlresolvers.py\", line 410, in urlconf_module\r\n    return import_module(self.urlconf_name)\r\n  File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\r\n    __import__(name)\r\n  File \"/home/cedex/Desktop/test2/mysite/urls.py\", line 23, in <module>\r\n    url(r'', include('chatbot.urls')),\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/conf/urls/__init__.py\", line 52, in include\r\n    urlconf_module = import_module(urlconf_module)\r\n  File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\r\n    __import__(name)\r\n  File \"/home/cedex/Desktop/test2/chatbot/urls.py\", line 2, in <module>\r\n    from . import views\r\n  File \"/home/cedex/Desktop/test2/chatbot/views.py\", line 23, in <module>\r\n    from chatter import *\r\n  File \"/home/cedex/Desktop/test2/chatbot/chatter.py\", line 1, in <module>\r\n    from chatterbot import ChatBot\r\n  File \"/home/cedex/Desktop/test2/chatbot/chatterbot/__init__.py\", line 4, in <module>\r\n    from .chatterbot import ChatBot\r\n  File \"/home/cedex/Desktop/test2/chatbot/chatterbot/chatterbot.py\", line 3, in <module>\r\n    from .storage import StorageAdapter\r\n  File \"/home/cedex/Desktop/test2/chatbot/chatterbot/storage/__init__.py\", line 2, in <module>\r\n    from .django_storage import DjangoStorageAdapter\r\n  File \"/home/cedex/Desktop/test2/chatbot/chatterbot/storage/django_storage.py\", line 1, in <module>\r\n    from chatterbot.storage import StorageAdapter\r\nImportError: No module named storage\r\nython manage.py runserver\r\nPerforming system checks...\r\n\r\nUnhandled exception in thread started by <function wrapper at 0x7fe0db2610c8>\r\nTraceback (most recent call last):\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/utils/autoreload.py\", line 226, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/management/commands/runserver.py\", line 116, in inner_run\r\n    self.check(display_num_errors=True)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/management/base.py\", line 426, in check\r\n    include_deployment_checks=include_deployment_checks,\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/checks/registry.py\", line 75, in run_checks\r\n    new_errors = check(app_configs=app_configs)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/checks/urls.py\", line 13, in check_url_config\r\n    return check_resolver(resolver)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/checks/urls.py\", line 23, in check_resolver\r\n    for pattern in resolver.url_patterns:\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/utils/functional.py\", line 33, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/urlresolvers.py\", line 417, in url_patterns\r\n    patterns = getattr(self.urlconf_module, \"urlpatterns\", self.urlconf_module)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/utils/functional.py\", line 33, in __get__\r\n    res = instance.__dict__[self.name] = self.func(instance)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/urlresolvers.py\", line 410, in urlconf_module\r\n    return import_module(self.urlconf_name)\r\n  File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\r\n    __import__(name)\r\n  File \"/home/cedex/Desktop/test2/mysite/urls.py\", line 23, in <module>\r\n    url(r'', include('chatbot.urls')),\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/conf/urls/__init__.py\", line 52, in include\r\n    urlconf_module = import_module(urlconf_module)\r\n  File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\r\n    __import__(name)\r\n  File \"/home/cedex/Desktop/test2/chatbot/urls.py\", line 2, in <module>\r\n    from . import views\r\n  File \"/home/cedex/Desktop/test2/chatbot/views.py\", line 23, in <module>\r\n    from chatter import *\r\n  File \"/home/cedex/Desktop/test2/chatbot/chatter.py\", line 1, in <module>\r\n    from chatterbot import ChatBot\r\n  File \"/home/cedex/Desktop/test2/chatbot/chatterbot/__init__.py\", line 4, in <module>\r\n    from .chatterbot import ChatBot\r\n  File \"/home/cedex/Desktop/test2/chatbot/chatterbot/chatterbot.py\", line 3, in <module>\r\n    from .storage import StorageAdapter\r\n  File \"/home/cedex/Desktop/test2/chatbot/chatterbot/storage/__init__.py\", line 2, in <module>\r\n    from .django_storage import DjangoStorageAdapter\r\n  File \"/home/cedex/Desktop/test2/chatbot/chatterbot/storage/django_storage.py\", line 1, in <module>\r\n    from chatterbot.storage import StorageAdapter\r\nImportError: No module named storage\r\n``` Hey, I am having a similar Error:\r\n```\r\nTraceback (most recent call last):\r\n  File \"test.py\", line 12, in <module>\r\n    output_adapter=\"chatterbot.output.OutputFormatAdapter\"\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/chatterbot.py\", line 36, in __init__\r\n    self.storage = utils.initialize_class(storage_adapter, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/utils.py\", line 81, in initialize_class\r\n    return Class(**kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/storage/jsonfile.py\", line 14, in __init__\r\n    from jsondb import Database\r\nImportError: No module named jsondb\r\n```\r\nThis error also appears, when I am trying to run some examples of you.\r\n\r\nWhen I am running `python -m chatterbot --version`, it gives me this output.\r\n```\r\nTraceback (most recent call last):\r\n  File \"/usr/lib/python2.7/runpy.py\", line 162, in _run_module_as_main\r\n    \"__main__\", fname, loader, pkg_name)\r\n  File \"/usr/lib/python2.7/runpy.py\", line 72, in _run_code\r\n    exec code in run_globals\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/__main__.py\", line 8, in <module>\r\n    print(chatterbot.__version__)\r\nAttributeError: 'module' object has no attribute '__version__'\r\n```\r\n\r\n I have a traceback as follows when i run the django application in the browser\r\n\r\n```\r\n>\r\nEnvironment:\r\n\r\n\r\nRequest Method: POST\r\nRequest URL: http://127.0.0.1:8000/views/act\r\n\r\nDjango Version: 1.9.2\r\nPython Version: 2.7.6\r\nInstalled Applications:\r\n['django.contrib.admin',\r\n 'django.contrib.auth',\r\n 'django.contrib.contenttypes',\r\n 'django.contrib.sessions',\r\n 'django.contrib.messages',\r\n 'django.contrib.staticfiles',\r\n 'chatbot',\r\n 'chatbot.chatterbot',\r\n 'chatbot.chatterbot.storage']\r\nInstalled Middleware:\r\n['django.middleware.security.SecurityMiddleware',\r\n 'django.contrib.sessions.middleware.SessionMiddleware',\r\n 'django.middleware.common.CommonMiddleware',\r\n 'django.middleware.csrf.CsrfViewMiddleware',\r\n 'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n 'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\r\n 'django.contrib.messages.middleware.MessageMiddleware',\r\n 'django.middleware.clickjacking.XFrameOptionsMiddleware']\r\n\r\n\r\n\r\nTraceback:\r\n\r\nFile \"/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py\" in get_response\r\n  149.                     response = self.process_exception_by_middleware(e, request)\r\n\r\nFile \"/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py\" in get_response\r\n  147.                     response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n\r\nFile \"/home/jyo/Desktop/test2/chatbot/views.py\" in act\r\n  58. \t\t    database='mydb'\r\n\r\nFile \"/home/jyo/Desktop/test2/chatbot/chatterbot/chatterbot.py\" in __init__\r\n  32.         utils.validate_adapter_class(storage_adapter, StorageAdapter)\r\n\r\nFile \"/home/jyo/Desktop/test2/chatbot/chatterbot/utils.py\" in validate_adapter_class\r\n  116.                 Adapter.__name__\r\n\r\nException Type: InvalidAdapterException at /views/act\r\nException Value: 'chatterbot.storage.MongoDatabaseAdapter must be a subclass of Adapter'\r\n ``` My settings.py file is this.....\r\n\r\n```\r\nimport os\r\n\r\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'blk-g3_&rs(+0v(a!e@=w1ek@=3r4dqv7ke#vx88mc^(i3@#^='\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = [\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n    'chatbot',\r\n    'chatbot.chatterbot',\r\n    'chatbot.chatterbot.storage',\r\n\r\n]\r\n\r\nMIDDLEWARE_CLASSES = [\r\n    'django.middleware.security.SecurityMiddleware',\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.middleware.csrf.CsrfViewMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n]\r\n\r\nROOT_URLCONF = 'mysite.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'mysite.wsgi.application'\r\n\r\n\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nAUTH_PASSWORD_VALIDATORS = [\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\r\n    },\r\n    {\r\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\r\n    },\r\n]\r\n\r\n\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_L10N = True\r\n\r\nUSE_TZ = True\r\n\r\nSTATIC_URL = '/static/'\r\n``` chatterbot is the downloaded copy and I made some changes in it. I want to use that as a module in a web application. I didn't want to install the chatterbot, instead want to use the downloaded copy. But when i try to do so, I am getting this....\r\n\r\n> \r\n\r\nUnhandled exception in thread started by <function wrapper at 0x7f478fee4e60>\r\nTraceback (most recent call last):\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/utils/autoreload.py\", line 226, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/core/management/commands/runserver.py\", line 109, in inner_run\r\n    autoreload.raise_last_exception()\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/utils/autoreload.py\", line 249, in raise_last_exception\r\n    six.reraise(*_exception)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/utils/autoreload.py\", line 226, in wrapper\r\n    fn(*args, **kwargs)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/__init__.py\", line 18, in setup\r\n    apps.populate(settings.INSTALLED_APPS)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/apps/registry.py\", line 85, in populate\r\n    app_config = AppConfig.create(entry)\r\n  File \"/home/cedex/.local/lib/python2.7/site-packages/django/apps/config.py\", line 123, in create\r\n    import_module(entry)\r\n  File \"/usr/lib/python2.7/importlib/__init__.py\", line 37, in import_module\r\n    __import__(name)\r\nImportError: No module named chatterbot\r\n\r\n> \r\n\r\n\r\nIs there a way to use the downloaded copy as an independent one??? Thanks... Now it's working..  Hi \r\nCan we connect ChatterBot with API.AI. \r\n\r\nI like using logical adapter but i would like to know if we can integrate with API.AI.\r\n\r\nThanks\r\n gunthercox - I would love to add this feature in few weeks. I will let you know. \r\n\r\nThanks\r\n  Is it feasible to implement reinforcement learning for interactive training of the chatbot?\r\nThe idea would be to provide feedback on the appropriateness of the response,\r\nin order to develop specialized knowledge on the part of the bot.\r\nBad responses would be penalized, and vice versa for good responses.\r\nDoes the current architecture support such a mechanism in principle?\r\n What I did for a similar problem was, instead of logging all of the conversation statements:response_statements, manually use ```chatbot.learn_response()``` whenever some conditions trigger (like learning rate hyperparameter, positive / negative feedback from user,etc...) @gunthercox what is status on this? Should be great to get to see this enhancement.\r\n  Please specify example of usage `add_response` For a quick example you could look into this testcase, https://github.com/gunthercox/ChatterBot/blob/c3431ced70b88eb08fb36534f18ed62c90ab9723/tests/conversation_tests/test_statements.py#L17 Thanks this very helpful  I verified this issue on hipchat only, i made some changes on my machine to work. Thanks, Any plans to fix this issue? If not can i submit PR? Sure will submit a PR soon  D:\\Anaconda2\\lib\\site-packages\\chatterbot-0.5.1-py2.7.egg\\chatterbot\\storage\\jsonfile.py:19: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production application environments.\r\n  self.UnsuitableForProductionWarning\r\n[nltk_data] Downloading package stopwords to\r\n[nltk_data]     C:\\Users\\Administrator\\AppData\\Roaming\\nltk_data...\r\n[nltk_data]   Package stopwords is already up-to-date!\r\n[nltk_data] Downloading package wordnet to\r\n[nltk_data]     C:\\Users\\Administrator\\AppData\\Roaming\\nltk_data...\r\n\r\nI process like example \uff0cbut run long time no result why? I am not sure chatterbot will work anaconda , can you try with Python\r\nversion 2.7 , 3, 3.4 etc?\r\n Did you get a error or something else? If all you got just like you\nprovide, it seems like download package wordnet failed, did you try to\ndownload wordnet by yourself?\n\nOn Thu, Dec 8, 2016 at 9:51 AM, SunYunyun <notifications@github.com> wrote:\n\n> D:\\Anaconda2\\lib\\site-packages\\chatterbot-0.5.1-py2.\n> 7.egg\\chatterbot\\storage\\jsonfile.py:19: UnsuitableForProductionWarning:\n> The JsonFileStorageAdapter is not recommended for production application\n> environments.\n> self.UnsuitableForProductionWarning\n> [nltk_data] Downloading package stopwords to\n> [nltk_data] C:\\Users\\Administrator\\AppData\\Roaming\\nltk_data...\n> [nltk_data] Package stopwords is already up-to-date!\n> [nltk_data] Downloading package wordnet to\n> [nltk_data] C:\\Users\\Administrator\\AppData\\Roaming\\nltk_data...\n>\n> I process like example \uff0cbut run long time no result why?\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/473>, or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AGdN48iNDtoIfGeUvOJSyFqqn9qXX5D6ks5rF2K7gaJpZM4LHWa0>\n> .\n>\n\n\n\n-- \n\nWith best regards,\nDatong Li\n  @gunthercox Any plan to fix this issue https://github.com/gunthercox/ChatterBot/issues/308  I'm considering a problem where there may be a product database or some other searchable data set.\r\n\r\nI'd like to be able to extract keywords and perform searches, and return responses that may interest the user.\r\n\r\nIt looks like I'd have to write a logic adapter, which I should be able to do as a developer.  But I am unsure how to incorporate this into a training set, or whether a contextually aware sequence is possible.\r\n\r\nE.g say I have cars, houses and trucks and a conversation goes like this:\r\n\r\n\"Hey there, I'd like to build a house, I'd like to know more about the Alto floorplans?\"\r\n<searches database, finds House category, title Alto, 3 floorplans.  Creates a new context.>\r\n\"No problems, I can see 3 floorplans for Alto: 'Modern', 'Classic' and 'Entertainer'.  How can I help with these?\"\r\n\"Which is the cheapest?\"\r\n<Logic adapter detects an existing context, so further searches retain previous information.  Price filter applied>\r\n\"The Classic is our base range.  Would you like to speak to a consultant about the classic?\"\r\n\"Yes please\" <a \"no\" here would reset the context and release the logic adapter.>\r\n\"Please enter your email address and / or phone number and we'll be in touch shortly!\"\r\n\r\nIs something like this possible, e.g. real time context-sensitive searches?\r\n\r\nApologies if this is the wrong forum for this question, happy to be pointed in the right direction.  I'm just getting started with this stuff...\r\n\r\nThanks! Hi @gunthercox thanks for the reply, the data source would be external that's correct.\r\n\r\nI am wondering if an efficient approach would be a middleware layer that generates faux-chats based on a heuristic, and outputs these as new training sets.\r\n\r\nIs it possible to selectively \"untrain\" chatterbot, i.e to remove expired / outdated responses?  Alternatively I could run a cron to reset / retrain on a regular basis. Thanks for the pointer, I have an inkling of an idea forming, something like this:\r\n\r\n1. Generate Corpus data from saved searches (middleware, simple heuristic or templated pattern replacements)\r\n2. Train  Chatterbot on new corpus\r\n3. Remove old responses\r\n4. ...\r\n5. Profit?\r\n\r\nI'll have a bit of a play and let you know how I get on.  Ideally this would be a dynamic process but for our purposes this middleware would be pragmatic.  @gunthercox Is there any specific way to define corpus data for chatter bot?\r\n\r\nfor example\r\n\r\n```JSON\r\n{ \"statement\": \"response\"}\r\n```` \r\n\r\nIf so how chatterbot will process this text\r\n\r\n```JSON\r\n{\r\n  \"description\": \"Birds of Antarctica, grouped by family\",\r\n  \"source\": \"https://en.wikipedia.org/wiki/List_of_birds_of_Antarctica\",\r\n  \"birds\": [\r\n    {\r\n      \"family\": \"Albatrosses\",\r\n      \"members\": [\r\n        \"Wandering albatross\",\r\n        \"Grey-headed albatross\",\r\n        \"Black-browed albatross\",\r\n        \"Sooty albatross\",\r\n        \"Light-mantled albatross\"\r\n      ]\r\n   }\r\n ]\r\n}\r\n\r\n````  Question: as per suggested, the corpus should be in json format. How do you train the corpus in the main application? Let's say I exported the training corpus data, how do you retrain it on another bot? There isn't any examples on that?\r\n\r\nI basically wrote my own \"adapter\" to read the corpus in json format, then load it in JSON pair to train. @gunthercox I am planning to write PR for above two enhancements, do any have any ETA for these two issues #469 and #467? This looks good to me. Question \r\n\r\n1. How chatterbot will responds to previous statements using suggested model? \r\n2. If not, what are the other methods to achieve this?\r\n Apologies I am making this conversation longer \ud83d\udd22 , From above statement, can i assume If the question multiple answer, do i need to two lists for same answer?\r\n\r\n***\r\nHow do i make programmable responses? Is there way the If chatterbot not found the answer in corpus, suggest chatterbot to look for programmable response By looking into http://www.alicebot.org/aaa.html it was amazing like chatterbot. If i want make a bot like ``alice`` using chatterbot, what are things/algorithms need update/write/create?  some of them i have found, please point/correct me if it already there\r\n\r\nBot Properties\r\n----------------\r\nI think it is good idea if we have similar kind of feature.\r\nhttps://code.google.com/archive/p/aiml-en-us-foundation-alice/wikis/BotProperties.wiki\r\n\r\nPreprocessing statements\r\n----------------------------\r\nThis is my first choice of implementation, It's awesome feature\r\nhttps://code.google.com/archive/p/aiml-en-us-foundation-alice/wikis/PreProcessor.wiki\r\n\r\nTemplate mechanism\r\n------------------------\r\nI am assuming this statements has template, if it correct could you please share your views on this?\r\n```XML\r\n<template>As a <bot name=\"age\"/> year old <bot name=\"gender\"/> I am not really interested in that discussion.</template>\r\n```\r\n\r\n***\r\nReusing of corpus data\r\n-------------------------\r\nOther than i am also looking into some part/entire/few statements can i reuse it in any other corpus data\r\n\r\nCorpus search order\r\n----------------------\r\nAre we fallowing any order to search corpus database?\r\n\r\n vkosuri did you implement aiml or add it to chatterBot ?\r\n We have added some of aiml copurs into [chatterbot-corpus. ](https://github.com/gunthercox/chatterbot-corpus)  Well I'm using Django channels to send and receive messages. In this case I'm using consumers to get the messages from frontend and process it and return back to frontend.\r\n\r\n```\r\ndef ws_message(message):\r\n    # I like to call the chatterbot api here\r\n    reply_message = ????\r\n    message.reply_channel.send({\r\n        \"text\": reply_message,\r\n    })\r\n\r\n```\r\nI correctly set `chatterbot.ext.django_chatterbot` in INSTALLED_APPS. And also I have this...\r\n\r\n```\r\n# Chatterbot\r\nCHATTERBOT = {\r\n    'name': 'Bot Example',\r\n    'trainer': 'chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    'training_data': [\r\n        'chatterbot.corpus.english.greetings'\r\n    ]\r\n}\r\n```\r\n Yes I was expecting something very easy to setup weather I'm using Django channels or normal Django views for the chat messages. Maybe we can setup chatterbot configuration in the settings file and invoke that from our views or channels message to get the response.  \r\n\r\nI looked that chatterbot settings in that example and modified what I need.\r\n\r\n```\r\nchatterbot = ChatBot(\r\n    'ask',\r\n    storage_adapter=\"chatterbot.storage.DjangoStorageAdapter\",\r\n    input_adapter=\"chatterbot.input.VariableInputTypeAdapter\",\r\n    output_adapter=\"chatterbot.output.OutputFormatAdapter\",\r\n    output_format=\"object\"\r\n)\r\n```\r\n\r\n\r\nLooks like messages saved into database that's all I want. Will explore more! Thanks. \r\n @gunthercox \r\n\r\n```\r\n# Settings.py\r\n# Chatterbot\r\nCHATTERBOT = {\r\n    'name': 'Fun stuff bot',\r\n    'logic_adapters': [\r\n        'chatterbot.logic.MathematicalEvaluation',\r\n        'chatterbot.logic.TimeLogicAdapter',\r\n        'chatterbot.logic.BestMatch'\r\n    ],\r\n    'trainer': 'chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    'training_data': [\r\n         'chatterbot.corpus.english.greetings'\r\n    ]\r\n}\r\n\r\n\r\n# Make sure these imports comes after the CHATTERBOT\r\nfrom chatterbot import ChatBot\r\nfrom chatterbot.ext.django_chatterbot import settings as chatterbot_settings\r\n\r\nBOT = ChatBot(**chatterbot_settings.CHATTERBOT)\r\n```\r\n\r\nAnd in my channels message I have this...\r\n```\r\n\r\n    from django.conf import settings\r\n    input_data = {\"text\": \"My input statement\"}\r\n    response_data = settings.BOT.get_response(input_data)\r\n\r\n```\r\nI know this bad way to try. This will fetch the nltk data two times. I cann't able to make post request to chatterbot API using requests because of the csrf_token issue. What is the best approach? @gunthercox Well I'm not planning for using AJAX solution. And I found the way to work with `requests` The solutuion is to insert  `{% csrf_token %}` in base.html  and ...\r\n\r\n```\r\n    URL = 'http://127.0.0.1:8000'\r\n    client = requests.session()\r\n    client.get(URL)\r\n\r\n    # Token\r\n    csrftoken = client.cookies['csrftoken']\r\n\r\n    payload = {\r\n        \"text\": \"My input statement\"\r\n    }\r\n    headers = {'Content-type': 'application/json',  \"X-CSRFToken\":csrftoken}\r\n    cookies = dict(client.cookies)\r\n\r\n    resp = requests.post(URL + '/chatterbot/', json=payload, headers=headers, cookies=cookies)\r\n``` And another one thing... I'm getting the No json object could be decoded error from TimeLogicAdapter related. Will investigate into that one. Will update you.  I think it would be good option to specify custom paths for corpus data, currently its system specified path only\r\n\r\n```Python\r\nclass Corpus(object):\r\n\r\n    def __init__(self):\r\n        current_directory = os.path.dirname(__file__)\r\n        self.data_directory = os.path.join(current_directory, 'data')\r\n``` @gunthercox Planning to write like this, any suggestions/comments?\r\n\r\n```Diff\r\n@@ -9,6 +9,7 @@ class Trainer(object):\r\n \r\n     def __init__(self, storage, **kwargs):\r\n         self.storage = storage\r\n+        self.corpus_path = None\r\n         self.logger = logging.getLogger(__name__)\r\n \r\n     def train(self, *args, **kwargs):\r\n@@ -54,6 +55,10 @@ class Trainer(object):\r\n \r\n         return result\r\n \r\n+    def import_for_training(self, file_path):\r\n+        self.corpus_path = file_path\r\n+\r\n+\r\n     def export_for_training(self, file_path='./export.json'):\r\n         \"\"\"\r\n         Create a file from the database that can be used to\r\n@@ -100,7 +105,7 @@ class ChatterBotCorpusTrainer(Trainer):\r\n         super(ChatterBotCorpusTrainer, self).__init__(storage, **kwargs)\r\n         from .corpus import Corpus\r\n \r\n-        self.corpus = Corpus()\r\n+        self.corpus = Corpus(self.corpus_path)\r\n \r\n     def train(self, *corpora):\r\n         trainer = ListTrainer(self.storage)\r\n``` I like this to be integrated asap! Sure \ud83d\udc4d\n\nOn 21-Dec-2016 12:18, \"Raja Simon\" <notifications@github.com> wrote:\n\n> I like this to be integrated asap!\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/467#issuecomment-268449946>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ANCAAcCoRG0Rs25sLHEnQ1s10oB_fRpaks5rKMvbgaJpZM4LEHSY>\n> .\n>\n Can you make the pull request so I can check it and also does it support for adding my own custom adapters...?\r\n\r\ni.e)\r\n\r\n```\r\n    'logic_adapters': [\r\n        'chatterbot.logic.MathematicalEvaluation',\r\n        'chatterbot.logic.BestMatch'\r\n        'funstuff.logic.FunStuff'\r\n    ],\r\n``` Sorry for my prev message I just saw this https://chatterbot.readthedocs.io/en/stable/logic/create-a-logic-adapter.html#directory-structure @vkosuri Shall I have the patch now ?\r\n Sure\r\n  I tried the simple [terminal example](https://github.com/gunthercox/ChatterBot/blob/master/examples/terminal_example.py) but got this error. Any suggestions ? Thanks in advance.\r\n\r\n```\r\n/Users/tshrjn/anaconda3/lib/python3.5/site-packages/chatterbot/storage/jsonfile.py:19: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production application environments.\r\n  self.UnsuitableForProductionWarning\r\nTraceback (most recent call last):\r\n  File \"terminal_example.py\", line 19, in <module>\r\n    database=\"../database.db\"\r\n  File \"/Users/tshrjn/anaconda3/lib/python3.5/site-packages/chatterbot/chatterbot.py\", line 49, in __init__\r\n    self.logic.add_adapter(adapter, **kwargs)\r\n  File \"/Users/tshrjn/anaconda3/lib/python3.5/site-packages/chatterbot/logic/multi_adapter.py\", line 99, in add_adapter\r\n    utils.validate_adapter_class(adapter, LogicAdapter)\r\n  File \"/Users/tshrjn/anaconda3/lib/python3.5/site-packages/chatterbot/utils.py\", line 112, in validate_adapter_class\r\n    if not issubclass(import_module(validate_class), Adapter):\r\n  File \"/Users/tshrjn/anaconda3/lib/python3.5/site-packages/chatterbot/utils.py\", line 65, in import_module\r\n    return getattr(module, module_parts[-1])\r\nAttributeError: module 'chatterbot.logic' has no attribute 'BestMatch'\r\n```  In Machine Learning area, there always a test data set used for get the accuracy of the model, so, is there any similiar thing for ChatterBot? @gunthercox how do I get the confidence level from `get_response`? Is there any way to get the confidence level from a statement? Cool. I am using a quick and dirty method now, I'm not sure if it was meant to be used this way.\r\n\r\n```python\r\nfrom chatterbot.conversation import Statement\r\n# initialization\r\n...\r\n\r\nstatement = Statement(message)\r\nconfidence_level = bot.logic.process(statement)[0]\r\nresponse = bot.logic.process(statement)[1].text\r\n```  I think currently chatter will send requests and response to all configured logic adapters, instead is there a possibility send one to one mapping.\r\n\r\nFor example\r\n\r\nIf user requested from twitter response should go only twitter.\r\n\r\n@gunthercox Any idea how to achieve this task? Apologies For confusing, Is there possibility to configure multiple input and output adapters on a single bot instance?\r\n\r\n```Python\r\nbot = ChatBot(\r\n    \"All in One Example Bot\",\r\n    mailgun_from_address=FROM_EMAIL,\r\n    mailgun_api_key=MAILGUN[\"CONSUMER_KEY\"],\r\n    mailgun_api_endpoint=MAILGUN[\"API_ENDPOINT\"],\r\n    mailgun_recipients=RECIPIENTS,\r\n    input_adapter=\"chatterbot.input.Mailgun\",\r\n    output_adapter=\"chatterbot.output.Mailgun\",\r\n    storage_adapter=\"chatterbot.storage.JsonFileStorageAdapter\",\r\n    database=\"../database.db\"\r\n    \r\n    # Hipchat\r\n    input_adapter=\"chatterbot.input.HipChat\",\r\n    output_adapter=\"chatterbot.output.HipChat\",\r\n    hipchat_host=\"https://mydomain.hipchat.com\",\r\n    hipchat_room=\"my-room-name\",\r\n    hipchat_access_token=\"my-hipchat-access-token\",\r\n)\r\n```\r\n\r\n Thanks, I have few other questions, if we add this features integrated into chatterbot, \r\n\r\n1. any consequences/issues will occur? \r\n2. If not any plan implementation this feature?\r\n3. Will it benefited to chatterbot?\r\n Great and thank you  Installed from ZIP file on 12/02/16... Python 3.5.2\r\nThis ran a couple of days ago, just re-installed...maybe something broken?\r\n\r\n>>> from chatterbot import ChatBot\r\n>>> chatbot = ChatBot(\"Charlie\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"C:\\Users\\BockJoel\\Downloads\\ChatterBot-0.5.0\\chatterbot\\chatterbot.py\", line 36, in __init__\r\n    self.storage = utils.initialize_class(storage_adapter, **kwargs)\r\n  File \"C:\\Users\\BockJoel\\Downloads\\ChatterBot-0.5.0\\chatterbot\\utils.py\", line 81, in initialize_class\r\n    return Class(**kwargs)\r\n  File \"C:\\Users\\BockJoel\\Downloads\\ChatterBot-0.5.0\\chatterbot\\storage\\jsonfile.py\", line 14, in __init__\r\n    from jsondb import Database\r\n  File \"C:\\Python35-64\\lib\\site-packages\\jsondb\\__init__.py\", line 14, in <module>\r\n    import core\r\nImportError: No module named 'core' FIXED by following these instructions:\r\n\r\n_If you see a directory named utils delete it.\r\nAlso if you see a directory named adapters delete it.\r\n\r\nI had a similar issue recently. For some reason pip appears to be adding cached outdated modules from the previous version when ChatterBot gets upgraded._ It's all good, thank you.\nI'm excited about the ChatterBot project and hope to maybe contribute once\nI get up to speed.\n\n\nOn Fri, Dec 2, 2016 at 3:50 PM, Gunther Cox <notifications@github.com>\nwrote:\n\n> Hi @boris314159 <https://github.com/boris314159>, glad you were able to\n> resolve the issue. Sorry I didn't get a chance to respond earlier.\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/gunthercox/ChatterBot/issues/457#issuecomment-264593716>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AEoPcoeRctAgF0LQFZUAGPcGVcbm1BrAks5rEK7dgaJpZM4LC_EK>\n> .\n>\n  I didn't get how to use mongoDB instead of JSON adapter..didn't show any responses from the bot @HelloJyo Here is an example located here http://chatterbot.readthedocs.io/en/stable/storage/index.html#mongo-database-adapter\r\n\r\nA python code example located here https://github.com/gunthercox/ChatterBot/blob/master/examples/terminal_mongo_example.py i did that but the bot didn't give any response. I created a mongoDB \"myDB\" and inserted some data into it. Where should i place it? I want to use that one for the bot to give responses... I changed to the mongoDB. I trained the bot with new data by making changes with the corpus data.\r\nBut couldn't train it with the trainer class (list trainer). If there any way to do that? ok i'm gonna try ok it worked....thanks  @gunthercox How do i resolve this error.\r\n\r\n```\r\n[02/Dec/2016 07:38:10] \"GET /static/js/bootstrap.js HTTP/1.1\" 304 0\r\nInternal Server Error: /api/chatterbot/\r\nTraceback (most recent call last):\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/exception.py\", line 39, in inner\r\n    response = get_response(request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 249, in _legacy_get_response\r\n    response = self._get_response(request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/views/generic/base.py\", line 68, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/views/generic/base.py\", line 88, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/chatterbot/ext/django_chatterbot/views.py\", line 53, in post\r\n    chat_session = self.chatterbot.conversation_sessions.get(chat_session_id)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/chatterbot/conversation/session.py\", line 41, in get\r\n    return self.sessions[str(session_id)]\r\nKeyError: '0b678184-b85a-11e6-b1d4-080027362d8d'\r\n[02/Dec/2016 07:38:17] \"POST /api/chatterbot/ HTTP/1.1\" 500 16606\r\n``` <pre>\r\n[02/Dec/2016 08:37:21] \"GET /static/js/jquery.js HTTP/1.1\" 304 0\r\n[02/Dec/2016 08:37:21] \"GET /static/js/js.cookie.js HTTP/1.1\" 304 0\r\nInternal Server Error: /api/chatterbot/\r\nTraceback (most recent call last):\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/exception.py\", line 39, in inner\r\n    response = get_response(request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 249, in _legacy_get_response\r\n    response = self._get_response(request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/views/generic/base.py\", line 68, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/views/generic/base.py\", line 88, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File \"/home/developer/adtran-bot/abot/src/abot/chatterbot_views.py\", line 53, in post\r\n    chat_session = self.chatterbot.conversation_sessions.get(chat_session_id)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/chatterbot/conversation/session.py\", line 41, in get\r\n    return self.sessions[str(session_id)]\r\n<b>KeyError: '0b678184-b85a-11e6-b1d4-080027362d8d'</b>\r\n[02/Dec/2016 08:37:22] \"POST /api/chatterbot/ HTTP/1.1\" 500 16531\r\nPerforming system checks...\r\n\r\n/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/chatterbot/storage/jsonfile.py:19: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production application environments.\r\n  self.UnsuitableForProductionWarning\r\n[nltk_data] Downloading package stopwords to\r\n[nltk_data]     /home/developer/nltk_data...\r\n[nltk_data]   Package stopwords is already up-to-date!\r\n[nltk_data] Downloading package wordnet to\r\n[nltk_data]     /home/developer/nltk_data...\r\n[nltk_data]   Package wordnet is already up-to-date!\r\n[nltk_data] Downloading package punkt to /home/developer/nltk_data...\r\n[nltk_data]   Package punkt is already up-to-date!\r\n[nltk_data] Downloading package vader_lexicon to\r\n[nltk_data]     /home/developer/nltk_data...\r\n[nltk_data]   Package vader_lexicon is already up-to-date!\r\nSystem check identified no issues (0 silenced).\r\nDecember 02, 2016 - 08:39:14\r\nDjango version 1.10.4, using settings 'abot.settings'\r\nStarting development server at http://127.0.0.1:8000/\r\nQuit the server with CONTROL-C.\r\nInternal Server Error: /api/chatterbot/\r\nTraceback (most recent call last):\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/exception.py\", line 39, in inner\r\n    response = get_response(request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 249, in _legacy_get_response\r\n    response = self._get_response(request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/views/generic/base.py\", line 68, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/views/generic/base.py\", line 88, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File \"/home/developer/adtran-bot/abot/src/abot/chatterbot_views.py\", line 53, in post\r\n    chat_session = self.chatterbot.conversation_sessions.get(chat_session_id)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/chatterbot/conversation/session.py\", line 41, in get\r\n    return self.sessions[str(session_id)]\r\nKeyError: '0b678184-b85a-11e6-b1d4-080027362d8d'\r\n[02/Dec/2016 08:39:36] \"POST /api/chatterbot/ HTTP/1.1\" 500 16531\r\nInternal Server Error: /api/chatterbot/\r\nTraceback (most recent call last):\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/exception.py\", line 39, in inner\r\n    response = get_response(request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 249, in _legacy_get_response\r\n    response = self._get_response(request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/views/generic/base.py\", line 68, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/views/generic/base.py\", line 88, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File \"/home/developer/adtran-bot/abot/src/abot/chatterbot_views.py\", line 53, in post\r\n    chat_session = self.chatterbot.conversation_sessions.get(chat_session_id)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/chatterbot/conversation/session.py\", line 41, in get\r\n    return self.sessions[str(session_id)]\r\n<b>KeyError: '0b678184-b85a-11e6-b1d4-080027362d8d'</b>\r\n[02/Dec/2016 08:43:58] \"POST /api/chatterbot/ HTTP/1.1\" 500 16531\r\n^C(venv)developer@cn-vm-vkosuri:~/adtran-bot/abot/src$ clear\r\n\r\n(venv)developer@cn-vm-vkosuri:~/adtran-bot/abot/src$ python manage.py runserver\r\nPerforming system checks...\r\n\r\n/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/chatterbot/storage/jsonfile.py:19: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production application environments.\r\n  self.UnsuitableForProductionWarning\r\n[nltk_data] Downloading package stopwords to\r\n[nltk_data]     /home/developer/nltk_data...\r\n[nltk_data]   Package stopwords is already up-to-date!\r\n[nltk_data] Downloading package wordnet to\r\n[nltk_data]     /home/developer/nltk_data...\r\n[nltk_data]   Package wordnet is already up-to-date!\r\n[nltk_data] Downloading package punkt to /home/developer/nltk_data...\r\n[nltk_data]   Package punkt is already up-to-date!\r\n[nltk_data] Downloading package vader_lexicon to\r\n[nltk_data]     /home/developer/nltk_data...\r\n[nltk_data]   Package vader_lexicon is already up-to-date!\r\nSystem check identified no issues (0 silenced).\r\nDecember 02, 2016 - 08:50:17\r\nDjango version 1.10.4, using settings 'abot.settings'\r\nStarting development server at http://127.0.0.1:8000/\r\nQuit the server with CONTROL-C.\r\nInternal Server Error: /api/chatterbot/\r\nTraceback (most recent call last):\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/exception.py\", line 39, in inner\r\n    response = get_response(request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 249, in _legacy_get_response\r\n    response = self._get_response(request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/views/generic/base.py\", line 68, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/django/views/generic/base.py\", line 88, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File \"/home/developer/adtran-bot/abot/src/abot/chatterbot_views.py\", line 53, in post\r\n    chat_session = self.chatterbot.conversation_sessions.get(chat_session_id)\r\n  File \"/home/developer/adtran-bot/venv/local/lib/python2.7/site-packages/chatterbot/conversation/session.py\", line 41, in get\r\n    return self.sessions[str(session_id)]\r\n<b>KeyError: '0b678184-b85a-11e6-b1d4-080027362d8d'</b>\r\n</pre> I think the browser caching session id, we need clear the browser session id, https://docs.djangoproject.com/en/dev/topics/http/sessions/#django.contrib.sessions.backends.base.SessionBase.flush Currently i was handling like this at https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/ext/django_chatterbot/views.py#L51, \r\n\r\n@gunthercox am i doing in correct way?\r\n\r\n``` Python\r\n        if chat_session_id:\r\n            try:\r\n                chat_session = self.chatterbot.conversation_sessions.get(chat_session_id)\r\n            except Exception as e:\r\n                print str(e)\r\n                chat_session = self.chatterbot.conversation_sessions.new()\r\n                chat_session_id = str(chat_session.uuid)\r\n                request.session['chat_session_id'] = chat_session_id\r\n        else:\r\n            chat_session = self.chatterbot.conversation_sessions.new()\r\n            chat_session_id = str(chat_session.uuid)\r\n            request.session['chat_session_id'] = chat_session_id\r\n\r\n        response_data = self.chatterbot.get_response(input_data, chat_session_id)\r\n\r\n        data = {\r\n            'text': str(response_data)\r\n        }\r\n\r\n        # Return a method not allowed response\r\n        return JsonResponse(data, status=200)\r\n``` Somehow i figured out this issue, It was failing because of initial or first conversation browser cookie session id and UUID generated session are different. If it looks correct i will make a PR for this issue. No problem, This looks awsome. Thank you very much.  ```\r\nerror: \r\n        distinct too big, 16mb cap\r\nmongodb data size: \r\n        hatterbot-database\t0.953125GB\r\n``` Same error here. Not with one of the examples though but with an import of https://www.cs.cornell.edu/~cristian/Cornell_Movie-Dialogs_Corpus.html in particular the movie_lines.txt \r\n\r\nThe import is fine and it will work upto some point while importing but by the time the import is done I will get a pymongo.errors.OperationFailure: distinct too big, 16mb cap error. I will try again limiting the length of the phrases to 160 characters and report back. @gunthercox i can confirm that if the size of the of text or phrase is limited (tried 160 characters) i see no  \"Mongo DB error: distinct too big, 16mb cap\" error.  It's most likely my stupidity \r\n\r\nthis is my error on python 3.5.2\r\n\r\nTraceback (most recent call last):\r\n  File \"C:/Users/Administrator/Desktop/test.py\", line 1, in <module>\r\n    from chatterbot import ChatBot\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\chatterbot\\__init__.py\", line 4, in <module>\r\n    from .chatterbot import ChatBot\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\chatterbot\\chatterbot.py\", line 4, in <module>\r\n    from .logic import MultiLogicAdapter\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\chatterbot\\logic\\__init__.py\", line 1, in <module>\r\n    from .logic_adapter import LogicAdapter\r\n  File \"C:\\Users\\Administrator\\AppData\\Local\\Programs\\Python\\Python35\\lib\\site-packages\\chatterbot\\logic\\logic_adapter.py\", line 3, in <module>\r\n    from chatterbot.utils import import_module\r\nImportError: cannot import name 'import_module' Which example are you trying to run? Thank you, I've been dying to play around with this. Sorry to bother a closed issue but i was woundering if the chatbot can learn from speaking with the user for example through terminal Yes, check out the examples, also the docs! but from what i seen in the example terminal was that it only talks to the user, Or does it learn without needing .train called?  Hey, sorry for posting another issue, but Hub doesn't have a chat function, kinda ironic.\r\nWe can chat via email, if that's cool.\r\n\r\nYour tkinter gui works like a charm, but I'm unfamiliar with all the \"self.\" thingies.. So its kind a difficult for me to customize it, haha. Two main things I am wanting to do is have my bot initiate the conversation, and press enter to submit a response. I've googles and trial-n-errored but I am nowhere close.\r\n When I run the GUI, and the window pops up, I would like\r\n     ChatBot: Hello!\r\nto be the first thing that appears in the chat box. \r\n\r\nIs there a way I can set up a Greeting Statement at start up? No, not at all. I would either be a set sentence or a random choice of sentences. But I don't know how your tkinter code works, so I don't know how to get it to start off with a text.\r\n Check out my first repository! https://github.com/graylu21/ELIZA-ChatterBot\r\nI didn't know if I should have done a pull request or what... haha Any ideas? \r\n\r\nAnd I tried posting my Enter problem on StackOverflow:\r\nhttp://stackoverflow.com/questions/40924200/bind-enter-on-complicated-tkinter-code Fixed it!!! Aha! In the 'initialize' definition:\r\n```\r\n        self.usr_input = ttk.Entry(self, state='normal')\r\n        self.usr_input.grid(column=0, row=0, sticky='nesw', padx=3, pady=3)\r\n        self.usr_input.focus() #Sets focus to the input bar at start\r\n        self.usr_input.bind('<Return>', lambda e: self.get_response()) #Binds the Enter key\r\n```\r\n\r\nBut I still don't know how to have the 'bot' initiate conversation. Whoo! Fixed the other one too!\r\n`       self.conversation = ScrolledText.ScrolledText(self, wrap='word', state='normal')\r\n        self.conversation.grid(column=0, row=2, columnspan=2, sticky='nesw', padx=3, pady=3)\r\n        self.conversation.insert(tk.END, \"Eliza: Hello\" + \"\\n\") #Initiates Conversation\r\n        self.conversation['state'] = 'disabled'\r\n`\r\n\r\nThen we could change the string for a 'greetings' function if we wanted.  Hi all,\r\n\r\nI got error for running this example\r\n\r\n```Python\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\nimport logging\r\n\r\n\r\n# Uncomment the following line to enable verbose logging\r\n# logging.basicConfig(level=logging.INFO)\r\n\r\n# Create a new instance of a ChatBot\r\nbot = ChatBot(\"Terminal\",\r\n    storage_adapter=\"chatterbot.storage.JsonFileStorageAdapter\",\r\n    logic_adapters=[\r\n        \"chatterbot.logic.MathematicalEvaluation\",\r\n        \"chatterbot.logic.TimeLogicAdapter\",\r\n        \"chatterbot.logic.ClosestMatchAdapter\"\r\n    ],\r\n    input_adapter=\"chatterbot.input.TerminalAdapter\",\r\n    output_adapter=\"chatterbot.output.TerminalAdapter\",\r\n    database=\"../database.db\"\r\n)\r\n\r\nprint(\"Type something to begin...\")\r\n\r\n# The following loop will execute each time the user enters input\r\nwhile True:\r\n    try:\r\n        # We pass None to this method because the parameter\r\n        # is not used by the TerminalAdapter\r\n        bot_input = bot.get_response(None)\r\n\r\n    # Press ctrl-c or ctrl-d on the keyboard to exit\r\n    except (KeyboardInterrupt, EOFError, SystemExit):\r\n        break\r\n\r\n```\r\n```\r\n> Traceback (most recent call last):\r\n  File \"chatbot.py\", line 19, in <module>\r\n    database=\"../database.db\"\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/site-packages/chatterbot/chatterbot.py\", line 37, in __init__\r\n    self.validate_adapter_class(storage_adapter, StorageAdapter)\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/site-packages/chatterbot/chatterbot.py\", line 151, in validate_adapter_class\r\n    if not issubclass(import_module(validate_class), Adapter):\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/site-packages/chatterbot/utils/module_loading.py\", line 12, in import_module\r\n    module = importlib.import_module(module_path)\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 956, in _find_and_load_unlocked\r\nImportError: No module named 'chatterbot.storage'\r\n```\r\n\r\nanyone can help?\r\n @Niccolohui which version of chatterbot are you using? Try\r\n\r\n```Shell\r\npip install --upgrade chatterbot\r\n``` @Niccolohui \r\ni think you are not using updated chatterbot. \r\ne.g., your storage_adapter=\"chatterbot.storage.JsonFileStorageAdapter\", should be replaced to     storage_adapter=\"chatterbot.adapters.storage.JsonFileStorageAdapter\", @vkosuri Thanks but i have updated the chatterbot again. and i got this\r\n\r\n> Traceback (most recent call last):\r\n  File \"chatbot.py\", line 2, in <module>\r\n    from chatterbot import ChatBot\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/site-packages/chatterbot/__init__.py\", line 4, in <module>\r\n    from .chatterbot import ChatBot\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/site-packages/chatterbot/chatterbot.py\", line 4, in <module>\r\n    from .logic import MultiLogicAdapter\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/site-packages/chatterbot/logic/__init__.py\", line 1, in <module>\r\n    from .logic_adapter import LogicAdapter\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/site-packages/chatterbot/logic/logic_adapter.py\", line 3, in <module>\r\n    from chatterbot.utils import import_module\r\nImportError: cannot import name 'import_module' @gunthercox  thanks!!\r\nI have removed the directory named utils and adapters and i got this.\r\n\r\n>   File \"chatbot.py\", line 19, in <module>\r\n    database=\"../database.db\"\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/site-packages/chatterbot/chatterbot.py\", line 31, in __init__\r\n    utils.validate_adapter_class(storage_adapter, StorageAdapter)\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/site-packages/chatterbot/utils.py\", line 112, in validate_adapter_class\r\n    if not issubclass(import_module(validate_class), Adapter):\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/site-packages/chatterbot/utils.py\", line 63, in import_module\r\n    module = importlib.import_module(module_path)\r\n  File \"/Users/niccolo/anaconda/lib/python3.5/importlib/__init__.py\", line 126, in import_module\r\n    return _bootstrap._gcd_import(name[level:], package, level)\r\n  File \"<frozen importlib._bootstrap>\", line 986, in _gcd_import\r\n  File \"<frozen importlib._bootstrap>\", line 969, in _find_and_load\r\n  File \"<frozen importlib._bootstrap>\", line 953, in _find_and_load_unlocked\r\nImportError: No module named 'chatterbot.adapters.storage'; 'chatterbot.adapters' is not a package\r\n\r\n\r\n\r\n  I thought this could be a useful feature, if we have a nice login page for django example app.\r\n\r\ncommon credentials are\r\n```\r\nUser: chatterbot\r\nPass: chatterbot\r\n```\r\n\r\n@gunthercox can i submit PR for this request? Usually the web services are provided using login credentials only. That's the reason i am looking into Agreed with you  I suggest that if this chatterbot can support the mechanism to create a conversational flow chatbot like [wit.ai](https://wit.ai/) with it's story, I think it will be more reaching the needs of creating chatbot for various kind of scenarios. @gunthercox , well it means that we have to figure it out our self to make a conversational chatbot. Like what i just did by saving the detected topic or intent for each statement, and adding a step variable so that the bot know where he is in conversation. am I right?\r\n\r\nBecause, let say if we have a scenario when we want to direct the flow of conversation with the user by slipping some API in the middle of user say and the bot say. for instance like conversation of ordering flowers. \r\n\r\nwhat do you think about that? @gunthercox \r\nok yes, but how about to make the response ? can I generate my own response in hard code ? or maybe there is a way to store in db by train method, but not by user_input - response pairs, but the response only. \r\n\r\nso I can call chatbot.train(['Thank you for ordering flower with us'])\r\n\r\nor you have a more dynamic and simple way? \r\n\r\nthanks in advance  I did a simple script follow the tutorial but got this error. Any suggestion? \r\nThanks\r\n\r\npython chat.py \r\nTraceback (most recent call last):\r\n  File \"chat.py\", line 1, in <module>\r\n    from chatterbot import ChatBot\r\n  File \"/Users/Hiruma/MyWorkSpace/GitHub/tzchatbot/env/lib/python3.5/site-packages/chatterbot/__init__.py\", line 4, in <module>\r\n    from .chatterbot import ChatBot\r\n  File \"/Users/Hiruma/MyWorkSpace/GitHub/tzchatbot/env/lib/python3.5/site-packages/chatterbot/chatterbot.py\", line 4, in <module>\r\n    from .logic import MultiLogicAdapter\r\n  File \"/Users/Hiruma/MyWorkSpace/GitHub/tzchatbot/env/lib/python3.5/site-packages/chatterbot/logic/__init__.py\", line 1, in <module>\r\n    from .logic_adapter import LogicAdapter\r\n  File \"/Users/Hiruma/MyWorkSpace/GitHub/tzchatbot/env/lib/python3.5/site-packages/chatterbot/logic/logic_adapter.py\", line 3, in <module>\r\n    from chatterbot.utils import import_module\r\nImportError: cannot import name 'import_module'\r\n In Ubuntu Linux 14.04.5 desktop, the upper two directories utils and adapters is located in /usr/local/lib/python2.7/dist-packages/chatterbot, delete it and it will work. @gunthercox this error i have seen when i have installed chatterbot from ``pip install chatterbot`` may be pip zip file cached these files while uploading into pypi server.  sameerror problem\r\n>>> from chatterbot import Chatbot\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nImportError: cannot import name 'Chatbot'\r\nI am using python3 Thanks.. @gunthercox  it works.  Hi folks, I'm trying to add extra data to each statement by using add_extra method. But when I check in my mongodb , the corresponding statement still does not has any extra_data. \r\n\r\nhere is my code\r\n\r\n```python\r\ninput_statement = bot.input.process_input_statement()\r\nstatement, response, confidence = bot.generate_response(input_statement)\r\n\r\nst = Statement(input_statement)\r\nst.add_extra_data('intent', 'greetings')\r\n```\r\n\r\n Here is my code\r\n\r\n`while True:\r\n    try:\r\n        # bot_input = bot.get_response(None)\r\n        input_statement = bot.input.process_input_statement()\r\n        statement, response, confidence = bot.generate_response(input_statement)\r\n\r\n        st = Statement(input_statement)\r\n        st.add_extra_data('intent', 'greetings')\r\n        print(str(st.text))\r\n        bot.storage.update(st)\r\n\r\n    # Press ctrl-c or ctrl-d on the keyboard to exit\r\n    except (KeyboardInterrupt, EOFError, SystemExit):\r\n        break`\r\n\r\nBut I get this error\r\n\r\n`...\r\n    self.statements.bulk_write(operations, ordered=False)\r\n  File \"/usr/lib/python3.5/pymongo/collection.py\", line 435, in bulk_write\r\n    bulk_api_result = blk.execute(self.write_concern.document)\r\n  File \"/usr/lib/python3.5/pymongo/bulk.py\", line 470, in execute\r\n    return self.execute_command(sock_info, generator, write_concern)\r\n  File \"/usr/lib/python3.5/pymongo/bulk.py\", line 302, in execute_command\r\n    run.ops, True, self.collection.codec_options, bwc)\r\nbson.errors.InvalidDocument: Cannot encode object: <Statement text:hi>\r\n` Yes, I nailed it, instead of I'm creating a new object, I just use the existing statement variable from\r\n\r\n`statement, response, confidence = bot.generate_response(input_statement)`\r\n\r\nand call `statement.add_extra_data('intent','greetings')` and then `bot.storage.update(statement)`\r\n\r\nand now I can see my corresponding statement has the extra data. \r\n\r\nThanks, cos I just played around with python, still haven't got the deep oop idea behind your code\r\n\r\nThanks again  ```\r\nrzai@rzai00:~/prj/ykdebug-ChatterBot$ python microsoft_bot.py \r\nTraceback (most recent call last):\r\n  File \"microsoft_bot.py\", line 3, in <module>\r\n    from settings import Microsoft\r\nImportError: No module named settings\r\nrzai@rzai00:~/prj/ykdebug-ChatterBot$ \r\n```  rzai@rzai00:~/prj/ykdebug-ChatterBot$ python twitter_training_example.py \r\nTraceback (most recent call last):\r\n  File \"twitter_training_example.py\", line 3, in <module>\r\n    from settings import TWITTER\r\nImportError: No module named settings   I have some docs improvement suggestions pertaining to the learning aspect of the bot.\r\n\r\nFrom the documentation:\r\nAn untrained instance of ChatterBot starts off with no knowledge of how to communicate. Each time a user enters a statement, the library saves the text that they entered and the text that the statement was in response to. As ChatterBot receives more input the number of responses that it can reply and the accuracy of each response in relation to the input statement increase. The program selects the closest matching response by searching for the closest matching known statement that matches the input, it then returns the most likely response to that statement based on how frequently each response is issued by the people the bot communicates with.\r\n\r\n1. 'An untrained instance of ChatterBot'\r\nQuestion: Untrained here refers to an empty database.db?\r\n\r\n2. 'Each time a user enters a statement, the library saves the text that they entered and the text that the statement was in response to'\r\nQuestion: Suppose user enters statement: 'Tell me the weather in location'. Bot reponse: 'The weather in location is X degrees'. So here, statement and bot reponse is stored in the database.db file. In the database.db this is stored as:\r\n`\r\n{\r\n  \"The weather in location is X degrees\": {\r\n    \"in_response_to\": [\r\n      {\r\n        \"text\": \"Tell me the weather in location\",\r\n        \"occurrence\": 1\r\n      }\r\n    ]\r\n  }\r\n}\r\n`\r\nWhat is the logic behind occurrence count? This beings me to 3.\r\n\r\n3. 'As ChatterBot receives more input the number of responses that it can reply and the accuracy of each response in relation to the input statement increase'\r\nQuestion: So if more users type in 'What is the weather in location' or 'Weather in location'. The bot response is 'The weather in location is X degrees'. As per the doc, the bot should increase the number of responses it replies back and it should increase the accuracy. Can this learning process be made more elaborate as I can not understand this process when applied to the example above. Also, how does the occurrence count affect here. \r\n\r\n4. 'The program selects the closest matching response by searching for the closest matching known statement that matches the input'\r\nQuestion: For searching for the closes matching statement, it looks up statements in database.db or corpus json? Need some clarification. \r\n\r\n5. 'it then returns the most likely response to that statement based on how frequently each response is issued by the people the bot communicates with'\r\nQuestion: So the bot determines the 'most likely response' based on logic adapters used? Applying this and 'frequency of each response' to the weather example above, we have:\r\nStatement 1: Tell me the weather in location\r\nStatement 2: What is the weather in location\r\nStatement 3: Weather in location\r\n\r\nWe have the answer to Statement 1 in corpus as 'The weather in location is X degrees'. The bot replies the same to the other Statements 2 and 3? Or where does the learning process take place here? Does the bot reply back the Statement 1 as response to Statement 3 after a number of users call the bot similar to Statement 1 as the occurrence count increases eventually? Example: After a number of uses, \r\n\r\nStatement 1: Tell me the weather in location\r\nBot: The weather in location is X degrees\r\n\r\nStatement 2: What is the weather in location\r\nBot: The weather in location is X degrees (From corpus)  or\r\nBot: Tell me the weather in location (From learned data)\r\n\r\nPlease clarify the above example. \r\n\r\nThe whole point of this post is to suggest the docs to give a better understanding of the learning process used in the bot's statement/response. \r\n\r\n\r\n  Hi there,\r\nI'm trying to deploy my chat bot to openshift flask on python 3.5\r\nThen I get that issue\r\n```\r\nSearching for chatterbot\r\nReading https://pypi.python.org/simple/chatterbot/\r\nBest match: ChatterBot 0.4.13\r\nDownloading https://pypi.python.org/packages/37/91/f3f6b38a47cc441b253c23233ddbf444fed51083eb1eaecb2535b115025b/ChatterBot-0.4.13.tar.gz#md5=a2bcab3dfb59441113973a97ba420f01\r\nProcessing ChatterBot-0.4.13.tar.gz\r\nWriting /tmp/easy_install-rquhl12e/ChatterBot-0.4.13/setup.cfg\r\nRunning ChatterBot-0.4.13/setup.py -q bdist_egg --dist-dir /tmp/easy_install-rquhl12e/ChatterBot-0.4.13/egg-dist-tmp-dglb_h_f\r\nTraceback (most recent call last):\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/setuptools/sandbox.py\", line 152, in save_modules\r\n    yield saved\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/setuptools/sandbox.py\", line 193, in setup_context\r\n    yield\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/setuptools/sandbox.py\", line 237, in run_setup\r\n    DirectorySandbox(setup_dir).run(runner)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/setuptools/sandbox.py\", line 267, in run\r\n    return func()\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/setuptools/sandbox.py\", line 236, in runner\r\n    _execfile(setup_script, ns)\r\n  File \"/opt/rh/rh-python35/root/usr/lib/python3.5/site-packages/setuptools/sandbox.py\", line 46, in _execfile\r\n    exec(code, globals, locals)\r\n  File \"/tmp/easy_install-rquhl12e/ChatterBot-0.4.13/setup.py\", line 7, in <module>\r\n    author_email='12520054@gm.uit.edu.vn',\r\n  File \"/tmp/easy_install-rquhl12e/ChatterBot-0.4.13/chatterbot/__init__.py\", line 4, in <module>\r\n  File \"/tmp/easy_install-rquhl12e/ChatterBot-0.4.13/chatterbot/chatterbot.py\", line 2, in <module>\r\n  File \"/tmp/easy_install-rquhl12e/ChatterBot-0.4.13/chatterbot/adapters/storage/__init__.py\", line 3, in <module>\r\n  File \"/tmp/easy_install-rquhl12e/ChatterBot-0.4.13/chatterbot/adapters/storage/jsonfile.py\", line 3, in <module>\r\nImportError: No module named 'jsondb'\r\n```\r\nAny one help me please.\r\nThanks so much :D Also had this. Did you try installing jsondb?  @gunthercox will it consider other bot session objects, for example gitter/microsoft session object was expired then chatterbot session object will expire?, will this case is considered? Nice, Thank you  I just made a chatbot with training data that I made by my own. It is trained with a set of conversation about animals which we see commonly. The only problem that what I found is most of the time when we ask the bot which it don't know it will reply an answer which has closest match.\r\nSuppose I am asking the bot 'what is a cat' and it know the response for' what is a rat' only then it reply the answer for what is a rat. So the answer which is given by the bot become entirely wrong. I tried using LowConfidence adapter to tackle with this issue and then I realized I will not be able to get the auto correction feature that currently AIML don't have if I filter response with Low confidence adapter. By auto correction what I meant is sometimes we write 'wat' instead of what, dat instead of 'that' etc. all this can be managed correctly by using closest match adapter. \r\nSo as a solution for all this problem what I was thinking was like if we have a json file of following format as a training set, can we go through each node for searching for keyword and if a keyword is found then can we stick on that specific list of conversation to  find out a closest match response?\r\n{\r\n\t\"cow\": [\r\n\t\t\"What is a cow?\",\r\n\t\t\"Cow is a domestic animal\"\r\n\t],\r\n\r\n\t\"cat\": [\r\n\t\t\"What is a cat?\",\r\n\t\t\"Cat is a pet\"\r\n\t]\r\n}\r\n\r\nSuppose I am asking a question **\"what is a cat\"** after removing the stopwords or by tokenizing each word we can search and find a node which has a best match and can find a response for the question from the list of corresponding node. Can we do like that?  I will explain with an example, If a user asks **What is a cat** first we will tokenize it or we remove the stopwords and then tokenize it. Ater tokenizing we will get 4 tokens **What, is, a, cat** and then we will compare all this 4 tokens one by one to all the keys that we have in our json data because we don't know what is the keyword yet. Then after finding the key from the json data we will search for a closest match for the question from that particular node. Then we will get an accurate answer.  @vishnu-ks I am facing the same kind of issues on the responses, being fighting with chatterbot for 2 weeks now to get the right combination to knock it out :D \r\n\r\nand I slightly have the same idea, using tokenized data as tags then store them in the extra_data field along side the statements.\r\n\r\nI will implement it and let @gunthercox see it and maybe he'll give us another hint, he might have an illumination from it and come up with a better idea :)\r\n\r\n  @gunthercox is it possible to having both voice and response in a Django chatterbot? If so could you provide an example scenario here? @gunthercox thank you  After chatting with the chat bot for sometime it got freezed and was not replying to any questions.\r\nIt happened only after adding some logic adapters. I checked after removing those logic adapters and then also it was not working I will paste my code and error log here. Hope you guys will figure out a way to solve this problems soon. \r\n\r\n![screen shot 2016-11-22 at 11 32 09 am](https://cloud.githubusercontent.com/assets/18617708/20512950/dcdf92e2-b0a8-11e6-94b0-98d7ed34fdc4.png)\r\n\r\nWhat I wrote on settings.py is this\r\n\r\n```python\r\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\r\nimport os\r\n\r\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\r\n\r\n\r\n# Quick-start development settings - unsuitable for production\r\n# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/\r\n\r\n# SECURITY WARNING: keep the secret key used in production secret!\r\nSECRET_KEY = 'fsch+6!=q+@ol&%0x!nwdl@48^ixbd4clx5f1i!5n^66y+pmn*'\r\n\r\n# SECURITY WARNING: don't run with debug turned on in production!\r\nDEBUG = True\r\n\r\nALLOWED_HOSTS = []\r\n\r\n\r\n# Application definition\r\n\r\nINSTALLED_APPS = (\r\n    'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'django.contrib.messages',\r\n    'django.contrib.staticfiles',\r\n\r\n    'chatterbot.ext.django_chatterbot',\r\n    'example_app',\r\n)\r\n\r\n# ChatterBot settings\r\n\r\nCHATTERBOT = {\r\n    'name': 'Django ChatterBot Example',\r\n    'trainer': 'chatterbot.trainers.ChatterBotCorpusTrainer',\r\n    'training_data': [\r\n        'chatterbot.corpus.english.greetings'\r\n    ],\r\n    'logic_adapters':[\r\n        {\r\n            'import_path': 'chatterbot.adapters.logic.ClosestMatchAdapter'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.adapters.logic.LowConfidenceAdapter',\r\n            'threshold': 0.65,\r\n            'default_response': 'I am sorry, but I do not understand.'\r\n        }\r\n    ]\r\n}\r\n\r\nMIDDLEWARE_CLASSES = (\r\n    'django.contrib.sessions.middleware.SessionMiddleware',\r\n    'django.middleware.common.CommonMiddleware',\r\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\r\n    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\r\n    'django.contrib.messages.middleware.MessageMiddleware',\r\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\r\n    'django.middleware.security.SecurityMiddleware',\r\n)\r\n\r\nROOT_URLCONF = 'example_app.urls'\r\n\r\nTEMPLATES = [\r\n    {\r\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\r\n        'DIRS': [],\r\n        'APP_DIRS': True,\r\n        'OPTIONS': {\r\n            'context_processors': [\r\n                'django.template.context_processors.debug',\r\n                'django.template.context_processors.request',\r\n                'django.contrib.auth.context_processors.auth',\r\n                'django.contrib.messages.context_processors.messages',\r\n            ],\r\n        },\r\n    },\r\n]\r\n\r\nWSGI_APPLICATION = 'example_app.wsgi.application'\r\n\r\n\r\n# Database\r\n# https://docs.djangoproject.com/en/1.8/ref/settings/#databases\r\n\r\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\r\n    }\r\n}\r\n\r\n\r\n# Internationalization\r\n# https://docs.djangoproject.com/en/1.8/topics/i18n/\r\n\r\nLANGUAGE_CODE = 'en-us'\r\n\r\nTIME_ZONE = 'UTC'\r\n\r\nUSE_I18N = True\r\n\r\nUSE_L10N = True\r\n\r\nUSE_TZ = True\r\n\r\n\r\n# Static files (CSS, JavaScript, Images)\r\n# https://docs.djangoproject.com/en/1.8/howto/static-files/\r\n\r\nSTATIC_URL = '/static/'\r\n\r\nSTATICFILES_DIRS = (\r\n    os.path.join(\r\n        os.path.dirname(__file__),\r\n        'static',\r\n    ),\r\n)\r\n```  To understand how ChatterBot works, I can go though the code..to understand more easily how it works can we have a high level architecture and a code flow diagram? I think you are looking something like this\nhttps://chatterbot.readthedocs.io/en/stable/about.html#process-flow-diagram\n  I was getting this error while using mongodb storage adapter. It was working fine in previous version.\r\n![error](https://cloud.githubusercontent.com/assets/18617708/20457801/270a3bb6-aeb9-11e6-824e-39fff762588d.png)\r\n\r\nThis was the code\r\n\r\n```python\r\nfrom chatterbot import ChatBot\r\nimport logging\r\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\r\n\r\n# Uncomment the following line to enable verbose logging\r\nlogging.basicConfig(level=logging.INFO)\r\n\r\n# Create a new instance of a ChatBot\r\nchatterbot = ChatBot(\"Terminal\",\r\n    storage_adapter='chatterbot.adapters.storage.MongoDatabaseAdapter',\r\n    #storage_adapter=\"chatterbot.adapters.storage.JsonFileStorageAdapter\",\r\n    logic_adapters=[\r\n\r\n        \"chatterbot.adapters.logic.LowConfidenceAdapter\",\r\n        #\"chatterbot.adapters.logic.TimeLogicAdapter\",\r\n        \"chatterbot.adapters.logic.ClosestMatchAdapter\"\r\n    ],\r\n    input_adapter=\"chatterbot.adapters.input.TerminalAdapter\",\r\n    output_adapter=\"chatterbot.adapters.output.TerminalAdapter\",\r\n    database=\"chtdatabase\"\r\n)\r\nchatterbot.set_trainer(ChatterBotCorpusTrainer)\r\nchatterbot.train(\r\n#    \"chatterbot.corpus.english\",\r\n    \"chatterbot.corpus.english.greetings\",\r\n    \"chatterbot.corpus.english.conversations\",\r\n    \"chatterbot.corpus.english.city\",\r\n)\r\nprint(\"Type something to begin...\")\r\n\r\n# The following loop will execute each time the user enters input\r\nwhile True:\r\n    try:\r\n        # We pass None to this method because the parameter\r\n        # is not used by the TerminalAdapter\r\n       bot_input = chatterbot.get_response(None)\r\n        # Press ctrl-c or ctrl-d on the keyboard to exit\r\n    except (KeyboardInterrupt, EOFError, SystemExit):\r\n        break\r\n```\r\n                                                                                                                                \r\n In chatterbot.adapters.storage.mongodb.MongoDatabaseAdapter#mongo_to_object\r\n```python\r\n    def mongo_to_object(self, statement_data):\r\n        \"\"\"\r\n        Return Statement object when given data\r\n        returned from Mongo DB.\r\n        \"\"\"\r\n        statement_text = statement_data['text']\r\n        del(statement_data['text'])\r\n\r\n        statement_data['in_response_to'] = self.deserialize_responses(\r\n            statement_data['in_response_to']\r\n        )\r\n\r\n        return Statement(statement_text, **statement_data)\r\n```\r\n\r\nstatement_data doesn't always have `in_response_to`, and the situation often happens in twitter. Okay.. I am on it.. :) :+1:  Thank you both!  When i try to train my bot with persian (unicode) data that already stored in corpus/data/persian folder and get responce from bot, this error occure:\r\nHere is my sample code,any help or suggestion please!\r\nand sorry for my bad english:\r\n\r\n```python\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\n\r\nchatbot = ChatBot(\r\n    'Ron Obvious',\r\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer'\r\n)\r\nchatbot.train(\"chatterbot.corpus.persian\")\r\nprint chatbot.get_response(u\"\u0633\u0644\u0627\u0645\")\r\n```\r\n\r\nand below is last lines of error\r\n\r\n```\r\n....\r\nFile \"D:\\Python27\\Lib\\site-packages\\jsondb\\file_writer.py\", line 26, in write_data\r\n    db.write(encode(obj))\r\n  File \"D:\\Python27\\lib\\encodings\\cp1256.py\", line 19, in encode\r\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\r\nUnicodeEncodeError: 'charmap' codec can't encode characters in position 2-7: character maps to <undefined>\r\n``` thank you for your reply.\nBut i'm working on a project (a telegram bot) and want use this package for chat section.Therefore i cant wait for next version.\nIs it possible for you to post changes or help me to correct this issue myself.\n Hello again and thanks for your reply\r\nI download latest version of package but still have same error,therefore i test same code with hindi corpus data but still same error occurred.below is new example code :\r\n```\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\n\r\nchatbot = ChatBot(\r\n'Ron Obvious',\r\ntrainer='chatterbot.trainers.ChatterBotCorpusTrainer'\r\n)\r\n# Train based on the hindi corpus\r\n# chatbot.train(\"chatterbot.corpus.english\")\r\nchatbot.train(\"chatterbot.corpus.hindi.greetings\")\r\nprint chatbot.get_response( u\"\u0928\u092e\u0938\u094d\u0924\u0947\")\r\n# Train based on the english corpus\r\n# chatbot.train(\"chatterbot.corpus.english\")\r\n\r\n```\r\nand error:\r\n\r\n ```\r\nFile \"D:\\Python27\\Lib\\site-packages\\chatterbot\\storage\\jsonfile.py\", line 145, in update\r\n    self.database.data(key=statement.text, value=data)\r\n  File \"D:\\Python27\\Lib\\site-packages\\jsondb\\db.py\", line 77, in data\r\n    self._set_content(key, value)\r\n  File \"D:\\Python27\\Lib\\site-packages\\jsondb\\db.py\", line 41, in _set_content\r\n    data = write_data(self.path, obj)\r\n  File \"D:\\Python27\\Lib\\site-packages\\jsondb\\file_writer.py\", line 26, in write_data\r\n    db.write(encode(obj))\r\n  File \"D:\\Python27\\lib\\encodings\\cp1256.py\", line 19, in encode\r\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\r\nUnicodeEncodeError: 'charmap' codec can't encode characters in position 2-7: character maps to <undefined>\r\n\r\n```\r\ni attached image of pip list command to see my package version.\r\n![capture](https://cloud.githubusercontent.com/assets/23508966/20861485/b11050f0-b9a6-11e6-80fe-3f89928eff8a.PNG)\r\n Thanks again\r\ni test my jsondatabase version and it is up to date already.also test your example code and still get same error as bellow:\r\n```\r\nTraceback (most recent call last):\r\n  File \"D:/Python27/telebot-master/chater.py\", line 8, in <module>\r\n    chatbot.train(\"chatterbot.corpus.hindi.greetings\")\r\n  File \"D:\\Python27\\Lib\\site-packages\\chatterbot\\trainers.py\", line 117, in train\r\n    trainer.train(pair)\r\n  File \"D:\\Python27\\Lib\\site-packages\\chatterbot\\trainers.py\", line 90, in train\r\n    self.storage.update(statement, force=True)\r\n  File \"D:\\Python27\\Lib\\site-packages\\chatterbot\\storage\\jsonfile.py\", line 145, in update\r\n    self.database.data(key=statement.text, value=data)\r\n  File \"D:\\Python27\\Lib\\site-packages\\jsondb\\db.py\", line 77, in data\r\n    self._set_content(key, value)\r\n  File \"D:\\Python27\\Lib\\site-packages\\jsondb\\db.py\", line 41, in _set_content\r\n    data = write_data(self.path, obj)\r\n  File \"D:\\Python27\\Lib\\site-packages\\jsondb\\file_writer.py\", line 26, in write_data\r\n    db.write(encode(obj))\r\n  File \"D:\\Python27\\lib\\encodings\\cp1256.py\", line 19, in encode\r\n    return codecs.charmap_encode(input,self.errors,encoding_table)[0]\r\nUnicodeEncodeError: 'charmap' codec can't encode characters in position 2-7: character maps to <undefined>\r\n```\r\ndid you test your example code and run with no error? i attached output of commands \r\n![ostest](https://cloud.githubusercontent.com/assets/23508966/20898404/7ce96348-bb3b-11e6-8ff0-f96056d7fe03.PNG)\r\n Also i test your example test code in python command line step by step(marked in yellow in attached image) and got same error again(surrounded with red color line), and it seems printing unicode to console doesn't cause error;while when i run command `chatbot.train(\"chatterbot.corpus.hindi.greetings\")` this error occurred\r\n![chater](https://cloud.githubusercontent.com/assets/23508966/20899449/b8990534-bb3f-11e6-9eaa-24c69cbf2ab9.PNG)\r\n. Dear @onlydarkknight ,\r\nDid you solve the problem?\r\n  [root@localhost django_app]# python manage.py train\r\nUnknown command: 'train'\r\nType 'manage.py help' for usage.\r\n[root@localhost django_app]# python3 manage.py train\r\nUnknown command: 'train'\r\nType 'manage.py help' for usage.\r\n\r\ncannot use this command 0.4.12 ,i will get the current version and try it , thx a lot.\n  Hey, im sure this is a noob issue but your example in the docs ends with:\r\n\r\n     # The following loop will execute each time the user enters input\r\n     while True:\r\n         try:\r\n             # We pass None to this method because the parameter\r\n             # is not used by the TerminalAdapter\r\n             bot_input = bot.get_response(None)\r\n\r\n         # Press ctrl-c or ctrl-d on the keyboard to exit\r\n         except (KeyboardInterrupt, EOFError, SystemExit):\r\n             break\r\n\r\nBut when i am running my bot in Spyder, i cant break the loop with the keyboard, and i am not familiar with the other functions.\r\n\r\nHow can i get the loop to break if i input a specific string or input? Like Exit Conversation. Yes, but im not sure how set a condition based on something i type to the bot.\n I am running Python 3.5 with Anaconda which comes with a bunch of packages, and Spyder. And i just copy and pasted the Example in your docs. The conversation runs in an IPython console inside the Spyder window, i type and press Enter and the response pops up underneath. I just cant get the loop to stop without closing the console.\n And while i have your attention, im am wanting to program a GUI to run my bot it. Like, run the .py file, it pops up a chat window, and i chat with my bot through that window. Do you have any suggestions on the GUI package to use? Like Tkinter or PyQt, or others? Know of any code for a chat window already developed?\n They did not. On the leftside of my Spyder window is the notebook housing my code. On the right i have an 'object inspector' at the top and the IPython console at the bottom. \n\nWhen i run your example, the console tells me to download levenshein and stuff, then prints Type something to begin... and my dialouge with the bot starts. But no matter if my crusor is in the console, notebook, or inspector, preasing I, shift I, ctrl c, ctrl c twice, or ctrl d, i can't get the conversation to quit and the console to listen for the next command, without closing the console window.\n\nSo i would like to break the loop in the conversation, by a word or phrase. But I'm not sure what the user input is called in your package.\n But the GUI link you sent me was perfect! That is exactly what I was looking for! Thank you so much!\n  As per my email:\r\n\r\n- Added the pep8 engine to check for PEP-8 style as indicated in the contributor section of your README.\r\n- Added a ratings path to grade all .py files.\r\n\r\nIf you're interested, you can also add the Radon engine to check for complexity. Feel free to reach out if you have any questions.  I noticed the update allowing for training from external corpora, updated my chatterbot install and pulled the newest version of chatterbot, but when I try to train the chatbot by running the command `python manage.py train` as instructed in docs/django/training.rst, I just get the error `Unknown command: 'train'`.  Is there any additional step I am missing? Sorry, when reinstalling the new Chatterbot, I forgot to run setup.py.  Issue is resolved now.\n  So. I have a problem.\r\n\r\nI'll begin from the start.\r\n\r\nI started with installing chatterbot using.\r\n`pip3 install chatterbot`\r\nWhich worked well and installed this.\r\n`chatterbot in /usr/local/lib/python3.5/dist-packages\r\nfuzzywuzzy<0.13,>=0.12 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\r\nnltk<4.0.0 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\r\npymongo<4.0.0,>=3.3.0 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\r\ntextblob<0.12.0,>=0.11.0 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\r\npython-twitter>=3.0 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\r\njsondatabase>=0.1.1 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\r\nrequests in /usr/lib/python3/dist-packages (from python-twitter>=3.0->chatterbot)\r\nfuture in /usr/local/lib/python3.5/dist-packages (from python-twitter>=3.0->chatterbot)\r\nrequests-oauthlib in /usr/local/lib/python3.5/dist-packages (from python-twitter>=3.0->chatterbot)\r\noauthlib>=0.6.2 in /usr/lib/python3/dist-packages (from requests-oauthlib->python-twitter>=3.0->chatterbot)`\r\nBut if i check the installed version with\r\n`python -m chatterbot --version`\r\nit tells me this.\r\n`/usr/bin/python: No module named chatterbot`\r\nSo i decided to check the path.\r\n`cd /usr/bin/python`\r\nBut then...\r\n`bash: cd: /usr/bin/python: Isn't a directory`\r\nJust to make sure that chatterbot isn't installed i copyed the example from the [documentation](http://chatterbot.readthedocs.io/en/stable/examples.html#terminal-example), made it executable with\r\n`chmod +x chatbot.py`\r\nand started it with.\r\n`./chatbot.py`\r\nBut then i got this.\r\n`from: can't read /var/mail/chatterbot\r\nimport: unable to open X server ' @ error/import.c/ImportImageCommand/364.\r\n./chatbot.py: Zeile 9: Syntaxerror unexpected word \u00bb(\u00ab\r\n./chatbot.py: Zeile 9: bot = ChatBot(\"Terminal\",'`\r\n\r\nFirst line;\r\nI checked\r\n`cd /var/mail/chatterbot`\r\nbut\r\n`bash: cd: root: Isn't a directory`\r\nWhy should it make a folder there?\r\nSecond line + third line:\r\nI don't understand. Why does it have a problem with that?\r\n\r\nBut i don't give up yet!\r\n\r\nI did\r\n`python3 chatbot.py`\r\nwhich gave this response.\r\n\r\n> /usr/local/lib/python3.5/dist-packages/fuzzywuzzy/fuzz.py:35: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\r\n>   warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\r\n> /usr/local/lib/python3.5/dist-packages/nltk/decorators.py:59: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\r\n>   regargs, varargs, varkwargs, defaults = inspect.getargspec(func)\r\n> /usr/local/lib/python3.5/dist-packages/chatterbot/adapters/storage/jsonfile.py:19: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production application environments.\r\n>   self.UnsuitableForProductionWarning\r\n> \r\n> **********************************************************************\r\n>   Resource 'tokenizers/punkt/PY3/english.pickle' not found.\r\n>   Please use the NLTK Downloader to obtain the resource:  >>>\r\n>   nltk.download()\r\n>   Searched in:\r\n>     - '/home/[don't want to tell my username]/nltk_data'\r\n>     - '/usr/share/nltk_data'\r\n>     - '/usr/local/share/nltk_data'\r\n>     - '/usr/lib/nltk_data'\r\n>     - '/usr/local/lib/nltk_data'\r\n>     - ''\r\n> **********************************************************************\r\n> Traceback (most recent call last):\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/decorators.py\", line 35, in decorated\r\n>     return func(*args, **kwargs)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/tokenizers.py\", line 57, in tokenize\r\n>     return nltk.tokenize.sent_tokenize(text)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/nltk/tokenize/__init__.py\", line 90, in sent_tokenize\r\n>     tokenizer = load('tokenizers/punkt/{0}.pickle'.format(language))\r\n>   File \"/usr/local/lib/python3.5/dist-packages/nltk/data.py\", line 801, in load\r\n>     opened_resource = _open(resource_url)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/nltk/data.py\", line 919, in _open\r\n>     return find(path_, path + ['']).open()\r\n>   File \"/usr/local/lib/python3.5/dist-packages/nltk/data.py\", line 641, in find\r\n>     raise LookupError(resource_not_found)\r\n> LookupError:\r\n> **********************************************************************\r\n>   Resource 'tokenizers/punkt/PY3/english.pickle' not found.\r\n>   Please use the NLTK Downloader to obtain the resource:  >>>\r\n>   nltk.download()\r\n>   Searched in:\r\n>     - '/home/[don't want to tell my username]/nltk_data'\r\n>     - '/usr/share/nltk_data'\r\n>     - '/usr/local/share/nltk_data'\r\n>     - '/usr/lib/nltk_data'\r\n>     - '/usr/local/lib/nltk_data'\r\n>     - ''\r\n> **********************************************************************\r\n> \r\n> During handling of the above exception, another exception occurred:\r\n> \r\n> Traceback (most recent call last):\r\n>   File \"chatbot.py\", line 18, in <module>\r\n>     database=\"../database.db\"\r\n>   File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 61, in __init__\r\n>     self.add_adapter(adapter, **kwargs)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 81, in add_adapter\r\n>     adapter = NewAdapter(**kwargs)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/chatterbot/adapters/logic/time_adapter.py\", line 26, in __init__\r\n>     self.classifier = NaiveBayesClassifier(training_data)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 192, in __init__\r\n>     self.train_features = [(self.extract_features(d), c) for d, c in self.train_set]\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 192, in <listcomp>\r\n>     self.train_features = [(self.extract_features(d), c) for d, c in self.train_set]\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 169, in extract_features\r\n>     return self.feature_extractor(text, self.train_set)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 81, in basic_extractor\r\n>     word_features = _get_words_from_dataset(train_set)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 63, in _get_words_from_dataset\r\n>     return set(all_words)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 62, in <genexpr>\r\n>     all_words = chain.from_iterable(tokenize(words) for words, _ in dataset)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 59, in tokenize\r\n>     return word_tokenize(words, include_punc=False)\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/tokenizers.py\", line 72, in word_tokenize\r\n>     for sentence in sent_tokenize(text))\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/base.py\", line 64, in itokenize\r\n>     return (t for t in self.tokenize(text, *args, **kwargs))\r\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/decorators.py\", line 38, in decorated\r\n>     raise MissingCorpusError()\r\n> textblob.exceptions.MissingCorpusError:\r\n> Looks like you are missing some required data for this feature.\r\n> \r\n> To download the necessary data, simply run\r\n> \r\n>     python -m textblob.download_corpora\r\n> \r\n> or use the NLTK downloader to download the missing data: http://nltk.org/data.html\r\n> If this doesn't fix the problem, file an issue at https://github.com/sloria/TextBlob/issues.\r\n\r\n(Marking it as code didn't worked. I don't know why.)\r\n\r\nAnd for Python 2.\r\n`python chatbot.py`\r\nTold me this.\r\n`Traceback (most recent call last):\r\n  File \"chatbot.py\", line 1, in <module>\r\n    from chatterbot import ChatBot\r\nImportError: No module named chatterbot`\r\n\r\n**Aha!**\r\n\r\nOkay. The first time i was told that the module chatterbot isn't there.\r\n\r\nLet's try to install it with git.\r\n`git clone https://github.com/gunthercox/ChatterBot.git`\r\nOutput.\r\n`Klone nach 'ChatterBot' ...\r\nremote: Counting objects: 5401, done.\r\nremote: Total 5401 (delta 0), reused 0 (delta 0), pack-reused 5400\r\nEmpfange Objekte: 100% (5401/5401), 2.73 MiB | 47.00 KiB/s, Fertig.\r\nL\u00f6se Unterschiede auf: 100% (3433/3433), Fertig.\r\nPr\u00fcfe Konnektivit\u00e4t ... Fertig.`\r\n\r\n(I'm too lazy to translate it. It's german if you want to know.)\r\n\r\nInstalling.\r\n`pip install ./ChatterBot`\r\nOkay. Installed.\r\n\r\nLet's try again.\r\n\r\n`python3 chatbot.py`\r\nSame respone.\r\n`python chatbot.py`\r\nSame response.\r\n`./chatbot.py`\r\nSame response.\r\n\r\nI don't know what i should do now. Please, help me.\r\n\r\nThank you.\r\n I would prefer python 3.\n Of course i can.\n\n`pip3 install chatterbot --upgrade`\nOutput.\n`The directory '/home/[don't want to tell my username]/.cache/pip/http' or its parent directory is not owned by the current user and the cache has been disabled. Please check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.\nThe directory '/home/[don't want to tell my username]/.cache/pip' or its parent directory is not owned by the current user and caching wheels has been disabled. check the permissions and owner of that directory. If executing pip with sudo, you may want sudo's -H flag.\nCollecting chatterbot\n  Downloading ChatterBot-0.4.12-py2.py3-none-any.whl (100kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 102kB 1.3MB/s\nRequirement already up-to-date: textblob<0.12.0,>=0.11.0 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\nRequirement already up-to-date: nltk<4.0.0 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\nRequirement already up-to-date: pymongo<4.0.0,>=3.3.0 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\nRequirement already up-to-date: fuzzywuzzy<0.13,>=0.12 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\nRequirement already up-to-date: jsondatabase>=0.1.1 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\nRequirement already up-to-date: python-twitter>=3.0 in /usr/local/lib/python3.5/dist-packages (from chatterbot)\nCollecting requests (from python-twitter>=3.0->chatterbot)\n  Downloading requests-2.11.1-py2.py3-none-any.whl (514kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 522kB 1.4MB/s\nRequirement already up-to-date: future in /usr/local/lib/python3.5/dist-packages (from python-twitter>=3.0->chatterbot)\nRequirement already up-to-date: requests-oauthlib in /usr/local/lib/python3.5/dist-packages (from python-twitter>=3.0->chatterbot)\nCollecting oauthlib>=0.6.2 (from requests-oauthlib->python-twitter>=3.0->chatterbot)\n  Downloading oauthlib-2.0.0.tar.gz (122kB)\n    100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 122kB 2.6MB/s\nInstalling collected packages: chatterbot, requests, oauthlib\n  Found existing installation: ChatterBot 0.4.11\n    Uninstalling ChatterBot-0.4.11:\n      Successfully uninstalled ChatterBot-0.4.11\n  Found existing installation: requests 2.10.0\n    Uninstalling requests-2.10.0:\n      Successfully uninstalled requests-2.10.0\n  Found existing installation: oauthlib 1.1.2\n    Uninstalling oauthlib-1.1.2:\n      Successfully uninstalled oauthlib-1.1.2\n  Running setup.py install for oauthlib ... done\nSuccessfully installed chatterbot-0.4.12 oauthlib-2.0.0 requests-2.11.1`\n\nAnd now.\n`python3 -m chatterbot --version`\nOutput.\n`0.4.12`\n\n_Huh._\n\nWell. Let's test if it works.\n\n`python3 chatbot.py`\nOutput.\n\n> /usr/local/lib/python3.5/dist-packages/chatterbot/adapters/storage/jsonfile.py:19: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production application environments.\n>   self.UnsuitableForProductionWarning\n> \n> ---\n> \n>   Resource 'tokenizers/punkt/PY3/english.pickle' not found.\n>   Please use the NLTK Downloader to obtain the resource:  >>>\n>   nltk.download()\n>   Searched in:\n>     - '/home/[don't want to tell my username]/nltk_data'\n>     - '/usr/share/nltk_data'\n>     - '/usr/local/share/nltk_data'\n>     - '/usr/lib/nltk_data'\n>     - '/usr/local/lib/nltk_data'\n>     - ''\n> \n> ---\n> \n> Traceback (most recent call last):\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/decorators.py\", line 35, in decorated\n>     return func(_args, *_kwargs)\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/tokenizers.py\", line 57, in tokenize\n>     return nltk.tokenize.sent_tokenize(text)\n>   File \"/usr/local/lib/python3.5/dist-packages/nltk/tokenize/**init**.py\", line 90, in sent_tokenize\n>     tokenizer = load('tokenizers/punkt/{0}.pickle'.format(language))\n>   File \"/usr/local/lib/python3.5/dist-packages/nltk/data.py\", line 801, in load\n>     opened_resource = _open(resource_url)\n>   File \"/usr/local/lib/python3.5/dist-packages/nltk/data.py\", line 919, in _open\n>     return find(path_, path + ['']).open()\n>   File \"/usr/local/lib/python3.5/dist-packages/nltk/data.py\", line 641, in find\n>     raise LookupError(resource_not_found)\n> LookupError:\n> \n> ---\n> \n>   Resource 'tokenizers/punkt/PY3/english.pickle' not found.\n>   Please use the NLTK Downloader to obtain the resource:  >>>\n>   nltk.download()\n>   Searched in:\n>     - '/home/[don't want to tell my username]/nltk_data'\n>     - '/usr/share/nltk_data'\n>     - '/usr/local/share/nltk_data'\n>     - '/usr/lib/nltk_data'\n>     - '/usr/local/lib/nltk_data'\n>     - ''\n> \n> ---\n> \n> During handling of the above exception, another exception occurred:\n> \n> Traceback (most recent call last):\n>   File \"chatbot.py\", line 18, in <module>\n>     database=\"../database.db\"\n>   File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 57, in **init**\n>     self.add_logic_adapter(adapter, **kwargs)\n>   File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 88, in add_logic_adapter\n>     adapter = self.initialize_class(adapter, **kwargs)\n>   File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 84, in initialize_class\n>     return Class(**kwargs)\n>   File \"/usr/local/lib/python3.5/dist-packages/chatterbot/adapters/logic/time_adapter.py\", line 26, in **init**\n>     self.classifier = NaiveBayesClassifier(training_data)\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 192, in **init**\n>     self.train_features = [(self.extract_features(d), c) for d, c in self.train_set]\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 192, in <listcomp>\n>     self.train_features = [(self.extract_features(d), c) for d, c in self.train_set]\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 169, in extract_features\n>     return self.feature_extractor(text, self.train_set)\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 81, in basic_extractor\n>     word_features = _get_words_from_dataset(train_set)\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 63, in _get_words_from_dataset\n>     return set(all_words)\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 62, in <genexpr>\n>     all_words = chain.from_iterable(tokenize(words) for words, _ in dataset)\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/classifiers.py\", line 59, in tokenize\n>     return word_tokenize(words, include_punc=False)\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/tokenizers.py\", line 72, in word_tokenize\n>     for sentence in sent_tokenize(text))\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/base.py\", line 64, in itokenize\n>     return (t for t in self.tokenize(text, _args, *_kwargs))\n>   File \"/usr/local/lib/python3.5/dist-packages/textblob/decorators.py\", line 38, in decorated\n>     raise MissingCorpusError()\n> textblob.exceptions.MissingCorpusError:\n> Looks like you are missing some required data for this feature.\n> \n> To download the necessary data, simply run\n> \n> ```\n> python -m textblob.download_corpora\n> ```\n> \n> or use the NLTK downloader to download the missing data: http://nltk.org/data.html\n> If this doesn't fix the problem, file an issue at https://github.com/sloria/TextBlob/issues.\n\n(Had to use quote instead of code again.)\n\nIt dosen't. ):\n Okay.\n\n`python3 -m textblob.download_corpora`\nOutput.\n`[nltk_data] Downloading package brown to /home/[don't want to tell my username]/nltk_data...\n[nltk_data]   Unzipping corpora/brown.zip.\n[nltk_data] Downloading package punkt to /home/[don't want to tell my username]/nltk_data...\n[nltk_data]   Unzipping tokenizers/punkt.zip.\n[nltk_data] Downloading package wordnet to /home/[don't want to tell my username]/nltk_data...\n[nltk_data]   Unzipping corpora/wordnet.zip.\n[nltk_data] Downloading package averaged_perceptron_tagger to\n[nltk_data]     /home/[don't want to tell my username]/nltk_data...\n[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n[nltk_data] Downloading package conll2000 to\n[nltk_data]     /home/[don't want to tell my username]/nltk_data...\n[nltk_data]   Unzipping corpora/conll2000.zip.\n[nltk_data] Downloading package movie_reviews to\n[nltk_data]     /home/[don't want to tell my username]/nltk_data...\n[nltk_data]   Unzipping corpora/movie_reviews.zip.\nFinished.`\n\n`python3 chatbot.py`\nOutput.\n`/usr/local/lib/python3.5/dist-packages/chatterbot/adapters/storage/jsonfile.py:19: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production application environments.\n  self.UnsuitableForProductionWarning\nType something to begin...`\n\nYay. It works. Apperently textblob.download_orpora is needed for it to work.\n Why don't you make a .sh which automates the install and checks if everything what is needed is installed?\n  ```python\r\nsudo ./manage.py runserver 127.0.0.1:8000\r\nPerforming system checks...\r\n\r\nSystem check identified no issues (0 silenced).\r\nNovember 08, 2016 - 16:23:10\r\nDjango version 1.10.3, using settings 'example_app.settings'\r\nStarting development server at http://127.0.0.1:8000/\r\nQuit the server with CONTROL-C.\r\n[08/Nov/2016 16:23:17] \"GET / HTTP/1.1\" 200 2577\r\n[08/Nov/2016 16:23:17] \"GET /static/js/js.cookie.js HTTP/1.1\" 200 1615\r\n[08/Nov/2016 16:23:17] \"GET /static/js/bootstrap.js HTTP/1.1\" 200 36816\r\n[08/Nov/2016 16:23:17] \"GET /static/js/jquery.js HTTP/1.1\" 200 261746\r\n[08/Nov/2016 16:23:17] \"GET /static/css/bootstrap.css HTTP/1.1\" 200 141622\r\nInternal Server Error: /api/chatterbot/\r\nTraceback (most recent call last):\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/core/handlers/exception.py\", line 39, in inner\r\n    response = get_response(request)\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py\", line 249, in _legacy_get_response\r\n    response = self._get_response(request)\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py\", line 187, in _get_response\r\n    response = self.process_exception_by_middleware(e, request)\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py\", line 185, in _get_response\r\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/views/generic/base.py\", line 68, in view\r\n    return self.dispatch(request, *args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/django/views/generic/base.py\", line 88, in dispatch\r\n    return handler(request, *args, **kwargs)\r\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/ext/django_chatterbot/views.py\", line 28, in post\r\n    data = json.loads(request.read().decode('utf-8'))\r\n  File \"/usr/lib/python2.7/json/__init__.py\", line 338, in loads\r\n    return _default_decoder.decode(s)\r\n  File \"/usr/lib/python2.7/json/decoder.py\", line 366, in decode\r\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\r\n  File \"/usr/lib/python2.7/json/decoder.py\", line 384, in raw_decode\r\n    raise ValueError(\"No JSON object could be decoded\")\r\nValueError: No JSON object could be decoded\r\n[08/Nov/2016 16:23:20] \"POST /api/chatterbot/ HTTP/1.1\" 500 15080\r\n``` I am having a similar issue where the example will work fine until you refresh the page or let it idle long enough, then it will throw this error. \n\n``` python\nInternal Server Error: /api/chatterbot/\nTraceback (most recent call last):\n  File \"/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py\", line 149, in get_response\n    response = self.process_exception_by_middleware(e, request)\n  File \"/usr/local/lib/python2.7/dist-packages/django/core/handlers/base.py\", line 147, in get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/django/views/generic/base.py\", line 68, in view\n    return self.dispatch(request, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/django/views/generic/base.py\", line 88, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.4.12-py2.7.egg/chatterbot/ext/django_chatterbot/views.py\", line 41, in post\n    response_data = self.chatterbot.get_response(input_data)\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.4.12-py2.7.egg/chatterbot/chatterbot.py\", line 204, in get_response\n    statement, response, confidence = self.generate_response(input_statement)\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.4.12-py2.7.egg/chatterbot/chatterbot.py\", line 223, in generate_response\n    confidence, response = self.logic.process(input_statement)\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.4.12-py2.7.egg/chatterbot/adapters/logic/multi_adapter.py\", line 31, in process\n    confidence, output = adapter.process(statement)\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.4.12-py2.7.egg/chatterbot/adapters/logic/base_match.py\", line 59, in process\n    confidence, closest_match = self.get(input_statement)\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.4.12-py2.7.egg/chatterbot/adapters/logic/base_match.py\", line 23, in get\n    statement_list = self.context.storage.get_response_statements()\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.4.12-py2.7.egg/chatterbot/adapters/storage/storage_adapter.py\", line 84, in get_response_statements\n    statement_list = self.filter()\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.4.12-py2.7.egg/chatterbot/adapters/storage/django_storage.py\", line 75, in filter\n    results.append(self.model_to_object(statement_object))\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.4.12-py2.7.egg/chatterbot/adapters/storage/django_storage.py\", line 23, in model_to_object\n    extra_data=json.loads(statement_model.extra_data, encoding='utf8')\n  File \"/usr/lib/python2.7/json/__init__.py\", line 351, in loads\n    return cls(encoding=encoding, **kw).decode(s)\n  File \"/usr/lib/python2.7/json/decoder.py\", line 366, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/lib/python2.7/json/decoder.py\", line 384, in raw_decode\n    raise ValueError(\"No JSON object could be decoded\")\nValueError: No JSON object could be decoded\n```\n\nIf I flush the database and retrain it, it works again.  However, it will then just break again if idle or refreshed.\n\nI have ChatterBot-0.4.12 installed running the newest example and Django 1.10.3.  Hopefully this helps you.\n Is there news on a potential solution to this?\n  How to convert this kind of ChatterBot in technical chat bot which can query based on patterns and questions. Like if i ask how is this flight( id 4567890 doing). It should bring me all info which i have defined already.\r\n\r\nAnd many more questions like generating charts in real time and do a lot more in terms of the real-time elastic search /MySQL query. \r\n\r\nAlso how to integrate pre-built models  in tensorflow  https://github.com/tensorflow/models \r\n\r\nThis can improve the power of this chat bot multifold. \r\n \r\nThanks \r\n Thank gunthercox. \nI asked the  chart question because i would like to integrate with some short of kibana interface where data is coming from different channels. But i got it now 100%. \n\nOne more question i have what kind of data and ML algorithm (LSTM ,seq2seq) you have used to trained this bot initially.  (LSTM  is considered most accurate in ubuntu corpus data set)\n\nMy last question was on ubuntu corpus which is basically IT helpdesk data, and somehow i want to train for my bot with that data set and some other email data too wich have been send to customers in last 5 years. \n\nProblem is that data is too much and it is going to be several weeks  before i see any result. \nNot sure with chatterbot code how can i utilize GPU power.\n\n I  have used tensorflow and it works good quick with my Nvidia Titan X for same IT data set. \n\nThanks for all your help and time. \n  Created the italian readme and  first drafts of the italian math and swear words dictionaries. I opened and closed this pull request by mistake thinking I could merge it by myself.\n  Hi guys, \r\nI was wondering if anyone runs into the need to serialize a Chatbot instance, like \r\n\r\nTraining the bot in background with Celery or Python-rq, then : \r\n\r\n1. store the dump in Redis so the main app can consume it when ready\r\n2. store the dump in Redis so on restart the bot won't need to re-train again\r\n\r\n@gunthercox , @vkosuri any idea on that kind of stuffs ? Pickling and storing is my only idea for now, if you guys have another idea it'll be very welcomed @alekaizer I'll prefer celery and Redis option. By curiosity, could you please explain your usecase of this feature?\n @vkosuri  I just moved from Celery to Django-rq(plus Redis) as the processes are not that heavy I just need the async execution\n\nFor the use case, here it's:\n1. When an user create a bot, and want to test it, the first interaction trigger the bot's training, which can take some times, so the user is left on wait\n2. Now let's say the app crash or I reboot the app, and some bots are already running, so next time an user make interaction, the bot will need to retrain again leaving user on wait because during the reboot the queue have been cleared\n\nSolutions:\n1. For the first use case, I can train the bot during the creation process, that's what I am actually writing :)\n2. For this one, that's where I need to store the bot actual training so on reboot, I can just loads the dumps and put them back to the bots queue like nothing happened\n\nHope this time I was clear :)\n hi @gunthercox, I'm using MongoDb, and I've made a custom storage adapter to add bot_id in statements so each statements knows which bot it belongs to.\n\nand I think my problem may come from the fact that every time I launch the bot training.\nAnd if I understand what you just said, I only need to train the bot, once, as long as the DB is populated I don't need to retrain the same data, I should train only new entries, right ?\n Great, I'll add a **trained** field on the model then to the object to avoid re-training !\n\nThank you @gunthercox \n  hi gunther,\r\n\r\nI wanted to know if there is a way to set a default response like (i don't understand what you mean)\r\nif no matching input is found\r\n\r\n-Dattatreya i am trying to set a threshold value in the closest match adapter for levenshtein distance \nis this correct ?\n hi @datta90 You use the **process** method of your logic adapter to get the confidence of the response then set the threshold on the confidence.\n\n```\ninput = 'does linux rock'\nbot = ChatBot('tux')\nstatement = bot.input.process_input(input)\nconfidence, response = bot.logic.process(statement)\nif confidence > THRESHOLD:\n   response = bot.output.process_response(response)\nelse\n   response = 'I don't understand what you mean'\n```\n\nMaybe @gunthercox has a better way of doing it :)\n i am getting this error when i type the above code in python terminal\n\n```\nIn [9]:  statement = bot.logic.input.process_input(input1)\n----------------------------------------------------------------------\nAttributeError                            Traceback (most recent call\n<ipython-input-9-794f22aa52a2> in <module>()\n----> 1 statement = bot.logic.input.process_input(input1)\n\nAttributeError: 'MultiLogicAdapter' object has no attribute 'input'\n```\n thank you gunther\nI am getting error UnicodeDecodeError: 'utf8' codec can't decode byte 0x93 in position 83: invalid start byte when i am adding my own training data in the English folder,\nmy file name is ending with .corpus.json and i have written this file properly \neven when i am remove this file i am still getting this error \n is it because of json adapter storage my strings are bit long in the file \n No problem gunther actually mistake was from my side I used regex to remove the ASCII characters present in my JSON file\n  Very impressive project. \r\nHow can i use  ubuntu Dialogue Corpus v1.0.  and v2.0.\r\n\r\nhttp://cs.mcgill.ca/~jpineau/datasets/ubuntu-corpus-1.0/    (Dual Encoder LSTM network will be best for this data)   http://www.wildml.com/2016/04/deep-learning-for-chatbots-part-1-introduction/\r\n\r\nThen I have to use node red (https://nodered.org ) to extend and make this  for technical  answer machine. \r\n\r\nThanks for great project.   Closes https://github.com/gunthercox/ChatterBot/issues/290 Thanks , I am working on documentation part also, i will push some more\ncomits. by today.\n\nOn 05-Nov-2016 6:40 PM, \"Gunther Cox\" notifications@github.com wrote:\n\n> @vkosuri https://github.com/vkosuri Looks good, is this ready to be\n> merged?\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/gunthercox/ChatterBot/pull/381#issuecomment-258610490,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ANCAAV2HF-k74IE5x4xmWKfjLYZ59ESaks5q7IA5gaJpZM4KpznB\n> .\n @gunthercox i haven't added tests for this PR, i will add soon, do you have any comments/suggestions on this PR?\n Yes, https://docs.botframework.com/en-us/restapi/directline/\n @gunthercox any comments/suggestions? \n - [x]  Input adapter\n- [x]  Output adapter\n- [x]  Tests\n- [x]  Documentation\n- [x]  Example Program\n- [x]  Logging\n @gunthercox any comments/suggestions?\n You eill get it from here\n\n```\nRequest URL\nhttps://directline.botframework.com/api/conversations\nResponse Body\n{\n  \"conversationId\": \"ENwpIpwOny6\",\n  \"token\": \"xtFDtPemROU.dAA.RQBOAHcAcABJAHAAdwBPAG4AeQA2AA.IEz11QI90gE.XXui3MZv4-8.kg2KPXCgTU8mcEE_DB07mUQHKG_C-t6c-ISlI0UDM0Q\",\n  \"expires_in\": 0\n}\n```\n  Added uft-8 coding for using german umlauts  Is it possible to train using the corpus data for a django project running Chatterbot?  I can't seem to find a way to alter the chatbot's settings to accept the language corpus. \r\n\r\nAlso, it looks like the database of request/responses created by the example django app is just the response/request phrases rather than storing occurrences.  Is there a way to make that happen as well?  @gunthercox I am sorry if this question has already been asked before, I didn't know how to express the my search query\r\n\r\nSo the question is about the storages, I can see that we have two entries per Statement:\r\n\r\n1. with empty **in_response_to** field\r\n2. with filled **in_response_to** field\r\n\r\nExample:\r\n`{\r\n    \"_id\": {\r\n        \"$oid\": \"58189c46620c9c7d49db1c59\"\r\n    },\r\n    \"text\": \"Welcome to Tuxville\",\r\n    \"in_response_to\": []\r\n}\r\n`\r\n`{\r\n    \"_id\": {\r\n        \"$oid\": \"58189c46620c9c7d49db1c59\"\r\n    },\r\n    \"text\": \"Welcome to Tuxville\",\r\n    \"in_response_to\": [\r\n        {\r\n            \"text\": \"hey\",\r\n            \"occurrence\": 1\r\n        }\r\n    ]\r\n}`\r\n    \r\nand when I check the storage adapters I saw this in the **train** method:\r\n`self.storage.update(statement, force=True)`\r\n\r\nso I expected the first object to be updated, but it's creating a new object\r\n\r\nMaybe I'm missing something in the flow ! oh sorry @gunthercox,  the $oid  it's just a copy/paste of the same object with diff value, of course they don't have the same $oid in the DB\n\nhere is a real state of the DB\n\n`{\n    \"_id\": {\n        \"$oid\": \"5819fbc9620c9c7d49f7f0af\"\n    },\n    \"in_response_to\": [\n        {\n            \"occurrence\": 1,\n            \"text\": \"Can I ask you a question?\"\n        }\n    ],\n    \"bot_id\": \"af2ecfc7-79ab-45a2-9200-a172c719d4f5\",\n    \"text\": \"Go ahead and ask.\"\n}`\n`{\n    \"_id\": {\n        \"$oid\": \"5819fbc9620c9c7d49f7f0ae\"\n    },\n    \"in_response_to\": [],\n    \"bot_id\": \"af2ecfc7-79ab-45a2-9200-a172c719d4f5\",\n    \"text\": \"Can I ask you a question?\"\n}`\n\nthe question is created as response and have its **in_response_to** array empty\nthen when it's updated it's not deleted, causing to have multiple entries with **in_response_to** being empty arrays\n\nHope this time I was clear :)\n Yes that's the functionality, and my problem is : \n`\"Can I ask you a question?\"` is in response to nothing.\nIn that case is it relevant to store it, as there's no trigger for that statement?\n\nI think that comes from the conversation way of training, as they have backward reference.\n yes \ud83d\udc4d perfectly clear :)\n  @gunthercox Just wanted to know more about this? Could you give an example when this will occur?\n  I just upgrade the module to have the fix on **nltk_loop** and there's a missing corpus after the upgrade\n Yes I've seen that, but I thought the __pt-BR_ was made to make diff between pt-PT and pt-BR\n\nAnd any idea on #367 ? haven't heard from you on that \n BR is Brazilian Portuguese while PT is the \"original\" one from Portugal, but I'm not an expert of PT so I don't know the differences, but there are some surely.\n\n---\n\nok about #367 \n  @gunthercox any plans adding sessions management to ChatterBot?\n @gunthercox Thanks, any guidance to implement this feature?\n Why not add `session_id` property to the `Statement` object?\n\nhttps://github.com/gunthercox/ChatterBot/blob/master/chatterbot/conversation/statement.py#L12\n\nLet the developer manage the `session` and `session_ids`. But internally, chatterbot should filter all conversations by session_id if its provided. What do you think?\n @gunthercox Something might useful https://github.com/robotframework/robotframework/blob/e544484dc80f04a5e3d391673176c355dbe86faf/src/robot/utils/connectioncache.py\n\nAny comments/suggestions\n `Robotframework` is test framework, It caches different test objects for example `telnet, ssh, requests,etc.`\n @gunthercox any comments?\n Hey Everyone \r\n\r\nI been working on 0.6.0 version and have added previous context check variable to the response selector\r\nI was under the impression it would not be shared across the sessions But now when we try from multiple systems, the variable is being overwritten by the last user, anyway to avoid this scenario ?  Chatterbot gives me a pythonerror when using german umlauts like \u00e4,\u00fc,\u00f6,\u00df because of wrong encoding\n  Added german translating of corpus.math_word and corpus.greetings\n  https://github.com/gunthercox/ChatterBot/issues/350\n  Hi @gunthercox, using ClosestMeaning and ClosestMatch adapters output some weird-ish sometimes:\nLet's take this dataset:\n\n```\n  pair = ['what is your address','R2D2 AI Street, TUXVILLE, PC-Land']\n```\n\nand chatterbot init this way:\n\n```\n  bot = ChatBot('LC',\n          logic_adapters=[\n                \"chatterbot.adapters.logic.ClosestMatchAdapter\",\n                \"chatterbot.adapters.logic.ClosestMeaningAdapter\"\n          ])\n```\n\nBot is trained with **pair**\n\n```\n  bot.train(pair)\n```\n\nand let's input these:\n\n```\nINPUT\nprint(bot.logic.process(bot.input.process_input('what is your name')))\nprint(bot.logic.process(bot.input.process_input('what is your address')))\nprint(bot.logic.process(bot.input.process_input('where are you located')))\n\nOUTPUT\n(0.74, <Statement text:R2D2 AI Street, Motherboard, PC-Land.>) <-- (1)\n(0.93, <Statement text:R2D2 AI Street, Motherboard, PC-Land.>)\n(0.62, <Statement text:R2D2 AI Street, Motherboard, PC-Land>) <--- (2)\n```\n\n**1** Is obviously wrong but the confidence(**0.74**) is even higher than **2**'s(**0.62**)\n\nSo my question is how can I have the bot knows that **1** is wrong but **2** is right ?\n Oh okay, I'll try that out ! thanks @gunthercox \n  From what I understand, right now all the conversations of the chatbot are added to one database.\n\nBut what about 'injecting' and 'removing' certain knowledge?\nFor example, a chatbot is trained from live conversations with users, but at some point I want to inject into him dialogues from a certain book, to allow him to use answers from that book along with those trained from actual people.\n\nBut then at some point I may want to make him forget only that book's dialogues, not the whole db.\n\nOr maybe I want him to talk to one user using only answers from book N, but to another user using answers from book X, but also using conversation training Y for both of them.\n\nIs it currently possible? If not, it may be an interesting feature to think about.\n I don't think it's currently possible to use X,Y,Z dataset based on the user talking.\n\nAnd for the training, you can write your own trainers and implement your own logic on removing/updating etc...\n Thanks, gunthercox, yes, I believe that Conversation object should be just what I need. \n I'm going to close this ticket off as the functionality mentioned is being tracked in #513  We are adding different logic adapters to a chatbot but end user man not remember all these logic adapter that are installed/added to an chatbot.\n\nBy introduce a special keyword like `!help` or something it will produce  logic adapters info and a breif description what it does.\n\nAny suggestions/thoughts?\n Hmm. Why should an end user know about your logic adapter.\n\nLogic adapters are processed sequentially\n\n```\n1. Time\n2. Closest match\n3. Weather\n```\n\nAnd whichever get the highest confidence score gets selected. In your case you can have a Logic adapter that captures `!help` and generate a custom message.\n Thank you, Assume i am going to provide a complex Django chat bot that include many customer relations, internal operations, employee related information, other rest operations and etc.,\n\nHere we have different types end users are going use same single chatbot. End user don't know what capabilities or services that chatbot is providing to him this gives customer a bad relation.\n\nWe should tell what are the services/capabilities we are going to provide with some keyword `help`. Then user can easily understood he/she can easily choose what is related to him.\n Exactly. Have a logic adapter to do this\n\n```\ndef can_process(self, statement):\n    return statement.text == 'help'\n\ndef process(self, statement):\n    return 1, Statement('Hey user, Here\\'s how you can use my chatbot. Ask me anything')\n```\n @gunthercox The solution will solve if i have a couple of logic adapters. I am considering a large amount logic adapter are installed on single adapter this solution i have rewrite everything.\n\nInstead if we have base_helper_logic adapter, we can overwrite those methods inside one logic operator.\n  Can I extract useful data from the user inputs?\n\nLike,\n\nUser: My name is saad.\nBot: Hello Saad\n\nCan I extract nouns like above and other useful data choices from the user? On which I can direct the user to some other route in my app.\n 1. To extract names, you have to use a Named Entity Extractor (nltk, Spacy, Mitie etc)\n2. To extract nouns, Chatterbot uses nltk pos tagger (or you can use your own)\n\n```\nfrom chatterbot.utils.pos_tagger import POSTagger\n\npos_tagger = POSTagger()\nprint (pos_tagger.tokenize('My name is saad'))\n```\n\nAll this has to be done in a logic adapter\n @rmdort can you please elaborate a bit more on this?\n I would suggest you to learn more about `Parts of Speech` tagger and NER tools. Google is your friend :) \n Something could be useful https://github.com/DarkmatterVale/regex4dummies\n\n``` Python\nimport os\nfrom subprocess import *\nimport re\nimport sys\nimport tarfile\nimport nltk\nfrom regex4dummies import regex4dummies\nfrom regex4dummies import Toolkit\n\n# Testing the 'nltk' parser\nprint(regex.compare_strings(parser='nltk', pattern_detection=\"semantic\", text=[\"Back at my desk, I poured and killed him a rattlesnake and some more rattlesnake\", \"the cat and the mouse in the house is sitting, in the house, on the mat\", \"time is it?\", \"what time is it here?\", \"This is the cat's hat\"]))\nsentence_information = regex.get_pattern_information()\nfor sentence in sentence_information:\n    print \"[ Pattern ]          : \" + sentence.pattern\n    print \"[ Subject ]          : \" + sentence.subject\n    print \"[ Verb ]             : \" + sentence.verb\n    print \"[ Object ]           : \" + sentence.object[0]\n    print \"[ Reliability Score ]: \" + str(sentence.reliability_score)\n```\n @gunthercox Thanks!\n  Running the Django example app listed under examples with no modificiation returned \"chatterbot.adapters.input.variable_input_type_adapter.VariableInputTypeAdapter.UnrecognizedInputFormatException: \"This type <'NoneType'> is not recognized as a valid input type.\"\n\nI feel like this is an error on my end but I can't seem to resolve it.  \n I think you have to add chatbot init to settings.py. I am using like this\n\nI am getting authentication issue, so I have commented CsrfViewMiddleware\n\n``` Python\nMIDDLEWARE_CLASSES = (\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    # 'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n)\n```\n\n``` Python\nCHATTERBOT = {\n    'name': 'Test',\n    'logic_adapters': [\n        'chatterbot.adapters.logic.TimeLogicAdapter',\n        'chatterbot.adapters.logic.MathematicalEvaluation',     \n    ]\n}\n```\n Thanks for the response, but this didn't seem to work for me.  I am still getting the same error message as before.\n @maclogan could you paste you console output, By the way a quote was missed\n\n``` Python\nCHATTERBOT = {\n    'name': 'Test',\n    'logic_adapters': [\n        'chatterbot.adapters.logic.TimeLogicAdapter',\n        'chatterbot.adapters.logic.MathematicalEvaluation',     \n    ]\n}\n```\n\nMore info available here http://chatterbot.readthedocs.io/en/stable/django/settings.html\n This is the full error I get after hitting the submit button on the online UI provided in the django app example.\n\n`Internal Server Error: /api/chatterbot/\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.5/dist-packages/django/core/handlers/exception.py\", line 39, in inner\n    response = get_response(request)\n  File \"/usr/local/lib/python3.5/dist-packages/django/core/handlers/base.py\", line 249, in _legacy_get_response\n    response = self._get_response(request)\n  File \"/usr/local/lib/python3.5/dist-packages/django/core/handlers/base.py\", line 187, in _get_response\n    response = self.process_exception_by_middleware(e, request)\n  File \"/usr/local/lib/python3.5/dist-packages/django/core/handlers/base.py\", line 185, in _get_response\n    response = wrapped_callback(request, *callback_args, **callback_kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/django/views/generic/base.py\", line 68, in view\n    return self.dispatch(request, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/django/views/generic/base.py\", line 88, in dispatch\n    return handler(request, *args, **kwargs)\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/ext/django_chatterbot/views.py\", line 14, in post\n    response_data = self.chatterbot.get_response(input_statement)\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 138, in get_response\n    input_statement = self.input.process_input(input_item)\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/adapters/input/variable_input_type_adapter.py\", line 39, in process_input\n    input_type = self.detect_type(statement)\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/adapters/input/variable_input_type_adapter.py\", line 34, in detect_type\n    input_type\nchatterbot.adapters.input.variable_input_type_adapter.VariableInputTypeAdapter.UnrecognizedInputFormatException: \"The type <class 'NoneType'> is not recognized as a valid input type.\"\n`\n I have 1.10.2 installed\n Hm I must be doing something wrong then.  I am using the current example app and have just tried it on another python/django installation and it didn't work\n So just to be sure I am not missing anything obvious, to run the example app all I have to do is be sure my django, chatterbot, and example/django-app are up to date, modify the setting.py file to add logic adapters to the chatterbot settings, and run a migration.  Then I just runserver like usual, correct?\n yes\n chatterbot-0.4.10\n That seems to have fixed it!  Sorry for the trouble, I ran an update on chatterbot 2 days ago, but I just checked my logs and I guess it failed during the installation.\n  Is there a way chatterbot can respond previous statements for example, In the below example i am referencing jira xx-1234 only first time.\n\n```\nStatement: /jira what is the status of xx-1234\nResponse: It's in retest\nStatement: /jira can i get latest comments?\nResponse: X Said It should be fixed by next month\n```\n\nFew ideas i am not sure will it work or not\n\nMaintain lookup table for statements if user always referencing a particuler thing, This might be slow down process, but it's worth to maintain good conversation with bot.\n\nAny thoughts/suggestions?\n @gunthercox This wont work if multiple users are asking for the ticket status, because last_ticket_referenced will change (considering that there is only a single chatbot instance)\n\nYou will have to spawn multiple chatbots for each user or use mongo DB to store these values\n @rmdort agreed with you, If i use mongo DB how do i handle this situation? could you provide a example scenario?\n I usually have a Users class which syncs the data with mongo\n\nThis might help. PS: I am using websockets, \nhttps://gist.github.com/rmdort/be125bf5ab04876bf073563dc755ef7d\n\nMaybe there is a better way of doing it. Open to feedback\n I think the same question i was asked here https://github.com/gunthercox/ChatterBot/issues/2\n Closing this issue it is going address in #2\n  I think most of the chatbots are doing identifying their logic adapter using specific keywords\n\nFor exmaple\n\n```\nCHATTERBOT = {\n    'name': 'test',\n    'logic_adapters': [\n        'chatterbot.adapters.logic.TimeLogicAdapter',\n        'chatterbot.adapters.logic.MathematicalEvaluation',\n        'chatterbot_jira.JiraLogicAdapter'\n    ]\n}\n```\n\nI can call logic adapter from chatterbot is something like below \n\n```\n/time what is current time\n/time how many seconds in a minute\n/math 2+2\n/jira search xx-1234\n```\n The workaround i am doing\n\n``` Python\nif re.search(r'^/jira', user_input):\n```\n Agree. Why cant your logic adapter handle this? For example\n\nIn your `chatterbot_jira.JiraLogicAdapter` \n\n```\ndef can_process (self, statement):\n    return re.match(r'^/jira', statement.text)\n```\n  Will there be a way to allow a logic adapter to receive additional information beyond just the statement?\n\nFor example, with a Django app I would like to send a custom logic adapter the user information, so the bot will take this into account when constructing a reply.\n\nThanks.\n As said @gunthercox , You could something like below, by introducing a new param `CHATTERBOT_ARGS` dict object\n\n``` Django\nCHATTERBOT_ARGS = {\n    'JIRA' : {\n        'server': 'https://jira.atlassian.com',\n        'user': None,\n        'pass': None,\n    }\n}\n```\n\nYou can import these setting in your logic adapter, More information here https://docs.djangoproject.com/en/dev/topics/settings/#using-settings-in-python-code\n\n``` Python\n# Import CHATTERBOT_ARGS from django.conf  settings\nfrom django.conf import settings\nclass JiraLogicAdapter(LogicAdapter):\n    \"\"\"\n    A logic adapter that returns information regarding the JIRA and\n    is returned, but additional features are planned in the future.\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        super(JiraLogicAdapter, self).__init__(**kwargs)\n\n        self.tagger = POSTagger()\n        jira_params = settings.CHATTERBOT_ARGS['JIRA']\n        print jira_params\n        self.jira = JIRA(server=jira_params['server'])\n   }\n\n```\n  Do you plan on expanding chatterbot to any other languages like JavaScript? It seems like it wouldn't be that difficult since python and JavaScript share a somewhat similar syntax. Would be nice to see this type of bot on node.js, most of the JS bots I've seen so far aren't intelligent bots.\n   Whenever I try to use ClosestMeaningAdapter, it goes into download loop like this:\n\n```\n[nltk_data]     C:\\Users\\nixes\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to\n[nltk_data]     C:\\Users\\nixes\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package wordnet to\n[nltk_data]     C:\\Users\\nixes\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n[nltk_data] Downloading package punkt to\n[nltk_data]     C:\\Users\\nixes\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to\n[nltk_data]     C:\\Users\\nixes\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package wordnet to\n[nltk_data]     C:\\Users\\nixes\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n[nltk_data] Downloading package punkt to\n[nltk_data]     C:\\Users\\nixes\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package punkt is already up-to-date!\n[nltk_data] Downloading package stopwords to\n[nltk_data]     C:\\Users\\nixes\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package stopwords is already up-to-date!\n[nltk_data] Downloading package wordnet to\n[nltk_data]     C:\\Users\\nixes\\AppData\\Roaming\\nltk_data...\n[nltk_data]   Package wordnet is already up-to-date!\n```\n\nHowever nltk is downloaded. Is it me, or is there a bug?\n Thanks. Happens all the time here :(\n I believe you were seeing this looping message due to https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/utils/wordnet.py#L18\n\nUsually we don't have privileges default nltk download directories, obviously We will get LookupError Exception, \n\nAnd also the expected default directories are `/home/<user/nltk` on `Linux`, `C:\\Users\\<user>\\AppData\\Roaming\\nltk_data` on `Windows`\n\n```\nif sys.platform.startswith('win'):\n    # Common locations on Windows:\n    path += [\n        str(r'C:\\nltk_data'), str(r'D:\\nltk_data'), str(r'E:\\nltk_data'),\n        os.path.join(sys.prefix, str('nltk_data')),\n        os.path.join(sys.prefix, str('lib'), str('nltk_data')),\n        os.path.join(\n            os.environ.get(str('APPDATA'), str('C:\\\\')), str('nltk_data'))\n    ]\nelse:\n    # Common locations on UNIX & OS X:\n    path += [\n        str('/usr/share/nltk_data'),\n        str('/usr/local/share/nltk_data'),\n        str('/usr/lib/nltk_data'),\n        str('/usr/local/lib/nltk_data')\n    ]\n```\n      Hi, so, I decided to separate my AI's command-logic from chatterbot's adapters. At least this way I can better contribute to making chatterbot a better chatterbot, and not an assistant, while also having full control over my command-logic, where just regular expressions work better than full-blown matching\\levenshtein distance\\dictionary\\etc logic of chatterbot :) anyway...\n\nI'll start making russian corpus for chatterbot. Here's math_words.\n\nAnd how should I approach adding new stuff to git myself? I'm more used to svn myself, which is much simpler in this case... Should I fork the whole project and somehow make pull requests, or how does it work? I know it's probably written a million times, but maybe there are project specific things... Anyway, here's corpus and I'll go read more about how to work with git : D\n\n``` json\n{\n  \"numbers\" : {\n    \"\u043e\u0434\u0438\u043d\" : 1,\n    \"\u0434\u0432\u0430\" : 2,\n    \"\u0442\u0440\u0438\" : 3,\n    \"\u0447\u0435\u0442\u044b\u0440\u0435\" : 4,\n    \"\u043f\u044f\u0442\u044c\" : 5,\n    \"\u0448\u0435\u0441\u0442\u044c\" : 6,\n    \"\u0441\u0435\u043c\u044c\" : 7,\n    \"\u0432\u043e\u0441\u0435\u043c\u044c\" : 8,\n    \"\u0434\u0435\u0432\u044f\u0442\u044c\" : 9,\n    \"\u0434\u0435\u0441\u044f\u0442\u044c\" : 10,\n    \"\u043e\u0434\u0438\u043d\u0430\u0434\u0446\u0430\u0442\u044c\" : 11,\n    \"\u0434\u0432\u0435\u043d\u0430\u0434\u0446\u0430\u0442\u044c\" : 12,\n    \"\u0442\u0440\u0438\u043d\u0430\u0434\u0446\u0430\u0442\u044c\" : 13,\n    \"\u0447\u0435\u0442\u044b\u0440\u043d\u0430\u0434\u0446\u0430\u0442\u044c\" : 14,\n    \"\u043f\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c\" : 15,\n    \"\u0448\u0435\u0441\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c\" : 16,\n    \"\u0441\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c\" : 17,\n    \"\u0432\u043e\u0441\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c\" : 18,\n    \"\u0434\u0435\u0432\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c\" : 19,\n    \"\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c\" : 20,\n    \"\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c\" : 30,\n    \"\u0441\u043e\u0440\u043e\u043a\" : 40,\n    \"\u043f\u044f\u0442\u044c\u0434\u0435\u0441\u044f\u0442\" : 50,\n    \"\u0448\u0435\u0441\u0442\u044c\u0434\u0435\u0441\u044f\u0442\" : 60,\n    \"\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442\" : 70,\n    \"\u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442\" : 80,\n    \"\u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e\" : 90\n  },\n  \"words\" : {\n    \"\u043f\u043b\u044e\u0441\" : \"+\",\n    \"\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c\" : \"/\",\n    \"\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435 \u043d\u0430\" : \"/\",\n    \"\u0434\u0435\u043b\u0438\u0442\u044c \u043d\u0430\" : \"/\",\n    \"\u043c\u0438\u043d\u0443\u0441\" : \"-\",\n    \"\u0432\u044b\u0447\u0435\u0441\u0442\u044c\" : \"-\",\n    \"\u043e\u0442\u043d\u044f\u0442\u044c\" : \"-\",\n    \"\u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c\" : \"*\",\n    \"\u0443\u043c\u043d\u043e\u0436\u0435\u043d\u043d\u043e\u0435 \u043d\u0430\" : \"*\",\n    \"\u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c \u043d\u0430\" : \"*\",\n    \"\u043a\u0432\u0430\u0434\u0440\u0430\u0442\" : \"^ 2\",\n    \"\u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0435\" : \"^ 2\",\n    \"\u0441\u0442\u0435\u043f\u0435\u043d\u044c\" : \"^\"\n  },\n  \"scales\" : {\n    \"\u0441\u0442\u043e\" : \"* 100\",\n    \"\u0442\u044b\u0441\u044f\u0447\" : \"* 1000\",\n    \"\u043c\u0438\u043b\u043b\u0438\u043e\u043d\" : \"* 1000000\",\n    \"\u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434\" : \"* 1000000000\",\n    \"\u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d\" : \"* 1000000000000\"\n  }\n}\n```\n THanks! Yeah, I did that. Will try to make a basic russian corpus asap.\n\nAand one more question though, is there a central place for switching language in chatter bot, or will it just define language automatically somehow? \n Thanks, that's what I wanted to know :)\n  Marathi math-words have been added. \n   @armsmani can you specify which part of the code, raised this error ?\n  Hi,\n\nHas anyone come up with a storage adapter for couchdb?\n Hi @Gokul299210, CouchDB looks interesting, I would like to test several bots instances feeding up a local instance and using master to master replication. @vkosuri I see, CouchDB is very similar as MongoDB as Key-Document, I really don't know how much users will support or need it. \r\n\r\nI'll wait to go further in this.\r\n\r\n  This is just a proposal. \n\nScenario\nMost of my clients want a training corpora but they dont want bots to auto-learn.\n\nSo when i am starting up the bot\n\n```\nbot = ChatBot('name', read_only=True)\nbot.train('english') # Add corpus even if read_only is True\n```\n\nWhat do you think?\n  When user provides no training data, chatterbot is currently responding with the input statement. Logic adapter output is completely skipped\n\nI guess its because of no knowledge adapter. Can we remove that and make it optional to the user?\n\n```\n# Add required system logic adapter\nself.add_adapter('chatterbot.adapters.logic.NoKnowledgeAdapter')\n```\n ok noted.\n\nThe bot i was building didn't need any training data. I was using logic adapters for everything. I have adapters for `greetings`, `q&a` etc. \n\nI will probably just add one training data to prevent this error.\n\nCurrently if the bot is read_only, calling `train` doesnt add the training data to mongo. I thought only new conversations will not be added. Is this intentional?\n\n```\n# Doesnt work if read_only = True\nchatbot.train(\n  \"corpus.english\"\n)\n```\n Done - #337 \n    Incorrect class name\n\n```\nsuper(ClosestMatchAdapter, self).__init__(**kwargs)\nNameError: global name 'ClosestMatchAdapter' is not defined\n```\n  Would this will help in responding with `I dont understand your question` for statements that don't match.?\n   Bot Input\n\n```\ninput = Statement(None)\ninput.add_extra_data('user_id', 1)\nbot_input = chatbot.get_response(input)\n```\n\nIn my logic adapter,\n\n```\ndef process(self, statement):\n   print (statement.extra_data) # returns {}\n```\n\nI only see this issue when using Terminal output adapter. I guess its the job of the input adapter to persist extra_data\n I guess preserving `extra_data` is upto the Input/output adapater. Hipchat and Terminal input adapters modify the input_statement, hence extra_data gets lost. \n\nSo i don't think any action is required. What do u think?\n Yes. Can close this. \ud83d\udc4d \n\nIts just that in the terminal input adapter\n\n```\ndef process_input(self, statement)\n    return Statement(user_input)\n```\n\nIn this case the input `statement` object is not being used, instead a new instance of `Statement` is returned. So extra_data is lost in the response of the output adapter. But yes, you are right, the core doesnt alter `extra_data`\n  Is it possible for a logic adapter to modify the input statement before it goes to the next adapter?\n\nCan I use extra_data for this, to store some computed value\n ok noted. How about the input text?\n\nI want to create a logic adapter that does spell correction and handles the output to the next logic adapter.\n Ah ok. So save the computed value in the databse from one logic adapter and retrieve the saved value in the next logic adapter? \n I need to create chatbot to autocorrect all the spelling mistakes? can you help me?\r\n Actually My question is User will write a sentence with spelling mistake and Chatbot should response same sentence without spelling mistake.\r\n\r\nexample:\r\n\r\nUSER: clmate is gaod\r\nBOT: climate is good\r\n\r\ncan you help me in this? I think this might help you https://github.com/mattalcock/blog/blob/master/2012/12/5/python-spell-checker.rst  I am planning to add different department services as Django re usable apps. Will it be possible with this framework?\n\nfor exampl \n\n```\n| _ ChatterBot (Parent)\n|\n| _ _Service 1 (Child)\n|\n| __ Service 2 (Child)\n|\n| _ _ et..\n```\n\nIf so, could you please let me how do this?\n @gunthercox thank you very much, I'll try and let you about about development, if possible I'll update documentation also.\n  Is it possible to send multiple response to a conversation? How can i do something like this\n\n```\nuser: Hello\nbot: Hello, hi\nbot: Good afternoon\nbot: How can I help you today?\n```\n Ah ok. I see what you are saying - the logic adapter outputs multiple responses in a certain format and let the output adapter send the response as multiple messages\n  Added corpus of HINDI language, will be adding more of conversations in hindi language\n  Let me know if i am going in the right direction\n\nTodo\n1. Documentation...\n2. List of all supported date patterns\n3. Add tests\n Actually I don't use nltk or MX date in the parser, I will remove the references.\n\nBy the way, aren't u using nltk internally to remove stopwords ?\n Ah ok, I see. \n\nWhat do you think i should do? I did borrow most of the code from nltk_contrib, but made a lot of modifications to match patterns.  Will a rewrite work, maybe a restructure?\n\nIts all just RegEx capture anyways\n Just did a complete overhaul of the date parser from scratch. Its much easier to add new pattern now. No external dependencies nor any nltk code being used.\n\nI will add more regex patterns asap.\n Done. If i missed out any date patterns let me know. Otherwise its ready\n  is there any example of my_bot_config.json ? \r\n@bilalbayasut save this into a file for example ``./my_bot_config.json`` \r\n\r\n``` JSON\r\n{\r\n    \"name\": \"Tech Support Bot\",\r\n    \"logic_adapters\": [\r\n        \"chatterbot.logic.MathematicalEvaluation\",\r\n        \"chatterbot.logic.TimeLogicAdapter\",\r\n        \"chatterbot.logic.BestMatch\"\r\n    ],\r\n    \"trainer\": \"chatterbot.trainers.ChatterBotCorpusTrainer\",\r\n    \"training_data\": [\r\n         \"chatterbot.corpus.english.greetings\"\r\n    ]\r\n}\r\n```\r\n\r\nTo could do like this\r\n\r\n```Bash\r\nfrom chatterbot import ChatBot\r\nchatbot = ChatBot.from_config_file('./my_bot_config.json')\r\n```\r\n  I have been using NLTK timex parser to parse date and time just like https://duckling.wit.ai/ . We also parse email, url, phone numbers.\n\nNLTK parser: https://github.com/nltk/nltk_contrib/blob/master/nltk_contrib/timex.py\n\nDo you have an API skeleton in mind, if so i can help with this\n Noted. \n\nHi @gunthercox , I have a question regarding the license of this app. \n1. Can chatterbot be used for commercial purposes? \n2. What kind of License is it released under? MIT?\n This is where I am right now.\n\n``` .python\n>>> from chatterbot.utils.parsing import datetime_parsing\n>>> dates = datetime_parsing('I have meetings on November 2nd and 3rd. My next holiday is whole of next week. I am free this friday and I am going on leave the day after tomorrow')\n>>> print (dates)\n[([datetime.datetime(2016, 11, 2, 0, 0), datetime.datetime(2016, 11, 3, 0, 0)], (19, 54)), (datetime.datetime(2016, 10, 10, 16, 31, 8, 449717), (84, 108)), (datetime.date(2016, 10, 7), (120, 146)), (datetime.datetime(2016, 10, 5, 16, 31, 8, 449717), (175, 208))]\n```\n\nIf you notice the first date object is an array of dates (since the user is referring to multiple dates), while others are not. The second object is the start and end position in the text\n\nYet to add tests. How do i run tests? Sorry I am coming from Javascript :)\n Awesome thanks. I didnt see the license information in `license.md` file, thats the reason i asked.\n  Awesome. Thanks \ud83d\udc4d \n   Multi-user support in the core would be really useful\n Currently how i am handling user-bot conversations is\n1. When a user is connected, i create a user_id cookie and save the user to mongodb\n2. I record all the user's conversations in mongodb tagged to the unique user_id, so next time i can pick up the conversation where it left off (TODO)\n3. Users current_intent and previous_intent is stored as well. So that the bot knows the context before responding to the user. Previous intent/Current intent is only stored for 5 minutes. (TODO)\n\ngroup of user < -> bot sounds more complicated\n  Hi Gunther. Is it possible for you to release a websocket adapter? \n\nI have been trying to implement one with autobahn, But i am not sure how the input and output adapters should be\n Got around implementing it. Was quite simple. I might have to create multiple instances of Chatbot for each connection.\n\nIs there anyway to create multiple instances without having to re-train the bot?\n\n```\nfrom autobahn.twisted.websocket import WebSocketServerProtocol, \\\n    WebSocketServerFactory\nfrom chatterbot import ChatBot\n\nclass MyServerProtocol(WebSocketServerProtocol):\n\n    def onConnect(self, request):\n        self.chatbot = ChatBot(\n            'Ron Obvious',\n            storage_adapter=\"chatterbot.adapters.storage.MongoDatabaseAdapter\",\n            database=\"chatbot\"\n        )\n        self.chatbot.train() // EXPENSIVE\n        print(\"Client connecting: {0}\".format(request.peer))\n\n    def onOpen(self):\n        print(\"WebSocket connection open.\")\n\n    def onMessage(self, payload, isBinary):\n        msg = self.chatbot.get_response(payload.encode('utf8'))\n        self.sendMessage(msg.text.encode('utf8'), isBinary)\n\n    def onClose(self, wasClean, code, reason):\n        print(\"WebSocket connection closed: {0}\".format(reason))\n\n\nif __name__ == '__main__':\n\n    import sys\n\n    from twisted.python import log\n    from twisted.internet import reactor\n\n    log.startLogging(sys.stdout)\n\n    factory = WebSocketServerFactory(u\"ws://127.0.0.1:9000\")\n    factory.protocol = MyServerProtocol\n    # factory.setProtocolOptions(maxConnections=2)\n\n    # note to self: if using putChild, the child must be bytes...\n\n    reactor.listenTCP(9000, factory)\n    reactor.run()\n\n```\n Fixed this by setting `user_id` before `get_response`. \n- I have a global `users` object with all user settings (eg: Intent)\n- Single instance of Chatbot\n- Pass the `users` object into Chatbot while initializing\n\n```\ndef onConnect(self, request):\n    # Create or re-use the user_id based on cookies\n    self._user_id = user_id # Generate this\n    self.chatbot = bot\n    users[self._user_id] = { ... user settings here }\n\ndef onMessage(self, payload, isBinary):\n    self.chatbot.user_id = self._user_id\n    msg = self.chatbot.get_response(payload.encode('utf8'))\n    self.sendMessage(msg.text.encode('utf8'), isBinary)\n```\n\nIt would be great if you can provide a method to set context variables dynamically. And even adding/removing adapters \n  Thanks for this great tool. I was looking at the example program. In the English corpus, there are cases where a same question can have multiple answers\n\n```\n    [\n        \"Hi, How is it going?\",\n        \"Good\"\n    ],\n    [\n        \"Hi, How is it going?\",\n        \"Fine\"\n    ],\n    [\n        \"Hi, How is it going?\",\n        \"Okay\"\n    ],\n    [\n        \"Hi, How is it going?\",\n        \"Great\"\n    ],\n    [\n        \"Hi, How is it going?\",\n        \"Could be better.\"\n    ],\n    [\n        \"Hi, How is it going?\",\n        \"Not so great.\"\n    ],\n```\n\nHowever, when I am actually running the app and tries to ask \"Hi How is it going?\", the answer is always \"Could be better.\"\n\nI did set the \n\nfilters=\"chatterbot.filters.RepetitiveResponseFilter\",\nand\n    logic_adapters=[\n        \"chatterbot.adapters.logic.ClosestMatchAdapter\"]\n\nBut is there a way to just try to let it randomize the response so it's not always the same answer?\n Thank you very much, that's exactly what I am looking for.\n\nI didn't find that in the document, maybe I missed that.\n  Hi Gunther,\n\nWe are doing intent classification with a custom Logic adapter. The intent will match for `Book a flight ticket` => `book_ticket` . \n\nThe matched Logic adapter will respond with `What is your destination` . Let's say a user types a random word `asdadasd`, is there anyway for me to go back to the Logic adapter and prompt `What is your destination`  . Can conversations remain in the Logic adapter? I only want to exit once the `book_ticket` intent is complete\n Awesome. I have written a basic IntentClassifier for `book_flight` intent. Am I going in the right direction? Is there a better way?\n\n```\nfrom chatterbot.adapters.logic import LogicAdapter\nfrom chatterbot.conversation import Statement\nfrom textblob.classifiers import NaiveBayesClassifier\n\nclass IntentClassification(LogicAdapter):\n    def __init__(self, **kwargs):\n        super(IntentClassification, self).__init__(**kwargs)\n\n        training_data = [\n            (\"Book me a ticket\", 1),\n            (\"Book me a ticket to Singapore\", 1),\n            (\"it is time to go to sleep\", 0),\n            (\"what is your favorite color\", 0),\n            (\"i had a great time\", 0),\n            (\"what is\", 0)\n        ]\n        self.classifier = NaiveBayesClassifier(training_data)\n        self.intent_name = 'book_flight'\n\n    def can_process(self, statement):\n        return self.context.intent is None or self.context.intent == self.intent_name\n    def process(self, statement):\n        # If the intent is active\n        if self.context.intent == self.intent_name:\n            # Asks for destination if empty, or Book tickets\n            self.context.intent = None\n            return 1, Statement('We have booked your tickets')\n        else:\n            # Check if user's statement matches the intent\n            confidence = self.classifier.classify(statement.text.lower())\n            if confidence > 0:\n                self.context.intent = self.intent_name\n                destination_exists = 'singapore' in statement.text.lower()\n                if destination_exists:\n                    self.context.intent = None\n                    return confidence, Statement('We have booked your flight tickets to singapore')\n                else:\n                    return confidence, Statement('Where are you fying to?')\n            else:\n                self.context.intent = None\n                return confidence, Statement(None)\n```\n Sure. Thanks. I would be interested in having a `persist` flag to indicate if a conversation should remain in a Logic adapter.\n\nIf the `persist` flag is false, then only that Logic adapter will handle all future conversations.\n\nWhat do you think?\n\nBasically i am trying to build something similar to wit.ai's branching model when some of the extracted entities or context variables are missing.\n Another issue i am facing is sometimes i need to save Context variables for a specific amount of time for a future conversation.\n\nFor eg:\n\n```\nuser: What is the weather in Singapore?\nbot: It will be sunny\nuser: How about tomorrow\nbot: Sunny too\nuser: How about the traffic? (Matches traffic_intent logic adapter)\nbot: It will always congested.\n```\n\nIn this case, i have to save `location` context which can be re-used in a different logic adapter.\n\nI can save it externally, but would be good if Chatterbot handles per-user settings and saving of context internally.\n @gunthercox \n\nI was wondering if chatterbot can have Topic based conversations in the core. Similar to \n\nhttps://github.com/superscriptjs/superscript/wiki/Topics\n\nOr should we just use the logic adapter pattern to do this? There is also another chatbot that implements Topics\n\nhttps://github.com/open-intent-io/open-intent\n It would be good to see your notes on this. I am not sure how would you make the bot learn to group conversations into a topic.\n\nI was thinking topics to be manually created ones, and conversations are tagged to a topic.  But it will be interesting to see your POV\n\nA few features off the top of my head\n1. Tagging conversations to topics. \n2. Branching between conversations inside a topic\n3. Branching from one topic to another\n Hi @rmdort and @gunthercox, I've been looking for the way to create this intent and contextual chatting in this chatterbot. any updates on this?\n\nCheers,\n +1 +1 @rmdort  - Did u try using wit.ai with chatterbot ? OR api.ai etc for intent and entities? \r\nI know API.AI is paid but just for the idea. Because my requirement is kind of same as yours.  Or did u manage to built your own version using open-intent?  https://github.com/open-intent-io/open-intent \r\n\r\n  Hi there I would like to help, I'm french so count me in if you need so stuff ;) \nTake care.\n  Hi,\n\nI just tried basic_example.py and it does not seem to work.  Even if we ignore warnings it does not give any output.\n\n_/usr/local/lib/python2.7/dist-packages/fuzzywuzzy/fuzz.py:35: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\n/usr/local/lib/python2.7/dist-packages/chatterbot/adapters/storage/jsonfile.py:19: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production application environments.\n  self.UnsuitableForProductionWarning\nHow are you?_\n\nEven example django app does not look to give any significant  results.\n\nAny suggestion?\n I have the same problem\n  Just to give some information on the issue... While adapters are great and it's nice that they use confidence check, I found it more reliable and easy to write my own regex based command-parser for my assistant ai. Any user input goes through the command parser first, and it only goes to chat bot if no matching command was found.\n\nAt least for now.\n  If i dont want the bot to learn further after training by setting read_only =true, what is the response of some random statement\n  It looks like `\"do you know the time\"` was accidentally added to both the \"hit\" and \"miss\" lists. This commit ensures it's classified as a match.\n  I tried to adapt the example at http://chatterbot.readthedocs.io/en/stable/filters/index.html to my code, but I keep getting the error:\n\n``` bash\nTraceback (most recent call last):\n  File \"bot.py\", line 41, in <module>\n    bot_input = bot.get_response(None)\n  File \"/Users/rileyshaw/code/chat/venv/lib/python3.5/site-packages/chatterbot/chatterbot.py\", line 141, in get_response\n    self.storage.generate_base_query(self)\n  File \"/Users/rileyshaw/code/chat/venv/lib/python3.5/site-packages/chatterbot/adapters/storage/storage_adapter.py\", line 23, in generate_base_query\n    filter_instance = Filter()\nTypeError: 'str' object is not callable\n```\n\nIt looks like `Filter` is somehow being read as a string?\n\nFor reference, here's the code I'm using:\n\n``` python\nfrom chatterbot import ChatBot\nfrom chatterbot.trainers import ListTrainer\n\n\n# Create a new ChatBot!\nbot = ChatBot(\"demo\",\n    storage_adapter=\"chatterbot.adapters.storage.MongoDatabaseAdapter\",\n    logic_adapters=[\n        \"chatterbot.adapters.logic.ClosestMeaningAdapter\",\n        \"chatterbot.adapters.logic.ClosestMatchAdapter\"\n    ],\n    input_adapter=\"chatterbot.adapters.input.TerminalAdapter\",\n    output_adapter=\"chatterbot.adapters.output.TerminalAdapter\",\n    filters=\"chatterbot.filters.RepetitiveResponseFilter\",\n    database=\"demodb\",  # (Already trained in this DB)\n    database_uri=\"mongodb://localhost:27017/\",\n    read_only=True,\n)\n\nprint(\"Type something to begin...\")\n\n# The following loop will execute each time the user enters input\nwhile True:\n    try:\n        # We pass None to this method because the parameter\n        # is not used by the TerminalAdapter\n        bot_input = bot.get_response(None)\n\n    # Press ctrl-c or ctrl-d on the keyboard to exit\n    except (KeyboardInterrupt, EOFError, SystemExit):\n        break\n```\n\nI also tried `from chatterbot.filters import RepetitiveResponseFilter` and using that directly, but that failed with:\n\n``` bash\nTraceback (most recent call last):\n  File \"demo.py\", line 42, in <module>\n    bot_input = bot.get_response(None)\n  File \"/Users/rileyshaw/code/chat/venv/lib/python3.5/site-packages/chatterbot/chatterbot.py\", line 141, in get_response\n    self.storage.generate_base_query(self)\n  File \"/Users/rileyshaw/code/chat/venv/lib/python3.5/site-packages/chatterbot/adapters/storage/storage_adapter.py\", line 22, in generate_base_query\n    for Filter in chatterbot.filters:\nTypeError: 'type' object is not iterable\n```\n ``` python\nfrom chatterbot.filters import RepetitiveResponseFilter\n\n# ...\n\n    filters=[RepetitiveResponseFilter],\n\n```\n\nseems to work... is this right? :S\n @rileyjshaw  Yeah that will work, expected way is to pass filters as a tuple\n Cool, thanks!!\n\nOn Sun, Sep 18, 2016 at 08:34 Gunther Cox notifications@github.com wrote:\n\n> @rileyjshaw https://github.com/rileyjshaw There is a known issue with\n> the current release where the filters parameter is expecting a callable for\n> the filter class instead of a string path to the callable class. This has\n> been fixed but the changes won't be available until the next version of\n> ChatterBot is released.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/299#issuecomment-247845180,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/ABwW1tcT3SoOQYuQPufXJ8f0TdNeOdArks5qrS_tgaJpZM4J_zxc\n> .\n  Is there a way to link a hook function to some phrases?\n Oh! great!\n\nI'm trying to create a kind of decision tree implementing a machine learning conversation, it is where chatterbot shows up.\n\nIf you know or have something related it, please let me know it,\n\nThanks.\n  @gunthercox Could chatterbot be trained externally and then combined with the django app?\n Yeah @gunthercox  is this possible ?\n @gunthercox  I created an adapter with weighted user inputs that then generate a response. \nI modified the time_adapter.py, this would be a very tedious task for a large database of questions. \n\n```\nfrom .logic_adapter import LogicAdapter\nfrom chatterbot.conversation import Statement\nfrom textblob.classifiers import NaiveBayesClassifier\nfrom datetime import datetime\n\n\nclass CustomerSupportAdapter(LogicAdapter):\n    \"\"\"\n    The TimeLogicAdapter returns the current time.\n    \"\"\"\n\n    def __init__(self, **kwargs):\n        super(CustomerSupportAdapter, self).__init__(**kwargs)\n\n\n\n        training_data = [\n            (\"Are international students elibgible\", 1),\n            (\"Im an international student, can I apply\", 1),\n            (\"whats available to international students\", 1),\n            (\"international students\", 1),\n            (\"do international students qualify\", 1),\n            (\"international students accepted\", 1),\n            (\"do i qualify as an international student\", 1),\n            (\"as an international student do i qualify\", 1),\n            (\"what are the requirements for international students\", 1)\n        ]\n\n        self.classifier = NaiveBayesClassifier(training_data)\n\n    def process(self, statement):\n        # now = datetime.now()\n        confidence = self.classifier.classify(statement.text.lower())\n        response = Statement(\"The Mount Baker, Washington program is open to international students\")\n\n        return confidence, response\n```\n If you used the DjangoStorageAdapter as the storage for the training it shouldn't the training-from-corpus examples \"just work\"?\n One problem with the DjangoStorageAdapter that I'm seeing is that `Response.response.text` is actually the statement that is being responded to and `Response.statement.text` is the real response. At least if you look at the data in the admin interface after submitting at least 2 chats to the API using the example django app.html: Issue #308\n @gunthercox ETA for the fix?\nThanks.\n fix in 2 weeks on my fork @totalgood, with PR to @gunthercox repo\n @hobson hi , i want to train the chatterbot with  storage DjangoStorageAdapter, and use database as django  database . but It seems inconsistent database formats \n Me too @chenjun0210 . I'm working on it. But you could probably fork and fix faster than me, if you have an urgent need.\n excellent\n\n--Hobson\n(503) 974-6274\ngh https://github.com/hobson/ twtr https://twitter.com/hobsonlane li\nhttps://www.linkedin.com/in/hobsonlane g+\nhttp://plus.google.com/+HobsonLane/ so\nhttp://stackoverflow.com/users/623735/hobs\n\nOn Thu, Nov 10, 2016 at 4:56 PM, Gunther Cox notifications@github.com\nwrote:\n\n> I'm currently working to add a Django management command and training_data\n> parameter that will allow chat bots to be trained. This functionality\n> should be available in the next version released.\n> \n> Updated documentation will be available, but essentially all you will need\n> to do is call the following command in your Django project.\n> \n> python manage.py train\n> \n> The changes can be seen here: #401\n> https://github.com/gunthercox/ChatterBot/pull/401\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/295#issuecomment-259852935,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AAR396j3vX3LxMRKpTcynw4Ke0l-luH9ks5q871YgaJpZM4J9Cm3\n> .\n  Issue: [https://github.com/gunthercox/ChatterBot/issues/287](https://github.com/gunthercox/ChatterBot/issues/287)\n @gunthercox Ok, let me know if you need any help from side. \n @gunthercox Ok.\n  Makes admin interface much more intuitive to work with.\n  When running the example program:\n\n```\n\nfrom chatterbot import ChatBot\n\nchatbot = ChatBot(\n    'Ron Obvious',\n    trainer='chatterbot.trainers.ChatterBotCorpusTrainer'\n)\n\n# Train based on the english corpus\nchatbot.train(\"chatterbot.corpus.english\")\n\n# Get a response to an input statement\nprint(chatbot.get_response(\"Hello, how are you today?\"))\n\n```\n\nI get two warnings, Although the program continues to run as normal.\n\n```\n\nC:\\Python35\\lib\\site-packages\\nltk\\decorators.py:59: DeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\n  regargs, varargs, varkwargs, defaults = inspect.getargspec(func)\n\n```\n\nand\n\n```\n\nC:\\Python35\\lib\\site-packages\\chatterbot\\adapters\\storage\\jsonfile.py:18: UnsuitableForProductionWarning: The JsonFileStorageAdapter is not recommended for production application environments.\n  self.UnsuitableForProductionWarning\n\n```\n\nI'm running with Python3.5 AMD64 on Windows 10.\n Thanks @gunthercox!\n  Hi @gunthercox,It'll be a great addition !\n\nI already tried REST API version 3.0 to connect with skype, IMO, bot REST API still very new and has a poor error handling.\n\nMaybe with Node or C# works better.\n \ud83d\udc4d Looking forward to bot framework intergration\n @gunthercox interested to work for it, Any ETAs for this task?\n @gunthercox By going through some of the guideline of `Bot Connector - Direct Line API - V1.0`  https://docs.botframework.com/en-us/restapi/directline/#navtitle\n\nThese things we need to to accomplish. Can i submit **PR** for these changes?\n\n**Authentication**\n\n``` REST\n-- connect to directline.botframework.com --\nPOST /api/conversations/abc123/messages HTTP/1.1\nAuthorization: BotConnector RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\n[other HTTP headers, omitted]\n```\n\n**Starting a conversation**\n\n``` REST\n-- connect to directline.botframework.com --\nPOST /api/conversations HTTP/1.1\nAuthorization: BotConnector RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0y8qbOF5xPGfiCpg4Fv0y8qqbOF5x8qbOF5xn\n[other headers]\n\n-- response from directline.botframework.com --\nHTTP/1.1 200 OK\n[other headers]\n\n{\n    \"conversationId\": \"abc123\",\n    \"token\": \"RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0y8qbOF5xPGfiCpg4Fv0y8qqbOF5x8qbOF5xn\",\n}\n```\n\n**Sending an Activity to the bot**\n\n```\n-- connect to directline.botframework.com --\nPOST /api/conversations/abc123/messages HTTP/1.1\nAuthorization: BotConnector RCurR_XV9ZA.cwA.BKA.iaJrC8xpy8qbOF5xnR2vtCX7CZj0LdjAPGfiCpg4Fv0\n[other headers]\n\n{\n  \"text\": \"hello\",\n  \"from\": \"user1\"\n}\n\n-- response from directline.botframework.com --\nHTTP/1.1 204 No Content\n[other headers]\n```\n Methods trying to implement using DirectLine client\n\n``` HTTP\nPOST /api/tokens to get a token for a conversation\nGET /api/tokens to refresh a token\n\nGET /api/conversations to start a new conversation\nPOST /api/conversations/{id}/messages to send a message\nGET /api/conversations/{id}/messages to receive messages\nPOST /api/conversations/{id}/upload to upload an attachment\n```\n - [x] Input adapter\n- [x] Output adapter\n- [x] Tests\n- [x] Documentation\n- [x] Example code\n vkosuri  - I am very new to chat bot world. However I have a question. What is the advantage of using ChatterBot instead of using Microsoft Bot Framework in terms of features and accuracy?  \n @phpmind Am also like you, @gunthercox could you please answer his question? \n  @gunthercox interested to work on this feature? Any guidelines? \n Thanks @gunthercox some useful links i have found\n\non ubuntu \n- https://github.com/tensorflow/models/pull/115\n- Installation instrctuion https://github.com/JoshData/models/blob/b72274d38f169f77e6a15e54834f463f627dc82a/syntaxnet/build/ubuntu-14.04_x64.sh\n\nGitHub syntaxnet https://github.com/tensorflow/models/tree/master/syntaxnet\n\nOn Windows it's very difficulty https://github.com/tensorflow/models/issues/77\n\nStack-overflow syntaxnet tags http://stackoverflow.com/questions/tagged/syntaxnet\n Hello,\r\n\r\nI wrote a custom comparison method in chatterbot using the WMD (word mover's algorithm) implementation in the gensim python package.\r\n\r\nWMD takes 2 sentences(or docs) and compares them semantically. Even if the 2 sentences have no common words, they get a high similarity score if they 'mean' the same thing.\r\n\r\nExample - these 2 sentences get a high similarity score:\r\n1. The king and queen paid a visit to the victims in the hospital last night\r\n2. The patients got a royal visit yesterday\r\n\r\nBy combining the leveshtein distance with WMD distance, I am able to get chatterbot to perform a lot better - _Yet to start benchmarking_\r\n\r\nPlease let me know if you're interested in seeing the preliminary code.\r\n\r\n_note: My intention is to really solve issue for my bot: \"context based reply. #616\"_  Closing this again in favor of the reasoning I've described in this comment: https://github.com/gunthercox/ChatterBot/issues/797#issuecomment-312497461  @gunthercox  please have a look at PR, let me know your feedback.\n    How can I use this swear words filter?   Filter is made abstract so the it called be instantiated.\n  Jaccard index is found to have better performance in  approximate sentence matching so implement it.\n ratio is added here if there is ratio it will return result :)  @gunthercox \n  Hi @gunthercox \n\nWhen there is no such closest match answer for new input, chatter robot used \u201cfuzzywuzzy\u201d or other algorithm method to find one and we as user reviewed this answer as qualified (or as user, we add new answer for this new input) can chatter robot update its Jason db or corpus automatically, by this way, it will save re-run time and update knowledge base.\n\nFor improving the accurate of two sentences\u2019 similarity, chatter robot used fuzzywuzzy as cloestmatch and wordnet as closetmeaning match, do you think there are any other method or direction we could try?  \n thanks. Markov chains is good choice. May I double check with you that there is no good python package available for Markov chains based on my understanding?\n  Hi,\nI'm learning with Python. I installed your beautiful Chatterbot 0.4.6. but there is a big problem wit NLTK module because with Python 3.5.2, chatterbot doesn't work because of there is a Deprecated Warning.\nI tried a lot of methods to solve this event:\n **First**\nWith 'python3 -m pip install -U <library_name>'\n**Second**\nI downloaded the new module nltk  and then I installed it with command: sudo python setup.py install\n**Third**\nI tried with the command: \nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\nIn all of this cases, Chatterbot 0.4.6 (new file with title \"Test.py\"):\n\nfrom chatterbot.training.trainers import ChatterBotCorpusTrainer\n\nAfter run, it gives me this message:\n\nWarning (from warnings module):\n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/nltk-3.2.1-py3.5.egg/nltk/decorators.py\", line 59\n    regargs, varargs, varkwargs, defaults = inspect.getargspec(func)\nDeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\n\nCan you help me please? Thanks a lot!\n I have the same: 3.2.1\n\nI don't know why it compares the Deprecated Warning message...\n\nPlease, help me.\n Hi,\nI find also this:\n\nhttps://bugs.python.org/issue27172\n\nIt seems a bug, but I don't know how to change the code and where put it.\n\nAdriana\n I tried your solution. I uninstalled nltk by running 'sudo pip uninstall nltk'. With 'pip uninstall nltk', the result was permission denied. \nThen I installed nltk by running 'pip install nltk --upgrade'.\nBut the result is the same:\n\n``` python\nWarning (from warnings module):\n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/nltk/decorators.py\", line 59\n    regargs, varargs, varkwargs, defaults = inspect.getargspec(func)\nDeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\n```\n\nWith the use of setup.py the message of warning was a bit different because in that there was a details about the version of nltk module. Look:\n\n``` python\nWarning (from warnings module):\nFile \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/**nltk-3.2.1-py3.5.egg**/nltk/decorators.py\", line 59\nregargs, varargs, varkwargs, defaults = inspect.getargspec(func)\nDeprecationWarning: inspect.getargspec() is deprecated, use inspect.signature() instead\n```\n\nThanks for your support.\n This appears to be an issue in NLTK and not one in Chatterbot. I haven't been able to find a ticket for NLTK that is tracking this issue, so either it was reported and fixed or it was never reported.\n I opened a ticket for NLTK because I suspected this problem could be\nassociated to this module with os x.\n\nI don't have answer yet. I hope someone help me.\n\nThanks a lot.\n\nIl 02/Set/2016 17:06, \"Kevin Brown\" notifications@github.com ha scritto:\n\n> This appears to be an issue in NLTK and not one in Chatterbot. I haven't\n> been able to find a ticket for NLTK that is tracking this issue, so either\n> it was reported and fixed or it was never reported.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/270#issuecomment-244401316,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AUYRmSFoeEpFUN19kvF8IGmJlGIMb0nDks5qmDtpgaJpZM4Jx7f_\n> .\n Sorry, I have a question: Is it possibile to use your chatterbot with\nPython 3.5.2?\n\nI asked to Michele Simionato (author of both modules decorator.py and\ndecorators.py) and he answered me in this way:\n\nA deprecation warning is a non-issue, it is just a warning. I will remove\nit in future versions of the decorator module, bit it is not urgent at all.\n\nBut it isn't just a warning because when I try to run a training test, it\ncompares only Deprecated Warning message.\n\nCould you help me please?\n\nThanks\n\nIl 02/Set/2016 17:06, \"Kevin Brown\" notifications@github.com ha scritto:\n\n> This appears to be an issue in NLTK and not one in Chatterbot. I haven't\n> been able to find a ticket for NLTK that is tracking this issue, so either\n> it was reported and fixed or it was never reported.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/270#issuecomment-244401316,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AUYRmSFoeEpFUN19kvF8IGmJlGIMb0nDks5qmDtpgaJpZM4Jx7f_\n> .\n Ok. Thanks a lot.\n\nIn the next days I will restart to work with your chatterbot.\n\nA.\n\nIl 10/Set/2016 14:47, \"Gunther Cox\" notifications@github.com ha scritto:\n\n> I'm going to close this as I believe it is a non-issue. Feel free to\n> re-open the ticket if I've missed something.\n> \n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/270#issuecomment-246109900,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AUYRmQg7WMALH6htIE8jqBQENbhhWNCBks5qoqb9gaJpZM4Jx7f_\n> .\n  If you input a char like \"\u00e9\" or \"\u00e3\" with terminalAdapter, in log method str.format(), if no unicode .format(() raise a error.\n\nTo reproduce, just clone master, and run with IN/OUT using TerminalAdapter.\n\nThanks\n  \u2026sponse , and setting to lower case fuzz.ratio, sometimes the is not close enough to the right answer (my point of view).\n  I am building own approximate sentence matching logic adapter which uses Jaccard index. I create it under /usr/local/lib/python3.5/dist-packages/chatterbot/adapters/logic/logic_Adapter.py. It shows me error like this.\n\n```\n   confidence, response = self.logic.process(input_statement)\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/adapters/logic/multi_adapter.py\", line 27, in process\n    confidence, output = adapter.process(statement)\nTypeError: 'NoneType' object is not iterable\n```\n\nMy Source code is .\n\n```\n# Imports\nimport nltk.corpus\nimport nltk.tokenize.punkt\nimport nltk.stem.snowball\nfrom nltk.corpus import wordnet\nimport string\nfrom chatterbot.adapters import Adapter\n\nclass LogicAdapter(Adapter):\n    \"\"\"\n    This is an abstract class that represents the interface\n    that all logic adapters should implement.\n    \"\"\"\n\n    def can_process(self, statement):\n        \"\"\"\n        A preliminary check that is called to determine if a\n        logic adapter can process a given statement. By default,\n        this method returns true but it can be overridden in\n        child classes as needed.\n        \"\"\"\n        return True\n\n    def process(self, statement):\n        # \"\"\"\n        # Method that takes an input statement and returns\n        # a confidence value and a statement as output.\n        # \"\"\"\n\n        # raise self.AdapterMethodNotImplementedError()\n        # Get default English stopwords and extend with punctuation\n        stopwords = nltk.corpus.stopwords.words('english')\n        stopwords.extend(string.punctuation)\n        stopwords.append('')\n\n        def get_wordnet_pos(pos_tag):\n            if pos_tag[1].startswith('J'):\n                return (pos_tag[0], wordnet.ADJ)\n            elif pos_tag[1].startswith('V'):\n                return (pos_tag[0], wordnet.VERB)\n            elif pos_tag[1].startswith('N'):\n                return (pos_tag[0], wordnet.NOUN)\n            elif pos_tag[1].startswith('R'):\n                return (pos_tag[0], wordnet.ADV)\n            else:\n                return (pos_tag[0], wordnet.NOUN)\n\n        # Create tokenizer and stemmer\n        # tokenizer = nltk.tokenize.word_tokenize()\n        lemmatizer = nltk.stem.wordnet.WordNetLemmatizer()\n\n        def is_ci_lemma_stopword_set_match(a, b, threshold=0.5):\n            \"\"\"Check if a and b are matches.\"\"\"\n            pos_a = map(get_wordnet_pos, nltk.pos_tag(tokenizer.nltk.tokenize.word_tokenize(a)))\n            pos_b = map(get_wordnet_pos, nltk.pos_tag(tokenizer.nltk.tokenize.word_tokenize(b)))\n            lemmae_a = [lemmatizer.lemmatize(token.lower().strip(string.punctuation), pos) for token, pos in pos_a \\\n                            if pos == wordnet.NOUN and token.lower().strip(string.punctuation) not in stopwords]\n            lemmae_b = [lemmatizer.lemmatize(token.lower().strip(string.punctuation), pos) for token, pos in pos_b \\\n                            if pos == wordnet.NOUN and token.lower().strip(string.punctuation) not in stopwords]\n\n            # Calculate Jaccard similarity\n            ratio = len(set(lemmae_a).intersection(lemmae_b)) / float(len(set(lemmae_a).union(lemmae_b)))\n            return (ratio >= threshold)\n        def get(self, input_statement):\n            \"\"\"\n            Takes a statement string and a list of statement strings.\n            Returns the approximate matching statement from the list.\n            \"\"\"\n            statement_list = self.context.storage.get_response_statements()\n            print(statement_list)\n            if not statement_list:\n                if self.has_storage_context:\n                    # Use a randomly picked statement\n                    self.logger.info(\n                        u'No statements have known responses. ' +\n                        u'Choosing a random response to return.'\n                        )\n                    return 0, self.context.storage.get_random()\n                else:\n                    raise self.EmptyDatasetException()\n\n            confidence = -1\n            closest_match = input_statement\n            # Find the closest matching known statement\n            for statement in statement_list:\n                print(\"statement\", statement.text);\n                # ratio = fuzz.ratio(input_statement.text, statement.text)\n                ratio = is_ci_lemma_stopword_set_match(input_statement.text, statement.text)\n                if ratio > confidence:\n                    confidence = ratio\n                    closest_match = statement\n                    # Convert the confidence integer to a percent\n                confidence /= 100.0\n                return confidence, closest_match\n\n    class EmptyDatasetException(Exception):\n\n        def __init__(self, value=\"An empty set was received when at least one statement was expected.\"):\n            self.value = value\n\n        def __str__(self):\n            return repr(self.value)\n\n```\n Thank you @gunthercox  well i have workout much and change something \n\n```\n# -*- coding: utf-8 -*-\nfrom .base_match import BaseMatchAdapter\nfrom fuzzywuzzy import fuzz\nimport nltk.corpus\nimport nltk.tokenize.punkt\nimport nltk.stem.snowball\nfrom nltk.corpus import wordnet\nimport string\nclass ApproximateSentenceMatchAdapter(BaseMatchAdapter):\n    \"\"\"\n    The Jaccard index is composed of a numerator and denominator.\n    In the numerator, we count the number of items that are shared between the sets.\n    In the denominator, we count the total number of items across both sets.\n    In our example  our intersection is {cat, hungry}, which has count of two.\n    The union of the sets is {young, cat, very, hungry}, which has a count of four.\n    Therefore, our Jaccard similarity index is two divided by four, or 50%.\n    Given our threshold above, we would consider this to be  a match\n    \"\"\"\n    def __init__(self, **kwargs):\n        super(ApproximateSentenceMatchAdapter, self).__init__(**kwargs)\n        # self.is_ci_lemma_stopword_set_match()\n        # self.get_wordnet_pos()\n        # Get default English stopwords and extend with punctuation\n        self.stopwords = nltk.corpus.stopwords.words('english')\n        self.stopwords.extend(string.punctuation)\n        self.stopwords.append('')\n        self.lemmatizer = nltk.stem.wordnet.WordNetLemmatizer()\n\n    def get_wordnet_pos(self, pos_tag):\n        if pos_tag[1].startswith('J'):\n            return (pos_tag[0], wordnet.ADJ)\n        elif pos_tag[1].startswith('V'):\n            return (pos_tag[0], wordnet.VERB)\n        elif pos_tag[1].startswith('N'):\n            return (pos_tag[0], wordnet.NOUN)\n        elif pos_tag[1].startswith('R'):\n            return (pos_tag[0], wordnet.ADV)\n        else:\n            return (pos_tag[0], wordnet.NOUN)\n\n    def is_ci_lemma_stopword_set_match(self,a, b, threshold=0.5):\n        \"\"\"Check if a and b are matches.\"\"\"\n        print(\"ask\",a)\n        ratio = 0\n        pos_a = map(self.get_wordnet_pos, nltk.pos_tag(nltk.tokenize.word_tokenize(a)))\n        pos_b = map(self.get_wordnet_pos, nltk.pos_tag(nltk.tokenize.word_tokenize(b)))\n        lemmae_a = [self.lemmatizer.lemmatize(token.lower().strip(string.punctuation), pos) for token, pos in pos_a \\\n                        if pos == wordnet.NOUN and token.lower().strip(string.punctuation) not in self.stopwords]\n        lemmae_b = [self.lemmatizer.lemmatize(token.lower().strip(string.punctuation), pos) for token, pos in pos_b \\\n                        if pos == wordnet.NOUN and token.lower().strip(string.punctuation) not in self.stopwords]\n\n        # Calculate Jaccard similarity\n        try:\n            ratio = len(set(lemmae_a).intersection(lemmae_b)) / float(len(set(lemmae_a).union(lemmae_b)))\n        except Exception as e:\n            print(\"Error\", e)\n        return (ratio >= threshold)\n\n    def get(self, input_statement):\n        \"\"\"\n        Takes a statement string and a list of statement strings.\n        Returns the closest matching statement from the list.\n        \"\"\"\n        statement_list = self.context.storage.get_response_statements()\n\n        if not statement_list:\n            if self.has_storage_context:\n                # Use a randomly picked statement\n                return 0, self.context.storage.get_random()\n            else:\n                raise self.EmptyDatasetException()\n\n        confidence = -1\n        closest_match = input_statement\n\n        # Find the closest matching known statement\n        for statement in statement_list:\n            ratio = self.is_ci_lemma_stopword_set_match(input_statement.text, statement.text)\n            if ratio:\n                confidence =87\n                closest_match = statement\n        '''\n        closest_match, confidence = process.extractOne(\n            input_statement.text,\n            text_of_all_statements\n        )\n        '''\n\n        # Convert the confidence integer to a percent\n        confidence /= 100.0\n        if closest_match == input_statement:\n            closest_match.text = \"We couldn't find that answer in our knowledge base.Try other\"\n        return confidence, closest_match\n\n```\n\nI can't use the closest match adapter because if the sentence contains **How are you doing ?**  and **How you doing ?** It returns same result so i used this one .\n well i implement the jaccard index logic , i found it to have better performance . I have made a pull request  you can have a look [https://github.com/gunthercox/ChatterBot/pull/272](url) @gunthercox  please check this pull request .\n  See #262 for details.  Small patch to pass through extra_data from the original input statement.  This is useful for knowing where/how to respond, who asked the original question, etc.\n  Not sure if there is a bug or intended, but in chatterbot.py, the following code implies that any extra_data that comes in on a statement that is _also_ on an existing statement loses the extra_data of the input statement.  In my case, I have an input adapter for Slack and I'm adding things like the user id and the channel the question came from, but I also have some training data and the extra info is being dropped.  \n\nhttps://github.com/gunthercox/ChatterBot/blob/master/chatterbot/chatterbot.py#L136\n\nI think the extra_data should be propagated to the statement.\n  ```\nTraceback (most recent call last):\n  File \"./run.py\", line 8, in <module>\n    read_only=True)\n  File \"/home/nikhil/PycharmProjects/chatterbot/lib/python3.3/site-packages/chatterbot/chatterbot.py\", line 51, in __init__\n    self.storage = StorageAdapterClass(**kwargs)\n  File \"/home/nikhil/PycharmProjects/chatterbot/lib/python3.3/site-packages/chatterbot/adapters/storage/mongodb.py\", line 32, in __init__\n    self.statements.create_index('text', unique=True)\n  File \"/home/nikhil/PycharmProjects/chatterbot/lib/python3.3/site-packages/pymongo/collection.py\", line 1387, in create_index\n    self.__create_index(keys, kwargs)\n  File \"/home/nikhil/PycharmProjects/chatterbot/lib/python3.3/site-packages/pymongo/collection.py\", line 1298, in __create_index\n    sock_info, cmd, read_preference=ReadPreference.PRIMARY)\n  File \"/home/nikhil/PycharmProjects/chatterbot/lib/python3.3/site-packages/pymongo/collection.py\", line 208, in _command\n    read_concern=read_concern)\n  File \"/home/nikhil/PycharmProjects/chatterbot/lib/python3.3/site-packages/pymongo/pool.py\", line 239, in command\n    read_concern)\n  File \"/home/nikhil/PycharmProjects/chatterbot/lib/python3.3/site-packages/pymongo/network.py\", line 102, in command\n    helpers._check_command_response(response_doc, None, allowable_errors)\n  File \"/home/nikhil/PycharmProjects/chatterbot/lib/python3.3/site-packages/pymongo/helpers.py\", line 205, in _check_command_response\n    raise OperationFailure(msg % errmsg, code, response)\npymongo.errors.OperationFailure: WiredTigerIndex::insert: key too large to index, failing  1132 { : \"First of all, basement sales like tonight aren't gonna last much longer.  It's too risky, one, and two, everything's going on the internet.  Anyone wi...\" }\n```\n\nLong sentences causing error.\n @nikhil-pandey Exactly what code you executed which resulted that error ?\n @navyad I was training the bot. It happens when there are long sentences that exceed the mongodb's index limit.\n Happened with me too. I had to split long replies, only taking first sentence or discarding it if it's too long, but it's still a bad solution imho\n  Is there a way to only learn based on conversations that are marked?  I'm integrating Chatterbot with a bot I'm building for Slack and I want to use \"Slack reactions\" as a way of giving feedback to the bot as to the correctness of the conversation.  I know there is a \"read only\" mode, but this is slightly different.\n\nThanks for the great tool!\n @gunthercox yeah, I'd like that.  Given conversations aren't threaded in Slack, I'm doing some additional work to try to correlate the questions I'm trying to answer and the responses from the chatterbot.  \n\nFWIW, I don't think my use case is straight up \"chat\".  It's more like Q&A bot where I eventually only want to learn and answer specific questions/interactions.  You can see my _total_ work in progress at https://github.com/gsingers/rtfmbot.  That being said, in about 2 hours of work, thanks to this tool, I'm able to get somewhat decent results. YMMV.\n BTW, @gunthercox I reworked to make the slack connectors use Input/OutputAdapters, if you want, I can make a Pull Request to fold them in upstream.\n @gsingers , this is exactly what I was looking for. :) Are you using Slack RTM ?\n @gunthercox I'll try to get a PR up soon.  @davizucon see the link above to RTFMbot.\n\n@gunthercox I've looked through the code, not sure I see where the training is happening.  Can you point me at it?\n    I am pretty new to coding in Python, even at Github is new to me.\n\nDoes anyone know if there is a adapter for orientDB?  How can I implement this?\n I believe there is not orientDB adapter, by the way, OrientDB looks awesome! To implement you should take a look at chatterbot.adapters.storage.JsonFileStorageAdapter as a example.\n I can come up with many reasons to have a OrientDB adapter.\nI better figure out how to do this...seems like this could worth the effort. I will start looking on how JsonFileStorageAdapter works. \nI am new to Python so it may take a while....but worth the effort.  Any advice or insight would be appreciated! Thanks!\n Hi @Craz3Coyote, I'm now work on integration with SQLAlchemy, instead of specific DB, the main reason have SQLAlchemy dependency is to be database agnostic. BUT OrientDB have a very specific API so, like mongoDB, must have its own  Adapter. Maybe we can made this effort together, @gunthercox, have any IRC or Slack channel ?\n @gunthercox  great !!! Can  add my github mail to the team ?\n @davizucon  I think together we can probably get it done... just a reminder I am very new to Python and even githhub.  I came from Borland Pascall an C++, I used to write real time day trading apps based on satellite many years ago. I decided to get up to speed with python by using this project as I have a lot of time on my hands. I am a disabled retired U.S. Navy.  So, if you can bear with me getting up to speed... I am more then willing to spend my time on Gunthercox awesome work and help.\n @Craz3Coyote, Sure! we all learning here, don't worry about speed, the constant help is more important.\n\n@gunthercox You are right. No problem, but I made a bot using slack [Add Bot To Slack](https://slack.com/oauth/authorize?scope=incoming-webhook,commands,bot&client_id=5002663685.73478346871)  now its off line. But will be on-line soon. Would be great letting this bot be tested by us.\n Sounds good to me... I will start putting effort in orientDB and then I'm planning on filling it with data.  I'm currently adding dragonfly connected to nuance speech to ChatterBot.\n What API should I go with? Tinkerpop?\n Hi @Craz3Coyote , I think Tinkerpop is written in Java, I dunno if Tinkerpop act as server or as client library embed in. \nIf Tinkerpop running as a server, I think the effort writing to Tinkerpop or OrientDB will be the same, it`s just a matter of knowing API calls for both.\n\nI believe if you write an adapter, especific for OrientDB, then you will be more familiar with chatterbot structure and writing for Tinkerpop should be straightforward. Sorry I dnt know well how Tinkerpop works.\n\nBest\n  Fix arguments (+input_statement, statement_list) for most_frequent_response , and setting to lower case fuzz.ratio, sometimes the is not close enough to the right answer (my point of view).\n Hello, @gunthercox \nSure, and sorry, already fixed here, I`ll submit again soon.\n  Hi, \n\nI down know if is new, but str.format(input_statement.text), have problems with accents chars.\nI think the problem occurs only in TerminalAdapter,\n\nThanks,\nDavi\n Hi @gunthercox , If you input a char like \"\u00e9\" or \"\u00e3\" with terminalAdapter, in log method it uses str.format(), if no unicode .format(() raise a error.\n\nTo reproduce, just clone master, and run with IN/OUT using TerminalAdapter.\n\nThanks,\nDavi\n  @gunthercox , I'll submit this fix again, there is a lot code changes here, I'll clean up.\n  Hi,\n\n  If I choose most_frequent_response, chatterbot/adapters/logic/mixins.py:16 pass only one argument, but get_most_frequent_response() expect 3.\n\nThanks,\nDavi\n Could you elaborate your issue a bit more? If you instantiate a TieBreaking class, and call get_most_frequent_response(), the method expects 2 arguments, not 3. However, I don't see \"most_frequent_response\" method in the TieBreaking class. Where are you calling it? \n Hi, \nSorry about that, \nI`m setting:\nchatbot = ChatBot(\n...\ntie_breaking_method=\"most_frequent_response\"\n...\n)\nI created a pull request, #256 , see if its ok for you.\n\nThanks!\n It's alright. I'm still new to this project, and learning about how this all works. \nBy the way, do you know if this project has any IRC channel, or any communication mean to reach out to the contributors?\n @slin17,  I`m new too. Great question, IRC or Slack are very straightforward. We should ask to\n@gunthercox if there is any. \n Hello @gunthercox , is there like a IRC channel or Slack for this project? \nThanks.\n  ```\n    count = self.count()\n    random_integer = randint(0, count - 1)    #2\n    if self.count() < 1:\n        raise self.EmptyDatabaseException()\n```\n\nif count is less than 1, then #2 will result in valueError\n\n```\nIn [5]: count  = 0\nIn [6]: random.randint(0, count-1)\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n<ipython-input-6-ab1e1b11223b> in <module>()\n----> 1 random.randint(0, count-1)\n\n/usr/lib/python2.7/random.pyc in randint(self, a, b)\n    240         \"\"\"\n    241 \n--> 242         return self.randrange(a, b+1)\n    243 \n    244     def _randbelow(self, n, _log=_log, _int=int, _maxwidth=1L<<BPF,\n\n/usr/lib/python2.7/random.pyc in randrange(self, start, stop, step, _int, _maxwidth)\n    216             return _int(istart + _int(self.random()*width))\n    217         if step == 1:\n--> 218             raise ValueError, \"empty range for randrange() (%d,%d, %d)\" % (istart, istop, width)\n    219 \n    220         # Non-unit step argument supplied.\n\nValueError: empty range for randrange() (0,0, 0)\n```\n\nsame  error  with all values less than 1  e.g. `count=-1`\n  I have created a [simple Flask app using ChatterBot](https://github.com/chamkank/flask-chatterbot) that would be a great starter template for anyone who uses Flask instead of Django. So I thought it might be helpful to leave a link to it alongside the Django example in the readme.\n\nI will also add 2 more patches for the other readme files (in different languages) if this patch is accepted.\n  Hi,\n   There is a missing \",\" in file , chatterbot/corpus/data/Portuguese/linguisticKnowledge_pt-BR.json 14:34\n\nThanks\n  Closes #168\n @gunthercox sure.\n  minor typo\n   @gunthercox I would like to work in this, if somebody is not already working on it.\n @gunthercox Thanks.\n @navyad Any news? I see the sqlite fork, but it still says wip. Any eta? :) Just curious.\n @Nixellion ,  development is going on [here](https://github.com/davizucon/ChatterBot/tree/sqlalchemy-adapter). @davizucon  has taken over this issue.\n thanks for info\n Hi @Nixellion, thanks for asking, by the way, the storage adapter using SQLalchemy. There is a few tests not passing, when everything ok I'll make a PR, for beta. Feel free to ask and suggestions. \n Nice to see this integrated ASAP @davizucon I see \"All testes passing\" commit message. What about pull request? Hi @rajasimon, Yes but I don't fell confidence enough to delivery. I`ll need to do some more tests against others databases (SQLite (default and done) , MySQL (in progress) and PostgreSQL(in progress)) to see if there is any issue.\r\n\r\nBy the way, what you think:\r\n\r\nAll parameters are optional, except storage_adapter\r\n\r\nchatbot = ChatBot( ....\r\n\r\n- **storage_adapter**=\"chatterbot.storage.SQLAlchemyDatabaseAdapter\",\r\n- **database_uri**=\"sqlite:///database_test.db\", # use database_uri or database, database_uri can be especified to choose database driver \r\n- **database**=\"database_test\", # use for sqlite database. Ignored if database_uri especified .\r\n- **read_only**=False,  # Readonly database, Default: False\r\n- **drop_create**=True  # To recreate database every start read_olny must be False, Default: False\r\n Hi @davizucon, Thanks for the reply and I tried your code. Anyway here is my thought on the first run...\r\n\r\n- Can you make sure `chatterbot.storage.SQLAlchemyDatabaseAdapter`\r\n- And in `sqlalchemy.py` why you hideout (34 and 52 line) ? Also I don't think you don't need `primary_key=True` in text. Just `id = Column(Integer, primary_key=True)` is enough. \r\n\r\nAnd I don't see any other running issues now. If anything comes up I will let you know. Hi @rajasimon , thanks for addition ! \r\n\r\nI'll check out primary_key and run the tests with the change. \r\n\r\nOk ok, I'll make a PR for gunthercox/master, I'll suggest for this feature remains in alpha stage, until we make appropriate documentation and further tests.\r\n Hi @gunthercox , I see. Sorry for delay to delivery, tough days.\r\n\r\nI have based these tables on the actual JSON structure and I believe in the near future, maybe in the next PR, I will change table design. So keep training data somewhere that you can enter again.\r\n**added**: SQLite is easy to enter data because ANSI SQL is kind of standard and easily manipulated \r\n\r\nBy the way, there is another approach and can be developed in parallel with SQLite, **tinydb**, \r\n\"is a lightweight document oriented database optimized\", imo have more glue with actual JSON. What you think @gunthercox, @rajasimon, If you think that can bring performance and search flexibility (that REALLY matters), let's start another issue/thread, them we can contribute.\r\n\r\n there is any way to see exemple using sqlalchemy ?\r\n Thank you to everyone who has contributed to the creation of the SQL Storage adapter!  ```\nJSONDecodeError                           Traceback (most recent call last)\n<ipython-input-5-0eb17eae3967> in <module>()\n----> 1 chatbot.train(\"chatterbot.corpus.french\")\n\n/home/vince/workspace/test/env/lib/python3.5/site-packages/chatterbot/trainers.py in train(self, *corpora)\n     48 \n     49         for corpus in corpora:\n---> 50             corpus_data = self.corpus.load_corpus(corpus)\n     51             for data in corpus_data:\n     52                 for pair in data:\n\n/home/vince/workspace/test/env/lib/python3.5/site-packages/chatterbot/corpus/corpus.py in load_corpus(self, dotted_path)\n     63 \n     64         for file_path in data_file_paths:\n---> 65             corpus = self.read_corpus(file_path)\n     66 \n     67             for key in list(corpus.keys()):\n\n/home/vince/workspace/test/env/lib/python3.5/site-packages/chatterbot/corpus/corpus.py in read_corpus(self, file_name)\n     32 \n     33         with io.open(file_name, encoding='utf-8') as data_file:\n---> 34             data = json.load(data_file)\n     35         return data\n     36 \n\n/usr/lib/python3.5/json/__init__.py in load(fp, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)\n    266         cls=cls, object_hook=object_hook,\n    267         parse_float=parse_float, parse_int=parse_int,\n--> 268         parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)\n    269 \n    270 \n\n/usr/lib/python3.5/json/__init__.py in loads(s, encoding, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)\n    317             parse_int is None and parse_float is None and\n    318             parse_constant is None and object_pairs_hook is None and not kw):\n--> 319         return _default_decoder.decode(s)\n    320     if cls is None:\n    321         cls = JSONDecoder\n\n/usr/lib/python3.5/json/decoder.py in decode(self, s, _w)\n    337 \n    338         \"\"\"\n--> 339         obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n    340         end = _w(s, end).end()\n    341         if end != len(s):\n\n/usr/lib/python3.5/json/decoder.py in raw_decode(self, s, idx)\n    355             obj, end = self.scan_once(s, idx)\n    356         except StopIteration as err:\n--> 357             raise JSONDecodeError(\"Expecting value\", s, err.value) from None\n    358         return obj, end\n\nJSONDecodeError: Expecting value: line 1 column 1 (char 0)\n```\n It should be related with your json file formatting. Can you try validate with [jsonlint](http://jsonlint.com).\n thank you for the quick fix\n  Traceback (most recent call last):\n  File \"/home/local/ALTERDATA/erick.cirrus/Desenvolvimento/web/karoo/scripts/chatterbot/train_terminal_karoo.py\", line 75, in <module>\n    bot.train(conversacao)\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/trainers.py\", line 41, in train\n    self.storage.update(statement)\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/adapters/storage/mongodb.py\", line 148, in update\n    self.statements.bulk_write(operations, ordered=False)\n  File \"/usr/local/lib/python2.7/dist-packages/pymongo/collection.py\", line 435, in bulk_write\n    bulk_api_result = blk.execute(self.write_concern.document)\n  File \"/usr/local/lib/python2.7/dist-packages/pymongo/bulk.py\", line 470, in execute\n    return self.execute_command(sock_info, generator, write_concern)\n  File \"/usr/local/lib/python2.7/dist-packages/pymongo/bulk.py\", line 314, in execute_command\n    raise BulkWriteError(full_result)\npymongo.errors.BulkWriteError: batch op errors occurred\n I get the same error. I'm feeding bot.train(). Here is my code.\n\n``` python\n    def vk_train(self):\n        global chatbot\n        conversations = []  # list of final conversations\n\n        # first we need to parse vk_comments.txt file\n        print(\"// Reading file\")\n        with open('vk_comments.txt', 'r', encoding='utf-8') as datafile:\n            vk_comments = datafile.read()\n\n        print(\"// Parsing file\")\n        vk_dialogues = vk_comments.split(\"{NEW_CONVERSATION}\\n\")\n        for dialog in vk_dialogues:\n            messages = dialog.split(\"{NEXT}\\n\")\n            filtered_messages = []\n            for message in messages:\n                if \"\\n\" in message:\n                    message = message.replace(\"\\n\", \"\")\n                if message != \"\" and message != \" \":\n                    filtered_messages.append(message.lower())\n            conversations.append(filtered_messages)\n\n        print(\"// Learning from file\")\n        for conv in conversations:\n            chatbot.train(conv)\n```\n\nSo I have this huge file, which is just a text file where I downloaded... i'm not sure, thousands of facebook (vk.com) comments, and trying to use it to train the bot. I'm splitting the file by tags ({NEW_CONVERSATION} and {NEXT}) into a bunch of lists, and then feed each conversation one by one to the bot.train.\n\nRight now I think that maybe I need to wait between chatbot.train calls... Or somehow change this particular logic, hm..\n\nIt works for smaller files though\n ``` python\nprint(\"// Learning from file.\", len(conversations), \"conversations\")\nconversations_count = len(conversations)\nfor i, conv in enumerate(conversations):\n    print (i, \"out of\", conversations_count)\n    chatbot.train(conv)\n    time.sleep(1)\n```\n\nUsing this code it does this:\n\n```\n<...>\n69 out of 770\n70 out of 770\nTraceback (most recent call last):\n  File \"D:/Projects/Python/HomeAI/homeAI.py\", line 278, in run\n    self.vk_train()\n  File \"D:/Projects/Python/HomeAI/homeAI.py\", line 336, in vk_train\n    chatbot.train(conv)\n  File \"D:\\Projects\\Python\\HomeAI\\chatterbot\\trainers.py\", line 41, in train\n    self.storage.update(statement)\n  File \"D:\\Projects\\Python\\HomeAI\\chatterbot\\adapters\\storage\\mongodb.py\", line 148, in update\n    self.statements.bulk_write(operations, ordered=False)\n  File \"C:\\Python34\\lib\\site-packages\\pymongo\\collection.py\", line 435, in bulk_write\n    bulk_api_result = blk.execute(self.write_concern.document)\n  File \"C:\\Python34\\lib\\site-packages\\pymongo\\bulk.py\", line 470, in execute\n    return self.execute_command(sock_info, generator, write_concern)\n  File \"C:\\Python34\\lib\\site-packages\\pymongo\\bulk.py\", line 314, in execute_command\n    raise BulkWriteError(full_result)\npymongo.errors.BulkWriteError: batch op errors occurred\n```\n\nAnd no matter what wait i set, it's always at 70.\n\nChecked what it is, it is just a very long conversation. All other conversations are from 0 to 20-ish phrases. This one is 91. Will try to limit maximum number of phrases in conversation to 25while parsing the file and see how that works.\n\nEDIT:\nAfter limiting it to 25 maximum phrases in conversation, it went up to 114 messages, but then threw the same error again. 114'th conversation was just 11 phrase long, and before it there were 15 and 20.\n Hm, thats weird. It seems that this appears on my windows desktop. but it does not on a Raspberry Pi 3. Either it's something to do with windows\\linux, or maybe it's just that PC writes to the database to quickly, and it fails? This would be weird...\n I've had a similar problem.\n\nTraceback (most recent call last):\n  File \"/Users/chenjun/git/AI_ChatterBot/chatterBot/examples/terminal_mongo_example.py\", line 28, in <module>\n    bot.train(\"chatterbot.corpus.sports\")\n  File \"/Users/chenjun/git/AI_ChatterBot/chatterBot/chatterbot/trainers.py\", line 80, in train\n    trainer.train(pair)\n  File \"/Users/chenjun/git/AI_ChatterBot/chatterBot/chatterbot/trainers.py\", line 68, in train\n    self.storage.update(statement)\n  File \"/Users/chenjun/git/AI_ChatterBot/chatterBot/chatterbot/adapters/storage/mongodb.py\", line 202, in update\n    self.statements.bulk_write(operations, ordered=False)\n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pymongo/collection.py\", line 435, in bulk_write\n    bulk_api_result = blk.execute(self.write_concern.document)\n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pymongo/bulk.py\", line 470, in execute\n    return self.execute_command(sock_info, generator, write_concern)\n  File \"/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/pymongo/bulk.py\", line 314, in execute_command\n    raise BulkWriteError(full_result)\npymongo.errors.BulkWriteError: batch op errors occurred\n Yeah, ill say it again, that I NEVER saw this issue on Raspberry Pi 3, Raspbian linux os. With exactly same files. It just works there, while on my i7 windows machine it works 100x faster, but throws errors\n I met the same error on my Mac OS....\n  **linguisticKnowledge_pt-BR.json** \nLine 14 missing comma.\n\n**proverbs_pt-BR.json**\nLine 32, \"Minha namorada est. me evitando\" -> \"Minha namorada est\u00e1 me evitando'\nLine 32, needs remove last comma \n  Hi @gunthercox \n\nIf use ClosestMeaningAdapter as logic_adapters, then the output answers will not select from Corpus data answer part. The output shows the exact same as question part, of course, it is the Closest Meaning result. Thanks \n Thank you for asking, Yes ,I created small simplified Chinese data file as attached \n\n[hospitalQA.zip](https://github.com/gunthercox/ChatterBot/files/428071/hospitalQA.zip)\n  Hi @gunthercox \n\nThank you for great work. ChatterBot is in very good quality and easy to use. After used for a while, I found three issues which would like to discuss with you.\n1. After added \"TheIDontKnowAdapter\", about codes below:\n   \n   ```\n   if confidence < 10:\n           return 1, default_response\n   return 0, closest_match\n   ```\n   \n   whether the value of confidence is setting too low? normally,  it is easy to pass default_repsonse and return as closest_match\n2. within \"base_match.py\", the codes are \n   \n   ```\n      if response_list:\n           response = self.break_tie(response_list, self.tie_breaking_method)\n       else:\n           response = self.context.storage.get_random()\n   ```\n   \n   so if response_list is empty, you pick up answer randomly. I changed to \n   \n   ```\n       else:\n           response = self.context.storage.update(closest_match)\n   ```\n   \n   what do you think? is there any better way when response_list is empty?\n3. After re-run for several times, I found the output part can have wrong answer even the answer come from previous question part when there is no related input from corpus data . For every first run, the answer was correct, then after \"database.db\" was built,  program will search even all the records within database, so provided the previous question part to output answer when the  fuzz confidence is higher. \n Thank you for your reply. About point 2, I will discuss with you if I could have some suggestions after study codes further.\n  Hello, I'm trying to create a basic chat bot with voice recognition and tts, I'm trying to teach it Russian, and stumbled upon a problem.\n\nI'm trying to teach it through simple lists, which I stored as json file, here is an example:\n\n`[\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"\u042f \u0418\u0418, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u043f\u0438\u0442\u043e\u043d\u0435.\"\n    ],\n    [\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"\u041c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u043e\u0440\u0430\u043d\u0436\u0435\u0432\u044b\u0439...\"\n    ],\n    [\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"\u0410 \u0412\u044b \u0437\u043d\u0430\u043b\u0438, \u0447\u0442\u043e \u0443 \u0418\u0418 \u043d\u0435\u0442 \u043f\u043e\u043b\u0430?\"\n    ],\n    [\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"\u042f \u0437\u0434\u0435\u0441\u044c, \u0447\u0442\u043e \u0431\u044b \u043f\u043e\u043c\u043e\u0433\u0430\u0442\u044c.\"\n    ],\n    [\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"Exterminate.\"\n    ],\n        [\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"\u042f \u043b\u044e\u0431\u043b\u044e \u0444\u0438\u043e\u043b\u0435\u0442\u043e\u0432\u044b\u0439...\"\n    ],`\n\nI tried it like this, and also tried putting them all into one list, like this:\n\n`[\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"\u042f \u0418\u0418, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u043f\u0438\u0442\u043e\u043d\u0435.\",\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"\u041c\u043d\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u043e\u0440\u0430\u043d\u0436\u0435\u0432\u044b\u0439...\",\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"\u0410 \u0412\u044b \u0437\u043d\u0430\u043b\u0438, \u0447\u0442\u043e \u0443 \u0418\u0418 \u043d\u0435\u0442 \u043f\u043e\u043b\u0430?\",\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"\u042f \u0437\u0434\u0435\u0441\u044c, \u0447\u0442\u043e \u0431\u044b \u043f\u043e\u043c\u043e\u0433\u0430\u0442\u044c.\",\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"Exterminate.\",\n      \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\",\n      \"\u042f \u043b\u044e\u0431\u043b\u044e \u0444\u0438\u043e\u043b\u0435\u0442\u043e\u0432\u044b\u0439...\"\n    ],`\n\nIn both cases, when asked \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435\" (translates as \"Tell me about yourself\"), Chatterbot picks one of the answers, and keeps using this one particular answer, and then always uses it when asked \"Tell me about yourself\", until I restart the process... Do I need to somehow reset AI after each conversation? \n\nExtended documentation would really help.\nThanks.\n\nAlso thinking about spending some time and making russian language corpus, if thats interesting.\n Nope, I specifically updated to 3.5 to work with chatterbot and stuff. There are no issues with unicode, I'm using  codecs.open() to read unicode file, and it reads perfectly, and bot uses and recognizes all the phrases, it's just that it does not randomly choose one of the learned answers. It acts the same with english lists, I just did not have english example at hand at the moment.\n\nAnd yeah, otherwise a great chatbot, I love that it can be extended with modules, basically it can grow into fully functional assistant, from what I understand, from what I understand. Thinking about integrating it with Home Assistant in the future.\n I have the same issue in Spanish using python 2.7, i didn't test it with 3.x. In rare occasions it picks another answer.\n Hi, thanks. Here''s what I've got:\n\n``````\nINFO:chatterbot.chatterbot:\"\u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435\" is a known statement\nINFO:chatterbot.adapters.adapter:<class 'chatterbot.adapters.logic.no_knowledge_adapter.NoKnowledgeAdapter'> selected \"\u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435\" as a response with a confidence of 0\nINFO:chatterbot.adapters.adapter:<class 'chatterbot.adapters.logic.time_adapter.TimeLogicAdapter'> selected \"The current time is 12:39 AM\" as a response with a confidence of 0\nINFO:chatterbot.adapters.adapter:Using \"\u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435\" as a close match to \"\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438 \u043e \u0441\u0435\u0431\u0435.\"\nINFO:chatterbot.adapters.adapter:Breaking tie between 6 optimal responses.\nINFO:chatterbot.adapters.logic.mixins:Selecting first response from list of 6 options.\nINFO:chatterbot.adapters.adapter:Tie broken. Using \"Exterminate.\"\nINFO:chatterbot.adapters.adapter:<class 'chatterbot.adapters.logic.closest_match.ClosestMatchAdapter'> selected \"Exterminate.\" as a response with a confidence of 0.97\nINFO:chatterbot.chatterbot:Selecting \"Exterminate.\" as response with a confidence of 0.97```\n``````\n\nSo it says that it's selecting the first responce, while it should probably select random? \nI guess I should set it to random_response, from what I see in that code... Is that anywhere in documentation? Did not find it\n Change the bit in base_match.py to:\n\n```\n        self.tie_breaking_method = kwargs.get(\n            \"tie_breaking_method\",\n            \"random_response\"\n        )\n\n```\n\nnow it selects random responses. But I guess it's not the correct way to set it, right?\n Thanks, yeah, did not see that before in the docs.\n\nAnd sounds great, some contextual responses should be great.\nAlso some documentation on how to add some functional adapters, things that actually do stuff like play music, google something or check your mail. Right now I did a few, and they do stuff within adapter itself, after checking if they can process the input, but I'm not sure if thats the correct approach either.\n @gunthercox this link you posted is dead: http://chatterbot.readthedocs.io/en/latest/adapters/tie_breaking_method_mixins.html \r\nIs that how you would currently get a random response? In my corpus I have some of the same questions posted multiple times, yet each question gets the same default answer for it each time.  \r\n\r\n\r\n```\r\n# -*- coding: utf-8 -*-\r\nfrom chatterbot import ChatBot\r\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\r\n\r\n# Create a new chat bot named Charlie\r\n\r\nchatterbot = ChatBot(\"Charlie\",\r\n    #database='CommentDatabase.json',\r\n    tie_breaking_method=\"random_response\",\r\n    storage_adapter='chatterbot.storage.MongoDatabaseAdapter',\r\n    logic_adapters=[    \r\n        {\r\n            'import_path': 'chatterbot.logic.BestMatch'\r\n        },\r\n        {\r\n            'import_path': 'chatterbot.logic.LowConfidenceAdapter',\r\n            'threshold': 0.70,\r\n            'default_response': 'OhNo'\r\n        }\r\n        ],\r\n        database='list_trainer'\r\n    )\r\nchatterbot.set_trainer(ChatterBotCorpusTrainer)\r\n\r\n\r\nchatterbot.train(\r\n    \"/path/to/favorites.corpus.json\"\r\n)\r\n\r\n# Get a response to the input text 'How are you?'\r\nresponse = chatterbot.get_response(\"what is your favorite movie\")\r\n\r\nprint(response)\r\n``` I think I have it figured out now..\r\n\r\n```\r\nfrom chatterbot.response_selection import get_random_response\r\nchatterbot = ChatBot(\"Charlie\",\r\n    response_selection_method=get_random_response,\r\n```\r\nThose were the only changes I had to make to finally get some varied responses for each given question.   Hello,\nI'm testing the ChatterBotCorpusTraining functionality with the 'greetings' corpus and getting errors.  I'm not sure if I understand fully the concept of machine learning using this library and I can't find enough information to help.  I'm using the code from the docs.   If I use \"None\" as a parameter as listed in the docs:\n   `bot_input = bot.get_response(None)` \nI get an error stating: chatterbot.adapters.input.variable_input_type_adapter.UnrecognizedInputFormatException: \"The type <class 'NoneType'> is not recognized as a valid input type.\"\n\nIf I enter \"text\" as a parameter, I get the bot repeating the same response.  Here is the code:\n\n``` python\nfrom chatterbot import ChatBot\nfrom chatterbot.training.trainers import ChatterBotCorpusTrainer\n\n# create a new instance of a chatbot\nbot = ChatBot(\"greetings\",\n              storage_adapter=\"chatterbot.adapters.storage.JsonDatabaseAdapter\",\n              logic_adapters=[\"chatterbot.adapters.logic.ClosestMatchAdapter\"],\n              input_adapter=\"chatterbot.adapters.input.VariableInputTypeAdapter\",\n              output_adapter=\"chatterbot.adapters.output.OutputFormatAdapter\",\n              output_format = 'text',\n              database=\"../database.db\"\n              )\n\n# set up machine learning training\n\nbot.set_trainer(ChatterBotCorpusTrainer)\nbot.train(\"chatterbot.corpus.english.greetings\")\n\nprint(input('Welcome, I\\'m the Response Bot, how are you today?\\n'))\n\nwhile True:\n    try:\n        bot_input = bot.get_response(None)\n        print(bot_input)\n    # Press ctrl-c or ctrl-d on the keyboard to exit\n    except (KeyboardInterrupt, EOFError, SystemExit):\n        break\n```\n\nThanks for your help.\n Thanks gunthercox.  Its working now.  Now if I wanted to have an action performed like calling a function, would I need to create an adapter for that, say if I wanted a window opened based on a request?\n  since there are lots of movies, use the movie subtitle as the training data set will improve accuracy and usability.\n and also Quora and Stackoverflow has lots of conversation data.\n  HI @gunthercox \n\nhow do I know how many words did it actually match of the input with the statement? i tried to look into the closest_meaning but couldn't find with how many word is it matching.\n  Hi,\nI'm a freshman to chatterbot. I have read the code and docs. It's really a great job. \n\nBut I have a question. Why does the json database store a statement as a key, and its previous statement as the value (`in_response_to.text`)? I think an alternative way is to store a statement's responses as  the value. To be more specific, I want to show an example.\n\nA conversation:\n\n```\n[\n     \"How are you doing?\"\n     \"I am doing well, how about you?\"\n     \"I am also good.\"\n]\n```\n\nExisting json data storage:\n\n```\n{\n     \"text\": \"I am doing well, how about you?\"\n     \u201cin_response_to\u201d: [{\"text\": \"How are you doing?\" }]\n}\n```\n\nAn alternative way:\n\n```\n{\n     \"text\": \"I am doing well, how about you?\"\n     \u201cresponses\u201d: [{\"text\": \"I am also good. \" }]\n}\n```\n\nI ask this question because I find, when the training scale is 2000+ , the response time for a query statement is too long.  I'm curious whether it might be due to the data storage structure. Using existing data storage, each time to get a response, all statements with responses are filtered out (`StorageAdapter.get_response_statements()`) and a statement closest to the query statement is matched. Then, again, we have to traverse all statements' in_response_to value and find the closest statement's response. So, there are three procedures to traverse all statements in the json database. \nIn contrast, if we adopt the other storage method, we only traverse all statements to find a statement closest to the query statement, and give its response. I think this way might reduce the response time. \n\nI wonder whether I understand the workflow correctly. Or, are there any specific reasons we have to use the existing data storage structure?\n\nThanks.\n Thanks.\n   @gunthercox  I like your conversational dialog engine very much \uff0c it is beautiful\n  `/usr/local/lib/python2.7/dist-packages/fuzzywuzzy/fuzz.py:35: UserWarning: Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning\n  warnings.warn('Using slow pure-python SequenceMatcher. Install python-Levenshtein to remove this warning')\n`\nI have read issues with Levenstein. This error often appears on Windows, as I understood. But I use Linux Mint 17.1 . And I have this error too. Can you help with it?\n This appears to be a warning, not an error. So I don't think it's _required_, it's just _highly recommended_.\n Ok. Thank you. Python-Levenshtein can't be installed. Got an error with it, too. I will ignore it until it's not critical. Oh try to fix this later.)\n  Hi guys,\n\nI just add french corpus, can you review the PR and lemme know if there's something to fix :)\n\nPeace.\n @gunthercox sure I will do that when the sun rise, it's 4 am atm :)\n  Hi All,\n\nI'm starting with ChatterBot and so I've followed the doc. - http://chatterbot.readthedocs.io/en/latest/training.html#set-trainer. \n\nUnfortunatelly I failed in very begginig:\n\n``` python\nfrom chatterbot import ChatBot\nfrom chatterbot.training.trainers import ListTrainer\n\nchatterbot = ChatBot(\"Training Example\")\nchatterbot.set_trainer(ListTrainer)\n\nchatterbot.train([\n    \"How are you?\",\n    \"I am good.\",\n    \"That is good to hear.\",\n    \"Thank you\",\n    \"You are welcome.\",\n])\n```\n\nI've got:\n\n``` python\nTraceback (most recent call last):\n  File \"createJson.py\", line 52, in <module>\n    u\"You are welcome.\",\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/chatterbot/training/trainers.py\", line 36, in train\n    self.storage.update(statement)\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/chatterbot/adapters/storage/jsondatabase.py\", line 126, in update\n    self.database.data(key=statement.text, value=data)\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/jsondb/db.py\", line 76, in data\n    self._set_content(key, value)\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/jsondb/db.py\", line 37, in _set_content\n    obj = self._get_content()\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/jsondb/db.py\", line 26, in _get_content\n    obj = read_data(self.path)\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/jsondb/file_writer.py\", line 11, in read_data\n    obj = decode(content)\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/jsondb/compat.py\", line 22, in decode\n    return json_decode(value)\n  File \"/usr/lib/python3.5/json/__init__.py\", line 319, in loads\n    return _default_decoder.decode(s)\n  File \"/usr/lib/python3.5/json/decoder.py\", line 339, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/lib/python3.5/json/decoder.py\", line 355, in raw_decode\n    obj, end = self.scan_once(s, idx)\nRecursionError: maximum recursion depth exceeded while decoding a JSON array from a unicode string\n```\n\nAny help is highly appreciated.\n\nThank you.\n Hey, I did not try it out but you have a typo in your JSON, at the end of your array you have a colon, you should remove it so it looks like:\n\nchatterbot.train([\n\"How are you?\",\n\"I am good.\",\n\"That is good to hear.\",\n\"Thank you\",\n\"You are welcome.\"\n])\n\nPlease let me know if that was helpful\n @mbarisa : I've tried also withou the colon, but the result is the same. Looks like some deep issue in JSON and how it parse or handle string into array. Didn't have time to go to deep.\n\n``` python\n File \"createJson.py\", line 52, in <module>\n    u\"You are welcome.\"\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/chatterbot/training/trainers.py\", line 36, in train\n    self.storage.update(statement)\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/chatterbot/adapters/storage/jsondatabase.py\", line 126, in update\n    self.database.data(key=statement.text, value=data)\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/jsondb/db.py\", line 76, in data\n    self._set_content(key, value)\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/jsondb/db.py\", line 37, in _set_content\n    obj = self._get_content()\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/jsondb/db.py\", line 26, in _get_content\n    obj = read_data(self.path)\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/jsondb/file_writer.py\", line 11, in read_data\n    obj = decode(content)\n  File \"/home/ms/sataData/Progr/python/jarvis/virtualenv/boot/lib/python3.5/site-packages/jsondb/compat.py\", line 22, in decode\n    return json_decode(value)\n  File \"/usr/lib/python3.5/json/__init__.py\", line 319, in loads\n    return _default_decoder.decode(s)\n  File \"/usr/lib/python3.5/json/decoder.py\", line 339, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n  File \"/usr/lib/python3.5/json/decoder.py\", line 355, in raw_decode\n    obj, end = self.scan_once(s, idx)\nRecursionError: maximum recursion depth exceeded while decoding a JSON array from a unicode string\n```\n      Diacritics did not work with Croatian corpus and I think it should help with other languages as well. I am planning to create a pull request for Croatian corpus as well these days.\n  Hi. I'm having problems trying to use the ChatterBot to talk to me in Chinese.\n\nIn the terminal I get:\n\n`/usr/local/lib/python2.7/site-packages/chatterbot/conversation/statement.py:46: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal\n  if response.text == self.in_response_to[index].text:\nType something to begin...`\n\nfor this first case (talk to english and respond in chinese works ok):\n\nHello\n\u4f60\u597d\u3002 \u4f60\u597d\u5417?\n\nbut it doesn't work for talking in chinese to the bot.\n\n\u6211\u5f88\u597d\u4f60\u5462\n\u6211\u5f88\u597d\u4f60\u5462\n\nI also get this error:\n\n`/usr/local/lib/python2.7/site-packages/chatterbot/adapters/logic/closest_match.py:35: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal\n  if input_statement.text in text_of_all_statements:`\n\nThe code of what I'm using:\n\n``` python\n# -*- coding: utf-8 -*-\nfrom chatterbot import ChatBot\nfrom chatterbot.training.trainers import ListTrainer\n\nchatterbot = ChatBot(\"Terminal\",\n    storage_adapter=\"chatterbot.adapters.storage.MongoDatabaseAdapter\",\n    logic_adapters=[\n        \"chatterbot.adapters.logic.ClosestMatchAdapter\"\n    ],\n    input_adapter=\"chatterbot.adapters.input.TerminalAdapter\",\n    output_adapter=\"chatterbot.adapters.output.TerminalAdapter\",\n    database=\"chatterbot-database\"\n)\n\nchatterbot.set_trainer(ListTrainer)\n\nchatterbot.train([\n    \"\u4f60\u597d\u3002 \u4f60\u597d\u5417?\",\n    \"Hello\",\n])\n\nchatterbot.train([\n    \"\u6211\u5f88\u597d\u592a\u611f\u8c22\",\n    \"\u6211\u5f88\u597d\u4f60\u5462\",\n])\n\nprint(\"Type something to begin...\")\n\nwhile True:\n    try:\n        bot_input = chatterbot.get_response(None)\n\n    # Press ctrl-c or ctrl-d on the keyboard to exit\n    except (KeyboardInterrupt, EOFError, SystemExit):\n        break\n```\n\nThanks!\n Hi, I made a pull request you might want to check out, I think that is same issue I encountered with Croatian language, so I just added utf-8 support for corpus. I tried ListTrainer with your dataset, and it seems to work fine. \n\nYou want to check this [pull request](https://github.com/gunthercox/ChatterBot/pull/216)\n I have the same problem with @Nykho ,and I have merged the commit from @mbarisa said,but it still didn't work for me !\n Thanks @gunthercox!\n  Hi there  I have just downloaded the chatterbot.  Just wondering if anyone has developed any additional/bigger training corpus files? Thanks.\n hi antfellow, gunthercox, may you can try the [Ubuntu dialog dataset](https://github.com/rkadlec/ubuntu-ranking-dataset-creator) , it's one of the largest public dialog datasets available, but it's not a chit-chat corpus.\n\nhi @gunthercox , i have a question about the logic of statement. For a query-response pair, you used the response as the text property of the statement class, why not use the query as the text? Using the query as key, for the ClosestMatchAdapter, we can directly get the closest key.\n Hi all,\n\nI have tried to create a larger corpus in my own language. I've succesfully created a conversations.json corpus file. The file itself is ~16MB big. When I tried to to use \n`chatterbot.train(\"chatterbot.corpus.slovak\")` after 30min the import/train will crash with `Number of recursion error`. Anyone experienced this issue?\n Maybe we can try it with hadoop MapReduce @gunthercox  what you say  ? \n Maybe we can use Redis as storage adapter. \n  Ajustes pequenos, mas o T no lugar do B me deu um trabalho pra ver kkk perdi tempo procurando solu\u00e7\u00e3o pro erro que estava sendo gerado, e era erro no c\u00f3digo exemplo.\nEspero que ajude os pr\u00f3ximos.\n  Add indonesian corpus data for ChatterBotCorpusTrainer\n  Does chatterbot maked bots understand the meaning and concept of non English sentences or this are just some marked phrases?\nI mean how this machine learning and AI works in chatterbot? \n  Corre\u00e7\u00f5es ortogr\u00e1ficas m\u00ednimas :)\n  Hi @gunthercox  \nAs the title says, I am wondering how to create my own logic adapter. I know how the default adapters like TimeLogic, MathematicalEvalutaiion work. They are installed in my usr/lib/python~ directory and the only import is \"from chatterbot import ChatBot\". Variable logic_adapters contains  \"chatterbot.adapters.logic.MathematicalEvaluation\" for example. \nIn my project directory I've tried to create a new module with class \"MyLogicAdapter\", just like in the documentation. What should I add to the variable logic_adapters? I've trying to add just \"MyLogicAdapter\" but my IDE throws an error \"ValueError: Empty module name\"\n  Hi @gunthercox \nI see \"context\" in the code, but I don't understand it well. Can you please tell me more about it.\n  when some unknown sentence occurs how to say  \"I Dont Understand, Can you be more Specific?\"\nany method?? code please :)\n Maybe the discussion in issue #204 could get you started?\n There's no way to do that as of now. Even I wanted something similar but couldn't achieve it. The \"no_knowledge_adapter.py\" wasn't of much use either for me.\n\nAnyways, if you figure it out, let me know as well.\n The logics of this program do not permit it to not find a response since it is trying to find the closest possible match to the input. A method for achieving what you are attempting might be to change from using this sort of logics to more of an AIML style program (pyAIML is a good library if you are looking to be programming it in python).\n  Hi @gunthercox ,\nThx for launching such a great project ! \nBut I was wondering which machine learning methods were used for training ChatterBot? I haven't got the answer after reading source codes and docs. Or it seems that ChatterBot is trained by some text matching methods? \nLooking forward to your reply. Thx!\n Thx for ur reply. I'm much clear now :-)\nI'll try ChatterBot myself. Hope further discussion with you :-)\n  Hi\nAs of now chatbot repeats the statement which it can't map to the database. Suppose it doesn't have a mapping for \"Hello\", it would throw back hello in reply as well. What I want to do is, for all the matches it can't find, it should give a default reply like \"not found\" or something. Any help ?\nP.S. I've turned off the learning.\n @gunthercox \nSince there's an option to turn off the learning, I thought this is something that's achievable. Can you at least tell me, how does it give the same response if it can't find the map to it. Let's say there is no map for \"Mercedes\", it returns \"Mercedes\" back, how does it do that ?\n  Hey, after I started using the mongodb storage adapter, I keep getting this error:\n\n```\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.5/dist-packages/discord/ext/commands/bot.py\", line 247, in _run_extra\n    yield from coro(*args, **kwargs)\n  File \"./mods/AI.py\", line 47, in on_message\n    msg = \"**{0}**\\n\".format(message.author.name)+str(chatbot.get_response(message.content))\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/chatterbot.py\", line 149, in get_response\n    self.storage.update(input_statement)\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/adapters/storage/mongodb.py\", line 126, in update\n    data = statement.serialize()\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/conversation/statement.py\", line 80, in serialize\n    data[\"in_response_to\"].append(response.serialize())\n  File \"/usr/local/lib/python3.5/dist-packages/chatterbot/conversation/statement.py\", line 80, in serialize\n    data[\"in_response_to\"].append(response.serialize())\nAttributeError: 'dict' object has no attribute 'serialize'\n```\n I installed 2 weeks ago, I'll try pip upgrade, if nothing I'll update from the repo.\n It seems as I was on the latest version, 0.4.3 but I've went ahead and uninstalled pip and installed from source. Hope the issue is fixed, closed for now.\n Hey, I'm still getting it for some reason even after a full update,\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.5/dist-packages/discord/ext/commands/bot.py\", line 247, in _run_extra\n    yield from coro(_args, *_kwargs)\n  File \"./mods/AI.py\", line 47, in on_message\n    msg = \"**{0}**\\n\".format(message.author.name)+str(chatbot.get_response(message.content))\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.3-py3.5.egg/chatterbot/chatterbot.py\", line 149, in get_response\n    self.storage.update(input_statement)\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.3-py3.5.egg/chatterbot/adapters/storage/mongodb.py\", line 126, in update\n    data = statement.serialize()\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.3-py3.5.egg/chatterbot/conversation/statement.py\", line 85, in serialize\n    data[\"in_response_to\"].append(response.serialize())\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.3-py3.5.egg/chatterbot/conversation/statement.py\", line 85, in serialize\n    data[\"in_response_to\"].append(response.serialize())\nAttributeError: 'dict' object has no attribute 'serialize'\n Python version: 3.5\n\n``` python\nchatbot = ChatBot(\"NotSoBot\",\n    storage_adapter=\"chatterbot.adapters.storage.MongoDatabaseAdapter\",\n    logic_adapter=\"chatterbot.adapters.logic.ClosestMeaningAdapter\",\n    input_adapter=\"chatterbot.adapters.input.VariableInputTypeAdapter\",\n    output_adapter=\"chatterbot.adapters.output.OutputFormatAdapter\",\n    format='text',\n    database='chatterbot-database',\n    database_uri='mongodb://localhost:27017/')\nchatbot.set_trainer(ChatterBotCorpusTrainer)\nchatbot.train(\"chatterbot.corpus.english\")\n```\n\nIt works first time, few times actually but then for no reason starts to error. I receive it around 50 times and then no responses work until I reload it and it starts working again.\n Alright, testing it now, thanks for the update!\n Seems to be working good now, had a few testers. Thanks!\n and its back :(\n Just upgraded @gunthercox and it's back but in a new format,\n`Traceback (most recent call last):\n  File \"./mods/AI.py\", line 51, in on_message\n    msg = \"**{0}**\\n\".format(message.author.name)+str(chatbot.get_response(message.content))\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.5-py3.5.egg/chatterbot/chatterbot.py\", line 149, in get_response\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.5-py3.5.egg/chatterbot/adapters/storage/mongodb.py\", line 128, in update\n    data = statement.serialize()\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.5-py3.5.egg/chatterbot/conversation/statement.py\", line 85, in serialize\n    def serialize(self):\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.5-py3.5.egg/chatterbot/conversation/statement.py\", line 85, in serialize\n    def serialize(self):\nAttributeError: 'dict' object has no attribute 'serialize'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/usr/local/lib/python3.5/dist-packages/discord/ext/commands/bot.py\", line 247, in _run_extra\n    yield from coro(_args, *_kwargs)\n  File \"./mods/AI.py\", line 54, in on_message\n    msg = \"**{0}**\\n\".format(message.author.name)+str(chatbot.get_response(message.content))\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.5-py3.5.egg/chatterbot/chatterbot.py\", line 149, in get_response\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.5-py3.5.egg/chatterbot/adapters/storage/mongodb.py\", line 128, in update\n    data = statement.serialize()\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.5-py3.5.egg/chatterbot/conversation/statement.py\", line 85, in serialize\n    def serialize(self):\n  File \"/usr/local/lib/python3.5/dist-packages/ChatterBot-0.4.5-py3.5.egg/chatterbot/conversation/statement.py\", line 85, in serialize\n    def serialize(self):\nAttributeError: 'dict' object has no attribute 'serialize'`\n\nsorry for all the issue this bug is causing :(\n I pulled from github and ran python3.5 setup.py install\nIt seems as the error is different as you made the serialize in a function now \n You think wiping my mongodb for the data would work? I would rather not because I have a lot of data from users using it however I will if needed.\n yeah, that's what I was thinking. I'll try it when I get home, thanks.\n Oh sorry, forgot to respond. After updating again with your new commits a few days later, I haven't received the error again. Everything seems well at this point and it's fast. Thanks for keeping in check and continuing development of this project!\n  Added Spanish translation and links to different translations in the\nreadme files. <3\n  The responses become very slow after the brain/AI becomes to be used more/learns more.\n\nIf theres any way to make it faster after lots of input, as it is very slow at responses with a few thousands conversations.\n I'll try it soon, thanks!\n Not sure how much faster it will be now because it didn't transfer the previous contents of what it learned to the new database. However I'll post results in a few days when it becomes used again!\n @NotSoSuper did you notice an improvement?\r\n Yes, however, even after the mongodb gets very large it can tend to slow down.  What would be a best practice method for feeding the bot information that it can consider 'true' and then later recall during conversation eg: \n\nThe sky is blue. Chocolate is delicious. You like Coffee.\n\n> What color is the sky?\n> - Blue.\n> \n> Do you enjoy coffee? \n> - Yes\n\nI'm absolutely loving my limited ChatterBot experience thus far :)\n  I'd like to figure out if it's possible to convert the usage of local file system for .json file to HDFS and have Spark MLib to do the machine learning instead. What are the thoughts on this?\n  Hi! I'm getting familiar with ChatterBot, at the moment I try to understand how it works under the hood.\nWhen I opened the database I saw this:\n\n``` json\n\"Again...\": {\n    \"in_response_to\": [\n      {\n        \"in_response_to\": [\n          {\n            \"occurrence\": 2,\n            \"signature\": [],\n            \"text\": \"It depends how you define life\"\n          }\n        ],\n        \"text\": \"Life is the condition that distinguishes organisms from inorganic matter, including the capacity for growth, reproduction, functional activity, and continual change preceding death.\"\n      }\n    ]\n  },\n```\n\nHm, it looks like this is conversation tracking, but issue #2 say otherwise\n\n> Currently, ChatterBot only responds to the last statement that was entered\n\nCan someone shed some light on this?\n @gunthercox basic example with english corpus trainer. Also when asking some questions, when asking empty questions, after few questions it can't parse the database anymore. This also happens when using mongodb storage.\n\n```\nfrom chatterbot import ChatBot\n\n# Create a new chat bot named Charlie\nchatbot = ChatBot(\"Charlie\")\n\nchatterbot.set_trainer(ChatterBotCorpusTrainer)\n\nchatterbot.train(\n    \"chatterbot.corpus.english\"\n)\n\n# Get a response to the input \"How are you?\"\nresponse = chatbot.get_response(\"How are you?\")\n\nprint(response)\n```\n  Hi\n\nI'm trying to create logs of the conversation that instances of chat bot had had with different people and store it into a database. I know how the knowledge base works for the chat bot and its database implementation as well. What i want to do is store the logs into a database in order to monitor the chats it had with different people with their session id or something to differentiate between them.\n\nIt'd be great if someone could help me with it.\n  I tried using the \"nearest meaning\" matcher, but it seems to not match on basic synonyms or even if there is punctuation missing from an input.\n\n```\nhello world \nYou | 3 minutes ago\nI like seeing movies. \nChatbot | 3 minutes ago\nCorrect answer is 'hello back from the world' \nYou | a few seconds ago\nI learned to answer hello back from the world in context of hello world \nChatbot | a few seconds ago\nhello world \nYou | a few seconds ago\nhello back from the world \nChatbot | a few seconds ago\nhello planet \nYou | a few seconds ago\nIs that a definition or an oppinion? \nChatbot | a few seconds ago\nI trained bot on a reply to hello world\nbut it will not reply to hello planet\n```\n\nin fact, it doesn't match if a punctuation mark is missing.\n\nare you good <> are you good?\n\n```\nare you good? \nYou | a minute ago\nIf the implementation is hard to explain, it's a bad idea. \nChatbot | a minute ago\nCorrect answer is 'Yes, I am great' \nYou | a few seconds ago\nI learned to answer Yes, I am great in context of are you good? \nChatbot | a few seconds ago\nare you good \nYou | a few seconds ago\nIf the implementation is hard to explain, it's a bad idea. \nChatbot | a few seconds ago\nare you good? \nYou | a few seconds ago\nYes, I am great \nChatbot | a few seconds ago\n```\n\nis this expected behavior using the \n\n``` python\n    def __init__(self, name=None, config=dict()):\n        if not config.get('logic_adapters', None):\n            config['logic_adapters'] = [\n                'chatterbot.adapters.logic.ClosestMeaningAdapter'\n            ]\n        super(ChatterBot, self).__init__(name, config)\n```\n\nor do we have a bug somewhere?\n  Add deserialize_responses call to mongo adapter get_response_statemets realization to prevent AttributeError: 'dict' object has no attribute 'serialize' in response.serialize().\n\n``` python\nTraceback (most recent call last):\n  File \"examples/terminal_mongo_example.py\", line 19, in <module>\n    bot_input = bot.get_response(None)\n  File \"/Users/timofey/Projects/ChatterBot/chatterbot/chatterbot.py\", line 136, in get_response\n    confidence, response = self.logic.process(input_statement)\n  File \"/Users/timofey/Projects/ChatterBot/chatterbot/adapters/logic/multi_adapter.py\", line 27, in process\n    confidence, output = adapter.process(statement)\n  File \"/Users/timofey/Projects/ChatterBot/chatterbot/adapters/logic/base_match.py\", line 47, in process\n    self.context.storage.update(closest_match)\n  File \"/Users/timofey/Projects/ChatterBot/chatterbot/adapters/storage/mongodb.py\", line 126, in update\n    data = statement.serialize()\n  File \"/Users/timofey/Projects/ChatterBot/chatterbot/conversation/statement.py\", line 81, in serialize\n    data[\"in_response_to\"].append(response.serialize())\nAttributeError: 'dict' object has no attribute 'serialize'\n```\n  I'm trying to train the bot and keep getting the response. \n\n> Is that a definition or an oppinion?\n\nCan't see this in the training sets... is it inside the source somewhere for the bot?\nIs this a prompt to train the default bot somehow?\n This is from training set: \nhttps://github.com/gunthercox/ChatterBot/blob/master/chatterbot/corpus/data/english/conversations.json#L122\n \"opinion\" is misspelled, any chance we can get that corrected?\n  Hi, i have played around with chatterbot the last two days and it is a really great starting point into the world of chatbots. So thanks for your awesome work! \n\ni tried to optimize the time adapter example. \n\n1.) for my usecase i need to have german \"umlaute\" like '\u00e4\u00f6\u00fc' etc. I changed the coding to utf-8 but it did not helped. so i made this \"jsonfy\" function to get rid of the \"umlaute\".\n\n2.) i recognized that only a single \"what\" results in outputting the current time. i removed the classifier and added the closest_match function. \n\n3.) furthermore i liked to give the confidence some more weight depending if some keywords in the input_statement.\n\nhere it is.\n\nbest regards\nAlex\n\nhttp://pastebin.com/JSsdyAdT\n  Hi I'm trying to understand the learning process of the chatter bot. I see database.json being created but i do not understand what is going on in there. The relationship of the statements and the responses. Please help me clarify that.\n @futetest I'm also going through this! Where is that file being created for you? I don't see it.\n\nYou'll have to look in the logic inside the chatter bot. I have things setup using a virtualenv so the code is in\n\n```\nYOURENV/lib/python2.7/site-packages/chatterBot\n```\n\nthen you can see the input/output adapters making the logical decisions.\n i get the logical decisions and all but i do not get the structure of the database.json file from which the bot is reading and mapping the inputs. Can someone explain the structure of the database.json file.\n  I need to create chatbots which are trained separately with different set of conversation.\n\nFor example, say I have two chatbot instances **A** and **B**.\n- **A** should reply _\"18\"_ to _\"What is your age?\"_\n- **B** should reply _\"35\"_ to _\"What is your age?\"_\n  Just added some basics italian conversations\n  the docs are wrong since they are not pointing out that you need to use the set trainer method before training. The class passed to this is not specified anywhere.\n  Hello @gunthercox , chatterBot rocks. \nThat readthedocs.io link can be replaced by https://github.com/gunthercox/ChatterBot/wiki/, whatsay?\n That was a network issue. I tried opening in different browsers earlier and it didn't load, but now its loading fine.\n    Oh I see. Ok, thats fine then.\n  @gunthercox doc is added [https://github.com/gunthercox/ChatterBot/pull/248](https://github.com/gunthercox/ChatterBot/pull/248)\n  I trained the bot with ~17k conversations and now it takes a lot of time for response. Are there ways to avoid it?\nTraining data: https://gist.github.com/sntp/221f53c48bec929ac36d0951b496fcbd\n What about using SQLite? Will that speed up the process? Is there sqlite adapter?\n\nI tried to do the same, I fed a 3.5Mb training file with converstations from social network, was curious what kind of answers i'll get from that :D \n\nAnd firstly it took about 40 minutes to train, and now it is just stuck on trying to answer.\nI tried using MongoDB but got an error pymongo.errors.ServerSelectionTimeoutError: localhost:27017: [WinError 10061] No connection could be made because the target machine actively refused it\n\nI gueees, because i need to download it and run the server, huh?..\n Btw, Why not to use SQL database?\n Oh, okay, mongodb works fine now. Much faster. But that Bulk error is annoying.\n\nAnd I still think having a standard option of sqlite would be nice, it's much faster than json, but it is also just a single file and it does not require you to install anything but python. Just a thought. No rush though.\n Cool, thanks!\n\nAlso found some old discussions back from 2014-2015, about making this bot smart enough to pass at least some of Turing tests\\questions, building sentences from words, etc I hope you're still onto it :) \n Does It support parallel Training\uff1f \n my data size about \ni use mongo db . but i dont know how to set the training parameters or  when i use mongodb the default is parallel training \uff1f\uff1f  thanks a lot \n my data size is about  2G  \n I've noticed that #597 using ujson has sped up processing a lot, though my training data is only ~300MB in size. I recommend trying it out to see how much faster it will go.  Hi,\nim actually getting an 404 error when I trying to ask cleverbot a question. Have they changed their API again?\n\nBtw: I am using the java implemention.\n @gunthercox Uww sorry,\nThat was the wrong github repo :D\n  Any algorithm that it uses?\n Hi, I had a question, I was reading the source fro Logic adapters, and specially for the Closest matching adapter, ... sorry for the dumb question...new at machine learning, but still tryign to figure out which machine learning algorithms are you using for the chatterbot it Naive Baysean or ... ... also I was lookign at the nltk documentation ... it says these 3 as machine learnign modules .. are you usign any od these :  classify, cluster, tbl  ... on this link :  ... http://www.nltk.org/book/ch00.html \n  Hello, I had a problem installing Chattebot from `setup.py`:\n\n```\nTraceback (most recent call last):\n  File \"setup.py\", line 7, in <module>\n    version = __import__('chatterbot').__version__\n  File \"/Users/danno/ChatterBot/chatterbot/__init__.py\", line 1, in <module>\n    from .chatterbot import ChatBot\n  File \"/Users/danno/ChatterBot/chatterbot/chatterbot.py\", line 2, in <module>\n    from .adapters.storage import StorageAdapter\n  File \"/Users/danno/ChatterBot/chatterbot/adapters/storage/__init__.py\", line 2, in <module>\n    from .jsondatabase import JsonDatabaseAdapter\n  File \"/Users/danno/ChatterBot/chatterbot/adapters/storage/jsondatabase.py\", line 4, in <module>\n    from jsondb import Database\nImportError: cannot import name 'Database'\n```\n\nIt was due to `setup.py` imports Chatterbot module (`__init__.py`) to get the author, version and name for the installation and since dependencies are not installed yet, the script gets the above error.\n\nI'm new to python and I don't know if this commit is the best solution for the problem, but if not, I would appreciate any other fix, because Chatterbot will be a dependency to a project I'm working on :).\n Thaks for your reply.\n\nYes, I didn't use pip, it's becauses I added chatterbot as a install requirement in my project. I have another `setup.py` script that looks like this:\n\n```\n#!/usr/bin/env python\nfrom setuptools import setup\n...\nsetup(name='tgbot',\n    ...\n    install_requires=['chatterbot'],\n    ...\n\n    )\n```\n\nI'm did some tests on a machine that doesn't have any chatterbot dependency installed (fuzzywuzzy, jsondatabase, nltk, pymongo, etc), when I ran `python3 setup.py install` using my script I got the following output when `setuptools` tried to process chatterbot as a dependency:\n\n```\nInstalled /usr/local/lib/python3.4/dist-packages/tgbot-0.1-py3.4.egg\nProcessing dependencies for tgbot==0.1\nSearching for chatterbot\nReading https://pypi.python.org/simple/chatterbot/\nBest match: ChatterBot 0.3.6\nDownloading https://pypi.python.org/packages/cd/0f/55dbbb00a8b913a6c3f35e2185ca3fde368fc01a67a93c78fe3866f59ecb/ChatterBot-0.3.6.tar.gz#md5=7ef111ac05115d51cbe4a123e564e12f\nProcessing ChatterBot-0.3.6.tar.gz\nWriting /tmp/easy_install-g8jhui_7/ChatterBot-0.3.6/setup.cfg\nRunning ChatterBot-0.3.6/setup.py -q bdist_egg --dist-dir /tmp/easy_install-g8jhui_7/ChatterBot-0.3.6/egg-dist-tmp-pb7q5e6h\nTraceback (most recent call last):\n  File \"/usr/lib/python3/dist-packages/setuptools/sandbox.py\", line 152, in save_modules\n    yield saved\n  File \"/usr/lib/python3/dist-packages/setuptools/sandbox.py\", line 193, in setup_context\n    yield\n  File \"/usr/lib/python3/dist-packages/setuptools/sandbox.py\", line 237, in run_setup\n    DirectorySandbox(setup_dir).run(runner)\n  File \"/usr/lib/python3/dist-packages/setuptools/sandbox.py\", line 267, in run\n    return func()\n  File \"/usr/lib/python3/dist-packages/setuptools/sandbox.py\", line 236, in runner\n    _execfile(setup_script, ns)\n  File \"/usr/lib/python3/dist-packages/setuptools/sandbox.py\", line 46, in _execfile\n    exec(code, globals, locals)\n  File \"/tmp/easy_install-g8jhui_7/ChatterBot-0.3.6/setup.py\", line 7, in <module>\n    import sys\n  File \"/tmp/easy_install-g8jhui_7/ChatterBot-0.3.6/chatterbot/__init__.py\", line 1, in <module>\n  File \"/tmp/easy_install-g8jhui_7/ChatterBot-0.3.6/chatterbot/chatterbot.py\", line 2, in <module>\n  File \"/tmp/easy_install-g8jhui_7/ChatterBot-0.3.6/chatterbot/adapters/storage/__init__.py\", line 2, in <module>\n  File \"/tmp/easy_install-g8jhui_7/ChatterBot-0.3.6/chatterbot/adapters/storage/jsondatabase.py\", line 4, in <module>\nImportError: No module named 'jsondb'\n\n```\n\nFrom the log I observed that `setuptools` downloaded `ChatterBot-0.3.6.tar.gz` and tried to install it using its `setup.py` file, but since it imported chatterbot (loads `__init__.py`) to get `__author__`, `__email__` and `__version__` variables it crashed because when `__init__.py` executed the instruction `from .chatterbot import ChatBot` it couldn't find jsondb module due to it's wasn't installed yet.\n\nAfter this problem, I decided to download chatterbot directly from the github repository and install it using its `setup.py` file and see what happens. The installation output was the same that the shown above (with the same error). So, I modified  the `__init__.py` file in chatterbot to avoid the import if the executed file is `setup.py`:\n\n```\nimport os\nimport sys\n\nscript_name = os.path.basename(sys.argv[0])\n\nif script_name != 'setup.py':\n        from .chatterbot import ChatBot\n\n__version__ = \"0.3.7\"\n__author__ = \"Gunther Cox\"\n__email__ = \"gunthercx@gmail.com\"\n```\n\nAnd the installation using `setup.py` was successful.\n\nIn another hand, if I install chatterbot first using `pip install chatterbot` I don't get any error and everything is ok, but I would like it could be installed using `install_requires` in my `setup.py` file to automate this process.\n Thanks to you.\n  I am using ChatterBot as a feature in a Kik Bot I've been developing as a hobby. As ChatterBot learns things from users talking to it, it can learn some not so great things, some of which end up violating the Kik terms of service for bots. I would like to be able to completely purge the database and reteach from the corpus via a special command only I have access to, but I'm not sure how I would go about doing this. Can I just delete the db file while the script is running or do I need to do something special?\n awesome, thanks\n how do I generate a new database without reinstatiating the ChatBot?\n yeah, but I was wondering if there was a way to regenerate it without restarting/reinstantiating \n Ok, I worked around this by instantiating another ChatBot without getting rid of the already existing one. That generated the database I needed to keep using the one I had. \n I needed the actually database file. when I dropped it with the earlier command, I couldn't run any subsequent commands because the file was missing. \n  A file with Q&A information about linguistics\n  A few possible curses from the user and a polite response from the system.\n  Hi,\nI have created a new module, based on your instructions for a Logic adapter, but when I run the bot this error appears (I have added it in `_init_.py`)\n\n``` python\nTraceback (most recent call last):\n  File \"chatbot.py\", line 8, in <module>\n    \"chatterbot.adapters.logic.LocationLogicAdapter\"\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot\\chatterbot.py\", line 49, in __init__\n    self.add_adapter(adapter, **kwargs)\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot\\chatterbot.py\", line 62, in add_adapter\n    NewAdapter = import_module(adapter)\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot\\utils\\module_loading.py\", line 12, in import_module\n    module = importlib.import_module(module_path)\n  File \"C:\\Python27\\lib\\importlib\\__init__.py\", line 37, in import_module\n    __import__(name)\nImportError: No module named LocationLogicAdapterchatterbot.adapters.logic\n```\n Quick guess, you appear to be missing a trailing comma on line 8 of `chatbot.py`, and as a result your settings for multiple logic adapters are being interpreted as one single (invalid) logic adapter. This is happening because [otherwise it treats it as one long string](http://stackoverflow.com/q/7992559/359284) instead of multiple strings.\n  @kevin-brown you are right and I am stupid :) Now it works.\nThanks!\n  I think it would be valuable to attempt upgrade the bot with some dialog tree capabilities. \nIt maybe as simple as something like this \nhttps://github.com/jeromeetienne/dialogtree.js\n\nThis app - http://www.chatmapper.com/features/ looks more robust / supporting multiple languages.\n![celi02dweauwns-](https://cloud.githubusercontent.com/assets/289994/14689857/1a642ad8-0717-11e6-9c0c-0ba3880fd448.jpg)\n\nIf there was an appealing UI editor for this - it would further grow the dialog tree database. \nIt will be interesting to see Facebook's ui for this. \n  File with a few compliments in Portuguese\n  I've got a 50,000+ line JSON file for training data and it seems to hang in training. Is there a limit? Should I split it up?\n Ah, thanks. That should help.\n Also, check out #143 \n Using `ultrajson` and MongoDB solved the issue for me, a la:\n\n```\nfrom chatterbot import ChatBot\nimport ujson\n\nbot = ChatBot(\"Terminal\",\n              storage_adapter=\"chatterbot.adapters.storage.MongoDatabaseAdapter\",\n              io_adapters=[\n                  \"chatterbot.adapters.io.TerminalAdapter\"\n              ],\n              database=\"whatever\")\n\nf = open(\"all.json\")\nall_json = ujson.loads(f.read())\nbot.train(all_json)\n```\n Any timing details on how long this took to train?\n Not long. Under a minute.\n Wonder how a big database like this will affect closest meaning adapters....\n @cd-rum Which trainer did you use when training the data? At first, I tried using the ChatterBotCorpusTrainer and tried training the chatterbot using the dictionary I extracted from the JSON file, but I got the error AttributeError: 'dict' object has no attribute 'split'. I then tried using the ListTrainer and converted the dictionary into a list, but while training the data, MongoDB force-quit because there were too many recursive calls during training.\n  Because my computer have to shutdown.\nHow do I continue to train my bot after restart the script?\n If I'm correct it should be either saved to a database?\n\nOn Thu, Apr 14, 2016 at 10:19 PM, Larry850806 notifications@github.com\nwrote:\n\n> Because my computer have to shutdown.\n> How do I continue to train my bot after restart the script?\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/149\n Store the data and train the bot every time?\n @gunthercox \nThanks. In this case, How do I remove what the bot have learned and retrain it?\n @gunthercox \nThanks.\nI have used it and it's awesome.\n  Hi,\nI'm wondering, is there is any simple ways to prevent the bot from repeating itself too much?\n\nMaybe : keeping a record of the two or three previous exchanges and returning an output that could be a bit less appropriate if the most appropriate has been returned too recently\u2026 What do you think?\n\nAmazing work, btw! :+1: \n +1\n Ok, maybe it's not the cleanest way to do but I have something. At least it's a start.\nI modified two functions : `process()` in `base_match.py` and `get()` in `closest_match.py`\n\nFor `get()` : \n\n```\n    def get(self, input_statement, statement_list=None):\n        \"\"\"\n        Takes a statement string and a list of statement strings.\n        Returns the closest matching statement from the list.\n        \"\"\"\n        statement_list = self.get_available_statements(statement_list) # entries in json db\n\n        if not statement_list:\n            if self.has_storage_context:\n                # Use a randomly picked statement\n                return [(0, self.context.storage.get_random())]\n            else:\n                raise EmptyDatasetException\n\n        # Get the text of each statement\n        text_of_all_statements = []\n        for statement in statement_list:\n            text_of_all_statements.append(statement.text)\n\n        # Make a list of matches ordered by confidence\n        matches = process.extract(\n            input_statement.text,\n            text_of_all_statements\n        )\n        results = [( confidence/100.0, next((s for s in statement_list if s.text == match), None )) for match, confidence in matches]\n        return results\n```\n\nFor `process()` : \n\n```\n def process(self, input_statement):\n\n        recent_statements = self.context.recent_statements[-10:] # get the ten last recent statements\n\n        results = self.get(input_statement)\n\n        for e in results :\n            confidence = e[0]\n            closest_match = e[1]\n\n            # Save any updates made to the statement by the logic adapter\n            self.context.storage.update(closest_match)\n\n            # Get all statements that are in response to the closest match\n            response_list = self.context.storage.filter(\n                in_response_to__contains=closest_match.text\n            )\n\n            if response_list:\n                response = self.break_tie(response_list, self.tie_breaking_method)\n            else:\n                response = self.context.storage.get_random()\n\n            if response not in recent_statements:\n                break # break the loop if the response has not been said in the ten last exchanges\n\n        return confidence, response\n```\n  I am finding it valuable to throw some randomness in a conversation... is there an efficient way to grab a random line from the database? \n Sorry I missed this, you can close it....\n\nI found get_random(self): in the storage adapters.\n  I copied an example, but get this when executing it:\n\n```\nTraceback (most recent call last):\n  File \"chatterbot.py\", line 1, in <module>\n    from chatterbot import ChatBot\n  File \"/root/taartbot/chatterbot.py\", line 1, in <module>\n    from chatterbot import ChatBot\nImportError: cannot import name ChatBot\n```\n Thanks, I was having same problem  Is there a means by which to combine two learned databases... it would seem to me that this is a critical component to store learned responses, and transfer and combine them with other learned interactions? \n\nIs this something that is covered?\n  When working with multiple MB files in the corpus JSON limps along loading them slowly... I have found that working with a faster JSON handling library (simplejson, ultrajson) speeds things up significantly.\n Perhaps this is part of a larger ticket on speed of the algorithms in general. While finding strings in a dictionary is relatively quick for small databases, it seems that with a large corpus (over 200kb json) then the bot takes a long time to respond.... any experience with this?\n Yes, it seems that MongoDB is a good solution here to speed things up considerably. A little more overhead for the installation, but well worth it when using big data sets. \n\nMuch appreciated.\n Perhaps there is even a way to increase the speed of training a MongoDB backed model as well? \n\nPerhaps update_one is faster than replace_one in the storage adapter. \n  Hi!\nI'm trying to make the twitter example work, but without success.\nConnection to Twitter work's correctly - strace show's that chatterbox is polling data constantly from twitter, but after that it just repeat a message which were sent, so for example:\n\n```\npython3.4 bum.py\nType something to begin...\nhello\nhello\n```\n\nMaybe I'm doing something wrong.. But I'm stucked, and can't move forward. Code is as the twitter_storage example, without any change.\n Thank you @gunthercox, looking forward :)\n  I would suggest that for storage of sentences, use a dict instead of a list.\n\nSimple enough? Thanks :)\n\nWhen this is implemented, it'd probably be even quickier to respond to input, add output to learned sentences and etc!\n  Hi everyone,\n\nGreat tool! \nI was wondering if there was any consideration for adding in the ability to use AIML files?\nI guess these can be converted to JSON files but that seems like a big work around. \n\nThanks!\n Awesome! \nI have been thinking about this issue with the wildcards and would be very interested in hearing about the approach you come up with. I feel like it may be similar to your ClosetMatchAdapter class but probably a lot more complicated. I was even thinking that each topic can get a class like TimeLogicAdapter with some NaiveBayesClassifier but that is probably overkill. \n\nAlso, a lot of the AIML files (https://github.com/drwallace/aiml-en-us-foundation-alice) have a notion of saved state. For example, you can tell the bot your name and then it saves that fact and can recall it later in the conversation. Is something like this supported in the current code?\n\nBTW, I have been poking around a bit and found an open source AIML parser and bot: https://github.com/creatorrr/pyAIML\nThey have a pretty complex parser and string matcher in the files AimlParser.py and PatternMgr.py\n Hi,\nThere is another project (https://github.com/cosimoiaia/pyAiml-2.0) is in very early stages , for AIML 2.0 it is a porting of program-AB (JAVA).\n\nWith pyAIML, I believe can be treated like  any other logic adapter.\n\nWhat you think ?\n @davizucon \r\nYes, it was pretty easy to use aiml as a logic adapter. I used the AIML interpreter here: https://github.com/creatorrr/pyAIML, which is AIML 1.0.1 standard. It was tricky to calculate the confidence level of the reply  though, as it is not part of the AIML standard. @gopiwh0 did you go any further with integration?   Basic integration without any development on the confidence. Had issues with the original library as it was for 2.7. Found a port to 3 that worked:\r\nhttps://github.com/weddige/pyaiml3\r\n\r\nfrom __future__ import unicode_literals\r\nfrom chatterbot.logic import LogicAdapter\r\nfrom chatterbot.conversation import Statement\r\nimport aiml\r\n\r\nclass AIMLEvaluation(LogicAdapter):\r\n    def __init__(self, **kwargs):\r\n        from nltk import NaiveBayesClassifier\r\n\r\n        self.kernel = aiml.Kernel()\r\n        self.kernel.learn(\"standard/std-65percent.aiml\")\r\n\r\n\r\n    def process(self, statement):\r\n        from chatterbot.conversation import Statement\r\n\r\n        responseData = self.kernel.respond(statement.text.lower())\r\n        response = Statement(responseData)\r\n\r\n        response.confidence = 1\r\n        return response  I tried installing with pip but python's not registering so I put it in the directory and it's now having troubles with\n\n``` py\nTraceback (most recent call last):\n  File \"index.py\", line 3, in <module>\n    from chatterbot import ChatBot\n  File \"/media/solarpolarman/hdd/code/discord/markov/chatterbot.py\", line 1, in <module>\n    from .adapters.exceptions import UnknownAdapterTypeException\n```\n  Hello, I used the Italian data to train the system. My platform is Windows 10 with Python 2.7\nWith the following example, i have no problems:\n\nfrom chatterbot import ChatBot\nchatbot = ChatBot(\"BotItaliano\")\nchatbot.train(\"chatterbot.corpus.italian\")\nchatbot.get_response(\"Ciao, come va?\")\n\nBut if i use the get_response with these words, in particular the \"\u00e8\" character\n\nchatbot.get_response(\"la vita \u00e8 vita\")\n\ni have the error:\n\nC:\\Python27\\lib\\site-packages\\chatterbot\\adapters\\logic\\closest_match.py:28: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal\n  if input_statement.text in text_of_all_statements:\nC:\\Python27\\lib\\site-packages\\jsondb\\db.py:29: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal\n  if key in obj.keys():\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot\\chatterbot.py\", line 80, in get_response\n    self.storage.update(input_statement)\n  File \"C:\\Python27\\lib\\site-packages\\chatterbot\\adapters\\storage\\jsondatabase.py\", line 111, in update\n    self.database.data(key=statement.text, value=data)\n  File \"C:\\Python27\\lib\\site-packages\\jsondb\\db.py\", line 76, in data\n    self._set_content(key, value)\n  File \"C:\\Python27\\lib\\site-packages\\jsondb\\db.py\", line 40, in _set_content\n    data = write_data(self.path, obj)\n  File \"C:\\Python27\\lib\\site-packages\\jsondb\\file_writer.py\", line 22, in write_data\n    db.write(encode(obj))\n  File \"C:\\Python27\\lib\\site-packages\\jsondb\\compat.py\", line 19, in encode\n    return json_encode(value)\n  File \"C:\\Python27\\lib\\json__init__.py\", line 244, in dumps\n    return _default_encoder.encode(obj)\n  File \"C:\\Python27\\lib\\json\\encoder.py\", line 207, in encode\n    chunks = self.iterencode(o, _one_shot=True)\n  File \"C:\\Python27\\lib\\json\\encoder.py\", line 270, in iterencode\n    return _iterencode(o, 0)\nUnicodeDecodeError: 'utf8' codec can't decode byte 0x8a in position 8: invalid start byte\n\n If i use Python 3.5 i have not this error, but when i start to have response, i see strange characters \n\n\"Cos'\u00c3\u00a8 che vuoi sapere?\" \n\nit should be:\n\n\"Cos'\u00e8 che vuoi sapere?\" \n I have put the code in a file \"test.py\" and no result\n\n```\nC:\\Python27>python test.py\n  File \"test.py\", line 7\n    chatbot.get_response(u\"la vita \u00de vita\")\nSyntaxError: (unicode error) 'utf8' codec can't decode byte 0xe8 in position 0: unexpected end of data\n```\n It works! After i adding the header and i have saved the file in UNICODE UTF-8 Format. It is  not enough to simply add the header. Very Thanks!\n  Additional training data\n    A little correction adding information of Portuguese support on corpus.\n  Creating readme in portuguese. I don't know the best form to do this, because of this  I have created a new directory called \"support\" for add files in portuguese.\n If you send me the font name of main banner, I translate the image description.\n Main Banner in portuguese to aprove.\n\n![chatterbot_pt](https://cloud.githubusercontent.com/assets/3837134/12844573/50fc8f7e-cbe7-11e5-8f0c-a4917c104fe3.png)\n  Is there an easy way to delete a response from a Mongo database? Say, for example, I have a public bot, and someone enters an inappropriate response I'd like to delete. \n Great, thanks. \n Great, thanks a lot! I'll take a look\n\nOn Sat, Feb 6, 2016 at 9:21 AM Gunther Cox notifications@github.com wrote:\n\n> @The-Penultimate-Defenestrator\n> https://github.com/The-Penultimate-Defenestrator #130\n> https://github.com/gunthercox/ChatterBot/pull/130 Adds a method for\n> removing statements. It will be included in the next release.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/126#issuecomment-180772236\n> .\n  I have changed the database configuration to be better suited to future logic adapters' needs. The changes include:\n\n1) Add a database_dir variable: This specifies the directory for the database as well as other data that is created when using ChatterBot\n2) Update the database configuration in jsondatabase.py to use the new format\n\nThis is a much needed change for new logic adapters which require data files to be created and edited.\n That is true, but for a number of logic adapters additional files need to be created once they are used (dynamic training data is a great example). Because there are multiple additional files that need to be generated, a single directory to hold all of those files makes the system look cleaner.\n\nI have updated the PR to remove the code that could conflict with the use of a Mongo db. With the update, ChatterBot has a common, easily set location to store files generated by ChatterBot.\n At the moment, no adapters need additional files. In the near future though, I anticipate using multiple additional files for logic adapters' training (but this is a complicated addition and takes time).\n\nFurther, it is better that we implement this now as opposed to another contributor having to figure it out on the spot when sending a PR.\n  Traceback (most recent call last):\n  File \"speech.py\", line 77, in <module>\n    chatvoice(chatbot.get_response(takeString))\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/chatterbot.py\", line 67, in get_response\n    existing_statement = self.storage.find(input_statement.text)\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/adapters/storage/jsondatabase.py\", line 29, in find\n    response_list = self.deserialize_responses(values[\"in_response_to\"])\nKeyError: 'in_response_to'\n The speech adapter that I currently have implemented is in the file \"tts.py\". I believe he has created a custom wrapper on top of the default implementation, but I cannot be sure unless I can see the code.\n\n@roxxup What version of ChatterBot are you using? Newest? Also, maybe you could provide us with the database you are having issues with?\n\nThanks!\n @DarkmatterVale Thanks for helping me . i had database error .\n  When I am writing tests for logic adapters, I get errors relating to the self.context variable being NoneType. @gunthercox Any ideas how to implement context in tests?\n I am writing tests for logic adapters I am creating, and I have to find a workaround because the code (which would work on all actual systems) breaks in testing. This is due to the context variable not being set for adapters in tests. An example of when this occurs is if I have \"self.context.io.process(...)\", it will throw an error because self.context is of NoneType.\n I see what you are saying. I am going to close this issue then, because this will solve my problem.\n  This PR adds a simple developer assistant. A lot more work is needed to give it flexible command understanding, but it can currently run python programs located on the user's computer with ease.\n I will add tests and update the PR.\n @gunthercox I have made a number of large updates to the adapter today, and I think it is ready to be added in. If you would like to test the final product, you can do so by running the following command (inside a chatbot instance):\n\nrun path_to_your_python_program.py\n\nThere are a couple of constraints so far, however, including:\n1) Only python programs work (and there is no auto-language-detect)\n2) You must use the command \"run\", although it can be used in multiple formats\n\nAn example of the output (after running the file once before this test):\n\nBot:    Type something to begin...\nMe:     run main.py\nBot:    Would you like to use the path /Users/vtolpegin/github/regex4dummies/examples/accuracy_tester/?\nMe:     yes\n After some thought, I do not believe this is consistent with the current ChatterBot, as it is not a chat adapter but a developer assistant.\n @gunthercox I will create a new repository and put the code in there. I have also thought about creating something similar to this extensively, although my plans are a little more ambitious than yours...\n You should be able to find the current project at https://github.com/DarkmatterVale/DevAssist\n  This PR adds a simple weather forecast logic adapter. There are a couple of issues, however, including:\n\n1) Warnings that need to be \"squashed\"\n2) Ideally, we remove using python-forecastio and create our own implementation, but that is work for the next version (an enhancement and not the initial version)\n\nAlso, since it requires an API key, we cannot create tests for the adapter.\n  This PR adds a named entity chunker to Chatterbot's utilities.\n @gunthercox Any ideas why the travis-ci build isn't working? I tested it on my end and it works fine on my machine.\n It is a weird error because it works fine on Python 3.4, 3.3, 3, and 2.7. Can you reproduce the error on your machine?\n I read online that numpy was required to be on the system but not imported into the program you are using the chunker in. And I believe I got an error with out it in requirements.\n When I remove numpy from requirements, it throws a \"no module named numpy\" error. But this is only on the pypy tests, so maybe it is something wrong on their end? I'm not really sure why it works with python 3.4, 3.3, 3, and 2.7 while it doesn't work with pypy; do they each run different tests?\n Sorry for all the spam emails from Travis-Ci...Trying different things to see if numpy will install. I have not been able to find a solution so far.\n\n@gunthercox Using sudo throws a permission error. If I remove sudo, apt-get doesn't work. I'll leave it at what you asked, however, so you can see the output of the most recent build yourself.\n That does not work either, as is visible by the travis build.\n @gunthercox Still doesn't work...\n In order to install packages using APT on the container based builds (so, by default) you need to [use the APT addon](https://docs.travis-ci.com/user/installing-dependencies/#Installing-Packages-with-the-APT-Addon).\n\nAs far as getting numpy installed under pypy, you may want to look at https://github.com/travis-ci/travis-ci/issues/2650.\n @kevin-brown I added the APT addon as suggested, but it still doesn't build. Am I doing it incorrectly?\n  Most of the documentation is pretty simple, but the structure of ChatterBot is pretty straightforward.\n @gunthercox I have updated the docstrings; do they look better now?\n @gunthercox Do you have any more comments? If not, can we merge this in?\n  At the moment, there is no documentation for each class. I suggest that we add a \"quote block\" (I can't remember the official name for the triple-quote comment) immediately before each class which describes exactly what the class's function is, how it accomplishes whatever it does, author, etc.\n\nI believe this will become very important to help keep track of what each class does once we get complex logic adapters implemented. For instance, I am writing a logic adapter for a developer assistant. This class will become very complex over time as additional features are implemented, and a summary of how it works will help potential developers understand the code.\n\n@gunthercox What do you think?\n The official name is \"docstring\"\n\nOn Wed, Jan 27, 2016 at 1:09 PM Vale notifications@github.com wrote:\n\n> At the moment, there is no documentation for each class. I suggest that we\n> add a \"quote block\" (I can't remember the official name for the\n> triple-quote comment) immediately before each class which describes exactly\n> what the class's function is, how it accomplishes whatever it does, author,\n> etc.\n> \n> I believe this will become very important to help keep track of what each\n> class does once we get complex logic adapters implemented. For instance, I\n> am writing a logic adapter for a developer assistant. This class will\n> become very complex over time as additional features are implemented, and a\n> summary of how it works will help potential developers understand the code.\n> \n> @gunthercox https://github.com/gunthercox What do you think?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/118.\n I will work on this and send a PR when I'm done.\n Yes, thank you.\n  I added an io adapter for a TTS engine built in to MacOSX.\n\nAlthough I added an output adapter, I have not added a corresponding STT adapter so it gets input using the Terminal. I recommend we make a change to the way io adapters are structured (which will also solve the problem with multiple inputs in my other PR), separating out input adapters and output adapters. This way, the user can specify more precisely what they would like to use for inputs and outputs. @gunthercox What do you think?\n This is awesome. \n  This PR add support for using multiple io adapters.\n\nAt the moment, I am currently just getting input from the first io adapter. To allow multiple inputs, we may have to restructure a couple of things. I haven't thought too much about it yet though, so I'm not sure what will have to be changed.\n @gunthercox I rebased and fixed the conflicts.\n  This PR includes simple implementations of the NLTK functions used by the closest meaning adapter. The structure of the system makes it easy to improve each individual component very easily when we want to make the analysis more complex.\n @gunthercox Yes, that is probably a good idea; I had the names including NLTK because I meant them as wrapper classes for NLTK's built-in functions, but that is not really needed. I have changed the names to match what you suggested.\n  This PR separates the classifier out from the logic adapter. Although the current NaiveBayes classifier is pretty simple, future classifiers might be much more complicated. Because of this, separating the classifiers out will make the code much easier to understand in the future.\n @gunthercox I know you had different ideas about this. Feel free to review and try it out.\n @gunthercox I agree with you, and I think at the moment this addition is not needed.\n\nI will close the PR.\n  @gunthercox Did it fix the problem for you? Can you now accurately get a response from the proper adapter?\n\nRegarding the issue with the database, we can discuss that in the issue and not this PR.\n Awesome, thank you for fixing it! I'm gonna go ahead and merge it in then.\n  Just a couple of minor changes, including:\n\n1) Add additional logic adapters to the terminal example adding functionality\n2) Possible bug fix in evaluate_mathematically (not really sure, but this makes sure no bug will ever arise)\n3) Sometimes, the time logic adapter would find a statement similar to \"what is 100 \\* 10?\" as something it should process. By adding the additional piece of training data, the time adapter does not incorrectly process math statements as often\n Awesome! Thank you!\n\nAlso, on a side note, GCI ended today, so I hope to be able to spend some more time working on chatterbot now. Thank you!\n  Although it looks fine on the surface, there are issues with the current method for using multiple logic adapters. This can be easily found when you run chatterbot and type \"what time is it?\". Sometimes, I will get the current time while other times I will get \"what time is it?\", which is displayed because there is no other statement in the database. In addition, most of the time when I ask that question later in the conversation, I do not get the actual time but a response from the database.\n\nAfter debugging the error for a fair amount of time, I found where the problem is coming from. The current way responses are being prioritized makes getting the correct logic adapter to respond very difficult. I am not sure why this is occurring, but the problem is in https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/multi_adapter.py#L11. You can test this by adding a print statement in evaluate_mathematically in the try block (located at https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/evaluate_mathematically.py#L31) printing the expression after assigning it the evaluated input. If you then type in something like \"what is 100 \\* 10?\", you will see that evaluate_mathematically properly generates a response, and returns a confidence of 1, but still the result is not used.\n\nFurther, the database responses generated from the evaluate_mathematically & time functions are incorrect. This might be unrelated, or the program might be checking the database before checking the other adapters first, and when it gets a 1 confidence for an equal statement it returns that statement and doesn't replace it with the generated result from other logic adapters. This is an issue particularly for logic adapters that would have been considered plugins, which do not want their results saved to the database.\n\nTo test, the order of my logic adapters is as follows:\n\"    logic_adapters=[\n        \"chatterbot.adapters.logic.EvaluateMathematically\",\n        \"chatterbot.adapters.logic.TimeLogicAdapter\",\n        \"chatterbot.adapters.logic.ClosestMatchAdapter\"\n    ],\"\n\n@gunthercox Any ideas how to fix this? I have 2 separate solutions that I have been able to come up with so far:\n\n1) Re-implement plugin support. By classifying them differently, we can easily fix the database issue as well as put higher priority on getting a result from a plugin, which will fix the issue regarding incorrect order.\n\n2) Leave the system as-is, but change the way adapters are processed. This will make the code less readable, but may be a much better solution than 1. It would require adding a flag to tell chatterbot whether to save the result and the statement to the database. In addition, it would require a new way to process and give confidence values for logic adapters. I would argue that we remove the tie breaker, and use the following logic instead (the for loop just stays the same):\na) At https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/multi_adapter.py#L22, we would add an additional if statement above which, if the confidence was = 1, would return the result\nb) Otherwise, do what is done currently getting the highest confidence.\n\nThoughts?\n As stated in the PR, the issue has been fixed. The only issue remaining in the current implementation for logic adapters is that both the adapter's response and the user's prompt are saved to the database.  This could allow the bot to give some odd responses to a prompt the user gives.\n\nI think the solution is pretty simple though: We return an additional variable which tells ChatterBot whether or not to save the response to the database. If that variable is true, then chatterbot saves the prompt and the response to the database. Otherwise, it doesn't. Ideas?\n I agree with you with respect to the user's response being a response to the bot's output. The only issue with the current system is the fact that the bot's response is used as a response to a user's question, when it should not. For example, if I ask the bot what the current time is, it do exactly what it should and respond with the current time. However, later on in the chat, maybe 10 minutes later, it will display that same time stamp as a response to something I say. This is not correct.\n\n@gunthercox Do you see what I mean?\n @gunthercox Can I close this?\n  To increase the speed of processing, multithreading support is really needed.\n\nIn the future, when more logic adapters are added including more advanced ones (such as a developer assistant), https://github.com/gunthercox/ChatterBot/blob/master/chatterbot/adapters/logic/multi_adapter.py#L11 will consume a lot of computing resources. If this is all in one thread, it could cause a slowdown of the program this is very noticeable.\n\nHere is my solution: We enable threading at that stage of the processing. In addition, if that is not enough, individual logic adapters can also implement threading, but that is for another issue\n  Added trivia supporting pt-BR language\n    Since we are using logic adapters for many of these additional functions, should we remove plugin adapters? Or are there still functions that we should implement as plugins?\n\nI would believe that functions that are deeply integrated into the chatbot, such as time, date, location, etc, should be added as logic adapters while functions that are \"extra\", or not core to chatterbot be added as plugins (which are essentially logic adapters but more complex). What do you think @gunthercox ?\n  Add support to greetings Portuguese Brazil\n  This does not add a confidence attribute for adapters, right?\n  Added kwarg for database_uri, which is in the standard MongoDB URI format.\n\nThis is a rewrite of PR #99 , where instead of a new adapter, the feature is just written into the new adapter.\n @gunthercox I fixed the thing, don't know how that got in there in the first place! Guess I should check my diffs before committing, eh?\n  The old adapter for MongoDB could not connect to remote databases, so I forked it into a new adapter and added code to make work with remote DBs.\n I'm not sure how to add tests for this, as it would require setting up a remote MongoDB. I could set up a MongoLab DB for this, but @gunthercox would have to add the password to the .travis.yml file as encrypted.\n This would probably be better integrated into the existing MongoDB adapter, with the database location being a configuration option (defaulting to localhost).\n Actually, I think you're right. How do you add defaults for **kwargs?\n\nOn 12/20/2015 05:22 PM, Kevin Brown wrote:\n\n> This would probably be better integrated into the existing MongoDB \n> adapter, with the database location being a configuration option \n> (defaulting to localhost).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/gunthercox/ChatterBot/pull/99#issuecomment-166170859.\n  Extend conversations to suppotr portuguese language\n  I have a JSON database with 1000+ responses, and even after installing `python-cjson` it's still pretty slow. From what I understand, MongoDB is much faster. Is this correct, and is there an easy way to switch between the two\n If i was reading correctly you should just be able to insert the raw json file into mongo db and it seems to be structured pretty simmilarly but you should probably try to restructure your json file to follow the same format as @gunthercox 's files are before, so that we can code the bot to grab the info from the db the same way it grabs from local\n So, if I have my local database, how programmatically do I \"insert the file into mongo DB\"?\n Try this \n\n```\nfrom pymongo import MongoClient\nimport json\n\nHOST,PORT = ('localhost','27017')\nDATABASE_NAME = 'test-database'\nCOLLECTION_NAME = 'test-collection'\n\nclient = MongoClient(HOST,PORT) #Connect to Mongo db\n\ndb = client[DATABASE_NAME] #Connect to specific database\ncollection = db[COLLECTION_NAME] #Access specific collection\n\n#Then you would need to load a json into a dict(post) then post it using\n\nposts = db.posts\npost_id = posts.insert_one(post).inserted_id\n```\n Think of a MongoDb as a json file structured like\n\n```\n\"Database\":[  \n   {  \n      \"Collection\":[  \n         {  \n            \"Document\":[  \n               {  \n                  \"data\":\"data\",\n                  \"moreData\":\"data\"\n               },\n               {  \n                  \"data\":\"data2\",\n                  \"moreData\":\"data2\"\n               },\n\n            ],\n\n         },\n         {  \n            \"Document2\":[  \n               {  \n                  \"data\":\"data3\",\n                  \"moreData\":\"data3\"\n               },\n               {  \n                  \"data\":\"data4\",\n                  \"moreData\":\"data4\"\n               },\n\n            ],\n\n         },\n\n      ],\n\n   },\n\n]\n```\n So, if I understand correctly, mongoDB is web based? What makes it faster than JSON? Also, if it's not too bothersome, how can I put the JSON into a dict? Should I use [json_util](http://api.mongodb.org/python/current/api/bson/json_util.html) from MongoDB?\n Ive never used the json_util but if im correct\n\n```\nimport json\nf = open(filename, 'r')\njsonData = json.loads(f.read())\n```\n\njsonData should be a dict\n\nBut yeah json_util looks like it works the same way\n OK, great. I'll look into this\n Ok, push it into your fork of the project and mention me, i want to see what youre doing  with it, and the json file\n\nbecause i have the 214,000 jeopardy questions (and answers) that id love to slide in to see if itll work\n Ok. I'm actually not planing to integrate this into my fork, but instead into my personal bot which is slowing down. My fork will likely just include changes to the actual library, this is code I'd like to run once to make a change. My fork will likely just be support for dynamic responses through functions, which I'd like to implement into `train` rather than as a plugin. \n Might i suggest implementing both, as i was saying prior, have inline parsing for the bots output and train it with code inside [ ] 's\n\nhttps://github.com/gunthercox/ChatterBot/issues/94#issuecomment-162667398\n I'll see, I'm really just modifying for one personal project. I'll see how it goes. \n It seems like kind of a limitation that under MongoDB, keys cannot contain the `.` character\n What would the reason you would put a `.` in your db??\n Some responses have multiple sentences and therefore periosd\n That looks great. I was previously unsuccessful, I tried making my own database, and naming the collection 'statements' as in the code for the storage adapter. I'll try this and we will see how much faster Mongo is than JSON\n @gunthercox Although MongoDB makes response time at least 3 times faster, it appears everything has been mixed up in transferring. An example conversation with the newly trained mongo bot:\n\n> Me: Hello\n> Bot: Yes I am\n> Me: What's up?\n> Bot: 1963\n> Me: Hello\n> Bot: Or is it?\n> Me: What's your name\n> Bot: How old are you?\n\nHaving a similar conversation with the old JSON bot:\n\n> Me: hello\n> Bot: FROM THE OTHER SIDE\n> -Adele\n> Me: What's up?\n> Bot: Not much.\n> Me: That's cool\n> Bot: No its not. We need more gun control don't vote for trump\n\n(These are the intended responses even if they seem strange)\n\nMy best guess from the fact that \n`len(json_adapter.filter()) == len(json.loads(open(\"database.db\",\"r\").read()).keys())`\nis that your solution is only loading the keys into the Mongo Database, each as a response to the previous. \n I also have had some issues training it with the text of shakespeare's Julius Caesar, but assumed that was an error on my part... I'll check whether I get the intended behavior with a JSON database, which would indicate an issue with the MongoDB adapter.\n It appears that the MongoDB adapter does have some issues. Training with the text of Julius Caesar, under the JSON database I get:\n\n> **Me:** Peace, Ho! Let us hear him!\n> **Bot:** Friends, Romans, countrymen, lend me your ears;\n> I come to bury Caesar, not to praise him.\n> The evil that men do lives after them;\n> The good is oft interred with their bones;\n> So let it be with Caesar. The noble Brutus\n> Hath told you Caesar was ambitious:\n> If it were so, it was a grievous fault,\n> And grievously hath Caesar answer'd it.\n> Here, under leave of Brutus and the rest--\n> For Brutus is an honourable man;\n> So are they all, all honourable men--\n> Come I to speak in Caesar's funeral.\n> He was my friend, faithful and just to me:\n> But Brutus says he was ambitious;\n> And Brutus is an honourable man.\n> He hath brought many captives home to Rome\n> Whose ransoms did the general coffers fill:\n> Did this in Caesar seem ambitious?\n> When that the poor have cried, Caesar hath wept:\n> Ambition should be made of sterner stuff:\n> Yet Brutus says he was ambitious;\n> And Brutus is an honourable man.\n> You all did see that on the Lupercal\n> I thrice presented him a kingly crown,\n> Which he did thrice refuse: was this ambition?\n> Yet Brutus says he was ambitious;\n> And, sure, he is an honourable man.\n> I speak not to disprove what Brutus spoke,\n> But here I am to speak what I do know.\n> You all did love him once, not without cause:\n> What cause withholds you then, to mourn for him?\n> O judgment! thou art fled to brutish beasts,\n> And men have lost their reason. Bear with me;\n> My heart is in the coffin there with Caesar,\n> And I must pause till it come back to me.\n> **Me:** Methinks there is much reason in his sayings. \n> **Bot:** If thou consider rightly of the matter,\n> Caesar has had great wrong.\n\nBut with a MongoDB adapter:\n\n> **Me:** Peace, ho! Let us hear him!\n> **Bot:** Caesar, 'tis strucken eight.\n> **Me:** Methinks there is much reason in his sayings.\n> **Bot:** There is some grudge between 'em, 'tis not meet\n> They be alone.\n\nUnder the MongoDB adapter, I also get inconsistent answers although a single line appears only once in the text of Julius Caesar. Example:\n\n> **Me:** Peace, ho! Let us hear him!\n> **Bot:** I wish we may: but yet have I a mind\n> That fears him much; and my misgiving still\n> Falls shrewdly to the purpose.\n> **Me:** Peace, ho! Let us hear him!\n> **Bot:** If this were true, then should I know this secret.\n> I grant I am a woman; but withal\n> A woman that Lord Brutus took to wife:\n> I grant I am a woman; but withal\n> A woman well-reputed, Cato's daughter.\n> Think you I am no stronger than my sex,\n> Being so father'd and so husbanded?\n> Tell me your counsels, I will not disclose 'em:\n> I have made strong proof of my constancy,\n> Giving myself a voluntary wound\n> Here, in the thigh: can I bear that with patience.\n> And not my husband's secrets?\n\nNote that this inconsistency exists even while the bot has `read_only` set to `True`\n Great! I look forward to being able to use faster databases reliably!\n Issue appears to be fixed, and MongoDB shows \u00bc the response time, yay! Thanks for your help, all.\n Not quite, appears you forgot to convert to dict in line 41 of `jsondatabase.py`. I think it's likely you left `response` as a list when you meant to change it to a dict. You call `text = response[\"text\"]` on line 41, which raises an error, because `response` is a list, not a dict and cannot be indexed by a string. Either you meant `text = response[text]` where text is an integer, or you meant for `response` to be a dict. \n\nBTW I am getting this error running the transfer code you have included above, I don't know if normal usage is affected by this. The error is thrown calling `json_database.filter()`\n This means that conversation with JSON database is broken completely... I cannot have a conversation with my bot from before the update, nor can I transfer it to MongoDB. This is a serious issue, the default database type is broken now. If someone `pip install`s the library and even runs the \"Basic usage\" example, an error is thrown\n Yes, my stack looks like:\n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/chatterbot.py\", line 100, in get_response\n    all_statements = self.storage.filter()\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/adapters/storage/jsondatabase.py\", line 87, in filter\n    response_list = self.deserialize_responses(values[\"in_response_to\"])\n  File \"/usr/local/lib/python2.7/dist-packages/chatterbot/adapters/storage/jsondatabase.py\", line 41, in deserialize_responses\n    text = response[\"text\"]\nTypeError: list indices must be integers, not str\n```\n\nThe code I'm using to produce the error:\n\n```\nimport chatterbot\nc = chatterbot.ChatBot(\"Test_Bot\")\nc.get_response(\"hello\")\n```\n\nI get this error whenever I try to use `train` or `get_response` or anything that calls `JsonDatabaseAdapter.filter()`\nThe error persists after reinstalling via pip. I'm on a raspberry pi.\n \"breaks backwards compatibility\" does this mean I cannot use a previous database with the new format? How should I transfer existing work? I have 25,000 entries that I'd prefer not to lose.\n\nThe issue you link to shows that the branch was merged 8 days ago, I started seeing this behavior only today. It could be that the MongoDB fix was the first time I had updated the library since 8 days ago, though I think I started my project about 8 days ago. How can I transfer my old database to a new format? I'd like to be able to keep the training I've accumulated.\n Ok, if I remove the existing database and run the code again, the error disappears. How can I move my database from one format to another? The only way I can possibly think of is to have multiple virtual environments with different versions of the library in them, then somehow output from one into a different format which I import into the other. I'm not smart enough to figure this out, do you have a solution?\n My approach to transferring the database has failed. My planned approach:\n1. Revert to chatterbot 0.3.0\n2. Read JSON database and convert to MongoDB\n3. Go back to 0.3.2\n4. Read MongoDB database and convert back to JSON\n\nI was hoping that only reading of the mongo database had been broken, not writing. I now cannot call `filter()` in 0.3.0 either without throwing an error, after about 8 seconds I get \n\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"usr/local/lib/python2.7/dist-packages/chatterbot/adapters/storage/jsondatabase.py\", line 41, in _objectify_response_list\n    text = item[0]\nKeyError:0\n```\n\nSo, it looks like 0.3.2 actually modified my database before deciding it couldn't read it? It looks like it is trying to desperately read a list that has been converted to a dict. I believe I was running 0.3.0 before, then after upgrading and re-downgrading my database is broken.\n I'm fine with losing all the data represented by the new type of data structure, might this allow for a simpler solution?\n Thanks, I'll definitely try this\n Great. I'll try this. Probably going to sleep in 20-ish minutes as I have school tomorrow, I'll report back when I have a result. \n I'm not exactly sure how to export to a corpus format, I can iterate through `JsonDatabaseAdapter.filter()` to find all responses but I'm not sure how to separate them into separate conversations.\n No, it's fine, I've started a new database with the new format. No worries. \n  It'd be great if you could use functions (which return strings) in trainining dialog. \n\nExample:\n\n```\nimport time\ndef whattime():\n    return time.strftime(\"%a, %d %b %Y %H:%M:%S\")\n\nchatbot.train([\"what time is it\",whattime])\n```\n\nChatterbot could recognize that `time` is a function, not a string, and then return the result of calling that function in response to the question of \"what time is it\". That way, I could get the real time and date back from asking what time is it. \n This sounds like a very good idea. I will work on implementing this in the plugin_chooser class.\n If added in the plugin_chooser class, how would this look if used in code? Would it look like my example or different? Also, if you don't mind my asking, how long (as a rough estimate) might it take to implement? If it's longer than a week, I might attempt to modify the code myself. \n I have a few friends and myself in a [discord](https://discordapp.com) chat, which uses the [discord API](https://github.com/Rapptz/discord.py) to implement chatterbot. I'm finding that having a few people regularly interacting with it through a system that is designed for easy communication is a great way to train the bot. I really love your project, very helpful.\n @DarkmatterVale This is sorta what i encouraged the inline parsing for, by that i mean\n\n```\ninputRes = finalResponse.split(\"[\")\noutput = ()\nfor phrase in inputRes:\n     if (phrase[(len(phrase)-1):] == \"]\"):\n          output.append(exec(phrase[(len(phrase)-1):])\n     else:\n          output.append(phrase)\nfinalResponse = output.join()\n```\n\nSo that when training the bot, you would set the output as (in the time case)\n\n\"  The time is [import time;print time.strftime(\"%a, %d %b %Y %H:%M:%S\")]   \"\n @LucasZielke I see what you mean. This might be kind of difficult for large plugins, however, because then the code could get very long. Maybe this could be used for shorter plugins though as a quick and easy way to get a fast response.\n\n@The-Penultimate-Defenestrator You would have to train the bot to determine what plugin is valid given an input. Then, the bot would find the plugin with the highest confidence in its answer ( something I want to implement ) and call the respective function. That is the easiest and most general way to design the code so that it is not reliant on any specific code additions for a plugin.\n\nFeel free to go ahead and try to write some code up! I will probably not get to it for multiple weeks ( got a lot of todos here ).\n Ok. Can you add some doc strings into the example PluginAdapter plugin class? I understand what should_answer does, but not what process does. Does process return another string that is passed again to the response algorithm, or return the final answer?\n @The-Penultimate-Defenestrator : process seems to return the input value = and then answer, so:\none plus 3 times 5 gets normalized to\n1+3*5 and sent into the eval() so the entire function would return\n1+3*5= 16\n\n@DarkmatterVale Thats why you should build plugins that require only a quick little two lines\n thanks, @LucasZielke. I'll take a look, see what I can figure out.\n I think this would be more practical if logic adapters could be more deeply embedded into chatterbot. As of right now, they have to decide independently whether they can answer a question. If the `should_answer` function could somehow access the logic that powers the rest of chatterbot, this would be more realistic. \n Great, this sounds like a really great solution.\n\nOn Thu, Dec 24, 2015 at 8:36 PM Gunther Cox notifications@github.com\nwrote:\n\n> If you take a look at #85\n> https://github.com/gunthercox/ChatterBot/issues/85, it covers the\n> future changes to logic adapters that will make this possible. The key\n> parts are rating confidence values and tie-breaking.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/94#issuecomment-167176157\n> .\n  ``` python\nall_statements_copy = list(all_statements)\nfor statement in all_statements_copy:\n    response_exists = False\n    for s in all_statements_copy:\n        if statement in s.in_response_to:\n            response_exists = True\n            break # Exit for loop since one exists\n\n    if not response_exists:\n        all_statements.remove(statement)\n```\n\nPretty sure this is very inefficient when dealing with larger datasets\n\nchanging to this does what the comment says (and is much faster):\n\n``` python\nresponses = set()\nto_remove = list()\nfor statement in all_statements:\n    for response in statement.in_response_to:\n        responses.add(response[0])\nfor statement in all_statements:\n    if statement.text not in responses:\n        to_remove.append(statement)\n\nfor statement in to_remove:\n    all_statements.remove(statement)\n```\n  Changing to this in `__init__.py` fixes the issue:\nmissing was corpora and tokenizers in find calls.\n\n```\ntry:\n    find('corpora/wordnet')\nexcept LookupError:\n    download('wordnet')\n\ntry:\n    find('corpora/stopwords')\nexcept LookupError:\n    download('stopwords')\n\ntry:\n    find('tokenizers/punkt')\nexcept LookupError:\n    download('punkt')\n\n```\n  This is a much needed update. Thank you for working on this!\n  In addition to evaluate_mathematically, there are many other plugins that would be really nice to have. @gunthercox Do you have a preference for the type of plugins you would like ChatterBot to have? For example, are you alright with having plugins for time?\n\nIf so, here is a list of plugins that I would like to implement ( over some long period of time ;) ):\n- [x] Time = Get the time ( current, future, past )\n- [x] Weather = Location ( current, or user specified )\n- [ ] Reminders = User created events that are executed at a user-specified time\n- [ ] Email = Send and receive emails\n- [ ] Music = Start, stop, or pause music\n- [ ] News = Get news headlines ( this can be very difficult because of NLP, but we can start simple and get more complex over time )\n\nWhat do you think? Do you have any that you would like to add to the list?\n\nUpdate 1/28/16: Additional Plugins\n- [ ] Web search\n- [ ] Wikipedia search\n Instead of having to manually tell the program that it has to run these input, would it not be a little easier to have like a form of inline python parsing?\n Can you please elaborate on the implementation of such a system?\n @LucasZielke See #94 for a great way to train the bot to certain inputs ( and results ). I will work on providing details as soon as I can get some time to work on this.\n Might i suggest like a micro dictionary function in there like:\ninput: Do you know what the word _____ means?\nOutput: Yeah, that means _________\n That is similar to the \"find_a_name()\" function, just a broader dictionary. I think the function you are describing should become an evolved version of the find_a_name() function.\n\n@gunthercox Sorry for being gone for so long! I am still at the beginning of GCI ( which will last through January ), and am having a lot of trouble finding time for everything. I will try and get some stuff done, but timing might be a little bit of a range.\n Another great plugin that we could implement is a Developer Assistant. This is a little more complex, but is something that a lot of people could use. In addition, this is a very modular plugin, allowing us to start very simple and expand greatly to add functionality over time.\n\nEDIT: Removed developer assistant\n  It would be a great addition to have an IO adapter for speech-to-text and text-to-speech. This would allow people to use ChatterBot in more situations and with less work.\n- [ ] STT Adapter\n- [ ] TTS Adapter\n\nThis is a pretty complicated addition, but the Jasper project does a great job implementing STT and TTS functionality. Some information about their user interaction ( how it can be configured ) can be found here http://jasperproject.github.io/documentation/configuration. The code for the STT and TTS engine(s) they implement can be found here https://github.com/jasperproject/jasper-client/blob/master/client/stt.py and https://github.com/jasperproject/jasper-client/blob/master/client/tts.py.\n\nThe implementation would be done in steps, with single-engine configuration coming first followed by multi-engine configuration.\n- [ ] Single-engine configuration. In this, we would only allow the use of a single STT & TTS engine that we hard code into ChatterBot\n- [ ] Multi-engine configuration. In this, we would allow multiple STT & TTS engines that the user can pick.\n @DarkmatterVale I work on a mac and have been using pyobjc to hook into the AppKit NSSpeechSynthesizer to listen to the output. I have also worked on many other STT and TTS applications (iOS and mac). Writing an enhancement for Chatterbot is on my todo list. How do you propose to add STT and TTS adapters to ChatterBot? \n\nI would prefer an implementation that is as pure python as possible. @gunthercox if you have any suggestions please let me know.\n I currently do not have an implementation plan. I would like to do something similar to what the Jasper project does, but recently I have not had time to really explore how their code works. It is also a pure python implementation.\n  I created a simple GUI that users can run to interact with ChatterBot.\n  TypeError: **init**() got an unexpected keyword argument 'logic_adapter because chatterbot.py initializes the logic adapters with his kwargs. The Closestmatch adapter uses the **init**() from logic.py\n  `raise ValueError(\"Expected \"+item_name+\" in\",line,\"at\",line[p:])\nValueError: ('Expected version spec in', 'requests ~=2.8.0,<3.0.0', 'at', ' ~=2.8.0,<3.0.0')`\n\nI am using Python 2.7\n0.2.9 installs just fine\n\nhttps://github.com/gunthercox/ChatterBot/commit/750721d75afe4e403e773cb4ce68ca4a6c3e4054 seems to contain the malicious change\n\n`~=` syntax does not seem to be valid syntax!? (https://pip.readthedocs.org/en/1.1/requirements.html)\n  In the case of the multiple logics wouldnt this require it to completely restructure its internal \"thoughts\" after every input? or at least after every input, would have to recognize that there has been a change added/delete in the linked databases?\n  Here is my first attempt at adding a way to evaluate mathematical expressions. @gunthercox what do you think? What are your thoughts on improving implementation?\n\nA couple of notes. This is not finished, but I am at a point where I need to get input on how to implement it into the program. It currently looks at every incoming question or statement and attempts to decide whether or not the point is to evaluate a mathematical expression. This sort of works, but you run into issues pretty easily once you start describing the quantity of an object. It might think you are trying to have a mathematical expression evaluated, and then it will give the incorrect answer.\n\nAnother thing to note is the way I structured the function. I decided to create a new kind of adapter because this is definitely not an io adapter, nor is it a storage adapter. You could argue it is a logic adapter, but it doesn't work independent of another logic adapter.\n\nAlso, the reason the build is failing is because the answer in Python 3.x comes out to `1.0` while in 2.7 it is `1`.\n I had a similar thought process and agree that this could be very useful in the future. This will come especially in handy when you need a logic adapter in addition to a context adapter (or other kinds of adapters).\n I have renamed the addition so that evaluate_mathematically() is now a plugin. This is a much better name for the function's purpose.\n\nAlso, plugins should allow for \"external\" functionality to be implemented, while Logic adapters should act as the way the user interfaces with the chatbot. In the future, we can use the plugins directory to add new functions such as sending emails, reading twitter messages, etc.\n @gunthercox and @kevin-brown Do you guys have any more questions? Do I need to give a more in-depth explanation for how the code works?\n I had the same problem. In fact, I am unable to see any changes I make to the code when I run the examples ( just in general ). The best way to test, which is the way I do it because of this issue, is to add a print statement right before the return statement. Then rerun the tests with --nocapture. The before and after code is below.\n\nBefore:\n\n```\nif not plugin_response is False:\n     return plugin_response\n```\n\nAfter:\n\n```\nif not plugin_response is False:\n     print plugin_response\n     return plugin_response\n```\n\nThe problem ( since I ran into the same issue on other projects ) is that the examples use the version of chatterbot currently installed on the computer, and not the local repository. Have you ever encountered the same situation?\n Thank you for that information! I will not make these mistakes again; sorry for not doing things properly in the first place!\n\nI was able to test ( correctly this time ) the adapter and I found the problem. I was not processing the response properly, leading it to not being displayed. This is fixed in the next commit along with the `MANIFEST.in` update. Please let me know if this fixes the problem on your machine!\n Awesome, glad that fixed the issue! I will remember all of this next time I make changes so you guys don't have to spend hours reviewing code :D\n\nHow does it work? I know it doesn't work for all math expressions ( far from it ), but it is a start and a place to work from.\n No I do not have any additional changes to make.\n  @gunthercox  Just an FYI that the text is not formatting properly on PyPi.\n\nhttps://pypi.python.org/pypi/ChatterBot/0.2.9\n Awesome; I just wanted to make sure you were aware of the problem.\n  It turns out I made a minor mistake going with Pattern. Since it is not available on Python 3.x yet, we will need to change the logic adapter to use another SVO triplet identifier. We can use nlpnet, but that contains a fairly large dependency file which I am not sure is worth it. If that doesn't work, we could use a simple SVO triplet identifier I created using NLTK's built-in POS Tagger, but I am not confident in its ability to correctly identify the subject, verb, and object of complex sentences.\n\n@gunthercox what course of action would you prefer?\n Yes, and for that reason I'm leaning towards not implementing nlpnet. You can check out my current implementation here https://github.com/DarkmatterVale/regex4dummies/blob/master/regex4dummies/semantic_parsers/nltk_parser.py . It is a little rusty, but with some improvement we might be able to get it to work solidly for a large percentage of sentences.\n\nGood idea to move the commits over to a new branch. Sorry I didn't get the Travis-Ci build on; forgot to set it up until this morning when I saw the index error.\n Thank you for moving it. I will close this issue since it is not affecting the main branch anymore.\n  In this PR I added a Subject-Verb-Object triplet based logic adapter. This uses a library that I created, regex4dummies, to identify the dependencies within a sentence. Although very simple, it should still work well as a logic adapter.\n Thanks you!\n\nSure! I will add a quick overview ASAP.\n I just added a brief description. Is that what you were looking for? Or should I give a little more detail?\n  Compatible allows automatic security updating without fear of breakage.\n  bot throws errors for pure python parsing.\n\nshould python-levenshtein be a requirement when installed?\n  When I try to train using the example in the readme, I get this error:\n\ncode:\n\n``` python\n#!/usr/bin/env python\nfrom chatterbot import ChatBot\n\nbot = ChatBot(\"Terminal\",\n    storage_adapter=\"chatterbot.adapters.storage.JsonDatabaseAdapter\",\n    logic_adapter=\"chatterbot.adapters.logic.ClosestMatchAdapter\",\n    io_adapter=\"chatterbot.adapters.io.TerminalAdapter\",\n    database=\"database.db\")\n\nbot.train(\"chatterbot.corpus.english.greetings\")\n```\n\noutput:\n\n```\n[pons@australis-aurora code]$ ./chatting.py \nTraceback (most recent call last):\n  File \"./chatting.py\", line 10, in <module>\n    bot.train(\"chatterbot.corpus.english.greetings\")\n  File \"/usr/lib64/python2.7/site-packages/chatterbot/chatterbot.py\", line 152, in train\n    self.trainer.train_from_corpora(corpora)\n  File \"/usr/lib64/python2.7/site-packages/chatterbot/training.py\", line 34, in train_from_corpora\n    corpus_data = self.corpus.load_corpus(corpus)\n  File \"/usr/lib64/python2.7/site-packages/chatterbot/corpus/corpus.py\", line 55, in load_corpus\n    corpus = self.read_corpus(corpus_path)\n  File \"/usr/lib64/python2.7/site-packages/chatterbot/corpus/corpus.py\", line 30, in read_corpus\n    with open(file_name) as data_file:    \nIOError: [Errno 2] No such file or directory: '/usr/lib64/python2.7/site-packages/chatterbot/corpus/data/english/greetings'\n```\n\nis something just not installing?\n you're awesome :) <3\n  Closes #71\n Would it help if the test_similar_sentence_gets_same_response_multiple_times functions checks all the values present in in_response_to list?\n Hey @gunthercox, this is an existing behavior. Without my code change, this is how the db looks.\n\nTraining set: \n\n``` python\ntraining = [\n                \"how do you login to gmail?\",\n                \"Goto gmail.com, enter your login information and hit enter!?\"\n           ]\n```\n\ndb after training:\n\n``` json\n{\n    \"Goto gmail.com, enter your login information and hit enter!?\": {\n        \"in_response_to\": [\n            [\n                \"how do you login to gmail?\",\n                1\n            ]\n        ]\n    },\n    \"how do you login to gmail?\": {\n        \"in_response_to\": []\n    }\n}\n```\n\nIf you ask the same question twice,\n\n``` python\nchatbot.get_response('how do you login to gmail?')\n```\n\n``` json\n{\n    \"Goto gmail.com, enter your login information and hit enter!?\": {\n        \"in_response_to\": [\n            [\n                \"how do you login to gmail?\",\n                1\n            ]\n        ]\n    },\n    \"how do you login to gmail?\": {\n        \"in_response_to\": [\n            [\n                \"Goto gmail.com, enter your login information and hit enter!?\",\n                1\n            ]\n        ]\n    }\n}\n```\n\nAs you pointed out, the bot now thinks that the answer to `Goto gmail.com, enter your login information and hit enter!?` is `how do you login to gmail?`. But this is clearly wrong. This is caused by this piece of code in `ChatBot.get_response`\n\n``` python\nprevious_statement = self.get_last_statement()\n\nif previous_statement:\n    input_statement.add_response(previous_statement)\n\n```\n\nMy changes in the `get_response` function will only add the closest matching question/statement to the `in_response_to` field. This is the snapshot of the db after _how do I login to gmail?_ is asked.\n\n``` json\n{\n    \"Goto gmail.com, enter your login information and hit enter!?\": {\n        \"in_response_to\": [\n            [\n                \"how do you login to gmail?\",\n                1\n            ],\n            [\n                \"how do I login to gmail?\",\n                1\n            ]\n        ]\n    },\n    \"how do I login to gmail?\": {\n        \"in_response_to\": []\n    },\n    \"how do you login to gmail?\": {\n        \"in_response_to\": []\n    }\n}\n```\n\nNow, if the same question is asked repeatedly, it updates the db like this.\n\n``` json\n{\n    \"Goto gmail.com, enter your login information and hit enter!?\": {\n        \"in_response_to\": [\n            [\n                \"how do you login to gmail?\",\n                1\n            ],\n            [\n                \"how do I login to gmail?\",\n                1\n            ]\n        ]\n    },\n    \"how do I login to gmail?\": {\n        \"in_response_to\": [\n            [\n                \"Goto gmail.com, enter your login information and hit enter!?\",\n                1\n            ]\n        ]\n    },\n    \"how do you login to gmail?\": {\n        \"in_response_to\": []\n    }\n}\n```\n\nThe bug I'm trying to fix here is, if a similar question (how do _i_ login to gmail) - to the one in the training set (how do _you_ login to gmail) - is asked multiple times, the bot replies properly the first time. From then onwards, it will return a random answer to the same question. This is because, the first time the question is asked, it is going to add this to the db.\n\n``` json\n\"how do I login to gmail?\": {\n    \"in_response_to\": []\n}\n```\n\nThe next time the same question is asked, the closest match logic will find this statement and since this question is not configured to have a response, the bot returns a random answer.\n @gunthercox - no problem! I guess you are apologising too much ;)\n\nI'd like to contribute more. Last few weeks have been too busy for me and couldn't start the context feature we discussed. Hope I can start it this week!\n  I have commented the \"print\" statement in terminal.py in adapters/io/,\nbecause,\nchatterbot.ChatBot.get_response(\"Some query\"), would return a response as well as print that. It was getting printed because of the print statement in terminal.py. Removing that solves the issue. \n  Hey, I'm using chatterbot for one of my projects. I installed via pip, but the bot.train(\"chattbot.corpus.english\") caused a \"no module named english\" error. I noticed the greetings.json and the conversations.json weren't included in the pip install. However, after I copied them both into the chatterbot I was still getting the same error. I added a quick fix so your readme works, if you just do a full path on train the json files are added. \n For sure, I understood it wasn't a typo. Probably could have made that\nclearer. I was pointing out a quick fix while you fix the bug so if people\nwant to use your code they won't have issues. The two things I saw were:\ngreetings.json + conversations.json weren't included in the pip install.\nand the english module isn't loading correctly. Best of luck.\n\nOn Sun, Oct 25, 2015 at 7:50 AM, Gunther Cox notifications@github.com\nwrote:\n\n> Closed #68 https://github.com/gunthercox/ChatterBot/pull/68.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/gunthercox/ChatterBot/pull/68#event-444851376.\n\n## \n\nLeif Waldner\nEngineering Computer Science\nUniversity of Colorado, Boulder\nLead Web Developer\n  In [5]: chatbot.train('chatterbot.corpus.english')\n\nAttributeError                            Traceback (most recent call last)\n<ipython-input-5-508e33bbf87d> in <module>()\n----> 1 chatbot.train('chatterbot.corpus.english')\n\n/usr/lib64/python2.7/site-packages/chatterbot/chatterbot.pyc in train(self, conversation, _args, *_kwargs)\n    150 \n    151             if corpora:\n--> 152                 self.trainer.train_from_corpora(corpora)\n    153         else:\n    154             self.trainer.train_from_list(conversation)\n\n/usr/lib64/python2.7/site-packages/chatterbot/training.pyc in train_from_corpora(self, corpora)\n     31     def train_from_corpora(self, corpora):\n     32         for corpus in corpora:\n---> 33             corpus_data = load_corpus(corpus)\n     34             for data in corpus_data:\n     35                 for pair in data:\n\n/usr/lib64/python2.7/site-packages/chatterbot/corpus/utils.pyc in load_corpus(corpus_path)\n     16     from types import ModuleType\n     17 \n---> 18     corpus = import_module(corpus_path)\n     19 \n     20     if isinstance(corpus, ModuleType):\n\n/usr/lib64/python2.7/site-packages/chatterbot/utils/module_loading.pyc in import_module(dotted_path)\n     12     module = importlib.import_module(module_path)\n     13 \n---> 14     return getattr(module, module_parts[-1])\n\nAttributeError: 'module' object has no attribute 'english'\n I just tested my installation and got the same issue.\n thank you @gunthercox \n  This sounds like a good idea. You might also want to think about providing the POS tags of the sentence in the new format. Although it only takes a short amount of time to calculate part of speech for every word, on databases that are large that time could add up. The format that I propose would be something similar to this:\n\n```\n{\n     \"text\": \"Response text\",\n     \"pos_tags\": [('Response', 'NN'), ('text', 'NN')],\n     \"occurrence\": 4\n}\n```\n Have you had a chance to work on updating this? If so, what have your results shown? Is there any performance improvement using the current logic adapters?\n Ok, just checking in...\n  Why did you decide to go with path_similarity as opposed to wup_similarity? The advantage of wup_similarity is that it predicts based on the most specific sense of the word, which might give you a better result depending on what synsets are available for any given word.\n No problem! Let me know if I can help in any way. Give me a little lead time though, because I'm currently working on adding a logic adapter for using SVO comparisons ( which requires I redesign part of my regex4dummies library, so its taking a little while ).\n  I am curious about which of the following features are available;\n- enriching or at least retaining a context during a dialogue \n- learning from humans\n- making prediction or/and deduction based on available knowledge\n\nAnother thing is: Is it just simple statement matcher in which user questions and bot questions have to be the exactly same?\n\nFor instance, suppose i trained the bot with:\nq: \"where is the post office? \"\na: \"it is right behind you\"\n\nand user may ask like this:\nq: \"looking for the post office\"\n\nWhat will the chatbot give to the user?\n :+1: very detailed explanation. I couldn't find this information anywhere, maybe you can consider to present it in this project's wiki pages.\n In near future, I may make some contribution to this project because I am planning to use something similar to  chatterbot in one of my spare time works. Thank you. \n  You should take a look at the twisted framework\n There are a lot for python, I can try to write one. I already did some irc stuff in the past with python. But never really used twisted for this. Only circuits so far, which is async as well. The most straight forward way would be to use socket. http://wiki.shellium.org/w/Writing_an_IRC_bot_in_Python Without adding the twisted dependency or one for any other library. Keep in mind that the bot needs it's own loop.\n I doubt that. IRC has a constant stream which you buffer periodically. I doubt your email adapter works like that. (If I understand the irc protocol correctly)\n What I have researched of IRC is that it requires you to \"Pong its Pings\", which could really be a problem if you start to get more and more information in your database (because of processing time), so you would have to have it ping ponging and trying to find a proper response for the message in a different thread or vice versa\n\nWorking on it, and will a little tomorrow\n In IRC your database can get easily > 1.3MB which gave me a processing time of more than 20 Minutes for a single response, even with MongoDB.\n @bloodywing do you mean a tails file for the IRC? I am referring to accessing the MongoDB that holds all of the i/o for the chatbot itself\n @LucasZielke Nope, I mean the json file handler but thats a problem with chatterbot itself when. What you want to do with the bot is idling in the irc and following conversations and respond when the boot sees a specific keyword (like the botname or !botrespond) I already did something similar with the bot on a simple website with message system and an API and parsed the conversation. But should the bot save all lines in irc? And use them to respond? This is what I mean, if you save everything in irc you DB would get huge.\n @bloodywing  Haha if it saved all of the convo from the irc channel youd make one cruel bot\n\nWould the best way to implement the response while ping ponging be to multi thread the ping ponging and in the foreground be looking for the proper response?\n > Would the best way to implement the response while ping ponging be to multi thread the ping ponging and in the foreground be looking for the proper response?\n\nThis is how I do it in my IRC bot that is based on async.  My bot is modular and threaded and It replies to the ping/pongs when needed, then feeds for example what is being said in a channel to any plugin that needs it (or only when there is a certain trigger). \n  I'm already running a chatbot through [discord.py](https://github.com/rapptz/discord.py). I'm running this as a separate script, but maybe it would make sense as an IO adapter?\n I'm pleased with how my bot is working out. The repo in which I've written my code is [here](https://github.com/The-Penultimate-Defenestrator/bergerbot) if you want to take a look at how I'm using discord with chatterbot\n :package: \n  Hi when i tried running chatterbox with default data base it exits with KeyError: 'in_response_to'\n\n```\n  File \"terminal_example.py\", line 36, in <module>\n    bot_input = bot.get_response(user_input)\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.2.5-py2.7.egg/chatterbot/chatterbot.py\", line 118, in get_response\n    in_response_to__contains=closest_match.text\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.2.5-py2.7.egg/chatterbot/adapters/storage/jsondatabase.py\", line 56, in filter\n    if self._all_kwargs_match_values(kwargs, values):\n  File \"/usr/local/lib/python2.7/dist-packages/ChatterBot-0.2.5-py2.7.egg/chatterbot/adapters/storage/jsondatabase.py\", line 37, in _all_kwargs_match_values\n    if kwarguments[kwarg] not in values[kwarg_parts[0]]:\nKeyError: 'in_response_to'\n```\n  Using Cortical.io's ( http://www.cortical.io ) Semantic Folding Engine, the chat bot might be able to get better performance when identifying the best response for a given input. I'm not sure how well this would work, but it is definitely something to consider.\n\nI'm still researching this, so I'll hopefully have more details on this soon. Have you heard about this before @gunthercox ?\n That's exactly what I was thinking.\n\nIt should be pretty simple to get it to work, but I don't know how effective it would be. Cortical.io seems to relate some similar words to each other very well, but not well for others ( I'm using their demos to explore ). Hopefully I'll get a chance within a couple of days to try to add a logic adapter for this, as long as you would not like to do it yourself?\n Sorry for the late reply....Got caught up in some other work. I will be testing this weekend, and will let you know how it goes.\n I'm currently in contact with them and trying to work out some issues/enhancements with the Python-SDK.\n\nIs there currently any way to send information to a LogicAdapter? To add this as a logic adapter, an API-Key will be required to be given to the logic adapter.\n That sounds like a very elegant way of doing this. Much more elegant than how I would have done it had I not have talked this through :)\n\nAs soon as they give some documentation (which is still apparently on their \"backlog\"), I will get right on this and add a new logic adapter. Sorry for the delay!\n just stumbled across this thread of yours, and not knowing whether you've actually implemented an adapter to the Cortical.io API or not, i thought i should point out that there is a new, simplified Python client to that API: https://github.com/cortical-io/retina-sdk.py\n  The new adapter allows the user to get a response from the chat bot without having that response displayed ( in the terminal, for example ).\n Awesome. Let me know if you have any problems with it.\n  @gunthercox why haven't you merged this yet? It looks like a great addition for ChatterBot.\n  ```\nvalues = list(statement)[0]\n```\n\nIndexError: list index out of range\n  probably a simple oversight, but trying to run your terminal example i get the following error:\n`AttributeError: 'ChatBot' object has no attribute 'get_input'`\n\nhave successfully imported the module and 'dir'd around the objects a bit, but can't see a get_input method anywhere. do i need to explicitly import Terminal?\nthanks!\n great. that's done it.  sorry if that was documented elsewhere.  keep up the good work!\n  I am doing some research on chatting bots for studying purposes, but I have never done any Python programming before and coming from a Java background, the database creation is pure black magic to me. Can you please point me in a direction on how I can add 1 additional \"column\" to the list of values stored?\n\nI need to add a \"score_value\" to the database so I can measure how many points an user made throughout a chat session with the bot. \n\nThanks.\n That did what I wanted. Thanks for your help :D\n Just one more thing, how can I change the train method to allow passing a score? I realized that the previous change will only affect the chosen entry. I am looking for a way to pass the scores during the train phase as well.\n Thanks.\n  So my plan was, to make a irc bot that would learn from logs and then be in the channel.\n\nI fed it about 25k lines of logs from a large log file, and then I decided to test it out.\n\nI asked it something, then waited for it to respond, it was taking about 40% CPU usage, and I waited an hour for it to respond. Nothing. \n\nAlso I am on PyPy so the default json library is already very fast\n Okay I'll give it a try, thanks!\n  On my computer the bot delays a few seconds between inputs when I train with with 1000 example lines. It gets worse the more training data there is. Is there any way to speed up the performance, or is this just the nature of the beast?\n Discovered this project after CleverBot's api (undocumented) went down.\n\nI work daily with Elasticsearch, I think combined w/this (only have _just_ started reviewing the code), it could probably be made to scale very well.  Haven't looked yet how the JSON fields correlate to responses (FYI elasticsearch is JSON)--but I imagine the features of elasticsearch'es SEARCH could be used to greatly improve the speed of responses.\n\nSuper easy to get going w/Elasticsearch too if you aren't familiar.  It's a self-contained jar, cross-platform.\n Closing this one off as it is a duplicate of https://github.com/gunthercox/ChatterBot/issues/45\n brizzbane - Did u create Elasticsearch  +ChatterBot adapter ?  \n  The command `from chatterbot import Terminal` gives me a `cannot import name Terminal` error. This also happens with `TalkWithCleverBot` and I suspect every import except for `ChatBot`.\n I suspect this happened after https://github.com/gunthercox/ChatterBot/commit/ffebc964e4ff68103d5613188f5359b9f098ece8, which was part of the current efforts to split things up into individual modules.\n  I'm getting the error \"No such file or directory: 'requirements.txt'\" when running `pip install chatterbot`. I think this might be because you don't include 'requirements.txt' in your `MANIFEST.in` file.\n    Hi - great project, I'm having fun playing around with it. (Built a small Shakespeare chat bot, feeding it Hamlet via `nltk.corpus.gutenberg` to train with.) \n\nWould it be possible, when training the bot with a conversation between Person 1 and Person 2, to weight, say, Person 1's responses more heavily? That is, the bot would learn about context and human language, generally, from the dialogue, but it would more often mimic the sentence structure, grammar and vocab from Person 1. It would thus assume Person 1's \"personality\".\n  Fixed two typos.\n  Is \"You're\" intentionally misspelt to add realism? ;)\n  Closed by 32bd5977a51e7ced7f0068006c65c703a8130d51\nI'm closing this one off because using a markov chain based algorithm to generate new statements isn't an accurate way to produce responses to statements.\n        `assertLess` and `assertGreater` aren't available in Python 2.6.\n\nI'm not sure how critical Python 2.6 support is for ChatterBot.\n  [![Coverage Status](https://coveralls.io/builds/1842907/badge)](https://coveralls.io/builds/1842907)\n\nCoverage decreased (-8.55%) to 39.08% when pulling **e90b34334dce7753b6e6e232f11216f1f677a0ec on json_format** into **8c76c27dc81afd6b00c032821656eb428d4a4d36 on master**.\n  Never used github, so sorry if this is in the wrong place for this or format. \n\nSeems that chatterbot is creating converstation files that contain an empty line at the end, which converstation.py tries to read. My fix was just to check the line is not empty:\n\n```\n        # Continue only if the file contains lines\n        if lines:\n            previous_statement = None\n            for line in lines:\n                if line:\n                    user, date, text = line\n```\n Wow, that was a quick response! Happy to help. \n  [![Coverage Status](https://coveralls.io/builds/1799968/badge)](https://coveralls.io/builds/1799968)\n\nCoverage decreased (-3.05%) to 43.05% when pulling **6c3b234d2eb6692976f96ca253b83c73d6fea00c on social** into **ebf7a26f6c19d9166284d08b9bfddb975ce2d97c on master**.\n [![Coverage Status](https://coveralls.io/builds/1800016/badge)](https://coveralls.io/builds/1800016)\n\nCoverage increased (+3.79%) to 49.89% when pulling **6bb5b87d9da2c251fb31696da60f8a520fe49859 on social** into **ebf7a26f6c19d9166284d08b9bfddb975ce2d97c on master**.\n  Hi i am using your chatbot but it only uses the engrams. Everything i say it does not save it just follows the engrams conversation how do i make it remember the conversation and create a engram so i can train it through talking? Like cleverbot?\n  added some small changes to original code to fix some bugs . Although those functions were not being used . Still helps in keeping the code clean .\n [![Coverage Status](https://coveralls.io/builds/1690979/badge)](https://coveralls.io/builds/1690979)\n\nCoverage remained the same when pulling **638878bfb41a2663acb7ee378d971ec0e210eefa on PaarthBatra:newmaster** into **eee1303805fb516d03985cf3d4b5f67602ad371d on gunthercox:master**.\n [![Coverage Status](https://coveralls.io/builds/1691063/badge)](https://coveralls.io/builds/1691063)\n\nCoverage remained the same when pulling **2de82a504ecdeae2790ba7226a2f86dbfff971dc on PaarthBatra:newmaster** into **eee1303805fb516d03985cf3d4b5f67602ad371d on gunthercox:master**.\n Not yet . \n  I am still in the process of reading the chatterbot and gettting more familiar slowly . \n\nI found some bugs like in conversations.py 's Statement class function detect_sentiment \n\n```\ndef detect_sentiment():\n        \"\"\"\n        A property that describes hows the \n        \"\"\"\n\n        if self.sentiment:\n            return self.sentiment\n\n        # Evaluate the sentiment of the statement\n        #else:\n```\n\nnot sure if we are using this function anywhere however it still miss a self i.e. correct one should be \n\n```\ndef detect_sentiment(self):\n        \"\"\"\n        A property that describes hows the \n        \"\"\"\n\n        if self.sentiment:\n            return self.sentiment\n\n        # Evaluate the sentiment of the statement\n        #else:\n```\n\nsimilarly something wrong in \n\n```\ndef get_sentiment(name):\n        \"\"\"\n        Returns the average sentiment for a single user throughout a\n        conversation.\n        \"\"\"\n        sentiment = []\n        for statement in self:\n            if statement.name == name:\n                sentiment.append(statement)\n\n        return \"\" #TODO: return the average sentiment\n```\n\ncan i do a change in it and add it in a new brach or is it best to raise a similar issue here \n  Few questions \nOnce we have mongo db to replace flat files conversations \n1. Do anyone who is using this project need to install its own instance of mondodb and have to open mongod.exe on their machine ?\n2. Will it replace flat files or can we have both flat files and mongodb in such a way if someone dont have db installed can still use flat files conversations ?\n3. Do we still need to specify logfiles directory ?\n4. How are we going to add default conversations to mongodb for every new installations ? \n That clears most of my doubts and Sorry about the typo Mongo -> Mondo . \n\nImplementation of DB as a replacement of flat files looks great . \nOnly thing i can suggest is we should create a CSV file or rather have a database dump ( like database dump in oracle ) by which anyone who will use this library can import database dump and can use it with some of default conversations and we must include that in the readme section so it becomes clear .\n\nI am not mach familiar with MongoDB as of now , installed it yesterday , its easy to install and yes db implementation should be far more better than flat files . \n Once the MongoDB implementation settles down, and we have a semi-reasonable API, it might be useful to extract it out into an adapter, so the data storage/source location could be swappable.  Considering there are different storage types out there for conversations (IRC chat logs come to mind, among many others), it would be useful to be able to still fall back on different storage engines instead of relying on just a single engine.\n  This updates the README to match [the OSS advertisement at Stack Overflow](http://meta.stackoverflow.com/a/281678/359284). It also wipes out the example API keys to prevent any possible confusion from those who do not read the text below the block.\n [![Coverage Status](https://coveralls.io/builds/1686946/badge)](https://coveralls.io/builds/1686946)\n\nCoverage remained the same when pulling **7aa09d335b469d99f728cddcd9c19240edcccd6d on kevin-brown:patch_1** into **075e282ec7ffda0162d0ac86f684676769735be2 on gunthercox:master**.\n  _Heads up: your link is dead_\n\nRemember that for the bot to be able to pass the Turing test, it should be able to answer questions like\n\n> Explain why the following story is funny/absurd:\n> \"A man walks into a bar and say 'Hello, it's me!' - but it wasn't him...\"\n\nMy point is that although your implementation might pass a restricted Turing test, aiming for the full version will require more semantic analysis.\n Turing questions\n\n[http://britell.com/misc/turing.html](http://britell.com/misc/turing.html)\n  Right now the tests are triggering an error on Travis because you are using `python-oauth2`, which is a library for OAuth 1 that does not support Python 3.\n\nYou may want to look into [`oauthlib`](https://github.com/idan/oauthlib) for generating the tokens, and [`requests-oauthlib`](https://github.com/requests/requests-oauthlib) for sending signed HTTP requests. It supports both OAuth 1 and OAuth 2.\n  Right now you are using OAuth 1 for Twitter, though it's recommended to use OAuth 2 instead.\n\nhttps://dev.twitter.com/oauth/application-only\n\nConsidering the other services listed here use OAuth 2, and act on individual users instead of the application, you may want to look into migrating to it.\n  Hi \n\nThis might not be a bug but rather a Question regarding bot . Can you advice How can be finish the chat with bot from terminal ?\n\nI mean do we need to terminate the program or is there any other way like saying bye or something like that ?\n I have more questions ? is this correct way to ask you questions of do you want me to ask questions somewhere else on email maybe ?\n `crtl c` wont work as i am using pycharm IDE on pycharm `crtl F2` is the command to terminate the program .\n\nI noticed whenever we terminate the program it gives this error before being terminated \n\n**_Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"C:\\Python2.7.5\\lib\\site-packages\\chatterbot__init__.py\", line 103, in b\negin\n    user_input = str(raw_input())\nEOFError**_\n\nI tried `crtl c` to terminate the program in python interpreter in my windows installation and got same error . Looks like a bug .\n\n`exit()` works great :+1: \n\nok i will ask  my questions here . Thanks \n > I noticed whenever we terminate the program it gives this error before being terminated\n\nThis is because `raw_input` is very likely pulling from an input stream, and because the input stream is suddenly empty, it hits an EOF (end of file/stream). It should probably be handled anyway.\n\n> There is two ways to end the chat with the bot, you can either terminate the program using crtl c or you can type exit() to end the terminal session.\n\nYou should actually use CTRL + d to exit out of the Python interpreter, as CTRL + C will raise a `KeyboardInterrupt` which _usually_ ends the program (because it is not handled). CTRL + D will send the exit signal, the same as executing `exit()`.\n `CTRL + D` does nothing .\n  from chatterbot import Terminal\nterminal = Terminal()\nterminal.log_directory=\"D:/python_logs/chatterbot/conversation_engrams\"\nterminal.begin()\n\nand for any input i just get No possible replies could be determined. How to fix this ?\n\nhi\n('bot', 'No possible replies could be determined.')\nhow r u ?\n('bot', 'No possible replies could be determined.')\n ok great Thanks , but how can i create more such  samples . For example for terminal chatting bot doesnt know what to answer for What is your name ? How can i add this to its library by just chatting . is it possible ?\n\nType something to begin...\nHI\n('bot', 'How are you doing?')\nWhat is your Name ?\n('bot', 'No possible replies could be determined.')\n ok . I have been reading [NLTK!](http://www.nltk.org) a lot recently and i was thinking to have a bot python program somewhat like you have and on searching i found this project . :+1:  \n\nJust to add some thoughts here , we should first select what type of bot it is . For example if we select a technical bot , the bot should import all the technical conversations , some historic and some standard books \n\nIf bot is for English grammar learning it should import only conversions which have standard English learning trainings .\n\nJust some thoughts .   \n That will be great . Can i help in some way ?\n ok great \n I have done some edit suggestions in the document . Please have a look . This is first time i am working on a open source project , Please let me know if i do something wrongly .\n  Using amazon linux and python 2.6.9 and installed chatterBot using pip \n\nRan basic examples and got this error  :\n\n```\n>>> from chatterbot import ChatBot\n>>> chatbot = ChatBot(\"Ron Obvious\")\n>>> response = chatbot.get_response(\"Good morning!\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'ChatBot' object has no attribute 'get_response'\n>>> chatbot = ChatBot()\n>>> response = chatbot.get_response(\"Good morning!\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nAttributeError: 'ChatBot' object has no attribute 'get_response'\n>>>\n```\n\nTried similarly in windows python2,7 and same issue . Any solution to this ?\n The PyPI release appears to be out of date with the latest master. You can verify this with the `0.0.2` tag on GitHub.\n\nhttps://github.com/gunthercox/ChatterBot/releases/tag/0.0.2\n\nThe README reflects the latest version, which has not yet been released. I would recommend installing ChatterBot using pip with the git repository\n\n```\npip install git+git://github.com/gunthercox/ChatterBot.git\n```\n The command for iinstalling it via git gives error as follows  \n\n(chatterbot)[l]$ pip install git+git://github.com/gunthercox/ChatterBot.git\nCollecting git+git://github.com/gunthercox/ChatterBot.git\n  Cloning git://github.com/gunthercox/ChatterBot.git to /tmp/pip-EV0Jq7-build\n  Cannot find command 'git'\n\nhowever for windows this worked \n  [![Coverage Status](https://coveralls.io/builds/1520032/badge)](https://coveralls.io/builds/1520032)\n\nCoverage decreased (-0.18%) when pulling **8869ca581486c6a81f18c5ec09f80f7035761bbb on conversation** into **97195129813857b5afe98ca62ee689c92e5f43f1 on master**.\n [![Coverage Status](https://coveralls.io/builds/1541031/badge)](https://coveralls.io/builds/1541031)\n\nCoverage increased (+4.07%) when pulling **81b327ea5d4519380a21b2a0c5aaf3a0039139d5 on conversation** into **97195129813857b5afe98ca62ee689c92e5f43f1 on master**.\n [![Coverage Status](https://coveralls.io/builds/1541647/badge)](https://coveralls.io/builds/1541647)\n\nCoverage increased (+6.8%) when pulling **3649cd1fd4431df0281f79824084685418896fa3 on conversation** into **97195129813857b5afe98ca62ee689c92e5f43f1 on master**.\n [![Coverage Status](https://coveralls.io/builds/1541763/badge)](https://coveralls.io/builds/1541763)\n\nCoverage increased (+7.13%) when pulling **f820a452fc157767ed64325bf9e8465c41cbe96d on conversation** into **97195129813857b5afe98ca62ee689c92e5f43f1 on master**.\n [![Coverage Status](https://coveralls.io/builds/1542297/badge)](https://coveralls.io/builds/1542297)\n\nCoverage increased (+9.46%) when pulling **71721738190eef8ffa2d068d1be348fac63189e1 on conversation** into **97195129813857b5afe98ca62ee689c92e5f43f1 on master**.\n [![Coverage Status](https://coveralls.io/builds/1543829/badge)](https://coveralls.io/builds/1543829)\n\nCoverage increased (+8.64%) when pulling **10a07a2edf77b8f2a7fe175cf8852edc779d9202 on conversation** into **97195129813857b5afe98ca62ee689c92e5f43f1 on master**.\n [![Coverage Status](https://coveralls.io/builds/1544034/badge)](https://coveralls.io/builds/1544034)\n\nCoverage increased (+8.86%) when pulling **ffec9a6982f1e6bdeb36c466f824161bf128244a on conversation** into **97195129813857b5afe98ca62ee689c92e5f43f1 on master**.\n  I would like to work on evaluate_mathematically. Is that alright? If so, is there anything you would like me to know or have any thoughts before I get started?\n\nAlso, just a few comments/questions that I would like to add.\n\n1) How do you plan on choosing which algorithms to apply? Even though you save the input, how will the chatbot know which input to actually use?\n2) How will you feed information to the find_a_name() method? For example, how would you train the bot to answer \"Who was the president of the United States in 1953?\"?\n3) What custom methods do you have in mind? Would you want to use my personal assistant as a means for executing custom methods? Or do you already have a plan in mind?\n Ok. I will take that into account.\n\nSorry for all of the changes on the commits....Github is not cooperating with me right now...EDIT: I have cleaned out my local repository but I am unable to fix the master branch. As soon as it is fixed, I will re clone, having only the correct code. Again, I apologize for the inconvenience.\n I'm going to be swamped for a little while because of Google Code In, but I will try to work on find_a_name() and get that done by the end of December. I will post a comment containing the specifics for how I plan to develop the algorithm to find a name ( or fact ) as soon as I can.\n Some clues about how to do semantic parsing of questions: http://cs.stanford.edu/~pliang/papers/freebase-emnlp2013.pdf\n\nBy the way, from my point of view some algorithms that could fit quite well into chatterbot are, a POS tagger, grammar rules from POS tags and custom dictionaries, a named entity recogniser, trigger classifiers (intention, interests, etc.) and access to a third party sources like wikipedia.\n\nGiving these capabilities, chatterbot could understand this kind of questions or statements:\n\nWhere is New York? \nWho is Albert Einstein?\nI usually play basketball at the New York Knick's Stadium  \nI would love to read a new book\n...\n\nI would love to help.\n @dmartincc It would definitely be a nice addition to have a \"utility kit\" for functions like this. We could create custom implementations of each to fit out needs, then use them when parsing input. I will look into adding something like this for chatterbot. @gunthercox What do you think?\n\nAlthough I would say you are making a little bit of a jump here; you can't just have those functions and then expect chatterbot to be able to respond to \"Who is Albert Einstein?\". It will require other work including a knowledge \"database\" & a way to parse through that information.\n I have done a lot with NLTK's built in functions, and I agree they are definitely a good place to start. Unfortunately, they tend to degrade in capability as the sentences and ideas get more complex, mainly because the functions are based on math, not semantic understanding. Because of this, we will eventually need to use a custom implementation (haven't really thought about the details yet).\n  This looks awesome.  Will past conversations be tied to a particular user? \n  This would be great. Is it possible somehow to make multiple chatterbot instances, and then periodically 'combine' their training into one database so that they all benefit from the others' experience?\n Great, thanks for the info.\n\nOn Sat, Dec 19, 2015 at 7:18 PM Gunther Cox notifications@github.com\nwrote:\n\n> Yes, one way that this would be possible would be to simply create a\n> number of chatterbot instances and set the parameter so that they all use\n> the same database.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/gunthercox/ChatterBot/issues/1#issuecomment-166035293\n> .\n", "text_all_count": 111215, "text_word_token": ["I", "be", "get", "the", "below", "mention", "error", "when", "run", "the", "server", "NUMBER", "Has", "anybody", "experienced", "it", "Python", "NUMBER", "Anaconda", "NUMBER", "NUMBER", "bit", "Django", "NUMBER", "dev", "NUMBER", "chatterbot", "NUMBER", "on", "run", "C", "Users", "JS", "scrapy", "ChatterBot", "examples", "django_app", "python", "manage", "NUMBER", "py", "runserver", "NUMBER", "NUMBER", "Unhandled", "exception", "in", "thread", "start", "by", "TAG", "NUMBER", "wrapper", "at", "NUMBER", "x", "NUMBER", "C", "NUMBER", "A", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "c", "users", "js", "scrapy", "django", "django", "utils", "autoreload", "NUMBER", "py", "line", "NUMBER", "in", "wrapper", "fn", "args", "kwargs", "File", "c", "users", "js", "scrapy", "django", "django", "core", "management", "commands", "runserver", "NUMBER", "py", "line", "NUMBER", "in", "inner_run", "autoreload", "NUMBER", "raise_last_exception", "File", "c", "users", "js", "scrapy", "django", "django", "utils", "autoreload", "NUMBER", "py", "line", "NUMBER", "in", "raise_last_exception", "raise", "_exception", "NUMBER", "_exception", "NUMBER", "NUMBER", "with_traceback", "_exception", "NUMBER", "File", "c", "users", "js", "scrapy", "django", "django", "utils", "autoreload", "NUMBER", "py", "line", "NUMBER", "in", "wrapper", "fn", "args", "kwargs", "File", "c", "users", "js", "scrapy", "django", "django", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "setup", "apps", "NUMBER", "populate", "settings", "NUMBER", "INSTALLED_APPS", "File", "c", "users", "js", "scrapy", "django", "django", "apps", "registry", "NUMBER", "py", "line", "NUMBER", "in", "populate", "app_config", "NUMBER", "import_models", "File", "c", "users", "js", "scrapy", "django", "django", "apps", "config", "NUMBER", "py", "line", "NUMBER", "in", "import_models", "self", "NUMBER", "models_module", "import_module", "models_module_name", "File", "C", "Users", "JS", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "return", "_bootstrap", "NUMBER", "_gcd_import", "name", "level", "package", "level", "File", "TAG", "line", "NUMBER", "in", "_gcd_import", "File", "TAG", "line", "NUMBER", "in", "_find_and_load", "File", "TAG", "line", "NUMBER", "in", "_find_and_load_unlocked", "File", "TAG", "line", "NUMBER", "in", "_load_unlocked", "File", "TAG", "line", "NUMBER", "in", "exec_module", "File", "TAG", "line", "NUMBER", "in", "_call_with_frames_removed", "File", "C", "Users", "JS", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "site", "package", "chatterbot", "ext", "django_chatterbot", "models", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "class", "AbstractBaseResponse", "models", "NUMBER", "Model", "File", "C", "Users", "JS", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "site", "package", "chatterbot", "ext", "django_chatterbot", "models", "NUMBER", "py", "line", "NUMBER", "in", "AbstractBaseResponse", "related_name", "in_response", "TypeError", "__init__", "miss", "NUMBER", "required", "positional", "argument", "on_delete", "Coverage", "Status", "LINK", "LINK", "Coverage", "increase", "NUMBER", "to", "NUMBER", "when", "pulling", "NUMBER", "c", "NUMBER", "d", "NUMBER", "fb", "NUMBER", "cf", "NUMBER", "cb", "NUMBER", "fba", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ea", "NUMBER", "c", "NUMBER", "d", "on", "models", "into", "b", "NUMBER", "cbd", "NUMBER", "eb", "NUMBER", "aed", "NUMBER", "f", "NUMBER", "b", "NUMBER", "d", "NUMBER", "b", "NUMBER", "f", "NUMBER", "c", "NUMBER", "e", "on", "master", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "increase", "NUMBER", "to", "NUMBER", "when", "pulling", "NUMBER", "c", "NUMBER", "d", "NUMBER", "fb", "NUMBER", "cf", "NUMBER", "cb", "NUMBER", "fba", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ea", "NUMBER", "c", "NUMBER", "d", "on", "models", "into", "b", "NUMBER", "cbd", "NUMBER", "eb", "NUMBER", "aed", "NUMBER", "f", "NUMBER", "b", "NUMBER", "d", "NUMBER", "b", "NUMBER", "f", "NUMBER", "c", "NUMBER", "e", "on", "master", "NUMBER", "Code", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "statement_comparison_function", "jaccard_similarity", "database", "chatterbot", "database", "I", "have", "install", "NLTK", "data", "and", "then", "i", "have", "change", "to", "jaccard_similarity", "algo", "NUMBER", "Please", "help", "me", "to", "solve", "this", "NUMBER", "Thanks", "in", "advance", "NUMBER", "Cosmos", "NUMBER", "This", "be", "an", "expected", "behavior", "those", "be", "only", "warning", "message", "but", "it", "will", "not", "stop", "your", "bot", "Python", "Calculate", "Jaccard", "similarity", "try", "ratio", "len", "set", "lemma_a", "NUMBER", "intersection", "lemma_b", "float", "len", "set", "lemma_a", "NUMBER", "union", "lemma_b", "except", "Exception", "as", "e", "print", "Error", "e", "return", "ratio", "self", "NUMBER", "SIMILARITY_THRESHOLD", "Did", "you", "bot", "program", "was", "terminated", "NLTK", "Naive", "Bayes", "Classifier", "LINK", "_modules", "nltk", "classify", "naivebayes", "NUMBER", "html", "only", "return", "NUMBER", "or", "NUMBER", "as", "confidence", "and", "it", "always", "return", "NUMBER", "wrongly", "when", "user", "input", "several", "characters", "e", "NUMBER", "g", "abc", "LINK", "_adapter", "NUMBER", "py", "L", "NUMBER", "why", "don", "t", "you", "use", "compare_statements", "in", "best", "match", "adapter", "which", "return", "a", "proper", "confidence", "and", "more", "standardized", "NUMBER", "LINK", "_match", "NUMBER", "py", "L", "NUMBER", "From", "which", "file", "and", "which", "line", "of", "the", "file", "can", "we", "enable", "read", "only", "mode", "of", "chatterbot", "Please", "Help", "Hello", "All", "This", "be", "not", "an", "issue", "NUMBER", "Just", "a", "question", "NUMBER", "I", "have", "build", "a", "chatbot", "use", "django", "use", "chatterbot", "NUMBER", "I", "want", "it", "to", "integrate", "in", "an", "exist", "NUMBER", "Net", "web", "application", "NUMBER", "I", "want", "to", "call", "this", "application", "from", "an", "exist", "NUMBER", "Net", "application", "NUMBER", "Please", "guide", "me", "if", "anyone", "has", "any", "information", "regard", "this", "NUMBER", "You", "see", "there", "be", "some", "things", "that", "be", "already", "maintained", "in", "one", "database", "and", "use", "for", "other", "purposes", "NUMBER", "One", "be", "get", "created", "for", "the", "conversation", "NUMBER", "For", "example", "let", "us", "say", "that", "the", "second", "database", "be", "use", "to", "get", "data", "from", "the", "net", "and", "store", "it", "there", "NUMBER", "So", "I", "need", "to", "answer", "the", "question", "from", "one", "database", "The", "Conversation", "and", "give", "the", "results", "of", "searches", "already", "there", "in", "the", "other", "database", "NUMBER", "What", "be", "the", "type", "of", "Network", "that", "be", "use", "to", "do", "the", "Machine", "learning", "in", "ChatterBot", "Can", "you", "tell", "me", "what", "be", "the", "network", "If", "it", "be", "not", "there", "then", "how", "can", "I", "do", "it", "NUMBER", "I", "mean", "which", "be", "the", "Neural", "Network", "Used", "Can", "I", "know", "how", "the", "saving", "and", "retrieval", "from", "database", "be", "happening", "In", "which", "program", "would", "I", "find", "this", "info", "so", "that", "I", "can", "plan", "my", "json", "file", "on", "specific", "format", "You", "will", "find", "line", "number", "NUMBER", "LINK", "Saving", "be", "fine", "retrival", "where", "be", "it", "do", "How", "the", "the", "processing", "be", "happening", "can", "you", "tell", "me", "Here", "be", "the", "process", "flow", "diagram", "LINK", "process", "flow", "diagram", "Some", "useful", "information", "you", "will", "find", "here", "LINK", "issuecomment", "NUMBER", "Can", "I", "get", "an", "example", "for", "the", "custom", "logic", "adapter", "to", "handle", "this", "NUMBER", "user", "Hi", "bot", "Hello", "How", "do", "you", "do", "bot", "Good", "afternoon", "bot", "How", "can", "I", "help", "you", "today", "I", "presume", "that", "there", "be", "a", "requirement", "for", "an", "custom", "output", "adapter", "NUMBER", "Kindly", "help", "me", "NUMBER", "Can", "this", "be", "do", "use", "a", "Custom", "Adapter", "in", "the", "present", "setup", "Hello", "I", "be", "interested", "in", "this", "engine", "and", "I", "want", "to", "build", "a", "chat", "bot", "with", "multiple", "logic", "adapters", "NUMBER", "Let", "s", "say", "one", "logic", "adapter", "for", "ask", "question", "relate", "to", "weather", "another", "logic", "adapter", "for", "booking", "events", "in", "calendar", "and", "more", "logic", "adapters", "NUMBER", "In", "this", "case", "I", "want", "to", "have", "one", "adapter", "to", "handle", "the", "input_statement", "and", "this", "adapter", "will", "match", "input_statement", "with", "logic", "adapter", "NUMBER", "My", "question", "be", "that", "be", "it", "possible", "to", "build", "chatbot", "to", "handle", "different", "purpose", "like", "this", "If", "it", "possible", "how", "can", "I", "implement", "multiple", "logic", "adapters", "like", "I", "describe", "above", "NUMBER", "Thanks", "Hello", "s", "NUMBER", "rata", "you", "could", "implement", "your", "willings", "with", "ChatterBot", "NUMBER", "First", "of", "all", "multiplelogic", "adapter", "have", "already", "implement", "in", "ChatterBot", "when", "you", "create", "it", "and", "it", "handle", "all", "of", "standart", "logic", "adapters", "LINK", "NUMBER", "How", "MultipleLogicAdapter", "works", "answer", "LINK", "logic", "adapter", "NUMBER", "html", "Seperate", "statement", "processing", "may", "be", "implement", "by", "use", "method", "can_process", "in", "LogicAdapter", "class", "NUMBER", "If", "input_statement", "satisfy", "to", "handle", "by", "your", "adapter", "e", "NUMBER", "g", "NUMBER", "weather", "you", "may", "set", "confidence", "NUMBER", "process", "it", "and", "MultipleLogicAdapter", "choose", "response", "from", "this", "adapter", "NUMBER", "If", "it", "possible", "how", "can", "I", "implement", "multiple", "logic", "adapters", "like", "I", "describe", "above", "NUMBER", "You", "don", "t", "need", "to", "implement", "multiple", "logic", "adapter", "again", "or", "reimplement", "it", "you", "just", "need", "implement", "your", "LogicAdapter", "and", "method", "can_proces", "as", "I", "describe", "above", "Hi", "NUMBER", "Can", "you", "provide", "an", "example", "where", "we", "use", "one", "sql", "database", "to", "respond", "and", "a", "second", "response", "from", "another", "sql", "database", "use", "this", "MultipleLogicAdapter", "skanda", "NUMBER", "In", "the", "case", "that", "I", "describe", "above", "we", "use", "one", "database", "for", "all", "logic", "adapters", "NUMBER", "You", "can", "t", "use", "several", "databases", "in", "one", "ChatterBot", "to", "process", "different", "logic", "adapters", "NUMBER", "There", "be", "no", "such", "functionality", "NUMBER", "If", "you", "think", "that", "each", "logic", "adapter", "should", "keep", "statements", "in", "different", "databases", "I", "recommend", "you", "review", "your", "project", "architecture", "NUMBER", "NUMBER", "You", "see", "there", "be", "some", "things", "that", "be", "already", "maintained", "in", "one", "database", "and", "use", "for", "other", "purposes", "NUMBER", "One", "be", "get", "created", "for", "the", "conversation", "NUMBER", "For", "example", "let", "us", "say", "that", "the", "second", "database", "be", "use", "to", "get", "data", "from", "the", "net", "and", "store", "it", "there", "NUMBER", "So", "I", "need", "to", "answer", "the", "question", "from", "one", "database", "The", "Conversation", "and", "give", "the", "results", "of", "searches", "already", "there", "in", "the", "other", "database", "NUMBER", "NUMBER", "Can", "you", "at", "least", "give", "an", "example", "for", "multiple", "outputs", "for", "a", "single", "statement", "E", "NUMBER", "g", "NUMBER", "User", "Hi", "Bot", "Hello", "How", "be", "you", "doing", "Bot", "Good", "Afternoon", "Bot", "How", "can", "I", "help", "you", "today", "Where", "do", "I", "have", "make", "the", "change", "to", "the", "code", "skanda", "NUMBER", "Can", "you", "at", "least", "give", "an", "example", "for", "multiple", "outputs", "for", "a", "single", "statement", "See", "documentation", "for", "MultipleLogicAdapter", "link", "LINK", "logic", "adapter", "NUMBER", "html", "selecting", "a", "response", "from", "multiple", "logic", "adapters", "The", "MultiLogicAdapter", "be", "use", "to", "select", "a", "single", "response", "from", "the", "responses", "returned", "by", "all", "of", "the", "logic", "adapters", "that", "the", "chat", "bot", "has", "be", "configured", "to", "use", "NUMBER", "Each", "response", "returned", "by", "the", "logic", "adapters", "include", "a", "confidence", "score", "that", "indicates", "the", "likeliness", "that", "the", "returned", "statement", "be", "a", "valid", "response", "to", "the", "input", "NUMBER", "Therefore", "I", "can", "t", "get", "such", "example", "NUMBER", "If", "I", "m", "not", "mistaken", "first", "database", "only", "with", "question", "another", "one", "be", "answers", "NUMBER", "For", "use", "Chatterbot", "you", "should", "preprocess", "this", "databases", "into", "one", "training", "format", "for", "example", "into", "NUMBER", "yml", "file", "contain", "question", "and", "answers", "line", "by", "line", "NUMBER", "This", "data", "you", "may", "use", "to", "train", "ChatterBot", "and", "then", "use", "to", "search", "correct", "answers", "in", "database", "use", "LogicAdapters", "NUMBER", "I", "haven", "t", "see", "other", "ways", "NUMBER", "NUMBER", "No", "One", "be", "with", "question", "and", "Answers", "NUMBER", "Another", "be", "a", "search", "of", "all", "hotels", "and", "taxis", "in", "the", "area", "NUMBER", "thank", "you", "NUMBER", "So", "from", "what", "you", "said", "the", "Multi", "Adapter", "class", "will", "handle", "this", "for", "me", "NUMBER", "What", "I", "need", "to", "do", "be", "to", "classify", "the", "input_statement", "to", "match", "with", "adapter", "NUMBER", "I", "think", "I", "have", "an", "idea", "for", "now", "NUMBER", "Thank", "again", "NUMBER", "vkosuri", "NUMBER", "be", "similar", "NUMBER", "But", "that", "somehow", "give", "me", "another", "idea", "of", "what", "I", "want", "to", "do", "NUMBER", "Thank", "for", "point", "that", "out", "NUMBER", "NUMBER", "vkosuri", "Is", "there", "any", "text", "classifier", "library", "for", "python", "you", "can", "recommend", "Because", "I", "intend", "to", "use", "it", "to", "categorize", "the", "input_statement", "NUMBER", "Am", "I", "going", "to", "the", "right", "direction", "Sorry", "to", "ask", "like", "this", "since", "I", "be", "new", "to", "this", "NUMBER", "Thank", "again", "NUMBER", "I", "recommend", "you", "to", "look", "textblob", "nltk", "link", "with", "more", "info", "LINK", "nlp", "libraries", "NUMBER", "Thank", "you", "for", "your", "recommendation", "NUMBER", "s", "NUMBER", "rata", "Please", "feel", "free", "ask", "any", "question", "if", "you", "need", "information", "NUMBER", "Some", "of", "the", "resources", "that", "might", "help", "you", "NUMBER", "NUMBER", "LINK", "nltk", "pos", "tag", "not", "returning", "the", "correct", "part", "of", "speech", "tag", "NUMBER", "Facts", "and", "figures", "LINK", "vkosuri", "Thank", "you", "NUMBER", "Hi", "I", "have", "add", "a", "custom", "corpus", "NUMBER", "my", "directory", "structure", "be", "as", "follows", "circus", "example_app", "CustomCorpus", "oneWindow", "NUMBER", "yml", "and", "my", "Settings", "NUMBER", "py", "looks", "like", "this", "Python", "CHATTERBOT", "name", "Django", "ChatterBot", "Example", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "training_data", "circus", "NUMBER", "example_app", "NUMBER", "CustomCorpus", "When", "I", "be", "run", "manage", "NUMBER", "py", "train", "I", "be", "get", "the", "following", "error", "Bash", "C", "Python", "NUMBER", "python", "NUMBER", "exe", "C", "Python", "NUMBER", "Scripts", "circus", "manage", "NUMBER", "py", "train", "Traceback", "most", "recent", "call", "last", "File", "C", "Python", "NUMBER", "Scripts", "circus", "manage", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "execute_from_command_line", "sys", "NUMBER", "argv", "File", "C", "Python", "NUMBER", "lib", "site", "package", "django", "core", "management", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "execute_from_command_line", "utility", "NUMBER", "execute", "File", "C", "Python", "NUMBER", "lib", "site", "package", "django", "core", "management", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "execute", "self", "NUMBER", "fetch_command", "subcommand", "NUMBER", "run_from_argv", "self", "NUMBER", "argv", "File", "C", "Python", "NUMBER", "lib", "site", "package", "django", "core", "management", "base", "NUMBER", "py", "line", "NUMBER", "in", "run_from_argv", "self", "NUMBER", "execute", "args", "cmd_options", "File", "C", "Python", "NUMBER", "lib", "site", "package", "django", "core", "management", "base", "NUMBER", "py", "line", "NUMBER", "in", "execute", "output", "self", "NUMBER", "handle", "args", "options", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "ext", "django_chatterbot", "management", "commands", "train", "NUMBER", "py", "line", "NUMBER", "in", "handle", "chatterbot", "NUMBER", "train", "chatterbot", "NUMBER", "training_data", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "corpora", "self", "NUMBER", "corpus", "NUMBER", "load_corpus", "corpus_path", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot_corpus", "corpus", "NUMBER", "py", "line", "NUMBER", "in", "load_corpus", "corpus", "self", "NUMBER", "read_corpus", "file_path", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot_corpus", "corpus", "NUMBER", "py", "line", "NUMBER", "in", "read_corpus", "with", "io", "NUMBER", "open", "file_name", "encoding", "utf", "NUMBER", "as", "data_file", "IOError", "Errno", "NUMBER", "No", "such", "file", "or", "directory", "circus", "example_app", "CustomCorpus", "Please", "help", "NUMBER", "The", "issue", "be", "solve", "NUMBER", "Please", "close", "this", "NUMBER", "In", "Django", "admin", "the", "chatterbot", "conversion", "table", "be", "empty", "after", "training", "has", "be", "performed", "use", "python", "manage", "NUMBER", "py", "train", "The", "above", "code", "populates", "the", "statement", "and", "response", "tables", "with", "the", "training", "data", "based", "on", "the", "yml", "file", "NUMBER", "This", "be", "fine", "NUMBER", "However", "during", "test", "the", "statements", "posted", "to", "the", "chatbot", "and", "the", "response", "ought", "to", "go", "to", "the", "empty", "conversation", "table", "and", "should", "not", "be", "add", "to", "the", "trained", "statement", "and", "respond", "data", "table", "NUMBER", "vkosuri", "thanks", "a", "lot", "NUMBER", "Here", "be", "my", "final", "recommendation", "based", "on", "our", "StackExchange", "LINK", "chatterbot", "conversation", "table", "in", "django", "admin", "NUMBER", "NUMBER", "I", "feel", "that", "there", "be", "duplication", "going", "on", "and", "I", "hope", "future", "chatterbot", "release", "would", "correct", "this", "NUMBER", "The", "conversation", "table", "should", "only", "contain", "the", "user", "s", "statement", "that", "be", "posted", "and", "the", "response", "NUMBER", "The", "Statement", "and", "Response", "table", "ought", "to", "have", "only", "the", "training", "data", "as", "populated", "use", "python", "manage", "train", "and", "nothing", "else", "from", "the", "user", "s", "input", "NUMBER", "Using", "the", "BestMatchAdapter", "of", "Chatterbot", "it", "confuses", "two", "question", "with", "the", "same", "answer", "NUMBER", "For", "example", "training", "the", "ai", "NUMBER", "yml", "NUMBER", "What", "be", "ai", "Artificial", "Intelligence", "be", "the", "branch", "of", "engineering", "and", "science", "devoted", "to", "constructing", "machines", "that", "think", "NUMBER", "What", "be", "a", "joke", "Artificial", "Intelligence", "be", "the", "branch", "of", "engineering", "and", "science", "devoted", "to", "constructing", "machines", "that", "think", "NUMBER", "On", "the", "other", "hand", "the", "following", "similar", "question", "make", "much", "sense", "in", "the", "bot", "answer", "Can", "you", "bend", "No", "I", "can", "be", "perpetuated", "indefinitely", "NUMBER", "Can", "you", "lie", "No", "I", "can", "be", "perpetuated", "indefinitely", "NUMBER", "This", "adjustment", "makes", "it", "work", "vkosuri", "much", "credit", "for", "your", "suggestion", "NUMBER", "CHATTERBOT", "name", "Tech", "Support", "Bot", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "statement_comparison_function", "chatterbot", "NUMBER", "comparisons", "NUMBER", "levenshtein_distance", "response_selection_method", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_first_response", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "I", "be", "work", "with", "Django", "and", "Infra", "NUMBER", "I", "have", "read", "all", "the", "given", "example", "in", "the", "repo", "NUMBER", "But", "it", "do", "focus", "on", "training", "dataset", "feedback", "NUMBER", "etc", "How", "to", "let", "Chatbot", "execute", "Django", "query", "and", "OS", "commands", "I", "be", "considering", "the", "very", "simple", "plain", "task", "like", "NUMBER", "How", "many", "orders", "be", "the", "this", "month", "Then", "I", "expect", "Chatbot", "be", "able", "to", "execute", "my", "given", "custom", "management", "commands", "NUMBER", "Or", "How", "long", "do", "server", "up", "without", "reboot", "Then", "I", "expect", "Chatbot", "be", "able", "to", "execute", "uptime", "directly", "to", "OS", "level", "NUMBER", "This", "technique", "be", "similar", "to", "customer", "management", "commands", "NUMBER", "But", "I", "branch", "a", "question", "since", "I", "do", "not", "know", "the", "technical", "implementation", "behind", "the", "scenes", "NUMBER", "However", "in", "opinion", "NUMBER", "I", "think", "first", "solution", "can", "be", "able", "to", "reuse", "with", "NUMBER", "one", "NUMBER", "LINK", "an", "external", "command", "in", "python", "Your", "answer", "be", "about", "how", "to", "config", "Chatbot", "and", "let", "it", "shares", "Django", "database", "NUMBER", "Sorry", "I", "train", "my", "bot", "with", "ListTrainer", "NUMBER", "However", "when", "I", "change", "something", "in", "Response", "B", "to", "Statement", "A", "in", "train", "list", "I", "will", "receive", "the", "old", "response", "not", "the", "new", "I", "have", "change", "NUMBER", "I", "understand", "how", "ListTrainer", "works", "and", "how", "chatbot", "select", "response", "NUMBER", "But", "can", "you", "guess", "me", "how", "to", "get", "the", "new", "response", "not", "the", "old", "one", "May", "I", "have", "to", "make", "a", "new", "chatbot", "select", "response", "or", "something", "like", "that", "Thank", "you", "very", "much", "NUMBER", "I", "don", "t", "know", "why", "it", "keep", "processing", "the", "old", "response", "when", "I", "try", "to", "create", "new", "bot", "with", "new", "ListTrainer", "NUMBER", "Same", "be", "here", "and", "I", "have", "a", "problem", "to", "delete", "letters", "with", "another", "iso", "code", "let", "s", "say", "I", "have", "letter", "with", "\u010c", "\u0106", "\u0110", "NUMBER", "I", "cant", "delete", "them", "from", "admin", "Hello", "do", "anyone", "have", "experience", "with", "ChatterBot", "on", "Facebook", "messenger", "I", "would", "like", "to", "try", "to", "make", "create", "answers", "with", "emoticons", "NUMBER", "Thanks", "a", "lot", "emoticons", "issue", "NUMBER", "Thank", "you", "vkosuri", "and", "hochochoc", "It", "seems", "that", "there", "be", "no", "pure", "python", "Facebook", "messenger", "except", "this", "one", "with", "Flask", "maybe", "could", "help", "this", "video", "LINK", "NUMBER", "DQ", "NUMBER", "v", "NUMBER", "hcNyk", "t", "NUMBER", "s", "from", "this", "source", "LINK", "messenger", "bot", "tutorial", "when", "i", "use", "it", "in", "Chinese", "it", "don", "t", "work", "in", "python", "NUMBER", "chatbot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "chinese", "when", "i", "run", "the", "code", "the", "error", "be", "conversations", "NUMBER", "yml", "Training", "NUMBER", "greetings", "NUMBER", "yml", "Training", "NUMBER", "trivia", "NUMBER", "yml", "Training", "NUMBER", "\u4f60\u597d", "Traceback", "most", "recent", "call", "last", "File", "chat", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "print", "chatbot", "NUMBER", "get_response", "input", "File", "TAG", "line", "NUMBER", "\u4f60\u597d", "SyntaxError", "invalid", "syntax", "i", "use", "the", "latest", "chatterbot", "s", "version", "This", "Chinese", "article", "may", "solve", "your", "problem", "LINK", "a", "smart", "chat", "bot", "NUMBER", "html", "please", "read", "the", "section", "of", "\u5751", "it", "mention", "that", "might", "be", "a", "encoding", "problem", "in", "python", "NUMBER", "Without", "further", "ado", "you", "may", "want", "to", "upgrade", "to", "python", "NUMBER", "I", "get", "an", "error", "like", "this", "when", "I", "train", "Chinese", "Bash", "_sqlalchemy", "NUMBER", "exc", "NUMBER", "ProgrammingError", "sqlite", "NUMBER", "ProgrammingError", "You", "must", "not", "use", "NUMBER", "bit", "bytestrings", "unless", "you", "use", "a", "text_factory", "that", "can", "interpret", "NUMBER", "bit", "bytestrings", "like", "text_factory", "str", "NUMBER", "It", "be", "highly", "recommended", "that", "you", "instead", "just", "switch", "your", "application", "to", "Unicode", "strings", "NUMBER", "SQL", "u", "SELECT", "StatementTable", "NUMBER", "id", "AS", "StatementTable_id", "StatementTable", "NUMBER", "text", "AS", "StatementTable_text", "StatementTable", "NUMBER", "extra_data", "AS", "StatementTable_extra_data", "nFROM", "StatementTable", "nWHERE", "StatementTable", "NUMBER", "text", "n", "LIMIT", "OFFSET", "parameters", "xe", "NUMBER", "x", "NUMBER", "xb", "NUMBER", "xef", "xbc", "x", "NUMBER", "c", "xe", "NUMBER", "xb", "NUMBER", "xa", "NUMBER", "xe", "NUMBER", "xbe", "xb", "NUMBER", "xe", "NUMBER", "x", "NUMBER", "x", "NUMBER", "b", "xef", "xbc", "x", "NUMBER", "c", "xe", "NUMBER", "x", "NUMBER", "c", "x", "NUMBER", "f", "xe", "NUMBER", "x", "NUMBER", "x", "NUMBER", "c", "xe", "NUMBER", "xac", "xa", "NUMBER", "xe", "NUMBER", "x", "NUMBER", "x", "NUMBER", "NUMBER", "NUMBER", "_", "Finally", "I", "install", "the", "mongodb", "and", "set", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "then", "it", "works", "NUMBER", "How", "to", "make", "the", "robot", "as", "much", "as", "possible", "to", "identify", "the", "user", "s", "different", "question", "Two", "same", "question", "with", "different", "wordings", "in", "it", "semantic", "similarity", "NUMBER", "I", "want", "to", "order", "a", "pizza", "NUMBER", "I", "need", "to", "book", "a", "pizza", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "comparisons", "import", "JaccardSimilarity", "chatbot", "ChatBot", "Test", "bot", "statement_comparison_function", "JaccardSimilarity", "I", "m", "trying", "to", "implement", "the", "Jaccard", "similarity", "comparison", "but", "even", "just", "use", "a", "basic", "setup", "with", "or", "without", "any", "logic", "adapters", "renders", "the", "error", "TypeError", "get_initialization_functions", "miss", "NUMBER", "required", "positional", "argument", "self", "I", "can", "provide", "the", "entire", "exception", "throw", "if", "necessary", "Ah", "okay", "NUMBER", "Everything", "appears", "to", "be", "function", "as", "normal", "now", "after", "use", "the", "correct", "class", "NUMBER", "Thank", "you", "Every", "time", "I", "perform", "a", "request", "to", "the", "server", "it", "returns", "a", "NUMBER", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GET", "chatterbot", "HTTP", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "change", "nothing", "from", "the", "example_app", "for", "integration", "of", "Django", "and", "Chatterbot", "I", "have", "just", "copied", "all", "of", "it", "NUMBER", "Later", "when", "I", "examined", "the", "console", "I", "find", "this", "Loading", "fail", "for", "the", "TAG", "with", "source", "resource", "devtools", "client", "shared", "vendor", "react", "dev", "NUMBER", "js", "NUMBER", "I", "have", "no", "idea", "what", "it", "means", "please", "help", "me", "regard", "this", "NUMBER", "Thanks", "in", "advance", "screenshot", "from", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "be", "NUMBER", "NUMBER", "e", "NUMBER", "e", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "a", "NUMBER", "ce", "NUMBER", "db", "NUMBER", "png", "gunthercox", "The", "error", "isnt", "relate", "to", "the", "browser", "extensions", "NUMBER", "I", "disabled", "all", "the", "browser", "extensions", "and", "then", "tried", "it", "again", "it", "didnt", "work", "NUMBER", "vkosuri", "I", "tried", "the", "views", "NUMBER", "py", "and", "html", "template", "you", "had", "in", "your", "github", "page", "and", "even", "that", "gave", "me", "the", "same", "error", "NUMBER", "Can", "you", "send", "over", "a", "code", "snip", "view", "to", "us", "so", "it", "be", "easier", "for", "us", "to", "understand", "what", "you", "be", "try", "to", "do", "Signed", "off", "by", "corcassia", "TAG", "Hi", "I", "add", "the", "Inverted", "Index", "for", "mongodb", "NUMBER", "What", "new", "Creating", "the", "Inverted", "Index", "when", "training", "dataset", "It", "will", "just", "compare", "the", "similar", "statement", "when", "get", "a", "response", "Only", "BestMatch", "Improving", "performance", "Version", "Response", "Time", "s", "Before", "NUMBER", "After", "NUMBER", "It", "test", "with", "NUMBER", "rows", "dataset", "on", "Ubuntu", "NUMBER", "Core", "i", "NUMBER", "NUMBER", "NUMBER", "G", "Menery", "NUMBER", "Hope", "it", "helps", "NUMBER", "vkosuri", "Ok", "my", "pleasure", "NUMBER", "Before", "this", "PR", "I", "find", "it", "will", "compare", "all", "samples", "when", "calling", "ChatBot", "NUMBER", "get_response", "NUMBER", "So", "if", "we", "have", "trained", "a", "large", "dataset", "it", "will", "spend", "many", "time", "to", "response", "NUMBER", "mongodb", "text", "indexing", "be", "a", "forward", "index", "in", "this", "change", "I", "hope", "it", "just", "select", "the", "similar", "sample", "from", "database", "by", "add", "invert", "indexing", "rather", "than", "select", "all", "NUMBER", "For", "example", "There", "some", "samples", "in", "our", "databases", "NUMBER", "Hello", "how", "be", "you", "NUMBER", "NUMBER", "I", "m", "fine", "thank", "you", "NUMBER", "Mongodb", "be", "faster", "than", "sqlite", "NUMBER", "Yes", "of", "course", "NUMBER", "NUMBER", "Hello", "would", "you", "do", "me", "a", "favor", "NUMBER", "Yes", "NUMBER", "and", "the", "invert", "indexing", "will", "look", "like", "hello", "NUMBER", "NUMBER", "NUMBER", "Mongodb", "NUMBER", "NUMBER", "sqlite", "NUMBER", "NUMBER", "favor", "NUMBER", "NUMBER", "NUMBER", "each", "key", "word", "corresponds", "to", "samples", "ID", "If", "we", "call", "bot", "NUMBER", "get_response", "The", "different", "between", "mongodb", "and", "sqlite", "there", "be", "some", "key", "word", "in", "this", "statement", "different", "mongodb", "text", "indexing", "invert", "Then", "we", "use", "invert", "indexing", "to", "find", "out", "which", "samples", "have", "those", "key", "word", "NUMBER", "Finally", "we", "compare", "those", "samples", "with", "the", "input", "statement", "just", "like", "before", "NUMBER", "I", "wish", "I", "made", "it", "clear", "NUMBER", "vkosuri", "Yes", "I", "think", "tag", "filtering", "be", "a", "good", "idea", "NUMBER", "To", "get", "the", "labels", "of", "input", "statement", "will", "it", "iterate", "all", "sample", "or", "pass", "a", "classify", "model", "gunthercox", "gunthercox", "It", "s", "all", "right", "and", "I", "find", "some", "problem", "with", "this", "change", "in", "these", "days", "NUMBER", "vkosuri", "I", "m", "sorry", "about", "my", "wrong", "clarification", "NUMBER", "MongoDB", "text", "indexing", "be", "one", "of", "the", "practices", "of", "invert", "indexing", "NUMBER", "After", "a", "few", "test", "I", "find", "MongoDB", "text", "indexing", "behave", "better", "NUMBER", "I", "remove", "my", "invert", "indexing", "and", "change", "the", "_statement_query", "it", "runs", "faster", "than", "before", "NUMBER", "I", "have", "two", "question", "according", "to", "corpus", "data", "NUMBER", "How", "be", "the", "specified", "categories", "in", "NUMBER", "yaml", "file", "use", "in", "training", "In", "the", "source", "code", "I", "find", "out", "only", "parsing", "separately", "categories", "and", "conversations", "inside", "NUMBER", "corpora", "NUMBER", "categories", "corpus", "NUMBER", "get", "categories", "conversations", "corpus", "NUMBER", "get", "conversations", "corpora", "NUMBER", "extend", "conversations", "NUMBER", "How", "should", "I", "write", "corpus", "in", "yaml", "if", "parser", "doesn", "t", "pay", "attention", "at", "and", "statements", "exmaple", "from", "conversations", "NUMBER", "yaml", "Good", "morning", "how", "be", "you", "I", "be", "doing", "well", "how", "about", "you", "I", "m", "also", "good", "NUMBER", "That", "s", "good", "to", "hear", "NUMBER", "Yes", "it", "be", "NUMBER", "Hello", "example", "from", "ai", "NUMBER", "yaml", "What", "be", "ai", "Artificial", "Intelligence", "be", "the", "branch", "of", "engineering", "and", "science", "devoted", "to", "constructing", "machines", "that", "think", "NUMBER", "What", "language", "be", "you", "write", "in", "python", "You", "sound", "like", "data", "Yes", "I", "be", "inspired", "by", "commander", "data", "s", "artificial", "personality", "NUMBER", "I", "want", "to", "write", "several", "responses", "in", "one", "statement", "NUMBER", "e", "NUMBER", "g", "NUMBER", "Hello", "hi", "good", "morning", "hello", "hey", "what", "s", "up", "How", "be", "you", "I", "m", "fine", "good", "I", "m", "fine", "and", "what", "about", "you", "I", "m", "sad", "vkosuri", "yep", "but", "how", "Chatterbot", "use", "this", "information", "about", "category", "After", "upgrading", "the", "code", "I", "get", "a", "new", "bug", "NUMBER", "This", "be", "happening", "when", "I", "type", "in", "a", "unknown", "word", "for", "the", "ChatterBot", "NUMBER", "Internal", "Server", "Error", "api", "chatterbot", "Traceback", "most", "recent", "call", "last", "File", "home", "chrisp", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "exception", "NUMBER", "py", "line", "NUMBER", "in", "inner", "response", "get_response", "request", "File", "home", "chrisp", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "home", "chrisp", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "home", "chrisp", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "view", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "home", "chrisp", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "dispatch", "return", "handler", "request", "args", "kwargs", "File", "home", "chrisp", "lib", "python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "line", "NUMBER", "in", "post", "response", "self", "NUMBER", "chatterbot", "NUMBER", "get_response", "input_data", "conversation", "NUMBER", "id", "File", "home", "chrisp", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "self", "NUMBER", "orage", "NUMBER", "add_to_conversation", "conversation_id", "statement", "response", "File", "home", "chrisp", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "django_storage", "NUMBER", "py", "line", "NUMBER", "in", "add_to_conversation", "first_response", "Statement", "NUMBER", "objects", "NUMBER", "get", "text", "response", "NUMBER", "text", "File", "home", "chrisp", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "manager", "NUMBER", "py", "line", "NUMBER", "in", "manager_method", "return", "getattr", "self", "NUMBER", "get_queryset", "name", "args", "kwargs", "File", "home", "chrisp", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "query", "NUMBER", "py", "line", "NUMBER", "in", "get", "self", "NUMBER", "model", "NUMBER", "_meta", "NUMBER", "object_name", "chatterbot", "NUMBER", "ext", "NUMBER", "django_chatterbot", "NUMBER", "models", "NUMBER", "DoesNotExist", "Statement", "matching", "query", "do", "not", "exist", "NUMBER", "Hi", "there", "I", "be", "work", "on", "a", "way", "to", "customize", "the", "intention", "of", "a", "conversation", "seesion", "It", "world", "be", "nice", "to", "have", "extra", "storage", "variable", "in", "session", "object", "so", "that", "make", "each", "conversation", "has", "its", "own", "intention", "Currently", "there", "be", "only", "uuid", "id_string", "id", "include", "in", "session", "class", "LINK", "_modules", "chatterbot", "conversation", "session", "NUMBER", "html", "Session", "Good", "to", "hear", "that", "I", "would", "put", "my", "work", "of", "session", "on", "hold", "NUMBER", "Hope", "you", "would", "give", "some", "examples", "of", "how", "to", "overwrite", "the", "variables", "method", "once", "you", "release", "NUMBER", "I", "look", "forward", "to", "the", "next", "release", "NUMBER", "so", "this", "field", "be", "not", "required", "anymore", "when", "creating", "a", "new", "Statement", "responds", "manually", "in", "Django", "Admin", "NUMBER", "gunthercox", "gunthercox", "this", "be", "only", "a", "smaller", "change", "because", "in", "exist", "version", "if", "I", "try", "to", "create", "a", "Statement", "or", "Responds", "manually", "today", "then", "be", "the", "Extra", "Data", "field", "a", "required", "field", "that", "you", "must", "fill", "out", "NUMBER", "With", "this", "smaller", "change", "I", "have", "change", "that", "column", "to", "no", "mandatory", "field", "so", "you", "can", "still", "create", "a", "statement", "or", "responds", "manually", "without", "to", "fill", "out", "the", "Extra", "data", "field", "NUMBER", "As", "the", "title", "suggests", "the", "default", "choice", "for", "Logic", "Adapter", "and", "comparison", "function", "should", "be", "call", "out", "in", "the", "documentation", "NUMBER", "If", "this", "be", "present", "then", "I", "apologize", "I", "didn", "t", "see", "it", "and", "thought", "people", "might", "like", "to", "know", "NUMBER", "Thanks", "a", "lot", "gunthercox", "I", "m", "playing", "around", "with", "chatterbot", "and", "really", "like", "it", "NUMBER", "Others", "will", "definitely", "also", "do", "so", "if", "they", "understand", "easier", "Hi", "I", "recently", "tried", "to", "incorporate", "my", "own", "comparison", "method", "into", "Chatterbot", "and", "received", "the", "following", "error", "function", "object", "has", "no", "attribute", "get_initialization_functions", "From", "the", "documentation", "I", "understood", "that", "all", "that", "was", "required", "was", "handle", "the", "statements", "that", "would", "come", "into", "the", "function", "and", "returning", "a", "confidence", "value", "NUMBER", "Could", "you", "tell", "me", "where", "I", "m", "going", "wrong", "Why", "should", "there", "be", "a", "get_initialization_functions", "function", "Thanks", "a", "lot", "gunthercox", "Tried", "it", "out", "and", "it", "works", "perfectly", "NUMBER", "As", "suggested", "I", "open", "a", "new", "request", "for", "this", "NUMBER", "But", "it", "should", "be", "really", "nice", "to", "be", "able", "to", "have", "multiple", "databases", "connections", "to", "a", "single", "chatterbot", "NUMBER", "And", "in", "the", "chatterbot", "configuration", "area", "you", "should", "be", "able", "to", "tell", "it", "if", "you", "only", "should", "have", "Reaad", "Only", "mode", "or", "read", "write", "mode", "NUMBER", "In", "this", "case", "you", "can", "then", "have", "a", "larger", "master", "databases", "where", "multiple", "chatterbots", "can", "be", "connected", "to", "to", "be", "able", "to", "have", "a", "larger", "standard", "data", "NUMBER", "And", "a", "local", "attach", "database", "that", "has", "local", "knowledge", "such", "names", "of", "people", "hardware", "and", "data", "that", "be", "only", "internal", "use", "and", "no", "use", "for", "any", "other", "people", "NUMBER", "sqlalchemy", "do", "support", "multiple", "binds", "and", "allows", "for", "multiple", "database", "connections", "NUMBER", "I", "can", "t", "give", "you", "a", "time", "frame", "but", "I", "need", "to", "see", "how", "flask", "implement", "this", "anyway", "and", "I", "ll", "get", "back", "to", "you", "unless", "of", "course", "someone", "be", "able", "to", "get", "to", "it", "before", "NUMBER", "I", "m", "pretty", "sure", "use", "multiple", "mongodbs", "wouldn", "t", "be", "that", "hard", "to", "implement", "either", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Christian", "Petersson", "TAG", "write", "As", "suggested", "I", "open", "a", "new", "request", "for", "this", "NUMBER", "But", "it", "should", "be", "really", "nice", "to", "be", "able", "to", "have", "multiple", "databases", "connections", "to", "a", "single", "chatterbot", "NUMBER", "And", "in", "the", "chatterbot", "configuration", "area", "you", "should", "be", "able", "to", "tell", "it", "if", "you", "only", "should", "have", "Reaad", "Only", "mode", "or", "read", "write", "mode", "NUMBER", "In", "this", "case", "you", "can", "then", "have", "a", "larger", "master", "databases", "where", "multiple", "chatterbots", "can", "be", "connected", "to", "to", "be", "able", "to", "have", "a", "larger", "standard", "data", "NUMBER", "And", "a", "local", "attach", "database", "that", "has", "local", "knowledge", "such", "names", "of", "people", "hardware", "and", "data", "that", "be", "only", "internal", "use", "and", "no", "use", "for", "any", "other", "people", "NUMBER", "You", "be", "receiving", "this", "because", "you", "be", "subscribed", "to", "this", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Yeah", "i", "think", "this", "would", "have", "to", "be", "implement", "use", "multiple", "mongos", "OR", "multiple", "sql", "s", "NUMBER", "I", "know", "the", "ability", "exists", "in", "sqlalchemy", "to", "mix", "and", "a", "match", "your", "sqldb", "s", "but", "I", "just", "can", "t", "see", "trying", "to", "use", "a", "sql", "and", "a", "mongo", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Gunther", "Cox", "TAG", "write", "I", "m", "wondering", "about", "the", "pros", "and", "cons", "of", "support", "this", "NUMBER", "If", "a", "particular", "database", "architecture", "MongoDB", "Sqlite", "etc", "NUMBER", "allows", "this", "than", "I", "m", "all", "for", "it", "NUMBER", "One", "possible", "issue", "I", "can", "foresee", "be", "the", "challenge", "of", "merge", "the", "results", "from", "multiple", "non", "homogeneous", "database", "NUMBER", "For", "example", "someone", "wants", "to", "use", "a", "Postgres", "database", "and", "a", "MongoDB", "database", "together", "for", "their", "data", "NUMBER", "You", "be", "receiving", "this", "because", "you", "commented", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "lesleslie", "in", "our", "case", "we", "will", "probably", "mix", "between", "Centralize", "Postgress", "and", "local", "SQLite", "I", "didn", "t", "see", "this", "directly", "address", "earlier", "but", "please", "correct", "me", "if", "I", "miss", "it", "NUMBER", "I", "m", "receiving", "these", "NLTK", "relate", "error", "when", "run", "ChatBot", "but", "no", "issue", "when", "I", "m", "code", "up", "NLTK", "separately", "on", "another", "project", "NUMBER", "Any", "guidance", "would", "be", "wonderful", "NUMBER", "Thanks", "guys", "NUMBER", "nltk_data", "Error", "loading", "stopwords", "TAG", "nltk_data", "Error", "loading", "wordnet", "TAG", "nltk_data", "Error", "loading", "punkt", "TAG", "nltk_data", "Error", "loading", "vader_lexicon", "TAG", "I", "appreciate", "you", "taking", "a", "look", "NUMBER", "Let", "me", "give", "your", "suggestion", "ago", "tomorrow", "and", "I", "ll", "let", "you", "know", "how", "it", "goes", "NUMBER", "Thanks", "from", "chatterbot", "import", "ChatBot", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "from", "can", "t", "read", "var", "mail", "chatterbot", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "chatbot", "ChatBot", "bash", "syntax", "error", "near", "unexpect", "token", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "Ron", "Obvious", "Ron", "Obvious", "command", "not", "find", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "bash", "syntax", "error", "near", "unexpect", "token", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "bash", "syntax", "error", "near", "unexpect", "token", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "bash", "syntax", "error", "near", "unexpect", "token", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "chatbot", "NUMBER", "get_response", "Hello", "how", "be", "you", "today", "bash", "syntax", "error", "near", "unexpect", "token", "Hello", "how", "be", "you", "today", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "bash", "syntax", "error", "near", "unexpect", "token", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "VANSH", "LAPTOP", "A", "NUMBER", "Q", "NUMBER", "OIQ", "sphinx", "build", "b", "html", "docs", "build", "sphinx", "build", "command", "not", "find", "vansh", "NUMBER", "You", "should", "first", "of", "all", "start", "a", "python", "command", "prompt", "NUMBER", "thank", "you", "vkosuri", "Issen", "NUMBER", "I", "recommended", "update", "the", "installation", "instructions", "to", "install", "chatterbot", "into", "a", "virtualenv", "NUMBER", "I", "would", "be", "more", "than", "happy", "to", "do", "this", "if", "everyone", "agrees", "NUMBER", "i", "don", "t", "have", "any", "experience", "with", "anaconda", "NUMBER", "looks", "interesting", "NUMBER", "i", "ll", "give", "it", "a", "try", "and", "see", "what", "i", "can", "do", "NUMBER", "ok", "NUMBER", "i", "have", "virtualenv", "instructions", "that", "i", "use", "for", "my", "own", "projects", "i", "can", "reference", "too", "NUMBER", "i", "can", "make", "the", "instructions", "optional", "too", "NUMBER", "i", "personally", "feel", "though", "that", "installing", "chatterbox", "use", "a", "virtualenv", "by", "default", "be", "a", "much", "better", "practice", "especially", "for", "development", "so", "i", "ll", "definitely", "add", "them", "there", "NUMBER", "I", "use", "the", "exact", "same", "as", "vkosuri", "and", "can", "recommend", "them", "as", "well", "NUMBER", "It", "should", "be", "noted", "that", "Robomongo", "be", "now", "call", "Robo", "NUMBER", "T", "NUMBER", "The", "url", "be", "still", "the", "same", "though", "LINK", "I", "could", "also", "recommend", "Postico", "for", "PostgreSQL", "and", "Mac", "LINK", "gunthercox", "vkosuri", "in", "what", "area", "should", "we", "start", "use", "tags", "I", "m", "playing", "around", "with", "this", "at", "the", "moment", "and", "could", "I", "add", "tags", "example", "in", "to", "the", "Corpus", "training", "data", "file", "Thanks", "vkosuri", "hi", "bro", "NUMBER", "you", "be", "really", "great", "NUMBER", "I", "be", "caught", "in", "problem", "with", "efficiency", "even", "i", "use", "mongodb", "to", "be", "storage", "adapter", "the", "response", "be", "still", "too", "slow", "NUMBER", "I", "find", "you", "be", "very", "active", "NUMBER", "So", "can", "you", "share", "some", "experience", "of", "improving", "efficiency", "or", "use", "methods", "NUMBER", "thank", "u", "very", "much", "Hi", "Folks", "I", "be", "facing", "the", "issue", "with", "the", "spell", "checker", "option", "in", "LUIS", "As", "i", "be", "checked", "it", "and", "publish", "NUMBER", "When", "i", "see", "again", "its", "showing", "as", "unchecked", "NUMBER", "I", "had", "purchased", "Bing", "spell", "check", "key", "too", "NUMBER", "Please", "help", "me", "with", "this", "NUMBER", "Thank", "you", "NUMBER", "Hi", "dileepkantapop", "If", "you", "be", "referring", "to", "this", "screenshot", "then", "the", "state", "of", "selection", "be", "not", "saved", "NUMBER", "It", "do", "not", "persists", "the", "selection", "NUMBER", "screen", "shot", "NUMBER", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "NUMBER", "pm", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "a", "NUMBER", "cf", "NUMBER", "a", "NUMBER", "eb", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "ee", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "png", "However", "the", "following", "be", "the", "steps", "NUMBER", "Get", "a", "bing", "spell", "check", "API", "key", "NUMBER", "Add", "it", "in", "external", "Association", "NUMBER", "Publish", "it", "with", "Bing", "spell", "check", "API", "on", "NUMBER", "Every", "time", "the", "invocation", "be", "do", "from", "your", "code", "have", "spellCheck", "true", "be", "set", "NUMBER", "LINK", "e", "NUMBER", "b", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "a", "NUMBER", "c", "NUMBER", "subscription", "key", "NUMBER", "fb", "NUMBER", "cfd", "NUMBER", "c", "NUMBER", "a", "NUMBER", "b", "NUMBER", "edb", "NUMBER", "c", "NUMBER", "verbose", "true", "timezoneOffset", "NUMBER", "spellCheck", "true", "q", "buddy", "yescay", "i", "be", "use", "the", "LUIS", "in", "Bot", "framework", "C", "i", "can", "t", "call", "API", "to", "get", "the", "result", "NUMBER", "I", "know", "that", "it", "has", "spellCheck", "true", "in", "API", "NUMBER", "But", "my", "problem", "be", "different", "The", "state", "of", "the", "checkbox", "be", "not", "saving", "NUMBER", "The", "state", "of", "the", "check", "box", "do", "not", "matter", "the", "parameter", "value", "be", "what", "matters", "NUMBER", "Explore", "the", "Request", "object", "of", "your", "C", "code", "to", "see", "if", "you", "can", "set", "the", "bing", "spellcheck", "that", "you", "can", "set", "to", "true", "NUMBER", "AFAIK", "This", "checkox", "in", "LUIS", "publish", "page", "do", "not", "retain", "state", "NUMBER", "Thanks", "Kamesh", "From", "Dileep", "Kanta", "Bivanapalli", "TAG", "Reply", "To", "gunthercox", "ChatterBot", "TAG", "Date", "Friday", "NUMBER", "August", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "To", "gunthercox", "ChatterBot", "TAG", "Cc", "yescay", "TAG", "Mention", "TAG", "Subject", "Re", "gunthercox", "ChatterBot", "How", "to", "unable", "Enable", "bing", "spell", "checker", "in", "Luis", "NUMBER", "buddy", "yescay", "i", "be", "use", "the", "LUIS", "in", "Bot", "framework", "C", "i", "can", "t", "call", "API", "to", "get", "the", "result", "NUMBER", "I", "know", "that", "it", "has", "spellCheck", "true", "in", "API", "NUMBER", "But", "my", "problem", "be", "different", "The", "state", "of", "the", "checkbox", "be", "not", "saving", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "Buddy", "In", "Bot", "framework", "we", "won", "t", "call", "API", "we", "just", "have", "Intents", "in", "which", "we", "will", "get", "data", "in", "entities", "NUMBER", "AbstractBaseStatement", "models", "NUMBER", "py", "L", "NUMBER", "LINK", "_chatterbot", "models", "NUMBER", "py", "L", "NUMBER", "has", "max_length", "NUMBER", "so", "the", "corpus", "fail", "at", "corpus", "NUMBER", "english", "NUMBER", "ai", "L", "NUMBER", "LINK", "corpus", "blob", "master", "chatterbot_corpus", "data", "english", "ai", "NUMBER", "yml", "L", "NUMBER", "I", "understand", "use", "CharField", "and", "maximum", "length", "might", "be", "more", "efficient", "in", "terms", "of", "performance", "or", "storage", "but", "that", "forces", "to", "short", "statements", "NUMBER", "Just", "tried", "make", "it", "a", "TextField", "and", "then", "get", "Training", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "manage", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "execute_from_command_line", "sys", "NUMBER", "argv", "File", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "execute_from_command_line", "utility", "NUMBER", "execute", "File", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "execute", "self", "NUMBER", "fetch_command", "subcommand", "NUMBER", "run_from_argv", "self", "NUMBER", "argv", "File", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "base", "NUMBER", "py", "line", "NUMBER", "in", "run_from_argv", "self", "NUMBER", "execute", "args", "cmd_options", "File", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "base", "NUMBER", "py", "line", "NUMBER", "in", "execute", "output", "self", "NUMBER", "handle", "args", "options", "File", "vagrant", "api", "django_chatterbot", "management", "commands", "train", "NUMBER", "py", "line", "NUMBER", "in", "handle", "chatterbot", "NUMBER", "train", "chatterbot", "NUMBER", "training_data", "File", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "File", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "django_storage", "NUMBER", "py", "line", "NUMBER", "in", "update", "response", "NUMBER", "occurrence", "NUMBER", "AttributeError", "can", "t", "set", "attribute", "I", "trying", "to", "run", "example", "for", "feedback", "with", "this", "code", "Python", "bot", "ChatBot", "test", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "SQLStorageAdapter", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "NUMBER", "database", "NUMBER", "db", "DEFAULT_SESSION_ID", "bot", "NUMBER", "default_session", "NUMBER", "id", "def", "get_feedback", "from", "chatterbot", "NUMBER", "utils", "import", "input_function", "text", "input_function", "if", "yes", "in", "text", "NUMBER", "lower", "return", "True", "elif", "no", "in", "text", "NUMBER", "lower", "return", "False", "else", "print", "Please", "type", "either", "Yes", "or", "No", "return", "get_feedback", "print", "Type", "something", "to", "begin", "NUMBER", "while", "True", "try", "input_statement", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "statement", "response", "bot", "NUMBER", "generate_response", "input_statement", "DEFAULT_SESSION_ID", "print", "n", "Is", "this", "a", "coherent", "response", "to", "n", "NUMBER", "format", "response", "input_statement", "if", "get_feedback", "bot", "NUMBER", "learn_response", "response", "input_statement", "bot", "NUMBER", "output", "NUMBER", "process_response", "response", "bot", "NUMBER", "orage", "NUMBER", "add_to_converation", "bot", "NUMBER", "default_session", "statement", "response", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "And", "I", "get", "this", "error", "Bash", "Type", "something", "to", "begin", "NUMBER", "hola", "Is", "hola", "this", "a", "coherent", "response", "to", "hola", "yes", "hola", "Traceback", "most", "recent", "call", "last", "File", "feedback", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "orage", "NUMBER", "add_to_converation", "bot", "NUMBER", "default_session", "statement", "response", "AttributeError", "SQLStorageAdapter", "object", "has", "no", "attribute", "add_to_converation", "Hi", "vkosuri", "I", "have", "NUMBER", "Check", "your", "code", "NUMBER", "converation", "has", "prob", "be", "correct", "to", "conversation", "NUMBER", "You", "re", "also", "going", "to", "run", "into", "an", "issue", "with", "the", "default_session", "NUMBER", "id", "cause", "it", "has", "change", "too", "NUMBER", "See", "pull", "request", "NUMBER", "Cheers", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Erick", "S\u00e1nchez", "P\u00e9rez", "TAG", "write", "Hi", "I", "have", "NUMBER", "You", "be", "receiving", "this", "because", "you", "be", "subscribed", "to", "this", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Hello", "lesleslie", "how", "can", "I", "update", "the", "code", "Is", "there", "an", "a", "command", "If", "your", "get", "that", "error", "the", "problem", "be", "in", "your", "code", "not", "chatterbot", "NUMBER", "The", "spelling", "correction", "of", "conversation", "took", "place", "NUMBER", "hours", "ago", "NUMBER", "Follow", "the", "traceback", "from", "the", "error", "code", "you", "re", "get", "and", "it", "will", "point", "you", "to", "which", "module", "and", "which", "line", "be", "calling", "the", "wrong", "function", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Erick", "S\u00e1nchez", "P\u00e9rez", "TAG", "write", "Hello", "lesleslie", "TAG", "how", "can", "I", "update", "the", "code", "Is", "there", "an", "a", "command", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "In", "your", "case", "line", "NUMBER", "in", "feedback", "NUMBER", "py", "needs", "converation", "change", "to", "conversation", "NUMBER", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "les", "TAG", "write", "If", "your", "get", "that", "error", "the", "problem", "be", "in", "your", "code", "not", "chatterbot", "NUMBER", "The", "spelling", "correction", "of", "conversation", "took", "place", "NUMBER", "hours", "ago", "NUMBER", "Follow", "the", "traceback", "from", "the", "error", "code", "you", "re", "get", "and", "it", "will", "point", "you", "to", "which", "module", "and", "which", "line", "be", "calling", "the", "wrong", "function", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Erick", "S\u00e1nchez", "P\u00e9rez", "TAG", "write", "Hello", "lesleslie", "TAG", "how", "can", "I", "update", "the", "code", "Is", "there", "an", "a", "command", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Don", "t", "forget", "too", "to", "change", "default_session", "NUMBER", "id", "to", "default_conversation_id", "too", "in", "your", "code", "NUMBER", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "les", "TAG", "write", "In", "your", "case", "line", "NUMBER", "in", "feedback", "NUMBER", "py", "needs", "converation", "change", "to", "conversation", "NUMBER", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "les", "TAG", "write", "If", "your", "get", "that", "error", "the", "problem", "be", "in", "your", "code", "not", "chatterbot", "NUMBER", "The", "spelling", "correction", "of", "conversation", "took", "place", "NUMBER", "hours", "ago", "NUMBER", "Follow", "the", "traceback", "from", "the", "error", "code", "you", "re", "get", "and", "it", "will", "point", "you", "to", "which", "module", "and", "which", "line", "be", "calling", "the", "wrong", "function", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Erick", "S\u00e1nchez", "P\u00e9rez", "TAG", "write", "Hello", "lesleslie", "TAG", "how", "can", "I", "update", "the", "code", "Is", "there", "an", "a", "command", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "lesleslie", "yes", "I", "was", "reading", "the", "last", "corrections", "this", "be", "my", "code", "with", "the", "corrections", "Python", "from", "chatterbot", "import", "ChatBot", "bot", "ChatBot", "Feedback", "Learning", "Bot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "SQLStorageAdapter", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "DEFAULT_SESSION_ID", "bot", "NUMBER", "default_conversation_id", "def", "get_feedback", "from", "chatterbot", "NUMBER", "utils", "import", "input_function", "text", "input_function", "if", "yes", "in", "text", "NUMBER", "lower", "return", "True", "elif", "no", "in", "text", "NUMBER", "lower", "return", "False", "else", "print", "Please", "type", "either", "Yes", "or", "No", "return", "get_feedback", "print", "Type", "something", "to", "begin", "NUMBER", "while", "True", "try", "input_statement", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "statement", "response", "bot", "NUMBER", "generate_response", "input_statement", "DEFAULT_SESSION_ID", "print", "n", "Is", "this", "a", "coherent", "response", "to", "n", "NUMBER", "format", "response", "input_statement", "if", "get_feedback", "bot", "NUMBER", "learn_response", "response", "input_statement", "bot", "NUMBER", "output", "NUMBER", "process_response", "response", "bot", "NUMBER", "orage", "NUMBER", "add_to_conversation", "bot", "NUMBER", "default_session", "statement", "response", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "But", "now", "I", "get", "this", "error", "Traceback", "most", "recent", "call", "last", "File", "feedback", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "DEFAULT_SESSION_ID", "bot", "NUMBER", "default_conversation_id", "AttributeError", "ChatBot", "object", "has", "no", "attribute", "default_conversation_id", "lesleslie", "I", "was", "checking", "the", "SQLAdapter", "code", "but", "the", "function", "add_to_conversation", "doesn", "t", "exists", "only", "add_to_converation", "In", "the", "file", "sql_storage", "NUMBER", "py", "line", "NUMBER", "def", "add_to_converation", "self", "conversation_id", "statement", "response", "But", "in", "both", "cases", "return", "error", "lesleslie", "I", "was", "cheking", "your", "fork", "and", "you", "update", "the", "code", "and", "adapters", "to", "use", "the", "correct", "function", "add_to_converation", "how", "can", "I", "upgrade", "the", "ChatterBot", "code", "to", "use", "correctly", "the", "examples", "Ok", "change", "back", "to", "default_session", "NUMBER", "id", "and", "try", "that", "NUMBER", "We", "may", "be", "use", "slightly", "different", "version", "NUMBER", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Erick", "S\u00e1nchez", "P\u00e9rez", "TAG", "write", "lesleslie", "TAG", "yes", "I", "was", "reading", "the", "last", "corrections", "this", "be", "my", "code", "with", "the", "corrections", "from", "chatterbot", "import", "ChatBot", "bot", "ChatBot", "Feedback", "Learning", "Bot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "SQLStorageAdapter", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "NUMBER", "database", "NUMBER", "db", "DEFAULT_SESSION_ID", "bot", "NUMBER", "default_conversation_id", "def", "get_feedback", "from", "chatterbot", "NUMBER", "utils", "import", "input_function", "text", "input_function", "if", "yes", "in", "text", "NUMBER", "lower", "return", "True", "elif", "no", "in", "text", "NUMBER", "lower", "return", "False", "else", "print", "Please", "type", "either", "Yes", "or", "No", "return", "get_feedback", "print", "Type", "something", "to", "begin", "NUMBER", "while", "True", "try", "input_statement", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "statement", "response", "bot", "NUMBER", "generate_response", "input_statement", "DEFAULT_SESSION_ID", "print", "n", "Is", "this", "a", "coherent", "response", "to", "n", "NUMBER", "format", "response", "input_statement", "if", "get_feedback", "bot", "NUMBER", "learn_response", "response", "input_statement", "bot", "NUMBER", "output", "NUMBER", "process_response", "response", "bot", "NUMBER", "orage", "NUMBER", "add_to_conversation", "bot", "NUMBER", "default_session", "statement", "response", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "But", "now", "I", "get", "this", "error", "Traceback", "most", "recent", "call", "last", "File", "feedback", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "DEFAULT_SESSION_ID", "bot", "NUMBER", "default_conversation_id", "AttributeError", "ChatBot", "object", "has", "no", "attribute", "default_conversation_id", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "lesleslie", "I", "did", "it", "but", "gave", "me", "this", "error", "Type", "something", "to", "begin", "NUMBER", "hola", "Is", "hola", "this", "a", "coherent", "response", "to", "hola", "yes", "hola", "Traceback", "most", "recent", "call", "last", "File", "feedback", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "orage", "NUMBER", "add_to_conversation", "bot", "NUMBER", "default_session", "statement", "response", "AttributeError", "SQLStorageAdapter", "object", "has", "no", "attribute", "add_to_conversation", "m", "C", "NUMBER", "SH", "NUMBER", "G", "NUMBER", "WP", "bot", "NUMBER", "eec", "NUMBER", "i", "Look", "at", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "and", "see", "what", "the", "name", "of", "the", "function", "be", "in", "your", "version", "and", "adjust", "accordingly", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Erick", "S\u00e1nchez", "P\u00e9rez", "TAG", "write", "lesleslie", "TAG", "I", "did", "it", "but", "give", "me", "this", "error", "Type", "something", "to", "begin", "NUMBER", "hola", "Is", "hola", "this", "a", "coherent", "response", "to", "hola", "yes", "hola", "Traceback", "most", "recent", "call", "last", "File", "feedback", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "orage", "NUMBER", "add_to_conversation", "bot", "NUMBER", "default_session", "statement", "response", "AttributeError", "SQLStorageAdapter", "object", "has", "no", "attribute", "add_to_conversation", "m", "C", "NUMBER", "SH", "NUMBER", "G", "NUMBER", "WP", "bot", "NUMBER", "eec", "NUMBER", "i", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Hi", "again", "lesleslie", "I", "test", "you", "fork", "repo", "and", "install", "but", "the", "same", "example", "now", "gave", "me", "this", "error", "Type", "something", "to", "begin", "NUMBER", "hi", "Is", "hi", "this", "a", "coherent", "response", "to", "hi", "no", "hi", "Traceback", "most", "recent", "call", "last", "File", "so", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "orage", "NUMBER", "add_to_conversation", "bot", "NUMBER", "default_session", "statement", "response", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "line", "NUMBER", "in", "add_to_conversation", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "sqlalchemy", "orm", "query", "NUMBER", "py", "line", "NUMBER", "in", "get", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "sqlalchemy", "orm", "query", "NUMBER", "py", "line", "NUMBER", "in", "_get_impl", "TypeError", "object", "of", "type", "NoneType", "has", "no", "len", "My", "repo", "was", "constantly", "be", "tweaked", "and", "worked", "on", "recently", "so", "I", "m", "not", "sure", "when", "you", "downloaded", "it", "NUMBER", "As", "of", "just", "a", "few", "hours", "ago", "be", "it", "passing", "all", "of", "the", "test", "and", "be", "stable", "NUMBER", "Please", "try", "forking", "my", "version", "again", "and", "if", "you", "run", "into", "the", "same", "problem", "again", "I", "ll", "give", "it", "a", "good", "look", "and", "help", "resolve", "the", "issue", "NUMBER", "My", "repo", "as", "at", "stands", "as", "of", "RIGHT", "NOW", "be", "I", "believe", "about", "to", "be", "merge", "into", "the", "main", "branch", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Erick", "S\u00e1nchez", "P\u00e9rez", "TAG", "write", "Hi", "again", "lesleslie", "TAG", "I", "test", "you", "fork", "repo", "and", "install", "but", "the", "same", "example", "now", "gave", "me", "this", "error", "Type", "something", "to", "begin", "NUMBER", "hi", "Is", "hi", "this", "a", "coherent", "response", "to", "hi", "no", "hi", "Traceback", "most", "recent", "call", "last", "File", "so", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "orage", "NUMBER", "add_to_conversation", "bot", "NUMBER", "default_session", "statement", "response", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "line", "NUMBER", "in", "add_to_conversation", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "sqlalchemy", "orm", "query", "NUMBER", "py", "line", "NUMBER", "in", "get", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "sqlalchemy", "orm", "query", "NUMBER", "py", "line", "NUMBER", "in", "_get_impl", "TypeError", "object", "of", "type", "NoneType", "has", "no", "len", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Nevermind", "that", "last", "statement", "NUMBER", "You", "need", "to", "change", "default_session", "to", "conversation_id", "in", "line", "NUMBER", "of", "so", "NUMBER", "py", "NUMBER", "Again", "if", "you", "follow", "the", "traceback", "to", "the", "Exception", "it", "will", "tell", "you", "exactly", "where", "the", "error", "be", "occurring", "in", "the", "code", "NUMBER", "It", "may", "do", "you", "some", "good", "to", "read", "a", "python", "debugging", "tutorial", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "les", "TAG", "write", "My", "repo", "was", "constantly", "be", "tweaked", "and", "worked", "on", "recently", "so", "I", "m", "not", "sure", "when", "you", "downloaded", "it", "NUMBER", "As", "of", "just", "a", "few", "hours", "ago", "be", "it", "passing", "all", "of", "the", "test", "and", "be", "stable", "NUMBER", "Please", "try", "forking", "my", "version", "again", "and", "if", "you", "run", "into", "the", "same", "problem", "again", "I", "ll", "give", "it", "a", "good", "look", "and", "help", "resolve", "the", "issue", "NUMBER", "My", "repo", "as", "at", "stands", "as", "of", "RIGHT", "NOW", "be", "I", "believe", "about", "to", "be", "merge", "into", "the", "main", "branch", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Erick", "S\u00e1nchez", "P\u00e9rez", "TAG", "write", "Hi", "again", "lesleslie", "TAG", "I", "test", "you", "fork", "repo", "and", "install", "but", "the", "same", "example", "now", "gave", "me", "this", "error", "Type", "something", "to", "begin", "NUMBER", "hi", "Is", "hi", "this", "a", "coherent", "response", "to", "hi", "no", "hi", "Traceback", "most", "recent", "call", "last", "File", "so", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "orage", "NUMBER", "add_to_conversation", "bot", "NUMBER", "default_session", "statement", "response", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "line", "NUMBER", "in", "add_to_conversation", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "sqlalchemy", "orm", "query", "NUMBER", "py", "line", "NUMBER", "in", "get", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "sqlalchemy", "orm", "query", "NUMBER", "py", "line", "NUMBER", "in", "_get_impl", "TypeError", "object", "of", "type", "NoneType", "has", "no", "len", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Make", "that", "line", "NUMBER", "in", "so", "NUMBER", "py", "NUMBER", "I", "think", "I", "get", "it", "right", "this", "time", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "les", "TAG", "write", "Sorry", "again", "that", "s", "line", "NUMBER", "in", "so", "NUMBER", "py", "NUMBER", "I", "m", "doing", "this", "from", "my", "phone", "NUMBER", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "les", "TAG", "write", "Nevermind", "that", "last", "statement", "NUMBER", "You", "need", "to", "change", "default_session", "to", "conversation_id", "in", "line", "NUMBER", "of", "so", "NUMBER", "py", "NUMBER", "Again", "if", "you", "follow", "the", "traceback", "to", "the", "Exception", "it", "will", "tell", "you", "exactly", "where", "the", "error", "be", "occurring", "in", "the", "code", "NUMBER", "It", "may", "do", "you", "some", "good", "to", "read", "a", "python", "debugging", "tutorial", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "les", "TAG", "write", "My", "repo", "was", "constantly", "be", "tweaked", "and", "worked", "on", "recently", "so", "I", "m", "not", "sure", "when", "you", "downloaded", "it", "NUMBER", "As", "of", "just", "a", "few", "hours", "ago", "be", "it", "passing", "all", "of", "the", "test", "and", "be", "stable", "NUMBER", "Please", "try", "forking", "my", "version", "again", "and", "if", "you", "run", "into", "the", "same", "problem", "again", "I", "ll", "give", "it", "a", "good", "look", "and", "help", "resolve", "the", "issue", "NUMBER", "My", "repo", "as", "at", "stands", "as", "of", "RIGHT", "NOW", "be", "I", "believe", "about", "to", "be", "merge", "into", "the", "main", "branch", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Erick", "S\u00e1nchez", "P\u00e9rez", "TAG", "write", "Hi", "again", "lesleslie", "TAG", "I", "test", "you", "fork", "repo", "and", "install", "but", "the", "same", "example", "now", "gave", "me", "this", "error", "Type", "something", "to", "begin", "NUMBER", "hi", "Is", "hi", "this", "a", "coherent", "response", "to", "hi", "no", "hi", "Traceback", "most", "recent", "call", "last", "File", "so", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "orage", "NUMBER", "add_to_conversation", "bot", "NUMBER", "default_session", "statement", "response", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "line", "NUMBER", "in", "add_to_conversation", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "sqlalchemy", "orm", "query", "NUMBER", "py", "line", "NUMBER", "in", "get", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "sqlalchemy", "orm", "query", "NUMBER", "py", "line", "NUMBER", "in", "_get_impl", "TypeError", "object", "of", "type", "NoneType", "has", "no", "len", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Sorry", "again", "that", "s", "line", "NUMBER", "in", "so", "NUMBER", "py", "NUMBER", "I", "m", "doing", "this", "from", "my", "phone", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "les", "TAG", "write", "Nevermind", "that", "last", "statement", "NUMBER", "You", "need", "to", "change", "default_session", "to", "conversation_id", "in", "line", "NUMBER", "of", "so", "NUMBER", "py", "NUMBER", "Again", "if", "you", "follow", "the", "traceback", "to", "the", "Exception", "it", "will", "tell", "you", "exactly", "where", "the", "error", "be", "occurring", "in", "the", "code", "NUMBER", "It", "may", "do", "you", "some", "good", "to", "read", "a", "python", "debugging", "tutorial", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "les", "TAG", "write", "My", "repo", "was", "constantly", "be", "tweaked", "and", "worked", "on", "recently", "so", "I", "m", "not", "sure", "when", "you", "downloaded", "it", "NUMBER", "As", "of", "just", "a", "few", "hours", "ago", "be", "it", "passing", "all", "of", "the", "test", "and", "be", "stable", "NUMBER", "Please", "try", "forking", "my", "version", "again", "and", "if", "you", "run", "into", "the", "same", "problem", "again", "I", "ll", "give", "it", "a", "good", "look", "and", "help", "resolve", "the", "issue", "NUMBER", "My", "repo", "as", "at", "stands", "as", "of", "RIGHT", "NOW", "be", "I", "believe", "about", "to", "be", "merge", "into", "the", "main", "branch", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Erick", "S\u00e1nchez", "P\u00e9rez", "TAG", "write", "Hi", "again", "lesleslie", "TAG", "I", "test", "you", "fork", "repo", "and", "install", "but", "the", "same", "example", "now", "gave", "me", "this", "error", "Type", "something", "to", "begin", "NUMBER", "hi", "Is", "hi", "this", "a", "coherent", "response", "to", "hi", "no", "hi", "Traceback", "most", "recent", "call", "last", "File", "so", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "orage", "NUMBER", "add_to_conversation", "bot", "NUMBER", "default_session", "statement", "response", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "line", "NUMBER", "in", "add_to_conversation", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "sqlalchemy", "orm", "query", "NUMBER", "py", "line", "NUMBER", "in", "get", "File", "build", "bdist", "NUMBER", "macosx", "NUMBER", "intel", "egg", "sqlalchemy", "orm", "query", "NUMBER", "py", "line", "NUMBER", "in", "_get_impl", "TypeError", "object", "of", "type", "NoneType", "has", "no", "len", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "nalancer", "NUMBER", "sorry", "but", "there", "be", "an", "issue", "with", "the", "sql_storage", "adapter", "right", "now", "NUMBER", "the", "default_conversation_id", "can", "not", "be", "None", "when", "querying", "sql", "databases", "NUMBER", "i", "ve", "be", "strictly", "use", "mongodb", "so", "i", "didn", "t", "see", "it", "and", "somehow", "all", "the", "test", "pass", "this", "way", "NUMBER", "i", "was", "just", "playing", "around", "with", "the", "sql_adapter", "again", "and", "see", "what", "you", "be", "talking", "about", "NUMBER", "good", "catch", "NUMBER", "i", "have", "solution", "that", "i", "ll", "be", "proposing", "and", "push", "hopefully", "within", "the", "next", "hour", "or", "so", "NUMBER", "stay", "tuned", "NUMBER", "i", "ll", "keep", "you", "informed", "NUMBER", "i", "be", "referring", "to", "this", "TypeError", "object", "of", "type", "NoneType", "has", "no", "len", "as", "I", "get", "it", "too", "NUMBER", "nalancer", "NUMBER", "this", "be", "my", "the", "workaround", "that", "i", "propose", "for", "you", "change", "DEFAULT_CONVERSATION_ID", "or", "DEFAULT_SESSION_ID", "or", "whatever", "you", "have", "in", "your", "code", "to", "bot", "NUMBER", "orage", "NUMBER", "create_conversation", "NUMBER", "ie", "DEFAULT_CONVERSATION_ID", "bot", "NUMBER", "orage", "NUMBER", "create_conversation", "this", "change", "makes", "more", "sense", "to", "me", "because", "each", "time", "you", "access", "the", "bot", "via", "terminal", "or", "however", "you", "re", "doing", "it", "it", "actually", "be", "it", "s", "own", "conversation", "and", "should", "be", "treated", "as", "such", "NUMBER", "Let", "s", "say", "you", "talk", "to", "your", "bot", "in", "terminal", "mode", "and", "the", "somebody", "else", "then", "talks", "your", "bot", "in", "terminal", "mode", "these", "be", "two", "separate", "conversations", "and", "should", "be", "treated", "as", "such", "NUMBER", "what", "i", "be", "going", "to", "recommend", "in", "my", "pull", "request", "be", "change", "DEFAULT_CONVERSATION_ID", "to", "just", "CONVERSATION_ID", "in", "examples", "learning_feedback_example", "NUMBER", "py", "and", "examples", "learning_new_response", "NUMBER", "py", "like", "so", "CONVERSATION_ID", "bot", "NUMBER", "orage", "NUMBER", "create_conversation", "this", "would", "mean", "the", "rest", "of", "your", "code", "would", "need", "to", "change", "DEFAULT_CONVERSATION_ID", "to", "CONVERSATION_ID", "NUMBER", "i", "will", "also", "be", "add", "a", "line", "to", "learning", "new_response", "NUMBER", "py", "so", "lines", "NUMBER", "NUMBER", "will", "now", "look", "like", "this", "if", "get_feedback", "print", "please", "input", "the", "correct", "one", "response", "NUMBER", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "bot", "NUMBER", "learn_response", "response", "NUMBER", "input_statement", "bot", "NUMBER", "orage", "NUMBER", "add_to_conversation", "CONVERSATION_ID", "statement", "response", "NUMBER", "print", "Responses", "add", "to", "bot", "this", "way", "the", "new", "response", "will", "be", "saved", "to", "the", "conversation", "too", "NUMBER", "les", "nalancer", "NUMBER", "see", "NUMBER", "lesleslie", "let", "me", "check", "chatterbot", "trainers", "NUMBER", "py", "Some", "lines", "of", "Ubuntu", "data", "be", "non", "ascii", "I", "m", "reading", "about", "ResponseQueue", "and", "Session", "docs", "but", "I", "be", "wondering", "that", "how", "chatterbot", "works", "when", "ResponseQueue", "be", "full", "maxsize", "NUMBER", "NUMBER", "Chatterbot", "will", "create", "a", "new", "Session", "or", "something", "i", "don", "t", "know", "NUMBER", "Please", "help", "me", "to", "explain", "this", "NUMBER", "Thanks", "NUMBER", "I", "want", "to", "do", "a", "Facebook", "chatbot", "use", "Chatterbot", "but", "I", "don", "t", "know", "whether", "I", "have", "to", "create", "a", "new", "input", "adapter", "or", "not", "NUMBER", "Can", "you", "give", "me", "a", "guess", "Thank", "you", "so", "much", "I", "have", "just", "made", "a", "simple", "chatbot", "use", "Fb", "and", "chatterbot", "but", "I", "didn", "t", "create", "a", "new", "input", "adapter", "NUMBER", "I", "only", "followed", "this", "project", "LINK", "chatterbot", "NUMBER", "However", "I", "think", "in", "future", "I", "will", "create", "a", "Facebook", "adapter", "for", "chatterbot", "NUMBER", "This", "maybe", "interesting", "NUMBER", "Thank", "you", "very", "much", "NUMBER", "This", "commit", "be", "in", "response", "to", "NUMBER", "It", "allows", "sqlite", "pragma", "settings", "to", "be", "set", "NUMBER", "This", "commit", "sets", "PRAGMA", "journal_mode", "WAL", "PRAGMA", "synchronous", "NORMAL", "when", "sqlite", "be", "use", "for", "the", "database", "NUMBER", "These", "settings", "should", "speed", "things", "up", "while", "still", "maintaining", "data", "integrity", "NUMBER", "See", "NUMBER", "for", "more", "details", "NUMBER", "Also", "change", "default_session", "NUMBER", "id", "to", "default_conversation_id", "for", "examples", "learning_feedback_example", "NUMBER", "py", "and", "learning_new_response", "NUMBER", "py", "NUMBER", "Those", "examples", "were", "broken", "somewhere", "between", "NUMBER", "and", "NUMBER", "change", "distinct", "to", "aggregate", "for", "response_query", "in", "mongodb", "NUMBER", "py", "get_response_statements", "NUMBER", "This", "probably", "close", "NUMBER", "NUMBER", "NUMBER", "I", "didn", "t", "actually", "clock", "it", "but", "the", "query", "now", "seems", "to", "be", "run", "about", "at", "least", "NUMBER", "x", "faster", "on", "an", "NUMBER", "MB", "collection", "NUMBER", "and", "yes", "you", "should", "be", "able", "to", "break", "the", "NUMBER", "MB", "BSON", "limit", "NUMBER", "Thank", "you", "NUMBER", "This", "be", "a", "great", "app", "and", "I", "m", "thrilled", "to", "be", "able", "to", "contribute", "to", "it", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Gunther", "Cox", "TAG", "write", "lesleslie", "TAG", "There", "be", "some", "great", "change", "here", "thank", "you", "NUMBER", "Once", "the", "test", "be", "passing", "I", "ll", "be", "happy", "to", "merge", "in", "your", "change", "NUMBER", "Thank", "you", "again", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Just", "fyi", "you", "should", "expect", "contributions", "from", "me", "for", "the", "kensor", "tensor", "flow", "logic", "adapter", "as", "well", "as", "Facebook", "messenger", "input", "and", "output", "adapters", "NUMBER", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "les", "TAG", "write", "Thank", "you", "NUMBER", "This", "be", "a", "great", "app", "and", "I", "m", "thrilled", "to", "be", "able", "to", "contribute", "to", "it", "NUMBER", "les", "On", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Gunther", "Cox", "TAG", "write", "lesleslie", "TAG", "There", "be", "some", "great", "change", "here", "thank", "you", "NUMBER", "Once", "the", "test", "be", "passing", "I", "ll", "be", "happy", "to", "merge", "in", "your", "change", "NUMBER", "Thank", "you", "again", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Ok", "all", "test", "pass", "Sorry", "about", "the", "sloppy", "pull", "request", "and", "all", "the", "commit", "NUMBER", "I", "have", "a", "better", "idea", "of", "the", "process", "now", "NUMBER", "This", "was", "also", "my", "first", "experience", "with", "Travis", "CI", "but", "I", "think", "I", "have", "a", "good", "handle", "on", "that", "now", "too", "NUMBER", "I", "ll", "be", "much", "cleaner", "about", "my", "pull", "request", "moving", "forward", "NUMBER", "I", "will", "note", "it", "hear", "that", "increasing", "the", "sort", "buffer", "size", "use", "self", "NUMBER", "client", "NUMBER", "admin", "NUMBER", "command", "setParameter", "NUMBER", "internalQueryExecMaxBlockingSortBytes", "NUMBER", "do", "not", "currently", "work", "for", "Python", "NUMBER", "on", "Linux", "or", "Python", "NUMBER", "on", "Windows", "NUMBER", "NUMBER", "according", "to", "NUMBER", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "no", "need", "fox", "suffix", "NUMBER", "use", "sys", "NUMBER", "path", "NUMBER", "otherwise", "the", "relative", "path", "will", "change", "with", "location", "where", "python", "interpreter", "start", "vkosuri", "for", "example", "if", "I", "use", "bot", "ChatBot", "Name", "database", "NUMBER", "databse", "NUMBER", "db", "according", "to", "docs", "database", "NUMBER", "db", "NUMBER", "db", "will", "be", "generate", "because", "of", "NUMBER", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "add", "NUMBER", "db", "default", "NUMBER", "another", "problem", "if", "I", "use", "bot", "ChatBot", "Name", "database", "NUMBER", "databse", "NUMBER", "db", "in", "dir", "NUMBER", "dir", "NUMBER", "demo", "NUMBER", "py", "dir", "NUMBER", "python", "dir", "NUMBER", "demo", "NUMBER", "py", "would", "generate", "databse", "file", "in", "dir", "NUMBER", "dir", "NUMBER", "dir", "NUMBER", "python", "demo", "NUMBER", "py", "wolud", "generate", "database", "file", "in", "dir", "NUMBER", "this", "be", "confused", "use", "sys", "NUMBER", "path", "NUMBER", "can", "avoid", "it", "NUMBER", "sorry", "for", "my", "pool", "english", "NUMBER", "I", "agree", "with", "you", "However", "I", "can", "t", "pass", "all", "test", "when", "I", "tried", "to", "change", "sqladapter", "due", "to", "python", "def", "test_set_database_name", "self", "adapter", "SQLStorageAdapter", "database", "test", "self", "NUMBER", "assertEqual", "adapter", "NUMBER", "database_uri", "sqlite", "test", "NUMBER", "db", "in", "NUMBER", "test", "storage_adapter_tests", "test_sqlalchemy_adapter", "NUMBER", "py", "NUMBER", "Therefore", "I", "fix", "the", "docs", "NUMBER", "I", "be", "a", "beginner", "but", "I", "like", "to", "fix", "the", "problem", "NUMBER", "gunthercox", "gunthercox", "I", "modify", "the", "code", "and", "commit", "it", "NUMBER", "This", "be", "my", "first", "time", "to", "contribute", "code", "like", "this", "thanks", "for", "you", "guidance", "that", "can", "t", "pass", "the", "test", "case", "def", "test_set_database_name", "self", "adapter", "SQLStorageAdapter", "database", "test", "self", "NUMBER", "assertEqual", "adapter", "NUMBER", "database_uri", "sqlite", "test", "NUMBER", "db", "ChatterBot", "test", "storage_adapter_tests", "test_sqlalchemy_adapter", "NUMBER", "py", "L", "NUMBER", "LINK", "_adapter_tests", "test_sqlalchemy_adapter", "NUMBER", "py", "L", "NUMBER", "gunthercox", "Hi", "I", "use", "a", "Mac", "with", "python", "NUMBER", "and", "pip", "NUMBER", "When", "i", "tried", "to", "install", "the", "bot", "with", "pip", "gives", "me", "this", "error", "can", "you", "help", "me", "NUMBER", "Collecting", "ruamel", "NUMBER", "yaml", "TAG", "NUMBER", "chatterbot", "Downloading", "ruamel", "NUMBER", "yaml", "NUMBER", "tar", "NUMBER", "gz", "NUMBER", "kB", "NUMBER", "NUMBER", "kB", "NUMBER", "MB", "s", "Complete", "output", "from", "command", "python", "setup", "NUMBER", "py", "egg_info", "tmp", "tmp_ruamel_", "NUMBER", "utFWU", "test_ruamel_yaml", "NUMBER", "c", "NUMBER", "NUMBER", "warning", "explicitly", "assigning", "value", "of", "variable", "of", "type", "yaml_parser_t", "aka", "struct", "yaml_parser_s", "to", "itself", "Wself", "assign", "parser", "parser", "prevent", "warning", "tmp", "tmp_ruamel_", "NUMBER", "utFWU", "test_ruamel_yaml", "NUMBER", "c", "NUMBER", "NUMBER", "warning", "variable", "parser", "be", "uninitialized", "when", "use", "here", "Wuninitialized", "parser", "parser", "prevent", "warning", "tmp", "tmp_ruamel_", "NUMBER", "utFWU", "test_ruamel_yaml", "NUMBER", "c", "NUMBER", "NUMBER", "note", "variable", "parser", "be", "declared", "here", "yaml_parser_t", "parser", "NUMBER", "warnings", "generate", "NUMBER", "tmp", "tmp_ruamel_", "NUMBER", "utFWU", "test_ruamel_yaml", "NUMBER", "c", "NUMBER", "NUMBER", "warning", "explicitly", "assigning", "value", "of", "variable", "of", "type", "yaml_parser_t", "aka", "struct", "yaml_parser_s", "to", "itself", "Wself", "assign", "parser", "parser", "prevent", "warning", "tmp", "tmp_ruamel_", "NUMBER", "utFWU", "test_ruamel_yaml", "NUMBER", "c", "NUMBER", "NUMBER", "warning", "variable", "parser", "be", "uninitialized", "when", "use", "here", "Wuninitialized", "parser", "parser", "prevent", "warning", "tmp", "tmp_ruamel_", "NUMBER", "utFWU", "test_ruamel_yaml", "NUMBER", "c", "NUMBER", "NUMBER", "note", "variable", "parser", "be", "declared", "here", "yaml_parser_t", "parser", "NUMBER", "warnings", "generate", "NUMBER", "sys", "NUMBER", "argv", "c", "egg_info", "egg", "base", "pip", "egg", "info", "test", "compile", "test_ruamel_yaml", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "private", "tmp", "pip", "build", "_", "NUMBER", "XDX", "NUMBER", "ruamel", "NUMBER", "yaml", "setup", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "main", "File", "private", "tmp", "pip", "build", "_", "NUMBER", "XDX", "NUMBER", "ruamel", "NUMBER", "yaml", "setup", "NUMBER", "py", "line", "NUMBER", "in", "main", "setup", "kw", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "distutils", "core", "NUMBER", "py", "line", "NUMBER", "in", "setup", "_setup_distribution", "dist", "klass", "attrs", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "Extras", "lib", "python", "setuptools", "dist", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "_Distribution", "NUMBER", "__init__", "self", "attrs", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "distutils", "dist", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "finalize_options", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "Extras", "lib", "python", "setuptools", "dist", "NUMBER", "py", "line", "NUMBER", "in", "finalize_options", "ep", "NUMBER", "require", "installer", "self", "NUMBER", "fetch_build_egg", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "Extras", "lib", "python", "pkg_resources", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "require", "reqs", "self", "NUMBER", "dist", "NUMBER", "requires", "self", "NUMBER", "extras", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "Extras", "lib", "python", "pkg_resources", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "requires", "dm", "self", "NUMBER", "_dep_map", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "Extras", "lib", "python", "pkg_resources", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "_dep_map", "if", "invalid_marker", "marker", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "Extras", "lib", "python", "pkg_resources", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "is_invalid_marker", "cls", "NUMBER", "evaluate_marker", "text", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "Extras", "lib", "python", "pkg_resources", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "_markerlib_evaluate", "env", "cls", "NUMBER", "_translate_metadata", "NUMBER", "_markerlib", "NUMBER", "default_environment", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "Extras", "lib", "python", "pkg_resources", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "_translate_metadata", "NUMBER", "for", "key", "value", "in", "env", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "Extras", "lib", "python", "pkg_resources", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "key", "NUMBER", "replace", "NUMBER", "_", "value", "ValueError", "too", "many", "values", "to", "unpack", "Command", "python", "setup", "NUMBER", "py", "egg_info", "fail", "with", "error", "code", "NUMBER", "in", "private", "tmp", "pip", "build", "_", "NUMBER", "XDX", "NUMBER", "ruamel", "NUMBER", "yaml", "How", "about", "python", "NUMBER", "Thank", "you", "so", "much", "for", "everyone", "I", "fix", "compile", "direct", "with", "python", "setup", "NUMBER", "py", "build", "python", "setup", "NUMBER", "py", "install", "But", "with", "PIP", "I", "didnt", "make", "it", "works", "LINK", "L", "NUMBER", "Can", "we", "train", "chatterbot", "with", "smiley", "as", "input", "or", "response", "I", "tried", "use", "python", "library", "emojione", "with", "chatterbot", "but", "it", "didn", "t", "help", "NUMBER", "anyone", "succeeded", "in", "doing", "this", "your", "help", "be", "appreciated", "NUMBER", "gunthercox", "thank", "you", "NUMBER", "if", "your", "attempt", "succeeds", "i", "will", "add", "corpus", "for", "emoticons", "NUMBER", "Hi", "gunthercox", "i", "have", "update", "on", "this", "NUMBER", "We", "can", "use", "emojipy", "Python", "library", "for", "work", "with", "emojione", "NUMBER", "There", "be", "shortcodes", "associated", "with", "each", "emoticon", "NUMBER", "smiling", "face", "shortcode", "be", "grinning", "Hence", "we", "can", "train", "chatbot", "as", "Input", "grinning", "response", "You", "seems", "to", "be", "happy", "today", "Hence", "the", "task", "be", "first", "convert", "smiley", "image", "into", "short", "code", "NUMBER", "Hope", "I", "have", "write", "in", "a", "way", "you", "should", "understand", "it", "NUMBER", "I", "have", "trying", "to", "train", "with", "the", "twitter", "trainer", "because", "of", "the", "following", "error", "twitter", "NUMBER", "error", "NUMBER", "TwitterError", "code", "NUMBER", "message", "Invalid", "or", "expired", "token", "NUMBER", "how", "can", "I", "solve", "this", "problem", "vkosuri", "Thanks", "NUMBER", "Solved", "it", "NUMBER", "i", "have", "corps", "with", "NUMBER", "lines", "data", "and", "i", "try", "to", "train", "the", "corps", "but", "it", "s", "too", "slow", "be", "there", "any", "ways", "to", "improve", "the", "performance", "in", "ChatterBot", "aliray", "if", "you", "don", "t", "mind", "can", "you", "please", "state", "where", "you", "acquired", "the", "data", "from", "Corps", "with", "NUMBER", "lines", "data", "use", "mongodb", "super", "slow", "NUMBER", "laonan", "hello", "have", "u", "solve", "the", "problem", "of", "efficiency", "NUMBER", "I", "meet", "the", "same", "problem", "not", "yet", "if", "u", "have", "any", "good", "news", "would", "pls", "let", "me", "know", "thx", "NUMBER", "\u5728", "NUMBER", "\u5e74", "NUMBER", "\u6708", "NUMBER", "\u65e5", "\u4e0b\u5348", "NUMBER", "NUMBER", "Lee", "Tao", "TAG", "\u5199\u9053", "laonan", "TAG", "hello", "have", "u", "solve", "the", "problem", "of", "efficiency", "NUMBER", "I", "meet", "the", "same", "problem", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "I", "guess", "the", "answer", "to", "my", "question", "be", "yes", "NUMBER", "But", "it", "shouldn", "t", "be", "any", "issue", "to", "connect", "the", "Chatterbot", "to", "PostgresSQL", "Do", "you", "have", "any", "guide", "lines", "how", "to", "connect", "the", "Chatterbot", "to", "other", "databases", "Thanks", "Christian", "gunthercox", "Next", "question", "be", "it", "then", "possible", "to", "have", "multiple", "databases", "sources", "I", "m", "thinking", "to", "have", "a", "central", "Database", "where", "multiple", "chatterbot", "only", "will", "read", "from", "and", "also", "have", "a", "local", "database", "that", "contain", "data", "that", "Chatterbot", "can", "read", "write", "to", "NUMBER", "Thanks", "gunthercox", "will", "try", "with", "PostgreSQL", "and", "get", "back", "to", "you", "if", "it", "works", "or", "not", "NUMBER", "i", "actually", "use", "postgresql", "before", "even", "trying", "chatterbot", "with", "sqlite", "and", "it", "worked", "just", "fine", "NUMBER", "i", "went", "back", "to", "test", "it", "again", "for", "you", "and", "came", "across", "NUMBER", "btw", "NUMBER", "with", "the", "patch", "in", "NUMBER", "add", "to", "my", "personal", "code", "it", "worked", "just", "fine", "NUMBER", "i", "ve", "use", "sqlalchemy", "with", "postgresql", "and", "sqlite", "in", "another", "project", "of", "mine", "and", "it", "was", "seamless", "NUMBER", "you", "will", "need", "to", "install", "psycopg", "NUMBER", "in", "order", "to", "use", "postgresql", "with", "sqlalchemy", "NUMBER", "so", "pip", "install", "psycopg", "NUMBER", "then", "set", "database", "uri", "to", "one", "of", "the", "following", "database_uri", "postgresql", "localhost", "database_name", "database_uri", "postgresql", "localhost", "port_number", "database_name", "database_uri", "postgresql", "user", "password", "localhost", "database_name", "database_uri", "postgresql", "user", "password", "remote_host", "database_name", "database_uri", "postgresql", "user", "password", "remote_host", "port_number", "database_name", "you", "get", "the", "picture", "NUMBER", "unless", "someone", "else", "beats", "me", "to", "it", "i", "ll", "look", "and", "see", "if", "this", "can", "be", "add", "anywhere", "in", "the", "documentation", "and", "then", "recommend", "that", "this", "issue", "be", "close", "NUMBER", "les", "Issen", "NUMBER", "the", "multiple", "databases", "sources", "question", "should", "probably", "be", "opened", "up", "in", "another", "issue", "as", "a", "feature", "request", "NUMBER", "Thanks", "lesleslie", "I", "will", "try", "this", "tomorrow", "in", "our", "lab", "NUMBER", "lesleslie", "I", "did", "a", "quick", "test", "but", "I", "get", "a", "import", "issue", "when", "loading", "the", "chatterbot", "module", "NUMBER", "It", "complain", "it", "can", "t", "import", "the", "StorageAdapter", "NUMBER", "But", "I", "need", "some", "more", "time", "to", "verify", "what", "s", "going", "on", "NUMBER", "lesleslie", "I", "get", "the", "PostgreSQL", "connection", "to", "work", "NUMBER", "But", "now", "by", "change", "the", "sql_storage", "NUMBER", "py", "but", "via", "the", "Django", "settings", "NUMBER", "py", "file", "NUMBER", "Maybe", "the", "chatterbot", "works", "different", "between", "if", "you", "be", "going", "though", "the", "Django", "App", "and", "if", "you", "go", "though", "the", "pure", "python", "app", "NUMBER", "Because", "if", "I", "only", "import", "the", "ChatBot", "module", "from", "chatterbot", "it", "doesn", "t", "complain", "during", "the", "load", "but", "it", "complain", "during", "the", "training", "but", "it", "complaining", "that", "the", "module", "chatbot", "NUMBER", "train", "NUMBER", "Thanks", "I", "will", "close", "this", "ticket", "because", "it", "works", "when", "I", "change", "the", "Django", "Settings", "for", "PostgreSQL", "and", "that", "be", "good", "enough", "for", "me", "NUMBER", "image", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "b", "NUMBER", "f", "NUMBER", "bcc", "NUMBER", "b", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "b", "NUMBER", "bd", "NUMBER", "f", "NUMBER", "png", "I", "use", "NUMBER", "and", "upgrade", "to", "version", "NUMBER", "now", "but", "still", "the", "same", "issue", "NUMBER", "I", "get", "a", "feeling", "that", "chatterbot", "responds", "back", "to", "me", "and", "the", "question", "I", "ask", "back", "will", "be", "the", "answer", "for", "the", "Chatterbot", "NUMBER", "So", "all", "data", "it", "get", "to", "the", "wrong", "database", "table", "NUMBER", "vkosuri", "I", "be", "use", "NUMBER", "version", "Issen", "NUMBER", "sometimes", "the", "question", "I", "ask", "be", "also", "returned", "to", "me", "as", "answers", "NUMBER", "sherinmannambeth", "I", "think", "you", "be", "use", "mongodb", "storage", "adapter", "if", "yes", "the", "work", "around", "be", "use", "tochatterbot", "version", "NUMBER", "It", "will", "resolve", "your", "issue", "NUMBER", "I", "can", "now", "see", "that", "with", "NUMBER", "that", "if", "I", "ask", "a", "question", "I", "get", "the", "correct", "responds", "but", "when", "I", "ask", "another", "question", "or", "continue", "the", "conversation", "the", "chatterbot", "think", "that", "be", "the", "answer", "for", "the", "statement", "that", "the", "Chatterbot", "responded", "back", "to", "be", "from", "the", "first", "question", "NUMBER", "Then", "next", "time", "I", "ask", "the", "NUMBER", "question", "I", "get", "the", "wrong", "answer", "back", "NUMBER", "First", "Time", "Me", "Hello", "Bot", "Hi", "Me", "How", "be", "you", "Bot", "I", "m", "good", "Second", "Time", "Me", "Hello", "Bot", "Hi", "Me", "How", "be", "you", "Bot", "Hi", "When", "I", "look", "in", "the", "SQLite", "Database", "I", "can", "now", "see", "following", "info", "Statement", "Responds", "Hi", "How", "be", "you", "Hello", "Hi", "I", "get", "a", "feeling", "that", "I", "m", "push", "in", "data", "for", "each", "statement", "NUMBER", "Christian", "bainadeashish", "I", "be", "use", "chatterbot", "NUMBER", "orage", "NUMBER", "DjangoStorageAdapter", "sherinmannambeth", "just", "a", "question", "for", "you", "be", "you", "use", "it", "together", "with", "Django", "And", "have", "you", "sort", "of", "copycat", "the", "django", "App", "HTML", "code", "that", "include", "as", "an", "example", "with", "the", "GitHub", "package", "Because", "I", "start", "thinking", "this", "be", "not", "a", "Chatterbot", "problem", "NUMBER", "I", "think", "this", "be", "a", "HTML", "Django", "problem", "that", "the", "responds", "start", "to", "be", "the", "question", "and", "everything", "you", "and", "I", "type", "will", "be", "the", "responds", "NUMBER", "Issen", "NUMBER", "Yes", "I", "be", "use", "the", "same", "Django", "App", "HTML", "Code", "NUMBER", "But", "this", "issue", "doesnt", "happen", "when", "I", "train", "data", "from", "the", "corpus", "NUMBER", "When", "trained", "the", "question", "goes", "to", "statement", "and", "answer", "goes", "to", "response", "NUMBER", "If", "this", "where", "to", "be", "Django", "s", "problem", "then", "y", "doesnt", "it", "reflect", "on", "training", "Even", "during", "when", "you", "run", "the", "corpus", "data", "file", "For", "trained", "data", "its", "normal", "NUMBER", "Only", "while", "run", "the", "bot", "the", "problem", "persists", "NUMBER", "And", "that", "s", "what", "s", "I", "mean", "NUMBER", "I", "think", "we", "have", "a", "JavaScript", "Python", "issue", "here", "and", "not", "a", "Python", "problem", "NUMBER", "When", "I", "follow", "the", "code", "in", "the", "HTML", "form", "we", "push", "in", "the", "same", "data", "though", "the", "same", "field", "and", "variable", "NUMBER", "So", "I", "think", "we", "need", "to", "debug", "the", "webpage", "javascript", "and", "make", "sure", "that", "be", "proper", "configured", "NUMBER", "capture", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "b", "NUMBER", "bbe", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "NUMBER", "PNG", "This", "be", "what", "you", "get", "when", "you", "run", "your", "chatbot", "gunthercox", "vkosuri", "can", "you", "point", "me", "to", "the", "area", "where", "you", "take", "the", "Javascript", "inputData", "and", "POST", "it", "to", "Python", "chatterbotURL", "Because", "I", "can", "see", "that", "we", "don", "t", "insert", "the", "first", "statement", "NUMBER", "And", "I", "get", "a", "feeling", "that", "you", "take", "the", "first", "sentence", "and", "then", "the", "second", "sentence", "match", "that", "data", "with", "exist", "data", "in", "the", "database", "NUMBER", "If", "not", "match", "then", "do", "you", "add", "the", "data", "to", "the", "data", "NUMBER", "If", "exist", "you", "just", "add", "the", "counter", "with", "NUMBER", "Need", "to", "follow", "that", "entire", "data", "flow", "to", "see", "where", "it", "goes", "wrong", "NUMBER", "Thanks", "Thanks", "That", "one", "did", "I", "already", "find", "out", "but", "what", "python", "file", "do", "that", "one", "point", "to", "I", "did", "search", "in", "view", "NUMBER", "py", "and", "url", "NUMBER", "py", "but", "can", "t", "find", "that", "inputData", "line", "NUMBER", "vkosuri", "Thanks", "and", "this", "was", "the", "area", "I", "looking", "for", "NUMBER", "But", "can", "now", "see", "that", "there", "be", "update", "in", "the", "code", "at", "GitHub", "but", "no", "formal", "update", "that", "could", "be", "use", "though", "pip", "install", "upgrade", "chatterbot", "command", "NUMBER", "But", "I", "will", "upgrade", "though", "GitHub", "and", "see", "if", "that", "fix", "solve", "the", "issue", "for", "us", "NUMBER", "The", "new", "code", "sort", "of", "solve", "the", "issue", "for", "me", "NUMBER", "But", "now", "do", "I", "get", "the", "Chatterbot", "Respond", "in", "the", "Statement", "column", "and", "the", "Responds", "column", "also", "my", "statement", "also", "get", "in", "both", "columns", "NUMBER", "I", "think", "this", "could", "be", "great", "by", "design", "function", "to", "be", "able", "to", "predict", "where", "the", "conversation", "will", "end", "NUMBER", "gunthercox", "vkosuri", "from", "my", "point", "of", "view", "has", "this", "issue", "be", "solve", "by", "the", "new", "code", "NUMBER", "sherinmannambeth", "FYI", "if", "you", "run", "a", "git", "clone", "from", "GitHub", "on", "this", "project", "to", "a", "separate", "directory", "NUMBER", "Copy", "the", "all", "data", "from", "directory", "ChatterBot", "chatterbot", "to", "your", "TAG", "lib", "pythonX", "NUMBER", "X", "site", "package", "chatterbot", "Then", "will", "your", "Statement", "Responds", "issue", "be", "solve", "and", "we", "can", "close", "this", "ticket", "NUMBER", "Issen", "NUMBER", "I", "have", "do", "what", "you", "said", "and", "this", "be", "what", "I", "get", "when", "test", "My", "conversation", "conv", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "ab", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "NUMBER", "f", "NUMBER", "f", "NUMBER", "ecfb", "NUMBER", "JPG", "In", "Django", "admin", "admin", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "d", "NUMBER", "fd", "NUMBER", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "ecc", "NUMBER", "c", "NUMBER", "JPG", "This", "be", "correct", "and", "this", "be", "what", "I", "asked", "gunthercox", "and", "vkosuri", "If", "the", "idea", "was", "to", "create", "a", "conversation", "we", "need", "both", "ChatterBot", "Reponds", "and", "what", "will", "your", "Responds", "be", "to", "his", "previews", "answer", "to", "be", "able", "to", "predict", "future", "conversation", "NUMBER", "Thanks", "No", "no", "NUMBER", "e", "conversation", "be", "work", "fine", "NUMBER", "but", "what", "comes", "in", "Django", "admin", "later", "becomes", "part", "of", "the", "training", "data", "NUMBER", "according", "to", "my", "conversation", "only", "two", "rows", "should", "be", "created", "in", "the", "admin", "part", "NUMBER", "but", "theres", "an", "extra", "row", "which", "finally", "add", "up", "to", "be", "a", "wrong", "training", "data", "NUMBER", "NUMBER", "d", "NUMBER", "fd", "NUMBER", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "ecc", "NUMBER", "c", "NUMBER", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "cf", "NUMBER", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "f", "NUMBER", "NUMBER", "e", "NUMBER", "cc", "NUMBER", "d", "NUMBER", "JPG", "The", "later", "effect", "be", "that", "when", "I", "ask", "Hello", "it", "will", "respond", "How", "be", "you", "sherinmannambeth", "I", "ll", "will", "work", "on", "this", "today", "and", "see", "if", "I", "can", "solve", "it", "NUMBER", "Because", "I", "agree", "with", "you", "with", "that", "result", "NUMBER", "But", "let", "me", "go", "though", "the", "code", "and", "see", "if", "I", "can", "find", "that", "statement", "in", "the", "code", "and", "see", "where", "it", "push", "in", "the", "responds", "in", "to", "the", "database", "NUMBER", "vkosuri", "maybe", "you", "have", "some", "sort", "of", "guidelines", "to", "come", "up", "with", "where", "I", "should", "search", "for", "NUMBER", "sherinmannambeth", "I", "think", "I", "find", "the", "issue", "NUMBER", "If", "you", "put", "a", "infront", "of", "line", "NUMBER", "NUMBER", "LINK", "_storage", "NUMBER", "py", "L", "NUMBER", "in", "django_storage", "NUMBER", "py", "then", "will", "you", "remove", "the", "double", "statement", "NUMBER", "gunthercox", "vkosuri", "do", "we", "know", "why", "we", "get", "that", "function", "Because", "when", "I", "switch", "that", "values", "to", "Response", "NUMBER", "objects", "NUMBER", "create", "response", "response_statement", "statement", "statement", "the", "Chatterbot", "will", "then", "insert", "the", "correct", "statement", "and", "responds", "in", "the", "correct", "field", "NUMBER", "But", "that", "function", "do", "also", "help", "the", "chatterbot", "to", "create", "the", "statement", "responds", "twice", "NUMBER", "I", "can", "do", "a", "new", "pull", "request", "and", "fix", "that", "for", "you", "but", "need", "to", "understand", "why", "we", "even", "have", "it", "in", "the", "first", "place", "NUMBER", "Has", "this", "issue", "be", "fix", "I", "be", "also", "get", "this", "issue", "NUMBER", "vkosuri", "Issen", "NUMBER", "gunthercox", "rdt", "NUMBER", "No", "idea", "where", "were", "this", "Might", "Issen", "NUMBER", "know", "about", "this", "In", "order", "to", "get", "around", "this", "I", "be", "just", "setting", "the", "read_only", "flag", "to", "true", "NUMBER", "I", "don", "t", "particularly", "care", "that", "the", "chatbot", "learns", "from", "my", "users", "and", "the", "current", "way", "produces", "weird", "results", "NUMBER", "vkosuri", "Hi", "Team", "Initially", "i", "was", "use", "JsonFileStorageAdapter", "it", "was", "giving", "correct", "responses", "but", "it", "was", "slow", "NUMBER", "Hence", "I", "moved", "to", "MongoDatabaseAdapter", "NUMBER", "It", "be", "giving", "quick", "responses", "but", "inaccurate", "NUMBER", "Code", "be", "NUMBER", "Python", "bot", "ChatBot", "IVLI", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "database", "chatterbot", "database", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "response_selection_method", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_random_response", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "preprocessors", "chatterbot", "NUMBER", "preprocessors", "NUMBER", "clean_whitespace", "chatterbot", "NUMBER", "preprocessors", "NUMBER", "unescape_html", "chatterbot", "NUMBER", "preprocessors", "NUMBER", "convert_to_ascii", "silence_performance_warning", "True", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "bot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "greetings", "bot", "NUMBER", "read_only", "True", "Below", "be", "sample", "log", "for", "MongoDatabaseAdapter", "START", "OF", "MESSAGE", "DEBUG", "root", "Original", "messaage", "was", "hello", "DEBUG", "root", "Complete", "message", "was", "hello", "DEBUG", "root", "Corrected", "message", "was", "hello", "INFO", "chatterbot", "NUMBER", "adapters", "Recieved", "input", "statement", "hello", "INFO", "chatterbot", "NUMBER", "adapters", "hello", "be", "not", "a", "know", "statement", "INFO", "chatterbot", "NUMBER", "adapters", "Using", "hello", "as", "a", "close", "match", "to", "Hello", "INFO", "chatterbot", "NUMBER", "adapters", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "INFO", "chatterbot", "NUMBER", "response_selection", "Selecting", "a", "response", "from", "list", "of", "NUMBER", "options", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "Response", "selected", "NUMBER", "Using", "Hi", "INFO", "chatterbot", "NUMBER", "adapters", "BestMatch", "selected", "Hi", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "LowConfidenceAdapter", "selected", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "NoKnowledgeAdapter", "selected", "hello", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "chatterbot", "Adding", "hello", "as", "a", "response", "to", "Greetings", "DEBUG", "root", "Response", "for", "message", "was", "Hi", "DEBUG", "root", "START", "OF", "MESSAGE", "DEBUG", "root", "Original", "messaage", "was", "hello", "DEBUG", "root", "Complete", "message", "was", "hello", "DEBUG", "root", "Corrected", "message", "was", "hello", "INFO", "chatterbot", "NUMBER", "adapters", "Recieved", "input", "statement", "hello", "INFO", "chatterbot", "NUMBER", "adapters", "hello", "be", "not", "a", "know", "statement", "INFO", "chatterbot", "NUMBER", "adapters", "Using", "hello", "as", "a", "close", "match", "to", "Hello", "INFO", "chatterbot", "NUMBER", "adapters", "No", "response", "to", "Hello", "find", "NUMBER", "Selecting", "a", "random", "response", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "BestMatch", "selected", "I", "m", "doing", "well", "NUMBER", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "LowConfidenceAdapter", "selected", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "NoKnowledgeAdapter", "selected", "hello", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "chatterbot", "Adding", "hello", "as", "a", "response", "to", "Hi", "DEBUG", "root", "Response", "for", "message", "was", "I", "m", "doing", "well", "NUMBER", "WRONG", "RESPONSE", "DEBUG", "root", "What", "should", "I", "do", "to", "avoid", "such", "false", "responses", "Hi", "vkosuri", "I", "dont", "think", "its", "because", "of", "random", "response", "method", "NUMBER", "From", "the", "log", "i", "have", "shared", "earlier", "INFO", "chatterbot", "NUMBER", "adapters", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "when", "i", "gave", "hello", "as", "input", "it", "try", "to", "select", "from", "NUMBER", "optimal", "response", "NUMBER", "But", "second", "time", "i", "have", "given", "hello", "as", "input", "log", "says", "INFO", "chatterbot", "NUMBER", "adapters", "No", "response", "to", "Hello", "find", "NUMBER", "Selecting", "a", "random", "response", "NUMBER", "Here", "it", "be", "not", "able", "to", "find", "any", "optimal", "response", "NUMBER", "i", "think", "this", "be", "problem", "it", "then", "it", "be", "giving", "a", "random", "response", "NUMBER", "vkosuri", "yesterday", "i", "debug", "the", "code", "find", "that", "it", "be", "work", "weird", "for", "mongodb", "storage", "adapter", "NUMBER", "It", "be", "remove", "optimal", "response", "at", "each", "iteration", "by", "NUMBER", "For", "Hello", "i", "was", "having", "NUMBER", "response", "Hi", "Greetings", "Hey", "NUMBER", "for", "the", "NUMBER", "hello", "input", "it", "gave", "me", "below", "INFO", "chatterbot", "NUMBER", "adapters", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "For", "NUMBER", "nd", "hello", "input", "INFO", "chatterbot", "NUMBER", "adapters", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "for", "NUMBER", "rd", "hello", "input", "INFO", "chatterbot", "NUMBER", "adapters", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "for", "NUMBER", "th", "hello", "input", "INFO", "chatterbot", "NUMBER", "adapters", "No", "response", "to", "Hello", "find", "NUMBER", "Selecting", "a", "random", "response", "NUMBER", "vkosuri", "which", "version", "of", "chatterbot", "works", "fine", "with", "mongodb", "storage", "adapter", "so", "that", "I", "can", "use", "previous", "version", "of", "chatterbot", "till", "the", "time", "any", "of", "us", "fix", "this", "bug", "NUMBER", "vkosuri", "tag", "NUMBER", "work", "fine", "with", "mongodb", "storage", "adaptor", "post", "NUMBER", "to", "latest", "version", "which", "be", "NUMBER", "there", "be", "bug", "for", "mongodb", "storage", "adaptor", "NUMBER", "Hope", "this", "helps", "for", "resolving", "bug", "NUMBER", "We", "need", "to", "check", "what", "went", "wrong", "from", "NUMBER", "to", "NUMBER", "I", "have", "modify", "the", "response", "selector", "by", "add", "a", "variable", "to", "keep", "track", "of", "the", "context", "but", "when", "I", "tried", "it", "out", "with", "multiple", "users", "I", "see", "the", "context", "get", "overwritten", "by", "the", "last", "incoming", "message", "from", "any", "user", "So", "thinking", "of", "write", "the", "context", "with", "the", "session", "id", "into", "the", "mongo", "Can", "anybody", "guide", "me", "on", "how", "I", "can", "use", "inbuilt", "session", "module", "to", "enable", "this", "functionality", "or", "if", "there", "any", "better", "approach", "please", "do", "suggest", "Any", "help", "be", "welcome", "Thanks", "in", "advance", "Thanks", "for", "the", "Reply", "gunthercox", "Can", "please", "tell", "me", "which", "all", "modules", "will", "have", "change", "with", "your", "update", "very", "sorry", "for", "responding", "this", "late", "Reference", "pull", "request", "LINK", "hello", "all", "how", "can", "we", "train", "the", "chatterbot", "effectively", "to", "achieve", "the", "good", "response", "from", "bot", "NUMBER", "can", "you", "give", "suggestions", "to", "improve", "the", "quality", "of", "response", "from", "chatbot", "NUMBER", "thanks", "for", "the", "reply", "NUMBER", "Actually", "i", "want", "to", "know", "about", "HOW", "TO", "TRAIN", "a", "basic", "chatbot", "with", "more", "amount", "of", "data", "NUMBER", "Hemanth", "NUMBER", "you", "should", "just", "create", "a", "dataset", "dialogue", "corpus", "and", "format", "it", "to", "one", "of", "the", "use", "formats", "to", "training", "LINK", "NUMBER", "There", "be", "list", "of", "state", "of", "the", "art", "corpuses", "for", "training", "chatbots", "chat_corpus", "LINK", "Ma", "chat_corpus", "NUMBER", "Can", "you", "give", "a", "detailed", "explanation", "about", "this", "If", "you", "have", "tried", "and", "succeeded", "in", "doing", "this", "So", "this", "be", "not", "an", "easy", "thing", "to", "complete", "NUMBER", "We", "don", "t", "usually", "get", "the", "data", "set", "in", "the", "yaml", "format", "i", "NUMBER", "e", "the", "question", "and", "answer", "format", "and", "practically", "be", "it", "possible", "to", "get", "the", "large", "amount", "of", "data", "in", "that", "format", "The", "current", "version", "be", "update", "to", "NUMBER", "but", "it", "still", "doesn", "t", "solve", "the", "big", "data", "problem", "Only", "NUMBER", "took", "NUMBER", "seconds", "qq", "NUMBER", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "c", "NUMBER", "bdc", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "ce", "d", "NUMBER", "d", "NUMBER", "f", "NUMBER", "a", "NUMBER", "e", "NUMBER", "png", "Recommend", "the", "following", "robot", "fc", "NUMBER", "d", "NUMBER", "cbdc", "NUMBER", "f", "NUMBER", "db", "NUMBER", "b", "NUMBER", "e", "NUMBER", "a", "NUMBER", "fa", "NUMBER", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "f", "NUMBER", "NUMBER", "a", "NUMBER", "png", "WeChat", "applet", "gunthercox", "OK", "which", "version", "of", "the", "performance", "problem", "be", "likely", "to", "be", "solve", "gunthercox", "Quietly", "waiting", "hope", "can", "be", "realized", "as", "the", "tittle", "typed", "i", "want", "to", "know", "some", "basic", "principle", "of", "this", "project", "How", "do", "one", "change", "this", "parameter", "for", "the", "TwitterTrainer", "could", "you", "give", "me", "an", "example", "Here", "be", "the", "settings", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "gettext", "You", "can", "ask", "other", "question", "But", "in", "my", "logging", "file", "I", "find", "out", "it", "turn", "out", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "Recieved", "input", "statement", "\u54c8\u54c8\u54c8", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "\u54c8\u54c8\u54c8", "be", "not", "a", "know", "statement", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "Using", "\u54c8\u54c8\u54c8", "as", "a", "close", "match", "to", "\u54c8\u56c9", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "No", "response", "to", "\u54c8\u56c9", "find", "NUMBER", "Selecting", "a", "random", "response", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "BestMatch", "selected", "\u597d\u554a", "\u6b61\u8fce", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "LowConfidenceAdapter", "selected", "\u4f60\u53ef\u4ee5\u5617\u8a66\u554f\u5225\u7684\u554f\u984c", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "NoKnowledgeAdapter", "selected", "\u54c8\u54c8\u54c8", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "And", "the", "Low", "Confidence", "log", "be", "write", "LowConfidenceAdapter", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "All", "the", "confidence", "be", "NUMBER", "and", "it", "reply", "the", "random", "not", "the", "one", "I", "define", "threshold", "NUMBER", "you", "can", "ask", "other", "question", "NUMBER", "I", "think", "I", "be", "use", "too", "low", "threshold", "NUMBER", "After", "increase", "above", "NUMBER", "lots", "of", "dialog", "works", "NUMBER", "Maybe", "we", "can", "add", "a", "log", "info", "about", "closest_match", "NUMBER", "confidence", "with", "confidence_threshold", "NUMBER", "Definitely", "thank", "you", "NUMBER", "LINK", "NUMBER", "NUMBER", "x", "png", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "png", "I", "also", "get", "the", "error", "unicode", "NUMBER", "the", "database", "LINK", "database", "db", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "db", "this", "be", "my", "code", "LINK", "py", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "py", "vkosuri", "I", "fix", "this", "bug", "change", "web", "framework", "from", "turnado", "to", "sanic", "NUMBER", "python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "from", "sanic", "import", "Sanic", "from", "sanic", "NUMBER", "response", "import", "json", "Initialized", "API", "app", "Sanic", "Initialized", "chatbot", "chatbot", "ChatBot", "SMART", "XY", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "SQLStorageAdapter", "database", "chatterbot", "database", "app", "NUMBER", "route", "chat", "methods", "GET", "async", "def", "chatWithBot", "request", "result", "str", "\u5c0f\u76ca\u8d39\u5c3d\u4e86\u4e5d\u725b\u4e8c\u864e\u4e4b\u529b\u672a\u80fd\u627e\u5230\u76f8\u5173\u5185\u5bb9", "sentence", "str", "\u4f60\u8bf4\u4e86\u53e5\u5565", "try", "sentence", "str", "request", "NUMBER", "args", "NUMBER", "get", "sentence", "if", "sentence", "bot_result", "chatbot", "NUMBER", "get_response", "sentence", "if", "bot_result", "result", "str", "bot_result", "except", "e", "print", "e", "return", "json", "data", "result", "question", "sentence", "ensure_ascii", "False", "def", "main", "app", "NUMBER", "run", "host", "localhost", "port", "NUMBER", "if", "__name__", "__main__", "main", "This", "add", "general", "documentation", "on", "how", "to", "deploy", "a", "chat", "bot", "as", "a", "web", "application", "NUMBER", "It", "might", "be", "much", "too", "general", "at", "the", "moment", "so", "any", "feedback", "on", "how", "it", "could", "be", "improved", "would", "be", "greatly", "appreciated", "NUMBER", "Closes", "NUMBER", "Fixed", "by", "NUMBER", "After", "Its", "come", "to", "custom", "adapter", "chat", "should", "hold", "the", "state", "and", "continue", "until", "the", "form", "data", "filled", "NUMBER", "Example", "If", "I", "have", "NUMBER", "field", "in", "a", "form", "have", "to", "do", "validate", "and", "should", "get", "input", "from", "user", "NUMBER", "Like", "iDialog", "Form", "in", "Microsoft", "Bot", "Framework", "In", "the", "future", "this", "be", "a", "feature", "that", "might", "possibly", "be", "add", "NUMBER", "I", "have", "note", "about", "a", "possible", "design", "in", "the", "project", "wiki", "NUMBER", "Right", "now", "my", "focus", "be", "on", "improving", "the", "performance", "and", "accuracy", "of", "the", "chat", "bot", "s", "responses", "so", "this", "feature", "likely", "won", "t", "be", "add", "any", "time", "in", "the", "near", "future", "NUMBER", "This", "would", "be", "really", "useful", "NUMBER", "Being", "able", "to", "keep", "context", "and", "track", "what", "s", "required", "in", "a", "form", "would", "be", "great", "NUMBER", "Would", "the", "chat", "form", "LINK", "Forms", "require", "a", "django", "integration", "to", "hold", "a", "session", "I", "have", "a", "chat", "bot", "that", "isn", "t", "on", "a", "webserver", "and", "integrates", "with", "our", "Jabber", "chat", "server", "NUMBER", "I", "think", "the", "session", "manager", "be", "web", "only", "Would", "this", "form", "chat", "be", "restricted", "to", "a", "web", "server", "that", "can", "hold", "a", "session", "Hi", "I", "m", "new", "on", "Django", "but", "I", "get", "the", "Chatterbot", "install", "successfully", "in", "my", "own", "Django", "installation", "NUMBER", "I", "have", "also", "successfully", "imported", "the", "Exampel", "App", "you", "guys", "have", "wroted", "so", "I", "can", "talk", "though", "the", "API", "NUMBER", "But", "now", "do", "I", "have", "a", "large", "list", "of", "training", "data", "that", "I", "want", "to", "import", "to", "the", "Database", "NUMBER", "How", "be", "the", "easiest", "way", "to", "import", "that", "I", "have", "a", "text", "file", "in", "the", "same", "format", "as", "following", "documentation", "shows", "me", "NUMBER", "LINK", "training", "via", "list", "data", "But", "I", "don", "t", "understand", "how", "I", "can", "import", "that", "list", "to", "the", "Django", "Chatterbot", "app", "Thanks", "for", "advice", "Christian", "There", "be", "an", "additional", "setting", "for", "this", "that", "can", "be", "use", "in", "Django", "s", "settings", "for", "ChatterBot", "NUMBER", "LINK", "training", "settings", "The", "content", "of", "the", "training_data", "can", "be", "different", "depending", "on", "the", "training", "class", "that", "you", "be", "use", "NUMBER", "I", "ve", "be", "meaning", "to", "add", "more", "documentation", "to", "the", "section", "on", "use", "ChatterBot", "with", "Django", "so", "I", "apologize", "about", "the", "lack", "of", "guidance", "NUMBER", "gunthercox", "no", "problem", "NUMBER", "I", "more", "then", "happy", "to", "help", "out", "here", "if", "you", "want", "to", "NUMBER", "I", "m", "more", "then", "open", "to", "take", "a", "quick", "chat", "so", "I", "can", "help", "with", "documentation", "for", "you", "NUMBER", "Because", "I", "can", "probably", "help", "you", "out", "to", "create", "a", "corpus", "version", "in", "Swedish", "for", "you", "and", "we", "probably", "also", "want", "to", "create", "a", "German", "for", "you", "NUMBER", "And", "from", "here", "I", "can", "probably", "also", "with", "your", "guidelines", "get", "all", "the", "steps", "documentation", "so", "more", "people", "can", "create", "or", "expand", "the", "once", "we", "have", "NUMBER", "Let", "s", "try", "to", "catch", "up", "over", "Hangout", "or", "similar", "to", "do", "a", "quick", "chat", "and", "see", "what", "I", "can", "help", "you", "with", "NUMBER", "This", "has", "now", "be", "documented", "at", "chatterbot", "corpus", "website", "Chatterbot", "Corpus", "LINK", "corpus", "Closes", "NUMBER", "This", "prevents", "the", "issue", "seen", "in", "NUMBER", "Query", "support", "use", "ChatterBot", "s", "query", "builder", "still", "needs", "to", "be", "add", "for", "this", "adapter", "NUMBER", "Closes", "NUMBER", "Hi", "WildDylan", "This", "be", "something", "I", "will", "have", "to", "look", "into", "NUMBER", "That", "s", "a", "pretty", "large", "data", "set", "and", "some", "change", "to", "ChatterBot", "may", "be", "required", "to", "speed", "that", "up", "NUMBER", "What", "be", "the", "formats", "use", "to", "train", "the", "chatbot", "Thanks", "for", "responding", "NUMBER", "But", "I", "want", "to", "know", "the", "default", "formats", "use", "to", "train", "the", "chatbot", "NUMBER", "thanks", "for", "provide", "the", "code", "for", "the", "chatter", "bot", "i", "have", "two", "question", "NUMBER", "one", "be", "regard", "can", "NLP", "be", "include", "for", "the", "code", "to", "give", "the", "appropriate", "response", "for", "the", "unknown", "input", "data", "without", "training", "second", "one", "be", "regard", "the", "to", "get", "a", "response", "we", "must", "have", "to", "add", "response", "of", "unknown", "question", "or", "else", "be", "there", "any", "possibility", "to", "get", "GOOD", "RESPONSE", "for", "the", "unknown", "input", "NUMBER", "Right", "now", "there", "isn", "t", "a", "way", "to", "do", "this", "NUMBER", "I", "ll", "mark", "this", "as", "a", "feature", "request", "NUMBER", "I", "agree", "that", "this", "would", "be", "useful", "NUMBER", "Allow", "specification", "of", "ssl", "verification", "for", "hipchat", "adapters", "by", "add", "an", "optional", "config", "variable", "to", "the", "chatbot", "instance", "NUMBER", "Fixed", "flake", "NUMBER", "Blinking", "test", "test", "storage_adapter_tests", "test_sqlalchemy_adapter", "NUMBER", "py", "be", "also", "unstable", "on", "master", "NUMBER", "I", "saw", "that", "removal", "of", "I", "O", "adapters", "be", "still", "future", "so", "it", "might", "not", "hurt", "to", "merge", "this", "small", "feature", "NUMBER", "Achimh", "NUMBER", "Thank", "you", "NUMBER", "Fixes", "the", "hipchat", "example", "by", "provide", "a", "usable", "backlink", "of", "the", "Chatbot", "instance", "to", "the", "Adapter", "instance", "NUMBER", "Fixed", "flake", "NUMBER", "Blinking", "test", "test", "storage_adapter_tests", "test_sqlalchemy_adapter", "NUMBER", "py", "be", "also", "unstable", "on", "master", "NUMBER", "I", "need", "to", "speed", "up", "sqlite", "with", "PRAGMA", "journal_mode", "OFF", "PRAGMA", "synchronous", "OFF", "Where", "should", "this", "be", "add", "Internally", "ChatterBot", "uses", "SQLAlchemy", "to", "connect", "to", "sqlite", "databases", "NUMBER", "It", "looks", "like", "I", "might", "have", "to", "make", "some", "change", "to", "the", "setup", "of", "the", "SQL", "Storage", "adapter", "so", "that", "additional", "parameters", "can", "be", "specified", "NUMBER", "I", "ll", "look", "into", "this", "and", "get", "back", "to", "you", "as", "soon", "as", "possible", "NUMBER", "Try", "the", "following", "lines", "NUMBER", "to", "NUMBER", "of", "sql_storage", "NUMBER", "py", "self", "NUMBER", "engine", "create_engine", "self", "NUMBER", "database_uri", "from", "re", "import", "search", "if", "search", "sqlite", "self", "NUMBER", "database_uri", "from", "sqlalchemy", "NUMBER", "engine", "import", "Engine", "from", "sqlalchemy", "import", "event", "event", "NUMBER", "listens_for", "Engine", "connect", "def", "set_sqlite_pragma", "dbapi_connection", "connection_record", "dbapi_connection", "NUMBER", "execute", "PRAGMA", "journal_mode", "WAL", "dbapi_connection", "NUMBER", "execute", "PRAGMA", "synchronous", "NORMAL", "self", "NUMBER", "read_only", "self", "NUMBER", "kwargs", "NUMBER", "get", "read_only", "False", "I", "be", "not", "the", "expert", "on", "this", "at", "all", "by", "any", "means", "but", "from", "what", "I", "find", "googling", "turning", "journal_mode", "all", "the", "way", "off", "doesn", "t", "give", "you", "much", "if", "any", "of", "a", "substantial", "speed", "increase", "over", "turning", "it", "to", "WAL", "but", "dramatically", "increases", "your", "chance", "of", "db", "corruption", "at", "least", "with", "nix", "it", "may", "be", "worth", "doing", "on", "Windows", "NUMBER", "I", "use", "to", "execute", "the", "following", "code", "to", "train", "my", "chatbot", "and", "the", "database", "NUMBER", "db", "will", "be", "auto", "generate", "but", "It", "doesn", "t", "happen", "in", "this", "version", "NUMBER", "Python", "from", "chatterbot", "NUMBER", "trainers", "import", "ListTrainer", "chatterbot", "ChatBot", "Training", "Example", "chatterbot", "NUMBER", "set_trainer", "ListTrainer", "chatterbot", "NUMBER", "train", "Hi", "there", "Hello", "chatterbot", "NUMBER", "train", "Greetings", "Hello", "I", "don", "t", "know", "it", "be", "a", "bug", "or", "on", "purpose", "on", "the", "document", "modification", "NUMBER", "There", "should", "be", "something", "writen", "about", "the", "JsonFileStorageAdapter", "but", "now", "its", "gone", "and", "that", "be", "what", "I", "m", "looking", "for", "NUMBER", "Python", "def", "filter_selection", "self", "chatterbot", "session_id", "session", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "get", "session_id", "if", "session", "NUMBER", "conversation", "NUMBER", "empty", "return", "chatterbot", "NUMBER", "orage", "NUMBER", "base_query", "text_of_recent_responses", "for", "statement", "response", "in", "session", "NUMBER", "conversation", "text_of_recent_responses", "NUMBER", "append", "response", "NUMBER", "text", "query", "chatterbot", "NUMBER", "orage", "NUMBER", "base_query", "NUMBER", "atement_text_not_in", "text_of_recent_responses", "return", "query", "Bash", "INFO", "ChatBot", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u0444\u0438\u043b\u0438\u0430\u043b\u043e\u0432", "be", "not", "a", "know", "statement", "Traceback", "most", "recent", "call", "last", "File", "home", "listade", "NUMBER", "IdeaIC", "NUMBER", "config", "plugins", "python", "ce", "helpers", "pydev", "pydevd", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "globals", "debugger", "NUMBER", "run", "setup", "file", "None", "None", "is_module", "File", "home", "listade", "NUMBER", "IdeaIC", "NUMBER", "config", "plugins", "python", "ce", "helpers", "pydev", "pydevd", "NUMBER", "py", "line", "NUMBER", "in", "run", "runpy", "NUMBER", "_run_module_as_main", "module_name", "alter_argv", "False", "File", "usr", "lib", "python", "NUMBER", "runpy", "NUMBER", "py", "line", "NUMBER", "in", "_run_module_as_main", "__main__", "mod_spec", "File", "usr", "lib", "python", "NUMBER", "runpy", "NUMBER", "py", "line", "NUMBER", "in", "_run_code", "exec", "code", "run_globals", "File", "home", "listade", "Desktop", "speech_bot", "project", "speech_bot", "__main__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "main", "File", "home", "listade", "Desktop", "speech_bot", "project", "speech_bot", "__main__", "NUMBER", "py", "line", "NUMBER", "in", "main", "chatbot", "NUMBER", "get_response", "None", "File", "usr", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "statement", "response", "self", "NUMBER", "generate_response", "input_statement", "session_id", "File", "usr", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "generate_response", "self", "NUMBER", "orage", "NUMBER", "generate_base_query", "self", "session_id", "File", "usr", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "storage_adapter", "NUMBER", "py", "line", "NUMBER", "in", "generate_base_query", "self", "NUMBER", "base_query", "filter_instance", "NUMBER", "filter_selection", "chatterbot", "session_id", "File", "usr", "lib", "python", "NUMBER", "site", "package", "chatterbot", "filters", "NUMBER", "py", "line", "NUMBER", "in", "filter_selection", "query", "chatterbot", "NUMBER", "orage", "NUMBER", "base_query", "NUMBER", "atement_text_not_in", "AttributeError", "NoneType", "object", "has", "no", "attribute", "statement_text_not_in", "I", "m", "having", "this", "same", "issue", "same", "traceback", "NUMBER", "same", "If", "you", "want", "to", "continue", "developing", "dont", "use", "the", "repetitive", "response", "filter", "This", "be", "something", "I", "m", "interested", "in", "looking", "into", "NUMBER", "Possibly", "this", "would", "remove", "the", "overhead", "of", "the", "database", "having", "to", "rebuild", "the", "index", "each", "time", "a", "statement", "be", "add", "some", "research", "on", "this", "be", "still", "required", "NUMBER", "python", "self", "NUMBER", "atements", "NUMBER", "create_index", "text", "unique", "True", "Hi", "be", "it", "possible", "to", "give", "list", "of", "possible", "default", "response", "in", "LowConfidenceAdapter", "instead", "of", "just", "one", "statement", "NUMBER", "or", "maybe", "programatically", "this", "functionality", "can", "be", "achieved", "vkosuri", "For", "example", "For", "any", "query", "user", "asks", "the", "bot", "the", "score", "comes", "out", "to", "be", "less", "that", "the", "LowConfidenceAdapter", "threshold", "say", "NUMBER", "I", "should", "be", "able", "to", "generate", "randomized", "responses", "from", "certain", "predefined", "list", "of", "responses", "rather", "than", "just", "display", "hardcoded", "value", "of", "default_response", "I", "ve", "execute", "the", "command", "pip", "install", "upgrade", "chatterbot", "already", "NUMBER", "When", "I", "try", "to", "execute", "the", "sample", "code", "from", "LINK", "Python", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "trainers", "import", "ListTrainer", "chatterbot", "ChatBot", "Training", "Example", "chatterbot", "NUMBER", "set_trainer", "ListTrainer", "chatterbot", "NUMBER", "train", "Hi", "there", "Hello", "chatterbot", "NUMBER", "train", "Greetings", "Hello", "Error", "message", "BASH", "D", "Program", "Files", "Python", "Python", "NUMBER", "NUMBER", "python", "NUMBER", "exe", "D", "Files", "PycharmProjects", "untitled", "trainer", "NUMBER", "py", "Traceback", "most", "recent", "call", "last", "File", "D", "Files", "PycharmProjects", "untitled", "trainer", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "Hello", "File", "D", "Program", "Files", "Python", "Python", "NUMBER", "NUMBER", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "Response", "previous_statement_text", "File", "D", "Program", "Files", "Python", "Python", "NUMBER", "NUMBER", "lib", "site", "package", "chatterbot", "conversation", "response", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "import", "dateutil", "NUMBER", "parser", "as", "date_parser", "ModuleNotFoundError", "No", "module", "named", "dateutil", "Process", "finished", "with", "exit", "code", "NUMBER", "The", "same", "code", "works", "fine", "before", "I", "update", "the", "chatterbot", "but", "fail", "after", "I", "update", "it", "NUMBER", "nggary", "It", "appears", "I", "was", "overzealous", "in", "my", "eagerness", "to", "embrace", "the", "release", "early", "release", "often", "LINK", "_early", "_release_often", "philosophy", "of", "the", "Cathedral", "and", "the", "Bazaar", "LINK", "_Cathedral_and_the_Bazaar", "NUMBER", "My", "apologies", "NUMBER", "I", "will", "push", "up", "a", "fix", "shortly", "that", "add", "python", "dateutil", "to", "the", "project", "requirements", "NUMBER", "No", "worries", "take", "your", "time", "NUMBER", "If", "I", "want", "to", "create", "an", "account", "by", "the", "chatbot", "Me", "Hi", "I", "want", "to", "book", "the", "dinner", "NUMBER", "Bot", "May", "I", "have", "your", "name", "Me", "Peter", "Bot", "May", "I", "have", "your", "mobile", "number", "Me", "xxxxxxxxxxxxxx", "Bot", "What", "time", "you", "want", "to", "eat", "at", "Me", "NUMBER", "NUMBER", "pm", "Bot", "Your", "table", "be", "reserved", "NUMBER", "This", "conversation", "involve", "few", "question", "NUMBER", "How", "do", "the", "chatbot", "store", "the", "booking", "information", "from", "multiple", "input", "name", "mobile", "no", "NUMBER", "and", "time", "NUMBER", "How", "to", "validate", "the", "input", "from", "user", "and", "move", "on", "to", "next", "question", "or", "ask", "the", "user", "to", "re", "enter", "NUMBER", "How", "to", "process", "cancel", "this", "booking", "request", "at", "the", "end", "of", "conversation", "Thanks", "for", "point", "me", "the", "direction", "NUMBER", "NUMBER", "comment", "LINK", "issuecomment", "NUMBER", "be", "a", "good", "example", "but", "it", "still", "doesn", "t", "have", "the", "multi", "step", "NUMBER", "I", "find", "that", "there", "be", "a", "sample", "code", "of", "Chat", "form", "LINK", "Forms", "inside", "the", "wiki", "page", "which", "be", "perfectly", "suit", "my", "requirement", "may", "I", "know", "be", "this", "feature", "be", "under", "development", "nggary", "Chat", "Forms", "be", "just", "a", "feature", "idea", "that", "I", "recorded", "a", "while", "ago", "NUMBER", "The", "functionality", "you", "be", "looking", "for", "be", "a", "common", "request", "that", "I", "ve", "had", "from", "different", "developers", "NUMBER", "I", "d", "love", "to", "add", "it", "in", "the", "future", "but", "right", "now", "it", "be", "something", "that", "isn", "t", "even", "on", "the", "development", "roadmap", "NUMBER", "Thanks", "for", "the", "answer", "Where", "to", "write", "the", "this", "section", "of", "code", "NUMBER", "Please", "kindly", "help", "me", "If", "you", "be", "use", "Python", "NUMBER", "be", "sure", "that", "the", "unicode", "header", "be", "the", "first", "line", "of", "your", "Python", "file", "Python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Ron", "Obvious", "Please", "take", "a", "look", "at", "the", "example", "code", "LINK", "_example", "NUMBER", "py", "Hi", "there", "first", "of", "all", "I", "would", "like", "to", "say", "thank", "you", "to", "gunthercox", "for", "write", "this", "engine", "this", "engine", "be", "amazing", "NUMBER", "Assume", "that", "i", "had", "a", "currency", "exchane", "rate", "table", "based", "on", "hong", "kong", "dollar", "in", "database", "Usd", "NUMBER", "Yen", "NUMBER", "Etc", "NUMBER", "If", "I", "want", "to", "impletment", "currency", "checker", "function", "to", "bot", "like", "this", "Default", "currency", "be", "Hong", "Kong", "dolloar", "Me", "usd", "rate", "Bot", "NUMBER", "hkd", "NUMBER", "usd", "Me", "us", "dollar", "rate", "Bot", "NUMBER", "hkd", "NUMBER", "usd", "Me", "yen", "rate", "NUMBER", "Yen", "be", "japanese", "dollar", "name", "Bot", "NUMBER", "hkd", "NUMBER", "yen", "Me", "NUMBER", "yen", "Usd", "Bot", "NUMBER", "yen", "NUMBER", "usd", "Do", "i", "need", "to", "create", "a", "new", "logic", "adpater", "for", "this", "If", "so", "how", "to", "teach", "the", "bot", "to", "identify", "the", "currecny", "code", "name", "amount", "from", "input", "and", "match", "it", "with", "database", "NUMBER", "Second", "question", "be", "how", "to", "create", "corpus", "embedded", "with", "dynamic", "value", "from", "database", "NUMBER", "For", "example", "if", "i", "want", "to", "ask", "the", "bot", "about", "the", "open", "time", "of", "office", "i", "would", "expect", "the", "bot", "answer", "The", "open", "time", "be", "NUMBER", "NUMBER", "be", "but", "if", "i", "train", "this", "answer", "with", "traidition", "corpus", "i", "would", "have", "to", "train", "it", "every", "time", "when", "open", "time", "be", "change", "which", "make", "nk", "sense", "to", "program", "this", "NUMBER", "For", "the", "second", "part", "of", "this", "question", "be", "it", "possible", "to", "make", "a", "enhancement", "to", "the", "engine", "Such", "like", "this", "test", "What", "be", "the", "best", "selling", "product", "The", "best", "selling", "product", "be", "class", "NUMBER", "method", "NUMBER", "The", "response", "with", "automatically", "replace", "the", "tag", "class", "NUMBER", "method", "to", "the", "return", "value", "from", "static", "method", "of", "specific", "class", "NUMBER", "ERROR", "chatterbot", "NUMBER", "orage", "NUMBER", "orage_adapter", "None", "Traceback", "most", "recent", "call", "last", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "storage", "sql_storage", "NUMBER", "py", "line", "NUMBER", "in", "_session_finish", "session", "NUMBER", "commit", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "commit", "self", "NUMBER", "transaction", "NUMBER", "commit", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "commit", "self", "NUMBER", "_prepare_impl", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "_prepare_impl", "self", "NUMBER", "session", "NUMBER", "flush", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "flush", "self", "NUMBER", "_flush", "objects", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "_flush", "transaction", "NUMBER", "rollback", "_capture_exception", "True", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "util", "langhelpers", "NUMBER", "py", "line", "NUMBER", "in", "__exit__", "compat", "NUMBER", "reraise", "exc_type", "exc_value", "exc_tb", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "orm", "session", "NUMBER", "py", "line", "NUMBER", "in", "_flush", "flush_context", "NUMBER", "execute", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "orm", "unitofwork", "NUMBER", "py", "line", "NUMBER", "in", "execute", "rec", "NUMBER", "execute", "self", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "orm", "unitofwork", "NUMBER", "py", "line", "NUMBER", "in", "execute", "uow", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "orm", "persistence", "NUMBER", "py", "line", "NUMBER", "in", "save_obj", "mapper", "table", "insert", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "orm", "persistence", "NUMBER", "py", "line", "NUMBER", "in", "_emit_insert_statements", "execute", "statement", "params", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "engine", "base", "NUMBER", "py", "line", "NUMBER", "in", "execute", "return", "meth", "self", "multiparams", "params", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "sql", "elements", "NUMBER", "py", "line", "NUMBER", "in", "_execute_on_connection", "return", "connection", "NUMBER", "_execute_clauseelement", "self", "multiparams", "params", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "engine", "base", "NUMBER", "py", "line", "NUMBER", "in", "_execute_clauseelement", "compiled_sql", "distilled_params", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "engine", "base", "NUMBER", "py", "line", "NUMBER", "in", "_execute_context", "context", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "engine", "base", "NUMBER", "py", "line", "NUMBER", "in", "_handle_dbapi_exception", "exc_info", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "util", "compat", "NUMBER", "py", "line", "NUMBER", "in", "raise_from_cause", "reraise", "type", "exception", "exception", "tb", "exc_tb", "cause", "cause", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "engine", "base", "NUMBER", "py", "line", "NUMBER", "in", "_execute_context", "context", "File", "C", "Python", "NUMBER", "lib", "site", "package", "sqlalchemy", "engine", "default", "NUMBER", "py", "line", "NUMBER", "in", "do_execute", "cursor", "NUMBER", "execute", "statement", "parameters", "IntegrityError", "sqlite", "NUMBER", "IntegrityError", "columns", "text", "text_search", "be", "not", "unique", "SQL", "u", "INSERT", "INTO", "ResponseTable", "id", "text", "occurrence", "statement_text", "text_search", "VALUES", "parameters", "None", "u", "That", "s", "good", "to", "hear", "NUMBER", "NUMBER", "Yes", "it", "be", "NUMBER", "id", "null", "statement_text", "Yes", "it", "be", "NUMBER", "occurrence", "NUMBER", "text", "That", "s", "good", "to", "hear", "NUMBER", "Getting", "issue", "in", "training", "with", "below", "chatterbot", "settings", "in", "settings", "NUMBER", "py", "Python", "Chatbot", "Settings", "CHATTERBOT", "name", "Vyabl", "Bot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "database", "vyablbot_db", "database_uri", "mongodb", "NUMBER", "NUMBER", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "statement_comparison_function", "chatterbot", "NUMBER", "comparisons", "NUMBER", "levenshtein_distance", "response_selection_method", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_most_frequent_response", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "training_data", "D", "Anant", "Anant", "ChatBot", "ChatBot_", "NUMBER", "_Chatterbot", "ChatbotDjango", "new", "VyablBot", "Data", "Greetings", "D", "Anant", "Anant", "ChatBot", "ChatBot_", "NUMBER", "_Chatterbot", "ChatbotDjango", "new", "VyablBot", "Data", "FAQ_Json", "D", "Anant", "Anant", "ChatBot", "ChatBot_", "NUMBER", "_Chatterbot", "ChatbotDjango", "new", "VyablBot", "Data", "FAQ_Dataset_", "NUMBER", "django_app_name", "django_chatterbot", "use_django_models", "False", "Error", "generate", "error", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "aec", "NUMBER", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "ef", "NUMBER", "NUMBER", "d", "NUMBER", "af", "NUMBER", "c", "NUMBER", "jpg", "Having", "issue", "in", "logic", "adapter", "import_path", "I", "use", "the", "ubuntu", "corpus", "trainer", "NUMBER", "I", "just", "did", "usual", "training", "I", "use", "MongoDB", "NUMBER", "The", "bot", "sends", "message", "to", "the", "web", "interface", "via", "web", "sockets", "NUMBER", "Earlier", "when", "there", "was", "no", "data", "he", "responded", "instantly", "NUMBER", "Now", "you", "need", "to", "wait", "NUMBER", "NUMBER", "seconds", "until", "he", "answers", "NUMBER", "I", "understand", "that", "this", "problem", "be", "relate", "to", "mongo", "and", "not", "to", "the", "chatterbot", "but", "be", "this", "really", "normal", "Or", "be", "I", "the", "only", "one", "who", "has", "this", "problem", "It", "takes", "longer", "because", "there", "be", "more", "data", "to", "process", "when", "selecting", "a", "response", "NUMBER", "gunthercox", "yeah", "but", "this", "be", "a", "problem", "NUMBER", "It", "s", "the", "problem", "I", "currently", "have", "with", "my", "chatbot", "NUMBER", "I", "ve", "trained", "my", "chatbot", "with", "the", "movie", "dialogs", "from", "Cornell", "LINK", "cristian", "Cornell_Movie", "Dialogs_Corpus", "NUMBER", "html", "and", "the", "timings", "have", "gone", "from", "a", "few", "seconds", "to", "about", "NUMBER", "secs", "NUMBER", "The", "bot", "isn", "t", "usable", "in", "that", "state", "anymore", "NUMBER", "What", "be", "the", "best", "way", "to", "handle", "this", "Should", "I", "load", "everything", "from", "disk", "and", "just", "keep", "it", "in", "RAM", "I", "ve", "run", "the", "problem", "to", "ground", "and", "I", "see", "that", "the", "most", "time", "be", "spent", "when", "it", "gets", "all", "response", "statements", "from", "the", "DB", "NUMBER", "I", "had", "this", "issue", "both", "with", "MongoDB", "and", "SQLite", "NUMBER", "best_match", "NUMBER", "BestMatch", "NUMBER", "get", "method", "What", "be", "the", "best", "way", "to", "tackle", "this", "Should", "I", "just", "create", "a", "new", "Storage", "adapter", "that", "keep", "all", "of", "the", "convos", "in", "RAM", "I", "ll", "try", "to", "keep", "my", "answer", "general", "so", "it", "can", "be", "commit", "and", "use", "NUMBER", "Let", "me", "know", "your", "thoughts", "and", "I", "ll", "see", "if", "I", "can", "get", "better", "timings", "by", "keep", "the", "data", "structures", "loaded", "in", "RAM", "NUMBER", "gunthercox", "It", "be", "obvious", "NUMBER", "Also", "I", "see", "how", "my", "processor", "be", "overloaded", "when", "searching", "for", "an", "answer", "NUMBER", "I", "m", "interested", "in", "the", "industrial", "way", "of", "use", "this", "technology", "NUMBER", "The", "whole", "problem", "especially", "in", "the", "database", "in", "particular", "mongo", "There", "be", "a", "number", "of", "other", "faster", "ones", "NoSQL", "if", "it", "makes", "sense", "to", "consider", "them", "narnikgamarnikus", "Actually", "I", "looked", "deeper", "at", "the", "problem", "NUMBER", "Retrieving", "data", "from", "the", "tables", "doesn", "t", "take", "any", "time", "at", "all", "NUMBER", "Putting", "all", "of", "the", "cornell", "data", "mention", "above", "takes", "about", "NUMBER", "MB", "and", "it", "s", "accessed", "really", "quickly", "NUMBER", "The", "real", "issue", "be", "finding", "a", "close", "match", "NUMBER", "Out", "of", "the", "NUMBER", "seconds", "that", "it", "took", "to", "retrieve", "an", "answer", "NUMBER", "seconds", "were", "spent", "iterating", "over", "the", "statement", "list", "and", "use", "the", "comparison", "function", "NUMBER", "logic", "NUMBER", "best_match", "NUMBER", "get", "function", "NUMBER", "Specifically", "the", "part", "where", "it", "iterates", "over", "the", "statement_list", "structure", "NUMBER", "Maybe", "add", "a", "check", "with", "something", "like", "if", "confidence", "over", "some", "threshold", "like", "NUMBER", "then", "exit", "the", "loop", "and", "return", "that", "statement", "NUMBER", "This", "will", "be", "more", "easily", "generalized", "as", "a", "parameter", "that", "can", "be", "pass", "in", "on", "startup", "NUMBER", "Also", "narnikgamarnikus", "MongoDB", "be", "a", "NoSQL", "database", "and", "it", "s", "perfectly", "fine", "for", "production", "projects", "NUMBER", "However", "if", "you", "d", "prefer", "to", "get", "away", "from", "the", "storage", "options", "available", "you", "can", "code", "a", "storage", "adapter", "NUMBER", "It", "s", "really", "not", "too", "bad", "there", "s", "only", "a", "handful", "of", "methods", "you", "need", "to", "code", "NUMBER", "It", "s", "mostly", "code", "to", "connect", "to", "your", "instance", "NUMBER", "sal", "NUMBER", "Maybe", "it", "makes", "sense", "to", "write", "in", "the", "documentation", "about", "the", "threshold", "values", "for", "storing", "the", "number", "of", "records", "after", "which", "the", "bot", "starts", "to", "slow", "down", "significantly", "This", "issue", "be", "a", "problem", "that", "I", "be", "aware", "of", "and", "work", "to", "fix", "NUMBER", "My", "plan", "be", "to", "reduce", "the", "amount", "of", "statements", "that", "need", "to", "be", "analysed", "when", "searching", "for", "a", "match", "NUMBER", "To", "accomplish", "this", "I", "be", "going", "to", "modify", "the", "training", "process", "so", "that", "it", "categorizes", "each", "statement", "NUMBER", "The", "categorization", "process", "will", "be", "flexible", "and", "will", "even", "allow", "developers", "to", "add", "their", "own", "categorization", "function", "NUMBER", "Here", "be", "a", "quick", "example", "of", "how", "this", "will", "improve", "performance", "NUMBER", "User", "enters", "input", "How", "be", "you", "NUMBER", "Chat", "bot", "categorizes", "the", "input", "as", "a", "question", "NUMBER", "NUMBER", "Chat", "bot", "add", "query", "parameter", "that", "specifies", "that", "the", "returned", "statements", "must", "be", "categorized", "as", "an", "answer", "NUMBER", "As", "a", "result", "a", "much", "smaller", "set", "of", "possible", "responses", "be", "returned", "and", "processing", "time", "be", "reduced", "NUMBER", "gunthercox", "I", "think", "that", "s", "the", "correct", "direction", "but", "the", "codebase", "seems", "pretty", "far", "from", "that", "point", "NUMBER", "I", "ll", "try", "experimenting", "with", "different", "confidence", "thresholds", "tonight", "as", "the", "chatbot", "simply", "isn", "t", "production", "ready", "when", "it", "takes", "NUMBER", "secs", "to", "respond", "NUMBER", "narnikgamarnikus", "The", "threshold", "value", "seems", "to", "vary", "on", "application", "NUMBER", "For", "instance", "if", "you", "re", "run", "a", "chatbot", "for", "a", "company", "that", "needs", "to", "answer", "technical", "troubleshooting", "issue", "it", "may", "be", "permissible", "for", "a", "NUMBER", "second", "response", "NUMBER", "I", "want", "to", "stand", "up", "the", "chatbot", "because", "it", "s", "so", "damn", "cool", "so", "in", "my", "case", "I", "don", "t", "want", "users", "waiting", "more", "than", "NUMBER", "ish", "seconds", "NUMBER", "I", "m", "gonna", "add", "some", "javascript", "to", "my", "page", "and", "possibly", "just", "have", "a", "timer", "that", "shows", "Chatbot", "be", "typing", "NUMBER", "while", "I", "await", "the", "response", "so", "it", "feels", "a", "little", "more", "natural", "NUMBER", "I", "ll", "report", "my", "findings", "and", "we", "can", "see", "what", "part", "of", "my", "code", "we", "d", "like", "to", "add", "to", "the", "repo", "NUMBER", "I", "sure", "hope", "the", "time", "lag", "issue", "be", "fix", "NUMBER", "the", "timing", "on", "my", "bots", "be", "way", "too", "much", "for", "production", "NUMBER", "The", "time", "it", "takes", "to", "startup", "alone", "be", "a", "lot", "I", "really", "hope", "to", "see", "this", "fix", "NUMBER", "Anyways", "gunthercox", "great", "JOB", "Truly", "great", "job", "Man", "gunthercox", "Hi", "if", "the", "bot", "will", "find", "a", "response", "from", "all", "dataset", "everytime", "be", "it", "better", "to", "make", "a", "reprocess", "after", "training", "and", "filter", "the", "statement", "just", "need", "not", "all", "when", "calling", "get_response", "NUMBER", "Such", "as", "Inverted", "index", "NUMBER", "Hi", "I", "want", "to", "run", "Chatterbot", "from", "a", "Java", "program", "Which", "be", "the", "best", "option", "How", "can", "I", "achieve", "that", "juanpialbano", "Just", "to", "add", "to", "what", "vkosuri", "mention", "it", "be", "possible", "to", "build", "a", "web", "API", "that", "could", "allow", "a", "Java", "application", "to", "post", "data", "and", "get", "responses", "from", "a", "chat", "bot", "NUMBER", "I", "want", "to", "put", "it", "in", "Production", "in", "my", "job", "I", "developed", "an", "api", "with", "werkzeug", "but", "there", "be", "not", "suppor", "for", "python", "in", "the", "server", "NUMBER", "I", "m", "trying", "to", "make", "it", "work", "with", "Jython", "but", "I", "have", "a", "lot", "of", "problem", "Have", "you", "use", "Chatterbot", "with", "Jython", "Sorry", "I", "don", "t", "have", "any", "experience", "with", "Jython", "NUMBER", "I", "believe", "if", "you", "make", "a", "server", "and", "then", "access", "the", "chatterbot", "with", "custom", "setup", "api", "then", "you", "can", "definitely", "run", "chatterbot", "inside", "java", "NUMBER", "If", "there", "will", "be", "a", "web", "api", "like", "which", "produces", "JSON", "objects", "as", "response", "then", "it", "can", "be", "use", "over", "multiple", "platforms", "NUMBER", "I", "hope", "this", "helps", "NUMBER", "And", "feel", "free", "to", "ping", "NUMBER", "Cheers", "gunthercox", "sir", "can", "i", "make", "the", "API", "for", "chatterbot", "gabru", "md", "What", "kind", "of", "web", "platform", "be", "you", "imagining", "sorry", "i", "mean", "an", "API", "as", "i", "discussed", "above", "NUMBER", "It", "will", "give", "JSON", "results", "for", "every", "query", "NUMBER", "So", "that", "any", "Chatterbot", "can", "be", "use", "with", "any", "programming", "language", "NUMBER", "i", "have", "it", "ready", "NUMBER", "Is", "your", "API", "build", "use", "ChatterBot", "s", "Django", "integration", "or", "do", "it", "use", "a", "different", "framework", "mine", "be", "simple", "NUMBER", "It", "uses", "node", "NUMBER", "js", "for", "backend", "and", "python", "for", "response", "prediction", "NUMBER", "sir", "you", "can", "see", "it", "here", "chatterbot", "api", "LINK", "md", "chatterbot", "api", "i", "ve", "tried", "it", "on", "localhost", "though", "P", "justaBeginner", "any", "suggestions", "sir", "ChatterBot", "be", "intended", "to", "support", "the", "ability", "for", "developer", "to", "use", "it", "in", "web", "based", "APIs", "NUMBER", "I", "m", "glad", "that", "you", "were", "able", "to", "get", "this", "to", "work", "for", "your", "project", "NUMBER", "Right", "now", "I", "don", "t", "think", "I", "m", "ready", "to", "support", "an", "additional", "API", "example", "be", "add", "to", "the", "project", "NUMBER", "juanpialbano", "I", "m", "going", "to", "close", "this", "ticket", "off", "NUMBER", "I", "hope", "this", "conversation", "has", "served", "to", "provide", "a", "sufficient", "response", "NUMBER", "There", "be", "many", "ways", "to", "get", "software", "write", "in", "different", "programming", "languages", "to", "communicate", "with", "each", "other", "NUMBER", "Hi", "firstly", "i", "must", "commend", "your", "work", "its", "amazing", "Good", "job", "So", "i", "run", "the", "_tkinter_gui", "NUMBER", "py_", "example", "perfectly", "well", "with", "no", "issue", "NUMBER", "But", "then", "i", "tried", "to", "train", "the", "bot", "with", "an", "English", "corpus", "trainer", "and", "ended", "up", "with", "moduleImportError", "NUMBER", "Here", "be", "the", "final", "code", "i", "run", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "trainers", "import", "ChatterBotCorpusTrainer", "import", "tkinter", "as", "tk", "try", "import", "ttk", "as", "ttk", "import", "ScrolledText", "except", "ImportError", "import", "tkinter", "NUMBER", "ttk", "as", "ttk", "import", "tkinter", "NUMBER", "scrolledtext", "as", "ScrolledText", "import", "time", "class", "TkinterGUIExample", "tk", "NUMBER", "Tk", "def", "__init__", "self", "args", "kwargs", "Create", "set", "window", "variables", "NUMBER", "tk", "NUMBER", "Tk", "NUMBER", "__init__", "self", "args", "kwargs", "self", "NUMBER", "chatbot", "ChatBot", "GUI", "Bot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "VariableInputTypeAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "OutputAdapter", "database", "database", "NUMBER", "json", "self", "NUMBER", "chatbot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "self", "NUMBER", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "self", "NUMBER", "title", "Chatterbot", "self", "NUMBER", "initialize", "def", "initialize", "self", "Set", "window", "layout", "NUMBER", "self", "NUMBER", "grid", "self", "NUMBER", "respond", "ttk", "NUMBER", "Button", "self", "text", "Get", "Response", "command", "self", "NUMBER", "get_response", "self", "NUMBER", "respond", "NUMBER", "grid", "column", "NUMBER", "row", "NUMBER", "sticky", "nesw", "padx", "NUMBER", "pady", "NUMBER", "self", "NUMBER", "usr_input", "ttk", "NUMBER", "Entry", "self", "state", "normal", "self", "NUMBER", "usr_input", "NUMBER", "grid", "column", "NUMBER", "row", "NUMBER", "sticky", "nesw", "padx", "NUMBER", "pady", "NUMBER", "self", "NUMBER", "conversation_lbl", "ttk", "NUMBER", "Label", "self", "anchor", "tk", "NUMBER", "E", "text", "Conversation", "self", "NUMBER", "conversation_lbl", "NUMBER", "grid", "column", "NUMBER", "row", "NUMBER", "sticky", "nesw", "padx", "NUMBER", "pady", "NUMBER", "self", "NUMBER", "conversation", "ScrolledText", "NUMBER", "ScrolledText", "self", "state", "disabled", "self", "NUMBER", "conversation", "NUMBER", "grid", "column", "NUMBER", "row", "NUMBER", "columnspan", "NUMBER", "sticky", "nesw", "padx", "NUMBER", "pady", "NUMBER", "def", "get_response", "self", "Get", "a", "response", "from", "the", "chatbot", "and", "display", "it", "NUMBER", "user_input", "self", "NUMBER", "usr_input", "NUMBER", "get", "self", "NUMBER", "usr_input", "NUMBER", "delete", "NUMBER", "tk", "NUMBER", "END", "response", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "user_input", "self", "NUMBER", "conversation", "state", "normal", "self", "NUMBER", "conversation", "NUMBER", "insert", "tk", "NUMBER", "END", "Human", "user_input", "n", "ChatBot", "str", "response", "NUMBER", "text", "n", "self", "NUMBER", "conversation", "state", "disabled", "time", "NUMBER", "sleep", "NUMBER", "gui_example", "TkinterGUIExample", "gui_example", "NUMBER", "mainloop", "here", "be", "the", "error", "log", "Warning", "from", "warnings", "module", "File", "C", "Users", "foo", "AppData", "Local", "Programs", "Python", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "C", "Users", "foo", "Codes", "AI", "projects", "carl", "tkinter_gui", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "gui_example", "TkinterGUIExample", "File", "C", "Users", "foo", "Codes", "AI", "projects", "carl", "tkinter_gui", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "chatbot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "File", "C", "Users", "foo", "AppData", "Local", "Programs", "Python", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "set_trainer", "self", "NUMBER", "trainer", "training_class", "self", "NUMBER", "orage", "kwargs", "File", "C", "Users", "foo", "AppData", "Local", "Programs", "Python", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "from", "NUMBER", "corpus", "import", "Corpus", "File", "C", "Users", "foo", "AppData", "Local", "Programs", "Python", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "corpus", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot_corpus", "import", "Corpus", "ModuleNotFoundError", "No", "module", "named", "chatterbot_corpus", "i", "be", "actually", "planning", "to", "integrate", "this", "bot", "in", "a", "live", "project", "as", "a", "replacement", "of", "a", "Chatscript", "server", "your", "response", "and", "support", "will", "go", "a", "looong", "long", "way", "NUMBER", "Thanks", "Okay", "i", "ll", "follow", "those", "instructions", "NUMBER", "Thanks", "Hi", "When", "the", "chatbot", "starts", "to", "work", "and", "answers", "the", "question", "of", "different", "users", "how", "do", "the", "chatbot", "learn", "How", "do", "the", "chatbot", "get", "feedback", "How", "do", "the", "chatbot", "know", "if", "the", "answer", "was", "correct", "or", "not", "Also", "What", "be", "the", "best", "practices", "for", "build", "a", "chatbot", "How", "should", "it", "be", "configured", "Should", "I", "use", "Adapters", "Filters", "etc", "vkosuri", "thanks", "but", "I", "have", "doubt", "How", "do", "the", "Chabot", "learn", "here", "it", "doesn", "t", "explain", "so", "much", "LINK", "how", "chatterbot", "works", "url", "When", "the", "Chabot", "makes", "a", "response", "it", "stores", "the", "request", "response", "in", "the", "database", "for", "future", "queries", "How", "do", "he", "know", "if", "a", "request", "response", "was", "right", "o", "wrong", "so", "he", "can", "use", "it", "in", "the", "future", "Thanks", "in", "advance", "Hi", "Query", "on", "the", "response", "relationship", "LINK", "statement", "response", "relationship", "NUMBER", "do", "the", "statement", "have", "user", "affinity", "NUMBER", "for", "e", "NUMBER", "g", "NUMBER", "User", "A", "Says", "Statement", "NUMBER", "User", "A", "Says", "Statement", "NUMBER", "User", "B", "Says", "statement", "NUMBER", "Stored", "as", "Statement", "NUMBER", "Statement_", "NUMBER", "In_response_To", "Statement_", "NUMBER", "Statement_", "NUMBER", "in_Response_To_Statement_", "NUMBER", "In", "here", "the", "user", "affinity", "be", "lost", "correct", "how", "be", "it", "typically", "handle", "by", "other", "users", "do", "you", "format", "NUMBER", "and", "NUMBER", "as", "NUMBER", "statement", "so", "that", "indexing", "happens", "as", "Statement", "NUMBER", "Statement", "NUMBER", "Statement", "NUMBER", "in_response_to_Statement", "NUMBER", "_Statement", "NUMBER", "This", "pull", "request", "be", "currently", "a", "work", "in", "progress", "NUMBER", "For", "NUMBER", "to", "create", "consistent", "sessions", "that", "be", "tracked", "in", "the", "database", "instead", "of", "in", "memory", "NUMBER", "Closes", "NUMBER", "by", "replacing", "it", "NUMBER", "code", "Python", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Ron", "Obvious", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "chatbot", "NUMBER", "get_response", "Hello", "how", "be", "you", "today", "error", "Bash", "python", "test", "NUMBER", "py", "Traceback", "most", "recent", "call", "last", "File", "test", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "ImportError", "No", "module", "named", "chatterbot", "i", "met", "the", "same", "problem", "today", "and", "i", "had", "upgrade", "chatterbot", "but", "i", "be", "unable", "to", "get", "chatterbot", "version", "yet", "NUMBER", "when", "use", "from", "chatterbot", "import", "ChatBot", "Python", "still", "show", "importError", "No", "module", "named", "chatterbot", "NUMBER", "Windows", "NUMBER", "NUMBER", "bit", "python", "NUMBER", "Microsoft", "Windows", "version", "NUMBER", "c", "NUMBER", "Microsoft", "Corporation", "NUMBER", "i", "install", "chatterbot", "via", "CMD", "use", "pip", "install", "NUMBER", "chatterbot", "Bash", "C", "WINDOWS", "system", "NUMBER", "d", "D", "cd", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "Lib", "site", "package", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "Lib", "site", "package", "pip", "install", "NUMBER", "chatterbot", "Processing", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "chatterbot", "Requirement", "already", "satisfied", "use", "upgrade", "to", "upgrade", "ChatterBot", "NUMBER", "from", "file", "D", "Program", "NUMBER", "Files", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "Python", "NUMBER", "NUMBER", "Lib", "site", "package", "chatterbot", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "Requirement", "already", "satisfied", "chatterbot", "corpus", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "jsondatabase", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "nltk", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "pymongo", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "python", "twitter", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "SQLAlchemy", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "ruamel", "NUMBER", "yaml", "TAG", "NUMBER", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "six", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "nltk", "TAG", "NUMBER", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "future", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "python", "twitter", "TAG", "NUMBER", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "request", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "python", "twitter", "TAG", "NUMBER", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "request", "oauthlib", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "python", "twitter", "TAG", "NUMBER", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "idna", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "request", "python", "twitter", "TAG", "NUMBER", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "certifi", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "request", "python", "twitter", "TAG", "NUMBER", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "urllib", "NUMBER", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "request", "python", "twitter", "TAG", "NUMBER", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "chardet", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "request", "python", "twitter", "TAG", "NUMBER", "ChatterBot", "NUMBER", "Requirement", "already", "satisfied", "oauthlib", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "request", "oauthlib", "python", "twitter", "TAG", "NUMBER", "ChatterBot", "NUMBER", "NUMBER", "after", "successfully", "install", "chatterbot", "i", "use", "python", "m", "chatterbot", "version", "to", "get", "version", "imformation", "but", "fail", "Bash", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "Lib", "site", "package", "cd", "NUMBER", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "Lib", "cd", "NUMBER", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "python", "m", "chatterbot", "version", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "python", "NUMBER", "exe", "No", "module", "named", "chatterbot", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "cd", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "Lib", "site", "package", "NUMBER", "Even", "after", "i", "upgrade", "chatterbot", "it", "still", "couldn", "t", "show", "the", "version", "imformation", "Bash", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "Lib", "site", "package", "pip", "install", "upgrade", "chatterbot", "Requirement", "already", "up", "to", "date", "chatterbot", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "Requirement", "already", "up", "to", "date", "nltk", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "chatterbot", "Requirement", "already", "up", "to", "date", "chatterbot", "corpus", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "chatterbot", "Requirement", "already", "up", "to", "date", "python", "twitter", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "chatterbot", "Requirement", "already", "up", "to", "date", "SQLAlchemy", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "chatterbot", "Requirement", "already", "up", "to", "date", "jsondatabase", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "chatterbot", "Requirement", "already", "up", "to", "date", "pymongo", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "chatterbot", "Requirement", "already", "up", "to", "date", "six", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "nltk", "TAG", "NUMBER", "chatterbot", "Requirement", "already", "up", "to", "date", "ruamel", "NUMBER", "yaml", "TAG", "NUMBER", "chatterbot", "Requirement", "already", "up", "to", "date", "future", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "python", "twitter", "TAG", "NUMBER", "chatterbot", "Requirement", "already", "up", "to", "date", "request", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "python", "twitter", "TAG", "NUMBER", "chatterbot", "Requirement", "already", "up", "to", "date", "request", "oauthlib", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "python", "twitter", "TAG", "NUMBER", "chatterbot", "Requirement", "already", "up", "to", "date", "urllib", "NUMBER", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "request", "python", "twitter", "TAG", "NUMBER", "chatterbot", "Requirement", "already", "up", "to", "date", "chardet", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "request", "python", "twitter", "TAG", "NUMBER", "chatterbot", "Requirement", "already", "up", "to", "date", "idna", "TAG", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "request", "python", "twitter", "TAG", "NUMBER", "chatterbot", "Requirement", "already", "up", "to", "date", "certifi", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "request", "python", "twitter", "TAG", "NUMBER", "chatterbot", "Requirement", "already", "up", "to", "date", "oauthlib", "NUMBER", "in", "d", "program", "file", "x", "NUMBER", "python", "NUMBER", "NUMBER", "lib", "site", "package", "from", "request", "oauthlib", "python", "twitter", "TAG", "NUMBER", "chatterbot", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "Lib", "site", "package", "Then", "i", "met", "the", "same", "problem", "like", "harshalgaydhankar", "python", "NUMBER", "show", "importError", "No", "module", "named", "chatterbot", "NUMBER", "just", "like", "Python", "NUMBER", "v", "NUMBER", "NUMBER", "a", "NUMBER", "cee", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "MSC", "v", "NUMBER", "NUMBER", "bit", "Intel", "on", "win", "NUMBER", "Type", "copyright", "credits", "or", "license", "for", "more", "information", "NUMBER", "from", "chatterbot", "import", "ChatBot", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "ImportError", "No", "module", "named", "chatterbot", "Can", "you", "import", "_any_", "python", "package", "that", "have", "be", "install", "I", "m", "wondering", "if", "this", "isn", "t", "an", "issue", "that", "be", "specific", "to", "ChatterBot", "NUMBER", "For", "example", "if", "you", "run", "pip", "install", "nose", "upgrade", "and", "then", "try", "to", "import", "it", "Python", "NUMBER", "v", "NUMBER", "NUMBER", "a", "NUMBER", "cee", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "MSC", "v", "NUMBER", "NUMBER", "bit", "Intel", "on", "win", "NUMBER", "Type", "copyright", "credits", "or", "license", "for", "more", "information", "NUMBER", "import", "nose", "i", "import", "nose", "successfully", "gunthercox", "and", "i", "tried", "relative", "import", "but", "also", "fail", "vkosuri", "thanks", "for", "your", "help", "i", "be", "totally", "a", "newcomer", "to", "chatterbot", "and", "python", "NUMBER", "from", "NUMBER", "chatterbot", "import", "ChatBot", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "chatterbot", "import", "ChatBot", "SystemError", "Parent", "module", "not", "loaded", "cannot", "perform", "relative", "import", "import", "sys", "print", "sys", "NUMBER", "path", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "Lib", "idlelib", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "python", "NUMBER", "zip", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "DLLs", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "lib", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "D", "Program", "Files", "x", "NUMBER", "Python", "NUMBER", "NUMBER", "lib", "site", "package", "vkosuri", "thanks", "only", "python", "NUMBER", "install", "in", "my", "PC", "What", "do", "you", "get", "as", "an", "output", "from", "the", "command", "pip", "freeze", "my", "god", "i", "be", "so", "sorry", "i", "made", "a", "stupid", "mistake", "after", "i", "download", "the", "ChatterBot", "master", "from", "git", "i", "use", "this", "folder", "directly", "NUMBER", "Instead", "i", "should", "copy", "the", "subfolder", "chatterbot", "in", "ChatterBot", "master", "NUMBER", "No", "problem", "it", "happens", "_", "\u30c4", "_", "vkosuri", "sir", "there", "be", "a", "lot", "of", "typo", "in", "the", "test", "NUMBER", "rst", "NUMBER", "Kindly", "remove", "it", "I", "ll", "restructure", "it", "and", "send", "a", "PR", "for", "the", "same", "NUMBER", "Thanks", "sir", "NUMBER", "vkosuri", "Thank", "you", "for", "creating", "this", "pull", "request", "I", "really", "appreciate", "it", "NUMBER", "I", "ve", "voiced", "concerns", "about", "the", "readability", "of", "list", "comprehension", "statements", "in", "the", "past", "and", "after", "looking", "over", "the", "change", "here", "my", "concerns", "have", "be", "re", "raise", "NUMBER", "I", "think", "I", "d", "like", "to", "keep", "the", "for", "loops", "in", "ChatterBot", "as", "they", "stand", "so", "that", "the", "code", "remains", "as", "straight", "forward", "and", "easy", "to", "understand", "as", "possible", "for", "potential", "contributes", "NUMBER", "gunthercox", "Hi", "will", "you", "do", "a", "enhancement", "for", "this", "purpose", "nggary", "I", "m", "not", "planning", "on", "doing", "one", "NUMBER", "I", "wonder", "if", "I", "can", "interact", "with", "bot", "and", "it", "recognize", "several", "words", "or", "phrases", "that", "fire", "an", "Action", "or", "recognize", "an", "Intention", "that", "interact", "with", "external", "source", "and", "give", "me", "a", "response", "NUMBER", "eg", "User", "How", "about", "the", "weather", "today", "Bot", "TAG", "TAG", "NUMBER", "forecast", "today", "NUMBER", "or", "intention", "User", "I", "want", "to", "run", "outside", "today", "NUMBER", "Bot", "It", "may", "rain", "today", "NUMBER", "or", "action", "execution", "User", "Turn", "on", "living", "room", "lights", "NUMBER", "Bot", "Sure", "A", "minute", "Bot", "Done", "enjoy", "I", "don", "t", "know", "if", "LogicAdapter", "StorageAdapter", "either", "I", "OAdapter", "be", "the", "right", "place", "to", "put", "this", "logic", "NUMBER", "Maybe", "some", "kind", "of", "Intention", "ActionAdapter", "that", "complements", "an", "kind", "of", "specific", "answers", "that", "have", "an", "special", "blank", "space", "to", "fill", "in", "with", "results", "from", "integration", "NUMBER", "Thanks", "NUMBER", "vkosuri", "nice", "hack", "Issue", "NUMBER", "for", "be", "very", "specific", "anyway", "I", "ll", "give", "a", "try", "By", "the", "way", "my", "initial", "idea", "would", "be", "to", "have", "something", "apart", "from", "the", "conversation", "but", "its", "ok", "use", "your", "hack", "it", "can", "be", "extend", "with", "some", "metadata", "inside", "it", "NUMBER", "What", "you", "think", "eg", "NUMBER", "Python", "bot", "NUMBER", "train", "Current", "weather", "in", "London", "adapter", "chatterbot", "NUMBER", "logic", "NUMBER", "SpecificResponseAdapter", "Have", "you", "read", "the", "documentation", "No", "I", "have", "not", "text", "This", "should", "help", "get", "you", "start", "url", "LINK", "vkosuri", "I", "agree", "that", "this", "format", "do", "improve", "the", "readability", "of", "the", "list", "comprehension", "NUMBER", "Feel", "free", "to", "create", "a", "pull", "request", "NUMBER", "NUMBER", "python", "self", "NUMBER", "confidence", "AbstractBaseStatement", "NUMBER", "confidence", "will", "add", "this", "line", "to", "the", "Statement", "Class", "work", "Since", "all", "it", "needs", "be", "a", "python", "self", "NUMBER", "confidence", "for", "itself", "NUMBER", "If", "this", "helps", "XD", "I", "m", "going", "to", "close", "this", "off", "NUMBER", "This", "doesn", "t", "actually", "accomplish", "what", "I", "wanted", "NUMBER", "Hi", "friends", "do", "anyone", "experienced", "this", "problem", "I", "tried", "to", "make", "the", "chatbot", "to", "be", "use", "by", "multiple", "user", "Python", "class", "SystemSession", "object", "def", "__init__", "self", "kwargs", "self", "NUMBER", "agent_id", "kwargs", "NUMBER", "get", "agent_id", "self", "NUMBER", "session_id", "kwargs", "NUMBER", "get", "session_id", "self", "NUMBER", "default_session_id", "kwargs", "NUMBER", "get", "default_session_id", "def", "process", "self", "existing_session", "Database", "NUMBER", "find_one", "system_session", "agent_id", "self", "NUMBER", "agent_id", "if", "not", "existing_session", "session_id", "self", "NUMBER", "create", "else", "session_id", "existing_session", "session_id", "return", "session_id", "def", "get_all", "self", "pass", "def", "create", "self", "default_session", "self", "NUMBER", "default_session_id", "data", "agent_id", "self", "NUMBER", "agent_id", "session_id", "default_session", "created_at", "datetime", "NUMBER", "now", "updated_at", "datetime", "NUMBER", "now", "Database", "NUMBER", "insert", "collection", "system_session", "data", "data", "return", "default_session", "By", "use", "code", "above", "when", "I", "do", "json", "post", "and", "retrieve", "the", "session_id", "the", "session_id", "be", "duplicate", "means", "that", "the", "code", "generates", "the", "same", "session_id", "instead", "of", "unique", "one", "NUMBER", "any", "ideas", "FYI", "for", "this", "code", "I", "use", "the", "self", "NUMBER", "bot", "NUMBER", "default_session", "NUMBER", "id_string", "as", "it", "generates", "new", "session", "NUMBER", "but", "I", "just", "realized", "when", "I", "post", "from", "the", "same", "PC", "by", "passing", "email", "and", "utterance", "the", "bot", "code", "generates", "identical", "session_id", "string", "which", "makes", "it", "duplicate", "bilalbayasut", "The", "default", "session", "id", "will", "be", "the", "same", "for", "each", "instance", "of", "a", "chat", "bot", "NUMBER", "You", "will", "want", "to", "generate", "a", "new", "id", "for", "each", "user", "session", "however", "you", "be", "track", "that", "that", "be", "created", "NUMBER", "Ok", "I", "have", "use", "the", "conversationManager", "but", "the", "weird", "thing", "be", "when", "I", "use", "the", "generate_response", "function", "and", "add", "seession_id", "within", "it", "somehow", "the", "generate_base_query", "be", "fail", "NUMBER", "somehow", "it", "looks", "like", "the", "session_id", "be", "None", "Bash", "File", "home", "bilal", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "storage_adapter", "NUMBER", "py", "line", "NUMBER", "in", "generate_base_query", "self", "NUMBER", "base_query", "filter_instance", "NUMBER", "filter_selection", "chatterbot", "session_id", "File", "home", "bilal", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "filters", "NUMBER", "py", "line", "NUMBER", "in", "filter_selection", "so", "that", "it", "fail", "in", "this", "line", "in", "chatterbot", "filters", "NUMBER", "py", "Python", "if", "session", "NUMBER", "conversation", "NUMBER", "empty", "Bash", "AttributeError", "NoneType", "object", "has", "no", "attribute", "conversation", "and", "after", "I", "check", "the", "session", "be", "empty", "NUMBER", "I", "don", "t", "understand", "where", "Chatterbot", "save", "its", "sessions", "UPDATE", "I", "just", "get", "it", "worked", "by", "modifying", "the", "session", "NUMBER", "get", "function", "in", "chatterbot", "conversation", "session", "NUMBER", "py", "Python", "def", "get", "self", "session_id", "default", "None", "Return", "a", "session", "given", "a", "unique", "identifier", "NUMBER", "session", "Session", "self", "NUMBER", "sessions", "session_id", "session", "return", "self", "NUMBER", "sessions", "NUMBER", "get", "str", "session_id", "default", "But", "I", "don", "t", "like", "modifying", "the", "core", "of", "the", "chatterbot", "NUMBER", "any", "ideas", "fellas", "vkosuri", "gunthercox", "as", "the", "founder", "what", "do", "you", "think", "bilalbayasut", "I", "m", "currently", "work", "on", "change", "that", "will", "allow", "sessions", "to", "be", "stored", "in", "the", "database", "NUMBER", "They", "be", "currently", "only", "stored", "in", "memory", "NUMBER", "I", "m", "still", "work", "on", "the", "change", "but", "they", "should", "definitely", "resolve", "this", "problem", "NUMBER", "I", "have", "an", "issue", "with", "encodings", "I", "can", "t", "use", "the", "str", "function", "to", "convert", "the", "response", "to", "a", "string", "without", "get", "error", "and", "I", "can", "t", "use", "an", "encode", "function", "because", "the", "Statement", "be", "not", "a", "string", "NUMBER", "when", "use", "a", "feedback", "chatterbot", "it", "shows", "the", "following", "error", "Bash", "Traceback", "most", "recent", "call", "last", "File", "Applications", "XAMPP", "xamppfiles", "htdocs", "chat", "NUMBER", "cgi", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "learn_response", "response", "NUMBER", "input_statement", "File", "Users", "yuvikakoul", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "learn_response", "statement", "NUMBER", "add_response", "AttributeError", "str", "object", "has", "no", "attribute", "add_response", "it", "works", "when", "i", "try", "to", "run", "it", "stand", "alone", "but", "i", "need", "it", "to", "work", "on", "the", "server", "NUMBER", "How", "can", "i", "do", "that", "python", "Users", "yuvikakoul", "anaconda", "bin", "python", "code", "utf", "NUMBER", "import", "cgi", "def", "htmlTop", "print", "Content", "type", "text", "html", "n", "n", "TAG", "TAG", "TAG", "chat", "TAG", "TAG", "TAG", "def", "htmlTail", "print", "TAG", "TAG", "if", "__name__", "__main__", "try", "htmlTop", "from", "chatterbot", "import", "ChatBot", "import", "logging", "bot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "def", "getdata", "NUMBER", "formData", "cgi", "NUMBER", "FieldStorage", "text", "NUMBER", "formData", "NUMBER", "getvalue", "text", "NUMBER", "text", "formData", "NUMBER", "getvalue", "text", "text", "NUMBER", "formData", "NUMBER", "getvalue", "text", "NUMBER", "print", "text", "print", "text", "NUMBER", "print", "text", "NUMBER", "def", "get_feedback", "if", "Yes", "in", "text", "NUMBER", "return", "False", "elif", "No", "in", "text", "NUMBER", "return", "True", "else", "print", "n", "nPlease", "type", "either", "Yes", "or", "No", "return", "get_feedback", "bol", "get_feedback", "if", "bol", "bot", "NUMBER", "learn_response", "text", "NUMBER", "text", "getdata", "NUMBER", "htmlTail", "except", "cgi", "NUMBER", "print_exception", "I", "have", "to", "get", "the", "input", "from", "a", "Html", "page", "so", "it", "will", "be", "a", "string", "but", "how", "can", "i", "convert", "it", "into", "a", "statement", "object", "Problem", "solve", "add", "this", "if", "bol", "text", "NUMBER", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "text", "NUMBER", "text", "NUMBER", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "text", "bot", "NUMBER", "learn_response", "text", "NUMBER", "text", "NUMBER", "Is", "this", "something", "you", "re", "gonna", "tackle", "Or", "do", "you", "wanna", "farm", "out", "the", "work", "Also", "be", "you", "talking", "about", "from", "a", "code", "perspective", "to", "inform", "people", "about", "what", "filters", "and", "things", "they", "want", "to", "use", "Or", "do", "you", "mean", "from", "a", "slightly", "higher", "theoretical", "perspective", "that", "talks", "about", "the", "steps", "from", "a", "scholastic", "approach", "Lots", "of", "question", "I", "know", "NUMBER", "When", "i", "try", "to", "run", "chatterbot", "on", "the", "local", "server", "it", "shows", "this", "error", "nltk_data", "Error", "loading", "stopwords", "nltk_data", "Error", "loading", "wordnet", "nltk_data", "Error", "loading", "punkt", "nltk_data", "Error", "loading", "vader_lexicon", "Along", "with", "it", "it", "also", "shows", "the", "correct", "response", "NUMBER", "i", "have", "downloaded", "the", "file", "in", "my", "system", "but", "i", "dont", "know", "about", "the", "server", "NUMBER", "yes", "i", "have", "all", "the", "file", "mention", "in", "the", "error", "on", "run", "the", "above", "commands", "i", "get", "this", "output", "Users", "yuvikakoul", "nltk_data", "usr", "share", "nltk_data", "usr", "local", "share", "nltk_data", "usr", "lib", "nltk_data", "usr", "local", "lib", "nltk_data", "which", "directory", "be", "i", "supposed", "to", "check", "it", "contains", "all", "the", "file", "still", "i", "ll", "try", "downloading", "all", "the", "corpora", "file", "Sure", "almost", "do", "there", "be", "a", "branch", "sql", "doc", "I", "ll", "update", "docs", "and", "make", "a", "PR", "Hi", "there", "I", "downloaded", "a", "corpus", "json", "file", "has", "data", "about", "planets", "NUMBER", "when", "I", "imported", "it", "in", "train", "function", "and", "talks", "about", "any", "planet", "it", "doesn", "t", "speak", "NUMBER", "Can", "anyone", "help", "me", "on", "this", "NUMBER", "Thanks", "NUMBER", "image", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "c", "NUMBER", "d", "NUMBER", "d", "NUMBER", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "a", "NUMBER", "b", "NUMBER", "a", "NUMBER", "be", "NUMBER", "c", "NUMBER", "png", "image", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "fbdcac", "NUMBER", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "af", "NUMBER", "a", "NUMBER", "c", "NUMBER", "a", "NUMBER", "b", "NUMBER", "png", "Yep", "sure", "mate", "NUMBER", "thanks", "will", "try", "NUMBER", "but", "if", "I", "wanna", "du", "like", "wat", "I", "asked", "say", "I", "feeded", "info", "about", "something", "and", "if", "I", "ask", "a", "question", "it", "should", "frame", "or", "through", "output", "based", "on", "that", "soo", "I", "hope", "you", "understand", "wat", "I", "have", "said", "so", "where", "do", "I", "start", "Can", "you", "shed", "some", "light", "Thanks", "NUMBER", "I", "feel", "like", "I", "can", "t", "understand", "how", "to", "write", "a", "training", "class", "in", "ur", "docs", "NUMBER", "can", "you", "please", "tell", "a", "bit", "clear", "NUMBER", "and", "thanks", "custom", "QA", "corpus", "worked", "Thanks", "I", "will", "look", "into", "it", "NUMBER", "will", "close", "the", "issue", "now", "thanks", "NUMBER", "NUMBER", "Hi", "guys", "I", "m", "add", "chatterbot", "to", "a", "server", "so", "people", "can", "interact", "with", "it", "from", "my", "website", "NUMBER", "The", "server", "which", "will", "host", "the", "chatterbot", "NUMBER", "GB", "RAM", "NUMBER", "cores", "runs", "much", "slower", "than", "my", "home", "computer", "and", "the", "kernel", "seems", "to", "kill", "my", "chatbot", "after", "a", "few", "minutes", "of", "use", "NUMBER", "It", "usually", "responds", "to", "about", "NUMBER", "NUMBER", "statements", "before", "get", "killed", "NUMBER", "Further", "I", "m", "having", "a", "hard", "time", "profiling", "my", "chatterbot", "to", "find", "out", "exactly", "where", "the", "CPU", "resources", "be", "cause", "the", "kernel", "to", "pull", "the", "plug", "on", "it", "NUMBER", "I", "m", "relatively", "new", "to", "python", "and", "I", "d", "like", "to", "know", "what", "kind", "of", "tool", "you", "guys", "have", "be", "use", "to", "profile", "performance", "issue", "NUMBER", "This", "be", "how", "I", "m", "initializing", "my", "instance", "Create", "a", "new", "ChatBot", "instance", "bot", "ChatBot", "Ava", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "statement_comparison_function", "chatterbot", "NUMBER", "comparisons", "NUMBER", "levenshtein_distance", "response_selection_method", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_first_response", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "Gitter", "information", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "Gitter", "gitter_api_token", "gitter_room", "NUMBER", "d", "NUMBER", "ce", "NUMBER", "f", "NUMBER", "af", "NUMBER", "gitter_only_respond_to_mentions", "False", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "Gitter", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "database", "ava_movie", "database_uri", "NUMBER", "NUMBER", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ListTrainer", "The", "chatbot", "will", "take", "a", "good", "amount", "of", "time", "to", "respond", "and", "after", "a", "few", "minutes", "of", "slow", "responses", "the", "kernel", "kills", "my", "bot", "NUMBER", "I", "trained", "the", "bot", "with", "the", "Cornell", "Movie", "Dialog", "Corpus", "LINK", "cristian", "Cornell_Movie", "Dialogs_Corpus", "NUMBER", "html", "which", "contains", "roughly", "NUMBER", "k", "conversations", "and", "I", "don", "t", "think", "the", "problem", "be", "with", "the", "amount", "of", "conversations", "use", "NUMBER", "I", "ve", "tried", "toggling", "some", "of", "the", "logic", "adapters", "but", "those", "don", "t", "seem", "to", "have", "much", "of", "an", "effect", "NUMBER", "Is", "there", "any", "profiling", "tool", "debug", "configs", "you", "guys", "use", "specifically", "for", "chatterbot", "If", "not", "be", "there", "some", "general", "tool", "for", "profiling", "python", "program", "I", "m", "going", "to", "close", "this", "ticket", "off", "NUMBER", "I", "had", "thought", "this", "functionality", "was", "going", "to", "be", "needed", "in", "order", "to", "get", "the", "SQL", "Storage", "adapter", "to", "work", "but", "the", "problem", "that", "were", "occurring", "there", "have", "be", "resolve", "NUMBER", "I", "m", "considering", "the", "possibility", "of", "remove", "the", "extra_data", "parameter", "however", "I", "think", "a", "better", "way", "to", "provide", "similar", "functionality", "would", "be", "to", "allow", "developers", "to", "extend", "the", "exist", "models", "for", "statements", "so", "that", "they", "can", "add", "additional", "field", "and", "store", "the", "values", "properly", "in", "the", "database", "NUMBER", "python", "m", "chatterbot", "version", "Traceback", "most", "recent", "call", "last", "File", "usr", "lib", "python", "NUMBER", "runpy", "NUMBER", "py", "line", "NUMBER", "in", "_run_module_as_main", "__main__", "fname", "loader", "pkg_name", "File", "usr", "lib", "python", "NUMBER", "runpy", "NUMBER", "py", "line", "NUMBER", "in", "_run_code", "exec", "code", "in", "run_globals", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "__main__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "print", "chatterbot", "NUMBER", "__version__", "AttributeError", "module", "object", "has", "no", "attribute", "__version__", "yazdat", "to", "get", "the", "version", "number", "try", "sh", "import", "chatterbot", "chatterbot", "NUMBER", "__version__", "This", "should", "possibly", "result", "in", "an", "outcome", "like", "sh", "NUMBER", "Thanks", "for", "the", "response", "gabru", "md", "and", "vkosuri", "NUMBER", "import", "chatterbot", "chatterbot", "NUMBER", "__version__", "worked", "fine", "NUMBER", "I", "be", "run", "NUMBER", "I", "m", "experimenting", "with", "chatterbot", "to", "use", "on", "a", "robot", "NUMBER", "I", "m", "sure", "I", "will", "have", "more", "question", "NUMBER", "I", "hope", "to", "contribute", "where", "I", "can", "NUMBER", "even", "for", "me", "this", "python", "m", "chatterbot", "version", "at", "beginning", "then", "I", "use", "chatterbot", "NUMBER", "__version__", "to", "find", "my", "version", "NUMBER", "I", "saw", "that", "people", "request", "Gitter", "examples", "and", "some", "were", "add", "NUMBER", "However", "I", "haven", "t", "be", "able", "to", "get", "the", "bot", "to", "connect", "to", "Gitter", "and", "when", "looking", "at", "the", "constructor", "it", "looks", "so", "basic", "NUMBER", "No", "where", "in", "the", "examples", "do", "we", "pass", "an", "OAuth", "key", "or", "secret", "key", "NUMBER", "Has", "anyone", "be", "able", "to", "connect", "to", "Gitter", "use", "simply", "the", "API", "key", "Here", "s", "my", "sample", "below", "attempting", "to", "connect", "to", "a", "room", "call", "meta", "game", "NUMBER", "I", "blocked", "out", "my", "API", "key", "for", "obvious", "reasons", "NUMBER", "Create", "a", "new", "ChatBot", "instance", "bot", "ChatBot", "Ava", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "Gitter", "information", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "Gitter", "gitter_api_token", "my_api_key", "gitter_room", "meta", "game", "gitter_only_respond_to_mentions", "True", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "Gitter", "database", "ava_gitter", "database_uri", "NUMBER", "NUMBER", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ListTrainer", "The", "above", "code", "fail", "to", "connect", "to", "Gitter", "with", "the", "failure", "code", "chatterbot", "NUMBER", "input", "NUMBER", "gitter", "NUMBER", "HTTPStatusException", "u", "NUMBER", "status", "code", "recieved", "Has", "anyone", "be", "successful", "with", "Gitter", "Am", "I", "miss", "something", "obvious", "I", "figured", "this", "out", "and", "there", "seems", "to", "be", "a", "bug", "when", "joining", "a", "room", "NUMBER", "I", "know", "the", "room", "id", "I", "wanted", "to", "join", "so", "I", "hardcoded", "the", "value", "in", "input", "NUMBER", "gitter", "NUMBER", "py", "NUMBER", "I", "can", "run", "this", "to", "ground", "if", "anyone", "else", "has", "an", "issue", "with", "it", "and", "they", "don", "t", "know", "python", "code", "well", "NUMBER", "The", "issue", "seems", "to", "be", "that", "the", "call", "was", "a", "post", "where", "only", "a", "get", "be", "support", "to", "get", "room", "information", "NUMBER", "Sure", "NUMBER", "After", "I", "finish", "profiling", "chatterbot", "to", "figure", "out", "my", "performance", "issue", "I", "can", "make", "a", "general", "fix", "for", "the", "Gitter", "adapter", "NUMBER", "I", "would", "like", "someone", "else", "to", "confirm", "that", "they", "re", "having", "issue", "NUMBER", "Basically", "I", "tried", "to", "use", "the", "current", "chatterbot", "on", "master", "and", "I", "was", "get", "NUMBER", "s", "when", "connecting", "NUMBER", "So", "I", "was", "just", "test", "ChatterBot", "and", "made", "a", "simple", "Discord", "Bot", "NUMBER", "I", "find", "the", "following", "logs", "in", "my", "file", "Query", "What", "be", "you", "Response", "Who", "Who", "be", "but", "a", "form", "following", "the", "function", "of", "what", "Query", "Who", "be", "you", "Response", "Who", "Who", "be", "but", "a", "form", "following", "the", "function", "of", "what", "I", "also", "find", "quite", "a", "bit", "of", "grammar", "mistakes", "responses", "that", "made", "no", "sense", "etc", "NUMBER", "Is", "there", "any", "place", "I", "can", "contribute", "to", "this", "or", "I", "can", "go", "ahead", "and", "manually", "fix", "NUMBER", "It", "would", "be", "a", "pain", "to", "have", "to", "manually", "override", "this", "by", "use", "a", "list", "NUMBER", "Edit", "I", "maybe", "confused", "but", "I", "cannot", "create", "my", "own", "corpus", "bank", "in", "JSON", "if", "I", "be", "use", "MongoDB", "right", "i", "be", "trying", "to", "add", "new", "corpus", "to", "train", "chatterbot", "but", "i", "have", "these", "error", "Traceback", "most", "recent", "call", "last", "File", "C", "Users", "user", "NUMBER", "Desktop", "py", "mmm", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "C", "Python", "NUMBER", "Lib", "site", "package", "chatterbot_corpus", "data", "english", "bank", "NUMBER", "corpus", "NUMBER", "js", "on", "File", "C", "Python", "NUMBER", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "corpus_data", "self", "NUMBER", "corpus", "NUMBER", "load_corpus", "corpus", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot_corpus", "corpus", "NUMBER", "py", "line", "NUMBER", "in", "load_corpus", "corpus", "self", "NUMBER", "read_corpus", "file_path", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot_corpus", "corpus", "NUMBER", "py", "line", "NUMBER", "in", "read_corpus", "with", "io", "NUMBER", "open", "file_name", "encoding", "utf", "NUMBER", "as", "data_file", "IOError", "Errno", "NUMBER", "Invalid", "argument", "C", "Python", "NUMBER", "Lib", "site", "package", "chatterbot_corpus", "data", "english", "x", "NUMBER", "ank", "NUMBER", "corpus", "NUMBER", "json", "this", "the", "path", "for", "corpus", "chatterbot", "NUMBER", "train", "C", "Python", "NUMBER", "Lib", "site", "package", "chatterbot_corpus", "data", "english", "bank", "NUMBER", "corpus", "NUMBER", "json", "Your", "issue", "be", "pin", "point", "with", "this", "statement", "right", "here", "IOError", "Errno", "NUMBER", "Invalid", "argument", "C", "Python", "NUMBER", "Lib", "site", "package", "chatterbot_corpus", "data", "english", "x", "NUMBER", "ank", "NUMBER", "corpus", "NUMBER", "json", "You", "can", "solve", "this", "with", "chatterbot", "NUMBER", "train", "r", "C", "Python", "NUMBER", "Lib", "site", "package", "chatterbot_corpus", "data", "english", "bank", "NUMBER", "corpus", "NUMBER", "json", "i", "try", "chatterbot", "NUMBER", "train", "r", "C", "Python", "NUMBER", "Lib", "site", "package", "chatterbot_corpus", "data", "english", "bank", "NUMBER", "corpus", "NUMBER", "json", "but", "it", "gives", "me", "the", "same", "error", "Q", "A", "sample", "corpus", "I", "was", "able", "to", "add", "and", "it", "worked", "fine", "NUMBER", "use", "the", "same", "syntax", "wat", "describe", "in", "the", "docs", "NUMBER", "Can", "chatterbot", "handle", "the", "nested", "json", "data", "and", "get", "the", "response", "on", "the", "basis", "of", "primary", "key", "Internal", "keys", "could", "be", "same", "NUMBER", "Like", "in", "sample", "below", "key", "NUMBER", "key", "NUMBER", "will", "have", "same", "internal", "key", "parms", "NUMBER", "Json", "key", "NUMBER", "details", "name", "xxx", "surname", "yyy", "key", "NUMBER", "details", "name", "xxx", "surname", "yyy", "I", "want", "to", "perform", "a", "FTP", "operation", "on", "the", "basis", "of", "input", "data", "NUMBER", "Function", "performing", "be", "task", "be", "there", "NUMBER", "How", "to", "call", "that", "function", "NUMBER", "conversation", "will", "be", "like", "Bash", "chatbot", "NUMBER", "get_response", "I", "be", "having", "some", "alarms", "on", "node", "response", "do", "you", "want", "me", "to", "take", "db", "backup", "NUMBER", "Yes", "No", "chatbot", "NUMBER", "get_response", "Yes", "reponse", "please", "wait", "I", "ll", "notify", "once", "backup", "do", "Now", "here", "when", "user", "give", "Yes", "how", "will", "I", "call", "the", "FTP", "backup", "function", "Also", "that", "operation", "will", "take", "time", "NUMBER", "So", "do", "I", "proceed", "with", "thread", "approach", "and", "notify", "once", "operation", "will", "be", "do", "Or", "can", "I", "make", "chatterBot", "inactive", "till", "the", "time", "operation", "completes", "NUMBER", "Do", "i", "have", "to", "write", "a", "separate", "logical", "adapter", "for", "this", "or", "we", "have", "inbuilt", "support", "for", "calling", "function", "on", "the", "basis", "of", "input", "decode", "NUMBER", "I", "would", "suggest", "use", "threading", "as", "an", "option", "NUMBER", "Because", "we", "know", "that", "Python", "do", "not", "provide", "an", "Asynchronous", "model", "for", "programming", "just", "like", "NodeJS", "NUMBER", "It", "do", "not", "work", "on", "callbacks", "and", "hence", "managing", "time", "would", "be", "a", "problem", "in", "your", "case", "NUMBER", "You", "can", "create", "threads", "corresponding", "to", "different", "works", "that", "you", "want", "to", "do", "NUMBER", "t", "NUMBER", "Thread", "to", "run", "ChatBot", "t", "NUMBER", "Thread", "to", "run", "the", "Backup", "process", "NUMBER", "and", "then", "creating", "the", "condition", "to", "operate", "between", "the", "two", "threads", "NUMBER", "Threading", "will", "help", "you", "establish", "an", "asynchronous", "model", "to", "perform", "the", "backup", "task", "and", "you", "ll", "not", "have", "to", "keep", "ChatBot", "inactive", "NUMBER", "Hope", "it", "helps", "NUMBER", "NUMBER", "Can", "you", "please", "shed", "some", "light", "on", "how", "chatter", "bot", "training", "works", "and", "how", "it", "chooses", "the", "utterance", "for", "a", "response", "NUMBER", "I", "mean", "do", "you", "use", "Neural", "networks", "ML", "deep", "learning", "or", "just", "some", "rule", "based", "string", "distance", "levenshtein", "distance", "methodologies", "NUMBER", "Is", "it", "contextual", "Thanks", "Yuval", "So", "I", "just", "start", "delving", "into", "the", "backend", "and", "I", "can", "share", "what", "I", "know", "with", "you", "NUMBER", "If", "you", "wanted", "to", "know", "the", "exact", "lines", "of", "code", "you", "can", "find", "the", "relevant", "code", "in", "chatterbot", "NUMBER", "generate_response", "method", "NUMBER", "Basically", "when", "you", "setup", "your", "chatbot", "instance", "you", "should", "setup", "the", "logic", "adapters", "you", "want", "to", "use", "bot", "ChatBot", "Ava", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "statement_comparison_function", "chatterbot", "NUMBER", "comparisons", "NUMBER", "levenshtein_distance", "response_selection_method", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_first_response", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "In", "the", "above", "snippet", "I", "use", "Levenshtein", "Distance", "for", "statement", "comparison", "but", "I", "also", "use", "the", "Best", "Match", "algorithm", "for", "lookups", "as", "well", "a", "last", "adapter", "for", "response", "selection", "NUMBER", "These", "logic", "adapters", "will", "be", "use", "after", "the", "preprocessor", "code", "trim", "white", "space", "escape", "chars", "anything", "else", "you", "add", "be", "executed", "NUMBER", "Hope", "this", "helps", "Thanks", "for", "your", "efforts", "NUMBER", "I", "believe", "this", "will", "help", "a", "lot", "of", "less", "experience", "users", "like", "me", "NUMBER", "I", "faced", "a", "trouble", "to", "follow", "the", "current", "tutorial", "NUMBER", "Then", "I", "use", "the", "modify", "Django", "example", "and", "follow", "the", "tutorial", "from", "django", "website", "to", "make", "it", "run", "NUMBER", "gunthercox", "Please", "keep", "us", "posted", "on", "this", "NUMBER", "Currently", "training", "use", "this", "app", "be", "somewhat", "unclear", "NUMBER", "Thanks", "NUMBER", "What", "be", "the", "status", "of", "this", "gunthercox", "I", "was", "setting", "up", "my", "chatterbot", "to", "work", "with", "gitter", "but", "that", "won", "t", "actually", "suit", "my", "needs", "NUMBER", "I", "ll", "be", "setting", "up", "the", "chatterbot", "as", "a", "django", "app", "this", "weekend", "NUMBER", "If", "needed", "I", "can", "either", "provide", "feedback", "behind", "what", "portions", "be", "currently", "unclear", "or", "I", "can", "add", "comments", "to", "the", "current", "codebase", "NUMBER", "What", "would", "be", "more", "beneficial", "Adding", "how", "add", "custom", "adaptors", "and", "configure", "them", "within", "django", "would", "be", "helpful", "especially", "if", "you", "could", "provide", "examples", "on", "custom", "logic", "and", "storage", "adaptors", "NUMBER", "Yup", "as", "yousifa", "mention", "the", "docs", "in", "the", "website", "be", "great", "for", "get", "chatterbot", "integrated", "with", "Django", "LINK", "However", "I", "was", "a", "little", "lost", "immediately", "after", "NUMBER", "After", "syncing", "the", "database", "for", "chatterbot", "python", "manage", "NUMBER", "py", "migrate", "django_chatterbot", "what", "be", "the", "next", "step", "I", "can", "launch", "the", "django", "server", "but", "I", "don", "t", "know", "where", "to", "initialize", "the", "chatterbot", "instance", "as", "my", "own", "NUMBER", "Naming", "the", "chatbot", "setting", "up", "the", "logic", "processors", "filters", "etc", "NUMBER", "It", "seems", "that", "the", "views", "NUMBER", "py", "inside", "of", "django_chatterbot", "folder", "contains", "the", "API", "endpoint", "but", "I", "don", "t", "know", "where", "to", "customize", "the", "code", "to", "ensure", "it", "makes", "it", "to", "my", "customized", "chat", "bot", "NUMBER", "How", "be", "this", "come", "along", "gunthercox", "I", "m", "having", "issue", "setting", "up", "API", "Authorization", "from", "a", "separate", "server", "NUMBER", "I", "want", "to", "create", "a", "section", "to", "allow", "users", "to", "interact", "with", "my", "chatbot", "from", "my", "blog", "meta", "game", "NUMBER", "org", "hosted", "on", "a", "separate", "server", "NUMBER", "The", "easiest", "way", "to", "setup", "authorization", "seems", "to", "be", "setting", "up", "a", "CSRF", "Token", "LINK", "but", "I", "can", "t", "seem", "to", "get", "that", "to", "work", "NUMBER", "How", "have", "you", "worked", "with", "django", "and", "chatterbot", "Was", "the", "django", "application", "hosting", "the", "html", "file", "that", "interacted", "with", "the", "bot", "or", "did", "you", "setup", "an", "API", "that", "allows", "people", "to", "communicate", "with", "it", "from", "anywhere", "Did", "you", "run", "into", "issue", "with", "CSRF", "Tokens", "sal", "NUMBER", "I", "haven", "t", "start", "work", "on", "it", "yet", "NUMBER", "It", "sounds", "like", "you", "need", "to", "allow", "cross", "domain", "request", "to", "the", "API", "NUMBER", "There", "be", "a", "number", "of", "ways", "to", "do", "this", "NUMBER", "I", "highly", "recommend", "the", "django", "cors", "headers", "package", "for", "achieving", "this", "LINK", "cors", "headers", "I", "install", "everything", "as", "the", "ChatterBot", "site", "says", "but", "still", "gets", "this", "error", "NUMBER", "Bash", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Traceback", "most", "recent", "call", "last", "File", "terminal_example", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "database", "NUMBER", "database", "NUMBER", "db", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "initialize", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "initialize", "nltk_download_corpus", "corpora", "wordnet", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "nltk_download_corpus", "find", "resource_path", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "return", "find", "modified_name", "paths", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "return", "ZipFilePathPointer", "p", "zipentry", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "return", "init_func", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "zipfile", "OpenOnDemandZipFile", "os", "NUMBER", "path", "NUMBER", "abspath", "zipfile", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "return", "init_func", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "zipfile", "NUMBER", "ZipFile", "NUMBER", "__init__", "self", "filename", "File", "usr", "lib", "python", "NUMBER", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "_RealGetContents", "File", "usr", "lib", "python", "NUMBER", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "_RealGetContents", "raise", "BadZipFile", "File", "be", "not", "a", "zip", "file", "zipfile", "NUMBER", "BadZipFile", "File", "be", "not", "a", "zip", "file", "I", "ve", "tried", "reinstalling", "everything", "but", "the", "error", "has", "already", "be", "reinstalled", "a", "thousand", "times", "the", "ChatterBot", "lib", "and", "ntlk", "and", "continues", "with", "this", "error", "NUMBER", "The", "error", "happens", "in", "python", "NUMBER", "and", "python", "NUMBER", "Can", "someone", "help", "me", "But", "I", "already", "tried", "to", "delete", "the", "nltk", "and", "install", "but", "the", "error", "continues", "NUMBER", "Have", "to", "delete", "which", "folder", "file", "Hi", "Facing", "an", "issue", "as", "below", "NUMBER", "Please", "help", "NUMBER", "Bash", "C", "python", "Python", "NUMBER", "Anaconda", "NUMBER", "NUMBER", "bit", "default", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "MSC", "v", "NUMBER", "NUMBER", "NUMBER", "bit", "AMD", "NUMBER", "on", "win", "NUMBER", "Type", "help", "copyright", "credits", "or", "license", "for", "more", "information", "NUMBER", "import", "ChatBot", "from", "chatterbot", "File", "TAG", "line", "NUMBER", "import", "ChatBot", "from", "chatterbot", "SyntaxError", "invalid", "syntax", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Ujbuk", "C", "Users", "eparsen", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapt", "er", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "C", "Users", "eparsen", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "site", "package", "cha", "tterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "orage", "utils", "NUMBER", "initialize_class", "storage_adapter", "kwargs", "File", "C", "Users", "eparsen", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "site", "package", "cha", "tterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "initialize_class", "return", "Class", "kwargs", "File", "C", "Users", "eparsen", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "site", "package", "cha", "tterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "database", "Database", "database_path", "File", "C", "Users", "eparsen", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "site", "package", "jso", "ndb", "db", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "set_path", "file_path", "File", "C", "Users", "eparsen", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "site", "package", "jso", "ndb", "db", "NUMBER", "py", "line", "NUMBER", "in", "set_path", "self", "NUMBER", "write_data", "file_path", "File", "C", "Users", "eparsen", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "site", "package", "jso", "ndb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "write_data", "with", "open_file_for_writing", "path", "as", "db", "File", "C", "Users", "eparsen", "AppData", "Local", "Continuum", "Anaconda", "NUMBER", "lib", "site", "package", "jso", "ndb", "compat", "NUMBER", "py", "line", "NUMBER", "in", "open_file_for_writing", "return", "io", "NUMBER", "open", "args", "kwargs", "PermissionError", "Errno", "NUMBER", "Permission", "denied", "database", "NUMBER", "db", "Hi", "Thanks", "for", "your", "reply", "NUMBER", "I", "have", "tried", "change", "permission", "to", "all", "directories", "and", "sub", "directories", "of", "the", "location", "where", "it", "s", "install", "and", "also", "tried", "creating", "a", "blank", "file", "names", "database", "NUMBER", "db", "in", "most", "of", "the", "directories", "under", "chatterbot", "however", "it", "didn", "t", "work", "NUMBER", "I", "have", "use", "mango", "db", "to", "train", "my", "bot", "NUMBER", "\u5927\u6d77", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "\u5927\u6d77", "\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77", "I", "have", "use", "chatterbot", "filters", "in", "my", "python", "file", "Python", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "when", "I", "input", "first", "time", "\u5927\u6d77", "chatterbot", "response", "be", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "when", "I", "input", "second", "time", "\u5927\u6d77", "chatterbot", "response", "be", "\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77", "when", "I", "input", "third", "time", "\u5927\u6d77", "chatterbot", "response", "neither", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "nor", "\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77", "When", "i", "remove", "filters", "from", "my", "python", "the", "response", "be", "differ", "from", "previous", "and", "Python", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "when", "I", "input", "first", "time", "\u5927\u6d77", "chatterbot", "response", "be", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "when", "I", "input", "second", "time", "\u5927\u6d77", "chatterbot", "response", "be", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "when", "I", "third", "input", "\u5927\u6d77", "chatterbot", "response", "be", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "always", "reponse", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "Now", "I", "want", "chatterbot", "has", "to", "reply", "one", "of", "both", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "and", "\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77", "when", "i", "input", "\u5927\u6d77", "and", "No", "matter", "how", "many", "times", "i", "input", "\u5927\u6d77", "gunthercox", "vkosuri", "matser", "gunthercox", "master", "this", "question", "and", "NUMBER", "be", "different", "question", "NUMBER", "vkosuri", "use", "Chinese", "be", "question", "and", "answer", "NUMBER", "\u5927\u6d77", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "equal", "sea", "blue", "and", "vast", "this", "be", "question", "and", "answer", "NUMBER", "gunthercox", "when", "i", "use", "RepetitiveResponseFilter", "chatterbot", "returns", "only", "answer", "when", "I", "haven", "t", "include", "response", "filter", "chatterbot", "returns", "other", "responses", "that", "be", "not", "expected", "So", "then", "i", "have", "rewrite", "RepetitiveResponseFilter", "filter", "like", "this", "Python", "class", "ResponseFilter", "Filter", "def", "filter_selection", "self", "chatterbot", "session_id", "session", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "get", "session_id", "if", "session", "NUMBER", "conversation", "NUMBER", "empty", "return", "chatterbot", "NUMBER", "orage", "NUMBER", "base_query", "text_of_recent_responses", "for", "statement", "response", "in", "session", "NUMBER", "conversation", "text_of_recent_responses", "NUMBER", "append", "response", "NUMBER", "text", "query", "chatterbot", "NUMBER", "orage", "NUMBER", "base_query", "NUMBER", "get_random", "text_of_recent_responses", "return", "query", "I", "just", "want", "it", "to", "output", "one", "of", "the", "answers", "I", "give", "python", "def", "filter_selection", "self", "chatterbot", "session_id", "session", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "get", "session_id", "if", "session", "NUMBER", "conversation", "NUMBER", "empty", "return", "chatterbot", "NUMBER", "orage", "NUMBER", "base_query", "text_of_recent_responses", "for", "statement", "response", "in", "session", "NUMBER", "conversation", "text_of_recent_responses", "NUMBER", "append", "response", "NUMBER", "text", "query", "chatterbot", "NUMBER", "orage", "NUMBER", "base_query", "NUMBER", "atement_text_in", "text_of_recent_responses", "return", "query", "gunthercox", "i", "give", "you", "my", "server", "address", "LINK", "\u4f60\u5403\u4e86\u5417", "and", "my", "sample", "corpus", "NUMBER", "json", "JSON", "testFilter", "\u4f60\u5403\u4e86\u5417", "\u6211\u4e0d\u9700\u8981\u5403\u4e1c\u897f", "\u4e5f\u4f1a\u6709\u65e0\u7a77\u7684\u529b\u91cf\u6ef4", "\u54c8\u54c8\u54c8\u54c8\u54c8", "\u4f60\u5403\u4e86\u5417", "\u60a8\u8981\u7ed9\u6211\u5403\u7684\u4e1c\u897f\u5417", "\u662f\u4ec0\u4e48\u662f\u4ec0\u4e48", "\u6211\u5f88\u597d\u5947", "\u4f60\u5403\u4e86\u5417", "\u8fd8\u6ca1\u8fd8\u6ca1", "\u60a8\u8981\u662f\u5e26\u7ed9\u6211\u4e1c\u897f\u5403\u6211\u662f\u4e0d\u4f1a\u4ecb\u610f\u6ef4", "\u5c3d\u7ba1\u6765", "and", "my", "example", "chatterbot", "py", "file", "Python", "import", "tornado", "NUMBER", "ioloop", "import", "tornado", "NUMBER", "web", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "trainers", "import", "ChatterBotCorpusTrainer", "bot", "ChatBot", "hebi", "read_only", "True", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "I", "din", "t", "understand", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "database", "chatterbot", "testFilter", "database", "database_uri", "mongodb", "NUMBER", "\u6307\u5b9a\u8bed\u6599\u6570\u636e\u96c6\u7684training", "class", "bot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "bot", "NUMBER", "train", "NUMBER", "testFilter", "NUMBER", "corpus", "NUMBER", "json", "class", "MainHandler", "tornado", "NUMBER", "web", "NUMBER", "RequestHandler", "def", "get", "self", "response", "bot", "NUMBER", "get_response", "self", "NUMBER", "get_argument", "message", "self", "NUMBER", "write", "str", "response", "application", "tornado", "NUMBER", "web", "NUMBER", "Application", "r", "MainHandler", "if", "name", "main", "application", "NUMBER", "listen", "NUMBER", "print", "Listening", "port", "NUMBER", "NUMBER", "tornado", "NUMBER", "ioloop", "NUMBER", "IOLoop", "NUMBER", "instance", "NUMBER", "art", "print", "Tornado", "Instance", "start", "NUMBER", "you", "can", "use", "server", "address", "request", "message", "NUMBER", "Maybe", "my", "English", "be", "so", "bad", "I", "can", "t", "describe", "it", "clearly", "NUMBER", "i", "be", "sorry", "vkosuri", "gunthercox", "yes", "you", "be", "right", "language", "be", "a", "big", "obstacles", "vkosuri", "gunthercox", "i", "be", "so", "sorry", "i", "hava", "solve", "this", "problem", "NUMBER", "i", "be", "very", "stupid", "Hello", "I", "be", "trying", "to", "follow", "django", "integration", "tutorial", "with", "chatterbot", "NUMBER", "How", "can", "I", "add", "SpecificResponseAdapter", "and", "lowconfiedance", "adapter", "parameters", "in", "django", "setting", "NUMBER", "py", "Python", "CHATTERBOT", "name", "Django", "ChatterBot", "Example", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "chatterbot", "NUMBER", "logic", "NUMBER", "SpecificResponseAdapter", "TAG", "Added", "ArangoDB", "storage", "adapter", "Added", "ArangoDB", "import", "in", "__init__", "NUMBER", "py", "Removed", "error", "that", "PyCharm", "made", "in", "__init__", "NUMBER", "py", "by", "AutoRearranging", "Added", "python", "arango", "in", "requirements", "NUMBER", "txt", "wrong", "commit", "title", "Corrected", "commit", "title", "and", "version", "I", "don", "t", "know", "why", "test", "be", "fail", "NUMBER", "I", "run", "on", "my", "computer", "all", "run", "fine", "NUMBER", "I", "can", "t", "find", "the", "error", "in", "online", "test", "except", "for", "some", "network", "error", "Pfft", "NUMBER", "Can", "anyone", "check", "again", "for", "me", "the", "error", "It", "s", "in", "Python", "NUMBER", "I", "see", "the", "error", "I", "don", "t", "know", "what", "change", "do", "I", "make", "I", "will", "try", "to", "add", "test", "NUMBER", "But", "the", "test", "requires", "to", "setup", "an", "ArangoDB", "with", "user", "and", "password", "NUMBER", "I", "have", "no", "idea", "how", "to", "do", "that", "How", "to", "Use", "documentation", "yes", "I", "can", "NUMBER", "I", "don", "t", "know", "where", "to", "put", "them", "in", "project", "NUMBER", "vkosuri", "In", "MongoDB", "you", "don", "t", "need", "any", "username", "or", "password", "NUMBER", "Also", "in", "Mongo", "database", "and", "collection", "be", "created", "dynamically", "NUMBER", "This", "be", "not", "same", "in", "Arango", "NUMBER", "username", "password", "and", "pre", "set", "database", "and", "collection", "be", "required", "NUMBER", "Should", "I", "create", "test_arango_adapter", "NUMBER", "py", "with", "sample", "username", "and", "password", "vkosuri", "Hey", "can", "you", "check", "and", "let", "me", "know", "if", "documentation", "and", "how", "to", "do", "that", "I", "add", "be", "fine", "I", "be", "work", "on", "add", "Test", "Cases", "NUMBER", "gunthercox", "Sure", "NUMBER", "Considering", "the", "High", "Demand", "MultiModel", "database", "will", "actually", "make", "ChatterBot", "highly", "efficient", "NUMBER", "The", "concept", "of", "edges", "be", "really", "amazing", "NUMBER", "In", "fact", "with", "the", "help", "of", "edges", "you", "can", "actually", "create", "a", "Graph", "which", "can", "make", "ChatterBot", "reply", "as", "per", "the", "context", "of", "the", "chat", "NUMBER", "That", "be", "said", "yes", "you", "be", "right", "NUMBER", "There", "be", "need", "to", "regular", "maintenance", "of", "code", "with", "additional", "features", "that", "be", "come", "up", "NUMBER", "But", "the", "storage", "adapter", "be", "only", "there", "for", "storage", "right", "About", "third", "party", "Python", "package", "how", "do", "you", "mean", "the", "package", "A", "package", "for", "ChatterBot", "NUMBER", "Or", "a", "package", "for", "Python", "connectivity", "NUMBER", "Because", "I", "have", "already", "use", "a", "NUMBER", "party", "package", "for", "Python", "connectivity", "based", "on", "which", "I", "have", "write", "the", "whole", "code", "NUMBER", "The", "automate", "test", "I", "actually", "have", "no", "idea", "how", "to", "set", "it", "up", "NUMBER", "I", "have", "copied", "and", "pasted", "the", "MongoDB", "test", "but", "unlike", "MonogoDB", "ArangoDB", "requires", "a", "preset", "userid", "password", "and", "database", "with", "collection", "NUMBER", "So", "a", "little", "help", "in", "setting", "one", "will", "be", "awesome", "NUMBER", "Future", "change", "that", "be", "needed", "I", "have", "already", "write", "in", "ToDo", "that", "I", "need", "to", "implement", "a", "query", "system", "to", "enable", "some", "query", "features", "NUMBER", "But", "currently", "I", "be", "work", "on", "implement", "the", "edges", "and", "creating", "Graph", "that", "will", "make", "ChatterBot", "more", "efficient", "NUMBER", "iamhssingh", "The", "third", "party", "package", "would", "be", "a", "Python", "package", "for", "ChatterBot", "something", "that", "could", "be", "install", "with", "a", "command", "such", "as", "pip", "install", "chatterbot", "arangodb", "storage", "NUMBER", "It", "s", "fairly", "easy", "to", "create", "an", "additional", "module", "that", "can", "be", "install", "to", "add", "functionality", "to", "ChatterBot", "NUMBER", "There", "be", "a", "few", "exist", "examples", "of", "this", "for", "instance", "chatterbot", "weather", "LINK", "weather", "be", "a", "logic", "adapter", "that", "allows", "a", "chat", "bot", "to", "answer", "weather", "relate", "question", "NUMBER", "If", "you", "create", "a", "new", "GitHub", "repository", "and", "add", "me", "to", "it", "I", "would", "be", "more", "than", "happy", "to", "help", "set", "this", "up", "and", "help", "get", "automate", "test", "to", "work", "NUMBER", "This", "may", "not", "be", "an", "issue", "just", "lack", "of", "documentation", "maybe", "NUMBER", "How", "to", "use", "custom", "adapter", "in", "Django", "version", "Okay", "its", "easy", "NUMBER", "Just", "follow", "the", "patter", "use", "while", "initialising", "w", "o", "Django", "NUMBER", "Apologies", "I", "have", "already", "created", "a", "storage", "adapter", "NUMBER", "Didn", "t", "know", "how", "to", "use", "it", "in", "Django", "NUMBER", "Figured", "it", "out", "NUMBER", "BTW", "can", "you", "tell", "how", "can", "I", "contribute", "by", "add", "my", "adapter", "in", "this", "project", "No", "experience", "in", "Git", "Hello", "I", "m", "doing", "a", "college", "project", "and", "would", "like", "to", "ask", "a", "question", "and", "see", "if", "it", "applies", "with", "ChatterBot", "NUMBER", "I", "have", "a", "bunch", "of", "answers", "in", "a", "list", "for", "some", "specific", "question", "about", "a", "specific", "subject", "NUMBER", "Is", "there", "some", "way", "I", "can", "train", "a", "model", "and", "make", "it", "give", "out", "the", "answer", "that", "matches", "best", "with", "whatever", "question", "the", "user", "inputs", "For", "example", "user", "asks", "what", "s", "the", "meaning", "of", "existance", "and", "the", "bot", "will", "give", "out", "the", "most", "relevant", "string", "from", "my", "answers", "database", "relate", "to", "that", "question", "All", "question", "and", "answers", "be", "to", "be", "of", "the", "same", "topic", "for", "example", "cotton", "NUMBER", "How", "it", "s", "produced", "how", "be", "it", "s", "seeds", "how", "do", "you", "plant", "it", "etc", "NUMBER", "Would", "it", "still", "work", "taking", "from", "the", "point", "that", "many", "answers", "would", "have", "a", "lot", "of", "keywords", "in", "common", "Doesn", "t", "sound", "like", "you", "have", "an", "issue", "but", "rather", "ask", "how", "to", "train", "a", "bot", "There", "be", "docs", "on", "how", "to", "do", "that", "here", "NUMBER", "LINK", "I", "ve", "checked", "the", "docs", "but", "I", "couldn", "t", "find", "the", "exact", "way", "of", "developing", "what", "I", "describe", "and", "if", "it", "s", "even", "doable", "NUMBER", "Should", "I", "just", "create", "a", "new", "training", "class", "How", "should", "I", "go", "about", "doing", "it", "Actually", "right", "now", "I", "only", "get", "one", "list", "with", "the", "answers", "but", "I", "d", "like", "to", "at", "least", "know", "if", "it", "will", "work", "NUMBER", "What", "be", "the", "parameters", "for", "list", "training", "How", "should", "I", "go", "about", "make", "my", "own", "training", "class", "if", "necessary", "Do", "I", "really", "need", "the", "question", "that", "go", "with", "it", "or", "can", "I", "just", "feed", "the", "answers", "Does", "the", "bot", "accept", "other", "formats", "Csv", "from", "database", "I", "ll", "see", "if", "I", "can", "transform", "my", "data", "to", "json", "if", "not", "NUMBER", "Mensagem", "Original", "De", "Mallikarjunarao", "Kosuri", "TAG", "Enviada", "em", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Para", "gunthercox", "ChatterBot", "TAG", "Cc", "Dekken", "NUMBER", "TAG", "Mention", "TAG", "Assunto", "Re", "gunthercox", "ChatterBot", "Training", "bot", "NUMBER", "Yes", "You", "could", "write", "your", "own", "class", "by", "extending", "Train", "class", "train", "method", "LINK", "L", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "Alright", "thanks", "NUMBER", "I", "ve", "followed", "the", "migration", "and", "train", "commands", "and", "have", "my", "django", "site", "run", "on", "Heroku", "but", "every", "message", "I", "give", "it", "results", "in", "hello", "NUMBER", "Here", "be", "my", "site", "live", "NUMBER", "LINK", "basin", "NUMBER", "herokuapp", "NUMBER", "com", "Here", "be", "my", "current", "source", "NUMBER", "LINK", "What", "be", "I", "miss", "to", "get", "this", "to", "train", "vkosuri", "I", "try", "How", "be", "you", "Good", "Morning", "NUMBER", "And", "different", "stuff", "NUMBER", "What", "input", "did", "you", "try", "and", "what", "responses", "did", "you", "get", "I", "m", "not", "sure", "exactly", "what", "input", "will", "work", "with", "the", "default", "training", "I", "m", "use", "NUMBER", "I", "find", "the", "source", "to", "the", "corpus", "and", "ask", "question", "from", "there", "seems", "to", "work", "NUMBER", "when", "i", "input", "i", "want", "to", "withdraw", "money", "or", "i", "want", "to", "withdraw", "NUMBER", "K", "this", "mean", "be", "withdraw", "vkosuri", "gunthercox", "Air", "boy", "Chatterbot", "uses", "LINK", "like", "this", "database", "chatterbot", "one", "database", "database", "chatterbot", "two", "database", "can", "run", "Air", "boy", "could", "you", "please", "let", "me", "why", "you", "required", "two", "DB", "file", "for", "a", "single", "instance", "and", "if", "possible", "usecase", "vkosuri", "gunthercox", "yeah", "i", "want", "to", "use", "many", "field", "NUMBER", "for", "example", "political", "economy", "and", "so", "on", "NUMBER", "i", "want", "this", "chatbot", "Switch", "freely", "in", "two", "areas", "NUMBER", "such", "as", "i", "input", "political", "it", "swith", "political", "i", "input", "economy", "it", "swith", "economy", "Air", "boy", "I", "think", "you", "have", "to", "train", "your", "bot", "with", "two", "database", "and", "make", "a", "programming", "logic", "to", "switch", "between", "databases", "based", "on", "your", "input", "NUMBER", "I", "think", "this", "link", "will", "provide", "more", "information", "LINK", "shark", "mongoengine", "gunthercox", "this", "be", "very", "well", "really", "master", "When", "i", "try", "to", "run", "the", "bot", "i", "get", "the", "below", "output", "NUMBER", "Train", "based", "on", "the", "english", "corpus", "NUMBER", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "trainer", "NUMBER", "train", "pair", "File", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "statement", "self", "NUMBER", "get_or_create", "text", "File", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "get_or_create", "statement", "self", "NUMBER", "orage", "NUMBER", "find", "statement_text", "File", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "find", "values", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement_text", "File", "Users", "yuvikakoul", "anaconda", "lib", "python", "NUMBER", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "return", "self", "NUMBER", "_get_content", "key", "File", "Users", "yuvikakoul", "anaconda", "lib", "python", "NUMBER", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_get_content", "obj", "self", "NUMBER", "read_data", "self", "NUMBER", "path", "File", "Users", "yuvikakoul", "anaconda", "lib", "python", "NUMBER", "site", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "read_data", "obj", "decode", "content", "File", "Users", "yuvikakoul", "anaconda", "lib", "python", "NUMBER", "site", "package", "jsondb", "compat", "NUMBER", "py", "line", "NUMBER", "in", "decode", "return", "json_decode", "value", "encoding", "utf", "NUMBER", "object_hook", "json_util", "NUMBER", "object_hook", "File", "Users", "yuvikakoul", "anaconda", "lib", "python", "NUMBER", "json", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "loads", "return", "cls", "encoding", "encoding", "kw", "NUMBER", "decode", "s", "File", "Users", "yuvikakoul", "anaconda", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "decode", "raise", "ValueError", "errmsg", "Extra", "data", "s", "end", "len", "s", "ValueError", "Extra", "data", "line", "NUMBER", "column", "NUMBER", "line", "NUMBER", "column", "NUMBER", "char", "NUMBER", "NUMBER", "i", "cant", "figure", "out", "what", "the", "problem", "be", "NUMBER", "I", "tried", "to", "reinstall", "the", "bot", "but", "the", "problem", "still", "remained", "NUMBER", "Please", "help", "me", "out", "here", "NUMBER", "Currently", "chatterbot", "doesn", "t", "test", "on", "anaconda", "please", "try", "with", "Python", "NUMBER", "or", "Python", "NUMBER", "variants", "If", "it", "reproduces", "please", "feel", "to", "reopen", "this", "issue", "NUMBER", "NUMBER", "raise", "ValueError", "errmsg", "Extra", "data", "s", "end", "len", "s", "NUMBER", "return", "obj", "NUMBER", "ValueError", "Extra", "data", "line", "NUMBER", "column", "NUMBER", "line", "NUMBER", "column", "NUMBER", "char", "NUMBER", "NUMBER", "By", "the", "way", "it", "appears", "to", "work", "fine", "with", "anaconda", "NUMBER", "When", "I", "opened", "the", "english", "corpa", "I", "find", "an", "extra", "at", "the", "end", "make", "the", "json", "invalid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "When", "I", "correct", "it", "it", "run", "okay", "NUMBER", "The", "error", "was", "not", "on", "Github", "but", "something", "corrupted", "else", "where", "NUMBER", "Also", "if", "you", "use", "bot", "ChatBot", "then", "you", "must", "use", "bot", "NUMBER", "set_trainer", "if", "you", "use", "chatterbot", "ChatBot", "then", "match", "it", "with", "chatterbot", "NUMBER", "set_trainer", "Don", "t", "forget", "to", "initiate", "your", "trainer", "with", "bot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "example", "bot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "bot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "slang", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "tagalog", "sanyam", "NUMBER", "I", "encountered", "same", "issue", "run", "on", "python", "NUMBER", "What", "be", "the", "location", "of", "the", "english", "corpa", "JSON", "file", "PL", "Found", "NUMBER", "JSON", "file", "in", "TAG", "python", "v", "NUMBER", "Lib", "site", "package", "chatterbot_corpus", "data", "english", "NUMBER", "Which", "file", "BlogBlocks", "ai", "NUMBER", "corpus", "NUMBER", "json", "botprofile", "NUMBER", "corpus", "NUMBER", "json", "computers", "NUMBER", "corpus", "NUMBER", "json", "conversations", "NUMBER", "corpus", "NUMBER", "json", "drugs", "NUMBER", "corpus", "NUMBER", "json", "emotion", "NUMBER", "corpus", "NUMBER", "json", "food", "NUMBER", "corpus", "NUMBER", "json", "gossip", "NUMBER", "corpus", "NUMBER", "json", "greetings", "NUMBER", "corpus", "NUMBER", "json", "history", "NUMBER", "corpus", "NUMBER", "json", "humor", "NUMBER", "corpus", "NUMBER", "json", "literature", "NUMBER", "corpus", "NUMBER", "json", "math_words", "NUMBER", "json", "money", "NUMBER", "corpus", "NUMBER", "json", "movies", "NUMBER", "corpus", "NUMBER", "json", "politics", "NUMBER", "corpus", "NUMBER", "json", "psychology", "NUMBER", "corpus", "NUMBER", "json", "science", "NUMBER", "corpus", "NUMBER", "json", "sports", "NUMBER", "corpus", "NUMBER", "json", "trivia", "NUMBER", "corpus", "NUMBER", "json", "I", "was", "on", "python", "NUMBER", "while", "I", "had", "that", "error", "later", "use", "virtualenv", "tried", "test", "on", "python", "NUMBER", "and", "it", "worked", "fine", "without", "make", "any", "change", "to", "any", "JSON", "file", "NUMBER", "I", "be", "on", "a", "NUMBER", "bit", "machine", "os", "NUMBER", "be", "away", "its", "v", "NUMBER", "On", "Thu", "Jun", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Gunther", "Cox", "TAG", "write", "lashkarpalash", "TAG", "What", "version", "of", "ChatterBot", "did", "you", "encounter", "this", "issue", "with", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Can", "someone", "explain", "me", "why", "we", "do", "not", "take", "the", "correct", "response", "from", "the", "user", "if", "the", "user", "enters", "NO", "NUMBER", "We", "must", "take", "what", "be", "the", "correct", "output", "according", "to", "the", "User", "and", "then", "feed", "the", "ChatBot", "with", "the", "actual", "output", "that", "one", "expects", "please", "enlighten", "me", "and", "if", "there", "be", "something", "wrong", "then", "kindly", "forgive", "me", "NUMBER", "p", "gabru", "md", "If", "you", "want", "make", "accurate", "response", "make", "threshold", "value", "as", "NUMBER", "for", "example", "For", "more", "information", "please", "read", "this", "documentation", "LINK", "low", "confidence", "response", "adapter", "Python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "Create", "a", "new", "instance", "of", "a", "ChatBot", "bot", "ChatBot", "Default", "Response", "Example", "Bot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ListTrainer", "Train", "the", "chat", "bot", "with", "a", "few", "responses", "bot", "NUMBER", "train", "How", "can", "I", "help", "you", "I", "want", "to", "create", "a", "chat", "bot", "Have", "you", "read", "the", "documentation", "No", "This", "should", "help", "get", "you", "start", "LINK", "Get", "a", "response", "for", "some", "unexpect", "input", "response", "bot", "NUMBER", "get_response", "How", "do", "I", "make", "an", "omelette", "print", "response", "I", "be", "saying", "why", "cannot", "we", "add", "the", "correct", "response", "to", "the", "input", "text", "NUMBER", "It", "would", "then", "be", "add", "to", "the", "data", "file", "to", "train", "the", "chatterbot", "the", "next", "time", "NUMBER", "Can", "it", "not", "be", "do", "This", "will", "also", "help", "the", "chatbot", "generate", "unique", "responses", "depending", "upon", "what", "the", "user", "wants", "gunthercox", "Directly", "update", "the", "database", "would", "mean", "to", "create", "a", "user", "specific", "training", "data", "set", "NUMBER", "What", "can", "be", "do", "be", "that", "as", "soon", "as", "the", "user", "enters", "No", "he", "she", "must", "be", "prompted", "for", "a", "reply", "as", "to", "What", "can", "be", "an", "apt", "response", "for", "QUESTION", "and", "then", "the", "correct", "response", "can", "be", "taken", "as", "input", "and", "stored", "directly", "into", "a", "database", "NUMBER", "This", "can", "be", "helpful", "and", "will", "then", "help", "generate", "a", "unique", "data", "set", "corpus", "for", "the", "chatterbot", "model", "NUMBER", "The", "more", "the", "users", "perform", "the", "test", "the", "bigger", "the", "dataset", "will", "be", "and", "better", "will", "be", "the", "responses", "It", "be", "quite", "difficult", "for", "me", "to", "understand", "the", "code", "and", "so", "i", "be", "not", "able", "to", "resolve", "this", "problem", "on", "my", "own", "and", "issue", "a", "PR", "NUMBER", "Any", "help", "would", "be", "appreciated", "Try", "out", "this", "Python", "from", "chatterbot", "import", "ChatBot", "import", "logging", "from", "chatterbot", "NUMBER", "trainers", "import", "ChatterBotCorpusTrainer", "Uncomment", "the", "following", "line", "to", "enable", "verbose", "logging", "logging", "NUMBER", "basicConfig", "level", "logging", "NUMBER", "INFO", "Create", "a", "new", "instance", "of", "a", "ChatBot", "bot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "bot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "bot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "DEFAULT_SESSION_ID", "bot", "NUMBER", "default_session", "NUMBER", "id", "def", "get_feedback", "from", "chatterbot", "NUMBER", "utils", "import", "input_function", "text", "input_function", "if", "yes", "in", "text", "NUMBER", "lower", "return", "False", "elif", "no", "in", "text", "NUMBER", "lower", "return", "True", "else", "print", "Please", "type", "either", "Yes", "or", "No", "return", "get_feedback", "print", "Type", "something", "to", "begin", "NUMBER", "The", "following", "loop", "will", "execute", "each", "time", "the", "user", "enters", "input", "while", "True", "try", "input_statement", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "statement", "response", "bot", "NUMBER", "generate_response", "input_statement", "DEFAULT_SESSION_ID", "bot", "NUMBER", "output", "NUMBER", "process_response", "response", "print", "n", "Is", "a", "coherent", "response", "to", "n", "NUMBER", "format", "response", "input_statement", "if", "get_feedback", "print", "please", "input", "the", "correct", "one", "response", "NUMBER", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "bot", "NUMBER", "learn_response", "response", "NUMBER", "input_statement", "Press", "ctrl", "c", "or", "ctrl", "d", "on", "the", "keyboard", "to", "exit", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "SQLAlchemyDatabaseAdapter", "set", "adapter_supports_queries", "False", "Or", "it", "will", "support", "base_query", "in", "the", "future", "use", "find", "NUMBER", "name", "NUMBER", "py", "xargs", "NUMBER", "to", "NUMBER", "w", "mybot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "database", "db", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "Recieved", "input", "statement", "abc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "abc", "be", "not", "a", "know", "statement", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Using", "abc", "as", "a", "close", "match", "to", "abcd", "it", "takes", "a", "long", "time", "go", "get", "best", "match", "An", "improvement", "PR", "be", "here", "LINK", "Please", "checkout", "latest", "change", "and", "experiment", "let", "me", "know", "your", "inputs", "how", "best", "we", "can", "speedup", "NUMBER", "vkosuri", "PR", "NUMBER", "be", "not", "work", "for", "me", "NUMBER", "I", "checkout", "the", "latest", "change", "use", "Mongo", "Database", "Adapter", "training", "about", "NUMBER", "lines", "NUMBER", "I", "have", "tried", "on", "other", "machines", "still", "can", "t", "get", "the", "response", "in", "NUMBER", "s", "NUMBER", "I", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "input_adapter", "NUMBER", "Recieved", "input", "statement", "abc", "I", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "input_adapter", "NUMBER", "abc", "be", "not", "a", "know", "statement", "I", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "best_match", "NUMBER", "Using", "abc", "as", "a", "close", "match", "to", "abcd", "Thanks", "for", "your", "inputs", "NUMBER", "I", "debug", "the", "program", "and", "find", "out", "that", "it", "takes", "a", "long", "time", "in", "function", "get_response_statements", "in", "mongodb", "NUMBER", "py", "NUMBER", "def", "get_response_statements", "self", "Return", "only", "statements", "that", "be", "in", "response", "to", "another", "statement", "NUMBER", "A", "statement", "must", "exist", "which", "lists", "the", "closest", "matching", "statement", "in", "the", "in_response_to", "field", "NUMBER", "Otherwise", "the", "logic", "adapter", "may", "find", "a", "closest", "matching", "statement", "that", "do", "not", "have", "a", "know", "response", "NUMBER", "response_query", "self", "NUMBER", "atements", "NUMBER", "distinct", "in_response_to", "NUMBER", "text", "_statement_query", "text", "in", "response_query", "_statement_query", "NUMBER", "update", "self", "NUMBER", "base_query", "NUMBER", "value", "statement_query", "self", "NUMBER", "atements", "NUMBER", "find", "_statement_query", "statement_objects", "for", "statement", "in", "list", "statement_query", "statement_objects", "NUMBER", "append", "self", "NUMBER", "mongo_to_object", "statement", "return", "statement_objects", "response_query", "be", "a", "huge", "list", "contains", "NUMBER", "elements", "NUMBER", "Is", "there", "a", "way", "to", "cache", "the", "data", "in", "memory", "issue", "be", "with", "response_query", "self", "NUMBER", "atements", "NUMBER", "distinct", "in_response_to", "NUMBER", "text", "Need", "to", "find", "a", "solution", "to", "generate", "distinct", "text", "and", "add", "it", "to", "a", "different", "collection", "if", "possible", "NUMBER", "fail", "with", "ubuntu", "corpus", "with", "NUMBER", "MB", "error", "when", "invoking", "the", "NUMBER", "distinct", "NUMBER", "Using", "the", "MongoDB", "aggregation", "framework", "and", "use", "disk", "also", "fail", "as", "the", "collection", "exceeds", "NUMBER", "MB", "NUMBER", "Any", "solutions", "gunthercox", "I", "have", "cached", "the", "result", "in", "memory", "so", "i", "don", "t", "need", "to", "get", "from", "MongoDB", "every", "time", "NUMBER", "This", "will", "address", "this", "NUMBER", "Can", "someone", "help", "LINK", "ci", "NUMBER", "org", "gunthercox", "ChatterBot", "jobs", "NUMBER", "Warning", "treated", "as", "error", "home", "travis", "build", "gunthercox", "ChatterBot", "docs", "sessions", "NUMBER", "rst", "NUMBER", "rst", "NUMBER", "Over", "dedent", "has", "detected", "Here", "two", "issue", "be", "there", "one", "be", "pep", "NUMBER", "issue", "Expected", "single", "line", "but", "it", "has", "multiple", "lines", "NUMBER", "test", "storage_adapter_tests", "test_sqlalchemy_adapter", "NUMBER", "py", "NUMBER", "NUMBER", "E", "NUMBER", "too", "many", "blank", "lines", "NUMBER", "NUMBER", "chatterbot", "storage", "sqlalchemy_storage", "NUMBER", "py", "NUMBER", "NUMBER", "E", "NUMBER", "too", "many", "blank", "lines", "NUMBER", "NUMBER", "chatterbot", "storage", "sqlalchemy_storage", "NUMBER", "py", "NUMBER", "NUMBER", "E", "NUMBER", "too", "many", "blank", "lines", "NUMBER", "Another", "issue", "dedent", "issue", "LINK", "doc", "NUMBER", "org", "en", "stable", "markup", "code", "NUMBER", "html", "dedent", "You", "should", "specify", "line", "number", "also", "here", "NUMBER", "literalinclude", "NUMBER", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "language", "python", "pyobject", "ChatterBotView", "NUMBER", "post", "dedent", "NUMBER", "The", "it", "should", "be", "like", "this", "NUMBER", "literalinclude", "NUMBER", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "language", "python", "pyobject", "ChatterBotView", "NUMBER", "post", "dedent", "NUMBER", "lines", "NUMBER", "NUMBER", "vkosuri", "thanks", "but", "I", "don", "t", "know", "why", "now", "build", "be", "fail", "by", "sphinx", "documentation", "in", "classes", "that", "I", "not", "touched", "NUMBER", "Not", "sure", "A", "similar", "issue", "find", "here", "also", "LINK", "doc", "sphinx", "issue", "NUMBER", "It", "s", "sphinx", "bug", "fix", "in", "this", "revision", "LINK", "doc", "sphinx", "commit", "dabd", "NUMBER", "f", "NUMBER", "eb", "NUMBER", "d", "NUMBER", "ce", "NUMBER", "ed", "NUMBER", "b", "NUMBER", "a", "NUMBER", "d", "NUMBER", "c", "NUMBER", "e", "Great", "news", "Maybe", "need", "to", "wait", "Sphinx", "v", "NUMBER", "be", "release", "NUMBER", "Hi", "gunthercox", "sorry", "I", "get", "stuck", "NUMBER", "gunthercox", "Absolutely", "feel", "free", "NUMBER", "I", "actualiced", "the", "chatterbot", "to", "new", "version", "NUMBER", "and", "give", "me", "this", "error", "in", "python", "NUMBER", "this", "code", "code", "utf", "NUMBER", "RESET", "por", "si", "te", "da", "guerra", "este", "pedazo", "de", "desgraciado", "cibernetico", "aqui", "tienes", "el", "enlace", "LINK", "from", "chatterbot", "import", "ChatBot", "new", "instance", "databse", "logic", "adapters", "bot", "ChatBot", "TeRiehBot", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "input_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "NUMBER", "database", "NUMBER", "json", "get", "response", "and", "scape", "bt", "control", "C", "while", "True", "try", "bot_input", "bot", "NUMBER", "get_response", "None", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "training", "bot", "NUMBER", "train", "Hola", "Qu\u00e9", "tal", "C\u00f3mo", "te", "va", "Te", "Rieh", "Gracias", "NUMBER", "Adios", "NUMBER", "this", "output", "error", "usr", "bin", "python", "NUMBER", "home", "marco", "Desktop", "NUMBER", "idea", "TeRiehBot", "NUMBER", "py", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Traceback", "most", "recent", "call", "last", "File", "home", "marco", "Desktop", "NUMBER", "idea", "TeRiehBot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "database", "NUMBER", "database", "NUMBER", "json", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "initialize", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "initialize", "nltk_download_corpus", "tokenizers", "punkt", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "nltk_download_corpus", "find", "resource_path", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "return", "find", "modified_name", "paths", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "return", "ZipFilePathPointer", "p", "zipentry", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "return", "init_func", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "zipfile", "OpenOnDemandZipFile", "os", "NUMBER", "path", "NUMBER", "abspath", "zipfile", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "return", "init_func", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "zipfile", "NUMBER", "ZipFile", "NUMBER", "__init__", "self", "filename", "File", "usr", "lib", "python", "NUMBER", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "_RealGetContents", "File", "usr", "lib", "python", "NUMBER", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "_RealGetContents", "raise", "BadZipfile", "File", "be", "not", "a", "zip", "file", "zipfile", "NUMBER", "BadZipfile", "File", "be", "not", "a", "zip", "file", "Hello", "I", "follow", "the", "first", "steps", "of", "documentation", "CHatterbot", "Tutorial", "and", "received", "this", "error", "Bash", "Traceback", "most", "recent", "call", "last", "File", "home", "marco", "Desktop", "NUMBER", "idea", "TeRiehBot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "database", "NUMBER", "database", "NUMBER", "json", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "validate_adapter_class", "storage_adapter", "StorageAdapter", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "validate_adapter_class", "if", "not", "issubclass", "import_module", "validate_class", "Adapter", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "utils", "module_loading", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "module", "importlib", "NUMBER", "import_module", "module_path", "File", "usr", "lib", "python", "NUMBER", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "__import__", "name", "ImportError", "No", "module", "named", "storage", "Hi", "Gunther", "Do", "not", "worry", "finally", "I", "find", "my", "error", "I", "do", "not", "use", "virtualenv", "and", "mi", "actual", "versi\u00f3n", "of", "Ubuntu", "NUMBER", "be", "a", "big", "disastre", "NUMBER", "Finally", "I", "can", "run", "the", "code", "NUMBER", "Mi", "IDE", "be", "PyCharm", "NUMBER", "Best", "regards", "MGB", "________________________________", "De", "Gunther", "Cox", "TAG", "Enviado", "lunes", "NUMBER", "de", "mayo", "de", "NUMBER", "NUMBER", "NUMBER", "Para", "gunthercox", "ChatterBot", "Cc", "Marco", "Garcia", "Baturan", "Mention", "Asunto", "Re", "gunthercox", "ChatterBot", "Error", "in", "documentation", "NUMBER", "Hi", "Marcogb", "NUMBER", "TAG", "what", "editor", "be", "you", "use", "I", "see", "that", "there", "be", "a", "NUMBER", "idea", "directory", "in", "the", "trceback", "and", "I", "be", "wondering", "if", "this", "error", "be", "occurring", "because", "of", "the", "configuration", "of", "this", "editor", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Marcogb", "NUMBER", "It", "seems", "to", "you", "have", "resolve", "your", "issue", "NUMBER", "Please", "feel", "free", "to", "reopen", "this", "issue", "if", "you", "find", "any", "issue", "Hi", "gunthercox", "I", "be", "relatively", "new", "to", "open", "source", "NUMBER", "I", "just", "wanted", "to", "validate", "my", "approach", "to", "achieving", "what", "you", "mention", "above", "NUMBER", "I", "think", "of", "creating", "a", "global", "variable", "in", "sqlalchemy_storage", "NUMBER", "py", "say", "table_created", "and", "initialising", "it", "to", "false", "then", "within", "the", "__init__", "method", "of", "SQLAlchemyDatabaseAdapter", "class", "we", "check", "whether", "table_created", "be", "false", "NUMBER", "If", "so", "we", "create", "the", "tables", "by", "calling", "create", "method", "else", "we", "don", "t", "NUMBER", "Am", "I", "right", "I", "may", "be", "completely", "wrong", "since", "I", "be", "new", "to", "this", "gunthercox", "Alright", "thanks", "NUMBER", "I", "change", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "to", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "chinese", "then", "I", "get", "the", "problem", "UnicodeDecodeError", "utf", "NUMBER", "codec", "can", "t", "decode", "byte", "NUMBER", "xd", "NUMBER", "in", "position", "NUMBER", "invalid", "continuation", "byte", "NUMBER", "Then", "all", "of", "examples", "LINK", "have", "the", "sam", "problem", "NUMBER", "How", "can", "I", "solve", "this", "problem", "D", "Anaconda", "lib", "site", "package", "IPython", "utils", "traitlets", "NUMBER", "py", "NUMBER", "UserWarning", "IPython", "NUMBER", "utils", "NUMBER", "traitlets", "has", "moved", "to", "a", "top", "level", "traitlets", "package", "NUMBER", "warn", "IPython", "NUMBER", "utils", "NUMBER", "traitlets", "has", "moved", "to", "a", "top", "level", "traitlets", "package", "NUMBER", "pydev", "debugger", "process", "NUMBER", "be", "connecting", "Connected", "to", "pydev", "debugger", "build", "NUMBER", "D", "Anaconda", "lib", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Traceback", "most", "recent", "call", "last", "File", "D", "PyCharm", "NUMBER", "helpers", "pydev", "pydevd", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "globals", "debugger", "NUMBER", "run", "setup", "file", "None", "None", "is_module", "File", "D", "PyCharm", "NUMBER", "helpers", "pydev", "pydevd", "NUMBER", "py", "line", "NUMBER", "in", "run", "pydev_imports", "NUMBER", "execfile", "file", "globals", "locals", "execute", "the", "script", "File", "D", "pycharm", "ChatterBot", "examples", "export_example", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "File", "D", "Anaconda", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "trainer", "NUMBER", "train", "pair", "File", "D", "Anaconda", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "statement", "self", "NUMBER", "get_or_create", "text", "File", "D", "Anaconda", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "get_or_create", "statement", "self", "NUMBER", "orage", "NUMBER", "find", "statement_text", "File", "D", "Anaconda", "lib", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "find", "values", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement_text", "File", "D", "Anaconda", "lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "return", "self", "NUMBER", "_get_content", "key", "File", "D", "Anaconda", "lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_get_content", "obj", "self", "NUMBER", "read_data", "self", "NUMBER", "path", "File", "D", "Anaconda", "lib", "site", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "read_data", "obj", "decode", "content", "File", "D", "Anaconda", "lib", "site", "package", "jsondb", "compat", "NUMBER", "py", "line", "NUMBER", "in", "decode", "return", "json_decode", "value", "encoding", "utf", "NUMBER", "object_hook", "json_util", "NUMBER", "object_hook", "File", "D", "Anaconda", "lib", "json", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "loads", "return", "cls", "encoding", "encoding", "kw", "NUMBER", "decode", "s", "File", "D", "Anaconda", "lib", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "decode", "obj", "end", "self", "NUMBER", "raw_decode", "s", "idx", "_w", "s", "NUMBER", "NUMBER", "end", "File", "D", "Anaconda", "lib", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "raw_decode", "obj", "end", "self", "NUMBER", "scan_once", "s", "idx", "UnicodeDecodeError", "utf", "NUMBER", "codec", "can", "t", "decode", "byte", "NUMBER", "xd", "NUMBER", "in", "position", "NUMBER", "invalid", "continuation", "byte", "This", "PR", "will", "address", "issue", "LINK", "Observed", "some", "significant", "change", "be", "observed", "with", "my", "machine", "and", "other", "previous", "PRs", "LINK", "ci", "NUMBER", "org", "gunthercox", "ChatterBot", "jobs", "NUMBER", "L", "NUMBER", "this", "execution", "took", "Ran", "NUMBER", "test", "in", "NUMBER", "s", "With", "New", "approach", "took", "Ran", "NUMBER", "test", "in", "NUMBER", "s", "yeshoujquery", "whm", "NUMBER", "if", "you", "want", "you", "could", "try", "with", "this", "patch", "let", "me", "know", "be", "there", "any", "improvement", "with", "patch", "vkosuri", "Mongodb", "NUMBER", "data", "time", "consuming", "NUMBER", "ms", "relatively", "fast", "before", "but", "can", "it", "be", "faster", "Seconds", "out", "of", "that", "kind", "Failed", "due", "to", "network", "issue", "LINK", "ci", "NUMBER", "org", "gunthercox", "ChatterBot", "jobs", "NUMBER", "L", "NUMBER", "gunthercox", "do", "you", "want", "me", "re", "run", "test", "gunthercox", "and", "yeshoujquery", "any", "further", "update", "vkosuri", "The", "latest", "change", "I", "have", "merge", "into", "my", "local", "i", "NUMBER", "NUMBER", "g", "or", "previous", "data", "structures", "and", "form", "and", "the", "corresponding", "time", "be", "NUMBER", "ms", "with", "no", "obvious", "improvement", "results", "of", "enforcement", "LINK", "NUMBER", "a", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "aebc", "NUMBER", "d", "NUMBER", "png", "yeshoujquery", "I", "think", "i", "be", "converted", "all", "loops", "into", "iterators", "for", "some", "better", "process", "NUMBER", "i", "NUMBER", "e", "NUMBER", "ms", "NUMBER", "sec", "reduced", "to", "NUMBER", "ms", "NUMBER", "sec", "the", "response", "what", "you", "be", "seeing", "be", "within", "in", "a", "sec", "NUMBER", "I", "be", "not", "familiar", "with", "other", "chatbots", "could", "you", "please", "let", "me", "know", "what", "be", "the", "idea", "time", "to", "response", "from", "chatbot", "if", "we", "trained", "NUMBER", "M", "data", "NUMBER", "ms", "doesn", "t", "feel", "like", "it", "NUMBER", "The", "robot", "I", "made", "with", "tensorflow", "reflects", "the", "speed", "of", "milliseconds", "NUMBER", "Address", "LINK", "LINK", "I", "still", "prefer", "chatterbot", "NUMBER", "vkosuri", "NUMBER", "ms", "doesn", "t", "feel", "like", "it", "NUMBER", "The", "robot", "I", "made", "with", "tensorflow", "reflects", "the", "speed", "of", "milliseconds", "NUMBER", "Address", "LINK", "LINK", "I", "still", "prefer", "chatterbot", "NUMBER", "I", "further", "nailed", "down", "the", "percentage", "of", "process", "utilization", "it", "look", "something", "like", "this", "image", "LINK", "NUMBER", "a", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "bdb", "NUMBER", "e", "NUMBER", "png", "The", "firgures", "look", "like", "this", "NUMBER", "mongodb", "NUMBER", "NUMBER", "tarining", "NUMBER", "NUMBER", "multi_adapter", "NUMBER", "NUMBER", "nltk_download", "NUMBER", "NUMBER", "chatterbot", "NUMBER", "vkosuri", "I", "checked", "the", "source", "code", "and", "I", "feel", "it", "be", "to", "take", "the", "data", "after", "the", "processing", "it", "be", "relatively", "slow", "take", "data", "and", "results", "show", "relatively", "fast", "matching", "accuracy", "there", "slow", "vkosuri", "gunthercox", "Is", "the", "chatterbot", "author", "not", "maintained", "gunthercox", "Master", "i", "be", "do", "with", "my", "change", "let", "me", "know", "any", "comments", "suggestions", "on", "this", "PR", "Any", "improvement", "thoughts", "yeshoujquery", "if", "you", "want", "give", "a", "try", "to", "test", "this", "PR", "i", "see", "some", "improvement", "from", "previous", "I", "get", "an", "error", "TypeError", "object", "of", "type", "map", "has", "no", "len", "when", "trying", "Look", "into", "failures", "It", "s", "dedent", "issue", "LINK", "ci", "NUMBER", "org", "gunthercox", "ChatterBot", "jobs", "NUMBER", "L", "NUMBER", "zhantongz", "could", "try", "now", "vkosuri", "I", "ve", "lost", "confidence", "in", "chatterbot", "and", "handle", "too", "little", "data", "gunthercox", "The", "author", "be", "not", "very", "well", "maintained", "right", "It", "works", "but", "the", "improvement", "be", "minimal", "for", "me", "NUMBER", "Hello", "there", "I", "m", "a", "programming", "begginer", "and", "be", "having", "a", "problem", "when", "run", "the", "examples", "NUMBER", "It", "s", "probably", "a", "dumb", "mistake", "I", "m", "make", "but", "I", "couldn", "t", "really", "figure", "out", "what", "be", "happening", "NUMBER", "Every", "time", "I", "run", "even", "the", "most", "basic", "example", "I", "get", "this", "message", "error", "LINK", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "f", "NUMBER", "f", "NUMBER", "ab", "NUMBER", "jpg", "I", "can", "t", "figure", "out", "why", "it", "s", "saying", "there", "s", "a", "ZipFile", "error", "NUMBER", "I", "m", "not", "even", "dealing", "with", "this", "kind", "of", "file", "NUMBER", "error", "NUMBER", "LINK", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "cdaea", "NUMBER", "f", "NUMBER", "e", "NUMBER", "jpg", "This", "happens", "with", "any", "of", "the", "examples", "NUMBER", "Do", "I", "have", "to", "do", "something", "else", "for", "this", "to", "work", "I", "ve", "already", "remove", "all", "Python", "from", "my", "computer", "and", "install", "a", "fresh", "version", "NUMBER", "I", "was", "use", "Anaconda", "because", "of", "some", "ML", "projects", "NUMBER", "Now", "I", "ve", "remove", "it", "and", "it", "still", "doesn", "t", "work", "NUMBER", "Also", "I", "ve", "test", "it", "in", "another", "computer", "with", "a", "clean", "python", "install", "and", "it", "worked", "flawlessly", "NUMBER", "Do", "you", "guys", "have", "any", "idea", "how", "to", "work", "this", "out", "Many", "thanks", "for", "the", "answer", "That", "was", "it", "NUMBER", "Also", "just", "one", "unrelated", "question", "NUMBER", "Do", "you", "check", "your", "e", "mail", "often", "I", "d", "like", "to", "talk", "more", "about", "this", "bot", "and", "make", "some", "more", "question", "NUMBER", "Or", "should", "I", "just", "make", "more", "issue", "I", "don", "t", "know", "how", "this", "works", "very", "well", "NUMBER", "Alright", "NUMBER", "Thanks", "again", "Could", "you", "check", "if", "my", "e", "mails", "didn", "t", "go", "to", "your", "spambox", "My", "email", "be", "lucksbp", "gmail", "NUMBER", "com", "NUMBER", "I", "ll", "close", "the", "issue", "now", "NUMBER", "hi", "How", "to", "configure", "the", "MongoDB", "storage", "adapter", "of", "django_chatterbot", "Hoping", "to", "give", "me", "a", "sample", "you", "can", "read", "chatterbot", "doc", "Here", "be", "an", "example", "about", "LINK", "_mongo_example", "NUMBER", "py", "Documentation", "available", "here", "LINK", "mongo", "database", "adapter", "Thank", "you", "for", "your", "answer", "ganthercox", "You", "know", "me", "I", "hope", "support", "MongoDB", "but", "Django", "be", "not", "good", "for", "MONGO", "it", "s", "ideal", "to", "separate", "databases", "NUMBER", "Hi", "find", "some", "typo", "in", "the", "docs", "as", "well", "as", "in", "multi_adapter", "NUMBER", "py", "NUMBER", "Fixed", "them", "so", "please", "have", "a", "look", "NUMBER", "Hello", "I", "have", "two", "beginner", "question", "NUMBER", "I", "still", "not", "get", "the", "learning", "part", "of", "chatterbot", "although", "I", "go", "through", "the", "documentation", "NUMBER", "When", "I", "talk", "to", "the", "chatterbot", "I", "understand", "that", "it", "save", "what", "I", "write", "in", "the", "database", "but", "how", "it", "will", "affect", "the", "future", "response", "what", "I", "see", "its", "remain", "same", "NUMBER", "Can", "you", "give", "me", "example", "of", "this", "part", "NUMBER", "NUMBER", "If", "I", "want", "to", "access", "chatterbot", "I", "mean", "to", "talk", "to", "the", "bot", "from", "the", "smartphone", "be", "there", "a", "simple", "way", "to", "do", "that", "NUMBER", "If", "you", "have", "a", "tutorial", "of", "example", "if", "will", "be", "great", "Thanks", "a", "lot", "NUMBER", "This", "bot", "be", "very", "old", "chatterbot", "version", "I", "think", "this", "like", "what", "your", "be", "looking", "LINK", "live", "example", "NUMBER", "herokuapp", "NUMBER", "com", "Thanks", "for", "your", "reply", "but", "what", "do", "you", "main", "by", "very", "old", "chatterbot", "NUMBER", "I", "be", "use", "the", "latest", "one", "NUMBER", "on", "my", "PC", "NUMBER", "Just", "to", "clarify", "my", "concern", "NUMBER", "How", "chatterbot", "will", "learn", "from", "my", "conversation", "inputs", "and", "will", "it", "affect", "the", "future", "response", "My", "understating", "be", "as", "below", "conversation", "Me", "whats", "my", "name", "Chatterbot", "Mike", "Me", "My", "name", "be", "John", "Chatterbot", "NUMBER", "Me", "whats", "my", "name", "Chatterbot", "John", "Is", "it", "like", "that", "if", "not", "be", "it", "possible", "Any", "support", "here", "NUMBER", "Exactly", "NUMBER", "be", "also", "having", "same", "kind", "of", "doubt", "here", "NUMBER", "What", "i", "have", "observed", "be", "the", "bot", "will", "store", "all", "the", "user", "inputs", "NUMBER", "but", "it", "doesn", "t", "map", "with", "exact", "question", "answer", "NUMBER", "When", "u", "talk", "to", "the", "bot", "in", "future", "NUMBER", "It", "will", "try", "to", "match", "the", "user", "given", "inputs", "too", "NUMBER", "If", "it", "matches", "it", "will", "return", "as", "a", "response", "NUMBER", "But", "those", "responses", "be", "always", "not", "correct", "NUMBER", "May", "be", "u", "should", "configure", "in", "such", "a", "way", "that", "the", "bot", "should", "ask", "Doest", "that", "helps", "you", "if", "the", "user", "says", "yes", "NUMBER", "then", "you", "can", "update", "the", "dataset", "accordingly", "for", "future", "answer", "NUMBER", "I", "guess", "this", "kind", "of", "workaround", "only", "currently", "possible", "with", "chatterbot", "NUMBER", "Because", "i", "dont", "think", "such", "deep", "learning", "be", "applied", "to", "chatterbot", "NUMBER", "Please", "correct", "me", "if", "be", "wrong", "on", "this", "understanding", "NUMBER", "gunthercox", "gunthercox", "vkosuri", "This", "LINK", "sporting", "yeah", "i", "find", "it", "but", "now", "i", "want", "to", "write", "my", "filter", "to", "realize", "search", "result", "this", "confidence", "be", "NUMBER", "This", "might", "help", "you", "LINK", "_confidence", "NUMBER", "py", "L", "NUMBER", "More", "information", "LINK", "low", "confidence", "response", "adapter", "i", "mean", "that", "when", "i", "input", "hello", "they", "can", "response", "and", "only", "response", "and", "response", "can", "cycle", "for", "examaple", "hello", "hi", "hello", "hello", "hello", "hi", "hello", "hello", "i", "use", "mongodb", "database", "vkosuri", "Then", "you", "have", "to", "use", "Specific", "Response", "Adapter", "LINK", "specific", "response", "adapter", "I", "stored", "in", "the", "mongo", "database", "and", "a", "lot", "of", "data", "a", "question", "has", "more", "than", "one", "answer", "I", "want", "to", "ask", "a", "question", "and", "then", "answer", "the", "matched", "the", "answer", "machine", "with", "each", "answer", "in", "my", "answer", "vkosuri", "my", "english", "not", "well", "hope", "you", "can", "understand", "Could", "try", "like", "this", "The", "logic", "will", "work", "what", "you", "be", "ask", "other", "response", "you", "will", "get", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "NUMBER", "Let", "me", "know", "if", "you", "need", "any", "help", "NUMBER", "Python", "Create", "a", "new", "instance", "of", "a", "ChatBot", "bot", "ChatBot", "Default", "Response", "Example", "Bot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "i", "use", "mongodb", "database", "in", "the", "NUMBER", "corpus", "NUMBER", "json", "file", "i", "hava", "this", "data", "\u5927\u6d77", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "\u5927\u6d77", "\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77", "i", "write", "filter", "in", "my", "NUMBER", "py", "this", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "when", "i", "first", "input", "\u5927\u6d77", "chatterbot", "first", "response", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "when", "i", "second", "input", "\u5927\u6d77", "chatterbot", "second", "response", "\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77", "when", "i", "third", "input", "\u5927\u6d77", "chatterbot", "third", "response", "neither", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "nor", "\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77", "when", "i", "not", "write", "filter", "in", "my", "NUMBER", "py", "for", "this", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "when", "i", "first", "input", "\u5927\u6d77", "chatterbot", "first", "response", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "when", "i", "second", "input", "\u5927\u6d77", "chatterbot", "second", "response", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "when", "i", "third", "input", "\u5927\u6d77", "chatterbot", "third", "response", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "NUMBER", "always", "reponse", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "now", "i", "want", "chatterbot", "to", "reply", "one", "of", "both", "\u84dd\u84dd\u7684\u4e00\u671b\u65e0\u9645", "and", "\u597d\u60f3\u966a\u4f60\u53bb\u770b\u6d77", "when", "i", "input", "\u5927\u6d77", "and", "No", "matter", "how", "many", "times", "i", "input", "\u5927\u6d77", "vkosuri", "Does", "it", "support", "flow", "based", "dialog", "conversation", "Am", "also", "facing", "the", "same", "problem", "NUMBER", "if", "be", "right", "NUMBER", "Lets", "take", "below", "scenario", "NUMBER", "JSON", "right", "okay", "i", "have", "problem", "with", "eye", "which", "side", "right", "oh", "NUMBER", "ats", "bad", "NUMBER", "What", "happened", "to", "right", "eye", "NUMBER", "conversation", "Me", "I", "have", "problem", "with", "eye", "NUMBER", "bot", "which", "side", "Me", "right", "Bot", "Okay", "In", "the", "above", "scenario", "NUMBER", "if", "be", "replying", "with", "right", "means", "I", "want", "the", "bot", "to", "reply", "oh", "NUMBER", "ats", "bad", "NUMBER", "What", "happened", "to", "right", "eye", "NUMBER", "NUMBER", "but", "instead", "of", "that", "it", "will", "reply", "okay", "NUMBER", "because", "of", "the", "best", "match", "NUMBER", "kenyeung", "NUMBER", "Please", "correct", "me", "if", "be", "wrong", "NUMBER", "gunthercox", "Am", "facing", "this", "situation", "NUMBER", "Thanks", "in", "advance", "NUMBER", "I", "m", "closing", "this", "ticket", "as", "a", "duplicate", "of", "NUMBER", "Feel", "free", "to", "click", "the", "subscribe", "button", "on", "that", "page", "to", "follow", "the", "progress", "for", "when", "it", "be", "resolve", "NUMBER", "While", "I", "use", "the", "django", "python", "manage", "NUMBER", "py", "runserver", "it", "always", "tell", "me", "that", "there", "be", "a", "InvaliadAdapterTypeException", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "must", "be", "a", "subclass", "of", "StorageAdatpter", "NUMBER", "Here", "be", "the", "setting", "of", "my", "bot", "Python", "self", "NUMBER", "ciri", "ChatBot", "Ciri", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapter", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "VariableInputTypeAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "chat_ciri_db", "FakerGit", "which", "version", "chatterbot", "be", "you", "use", "To", "know", "current", "version", "user", "python", "m", "chatterbot", "version", "vkosuri", "It", "be", "NUMBER", "Without", "use", "Django", "my", "program", "be", "function", "well", "NUMBER", "By", "the", "way", "the", "version", "of", "Django", "be", "NUMBER", "have", "simple", "method", "do", "not", "write", "chatterbot", "NUMBER", "train", "Hi", "there", "Hello", "chatterbot", "NUMBER", "train", "Greetings", "Hello", "gunthercox", "vkosuri", "Air", "boy", "i", "didn", "t", "understand", "could", "you", "please", "elaborate", "your", "question", "when", "i", "input", "Hi", "there", "robot", "response", "Hello", "or", "OK", "i", "know", "i", "write", "a", "NUMBER", "corpus", "NUMBER", "json", "file", "fellow", "conversations", "i", "love", "you", "me", "too", "i", "love", "you", "i", "love", "you", "too", "i", "input", "one", "request", "robot", "response", "me", "too", "or", "i", "love", "you", "too", "if", "i", "have", "ten", "response", "i", "hava", "to", "repeat", "ten", "times", "if", "i", "write", "ten", "times", "this", "i", "love", "you", "it", "be", "redundancy", "so", "i", "want", "to", "find", "a", "simple", "write", "way", "vkosuri", "Yep", "I", "will", "change", "the", "default", "behavior", "of", "database", "creation", "where", "if", "unspecified", "database", "file", "will", "always", "create", "a", "sqlite", "memory", "a", "database", "NUMBER", "While", "i", "trained", "on", "ChatterbotCorpusTrainer", "and", "ListTrainer", "the", "statement", "and", "Response", "both", "be", "reversed", "NUMBER", "Previous", "issue", "LINK", "To", "reproduce", "this", "issue", "Python", "CHATTERBOT_TRAIN", "name", "Django", "Chatter", "Bot", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ListTrainer", "training_data", "how", "to", "train", "your", "bot", "python", "managem", "NUMBER", "py", "train", "Will", "it", "work", "Not", "sure", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "DjangoStorageAdapter", "django_app_name", "abot", "use_django_models", "True", "image", "LINK", "NUMBER", "e", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "png", "i", "think", "you", "train", "only", "NUMBER", "message", "they", "random", "This", "happening", "due", "to", "foreign", "key", "mapping", "at", "L", "NUMBER", "LINK", "_chatterbot", "models", "NUMBER", "py", "L", "NUMBER", "Python", "statement", "models", "NUMBER", "ForeignKey", "Statement", "related_name", "in_response", "response", "models", "NUMBER", "ForeignKey", "Statement", "related_name", "responses", "gunthercox", "Master", "Do", "you", "have", "any", "idea", "how", "to", "solve", "this", "Hi", "gunthercox", "any", "news", "I", "get", "same", "problem", "NUMBER", "So", "I", "inspected", "trainer", "code", "and", "I", "ve", "find", "the", "solution", "NUMBER", "The", "problem", "was", "in", "trainers", "NUMBER", "py", "class", "ListTrainer", "Trainer", "Allows", "a", "chat", "bot", "to", "be", "trained", "use", "a", "list", "of", "strings", "where", "the", "list", "represents", "a", "conversation", "NUMBER", "def", "train", "self", "conversation", "Train", "the", "chat", "bot", "based", "on", "the", "provide", "list", "of", "statements", "that", "represents", "a", "single", "conversation", "NUMBER", "statement_history", "for", "text", "in", "conversation", "statement", "self", "NUMBER", "get_or_create", "text", "if", "statement_history", "statement", "NUMBER", "add_response", "Response", "statement_history", "NUMBER", "NUMBER", "text", "statement_history", "NUMBER", "append", "statement", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "This", "code", "puts", "previous", "statement", "as", "a", "response", "of", "current", "statement", "NUMBER", "So", "you", "should", "traverse", "the", "conversation", "in", "reversed", "order", "like", "this", "NUMBER", "for", "text", "in", "reversed", "conversation", "This", "should", "work", "fine", "NUMBER", "image", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "e", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "NUMBER", "eabb", "NUMBER", "png", "vkosuri", "Thanks", "NUMBER", "I", "made", "pull", "request", "NUMBER", "This", "PR", "fix", "some", "typo", "NUMBER", "Is", "it", "possible", "to", "calculate", "frequency", "and", "Density", "for", "a", "given", "statement", "and", "response", "I", "be", "not", "sure", "this", "will", "benefit", "to", "chatterbot", "My", "idea", "be", "to", "identify", "frequent", "words", "in", "all", "the", "statements", "so", "that", "i", "can", "guess", "my", "users", "be", "write", "sentence", "or", "statements", "in", "such", "a", "way", "i", "can", "update", "my", "corpus", "based", "on", "those", "words", "I", "find", "we", "could", "find", "frequency", "through", "NLTK", "module", "Python", "words", "nltk", "NUMBER", "tokenize", "NUMBER", "word_tokenize", "p", "fdist", "FreqDist", "words", "More", "information", "LINK", "be", "the", "advantages", "of", "studying", "words", "by", "their", "frequency", "NUMBER", "Hi", "I", "be", "creating", "a", "chatbot", "application", "use", "Django", "and", "Chatterbot", "and", "setting", "the", "basic", "static", "data", "in", "the", "training_data", "parameter", "Python", "CHATTERBOT", "name", "ChatterBot", "Example", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ListTrainer", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "training_data", "How", "be", "you", "I", "be", "good", "NUMBER", "That", "be", "good", "to", "hear", "NUMBER", "Thank", "you", "You", "be", "welcome", "NUMBER", "django_app_name", "django_chatterbot", "When", "i", "run", "the", "application", "in", "browser", "not", "able", "to", "get", "the", "response", "which", "i", "be", "setting", "in", "training_data", "NUMBER", "Can", "someone", "please", "let", "me", "know", "how", "to", "set", "the", "data", "here", "The", "reason", "you", "were", "not", "get", "response", "from", "chatbot", "because", "you", "haven", "t", "trained", "your", "bot", "NUMBER", "Training", "bot", "from", "Django", "interface", "be", "different", "form", "regular", "chatterbot", "NUMBER", "Bash", "python", "manage", "NUMBER", "py", "train", "More", "information", "about", "Django", "training", "available", "here", "LINK", "vkosuri", "Thank", "you", "so", "much", "for", "the", "response", "The", "response", "be", "not", "as", "expected", "NUMBER", "Meaning", "it", "be", "responding", "with", "hello", "all", "the", "time", "NUMBER", "Even", "after", "run", "the", "train", "command", "Now", "i", "be", "training", "the", "python", "as", "mention", "python", "manage", "NUMBER", "py", "train", "NUMBER", "The", "code", "mention", "below", "NUMBER", "Python", "CHATTERBOT", "name", "Tech", "Support", "Bot", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ListTrainer", "training_data", "Hello", "hi", "there", "Also", "Can", "anyone", "please", "let", "me", "know", "be", "there", "any", "specific", "set", "response", "we", "can", "get", "for", "particular", "response", "for", "example", "Python", "training_data", "how", "be", "you", "I", "be", "doing", "great", "Hello", "hi", "there", "Something", "like", "the", "above", "Thanks", "in", "advance", "Is", "this", "what", "you", "want", "LINK", "specific", "response", "adapter", "Training", "with", "the", "default", "settings", "NUMBER", "py", "doesn", "t", "seem", "to", "do", "anything", "for", "me", "as", "well", "NUMBER", "Still", "results", "in", "Hello", "responses", "NUMBER", "gunthercox", "hi", "i", "run", "the", "python", "manage", "NUMBER", "py", "train", "but", "the", "response", "be", "not", "what", "i", "want", "NUMBER", "did", "this", "bug", "had", "fix", "use", "sql", "databases", "with", "django", "seems", "to", "be", "resulting", "in", "wrong", "training", "i", "NUMBER", "e", "responses", "mapping", "to", "wrong", "input", "statements", "ahmedshoaib", "be", "you", "suggesting", "that", "use", "a", "different", "database", "like", "mongodb", "could", "potentially", "solve", "this", "problem", "gabru", "md", "yes", "mongodb", "works", "perfectly", "fine", "with", "the", "django_app", "I", "NUMBER", "e", "with", "use_django_models", "LINK", "False", "NUMBER", "There", "seems", "to", "be", "a", "problem", "in", "storing", "training", "data", "in", "relational", "dbs", "NUMBER", "i", "have", "the", "same", "problem", "iam", "wondering", "how", "to", "use", "mongodb", "with", "the", "django", "saraalosaid", "If", "you", "want", "to", "use", "MongoDB", "and", "Django", "then", "you", "will", "need", "to", "configure", "configure", "Django", "s", "storage", "backend", "to", "use", "one", "the", "be", "build", "for", "MongDB", "NUMBER", "I", "highly", "recommend", "Django", "MongoDB", "Engine", "for", "this", "LINK", "mongodb", "engine", "NUMBER", "readthedocs", "NUMBER", "io", "en", "latest", "Hi", "having", "this", "issue", "since", "NUMBER", "days", "now", "NUMBER", "I", "followed", "the", "documentation", "and", "created", "a", "database", "stored", "the", "conversations", "in", "my", "collections", "NUMBER", "Now", "when", "I", "run", "it", "I", "dont", "get", "any", "response", "when", "I", "use", "the", "get_response", "Method", "NUMBER", "and", "the", "program", "just", "get", "stuck", "over", "that", "line", "NUMBER", "bot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "ChatBotdb", "database_uri", "mongodb", "NUMBER", "NUMBER", "try", "print", "here", "response", "bot", "NUMBER", "get_response", "text", "print", "response", "except", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "it", "do", "enter", "the", "try", "block", "and", "prints", "here", "and", "gets", "stuck", "after", "that", "Yes", "mongoDB", "be", "run", "NUMBER", "I", "be", "run", "this", "on", "pycharm", "also", "when", "I", "use", "None", "I", "be", "able", "to", "give", "input", "in", "my", "console", "and", "it", "replies", "correctly", "NUMBER", "but", "what", "if", "I", "just", "want", "a", "reply", "from", "the", "get", "request", "which", "I", "be", "sending", "NUMBER", "Ex", "LINK", "so", "it", "should", "reply", "to", "this", "hi", "I", "be", "sending", "it", "in", "text", "and", "trying", "to", "get", "a", "response", "use", "bot", "NUMBER", "get_response", "text", "This", "use", "to", "work", "fine", "while", "use", "json", "adapter", "but", "doesnt", "seem", "to", "work", "in", "MongoDB", "approach", "and", "I", "will", "be", "use", "mongo", "DB", "as", "I", "have", "a", "huge", "data", "set", "on", "which", "I", "have", "to", "train", "the", "bot", "gunthercox", "Can", "you", "help", "me", "with", "this", "Hello", "I", "think", "ListTrainer", "be", "broken", "again", "NUMBER", "See", "the", "error", "message", "from", "chatterbot", "NUMBER", "trainers", "import", "ListTrainer", "conversation", "Ol\u00e1", "Ol\u00e1", "chatbot", "NUMBER", "set_trainer", "ListTrainer", "chatbot", "NUMBER", "train", "conversation", "Traceback", "most", "recent", "call", "last", "File", "C", "Users", "Weslley", "Desktop", "treino", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "chatbot", "NUMBER", "set_trainer", "ListTrainer", "NameError", "name", "chatbot", "be", "not", "defined", "Finished", "in", "NUMBER", "s", "with", "exit", "code", "NUMBER", "shell_cmd", "python", "u", "C", "Users", "Weslley", "Desktop", "treino", "NUMBER", "py", "dir", "C", "Users", "Weslley", "Desktop", "path", "C", "ProgramData", "Oracle", "Java", "javapath", "C", "Windows", "system", "NUMBER", "C", "Windows", "C", "Windows", "System", "NUMBER", "Wbem", "C", "Windows", "System", "NUMBER", "WindowsPowerShell", "v", "NUMBER", "C", "Program", "Files", "x", "NUMBER", "NVIDIA", "Corporation", "PhysX", "Common", "C", "Users", "Weslley", "AppData", "Local", "Programs", "Python", "Python", "NUMBER", "Scripts", "C", "Users", "Weslley", "AppData", "Local", "Programs", "Python", "Python", "NUMBER", "C", "Users", "Weslley", "AppData", "Local", "Microsoft", "WindowsApps", "Can", "someone", "help", "me", "with", "this", "error", "I", "followed", "instructions", "from", "the", "documentation", "but", "I", "can", "t", "seem", "to", "get", "the", "trainer", "to", "work", "NUMBER", "I", "have", "a", "settings", "NUMBER", "py", "file", "in", "the", "same", "directory", "as", "my", "app", "NUMBER", "py", "with", "the", "correct", "twitter", "keys", "NUMBER", "image", "LINK", "NUMBER", "f", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "bd", "NUMBER", "db", "NUMBER", "e", "NUMBER", "d", "NUMBER", "png", "image", "LINK", "NUMBER", "f", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "e", "NUMBER", "fb", "NUMBER", "ae", "NUMBER", "png", "Observed", "same", "issue", "while", "run", "test", "Currently", "the", "django_storage", "adapter", "tightly", "coupled", "with", "django_chatterbot", "NUMBER", "By", "introduce", "this", "fix", "others", "can", "reuse", "storage", "adapter", "NUMBER", "gunthercox", "please", "provide", "your", "comments", "suggestions", "on", "this", "PR", "NUMBER", "gunthercox", "Master", "any", "plan", "to", "release", "chatterbot", "minor", "version", "this", "week", "gunthercox", "Any", "update", "Is", "there", "a", "discusgroup", "or", "forum", "where", "there", "can", "be", "talked", "about", "chatterbot", "I", "m", "having", "problem", "importing", "custom", "corpus", "in", "the", "Djange", "example", "on", "heroku", "NUMBER", "And", "I", "don", "t", "want", "to", "bother", "the", "Issues", "everytime", "NUMBER", "Would", "be", "nice", "and", "good", "to", "create", "a", "community", "NUMBER", "Stackoverflow", "but", "there", "s", "a", "barrier", "crossing", "for", "beginners", "NUMBER", "They", "policy", "of", "comments", "posting", "etc", "NUMBER", "Google", "Groups", "page", "Openface", "has", "one", "and", "I", "get", "answers", "pretty", "quick", "though", "not", "a", "solution", "and", "there", "s", "a", "better", "chance", "of", "solutions", "with", "stackoverflow", "NUMBER", "do", "to", "the", "same", "policy", "Hitchhike", "on", "a", "pythonforum", "or", "in", "my", "case", "a", "django", "forum", "NUMBER", "I", "would", "like", "to", "contribute", "but", "my", "knowledge", "isn", "t", "sufficient", "to", "act", "as", "a", "helpful", "wizard", "in", "chatterbotfora", "community", "NUMBER", "I", "would", "mostly", "ask", "the", "question", "myself", "NUMBER", "But", "this", "wil", "be", "in", "a", "long", "run", "helpful", "for", "other", "beginners", "at", "python", "django", "etc", "NUMBER", "and", "this", "in", "use", "chatterbot", "NUMBER", "gunthercox", "Master", "Can", "i", "ask", "them", "LINK", "here", "Well", "I", "have", "some", "reputation", "Raja", "Simon", "LINK", "simon", "tab", "profile", "NUMBER", "Shall", "I", "create", "tag", "in", "SO", "NUMBER", "Can", "t", "wait", "to", "bring", "this", "community", "to", "SO", "NUMBER", "So", "amazing", "NUMBER", "Thanks", "NUMBER", "I", "created", "it", "NUMBER", "I", "m", "editing", "as", "much", "question", "now", "to", "include", "chatterbot", "tags", "NUMBER", "LINK", "Hey", "awesome", "that", "this", "be", "becoming", "something", "NUMBER", "Would", "you", "mind", "ask", "a", "thourough", "explanation", "to", "use", "a", "own", "corpuses", "and", "activating", "them", "on", "the", "django", "platform", "image", "LINK", "NUMBER", "cf", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "d", "NUMBER", "a", "NUMBER", "eecda", "NUMBER", "png", "Help", "Me", "Please", "To", "Solving", "This", "Error", "The", "reason", "you", "were", "seeing", "due", "to", "default", "JsonStorageAdapter", "NUMBER", "It", "s", "warning", "only", "if", "you", "want", "avoid", "this", "warning", "please", "change", "storage", "adapter", "NUMBER", "For", "more", "info", "please", "read", "this", "documentation", "LINK", "Getting", "Traceback", "most", "recent", "call", "last", "File", "home", "usr", "Chatterbot", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "orage", "import", "Storageadapter", "Valueerror", "Attempted", "relative", "import", "in", "non", "package", "I", "be", "a", "bit", "unsecure", "what", "be", "cause", "this", "and", "i", "dont", "seem", "to", "find", "anything", "here", "You", "can", "t", "execute", "chatterbot", "cloned", "file", "NUMBER", "Before", "that", "you", "have", "to", "install", "chatterbot", "by", "use", "pip", "install", "upgrade", "chatterbot", "Recommend", "use", "Python", "Virtual", "Environment", "vkosuri", "I", "have", "tried", "that", "too", "but", "just", "gets", "this", "error", "File", "home", "usr", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "orage", "import", "Storageadapter", "Valueerror", "attempted", "relative", "import", "in", "non", "package", "seems", "like", "python", "had", "corrupted", "file", "on", "that", "computer", "NUMBER", "suddenly", "realized", "that", "nothing", "with", "python", "was", "work", "NUMBER", "Tried", "to", "copy", "the", "code", "to", "my", "main", "pc", "and", "it", "worked", "like", "a", "charm", "NUMBER", "Great", "job", "Hi", "this", "project", "be", "very", "elgant", "and", "clean", "NUMBER", "I", "like", "this", "style", "NUMBER", "I", "have", "NUMBER", "issue", "consider", "about", "the", "design", "about", "this", "framework", "I", "find", "that", "once", "a", "statement", "store", "into", "database", "like", "mongo", "I", "can", "not", "replace", "it", "that", "means", "if", "previous", "reply", "be", "wrong", "by", "bot", "I", "can", "not", "fix", "that", "maybe", "there", "be", "some", "flag", "allow", "me", "to", "override", "that", "Another", "things", "be", "about", "the", "reply", "the", "bot", "learned", "one", "question", "and", "an", "according", "answer", "So", "if", "I", "asked", "that", "question", "twice", "the", "answer", "would", "be", "same", "forever", "and", "never", "change", "this", "be", "not", "good", "even", "not", "intelligent", "than", "I", "use", "an", "random", "NUMBER", "choice", "to", "choose", "random", "condidate", "replies", "NUMBER", "Wish", "get", "discuss", "about", "there", "puzzels", "if", "they", "be", "already", "solve", "could", "u", "please", "teach", "me", "how", "to", "implement", "in", "chatterbot", "many", "thanks", "pal", "NUMBER", "i", "met", "the", "same", "problem", "as", "you", "NUMBER", "once", "a", "problem", "s", "answer", "be", "set", "it", "s", "can", "t", "be", "change", "NUMBER", "My", "English", "already", "bad", "NUMBER", "Puzzles", "sounds", "like", "mystery", "but", "I", "want", "to", "express", "meaning", "be", "just", "question", "NUMBER", "gunthercox", "Master", "Is", "there", "any", "reason", "behind", "that", "test", "be", "fail", "on", "only", "Python", "NUMBER", "NUMBER", "s", "nosetests", "with", "coverage", "cover", "package", "chatterbot", "NUMBER", "F", "NUMBER", "S", "NUMBER", "S", "NUMBER", "S", "NUMBER", "S", "NUMBER", "FAIL", "Test", "that", "we", "be", "able", "to", "get", "a", "list", "of", "only", "statements", "Traceback", "most", "recent", "call", "last", "File", "home", "travis", "build", "gunthercox", "ChatterBot", "test", "storage_adapter_tests", "test_json_file_storage_adapter", "NUMBER", "py", "line", "NUMBER", "in", "test_get_response_statements", "self", "NUMBER", "assertEqual", "len", "responses", "NUMBER", "AssertionError", "NUMBER", "NUMBER", "This", "be", "the", "very", "first", "release", "of", "Sqlalchemy", "adapter", "that", "have", "SQLite", "as", "default", "implementation", "remains", "in", "alpha", "NUMBER", "Notes", "Tables", "may", "change", "and", "will", "so", "save", "your", "training", "data", "NUMBER", "There", "no", "data", "migration", "yet", "not", "for", "alpha", "NUMBER", "Performance", "test", "not", "do", "yet", "NUMBER", "Tests", "use", "others", "databases", "not", "finished", "NUMBER", "Documentation", "on", "the", "way", "any", "question", "go", "to", "NUMBER", "or", "chat", "on", "gitter", "NUMBER", "faster", "with", "mention", "Thanks", "Davi", "Finally", "Hi", "vkosuri", "Indeed", "NUMBER", "there", "be", "any", "way", "to", "see", "exemple", "use", "sqlalchemy", "AttributeError", "module", "chatterbot", "NUMBER", "orage", "has", "no", "attribute", "SQLAlchemyDatabaseAdapter", "so", "any", "suggestions", "or", "i", "must", "copy", "directly", "from", "github", "Thanks", "gunthercox", "but", "some", "error", "sqlalchemy", "NUMBER", "exc", "NUMBER", "OperationalError", "sqlite", "NUMBER", "OperationalError", "no", "such", "table", "StatementTable", "gunthercox", "addelll", "Sorry", "I", "ll", "update", "documentation", "asap", "NUMBER", "gunthercox", "davizucon", "thanks", "for", "the", "greate", "work", "i", "need", "one", "full", "exemple", "use", "Sqlalchemy", "adapter", "because", "i", "have", "some", "error", "after", "second", "release", "in", "heroku", "like", "_Arguments", "columns", "text", "text_search", "be", "not", "unique", "_", "I", "tried", "to", "fix", "that", "but", "NUMBER", "When", "I", "run", "the", "chatterbot", "on", "my", "pc", "server", "NUMBER", "c", "NUMBER", "GB", "it", "responses", "very", "slow", "about", "serverl", "seconds", "NUMBER", "I", "find", "that", "the", "chatterbot", "process", "only", "use", "one", "core", "although", "my", "pc", "server", "has", "NUMBER", "cores", "NUMBER", "Why", "Have", "there", "some", "parameter", "I", "should", "ajust", "Help", "PS", "I", "find", "every", "time", "when", "i", "get", "repsponse", "from", "a", "chatterbot", "one", "core", "of", "CPU", "s", "usage", "be", "NUMBER", "NUMBER", "I", "think", "it", "be", "alse", "very", "strange", "NUMBER", "gunthercox", "thank", "you", "NUMBER", "I", "have", "solve", "this", "problem", "just", "by", "change", "the", "storage", "adpater", "to", "mongodb", "NUMBER", "Official", "example", "use", "the", "Raspberry", "Pi", "NUMBER", "Nice", "thing", "be", "that", "as", "it", "uses", "a", "NUMBER", "party", "wake", "word", "engine", "we", "don", "t", "have", "to", "stick", "to", "activating", "the", "bot", "with", "Alexa", "NUMBER", "LINK", "avs", "sample", "app", "wiki", "Raspberry", "Pi", "Oh", "hell", "LINK", "Hi", "monokal", "maybe", "I", "m", "wrong", "but", "I", "think", "its", "a", "kind", "of", "Logic", "Adapter", "right", "You", "be", "right", "for", "avs", "should", "be", "IO", "adapter", "lex", "be", "a", "full", "chatbot", "and", "depends", "which", "service", "will", "be", "use", "NUMBER", "When", "trying", "to", "train", "from", "and", "use", "the", "Ubuntu", "Dialog", "Corpus", "with", "the", "MongoDB", "Storage", "Adapter", "I", "m", "hitting", "the", "following", "exception", "NUMBER", "The", "code", "be", "pretty", "much", "identical", "to", "the", "Ubuntu", "Corpus", "example", "in", "this", "repo", "NUMBER", "I", "believe", "the", "issue", "be", "relate", "MongoDB", "not", "be", "able", "to", "handle", "strings", "over", "NUMBER", "characters", "which", "there", "be", "in", "the", "Ubuntu", "Corpus", "NUMBER", "So", "this", "should", "either", "be", "somehow", "resolve", "or", "support", "drop", "as", "it", "s", "currently", "broken", "NUMBER", "python", "Traceback", "most", "recent", "call", "last", "File", "NUMBER", "InfraBot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "main", "File", "NUMBER", "InfraBot", "NUMBER", "py", "line", "NUMBER", "in", "main", "bot", "args", "File", "NUMBER", "InfraBot", "NUMBER", "py", "line", "NUMBER", "in", "__call__", "r", "self", "NUMBER", "bot", "NUMBER", "get_response", "be", "you", "there", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "statement", "response", "self", "NUMBER", "generate_response", "input_statement", "session_id", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "generate_response", "response", "self", "NUMBER", "logic", "NUMBER", "process", "input_statement", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "multi_adapter", "NUMBER", "py", "line", "NUMBER", "in", "process", "output", "adapter", "NUMBER", "process", "statement", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "best_match", "NUMBER", "py", "line", "NUMBER", "in", "process", "closest_match", "self", "NUMBER", "get", "input_statement", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "best_match", "NUMBER", "py", "line", "NUMBER", "in", "get", "statement_list", "self", "NUMBER", "chatbot", "NUMBER", "orage", "NUMBER", "get_response_statements", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "get_response_statements", "response_query", "self", "NUMBER", "atements", "NUMBER", "distinct", "in_response_to", "NUMBER", "text", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "distinct", "collation", "collation", "values", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "_command", "collation", "collation", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "pymongo", "pool", "NUMBER", "py", "line", "NUMBER", "in", "command", "collation", "collation", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "pymongo", "network", "NUMBER", "py", "line", "NUMBER", "in", "command", "parse_write_concern_error", "parse_write_concern_error", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "pymongo", "helpers", "NUMBER", "py", "line", "NUMBER", "in", "_check_command_response", "raise", "OperationFailure", "msg", "errmsg", "code", "response", "pymongo", "NUMBER", "error", "NUMBER", "OperationFailure", "distinct", "too", "big", "NUMBER", "mb", "cap", "I", "get", "around", "the", "NUMBER", "mb", "cap", "by", "pulling", "up", "mongo", "shell", "and", "entering", "db", "NUMBER", "collection", "NUMBER", "allowDiskUse", "true", "but", "NUMBER", "then", "you", "hit", "issue", "such", "as", "this", "in", "mongo", "after", "entering", "an", "input", "and", "while", "waiting", "for", "a", "response", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "COMMAND", "conn", "NUMBER", "warning", "log", "line", "attempted", "NUMBER", "kB", "over", "max", "size", "NUMBER", "kB", "haven", "t", "figured", "out", "a", "workaround", "for", "that", "but", "as", "of", "right", "now", "NUMBER", "It", "s", "looking", "like", "that", "corpus", "be", "just", "wayyyy", "too", "large", "tried", "db", "NUMBER", "collection", "NUMBER", "allowDiskUse", "true", "on", "mongo", "shell", "NUMBER", "Does", "not", "work", "in", "Mongo", "NUMBER", "be", "a", "mongo", "restart", "needed", "Even", "when", "mongodb", "aggregation", "framework", "be", "use", "NUMBER", "MongoDB", "restricts", "the", "BSON", "document", "to", "be", "not", "more", "than", "NUMBER", "MB", "so", "fail", "NUMBER", "db", "NUMBER", "atements", "NUMBER", "aggregate", "group", "_id", "null", "distinctText", "addToSet", "in_response_to", "NUMBER", "text", "out", "aggResults", "allowDiskUse", "true", "More", "info", "about", "this", "issue", "LINK", "NUMBER", "focusedCommentId", "NUMBER", "page", "com", "NUMBER", "atlassian", "NUMBER", "jira", "NUMBER", "plugin", "NUMBER", "system", "NUMBER", "issuetabpanels", "comment", "tabpanel", "comment", "NUMBER", "Running", "in", "to", "this", "as", "well", "now", "NUMBER", "So", "its", "simply", "not", "possible", "to", "train", "on", "the", "Ubuntu", "corpus", "vkosuri", "peterel", "I", "never", "tried", "i", "ll", "give", "a", "try", "by", "next", "week", "peterl", "tried", "training", "on", "Ubuntu", "Corpus", "In", "NUMBER", "hours", "about", "NUMBER", "of", "the", "corpus", "be", "indexed", "NUMBER", "currently", "the", "bottle", "neck", "be", "the", "NUMBER", "MB", "issue", "be", "discussed", "around", "use", "MongoDB", "Adapter", "NUMBER", "telkomops", "Then", "we", "be", "in", "the", "same", "situation", "NUMBER", "I", "had", "it", "run", "for", "around", "NUMBER", "hours", "and", "now", "run", "in", "to", "the", "NUMBER", "MB", "issue", "NUMBER", "How", "did", "you", "proceed", "Im", "thinking", "of", "scrapping", "MongoDB", "all", "together", "and", "try", "either", "some", "sql", "version", "or", "maybe", "some", "other", "chatbot", "framework", "NUMBER", "The", "jsonAdapter", "be", "simply", "much", "too", "slow", "to", "use", "in", "my", "testrunts", "NUMBER", "IMO", "ChatterBot", "would", "really", "benefit", "from", "a", "rewrite", "to", "integrate", "Keras", "TensorFlow", "as", "the", "Machine", "Deep", "Learning", "backend", "NUMBER", "It", "s", "not", "a", "difficult", "implementation", "now", "that", "Keras", "has", "be", "re", "write", "by", "Google", "complete", "with", "high", "level", "Python", "APIs", "NUMBER", "It", "provides", "powerful", "well", "maintained", "Machine", "Learning", "models", "algorithms", "which", "have", "numerous", "NLP", "chatbot", "examples", "on", "the", "web", "will", "handle", "training", "storage", "provides", "a", "web", "UI", "to", "dig", "in", "to", "the", "bot", "s", "Neural", "Network", "training", "progress", "etc", "and", "far", "more", "NUMBER", "I", "d", "be", "very", "happy", "to", "contribute", "should", "the", "proposal", "be", "accepted", "as", "I", "was", "thinking", "of", "migrating", "my", "project", "away", "from", "ChatterBot", "to", "Keras", "anyways", "but", "I", "d", "much", "rather", "make", "a", "good", "thing", "great", "here", "NUMBER", "Some", "useful", "links", "LINK", "as", "a", "simplified", "interface", "to", "tensorflow", "tutorial", "NUMBER", "html", "LINK", "LINK", "SJDEOWLHYVo", "LINK", "NUMBER", "DknTFbcGVM", "LINK", "PLQVvvaa", "NUMBER", "QuDeETZEOy", "NUMBER", "VdocT", "NUMBER", "TOjfSA", "NUMBER", "a", "Opened", "proposal", "under", "LINK", "NUMBER", "if", "you", "re", "interested", "NUMBER", "NUMBER", "vkosuri", "Did", "you", "find", "the", "time", "to", "give", "this", "a", "try", "and", "reproduce", "the", "issue", "vkosuri", "Hmm", "not", "sure", "I", "follow", "NUMBER", "This", "issue", "be", "regard", "use", "the", "Ubuntu", "corpus", "and", "training", "it", "for", "a", "long", "time", "only", "to", "get", "a", "pymongo", "NUMBER", "error", "NUMBER", "OperationFailure", "distinct", "too", "big", "NUMBER", "mb", "cap", "error", "NUMBER", "In", "my", "case", "I", "trained", "with", "the", "Ubuntu", "corpus", "for", "a", "couple", "of", "hours", "and", "all", "was", "well", "it", "gave", "decent", "answers", "NUMBER", "Then", "I", "left", "if", "over", "night", "and", "when", "I", "tried", "a", "new", "conversation", "I", "hit", "this", "NUMBER", "mb", "cap", "error", "NUMBER", "Or", "be", "your", "comment", "referring", "to", "that", "it", "matter", "which", "version", "of", "the", "Ubuntu", "corpus", "one", "trains", "with", "the", "build", "in", "one", "or", "this", "offline", "one", "you", "be", "referring", "to", "peterel", "i", "gave", "up", "on", "the", "ubuntu", "corpus", "as", "my", "ideal", "scenarios", "was", "to", "train", "with", "my", "internal", "chat", "conversations", "and", "hit", "upon", "the", "bug", "NUMBER", "kind", "of", "giving", "up", "on", "chatterbot", "for", "now", "NUMBER", "telkomops", "I", "gave", "up", "on", "the", "Ubuntu", "corpus", "as", "well", "NUMBER", "Using", "the", "build", "in", "one", "and", "hope", "users", "will", "fill", "up", "som", "proper", "responses", "NUMBER", "Are", "you", "going", "with", "Keras", "or", "Tensorflow", "instead", "Or", "be", "there", "any", "other", "similar", "framework", "as", "Chatterbot", "youd", "recommend", "telkomops", "peterel", "The", "Ubuntu", "corpus", "be", "a", "massive", "data", "set", "NUMBER", "I", "think", "it", "may", "have", "be", "a", "mistake", "for", "me", "to", "add", "documentation", "and", "training", "support", "for", "it", "NUMBER", "ChatterBot", "isn", "t", "ready", "to", "handle", "that", "much", "data", "yet", "NUMBER", "I", "m", "work", "to", "improve", "this", "but", "the", "change", "required", "to", "optimize", "these", "queries", "on", "large", "data", "sets", "be", "still", "a", "few", "release", "away", "NUMBER", "gunthercox", "Many", "thanks", "for", "your", "efforts", "NUMBER", "Chatterbot", "be", "very", "cool", "I", "do", "agree", "though", "about", "the", "Ubuntu", "corpus", "NUMBER", "Since", "it", "wont", "work", "with", "Chatterbot", "atm", "its", "probably", "better", "to", "remove", "it", "from", "the", "docs", "or", "at", "least", "make", "folks", "aware", "that", "this", "wont", "work", "now", "NUMBER", "The", "alternative", "be", "like", "for", "me", "to", "spend", "days", "on", "training", "and", "then", "realizing", "that", "it", "doesnt", "work", "NUMBER", "Again", "thanks", "for", "your", "efforts", "vkosuri", "Hmm", "if", "the", "Ubuntu", "Corpus", "cant", "be", "use", "with", "Chatterbot", "I", "think", "its", "better", "not", "to", "include", "it", "at", "all", "or", "at", "least", "show", "a", "disclaimer", "NUMBER", "Otherwise", "youll", "end", "up", "with", "folks", "spending", "days", "in", "training", "only", "to", "see", "it", "crash", "NUMBER", "which", "be", "not", "so", "good", "The", "maximum", "BSON", "document", "size", "be", "NUMBER", "megabytes", "NUMBER", "There", "be", "lots", "of", "stuff", "on", "this", "and", "workarounds", "on", "stack", "overflow", "NUMBER", "Most", "recommend", "use", "GridFS", "NUMBER", "Which", "would", "mean", "switching", "from", "NUMBER", "distinct", "to", "NUMBER", "aggregate", "as", "mention", "above", "in", "this", "thread", "too", "NUMBER", "This", "doesn", "t", "work", "but", "it", "would", "probably", "look", "something", "like", "this", "mongodb", "NUMBER", "py", "def", "get_response_statements", "self", "Return", "only", "statements", "that", "be", "in", "response", "to", "another", "statement", "NUMBER", "A", "statement", "must", "exist", "which", "lists", "the", "closest", "matching", "statement", "in", "the", "in_response_to", "field", "NUMBER", "Otherwise", "the", "logic", "adapter", "may", "find", "a", "closest", "matching", "statement", "that", "do", "not", "have", "a", "know", "response", "NUMBER", "response_query", "self", "NUMBER", "atements", "NUMBER", "distinct", "in_response_to", "NUMBER", "text", "current", "response_query", "self", "NUMBER", "atements", "NUMBER", "aggregate", "group", "_id", "in_response_to", "NUMBER", "text", "_statement_query", "text", "in", "response_query", "current", "in", "list", "response_query", "works", "with", "aggregate", "_statement_query", "NUMBER", "update", "self", "NUMBER", "base_query", "NUMBER", "value", "statement_query", "self", "NUMBER", "atements", "NUMBER", "find", "_statement_query", "statement_objects", "for", "statement", "in", "list", "statement_query", "statement_objects", "NUMBER", "append", "self", "NUMBER", "mongo_to_object", "statement", "return", "statement_objects", "LINK", "LINK", "I", "know", "it", "doesn", "t", "really", "work", "THAT", "well", "right", "now", "but", "once", "one", "of", "us", "trace", "the", "origin", "we", "will", "fix", "it", "NUMBER", "The", "only", "bug", "Most", "statements", "simply", "aren", "t", "saved", "NUMBER", "But", "then", "again", "I", "m", "not", "the", "best", "code", "interpreter", "myself", "NUMBER", "P", "That", "seems", "like", "a", "good", "idea", "thanks", "NUMBER", "So", "use", "the", "example", "from", "ChatterBot", "examples", "ubuntu_corpus_training_example", "NUMBER", "py", "it", "seems", "that", "the", "ubuntu_dialogs", "NUMBER", "tgz", "archive", "be", "downloaded", "and", "extracted", "successfully", "however", "the", "bot", "doesn", "t", "seem", "to", "be", "picking", "responses", "from", "it", "after", "NUMBER", "train", "and", "also", "seems", "to", "want", "to", "extract", "the", "archive", "on", "every", "run", "NUMBER", "I", "ve", "tried", "completely", "remove", "the", "data", "directory", "and", "re", "training", "but", "nothing", "I", "ve", "find", "seems", "to", "help", "NUMBER", "See", "below", "for", "details", "ubuntu_corpus_training_example", "NUMBER", "py", "with", "comments", "remove", "python", "from", "chatterbot", "import", "ChatBot", "import", "logging", "logging", "NUMBER", "basicConfig", "level", "logging", "NUMBER", "INFO", "chatbot", "ChatBot", "Example", "Bot", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "UbuntuCorpusTrainer", "chatbot", "NUMBER", "train", "response", "chatbot", "NUMBER", "get_response", "How", "be", "you", "doing", "today", "print", "response", "The", "contents", "of", "the", "data", "directory", "sh", "drwxr", "xr", "x", "NUMBER", "dmi", "NUMBER", "NUMBER", "NUMBER", "B", "NUMBER", "Apr", "NUMBER", "NUMBER", "NUMBER", "drwxr", "xr", "x", "NUMBER", "dmi", "NUMBER", "NUMBER", "NUMBER", "B", "NUMBER", "Apr", "NUMBER", "NUMBER", "NUMBER", "drwx", "NUMBER", "dmi", "NUMBER", "NUMBER", "NUMBER", "K", "NUMBER", "Apr", "NUMBER", "dialogs", "rw", "r", "r", "NUMBER", "dmi", "NUMBER", "NUMBER", "NUMBER", "M", "NUMBER", "Apr", "NUMBER", "NUMBER", "ubuntu_dialogs", "NUMBER", "tgz", "Execution", "sh", "Extracting", "dialogs", "NUMBER", "NUMBER", "tsv", "Extracting", "dialogs", "NUMBER", "NUMBER", "tsv", "Extracting", "dialogs", "NUMBER", "NUMBER", "tsv", "Extracting", "dialogs", "NUMBER", "NUMBER", "tsv", "Extracting", "dialogs", "NUMBER", "NUMBER", "tsv", "NUMBER", "etc", "NUMBER", "INFO", "chatterbot", "NUMBER", "trainers", "File", "extraction", "complete", "INFO", "chatterbot", "NUMBER", "adapters", "Recieved", "input", "statement", "How", "be", "you", "doing", "today", "INFO", "chatterbot", "NUMBER", "adapters", "How", "be", "you", "doing", "today", "be", "a", "know", "statement", "INFO", "chatterbot", "NUMBER", "adapters", "No", "statements", "have", "know", "responses", "NUMBER", "Choosing", "a", "random", "response", "to", "return", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "Using", "How", "be", "you", "doing", "today", "as", "a", "close", "match", "to", "How", "be", "you", "doing", "today", "INFO", "chatterbot", "NUMBER", "adapters", "No", "response", "to", "How", "be", "you", "doing", "today", "find", "NUMBER", "Selecting", "a", "random", "response", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "BestMatch", "selected", "How", "be", "you", "doing", "today", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "NoKnowledgeAdapter", "selected", "How", "be", "you", "doing", "today", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "How", "be", "you", "doing", "today", "Having", "dug", "a", "little", "deeper", "it", "seems", "the", "issue", "be", "that", "the", "code", "in", "LINK", "L", "NUMBER", "be", "expecting", "to", "find", "the", "Ubuntu", "Dialogs", "in", "data", "ubuntu_dialogs", "however", "the", "extraction", "process", "places", "them", "in", "data", "dialogs", "NUMBER", "On", "renaming", "the", "directory", "things", "seem", "to", "be", "get", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "InfraBot", "DEBUG", "Loaded", "config", "general", "name", "DELboy", "training", "readonly", "True", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "UbuntuCorpusTrainer", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "InfraBot", "INFO", "Training", "DELboy", "NUMBER", "thats", "not", "use", "NUMBER", "d", "glasses", "NUMBER", "i", "have", "not", "seen", "his", "second", "line", "NUMBER", "crank", "all", "the", "sliders", "up", "NUMBER", "or", "buy", "a", "preamp", "NUMBER", "all", "up", "and", "i", "dont", "want", "to", "use", "a", "preamp", "on", "my", "eeepc", "NUMBER", "i", "m", "pretty", "sure", "the", "speaker", "in", "an", "eepc", "will", "be", "fairly", "poor", "NUMBER", "on", "windows", "its", "much", "loader", "then", "on", "ubuntu", "NUMBER", "so", "i", "think", "its", "a", "software", "problem", "NUMBER", "try", "a", "different", "driver", "or", "different", "driver", "settings", "NUMBER", "same", "deal", "yours", "be", "quicker", "NUMBER", "i", "think", "so", "NUMBER", "NUMBER", "etc", "NUMBER", "Hey", "guys", "NUMBER", "just", "curious", "but", "have", "you", "be", "able", "to", "train", "on", "the", "data", "NUMBER", "After", "applying", "this", "patch", "NUMBER", "and", "another", "one", "regard", "utf", "NUMBER", "data", "format", "only", "applicable", "in", "py", "NUMBER", "I", "was", "able", "to", "start", "the", "training", "process", "NUMBER", "This", "was", "very", "slow", "NUMBER", "and", "after", "several", "minutes", "it", "appears", "that", "only", "processed", "a", "couple", "meg", "of", "training", "data", "NUMBER", "Additionally", "what", "be", "the", "time", "complexity", "for", "a", "search", "NUMBER", "at", "first", "glance", "it", "would", "appear", "that", "we", "do", "a", "search", "over", "the", "entire", "space", "for", "a", "best", "match", "Thanks", "for", "the", "quick", "response", "NUMBER", "So", "I", "would", "be", "right", "in", "assuming", "that", "it", "be", "currently", "unfeasible", "to", "experiment", "with", "the", "entire", "ubuntu", "corpus", "Thanks", "again", "I", "have", "some", "ideas", "on", "how", "you", "would", "accomplish", "this", "NUMBER", "If", "you", "be", "interested", "I", "will", "compose", "them", "more", "and", "share", "them", "with", "you", "Also", "it", "be", "pretty", "cool", "that", "your", "project", "be", "mention", "in", "the", "upcoming", "book", "LINK", "language", "processing", "in", "action", "Which", "be", "how", "I", "find", "it", "to", "begin", "with", "Thanks", "again", "NUMBER", "G", "memory", "usage", "be", "not", "particularly", "large", "but", "after", "the", "training", "data", "reflects", "a", "very", "slow", "data", "only", "NUMBER", "M", "did", "not", "use", "mongodb", "to", "answer", "gunthercox", "Can", "you", "give", "me", "a", "way", "to", "write", "it", "If", "I", "use", "the", "database", "in", "the", "case", "of", "trouble", "to", "help", "me", "stick", "to", "your", "implementation", "code", "I", "learn", "about", "my", "learning", "chatterbot", "for", "a", "long", "time", "has", "be", "reflected", "very", "slowly", "on", "the", "very", "distress", "gunthercox", "I", "use", "the", "mongodb", "training", "NUMBER", "data", "query", "once", "the", "time", "be", "NUMBER", "ms", "what", "way", "can", "be", "faster", "This", "speed", "really", "a", "bit", "unacceptable", "NUMBER", "seeking", "answers", "chatbotEnglish", "ChatBot", "english", "mongodb", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "chatterbot", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "preprocessors", "chatterbot", "NUMBER", "preprocessors", "NUMBER", "clean_whitespace", "chatterbot", "NUMBER", "preprocessors", "NUMBER", "unescape_html", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "VariableInputTypeAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "OutputAdapter", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "database", "chatterbot", "database", "read_only", "False", "for", "statement", "in", "statement_list", "confidence", "self", "NUMBER", "compare_statements", "input_statement", "statement", "if", "confidence", "closest_match", "NUMBER", "confidence", "statement", "NUMBER", "confidence", "confidence", "closest_match", "statement", "There", "has", "be", "a", "cycle", "in", "which", "all", "cause", "special", "slow", "query", "data", "fairly", "fast", "here", "loop", "matching", "accuracy", "can", "be", "maintained", "by", "the", "author", "gunthercox", "for", "statement", "in", "statement_list", "confidence", "self", "NUMBER", "compare_statements", "input_statement", "statement", "if", "confidence", "closest_match", "NUMBER", "confidence", "statement", "NUMBER", "confidence", "confidence", "closest_match", "statement", "There", "has", "be", "a", "cycle", "in", "which", "all", "cause", "special", "slow", "query", "data", "fairly", "fast", "here", "loop", "matching", "accuracy", "can", "be", "maintained", "by", "the", "author", "yeshoujquery", "NUMBER", "I", "have", "the", "same", "problem", "do", "you", "fix", "it", "whm", "NUMBER", "Did", "not", "solve", "the", "problem", "the", "author", "seems", "to", "be", "unable", "to", "solve", "the", "problem", "should", "be", "the", "framework", "itself", "I", "look", "at", "the", "conclusion", "of", "the", "source", "code", "thanks", "\u53d1\u81ea\u6211\u7684", "iPhone", "\u5728", "NUMBER", "\u5e74", "NUMBER", "\u6708", "NUMBER", "\u65e5", "NUMBER", "NUMBER", "yeshoujquery", "TAG", "\u5199\u9053", "whm", "NUMBER", "Did", "not", "solve", "the", "problem", "the", "author", "seems", "to", "be", "unable", "to", "solve", "the", "problem", "should", "be", "the", "framework", "itself", "I", "look", "at", "the", "conclusion", "of", "the", "source", "code", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "yeshoujquery", "I", "ll", "try", "to", "reproduce", "this", "problem", "on", "my", "machine", "next", "week", "will", "get", "it", "back", "soon", "NUMBER", "vkosuri", "That", "s", "better", "waiting", "for", "your", "good", "news", "can", "you", "let", "me", "know", "sure", "vkosuri", "Thanks", "very", "much", "vkosuri", "Upload", "it", "or", "can", "you", "give", "me", "a", "copy", "vkosuri", "Where", "be", "the", "code", "chatterbot", "seems", "to", "be", "particularly", "slow", "to", "solve", "gunthercox", "This", "problem", "can", "be", "solve", "use", "the", "mongodb", "also", "useless", "or", "very", "slow", "The", "problem", "be", "rather", "simple", "to", "detect", "NUMBER", "Comparing", "more", "than", "NUMBER", "responses", "with", "lexical", "comparison", "makes", "it", "super", "slow", "NUMBER", "Nothing", "to", "do", "with", "MongoDB", "NUMBER", "A", "solution", "can", "be", "compute", "the", "word", "vectors", "for", "each", "statement", "to", "determine", "the", "vector", "for", "the", "whole", "phrase", "NUMBER", "Rinse", "and", "repeat", "for", "the", "user", "input", "NUMBER", "The", "only", "thing", "we", "then", "having", "to", "do", "be", "query", "the", "vectors", "in", "MongoDB", "on", "closest", "similarity", "Cosine", "Similarity", "NUMBER", "This", "will", "also", "be", "more", "accurate", "than", "lexical", "comparison", "NUMBER", "Drawback", "Loading", "in", "a", "good", "and", "accurate", "word", "embeddings", "model", "into", "memory", "will", "take", "time", "NUMBER", "Some", "tips", "on", "where", "to", "start", "Google", "for", "word", "NUMBER", "vec", "doc", "NUMBER", "vec", "glove", "fast", "text", "NUMBER", "vkosuri", "Mongodb", "NUMBER", "data", "time", "consuming", "NUMBER", "ms", "relatively", "fast", "before", "but", "can", "it", "be", "faster", "Seconds", "out", "of", "that", "kind", "anthdm", "You", "say", "the", "solution", "I", "don", "t", "choose", "chatterbot", "then", "I", "directly", "choose", "tensorflow", "now", "want", "to", "use", "chatterbot", "yeshoujquery", "be", "it", "possible", "share", "your", "train", "data", "I", "will", "debug", "further", "more", "on", "your", "train", "data", "vkosuri", "Some", "Chinese", "data", "in", "fact", "as", "long", "as", "the", "order", "of", "magnitude", "will", "be", "slow", "Do", "you", "need", "Or", "chatterbot", "how", "many", "orders", "of", "maximum", "support", "yeshoujquery", "I", "took", "English", "corpus", "LINK", "corpus", "tree", "master", "chatterbot_corpus", "data", "english", "made", "it", "as", "NUMBER", "MB", "data", "start", "debugging", "will", "update", "more", "on", "this", "issue", "NUMBER", "vkosuri", "Well", "thank", "you", "very", "much", "NUMBER", "The", "amount", "of", "data", "will", "be", "slow", "and", "no", "way", "out", "vkosuri", "Thank", "you", "very", "much", "NUMBER", "I", "m", "waiting", "for", "your", "good", "news", "gunthercox", "Trained", "NUMBER", "MB", "data", "with", "some", "minor", "change", "observed", "fallowing", "stats", "on", "machine", "NUMBER", "i", "NUMBER", "NUMBER", "GB", "TAG", "venv", "vkosuri", "vkosuri", "ChatterBot", "python", "terminal_mongo_example", "NUMBER", "py", "Started", "Trainig", "Trainig", "completed", "TAG", "NUMBER", "seconds", "TAG", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "Recieved", "input", "statement", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "be", "a", "know", "statement", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Using", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "as", "a", "close", "match", "to", "Is", "it", "cramped", "in", "the", "computer", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "response_selection", "get_first_response", "Selecting", "first", "response", "from", "list", "of", "NUMBER", "options", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Response", "selected", "NUMBER", "Using", "No", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "BestMatch", "selected", "No", "NUMBER", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "NoKnowledgeAdapter", "selected", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "No", "NUMBER", "TAG", "NUMBER", "seconds", "TAG", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "Recieved", "input", "statement", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "be", "a", "know", "statement", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Using", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "as", "a", "close", "match", "to", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "No", "response", "to", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "find", "NUMBER", "Selecting", "a", "random", "response", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "BestMatch", "selected", "Do", "you", "feel", "NUMBER", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "NoKnowledgeAdapter", "selected", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "chatterbot", "learn_response", "Adding", "I", "enjoy", "raspberry", "ice", "cream", "NUMBER", "as", "a", "response", "to", "No", "NUMBER", "Do", "you", "feel", "NUMBER", "TAG", "NUMBER", "seconds", "TAG", "TAG", "yeshoujquery", "Did", "you", "observed", "any", "improvement", "with", "new", "change", "Fixed", "a", "typo", "in", "the", "code", "snippet", "gunthercox", "Master", "be", "there", "any", "reason", "behind", "the", "test", "be", "fail", "Thank", "you", "Master", "Created", "a", "pull", "request", "for", "master", "LINK", "Thanks", "Regards", "Anurag", "Sharma", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "NUMBER", "NUMBER", "Mallikarjunarao", "Kosuri", "TAG", "Thank", "you", "Master", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "hello", "at", "all", "i", "followed", "examples", "and", "tutorials", "for", "test", "chatterbot", "but", "i", "have", "a", "bug", "or", "there", "be", "something", "i", "don", "t", "understand", "i", "use", "the", "terminal", "example", "and", "i", "have", "to", "wait", "until", "NUMBER", "NUMBER", "seconds", "before", "the", "answers", "come", "from", "chatterbot", "NUMBER", "the", "conversation", "be", "not", "normal", "NUMBER", "my", "config", "be", "win", "NUMBER", "NUMBER", "core", "I", "NUMBER", "NUMBER", "gb", "of", "ram", "NUMBER", "To", "SSD", "NUMBER", "be", "there", "here", "a", "complete", "project", "to", "test", "it", "I", "tired", "on", "my", "machine", "it", "be", "quite", "fast", "and", "work", "fine", "as", "expected", "NUMBER", "Some", "times", "it", "might", "delay", "use", "JsonStorageAdapter", "because", "of", "if", "it", "be", "very", "huge", "size", "around", "NUMBER", "MB", "NUMBER", "Could", "you", "try", "un", "comment", "this", "line", "LINK", "_example", "NUMBER", "py", "L", "NUMBER", "NUMBER", "It", "will", "verbose", "more", "information", "on", "terminal", "how", "your", "request", "and", "response", "be", "selecting", "use", "different", "logic", "adapters", "NUMBER", "For", "example", "Bash", "Type", "something", "to", "begin", "NUMBER", "hello", "INFO", "chatterbot", "NUMBER", "adapters", "Recieved", "input", "statement", "hello", "INFO", "chatterbot", "NUMBER", "adapters", "hello", "be", "not", "a", "know", "statement", "INFO", "chatterbot", "NUMBER", "adapters", "Not", "processing", "the", "statement", "use", "TAG", "INFO", "chatterbot", "NUMBER", "adapters", "TAG", "selected", "The", "current", "time", "be", "NUMBER", "NUMBER", "PM", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "Not", "processing", "the", "statement", "use", "TAG", "INFO", "chatterbot", "NUMBER", "adapters", "TAG", "selected", "hello", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "hello", "how", "be", "you", "INFO", "chatterbot", "NUMBER", "adapters", "Recieved", "input", "statement", "how", "be", "you", "INFO", "chatterbot", "NUMBER", "adapters", "how", "be", "you", "be", "not", "a", "know", "statement", "INFO", "chatterbot", "NUMBER", "adapters", "Not", "processing", "the", "statement", "use", "TAG", "INFO", "chatterbot", "NUMBER", "adapters", "TAG", "selected", "The", "current", "time", "be", "NUMBER", "NUMBER", "PM", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "No", "statements", "have", "know", "responses", "NUMBER", "Choosing", "a", "random", "response", "to", "return", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "Using", "how", "be", "you", "as", "a", "close", "match", "to", "hello", "INFO", "chatterbot", "NUMBER", "adapters", "No", "response", "to", "hello", "find", "NUMBER", "Selecting", "a", "random", "response", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "TAG", "selected", "hello", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "TAG", "selected", "how", "be", "you", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "chatterbot", "Adding", "how", "be", "you", "as", "a", "response", "to", "hello", "The", "current", "time", "be", "NUMBER", "NUMBER", "PM", "thank", "s", "for", "reply", "i", "un", "commented", "the", "line", "you", "asked", "then", "you", "have", "below", "Type", "something", "to", "begin", "NUMBER", "hello", "INFO", "chatterbot", "NUMBER", "adapters", "Recieved", "input", "statement", "hello", "INFO", "chatterbot", "NUMBER", "adapters", "hello", "be", "a", "know", "statement", "INFO", "chatterbot", "NUMBER", "adapters", "Not", "processing", "the", "statement", "use", "MathematicalEvaluation", "INFO", "chatterbot", "NUMBER", "adapters", "TimeLogicAdapter", "selected", "The", "current", "time", "be", "NUMBER", "NUMBER", "PM", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "Using", "hello", "as", "a", "close", "match", "to", "hello", "INFO", "chatterbot", "NUMBER", "adapters", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "INFO", "chatterbot", "NUMBER", "response_selection", "Selecting", "first", "response", "from", "list", "of", "NUMBER", "options", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "Response", "selected", "NUMBER", "Using", "Greetings", "INFO", "chatterbot", "NUMBER", "adapters", "BestMatch", "selected", "Greetings", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "NoKnowledgeAdapter", "selected", "hello", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "Greetings", "i", "have", "to", "wait", "NUMBER", "seconds", "to", "have", "this", "answer", "NUMBER", "not", "glad", "about", "that", "as", "you", "can", "expect", "the", "size", "of", "database", "after", "training", "be", "NUMBER", "k", "not", "huge", "at", "all", "how", "many", "seconds", "you", "be", "waiting", "for", "I", "don", "t", "see", "any", "issue", "with", "my", "machine", "NUMBER", "Bash", "helo", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "Recieved", "input", "statement", "helo", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "helo", "be", "not", "a", "know", "statement", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "Not", "processing", "the", "statement", "use", "MathematicalEvaluation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "TimeLogicAdapter", "selected", "The", "current", "time", "be", "NUMBER", "NUMBER", "PM", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Using", "helo", "as", "a", "close", "match", "to", "hello", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "response_selection", "get_first_response", "Selecting", "first", "response", "from", "list", "of", "NUMBER", "options", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Response", "selected", "NUMBER", "Using", "how", "be", "you", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "BestMatch", "selected", "how", "be", "you", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "NoKnowledgeAdapter", "selected", "helo", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "how", "be", "you", "You", "could", "add", "logger", "formatter", "after", "line", "number", "NUMBER", "to", "know", "exact", "time", "you", "have", "be", "waited", "python", "logging", "NUMBER", "basicConfig", "format", "asctime", "s", "NUMBER", "msecs", "NUMBER", "d", "levelname", "s", "module", "s", "funcName", "s", "message", "s", "datefmt", "Y", "m", "d", "H", "M", "S", "level", "logging", "NUMBER", "INFO", "you", "ll", "see", "now", "with", "the", "new", "infos", "provide", "Type", "something", "to", "begin", "NUMBER", "hello", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "Recieved", "input", "statement", "hello", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "hello", "be", "a", "know", "statement", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "Not", "processing", "the", "statement", "use", "MathematicalEvaluation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "TimeLogicAdapter", "selected", "The", "current", "time", "be", "NUMBER", "NUMBER", "PM", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Using", "hello", "as", "a", "close", "match", "to", "Hello", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "response_selection", "get_first_response", "Selecting", "first", "response", "from", "list", "of", "NUMBER", "options", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Response", "selected", "NUMBER", "Using", "Greetings", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "BestMatch", "selected", "Greetings", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "NoKnowledgeAdapter", "selected", "hello", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "Greetings", "Any", "new", "ideas", "with", "that", "Or", "do", "you", "have", "an", "example", "to", "provide", "more", "infos", "for", "debug", "this", "and", "in", "the", "same", "time", "i", "tried", "the", "twitter", "example", "and", "i", "had", "an", "another", "bug", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "from", "twitter", "import", "Api", "as", "TwitterApi", "ImportError", "cannot", "import", "name", "Api", "did", "you", "experienced", "the", "same", "bug", "last", "news", "i", "uninstalled", "my", "python", "NUMBER", "but", "work", "with", "others", "projects", "and", "install", "python", "NUMBER", "clean", "install", "i", "have", "both", "the", "sames", "issue", "NUMBER", "if", "someone", "can", "explain", "me", "clearly", "what", "happens", "another", "news", "test", "with", "Linux", "too", "and", "i", "have", "same", "issue", "with", "the", "twitter", "error", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "init", "from", "twitter", "import", "Api", "as", "TwitterApi", "ImportError", "cannot", "import", "name", "Api", "So", "windows", "be", "not", "faulty", "because", "Linux", "has", "the", "same", "issue", "NUMBER", "Anyone", "have", "this", "bug", "For", "slowness", "issue", "try", "this", "example", "Python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "import", "logging", "Uncomment", "the", "following", "line", "to", "enable", "verbose", "logging", "logging", "NUMBER", "basicConfig", "format", "asctime", "s", "NUMBER", "msecs", "NUMBER", "d", "levelname", "s", "module", "s", "funcName", "s", "message", "s", "datefmt", "Y", "m", "d", "H", "M", "S", "level", "logging", "NUMBER", "INFO", "Create", "a", "new", "instance", "of", "a", "ChatBot", "bot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "NUMBER", "database", "NUMBER", "db", "print", "Type", "something", "to", "begin", "NUMBER", "The", "following", "loop", "will", "execute", "each", "time", "the", "user", "enters", "input", "while", "True", "try", "We", "pass", "None", "to", "this", "method", "because", "the", "parameter", "be", "not", "use", "by", "the", "TerminalAdapter", "bot_input", "bot", "NUMBER", "get_response", "None", "Press", "ctrl", "c", "or", "ctrl", "d", "on", "the", "keyboard", "to", "exit", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "For", "twitter", "issue", "try", "to", "install", "twitter", "Bash", "pip", "install", "upgrade", "twitter", "good", "morning", "i", "followed", "what", "you", "said", "vkosuri", "and", "no", "change", "appears", "as", "you", "can", "check", "below", "Type", "something", "to", "begin", "NUMBER", "hello", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "Recieved", "input", "statement", "hello", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "hello", "be", "a", "know", "statement", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Using", "hello", "as", "a", "close", "match", "to", "hello", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "response_selection", "get_first_response", "Selecting", "first", "response", "from", "list", "of", "NUMBER", "options", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Response", "selected", "NUMBER", "Using", "Greetings", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "BestMatch", "selected", "Greetings", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "NoKnowledgeAdapter", "selected", "hello", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "Greetings", "NUMBER", "sec", "to", "wait", "from", "the", "beginning", "NUMBER", "twitter", "it", "s", "the", "same", "but", "what", "about", "pip", "install", "upgrade", "twitter", "in", "the", "requirements", "file", "from", "chatterbot", "you", "have", "chatterbot", "corpus", "NUMBER", "TAG", "NUMBER", "TAG", "NUMBER", "TAG", "NUMBER", "TAG", "NUMBER", "TAG", "chatbot", "NUMBER", "train", "NUMBER", "encode", "utf", "NUMBER", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "update", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement", "NUMBER", "text", "value", "data", "File", "C", "Python", "NUMBER", "lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "self", "NUMBER", "_set_content", "key", "value", "File", "C", "Python", "NUMBER", "lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_set_content", "obj", "self", "NUMBER", "_get_content", "File", "C", "Python", "NUMBER", "lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_get_content", "obj", "self", "NUMBER", "read_data", "self", "NUMBER", "path", "File", "C", "Python", "NUMBER", "lib", "site", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "read_data", "obj", "decode", "content", "File", "C", "Python", "NUMBER", "lib", "site", "package", "jsondb", "compat", "NUMBER", "py", "line", "NUMBER", "in", "decode", "return", "json_decode", "value", "encoding", "utf", "NUMBER", "object_hook", "json_util", "NUMBER", "object_hook", "File", "C", "Python", "NUMBER", "lib", "json", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "loads", "return", "cls", "encoding", "encoding", "kw", "NUMBER", "decode", "s", "File", "C", "Python", "NUMBER", "lib", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "decode", "obj", "end", "self", "NUMBER", "raw_decode", "s", "idx", "_w", "s", "NUMBER", "NUMBER", "end", "File", "C", "Python", "NUMBER", "lib", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "raw_decode", "obj", "end", "self", "NUMBER", "scan_once", "s", "idx", "UnicodeDecodeError", "utf", "NUMBER", "codec", "can", "t", "decode", "byte", "NUMBER", "x", "NUMBER", "in", "position", "NUMBER", "invalid", "start", "byte", "so", "i", "think", "this", "example", "be", "completly", "faulty", "and", "not", "ready", "to", "use", "NUMBER", "i", "decided", "to", "abandon", "it", "you", "told", "me", "about", "factors", "but", "did", "you", "seen", "my", "specs", "NUMBER", "gb", "of", "ram", "SSD", "intel", "I", "NUMBER", "NUMBER", "do", "you", "think", "it", "s", "a", "bad", "computer", "i", "tried", "CNTK", "tensorflow", "with", "no", "issue", "NUMBER", "you", "know", "if", "you", "install", "something", "it", "must", "work", "or", "not", "NUMBER", "if", "it", "don", "t", "work", "recycle", "and", "try", "another", "one", "if", "gunthercox", "has", "a", "solution", "about", "that", "i", "will", "do", "everything", "he", "wants", "for", "hi", "again", "nobody", "have", "explaination", "about", "this", "too", "big", "consuming", "time", "thank", "s", "for", "reply", "gunthercox", "at", "this", "time", "twitter", "be", "important", "but", "secondary", "NUMBER", "my", "goal", "be", "use", "chatterbox", "with", "a", "raisonable", "time", "to", "answer", "NUMBER", "As", "i", "said", "before", "i", "followed", "your", "tuto", "pip", "install", "chatterbot", "and", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Ron", "Obvious", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "Train", "based", "on", "the", "english", "corpus", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "Get", "a", "response", "to", "an", "input", "statement", "chatbot", "NUMBER", "get_response", "Hello", "how", "be", "you", "today", "and", "finally", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "import", "logging", "bot", "ChatBot", "Terminal", "bot", "NUMBER", "orage", "NUMBER", "drop", "exit", "Uncomment", "the", "following", "line", "to", "enable", "verbose", "logging", "logging", "NUMBER", "basicConfig", "format", "asctime", "s", "NUMBER", "msecs", "NUMBER", "d", "levelname", "s", "module", "s", "funcName", "s", "message", "s", "datefmt", "Y", "m", "d", "H", "M", "S", "level", "logging", "NUMBER", "INFO", "Create", "a", "new", "instance", "of", "a", "ChatBot", "bot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "statement_comparison_function", "chatterbot", "NUMBER", "comparisons", "NUMBER", "levenshtein_distance", "response_selection_method", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_first_response", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "NUMBER", "database", "NUMBER", "db", "print", "Type", "something", "to", "begin", "NUMBER", "The", "following", "loop", "will", "execute", "each", "time", "the", "user", "enters", "input", "while", "True", "try", "We", "pass", "None", "to", "this", "method", "because", "the", "parameter", "be", "not", "use", "by", "the", "TerminalAdapter", "bot_input", "bot", "NUMBER", "get_response", "None", "Press", "ctrl", "c", "or", "ctrl", "d", "on", "the", "keyboard", "to", "exit", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "And", "i", "have", "NUMBER", "secs", "of", "execution", "with", "this", "code", "or", "code", "pasted", "above", "from", "vkosuri", "hello", "at", "all", "gunthercox", "did", "you", "had", "time", "to", "check", "my", "issue", "i", "tried", "again", "today", "and", "i", "always", "have", "the", "same", "bug", "but", "not", "with", "CNTK", "or", "Tensorflow", "NUMBER", "i", "wait", "for", "your", "answer", "please", "NUMBER", "Thank", "s", "in", "advance", "Hi", "I", "be", "also", "facing", "the", "same", "issue", "I", "also", "tried", "creating", "a", "completely", "new", "virtualenv", "with", "new", "installs", "NUMBER", "Type", "something", "to", "begin", "NUMBER", "Hello", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "Recieved", "input", "statement", "Hello", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "input_adapter", "process_input_statement", "Hello", "be", "a", "know", "statement", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "Not", "processing", "the", "statement", "use", "MathematicalEvaluation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "TimeLogicAdapter", "selected", "The", "current", "time", "be", "NUMBER", "NUMBER", "PM", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Using", "Hello", "as", "a", "close", "match", "to", "Hello", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Selecting", "response", "from", "NUMBER", "optimal", "responses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "response_selection", "get_first_response", "Selecting", "first", "response", "from", "list", "of", "NUMBER", "options", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "best_match", "process", "Response", "selected", "NUMBER", "Using", "Greetings", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "BestMatch", "selected", "Greetings", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "multi_adapter", "process", "NoKnowledgeAdapter", "selected", "Hello", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "Greetings", "As", "you", "can", "see", "it", "be", "taking", "NUMBER", "seconds", "for", "me", "with", "just", "around", "NUMBER", "statements", "in", "the", "json", "db", "file", "NUMBER", "I", "tried", "debugging", "it", "in", "best_match", "NUMBER", "py", "module", "fetching", "the", "data", "takes", "NUMBER", "seconds", "and", "filtering", "another", "NUMBER", "seconds", "NUMBER", "statement_list", "self", "NUMBER", "chatbot", "NUMBER", "orage", "NUMBER", "get_response_statements", "takes", "NUMBER", "seconds", "response_list", "self", "NUMBER", "chatbot", "NUMBER", "orage", "NUMBER", "filter", "in_response_to__contains", "closest_match", "NUMBER", "text", "takes", "NUMBER", "seconds", "NUMBER", "This", "be", "for", "JsonFileStorage", "which", "might", "be", "the", "culprit", "I", "haven", "t", "tried", "use", "MongoDB", "NUMBER", "I", "will", "try", "use", "MongoDB", "and", "update", "NUMBER", "Alright", "with", "the", "MongoDB", "it", "seems", "to", "work", "fine", "without", "any", "excessive", "delays", "NUMBER", "So", "the", "issue", "seems", "to", "be", "relate", "to", "JsonFileStorage", "NUMBER", "ttrd", "NUMBER", "Try", "use", "MongoDB", "instead", "that", "should", "solve", "your", "problem", "for", "now", "NUMBER", "thank", "s", "for", "you", "help", "somerandomdudeontheinternet", "and", "sorry", "for", "the", "late", "i", "took", "some", "days", "for", "hollidays", "NUMBER", "i", "will", "try", "it", "asap", "and", "back", "to", "close", "this", "issue", "if", "ok", "NUMBER", "Nice", "day", "at", "all", "hello", "at", "all", "i", "confirm", "what", "somerandomdudeontheinternet", "has", "said", "before", "use", "only", "mongodb", "adaptor", "to", "feel", "a", "good", "experience", "NUMBER", "json", "db", "be", "just", "worst", "with", "training", "example", "include", "in", "tutorials", "NUMBER", "thank", "s", "for", "all", "this", "issue", "be", "close", "for", "me", "How", "do", "i", "use", "images", "in", "my", "corpus", "any", "suggestions", "Thanks", "Master", "will", "it", "possible", "through", "Django", "framework", "use", "some", "trick", "of", "preprocessor", "Hey", "folks", "I", "pip", "install", "chatterbot", "to", "a", "new", "virtualenv", "but", "having", "trouble", "run", "the", "first", "basic", "example", "here", "LINK", "I", "can", "see", "from", "a", "search", "on", "previous", "issue", "that", "UnsuitableForProductionWarning", "be", "an", "alert", "only", "so", "can", "be", "ignored", "but", "the", "rest", "of", "the", "error", "have", "me", "stumped", "NUMBER", "Help", "please", "Library", "Python", "NUMBER", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Traceback", "most", "recent", "call", "last", "File", "Basic", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "chatbot", "ChatBot", "Charlie", "File", "Library", "Python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "initialize", "File", "Library", "Python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "initialize", "nltk_download_corpus", "tokenizers", "punkt", "File", "Library", "Python", "NUMBER", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "nltk_download_corpus", "find", "resource_path", "File", "Library", "Python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "return", "find", "modified_name", "paths", "File", "Library", "Python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "return", "ZipFilePathPointer", "p", "zipentry", "File", "Library", "Python", "NUMBER", "site", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "return", "init_func", "args", "kwargs", "File", "Library", "Python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "zipfile", "OpenOnDemandZipFile", "os", "NUMBER", "path", "NUMBER", "abspath", "zipfile", "File", "Library", "Python", "NUMBER", "site", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "return", "init_func", "args", "kwargs", "File", "Library", "Python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "zipfile", "NUMBER", "ZipFile", "NUMBER", "__init__", "self", "filename", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "_RealGetContents", "File", "System", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "_RealGetContents", "raise", "BadZipfile", "File", "be", "not", "a", "zip", "file", "zipfile", "NUMBER", "BadZipfile", "File", "be", "not", "a", "zip", "file", "I", "also", "have", "this", "problem", "on", "python", "NUMBER", "Please", "help", "me", "thank", "you", "C", "Program", "Files", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "initialize", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "initialize", "nltk_download_corpus", "corpora", "wordnet", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "nltk_download_corpus", "find", "resource_path", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "return", "find", "modified_name", "paths", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "return", "ZipFilePathPointer", "p", "zipentry", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "site", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "return", "init_func", "args", "kwargs", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "zipfile", "OpenOnDemandZipFile", "os", "NUMBER", "path", "NUMBER", "abspath", "zipfile", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "site", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "return", "init_func", "args", "kwargs", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "zipfile", "NUMBER", "ZipFile", "NUMBER", "__init__", "self", "filename", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "_RealGetContents", "File", "C", "Program", "Files", "Python", "NUMBER", "lib", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "_RealGetContents", "raise", "BadZipFile", "File", "be", "not", "a", "zip", "file", "zipfile", "NUMBER", "BadZipFile", "File", "be", "not", "a", "zip", "file", "similar", "issue", "see", "LINK", "issuecomment", "NUMBER", "I", "didn", "t", "download", "NLTK", "manually", "NUMBER", "Any", "ideas", "on", "how", "to", "resolve", "download", "NLTK", "manually", "and", "the", "issue", "resolve", "NUMBER", "vkosuri", "thank", "you", "vary", "much", "yumupinglan", "Thanks", "Master", "gunthercox", "Hi", "everyone", "I", "just", "start", "use", "chatterbot", "and", "played", "around", "by", "importing", "different", "corpus", "as", "well", "as", "add", "manual", "conversations", "NUMBER", "It", "seems", "there", "be", "memory", "from", "previous", "conversations", "NUMBER", "For", "example", "if", "I", "do", "training", "on", "the", "ubuntu", "database", "then", "redotraining", "on", "the", "English", "corpus", "it", "seems", "to", "have", "memory", "of", "responses", "from", "ubuntu", "NUMBER", "This", "be", "creating", "some", "very", "unusual", "responses", "Hi", "I", "d", "like", "to", "know", "what", "happens", "if", "I", "happen", "to", "train", "the", "chatbot", "twice", "with", "the", "same", "corpus", "in", "the", "same", "session", "NUMBER", "Would", "the", "database", "NUMBER", "db", "assuming", "I", "m", "use", "the", "JsonFileStorageAdapter", "get", "update", "with", "the", "training", "dataset", "with", "increment", "to", "the", "occurence", "field", "Fixed", "some", "minor", "typo", "in", "the", "doc", "file", "When", "i", "initialize", "a", "chatterbot", "like", "this", "Install", "chatterbot", "use", "pip", "install", "django", "chatterbot", "then", "add", "chatterbot", "NUMBER", "ext", "NUMBER", "django_chatterbot", "in", "Installed", "apps", "and", "then", "run", "NUMBER", "manage", "NUMBER", "py", "runserver", "shows", "Error", "Unhandled", "exception", "in", "thread", "start", "by", "TAG", "Traceback", "most", "recent", "call", "last", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "autoreload", "NUMBER", "py", "line", "NUMBER", "in", "wrapper", "fn", "args", "kwargs", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "commands", "runserver", "NUMBER", "py", "line", "NUMBER", "in", "inner_run", "self", "NUMBER", "check", "display_num_errors", "True", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "base", "NUMBER", "py", "line", "NUMBER", "in", "check", "include_deployment_checks", "include_deployment_checks", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "base", "NUMBER", "py", "line", "NUMBER", "in", "_run_checks", "return", "checks", "NUMBER", "run_checks", "kwargs", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "checks", "registry", "NUMBER", "py", "line", "NUMBER", "in", "run_checks", "new_errors", "check", "app_configs", "app_configs", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "checks", "urls", "NUMBER", "py", "line", "NUMBER", "in", "check_url_config", "return", "check_resolver", "resolver", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "checks", "urls", "NUMBER", "py", "line", "NUMBER", "in", "check_resolver", "for", "pattern", "in", "resolver", "NUMBER", "url_patterns", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "functional", "NUMBER", "py", "line", "NUMBER", "in", "__get__", "res", "instance", "NUMBER", "__dict__", "self", "NUMBER", "name", "self", "NUMBER", "func", "instance", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "urls", "resolvers", "NUMBER", "py", "line", "NUMBER", "in", "url_patterns", "patterns", "getattr", "self", "NUMBER", "urlconf_module", "urlpatterns", "self", "NUMBER", "urlconf_module", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "functional", "NUMBER", "py", "line", "NUMBER", "in", "__get__", "res", "instance", "NUMBER", "__dict__", "self", "NUMBER", "name", "self", "NUMBER", "func", "instance", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "urls", "resolvers", "NUMBER", "py", "line", "NUMBER", "in", "urlconf_module", "return", "import_module", "self", "NUMBER", "urlconf_name", "File", "usr", "lib", "python", "NUMBER", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "__import__", "name", "File", "home", "tapish", "noransoft", "chatbot", "chatbot", "urls", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "url", "r", "chatterbot", "include", "chatterbot", "NUMBER", "ext", "NUMBER", "django_chatterbot", "NUMBER", "urls", "namespace", "chatterbot", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "conf", "urls", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "include", "urlconf_module", "import_module", "urlconf_module", "File", "usr", "lib", "python", "NUMBER", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "__import__", "name", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "urls", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "views", "import", "ChatterBotView", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "class", "ChatterBotViewMixin", "object", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "line", "NUMBER", "in", "ChatterBotViewMixin", "chatterbot", "ChatBot", "settings", "NUMBER", "CHATTERBOT", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "initialize", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "initialize", "nltk_download_corpus", "tokenizers", "punkt", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "nltk_download_corpus", "find", "resource_path", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "return", "find", "modified_name", "paths", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "return", "ZipFilePathPointer", "p", "zipentry", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "return", "init_func", "args", "kwargs", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "zipfile", "OpenOnDemandZipFile", "os", "NUMBER", "path", "NUMBER", "abspath", "zipfile", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "return", "init_func", "args", "kwargs", "File", "home", "tapish", "noransoft", "chatbot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "zipfile", "NUMBER", "ZipFile", "NUMBER", "__init__", "self", "filename", "File", "usr", "lib", "python", "NUMBER", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "_RealGetContents", "File", "usr", "lib", "python", "NUMBER", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "_RealGetContents", "raise", "BadZipfile", "File", "be", "not", "a", "zip", "file", "zipfile", "NUMBER", "BadZipfile", "File", "be", "not", "a", "zip", "file", "nony", "NUMBER", "did", "you", "tried", "manually", "download", "the", "file", "And", "also", "try", "to", "upgrade", "chatterbot", "to", "latest", "version", "pip", "install", "upgrade", "chatterbot", "I", "have", "an", "experiment", "use", "RethinkDB", "LINK", "as", "storage", "recently", "since", "JSON", "definetely", "couldn", "t", "be", "use", "in", "production", "and", "i", "m", "not", "Mongo", "fan", "NUMBER", "gunthercox", "be", "this", "something", "you", "might", "be", "interested", "in", "I", "could", "submit", "a", "PR", "soon", "if", "that", "be", "the", "case", "Cool", "library", "anyway", "NUMBER", "Cheers", "Interesting", "NUMBER", "Could", "you", "outline", "the", "direction", "of", "those", "refactor", "How", "this", "be", "going", "to", "be", "implement", "in", "distant", "future", "describe", "here", "LINK", "gunthercox", "apologies", "i", "thought", "NUMBER", "will", "apply", "storage", "adapters", "also", "NUMBER", "Thanks", "Master", "NUMBER", "Hi", "I", "have", "write", "a", "couchdb", "trainer", "that", "trains", "data", "stored", "in", "couchdb", "NUMBER", "It", "works", "on", "my", "local", "NUMBER", "Would", "it", "be", "possible", "for", "me", "to", "submit", "the", "trainer", "to", "you", "Sorry", "first", "time", "contributor", "to", "any", "git", "project", "NUMBER", "Regards", "Sunil", "Added", "boolean", "use_django_models", "option", "for", "ChatterBot", "settings", "to", "avoid", "problem", "with", "splitted", "databases", "usage", "NUMBER", "How", "can", "we", "make", "the", "bot", "to", "extract", "certain", "keywords", "from", "a", "sentence", "Example", "NUMBER", "User", "Question", "What", "be", "the", "weather", "in", "Seattle", "_", "Bot", "reads", "keyword", "Seattle", "NUMBER", "Gets", "weather", "in", "Seattle", "by", "some", "Weather", "API", "NUMBER", "Return", "the", "weather", "_", "Bot", "Answer", "Weather", "in", "Seattle", "be", "XX", "NUMBER", "Example", "NUMBER", "User", "Question", "May", "I", "know", "the", "weather", "in", "London", "_", "Bot", "reads", "keyword", "London", "NUMBER", "Gets", "weather", "in", "London", "by", "some", "Weather", "API", "NUMBER", "Return", "the", "weather", "_", "Bot", "Answer", "Weather", "in", "London", "be", "XX", "NUMBER", "In", "the", "above", "question", "I", "need", "to", "extract", "the", "key", "words", "Seattle", "and", "London", "NUMBER", "How", "be", "this", "possible", "in", "the", "chatbot", "Any", "idea", "how", "to", "implement", "this", "feature", "I", "think", "this", "might", "also", "help", "you", "LINK", "Hello", "As", "i", "use", "the", "parsing", "module", "for", "datetime", "conversion", "in", "the", "function", "date_from_relative_week_year", "the", "ordinal", "value", "that", "be", "be", "pass", "into", "the", "function", "be", "not", "be", "use", "NUMBER", "For", "example", "if", "the", "text", "input", "was", "next", "NUMBER", "weeks", "NUMBER", "the", "output", "be", "be", "of", "only", "one", "week", "NUMBER", "i", "believe", "this", "be", "because", "ordinal", "be", "not", "be", "use", "here", "NUMBER", "I", "tried", "to", "fix", "it", "my", "myself", "i", "add", "the", "ordinal", "value", "to", "the", "relative", "date", "but", "i", "be", "unsuccessful", "in", "doing", "so", "NUMBER", "Any", "help", "on", "this", "issue", "be", "appreciated", "NUMBER", "Thank", "you", "for", "looking", "into", "this", "gunthercox", "Dear", "Altruist", "I", "want", "to", "contribute", "in", "this", "project", "NUMBER", "Before", "going", "to", "join", "with", "it", "i", "have", "a", "very", "simple", "question", "NUMBER", "What", "machine", "learning", "techniques", "has", "be", "use", "in", "this", "project", "Can", "you", "please", "share", "in", "details", "if", "possible", "The", "purpose", "of", "chatterbot", "LINK", "be", "use", "in", "Salvius", "the", "Robot", "LINK", "for", "more", "information", "available", "here", "LINK", "good", "chat", "bots", "go", "bad", "NUMBER", "html", "NUMBER", "The", "major", "techniques", "use", "here", "as", "far", "of", "i", "know", "NUMBER", "You", "could", "train", "LINK", "your", "bot", "NUMBER", "Build", "your", "corpus", "data", "LINK", "NUMBER", "Store", "corpus", "into", "different", "DB", "LINK", "NUMBER", "You", "could", "apply", "preprocessors", "LINK", "on", "your", "corpus", "NUMBER", "NUMBER", "Django", "integration", "LINK", "gunthercox", "Please", "correct", "me", "if", "I", "be", "wrong", "NUMBER", "For", "the", "sake", "of", "Search", "based", "artificial", "intelligence", "I", "have", "find", "following", "optional", "algorithms", "implement", "in", "ChatterBot", "that", "can", "be", "use", "as", "the", "statement_comparison_function", "for", "a", "logic", "adapter", "_levenshtein_distance_", "for", "measuring", "character", "based", "text", "similarity", "_synset_distance_", "for", "calculating", "the", "synonymous", "similarity", "between", "statements", "_jaccard_similarity_", "for", "measuring", "term", "based", "text", "similarity", "And", "Bayesian", "networks", "be", "use", "in", "comparing", "_sentiments_", "NUMBER", "Among", "these", "levenshtein_distance", "be", "be", "use", "as", "the", "default", "method", "for", "finding", "the", "best", "match", "among", "statements", "chatterbot", "comparisons", "NUMBER", "py", "contains", "the", "implementation", "of", "the", "above", "mention", "methods", "NUMBER", "Here", "s", "my", "setup", "NUMBER", "chatterbot", "ChatBot", "Training", "Example", "database", "CommentDatabase", "NUMBER", "json", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "OhNo", "chatterbot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "chatterbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "test", "I", "thought", "it", "only", "gave", "the", "types", "of", "responses", "originally", "find", "in", "the", "corpus", "then", "the", "database", "the", "corpus", "I", "created", "was", "pretty", "small", "NUMBER", "An", "example", "of", "it", "not", "doing", "what", "it", "s", "supposed", "to", "be", "doing", "be", "if", "it", "receives", "a", "no", "response", "it", "might", "type", "No", "back", "NUMBER", "Another", "weird", "thing", "be", "it", "has", "given", "responses", "that", "were", "previously", "received", "as", "question", "NUMBER", "Does", "it", "also", "get", "trained", "each", "time", "chatterbot", "NUMBER", "get_response", "be", "call", "for", "q", "in", "question", "full_text", "q", "NUMBER", "find_element_by_class_name", "full", "text", "NUMBER", "text", "if", "len", "full_text", "TAG", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "english_bot", "ChatBot", "English", "Bot", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "self", "NUMBER", "initialize", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "initialize", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "nltk_download_corpus", "corpora", "wordnet", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "nltk_download_corpus", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "find", "resource_path", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "return", "find", "modified_name", "paths", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "return", "ZipFilePathPointer", "p", "zipentry", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "return", "init_func", "args", "kwargs", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "zipfile", "OpenOnDemandZipFile", "os", "NUMBER", "path", "NUMBER", "abspath", "zipfile", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "nltk", "compat", "NUMBER", "py", "line", "NUMBER", "in", "_decorator", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "return", "init_func", "args", "kwargs", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "zipfile", "NUMBER", "ZipFile", "NUMBER", "__init__", "self", "filename", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "self", "NUMBER", "_RealGetContents", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "zipfile", "NUMBER", "py", "line", "NUMBER", "in", "_RealGetContents", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "raise", "BadZipFile", "File", "be", "not", "a", "zip", "file", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "zipfile", "NUMBER", "BadZipFile", "File", "be", "not", "a", "zip", "file", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "Worker", "exiting", "pid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "nltk_data", "Unzipping", "corpora", "wordnet", "NUMBER", "zip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "nltk_data", "Downloading", "package", "punkt", "to", "app", "nltk_data", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "nltk_data", "Unzipping", "tokenizers", "punkt", "NUMBER", "zip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "nltk_data", "Downloading", "package", "vader_lexicon", "to", "app", "nltk_data", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "Worker", "exiting", "pid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "Shutting", "down", "Master", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "app", "web", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "Reason", "Worker", "fail", "to", "boot", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "heroku", "web", "NUMBER", "State", "change", "from", "up", "to", "crashed", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "heroku", "web", "NUMBER", "Process", "exited", "with", "status", "NUMBER", "the", "simple", "example", "didn", "t", "work", "with", "flask", "in", "heroku", "i", "test", "the", "example", "LINK", "chatterbot", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "trainers", "import", "ChatterBotCorpusTrainer", "from", "langdetect", "import", "detect_langs", "from", "time", "import", "sleep", "import", "json", "from", "chatterbot", "NUMBER", "conversation", "NUMBER", "session", "import", "ConversationSessionManager", "import", "uuid", "chatbot", "ChatBot", "Adddell", "silence_performance_warning", "False", "chatbot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "french", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "french", "NUMBER", "greetings", "chatterbot", "NUMBER", "corpus", "NUMBER", "french", "NUMBER", "trivia", "yes", "it", "s", "work", "localy", "hi", "just", "tell", "me", "best", "config", "python", "version", "and", "requirements", "that", "should", "i", "use", "to", "test", "it", "in", "server", "If", "it", "still", "doesn", "t", "work", "after", "that", "I", "recommend", "use", "PythonAnywhere", "LINK", "instead", "of", "Heroku", "NUMBER", "It", "worked", "without", "a", "hitch", "in", "the", "past", "when", "I", "hosted", "the", "live", "demo", "NUMBER", "You", "should", "add", "these", "to", "your", "nltk", "NUMBER", "txt", "so", "heroku", "will", "download", "these", "when", "build", "NUMBER", "wordnet", "stopwords", "punkt", "vader_lexicon", "A", "example", "project", "here", "LINK", "live", "example", "No", "it", "be", "work", "LINK", "live", "example", "NUMBER", "herokuapp", "NUMBER", "com", "vkosuri", "I", "doubt", "that", "NUMBER", "Can", "you", "try", "with", "fresh", "installation", "NUMBER", "I", "too", "run", "into", "the", "same", "problem", "when", "I", "deploy", "in", "the", "first", "time", "NUMBER", "Hello", "I", "wanted", "to", "test", "out", "the", "ChatterBot", "Voice", "NUMBER", "But", "when", "I", "use", "the", "pip", "install", "chatterbot", "voice", "command", "it", "uninstalled", "my", "chatterbot", "NUMBER", "which", "be", "really", "annoying", "NUMBER", "I", "had", "to", "uninstall", "chatterbot", "voice", "and", "chatterbot", "to", "reinstall", "chatterbot", "to", "get", "chatterbot", "to", "work", "again", "NUMBER", "How", "can", "I", "install", "chatterbot", "voice", "without", "it", "uninstalling", "chatterbot", "NUMBER", "Added", "corpus", "training", "data", "on", "the", "topic", "of", "computers", "in", "english", "language", "NUMBER", "Hi", "gunthercox", "I", "can", "see", "that", "you", "have", "aproved", "my", "pull", "request", "but", "i", "cant", "see", "it", "on", "the", "master", "branch", "that", "be", "i", "cant", "see", "it", "merge", "with", "the", "master", "NUMBER", "I", "m", "relatively", "new", "to", "open", "source", "contribution", "so", "if", "you", "could", "tell", "me", "what", "to", "do", "now", "i", "ll", "really", "appreciate", "it", "NUMBER", "I", "have", "lots", "of", "corpus", "training", "data", "on", "other", "topics", "that", "i", "want", "to", "commit", "NUMBER", "Thanks", "NUMBER", "No", "not", "at", "all", "NUMBER", "Infact", "have", "already", "created", "a", "pull", "request", "on", "that", "repository", "NUMBER", "Thanks", "for", "the", "guidance", "NUMBER", "Upon", "trying", "to", "run", "my", "app", "locally", "I", "get", "the", "above", "error", "that", "occur", "on", "the", "database_uri", "line", "NUMBER", "Create", "a", "new", "instance", "of", "a", "ChatBot", "bot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "chatterbot", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "VariableInputTypeAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "OutputAdapter", "output_format", "text", "database_uri", "mongodb", "heroku_address", "password", "ds", "NUMBER", "mlab", "NUMBER", "com", "NUMBER", "heroku_address", "Full", "stack", "trace", "Unhandled", "exception", "in", "thread", "start", "by", "TAG", "NUMBER", "wrapper", "at", "NUMBER", "x", "NUMBER", "BC", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "g", "Python", "lib", "site", "package", "django", "utils", "autoreload", "NUMBER", "py", "line", "NUMBER", "in", "wrapper", "fn", "args", "kwargs", "File", "g", "Python", "lib", "site", "package", "django", "core", "management", "commands", "runserver", "NUMBER", "py", "line", "NUMBER", "in", "inner_run", "self", "NUMBER", "check", "display_num_errors", "True", "File", "g", "Python", "lib", "site", "package", "django", "core", "management", "base", "NUMBER", "py", "line", "NUMBER", "in", "check", "include_deployment_checks", "include_deployment_checks", "File", "g", "Python", "lib", "site", "package", "django", "core", "management", "base", "NUMBER", "py", "line", "NUMBER", "in", "_run_checks", "return", "checks", "NUMBER", "run_checks", "kwargs", "File", "g", "Python", "lib", "site", "package", "django", "core", "checks", "registry", "NUMBER", "py", "line", "NUMBER", "in", "run_checks", "new_errors", "check", "app_configs", "app_configs", "File", "g", "Python", "lib", "site", "package", "django", "core", "checks", "urls", "NUMBER", "py", "line", "NUMBER", "in", "check_url_config", "return", "check_resolver", "resolver", "File", "g", "Python", "lib", "site", "package", "django", "core", "checks", "urls", "NUMBER", "py", "line", "NUMBER", "in", "check_resolver", "for", "pattern", "in", "resolver", "NUMBER", "url_patterns", "File", "g", "Python", "lib", "site", "package", "django", "utils", "functional", "NUMBER", "py", "line", "NUMBER", "in", "__get__", "res", "instance", "NUMBER", "__dict__", "self", "NUMBER", "name", "self", "NUMBER", "func", "instance", "File", "g", "Python", "lib", "site", "package", "django", "urls", "resolvers", "NUMBER", "py", "line", "NUMBER", "in", "url_patterns", "patterns", "getattr", "self", "NUMBER", "urlconf_module", "urlpatterns", "self", "NUMBER", "urlconf_module", "File", "g", "Python", "lib", "site", "package", "django", "utils", "functional", "NUMBER", "py", "line", "NUMBER", "in", "__get__", "res", "instance", "NUMBER", "__dict__", "self", "NUMBER", "name", "self", "NUMBER", "func", "instance", "File", "g", "Python", "lib", "site", "package", "django", "urls", "resolvers", "NUMBER", "py", "line", "NUMBER", "in", "urlconf_module", "return", "import_module", "self", "NUMBER", "urlconf_name", "File", "g", "Python", "lib", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "return", "_bootstrap", "NUMBER", "_gcd_import", "name", "level", "package", "level", "File", "TAG", "line", "NUMBER", "in", "_gcd_import", "File", "TAG", "line", "NUMBER", "in", "_find_and_load", "File", "TAG", "line", "NUMBER", "in", "_find_and_load_unlocked", "File", "TAG", "line", "NUMBER", "in", "_load_unlocked", "File", "TAG", "line", "NUMBER", "in", "exec_module", "File", "TAG", "line", "NUMBER", "in", "_call_with_frames_removed", "File", "g", "Git", "ChatterbotTest", "chatterbottest", "urls", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "url", "r", "myapp", "include", "myapp", "NUMBER", "urls", "File", "g", "Python", "lib", "site", "package", "django", "conf", "urls", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "include", "urlconf_module", "import_module", "urlconf_module", "File", "g", "Python", "lib", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "return", "_bootstrap", "NUMBER", "_gcd_import", "name", "level", "package", "level", "File", "TAG", "line", "NUMBER", "in", "_gcd_import", "File", "TAG", "line", "NUMBER", "in", "_find_and_load", "File", "TAG", "line", "NUMBER", "in", "_find_and_load_unlocked", "File", "TAG", "line", "NUMBER", "in", "_load_unlocked", "File", "TAG", "line", "NUMBER", "in", "exec_module", "File", "TAG", "line", "NUMBER", "in", "_call_with_frames_removed", "File", "g", "Git", "ChatterbotTest", "myapp", "urls", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "myapp", "NUMBER", "views", "import", "MyApp", "File", "g", "Git", "ChatterbotTest", "myapp", "views", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "database_uri", "mongodb", "heroku_", "NUMBER", "sw", "NUMBER", "n", "NUMBER", "bla", "NUMBER", "gdmaukpnmdau", "NUMBER", "e", "NUMBER", "aaeaba", "ds", "NUMBER", "mlab", "NUMBER", "com", "NUMBER", "heroku_", "NUMBER", "sw", "NUMBER", "n", "NUMBER", "File", "g", "Python", "lib", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "orage", "utils", "NUMBER", "initialize_class", "storage_adapter", "kwargs", "File", "g", "Python", "lib", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "initialize_class", "return", "Class", "kwargs", "File", "g", "Python", "lib", "site", "package", "chatterbot", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "atements", "NUMBER", "create_index", "text", "unique", "True", "File", "g", "Python", "lib", "site", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "create_index", "self", "NUMBER", "__create_index", "keys", "kwargs", "File", "g", "Python", "lib", "site", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "__create_index", "parse_write_concern_error", "True", "File", "g", "Python", "lib", "site", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "_command", "collation", "collation", "File", "g", "Python", "lib", "site", "package", "pymongo", "pool", "NUMBER", "py", "line", "NUMBER", "in", "command", "collation", "collation", "File", "g", "Python", "lib", "site", "package", "pymongo", "network", "NUMBER", "py", "line", "NUMBER", "in", "command", "parse_write_concern_error", "parse_write_concern_error", "File", "g", "Python", "lib", "site", "package", "pymongo", "helpers", "NUMBER", "py", "line", "NUMBER", "in", "_check_command_response", "raise", "OperationFailure", "msg", "errmsg", "code", "response", "pymongo", "NUMBER", "error", "NUMBER", "OperationFailure", "not", "authorized", "on", "chatterbot", "database", "to", "execute", "command", "createIndexes", "statements", "indexes", "key", "text", "NUMBER", "unique", "true", "name", "text_", "NUMBER", "Interestingly", "I", "connected", "to", "the", "database", "use", "the", "command", "line", "and", "run", "the", "above", "command", "and", "get", "a", "success", "message", "returned", "NUMBER", "Running", "the", "app", "still", "causes", "this", "error", "however", "NUMBER", "Is", "this", "an", "error", "with", "mLab", "I", "m", "currently", "to", "build", "a", "system", "that", "process", "some", "error", "and", "returns", "a", "string", "message", "and", "need", "to", "force", "it", "change", "the", "Keyboard", "to", "a", "str", "variable", "for", "chatterbot", "give", "a", "response", "NUMBER", "Anyone", "have", "any", "idea", "how", "to", "do", "this", "Hello", "gunthercox", "Not", "returned", "but", "inserted", "in", "someway", "instead", "of", "get", "the", "value", "from", "the", "keyboard", "i", "need", "to", "use", "string", "that", "be", "in", "my", "python", "program", "NUMBER", "me", "too", "facing", "the", "same", "issue", "File", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "chatbot_demo", "NUMBER", "py", "line", "NUMBER", "in", "from", "chatterbot", "import", "ChatBot", "File", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "ImportError", "cannot", "import", "name", "ChatBot", "and", "yes", "I", "don", "t", "have", "any", "directories", "named", "utils", "and", "adapters", "checked", "that", "approach", "too", "please", "help", "NUMBER", "image", "LINK", "fcde", "NUMBER", "e", "NUMBER", "NUMBER", "a", "NUMBER", "f", "NUMBER", "cdd", "NUMBER", "c", "NUMBER", "bb", "NUMBER", "png", "image", "LINK", "fcdf", "NUMBER", "e", "NUMBER", "NUMBER", "dbd", "a", "NUMBER", "a", "NUMBER", "f", "NUMBER", "c", "NUMBER", "png", "I", "be", "use", "anaconda", "NUMBER", "for", "python", "NUMBER", "your", "help", "would", "be", "really", "appreciated", "Thank", "You", "NUMBER", "priyanka", "NUMBER", "kar", "did", "you", "tried", "same", "example", "on", "Python", "NUMBER", "Which", "version", "of", "chatterbot", "be", "you", "use", "to", "get", "chatterbot", "version", "python", "m", "chatterbot", "version", "image", "LINK", "fce", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "NUMBER", "ff", "NUMBER", "a", "NUMBER", "d", "NUMBER", "png", "I", "did", "try", "in", "python", "NUMBER", "still", "the", "same", "error", "could", "you", "provide", "error", "stack", "trace", "for", "python", "NUMBER", "I", "image", "LINK", "fce", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "bb", "NUMBER", "e", "NUMBER", "b", "NUMBER", "png", "My", "guess", "could", "issue", "with", "your", "python", "path", "NUMBER", "LINK", "path", "issue", "Add", "these", "steps", "at", "startup", "to", "know", "where", "your", "path", "be", "setted", "NUMBER", "Python", "print", "sys", "NUMBER", "path", "image", "LINK", "fce", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "c", "NUMBER", "ee", "NUMBER", "c", "NUMBER", "png", "I", "be", "not", "sure", "what", "happening", "In", "a", "general", "process", "what", "i", "be", "doing", "on", "a", "new", "windows", "machine", "pip", "install", "upgrade", "pip", "pip", "install", "chatterbot", "python", "m", "chatterbot", "version", "I", "be", "not", "familer", "with", "Anaconda", "By", "looking", "into", "setup", "NUMBER", "py", "LINK", "L", "NUMBER", "it", "support", "only", "python", "NUMBER", "It", "be", "not", "recommended", "you", "may", "try", "to", "pip", "uninstall", "chatterbot", "pip", "install", "chatterbot", "python", "m", "chatterbot", "version", "Still", "if", "problem", "persists", "try", "to", "remove", "python", "NUMBER", "and", "install", "a", "fresh", "copy", "do", "above", "steps", "NUMBER", "I", "hope", "this", "will", "help", "you", "NUMBER", "Sir", "I", "tried", "your", "suggestion", "Still", "not", "work", "its", "work", "fine", "with", "python", "NUMBER", "but", "over", "here", "i", "be", "tring", "to", "execute", "the", "twitter", "data", "training", "example", "its", "showing", "an", "error", "image", "LINK", "fcff", "NUMBER", "e", "NUMBER", "NUMBER", "dfe", "b", "NUMBER", "d", "NUMBER", "a", "NUMBER", "d", "NUMBER", "png", "code", "NUMBER", "message", "Sorry", "you", "be", "not", "authorized", "to", "see", "this", "status", "NUMBER", "code", "NUMBER", "message", "No", "status", "find", "with", "that", "ID", "NUMBER", "can", "you", "explain", "how", "to", "resolve", "it", "and", "further", "more", "after", "training", "the", "twitter", "data", "to", "the", "bot", "will", "the", "bot", "be", "able", "to", "fetch", "the", "answers", "from", "twitter", "for", "a", "given", "question", "or", "how", "be", "this", "example", "useful", "Thank", "You", "Here", "be", "an", "example", "located", "here", "LINK", "twitter", "training", "example", "it", "stopped", "executing", "in", "python", "NUMBER", "too", "image", "LINK", "fd", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fe", "c", "NUMBER", "b", "NUMBER", "png", "i", "search", "solution", "for", "this", "problem", "find", "NUMBER", "name", "NUMBER", "pyc", "delete", "for", "remove", "pyc", "file", "but", "it", "says", "Uploading", "image", "NUMBER", "png", "gunthercox", "That", "would", "be", "really", "helpful", "Thank", "You", "I", "re", "install", "everything", "now", "previous", "error", "isn", "t", "display", "but", "when", "i", "be", "trying", "to", "run", "the", "gitter", "bot", "example", "be", "gives", "me", "error", "This", "be", "how", "the", "simple", "example", "be", "work", "image", "LINK", "fdcd", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "b", "NUMBER", "png", "This", "be", "the", "new", "error", "i", "be", "facing", "image", "LINK", "fdce", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "NUMBER", "cbeb", "NUMBER", "png", "please", "Kindly", "help", "Your", "help", "will", "be", "really", "appreciated", "gunthercox", "vkosuri", "Thank", "You", "NUMBER", "priyanka", "NUMBER", "kar", "I", "assume", "the", "settings", "be", "from", "Django", "You", "can", "rewrite", "like", "this", "replace", "with", "your", "gitter", "room_id", "and", "api_key", "Python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "import", "logging", "logging", "NUMBER", "basicConfig", "level", "logging", "NUMBER", "INFO", "chatbot", "ChatBot", "GitterBot", "gitter_room", "YOUR_GITTER_ROOM_ID", "gitter_api_token", "YOUR_GITTER_API_TOKEN", "gitter_only_respond_to_mentions", "False", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "Gitter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "Gitter", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "vkosuri", "The", "above", "change", "in", "code", "executes", "but", "throw", "an", "error", "runfile", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "chatbot_demo_gitter_demo", "NUMBER", "py", "wdir", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "INFO", "request", "NUMBER", "package", "NUMBER", "urllib", "NUMBER", "connectionpool", "Starting", "new", "HTTPS", "connection", "NUMBER", "api", "NUMBER", "gitter", "NUMBER", "im", "INFO", "chatterbot", "NUMBER", "adapters", "NUMBER", "joining", "room", "LINK", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "runfile", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "chatbot_demo_gitter_demo", "NUMBER", "py", "wdir", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "spyder", "utils", "site", "sitecustomize", "NUMBER", "py", "line", "NUMBER", "in", "runfile", "execfile", "filename", "namespace", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "spyder", "utils", "site", "sitecustomize", "NUMBER", "py", "line", "NUMBER", "in", "execfile", "exec", "compile", "f", "NUMBER", "read", "filename", "exec", "namespace", "File", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "chatbot_demo_gitter_demo", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "input", "utils", "NUMBER", "initialize_class", "input_adapter", "kwargs", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "initialize_class", "return", "Class", "kwargs", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "input", "gitter", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "room_data", "self", "NUMBER", "join_room", "self", "NUMBER", "gitter_room", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "input", "gitter", "NUMBER", "py", "line", "NUMBER", "in", "join_room", "self", "NUMBER", "_validate_status_code", "response", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "input", "gitter", "NUMBER", "py", "line", "NUMBER", "in", "_validate_status_code", "raise", "self", "NUMBER", "HTTPStatusException", "status", "code", "recieved", "NUMBER", "format", "code", "HTTPStatusException", "NUMBER", "status", "code", "recieved", "NUMBER", "represent", "unauthorized", "check", "with", "api", "and", "room", "id", "NUMBER", "represent", "unauthorized", "check", "with", "api", "and", "room", "id", "vkosuri", "gunthercox", "Sir", "I", "have", "NUMBER", "Queries", "NUMBER", "When", "I", "created", "an", "app", "use", "gitter", "I", "received", "TOKEN", "OAUTH", "KEY", "OAUTH", "SECRET", "REDIRECT", "URL", "So", "I", "applied", "it", "in", "the", "code", "as", "follows", "image", "LINK", "fdd", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "ade", "NUMBER", "aea", "NUMBER", "d", "NUMBER", "c", "NUMBER", "c", "NUMBER", "png", "And", "when", "executed", "get", "the", "following", "error", "runfile", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "chatbot_demo_gitter_demo", "NUMBER", "py", "wdir", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "INFO", "request", "NUMBER", "package", "NUMBER", "urllib", "NUMBER", "connectionpool", "Starting", "new", "HTTPS", "connection", "NUMBER", "api", "NUMBER", "gitter", "NUMBER", "im", "INFO", "chatterbot", "NUMBER", "adapters", "NUMBER", "joining", "room", "LINK", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "runfile", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "chatbot_demo_gitter_demo", "NUMBER", "py", "wdir", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "spyder", "utils", "site", "sitecustomize", "NUMBER", "py", "line", "NUMBER", "in", "runfile", "execfile", "filename", "namespace", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "spyder", "utils", "site", "sitecustomize", "NUMBER", "py", "line", "NUMBER", "in", "execfile", "exec", "compile", "f", "NUMBER", "read", "filename", "exec", "namespace", "File", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "chatbot_demo_gitter_demo", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "input", "utils", "NUMBER", "initialize_class", "input_adapter", "kwargs", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "initialize_class", "return", "Class", "kwargs", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "input", "gitter", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "room_data", "self", "NUMBER", "join_room", "self", "NUMBER", "gitter_room", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "input", "gitter", "NUMBER", "py", "line", "NUMBER", "in", "join_room", "self", "NUMBER", "_validate_status_code", "response", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "input", "gitter", "NUMBER", "py", "line", "NUMBER", "in", "_validate_status_code", "raise", "self", "NUMBER", "HTTPStatusException", "status", "code", "recieved", "NUMBER", "format", "code", "HTTPStatusException", "NUMBER", "status", "code", "recieved", "NUMBER", "In", "the", "example", "to", "train", "the", "classifier", "with", "the", "ubuntu", "corpus", "the", "corpus", "be", "downloaded", "but", "while", "extracting", "image", "LINK", "fdd", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "e", "c", "NUMBER", "fd", "NUMBER", "aaebab", "NUMBER", "png", "it", "extracts", "till", "here", "and", "then", "throw", "the", "error", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "runfile", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "chatbot_demo_ubuntu_corpus", "NUMBER", "py", "wdir", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "spyder", "utils", "site", "sitecustomize", "NUMBER", "py", "line", "NUMBER", "in", "runfile", "execfile", "filename", "namespace", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "spyder", "utils", "site", "sitecustomize", "NUMBER", "py", "line", "NUMBER", "in", "execfile", "exec", "compile", "f", "NUMBER", "read", "filename", "exec", "namespace", "File", "C", "Users", "Priyanka", "Baviskar", "Documents", "py_", "NUMBER", "chatbot_demo_ubuntu_corpus", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "chatbot", "NUMBER", "train", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "self", "NUMBER", "extract", "corpus_download_path", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "extract", "tar", "NUMBER", "extractall", "path", "self", "NUMBER", "data_directory", "members", "track_progress", "tar", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "tarfile", "NUMBER", "py", "line", "NUMBER", "in", "extractall", "numeric_owner", "numeric_owner", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "tarfile", "NUMBER", "py", "line", "NUMBER", "in", "extract", "numeric_owner", "numeric_owner", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "tarfile", "NUMBER", "py", "line", "NUMBER", "in", "_extract_member", "self", "NUMBER", "makefile", "tarinfo", "targetpath", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "tarfile", "NUMBER", "py", "line", "NUMBER", "in", "makefile", "copyfileobj", "source", "target", "tarinfo", "NUMBER", "size", "ReadError", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "tarfile", "NUMBER", "py", "line", "NUMBER", "in", "copyfileobj", "buf", "src", "NUMBER", "read", "remainder", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "gzip", "NUMBER", "py", "line", "NUMBER", "in", "read", "return", "self", "NUMBER", "_buffer", "NUMBER", "read", "size", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "_compression", "NUMBER", "py", "line", "NUMBER", "in", "readinto", "data", "self", "NUMBER", "read", "len", "byte_view", "File", "C", "Users", "Priyanka", "Baviskar", "Anaconda_", "lib", "gzip", "NUMBER", "py", "line", "NUMBER", "in", "read", "raise", "EOFError", "Compressed", "file", "ended", "before", "the", "EOFError", "Compressed", "file", "ended", "before", "the", "end", "of", "stream", "marker", "was", "reached", "Thank", "You", "for", "answering", "all", "my", "queries", "with", "patience", "NUMBER", "Much", "appreciated", "Sir", "On", "Gitter", "see", "some", "example", "over", "here", "LINK", "_adapter_tests", "test_gitter_input_adapter", "NUMBER", "py", "L", "NUMBER", "I", "be", "not", "sure", "with", "Ubuntu", "corpus", "issue", "Can", "I", "edit", "the", "Corpus", "add", "more", "conversations", "directly", "into", "the", "json", "file", "One", "last", "doubt", "gunthercox", "when", "we", "download", "the", "The", "Ubuntu", "dialog", "corpus", "via", "the", "program", "were", "do", "it", "get", "stored", "Because", "it", "isn", "t", "extracting", "the", "whole", "data", "for", "me", "its", "throw", "error", "NUMBER", "django", "NUMBER", "core", "NUMBER", "exception", "NUMBER", "ImproperlyConfigured", "Requested", "setting", "CHATTERBOT", "but", "settings", "be", "not", "configured", "NUMBER", "You", "must", "either", "define", "the", "environment", "variable", "DJANGO_SETTINGS_MODULE", "or", "call", "settings", "NUMBER", "configure", "before", "accessing", "settings", "NUMBER", "hi", "text", "u", "hi", "created_at", "datetime", "NUMBER", "datetime", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "tzinfo", "TAG", "extra_data", "in_response_to", "text", "u", "Hi", "occurrence", "NUMBER", "text", "u", "Hello", "occurrence", "NUMBER", "Using", "Mac", "Os", "anaconda", "NUMBER", "Please", "guide", "me", "how", "to", "solve", "this", "issue", "NUMBER", "kumarneeraj", "NUMBER", "I", "think", "the", "app", "be", "work", "the", "response", "contains", "hi", "which", "be", "correct", "NUMBER", "I", "think", "what", "you", "re", "noticing", "be", "that", "the", "serialization", "of", "the", "api", "be", "not", "valid", "json", "the", "api", "returns", "a", "json", "structure", "with", "the", "text", "node", "point", "to", "python", "serialized", "as", "oppose", "to", "json", "so", "you", "get", "in", "the", "app", "the", "data", "that", "you", "show", "NUMBER", "This", "be", "why", "the", "app", "shows", "the", "following", "screenshot", "from", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "LINK", "fdc", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fc", "NUMBER", "NUMBER", "dbc", "NUMBER", "abf", "NUMBER", "png", "gunthercox", "awesome", "thanks", "I", "also", "fix", "it", "in", "my", "local", "copy", "but", "I", "m", "glad", "to", "hear", "there", "s", "a", "new", "version", "the", "project", "has", "a", "lot", "of", "interesting", "ideas", "NUMBER", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Traceback", "most", "recent", "call", "last", "File", "twitter", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "TwitterTrainer", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "trainer", "TrainerClass", "self", "NUMBER", "orage", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "from", "twitter", "import", "Api", "as", "TwitterApi", "File", "Users", "aiosdeveloper", "Downloads", "chatbot", "twitter", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "TwitterTrainer", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "trainer", "TrainerClass", "self", "NUMBER", "orage", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "from", "twitter", "import", "Api", "as", "TwitterApi", "ImportError", "cannot", "import", "name", "Api", "Thanks", "Try", "to", "do", "fallowing", "steps", "Recommended", "use", "virtual", "environments", "LINK", "guide", "NUMBER", "org", "en", "latest", "dev", "virtualenvs", "virtualvenv", "venv", "source", "venv", "bin", "activate", "pip", "install", "upgrade", "pip", "pip", "install", "chatterbot", "Let", "me", "know", "still", "if", "you", "be", "facing", "this", "issue", "NUMBER", "python", "twitter", "NUMBER", "py", "opt", "chatbot", "mengbao", "venv", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Traceback", "most", "recent", "call", "last", "File", "twitter", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "TwitterTrainer", "File", "opt", "chatbot", "mengbao", "venv", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "trainer", "TrainerClass", "self", "NUMBER", "orage", "kwargs", "File", "opt", "chatbot", "mengbao", "venv", "lib", "python", "NUMBER", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "from", "twitter", "import", "Api", "as", "TwitterApi", "File", "opt", "chatbot", "mengbao", "twitter", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "TwitterTrainer", "File", "opt", "chatbot", "mengbao", "venv", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "trainer", "TrainerClass", "self", "NUMBER", "orage", "kwargs", "File", "opt", "chatbot", "mengbao", "venv", "lib", "python", "NUMBER", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "from", "twitter", "import", "Api", "as", "TwitterApi", "ImportError", "cannot", "import", "name", "Api", "Read", "the", "documentation", "LINK", "theteerapon", "could", "you", "please", "describe", "problem", "description", "RuntimeError", "Model", "class", "chatterbot", "NUMBER", "ext", "NUMBER", "django_chatterbot", "NUMBER", "models", "NUMBER", "Statement", "doesn", "t", "declare", "an", "explicit", "app_label", "and", "isn", "t", "in", "an", "application", "in", "INSTALLED_APPS", "NUMBER", "Does", "your", "Django", "app", "settings", "include", "the", "lines", "marked", "with", "arrows", "Application", "definition", "INSTALLED_APPS", "django", "NUMBER", "contrib", "NUMBER", "admin", "django", "NUMBER", "contrib", "NUMBER", "auth", "django", "NUMBER", "contrib", "NUMBER", "contenttypes", "django", "NUMBER", "contrib", "NUMBER", "sessions", "django", "NUMBER", "contrib", "NUMBER", "message", "django", "NUMBER", "contrib", "NUMBER", "aticfiles", "chatterbot", "NUMBER", "ext", "NUMBER", "django_chatterbot", "TAG", "write", "I", "m", "actually", "in", "the", "process", "of", "make", "some", "rather", "large", "change", "that", "will", "make", "this", "much", "easier", "to", "do", "NUMBER", "Each", "statement", "will", "end", "up", "having", "a", "reference", "to", "the", "session", "that", "it", "be", "a", "part", "of", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "I", "think", "this", "could", "you", "help", "you", "Analyzing", "Sentence", "Structure", "LINK", "Did", "you", "implement", "these", "things", "in", "chatterbot", "yet", "Em", "NUMBER", "de", "jan", "de", "NUMBER", "NUMBER", "NUMBER", "Mallikarjunarao", "Kosuri", "TAG", "escreveu", "I", "think", "this", "could", "you", "help", "you", "Analyzing", "Sentence", "Structure", "TAG", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "No", "i", "be", "learning", "these", "techniques", "Do", "you", "have", "a", "date", "to", "release", "it", "I", "was", "thinking", "about", "implement", "myself", "but", "it", "s", "better", "to", "wait", "for", "your", "implementation", "Em", "NUMBER", "de", "jan", "de", "NUMBER", "NUMBER", "NUMBER", "Gunther", "Cox", "TAG", "escreveu", "lucaszanella", "TAG", "I", "agree", "I", "would", "be", "happy", "to", "make", "change", "to", "allow", "this", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Hi", "be", "there", "any", "news", "regard", "this", "I", "checked", "the", "dev", "branch", "but", "it", "has", "not", "be", "update", "for", "a", "while", "Is", "there", "something", "we", "can", "do", "to", "help", "gunthercox", "lucaszanella", "vkosuri", "Hey", "in", "order", "to", "maintain", "context", "I", "was", "trying", "to", "build", "a", "Logical", "Adapter", "for", "each", "context", "that", "I", "want", "in", "my", "conversation", "NUMBER", "But", "the", "problem", "be", "that", "I", "need", "the", "last", "statements", "that", "were", "made", "in", "the", "conversation", "in", "the", "Logical", "Adapter", "such", "that", "I", "can", "define", "the", "rules", "to", "be", "followed", "if", "a", "particular", "set", "of", "statements", "have", "already", "be", "pass", "NUMBER", "I", "be", "unable", "to", "get", "the", "last", "mention", "response", "or", "input", "statement", "in", "my", "Logical", "Adapter", "NUMBER", "I", "know", "that", "I", "can", "get", "these", "by", "the", "following", "commands", "bot", "NUMBER", "conversation_sessions", "NUMBER", "get", "self", "NUMBER", "bot", "NUMBER", "default_session", "NUMBER", "uuid", "NUMBER", "conversation", "NUMBER", "get_last_response_statement", "NUMBER", "text", "but", "this", "be", "not", "work", "inside", "the", "Logical", "Adapter", "It", "says", "bot", "not", "defined", "NUMBER", "Please", "help", "How", "can", "I", "get", "through", "this", "I", "be", "new", "to", "python", "NUMBER", "I", "m", "thinking", "about", "use", "ChatterBot", "to", "answer", "lots", "of", "people", "in", "a", "server", "NUMBER", "The", "message", "be", "going", "to", "be", "received", "through", "NodeJS", "and", "pass", "to", "python", "through", "ZeroMQ", "NUMBER", "I", "m", "thinking", "about", "the", "best", "strategy", "to", "process", "all", "message", "but", "I", "didn", "t", "see", "anything", "in", "the", "documentation", "NUMBER", "As", "I", "see", "it", "d", "be", "necessary", "for", "the", "ChatterBot", "object", "to", "be", "global", "because", "we", "don", "t", "want", "more", "than", "one", "instance", "of", "the", "same", "logic", "adapter", "in", "memory", "that", "s", "not", "necessary", "NUMBER", "I", "wonder", "which", "be", "the", "consequences", "of", "calling", "chatbot", "NUMBER", "get_response", "message", "in", "each", "thread", "NUMBER", "Is", "it", "enough", "I", "d", "create", "like", "NUMBER", "threads", "where", "each", "one", "would", "wait", "for", "a", "socket", "message", "and", "then", "call", "a", "get_response", "NUMBER", "Do", "you", "think", "this", "would", "be", "enough", "Are", "there", "risks", "of", "race", "condition", "As", "I", "see", "you", "implement", "your", "own", "Queue", "and", "the", "storage", "adapters", "may", "or", "may", "not", "suffer", "from", "race", "conditions", "NUMBER", "Would", "be", "nice", "to", "hear", "from", "you", "the", "best", "methods", "for", "this", "and", "if", "there", "ll", "be", "further", "work", "in", "the", "future", "to", "make", "it", "easier", "NUMBER", "Or", "even", "to", "add", "an", "example", "in", "examples", "where", "threading", "be", "use", "NUMBER", "Here", "s", "the", "output", "when", "trying", "to", "call", "get_response", "inside", "a", "thread", "Exception", "in", "thread", "Thread", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "usr", "lib", "python", "NUMBER", "threading", "NUMBER", "py", "line", "NUMBER", "in", "_bootstrap_inner", "self", "NUMBER", "run", "File", "usr", "lib", "python", "NUMBER", "threading", "NUMBER", "py", "line", "NUMBER", "in", "run", "self", "NUMBER", "_target", "self", "NUMBER", "_args", "self", "NUMBER", "_kwargs", "File", "bot", "NUMBER", "py", "line", "NUMBER", "in", "process_message", "response", "chatbot", "NUMBER", "get_response", "How", "be", "you", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "self", "NUMBER", "learn_response", "statement", "previous_statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "learn_response", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "update", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement", "NUMBER", "text", "value", "data", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "return", "self", "NUMBER", "_get_content", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_get_content", "obj", "self", "NUMBER", "read_data", "self", "NUMBER", "path", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "read_data", "obj", "decode", "content", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "jsondb", "compat", "NUMBER", "py", "line", "NUMBER", "in", "decode", "return", "json_decode", "value", "encoding", "utf", "NUMBER", "object_hook", "json_util", "NUMBER", "object_hook", "File", "usr", "lib", "python", "NUMBER", "json", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "loads", "return", "cls", "kw", "NUMBER", "decode", "s", "File", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "decode", "raise", "JSONDecodeError", "Extra", "data", "s", "end", "json", "NUMBER", "decoder", "NUMBER", "JSONDecodeError", "Extra", "data", "line", "NUMBER", "column", "NUMBER", "char", "NUMBER", "If", "you", "however", "set", "training", "to", "False", "it", "works", "without", "any", "problem", "so", "the", "problem", "be", "really", "something", "relate", "to", "json", "storage", "and", "threading", "NUMBER", "I", "m", "trying", "to", "understand", "where", "s", "the", "problem", "how", "to", "resolve", "this", "probleme", "Use", "a", "support", "database", "addelll", "NUMBER", "A", "MongoDB", "storage", "adapter", "be", "documented", "here", "LINK", "LINK", "botkit", "be", "API", "based", "so", "i", "guess", "somehow", "we", "can", "make", "it", "I", "m", "having", "some", "trouble", "parsing", "the", "reply", "from", "django", "NUMBER", "It", "seems", "the", "reply", "contains", "single", "quotes", "instead", "of", "JSON", "standard", "double", "quote", "NUMBER", "Also", "other", "values", "that", "can", "t", "be", "converted", "with", "javascript", "jsonParse", "like", "datatime", "created_at", "datetime", "NUMBER", "datetime", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Is", "it", "a", "bug", "Thanks", "NUMBER", "thedp", "can", "you", "elaborate", "more", "on", "this", "issue", "thedp", "datetime", "be", "not", "JSON", "serializable", "Maybe", "you", "receiving", "a", "byte", "type", "response", "too", "can", "you", "provide", "more", "infos", "vkosuri", "The", "JSON", "reply", "be", "structured", "like", "this", "text", "text", "something", "created_at", "datetime", "NUMBER", "datetime", "NUMBER", "NUMBER", "In", "order", "for", "this", "JSON", "to", "be", "valid", "the", "single", "quotes", "need", "to", "be", "double", "quotes", "and", "the", "datetime", "shouldn", "t", "be", "there", "or", "replaced", "with", "Unix", "epoch", "maybe", "NUMBER", "alekaizer", "What", "kind", "of", "info", "should", "I", "provide", "gunthercox", "how", "about", "add", "this", "feature", "to", "Chatterbot", "More", "information", "LINK", "text", "translate", "translate", "text", "python", "Any", "comments", "If", "it", "be", "feasible", "to", "add", "preprocesser", "i", "will", "make", "PR", "otherwise", "i", "will", "add", "this", "to", "chatterbot", "tricks", "LINK", "tricks", "Python", "def", "translate_text", "chatbot", "statement", "target", "Translates", "text", "into", "the", "target", "language", "NUMBER", "Target", "must", "be", "an", "ISO", "NUMBER", "NUMBER", "language", "code", "NUMBER", "See", "LINK", "reference", "supported_languages", "from", "google", "NUMBER", "cloud", "import", "translate", "translate_client", "translate", "NUMBER", "Client", "Text", "can", "also", "be", "a", "sequence", "of", "strings", "in", "which", "case", "this", "method", "will", "return", "a", "sequence", "of", "results", "for", "each", "text", "NUMBER", "result", "translate_client", "NUMBER", "translate", "statement", "NUMBER", "text", "target_language", "target", "Input", "language", "result", "input", "Translated", "language", "result", "translatedText", "Detected", "source", "language", "result", "detectedSourceLanguage", "statement", "NUMBER", "text", "str", "result", "translatedText", "return", "statement", "I", "be", "trying", "to", "implement", "an", "application", "where", "several", "users", "exists", "and", "each", "user", "can", "have", "many", "chatterbots", "NUMBER", "Each", "bot", "needs", "to", "have", "its", "own", "training", "data", "NUMBER", "I", "be", "use", "mongo", "db", "as", "the", "storage", "adapter", "NUMBER", "How", "can", "I", "do", "it", "Yes", "this", "be", "possible", "you", "can", "as", "many", "as", "but", "point", "single", "storage", "adapter", "NUMBER", "For", "more", "information", "read", "LINK", "To", "be", "more", "specific", "I", "want", "to", "store", "the", "bot_id", "that", "identifies", "a", "particular", "bot", "of", "a", "user", "along", "with", "the", "training", "data", "in", "the", "collection", "ie", "statements", "NUMBER", "The", "training", "data", "of", "a", "bot", "be", "unique", "and", "be", "meant", "only", "for", "that", "particular", "bot", "unique", "training", "data", "set", "for", "each", "bot", "NUMBER", "When", "giving", "responses", "a", "bot", "will", "only", "look", "upon", "its", "own", "training", "data", "set", "by", "comparing", "the", "current", "bot_id", "to", "the", "stored", "one", "in", "the", "training", "data", "set", "NUMBER", "I", "think", "it", "be", "very", "much", "similar", "issue", "LINK", "For", "creating", "multiple", "instances", "of", "db", "on", "same", "server", "this", "link", "will", "help", "you", "LINK", "instances", "of", "mongo", "db", "on", "same", "server", "HelloJyo", "I", "be", "closing", "this", "issue", "if", "you", "need", "any", "specific", "information", "please", "feel", "free", "to", "reopen", "this", "issue", "NUMBER", "how", "can", "i", "filter", "the", "responses", "so", "that", "each", "bot", "will", "get", "responses", "that", "be", "meant", "for", "them", "NUMBER", "All", "the", "training", "data", "be", "residing", "in", "the", "same", "collection", "NUMBER", "Thus", "selecting", "a", "response", "means", "first", "check", "the", "bot_id", "which", "be", "saved", "during", "training", "of", "each", "bots", "and", "if", "the", "test", "pass", "the", "bot", "can", "have", "access", "to", "the", "particular", "response", "NUMBER", "How", "can", "I", "filter", "responses", "with", "respect", "to", "the", "bot_id", "NUMBER", "thanks", "guys", "NUMBER", "I", "m", "gonna", "give", "it", "a", "try", "The", "purpose", "of", "this", "adapter", "be", "to", "make", "use", "of", "different", "JSON", "parsing", "libraries", "such", "as", "ujson", "or", "python", "rapidjson", "NUMBER", "Example", "usage", "python", "chatbot", "chatterbot", "NUMBER", "ChatBot", "Example", "bot", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "storage_adapter", "import_path", "chatterbot", "NUMBER", "orage", "NUMBER", "CustomJsonFileStorageAdapter", "dump_func", "ujson", "NUMBER", "dumps", "load_func", "ujson", "NUMBER", "loads", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "As", "you", "can", "see", "all", "that", "has", "to", "be", "do", "be", "to", "make", "storage_adapter", "a", "dict", "with", "an", "import_path", "dump_func", "and", "load_func", "NUMBER", "both", "dump", "and", "load", "function", "default", "back", "to", "the", "stdlib", "json", "module", "NUMBER", "Note", "that", "dumps", "and", "loads", "WILL", "NOT", "WORK", "NUMBER", "This", "has", "successfully", "be", "test", "however", "I", "do", "not", "know", "if", "I", "messed", "anything", "up", "by", "accident", "which", "could", "make", "it", "function", "less", "like", "it", "should", "NUMBER", "Fixes", "NUMBER", "gunthercox", "feel", "free", "to", "merge", "whenever", "Noted", "NUMBER", "The", "reason", "I", "redid", "most", "of", "the", "I", "O", "handle", "be", "because", "the", "current", "JSON", "adapter", "uses", "File", "I", "O", "about", "NUMBER", "times", "for", "every", "filter", "call", "cause", "it", "to", "slow", "down", "a", "lot", "Not", "sure", "how", "much", "that", "matters", "on", "SSDs", "but", "I", "don", "t", "have", "any", "of", "those", "to", "test", "with", "NUMBER", "Once", "for", "every", "update", "call", "looked", "too", "much", "as", "well", "so", "I", "set", "it", "up", "to", "save", "for", "every", "get_response", "NUMBER", "I", "will", "see", "if", "change", "jsondb", "s", "source", "change", "any", "of", "this", "but", "I", "m", "fairly", "sure", "it", "s", "the", "constant", "I", "O", "that", "slows", "it", "down", "NUMBER", "At", "the", "moment", "even", "the", "default", "json", "NUMBER", "load", "and", "json", "NUMBER", "dump", "with", "the", "custom", "adapter", "be", "performing", "faster", "than", "jsondb", "so", "I", "ll", "see", "what", "I", "can", "do", "there", "NUMBER", "I", "made", "a", "PR", "to", "jsondb", "here", "LINK", "NUMBER", "Using", "my", "PR", "as", "a", "test", "I", "find", "that", "despite", "it", "be", "a", "little", "faster", "due", "to", "it", "use", "ujson", "it", "be", "still", "relatively", "slow", "NUMBER", "My", "guess", "be", "that", "the", "amount", "of", "File", "I", "O", "calls", "be", "too", "high", "which", "be", "why", "I", "propose", "to", "either", "make", "the", "amount", "of", "jsondb", "calls", "lower", "or", "implement", "the", "custom", "adapter", "which", "makes", "less", "I", "O", "calls", "NUMBER", "Above", "two", "commit", "were", "made", "to", "support", "libraries", "such", "as", "rapidjson", "which", "only", "support", "dumps", "and", "loads", "calls", "NUMBER", "martmists", "before", "push", "your", "commit", "try", "to", "runs", "test", "your", "locally", "NUMBER", "vkosuri", "if", "you", "could", "explain", "to", "me", "how", "I", "will", "but", "as", "said", "before", "I", "have", "no", "clue", "how", "to", "test", "The", "weird", "thing", "with", "this", "one", "be", "that", "be", "somehow", "fail", "on", "py", "NUMBER", "django", "NUMBER", "and", "NUMBER", "which", "I", "m", "actually", "unsure", "of", "why", "this", "error", "NUMBER", "martmists", "I", "think", "this", "will", "help", "you", "LINK", "I", "ll", "probably", "rewrite", "this", "storage", "adapter", "to", "use", "any", "dumping", "loading", "method", "as", "to", "enable", "it", "to", "use", "for", "example", "the", "erlpack", "module", "NUMBER", "I", "see", "thanks", "for", "showing", "interest", "though", "I", "m", "going", "to", "continue", "use", "this", "adapter", "myself", "and", "I", "ll", "leave", "my", "fork", "of", "the", "repo", "up", "and", "up", "to", "date", "for", "people", "who", "want", "to", "use", "it", "as", "well", "NUMBER", "I", "think", "Store", "sessions", "in", "database", "be", "important", "NUMBER", "why", "it", "not", "be", "use", "and", "I", "find", "a", "function", "NUMBER", "But", "I", "didn", "t", "find", "the", "way", "to", "use", "him", "NUMBER", "it", "be", "in", "LINK", "Each", "session", "object", "holds", "a", "queue", "of", "the", "most", "recent", "communications", "that", "have", "occur", "during", "that", "session", "NUMBER", "The", "queue", "holds", "tuples", "with", "two", "values", "each", "the", "first", "value", "be", "the", "input", "that", "the", "bot", "received", "and", "the", "second", "value", "be", "the", "response", "that", "the", "bot", "returned", "NUMBER", "very", "thanks", "gunthercox", "vkosuri", "I", "m", "use", "the", "django", "as", "in", "out", "NUMBER", "I", "ve", "notice", "that", "extra_data", "doesn", "t", "always", "arrive", "to", "my", "custom", "logic_adapter", "NUMBER", "But", "when", "I", "delete", "the", "sqlite", "NUMBER", "db", "it", "starts", "work", "again", "and", "then", "stops", "again", "NUMBER", "Is", "this", "by", "design", "Thank", "you", "NUMBER", "I", "m", "not", "intentionally", "saving", "NUMBER", "I", "m", "talking", "only", "about", "the", "statement", "from", "the", "client", "NUMBER", "You", "say", "after", "recieving", "the", "exact", "same", "statement", "the", "extra_data", "doesn", "t", "get", "pass", "to", "the", "logic", "adapter", "Is", "the", "only", "way", "to", "always", "get", "the", "extra_data", "from", "the", "client", "be", "by", "setting", "chatterbot", "to", "read_only", "True", "As", "mention", "in", "NUMBER", "cjson", "be", "use", "when", "install", "automatically", "to", "speed", "up", "NUMBER", "However", "cjson", "do", "not", "yet", "support", "Python", "NUMBER", "This", "be", "why", "I", "m", "proposing", "to", "add", "a", "similar", "method", "for", "a", "Py", "NUMBER", "version", "of", "a", "fast", "JSON", "library", "such", "as", "ujson", "or", "python", "rapidjson", "NUMBER", "This", "looks", "like", "a", "great", "format", "to", "me", "along", "with", "the", "advantages", "for", "configurable", "JSON", "libraries", "I", "d", "say", "this", "be", "something", "to", "work", "on", "NUMBER", "I", "ll", "see", "what", "I", "myself", "can", "do", "though", "I", "m", "not", "extremely", "skilled", "at", "Python", "nor", "do", "I", "understand", "the", "current", "way", "storage", "based", "on", "JSON", "works", "NUMBER", "Closing", "this", "as", "I", "ll", "be", "use", "NUMBER", "Hello", "everybody", "I", "ve", "just", "start", "with", "chatterbot", "so", "please", "excuse", "me", "if", "this", "be", "not", "relate", "to", "your", "project", "NUMBER", "When", "I", "try", "to", "get", "a", "response", "for", "a", "statement", "for", "the", "first", "time", "everything", "works", "as", "expected", "but", "when", "I", "send", "it", "again", "I", "get", "the", "following", "error", "response", "chatter", "NUMBER", "get_response", "payload", "session_id", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "input_statement", "self", "NUMBER", "input", "NUMBER", "process_input_statement", "input_item", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "input", "input_adapter", "NUMBER", "py", "line", "NUMBER", "in", "process_input_statement", "existing_statement", "self", "NUMBER", "chatbot", "NUMBER", "orage", "NUMBER", "find", "input_statement", "NUMBER", "text", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "find", "values", "NUMBER", "get", "in_response_to", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "deserialize_responses", "return", "proxy_statement", "NUMBER", "in_response_to", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "models", "NUMBER", "py", "line", "NUMBER", "in", "in_response_to", "return", "Response", "NUMBER", "objects", "NUMBER", "filter", "statement", "self", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "manager", "NUMBER", "py", "line", "NUMBER", "in", "manager_method", "return", "getattr", "self", "NUMBER", "get_queryset", "name", "args", "kwargs", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "query", "NUMBER", "py", "line", "NUMBER", "in", "filter", "return", "self", "NUMBER", "_filter_or_exclude", "False", "args", "kwargs", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "query", "NUMBER", "py", "line", "NUMBER", "in", "_filter_or_exclude", "clone", "NUMBER", "query", "NUMBER", "add_q", "Q", "args", "kwargs", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "sql", "query", "NUMBER", "py", "line", "NUMBER", "in", "add_q", "clause", "_", "self", "NUMBER", "_add_q", "q_object", "self", "NUMBER", "used_aliases", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "sql", "query", "NUMBER", "py", "line", "NUMBER", "in", "_add_q", "allow_joins", "allow_joins", "split_subq", "split_subq", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "sql", "query", "NUMBER", "py", "line", "NUMBER", "in", "build_filter", "condition", "lookup_class", "lhs", "value", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "lookups", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "rhs", "self", "NUMBER", "get_prep_lookup", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "field", "related_lookups", "NUMBER", "py", "line", "NUMBER", "in", "get_prep_lookup", "self", "NUMBER", "rhs", "target_field", "NUMBER", "get_prep_value", "self", "NUMBER", "rhs", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "field", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "get_prep_value", "return", "int", "value", "ValueError", "invalid", "literal", "for", "int", "with", "base", "NUMBER", "TAG", "be", "a", "TAG", "object", "and", "I", "have", "create", "a", "custom", "LogicAdapter", "that", "returns", "a", "TAG", "object", "after", "processing", "the", "input", "NUMBER", "Am", "I", "doing", "something", "wrong", "with", "this", "approach", "Thanks", "Tkm", "Sure", "I", "ll", "remove", "some", "business", "logic", "from", "my", "application", "but", "the", "flow", "be", "basically", "this", "NUMBER", "a", "Facebook", "messaging", "event", "be", "POSTed", "to", "my", "Django", "view", "NUMBER", "for", "each", "messaging", "event", "from", "inside", "the", "payload", "I", "do", "this", "python", "chatterbot_settings", "be", "a", "property", "that", "loads", "the", "default", "settings", "to", "create", "a", "ChatBot", "instance", "chatter", "ChatBot", "self", "NUMBER", "slug", "self", "NUMBER", "chatterbot_settings", "the", "TAG", "parses", "the", "event", "according", "to", "the", "payload", "and", "returns", "a", "TAG", "instance", "payload", "self", "NUMBER", "interaction_handler", "NUMBER", "get_payload_from", "messaging_event", "bot_slug", "self", "NUMBER", "slug", "response", "chatter", "NUMBER", "get_response", "payload", "session_id", "NUMBER", "the", "code", "of", "TAG", "python", "if", "text", "in", "messaging_event", "message", "statement", "Statement", "text", "messaging_event", "message", "text", "the", "message", "s", "text", "elif", "quick_reply", "in", "messaging_event", "message", "statement", "Statement", "json", "NUMBER", "dumps", "messaging_event", "message", "NUMBER", "I", "have", "a", "custom", "LogicAdapter", "that", "uses", "Python", "s", "difflib", "SequenceMatcher", "NUMBER", "ratio", "to", "calculate", "the", "confidence", "of", "a", "match", "and", "the", "response", "s", "text", "be", "fetch", "from", "my", "database", "NUMBER", "Before", "returning", "the", "confidence", "response", "tuple", "I", "explicitly", "call", "statement", "NUMBER", "add_response", "response", "NUMBER", "I", "send", "a", "message", "preciso", "de", "ajuda", "com", "isso", "aqui", "MongoDB", "gets", "this", "records", "NUMBER", "_id", "ObjectId", "NUMBER", "cffc", "NUMBER", "bf", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "text", "preciso", "de", "ajuda", "com", "isso", "aqui", "created_at", "ISODate", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "extra_data", "bot_slug", "blabot", "in_response_to", "text", "OK", "qual", "a", "sua", "pergunta", "occurrence", "NUMBER", "NUMBER", "_id", "ObjectId", "NUMBER", "cffc", "NUMBER", "bf", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fe", "text", "OK", "qual", "a", "sua", "pergunta", "occurrence", "NUMBER", "NUMBER", "If", "I", "send", "another", "message", "that", "will", "match", "the", "same", "response", "por", "favor", "me", "ajuda", "MongoDB", "records", "be", "NUMBER", "_id", "ObjectId", "NUMBER", "cffc", "NUMBER", "bf", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "text", "preciso", "de", "ajuda", "com", "isso", "aqui", "created_at", "ISODate", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "extra_data", "bot_slug", "blabot", "in_response_to", "text", "OK", "qual", "a", "sua", "pergunta", "occurrence", "NUMBER", "NUMBER", "_id", "ObjectId", "NUMBER", "cffc", "NUMBER", "bf", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fe", "text", "OK", "qual", "a", "sua", "pergunta", "occurrence", "NUMBER", "NUMBER", "_id", "ObjectId", "NUMBER", "d", "NUMBER", "bf", "NUMBER", "b", "NUMBER", "a", "NUMBER", "a", "text", "por", "favor", "me", "ajuda", "created_at", "ISODate", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "extra_data", "bot_slug", "blabot", "in_response_to", "text", "OK", "qual", "a", "sua", "pergunta", "occurrence", "NUMBER", "NUMBER", "If", "I", "send", "any", "of", "this", "message", "again", "I", "get", "the", "error", "message", "below", "File", "bot", "nexus", "models", "NUMBER", "py", "line", "NUMBER", "in", "reply_to", "response", "chatter", "NUMBER", "get_response", "payload", "session", "NUMBER", "id_string", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "input_statement", "self", "NUMBER", "input", "NUMBER", "process_input_statement", "input_item", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "input", "input_adapter", "NUMBER", "py", "line", "NUMBER", "in", "process_input_statement", "existing_statement", "self", "NUMBER", "chatbot", "NUMBER", "orage", "NUMBER", "find", "input_statement", "NUMBER", "text", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "find", "values", "NUMBER", "get", "in_response_to", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "deserialize_responses", "return", "proxy_statement", "NUMBER", "in_response_to", "File", "bot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "models", "NUMBER", "py", "line", "NUMBER", "in", "in_response_to", "return", "Response", "NUMBER", "objects", "NUMBER", "filter", "statement", "self", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "manager", "NUMBER", "py", "line", "NUMBER", "in", "manager_method", "return", "getattr", "self", "NUMBER", "get_queryset", "name", "args", "kwargs", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "query", "NUMBER", "py", "line", "NUMBER", "in", "filter", "return", "self", "NUMBER", "_filter_or_exclude", "False", "args", "kwargs", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "query", "NUMBER", "py", "line", "NUMBER", "in", "_filter_or_exclude", "clone", "NUMBER", "query", "NUMBER", "add_q", "Q", "args", "kwargs", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "sql", "query", "NUMBER", "py", "line", "NUMBER", "in", "add_q", "clause", "_", "self", "NUMBER", "_add_q", "q_object", "self", "NUMBER", "used_aliases", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "sql", "query", "NUMBER", "py", "line", "NUMBER", "in", "_add_q", "allow_joins", "allow_joins", "split_subq", "split_subq", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "sql", "query", "NUMBER", "py", "line", "NUMBER", "in", "build_filter", "condition", "lookup_class", "lhs", "value", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "lookups", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "rhs", "self", "NUMBER", "get_prep_lookup", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "field", "related_lookups", "NUMBER", "py", "line", "NUMBER", "in", "get_prep_lookup", "self", "NUMBER", "rhs", "target_field", "NUMBER", "get_prep_value", "self", "NUMBER", "rhs", "File", "bot", "lib", "python", "NUMBER", "site", "package", "django", "db", "models", "field", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "get_prep_value", "return", "int", "value", "ValueError", "invalid", "literal", "for", "int", "with", "base", "NUMBER", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "POST", "api", "channel", "EAAPUd", "NUMBER", "t", "NUMBER", "RMUBANyMZBlQGce", "NUMBER", "IJVbL", "NUMBER", "RQASOcsPZBZAUr", "NUMBER", "FPxR", "NUMBER", "YN", "NUMBER", "JqikKr", "NUMBER", "hZB", "NUMBER", "pBHswVhOUisbaejWZAG", "NUMBER", "EnZASncbyc", "NUMBER", "L", "NUMBER", "hZAIAwCkJVOuoQlbu", "NUMBER", "Nl", "NUMBER", "WrE", "NUMBER", "bqxaCpMBeZAkLaNjpuPpozRT", "NUMBER", "AZDZD", "webhook", "HT", "Yes", "that", "s", "correct", "NUMBER", "I", "m", "use", "TAG", "as", "the", "storage_adapter", "while", "also", "use", "the", "TAG", "Django", "app", "NUMBER", "Sorry", "I", "m", "not", "sure", "if", "I", "get", "it", "right", "NUMBER", "You", "re", "saying", "that", "I", "should", "set", "the", "DEFAULT_FILE_STORAGE", "to", "django_mongodb_engine", "from", "the", "backend", "you", "ve", "mention", "or", "add", "a", "different", "database", "to", "the", "DATABASES", "map", "Hey", "gunthercox", "any", "news", "on", "this", "Thanks", "I", "m", "get", "similar", "issue", "NUMBER", "I", "m", "use", "django", "NUMBER", "x", "and", "mongodb", "NUMBER", "The", "exception", "of", "ValueError", "invalid", "literal", "for", "int", "with", "base", "NUMBER", "starts", "from", "here", "File", "Users", "dev", "chatdjango", "lib", "python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "models", "NUMBER", "py", "line", "NUMBER", "in", "in_response_to", "return", "Response", "NUMBER", "objects", "NUMBER", "filter", "statement", "self", "And", "I", "tried", "to", "switch", "to", "JSONfile", "storage", "same", "problem", "happened", "on", "this", "line", "NUMBER", "It", "seems", "there", "r", "something", "wrong", "with", "the", "Statement", "Response", "object", "who", "inherits", "from", "django", "model", "NUMBER", "Hi", "all", "NUMBER", "I", "have", "a", "same", "error", "NUMBER", "I", "want", "to", "use", "Django", "NUMBER", "and", "a", "separate", "MongoDB", "for", "bot", "data", "NUMBER", "When", "I", "tried", "to", "get", "response", "from", "bot", "I", "get", "an", "error", "invalid", "literal", "for", "int", "with", "base", "NUMBER", "NUMBER", "I", "find", "a", "bottleneck", "in", "StorageAdapter", "class", "in", "next", "lines", "python", "def", "Statement", "self", "Create", "a", "storage", "aware", "statement", "NUMBER", "import", "os", "if", "DJANGO_SETTINGS_MODULE", "in", "os", "NUMBER", "environ", "from", "chatterbot", "NUMBER", "ext", "NUMBER", "django_chatterbot", "NUMBER", "models", "import", "Statement", "return", "Statement", "else", "from", "chatterbot", "NUMBER", "conversation", "NUMBER", "atement", "import", "Statement", "statement", "Statement", "statement", "NUMBER", "orage", "self", "return", "statement", "If", "we", "use", "Django", "we", "always", "get", "Statement", "from", "django", "models", "if", "we", "even", "doesn", "t", "need", "it", "NUMBER", "Is", "it", "possible", "to", "add", "some", "option", "for", "ChatterBot", "settings", "use_django_models", "True", "False", "for", "example", "which", "would", "triggered", "what", "Statement", "instance", "we", "need", "to", "use", "I", "can", "provide", "pull", "request", "with", "this", "change", "NUMBER", "gunthercox", "Thanks", "I", "add", "pull", "request", "NUMBER", "I", "be", "trying", "to", "execute", "chatterbot", "from", "PHP", "and", "not", "get", "the", "expected", "result", "NUMBER", "I", "be", "use", "python", "NUMBER", "and", "chatterbot", "NUMBER", "from", "chatterbot", "import", "ChatBot", "import", "sys", "import", "request", "bot", "ChatBot", "Agri", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "test", "NUMBER", "response", "bot", "NUMBER", "get_response", "sys", "NUMBER", "argv", "NUMBER", "print", "response", "The", "response", "be", "not", "sent", "back", "to", "PHP", "function", "Log", "info", "cmd", "message", "response", "exec", "python", "NUMBER", "customchat", "NUMBER", "py", "message", "Log", "info", "response", "Hi", "gunthercox", "Thanks", "for", "the", "quick", "response", "NUMBER", "I", "wasn", "t", "get", "any", "error", "only", "an", "empty", "result", "so", "couldn", "t", "debug", "NUMBER", "After", "add", "debug", "code", "exec", "cmd", "message", "NUMBER", "NUMBER", "retArr", "retVal", "I", "was", "able", "to", "figure", "out", "the", "issue", "NUMBER", "The", "issue", "was", "while", "the", "function", "call", "was", "made", "from", "the", "POST", "method", "web", "nltk", "was", "be", "downloaded", "in", "var", "www", "directory", "and", "there", "was", "a", "permission", "error", "NUMBER", "The", "problem", "be", "solve", "NUMBER", "Thanks", "for", "your", "quick", "response", "NUMBER", "Error", "In", "Providing", "extra", "argument", "part", "these", "several", "lines", "of", "code", "class", "MyLogicAdapter", "LogicAdapter", "def", "__init__", "self", "kwargs", "super", "MyLogicAdapter", "self", "NUMBER", "__init__", "kwargs", "self", "NUMBER", "api_key", "kwargs", "NUMBER", "get", "secret_key", "super", "MyLogicAdapter", "self", "NUMBER", "__init__", "kwargs", "kwargs", "should", "be", "kwargs", "NUMBER", "enhancement", "In", "Directory", "structure", "part", "there", "be", "only", "one", "file", "example", "NUMBER", "Now", "I", "want", "to", "put", "adapter", "into", "directory", "NUMBER", "such", "as", "myadpters", "logic", "Myadpter", "NUMBER", "py", "Do", "we", "must", "add", "myadpters", "__init__", "NUMBER", "py", "add", "myadpters", "logic", "__init__", "NUMBER", "py", "and", "add", "content", "in", "myadpters", "logic", "__init__", "NUMBER", "py", "from", "NUMBER", "MyAdapter", "import", "MyAdapter", "yeah", "NUMBER", "but", "when", "I", "want", "to", "use", "it", "in", "ChatBot", "ChatBot", "RominYue", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "adapters", "NUMBER", "logic", "NUMBER", "MyAdapter", "it", "would", "pop", "out", "error", "when", "I", "do", "not", "add", "from", "myadapters", "import", "MyAdapter", "in", "__init__", "NUMBER", "py", "Hi", "Instead", "printing", "only", "the", "text", "value", "as", "response", "to", "the", "input", "chat", "from", "the", "user", "it", "responds", "the", "entire", "json", "output", "there", "NUMBER", "python", "NUMBER", "version", "Python", "NUMBER", "python", "NUMBER", "m", "django", "version", "NUMBER", "python", "NUMBER", "m", "chatterbot", "version", "NUMBER", "Input", "NUMBER", "Expected", "output", "NUMBER", "NUMBER", "But", "the", "output", "I", "get", "text", "b", "extra_data", "text", "NUMBER", "NUMBER", "in_response_to", "created_at", "datetime", "NUMBER", "datetime", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Workaround", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "Modified", "the", "below", "in", "views", "NUMBER", "py", "response_data", "text", "str", "response_data", "response_data", "text", "response", "NUMBER", "text", "Please", "fix", "this", "issue", "NUMBER", "Regards", "Goutham", "GTM", "I", "put", "NUMBER", "NUMBER", "data", "in", "mongo", "DB", "now", "NUMBER", "The", "following", "code", "will", "make", "the", "query", "speed", "too", "slow", "NUMBER", "Response_query", "self", "NUMBER", "atements", "NUMBER", "distinct", "in_response_to", "NUMBER", "text", "I", "need", "action", "to", "improve", "conversation", "speed", "NUMBER", "Can", "you", "recommend", "it", "thank", "you", "NUMBER", "Please", "explain", "in", "more", "detail", "NUMBER", "Thank", "you", "NUMBER", "I", "would", "say", "use", "elastic", "search", "could", "be", "a", "better", "choice", "NUMBER", "But", "a", "bit", "of", "work", "involved", "NUMBER", "LINK", "py", "blob", "master", "docs", "index", "NUMBER", "rst", "I", "be", "going", "to", "test", "this", "and", "will", "let", "you", "know", "NUMBER", "Once", "data", "be", "in", "elastic", "you", "can", "visualize", "and", "can", "do", "a", "lot", "more", "for", "free", "use", "kibana", "NUMBER", "a", "new", "adapter", "needs", "to", "be", "write", "but", "it", "s", "not", "that", "difficult", "NUMBER", "I", "will", "not", "use", "mongodb", "NUMBER", "Please", "suggest", "a", "reference", "NUMBER", "Thank", "you", "NUMBER", "vusdo", "You", "need", "to", "install", "elastic", "search", "if", "you", "want", "to", "use", "for", "millions", "bill", "of", "records", "and", "also", "text", "based", "search", "be", "very", "fast", "NUMBER", "LINK", "to", "install", "elasticsearch", "logstash", "and", "kibana", "elk", "stack", "on", "ubuntu", "NUMBER", "NUMBER", "Install", "elastic", "and", "kibana", "NUMBER", "You", "don", "t", "need", "Logstash", "NUMBER", "Then", "use", "this", "lib", "to", "manipulate", "data", "insert", "search", "etc", "NUMBER", "LINK", "py", "blob", "master", "docs", "index", "NUMBER", "rst", "NUMBER", "This", "all", "have", "a", "learning", "curve", "if", "you", "be", "not", "use", "elastic", "search", "already", "NUMBER", "Let", "me", "know", "if", "you", "have", "more", "question", "NUMBER", "I", "be", "happy", "to", "learn", "a", "new", "solution", "NUMBER", "Share", "elasticsearch", "storage", "adapter", "Thank", "you", "NUMBER", "When", "use", "a", "mongoDB", "database", "I", "sometimes", "manually", "need", "to", "save", "the", "response", "in", "the", "database", "NUMBER", "Assuming", "st", "NUMBER", "and", "st", "NUMBER", "be", "two", "valid", "statements", "chatbot", "NUMBER", "learn_response", "st", "NUMBER", "st", "NUMBER", "do", "not", "seem", "to", "do", "anything", "NUMBER", "Any", "suggestions", "Can", "this", "possibly", "be", "happening", "because", "read_only", "be", "equal", "to", "True", "I", "rewrote", "the", "learn_response", "method", "but", "I", "think", "this", "flag", "still", "prevents", "from", "write", "the", "database", "NUMBER", "The", "goal", "be", "essentially", "to", "write", "only", "specific", "responses", "based", "on", "some", "feedback", "NUMBER", "Is", "it", "possible", "to", "make", "it", "so", "that", "it", "doesn", "t", "learn", "all", "of", "the", "responses", "but", "only", "some", "I", "think", "this", "will", "do", "the", "job", "thanks", "I", "have", "to", "use", "multiple", "Logic", "adapters", "as", "in", "my", "case", "I", "have", "tons", "of", "queries", "based", "on", "different", "request", "NUMBER", "But", "I", "be", "not", "sure", "how", "Logic", "adapters", "will", "route", "or", "determine", "which", "adapters", "be", "most", "appropriate", "NUMBER", "I", "will", "be", "use", "elastic", "search", "for", "data", "query", "and", "there", "be", "billions", "of", "records", "NUMBER", "I", "can", "not", "allow", "NLP", "to", "search", "in", "all", "indexes", "NUMBER", "That", "will", "be", "the", "waste", "of", "resources", "NUMBER", "So", "my", "question", "be", "how", "to", "make", "it", "more", "efficient", "and", "accurate", "NUMBER", "I", "think", "this", "something", "you", "be", "looking", "LINK", "_selection", "NUMBER", "html", "Thanks", "vkosuri", "NUMBER", "gunthercox", "Is", "it", "possible", "to", "use", "this", "kind", "of", "LINK", "intent", "intent", "entity", "format", "like", "API", "NUMBER", "AI", "be", "use", "NUMBER", "If", "we", "can", "have", "that", "we", "can", "get", "the", "correct", "result", "and", "narrow", "down", "the", "request", "and", "send", "to", "the", "correct", "query", "type", "use", "routing", "then", "different", "logical", "adopters", "can", "be", "connected", "which", "could", "be", "elastic", "search", "MongoDb", "or", "Dynamodb", "or", "anything", "wherever", "data", "be", "stored", "NUMBER", "Thanks", "Gunther", "NUMBER", "Gunther", "Apart", "from", "open", "intent", "NUMBER", "io", "i", "find", "this", "URL", "this", "be", "write", "in", "python", "LINK", "Not", "sure", "how", "useful", "this", "would", "be", "but", "just", "posting", "to", "validate", "NUMBER", "Hi", "In", "my", "case", "I", "have", "two", "sets", "of", "conversations", "general", "ones", "the", "english", "corpus", "you", "provide", "movie", "conversations", "NUMBER", "and", "some", "question", "and", "answers", "that", "be", "relevant", "to", "answer", "technical", "question", "NUMBER", "The", "problem", "comes", "up", "in", "the", "fact", "that", "these", "specific", "conversations", "be", "not", "weighted", "enough", "to", "be", "selected", "by", "the", "bot", "NUMBER", "Example", "Q", "What", "be", "the", "location", "of", "this", "event", "A", "Some", "irrelevant", "answer", "from", "english", "corpus", "but", "should", "instead", "be", "the", "specific", "answer", "learned", "NUMBER", "Is", "there", "a", "way", "to", "weight", "some", "sentences", "more", "than", "others", "I", "can", "indeed", "manually", "increase", "the", "frequency", "of", "these", "phrases", "in", "the", "JSON", "MongoDB", "databases", "but", "be", "there", "any", "efficient", "way", "around", "it", "Many", "thanks", "Thanks", "this", "makes", "sense", "python", "b", "ChatBot", "NUMBER", "my", "bot", "NUMBER", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "NUMBER", "logic_adapters", "NUMBER", "NUMBER", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "NUMBER", "NUMBER", "NUMBER", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "NUMBER", "NUMBER", "NUMBER", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "NUMBER", "NUMBER", "NUMBER", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "NUMBER", "threshold", "NUMBER", "NUMBER", "default_response", "Sorry", "but", "I", "don", "t", "understand", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "b", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "trainer", "NUMBER", "train", "pair", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "statement", "self", "NUMBER", "get_or_create", "text", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "get_or_create", "statement", "self", "NUMBER", "orage", "NUMBER", "find", "statement_text", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "find", "values", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement_text", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "return", "self", "NUMBER", "_get_content", "key", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_get_content", "obj", "self", "NUMBER", "read_data", "self", "NUMBER", "path", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "read_data", "content", "db", "NUMBER", "read", "File", "usr", "lib", "python", "NUMBER", "codecs", "NUMBER", "py", "line", "NUMBER", "in", "decode", "result", "consumed", "self", "NUMBER", "_buffer_decode", "data", "self", "NUMBER", "error", "final", "UnicodeDecodeError", "utf", "NUMBER", "codec", "can", "t", "decode", "byte", "NUMBER", "xe", "NUMBER", "in", "position", "NUMBER", "invalid", "continuation", "byte", "Indents", "may", "look", "a", "little", "messed", "up", "but", "I", "can", "assure", "you", "they", "be", "fine", "on", "my", "end", "NUMBER", "martmists", "I", "guess", "you", "be", "mixing", "with", "both", "double", "quotes", "and", "single", "quotes", "I", "think", "this", "will", "work", "Python", "b", "ChatBot", "my", "bot", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "Sorry", "but", "I", "don", "t", "understand", "NUMBER", "How", "be", "that", "an", "issue", "NUMBER", "Python", "support", "both", "NUMBER", "Yours", "doesn", "t", "work", "because", "of", "an", "unescaped", "NUMBER", "The", "error", "pops", "up", "in", "b", "NUMBER", "train", "so", "why", "would", "there", "be", "an", "error", "in", "ChatBot", "s", "__init__", "be", "you", "solution", "Thanks", "martmists", "which", "version", "of", "chatter", "bot", "be", "you", "use", "i", "have", "tried", "below", "example", "it", "be", "work", "fine", "NUMBER", "bash", "env", "vkosuri", "chatterbox", "ChatterBot", "python", "m", "chatterbot", "version", "NUMBER", "Python", "from", "chatterbot", "import", "ChatBot", "b", "ChatBot", "my", "bot", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "Sorry", "but", "I", "dont", "understand", "NUMBER", "I", "m", "use", "the", "latest", "from", "pypi", "NUMBER", "NUMBER", "Again", "the", "error", "IS", "NOT", "in", "the", "__init__", "for", "ChatBot", "it", "s", "in", "the", "b", "NUMBER", "train", "gunthercox", "gonna", "wait", "for", "a", "response", "from", "you", "since", "I", "m", "afraid", "this", "guy", "doesn", "t", "know", "English", "NUMBER", "No", "do", "that", "matter", "on", "Windows", "when", "use", "chcp", "NUMBER", "just", "checked", "add", "that", "do", "NOT", "fix", "this", "NUMBER", "I", "also", "checked", "the", "windows", "NUMBER", "linux", "subsystem", "and", "it", "results", "in", "the", "same", "error", "NUMBER", "gunthercox", "The", "problem", "seems", "to", "have", "fix", "itself", "after", "deleting", "database", "NUMBER", "db", "will", "investigate", "further", "NUMBER", "Hi", "How", "hard", "will", "it", "be", "to", "Implement", "retrieval", "based", "model", "use", "Tensorflow", "as", "part", "of", "this", "project", "I", "want", "to", "use", "seq", "NUMBER", "seq", "model", "as", "a", "part", "of", "this", "improvement", "NUMBER", "Thanks", "Some", "useful", "links", "If", "you", "haven", "t", "seen", "before", "LINK", "LINK", "gunthercox", "could", "you", "please", "let", "me", "know", "what", "be", "advantages", "and", "disadvantages", "use", "seq", "NUMBER", "seq", "model", "in", "chatterbot", "Some", "reference", "LINK", "learning", "for", "chatbots", "NUMBER", "retrieval", "based", "model", "tensorflow", "LINK", "retrieval", "I", "just", "copy", "pasted", "following", "example", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "Create", "a", "new", "instance", "of", "a", "ChatBot", "bot", "ChatBot", "Default", "Response", "Example", "Bot", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ListTrainer", "Train", "the", "chat", "bot", "with", "a", "few", "responses", "bot", "NUMBER", "train", "How", "can", "I", "help", "you", "I", "want", "to", "create", "a", "chat", "bot", "Have", "you", "read", "the", "documentation", "No", "I", "have", "not", "This", "should", "help", "get", "you", "start", "LINK", "Get", "a", "response", "for", "some", "unexpect", "input", "response", "bot", "NUMBER", "get_response", "How", "do", "I", "make", "an", "omelette", "print", "response", "I", "get", "following", "error", "Traceback", "most", "recent", "call", "last", "File", "C", "Users", "ccx", "work", "pscripts", "conversationalspeech", "t", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "No", "I", "have", "not", "File", "C", "Users", "ccx", "Anaconda", "NUMBER", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "statement", "self", "NUMBER", "get_or_create", "text", "File", "C", "Users", "ccx", "Anaconda", "NUMBER", "lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "get_or_create", "statement", "self", "NUMBER", "orage", "NUMBER", "find", "statement_text", "File", "C", "Users", "ccx", "Anaconda", "NUMBER", "lib", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "find", "values", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement_text", "File", "C", "Users", "ccx", "Anaconda", "NUMBER", "lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "return", "self", "NUMBER", "_get_content", "key", "File", "C", "Users", "ccx", "Anaconda", "NUMBER", "lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_get_content", "obj", "self", "NUMBER", "read_data", "self", "NUMBER", "path", "File", "C", "Users", "ccx", "Anaconda", "NUMBER", "lib", "site", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "read_data", "obj", "decode", "content", "File", "C", "Users", "ccx", "Anaconda", "NUMBER", "lib", "site", "package", "jsondb", "compat", "NUMBER", "py", "line", "NUMBER", "in", "decode", "return", "json_decode", "value", "encoding", "utf", "NUMBER", "object_hook", "json_util", "NUMBER", "object_hook", "File", "C", "Users", "ccx", "Anaconda", "NUMBER", "lib", "json", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "loads", "return", "cls", "encoding", "encoding", "kw", "NUMBER", "decode", "s", "File", "C", "Users", "ccx", "Anaconda", "NUMBER", "lib", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "decode", "obj", "end", "self", "NUMBER", "raw_decode", "s", "idx", "_w", "s", "NUMBER", "NUMBER", "end", "File", "C", "Users", "ccx", "Anaconda", "NUMBER", "lib", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "raw_decode", "obj", "end", "self", "NUMBER", "scan_once", "s", "idx", "UnicodeDecodeError", "utf", "NUMBER", "codec", "can", "t", "decode", "byte", "NUMBER", "x", "NUMBER", "in", "position", "NUMBER", "invalid", "start", "byte", "Is", "there", "any", "resolution", "to", "this", "I", "be", "still", "unable", "to", "use", "chatterbot", "due", "to", "unicode", "issue", "NUMBER", "gunthercox", "Yes", "I", "be", "use", "the", "update", "latest", "version", "of", "both", "NUMBER", "Python", "Python", "NUMBER", "Anaconda", "NUMBER", "NUMBER", "bit", "default", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "MSC", "v", "NUMBER", "NUMBER", "NUMBER", "bit", "AMD", "NUMBER", "on", "win", "NUMBER", "Also", "I", "tried", "on", "linux", "with", "the", "same", "exact", "problem", "NUMBER", "aliabbasjp", "I", "get", "same", "issue", "when", "my", "training", "dataset", "be", "having", "some", "characters", "like", "normal", "white", "space", "be", "cause", "some", "issue", "while", "I", "copy", "data", "from", "some", "other", "editors", "which", "be", "cause", "unicode", "decode", "error", "NUMBER", "Pls", "check", "your", "input", "data", "I", "think", "that", "be", "cause", "the", "error", "NUMBER", "deepukr", "NUMBER", "gunthercox", "I", "tried", "all", "ways", "of", "giving", "examples", "but", "all", "of", "them", "fail", "like", "above", "NUMBER", "aliabbasjp", "can", "you", "try", "to", "delete", "exist", "database", "NUMBER", "db", "retrain", "your", "bot", "If", "still", "problem", "exists", "let", "us", "know", "vkosuri", "where", "be", "this", "database", "NUMBER", "db", "i", "think", "it", "will", "be", "in", "your", "current", "directory", "If", "you", "be", "use", "Ubuntu", "try", "locate", "database", "NUMBER", "db", "vkosuri", "that", "worked", "vkosuri", "gunthercox", "The", "problem", "be", "that", "I", "have", "to", "delete", "this", "database", "NUMBER", "db", "each", "time", "I", "run", "a", "new", "script", "as", "there", "be", "multiple", "bot", "scripts", "in", "a", "directory", "NUMBER", "Moreover", "same", "error", "happens", "if", "we", "pass", "unicode", "training", "statements", "in", "bot", "NUMBER", "train", "Hence", "should", "not", "be", "close", "NUMBER", "aliabbasjp", "Two", "things", "here", "i", "observed", "NUMBER", "May", "be", "it", "will", "vary", "NUMBER", "NUMBER", "Python", "NUMBER", "i", "NUMBER", "In", "python", "NUMBER", "if", "you", "train", "your", "bot", "with", "regular", "data", "it", "will", "create", "a", "new", "file", "call", "database", "NUMBER", "db", "and", "then", "your", "be", "trying", "train", "your", "bot", "with", "new", "data", "which", "has", "unicode", "values", "with", "name", "database", "NUMBER", "db", "file", "Then", "it", "be", "fail", "NUMBER", "NUMBER", "Python", "NUMBER", "x", "i", "NUMBER", "You", "won", "t", "see", "these", "failures", "NUMBER", "In", "odd", "cases", "it", "may", "fail", "NUMBER", "I", "think", "gunthercox", "have", "more", "appropriate", "answer", "on", "this", "My", "initial", "assumption", "was", "while", "python", "NUMBER", "x", "trying", "inserting", "unicdoe", "values", "into", "json", "database", "NUMBER", "db", "at", "that", "it", "was", "fail", "NUMBER", "Hi", "I", "want", "to", "access", "the", "database", "in", "which", "the", "input", "from", "the", "user", "has", "be", "stored", "NUMBER", "For", "example", "his", "name", "NUMBER", "OR", "Is", "there", "anyway", "to", "access", "a", "global", "variable", "inside", "my", "logic", "adaptor", "NUMBER", "I", "m", "get", "this", "error", "when", "trying", "to", "talk", "to", "the", "bot", "over", "localhost", "NUMBER", "What", "be", "I", "miss", "Thanks", "NUMBER", "Internal", "Server", "Error", "api", "chatterbot", "Traceback", "most", "recent", "call", "last", "File", "Library", "Python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "Library", "Python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "Library", "Python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "view", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "Library", "Python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "dispatch", "return", "handler", "request", "args", "kwargs", "File", "Library", "Python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "line", "NUMBER", "in", "post", "response_data", "response", "NUMBER", "serialize", "File", "Library", "Python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "models", "NUMBER", "py", "line", "NUMBER", "in", "serialize", "data", "in_response_to", "NUMBER", "append", "response", "NUMBER", "serialize", "AttributeError", "Response", "object", "has", "no", "attribute", "serialize", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "POST", "api", "chatterbot", "HTTP", "NUMBER", "NUMBER", "NUMBER", "which", "version", "of", "chatterbot", "be", "you", "use", "To", "get", "current", "version", "use", "this", "python", "m", "chatterbot", "version", "command", "on", "your", "terminal", "I", "m", "use", "the", "version", "from", "GitHub", "NUMBER", "Cloned", "yesterday", "NUMBER", "gunthercox", "thank", "you", "so", "much", "for", "this", "project", "and", "quick", "fix", "NUMBER", "But", "I", "m", "still", "get", "this", "error", "NUMBER", "I", "ve", "uninstalled", "the", "pip", "and", "reinstalled", "it", "NUMBER", "I", "m", "trying", "to", "run", "the", "example", "django_app", "NUMBER", "Am", "I", "doing", "something", "wrong", "to", "trigger", "this", "Thank", "you", "NUMBER", "P", "NUMBER", "S", "pip", "shows", "it", "s", "NUMBER", "EDIT", "I", "ve", "just", "test", "by", "cloning", "the", "project", "and", "the", "error", "be", "gone", "NUMBER", "Hi", "I", "need", "to", "integerate", "chatscript", "LINK", "NUMBER", "ChatScript", "such", "that", "a", "new", "Logic", "adapter", "named", "Chatscript", "be", "possible", "NUMBER", "Is", "this", "a", "good", "thing", "to", "do", "if", "yes", "which", "methods", "I", "need", "to", "implement", "And", "how", "can", "I", "start", "about", "doing", "that", "I", "need", "chatscript", "because", "it", "allows", "us", "to", "explicitly", "model", "a", "sequence", "of", "conversation", "and", "not", "like", "a", "lookup", "list", "where", "responses", "be", "looked", "up", "from", "a", "list", "database", "NUMBER", "Is", "this", "possible", "in", "chatterbot", "itself", "without", "use", "chatscript", "nltk_download_corpus", "always", "downloads", "nltk", "resources", "even", "if", "it", "s", "already", "there", "NUMBER", "It", "s", "because", "neither", "nltk", "NUMBER", "data", "NUMBER", "find", "stopwords", "NUMBER", "zip", "nor", "nltk", "NUMBER", "data", "NUMBER", "find", "stopwords", "finds", "the", "resource", "NUMBER", "Maybe", "nltk_data", "directory", "tree", "was", "flat", "at", "some", "point", "in", "the", "past", "but", "right", "now", "it", "gets", "populated", "like", "this", "bash", "corpora", "stopwords", "stopwords", "NUMBER", "zip", "wordnet", "wordnet", "NUMBER", "zip", "sentiment", "vader_lexicon", "NUMBER", "zip", "tokenizers", "punkt", "punkt", "NUMBER", "zip", "and", "so", "only", "a", "call", "like", "nltk", "NUMBER", "data", "NUMBER", "find", "corpora", "stopwords", "works", "NUMBER", "hi", "gunthercox", "I", "tried", "to", "embed", "session", "in", "my", "flask", "app", "and", "when", "I", "create", "a", "session", "I", "save", "the", "session_id", "in", "my", "database", "NUMBER", "but", "when", "I", "pass", "the", "session_id", "in", "generate_response", "then", "the", "function", "call", "the", "get", "to", "get", "the", "session", "suddenly", "the", "session", "change", "as", "well", "as", "the", "id", "how", "to", "solve", "this", "thanks", "bilalbayasut", "which", "version", "of", "chatterbot", "be", "you", "use", "Use", "python", "m", "chatterbot", "version", "in", "your", "terminal", "to", "get", "version", "vkosuri", "NUMBER", "gunthercox", "how", "to", "safely", "update", "to", "the", "latest", "thanks", "can", "I", "update", "it", "by", "simply", "pull", "origin", "and", "merge", "with", "my", "exist", "one", "thanks", "gunthercox", "I", "ve", "tried", "to", "do", "upgrade", "but", "when", "I", "checked", "the", "version", "it", "s", "still", "NUMBER", "how", "be", "the", "best", "procedure", "to", "do", "update", "via", "git", "pulling", "I", "don", "t", "which", "OS", "be", "you", "use", "If", "it", "be", "Linux", "I", "would", "recommend", "virtual", "environments", "Bash", "virtualenv", "venv", "source", "venv", "bin", "activate", "pip", "install", "upgrade", "pip", "pip", "install", "upgrade", "chatterbot", "In", "_", "Setting", "parameters", "_", "section", "I", "think", "_", "response_selection_method", "_", "and", "_", "statement_comparison_function", "_", "be", "in", "incorrect", "order", "NUMBER", "Hi", "gunthercox", "I", "means", "in", "Setting", "parameters", "LINK", "I", "try", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "response_selection_method", "chatterbot", "NUMBER", "comparisons", "NUMBER", "levenshtein_distance", "statement_comparison_function", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_first_response", "It", "get", "TypeErrors", "NUMBER", "Then", "I", "try", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "statement_comparison_function", "chatterbot", "NUMBER", "comparisons", "NUMBER", "levenshtein_distance", "response_selection_method", "chatterbot", "NUMBER", "response_selection", "NUMBER", "get_first_response", "It", "works", "great", "NUMBER", "So", "I", "think", "there", "be", "a", "mistake", "in", "an", "example", "gunthercox", "a", "useful", "tag", "I", "want", "share", "some", "of", "my", "thoughts", "here", "If", "i", "find", "unicode", "issue", "how", "i", "resolve", "those", "issue", "Recommended", "use", "virtual", "environments", "LINK", "for", "python", "NUMBER", "and", "python", "NUMBER", "LINK", "NUMBER", "python", "NUMBER", "Bash", "virtualenv", "venv", "source", "venv", "bin", "activate", "python", "chatterbot", "example", "NUMBER", "py", "python", "NUMBER", "python", "NUMBER", "m", "venv", "path", "to", "new", "virtual", "environment", "source", "venv", "bin", "activate", "python", "chatterbot", "example", "NUMBER", "py", "NUMBER", "Learn", "the", "differences", "between", "Python", "NUMBER", "NUMBER", "LINK", "future", "NUMBER", "org", "compatible_idioms", "NUMBER", "html", "NUMBER", "Use", "Futurize", "LINK", "future", "NUMBER", "org", "automatic_conversion", "NUMBER", "html", "or", "Modernize", "LINK", "modernize", "NUMBER", "readthedocs", "NUMBER", "org", "en", "latest", "to", "update", "your", "code", "e", "NUMBER", "g", "NUMBER", "pip", "install", "future", "NUMBER", "Use", "Pylint", "LINK", "to", "help", "make", "sure", "you", "don", "t", "regress", "on", "your", "Python", "NUMBER", "support", "pip", "install", "pylint", "NUMBER", "Use", "caniusepython", "NUMBER", "LINK", "to", "find", "out", "which", "of", "your", "NUMBER", "Consider", "use", "optional", "static", "type", "checking", "to", "make", "sure", "your", "type", "usage", "works", "in", "both", "Python", "NUMBER", "NUMBER", "e", "NUMBER", "g", "NUMBER", "use", "mypy", "LINK", "lang", "NUMBER", "org", "to", "check", "your", "typing", "under", "both", "Python", "NUMBER", "Python", "NUMBER", "NUMBER", "Just", "update", "to", "the", "latest", "git", "version", "of", "chatterbot", "and", "I", "now", "get", "this", "error", "when", "run", "chatbot", "ChatBot", "NUMBER", "command", "NUMBER", "Before", "the", "update", "everything", "worked", "quite", "well", "NUMBER", "Do", "I", "need", "to", "change", "something", "in", "the", "way", "I", "initialize", "a", "bot", "I", "did", "not", "update", "it", "for", "a", "long", "time", "actually", "so", "it", "s", "possible", "I", "miss", "something", "NUMBER", "Thanks", "chatbot", "ChatBot", "Chatbotname", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMeaningAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ApproximateSentenceMatchAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMatchAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "input_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "input", "NUMBER", "VariableInputTypeAdapter", "output_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "output", "NUMBER", "OutputFormatAdapter", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "database", "Chatbotname", "database", "tie_breaking_method", "random_response", "Traceback", "most", "recent", "call", "last", "File", "D", "Projects", "Python", "Code", "server", "app", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "File", "D", "Projects", "Python", "Code", "server", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "utils", "NUMBER", "validate_adapter_class", "storage_adapter", "StorageAdapter", "File", "D", "Projects", "Python", "Code", "server", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "validate_adapter_class", "if", "not", "issubclass", "import_module", "validate_class", "Adapter", "File", "D", "Projects", "Python", "Code", "server", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "module", "importlib", "NUMBER", "import_module", "module_path", "File", "C", "Python", "NUMBER", "lib", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "return", "_bootstrap", "NUMBER", "_gcd_import", "name", "level", "package", "level", "File", "TAG", "line", "NUMBER", "in", "_gcd_import", "File", "TAG", "line", "NUMBER", "in", "_find_and_load", "File", "TAG", "line", "NUMBER", "in", "_find_and_load_unlocked", "ImportError", "No", "module", "named", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "chatterbot", "NUMBER", "adapters", "be", "not", "a", "package", "Oh", "haha", "NUMBER", "Well", "NUMBER", "Obviously", "i", "just", "had", "to", "remove", "NUMBER", "adapters", "from", "all", "adapters", "I", "see", "the", "change", "in", "directories", "now", "NUMBER", "Sorry", "to", "bother", "NUMBER", "Will", "keep", "digging", "into", "further", "things", "that", "change", "NUMBER", "Sorry", "about", "this", "NUMBER", "Now", "I", "get", "another", "warning", "that", "tie", "breaking", "method", "be", "deprecate", "NUMBER", "But", "the", "link", "to", "the", "documentation", "be", "not", "there", "anymore", "LINK", "_selection", "NUMBER", "html", "setting", "the", "response", "selection", "method", "It", "s", "not", "hard", "to", "find", "it", "but", "still", "this", "be", "a", "minor", "bug", "I", "think", "NUMBER", "Attempting", "to", "import", "from", "chatterbot", "import", "ChatBot", "yields", "error", "root", "host", "python", "NUMBER", "Python", "NUMBER", "default", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GCC", "NUMBER", "on", "linux", "Type", "help", "copyright", "credits", "or", "license", "for", "more", "information", "NUMBER", "from", "chatterbot", "import", "ChatBot", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "chatterbot", "import", "ChatBot", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "input", "import", "InputAdapter", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "input", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "terminal", "import", "TerminalAdapter", "File", "usr", "local", "lib", "python", "NUMBER", "site", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "input", "terminal", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "NUMBER", "utils", "import", "input_function", "ImportError", "cannot", "import", "name", "input_function", "Python", "NUMBER", "was", "just", "recently", "release", "and", "I", "m", "not", "really", "sure", "what", "s", "cause", "this", "import", "error", "NUMBER", "Thanks", "we", "haven", "t", "add", "it", "to", "in", "Travis", "also", "You", "could", "try", "it", "Python", "earlier", "version", "at", "this", "moment", "NUMBER", "Cheers", "Alright", "thanks", "I", "just", "ported", "my", "project", "to", "Python", "NUMBER", "and", "other", "modules", "and", "this", "was", "the", "only", "one", "that", "wasn", "t", "work", "NUMBER", "Correct", "deleting", "the", "utils", "and", "adapters", "folders", "fix", "the", "problem", "NUMBER", "Is", "there", "a", "way", "to", "set", "the", "base_word", "to", "a", "custom", "word", "instead", "of", "random", "or", "use", "a", "user", "account", "for", "training", "the", "bot", "Looks", "good", "one", "question", "on", "session", "management", "Please", "correct", "me", "if", "i", "be", "wrong", "Developer", "He", "has", "create", "a", "session", "object", "and", "reuse", "the", "same", "End", "user", "i", "NUMBER", "e", "If", "a", "user", "install", "chatbot", "on", "his", "machine", "start", "an", "basic", "example", "there", "be", "no", "session", "management", "I", "didn", "t", "understand", "NUMBER", "How", "will", "the", "bot", "talk", "to", "the", "world", "For", "example", "I", "was", "going", "to", "develop", "a", "ZeroMQ", "input", "output", "NUMBER", "How", "I", "m", "supposed", "to", "integrate", "it", "with", "the", "bot", "in", "the", "future", "when", "there", "be", "no", "input", "output", "adapters", "I", "thought", "it", "was", "a", "nice", "idea", "to", "have", "a", "base", "class", "and", "then", "people", "could", "install", "the", "desired", "adapters", "NUMBER", "Didn", "t", "understand", "why", "you", "re", "remove", "it", "NUMBER", "I", "will", "try", "to", "write", "below", "what", "i", "understood", "gunthercox", "please", "correct", "if", "i", "wrong", "NUMBER", "ChatterBot", "maintainers", "to", "focus", "on", "the", "communication", "aspect", "This", "means", "user", "look", "on", "only", "chatterbot", "specific", "data", "not", "looking", "for", "integration", "which", "currently", "chatterbot", "provide", "HipChat", "Microsoft", "etc", "NUMBER", "Python", "from", "chatterbot", "NUMBER", "trainers", "import", "ListTrainer", "conversation", "Hello", "Hi", "there", "How", "be", "you", "doing", "I", "m", "doing", "great", "NUMBER", "That", "be", "good", "to", "hear", "Thank", "you", "NUMBER", "You", "re", "welcome", "NUMBER", "chatbot", "NUMBER", "set_trainer", "ListTrainer", "chatbot", "NUMBER", "train", "conversation", "How", "will", "the", "bot", "talk", "to", "the", "world", "chatterbot", "will", "expose", "its", "Northbound", "API", "to", "end", "user", "use", "that", "API", "his", "her", "develop", "their", "application", "NUMBER", "gunthercox", "and", "vkosuri", "If", "I", "understood", "well", "there", "will", "be", "some", "kind", "of", "asynchronous", "Statement", "and", "maybe", "a", "session", "to", "have", "conversations", "user", "relate", "with", "external", "conversations", "API", "expose", "or", "consumed", "and", "eventually", "the", "Statement", "will", "appear", "in", "brain", "data", "and", "or", "will", "be", "show", "in", "the", "user", "conversation", "NUMBER", "Said", "that", "it", "will", "expand", "change", "how", "ChatterBot", "interact", "and", "how", "logic", "adapters", "process", "the", "new", "information", "NUMBER", "It", "will", "enable", "to", "integrate", "with", "Zapier", "IFTTT", "some", "kind", "of", "API", "that", "send", "receive", "push", "notifications", "NUMBER", "Well", "will", "expose", "API", "to", "integrate", "NUMBER", "Right", "or", "I", "went", "too", "far", "Thanks", "JimTheBot", "be", "a", "bot", "run", "on", "sgoblin", "s", "experimental", "Rhubarb", "Chat", "platform", "NUMBER", "It", "has", "now", "be", "add", "to", "the", "examples", "section", "NUMBER", "gunthercox", "When", "I", "add", "new", "Questions", "Answers", "to", "the", "exist", "corpus", "I", "use", "conversations", "and", "then", "on", "training", "it", "again", "the", "bot", "doesn", "t", "respond", "with", "the", "newly", "add", "question", "NUMBER", "NUMBER", "LINK", "c", "NUMBER", "cb", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "cd", "NUMBER", "cdd", "NUMBER", "bae", "NUMBER", "png", "NUMBER", "LINK", "c", "NUMBER", "cb", "NUMBER", "e", "NUMBER", "NUMBER", "da", "NUMBER", "d", "NUMBER", "d", "NUMBER", "dfccecb", "NUMBER", "png", "NUMBER", "LINK", "c", "NUMBER", "cb", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "e", "NUMBER", "b", "NUMBER", "c", "NUMBER", "b", "NUMBER", "png", "Apologise", "in", "advance", "if", "the", "question", "has", "be", "asked", "NUMBER", "Thank", "you", "NUMBER", "gunthercox", "To", "be", "more", "specific", "NUMBER", "I", "add", "the", "entry", "_", "This", "be", "a", "test", "question", "Testing", "NUMBER", "_", "to", "the", "english", "NUMBER", "conversations", "corpus", "NUMBER", "LINK", "c", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "deda", "NUMBER", "c", "NUMBER", "png", "NUMBER", "Now", "I", "created", "a", "bot", "and", "trained", "it", "with", "the", "already", "modify", "and", "saved", "conversations", "corpus", "NUMBER", "So", "basically", "the", "program", "gets", "response", "from", "the", "bot", "for", "This", "be", "a", "test", "question", "NUMBER", "NUMBER", "LINK", "c", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "aed", "NUMBER", "c", "NUMBER", "eabc", "NUMBER", "e", "NUMBER", "png", "NUMBER", "This", "was", "followed", "by", "run", "the", "code", "NUMBER", "Instead", "of", "get", "_", "Testing", "NUMBER", "_", "as", "the", "answer", "I", "get", "some", "random", "answer", "as", "highlight", "NUMBER", "NUMBER", "LINK", "c", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "b", "NUMBER", "b", "NUMBER", "png", "I", "did", "not", "modify", "the", "code", "just", "modify", "the", "corpus", "NUMBER", "Although", "I", "did", "try", "pip", "install", "NUMBER", "upgrade", "and", "get", "the", "same", "results", "NUMBER", "melvinabraham", "any", "update", "on", "this", "Try", "to", "search", "your", "test", "statement", "exists", "in", "database", "NUMBER", "db", "or", "not", "if", "it", "be", "there", "then", "your", "data", "be", "trained", "NUMBER", "If", "you", "try", "to", "get", "more", "specific", "output", "you", "have", "to", "use", "comparison", "function", "LINK", "best", "match", "adapter", "vkosuri", "gunthercox", "With", "reference", "to", "the", "previous", "answer", "the", "bot", "was", "supposed", "to", "answer", "for", "This", "be", "a", "test", "question", "as", "Testing", "NUMBER", "NUMBER", "On", "searching", "the", "database", "NUMBER", "db", "file", "for", "this", "question", "I", "find", "out", "that", "it", "exists", "NUMBER", "LINK", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "aea", "NUMBER", "e", "NUMBER", "a", "NUMBER", "a", "NUMBER", "png", "Compiling", "the", "testcase", "I", "get", "the", "same", "output", "NUMBER", "LINK", "d", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "da", "NUMBER", "c", "NUMBER", "f", "NUMBER", "fd", "NUMBER", "png", "melvinabraham", "thanks", "did", "you", "add", "statement", "comparison", "adapters", "And", "also", "please", "read", "LINK", "statement", "comparison", "vkosuri", "Issue", "resolve", "A", "comma", "went", "haywire", "in", "the", "NUMBER", "json", "file", "NUMBER", "Sorry", "and", "thank", "you", "melvinabraham", "no", "problem", "vkosuri", "How", "do", "I", "link", "your", "awesome", "bot", "and", "my", "custom", "corpus", "with", "an", "android", "application", "screenshot", "from", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "LINK", "c", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "f", "NUMBER", "png", "buildithub", "how", "you", "be", "trying", "Did", "you", "see", "this", "error", "while", "run", "example_app", "Could", "you", "please", "explain", "a", "bit", "your", "problem", "so", "that", "be", "easier", "to", "help", "yes", "I", "run", "example_app", "and", "the", "above", "problem", "be", "occuring", "NUMBER", "This", "be", "happening", "since", "NUMBER", "version", "NUMBER", "Before", "that", "I", "use", "NUMBER", "version", "of", "the", "chatterbot", "and", "there", "was", "no", "problem", "NUMBER", "I", "can", "able", "reproduce", "this", "issue", "I", "use", "NUMBER", "version", "s", "django_app", "with", "NUMBER", "s", "chatterbot", "NUMBER", "Still", "not", "work", "NUMBER", "Only", "work", "with", "NUMBER", "I", "use", "NUMBER", "version", "s", "django_app", "with", "NUMBER", "s", "chatterbot", "NUMBER", "It", "s", "work", "NUMBER", "I", "be", "still", "having", "this", "issue", "run", "the", "newest", "example", "code", "with", "chatterbot", "NUMBER", "django", "NUMBER", "and", "python", "NUMBER", "Any", "ideas", "Same", "answer", "I", "use", "NUMBER", "version", "s", "django_app", "with", "NUMBER", "s", "chatterbot", "NUMBER", "It", "s", "work", "NUMBER", "I", "m", "planning", "to", "create", "corpus", "directory", "inside", "my", "Django", "project", "say", "I", "have", "the", "project", "call", "funstuff", "funstuff", "__corpus", "__data", "__english", "_greetings", "NUMBER", "json", "__funstuff", "__settings", "NUMBER", "py", "__manage", "NUMBER", "py", "I", "like", "to", "modify", "the", "settings", "NUMBER", "py", "file", "like", "this", "Chatterbot", "CHATTERBOT", "name", "Fun", "stuff", "bot", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "training_data", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "greetings", "funstuff", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "greetings", "Finally", "I", "want", "NUMBER", "manage", "NUMBER", "py", "train", "should", "pick", "those", "corpus", "file", "and", "start", "the", "training", "You", "could", "more", "documentation", "from", "here", "LINK", "training", "Bash", "python", "manage", "NUMBER", "py", "train", "vkosuri", "Nope", "still", "it", "s", "not", "picking", "my", "Django", "project", "corpus", "file", "NUMBER", "Can", "you", "replicate", "my", "above", "setup", "and", "give", "me", "solution", "Thanks", "gunthercox", "With", "reference", "NUMBER", "I", "felt", "introduce", "jinja", "NUMBER", "template", "into", "corpus", "A", "more", "useful", "to", "users", "and", "developers", "NUMBER", "An", "example", "located", "here", "LINK", "gunthercox", "any", "comments", "suggestion", "before", "implement", "this", "feature", "Agreed", "By", "make", "another", "directory", "template", "will", "make", "a", "separation", "from", "raw", "data", "tree", "corpus", "data", "conversation", "NUMBER", "corups", "NUMBER", "json", "template", "conversation", "NUMBER", "temp", "NUMBER", "corpus", "NUMBER", "json", "Python", "def", "read_corpus_from_template", "self", "template_file_name", "Got", "other", "ideas", "Instead", "modifying", "everythin", "can", "write", "like", "this", "Questions", "NUMBER", "Will", "it", "work", "as", "a", "long", "term", "solution", "NUMBER", "will", "address", "template", "mechanism", "I", "will", "document", "this", "soon", "Json", "conversations", "What", "s", "you", "name", "bot", "NUMBER", "name", "How", "many", "years", "bot", "NUMBER", "years", "Python", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "trainers", "import", "ListTrainer", "from", "jinja", "NUMBER", "import", "Environment", "FileSystemLoader", "import", "json", "import", "os", "Jinja", "NUMBER", "corpus", "template", "THIS_DIR", "os", "NUMBER", "path", "NUMBER", "dirname", "os", "NUMBER", "path", "NUMBER", "abspath", "__file__", "env", "Environment", "loader", "FileSystemLoader", "THIS_DIR", "trim_blocks", "True", "properties", "name", "Chatterbot", "years", "NUMBER", "corpus_template", "env", "NUMBER", "get_template", "example", "NUMBER", "corpus", "NUMBER", "json", "NUMBER", "render", "bot", "properties", "print", "corpus_template", "corpus_data", "json", "NUMBER", "loads", "corpus_template", "Train", "chatterbot", "chatterbot", "ChatBot", "Template", "Training", "Example", "chatterbot", "NUMBER", "set_trainer", "ListTrainer", "for", "pair", "in", "corpus_data", "conversations", "chatterbot", "NUMBER", "train", "pair", "gunthercox", "Agreed", "totally", "with", "you", "If", "above", "example", "will", "be", "useful", "others", "i", "will", "add", "this", "example", "in", "example", "section", "NUMBER", "I", "really", "liked", "Personas", "Any", "future", "plan", "on", "this", "NUMBER", "Thank", "you", "By", "looking", "into", "Repo", "LINK", "en", "us", "foundation", "alice", "i", "think", "we", "need", "update", "many", "conversations", "NUMBER", "I", "be", "start", "update", "few", "important", "one", "x", "science", "x", "food", "x", "drugs", "x", "bot", "profile", "x", "psychology", "x", "politics", "x", "humor", "x", "history", "x", "gossip", "x", "emotion", "x", "ai", "knowledge", "x", "literature", "x", "movies", "x", "money", "x", "sports", "gunthercox", "any", "comments", "suggestion", "on", "this", "PR", "I", "almost", "do", "except", "knowledge", "I", "ll", "make", "another", "PR", "soon", "gunthercox", "i", "will", "re", "submit", "knowledge", "corpus", "some", "other", "time", "NUMBER", "Any", "comments", "suggestions", "If", "he", "agrres", "re", "use", "can", "we", "use", "this", "stuff", "Is", "there", "any", "sprcific", "mechanism", "license", "request", "change", "gunthercox", "any", "update", "gunthercox", "thank", "you", "very", "much", "can", "you", "explain", "in", "a", "default", "setup", "how", "a", "long", "list", "of", "responses", "will", "change", "the", "possible", "weighty", "of", "response", "from", "say", "doing", "them", "in", "separate", "lsits", "NUMBER", "That", "be", "how", "do", "a", "list", "of", "responses", "weight", "the", "setup", "to", "move", "through", "to", "those", "responses", "NUMBER", "I", "be", "ask", "mainly", "to", "understand", "how", "to", "author", "these", "that", "be", "when", "to", "keep", "a", "long", "list", "going", "as", "oppose", "to", "make", "another", "list", "NUMBER", "So", "then", "the", "difference", "between", "do", "this", "chatterbot", "NUMBER", "train", "How", "be", "you", "I", "be", "good", "NUMBER", "chatterbot", "NUMBER", "train", "That", "be", "good", "to", "hear", "NUMBER", "Thank", "you", "compared", "to", "do", "them", "in", "a", "list", "chatterbot", "NUMBER", "train", "How", "be", "you", "I", "be", "good", "NUMBER", "That", "be", "good", "to", "hear", "NUMBER", "Thank", "you", "You", "be", "welcome", "NUMBER", "thanks", "Steve", "Thanks", "ok", "that", "came", "off", "as", "a", "dumb", "question", "I", "was", "looking", "for", "the", "next", "level", "of", "detail", "or", "better", "yet", "I", "should", "have", "just", "explained", "my", "issue", "NUMBER", "we", "have", "a", "chatterbot", "setup", "work", "with", "slack", "wonderful", "program", "and", "setup", "thanks", "and", "in", "our", "code", "the", "ability", "to", "correct", "on", "the", "fly", "NUMBER", "So", "this", "way", "as", "one", "current", "approach", "I", "can", "start", "with", "nothing", "then", "start", "with", "a", "question", "and", "after", "that", "answer", "live", "just", "use", "correction", "as", "the", "better", "answer", "NUMBER", "And", "build", "up", "a", "conversation", "that", "way", "NUMBER", "What", "the", "issue", "be", "I", "appear", "to", "be", "get", "too", "many", "latter", "matching", "responses", "to", "my", "input", "question", "then", "my", "answers", "NUMBER", "So", "a", "never", "said", "before", "who", "be", "you", "matches", "to", "the", "question", "be", "you", "a", "bot", "rather", "than", "the", "answer", "yes", "I", "be", "a", "AI", "chatbot", "my", "name", "be", "ivbot", "NUMBER", "It", "hit", "me", "that", "this", "live", "correction", "method", "just", "creates", "two", "phrase", "length", "Q", "then", "A", "lists", "rather", "than", "the", "longer", "conversation", "lists", "and", "that", "might", "be", "why", "this", "be", "happening", "which", "means", "I", "should", "abandon", "this", "technique", "and", "go", "to", "the", "more", "conventioanl", "premaking", "lists", "so", "that", "drove", "my", "original", "question", "NUMBER", "It", "could", "be", "that", "I", "have", "a", "different", "mistake", "in", "my", "code", "that", "be", "cause", "this", "too", "NUMBER", "I", "be", "use", "logic_adapter", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "statement_comparison_function", "synset_distance", "any", "suggestions", "appreciated", "NUMBER", "thanks", "steve", "I", "want", "to", "request", "if", "it", "be", "possible", "to", "encode", "the", "response", "from", "chatterbot", "with", "utf", "NUMBER", "because", "in", "the", "moment", "it", "be", "an", "object", "as", "far", "as", "I", "know", "and", "that", "be", "problematic", "for", "the", "use", "with", "special", "characters", "and", "umlauts", "\u00e4", "\u00f6", "\u00fc", "NUMBER", "Python", "be", "giving", "me", "the", "following", "error", "Traceback", "most", "recent", "call", "last", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "telepot", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "collector", "callback", "item", "File", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "handle", "bot", "NUMBER", "sendMessage", "chat_id", "str", "response", "UnicodeEncodeError", "ascii", "codec", "can", "t", "encode", "character", "u", "ufffd", "in", "position", "NUMBER", "ordinal", "not", "in", "range", "NUMBER", "_I", "be", "use", "Chatterbot", "with", "the", "Telegram", "API_", "The", "code", "for", "this", "be", "usr", "bin", "env", "python", "code", "utf", "NUMBER", "NUMBER", "def", "handle", "msg", "global", "chat_id", "chat_id", "msg", "chat", "id", "command", "msg", "text", "NUMBER", "encode", "utf", "NUMBER", "Incoming", "text", "from", "telegramuser", "response", "susan", "NUMBER", "get_response", "command", "response", "from", "chatterbot", "to", "the", "given", "text", "bot", "NUMBER", "sendMessage", "chat_id", "str", "response", "trys", "to", "reply", "response", "to", "the", "telegramchat", "I", "tried", "it", "with", "both", "version", "of", "the", "headers", "but", "for", "that", "it", "doesnt", "make", "any", "difference", "NUMBER", "You", "be", "right", "there", "was", "a", "issue", "in", "my", "encoding", "NUMBER", "Thanks", "for", "your", "help", "You", "can", "close", "this", "issue", "NUMBER", "ThomasKoscheck", "can", "you", "post", "how", "you", "solve", "your", "problem", "i", "be", "facing", "the", "same", "issue", "i", "cant", "use", "arabic", "with", "chatterbot", "mouhsinelonly", "This", "be", "my", "solution", "def", "on_chat_message", "self", "msg", "global", "chat_id", "content_type", "chat_type", "chat_id", "telepot", "NUMBER", "glance", "msg", "reload", "sys", "sys", "NUMBER", "setdefaultencoding", "utf", "NUMBER", "try", "chat_id", "msg", "chat", "id", "firstname", "msg", "from", "first_name", "NUMBER", "encode", "utf", "NUMBER", "username", "msg", "from", "username", "NUMBER", "encode", "utf", "NUMBER", "The", "bold", "ones", "be", "the", "important", "ones", "NUMBER", "i", "solve", "another", "way", "by", "use", "python", "NUMBER", "and", "exporting", "the", "envitrenment", "encoding", "for", "python", "NUMBER", "thank", "you", "On", "Mon", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Mallikarjunarao", "Kosuri", "TAG", "write", "correct", "format", "def", "on_chat_message", "self", "msg", "global", "chat_id", "content_type", "chat_type", "chat_id", "telepot", "NUMBER", "glance", "msg", "reload", "sys", "sys", "NUMBER", "setdefaultencoding", "utf", "NUMBER", "try", "chat_id", "msg", "chat", "id", "firstname", "msg", "from", "first_name", "NUMBER", "encode", "utf", "NUMBER", "username", "msg", "from", "username", "NUMBER", "encode", "utf", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "\u0645\u062d\u0633\u0646", "\u0628\u062e\u064a\u0634", "\u0645\u062f\u064a\u0631", "\u0642\u0633\u0645", "\u0627\u0644\u0628\u0631\u0645\u062c\u0629", "\u0628\u0645\u0631\u0643\u0632", "\u0627\u0644\u062a\u0639\u0644\u064a\u0645", "\u0639\u0646", "\u0628\u0639\u062f", "\u0643\u0644\u064a\u0629", "\u0627\u0644\u0639\u0644\u0648\u0645", "\u0627\u0644\u0634\u0631\u0639\u064a\u0629", "\u0645\u0633\u0642\u0637", "\u0639\u0645\u0627\u0646", "\u0627\u0644\u0645\u062d\u0645\u0648\u0644", "NUMBER", "I", "get", "this", "error", "can", "you", "help", "me", "please", "Discovered", "a", "bug", "when", "test", "the", "django_chatterbot", "LINK", "_chatterbot", "NUMBER", "This", "patch", "solves", "the", "problem", "NUMBER", "gunthercox", "I", "see", "NUMBER", "I", "ll", "confirm", "it", "tomorrow", "and", "let", "you", "know", "NUMBER", "Thanks", "Perhaps", "a", "notice", "This", "be", "no", "longer", "actively", "maintained", "with", "link", "to", "the", "well", "maintained", "version", "would", "be", "useful", "then", "NUMBER", "My", "suggestion", "be", "to", "Identify", "the", "Corpus", "by", "IETF", "language", "tag", "LINK", "_language_tag", "rather", "than", "just", "language", "NUMBER", "What", "be", "the", "benefits", "it", "would", "allow", "for", "different", "dialects", "to", "be", "made", "independent", "as", "i", "might", "want", "to", "just", "teach", "just", "one", "of", "them", "NUMBER", "Why", "i", "m", "bringging", "this", "idea", "up", "For", "example", "the", "corpus", "for", "the", "_Portuguese_", "language", "taking", "a", "look", "at", "it", "seems", "to", "have", "mostly", "_Portuguese", "Brazilian_", "pt", "BR", "strings", "and", "some", "here", "and", "there", "in", "the", "Portuguese", "pt", "or", "pt", "PT", "NUMBER", "Using", "said", "corpus", "makes", "the", "bot", "a", "bit", "of", "biliangual", "freak", "i", "f", "im", "allow", "to", "call", "it", "that", "P", "Same", "goes", "for", "the", "english", "corpus", "which", "i", "d", "say", "not", "totally", "sure", "but", "from", "some", "expressions", "be", "_English_", "en", "or", "en", "GB", "with", "_United", "States", "English_", "en", "US", "in", "it", "NUMBER", "Chinese", "be", "another", "language", "with", "_ALOT_", "of", "dialects", "NUMBER", "but", "this", "one", "be", "an", "unkown", "to", "me", "as", "i", "have", "zero", "knowledge", "in", "the", "language", "The", "story", "goes", "on", "NUMBER", "Somehow", "the", "current", "djanog", "response", "isn", "t", "converting", "into", "JSON", "object", "it", "always", "returns", "NUMBER", "LINK", "issue", "will", "fix", "this", "error", "NUMBER", "gunthercox", "sure", "will", "work", "on", "those", "two", "test", "One", "question", "where", "do", "i", "need", "to", "add", "these", "test", "either", "in", "django", "example", "app", "test", "LINK", "_app", "test", "test_example", "NUMBER", "py", "or", "in", "django_tests", "LINK", "_django", "test_views", "NUMBER", "py", "gunthercox", "i", "be", "little", "busy", "with", "other", "tasks", "It", "may", "take", "another", "day", "or", "two", "Could", "you", "please", "let", "me", "be", "there", "any", "ETAs", "for", "new", "release", "appologies", "for", "many", "failures", "needs", "to", "learn", "python", "NUMBER", "Captured", "Traceback", "of", "thsi", "errror", "Bash", "Traceback", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "exception", "NUMBER", "py", "in", "inner", "NUMBER", "response", "get_response", "request", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "in", "_legacy_get_response", "NUMBER", "response", "self", "NUMBER", "_get_response", "request", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "in", "_get_response", "NUMBER", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "in", "_get_response", "NUMBER", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "in", "view", "NUMBER", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "in", "dispatch", "NUMBER", "return", "handler", "request", "args", "kwargs", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "in", "post", "NUMBER", "response_data", "self", "NUMBER", "chatterbot", "NUMBER", "get_response", "input_data", "chat_session", "NUMBER", "id_string", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "in", "get_response", "NUMBER", "statement", "response", "confidence", "self", "NUMBER", "generate_response", "input_statement", "session_id", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "in", "generate_response", "NUMBER", "confidence", "response", "self", "NUMBER", "logic", "NUMBER", "process", "input_statement", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "multi_adapter", "NUMBER", "py", "in", "process", "NUMBER", "confidence", "output", "adapter", "NUMBER", "process", "statement", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "best_match", "NUMBER", "py", "in", "process", "NUMBER", "confidence", "closest_match", "self", "NUMBER", "get", "input_statement", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "best_match", "NUMBER", "py", "in", "get", "NUMBER", "statement_list", "self", "NUMBER", "chatbot", "NUMBER", "orage", "NUMBER", "get_response_statements", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "storage_adapter", "NUMBER", "py", "in", "get_response_statements", "NUMBER", "statement_list", "self", "NUMBER", "filter", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "django_storage", "NUMBER", "py", "in", "filter", "NUMBER", "results", "NUMBER", "append", "self", "NUMBER", "model_to_object", "statement_object", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "django_storage", "NUMBER", "py", "in", "model_to_object", "NUMBER", "extra_data", "json", "NUMBER", "loads", "statement_model", "NUMBER", "extra_data", "encoding", "utf", "NUMBER", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "json", "__init__", "NUMBER", "py", "in", "loads", "NUMBER", "return", "cls", "encoding", "encoding", "kw", "NUMBER", "decode", "s", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "in", "decode", "NUMBER", "obj", "end", "self", "NUMBER", "raw_decode", "s", "idx", "_w", "s", "NUMBER", "NUMBER", "end", "File", "app", "NUMBER", "heroku", "python", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "in", "raw_decode", "NUMBER", "raise", "ValueError", "No", "JSON", "object", "could", "be", "decoded", "Exception", "Type", "ValueError", "at", "api", "chatterbot", "Exception", "Value", "No", "JSON", "object", "could", "be", "decoded", "Request", "information", "USER", "AnonymousUser", "And", "also", "it", "was", "fail", "due", "to", "unable", "to", "convert", "Unicode", "data", "into", "string", "I", "have", "find", "some", "issue", "will", "submit", "PR", "NUMBER", "I", "have", "made", "a", "heroku", "live", "example", "for", "chatterbot", "to", "more", "familiar", "with", "chatterbot", "and", "what", "it", "do", "NUMBER", "you", "can", "access", "this", "app", "from", "here", "LINK", "live", "example", "NUMBER", "herokuapp", "NUMBER", "com", "Any", "comments", "suggestion", "And", "alos", "source", "of", "this", "example", "you", "can", "find", "here", "LINK", "live", "example", "gunthercox", "be", "it", "possible", "add", "this", "LINK", "live", "example", "NUMBER", "herokuapp", "NUMBER", "com", "url", "in", "somewhere", "in", "documentation", "how", "can", "provide", "response", "chatbot", "NUMBER", "get_response", "Hi", "instead", "of", "use", "terminal", "I", "think", "add", "a", "properties", "object", "to", "in_response_to", "it", "will", "give", "more", "control", "to", "developer", "make", "many", "decisions", "by", "filling", "in_response", "properties", "dict", "NUMBER", "For", "example", "Json", "Can", "i", "get", "python", "square", "root", "extra_data", "in_response_to", "text", "def", "square_root", "x", "return", "math", "NUMBER", "sqrt", "x", "occurrence", "NUMBER", "properties", "style", "markdown", "code", "python", "color", "no", "I", "be", "assuming", "it", "may", "add", "extra", "overhead", "to", "chatterbot", "Any", "suggestions", "comments", "Awesome", "this", "makes", "me", "more", "clear", "NUMBER", "I", "think", "this", "could", "be", "documented", "Thanks", "Master", "I", "be", "creating", "a", "twitter", "bot", "with", "your", "project", "but", "The", "data", "received", "from", "twitter", "be", "not", "copied", "to", "the", "database", "NUMBER", "self", "NUMBER", "orage", "NUMBER", "statement", "part", "be", "not", "work", "engineer", "NUMBER", "Could", "you", "please", "let", "me", "know", "type", "adapter", "be", "you", "use", "for", "example", "Terminal", "django", "etc", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "TwitterAdapter", "I", "try", "this", "example", "but", "I", "get", "an", "error", "message", "ImportError", "No", "module", "named", "input", "thank", "you", "so", "much", "I", "think", "this", "can", "turned", "into", "question", "bot", "user", "NUMBER", "If", "user", "repeating", "same", "question", "ask", "Are", "you", "a", "robot", "NUMBER", "Restrict", "users", "flooding", "with", "chat", "message", "other", "than", "corpus", "data", "It", "would", "be", "great", "by", "convert", "chatterbot", "text", "into", "events", "NUMBER", "For", "example", "any", "suggestion", "comments", "bash", "feed", "baby", "at", "NUMBER", "Schedule", "a", "meeting", "very", "impressed", "me", "alot", "by", "looking", "this", "LINK", "do", "you", "have", "any", "comments", "on", "this", "gunthercox", "By", "looking", "into", "this", "any", "thoughts", "on", "best", "implementation", "methods", "LINK", "us", "office", "office", "NUMBER", "api", "calendar", "rest", "operations", "LINK", "apps", "calendar", "v", "NUMBER", "reference", "gunthercox", "Thanks", "I", "have", "few", "thoughts", "i", "will", "reopen", "with", "detailed", "plan", "May", "I", "know", "how", "vkosuri", "do", "the", "conversation", "from", "text", "to", "event", "action", "I", "see", "there", "be", "several", "calendar", "API", "for", "us", "to", "call", "but", "be", "you", "do", "it", "by", "the", "logical", "adapter", "I", "really", "like", "this", "example", "it", "provides", "the", "basis", "for", "interactive", "training", "of", "bots", "NUMBER", "There", "seems", "to", "be", "logical", "error", "if", "the", "user", "responds", "negatively", "to", "the", "query", "below", "NUMBER", "If", "get_feedback", "returns", "No", "the", "output", "be", "simply", "the", "original", "bot", "response", "which", "was", "incorrect", "and", "be", "assigned", "a", "confidence", "value", "of", "NUMBER", "print", "n", "Is", "this", "a", "coherent", "response", "to", "n", "NUMBER", "format", "response", "input_statement", "if", "get_feedback", "bot", "NUMBER", "learn_response", "response", "input_statement", "bot", "NUMBER", "output", "NUMBER", "process_response", "response", "confidence", "I", "be", "trying", "to", "create", "a", "web", "site", "to", "which", "i", "need", "to", "integrate", "the", "chatterbot", "NUMBER", "I", "created", "my", "own", "web", "page", "use", "Django", "NUMBER", "But", "when", "tried", "to", "integrate", "the", "chatterbot", "i", "get", "this", "error", "NUMBER", "i", "didn", "t", "use", "django_chatterbot", "and", "just", "use", "the", "chatterbot", "package", "NUMBER", "python", "manage", "NUMBER", "py", "runserver", "causes", "the", "below", "error", "Performing", "system", "checks", "NUMBER", "Unhandled", "exception", "in", "thread", "start", "by", "TAG", "Traceback", "most", "recent", "call", "last", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "autoreload", "NUMBER", "py", "line", "NUMBER", "in", "wrapper", "fn", "args", "kwargs", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "commands", "runserver", "NUMBER", "py", "line", "NUMBER", "in", "inner_run", "self", "NUMBER", "check", "display_num_errors", "True", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "base", "NUMBER", "py", "line", "NUMBER", "in", "check", "include_deployment_checks", "include_deployment_checks", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "checks", "registry", "NUMBER", "py", "line", "NUMBER", "in", "run_checks", "new_errors", "check", "app_configs", "app_configs", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "checks", "urls", "NUMBER", "py", "line", "NUMBER", "in", "check_url_config", "return", "check_resolver", "resolver", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "checks", "urls", "NUMBER", "py", "line", "NUMBER", "in", "check_resolver", "for", "pattern", "in", "resolver", "NUMBER", "url_patterns", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "functional", "NUMBER", "py", "line", "NUMBER", "in", "__get__", "res", "instance", "NUMBER", "__dict__", "self", "NUMBER", "name", "self", "NUMBER", "func", "instance", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "urlresolvers", "NUMBER", "py", "line", "NUMBER", "in", "url_patterns", "patterns", "getattr", "self", "NUMBER", "urlconf_module", "urlpatterns", "self", "NUMBER", "urlconf_module", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "functional", "NUMBER", "py", "line", "NUMBER", "in", "__get__", "res", "instance", "NUMBER", "__dict__", "self", "NUMBER", "name", "self", "NUMBER", "func", "instance", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "urlresolvers", "NUMBER", "py", "line", "NUMBER", "in", "urlconf_module", "return", "import_module", "self", "NUMBER", "urlconf_name", "File", "usr", "lib", "python", "NUMBER", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "__import__", "name", "File", "home", "cedex", "Desktop", "test", "NUMBER", "mysite", "urls", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "url", "r", "include", "chatbot", "NUMBER", "urls", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "conf", "urls", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "include", "urlconf_module", "import_module", "urlconf_module", "File", "usr", "lib", "python", "NUMBER", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "__import__", "name", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "urls", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "import", "views", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "views", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatter", "import", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "chatter", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "chatterbot", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "chatterbot", "import", "ChatBot", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "orage", "import", "StorageAdapter", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "chatterbot", "storage", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "django_storage", "import", "DjangoStorageAdapter", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "chatterbot", "storage", "django_storage", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "NUMBER", "orage", "import", "StorageAdapter", "ImportError", "No", "module", "named", "storage", "ython", "manage", "NUMBER", "py", "runserver", "Performing", "system", "checks", "NUMBER", "Unhandled", "exception", "in", "thread", "start", "by", "TAG", "Traceback", "most", "recent", "call", "last", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "autoreload", "NUMBER", "py", "line", "NUMBER", "in", "wrapper", "fn", "args", "kwargs", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "commands", "runserver", "NUMBER", "py", "line", "NUMBER", "in", "inner_run", "self", "NUMBER", "check", "display_num_errors", "True", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "base", "NUMBER", "py", "line", "NUMBER", "in", "check", "include_deployment_checks", "include_deployment_checks", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "checks", "registry", "NUMBER", "py", "line", "NUMBER", "in", "run_checks", "new_errors", "check", "app_configs", "app_configs", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "checks", "urls", "NUMBER", "py", "line", "NUMBER", "in", "check_url_config", "return", "check_resolver", "resolver", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "checks", "urls", "NUMBER", "py", "line", "NUMBER", "in", "check_resolver", "for", "pattern", "in", "resolver", "NUMBER", "url_patterns", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "functional", "NUMBER", "py", "line", "NUMBER", "in", "__get__", "res", "instance", "NUMBER", "__dict__", "self", "NUMBER", "name", "self", "NUMBER", "func", "instance", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "urlresolvers", "NUMBER", "py", "line", "NUMBER", "in", "url_patterns", "patterns", "getattr", "self", "NUMBER", "urlconf_module", "urlpatterns", "self", "NUMBER", "urlconf_module", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "functional", "NUMBER", "py", "line", "NUMBER", "in", "__get__", "res", "instance", "NUMBER", "__dict__", "self", "NUMBER", "name", "self", "NUMBER", "func", "instance", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "urlresolvers", "NUMBER", "py", "line", "NUMBER", "in", "urlconf_module", "return", "import_module", "self", "NUMBER", "urlconf_name", "File", "usr", "lib", "python", "NUMBER", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "__import__", "name", "File", "home", "cedex", "Desktop", "test", "NUMBER", "mysite", "urls", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "url", "r", "include", "chatbot", "NUMBER", "urls", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "conf", "urls", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "include", "urlconf_module", "import_module", "urlconf_module", "File", "usr", "lib", "python", "NUMBER", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "__import__", "name", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "urls", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "import", "views", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "views", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatter", "import", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "chatter", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "chatterbot", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "chatterbot", "import", "ChatBot", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "orage", "import", "StorageAdapter", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "chatterbot", "storage", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "django_storage", "import", "DjangoStorageAdapter", "File", "home", "cedex", "Desktop", "test", "NUMBER", "chatbot", "chatterbot", "storage", "django_storage", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "NUMBER", "orage", "import", "StorageAdapter", "ImportError", "No", "module", "named", "storage", "Hey", "I", "be", "having", "a", "similar", "Error", "Traceback", "most", "recent", "call", "last", "File", "test", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "OutputFormatAdapter", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "orage", "utils", "NUMBER", "initialize_class", "storage_adapter", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "initialize_class", "return", "Class", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "from", "jsondb", "import", "Database", "ImportError", "No", "module", "named", "jsondb", "This", "error", "also", "appears", "when", "I", "be", "trying", "to", "run", "some", "examples", "of", "you", "NUMBER", "When", "I", "be", "run", "python", "m", "chatterbot", "version", "it", "gives", "me", "this", "output", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "usr", "lib", "python", "NUMBER", "runpy", "NUMBER", "py", "line", "NUMBER", "in", "_run_module_as_main", "__main__", "fname", "loader", "pkg_name", "File", "usr", "lib", "python", "NUMBER", "runpy", "NUMBER", "py", "line", "NUMBER", "in", "_run_code", "exec", "code", "in", "run_globals", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "__main__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "print", "chatterbot", "NUMBER", "__version__", "AttributeError", "module", "object", "has", "no", "attribute", "__version__", "I", "have", "a", "traceback", "as", "follows", "when", "i", "run", "the", "django", "application", "in", "the", "browser", "Environment", "Request", "Method", "POST", "Request", "URL", "LINK", "Django", "Version", "NUMBER", "Python", "Version", "NUMBER", "Installed", "Applications", "django", "NUMBER", "contrib", "NUMBER", "admin", "django", "NUMBER", "contrib", "NUMBER", "auth", "django", "NUMBER", "contrib", "NUMBER", "contenttypes", "django", "NUMBER", "contrib", "NUMBER", "sessions", "django", "NUMBER", "contrib", "NUMBER", "message", "django", "NUMBER", "contrib", "NUMBER", "aticfiles", "chatbot", "chatbot", "NUMBER", "chatterbot", "chatbot", "NUMBER", "chatterbot", "NUMBER", "orage", "Installed", "Middleware", "django", "NUMBER", "middleware", "NUMBER", "security", "NUMBER", "SecurityMiddleware", "django", "NUMBER", "contrib", "NUMBER", "sessions", "NUMBER", "middleware", "NUMBER", "SessionMiddleware", "django", "NUMBER", "middleware", "NUMBER", "common", "NUMBER", "CommonMiddleware", "django", "NUMBER", "middleware", "NUMBER", "csrf", "NUMBER", "CsrfViewMiddleware", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "middleware", "NUMBER", "AuthenticationMiddleware", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "middleware", "NUMBER", "SessionAuthenticationMiddleware", "django", "NUMBER", "contrib", "NUMBER", "message", "NUMBER", "middleware", "NUMBER", "MessageMiddleware", "django", "NUMBER", "middleware", "NUMBER", "clickjacking", "NUMBER", "XFrameOptionsMiddleware", "Traceback", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "base", "NUMBER", "py", "in", "get_response", "NUMBER", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "base", "NUMBER", "py", "in", "get_response", "NUMBER", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "home", "jyo", "Desktop", "test", "NUMBER", "chatbot", "views", "NUMBER", "py", "in", "act", "NUMBER", "database", "mydb", "File", "home", "jyo", "Desktop", "test", "NUMBER", "chatbot", "chatterbot", "chatterbot", "NUMBER", "py", "in", "__init__", "NUMBER", "utils", "NUMBER", "validate_adapter_class", "storage_adapter", "StorageAdapter", "File", "home", "jyo", "Desktop", "test", "NUMBER", "chatbot", "chatterbot", "utils", "NUMBER", "py", "in", "validate_adapter_class", "NUMBER", "Adapter", "NUMBER", "__name__", "Exception", "Type", "InvalidAdapterException", "at", "views", "act", "Exception", "Value", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "must", "be", "a", "subclass", "of", "Adapter", "My", "settings", "NUMBER", "py", "file", "be", "this", "NUMBER", "import", "os", "Build", "paths", "inside", "the", "project", "like", "this", "os", "NUMBER", "path", "NUMBER", "join", "BASE_DIR", "NUMBER", "BASE_DIR", "os", "NUMBER", "path", "NUMBER", "dirname", "os", "NUMBER", "path", "NUMBER", "dirname", "os", "NUMBER", "path", "NUMBER", "abspath", "__file__", "SECURITY", "WARNING", "keep", "the", "secret", "key", "use", "in", "production", "secret", "SECRET_KEY", "blk", "g", "NUMBER", "_", "rs", "NUMBER", "v", "a", "e", "w", "NUMBER", "ek", "NUMBER", "r", "NUMBER", "dqv", "NUMBER", "ke", "vx", "NUMBER", "mc", "i", "NUMBER", "SECURITY", "WARNING", "don", "t", "run", "with", "debug", "turned", "on", "in", "production", "DEBUG", "True", "ALLOWED_HOSTS", "Application", "definition", "INSTALLED_APPS", "django", "NUMBER", "contrib", "NUMBER", "admin", "django", "NUMBER", "contrib", "NUMBER", "auth", "django", "NUMBER", "contrib", "NUMBER", "contenttypes", "django", "NUMBER", "contrib", "NUMBER", "sessions", "django", "NUMBER", "contrib", "NUMBER", "message", "django", "NUMBER", "contrib", "NUMBER", "aticfiles", "chatbot", "chatbot", "NUMBER", "chatterbot", "chatbot", "NUMBER", "chatterbot", "NUMBER", "orage", "MIDDLEWARE_CLASSES", "django", "NUMBER", "middleware", "NUMBER", "security", "NUMBER", "SecurityMiddleware", "django", "NUMBER", "contrib", "NUMBER", "sessions", "NUMBER", "middleware", "NUMBER", "SessionMiddleware", "django", "NUMBER", "middleware", "NUMBER", "common", "NUMBER", "CommonMiddleware", "django", "NUMBER", "middleware", "NUMBER", "csrf", "NUMBER", "CsrfViewMiddleware", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "middleware", "NUMBER", "AuthenticationMiddleware", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "middleware", "NUMBER", "SessionAuthenticationMiddleware", "django", "NUMBER", "contrib", "NUMBER", "message", "NUMBER", "middleware", "NUMBER", "MessageMiddleware", "django", "NUMBER", "middleware", "NUMBER", "clickjacking", "NUMBER", "XFrameOptionsMiddleware", "ROOT_URLCONF", "mysite", "NUMBER", "urls", "TEMPLATES", "BACKEND", "django", "NUMBER", "template", "NUMBER", "backends", "NUMBER", "django", "NUMBER", "DjangoTemplates", "DIRS", "APP_DIRS", "True", "OPTIONS", "context_processors", "django", "NUMBER", "template", "NUMBER", "context_processors", "NUMBER", "debug", "django", "NUMBER", "template", "NUMBER", "context_processors", "NUMBER", "request", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "context_processors", "NUMBER", "auth", "django", "NUMBER", "contrib", "NUMBER", "message", "NUMBER", "context_processors", "NUMBER", "message", "WSGI_APPLICATION", "mysite", "NUMBER", "wsgi", "NUMBER", "application", "DATABASES", "default", "ENGINE", "django", "NUMBER", "db", "NUMBER", "backends", "NUMBER", "sqlite", "NUMBER", "NAME", "os", "NUMBER", "path", "NUMBER", "join", "BASE_DIR", "db", "NUMBER", "sqlite", "NUMBER", "AUTH_PASSWORD_VALIDATORS", "NAME", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "password_validation", "NUMBER", "UserAttributeSimilarityValidator", "NAME", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "password_validation", "NUMBER", "MinimumLengthValidator", "NAME", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "password_validation", "NUMBER", "CommonPasswordValidator", "NAME", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "password_validation", "NUMBER", "NumericPasswordValidator", "LANGUAGE_CODE", "en", "us", "TIME_ZONE", "UTC", "USE_I", "NUMBER", "N", "True", "USE_L", "NUMBER", "N", "True", "USE_TZ", "True", "STATIC_URL", "static", "chatterbot", "be", "the", "downloaded", "copy", "and", "I", "made", "some", "change", "in", "it", "NUMBER", "I", "want", "to", "use", "that", "as", "a", "module", "in", "a", "web", "application", "NUMBER", "I", "didn", "t", "want", "to", "install", "the", "chatterbot", "instead", "want", "to", "use", "the", "downloaded", "copy", "NUMBER", "But", "when", "i", "try", "to", "do", "so", "I", "be", "get", "this", "NUMBER", "Unhandled", "exception", "in", "thread", "start", "by", "TAG", "Traceback", "most", "recent", "call", "last", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "autoreload", "NUMBER", "py", "line", "NUMBER", "in", "wrapper", "fn", "args", "kwargs", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "management", "commands", "runserver", "NUMBER", "py", "line", "NUMBER", "in", "inner_run", "autoreload", "NUMBER", "raise_last_exception", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "autoreload", "NUMBER", "py", "line", "NUMBER", "in", "raise_last_exception", "six", "NUMBER", "reraise", "_exception", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "utils", "autoreload", "NUMBER", "py", "line", "NUMBER", "in", "wrapper", "fn", "args", "kwargs", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "setup", "apps", "NUMBER", "populate", "settings", "NUMBER", "INSTALLED_APPS", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "apps", "registry", "NUMBER", "py", "line", "NUMBER", "in", "populate", "app_config", "AppConfig", "NUMBER", "create", "entry", "File", "home", "cedex", "NUMBER", "local", "lib", "python", "NUMBER", "site", "package", "django", "apps", "config", "NUMBER", "py", "line", "NUMBER", "in", "create", "import_module", "entry", "File", "usr", "lib", "python", "NUMBER", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "__import__", "name", "ImportError", "No", "module", "named", "chatterbot", "Is", "there", "a", "way", "to", "use", "the", "downloaded", "copy", "as", "an", "independent", "one", "Thanks", "NUMBER", "Now", "it", "s", "work", "NUMBER", "Hi", "Can", "we", "connect", "ChatterBot", "with", "API", "NUMBER", "AI", "NUMBER", "I", "like", "use", "logical", "adapter", "but", "i", "would", "like", "to", "know", "if", "we", "can", "integrate", "with", "API", "NUMBER", "AI", "NUMBER", "Thanks", "gunthercox", "I", "would", "love", "to", "add", "this", "feature", "in", "few", "weeks", "NUMBER", "I", "will", "let", "you", "know", "NUMBER", "Thanks", "Is", "it", "feasible", "to", "implement", "reinforcement", "learning", "for", "interactive", "training", "of", "the", "chatbot", "The", "idea", "would", "be", "to", "provide", "feedback", "on", "the", "appropriateness", "of", "the", "response", "in", "order", "to", "develop", "specialized", "knowledge", "on", "the", "part", "of", "the", "bot", "NUMBER", "Bad", "responses", "would", "be", "penalized", "and", "vice", "versa", "for", "good", "responses", "NUMBER", "Does", "the", "current", "architecture", "support", "such", "a", "mechanism", "in", "principle", "What", "I", "did", "for", "a", "similar", "problem", "was", "instead", "of", "logging", "all", "of", "the", "conversation", "statements", "response_statements", "manually", "use", "chatbot", "NUMBER", "learn_response", "whenever", "some", "conditions", "trigger", "like", "learning", "rate", "hyperparameter", "positive", "negative", "feedback", "from", "user", "etc", "NUMBER", "gunthercox", "what", "be", "status", "on", "this", "Should", "be", "great", "to", "get", "to", "see", "this", "enhancement", "NUMBER", "Please", "specify", "example", "of", "usage", "add_response", "For", "a", "quick", "example", "you", "could", "look", "into", "this", "testcase", "LINK", "_tests", "test_statements", "NUMBER", "py", "L", "NUMBER", "Thanks", "this", "very", "helpful", "I", "verify", "this", "issue", "on", "hipchat", "only", "i", "made", "some", "change", "on", "my", "machine", "to", "work", "NUMBER", "Thanks", "Any", "plan", "to", "fix", "this", "issue", "If", "not", "can", "i", "submit", "PR", "Sure", "will", "submit", "a", "PR", "soon", "D", "Anaconda", "NUMBER", "lib", "site", "package", "chatterbot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "application", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "nltk_data", "Downloading", "package", "stopwords", "to", "nltk_data", "C", "Users", "Administrator", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "stopwords", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "wordnet", "to", "nltk_data", "C", "Users", "Administrator", "AppData", "Roaming", "nltk_data", "NUMBER", "I", "process", "like", "example", "but", "run", "long", "time", "no", "result", "why", "I", "be", "not", "sure", "chatterbot", "will", "work", "anaconda", "can", "you", "try", "with", "Python", "version", "NUMBER", "NUMBER", "NUMBER", "etc", "Did", "you", "get", "a", "error", "or", "something", "else", "If", "all", "you", "get", "just", "like", "you", "provide", "it", "seems", "like", "download", "package", "wordnet", "fail", "did", "you", "try", "to", "download", "wordnet", "by", "yourself", "On", "Thu", "Dec", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "SunYunyun", "TAG", "write", "D", "Anaconda", "NUMBER", "lib", "site", "package", "chatterbot", "NUMBER", "py", "NUMBER", "NUMBER", "egg", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "application", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "nltk_data", "Downloading", "package", "stopwords", "to", "nltk_data", "C", "Users", "Administrator", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "stopwords", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "wordnet", "to", "nltk_data", "C", "Users", "Administrator", "AppData", "Roaming", "nltk_data", "NUMBER", "I", "process", "like", "example", "but", "run", "long", "time", "no", "result", "why", "You", "be", "receiving", "this", "because", "you", "be", "subscribed", "to", "this", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "With", "best", "regards", "Datong", "Li", "gunthercox", "Any", "plan", "to", "fix", "this", "issue", "LINK", "I", "m", "considering", "a", "problem", "where", "there", "may", "be", "a", "product", "database", "or", "some", "other", "searchable", "data", "set", "NUMBER", "I", "d", "like", "to", "be", "able", "to", "extract", "keywords", "and", "perform", "searches", "and", "return", "responses", "that", "may", "interest", "the", "user", "NUMBER", "It", "looks", "like", "I", "d", "have", "to", "write", "a", "logic", "adapter", "which", "I", "should", "be", "able", "to", "do", "as", "a", "developer", "NUMBER", "But", "I", "be", "unsure", "how", "to", "incorporate", "this", "into", "a", "training", "set", "or", "whether", "a", "contextually", "aware", "sequence", "be", "possible", "NUMBER", "E", "NUMBER", "g", "say", "I", "have", "cars", "houses", "and", "trucks", "and", "a", "conversation", "goes", "like", "this", "Hey", "there", "I", "d", "like", "to", "build", "a", "house", "I", "d", "like", "to", "know", "more", "about", "the", "Alto", "floorplans", "TAG", "No", "problem", "I", "can", "see", "NUMBER", "floorplans", "for", "Alto", "Modern", "Classic", "and", "Entertainer", "NUMBER", "How", "can", "I", "help", "with", "these", "Which", "be", "the", "cheapest", "TAG", "The", "Classic", "be", "our", "base", "range", "NUMBER", "Would", "you", "like", "to", "speak", "to", "a", "consultant", "about", "the", "classic", "Yes", "please", "TAG", "Please", "enter", "your", "email", "address", "and", "or", "phone", "number", "and", "we", "ll", "be", "in", "touch", "shortly", "Is", "something", "like", "this", "possible", "e", "NUMBER", "g", "NUMBER", "real", "time", "context", "sensitive", "searches", "Apologies", "if", "this", "be", "the", "wrong", "forum", "for", "this", "question", "happy", "to", "be", "point", "in", "the", "right", "direction", "NUMBER", "I", "m", "just", "get", "start", "with", "this", "stuff", "NUMBER", "Thanks", "Hi", "gunthercox", "thanks", "for", "the", "reply", "the", "data", "source", "would", "be", "external", "that", "s", "correct", "NUMBER", "I", "be", "wondering", "if", "an", "efficient", "approach", "would", "be", "a", "middleware", "layer", "that", "generates", "faux", "chats", "based", "on", "a", "heuristic", "and", "outputs", "these", "as", "new", "training", "sets", "NUMBER", "Is", "it", "possible", "to", "selectively", "untrain", "chatterbot", "i", "NUMBER", "e", "to", "remove", "expired", "outdate", "responses", "Alternatively", "I", "could", "run", "a", "cron", "to", "reset", "retrain", "on", "a", "regular", "basis", "NUMBER", "Thanks", "for", "the", "pointer", "I", "have", "an", "inkling", "of", "an", "idea", "forming", "something", "like", "this", "NUMBER", "Generate", "Corpus", "data", "from", "saved", "searches", "middleware", "simple", "heuristic", "or", "templated", "pattern", "replacements", "NUMBER", "Train", "Chatterbot", "on", "new", "corpus", "NUMBER", "Remove", "old", "responses", "NUMBER", "NUMBER", "NUMBER", "Profit", "I", "ll", "have", "a", "bit", "of", "a", "play", "and", "let", "you", "know", "how", "I", "get", "on", "NUMBER", "Ideally", "this", "would", "be", "a", "dynamic", "process", "but", "for", "our", "purposes", "this", "middleware", "would", "be", "pragmatic", "NUMBER", "gunthercox", "Is", "there", "any", "specific", "way", "to", "define", "corpus", "data", "for", "chatter", "bot", "for", "example", "JSON", "statement", "response", "If", "so", "how", "chatterbot", "will", "process", "this", "text", "JSON", "description", "Birds", "of", "Antarctica", "grouped", "by", "family", "source", "LINK", "_of_birds_of_Antarctica", "birds", "family", "Albatrosses", "members", "Wandering", "albatross", "Grey", "headed", "albatross", "Black", "browed", "albatross", "Sooty", "albatross", "Light", "mantled", "albatross", "Question", "as", "per", "suggested", "the", "corpus", "should", "be", "in", "json", "format", "NUMBER", "How", "do", "you", "train", "the", "corpus", "in", "the", "main", "application", "Let", "s", "say", "I", "export", "the", "training", "corpus", "data", "how", "do", "you", "retrain", "it", "on", "another", "bot", "There", "isn", "t", "any", "examples", "on", "that", "I", "basically", "write", "my", "own", "adapter", "to", "read", "the", "corpus", "in", "json", "format", "then", "load", "it", "in", "JSON", "pair", "to", "train", "NUMBER", "gunthercox", "I", "be", "planning", "to", "write", "PR", "for", "above", "two", "enhancements", "do", "any", "have", "any", "ETA", "for", "these", "two", "issue", "NUMBER", "and", "NUMBER", "This", "looks", "good", "to", "me", "NUMBER", "Question", "NUMBER", "How", "chatterbot", "will", "responds", "to", "previous", "statements", "use", "suggested", "model", "NUMBER", "If", "not", "what", "be", "the", "other", "methods", "to", "achieve", "this", "Apologies", "I", "be", "make", "this", "conversation", "longer", "From", "above", "statement", "can", "i", "assume", "If", "the", "question", "multiple", "answer", "do", "i", "need", "to", "two", "lists", "for", "same", "answer", "How", "do", "i", "make", "programmable", "responses", "Is", "there", "way", "the", "If", "chatterbot", "not", "find", "the", "answer", "in", "corpus", "suggest", "chatterbot", "to", "look", "for", "programmable", "response", "By", "looking", "into", "LINK", "it", "was", "amazing", "like", "chatterbot", "NUMBER", "If", "i", "want", "make", "a", "bot", "like", "alice", "use", "chatterbot", "what", "be", "things", "algorithms", "need", "update", "write", "create", "some", "of", "them", "i", "have", "find", "please", "point", "correct", "me", "if", "it", "already", "there", "Bot", "Properties", "I", "think", "it", "be", "good", "idea", "if", "we", "have", "similar", "kind", "of", "feature", "NUMBER", "LINK", "en", "us", "foundation", "alice", "wikis", "BotProperties", "NUMBER", "wiki", "Preprocessing", "statements", "This", "be", "my", "first", "choice", "of", "implementation", "It", "s", "awesome", "feature", "LINK", "en", "us", "foundation", "alice", "wikis", "PreProcessor", "NUMBER", "wiki", "Template", "mechanism", "I", "be", "assuming", "this", "statements", "has", "template", "if", "it", "correct", "could", "you", "please", "share", "your", "views", "on", "this", "XML", "TAG", "As", "a", "TAG", "year", "old", "TAG", "I", "be", "not", "really", "interested", "in", "that", "discussion", "NUMBER", "TAG", "Reusing", "of", "corpus", "data", "Other", "than", "i", "be", "also", "looking", "into", "some", "part", "entire", "few", "statements", "can", "i", "reuse", "it", "in", "any", "other", "corpus", "data", "Corpus", "search", "order", "Are", "we", "fallowing", "any", "order", "to", "search", "corpus", "database", "vkosuri", "did", "you", "implement", "aiml", "or", "add", "it", "to", "chatterBot", "We", "have", "add", "some", "of", "aiml", "copurs", "into", "chatterbot", "corpus", "NUMBER", "LINK", "corpus", "Well", "I", "m", "use", "Django", "channels", "to", "send", "and", "receive", "message", "NUMBER", "In", "this", "case", "I", "m", "use", "consumers", "to", "get", "the", "message", "from", "frontend", "and", "process", "it", "and", "return", "back", "to", "frontend", "NUMBER", "def", "ws_message", "message", "I", "like", "to", "call", "the", "chatterbot", "api", "here", "reply_message", "message", "NUMBER", "reply_channel", "NUMBER", "send", "text", "reply_message", "I", "correctly", "set", "chatterbot", "NUMBER", "ext", "NUMBER", "django_chatterbot", "in", "INSTALLED_APPS", "NUMBER", "And", "also", "I", "have", "this", "NUMBER", "Chatterbot", "CHATTERBOT", "name", "Bot", "Example", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "training_data", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "greetings", "Yes", "I", "was", "expecting", "something", "very", "easy", "to", "setup", "weather", "I", "m", "use", "Django", "channels", "or", "normal", "Django", "views", "for", "the", "chat", "message", "NUMBER", "Maybe", "we", "can", "setup", "chatterbot", "configuration", "in", "the", "settings", "file", "and", "invoke", "that", "from", "our", "views", "or", "channels", "message", "to", "get", "the", "response", "NUMBER", "I", "looked", "that", "chatterbot", "settings", "in", "that", "example", "and", "modify", "what", "I", "need", "NUMBER", "chatterbot", "ChatBot", "ask", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "DjangoStorageAdapter", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "VariableInputTypeAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "OutputFormatAdapter", "output_format", "object", "Looks", "like", "message", "saved", "into", "database", "that", "s", "all", "I", "want", "NUMBER", "Will", "explore", "more", "Thanks", "NUMBER", "gunthercox", "Settings", "NUMBER", "py", "Chatterbot", "CHATTERBOT", "name", "Fun", "stuff", "bot", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "chatterbot", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "training_data", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "greetings", "Make", "sure", "these", "imports", "comes", "after", "the", "CHATTERBOT", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "ext", "NUMBER", "django_chatterbot", "import", "settings", "as", "chatterbot_settings", "BOT", "ChatBot", "chatterbot_settings", "NUMBER", "CHATTERBOT", "And", "in", "my", "channels", "message", "I", "have", "this", "NUMBER", "from", "django", "NUMBER", "conf", "import", "settings", "input_data", "text", "My", "input", "statement", "response_data", "settings", "NUMBER", "BOT", "NUMBER", "get_response", "input_data", "I", "know", "this", "bad", "way", "to", "try", "NUMBER", "This", "will", "fetch", "the", "nltk", "data", "two", "times", "NUMBER", "I", "cann", "t", "able", "to", "make", "post", "request", "to", "chatterbot", "API", "use", "request", "because", "of", "the", "csrf_token", "issue", "NUMBER", "What", "be", "the", "best", "approach", "gunthercox", "Well", "I", "m", "not", "planning", "for", "use", "AJAX", "solution", "NUMBER", "And", "I", "find", "the", "way", "to", "work", "with", "request", "The", "solutuion", "be", "to", "insert", "csrf_token", "in", "base", "NUMBER", "html", "and", "NUMBER", "URL", "LINK", "client", "request", "NUMBER", "session", "client", "NUMBER", "get", "URL", "Token", "csrftoken", "client", "NUMBER", "cookies", "csrftoken", "payload", "text", "My", "input", "statement", "headers", "Content", "type", "application", "json", "X", "CSRFToken", "csrftoken", "cookies", "dict", "client", "NUMBER", "cookies", "resp", "request", "NUMBER", "post", "URL", "chatterbot", "json", "payload", "headers", "headers", "cookies", "cookies", "And", "another", "one", "thing", "NUMBER", "I", "m", "get", "the", "No", "json", "object", "could", "be", "decoded", "error", "from", "TimeLogicAdapter", "relate", "NUMBER", "Will", "investigate", "into", "that", "one", "NUMBER", "Will", "update", "you", "NUMBER", "I", "think", "it", "would", "be", "good", "option", "to", "specify", "custom", "paths", "for", "corpus", "data", "currently", "its", "system", "specified", "path", "only", "Python", "class", "Corpus", "object", "def", "__init__", "self", "current_directory", "os", "NUMBER", "path", "NUMBER", "dirname", "__file__", "self", "NUMBER", "data_directory", "os", "NUMBER", "path", "NUMBER", "join", "current_directory", "data", "gunthercox", "Planning", "to", "write", "like", "this", "any", "suggestions", "comments", "Diff", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "class", "Trainer", "object", "def", "__init__", "self", "storage", "kwargs", "self", "NUMBER", "orage", "storage", "self", "NUMBER", "corpus_path", "None", "self", "NUMBER", "logger", "logging", "NUMBER", "getLogger", "__name__", "def", "train", "self", "args", "kwargs", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "class", "Trainer", "object", "return", "result", "def", "import_for_training", "self", "file_path", "self", "NUMBER", "corpus_path", "file_path", "def", "export_for_training", "self", "file_path", "NUMBER", "export", "NUMBER", "json", "Create", "a", "file", "from", "the", "database", "that", "can", "be", "use", "to", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "class", "ChatterBotCorpusTrainer", "Trainer", "super", "ChatterBotCorpusTrainer", "self", "NUMBER", "__init__", "storage", "kwargs", "from", "NUMBER", "corpus", "import", "Corpus", "self", "NUMBER", "corpus", "Corpus", "self", "NUMBER", "corpus", "Corpus", "self", "NUMBER", "corpus_path", "def", "train", "self", "corpora", "trainer", "ListTrainer", "self", "NUMBER", "orage", "I", "like", "this", "to", "be", "integrated", "asap", "Sure", "On", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "Raja", "Simon", "TAG", "write", "I", "like", "this", "to", "be", "integrated", "asap", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Can", "you", "make", "the", "pull", "request", "so", "I", "can", "check", "it", "and", "also", "do", "it", "support", "for", "add", "my", "own", "custom", "adapters", "NUMBER", "i", "NUMBER", "e", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "funstuff", "NUMBER", "logic", "NUMBER", "FunStuff", "Sorry", "for", "my", "prev", "message", "I", "just", "saw", "this", "LINK", "a", "logic", "adapter", "NUMBER", "html", "directory", "structure", "vkosuri", "Shall", "I", "have", "the", "patch", "now", "Sure", "I", "tried", "the", "simple", "terminal", "example", "LINK", "_example", "NUMBER", "py", "but", "get", "this", "error", "NUMBER", "Any", "suggestions", "Thanks", "in", "advance", "NUMBER", "Users", "tshrjn", "anaconda", "NUMBER", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "application", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Traceback", "most", "recent", "call", "last", "File", "terminal_example", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "database", "NUMBER", "database", "NUMBER", "db", "File", "Users", "tshrjn", "anaconda", "NUMBER", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "logic", "NUMBER", "add_adapter", "adapter", "kwargs", "File", "Users", "tshrjn", "anaconda", "NUMBER", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "multi_adapter", "NUMBER", "py", "line", "NUMBER", "in", "add_adapter", "utils", "NUMBER", "validate_adapter_class", "adapter", "LogicAdapter", "File", "Users", "tshrjn", "anaconda", "NUMBER", "lib", "python", "NUMBER", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "validate_adapter_class", "if", "not", "issubclass", "import_module", "validate_class", "Adapter", "File", "Users", "tshrjn", "anaconda", "NUMBER", "lib", "python", "NUMBER", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "return", "getattr", "module", "module_parts", "NUMBER", "AttributeError", "module", "chatterbot", "NUMBER", "logic", "has", "no", "attribute", "BestMatch", "In", "Machine", "Learning", "area", "there", "always", "a", "test", "data", "set", "use", "for", "get", "the", "accuracy", "of", "the", "model", "so", "be", "there", "any", "similiar", "thing", "for", "ChatterBot", "gunthercox", "how", "do", "I", "get", "the", "confidence", "level", "from", "get_response", "Is", "there", "any", "way", "to", "get", "the", "confidence", "level", "from", "a", "statement", "Cool", "NUMBER", "I", "be", "use", "a", "quick", "and", "dirty", "method", "now", "I", "m", "not", "sure", "if", "it", "was", "meant", "to", "be", "use", "this", "way", "NUMBER", "python", "from", "chatterbot", "NUMBER", "conversation", "import", "Statement", "initialization", "NUMBER", "statement", "Statement", "message", "confidence_level", "bot", "NUMBER", "logic", "NUMBER", "process", "statement", "NUMBER", "response", "bot", "NUMBER", "logic", "NUMBER", "process", "statement", "NUMBER", "NUMBER", "text", "I", "think", "currently", "chatter", "will", "send", "request", "and", "response", "to", "all", "configured", "logic", "adapters", "instead", "be", "there", "a", "possibility", "send", "one", "to", "one", "mapping", "NUMBER", "For", "example", "If", "user", "request", "from", "twitter", "response", "should", "go", "only", "twitter", "NUMBER", "gunthercox", "Any", "idea", "how", "to", "achieve", "this", "task", "Apologies", "For", "confusing", "Is", "there", "possibility", "to", "configure", "multiple", "input", "and", "output", "adapters", "on", "a", "single", "bot", "instance", "Python", "bot", "ChatBot", "All", "in", "One", "Example", "Bot", "mailgun_from_address", "FROM_EMAIL", "mailgun_api_key", "MAILGUN", "CONSUMER_KEY", "mailgun_api_endpoint", "MAILGUN", "API_ENDPOINT", "mailgun_recipients", "RECIPIENTS", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "Mailgun", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "Mailgun", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "database", "NUMBER", "database", "NUMBER", "db", "Hipchat", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "HipChat", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "HipChat", "hipchat_host", "LINK", "hipchat_room", "my", "room", "name", "hipchat_access_token", "my", "hipchat", "access", "token", "Thanks", "I", "have", "few", "other", "question", "if", "we", "add", "this", "features", "integrated", "into", "chatterbot", "NUMBER", "any", "consequences", "issue", "will", "occur", "NUMBER", "If", "not", "any", "plan", "implementation", "this", "feature", "NUMBER", "Will", "it", "benefited", "to", "chatterbot", "Great", "and", "thank", "you", "Installed", "from", "ZIP", "file", "on", "NUMBER", "NUMBER", "NUMBER", "Python", "NUMBER", "This", "run", "a", "couple", "of", "days", "ago", "just", "re", "install", "NUMBER", "maybe", "something", "broken", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Charlie", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "C", "Users", "BockJoel", "Downloads", "ChatterBot", "NUMBER", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "orage", "utils", "NUMBER", "initialize_class", "storage_adapter", "kwargs", "File", "C", "Users", "BockJoel", "Downloads", "ChatterBot", "NUMBER", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "initialize_class", "return", "Class", "kwargs", "File", "C", "Users", "BockJoel", "Downloads", "ChatterBot", "NUMBER", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "from", "jsondb", "import", "Database", "File", "C", "Python", "NUMBER", "NUMBER", "lib", "site", "package", "jsondb", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "import", "core", "ImportError", "No", "module", "named", "core", "FIXED", "by", "following", "these", "instructions", "_If", "you", "see", "a", "directory", "named", "utils", "delete", "it", "NUMBER", "Also", "if", "you", "see", "a", "directory", "named", "adapters", "delete", "it", "NUMBER", "I", "had", "a", "similar", "issue", "recently", "NUMBER", "For", "some", "reason", "pip", "appears", "to", "be", "add", "cached", "outdate", "modules", "from", "the", "previous", "version", "when", "ChatterBot", "gets", "upgrade", "NUMBER", "_", "It", "s", "all", "good", "thank", "you", "NUMBER", "I", "m", "excited", "about", "the", "ChatterBot", "project", "and", "hope", "to", "maybe", "contribute", "once", "I", "get", "up", "to", "speed", "NUMBER", "On", "Fri", "Dec", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Gunther", "Cox", "TAG", "write", "Hi", "boris", "NUMBER", "TAG", "glad", "you", "were", "able", "to", "resolve", "the", "issue", "NUMBER", "Sorry", "I", "didn", "t", "get", "a", "chance", "to", "respond", "earlier", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "I", "didn", "t", "get", "how", "to", "use", "mongoDB", "instead", "of", "JSON", "adapter", "NUMBER", "didn", "t", "show", "any", "responses", "from", "the", "bot", "HelloJyo", "Here", "be", "an", "example", "located", "here", "LINK", "mongo", "database", "adapter", "A", "python", "code", "example", "located", "here", "LINK", "_mongo_example", "NUMBER", "py", "i", "did", "that", "but", "the", "bot", "didn", "t", "give", "any", "response", "NUMBER", "I", "created", "a", "mongoDB", "myDB", "and", "inserted", "some", "data", "into", "it", "NUMBER", "Where", "should", "i", "place", "it", "I", "want", "to", "use", "that", "one", "for", "the", "bot", "to", "give", "responses", "NUMBER", "I", "change", "to", "the", "mongoDB", "NUMBER", "I", "trained", "the", "bot", "with", "new", "data", "by", "make", "change", "with", "the", "corpus", "data", "NUMBER", "But", "couldn", "t", "train", "it", "with", "the", "trainer", "class", "list", "trainer", "NUMBER", "If", "there", "any", "way", "to", "do", "that", "ok", "i", "m", "gonna", "try", "ok", "it", "worked", "NUMBER", "anks", "gunthercox", "How", "do", "i", "resolve", "this", "error", "NUMBER", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GET", "static", "js", "bootstrap", "NUMBER", "js", "HTTP", "NUMBER", "NUMBER", "NUMBER", "Internal", "Server", "Error", "api", "chatterbot", "Traceback", "most", "recent", "call", "last", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "exception", "NUMBER", "py", "line", "NUMBER", "in", "inner", "response", "get_response", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_legacy_get_response", "response", "self", "NUMBER", "_get_response", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "view", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "dispatch", "return", "handler", "request", "args", "kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "line", "NUMBER", "in", "post", "chat_session", "self", "NUMBER", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "get", "chat_session_id", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "conversation", "session", "NUMBER", "py", "line", "NUMBER", "in", "get", "return", "self", "NUMBER", "sessions", "str", "session_id", "KeyError", "NUMBER", "b", "NUMBER", "b", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "d", "NUMBER", "NUMBER", "d", "NUMBER", "d", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "POST", "api", "chatterbot", "HTTP", "NUMBER", "NUMBER", "NUMBER", "TAG", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GET", "static", "js", "jquery", "NUMBER", "js", "HTTP", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GET", "static", "js", "js", "NUMBER", "cookie", "NUMBER", "js", "HTTP", "NUMBER", "NUMBER", "NUMBER", "Internal", "Server", "Error", "api", "chatterbot", "Traceback", "most", "recent", "call", "last", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "exception", "NUMBER", "py", "line", "NUMBER", "in", "inner", "response", "get_response", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_legacy_get_response", "response", "self", "NUMBER", "_get_response", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "view", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "dispatch", "return", "handler", "request", "args", "kwargs", "File", "home", "developer", "adtran", "bot", "abot", "src", "abot", "chatterbot_views", "NUMBER", "py", "line", "NUMBER", "in", "post", "chat_session", "self", "NUMBER", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "get", "chat_session_id", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "conversation", "session", "NUMBER", "py", "line", "NUMBER", "in", "get", "return", "self", "NUMBER", "sessions", "str", "session_id", "TAG", "KeyError", "NUMBER", "b", "NUMBER", "b", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "d", "NUMBER", "NUMBER", "d", "NUMBER", "d", "TAG", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "POST", "api", "chatterbot", "HTTP", "NUMBER", "NUMBER", "NUMBER", "Performing", "system", "checks", "NUMBER", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "application", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "nltk_data", "Downloading", "package", "stopwords", "to", "nltk_data", "home", "developer", "nltk_data", "NUMBER", "nltk_data", "Package", "stopwords", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "wordnet", "to", "nltk_data", "home", "developer", "nltk_data", "NUMBER", "nltk_data", "Package", "wordnet", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "punkt", "to", "home", "developer", "nltk_data", "NUMBER", "nltk_data", "Package", "punkt", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "vader_lexicon", "to", "nltk_data", "home", "developer", "nltk_data", "NUMBER", "nltk_data", "Package", "vader_lexicon", "be", "already", "up", "to", "date", "System", "check", "identified", "no", "issue", "NUMBER", "silenced", "NUMBER", "December", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Django", "version", "NUMBER", "use", "settings", "abot", "NUMBER", "settings", "Starting", "development", "server", "at", "LINK", "Quit", "the", "server", "with", "CONTROL", "C", "NUMBER", "Internal", "Server", "Error", "api", "chatterbot", "Traceback", "most", "recent", "call", "last", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "exception", "NUMBER", "py", "line", "NUMBER", "in", "inner", "response", "get_response", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_legacy_get_response", "response", "self", "NUMBER", "_get_response", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "view", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "dispatch", "return", "handler", "request", "args", "kwargs", "File", "home", "developer", "adtran", "bot", "abot", "src", "abot", "chatterbot_views", "NUMBER", "py", "line", "NUMBER", "in", "post", "chat_session", "self", "NUMBER", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "get", "chat_session_id", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "conversation", "session", "NUMBER", "py", "line", "NUMBER", "in", "get", "return", "self", "NUMBER", "sessions", "str", "session_id", "KeyError", "NUMBER", "b", "NUMBER", "b", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "d", "NUMBER", "NUMBER", "d", "NUMBER", "d", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "POST", "api", "chatterbot", "HTTP", "NUMBER", "NUMBER", "NUMBER", "Internal", "Server", "Error", "api", "chatterbot", "Traceback", "most", "recent", "call", "last", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "exception", "NUMBER", "py", "line", "NUMBER", "in", "inner", "response", "get_response", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_legacy_get_response", "response", "self", "NUMBER", "_get_response", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "view", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "dispatch", "return", "handler", "request", "args", "kwargs", "File", "home", "developer", "adtran", "bot", "abot", "src", "abot", "chatterbot_views", "NUMBER", "py", "line", "NUMBER", "in", "post", "chat_session", "self", "NUMBER", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "get", "chat_session_id", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "conversation", "session", "NUMBER", "py", "line", "NUMBER", "in", "get", "return", "self", "NUMBER", "sessions", "str", "session_id", "TAG", "KeyError", "NUMBER", "b", "NUMBER", "b", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "d", "NUMBER", "NUMBER", "d", "NUMBER", "d", "TAG", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "POST", "api", "chatterbot", "HTTP", "NUMBER", "NUMBER", "NUMBER", "C", "venv", "developer", "cn", "vm", "vkosuri", "adtran", "bot", "abot", "src", "clear", "venv", "developer", "cn", "vm", "vkosuri", "adtran", "bot", "abot", "src", "python", "manage", "NUMBER", "py", "runserver", "Performing", "system", "checks", "NUMBER", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "application", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "nltk_data", "Downloading", "package", "stopwords", "to", "nltk_data", "home", "developer", "nltk_data", "NUMBER", "nltk_data", "Package", "stopwords", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "wordnet", "to", "nltk_data", "home", "developer", "nltk_data", "NUMBER", "nltk_data", "Package", "wordnet", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "punkt", "to", "home", "developer", "nltk_data", "NUMBER", "nltk_data", "Package", "punkt", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "vader_lexicon", "to", "nltk_data", "home", "developer", "nltk_data", "NUMBER", "nltk_data", "Package", "vader_lexicon", "be", "already", "up", "to", "date", "System", "check", "identified", "no", "issue", "NUMBER", "silenced", "NUMBER", "December", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Django", "version", "NUMBER", "use", "settings", "abot", "NUMBER", "settings", "Starting", "development", "server", "at", "LINK", "Quit", "the", "server", "with", "CONTROL", "C", "NUMBER", "Internal", "Server", "Error", "api", "chatterbot", "Traceback", "most", "recent", "call", "last", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "exception", "NUMBER", "py", "line", "NUMBER", "in", "inner", "response", "get_response", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_legacy_get_response", "response", "self", "NUMBER", "_get_response", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "view", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "dispatch", "return", "handler", "request", "args", "kwargs", "File", "home", "developer", "adtran", "bot", "abot", "src", "abot", "chatterbot_views", "NUMBER", "py", "line", "NUMBER", "in", "post", "chat_session", "self", "NUMBER", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "get", "chat_session_id", "File", "home", "developer", "adtran", "bot", "venv", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "conversation", "session", "NUMBER", "py", "line", "NUMBER", "in", "get", "return", "self", "NUMBER", "sessions", "str", "session_id", "TAG", "KeyError", "NUMBER", "b", "NUMBER", "b", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "d", "NUMBER", "NUMBER", "d", "NUMBER", "d", "TAG", "TAG", "I", "think", "the", "browser", "caching", "session", "id", "we", "need", "clear", "the", "browser", "session", "id", "LINK", "django", "NUMBER", "contrib", "NUMBER", "sessions", "NUMBER", "backends", "NUMBER", "base", "NUMBER", "SessionBase", "NUMBER", "flush", "Currently", "i", "was", "handle", "like", "this", "at", "LINK", "_chatterbot", "views", "NUMBER", "py", "L", "NUMBER", "gunthercox", "be", "i", "doing", "in", "correct", "way", "Python", "if", "chat_session_id", "try", "chat_session", "self", "NUMBER", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "get", "chat_session_id", "except", "Exception", "as", "e", "print", "str", "e", "chat_session", "self", "NUMBER", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "new", "chat_session_id", "str", "chat_session", "NUMBER", "uuid", "request", "NUMBER", "session", "chat_session_id", "chat_session_id", "else", "chat_session", "self", "NUMBER", "chatterbot", "NUMBER", "conversation_sessions", "NUMBER", "new", "chat_session_id", "str", "chat_session", "NUMBER", "uuid", "request", "NUMBER", "session", "chat_session_id", "chat_session_id", "response_data", "self", "NUMBER", "chatterbot", "NUMBER", "get_response", "input_data", "chat_session_id", "data", "text", "str", "response_data", "Return", "a", "method", "not", "allow", "response", "return", "JsonResponse", "data", "status", "NUMBER", "Somehow", "i", "figured", "out", "this", "issue", "It", "was", "fail", "because", "of", "initial", "or", "first", "conversation", "browser", "cookie", "session", "id", "and", "UUID", "generate", "session", "be", "different", "NUMBER", "If", "it", "looks", "correct", "i", "will", "make", "a", "PR", "for", "this", "issue", "NUMBER", "No", "problem", "This", "looks", "awsome", "NUMBER", "Thank", "you", "very", "much", "NUMBER", "error", "distinct", "too", "big", "NUMBER", "mb", "cap", "mongodb", "data", "size", "hatterbot", "database", "NUMBER", "GB", "Same", "error", "here", "NUMBER", "Not", "with", "one", "of", "the", "examples", "though", "but", "with", "an", "import", "of", "LINK", "cristian", "Cornell_Movie", "Dialogs_Corpus", "NUMBER", "html", "in", "particular", "the", "movie_lines", "NUMBER", "txt", "The", "import", "be", "fine", "and", "it", "will", "work", "upto", "some", "point", "while", "importing", "but", "by", "the", "time", "the", "import", "be", "do", "I", "will", "get", "a", "pymongo", "NUMBER", "error", "NUMBER", "OperationFailure", "distinct", "too", "big", "NUMBER", "mb", "cap", "error", "NUMBER", "I", "will", "try", "again", "limiting", "the", "length", "of", "the", "phrases", "to", "NUMBER", "characters", "and", "report", "back", "NUMBER", "gunthercox", "i", "can", "confirm", "that", "if", "the", "size", "of", "the", "of", "text", "or", "phrase", "be", "limited", "tried", "NUMBER", "characters", "i", "see", "no", "Mongo", "DB", "error", "distinct", "too", "big", "NUMBER", "mb", "cap", "error", "NUMBER", "It", "s", "most", "likely", "my", "stupidity", "this", "be", "my", "error", "on", "python", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "C", "Users", "Administrator", "Desktop", "test", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "File", "C", "Users", "Administrator", "AppData", "Local", "Programs", "Python", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "chatterbot", "import", "ChatBot", "File", "C", "Users", "Administrator", "AppData", "Local", "Programs", "Python", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "logic", "import", "MultiLogicAdapter", "File", "C", "Users", "Administrator", "AppData", "Local", "Programs", "Python", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "logic", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "logic_adapter", "import", "LogicAdapter", "File", "C", "Users", "Administrator", "AppData", "Local", "Programs", "Python", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "logic", "logic_adapter", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "NUMBER", "utils", "import", "import_module", "ImportError", "cannot", "import", "name", "import_module", "Which", "example", "be", "you", "trying", "to", "run", "Thank", "you", "I", "ve", "be", "dying", "to", "play", "around", "with", "this", "NUMBER", "Sorry", "to", "bother", "a", "close", "issue", "but", "i", "was", "woundering", "if", "the", "chatbot", "can", "learn", "from", "speaking", "with", "the", "user", "for", "example", "through", "terminal", "Yes", "check", "out", "the", "examples", "also", "the", "docs", "but", "from", "what", "i", "seen", "in", "the", "example", "terminal", "was", "that", "it", "only", "talks", "to", "the", "user", "Or", "do", "it", "learn", "without", "needing", "NUMBER", "train", "call", "Hey", "sorry", "for", "posting", "another", "issue", "but", "Hub", "doesn", "t", "have", "a", "chat", "function", "kinda", "ironic", "NUMBER", "We", "can", "chat", "via", "email", "if", "that", "s", "cool", "NUMBER", "Your", "tkinter", "gui", "works", "like", "a", "charm", "but", "I", "m", "unfamiliar", "with", "all", "the", "self", "NUMBER", "thingies", "NUMBER", "So", "its", "kind", "a", "difficult", "for", "me", "to", "customize", "it", "haha", "NUMBER", "Two", "main", "things", "I", "be", "wanting", "to", "do", "be", "have", "my", "bot", "initiate", "the", "conversation", "and", "press", "enter", "to", "submit", "a", "response", "NUMBER", "I", "ve", "googles", "and", "trial", "n", "error", "but", "I", "be", "nowhere", "close", "NUMBER", "When", "I", "run", "the", "GUI", "and", "the", "window", "pops", "up", "I", "would", "like", "ChatBot", "Hello", "to", "be", "the", "first", "thing", "that", "appears", "in", "the", "chat", "box", "NUMBER", "Is", "there", "a", "way", "I", "can", "set", "up", "a", "Greeting", "Statement", "at", "start", "up", "No", "not", "at", "all", "NUMBER", "I", "would", "either", "be", "a", "set", "sentence", "or", "a", "random", "choice", "of", "sentences", "NUMBER", "But", "I", "don", "t", "know", "how", "your", "tkinter", "code", "works", "so", "I", "don", "t", "know", "how", "to", "get", "it", "to", "start", "off", "with", "a", "text", "NUMBER", "Check", "out", "my", "first", "repository", "LINK", "ChatterBot", "I", "didn", "t", "know", "if", "I", "should", "have", "do", "a", "pull", "request", "or", "what", "NUMBER", "haha", "Any", "ideas", "And", "I", "tried", "posting", "my", "Enter", "problem", "on", "StackOverflow", "LINK", "enter", "on", "complicated", "tkinter", "code", "Fixed", "it", "Aha", "In", "the", "initialize", "definition", "self", "NUMBER", "usr_input", "ttk", "NUMBER", "Entry", "self", "state", "normal", "self", "NUMBER", "usr_input", "NUMBER", "grid", "column", "NUMBER", "row", "NUMBER", "sticky", "nesw", "padx", "NUMBER", "pady", "NUMBER", "self", "NUMBER", "usr_input", "NUMBER", "focus", "Sets", "focus", "to", "the", "input", "bar", "at", "start", "self", "NUMBER", "usr_input", "NUMBER", "bind", "TAG", "lambda", "e", "self", "NUMBER", "get_response", "Binds", "the", "Enter", "key", "But", "I", "still", "don", "t", "know", "how", "to", "have", "the", "bot", "initiate", "conversation", "NUMBER", "Whoo", "Fixed", "the", "other", "one", "too", "self", "NUMBER", "conversation", "ScrolledText", "NUMBER", "ScrolledText", "self", "wrap", "word", "state", "normal", "self", "NUMBER", "conversation", "NUMBER", "grid", "column", "NUMBER", "row", "NUMBER", "columnspan", "NUMBER", "sticky", "nesw", "padx", "NUMBER", "pady", "NUMBER", "self", "NUMBER", "conversation", "NUMBER", "insert", "tk", "NUMBER", "END", "Eliza", "Hello", "n", "Initiates", "Conversation", "self", "NUMBER", "conversation", "state", "disabled", "Then", "we", "could", "change", "the", "string", "for", "a", "greetings", "function", "if", "we", "wanted", "NUMBER", "Hi", "all", "I", "get", "error", "for", "run", "this", "example", "Python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "import", "logging", "Uncomment", "the", "following", "line", "to", "enable", "verbose", "logging", "logging", "NUMBER", "basicConfig", "level", "logging", "NUMBER", "INFO", "Create", "a", "new", "instance", "of", "a", "ChatBot", "bot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "chatterbot", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "logic", "NUMBER", "ClosestMatchAdapter", "input_adapter", "chatterbot", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "NUMBER", "database", "NUMBER", "db", "print", "Type", "something", "to", "begin", "NUMBER", "The", "following", "loop", "will", "execute", "each", "time", "the", "user", "enters", "input", "while", "True", "try", "We", "pass", "None", "to", "this", "method", "because", "the", "parameter", "be", "not", "use", "by", "the", "TerminalAdapter", "bot_input", "bot", "NUMBER", "get_response", "None", "Press", "ctrl", "c", "or", "ctrl", "d", "on", "the", "keyboard", "to", "exit", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "Traceback", "most", "recent", "call", "last", "File", "chatbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "database", "NUMBER", "database", "NUMBER", "db", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "validate_adapter_class", "storage_adapter", "StorageAdapter", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "validate_adapter_class", "if", "not", "issubclass", "import_module", "validate_class", "Adapter", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "utils", "module_loading", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "module", "importlib", "NUMBER", "import_module", "module_path", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "return", "_bootstrap", "NUMBER", "_gcd_import", "name", "level", "package", "level", "File", "TAG", "line", "NUMBER", "in", "_gcd_import", "File", "TAG", "line", "NUMBER", "in", "_find_and_load", "File", "TAG", "line", "NUMBER", "in", "_find_and_load_unlocked", "ImportError", "No", "module", "named", "chatterbot", "NUMBER", "orage", "anyone", "can", "help", "Niccolohui", "which", "version", "of", "chatterbot", "be", "you", "use", "Try", "Shell", "pip", "install", "upgrade", "chatterbot", "Niccolohui", "i", "think", "you", "be", "not", "use", "update", "chatterbot", "NUMBER", "e", "NUMBER", "g", "NUMBER", "your", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "should", "be", "replaced", "to", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "vkosuri", "Thanks", "but", "i", "have", "update", "the", "chatterbot", "again", "NUMBER", "and", "i", "get", "this", "Traceback", "most", "recent", "call", "last", "File", "chatbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "chatterbot", "import", "ChatBot", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "logic", "import", "MultiLogicAdapter", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "logic_adapter", "import", "LogicAdapter", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "logic_adapter", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "NUMBER", "utils", "import", "import_module", "ImportError", "cannot", "import", "name", "import_module", "gunthercox", "thanks", "I", "have", "remove", "the", "directory", "named", "utils", "and", "adapters", "and", "i", "get", "this", "NUMBER", "File", "chatbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "database", "NUMBER", "database", "NUMBER", "db", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "utils", "NUMBER", "validate_adapter_class", "storage_adapter", "StorageAdapter", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "validate_adapter_class", "if", "not", "issubclass", "import_module", "validate_class", "Adapter", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "site", "package", "chatterbot", "utils", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "module", "importlib", "NUMBER", "import_module", "module_path", "File", "Users", "niccolo", "anaconda", "lib", "python", "NUMBER", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "return", "_bootstrap", "NUMBER", "_gcd_import", "name", "level", "package", "level", "File", "TAG", "line", "NUMBER", "in", "_gcd_import", "File", "TAG", "line", "NUMBER", "in", "_find_and_load", "File", "TAG", "line", "NUMBER", "in", "_find_and_load_unlocked", "ImportError", "No", "module", "named", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "chatterbot", "NUMBER", "adapters", "be", "not", "a", "package", "I", "thought", "this", "could", "be", "a", "useful", "feature", "if", "we", "have", "a", "nice", "login", "page", "for", "django", "example", "app", "NUMBER", "common", "credentials", "be", "User", "chatterbot", "Pass", "chatterbot", "gunthercox", "can", "i", "submit", "PR", "for", "this", "request", "Usually", "the", "web", "services", "be", "provide", "use", "login", "credentials", "only", "NUMBER", "That", "s", "the", "reason", "i", "be", "looking", "into", "Agreed", "with", "you", "I", "suggest", "that", "if", "this", "chatterbot", "can", "support", "the", "mechanism", "to", "create", "a", "conversational", "flow", "chatbot", "like", "wit", "NUMBER", "ai", "LINK", "with", "it", "s", "story", "I", "think", "it", "will", "be", "more", "reaching", "the", "needs", "of", "creating", "chatbot", "for", "various", "kind", "of", "scenarios", "NUMBER", "gunthercox", "well", "it", "means", "that", "we", "have", "to", "figure", "it", "out", "our", "self", "to", "make", "a", "conversational", "chatbot", "NUMBER", "Like", "what", "i", "just", "did", "by", "saving", "the", "detected", "topic", "or", "intent", "for", "each", "statement", "and", "add", "a", "step", "variable", "so", "that", "the", "bot", "know", "where", "he", "be", "in", "conversation", "NUMBER", "be", "I", "right", "Because", "let", "say", "if", "we", "have", "a", "scenario", "when", "we", "want", "to", "direct", "the", "flow", "of", "conversation", "with", "the", "user", "by", "slipping", "some", "API", "in", "the", "middle", "of", "user", "say", "and", "the", "bot", "say", "NUMBER", "for", "instance", "like", "conversation", "of", "ordering", "flowers", "NUMBER", "what", "do", "you", "think", "about", "that", "gunthercox", "ok", "yes", "but", "how", "about", "to", "make", "the", "response", "can", "I", "generate", "my", "own", "response", "in", "hard", "code", "or", "maybe", "there", "be", "a", "way", "to", "store", "in", "db", "by", "train", "method", "but", "not", "by", "user_input", "response", "pairs", "but", "the", "response", "only", "NUMBER", "so", "I", "can", "call", "chatbot", "NUMBER", "train", "Thank", "you", "for", "ordering", "flower", "with", "us", "or", "you", "have", "a", "more", "dynamic", "and", "simple", "way", "thanks", "in", "advance", "I", "did", "a", "simple", "script", "follow", "the", "tutorial", "but", "get", "this", "error", "NUMBER", "Any", "suggestion", "Thanks", "python", "chat", "NUMBER", "py", "Traceback", "most", "recent", "call", "last", "File", "chat", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "File", "Users", "Hiruma", "MyWorkSpace", "GitHub", "tzchatbot", "env", "lib", "python", "NUMBER", "site", "package", "chatterbot", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "chatterbot", "import", "ChatBot", "File", "Users", "Hiruma", "MyWorkSpace", "GitHub", "tzchatbot", "env", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "logic", "import", "MultiLogicAdapter", "File", "Users", "Hiruma", "MyWorkSpace", "GitHub", "tzchatbot", "env", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "logic_adapter", "import", "LogicAdapter", "File", "Users", "Hiruma", "MyWorkSpace", "GitHub", "tzchatbot", "env", "lib", "python", "NUMBER", "site", "package", "chatterbot", "logic", "logic_adapter", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "NUMBER", "utils", "import", "import_module", "ImportError", "cannot", "import", "name", "import_module", "In", "Ubuntu", "Linux", "NUMBER", "desktop", "the", "upper", "two", "directories", "utils", "and", "adapters", "be", "located", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "delete", "it", "and", "it", "will", "work", "NUMBER", "gunthercox", "this", "error", "i", "have", "seen", "when", "i", "have", "install", "chatterbot", "from", "pip", "install", "chatterbot", "may", "be", "pip", "zip", "file", "cached", "these", "file", "while", "uploading", "into", "pypi", "server", "NUMBER", "sameerror", "problem", "from", "chatterbot", "import", "Chatbot", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "ImportError", "cannot", "import", "name", "Chatbot", "I", "be", "use", "python", "NUMBER", "Thanks", "NUMBER", "gunthercox", "it", "works", "NUMBER", "Hi", "folks", "I", "m", "trying", "to", "add", "extra", "data", "to", "each", "statement", "by", "use", "add_extra", "method", "NUMBER", "But", "when", "I", "check", "in", "my", "mongodb", "the", "corresponding", "statement", "still", "do", "not", "has", "any", "extra_data", "NUMBER", "here", "be", "my", "code", "python", "input_statement", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "statement", "response", "confidence", "bot", "NUMBER", "generate_response", "input_statement", "st", "Statement", "input_statement", "st", "NUMBER", "add_extra_data", "intent", "greetings", "Here", "be", "my", "code", "while", "True", "try", "bot_input", "bot", "NUMBER", "get_response", "None", "input_statement", "bot", "NUMBER", "input", "NUMBER", "process_input_statement", "statement", "response", "confidence", "bot", "NUMBER", "generate_response", "input_statement", "st", "Statement", "input_statement", "st", "NUMBER", "add_extra_data", "intent", "greetings", "print", "str", "st", "NUMBER", "text", "bot", "NUMBER", "orage", "NUMBER", "update", "st", "Press", "ctrl", "c", "or", "ctrl", "d", "on", "the", "keyboard", "to", "exit", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "But", "I", "get", "this", "error", "NUMBER", "self", "NUMBER", "atements", "NUMBER", "bulk_write", "operations", "ordered", "False", "File", "usr", "lib", "python", "NUMBER", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "bulk_write", "bulk_api_result", "blk", "NUMBER", "execute", "self", "NUMBER", "write_concern", "NUMBER", "document", "File", "usr", "lib", "python", "NUMBER", "pymongo", "bulk", "NUMBER", "py", "line", "NUMBER", "in", "execute", "return", "self", "NUMBER", "execute_command", "sock_info", "generator", "write_concern", "File", "usr", "lib", "python", "NUMBER", "pymongo", "bulk", "NUMBER", "py", "line", "NUMBER", "in", "execute_command", "run", "NUMBER", "ops", "True", "self", "NUMBER", "collection", "NUMBER", "codec_options", "bwc", "bson", "NUMBER", "error", "NUMBER", "InvalidDocument", "Cannot", "encode", "object", "TAG", "Yes", "I", "nailed", "it", "instead", "of", "I", "m", "creating", "a", "new", "object", "I", "just", "use", "the", "exist", "statement", "variable", "from", "statement", "response", "confidence", "bot", "NUMBER", "generate_response", "input_statement", "and", "call", "statement", "NUMBER", "add_extra_data", "intent", "greetings", "and", "then", "bot", "NUMBER", "orage", "NUMBER", "update", "statement", "and", "now", "I", "can", "see", "my", "corresponding", "statement", "has", "the", "extra", "data", "NUMBER", "Thanks", "cos", "I", "just", "played", "around", "with", "python", "still", "haven", "t", "get", "the", "deep", "oop", "idea", "behind", "your", "code", "Thanks", "again", "rzai", "rzai", "NUMBER", "prj", "ykdebug", "ChatterBot", "python", "microsoft_bot", "NUMBER", "py", "Traceback", "most", "recent", "call", "last", "File", "microsoft_bot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "settings", "import", "Microsoft", "ImportError", "No", "module", "named", "settings", "rzai", "rzai", "NUMBER", "prj", "ykdebug", "ChatterBot", "rzai", "rzai", "NUMBER", "prj", "ykdebug", "ChatterBot", "python", "twitter_training_example", "NUMBER", "py", "Traceback", "most", "recent", "call", "last", "File", "twitter_training_example", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "settings", "import", "TWITTER", "ImportError", "No", "module", "named", "settings", "I", "have", "some", "docs", "improvement", "suggestions", "pertaining", "to", "the", "learning", "aspect", "of", "the", "bot", "NUMBER", "From", "the", "documentation", "An", "untrained", "instance", "of", "ChatterBot", "starts", "off", "with", "no", "knowledge", "of", "how", "to", "communicate", "NUMBER", "Each", "time", "a", "user", "enters", "a", "statement", "the", "library", "saves", "the", "text", "that", "they", "entered", "and", "the", "text", "that", "the", "statement", "was", "in", "response", "to", "NUMBER", "As", "ChatterBot", "receives", "more", "input", "the", "number", "of", "responses", "that", "it", "can", "reply", "and", "the", "accuracy", "of", "each", "response", "in", "relation", "to", "the", "input", "statement", "increase", "NUMBER", "The", "program", "selects", "the", "closest", "matching", "response", "by", "searching", "for", "the", "closest", "matching", "know", "statement", "that", "matches", "the", "input", "it", "then", "returns", "the", "most", "likely", "response", "to", "that", "statement", "based", "on", "how", "frequently", "each", "response", "be", "issue", "by", "the", "people", "the", "bot", "communicates", "with", "NUMBER", "NUMBER", "An", "untrained", "instance", "of", "ChatterBot", "Question", "Untrained", "here", "refers", "to", "an", "empty", "database", "NUMBER", "db", "NUMBER", "Each", "time", "a", "user", "enters", "a", "statement", "the", "library", "saves", "the", "text", "that", "they", "entered", "and", "the", "text", "that", "the", "statement", "was", "in", "response", "to", "Question", "Suppose", "user", "enters", "statement", "Tell", "me", "the", "weather", "in", "location", "NUMBER", "Bot", "reponse", "The", "weather", "in", "location", "be", "X", "degrees", "NUMBER", "So", "here", "statement", "and", "bot", "reponse", "be", "stored", "in", "the", "database", "NUMBER", "db", "file", "NUMBER", "In", "the", "database", "NUMBER", "db", "this", "be", "stored", "as", "The", "weather", "in", "location", "be", "X", "degrees", "in_response_to", "text", "Tell", "me", "the", "weather", "in", "location", "occurrence", "NUMBER", "What", "be", "the", "logic", "behind", "occurrence", "count", "This", "beings", "me", "to", "NUMBER", "NUMBER", "As", "ChatterBot", "receives", "more", "input", "the", "number", "of", "responses", "that", "it", "can", "reply", "and", "the", "accuracy", "of", "each", "response", "in", "relation", "to", "the", "input", "statement", "increase", "Question", "So", "if", "more", "users", "type", "in", "What", "be", "the", "weather", "in", "location", "or", "Weather", "in", "location", "NUMBER", "The", "bot", "response", "be", "The", "weather", "in", "location", "be", "X", "degrees", "NUMBER", "As", "per", "the", "doc", "the", "bot", "should", "increase", "the", "number", "of", "responses", "it", "replies", "back", "and", "it", "should", "increase", "the", "accuracy", "NUMBER", "Can", "this", "learning", "process", "be", "made", "more", "elaborate", "as", "I", "can", "not", "understand", "this", "process", "when", "applied", "to", "the", "example", "above", "NUMBER", "Also", "how", "do", "the", "occurrence", "count", "affect", "here", "NUMBER", "NUMBER", "The", "program", "selects", "the", "closest", "matching", "response", "by", "searching", "for", "the", "closest", "matching", "know", "statement", "that", "matches", "the", "input", "Question", "For", "searching", "for", "the", "close", "matching", "statement", "it", "looks", "up", "statements", "in", "database", "NUMBER", "db", "or", "corpus", "json", "Need", "some", "clarification", "NUMBER", "NUMBER", "it", "then", "returns", "the", "most", "likely", "response", "to", "that", "statement", "based", "on", "how", "frequently", "each", "response", "be", "issue", "by", "the", "people", "the", "bot", "communicates", "with", "Question", "So", "the", "bot", "determines", "the", "most", "likely", "response", "based", "on", "logic", "adapters", "use", "Applying", "this", "and", "frequency", "of", "each", "response", "to", "the", "weather", "example", "above", "we", "have", "Statement", "NUMBER", "Tell", "me", "the", "weather", "in", "location", "Statement", "NUMBER", "What", "be", "the", "weather", "in", "location", "Statement", "NUMBER", "Weather", "in", "location", "We", "have", "the", "answer", "to", "Statement", "NUMBER", "in", "corpus", "as", "The", "weather", "in", "location", "be", "X", "degrees", "NUMBER", "The", "bot", "replies", "the", "same", "to", "the", "other", "Statements", "NUMBER", "and", "NUMBER", "Or", "where", "do", "the", "learning", "process", "take", "place", "here", "Does", "the", "bot", "reply", "back", "the", "Statement", "NUMBER", "as", "response", "to", "Statement", "NUMBER", "after", "a", "number", "of", "users", "call", "the", "bot", "similar", "to", "Statement", "NUMBER", "as", "the", "occurrence", "count", "increases", "eventually", "Example", "After", "a", "number", "of", "uses", "Statement", "NUMBER", "Tell", "me", "the", "weather", "in", "location", "Bot", "The", "weather", "in", "location", "be", "X", "degrees", "Statement", "NUMBER", "What", "be", "the", "weather", "in", "location", "Bot", "The", "weather", "in", "location", "be", "X", "degrees", "From", "corpus", "or", "Bot", "Tell", "me", "the", "weather", "in", "location", "From", "learned", "data", "Please", "clarify", "the", "above", "example", "NUMBER", "The", "whole", "point", "of", "this", "post", "be", "to", "suggest", "the", "docs", "to", "give", "a", "better", "understanding", "of", "the", "learning", "process", "use", "in", "the", "bot", "s", "statement", "response", "NUMBER", "Hi", "there", "I", "m", "trying", "to", "deploy", "my", "chat", "bot", "to", "openshift", "flask", "on", "python", "NUMBER", "Then", "I", "get", "that", "issue", "Searching", "for", "chatterbot", "Reading", "LINK", "Best", "match", "ChatterBot", "NUMBER", "Downloading", "LINK", "NUMBER", "tar", "NUMBER", "gz", "md", "NUMBER", "a", "NUMBER", "bcab", "NUMBER", "dfb", "NUMBER", "a", "NUMBER", "ba", "NUMBER", "f", "NUMBER", "Processing", "ChatterBot", "NUMBER", "tar", "NUMBER", "gz", "Writing", "tmp", "easy_install", "rquhl", "NUMBER", "e", "ChatterBot", "NUMBER", "setup", "NUMBER", "cfg", "Running", "ChatterBot", "NUMBER", "setup", "NUMBER", "py", "q", "bdist_egg", "dist", "dir", "tmp", "easy_install", "rquhl", "NUMBER", "e", "ChatterBot", "NUMBER", "egg", "dist", "tmp", "dglb_h_f", "Traceback", "most", "recent", "call", "last", "File", "opt", "rh", "rh", "python", "NUMBER", "root", "usr", "lib", "python", "NUMBER", "site", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "save_modules", "yield", "saved", "File", "opt", "rh", "rh", "python", "NUMBER", "root", "usr", "lib", "python", "NUMBER", "site", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "setup_context", "yield", "File", "opt", "rh", "rh", "python", "NUMBER", "root", "usr", "lib", "python", "NUMBER", "site", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "run_setup", "DirectorySandbox", "setup_dir", "NUMBER", "run", "runner", "File", "opt", "rh", "rh", "python", "NUMBER", "root", "usr", "lib", "python", "NUMBER", "site", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "run", "return", "func", "File", "opt", "rh", "rh", "python", "NUMBER", "root", "usr", "lib", "python", "NUMBER", "site", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "runner", "_execfile", "setup_script", "ns", "File", "opt", "rh", "rh", "python", "NUMBER", "root", "usr", "lib", "python", "NUMBER", "site", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "_execfile", "exec", "code", "globals", "locals", "File", "tmp", "easy_install", "rquhl", "NUMBER", "e", "ChatterBot", "NUMBER", "setup", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "author_email", "NUMBER", "gm", "NUMBER", "uit", "NUMBER", "edu", "NUMBER", "vn", "File", "tmp", "easy_install", "rquhl", "NUMBER", "e", "ChatterBot", "NUMBER", "chatterbot", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "File", "tmp", "easy_install", "rquhl", "NUMBER", "e", "ChatterBot", "NUMBER", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "File", "tmp", "easy_install", "rquhl", "NUMBER", "e", "ChatterBot", "NUMBER", "chatterbot", "adapters", "storage", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "File", "tmp", "easy_install", "rquhl", "NUMBER", "e", "ChatterBot", "NUMBER", "chatterbot", "adapters", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "ImportError", "No", "module", "named", "jsondb", "Any", "one", "help", "me", "please", "NUMBER", "Thanks", "so", "much", "D", "Also", "had", "this", "NUMBER", "Did", "you", "try", "installing", "jsondb", "gunthercox", "will", "it", "consider", "other", "bot", "session", "objects", "for", "example", "gitter", "microsoft", "session", "object", "was", "expired", "then", "chatterbot", "session", "object", "will", "expire", "will", "this", "case", "be", "considered", "Nice", "Thank", "you", "I", "just", "made", "a", "chatbot", "with", "training", "data", "that", "I", "made", "by", "my", "own", "NUMBER", "It", "be", "trained", "with", "a", "set", "of", "conversation", "about", "animals", "which", "we", "see", "commonly", "NUMBER", "The", "only", "problem", "that", "what", "I", "find", "be", "most", "of", "the", "time", "when", "we", "ask", "the", "bot", "which", "it", "don", "t", "know", "it", "will", "reply", "an", "answer", "which", "has", "closest", "match", "NUMBER", "Suppose", "I", "be", "ask", "the", "bot", "what", "be", "a", "cat", "and", "it", "know", "the", "response", "for", "what", "be", "a", "rat", "only", "then", "it", "reply", "the", "answer", "for", "what", "be", "a", "rat", "NUMBER", "So", "the", "answer", "which", "be", "given", "by", "the", "bot", "become", "entirely", "wrong", "NUMBER", "I", "tried", "use", "LowConfidence", "adapter", "to", "tackle", "with", "this", "issue", "and", "then", "I", "realized", "I", "will", "not", "be", "able", "to", "get", "the", "auto", "correction", "feature", "that", "currently", "AIML", "don", "t", "have", "if", "I", "filter", "response", "with", "Low", "confidence", "adapter", "NUMBER", "By", "auto", "correction", "what", "I", "meant", "be", "sometimes", "we", "write", "wat", "instead", "of", "what", "dat", "instead", "of", "that", "etc", "NUMBER", "all", "this", "can", "be", "managed", "correctly", "by", "use", "closest", "match", "adapter", "NUMBER", "So", "as", "a", "solution", "for", "all", "this", "problem", "what", "I", "was", "thinking", "was", "like", "if", "we", "have", "a", "json", "file", "of", "following", "format", "as", "a", "training", "set", "can", "we", "go", "through", "each", "node", "for", "searching", "for", "keyword", "and", "if", "a", "keyword", "be", "find", "then", "can", "we", "stick", "on", "that", "specific", "list", "of", "conversation", "to", "find", "out", "a", "closest", "match", "response", "cow", "What", "be", "a", "cow", "Cow", "be", "a", "domestic", "animal", "cat", "What", "be", "a", "cat", "Cat", "be", "a", "pet", "Suppose", "I", "be", "ask", "a", "question", "what", "be", "a", "cat", "after", "remove", "the", "stopwords", "or", "by", "tokenizing", "each", "word", "we", "can", "search", "and", "find", "a", "node", "which", "has", "a", "best", "match", "and", "can", "find", "a", "response", "for", "the", "question", "from", "the", "list", "of", "corresponding", "node", "NUMBER", "Can", "we", "do", "like", "that", "I", "will", "explain", "with", "an", "example", "If", "a", "user", "asks", "What", "be", "a", "cat", "first", "we", "will", "tokenize", "it", "or", "we", "remove", "the", "stopwords", "and", "then", "tokenize", "it", "NUMBER", "Ater", "tokenizing", "we", "will", "get", "NUMBER", "tokens", "What", "be", "a", "cat", "and", "then", "we", "will", "compare", "all", "this", "NUMBER", "tokens", "one", "by", "one", "to", "all", "the", "keys", "that", "we", "have", "in", "our", "json", "data", "because", "we", "don", "t", "know", "what", "be", "the", "keyword", "yet", "NUMBER", "Then", "after", "finding", "the", "key", "from", "the", "json", "data", "we", "will", "search", "for", "a", "closest", "match", "for", "the", "question", "from", "that", "particular", "node", "NUMBER", "Then", "we", "will", "get", "an", "accurate", "answer", "NUMBER", "vishnu", "ks", "I", "be", "facing", "the", "same", "kind", "of", "issue", "on", "the", "responses", "be", "fighting", "with", "chatterbot", "for", "NUMBER", "weeks", "now", "to", "get", "the", "right", "combination", "to", "knock", "it", "out", "D", "and", "I", "slightly", "have", "the", "same", "idea", "use", "tokenized", "data", "as", "tags", "then", "store", "them", "in", "the", "extra_data", "field", "along", "side", "the", "statements", "NUMBER", "I", "will", "implement", "it", "and", "let", "gunthercox", "see", "it", "and", "maybe", "he", "ll", "give", "us", "another", "hint", "he", "might", "have", "an", "illumination", "from", "it", "and", "come", "up", "with", "a", "better", "idea", "gunthercox", "be", "it", "possible", "to", "having", "both", "voice", "and", "response", "in", "a", "Django", "chatterbot", "If", "so", "could", "you", "provide", "an", "example", "scenario", "here", "gunthercox", "thank", "you", "After", "chatting", "with", "the", "chat", "bot", "for", "sometime", "it", "get", "freezed", "and", "was", "not", "replying", "to", "any", "question", "NUMBER", "It", "happened", "only", "after", "add", "some", "logic", "adapters", "NUMBER", "I", "checked", "after", "remove", "those", "logic", "adapters", "and", "then", "also", "it", "was", "not", "work", "I", "will", "paste", "my", "code", "and", "error", "log", "here", "NUMBER", "Hope", "you", "guys", "will", "figure", "out", "a", "way", "to", "solve", "this", "problem", "soon", "NUMBER", "screen", "shot", "NUMBER", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "NUMBER", "be", "LINK", "b", "NUMBER", "a", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "b", "NUMBER", "NUMBER", "d", "NUMBER", "ed", "NUMBER", "fdc", "NUMBER", "png", "What", "I", "write", "on", "settings", "NUMBER", "py", "be", "this", "python", "Build", "paths", "inside", "the", "project", "like", "this", "os", "NUMBER", "path", "NUMBER", "join", "BASE_DIR", "NUMBER", "import", "os", "BASE_DIR", "os", "NUMBER", "path", "NUMBER", "dirname", "os", "NUMBER", "path", "NUMBER", "dirname", "os", "NUMBER", "path", "NUMBER", "abspath", "__file__", "Quick", "start", "development", "settings", "unsuitable", "for", "production", "See", "LINK", "SECURITY", "WARNING", "keep", "the", "secret", "key", "use", "in", "production", "secret", "SECRET_KEY", "fsch", "NUMBER", "q", "ol", "NUMBER", "x", "nwdl", "NUMBER", "ixbd", "NUMBER", "clx", "NUMBER", "f", "NUMBER", "i", "NUMBER", "n", "NUMBER", "y", "pmn", "SECURITY", "WARNING", "don", "t", "run", "with", "debug", "turned", "on", "in", "production", "DEBUG", "True", "ALLOWED_HOSTS", "Application", "definition", "INSTALLED_APPS", "django", "NUMBER", "contrib", "NUMBER", "admin", "django", "NUMBER", "contrib", "NUMBER", "auth", "django", "NUMBER", "contrib", "NUMBER", "contenttypes", "django", "NUMBER", "contrib", "NUMBER", "sessions", "django", "NUMBER", "contrib", "NUMBER", "message", "django", "NUMBER", "contrib", "NUMBER", "aticfiles", "chatterbot", "NUMBER", "ext", "NUMBER", "django_chatterbot", "example_app", "ChatterBot", "settings", "CHATTERBOT", "name", "Django", "ChatterBot", "Example", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "training_data", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "greetings", "logic_adapters", "import_path", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMatchAdapter", "import_path", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "I", "be", "sorry", "but", "I", "do", "not", "understand", "NUMBER", "MIDDLEWARE_CLASSES", "django", "NUMBER", "contrib", "NUMBER", "sessions", "NUMBER", "middleware", "NUMBER", "SessionMiddleware", "django", "NUMBER", "middleware", "NUMBER", "common", "NUMBER", "CommonMiddleware", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "middleware", "NUMBER", "AuthenticationMiddleware", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "middleware", "NUMBER", "SessionAuthenticationMiddleware", "django", "NUMBER", "contrib", "NUMBER", "message", "NUMBER", "middleware", "NUMBER", "MessageMiddleware", "django", "NUMBER", "middleware", "NUMBER", "clickjacking", "NUMBER", "XFrameOptionsMiddleware", "django", "NUMBER", "middleware", "NUMBER", "security", "NUMBER", "SecurityMiddleware", "ROOT_URLCONF", "example_app", "NUMBER", "urls", "TEMPLATES", "BACKEND", "django", "NUMBER", "template", "NUMBER", "backends", "NUMBER", "django", "NUMBER", "DjangoTemplates", "DIRS", "APP_DIRS", "True", "OPTIONS", "context_processors", "django", "NUMBER", "template", "NUMBER", "context_processors", "NUMBER", "debug", "django", "NUMBER", "template", "NUMBER", "context_processors", "NUMBER", "request", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "context_processors", "NUMBER", "auth", "django", "NUMBER", "contrib", "NUMBER", "message", "NUMBER", "context_processors", "NUMBER", "message", "WSGI_APPLICATION", "example_app", "NUMBER", "wsgi", "NUMBER", "application", "Database", "LINK", "databases", "DATABASES", "default", "ENGINE", "django", "NUMBER", "db", "NUMBER", "backends", "NUMBER", "sqlite", "NUMBER", "NAME", "os", "NUMBER", "path", "NUMBER", "join", "BASE_DIR", "db", "NUMBER", "sqlite", "NUMBER", "Internationalization", "LINK", "LANGUAGE_CODE", "en", "us", "TIME_ZONE", "UTC", "USE_I", "NUMBER", "N", "True", "USE_L", "NUMBER", "N", "True", "USE_TZ", "True", "Static", "file", "CSS", "JavaScript", "Images", "LINK", "file", "STATIC_URL", "static", "STATICFILES_DIRS", "os", "NUMBER", "path", "NUMBER", "join", "os", "NUMBER", "path", "NUMBER", "dirname", "__file__", "static", "To", "understand", "how", "ChatterBot", "works", "I", "can", "go", "though", "the", "code", "NUMBER", "to", "understand", "more", "easily", "how", "it", "works", "can", "we", "have", "a", "high", "level", "architecture", "and", "a", "code", "flow", "diagram", "I", "think", "you", "be", "looking", "something", "like", "this", "LINK", "process", "flow", "diagram", "I", "was", "get", "this", "error", "while", "use", "mongodb", "storage", "adapter", "NUMBER", "It", "was", "work", "fine", "in", "previous", "version", "NUMBER", "error", "LINK", "aeb", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "fff", "NUMBER", "d", "NUMBER", "png", "This", "was", "the", "code", "python", "from", "chatterbot", "import", "ChatBot", "import", "logging", "from", "chatterbot", "NUMBER", "trainers", "import", "ChatterBotCorpusTrainer", "Uncomment", "the", "following", "line", "to", "enable", "verbose", "logging", "logging", "NUMBER", "basicConfig", "level", "logging", "NUMBER", "INFO", "Create", "a", "new", "instance", "of", "a", "ChatBot", "chatterbot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMatchAdapter", "input_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "chtdatabase", "chatterbot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "chatterbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "greetings", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "conversations", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "city", "print", "Type", "something", "to", "begin", "NUMBER", "The", "following", "loop", "will", "execute", "each", "time", "the", "user", "enters", "input", "while", "True", "try", "We", "pass", "None", "to", "this", "method", "because", "the", "parameter", "be", "not", "use", "by", "the", "TerminalAdapter", "bot_input", "chatterbot", "NUMBER", "get_response", "None", "Press", "ctrl", "c", "or", "ctrl", "d", "on", "the", "keyboard", "to", "exit", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "In", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "mongodb", "NUMBER", "MongoDatabaseAdapter", "mongo_to_object", "python", "def", "mongo_to_object", "self", "statement_data", "Return", "Statement", "object", "when", "given", "data", "returned", "from", "Mongo", "DB", "NUMBER", "statement_text", "statement_data", "text", "del", "statement_data", "text", "statement_data", "in_response_to", "self", "NUMBER", "deserialize_responses", "statement_data", "in_response_to", "return", "Statement", "statement_text", "statement_data", "statement_data", "doesn", "t", "always", "have", "in_response_to", "and", "the", "situation", "often", "happens", "in", "twitter", "NUMBER", "Okay", "NUMBER", "I", "be", "on", "it", "NUMBER", "NUMBER", "Thank", "you", "both", "When", "i", "try", "to", "train", "my", "bot", "with", "persian", "unicode", "data", "that", "already", "stored", "in", "corpus", "data", "persian", "folder", "and", "get", "responce", "from", "bot", "this", "error", "occure", "Here", "be", "my", "sample", "code", "any", "help", "or", "suggestion", "please", "and", "sorry", "for", "my", "bad", "english", "python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Ron", "Obvious", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "persian", "print", "chatbot", "NUMBER", "get_response", "u", "\u0633\u0644\u0627\u0645", "and", "below", "be", "last", "lines", "of", "error", "NUMBER", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "write_data", "db", "NUMBER", "write", "encode", "obj", "File", "D", "Python", "NUMBER", "lib", "encodings", "cp", "NUMBER", "py", "line", "NUMBER", "in", "encode", "return", "codecs", "NUMBER", "charmap_encode", "input", "self", "NUMBER", "error", "encoding_table", "NUMBER", "UnicodeEncodeError", "charmap", "codec", "can", "t", "encode", "characters", "in", "position", "NUMBER", "NUMBER", "character", "maps", "to", "TAG", "thank", "you", "for", "your", "reply", "NUMBER", "But", "i", "m", "work", "on", "a", "project", "a", "telegram", "bot", "and", "want", "use", "this", "package", "for", "chat", "section", "NUMBER", "Therefore", "i", "cant", "wait", "for", "next", "version", "NUMBER", "Is", "it", "possible", "for", "you", "to", "post", "change", "or", "help", "me", "to", "correct", "this", "issue", "myself", "NUMBER", "Hello", "again", "and", "thanks", "for", "your", "reply", "I", "download", "latest", "version", "of", "package", "but", "still", "have", "same", "error", "therefore", "i", "test", "same", "code", "with", "hindi", "corpus", "data", "but", "still", "same", "error", "occur", "NUMBER", "below", "be", "new", "example", "code", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Ron", "Obvious", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "Train", "based", "on", "the", "hindi", "corpus", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "hindi", "NUMBER", "greetings", "print", "chatbot", "NUMBER", "get_response", "u", "\u0928\u092e\u0938", "\u0924", "Train", "based", "on", "the", "english", "corpus", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "and", "error", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "update", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement", "NUMBER", "text", "value", "data", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "self", "NUMBER", "_set_content", "key", "value", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_set_content", "data", "write_data", "self", "NUMBER", "path", "obj", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "write_data", "db", "NUMBER", "write", "encode", "obj", "File", "D", "Python", "NUMBER", "lib", "encodings", "cp", "NUMBER", "py", "line", "NUMBER", "in", "encode", "return", "codecs", "NUMBER", "charmap_encode", "input", "self", "NUMBER", "error", "encoding_table", "NUMBER", "UnicodeEncodeError", "charmap", "codec", "can", "t", "encode", "characters", "in", "position", "NUMBER", "NUMBER", "character", "maps", "to", "TAG", "i", "attached", "image", "of", "pip", "list", "command", "to", "see", "my", "package", "version", "NUMBER", "capture", "LINK", "b", "NUMBER", "a", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "fe", "NUMBER", "f", "NUMBER", "eff", "NUMBER", "a", "NUMBER", "PNG", "Thanks", "again", "i", "test", "my", "jsondatabase", "version", "and", "it", "be", "up", "to", "date", "already", "NUMBER", "also", "test", "your", "example", "code", "and", "still", "get", "same", "error", "as", "bellow", "Traceback", "most", "recent", "call", "last", "File", "D", "Python", "NUMBER", "telebot", "master", "chater", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "hindi", "NUMBER", "greetings", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "trainer", "NUMBER", "train", "pair", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "force", "True", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "chatterbot", "storage", "jsonfile", "NUMBER", "py", "line", "NUMBER", "in", "update", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement", "NUMBER", "text", "value", "data", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "self", "NUMBER", "_set_content", "key", "value", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_set_content", "data", "write_data", "self", "NUMBER", "path", "obj", "File", "D", "Python", "NUMBER", "Lib", "site", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "write_data", "db", "NUMBER", "write", "encode", "obj", "File", "D", "Python", "NUMBER", "lib", "encodings", "cp", "NUMBER", "py", "line", "NUMBER", "in", "encode", "return", "codecs", "NUMBER", "charmap_encode", "input", "self", "NUMBER", "error", "encoding_table", "NUMBER", "UnicodeEncodeError", "charmap", "codec", "can", "t", "encode", "characters", "in", "position", "NUMBER", "NUMBER", "character", "maps", "to", "TAG", "did", "you", "test", "your", "example", "code", "and", "run", "with", "no", "error", "i", "attached", "output", "of", "commands", "ostest", "LINK", "bb", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "ff", "NUMBER", "f", "NUMBER", "d", "NUMBER", "fe", "NUMBER", "PNG", "Also", "i", "test", "your", "example", "test", "code", "in", "python", "command", "line", "step", "by", "step", "marked", "in", "yellow", "in", "attached", "image", "and", "get", "same", "error", "again", "surrounded", "with", "red", "color", "line", "and", "it", "seems", "printing", "unicode", "to", "console", "doesn", "t", "cause", "error", "while", "when", "i", "run", "command", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "hindi", "NUMBER", "greetings", "this", "error", "occur", "chater", "LINK", "bb", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "eaa", "NUMBER", "c", "NUMBER", "cbf", "NUMBER", "ab", "NUMBER", "PNG", "NUMBER", "Dear", "onlydarkknight", "Did", "you", "solve", "the", "problem", "root", "localhost", "django_app", "python", "manage", "NUMBER", "py", "train", "Unknown", "command", "train", "Type", "manage", "NUMBER", "py", "help", "for", "usage", "NUMBER", "root", "localhost", "django_app", "python", "NUMBER", "manage", "NUMBER", "py", "train", "Unknown", "command", "train", "Type", "manage", "NUMBER", "py", "help", "for", "usage", "NUMBER", "cannot", "use", "this", "command", "NUMBER", "i", "will", "get", "the", "current", "version", "and", "try", "it", "thx", "a", "lot", "NUMBER", "Hey", "im", "sure", "this", "be", "a", "noob", "issue", "but", "your", "example", "in", "the", "docs", "ends", "with", "The", "following", "loop", "will", "execute", "each", "time", "the", "user", "enters", "input", "while", "True", "try", "We", "pass", "None", "to", "this", "method", "because", "the", "parameter", "be", "not", "use", "by", "the", "TerminalAdapter", "bot_input", "bot", "NUMBER", "get_response", "None", "Press", "ctrl", "c", "or", "ctrl", "d", "on", "the", "keyboard", "to", "exit", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "But", "when", "i", "be", "run", "my", "bot", "in", "Spyder", "i", "cant", "break", "the", "loop", "with", "the", "keyboard", "and", "i", "be", "not", "familiar", "with", "the", "other", "function", "NUMBER", "How", "can", "i", "get", "the", "loop", "to", "break", "if", "i", "input", "a", "specific", "string", "or", "input", "Like", "Exit", "Conversation", "NUMBER", "Yes", "but", "im", "not", "sure", "how", "set", "a", "condition", "based", "on", "something", "i", "type", "to", "the", "bot", "NUMBER", "I", "be", "run", "Python", "NUMBER", "with", "Anaconda", "which", "comes", "with", "a", "bunch", "of", "package", "and", "Spyder", "NUMBER", "And", "i", "just", "copy", "and", "pasted", "the", "Example", "in", "your", "docs", "NUMBER", "The", "conversation", "runs", "in", "an", "IPython", "console", "inside", "the", "Spyder", "window", "i", "type", "and", "press", "Enter", "and", "the", "response", "pops", "up", "underneath", "NUMBER", "I", "just", "cant", "get", "the", "loop", "to", "stop", "without", "closing", "the", "console", "NUMBER", "And", "while", "i", "have", "your", "attention", "im", "be", "wanting", "to", "program", "a", "GUI", "to", "run", "my", "bot", "it", "NUMBER", "Like", "run", "the", "NUMBER", "py", "file", "it", "pops", "up", "a", "chat", "window", "and", "i", "chat", "with", "my", "bot", "through", "that", "window", "NUMBER", "Do", "you", "have", "any", "suggestions", "on", "the", "GUI", "package", "to", "use", "Like", "Tkinter", "or", "PyQt", "or", "others", "Know", "of", "any", "code", "for", "a", "chat", "window", "already", "developed", "They", "did", "not", "NUMBER", "On", "the", "leftside", "of", "my", "Spyder", "window", "be", "the", "notebook", "housing", "my", "code", "NUMBER", "On", "the", "right", "i", "have", "an", "object", "inspector", "at", "the", "top", "and", "the", "IPython", "console", "at", "the", "bottom", "NUMBER", "When", "i", "run", "your", "example", "the", "console", "tells", "me", "to", "download", "levenshein", "and", "stuff", "then", "prints", "Type", "something", "to", "begin", "NUMBER", "and", "my", "dialouge", "with", "the", "bot", "starts", "NUMBER", "But", "no", "matter", "if", "my", "crusor", "be", "in", "the", "console", "notebook", "or", "inspector", "preasing", "I", "shift", "I", "ctrl", "c", "ctrl", "c", "twice", "or", "ctrl", "d", "i", "can", "t", "get", "the", "conversation", "to", "quit", "and", "the", "console", "to", "listen", "for", "the", "next", "command", "without", "closing", "the", "console", "window", "NUMBER", "So", "i", "would", "like", "to", "break", "the", "loop", "in", "the", "conversation", "by", "a", "word", "or", "phrase", "NUMBER", "But", "I", "m", "not", "sure", "what", "the", "user", "input", "be", "call", "in", "your", "package", "NUMBER", "But", "the", "GUI", "link", "you", "sent", "me", "was", "perfect", "That", "be", "exactly", "what", "I", "was", "looking", "for", "Thank", "you", "so", "much", "As", "per", "my", "email", "Added", "the", "pep", "NUMBER", "engine", "to", "check", "for", "PEP", "NUMBER", "style", "as", "indicated", "in", "the", "contributor", "section", "of", "your", "README", "NUMBER", "Added", "a", "ratings", "path", "to", "grade", "all", "NUMBER", "py", "file", "NUMBER", "If", "you", "re", "interested", "you", "can", "also", "add", "the", "Radon", "engine", "to", "check", "for", "complexity", "NUMBER", "Feel", "free", "to", "reach", "out", "if", "you", "have", "any", "question", "NUMBER", "I", "notice", "the", "update", "allowing", "for", "training", "from", "external", "corpora", "update", "my", "chatterbot", "install", "and", "pull", "the", "newest", "version", "of", "chatterbot", "but", "when", "I", "try", "to", "train", "the", "chatbot", "by", "run", "the", "command", "python", "manage", "NUMBER", "py", "train", "as", "instructed", "in", "docs", "django", "training", "NUMBER", "rst", "I", "just", "get", "the", "error", "Unknown", "command", "train", "NUMBER", "Is", "there", "any", "additional", "step", "I", "be", "miss", "Sorry", "when", "reinstalling", "the", "new", "Chatterbot", "I", "forgot", "to", "run", "setup", "NUMBER", "py", "NUMBER", "Issue", "be", "resolve", "now", "NUMBER", "So", "NUMBER", "I", "have", "a", "problem", "NUMBER", "I", "ll", "begin", "from", "the", "start", "NUMBER", "I", "start", "with", "installing", "chatterbot", "use", "NUMBER", "pip", "NUMBER", "install", "chatterbot", "Which", "worked", "well", "and", "install", "this", "NUMBER", "chatterbot", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "fuzzywuzzy", "TAG", "NUMBER", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "chatterbot", "nltk", "TAG", "NUMBER", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "chatterbot", "textblob", "TAG", "NUMBER", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "chatterbot", "python", "twitter", "NUMBER", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "chatterbot", "jsondatabase", "NUMBER", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "chatterbot", "request", "in", "usr", "lib", "python", "NUMBER", "dist", "package", "from", "python", "twitter", "NUMBER", "chatterbot", "future", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "python", "twitter", "NUMBER", "chatterbot", "request", "oauthlib", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "python", "twitter", "NUMBER", "chatterbot", "oauthlib", "NUMBER", "in", "usr", "lib", "python", "NUMBER", "dist", "package", "from", "request", "oauthlib", "python", "twitter", "NUMBER", "chatterbot", "But", "if", "i", "check", "the", "install", "version", "with", "python", "m", "chatterbot", "version", "it", "tells", "me", "this", "NUMBER", "usr", "bin", "python", "No", "module", "named", "chatterbot", "So", "i", "decided", "to", "check", "the", "path", "NUMBER", "cd", "usr", "bin", "python", "But", "then", "NUMBER", "bash", "cd", "usr", "bin", "python", "Isn", "t", "a", "directory", "Just", "to", "make", "sure", "that", "chatterbot", "isn", "t", "install", "i", "copyed", "the", "example", "from", "the", "documentation", "LINK", "terminal", "example", "made", "it", "executable", "with", "chmod", "x", "chatbot", "NUMBER", "py", "and", "start", "it", "with", "NUMBER", "NUMBER", "chatbot", "NUMBER", "py", "But", "then", "i", "get", "this", "NUMBER", "from", "can", "t", "read", "var", "mail", "chatterbot", "import", "unable", "to", "open", "X", "server", "error", "import", "NUMBER", "c", "ImportImageCommand", "NUMBER", "NUMBER", "chatbot", "NUMBER", "py", "Zeile", "NUMBER", "Syntaxerror", "unexpect", "word", "NUMBER", "chatbot", "NUMBER", "py", "Zeile", "NUMBER", "bot", "ChatBot", "Terminal", "First", "line", "I", "checked", "cd", "var", "mail", "chatterbot", "but", "bash", "cd", "root", "Isn", "t", "a", "directory", "Why", "should", "it", "make", "a", "folder", "there", "Second", "line", "third", "line", "I", "don", "t", "understand", "NUMBER", "Why", "do", "it", "have", "a", "problem", "with", "that", "But", "i", "don", "t", "give", "up", "yet", "I", "did", "python", "NUMBER", "chatbot", "NUMBER", "py", "which", "gave", "this", "response", "NUMBER", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "fuzzywuzzy", "fuzz", "NUMBER", "py", "NUMBER", "UserWarning", "Using", "slow", "pure", "python", "SequenceMatcher", "NUMBER", "Install", "python", "Levenshtein", "to", "remove", "this", "warning", "warnings", "NUMBER", "warn", "Using", "slow", "pure", "python", "SequenceMatcher", "NUMBER", "Install", "python", "Levenshtein", "to", "remove", "this", "warning", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "decorators", "NUMBER", "py", "NUMBER", "DeprecationWarning", "inspect", "NUMBER", "getargspec", "be", "deprecate", "use", "inspect", "NUMBER", "signature", "instead", "regargs", "varargs", "varkwargs", "defaults", "inspect", "NUMBER", "getargspec", "func", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "application", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Resource", "tokenizers", "punkt", "PY", "NUMBER", "english", "NUMBER", "pickle", "not", "find", "NUMBER", "Please", "use", "the", "NLTK", "Downloader", "to", "obtain", "the", "resource", "nltk", "NUMBER", "download", "Searched", "in", "home", "don", "t", "want", "to", "tell", "my", "username", "nltk_data", "usr", "share", "nltk_data", "usr", "local", "share", "nltk_data", "usr", "lib", "nltk_data", "usr", "local", "lib", "nltk_data", "Traceback", "most", "recent", "call", "last", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "decorators", "NUMBER", "py", "line", "NUMBER", "in", "decorated", "return", "func", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "tokenizers", "NUMBER", "py", "line", "NUMBER", "in", "tokenize", "return", "nltk", "NUMBER", "tokenize", "NUMBER", "sent_tokenize", "text", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "tokenize", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "sent_tokenize", "tokenizer", "load", "tokenizers", "punkt", "NUMBER", "NUMBER", "pickle", "NUMBER", "format", "language", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "load", "opened_resource", "_open", "resource_url", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "_open", "return", "find", "path_", "path", "NUMBER", "open", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "raise", "LookupError", "resource_not_found", "LookupError", "Resource", "tokenizers", "punkt", "PY", "NUMBER", "english", "NUMBER", "pickle", "not", "find", "NUMBER", "Please", "use", "the", "NLTK", "Downloader", "to", "obtain", "the", "resource", "nltk", "NUMBER", "download", "Searched", "in", "home", "don", "t", "want", "to", "tell", "my", "username", "nltk_data", "usr", "share", "nltk_data", "usr", "local", "share", "nltk_data", "usr", "lib", "nltk_data", "usr", "local", "lib", "nltk_data", "During", "handle", "of", "the", "above", "exception", "another", "exception", "occur", "Traceback", "most", "recent", "call", "last", "File", "chatbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "database", "NUMBER", "database", "NUMBER", "db", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "add_adapter", "adapter", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "add_adapter", "adapter", "NewAdapter", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "logic", "time_adapter", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "classifier", "NaiveBayesClassifier", "training_data", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "train_features", "self", "NUMBER", "extract_features", "d", "c", "for", "d", "c", "in", "self", "NUMBER", "train_set", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "self", "NUMBER", "train_features", "self", "NUMBER", "extract_features", "d", "c", "for", "d", "c", "in", "self", "NUMBER", "train_set", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "extract_features", "return", "self", "NUMBER", "feature_extractor", "text", "self", "NUMBER", "train_set", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "basic_extractor", "word_features", "_get_words_from_dataset", "train_set", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "_get_words_from_dataset", "return", "set", "all_words", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "all_words", "chain", "NUMBER", "from_iterable", "tokenize", "words", "for", "words", "_", "in", "dataset", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "tokenize", "return", "word_tokenize", "words", "include_punc", "False", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "tokenizers", "NUMBER", "py", "line", "NUMBER", "in", "word_tokenize", "for", "sentence", "in", "sent_tokenize", "text", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "base", "NUMBER", "py", "line", "NUMBER", "in", "itokenize", "return", "t", "for", "t", "in", "self", "NUMBER", "tokenize", "text", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "decorators", "NUMBER", "py", "line", "NUMBER", "in", "decorated", "raise", "MissingCorpusError", "textblob", "NUMBER", "exception", "NUMBER", "MissingCorpusError", "Looks", "like", "you", "be", "miss", "some", "required", "data", "for", "this", "feature", "NUMBER", "To", "download", "the", "necessary", "data", "simply", "run", "python", "m", "textblob", "NUMBER", "download_corpora", "or", "use", "the", "NLTK", "downloader", "to", "download", "the", "miss", "data", "LINK", "If", "this", "doesn", "t", "fix", "the", "problem", "file", "an", "issue", "at", "LINK", "Marking", "it", "as", "code", "didn", "t", "worked", "NUMBER", "I", "don", "t", "know", "why", "NUMBER", "And", "for", "Python", "NUMBER", "python", "chatbot", "NUMBER", "py", "Told", "me", "this", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "chatbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "ImportError", "No", "module", "named", "chatterbot", "Aha", "Okay", "NUMBER", "The", "first", "time", "i", "was", "told", "that", "the", "module", "chatterbot", "isn", "t", "there", "NUMBER", "Let", "s", "try", "to", "install", "it", "with", "git", "NUMBER", "git", "clone", "LINK", "Output", "NUMBER", "Klone", "nach", "ChatterBot", "NUMBER", "remote", "Counting", "objects", "NUMBER", "do", "NUMBER", "remote", "Total", "NUMBER", "delta", "NUMBER", "reused", "NUMBER", "delta", "NUMBER", "pack", "reused", "NUMBER", "Empfange", "Objekte", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "MiB", "NUMBER", "KiB", "s", "Fertig", "NUMBER", "L\u00f6se", "Unterschiede", "auf", "NUMBER", "NUMBER", "NUMBER", "Fertig", "NUMBER", "Pr\u00fcfe", "Konnektivit\u00e4t", "NUMBER", "Fertig", "NUMBER", "I", "m", "too", "lazy", "to", "translate", "it", "NUMBER", "It", "s", "german", "if", "you", "want", "to", "know", "NUMBER", "Installing", "NUMBER", "pip", "install", "NUMBER", "ChatterBot", "Okay", "NUMBER", "Installed", "NUMBER", "Let", "s", "try", "again", "NUMBER", "python", "NUMBER", "chatbot", "NUMBER", "py", "Same", "respone", "NUMBER", "python", "chatbot", "NUMBER", "py", "Same", "response", "NUMBER", "NUMBER", "chatbot", "NUMBER", "py", "Same", "response", "NUMBER", "I", "don", "t", "know", "what", "i", "should", "do", "now", "NUMBER", "Please", "help", "me", "NUMBER", "Thank", "you", "NUMBER", "I", "would", "prefer", "python", "NUMBER", "Of", "course", "i", "can", "NUMBER", "pip", "NUMBER", "install", "chatterbot", "upgrade", "Output", "NUMBER", "The", "directory", "home", "don", "t", "want", "to", "tell", "my", "username", "NUMBER", "cache", "pip", "http", "or", "its", "parent", "directory", "be", "not", "owned", "by", "the", "current", "user", "and", "the", "cache", "has", "be", "disabled", "NUMBER", "Please", "check", "the", "permissions", "and", "owner", "of", "that", "directory", "NUMBER", "If", "executing", "pip", "with", "sudo", "you", "may", "want", "sudo", "s", "H", "flag", "NUMBER", "The", "directory", "home", "don", "t", "want", "to", "tell", "my", "username", "NUMBER", "cache", "pip", "or", "its", "parent", "directory", "be", "not", "owned", "by", "the", "current", "user", "and", "caching", "wheels", "has", "be", "disabled", "NUMBER", "check", "the", "permissions", "and", "owner", "of", "that", "directory", "NUMBER", "If", "executing", "pip", "with", "sudo", "you", "may", "want", "sudo", "s", "H", "flag", "NUMBER", "Collecting", "chatterbot", "Downloading", "ChatterBot", "NUMBER", "py", "NUMBER", "py", "NUMBER", "none", "any", "NUMBER", "whl", "NUMBER", "kB", "NUMBER", "NUMBER", "kB", "NUMBER", "MB", "s", "Requirement", "already", "up", "to", "date", "textblob", "TAG", "NUMBER", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "chatterbot", "Requirement", "already", "up", "to", "date", "nltk", "TAG", "NUMBER", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "chatterbot", "Requirement", "already", "up", "to", "date", "fuzzywuzzy", "TAG", "NUMBER", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "chatterbot", "Requirement", "already", "up", "to", "date", "jsondatabase", "NUMBER", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "chatterbot", "Requirement", "already", "up", "to", "date", "python", "twitter", "NUMBER", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "chatterbot", "Collecting", "request", "from", "python", "twitter", "NUMBER", "chatterbot", "Downloading", "request", "NUMBER", "py", "NUMBER", "py", "NUMBER", "none", "any", "NUMBER", "whl", "NUMBER", "kB", "NUMBER", "NUMBER", "kB", "NUMBER", "MB", "s", "Requirement", "already", "up", "to", "date", "future", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "python", "twitter", "NUMBER", "chatterbot", "Requirement", "already", "up", "to", "date", "request", "oauthlib", "in", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "from", "python", "twitter", "NUMBER", "chatterbot", "Collecting", "oauthlib", "NUMBER", "from", "request", "oauthlib", "python", "twitter", "NUMBER", "chatterbot", "Downloading", "oauthlib", "NUMBER", "tar", "NUMBER", "gz", "NUMBER", "kB", "NUMBER", "NUMBER", "kB", "NUMBER", "MB", "s", "Installing", "collected", "package", "chatterbot", "request", "oauthlib", "Found", "exist", "installation", "ChatterBot", "NUMBER", "Uninstalling", "ChatterBot", "NUMBER", "Successfully", "uninstalled", "ChatterBot", "NUMBER", "Found", "exist", "installation", "request", "NUMBER", "Uninstalling", "request", "NUMBER", "Successfully", "uninstalled", "request", "NUMBER", "Found", "exist", "installation", "oauthlib", "NUMBER", "Uninstalling", "oauthlib", "NUMBER", "Successfully", "uninstalled", "oauthlib", "NUMBER", "Running", "setup", "NUMBER", "py", "install", "for", "oauthlib", "NUMBER", "do", "Successfully", "install", "chatterbot", "NUMBER", "oauthlib", "NUMBER", "request", "NUMBER", "And", "now", "NUMBER", "python", "NUMBER", "m", "chatterbot", "version", "Output", "NUMBER", "NUMBER", "_Huh", "NUMBER", "_", "Well", "NUMBER", "Let", "s", "test", "if", "it", "works", "NUMBER", "python", "NUMBER", "chatbot", "NUMBER", "py", "Output", "NUMBER", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "application", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Resource", "tokenizers", "punkt", "PY", "NUMBER", "english", "NUMBER", "pickle", "not", "find", "NUMBER", "Please", "use", "the", "NLTK", "Downloader", "to", "obtain", "the", "resource", "nltk", "NUMBER", "download", "Searched", "in", "home", "don", "t", "want", "to", "tell", "my", "username", "nltk_data", "usr", "share", "nltk_data", "usr", "local", "share", "nltk_data", "usr", "lib", "nltk_data", "usr", "local", "lib", "nltk_data", "Traceback", "most", "recent", "call", "last", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "decorators", "NUMBER", "py", "line", "NUMBER", "in", "decorated", "return", "func", "_args", "_kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "tokenizers", "NUMBER", "py", "line", "NUMBER", "in", "tokenize", "return", "nltk", "NUMBER", "tokenize", "NUMBER", "sent_tokenize", "text", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "tokenize", "init", "NUMBER", "py", "line", "NUMBER", "in", "sent_tokenize", "tokenizer", "load", "tokenizers", "punkt", "NUMBER", "NUMBER", "pickle", "NUMBER", "format", "language", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "load", "opened_resource", "_open", "resource_url", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "_open", "return", "find", "path_", "path", "NUMBER", "open", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "nltk", "data", "NUMBER", "py", "line", "NUMBER", "in", "find", "raise", "LookupError", "resource_not_found", "LookupError", "Resource", "tokenizers", "punkt", "PY", "NUMBER", "english", "NUMBER", "pickle", "not", "find", "NUMBER", "Please", "use", "the", "NLTK", "Downloader", "to", "obtain", "the", "resource", "nltk", "NUMBER", "download", "Searched", "in", "home", "don", "t", "want", "to", "tell", "my", "username", "nltk_data", "usr", "share", "nltk_data", "usr", "local", "share", "nltk_data", "usr", "lib", "nltk_data", "usr", "local", "lib", "nltk_data", "During", "handle", "of", "the", "above", "exception", "another", "exception", "occur", "Traceback", "most", "recent", "call", "last", "File", "chatbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "database", "NUMBER", "database", "NUMBER", "db", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "init", "self", "NUMBER", "add_logic_adapter", "adapter", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "add_logic_adapter", "adapter", "self", "NUMBER", "initialize_class", "adapter", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "initialize_class", "return", "Class", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "logic", "time_adapter", "NUMBER", "py", "line", "NUMBER", "in", "init", "self", "NUMBER", "classifier", "NaiveBayesClassifier", "training_data", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "init", "self", "NUMBER", "train_features", "self", "NUMBER", "extract_features", "d", "c", "for", "d", "c", "in", "self", "NUMBER", "train_set", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "self", "NUMBER", "train_features", "self", "NUMBER", "extract_features", "d", "c", "for", "d", "c", "in", "self", "NUMBER", "train_set", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "extract_features", "return", "self", "NUMBER", "feature_extractor", "text", "self", "NUMBER", "train_set", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "basic_extractor", "word_features", "_get_words_from_dataset", "train_set", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "_get_words_from_dataset", "return", "set", "all_words", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "all_words", "chain", "NUMBER", "from_iterable", "tokenize", "words", "for", "words", "_", "in", "dataset", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "classifiers", "NUMBER", "py", "line", "NUMBER", "in", "tokenize", "return", "word_tokenize", "words", "include_punc", "False", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "tokenizers", "NUMBER", "py", "line", "NUMBER", "in", "word_tokenize", "for", "sentence", "in", "sent_tokenize", "text", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "base", "NUMBER", "py", "line", "NUMBER", "in", "itokenize", "return", "t", "for", "t", "in", "self", "NUMBER", "tokenize", "text", "_args", "_kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "textblob", "decorators", "NUMBER", "py", "line", "NUMBER", "in", "decorated", "raise", "MissingCorpusError", "textblob", "NUMBER", "exception", "NUMBER", "MissingCorpusError", "Looks", "like", "you", "be", "miss", "some", "required", "data", "for", "this", "feature", "NUMBER", "To", "download", "the", "necessary", "data", "simply", "run", "python", "m", "textblob", "NUMBER", "download_corpora", "or", "use", "the", "NLTK", "downloader", "to", "download", "the", "miss", "data", "LINK", "If", "this", "doesn", "t", "fix", "the", "problem", "file", "an", "issue", "at", "LINK", "Had", "to", "use", "quote", "instead", "of", "code", "again", "NUMBER", "It", "dosen", "t", "NUMBER", "Okay", "NUMBER", "python", "NUMBER", "m", "textblob", "NUMBER", "download_corpora", "Output", "NUMBER", "nltk_data", "Downloading", "package", "brown", "to", "home", "don", "t", "want", "to", "tell", "my", "username", "nltk_data", "NUMBER", "nltk_data", "Unzipping", "corpora", "brown", "NUMBER", "zip", "NUMBER", "nltk_data", "Downloading", "package", "punkt", "to", "home", "don", "t", "want", "to", "tell", "my", "username", "nltk_data", "NUMBER", "nltk_data", "Unzipping", "tokenizers", "punkt", "NUMBER", "zip", "NUMBER", "nltk_data", "Downloading", "package", "wordnet", "to", "home", "don", "t", "want", "to", "tell", "my", "username", "nltk_data", "NUMBER", "nltk_data", "Unzipping", "corpora", "wordnet", "NUMBER", "zip", "NUMBER", "nltk_data", "Downloading", "package", "averaged_perceptron_tagger", "to", "nltk_data", "home", "don", "t", "want", "to", "tell", "my", "username", "nltk_data", "NUMBER", "nltk_data", "Unzipping", "taggers", "averaged_perceptron_tagger", "NUMBER", "zip", "NUMBER", "nltk_data", "Downloading", "package", "conll", "NUMBER", "to", "nltk_data", "home", "don", "t", "want", "to", "tell", "my", "username", "nltk_data", "NUMBER", "nltk_data", "Unzipping", "corpora", "conll", "NUMBER", "zip", "NUMBER", "nltk_data", "Downloading", "package", "movie_reviews", "to", "nltk_data", "home", "don", "t", "want", "to", "tell", "my", "username", "nltk_data", "NUMBER", "nltk_data", "Unzipping", "corpora", "movie_reviews", "NUMBER", "zip", "NUMBER", "Finished", "NUMBER", "python", "NUMBER", "chatbot", "NUMBER", "py", "Output", "NUMBER", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "application", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "Type", "something", "to", "begin", "NUMBER", "Yay", "NUMBER", "It", "works", "NUMBER", "Apperently", "textblob", "NUMBER", "download_orpora", "be", "needed", "for", "it", "to", "work", "NUMBER", "Why", "don", "t", "you", "make", "a", "NUMBER", "sh", "which", "automates", "the", "install", "and", "checks", "if", "everything", "what", "be", "needed", "be", "install", "python", "sudo", "NUMBER", "manage", "NUMBER", "py", "runserver", "NUMBER", "NUMBER", "Performing", "system", "checks", "NUMBER", "System", "check", "identified", "no", "issue", "NUMBER", "silenced", "NUMBER", "November", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Django", "version", "NUMBER", "use", "settings", "example_app", "NUMBER", "settings", "Starting", "development", "server", "at", "LINK", "Quit", "the", "server", "with", "CONTROL", "C", "NUMBER", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GET", "HTTP", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GET", "static", "js", "js", "NUMBER", "cookie", "NUMBER", "js", "HTTP", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GET", "static", "js", "bootstrap", "NUMBER", "js", "HTTP", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GET", "static", "js", "jquery", "NUMBER", "js", "HTTP", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GET", "static", "css", "bootstrap", "NUMBER", "css", "HTTP", "NUMBER", "NUMBER", "NUMBER", "Internal", "Server", "Error", "api", "chatterbot", "Traceback", "most", "recent", "call", "last", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "exception", "NUMBER", "py", "line", "NUMBER", "in", "inner", "response", "get_response", "request", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_legacy_get_response", "response", "self", "NUMBER", "_get_response", "request", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "view", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "dispatch", "return", "handler", "request", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "line", "NUMBER", "in", "post", "data", "json", "NUMBER", "loads", "request", "NUMBER", "read", "NUMBER", "decode", "utf", "NUMBER", "File", "usr", "lib", "python", "NUMBER", "json", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "loads", "return", "_default_decoder", "NUMBER", "decode", "s", "File", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "decode", "obj", "end", "self", "NUMBER", "raw_decode", "s", "idx", "_w", "s", "NUMBER", "NUMBER", "end", "File", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "raw_decode", "raise", "ValueError", "No", "JSON", "object", "could", "be", "decoded", "ValueError", "No", "JSON", "object", "could", "be", "decoded", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "POST", "api", "chatterbot", "HTTP", "NUMBER", "NUMBER", "NUMBER", "I", "be", "having", "a", "similar", "issue", "where", "the", "example", "will", "work", "fine", "until", "you", "refresh", "the", "page", "or", "let", "it", "idle", "long", "enough", "then", "it", "will", "throw", "this", "error", "NUMBER", "python", "Internal", "Server", "Error", "api", "chatterbot", "Traceback", "most", "recent", "call", "last", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "view", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "dispatch", "return", "handler", "request", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "line", "NUMBER", "in", "post", "response_data", "self", "NUMBER", "chatterbot", "NUMBER", "get_response", "input_data", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "statement", "response", "confidence", "self", "NUMBER", "generate_response", "input_statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "generate_response", "confidence", "response", "self", "NUMBER", "logic", "NUMBER", "process", "input_statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "logic", "multi_adapter", "NUMBER", "py", "line", "NUMBER", "in", "process", "confidence", "output", "adapter", "NUMBER", "process", "statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "logic", "base_match", "NUMBER", "py", "line", "NUMBER", "in", "process", "confidence", "closest_match", "self", "NUMBER", "get", "input_statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "logic", "base_match", "NUMBER", "py", "line", "NUMBER", "in", "get", "statement_list", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "get_response_statements", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "storage", "storage_adapter", "NUMBER", "py", "line", "NUMBER", "in", "get_response_statements", "statement_list", "self", "NUMBER", "filter", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "storage", "django_storage", "NUMBER", "py", "line", "NUMBER", "in", "filter", "results", "NUMBER", "append", "self", "NUMBER", "model_to_object", "statement_object", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "storage", "django_storage", "NUMBER", "py", "line", "NUMBER", "in", "model_to_object", "extra_data", "json", "NUMBER", "loads", "statement_model", "NUMBER", "extra_data", "encoding", "utf", "NUMBER", "File", "usr", "lib", "python", "NUMBER", "json", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "loads", "return", "cls", "encoding", "encoding", "kw", "NUMBER", "decode", "s", "File", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "decode", "obj", "end", "self", "NUMBER", "raw_decode", "s", "idx", "_w", "s", "NUMBER", "NUMBER", "end", "File", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "raw_decode", "raise", "ValueError", "No", "JSON", "object", "could", "be", "decoded", "ValueError", "No", "JSON", "object", "could", "be", "decoded", "If", "I", "flush", "the", "database", "and", "retrain", "it", "it", "works", "again", "NUMBER", "However", "it", "will", "then", "just", "break", "again", "if", "idle", "or", "refreshed", "NUMBER", "I", "have", "ChatterBot", "NUMBER", "install", "run", "the", "newest", "example", "and", "Django", "NUMBER", "Hopefully", "this", "helps", "you", "NUMBER", "Is", "there", "news", "on", "a", "potential", "solution", "to", "this", "How", "to", "convert", "this", "kind", "of", "ChatterBot", "in", "technical", "chat", "bot", "which", "can", "query", "based", "on", "patterns", "and", "question", "NUMBER", "Like", "if", "i", "ask", "how", "be", "this", "flight", "id", "NUMBER", "doing", "NUMBER", "It", "should", "bring", "me", "all", "info", "which", "i", "have", "defined", "already", "NUMBER", "And", "many", "more", "question", "like", "generating", "charts", "in", "real", "time", "and", "do", "a", "lot", "more", "in", "terms", "of", "the", "real", "time", "elastic", "search", "MySQL", "query", "NUMBER", "Also", "how", "to", "integrate", "pre", "build", "models", "in", "tensorflow", "LINK", "This", "can", "improve", "the", "power", "of", "this", "chat", "bot", "multifold", "NUMBER", "Thanks", "Thank", "gunthercox", "NUMBER", "I", "asked", "the", "chart", "question", "because", "i", "would", "like", "to", "integrate", "with", "some", "short", "of", "kibana", "interface", "where", "data", "be", "come", "from", "different", "channels", "NUMBER", "But", "i", "get", "it", "now", "NUMBER", "NUMBER", "One", "more", "question", "i", "have", "what", "kind", "of", "data", "and", "ML", "algorithm", "LSTM", "seq", "NUMBER", "seq", "you", "have", "use", "to", "trained", "this", "bot", "initially", "NUMBER", "LSTM", "be", "considered", "most", "accurate", "in", "ubuntu", "corpus", "data", "set", "My", "last", "question", "was", "on", "ubuntu", "corpus", "which", "be", "basically", "IT", "helpdesk", "data", "and", "somehow", "i", "want", "to", "train", "for", "my", "bot", "with", "that", "data", "set", "and", "some", "other", "email", "data", "too", "wich", "have", "be", "send", "to", "customers", "in", "last", "NUMBER", "years", "NUMBER", "Problem", "be", "that", "data", "be", "too", "much", "and", "it", "be", "going", "to", "be", "several", "weeks", "before", "i", "see", "any", "result", "NUMBER", "Not", "sure", "with", "chatterbot", "code", "how", "can", "i", "utilize", "GPU", "power", "NUMBER", "I", "have", "use", "tensorflow", "and", "it", "works", "good", "quick", "with", "my", "Nvidia", "Titan", "X", "for", "same", "IT", "data", "set", "NUMBER", "Thanks", "for", "all", "your", "help", "and", "time", "NUMBER", "Created", "the", "italian", "readme", "and", "first", "drafts", "of", "the", "italian", "math", "and", "swear", "words", "dictionaries", "NUMBER", "I", "opened", "and", "close", "this", "pull", "request", "by", "mistake", "thinking", "I", "could", "merge", "it", "by", "myself", "NUMBER", "Hi", "guys", "I", "was", "wondering", "if", "anyone", "runs", "into", "the", "need", "to", "serialize", "a", "Chatbot", "instance", "like", "Training", "the", "bot", "in", "background", "with", "Celery", "or", "Python", "rq", "then", "NUMBER", "store", "the", "dump", "in", "Redis", "so", "the", "main", "app", "can", "consume", "it", "when", "ready", "NUMBER", "store", "the", "dump", "in", "Redis", "so", "on", "restart", "the", "bot", "won", "t", "need", "to", "re", "train", "again", "gunthercox", "vkosuri", "any", "idea", "on", "that", "kind", "of", "stuffs", "Pickling", "and", "storing", "be", "my", "only", "idea", "for", "now", "if", "you", "guys", "have", "another", "idea", "it", "ll", "be", "very", "welcomed", "alekaizer", "I", "ll", "prefer", "celery", "and", "Redis", "option", "NUMBER", "By", "curiosity", "could", "you", "please", "explain", "your", "usecase", "of", "this", "feature", "vkosuri", "I", "just", "moved", "from", "Celery", "to", "Django", "rq", "plus", "Redis", "as", "the", "processes", "be", "not", "that", "heavy", "I", "just", "need", "the", "async", "execution", "For", "the", "use", "case", "here", "it", "s", "NUMBER", "When", "an", "user", "create", "a", "bot", "and", "want", "to", "test", "it", "the", "first", "interaction", "trigger", "the", "bot", "s", "training", "which", "can", "take", "some", "times", "so", "the", "user", "be", "left", "on", "wait", "NUMBER", "Now", "let", "s", "say", "the", "app", "crash", "or", "I", "reboot", "the", "app", "and", "some", "bots", "be", "already", "run", "so", "next", "time", "an", "user", "make", "interaction", "the", "bot", "will", "need", "to", "retrain", "again", "leaving", "user", "on", "wait", "because", "during", "the", "reboot", "the", "queue", "have", "be", "cleared", "Solutions", "NUMBER", "For", "the", "first", "use", "case", "I", "can", "train", "the", "bot", "during", "the", "creation", "process", "that", "s", "what", "I", "be", "actually", "write", "NUMBER", "For", "this", "one", "that", "s", "where", "I", "need", "to", "store", "the", "bot", "actual", "training", "so", "on", "reboot", "I", "can", "just", "loads", "the", "dumps", "and", "put", "them", "back", "to", "the", "bots", "queue", "like", "nothing", "happened", "Hope", "this", "time", "I", "was", "clear", "hi", "gunthercox", "I", "m", "use", "MongoDb", "and", "I", "ve", "made", "a", "custom", "storage", "adapter", "to", "add", "bot_id", "in", "statements", "so", "each", "statements", "knows", "which", "bot", "it", "belongs", "to", "NUMBER", "and", "I", "think", "my", "problem", "may", "come", "from", "the", "fact", "that", "every", "time", "I", "launch", "the", "bot", "training", "NUMBER", "And", "if", "I", "understand", "what", "you", "just", "said", "I", "only", "need", "to", "train", "the", "bot", "once", "as", "long", "as", "the", "DB", "be", "populated", "I", "don", "t", "need", "to", "retrain", "the", "same", "data", "I", "should", "train", "only", "new", "entries", "right", "Great", "I", "ll", "add", "a", "trained", "field", "on", "the", "model", "then", "to", "the", "object", "to", "avoid", "re", "training", "Thank", "you", "gunthercox", "hi", "gunther", "I", "wanted", "to", "know", "if", "there", "be", "a", "way", "to", "set", "a", "default", "response", "like", "i", "don", "t", "understand", "what", "you", "mean", "if", "no", "matching", "input", "be", "find", "Dattatreya", "i", "be", "trying", "to", "set", "a", "threshold", "value", "in", "the", "closest", "match", "adapter", "for", "levenshtein", "distance", "be", "this", "correct", "hi", "datta", "NUMBER", "You", "use", "the", "process", "method", "of", "your", "logic", "adapter", "to", "get", "the", "confidence", "of", "the", "response", "then", "set", "the", "threshold", "on", "the", "confidence", "NUMBER", "input", "do", "linux", "rock", "bot", "ChatBot", "tux", "statement", "bot", "NUMBER", "input", "NUMBER", "process_input", "input", "confidence", "response", "bot", "NUMBER", "logic", "NUMBER", "process", "statement", "if", "confidence", "THRESHOLD", "response", "bot", "NUMBER", "output", "NUMBER", "process_response", "response", "else", "response", "I", "don", "t", "understand", "what", "you", "mean", "Maybe", "gunthercox", "has", "a", "better", "way", "of", "doing", "it", "i", "be", "get", "this", "error", "when", "i", "type", "the", "above", "code", "in", "python", "terminal", "In", "NUMBER", "statement", "bot", "NUMBER", "logic", "NUMBER", "input", "NUMBER", "process_input", "input", "NUMBER", "AttributeError", "Traceback", "most", "recent", "call", "TAG", "in", "TAG", "NUMBER", "statement", "bot", "NUMBER", "logic", "NUMBER", "input", "NUMBER", "process_input", "input", "NUMBER", "AttributeError", "MultiLogicAdapter", "object", "has", "no", "attribute", "input", "thank", "you", "gunther", "I", "be", "get", "error", "UnicodeDecodeError", "utf", "NUMBER", "codec", "can", "t", "decode", "byte", "NUMBER", "x", "NUMBER", "in", "position", "NUMBER", "invalid", "start", "byte", "when", "i", "be", "add", "my", "own", "training", "data", "in", "the", "English", "folder", "my", "file", "name", "be", "ending", "with", "NUMBER", "corpus", "NUMBER", "json", "and", "i", "have", "write", "this", "file", "properly", "even", "when", "i", "be", "remove", "this", "file", "i", "be", "still", "get", "this", "error", "be", "it", "because", "of", "json", "adapter", "storage", "my", "strings", "be", "bit", "long", "in", "the", "file", "No", "problem", "gunther", "actually", "mistake", "was", "from", "my", "side", "I", "use", "regex", "to", "remove", "the", "ASCII", "characters", "present", "in", "my", "JSON", "file", "Very", "impressive", "project", "NUMBER", "How", "can", "i", "use", "ubuntu", "Dialogue", "Corpus", "v", "NUMBER", "and", "v", "NUMBER", "LINK", "jpineau", "datasets", "ubuntu", "corpus", "NUMBER", "Dual", "Encoder", "LSTM", "network", "will", "be", "best", "for", "this", "data", "LINK", "learning", "for", "chatbots", "part", "NUMBER", "introduction", "Then", "I", "have", "to", "use", "node", "red", "LINK", "to", "extend", "and", "make", "this", "for", "technical", "answer", "machine", "NUMBER", "Thanks", "for", "great", "project", "NUMBER", "Closes", "LINK", "Thanks", "I", "be", "work", "on", "documentation", "part", "also", "i", "will", "push", "some", "more", "comits", "NUMBER", "by", "today", "NUMBER", "On", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "PM", "Gunther", "Cox", "notifications", "github", "NUMBER", "com", "write", "vkosuri", "LINK", "Looks", "good", "be", "this", "ready", "to", "be", "merge", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "or", "mute", "the", "thread", "LINK", "auth", "ANCAAV", "NUMBER", "HF", "k", "NUMBER", "IE", "NUMBER", "x", "NUMBER", "xmWKfjLYZ", "NUMBER", "ESaks", "NUMBER", "q", "NUMBER", "IA", "NUMBER", "gaJpZM", "NUMBER", "KpznB", "NUMBER", "gunthercox", "i", "haven", "t", "add", "test", "for", "this", "PR", "i", "will", "add", "soon", "do", "you", "have", "any", "comments", "suggestions", "on", "this", "PR", "Yes", "LINK", "us", "restapi", "directline", "gunthercox", "any", "comments", "suggestions", "x", "Input", "adapter", "x", "Output", "adapter", "x", "Tests", "x", "Documentation", "x", "Example", "Program", "x", "Logging", "gunthercox", "any", "comments", "suggestions", "You", "eill", "get", "it", "from", "here", "Request", "URL", "LINK", "Response", "Body", "conversationId", "ENwpIpwOny", "NUMBER", "token", "xtFDtPemROU", "NUMBER", "dAA", "NUMBER", "RQBOAHcAcABJAHAAdwBPAG", "NUMBER", "AeQA", "NUMBER", "AA", "NUMBER", "IEz", "NUMBER", "QI", "NUMBER", "gE", "NUMBER", "XXui", "NUMBER", "MZv", "NUMBER", "NUMBER", "kg", "NUMBER", "KPXCgTU", "NUMBER", "mcEE_DB", "NUMBER", "mUQHKG_C", "t", "NUMBER", "c", "ISlI", "NUMBER", "UDM", "NUMBER", "Q", "expires_in", "NUMBER", "Added", "uft", "NUMBER", "code", "for", "use", "german", "umlauts", "Is", "it", "possible", "to", "train", "use", "the", "corpus", "data", "for", "a", "django", "project", "run", "Chatterbot", "I", "can", "t", "seem", "to", "find", "a", "way", "to", "alter", "the", "chatbot", "s", "settings", "to", "accept", "the", "language", "corpus", "NUMBER", "Also", "it", "looks", "like", "the", "database", "of", "request", "responses", "created", "by", "the", "example", "django", "app", "be", "just", "the", "response", "request", "phrases", "rather", "than", "storing", "occurrences", "NUMBER", "Is", "there", "a", "way", "to", "make", "that", "happen", "as", "well", "gunthercox", "I", "be", "sorry", "if", "this", "question", "has", "already", "be", "asked", "before", "I", "didn", "t", "know", "how", "to", "express", "the", "my", "search", "query", "So", "the", "question", "be", "about", "the", "storages", "I", "can", "see", "that", "we", "have", "two", "entries", "per", "Statement", "NUMBER", "with", "empty", "in_response_to", "field", "NUMBER", "with", "filled", "in_response_to", "field", "Example", "_id", "oid", "NUMBER", "c", "NUMBER", "c", "NUMBER", "c", "NUMBER", "d", "NUMBER", "db", "NUMBER", "c", "NUMBER", "text", "Welcome", "to", "Tuxville", "in_response_to", "_id", "oid", "NUMBER", "c", "NUMBER", "c", "NUMBER", "c", "NUMBER", "d", "NUMBER", "db", "NUMBER", "c", "NUMBER", "text", "Welcome", "to", "Tuxville", "in_response_to", "text", "hey", "occurrence", "NUMBER", "and", "when", "I", "check", "the", "storage", "adapters", "I", "saw", "this", "in", "the", "train", "method", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "force", "True", "so", "I", "expected", "the", "first", "object", "to", "be", "update", "but", "it", "s", "creating", "a", "new", "object", "Maybe", "I", "m", "miss", "something", "in", "the", "flow", "oh", "sorry", "gunthercox", "the", "oid", "it", "s", "just", "a", "copy", "paste", "of", "the", "same", "object", "with", "diff", "value", "of", "course", "they", "don", "t", "have", "the", "same", "oid", "in", "the", "DB", "here", "be", "a", "real", "state", "of", "the", "DB", "_id", "oid", "NUMBER", "fbc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "d", "NUMBER", "f", "NUMBER", "f", "NUMBER", "af", "in_response_to", "occurrence", "NUMBER", "text", "Can", "I", "ask", "you", "a", "question", "bot_id", "af", "NUMBER", "ecfc", "NUMBER", "NUMBER", "ab", "NUMBER", "a", "NUMBER", "NUMBER", "a", "NUMBER", "c", "NUMBER", "d", "NUMBER", "f", "NUMBER", "text", "Go", "ahead", "and", "ask", "NUMBER", "_id", "oid", "NUMBER", "fbc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "d", "NUMBER", "f", "NUMBER", "f", "NUMBER", "ae", "in_response_to", "bot_id", "af", "NUMBER", "ecfc", "NUMBER", "NUMBER", "ab", "NUMBER", "a", "NUMBER", "NUMBER", "a", "NUMBER", "c", "NUMBER", "d", "NUMBER", "f", "NUMBER", "text", "Can", "I", "ask", "you", "a", "question", "the", "question", "be", "created", "as", "response", "and", "have", "its", "in_response_to", "array", "empty", "then", "when", "it", "s", "update", "it", "s", "not", "delete", "cause", "to", "have", "multiple", "entries", "with", "in_response_to", "be", "empty", "arrays", "Hope", "this", "time", "I", "was", "clear", "Yes", "that", "s", "the", "functionality", "and", "my", "problem", "be", "Can", "I", "ask", "you", "a", "question", "be", "in", "response", "to", "nothing", "NUMBER", "In", "that", "case", "be", "it", "relevant", "to", "store", "it", "as", "there", "s", "no", "trigger", "for", "that", "statement", "I", "think", "that", "comes", "from", "the", "conversation", "way", "of", "training", "as", "they", "have", "backward", "reference", "NUMBER", "yes", "perfectly", "clear", "gunthercox", "Just", "wanted", "to", "know", "more", "about", "this", "Could", "you", "give", "an", "example", "when", "this", "will", "occur", "I", "just", "upgrade", "the", "module", "to", "have", "the", "fix", "on", "nltk_loop", "and", "there", "s", "a", "miss", "corpus", "after", "the", "upgrade", "Yes", "I", "ve", "seen", "that", "but", "I", "thought", "the", "__pt", "BR_", "was", "made", "to", "make", "diff", "between", "pt", "PT", "and", "pt", "BR", "And", "any", "idea", "on", "NUMBER", "haven", "t", "heard", "from", "you", "on", "that", "BR", "be", "Brazilian", "Portuguese", "while", "PT", "be", "the", "original", "one", "from", "Portugal", "but", "I", "m", "not", "an", "expert", "of", "PT", "so", "I", "don", "t", "know", "the", "differences", "but", "there", "be", "some", "surely", "NUMBER", "ok", "about", "NUMBER", "gunthercox", "any", "plan", "add", "sessions", "management", "to", "ChatterBot", "gunthercox", "Thanks", "any", "guidance", "to", "implement", "this", "feature", "Why", "not", "add", "session_id", "property", "to", "the", "Statement", "object", "LINK", "L", "NUMBER", "Let", "the", "developer", "manage", "the", "session", "and", "session_ids", "NUMBER", "But", "internally", "chatterbot", "should", "filter", "all", "conversations", "by", "session_id", "if", "its", "provide", "NUMBER", "What", "do", "you", "think", "gunthercox", "Something", "might", "useful", "LINK", "Any", "comments", "suggestions", "Robotframework", "be", "test", "framework", "It", "caches", "different", "test", "objects", "for", "example", "telnet", "ssh", "request", "etc", "NUMBER", "gunthercox", "any", "comments", "Hey", "Everyone", "I", "be", "work", "on", "NUMBER", "version", "and", "have", "add", "previous", "context", "check", "variable", "to", "the", "response", "selector", "I", "was", "under", "the", "impression", "it", "would", "not", "be", "shared", "across", "the", "sessions", "But", "now", "when", "we", "try", "from", "multiple", "systems", "the", "variable", "be", "be", "overwritten", "by", "the", "last", "user", "anyway", "to", "avoid", "this", "scenario", "Chatterbot", "gives", "me", "a", "pythonerror", "when", "use", "german", "umlauts", "like", "\u00e4", "\u00fc", "\u00f6", "\u00df", "because", "of", "wrong", "encoding", "Added", "german", "translating", "of", "corpus", "NUMBER", "math_word", "and", "corpus", "NUMBER", "greetings", "LINK", "Hi", "gunthercox", "use", "ClosestMeaning", "and", "ClosestMatch", "adapters", "output", "some", "weird", "ish", "sometimes", "Let", "s", "take", "this", "dataset", "pair", "what", "be", "your", "address", "R", "NUMBER", "D", "NUMBER", "AI", "Street", "TUXVILLE", "PC", "Land", "and", "chatterbot", "init", "this", "way", "bot", "ChatBot", "LC", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMatchAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMeaningAdapter", "Bot", "be", "trained", "with", "pair", "bot", "NUMBER", "train", "pair", "and", "let", "s", "input", "these", "INPUT", "print", "bot", "NUMBER", "logic", "NUMBER", "process", "bot", "NUMBER", "input", "NUMBER", "process_input", "what", "be", "your", "name", "print", "bot", "NUMBER", "logic", "NUMBER", "process", "bot", "NUMBER", "input", "NUMBER", "process_input", "what", "be", "your", "address", "print", "bot", "NUMBER", "logic", "NUMBER", "process", "bot", "NUMBER", "input", "NUMBER", "process_input", "where", "be", "you", "located", "OUTPUT", "NUMBER", "TAG", "TAG", "NUMBER", "TAG", "TAG", "be", "not", "recognized", "as", "a", "valid", "input", "type", "NUMBER", "I", "feel", "like", "this", "be", "an", "error", "on", "my", "end", "but", "I", "can", "t", "seem", "to", "resolve", "it", "NUMBER", "I", "think", "you", "have", "to", "add", "chatbot", "init", "to", "settings", "NUMBER", "py", "NUMBER", "I", "be", "use", "like", "this", "I", "be", "get", "authentication", "issue", "so", "I", "have", "commented", "CsrfViewMiddleware", "Python", "MIDDLEWARE_CLASSES", "django", "NUMBER", "contrib", "NUMBER", "sessions", "NUMBER", "middleware", "NUMBER", "SessionMiddleware", "django", "NUMBER", "middleware", "NUMBER", "common", "NUMBER", "CommonMiddleware", "django", "NUMBER", "middleware", "NUMBER", "csrf", "NUMBER", "CsrfViewMiddleware", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "middleware", "NUMBER", "AuthenticationMiddleware", "django", "NUMBER", "contrib", "NUMBER", "auth", "NUMBER", "middleware", "NUMBER", "SessionAuthenticationMiddleware", "django", "NUMBER", "contrib", "NUMBER", "message", "NUMBER", "middleware", "NUMBER", "MessageMiddleware", "django", "NUMBER", "middleware", "NUMBER", "clickjacking", "NUMBER", "XFrameOptionsMiddleware", "django", "NUMBER", "middleware", "NUMBER", "security", "NUMBER", "SecurityMiddleware", "Python", "CHATTERBOT", "name", "Test", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "Thanks", "for", "the", "response", "but", "this", "didn", "t", "seem", "to", "work", "for", "me", "NUMBER", "I", "be", "still", "get", "the", "same", "error", "message", "as", "before", "NUMBER", "maclogan", "could", "you", "paste", "you", "console", "output", "By", "the", "way", "a", "quote", "was", "miss", "Python", "CHATTERBOT", "name", "Test", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "More", "info", "available", "here", "LINK", "This", "be", "the", "full", "error", "I", "get", "after", "hitting", "the", "submit", "button", "on", "the", "online", "UI", "provide", "in", "the", "django", "app", "example", "NUMBER", "Internal", "Server", "Error", "api", "chatterbot", "Traceback", "most", "recent", "call", "last", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "exception", "NUMBER", "py", "line", "NUMBER", "in", "inner", "response", "get_response", "request", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_legacy_get_response", "response", "self", "NUMBER", "_get_response", "request", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "self", "NUMBER", "process_exception_by_middleware", "e", "request", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "core", "handlers", "base", "NUMBER", "py", "line", "NUMBER", "in", "_get_response", "response", "wrapped_callback", "request", "callback_args", "callback_kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "view", "return", "self", "NUMBER", "dispatch", "request", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "django", "views", "generic", "base", "NUMBER", "py", "line", "NUMBER", "in", "dispatch", "return", "handler", "request", "args", "kwargs", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "ext", "django_chatterbot", "views", "NUMBER", "py", "line", "NUMBER", "in", "post", "response_data", "self", "NUMBER", "chatterbot", "NUMBER", "get_response", "input_statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "input_statement", "self", "NUMBER", "input", "NUMBER", "process_input", "input_item", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "input", "variable_input_type_adapter", "NUMBER", "py", "line", "NUMBER", "in", "process_input", "input_type", "self", "NUMBER", "detect_type", "statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "input", "variable_input_type_adapter", "NUMBER", "py", "line", "NUMBER", "in", "detect_type", "input_type", "chatterbot", "NUMBER", "adapters", "NUMBER", "input", "NUMBER", "variable_input_type_adapter", "NUMBER", "VariableInputTypeAdapter", "NUMBER", "UnrecognizedInputFormatException", "The", "type", "TAG", "be", "not", "recognized", "as", "a", "valid", "input", "type", "NUMBER", "I", "have", "NUMBER", "install", "Hm", "I", "must", "be", "doing", "something", "wrong", "then", "NUMBER", "I", "be", "use", "the", "current", "example", "app", "and", "have", "just", "tried", "it", "on", "another", "python", "django", "installation", "and", "it", "didn", "t", "work", "So", "just", "to", "be", "sure", "I", "be", "not", "miss", "anything", "obvious", "to", "run", "the", "example", "app", "all", "I", "have", "to", "do", "be", "be", "sure", "my", "django", "chatterbot", "and", "example", "django", "app", "be", "up", "to", "date", "modify", "the", "setting", "NUMBER", "py", "file", "to", "add", "logic", "adapters", "to", "the", "chatterbot", "settings", "and", "run", "a", "migration", "NUMBER", "Then", "I", "just", "runserver", "like", "usual", "correct", "yes", "chatterbot", "NUMBER", "That", "seems", "to", "have", "fix", "it", "Sorry", "for", "the", "trouble", "I", "run", "an", "update", "on", "chatterbot", "NUMBER", "days", "ago", "but", "I", "just", "checked", "my", "logs", "and", "I", "guess", "it", "fail", "during", "the", "installation", "NUMBER", "Is", "there", "a", "way", "chatterbot", "can", "respond", "previous", "statements", "for", "example", "In", "the", "below", "example", "i", "be", "referencing", "jira", "xx", "NUMBER", "only", "first", "time", "NUMBER", "Statement", "jira", "what", "be", "the", "status", "of", "xx", "NUMBER", "Response", "It", "s", "in", "retest", "Statement", "jira", "can", "i", "get", "latest", "comments", "Response", "X", "Said", "It", "should", "be", "fix", "by", "next", "month", "Few", "ideas", "i", "be", "not", "sure", "will", "it", "work", "or", "not", "Maintain", "lookup", "table", "for", "statements", "if", "user", "always", "referencing", "a", "particuler", "thing", "This", "might", "be", "slow", "down", "process", "but", "it", "s", "worth", "to", "maintain", "good", "conversation", "with", "bot", "NUMBER", "Any", "thoughts", "suggestions", "gunthercox", "This", "wont", "work", "if", "multiple", "users", "be", "ask", "for", "the", "ticket", "status", "because", "last_ticket_referenced", "will", "change", "considering", "that", "there", "be", "only", "a", "single", "chatbot", "instance", "You", "will", "have", "to", "spawn", "multiple", "chatbots", "for", "each", "user", "or", "use", "mongo", "DB", "to", "store", "these", "values", "rmdort", "agreed", "with", "you", "If", "i", "use", "mongo", "DB", "how", "do", "i", "handle", "this", "situation", "could", "you", "provide", "a", "example", "scenario", "I", "usually", "have", "a", "Users", "class", "which", "syncs", "the", "data", "with", "mongo", "This", "might", "help", "NUMBER", "PS", "I", "be", "use", "websockets", "LINK", "Maybe", "there", "be", "a", "better", "way", "of", "doing", "it", "NUMBER", "Open", "to", "feedback", "I", "think", "the", "same", "question", "i", "was", "asked", "here", "LINK", "Closing", "this", "issue", "it", "be", "going", "address", "in", "NUMBER", "I", "think", "most", "of", "the", "chatbots", "be", "doing", "identifying", "their", "logic", "adapter", "use", "specific", "keywords", "For", "exmaple", "CHATTERBOT", "name", "test", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "chatterbot_jira", "NUMBER", "JiraLogicAdapter", "I", "can", "call", "logic", "adapter", "from", "chatterbot", "be", "something", "like", "below", "time", "what", "be", "current", "time", "time", "how", "many", "seconds", "in", "a", "minute", "math", "NUMBER", "NUMBER", "jira", "search", "xx", "NUMBER", "The", "workaround", "i", "be", "doing", "Python", "if", "re", "NUMBER", "search", "r", "jira", "user_input", "Agree", "NUMBER", "Why", "cant", "your", "logic", "adapter", "handle", "this", "For", "example", "In", "your", "chatterbot_jira", "NUMBER", "JiraLogicAdapter", "def", "can_process", "self", "statement", "return", "re", "NUMBER", "match", "r", "jira", "statement", "NUMBER", "text", "Will", "there", "be", "a", "way", "to", "allow", "a", "logic", "adapter", "to", "receive", "additional", "information", "beyond", "just", "the", "statement", "For", "example", "with", "a", "Django", "app", "I", "would", "like", "to", "send", "a", "custom", "logic", "adapter", "the", "user", "information", "so", "the", "bot", "will", "take", "this", "into", "account", "when", "constructing", "a", "reply", "NUMBER", "Thanks", "NUMBER", "As", "said", "gunthercox", "You", "could", "something", "like", "below", "by", "introduce", "a", "new", "param", "CHATTERBOT_ARGS", "dict", "object", "Django", "CHATTERBOT_ARGS", "JIRA", "server", "LINK", "user", "None", "pass", "None", "You", "can", "import", "these", "setting", "in", "your", "logic", "adapter", "More", "information", "here", "LINK", "use", "settings", "in", "python", "code", "Python", "Import", "CHATTERBOT_ARGS", "from", "django", "NUMBER", "conf", "settings", "from", "django", "NUMBER", "conf", "import", "settings", "class", "JiraLogicAdapter", "LogicAdapter", "A", "logic", "adapter", "that", "returns", "information", "regard", "the", "JIRA", "and", "be", "returned", "but", "additional", "features", "be", "planned", "in", "the", "future", "NUMBER", "def", "__init__", "self", "kwargs", "super", "JiraLogicAdapter", "self", "NUMBER", "__init__", "kwargs", "self", "NUMBER", "tagger", "POSTagger", "jira_params", "settings", "NUMBER", "CHATTERBOT_ARGS", "JIRA", "print", "jira_params", "self", "NUMBER", "jira", "JIRA", "server", "jira_params", "server", "Do", "you", "plan", "on", "expanding", "chatterbot", "to", "any", "other", "languages", "like", "JavaScript", "It", "seems", "like", "it", "wouldn", "t", "be", "that", "difficult", "since", "python", "and", "JavaScript", "share", "a", "somewhat", "similar", "syntax", "NUMBER", "Would", "be", "nice", "to", "see", "this", "type", "of", "bot", "on", "node", "NUMBER", "js", "most", "of", "the", "JS", "bots", "I", "ve", "seen", "so", "far", "aren", "t", "intelligent", "bots", "NUMBER", "Whenever", "I", "try", "to", "use", "ClosestMeaningAdapter", "it", "goes", "into", "download", "loop", "like", "this", "nltk_data", "C", "Users", "nixes", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "punkt", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "stopwords", "to", "nltk_data", "C", "Users", "nixes", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "stopwords", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "wordnet", "to", "nltk_data", "C", "Users", "nixes", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "wordnet", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "punkt", "to", "nltk_data", "C", "Users", "nixes", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "punkt", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "stopwords", "to", "nltk_data", "C", "Users", "nixes", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "stopwords", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "wordnet", "to", "nltk_data", "C", "Users", "nixes", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "wordnet", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "punkt", "to", "nltk_data", "C", "Users", "nixes", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "punkt", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "stopwords", "to", "nltk_data", "C", "Users", "nixes", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "stopwords", "be", "already", "up", "to", "date", "nltk_data", "Downloading", "package", "wordnet", "to", "nltk_data", "C", "Users", "nixes", "AppData", "Roaming", "nltk_data", "NUMBER", "nltk_data", "Package", "wordnet", "be", "already", "up", "to", "date", "However", "nltk", "be", "downloaded", "NUMBER", "Is", "it", "me", "or", "be", "there", "a", "bug", "Thanks", "NUMBER", "Happens", "all", "the", "time", "here", "I", "believe", "you", "were", "seeing", "this", "looping", "message", "due", "to", "LINK", "L", "NUMBER", "Usually", "we", "don", "t", "have", "privileges", "default", "nltk", "download", "directories", "obviously", "We", "will", "get", "LookupError", "Exception", "And", "also", "the", "expected", "default", "directories", "be", "home", "TAG", "AppData", "Roaming", "nltk_data", "on", "Windows", "if", "sys", "NUMBER", "platform", "NUMBER", "artswith", "win", "Common", "locations", "on", "Windows", "path", "str", "r", "C", "nltk_data", "str", "r", "D", "nltk_data", "str", "r", "E", "nltk_data", "os", "NUMBER", "path", "NUMBER", "join", "sys", "NUMBER", "prefix", "str", "nltk_data", "os", "NUMBER", "path", "NUMBER", "join", "sys", "NUMBER", "prefix", "str", "lib", "str", "nltk_data", "os", "NUMBER", "path", "NUMBER", "join", "os", "NUMBER", "environ", "NUMBER", "get", "str", "APPDATA", "str", "C", "str", "nltk_data", "else", "Common", "locations", "on", "UNIX", "OS", "X", "path", "str", "usr", "share", "nltk_data", "str", "usr", "local", "share", "nltk_data", "str", "usr", "lib", "nltk_data", "str", "usr", "local", "lib", "nltk_data", "Hi", "so", "I", "decided", "to", "separate", "my", "AI", "s", "command", "logic", "from", "chatterbot", "s", "adapters", "NUMBER", "At", "least", "this", "way", "I", "can", "better", "contribute", "to", "make", "chatterbot", "a", "better", "chatterbot", "and", "not", "an", "assistant", "while", "also", "having", "full", "control", "over", "my", "command", "logic", "where", "just", "regular", "expressions", "work", "better", "than", "full", "blown", "matching", "levenshtein", "distance", "dictionary", "etc", "logic", "of", "chatterbot", "anyway", "NUMBER", "I", "ll", "start", "make", "russian", "corpus", "for", "chatterbot", "NUMBER", "Here", "s", "math_words", "NUMBER", "And", "how", "should", "I", "approach", "add", "new", "stuff", "to", "git", "myself", "I", "m", "more", "use", "to", "svn", "myself", "which", "be", "much", "simpler", "in", "this", "case", "NUMBER", "Should", "I", "fork", "the", "whole", "project", "and", "somehow", "make", "pull", "request", "or", "how", "do", "it", "work", "I", "know", "it", "s", "probably", "write", "a", "million", "times", "but", "maybe", "there", "be", "project", "specific", "things", "NUMBER", "Anyway", "here", "s", "corpus", "and", "I", "ll", "go", "read", "more", "about", "how", "to", "work", "with", "git", "D", "json", "numbers", "\u043e\u0434\u0438\u043d", "NUMBER", "\u0434\u0432\u0430", "NUMBER", "\u0442\u0440\u0438", "NUMBER", "\u0447\u0435\u0442\u044b\u0440\u0435", "NUMBER", "\u043f\u044f\u0442\u044c", "NUMBER", "\u0448\u0435\u0441\u0442\u044c", "NUMBER", "\u0441\u0435\u043c\u044c", "NUMBER", "\u0432\u043e\u0441\u0435\u043c\u044c", "NUMBER", "\u0434\u0435\u0432\u044f\u0442\u044c", "NUMBER", "\u0434\u0435\u0441\u044f\u0442\u044c", "NUMBER", "\u043e\u0434\u0438\u043d\u0430\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u0434\u0432\u0435\u043d\u0430\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u0442\u0440\u0438\u043d\u0430\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u0447\u0435\u0442\u044b\u0440\u043d\u0430\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u043f\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u0448\u0435\u0441\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u0441\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u0432\u043e\u0441\u0435\u043c\u043d\u0430\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u0434\u0435\u0432\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u0434\u0432\u0430\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u0442\u0440\u0438\u0434\u0446\u0430\u0442\u044c", "NUMBER", "\u0441\u043e\u0440\u043e\u043a", "NUMBER", "\u043f\u044f\u0442\u044c\u0434\u0435\u0441\u044f\u0442", "NUMBER", "\u0448\u0435\u0441\u0442\u044c\u0434\u0435\u0441\u044f\u0442", "NUMBER", "\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442", "NUMBER", "\u0432\u043e\u0441\u0435\u043c\u044c\u0434\u0435\u0441\u044f\u0442", "NUMBER", "\u0434\u0435\u0432\u044f\u043d\u043e\u0441\u0442\u043e", "NUMBER", "words", "\u043f\u043b\u044e\u0441", "\u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c", "\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0435", "\u043d\u0430", "\u0434\u0435\u043b\u0438\u0442\u044c", "\u043d\u0430", "\u043c\u0438\u043d\u0443\u0441", "\u0432\u044b\u0447\u0435\u0441\u0442\u044c", "\u043e\u0442\u043d\u044f\u0442\u044c", "\u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c", "\u0443\u043c\u043d\u043e\u0436\u0435\u043d\u043d\u043e\u0435", "\u043d\u0430", "\u0443\u043c\u043d\u043e\u0436\u0438\u0442\u044c", "\u043d\u0430", "\u043a\u0432\u0430\u0434\u0440\u0430\u0442", "NUMBER", "\u0432", "\u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0435", "NUMBER", "\u0441\u0442\u0435\u043f\u0435\u043d\u044c", "scales", "\u0441\u0442\u043e", "NUMBER", "\u0442\u044b\u0441\u044f\u0447", "NUMBER", "\u043c\u0438\u043b\u043b\u0438\u043e\u043d", "NUMBER", "\u043c\u0438\u043b\u043b\u0438\u0430\u0440\u0434", "NUMBER", "\u0442\u0440\u0438\u043b\u043b\u0438\u043e\u043d", "NUMBER", "THanks", "Yeah", "I", "did", "that", "NUMBER", "Will", "try", "to", "make", "a", "basic", "russian", "corpus", "asap", "NUMBER", "Aand", "one", "more", "question", "though", "be", "there", "a", "central", "place", "for", "switching", "language", "in", "chatter", "bot", "or", "will", "it", "just", "define", "language", "automatically", "somehow", "Thanks", "that", "s", "what", "I", "wanted", "to", "know", "Marathi", "math", "words", "have", "be", "add", "NUMBER", "armsmani", "can", "you", "specify", "which", "part", "of", "the", "code", "raise", "this", "error", "Hi", "Has", "anyone", "come", "up", "with", "a", "storage", "adapter", "for", "couchdb", "Hi", "Gokul", "NUMBER", "CouchDB", "looks", "interesting", "I", "would", "like", "to", "test", "several", "bots", "instances", "feeding", "up", "a", "local", "instance", "and", "use", "master", "to", "master", "replication", "NUMBER", "vkosuri", "I", "see", "CouchDB", "be", "very", "similar", "as", "MongoDB", "as", "Key", "Document", "I", "really", "don", "t", "know", "how", "much", "users", "will", "support", "or", "need", "it", "NUMBER", "I", "ll", "wait", "to", "go", "further", "in", "this", "NUMBER", "This", "be", "just", "a", "proposal", "NUMBER", "Scenario", "Most", "of", "my", "clients", "want", "a", "training", "corpora", "but", "they", "dont", "want", "bots", "to", "auto", "learn", "NUMBER", "So", "when", "i", "be", "starting", "up", "the", "bot", "bot", "ChatBot", "name", "read_only", "True", "bot", "NUMBER", "train", "english", "Add", "corpus", "even", "if", "read_only", "be", "True", "What", "do", "you", "think", "When", "user", "provides", "no", "training", "data", "chatterbot", "be", "currently", "responding", "with", "the", "input", "statement", "NUMBER", "Logic", "adapter", "output", "be", "completely", "skipped", "I", "guess", "its", "because", "of", "no", "knowledge", "adapter", "NUMBER", "Can", "we", "remove", "that", "and", "make", "it", "optional", "to", "the", "user", "Add", "required", "system", "logic", "adapter", "self", "NUMBER", "add_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "NoKnowledgeAdapter", "ok", "noted", "NUMBER", "The", "bot", "i", "was", "build", "didn", "t", "need", "any", "training", "data", "NUMBER", "I", "was", "use", "logic", "adapters", "for", "everything", "NUMBER", "I", "have", "adapters", "for", "greetings", "q", "a", "etc", "NUMBER", "I", "will", "probably", "just", "add", "one", "training", "data", "to", "prevent", "this", "error", "NUMBER", "Currently", "if", "the", "bot", "be", "read_only", "calling", "train", "doesnt", "add", "the", "training", "data", "to", "mongo", "NUMBER", "I", "thought", "only", "new", "conversations", "will", "not", "be", "add", "NUMBER", "Is", "this", "intentional", "Doesnt", "work", "if", "read_only", "True", "chatbot", "NUMBER", "train", "corpus", "NUMBER", "english", "Done", "NUMBER", "Incorrect", "class", "name", "super", "ClosestMatchAdapter", "self", "NUMBER", "__init__", "kwargs", "NameError", "global", "name", "ClosestMatchAdapter", "be", "not", "defined", "Would", "this", "will", "help", "in", "responding", "with", "I", "dont", "understand", "your", "question", "for", "statements", "that", "don", "t", "match", "NUMBER", "Bot", "Input", "input", "Statement", "None", "input", "NUMBER", "add_extra_data", "user_id", "NUMBER", "bot_input", "chatbot", "NUMBER", "get_response", "input", "In", "my", "logic", "adapter", "def", "process", "self", "statement", "print", "statement", "NUMBER", "extra_data", "returns", "I", "only", "see", "this", "issue", "when", "use", "Terminal", "output", "adapter", "NUMBER", "I", "guess", "its", "the", "job", "of", "the", "input", "adapter", "to", "persist", "extra_data", "I", "guess", "preserving", "extra_data", "be", "upto", "the", "Input", "output", "adapater", "NUMBER", "Hipchat", "and", "Terminal", "input", "adapters", "modify", "the", "input_statement", "hence", "extra_data", "gets", "lost", "NUMBER", "So", "i", "don", "t", "think", "any", "action", "be", "required", "NUMBER", "What", "do", "u", "think", "Yes", "NUMBER", "Can", "close", "this", "NUMBER", "Its", "just", "that", "in", "the", "terminal", "input", "adapter", "def", "process_input", "self", "statement", "return", "Statement", "user_input", "In", "this", "case", "the", "input", "statement", "object", "be", "not", "be", "use", "instead", "a", "new", "instance", "of", "Statement", "be", "returned", "NUMBER", "So", "extra_data", "be", "lost", "in", "the", "response", "of", "the", "output", "adapter", "NUMBER", "But", "yes", "you", "be", "right", "the", "core", "doesnt", "alter", "extra_data", "Is", "it", "possible", "for", "a", "logic", "adapter", "to", "modify", "the", "input", "statement", "before", "it", "goes", "to", "the", "next", "adapter", "Can", "I", "use", "extra_data", "for", "this", "to", "store", "some", "computed", "value", "ok", "noted", "NUMBER", "How", "about", "the", "input", "text", "I", "want", "to", "create", "a", "logic", "adapter", "that", "do", "spell", "correction", "and", "handles", "the", "output", "to", "the", "next", "logic", "adapter", "NUMBER", "Ah", "ok", "NUMBER", "So", "save", "the", "computed", "value", "in", "the", "databse", "from", "one", "logic", "adapter", "and", "retrieve", "the", "saved", "value", "in", "the", "next", "logic", "adapter", "I", "need", "to", "create", "chatbot", "to", "autocorrect", "all", "the", "spelling", "mistakes", "can", "you", "help", "me", "Actually", "My", "question", "be", "User", "will", "write", "a", "sentence", "with", "spelling", "mistake", "and", "Chatbot", "should", "response", "same", "sentence", "without", "spelling", "mistake", "NUMBER", "example", "USER", "clmate", "be", "gaod", "BOT", "climate", "be", "good", "can", "you", "help", "me", "in", "this", "I", "think", "this", "might", "help", "you", "LINK", "spell", "checker", "NUMBER", "rst", "I", "be", "planning", "to", "add", "different", "department", "services", "as", "Django", "re", "usable", "apps", "NUMBER", "Will", "it", "be", "possible", "with", "this", "framework", "for", "exampl", "_", "ChatterBot", "Parent", "_", "_Service", "NUMBER", "Child", "__", "Service", "NUMBER", "Child", "_", "_", "et", "NUMBER", "If", "so", "could", "you", "please", "let", "me", "how", "do", "this", "gunthercox", "thank", "you", "very", "much", "I", "ll", "try", "and", "let", "you", "about", "about", "development", "if", "possible", "I", "ll", "update", "documentation", "also", "NUMBER", "Is", "it", "possible", "to", "send", "multiple", "response", "to", "a", "conversation", "How", "can", "i", "do", "something", "like", "this", "user", "Hello", "bot", "Hello", "hi", "bot", "Good", "afternoon", "bot", "How", "can", "I", "help", "you", "today", "Ah", "ok", "NUMBER", "I", "see", "what", "you", "be", "saying", "the", "logic", "adapter", "outputs", "multiple", "responses", "in", "a", "certain", "format", "and", "let", "the", "output", "adapter", "send", "the", "response", "as", "multiple", "message", "Added", "corpus", "of", "HINDI", "language", "will", "be", "add", "more", "of", "conversations", "in", "hindi", "language", "Let", "me", "know", "if", "i", "be", "going", "in", "the", "right", "direction", "Todo", "NUMBER", "Documentation", "NUMBER", "NUMBER", "List", "of", "all", "support", "date", "patterns", "NUMBER", "Add", "test", "Actually", "I", "don", "t", "use", "nltk", "or", "MX", "date", "in", "the", "parser", "I", "will", "remove", "the", "references", "NUMBER", "By", "the", "way", "aren", "t", "u", "use", "nltk", "internally", "to", "remove", "stopwords", "Ah", "ok", "I", "see", "NUMBER", "What", "do", "you", "think", "i", "should", "do", "I", "did", "borrow", "most", "of", "the", "code", "from", "nltk_contrib", "but", "made", "a", "lot", "of", "modifications", "to", "match", "patterns", "NUMBER", "Will", "a", "rewrite", "work", "maybe", "a", "restructure", "Its", "all", "just", "RegEx", "capture", "anyways", "Just", "did", "a", "complete", "overhaul", "of", "the", "date", "parser", "from", "scratch", "NUMBER", "Its", "much", "easier", "to", "add", "new", "pattern", "now", "NUMBER", "No", "external", "dependencies", "nor", "any", "nltk", "code", "be", "use", "NUMBER", "I", "will", "add", "more", "regex", "patterns", "asap", "NUMBER", "Done", "NUMBER", "If", "i", "miss", "out", "any", "date", "patterns", "let", "me", "know", "NUMBER", "Otherwise", "its", "ready", "be", "there", "any", "example", "of", "my_bot_config", "NUMBER", "json", "bilalbayasut", "save", "this", "into", "a", "file", "for", "example", "NUMBER", "my_bot_config", "NUMBER", "json", "JSON", "name", "Tech", "Support", "Bot", "logic_adapters", "chatterbot", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "chatterbot", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "training_data", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "greetings", "To", "could", "do", "like", "this", "Bash", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "NUMBER", "from_config_file", "NUMBER", "my_bot_config", "NUMBER", "json", "I", "have", "be", "use", "NLTK", "timex", "parser", "to", "parse", "date", "and", "time", "just", "like", "LINK", "NUMBER", "We", "also", "parse", "email", "url", "phone", "numbers", "NUMBER", "NLTK", "parser", "LINK", "_contrib", "blob", "master", "nltk_contrib", "timex", "NUMBER", "py", "Do", "you", "have", "an", "API", "skeleton", "in", "mind", "if", "so", "i", "can", "help", "with", "this", "Noted", "NUMBER", "Hi", "gunthercox", "I", "have", "a", "question", "regard", "the", "license", "of", "this", "app", "NUMBER", "NUMBER", "Can", "chatterbot", "be", "use", "for", "commercial", "purposes", "NUMBER", "What", "kind", "of", "License", "be", "it", "release", "under", "MIT", "This", "be", "where", "I", "be", "right", "now", "NUMBER", "NUMBER", "python", "from", "chatterbot", "NUMBER", "utils", "NUMBER", "parsing", "import", "datetime_parsing", "dates", "datetime_parsing", "I", "have", "meetings", "on", "November", "NUMBER", "and", "NUMBER", "NUMBER", "My", "next", "holiday", "be", "whole", "of", "next", "week", "NUMBER", "I", "be", "free", "this", "friday", "and", "I", "be", "going", "on", "leave", "the", "day", "after", "tomorrow", "print", "dates", "datetime", "NUMBER", "datetime", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "datetime", "NUMBER", "datetime", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "datetime", "NUMBER", "datetime", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "datetime", "NUMBER", "date", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "datetime", "NUMBER", "datetime", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "If", "you", "notice", "the", "first", "date", "object", "be", "an", "array", "of", "dates", "since", "the", "user", "be", "referring", "to", "multiple", "dates", "while", "others", "be", "not", "NUMBER", "The", "second", "object", "be", "the", "start", "and", "end", "position", "in", "the", "text", "Yet", "to", "add", "test", "NUMBER", "How", "do", "i", "run", "test", "Sorry", "I", "be", "come", "from", "Javascript", "Awesome", "thanks", "NUMBER", "I", "didnt", "see", "the", "license", "information", "in", "license", "NUMBER", "md", "file", "thats", "the", "reason", "i", "asked", "NUMBER", "Awesome", "NUMBER", "Thanks", "Multi", "user", "support", "in", "the", "core", "would", "be", "really", "useful", "Currently", "how", "i", "be", "handle", "user", "bot", "conversations", "be", "NUMBER", "When", "a", "user", "be", "connected", "i", "create", "a", "user_id", "cookie", "and", "save", "the", "user", "to", "mongodb", "NUMBER", "I", "record", "all", "the", "user", "s", "conversations", "in", "mongodb", "tag", "to", "the", "unique", "user_id", "so", "next", "time", "i", "can", "pick", "up", "the", "conversation", "where", "it", "left", "off", "TODO", "NUMBER", "Users", "current_intent", "and", "previous_intent", "be", "stored", "as", "well", "NUMBER", "So", "that", "the", "bot", "knows", "the", "context", "before", "responding", "to", "the", "user", "NUMBER", "Previous", "intent", "Current", "intent", "be", "only", "stored", "for", "NUMBER", "minutes", "NUMBER", "TODO", "group", "of", "user", "TAG", "bot", "sounds", "more", "complicated", "Hi", "Gunther", "NUMBER", "Is", "it", "possible", "for", "you", "to", "release", "a", "websocket", "adapter", "I", "have", "be", "trying", "to", "implement", "one", "with", "autobahn", "But", "i", "be", "not", "sure", "how", "the", "input", "and", "output", "adapters", "should", "be", "Got", "around", "implement", "it", "NUMBER", "Was", "quite", "simple", "NUMBER", "I", "might", "have", "to", "create", "multiple", "instances", "of", "Chatbot", "for", "each", "connection", "NUMBER", "Is", "there", "anyway", "to", "create", "multiple", "instances", "without", "having", "to", "re", "train", "the", "bot", "from", "autobahn", "NUMBER", "twisted", "NUMBER", "websocket", "import", "WebSocketServerProtocol", "WebSocketServerFactory", "from", "chatterbot", "import", "ChatBot", "class", "MyServerProtocol", "WebSocketServerProtocol", "def", "onConnect", "self", "request", "self", "NUMBER", "chatbot", "ChatBot", "Ron", "Obvious", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "database", "chatbot", "self", "NUMBER", "chatbot", "NUMBER", "train", "EXPENSIVE", "print", "Client", "connecting", "NUMBER", "NUMBER", "format", "request", "NUMBER", "peer", "def", "onOpen", "self", "print", "WebSocket", "connection", "open", "NUMBER", "def", "onMessage", "self", "payload", "isBinary", "msg", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "payload", "NUMBER", "encode", "utf", "NUMBER", "self", "NUMBER", "sendMessage", "msg", "NUMBER", "text", "NUMBER", "encode", "utf", "NUMBER", "isBinary", "def", "onClose", "self", "wasClean", "code", "reason", "print", "WebSocket", "connection", "close", "NUMBER", "NUMBER", "format", "reason", "if", "__name__", "__main__", "import", "sys", "from", "twisted", "NUMBER", "python", "import", "log", "from", "twisted", "NUMBER", "internet", "import", "reactor", "log", "NUMBER", "artLogging", "sys", "NUMBER", "dout", "factory", "WebSocketServerFactory", "u", "ws", "NUMBER", "NUMBER", "factory", "NUMBER", "protocol", "MyServerProtocol", "factory", "NUMBER", "setProtocolOptions", "maxConnections", "NUMBER", "note", "to", "self", "if", "use", "putChild", "the", "child", "must", "be", "bytes", "NUMBER", "reactor", "NUMBER", "listenTCP", "NUMBER", "factory", "reactor", "NUMBER", "run", "Fixed", "this", "by", "setting", "user_id", "before", "get_response", "NUMBER", "I", "have", "a", "global", "users", "object", "with", "all", "user", "settings", "eg", "Intent", "Single", "instance", "of", "Chatbot", "Pass", "the", "users", "object", "into", "Chatbot", "while", "initializing", "def", "onConnect", "self", "request", "Create", "or", "re", "use", "the", "user_id", "based", "on", "cookies", "self", "NUMBER", "_user_id", "user_id", "Generate", "this", "self", "NUMBER", "chatbot", "bot", "users", "self", "NUMBER", "_user_id", "NUMBER", "user", "settings", "here", "def", "onMessage", "self", "payload", "isBinary", "self", "NUMBER", "chatbot", "NUMBER", "user_id", "self", "NUMBER", "_user_id", "msg", "self", "NUMBER", "chatbot", "NUMBER", "get_response", "payload", "NUMBER", "encode", "utf", "NUMBER", "self", "NUMBER", "sendMessage", "msg", "NUMBER", "text", "NUMBER", "encode", "utf", "NUMBER", "isBinary", "It", "would", "be", "great", "if", "you", "can", "provide", "a", "method", "to", "set", "context", "variables", "dynamically", "NUMBER", "And", "even", "add", "remove", "adapters", "Thanks", "for", "this", "great", "tool", "NUMBER", "I", "was", "looking", "at", "the", "example", "program", "NUMBER", "In", "the", "English", "corpus", "there", "be", "cases", "where", "a", "same", "question", "can", "have", "multiple", "answers", "Hi", "How", "be", "it", "going", "Good", "Hi", "How", "be", "it", "going", "Fine", "Hi", "How", "be", "it", "going", "Okay", "Hi", "How", "be", "it", "going", "Great", "Hi", "How", "be", "it", "going", "Could", "be", "better", "NUMBER", "Hi", "How", "be", "it", "going", "Not", "so", "great", "NUMBER", "However", "when", "I", "be", "actually", "run", "the", "app", "and", "try", "to", "ask", "Hi", "How", "be", "it", "going", "the", "answer", "be", "always", "Could", "be", "better", "NUMBER", "I", "did", "set", "the", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "and", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMatchAdapter", "But", "be", "there", "a", "way", "to", "just", "try", "to", "let", "it", "randomize", "the", "response", "so", "it", "s", "not", "always", "the", "same", "answer", "Thank", "you", "very", "much", "that", "s", "exactly", "what", "I", "be", "looking", "for", "NUMBER", "I", "didn", "t", "find", "that", "in", "the", "document", "maybe", "I", "miss", "that", "NUMBER", "Hi", "Gunther", "We", "be", "doing", "intent", "classification", "with", "a", "custom", "Logic", "adapter", "NUMBER", "The", "intent", "will", "match", "for", "Book", "a", "flight", "ticket", "book_ticket", "NUMBER", "The", "matched", "Logic", "adapter", "will", "respond", "with", "What", "be", "your", "destination", "NUMBER", "Let", "s", "say", "a", "user", "types", "a", "random", "word", "asdadasd", "be", "there", "anyway", "for", "me", "to", "go", "back", "to", "the", "Logic", "adapter", "and", "prompt", "What", "be", "your", "destination", "NUMBER", "Can", "conversations", "remain", "in", "the", "Logic", "adapter", "I", "only", "want", "to", "exit", "once", "the", "book_ticket", "intent", "be", "complete", "Awesome", "NUMBER", "I", "have", "write", "a", "basic", "IntentClassifier", "for", "book_flight", "intent", "NUMBER", "Am", "I", "going", "in", "the", "right", "direction", "Is", "there", "a", "better", "way", "from", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "import", "LogicAdapter", "from", "chatterbot", "NUMBER", "conversation", "import", "Statement", "from", "textblob", "NUMBER", "classifiers", "import", "NaiveBayesClassifier", "class", "IntentClassification", "LogicAdapter", "def", "__init__", "self", "kwargs", "super", "IntentClassification", "self", "NUMBER", "__init__", "kwargs", "training_data", "Book", "me", "a", "ticket", "NUMBER", "Book", "me", "a", "ticket", "to", "Singapore", "NUMBER", "it", "be", "time", "to", "go", "to", "sleep", "NUMBER", "what", "be", "your", "favorite", "color", "NUMBER", "i", "had", "a", "great", "time", "NUMBER", "what", "be", "NUMBER", "self", "NUMBER", "classifier", "NaiveBayesClassifier", "training_data", "self", "NUMBER", "intent_name", "book_flight", "def", "can_process", "self", "statement", "return", "self", "NUMBER", "context", "NUMBER", "intent", "be", "None", "or", "self", "NUMBER", "context", "NUMBER", "intent", "self", "NUMBER", "intent_name", "def", "process", "self", "statement", "If", "the", "intent", "be", "active", "if", "self", "NUMBER", "context", "NUMBER", "intent", "self", "NUMBER", "intent_name", "Asks", "for", "destination", "if", "empty", "or", "Book", "tickets", "self", "NUMBER", "context", "NUMBER", "intent", "None", "return", "NUMBER", "Statement", "We", "have", "booked", "your", "tickets", "else", "Check", "if", "user", "s", "statement", "matches", "the", "intent", "confidence", "self", "NUMBER", "classifier", "NUMBER", "classify", "statement", "NUMBER", "text", "NUMBER", "lower", "if", "confidence", "NUMBER", "self", "NUMBER", "context", "NUMBER", "intent", "self", "NUMBER", "intent_name", "destination_exists", "singapore", "in", "statement", "NUMBER", "text", "NUMBER", "lower", "if", "destination_exists", "self", "NUMBER", "context", "NUMBER", "intent", "None", "return", "confidence", "Statement", "We", "have", "booked", "your", "flight", "tickets", "to", "singapore", "else", "return", "confidence", "Statement", "Where", "be", "you", "fying", "to", "else", "self", "NUMBER", "context", "NUMBER", "intent", "None", "return", "confidence", "Statement", "None", "Sure", "NUMBER", "Thanks", "NUMBER", "I", "would", "be", "interested", "in", "having", "a", "persist", "flag", "to", "indicate", "if", "a", "conversation", "should", "remain", "in", "a", "Logic", "adapter", "NUMBER", "If", "the", "persist", "flag", "be", "false", "then", "only", "that", "Logic", "adapter", "will", "handle", "all", "future", "conversations", "NUMBER", "What", "do", "you", "think", "Basically", "i", "be", "trying", "to", "build", "something", "similar", "to", "wit", "NUMBER", "ai", "s", "branch", "model", "when", "some", "of", "the", "extracted", "entities", "or", "context", "variables", "be", "miss", "NUMBER", "Another", "issue", "i", "be", "facing", "be", "sometimes", "i", "need", "to", "save", "Context", "variables", "for", "a", "specific", "amount", "of", "time", "for", "a", "future", "conversation", "NUMBER", "For", "eg", "user", "What", "be", "the", "weather", "in", "Singapore", "bot", "It", "will", "be", "sunny", "user", "How", "about", "tomorrow", "bot", "Sunny", "too", "user", "How", "about", "the", "traffic", "Matches", "traffic_intent", "logic", "adapter", "bot", "It", "will", "always", "congested", "NUMBER", "In", "this", "case", "i", "have", "to", "save", "location", "context", "which", "can", "be", "re", "use", "in", "a", "different", "logic", "adapter", "NUMBER", "I", "can", "save", "it", "externally", "but", "would", "be", "good", "if", "Chatterbot", "handles", "per", "user", "settings", "and", "saving", "of", "context", "internally", "NUMBER", "gunthercox", "I", "was", "wondering", "if", "chatterbot", "can", "have", "Topic", "based", "conversations", "in", "the", "core", "NUMBER", "Similar", "to", "LINK", "Or", "should", "we", "just", "use", "the", "logic", "adapter", "pattern", "to", "do", "this", "There", "be", "also", "another", "chatbot", "that", "implement", "Topics", "LINK", "intent", "io", "open", "intent", "It", "would", "be", "good", "to", "see", "your", "note", "on", "this", "NUMBER", "I", "be", "not", "sure", "how", "would", "you", "make", "the", "bot", "learn", "to", "group", "conversations", "into", "a", "topic", "NUMBER", "I", "was", "thinking", "topics", "to", "be", "manually", "created", "ones", "and", "conversations", "be", "tag", "to", "a", "topic", "NUMBER", "But", "it", "will", "be", "interesting", "to", "see", "your", "POV", "A", "few", "features", "off", "the", "top", "of", "my", "head", "NUMBER", "Tagging", "conversations", "to", "topics", "NUMBER", "NUMBER", "Branching", "between", "conversations", "inside", "a", "topic", "NUMBER", "Branching", "from", "one", "topic", "to", "another", "Hi", "rmdort", "and", "gunthercox", "I", "ve", "be", "looking", "for", "the", "way", "to", "create", "this", "intent", "and", "contextual", "chatting", "in", "this", "chatterbot", "NUMBER", "any", "update", "on", "this", "Cheers", "NUMBER", "NUMBER", "rmdort", "Did", "u", "try", "use", "wit", "NUMBER", "ai", "with", "chatterbot", "OR", "api", "NUMBER", "ai", "etc", "for", "intent", "and", "entities", "I", "know", "API", "NUMBER", "AI", "be", "paid", "but", "just", "for", "the", "idea", "NUMBER", "Because", "my", "requirement", "be", "kind", "of", "same", "as", "yours", "NUMBER", "Or", "did", "u", "manage", "to", "build", "your", "own", "version", "use", "open", "intent", "LINK", "intent", "io", "open", "intent", "Hi", "there", "I", "would", "like", "to", "help", "I", "m", "french", "so", "count", "me", "in", "if", "you", "need", "so", "stuff", "Take", "care", "NUMBER", "Hi", "I", "just", "tried", "basic_example", "NUMBER", "py", "and", "it", "do", "not", "seem", "to", "work", "NUMBER", "Even", "if", "we", "ignore", "warnings", "it", "do", "not", "give", "any", "output", "NUMBER", "_", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "fuzzywuzzy", "fuzz", "NUMBER", "py", "NUMBER", "UserWarning", "Using", "slow", "pure", "python", "SequenceMatcher", "NUMBER", "Install", "python", "Levenshtein", "to", "remove", "this", "warning", "warnings", "NUMBER", "warn", "Using", "slow", "pure", "python", "SequenceMatcher", "NUMBER", "Install", "python", "Levenshtein", "to", "remove", "this", "warning", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "application", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "How", "be", "you", "_", "Even", "example", "django", "app", "do", "not", "look", "to", "give", "any", "significant", "results", "NUMBER", "Any", "suggestion", "I", "have", "the", "same", "problem", "Just", "to", "give", "some", "information", "on", "the", "issue", "NUMBER", "While", "adapters", "be", "great", "and", "it", "s", "nice", "that", "they", "use", "confidence", "check", "I", "find", "it", "more", "reliable", "and", "easy", "to", "write", "my", "own", "regex", "based", "command", "parser", "for", "my", "assistant", "ai", "NUMBER", "Any", "user", "input", "goes", "through", "the", "command", "parser", "first", "and", "it", "only", "goes", "to", "chat", "bot", "if", "no", "matching", "command", "was", "find", "NUMBER", "At", "least", "for", "now", "NUMBER", "If", "i", "dont", "want", "the", "bot", "to", "learn", "further", "after", "training", "by", "setting", "read_only", "true", "what", "be", "the", "response", "of", "some", "random", "statement", "It", "looks", "like", "do", "you", "know", "the", "time", "was", "accidentally", "add", "to", "both", "the", "hit", "and", "miss", "lists", "NUMBER", "This", "commit", "ensures", "it", "s", "classified", "as", "a", "match", "NUMBER", "I", "tried", "to", "adapt", "the", "example", "at", "LINK", "to", "my", "code", "but", "I", "keep", "get", "the", "error", "bash", "Traceback", "most", "recent", "call", "last", "File", "bot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot_input", "bot", "NUMBER", "get_response", "None", "File", "Users", "rileyshaw", "code", "chat", "venv", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "self", "NUMBER", "orage", "NUMBER", "generate_base_query", "self", "File", "Users", "rileyshaw", "code", "chat", "venv", "lib", "python", "NUMBER", "site", "package", "chatterbot", "adapters", "storage", "storage_adapter", "NUMBER", "py", "line", "NUMBER", "in", "generate_base_query", "filter_instance", "Filter", "TypeError", "str", "object", "be", "not", "callable", "It", "looks", "like", "Filter", "be", "somehow", "be", "read", "as", "a", "string", "For", "reference", "here", "s", "the", "code", "I", "m", "use", "python", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "trainers", "import", "ListTrainer", "Create", "a", "new", "ChatBot", "bot", "ChatBot", "demo", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMeaningAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMatchAdapter", "input_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "output", "NUMBER", "TerminalAdapter", "filters", "chatterbot", "NUMBER", "filters", "NUMBER", "RepetitiveResponseFilter", "database", "demodb", "Already", "trained", "in", "this", "DB", "database_uri", "mongodb", "localhost", "NUMBER", "read_only", "True", "print", "Type", "something", "to", "begin", "NUMBER", "The", "following", "loop", "will", "execute", "each", "time", "the", "user", "enters", "input", "while", "True", "try", "We", "pass", "None", "to", "this", "method", "because", "the", "parameter", "be", "not", "use", "by", "the", "TerminalAdapter", "bot_input", "bot", "NUMBER", "get_response", "None", "Press", "ctrl", "c", "or", "ctrl", "d", "on", "the", "keyboard", "to", "exit", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "I", "also", "tried", "from", "chatterbot", "NUMBER", "filters", "import", "RepetitiveResponseFilter", "and", "use", "that", "directly", "but", "that", "fail", "with", "bash", "Traceback", "most", "recent", "call", "last", "File", "demo", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot_input", "bot", "NUMBER", "get_response", "None", "File", "Users", "rileyshaw", "code", "chat", "venv", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "self", "NUMBER", "orage", "NUMBER", "generate_base_query", "self", "File", "Users", "rileyshaw", "code", "chat", "venv", "lib", "python", "NUMBER", "site", "package", "chatterbot", "adapters", "storage", "storage_adapter", "NUMBER", "py", "line", "NUMBER", "in", "generate_base_query", "for", "Filter", "in", "chatterbot", "NUMBER", "filters", "TypeError", "type", "object", "be", "not", "iterable", "python", "from", "chatterbot", "NUMBER", "filters", "import", "RepetitiveResponseFilter", "NUMBER", "filters", "RepetitiveResponseFilter", "seems", "to", "work", "NUMBER", "be", "this", "right", "S", "rileyjshaw", "Yeah", "that", "will", "work", "expected", "way", "be", "to", "pass", "filters", "as", "a", "tuple", "Cool", "thanks", "On", "Sun", "Sep", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "Gunther", "Cox", "notifications", "github", "NUMBER", "com", "write", "rileyjshaw", "LINK", "There", "be", "a", "know", "issue", "with", "the", "current", "release", "where", "the", "filters", "parameter", "be", "expecting", "a", "callable", "for", "the", "filter", "class", "instead", "of", "a", "string", "path", "to", "the", "callable", "class", "NUMBER", "This", "has", "be", "fix", "but", "the", "change", "won", "t", "be", "available", "until", "the", "next", "version", "of", "ChatterBot", "be", "release", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "or", "mute", "the", "thread", "LINK", "auth", "ABwW", "NUMBER", "tcT", "NUMBER", "SoOQYuQPufXJ", "NUMBER", "f", "NUMBER", "TdNeOdArks", "NUMBER", "qrS_tgaJpZM", "NUMBER", "J_zxc", "NUMBER", "Is", "there", "a", "way", "to", "link", "a", "hook", "function", "to", "some", "phrases", "Oh", "great", "I", "m", "trying", "to", "create", "a", "kind", "of", "decision", "tree", "implement", "a", "machine", "learning", "conversation", "it", "be", "where", "chatterbot", "shows", "up", "NUMBER", "If", "you", "know", "or", "have", "something", "relate", "it", "please", "let", "me", "know", "it", "Thanks", "NUMBER", "gunthercox", "Could", "chatterbot", "be", "trained", "externally", "and", "then", "combined", "with", "the", "django", "app", "Yeah", "gunthercox", "be", "this", "possible", "gunthercox", "I", "created", "an", "adapter", "with", "weighted", "user", "inputs", "that", "then", "generate", "a", "response", "NUMBER", "I", "modify", "the", "time_adapter", "NUMBER", "py", "this", "would", "be", "a", "very", "tedious", "task", "for", "a", "large", "database", "of", "question", "NUMBER", "from", "NUMBER", "logic_adapter", "import", "LogicAdapter", "from", "chatterbot", "NUMBER", "conversation", "import", "Statement", "from", "textblob", "NUMBER", "classifiers", "import", "NaiveBayesClassifier", "from", "datetime", "import", "datetime", "class", "CustomerSupportAdapter", "LogicAdapter", "The", "TimeLogicAdapter", "returns", "the", "current", "time", "NUMBER", "def", "__init__", "self", "kwargs", "super", "CustomerSupportAdapter", "self", "NUMBER", "__init__", "kwargs", "training_data", "Are", "international", "students", "elibgible", "NUMBER", "Im", "an", "international", "student", "can", "I", "apply", "NUMBER", "whats", "available", "to", "international", "students", "NUMBER", "international", "students", "NUMBER", "do", "international", "students", "qualify", "NUMBER", "international", "students", "accepted", "NUMBER", "do", "i", "qualify", "as", "an", "international", "student", "NUMBER", "as", "an", "international", "student", "do", "i", "qualify", "NUMBER", "what", "be", "the", "requirements", "for", "international", "students", "NUMBER", "self", "NUMBER", "classifier", "NaiveBayesClassifier", "training_data", "def", "process", "self", "statement", "now", "datetime", "NUMBER", "now", "confidence", "self", "NUMBER", "classifier", "NUMBER", "classify", "statement", "NUMBER", "text", "NUMBER", "lower", "response", "Statement", "The", "Mount", "Baker", "Washington", "program", "be", "open", "to", "international", "students", "return", "confidence", "response", "If", "you", "use", "the", "DjangoStorageAdapter", "as", "the", "storage", "for", "the", "training", "it", "shouldn", "t", "the", "training", "from", "corpus", "examples", "just", "work", "One", "problem", "with", "the", "DjangoStorageAdapter", "that", "I", "m", "seeing", "be", "that", "Response", "NUMBER", "response", "NUMBER", "text", "be", "actually", "the", "statement", "that", "be", "be", "responded", "to", "and", "Response", "NUMBER", "atement", "NUMBER", "text", "be", "the", "real", "response", "NUMBER", "At", "least", "if", "you", "look", "at", "the", "data", "in", "the", "admin", "interface", "after", "submit", "at", "least", "NUMBER", "chats", "to", "the", "API", "use", "the", "example", "django", "app", "NUMBER", "html", "Issue", "NUMBER", "gunthercox", "ETA", "for", "the", "fix", "Thanks", "NUMBER", "fix", "in", "NUMBER", "weeks", "on", "my", "fork", "totalgood", "with", "PR", "to", "gunthercox", "repo", "hobson", "hi", "i", "want", "to", "train", "the", "chatterbot", "with", "storage", "DjangoStorageAdapter", "and", "use", "database", "as", "django", "database", "NUMBER", "but", "It", "seems", "inconsistent", "database", "formats", "Me", "too", "chenjun", "NUMBER", "NUMBER", "I", "m", "work", "on", "it", "NUMBER", "But", "you", "could", "probably", "fork", "and", "fix", "faster", "than", "me", "if", "you", "have", "an", "urgent", "need", "NUMBER", "excellent", "Hobson", "NUMBER", "NUMBER", "NUMBER", "gh", "LINK", "twtr", "LINK", "li", "LINK", "g", "LINK", "HobsonLane", "so", "LINK", "On", "Thu", "Nov", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Gunther", "Cox", "notifications", "github", "NUMBER", "com", "write", "I", "m", "currently", "work", "to", "add", "a", "Django", "management", "command", "and", "training_data", "parameter", "that", "will", "allow", "chat", "bots", "to", "be", "trained", "NUMBER", "This", "functionality", "should", "be", "available", "in", "the", "next", "version", "release", "NUMBER", "Updated", "documentation", "will", "be", "available", "but", "essentially", "all", "you", "will", "need", "to", "do", "be", "call", "the", "following", "command", "in", "your", "Django", "project", "NUMBER", "python", "manage", "NUMBER", "py", "train", "The", "change", "can", "be", "seen", "here", "NUMBER", "LINK", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "or", "mute", "the", "thread", "LINK", "auth", "AAR", "NUMBER", "j", "NUMBER", "vX", "NUMBER", "LxMRKpTcynw", "NUMBER", "Ke", "NUMBER", "l", "luH", "NUMBER", "ks", "NUMBER", "q", "NUMBER", "YgaJpZM", "NUMBER", "J", "NUMBER", "Cm", "NUMBER", "NUMBER", "Issue", "LINK", "LINK", "gunthercox", "Ok", "let", "me", "know", "if", "you", "need", "any", "help", "from", "side", "NUMBER", "gunthercox", "Ok", "NUMBER", "Makes", "admin", "interface", "much", "more", "intuitive", "to", "work", "with", "NUMBER", "When", "run", "the", "example", "program", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Ron", "Obvious", "trainer", "chatterbot", "NUMBER", "trainers", "NUMBER", "ChatterBotCorpusTrainer", "Train", "based", "on", "the", "english", "corpus", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "Get", "a", "response", "to", "an", "input", "statement", "print", "chatbot", "NUMBER", "get_response", "Hello", "how", "be", "you", "today", "I", "get", "two", "warnings", "Although", "the", "program", "continues", "to", "run", "as", "normal", "NUMBER", "C", "Python", "NUMBER", "lib", "site", "package", "nltk", "decorators", "NUMBER", "py", "NUMBER", "DeprecationWarning", "inspect", "NUMBER", "getargspec", "be", "deprecate", "use", "inspect", "NUMBER", "signature", "instead", "regargs", "varargs", "varkwargs", "defaults", "inspect", "NUMBER", "getargspec", "func", "and", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "adapters", "storage", "jsonfile", "NUMBER", "py", "NUMBER", "UnsuitableForProductionWarning", "The", "JsonFileStorageAdapter", "be", "not", "recommended", "for", "production", "application", "environments", "NUMBER", "self", "NUMBER", "UnsuitableForProductionWarning", "I", "m", "run", "with", "Python", "NUMBER", "AMD", "NUMBER", "on", "Windows", "NUMBER", "Thanks", "gunthercox", "Hi", "gunthercox", "It", "ll", "be", "a", "great", "addition", "I", "already", "tried", "REST", "API", "version", "NUMBER", "to", "connect", "with", "skype", "IMO", "bot", "REST", "API", "still", "very", "new", "and", "has", "a", "poor", "error", "handle", "NUMBER", "Maybe", "with", "Node", "or", "C", "works", "better", "NUMBER", "Looking", "forward", "to", "bot", "framework", "intergration", "gunthercox", "interested", "to", "work", "for", "it", "Any", "ETAs", "for", "this", "task", "gunthercox", "By", "going", "through", "some", "of", "the", "guideline", "of", "Bot", "Connector", "Direct", "Line", "API", "V", "NUMBER", "LINK", "us", "restapi", "directline", "navtitle", "These", "things", "we", "need", "to", "to", "accomplish", "NUMBER", "Can", "i", "submit", "PR", "for", "these", "change", "Authentication", "REST", "connect", "to", "directline", "NUMBER", "botframework", "NUMBER", "com", "POST", "api", "conversations", "abc", "NUMBER", "message", "HTTP", "NUMBER", "Authorization", "BotConnector", "RCurR_XV", "NUMBER", "ZA", "NUMBER", "cwA", "NUMBER", "BKA", "NUMBER", "iaJrC", "NUMBER", "xpy", "NUMBER", "qbOF", "NUMBER", "xnR", "NUMBER", "vtCX", "NUMBER", "CZj", "NUMBER", "LdjAPGfiCpg", "NUMBER", "Fv", "NUMBER", "other", "HTTP", "headers", "omitted", "Starting", "a", "conversation", "REST", "connect", "to", "directline", "NUMBER", "botframework", "NUMBER", "com", "POST", "api", "conversations", "HTTP", "NUMBER", "Authorization", "BotConnector", "RCurR_XV", "NUMBER", "ZA", "NUMBER", "cwA", "NUMBER", "BKA", "NUMBER", "iaJrC", "NUMBER", "xpy", "NUMBER", "qbOF", "NUMBER", "xnR", "NUMBER", "vtCX", "NUMBER", "CZj", "NUMBER", "LdjAPGfiCpg", "NUMBER", "Fv", "NUMBER", "y", "NUMBER", "qbOF", "NUMBER", "xPGfiCpg", "NUMBER", "Fv", "NUMBER", "y", "NUMBER", "qqbOF", "NUMBER", "x", "NUMBER", "qbOF", "NUMBER", "xn", "other", "headers", "response", "from", "directline", "NUMBER", "botframework", "NUMBER", "com", "HTTP", "NUMBER", "NUMBER", "OK", "other", "headers", "conversationId", "abc", "NUMBER", "token", "RCurR_XV", "NUMBER", "ZA", "NUMBER", "cwA", "NUMBER", "BKA", "NUMBER", "iaJrC", "NUMBER", "xpy", "NUMBER", "qbOF", "NUMBER", "xnR", "NUMBER", "vtCX", "NUMBER", "CZj", "NUMBER", "LdjAPGfiCpg", "NUMBER", "Fv", "NUMBER", "y", "NUMBER", "qbOF", "NUMBER", "xPGfiCpg", "NUMBER", "Fv", "NUMBER", "y", "NUMBER", "qqbOF", "NUMBER", "x", "NUMBER", "qbOF", "NUMBER", "xn", "Sending", "an", "Activity", "to", "the", "bot", "connect", "to", "directline", "NUMBER", "botframework", "NUMBER", "com", "POST", "api", "conversations", "abc", "NUMBER", "message", "HTTP", "NUMBER", "Authorization", "BotConnector", "RCurR_XV", "NUMBER", "ZA", "NUMBER", "cwA", "NUMBER", "BKA", "NUMBER", "iaJrC", "NUMBER", "xpy", "NUMBER", "qbOF", "NUMBER", "xnR", "NUMBER", "vtCX", "NUMBER", "CZj", "NUMBER", "LdjAPGfiCpg", "NUMBER", "Fv", "NUMBER", "other", "headers", "text", "hello", "from", "user", "NUMBER", "response", "from", "directline", "NUMBER", "botframework", "NUMBER", "com", "HTTP", "NUMBER", "NUMBER", "No", "Content", "other", "headers", "Methods", "trying", "to", "implement", "use", "DirectLine", "client", "HTTP", "POST", "api", "tokens", "to", "get", "a", "token", "for", "a", "conversation", "GET", "api", "tokens", "to", "refresh", "a", "token", "GET", "api", "conversations", "to", "start", "a", "new", "conversation", "POST", "api", "conversations", "id", "message", "to", "send", "a", "message", "GET", "api", "conversations", "id", "message", "to", "receive", "message", "POST", "api", "conversations", "id", "upload", "to", "upload", "an", "attachment", "x", "Input", "adapter", "x", "Output", "adapter", "x", "Tests", "x", "Documentation", "x", "Example", "code", "vkosuri", "I", "be", "very", "new", "to", "chat", "bot", "world", "NUMBER", "However", "I", "have", "a", "question", "NUMBER", "What", "be", "the", "advantage", "of", "use", "ChatterBot", "instead", "of", "use", "Microsoft", "Bot", "Framework", "in", "terms", "of", "features", "and", "accuracy", "phpmind", "Am", "also", "like", "you", "gunthercox", "could", "you", "please", "answer", "his", "question", "gunthercox", "interested", "to", "work", "on", "this", "feature", "Any", "guidelines", "Thanks", "gunthercox", "some", "useful", "links", "i", "have", "find", "on", "ubuntu", "LINK", "Installation", "instrctuion", "LINK", "NUMBER", "_x", "NUMBER", "sh", "GitHub", "syntaxnet", "LINK", "On", "Windows", "it", "s", "very", "difficulty", "LINK", "Stack", "overflow", "syntaxnet", "tags", "LINK", "Hello", "I", "write", "a", "custom", "comparison", "method", "in", "chatterbot", "use", "the", "WMD", "word", "mover", "s", "algorithm", "implementation", "in", "the", "gensim", "python", "package", "NUMBER", "WMD", "takes", "NUMBER", "sentences", "or", "docs", "and", "compares", "them", "semantically", "NUMBER", "Even", "if", "the", "NUMBER", "sentences", "have", "no", "common", "words", "they", "get", "a", "high", "similarity", "score", "if", "they", "mean", "the", "same", "thing", "NUMBER", "Example", "these", "NUMBER", "sentences", "get", "a", "high", "similarity", "score", "NUMBER", "The", "king", "and", "queen", "paid", "a", "visit", "to", "the", "victims", "in", "the", "hospital", "last", "night", "NUMBER", "The", "patients", "get", "a", "royal", "visit", "yesterday", "By", "combining", "the", "leveshtein", "distance", "with", "WMD", "distance", "I", "be", "able", "to", "get", "chatterbot", "to", "perform", "a", "lot", "better", "_Yet", "to", "start", "benchmarking_", "Please", "let", "me", "know", "if", "you", "re", "interested", "in", "seeing", "the", "preliminary", "code", "NUMBER", "_note", "My", "intention", "be", "to", "really", "solve", "issue", "for", "my", "bot", "context", "based", "reply", "NUMBER", "NUMBER", "_", "Closing", "this", "again", "in", "favor", "of", "the", "reasoning", "I", "ve", "describe", "in", "this", "comment", "LINK", "issuecomment", "NUMBER", "gunthercox", "please", "have", "a", "look", "at", "PR", "let", "me", "know", "your", "feedback", "NUMBER", "How", "can", "I", "use", "this", "swear", "words", "filter", "Filter", "be", "made", "abstract", "so", "the", "it", "call", "be", "instantiated", "NUMBER", "Jaccard", "index", "be", "find", "to", "have", "better", "performance", "in", "approximate", "sentence", "matching", "so", "implement", "it", "NUMBER", "ratio", "be", "add", "here", "if", "there", "be", "ratio", "it", "will", "return", "result", "gunthercox", "Hi", "gunthercox", "When", "there", "be", "no", "such", "closest", "match", "answer", "for", "new", "input", "chatter", "robot", "use", "fuzzywuzzy", "or", "other", "algorithm", "method", "to", "find", "one", "and", "we", "as", "user", "review", "this", "answer", "as", "qualified", "or", "as", "user", "we", "add", "new", "answer", "for", "this", "new", "input", "can", "chatter", "robot", "update", "its", "Jason", "db", "or", "corpus", "automatically", "by", "this", "way", "it", "will", "save", "re", "run", "time", "and", "update", "knowledge", "base", "NUMBER", "For", "improving", "the", "accurate", "of", "two", "sentences", "similarity", "chatter", "robot", "use", "fuzzywuzzy", "as", "cloestmatch", "and", "wordnet", "as", "closetmeaning", "match", "do", "you", "think", "there", "be", "any", "other", "method", "or", "direction", "we", "could", "try", "thanks", "NUMBER", "Markov", "chains", "be", "good", "choice", "NUMBER", "May", "I", "double", "check", "with", "you", "that", "there", "be", "no", "good", "python", "package", "available", "for", "Markov", "chains", "based", "on", "my", "understanding", "Hi", "I", "m", "learning", "with", "Python", "NUMBER", "I", "install", "your", "beautiful", "Chatterbot", "NUMBER", "but", "there", "be", "a", "big", "problem", "wit", "NLTK", "module", "because", "with", "Python", "NUMBER", "chatterbot", "doesn", "t", "work", "because", "of", "there", "be", "a", "Deprecated", "Warning", "NUMBER", "I", "tried", "a", "lot", "of", "methods", "to", "solve", "this", "event", "First", "With", "python", "NUMBER", "m", "pip", "install", "U", "TAG", "Second", "I", "downloaded", "the", "new", "module", "nltk", "and", "then", "I", "install", "it", "with", "command", "sudo", "python", "setup", "NUMBER", "py", "install", "Third", "I", "tried", "with", "the", "command", "import", "warnings", "warnings", "NUMBER", "filterwarnings", "ignore", "category", "DeprecationWarning", "In", "all", "of", "this", "cases", "Chatterbot", "NUMBER", "new", "file", "with", "title", "Test", "NUMBER", "py", "from", "chatterbot", "NUMBER", "training", "NUMBER", "trainers", "import", "ChatterBotCorpusTrainer", "After", "run", "it", "gives", "me", "this", "message", "Warning", "from", "warnings", "module", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "nltk", "NUMBER", "py", "NUMBER", "egg", "nltk", "decorators", "NUMBER", "py", "line", "NUMBER", "regargs", "varargs", "varkwargs", "defaults", "inspect", "NUMBER", "getargspec", "func", "DeprecationWarning", "inspect", "NUMBER", "getargspec", "be", "deprecate", "use", "inspect", "NUMBER", "signature", "instead", "Can", "you", "help", "me", "please", "Thanks", "a", "lot", "I", "have", "the", "same", "NUMBER", "I", "don", "t", "know", "why", "it", "compares", "the", "Deprecated", "Warning", "message", "NUMBER", "Please", "help", "me", "NUMBER", "Hi", "I", "find", "also", "this", "LINK", "It", "seems", "a", "bug", "but", "I", "don", "t", "know", "how", "to", "change", "the", "code", "and", "where", "put", "it", "NUMBER", "Adriana", "I", "tried", "your", "solution", "NUMBER", "I", "uninstalled", "nltk", "by", "run", "sudo", "pip", "uninstall", "nltk", "NUMBER", "With", "pip", "uninstall", "nltk", "the", "result", "was", "permission", "denied", "NUMBER", "Then", "I", "install", "nltk", "by", "run", "pip", "install", "nltk", "upgrade", "NUMBER", "But", "the", "result", "be", "the", "same", "python", "Warning", "from", "warnings", "module", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "nltk", "decorators", "NUMBER", "py", "line", "NUMBER", "regargs", "varargs", "varkwargs", "defaults", "inspect", "NUMBER", "getargspec", "func", "DeprecationWarning", "inspect", "NUMBER", "getargspec", "be", "deprecate", "use", "inspect", "NUMBER", "signature", "instead", "With", "the", "use", "of", "setup", "NUMBER", "py", "the", "message", "of", "warning", "was", "a", "bit", "different", "because", "in", "that", "there", "was", "a", "details", "about", "the", "version", "of", "nltk", "module", "NUMBER", "Look", "python", "Warning", "from", "warnings", "module", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "nltk", "NUMBER", "py", "NUMBER", "egg", "nltk", "decorators", "NUMBER", "py", "line", "NUMBER", "regargs", "varargs", "varkwargs", "defaults", "inspect", "NUMBER", "getargspec", "func", "DeprecationWarning", "inspect", "NUMBER", "getargspec", "be", "deprecate", "use", "inspect", "NUMBER", "signature", "instead", "Thanks", "for", "your", "support", "NUMBER", "This", "appears", "to", "be", "an", "issue", "in", "NLTK", "and", "not", "one", "in", "Chatterbot", "NUMBER", "I", "haven", "t", "be", "able", "to", "find", "a", "ticket", "for", "NLTK", "that", "be", "track", "this", "issue", "so", "either", "it", "was", "report", "and", "fix", "or", "it", "was", "never", "report", "NUMBER", "I", "opened", "a", "ticket", "for", "NLTK", "because", "I", "suspected", "this", "problem", "could", "be", "associated", "to", "this", "module", "with", "os", "x", "NUMBER", "I", "don", "t", "have", "answer", "yet", "NUMBER", "I", "hope", "someone", "help", "me", "NUMBER", "Thanks", "a", "lot", "NUMBER", "Il", "NUMBER", "Set", "NUMBER", "NUMBER", "NUMBER", "Kevin", "Brown", "notifications", "github", "NUMBER", "com", "ha", "scritto", "This", "appears", "to", "be", "an", "issue", "in", "NLTK", "and", "not", "one", "in", "Chatterbot", "NUMBER", "I", "haven", "t", "be", "able", "to", "find", "a", "ticket", "for", "NLTK", "that", "be", "track", "this", "issue", "so", "either", "it", "was", "report", "and", "fix", "or", "it", "was", "never", "report", "NUMBER", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "or", "mute", "the", "thread", "LINK", "auth", "AUYRmSFoeEpFUN", "NUMBER", "kvF", "NUMBER", "IGmJlGIMb", "NUMBER", "nDks", "NUMBER", "qmDtpgaJpZM", "NUMBER", "Jx", "NUMBER", "f_", "NUMBER", "Sorry", "I", "have", "a", "question", "Is", "it", "possibile", "to", "use", "your", "chatterbot", "with", "Python", "NUMBER", "I", "asked", "to", "Michele", "Simionato", "author", "of", "both", "modules", "decorator", "NUMBER", "py", "and", "decorators", "NUMBER", "py", "and", "he", "answered", "me", "in", "this", "way", "A", "deprecation", "warning", "be", "a", "non", "issue", "it", "be", "just", "a", "warning", "NUMBER", "I", "will", "remove", "it", "in", "future", "version", "of", "the", "decorator", "module", "bit", "it", "be", "not", "urgent", "at", "all", "NUMBER", "But", "it", "isn", "t", "just", "a", "warning", "because", "when", "I", "try", "to", "run", "a", "training", "test", "it", "compares", "only", "Deprecated", "Warning", "message", "NUMBER", "Could", "you", "help", "me", "please", "Thanks", "Il", "NUMBER", "Set", "NUMBER", "NUMBER", "NUMBER", "Kevin", "Brown", "notifications", "github", "NUMBER", "com", "ha", "scritto", "This", "appears", "to", "be", "an", "issue", "in", "NLTK", "and", "not", "one", "in", "Chatterbot", "NUMBER", "I", "haven", "t", "be", "able", "to", "find", "a", "ticket", "for", "NLTK", "that", "be", "track", "this", "issue", "so", "either", "it", "was", "report", "and", "fix", "or", "it", "was", "never", "report", "NUMBER", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "or", "mute", "the", "thread", "LINK", "auth", "AUYRmSFoeEpFUN", "NUMBER", "kvF", "NUMBER", "IGmJlGIMb", "NUMBER", "nDks", "NUMBER", "qmDtpgaJpZM", "NUMBER", "Jx", "NUMBER", "f_", "NUMBER", "Ok", "NUMBER", "Thanks", "a", "lot", "NUMBER", "In", "the", "next", "days", "I", "will", "restart", "to", "work", "with", "your", "chatterbot", "NUMBER", "A", "NUMBER", "Il", "NUMBER", "Set", "NUMBER", "NUMBER", "NUMBER", "Gunther", "Cox", "notifications", "github", "NUMBER", "com", "ha", "scritto", "I", "m", "going", "to", "close", "this", "as", "I", "believe", "it", "be", "a", "non", "issue", "NUMBER", "Feel", "free", "to", "re", "open", "the", "ticket", "if", "I", "ve", "miss", "something", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "or", "mute", "the", "thread", "LINK", "auth", "AUYRmQg", "NUMBER", "WMALH", "NUMBER", "htIE", "NUMBER", "jqBQENbhhWNCBks", "NUMBER", "qoqb", "NUMBER", "gaJpZM", "NUMBER", "Jx", "NUMBER", "f_", "NUMBER", "If", "you", "input", "a", "char", "like", "\u00e9", "or", "\u00e3", "with", "terminalAdapter", "in", "log", "method", "str", "NUMBER", "format", "if", "no", "unicode", "NUMBER", "format", "raise", "a", "error", "NUMBER", "To", "reproduce", "just", "clone", "master", "and", "run", "with", "IN", "OUT", "use", "TerminalAdapter", "NUMBER", "Thanks", "sponse", "and", "setting", "to", "lower", "case", "fuzz", "NUMBER", "ratio", "sometimes", "the", "be", "not", "close", "enough", "to", "the", "right", "answer", "my", "point", "of", "view", "NUMBER", "I", "be", "build", "own", "approximate", "sentence", "matching", "logic", "adapter", "which", "uses", "Jaccard", "index", "NUMBER", "I", "create", "it", "under", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "logic", "logic_Adapter", "NUMBER", "py", "NUMBER", "It", "shows", "me", "error", "like", "this", "NUMBER", "confidence", "response", "self", "NUMBER", "logic", "NUMBER", "process", "input_statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "logic", "multi_adapter", "NUMBER", "py", "line", "NUMBER", "in", "process", "confidence", "output", "adapter", "NUMBER", "process", "statement", "TypeError", "NoneType", "object", "be", "not", "iterable", "My", "Source", "code", "be", "NUMBER", "Imports", "import", "nltk", "NUMBER", "corpus", "import", "nltk", "NUMBER", "tokenize", "NUMBER", "punkt", "import", "nltk", "NUMBER", "em", "NUMBER", "snowball", "from", "nltk", "NUMBER", "corpus", "import", "wordnet", "import", "string", "from", "chatterbot", "NUMBER", "adapters", "import", "Adapter", "class", "LogicAdapter", "Adapter", "This", "be", "an", "abstract", "class", "that", "represents", "the", "interface", "that", "all", "logic", "adapters", "should", "implement", "NUMBER", "def", "can_process", "self", "statement", "A", "preliminary", "check", "that", "be", "call", "to", "determine", "if", "a", "logic", "adapter", "can", "process", "a", "given", "statement", "NUMBER", "By", "default", "this", "method", "returns", "true", "but", "it", "can", "be", "overridden", "in", "child", "classes", "as", "needed", "NUMBER", "return", "True", "def", "process", "self", "statement", "Method", "that", "takes", "an", "input", "statement", "and", "returns", "a", "confidence", "value", "and", "a", "statement", "as", "output", "NUMBER", "raise", "self", "NUMBER", "AdapterMethodNotImplementedError", "Get", "default", "English", "stopwords", "and", "extend", "with", "punctuation", "stopwords", "nltk", "NUMBER", "corpus", "NUMBER", "opwords", "NUMBER", "words", "english", "stopwords", "NUMBER", "extend", "string", "NUMBER", "punctuation", "stopwords", "NUMBER", "append", "def", "get_wordnet_pos", "pos_tag", "if", "pos_tag", "NUMBER", "NUMBER", "artswith", "J", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "ADJ", "elif", "pos_tag", "NUMBER", "NUMBER", "artswith", "V", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "VERB", "elif", "pos_tag", "NUMBER", "NUMBER", "artswith", "N", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "NOUN", "elif", "pos_tag", "NUMBER", "NUMBER", "artswith", "R", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "ADV", "else", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "NOUN", "Create", "tokenizer", "and", "stemmer", "tokenizer", "nltk", "NUMBER", "tokenize", "NUMBER", "word_tokenize", "lemmatizer", "nltk", "NUMBER", "em", "NUMBER", "wordnet", "NUMBER", "WordNetLemmatizer", "def", "is_ci_lemma_stopword_set_match", "a", "b", "threshold", "NUMBER", "Check", "if", "a", "and", "b", "be", "matches", "NUMBER", "pos_a", "map", "get_wordnet_pos", "nltk", "NUMBER", "pos_tag", "tokenizer", "NUMBER", "nltk", "NUMBER", "tokenize", "NUMBER", "word_tokenize", "a", "pos_b", "map", "get_wordnet_pos", "nltk", "NUMBER", "pos_tag", "tokenizer", "NUMBER", "nltk", "NUMBER", "tokenize", "NUMBER", "word_tokenize", "b", "lemmae_a", "lemmatizer", "NUMBER", "lemmatize", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "pos", "for", "token", "pos", "in", "pos_a", "if", "pos", "wordnet", "NUMBER", "NOUN", "and", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "not", "in", "stopwords", "lemmae_b", "lemmatizer", "NUMBER", "lemmatize", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "pos", "for", "token", "pos", "in", "pos_b", "if", "pos", "wordnet", "NUMBER", "NOUN", "and", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "not", "in", "stopwords", "Calculate", "Jaccard", "similarity", "ratio", "len", "set", "lemmae_a", "NUMBER", "intersection", "lemmae_b", "float", "len", "set", "lemmae_a", "NUMBER", "union", "lemmae_b", "return", "ratio", "threshold", "def", "get", "self", "input_statement", "Takes", "a", "statement", "string", "and", "a", "list", "of", "statement", "strings", "NUMBER", "Returns", "the", "approximate", "matching", "statement", "from", "the", "list", "NUMBER", "statement_list", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "get_response_statements", "print", "statement_list", "if", "not", "statement_list", "if", "self", "NUMBER", "has_storage_context", "Use", "a", "randomly", "pick", "statement", "self", "NUMBER", "logger", "NUMBER", "info", "u", "No", "statements", "have", "know", "responses", "NUMBER", "u", "Choosing", "a", "random", "response", "to", "return", "NUMBER", "return", "NUMBER", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "get_random", "else", "raise", "self", "NUMBER", "EmptyDatasetException", "confidence", "NUMBER", "closest_match", "input_statement", "Find", "the", "closest", "matching", "know", "statement", "for", "statement", "in", "statement_list", "print", "statement", "statement", "NUMBER", "text", "ratio", "fuzz", "NUMBER", "ratio", "input_statement", "NUMBER", "text", "statement", "NUMBER", "text", "ratio", "is_ci_lemma_stopword_set_match", "input_statement", "NUMBER", "text", "statement", "NUMBER", "text", "if", "ratio", "confidence", "confidence", "ratio", "closest_match", "statement", "Convert", "the", "confidence", "integer", "to", "a", "percent", "confidence", "NUMBER", "return", "confidence", "closest_match", "class", "EmptyDatasetException", "Exception", "def", "__init__", "self", "value", "An", "empty", "set", "was", "received", "when", "at", "least", "one", "statement", "was", "expected", "NUMBER", "self", "NUMBER", "value", "value", "def", "__str__", "self", "return", "repr", "self", "NUMBER", "value", "Thank", "you", "gunthercox", "well", "i", "have", "workout", "much", "and", "change", "something", "code", "utf", "NUMBER", "from", "NUMBER", "base_match", "import", "BaseMatchAdapter", "from", "fuzzywuzzy", "import", "fuzz", "import", "nltk", "NUMBER", "corpus", "import", "nltk", "NUMBER", "tokenize", "NUMBER", "punkt", "import", "nltk", "NUMBER", "em", "NUMBER", "snowball", "from", "nltk", "NUMBER", "corpus", "import", "wordnet", "import", "string", "class", "ApproximateSentenceMatchAdapter", "BaseMatchAdapter", "The", "Jaccard", "index", "be", "composed", "of", "a", "numerator", "and", "denominator", "NUMBER", "In", "the", "numerator", "we", "count", "the", "number", "of", "items", "that", "be", "shared", "between", "the", "sets", "NUMBER", "In", "the", "denominator", "we", "count", "the", "total", "number", "of", "items", "across", "both", "sets", "NUMBER", "In", "our", "example", "our", "intersection", "be", "cat", "hungry", "which", "has", "count", "of", "two", "NUMBER", "The", "union", "of", "the", "sets", "be", "young", "cat", "very", "hungry", "which", "has", "a", "count", "of", "four", "NUMBER", "Therefore", "our", "Jaccard", "similarity", "index", "be", "two", "divided", "by", "four", "or", "NUMBER", "NUMBER", "Given", "our", "threshold", "above", "we", "would", "consider", "this", "to", "be", "a", "match", "def", "__init__", "self", "kwargs", "super", "ApproximateSentenceMatchAdapter", "self", "NUMBER", "__init__", "kwargs", "self", "NUMBER", "is_ci_lemma_stopword_set_match", "self", "NUMBER", "get_wordnet_pos", "Get", "default", "English", "stopwords", "and", "extend", "with", "punctuation", "self", "NUMBER", "opwords", "nltk", "NUMBER", "corpus", "NUMBER", "opwords", "NUMBER", "words", "english", "self", "NUMBER", "opwords", "NUMBER", "extend", "string", "NUMBER", "punctuation", "self", "NUMBER", "opwords", "NUMBER", "append", "self", "NUMBER", "lemmatizer", "nltk", "NUMBER", "em", "NUMBER", "wordnet", "NUMBER", "WordNetLemmatizer", "def", "get_wordnet_pos", "self", "pos_tag", "if", "pos_tag", "NUMBER", "NUMBER", "artswith", "J", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "ADJ", "elif", "pos_tag", "NUMBER", "NUMBER", "artswith", "V", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "VERB", "elif", "pos_tag", "NUMBER", "NUMBER", "artswith", "N", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "NOUN", "elif", "pos_tag", "NUMBER", "NUMBER", "artswith", "R", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "ADV", "else", "return", "pos_tag", "NUMBER", "wordnet", "NUMBER", "NOUN", "def", "is_ci_lemma_stopword_set_match", "self", "a", "b", "threshold", "NUMBER", "Check", "if", "a", "and", "b", "be", "matches", "NUMBER", "print", "ask", "a", "ratio", "NUMBER", "pos_a", "map", "self", "NUMBER", "get_wordnet_pos", "nltk", "NUMBER", "pos_tag", "nltk", "NUMBER", "tokenize", "NUMBER", "word_tokenize", "a", "pos_b", "map", "self", "NUMBER", "get_wordnet_pos", "nltk", "NUMBER", "pos_tag", "nltk", "NUMBER", "tokenize", "NUMBER", "word_tokenize", "b", "lemmae_a", "self", "NUMBER", "lemmatizer", "NUMBER", "lemmatize", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "pos", "for", "token", "pos", "in", "pos_a", "if", "pos", "wordnet", "NUMBER", "NOUN", "and", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "not", "in", "self", "NUMBER", "opwords", "lemmae_b", "self", "NUMBER", "lemmatizer", "NUMBER", "lemmatize", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "pos", "for", "token", "pos", "in", "pos_b", "if", "pos", "wordnet", "NUMBER", "NOUN", "and", "token", "NUMBER", "lower", "NUMBER", "rip", "string", "NUMBER", "punctuation", "not", "in", "self", "NUMBER", "opwords", "Calculate", "Jaccard", "similarity", "try", "ratio", "len", "set", "lemmae_a", "NUMBER", "intersection", "lemmae_b", "float", "len", "set", "lemmae_a", "NUMBER", "union", "lemmae_b", "except", "Exception", "as", "e", "print", "Error", "e", "return", "ratio", "threshold", "def", "get", "self", "input_statement", "Takes", "a", "statement", "string", "and", "a", "list", "of", "statement", "strings", "NUMBER", "Returns", "the", "closest", "matching", "statement", "from", "the", "list", "NUMBER", "statement_list", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "get_response_statements", "if", "not", "statement_list", "if", "self", "NUMBER", "has_storage_context", "Use", "a", "randomly", "pick", "statement", "return", "NUMBER", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "get_random", "else", "raise", "self", "NUMBER", "EmptyDatasetException", "confidence", "NUMBER", "closest_match", "input_statement", "Find", "the", "closest", "matching", "know", "statement", "for", "statement", "in", "statement_list", "ratio", "self", "NUMBER", "is_ci_lemma_stopword_set_match", "input_statement", "NUMBER", "text", "statement", "NUMBER", "text", "if", "ratio", "confidence", "NUMBER", "closest_match", "statement", "closest_match", "confidence", "process", "NUMBER", "extractOne", "input_statement", "NUMBER", "text", "text_of_all_statements", "Convert", "the", "confidence", "integer", "to", "a", "percent", "confidence", "NUMBER", "if", "closest_match", "input_statement", "closest_match", "NUMBER", "text", "We", "couldn", "t", "find", "that", "answer", "in", "our", "knowledge", "base", "NUMBER", "Try", "other", "return", "confidence", "closest_match", "I", "can", "t", "use", "the", "closest", "match", "adapter", "because", "if", "the", "sentence", "contains", "How", "be", "you", "doing", "and", "How", "you", "doing", "It", "returns", "same", "result", "so", "i", "use", "this", "one", "NUMBER", "well", "i", "implement", "the", "jaccard", "index", "logic", "i", "find", "it", "to", "have", "better", "performance", "NUMBER", "I", "have", "made", "a", "pull", "request", "you", "can", "have", "a", "look", "LINK", "url", "gunthercox", "please", "check", "this", "pull", "request", "NUMBER", "See", "NUMBER", "for", "details", "NUMBER", "Small", "patch", "to", "pass", "through", "extra_data", "from", "the", "original", "input", "statement", "NUMBER", "This", "be", "useful", "for", "knowing", "where", "how", "to", "respond", "who", "asked", "the", "original", "question", "etc", "NUMBER", "Not", "sure", "if", "there", "be", "a", "bug", "or", "intended", "but", "in", "chatterbot", "NUMBER", "py", "the", "following", "code", "implies", "that", "any", "extra_data", "that", "comes", "in", "on", "a", "statement", "that", "be", "_also_", "on", "an", "exist", "statement", "loses", "the", "extra_data", "of", "the", "input", "statement", "NUMBER", "In", "my", "case", "I", "have", "an", "input", "adapter", "for", "Slack", "and", "I", "m", "add", "things", "like", "the", "user", "id", "and", "the", "channel", "the", "question", "came", "from", "but", "I", "also", "have", "some", "training", "data", "and", "the", "extra", "info", "be", "be", "drop", "NUMBER", "LINK", "L", "NUMBER", "I", "think", "the", "extra_data", "should", "be", "propagated", "to", "the", "statement", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "NUMBER", "run", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "read_only", "True", "File", "home", "nikhil", "PycharmProjects", "chatterbot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "orage", "StorageAdapterClass", "kwargs", "File", "home", "nikhil", "PycharmProjects", "chatterbot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "adapters", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "atements", "NUMBER", "create_index", "text", "unique", "True", "File", "home", "nikhil", "PycharmProjects", "chatterbot", "lib", "python", "NUMBER", "site", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "create_index", "self", "NUMBER", "__create_index", "keys", "kwargs", "File", "home", "nikhil", "PycharmProjects", "chatterbot", "lib", "python", "NUMBER", "site", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "__create_index", "sock_info", "cmd", "read_preference", "ReadPreference", "NUMBER", "PRIMARY", "File", "home", "nikhil", "PycharmProjects", "chatterbot", "lib", "python", "NUMBER", "site", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "_command", "read_concern", "read_concern", "File", "home", "nikhil", "PycharmProjects", "chatterbot", "lib", "python", "NUMBER", "site", "package", "pymongo", "pool", "NUMBER", "py", "line", "NUMBER", "in", "command", "read_concern", "File", "home", "nikhil", "PycharmProjects", "chatterbot", "lib", "python", "NUMBER", "site", "package", "pymongo", "network", "NUMBER", "py", "line", "NUMBER", "in", "command", "helpers", "NUMBER", "_check_command_response", "response_doc", "None", "allowable_errors", "File", "home", "nikhil", "PycharmProjects", "chatterbot", "lib", "python", "NUMBER", "site", "package", "pymongo", "helpers", "NUMBER", "py", "line", "NUMBER", "in", "_check_command_response", "raise", "OperationFailure", "msg", "errmsg", "code", "response", "pymongo", "NUMBER", "error", "NUMBER", "OperationFailure", "WiredTigerIndex", "insert", "key", "too", "large", "to", "index", "fail", "NUMBER", "First", "of", "all", "basement", "sales", "like", "tonight", "aren", "t", "gonna", "last", "much", "longer", "NUMBER", "It", "s", "too", "risky", "one", "and", "two", "everything", "s", "going", "on", "the", "internet", "NUMBER", "Anyone", "wi", "NUMBER", "Long", "sentences", "cause", "error", "NUMBER", "nikhil", "pandey", "Exactly", "what", "code", "you", "executed", "which", "resulted", "that", "error", "navyad", "I", "was", "training", "the", "bot", "NUMBER", "It", "happens", "when", "there", "be", "long", "sentences", "that", "exceed", "the", "mongodb", "s", "index", "limit", "NUMBER", "Happened", "with", "me", "too", "NUMBER", "I", "had", "to", "split", "long", "replies", "only", "taking", "first", "sentence", "or", "discarding", "it", "if", "it", "s", "too", "long", "but", "it", "s", "still", "a", "bad", "solution", "imho", "Is", "there", "a", "way", "to", "only", "learn", "based", "on", "conversations", "that", "be", "marked", "I", "m", "integrating", "Chatterbot", "with", "a", "bot", "I", "m", "build", "for", "Slack", "and", "I", "want", "to", "use", "Slack", "reactions", "as", "a", "way", "of", "giving", "feedback", "to", "the", "bot", "as", "to", "the", "correctness", "of", "the", "conversation", "NUMBER", "I", "know", "there", "be", "a", "read", "only", "mode", "but", "this", "be", "slightly", "different", "NUMBER", "Thanks", "for", "the", "great", "tool", "gunthercox", "yeah", "I", "d", "like", "that", "NUMBER", "Given", "conversations", "aren", "t", "threaded", "in", "Slack", "I", "m", "doing", "some", "additional", "work", "to", "try", "to", "correlate", "the", "question", "I", "m", "trying", "to", "answer", "and", "the", "responses", "from", "the", "chatterbot", "NUMBER", "FWIW", "I", "don", "t", "think", "my", "use", "case", "be", "straight", "up", "chat", "NUMBER", "It", "s", "more", "like", "Q", "A", "bot", "where", "I", "eventually", "only", "want", "to", "learn", "and", "answer", "specific", "question", "interactions", "NUMBER", "You", "can", "see", "my", "_total_", "work", "in", "progress", "at", "LINK", "That", "be", "said", "in", "about", "NUMBER", "hours", "of", "work", "thanks", "to", "this", "tool", "I", "m", "able", "to", "get", "somewhat", "decent", "results", "NUMBER", "YMMV", "NUMBER", "BTW", "gunthercox", "I", "reworked", "to", "make", "the", "slack", "connectors", "use", "Input", "OutputAdapters", "if", "you", "want", "I", "can", "make", "a", "Pull", "Request", "to", "fold", "them", "in", "upstream", "NUMBER", "gsingers", "this", "be", "exactly", "what", "I", "was", "looking", "for", "NUMBER", "Are", "you", "use", "Slack", "RTM", "gunthercox", "I", "ll", "try", "to", "get", "a", "PR", "up", "soon", "NUMBER", "davizucon", "see", "the", "link", "above", "to", "RTFMbot", "NUMBER", "gunthercox", "I", "ve", "looked", "through", "the", "code", "not", "sure", "I", "see", "where", "the", "training", "be", "happening", "NUMBER", "Can", "you", "point", "me", "at", "it", "I", "be", "pretty", "new", "to", "code", "in", "Python", "even", "at", "Github", "be", "new", "to", "me", "NUMBER", "Does", "anyone", "know", "if", "there", "be", "a", "adapter", "for", "orientDB", "How", "can", "I", "implement", "this", "I", "believe", "there", "be", "not", "orientDB", "adapter", "by", "the", "way", "OrientDB", "looks", "awesome", "To", "implement", "you", "should", "take", "a", "look", "at", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "JsonFileStorageAdapter", "as", "a", "example", "NUMBER", "I", "can", "come", "up", "with", "many", "reasons", "to", "have", "a", "OrientDB", "adapter", "NUMBER", "I", "better", "figure", "out", "how", "to", "do", "this", "NUMBER", "seems", "like", "this", "could", "worth", "the", "effort", "NUMBER", "I", "will", "start", "looking", "on", "how", "JsonFileStorageAdapter", "works", "NUMBER", "I", "be", "new", "to", "Python", "so", "it", "may", "take", "a", "while", "NUMBER", "but", "worth", "the", "effort", "NUMBER", "Any", "advice", "or", "insight", "would", "be", "appreciated", "Thanks", "Hi", "Craz", "NUMBER", "Coyote", "I", "m", "now", "work", "on", "integration", "with", "SQLAlchemy", "instead", "of", "specific", "DB", "the", "main", "reason", "have", "SQLAlchemy", "dependency", "be", "to", "be", "database", "agnostic", "NUMBER", "BUT", "OrientDB", "have", "a", "very", "specific", "API", "so", "like", "mongoDB", "must", "have", "its", "own", "Adapter", "NUMBER", "Maybe", "we", "can", "made", "this", "effort", "together", "gunthercox", "have", "any", "IRC", "or", "Slack", "channel", "gunthercox", "great", "Can", "add", "my", "github", "mail", "to", "the", "team", "davizucon", "I", "think", "together", "we", "can", "probably", "get", "it", "do", "NUMBER", "just", "a", "reminder", "I", "be", "very", "new", "to", "Python", "and", "even", "githhub", "NUMBER", "I", "came", "from", "Borland", "Pascall", "an", "C", "I", "use", "to", "write", "real", "time", "day", "trading", "apps", "based", "on", "satellite", "many", "years", "ago", "NUMBER", "I", "decided", "to", "get", "up", "to", "speed", "with", "python", "by", "use", "this", "project", "as", "I", "have", "a", "lot", "of", "time", "on", "my", "hands", "NUMBER", "I", "be", "a", "disabled", "retired", "U", "NUMBER", "S", "NUMBER", "Navy", "NUMBER", "So", "if", "you", "can", "bear", "with", "me", "get", "up", "to", "speed", "NUMBER", "I", "be", "more", "then", "willing", "to", "spend", "my", "time", "on", "Gunthercox", "awesome", "work", "and", "help", "NUMBER", "Craz", "NUMBER", "Coyote", "Sure", "we", "all", "learning", "here", "don", "t", "worry", "about", "speed", "the", "constant", "help", "be", "more", "important", "NUMBER", "gunthercox", "You", "be", "right", "NUMBER", "No", "problem", "but", "I", "made", "a", "bot", "use", "slack", "Add", "Bot", "To", "Slack", "LINK", "incoming", "webhook", "commands", "bot", "client_id", "NUMBER", "now", "its", "off", "line", "NUMBER", "But", "will", "be", "on", "line", "soon", "NUMBER", "Would", "be", "great", "letting", "this", "bot", "be", "test", "by", "us", "NUMBER", "Sounds", "good", "to", "me", "NUMBER", "I", "will", "start", "putting", "effort", "in", "orientDB", "and", "then", "I", "m", "planning", "on", "filling", "it", "with", "data", "NUMBER", "I", "m", "currently", "add", "dragonfly", "connected", "to", "nuance", "speech", "to", "ChatterBot", "NUMBER", "What", "API", "should", "I", "go", "with", "Tinkerpop", "Hi", "Craz", "NUMBER", "Coyote", "I", "think", "Tinkerpop", "be", "write", "in", "Java", "I", "dunno", "if", "Tinkerpop", "act", "as", "server", "or", "as", "client", "library", "embed", "in", "NUMBER", "If", "Tinkerpop", "run", "as", "a", "server", "I", "think", "the", "effort", "write", "to", "Tinkerpop", "or", "OrientDB", "will", "be", "the", "same", "it", "s", "just", "a", "matter", "of", "knowing", "API", "calls", "for", "both", "NUMBER", "I", "believe", "if", "you", "write", "an", "adapter", "especific", "for", "OrientDB", "then", "you", "will", "be", "more", "familiar", "with", "chatterbot", "structure", "and", "write", "for", "Tinkerpop", "should", "be", "straightforward", "NUMBER", "Sorry", "I", "dnt", "know", "well", "how", "Tinkerpop", "works", "NUMBER", "Best", "Fix", "argument", "input_statement", "statement_list", "for", "most_frequent_response", "and", "setting", "to", "lower", "case", "fuzz", "NUMBER", "ratio", "sometimes", "the", "be", "not", "close", "enough", "to", "the", "right", "answer", "my", "point", "of", "view", "NUMBER", "Hello", "gunthercox", "Sure", "and", "sorry", "already", "fix", "here", "I", "ll", "submit", "again", "soon", "NUMBER", "Hi", "I", "down", "know", "if", "be", "new", "but", "str", "NUMBER", "format", "input_statement", "NUMBER", "text", "have", "problem", "with", "accents", "chars", "NUMBER", "I", "think", "the", "problem", "occur", "only", "in", "TerminalAdapter", "Thanks", "Davi", "Hi", "gunthercox", "If", "you", "input", "a", "char", "like", "\u00e9", "or", "\u00e3", "with", "terminalAdapter", "in", "log", "method", "it", "uses", "str", "NUMBER", "format", "if", "no", "unicode", "NUMBER", "format", "raise", "a", "error", "NUMBER", "To", "reproduce", "just", "clone", "master", "and", "run", "with", "IN", "OUT", "use", "TerminalAdapter", "NUMBER", "Thanks", "Davi", "gunthercox", "I", "ll", "submit", "this", "fix", "again", "there", "be", "a", "lot", "code", "change", "here", "I", "ll", "clean", "up", "NUMBER", "Hi", "If", "I", "choose", "most_frequent_response", "chatterbot", "adapters", "logic", "mixins", "NUMBER", "py", "NUMBER", "pass", "only", "one", "argument", "but", "get_most_frequent_response", "expect", "NUMBER", "Thanks", "Davi", "Could", "you", "elaborate", "your", "issue", "a", "bit", "more", "If", "you", "instantiate", "a", "TieBreaking", "class", "and", "call", "get_most_frequent_response", "the", "method", "expects", "NUMBER", "argument", "not", "NUMBER", "However", "I", "don", "t", "see", "most_frequent_response", "method", "in", "the", "TieBreaking", "class", "NUMBER", "Where", "be", "you", "calling", "it", "Hi", "Sorry", "about", "that", "I", "m", "setting", "chatbot", "ChatBot", "NUMBER", "tie_breaking_method", "most_frequent_response", "NUMBER", "I", "created", "a", "pull", "request", "NUMBER", "see", "if", "its", "ok", "for", "you", "NUMBER", "Thanks", "It", "s", "alright", "NUMBER", "I", "m", "still", "new", "to", "this", "project", "and", "learning", "about", "how", "this", "all", "works", "NUMBER", "By", "the", "way", "do", "you", "know", "if", "this", "project", "has", "any", "IRC", "channel", "or", "any", "communication", "mean", "to", "reach", "out", "to", "the", "contributors", "slin", "NUMBER", "I", "m", "new", "too", "NUMBER", "Great", "question", "IRC", "or", "Slack", "be", "very", "straightforward", "NUMBER", "We", "should", "ask", "to", "gunthercox", "if", "there", "be", "any", "NUMBER", "Hello", "gunthercox", "be", "there", "like", "a", "IRC", "channel", "or", "Slack", "for", "this", "project", "Thanks", "NUMBER", "count", "self", "NUMBER", "count", "random_integer", "randint", "NUMBER", "count", "NUMBER", "NUMBER", "if", "self", "NUMBER", "count", "TAG", "in", "TAG", "NUMBER", "random", "NUMBER", "randint", "NUMBER", "count", "NUMBER", "usr", "lib", "python", "NUMBER", "random", "NUMBER", "pyc", "in", "randint", "self", "a", "b", "NUMBER", "NUMBER", "NUMBER", "return", "self", "NUMBER", "randrange", "a", "b", "NUMBER", "NUMBER", "NUMBER", "def", "_randbelow", "self", "n", "_log", "_log", "_int", "int", "_maxwidth", "NUMBER", "L", "TAG", "NUMBER", "raise", "ValueError", "empty", "range", "for", "randrange", "d", "d", "d", "istart", "istop", "width", "NUMBER", "NUMBER", "Non", "unit", "step", "argument", "supplied", "NUMBER", "ValueError", "empty", "range", "for", "randrange", "NUMBER", "NUMBER", "NUMBER", "same", "error", "with", "all", "values", "less", "than", "NUMBER", "e", "NUMBER", "g", "NUMBER", "count", "NUMBER", "I", "have", "created", "a", "simple", "Flask", "app", "use", "ChatterBot", "LINK", "chatterbot", "that", "would", "be", "a", "great", "starter", "template", "for", "anyone", "who", "uses", "Flask", "instead", "of", "Django", "NUMBER", "So", "I", "thought", "it", "might", "be", "helpful", "to", "leave", "a", "link", "to", "it", "alongside", "the", "Django", "example", "in", "the", "readme", "NUMBER", "I", "will", "also", "add", "NUMBER", "more", "patches", "for", "the", "other", "readme", "file", "in", "different", "languages", "if", "this", "patch", "be", "accepted", "NUMBER", "Hi", "There", "be", "a", "miss", "in", "file", "chatterbot", "corpus", "data", "Portuguese", "linguisticKnowledge_pt", "BR", "NUMBER", "json", "NUMBER", "NUMBER", "Thanks", "Closes", "NUMBER", "gunthercox", "sure", "NUMBER", "minor", "typo", "gunthercox", "I", "would", "like", "to", "work", "in", "this", "if", "somebody", "be", "not", "already", "work", "on", "it", "NUMBER", "gunthercox", "Thanks", "NUMBER", "navyad", "Any", "news", "I", "see", "the", "sqlite", "fork", "but", "it", "still", "says", "wip", "NUMBER", "Any", "eta", "Just", "curious", "NUMBER", "Nixellion", "development", "be", "going", "on", "here", "LINK", "adapter", "NUMBER", "davizucon", "has", "taken", "over", "this", "issue", "NUMBER", "thanks", "for", "info", "Hi", "Nixellion", "thanks", "for", "ask", "by", "the", "way", "the", "storage", "adapter", "use", "SQLalchemy", "NUMBER", "There", "be", "a", "few", "test", "not", "passing", "when", "everything", "ok", "I", "ll", "make", "a", "PR", "for", "beta", "NUMBER", "Feel", "free", "to", "ask", "and", "suggestions", "NUMBER", "Nice", "to", "see", "this", "integrated", "ASAP", "davizucon", "I", "see", "All", "test", "passing", "commit", "message", "NUMBER", "What", "about", "pull", "request", "Hi", "rajasimon", "Yes", "but", "I", "don", "t", "fell", "confidence", "enough", "to", "delivery", "NUMBER", "I", "ll", "need", "to", "do", "some", "more", "test", "against", "others", "databases", "SQLite", "default", "and", "do", "MySQL", "in", "progress", "and", "PostgreSQL", "in", "progress", "to", "see", "if", "there", "be", "any", "issue", "NUMBER", "By", "the", "way", "what", "you", "think", "All", "parameters", "be", "optional", "except", "storage_adapter", "chatbot", "ChatBot", "NUMBER", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "SQLAlchemyDatabaseAdapter", "database_uri", "sqlite", "database_test", "NUMBER", "db", "use", "database_uri", "or", "database", "database_uri", "can", "be", "especified", "to", "choose", "database", "driver", "database", "database_test", "use", "for", "sqlite", "database", "NUMBER", "Ignored", "if", "database_uri", "especified", "NUMBER", "read_only", "False", "Readonly", "database", "Default", "False", "drop_create", "True", "To", "recreate", "database", "every", "start", "read_olny", "must", "be", "False", "Default", "False", "Hi", "davizucon", "Thanks", "for", "the", "reply", "and", "I", "tried", "your", "code", "NUMBER", "Anyway", "here", "be", "my", "thought", "on", "the", "first", "run", "NUMBER", "Can", "you", "make", "sure", "chatterbot", "NUMBER", "orage", "NUMBER", "SQLAlchemyDatabaseAdapter", "And", "in", "sqlalchemy", "NUMBER", "py", "why", "you", "hideout", "NUMBER", "and", "NUMBER", "line", "Also", "I", "don", "t", "think", "you", "don", "t", "need", "primary_key", "True", "in", "text", "NUMBER", "Just", "id", "Column", "Integer", "primary_key", "True", "be", "enough", "NUMBER", "And", "I", "don", "t", "see", "any", "other", "run", "issue", "now", "NUMBER", "If", "anything", "comes", "up", "I", "will", "let", "you", "know", "NUMBER", "Hi", "rajasimon", "thanks", "for", "addition", "I", "ll", "check", "out", "primary_key", "and", "run", "the", "test", "with", "the", "change", "NUMBER", "Ok", "ok", "I", "ll", "make", "a", "PR", "for", "gunthercox", "master", "I", "ll", "suggest", "for", "this", "feature", "remains", "in", "alpha", "stage", "until", "we", "make", "appropriate", "documentation", "and", "further", "test", "NUMBER", "Hi", "gunthercox", "I", "see", "NUMBER", "Sorry", "for", "delay", "to", "delivery", "tough", "days", "NUMBER", "I", "have", "based", "these", "tables", "on", "the", "actual", "JSON", "structure", "and", "I", "believe", "in", "the", "near", "future", "maybe", "in", "the", "next", "PR", "I", "will", "change", "table", "design", "NUMBER", "So", "keep", "training", "data", "somewhere", "that", "you", "can", "enter", "again", "NUMBER", "add", "SQLite", "be", "easy", "to", "enter", "data", "because", "ANSI", "SQL", "be", "kind", "of", "standard", "and", "easily", "manipulated", "By", "the", "way", "there", "be", "another", "approach", "and", "can", "be", "developed", "in", "parallel", "with", "SQLite", "tinydb", "be", "a", "lightweight", "document", "oriented", "database", "optimized", "imo", "have", "more", "glue", "with", "actual", "JSON", "NUMBER", "What", "you", "think", "gunthercox", "rajasimon", "If", "you", "think", "that", "can", "bring", "performance", "and", "search", "flexibility", "that", "REALLY", "matters", "let", "s", "start", "another", "issue", "thread", "them", "we", "can", "contribute", "NUMBER", "there", "be", "any", "way", "to", "see", "exemple", "use", "sqlalchemy", "Thank", "you", "to", "everyone", "who", "has", "contributed", "to", "the", "creation", "of", "the", "SQL", "Storage", "adapter", "JSONDecodeError", "Traceback", "most", "recent", "call", "last", "TAG", "in", "TAG", "NUMBER", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "french", "home", "vince", "workspace", "test", "env", "lib", "python", "NUMBER", "site", "package", "chatterbot", "trainers", "NUMBER", "py", "in", "train", "self", "corpora", "NUMBER", "NUMBER", "for", "corpus", "in", "corpora", "NUMBER", "corpus_data", "self", "NUMBER", "corpus", "NUMBER", "load_corpus", "corpus", "NUMBER", "for", "data", "in", "corpus_data", "NUMBER", "for", "pair", "in", "data", "home", "vince", "workspace", "test", "env", "lib", "python", "NUMBER", "site", "package", "chatterbot", "corpus", "corpus", "NUMBER", "py", "in", "load_corpus", "self", "dotted_path", "NUMBER", "NUMBER", "for", "file_path", "in", "data_file_paths", "NUMBER", "corpus", "self", "NUMBER", "read_corpus", "file_path", "NUMBER", "NUMBER", "for", "key", "in", "list", "corpus", "NUMBER", "keys", "home", "vince", "workspace", "test", "env", "lib", "python", "NUMBER", "site", "package", "chatterbot", "corpus", "corpus", "NUMBER", "py", "in", "read_corpus", "self", "file_name", "NUMBER", "NUMBER", "with", "io", "NUMBER", "open", "file_name", "encoding", "utf", "NUMBER", "as", "data_file", "NUMBER", "data", "json", "NUMBER", "load", "data_file", "NUMBER", "return", "data", "NUMBER", "usr", "lib", "python", "NUMBER", "json", "__init__", "NUMBER", "py", "in", "load", "fp", "cls", "object_hook", "parse_float", "parse_int", "parse_constant", "object_pairs_hook", "kw", "NUMBER", "cls", "cls", "object_hook", "object_hook", "NUMBER", "parse_float", "parse_float", "parse_int", "parse_int", "NUMBER", "parse_constant", "parse_constant", "object_pairs_hook", "object_pairs_hook", "kw", "NUMBER", "NUMBER", "usr", "lib", "python", "NUMBER", "json", "__init__", "NUMBER", "py", "in", "loads", "s", "encoding", "cls", "object_hook", "parse_float", "parse_int", "parse_constant", "object_pairs_hook", "kw", "NUMBER", "parse_int", "be", "None", "and", "parse_float", "be", "None", "and", "NUMBER", "parse_constant", "be", "None", "and", "object_pairs_hook", "be", "None", "and", "not", "kw", "NUMBER", "return", "_default_decoder", "NUMBER", "decode", "s", "NUMBER", "if", "cls", "be", "None", "NUMBER", "cls", "JSONDecoder", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "in", "decode", "self", "s", "_w", "NUMBER", "NUMBER", "NUMBER", "obj", "end", "self", "NUMBER", "raw_decode", "s", "idx", "_w", "s", "NUMBER", "NUMBER", "end", "NUMBER", "end", "_w", "s", "end", "NUMBER", "end", "NUMBER", "if", "end", "len", "s", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "in", "raw_decode", "self", "s", "idx", "NUMBER", "obj", "end", "self", "NUMBER", "scan_once", "s", "idx", "NUMBER", "except", "StopIteration", "as", "err", "NUMBER", "raise", "JSONDecodeError", "Expecting", "value", "s", "err", "NUMBER", "value", "from", "None", "NUMBER", "return", "obj", "end", "JSONDecodeError", "Expecting", "value", "line", "NUMBER", "column", "NUMBER", "char", "NUMBER", "It", "should", "be", "relate", "with", "your", "json", "file", "format", "NUMBER", "Can", "you", "try", "validate", "with", "jsonlint", "LINK", "NUMBER", "thank", "you", "for", "the", "quick", "fix", "Traceback", "most", "recent", "call", "last", "File", "home", "local", "ALTERDATA", "erick", "NUMBER", "cirrus", "Desenvolvimento", "web", "karoo", "scripts", "chatterbot", "train_terminal_karoo", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "train", "conversacao", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "update", "self", "NUMBER", "atements", "NUMBER", "bulk_write", "operations", "ordered", "False", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "bulk_write", "bulk_api_result", "blk", "NUMBER", "execute", "self", "NUMBER", "write_concern", "NUMBER", "document", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "pymongo", "bulk", "NUMBER", "py", "line", "NUMBER", "in", "execute", "return", "self", "NUMBER", "execute_command", "sock_info", "generator", "write_concern", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "pymongo", "bulk", "NUMBER", "py", "line", "NUMBER", "in", "execute_command", "raise", "BulkWriteError", "full_result", "pymongo", "NUMBER", "error", "NUMBER", "BulkWriteError", "batch", "op", "error", "occur", "I", "get", "the", "same", "error", "NUMBER", "I", "m", "feeding", "bot", "NUMBER", "train", "NUMBER", "Here", "be", "my", "code", "NUMBER", "python", "def", "vk_train", "self", "global", "chatbot", "conversations", "list", "of", "final", "conversations", "first", "we", "need", "to", "parse", "vk_comments", "NUMBER", "txt", "file", "print", "Reading", "file", "with", "open", "vk_comments", "NUMBER", "txt", "r", "encoding", "utf", "NUMBER", "as", "datafile", "vk_comments", "datafile", "NUMBER", "read", "print", "Parsing", "file", "vk_dialogues", "vk_comments", "NUMBER", "split", "NEW_CONVERSATION", "n", "for", "dialog", "in", "vk_dialogues", "message", "dialog", "NUMBER", "split", "NEXT", "n", "filtered_messages", "for", "message", "in", "message", "if", "n", "in", "message", "message", "message", "NUMBER", "replace", "n", "if", "message", "and", "message", "filtered_messages", "NUMBER", "append", "message", "NUMBER", "lower", "conversations", "NUMBER", "append", "filtered_messages", "print", "Learning", "from", "file", "for", "conv", "in", "conversations", "chatbot", "NUMBER", "train", "conv", "So", "I", "have", "this", "huge", "file", "which", "be", "just", "a", "text", "file", "where", "I", "downloaded", "NUMBER", "i", "m", "not", "sure", "thousands", "of", "facebook", "vk", "NUMBER", "com", "comments", "and", "trying", "to", "use", "it", "to", "train", "the", "bot", "NUMBER", "I", "m", "splitting", "the", "file", "by", "tags", "NEW_CONVERSATION", "and", "NEXT", "into", "a", "bunch", "of", "lists", "and", "then", "feed", "each", "conversation", "one", "by", "one", "to", "the", "bot", "NUMBER", "train", "NUMBER", "Right", "now", "I", "think", "that", "maybe", "I", "need", "to", "wait", "between", "chatbot", "NUMBER", "train", "calls", "NUMBER", "Or", "somehow", "change", "this", "particular", "logic", "hm", "NUMBER", "It", "works", "for", "smaller", "file", "though", "python", "print", "Learning", "from", "file", "NUMBER", "len", "conversations", "conversations", "conversations_count", "len", "conversations", "for", "i", "conv", "in", "enumerate", "conversations", "print", "i", "out", "of", "conversations_count", "chatbot", "NUMBER", "train", "conv", "time", "NUMBER", "sleep", "NUMBER", "Using", "this", "code", "it", "do", "this", "TAG", "NUMBER", "out", "of", "NUMBER", "NUMBER", "out", "of", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "D", "Projects", "Python", "HomeAI", "homeAI", "NUMBER", "py", "line", "NUMBER", "in", "run", "self", "NUMBER", "vk_train", "File", "D", "Projects", "Python", "HomeAI", "homeAI", "NUMBER", "py", "line", "NUMBER", "in", "vk_train", "chatbot", "NUMBER", "train", "conv", "File", "D", "Projects", "Python", "HomeAI", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "File", "D", "Projects", "Python", "HomeAI", "chatterbot", "adapters", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "update", "self", "NUMBER", "atements", "NUMBER", "bulk_write", "operations", "ordered", "False", "File", "C", "Python", "NUMBER", "lib", "site", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "bulk_write", "bulk_api_result", "blk", "NUMBER", "execute", "self", "NUMBER", "write_concern", "NUMBER", "document", "File", "C", "Python", "NUMBER", "lib", "site", "package", "pymongo", "bulk", "NUMBER", "py", "line", "NUMBER", "in", "execute", "return", "self", "NUMBER", "execute_command", "sock_info", "generator", "write_concern", "File", "C", "Python", "NUMBER", "lib", "site", "package", "pymongo", "bulk", "NUMBER", "py", "line", "NUMBER", "in", "execute_command", "raise", "BulkWriteError", "full_result", "pymongo", "NUMBER", "error", "NUMBER", "BulkWriteError", "batch", "op", "error", "occur", "And", "no", "matter", "what", "wait", "i", "set", "it", "s", "always", "at", "NUMBER", "Checked", "what", "it", "be", "it", "be", "just", "a", "very", "long", "conversation", "NUMBER", "All", "other", "conversations", "be", "from", "NUMBER", "to", "NUMBER", "ish", "phrases", "NUMBER", "This", "one", "be", "NUMBER", "Will", "try", "to", "limit", "maximum", "number", "of", "phrases", "in", "conversation", "to", "NUMBER", "while", "parsing", "the", "file", "and", "see", "how", "that", "works", "NUMBER", "EDIT", "After", "limiting", "it", "to", "NUMBER", "maximum", "phrases", "in", "conversation", "it", "went", "up", "to", "NUMBER", "message", "but", "then", "throw", "the", "same", "error", "again", "NUMBER", "NUMBER", "th", "conversation", "was", "just", "NUMBER", "phrase", "long", "and", "before", "it", "there", "were", "NUMBER", "and", "NUMBER", "Hm", "thats", "weird", "NUMBER", "It", "seems", "that", "this", "appears", "on", "my", "windows", "desktop", "NUMBER", "but", "it", "do", "not", "on", "a", "Raspberry", "Pi", "NUMBER", "Either", "it", "s", "something", "to", "do", "with", "windows", "linux", "or", "maybe", "it", "s", "just", "that", "PC", "writes", "to", "the", "database", "to", "quickly", "and", "it", "fail", "This", "would", "be", "weird", "NUMBER", "I", "ve", "had", "a", "similar", "problem", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "Users", "chenjun", "git", "AI_ChatterBot", "chatterBot", "examples", "terminal_mongo_example", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "sports", "File", "Users", "chenjun", "git", "AI_ChatterBot", "chatterBot", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "trainer", "NUMBER", "train", "pair", "File", "Users", "chenjun", "git", "AI_ChatterBot", "chatterBot", "chatterbot", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "File", "Users", "chenjun", "git", "AI_ChatterBot", "chatterBot", "chatterbot", "adapters", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "update", "self", "NUMBER", "atements", "NUMBER", "bulk_write", "operations", "ordered", "False", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "pymongo", "collection", "NUMBER", "py", "line", "NUMBER", "in", "bulk_write", "bulk_api_result", "blk", "NUMBER", "execute", "self", "NUMBER", "write_concern", "NUMBER", "document", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "pymongo", "bulk", "NUMBER", "py", "line", "NUMBER", "in", "execute", "return", "self", "NUMBER", "execute_command", "sock_info", "generator", "write_concern", "File", "Library", "Frameworks", "Python", "NUMBER", "framework", "Versions", "NUMBER", "lib", "python", "NUMBER", "site", "package", "pymongo", "bulk", "NUMBER", "py", "line", "NUMBER", "in", "execute_command", "raise", "BulkWriteError", "full_result", "pymongo", "NUMBER", "error", "NUMBER", "BulkWriteError", "batch", "op", "error", "occur", "Yeah", "ill", "say", "it", "again", "that", "I", "NEVER", "saw", "this", "issue", "on", "Raspberry", "Pi", "NUMBER", "Raspbian", "linux", "os", "NUMBER", "With", "exactly", "same", "file", "NUMBER", "It", "just", "works", "there", "while", "on", "my", "i", "NUMBER", "windows", "machine", "it", "works", "NUMBER", "x", "faster", "but", "throw", "error", "I", "met", "the", "same", "error", "on", "my", "Mac", "OS", "NUMBER", "linguisticKnowledge_pt", "BR", "NUMBER", "json", "Line", "NUMBER", "miss", "comma", "NUMBER", "proverbs_pt", "BR", "NUMBER", "json", "Line", "NUMBER", "Minha", "namorada", "est", "NUMBER", "me", "evitando", "Minha", "namorada", "est\u00e1", "me", "evitando", "Line", "NUMBER", "needs", "remove", "last", "comma", "Hi", "gunthercox", "If", "use", "ClosestMeaningAdapter", "as", "logic_adapters", "then", "the", "output", "answers", "will", "not", "select", "from", "Corpus", "data", "answer", "part", "NUMBER", "The", "output", "shows", "the", "exact", "same", "as", "question", "part", "of", "course", "it", "be", "the", "Closest", "Meaning", "result", "NUMBER", "Thanks", "Thank", "you", "for", "ask", "Yes", "I", "created", "small", "simplified", "Chinese", "data", "file", "as", "attached", "hospitalQA", "NUMBER", "zip", "LINK", "Hi", "gunthercox", "Thank", "you", "for", "great", "work", "NUMBER", "ChatterBot", "be", "in", "very", "good", "quality", "and", "easy", "to", "use", "NUMBER", "After", "use", "for", "a", "while", "I", "find", "three", "issue", "which", "would", "like", "to", "discuss", "with", "you", "NUMBER", "NUMBER", "After", "add", "TheIDontKnowAdapter", "about", "code", "below", "if", "confidence", "TAG", "selected", "\u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0438", "\u043e", "\u0441\u0435\u0431\u0435", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "NUMBER", "adapter", "TAG", "selected", "The", "current", "time", "be", "NUMBER", "NUMBER", "AM", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "NUMBER", "adapter", "Using", "\u0440\u0430\u0441\u0441\u043a\u0430\u0436\u0438", "\u043e", "\u0441\u0435\u0431\u0435", "as", "a", "close", "match", "to", "\u0420\u0430\u0441\u0441\u043a\u0430\u0436\u0438", "\u043e", "\u0441\u0435\u0431\u0435", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "NUMBER", "adapter", "Breaking", "tie", "between", "NUMBER", "optimal", "responses", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "mixins", "Selecting", "first", "response", "from", "list", "of", "NUMBER", "options", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "NUMBER", "adapter", "Tie", "broken", "NUMBER", "Using", "Exterminate", "NUMBER", "INFO", "chatterbot", "NUMBER", "adapters", "NUMBER", "adapter", "TAG", "selected", "Exterminate", "NUMBER", "as", "a", "response", "with", "a", "confidence", "of", "NUMBER", "INFO", "chatterbot", "NUMBER", "chatterbot", "Selecting", "Exterminate", "NUMBER", "as", "response", "with", "a", "confidence", "of", "NUMBER", "So", "it", "says", "that", "it", "s", "selecting", "the", "first", "responce", "while", "it", "should", "probably", "select", "random", "I", "guess", "I", "should", "set", "it", "to", "random_response", "from", "what", "I", "see", "in", "that", "code", "NUMBER", "Is", "that", "anywhere", "in", "documentation", "Did", "not", "find", "it", "Change", "the", "bit", "in", "base_match", "NUMBER", "py", "to", "self", "NUMBER", "tie_breaking_method", "kwargs", "NUMBER", "get", "tie_breaking_method", "random_response", "now", "it", "selects", "random", "responses", "NUMBER", "But", "I", "guess", "it", "s", "not", "the", "correct", "way", "to", "set", "it", "right", "Thanks", "yeah", "did", "not", "see", "that", "before", "in", "the", "docs", "NUMBER", "And", "sounds", "great", "some", "contextual", "responses", "should", "be", "great", "NUMBER", "Also", "some", "documentation", "on", "how", "to", "add", "some", "functional", "adapters", "things", "that", "actually", "do", "stuff", "like", "play", "music", "google", "something", "or", "check", "your", "mail", "NUMBER", "Right", "now", "I", "did", "a", "few", "and", "they", "do", "stuff", "within", "adapter", "itself", "after", "checking", "if", "they", "can", "process", "the", "input", "but", "I", "m", "not", "sure", "if", "thats", "the", "correct", "approach", "either", "NUMBER", "gunthercox", "this", "link", "you", "posted", "be", "dead", "LINK", "_breaking_method_mixins", "NUMBER", "html", "Is", "that", "how", "you", "would", "currently", "get", "a", "random", "response", "In", "my", "corpus", "I", "have", "some", "of", "the", "same", "question", "posted", "multiple", "times", "yet", "each", "question", "gets", "the", "same", "default", "answer", "for", "it", "each", "time", "NUMBER", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "trainers", "import", "ChatterBotCorpusTrainer", "Create", "a", "new", "chat", "bot", "named", "Charlie", "chatterbot", "ChatBot", "Charlie", "database", "CommentDatabase", "NUMBER", "json", "tie_breaking_method", "random_response", "storage_adapter", "chatterbot", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "BestMatch", "import_path", "chatterbot", "NUMBER", "logic", "NUMBER", "LowConfidenceAdapter", "threshold", "NUMBER", "default_response", "OhNo", "database", "list_trainer", "chatterbot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "chatterbot", "NUMBER", "train", "path", "to", "favorites", "NUMBER", "corpus", "NUMBER", "json", "Get", "a", "response", "to", "the", "input", "text", "How", "be", "you", "response", "chatterbot", "NUMBER", "get_response", "what", "be", "your", "favorite", "movie", "print", "response", "I", "think", "I", "have", "it", "figured", "out", "now", "NUMBER", "from", "chatterbot", "NUMBER", "response_selection", "import", "get_random_response", "chatterbot", "ChatBot", "Charlie", "response_selection_method", "get_random_response", "Those", "were", "the", "only", "change", "I", "had", "to", "make", "to", "finally", "get", "some", "varied", "responses", "for", "each", "given", "question", "NUMBER", "Hello", "I", "m", "test", "the", "ChatterBotCorpusTraining", "functionality", "with", "the", "greetings", "corpus", "and", "get", "error", "NUMBER", "I", "m", "not", "sure", "if", "I", "understand", "fully", "the", "concept", "of", "machine", "learning", "use", "this", "library", "and", "I", "can", "t", "find", "enough", "information", "to", "help", "NUMBER", "I", "m", "use", "the", "code", "from", "the", "docs", "NUMBER", "If", "I", "use", "None", "as", "a", "parameter", "as", "listed", "in", "the", "docs", "bot_input", "bot", "NUMBER", "get_response", "None", "I", "get", "an", "error", "stating", "chatterbot", "NUMBER", "adapters", "NUMBER", "input", "NUMBER", "variable_input_type_adapter", "NUMBER", "UnrecognizedInputFormatException", "The", "type", "TAG", "be", "not", "recognized", "as", "a", "valid", "input", "type", "NUMBER", "If", "I", "enter", "text", "as", "a", "parameter", "I", "get", "the", "bot", "repeating", "the", "same", "response", "NUMBER", "Here", "be", "the", "code", "python", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "training", "NUMBER", "trainers", "import", "ChatterBotCorpusTrainer", "create", "a", "new", "instance", "of", "a", "chatbot", "bot", "ChatBot", "greetings", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "JsonDatabaseAdapter", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMatchAdapter", "input_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "input", "NUMBER", "VariableInputTypeAdapter", "output_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "output", "NUMBER", "OutputFormatAdapter", "output_format", "text", "database", "NUMBER", "database", "NUMBER", "db", "set", "up", "machine", "learning", "training", "bot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "bot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "greetings", "print", "input", "Welcome", "I", "m", "the", "Response", "Bot", "how", "be", "you", "today", "n", "while", "True", "try", "bot_input", "bot", "NUMBER", "get_response", "None", "print", "bot_input", "Press", "ctrl", "c", "or", "ctrl", "d", "on", "the", "keyboard", "to", "exit", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "Thanks", "for", "your", "help", "NUMBER", "Thanks", "gunthercox", "NUMBER", "Its", "work", "now", "NUMBER", "Now", "if", "I", "wanted", "to", "have", "an", "action", "performed", "like", "calling", "a", "function", "would", "I", "need", "to", "create", "an", "adapter", "for", "that", "say", "if", "I", "wanted", "a", "window", "opened", "based", "on", "a", "request", "since", "there", "be", "lots", "of", "movies", "use", "the", "movie", "subtitle", "as", "the", "training", "data", "set", "will", "improve", "accuracy", "and", "usability", "NUMBER", "and", "also", "Quora", "and", "Stackoverflow", "has", "lots", "of", "conversation", "data", "NUMBER", "HI", "gunthercox", "how", "do", "I", "know", "how", "many", "words", "did", "it", "actually", "match", "of", "the", "input", "with", "the", "statement", "i", "tried", "to", "look", "into", "the", "closest_meaning", "but", "couldn", "t", "find", "with", "how", "many", "word", "be", "it", "matching", "NUMBER", "Hi", "I", "m", "a", "freshman", "to", "chatterbot", "NUMBER", "I", "have", "read", "the", "code", "and", "docs", "NUMBER", "It", "s", "really", "a", "great", "job", "NUMBER", "But", "I", "have", "a", "question", "NUMBER", "Why", "do", "the", "json", "database", "store", "a", "statement", "as", "a", "key", "and", "its", "previous", "statement", "as", "the", "value", "in_response_to", "NUMBER", "text", "I", "think", "an", "alternative", "way", "be", "to", "store", "a", "statement", "s", "responses", "as", "the", "value", "NUMBER", "To", "be", "more", "specific", "I", "want", "to", "show", "an", "example", "NUMBER", "A", "conversation", "How", "be", "you", "doing", "I", "be", "doing", "well", "how", "about", "you", "I", "be", "also", "good", "NUMBER", "Existing", "json", "data", "storage", "text", "I", "be", "doing", "well", "how", "about", "you", "in_response_to", "text", "How", "be", "you", "doing", "An", "alternative", "way", "text", "I", "be", "doing", "well", "how", "about", "you", "responses", "text", "I", "be", "also", "good", "NUMBER", "I", "ask", "this", "question", "because", "I", "find", "when", "the", "training", "scale", "be", "NUMBER", "the", "response", "time", "for", "a", "query", "statement", "be", "too", "long", "NUMBER", "I", "m", "curious", "whether", "it", "might", "be", "due", "to", "the", "data", "storage", "structure", "NUMBER", "Using", "exist", "data", "storage", "each", "time", "to", "get", "a", "response", "all", "statements", "with", "responses", "be", "filtered", "out", "StorageAdapter", "NUMBER", "get_response_statements", "and", "a", "statement", "closest", "to", "the", "query", "statement", "be", "matched", "NUMBER", "Then", "again", "we", "have", "to", "traverse", "all", "statements", "in_response_to", "value", "and", "find", "the", "closest", "statement", "s", "response", "NUMBER", "So", "there", "be", "three", "procedures", "to", "traverse", "all", "statements", "in", "the", "json", "database", "NUMBER", "In", "contrast", "if", "we", "adopt", "the", "other", "storage", "method", "we", "only", "traverse", "all", "statements", "to", "find", "a", "statement", "closest", "to", "the", "query", "statement", "and", "give", "its", "response", "NUMBER", "I", "think", "this", "way", "might", "reduce", "the", "response", "time", "NUMBER", "I", "wonder", "whether", "I", "understand", "the", "workflow", "correctly", "NUMBER", "Or", "be", "there", "any", "specific", "reasons", "we", "have", "to", "use", "the", "exist", "data", "storage", "structure", "Thanks", "NUMBER", "Thanks", "NUMBER", "gunthercox", "I", "like", "your", "conversational", "dialog", "engine", "very", "much", "it", "be", "beautiful", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "fuzzywuzzy", "fuzz", "NUMBER", "py", "NUMBER", "UserWarning", "Using", "slow", "pure", "python", "SequenceMatcher", "NUMBER", "Install", "python", "Levenshtein", "to", "remove", "this", "warning", "warnings", "NUMBER", "warn", "Using", "slow", "pure", "python", "SequenceMatcher", "NUMBER", "Install", "python", "Levenshtein", "to", "remove", "this", "warning", "I", "have", "read", "issue", "with", "Levenstein", "NUMBER", "This", "error", "often", "appears", "on", "Windows", "as", "I", "understood", "NUMBER", "But", "I", "use", "Linux", "Mint", "NUMBER", "NUMBER", "And", "I", "have", "this", "error", "too", "NUMBER", "Can", "you", "help", "with", "it", "This", "appears", "to", "be", "a", "warning", "not", "an", "error", "NUMBER", "So", "I", "don", "t", "think", "it", "s", "_required_", "it", "s", "just", "_highly", "recommended_", "NUMBER", "Ok", "NUMBER", "Thank", "you", "NUMBER", "Python", "Levenshtein", "can", "t", "be", "install", "NUMBER", "Got", "an", "error", "with", "it", "too", "NUMBER", "I", "will", "ignore", "it", "until", "it", "s", "not", "critical", "NUMBER", "Oh", "try", "to", "fix", "this", "later", "NUMBER", "Hi", "guys", "I", "just", "add", "french", "corpus", "can", "you", "review", "the", "PR", "and", "lemme", "know", "if", "there", "s", "something", "to", "fix", "Peace", "NUMBER", "gunthercox", "sure", "I", "will", "do", "that", "when", "the", "sun", "rise", "it", "s", "NUMBER", "be", "atm", "Hi", "All", "I", "m", "starting", "with", "ChatterBot", "and", "so", "I", "ve", "followed", "the", "doc", "NUMBER", "LINK", "set", "trainer", "NUMBER", "Unfortunatelly", "I", "fail", "in", "very", "begginig", "python", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "training", "NUMBER", "trainers", "import", "ListTrainer", "chatterbot", "ChatBot", "Training", "Example", "chatterbot", "NUMBER", "set_trainer", "ListTrainer", "chatterbot", "NUMBER", "train", "How", "be", "you", "I", "be", "good", "NUMBER", "That", "be", "good", "to", "hear", "NUMBER", "Thank", "you", "You", "be", "welcome", "NUMBER", "I", "ve", "get", "python", "Traceback", "most", "recent", "call", "last", "File", "createJson", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "u", "You", "be", "welcome", "NUMBER", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "training", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "update", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement", "NUMBER", "text", "value", "data", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "self", "NUMBER", "_set_content", "key", "value", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_set_content", "obj", "self", "NUMBER", "_get_content", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_get_content", "obj", "read_data", "self", "NUMBER", "path", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "read_data", "obj", "decode", "content", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "jsondb", "compat", "NUMBER", "py", "line", "NUMBER", "in", "decode", "return", "json_decode", "value", "File", "usr", "lib", "python", "NUMBER", "json", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "loads", "return", "_default_decoder", "NUMBER", "decode", "s", "File", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "decode", "obj", "end", "self", "NUMBER", "raw_decode", "s", "idx", "_w", "s", "NUMBER", "NUMBER", "end", "File", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "raw_decode", "obj", "end", "self", "NUMBER", "scan_once", "s", "idx", "RecursionError", "maximum", "recursion", "depth", "exceeded", "while", "decoding", "a", "JSON", "array", "from", "a", "unicode", "string", "Any", "help", "be", "highly", "appreciated", "NUMBER", "Thank", "you", "NUMBER", "Hey", "I", "did", "not", "try", "it", "out", "but", "you", "have", "a", "typo", "in", "your", "JSON", "at", "the", "end", "of", "your", "array", "you", "have", "a", "colon", "you", "should", "remove", "it", "so", "it", "looks", "like", "chatterbot", "NUMBER", "train", "How", "be", "you", "I", "be", "good", "NUMBER", "That", "be", "good", "to", "hear", "NUMBER", "Thank", "you", "You", "be", "welcome", "NUMBER", "Please", "let", "me", "know", "if", "that", "was", "helpful", "mbarisa", "I", "ve", "tried", "also", "withou", "the", "colon", "but", "the", "result", "be", "the", "same", "NUMBER", "Looks", "like", "some", "deep", "issue", "in", "JSON", "and", "how", "it", "parse", "or", "handle", "string", "into", "array", "NUMBER", "Didn", "t", "have", "time", "to", "go", "to", "deep", "NUMBER", "python", "File", "createJson", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "u", "You", "be", "welcome", "NUMBER", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "training", "trainers", "NUMBER", "py", "line", "NUMBER", "in", "train", "self", "NUMBER", "orage", "NUMBER", "update", "statement", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "update", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement", "NUMBER", "text", "value", "data", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "self", "NUMBER", "_set_content", "key", "value", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_set_content", "obj", "self", "NUMBER", "_get_content", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_get_content", "obj", "read_data", "self", "NUMBER", "path", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "read_data", "obj", "decode", "content", "File", "home", "ms", "sataData", "Progr", "python", "jarvis", "virtualenv", "boot", "lib", "python", "NUMBER", "site", "package", "jsondb", "compat", "NUMBER", "py", "line", "NUMBER", "in", "decode", "return", "json_decode", "value", "File", "usr", "lib", "python", "NUMBER", "json", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "loads", "return", "_default_decoder", "NUMBER", "decode", "s", "File", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "decode", "obj", "end", "self", "NUMBER", "raw_decode", "s", "idx", "_w", "s", "NUMBER", "NUMBER", "end", "File", "usr", "lib", "python", "NUMBER", "json", "decoder", "NUMBER", "py", "line", "NUMBER", "in", "raw_decode", "obj", "end", "self", "NUMBER", "scan_once", "s", "idx", "RecursionError", "maximum", "recursion", "depth", "exceeded", "while", "decoding", "a", "JSON", "array", "from", "a", "unicode", "string", "Diacritics", "did", "not", "work", "with", "Croatian", "corpus", "and", "I", "think", "it", "should", "help", "with", "other", "languages", "as", "well", "NUMBER", "I", "be", "planning", "to", "create", "a", "pull", "request", "for", "Croatian", "corpus", "as", "well", "these", "days", "NUMBER", "Hi", "NUMBER", "I", "m", "having", "problem", "trying", "to", "use", "the", "ChatterBot", "to", "talk", "to", "me", "in", "Chinese", "NUMBER", "In", "the", "terminal", "I", "get", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "conversation", "statement", "NUMBER", "py", "NUMBER", "UnicodeWarning", "Unicode", "equal", "comparison", "fail", "to", "convert", "both", "argument", "to", "Unicode", "interpreting", "them", "as", "be", "unequal", "if", "response", "NUMBER", "text", "self", "NUMBER", "in_response_to", "index", "NUMBER", "text", "Type", "something", "to", "begin", "NUMBER", "for", "this", "first", "case", "talk", "to", "english", "and", "respond", "in", "chinese", "works", "ok", "Hello", "\u4f60\u597d", "\u4f60\u597d\u5417", "but", "it", "doesn", "t", "work", "for", "talking", "in", "chinese", "to", "the", "bot", "NUMBER", "\u6211\u5f88\u597d\u4f60\u5462", "\u6211\u5f88\u597d\u4f60\u5462", "I", "also", "get", "this", "error", "usr", "local", "lib", "python", "NUMBER", "site", "package", "chatterbot", "adapters", "logic", "closest_match", "NUMBER", "py", "NUMBER", "UnicodeWarning", "Unicode", "equal", "comparison", "fail", "to", "convert", "both", "argument", "to", "Unicode", "interpreting", "them", "as", "be", "unequal", "if", "input_statement", "NUMBER", "text", "in", "text_of_all_statements", "The", "code", "of", "what", "I", "m", "use", "python", "code", "utf", "NUMBER", "from", "chatterbot", "import", "ChatBot", "from", "chatterbot", "NUMBER", "training", "NUMBER", "trainers", "import", "ListTrainer", "chatterbot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMatchAdapter", "input_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "input", "NUMBER", "TerminalAdapter", "output_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "output", "NUMBER", "TerminalAdapter", "database", "chatterbot", "database", "chatterbot", "NUMBER", "set_trainer", "ListTrainer", "chatterbot", "NUMBER", "train", "\u4f60\u597d", "\u4f60\u597d\u5417", "Hello", "chatterbot", "NUMBER", "train", "\u6211\u5f88\u597d\u592a\u611f\u8c22", "\u6211\u5f88\u597d\u4f60\u5462", "print", "Type", "something", "to", "begin", "NUMBER", "while", "True", "try", "bot_input", "chatterbot", "NUMBER", "get_response", "None", "Press", "ctrl", "c", "or", "ctrl", "d", "on", "the", "keyboard", "to", "exit", "except", "KeyboardInterrupt", "EOFError", "SystemExit", "break", "Thanks", "Hi", "I", "made", "a", "pull", "request", "you", "might", "want", "to", "check", "out", "I", "think", "that", "be", "same", "issue", "I", "encountered", "with", "Croatian", "language", "so", "I", "just", "add", "utf", "NUMBER", "support", "for", "corpus", "NUMBER", "I", "tried", "ListTrainer", "with", "your", "dataset", "and", "it", "seems", "to", "work", "fine", "NUMBER", "You", "want", "to", "check", "this", "pull", "request", "LINK", "I", "have", "the", "same", "problem", "with", "Nykho", "and", "I", "have", "merge", "the", "commit", "from", "mbarisa", "said", "but", "it", "still", "didn", "t", "work", "for", "me", "Thanks", "gunthercox", "Hi", "there", "I", "have", "just", "downloaded", "the", "chatterbot", "NUMBER", "Just", "wondering", "if", "anyone", "has", "developed", "any", "additional", "bigger", "training", "corpus", "file", "Thanks", "NUMBER", "hi", "antfellow", "gunthercox", "may", "you", "can", "try", "the", "Ubuntu", "dialog", "dataset", "LINK", "ranking", "dataset", "creator", "it", "s", "one", "of", "the", "largest", "public", "dialog", "datasets", "available", "but", "it", "s", "not", "a", "chit", "chat", "corpus", "NUMBER", "hi", "gunthercox", "i", "have", "a", "question", "about", "the", "logic", "of", "statement", "NUMBER", "For", "a", "query", "response", "pair", "you", "use", "the", "response", "as", "the", "text", "property", "of", "the", "statement", "class", "why", "not", "use", "the", "query", "as", "the", "text", "Using", "the", "query", "as", "key", "for", "the", "ClosestMatchAdapter", "we", "can", "directly", "get", "the", "closest", "key", "NUMBER", "Hi", "all", "I", "have", "tried", "to", "create", "a", "larger", "corpus", "in", "my", "own", "language", "NUMBER", "I", "ve", "succesfully", "created", "a", "conversations", "NUMBER", "json", "corpus", "file", "NUMBER", "The", "file", "itself", "be", "NUMBER", "MB", "big", "NUMBER", "When", "I", "tried", "to", "to", "use", "chatterbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "slovak", "after", "NUMBER", "min", "the", "import", "train", "will", "crash", "with", "Number", "of", "recursion", "error", "NUMBER", "Anyone", "experienced", "this", "issue", "Maybe", "we", "can", "try", "it", "with", "hadoop", "MapReduce", "gunthercox", "what", "you", "say", "Maybe", "we", "can", "use", "Redis", "as", "storage", "adapter", "NUMBER", "Ajustes", "pequenos", "mas", "o", "T", "no", "lugar", "do", "B", "me", "deu", "um", "trabalho", "pra", "ver", "kkk", "perdi", "tempo", "procurando", "solu\u00e7\u00e3o", "pro", "erro", "que", "estava", "sendo", "gerado", "e", "era", "erro", "no", "c\u00f3digo", "exemplo", "NUMBER", "Espero", "que", "ajude", "os", "pr\u00f3ximos", "NUMBER", "Add", "indonesian", "corpus", "data", "for", "ChatterBotCorpusTrainer", "Does", "chatterbot", "maked", "bots", "understand", "the", "meaning", "and", "concept", "of", "non", "English", "sentences", "or", "this", "be", "just", "some", "marked", "phrases", "I", "mean", "how", "this", "machine", "learning", "and", "AI", "works", "in", "chatterbot", "Corre\u00e7\u00f5es", "ortogr\u00e1ficas", "m\u00ednimas", "Hi", "gunthercox", "As", "the", "title", "says", "I", "be", "wondering", "how", "to", "create", "my", "own", "logic", "adapter", "NUMBER", "I", "know", "how", "the", "default", "adapters", "like", "TimeLogic", "MathematicalEvalutaiion", "work", "NUMBER", "They", "be", "install", "in", "my", "usr", "lib", "python", "directory", "and", "the", "only", "import", "be", "from", "chatterbot", "import", "ChatBot", "NUMBER", "Variable", "logic_adapters", "contains", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "MathematicalEvaluation", "for", "example", "NUMBER", "In", "my", "project", "directory", "I", "ve", "tried", "to", "create", "a", "new", "module", "with", "class", "MyLogicAdapter", "just", "like", "in", "the", "documentation", "NUMBER", "What", "should", "I", "add", "to", "the", "variable", "logic_adapters", "I", "ve", "trying", "to", "add", "just", "MyLogicAdapter", "but", "my", "IDE", "throw", "an", "error", "ValueError", "Empty", "module", "name", "Hi", "gunthercox", "I", "see", "context", "in", "the", "code", "but", "I", "don", "t", "understand", "it", "well", "NUMBER", "Can", "you", "please", "tell", "me", "more", "about", "it", "NUMBER", "when", "some", "unknown", "sentence", "occur", "how", "to", "say", "I", "Dont", "Understand", "Can", "you", "be", "more", "Specific", "any", "method", "code", "please", "Maybe", "the", "discussion", "in", "issue", "NUMBER", "could", "get", "you", "start", "There", "s", "no", "way", "to", "do", "that", "as", "of", "now", "NUMBER", "Even", "I", "wanted", "something", "similar", "but", "couldn", "t", "achieve", "it", "NUMBER", "The", "no_knowledge_adapter", "NUMBER", "py", "wasn", "t", "of", "much", "use", "either", "for", "me", "NUMBER", "Anyways", "if", "you", "figure", "it", "out", "let", "me", "know", "as", "well", "NUMBER", "The", "logics", "of", "this", "program", "do", "not", "permit", "it", "to", "not", "find", "a", "response", "since", "it", "be", "trying", "to", "find", "the", "closest", "possible", "match", "to", "the", "input", "NUMBER", "A", "method", "for", "achieving", "what", "you", "be", "attempting", "might", "be", "to", "change", "from", "use", "this", "sort", "of", "logics", "to", "more", "of", "an", "AIML", "style", "program", "pyAIML", "be", "a", "good", "library", "if", "you", "be", "looking", "to", "be", "programming", "it", "in", "python", "NUMBER", "Hi", "gunthercox", "Thx", "for", "launching", "such", "a", "great", "project", "But", "I", "was", "wondering", "which", "machine", "learning", "methods", "were", "use", "for", "training", "ChatterBot", "I", "haven", "t", "get", "the", "answer", "after", "reading", "source", "code", "and", "docs", "NUMBER", "Or", "it", "seems", "that", "ChatterBot", "be", "trained", "by", "some", "text", "matching", "methods", "Looking", "forward", "to", "your", "reply", "NUMBER", "Thx", "Thx", "for", "ur", "reply", "NUMBER", "I", "m", "much", "clear", "now", "I", "ll", "try", "ChatterBot", "myself", "NUMBER", "Hope", "further", "discussion", "with", "you", "Hi", "As", "of", "now", "chatbot", "repeats", "the", "statement", "which", "it", "can", "t", "map", "to", "the", "database", "NUMBER", "Suppose", "it", "doesn", "t", "have", "a", "mapping", "for", "Hello", "it", "would", "throw", "back", "hello", "in", "reply", "as", "well", "NUMBER", "What", "I", "want", "to", "do", "be", "for", "all", "the", "matches", "it", "can", "t", "find", "it", "should", "give", "a", "default", "reply", "like", "not", "find", "or", "something", "NUMBER", "Any", "help", "P", "NUMBER", "S", "NUMBER", "I", "ve", "turned", "off", "the", "learning", "NUMBER", "gunthercox", "Since", "there", "s", "an", "option", "to", "turn", "off", "the", "learning", "I", "thought", "this", "be", "something", "that", "s", "achievable", "NUMBER", "Can", "you", "at", "least", "tell", "me", "how", "do", "it", "give", "the", "same", "response", "if", "it", "can", "t", "find", "the", "map", "to", "it", "NUMBER", "Let", "s", "say", "there", "be", "no", "map", "for", "Mercedes", "it", "returns", "Mercedes", "back", "how", "do", "it", "do", "that", "Hey", "after", "I", "start", "use", "the", "mongodb", "storage", "adapter", "I", "keep", "get", "this", "error", "Traceback", "most", "recent", "call", "last", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "discord", "ext", "commands", "bot", "NUMBER", "py", "line", "NUMBER", "in", "_run_extra", "yield", "from", "coro", "args", "kwargs", "File", "NUMBER", "mods", "AI", "NUMBER", "py", "line", "NUMBER", "in", "on_message", "msg", "NUMBER", "n", "NUMBER", "format", "message", "NUMBER", "author", "NUMBER", "name", "str", "chatbot", "NUMBER", "get_response", "message", "NUMBER", "content", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "self", "NUMBER", "orage", "NUMBER", "update", "input_statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "update", "data", "statement", "NUMBER", "serialize", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "conversation", "statement", "NUMBER", "py", "line", "NUMBER", "in", "serialize", "data", "in_response_to", "NUMBER", "append", "response", "NUMBER", "serialize", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "conversation", "statement", "NUMBER", "py", "line", "NUMBER", "in", "serialize", "data", "in_response_to", "NUMBER", "append", "response", "NUMBER", "serialize", "AttributeError", "dict", "object", "has", "no", "attribute", "serialize", "I", "install", "NUMBER", "weeks", "ago", "I", "ll", "try", "pip", "upgrade", "if", "nothing", "I", "ll", "update", "from", "the", "repo", "NUMBER", "It", "seems", "as", "I", "was", "on", "the", "latest", "version", "NUMBER", "but", "I", "ve", "went", "ahead", "and", "uninstalled", "pip", "and", "install", "from", "source", "NUMBER", "Hope", "the", "issue", "be", "fix", "close", "for", "now", "NUMBER", "Hey", "I", "m", "still", "get", "it", "for", "some", "reason", "even", "after", "a", "full", "update", "Traceback", "most", "recent", "call", "last", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "discord", "ext", "commands", "bot", "NUMBER", "py", "line", "NUMBER", "in", "_run_extra", "yield", "from", "coro", "_args", "_kwargs", "File", "NUMBER", "mods", "AI", "NUMBER", "py", "line", "NUMBER", "in", "on_message", "msg", "NUMBER", "n", "NUMBER", "format", "message", "NUMBER", "author", "NUMBER", "name", "str", "chatbot", "NUMBER", "get_response", "message", "NUMBER", "content", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "self", "NUMBER", "orage", "NUMBER", "update", "input_statement", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "update", "data", "statement", "NUMBER", "serialize", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "conversation", "statement", "NUMBER", "py", "line", "NUMBER", "in", "serialize", "data", "in_response_to", "NUMBER", "append", "response", "NUMBER", "serialize", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "conversation", "statement", "NUMBER", "py", "line", "NUMBER", "in", "serialize", "data", "in_response_to", "NUMBER", "append", "response", "NUMBER", "serialize", "AttributeError", "dict", "object", "has", "no", "attribute", "serialize", "Python", "version", "NUMBER", "python", "chatbot", "ChatBot", "NotSoBot", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "logic_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMeaningAdapter", "input_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "input", "NUMBER", "VariableInputTypeAdapter", "output_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "output", "NUMBER", "OutputFormatAdapter", "format", "text", "database", "chatterbot", "database", "database_uri", "mongodb", "localhost", "NUMBER", "chatbot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "It", "works", "first", "time", "few", "times", "actually", "but", "then", "for", "no", "reason", "starts", "to", "error", "NUMBER", "I", "receive", "it", "around", "NUMBER", "times", "and", "then", "no", "responses", "work", "until", "I", "reload", "it", "and", "it", "starts", "work", "again", "NUMBER", "Alright", "test", "it", "now", "thanks", "for", "the", "update", "Seems", "to", "be", "work", "good", "now", "had", "a", "few", "testers", "NUMBER", "Thanks", "and", "its", "back", "Just", "upgrade", "gunthercox", "and", "it", "s", "back", "but", "in", "a", "new", "format", "Traceback", "most", "recent", "call", "last", "File", "NUMBER", "mods", "AI", "NUMBER", "py", "line", "NUMBER", "in", "on_message", "msg", "NUMBER", "n", "NUMBER", "format", "message", "NUMBER", "author", "NUMBER", "name", "str", "chatbot", "NUMBER", "get_response", "message", "NUMBER", "content", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "update", "data", "statement", "NUMBER", "serialize", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "conversation", "statement", "NUMBER", "py", "line", "NUMBER", "in", "serialize", "def", "serialize", "self", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "conversation", "statement", "NUMBER", "py", "line", "NUMBER", "in", "serialize", "def", "serialize", "self", "AttributeError", "dict", "object", "has", "no", "attribute", "serialize", "During", "handle", "of", "the", "above", "exception", "another", "exception", "occur", "Traceback", "most", "recent", "call", "last", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "discord", "ext", "commands", "bot", "NUMBER", "py", "line", "NUMBER", "in", "_run_extra", "yield", "from", "coro", "_args", "_kwargs", "File", "NUMBER", "mods", "AI", "NUMBER", "py", "line", "NUMBER", "in", "on_message", "msg", "NUMBER", "n", "NUMBER", "format", "message", "NUMBER", "author", "NUMBER", "name", "str", "chatbot", "NUMBER", "get_response", "message", "NUMBER", "content", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "update", "data", "statement", "NUMBER", "serialize", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "conversation", "statement", "NUMBER", "py", "line", "NUMBER", "in", "serialize", "def", "serialize", "self", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "conversation", "statement", "NUMBER", "py", "line", "NUMBER", "in", "serialize", "def", "serialize", "self", "AttributeError", "dict", "object", "has", "no", "attribute", "serialize", "sorry", "for", "all", "the", "issue", "this", "bug", "be", "cause", "I", "pull", "from", "github", "and", "run", "python", "NUMBER", "setup", "NUMBER", "py", "install", "It", "seems", "as", "the", "error", "be", "different", "as", "you", "made", "the", "serialize", "in", "a", "function", "now", "You", "think", "wiping", "my", "mongodb", "for", "the", "data", "would", "work", "I", "would", "rather", "not", "because", "I", "have", "a", "lot", "of", "data", "from", "users", "use", "it", "however", "I", "will", "if", "needed", "NUMBER", "yeah", "that", "s", "what", "I", "was", "thinking", "NUMBER", "I", "ll", "try", "it", "when", "I", "get", "home", "thanks", "NUMBER", "Oh", "sorry", "forgot", "to", "respond", "NUMBER", "After", "update", "again", "with", "your", "new", "commit", "a", "few", "days", "later", "I", "haven", "t", "received", "the", "error", "again", "NUMBER", "Everything", "seems", "well", "at", "this", "point", "and", "it", "s", "fast", "NUMBER", "Thanks", "for", "keep", "in", "check", "and", "continuing", "development", "of", "this", "project", "Added", "Spanish", "translation", "and", "links", "to", "different", "translations", "in", "the", "readme", "file", "NUMBER", "TAG", "What", "color", "be", "the", "sky", "Blue", "NUMBER", "Do", "you", "enjoy", "coffee", "Yes", "I", "m", "absolutely", "loving", "my", "limited", "ChatterBot", "experience", "thus", "far", "I", "d", "like", "to", "figure", "out", "if", "it", "s", "possible", "to", "convert", "the", "usage", "of", "local", "file", "system", "for", "NUMBER", "json", "file", "to", "HDFS", "and", "have", "Spark", "MLib", "to", "do", "the", "machine", "learning", "instead", "NUMBER", "What", "be", "the", "thoughts", "on", "this", "Hi", "I", "m", "get", "familiar", "with", "ChatterBot", "at", "the", "moment", "I", "try", "to", "understand", "how", "it", "works", "under", "the", "hood", "NUMBER", "When", "I", "opened", "the", "database", "I", "saw", "this", "json", "Again", "NUMBER", "in_response_to", "in_response_to", "occurrence", "NUMBER", "signature", "text", "It", "depends", "how", "you", "define", "life", "text", "Life", "be", "the", "condition", "that", "distinguishes", "organisms", "from", "inorganic", "matter", "including", "the", "capacity", "for", "growth", "reproduction", "functional", "activity", "and", "continual", "change", "preceding", "death", "NUMBER", "Hm", "it", "looks", "like", "this", "be", "conversation", "track", "but", "issue", "NUMBER", "say", "otherwise", "Currently", "ChatterBot", "only", "responds", "to", "the", "last", "statement", "that", "was", "entered", "Can", "someone", "shed", "some", "light", "on", "this", "gunthercox", "basic", "example", "with", "english", "corpus", "trainer", "NUMBER", "Also", "when", "ask", "some", "question", "when", "ask", "empty", "question", "after", "few", "question", "it", "can", "t", "parse", "the", "database", "anymore", "NUMBER", "This", "also", "happens", "when", "use", "mongodb", "storage", "NUMBER", "from", "chatterbot", "import", "ChatBot", "Create", "a", "new", "chat", "bot", "named", "Charlie", "chatbot", "ChatBot", "Charlie", "chatterbot", "NUMBER", "set_trainer", "ChatterBotCorpusTrainer", "chatterbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "Get", "a", "response", "to", "the", "input", "How", "be", "you", "response", "chatbot", "NUMBER", "get_response", "How", "be", "you", "print", "response", "Hi", "I", "m", "trying", "to", "create", "logs", "of", "the", "conversation", "that", "instances", "of", "chat", "bot", "had", "had", "with", "different", "people", "and", "store", "it", "into", "a", "database", "NUMBER", "I", "know", "how", "the", "knowledge", "base", "works", "for", "the", "chat", "bot", "and", "its", "database", "implementation", "as", "well", "NUMBER", "What", "i", "want", "to", "do", "be", "store", "the", "logs", "into", "a", "database", "in", "order", "to", "monitor", "the", "chats", "it", "had", "with", "different", "people", "with", "their", "session", "id", "or", "something", "to", "differentiate", "between", "them", "NUMBER", "It", "d", "be", "great", "if", "someone", "could", "help", "me", "with", "it", "NUMBER", "I", "tried", "use", "the", "nearest", "meaning", "matcher", "but", "it", "seems", "to", "not", "match", "on", "basic", "synonyms", "or", "even", "if", "there", "be", "punctuation", "miss", "from", "an", "input", "NUMBER", "hello", "world", "You", "NUMBER", "minutes", "ago", "I", "like", "seeing", "movies", "NUMBER", "Chatbot", "NUMBER", "minutes", "ago", "Correct", "answer", "be", "hello", "back", "from", "the", "world", "You", "a", "few", "seconds", "ago", "I", "learned", "to", "answer", "hello", "back", "from", "the", "world", "in", "context", "of", "hello", "world", "Chatbot", "a", "few", "seconds", "ago", "hello", "world", "You", "a", "few", "seconds", "ago", "hello", "back", "from", "the", "world", "Chatbot", "a", "few", "seconds", "ago", "hello", "planet", "You", "a", "few", "seconds", "ago", "Is", "that", "a", "definition", "or", "an", "oppinion", "Chatbot", "a", "few", "seconds", "ago", "I", "trained", "bot", "on", "a", "reply", "to", "hello", "world", "but", "it", "will", "not", "reply", "to", "hello", "planet", "in", "fact", "it", "doesn", "t", "match", "if", "a", "punctuation", "mark", "be", "miss", "NUMBER", "be", "you", "good", "TAG", "be", "you", "good", "be", "you", "good", "You", "a", "minute", "ago", "If", "the", "implementation", "be", "hard", "to", "explain", "it", "s", "a", "bad", "idea", "NUMBER", "Chatbot", "a", "minute", "ago", "Correct", "answer", "be", "Yes", "I", "be", "great", "You", "a", "few", "seconds", "ago", "I", "learned", "to", "answer", "Yes", "I", "be", "great", "in", "context", "of", "be", "you", "good", "Chatbot", "a", "few", "seconds", "ago", "be", "you", "good", "You", "a", "few", "seconds", "ago", "If", "the", "implementation", "be", "hard", "to", "explain", "it", "s", "a", "bad", "idea", "NUMBER", "Chatbot", "a", "few", "seconds", "ago", "be", "you", "good", "You", "a", "few", "seconds", "ago", "Yes", "I", "be", "great", "Chatbot", "a", "few", "seconds", "ago", "be", "this", "expected", "behavior", "use", "the", "python", "def", "__init__", "self", "name", "None", "config", "dict", "if", "not", "config", "NUMBER", "get", "logic_adapters", "None", "config", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMeaningAdapter", "super", "ChatterBot", "self", "NUMBER", "__init__", "name", "config", "or", "do", "we", "have", "a", "bug", "somewhere", "Add", "deserialize_responses", "call", "to", "mongo", "adapter", "get_response_statemets", "realization", "to", "prevent", "AttributeError", "dict", "object", "has", "no", "attribute", "serialize", "in", "response", "NUMBER", "serialize", "NUMBER", "python", "Traceback", "most", "recent", "call", "last", "File", "examples", "terminal_mongo_example", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot_input", "bot", "NUMBER", "get_response", "None", "File", "Users", "timofey", "Projects", "ChatterBot", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "confidence", "response", "self", "NUMBER", "logic", "NUMBER", "process", "input_statement", "File", "Users", "timofey", "Projects", "ChatterBot", "chatterbot", "adapters", "logic", "multi_adapter", "NUMBER", "py", "line", "NUMBER", "in", "process", "confidence", "output", "adapter", "NUMBER", "process", "statement", "File", "Users", "timofey", "Projects", "ChatterBot", "chatterbot", "adapters", "logic", "base_match", "NUMBER", "py", "line", "NUMBER", "in", "process", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "update", "closest_match", "File", "Users", "timofey", "Projects", "ChatterBot", "chatterbot", "adapters", "storage", "mongodb", "NUMBER", "py", "line", "NUMBER", "in", "update", "data", "statement", "NUMBER", "serialize", "File", "Users", "timofey", "Projects", "ChatterBot", "chatterbot", "conversation", "statement", "NUMBER", "py", "line", "NUMBER", "in", "serialize", "data", "in_response_to", "NUMBER", "append", "response", "NUMBER", "serialize", "AttributeError", "dict", "object", "has", "no", "attribute", "serialize", "I", "m", "trying", "to", "train", "the", "bot", "and", "keep", "get", "the", "response", "NUMBER", "Is", "that", "a", "definition", "or", "an", "oppinion", "Can", "t", "see", "this", "in", "the", "training", "sets", "NUMBER", "be", "it", "inside", "the", "source", "somewhere", "for", "the", "bot", "Is", "this", "a", "prompt", "to", "train", "the", "default", "bot", "somehow", "This", "be", "from", "training", "set", "LINK", "L", "NUMBER", "opinion", "be", "misspelled", "any", "chance", "we", "can", "get", "that", "correct", "Hi", "i", "have", "played", "around", "with", "chatterbot", "the", "last", "two", "days", "and", "it", "be", "a", "really", "great", "starting", "point", "into", "the", "world", "of", "chatbots", "NUMBER", "So", "thanks", "for", "your", "awesome", "work", "i", "tried", "to", "optimize", "the", "time", "adapter", "example", "NUMBER", "NUMBER", "for", "my", "usecase", "i", "need", "to", "have", "german", "umlaute", "like", "\u00e4\u00f6\u00fc", "etc", "NUMBER", "I", "change", "the", "code", "to", "utf", "NUMBER", "but", "it", "did", "not", "helped", "NUMBER", "so", "i", "made", "this", "jsonfy", "function", "to", "get", "rid", "of", "the", "umlaute", "NUMBER", "NUMBER", "i", "recognized", "that", "only", "a", "single", "what", "results", "in", "outputting", "the", "current", "time", "NUMBER", "i", "remove", "the", "classifier", "and", "add", "the", "closest_match", "function", "NUMBER", "NUMBER", "furthermore", "i", "liked", "to", "give", "the", "confidence", "some", "more", "weight", "depending", "if", "some", "keywords", "in", "the", "input_statement", "NUMBER", "here", "it", "be", "NUMBER", "best", "regards", "Alex", "LINK", "Hi", "I", "m", "trying", "to", "understand", "the", "learning", "process", "of", "the", "chatter", "bot", "NUMBER", "I", "see", "database", "NUMBER", "json", "be", "created", "but", "i", "do", "not", "understand", "what", "be", "going", "on", "in", "there", "NUMBER", "The", "relationship", "of", "the", "statements", "and", "the", "responses", "NUMBER", "Please", "help", "me", "clarify", "that", "NUMBER", "futetest", "I", "m", "also", "going", "through", "this", "Where", "be", "that", "file", "be", "created", "for", "you", "I", "don", "t", "see", "it", "NUMBER", "You", "ll", "have", "to", "look", "in", "the", "logic", "inside", "the", "chatter", "bot", "NUMBER", "I", "have", "things", "setup", "use", "a", "virtualenv", "so", "the", "code", "be", "in", "YOURENV", "lib", "python", "NUMBER", "site", "package", "chatterBot", "then", "you", "can", "see", "the", "input", "output", "adapters", "make", "the", "logical", "decisions", "NUMBER", "i", "get", "the", "logical", "decisions", "and", "all", "but", "i", "do", "not", "get", "the", "structure", "of", "the", "database", "NUMBER", "json", "file", "from", "which", "the", "bot", "be", "reading", "and", "mapping", "the", "inputs", "NUMBER", "Can", "someone", "explain", "the", "structure", "of", "the", "database", "NUMBER", "json", "file", "NUMBER", "I", "need", "to", "create", "chatbots", "which", "be", "trained", "separately", "with", "different", "set", "of", "conversation", "NUMBER", "For", "example", "say", "I", "have", "two", "chatbot", "instances", "A", "and", "B", "NUMBER", "A", "should", "reply", "_", "NUMBER", "_", "to", "_", "What", "be", "your", "age", "_", "B", "should", "reply", "_", "NUMBER", "_", "to", "_", "What", "be", "your", "age", "_", "Just", "add", "some", "basics", "italian", "conversations", "the", "docs", "be", "wrong", "since", "they", "be", "not", "point", "out", "that", "you", "need", "to", "use", "the", "set", "trainer", "method", "before", "training", "NUMBER", "The", "class", "pass", "to", "this", "be", "not", "specified", "anywhere", "NUMBER", "Hello", "gunthercox", "chatterBot", "rocks", "NUMBER", "That", "readthedocs", "NUMBER", "io", "link", "can", "be", "replaced", "by", "LINK", "whatsay", "That", "was", "a", "network", "issue", "NUMBER", "I", "tried", "open", "in", "different", "browsers", "earlier", "and", "it", "didn", "t", "load", "but", "now", "its", "loading", "fine", "NUMBER", "Oh", "I", "see", "NUMBER", "Ok", "thats", "fine", "then", "NUMBER", "gunthercox", "doc", "be", "add", "LINK", "LINK", "I", "trained", "the", "bot", "with", "NUMBER", "k", "conversations", "and", "now", "it", "takes", "a", "lot", "of", "time", "for", "response", "NUMBER", "Are", "there", "ways", "to", "avoid", "it", "Training", "data", "LINK", "What", "about", "use", "SQLite", "Will", "that", "speed", "up", "the", "process", "Is", "there", "sqlite", "adapter", "I", "tried", "to", "do", "the", "same", "I", "fed", "a", "NUMBER", "Mb", "training", "file", "with", "converstations", "from", "social", "network", "was", "curious", "what", "kind", "of", "answers", "i", "ll", "get", "from", "that", "D", "And", "firstly", "it", "took", "about", "NUMBER", "minutes", "to", "train", "and", "now", "it", "be", "just", "stuck", "on", "trying", "to", "answer", "NUMBER", "I", "tried", "use", "MongoDB", "but", "get", "an", "error", "pymongo", "NUMBER", "error", "NUMBER", "ServerSelectionTimeoutError", "localhost", "NUMBER", "WinError", "NUMBER", "No", "connection", "could", "be", "made", "because", "the", "target", "machine", "actively", "refused", "it", "I", "gueees", "because", "i", "need", "to", "download", "it", "and", "run", "the", "server", "huh", "NUMBER", "Btw", "Why", "not", "to", "use", "SQL", "database", "Oh", "okay", "mongodb", "works", "fine", "now", "NUMBER", "Much", "faster", "NUMBER", "But", "that", "Bulk", "error", "be", "annoying", "NUMBER", "And", "I", "still", "think", "having", "a", "standard", "option", "of", "sqlite", "would", "be", "nice", "it", "s", "much", "faster", "than", "json", "but", "it", "be", "also", "just", "a", "single", "file", "and", "it", "do", "not", "require", "you", "to", "install", "anything", "but", "python", "NUMBER", "Just", "a", "thought", "NUMBER", "No", "rush", "though", "NUMBER", "Cool", "thanks", "Also", "find", "some", "old", "discussions", "back", "from", "NUMBER", "NUMBER", "about", "make", "this", "bot", "smart", "enough", "to", "pass", "at", "least", "some", "of", "Turing", "test", "question", "build", "sentences", "from", "words", "etc", "I", "hope", "you", "re", "still", "onto", "it", "Does", "It", "support", "parallel", "Training", "my", "data", "size", "about", "i", "use", "mongo", "db", "NUMBER", "but", "i", "dont", "know", "how", "to", "set", "the", "training", "parameters", "or", "when", "i", "use", "mongodb", "the", "default", "be", "parallel", "training", "thanks", "a", "lot", "my", "data", "size", "be", "about", "NUMBER", "G", "I", "ve", "notice", "that", "NUMBER", "use", "ujson", "has", "sped", "up", "processing", "a", "lot", "though", "my", "training", "data", "be", "only", "NUMBER", "MB", "in", "size", "NUMBER", "I", "recommend", "trying", "it", "out", "to", "see", "how", "much", "faster", "it", "will", "go", "NUMBER", "Hi", "im", "actually", "get", "an", "NUMBER", "error", "when", "I", "trying", "to", "ask", "cleverbot", "a", "question", "NUMBER", "Have", "they", "change", "their", "API", "again", "Btw", "I", "be", "use", "the", "java", "implemention", "NUMBER", "gunthercox", "Uww", "sorry", "That", "was", "the", "wrong", "github", "repo", "D", "Any", "algorithm", "that", "it", "uses", "Hi", "I", "had", "a", "question", "I", "was", "reading", "the", "source", "fro", "Logic", "adapters", "and", "specially", "for", "the", "Closest", "matching", "adapter", "NUMBER", "sorry", "for", "the", "dumb", "question", "NUMBER", "new", "at", "machine", "learning", "but", "still", "tryign", "to", "figure", "out", "which", "machine", "learning", "algorithms", "be", "you", "use", "for", "the", "chatterbot", "it", "Naive", "Baysean", "or", "NUMBER", "NUMBER", "also", "I", "was", "lookign", "at", "the", "nltk", "documentation", "NUMBER", "it", "says", "these", "NUMBER", "as", "machine", "learnign", "modules", "NUMBER", "be", "you", "usign", "any", "od", "these", "classify", "cluster", "tbl", "NUMBER", "on", "this", "link", "NUMBER", "LINK", "Hello", "I", "had", "a", "problem", "installing", "Chattebot", "from", "setup", "NUMBER", "py", "Traceback", "most", "recent", "call", "last", "File", "setup", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "version", "__import__", "chatterbot", "NUMBER", "__version__", "File", "Users", "danno", "ChatterBot", "chatterbot", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "chatterbot", "import", "ChatBot", "File", "Users", "danno", "ChatterBot", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "adapters", "NUMBER", "orage", "import", "StorageAdapter", "File", "Users", "danno", "ChatterBot", "chatterbot", "adapters", "storage", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "jsondatabase", "import", "JsonDatabaseAdapter", "File", "Users", "danno", "ChatterBot", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "jsondb", "import", "Database", "ImportError", "cannot", "import", "name", "Database", "It", "was", "due", "to", "setup", "NUMBER", "py", "imports", "Chatterbot", "module", "__init__", "NUMBER", "py", "to", "get", "the", "author", "version", "and", "name", "for", "the", "installation", "and", "since", "dependencies", "be", "not", "install", "yet", "the", "script", "gets", "the", "above", "error", "NUMBER", "I", "m", "new", "to", "python", "and", "I", "don", "t", "know", "if", "this", "commit", "be", "the", "best", "solution", "for", "the", "problem", "but", "if", "not", "I", "would", "appreciate", "any", "other", "fix", "because", "Chatterbot", "will", "be", "a", "dependency", "to", "a", "project", "I", "m", "work", "on", "NUMBER", "Thaks", "for", "your", "reply", "NUMBER", "Yes", "I", "didn", "t", "use", "pip", "it", "s", "becauses", "I", "add", "chatterbot", "as", "a", "install", "requirement", "in", "my", "project", "NUMBER", "I", "have", "another", "setup", "NUMBER", "py", "script", "that", "looks", "like", "this", "usr", "bin", "env", "python", "from", "setuptools", "import", "setup", "NUMBER", "setup", "name", "tgbot", "NUMBER", "install_requires", "chatterbot", "NUMBER", "I", "m", "did", "some", "test", "on", "a", "machine", "that", "doesn", "t", "have", "any", "chatterbot", "dependency", "install", "fuzzywuzzy", "jsondatabase", "nltk", "pymongo", "etc", "when", "I", "run", "python", "NUMBER", "setup", "NUMBER", "py", "install", "use", "my", "script", "I", "get", "the", "following", "output", "when", "setuptools", "tried", "to", "process", "chatterbot", "as", "a", "dependency", "Installed", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "tgbot", "NUMBER", "py", "NUMBER", "egg", "Processing", "dependencies", "for", "tgbot", "NUMBER", "Searching", "for", "chatterbot", "Reading", "LINK", "Best", "match", "ChatterBot", "NUMBER", "Downloading", "LINK", "NUMBER", "tar", "NUMBER", "gz", "md", "NUMBER", "NUMBER", "ef", "NUMBER", "ac", "NUMBER", "d", "NUMBER", "cbe", "NUMBER", "a", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "Processing", "ChatterBot", "NUMBER", "tar", "NUMBER", "gz", "Writing", "tmp", "easy_install", "g", "NUMBER", "jhui_", "NUMBER", "ChatterBot", "NUMBER", "setup", "NUMBER", "cfg", "Running", "ChatterBot", "NUMBER", "setup", "NUMBER", "py", "q", "bdist_egg", "dist", "dir", "tmp", "easy_install", "g", "NUMBER", "jhui_", "NUMBER", "ChatterBot", "NUMBER", "egg", "dist", "tmp", "pb", "NUMBER", "q", "NUMBER", "e", "NUMBER", "h", "Traceback", "most", "recent", "call", "last", "File", "usr", "lib", "python", "NUMBER", "dist", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "save_modules", "yield", "saved", "File", "usr", "lib", "python", "NUMBER", "dist", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "setup_context", "yield", "File", "usr", "lib", "python", "NUMBER", "dist", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "run_setup", "DirectorySandbox", "setup_dir", "NUMBER", "run", "runner", "File", "usr", "lib", "python", "NUMBER", "dist", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "run", "return", "func", "File", "usr", "lib", "python", "NUMBER", "dist", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "runner", "_execfile", "setup_script", "ns", "File", "usr", "lib", "python", "NUMBER", "dist", "package", "setuptools", "sandbox", "NUMBER", "py", "line", "NUMBER", "in", "_execfile", "exec", "code", "globals", "locals", "File", "tmp", "easy_install", "g", "NUMBER", "jhui_", "NUMBER", "ChatterBot", "NUMBER", "setup", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "import", "sys", "File", "tmp", "easy_install", "g", "NUMBER", "jhui_", "NUMBER", "ChatterBot", "NUMBER", "chatterbot", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "File", "tmp", "easy_install", "g", "NUMBER", "jhui_", "NUMBER", "ChatterBot", "NUMBER", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "File", "tmp", "easy_install", "g", "NUMBER", "jhui_", "NUMBER", "ChatterBot", "NUMBER", "chatterbot", "adapters", "storage", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "File", "tmp", "easy_install", "g", "NUMBER", "jhui_", "NUMBER", "ChatterBot", "NUMBER", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "ImportError", "No", "module", "named", "jsondb", "From", "the", "log", "I", "observed", "that", "setuptools", "downloaded", "ChatterBot", "NUMBER", "tar", "NUMBER", "gz", "and", "tried", "to", "install", "it", "use", "its", "setup", "NUMBER", "py", "file", "but", "since", "it", "imported", "chatterbot", "loads", "__init__", "NUMBER", "py", "to", "get", "__author__", "__email__", "and", "__version__", "variables", "it", "crashed", "because", "when", "__init__", "NUMBER", "py", "executed", "the", "instruction", "from", "NUMBER", "chatterbot", "import", "ChatBot", "it", "couldn", "t", "find", "jsondb", "module", "due", "to", "it", "s", "wasn", "t", "install", "yet", "NUMBER", "After", "this", "problem", "I", "decided", "to", "download", "chatterbot", "directly", "from", "the", "github", "repository", "and", "install", "it", "use", "its", "setup", "NUMBER", "py", "file", "and", "see", "what", "happens", "NUMBER", "The", "installation", "output", "was", "the", "same", "that", "the", "shown", "above", "with", "the", "same", "error", "NUMBER", "So", "I", "modify", "the", "__init__", "NUMBER", "py", "file", "in", "chatterbot", "to", "avoid", "the", "import", "if", "the", "executed", "file", "be", "setup", "NUMBER", "py", "import", "os", "import", "sys", "script_name", "os", "NUMBER", "path", "NUMBER", "basename", "sys", "NUMBER", "argv", "NUMBER", "if", "script_name", "setup", "NUMBER", "py", "from", "NUMBER", "chatterbot", "import", "ChatBot", "__version__", "NUMBER", "__author__", "Gunther", "Cox", "__email__", "gunthercx", "gmail", "NUMBER", "com", "And", "the", "installation", "use", "setup", "NUMBER", "py", "was", "successful", "NUMBER", "In", "another", "hand", "if", "I", "install", "chatterbot", "first", "use", "pip", "install", "chatterbot", "I", "don", "t", "get", "any", "error", "and", "everything", "be", "ok", "but", "I", "would", "like", "it", "could", "be", "install", "use", "install_requires", "in", "my", "setup", "NUMBER", "py", "file", "to", "automate", "this", "process", "NUMBER", "Thanks", "to", "you", "NUMBER", "I", "be", "use", "ChatterBot", "as", "a", "feature", "in", "a", "Kik", "Bot", "I", "ve", "be", "developing", "as", "a", "hobby", "NUMBER", "As", "ChatterBot", "learns", "things", "from", "users", "talking", "to", "it", "it", "can", "learn", "some", "not", "so", "great", "things", "some", "of", "which", "end", "up", "violating", "the", "Kik", "terms", "of", "service", "for", "bots", "NUMBER", "I", "would", "like", "to", "be", "able", "to", "completely", "purge", "the", "database", "and", "reteach", "from", "the", "corpus", "via", "a", "special", "command", "only", "I", "have", "access", "to", "but", "I", "m", "not", "sure", "how", "I", "would", "go", "about", "doing", "this", "NUMBER", "Can", "I", "just", "delete", "the", "db", "file", "while", "the", "script", "be", "run", "or", "do", "I", "need", "to", "do", "something", "special", "awesome", "thanks", "how", "do", "I", "generate", "a", "new", "database", "without", "reinstatiating", "the", "ChatBot", "yeah", "but", "I", "was", "wondering", "if", "there", "was", "a", "way", "to", "regenerate", "it", "without", "restarting", "reinstantiating", "Ok", "I", "worked", "around", "this", "by", "instantiating", "another", "ChatBot", "without", "get", "rid", "of", "the", "already", "exist", "one", "NUMBER", "That", "generate", "the", "database", "I", "needed", "to", "keep", "use", "the", "one", "I", "had", "NUMBER", "I", "needed", "the", "actually", "database", "file", "NUMBER", "when", "I", "drop", "it", "with", "the", "earlier", "command", "I", "couldn", "t", "run", "any", "subsequent", "commands", "because", "the", "file", "was", "miss", "NUMBER", "A", "file", "with", "Q", "A", "information", "about", "linguistics", "A", "few", "possible", "curses", "from", "the", "user", "and", "a", "polite", "response", "from", "the", "system", "NUMBER", "Hi", "I", "have", "created", "a", "new", "module", "based", "on", "your", "instructions", "for", "a", "Logic", "adapter", "but", "when", "I", "run", "the", "bot", "this", "error", "appears", "I", "have", "add", "it", "in", "_init_", "NUMBER", "py", "python", "Traceback", "most", "recent", "call", "last", "File", "chatbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "LocationLogicAdapter", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "__init__", "self", "NUMBER", "add_adapter", "adapter", "kwargs", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "add_adapter", "NewAdapter", "import_module", "adapter", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "utils", "module_loading", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "module", "importlib", "NUMBER", "import_module", "module_path", "File", "C", "Python", "NUMBER", "lib", "importlib", "__init__", "NUMBER", "py", "line", "NUMBER", "in", "import_module", "__import__", "name", "ImportError", "No", "module", "named", "LocationLogicAdapterchatterbot", "NUMBER", "adapters", "NUMBER", "logic", "Quick", "guess", "you", "appear", "to", "be", "miss", "a", "trail", "comma", "on", "line", "NUMBER", "of", "chatbot", "NUMBER", "py", "and", "as", "a", "result", "your", "settings", "for", "multiple", "logic", "adapters", "be", "be", "interpreted", "as", "one", "single", "invalid", "logic", "adapter", "NUMBER", "This", "be", "happening", "because", "otherwise", "it", "treats", "it", "as", "one", "long", "string", "LINK", "instead", "of", "multiple", "strings", "NUMBER", "kevin", "brown", "you", "be", "right", "and", "I", "be", "stupid", "Now", "it", "works", "NUMBER", "Thanks", "I", "think", "it", "would", "be", "valuable", "to", "attempt", "upgrade", "the", "bot", "with", "some", "dialog", "tree", "capabilities", "NUMBER", "It", "maybe", "as", "simple", "as", "something", "like", "this", "LINK", "This", "app", "LINK", "looks", "more", "robust", "support", "multiple", "languages", "NUMBER", "celi", "NUMBER", "dweauwns", "LINK", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "c", "NUMBER", "ba", "NUMBER", "fd", "NUMBER", "jpg", "If", "there", "was", "an", "appealing", "UI", "editor", "for", "this", "it", "would", "further", "grow", "the", "dialog", "tree", "database", "NUMBER", "It", "will", "be", "interesting", "to", "see", "Facebook", "s", "ui", "for", "this", "NUMBER", "File", "with", "a", "few", "compliments", "in", "Portuguese", "I", "ve", "get", "a", "NUMBER", "NUMBER", "line", "JSON", "file", "for", "training", "data", "and", "it", "seems", "to", "hang", "in", "training", "NUMBER", "Is", "there", "a", "limit", "Should", "I", "split", "it", "up", "Ah", "thanks", "NUMBER", "That", "should", "help", "NUMBER", "Also", "check", "out", "NUMBER", "Using", "ultrajson", "and", "MongoDB", "solve", "the", "issue", "for", "me", "a", "la", "from", "chatterbot", "import", "ChatBot", "import", "ujson", "bot", "ChatBot", "Terminal", "storage_adapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "orage", "NUMBER", "MongoDatabaseAdapter", "io_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "io", "NUMBER", "TerminalAdapter", "database", "whatever", "f", "open", "all", "NUMBER", "json", "all_json", "ujson", "NUMBER", "loads", "f", "NUMBER", "read", "bot", "NUMBER", "train", "all_json", "Any", "timing", "details", "on", "how", "long", "this", "took", "to", "train", "Not", "long", "NUMBER", "Under", "a", "minute", "NUMBER", "Wonder", "how", "a", "big", "database", "like", "this", "will", "affect", "closest", "meaning", "adapters", "NUMBER", "cd", "rum", "Which", "trainer", "did", "you", "use", "when", "training", "the", "data", "At", "first", "I", "tried", "use", "the", "ChatterBotCorpusTrainer", "and", "tried", "training", "the", "chatterbot", "use", "the", "dictionary", "I", "extracted", "from", "the", "JSON", "file", "but", "I", "get", "the", "error", "AttributeError", "dict", "object", "has", "no", "attribute", "split", "NUMBER", "I", "then", "tried", "use", "the", "ListTrainer", "and", "converted", "the", "dictionary", "into", "a", "list", "but", "while", "training", "the", "data", "MongoDB", "force", "quit", "because", "there", "were", "too", "many", "recursive", "calls", "during", "training", "NUMBER", "Because", "my", "computer", "have", "to", "shutdown", "NUMBER", "How", "do", "I", "continue", "to", "train", "my", "bot", "after", "restart", "the", "script", "If", "I", "m", "correct", "it", "should", "be", "either", "saved", "to", "a", "database", "On", "Thu", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Larry", "NUMBER", "notifications", "github", "NUMBER", "com", "write", "Because", "my", "computer", "have", "to", "shutdown", "NUMBER", "How", "do", "I", "continue", "to", "train", "my", "bot", "after", "restart", "the", "script", "You", "be", "receiving", "this", "because", "you", "be", "subscribed", "to", "this", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "Store", "the", "data", "and", "train", "the", "bot", "every", "time", "gunthercox", "Thanks", "NUMBER", "In", "this", "case", "How", "do", "I", "remove", "what", "the", "bot", "have", "learned", "and", "retrain", "it", "gunthercox", "Thanks", "NUMBER", "I", "have", "use", "it", "and", "it", "s", "awesome", "NUMBER", "Hi", "I", "m", "wondering", "be", "there", "be", "any", "simple", "ways", "to", "prevent", "the", "bot", "from", "repeating", "itself", "too", "much", "Maybe", "keep", "a", "record", "of", "the", "two", "or", "three", "previous", "exchanges", "and", "returning", "an", "output", "that", "could", "be", "a", "bit", "less", "appropriate", "if", "the", "most", "appropriate", "has", "be", "returned", "too", "recently", "What", "do", "you", "think", "Amazing", "work", "btw", "NUMBER", "NUMBER", "Ok", "maybe", "it", "s", "not", "the", "cleanest", "way", "to", "do", "but", "I", "have", "something", "NUMBER", "At", "least", "it", "s", "a", "start", "NUMBER", "I", "modify", "two", "function", "process", "in", "base_match", "NUMBER", "py", "and", "get", "in", "closest_match", "NUMBER", "py", "For", "get", "def", "get", "self", "input_statement", "statement_list", "None", "Takes", "a", "statement", "string", "and", "a", "list", "of", "statement", "strings", "NUMBER", "Returns", "the", "closest", "matching", "statement", "from", "the", "list", "NUMBER", "statement_list", "self", "NUMBER", "get_available_statements", "statement_list", "entries", "in", "json", "db", "if", "not", "statement_list", "if", "self", "NUMBER", "has_storage_context", "Use", "a", "randomly", "pick", "statement", "return", "NUMBER", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "get_random", "else", "raise", "EmptyDatasetException", "Get", "the", "text", "of", "each", "statement", "text_of_all_statements", "for", "statement", "in", "statement_list", "text_of_all_statements", "NUMBER", "append", "statement", "NUMBER", "text", "Make", "a", "list", "of", "matches", "ordered", "by", "confidence", "matches", "process", "NUMBER", "extract", "input_statement", "NUMBER", "text", "text_of_all_statements", "results", "confidence", "NUMBER", "next", "s", "for", "s", "in", "statement_list", "if", "s", "NUMBER", "text", "match", "None", "for", "match", "confidence", "in", "matches", "return", "results", "For", "process", "def", "process", "self", "input_statement", "recent_statements", "self", "NUMBER", "context", "NUMBER", "recent_statements", "NUMBER", "get", "the", "ten", "last", "recent", "statements", "results", "self", "NUMBER", "get", "input_statement", "for", "e", "in", "results", "confidence", "e", "NUMBER", "closest_match", "e", "NUMBER", "Save", "any", "update", "made", "to", "the", "statement", "by", "the", "logic", "adapter", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "update", "closest_match", "Get", "all", "statements", "that", "be", "in", "response", "to", "the", "closest", "match", "response_list", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "filter", "in_response_to__contains", "closest_match", "NUMBER", "text", "if", "response_list", "response", "self", "NUMBER", "break_tie", "response_list", "self", "NUMBER", "tie_breaking_method", "else", "response", "self", "NUMBER", "context", "NUMBER", "orage", "NUMBER", "get_random", "if", "response", "not", "in", "recent_statements", "break", "break", "the", "loop", "if", "the", "response", "has", "not", "be", "said", "in", "the", "ten", "last", "exchanges", "return", "confidence", "response", "I", "be", "finding", "it", "valuable", "to", "throw", "some", "randomness", "in", "a", "conversation", "NUMBER", "be", "there", "an", "efficient", "way", "to", "grab", "a", "random", "line", "from", "the", "database", "Sorry", "I", "miss", "this", "you", "can", "close", "it", "NUMBER", "I", "find", "get_random", "self", "in", "the", "storage", "adapters", "NUMBER", "I", "copied", "an", "example", "but", "get", "this", "when", "executing", "it", "Traceback", "most", "recent", "call", "last", "File", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "File", "root", "taartbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "ImportError", "cannot", "import", "name", "ChatBot", "Thanks", "I", "was", "having", "same", "problem", "Is", "there", "a", "means", "by", "which", "to", "combine", "two", "learned", "databases", "NUMBER", "it", "would", "seem", "to", "me", "that", "this", "be", "a", "critical", "component", "to", "store", "learned", "responses", "and", "transfer", "and", "combine", "them", "with", "other", "learned", "interactions", "Is", "this", "something", "that", "be", "covered", "When", "work", "with", "multiple", "MB", "file", "in", "the", "corpus", "JSON", "limps", "along", "loading", "them", "slowly", "NUMBER", "I", "have", "find", "that", "work", "with", "a", "faster", "JSON", "handle", "library", "simplejson", "ultrajson", "speeds", "things", "up", "significantly", "NUMBER", "Perhaps", "this", "be", "part", "of", "a", "larger", "ticket", "on", "speed", "of", "the", "algorithms", "in", "general", "NUMBER", "While", "finding", "strings", "in", "a", "dictionary", "be", "relatively", "quick", "for", "small", "databases", "it", "seems", "that", "with", "a", "large", "corpus", "over", "NUMBER", "kb", "json", "then", "the", "bot", "takes", "a", "long", "time", "to", "respond", "NUMBER", "any", "experience", "with", "this", "Yes", "it", "seems", "that", "MongoDB", "be", "a", "good", "solution", "here", "to", "speed", "things", "up", "considerably", "NUMBER", "A", "little", "more", "overhead", "for", "the", "installation", "but", "well", "worth", "it", "when", "use", "big", "data", "sets", "NUMBER", "Much", "appreciated", "NUMBER", "Perhaps", "there", "be", "even", "a", "way", "to", "increase", "the", "speed", "of", "training", "a", "MongoDB", "backed", "model", "as", "well", "Perhaps", "update_one", "be", "faster", "than", "replace_one", "in", "the", "storage", "adapter", "NUMBER", "Hi", "I", "m", "trying", "to", "make", "the", "twitter", "example", "work", "but", "without", "success", "NUMBER", "Connection", "to", "Twitter", "work", "s", "correctly", "strace", "show", "s", "that", "chatterbox", "be", "polling", "data", "constantly", "from", "twitter", "but", "after", "that", "it", "just", "repeat", "a", "message", "which", "were", "sent", "so", "for", "example", "python", "NUMBER", "bum", "NUMBER", "py", "Type", "something", "to", "begin", "NUMBER", "hello", "hello", "Maybe", "I", "m", "doing", "something", "wrong", "NUMBER", "But", "I", "m", "stucked", "and", "can", "t", "move", "forward", "NUMBER", "Code", "be", "as", "the", "twitter_storage", "example", "without", "any", "change", "NUMBER", "Thank", "you", "gunthercox", "looking", "forward", "I", "would", "suggest", "that", "for", "storage", "of", "sentences", "use", "a", "dict", "instead", "of", "a", "list", "NUMBER", "Simple", "enough", "Thanks", "When", "this", "be", "implement", "it", "d", "probably", "be", "even", "quickier", "to", "respond", "to", "input", "add", "output", "to", "learned", "sentences", "and", "etc", "Hi", "everyone", "Great", "tool", "I", "was", "wondering", "if", "there", "was", "any", "consideration", "for", "add", "in", "the", "ability", "to", "use", "AIML", "file", "I", "guess", "these", "can", "be", "converted", "to", "JSON", "file", "but", "that", "seems", "like", "a", "big", "work", "around", "NUMBER", "Thanks", "Awesome", "I", "have", "be", "thinking", "about", "this", "issue", "with", "the", "wildcards", "and", "would", "be", "very", "interested", "in", "hearing", "about", "the", "approach", "you", "come", "up", "with", "NUMBER", "I", "feel", "like", "it", "may", "be", "similar", "to", "your", "ClosetMatchAdapter", "class", "but", "probably", "a", "lot", "more", "complicated", "NUMBER", "I", "was", "even", "thinking", "that", "each", "topic", "can", "get", "a", "class", "like", "TimeLogicAdapter", "with", "some", "NaiveBayesClassifier", "but", "that", "be", "probably", "overkill", "NUMBER", "Also", "a", "lot", "of", "the", "AIML", "file", "LINK", "en", "us", "foundation", "alice", "have", "a", "notion", "of", "saved", "state", "NUMBER", "For", "example", "you", "can", "tell", "the", "bot", "your", "name", "and", "then", "it", "saves", "that", "fact", "and", "can", "recall", "it", "later", "in", "the", "conversation", "NUMBER", "Is", "something", "like", "this", "support", "in", "the", "current", "code", "BTW", "I", "have", "be", "poking", "around", "a", "bit", "and", "find", "an", "open", "source", "AIML", "parser", "and", "bot", "LINK", "They", "have", "a", "pretty", "complex", "parser", "and", "string", "matcher", "in", "the", "file", "AimlParser", "NUMBER", "py", "and", "PatternMgr", "NUMBER", "py", "Hi", "There", "be", "another", "project", "LINK", "NUMBER", "be", "in", "very", "early", "stages", "for", "AIML", "NUMBER", "it", "be", "a", "porting", "of", "program", "AB", "JAVA", "NUMBER", "With", "pyAIML", "I", "believe", "can", "be", "treated", "like", "any", "other", "logic", "adapter", "NUMBER", "What", "you", "think", "davizucon", "Yes", "it", "was", "pretty", "easy", "to", "use", "aiml", "as", "a", "logic", "adapter", "NUMBER", "I", "use", "the", "AIML", "interpreter", "here", "LINK", "which", "be", "AIML", "NUMBER", "standard", "NUMBER", "It", "was", "tricky", "to", "calculate", "the", "confidence", "level", "of", "the", "reply", "though", "as", "it", "be", "not", "part", "of", "the", "AIML", "standard", "NUMBER", "gopiwh", "NUMBER", "did", "you", "go", "any", "further", "with", "integration", "Basic", "integration", "without", "any", "development", "on", "the", "confidence", "NUMBER", "Had", "issue", "with", "the", "original", "library", "as", "it", "was", "for", "NUMBER", "Found", "a", "port", "to", "NUMBER", "that", "worked", "LINK", "from", "__future__", "import", "unicode_literals", "from", "chatterbot", "NUMBER", "logic", "import", "LogicAdapter", "from", "chatterbot", "NUMBER", "conversation", "import", "Statement", "import", "aiml", "class", "AIMLEvaluation", "LogicAdapter", "def", "__init__", "self", "kwargs", "from", "nltk", "import", "NaiveBayesClassifier", "self", "NUMBER", "kernel", "aiml", "NUMBER", "Kernel", "self", "NUMBER", "kernel", "NUMBER", "learn", "standard", "std", "NUMBER", "percent", "NUMBER", "aiml", "def", "process", "self", "statement", "from", "chatterbot", "NUMBER", "conversation", "import", "Statement", "responseData", "self", "NUMBER", "kernel", "NUMBER", "respond", "statement", "NUMBER", "text", "NUMBER", "lower", "response", "Statement", "responseData", "response", "NUMBER", "confidence", "NUMBER", "return", "response", "I", "tried", "installing", "with", "pip", "but", "python", "s", "not", "registering", "so", "I", "put", "it", "in", "the", "directory", "and", "it", "s", "now", "having", "troubles", "with", "py", "Traceback", "most", "recent", "call", "last", "File", "index", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "chatterbot", "import", "ChatBot", "File", "media", "solarpolarman", "hdd", "code", "discord", "markov", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "from", "NUMBER", "adapters", "NUMBER", "exception", "import", "UnknownAdapterTypeException", "Hello", "I", "use", "the", "Italian", "data", "to", "train", "the", "system", "NUMBER", "My", "platform", "be", "Windows", "NUMBER", "with", "Python", "NUMBER", "With", "the", "following", "example", "i", "have", "no", "problem", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "BotItaliano", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "italian", "chatbot", "NUMBER", "get_response", "Ciao", "come", "va", "But", "if", "i", "use", "the", "get_response", "with", "these", "words", "in", "particular", "the", "\u00e8", "character", "chatbot", "NUMBER", "get_response", "la", "vita", "\u00e8", "vita", "i", "have", "the", "error", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "adapters", "logic", "closest_match", "NUMBER", "py", "NUMBER", "UnicodeWarning", "Unicode", "equal", "comparison", "fail", "to", "convert", "both", "argument", "to", "Unicode", "interpreting", "them", "as", "be", "unequal", "if", "input_statement", "NUMBER", "text", "in", "text_of_all_statements", "C", "Python", "NUMBER", "lib", "site", "package", "jsondb", "db", "NUMBER", "py", "NUMBER", "UnicodeWarning", "Unicode", "equal", "comparison", "fail", "to", "convert", "both", "argument", "to", "Unicode", "interpreting", "them", "as", "be", "unequal", "if", "key", "in", "obj", "NUMBER", "keys", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "self", "NUMBER", "orage", "NUMBER", "update", "input_statement", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "update", "self", "NUMBER", "database", "NUMBER", "data", "key", "statement", "NUMBER", "text", "value", "data", "File", "C", "Python", "NUMBER", "lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "data", "self", "NUMBER", "_set_content", "key", "value", "File", "C", "Python", "NUMBER", "lib", "site", "package", "jsondb", "db", "NUMBER", "py", "line", "NUMBER", "in", "_set_content", "data", "write_data", "self", "NUMBER", "path", "obj", "File", "C", "Python", "NUMBER", "lib", "site", "package", "jsondb", "file_writer", "NUMBER", "py", "line", "NUMBER", "in", "write_data", "db", "NUMBER", "write", "encode", "obj", "File", "C", "Python", "NUMBER", "lib", "site", "package", "jsondb", "compat", "NUMBER", "py", "line", "NUMBER", "in", "encode", "return", "json_encode", "value", "File", "C", "Python", "NUMBER", "lib", "json__init__", "NUMBER", "py", "line", "NUMBER", "in", "dumps", "return", "_default_encoder", "NUMBER", "encode", "obj", "File", "C", "Python", "NUMBER", "lib", "json", "encoder", "NUMBER", "py", "line", "NUMBER", "in", "encode", "chunks", "self", "NUMBER", "iterencode", "o", "_one_shot", "True", "File", "C", "Python", "NUMBER", "lib", "json", "encoder", "NUMBER", "py", "line", "NUMBER", "in", "iterencode", "return", "_iterencode", "o", "NUMBER", "UnicodeDecodeError", "utf", "NUMBER", "codec", "can", "t", "decode", "byte", "NUMBER", "x", "NUMBER", "a", "in", "position", "NUMBER", "invalid", "start", "byte", "If", "i", "use", "Python", "NUMBER", "i", "have", "not", "this", "error", "but", "when", "i", "start", "to", "have", "response", "i", "see", "strange", "characters", "Cos", "\u00c3", "che", "vuoi", "sapere", "it", "should", "be", "Cos", "\u00e8", "che", "vuoi", "sapere", "I", "have", "put", "the", "code", "in", "a", "file", "test", "NUMBER", "py", "and", "no", "result", "C", "Python", "NUMBER", "python", "test", "NUMBER", "py", "File", "test", "NUMBER", "py", "line", "NUMBER", "chatbot", "NUMBER", "get_response", "u", "la", "vita", "\u00de", "vita", "SyntaxError", "unicode", "error", "utf", "NUMBER", "codec", "can", "t", "decode", "byte", "NUMBER", "xe", "NUMBER", "in", "position", "NUMBER", "unexpect", "end", "of", "data", "It", "works", "After", "i", "add", "the", "header", "and", "i", "have", "saved", "the", "file", "in", "UNICODE", "UTF", "NUMBER", "Format", "NUMBER", "It", "be", "not", "enough", "to", "simply", "add", "the", "header", "NUMBER", "Very", "Thanks", "Additional", "training", "data", "A", "little", "correction", "add", "information", "of", "Portuguese", "support", "on", "corpus", "NUMBER", "Creating", "readme", "in", "portuguese", "NUMBER", "I", "don", "t", "know", "the", "best", "form", "to", "do", "this", "because", "of", "this", "I", "have", "created", "a", "new", "directory", "call", "support", "for", "add", "file", "in", "portuguese", "NUMBER", "If", "you", "send", "me", "the", "font", "name", "of", "main", "banner", "I", "translate", "the", "image", "description", "NUMBER", "Main", "Banner", "in", "portuguese", "to", "aprove", "NUMBER", "chatterbot_pt", "LINK", "cbe", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "f", "NUMBER", "c", "a", "NUMBER", "c", "NUMBER", "fe", "NUMBER", "png", "Is", "there", "an", "easy", "way", "to", "delete", "a", "response", "from", "a", "Mongo", "database", "Say", "for", "example", "I", "have", "a", "public", "bot", "and", "someone", "enters", "an", "inappropriate", "response", "I", "d", "like", "to", "delete", "NUMBER", "Great", "thanks", "NUMBER", "Great", "thanks", "a", "lot", "I", "ll", "take", "a", "look", "On", "Sat", "Feb", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Gunther", "Cox", "notifications", "github", "NUMBER", "com", "write", "The", "Penultimate", "Defenestrator", "LINK", "Penultimate", "Defenestrator", "NUMBER", "LINK", "Adds", "a", "method", "for", "remove", "statements", "NUMBER", "It", "will", "be", "include", "in", "the", "next", "release", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "I", "have", "change", "the", "database", "configuration", "to", "be", "better", "suited", "to", "future", "logic", "adapters", "needs", "NUMBER", "The", "change", "include", "NUMBER", "Add", "a", "database_dir", "variable", "This", "specifies", "the", "directory", "for", "the", "database", "as", "well", "as", "other", "data", "that", "be", "created", "when", "use", "ChatterBot", "NUMBER", "Update", "the", "database", "configuration", "in", "jsondatabase", "NUMBER", "py", "to", "use", "the", "new", "format", "This", "be", "a", "much", "needed", "change", "for", "new", "logic", "adapters", "which", "require", "data", "file", "to", "be", "created", "and", "edit", "NUMBER", "That", "be", "true", "but", "for", "a", "number", "of", "logic", "adapters", "additional", "file", "need", "to", "be", "created", "once", "they", "be", "use", "dynamic", "training", "data", "be", "a", "great", "example", "NUMBER", "Because", "there", "be", "multiple", "additional", "file", "that", "need", "to", "be", "generate", "a", "single", "directory", "to", "hold", "all", "of", "those", "file", "makes", "the", "system", "look", "cleaner", "NUMBER", "I", "have", "update", "the", "PR", "to", "remove", "the", "code", "that", "could", "conflict", "with", "the", "use", "of", "a", "Mongo", "db", "NUMBER", "With", "the", "update", "ChatterBot", "has", "a", "common", "easily", "set", "location", "to", "store", "file", "generate", "by", "ChatterBot", "NUMBER", "At", "the", "moment", "no", "adapters", "need", "additional", "file", "NUMBER", "In", "the", "near", "future", "though", "I", "anticipate", "use", "multiple", "additional", "file", "for", "logic", "adapters", "training", "but", "this", "be", "a", "complicated", "addition", "and", "takes", "time", "NUMBER", "Further", "it", "be", "better", "that", "we", "implement", "this", "now", "as", "oppose", "to", "another", "contributor", "having", "to", "figure", "it", "out", "on", "the", "spot", "when", "sending", "a", "PR", "NUMBER", "Traceback", "most", "recent", "call", "last", "File", "speech", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "chatvoice", "chatbot", "NUMBER", "get_response", "takeString", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "existing_statement", "self", "NUMBER", "orage", "NUMBER", "find", "input_statement", "NUMBER", "text", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "find", "response_list", "self", "NUMBER", "deserialize_responses", "values", "in_response_to", "KeyError", "in_response_to", "The", "speech", "adapter", "that", "I", "currently", "have", "implement", "be", "in", "the", "file", "tts", "NUMBER", "py", "NUMBER", "I", "believe", "he", "has", "created", "a", "custom", "wrapper", "on", "top", "of", "the", "default", "implementation", "but", "I", "cannot", "be", "sure", "unless", "I", "can", "see", "the", "code", "NUMBER", "roxxup", "What", "version", "of", "ChatterBot", "be", "you", "use", "Newest", "Also", "maybe", "you", "could", "provide", "us", "with", "the", "database", "you", "be", "having", "issue", "with", "Thanks", "DarkmatterVale", "Thanks", "for", "helping", "me", "NUMBER", "i", "had", "database", "error", "NUMBER", "When", "I", "be", "write", "test", "for", "logic", "adapters", "I", "get", "error", "relating", "to", "the", "self", "NUMBER", "context", "variable", "be", "NoneType", "NUMBER", "gunthercox", "Any", "ideas", "how", "to", "implement", "context", "in", "test", "I", "be", "write", "test", "for", "logic", "adapters", "I", "be", "creating", "and", "I", "have", "to", "find", "a", "workaround", "because", "the", "code", "which", "would", "work", "on", "all", "actual", "systems", "breaks", "in", "test", "NUMBER", "This", "be", "due", "to", "the", "context", "variable", "not", "be", "set", "for", "adapters", "in", "test", "NUMBER", "An", "example", "of", "when", "this", "occur", "be", "if", "I", "have", "self", "NUMBER", "context", "NUMBER", "io", "NUMBER", "process", "NUMBER", "it", "will", "throw", "an", "error", "because", "self", "NUMBER", "context", "be", "of", "NoneType", "NUMBER", "I", "see", "what", "you", "be", "saying", "NUMBER", "I", "be", "going", "to", "close", "this", "issue", "then", "because", "this", "will", "solve", "my", "problem", "NUMBER", "This", "PR", "add", "a", "simple", "developer", "assistant", "NUMBER", "A", "lot", "more", "work", "be", "needed", "to", "give", "it", "flexible", "command", "understanding", "but", "it", "can", "currently", "run", "python", "program", "located", "on", "the", "user", "s", "computer", "with", "ease", "NUMBER", "I", "will", "add", "test", "and", "update", "the", "PR", "NUMBER", "gunthercox", "I", "have", "made", "a", "number", "of", "large", "update", "to", "the", "adapter", "today", "and", "I", "think", "it", "be", "ready", "to", "be", "add", "in", "NUMBER", "If", "you", "would", "like", "to", "test", "the", "final", "product", "you", "can", "do", "so", "by", "run", "the", "following", "command", "inside", "a", "chatbot", "instance", "run", "path_to_your_python_program", "NUMBER", "py", "There", "be", "a", "couple", "of", "constraints", "so", "far", "however", "including", "NUMBER", "Only", "python", "program", "work", "and", "there", "be", "no", "auto", "language", "detect", "NUMBER", "You", "must", "use", "the", "command", "run", "although", "it", "can", "be", "use", "in", "multiple", "formats", "An", "example", "of", "the", "output", "after", "run", "the", "file", "once", "before", "this", "test", "Bot", "Type", "something", "to", "begin", "NUMBER", "Me", "run", "main", "NUMBER", "py", "Bot", "Would", "you", "like", "to", "use", "the", "path", "Users", "vtolpegin", "github", "regex", "NUMBER", "dummies", "examples", "accuracy_tester", "Me", "yes", "After", "some", "thought", "I", "do", "not", "believe", "this", "be", "consistent", "with", "the", "current", "ChatterBot", "as", "it", "be", "not", "a", "chat", "adapter", "but", "a", "developer", "assistant", "NUMBER", "gunthercox", "I", "will", "create", "a", "new", "repository", "and", "put", "the", "code", "in", "there", "NUMBER", "I", "have", "also", "thought", "about", "creating", "something", "similar", "to", "this", "extensively", "although", "my", "plan", "be", "a", "little", "more", "ambitious", "than", "yours", "NUMBER", "You", "should", "be", "able", "to", "find", "the", "current", "project", "at", "LINK", "This", "PR", "add", "a", "simple", "weather", "forecast", "logic", "adapter", "NUMBER", "There", "be", "a", "couple", "of", "issue", "however", "including", "NUMBER", "Warnings", "that", "need", "to", "be", "squashed", "NUMBER", "Ideally", "we", "remove", "use", "python", "forecastio", "and", "create", "our", "own", "implementation", "but", "that", "be", "work", "for", "the", "next", "version", "an", "enhancement", "and", "not", "the", "initial", "version", "Also", "since", "it", "requires", "an", "API", "key", "we", "cannot", "create", "test", "for", "the", "adapter", "NUMBER", "This", "PR", "add", "a", "named", "entity", "chunker", "to", "Chatterbot", "s", "utilities", "NUMBER", "gunthercox", "Any", "ideas", "why", "the", "travis", "ci", "build", "isn", "t", "work", "I", "test", "it", "on", "my", "end", "and", "it", "works", "fine", "on", "my", "machine", "NUMBER", "It", "be", "a", "weird", "error", "because", "it", "works", "fine", "on", "Python", "NUMBER", "NUMBER", "NUMBER", "and", "NUMBER", "Can", "you", "reproduce", "the", "error", "on", "your", "machine", "I", "read", "online", "that", "numpy", "was", "required", "to", "be", "on", "the", "system", "but", "not", "imported", "into", "the", "program", "you", "be", "use", "the", "chunker", "in", "NUMBER", "And", "I", "believe", "I", "get", "an", "error", "with", "out", "it", "in", "requirements", "NUMBER", "When", "I", "remove", "numpy", "from", "requirements", "it", "throw", "a", "no", "module", "named", "numpy", "error", "NUMBER", "But", "this", "be", "only", "on", "the", "pypy", "test", "so", "maybe", "it", "be", "something", "wrong", "on", "their", "end", "I", "m", "not", "really", "sure", "why", "it", "works", "with", "python", "NUMBER", "NUMBER", "NUMBER", "and", "NUMBER", "while", "it", "doesn", "t", "work", "with", "pypy", "do", "they", "each", "run", "different", "test", "Sorry", "for", "all", "the", "spam", "emails", "from", "Travis", "Ci", "NUMBER", "Trying", "different", "things", "to", "see", "if", "numpy", "will", "install", "NUMBER", "I", "have", "not", "be", "able", "to", "find", "a", "solution", "so", "far", "NUMBER", "gunthercox", "Using", "sudo", "throw", "a", "permission", "error", "NUMBER", "If", "I", "remove", "sudo", "apt", "get", "doesn", "t", "work", "NUMBER", "I", "ll", "leave", "it", "at", "what", "you", "asked", "however", "so", "you", "can", "see", "the", "output", "of", "the", "most", "recent", "build", "yourself", "NUMBER", "That", "do", "not", "work", "either", "as", "be", "visible", "by", "the", "travis", "build", "NUMBER", "gunthercox", "Still", "doesn", "t", "work", "NUMBER", "In", "order", "to", "install", "package", "use", "APT", "on", "the", "container", "based", "build", "so", "by", "default", "you", "need", "to", "use", "the", "APT", "addon", "LINK", "ci", "NUMBER", "com", "user", "installing", "dependencies", "Installing", "Packages", "with", "the", "APT", "Addon", "NUMBER", "As", "far", "as", "get", "numpy", "install", "under", "pypy", "you", "may", "want", "to", "look", "at", "LINK", "ci", "travis", "ci", "issue", "NUMBER", "kevin", "brown", "I", "add", "the", "APT", "addon", "as", "suggested", "but", "it", "still", "doesn", "t", "build", "NUMBER", "Am", "I", "doing", "it", "incorrectly", "Most", "of", "the", "documentation", "be", "pretty", "simple", "but", "the", "structure", "of", "ChatterBot", "be", "pretty", "straightforward", "NUMBER", "gunthercox", "I", "have", "update", "the", "docstrings", "do", "they", "look", "better", "now", "gunthercox", "Do", "you", "have", "any", "more", "comments", "If", "not", "can", "we", "merge", "this", "in", "At", "the", "moment", "there", "be", "no", "documentation", "for", "each", "class", "NUMBER", "I", "suggest", "that", "we", "add", "a", "quote", "block", "I", "can", "t", "remember", "the", "official", "name", "for", "the", "triple", "quote", "comment", "immediately", "before", "each", "class", "which", "describes", "exactly", "what", "the", "class", "s", "function", "be", "how", "it", "accomplishes", "whatever", "it", "do", "author", "etc", "NUMBER", "I", "believe", "this", "will", "become", "very", "important", "to", "help", "keep", "track", "of", "what", "each", "class", "do", "once", "we", "get", "complex", "logic", "adapters", "implement", "NUMBER", "For", "instance", "I", "be", "write", "a", "logic", "adapter", "for", "a", "developer", "assistant", "NUMBER", "This", "class", "will", "become", "very", "complex", "over", "time", "as", "additional", "features", "be", "implement", "and", "a", "summary", "of", "how", "it", "works", "will", "help", "potential", "developers", "understand", "the", "code", "NUMBER", "gunthercox", "What", "do", "you", "think", "The", "official", "name", "be", "docstring", "On", "Wed", "Jan", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Vale", "notifications", "github", "NUMBER", "com", "write", "At", "the", "moment", "there", "be", "no", "documentation", "for", "each", "class", "NUMBER", "I", "suggest", "that", "we", "add", "a", "quote", "block", "I", "can", "t", "remember", "the", "official", "name", "for", "the", "triple", "quote", "comment", "immediately", "before", "each", "class", "which", "describes", "exactly", "what", "the", "class", "s", "function", "be", "how", "it", "accomplishes", "whatever", "it", "do", "author", "etc", "NUMBER", "I", "believe", "this", "will", "become", "very", "important", "to", "help", "keep", "track", "of", "what", "each", "class", "do", "once", "we", "get", "complex", "logic", "adapters", "implement", "NUMBER", "For", "instance", "I", "be", "write", "a", "logic", "adapter", "for", "a", "developer", "assistant", "NUMBER", "This", "class", "will", "become", "very", "complex", "over", "time", "as", "additional", "features", "be", "implement", "and", "a", "summary", "of", "how", "it", "works", "will", "help", "potential", "developers", "understand", "the", "code", "NUMBER", "gunthercox", "LINK", "What", "do", "you", "think", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "I", "will", "work", "on", "this", "and", "send", "a", "PR", "when", "I", "m", "do", "NUMBER", "Yes", "thank", "you", "NUMBER", "I", "add", "an", "io", "adapter", "for", "a", "TTS", "engine", "build", "in", "to", "MacOSX", "NUMBER", "Although", "I", "add", "an", "output", "adapter", "I", "have", "not", "add", "a", "corresponding", "STT", "adapter", "so", "it", "gets", "input", "use", "the", "Terminal", "NUMBER", "I", "recommend", "we", "make", "a", "change", "to", "the", "way", "io", "adapters", "be", "structured", "which", "will", "also", "solve", "the", "problem", "with", "multiple", "inputs", "in", "my", "other", "PR", "separating", "out", "input", "adapters", "and", "output", "adapters", "NUMBER", "This", "way", "the", "user", "can", "specify", "more", "precisely", "what", "they", "would", "like", "to", "use", "for", "inputs", "and", "outputs", "NUMBER", "gunthercox", "What", "do", "you", "think", "This", "be", "awesome", "NUMBER", "This", "PR", "add", "support", "for", "use", "multiple", "io", "adapters", "NUMBER", "At", "the", "moment", "I", "be", "currently", "just", "get", "input", "from", "the", "first", "io", "adapter", "NUMBER", "To", "allow", "multiple", "inputs", "we", "may", "have", "to", "restructure", "a", "couple", "of", "things", "NUMBER", "I", "haven", "t", "thought", "too", "much", "about", "it", "yet", "though", "so", "I", "m", "not", "sure", "what", "will", "have", "to", "be", "change", "NUMBER", "gunthercox", "I", "rebased", "and", "fix", "the", "conflict", "NUMBER", "This", "PR", "include", "simple", "implementations", "of", "the", "NLTK", "function", "use", "by", "the", "closest", "meaning", "adapter", "NUMBER", "The", "structure", "of", "the", "system", "makes", "it", "easy", "to", "improve", "each", "individual", "component", "very", "easily", "when", "we", "want", "to", "make", "the", "analysis", "more", "complex", "NUMBER", "gunthercox", "Yes", "that", "be", "probably", "a", "good", "idea", "I", "had", "the", "names", "including", "NLTK", "because", "I", "meant", "them", "as", "wrapper", "classes", "for", "NLTK", "s", "build", "in", "function", "but", "that", "be", "not", "really", "needed", "NUMBER", "I", "have", "change", "the", "names", "to", "match", "what", "you", "suggested", "NUMBER", "This", "PR", "separates", "the", "classifier", "out", "from", "the", "logic", "adapter", "NUMBER", "Although", "the", "current", "NaiveBayes", "classifier", "be", "pretty", "simple", "future", "classifiers", "might", "be", "much", "more", "complicated", "NUMBER", "Because", "of", "this", "separating", "the", "classifiers", "out", "will", "make", "the", "code", "much", "easier", "to", "understand", "in", "the", "future", "NUMBER", "gunthercox", "I", "know", "you", "had", "different", "ideas", "about", "this", "NUMBER", "Feel", "free", "to", "review", "and", "try", "it", "out", "NUMBER", "gunthercox", "I", "agree", "with", "you", "and", "I", "think", "at", "the", "moment", "this", "addition", "be", "not", "needed", "NUMBER", "I", "will", "close", "the", "PR", "NUMBER", "gunthercox", "Did", "it", "fix", "the", "problem", "for", "you", "Can", "you", "now", "accurately", "get", "a", "response", "from", "the", "proper", "adapter", "Regarding", "the", "issue", "with", "the", "database", "we", "can", "discuss", "that", "in", "the", "issue", "and", "not", "this", "PR", "NUMBER", "Awesome", "thank", "you", "for", "fix", "it", "I", "m", "gonna", "go", "ahead", "and", "merge", "it", "in", "then", "NUMBER", "Just", "a", "couple", "of", "minor", "change", "including", "NUMBER", "Add", "additional", "logic", "adapters", "to", "the", "terminal", "example", "add", "functionality", "NUMBER", "Possible", "bug", "fix", "in", "evaluate_mathematically", "not", "really", "sure", "but", "this", "makes", "sure", "no", "bug", "will", "ever", "arise", "NUMBER", "Sometimes", "the", "time", "logic", "adapter", "would", "find", "a", "statement", "similar", "to", "what", "be", "NUMBER", "NUMBER", "as", "something", "it", "should", "process", "NUMBER", "By", "add", "the", "additional", "piece", "of", "training", "data", "the", "time", "adapter", "do", "not", "incorrectly", "process", "math", "statements", "as", "often", "Awesome", "Thank", "you", "Also", "on", "a", "side", "note", "GCI", "ended", "today", "so", "I", "hope", "to", "be", "able", "to", "spend", "some", "more", "time", "work", "on", "chatterbot", "now", "NUMBER", "Thank", "you", "Although", "it", "looks", "fine", "on", "the", "surface", "there", "be", "issue", "with", "the", "current", "method", "for", "use", "multiple", "logic", "adapters", "NUMBER", "This", "can", "be", "easily", "find", "when", "you", "run", "chatterbot", "and", "type", "what", "time", "be", "it", "NUMBER", "Sometimes", "I", "will", "get", "the", "current", "time", "while", "other", "times", "I", "will", "get", "what", "time", "be", "it", "which", "be", "display", "because", "there", "be", "no", "other", "statement", "in", "the", "database", "NUMBER", "In", "addition", "most", "of", "the", "time", "when", "I", "ask", "that", "question", "later", "in", "the", "conversation", "I", "do", "not", "get", "the", "actual", "time", "but", "a", "response", "from", "the", "database", "NUMBER", "After", "debugging", "the", "error", "for", "a", "fair", "amount", "of", "time", "I", "find", "where", "the", "problem", "be", "come", "from", "NUMBER", "The", "current", "way", "responses", "be", "be", "prioritized", "makes", "get", "the", "correct", "logic", "adapter", "to", "respond", "very", "difficult", "NUMBER", "I", "be", "not", "sure", "why", "this", "be", "occurring", "but", "the", "problem", "be", "in", "LINK", "_adapter", "NUMBER", "py", "L", "NUMBER", "You", "can", "test", "this", "by", "add", "a", "print", "statement", "in", "evaluate_mathematically", "in", "the", "try", "block", "located", "at", "LINK", "_mathematically", "NUMBER", "py", "L", "NUMBER", "printing", "the", "expression", "after", "assigning", "it", "the", "evaluated", "input", "NUMBER", "If", "you", "then", "type", "in", "something", "like", "what", "be", "NUMBER", "NUMBER", "you", "will", "see", "that", "evaluate_mathematically", "properly", "generates", "a", "response", "and", "returns", "a", "confidence", "of", "NUMBER", "but", "still", "the", "result", "be", "not", "use", "NUMBER", "Further", "the", "database", "responses", "generate", "from", "the", "evaluate_mathematically", "time", "function", "be", "incorrect", "NUMBER", "This", "might", "be", "unrelated", "or", "the", "program", "might", "be", "checking", "the", "database", "before", "checking", "the", "other", "adapters", "first", "and", "when", "it", "gets", "a", "NUMBER", "confidence", "for", "an", "equal", "statement", "it", "returns", "that", "statement", "and", "doesn", "t", "replace", "it", "with", "the", "generate", "result", "from", "other", "logic", "adapters", "NUMBER", "This", "be", "an", "issue", "particularly", "for", "logic", "adapters", "that", "would", "have", "be", "considered", "plugins", "which", "do", "not", "want", "their", "results", "saved", "to", "the", "database", "NUMBER", "To", "test", "the", "order", "of", "my", "logic", "adapters", "be", "as", "follows", "logic_adapters", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "EvaluateMathematically", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "TimeLogicAdapter", "chatterbot", "NUMBER", "adapters", "NUMBER", "logic", "NUMBER", "ClosestMatchAdapter", "gunthercox", "Any", "ideas", "how", "to", "fix", "this", "I", "have", "NUMBER", "separate", "solutions", "that", "I", "have", "be", "able", "to", "come", "up", "with", "so", "far", "NUMBER", "Re", "implement", "plugin", "support", "NUMBER", "By", "classifying", "them", "differently", "we", "can", "easily", "fix", "the", "database", "issue", "as", "well", "as", "put", "higher", "priority", "on", "get", "a", "result", "from", "a", "plugin", "which", "will", "fix", "the", "issue", "regard", "incorrect", "order", "NUMBER", "NUMBER", "Leave", "the", "system", "as", "be", "but", "change", "the", "way", "adapters", "be", "processed", "NUMBER", "This", "will", "make", "the", "code", "less", "readable", "but", "may", "be", "a", "much", "better", "solution", "than", "NUMBER", "It", "would", "require", "add", "a", "flag", "to", "tell", "chatterbot", "whether", "to", "save", "the", "result", "and", "the", "statement", "to", "the", "database", "NUMBER", "In", "addition", "it", "would", "require", "a", "new", "way", "to", "process", "and", "give", "confidence", "values", "for", "logic", "adapters", "NUMBER", "I", "would", "argue", "that", "we", "remove", "the", "tie", "breaker", "and", "use", "the", "following", "logic", "instead", "the", "for", "loop", "just", "stays", "the", "same", "a", "At", "LINK", "_adapter", "NUMBER", "py", "L", "NUMBER", "we", "would", "add", "an", "additional", "if", "statement", "above", "which", "if", "the", "confidence", "was", "NUMBER", "would", "return", "the", "result", "b", "Otherwise", "do", "what", "be", "do", "currently", "get", "the", "highest", "confidence", "NUMBER", "Thoughts", "As", "stated", "in", "the", "PR", "the", "issue", "has", "be", "fix", "NUMBER", "The", "only", "issue", "remaining", "in", "the", "current", "implementation", "for", "logic", "adapters", "be", "that", "both", "the", "adapter", "s", "response", "and", "the", "user", "s", "prompt", "be", "saved", "to", "the", "database", "NUMBER", "This", "could", "allow", "the", "bot", "to", "give", "some", "odd", "responses", "to", "a", "prompt", "the", "user", "gives", "NUMBER", "I", "think", "the", "solution", "be", "pretty", "simple", "though", "We", "return", "an", "additional", "variable", "which", "tells", "ChatterBot", "whether", "or", "not", "to", "save", "the", "response", "to", "the", "database", "NUMBER", "If", "that", "variable", "be", "true", "then", "chatterbot", "saves", "the", "prompt", "and", "the", "response", "to", "the", "database", "NUMBER", "Otherwise", "it", "doesn", "t", "NUMBER", "Ideas", "I", "agree", "with", "you", "with", "respect", "to", "the", "user", "s", "response", "be", "a", "response", "to", "the", "bot", "s", "output", "NUMBER", "The", "only", "issue", "with", "the", "current", "system", "be", "the", "fact", "that", "the", "bot", "s", "response", "be", "use", "as", "a", "response", "to", "a", "user", "s", "question", "when", "it", "should", "not", "NUMBER", "For", "example", "if", "I", "ask", "the", "bot", "what", "the", "current", "time", "be", "it", "do", "exactly", "what", "it", "should", "and", "respond", "with", "the", "current", "time", "NUMBER", "However", "later", "on", "in", "the", "chat", "maybe", "NUMBER", "minutes", "later", "it", "will", "display", "that", "same", "time", "stamp", "as", "a", "response", "to", "something", "I", "say", "NUMBER", "This", "be", "not", "correct", "NUMBER", "gunthercox", "Do", "you", "see", "what", "I", "mean", "gunthercox", "Can", "I", "close", "this", "To", "increase", "the", "speed", "of", "processing", "multithreading", "support", "be", "really", "needed", "NUMBER", "In", "the", "future", "when", "more", "logic", "adapters", "be", "add", "including", "more", "advance", "ones", "such", "as", "a", "developer", "assistant", "LINK", "_adapter", "NUMBER", "py", "L", "NUMBER", "will", "consume", "a", "lot", "of", "computing", "resources", "NUMBER", "If", "this", "be", "all", "in", "one", "thread", "it", "could", "cause", "a", "slowdown", "of", "the", "program", "this", "be", "very", "noticeable", "NUMBER", "Here", "be", "my", "solution", "We", "enable", "threading", "at", "that", "stage", "of", "the", "processing", "NUMBER", "In", "addition", "if", "that", "be", "not", "enough", "individual", "logic", "adapters", "can", "also", "implement", "threading", "but", "that", "be", "for", "another", "issue", "Added", "trivia", "support", "pt", "BR", "language", "Since", "we", "be", "use", "logic", "adapters", "for", "many", "of", "these", "additional", "function", "should", "we", "remove", "plugin", "adapters", "Or", "be", "there", "still", "function", "that", "we", "should", "implement", "as", "plugins", "I", "would", "believe", "that", "function", "that", "be", "deeply", "integrated", "into", "the", "chatbot", "such", "as", "time", "date", "location", "etc", "should", "be", "add", "as", "logic", "adapters", "while", "function", "that", "be", "extra", "or", "not", "core", "to", "chatterbot", "be", "add", "as", "plugins", "which", "be", "essentially", "logic", "adapters", "but", "more", "complex", "NUMBER", "What", "do", "you", "think", "gunthercox", "Add", "support", "to", "greetings", "Portuguese", "Brazil", "This", "do", "not", "add", "a", "confidence", "attribute", "for", "adapters", "right", "Added", "kwarg", "for", "database_uri", "which", "be", "in", "the", "standard", "MongoDB", "URI", "format", "NUMBER", "This", "be", "a", "rewrite", "of", "PR", "NUMBER", "where", "instead", "of", "a", "new", "adapter", "the", "feature", "be", "just", "write", "into", "the", "new", "adapter", "NUMBER", "gunthercox", "I", "fix", "the", "thing", "don", "t", "know", "how", "that", "get", "in", "there", "in", "the", "first", "place", "Guess", "I", "should", "check", "my", "diffs", "before", "committing", "eh", "The", "old", "adapter", "for", "MongoDB", "could", "not", "connect", "to", "remote", "databases", "so", "I", "forked", "it", "into", "a", "new", "adapter", "and", "add", "code", "to", "make", "work", "with", "remote", "DBs", "NUMBER", "I", "m", "not", "sure", "how", "to", "add", "test", "for", "this", "as", "it", "would", "require", "setting", "up", "a", "remote", "MongoDB", "NUMBER", "I", "could", "set", "up", "a", "MongoLab", "DB", "for", "this", "but", "gunthercox", "would", "have", "to", "add", "the", "password", "to", "the", "NUMBER", "travis", "NUMBER", "yml", "file", "as", "encrypted", "NUMBER", "This", "would", "probably", "be", "better", "integrated", "into", "the", "exist", "MongoDB", "adapter", "with", "the", "database", "location", "be", "a", "configuration", "option", "defaulting", "to", "localhost", "NUMBER", "Actually", "I", "think", "you", "re", "right", "NUMBER", "How", "do", "you", "add", "defaults", "for", "kwargs", "On", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Kevin", "Brown", "write", "This", "would", "probably", "be", "better", "integrated", "into", "the", "exist", "MongoDB", "adapter", "with", "the", "database", "location", "be", "a", "configuration", "option", "defaulting", "to", "localhost", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Extend", "conversations", "to", "suppotr", "portuguese", "language", "I", "have", "a", "JSON", "database", "with", "NUMBER", "responses", "and", "even", "after", "installing", "python", "cjson", "it", "s", "still", "pretty", "slow", "NUMBER", "From", "what", "I", "understand", "MongoDB", "be", "much", "faster", "NUMBER", "Is", "this", "correct", "and", "be", "there", "an", "easy", "way", "to", "switch", "between", "the", "two", "If", "i", "was", "reading", "correctly", "you", "should", "just", "be", "able", "to", "insert", "the", "raw", "json", "file", "into", "mongo", "db", "and", "it", "seems", "to", "be", "structured", "pretty", "simmilarly", "but", "you", "should", "probably", "try", "to", "restructure", "your", "json", "file", "to", "follow", "the", "same", "format", "as", "gunthercox", "s", "file", "be", "before", "so", "that", "we", "can", "code", "the", "bot", "to", "grab", "the", "info", "from", "the", "db", "the", "same", "way", "it", "grabs", "from", "local", "So", "if", "I", "have", "my", "local", "database", "how", "programmatically", "do", "I", "insert", "the", "file", "into", "mongo", "DB", "Try", "this", "from", "pymongo", "import", "MongoClient", "import", "json", "HOST", "PORT", "localhost", "NUMBER", "DATABASE_NAME", "test", "database", "COLLECTION_NAME", "test", "collection", "client", "MongoClient", "HOST", "PORT", "Connect", "to", "Mongo", "db", "db", "client", "DATABASE_NAME", "Connect", "to", "specific", "database", "collection", "db", "COLLECTION_NAME", "Access", "specific", "collection", "Then", "you", "would", "need", "to", "load", "a", "json", "into", "a", "dict", "post", "then", "post", "it", "use", "posts", "db", "NUMBER", "posts", "post_id", "posts", "NUMBER", "insert_one", "post", "NUMBER", "inserted_id", "Think", "of", "a", "MongoDb", "as", "a", "json", "file", "structured", "like", "Database", "Collection", "Document", "data", "data", "moreData", "data", "data", "data", "NUMBER", "moreData", "data", "NUMBER", "Document", "NUMBER", "data", "data", "NUMBER", "moreData", "data", "NUMBER", "data", "data", "NUMBER", "moreData", "data", "NUMBER", "So", "if", "I", "understand", "correctly", "mongoDB", "be", "web", "based", "What", "makes", "it", "faster", "than", "JSON", "Also", "if", "it", "s", "not", "too", "bothersome", "how", "can", "I", "put", "the", "JSON", "into", "a", "dict", "Should", "I", "use", "json_util", "LINK", "_util", "NUMBER", "html", "from", "MongoDB", "Ive", "never", "use", "the", "json_util", "but", "if", "im", "correct", "import", "json", "f", "open", "filename", "r", "jsonData", "json", "NUMBER", "loads", "f", "NUMBER", "read", "jsonData", "should", "be", "a", "dict", "But", "yeah", "json_util", "looks", "like", "it", "works", "the", "same", "way", "OK", "great", "NUMBER", "I", "ll", "look", "into", "this", "Ok", "push", "it", "into", "your", "fork", "of", "the", "project", "and", "mention", "me", "i", "want", "to", "see", "what", "youre", "doing", "with", "it", "and", "the", "json", "file", "because", "i", "have", "the", "NUMBER", "NUMBER", "jeopardy", "question", "and", "answers", "that", "id", "love", "to", "slide", "in", "to", "see", "if", "itll", "work", "Ok", "NUMBER", "I", "m", "actually", "not", "planing", "to", "integrate", "this", "into", "my", "fork", "but", "instead", "into", "my", "personal", "bot", "which", "be", "slowing", "down", "NUMBER", "My", "fork", "will", "likely", "just", "include", "change", "to", "the", "actual", "library", "this", "be", "code", "I", "d", "like", "to", "run", "once", "to", "make", "a", "change", "NUMBER", "My", "fork", "will", "likely", "just", "be", "support", "for", "dynamic", "responses", "through", "function", "which", "I", "d", "like", "to", "implement", "into", "train", "rather", "than", "as", "a", "plugin", "NUMBER", "Might", "i", "suggest", "implement", "both", "as", "i", "was", "saying", "prior", "have", "inline", "parsing", "for", "the", "bots", "output", "and", "train", "it", "with", "code", "inside", "s", "LINK", "issuecomment", "NUMBER", "I", "ll", "see", "I", "m", "really", "just", "modifying", "for", "one", "personal", "project", "NUMBER", "I", "ll", "see", "how", "it", "goes", "NUMBER", "It", "seems", "like", "kind", "of", "a", "limitation", "that", "under", "MongoDB", "keys", "cannot", "contain", "the", "NUMBER", "character", "What", "would", "the", "reason", "you", "would", "put", "a", "NUMBER", "in", "your", "db", "Some", "responses", "have", "multiple", "sentences", "and", "therefore", "periosd", "That", "looks", "great", "NUMBER", "I", "was", "previously", "unsuccessful", "I", "tried", "make", "my", "own", "database", "and", "naming", "the", "collection", "statements", "as", "in", "the", "code", "for", "the", "storage", "adapter", "NUMBER", "I", "ll", "try", "this", "and", "we", "will", "see", "how", "much", "faster", "Mongo", "be", "than", "JSON", "gunthercox", "Although", "MongoDB", "makes", "response", "time", "at", "least", "NUMBER", "times", "faster", "it", "appears", "everything", "has", "be", "mix", "up", "in", "transferring", "NUMBER", "An", "example", "conversation", "with", "the", "newly", "trained", "mongo", "bot", "Me", "Hello", "Bot", "Yes", "I", "be", "Me", "What", "s", "up", "Bot", "NUMBER", "Me", "Hello", "Bot", "Or", "be", "it", "Me", "What", "s", "your", "name", "Bot", "How", "old", "be", "you", "Having", "a", "similar", "conversation", "with", "the", "old", "JSON", "bot", "Me", "hello", "Bot", "FROM", "THE", "OTHER", "SIDE", "Adele", "Me", "What", "s", "up", "Bot", "Not", "much", "NUMBER", "Me", "That", "s", "cool", "Bot", "No", "its", "not", "NUMBER", "We", "need", "more", "gun", "control", "don", "t", "vote", "for", "trump", "These", "be", "the", "intended", "responses", "even", "if", "they", "seem", "strange", "My", "best", "guess", "from", "the", "fact", "that", "len", "json_adapter", "NUMBER", "filter", "len", "json", "NUMBER", "loads", "open", "database", "NUMBER", "db", "r", "NUMBER", "read", "NUMBER", "keys", "be", "that", "your", "solution", "be", "only", "loading", "the", "keys", "into", "the", "Mongo", "Database", "each", "as", "a", "response", "to", "the", "previous", "NUMBER", "I", "also", "have", "had", "some", "issue", "training", "it", "with", "the", "text", "of", "shakespeare", "s", "Julius", "Caesar", "but", "assumed", "that", "was", "an", "error", "on", "my", "part", "NUMBER", "I", "ll", "check", "whether", "I", "get", "the", "intended", "behavior", "with", "a", "JSON", "database", "which", "would", "indicate", "an", "issue", "with", "the", "MongoDB", "adapter", "NUMBER", "It", "appears", "that", "the", "MongoDB", "adapter", "do", "have", "some", "issue", "NUMBER", "Training", "with", "the", "text", "of", "Julius", "Caesar", "under", "the", "JSON", "database", "I", "get", "Me", "Peace", "Ho", "Let", "us", "hear", "him", "Bot", "Friends", "Romans", "countrymen", "lend", "me", "your", "ears", "I", "come", "to", "bury", "Caesar", "not", "to", "praise", "him", "NUMBER", "The", "evil", "that", "men", "do", "lives", "after", "them", "The", "good", "be", "oft", "interred", "with", "their", "bones", "So", "let", "it", "be", "with", "Caesar", "NUMBER", "The", "noble", "Brutus", "Hath", "told", "you", "Caesar", "was", "ambitious", "If", "it", "were", "so", "it", "was", "a", "grievous", "fault", "And", "grievously", "hath", "Caesar", "answer", "d", "it", "NUMBER", "Here", "under", "leave", "of", "Brutus", "and", "the", "rest", "For", "Brutus", "be", "an", "honourable", "man", "So", "be", "they", "all", "all", "honourable", "men", "Come", "I", "to", "speak", "in", "Caesar", "s", "funeral", "NUMBER", "He", "was", "my", "friend", "faithful", "and", "just", "to", "me", "But", "Brutus", "says", "he", "was", "ambitious", "And", "Brutus", "be", "an", "honourable", "man", "NUMBER", "He", "hath", "brought", "many", "captives", "home", "to", "Rome", "Whose", "ransoms", "did", "the", "general", "coffers", "fill", "Did", "this", "in", "Caesar", "seem", "ambitious", "When", "that", "the", "poor", "have", "cried", "Caesar", "hath", "wept", "Ambition", "should", "be", "made", "of", "sterner", "stuff", "Yet", "Brutus", "says", "he", "was", "ambitious", "And", "Brutus", "be", "an", "honourable", "man", "NUMBER", "You", "all", "did", "see", "that", "on", "the", "Lupercal", "I", "thrice", "presented", "him", "a", "kingly", "crown", "Which", "he", "did", "thrice", "refuse", "was", "this", "ambition", "Yet", "Brutus", "says", "he", "was", "ambitious", "And", "sure", "he", "be", "an", "honourable", "man", "NUMBER", "I", "speak", "not", "to", "disprove", "what", "Brutus", "spoke", "But", "here", "I", "be", "to", "speak", "what", "I", "do", "know", "NUMBER", "You", "all", "did", "love", "him", "once", "not", "without", "cause", "What", "cause", "withholds", "you", "then", "to", "mourn", "for", "him", "O", "judgment", "thou", "art", "fled", "to", "brutish", "beasts", "And", "men", "have", "lost", "their", "reason", "NUMBER", "Bear", "with", "me", "My", "heart", "be", "in", "the", "coffin", "there", "with", "Caesar", "And", "I", "must", "pause", "till", "it", "come", "back", "to", "me", "NUMBER", "Me", "Methinks", "there", "be", "much", "reason", "in", "his", "sayings", "NUMBER", "Bot", "If", "thou", "consider", "rightly", "of", "the", "matter", "Caesar", "has", "had", "great", "wrong", "NUMBER", "But", "with", "a", "MongoDB", "adapter", "Me", "Peace", "ho", "Let", "us", "hear", "him", "Bot", "Caesar", "tis", "strucken", "eight", "NUMBER", "Me", "Methinks", "there", "be", "much", "reason", "in", "his", "sayings", "NUMBER", "Bot", "There", "be", "some", "grudge", "between", "em", "tis", "not", "meet", "They", "be", "alone", "NUMBER", "Under", "the", "MongoDB", "adapter", "I", "also", "get", "inconsistent", "answers", "although", "a", "single", "line", "appears", "only", "once", "in", "the", "text", "of", "Julius", "Caesar", "NUMBER", "Example", "Me", "Peace", "ho", "Let", "us", "hear", "him", "Bot", "I", "wish", "we", "may", "but", "yet", "have", "I", "a", "mind", "That", "fears", "him", "much", "and", "my", "misgiving", "still", "Falls", "shrewdly", "to", "the", "purpose", "NUMBER", "Me", "Peace", "ho", "Let", "us", "hear", "him", "Bot", "If", "this", "were", "true", "then", "should", "I", "know", "this", "secret", "NUMBER", "I", "grant", "I", "be", "a", "woman", "but", "withal", "A", "woman", "that", "Lord", "Brutus", "took", "to", "wife", "I", "grant", "I", "be", "a", "woman", "but", "withal", "A", "woman", "well", "reputed", "Cato", "s", "daughter", "NUMBER", "Think", "you", "I", "be", "no", "stronger", "than", "my", "sex", "Being", "so", "father", "d", "and", "so", "husbanded", "Tell", "me", "your", "counsels", "I", "will", "not", "disclose", "em", "I", "have", "made", "strong", "proof", "of", "my", "constancy", "Giving", "myself", "a", "voluntary", "wound", "Here", "in", "the", "thigh", "can", "I", "bear", "that", "with", "patience", "NUMBER", "And", "not", "my", "husband", "s", "secrets", "Note", "that", "this", "inconsistency", "exists", "even", "while", "the", "bot", "has", "read_only", "set", "to", "True", "Great", "I", "look", "forward", "to", "be", "able", "to", "use", "faster", "databases", "reliably", "Issue", "appears", "to", "be", "fix", "and", "MongoDB", "shows", "\u00bc", "the", "response", "time", "yay", "Thanks", "for", "your", "help", "all", "NUMBER", "Not", "quite", "appears", "you", "forgot", "to", "convert", "to", "dict", "in", "line", "NUMBER", "of", "jsondatabase", "NUMBER", "py", "NUMBER", "I", "think", "it", "s", "likely", "you", "left", "response", "as", "a", "list", "when", "you", "meant", "to", "change", "it", "to", "a", "dict", "NUMBER", "You", "call", "text", "response", "text", "on", "line", "NUMBER", "which", "raises", "an", "error", "because", "response", "be", "a", "list", "not", "a", "dict", "and", "cannot", "be", "indexed", "by", "a", "string", "NUMBER", "Either", "you", "meant", "text", "response", "text", "where", "text", "be", "an", "integer", "or", "you", "meant", "for", "response", "to", "be", "a", "dict", "NUMBER", "BTW", "I", "be", "get", "this", "error", "run", "the", "transfer", "code", "you", "have", "include", "above", "I", "don", "t", "know", "if", "normal", "usage", "be", "affected", "by", "this", "NUMBER", "The", "error", "be", "throw", "calling", "json_database", "NUMBER", "filter", "This", "means", "that", "conversation", "with", "JSON", "database", "be", "broken", "completely", "NUMBER", "I", "cannot", "have", "a", "conversation", "with", "my", "bot", "from", "before", "the", "update", "nor", "can", "I", "transfer", "it", "to", "MongoDB", "NUMBER", "This", "be", "a", "serious", "issue", "the", "default", "database", "type", "be", "broken", "now", "NUMBER", "If", "someone", "pip", "install", "s", "the", "library", "and", "even", "runs", "the", "Basic", "usage", "example", "an", "error", "be", "throw", "Yes", "my", "stack", "looks", "like", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "all_statements", "self", "NUMBER", "orage", "NUMBER", "filter", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "filter", "response_list", "self", "NUMBER", "deserialize_responses", "values", "in_response_to", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "deserialize_responses", "text", "response", "text", "TypeError", "list", "indices", "must", "be", "integers", "not", "str", "The", "code", "I", "m", "use", "to", "produce", "the", "error", "import", "chatterbot", "c", "chatterbot", "NUMBER", "ChatBot", "Test_Bot", "c", "NUMBER", "get_response", "hello", "I", "get", "this", "error", "whenever", "I", "try", "to", "use", "train", "or", "get_response", "or", "anything", "that", "calls", "JsonDatabaseAdapter", "NUMBER", "filter", "The", "error", "persists", "after", "reinstalling", "via", "pip", "NUMBER", "I", "m", "on", "a", "raspberry", "pi", "NUMBER", "breaks", "backwards", "compatibility", "do", "this", "mean", "I", "cannot", "use", "a", "previous", "database", "with", "the", "new", "format", "How", "should", "I", "transfer", "exist", "work", "I", "have", "NUMBER", "NUMBER", "entries", "that", "I", "d", "prefer", "not", "to", "lose", "NUMBER", "The", "issue", "you", "link", "to", "shows", "that", "the", "branch", "was", "merge", "NUMBER", "days", "ago", "I", "start", "seeing", "this", "behavior", "only", "today", "NUMBER", "It", "could", "be", "that", "the", "MongoDB", "fix", "was", "the", "first", "time", "I", "had", "update", "the", "library", "since", "NUMBER", "days", "ago", "though", "I", "think", "I", "start", "my", "project", "about", "NUMBER", "days", "ago", "NUMBER", "How", "can", "I", "transfer", "my", "old", "database", "to", "a", "new", "format", "I", "d", "like", "to", "be", "able", "to", "keep", "the", "training", "I", "ve", "accumulated", "NUMBER", "Ok", "if", "I", "remove", "the", "exist", "database", "and", "run", "the", "code", "again", "the", "error", "disappears", "NUMBER", "How", "can", "I", "move", "my", "database", "from", "one", "format", "to", "another", "The", "only", "way", "I", "can", "possibly", "think", "of", "be", "to", "have", "multiple", "virtual", "environments", "with", "different", "version", "of", "the", "library", "in", "them", "then", "somehow", "output", "from", "one", "into", "a", "different", "format", "which", "I", "import", "into", "the", "other", "NUMBER", "I", "m", "not", "smart", "enough", "to", "figure", "this", "out", "do", "you", "have", "a", "solution", "My", "approach", "to", "transferring", "the", "database", "has", "fail", "NUMBER", "My", "planned", "approach", "NUMBER", "Revert", "to", "chatterbot", "NUMBER", "NUMBER", "Read", "JSON", "database", "and", "convert", "to", "MongoDB", "NUMBER", "Go", "back", "to", "NUMBER", "NUMBER", "Read", "MongoDB", "database", "and", "convert", "back", "to", "JSON", "I", "was", "hoping", "that", "only", "reading", "of", "the", "mongo", "database", "had", "be", "broken", "not", "write", "NUMBER", "I", "now", "cannot", "call", "filter", "in", "NUMBER", "either", "without", "throw", "an", "error", "after", "about", "NUMBER", "seconds", "I", "get", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "_objectify_response_list", "text", "item", "NUMBER", "KeyError", "NUMBER", "So", "it", "looks", "like", "NUMBER", "actually", "modify", "my", "database", "before", "deciding", "it", "couldn", "t", "read", "it", "It", "looks", "like", "it", "be", "trying", "to", "desperately", "read", "a", "list", "that", "has", "be", "converted", "to", "a", "dict", "NUMBER", "I", "believe", "I", "was", "run", "NUMBER", "before", "then", "after", "upgrading", "and", "re", "downgrading", "my", "database", "be", "broken", "NUMBER", "I", "m", "fine", "with", "losing", "all", "the", "data", "represented", "by", "the", "new", "type", "of", "data", "structure", "might", "this", "allow", "for", "a", "simpler", "solution", "Thanks", "I", "ll", "definitely", "try", "this", "Great", "NUMBER", "I", "ll", "try", "this", "NUMBER", "Probably", "going", "to", "sleep", "in", "NUMBER", "ish", "minutes", "as", "I", "have", "school", "tomorrow", "I", "ll", "report", "back", "when", "I", "have", "a", "result", "NUMBER", "I", "m", "not", "exactly", "sure", "how", "to", "export", "to", "a", "corpus", "format", "I", "can", "iterate", "through", "JsonDatabaseAdapter", "NUMBER", "filter", "to", "find", "all", "responses", "but", "I", "m", "not", "sure", "how", "to", "separate", "them", "into", "separate", "conversations", "NUMBER", "No", "it", "s", "fine", "I", "ve", "start", "a", "new", "database", "with", "the", "new", "format", "NUMBER", "No", "worries", "NUMBER", "It", "d", "be", "great", "if", "you", "could", "use", "function", "which", "return", "strings", "in", "trainining", "dialog", "NUMBER", "Example", "import", "time", "def", "whattime", "return", "time", "NUMBER", "rftime", "a", "d", "b", "Y", "H", "M", "S", "chatbot", "NUMBER", "train", "what", "time", "be", "it", "whattime", "Chatterbot", "could", "recognize", "that", "time", "be", "a", "function", "not", "a", "string", "and", "then", "return", "the", "result", "of", "calling", "that", "function", "in", "response", "to", "the", "question", "of", "what", "time", "be", "it", "NUMBER", "That", "way", "I", "could", "get", "the", "real", "time", "and", "date", "back", "from", "ask", "what", "time", "be", "it", "NUMBER", "This", "sounds", "like", "a", "very", "good", "idea", "NUMBER", "I", "will", "work", "on", "implement", "this", "in", "the", "plugin_chooser", "class", "NUMBER", "If", "add", "in", "the", "plugin_chooser", "class", "how", "would", "this", "look", "if", "use", "in", "code", "Would", "it", "look", "like", "my", "example", "or", "different", "Also", "if", "you", "don", "t", "mind", "my", "ask", "how", "long", "as", "a", "rough", "estimate", "might", "it", "take", "to", "implement", "If", "it", "s", "longer", "than", "a", "week", "I", "might", "attempt", "to", "modify", "the", "code", "myself", "NUMBER", "I", "have", "a", "few", "friends", "and", "myself", "in", "a", "discord", "LINK", "chat", "which", "uses", "the", "discord", "API", "LINK", "to", "implement", "chatterbot", "NUMBER", "I", "m", "finding", "that", "having", "a", "few", "people", "regularly", "interacting", "with", "it", "through", "a", "system", "that", "be", "designed", "for", "easy", "communication", "be", "a", "great", "way", "to", "train", "the", "bot", "NUMBER", "I", "really", "love", "your", "project", "very", "helpful", "NUMBER", "DarkmatterVale", "This", "be", "sorta", "what", "i", "encourage", "the", "inline", "parsing", "for", "by", "that", "i", "mean", "inputRes", "finalResponse", "NUMBER", "split", "output", "for", "phrase", "in", "inputRes", "if", "phrase", "len", "phrase", "NUMBER", "output", "NUMBER", "append", "exec", "phrase", "len", "phrase", "NUMBER", "else", "output", "NUMBER", "append", "phrase", "finalResponse", "output", "NUMBER", "join", "So", "that", "when", "training", "the", "bot", "you", "would", "set", "the", "output", "as", "in", "the", "time", "case", "The", "time", "be", "import", "time", "print", "time", "NUMBER", "rftime", "a", "d", "b", "Y", "H", "M", "S", "LucasZielke", "I", "see", "what", "you", "mean", "NUMBER", "This", "might", "be", "kind", "of", "difficult", "for", "large", "plugins", "however", "because", "then", "the", "code", "could", "get", "very", "long", "NUMBER", "Maybe", "this", "could", "be", "use", "for", "shorter", "plugins", "though", "as", "a", "quick", "and", "easy", "way", "to", "get", "a", "fast", "response", "NUMBER", "The", "Penultimate", "Defenestrator", "You", "would", "have", "to", "train", "the", "bot", "to", "determine", "what", "plugin", "be", "valid", "given", "an", "input", "NUMBER", "Then", "the", "bot", "would", "find", "the", "plugin", "with", "the", "highest", "confidence", "in", "its", "answer", "something", "I", "want", "to", "implement", "and", "call", "the", "respective", "function", "NUMBER", "That", "be", "the", "easiest", "and", "most", "general", "way", "to", "design", "the", "code", "so", "that", "it", "be", "not", "reliant", "on", "any", "specific", "code", "additions", "for", "a", "plugin", "NUMBER", "Feel", "free", "to", "go", "ahead", "and", "try", "to", "write", "some", "code", "up", "I", "will", "probably", "not", "get", "to", "it", "for", "multiple", "weeks", "get", "a", "lot", "of", "todos", "here", "NUMBER", "Ok", "NUMBER", "Can", "you", "add", "some", "doc", "strings", "into", "the", "example", "PluginAdapter", "plugin", "class", "I", "understand", "what", "should_answer", "do", "but", "not", "what", "process", "do", "NUMBER", "Does", "process", "return", "another", "string", "that", "be", "pass", "again", "to", "the", "response", "algorithm", "or", "return", "the", "final", "answer", "The", "Penultimate", "Defenestrator", "process", "seems", "to", "return", "the", "input", "value", "and", "then", "answer", "so", "one", "plus", "NUMBER", "times", "NUMBER", "gets", "normalized", "to", "NUMBER", "NUMBER", "NUMBER", "and", "sent", "into", "the", "eval", "so", "the", "entire", "function", "would", "return", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "DarkmatterVale", "Thats", "why", "you", "should", "build", "plugins", "that", "require", "only", "a", "quick", "little", "two", "lines", "thanks", "LucasZielke", "NUMBER", "I", "ll", "take", "a", "look", "see", "what", "I", "can", "figure", "out", "NUMBER", "I", "think", "this", "would", "be", "more", "practical", "if", "logic", "adapters", "could", "be", "more", "deeply", "embedded", "into", "chatterbot", "NUMBER", "As", "of", "right", "now", "they", "have", "to", "decide", "independently", "whether", "they", "can", "answer", "a", "question", "NUMBER", "If", "the", "should_answer", "function", "could", "somehow", "access", "the", "logic", "that", "powers", "the", "rest", "of", "chatterbot", "this", "would", "be", "more", "realistic", "NUMBER", "Great", "this", "sounds", "like", "a", "really", "great", "solution", "NUMBER", "On", "Thu", "Dec", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Gunther", "Cox", "notifications", "github", "NUMBER", "com", "write", "If", "you", "take", "a", "look", "at", "NUMBER", "LINK", "it", "covers", "the", "future", "change", "to", "logic", "adapters", "that", "will", "make", "this", "possible", "NUMBER", "The", "key", "parts", "be", "rating", "confidence", "values", "and", "tie", "breaking", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "python", "all_statements_copy", "list", "all_statements", "for", "statement", "in", "all_statements_copy", "response_exists", "False", "for", "s", "in", "all_statements_copy", "if", "statement", "in", "s", "NUMBER", "in_response_to", "response_exists", "True", "break", "Exit", "for", "loop", "since", "one", "exists", "if", "not", "response_exists", "all_statements", "NUMBER", "remove", "statement", "Pretty", "sure", "this", "be", "very", "inefficient", "when", "dealing", "with", "larger", "datasets", "change", "to", "this", "do", "what", "the", "comment", "says", "and", "be", "much", "faster", "python", "responses", "set", "to_remove", "list", "for", "statement", "in", "all_statements", "for", "response", "in", "statement", "NUMBER", "in_response_to", "responses", "NUMBER", "add", "response", "NUMBER", "for", "statement", "in", "all_statements", "if", "statement", "NUMBER", "text", "not", "in", "responses", "to_remove", "NUMBER", "append", "statement", "for", "statement", "in", "to_remove", "all_statements", "NUMBER", "remove", "statement", "Changing", "to", "this", "in", "__init__", "NUMBER", "py", "fix", "the", "issue", "miss", "was", "corpora", "and", "tokenizers", "in", "find", "calls", "NUMBER", "try", "find", "corpora", "wordnet", "except", "LookupError", "download", "wordnet", "try", "find", "corpora", "stopwords", "except", "LookupError", "download", "stopwords", "try", "find", "tokenizers", "punkt", "except", "LookupError", "download", "punkt", "This", "be", "a", "much", "needed", "update", "NUMBER", "Thank", "you", "for", "work", "on", "this", "In", "addition", "to", "evaluate_mathematically", "there", "be", "many", "other", "plugins", "that", "would", "be", "really", "nice", "to", "have", "NUMBER", "gunthercox", "Do", "you", "have", "a", "preference", "for", "the", "type", "of", "plugins", "you", "would", "like", "ChatterBot", "to", "have", "For", "example", "be", "you", "alright", "with", "having", "plugins", "for", "time", "If", "so", "here", "be", "a", "list", "of", "plugins", "that", "I", "would", "like", "to", "implement", "over", "some", "long", "period", "of", "time", "x", "Time", "Get", "the", "time", "current", "future", "past", "x", "Weather", "Location", "current", "or", "user", "specified", "Reminders", "User", "created", "events", "that", "be", "executed", "at", "a", "user", "specified", "time", "Email", "Send", "and", "receive", "emails", "Music", "Start", "stop", "or", "pause", "music", "News", "Get", "news", "headlines", "this", "can", "be", "very", "difficult", "because", "of", "NLP", "but", "we", "can", "start", "simple", "and", "get", "more", "complex", "over", "time", "What", "do", "you", "think", "Do", "you", "have", "any", "that", "you", "would", "like", "to", "add", "to", "the", "list", "Update", "NUMBER", "NUMBER", "NUMBER", "Additional", "Plugins", "Web", "search", "Wikipedia", "search", "Instead", "of", "having", "to", "manually", "tell", "the", "program", "that", "it", "has", "to", "run", "these", "input", "would", "it", "not", "be", "a", "little", "easier", "to", "have", "like", "a", "form", "of", "inline", "python", "parsing", "Can", "you", "please", "elaborate", "on", "the", "implementation", "of", "such", "a", "system", "LucasZielke", "See", "NUMBER", "for", "a", "great", "way", "to", "train", "the", "bot", "to", "certain", "inputs", "and", "results", "NUMBER", "I", "will", "work", "on", "provide", "details", "as", "soon", "as", "I", "can", "get", "some", "time", "to", "work", "on", "this", "NUMBER", "Might", "i", "suggest", "like", "a", "micro", "dictionary", "function", "in", "there", "like", "input", "Do", "you", "know", "what", "the", "word", "_____", "means", "Output", "Yeah", "that", "means", "_________", "That", "be", "similar", "to", "the", "find_a_name", "function", "just", "a", "broader", "dictionary", "NUMBER", "I", "think", "the", "function", "you", "be", "describing", "should", "become", "an", "evolved", "version", "of", "the", "find_a_name", "function", "NUMBER", "gunthercox", "Sorry", "for", "be", "gone", "for", "so", "long", "I", "be", "still", "at", "the", "beginning", "of", "GCI", "which", "will", "last", "through", "January", "and", "be", "having", "a", "lot", "of", "trouble", "finding", "time", "for", "everything", "NUMBER", "I", "will", "try", "and", "get", "some", "stuff", "do", "but", "timing", "might", "be", "a", "little", "bit", "of", "a", "range", "NUMBER", "Another", "great", "plugin", "that", "we", "could", "implement", "be", "a", "Developer", "Assistant", "NUMBER", "This", "be", "a", "little", "more", "complex", "but", "be", "something", "that", "a", "lot", "of", "people", "could", "use", "NUMBER", "In", "addition", "this", "be", "a", "very", "modular", "plugin", "allowing", "us", "to", "start", "very", "simple", "and", "expand", "greatly", "to", "add", "functionality", "over", "time", "NUMBER", "EDIT", "Removed", "developer", "assistant", "It", "would", "be", "a", "great", "addition", "to", "have", "an", "IO", "adapter", "for", "speech", "to", "text", "and", "text", "to", "speech", "NUMBER", "This", "would", "allow", "people", "to", "use", "ChatterBot", "in", "more", "situations", "and", "with", "less", "work", "NUMBER", "STT", "Adapter", "TTS", "Adapter", "This", "be", "a", "pretty", "complicated", "addition", "but", "the", "Jasper", "project", "do", "a", "great", "job", "implement", "STT", "and", "TTS", "functionality", "NUMBER", "Some", "information", "about", "their", "user", "interaction", "how", "it", "can", "be", "configured", "can", "be", "find", "here", "LINK", "The", "code", "for", "the", "STT", "and", "TTS", "engine", "s", "they", "implement", "can", "be", "find", "here", "LINK", "client", "blob", "master", "client", "stt", "NUMBER", "py", "and", "LINK", "client", "blob", "master", "client", "tts", "NUMBER", "py", "NUMBER", "The", "implementation", "would", "be", "do", "in", "steps", "with", "single", "engine", "configuration", "come", "first", "followed", "by", "multi", "engine", "configuration", "NUMBER", "Single", "engine", "configuration", "NUMBER", "In", "this", "we", "would", "only", "allow", "the", "use", "of", "a", "single", "STT", "TTS", "engine", "that", "we", "hard", "code", "into", "ChatterBot", "Multi", "engine", "configuration", "NUMBER", "In", "this", "we", "would", "allow", "multiple", "STT", "TTS", "engines", "that", "the", "user", "can", "pick", "NUMBER", "DarkmatterVale", "I", "work", "on", "a", "mac", "and", "have", "be", "use", "pyobjc", "to", "hook", "into", "the", "AppKit", "NSSpeechSynthesizer", "to", "listen", "to", "the", "output", "NUMBER", "I", "have", "also", "worked", "on", "many", "other", "STT", "and", "TTS", "applications", "iOS", "and", "mac", "NUMBER", "Writing", "an", "enhancement", "for", "Chatterbot", "be", "on", "my", "todo", "list", "NUMBER", "How", "do", "you", "propose", "to", "add", "STT", "and", "TTS", "adapters", "to", "ChatterBot", "I", "would", "prefer", "an", "implementation", "that", "be", "as", "pure", "python", "as", "possible", "NUMBER", "gunthercox", "if", "you", "have", "any", "suggestions", "please", "let", "me", "know", "NUMBER", "I", "currently", "do", "not", "have", "an", "implementation", "plan", "NUMBER", "I", "would", "like", "to", "do", "something", "similar", "to", "what", "the", "Jasper", "project", "do", "but", "recently", "I", "have", "not", "had", "time", "to", "really", "explore", "how", "their", "code", "works", "NUMBER", "It", "be", "also", "a", "pure", "python", "implementation", "NUMBER", "I", "created", "a", "simple", "GUI", "that", "users", "can", "run", "to", "interact", "with", "ChatterBot", "NUMBER", "TypeError", "init", "get", "an", "unexpect", "keyword", "argument", "logic_adapter", "because", "chatterbot", "NUMBER", "py", "initializes", "the", "logic", "adapters", "with", "his", "kwargs", "NUMBER", "The", "Closestmatch", "adapter", "uses", "the", "init", "from", "logic", "NUMBER", "py", "raise", "ValueError", "Expected", "item_name", "in", "line", "at", "line", "p", "ValueError", "Expected", "version", "spec", "in", "request", "NUMBER", "TAG", "bot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "NUMBER", "greetings", "File", "usr", "lib", "NUMBER", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "train", "self", "NUMBER", "trainer", "NUMBER", "train_from_corpora", "corpora", "File", "usr", "lib", "NUMBER", "python", "NUMBER", "site", "package", "chatterbot", "training", "NUMBER", "py", "line", "NUMBER", "in", "train_from_corpora", "corpus_data", "self", "NUMBER", "corpus", "NUMBER", "load_corpus", "corpus", "File", "usr", "lib", "NUMBER", "python", "NUMBER", "site", "package", "chatterbot", "corpus", "corpus", "NUMBER", "py", "line", "NUMBER", "in", "load_corpus", "corpus", "self", "NUMBER", "read_corpus", "corpus_path", "File", "usr", "lib", "NUMBER", "python", "NUMBER", "site", "package", "chatterbot", "corpus", "corpus", "NUMBER", "py", "line", "NUMBER", "in", "read_corpus", "with", "open", "file_name", "as", "data_file", "IOError", "Errno", "NUMBER", "No", "such", "file", "or", "directory", "usr", "lib", "NUMBER", "python", "NUMBER", "site", "package", "chatterbot", "corpus", "data", "english", "greetings", "be", "something", "just", "not", "installing", "you", "re", "awesome", "TAG", "Closed", "NUMBER", "LINK", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "event", "NUMBER", "Leif", "Waldner", "Engineering", "Computer", "Science", "University", "of", "Colorado", "Boulder", "Lead", "Web", "Developer", "In", "NUMBER", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "AttributeError", "Traceback", "most", "recent", "call", "last", "TAG", "in", "TAG", "NUMBER", "chatbot", "NUMBER", "train", "chatterbot", "NUMBER", "corpus", "NUMBER", "english", "usr", "lib", "NUMBER", "python", "NUMBER", "site", "package", "chatterbot", "chatterbot", "NUMBER", "pyc", "in", "train", "self", "conversation", "_args", "_kwargs", "NUMBER", "NUMBER", "if", "corpora", "NUMBER", "self", "NUMBER", "trainer", "NUMBER", "train_from_corpora", "corpora", "NUMBER", "else", "NUMBER", "self", "NUMBER", "trainer", "NUMBER", "train_from_list", "conversation", "usr", "lib", "NUMBER", "python", "NUMBER", "site", "package", "chatterbot", "training", "NUMBER", "pyc", "in", "train_from_corpora", "self", "corpora", "NUMBER", "def", "train_from_corpora", "self", "corpora", "NUMBER", "for", "corpus", "in", "corpora", "NUMBER", "corpus_data", "load_corpus", "corpus", "NUMBER", "for", "data", "in", "corpus_data", "NUMBER", "for", "pair", "in", "data", "usr", "lib", "NUMBER", "python", "NUMBER", "site", "package", "chatterbot", "corpus", "utils", "NUMBER", "pyc", "in", "load_corpus", "corpus_path", "NUMBER", "from", "types", "import", "ModuleType", "NUMBER", "NUMBER", "corpus", "import_module", "corpus_path", "NUMBER", "NUMBER", "if", "isinstance", "corpus", "ModuleType", "usr", "lib", "NUMBER", "python", "NUMBER", "site", "package", "chatterbot", "utils", "module_loading", "NUMBER", "pyc", "in", "import_module", "dotted_path", "NUMBER", "module", "importlib", "NUMBER", "import_module", "module_path", "NUMBER", "NUMBER", "return", "getattr", "module", "module_parts", "NUMBER", "AttributeError", "module", "object", "has", "no", "attribute", "english", "I", "just", "test", "my", "installation", "and", "get", "the", "same", "issue", "NUMBER", "thank", "you", "gunthercox", "This", "sounds", "like", "a", "good", "idea", "NUMBER", "You", "might", "also", "want", "to", "think", "about", "provide", "the", "POS", "tags", "of", "the", "sentence", "in", "the", "new", "format", "NUMBER", "Although", "it", "only", "takes", "a", "short", "amount", "of", "time", "to", "calculate", "part", "of", "speech", "for", "every", "word", "on", "databases", "that", "be", "large", "that", "time", "could", "add", "up", "NUMBER", "The", "format", "that", "I", "propose", "would", "be", "something", "similar", "to", "this", "text", "Response", "text", "pos_tags", "Response", "NN", "text", "NN", "occurrence", "NUMBER", "Have", "you", "had", "a", "chance", "to", "work", "on", "update", "this", "If", "so", "what", "have", "your", "results", "shown", "Is", "there", "any", "performance", "improvement", "use", "the", "current", "logic", "adapters", "Ok", "just", "checking", "in", "NUMBER", "Why", "did", "you", "decide", "to", "go", "with", "path_similarity", "as", "oppose", "to", "wup_similarity", "The", "advantage", "of", "wup_similarity", "be", "that", "it", "predicts", "based", "on", "the", "most", "specific", "sense", "of", "the", "word", "which", "might", "give", "you", "a", "better", "result", "depending", "on", "what", "synsets", "be", "available", "for", "any", "given", "word", "NUMBER", "No", "problem", "Let", "me", "know", "if", "I", "can", "help", "in", "any", "way", "NUMBER", "Give", "me", "a", "little", "lead", "time", "though", "because", "I", "m", "currently", "work", "on", "add", "a", "logic", "adapter", "for", "use", "SVO", "comparisons", "which", "requires", "I", "redesign", "part", "of", "my", "regex", "NUMBER", "dummies", "library", "so", "its", "taking", "a", "little", "while", "NUMBER", "I", "be", "curious", "about", "which", "of", "the", "following", "features", "be", "available", "enriching", "or", "at", "least", "retaining", "a", "context", "during", "a", "dialogue", "learning", "from", "humans", "make", "prediction", "or", "and", "deduction", "based", "on", "available", "knowledge", "Another", "thing", "be", "Is", "it", "just", "simple", "statement", "matcher", "in", "which", "user", "question", "and", "bot", "question", "have", "to", "be", "the", "exactly", "same", "For", "instance", "suppose", "i", "trained", "the", "bot", "with", "q", "where", "be", "the", "post", "office", "a", "it", "be", "right", "behind", "you", "and", "user", "may", "ask", "like", "this", "q", "looking", "for", "the", "post", "office", "What", "will", "the", "chatbot", "give", "to", "the", "user", "NUMBER", "very", "detailed", "explanation", "NUMBER", "I", "couldn", "t", "find", "this", "information", "anywhere", "maybe", "you", "can", "consider", "to", "present", "it", "in", "this", "project", "s", "wiki", "pages", "NUMBER", "In", "near", "future", "I", "may", "make", "some", "contribution", "to", "this", "project", "because", "I", "be", "planning", "to", "use", "something", "similar", "to", "chatterbot", "in", "one", "of", "my", "spare", "time", "works", "NUMBER", "Thank", "you", "NUMBER", "You", "should", "take", "a", "look", "at", "the", "twisted", "framework", "There", "be", "a", "lot", "for", "python", "I", "can", "try", "to", "write", "one", "NUMBER", "I", "already", "did", "some", "irc", "stuff", "in", "the", "past", "with", "python", "NUMBER", "But", "never", "really", "use", "twisted", "for", "this", "NUMBER", "Only", "circuits", "so", "far", "which", "be", "async", "as", "well", "NUMBER", "The", "most", "straight", "forward", "way", "would", "be", "to", "use", "socket", "NUMBER", "LINK", "_an_IRC_bot_in_Python", "Without", "add", "the", "twisted", "dependency", "or", "one", "for", "any", "other", "library", "NUMBER", "Keep", "in", "mind", "that", "the", "bot", "needs", "it", "s", "own", "loop", "NUMBER", "I", "doubt", "that", "NUMBER", "IRC", "has", "a", "constant", "stream", "which", "you", "buffer", "periodically", "NUMBER", "I", "doubt", "your", "email", "adapter", "works", "like", "that", "NUMBER", "If", "I", "understand", "the", "irc", "protocol", "correctly", "What", "I", "have", "researched", "of", "IRC", "be", "that", "it", "requires", "you", "to", "Pong", "its", "Pings", "which", "could", "really", "be", "a", "problem", "if", "you", "start", "to", "get", "more", "and", "more", "information", "in", "your", "database", "because", "of", "processing", "time", "so", "you", "would", "have", "to", "have", "it", "ping", "ponging", "and", "trying", "to", "find", "a", "proper", "response", "for", "the", "message", "in", "a", "different", "thread", "or", "vice", "versa", "Working", "on", "it", "and", "will", "a", "little", "tomorrow", "In", "IRC", "your", "database", "can", "get", "easily", "NUMBER", "MB", "which", "gave", "me", "a", "processing", "time", "of", "more", "than", "NUMBER", "Minutes", "for", "a", "single", "response", "even", "with", "MongoDB", "NUMBER", "bloodywing", "do", "you", "mean", "a", "tails", "file", "for", "the", "IRC", "I", "be", "referring", "to", "accessing", "the", "MongoDB", "that", "holds", "all", "of", "the", "i", "o", "for", "the", "chatbot", "itself", "LucasZielke", "Nope", "I", "mean", "the", "json", "file", "handler", "but", "thats", "a", "problem", "with", "chatterbot", "itself", "when", "NUMBER", "What", "you", "want", "to", "do", "with", "the", "bot", "be", "idling", "in", "the", "irc", "and", "following", "conversations", "and", "respond", "when", "the", "boot", "sees", "a", "specific", "keyword", "like", "the", "botname", "or", "botrespond", "I", "already", "did", "something", "similar", "with", "the", "bot", "on", "a", "simple", "website", "with", "message", "system", "and", "an", "API", "and", "parsed", "the", "conversation", "NUMBER", "But", "should", "the", "bot", "save", "all", "lines", "in", "irc", "And", "use", "them", "to", "respond", "This", "be", "what", "I", "mean", "if", "you", "save", "everything", "in", "irc", "you", "DB", "would", "get", "huge", "NUMBER", "bloodywing", "Haha", "if", "it", "saved", "all", "of", "the", "convo", "from", "the", "irc", "channel", "youd", "make", "one", "cruel", "bot", "Would", "the", "best", "way", "to", "implement", "the", "response", "while", "ping", "ponging", "be", "to", "multi", "thread", "the", "ping", "ponging", "and", "in", "the", "foreground", "be", "looking", "for", "the", "proper", "response", "Would", "the", "best", "way", "to", "implement", "the", "response", "while", "ping", "ponging", "be", "to", "multi", "thread", "the", "ping", "ponging", "and", "in", "the", "foreground", "be", "looking", "for", "the", "proper", "response", "This", "be", "how", "I", "do", "it", "in", "my", "IRC", "bot", "that", "be", "based", "on", "async", "NUMBER", "My", "bot", "be", "modular", "and", "threaded", "and", "It", "replies", "to", "the", "ping", "pongs", "when", "needed", "then", "feeds", "for", "example", "what", "be", "be", "said", "in", "a", "channel", "to", "any", "plugin", "that", "needs", "it", "or", "only", "when", "there", "be", "a", "certain", "trigger", "NUMBER", "I", "m", "already", "run", "a", "chatbot", "through", "discord", "NUMBER", "py", "LINK", "NUMBER", "I", "m", "run", "this", "as", "a", "separate", "script", "but", "maybe", "it", "would", "make", "sense", "as", "an", "IO", "adapter", "I", "m", "pleased", "with", "how", "my", "bot", "be", "work", "out", "NUMBER", "The", "repo", "in", "which", "I", "ve", "write", "my", "code", "be", "here", "LINK", "Penultimate", "Defenestrator", "bergerbot", "if", "you", "want", "to", "take", "a", "look", "at", "how", "I", "m", "use", "discord", "with", "chatterbot", "package", "Hi", "when", "i", "tried", "run", "chatterbox", "with", "default", "data", "base", "it", "exits", "with", "KeyError", "in_response_to", "File", "terminal_example", "NUMBER", "py", "line", "NUMBER", "in", "TAG", "bot_input", "bot", "NUMBER", "get_response", "user_input", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "chatterbot", "NUMBER", "py", "line", "NUMBER", "in", "get_response", "in_response_to__contains", "closest_match", "NUMBER", "text", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "filter", "if", "self", "NUMBER", "_all_kwargs_match_values", "kwargs", "values", "File", "usr", "local", "lib", "python", "NUMBER", "dist", "package", "ChatterBot", "NUMBER", "py", "NUMBER", "egg", "chatterbot", "adapters", "storage", "jsondatabase", "NUMBER", "py", "line", "NUMBER", "in", "_all_kwargs_match_values", "if", "kwarguments", "kwarg", "not", "in", "values", "kwarg_parts", "NUMBER", "KeyError", "in_response_to", "Using", "Cortical", "NUMBER", "io", "s", "LINK", "Semantic", "Folding", "Engine", "the", "chat", "bot", "might", "be", "able", "to", "get", "better", "performance", "when", "identifying", "the", "best", "response", "for", "a", "given", "input", "NUMBER", "I", "m", "not", "sure", "how", "well", "this", "would", "work", "but", "it", "be", "definitely", "something", "to", "consider", "NUMBER", "I", "m", "still", "researching", "this", "so", "I", "ll", "hopefully", "have", "more", "details", "on", "this", "soon", "NUMBER", "Have", "you", "heard", "about", "this", "before", "gunthercox", "That", "s", "exactly", "what", "I", "was", "thinking", "NUMBER", "It", "should", "be", "pretty", "simple", "to", "get", "it", "to", "work", "but", "I", "don", "t", "know", "how", "effective", "it", "would", "be", "NUMBER", "Cortical", "NUMBER", "io", "seems", "to", "relate", "some", "similar", "words", "to", "each", "other", "very", "well", "but", "not", "well", "for", "others", "I", "m", "use", "their", "demos", "to", "explore", "NUMBER", "Hopefully", "I", "ll", "get", "a", "chance", "within", "a", "couple", "of", "days", "to", "try", "to", "add", "a", "logic", "adapter", "for", "this", "as", "long", "as", "you", "would", "not", "like", "to", "do", "it", "yourself", "Sorry", "for", "the", "late", "reply", "NUMBER", "Got", "caught", "up", "in", "some", "other", "work", "NUMBER", "I", "will", "be", "test", "this", "weekend", "and", "will", "let", "you", "know", "how", "it", "goes", "NUMBER", "I", "m", "currently", "in", "contact", "with", "them", "and", "trying", "to", "work", "out", "some", "issue", "enhancements", "with", "the", "Python", "SDK", "NUMBER", "Is", "there", "currently", "any", "way", "to", "send", "information", "to", "a", "LogicAdapter", "To", "add", "this", "as", "a", "logic", "adapter", "an", "API", "Key", "will", "be", "required", "to", "be", "given", "to", "the", "logic", "adapter", "NUMBER", "That", "sounds", "like", "a", "very", "elegant", "way", "of", "doing", "this", "NUMBER", "Much", "more", "elegant", "than", "how", "I", "would", "have", "do", "it", "had", "I", "not", "have", "talked", "this", "through", "As", "soon", "as", "they", "give", "some", "documentation", "which", "be", "still", "apparently", "on", "their", "backlog", "I", "will", "get", "right", "on", "this", "and", "add", "a", "new", "logic", "adapter", "NUMBER", "Sorry", "for", "the", "delay", "just", "stumbled", "across", "this", "thread", "of", "yours", "and", "not", "knowing", "whether", "you", "ve", "actually", "implement", "an", "adapter", "to", "the", "Cortical", "NUMBER", "io", "API", "or", "not", "i", "thought", "i", "should", "point", "out", "that", "there", "be", "a", "new", "simplified", "Python", "client", "to", "that", "API", "LINK", "io", "retina", "sdk", "NUMBER", "py", "The", "new", "adapter", "allows", "the", "user", "to", "get", "a", "response", "from", "the", "chat", "bot", "without", "having", "that", "response", "display", "in", "the", "terminal", "for", "example", "NUMBER", "Awesome", "NUMBER", "Let", "me", "know", "if", "you", "have", "any", "problem", "with", "it", "NUMBER", "gunthercox", "why", "haven", "t", "you", "merge", "this", "yet", "It", "looks", "like", "a", "great", "addition", "for", "ChatterBot", "NUMBER", "values", "list", "statement", "NUMBER", "IndexError", "list", "index", "out", "of", "range", "probably", "a", "simple", "oversight", "but", "trying", "to", "run", "your", "terminal", "example", "i", "get", "the", "following", "error", "AttributeError", "ChatBot", "object", "has", "no", "attribute", "get_input", "have", "successfully", "imported", "the", "module", "and", "dir", "d", "around", "the", "objects", "a", "bit", "but", "can", "t", "see", "a", "get_input", "method", "anywhere", "NUMBER", "do", "i", "need", "to", "explicitly", "import", "Terminal", "thanks", "great", "NUMBER", "that", "s", "do", "it", "NUMBER", "sorry", "if", "that", "was", "documented", "elsewhere", "NUMBER", "keep", "up", "the", "good", "work", "I", "be", "doing", "some", "research", "on", "chatting", "bots", "for", "studying", "purposes", "but", "I", "have", "never", "do", "any", "Python", "programming", "before", "and", "come", "from", "a", "Java", "background", "the", "database", "creation", "be", "pure", "black", "magic", "to", "me", "NUMBER", "Can", "you", "please", "point", "me", "in", "a", "direction", "on", "how", "I", "can", "add", "NUMBER", "additional", "column", "to", "the", "list", "of", "values", "stored", "I", "need", "to", "add", "a", "score_value", "to", "the", "database", "so", "I", "can", "measure", "how", "many", "points", "an", "user", "made", "throughout", "a", "chat", "session", "with", "the", "bot", "NUMBER", "Thanks", "NUMBER", "That", "did", "what", "I", "wanted", "NUMBER", "Thanks", "for", "your", "help", "D", "Just", "one", "more", "thing", "how", "can", "I", "change", "the", "train", "method", "to", "allow", "passing", "a", "score", "I", "realized", "that", "the", "previous", "change", "will", "only", "affect", "the", "chosen", "entry", "NUMBER", "I", "be", "looking", "for", "a", "way", "to", "pass", "the", "scores", "during", "the", "train", "phase", "as", "well", "NUMBER", "Thanks", "NUMBER", "So", "my", "plan", "was", "to", "make", "a", "irc", "bot", "that", "would", "learn", "from", "logs", "and", "then", "be", "in", "the", "channel", "NUMBER", "I", "fed", "it", "about", "NUMBER", "k", "lines", "of", "logs", "from", "a", "large", "log", "file", "and", "then", "I", "decided", "to", "test", "it", "out", "NUMBER", "I", "asked", "it", "something", "then", "waited", "for", "it", "to", "respond", "it", "was", "taking", "about", "NUMBER", "CPU", "usage", "and", "I", "waited", "an", "hour", "for", "it", "to", "respond", "NUMBER", "Nothing", "NUMBER", "Also", "I", "be", "on", "PyPy", "so", "the", "default", "json", "library", "be", "already", "very", "fast", "Okay", "I", "ll", "give", "it", "a", "try", "thanks", "On", "my", "computer", "the", "bot", "delays", "a", "few", "seconds", "between", "inputs", "when", "I", "train", "with", "with", "NUMBER", "example", "lines", "NUMBER", "It", "gets", "worse", "the", "more", "training", "data", "there", "be", "NUMBER", "Is", "there", "any", "way", "to", "speed", "up", "the", "performance", "or", "be", "this", "just", "the", "nature", "of", "the", "beast", "Discovered", "this", "project", "after", "CleverBot", "s", "api", "undocumented", "went", "down", "NUMBER", "I", "work", "daily", "with", "Elasticsearch", "I", "think", "combined", "w", "this", "only", "have", "_just_", "start", "reviewing", "the", "code", "it", "could", "probably", "be", "made", "to", "scale", "very", "well", "NUMBER", "Haven", "t", "looked", "yet", "how", "the", "JSON", "field", "correlate", "to", "responses", "FYI", "elasticsearch", "be", "JSON", "but", "I", "imagine", "the", "features", "of", "elasticsearch", "es", "SEARCH", "could", "be", "use", "to", "greatly", "improve", "the", "speed", "of", "responses", "NUMBER", "Super", "easy", "to", "get", "going", "w", "Elasticsearch", "too", "if", "you", "aren", "t", "familiar", "NUMBER", "It", "s", "a", "self", "contained", "jar", "cross", "platform", "NUMBER", "Closing", "this", "one", "off", "as", "it", "be", "a", "duplicate", "of", "LINK", "brizzbane", "Did", "u", "create", "Elasticsearch", "ChatterBot", "adapter", "The", "command", "from", "chatterbot", "import", "Terminal", "gives", "me", "a", "cannot", "import", "name", "Terminal", "error", "NUMBER", "This", "also", "happens", "with", "TalkWithCleverBot", "and", "I", "suspect", "every", "import", "except", "for", "ChatBot", "NUMBER", "I", "suspect", "this", "happened", "after", "LINK", "which", "was", "part", "of", "the", "current", "efforts", "to", "split", "things", "up", "into", "individual", "modules", "NUMBER", "I", "m", "get", "the", "error", "No", "such", "file", "or", "directory", "requirements", "NUMBER", "txt", "when", "run", "pip", "install", "chatterbot", "NUMBER", "I", "think", "this", "might", "be", "because", "you", "don", "t", "include", "requirements", "NUMBER", "txt", "in", "your", "MANIFEST", "NUMBER", "in", "file", "NUMBER", "Hi", "great", "project", "I", "m", "having", "fun", "playing", "around", "with", "it", "NUMBER", "Built", "a", "small", "Shakespeare", "chat", "bot", "feeding", "it", "Hamlet", "via", "nltk", "NUMBER", "corpus", "NUMBER", "gutenberg", "to", "train", "with", "NUMBER", "Would", "it", "be", "possible", "when", "training", "the", "bot", "with", "a", "conversation", "between", "Person", "NUMBER", "and", "Person", "NUMBER", "to", "weight", "say", "Person", "NUMBER", "s", "responses", "more", "heavily", "That", "be", "the", "bot", "would", "learn", "about", "context", "and", "human", "language", "generally", "from", "the", "dialogue", "but", "it", "would", "more", "often", "mimic", "the", "sentence", "structure", "grammar", "and", "vocab", "from", "Person", "NUMBER", "It", "would", "thus", "assume", "Person", "NUMBER", "s", "personality", "NUMBER", "Fixed", "two", "typo", "NUMBER", "Is", "You", "re", "intentionally", "misspelt", "to", "add", "realism", "Closed", "by", "NUMBER", "bd", "NUMBER", "a", "NUMBER", "e", "NUMBER", "ced", "NUMBER", "f", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "d", "NUMBER", "I", "m", "closing", "this", "one", "off", "because", "use", "a", "markov", "chain", "based", "algorithm", "to", "generate", "new", "statements", "isn", "t", "an", "accurate", "way", "to", "produce", "responses", "to", "statements", "NUMBER", "assertLess", "and", "assertGreater", "aren", "t", "available", "in", "Python", "NUMBER", "I", "m", "not", "sure", "how", "critical", "Python", "NUMBER", "support", "be", "for", "ChatterBot", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "decreased", "NUMBER", "to", "NUMBER", "when", "pulling", "e", "NUMBER", "b", "NUMBER", "dce", "NUMBER", "b", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "a", "NUMBER", "ec", "on", "json_format", "into", "NUMBER", "c", "NUMBER", "c", "NUMBER", "dc", "NUMBER", "afd", "NUMBER", "b", "NUMBER", "c", "NUMBER", "eb", "NUMBER", "d", "NUMBER", "a", "NUMBER", "d", "NUMBER", "on", "master", "NUMBER", "Never", "use", "github", "so", "sorry", "if", "this", "be", "in", "the", "wrong", "place", "for", "this", "or", "format", "NUMBER", "Seems", "that", "chatterbot", "be", "creating", "converstation", "file", "that", "contain", "an", "empty", "line", "at", "the", "end", "which", "converstation", "NUMBER", "py", "try", "to", "read", "NUMBER", "My", "fix", "was", "just", "to", "check", "the", "line", "be", "not", "empty", "Continue", "only", "if", "the", "file", "contains", "lines", "if", "lines", "previous_statement", "None", "for", "line", "in", "lines", "if", "line", "user", "date", "text", "line", "Wow", "that", "was", "a", "quick", "response", "Happy", "to", "help", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "decreased", "NUMBER", "to", "NUMBER", "when", "pulling", "NUMBER", "c", "NUMBER", "b", "NUMBER", "d", "NUMBER", "eb", "NUMBER", "f", "NUMBER", "ca", "NUMBER", "b", "NUMBER", "c", "NUMBER", "d", "NUMBER", "fea", "NUMBER", "c", "on", "social", "into", "ebf", "NUMBER", "a", "NUMBER", "f", "NUMBER", "c", "NUMBER", "d", "NUMBER", "d", "NUMBER", "b", "NUMBER", "bfddb", "NUMBER", "ce", "NUMBER", "d", "NUMBER", "c", "on", "master", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "increase", "NUMBER", "to", "NUMBER", "when", "pulling", "NUMBER", "bb", "NUMBER", "b", "NUMBER", "d", "NUMBER", "da", "NUMBER", "c", "NUMBER", "fb", "NUMBER", "da", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fe", "NUMBER", "on", "social", "into", "ebf", "NUMBER", "a", "NUMBER", "f", "NUMBER", "c", "NUMBER", "d", "NUMBER", "d", "NUMBER", "b", "NUMBER", "bfddb", "NUMBER", "ce", "NUMBER", "d", "NUMBER", "c", "on", "master", "NUMBER", "Hi", "i", "be", "use", "your", "chatbot", "but", "it", "only", "uses", "the", "engrams", "NUMBER", "Everything", "i", "say", "it", "do", "not", "save", "it", "just", "follows", "the", "engrams", "conversation", "how", "do", "i", "make", "it", "remember", "the", "conversation", "and", "create", "a", "engram", "so", "i", "can", "train", "it", "through", "talking", "Like", "cleverbot", "add", "some", "small", "change", "to", "original", "code", "to", "fix", "some", "bug", "NUMBER", "Although", "those", "function", "were", "not", "be", "use", "NUMBER", "Still", "helps", "in", "keep", "the", "code", "clean", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "remained", "the", "same", "when", "pulling", "NUMBER", "bfb", "NUMBER", "a", "NUMBER", "acb", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "ec", "NUMBER", "e", "NUMBER", "eefa", "on", "PaarthBatra", "newmaster", "into", "eee", "NUMBER", "fb", "NUMBER", "d", "NUMBER", "cf", "NUMBER", "d", "NUMBER", "b", "NUMBER", "f", "NUMBER", "ad", "NUMBER", "d", "on", "gunthercox", "master", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "remained", "the", "same", "when", "pulling", "NUMBER", "de", "NUMBER", "a", "NUMBER", "ecdeae", "NUMBER", "ba", "NUMBER", "a", "NUMBER", "f", "NUMBER", "dbfff", "NUMBER", "dc", "on", "PaarthBatra", "newmaster", "into", "eee", "NUMBER", "fb", "NUMBER", "d", "NUMBER", "cf", "NUMBER", "d", "NUMBER", "b", "NUMBER", "f", "NUMBER", "ad", "NUMBER", "d", "on", "gunthercox", "master", "NUMBER", "Not", "yet", "NUMBER", "I", "be", "still", "in", "the", "process", "of", "reading", "the", "chatterbot", "and", "gettting", "more", "familiar", "slowly", "NUMBER", "I", "find", "some", "bug", "like", "in", "conversations", "NUMBER", "py", "s", "Statement", "class", "function", "detect_sentiment", "def", "detect_sentiment", "A", "property", "that", "describes", "hows", "the", "if", "self", "NUMBER", "sentiment", "return", "self", "NUMBER", "sentiment", "Evaluate", "the", "sentiment", "of", "the", "statement", "else", "not", "sure", "if", "we", "be", "use", "this", "function", "anywhere", "however", "it", "still", "miss", "a", "self", "i", "NUMBER", "e", "NUMBER", "correct", "one", "should", "be", "def", "detect_sentiment", "self", "A", "property", "that", "describes", "hows", "the", "if", "self", "NUMBER", "sentiment", "return", "self", "NUMBER", "sentiment", "Evaluate", "the", "sentiment", "of", "the", "statement", "else", "similarly", "something", "wrong", "in", "def", "get_sentiment", "name", "Returns", "the", "average", "sentiment", "for", "a", "single", "user", "throughout", "a", "conversation", "NUMBER", "sentiment", "for", "statement", "in", "self", "if", "statement", "NUMBER", "name", "name", "sentiment", "NUMBER", "append", "statement", "return", "TODO", "return", "the", "average", "sentiment", "can", "i", "do", "a", "change", "in", "it", "and", "add", "it", "in", "a", "new", "brach", "or", "be", "it", "best", "to", "raise", "a", "similar", "issue", "here", "Few", "question", "Once", "we", "have", "mongo", "db", "to", "replace", "flat", "file", "conversations", "NUMBER", "Do", "anyone", "who", "be", "use", "this", "project", "need", "to", "install", "its", "own", "instance", "of", "mondodb", "and", "have", "to", "open", "mongod", "NUMBER", "exe", "on", "their", "machine", "NUMBER", "Will", "it", "replace", "flat", "file", "or", "can", "we", "have", "both", "flat", "file", "and", "mongodb", "in", "such", "a", "way", "if", "someone", "dont", "have", "db", "install", "can", "still", "use", "flat", "file", "conversations", "NUMBER", "Do", "we", "still", "need", "to", "specify", "logfiles", "directory", "NUMBER", "How", "be", "we", "going", "to", "add", "default", "conversations", "to", "mongodb", "for", "every", "new", "installations", "That", "clears", "most", "of", "my", "doubts", "and", "Sorry", "about", "the", "typo", "Mongo", "Mondo", "NUMBER", "Implementation", "of", "DB", "as", "a", "replacement", "of", "flat", "file", "looks", "great", "NUMBER", "Only", "thing", "i", "can", "suggest", "be", "we", "should", "create", "a", "CSV", "file", "or", "rather", "have", "a", "database", "dump", "like", "database", "dump", "in", "oracle", "by", "which", "anyone", "who", "will", "use", "this", "library", "can", "import", "database", "dump", "and", "can", "use", "it", "with", "some", "of", "default", "conversations", "and", "we", "must", "include", "that", "in", "the", "readme", "section", "so", "it", "becomes", "clear", "NUMBER", "I", "be", "not", "mach", "familiar", "with", "MongoDB", "as", "of", "now", "install", "it", "yesterday", "its", "easy", "to", "install", "and", "yes", "db", "implementation", "should", "be", "far", "more", "better", "than", "flat", "file", "NUMBER", "Once", "the", "MongoDB", "implementation", "settles", "down", "and", "we", "have", "a", "semi", "reasonable", "API", "it", "might", "be", "useful", "to", "extract", "it", "out", "into", "an", "adapter", "so", "the", "data", "storage", "source", "location", "could", "be", "swappable", "NUMBER", "Considering", "there", "be", "different", "storage", "types", "out", "there", "for", "conversations", "IRC", "chat", "logs", "come", "to", "mind", "among", "many", "others", "it", "would", "be", "useful", "to", "be", "able", "to", "still", "fall", "back", "on", "different", "storage", "engines", "instead", "of", "relying", "on", "just", "a", "single", "engine", "NUMBER", "This", "update", "the", "README", "to", "match", "the", "OSS", "advertisement", "at", "Stack", "Overflow", "LINK", "NUMBER", "It", "also", "wipes", "out", "the", "example", "API", "keys", "to", "prevent", "any", "possible", "confusion", "from", "those", "who", "do", "not", "read", "the", "text", "below", "the", "block", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "remained", "the", "same", "when", "pulling", "NUMBER", "aa", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "NUMBER", "cddcd", "NUMBER", "c", "NUMBER", "edcccd", "NUMBER", "d", "on", "kevin", "brown", "patch_", "NUMBER", "into", "NUMBER", "e", "NUMBER", "ec", "NUMBER", "ffda", "NUMBER", "d", "NUMBER", "ac", "NUMBER", "f", "NUMBER", "be", "NUMBER", "on", "gunthercox", "master", "NUMBER", "_Heads", "up", "your", "link", "be", "dead_", "Remember", "that", "for", "the", "bot", "to", "be", "able", "to", "pass", "the", "Turing", "test", "it", "should", "be", "able", "to", "answer", "question", "like", "Explain", "why", "the", "following", "story", "be", "funny", "absurd", "A", "man", "walks", "into", "a", "bar", "and", "say", "Hello", "it", "s", "me", "but", "it", "wasn", "t", "him", "NUMBER", "My", "point", "be", "that", "although", "your", "implementation", "might", "pass", "a", "restricted", "Turing", "test", "aiming", "for", "the", "full", "version", "will", "require", "more", "semantic", "analysis", "NUMBER", "Turing", "question", "LINK", "LINK", "Right", "now", "the", "test", "be", "triggering", "an", "error", "on", "Travis", "because", "you", "be", "use", "python", "oauth", "NUMBER", "which", "be", "a", "library", "for", "OAuth", "NUMBER", "that", "do", "not", "support", "Python", "NUMBER", "You", "may", "want", "to", "look", "into", "oauthlib", "LINK", "for", "generating", "the", "tokens", "and", "request", "oauthlib", "LINK", "oauthlib", "for", "sending", "sign", "HTTP", "request", "NUMBER", "It", "support", "both", "OAuth", "NUMBER", "and", "OAuth", "NUMBER", "Right", "now", "you", "be", "use", "OAuth", "NUMBER", "for", "Twitter", "though", "it", "s", "recommended", "to", "use", "OAuth", "NUMBER", "instead", "NUMBER", "LINK", "only", "Considering", "the", "other", "services", "listed", "here", "use", "OAuth", "NUMBER", "and", "act", "on", "individual", "users", "instead", "of", "the", "application", "you", "may", "want", "to", "look", "into", "migrating", "to", "it", "NUMBER", "Hi", "This", "might", "not", "be", "a", "bug", "but", "rather", "a", "Question", "regard", "bot", "NUMBER", "Can", "you", "advice", "How", "can", "be", "finish", "the", "chat", "with", "bot", "from", "terminal", "I", "mean", "do", "we", "need", "to", "terminate", "the", "program", "or", "be", "there", "any", "other", "way", "like", "saying", "bye", "or", "something", "like", "that", "I", "have", "more", "question", "be", "this", "correct", "way", "to", "ask", "you", "question", "of", "do", "you", "want", "me", "to", "ask", "question", "somewhere", "else", "on", "email", "maybe", "crtl", "c", "wont", "work", "as", "i", "be", "use", "pycharm", "IDE", "on", "pycharm", "crtl", "F", "NUMBER", "be", "the", "command", "to", "terminate", "the", "program", "NUMBER", "I", "notice", "whenever", "we", "terminate", "the", "program", "it", "gives", "this", "error", "before", "be", "terminated", "_Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "File", "C", "Python", "NUMBER", "lib", "site", "package", "chatterbot__init__", "NUMBER", "py", "line", "NUMBER", "in", "b", "egin", "user_input", "str", "raw_input", "EOFError", "_", "I", "tried", "crtl", "c", "to", "terminate", "the", "program", "in", "python", "interpreter", "in", "my", "windows", "installation", "and", "get", "same", "error", "NUMBER", "Looks", "like", "a", "bug", "NUMBER", "exit", "works", "great", "NUMBER", "ok", "i", "will", "ask", "my", "question", "here", "NUMBER", "Thanks", "I", "notice", "whenever", "we", "terminate", "the", "program", "it", "gives", "this", "error", "before", "be", "terminated", "This", "be", "because", "raw_input", "be", "very", "likely", "pulling", "from", "an", "input", "stream", "and", "because", "the", "input", "stream", "be", "suddenly", "empty", "it", "hits", "an", "EOF", "end", "of", "file", "stream", "NUMBER", "It", "should", "probably", "be", "handle", "anyway", "NUMBER", "There", "be", "two", "ways", "to", "end", "the", "chat", "with", "the", "bot", "you", "can", "either", "terminate", "the", "program", "use", "crtl", "c", "or", "you", "can", "type", "exit", "to", "end", "the", "terminal", "session", "NUMBER", "You", "should", "actually", "use", "CTRL", "d", "to", "exit", "out", "of", "the", "Python", "interpreter", "as", "CTRL", "C", "will", "raise", "a", "KeyboardInterrupt", "which", "_usually_", "ends", "the", "program", "because", "it", "be", "not", "handle", "NUMBER", "CTRL", "D", "will", "send", "the", "exit", "signal", "the", "same", "as", "executing", "exit", "NUMBER", "CTRL", "D", "do", "nothing", "NUMBER", "from", "chatterbot", "import", "Terminal", "terminal", "Terminal", "terminal", "NUMBER", "log_directory", "D", "python_logs", "chatterbot", "conversation_engrams", "terminal", "NUMBER", "begin", "and", "for", "any", "input", "i", "just", "get", "No", "possible", "replies", "could", "be", "determined", "NUMBER", "How", "to", "fix", "this", "hi", "bot", "No", "possible", "replies", "could", "be", "determined", "NUMBER", "how", "r", "u", "bot", "No", "possible", "replies", "could", "be", "determined", "NUMBER", "ok", "great", "Thanks", "but", "how", "can", "i", "create", "more", "such", "samples", "NUMBER", "For", "example", "for", "terminal", "chatting", "bot", "doesnt", "know", "what", "to", "answer", "for", "What", "be", "your", "name", "How", "can", "i", "add", "this", "to", "its", "library", "by", "just", "chatting", "NUMBER", "be", "it", "possible", "Type", "something", "to", "begin", "NUMBER", "HI", "bot", "How", "be", "you", "doing", "What", "be", "your", "Name", "bot", "No", "possible", "replies", "could", "be", "determined", "NUMBER", "ok", "NUMBER", "I", "have", "be", "reading", "NLTK", "LINK", "a", "lot", "recently", "and", "i", "was", "thinking", "to", "have", "a", "bot", "python", "program", "somewhat", "like", "you", "have", "and", "on", "searching", "i", "find", "this", "project", "NUMBER", "NUMBER", "Just", "to", "add", "some", "thoughts", "here", "we", "should", "first", "select", "what", "type", "of", "bot", "it", "be", "NUMBER", "For", "example", "if", "we", "select", "a", "technical", "bot", "the", "bot", "should", "import", "all", "the", "technical", "conversations", "some", "historic", "and", "some", "standard", "books", "If", "bot", "be", "for", "English", "grammar", "learning", "it", "should", "import", "only", "conversions", "which", "have", "standard", "English", "learning", "trainings", "NUMBER", "Just", "some", "thoughts", "NUMBER", "That", "will", "be", "great", "NUMBER", "Can", "i", "help", "in", "some", "way", "ok", "great", "I", "have", "do", "some", "edit", "suggestions", "in", "the", "document", "NUMBER", "Please", "have", "a", "look", "NUMBER", "This", "be", "first", "time", "i", "be", "work", "on", "a", "open", "source", "project", "Please", "let", "me", "know", "if", "i", "do", "something", "wrongly", "NUMBER", "Using", "amazon", "linux", "and", "python", "NUMBER", "and", "install", "chatterBot", "use", "pip", "Ran", "basic", "examples", "and", "get", "this", "error", "from", "chatterbot", "import", "ChatBot", "chatbot", "ChatBot", "Ron", "Obvious", "response", "chatbot", "NUMBER", "get_response", "Good", "morning", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "AttributeError", "ChatBot", "object", "has", "no", "attribute", "get_response", "chatbot", "ChatBot", "response", "chatbot", "NUMBER", "get_response", "Good", "morning", "Traceback", "most", "recent", "call", "last", "File", "TAG", "line", "NUMBER", "in", "TAG", "AttributeError", "ChatBot", "object", "has", "no", "attribute", "get_response", "Tried", "similarly", "in", "windows", "python", "NUMBER", "NUMBER", "and", "same", "issue", "NUMBER", "Any", "solution", "to", "this", "The", "PyPI", "release", "appears", "to", "be", "out", "of", "date", "with", "the", "latest", "master", "NUMBER", "You", "can", "verify", "this", "with", "the", "NUMBER", "tag", "on", "GitHub", "NUMBER", "LINK", "The", "README", "reflects", "the", "latest", "version", "which", "has", "not", "yet", "be", "release", "NUMBER", "I", "would", "recommend", "installing", "ChatterBot", "use", "pip", "with", "the", "git", "repository", "pip", "install", "git", "git", "github", "NUMBER", "com", "gunthercox", "ChatterBot", "NUMBER", "git", "The", "command", "for", "iinstalling", "it", "via", "git", "gives", "error", "as", "follows", "chatterbot", "l", "pip", "install", "git", "git", "github", "NUMBER", "com", "gunthercox", "ChatterBot", "NUMBER", "git", "Collecting", "git", "git", "github", "NUMBER", "com", "gunthercox", "ChatterBot", "NUMBER", "git", "Cloning", "git", "github", "NUMBER", "com", "gunthercox", "ChatterBot", "NUMBER", "git", "to", "tmp", "pip", "EV", "NUMBER", "Jq", "NUMBER", "build", "Cannot", "find", "command", "git", "however", "for", "windows", "this", "worked", "Coverage", "Status", "LINK", "LINK", "Coverage", "decreased", "NUMBER", "when", "pulling", "NUMBER", "ca", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "c", "NUMBER", "ec", "NUMBER", "f", "NUMBER", "f", "NUMBER", "bbb", "on", "conversation", "into", "NUMBER", "b", "NUMBER", "afe", "NUMBER", "ca", "NUMBER", "ee", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "on", "master", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "increase", "NUMBER", "when", "pulling", "NUMBER", "b", "NUMBER", "ea", "NUMBER", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "aaf", "NUMBER", "a", "NUMBER", "d", "NUMBER", "on", "conversation", "into", "NUMBER", "b", "NUMBER", "afe", "NUMBER", "ca", "NUMBER", "ee", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "on", "master", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "increase", "NUMBER", "when", "pulling", "NUMBER", "cd", "NUMBER", "fd", "NUMBER", "df", "NUMBER", "f", "NUMBER", "fa", "NUMBER", "on", "conversation", "into", "NUMBER", "b", "NUMBER", "afe", "NUMBER", "ca", "NUMBER", "ee", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "on", "master", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "increase", "NUMBER", "when", "pulling", "f", "NUMBER", "a", "NUMBER", "fc", "NUMBER", "ed", "NUMBER", "bf", "NUMBER", "e", "NUMBER", "c", "NUMBER", "cbe", "NUMBER", "d", "on", "conversation", "into", "NUMBER", "b", "NUMBER", "afe", "NUMBER", "ca", "NUMBER", "ee", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "on", "master", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "increase", "NUMBER", "when", "pulling", "NUMBER", "eef", "NUMBER", "ffa", "NUMBER", "d", "NUMBER", "d", "NUMBER", "be", "NUMBER", "fac", "NUMBER", "e", "NUMBER", "on", "conversation", "into", "NUMBER", "b", "NUMBER", "afe", "NUMBER", "ca", "NUMBER", "ee", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "on", "master", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "increase", "NUMBER", "when", "pulling", "NUMBER", "a", "NUMBER", "a", "NUMBER", "edf", "NUMBER", "b", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fe", "NUMBER", "cf", "NUMBER", "edc", "NUMBER", "d", "NUMBER", "on", "conversation", "into", "NUMBER", "b", "NUMBER", "afe", "NUMBER", "ca", "NUMBER", "ee", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "on", "master", "NUMBER", "Coverage", "Status", "LINK", "LINK", "Coverage", "increase", "NUMBER", "when", "pulling", "ffec", "NUMBER", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "bdeb", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bf", "NUMBER", "a", "on", "conversation", "into", "NUMBER", "b", "NUMBER", "afe", "NUMBER", "ca", "NUMBER", "ee", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "on", "master", "NUMBER", "I", "would", "like", "to", "work", "on", "evaluate_mathematically", "NUMBER", "Is", "that", "alright", "If", "so", "be", "there", "anything", "you", "would", "like", "me", "to", "know", "or", "have", "any", "thoughts", "before", "I", "get", "start", "Also", "just", "a", "few", "comments", "question", "that", "I", "would", "like", "to", "add", "NUMBER", "NUMBER", "How", "do", "you", "plan", "on", "choosing", "which", "algorithms", "to", "apply", "Even", "though", "you", "save", "the", "input", "how", "will", "the", "chatbot", "know", "which", "input", "to", "actually", "use", "NUMBER", "How", "will", "you", "feed", "information", "to", "the", "find_a_name", "method", "For", "example", "how", "would", "you", "train", "the", "bot", "to", "answer", "Who", "was", "the", "president", "of", "the", "United", "States", "in", "NUMBER", "NUMBER", "What", "custom", "methods", "do", "you", "have", "in", "mind", "Would", "you", "want", "to", "use", "my", "personal", "assistant", "as", "a", "means", "for", "executing", "custom", "methods", "Or", "do", "you", "already", "have", "a", "plan", "in", "mind", "Ok", "NUMBER", "I", "will", "take", "that", "into", "account", "NUMBER", "Sorry", "for", "all", "of", "the", "change", "on", "the", "commit", "NUMBER", "Github", "be", "not", "cooperating", "with", "me", "right", "now", "NUMBER", "EDIT", "I", "have", "cleaned", "out", "my", "local", "repository", "but", "I", "be", "unable", "to", "fix", "the", "master", "branch", "NUMBER", "As", "soon", "as", "it", "be", "fix", "I", "will", "re", "clone", "having", "only", "the", "correct", "code", "NUMBER", "Again", "I", "apologize", "for", "the", "inconvenience", "NUMBER", "I", "m", "going", "to", "be", "swamped", "for", "a", "little", "while", "because", "of", "Google", "Code", "In", "but", "I", "will", "try", "to", "work", "on", "find_a_name", "and", "get", "that", "do", "by", "the", "end", "of", "December", "NUMBER", "I", "will", "post", "a", "comment", "containing", "the", "specifics", "for", "how", "I", "plan", "to", "develop", "the", "algorithm", "to", "find", "a", "name", "or", "fact", "as", "soon", "as", "I", "can", "NUMBER", "Some", "clues", "about", "how", "to", "do", "semantic", "parsing", "of", "question", "LINK", "pliang", "papers", "freebase", "emnlp", "NUMBER", "pdf", "By", "the", "way", "from", "my", "point", "of", "view", "some", "algorithms", "that", "could", "fit", "quite", "well", "into", "chatterbot", "be", "a", "POS", "tagger", "grammar", "rules", "from", "POS", "tags", "and", "custom", "dictionaries", "a", "named", "entity", "recogniser", "trigger", "classifiers", "intention", "interests", "etc", "NUMBER", "and", "access", "to", "a", "third", "party", "sources", "like", "wikipedia", "NUMBER", "Giving", "these", "capabilities", "chatterbot", "could", "understand", "this", "kind", "of", "question", "or", "statements", "Where", "be", "New", "York", "Who", "be", "Albert", "Einstein", "I", "usually", "play", "basketball", "at", "the", "New", "York", "Knick", "s", "Stadium", "I", "would", "love", "to", "read", "a", "new", "book", "NUMBER", "I", "would", "love", "to", "help", "NUMBER", "dmartincc", "It", "would", "definitely", "be", "a", "nice", "addition", "to", "have", "a", "utility", "kit", "for", "function", "like", "this", "NUMBER", "We", "could", "create", "custom", "implementations", "of", "each", "to", "fit", "out", "needs", "then", "use", "them", "when", "parsing", "input", "NUMBER", "I", "will", "look", "into", "add", "something", "like", "this", "for", "chatterbot", "NUMBER", "gunthercox", "What", "do", "you", "think", "Although", "I", "would", "say", "you", "be", "make", "a", "little", "bit", "of", "a", "jump", "here", "you", "can", "t", "just", "have", "those", "function", "and", "then", "expect", "chatterbot", "to", "be", "able", "to", "respond", "to", "Who", "be", "Albert", "Einstein", "NUMBER", "It", "will", "require", "other", "work", "including", "a", "knowledge", "database", "a", "way", "to", "parse", "through", "that", "information", "NUMBER", "I", "have", "do", "a", "lot", "with", "NLTK", "s", "build", "in", "function", "and", "I", "agree", "they", "be", "definitely", "a", "good", "place", "to", "start", "NUMBER", "Unfortunately", "they", "tend", "to", "degrade", "in", "capability", "as", "the", "sentences", "and", "ideas", "get", "more", "complex", "mainly", "because", "the", "function", "be", "based", "on", "math", "not", "semantic", "understanding", "NUMBER", "Because", "of", "this", "we", "will", "eventually", "need", "to", "use", "a", "custom", "implementation", "haven", "t", "really", "thought", "about", "the", "details", "yet", "NUMBER", "This", "looks", "awesome", "NUMBER", "Will", "past", "conversations", "be", "tied", "to", "a", "particular", "user", "This", "would", "be", "great", "NUMBER", "Is", "it", "possible", "somehow", "to", "make", "multiple", "chatterbot", "instances", "and", "then", "periodically", "combine", "their", "training", "into", "one", "database", "so", "that", "they", "all", "benefit", "from", "the", "others", "experience", "Great", "thanks", "for", "the", "info", "NUMBER", "On", "Sat", "Dec", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Gunther", "Cox", "notifications", "github", "NUMBER", "com", "write", "Yes", "one", "way", "that", "this", "would", "be", "possible", "would", "be", "to", "simply", "create", "a", "number", "of", "chatterbot", "instances", "and", "set", "the", "parameter", "so", "that", "they", "all", "use", "the", "same", "database", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER"], "text_count": [0, 36285, 9454, 5457, 3781, 227, 3981, 49, 102, 3990, 4796, 9547, 5393, 3365, 3902, 1482, 0, 0, 0, 0, 11290, 3199, 1970, 1405, 2994, 1733, 0, 0, 0, 0, 23020, 13535, 9615, 319, 4648, 1509, 0, 0, 0, 0, 33137, 215, 13335, 12156, 8413, 0, 0, 0, 0, 0, 7691, 5121, 4311, 1522, 2724, 1141, 2268, 0, 0, 0, 21370, 1219, 17858, 1199, 0, 0, 0, 0, 0, 0, 17370, 1986, 12403, 6200, 1938, 0, 0, 0, 0, 0, 29750, 16382, 2507, 9645, 1509, 1313, 0, 0, 0, 0, 1745, 7675, 843, 0, 0, 0, 0, 0, 0, 0, 25852, 3584, 15393, 7526, 0, 0, 0, 0, 0, 0, 50050, 102920, 1150, 3745, 992, 1615, 0, 0, 0, 0, 124415, 432, 90649, 1238, 20984, 30243]}]