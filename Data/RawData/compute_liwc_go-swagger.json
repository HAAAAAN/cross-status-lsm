[{"repo": "go-swagger", "type": "elite", "title": "", "number of text": 1198, "text": "  Without any proper spec example, we hardly can help you.  Fix issues on simple params: collections, nested collections and default values. Applied same rules for headers in responses.\r\n\r\n_Supersedes PR #1372_\r\n\r\n## Fixed issues\r\n- fixes #909 \r\n- fixes #961 (duplicate)\r\n- fixes #1378 \r\n- fixes #1384 \r\n- fixes #863\r\n- fixes #1373 \r\n\r\n- fixed similar issues with nested arrays and default values in response headers\r\n- this PR does **NOT** address known related issues with client generation\r\n- however, urlbuilder now supports collections and nested collection for path params\r\n\r\n## On the ci/testing side\r\n- [x] Reviewed CircleCI config to split the original script in several more tractable and visible steps\r\n- [x] Reviewed the run-canary.sh test vs valid/invalid specs. Added some \"fixed\" specs to move on further with generation testing [\"fixed\" means that spec validation issues where corrected to generate properly]\r\n- [x] Introduced new code generation build test on ./fixtures/codegen + some other fixtures. The objective is to generate a server and build it\r\n    ## Problem statement\r\nWhenever a schema declares a default value, the corresponding generated structure is properly initialized, like in:\r\n```yaml\r\nparameters:\r\n  - in: body\r\n    name: myBodyParam\r\n    schema:\r\n      type: object\r\n      properties:\r\n        p1: \r\n          type: string\r\n        p2:\r\n           type: integer\r\n      default:\r\n        p1: abc\r\n        p2: 12\r\n```\r\n\r\nHowever, when defaults are declared at a lower level, no initialization takes place, as in:\r\n```yaml\r\nparameters:\r\n  - in: body\r\n    name: myBodyParam\r\n    schema:\r\n      type: object\r\n      properties:\r\n        p1: \r\n          type: string\r\n          default: abc\r\n        p2:\r\n          type: integer\r\n          default: 12\r\n```\r\n\r\nIt looks like the \"schema\" term used in the [json schema spec](https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-6.2) has been taken to the letter, making it equivalent to the swagger schema term.\r\n\r\n\r\n## Steps to reproduce\r\ngenerate server with structures proposed  as examples and submit uninitialized body\r\n\r\n## Environment\r\nswagger version: x.x.x  \r\ngo version: x.x.x  \r\nOS:   \r\n I feel like issues #1062, #1093, #1392 and #1393 are closely related and indicate shortcomings in model generation which are quite similar to those I am currently fixing for simple parameters (validation of nested structures and applying defaults).  Looks very much like #1093  Hello @casualjim . This make me think of an issue I found when trying to generate from a canary spec which used mime types options (eg: `application/json ; xyz`).\r\nDo we have a specific runtime strategy to deal with such options? If you have any idea I suggest we continue this thread on issue #1377   OK just fixed it in my WIP branch. That would be in the PR#1372 if you don't mind  Does the explanation provided in #1118 help?  https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md\r\n I had started some work on the go-openapi/validate package to cleanly deal with overflows and lossy conversions but it's still work in progress (I believe it's related to issue#581).\r\nI don't think we are going to support bignum, but at least we cleanly could detect overflows at validation time.  Hello. With this commit you have the possibility to customize the \"initialisms\" (upper cased words who want to keep in one piece). It should work as it used to with: --additional-initialism=SMS  ## Problem statement\r\nBroken codegen on fixture\r\n\r\n## Swagger specification\r\n./fixtures/codegen/todolist.discriminators.yml\r\n\r\n## Steps to reproduce\r\n```bash\r\nswagger generate server --spec=./fixtures/codegen/todolist.discriminators.yml --name=nrcodegen --target=./gen-todolist.discriminators\r\ncd ./gen-todolist.discriminators/cmd/nrcodegen-server\r\ngo build\r\n```\r\n\r\nProduces:\r\n```\r\n# github.com/go-swagger/go-swagger/fixtures/bugs/909/gen-todolist.discriminators/models\r\n../../models/kennel.go:45:52: cannot call non-function m.Pets (type KennelPets)\r\n../../models/kennel.go:49:18: cannot call non-function m.Pets (type KennelPets)\r\n```\r\n## Environment\r\nswagger version: [current master]\r\ngo version: 1.9.1\r\nOS:   linux ubuntu 14.02\r\n It looks like the troublemaker is located here:\r\nhttps://github.com/go-swagger/go-swagger/blob/dfe8aa7cd3ac65f8d754cdf9ae285dd52a42e1d3/generator/model.go#L191\r\n\r\n  **This PR has been closed and replaces by PR #1394**\r\n\r\n- fixes #909 \r\n- fixes #961 (duplicate)\r\n- fixes #1378 \r\n- fixes #1384 \r\n- fixes #863\r\n- fixes #1373 \r\n\r\n- fixed similar issues with nested arrays and default values in response headers\r\n- this PR does **NOT** address known related issues with client generation\r\n- however, urlbuilder now supports collections and nested collection for path params\r\n\r\n## On the ci/testing side\r\n- [x] Reviewed CircleCI config to split the original script in several more tractable and visible steps\r\n- [x] Reviewed the run-canary.sh test vs valid/invalid specs. Added some \"fixed\" specs to move on further with generation testing [\"fixed\" means that spec validation issues where corrected to generate properly]\r\n- [x] Introduced new code generation build test on ./fixtures/codegen + some other fixtures. The objective is to generate a server and build it\r\n   @casualjim I am well aware that this PR started with a very small change, and is gradually growing.\r\nThis was unexpected.\r\n\r\n**So your review at this intermediate stage is welcome.**\r\n\r\nInspecting and thorough testing the generated code for BindRequest() for parameters showed out many shortcomings and generation bugs (e.g. arrays, nested arrays, default values, special cases for Date, Datetime or Duration...).\r\n\r\n**This is the main reason why I had to muscle up the CI.**\r\n\r\nSo far, we simply checked generated code with pattern. Now, we should be able to check that it compiles.\r\n\r\nOn my side, I have a more advanced testing suite which unit-tests BindRequest() with fixtures and check that validations are well processed. I am planning to contribute this as an additional template (with a `--gen-test=operations` option for instance) but it needs a lot of refactoring on my side to be generic (currently it is very much targeted to my own usage, since the unit test integrates an Hyperledge Fabric mock inside and checks the API response....).\r\n\r\nSample fixture used to test this P.R. Obviously, I haven't been able to generate such fixtures automatically...\r\n\r\n```json\r\n[\r\n   {\r\n        \"expectInvalid\": false,\r\n        \"params\": [\r\n            {\r\n                \"in\": \"query\",\r\n                \"name\": \"deepNested1\",\r\n                \"value\": \"a b c,a b c|d e f, g h i\"\r\n            },\r\n            {\r\n                \"in\": \"header\",\r\n                \"name\": \"deepNested2\",\r\n                \"value\": \"a b c,a b c|d e f, g h i\"\r\n            }\r\n        ]\r\n   },\r\n   {\r\n        \"expectInvalid\": true,\r\n        \"params\": [\r\n            {\r\n                \"in\": \"header\",\r\n                \"name\": \"deepNested2\",\r\n                \"value\": \"a b c,a b c|d e f, g h i\"\r\n            }\r\n        ]\r\n   },\r\n   {\r\n        \"expectInvalid\": true,\r\n        \"params\": [\r\n            {\r\n                \"in\": \"query\",\r\n                \"name\": \"deepNested1\",\r\n                \"value\": \"a b c,a b c|d e f, g h i|x y z, u v w\"\r\n            },\r\n            {\r\n                \"in\": \"header\",\r\n                \"name\": \"deepNested2\",\r\n                \"value\": \"a b c,a b c|d e f, g h i\"\r\n            }\r\n        ]\r\n   },\r\n   {\r\n        \"expectInvalid\": true,\r\n        \"params\": [\r\n            {\r\n                \"in\": \"query\",\r\n                \"name\": \"deepNested1\",\r\n                \"value\": \"a b c,a b c|d e f, g h i\"\r\n            },\r\n            {\r\n                \"in\": \"header\",\r\n                \"name\": \"deepNested2\",\r\n                \"value\": \"a b c,a b c|d e f, g h i|x y z, u v w\"\r\n            }\r\n        ]\r\n   },\r\n   {\r\n        \"expectInvalid\": true,\r\n        \"params\": [\r\n            {\r\n                \"in\": \"query\",\r\n                \"name\": \"deepNested1\",\r\n                \"value\": \"a b c|d e f, g h i\"\r\n            },\r\n            {\r\n                \"in\": \"header\",\r\n                \"name\": \"deepNested2\",\r\n                \"value\": \"a b c,a b c|d e f, g h i\"\r\n            }\r\n        ]\r\n   },\r\n   {\r\n        \"expectInvalid\": true,\r\n        \"params\": [\r\n            {\r\n                \"in\": \"query\",\r\n                \"name\": \"deepNested1\",\r\n                \"value\": \"a b c, a b c|d e f, g h i\"\r\n            },\r\n            {\r\n                \"in\": \"header\",\r\n                \"name\": \"deepNested2\",\r\n                \"value\": \"a b c|d e f, g h i\"\r\n            }\r\n        ]\r\n   },\r\n   {\r\n        \"expectInvalid\": true,\r\n        \"params\": [\r\n            {\r\n                \"in\": \"query\",\r\n                \"name\": \"deepNested1\",\r\n                \"value\": \"a b c, a b b|d e f, g h i\"\r\n            },\r\n            {\r\n                \"in\": \"header\",\r\n                \"name\": \"deepNested2\",\r\n                \"value\": \"a b c, a b c|d e f, g h i\"\r\n            }\r\n        ]\r\n   },\r\n   {\r\n        \"expectInvalid\": true,\r\n        \"params\": [\r\n            {\r\n                \"in\": \"query\",\r\n                \"name\": \"deepNested1\",\r\n                \"value\": \"a b c, a b c|d e f, g h i\"\r\n            },\r\n            {\r\n                \"in\": \"header\",\r\n                \"name\": \"deepNested2\",\r\n                \"value\": \"a b c, a b c|d e e, g h i\"\r\n            }\r\n        ]\r\n   },\r\n   {\r\n        \"expectInvalid\": true,\r\n        \"params\": [\r\n            {\r\n                \"in\": \"query\",\r\n                \"name\": \"deepNested1\",\r\n                \"value\": \"a b c, a b c|d e f, g h i\"\r\n            },\r\n            {\r\n                \"in\": \"header\",\r\n                \"name\": \"deepNested2\",\r\n                \"value\": \"a 9 c, a b c|d e f, g h i\"\r\n            }\r\n        ]\r\n   },\r\n   {\r\n        \"expectInvalid\": true,\r\n        \"params\": [\r\n            {\r\n                \"in\": \"query\",\r\n                \"name\": \"deepNested1\",\r\n                \"value\": \"a b c, a b c|d e 9, g h i\"\r\n            },\r\n            {\r\n                \"in\": \"header\",\r\n                \"name\": \"deepNested2\",\r\n                \"value\": \"a b c, a b c|d e f, g h i\"\r\n            }\r\n        ]\r\n   }\r\n]\r\n```  - fixes #1370  I have yet to update the doc. Coming up...  This PR provides the generation part for #1348\r\nThe fix will be effective with the validation part, starting with go-openapi/validate#60\r\n\r\nPlus:\r\nMinor refactoring:\r\n\r\n    split format definitions, reorder them and check they match definitions strfmt default registry (e.g. for bsonobjectid)\r\n    split debug related definitions\r\n    some layout, structuring in doc.go\r\n\r\n    This PR provides the generation part for #1348 \r\nThe fix will be effective with the validation part, starting with go-openapi/validate#50\r\n\r\nPlus:\r\nMinor refactoring:\r\n- split format definitions, reorder them and check they match definitions strfmt default registry (e.g. for bsonobjectid)\r\n- split debug related definitions\r\n- some layout, structuring in doc.go\r\n    - fixes #1347 \r\n\r\nAlso removed output on new unit tests that have been added since I last cleaned the logs.  - fixes #1356   \u2026only assets)\r\n\r\n- fixes #1362   I think it's out of our scope to carry on this kind of rules.\r\nThere are already so many things to do to adhere to one's specific use-case. \r\n\r\nYou may be interested in this to add in your toolchain: https://github.com/naegelejd/gocat\r\nAlternatively, you might be a fan of grunt. There are some go plugins to orchestrate build tasks. This is typically as place we you might insert a source concat plugin;\r\n  Yes. I tested again and found the regression.\r\nPR #1315 introduced a function BaseImportFunc in generator structure, which cannot be rendered as JSON by dump-data.\r\n We need a custom marshall that excludes unsupported types such as functions, interfaces, ...  This thread would be a welcome addition to our FAQ: https://github.com/go-swagger/go-swagger/blob/master/docs/faq/faq_spec.md\r\n  This flag is indeed not supported. We desupport this option and update the doc. Thanks. No more flag.  Couldn't see why exactly, but can point as to see where.\r\nIt's in `generator/build_test.go`\r\nThis simulates a go get and build. Perhaps upgrading the test to use `go get gopkg.in/go-swagger/go-swagger.{current-branch}` and retrieve the current branch from the build env? I can see this time this is a spec validation test that failed.\r\nWonder if it is a regression introduced my latest PR with spec valition.\r\nI'll test with this fixture (docker spec).\r\nStrange, I specifically made a test to run the spec validate through all these fixtures in the go-openapi/validate package...  I had a look at the fixtures/canary/docker/swagger.json specs which is blocking the UT:\r\nit is considered invalid as for now for go-swagger.\r\nIt was already considered invalid when PR merged the new validate version.\r\nI don't understand why this is blocking the UT now since this has been a known fact for some time.\r\n\r\nSpec validation errors are acceptable for now (we ought to improve, though, so docker may use go-swagger :) ):\r\n- support for multiple types, e.g: type: [ 'object', 'array' ] : this is a bug in validate but I don't think it is new\r\n- duplicate operationId : this is a known limitation in go-swagger (operations must be globally unique while the spec states that (path,operationId) must be unique\r\n   I think we need an explanation on how suddenly the UT on validation requires this docker spec to be valid.\r\n\r\nIt is, in a sense, but we can't support it yet. I must admist that this side effect of your otherwise unrelated change is hard to follow. I'll try to have a look over the we.\r\n\r\nFirst PR I made I had the kind of bizarre stuff from CI. It is a complex application, indeed. @diego-fu-hs  : to pass the CI/CircleCI\r\n- in ./hack/run-canary.sh we must disable the docker spec:\r\n+ ` && [ $dir != 'docker' ] `\r\n\r\nWe have actually two issues which are related to my own previous PR and not yours. So I'll take care of fixing them. For the AppVeyor CI, I didn't find out. The fixture \"bug/825\" tested is expected to fail ok.\r\nWhy we have a timeout I don't know. I could see all tests where very long in this CI session. So maybe it was just unrelated. Let's run the CI again after a commit bump OK I understand better now. I suppose you have discussed with @casualjim about removing the --skip-validation flag.\r\nHowever it has some impact on the CI, since some tests where specifically running in that grey zone of invalid specs for which a generation could be run...\r\n\r\n+ canary/docker (in ./hack/run-canary.sh) was one of them\r\n+ I suppose that the spec in ./fixture/bug/825 (which does not validate) is like this (see run failure on AppVeyor)\r\n\r\nIn https://github.com/go-openapi/validate/blob/master/swagger_test.go there is a full list of all fixtures from the go-swagger repo that do not validate [used to test the validate package itself]. Ok, if I recap:\r\n- `--skip-validation` has an impact on the docker build (circle ci) since we attempt to generate specs that are not valid. This one should not be removed.\r\n- `--skip-validator` (grr I made the mistake too!) is not used and neither useful (?). Removing it from implem and doc should \"fix\" #1354.\r\n\r\nNow about the `go-openapi/validate` package, this P.R inspired me some todos there (:imp:):\r\n- [ ] Support the construct: `- type: [ xxx, array ]` when checking every `items` refers to an array\r\n- [ ] Simulate a go-swagger merge in Travis and run the docker-build script. This would be a non-blocking Travis CI job, just to check that a validate branch may be merged into go-swagger without harming the CI.\r\n  \r\n   Fixes #1354  I don't know. Still, it is valuable to know that a big spec like docker, we can't support it... So what do you suggest we use for C.I? As for now, Circle CI actually checks it can build a docker image.\r\n\r\nIf you remove the canary hurdle from go-swagger, I think I'll add it on the validate side.\r\nFor validation, I think it's always a good idea to benchmark against big such big specs @diego-fu-hs as far as I can see it looks okay now. What do you think @casualjim ?  Because the repo is used to build binaries for releases (e.g. docker, other binaries) Makefile for docker. ./hack contains related scripts.\r\nI don't know for the linux packages etc...  Thanks. I've just added this in my current branch for spec validation part, that should merged in a couple days.\r\nThis will probably need some additional stuff in the generator part, though. Let us figure that out with @casualjim next week When analyzing the type validation, I could see there are a quite a few other formats missing.\r\nTedious homework, but it should be done.\r\n\r\n@casualjim : I don't know about the generator, but regarding the validate.typeValidator.schemaInfoType(), I suggest this kind of reverse lookup be deferred to strfmt : on the long term, it is just not possible to keep things in sync with all fmts, not to mention the possibility of custom format registries. The generation part should be available in go-swagger with PR#1368\r\nThe validation part should be available with PR go-openapi/validate#50\r\n\r\n@allencloud with these live branches available (not yet merged), could you please confirm your issue will be solved? We need to update vendor before closing this  Hello.\r\nI Believe your isssue lays here: https://github.com/go-swagger/go-swagger/blob/7077865cc6012ee95137f25cdf2020ee521f985d/generator/templates/schemavalidator.gotmpl#L289\r\n\r\nI just couldn't figure out why the .HasValidation property remains false in your case.\r\n\r\nWould you care some more digging based on this information? \r\n> (you may alter the template - this one may not be overriden: is has to be in ./generator/template then rebuilt with updated binddata.go).\r\n\r\nIn order to understand the data structure passed to the templater you may run `swagger generate ... --dump-data`.\r\n\r\n\r\n Intuitively, .HasValidation should be set to true when a format is defined.\r\nHowever when I look at the setting of this value in model.go, there not much left of my intuition :) That should be already prepared by the schema.\r\nWhat I can see here is just some trickery to lift anonymous types. I would need some time to dig it, but right now I just can't. Yes I think you're right: `|| model.Format != nil`should do the job.\r\nI must admit I am an absolute beginner in that part of the code. How do we check that there is no messing around? @gregmarr I tested our findings and... it's much more complicated than it seems.\r\nThese templates are devilish:imp:  build the main.go Congratulations!   @allencloud : this story is also related in go-openapi/swag#12, go-openapi/swag#11.\r\nName conversion heavily relies on camel case convention.\r\n\r\nThe point in your case is to detect correct \"initialisms\", i.e words that do not follow the regular Camel-casing.\r\n\r\nIP is one of them, so the function knows it has to keep it one word. AM is not, so it is broken up in words.\r\nIf you had: IPAm, you should get ip_am as expected.\r\n\r\nTo work around your problem, you may configure the list of such initialisms in https://github.com/go-openapi/swag/blob/master/util.go#L27 and add \"AM\" as such an \"initialism\".  Fixes some broken links after latest doc update (README & gitbook).\r\n\r\nShall require an update of the goswagger.io website.\r\n\r\nfixes #1149 (missing doc on swagger:ignore documentation)  This PR exclusively contains doc (md files).\r\n\r\nThe intent is to help cleaning up a little bit our large stove of questions/answers & code examples by providing a recap/update on some of them.\r\n\r\nThis would also allow to close a good number of question \"issues\", some of them being now outdated.\r\n\r\nSo here is the content:\r\n- [x] A revamped README.me\r\n  - [x] Use-cases pop up, what's inside details in other md\r\n  - [x] A slightly revamped SUMMARY.md for the gitbook\r\n- [x] A FAQ README index and a FAQ doc by topic.\r\n\r\nIn my opinion this would allow us to close the following issues:\r\nfixes #636 \r\nfixes #554 (outdated/unhelpful material)\r\nfixes #730 (outdate/unhelpful material)\r\nfixes #911 \r\nfixes #996 \r\nfixes #1085 \r\nfixes #1036\r\nfixes #762 \r\nfixes #1005 \r\nfixes #661 \r\nfixes #481 \r\nfixes #305\r\nfixes #959 \r\nfixes #990 \r\nfixes #643 \r\nfixes #616 \r\nfixes #948 \r\nfixes #370 \r\nfixes #787 \r\nfixes #719 \r\nfixes #213 \r\nfixes #68 \r\nfixes #960 \r\nfixes #1003 \r\nfixes #668 \r\nfixes #561 \r\nfixes #599 \r\nfixes #407 \r\nfixes #47 \r\nfixes #400 (obsolete/not helpful) Hi Ivan\r\nWell, since all of this is essentially a rewrite/cut/recap of your contributions, you definitely have a word to say in this!\r\nIt tried to keep most of the value in these exchanges: code samples, original use cases, links to resources...\r\nI cut the chatter to make it shorter and readable. There might be some issues with the gitbook, though. I haven't been able to check everything there.\r\nIn my view, best to merge / update gitbook and patch possible doc glitches afterwards...\r\n A few glitches with doc links remain. I'll patch them soon  @sebastien-rosset \r\nDo you confirm the issue may be closed now that your PR has been merged?  My own feeling is that all contributions are welcome.\r\nYou should not worry that much about bug vs enhancement distinction in issues.\r\nIt is more an indication on how to priorize things.\r\nSince the toolkit has many use cases it is often difficult to judge priority from a single userr's perspective.\r\n\r\nGenerally speaking if you feel it is important, post a PR.  As a work around, I believe that setting skip_format = true in the generator's yaml config file should allow to bypass this check. I am not sure about this specific check.\r\nI have recently modified things so that code not passing format check is written down no matter what, with a warning (intent was to allow template debug).\r\n\r\nHow about a PR with an additional skip_checks or alike to bypass the unwanted check?\r\n @elakito Check out https://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L553  OK  Yet another spec validation fixture. \r\nThis time, 3 spec versions could be fabricated from issue#342:\r\n1. one which used to panic. There is still room for improvement on error messages but the error is well detected.\r\n2. one which I created by mistake from @casualjim example: it is invalid, but is not detected as such cleanly and calls log.Fatal(). Better than panicking, but the cause of the error is not well reported.\r\n3. one which is correct (example from @casualjim).\r\n\r\nThe UT does not go so far as to generate the application: it just validates the spec (I tested manually that the server generation works as well))  Issue#1171 has been much embroiled...\r\nThere are basically 2 cases mentionned:\r\n- object with an items property : covered with fixture for issue#1238 (more or less a duplicate of #1171, only clearer)\r\n- items missing in array. This case specifically covered by the present fixture.\r\n\r\nTogether with issue#1238, both cases discussed are covered by UT (new exerciser for cmd/swagger/validate). Of course, merge issue... Thanks Ivan.\r\nNow I believe we can close #1171 and move on further.  Added fixture following confirmation that go-swagger/go-swagger#1238 has been fixed (items on objects).  - Tested more error cases.\r\n- Enriched error messages from template repo.\r\n- Suppressed 1 log.Fatal() by return err for better testability.\r\n\r\nOverall, test coverage of template_repo.go should reach about 92%.\r\n  It is the hack script to build the coverage report that fails\r\nIn: .circleci/build-docker.sh It might be that you have an outdated version of this script in your branch. The \"rm -f\" deletion of the temp file has been added a few months ago. I know it doesn't. But still, the CI runs your branch, before merging Before all compare the ./.circleci/build-docker.sh in your branch with the master  Minor change in order to better get the essentials when running CI checks. Grr still too chatty... Now I may read Appveyor's output.  server generation now supports operationGroups templates just like clients.\r\nNow provided with unit test.  Tested manually. No automated unit test available yet Yes. I messed up with my fork to resync it. Tried to rebase but didn't clean.\r\nThe actual diff is exactly what I did: 5 lines in 1 file.\r\nI lost some time with git-stuff, but at some point, I gave up. If really this is a problem on your side, I just drop the fork and make a new one with those 5 lines...\r\nI also started rewriting the full story-telling to recap and close the 35 \"questions\" issues, as promised.  Tested manually. Should not break unit test. No specific unit test done yet. Please wait.  ## Problem statement\r\nDefined a custom template.\r\nDeclared it in the config YAML section 'operation_groups:'\r\nRun server generate on this config\r\n\r\nNothing happens! The generator found an operation group but didn't take template into account.\r\nRetesting with a wrong source template name indicates that there is not even an attempt to load the template.\r\n\r\nWill fix this with a P.R as soon as the regression on security items allows a CI based on current master to run...\r\n\r\nCheers,\r\n\r\nFred\r\n\r\n## Environment\r\nswagger version: 0.12\r\ngo version: 9.1\r\nOS:   Linux\r\n Merged with 1290-fix server generation now supports operationGroups templates jus\u2026 #1298  Reproduced the different cases.\r\n- $ref is out of cause (in this limited context at least)\r\n- with correct $ref setting (e.g. without siblings in a schema, as required by Swagger 2.0 Spec - WHICH IS NOT json schema), spec validates and generates a server that builds\r\n- issue can be pin-pointed to forbidden mix $ref + sibling, which is correctly detected by `swagger validate`, although the returned error message does not state clearly the issue (complains about missing \"items\")\r\n\r\nWill add these fixtures in cmd/swagger/commands/validate_test.go for the record, then close the issue, if @somebi has no objection.\r\n\r\nFred\r\n This the actual error. \r\nSpec validation error messages are really poor and a great cause for misunderstanding and waste of time overall. An issue is now dedicated to this. \r\nAt some point, there was also an idea for an enhancement to produce the line number in the spec file, but it seems quite a bit complicated.\r\n\r\nI won't close this one, but requalify it as a request for enhancement with error messages, which seems fair enough. Will work next week on a PR to improve this, hopefully together with some other `swagger validate` shortcomings. @Somebi I improved somewhat the error signaling, but this fix does not (yet) identify the actual cause ($ref sibling). It is a bit complicated in the validation package to get it right.\r\nFurther, $ref siblings actually should generate a warning (they are not strictly forbidden, but the resulting behavior is most likely unwanted).\r\n\r\nIn your case, I could however croak some more valuable information about the problem, such as missing items in array, which should help in spec problem pin-pointing.\r\n\r\nBottom line: the ticket remains open, but we have somewhat improved.  Hello Karim\r\n\r\nI tagged all issues related to ref resolution so ot might be a good idea to validate your fix against all of them, once and for good. \r\n\r\nThey are probably some duplicates, but maybe some are slighly different from mines.\r\n\r\nCheers\r\n\r\nFred  Hello.\r\n\r\nMy undertanding is that the version command has been designed to be used with binary distributions of go-swagger (as docker images).\r\n\r\nThe version is prepended at build time by the makefile in charge of preparing the docker image (actually, this generates a link time symbol).\r\n\r\nI don't see why it should be an issue to have it set as \"dev\" when using the source distribution for different purposes [like you suggest, using it in a non-git place such as vendor].\r\n\r\nWhat your report suggests behind the lines [tell me if you disagree with that], is to use git attributes somewhere to encode the version in a source file, rather than resolve it at build time.\r\n\r\nThis used to be a common practice with svn or other scvs such as CVS. Git strongly discourages the use of it, even though it is technically possible, with great care and caution. \r\n\r\nFurther, go-swagger is still in its 0.x release series. It might just not be the right time to enter this debate about whether resolving $Version$ tags in source code is a good thing or not.\r\n\r\nCheers,\r\n\r\nFred  if semantically the same how is omitempty an issue? can it be fixed with a custom marshal/unmarshal? not from a go perspective. both are empty. in go nil and [] are the same, https://play.golang.org/p/UNZ5kT2JSC\r\n\r\nwe have the same issue with validations where we have a hard time distinguishing between key not present and value not present, or value set to empty.\r\n\r\nWould the right solution be to use a pointer? that way you can distinguish between the things more easily. I merged this PR now  Is this a duplicate of #1309 (fixed by #1310)?\r\nWould need to check if the fix apply in your case as well.  it fails because it's printing to stderr Windows (appveyor) thinks anything that prints to stderr is a failure I suspect it has to do with the new log statemetns that were added \r\n\r\nAppVeyor has been going for more than a year on this project yes fine with the feature this might give you an idea how to avoid the stderr issue:\r\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/operation_test.go#L367-L370 I fixed the issue occuring on windows. Now waiting for master to be repaired to rebase my branch. \r\nCheers  \ud83d\udcaf great work yeah don't worry about the codecov patch stuff. Code coverage is a poor measure of quality anyway.  no not yet sorry  it seems that your main.go is in $GOPATH and not $GOPATH/src Hello. Could you please have a look first at this reference link : https://golang.org/doc/code.html#GOPATH\r\n\r\nIt really looks like your source is not under $GOPATH/src  in addition openapi 2.0 doesn't allow for multiple types in a type field.     there are 2 different use cases here.\r\n\r\n1. editing specs and sharing pre-existing schemas by using references and promoting reuse\r\n2. generating code where on an API boundary what goes over the wire has no concept of reuse or types just shapes of data.\r\n\r\nSo whether we flatten prior to the generation process or during the generation process by resolving refs ad-hoc should be of no consequence. The shape of the data is the same. The generation process works as follows:\r\n\r\n1. resolve remote references and make them local\r\n2. move all anonymous schemas into definitions and give them a name\r\n3. generate an intermediate DOM (AST) from the specification that can be used for code generation\r\n4. Pass AST to a number of templates and render code based on the information within the AST. @casualjim I have to disagree with your explanation:\r\n- I tested with and without id or $id in the JSON schema part: same behaviour\r\n- id or $id JSON schema keywords are not explicitly unsupported in OpenAPI 2.0, this precision comes from 3.0\r\n[as per https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md, I could not find an equivalent to 3.0's: https://swagger.io/docs/specification/data-models/keywords)\r\n\r\nHowever, it is interesting to get this view and move it to the spec validator. In this case, we should choose wether to ignore \"id\" or \"$id\" (I don't think it is used for $ref resolution anyhow) or to have the `spec validate` to shoot a validation error on this. \r\n\r\nI'll work next week on the spec validation part, as I found out I spent too much time cleaning my (long) specs figuring out errors. Todo on that one:\r\n- [ ] Test the effect of #1285 on the reported test cases\r\n- [ ] Test the impact of id and $id in this context\r\n- [ ] Move id, $id dectection to spec validation layer, with error or warning (to be decided, depending on impact) Thanks Karim. this is exactly what I observed (and hopefully, reported).\r\nSo do we all agree that Id /$Id is something that should probably be a warning in spec validate (I can take cae of that)?\r\n\r\nThe problem specifically here is that the analyzer does not recognize that \"B\" is a \"complex type\" that should not be zeroed with make().\r\n\r\nThis has something to do with the $ref (inline schema works) but should be narrowed to the array case (object works). I may try to narrow it further, as a I only tested the Response case. I didn't check the behaviour for param in this case.\r\n  You know the ref in a is invalid in syntax.\r\n\r\nit has:\r\n\r\n```\r\n$ref: ./test2-schema.json/#definitions/a\r\n```\r\n\r\nBut I suspect it should be:\r\n\r\n```\r\n$ref: ./test2-schema.json#/definitions/a\r\n```  can you run `go generate ./generator` and push the changes. Otherwise your change won't be picked up  you can use: `swagger serve --flavor swagger --doc-url https://api.subledger.com/`\r\n\r\nWhat you're seeing there is an older version of the swagger ui in use on the petstore url  that might just be timestamps  care to submit a PR for that?  You don't strictly need to specify the Content-Type header.\r\n\r\nI think it should work if you define your spec like:\r\n\r\n```yaml\r\nswagger: \"2.0\"\r\ninfo:\r\n  title: Test\r\n  version: 0.0.1\r\nschemes:\r\n- \"http\"\r\npaths:\r\n  /test:\r\n    get:\r\n      produces:\r\n        - \"application/octet-stream\"\r\n      responses:\r\n        200:\r\n          description: 200 response\r\n          schema:\r\n            type: string\r\n            format: binary\r\n```\r\n\r\nWhen it comes to unknown mime types and not having producers or consumers, those are stored in a map on the client and you can add your own.  They are not meant to be a complete list although we could/should probably add a few more.\r\n\r\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L140-L151\r\n\r\n  refs are not suported in headers in openapi 2.0.\r\n\r\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#header-object\r\n\r\nOnly responses.\r\nSeen as you're using yaml you could use yaml anchors to get the desired outcome. that would be a bug in the swagger editor not a feature  you can reuse the json struct tag to provide a different name for those properties    I just merged those changes into master on go-swagger/go-swagger I verified that the current version correctly detects this as a spec error.\r\nMade a shorter fixture to reproduce the case.\r\nI'll push PR to add this check as a fixture in UT This issue should be closed now  Possible duplicate of #1093   you need to export the fields in your parameter struct\r\n\r\nand `// swagger:parameters getEmployee` needs the operation name(s) it applies to  the problem here is that we marshal data into a struct and only then validate it. Go's json library doesn't give us much to recover from this and to give a more meaningful error message unfortunately.\r\nI'm open to suggestions though  in openapi 2.0 oneOf and anyOf are not supported.\r\nbut we'll look at the rest of the discriminated support  Hello. I tested your case.\r\nActually, you are not using the proper Swagger 2.0 syntax for examples in responses.\r\nResponses are not examplified the same way as params.\r\n\r\nIf you specify your response with:\r\n```\r\nresponses:\r\n        200:\r\n          description: Customer\r\n          schema:\r\n            $ref: '#/definitions/customer'\r\n         examples:\r\n           application/json:\r\n             id: 123\r\n             email: 123\r\n             create_date: 123\r\n```\r\n\r\nYou get an invalid spec as expected.\r\n\r\nI agree that finding \"example\" instead of \"examples\" should trigger a warning, as \"blank\" validation was probably not what was intended. Will do that in related PR go-openapi/validate#42. Yes. I am in the validation code trying to figure it out and also this page of the specification.\r\nIt is not quite explicit that schema examples apply in the context of responses, but we may suppose it is so (I would, like you).\r\nThe validation code for responses explicitly searches for \"examples\"... \r\nI am digging in further and let you know It works with params but validation messages are misleading. So something has to be changed anyhow. I get your use case. I just got the same... we need to update vendor before closing this  Implement a responder, by default we generate a few we can infer from the swagger spec but you can easily implement your own.\r\n\r\nit's essentially  a `func(http.ResponseWriter, runtime.Producer)`\r\n\r\nhttps://github.com/go-openapi/runtime/blob/master/middleware/context.go#L56-L68\r\n  Would you expect the outcome to be:\r\n\r\n```json\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"description\": \"This is the public REST API \",\r\n    \"version\": \"1.0.0\"\r\n  },\r\n  \"paths\": {\r\n    \"/thing\": {\r\n      \"post\": {\r\n        \"description\": \"Do thing\",\r\n        \"operationId\": \"aThing\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"SomeObject\",\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/SomeObject\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"definitions\": {\r\n    \"CustomFields\": {\r\n      \"type\": \"object\",\r\n      \"additionalProperties\": {\r\n        \"type\": \"object\"\r\n      },\r\n      \"x-go-package\": \"github.com/example-swagger\"\r\n    },\r\n    \"SomeObject\": {\r\n      \"type\": \"object\",\r\n      \"title\": \"SomeObject ...\",\r\n      \"allOf\": [\r\n        { \r\n          \"$ref\": \"#/definitions/CustomFields\" \r\n        }\r\n      ],\r\n      \"properties\": {\r\n        \"name\": {\r\n          \"description\": \"Name - a name\",\r\n          \"type\": \"string\",\r\n          \"x-go-name\": \"Name\"\r\n        }\r\n      },\r\n      \"x-go-package\": \"github.com/example-swagger\"\r\n    }\r\n  }\r\n}\r\n``` in that case you're modeling this wrong because that's not what you're saying.\r\n\r\n```json\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"description\": \"This is the public REST API \",\r\n    \"version\": \"1.0.0\"\r\n  },\r\n  \"paths\": {\r\n    \"/thing\": {\r\n      \"post\": {\r\n        \"description\": \"Do thing\",\r\n        \"operationId\": \"aThing\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"SomeObject\",\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/SomeObject\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"definitions\": {\r\n    \"CustomFields\": {\r\n      \"type\": \"object\",\r\n      \"additionalProperties\": {\r\n        \"type\": \"object\"\r\n      },\r\n      \"x-go-package\": \"github.com/example-swagger\"\r\n    },\r\n    \"SomeObject\": {\r\n      \"type\": \"object\",\r\n      \"title\": \"SomeObject ...\",\r\n      \"properties\": {\r\n        \"name\": {\r\n          \"description\": \"Name - a name\",\r\n          \"type\": \"string\",\r\n          \"x-go-name\": \"Name\"\r\n        },\r\n        \"customFields\": {\r\n          \"type\": \"object\",\r\n          \"additionalProperties\": {\r\n            \"type\": \"object\"\r\n          }\r\n        }\r\n      },\r\n      \"x-go-package\": \"github.com/example-swagger\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nif that is what you want then your struct should be defined as:\r\n\r\n```go\r\n///go:generate swagger generate spec\r\n\r\n// Package API\r\n//\r\n// This is the public REST API\r\n//\r\n//\t   Version: 1.0.0\r\n//\r\n// swagger:meta\r\npackage exampleswagger\r\n\r\n// swagger:operation POST /thing aThing\r\n//\r\n// Do thing\r\n//\r\n// ---\r\n// Responses:\r\n//   '200':\r\n//     description: SomeObject\r\n//     schema:\r\n//       \"$ref\": \"#/definitions/SomeObject\"\r\n//\r\n\r\n// SomeObject ...\r\n// swagger:model\r\ntype SomeObject struct {\r\n\t// Name - a name\r\n\tName string `json:\"name\"`\r\n\tCustomFields CustomFields `json:\"customFields\"`\r\n}\r\n\r\ntype CustomFields map[string]interface{}\r\n```\r\n     \r\n  you can use another annotation in your spec to provide extra struct tags\r\n\r\nfor example:\r\n\r\n```yaml\r\ntype: object\r\nproperties:\r\n  productCode:\r\n    type: string\r\n    x-custom-tag: \"bson:\\\"productCode\\\" proto:\\\"product_code\\\"\"\r\n```  updated discriminated.md  why would max length matter for an ISO-8601 date?   it's the blank lines  Redirection flow is for UI... The spec has them so your UI can do the redirection.\r\nSwagger 2.0 only defines those properties as hints for a UI to work, this doesn't have to be server side. At the same time the redirection flow is not supported in an API but you can use an OAuth 2.0 middleware from any library to get you that functionality  this is a yaml thing.\r\nYou want to single quote your key name: 'n'  Yes the generator works with yaml and json so you can use either.\r\nI agree on line number and column position however default go tooling doesn't provide the right means to do so  there is nothing that specifies the properties of an object support strict ordering. Neither in the JSON spec nor in the swagger 2.0 specification  I just merged x-omitempty (#1189)\r\nif you add that to the spec you can skip then nulls  IMO int is not a good option to support when it comes to contracts.\r\nConsider the following: you have an arm32 client on which int is int32, however your server is amd64. At this stage it's perfectly valid for the server to return int32 max value + 1, this will cause the client to overflow.\r\nSo while go allows int as type I think for API contracts int is too ambiguous as definition leading to subtle but hard to debug failures.\r\nSimilarly other languages may choose to default to int32 type instead of int64 type regardless of platform.  sorry for the long wait, I'm in the middle of moving homes.  I'll bump the release version next week  there is a way to use a pre-existing type that exists on the file system.\r\nThat would be another way to solve this problem.   the type file is specific for formData params.\r\nI believe your intent is to stream some data to the client, perhaps with the content-disposition header. To do this use:\r\n\r\n```yaml\r\ntype: string\r\nformat: binary\r\n```\r\n\r\nThis will render the correct code for you to use.  discussed offline  This should work because the yaml library does this during parsing. So you are still sane :)\r\nHowever swagger ignores those extra fields so perhaps do \r\n\r\n```yaml\r\nparameters:\r\n  RequestIdParam:\r\n    name: X-Request-ID\r\n    in: header\r\n    type: string\r\n\r\nx-DefaultParameters: &DEFAULT_HEADERS\r\n  parameters:\r\n  - $ref: '#/parameters/RequestIdParam'\r\n\r\npaths:\r\n  /objects:\r\n      <<: *DEFAULT_HEADERS\r\n      get:\r\n        summary: \"Lists the objects\"\r\n``` Tested with latest version of go-yaml/yaml package and still the same. Monitoring go-yaml/yaml#184 so we may anchor slices in specs.  unless we get a spec we can't fix this  could you regenerate bindata and push again? I have a bindata conflict  at first glance you might think that.\r\nhowever with zero value of empty string, how can you distinguish between set/unset vs zero value?\r\nRequired doesn't necessarily mean non-empty, if you want required, non-empty you can use minLength: 1 which should get you back to primitive type. if you want a pointer for this use case use: `x-nullable: true`\r\n\r\n```yaml\r\n  Host:\r\n    properties:\r\n      state:\r\n        type: string\r\n        x-nullable: true\r\n```  the documentation goes here:\r\nhttps://github.com/go-swagger/go-swagger/tree/master/docs/generate  because it mostly uses a json schema for validation provided by upstream swagger.   @EleanorRigby I think this comes from golangs json library using the textmarshaler interfaces itself too.\r\nAs such what we didn't isn't very helpful and will break more applications than the fix it's trying to provide.\r\nWe should revert this commit and look at why redirects aren't being respected instead  I think as a workaround for now  you can get it to work by running `mkdir -p $GOPATH/src/xxx` prior to generating  Does the swagger:ignore annotation solve the issue/answer the question?\r\nFrom P.R: New swagger:ignore annotation to explicitly ignore extraneous models #1152\r\n\r\nGuess this is a duplicate of #1079  if you build the swagger command from master you can generate your client with a `--skip-flatten` flag and that should restore the previous behavior  can you include the spec that triggers this? I can't reproduce this issue though with what's on master. Yes sorry I've been busy with work stuff. I'll try to take a look at it\nsoon.\n\n---\nMet vriendelijke groeten - Best regards - Salutations\nIvan Porto Carrero - Mob: +1 (415) 323-8084\nWeb: http://flanders.co.nz\nTwitter: http://twitter.com/casualjim\n\n\nOn Fri, Oct 6, 2017 at 7:54 AM, Theodore Omtzigt <notifications@github.com>\nwrote:\n\n> I have narrowed it down to this data definition:\n>\n> regiment:\n> type: object\n> items:\n> $ref: \"#/definitions/demand\"\n>\n> demand:\n> type: object\n> required:\n> - package\n> - plan\n> properties:\n> package:\n> type: string\n> plan:\n> type: number\n> format: float\n>\n> Add this, and it produces the error:\n> $ swagger generate server -f mp-scoring-api-bad.yaml -P models.Principal\n> 2017/10/06 10:51:07 building a plan for generation\n> 2017/10/06 10:51:07 planning definitions\n> panic: runtime error: invalid memory address or nil pointer dereference\n> [signal 0xc0000005 code=0x0 addr=0xd pc=0x957b6a]\n>\n> goroutine 1 [running]:\n> github.com/go-swagger/go-swagger/generator.(*schemaGenContext).\n> NewSliceBranch(0xc0431be000, 0xc043e91d40, 0x1)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/generator/model.go:387 +0x54a\n> github.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildArray(\n> 0xc0431be000, 0x0, 0x0)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/generator/model.go:1068 +0x14a\n> github.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildItems(\n> 0xc0431be000, 0x0, 0x0)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/generator/model.go:1104 +0xbfc\n> github.com/go-swagger/go-swagger/generator.(*schemaGenContext).\n> makeGenSchema(0xc0431be000, 0xc0431be000, 0xc043c17d00)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/generator/model.go:1445 +0xab2\n> github.com/go-swagger/go-swagger/generator.makeGenDefinitionHierarchy(\n> 0xc04416e290, 0x8, 0xc0435b2830, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/generator/model.go:166 +0x2f6\n> github.com/go-swagger/go-swagger/generator.makeGenDefinition(0xc04416e290,\n> 0x8, 0xc0435b2830, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/generator/model.go:133 +0xc3\n> github.com/go-swagger/go-swagger/generator.(*appGenerator).makeCodegenApp(\n> 0xc0432e2000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/generator/support.go:596 +0x59d\n> github.com/go-swagger/go-swagger/generator.(*appGenerator).Generate(\n> 0xc0432e2000, 0x0, 0x0)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/generator/support.go:254 +0xbd\n> github.com/go-swagger/go-swagger/generator.GenerateServer(0x0, 0x0, 0x0,\n> 0x0, 0x0, 0x0, 0x0, 0x0, 0xc042062960, 0xc042675f68, ...)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/generator/support.go:43 +0xd2\n> github.com/go-swagger/go-swagger/cmd/swagger/commands/\n> generate.(*Server).Execute(0xc0427706e0, 0xc042631860, 0x0, 0x6,\n> 0xc0427706e0, 0x1)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/cmd/swagger/commands/generate/server.go:120 +0x55e\n> github.com/go-swagger/go-swagger/vendor/github.com/\n> jessevdk/go-flags.(*Parser).ParseArgs(0xc042631800, 0xc042066010, 0x6,\n> 0x7, 0x4111ef, 0xc0422be6c0, 0xc042317400, 0xc0423d1201, 0xc042726cc0)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/vendor/github.com/jessevdk/go-flags/parser.go:316 +0x834\n> github.com/go-swagger/go-swagger/vendor/github.com/\n> jessevdk/go-flags.(*Parser).Parse(0xc042631800, 0x6, 0xb9ebfb, 0x6, 0x0,\n> 0xbe6d2e)\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/vendor/github.com/jessevdk/go-flags/parser.go:186 +0x78\n> main.main()\n> C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-\n> swagger/cmd/swagger/swagger.go:105 +0xd6a\n>\n> next step is to drill down in the stack trace...\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/go-swagger/go-swagger/issues/1171#issuecomment-334778455>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/AAb1rRXJDkmVsw-gw-ftHdcsU5PP7-k6ks5spj8ZgaJpZM4PYw6Y>\n> .\n>\n The issue in the spec you sent that `items` is being used with `type: object`\r\nI'm debugging this by running the following command:\r\n\r\n```\r\nDEBUG=1 swagger generate server -A MpScoring -f mp-scoring-api.yaml\r\n```\r\n\r\nit will fail and then you'll see something like this:\r\n\r\n```\r\n2017/10/06 10:16:29 model.go:1051: returning after ref\r\n2017/10/06 10:16:29 new slice branch l2_itemized_services (model: l2_itemized_services)\r\n2017/10/06 10:16:29 cloning context l2_itemized_services\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0xd pc=0x1552233]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).NewSliceBranch(0xc422064000, 0xc42227db00, 0xc420890001)\r\n```\r\n\r\nin this failure I see the model is l2_itemized_services\r\n\r\n```\r\n2017/10/06 10:16:29 new slice branch l2_itemized_services (model: l2_itemized_services)\r\n```\r\n\r\nafter changing the type from object to array generation gets past that.   this was fixed by #1175   I'll cut a new release today pushed a new release you have to update your vendor and the swagger binary tool.\r\nThe 2 advance in lock-step, it's only an issue with the docker container.\r\n if the runtime.Authorizer is not defined that means that the runtime project or the swagger binary (templates) are not updated to reflect that.   do you think it would be possible to add a test so that we don't break this in the future? The easiest would be to add it to the canaries.\r\nhttps://github.com/go-swagger/go-swagger/tree/master/fixtures/canary\r\n\r\nthe runner for those (but might not require changes for this): https://github.com/go-swagger/go-swagger/blob/master/hack/run-canary.sh\r\n\r\nThis is another approach to a similar kind of test use case:\r\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/build_test.go\r\n  pushed 0.12.0  The properties in the body struct need to be exported otherwise it can't generate json for it or read it in from json Their names need to be capitalized: \r\n\r\n```go\r\npackage main\r\n// A ValidationError is an error that is used when the required input fails validation.\r\n// swagger:response validationError\r\ntype ValidationError struct {\r\n\t// The error message\r\n\t// in: body\r\n\tBody struct {\r\n\t\t     // The validation message\r\n\t\t     //\r\n\t\t     // Required: true\r\n\t\t     Message string\r\n\t\t     // An optional field name to which this validation applies\r\n\t\t     FieldName string\r\n\t     }\r\n}\r\n``` you can put the struct in a package that isn't main and it should start to work  Ref will have been filled out though. It doesn't expand them by default.\r\nBut you have options:\r\n\r\n* flatten the spec: `swagger flatten --help`\r\n* expand the spec: `swagger expand --help`\r\n* or resolve the ref: `spec.ResolveRef(spec.Spec(), &spec.Spec().Paths.Paths[\"/some-path\"].Get.Responses.StatusCodeResponses[200].Ref)`\r\n\r\nhttps://github.com/go-openapi/spec/blob/master/expander.go#L84-L167  just pull in an updated go-openapi/runtime yep it's on master now  Seen same behaviour with server generation: path items with '-' are modified by internal \"snakize\" function.  I'm fine with the commented code being deleted. git will still know   merged the fix for this  if you don't use -m do still see the issue? In order to properly close this issue, swagger:ignore annotation should be documented in docs/generate/spec  I'll try this tomorrow and will update this ticket.  oic because there is no standard name for it.\r\nYou can add it here: https://github.com/go-openapi/runtime/blob/master/statuses.go  can you try to explain your question more clearly?\r\nWhat is it you want to achieve?\r\n\r\nthe serve command by default serves a redoc ui.\r\nredoc is only to serve a documentation page for your specification, it doesn't implement any logic \r\n\r\n I have no idea what you mean by understand the flow, how models has been executing.\r\n\r\nthere is code generated. a request arrives the routes select a handler and the request is validated, then your code executes This thread is leading us nowhere. Maybe a lack of documentation? Let's close it.  operationId is always globally unique per swagger 2.0 specification. The id MUST be unique among all operations described in the API.\r\n\r\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operationObject\r\n> Unique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.  this needs more context.\r\nWhich spec, what's the $GOPATH and what's the missing package? which version of swagger are you using? did you build from master?  operationId is always globally unique per swagger 2.0 specification. The id MUST be unique among all operations described in the API.\r\n\r\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#operationObject\r\n> Unique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.  I fixed the example. \r\n\r\n```shellsession\r\n\u00b1 ivan@avalon:~/go/src/github.com/go-swagger/go-swagger  \r\ngit:(master) \u2717 !? \u00bb go run ./examples/stream-server/cmd/countdown-server/main.go --port 8000\r\n2017/08/16 20:56:28 Serving countdown at http://127.0.0.1:8000\r\nIteration 5\r\nIteration 4\r\nIteration 3\r\nIteration 2\r\nIteration 1\r\nIteration 0\r\n^C2017/08/16 20:57:02 shutdown initiated\r\n2017/08/16 20:57:02 Stopped serving countdown at http://127.0.0.1:8000\r\n```\r\n\r\nother terminal:\r\n\r\n```shellsession\r\n\u00b1 ivan@avalon:~/go/src/github.com/go-swagger/go-swagger  \r\ngit:(master) \u2717 ? \u00bb curl -v http://127.0.0.1:8000/elapse/5\r\n*   Trying 127.0.0.1...\r\n* TCP_NODELAY set\r\n* Connected to 127.0.0.1 (127.0.0.1) port 8000 (#0)\r\n> GET /elapse/5 HTTP/1.1\r\n> Host: 127.0.0.1:8000\r\n> User-Agent: curl/7.55.1\r\n> Accept: */*\r\n> \r\n< HTTP/1.1 200 OK\r\n< Content-Type: application/json\r\n< Date: Thu, 17 Aug 2017 03:56:30 GMT\r\n< Transfer-Encoding: chunked\r\n< \r\n{\"remains\":5}\r\n{\"remains\":4}\r\n{\"remains\":3}\r\n{\"remains\":2}\r\n{\"remains\":1}\r\n{\"remains\":0}\r\n* Connection #0 to host 127.0.0.1 left intact\r\n```\r\n  the transport is an interface. You can use a NOOP roundtripper  do you have it in your gopath or in your vendor? I added a default imports list, which will hopefully fix this issue. Can you verify and provide feedback? should be fixed now.\r\n\r\nformatting happens here: https://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L510-L523  this is for a model right?\r\n\r\nwe have code like this: https://github.com/go-swagger/go-swagger/blob/master/scan/schema.go#L981-L996\r\n\r\nbut I think it never gets there so I'd like a more complete example that shows the problem.  I believe you can use a `json:\"X-Foo\"` tag to allow for overriding the name  Does the swagger:ignore annotation solve the issue/answer the question?\r\nFrom P.R: New swagger:ignore annotation to explicitly ignore extraneous models #1152 \r\n\r\nProbaby duplicate of #1079  closes #1131     how are you trying to do the custom layout?\r\nis that following this guide? https://goswagger.io/use/template_layout.html\r\n I have no objection to somebody adding the functionality.\r\nI suspect the code to fix would be around here somewhere: https://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L390 what is it you're trying to achieve? \r\nBecause if you just want to group operations, perhaps look into using tags in the swagger spec, it will do what you want why not make more than 1 spec and then merge the specs together with the mixin command? but you just generate 2 applications, is the issue that 1 is using types from the other? yes but the question is do you need them to be because you want independent code files except that you want the server to present as 1 process with 1 spec. \r\nAt least if I understand your use case correclty if not I apologize for jumping to conclusions.\r\nThis you can do by creating your own main file and serving both API's. it's a lot easier to make a  middleware that accommodates this pattern  I forgot to review this over the weekend. Would it be possible to update? I'll try to do it tonight Could you update to latest master. I verified it works but I don't want to lose attribution Thanks, this was a non-trivial piece of work :100:   go 1.8 should be supported too, are you on an older version?  Are you running with an env var DEBUG=1 ?  yes the PR looks good, waiting for CI to agree  for definitions 2.0 and 3.0 aren't very different because I wanted a full json schema implementation to work instead of the subset that swagger (openapi) 2.0 prescribed\r\nin 3.0 they expanded it to properties that are already supported in our validator\r\nmost of the changes in 3.0 pertain to how operations are described with their parameters and responses\r\nthat has a big impact on the code generator but if I'm guessing nothing in there is a combinatorial nightmare unlike json schema is\r\nI'll start to work on a new spec implementation in go-openapi/spec3 because I do want to correct some thngs like not using golang's map as a map but rather use sorted maps spec will be here: https://github.com/go-openapi/spec3 @JunliWang hello.\r\nWe were just discussing that yesterday. It's really a ton of work to lift it to v3.\r\nI am not sure there are many volunteers out there to produce such an effort.\r\n\r\nPersonnally, I would concentrate my efforts on getting the product stable with full V2 support and more than good enough. It is already good enough for most use cases, and probably at or close to top of this class of products. @casualjim Me neither. A \"Swagger 2.1\" fixing some inconsistencies in 2.0 would be fair enough for me.\r\n@SandyWalsh : we are basically saying the same thing  .It would be rather easy to be more tolerant with the version announced by the spec, while continuing to check it against 2.0.  You can use middlewares here to capture both use cases\r\n\r\nhttps://goswagger.io/use/middleware.html\r\n\r\nI use alice here: https://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go#L73-L81\r\nto run this metrics middleware: https://github.com/casualjim/middlewares/blob/master/audit.go#L42\r\n\r\nIn the default layout you can configure middlewares in the configure_xxx.go file\r\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/restapi/configure_todo_list.go#L75-L85 I think we can add the handlers to the builder that's generated so you can override the http.Handler\r\nsimilar to what setupMiddlewares does but on a case by case   can you run `go generate ./generator` otherwise the changes to the template won't be picked up thanks! :100:   it's because of the way go interprets comments. Most likely there is a punctuation missing or something like that.\r\nsee here: http://goswagger.io/generate/spec#parsing-rules for that you can use the swagger:model annotation, it gives you an opportunity to customize the name  you can add a custom tag. see here: https://github.com/go-swagger/go-swagger/blob/master/fixtures/codegen/todolist.models.yml#L680-L685  this is the expected behavior. \r\nIf you want to skip the response struct you should use\r\n\r\n```go\r\n// UpdateOrder swagger:route PUT /orders/{id} orders updateOrder\r\n//\r\n// Updates an order.\r\n//\r\n// Responses:\r\n//    default: genericError\r\n//        200: body:order\r\n//        422: validationError\r\nfunc UpdateOrder(rw http.ResponseWriter, req *http.Request, params denco.Params) {\r\n\t// some actual stuff should happen in here\r\n}\r\n```\r\n\r\nWith this the struct will be detected as not used so so make it find the Order struct you have to run `swagger generate spec -m ....`\r\nthe -m will make it scan for swagger:model and include those structs  your server needs to add a cors middleware, that's the cause of the failure.\r\nhttps://github.com/go-swagger/go-swagger/issues/481   fixes #1075   fixes #835 \r\n  yes, as a general rule I will accept any improvement as PR  this would be a bug for swagger-ui afaict\r\nhttps://github.com/swagger-api/swagger-ui  it's the other way around. in your configure_xxx.go file you have to add the argument to the configureServer callback.\r\nThis was changed a while ago so you can know which scheme you're configuring for there is a file called restapi/configure_xxx.go that is only generated once. it contains callbacks for you to add your own code. https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/restapi/configure_todo_list.go#L70\r\n\r\nthat signature has changed in the generated code which is why the code doesn't compile, you just have to update that signature in your configure_xxx.go file.\r\nPoint is it's not a bug  I have to give up on that one.\r\nI incorrectly thought initially that it could be part of an improvement in go-openapi/validate, but it's not.\r\nThis issue is definitely a generator's business [requalified issue as \"generator\"].\r\n\r\nA way to achieve this objective could be to embed a new (language specific) check with templates, \r\njust like we do with code formatting. This would be a new method in LanguageOpts.\r\n\r\nHope this helps.\r\n\r\nF.  I can reproduce the issue, but haven't been able to look into why it's happening.\r\n\r\nI assume it has to do with how this is set up: https://github.com/go-swagger/go-swagger/blob/master/scan/scanner.go#L198-L214\r\n  There are actually several issues related here.\r\nFirst mentionned a parameter in body, that is with a schema. I believe this one works now.\r\nSecond is a parameter in path, that is with a primitive type. There are several known bug there (issues #1348, #909) and I am working on a fix (PR #1372).\r\n\r\n@protheusfr : I believe your specific issue is related to the fact that the UUID is parsed, but actually not validated. It would be nice if you could test that the proposed WIP PR #1372 actually solves your issue or if there still remain some unexplored cases. The fix you are referring to was specific to format \"mac\" and only concerned code generation. This one must integrate support in the go-openapi/validate package, which has not been merged in the vendor tree of go-swagger.\r\n\r\nThe fix regarding UUID and other formats is related to using formats in non-required simple parameters (this one is the one I am supposed to have fixed in the live branch WIP).\r\nYou should be able to validate by specifying required: true or by using a schema parameter (in body). \r\n\r\nMy fix should be available for merge next week or so.\r\n\r\nStrange file names is related to our \"inflect\" library (go-openapi/swag). The generator figures out names for variables, files, etc... from your spec input. The point is to properly analyze upper cased constructs in your names, which sometimes is not easy. The rule is to keep as one word common uppercase words, such as HTTP, ID etc... and to split the rest following a Camel case rule of thumb. \r\nSo in your case, \"DELIMail\" gives \"d_e_l_i_mail\" in \"snakized\" form.\r\nThe list of common \"initialisms\" is available in go-openapi/swag.\r\nYou may customize this by using the CLI option, e.g.  `--additional-initialism=DELI` Changes in naming have been introduced by PR#1357.\r\nActually, this didn't work in early december, then I added a quick patch for the release.\r\nPR#1357 provided a better solution, letting you configure your reserved words (\"initialisms\").\r\n\r\nRegarding your validation issue, the dependency on the patch on validate does not concern UUID, just MAC. Again, you may try the WIP branch from #1372 and see if it fix your issue. As I am currently testing it, I am interested in all kind of feedback (e.g. it looks like the \"in\": \"path\" causes the issue - have you tried \"in\": \"query\".\r\n\r\nAnyhow, the plan with #1372 is to provide a more comprehensive support for simple params, including arrays, nested arrarys and default values for which there are many issus currently. As soon as I've tested enough this branch and passed @casualjim review, it should be merged to master. \r\nI did not push a PR just to hang around forever \ud83d\ude3a   can you update your swagger command to what's on master, this is fixed there ok can you update your runtime to master too? \r\n\r\ngo get -u github.com/go-openapi/runtime\r\n\r\nor whatever the vendoring tool equivalen tcommand is.  try putting that in a package called petstore and right above the package declaration the input file is for an input swagger file which will be used to merge the discovered info into. that functionality doesn't exist today at least not exposed through the command. The code has include and exclude filters though so shouldn't be too hard to add are you using a go version pre 1.7?   Thanks for the analysis. Is this for openapi 2.0 or 3.0. In the first comment the specification linked is 3.0 which is not what we currently support.  query arguments don's support complex objects, just simple types there can be only 1 body, this is described in the swagger specification: https://swagger.io/specification/\r\ninformation about the annotations can be found here: https://goswagger.io/generate/spec.html\r\nAnd examples you can find by either generating code for a swagger spec\r\nor by looking here which is used in our unit tests: https://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/classification\r\nEvery example also has annotation: https://github.com/go-swagger/go-swagger/tree/master/examples  Perhaps something like this should get a marker annotation and be an additional feature instead of replacing what is there now for schemas. I don't know who's depending on the existing behavior.\r\n\r\nFor query/path/form params this is different though; there it would actually be the expected behavior. Yes I think so, that gives people a way to choose  yeah sorry I lost track of it. I try to follow a merge quickly policy  consumes for is used by the router: https://github.com/go-openapi/runtime/blob/master/middleware/router.go#L228\r\n\r\nit gets the candidates and puts it on the route info object.\r\n\r\nThe result of that gets used here: https://github.com/go-openapi/runtime/blob/master/middleware/context.go#L263-L273  you can also vendor the github.com/go-openapi/runtime\r\n\r\nFor glide you have to vendor a few more packages explicitly through adding them to glide.yaml because otherwise it doesn't pick them up\r\n\r\nhere's what I have in my glide.yaml file and I build using a clean golang container every time.\r\n\r\n```yaml\r\n- package: github.com/casualjim/middlewares\r\n- package: github.com/go-openapi/errors\r\n- package: github.com/go-openapi/loads\r\n- package: github.com/go-openapi/runtime\r\n  subpackages:\r\n  - client\r\n  - flagext\r\n  - middleware\r\n- package: github.com/go-openapi/spec\r\n- package: github.com/go-openapi/strfmt\r\n- package: github.com/go-openapi/swag\r\n- package: github.com/go-openapi/validate\r\n- package: github.com/justinas/alice\r\n  version: ^1.0.0\r\n```  it implements the TextMarshaller which the json marshalling should make use of.  I'm confused about this PR and problem statement.  The interface already expresses an is-a relationship.\r\nNow if I repeat the requirement you have in my own words I think it summarizes as this:\r\nI want a concrete implementation of the base type which can be instantiated in addition to the derived types.\r\n\r\nSo wouldn't an unexported struct be enough? because it would be able to capture the fields with getters and setters just like it does for the sub types but it wouldn't have any extra properties anyway so there is no need to expose the struct directly. I'm fine with the change.\r\n\r\nyou can run the tests that are failing with ./hack/run-canary.sh  it should work like that but you have it. You may even remove the default value for child.\r\n```yaml\r\nParent:\r\n  required: [ \"child\" ]\r\n  properties:\r\n    child:\r\n      $ref: '#/definitions/Child'\r\nChild:\r\n  default: {\"key\": \"value\"}\r\n  required: [ \"key\" ]\r\n``` so you are trying to avoid the error message and you want the properties to just use the zero values?\r\n\r\nIn that case you don't need the required at all. \r\nThey are all explained here: http://swagger.io/specification/\r\n yes that's true, that's why we have a x-isnullable  Does the swagger:ignore annotation solve the issue/answer the question?\r\nFrom P.R: New swagger:ignore annotation to explicitly ignore extraneous models #1152 OK. Just wanted to clarify the situation regarding issues, questions etc... Good to get some feedback.\r\nThis problem is relatively well explained in #796. \r\nUnfortunately, previous work on this has been left unfinished.  can you run `go generate ./generator` and push those changes otherwise the binary won't pick them up  it's not accounting for wildcards.\r\nIt should probably use a variant of: https://github.com/go-openapi/runtime/blob/master/middleware/negotiate.go#L46  thanks\r\n  i think currently it doesn't take the exclusive into account\r\nthe code is here if you want to fix it: https://github.com/go-swagger/go-swagger/blob/master/generator/types.go#L544-L559  can you use `swagger flatten` before generating  can you use `swagger flatten <spec>` before generating and see if the problem persists? after flatten you can try to expand the spec `swagger expand`\r\nthen you should have a fully expanded spec for which you can generate code expander is here:\r\nhttps://github.com/go-openapi/spec/blob/master/expander.go\r\n\r\nflatten is here:\r\nhttps://github.com/go-openapi/analysis/blob/master/flatten.go\r\n\r\nyou can run processes with DEBUG=1 and SWAGGER_DEBUG=1 that will get you a lot more output  how would you link them to routes? I see I think this could be a good addition to the functionality  You probably want to use allOf to compose 2 models for the GET and stick to a simple model for POST  you can override the ServeError function in the configure_xxx.go file which allows you to rewrite errors  you can make your own main function, I've done that here: https://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go Please tag as question. I'll put it in the FAQ md (being written...)  how are you running swagger?\r\nwhat is your gopath env var?\r\nwhat is your project directory?\r\nwhat is your OS?  When you write to a response writer for the body go will flush the headers and the body. So if we want to return a status code then we have to do that before we start writing to the response writer, which happens in the producer.Produce call\r\nI think this could be fixed in the panic middleware by having a buffered response that gets flushed at the end or when its buffer overflows perhaps? you can implement another response writer that wraps the default responsewriter\r\nwhere you wrap the Write method that writes to a buffer with a known size, and you postpone flushing until the buffer. That would then mean you have an opportunity to changing the status code.\r\nOf course there is a performance impact with this approach but it does allow for capturing some more status codes\r\n  have you seen this? https://goswagger.io/generate/spec.html that one is for swagger 1.2, this repo is for swagger 2.0  You could look at using `type: string` `format: binary` and use the content-disposition header to provide the filename  You can try to generate with `--skip-validation` \r\n this is validation of the spec, I agree it's a bug but skipping validation (a step before generating) would allow you to continue  HI thanks for this but the problem is more complicated \r\nTake a look at this PR: https://github.com/go-swagger/go-swagger/pull/557/files\r\n\r\nIt has the template changes required for easyjson support, unfortunately it has gone stale so rebasing that one is complicated. But it would be great if just the serialization changes (not the patch support and nullable/unset field stuff) could turn into a PR with just changes to serialization. It would fix about a dozen open bugs. I've brought the changes from PR #557 up to date with current master in the easyjson branch\r\nhttps://github.com/go-swagger/go-swagger/tree/easyjson\r\n\r\nI won't be able to work on this for a while to come still. The AllOf functionality is still missing  Thanks, would it be possible to do the same for BasicAuth and BearerAuth so that it's a consistent pattern? The build is failing because of name collisions, those authenticators should figure out unique names, or I think a reasonable work around is to call the properties: ApiKeyAuthenticator, BasicAuthenticator and BearerAuthenticator thanks!\r\n  duplicate of #1040  you can rewrite errors in the ServeError hook\r\n\r\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/restapi/configure_todo_list.go#L26\r\n\r\nBy default it uses this function: https://github.com/go-openapi/errors/blob/master/api.go#L115  At this moment there is no way to customize the authenticator (receivers of the APIKeyAuth function) on the builder object.\r\nI think it might be a good addition though to allow for that kind of customization.  In this file there are method calls to methods defined in the security package:\r\n\r\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/builder.gotmpl#L185-L193\r\n\r\nI think if you make properties with the same name and initialize them to those functions. And then call the functions on the current receiver you have a place to replace the authenticators. This should  allow you to access the request.\r\n\r\nThe functions for auth can be found here:\r\nhttps://github.com/go-openapi/runtime/blob/master/security/authenticator.go#L58\r\nhttps://github.com/go-openapi/runtime/blob/master/security/authenticator.go#L71\r\nhttps://github.com/go-openapi/runtime/blob/master/security/authenticator.go#L104\r\n it doesn't have to be done manually, you can wrap the previous authenticator function, this gives you a place to look at a request before or after authentication. it also gives you a way of supporting the function signature you were after.\r\nI want to avoid having to introduce a breaking change like the one described in #1043 because the argument to the function is yet another function which means you can also wrap that one  try generating with `-m`  Here's an example: https://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go#L50-L57\r\n  there is still a conflict for some reason in: cmd/swagger/commands/generate/server.go thanks!  can you try to flatten your spec first to see if that fixes it?\r\n\r\nswagger flatten -o swagger.flat.json swagger.json I'll make it the default in in the next version. It solves quite a lot of problems\r\nCurrently it's a separate operation because it was experimental  there are some conflicts here that need to be resolved. changes look good though   that is when you use reflection like in a language like java. The way we have it here is make the generation of the spec be a build time concern instead of a runtime concern. The assumption that was made is that after you build your app the API is unlikely to change.\r\n\r\nThat example that you link to is when you generate the code from a swagger spec. And there we embed the spec as default behavior but that isn't a hard constraint, you can change that at generation time and pass one in or initialize the generated code with a spec that was loaded from aremote url etc.\r\n Sorry I didn't answer the first question yet.\r\n\r\nThere are a few ways you can serve a ui.\r\nUse the middleware provided in the go-openapi/runtime package: https://github.com/go-openapi/runtime/blob/master/middleware/redoc.go\r\n\r\nMost manual\r\nhttps://github.com/go-swagger/go-swagger/issues/370  try with go get -u github.com/go-swagger/go-swagger/cmd/swagger  does your main package contain a code path that reaches where you described your routes?  Can you open an issue here: https://github.com/Rebilly/ReDoc\r\nI just integrate that work into go-swagger Sorry I've seen you've done that and they moved you here. Am I understanding correctly that you want to add a support for x-logo for the `swagger generate spec` command? OK until we can add that you can use an input document to add this feature\r\n\r\nmake a file called input.yml (also works with json if you prefer that)\r\n```yaml\r\ninfo:\r\n  x-logo: \r\n    url: ./images/hrperformans/logo260x75x72.png\r\n    backgroundColor: \"#FFFFFF\"\r\n```\r\n\r\nand generate the the spec with:\r\n\r\n```\r\nswagger generate spec -i input.yml path/to/main\r\n```  it's already validated by the time you get it you can use additionalProperties to this end and then you have a method on the body that captures those.\r\nyou can still specify validation rules for it too  the docs are also in this repo in the docs folder, yes please add those It helps people find out about the new functionality  Thanks!  at this point these are supported in the code generator: https://github.com/go-swagger/go-swagger/blob/master/generator/support.go#L317-L335\r\n\r\nWe can add more through the consumer producer mechanism if you need more  I'll try to look into this. I think the main issue is that errors don't have a TextMarshaller interface implemented.\r\n  closes #1010  closes #987  closes #982 \r\ncloses #981  closes #1002  closes #986 \r\ncloses #985  did you generate with --with-context because that is deprecated and no longer necessary because go now has the context on the request object, so no more need to thread it through  yeah that would break other things, it needs to be fixed where the value for that value expression is set because this wouldn't be the only place where it generates bad code\r\nI think this would be a good place to look: https://github.com/go-swagger/go-swagger/blob/master/generator/operation.go#L718 no doubt this is a bug, but also the format is an unrecognized format: base32ID  you can also make your own main function and use the code from the generations of both with --skip-main\r\n\r\nThis allows for customization like using a different middleware stack, which in turn gives you the ability to serve 2 swagger specs at different paths.\r\nAnd generally compose things a bit differently in this tool that is called `flatten`\r\nit does exactly this and also moves anonymous objects from responses and request bodies to refs I've written a go script that merges swagger docs from different locations in the past. I haven't spent any time thinking about how to make this a more general solution, so ideas and/or PR's are more than welcome :)\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"io/ioutil\"\r\n\t\"log\"\r\n\r\n\t\"github.com/go-openapi/loads\"\r\n\t\"github.com/go-openapi/loads/fmts\"\r\n)\r\n\r\n// +build ignore\r\n\r\n//NO TESTS\r\n\r\nfunc main() {\r\n\tloads.AddLoader(fmts.YAMLMatcher, fmts.YAMLDoc)\r\n\t// CLI\r\n\tpublic, err := loads.Spec(\"../swagger/external.yml\")\r\n\tif err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\r\n\tinternal, err := loads.Spec(\"../swagger/internal.yml\")\r\n\tif err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\r\n\tinternalAPI := public.Pristine().Spec()\r\n\tfor k, v := range internal.Spec().Definitions {\r\n\t\tinternalAPI.Definitions[k] = v\r\n\t}\r\n\tfor k, v := range internal.Spec().Paths.Paths {\r\n\t\tinternalAPI.Paths.Paths[k] = v\r\n\t}\r\n\tinternalAPI.Schemes = []string{\"http\"}\r\n\tinternalAPI.Security = nil\r\n\tinternalAPI.SecurityDefinitions = nil\r\n\r\n\tb, _ := json.MarshalIndent(internalAPI, \"\", \"  \")\r\n\tioutil.WriteFile(\"../swagger/internal.json\", b, 0644)\r\n\r\n\tserverAPI := public.Pristine().Spec()\r\n\tfor k, v := range internal.Spec().Definitions {\r\n\t\tserverAPI.Definitions[k] = v\r\n\t}\r\n\tfor k, v := range internal.Spec().Paths.Paths {\r\n\t\tserverAPI.Paths.Paths[k] = v\r\n\t}\r\n\r\n\tbs, _ := json.MarshalIndent(serverAPI, \"\", \"  \")\r\n\tioutil.WriteFile(\"../swagger/server.json\", bs, 0644)\r\n\r\n}\r\n\r\n```  this looks great, seen as I work for vmware i'll have to step up and also add vmware fusion/workstation based builds in the scripts :)\r\n\r\nI've updated the circle config file on master so that it pulls in an image with an ssh client so that should make your build proceed\r\n  I think you can use strfmt.File or os.File in your struct\r\n\r\n```go\r\ntype fileResponse struct {\r\n  // In: body\r\n  File strfmt.File\r\n}\r\n``` I'm terribly sorry the File type is in the runtime package: `runtime.File`\r\nI believe you can also return a stream like io.Reader    Have you seen the strfmt types? isn't the DateTime or Time sufficient?\r\nI'd like to see few steps to reproduce, so it's easier to understand what's going on.    the problem isn't isolated to go-swagger, it's that many other things use the golang/x/net context and you want to be able to pass them along.\r\nTo make this work we have to define a default import for the context package that will solve it.\r\nit goes in generator/operations.go and generator/support.go that is correct I'll remove it in the version that will work with openapi 3.0 spec Yes excellent suggestion  Can you elaborate a little bit more on this use case?  What would you expect from a dynamic client?\r\nWhat would it add on top of the default http client? I think I still don't fully understand the use case because you'd have to do everything the code generator does for you by hand. Every time the API changes you have to do this again.\r\nI get the use case for the server side but for the client side I don't get the value proposition.\r\n\r\nThat being said you might find this test useful as an example: \r\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime_test.go#L144-L188  have you seen this example? https://github.com/go-openapi/kvstore  fixes: #993\r\nfixes: #922  Swagger uses the go compiler infrastructure. So as long as packages can be detected as being in use in code paths, the scanner should find out all the annotations defined in those files.\r\n yep you can use `_ \"blah/internal/blah\"`  Need to test if still cause for panic.  if you put it on the same line it should work\r\n\r\n```go\r\n// ListUsers swagger:route GET /user user listUsers\r\n//\r\n// List all the users\r\n//\r\n// Schemes: https\r\n// Produces: application/json\r\n// Responses:\r\n//    200: listResponse\r\n//    401: response\r\n//    403: description: Unauthorized\r\n```\r\n please reopen if that's not the case  I will never stand in the way of improvements, bear in mind that I want to migrate to circle ci 2.0 manifests this weekend but that should be easy enough to support  can you use `swagger flatten` before generating   the brew formula now allows for customizing the name of the binary   This has been fixed on master IIRC would it be possible to share the spec that leads to  this? Although this second comment would probably be better in a separate issue  we need to support enums and document them so they show up as validations.\r\nfor this we'd need to introduce a `swagger:enum` marker so that we know what to do with this   It also occurs to me that if you want to use an enum as map key value you're essentially making a more expensive struct because the values you can put in the keys are finite and known in advance Related to #744   the 2 things are orthogonal concerns. Whatever serves the UI in go-swagger is just a middleware\r\nhttps://github.com/go-openapi/runtime/blob/master/middleware/redoc.go\r\n\r\nto integrate swagger-ui you would need to figure out how to serve the static files and call the UI with: `?url=https://example.com/swagger.json`  This discrepancy is because of how golint wants naming to be done.  There are a set of blessed initialisms: https://github.com/golang/lint/blob/3390df4df2787994aea98de825b964ac7944b817/lint.go#L732-L769 and those are not split up by to the rules defined here: https://github.com/go-openapi/swag/blob/master/util.go#L145-L175 if it would be Slb that is correct. There isn't at this point unfortunately. it would require extending the configuration mechanism with a way to override the filters. And a way to dynamically load code.\r\nI'll open a ticket about introducing a plugin mechanism for go 1.8 and beyond  ```\r\ntype testresponse struct {\r\n  // in: body\r\n  Body test\r\n}\r\n```  can you also run `go generate ./generator` and commit the generator/bindata.go file\r\nOtherwise the changes won't be picked up by the binary yes please   It doesn't know about the producer for that mime type, it works for me when I do it like this:\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"log\"\r\n\t\"os\"\r\n\r\n\t\"github.com/go-openapi/strfmt\"\r\n\r\n\t\"github.com/go-openapi/runtime\"\r\n\thttptransport \"github.com/go-openapi/runtime/client\"\r\n\tapiclient \"github.com/go-swagger/go-swagger/examples/todo-list/client\"\r\n\t\"github.com/go-swagger/go-swagger/examples/todo-list/client/todos\"\r\n)\r\n\r\nfunc main() {\r\n\r\n\t// create the API client\r\n\ttr := httptransport.New(\"127.0.0.1\", \"\", nil)\r\n\ttr.Producers[\"application/io.swagger.examples.todo-list.v1+json\"] = runtime.JSONProducer()\r\n\ttr.Consumers[\"application/io.swagger.examples.todo-list.v1+json\"] = runtime.JSONConsumer()\r\n\tclient := apiclient.New(tr, strfmt.Default)\r\n\r\n\t// make the authenticated request to get all items\r\n\tapiKeyHeaderAuth := httptransport.APIKeyAuth(\"X-API-TOKEN\", \"header\", os.Getenv(\"API_KEY\"))\r\n\t_, err := client.Todos.AddOne(todos.NewAddOneParams(), apiKeyHeaderAuth)\r\n\tlog.Fatal(err)\r\n}\r\n```  at this point there is no easy way to disable auth short of removing it from your spec  I see no error. The information at the bottom is more a reminder that you need those packages.  haven't been able to look at it for cause of the issue. I assume it's missing an opportunity to include the format validator Duplicate of #909   in non-body parameters maps are not supported in the swagger spec.\r\nIn the body json schema only allows maps with string keys  I think you can use `x-nullable: true` for this use case  the spec generates fine for me when I skip validation\r\n\r\n```\r\nswagger generate client -A Nmdb --skip-validation -f sw.json\r\n```\r\nAny tool I've tried has issues validating the spec in your example.\r\nWould it be possible to get a smaller repro of the circular dependency, the spec in your example is large and complex   I assume this is for validations that fall outside of what swagger can do for you, and prior to databinding the body property?  \r\n\r\nIf you want to read the body more than once you have to put it back as an io.ReadCloser so you can read it in a []byte and then replace r.Body with a bytes.NewBuffer(theBytes)\r\nThese readers are single use only  Related to #744   would it be possible to add a test?  and we also have an extension that allows you to use pre-existing types as models, you annotate your spec like this:\r\nhttps://github.com/go-swagger/go-swagger/blob/master/fixtures/codegen/existing-model.yml#L84-L88\r\n\r\n  The good news is that you don't have to wait until I upgrade. The mailru in this repo is for the CLI but you are free to upgrade the one in your vendor.\r\nI'll try to upgrade this week though i upgraded a while ago  both those orgs are owned by me, feel free to submit a pr to runtime :) This is a great addition! resolved by @robbert229    we use goimports for finding imports and optimizing imports,\r\nhttps://godoc.org/golang.org/x/tools/cmd/goimports  I think this is fixed on master:\r\n\r\nhttps://github.com/go-swagger/go-swagger/pull/821\r\n\r\nCould you confirm?  Excellent contribution :100:   you need to start from your main because that's where it starts reflecting over your packages.\r\nit works its way back from main to discover all the packages that are in use by your program, like the go compiler does.\r\nAlternatively you can import all the packages you need with in your doc.go so the tool knows what to look at.\r\n```go\r\nimport (\r\n  _ \"package/with/routes\"\r\n  _ \"package/with/more/routes\"\r\n)\r\n```  you need to generate the spec at build time (the code is not likely to change at runtime is it?)\r\nYou can then use a tool like go-bindata to embed the generated spec in your binary too\r\nAnd you can then use the go-openapi/loads or go-openapi/spec packages to load or serve that file. you should not have go-swagger/go-swagger in your vendor or use types out of go-swagger/go-swagger\r\nIt's not meant to be embedded yes the problem is occurs when you start importing types out of go-swagger/go-swagger. You can have it in your vendor.\r\nThe only reason swagger generate spec would discover descriptions in other types is if they are detected to be used from a codepath that starts at your main file.  With go-openapi/validate#60 the spec validate will issue a warning on this situation.\r\nI understand this doesn't fully address the issue, but it's at least a start...\r\n    You can use a roundtripper for this purpose, see here: https://github.com/go-swagger/go-swagger/issues/911\r\n  can you run `go generate ./generator` so that the change gets picked up in the compiled binary?\r\nit updates the ./generator/bindata.go file  this is not supported in openapi 2.0 specification  In swagger 2.0 there is no support for this, however you can still achieve this by putting the query params that dictate the models in the path.\r\n\r\n```yaml\r\npaths:\r\n  \"/something?objectType=thisThing\":\r\n    get: \r\n      ...\r\n  \"/something?objectType=otherThing\":\r\n    get:\r\n      ...\r\n```` This thread has been archived in our [FAQ](http://goswagger.io/faq/). You may access it directly [here](http://goswagger.io/faq/faq_model.html#request-response-can-have-different-objects-returned-based-on-query-parameters)\r\n\r\n(with PR #1342)  there shouldn't be a nested operations/operations folder  I think you made this issue on the wrong repo. This repo is about creating go code fro swagger specifications. Your issue seems to be with erlang compilation.  The message you see actually means everything is OK, it only prints that as a reminder and a tip for when compilation doesn't work.\r\n\r\nFor bearer auth you want:\r\n\r\n```yaml\r\nsecurityDefinitions:\r\n  auth_token:\r\n    type: oauth2\r\n    authorizationUrl: http://dummyauth.io\r\n    tokenUrl: http://dummytoken.io\r\n    flow: accessCode\r\n    scopes:\r\n      all: all\r\n\r\nsecurity:\r\n  - auth_token:\r\n    - all\r\n```\r\n  fixed by go-openapi/runtime@76cda4f  you can annotate your date property with `x-nullable: true` that gives you a pointer value for the strfmt.DateTime property and allows you to retain the NULL  did you see this thread? https://github.com/go-swagger/go-swagger/issues/47\r\n\r\nFrom go's perspective go-swagger doesn't do anything particularly nasty. We try to not import many packages and the ones that we do need to be in pure go. So I think that makes it possible to move to app engine. I have no experience with it though. Keep us posted!   This was fixed  patch atm is not supported :( most of the implementation exists in #557 but the tests suite isn't complete yet.\r\nAs a side effect it would also make the entire go-swagger generated codebase much more performant because it uses mailru/easyjson\r\nThe branch in that PR contains breaking changes which is why I didn't continue with it yet, but because openapi 3 will be released at the end of the month, I wanted to move that work into openapi 3 implementation.  the values other than $ref don't matter, it doesn't affect validity of the spec it just means other fields than $ref are ignored.\r\n I suppose we can fix issues like this by adding  a post processing of the spec to clear warnings. Perhaps here? https://github.com/go-swagger/go-swagger/blob/master/scan/scanner.go#L324  so the point of the constructor method is this exact use case. We need a way to express forever because there are certain cases where you really don't want a request to timeout. \r\nFor example when you write an API that behaves like docker attach/exec.\r\nThe reason I let it be context deadline exceeded is exactly because it's a well-known error case that's easy to match for and that matcher is reusable outside the code of go-swagger.\r\n\r\nThat doesn't mean I would reject a PR from somebody making a more specific error type but I do think it would break a number of applications that already rely on this behavior. So that PR would have to include a flag to opt-in to this behavior at generation time The case is for example a long stream over http like server sent events, there you want the connection to be opened forever, forever is signaled by using 0 just to be clear I can't distinguish between unset and 0  is the code for this available? I'm not sure without being able to look at the code with the annotations :(\r\nIt can be as simple as a spelling mistake on the parameters or it can be a bug with the path detection.\r\nIs running it with DEBUG=1 SWAGGER_DEBUG=1 helpful at all?  related to OAI/OpenAPI-Specification#880\r\n\r\neven otto.js punted on implementing the javascript regex. So the only option that is left to support this is to link with a C-based library. I don't want to do that because it kills portability.\r\n\r\nShould there be a pure go implementation of [ECMA-262](http://www.ecma-international.org/publications/standards/Ecma-262.htm) regular expressions appear, I wouldn't mind integrating it\r\n\r\nMore info: \r\n\r\n* https://github.com/robertkrimen/otto#regular-expression-incompatibility\r\n* robertkrimen/otto#132\r\n* robertkrimen/otto#215 Look into integrating: https://github.com/dlclark/regexp2  can you regenerate the embedded templates with `go generate ./generator` \r\nthe gen-debug makes them refer to a path you our file system ` /Users/401208/src`  you can set your own producers and consumers.\r\nThe ones you've got in your example will do the right thing, the code generator knows about that naming pattern for json  You can use a custom transport which allows you to set the user agent.\r\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L132\r\n\r\nAnd you can configure it with this constructor method\r\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/todo_list_client.go#L52\r\n\r\n\r\nYou can also configure that runtime with a stdlib http.Client \r\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L167\r\n You can extend intercept a http request with the http.RoundTripper interface. https://godoc.org/net/http#RoundTripper\r\n\r\nwhich you can set here: https://github.com/go-openapi/runtime/blob/master/client/runtime.go#L116\r\nso for the client here: \r\n\r\n```go\r\nvar myRoundTripper http.RoundTripper = createRoundTripper()\r\ntransport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)\r\ntransport.Transport = myRoundTripper\r\ntodoListClient := New(transport, nil)\r\n```\r\n reopened so people can find it easily yes it can, the roundtripper is the last thing executed before sending the request on the wire\r\n  this is a bug I think the format validator is never generated for the field It's a generic problem for all format validations occuring on all simple parameters (it works for schema).\r\n\r\n@casualjim do you remember any specific reason to call directly strfmt rather than validate.FormatOf() like we do for schemas? The bug is similar to the one in #1347 \r\nI'm testing a fix along the same lines: hasValidation should be true when a customFormat is applied.\r\n\r\nI am suspecting there ae similar shortcomings with headers (as param, as response) and items in SimpleSchema params/headers Fixed operation binder would look like this. Tell me if you find anything wrong with this.\r\n```golang\r\nfunc (o *GetOptionalParams) bindNotAnOption2(rawData []string, hasKey bool, formats strfmt.Registry) error {\r\n\tif !hasKey {\r\n\t\treturn errors.Required(\"notAnOption2\", \"query\")\r\n\t}\r\n\tvar raw string\r\n\tif len(rawData) > 0 {\r\n\t\traw = rawData[len(rawData)-1]\r\n\t}\r\n\tif err := validate.RequiredString(\"notAnOption2\", \"query\", raw); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tvalue, err := formats.Parse(\"uuid\", raw)\r\n\tif err != nil {\r\n\t\treturn errors.InvalidType(\"notAnOption2\", \"query\", \"strfmt.UUID\", raw)\r\n\t}\r\n\to.NotAnOption2 = *(value.(*strfmt.UUID))\r\n\r\n\tif err := o.validateNotAnOption2(formats); err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc (o *GetOptionalParams) validateNotAnOption2(formats strfmt.Registry) error {\r\n\r\n\tif err := validate.FormatOf(\"notAnOption2\", \"query\", \"uuid\", o.NotAnOption2.String(), formats); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n```\r\n\r\n    \r\nlocal file: \r\n\r\n```yaml\r\nswagger: \"2.0\"\r\ninfo:\r\n  title: Test external refs\r\n  version: 0.0.0\r\n\r\nx-external:\r\n  $ref: https://gist.githubusercontent.com/caryfitzhugh/ee2c09cd7ad526bd23e3e1828c508272/raw\r\n\r\npaths:\r\n  /:\r\n    get:\r\n      parameters:\r\n        - $ref: \"#/x-external/parameters/complex-id\"\r\n      responses:\r\n        default:\r\n          description: who knows\r\n```\r\n\r\nremote file:\r\n\r\n```yaml\r\nparameters:\r\n  complex-id:\r\n    name: complex-id\r\n    required: true\r\n    in: path\r\n    description: a complex id\r\n    type: string\r\n    pattern: '^(notcomplex.*)$'\r\n```\r\n the core of the issue will be found in this file: https://github.com/go-openapi/spec/blob/master/expander.go\r\nAnd there are a bunch of tests for the functionality: https://github.com/go-openapi/spec/blob/master/expander_test.go\r\n\r\nThe current implementation mixes local and remote refs and doesn't favor remote refs as more important. This can be alleviated to some degree by using the flatten command before generating which does prioritize remote refs over local refs. Although it still doesn't deal with recursive remote refs, the source for it is here: https://github.com/go-openapi/analysis/blob/master/flatten.go\r\nhttps://github.com/go-openapi/analysis/blob/master/flatten_test.go    closes #899 \r\ncloses #905   remove `type: object` and you have the way  perhaps it would be good to just put it in the examples folder in this repo  I have a fix locally for this, but still need to write a test for it. Work gets in between you have to update github.com/go-openapi/runtime that's where the fix really was made yes according to the URI RFC a trailing slash is not significant  The content type of your request needs to be set to application/json\r\nAt the moment it's not present and then the default is application/octet-stream  we'll support it, the policy I follow is current and current - 1. So both 1.8 and 1.7 should be supported after 1.8 is released. Thanks for finding this, I'll look into what needs to happen to work with go 1.8 over the weekend unless somebody gets to it earlier it's fixed in the runtime, just update your vendor or the package in your gopath  this doesn't work for you? https://goswagger.io/generate/client.html  did you update your dependencies, in particular the github.com/go-openapi/spec dependency?\r\nDo you get the expected result if you flatten your spec first? `swagger flatten  ./_api/swagger.yaml > swagger.json`  flatten is still experimental and it would result in a breaking change for people who've been using swagger for longer than this feature exists.\r\nI know there are still issues with the flatten command like it doesn't recursively resolve certain definitions, so until I know this is a stable command I wanted to keep it out of the default usage path.\r\nIf you use go-swagger with generate it would just mean 1 more go generate comment prior to the generate command the fix introduces a regression see the go-openapi/validate#8 comment   Because we use goimports to resolve imported libraries/packages\r\nYou're generating go code, so if you want to compile it, it would also need to be in a gopath\r\nYou can compile a single file that just uses stdlib features but for multiple files (like a swagger generated server) that is a very painful situation ic, perhap you can add the swagger binary to your docker container and run the generation in the container itself.\r\n\r\nWe build for linux as well and we also publish a container with go-swagger already inside based on the official golang container with alpine  Could you add a test, and verify the generated code will do the right thing for items that look like:\r\n\r\n```yaml\r\nheaders:\r\n  status:\r\n    type: array\r\n    items:\r\n      type: array\r\n      items:\r\n        type: array\r\n        items:\r\n          type: string\r\n          enum:\r\n          - NEW\r\n          - PUBLISHED\r\n          - OPEN\r\n          - FINISHED\r\n```  Ok there are a number of issues here :)\r\n\r\n1. yes we should allow for adding custom struct tags, this can be supported by defining a vendor extension to drive that process. With that we should be able to support some form of bson, protobuf etc.\r\nHowever json-schema is very elaborate and there are cases where a custom interface needs to be implemented to get to the right result, but for simple cases the tags would work. Things like additionals properties, or allOf etc they'd get problematic.  We can extract the tags for struct from struct field and put them in a unprotected template. The reason the model templates are protected is because of the complexity of json-schema\r\n\r\n2. It's never been a goal of go-swagger to allow for direct insertion in the database because this grows the problem space significantly and I personally think that for anything but the simplest of applications you shouldn't store things you receive from the API directly into the database. In most cases you probably want to denormalize these data structures. \r\n\r\n3. If you do decide you want to mix up external and internal concerns in your application, then somebody will need to add the right interface methods to https://github.com/go-openapi/strfmt, it's been done for sql, mapstructure and json. You can add the bson interfaces there.\r\n\r\n4. If you really want to use bson.ObjectId directly then you can define a new format to indicate that. I think it's a common enough problem people run into for it to be worth it. This would require changes in the generator code too because it has a map of serializers.\r\n  Thanks, can you run: `go generate ./generator`\r\nOtherwise the template changes won't be picked up in the binary  you can implement a responder function which is: func(http.ResponseWriter, runtime.Producer)\r\nhttps://github.com/go-openapi/runtime/blob/master/middleware/context.go#L59\r\n\r\nThe params struct has access to the http.Request and with the responder function you have access to the response writer\r\n\r\n```go\r\napi.StaticSayHelloHandler = static.SayHelloHandlerFunc(func(params static.SayHelloParams) middleware.Responder {\r\n  return middleware.ResponderFunc(func(rw http.ResponseWriter, _ runtime.Producer){\r\n    conn, err := upgrader.Upgrade(rw, params.HTTPRequest, nil)\r\n    if err != nil {\r\n      log.Println(err)\r\n      return\r\n    }\r\n  })\r\n})\r\n```  @casualjim I am not sure not that fully supporting additionalItems couldbe qualified as a bug.\r\n\r\nI've seen that great efforts have been made to support this in the underlying json-schema mechanics.\r\n\r\nI could check this parts works well for data against schema (e.g. to validate default values or examples in spec validation, even though the given schema specified is not 2.0-compliant).\r\n\r\nEventually, the additionalItems keyword is not supported in Swagger 2.0 schemas.\r\n\r\n\r\n\r\n  The name in there is optional and is for when you want to override the name (key) that appears in the definitions section of your swagger spec\r\nSo I don't know how useful dots are there, because those names should be language agnostic \r\n(personally I prefer json naming conventions for specs)  This time stamp is missing zone info, it should end with Z for UTC IIRC\r\nIt can be fixed by adding more patterns here: https://github.com/go-openapi/strfmt/blob/master/time.go#L60  I'm in favor of all  a work around for this is to flatten the spec before generating it  you can run your code with DEBUG=1 env var and it will print request/response go for it  if you want a type alias you shouldn't use an inline definition of the enum, but move the enum to a definition itself. That will hint the code generator that you want it to be a type alias. (takes care of issue 3 in your list)  I wouldn't object to expanding this to also do that for inline enum definitions.\r\n\r\nI think there are many different kinds of enums to be compliant with json schema and string enums are not the only ones that matter.  According to json-schema _any_ type can be used in an enum this includes arrays and objects\r\n\r\nNot importing of validate is kind of futile because other validations that are present will require it anyway. Surely your application doesn't have 1 model with 1 property that is an enum so I don't quite understand the objection to it. If it is 1 model with 1 property and that is an enum I don't know what codegen buys you at all.\r\n\r\nThe reason it uses a singleton is because of complex objects like nested structs can also be enums in which case it's much harder to generate constants for them. init comes at a negligible one time cost so other than cleanliness I don't know what the objection is as this is unexported usage in generated code. So what is the objection besides it's not the code you would have preferred to see the most for this narrower use case.  json ast with support for parser position. https://github.com/ajeddeloh/go-json  For composed objects there might also be inheritance involved etc. At first glance I don't know why the custom marshaller was triggered because there is no discriminator involved.\r\n \r\nIn the future it would be nice to generate custom marshal/unmarshal methods for every generated struct using https://github.com/mailru/easyjson when a discriminator is involved because then you have only an interface and it needs to be able to marshal a concrete type  can you run `go generate ./generator` so that the template changes are included in the binary? sure if you want to add by all means :)  maybe duplicate of: #100  so sorry I didn't see it the first time around.\r\nyou still need to run `go generate ./generator` because you changed the template, and without it the changes won't show up in bindata.go yes if templates are changed then bindata needs to get changed too, in the binary that's how we distribute the templates  I've been thinking a bit more about this and because the thing being validated would always be called from another method., that method could just rewrite the errors by adding the field name info in there.\r\nLess invasive   In which project is this? Master etc all point to codecov.io  did you set up a TextProducer too?  These are good suggestions, will look into adding swagger as preferred tag for name overrides.\r\nYou're right I don't think examples are currently supported, how would you like to see that work  Thanks!  duplicate of: #733 fwiw I'm actually working on a  fix for this atm  you need to get those packages on your gopath either by vendoring or go getting them.\r\nAfter you've done that and regenerate everything should work. It's because we use goimports to reformat the file and optimize imports.\r\n\r\nrelated: #817  with govendor you need to update the dependencies manuall\r\nso you also need to update:\r\n\r\n* github.com/go-openapi/loads\r\n* github.com/go-openapi/analysis\r\n* github.com/go-openapi/runtime\r\n* github.com/go-openapi/spec\r\n* github.com/go-openapi/swag the spec is invalid too. If you want an integer number you need to use\r\n\r\n```yaml\r\n# int32\r\ntype: integer\r\nformat: int32\r\n# int64\r\ntype: integer\r\nformat: int64\r\n```\r\n\r\n\r\n What's the go version you're using?\r\nWhat's the OS you're using?\r\nWould it be possible to post a single complete spec that exhibits the issue (something that can be added to the tests)? I meant a contrived swagger yaml or json that can be used to reproduce the issue, we don't care much for the names of the types.\r\nThis partial information isn't helpful for somebody who wants to look at this to debug your issue.\r\n\r\n Can you reproduce this with a minimal spec that you just make up? A minimal example that has nothing to do with your actual project. Something completely unrelated to your actual project. We don't care\r\n\r\nWith information like you shared the most likely outcome is nobody is going to look at it because too much effort/guesswork to reproduce this issue, or you have to debug it yourself.\r\n\r\nThe code that does the imports is here: https://github.com/golang/tools/tree/master/cmd/goimports\r\nSwagger reformats and adds imports here: https://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L95-L102\r\n\r\n\r\n  Thanks!  The reason it generates with swagger-codegen is because swagger-codegen doesn't generate any of the models.\r\nIn the spec there is a property language with type: \"null\"\r\nThis is allowed in json schema but not in swagger 2.0's interpretation of json schema.   yes can be a good idea to add to the codegenerator  closes #789  it's true to the spec, change it to\r\n\r\n```yaml\r\nproduct_type:\r\n         description: The type of product this mosaic is\r\n         enum:\r\n           - basemap\r\n           - timelapse\r\n           - l3m\r\n```  closes #802   is your spec valid? because the default behavior is everything  References to code source change over time...\r\n\r\nIs this TODO the one incriminated?\r\n```\r\nfunc (scp *schemaParser) parseAllOfMember(gofile *ast.File, schema *spec.Schema, expr ast.Expr, seenPreviously map[string]string) error {\r\n\t// TODO: check if struct is annotated with swagger:model or known in the definitions otherwise\r\n\tvar pkg *loader.PackageInfo\r\n\tvar file *ast.File\r\n\tvar gd *ast.GenDecl\r\n\tvar ts *ast.TypeSpec\r\n...\r\n```\r\n\r\nThe (undocumented)  swagger:ignore annotation provides, in my opinion, a workable workaround.  thanks, they have been fixed now  fixed by #815   I had to revert this once I saw it introduces a breaking change in the generated code.\r\nI think this needs an extra method: ValidateNamed which can have the name as extra argument.\r\nThen an aliased type should be validated with the ValidateNamed method while other things can continue to use the Validate method.  fixed by #815   which version of swagger are you using? because I'm having a hard time reproducing this issue.\r\nhttps://github.com/go-swagger/go-swagger/pull/806 I've confirmed that the issue exists in 0.7.4 and is gone on master I created a 0.8.0 release, so you have a stable version to depend on\r\nhttps://github.com/go-swagger/go-swagger/releases/tag/0.8.0  you typically see this error when you have nested vendors  You can do much of what you want to achieve today.\r\nParameter structs can be associated with more than one operation, and you can define more than one parameter struct.\r\n\r\n```markdown\r\nswagger:params [operationid1 operationid2]\r\n\r\nLinks a struct to one or more operations. The params in the resulting swagger spec \r\ncan be composed of several structs.  There are no guarantees given on how property \r\nname overlaps are resolved when several structs apply to the same operation.\r\n```\r\n\r\nSo the idea is that when you want to have a parameter struct that is comprised out of several parameter struct, you don't annotate the one you bind to but rather compose it out of other pieces.\r\n\r\nThen the second ask for the responses, there is a syntax for that use case.\r\n\r\n```go\r\n// swagger:route PUT /orders/{id} orders updateOrder\r\n//\r\n// Responses:\r\n//   default: body:genericError\r\n//   200: body:someResponse\r\n//   422: body:validationError\r\nmountItem(\"PUT\", basePath+\"/orders/:id\", nil)\r\n\r\n\r\n// A GenericError is the default error message that is generated.\r\n// For certain status codes there are more appropriate error structures.\r\n//\r\n// swagger:response genericError\r\ntype GenericError struct {\r\n\t// in: body\r\n\tBody struct {\r\n\t\tCode    int32 `json:\"code\"`\r\n\t\tMessage error `json:\"message\"`\r\n\t} `json:\"body\"`\r\n}\r\n\r\n// A ValidationError is an that is generated for validation failures.\r\n// It has the same fields as a generic error but adds a Field property.\r\n//\r\n// swagger:response validationError\r\ntype ValidationError struct {\r\n\t// in: body\r\n\tBody struct {\r\n\t\tCode    int32  `json:\"code\"`\r\n\t\tMessage string `json:\"message\"`\r\n\t\tField   string `json:\"field\"`\r\n\t} `json:\"body\"`\r\n}\r\n\r\n// A ModelAndResponse contains a params and model annotation, so it's invalid\r\n//\r\n// swagger:model theModelName\r\n// swagger:response someResponse\r\ntype ModelAndResponse struct {\r\n\tID int64 `json:\"id,omitempty\"`\r\n}\r\n\r\n```\r\n\r\n\r\n What syntax would you propose for this? what is the value of adding more comments, because you can deep merge an existing swagger file. Doesn't that solve the problem for you @GlenDC. The benefit is that you can use swagger validation to validate your partial spec so you want to provide a swagger spec like the input spec but in the code? So you want to provide a value you parse out of the comments\r\n\r\nit would probably be injected here:\r\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/scanner.go#L192\r\n\r\nNow as to implementation of it, it would be something like a `swagger:input` annotation (which is new) and then the rest of that comment block can be considered a swagger specification\r\nIf the first char is { parse json otherwise try yaml oic I was coming from the POV of having a replacement for the input swagger specification instead of what you describe.\r\nIn case of the swagger:router I think what you want is to just a few more keys that are recognized, in that case you can extend what exists today for the swagger:router.\r\nA good starting point to read up on that is: https://github.com/go-swagger/go-swagger/blob/master/scan/routes.go#L194-L199\r\n superseded by: #793  You can already reuse parameters, that captures this case\r\nI think this is answered by: https://github.com/go-swagger/go-swagger/issues/782#issuecomment-266334244\r\n  I can see why you want a description, but at that point the swagger spec is nothing more than a documentation tool. So I don't know what you would gain by that over just using a markdown document.\r\n\r\nWhen you define headers like you've described in your proposal, we lose type information. The point of making you define structs is so that you get the type checking from the compiler, and overall it leads to a better defined code base and API.\r\n\r\nAs for your second point, are you saying you want to reuse a partial parameter struct to also serve as list of headers for a response.  Because I think that might be a good addition. The problem arises when there are things defined on the parameter struct that aren't headers or a body, do you have a solution for that? I merged the #738 PR, sorry for the delay.\r\nI have no objection to the addition of description: \r\n\r\nPretty much the only thing I will object to is putting type information in the comments. yeah data types. Like defining headers for responses and such. \r\nFor headers you'd have to give a type for the header and I'm not a fan of duplicating that information in comments because you lose the benefits a compiler adds.\r\n yeah I think this is a bug.\r\nThis is the code responsible for that section: https://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L569-L648  unfortunately this doesn't exist today, the only thing you can do is exclude models from being generated.\r\nThat being said I think this would not be terribly hard to add though as an extra set of flags or a part of the config file.\r\nI think it would be a valuable addition to this toolkit and I'd welcome a PR that added support for this. I think it might be worth defining 2 new vendor extensions because I think x-go-package and x-go-name have a slightly different reason for existing. Perhaps something like `x-go-type` and `\"x-go-import\": { \"package\": \"github.com/user/package\", \"alias\":\"jwk\" }`\r\n\r\nWe can also make the check for the Validate implementation optional and only when it can be converted to that interface we'll call the method. That can save you having to wrap the type for the sake of implementing a dummy interface.\r\n\r\n> but I cannot figure out where the import string came from\r\n\r\nWhen a go file is generated we call `goimports` which fixes up imports and formats the file, so that might explain why you get the automatic import in there.\r\n\r\nI think you're on the right track with this fix\r\n  Is it the same spec from your previous issues?\r\nCan you share the request you make that triggers this? ah you have to add a Content-Type header to your request.\r\nThis is a bug because it should return a 4xx status code  there is some overlap here with #744 which does more extensive enum support. Would it be possible to separate the 2?\r\nIf you're planning on contributing more (which would be awesome) we have a slack team. https://slacking.goswagger.io  thanks!  ```yaml\r\n user:\r\n    type: object\r\n    required:\r\n      - role\r\n    properties:\r\n      role:\r\n        type: integer\r\n        enum:\r\n          - 0\r\n          - 1\r\n          - 10\r\n          - 11\r\n          - 20\r\n```\r\n\r\nor\r\n\r\n```yaml\r\n user:\r\n    type: object\r\n    properties:\r\n      role:\r\n        type: integer\r\n        x-nullable: true\r\n        enum:\r\n          - 0\r\n          - 1\r\n          - 10\r\n          - 11\r\n          - 20\r\n```  o you're not setting the default values on the properties themselves? \r\nI suppose it's a valid json schema no that's a bug, it would need fixing in the code generator  by all means! Reopened until a solution that is backwards compatible can be added  This probably belongs on https://github.com/swagger-api/swagger-core or one of the repos in the https://github.com/swagger-apiswagger-api org  \r\nThis project is only about the go bindings for swagger  related #733 it's a bug but fwiw the spec is also not entirely valid. The type of the items should be integer not number\r\n\r\n```yaml\r\nswagger: '2.0'\r\ninfo:\r\n  title: Test\r\n  description: Test Service\r\n  version: '1.0.0'\r\nhost: localhost\r\nbasePath: /\r\nproduces:\r\n  - application/json\r\nschemes:\r\n  - http\r\npaths:\r\n  /myMethod:\r\n    get:\r\n      operationId: get_test\r\n      summary: Get a list of int32s.\r\n      responses:\r\n        200:\r\n          schema:\r\n            $ref: '#/definitions/test_list'\r\ndefinitions:\r\n  test_list:\r\n    type: object\r\n    properties:\r\n      the_array:\r\n        type: array\r\n        items:\r\n          minimum: 0\r\n          maximum: 10\r\n          type: integer\r\n          format: int32\r\n```  the api has a Logger property that is a function with signature: `func(string, ...interface{})`\r\nYou can configure it with any logger that exposes the signature.\r\neg.: https://github.com/go-swagger/go-swagger/blob/master/examples/authentication/restapi/configure_auth_sample.go#L33 You can generate a server with `--flag-strategy pflag`\r\n\r\nAfter that you can use its integration to add goflags, you would do this in the main file. subsequently it's probably a good idea to generated code with `--exclude-main` so the update is preserved.\r\n\r\nhttps://github.com/spf13/pflag#supporting-go-flags-when-using-pflag\r\n\r\n```go\r\nimport (\r\n    goflag \"flag\"\r\n    flag \"github.com/spf13/pflag\"\r\n)\r\n\r\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\r\n\r\nfunc main() {\r\n    flag.CommandLine.AddGoFlagSet(goflag.CommandLine)\r\n    flag.Parse()\r\n}\r\n```  would it be possible to include the entire spec?\r\nbecause this looks a lot like a bug in the unique name generation part Your url needs to contain the base path, taking the spec you provided and generated a server. \r\n\r\n```shellsession\r\n$ go run ./cmd/mosaics-server/main.go --scheme http\r\n2016/11/29 07:40:46 Serving mosaics at http://127.0.0.1:45531\r\n```\r\n\r\nThen in another terminal I did\r\n```shellsession\r\n$ curl 127.0.0.1:45531/mosaic/experimental/mosaics\r\n{\"code\":405,\"message\":\"method GET is not allowed, but [PUT,POST] are\"}\r\n$ curl 127.0.0.1:45531/v1/mosaic/experimental/mosaics\r\n\"operation .GetMosaicExperimentalMosaics has not yet been implemented\"\r\n$ curl -XPOST 127.0.0.1:45531/v1/mosaic/experimental/mosaics\r\n\"operation .PostMosaicExperimentalMosaics has not yet been implemented\"\r\n$ curl -XPUT 127.0.0.1:45531/v1/mosaic/experimental/mosaics\r\n\"operation .PutMosaicExperimentalMosaics has not yet been implemented\"\r\n```\r\n\r\nAlso the `discriminator` value in `MosaicSeriesFilter` should be `filterType` I think because I don't see a type field.  That is correct 405 is the wrong error and is confusing this should be fixed in the latest runtime by go-openapi/runtime#26  It depends on which go version you are using, you may have to set: GO15VENDOREXPERIMENT=1 \r\nif the go version you're using isn't 1.6+\r\n\r\nPersonally I use the [gvt](https://github.com/FiloSottile/gvt) tool for vendoring and it picks all the packages up you listed as actual list when you vendor the packages that are listed at the end of the command.\r\nIt recursively fetches all the packages properly.\r\n The errors in your stacktrace suggests to me that the import paths are a bit off. How do your import paths look in your files? I can reproduce your problem. \r\n```shellsession\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb tree\r\n.\r\n\u2514\u2500\u2500 swagger.yml\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb govendor init\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb tree -L 3 vendor \r\nvendor\r\n\u2514\u2500\u2500 vendor.json\r\n\r\n0 directories, 1 file\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb govendor fetch -v github.com/go-openapi/runtime\r\nGet latest revision \"github.com/go-openapi/runtime\"\r\nGet latest revision \"golang.org/x/net/context\"\r\nGet latest revision \"github.com/go-openapi/swag\"\r\nGet latest revision \"github.com/go-openapi/strfmt\"\r\nGet latest revision \"github.com/go-openapi/errors\"\r\nGet latest revision \"github.com/mailru/easyjson/jlexer\"\r\nGet latest revision \"github.com/mailru/easyjson/jwriter\"\r\nGet latest revision \"github.com/asaskevich/govalidator\"\r\nGet latest revision \"github.com/mitchellh/mapstructure\"\r\nGet latest revision \"github.com/mailru/easyjson/buffer\"\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb govendor fetch -v github.com/tylerb/graceful\r\nGet latest revision \"github.com/tylerb/graceful\"\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb govendor fetch -v github.com/jessevdk/go-flags\r\nGet latest revision \"github.com/jessevdk/go-flags\"\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb govendor fetch -v golang.org/x/net/context\r\nGet latest revision \"golang.org/x/net/context\"\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb tree -L 3 vendor\r\nvendor\r\n\u251c\u2500\u2500 github.com\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 asaskevich\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 govalidator\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 go-openapi\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 errors\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 runtime\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 strfmt\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 swag\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jessevdk\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 go-flags\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mailru\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 easyjson\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mitchellh\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mapstructure\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tylerb\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 graceful\r\n\u251c\u2500\u2500 golang.org\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 x\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 net\r\n\u2514\u2500\u2500 vendor.json\r\n\r\n19 directories, 1 file\r\n```\r\n\r\nIt seems govendor doesn't pick up the validate package, so I added that\r\n\r\n```shellsession\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb govendor fetch -v github.com/go-openapi/validate\r\nGet latest revision \"github.com/go-openapi/validate\"\r\nGet latest revision \"github.com/go-openapi/analysis\"\r\nGet latest revision \"github.com/go-openapi/jsonpointer\"\r\nGet latest revision \"github.com/go-openapi/spec\"\r\nGet latest revision \"github.com/go-openapi/loads\"\r\nGet latest revision \"github.com/go-openapi/jsonreference\"\r\nGet latest revision \"github.com/PuerkitoBio/purell\"\r\nGet latest revision \"golang.org/x/net/idna\"\r\nGet latest revision \"golang.org/x/text/width\"\r\nGet latest revision \"github.com/PuerkitoBio/urlesc\"\r\nGet latest revision \"golang.org/x/text/unicode/norm\"\r\nGet latest revision \"golang.org/x/text/internal/gen\"\r\nGet latest revision \"golang.org/x/text/internal/triegen\"\r\nGet latest revision \"golang.org/x/text/internal/ucd\"\r\nGet latest revision \"golang.org/x/text/transform\"\r\nGet latest revision \"golang.org/x/text/unicode/cldr\"\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb \r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb tree -L 3 vendor\r\nvendor\r\n\u251c\u2500\u2500 github.com\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 asaskevich\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 govalidator\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 go-openapi\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 analysis\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 errors\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonpointer\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonreference\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 loads\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 runtime\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 spec\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 strfmt\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 swag\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 validate\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jessevdk\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 go-flags\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mailru\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 easyjson\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mitchellh\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mapstructure\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 PuerkitoBio\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 purell\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 urlesc\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tylerb\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 graceful\r\n\u251c\u2500\u2500 golang.org\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 x\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 net\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 text\r\n\u2514\u2500\u2500 vendor.json\r\n\r\n29 directories, 1 file\r\n```\r\n\r\n```\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb alias swagger=\"docker run --rm -it -v /home/ivan/go/src/swagger-test:/go/src/swagger-test -w /go/src/swagger-test quay.io/goswagger/swagger\"\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb which swagger\r\nswagger: aliased to docker run --rm -it -v /home/ivan/go/src/swagger-test:/go/src/swagger-test -w /go/src/swagger-test quay.io/goswagger/swagger\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb swagger generate server -A TodoList -f swagger.yml\r\nUnable to find image 'quay.io/goswagger/swagger:latest' locally\r\nlatest: Pulling from goswagger/swagger\r\n28c417e954d8: Pull complete \r\n8abaad28289b: Pull complete \r\nc0d3fbe7c6e2: Pull complete \r\nbaa638d2506a: Pull complete \r\n4ceb95128ac9: Pull complete \r\n2d0a16542275: Pull complete \r\n00568dfa5f26: Pull complete \r\n31dcaa898959: Pull complete \r\nDigest: sha256:218cf4d488a23a6f7d0e7fcbe39628cecf758dd420221080fed01686b124dd85\r\nStatus: Downloaded newer image for quay.io/goswagger/swagger:latest\r\n2016/11/24 21:40:01 building a plan for generation\r\n2016/11/24 21:40:01 planning definitions\r\n2016/11/24 21:40:01 planning operations\r\n2016/11/24 21:40:01 grouping operations into packages\r\n....\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb sudo chown -R ivan:ivan .\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb go run ./cmd/todo-list-server/main.go\r\n# swagger-test/restapi/operations/todos\r\nrestapi/operations/todos/add_one_parameters.go:50: cannot use route.routeEntry.Formats (type \"github.com/go-openapi/strfmt\".Registry) as type \"swagger-test/vendor/github.com/go-openapi/strfmt\".Registry in argument to body.Validate:\r\n\t\"github.com/go-openapi/strfmt\".Registry does not implement \"swagger-test/vendor/github.com/go-openapi/strfmt\".Registry (wrong type for Add method)\r\n\t\thave Add(string, \"github.com/go-openapi/strfmt\".Format, \"github.com/go-openapi/strfmt\".Validator) bool\r\n\t\twant Add(string, \"swagger-test/vendor/github.com/go-openapi/strfmt\".Format, \"swagger-test/vendor/github.com/go-openapi/strfmt\".Validator) bool\r\n....\r\n```\r\n\r\n I want to contrast this with the result I get when I use gvt as vendoring tool\r\n\r\n```shellsession\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb rm -rf vendor\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb gvt fetch github.com/go-openapi/runtime\r\n2016/11/24 13:44:04 Fetching: github.com/go-openapi/runtime\r\n2016/11/24 13:44:06 \u00b7 Fetching recursive dependency: github.com/docker/go-units\r\n2016/11/24 13:44:07 \u00b7 Fetching recursive dependency: github.com/go-openapi/strfmt\r\n2016/11/24 13:44:08 \u00b7\u00b7 Fetching recursive dependency: github.com/mitchellh/mapstructure\r\n2016/11/24 13:44:10 \u00b7\u00b7 Fetching recursive dependency: github.com/mailru/easyjson/jlexer\r\n2016/11/24 13:44:11 \u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/errors\r\n2016/11/24 13:44:13 \u00b7\u00b7 Fetching recursive dependency: github.com/mailru/easyjson/jwriter\r\n2016/11/24 13:44:13 \u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/mailru/easyjson/buffer\r\n2016/11/24 13:44:13 \u00b7\u00b7 Fetching recursive dependency: github.com/asaskevich/govalidator\r\n2016/11/24 13:44:14 \u00b7 Fetching recursive dependency: github.com/stretchr/testify/assert\r\n2016/11/24 13:44:16 \u00b7\u00b7 Fetching recursive dependency: github.com/stretchr/testify/vendor/github.com/pmezard/go-difflib/difflib\r\n2016/11/24 13:44:16 \u00b7\u00b7 Fetching recursive dependency: github.com/stretchr/testify/vendor/github.com/davecgh/go-spew/spew\r\n2016/11/24 13:44:16 \u00b7 Fetching recursive dependency: github.com/gorilla/context\r\n2016/11/24 13:44:17 \u00b7 Fetching recursive dependency: golang.org/x/net/context/ctxhttp\r\n2016/11/24 13:44:19 \u00b7\u00b7 Fetching recursive dependency: golang.org/x/net/context\r\n2016/11/24 13:44:19 \u00b7 Fetching recursive dependency: github.com/go-openapi/loads\r\n2016/11/24 13:44:20 \u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/analysis\r\n2016/11/24 13:44:22 \u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/swag\r\n2016/11/24 13:44:23 \u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/jsonpointer\r\n2016/11/24 13:44:25 \u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/spec\r\n2016/11/24 13:44:26 \u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/go-openapi/jsonreference\r\n2016/11/24 13:44:28 \u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/PuerkitoBio/purell\r\n2016/11/24 13:44:29 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: github.com/PuerkitoBio/urlesc\r\n2016/11/24 13:44:31 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/unicode/norm\r\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/internal/gen\r\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/unicode/cldr\r\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/internal/ucd\r\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/transform\r\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/internal/triegen\r\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/net/idna\r\n2016/11/24 13:44:33 \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7 Fetching recursive dependency: golang.org/x/text/width\r\n2016/11/24 13:44:33 \u00b7\u00b7 Fetching recursive dependency: gopkg.in/yaml.v2\r\n2016/11/24 13:44:36 \u00b7 Fetching recursive dependency: github.com/go-openapi/validate\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb gvt fetch github.com/tylerb/graceful\r\n2016/11/24 13:44:44 Fetching: github.com/tylerb/graceful\r\n2016/11/24 13:44:45 \u00b7 Fetching recursive dependency: github.com/urfave/negroni\r\n2016/11/24 13:44:47 \u00b7 Fetching recursive dependency: gopkg.in/tylerb/graceful.v1\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb gvt fetch github.com/jessevdk/go-flags\r\n2016/11/24 13:44:56 Fetching: github.com/jessevdk/go-flags\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb gvt fetch golang.org/x/net/context\r\n2016/11/24 13:45:04 command \"fetch\" failed: golang.org/x/net/context or a parent of it is already vendored\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb tree -L 3 vendor\r\nvendor\r\n\u251c\u2500\u2500 github.com\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 asaskevich\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 govalidator\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 docker\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 go-units\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 go-openapi\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 analysis\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 errors\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonpointer\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 jsonreference\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 loads\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 runtime\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 spec\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 strfmt\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 swag\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 validate\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 gorilla\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 context\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 jessevdk\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 go-flags\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mailru\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 easyjson\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 mitchellh\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mapstructure\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 PuerkitoBio\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 purell\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 urlesc\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 stretchr\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 testify\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tylerb\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 graceful\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 urfave\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 negroni\r\n\u251c\u2500\u2500 golang.org\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 x\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 net\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 text\r\n\u251c\u2500\u2500 gopkg.in\r\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tylerb\r\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 graceful.v1\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 yaml.v2\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 apic.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 decode.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 emitterc.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 encode.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 LICENSE\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 parserc.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 readerc.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 resolve.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 scannerc.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 sorter.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 writerc.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 yaml.go\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 yamlh.go\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 yamlprivateh.go\r\n\u2514\u2500\u2500 manifest\r\n\r\n41 directories, 15 files\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb which swagger\r\nswagger: aliased to docker run --rm -it -v /home/ivan/go/src/swagger-test:/go/src/swagger-test -w /go/src/swagger-test quay.io/goswagger/swagger\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb ls\r\ncmd  models  restapi  swagger.yml  vendor\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb rm -rf cmd models restapi   \r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb swagger generate server -A TodoList -f swagger.yml\r\n2016/11/24 21:45:35 building a plan for generation\r\n2016/11/24 21:45:35 planning definitions\r\n2016/11/24 21:45:35 planning operations\r\n2016/11/24 21:45:35 grouping operations into packages\r\n2016/11/24 21:45:35 planning meta data and facades\r\n2016/11/24 21:45:35 rendering 2 models\r\n...\r\nGeneration completed!\r\n\r\nFor this generation to compile you need to have some packages in your GOPATH:\r\n\r\n  * github.com/go-openapi/runtime\r\n  * github.com/tylerb/graceful\r\n  * github.com/jessevdk/go-flags\r\n  * golang.org/x/net/context\r\n\r\nYou can get these now with: go get -u -f ./...\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb sudo chown -R ivan:ivan .            \r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb go run ./cmd/todo-list-server/main.go\r\n2016/11/24 13:45:49 the required flags `--tls-certificate` and `--tls-key` were not specified\r\nexit status 1\r\n```  Can you change your alias a little?\r\n\r\nI think either of these should work:\r\n\r\n```\r\nalias swagger='docker run --rm -it -v /home/sandy:/root -v /home/sandy/go/src/my_org:/go/src/my_org -w /go/src/my_org/my_project quay.io/goswagger/swagger'\r\n```\r\n\r\nor\r\n\r\n```\r\nalias swagger='docker run --rm -it -e GOPATH=/home/sandy/go:/go -v /home/sandy:/home/sandy -w /home/sandy/go/src/my_org/my_project quay.io/goswagger/swagger'\r\n```\r\n The explanation is that on your local machine the project definitely resides in the go path, but the go path in the docker container is at /go not at your home directory.\r\nThere are also a  few items pre-installed in the gopath of the container you're using so that also makes it so you can't fully overwrite the go path with yours.\r\nIt is possible though but then you have to make sure you have these packages in your local go path (and compiled for linux not another OS) https://github.com/go-swagger/go-swagger/blob/master/Dockerfile#L5-L10  Thanks for your feedback.\r\nI'm sorry you have a tough time, but this project is very much a project of volunteers. A number of people have fixed issues that they ran into. Similarly I use this project for work, so the little free time I have I spend on the issues that affect the teams I work with directly.\r\n\r\nAre you sure you're using this in a gopath? And are your imports fully qualified imports?\r\nAs far as I know the examples in the [examples](https://github.com/go-swagger/go-swagger/tree/master/examples) folder all work correctly.\r\nThere is also the project I use for the tests of the scanner: https://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/classification\r\n\r\nAt a very minimum could you provide a small repro case? can you try this:\r\n\r\n```\r\nmkdir -p /tmp/go/src/foo\r\ncat > /tmp/go/src/foo/main.go <<EOF\r\npackage main\r\n//swagger:response Foo\r\ntype Foo struct {\r\n    Bar int\r\n}\r\nEOF\r\nGOPATH=/tmp/go swagger generate spec\r\n```\r\n\r\ngo is opinionated about the gopath, you can read more about it here:\r\nhttps://golang.org/doc/code.html\r\nhttps://github.com/golang/go/wiki/GOPATH I've added this to the faq now  A discriminator field can't be empty. https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object\r\n\r\n> Adds support for polymorphism. The discriminator is the schema property name that is used to differentiate between other schema that inherit this schema. The property name used MUST be defined at this schema and it MUST be in the required property list. When used, the value MUST be the name of this schema or any schema that inherits it.\r\n\r\nIs there any chance you can actually submit swagger specifications to reproduce your issues?  Try this\r\n\r\n```Dockerfile\r\nFROM golang\r\nMAINTAINER E. Theodore L. Omtzigt \r\n\r\nENV GOBIN $GOPATH/bin\r\n\r\nADD . /go/src/github.com/Ravenwater/server-complete\r\nRUN go install /go/src/github.com/Ravenwater/server-complete/cmd/todo-list-server\r\nWORKDIR /go/src/github.com/Ravenwater/server-complete\r\nENTRYPOINT /go/bin/todo-list-server --port 8090 --host 0.0.0.0\r\n\r\n# serving HTTP of 8090\r\nEXPOSE 8090\r\n``` by default goswagger servers default to localhost, this is done so that on osx it doesn't trigger the firewall popup when you test. Also it's safer to not listen on all interfaces by default.\r\nInside a docker container we do want to listen on all interfaces because localhost there refers to the docker container itself. \r\n\r\nthen the other edit is the go install without the main.go. The only time you need to refer to files directly is when you use go run, for go install you can refer to the package that contains the main and then the binary will be named the same as the folder (package).\r\n\r\nFor a slightly more advanced (and a lot smaller container) you can also use a 2 stage compilation process, You use 1 container to build the binary and and another container to run the binary.\r\n\r\nYou can run the build.sh script below. Unfortunately I've never tried this on windows though, I think your best bet there is to use powershell. (or perhaps try the windows linux subsystem). The files i included below are also available here: https://github.com/casualjim/testapp\r\n\r\nFor a folder called testapp in the gopath with the following files in it:\r\n\r\nDockerfile:\r\n```Dockerfile\r\nFROM casualjim/base:latest\r\nMAINTAINER Ivan Porto Carrero <ivan@flanders.co.nz> (@casualjim)\r\n\r\nADD testapp /testapp\r\nEXPOSE 8080\r\nENTRYPOINT [\"/testapp\"]\r\n```\r\n\r\nbuild.sh\r\n```shell\r\n#!/bin/bash\r\n\r\nset -e -o pipefail\r\n\r\nversion=${1-\"latest\"}\r\n\r\nbrwhte=\"$(tput setaf 15)\"\r\nbryllw=\"$(tput setaf 11)\"\r\ncreset=\"$(tput sgr0)\"\r\nyarrow=\"${bryllw}=>${creset}\"\r\n\r\nbuild_binary() {\r\n  set -u\r\n  echo -e \"${yarrow} building binary ${brwhte}testapp${creset}\"\r\n  docker pull casualjim/builder\r\n  docker run --rm -it -v `pwd`:/go/src/github.com/casualjim/testapp -w /go/src/github.com/casualjim/testapp  casualjim/builder \"$@\"\r\n}\r\n\r\nbuild_container() {\r\n  set -u\r\n  echo -e \"${yarrow} publishing ${brwhte}testapp${creset}\"\r\n  docker build --pull --no-cache -q -t casualjim/testapp:$version .\r\n}\r\n\r\nbuild_binary go get ./... && go build -o testapp -a -ldflags '-w -linkmode external -extldflags \"-static\"' .\r\nbuild_container\r\n\r\n```\r\n\r\nmain.go:\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"log\"\r\n\t\"net\"\r\n\t\"net/http\"\r\n\t\"net/http/httputil\"\r\n\t\"time\"\r\n\r\n\t\"github.com/tylerb/graceful\"\r\n)\r\n\r\nfunc main() {\r\n\tmux := http.NewServeMux()\r\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, req *http.Request) {\r\n\t\tb, err := httputil.DumpRequest(req, false)\r\n\t\tif err != nil {\r\n\t\t\tlog.Printf(\"handle request: %v\", err)\r\n\t\t}\r\n\t\tlog.Printf(\"%s\", b)\r\n\t\tfmt.Fprintf(w, \"Welcome to the home page!\")\r\n\t})\r\n\r\n\thttpServer := &graceful.Server{Server: new(http.Server)}\r\n\thttpServer.SetKeepAlivesEnabled(true)\r\n\thttpServer.TCPKeepAlive = 3 * time.Minute\r\n\thttpServer.ListenLimit = 50\r\n\thttpServer.Timeout = 10 * time.Second\r\n\thttpServer.Handler = mux\r\n\thttpServer.Logger = graceful.DefaultLogger()\r\n\r\n\ttcpv4Listener, err := net.Listen(\"tcp4\", \":8080\")\r\n\tif err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\r\n\tlog.Println(\"serving on\", tcpv4Listener.Addr().String())\r\n\tif err := httpServer.Serve(tcpv4Listener); err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n}\r\n```  people typically return a 204 for success responses that don't have content.  you may want to make your own responder, then you have access to the response writer and you can set your cookie\n  would it be possible to add a spec to this issue?\n The default configuration uses the error code as http status code. So when you return `errors.New(100, \"incorrect api key auth\")` the server will respond with `100 Expect Continue`\r\n\r\n```shellsession\r\n\u00b1 ivan@avalon:~  \r\n \u00bb curl -i -H 'Content-Type: application/keyauth.api.v1+json' -H 'X-Token: abcdefu' http://127.0.0.1:35307/api/customers\r\n```\r\n```http\r\nHTTP/1.1 100 Continue\r\nContent-Type: application/keyauth.api.v1+json\r\nDate: Fri, 25 Nov 2016 19:16:29 GMT\r\n\r\n^C\r\n```\r\n\r\nChanging the error code to 401 fixes the issue for me.\r\n\r\n\u00b1 ivan@avalon:~  \r\n \u00bb curl -i -H 'Content-Type: application/keyauth.api.v1+json' -H 'X-Token: abcdefuvwxyz' http://127.0.0.1:35307/api/customers\r\n```\r\n```http\r\nHTTP/1.1 501 Not Implemented\r\nContent-Type: application/keyauth.api.v1+json\r\nDate: Fri, 25 Nov 2016 19:14:14 GMT\r\nContent-Length: 57\r\n\r\n\"operation customers.GetID has not yet been implemented\"\r\n```\r\n```shellsession\r\n\u00b1 ivan@avalon:~  \r\n \u00bb curl -i -H 'Content-Type: application/keyauth.api.v1+json' -H 'X-Token: abcdefu' http://127.0.0.1:35307/api/customers\r\n```\r\n```http\r\nHTTP/1.1 401 Unauthorized\r\nContent-Type: application/keyauth.api.v1+json\r\nDate: Fri, 25 Nov 2016 19:16:49 GMT\r\nContent-Length: 47\r\n\r\n{\"code\":401,\"message\":\"incorrect api key auth\"}       \r\n```  add `x-nullable: true`\n  content negotiation based on Accept header and content type is done through the consumes/produces bits in a swagger spec. In go-swagger you have to hook up the consumers and producers. \r\nI've added your spec from #747 as example\r\n\r\nhttps://github.com/go-swagger/go-swagger/tree/master/examples/authentication  Thanks for this, many people will be thankful for this!\n hi would it be possible to join the slack channel? https://slackin.goswagger.io/\r\n\r\nI have another person in there who wants to work on enums, so it'd be good to coordinate efforts a little could you rebase this on master?  duplicate of #541, closing this one.  I think this is fixed on master now, please close when confirmed in your operation\r\n\r\n```\r\n// responses:\r\n//   200: body:someModel and the rest is description\r\n```  make it a pointer by adding `x-nullable: true`\n  I can reproduce the error you see in your spec, just haven't found the cause for it yet.\nGolang never orders map keys the same way twice so that makes it so that that very sometimes it succeeds but more often than that it fails.\n  I'd certainly accept a PR. You can perhaps build on the config file that was introduced for defining language support.\nI think you'd have to define a map entry for the formats and a snippet for registering that format in strfmts. So all in all shouldn't be too difficult to make work.\n\nThe int64 there is a reason for that, because int is platform dependent. And some languages have a different default. So making a contract for your API that leaves ambiguity might not be ideal for a public API. But I do think you can use a similar approach here, although a builtin like this might be harder to implement.\n  For this generation to compile you need to have some packages in your GOPATH:\n- github.com/go-openapi/runtime\n- github.com/tylerb/graceful\n- github.com/jessevdk/go-flags\n- golang.org/x/net/context\n\nSo that boils down to you have to vendor those packages and you should be good. the go-swagger repo contains all the CLI stuff for the generators, but that's more like build tool not something you'd depend on in code.\n I use this yaml in my projects for the go-swagger stuff.\r\n\r\nYou're not meant to vendor go-swagger directly, there is a much smaller runtime package. In glide I have to list out its dependencies.\r\n\r\n```yaml\r\npackage: github.com/casualjim/private\r\nimport:\r\n- package: github.com/go-openapi/errors\r\n- package: github.com/go-openapi/loads\r\n- package: github.com/go-openapi/runtime\r\n  subpackages:\r\n  - client\r\n  - flagext\r\n  - middleware\r\n- package: github.com/go-openapi/spec\r\n- package: github.com/go-openapi/strfmt\r\n- package: github.com/go-openapi/swag\r\n- package: github.com/go-openapi/validate\r\n- package: github.com/tylerb/graceful\r\n  version: ^1.2.15\r\n- package: golang.org/x/net\r\n  subpackages:\r\n  - context\r\n- package: github.com/mailru/easyjson\r\n  version: master\r\n  subpackages:\r\n  - buffer\r\n  - jlexer\r\n  - jwriter\r\n``` Your comments make me think you're starting out in golang, if that's not the case and you are fully aware of the path you're walking down I apologize.\r\n\r\nThe best piece of advice I can give you to get going with go is:\r\n\r\n**Do not fight the gopath, only misery lies there** should you still want to do the project thing then look at the gb tool\r\nBy not playing along with the gopath you will lose the ability (have to solve how) to publish libraries that can be fetched with `go get`\r\n\r\nSecond piece of advice:\r\n\r\nDo not fight gofmt, we all use it nobody likes tabs but it's consistent for everybody that way  at this moment it's just broken. Personally I'm strapped for time to make this work at this very moment, I'm hoping to spend some time on this during the week of christmas to fix it.\r\nBut if somebody wants to fix this sooner then I'd gladly merge That is indeed the default behavior, but you can replace the loader function in your own program.\r\n\r\nhttps://github.com/go-openapi/spec/blob/master/expander.go#L183\r\n\r\nIf you load your spec with the loads package this should be done for you:\r\n\r\nhttps://github.com/go-openapi/loads/blob/master/spec.go#L54\r\n\r\nif that isn't the case then you may need to enlist yaml as a recognized format:\r\n\r\nhttps://github.com/go-swagger/go-swagger/blob/master/cmd/swagger/swagger.go#L27-L29 can you try to build from master and see if that fixes your issue?  on master there is also a new command called flatten, does it still occur after flattening the spec? I really want to see your entire spec or equivalent repro.\r\nI suspect there might still be an issue in the spec somewhere and if not it's something that needs to be added to the tests so that it can remain solved.\r\n You're being hit by 2 different bugs.\r\n\r\n* when you don't flatten, the generator seems to not resolve the external file in generation.\r\n* when you flatten, then the properties get a new casing for some reason, making the ref indeed invalid because it points to `#definitions/LatLng` instead of `#definitions/latLng`\r\n\r\nI think the second bug is easier to solve than the first one I think this might work. I think only x-go-name was implemented in the bug you mentioned.\r\n\r\n```yaml\r\nswagger: '2.0'\r\ninfo:\r\n  title: Test\r\n  version: \"1\"\r\nhost: test.com\r\nbasePath: /\r\nproduces:\r\n  - application/json\r\nschemes:\r\n  - http\r\npaths:\r\n  /a/b:\r\n    get:\r\n      operationId: get_ab\r\n      parameters:\r\n        - name: pilot_area_only\r\n          in: query\r\n          type: boolean\r\n          default: false\r\n      responses:\r\n        200:\r\n          description: Test\r\n          headers:\r\n            Access-Control-Allow-Origin:\r\n              type: string\r\n              default: '*'\r\n          schema:\r\n            type: object\r\n            properties:\r\n              results:\r\n                $ref: '#/definitions/LocalDefs'\r\n        default:\r\n          description: Unexpected error\r\n          schema:\r\n            $ref: '#/definitions/Error'\r\ndefinitions:\r\n  LatLng:\r\n    type: object\r\n    x-go-type:\r\n      import:\r\n        package: \"github.com/user/package\"\r\n        alias: \"base\"\r\n      type: \"LatLng\"\r\n  LatLngLine:\r\n    type: object\r\n    x-go-type:\r\n      import:\r\n        package: \"github.com/user/package\"\r\n        alias: \"base\"\r\n      type: \"LatLngLine\"\r\n  LocalDef:\r\n    type: object\r\n    properties:\r\n      position:\r\n        $ref: './base.yaml#/definitions/LatLng'\r\n      extent:\r\n        $ref: './base.yaml#/definitions/LatLngLine'\r\n  LocalDefs:\r\n    type: array\r\n    items:\r\n      $ref: '#/definitions/LocalDef'\r\n  Error:\r\n    type: object\r\n    properties:\r\n      code:\r\n        type: integer\r\n        format: int32\r\n      message:\r\n        type: string\r\n````\r\n  duplicate of #748   ## Problem statement\r\n\r\nSometimes it's useful to have more context than just the header value or query param value in an authenticator. They could take an extra context parameter.\r\n scopes is supported through bearer auth  This was fixed in d659fb1246322b1f42456dec2810ca60d90d84a1  You don't actually need httptest to test the handlers. \nA handler is essentially a function of parameters to result.\nThe result knows how to write itself to a http.ResponseWriter, and you already know that that part works.\nSo to test a handler what you require is to test just your code.\n\nSo to test the AddOne operation from the todo list this, there are 2 functions involved in the implementation.\n\nThe first function uses the data from the request to actually write the todo item to a store, this can be tested separately.\n\n``` go\nfunc addItem(item *models.Item) error {\n    if item == nil {\n        return errors.New(500, \"item must be present\")\n    }\n\n    itemsLock.Lock()\n    defer itemsLock.Unlock()\n\n    newID := newItemID()\n    item.ID = newID\n    items[newID] = item\n\n    return nil\n}\n```\n\nThen there is the actual handler:\n\n``` go\ntodos.AddOneHandlerFunc(func(params todos.AddOneParams) middleware.Responder {\n  if err := addItem(params.Body); err != nil {\n    return todos.NewAddOneDefault(500).WithPayload(&models.Error{Code: 500, Message: swag.String(err.Error())})\n  }\n  return todos.NewAddOneCreated().WithPayload(params.Body)\n})\n```\n\nTo test this second function we don't need to use the httptest package, you can assume that that part of the code works. So all you have to test is whether or not you get the right return types for a given set of parameters.\n\nDo you think this is sufficient?\n  this should be fixed on master, I got a PR this week which fixes exactly this\n  looks like you may need to re-run: go generate ./generator :)\n\nhttps://ci.appveyor.com/project/casualjim/go-swagger/build/0.1.785-gjwxobfn#L122\n  We currently don't have reverse routing, I think it would be a great addition to the runtime package.\n\nYou can define the response though:\n\n``` yaml\n        '201':\n          description: Created Pet\n          Location:\n            description: uri of the new pet\n            type: string\n            format: uri\n```\n you're right that's the correct syntax.\nI don't know if replacing the router would give you the reverse semantics. It might be just as easy to teach our router about reverse routing. How do you think it would be exposed to the end user?\nWhat is the code you'd like to write to get a reverse route? Something like `pet.PetURI(id)` ?\n\nTo implement a router that's usable for go-swaggers runtime you'd need to expose the following interface:\nhttps://github.com/go-openapi/runtime/blob/master/middleware/router.go#L118-L121\n  duplicate of: #331\nduplicate of: #358\n  this is on code that's not annotated right?\n and you want an initial spec to get you going, if so try `swagger init --help`\n do you have a repo where I can reproduce this with?\nI think it is because the package where you have that info is not referenced from a path used from the tree starting at main\n  This is because a property name of n in yaml turns into a boolean. \n\nWhen I use the yaml from the issue I get:\n\n``` go\nmap[interface {}]interface {}{\n    \"definitions\": map[interface {}]interface {}{\n        \"key\": map[interface {}]interface {}{\n            \"description\": \"key content\",\n            \"properties\":  map[interface {}]interface {}{\n                \"kty\": map[interface {}]interface {}{\n                    \"description\": \"type\",\n                    \"type\":        \"string\",\n                },\n                \"e\": map[interface {}]interface {}{\n                    \"description\": \"key\",\n                    \"type\":        \"string\",\n                },\n                \"use\": map[interface {}]interface {}{\n                    \"description\": \"sign\",\n                    \"type\":        \"string\",\n                },\n                \"alg\": map[interface {}]interface {}{\n                    \"description\": \"algorithm\",\n                    \"type\":        \"string\",\n                },\n                false: map[interface {}]interface {}{\n                    \"description\": \"key\",\n                    \"type\":        \"string\",\n                },\n            },\n        },\n    },\n}\n```\n\nBut when I quote the n property like the yaml below\n\n``` yaml\ndefinitions: \n  key:\n    description: key content\n    properties:\n      kty:\n        description: type\n        type: string\n      e:\n        description: key\n        type: string\n      use:\n        description: sign\n        type: string\n      alg:\n        description: algorithm\n        type: string\n      'n':\n        description: key\n        type: string\n```\n\nI get: \n\n``` go\nmap[interface {}]interface {}{\n    \"definitions\": map[interface {}]interface {}{\n        \"key\": map[interface {}]interface {}{\n            \"properties\": map[interface {}]interface {}{\n                \"kty\": map[interface {}]interface {}{\n                    \"description\": \"type\",\n                    \"type\":        \"string\",\n                },\n                \"e\": map[interface {}]interface {}{\n                    \"description\": \"key\",\n                    \"type\":        \"string\",\n                },\n                \"use\": map[interface {}]interface {}{\n                    \"description\": \"sign\",\n                    \"type\":        \"string\",\n                },\n                \"alg\": map[interface {}]interface {}{\n                    \"type\":        \"string\",\n                    \"description\": \"algorithm\",\n                },\n                \"n\": map[interface {}]interface {}{\n                    \"description\": \"key\",\n                    \"type\":        \"string\",\n                },\n            },\n            \"description\": \"key content\",\n        },\n    },\n}\n```\n  related: #402\n  thanks a lot :100: \n  thanks again! Do you know of https://slackin.goswagger.io\n  Thanks a lot :+1: \n  which go-swagger version are you using?\n  thanks!\n  I think I've updated this now\n ``` shellsesion\n docker run --rm -it golang:1.6 bash\nUnable to find image 'golang:1.6' locally\n1.6: Pulling from library/golang\n6a5a5368e0c2: Already exists \n7b9457ec39de: Already exists \nff18e19c2db4: Already exists \n00075397a1ec: Already exists \n3f856402c0c1: Pull complete \n499e61be84fe: Pull complete \na748c7fcbcd2: Pull complete \nDigest: sha256:014080d359f01e28de6b102ba5053e698c870bf74fcbcb5d41602b72869b017c\nStatus: Downloaded newer image for golang:1.6\nroot@a05bf7962919:/go# go get -u github.com/go-swagger/go-swagger/cmd/swagger\nroot@a05bf7962919:/go# swagger version\n0.5.0-186-gc2c8deb\n```\n Thanks for catching this, updated the master branch with a backwards compatible context\n  you can use `swagger generate model` for the definitions and `swagger generate operation --skip-handler` for the other inlined schemas.\nNow you'd be the first one that I know of to be using that flag, so thanks for the validation :)  We may have to make a few small changes to make this work properly though (a few more superficial if guards)\n  This is by design, this might have been a mistake though.\nThe mapping happens here: https://github.com/go-swagger/go-swagger/blob/master/generator/types.go#L143\n\nA good way to enable just int is perhaps through providing a flag, because people get upset when we make breaking changes like this.\n  this is great, the only reason I didn't do it before is because I wanted to remain compatible with the previous version of go as well. But now the last 2 versions of go accept the formatting, so I'm all for it.\n\nHowever you will have to run `go generate ./generator` for your changes to make into the binary\n  sorry slipped my mind, was waiting for the build to finish and then got sidetracked\n  if you add the necessary interface methods to go-openapi/strfmt they should work together\n we'd have to add GetBSON and SetBSON interface methods the the strfmt package objects and they will all be compatible with mgo\n feel free to submit a PR to go-openapi/strfmt\nThis is how we did it for the sql driver package too\n\nFeel free to ask for help with creating a fork/pull request if you've never done that. We have a slack team https://slackin.goswagger.io where you can ask for help, or just continue to comment here\n\nhttps://github.com/go-openapi/strfmt/blob/master/time.go#L114\nhttps://github.com/go-openapi/strfmt/blob/master/time.go#L133\n\nand this is a thing I had in an older repo to deal with mongo timestamps, so hopefully you can work it out from there.\n\n``` go\npackage models\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"strconv\"\n    \"time\"\n\n    \"gopkg.in/mgo.v2/bson\"\n)\n\n// Timestamp is a time but it serializes to ISO8601 format with millis\ntype Timestamp struct {\n    time.Time\n}\n\n// ISO8601 format to millis instead of to nanos\nconst RFC3339Millis = \"2006-01-02T15:04:05.000Z07:00\"\n\nfunc (t Timestamp) String() string {\n    return t.Format(RFC3339Millis)\n}\n\n// ParseTimestamp parses a string that represents an ISO8601 time or a unix epoch\nfunc ParseTimestamp(data string) (Timestamp, error) {\n    d := time.Now().UTC()\n    if data != \"now\" {\n        // fmt.Println(\"we should try to parse\")\n        dd, err := time.Parse(RFC3339Millis, data)\n        if err != nil {\n            dd, err = time.Parse(time.RFC3339, data)\n            if err != nil {\n                dd, err = time.Parse(time.RFC3339Nano, data)\n                if err != nil {\n                    if data == \"\" {\n                        data = \"0\"\n                    }\n                    t, err := strconv.ParseInt(data, 10, 64)\n                    if err != nil {\n                        return Timestamp{}, err\n                    }\n                    dd = time.Unix(0, t*int64(time.Millisecond))\n                }\n            }\n        }\n        d = dd\n    }\n    return Timestamp{Time: d.UTC()}, nil\n}\n\n// GetBSON customizes the bson serialization for this type\nfunc (t Timestamp) GetBSON() (interface{}, error) {\n    return t.Time, nil\n}\n\n// SetBSON customizes the bson serialization for this type\nfunc (t *Timestamp) SetBSON(raw bson.Raw) error {\n    var ts interface{}\n    if err := raw.Unmarshal(&ts); err != nil {\n        return err\n    }\n    switch ts.(type) {\n    case time.Time:\n        *t = Timestamp{Time: ts.(time.Time).UTC()}\n        return nil\n    case string:\n        tss := ts.(string)\n        tt, err := ParseTimestamp(tss)\n        if err != nil {\n            return err\n        }\n        *t = tt\n        return nil\n    case int64:\n        *t = Timestamp{time.Unix(0, ts.(int64)*int64(time.Millisecond)).UTC()}\n        return nil\n    case float64:\n        *t = Timestamp{time.Unix(0, int64(ts.(float64))*int64(time.Millisecond)).UTC()}\n        return nil\n    }\n\n    return fmt.Errorf(\"couldn't convert bson data (%T) %s to a Timestamp\", ts, ts)\n}\n\n// MarshalText implements the text marshaller interface\nfunc (t Timestamp) MarshalText() ([]byte, error) {\n    return []byte(t.String()), nil\n}\n\n// UnmarshalText reads this timestamp from a string value\nfunc (t *Timestamp) UnmarshalText(data []byte) error {\n    var value interface{}\n    json.Unmarshal(data, &value)\n\n    switch value.(type) {\n    case string:\n        v := value.(string)\n        if v == \"\" {\n            return nil\n        }\n        d, err := ParseTimestamp(v)\n        if err != nil {\n            return err\n        }\n        *t = d\n    case float64:\n        *t = Timestamp{time.Unix(0, int64(value.(float64))*int64(time.Millisecond)).UTC()}\n    default:\n        return fmt.Errorf(\"couldn't convert json from (%T) %s to a time.Time\", value, data)\n    }\n    return nil\n}\n\n// UnmarshalJSON implements the json unmarshaller interface\nfunc (t *Timestamp) UnmarshalJSON(data []byte) error {\n    var value interface{}\n    json.Unmarshal(data, &value)\n\n    switch value.(type) {\n    case string:\n        v := value.(string)\n        if v == \"\" {\n            return nil\n        }\n        d, err := ParseTimestamp(v)\n        if err != nil {\n            return err\n        }\n        *t = d\n    case float64:\n        *t = Timestamp{time.Unix(0, int64(value.(float64))*int64(time.Millisecond)).UTC()}\n    default:\n        return fmt.Errorf(\"Couldn't convert json from (%T) %s to a time.Time\", value, data)\n    }\n    return nil\n}\n```\n there is an unmarshal on raw, how come you're not using that?\n  swagger:params is used to indicate which operations the properties of the operation are included in the struct.\n\nSo you'd use something like these:\n\nhttps://github.com/go-swagger/go-swagger/blob/master/fixtures/goparsing/petstore/rest/handlers/orders.go#L24-L46\n\nor \n\n``` go\n// swagger:params listOneService \ntype ListOneParams struct {\n\n  // ServiceName description goes here\n  // \n  // in: path\n  // required: true\n  ServiceName string `json:\"serviceName\"`\n\n  // Version description goes here\n  //\n  // in: path\n  // required: true\n  Version string `json:\"version\"`\n}\n```\n @tonyghita  I don't think there is a param:\"paramName\" atm. I chose to piggyback on the json tag because swagger typically does json requests.\n  these templates are using strfmt.Sprintf, they should use net.JoinHostPort instead and then the ipv6 address will be properly escaped too.\nThis is in addition to your fix\n  there is an issue with escaping the backticks ` in the long description, which makes the file not compile. Because of that the imports aren't being cleaned up by goimports.\n  can you share a spec and the error message?\n  yeah for examples the code is checked in so people can browse it. It's been hugely useful in helping people find their way. \nYou can add your example to the regenerate script too: https://github.com/go-swagger/go-swagger/blob/master/hack/regen-samples.sh\n Thanks a lot! more examples are really helpful \ud83d\udcaf \n  it's not reachable from within the handler anywhere atm. I'm curious about what use case this would enable?\n ah ok this is possible in 2 ways.\n\nThe first way is by using an authenticator, the second way is making a middleware (not global)\n\n#### Authenticator\n\n``` go\n// Authenticator represents an authentication strategy\n// implementations of Authenticator know how to authenticate the\n// request data and translate that into a valid principal object or an error\ntype Authenticator interface {\n    Authenticate(interface{}) (bool, interface{}, error)\n}\n```\n\nThe schemes currently supported you can see here: https://github.com/go-openapi/runtime/tree/master/security\n\n#### Middleware\n\n``` go\n// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.\n// The middleware executes after routing but before authentication, binding and validation\nfunc setupMiddlewares(handler http.Handler) http.Handler {\n    return handler\n}\n```\n\nto get to the matched route in one of those you can\n\n``` go\nimport \"github.com/gorilla/context\"\ncontext.Get(3, request)\n```\n\nThat gets you a matched route. \n\nAlso it might be worth it to expose Context as an exported method on the api builder, that would be a simple PR to add the following code to go-swagger\n\n``` go\nfunc (o *LifecycleManagerAPI) Context() *middleware.Context {\n    if o.context == nil {\n        o.context = middleware.NewRoutableContext(o.spec, o, nil)\n    }\n    return o.context\n}\n```\n\nthen your middlware could take a context in and use `RouteInfo(request)` like this one: https://github.com/go-openapi/runtime/blob/master/middleware/security.go\n Look at this one: https://github.com/go-openapi/kvstore You mean a different context than the one available on `params.HTTPRequest.Context()` ?\r\nMore like an application level context?  Thanks!\n  at which stage?\n or how are you using go-swagger :)\n you could use a spec that gets merged in during the generation process, but other than that it would require changes to the scan package\n\nA syntax has to be created and then added to the parsers here: https://github.com/go-swagger/go-swagger/blob/master/scan/routes.go#L199\n Not easy it would involve making the strategy for setting responses on a route configurable\n\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/routes.go#L193\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L568-L595\n  did you do a `go get -u github.com/go-openapi/runtime` ? \n the latest version of swagger tells you which dependencies you have to vendor.\nBut can you share your spec so I can try it in a docker container. The error message is a bit vague like this and that makes it hard to troubleshoot\n @kyteague is this still an issue for you?\nFrom version 0.7.0 we print the dependencies you require \n I was able to reproduce that with glide, gvt otoh does everything as I expect\r\n\r\nrelated: #818  http://goswagger.io/use/middleware.html#byo-middleware\nhttps://github.com/go-swagger/go-swagger/issues/481#issuecomment-224503845\n\nhttps://github.com/rs/cors\n  II would like to know what the spec looks like, because when an operation has auth requirements defined it should get a second argument for those operations.\n  The reason for the change is that a zero value for a required property is a valid value.\nSo for a string \"\" is valid but nil or absence of the key isn't.\n\nYou can change your spec and add `x-nullable: false` \n I added the entry about the breaking change to the release notes too. Thanks for that.\n You can make use of this: https://github.com/go-openapi/swag/blob/master/convert_types.go\nTo make the referencing/dereferencing easier\n  I will make a 0.6.1 release with a new feature, and that should also fix the version then\n this is fixed in 0.7.x \n  I think the solution is not to add type info on the property, but go swagger should follow aliased types when they are params and get to the one they actually represent.\n  https://github.com/go-swagger/go-swagger/releases/tag/0.6.0\n  thanks!\n  can you change your type definitions?\n\n``` json\n  {\"description\":\n     \"The date and time that the device was registered.\",\n     \"type\":\"string\",\n     \"format\": \"date-time\"\n}},\n```\n\njson schema and swagger define ISO8601 dates as a known format, that will fix your validation \n  Thanks! :+1: \n  ![LGTM](http://lgtm.in/p/mhdcwPrZp)\n  feel free to send a PR for this\n  do you need go < 1.6?\n\nI'm asking because it has implications for the templates of which I have many complicated ones\n  even when it uses a logging library, there would still need to be if guards or lazy evaluation of arguments to get any real benefit from it.\nThe one immediate benefit I see would be colors for levels\n   no further discussion yet, but the changes won't be lost. Their intent will be brought back but in a less breaking fashion.\nSome signatures changed without there being a real reason for the change and the args also changed too much for their intended use.\n\nSo I think the intent is we don't want the spec to decide between https, http or unix sockets. We want that to be decision that is made when we start the process of the server. Would you agree that that is the change you want preserved?  \n  another failure related to this one:\n\n``` yaml\n/workspace/metadata:\n    get:\n      parameters:\n        - name: \"workspace_id\"\n          in: \"query\"\n          required: true\n          minItems: 1\n          type: \"array\"\n          items:\n            type: \"string\"\n            format: \"uuid\"\n```\n  are you vendoring your dependencies by any chance?\n\nI think this is caused by a PR that got merged this morning. So if you're vendoring, i want to ask if you can go back to go-openapi/analysis#9f487a0bf7e69478955d3a8bd1642d1a1edddcc4 \nThat is prior to the change in signature being merged.\n I fixed it on master of that library now too, so you don't strictly need to vendor anymore\n  maximum is a validation for numbers. If you want to specify a max length for a string you should use maxLength as validation instead.\nSee here for more info: http://json-schema.org/latest/json-schema-validation.html#anchor26\n  maximum is a validation for numbers. If you want to specify a max length for a string you should use maxLength as validation instead.\nSee here for more info: http://json-schema.org/latest/json-schema-validation.html#anchor26 \n  @cyriel this is new functionality on master that would lift that restriction for responses where only the body matters.\nThe problem is now that the newly added annotation doesn't actually add the models it discovers to the bag that needs to end up in the definitions of the spec\n  I'll look at making the tests pass tomorrow\n It's not quite this fix, but I think the changes in the branch scan-package fix the same thing.\n@gaplyk does that branch fix your issue?\n\n@bfirsh I'm getting a docker build env together because you mention ignoring unkown type in a linked issue. I still want to repro\n does this mean that the scan-package branch didn't fix your immediate issue?\n for your repo I get output that looks correct now.\n\ncommand:\n\n``` bash\nswagger generate spec -o issue.json --scan-models\n```\n\noutput: \n\n``` json\n{\n  \"swagger\": \"2.0\",\n  \"paths\": {},\n  \"definitions\": {\n    \"Error\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"Code\": {\n          \"type\": \"string\"\n        }\n      },\n      \"x-go-package\": \"github.com/gaplyk/go-swagger-issue/errors\"\n    },\n    \"ErrorResponse\": {\n      \"x-go-package\": \"github.com/gaplyk/go-swagger-issue/errors\",\n      \"$ref\": \"#/definitions/Error\"\n    }\n  },\n  \"responses\": {\n    \"ErrorResponse\": {}\n  }\n}\n```\n  :+1:  thanks for doing this :)\n\n[![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/go-swagger/go-swagger/pull-request/621/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=go-swagger/go-swagger)\n  no type of type: object is the same you can annotate the other structs you want to use as payload with swagger:model and run generate spec with the --include-models flag.\r\nThat will add structs annotated with swagger:model to the definitions.\r\n\r\nwhich validator says the swagger spec is invalid if the type field is unavailable.\r\n\r\nI don't remember type being required in json schema, it should default to type: object\r\nthis is a bug though in the scan package where it doesn't add the type annotation, which needs to be fixed. there is no polymorphism here right? There are no type relationships or even embedded structs\r\n\r\nYou can compose structs like this: https://goswagger.io/generate/spec/allOf.html\r\nor inheritance like this: https://goswagger.io/generate/spec/discriminated.html Then polymorphism in an API doesn't really make sense. Data is never polymorphic, it is just a structure.\r\n\r\nYour wireformat doesn't care and your API should be agnostic to its clients. is-a relationships are a business rule (implementation detail) they are not part of a contract (like an API is).  lgtm, thanks!\n\n[![Approved with PullApprove](https://img.shields.io/badge/pullapprove-approved-brightgreen.svg)](https://pullapprove.com/go-swagger/go-swagger/pull-request/617/?utm_source=github-pr&utm_medium=comment-badge&utm_campaign=go-swagger/go-swagger)\n  pretty close you can get to it with something like:\n\n``` go\ncasted, ok := err.(*operations.GetDeployDefault)\n```\n\nBecause it's a struct type it will be a pointer.\n  I think in this case the transitive import usage is missing a case. So to answer your question: you shouldn't have to copy it, merely using a type should get it included.\n swagger:model exists to rename your to a different name. But unless you run `generate spec --include-models` they are only discovered through following types and their usage in structs.\n\nBy missing a case I mean that I have several of these types of switch statements\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/schema.go#L242\n\nIn this case I think I'm missing an ast.StarExpr somewhere \n  Are the sources for what you're trying to run the generate spec against available? \nI'd like to take a look at the project and be able to reproduce the issue\n I won't be able to dig into this today, but I will for sure over the weekend. \n I have an error about github.com/notary/tuf/store when I get the source of that I don't have the store package.\nIs there a particular branch I should be looking at?\n is the `shell` command an alias that does something more intelligent and makes use of the docker mount?\n\nTo help pinpointing issues I've added a log statement that prints all the packages that are being considered.\nif you run swagger with DEBUG=1 as env var you should see a the list of packages that was scanned. I'm sure there are lots of gaps in the debug information but I guess it's a start.\n I was able to generate a swagger spec in a docker shell with the code that is currently on scan-package branch. You'll see lots of output because the ./make.sh swagger bit has an export DEBUG=1 \n  this is fixed now  openapi 3 will support HATEOAS style links. \n A url builder was added in the 0.7.x series, I think that addresses this request  you can provide your own templates for go-swagger; the client and server generators allow you to specify a directory on disk to add custom templates\n\nThere are some docs here: http://goswagger.io/generate/templates/\n\nIn VIC they do this: https://github.com/vmware/vic/tree/master/lib/apiservers/templates\nhttps://github.com/vmware/vic/blob/master/Makefile#L274-L281\n\nYou can override these templates by using the same names\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/templates.go#L61-L73\n yeah you're right it would generate a similar structure.\nFeel free to make the necessary changes for your case to work and submitting a PR.\n\nIf I understand correctly you're not happy with how the operations/parameters/responses are structured and want to replace all of it? Do you have an example of how the structure would look?\n wouldn't it be easier to add a new  flag for a config file to customize the generation and the folder layout?\n I divide the code in 4 types of generation based on the type passed to the templates as context.\nThen I allow for a template to be used to specify the path with a filter for joining path parts together so that an empty path part has no effect.\n\nThe file name also gets a template so that you can customize the name of the generated file\nThe template name has a convention that when it starts with asset:[key] it will be looked up from the embedded templates in the swagger binary, otherwise it will look for that template on disk based on the path you specified.\n\nThat config should be in an ordered list so that the generation order is deterministic, then instead of hardcoding the generation of each known template it will now use that config and iterate over those configurations to generate the files with context.\n\nAs a bonus you'd be able to generate other languages as well from the same object model.\n I refactored the codegeneration to the model I described in the previous comment.\nhttps://github.com/go-swagger/go-swagger/tree/gen-layout-configfile\n\nit still needs the config file bit but the machinery for it has been refactored so it can be driven by a config file. The next thing that would need to be implemented is using viper or something to read a config.\n I've added some docs on the config file format here: https://github.com/go-swagger/go-swagger/blob/gen-layout-configfile/docs/use/template_layout.md\n\nPlease let me know if this works for you, then I'll move it to master and release a 0.6.1\n you can pass it your own set of templates and see if it meets your needs. I'm unlikely to be able to spend time on this for the next 10 days so there is no rush :).\n I found that it wasn't actually using the config when you provided one with -C. I fixed it now and i've updated the doc page.\n  swagger doesn't deal with http, it deals with the contracts on top of them and considers http the transport but it's just an implementation detail to the contract.\n\nBefore I answer the question about the status code, can you please share  a spec with at least one representative operation defined.\n\nthe default response structure captures the status code but if you have other responses you'll get a type, which in turn implies the status code. eg. OKResponse implies 200 no need to carry that around the type already means 200 OK.\n\nlike this one is a response struct for a 200 status code in the spec: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/todos/find_responses.go#L51\n\nThen this one is the default response: https://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/todos/find_responses.go#L80\n\nBecause it's not specified with a status code you have a Code() accessor on that instance which gives you the status code\n 1. PostClientsOK is the success case, typically there is only 1 response that means success. So we generate a method that in case of a 2xx response we return that type.\n2. The`Error() string` method makes it so that non 2xx responses (error responses), implement the golang error interface. So when a request isn't successful (non-2xx) then you get an error instead of a success case. Because certain responses are typed you can use a type switch to determine what happened \n  have you tried using `swagger generate spec --scan-models`\r\n```\r\n \u00bb swagger generate spec --help\r\nUsage:\r\n  swagger [OPTIONS] generate spec [spec-OPTIONS]\r\n\r\ngenerate a swagger spec document from a go application\r\n\r\nHelp Options:\r\n  -h, --help             Show this help message\r\n\r\n[spec command options]\r\n      -b, --base-path=   the base path to use (default: .)\r\n      -m, --scan-models  includes models that were annotated with 'swagger:model'\r\n          --compact      when present, doesn't prettify the the json\r\n      -o, --output=      the file to write to\r\n      -i, --input=       the file to use as input\r\n```  to work around this issue you can use\n\n```\nnpm install -g swagger-tools\nswagger-tools validate spec.json\n```\n The rendering step and validation step are separate operations. It's left up to the user to run validate when it is appropriate to them.\nSimilarly requiring a spec to be valid for rendering can be annoying during development. \n\nHowever perhaps a flag --no-validate could satisfy both use cases. \n there were a number of validation issues in this spec. readOnly, and minLength are misspelled. And the $ref property of the default spec.\n\n``` yaml\nconsumes:\n- application/json\ndefinitions: \n  portmap:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n        readOnly: true\n      source:\n        type: string\n        minLength: 1\n      destination:\n        type: string\n      starttimestamp:\n        type: string\n        format: date-time\n      lastupdated:\n        type: string\n        format: date-time\n      done:\n        type: boolean\n        default: false\n  error:\n    type: object\n    required:\n      - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type: string\ninfo:\n  description: Nimbus proxy bridge port-foward nimbus serious log receiver\n  title: ProxyBridge Server\n  version: \"0.1\"\npaths: \n  /portmap:\n    post:\n      tags:\n        - portmap\n      responses:\n        201:\n          description: Created\n          schema:\n            $ref: \"#/definitions/portmap\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\n    get:\n      tags:\n        - portmap\n      responses:\n        200:\n          description: list of portmaps\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/portmap\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\nproduces:\n- application/json\nschemes:\n- http\nswagger: \"2.0\"\n\n\n```\n  You can try with:\n\n``` json\n\"200\": {\n  \"description\": \"get client\",\n  \"schema\": {\n    \"items\": {\n      \"$ref\": \"#/definitions/client\"\n  }\n}\n```\n\nThe ref ensures that the same type is reused instead of generating a new one because of the anonymous definition.\n  Duplicates #590, which has been closed.  Duplicate of #590   if you vendor or do `go get -u github.com/go-openapi/runtime` then issues #591, #592 and this one will go away\n We rely on the goimports command to gather and optimize the imports.\nSo if you have the vendoring done, you may have to regenerate but the imports should be found\n if this is not the case can you post the spec that fails?\n that's true, so do you have a suggestion how to remove that requirement? perhaps add a flag to call the vendoring command of choice? \nI use gvt, other people use gb, yet other ones use glide or govendor and so on.\n\nThere are other options too, looking forward to get some suggestions though?\nOr should it first scan the path and fail if the necessary dependencies aren't there? Or ...\n  this would make it so that you can't upgrade the CLI anymore, or get the executable when you run go get. \n  i would call it scheme and i prefer the --force-scheme over the --http so that we can add transports like grpc, amqp etc\n  what does the spec look like? are the consumes and produces filled out?\n  fixed by: 2b0c1cf25561300f738733bee51948f2a191712a\n  this looks great :)\n\nI updated the build on master to only use 1.6 I think that might help with the way you've written the templates.\n are you done with this?\n  this todo list looks OK, you don't need to move to pre 1.6 template support.Dropping support for building on 1.5 is fine. \nI only want to do current + 1 prior. In august there is 1.7 so I don't see a pressing need to end up with messier templates :)\n Nobody has had time to drive this to completion yet. So the unchecked boxes still need to get resolved.  this is a tricky one because json only does floats and the spec structs are modeled as float64 which makes it to into a lossy scientific notation. This should use a json.Number construct but that is going to break other things. \nhttps://github.com/go-openapi/spec/blob/master/schema.go#L586-L588\n\ngreat catch though\n not a priority to fix to me. people can use `format: uint64` where we're not bound by json's limitations on size Since swagger validate inspects these values, I think an error or warning should be provided at the spec valdiation stage. @todo: need testing to figure out if it is not already the case.  my guess is that you have them on your file system now, before you hadn't.\nWe use goimports to optimize and discover imports following a file generation step.\n if you can do a go get -u github.com/go-openapi/runtime you should get the swag package too, afterwards it should just work \n does this image fix your issue? quay.io/goswagger/swagger:gen-layout-configfile\n  I went with the fie suffix for now, the packages require a bit more work\n  lgtm thanks!\n  lgtm\n  lgtm\n  closes #568 \n  yeah just add a file that uses it and see if the correct properties are set on the swagger schema.\n I merged the other one so this one needs updating :)\n lgtm thanks!\n  fixed by the PR\n  would it be possible to provide a test case analogous to the other tests for these new or redefined types?\n :shipit: \n  Models are discovered through usage in parameter and/or response objects. If the model isn't used through a parameter or response object it's not part of the API because there is no way that it goes in or out through the API.\n I'll reopen but label as question. If you ran into this more people will run into it.\n  I've started answering here several times. But I keep getting stuck. would it be possible for you to join the slack team?  \nI want to do the right thing for both go and swagger but typing and convenience for swagger trumps the go type system. \n\nFor example I see that error is an interface but I know how to represent error as a string, always.\nSo I went with the type string instead of type object. I wonder how that can be done for when error actually implements a the json marshaller/unmarshaller pair because then it would become an object.\n slack team: https://slackin.goswagger.io/\n\nguregu comes up once in awhile. So it would probably be a good idea to come up some kind of extension mechanism.\n\nSome things that come to mind immediately are:\n- look for interface methods that returns a swagger schema/parameter/header definition\n- look for a well-known dictionary in the local package that a name like oaiSchemaMap\n- look for a new annotation in the comments that has the json representation of the swagger definition so we can just merge it in\n fixed by linked pr\n we extend the behavior of the spec here, in the cases of an unknown format it will fall back to either integer or number.\r\nBut I doubt that that will be added to the spec because that spec is for many languages not just the golang\r\n\r\nSo long story short, it should work regardless of the format value but languages that support the types will hopefully make use of it The spec is the source of truth, that's guaranteed to be implemented because that's what makes it swagger compliant.\r\nSo this would be the canonical list: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types  There is the examples folder in the repo, all generated code also uses all the annotations that are applicable for it.\nhttps://github.com/go-swagger/go-swagger/tree/master/examples/todo-list\n\nThis is the code I used to test parsing the annotations: https://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/classification\n\nPlease bear in mind that this is a project (not a product!) to which others and I have contributed significant amounts of free time to get it to where it is today. All help we can get is absolutely welcome. \n\nTo make things better:\nThe site source is here, uses hugo. Feel free to submit a PR with some more examples; I'll gladly merge\n  if you make the items be not required on the tags form data property and you make their type be integer instead of string then the spec validates.\n\nhttps://swaggerhub.com/api/casualjim/todolistbug/0.1.0\n Thanks for finding this, i've updated the example\n  i'll cut a release tomorrow, in the mean time can you install from master.\nOnce installed from master you need to either vendor or get in the gopath: github.com/go-openapi/runtime\n  Can somebody confirm this fixes it? https://github.com/go-swagger/go-swagger/tree/550-always-generate-params\n  What is the go version you're using?\nthat release never got published though so perhaps in this case it's not too bad. \nHowever I want to find out what is causing this build failure and why none of my ci envs pick it up.\n i tagged a new release, I hope this makes it all work\n\nhttps://github.com/go-swagger/go-swagger/releases/tag/0.6.0\n Great! I'm doing a 0.7.0 soonish, one doc to write and then migrating the release build to circleci.\n  There is still an issue with it where it generates `models/hook_event.go:59: too many arguments to return`  \n\nyou can run ./hack/run-canary.sh to reproduce\n  Does the principal exist as a struct? is it described in the swagger specification?\n oic, yes this would be an issue\n  I don't quite understand the problem yet.The error message comes when you try to call the petstore api or when you try to load the swagger ui?\nYou're using the swagger ui docker container? \nDid you add a CORS middleware to your swagger server?\n https://github.com/rs/cors\nhttp://goswagger.io/use/middleware/\n duplicate of #481\n  dynamic API is definitely a working use case. \nUnfortunately I haven't been able to document its usage properly.\n\nHere's a petstore with the dynamic usage\n\nhttps://github.com/go-openapi/runtime/blob/master/internal/testing/simplepetstore/api.go\nhttps://github.com/go-openapi/runtime/blob/master/internal/testing/simplepetstore/api_test.go\n\nHere's an example of a petstore that uses structs as types:\n\nhttps://github.com/go-openapi/runtime/blob/master/internal/testing/petstore/api.go#L32-L68\n  is it possible that you have a stale go-swagger checkout on your system?\n\nDoes the following fix your issue?\n\n```\nrm -rf $GOPATH/src/github.com/go-swagger/go-swagger\ngo get -u github.com./go-swagger/go-swagger/cmd/swagger\n```\n you may still need to get\n\n```\ngvt fetch github.com/go-openapi/runtime/middleware\n```\n  no longer an issue\r\n\r\n```shellsession\r\ngit:(master) \u2717 ? \u00bb swagger validate ~/Downloads/refs-recursive-circular-ancestor-invalid.txt \r\nThe swagger spec at \"/home/ivan/Downloads/refs-recursive-circular-ancestor-invalid.txt\" is invalid against swagger specification 2.0. see errors :\r\n- definition \"Circular2\" has circular ancestry: [#/definitions/Circular1]\r\n```  no longer an issue in validation:\r\n\r\n```shellsession\r\n\u00b1 ivan@avalon:~/go/src/swagger-test  \r\n \u00bb swagger validate swagger.json \r\nThe swagger spec at \"swagger.json\" is invalid against swagger specification 2.0. see errors :\r\n- \"getPets\" is defined 4 times\r\n```  go-swagger doesn't know about a react pattern but it allows you to make a swagger spec that does I think\n  lgtm\n  lgtm, that one build failure is a appveyor fart\n  https://github.com/go-openapi/validate\n  fixed by #526 \n  I fixed this in the enum validation instead, you can just update `github.com/go-openapi/validate` and then you don't need to edit the template\n  lgtm\n  hi it fails this test: TestServer_MultipartForm\n\nsee log here: https://ci.vmware.run/go-swagger/go-swagger/628\n lgtm, thanks!\n  you can use `swagger generate models` for this\n  you could use, I know it's a bit counter intuitive:\n\ntype: string\nformat: binary\n\nbut I believe that will get you an io.Reader/io.Writer which in turn is a bit more appropriate.\nYou'd still need the responder you wrote though\n the body of the request is a reader that you're presumably going to write somewhere.\n\nThere is a fix I made for this but I put it in a wip branch, I'll put it on master this weekend. \nYou will still get a writer back though because presumably you want to save the files somewhere and don't want to hold the entire thing in memory. The generated code takes care of draining the response body reader with the writer\n I'll get you a sample after I've added the fix to master is that ok?\n not yet, but this weekend I'll have time to do it. Some rush work thing came in on friday morning that took me until sunday to do\n you pass in the writer for receiving the response body to the method on the client.\n\n``` go\nclient.GetSomethingWithAStream(new(some.Params), bytes.NewBuffer(nil))\n```\n\nyou have control over the writer, creating and closing is up to you, the generated client ensures bytes are written to it when they appear on the stream.\n  We use the regular go infrastructure to discover these items. I'm not sure what is required to support gb seamlessly. I wouldn't be opposed to a PR or more discussion here so that we know what needs to happen and an interesting party could pick it up easily.\n I think an easy solution to this could be to look if a vendor dir exists and if it has a src folder and then just manipulate the gopath in the swagger scan process\n and I think it can be done by manipulating this method: https://github.com/go-swagger/go-swagger/blob/master/scan/scanner.go#L165\n  lgtm\n  great find\n\ncan you run `go generate ./generator` and check in the bindata.go\n \ud83d\udc4d Thanks!\n  you can also comment on an approach discussed here #476\n  lgtm\n  lgtm\n We fixed this yesterday in the correct repo. you may have to do a `go get -u github.com/go-openapi/loads`\n  this fails the build. you can test this locally by running ./hack/run-canary.sh\n :shipit: \n  http://i.imgur.com/3DJIFSC.gifv\n  is it possible that you are using a released version and aren't tracking master? These issues existed but I thought they were fixed. I misinterpreted how to deal with produces and consumes at an operation level, but I think that got fixed. \n I agree\n  lgtm thanks!\n  \ud83d\udcaf lgtm\n  This is no longer an issue @ZandorZ does it work when you use the golang yaml tool directly?\r\nCan you share your spec file (not just the contents but the actual file) you should make the extension .yaml it should start working then I can't reproduce your issue :(\r\n\r\n```shellsession\r\n \u00bb swagger validate https://gist.githubusercontent.com/ZandorZ/cc6e4a27bb634f91d058e017ff45b761/raw/9c801d8df1a4075e5cb6f9a21403e0fa28a65ebe/swagger.yaml\r\nThe swagger spec at \"https://gist.githubusercontent.com/ZandorZ/cc6e4a27bb634f91d058e017ff45b761/raw/9c801d8df1a4075e5cb6f9a21403e0fa28a65ebe/swagger.yaml\" is valid against swagger specification 2.0\r\n``` can you give me a code snippet of what doesn't work, the code generates and compiles just fine. I suspect the issue is with the gob mimetype.\r\nCan you also capture the output of running the program with the env vars: DEBUG=1, SWAGGER_DEBUG=1 ok your content type from the server is not registered on the client.\r\nThe server when it does this shouldn't even return a response because the content type doesn't match any of your accepts\r\nYou can add that content type:  application/bj.portal.municipio+json\r\nto your consumes and I think it will start to work  lgtm\n  yeah I think go-swagger should ignore embedded interfaces, at the very least we could add an annotation to make it be ignored\n we have a pattern for discriminators. For those it parses the 0-arity methods as properties.\n  yeah that integration is not fully baked as there is no opportunity to provide your own.\nIn the handler you get a fresh context that is request scoped. Perhaps a good approach would be to allow people to override the context with a value at well-known key in the gorilla context dictionary.\n\nI have a branch where it's all net.context but I did run into some issues with it so I never merged that.\n they are now in handlers because we expose the Request in Params and on 1.7 you have a context.\n  what we did was make a middleware that sets the X-Request-ID field when it's empty on the front router.\nThen we described a header on every params object. Each handler has access to the request id in this case.\n\nThat being said in the next version of swagger there is also a Request object that's available on every params struct.\n you can define your spec like this (clients also need to pass it through if it exists so it is part of the contract)\n\n``` yaml\nparameters:\n  requestId:\n    name: X-Request-Id\n    in: header\n    type: string\n\npaths:\n  /:\n    parameters:\n      - $ref: \"#/parameters/requestId\"\n```\n in configure_xxx.go\n\n``` go\nimport \"github.com/satori/go.uuid\"\n\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    return addRequestID(handler)\n}\n\nfunc addRequestID(handler http.Handler) http.Handler {\n    var reqIDKey = http.CanonicalHeaderKey(\"x-request-id\")\n\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        if r.Header.Get(reqIDKey) == \"\" {\n            r.Header.Set(reqIDKey, uuid.NewV4().String())\n        }\n        handler(w, r)\n    })\n}\n\n```\n please don't close this ticket, I think this required for more people. I like to leave questions like this open so they are easier to find.\n I assume things worked after adding this last step?\n you can install go-swagger with go get, if you then regenerate you should have access to the request object.\n\nThere is one more change I want to make inside go-swagger to use pointers for builtins.\n this is now available as a part of the parameter struct\n  This is spec'ed by yaml, the only thing that you can do to not have it convert to boolean is use a different key value or to use json as format for the spec. see: http://yaml.org/type/bool.html\n I added a test that shows the quoting works here: https://github.com/go-openapi/loads/blob/2c2eb3b11f02b34aa8428379e3e317d2d8f06d4d/fmts/yaml_test.go#L154\n  lgtm \n  related to #557 \r\nWe could make factory methods like for params and responses but it would not be trivial to implement in the case of definitions.\r\n\r\nAs a potential workaround the fix #829 for  #769, #828 you can now define a default value at the object level and it will set them correctly.\r\n  duplicate of #442 \nI'm keeping this one open because the spec is cleaner\n  :+1:  :100: \n  you can add a cors middleware.\n\nhttps://github.com/rs/cors\nhttp://goswagger.io/use/middleware/\n 405 method not allowed for what?  are you sure you're requesting with the right basepath etc?\r\nThis solution has been proven to work for many people so something else must be wrong.  you can also use --skip-main in the generate command so then the main file doesn't get overwritten\r\nAlso you can easily make your own main file. I generate one by default more as an example. Everything is exported so it's easy to make other schemes.\r\nThe swagger 2.0 convention is to make the spec for your domain available at the root so that it can be discovered by convention  go-swagger is very pointer happy it still has an issue for patching objects because with pointers because we don't know if it was actually a value that was set or if it was a value that's nil.\n\nSo i think this will have to change one more time to use nullable types where set/unset is a property on the type. \n\nThat keeps GC pressure lower, but I think that might create a need for 2 structs. \nOne is the binding/validating struct and the second one is the one the user actually uses because a nullable type would kind of look like\n\n``` go\ntype NullableBool struct {\n  value bool\n  IsNull bool\n  WasSet bool\n}\n\nfunc (n *NullableBool) Value() *bool  {\n  if n.IsNull {\n    return nil\n  } \n  return &n.value\n}\n```\n\nThe biggest benefit we derive from this is the ability to do patches on objects\n I think perhaps a better solution is to add a companion field instead of making new types.\nThis companion field would describe the value like nullable and so forth and at the same time also contain if the value was set or unset from an unmarshal step.\n\nThis would enable the patch use case where you need that level of information, allow for richer knowledge about a type but at the same time not break existing code.\n ok but how do you support the PATCH http method? for those there is a distinction required between null and (un)set \n I'm a fan of the bitset idea, thanks @alecholmes \n I think this is what the generated code will look like. I now have to generate a custom serializer so I'm using mail.ru's easyjson classes to make an optimized custom de/serialization.\n\nThere will never be pointers for builtins or strfmt types.\nThere is a setter for each type that allows for manipulating the bitsets too.\nThere are additional helper methods to manipulate the bitset values one by one.\n\nThe original type used in the example:\nhttps://github.com/go-swagger/go-swagger/blob/4b4f832be2b3869d0ecfd5baa9fda046696d9712/examples/todo-list/models/item.go\n\n``` go\npackage models\n\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\n\nimport (\n    strfmt \"github.com/go-openapi/strfmt\"\n    jlexer \"github.com/mailru/easyjson/jlexer\"\n    jwriter \"github.com/mailru/easyjson/jwriter\"\n\n    \"github.com/go-openapi/errors\"\n    \"github.com/go-openapi/validate\"\n)\n\n/*Item item\n\nswagger:model item\n*/\ntype Item struct {\n    __setValues bitmap\n    __nulls     bitmap\n\n    /* completed\n     */\n    Completed bool `json:\"completed,omitempty\"`\n\n    /* description\n\n    Required: true\n    Min Length: 1\n    */\n    Description string `json:\"description\"`\n\n    /* id\n\n    Read Only: true\n    */\n    ID int64 `json:\"id,omitempty\"`\n}\n\nfunc (m *Item) FlagCompletedSet() {\n    m.__setValues.set(0)\n}\n\nfunc (m *Item) FlagCompletedUnset() {\n    m.__setValues.clear(0)\n}\n\nfunc (m *Item) FlagCompletedNil() {\n    m.__nulls.set(0)\n}\n\nfunc (m *Item) FlagCompletedZero() {\n    m.__nulls.clear(0)\n}\n\nfunc (m *Item) GetCompleted() (value bool, null bool, haskey bool) {\n    return m.Completed, m.__nulls.has(0), m.__setValues.has(0) || m.Completed\n}\n\nfunc (m *Item) GetCompletedPtr() (value *bool, haskey bool) {\n    if m.__nulls.has(0) {\n        return nil, m.__setValues.has(0)\n    }\n    return &m.Completed, m.__setValues.has(0) || m.Completed\n}\n\nfunc (m *Item) FlagDescriptionSet() {\n    m.__setValues.set(0)\n}\n\nfunc (m *Item) FlagDescriptionUnset() {\n    m.__setValues.clear(0)\n}\n\nfunc (m *Item) FlagDescriptionNil() {\n    m.__nulls.set(0)\n}\n\nfunc (m *Item) FlagDescriptionZero() {\n    m.__nulls.clear(0)\n}\n\nfunc (m *Item) GetDescription() (value string, null bool, haskey bool) {\n    return m.Description, m.__nulls.has(0), m.__setValues.has(0) || len(m.Description) > 0\n}\n\nfunc (m *Item) GetDescriptionPtr() (value *string, haskey bool) {\n    if m.__nulls.has(0) {\n        return nil, m.__setValues.has(0)\n    }\n    return &m.Description, m.__setValues.has(0) || len(m.Description) > 0\n}\n\nfunc (m *Item) FlagIDSet() {\n    m.__setValues.set(0)\n}\n\nfunc (m *Item) FlagIDUnset() {\n    m.__setValues.clear(0)\n}\n\nfunc (m *Item) FlagIDNil() {\n    m.__nulls.set(0)\n}\n\nfunc (m *Item) FlagIDZero() {\n    m.__nulls.clear(0)\n}\n\nfunc (m *Item) GetID() (value int64, null bool, haskey bool) {\n    return m.ID, m.__nulls.has(0), m.__setValues.has(0) || m.ID > 0\n}\n\nfunc (m *Item) GetIDPtr() (value *int64, haskey bool) {\n    if m.__nulls.has(0) {\n        return nil, m.__setValues.has(0)\n    }\n    return &m.ID, m.__setValues.has(0) || m.ID > 0\n}\n\n// Validate validates this item\nfunc (m *Item) Validate(formats strfmt.Registry) error {\n    var res []error\n\n    if err := m.validateDescription(formats); err != nil {\n        // prop\n        res = append(res, err)\n    }\n\n    if len(res) > 0 {\n        return errors.CompositeValidationError(res...)\n    }\n    return nil\n}\n\nfunc (m *Item) validateDescription(formats strfmt.Registry) error {\n\n    if !m.__setValues.has(1) {\n        return errors.Required(\"description\", \"body\")\n    }\n\n    if err := validate.MinLength(\"description\", \"body\", m.Description, 1); err != nil {\n        return err\n    }\n\n    return nil\n}\n\nfunc (m Item) MarshalEasyJSON(out *jwriter.Writer) {\n    out.RawByte('{')\n    first := true\n    _ = first\n    if m.Completed {\n        if !first {\n            out.RawByte(',')\n        }\n        first = false\n        out.RawString(\"\\\"completed\\\":\")\n        out.Bool(m.Completed)\n    }\n    if m.Description != \"\" {\n        if !first {\n            out.RawByte(',')\n        }\n        first = false\n        out.RawString(\"\\\"description\\\":\")\n        out.String(string(m.Description))\n    } else {\n        if !first {\n            out.RawByte(',')\n        }\n\n        first = false\n        out.RawString(\"\\\"description\\\":\")\n        if m.__nulls.has(1) {\n            out.RawString(\"null\")\n        } else if !m.__setValues.has(1) {\n            out.RawString(\"\\\"\\\"\")\n        }\n    }\n    if m.ID != 0 {\n        if !first {\n            out.RawByte(',')\n        }\n        first = false\n        out.RawString(\"\\\"id\\\":\")\n        out.Int64(m.ID)\n    }\n    out.RawByte('}')\n}\n\nfunc (m Item) MarshalJSON() ([]byte, error) {\n    out := jwriter.Writer{}\n    m.MarshalEasyJSON(&out)\n    return out.BuildBytes()\n}\n\nfunc (m *Item) UnmarshalEasyJSON(in *jlexer.Lexer) {\n    if in.IsNull() {\n        in.Skip()\n        return\n    }\n    in.Delim('{')\n    for !in.IsDelim('}') {\n        key := in.UnsafeString()\n        in.WantColon()\n        if in.IsNull() {\n            switch key {\n            case \"id\":\n                m.ID = 0\n                m.__setValues.set(2)\n                m.__nulls.set(2)\n                m.__nulls.clear(2)\n            case \"description\":\n                m.Description = \"\"\n                m.__setValues.set(1)\n                m.__nulls.clear(1)\n            case \"completed\":\n                m.Completed = false\n                m.__setValues.set(0)\n                m.__nulls.clear(0)\n            default:\n                in.SkipRecursive()\n            }\n            in.Skip()\n            in.WantComma()\n            continue\n        }\n        switch key {\n        case \"id\":\n            m.ID = in.Int64()\n            m.__setValues.set(2)\n            m.__nulls.clear(2)\n        case \"description\":\n            m.Description = in.String()\n            m.__setValues.set(1)\n            m.__nulls.clear(1)\n        case \"completed\":\n            m.Completed = in.Bool()\n            m.__setValues.set(0)\n            m.__nulls.clear(0)\n        default:\n            in.SkipRecursive()\n        }\n        in.WantComma()\n    }\n    in.Delim('}')\n}\n\nfunc (m *Item) UnmarshalJSON(data []byte) error {\n    in := jlexer.Lexer{Data: data}\n    m.UnmarshalEasyJSON(&in)\n    return in.Error()\n}\n\ntype bitmap uint\n\nfunc (b bitmap) clear(idx uint) bitmap {\n    n := uint(b)\n    n &^= (1 << idx)\n    return bitmap(n)\n}\n\nfunc (b bitmap) set(idx uint) bitmap {\n    n := uint(b)\n    n |= (1 << idx)\n    return bitmap(n)\n\n}\n\nfunc (b bitmap) has(idx uint) bool {\n    n := uint(b)\n    n &= (1 << idx)\n    return n > 0\n}\n\n```\n I updated the example to use willf's bitset and it adds more helpers as well as a PatchWith and Clone method.\n\nhttps://gist.github.com/casualjim/00950719d0f81fce54bc26dd91526dcc\n I created PR #557 to track the work that is going into implementing this. It will take a while to complete as it's a fairly big change. \n  lgtm\n  lgtm\n  lgtm\n  cool! look forward to it \n  this was fixed differently, but the functionality exists now\n  lgtm\n  I run tests locally like this:\n\n```\ngo test $(go list ./... | grep -v vendor)\n```\n\nAnother way to do it is:\n\n```\ndocker build -t go-swagger:local -f Dockerfile.ci .\ndocker run --rm -it go-swagger:local ./hack/build-docker.sh\n```\n\nAnd the last way to do it is:\n\n```\ndrone exec\n```\n I think writing a test for this would only matter for the client generation stuff. The BasePath property is used in the client facade\n\nit looks a bit like these tests: https://github.com/go-swagger/go-swagger/blob/master/generator/operation_test.go#L301-L375\n\nthe template for that is: `clientFacadeTemplate`\nand you're checking if this bit renders correctly: `transport := httptransport.New({{ printf \"%#v\" .Host }}, {{ printf \"%#v\" .BasePath }}, {{ printf \"%#v\" .Schemes }})`\n lgtm \n\nI go by the drone one, I should remove the circle one I won't be using it anymore going forward.\n Thanks a lot!\n  I think you fixed this now, can this be closed?\n  recursion should be supported in the way you write it here. But currently it might end up with a stack overflow when you use it in a response or param \n\nduplicate of #442 \n  lgtm\n  The trade-off that will be made with that is that you can't really validate requiredness on builtins without turning them into pointer values.\n yes you're right, it's not supposed to generate code that looks like that because it's nullable. \nYou can still go back to the tagged release though right?\n I get different code generated when I try this. For me there is no dereferencing and it considers nil.  This makes me wonder if the templates need to be regenerated for you.\n\nthe spec: https://github.com/go-swagger/go-swagger/blob/fa3e773f7ab6ec88bc3a6d9a3cd7bea8b0ef7b76/fixtures/codegen/todolist.models.yml#L28-L35\nthe test:\nhttps://github.com/go-swagger/go-swagger/blob/fa3e773f7ab6ec88bc3a6d9a3cd7bea8b0ef7b76/generator/model_test.go#L1616-L1637\n\n``` go\npackage models\n\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\n\nimport (\n  strfmt \"github.com/go-swagger/go-swagger/strfmt\"\n\n  \"github.com/go-swagger/go-swagger/errors\"\n  \"github.com/go-swagger/go-swagger/httpkit/validate\"\n)\n\n/*NewProfile new profile\n\nswagger:model newProfile\n*/\ntype NewProfile struct {\n\n  /* id\n\n  Required: true\n  */\n  ID *int64 `json:\"id\"`\n}\n\n// Validate validates this new profile\nfunc (m *NewProfile) Validate(formats strfmt.Registry) error {\n  var res []error\n\n  if err := m.validateID(formats); err != nil {\n    // prop\n    res = append(res, err)\n  }\n\n  if len(res) > 0 {\n    return errors.CompositeValidationError(res...)\n  }\n  return nil\n}\n\nfunc (m *NewProfile) validateID(formats strfmt.Registry) error {\n\n  if err := validate.Required(\"id\", \"body\", m.ID); err != nil {\n    return err\n  }\n\n  return nil\n}\n```\n please consider the opposite case, where you want to validate the struct not the json.  This use case is real on generated clients.\n\nHow do you distinguish between value-set and value-unset? \n @dolmen that behavior invalidates the required bit of the contract because if something isn't present but required then you don't get that error message. So why have the requirement there at all, if you want to catch it with another validation.\n\nI'm not very happy with the way this is currently working. And it still is an issue for patching objects because with pointers we don't know if it was actually a value that was set or if it was a value that's nil.\nSo i think this will have to change one more time to use nullable types where set/unset is a property on the type. \nThat keeps GC pressure lower, but I think that might create a need for 2 structs. \nOne is the binding/validating struct and the second one is the one the user actually uses because a nullable type would kind of look like\n\n``` go\ntype NullableBool struct {\n  value bool\n  IsNull bool\n  WasSet bool\n}\n\nfunc (n *NullableBool) Value() *bool  {\n  if nIsNull {\n    return nil\n  } \n  return &n.value\n}\n```\n\nThe biggest benefit we derive from this is the ability to do patches on objects\n  is this different from #453 ?\n  it won't know that those things are primitives to begin with. it wouldn't know how to turn that into a swagger schema I think. \n\nIf you want nullable without changing the way swagger works today, this would work:\n\n``` go\n// swagger:model\ntype Community struct {\n    Sid                string `json:\"sid\"`\n    Designjson      interface{}\n    Status             *string\n    Xdate              *string\n}\n```\n After deliberating on this for a while. i don't think it's within swaggers goals to provide structs you can persist in the database. I don't want to write an orm, my goals are to provide API boundary contracts.\nThe database is the opposite end of that. \nNow that being said this ticket led to #476 and I do think there is value for us to provide support for nullable and set/unset values however compatibility with persistence layers is outside the goals of the project. \nI know this is probably not the answer you wanted but API boundary contracts are fickle enough without having to deal with database serialization.\n\nI will leave this thread open, so other people can chime in and let their opinions be known.  \n  lgtm thanks!\n  lgtm\nsorry I fixed those in anohter branch\n  this is a bug in the scanner, it should consider other chars.\n\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L488\n\nthat should probably use a different regex to capture those values.\n  lgtm\n  Wrap it in another struct and decorate the property with `in: body`\n\n``` go\n// swagger:response Response\ntype ResponseWrapper struct {\n  // in: body\n  Body Response \n}\ntype Response struct {\n  ResultCode string json:\"code\"\n  Message string json:\"message\"\n  ScanId string json:\"scan_id\"\n  Filesize string json:\"filesize\"\n  ContentType string json:\"content_type\"\n  ScanResultUrl string json:\"scanresult_url\"\n}\n```\n you can marshal instance.Body instead can't you? \nIn fact you don't even have to instantiate the response wrapper. You can think of it as type checked documentation perhaps?\n interest I have, it's often requested. I just don't have enough time to do all the things. so I'm not opposed to a pull request that makes this work.\n\nperhaps with an annotation like `swagger:responseBody`\n\nThe main thing is the response stuff needs to exist, but we can create extra syntax to support unwrapped bodies. A swagger response is headers + body so that's why there is the requirement for wrapping at this moment.\n\nWhat I mostly want to avoid is duplicating type information in doc comments, seems a waste of a perfectly good compiler.\n this is the code that governs the response parsing:\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/responses.go#L122\n\nperhaps an easy way to do this is to check for both in: Body and swagger:response annotations to be present. If they are then the type should be wrapped in a response without headers.\n Somebody sent a PR for this last week, so on master this feature should be available.\n\nhttps://github.com/go-swagger/go-swagger/commit/2f75b5703263c3565dc9aea4e15e0346471d35e2\n @bfirsh the issue is that when you don't have those structs, you're not documenting headers in your contract. A very common case for this is something like request id. \n you can if you use `200: body:ModelName`\r\nwe also since have added swagger:operation which gives you the ability to just write the yaml for the operation you're describing you will also need to add -m to generate spec `swagger generate spec -m ...`  :+1: \n thanks!\n  hi don't worry about circleci and appveyor, I should remove them because they typically timeout.\n lgtm\n Thanks!\n  is there something that can be worked out to get gentoo support included in the release process?\n  :shipit: \n  feel free to send this as  a PR\n closed by #432 \n When you start the process you can specify them as arguments of environment variables.\nYou can also override the scheme by specifying `--scheme http`\n I just added a readme doc, but I'm running through the rest of the tutorial to see if it all still works.\r\nIt will be fixed today that is correct, which is why I haven't pushed my updates yet. Stay tuned will take a little while to get his back in shape once #1015 is merged the tutorial will work again  :shipit: \n  lgtm\n I've cherry-picked this commit onto another branch, so closing this PR\n  functionality included by #683\n  I haven't been able to get to this, but i welcome PR's \n  it's not that I don't want to support it, just haven't been able to get to it. If somebody adds it as a PR I'd be more than happy to merge it.\n\ngithub issues is my google group, I don't want to have the information fragmented in several locations. So discussions/questions are just issues tagged with question.\nThere is a [slack channel](https://slackin.goswagger.io) if you want to have a more interactive back and forth. But even then I would like that information to be captured in my issues here too so that it benefits other users as well.\n\nrelated: #9\n This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi \n  There are a number of packages that are more like libraries, they would be better extracted.\n\nPerhaps it's a good thing to extract these into their own repos. The CLI command can then vendor each of those repos. Most of them are stable at this point.\n\nspecs, jsonreference, jsonpointer, scan, swag and the httpkit\n This repository should only contain the code that is directly used by the executable. Things that are being used as library constructs will move into their own stand-alone packages.\n\nI want to squash several issues here:\n1. move the yaml dependency out into packages so that it doesn't automatically turn your application into an LGPL application and swagger (executable) can be classified as a build tool.\n2. turn the swag package into its own repo\n3. move jsonpointer package to its own repo\n4. move jsonreference package to its own repo \n5. separate spec package into a 2 repos:\n   1. the spec object model\n   2. analysis package that takes care of analyzing swagger specifications and provides an index to be used by other packages.\n6. move validation into its own repo\n7. move examples to their own repo\n8. move httpkit into its own repo\n\nThese repos will get created under the go-openapi org instead of the go-swagger org due to the rename of the specification.\n I've begun work on this, might not be exactly what I laid out in the previous comment but it will be close. I hope it won't take me longer than a weekend to complete this.\n ontucker yes I got that requirement. this is about the go-swagger codebase itself.\nFor your requirement I think the server that gets generate will get an interface passed in with 3 hooks for lifecycle events: starting/configuring/stopping\n\nI like the example suggestion\n I've moved most of the supporting code for to command to separate repos as well as applied a restructuring for yaml\n\nThe only thing I didn't do was remove the examples from this repo, because I think they are still kind of appropriate in this repo.\n  Lgtm\n  :shipit: \n  :shipit: \n  hey @jredville, that's been a long time!\n\nI think you have to annotate with \n\n// swagger:strfmt uuid\n\nhttp://goswagger.io/generate/spec/strfmt.html\n swagger has support for uuid out of the box.\nI think all you do is annotate your type with `swagger:strfmt uuid`\n\nI don't have an explicit test for this particular structure, but when I read the code I think that would do it\n  Getting this to work on on the client should be supported today.  But the server is missing the bits for the client auth to be validated.\n\nfor the client part:\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/todo_list_client.go#L23\n\nthat transport that gets created has a Transport property which is a http.RoundTripper. This should not be very hard to add to go-swagger.\n\nhttps://github.com/go-swagger/go-swagger/blob/master/httpkit/client/runtime.go#L47\n I think this might be fixed by 53c4f85\n yes that went in as well. generated code now has access to *http.Request and gorilla context is already in use by go-swagger itself.\n  lgtm\n  you can rename the model in the json with the swagger:model doc tag on the response data struct, that would get you the expected output\n\n``` go\n// swagger:response SuccessResponse\ntype SuccessResponse struct {\n   // In: body\n   Data ResponseData `json:\"data\"`\n} \n\n// swagger:model SuccessResponse\ntype ResponseData struct {\n   Field1 string `json:\"field1\"`\n   Field2 string `json:\"field2\"`\n}\n```\n  this needs an update before it can get merged\n lgtm\n  lgtm\n this branch is out of date :( it needs a rebase\n :shipit: \n  If you update to what's on master today the layout has changed a bit of the generated code. It contains PR #392  which should address this specific issue.\nI'll make a new release this weekend.\n  lgtm\n  which go version are you using?\nAre you using vendoring?\n for this you require `export GO15VENDOREXPERIMENT=1`\n and also does your application compile? because go-swagger makes use of the same code the go compiler/imports/... etc use to discover all the involved packages. So I think it requires your code to be mostly compilable to be able to discover everything.\n\nHowever the errors seem to be related to it not being able to discover the dependencies\n are you running the swagger command in the package that contains your main function?\n would it be possible to share your code in some way, it can be done privately if you're concerned about making it public. I just want to understand this issue better\n\nI have a slack team (https://slackin.goswagger.io) and I'm Ivan Porto Carrero in the gobridge slack team\n @gsquire  do you have a gopath set up? Does that code compile?\n I have problems getting this reproduced:\n\n``` shellsession\n\u00b1 ivan@paradox:~  \n \u00bb md /tmp/genbug    \n\u00b1 ivan@paradox:~  \n \u00bb cd /tmp/genbug \n\u00b1 ivan@paradox:/tmp/genbug  \n \u00bb curl -OL'#' https://gist.githubusercontent.com/gsquire/cce277b4bd10ba283f4522e896dc91d6/raw/200e1e295574766ad8566af86bb562f15bc33cdf/test-swagger.go\n######################################################################## 100.0%\n\u00b1 ivan@paradox:/tmp/genbug  \n \u00bb ls\ntest-swagger.go\n\u00b1 ivan@paradox:/tmp/genbug  \n \u00bb swagger generate spec -o swagger.json \n\u00b1 ivan@paradox:/tmp/genbug  \n \u00bb ls\nswagger.json  test-swagger.go\n\u00b1 ivan@paradox:/tmp/genbug  \n \u00bb cat swagger.json \n{\"produces\":[\"application/text\"],\"schemes\":[\"http\"],\"swagger\":\"2.0\",\"info\":{\"description\":\"The purpose is to demonstrate swagger docs for a test app.\"},\"host\":\"localhost\",\"paths\":{},\"definitions\":{}}%    \n```\n That was linux, here's my mac. My go is also installed through homebrew\n\n``` shellsession\n\u00b1 ivan@aether:~\n \u00bb md /tmp/gendebug\n\u00b1 ivan@aether:~\n \u00bb cd /tmp/gendebug\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb uname -a\nDarwin aether.local 15.4.0 Darwin Kernel Version 15.4.0: Fri Feb 26 22:08:05 PST 2016; root:xnu-3248.40.184~3/RELEASE_X86_64 x86_64\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/ivan/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.6.1/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.6.1/libexec/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb curl -OL'#' https://gist.githubusercontent.com/gsquire/cce277b4bd10ba283f4522e896dc91d6/raw/200e1e295574766ad8566af86bb562f15bc33cdf/test-swagger.go\n######################################################################## 100.0%\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb ls\ntest-swagger.go\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb swagger generate spec\n{\"produces\":[\"application/text\"],\"schemes\":[\"http\"],\"swagger\":\"2.0\",\"info\":{\"description\":\"The purpose is to demonstrate swagger docs for a test app.\"},\"host\":\"localhost\",\"paths\":{},\"definitions\":{}}\n\u00b1 ivan@aether:/tmp/gendebug\n \u00bb\n```\n did you install your go from source perhaps? because your goroot seems different from mine\n  duplicate of #300 ?\n this was fixed in 42bbea36acba818fbc269e19f625316c1a0e15fc\n  currently keeping configure_xxx.go in sync is a manual exercise which is often times confusing.\nIt would be better if missing things could be added. \nDeleted operations and such should also be reflected in the configure_xxx.go file\n\nAlso track a list of generated files or use a .swagger.go extension so that we can delete all ephemeral files without worrying and we don't leave stale code lying around.\n\nUpdates should be ignored though, hopefully they'll fail compilation.\n  :+1: thanks!\n  this was fixed on 0.6.0\n  lgtm\n  this needs an update\n lgtm\n  Could you add a test that proves it works?\n :+1: \n  I'll check what can be done to support this use case. \n\nI've seen the conversations about this on the swagger spec. I don't think swagger 2.0 actually allows query strings in the swagger spec. \n\nBut I agree it's a useful thing to have because you can group parameters / responses etc this way. \n  tl;dr The main difference at this moment is that this one will actually work.  \n\nThe swagger-codegen project only generates a client and even there it will only support flat models.\n- This project supports most features offered by jsonschema including polymorphism.\n- It allows for generating a swagger specification from go code. \n- It allows for generating a server from a swagger definition and to generate an equivalent spec back from that codebase.\n- It allows for generating a client from a swagger definition.\n- It has support for several common swagger vendor extensions.\n\nWhy is this not done in the swagger-codegen project? Because:\n- I don't really know java very well and so I'd be learning both java and the object model of the codegen which was in heavy flux as opposed to doing go and I really wanted to go experience of designing a large codebase with it.\n- Go's super limited type system makes it so that it doesn't fit well in the model of swagger-codegen\n- Go's idea of polymorphism doesn't reconcile very well with a solution designed for languages that actually have inheritance and so forth.\n- For supporting types like [][][]map[string][][]int64 I don't think it's possible with mustache\n- I gravely underestimated the amount of work that would be involved in making something useful out of it.\n- My personal mission: I want the jvm to go away, it was great way back when now it's just silly (vm in container on vm in vm in container)\n landing page of goswagger.io ? or the readme? \n  thanks for the contribution but this breaks the build. There is a panic with a stackoverflow\n superseded by: #387 \n  I think that's the way to do it.\n\n At some point I included an embedded version of the swagger-ui in this toolkit but it became annoying to keep up to date and severely bloated the size of my binary.\n I'm reluctant to do so at this point in time because a git submodule break go-gettability.\nI've had it included at one point but it's so much of a moving target that it would always be outdated. On top of it it are a lot of javascript and html files and people haven't been over the moon when go-swagger gets vendored and they see all of that.\n\nNow after a refactor #420 is complete I think there might be a way to bring this functionality back because it becomes opt-in\n  this broke json schema tests: https://ci.appveyor.com/project/casualjim/go-swagger/build/0.1.409-gdolumaf#L1122\n o but I really like the PR so if you can make it pass tests I'm more than happy to merge it. Sounds like a lot of work went into it\n lgtm\n I wonder why there is a stack overflow in go 1.5 for this but it's fine in 1.6\n hey I just saw which project this is for. Very cool!!!!  :fireworks: \nLooks like a very nice approach to the API mess.  We have a slack in case you want to influence direction a bit more: https://slackin.goswagger.io/\n superseded by https://github.com/go-swagger/go-swagger/pull/393\n  fixed by https://github.com/go-swagger/go-swagger/pull/393\n  fwiw and for other people reading this bug. \nAn error resulting from user error (in this case because the user has not supplied the body) should always be in the 4xx range. \n5xx range is reserved for errors where the system is to blame.\n\nPlease next time provide clear steps/data to reproduce, it helps a lot. Things that help are the swagger spec or a minimal swagger spec to reproduce the issue. And perhaps the request you sent it, it's hard to read minds. \n  this only panics when there is no body correct?\n Would it be possible to give me steps to reproduce? When does the panic occur?\nI would like to see the stack trace of the panic. \nif possible also a minimal version of the spec. \n  lgtm\n  lgtm\n  related: #159, #331\n  I think you can use '-c slmpclient' to this effect. That would generate each client in their own package but the models would still be shared\n  parent: #183\n  parent: #183 \n  lgtm\n thank you for using and improving the tool, sir!\n  the spec here says that it's a string. the type says string\n  this is a confirmed issue with go imports\n  lgtm\n  can you add the relevant pieces of the swagger spec or a version that is similar?\n  - a $ref property takes over that entire object\n- a parameter is pointing to a schema you can use a parameters top level property.\n\nhttps://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields\n\nSo if you want to share parameters you can define it in the parameters top level property and do something like:\n\n```\nparameters:\n  sid:\n    in: query\n    required: true\n    type: integer\n    format: int64\n/get_main_object:\n  get:\n    tags:\n      - maindata\n    parameters:\n      - $ref: \"#/parameters/sid\"\n```\n at least for json this could be helpful: https://github.com/ajeddeloh/go-json Just restested this.\r\n1. No more panic: a validation error is detected. Strangely, errors are repeated.\r\n2. @casualjim : your example is not validated. \"Cannot unmarshall object\".\r\n\r\nI think we can close the \"panic\" issue and perhaps dedicate a more accurate issue on validation messages relevances.\r\n\r\nPreparing a PR with fixtures and UT.  can you move the swagger:model annotation to be the last line in the doc comments for a struct?\n\nAlternatively, i see some definitions for responses in your specification document. But no matching swagger:response definitions structs.\n\n``` go\n// swagger:response errorResponse\ntype ErrorResponse struct {\n  // in: body\n  Body struct {\n    Message string `json:\"error,omitempty\"`\n  }\n}\n\n// swagger:response validationError\ntype ValidationError struct {\n  // in: body \n  Body struct {\n    // required: true\n    Message string `json:\"error,omitempty\"`\n\n    Field string `json:\"fieldName,omitempty\"`\n  }\n}\n\n// swagger:response someResponse\ntype SomeResponse struct {\n  // in: body\n  Body *User `json:\"body,omitempty\"`\n}\n```\n\nI added an option to the swagger generator today (--scan-models) which should make models be picked up, regardless of whether they're in use somewhere else or not.\nPerhaps that will work. It's late where I live but I'll try your code tomorrow to see if I there is more work needed.\n  most of them are due to go's maps being unordered, they aren't actual changes. And you're right I should run regen-samples more often\n  lgtm\n  this was fixed by: https://github.com/go-swagger/go-swagger/pull/324\n  Could you please post a YAML or JSON example illustrating your point?  I have a branch for this but I couldn't reproduce your issue. Can you check if it's ok now?\n  lgtm\n  I think this is the expected behavior:\n\nhttps://www.w3.org/Protocols/rfc2616/rfc2616-sec7.html#sec7.2.1\n\n> Any HTTP/1.1 message containing an entity-body SHOULD include a Content-Type header field defining the media type of that body. If and only if the media type is not given by a Content-Type field, the recipient MAY attempt to guess the media type via inspection of its content and/or the name extension(s) of the URI used to identify the resource. If the media type remains unknown, the recipient SHOULD treat it as type \"application/octet-stream\".\n\nSo I think the swagger specification should have a consumer for application octet-stream for those routes.\n\nI added support for using io.Reader and io.Writer interfaces to produce bytestreams.\n\nhttps://github.com/go-swagger/go-swagger/commit/2e4ece7ef6e618f2566bfa7c67e932097f449365\n  operations in the generated server are expected to return a responder.\n\nThis interface is defined as:\n\n``` go\n// Responder is an interface for types to implement\n// when they want to be considered for writing HTTP responses\ntype Responder interface {\n    WriteResponse(http.ResponseWriter, httpkit.Producer)\n}\n```\n\nWith 83807e5 I've added a `middleware.ResponderFunc` helper construct so you can just write a `func(http.ResponseWriter, httpkit.Producer)` where you want a streaming response.\n\nI hope this is sufficient; I've toyed with a channel based stream where you send struct objects to a channel which then gets streamed to the browser. I decided against this because it seemed to just add complexity for little benefit. I can be persuaded to implement such a responder though, and should somebody send a PR like that I would not say no to it.\n  We could add an extension like: x-strict and that would then make the string comparison use equalfold. \n\nI do think both options should be supported because I think that typically enums are an exhaustive list of strict values; but at the same time I think you have a valid use case.\n  Set the embedded spec, the creation of the server and so forth free from the main package so it can be composed in executables with commands\n sorry this is a copy/paste error i hope i fixed it now\n  swagger model allows you to override the name inferred from the struct type should you so desire. \n If you want a model to be picked up you just use it in a struct decorated with `swagger:parameters` or `swagger:response`.  \n\nthe swagger:model is useful during spec generation when you want to override a name for example:\n\n``` go\n// swagger:model\ntype User struct {\n```\n\nresults in: \n\n``` yaml\ndefinitions:\n   User:\n     type: object\n```\n\nbut \n\n``` go\n// swagger:model user\ntype User struct {\n```\n\nresults in: \n\n``` yaml\ndefinitions:\n   user:\n     type: object\n```\n\nto use it in a response:\n\n``` go\n// swagger:response userFound\ntype UserFound struct {\n   // in: body\n   Body User\n}\n```\n ok thanks. I'll try to get to this bug this week\n I have a test for this: https://github.com/go-swagger/go-swagger/blob/master/fixtures/goparsing/classification/operations/responses.go#L150-L164\n\nwould it be possible to give me project with the file layout you have? I can't reproduce the error you have, without more info.\n I use go 1.6\nAnd this toolkit is built and tested against 1.5 and 1.6\n  thanks for the suggestion\n\nThere is this folder:\nhttps://github.com/go-swagger/go-swagger/tree/master/docs/content\n\nAnd that is a hugo site that gets pushed to\nhttps://github.com/go-swagger/go-swagger.github.io\n\nI can make it all work from the go-swagger.github.io repo in a gh-pages model though if that is preferred\n I've moved the sources of the documentation to the website repository.\n\nhttps://github.com/go-swagger/go-swagger.github.io/tree/source\n\nYou can send pull requests there should you want to edit the website\n  what is the method it uses where it leaves out Accept?\n HTTP method :) GET/POST/PUT/DELETE\nAnyway it's a bug in swagger where it should use _/_ as default I guess\n  lgtm\n  lgtm\n Thanks for this, unfortunately it needs to be rebased or something because I can't merge it automatically\n lgtm\n  lgtm\n Thanks a lot for this btw\n  I want to write a test for this, is this scenario correct:\nYour server sends 301's for items that come in without a trailing slash? \n\nNitpick: according to the spec on URI's the 2 are equivalent, so why not just catch it with routing logic? That being said, I've seen many go based APIs not handle calls with a trailing slash. (eg. https://ci.vmware.run/go-swagger/go-swagger vs https://ci.vmware.run/go-swagger/go-swagger/)  which makes me even more confused.\n\nI doubt that I will be able to remove the usage of path.Join but I'll try to preserve a trailing slash should it exist.\n If you add a test for that code you have a PR I'd gladly accept :)\n  lgtm\n Thanks a lot!\n  you can do that today already by just building up the http.Request object and then passing it to the the middleware. Perhaps use the httptest.Recorder to gather the response data\n  agree on all points except the alItems one \nThe since is for all ids since the one provided (so if since is 1 then we want id's 2,3,4 and so on)\n\nwrt to https, I think it's still useful to include it in the tutorial but perhaps it should be an extra step and some more explanation about what and why?\n\n> To sum it up, I would like to \"clean up\" the tutorial and example source code a bit.\n\nDoes that mean a PR is coming? \n  It breaks codegen for quay.io\nI'll look into fixing this before monday\n superseded by #293\n  lgtm\n  lgtm\n  the spec struct doesn't have to be embedded but it does want it to be a struct.\nis that a problem for you?\n The reason it is the way it is, is because a response to swagger is headers + body and go-swagger wants to preserve that structure.  In terms of typing effort it's about the same as an approach that uses comments only but you get verification of your types through the compiler. \n\nduplicate of #140 \n  lgtm\n  lgtm\n  closed by linked PR with bad comment\n  LGTM\n  Would it be possible for you to try with go1.5? \n\nswagger uses GO15VENDOREXPERIMENT and I think it might not be able to find strfmt which is why it's not \n I'll publish new binaries tonight but you do need go-swagger in your GOPATH for this to work out. \n @BlueDragonX go-swagger makes use of goimports to reformat and get the imports for the generated files.  Part of that is optimizing the imports and to discover them properly it wants for them to be in the $GOPATH so goimports can discover them.\n\nAnyway for strfmt in particular I've aliased them now which will hopefully keep them\n  I still have a bunch of serialization errors when I try against the latest 1.6 container.\n\nI did update my loader tool which was missing some method for version 1.6\n  forthe file you can use: httpkit.File\nhttps://github.com/go-swagger/go-swagger/blob/master/httpkit/interfaces.go#L24-L28\n when you say you did `go get -u` do you mean you did `go get -u github.com/go-swagger/go-swagger/cmd/...`\n\nAnother thing I can offer to try is to rebuild with the '-a' flag so that it rebuilds all packages in use.\n  I'll count this as a very strong +1 :)\n  Provide a version command for go-swagger\n I figured since I'm signing tags, I'd add a pre-commit hook which generates a go file with a version string in there that I can get from git describe. \n\n``` shellsession\ngit:(master) \u2717 !? \u00bb git describe\nv0.2.0-163-g11157eb\n```\n  same suggestion as in #244 \n  Cool, perhaps default values, enums and examples can be defined as functions or vars with a naming convention? \n\nThen the tool can generate json and yaml for them.\n\nIt also makes it so that people can use code to express them and take advantage of the compiler\n yes a var works as well, I like this :+1: \n I'll accept any progress so you can do the simpler plan if you prefer, I was just making a suggestion. I don't want to make it a hurdle to contributing, we can always make it better later\n perhaps this could be useful for this: https://github.com/japm/goScript\n\nThere are a few other ones out there that allow string eval of go code.\n @McSwitch there are people actively working on enum support so you can leave that. Default value support is still not implemented through.\r\n  I think this is fixed, i didn't close it because I didn't write a test for this yet\n  I have a hard time reproducing this. When I include the file in my test application it just passes\n out of curiosity, when it fails did the project compile?\n I understand this issue exists, but I have trouble reproducing it. So if you do have this issue and you can provide me steps on how to reproduce it, that would be greatly appreciated. \n\nI can't fix what I can't reproduce, because I won't know if it's really fixed so it becomes a bit like shrodingers cat.\n if you can add this as a test and PR that'd be great\n I think treating error as string, that worked for you right.\nI don't think it will fix the issue completely but it definitely fixes some cases\n it is used for the allOf case and discriminators.\nit only considers methods with no args and a single return argument. \n that's a great idea\n wonderful, thanks so much for doing this\n I wonder if this is still an issue after the merge of #633\n This appears to be fixed now. I'll close this one, it can always be reopened when somebody runs into it again  I think this has a merge conflict because I can't merge it, github won't let me.\n\nAfter properly thinking this one through, I think the public interface for the client (contrary that what I said in the slack channel) should use consumers for what is the consumer on the client side, similarly to the producer. \n\nHowever when we look at the spec to get the defined consumes and produces values the produces values apply to the consumers property of the client and the consumes values apply to the producers property of the client. \n\nThis removes surprising behavior on the client side and still captures intent from a client perspective, but the spec is defined from the server perspective so there they are inverted in naming. Also we should put this in a comment in the file so that people don't read that code and go wth?\n  thanks :100:\n  same comment wrt to naming, from #238\n\nhttps://github.com/go-swagger/go-swagger/pull/238#issuecomment-175397407\n  i think this can be closed \n  The first question is does it need to be redesigned?\n\nCurrently when a type has a discriminator field we turn it into an interface.\n\nThis interface defines GetXxx/SetXxx methods.\nIn subtypes we then generate unexported fields and use the interface methods to satisfy the interface and the unexported field values.\n\n``` go\ntype Pet interface {\n   GetName() string\n   SetName(string) Pet\n   PetType() string\n}\n\ntype Dog struct {\n   nameField string\n   OtherAttr string\n}\n\nfunc (d *Dog) GetName() string {\n  return d.nameField\n}\n\nfunc (d *Dog) SetName(name string) Pet {\n  d.nameField = name\n  return d\n}\n\nfunc (d *Dog) PetType() string {\n  return \"dog\"\n}\n```\n\nThis first approach has the disadvantage that there is no struct for the base type, so you need to go through the method calls.\n\nAn alternative way of implementing this could be:\n\n``` go\ntype Pet struct {\n    Name string\n    PetType string\n}\n\nfunc (p *Pet) Pet() *Pet {\n  return p\n}\n\ntype IsPet interface {\n    Pet() *Pet\n}\n\ntype Dog struct {\n    *Pet\n\n    OtherAttr string\n}\n```\n\nIn this case the sub type won't be able to stand in for a pet without an explicit method call.\n\nPlease give your comments or ideas\n  I messed up the issue numbers, but this should be fixed now\n  your vendoring manager should flatten this out. \ngo swagger already uses GO15VENDOREXPERIMENT\n\nam I misreading your question?\n if your loader project up to date? Does your project compile?\n\nswagger uses the go build infrastructure, We can check out if there is something that is required to be enable.\n I've updated the dependencies, there were changes to the golang tools around loader but i don't think it will fix it yet. \n\nDo you have a repo i can use to reproduce this issue?\n Thank your for this very complete story.\nCan you also try to upgrade to go 1.5.3 as there were fixes in this area IIRC.\nHow are you adding things to your vendor folder, are you using a particular tool?\n\nI'll figure something out for supplying pre-built binaries on github and/or bintray as well as a docker container.\n\nI actually have a similar problem in go-swagger itself where I need to get 3 different dependencies into the gopath but it will happily find all other things.\n\nhttps://github.com/go-swagger/go-swagger/issues/246\nhttps://github.com/go-swagger/go-swagger/issues/247\n ok so the problem goes away after a complete clean?\n\n@solher can you close this issue, if the same fix works for you?\n I believe glide works with ./vendor/src doesn't it?\n\nWhen i tried glide I had all kinds of issues, so I started using gvt instead, but ymmv\n  you can start with an input file. \nI think there is no parser support for the security schemes yet in the comment parser. But you can start with a partial swagger file and then have it merge the discovered (from code) data into the final swagger document.\n  LGTM\n thanks :+1: \n  On the server this is done for serving the spec up at /swagger.json \n\nAre you saying you want to optionally exclude a spec and make sure you deploy one with your generated server?\n oops wrong issue number in commit message\n  Excellent contribution :+1: \n\nDo you think it would be possible to defer loading the template until it is used for the first time?\nI think it would be nice if you ended up with a workflow where you just have to provide the templates or partials you wanted to override and it would use the embedded ones for the things that don't exist on disk.\n\nIf you think that's too much work for now that's fine too.\n LGTM\n Thanks, I figured I'd merge this already so that at least there is a way to do it. And then it can be improved with another PR\n  lgtm\n  Excellent question!\n\nPersonally I'd err on making it not panic (although I think you'll find a comment about a panic middleware should handle this), but also not allowing bodies in DELETE.\n\nI can however come up with a use case for it that makes sense. Let's say your a search engine of some sort and you want to allow for a query document to govern the selection for what needs to get deleted. In that case the body would make a lot of sense. So contrary to what I want out of principle my vote goes to option 1.\n  I've got a fix in this PR for this issue, so I'm closing this PR\n\nhttps://github.com/go-swagger/go-swagger/pull/229\n  fwiw if this is a for a JSON API then you shouldn't send or receive primitives. Only [] and {} are valid JSON objects.\n\nI'll look into fixing this issue though\n it's accepted as bug already ;)\nI will try to get to it this week. the template should not render the validate method unless it's a named type or a complex object with properties.\n\nThe fix will have to go here somewhere: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/parameter.gotmpl#L162-L183\n  so we should make sure that our file naming doesn't end with _test I suppose?\n  lgtm\n LGTM perhaps\n  This folder uses most of the annotations\n\nhttps://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/petstore\n Q1: nope it needs to be declared in the same app and it needs to be imported so that goswagger can find it by following imports starting at the main package.\n\nQ2: you would add all of them in the parameter struct at this moment, in the case of parameters you would add a doc comment: `// in: path`. Take a look at some of the generated code examples because they contain all the known annotations as well.\n\nQ3: not case sensitive, didn't want to have debates over casing. Whatever looks good to you in docs is what you can use.\n only when it's used in a discriminator IIRC. There is code in the scan package that treats nullary methods as properties if certain conditions are met.\n you still need to add enlist a struct as parameters for the operation.\nhttps://goswagger.io/generate/spec/params.html\n I don't think that is supported at the moment  :shipit:\n thanks :100: \n :+1:\n  :shipit:\n  :shipit:\n  if you make map a slice I'm all for it. That retains ordering\n yeah that's great. \nYou I have a package called swag where I put everything I don't have a proper home for. Perhaps it could go in there?\n  :shipit:\n  :shipit:\n :100: Thanks a lot!\n  :shipit:\n Thanks a lot :100: \n  :shipit:\n thanks for this, cleaner solution I had in mind.\n when you send a signal (SIGINT, SIGQUIT) to shut it down to your program. It functions as a finalizer when for example ctrl-c is pressed. It's where you cleanly release file handles etc you're on windows right? There is a config key for it:\r\nhttps://youtrack.jetbrains.com/issue/PY-17252  I know what the issue is, but the fix is less than trivial. The crux of the issue is that the spec uses definitions that nest allOf with additionalProperties and discriminators and the spec nests those. \nThanks for this spec!\n I've added this spec to my canary tests, meaning on every CI build it will try to generate a client and server for this specification and compile it with `go test ./...`\n\nit would be great if you could send a [PR](https://github.com/go-swagger/go-swagger/blob/master/fixtures/canary/bitbucket.org/swagger.json) when you update your spec, so that we can be reasonably sure that we don't break bitbucket client generation again in the future.\n\nhttps://github.com/go-swagger/go-swagger/blob/master/fixtures/canary/bitbucket.org/swagger.json\n  Take a look here for easily turning builtin literals to pointer values:\n\nhttps://github.com/go-swagger/go-swagger/blob/master/swag/convert_types.go\n\nIn the spec you shared `application/json` and `application/json; charset=utf-8` are the same thing. In fact when a mime type starts with application it's kind of expected that the content it describes is unicode. So you should be able to safely drop the charset=utf-8 from the media type.\n  The 3rd case is an invalid case because you can't use $ref in that position according to the swagger specification json schema.\n And thanks for this very nice bug report btw. \n  duplicate of #175 \nand I can't reproduce this with the code on master\n  fixed by 82666990b023f668ea6d7f4bfb3ffbcb7c95d3ac\n  Fully support the auth schemes by swagger in the client generation.\n\nOAuth2 authentication for clients in golang is most probably only applicable to these grant types:\n- resource owner password\n- client credentials for an application using its own API\n- refresh token flow\n\nSo the client should know how to get to an access token for those grant types, and the client needs to get a config option for the default grant type.\n\nIn addition to those forms of token exchanges the client also needs to support the bearer token scheme.\n\n2FA is out of scope for the moment.\n implemented by allowing people to provide their own http client go-openapi/runtime#21  The spec you linked doesn't actually validate:\n\n```\ngit:(master) \u2717 !? \u00bb swagger validate https://gist.githubusercontent.com/mephux/474d9512cbe54411900f/raw/126932f41177b76df44bbd1199f22ad6a28ff2a8/kube.json\nThe swagger spec at \"https://gist.githubusercontent.com/mephux/474d9512cbe54411900f/raw/126932f41177b76df44bbd1199f22ad6a28ff2a8/kube.json\" is invalid against swagger specification 2.0. see errors :\n- object has no key \"integer\"\n```\n\nSo in that spec I see a bunch of $ref: \"integers\" that shouldn't be the case. Those should be types not $refs.\nOnce you include a $ref in a json object the rest of the json object has to be ignored, those are the json schema rules.\n Currently my validator isn't super fast but you're right I should make it validate before generating and let people opt-out by specifying --skip-validation\n\nThe main reason for a spec needing to be valid is that there are a some rules that have to be followed and having a valid spec ensures that those are consistent.\nSo in terms of figuring out what is wrong I'd say it starts with a valid spec doc :).\n  generate ffjson code for structs where its possible\n  Add support for using instead of net/http https://github.com/valyala/fasthttp\n not a priority because it essentially means a rewrite of runtime/middleware to accomodate the request/response of fasthttp.\r\nOther than that there is already a compatibility layer in fasthttp which allows it to serve plain http.Handler which we expose already  thanks :+1: \n  There is an example at the bottom of this page: \nhttp://goswagger.io/generate/server/\n  when a value is marked allowEmptyValue then the key should be sent. It is a hint for nullability, for some applications the absence of a key is treated different from the absence of a value.  \n\nSo is the issue you're describing here with an allowEmptyValue of true or false?\n then the code that is generated is the code that it should generate. If you don't want it to add the key to the request, the spec should be defined with not required and   allowEmptyValue of false.\n can this be closed?\n going with yes because of crickets\n  thanks @aleksandr-vin :+1: \n  Thanks :+1:  \n  yeah you're right. I'll remove it again, forgot I went with Nr instead.\nI wanted to translate things like 16x16 to SixteenBySixteen and 16+16 to SixteenAndSixteen but decided too much clever\n  I want to have a first release out by january. Now this is largely a volunteering effort so I don't want to commit to an actual date, for as long as there aren't many people contributing to this repository.\nIt says the project is sponsored by vmware, but that mostly means that I get to work on it from time to time during working hours. I have other responsibilities there too so it's not like they let me work in it full-time.\n\nI've made 3 initial milestones for this project and I'm still working on the first one, which is arguably the hardest one because it needs to get the spec implementation ready.\nAt this point the API is largely stable, there are a few things to iron out in models code generation, and as you're aware certain things are passing validation and they don't necessarily have to.\n\nSo in short, I'm looking for help :) the more help I get the quicker the releases come. Submitting bugs is already great help. \n\nhttps://github.com/go-swagger/go-swagger/milestones\n\nWith the exception of showstoppers the issues for the \"first release milestone\" are frozen.\n There are binary releases available now. You can get swagger in a variety of ways without having to build it from source.\n  :+1: Thanks a lot  \n\ncontributes to https://github.com/go-swagger/go-swagger/issues/153\n\nThere are probably a few more issues for running this on windows\n  The default value in this spec should be an object not a string. The error message could be better though.\n  is this an issue? because because each `PricingComponent` implementation will have its own MarshalJSON and UnmarshalJSON implementation.\nhave you seen it actually output bad data?\n  this is a new issue or at least it's different from the one that's reported. But it is a bug\n  can you add a test in the type resolvers tests that makes sure the isNullable method works for both keys?\nMostly to have this behavior described by tests so that people don't accidentally delete it in the future as part of unrelated work.\n  Add HTTP/2 support\n\nThis probably has several parts to it:\n- ensure that a http 1 style rest API can be served\n- allow the client to use streaming so that connections are shared efficiently\n- extend the spec with the ability to describe a series of possible push messages (see #150)\n- add push strategies \n yeah that would be the client generated or at least the runtime for the generated client.\n k will close this ticket then :)\nThanks for the info!\n  Add a diff command that can be used to inspect differences between 2 swagger specs.\n\nhttps://github.com/civisanalytics/swagger-diff\n yes it is of great interest to me  Add support for server sent events\n\nThis includes a proposal to swagger-spec repo for an extension.\n\nServer sent events are a specific mime type, currently in swagger 2.0 there is no support for different responses based on request criteria like content type.\n\nIn this proposal the idea is that the only possible response from that endpoint is a sse-eventstream\n\n``` yaml\npaths:\n  /:\n    get:\n      produces: [\"text/event-stream\"]\n      responses:\n        default:\n          description: example of defining events for sse \n          schema:\n            type: object\n            x-events:\n              added:\n                type: object\n                properties:\n                  message:\n                    type: string\n                  createdAt:\n                    type: string\n                    format: date-time\n              updated:\n                type: object\n                  properties:\n                    previous:\n                      type: string\n                    newValue:\n                      type: string\n                    updatedAt:\n                      type: string\n                      format: date-time\n```\n\nrelated: https://github.com/swagger-api/swagger-spec/issues/396\n  look into dynamically building a protobuf message, add generators as custom serializers\n I think it would mostly mean getting a consumer and producer for protobuf. (json: https://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/httpkit/json.go)\nhttps://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/generator/support.go#L346-L360\n\nAnd adding struct tags to the fields:\nhttps://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/generator/templates/structfield.gotmpl#L2\nhttps://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/generator/templates/schemabody.gotmpl#L6\n\nThere are cases where you'd have to provide a custom serializer (allOf) (you can generate anonymous structs etc to get the right protobuf out).\n\nhttps://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/generator/templates/tupleserializer.gotmpl\nhttps://github.com/go-swagger/go-swagger/blob/fada99442c6b8ca0d1dd46762d7fcfb2f20a5583/generator/templates/additionalpropertiesserializer.gotmpl\n  it already works this way.\nThere is no param type json but the anntotations you provide should in fact work in that way.\n At this moment I'm inclinded to say that this is an optimization with pretty low ROI. But I'll leave the ticket open, and if more people want it they should put their +1 here.\n It was never spelled out in this thread why it is the way it is, so here it goes:\n\nThe reason a body struct is wrapped atm is because for swagger a response is headers + body, and so my scanner wants to preserve that behavior.\n\nI wouldn't refuse a PR that addresses this through a `swagger:bodyResponse` annotation instead of `swagger:model` or `swagger:response`\n  it might be nice to be able to generate a CLI from a swagger spec.\n\nit could use the same syntax as httpie for specifying params in different positions.\n\nPerhaps it can make use of pygments when present to colorize the output for a better experience.\n\nThe generator could also generate a bash and zsh completion document for better usability\n there is also this: https://github.com/tikalk/commandcar\n\nobviously it's not go and not as semantically nice but it's an option to get a CLI right now\n This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi\n  I would say it implements what you asked for. it has some logic for deciding when to turn a value into  pointer. This is represented by the IsNullable property. it actually looks at the defined validations to make this decision.\nSo the value of minLength etc affects it.\n  There are 2 ways to set the host and you can choose which one you like best.\n\nThe first one as you discovered is altering the swagger spec document.\nThe second one is:\n\n``` go\napiclient.Default.Transport.Host = config.Host\n```\n I'm sorry that doesn't work, it's this:\n\n``` go\nimport (\n  httptransport \"github.com/go-swagger/go-swagger/httpkit/client\"\n  apiclient \"github.com/jawspeak/go-stash-restclient/client\"\n)\n\nfunc ConfigHost() {\n  // do stuff that reads the json config\n\n   // load the swagger spec from embedded document\n  doc, err := spec.New(apiclient.SwaggerJSON, \"\")\n  if err != nil {\n    log.Fatal(err)\n  }\n\n  transport := httptransport.New(doc)\n  transport.Host = config.Host\n\n  apiclient.Default.SetTransport(transport)\n}\n```\n I added the config options etc to the documentation page of the client on the site too\n  I agree that this is a good thing to have, at least a way to order that's not alphabetical.\nBut for now the implementation uses a map and there is no weight option defined yet, so alphabetical is the only way to get a stable sort (and stable diffs across generations)\n\nI think it would require adding a vendor extension x-weight or changing the object model for swagger to not use maps and use slices with some convenience methods \n  Add a command that lets people know when there is an update\n i mean you will be able to do \n\n```\nswagger check-update\n```\n\nand then it will check the value of the current binary version against the value of the latest version known on github and print either \"up to date, carry on\" or \"out of date, you can run go get -u github.com/go-swagger/go-swagger/cmd/... to update to the latest version\". \n This seems like a nice way to deal with it:\n\nhttps://github.com/sanbornm/go-selfupdate\n  this was implemented in the 0.7.x version  look into using shippable, and publishing a set of docker images that make working with swagger easier\n circle ci now supports docker images. not moving to shippable\n  it means that when you generate a server you must do this in a location inside the [GOPATH](https://golang.org/doc/code.html).\ngo-swagger uses the go build infrastructure so it needs to be able to resolve dependencies etc.\n if you put your code in the configure_XXX.go file then it won't get overwritten\n to use the client, yes you need your own main()\nThe code usage is documented a bit here, please let me know of any difficulties you encounter with that:\nhttp://go-swagger.github.io/generate/client/\n for your own sanity please join: https://slackin.goswagger.io/\n for a client for a todo list, you want to use the client facade which is going to be in the ./client package\n\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/todo-list/client/to_do_list_client.go#L15-L39\n\nThere you have 3 things that are immediately useful.\nIf you don't have to change or configure a thing then you can go with the Default one, no setup is required.\nIf you're sure you're going to work with HTTP (atm I'm guessing this is 100% of the cases) then the NewHTTPClient() might work fine for you.\n\nif you need more customization then you are required to pass in a transport and so on. This is mostly because after the first release it is getting different transports and I want them to be a matter of config.\n  fixed by: b73a1c8351724660a983e177343fbdcfc613581f\n  The swagger: annotation comments are only detected at the beginning of a line.\n\nStrictly speaking the swagger:model annotation isn't needed unless you want to rename model to something with lower case or something else.\n\nfor the response part I think you need a little bit more glue.\n\n``` go\npackage models\n\n// Entity \n// swagger:model \ntype Entity struct {\n    arangolite.Document\n    Created     *time.Time `json:\"created,omitempty\"`\n    LastUpdated *time.Time `json:\"lastUpdated,omitempty\"`\n    Type        *string    `json:\"type,omitempty\"`\n}\n```\n\n``` go\npackage controllers\n\n// swagger:response listEntityResponse\ntype listEntityResponse struct {\n  // in: body\n  Payload []Entity\n}\n\n// Find \n// swagger:route GET /entities find entities\n// Responses:\n//  200: listEntityResponse\nfunc (c *EntitiesCtrl) Find(w http.ResponseWriter, r *http.Request) {\n    userID, err := c.pg.GetUserID(r)\n    if err != nil {\n        c.r.JSONError(w, http.StatusUnauthorized, errs.API.Internal, err)\n        return\n    }\n\n    filter, err := c.pg.GetFilter(r)\n    if err != nil {\n        c.r.JSONError(w, http.StatusBadRequest, errs.API.FilterDecoding, err)\n        return\n    }\n\n    entities, err := c.i.Find(userID, filter)\n    if err != nil {\n        switch err.(type) {\n        case errs.ErrInvalidFilter:\n            c.r.JSONError(w, 422, errs.API.InvalidFilter, err)\n        default:\n            c.r.JSONError(w, http.StatusInternalServerError, errs.API.Internal, err)\n        }\n        return\n    }\n\n    c.r.JSON(w, http.StatusOK, entities)\n}\n```\n By forcing you to use go code to document your API you ensure that if you were to rename your models.Entity struct, compilation of your API would fail and your documentation is kept up to date wrt to type information.\n\nSo I didn't want to reinvent the type system, and I think ultimately it leads to less work than more work. I also don't think of documentation as just being comments, documentation is what it is ultimately rendered not how you define it.  (eg. go's example functions)\n\nBy allowing you to specify the doc comment you tried to use first we'd have introduced more maintenance burden than is absolutely required and we'd have made the go-swagger code even more complex, for a feature that's one of the major features of the go language: static type checking. \n\nIn swagger a response is always headers + body with an optional status code. If you choose to not define any headers that's fine, but it just means there are no response headers as part of the contract your service makes with the world.\n  :100: for weirdness on this one\n This has to do with operations that are currently lacking an operation ID.\nUnfortunately swagger defines those as optional, but it should do better name mangling\n I can't fix this because the reason for this is that there are duplicate operationIds defined. They have to be globally unique to the specification, not just to the tag.\n\nfrom [the swagger spec](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#fixed-fields-5) for operationId:\n\n> Unique string used to identify the operation. The id MUST be unique among all operations described in the API. Tools and libraries MAY use the operationId to uniquely identify an operation, therefore, it is recommended to follow common programming naming conventions.\n this issue has some more context about it: \nhttps://github.com/swagger-api/swagger-spec/issues/381\n  generate tests for generated code based with data generators from #98\n This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi\n related: #98\n I guess they only differ on what the assertions are that are being made  generate quasi meaningful random data for parameters, models and headers.\n - https://github.com/zach-klippenstein/goregen\n- https://github.com/dvyukov/go-fuzz\n- https://github.com/manveru/faker\n- https://github.com/Pallinder/go-randomdata\n- https://github.com/google/gofuzz\n There are 2 places where this is useful.\n\nScenario 1 (and that's the one we're after with this ticket)\n\nYou have several teams: 1 html5, 1 ios, 1 android, 1 backend \n\nYou start a new project and you need to stub data, instead of the backend team being a bottleneck. people can plug in the handlers that generate quasi meaningful random data and they can build their UI's with not every text field looking like crap.\n\nYou want to play with an API but locally, you get the swagger spec and genreate a stub API.\n This ticket is labeled with raspberry pi 3 bounty. Solve the ticket and I'll send you a pi\n @casualjim just to keep trace of our discussion on slack, we discussed the possibility to build on top of this : https://github.com/meqaio/swagger_meqa\r\n\r\nI do not compete for the PI (\ud83e\udd47 ) if the offer still stands... but I'll have a thorough look at it in the forthcoming weeks, since API excercising is an essential piece in my own works.\r\n\r\nJust to start with, I would suggest the following requirements:\r\n- make it a standalone project, with as small footprint as possible on the go-swagger itself (including dependencies and vendoring)\r\n- as such, it could be just a set of custom templates on top of swagger + the meqa stuff\r\n- should be able to exercise end-to-end as well as unit test different layers of the API server\r\n- should be pluggable in our CI to exercise all provided examples\r\n- not be on the critical path to go-swagger V1.0 release\r\n\r\n[I'll edit this post when more ideas come]\r\n\r\nLooking forward to your insight.\r\n\r\nFred  Currently this uses gorilla's context to provide storage for request specific information.\nExplore using net.Context and a deadline for this instead.\n it's this package: https://godoc.org/golang.org/x/net/context\n  I think that should be fixed now, made it reference with https \n\nsorry about that\n I can't reproduce this :(\n\n``` shellsession\n\u00b1 ivan@aether:~/go/src/github.com/go-swagger/go-swagger\ngit:(issue-22) \u2717 !? \u00bb docker pull golang\n...\nStatus: Downloaded newer image for golang:latest\n\n\u00b1 ivan@aether:~/go/src/github.com/go-swagger/go-swagger\ngit:(issue-22) \u2717 !? \u00bb docker run --rm -it golang go get -u github.com/go-swagger/go-swagger/... && echo \"$?\"\n0\n```\n I've replaced the submodules with subtree integrations and things seem to work now.\n\nIt appears to be unhappy because the submodules have a .git file, perhaps it's this thing https://github.com/golang/go/issues/7764\n  this might be a duplicate of #21 \n  I'm going to close this issue because the information from these commits have been added to the master branch here.\n  thanks!\n  would it be possible to show me the spec?\n this might be because of lack of a space between the colon after a key and the value\n\nresults in the error:\n\n``` yaml\ndefinitions:\n  error:\n    type: object\n    required:\n      - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type:string\n```\n\ncorrect: \n\n``` yaml\ndefinitions:\n  error:\n    type: object\n    required:\n      - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type: string\n```\n considering there was no answer for this long, I'm going to close this and assume there was a resolution.\n run the generation process with: DEBUG=1 SWAGGER_DEBUG=1 the problem with line numbers and so on is not the problem in go-swagger it's with the stdlib json and go-yaml implementations.\r\nif you're able to share the spec I may be able to help you out but for now we have no control over linenumbers and character positions because we are reliant on the way go's stdlib json library works. I'm open to any suggestions on making this better because I know it's a problem  you mean like after generating, how to use it to make calls to the API you generated a client for?\n\nI have as top priority now writing a documentation site, I will do this this weekend.\nI'll try to write a sample for it in a couple of hours, once the day job ends :)\n you want to pass in this guy:\n\nhttps://github.com/go-swagger/go-swagger/blob/master/httpkit/client/runtime.go#L31\n\nThe idea is that there are other transports later on like nanomsg, zeromq, websocket and so on.\n example is here: http://go-swagger.github.io/generate/client/\n  Doesn't seem to scan \n\n``` go\n// swagger:response resp\ntype Resp struct {\n  User User\n}\n```\n\nIt's totally possible that this is better handled through documenting usage, but add a test to verify the right thing happens with the right annotations\n if I follow the packages then the makeplans.Booking model lives in a different repo is that right?\nAnd one is a git repo and the other a mercurial one?\n in that gist there is no mention of booking responses besides the mention in the route comment. I'm assuming in the actual code there is a thing like:\n\n``` go\ntype BookingResponses []BookingResponse\n```\n In the end the generated spec has a faulty ref where it uses the model instead of the response as $ref. Manual editing fixes this\n\n``` diff\n     \"BookingResponse\": {\n       \"description\": \"BookingResponse represents a scheduled appointment\",\n       \"schema\": {\n-        \"$ref\": \"#/definitions/Booking\"\n+        \"$ref\": \"#/definitions/BookingResponse\"\n       }\n     }\n   }\n```\n I can't reproduce this problem.\n\nfor the code in that gist I get the following spec.\n\n``` json\n{\n  \"consumes\": [\n    \"application/json\"\n  ],\n  \"produces\": [\n    \"application/json\"\n  ],\n  \"schemes\": [\n    \"https\"\n  ],\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"description\": \"the purpose of this application is to provide an application\\nthat is using plain go code to define an API\",\n    \"title\": \"API.\",\n    \"version\": \"0.0.1\"\n  },\n  \"host\": \"localhost\",\n  \"paths\": {\n    \"/admin/bookings/\": {\n      \"get\": {\n        \"consumes\": [\n          \"application/json\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"schemes\": [\n          \"http\",\n          \"https\"\n        ],\n        \"tags\": [\n          \"booking\"\n        ],\n        \"summary\": \"Bookings lists all the appointments that have been made on the site.\",\n        \"operationId\": \"Bookings\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/BookingResponse\"\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"Booking\": {\n      \"description\": \"A Booking in the system\",\n      \"type\": \"object\",\n      \"required\": [\n        \"id\",\n        \"Subject\"\n      ],\n      \"properties\": {\n        \"Subject\": {\n          \"description\": \"Subject the subject of this booking\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"description\": \"ID the id of the booking\",\n          \"type\": \"integer\",\n          \"format\": \"int64\",\n          \"x-go-name\": \"ID\",\n          \"readOnly\": true\n        }\n      },\n      \"x-go-package\": \"github.com/go-swagger/scan-repo-boundary/makeplans\"\n    }\n  },\n  \"responses\": {\n    \"BookingResponse\": {\n      \"description\": \"BookingResponse represents a scheduled appointment\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/Booking\"\n      }\n    }\n  }\n}\n```\n  thanks for the effort :100: \n  provided as part a comment on issue #72, it incorrectly detects this as an object with additional properties.\n\n``` yaml\n  RunParameters:\n    additionalProperties: false\n    type: object\n    description: Optional run parameters for activating the build trigger\n    properties:\n      branch_name:\n        type: string\n        description: '(SCM only) If specified, the name of the branch to build.'\n      refs:\n        type: object\n        description: '(SCM Only) If specified, the ref to build.'\n      commit_sha:\n        type: string\n        description: '(Custom Only) If specified, the ref/SHA1 used to checkout a git repository.'\n```\n I'm going to keep it there, this is coming from a spec that is in use in the actual world.  The JSON Schema definition of the swagger spec allows it, should that change I'll update support for it too.\n\nhttps://github.com/swagger-api/swagger-spec/blob/master/schemas/v2.0/schema.json#L988-L998\n  thanks for this spec, it has exposed some other issues with anonymous objects and their validations. \nI've pushed the fix for this particular issue but it will still generate code that won't compile at this stage. \nIf it's urgent you can make some edits manually \n\nfor NewProtoType i had to add an enum validation:\n\n``` go\npackage models\n\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\n\nimport (\n    \"encoding/json\"\n\n    \"github.com/go-swagger/go-swagger/errors\"\n    \"github.com/go-swagger/go-swagger/httpkit/validate\"\n    \"github.com/go-swagger/go-swagger/strfmt\"\n)\n\n/*\nDescription of a new prototype\n\nswagger:model NewPrototype\n*/\ntype NewPrototype struct {\n\n    /* Repository creating user to whom the rule should apply\n     */\n    ActivatingUser struct {\n\n        /* The username for the activating_user\n\n        Required: true\n        */\n        Name string `json:\"name\"`\n    } `json:\"activating_user,omitempty\"`\n\n    /* Information about the user or team to which the rule grants access\n\n    Required: true\n    */\n    Delegate struct {\n\n        /* Whether the delegate is a user or a team\n\n        Required: true\n        */\n        Kind string `json:\"kind\"`\n\n        /* The name for the delegate team or user\n\n        Required: true\n        */\n        Name string `json:\"name\"`\n    } `json:\"delegate\"`\n\n    /* Role that should be applied to the delegate\n\n    Required: true\n    */\n    Role string `json:\"role\"`\n}\n\n// Validate validates this new prototype\nfunc (m *NewPrototype) Validate(formats strfmt.Registry) error {\n\n    var res []error\n\n    if err := m.validateActivatingUser(formats); err != nil {\n        res = append(res, err)\n    }\n\n    if err := m.validateDelegate(formats); err != nil {\n        res = append(res, err)\n    }\n\n    if err := m.validateRole(formats); err != nil {\n        res = append(res, err)\n    }\n\n    if len(res) > 0 {\n        return errors.CompositeValidationError(res...)\n    }\n\n    return nil\n}\n\nfunc (m *NewPrototype) validateActivatingUser(formats strfmt.Registry) error {\n\n    if err := validate.Required(\"activating_user\"+\".\"+\"name\", \"body\", string(m.ActivatingUser.Name)); err != nil {\n        return err\n    }\n\n    return nil\n}\n\nfunc (m *NewPrototype) validateDelegate(formats strfmt.Registry) error {\n\n    if err := validate.Required(\"delegate\"+\".\"+\"kind\", \"body\", string(m.Delegate.Kind)); err != nil {\n        return err\n    }\n\n    if err := m.validateKindEnum(\"delegate\"+\".\"+\"kind\", \"body\", m.Delegate.Kind); err != nil {\n        return err\n    }\n\n    if err := validate.Required(\"delegate\"+\".\"+\"name\", \"body\", string(m.Delegate.Name)); err != nil {\n        return err\n    }\n\n    return nil\n}\n\nvar newPrototypeRoleEnum []interface{}\n\nfunc (m *NewPrototype) validateRoleEnum(path, location string, value string) error {\n    if newPrototypeRoleEnum == nil {\n        var res []string\n        if err := json.Unmarshal([]byte(`[\"read\",\"write\",\"admin\"]`), &res); err != nil {\n            return err\n        }\n        for _, v := range res {\n            newPrototypeRoleEnum = append(newPrototypeRoleEnum, v)\n        }\n    }\n    return validate.Enum(path, location, value, newPrototypeRoleEnum)\n}\n\nfunc (m *NewPrototype) validateRole(formats strfmt.Registry) error {\n\n    if err := validate.Required(\"role\", \"body\", string(m.Role)); err != nil {\n        return err\n    }\n\n    if err := m.validateRoleEnum(\"role\", \"body\", m.Role); err != nil {\n        return err\n    }\n\n    return nil\n}\n\nvar newPrototypeKindEnum []interface{}\n\nfunc (m *NewPrototype) validateKindEnum(path, location string, value string) error {\n    if newPrototypeKindEnum == nil {\n        var res []string\n        if err := json.Unmarshal([]byte(`[\"user\",\"team\"]`), &res); err != nil {\n            return err\n        }\n        for _, v := range res {\n            newPrototypeKindEnum = append(newPrototypeKindEnum, v)\n        }\n    }\n    return validate.Enum(path, location, value, newPrototypeKindEnum)\n}\n```\n\nand for RunParameters I had to change unmarshal\n\n``` go\npackage models\n\nimport \"encoding/json\"\n\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\n\n/*\nOptional run parameters for activating the build trigger\n\nswagger:model RunParameters\n*/\ntype RunParameters struct {\n\n    /* (SCM only) If specified, the name of the branch to build.\n     */\n    BranchName string `json:\"branch_name,omitempty\"`\n\n    /* (Custom Only) If specified, the ref/SHA1 used to checkout a git repository.\n     */\n    CommitSha string `json:\"commit_sha,omitempty\"`\n\n    /* (SCM Only) If specified, the ref to build.\n     */\n    Refs map[string]interface{} `json:\"refs,omitempty\"`\n}\n\n// UnmarshalJSON unmarshals this object with additional properties from JSON\nfunc (m *RunParameters) UnmarshalJSON(data []byte) error {\n    // stage 1, bind the properties\n    var stage1 RunParameters\n    if err := json.Unmarshal(data, &stage1); err != nil {\n        return err\n    }\n    *m = stage1\n\n    // stage 2, remove properties and add to map\n    //if err := json.Unmarshal(data, &stage2); err != nil {\n    //return err\n    //}\n\n    //delete(stage2, \"branch_name\")\n\n    //delete(stage2, \"commit_sha\")\n\n    //delete(stage2, \"refs\")\n\n    //m.Refs = stage2[\"refs\"]\n\n    return nil\n}\n\n// MarshalJSON marshals this object with additional properties into a JSON object\nfunc (m RunParameters) MarshalJSON() ([]byte, error) {\n    // make JSON object for known properties\n    props, err := json.Marshal(m)\n    if err != nil {\n        return nil, err\n    }\n\n    return props, nil\n\n}\n```\n\nI'll try to fix those too\n I've put the remaining things from this issue in new issues, so closing this one\n I'm able to generate a client for quay.io that compiles off the spec, without requiring edits\n  instead of requiring 2 headers, if you're going to do versioning through headers. it should be in your media type.\nSo you want something like: application/vnd.company.app-v1+json\n You can add headers to responses and to parameters. Those can in turn be shared to a certain degree through the use of $ref\n\nFrom the swagger specification:\n- [Content Types](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#mime-types)\n- [Fixed fields on parameter object](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#fixed-fields-7)\n- [Fixed fields on response objects](https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#fixed-fields-10)\n\nIf you think the specification would be improved by adding global headers to the API, you can submit an issue at the [swagger-spec](https://github.com/swagger-api/swagger-spec) repo, there are many more people following that repository and it will get a discussion going.\n  O I get it now. You still have to reference your parameter. The global parameters are not defaults for every operation. They are like a databag to share, but you still have to provide a $ref to the named parameter if you want to use them\n because there is nothing to fix, see my comment. You have to still refer to them as $ref wherever you want to use them.\nWhatever you define in the parameters property at the top level is like definitions, they  aren't defaults for every single operation in your spec.\n  afaik I'm allowed to just ignore invalid things, this could be a validation error though, is that what you mean?\n  duplicate of issue #16 \nduplicate of issue #18 \n\nthe invalid example is a valid issue, ideally this would have just contained that one issue as the other ones are already known\n  ah here it's actually expected.\nTo get a pointer here the spec should read:\n\n``` yaml\n'/order':                                                                                \n  post:                                                                                  \n    tags: ['order']                                                                      \n    operationId: 'postOrder'                                                             \n    summary: 'Creates a new Order.'                                                      \n    parameters:                                                                          \n      - name: 'order'                                                                    \n        in: 'body'                                                                       \n        required: false                                                                   \n        schema: { '$ref': '#/definitions/OrderPlacement' }  \n```\n  The items property is required for an array.\nA $ref hijacks everything in the object so the type array shouldn't even be picked up\n\n``` json\n{ \n  \"responses\": {\n     \"200\": {\n       \"description\": \"Success\",\n      \"schema\": {\n          \"type\": \"array\",\n          \"items\": {\n             \"$ref\": \"#/definitions/DeleteResponse\"\n          }\n       }\n    }\n  }\n}\n```\n could you get me the entire spec? it would be helpful to see the context around the children thing.\n Hi thanks for the context, I think this is a bug related to the java implementation of swagger, which is another project under another organization.\nI think you'll find that the people (@fehguy) from the swagger-core project might be able to help you better, I'm not familiar with the java implementation and its frameworks.  https://github.com/swagger-api/swagger-core \n  You can take a look here:\n\nhttps://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/petstore\n\nthere are a few more issues to work out with the generation of a server and client before I can work on the docs and provide proper examples. (see #5)\n\nThis one is not a fully functional API but it shows all the annotations in use:\n\nhttps://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/classification\n http://go-swagger.github.io/generate/spec/\n  I botched a merge this weekend and I'm catching up. Please keep submitting issues as you find them though.\n\nIf it's critical to what you're trying to do, the latest working version of the server generator was: 797d4ba\n  I botched a merge this weekend and I'm catching up. Please keep submitting issues as you find them though.\n\nIf it's critical to what you're trying to do, the latest working version of the server generator was: 797d4ba62b1\n  Yes I'll try to fix some this weekend.\nThe swagger version fix is relatively easy, haven't really looked into the other one yet\n\nThis is the cause for the first one: https://github.com/go-swagger/go-swagger/blob/master/spec/spec.go#L124-L126\n  Would the following solution work better (not yet implemented though)\n\n```\nresponses:\ndefault:errorResponse:Generic Error\n200:photoResponse:multi word description\n```\n In the end it was easier to just reuse the documentation on the response struct. So that's what it is doing. It's not using the syntax proposed earlier.\n  the server generator on master now supports the response model part of this issue.\nStill no way to set the reason\n Looks like there won't be a way to set the response reason for the go http server.\n\nClosing this now:\nhttps://github.com/golang/go/issues/8990\n  at this point we make use of the go loader package. This allows us to discover your application and which files to scan for the doc comments. \n\nThis application needs to read composed structs and so on, and it's a lot easier to interrogate the application if you know where all the files are and not just the ones you created in this particular folder.\nUnfortunately it does require to be able to read   \n\nHow about a main class that doesn't require appengine imports? \nI've personally never used appening so I don't really know what is involved. \n I guess what I mean is if your code doesn't compile, how are you running it?\nAnd what I also meant is; if this is important to you, you could look at forking and submitting a pull request.\nI, personally, still have a bunch of other things that need fixing in here before I want to look at a niche like appengine. \n but the custom sdk they use also includes a custom go command doesn't it?\nI think the problem you're having is related to your GOPATH content and can be fixed there.\n\nafaik go always needs to compile your stuff, whether that's in the SDK env or not, have you tried installing go-swagger in the SDK provided GOPATH? \n\nI'll leave this open so i can track this\n  the work around is simple: just start with a swagger.json file that has the missing bits.\n fixed by 00053a5aa\n  I can't find it here as being supported: https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#definitionsObject\n\nI'll ask though and see if perhaps it should be.\n There has been a bunch of discussion on these things in the swagger-spec repo. But as things stand, while json schema supports it, it's not supported for swagger at this point.\nThe markdown document linked to earlier is the source of truth for the swagger 2.0 spec definition.\nit wouldn't be hard to support it, but swagger currently doesn't allow for it.\n\n@webron  can you confirm that what I wrote here is the actual state of affairs\n But you can reference to URL's not just to local files wherever you would reference the definition.\nThings don't need to be defined in 1 file, but you also don't strictly need to import global definitions. You can just reference remote entities\n\n``` json\n{ \"$ref\":  \"http://someurl.somewhere.example/#definitions/Person\" }\n```\n  as far as I know the items from this PR are incorporated in the code generation. Just this PR was never merged.\nWhat specifically is still changing order? Is it the properties on models or the operations? \n Going to close this pull request, the changes in here were manually merged\n  this should not render actually, this should throw an error.\n I think you can define your schema like this:\n\n``` yaml\npaths:                                                      \n  '/_debug':                                                \n    get:                                                    \n      tags: ['debug']                                       \n      operationId: 'getDebug'                               \n      summary: 'Debug route strictly for testing.'          \n      responses:                                            \n        '200':                                              \n          descrition: 'Debug result.'                       \n          schema:\n             anyOf:\n               - type: object\n               - type: arrray\n                 items:\n                   type: object\n```\n  yeah this one is in more places on the master branch. In the template-refactor branch there is no more upfront mangling of names\n this should now be fixed on master\n  you want the hostname format not uri format\n I updated the included schema for swagger. This now validates\n\n```\n\u00b1 ivan@aether:~/go/src/github.com/go-swagger/go-swagger\ngit:(master) \u00bb swagger validate https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json\nThe swagger spec at \"https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json\" is valid against swagger specification 2.0\n```\n  is this still an issue? what is the thing you're trying to achieve?\n This was for the grpc gateway project?\nDoes that work, does it require more work? \n  can you give me a few days to get my client branch integrated. I'm not worried about this particular feature as much as with how this can be done without having to change go-swagger for each thing people might find useful.\nI have resorted to annotations and scanning in template-refactor and gen-client branches.\n\nWhile sql might seem appropriate I don't know if I want go-swagger to have support for sql in the core of the project because not everybody uses sql at all and one goal is to keep dependencies of go-swagger very limited.\n\nI hope this makes sense? So if you take a look at where I'm going with this stuff in the template-refactor branch, and you can come up with a proposal that would play nice with those annotations and such. I would gladly merge it in.\n  I think somebody else submitted that PR earlier (the go generate bindata one)\n thanks!\n  I think this is no longer an issue so I'm going to close this one\n  I think somebody fixed that in #25 \n  I thnk they moved here: https://github.com/go-swagger/go-swagger/tree/master/httpkit/validate\n you could also try to pull in the templates for this from the gen-client branch. i fixed those things on there and the templates for the server shouldn't have changed.\n try running `go generate ./generator`  that should update the embedded templates.\nSorry don't have any docs about this stuff yet\n  thanks!\n  Thanks a lot, there are 2 test failures here. \nOne is related to the path change. \nThe other one I don't know why it does that but might be because of the same reason.\n  it will be fixed when I'm able to merge my branch back in. I'm no longer using // for comments :)\n this should be fixed now on master\n  Currently the generated server assumes that responses never define headers.\n I have this for the client on the template-refactor branch, but no such thing for the server yet\n  each security reference should contain only unique scopes (Warning)\n @casualjim need advice on this one: since scopes are keys, they are modelled as go maps.\r\nTherefore, we can't provide this check in the validate module.  Like the server this needs to support an entire swagger spec.\nUnlike the server this doesn't need an untyped version.\n pretty high up :)\n\nI'm currently writing tests for the generator stuff, to get my confidence level up. And the client is the one I want to get working first.\n :+1:  I'll let you know when I have something that might work \n @nmonterroso I don't intend for this to become a part of swagger-codegen.  I started out trying to get it to work with swagger-codegen, but as I got further in my implementation I first had to let go of the object model, then the mustache templates.\n\nThere are a number of reasons why that is: \n- I get to use go: fmt.Sprintf(\"%#v\", example) to get proper go representations of types for examples\n- Using mustache requires me to use multipass rendering, go templates allow me to render in 1 pass.\n- Reuse of mustache templates is fairly limited\n- I'm going to make use of static code analysis prior to generating certain models and so on. All of this would require a lot of extra work in java while it's much easier to do so in go.\n\nI also ran into some bugs in the codegen at that time. Trying to debug 3 languages (go, java and mustache) while not really knowing all the things I would need added more cognitive overhead than I was willing to deal with. \n\nI've only just worked out how to map all the possible type combinations that are supported in swagger to go.  Perhaps when it's all worked out there might a user who cares enough to port it to swagger-codegen. \n This branch will be sleeping for a while.\nIf you wanted experimental, this is it. It will generate a client for simple things.\n\nIn the mean time I'm working on the branch template-refactor, where I'm completing the generation of schema's to more idiomatic go. This is a bit more complex than I had anticipated, anyway it will go something like this:\n- defintion of primitive => type alias/name\n- defintion of array => type alias/name\n- definition of map => type alias/name\n- definition of object with properties => struct\n- definition of ref => type alias/name\n- object with only additional properties => map[string]T\n- object with additional properties and properties => custom serializer\n- schema with schema array in items => tuple (struct with properties {p1,p2,p3,...}, custom serializer)\n- schema with all of => struct\n  - all of schema with ref => embedded value\n  - all of schema with properties => properties are included in struct\n  - adding an all of schema with just \"x-isnullable\": true turns the schema into a pointer\n- schema with additional items and a single schema, nothing special happens it's an invalid schema\n- schema with additional items and multiple schema's in items => struct (like tuple but with an extra property for the additional items, custom serializer)\n\nI've got quite a bit of this working on that branch, but it breaks other templates at this moment.\nI have the custom structs, serializers and validators for this\n A quick update:\n\nI'm finally through most of the work for schemas. Currently adding support for enum validations in all allowed positions.  \nsupporting additionalItems and additionalProperties specifically across the board has been less than trivial. \nSo I hope to finally be able to merge and close this issue in a couple of days\n  There is a strfmt.Password now. closed with #7\n", "text_all_count": 40058, "text_word_token": ["Without", "any", "proper", "spec", "example", "we", "hardly", "can", "help", "you", "NUMBER", "Fix", "issue", "on", "simple", "params", "collections", "nested", "collections", "and", "default", "values", "NUMBER", "Applied", "same", "rules", "for", "headers", "in", "responses", "NUMBER", "_Supersedes", "PR", "NUMBER", "_", "Fixed", "issue", "fix", "NUMBER", "fix", "NUMBER", "duplicate", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "similar", "issue", "with", "nested", "arrays", "and", "default", "values", "in", "response", "headers", "this", "PR", "do", "NOT", "address", "know", "relate", "issue", "with", "client", "generation", "however", "urlbuilder", "now", "support", "collections", "and", "nested", "collection", "for", "path", "params", "On", "the", "ci", "test", "side", "x", "Reviewed", "CircleCI", "config", "to", "split", "the", "original", "script", "in", "several", "more", "tractable", "and", "visible", "steps", "x", "Reviewed", "the", "run", "canary", "NUMBER", "sh", "test", "vs", "valid", "invalid", "specs", "NUMBER", "Added", "some", "fix", "specs", "to", "move", "on", "further", "with", "generation", "test", "fix", "means", "that", "spec", "validation", "issue", "where", "correct", "to", "generate", "properly", "x", "Introduced", "new", "code", "generation", "build", "test", "on", "NUMBER", "fixture", "codegen", "some", "other", "fixture", "NUMBER", "The", "objective", "be", "to", "generate", "a", "server", "and", "build", "it", "Problem", "statement", "Whenever", "a", "schema", "declares", "a", "default", "value", "the", "corresponding", "generate", "structure", "be", "properly", "initialized", "like", "in", "yaml", "parameters", "in", "body", "name", "myBodyParam", "schema", "type", "object", "properties", "p", "NUMBER", "type", "string", "p", "NUMBER", "type", "integer", "default", "p", "NUMBER", "abc", "p", "NUMBER", "NUMBER", "However", "when", "defaults", "be", "declared", "at", "a", "lower", "level", "no", "initialization", "takes", "place", "as", "in", "yaml", "parameters", "in", "body", "name", "myBodyParam", "schema", "type", "object", "properties", "p", "NUMBER", "type", "string", "default", "abc", "p", "NUMBER", "type", "integer", "default", "NUMBER", "It", "looks", "like", "the", "schema", "term", "use", "in", "the", "json", "schema", "spec", "LINK", "fge", "json", "schema", "validation", "NUMBER", "section", "NUMBER", "has", "be", "taken", "to", "the", "letter", "make", "it", "equivalent", "to", "the", "swagger", "schema", "term", "NUMBER", "Steps", "to", "reproduce", "generate", "server", "with", "structures", "propose", "as", "examples", "and", "submit", "uninitialized", "body", "Environment", "swagger", "version", "x", "NUMBER", "x", "NUMBER", "x", "go", "version", "x", "NUMBER", "x", "NUMBER", "x", "OS", "I", "feel", "like", "issue", "NUMBER", "NUMBER", "NUMBER", "and", "NUMBER", "be", "closely", "relate", "and", "indicate", "shortcomings", "in", "model", "generation", "which", "be", "quite", "similar", "to", "those", "I", "be", "currently", "fix", "for", "simple", "parameters", "validation", "of", "nested", "structures", "and", "applying", "defaults", "NUMBER", "Looks", "very", "much", "like", "NUMBER", "Hello", "casualjim", "NUMBER", "This", "make", "me", "think", "of", "an", "issue", "I", "find", "when", "trying", "to", "generate", "from", "a", "canary", "spec", "which", "use", "mime", "types", "options", "eg", "application", "json", "xyz", "NUMBER", "Do", "we", "have", "a", "specific", "runtime", "strategy", "to", "deal", "with", "such", "options", "If", "you", "have", "any", "idea", "I", "suggest", "we", "continue", "this", "thread", "on", "issue", "NUMBER", "OK", "just", "fix", "it", "in", "my", "WIP", "branch", "NUMBER", "That", "would", "be", "in", "the", "PR", "NUMBER", "if", "you", "don", "t", "mind", "Does", "the", "explanation", "provide", "in", "NUMBER", "help", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "I", "had", "start", "some", "work", "on", "the", "go", "openapi", "validate", "package", "to", "cleanly", "deal", "with", "overflows", "and", "lossy", "conversions", "but", "it", "s", "still", "work", "in", "progress", "I", "believe", "it", "s", "relate", "to", "issue", "NUMBER", "NUMBER", "I", "don", "t", "think", "we", "be", "going", "to", "support", "bignum", "but", "at", "least", "we", "cleanly", "could", "detect", "overflows", "at", "validation", "time", "NUMBER", "Hello", "NUMBER", "With", "this", "commit", "you", "have", "the", "possibility", "to", "customize", "the", "initialisms", "upper", "cased", "words", "who", "want", "to", "keep", "in", "one", "piece", "NUMBER", "It", "should", "work", "as", "it", "use", "to", "with", "additional", "initialism", "SMS", "Problem", "statement", "Broken", "codegen", "on", "fixture", "Swagger", "specification", "NUMBER", "fixture", "codegen", "todolist", "NUMBER", "discriminators", "NUMBER", "yml", "Steps", "to", "reproduce", "bash", "swagger", "generate", "server", "spec", "NUMBER", "fixture", "codegen", "todolist", "NUMBER", "discriminators", "NUMBER", "yml", "name", "nrcodegen", "target", "NUMBER", "gen", "todolist", "NUMBER", "discriminators", "cd", "NUMBER", "gen", "todolist", "NUMBER", "discriminators", "cmd", "nrcodegen", "server", "go", "build", "Produces", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "fixture", "bug", "NUMBER", "gen", "todolist", "NUMBER", "discriminators", "models", "NUMBER", "NUMBER", "models", "kennel", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "call", "non", "function", "m", "NUMBER", "Pets", "type", "KennelPets", "NUMBER", "NUMBER", "models", "kennel", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "call", "non", "function", "m", "NUMBER", "Pets", "type", "KennelPets", "Environment", "swagger", "version", "current", "master", "go", "version", "NUMBER", "OS", "linux", "ubuntu", "NUMBER", "It", "looks", "like", "the", "troublemaker", "be", "located", "here", "LINK", "swagger", "go", "swagger", "blob", "dfe", "NUMBER", "aa", "NUMBER", "cd", "NUMBER", "ac", "NUMBER", "f", "NUMBER", "d", "NUMBER", "cdf", "NUMBER", "ae", "NUMBER", "dd", "NUMBER", "a", "NUMBER", "e", "NUMBER", "d", "NUMBER", "generator", "model", "NUMBER", "go", "L", "NUMBER", "This", "PR", "has", "be", "close", "and", "replaces", "by", "PR", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "duplicate", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "similar", "issue", "with", "nested", "arrays", "and", "default", "values", "in", "response", "headers", "this", "PR", "do", "NOT", "address", "know", "relate", "issue", "with", "client", "generation", "however", "urlbuilder", "now", "support", "collections", "and", "nested", "collection", "for", "path", "params", "On", "the", "ci", "test", "side", "x", "Reviewed", "CircleCI", "config", "to", "split", "the", "original", "script", "in", "several", "more", "tractable", "and", "visible", "steps", "x", "Reviewed", "the", "run", "canary", "NUMBER", "sh", "test", "vs", "valid", "invalid", "specs", "NUMBER", "Added", "some", "fix", "specs", "to", "move", "on", "further", "with", "generation", "test", "fix", "means", "that", "spec", "validation", "issue", "where", "correct", "to", "generate", "properly", "x", "Introduced", "new", "code", "generation", "build", "test", "on", "NUMBER", "fixture", "codegen", "some", "other", "fixture", "NUMBER", "The", "objective", "be", "to", "generate", "a", "server", "and", "build", "it", "casualjim", "I", "be", "well", "aware", "that", "this", "PR", "start", "with", "a", "very", "small", "change", "and", "be", "gradually", "growing", "NUMBER", "This", "was", "unexpect", "NUMBER", "So", "your", "review", "at", "this", "intermediate", "stage", "be", "welcome", "NUMBER", "Inspecting", "and", "thorough", "test", "the", "generate", "code", "for", "BindRequest", "for", "parameters", "showed", "out", "many", "shortcomings", "and", "generation", "bug", "e", "NUMBER", "g", "NUMBER", "arrays", "nested", "arrays", "default", "values", "special", "cases", "for", "Date", "Datetime", "or", "Duration", "NUMBER", "NUMBER", "This", "be", "the", "main", "reason", "why", "I", "had", "to", "muscle", "up", "the", "CI", "NUMBER", "So", "far", "we", "simply", "checked", "generate", "code", "with", "pattern", "NUMBER", "Now", "we", "should", "be", "able", "to", "check", "that", "it", "compiles", "NUMBER", "On", "my", "side", "I", "have", "a", "more", "advance", "test", "suite", "which", "unit", "test", "BindRequest", "with", "fixture", "and", "check", "that", "validations", "be", "well", "processed", "NUMBER", "I", "be", "planning", "to", "contribute", "this", "as", "an", "additional", "template", "with", "a", "gen", "test", "operations", "option", "for", "instance", "but", "it", "needs", "a", "lot", "of", "refactoring", "on", "my", "side", "to", "be", "generic", "currently", "it", "be", "very", "much", "targeted", "to", "my", "own", "usage", "since", "the", "unit", "test", "integrates", "an", "Hyperledge", "Fabric", "mock", "inside", "and", "checks", "the", "API", "response", "NUMBER", "NUMBER", "Sample", "fixture", "use", "to", "test", "this", "P", "NUMBER", "R", "NUMBER", "Obviously", "I", "haven", "t", "be", "able", "to", "generate", "such", "fixture", "automatically", "NUMBER", "json", "expectInvalid", "false", "params", "in", "query", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "in", "header", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "expectInvalid", "true", "params", "in", "header", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "expectInvalid", "true", "params", "in", "query", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "x", "y", "z", "u", "v", "w", "in", "header", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "expectInvalid", "true", "params", "in", "query", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "in", "header", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "x", "y", "z", "u", "v", "w", "expectInvalid", "true", "params", "in", "query", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "d", "e", "f", "g", "h", "i", "in", "header", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "expectInvalid", "true", "params", "in", "query", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "in", "header", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "d", "e", "f", "g", "h", "i", "expectInvalid", "true", "params", "in", "query", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "b", "d", "e", "f", "g", "h", "i", "in", "header", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "expectInvalid", "true", "params", "in", "query", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "in", "header", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "e", "g", "h", "i", "expectInvalid", "true", "params", "in", "query", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "in", "header", "name", "deepNested", "NUMBER", "value", "a", "NUMBER", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "expectInvalid", "true", "params", "in", "query", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "NUMBER", "g", "h", "i", "in", "header", "name", "deepNested", "NUMBER", "value", "a", "b", "c", "a", "b", "c", "d", "e", "f", "g", "h", "i", "fix", "NUMBER", "I", "have", "yet", "to", "update", "the", "doc", "NUMBER", "Coming", "up", "NUMBER", "This", "PR", "provides", "the", "generation", "part", "for", "NUMBER", "The", "fix", "will", "be", "effective", "with", "the", "validation", "part", "starting", "with", "go", "openapi", "validate", "NUMBER", "Plus", "Minor", "refactoring", "split", "format", "definitions", "reorder", "them", "and", "check", "they", "match", "definitions", "strfmt", "default", "registry", "e", "NUMBER", "g", "NUMBER", "for", "bsonobjectid", "split", "debug", "relate", "definitions", "some", "layout", "structuring", "in", "doc", "NUMBER", "go", "This", "PR", "provides", "the", "generation", "part", "for", "NUMBER", "The", "fix", "will", "be", "effective", "with", "the", "validation", "part", "starting", "with", "go", "openapi", "validate", "NUMBER", "Plus", "Minor", "refactoring", "split", "format", "definitions", "reorder", "them", "and", "check", "they", "match", "definitions", "strfmt", "default", "registry", "e", "NUMBER", "g", "NUMBER", "for", "bsonobjectid", "split", "debug", "relate", "definitions", "some", "layout", "structuring", "in", "doc", "NUMBER", "go", "fix", "NUMBER", "Also", "remove", "output", "on", "new", "unit", "test", "that", "have", "be", "add", "since", "I", "last", "cleaned", "the", "logs", "NUMBER", "fix", "NUMBER", "only", "assets", "fix", "NUMBER", "I", "think", "it", "s", "out", "of", "our", "scope", "to", "carry", "on", "this", "kind", "of", "rules", "NUMBER", "There", "be", "already", "so", "many", "things", "to", "do", "to", "adhere", "to", "one", "s", "specific", "use", "case", "NUMBER", "You", "may", "be", "interested", "in", "this", "to", "add", "in", "your", "toolchain", "LINK", "Alternatively", "you", "might", "be", "a", "fan", "of", "grunt", "NUMBER", "There", "be", "some", "go", "plugins", "to", "orchestrate", "build", "tasks", "NUMBER", "This", "be", "typically", "as", "place", "we", "you", "might", "insert", "a", "source", "concat", "plugin", "Yes", "NUMBER", "I", "test", "again", "and", "find", "the", "regression", "NUMBER", "PR", "NUMBER", "introduce", "a", "function", "BaseImportFunc", "in", "generator", "structure", "which", "cannot", "be", "rendered", "as", "JSON", "by", "dump", "data", "NUMBER", "We", "need", "a", "custom", "marshall", "that", "excludes", "unsupported", "types", "such", "as", "function", "interfaces", "NUMBER", "This", "thread", "would", "be", "a", "welcome", "addition", "to", "our", "FAQ", "LINK", "swagger", "go", "swagger", "blob", "master", "docs", "faq", "faq_spec", "NUMBER", "md", "This", "flag", "be", "indeed", "not", "support", "NUMBER", "We", "desupport", "this", "option", "and", "update", "the", "doc", "NUMBER", "Thanks", "NUMBER", "No", "more", "flag", "NUMBER", "Couldn", "t", "see", "why", "exactly", "but", "can", "point", "as", "to", "see", "where", "NUMBER", "It", "s", "in", "generator", "build_test", "NUMBER", "go", "This", "simulates", "a", "go", "get", "and", "build", "NUMBER", "Perhaps", "upgrading", "the", "test", "to", "use", "go", "get", "gopkg", "NUMBER", "in", "go", "swagger", "go", "swagger", "NUMBER", "current", "branch", "and", "retrieve", "the", "current", "branch", "from", "the", "build", "env", "I", "can", "see", "this", "time", "this", "be", "a", "spec", "validation", "test", "that", "fail", "NUMBER", "Wonder", "if", "it", "be", "a", "regression", "introduce", "my", "latest", "PR", "with", "spec", "valition", "NUMBER", "I", "ll", "test", "with", "this", "fixture", "docker", "spec", "NUMBER", "Strange", "I", "specifically", "made", "a", "test", "to", "run", "the", "spec", "validate", "through", "all", "these", "fixture", "in", "the", "go", "openapi", "validate", "package", "NUMBER", "I", "had", "a", "look", "at", "the", "fixture", "canary", "docker", "swagger", "NUMBER", "json", "specs", "which", "be", "blocking", "the", "UT", "it", "be", "considered", "invalid", "as", "for", "now", "for", "go", "swagger", "NUMBER", "It", "was", "already", "considered", "invalid", "when", "PR", "merge", "the", "new", "validate", "version", "NUMBER", "I", "don", "t", "understand", "why", "this", "be", "blocking", "the", "UT", "now", "since", "this", "has", "be", "a", "know", "fact", "for", "some", "time", "NUMBER", "Spec", "validation", "error", "be", "acceptable", "for", "now", "we", "ought", "to", "improve", "though", "so", "docker", "may", "use", "go", "swagger", "support", "for", "multiple", "types", "e", "NUMBER", "g", "type", "object", "array", "this", "be", "a", "bug", "in", "validate", "but", "I", "don", "t", "think", "it", "be", "new", "duplicate", "operationId", "this", "be", "a", "know", "limitation", "in", "go", "swagger", "operations", "must", "be", "globally", "unique", "while", "the", "spec", "state", "that", "path", "operationId", "must", "be", "unique", "I", "think", "we", "need", "an", "explanation", "on", "how", "suddenly", "the", "UT", "on", "validation", "requires", "this", "docker", "spec", "to", "be", "valid", "NUMBER", "It", "be", "in", "a", "sense", "but", "we", "can", "t", "support", "it", "yet", "NUMBER", "I", "must", "admist", "that", "this", "side", "effect", "of", "your", "otherwise", "unrelated", "change", "be", "hard", "to", "follow", "NUMBER", "I", "ll", "try", "to", "have", "a", "look", "over", "the", "we", "NUMBER", "First", "PR", "I", "made", "I", "had", "the", "kind", "of", "bizarre", "stuff", "from", "CI", "NUMBER", "It", "be", "a", "complex", "application", "indeed", "NUMBER", "diego", "fu", "hs", "to", "pass", "the", "CI", "CircleCI", "in", "NUMBER", "hack", "run", "canary", "NUMBER", "sh", "we", "must", "disable", "the", "docker", "spec", "dir", "docker", "We", "have", "actually", "two", "issue", "which", "be", "relate", "to", "my", "own", "previous", "PR", "and", "not", "yours", "NUMBER", "So", "I", "ll", "take", "care", "of", "fix", "them", "NUMBER", "For", "the", "AppVeyor", "CI", "I", "didn", "t", "find", "out", "NUMBER", "The", "fixture", "bug", "NUMBER", "test", "be", "expected", "to", "fail", "ok", "NUMBER", "Why", "we", "have", "a", "timeout", "I", "don", "t", "know", "NUMBER", "I", "could", "see", "all", "test", "where", "very", "long", "in", "this", "CI", "session", "NUMBER", "So", "maybe", "it", "was", "just", "unrelated", "NUMBER", "Let", "s", "run", "the", "CI", "again", "after", "a", "commit", "bump", "OK", "I", "understand", "better", "now", "NUMBER", "I", "suppose", "you", "have", "discussed", "with", "casualjim", "about", "remove", "the", "skip", "validation", "flag", "NUMBER", "However", "it", "has", "some", "impact", "on", "the", "CI", "since", "some", "test", "where", "specifically", "run", "in", "that", "grey", "zone", "of", "invalid", "specs", "for", "which", "a", "generation", "could", "be", "run", "NUMBER", "canary", "docker", "in", "NUMBER", "hack", "run", "canary", "NUMBER", "sh", "was", "one", "of", "them", "I", "suppose", "that", "the", "spec", "in", "NUMBER", "fixture", "bug", "NUMBER", "which", "do", "not", "validate", "be", "like", "this", "see", "run", "failure", "on", "AppVeyor", "In", "LINK", "openapi", "validate", "blob", "master", "swagger_test", "NUMBER", "go", "there", "be", "a", "full", "list", "of", "all", "fixture", "from", "the", "go", "swagger", "repo", "that", "do", "not", "validate", "use", "to", "test", "the", "validate", "package", "itself", "NUMBER", "Ok", "if", "I", "recap", "skip", "validation", "has", "an", "impact", "on", "the", "docker", "build", "circle", "ci", "since", "we", "attempt", "to", "generate", "specs", "that", "be", "not", "valid", "NUMBER", "This", "one", "should", "not", "be", "remove", "NUMBER", "skip", "validator", "grr", "I", "made", "the", "mistake", "too", "be", "not", "use", "and", "neither", "useful", "NUMBER", "Removing", "it", "from", "implem", "and", "doc", "should", "fix", "NUMBER", "Now", "about", "the", "go", "openapi", "validate", "package", "this", "P", "NUMBER", "R", "inspired", "me", "some", "todos", "there", "imp", "Support", "the", "construct", "type", "xxx", "array", "when", "checking", "every", "items", "refers", "to", "an", "array", "Simulate", "a", "go", "swagger", "merge", "in", "Travis", "and", "run", "the", "docker", "build", "script", "NUMBER", "This", "would", "be", "a", "non", "blocking", "Travis", "CI", "job", "just", "to", "check", "that", "a", "validate", "branch", "may", "be", "merge", "into", "go", "swagger", "without", "harming", "the", "CI", "NUMBER", "Fixes", "NUMBER", "I", "don", "t", "know", "NUMBER", "Still", "it", "be", "valuable", "to", "know", "that", "a", "big", "spec", "like", "docker", "we", "can", "t", "support", "it", "NUMBER", "So", "what", "do", "you", "suggest", "we", "use", "for", "C", "NUMBER", "I", "As", "for", "now", "Circle", "CI", "actually", "checks", "it", "can", "build", "a", "docker", "image", "NUMBER", "If", "you", "remove", "the", "canary", "hurdle", "from", "go", "swagger", "I", "think", "I", "ll", "add", "it", "on", "the", "validate", "side", "NUMBER", "For", "validation", "I", "think", "it", "s", "always", "a", "good", "idea", "to", "benchmark", "against", "big", "such", "big", "specs", "diego", "fu", "hs", "as", "far", "as", "I", "can", "see", "it", "looks", "okay", "now", "NUMBER", "What", "do", "you", "think", "casualjim", "Because", "the", "repo", "be", "use", "to", "build", "binaries", "for", "release", "e", "NUMBER", "g", "NUMBER", "docker", "other", "binaries", "Makefile", "for", "docker", "NUMBER", "NUMBER", "hack", "contains", "relate", "scripts", "NUMBER", "I", "don", "t", "know", "for", "the", "linux", "package", "etc", "NUMBER", "Thanks", "NUMBER", "I", "ve", "just", "add", "this", "in", "my", "current", "branch", "for", "spec", "validation", "part", "that", "should", "merge", "in", "a", "couple", "days", "NUMBER", "This", "will", "probably", "need", "some", "additional", "stuff", "in", "the", "generator", "part", "though", "NUMBER", "Let", "us", "figure", "that", "out", "with", "casualjim", "next", "week", "When", "analyzing", "the", "type", "validation", "I", "could", "see", "there", "be", "a", "quite", "a", "few", "other", "formats", "miss", "NUMBER", "Tedious", "homework", "but", "it", "should", "be", "do", "NUMBER", "casualjim", "I", "don", "t", "know", "about", "the", "generator", "but", "regard", "the", "validate", "NUMBER", "typeValidator", "NUMBER", "schemaInfoType", "I", "suggest", "this", "kind", "of", "reverse", "lookup", "be", "deferred", "to", "strfmt", "on", "the", "long", "term", "it", "be", "just", "not", "possible", "to", "keep", "things", "in", "sync", "with", "all", "fmts", "not", "to", "mention", "the", "possibility", "of", "custom", "format", "registries", "NUMBER", "The", "generation", "part", "should", "be", "available", "in", "go", "swagger", "with", "PR", "NUMBER", "The", "validation", "part", "should", "be", "available", "with", "PR", "go", "openapi", "validate", "NUMBER", "allencloud", "with", "these", "live", "branch", "available", "not", "yet", "merge", "could", "you", "please", "confirm", "your", "issue", "will", "be", "solve", "We", "need", "to", "update", "vendor", "before", "closing", "this", "Hello", "NUMBER", "I", "Believe", "your", "isssue", "lays", "here", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "cc", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "cdf", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "d", "generator", "template", "schemavalidator", "NUMBER", "gotmpl", "L", "NUMBER", "I", "just", "couldn", "t", "figure", "out", "why", "the", "NUMBER", "HasValidation", "property", "remains", "false", "in", "your", "case", "NUMBER", "Would", "you", "care", "some", "more", "digging", "based", "on", "this", "information", "you", "may", "alter", "the", "template", "this", "one", "may", "not", "be", "overriden", "be", "has", "to", "be", "in", "NUMBER", "generator", "template", "then", "rebuilt", "with", "update", "binddata", "NUMBER", "go", "NUMBER", "In", "order", "to", "understand", "the", "data", "structure", "pass", "to", "the", "templater", "you", "may", "run", "swagger", "generate", "NUMBER", "dump", "data", "NUMBER", "Intuitively", "NUMBER", "HasValidation", "should", "be", "set", "to", "true", "when", "a", "format", "be", "defined", "NUMBER", "However", "when", "I", "look", "at", "the", "setting", "of", "this", "value", "in", "model", "NUMBER", "go", "there", "not", "much", "left", "of", "my", "intuition", "That", "should", "be", "already", "prepared", "by", "the", "schema", "NUMBER", "What", "I", "can", "see", "here", "be", "just", "some", "trickery", "to", "lift", "anonymous", "types", "NUMBER", "I", "would", "need", "some", "time", "to", "dig", "it", "but", "right", "now", "I", "just", "can", "t", "NUMBER", "Yes", "I", "think", "you", "re", "right", "model", "NUMBER", "Format", "nil", "should", "do", "the", "job", "NUMBER", "I", "must", "admit", "I", "be", "an", "absolute", "beginner", "in", "that", "part", "of", "the", "code", "NUMBER", "How", "do", "we", "check", "that", "there", "be", "no", "messing", "around", "gregmarr", "I", "test", "our", "findings", "and", "NUMBER", "it", "s", "much", "more", "complicated", "than", "it", "seems", "NUMBER", "These", "template", "be", "devilish", "imp", "build", "the", "main", "NUMBER", "go", "Congratulations", "allencloud", "this", "story", "be", "also", "relate", "in", "go", "openapi", "swag", "NUMBER", "go", "openapi", "swag", "NUMBER", "Name", "conversion", "heavily", "relies", "on", "camel", "case", "convention", "NUMBER", "The", "point", "in", "your", "case", "be", "to", "detect", "correct", "initialisms", "i", "NUMBER", "e", "words", "that", "do", "not", "follow", "the", "regular", "Camel", "casing", "NUMBER", "IP", "be", "one", "of", "them", "so", "the", "function", "knows", "it", "has", "to", "keep", "it", "one", "word", "NUMBER", "AM", "be", "not", "so", "it", "be", "broken", "up", "in", "words", "NUMBER", "If", "you", "had", "IPAm", "you", "should", "get", "ip_am", "as", "expected", "NUMBER", "To", "work", "around", "your", "problem", "you", "may", "configure", "the", "list", "of", "such", "initialisms", "in", "LINK", "openapi", "swag", "blob", "master", "util", "NUMBER", "go", "L", "NUMBER", "and", "add", "AM", "as", "such", "an", "initialism", "NUMBER", "Fixes", "some", "broken", "links", "after", "latest", "doc", "update", "README", "gitbook", "NUMBER", "Shall", "require", "an", "update", "of", "the", "goswagger", "NUMBER", "io", "website", "NUMBER", "fix", "NUMBER", "miss", "doc", "on", "swagger", "ignore", "documentation", "This", "PR", "exclusively", "contains", "doc", "md", "file", "NUMBER", "The", "intent", "be", "to", "help", "cleaning", "up", "a", "little", "bit", "our", "large", "stove", "of", "question", "answers", "code", "examples", "by", "provide", "a", "recap", "update", "on", "some", "of", "them", "NUMBER", "This", "would", "also", "allow", "to", "close", "a", "good", "number", "of", "question", "issue", "some", "of", "them", "be", "now", "outdate", "NUMBER", "So", "here", "be", "the", "content", "x", "A", "revamped", "README", "NUMBER", "me", "x", "Use", "cases", "pop", "up", "what", "s", "inside", "details", "in", "other", "md", "x", "A", "slightly", "revamped", "SUMMARY", "NUMBER", "md", "for", "the", "gitbook", "x", "A", "FAQ", "README", "index", "and", "a", "FAQ", "doc", "by", "topic", "NUMBER", "In", "my", "opinion", "this", "would", "allow", "us", "to", "close", "the", "following", "issue", "fix", "NUMBER", "fix", "NUMBER", "outdate", "unhelpful", "material", "fix", "NUMBER", "outdate", "unhelpful", "material", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "obsolete", "not", "helpful", "Hi", "Ivan", "Well", "since", "all", "of", "this", "be", "essentially", "a", "rewrite", "cut", "recap", "of", "your", "contributions", "you", "definitely", "have", "a", "word", "to", "say", "in", "this", "It", "tried", "to", "keep", "most", "of", "the", "value", "in", "these", "exchanges", "code", "samples", "original", "use", "cases", "links", "to", "resources", "NUMBER", "I", "cut", "the", "chatter", "to", "make", "it", "shorter", "and", "readable", "NUMBER", "There", "might", "be", "some", "issue", "with", "the", "gitbook", "though", "NUMBER", "I", "haven", "t", "be", "able", "to", "check", "everything", "there", "NUMBER", "In", "my", "view", "best", "to", "merge", "update", "gitbook", "and", "patch", "possible", "doc", "glitches", "afterwards", "NUMBER", "A", "few", "glitches", "with", "doc", "links", "remain", "NUMBER", "I", "ll", "patch", "them", "soon", "sebastien", "rosset", "Do", "you", "confirm", "the", "issue", "may", "be", "close", "now", "that", "your", "PR", "has", "be", "merge", "My", "own", "feeling", "be", "that", "all", "contributions", "be", "welcome", "NUMBER", "You", "should", "not", "worry", "that", "much", "about", "bug", "vs", "enhancement", "distinction", "in", "issue", "NUMBER", "It", "be", "more", "an", "indication", "on", "how", "to", "priorize", "things", "NUMBER", "Since", "the", "toolkit", "has", "many", "use", "cases", "it", "be", "often", "difficult", "to", "judge", "priority", "from", "a", "single", "userr", "s", "perspective", "NUMBER", "Generally", "speaking", "if", "you", "feel", "it", "be", "important", "post", "a", "PR", "NUMBER", "As", "a", "work", "around", "I", "believe", "that", "setting", "skip_format", "true", "in", "the", "generator", "s", "yaml", "config", "file", "should", "allow", "to", "bypass", "this", "check", "NUMBER", "I", "be", "not", "sure", "about", "this", "specific", "check", "NUMBER", "I", "have", "recently", "modify", "things", "so", "that", "code", "not", "passing", "format", "check", "be", "write", "down", "no", "matter", "what", "with", "a", "warning", "intent", "was", "to", "allow", "template", "debug", "NUMBER", "How", "about", "a", "PR", "with", "an", "additional", "skip_checks", "or", "alike", "to", "bypass", "the", "unwanted", "check", "elakito", "Check", "out", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "shared", "NUMBER", "go", "L", "NUMBER", "OK", "Yet", "another", "spec", "validation", "fixture", "NUMBER", "This", "time", "NUMBER", "spec", "version", "could", "be", "fabricated", "from", "issue", "NUMBER", "NUMBER", "one", "which", "use", "to", "panic", "NUMBER", "There", "be", "still", "room", "for", "improvement", "on", "error", "message", "but", "the", "error", "be", "well", "detected", "NUMBER", "NUMBER", "one", "which", "I", "created", "by", "mistake", "from", "casualjim", "example", "it", "be", "invalid", "but", "be", "not", "detected", "as", "such", "cleanly", "and", "calls", "log", "NUMBER", "Fatal", "NUMBER", "Better", "than", "panicking", "but", "the", "cause", "of", "the", "error", "be", "not", "well", "report", "NUMBER", "NUMBER", "one", "which", "be", "correct", "example", "from", "casualjim", "NUMBER", "The", "UT", "do", "not", "go", "so", "far", "as", "to", "generate", "the", "application", "it", "just", "validates", "the", "spec", "I", "test", "manually", "that", "the", "server", "generation", "works", "as", "well", "Issue", "NUMBER", "has", "be", "much", "embroiled", "NUMBER", "There", "be", "basically", "NUMBER", "cases", "mentionned", "object", "with", "an", "items", "property", "covered", "with", "fixture", "for", "issue", "NUMBER", "more", "or", "less", "a", "duplicate", "of", "NUMBER", "only", "clearer", "items", "miss", "in", "array", "NUMBER", "This", "case", "specifically", "covered", "by", "the", "present", "fixture", "NUMBER", "Together", "with", "issue", "NUMBER", "both", "cases", "discussed", "be", "covered", "by", "UT", "new", "exerciser", "for", "cmd", "swagger", "validate", "NUMBER", "Of", "course", "merge", "issue", "NUMBER", "Thanks", "Ivan", "NUMBER", "Now", "I", "believe", "we", "can", "close", "NUMBER", "and", "move", "on", "further", "NUMBER", "Added", "fixture", "following", "confirmation", "that", "go", "swagger", "go", "swagger", "NUMBER", "has", "be", "fix", "items", "on", "objects", "NUMBER", "Tested", "more", "error", "cases", "NUMBER", "Enriched", "error", "message", "from", "template", "repo", "NUMBER", "Suppressed", "NUMBER", "log", "NUMBER", "Fatal", "by", "return", "err", "for", "better", "testability", "NUMBER", "Overall", "test", "coverage", "of", "template_repo", "NUMBER", "go", "should", "reach", "about", "NUMBER", "NUMBER", "It", "be", "the", "hack", "script", "to", "build", "the", "coverage", "report", "that", "fail", "In", "NUMBER", "circleci", "build", "docker", "NUMBER", "sh", "It", "might", "be", "that", "you", "have", "an", "outdate", "version", "of", "this", "script", "in", "your", "branch", "NUMBER", "The", "rm", "f", "deletion", "of", "the", "temp", "file", "has", "be", "add", "a", "few", "months", "ago", "NUMBER", "I", "know", "it", "doesn", "t", "NUMBER", "But", "still", "the", "CI", "runs", "your", "branch", "before", "merge", "Before", "all", "compare", "the", "NUMBER", "NUMBER", "circleci", "build", "docker", "NUMBER", "sh", "in", "your", "branch", "with", "the", "master", "Minor", "change", "in", "order", "to", "better", "get", "the", "essentials", "when", "run", "CI", "checks", "NUMBER", "Grr", "still", "too", "chatty", "NUMBER", "Now", "I", "may", "read", "Appveyor", "s", "output", "NUMBER", "server", "generation", "now", "support", "operationGroups", "template", "just", "like", "clients", "NUMBER", "Now", "provide", "with", "unit", "test", "NUMBER", "Tested", "manually", "NUMBER", "No", "automate", "unit", "test", "available", "yet", "Yes", "NUMBER", "I", "messed", "up", "with", "my", "fork", "to", "resync", "it", "NUMBER", "Tried", "to", "rebase", "but", "didn", "t", "clean", "NUMBER", "The", "actual", "diff", "be", "exactly", "what", "I", "did", "NUMBER", "lines", "in", "NUMBER", "file", "NUMBER", "I", "lost", "some", "time", "with", "git", "stuff", "but", "at", "some", "point", "I", "gave", "up", "NUMBER", "If", "really", "this", "be", "a", "problem", "on", "your", "side", "I", "just", "drop", "the", "fork", "and", "make", "a", "new", "one", "with", "those", "NUMBER", "lines", "NUMBER", "I", "also", "start", "rewriting", "the", "full", "story", "telling", "to", "recap", "and", "close", "the", "NUMBER", "question", "issue", "as", "promised", "NUMBER", "Tested", "manually", "NUMBER", "Should", "not", "break", "unit", "test", "NUMBER", "No", "specific", "unit", "test", "do", "yet", "NUMBER", "Please", "wait", "NUMBER", "Problem", "statement", "Defined", "a", "custom", "template", "NUMBER", "Declared", "it", "in", "the", "config", "YAML", "section", "operation_groups", "Run", "server", "generate", "on", "this", "config", "Nothing", "happens", "The", "generator", "find", "an", "operation", "group", "but", "didn", "t", "take", "template", "into", "account", "NUMBER", "Retesting", "with", "a", "wrong", "source", "template", "name", "indicates", "that", "there", "be", "not", "even", "an", "attempt", "to", "load", "the", "template", "NUMBER", "Will", "fix", "this", "with", "a", "P", "NUMBER", "R", "as", "soon", "as", "the", "regression", "on", "security", "items", "allows", "a", "CI", "based", "on", "current", "master", "to", "run", "NUMBER", "Cheers", "Fred", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Linux", "Merged", "with", "NUMBER", "fix", "server", "generation", "now", "support", "operationGroups", "template", "jus", "NUMBER", "Reproduced", "the", "different", "cases", "NUMBER", "ref", "be", "out", "of", "cause", "in", "this", "limited", "context", "at", "least", "with", "correct", "ref", "setting", "e", "NUMBER", "g", "NUMBER", "without", "siblings", "in", "a", "schema", "as", "required", "by", "Swagger", "NUMBER", "Spec", "WHICH", "IS", "NOT", "json", "schema", "spec", "validates", "and", "generates", "a", "server", "that", "build", "issue", "can", "be", "pin", "point", "to", "forbidden", "mix", "ref", "sibling", "which", "be", "correctly", "detected", "by", "swagger", "validate", "although", "the", "returned", "error", "message", "do", "not", "state", "clearly", "the", "issue", "complains", "about", "miss", "items", "Will", "add", "these", "fixture", "in", "cmd", "swagger", "commands", "validate_test", "NUMBER", "go", "for", "the", "record", "then", "close", "the", "issue", "if", "somebi", "has", "no", "objection", "NUMBER", "Fred", "This", "the", "actual", "error", "NUMBER", "Spec", "validation", "error", "message", "be", "really", "poor", "and", "a", "great", "cause", "for", "misunderstanding", "and", "waste", "of", "time", "overall", "NUMBER", "An", "issue", "be", "now", "dedicated", "to", "this", "NUMBER", "At", "some", "point", "there", "was", "also", "an", "idea", "for", "an", "enhancement", "to", "produce", "the", "line", "number", "in", "the", "spec", "file", "but", "it", "seems", "quite", "a", "bit", "complicated", "NUMBER", "I", "won", "t", "close", "this", "one", "but", "requalify", "it", "as", "a", "request", "for", "enhancement", "with", "error", "message", "which", "seems", "fair", "enough", "NUMBER", "Will", "work", "next", "week", "on", "a", "PR", "to", "improve", "this", "hopefully", "together", "with", "some", "other", "swagger", "validate", "shortcomings", "NUMBER", "Somebi", "I", "improved", "somewhat", "the", "error", "signaling", "but", "this", "fix", "do", "not", "yet", "identify", "the", "actual", "cause", "ref", "sibling", "NUMBER", "It", "be", "a", "bit", "complicated", "in", "the", "validation", "package", "to", "get", "it", "right", "NUMBER", "Further", "ref", "siblings", "actually", "should", "generate", "a", "warning", "they", "be", "not", "strictly", "forbidden", "but", "the", "resulting", "behavior", "be", "most", "likely", "unwanted", "NUMBER", "In", "your", "case", "I", "could", "however", "croak", "some", "more", "valuable", "information", "about", "the", "problem", "such", "as", "miss", "items", "in", "array", "which", "should", "help", "in", "spec", "problem", "pin", "point", "NUMBER", "Bottom", "line", "the", "ticket", "remains", "open", "but", "we", "have", "somewhat", "improved", "NUMBER", "Hello", "Karim", "I", "tag", "all", "issue", "relate", "to", "ref", "resolution", "so", "ot", "might", "be", "a", "good", "idea", "to", "validate", "your", "fix", "against", "all", "of", "them", "once", "and", "for", "good", "NUMBER", "They", "be", "probably", "some", "duplicates", "but", "maybe", "some", "be", "slighly", "different", "from", "mines", "NUMBER", "Cheers", "Fred", "Hello", "NUMBER", "My", "undertanding", "be", "that", "the", "version", "command", "has", "be", "designed", "to", "be", "use", "with", "binary", "distributions", "of", "go", "swagger", "as", "docker", "images", "NUMBER", "The", "version", "be", "prepended", "at", "build", "time", "by", "the", "makefile", "in", "charge", "of", "preparing", "the", "docker", "image", "actually", "this", "generates", "a", "link", "time", "symbol", "NUMBER", "I", "don", "t", "see", "why", "it", "should", "be", "an", "issue", "to", "have", "it", "set", "as", "dev", "when", "use", "the", "source", "distribution", "for", "different", "purposes", "like", "you", "suggest", "use", "it", "in", "a", "non", "git", "place", "such", "as", "vendor", "NUMBER", "What", "your", "report", "suggests", "behind", "the", "lines", "tell", "me", "if", "you", "disagree", "with", "that", "be", "to", "use", "git", "attributes", "somewhere", "to", "encode", "the", "version", "in", "a", "source", "file", "rather", "than", "resolve", "it", "at", "build", "time", "NUMBER", "This", "use", "to", "be", "a", "common", "practice", "with", "svn", "or", "other", "scvs", "such", "as", "CVS", "NUMBER", "Git", "strongly", "discourages", "the", "use", "of", "it", "even", "though", "it", "be", "technically", "possible", "with", "great", "care", "and", "caution", "NUMBER", "Further", "go", "swagger", "be", "still", "in", "its", "NUMBER", "x", "release", "series", "NUMBER", "It", "might", "just", "not", "be", "the", "right", "time", "to", "enter", "this", "debate", "about", "whether", "resolving", "Version", "tags", "in", "source", "code", "be", "a", "good", "thing", "or", "not", "NUMBER", "Cheers", "Fred", "if", "semantically", "the", "same", "how", "be", "omitempty", "an", "issue", "can", "it", "be", "fix", "with", "a", "custom", "marshal", "unmarshal", "not", "from", "a", "go", "perspective", "NUMBER", "both", "be", "empty", "NUMBER", "in", "go", "nil", "and", "be", "the", "same", "LINK", "we", "have", "the", "same", "issue", "with", "validations", "where", "we", "have", "a", "hard", "time", "distinguishing", "between", "key", "not", "present", "and", "value", "not", "present", "or", "value", "set", "to", "empty", "NUMBER", "Would", "the", "right", "solution", "be", "to", "use", "a", "pointer", "that", "way", "you", "can", "distinguish", "between", "the", "things", "more", "easily", "NUMBER", "I", "merge", "this", "PR", "now", "Is", "this", "a", "duplicate", "of", "NUMBER", "fix", "by", "NUMBER", "Would", "need", "to", "check", "if", "the", "fix", "apply", "in", "your", "case", "as", "well", "NUMBER", "it", "fail", "because", "it", "s", "printing", "to", "stderr", "Windows", "appveyor", "thinks", "anything", "that", "prints", "to", "stderr", "be", "a", "failure", "I", "suspect", "it", "has", "to", "do", "with", "the", "new", "log", "statemetns", "that", "were", "add", "AppVeyor", "has", "be", "going", "for", "more", "than", "a", "year", "on", "this", "project", "yes", "fine", "with", "the", "feature", "this", "might", "give", "you", "an", "idea", "how", "to", "avoid", "the", "stderr", "issue", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "operation_test", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "I", "fix", "the", "issue", "occuring", "on", "windows", "NUMBER", "Now", "waiting", "for", "master", "to", "be", "repaired", "to", "rebase", "my", "branch", "NUMBER", "Cheers", "great", "work", "yeah", "don", "t", "worry", "about", "the", "codecov", "patch", "stuff", "NUMBER", "Code", "coverage", "be", "a", "poor", "measure", "of", "quality", "anyway", "NUMBER", "no", "not", "yet", "sorry", "it", "seems", "that", "your", "main", "NUMBER", "go", "be", "in", "GOPATH", "and", "not", "GOPATH", "src", "Hello", "NUMBER", "Could", "you", "please", "have", "a", "look", "first", "at", "this", "reference", "link", "LINK", "GOPATH", "It", "really", "looks", "like", "your", "source", "be", "not", "under", "GOPATH", "src", "in", "addition", "openapi", "NUMBER", "doesn", "t", "allow", "for", "multiple", "types", "in", "a", "type", "field", "NUMBER", "there", "be", "NUMBER", "different", "use", "cases", "here", "NUMBER", "NUMBER", "editing", "specs", "and", "sharing", "pre", "exist", "schemas", "by", "use", "references", "and", "promoting", "reuse", "NUMBER", "generating", "code", "where", "on", "an", "API", "boundary", "what", "goes", "over", "the", "wire", "has", "no", "concept", "of", "reuse", "or", "types", "just", "shapes", "of", "data", "NUMBER", "So", "whether", "we", "flatten", "prior", "to", "the", "generation", "process", "or", "during", "the", "generation", "process", "by", "resolving", "refs", "ad", "hoc", "should", "be", "of", "no", "consequence", "NUMBER", "The", "shape", "of", "the", "data", "be", "the", "same", "NUMBER", "The", "generation", "process", "works", "as", "follows", "NUMBER", "resolve", "remote", "references", "and", "make", "them", "local", "NUMBER", "move", "all", "anonymous", "schemas", "into", "definitions", "and", "give", "them", "a", "name", "NUMBER", "generate", "an", "intermediate", "DOM", "AST", "from", "the", "specification", "that", "can", "be", "use", "for", "code", "generation", "NUMBER", "Pass", "AST", "to", "a", "number", "of", "template", "and", "render", "code", "based", "on", "the", "information", "within", "the", "AST", "NUMBER", "casualjim", "I", "have", "to", "disagree", "with", "your", "explanation", "I", "test", "with", "and", "without", "id", "or", "id", "in", "the", "JSON", "schema", "part", "same", "behaviour", "id", "or", "id", "JSON", "schema", "keywords", "be", "not", "explicitly", "unsupported", "in", "OpenAPI", "NUMBER", "this", "precision", "comes", "from", "NUMBER", "as", "per", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "I", "could", "not", "find", "an", "equivalent", "to", "NUMBER", "s", "LINK", "models", "keywords", "However", "it", "be", "interesting", "to", "get", "this", "view", "and", "move", "it", "to", "the", "spec", "validator", "NUMBER", "In", "this", "case", "we", "should", "choose", "wether", "to", "ignore", "id", "or", "id", "I", "don", "t", "think", "it", "be", "use", "for", "ref", "resolution", "anyhow", "or", "to", "have", "the", "spec", "validate", "to", "shoot", "a", "validation", "error", "on", "this", "NUMBER", "I", "ll", "work", "next", "week", "on", "the", "spec", "validation", "part", "as", "I", "find", "out", "I", "spent", "too", "much", "time", "cleaning", "my", "long", "specs", "figuring", "out", "error", "NUMBER", "Todo", "on", "that", "one", "Test", "the", "effect", "of", "NUMBER", "on", "the", "report", "test", "cases", "Test", "the", "impact", "of", "id", "and", "id", "in", "this", "context", "Move", "id", "id", "dectection", "to", "spec", "validation", "layer", "with", "error", "or", "warning", "to", "be", "decided", "depending", "on", "impact", "Thanks", "Karim", "NUMBER", "this", "be", "exactly", "what", "I", "observed", "and", "hopefully", "report", "NUMBER", "So", "do", "we", "all", "agree", "that", "Id", "Id", "be", "something", "that", "should", "probably", "be", "a", "warning", "in", "spec", "validate", "I", "can", "take", "cae", "of", "that", "The", "problem", "specifically", "here", "be", "that", "the", "analyzer", "do", "not", "recognize", "that", "B", "be", "a", "complex", "type", "that", "should", "not", "be", "zeroed", "with", "make", "NUMBER", "This", "has", "something", "to", "do", "with", "the", "ref", "inline", "schema", "works", "but", "should", "be", "narrowed", "to", "the", "array", "case", "object", "works", "NUMBER", "I", "may", "try", "to", "narrow", "it", "further", "as", "a", "I", "only", "test", "the", "Response", "case", "NUMBER", "I", "didn", "t", "check", "the", "behaviour", "for", "param", "in", "this", "case", "NUMBER", "You", "know", "the", "ref", "in", "a", "be", "invalid", "in", "syntax", "NUMBER", "it", "has", "ref", "NUMBER", "test", "NUMBER", "schema", "NUMBER", "json", "definitions", "a", "But", "I", "suspect", "it", "should", "be", "ref", "NUMBER", "test", "NUMBER", "schema", "NUMBER", "json", "definitions", "a", "can", "you", "run", "go", "generate", "NUMBER", "generator", "and", "push", "the", "change", "NUMBER", "Otherwise", "your", "change", "won", "t", "be", "pick", "up", "you", "can", "use", "swagger", "serve", "flavor", "swagger", "doc", "url", "LINK", "What", "you", "re", "seeing", "there", "be", "an", "older", "version", "of", "the", "swagger", "ui", "in", "use", "on", "the", "petstore", "url", "that", "might", "just", "be", "timestamps", "care", "to", "submit", "a", "PR", "for", "that", "You", "don", "t", "strictly", "need", "to", "specify", "the", "Content", "Type", "header", "NUMBER", "I", "think", "it", "should", "work", "if", "you", "define", "your", "spec", "like", "yaml", "swagger", "NUMBER", "info", "title", "Test", "version", "NUMBER", "schemes", "http", "paths", "test", "get", "produces", "application", "octet", "stream", "responses", "NUMBER", "description", "NUMBER", "response", "schema", "type", "string", "format", "binary", "When", "it", "comes", "to", "unknown", "mime", "types", "and", "not", "having", "producers", "or", "consumers", "those", "be", "stored", "in", "a", "map", "on", "the", "client", "and", "you", "can", "add", "your", "own", "NUMBER", "They", "be", "not", "meant", "to", "be", "a", "complete", "list", "although", "we", "could", "should", "probably", "add", "a", "few", "more", "NUMBER", "LINK", "openapi", "runtime", "blob", "master", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "refs", "be", "not", "suported", "in", "headers", "in", "openapi", "NUMBER", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "header", "object", "Only", "responses", "NUMBER", "Seen", "as", "you", "re", "use", "yaml", "you", "could", "use", "yaml", "anchors", "to", "get", "the", "desired", "outcome", "NUMBER", "that", "would", "be", "a", "bug", "in", "the", "swagger", "editor", "not", "a", "feature", "you", "can", "reuse", "the", "json", "struct", "tag", "to", "provide", "a", "different", "name", "for", "those", "properties", "I", "just", "merge", "those", "change", "into", "master", "on", "go", "swagger", "go", "swagger", "I", "verify", "that", "the", "current", "version", "correctly", "detects", "this", "as", "a", "spec", "error", "NUMBER", "Made", "a", "shorter", "fixture", "to", "reproduce", "the", "case", "NUMBER", "I", "ll", "push", "PR", "to", "add", "this", "check", "as", "a", "fixture", "in", "UT", "This", "issue", "should", "be", "close", "now", "Possible", "duplicate", "of", "NUMBER", "you", "need", "to", "export", "the", "field", "in", "your", "parameter", "struct", "and", "swagger", "parameters", "getEmployee", "needs", "the", "operation", "name", "s", "it", "applies", "to", "the", "problem", "here", "be", "that", "we", "marshal", "data", "into", "a", "struct", "and", "only", "then", "validate", "it", "NUMBER", "Go", "s", "json", "library", "doesn", "t", "give", "us", "much", "to", "recover", "from", "this", "and", "to", "give", "a", "more", "meaningful", "error", "message", "unfortunately", "NUMBER", "I", "m", "open", "to", "suggestions", "though", "in", "openapi", "NUMBER", "oneOf", "and", "anyOf", "be", "not", "support", "NUMBER", "but", "we", "ll", "look", "at", "the", "rest", "of", "the", "discriminated", "support", "Hello", "NUMBER", "I", "test", "your", "case", "NUMBER", "Actually", "you", "be", "not", "use", "the", "proper", "Swagger", "NUMBER", "syntax", "for", "examples", "in", "responses", "NUMBER", "Responses", "be", "not", "examplified", "the", "same", "way", "as", "params", "NUMBER", "If", "you", "specify", "your", "response", "with", "responses", "NUMBER", "description", "Customer", "schema", "ref", "definitions", "customer", "examples", "application", "json", "id", "NUMBER", "email", "NUMBER", "create_date", "NUMBER", "You", "get", "an", "invalid", "spec", "as", "expected", "NUMBER", "I", "agree", "that", "finding", "example", "instead", "of", "examples", "should", "trigger", "a", "warning", "as", "blank", "validation", "was", "probably", "not", "what", "was", "intended", "NUMBER", "Will", "do", "that", "in", "relate", "PR", "go", "openapi", "validate", "NUMBER", "Yes", "NUMBER", "I", "be", "in", "the", "validation", "code", "trying", "to", "figure", "it", "out", "and", "also", "this", "page", "of", "the", "specification", "NUMBER", "It", "be", "not", "quite", "explicit", "that", "schema", "examples", "apply", "in", "the", "context", "of", "responses", "but", "we", "may", "suppose", "it", "be", "so", "I", "would", "like", "you", "NUMBER", "The", "validation", "code", "for", "responses", "explicitly", "searches", "for", "examples", "NUMBER", "I", "be", "digging", "in", "further", "and", "let", "you", "know", "It", "works", "with", "params", "but", "validation", "message", "be", "misleading", "NUMBER", "So", "something", "has", "to", "be", "change", "anyhow", "NUMBER", "I", "get", "your", "use", "case", "NUMBER", "I", "just", "get", "the", "same", "NUMBER", "we", "need", "to", "update", "vendor", "before", "closing", "this", "Implement", "a", "responder", "by", "default", "we", "generate", "a", "few", "we", "can", "infer", "from", "the", "swagger", "spec", "but", "you", "can", "easily", "implement", "your", "own", "NUMBER", "it", "s", "essentially", "a", "func", "http", "NUMBER", "ResponseWriter", "runtime", "NUMBER", "Producer", "LINK", "openapi", "runtime", "blob", "master", "middleware", "context", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "Would", "you", "expect", "the", "outcome", "to", "be", "json", "swagger", "NUMBER", "info", "description", "This", "be", "the", "public", "REST", "API", "version", "NUMBER", "paths", "thing", "post", "description", "Do", "thing", "operationId", "aThing", "responses", "NUMBER", "description", "SomeObject", "schema", "ref", "definitions", "SomeObject", "definitions", "CustomFields", "type", "object", "additionalProperties", "type", "object", "x", "go", "package", "github", "NUMBER", "com", "example", "swagger", "SomeObject", "type", "object", "title", "SomeObject", "NUMBER", "allOf", "ref", "definitions", "CustomFields", "properties", "name", "description", "Name", "a", "name", "type", "string", "x", "go", "name", "Name", "x", "go", "package", "github", "NUMBER", "com", "example", "swagger", "in", "that", "case", "you", "re", "modeling", "this", "wrong", "because", "that", "s", "not", "what", "you", "re", "saying", "NUMBER", "json", "swagger", "NUMBER", "info", "description", "This", "be", "the", "public", "REST", "API", "version", "NUMBER", "paths", "thing", "post", "description", "Do", "thing", "operationId", "aThing", "responses", "NUMBER", "description", "SomeObject", "schema", "ref", "definitions", "SomeObject", "definitions", "CustomFields", "type", "object", "additionalProperties", "type", "object", "x", "go", "package", "github", "NUMBER", "com", "example", "swagger", "SomeObject", "type", "object", "title", "SomeObject", "NUMBER", "properties", "name", "description", "Name", "a", "name", "type", "string", "x", "go", "name", "Name", "customFields", "type", "object", "additionalProperties", "type", "object", "x", "go", "package", "github", "NUMBER", "com", "example", "swagger", "if", "that", "be", "what", "you", "want", "then", "your", "struct", "should", "be", "defined", "as", "go", "go", "generate", "swagger", "generate", "spec", "Package", "API", "This", "be", "the", "public", "REST", "API", "Version", "NUMBER", "swagger", "meta", "package", "exampleswagger", "swagger", "operation", "POST", "thing", "aThing", "Do", "thing", "Responses", "NUMBER", "description", "SomeObject", "schema", "ref", "definitions", "SomeObject", "SomeObject", "NUMBER", "swagger", "model", "type", "SomeObject", "struct", "Name", "a", "name", "Name", "string", "json", "name", "CustomFields", "CustomFields", "json", "customFields", "type", "CustomFields", "map", "string", "interface", "you", "can", "use", "another", "annotation", "in", "your", "spec", "to", "provide", "extra", "struct", "tags", "for", "example", "yaml", "type", "object", "properties", "productCode", "type", "string", "x", "custom", "tag", "bson", "productCode", "proto", "product_code", "update", "discriminated", "NUMBER", "md", "why", "would", "max", "length", "matter", "for", "an", "ISO", "NUMBER", "date", "it", "s", "the", "blank", "lines", "Redirection", "flow", "be", "for", "UI", "NUMBER", "The", "spec", "has", "them", "so", "your", "UI", "can", "do", "the", "redirection", "NUMBER", "Swagger", "NUMBER", "only", "defines", "those", "properties", "as", "hints", "for", "a", "UI", "to", "work", "this", "doesn", "t", "have", "to", "be", "server", "side", "NUMBER", "At", "the", "same", "time", "the", "redirection", "flow", "be", "not", "support", "in", "an", "API", "but", "you", "can", "use", "an", "OAuth", "NUMBER", "middleware", "from", "any", "library", "to", "get", "you", "that", "functionality", "this", "be", "a", "yaml", "thing", "NUMBER", "You", "want", "to", "single", "quote", "your", "key", "name", "n", "Yes", "the", "generator", "works", "with", "yaml", "and", "json", "so", "you", "can", "use", "either", "NUMBER", "I", "agree", "on", "line", "number", "and", "column", "position", "however", "default", "go", "tooling", "doesn", "t", "provide", "the", "right", "means", "to", "do", "so", "there", "be", "nothing", "that", "specifies", "the", "properties", "of", "an", "object", "support", "strict", "ordering", "NUMBER", "Neither", "in", "the", "JSON", "spec", "nor", "in", "the", "swagger", "NUMBER", "specification", "I", "just", "merge", "x", "omitempty", "NUMBER", "if", "you", "add", "that", "to", "the", "spec", "you", "can", "skip", "then", "nulls", "IMO", "int", "be", "not", "a", "good", "option", "to", "support", "when", "it", "comes", "to", "contracts", "NUMBER", "Consider", "the", "following", "you", "have", "an", "arm", "NUMBER", "client", "on", "which", "int", "be", "int", "NUMBER", "however", "your", "server", "be", "amd", "NUMBER", "At", "this", "stage", "it", "s", "perfectly", "valid", "for", "the", "server", "to", "return", "int", "NUMBER", "max", "value", "NUMBER", "this", "will", "cause", "the", "client", "to", "overflow", "NUMBER", "So", "while", "go", "allows", "int", "as", "type", "I", "think", "for", "API", "contracts", "int", "be", "too", "ambiguous", "as", "definition", "leading", "to", "subtle", "but", "hard", "to", "debug", "failures", "NUMBER", "Similarly", "other", "languages", "may", "choose", "to", "default", "to", "int", "NUMBER", "type", "instead", "of", "int", "NUMBER", "type", "regardless", "of", "platform", "NUMBER", "sorry", "for", "the", "long", "wait", "I", "m", "in", "the", "middle", "of", "moving", "homes", "NUMBER", "I", "ll", "bump", "the", "release", "version", "next", "week", "there", "be", "a", "way", "to", "use", "a", "pre", "exist", "type", "that", "exists", "on", "the", "file", "system", "NUMBER", "That", "would", "be", "another", "way", "to", "solve", "this", "problem", "NUMBER", "the", "type", "file", "be", "specific", "for", "formData", "params", "NUMBER", "I", "believe", "your", "intent", "be", "to", "stream", "some", "data", "to", "the", "client", "perhaps", "with", "the", "content", "disposition", "header", "NUMBER", "To", "do", "this", "use", "yaml", "type", "string", "format", "binary", "This", "will", "render", "the", "correct", "code", "for", "you", "to", "use", "NUMBER", "discussed", "offline", "This", "should", "work", "because", "the", "yaml", "library", "do", "this", "during", "parsing", "NUMBER", "So", "you", "be", "still", "sane", "However", "swagger", "ignores", "those", "extra", "field", "so", "perhaps", "do", "yaml", "parameters", "RequestIdParam", "name", "X", "Request", "ID", "in", "header", "type", "string", "x", "DefaultParameters", "DEFAULT_HEADERS", "parameters", "ref", "parameters", "RequestIdParam", "paths", "objects", "TAG", "write", "I", "have", "narrowed", "it", "down", "to", "this", "data", "definition", "regiment", "type", "object", "items", "ref", "definitions", "demand", "demand", "type", "object", "required", "package", "plan", "properties", "package", "type", "string", "plan", "type", "number", "format", "float", "Add", "this", "and", "it", "produces", "the", "error", "swagger", "generate", "server", "f", "mp", "scoring", "api", "bad", "NUMBER", "yaml", "P", "models", "NUMBER", "Principal", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "NUMBER", "xc", "NUMBER", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "xd", "pc", "NUMBER", "x", "NUMBER", "b", "NUMBER", "a", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "NewSliceBranch", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildArray", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildItems", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xbfc", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "makeGenSchema", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "d", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xab", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "makeGenDefinitionHierarchy", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "makeGenDefinition", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xc", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "makeCodegenApp", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "Generate", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "xbd", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "GenerateServer", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "xd", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "NUMBER", "Server", "NUMBER", "Execute", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "e", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "ParseArgs", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ef", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "cc", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "Parse", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xb", "NUMBER", "ebfb", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xbe", "NUMBER", "d", "NUMBER", "e", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "main", "NUMBER", "main", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "NUMBER", "go", "NUMBER", "NUMBER", "xd", "NUMBER", "a", "next", "step", "be", "to", "drill", "down", "in", "the", "stack", "trace", "NUMBER", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "The", "issue", "in", "the", "spec", "you", "sent", "that", "items", "be", "be", "use", "with", "type", "object", "I", "m", "debugging", "this", "by", "run", "the", "following", "command", "DEBUG", "NUMBER", "swagger", "generate", "server", "A", "MpScoring", "f", "mp", "scoring", "api", "NUMBER", "yaml", "it", "will", "fail", "and", "then", "you", "ll", "see", "something", "like", "this", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "model", "NUMBER", "go", "NUMBER", "returning", "after", "ref", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "new", "slice", "branch", "l", "NUMBER", "_itemized_services", "model", "l", "NUMBER", "_itemized_services", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "cloning", "context", "l", "NUMBER", "_itemized_services", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "SIGSEGV", "segmentation", "violation", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "xd", "pc", "NUMBER", "x", "NUMBER", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "NewSliceBranch", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "db", "NUMBER", "NUMBER", "xc", "NUMBER", "in", "this", "failure", "I", "see", "the", "model", "be", "l", "NUMBER", "_itemized_services", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "new", "slice", "branch", "l", "NUMBER", "_itemized_services", "model", "l", "NUMBER", "_itemized_services", "after", "change", "the", "type", "from", "object", "to", "array", "generation", "gets", "past", "that", "NUMBER", "this", "was", "fix", "by", "NUMBER", "I", "ll", "cut", "a", "new", "release", "today", "push", "a", "new", "release", "you", "have", "to", "update", "your", "vendor", "and", "the", "swagger", "binary", "tool", "NUMBER", "The", "NUMBER", "advance", "in", "lock", "step", "it", "s", "only", "an", "issue", "with", "the", "docker", "container", "NUMBER", "if", "the", "runtime", "NUMBER", "Authorizer", "be", "not", "defined", "that", "means", "that", "the", "runtime", "project", "or", "the", "swagger", "binary", "template", "be", "not", "update", "to", "reflect", "that", "NUMBER", "do", "you", "think", "it", "would", "be", "possible", "to", "add", "a", "test", "so", "that", "we", "don", "t", "break", "this", "in", "the", "future", "The", "easiest", "would", "be", "to", "add", "it", "to", "the", "canaries", "NUMBER", "LINK", "swagger", "go", "swagger", "tree", "master", "fixture", "canary", "the", "runner", "for", "those", "but", "might", "not", "require", "change", "for", "this", "LINK", "swagger", "go", "swagger", "blob", "master", "hack", "run", "canary", "NUMBER", "sh", "This", "be", "another", "approach", "to", "a", "similar", "kind", "of", "test", "use", "case", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "build_test", "NUMBER", "go", "push", "NUMBER", "The", "properties", "in", "the", "body", "struct", "need", "to", "be", "export", "otherwise", "it", "can", "t", "generate", "json", "for", "it", "or", "read", "it", "in", "from", "json", "Their", "names", "need", "to", "be", "capitalized", "go", "package", "main", "A", "ValidationError", "be", "an", "error", "that", "be", "use", "when", "the", "required", "input", "fail", "validation", "NUMBER", "swagger", "response", "validationError", "type", "ValidationError", "struct", "The", "error", "message", "in", "body", "Body", "struct", "The", "validation", "message", "Required", "true", "Message", "string", "An", "optional", "field", "name", "to", "which", "this", "validation", "applies", "FieldName", "string", "you", "can", "put", "the", "struct", "in", "a", "package", "that", "isn", "t", "main", "and", "it", "should", "start", "to", "work", "Ref", "will", "have", "be", "filled", "out", "though", "NUMBER", "It", "doesn", "t", "expand", "them", "by", "default", "NUMBER", "But", "you", "have", "options", "flatten", "the", "spec", "swagger", "flatten", "help", "expand", "the", "spec", "swagger", "expand", "help", "or", "resolve", "the", "ref", "spec", "NUMBER", "ResolveRef", "spec", "NUMBER", "Spec", "spec", "NUMBER", "Spec", "NUMBER", "Paths", "NUMBER", "Paths", "some", "path", "NUMBER", "Get", "NUMBER", "Responses", "NUMBER", "StatusCodeResponses", "NUMBER", "NUMBER", "Ref", "LINK", "openapi", "spec", "blob", "master", "expander", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "just", "pull", "in", "an", "update", "go", "openapi", "runtime", "yep", "it", "s", "on", "master", "now", "Seen", "same", "behaviour", "with", "server", "generation", "path", "items", "with", "be", "modify", "by", "internal", "snakize", "function", "NUMBER", "I", "m", "fine", "with", "the", "commented", "code", "be", "delete", "NUMBER", "git", "will", "still", "know", "merge", "the", "fix", "for", "this", "if", "you", "don", "t", "use", "m", "do", "still", "see", "the", "issue", "In", "order", "to", "properly", "close", "this", "issue", "swagger", "ignore", "annotation", "should", "be", "documented", "in", "docs", "generate", "spec", "I", "ll", "try", "this", "tomorrow", "and", "will", "update", "this", "ticket", "NUMBER", "oic", "because", "there", "be", "no", "standard", "name", "for", "it", "NUMBER", "You", "can", "add", "it", "here", "LINK", "openapi", "runtime", "blob", "master", "statuses", "NUMBER", "go", "can", "you", "try", "to", "explain", "your", "question", "more", "clearly", "What", "be", "it", "you", "want", "to", "achieve", "the", "serve", "command", "by", "default", "serves", "a", "redoc", "ui", "NUMBER", "redoc", "be", "only", "to", "serve", "a", "documentation", "page", "for", "your", "specification", "it", "doesn", "t", "implement", "any", "logic", "I", "have", "no", "idea", "what", "you", "mean", "by", "understand", "the", "flow", "how", "models", "has", "be", "executing", "NUMBER", "there", "be", "code", "generate", "NUMBER", "a", "request", "arrives", "the", "routes", "select", "a", "handler", "and", "the", "request", "be", "validated", "then", "your", "code", "executes", "This", "thread", "be", "leading", "us", "nowhere", "NUMBER", "Maybe", "a", "lack", "of", "documentation", "Let", "s", "close", "it", "NUMBER", "operationId", "be", "always", "globally", "unique", "per", "swagger", "NUMBER", "specification", "NUMBER", "The", "id", "MUST", "be", "unique", "among", "all", "operations", "describe", "in", "the", "API", "NUMBER", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "operationObject", "Unique", "string", "use", "to", "identify", "the", "operation", "NUMBER", "The", "id", "MUST", "be", "unique", "among", "all", "operations", "describe", "in", "the", "API", "NUMBER", "Tools", "and", "libraries", "MAY", "use", "the", "operationId", "to", "uniquely", "identify", "an", "operation", "therefore", "it", "be", "recommended", "to", "follow", "common", "programming", "naming", "conventions", "NUMBER", "this", "needs", "more", "context", "NUMBER", "Which", "spec", "what", "s", "the", "GOPATH", "and", "what", "s", "the", "miss", "package", "which", "version", "of", "swagger", "be", "you", "use", "did", "you", "build", "from", "master", "operationId", "be", "always", "globally", "unique", "per", "swagger", "NUMBER", "specification", "NUMBER", "The", "id", "MUST", "be", "unique", "among", "all", "operations", "describe", "in", "the", "API", "NUMBER", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "operationObject", "Unique", "string", "use", "to", "identify", "the", "operation", "NUMBER", "The", "id", "MUST", "be", "unique", "among", "all", "operations", "describe", "in", "the", "API", "NUMBER", "Tools", "and", "libraries", "MAY", "use", "the", "operationId", "to", "uniquely", "identify", "an", "operation", "therefore", "it", "be", "recommended", "to", "follow", "common", "programming", "naming", "conventions", "NUMBER", "I", "fix", "the", "example", "NUMBER", "shellsession", "ivan", "avalon", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "git", "master", "go", "run", "NUMBER", "examples", "stream", "server", "cmd", "countdown", "server", "main", "NUMBER", "go", "port", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Serving", "countdown", "at", "LINK", "Iteration", "NUMBER", "Iteration", "NUMBER", "Iteration", "NUMBER", "Iteration", "NUMBER", "Iteration", "NUMBER", "Iteration", "NUMBER", "C", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "shutdown", "initiated", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Stopped", "serving", "countdown", "at", "LINK", "other", "terminal", "shellsession", "ivan", "avalon", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "git", "master", "curl", "v", "LINK", "Trying", "NUMBER", "TCP_NODELAY", "set", "Connected", "to", "NUMBER", "NUMBER", "port", "NUMBER", "NUMBER", "GET", "elapse", "NUMBER", "HTTP", "NUMBER", "Host", "NUMBER", "NUMBER", "User", "Agent", "curl", "NUMBER", "Accept", "TAG", "before", "generating", "and", "see", "if", "the", "problem", "persists", "after", "flatten", "you", "can", "try", "to", "expand", "the", "spec", "swagger", "expand", "then", "you", "should", "have", "a", "fully", "expanded", "spec", "for", "which", "you", "can", "generate", "code", "expander", "be", "here", "LINK", "openapi", "spec", "blob", "master", "expander", "NUMBER", "go", "flatten", "be", "here", "LINK", "openapi", "analysis", "blob", "master", "flatten", "NUMBER", "go", "you", "can", "run", "processes", "with", "DEBUG", "NUMBER", "and", "SWAGGER_DEBUG", "NUMBER", "that", "will", "get", "you", "a", "lot", "more", "output", "how", "would", "you", "link", "them", "to", "routes", "I", "see", "I", "think", "this", "could", "be", "a", "good", "addition", "to", "the", "functionality", "You", "probably", "want", "to", "use", "allOf", "to", "compose", "NUMBER", "models", "for", "the", "GET", "and", "stick", "to", "a", "simple", "model", "for", "POST", "you", "can", "override", "the", "ServeError", "function", "in", "the", "configure_xxx", "NUMBER", "go", "file", "which", "allows", "you", "to", "rewrite", "error", "you", "can", "make", "your", "own", "main", "function", "I", "ve", "do", "that", "here", "LINK", "openapi", "kvstore", "blob", "master", "cmd", "kvstored", "main", "NUMBER", "go", "Please", "tag", "as", "question", "NUMBER", "I", "ll", "put", "it", "in", "the", "FAQ", "md", "be", "write", "NUMBER", "how", "be", "you", "run", "swagger", "what", "be", "your", "gopath", "env", "var", "what", "be", "your", "project", "directory", "what", "be", "your", "OS", "When", "you", "write", "to", "a", "response", "writer", "for", "the", "body", "go", "will", "flush", "the", "headers", "and", "the", "body", "NUMBER", "So", "if", "we", "want", "to", "return", "a", "status", "code", "then", "we", "have", "to", "do", "that", "before", "we", "start", "write", "to", "the", "response", "writer", "which", "happens", "in", "the", "producer", "NUMBER", "Produce", "call", "I", "think", "this", "could", "be", "fix", "in", "the", "panic", "middleware", "by", "having", "a", "buffered", "response", "that", "gets", "flushed", "at", "the", "end", "or", "when", "its", "buffer", "overflows", "perhaps", "you", "can", "implement", "another", "response", "writer", "that", "wraps", "the", "default", "responsewriter", "where", "you", "wrap", "the", "Write", "method", "that", "writes", "to", "a", "buffer", "with", "a", "know", "size", "and", "you", "postpone", "flushing", "until", "the", "buffer", "NUMBER", "That", "would", "then", "mean", "you", "have", "an", "opportunity", "to", "change", "the", "status", "code", "NUMBER", "Of", "course", "there", "be", "a", "performance", "impact", "with", "this", "approach", "but", "it", "do", "allow", "for", "capturing", "some", "more", "status", "code", "have", "you", "seen", "this", "LINK", "that", "one", "be", "for", "swagger", "NUMBER", "this", "repo", "be", "for", "swagger", "NUMBER", "You", "could", "look", "at", "use", "type", "string", "format", "binary", "and", "use", "the", "content", "disposition", "header", "to", "provide", "the", "filename", "You", "can", "try", "to", "generate", "with", "skip", "validation", "this", "be", "validation", "of", "the", "spec", "I", "agree", "it", "s", "a", "bug", "but", "skipping", "validation", "a", "step", "before", "generating", "would", "allow", "you", "to", "continue", "HI", "thanks", "for", "this", "but", "the", "problem", "be", "more", "complicated", "Take", "a", "look", "at", "this", "PR", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "file", "It", "has", "the", "template", "change", "required", "for", "easyjson", "support", "unfortunately", "it", "has", "gone", "stale", "so", "rebasing", "that", "one", "be", "complicated", "NUMBER", "But", "it", "would", "be", "great", "if", "just", "the", "serialization", "change", "not", "the", "patch", "support", "and", "nullable", "unset", "field", "stuff", "could", "turn", "into", "a", "PR", "with", "just", "change", "to", "serialization", "NUMBER", "It", "would", "fix", "about", "a", "dozen", "open", "bug", "NUMBER", "I", "ve", "brought", "the", "change", "from", "PR", "NUMBER", "up", "to", "date", "with", "current", "master", "in", "the", "easyjson", "branch", "LINK", "swagger", "go", "swagger", "tree", "easyjson", "I", "won", "t", "be", "able", "to", "work", "on", "this", "for", "a", "while", "to", "come", "still", "NUMBER", "The", "AllOf", "functionality", "be", "still", "miss", "Thanks", "would", "it", "be", "possible", "to", "do", "the", "same", "for", "BasicAuth", "and", "BearerAuth", "so", "that", "it", "s", "a", "consistent", "pattern", "The", "build", "be", "fail", "because", "of", "name", "collisions", "those", "authenticators", "should", "figure", "out", "unique", "names", "or", "I", "think", "a", "reasonable", "work", "around", "be", "to", "call", "the", "properties", "ApiKeyAuthenticator", "BasicAuthenticator", "and", "BearerAuthenticator", "thanks", "duplicate", "of", "NUMBER", "you", "can", "rewrite", "error", "in", "the", "ServeError", "hook", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "todo", "list", "restapi", "configure_todo_list", "NUMBER", "go", "L", "NUMBER", "By", "default", "it", "uses", "this", "function", "LINK", "openapi", "error", "blob", "master", "api", "NUMBER", "go", "L", "NUMBER", "At", "this", "moment", "there", "be", "no", "way", "to", "customize", "the", "authenticator", "receivers", "of", "the", "APIKeyAuth", "function", "on", "the", "builder", "object", "NUMBER", "I", "think", "it", "might", "be", "a", "good", "addition", "though", "to", "allow", "for", "that", "kind", "of", "customization", "NUMBER", "In", "this", "file", "there", "be", "method", "calls", "to", "methods", "defined", "in", "the", "security", "package", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "server", "builder", "NUMBER", "gotmpl", "L", "NUMBER", "L", "NUMBER", "I", "think", "if", "you", "make", "properties", "with", "the", "same", "name", "and", "initialize", "them", "to", "those", "function", "NUMBER", "And", "then", "call", "the", "function", "on", "the", "current", "receiver", "you", "have", "a", "place", "to", "replace", "the", "authenticators", "NUMBER", "This", "should", "allow", "you", "to", "access", "the", "request", "NUMBER", "The", "function", "for", "auth", "can", "be", "find", "here", "LINK", "openapi", "runtime", "blob", "master", "security", "authenticator", "NUMBER", "go", "L", "NUMBER", "LINK", "openapi", "runtime", "blob", "master", "security", "authenticator", "NUMBER", "go", "L", "NUMBER", "LINK", "openapi", "runtime", "blob", "master", "security", "authenticator", "NUMBER", "go", "L", "NUMBER", "it", "doesn", "t", "have", "to", "be", "do", "manually", "you", "can", "wrap", "the", "previous", "authenticator", "function", "this", "gives", "you", "a", "place", "to", "look", "at", "a", "request", "before", "or", "after", "authentication", "NUMBER", "it", "also", "gives", "you", "a", "way", "of", "support", "the", "function", "signature", "you", "were", "after", "NUMBER", "I", "want", "to", "avoid", "having", "to", "introduce", "a", "breaking", "change", "like", "the", "one", "describe", "in", "NUMBER", "because", "the", "argument", "to", "the", "function", "be", "yet", "another", "function", "which", "means", "you", "can", "also", "wrap", "that", "one", "try", "generating", "with", "m", "Here", "s", "an", "example", "LINK", "openapi", "kvstore", "blob", "master", "cmd", "kvstored", "main", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "there", "be", "still", "a", "conflict", "for", "some", "reason", "in", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "thanks", "can", "you", "try", "to", "flatten", "your", "spec", "first", "to", "see", "if", "that", "fix", "it", "swagger", "flatten", "o", "swagger", "NUMBER", "flat", "NUMBER", "json", "swagger", "NUMBER", "json", "I", "ll", "make", "it", "the", "default", "in", "in", "the", "next", "version", "NUMBER", "It", "solves", "quite", "a", "lot", "of", "problem", "Currently", "it", "s", "a", "separate", "operation", "because", "it", "was", "experimental", "there", "be", "some", "conflict", "here", "that", "need", "to", "be", "resolve", "NUMBER", "change", "look", "good", "though", "that", "be", "when", "you", "use", "reflection", "like", "in", "a", "language", "like", "java", "NUMBER", "The", "way", "we", "have", "it", "here", "be", "make", "the", "generation", "of", "the", "spec", "be", "a", "build", "time", "concern", "instead", "of", "a", "runtime", "concern", "NUMBER", "The", "assumption", "that", "was", "made", "be", "that", "after", "you", "build", "your", "app", "the", "API", "be", "unlikely", "to", "change", "NUMBER", "That", "example", "that", "you", "link", "to", "be", "when", "you", "generate", "the", "code", "from", "a", "swagger", "spec", "NUMBER", "And", "there", "we", "embed", "the", "spec", "as", "default", "behavior", "but", "that", "isn", "t", "a", "hard", "constraint", "you", "can", "change", "that", "at", "generation", "time", "and", "pass", "one", "in", "or", "initialize", "the", "generate", "code", "with", "a", "spec", "that", "was", "loaded", "from", "aremote", "url", "etc", "NUMBER", "Sorry", "I", "didn", "t", "answer", "the", "first", "question", "yet", "NUMBER", "There", "be", "a", "few", "ways", "you", "can", "serve", "a", "ui", "NUMBER", "Use", "the", "middleware", "provide", "in", "the", "go", "openapi", "runtime", "package", "LINK", "openapi", "runtime", "blob", "master", "middleware", "redoc", "NUMBER", "go", "Most", "manual", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "try", "with", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "do", "your", "main", "package", "contain", "a", "code", "path", "that", "reaches", "where", "you", "describe", "your", "routes", "Can", "you", "open", "an", "issue", "here", "LINK", "I", "just", "integrate", "that", "work", "into", "go", "swagger", "Sorry", "I", "ve", "seen", "you", "ve", "do", "that", "and", "they", "moved", "you", "here", "NUMBER", "Am", "I", "understanding", "correctly", "that", "you", "want", "to", "add", "a", "support", "for", "x", "logo", "for", "the", "swagger", "generate", "spec", "command", "OK", "until", "we", "can", "add", "that", "you", "can", "use", "an", "input", "document", "to", "add", "this", "feature", "make", "a", "file", "call", "input", "NUMBER", "yml", "also", "works", "with", "json", "if", "you", "prefer", "that", "yaml", "info", "x", "logo", "url", "NUMBER", "images", "hrperformans", "logo", "NUMBER", "x", "NUMBER", "x", "NUMBER", "png", "backgroundColor", "FFFFFF", "and", "generate", "the", "the", "spec", "with", "swagger", "generate", "spec", "i", "input", "NUMBER", "yml", "path", "to", "main", "it", "s", "already", "validated", "by", "the", "time", "you", "get", "it", "you", "can", "use", "additionalProperties", "to", "this", "end", "and", "then", "you", "have", "a", "method", "on", "the", "body", "that", "captures", "those", "NUMBER", "you", "can", "still", "specify", "validation", "rules", "for", "it", "too", "the", "docs", "be", "also", "in", "this", "repo", "in", "the", "docs", "folder", "yes", "please", "add", "those", "It", "helps", "people", "find", "out", "about", "the", "new", "functionality", "Thanks", "at", "this", "point", "these", "be", "support", "in", "the", "code", "generator", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "support", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "We", "can", "add", "more", "through", "the", "consumer", "producer", "mechanism", "if", "you", "need", "more", "I", "ll", "try", "to", "look", "into", "this", "NUMBER", "I", "think", "the", "main", "issue", "be", "that", "error", "don", "t", "have", "a", "TextMarshaller", "interface", "implement", "NUMBER", "close", "NUMBER", "close", "NUMBER", "close", "NUMBER", "close", "NUMBER", "close", "NUMBER", "close", "NUMBER", "close", "NUMBER", "did", "you", "generate", "with", "with", "context", "because", "that", "be", "deprecate", "and", "no", "longer", "necessary", "because", "go", "now", "has", "the", "context", "on", "the", "request", "object", "so", "no", "more", "need", "to", "thread", "it", "through", "yeah", "that", "would", "break", "other", "things", "it", "needs", "to", "be", "fix", "where", "the", "value", "for", "that", "value", "expression", "be", "set", "because", "this", "wouldn", "t", "be", "the", "only", "place", "where", "it", "generates", "bad", "code", "I", "think", "this", "would", "be", "a", "good", "place", "to", "look", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "operation", "NUMBER", "go", "L", "NUMBER", "no", "doubt", "this", "be", "a", "bug", "but", "also", "the", "format", "be", "an", "unrecognized", "format", "base", "NUMBER", "ID", "you", "can", "also", "make", "your", "own", "main", "function", "and", "use", "the", "code", "from", "the", "generations", "of", "both", "with", "skip", "main", "This", "allows", "for", "customization", "like", "use", "a", "different", "middleware", "stack", "which", "in", "turn", "gives", "you", "the", "ability", "to", "serve", "NUMBER", "swagger", "specs", "at", "different", "paths", "NUMBER", "And", "generally", "compose", "things", "a", "bit", "differently", "in", "this", "tool", "that", "be", "call", "flatten", "it", "do", "exactly", "this", "and", "also", "moves", "anonymous", "objects", "from", "responses", "and", "request", "bodies", "to", "refs", "I", "ve", "write", "a", "go", "script", "that", "merge", "swagger", "docs", "from", "different", "locations", "in", "the", "past", "NUMBER", "I", "haven", "t", "spent", "any", "time", "thinking", "about", "how", "to", "make", "this", "a", "more", "general", "solution", "so", "ideas", "and", "or", "PR", "s", "be", "more", "than", "welcome", "go", "package", "main", "import", "encoding", "json", "io", "ioutil", "log", "github", "NUMBER", "com", "go", "openapi", "loads", "github", "NUMBER", "com", "go", "openapi", "loads", "fmts", "build", "ignore", "NO", "TESTS", "func", "main", "loads", "NUMBER", "AddLoader", "fmts", "NUMBER", "YAMLMatcher", "fmts", "NUMBER", "YAMLDoc", "CLI", "public", "err", "loads", "NUMBER", "Spec", "NUMBER", "swagger", "external", "NUMBER", "yml", "if", "err", "nil", "log", "NUMBER", "Fatalln", "err", "internal", "err", "loads", "NUMBER", "Spec", "NUMBER", "swagger", "internal", "NUMBER", "yml", "if", "err", "nil", "log", "NUMBER", "Fatalln", "err", "internalAPI", "public", "NUMBER", "Pristine", "NUMBER", "Spec", "for", "k", "v", "range", "internal", "NUMBER", "Spec", "NUMBER", "Definitions", "internalAPI", "NUMBER", "Definitions", "k", "v", "for", "k", "v", "range", "internal", "NUMBER", "Spec", "NUMBER", "Paths", "NUMBER", "Paths", "internalAPI", "NUMBER", "Paths", "NUMBER", "Paths", "k", "v", "internalAPI", "NUMBER", "Schemes", "string", "http", "internalAPI", "NUMBER", "Security", "nil", "internalAPI", "NUMBER", "SecurityDefinitions", "nil", "b", "_", "json", "NUMBER", "MarshalIndent", "internalAPI", "ioutil", "NUMBER", "WriteFile", "NUMBER", "swagger", "internal", "NUMBER", "json", "b", "NUMBER", "serverAPI", "public", "NUMBER", "Pristine", "NUMBER", "Spec", "for", "k", "v", "range", "internal", "NUMBER", "Spec", "NUMBER", "Definitions", "serverAPI", "NUMBER", "Definitions", "k", "v", "for", "k", "v", "range", "internal", "NUMBER", "Spec", "NUMBER", "Paths", "NUMBER", "Paths", "serverAPI", "NUMBER", "Paths", "NUMBER", "Paths", "k", "v", "bs", "_", "json", "NUMBER", "MarshalIndent", "serverAPI", "ioutil", "NUMBER", "WriteFile", "NUMBER", "swagger", "server", "NUMBER", "json", "bs", "NUMBER", "this", "looks", "great", "seen", "as", "I", "work", "for", "vmware", "i", "ll", "have", "to", "step", "up", "and", "also", "add", "vmware", "fusion", "workstation", "based", "build", "in", "the", "scripts", "I", "ve", "update", "the", "circle", "config", "file", "on", "master", "so", "that", "it", "pulls", "in", "an", "image", "with", "an", "ssh", "client", "so", "that", "should", "make", "your", "build", "proceed", "I", "think", "you", "can", "use", "strfmt", "NUMBER", "File", "or", "os", "NUMBER", "File", "in", "your", "struct", "go", "type", "fileResponse", "struct", "In", "body", "File", "strfmt", "NUMBER", "File", "I", "m", "terribly", "sorry", "the", "File", "type", "be", "in", "the", "runtime", "package", "runtime", "NUMBER", "File", "I", "believe", "you", "can", "also", "return", "a", "stream", "like", "io", "NUMBER", "Reader", "Have", "you", "seen", "the", "strfmt", "types", "isn", "t", "the", "DateTime", "or", "Time", "sufficient", "I", "d", "like", "to", "see", "few", "steps", "to", "reproduce", "so", "it", "s", "easier", "to", "understand", "what", "s", "going", "on", "NUMBER", "the", "problem", "isn", "t", "isolated", "to", "go", "swagger", "it", "s", "that", "many", "other", "things", "use", "the", "golang", "x", "net", "context", "and", "you", "want", "to", "be", "able", "to", "pass", "them", "along", "NUMBER", "To", "make", "this", "work", "we", "have", "to", "define", "a", "default", "import", "for", "the", "context", "package", "that", "will", "solve", "it", "NUMBER", "it", "goes", "in", "generator", "operations", "NUMBER", "go", "and", "generator", "support", "NUMBER", "go", "that", "be", "correct", "I", "ll", "remove", "it", "in", "the", "version", "that", "will", "work", "with", "openapi", "NUMBER", "spec", "Yes", "excellent", "suggestion", "Can", "you", "elaborate", "a", "little", "bit", "more", "on", "this", "use", "case", "What", "would", "you", "expect", "from", "a", "dynamic", "client", "What", "would", "it", "add", "on", "top", "of", "the", "default", "http", "client", "I", "think", "I", "still", "don", "t", "fully", "understand", "the", "use", "case", "because", "you", "d", "have", "to", "do", "everything", "the", "code", "generator", "do", "for", "you", "by", "hand", "NUMBER", "Every", "time", "the", "API", "change", "you", "have", "to", "do", "this", "again", "NUMBER", "I", "get", "the", "use", "case", "for", "the", "server", "side", "but", "for", "the", "client", "side", "I", "don", "t", "get", "the", "value", "proposition", "NUMBER", "That", "be", "said", "you", "might", "find", "this", "test", "useful", "as", "an", "example", "LINK", "openapi", "runtime", "blob", "master", "client", "runtime_test", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "have", "you", "seen", "this", "example", "LINK", "openapi", "kvstore", "fix", "NUMBER", "fix", "NUMBER", "Swagger", "uses", "the", "go", "compiler", "infrastructure", "NUMBER", "So", "as", "long", "as", "package", "can", "be", "detected", "as", "be", "in", "use", "in", "code", "paths", "the", "scanner", "should", "find", "out", "all", "the", "annotations", "defined", "in", "those", "file", "NUMBER", "yep", "you", "can", "use", "_", "blah", "internal", "blah", "Need", "to", "test", "if", "still", "cause", "for", "panic", "NUMBER", "if", "you", "put", "it", "on", "the", "same", "line", "it", "should", "work", "go", "ListUsers", "swagger", "route", "GET", "user", "user", "listUsers", "List", "all", "the", "users", "Schemes", "https", "Produces", "application", "json", "Responses", "NUMBER", "listResponse", "NUMBER", "response", "NUMBER", "description", "Unauthorized", "please", "reopen", "if", "that", "s", "not", "the", "case", "I", "will", "never", "stand", "in", "the", "way", "of", "improvement", "bear", "in", "mind", "that", "I", "want", "to", "migrate", "to", "circle", "ci", "NUMBER", "manifests", "this", "weekend", "but", "that", "should", "be", "easy", "enough", "to", "support", "can", "you", "use", "swagger", "flatten", "before", "generating", "the", "brew", "formula", "now", "allows", "for", "customizing", "the", "name", "of", "the", "binary", "This", "has", "be", "fix", "on", "master", "IIRC", "would", "it", "be", "possible", "to", "share", "the", "spec", "that", "leads", "to", "this", "Although", "this", "second", "comment", "would", "probably", "be", "better", "in", "a", "separate", "issue", "we", "need", "to", "support", "enums", "and", "document", "them", "so", "they", "show", "up", "as", "validations", "NUMBER", "for", "this", "we", "d", "need", "to", "introduce", "a", "swagger", "enum", "marker", "so", "that", "we", "know", "what", "to", "do", "with", "this", "It", "also", "occur", "to", "me", "that", "if", "you", "want", "to", "use", "an", "enum", "as", "map", "key", "value", "you", "re", "essentially", "make", "a", "more", "expensive", "struct", "because", "the", "values", "you", "can", "put", "in", "the", "keys", "be", "finite", "and", "know", "in", "advance", "Related", "to", "NUMBER", "the", "NUMBER", "things", "be", "orthogonal", "concerns", "NUMBER", "Whatever", "serves", "the", "UI", "in", "go", "swagger", "be", "just", "a", "middleware", "LINK", "openapi", "runtime", "blob", "master", "middleware", "redoc", "NUMBER", "go", "to", "integrate", "swagger", "ui", "you", "would", "need", "to", "figure", "out", "how", "to", "serve", "the", "static", "file", "and", "call", "the", "UI", "with", "url", "LINK", "This", "discrepancy", "be", "because", "of", "how", "golint", "wants", "naming", "to", "be", "do", "NUMBER", "There", "be", "a", "set", "of", "blessed", "initialisms", "LINK", "L", "NUMBER", "L", "NUMBER", "and", "those", "be", "not", "split", "up", "by", "to", "the", "rules", "defined", "here", "LINK", "openapi", "swag", "blob", "master", "util", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "if", "it", "would", "be", "Slb", "that", "be", "correct", "NUMBER", "There", "isn", "t", "at", "this", "point", "unfortunately", "NUMBER", "it", "would", "require", "extending", "the", "configuration", "mechanism", "with", "a", "way", "to", "override", "the", "filters", "NUMBER", "And", "a", "way", "to", "dynamically", "load", "code", "NUMBER", "I", "ll", "open", "a", "ticket", "about", "introduce", "a", "plugin", "mechanism", "for", "go", "NUMBER", "and", "beyond", "type", "testresponse", "struct", "in", "body", "Body", "test", "can", "you", "also", "run", "go", "generate", "NUMBER", "generator", "and", "commit", "the", "generator", "bindata", "NUMBER", "go", "file", "Otherwise", "the", "change", "won", "t", "be", "pick", "up", "by", "the", "binary", "yes", "please", "It", "doesn", "t", "know", "about", "the", "producer", "for", "that", "mime", "type", "it", "works", "for", "me", "when", "I", "do", "it", "like", "this", "go", "package", "main", "import", "log", "os", "github", "NUMBER", "com", "go", "openapi", "strfmt", "github", "NUMBER", "com", "go", "openapi", "runtime", "httptransport", "github", "NUMBER", "com", "go", "openapi", "runtime", "client", "apiclient", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "examples", "todo", "list", "client", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "examples", "todo", "list", "client", "todos", "func", "main", "create", "the", "API", "client", "tr", "httptransport", "NUMBER", "New", "NUMBER", "nil", "tr", "NUMBER", "Producers", "application", "io", "NUMBER", "swagger", "NUMBER", "examples", "NUMBER", "todo", "list", "NUMBER", "v", "NUMBER", "json", "runtime", "NUMBER", "JSONProducer", "tr", "NUMBER", "Consumers", "application", "io", "NUMBER", "swagger", "NUMBER", "examples", "NUMBER", "todo", "list", "NUMBER", "v", "NUMBER", "json", "runtime", "NUMBER", "JSONConsumer", "client", "apiclient", "NUMBER", "New", "tr", "strfmt", "NUMBER", "Default", "make", "the", "authenticated", "request", "to", "get", "all", "items", "apiKeyHeaderAuth", "httptransport", "NUMBER", "APIKeyAuth", "X", "API", "TOKEN", "header", "os", "NUMBER", "Getenv", "API_KEY", "_", "err", "client", "NUMBER", "Todos", "NUMBER", "AddOne", "todos", "NUMBER", "NewAddOneParams", "apiKeyHeaderAuth", "log", "NUMBER", "Fatal", "err", "at", "this", "point", "there", "be", "no", "easy", "way", "to", "disable", "auth", "short", "of", "remove", "it", "from", "your", "spec", "I", "see", "no", "error", "NUMBER", "The", "information", "at", "the", "bottom", "be", "more", "a", "reminder", "that", "you", "need", "those", "package", "NUMBER", "haven", "t", "be", "able", "to", "look", "at", "it", "for", "cause", "of", "the", "issue", "NUMBER", "I", "assume", "it", "s", "miss", "an", "opportunity", "to", "include", "the", "format", "validator", "Duplicate", "of", "NUMBER", "in", "non", "body", "parameters", "maps", "be", "not", "support", "in", "the", "swagger", "spec", "NUMBER", "In", "the", "body", "json", "schema", "only", "allows", "maps", "with", "string", "keys", "I", "think", "you", "can", "use", "x", "nullable", "true", "for", "this", "use", "case", "the", "spec", "generates", "fine", "for", "me", "when", "I", "skip", "validation", "swagger", "generate", "client", "A", "Nmdb", "skip", "validation", "f", "sw", "NUMBER", "json", "Any", "tool", "I", "ve", "tried", "has", "issue", "validating", "the", "spec", "in", "your", "example", "NUMBER", "Would", "it", "be", "possible", "to", "get", "a", "smaller", "repro", "of", "the", "circular", "dependency", "the", "spec", "in", "your", "example", "be", "large", "and", "complex", "I", "assume", "this", "be", "for", "validations", "that", "fall", "outside", "of", "what", "swagger", "can", "do", "for", "you", "and", "prior", "to", "databinding", "the", "body", "property", "If", "you", "want", "to", "read", "the", "body", "more", "than", "once", "you", "have", "to", "put", "it", "back", "as", "an", "io", "NUMBER", "ReadCloser", "so", "you", "can", "read", "it", "in", "a", "byte", "and", "then", "replace", "r", "NUMBER", "Body", "with", "a", "bytes", "NUMBER", "NewBuffer", "theBytes", "These", "readers", "be", "single", "use", "only", "Related", "to", "NUMBER", "would", "it", "be", "possible", "to", "add", "a", "test", "and", "we", "also", "have", "an", "extension", "that", "allows", "you", "to", "use", "pre", "exist", "types", "as", "models", "you", "annotate", "your", "spec", "like", "this", "LINK", "swagger", "go", "swagger", "blob", "master", "fixture", "codegen", "exist", "model", "NUMBER", "yml", "L", "NUMBER", "L", "NUMBER", "The", "good", "news", "be", "that", "you", "don", "t", "have", "to", "wait", "until", "I", "upgrade", "NUMBER", "The", "mailru", "in", "this", "repo", "be", "for", "the", "CLI", "but", "you", "be", "free", "to", "upgrade", "the", "one", "in", "your", "vendor", "NUMBER", "I", "ll", "try", "to", "upgrade", "this", "week", "though", "i", "upgrade", "a", "while", "ago", "both", "those", "orgs", "be", "owned", "by", "me", "feel", "free", "to", "submit", "a", "pr", "to", "runtime", "This", "be", "a", "great", "addition", "resolve", "by", "robbert", "NUMBER", "we", "use", "goimports", "for", "finding", "imports", "and", "optimizing", "imports", "LINK", "I", "think", "this", "be", "fix", "on", "master", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "Could", "you", "confirm", "Excellent", "contribution", "NUMBER", "you", "need", "to", "start", "from", "your", "main", "because", "that", "s", "where", "it", "starts", "reflecting", "over", "your", "package", "NUMBER", "it", "works", "its", "way", "back", "from", "main", "to", "discover", "all", "the", "package", "that", "be", "in", "use", "by", "your", "program", "like", "the", "go", "compiler", "do", "NUMBER", "Alternatively", "you", "can", "import", "all", "the", "package", "you", "need", "with", "in", "your", "doc", "NUMBER", "go", "so", "the", "tool", "knows", "what", "to", "look", "at", "NUMBER", "go", "import", "_", "package", "with", "routes", "_", "package", "with", "more", "routes", "you", "need", "to", "generate", "the", "spec", "at", "build", "time", "the", "code", "be", "not", "likely", "to", "change", "at", "runtime", "be", "it", "You", "can", "then", "use", "a", "tool", "like", "go", "bindata", "to", "embed", "the", "generate", "spec", "in", "your", "binary", "too", "And", "you", "can", "then", "use", "the", "go", "openapi", "loads", "or", "go", "openapi", "spec", "package", "to", "load", "or", "serve", "that", "file", "NUMBER", "you", "should", "not", "have", "go", "swagger", "go", "swagger", "in", "your", "vendor", "or", "use", "types", "out", "of", "go", "swagger", "go", "swagger", "It", "s", "not", "meant", "to", "be", "embedded", "yes", "the", "problem", "be", "occur", "when", "you", "start", "importing", "types", "out", "of", "go", "swagger", "go", "swagger", "NUMBER", "You", "can", "have", "it", "in", "your", "vendor", "NUMBER", "The", "only", "reason", "swagger", "generate", "spec", "would", "discover", "descriptions", "in", "other", "types", "be", "if", "they", "be", "detected", "to", "be", "use", "from", "a", "codepath", "that", "starts", "at", "your", "main", "file", "NUMBER", "With", "go", "openapi", "validate", "NUMBER", "the", "spec", "validate", "will", "issue", "a", "warning", "on", "this", "situation", "NUMBER", "I", "understand", "this", "doesn", "t", "fully", "address", "the", "issue", "but", "it", "s", "at", "least", "a", "start", "NUMBER", "You", "can", "use", "a", "roundtripper", "for", "this", "purpose", "see", "here", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "can", "you", "run", "go", "generate", "NUMBER", "generator", "so", "that", "the", "change", "gets", "pick", "up", "in", "the", "compiled", "binary", "it", "update", "the", "NUMBER", "generator", "bindata", "NUMBER", "go", "file", "this", "be", "not", "support", "in", "openapi", "NUMBER", "specification", "In", "swagger", "NUMBER", "there", "be", "no", "support", "for", "this", "however", "you", "can", "still", "achieve", "this", "by", "putting", "the", "query", "params", "that", "dictate", "the", "models", "in", "the", "path", "NUMBER", "yaml", "paths", "something", "objectType", "thisThing", "get", "NUMBER", "something", "objectType", "otherThing", "get", "NUMBER", "This", "thread", "has", "be", "archived", "in", "our", "FAQ", "LINK", "NUMBER", "You", "may", "access", "it", "directly", "here", "LINK", "_model", "NUMBER", "html", "request", "response", "can", "have", "different", "objects", "returned", "based", "on", "query", "parameters", "with", "PR", "NUMBER", "there", "shouldn", "t", "be", "a", "nested", "operations", "operations", "folder", "I", "think", "you", "made", "this", "issue", "on", "the", "wrong", "repo", "NUMBER", "This", "repo", "be", "about", "creating", "go", "code", "fro", "swagger", "specifications", "NUMBER", "Your", "issue", "seems", "to", "be", "with", "erlang", "compilation", "NUMBER", "The", "message", "you", "see", "actually", "means", "everything", "be", "OK", "it", "only", "prints", "that", "as", "a", "reminder", "and", "a", "tip", "for", "when", "compilation", "doesn", "t", "work", "NUMBER", "For", "bearer", "auth", "you", "want", "yaml", "securityDefinitions", "auth_token", "type", "oauth", "NUMBER", "authorizationUrl", "LINK", "tokenUrl", "LINK", "flow", "accessCode", "scopes", "all", "all", "security", "auth_token", "all", "fix", "by", "go", "openapi", "runtime", "NUMBER", "cda", "NUMBER", "f", "you", "can", "annotate", "your", "date", "property", "with", "x", "nullable", "true", "that", "gives", "you", "a", "pointer", "value", "for", "the", "strfmt", "NUMBER", "DateTime", "property", "and", "allows", "you", "to", "retain", "the", "NULL", "did", "you", "see", "this", "thread", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "From", "go", "s", "perspective", "go", "swagger", "doesn", "t", "do", "anything", "particularly", "nasty", "NUMBER", "We", "try", "to", "not", "import", "many", "package", "and", "the", "ones", "that", "we", "do", "need", "to", "be", "in", "pure", "go", "NUMBER", "So", "I", "think", "that", "makes", "it", "possible", "to", "move", "to", "app", "engine", "NUMBER", "I", "have", "no", "experience", "with", "it", "though", "NUMBER", "Keep", "us", "posted", "This", "was", "fix", "patch", "atm", "be", "not", "support", "most", "of", "the", "implementation", "exists", "in", "NUMBER", "but", "the", "test", "suite", "isn", "t", "complete", "yet", "NUMBER", "As", "a", "side", "effect", "it", "would", "also", "make", "the", "entire", "go", "swagger", "generate", "codebase", "much", "more", "performant", "because", "it", "uses", "mailru", "easyjson", "The", "branch", "in", "that", "PR", "contains", "breaking", "change", "which", "be", "why", "I", "didn", "t", "continue", "with", "it", "yet", "but", "because", "openapi", "NUMBER", "will", "be", "release", "at", "the", "end", "of", "the", "month", "I", "wanted", "to", "move", "that", "work", "into", "openapi", "NUMBER", "implementation", "NUMBER", "the", "values", "other", "than", "ref", "don", "t", "matter", "it", "doesn", "t", "affect", "validity", "of", "the", "spec", "it", "just", "means", "other", "field", "than", "ref", "be", "ignored", "NUMBER", "I", "suppose", "we", "can", "fix", "issue", "like", "this", "by", "add", "a", "post", "processing", "of", "the", "spec", "to", "clear", "warnings", "NUMBER", "Perhaps", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "scanner", "NUMBER", "go", "L", "NUMBER", "so", "the", "point", "of", "the", "constructor", "method", "be", "this", "exact", "use", "case", "NUMBER", "We", "need", "a", "way", "to", "express", "forever", "because", "there", "be", "certain", "cases", "where", "you", "really", "don", "t", "want", "a", "request", "to", "timeout", "NUMBER", "For", "example", "when", "you", "write", "an", "API", "that", "behaves", "like", "docker", "attach", "exec", "NUMBER", "The", "reason", "I", "let", "it", "be", "context", "deadline", "exceeded", "be", "exactly", "because", "it", "s", "a", "well", "know", "error", "case", "that", "s", "easy", "to", "match", "for", "and", "that", "matcher", "be", "reusable", "outside", "the", "code", "of", "go", "swagger", "NUMBER", "That", "doesn", "t", "mean", "I", "would", "reject", "a", "PR", "from", "somebody", "make", "a", "more", "specific", "error", "type", "but", "I", "do", "think", "it", "would", "break", "a", "number", "of", "applications", "that", "already", "rely", "on", "this", "behavior", "NUMBER", "So", "that", "PR", "would", "have", "to", "include", "a", "flag", "to", "opt", "in", "to", "this", "behavior", "at", "generation", "time", "The", "case", "be", "for", "example", "a", "long", "stream", "over", "http", "like", "server", "sent", "events", "there", "you", "want", "the", "connection", "to", "be", "opened", "forever", "forever", "be", "signaled", "by", "use", "NUMBER", "just", "to", "be", "clear", "I", "can", "t", "distinguish", "between", "unset", "and", "NUMBER", "be", "the", "code", "for", "this", "available", "I", "m", "not", "sure", "without", "be", "able", "to", "look", "at", "the", "code", "with", "the", "annotations", "It", "can", "be", "as", "simple", "as", "a", "spelling", "mistake", "on", "the", "parameters", "or", "it", "can", "be", "a", "bug", "with", "the", "path", "detection", "NUMBER", "Is", "run", "it", "with", "DEBUG", "NUMBER", "SWAGGER_DEBUG", "NUMBER", "helpful", "at", "all", "relate", "to", "OAI", "OpenAPI", "Specification", "NUMBER", "even", "otto", "NUMBER", "js", "punted", "on", "implement", "the", "javascript", "regex", "NUMBER", "So", "the", "only", "option", "that", "be", "left", "to", "support", "this", "be", "to", "link", "with", "a", "C", "based", "library", "NUMBER", "I", "don", "t", "want", "to", "do", "that", "because", "it", "kills", "portability", "NUMBER", "Should", "there", "be", "a", "pure", "go", "implementation", "of", "ECMA", "NUMBER", "LINK", "international", "NUMBER", "org", "publications", "standards", "Ecma", "NUMBER", "htm", "regular", "expressions", "appear", "I", "wouldn", "t", "mind", "integrating", "it", "More", "info", "LINK", "regular", "expression", "incompatibility", "robertkrimen", "otto", "NUMBER", "robertkrimen", "otto", "NUMBER", "Look", "into", "integrating", "LINK", "can", "you", "regenerate", "the", "embedded", "template", "with", "go", "generate", "NUMBER", "generator", "the", "gen", "debug", "makes", "them", "refer", "to", "a", "path", "you", "our", "file", "system", "Users", "NUMBER", "src", "you", "can", "set", "your", "own", "producers", "and", "consumers", "NUMBER", "The", "ones", "you", "ve", "get", "in", "your", "example", "will", "do", "the", "right", "thing", "the", "code", "generator", "knows", "about", "that", "naming", "pattern", "for", "json", "You", "can", "use", "a", "custom", "transport", "which", "allows", "you", "to", "set", "the", "user", "agent", "NUMBER", "LINK", "openapi", "runtime", "blob", "master", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "And", "you", "can", "configure", "it", "with", "this", "constructor", "method", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "todo", "list", "client", "todo_list_client", "NUMBER", "go", "L", "NUMBER", "You", "can", "also", "configure", "that", "runtime", "with", "a", "stdlib", "http", "NUMBER", "Client", "LINK", "openapi", "runtime", "blob", "master", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "You", "can", "extend", "intercept", "a", "http", "request", "with", "the", "http", "NUMBER", "RoundTripper", "interface", "NUMBER", "LINK", "RoundTripper", "which", "you", "can", "set", "here", "LINK", "openapi", "runtime", "blob", "master", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "so", "for", "the", "client", "here", "go", "var", "myRoundTripper", "http", "NUMBER", "RoundTripper", "createRoundTripper", "transport", "httptransport", "NUMBER", "New", "cfg", "NUMBER", "Host", "cfg", "NUMBER", "BasePath", "cfg", "NUMBER", "Schemes", "transport", "NUMBER", "Transport", "myRoundTripper", "todoListClient", "New", "transport", "nil", "reopened", "so", "people", "can", "find", "it", "easily", "yes", "it", "can", "the", "roundtripper", "be", "the", "last", "thing", "executed", "before", "sending", "the", "request", "on", "the", "wire", "this", "be", "a", "bug", "I", "think", "the", "format", "validator", "be", "never", "generate", "for", "the", "field", "It", "s", "a", "generic", "problem", "for", "all", "format", "validations", "occuring", "on", "all", "simple", "parameters", "it", "works", "for", "schema", "NUMBER", "casualjim", "do", "you", "remember", "any", "specific", "reason", "to", "call", "directly", "strfmt", "rather", "than", "validate", "NUMBER", "FormatOf", "like", "we", "do", "for", "schemas", "The", "bug", "be", "similar", "to", "the", "one", "in", "NUMBER", "I", "m", "test", "a", "fix", "along", "the", "same", "lines", "hasValidation", "should", "be", "true", "when", "a", "customFormat", "be", "applied", "NUMBER", "I", "be", "suspecting", "there", "ae", "similar", "shortcomings", "with", "headers", "as", "param", "as", "response", "and", "items", "in", "SimpleSchema", "params", "headers", "Fixed", "operation", "binder", "would", "look", "like", "this", "NUMBER", "Tell", "me", "if", "you", "find", "anything", "wrong", "with", "this", "NUMBER", "golang", "func", "o", "GetOptionalParams", "bindNotAnOption", "NUMBER", "rawData", "string", "hasKey", "bool", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "hasKey", "return", "error", "NUMBER", "Required", "notAnOption", "NUMBER", "query", "var", "raw", "string", "if", "len", "rawData", "NUMBER", "raw", "rawData", "len", "rawData", "NUMBER", "if", "err", "validate", "NUMBER", "RequiredString", "notAnOption", "NUMBER", "query", "raw", "err", "nil", "return", "err", "value", "err", "formats", "NUMBER", "Parse", "uuid", "raw", "if", "err", "nil", "return", "error", "NUMBER", "InvalidType", "notAnOption", "NUMBER", "query", "strfmt", "NUMBER", "UUID", "raw", "o", "NUMBER", "NotAnOption", "NUMBER", "value", "NUMBER", "strfmt", "NUMBER", "UUID", "if", "err", "o", "NUMBER", "validateNotAnOption", "NUMBER", "formats", "err", "nil", "return", "err", "return", "nil", "func", "o", "GetOptionalParams", "validateNotAnOption", "NUMBER", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "FormatOf", "notAnOption", "NUMBER", "query", "uuid", "o", "NUMBER", "NotAnOption", "NUMBER", "String", "formats", "err", "nil", "return", "err", "return", "nil", "local", "file", "yaml", "swagger", "NUMBER", "info", "title", "Test", "external", "refs", "version", "NUMBER", "x", "external", "ref", "LINK", "paths", "get", "parameters", "ref", "x", "external", "parameters", "complex", "id", "responses", "default", "description", "who", "knows", "remote", "file", "yaml", "parameters", "complex", "id", "name", "complex", "id", "required", "true", "in", "path", "description", "a", "complex", "id", "type", "string", "pattern", "notcomplex", "NUMBER", "the", "core", "of", "the", "issue", "will", "be", "find", "in", "this", "file", "LINK", "openapi", "spec", "blob", "master", "expander", "NUMBER", "go", "And", "there", "be", "a", "bunch", "of", "test", "for", "the", "functionality", "LINK", "openapi", "spec", "blob", "master", "expander_test", "NUMBER", "go", "The", "current", "implementation", "mixes", "local", "and", "remote", "refs", "and", "doesn", "t", "favor", "remote", "refs", "as", "more", "important", "NUMBER", "This", "can", "be", "alleviated", "to", "some", "degree", "by", "use", "the", "flatten", "command", "before", "generating", "which", "do", "prioritize", "remote", "refs", "over", "local", "refs", "NUMBER", "Although", "it", "still", "doesn", "t", "deal", "with", "recursive", "remote", "refs", "the", "source", "for", "it", "be", "here", "LINK", "openapi", "analysis", "blob", "master", "flatten", "NUMBER", "go", "LINK", "openapi", "analysis", "blob", "master", "flatten_test", "NUMBER", "go", "close", "NUMBER", "close", "NUMBER", "remove", "type", "object", "and", "you", "have", "the", "way", "perhaps", "it", "would", "be", "good", "to", "just", "put", "it", "in", "the", "examples", "folder", "in", "this", "repo", "I", "have", "a", "fix", "locally", "for", "this", "but", "still", "need", "to", "write", "a", "test", "for", "it", "NUMBER", "Work", "gets", "in", "between", "you", "have", "to", "update", "github", "NUMBER", "com", "go", "openapi", "runtime", "that", "s", "where", "the", "fix", "really", "was", "made", "yes", "according", "to", "the", "URI", "RFC", "a", "trail", "slash", "be", "not", "significant", "The", "content", "type", "of", "your", "request", "needs", "to", "be", "set", "to", "application", "json", "At", "the", "moment", "it", "s", "not", "present", "and", "then", "the", "default", "be", "application", "octet", "stream", "we", "ll", "support", "it", "the", "policy", "I", "follow", "be", "current", "and", "current", "NUMBER", "So", "both", "NUMBER", "and", "NUMBER", "should", "be", "support", "after", "NUMBER", "be", "release", "NUMBER", "Thanks", "for", "finding", "this", "I", "ll", "look", "into", "what", "needs", "to", "happen", "to", "work", "with", "go", "NUMBER", "over", "the", "weekend", "unless", "somebody", "gets", "to", "it", "earlier", "it", "s", "fix", "in", "the", "runtime", "just", "update", "your", "vendor", "or", "the", "package", "in", "your", "gopath", "this", "doesn", "t", "work", "for", "you", "LINK", "did", "you", "update", "your", "dependencies", "in", "particular", "the", "github", "NUMBER", "com", "go", "openapi", "spec", "dependency", "Do", "you", "get", "the", "expected", "result", "if", "you", "flatten", "your", "spec", "first", "swagger", "flatten", "NUMBER", "_api", "swagger", "NUMBER", "yaml", "swagger", "NUMBER", "json", "flatten", "be", "still", "experimental", "and", "it", "would", "result", "in", "a", "breaking", "change", "for", "people", "who", "ve", "be", "use", "swagger", "for", "longer", "than", "this", "feature", "exists", "NUMBER", "I", "know", "there", "be", "still", "issue", "with", "the", "flatten", "command", "like", "it", "doesn", "t", "recursively", "resolve", "certain", "definitions", "so", "until", "I", "know", "this", "be", "a", "stable", "command", "I", "wanted", "to", "keep", "it", "out", "of", "the", "default", "usage", "path", "NUMBER", "If", "you", "use", "go", "swagger", "with", "generate", "it", "would", "just", "mean", "NUMBER", "more", "go", "generate", "comment", "prior", "to", "the", "generate", "command", "the", "fix", "introduces", "a", "regression", "see", "the", "go", "openapi", "validate", "NUMBER", "comment", "Because", "we", "use", "goimports", "to", "resolve", "imported", "libraries", "package", "You", "re", "generating", "go", "code", "so", "if", "you", "want", "to", "compile", "it", "it", "would", "also", "need", "to", "be", "in", "a", "gopath", "You", "can", "compile", "a", "single", "file", "that", "just", "uses", "stdlib", "features", "but", "for", "multiple", "file", "like", "a", "swagger", "generate", "server", "that", "be", "a", "very", "painful", "situation", "ic", "perhap", "you", "can", "add", "the", "swagger", "binary", "to", "your", "docker", "container", "and", "run", "the", "generation", "in", "the", "container", "itself", "NUMBER", "We", "build", "for", "linux", "as", "well", "and", "we", "also", "publish", "a", "container", "with", "go", "swagger", "already", "inside", "based", "on", "the", "official", "golang", "container", "with", "alpine", "Could", "you", "add", "a", "test", "and", "verify", "the", "generate", "code", "will", "do", "the", "right", "thing", "for", "items", "that", "look", "like", "yaml", "headers", "status", "type", "array", "items", "type", "array", "items", "type", "array", "items", "type", "string", "enum", "NEW", "PUBLISHED", "OPEN", "FINISHED", "Ok", "there", "be", "a", "number", "of", "issue", "here", "NUMBER", "yes", "we", "should", "allow", "for", "add", "custom", "struct", "tags", "this", "can", "be", "support", "by", "defining", "a", "vendor", "extension", "to", "drive", "that", "process", "NUMBER", "With", "that", "we", "should", "be", "able", "to", "support", "some", "form", "of", "bson", "protobuf", "etc", "NUMBER", "However", "json", "schema", "be", "very", "elaborate", "and", "there", "be", "cases", "where", "a", "custom", "interface", "needs", "to", "be", "implement", "to", "get", "to", "the", "right", "result", "but", "for", "simple", "cases", "the", "tags", "would", "work", "NUMBER", "Things", "like", "additionals", "properties", "or", "allOf", "etc", "they", "d", "get", "problematic", "NUMBER", "We", "can", "extract", "the", "tags", "for", "struct", "from", "struct", "field", "and", "put", "them", "in", "a", "unprotected", "template", "NUMBER", "The", "reason", "the", "model", "template", "be", "protected", "be", "because", "of", "the", "complexity", "of", "json", "schema", "NUMBER", "It", "s", "never", "be", "a", "goal", "of", "go", "swagger", "to", "allow", "for", "direct", "insertion", "in", "the", "database", "because", "this", "grows", "the", "problem", "space", "significantly", "and", "I", "personally", "think", "that", "for", "anything", "but", "the", "simplest", "of", "applications", "you", "shouldn", "t", "store", "things", "you", "receive", "from", "the", "API", "directly", "into", "the", "database", "NUMBER", "In", "most", "cases", "you", "probably", "want", "to", "denormalize", "these", "data", "structures", "NUMBER", "NUMBER", "If", "you", "do", "decide", "you", "want", "to", "mix", "up", "external", "and", "internal", "concerns", "in", "your", "application", "then", "somebody", "will", "need", "to", "add", "the", "right", "interface", "methods", "to", "LINK", "openapi", "strfmt", "it", "s", "be", "do", "for", "sql", "mapstructure", "and", "json", "NUMBER", "You", "can", "add", "the", "bson", "interfaces", "there", "NUMBER", "NUMBER", "If", "you", "really", "want", "to", "use", "bson", "NUMBER", "ObjectId", "directly", "then", "you", "can", "define", "a", "new", "format", "to", "indicate", "that", "NUMBER", "I", "think", "it", "s", "a", "common", "enough", "problem", "people", "run", "into", "for", "it", "to", "be", "worth", "it", "NUMBER", "This", "would", "require", "change", "in", "the", "generator", "code", "too", "because", "it", "has", "a", "map", "of", "serializers", "NUMBER", "Thanks", "can", "you", "run", "go", "generate", "NUMBER", "generator", "Otherwise", "the", "template", "change", "won", "t", "be", "pick", "up", "in", "the", "binary", "you", "can", "implement", "a", "responder", "function", "which", "be", "func", "http", "NUMBER", "ResponseWriter", "runtime", "NUMBER", "Producer", "LINK", "openapi", "runtime", "blob", "master", "middleware", "context", "NUMBER", "go", "L", "NUMBER", "The", "params", "struct", "has", "access", "to", "the", "http", "NUMBER", "Request", "and", "with", "the", "responder", "function", "you", "have", "access", "to", "the", "response", "writer", "go", "api", "NUMBER", "StaticSayHelloHandler", "static", "NUMBER", "SayHelloHandlerFunc", "func", "params", "static", "NUMBER", "SayHelloParams", "middleware", "NUMBER", "Responder", "return", "middleware", "NUMBER", "ResponderFunc", "func", "rw", "http", "NUMBER", "ResponseWriter", "_", "runtime", "NUMBER", "Producer", "conn", "err", "upgrader", "NUMBER", "Upgrade", "rw", "params", "NUMBER", "HTTPRequest", "nil", "if", "err", "nil", "log", "NUMBER", "Println", "err", "return", "casualjim", "I", "be", "not", "sure", "not", "that", "fully", "support", "additionalItems", "couldbe", "qualified", "as", "a", "bug", "NUMBER", "I", "ve", "seen", "that", "great", "efforts", "have", "be", "made", "to", "support", "this", "in", "the", "underlying", "json", "schema", "mechanics", "NUMBER", "I", "could", "check", "this", "parts", "works", "well", "for", "data", "against", "schema", "e", "NUMBER", "g", "NUMBER", "to", "validate", "default", "values", "or", "examples", "in", "spec", "validation", "even", "though", "the", "given", "schema", "specified", "be", "not", "NUMBER", "compliant", "NUMBER", "Eventually", "the", "additionalItems", "keyword", "be", "not", "support", "in", "Swagger", "NUMBER", "schemas", "NUMBER", "The", "name", "in", "there", "be", "optional", "and", "be", "for", "when", "you", "want", "to", "override", "the", "name", "key", "that", "appears", "in", "the", "definitions", "section", "of", "your", "swagger", "spec", "So", "I", "don", "t", "know", "how", "useful", "dots", "be", "there", "because", "those", "names", "should", "be", "language", "agnostic", "personally", "I", "prefer", "json", "naming", "conventions", "for", "specs", "This", "time", "stamp", "be", "miss", "zone", "info", "it", "should", "end", "with", "Z", "for", "UTC", "IIRC", "It", "can", "be", "fix", "by", "add", "more", "patterns", "here", "LINK", "openapi", "strfmt", "blob", "master", "time", "NUMBER", "go", "L", "NUMBER", "I", "m", "in", "favor", "of", "all", "a", "work", "around", "for", "this", "be", "to", "flatten", "the", "spec", "before", "generating", "it", "you", "can", "run", "your", "code", "with", "DEBUG", "NUMBER", "env", "var", "and", "it", "will", "print", "request", "response", "go", "for", "it", "if", "you", "want", "a", "type", "alias", "you", "shouldn", "t", "use", "an", "inline", "definition", "of", "the", "enum", "but", "move", "the", "enum", "to", "a", "definition", "itself", "NUMBER", "That", "will", "hint", "the", "code", "generator", "that", "you", "want", "it", "to", "be", "a", "type", "alias", "NUMBER", "takes", "care", "of", "issue", "NUMBER", "in", "your", "list", "I", "wouldn", "t", "object", "to", "expanding", "this", "to", "also", "do", "that", "for", "inline", "enum", "definitions", "NUMBER", "I", "think", "there", "be", "many", "different", "kinds", "of", "enums", "to", "be", "compliant", "with", "json", "schema", "and", "string", "enums", "be", "not", "the", "only", "ones", "that", "matter", "NUMBER", "According", "to", "json", "schema", "_any_", "type", "can", "be", "use", "in", "an", "enum", "this", "include", "arrays", "and", "objects", "Not", "importing", "of", "validate", "be", "kind", "of", "futile", "because", "other", "validations", "that", "be", "present", "will", "require", "it", "anyway", "NUMBER", "Surely", "your", "application", "doesn", "t", "have", "NUMBER", "model", "with", "NUMBER", "property", "that", "be", "an", "enum", "so", "I", "don", "t", "quite", "understand", "the", "objection", "to", "it", "NUMBER", "If", "it", "be", "NUMBER", "model", "with", "NUMBER", "property", "and", "that", "be", "an", "enum", "I", "don", "t", "know", "what", "codegen", "buys", "you", "at", "all", "NUMBER", "The", "reason", "it", "uses", "a", "singleton", "be", "because", "of", "complex", "objects", "like", "nested", "structs", "can", "also", "be", "enums", "in", "which", "case", "it", "s", "much", "harder", "to", "generate", "constants", "for", "them", "NUMBER", "init", "comes", "at", "a", "negligible", "one", "time", "cost", "so", "other", "than", "cleanliness", "I", "don", "t", "know", "what", "the", "objection", "be", "as", "this", "be", "unexported", "usage", "in", "generate", "code", "NUMBER", "So", "what", "be", "the", "objection", "besides", "it", "s", "not", "the", "code", "you", "would", "have", "preferred", "to", "see", "the", "most", "for", "this", "narrower", "use", "case", "NUMBER", "json", "ast", "with", "support", "for", "parser", "position", "NUMBER", "LINK", "json", "For", "composed", "objects", "there", "might", "also", "be", "inheritance", "involved", "etc", "NUMBER", "At", "first", "glance", "I", "don", "t", "know", "why", "the", "custom", "marshaller", "was", "triggered", "because", "there", "be", "no", "discriminator", "involved", "NUMBER", "In", "the", "future", "it", "would", "be", "nice", "to", "generate", "custom", "marshal", "unmarshal", "methods", "for", "every", "generate", "struct", "use", "LINK", "when", "a", "discriminator", "be", "involved", "because", "then", "you", "have", "only", "an", "interface", "and", "it", "needs", "to", "be", "able", "to", "marshal", "a", "concrete", "type", "can", "you", "run", "go", "generate", "NUMBER", "generator", "so", "that", "the", "template", "change", "be", "include", "in", "the", "binary", "sure", "if", "you", "want", "to", "add", "by", "all", "means", "maybe", "duplicate", "of", "NUMBER", "so", "sorry", "I", "didn", "t", "see", "it", "the", "first", "time", "around", "NUMBER", "you", "still", "need", "to", "run", "go", "generate", "NUMBER", "generator", "because", "you", "change", "the", "template", "and", "without", "it", "the", "change", "won", "t", "show", "up", "in", "bindata", "NUMBER", "go", "yes", "if", "template", "be", "change", "then", "bindata", "needs", "to", "get", "change", "too", "in", "the", "binary", "that", "s", "how", "we", "distribute", "the", "template", "I", "ve", "be", "thinking", "a", "bit", "more", "about", "this", "and", "because", "the", "thing", "be", "validated", "would", "always", "be", "call", "from", "another", "method", "NUMBER", "that", "method", "could", "just", "rewrite", "the", "error", "by", "add", "the", "field", "name", "info", "in", "there", "NUMBER", "Less", "invasive", "In", "which", "project", "be", "this", "Master", "etc", "all", "point", "to", "codecov", "NUMBER", "io", "did", "you", "set", "up", "a", "TextProducer", "too", "These", "be", "good", "suggestions", "will", "look", "into", "add", "swagger", "as", "preferred", "tag", "for", "name", "overrides", "NUMBER", "You", "re", "right", "I", "don", "t", "think", "examples", "be", "currently", "support", "how", "would", "you", "like", "to", "see", "that", "work", "Thanks", "duplicate", "of", "NUMBER", "fwiw", "I", "m", "actually", "work", "on", "a", "fix", "for", "this", "atm", "you", "need", "to", "get", "those", "package", "on", "your", "gopath", "either", "by", "vendoring", "or", "go", "get", "them", "NUMBER", "After", "you", "ve", "do", "that", "and", "regenerate", "everything", "should", "work", "NUMBER", "It", "s", "because", "we", "use", "goimports", "to", "reformat", "the", "file", "and", "optimize", "imports", "NUMBER", "relate", "NUMBER", "with", "govendor", "you", "need", "to", "update", "the", "dependencies", "manuall", "so", "you", "also", "need", "to", "update", "github", "NUMBER", "com", "go", "openapi", "loads", "github", "NUMBER", "com", "go", "openapi", "analysis", "github", "NUMBER", "com", "go", "openapi", "runtime", "github", "NUMBER", "com", "go", "openapi", "spec", "github", "NUMBER", "com", "go", "openapi", "swag", "the", "spec", "be", "invalid", "too", "NUMBER", "If", "you", "want", "an", "integer", "number", "you", "need", "to", "use", "yaml", "int", "NUMBER", "type", "integer", "format", "int", "NUMBER", "int", "NUMBER", "type", "integer", "format", "int", "NUMBER", "What", "s", "the", "go", "version", "you", "re", "use", "What", "s", "the", "OS", "you", "re", "use", "Would", "it", "be", "possible", "to", "post", "a", "single", "complete", "spec", "that", "exhibits", "the", "issue", "something", "that", "can", "be", "add", "to", "the", "test", "I", "meant", "a", "contrived", "swagger", "yaml", "or", "json", "that", "can", "be", "use", "to", "reproduce", "the", "issue", "we", "don", "t", "care", "much", "for", "the", "names", "of", "the", "types", "NUMBER", "This", "partial", "information", "isn", "t", "helpful", "for", "somebody", "who", "wants", "to", "look", "at", "this", "to", "debug", "your", "issue", "NUMBER", "Can", "you", "reproduce", "this", "with", "a", "minimal", "spec", "that", "you", "just", "make", "up", "A", "minimal", "example", "that", "has", "nothing", "to", "do", "with", "your", "actual", "project", "NUMBER", "Something", "completely", "unrelated", "to", "your", "actual", "project", "NUMBER", "We", "don", "t", "care", "With", "information", "like", "you", "shared", "the", "most", "likely", "outcome", "be", "nobody", "be", "going", "to", "look", "at", "it", "because", "too", "much", "effort", "guesswork", "to", "reproduce", "this", "issue", "or", "you", "have", "to", "debug", "it", "yourself", "NUMBER", "The", "code", "that", "do", "the", "imports", "be", "here", "LINK", "Swagger", "reformats", "and", "add", "imports", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "shared", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "Thanks", "The", "reason", "it", "generates", "with", "swagger", "codegen", "be", "because", "swagger", "codegen", "doesn", "t", "generate", "any", "of", "the", "models", "NUMBER", "In", "the", "spec", "there", "be", "a", "property", "language", "with", "type", "null", "This", "be", "allow", "in", "json", "schema", "but", "not", "in", "swagger", "NUMBER", "s", "interpretation", "of", "json", "schema", "NUMBER", "yes", "can", "be", "a", "good", "idea", "to", "add", "to", "the", "codegenerator", "close", "NUMBER", "it", "s", "true", "to", "the", "spec", "change", "it", "to", "yaml", "product_type", "description", "The", "type", "of", "product", "this", "mosaic", "be", "enum", "basemap", "timelapse", "l", "NUMBER", "m", "close", "NUMBER", "be", "your", "spec", "valid", "because", "the", "default", "behavior", "be", "everything", "References", "to", "code", "source", "change", "over", "time", "NUMBER", "Is", "this", "TODO", "the", "one", "incriminated", "func", "scp", "schemaParser", "parseAllOfMember", "gofile", "ast", "NUMBER", "File", "schema", "spec", "NUMBER", "Schema", "expr", "ast", "NUMBER", "Expr", "seenPreviously", "map", "string", "string", "error", "TODO", "check", "if", "struct", "be", "annotated", "with", "swagger", "model", "or", "know", "in", "the", "definitions", "otherwise", "var", "pkg", "loader", "NUMBER", "PackageInfo", "var", "file", "ast", "NUMBER", "File", "var", "gd", "ast", "NUMBER", "GenDecl", "var", "ts", "ast", "NUMBER", "TypeSpec", "NUMBER", "The", "undocumented", "swagger", "ignore", "annotation", "provides", "in", "my", "opinion", "a", "workable", "workaround", "NUMBER", "thanks", "they", "have", "be", "fix", "now", "fix", "by", "NUMBER", "I", "had", "to", "revert", "this", "once", "I", "saw", "it", "introduces", "a", "breaking", "change", "in", "the", "generate", "code", "NUMBER", "I", "think", "this", "needs", "an", "extra", "method", "ValidateNamed", "which", "can", "have", "the", "name", "as", "extra", "argument", "NUMBER", "Then", "an", "aliased", "type", "should", "be", "validated", "with", "the", "ValidateNamed", "method", "while", "other", "things", "can", "continue", "to", "use", "the", "Validate", "method", "NUMBER", "fix", "by", "NUMBER", "which", "version", "of", "swagger", "be", "you", "use", "because", "I", "m", "having", "a", "hard", "time", "reproducing", "this", "issue", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "I", "ve", "confirmed", "that", "the", "issue", "exists", "in", "NUMBER", "and", "be", "gone", "on", "master", "I", "created", "a", "NUMBER", "release", "so", "you", "have", "a", "stable", "version", "to", "depend", "on", "LINK", "swagger", "go", "swagger", "release", "tag", "NUMBER", "you", "typically", "see", "this", "error", "when", "you", "have", "nested", "vendors", "You", "can", "do", "much", "of", "what", "you", "want", "to", "achieve", "today", "NUMBER", "Parameter", "structs", "can", "be", "associated", "with", "more", "than", "one", "operation", "and", "you", "can", "define", "more", "than", "one", "parameter", "struct", "NUMBER", "markdown", "swagger", "params", "operationid", "NUMBER", "operationid", "NUMBER", "Links", "a", "struct", "to", "one", "or", "more", "operations", "NUMBER", "The", "params", "in", "the", "resulting", "swagger", "spec", "can", "be", "composed", "of", "several", "structs", "NUMBER", "There", "be", "no", "guarantees", "given", "on", "how", "property", "name", "overlaps", "be", "resolve", "when", "several", "structs", "apply", "to", "the", "same", "operation", "NUMBER", "So", "the", "idea", "be", "that", "when", "you", "want", "to", "have", "a", "parameter", "struct", "that", "be", "comprised", "out", "of", "several", "parameter", "struct", "you", "don", "t", "annotate", "the", "one", "you", "bind", "to", "but", "rather", "compose", "it", "out", "of", "other", "pieces", "NUMBER", "Then", "the", "second", "ask", "for", "the", "responses", "there", "be", "a", "syntax", "for", "that", "use", "case", "NUMBER", "go", "swagger", "route", "PUT", "orders", "id", "orders", "updateOrder", "Responses", "default", "body", "genericError", "NUMBER", "body", "someResponse", "NUMBER", "body", "validationError", "mountItem", "PUT", "basePath", "orders", "id", "nil", "A", "GenericError", "be", "the", "default", "error", "message", "that", "be", "generate", "NUMBER", "For", "certain", "status", "code", "there", "be", "more", "appropriate", "error", "structures", "NUMBER", "swagger", "response", "genericError", "type", "GenericError", "struct", "in", "body", "Body", "struct", "Code", "int", "NUMBER", "json", "code", "Message", "error", "json", "message", "json", "body", "A", "ValidationError", "be", "an", "that", "be", "generate", "for", "validation", "failures", "NUMBER", "It", "has", "the", "same", "field", "as", "a", "generic", "error", "but", "add", "a", "Field", "property", "NUMBER", "swagger", "response", "validationError", "type", "ValidationError", "struct", "in", "body", "Body", "struct", "Code", "int", "NUMBER", "json", "code", "Message", "string", "json", "message", "Field", "string", "json", "field", "json", "body", "A", "ModelAndResponse", "contains", "a", "params", "and", "model", "annotation", "so", "it", "s", "invalid", "swagger", "model", "theModelName", "swagger", "response", "someResponse", "type", "ModelAndResponse", "struct", "ID", "int", "NUMBER", "json", "id", "omitempty", "What", "syntax", "would", "you", "propose", "for", "this", "what", "be", "the", "value", "of", "add", "more", "comments", "because", "you", "can", "deep", "merge", "an", "exist", "swagger", "file", "NUMBER", "Doesn", "t", "that", "solve", "the", "problem", "for", "you", "GlenDC", "NUMBER", "The", "benefit", "be", "that", "you", "can", "use", "swagger", "validation", "to", "validate", "your", "partial", "spec", "so", "you", "want", "to", "provide", "a", "swagger", "spec", "like", "the", "input", "spec", "but", "in", "the", "code", "So", "you", "want", "to", "provide", "a", "value", "you", "parse", "out", "of", "the", "comments", "it", "would", "probably", "be", "injected", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "scanner", "NUMBER", "go", "L", "NUMBER", "Now", "as", "to", "implementation", "of", "it", "it", "would", "be", "something", "like", "a", "swagger", "input", "annotation", "which", "be", "new", "and", "then", "the", "rest", "of", "that", "comment", "block", "can", "be", "considered", "a", "swagger", "specification", "If", "the", "first", "char", "be", "parse", "json", "otherwise", "try", "yaml", "oic", "I", "was", "come", "from", "the", "POV", "of", "having", "a", "replacement", "for", "the", "input", "swagger", "specification", "instead", "of", "what", "you", "describe", "NUMBER", "In", "case", "of", "the", "swagger", "router", "I", "think", "what", "you", "want", "be", "to", "just", "a", "few", "more", "keys", "that", "be", "recognized", "in", "that", "case", "you", "can", "extend", "what", "exists", "today", "for", "the", "swagger", "router", "NUMBER", "A", "good", "starting", "point", "to", "read", "up", "on", "that", "be", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "routes", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "superseded", "by", "NUMBER", "You", "can", "already", "reuse", "parameters", "that", "captures", "this", "case", "I", "think", "this", "be", "answered", "by", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "issuecomment", "NUMBER", "I", "can", "see", "why", "you", "want", "a", "description", "but", "at", "that", "point", "the", "swagger", "spec", "be", "nothing", "more", "than", "a", "documentation", "tool", "NUMBER", "So", "I", "don", "t", "know", "what", "you", "would", "gain", "by", "that", "over", "just", "use", "a", "markdown", "document", "NUMBER", "When", "you", "define", "headers", "like", "you", "ve", "describe", "in", "your", "proposal", "we", "lose", "type", "information", "NUMBER", "The", "point", "of", "make", "you", "define", "structs", "be", "so", "that", "you", "get", "the", "type", "checking", "from", "the", "compiler", "and", "overall", "it", "leads", "to", "a", "better", "defined", "code", "base", "and", "API", "NUMBER", "As", "for", "your", "second", "point", "be", "you", "saying", "you", "want", "to", "reuse", "a", "partial", "parameter", "struct", "to", "also", "serve", "as", "list", "of", "headers", "for", "a", "response", "NUMBER", "Because", "I", "think", "that", "might", "be", "a", "good", "addition", "NUMBER", "The", "problem", "arises", "when", "there", "be", "things", "defined", "on", "the", "parameter", "struct", "that", "aren", "t", "headers", "or", "a", "body", "do", "you", "have", "a", "solution", "for", "that", "I", "merge", "the", "NUMBER", "PR", "sorry", "for", "the", "delay", "NUMBER", "I", "have", "no", "objection", "to", "the", "addition", "of", "description", "Pretty", "much", "the", "only", "thing", "I", "will", "object", "to", "be", "putting", "type", "information", "in", "the", "comments", "NUMBER", "yeah", "data", "types", "NUMBER", "Like", "defining", "headers", "for", "responses", "and", "such", "NUMBER", "For", "headers", "you", "d", "have", "to", "give", "a", "type", "for", "the", "header", "and", "I", "m", "not", "a", "fan", "of", "duplicating", "that", "information", "in", "comments", "because", "you", "lose", "the", "benefits", "a", "compiler", "add", "NUMBER", "yeah", "I", "think", "this", "be", "a", "bug", "NUMBER", "This", "be", "the", "code", "responsible", "for", "that", "section", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "validators", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "unfortunately", "this", "doesn", "t", "exist", "today", "the", "only", "thing", "you", "can", "do", "be", "exclude", "models", "from", "be", "generate", "NUMBER", "That", "be", "said", "I", "think", "this", "would", "not", "be", "terribly", "hard", "to", "add", "though", "as", "an", "extra", "set", "of", "flags", "or", "a", "part", "of", "the", "config", "file", "NUMBER", "I", "think", "it", "would", "be", "a", "valuable", "addition", "to", "this", "toolkit", "and", "I", "d", "welcome", "a", "PR", "that", "add", "support", "for", "this", "NUMBER", "I", "think", "it", "might", "be", "worth", "defining", "NUMBER", "new", "vendor", "extensions", "because", "I", "think", "x", "go", "package", "and", "x", "go", "name", "have", "a", "slightly", "different", "reason", "for", "exist", "NUMBER", "Perhaps", "something", "like", "x", "go", "type", "and", "x", "go", "import", "package", "github", "NUMBER", "com", "user", "package", "alias", "jwk", "We", "can", "also", "make", "the", "check", "for", "the", "Validate", "implementation", "optional", "and", "only", "when", "it", "can", "be", "converted", "to", "that", "interface", "we", "ll", "call", "the", "method", "NUMBER", "That", "can", "save", "you", "having", "to", "wrap", "the", "type", "for", "the", "sake", "of", "implement", "a", "dummy", "interface", "NUMBER", "but", "I", "cannot", "figure", "out", "where", "the", "import", "string", "came", "from", "When", "a", "go", "file", "be", "generate", "we", "call", "goimports", "which", "fix", "up", "imports", "and", "formats", "the", "file", "so", "that", "might", "explain", "why", "you", "get", "the", "automatic", "import", "in", "there", "NUMBER", "I", "think", "you", "re", "on", "the", "right", "track", "with", "this", "fix", "Is", "it", "the", "same", "spec", "from", "your", "previous", "issue", "Can", "you", "share", "the", "request", "you", "make", "that", "triggers", "this", "ah", "you", "have", "to", "add", "a", "Content", "Type", "header", "to", "your", "request", "NUMBER", "This", "be", "a", "bug", "because", "it", "should", "return", "a", "NUMBER", "xx", "status", "code", "there", "be", "some", "overlap", "here", "with", "NUMBER", "which", "do", "more", "extensive", "enum", "support", "NUMBER", "Would", "it", "be", "possible", "to", "separate", "the", "NUMBER", "If", "you", "re", "planning", "on", "contribute", "more", "which", "would", "be", "awesome", "we", "have", "a", "slack", "team", "NUMBER", "LINK", "thanks", "yaml", "user", "type", "object", "required", "role", "properties", "role", "type", "integer", "enum", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "or", "yaml", "user", "type", "object", "properties", "role", "type", "integer", "x", "nullable", "true", "enum", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "o", "you", "re", "not", "setting", "the", "default", "values", "on", "the", "properties", "themselves", "I", "suppose", "it", "s", "a", "valid", "json", "schema", "no", "that", "s", "a", "bug", "it", "would", "need", "fix", "in", "the", "code", "generator", "by", "all", "means", "Reopened", "until", "a", "solution", "that", "be", "backwards", "compatible", "can", "be", "add", "This", "probably", "belongs", "on", "LINK", "api", "swagger", "core", "or", "one", "of", "the", "repos", "in", "the", "LINK", "apiswagger", "api", "org", "This", "project", "be", "only", "about", "the", "go", "bindings", "for", "swagger", "relate", "NUMBER", "it", "s", "a", "bug", "but", "fwiw", "the", "spec", "be", "also", "not", "entirely", "valid", "NUMBER", "The", "type", "of", "the", "items", "should", "be", "integer", "not", "number", "yaml", "swagger", "NUMBER", "info", "title", "Test", "description", "Test", "Service", "version", "NUMBER", "host", "localhost", "basePath", "produces", "application", "json", "schemes", "http", "paths", "myMethod", "get", "operationId", "get_test", "summary", "Get", "a", "list", "of", "int", "NUMBER", "s", "NUMBER", "responses", "NUMBER", "schema", "ref", "definitions", "test_list", "definitions", "test_list", "type", "object", "properties", "the_array", "type", "array", "items", "minimum", "NUMBER", "maximum", "NUMBER", "type", "integer", "format", "int", "NUMBER", "the", "api", "has", "a", "Logger", "property", "that", "be", "a", "function", "with", "signature", "func", "string", "NUMBER", "interface", "You", "can", "configure", "it", "with", "any", "logger", "that", "exposes", "the", "signature", "NUMBER", "eg", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "authentication", "restapi", "configure_auth_sample", "NUMBER", "go", "L", "NUMBER", "You", "can", "generate", "a", "server", "with", "flag", "strategy", "pflag", "After", "that", "you", "can", "use", "its", "integration", "to", "add", "goflags", "you", "would", "do", "this", "in", "the", "main", "file", "NUMBER", "subsequently", "it", "s", "probably", "a", "good", "idea", "to", "generate", "code", "with", "exclude", "main", "so", "the", "update", "be", "preserved", "NUMBER", "LINK", "support", "go", "flags", "when", "use", "pflag", "go", "import", "goflag", "flag", "flag", "github", "NUMBER", "com", "spf", "NUMBER", "pflag", "var", "ip", "int", "flag", "NUMBER", "Int", "flagname", "NUMBER", "help", "message", "for", "flagname", "func", "main", "flag", "NUMBER", "CommandLine", "NUMBER", "AddGoFlagSet", "goflag", "NUMBER", "CommandLine", "flag", "NUMBER", "Parse", "would", "it", "be", "possible", "to", "include", "the", "entire", "spec", "because", "this", "looks", "a", "lot", "like", "a", "bug", "in", "the", "unique", "name", "generation", "part", "Your", "url", "needs", "to", "contain", "the", "base", "path", "taking", "the", "spec", "you", "provide", "and", "generate", "a", "server", "NUMBER", "shellsession", "go", "run", "NUMBER", "cmd", "mosaics", "server", "main", "NUMBER", "go", "scheme", "http", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Serving", "mosaics", "at", "LINK", "Then", "in", "another", "terminal", "I", "did", "shellsession", "curl", "NUMBER", "NUMBER", "mosaic", "experimental", "mosaics", "code", "NUMBER", "message", "method", "GET", "be", "not", "allow", "but", "PUT", "POST", "be", "curl", "NUMBER", "NUMBER", "v", "NUMBER", "mosaic", "experimental", "mosaics", "operation", "NUMBER", "GetMosaicExperimentalMosaics", "has", "not", "yet", "be", "implement", "curl", "XPOST", "NUMBER", "NUMBER", "v", "NUMBER", "mosaic", "experimental", "mosaics", "operation", "NUMBER", "PostMosaicExperimentalMosaics", "has", "not", "yet", "be", "implement", "curl", "XPUT", "NUMBER", "NUMBER", "v", "NUMBER", "mosaic", "experimental", "mosaics", "operation", "NUMBER", "PutMosaicExperimentalMosaics", "has", "not", "yet", "be", "implement", "Also", "the", "discriminator", "value", "in", "MosaicSeriesFilter", "should", "be", "filterType", "I", "think", "because", "I", "don", "t", "see", "a", "type", "field", "NUMBER", "That", "be", "correct", "NUMBER", "be", "the", "wrong", "error", "and", "be", "confusing", "this", "should", "be", "fix", "in", "the", "latest", "runtime", "by", "go", "openapi", "runtime", "NUMBER", "It", "depends", "on", "which", "go", "version", "you", "be", "use", "you", "may", "have", "to", "set", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "if", "the", "go", "version", "you", "re", "use", "isn", "t", "NUMBER", "Personally", "I", "use", "the", "gvt", "LINK", "tool", "for", "vendoring", "and", "it", "pick", "all", "the", "package", "up", "you", "listed", "as", "actual", "list", "when", "you", "vendor", "the", "package", "that", "be", "listed", "at", "the", "end", "of", "the", "command", "NUMBER", "It", "recursively", "fetches", "all", "the", "package", "properly", "NUMBER", "The", "error", "in", "your", "stacktrace", "suggests", "to", "me", "that", "the", "import", "paths", "be", "a", "bit", "off", "NUMBER", "How", "do", "your", "import", "paths", "look", "in", "your", "file", "I", "can", "reproduce", "your", "problem", "NUMBER", "shellsession", "ivan", "avalon", "go", "src", "swagger", "test", "tree", "NUMBER", "swagger", "NUMBER", "yml", "ivan", "avalon", "go", "src", "swagger", "test", "govendor", "init", "ivan", "avalon", "go", "src", "swagger", "test", "tree", "L", "NUMBER", "vendor", "vendor", "vendor", "NUMBER", "json", "NUMBER", "directories", "NUMBER", "file", "ivan", "avalon", "go", "src", "swagger", "test", "govendor", "fetch", "v", "github", "NUMBER", "com", "go", "openapi", "runtime", "Get", "latest", "revision", "github", "NUMBER", "com", "go", "openapi", "runtime", "Get", "latest", "revision", "golang", "NUMBER", "org", "x", "net", "context", "Get", "latest", "revision", "github", "NUMBER", "com", "go", "openapi", "swag", "Get", "latest", "revision", "github", "NUMBER", "com", "go", "openapi", "strfmt", "Get", "latest", "revision", "github", "NUMBER", "com", "go", "openapi", "error", "Get", "latest", "revision", "github", "NUMBER", "com", "mailru", "easyjson", "jlexer", "Get", "latest", "revision", "github", "NUMBER", "com", "mailru", "easyjson", "jwriter", "Get", "latest", "revision", "github", "NUMBER", "com", "asaskevich", "govalidator", "Get", "latest", "revision", "github", "NUMBER", "com", "mitchellh", "mapstructure", "Get", "latest", "revision", "github", "NUMBER", "com", "mailru", "easyjson", "buffer", "ivan", "avalon", "go", "src", "swagger", "test", "govendor", "fetch", "v", "github", "NUMBER", "com", "tylerb", "graceful", "Get", "latest", "revision", "github", "NUMBER", "com", "tylerb", "graceful", "ivan", "avalon", "go", "src", "swagger", "test", "govendor", "fetch", "v", "github", "NUMBER", "com", "jessevdk", "go", "flags", "Get", "latest", "revision", "github", "NUMBER", "com", "jessevdk", "go", "flags", "ivan", "avalon", "go", "src", "swagger", "test", "govendor", "fetch", "v", "golang", "NUMBER", "org", "x", "net", "context", "Get", "latest", "revision", "golang", "NUMBER", "org", "x", "net", "context", "ivan", "avalon", "go", "src", "swagger", "test", "tree", "L", "NUMBER", "vendor", "vendor", "github", "NUMBER", "com", "asaskevich", "govalidator", "go", "openapi", "error", "runtime", "strfmt", "swag", "jessevdk", "go", "flags", "mailru", "easyjson", "mitchellh", "mapstructure", "tylerb", "graceful", "golang", "NUMBER", "org", "x", "net", "vendor", "NUMBER", "json", "NUMBER", "directories", "NUMBER", "file", "It", "seems", "govendor", "doesn", "t", "pick", "up", "the", "validate", "package", "so", "I", "add", "that", "shellsession", "ivan", "avalon", "go", "src", "swagger", "test", "govendor", "fetch", "v", "github", "NUMBER", "com", "go", "openapi", "validate", "Get", "latest", "revision", "github", "NUMBER", "com", "go", "openapi", "validate", "Get", "latest", "revision", "github", "NUMBER", "com", "go", "openapi", "analysis", "Get", "latest", "revision", "github", "NUMBER", "com", "go", "openapi", "jsonpointer", "Get", "latest", "revision", "github", "NUMBER", "com", "go", "openapi", "spec", "Get", "latest", "revision", "github", "NUMBER", "com", "go", "openapi", "loads", "Get", "latest", "revision", "github", "NUMBER", "com", "go", "openapi", "jsonreference", "Get", "latest", "revision", "github", "NUMBER", "com", "PuerkitoBio", "purell", "Get", "latest", "revision", "golang", "NUMBER", "org", "x", "net", "idna", "Get", "latest", "revision", "golang", "NUMBER", "org", "x", "text", "width", "Get", "latest", "revision", "github", "NUMBER", "com", "PuerkitoBio", "urlesc", "Get", "latest", "revision", "golang", "NUMBER", "org", "x", "text", "unicode", "norm", "Get", "latest", "revision", "golang", "NUMBER", "org", "x", "text", "internal", "gen", "Get", "latest", "revision", "golang", "NUMBER", "org", "x", "text", "internal", "triegen", "Get", "latest", "revision", "golang", "NUMBER", "org", "x", "text", "internal", "ucd", "Get", "latest", "revision", "golang", "NUMBER", "org", "x", "text", "transform", "Get", "latest", "revision", "golang", "NUMBER", "org", "x", "text", "unicode", "cldr", "ivan", "avalon", "go", "src", "swagger", "test", "ivan", "avalon", "go", "src", "swagger", "test", "tree", "L", "NUMBER", "vendor", "vendor", "github", "NUMBER", "com", "asaskevich", "govalidator", "go", "openapi", "analysis", "error", "jsonpointer", "jsonreference", "loads", "runtime", "spec", "strfmt", "swag", "validate", "jessevdk", "go", "flags", "mailru", "easyjson", "mitchellh", "mapstructure", "PuerkitoBio", "purell", "urlesc", "tylerb", "graceful", "golang", "NUMBER", "org", "x", "net", "text", "vendor", "NUMBER", "json", "NUMBER", "directories", "NUMBER", "file", "ivan", "avalon", "go", "src", "swagger", "test", "alias", "swagger", "docker", "run", "rm", "it", "v", "home", "ivan", "go", "src", "swagger", "test", "go", "src", "swagger", "test", "w", "go", "src", "swagger", "test", "quay", "NUMBER", "io", "goswagger", "swagger", "ivan", "avalon", "go", "src", "swagger", "test", "which", "swagger", "swagger", "aliased", "to", "docker", "run", "rm", "it", "v", "home", "ivan", "go", "src", "swagger", "test", "go", "src", "swagger", "test", "w", "go", "src", "swagger", "test", "quay", "NUMBER", "io", "goswagger", "swagger", "ivan", "avalon", "go", "src", "swagger", "test", "swagger", "generate", "server", "A", "TodoList", "f", "swagger", "NUMBER", "yml", "Unable", "to", "find", "image", "quay", "NUMBER", "io", "goswagger", "swagger", "latest", "locally", "latest", "Pulling", "from", "goswagger", "swagger", "NUMBER", "c", "NUMBER", "e", "NUMBER", "d", "NUMBER", "Pull", "complete", "NUMBER", "abaad", "NUMBER", "b", "Pull", "complete", "c", "NUMBER", "d", "NUMBER", "fbe", "NUMBER", "c", "NUMBER", "e", "NUMBER", "Pull", "complete", "baa", "NUMBER", "d", "NUMBER", "a", "Pull", "complete", "NUMBER", "ceb", "NUMBER", "ac", "NUMBER", "Pull", "complete", "NUMBER", "d", "NUMBER", "a", "NUMBER", "Pull", "complete", "NUMBER", "dfa", "NUMBER", "f", "NUMBER", "Pull", "complete", "NUMBER", "dcaa", "NUMBER", "Pull", "complete", "Digest", "sha", "NUMBER", "NUMBER", "cf", "NUMBER", "d", "NUMBER", "a", "NUMBER", "a", "NUMBER", "f", "NUMBER", "d", "NUMBER", "e", "NUMBER", "fcbe", "NUMBER", "cecf", "NUMBER", "dd", "NUMBER", "fed", "NUMBER", "b", "NUMBER", "dd", "NUMBER", "Status", "Downloaded", "newer", "image", "for", "quay", "NUMBER", "io", "goswagger", "swagger", "latest", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "grouping", "operations", "into", "package", "NUMBER", "ivan", "avalon", "go", "src", "swagger", "test", "sudo", "chown", "R", "ivan", "ivan", "NUMBER", "ivan", "avalon", "go", "src", "swagger", "test", "go", "run", "NUMBER", "cmd", "todo", "list", "server", "main", "NUMBER", "go", "swagger", "test", "restapi", "operations", "todos", "restapi", "operations", "todos", "add_one_parameters", "NUMBER", "go", "NUMBER", "cannot", "use", "route", "NUMBER", "routeEntry", "NUMBER", "Formats", "type", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "Registry", "as", "type", "swagger", "test", "vendor", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "Registry", "in", "argument", "to", "body", "NUMBER", "Validate", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "Registry", "do", "not", "implement", "swagger", "test", "vendor", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "Registry", "wrong", "type", "for", "Add", "method", "have", "Add", "string", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "Format", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "Validator", "bool", "want", "Add", "string", "swagger", "test", "vendor", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "Format", "swagger", "test", "vendor", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "Validator", "bool", "NUMBER", "I", "want", "to", "contrast", "this", "with", "the", "result", "I", "get", "when", "I", "use", "gvt", "as", "vendoring", "tool", "shellsession", "ivan", "avalon", "go", "src", "swagger", "test", "rm", "rf", "vendor", "ivan", "avalon", "go", "src", "swagger", "test", "gvt", "fetch", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "docker", "go", "units", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "mitchellh", "mapstructure", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "mailru", "easyjson", "jlexer", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "go", "openapi", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "mailru", "easyjson", "jwriter", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "mailru", "easyjson", "buffer", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "asaskevich", "govalidator", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "stretchr", "testify", "assert", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "stretchr", "testify", "vendor", "github", "NUMBER", "com", "pmezard", "go", "difflib", "difflib", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "stretchr", "testify", "vendor", "github", "NUMBER", "com", "davecgh", "go", "spew", "spew", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "gorilla", "context", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "golang", "NUMBER", "org", "x", "net", "context", "ctxhttp", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "golang", "NUMBER", "org", "x", "net", "context", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "go", "openapi", "loads", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "go", "openapi", "analysis", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "go", "openapi", "swag", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "go", "openapi", "jsonpointer", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "go", "openapi", "spec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "go", "openapi", "jsonreference", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "PuerkitoBio", "purell", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "PuerkitoBio", "urlesc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "golang", "NUMBER", "org", "x", "text", "unicode", "norm", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "golang", "NUMBER", "org", "x", "text", "internal", "gen", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "golang", "NUMBER", "org", "x", "text", "unicode", "cldr", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "golang", "NUMBER", "org", "x", "text", "internal", "ucd", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "golang", "NUMBER", "org", "x", "text", "transform", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "golang", "NUMBER", "org", "x", "text", "internal", "triegen", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "golang", "NUMBER", "org", "x", "net", "idna", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "golang", "NUMBER", "org", "x", "text", "width", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "gopkg", "NUMBER", "in", "yaml", "NUMBER", "v", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "go", "openapi", "validate", "ivan", "avalon", "go", "src", "swagger", "test", "gvt", "fetch", "github", "NUMBER", "com", "tylerb", "graceful", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "github", "NUMBER", "com", "tylerb", "graceful", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "github", "NUMBER", "com", "urfave", "negroni", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "recursive", "dependency", "gopkg", "NUMBER", "in", "tylerb", "graceful", "NUMBER", "v", "NUMBER", "ivan", "avalon", "go", "src", "swagger", "test", "gvt", "fetch", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Fetching", "github", "NUMBER", "com", "jessevdk", "go", "flags", "ivan", "avalon", "go", "src", "swagger", "test", "gvt", "fetch", "golang", "NUMBER", "org", "x", "net", "context", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "command", "fetch", "fail", "golang", "NUMBER", "org", "x", "net", "context", "or", "a", "parent", "of", "it", "be", "already", "vendored", "ivan", "avalon", "go", "src", "swagger", "test", "tree", "L", "NUMBER", "vendor", "vendor", "github", "NUMBER", "com", "asaskevich", "govalidator", "docker", "go", "units", "go", "openapi", "analysis", "error", "jsonpointer", "jsonreference", "loads", "runtime", "spec", "strfmt", "swag", "validate", "gorilla", "context", "jessevdk", "go", "flags", "mailru", "easyjson", "mitchellh", "mapstructure", "PuerkitoBio", "purell", "urlesc", "stretchr", "testify", "tylerb", "graceful", "urfave", "negroni", "golang", "NUMBER", "org", "x", "net", "text", "gopkg", "NUMBER", "in", "tylerb", "graceful", "NUMBER", "v", "NUMBER", "yaml", "NUMBER", "v", "NUMBER", "apic", "NUMBER", "go", "decode", "NUMBER", "go", "emitterc", "NUMBER", "go", "encode", "NUMBER", "go", "LICENSE", "parserc", "NUMBER", "go", "readerc", "NUMBER", "go", "resolve", "NUMBER", "go", "scannerc", "NUMBER", "go", "sorter", "NUMBER", "go", "writerc", "NUMBER", "go", "yaml", "NUMBER", "go", "yamlh", "NUMBER", "go", "yamlprivateh", "NUMBER", "go", "manifest", "NUMBER", "directories", "NUMBER", "file", "ivan", "avalon", "go", "src", "swagger", "test", "which", "swagger", "swagger", "aliased", "to", "docker", "run", "rm", "it", "v", "home", "ivan", "go", "src", "swagger", "test", "go", "src", "swagger", "test", "w", "go", "src", "swagger", "test", "quay", "NUMBER", "io", "goswagger", "swagger", "ivan", "avalon", "go", "src", "swagger", "test", "ls", "cmd", "models", "restapi", "swagger", "NUMBER", "yml", "vendor", "ivan", "avalon", "go", "src", "swagger", "test", "rm", "rf", "cmd", "models", "restapi", "ivan", "avalon", "go", "src", "swagger", "test", "swagger", "generate", "server", "A", "TodoList", "f", "swagger", "NUMBER", "yml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "grouping", "operations", "into", "package", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "meta", "data", "and", "facades", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "models", "NUMBER", "Generation", "completed", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "github", "NUMBER", "com", "go", "openapi", "runtime", "github", "NUMBER", "com", "tylerb", "graceful", "github", "NUMBER", "com", "jessevdk", "go", "flags", "golang", "NUMBER", "org", "x", "net", "context", "You", "can", "get", "these", "now", "with", "go", "get", "u", "f", "NUMBER", "NUMBER", "ivan", "avalon", "go", "src", "swagger", "test", "sudo", "chown", "R", "ivan", "ivan", "NUMBER", "ivan", "avalon", "go", "src", "swagger", "test", "go", "run", "NUMBER", "cmd", "todo", "list", "server", "main", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "the", "required", "flags", "tls", "certificate", "and", "tls", "key", "were", "not", "specified", "exit", "status", "NUMBER", "Can", "you", "change", "your", "alias", "a", "little", "I", "think", "either", "of", "these", "should", "work", "alias", "swagger", "docker", "run", "rm", "it", "v", "home", "sandy", "root", "v", "home", "sandy", "go", "src", "my_org", "go", "src", "my_org", "w", "go", "src", "my_org", "my_project", "quay", "NUMBER", "io", "goswagger", "swagger", "or", "alias", "swagger", "docker", "run", "rm", "it", "e", "GOPATH", "home", "sandy", "go", "go", "v", "home", "sandy", "home", "sandy", "w", "home", "sandy", "go", "src", "my_org", "my_project", "quay", "NUMBER", "io", "goswagger", "swagger", "The", "explanation", "be", "that", "on", "your", "local", "machine", "the", "project", "definitely", "resides", "in", "the", "go", "path", "but", "the", "go", "path", "in", "the", "docker", "container", "be", "at", "go", "not", "at", "your", "home", "directory", "NUMBER", "There", "be", "also", "a", "few", "items", "pre", "install", "in", "the", "gopath", "of", "the", "container", "you", "re", "use", "so", "that", "also", "makes", "it", "so", "you", "can", "t", "fully", "overwrite", "the", "go", "path", "with", "yours", "NUMBER", "It", "be", "possible", "though", "but", "then", "you", "have", "to", "make", "sure", "you", "have", "these", "package", "in", "your", "local", "go", "path", "and", "compiled", "for", "linux", "not", "another", "OS", "LINK", "swagger", "go", "swagger", "blob", "master", "Dockerfile", "L", "NUMBER", "L", "NUMBER", "Thanks", "for", "your", "feedback", "NUMBER", "I", "m", "sorry", "you", "have", "a", "tough", "time", "but", "this", "project", "be", "very", "much", "a", "project", "of", "volunteers", "NUMBER", "A", "number", "of", "people", "have", "fix", "issue", "that", "they", "run", "into", "NUMBER", "Similarly", "I", "use", "this", "project", "for", "work", "so", "the", "little", "free", "time", "I", "have", "I", "spend", "on", "the", "issue", "that", "affect", "the", "teams", "I", "work", "with", "directly", "NUMBER", "Are", "you", "sure", "you", "re", "use", "this", "in", "a", "gopath", "And", "be", "your", "imports", "fully", "qualified", "imports", "As", "far", "as", "I", "know", "the", "examples", "in", "the", "examples", "LINK", "swagger", "go", "swagger", "tree", "master", "examples", "folder", "all", "work", "correctly", "NUMBER", "There", "be", "also", "the", "project", "I", "use", "for", "the", "test", "of", "the", "scanner", "LINK", "swagger", "go", "swagger", "tree", "master", "fixture", "goparsing", "classification", "At", "a", "very", "minimum", "could", "you", "provide", "a", "small", "repro", "case", "can", "you", "try", "this", "mkdir", "p", "tmp", "go", "src", "foo", "cat", "tmp", "go", "src", "foo", "main", "NUMBER", "go", "TAG", "Adds", "support", "for", "polymorphism", "NUMBER", "The", "discriminator", "be", "the", "schema", "property", "name", "that", "be", "use", "to", "differentiate", "between", "other", "schema", "that", "inherit", "this", "schema", "NUMBER", "The", "property", "name", "use", "MUST", "be", "defined", "at", "this", "schema", "and", "it", "MUST", "be", "in", "the", "required", "property", "list", "NUMBER", "When", "use", "the", "value", "MUST", "be", "the", "name", "of", "this", "schema", "or", "any", "schema", "that", "inherits", "it", "NUMBER", "Is", "there", "any", "chance", "you", "can", "actually", "submit", "swagger", "specifications", "to", "reproduce", "your", "issue", "Try", "this", "Dockerfile", "FROM", "golang", "MAINTAINER", "E", "NUMBER", "Theodore", "L", "NUMBER", "Omtzigt", "ENV", "GOBIN", "GOPATH", "bin", "ADD", "NUMBER", "go", "src", "github", "NUMBER", "com", "Ravenwater", "server", "complete", "RUN", "go", "install", "go", "src", "github", "NUMBER", "com", "Ravenwater", "server", "complete", "cmd", "todo", "list", "server", "WORKDIR", "go", "src", "github", "NUMBER", "com", "Ravenwater", "server", "complete", "ENTRYPOINT", "go", "bin", "todo", "list", "server", "port", "NUMBER", "host", "NUMBER", "serving", "HTTP", "of", "NUMBER", "EXPOSE", "NUMBER", "by", "default", "goswagger", "servers", "default", "to", "localhost", "this", "be", "do", "so", "that", "on", "osx", "it", "doesn", "t", "trigger", "the", "firewall", "popup", "when", "you", "test", "NUMBER", "Also", "it", "s", "safer", "to", "not", "listen", "on", "all", "interfaces", "by", "default", "NUMBER", "Inside", "a", "docker", "container", "we", "do", "want", "to", "listen", "on", "all", "interfaces", "because", "localhost", "there", "refers", "to", "the", "docker", "container", "itself", "NUMBER", "then", "the", "other", "edit", "be", "the", "go", "install", "without", "the", "main", "NUMBER", "go", "NUMBER", "The", "only", "time", "you", "need", "to", "refer", "to", "file", "directly", "be", "when", "you", "use", "go", "run", "for", "go", "install", "you", "can", "refer", "to", "the", "package", "that", "contains", "the", "main", "and", "then", "the", "binary", "will", "be", "named", "the", "same", "as", "the", "folder", "package", "NUMBER", "For", "a", "slightly", "more", "advance", "and", "a", "lot", "smaller", "container", "you", "can", "also", "use", "a", "NUMBER", "stage", "compilation", "process", "You", "use", "NUMBER", "container", "to", "build", "the", "binary", "and", "and", "another", "container", "to", "run", "the", "binary", "NUMBER", "You", "can", "run", "the", "build", "NUMBER", "sh", "script", "below", "NUMBER", "Unfortunately", "I", "ve", "never", "tried", "this", "on", "windows", "though", "I", "think", "your", "best", "bet", "there", "be", "to", "use", "powershell", "NUMBER", "or", "perhaps", "try", "the", "windows", "linux", "subsystem", "NUMBER", "The", "file", "i", "include", "below", "be", "also", "available", "here", "LINK", "For", "a", "folder", "call", "testapp", "in", "the", "gopath", "with", "the", "following", "file", "in", "it", "Dockerfile", "Dockerfile", "FROM", "casualjim", "base", "latest", "MAINTAINER", "Ivan", "Porto", "Carrero", "TAG", "casualjim", "ADD", "testapp", "testapp", "EXPOSE", "NUMBER", "ENTRYPOINT", "testapp", "build", "NUMBER", "sh", "shell", "bin", "bash", "set", "e", "o", "pipefail", "version", "NUMBER", "latest", "brwhte", "tput", "setaf", "NUMBER", "bryllw", "tput", "setaf", "NUMBER", "creset", "tput", "sgr", "NUMBER", "yarrow", "bryllw", "creset", "build_binary", "set", "u", "echo", "e", "yarrow", "build", "binary", "brwhte", "testapp", "creset", "docker", "pull", "casualjim", "builder", "docker", "run", "rm", "it", "v", "pwd", "go", "src", "github", "NUMBER", "com", "casualjim", "testapp", "w", "go", "src", "github", "NUMBER", "com", "casualjim", "testapp", "casualjim", "builder", "build_container", "set", "u", "echo", "e", "yarrow", "publishing", "brwhte", "testapp", "creset", "docker", "build", "pull", "no", "cache", "q", "t", "casualjim", "testapp", "version", "NUMBER", "build_binary", "go", "get", "NUMBER", "NUMBER", "go", "build", "o", "testapp", "a", "ldflags", "w", "linkmode", "external", "extldflags", "static", "NUMBER", "build_container", "main", "NUMBER", "go", "go", "package", "main", "import", "fmt", "log", "net", "net", "http", "net", "http", "httputil", "time", "github", "NUMBER", "com", "tylerb", "graceful", "func", "main", "mux", "http", "NUMBER", "NewServeMux", "mux", "NUMBER", "HandleFunc", "func", "w", "http", "NUMBER", "ResponseWriter", "req", "http", "NUMBER", "Request", "b", "err", "httputil", "NUMBER", "DumpRequest", "req", "false", "if", "err", "nil", "log", "NUMBER", "Printf", "handle", "request", "v", "err", "log", "NUMBER", "Printf", "s", "b", "fmt", "NUMBER", "Fprintf", "w", "Welcome", "to", "the", "home", "page", "httpServer", "graceful", "NUMBER", "Server", "Server", "new", "http", "NUMBER", "Server", "httpServer", "NUMBER", "SetKeepAlivesEnabled", "true", "httpServer", "NUMBER", "TCPKeepAlive", "NUMBER", "time", "NUMBER", "Minute", "httpServer", "NUMBER", "ListenLimit", "NUMBER", "httpServer", "NUMBER", "Timeout", "NUMBER", "time", "NUMBER", "Second", "httpServer", "NUMBER", "Handler", "mux", "httpServer", "NUMBER", "Logger", "graceful", "NUMBER", "DefaultLogger", "tcpv", "NUMBER", "Listener", "err", "net", "NUMBER", "Listen", "tcp", "NUMBER", "NUMBER", "if", "err", "nil", "log", "NUMBER", "Fatalln", "err", "log", "NUMBER", "Println", "serving", "on", "tcpv", "NUMBER", "Listener", "NUMBER", "Addr", "NUMBER", "String", "if", "err", "httpServer", "NUMBER", "Serve", "tcpv", "NUMBER", "Listener", "err", "nil", "log", "NUMBER", "Fatalln", "err", "people", "typically", "return", "a", "NUMBER", "for", "success", "responses", "that", "don", "t", "have", "content", "NUMBER", "you", "may", "want", "to", "make", "your", "own", "responder", "then", "you", "have", "access", "to", "the", "response", "writer", "and", "you", "can", "set", "your", "cookie", "would", "it", "be", "possible", "to", "add", "a", "spec", "to", "this", "issue", "The", "default", "configuration", "uses", "the", "error", "code", "as", "http", "status", "code", "NUMBER", "So", "when", "you", "return", "error", "NUMBER", "New", "NUMBER", "incorrect", "api", "key", "auth", "the", "server", "will", "respond", "with", "NUMBER", "Expect", "Continue", "shellsession", "ivan", "avalon", "curl", "i", "H", "Content", "Type", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "H", "X", "Token", "abcdefu", "LINK", "http", "HTTP", "NUMBER", "NUMBER", "Continue", "Content", "Type", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "Date", "Fri", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "C", "Changing", "the", "error", "code", "to", "NUMBER", "fix", "the", "issue", "for", "me", "NUMBER", "ivan", "avalon", "curl", "i", "H", "Content", "Type", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "H", "X", "Token", "abcdefuvwxyz", "LINK", "http", "HTTP", "NUMBER", "NUMBER", "Not", "Implemented", "Content", "Type", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "Date", "Fri", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Content", "Length", "NUMBER", "operation", "customers", "NUMBER", "GetID", "has", "not", "yet", "be", "implement", "shellsession", "ivan", "avalon", "curl", "i", "H", "Content", "Type", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "H", "X", "Token", "abcdefu", "LINK", "http", "HTTP", "NUMBER", "NUMBER", "Unauthorized", "Content", "Type", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "Date", "Fri", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Content", "Length", "NUMBER", "code", "NUMBER", "message", "incorrect", "api", "key", "auth", "add", "x", "nullable", "true", "content", "negotiation", "based", "on", "Accept", "header", "and", "content", "type", "be", "do", "through", "the", "consumes", "produces", "bits", "in", "a", "swagger", "spec", "NUMBER", "In", "go", "swagger", "you", "have", "to", "hook", "up", "the", "consumers", "and", "producers", "NUMBER", "I", "ve", "add", "your", "spec", "from", "NUMBER", "as", "example", "LINK", "swagger", "go", "swagger", "tree", "master", "examples", "authentication", "Thanks", "for", "this", "many", "people", "will", "be", "thankful", "for", "this", "hi", "would", "it", "be", "possible", "to", "join", "the", "slack", "channel", "LINK", "I", "have", "another", "person", "in", "there", "who", "wants", "to", "work", "on", "enums", "so", "it", "d", "be", "good", "to", "coordinate", "efforts", "a", "little", "could", "you", "rebase", "this", "on", "master", "duplicate", "of", "NUMBER", "closing", "this", "one", "NUMBER", "I", "think", "this", "be", "fix", "on", "master", "now", "please", "close", "when", "confirmed", "in", "your", "operation", "responses", "NUMBER", "body", "someModel", "and", "the", "rest", "be", "description", "make", "it", "a", "pointer", "by", "add", "x", "nullable", "true", "I", "can", "reproduce", "the", "error", "you", "see", "in", "your", "spec", "just", "haven", "t", "find", "the", "cause", "for", "it", "yet", "NUMBER", "Golang", "never", "orders", "map", "keys", "the", "same", "way", "twice", "so", "that", "makes", "it", "so", "that", "that", "very", "sometimes", "it", "succeeds", "but", "more", "often", "than", "that", "it", "fail", "NUMBER", "I", "d", "certainly", "accept", "a", "PR", "NUMBER", "You", "can", "perhaps", "build", "on", "the", "config", "file", "that", "was", "introduce", "for", "defining", "language", "support", "NUMBER", "I", "think", "you", "d", "have", "to", "define", "a", "map", "entry", "for", "the", "formats", "and", "a", "snippet", "for", "registering", "that", "format", "in", "strfmts", "NUMBER", "So", "all", "in", "all", "shouldn", "t", "be", "too", "difficult", "to", "make", "work", "NUMBER", "The", "int", "NUMBER", "there", "be", "a", "reason", "for", "that", "because", "int", "be", "platform", "dependent", "NUMBER", "And", "some", "languages", "have", "a", "different", "default", "NUMBER", "So", "make", "a", "contract", "for", "your", "API", "that", "leaves", "ambiguity", "might", "not", "be", "ideal", "for", "a", "public", "API", "NUMBER", "But", "I", "do", "think", "you", "can", "use", "a", "similar", "approach", "here", "although", "a", "builtin", "like", "this", "might", "be", "harder", "to", "implement", "NUMBER", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "github", "NUMBER", "com", "go", "openapi", "runtime", "github", "NUMBER", "com", "tylerb", "graceful", "github", "NUMBER", "com", "jessevdk", "go", "flags", "golang", "NUMBER", "org", "x", "net", "context", "So", "that", "boils", "down", "to", "you", "have", "to", "vendor", "those", "package", "and", "you", "should", "be", "good", "NUMBER", "the", "go", "swagger", "repo", "contains", "all", "the", "CLI", "stuff", "for", "the", "generators", "but", "that", "s", "more", "like", "build", "tool", "not", "something", "you", "d", "depend", "on", "in", "code", "NUMBER", "I", "use", "this", "yaml", "in", "my", "projects", "for", "the", "go", "swagger", "stuff", "NUMBER", "You", "re", "not", "meant", "to", "vendor", "go", "swagger", "directly", "there", "be", "a", "much", "smaller", "runtime", "package", "NUMBER", "In", "glide", "I", "have", "to", "list", "out", "its", "dependencies", "NUMBER", "yaml", "package", "github", "NUMBER", "com", "casualjim", "private", "import", "package", "github", "NUMBER", "com", "go", "openapi", "error", "package", "github", "NUMBER", "com", "go", "openapi", "loads", "package", "github", "NUMBER", "com", "go", "openapi", "runtime", "subpackages", "client", "flagext", "middleware", "package", "github", "NUMBER", "com", "go", "openapi", "spec", "package", "github", "NUMBER", "com", "go", "openapi", "strfmt", "package", "github", "NUMBER", "com", "go", "openapi", "swag", "package", "github", "NUMBER", "com", "go", "openapi", "validate", "package", "github", "NUMBER", "com", "tylerb", "graceful", "version", "NUMBER", "package", "golang", "NUMBER", "org", "x", "net", "subpackages", "context", "package", "github", "NUMBER", "com", "mailru", "easyjson", "version", "master", "subpackages", "buffer", "jlexer", "jwriter", "Your", "comments", "make", "me", "think", "you", "re", "starting", "out", "in", "golang", "if", "that", "s", "not", "the", "case", "and", "you", "be", "fully", "aware", "of", "the", "path", "you", "re", "walking", "down", "I", "apologize", "NUMBER", "The", "best", "piece", "of", "advice", "I", "can", "give", "you", "to", "get", "going", "with", "go", "be", "Do", "not", "fight", "the", "gopath", "only", "misery", "lies", "there", "should", "you", "still", "want", "to", "do", "the", "project", "thing", "then", "look", "at", "the", "gb", "tool", "By", "not", "playing", "along", "with", "the", "gopath", "you", "will", "lose", "the", "ability", "have", "to", "solve", "how", "to", "publish", "libraries", "that", "can", "be", "fetched", "with", "go", "get", "Second", "piece", "of", "advice", "Do", "not", "fight", "gofmt", "we", "all", "use", "it", "nobody", "likes", "tabs", "but", "it", "s", "consistent", "for", "everybody", "that", "way", "at", "this", "moment", "it", "s", "just", "broken", "NUMBER", "Personally", "I", "m", "strapped", "for", "time", "to", "make", "this", "work", "at", "this", "very", "moment", "I", "m", "hoping", "to", "spend", "some", "time", "on", "this", "during", "the", "week", "of", "christmas", "to", "fix", "it", "NUMBER", "But", "if", "somebody", "wants", "to", "fix", "this", "sooner", "then", "I", "d", "gladly", "merge", "That", "be", "indeed", "the", "default", "behavior", "but", "you", "can", "replace", "the", "loader", "function", "in", "your", "own", "program", "NUMBER", "LINK", "openapi", "spec", "blob", "master", "expander", "NUMBER", "go", "L", "NUMBER", "If", "you", "load", "your", "spec", "with", "the", "loads", "package", "this", "should", "be", "do", "for", "you", "LINK", "openapi", "loads", "blob", "master", "spec", "NUMBER", "go", "L", "NUMBER", "if", "that", "isn", "t", "the", "case", "then", "you", "may", "need", "to", "enlist", "yaml", "as", "a", "recognized", "format", "LINK", "swagger", "go", "swagger", "blob", "master", "cmd", "swagger", "swagger", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "can", "you", "try", "to", "build", "from", "master", "and", "see", "if", "that", "fix", "your", "issue", "on", "master", "there", "be", "also", "a", "new", "command", "call", "flatten", "do", "it", "still", "occur", "after", "flattening", "the", "spec", "I", "really", "want", "to", "see", "your", "entire", "spec", "or", "equivalent", "repro", "NUMBER", "I", "suspect", "there", "might", "still", "be", "an", "issue", "in", "the", "spec", "somewhere", "and", "if", "not", "it", "s", "something", "that", "needs", "to", "be", "add", "to", "the", "test", "so", "that", "it", "can", "remain", "solve", "NUMBER", "You", "re", "be", "hit", "by", "NUMBER", "different", "bug", "NUMBER", "when", "you", "don", "t", "flatten", "the", "generator", "seems", "to", "not", "resolve", "the", "external", "file", "in", "generation", "NUMBER", "when", "you", "flatten", "then", "the", "properties", "get", "a", "new", "casing", "for", "some", "reason", "make", "the", "ref", "indeed", "invalid", "because", "it", "points", "to", "definitions", "LatLng", "instead", "of", "definitions", "latLng", "I", "think", "the", "second", "bug", "be", "easier", "to", "solve", "than", "the", "first", "one", "I", "think", "this", "might", "work", "NUMBER", "I", "think", "only", "x", "go", "name", "was", "implement", "in", "the", "bug", "you", "mention", "NUMBER", "yaml", "swagger", "NUMBER", "info", "title", "Test", "version", "NUMBER", "host", "test", "NUMBER", "com", "basePath", "produces", "application", "json", "schemes", "http", "paths", "a", "b", "get", "operationId", "get_ab", "parameters", "name", "pilot_area_only", "in", "query", "type", "boolean", "default", "false", "responses", "NUMBER", "description", "Test", "headers", "Access", "Control", "Allow", "Origin", "type", "string", "default", "schema", "type", "object", "properties", "results", "ref", "definitions", "LocalDefs", "default", "description", "Unexpected", "error", "schema", "ref", "definitions", "Error", "definitions", "LatLng", "type", "object", "x", "go", "type", "import", "package", "github", "NUMBER", "com", "user", "package", "alias", "base", "type", "LatLng", "LatLngLine", "type", "object", "x", "go", "type", "import", "package", "github", "NUMBER", "com", "user", "package", "alias", "base", "type", "LatLngLine", "LocalDef", "type", "object", "properties", "position", "ref", "NUMBER", "base", "NUMBER", "yaml", "definitions", "LatLng", "extent", "ref", "NUMBER", "base", "NUMBER", "yaml", "definitions", "LatLngLine", "LocalDefs", "type", "array", "items", "ref", "definitions", "LocalDef", "Error", "type", "object", "properties", "code", "type", "integer", "format", "int", "NUMBER", "message", "type", "string", "duplicate", "of", "NUMBER", "Problem", "statement", "Sometimes", "it", "s", "useful", "to", "have", "more", "context", "than", "just", "the", "header", "value", "or", "query", "param", "value", "in", "an", "authenticator", "NUMBER", "They", "could", "take", "an", "extra", "context", "parameter", "NUMBER", "scopes", "be", "support", "through", "bearer", "auth", "This", "was", "fix", "in", "d", "NUMBER", "fb", "NUMBER", "b", "NUMBER", "f", "NUMBER", "dec", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "d", "NUMBER", "a", "NUMBER", "You", "don", "t", "actually", "need", "httptest", "to", "test", "the", "handlers", "NUMBER", "A", "handler", "be", "essentially", "a", "function", "of", "parameters", "to", "result", "NUMBER", "The", "result", "knows", "how", "to", "write", "itself", "to", "a", "http", "NUMBER", "ResponseWriter", "and", "you", "already", "know", "that", "that", "part", "works", "NUMBER", "So", "to", "test", "a", "handler", "what", "you", "require", "be", "to", "test", "just", "your", "code", "NUMBER", "So", "to", "test", "the", "AddOne", "operation", "from", "the", "todo", "list", "this", "there", "be", "NUMBER", "function", "involved", "in", "the", "implementation", "NUMBER", "The", "first", "function", "uses", "the", "data", "from", "the", "request", "to", "actually", "write", "the", "todo", "item", "to", "a", "store", "this", "can", "be", "test", "separately", "NUMBER", "go", "func", "addItem", "item", "models", "NUMBER", "Item", "error", "if", "item", "nil", "return", "error", "NUMBER", "New", "NUMBER", "item", "must", "be", "present", "itemsLock", "NUMBER", "Lock", "defer", "itemsLock", "NUMBER", "Unlock", "newID", "newItemID", "item", "NUMBER", "ID", "newID", "items", "newID", "item", "return", "nil", "Then", "there", "be", "the", "actual", "handler", "go", "todos", "NUMBER", "AddOneHandlerFunc", "func", "params", "todos", "NUMBER", "AddOneParams", "middleware", "NUMBER", "Responder", "if", "err", "addItem", "params", "NUMBER", "Body", "err", "nil", "return", "todos", "NUMBER", "NewAddOneDefault", "NUMBER", "NUMBER", "WithPayload", "models", "NUMBER", "Error", "Code", "NUMBER", "Message", "swag", "NUMBER", "String", "err", "NUMBER", "Error", "return", "todos", "NUMBER", "NewAddOneCreated", "NUMBER", "WithPayload", "params", "NUMBER", "Body", "To", "test", "this", "second", "function", "we", "don", "t", "need", "to", "use", "the", "httptest", "package", "you", "can", "assume", "that", "that", "part", "of", "the", "code", "works", "NUMBER", "So", "all", "you", "have", "to", "test", "be", "whether", "or", "not", "you", "get", "the", "right", "return", "types", "for", "a", "given", "set", "of", "parameters", "NUMBER", "Do", "you", "think", "this", "be", "sufficient", "this", "should", "be", "fix", "on", "master", "I", "get", "a", "PR", "this", "week", "which", "fix", "exactly", "this", "looks", "like", "you", "may", "need", "to", "re", "run", "go", "generate", "NUMBER", "generator", "LINK", "swagger", "build", "NUMBER", "gjwxobfn", "L", "NUMBER", "We", "currently", "don", "t", "have", "reverse", "routing", "I", "think", "it", "would", "be", "a", "great", "addition", "to", "the", "runtime", "package", "NUMBER", "You", "can", "define", "the", "response", "though", "yaml", "NUMBER", "description", "Created", "Pet", "Location", "description", "uri", "of", "the", "new", "pet", "type", "string", "format", "uri", "you", "re", "right", "that", "s", "the", "correct", "syntax", "NUMBER", "I", "don", "t", "know", "if", "replacing", "the", "router", "would", "give", "you", "the", "reverse", "semantics", "NUMBER", "It", "might", "be", "just", "as", "easy", "to", "teach", "our", "router", "about", "reverse", "routing", "NUMBER", "How", "do", "you", "think", "it", "would", "be", "expose", "to", "the", "end", "user", "What", "be", "the", "code", "you", "d", "like", "to", "write", "to", "get", "a", "reverse", "route", "Something", "like", "pet", "NUMBER", "PetURI", "id", "To", "implement", "a", "router", "that", "s", "usable", "for", "go", "swaggers", "runtime", "you", "d", "need", "to", "expose", "the", "following", "interface", "LINK", "openapi", "runtime", "blob", "master", "middleware", "router", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "duplicate", "of", "NUMBER", "duplicate", "of", "NUMBER", "this", "be", "on", "code", "that", "s", "not", "annotated", "right", "and", "you", "want", "an", "initial", "spec", "to", "get", "you", "going", "if", "so", "try", "swagger", "init", "help", "do", "you", "have", "a", "repo", "where", "I", "can", "reproduce", "this", "with", "I", "think", "it", "be", "because", "the", "package", "where", "you", "have", "that", "info", "be", "not", "referenced", "from", "a", "path", "use", "from", "the", "tree", "starting", "at", "main", "This", "be", "because", "a", "property", "name", "of", "n", "in", "yaml", "turns", "into", "a", "boolean", "NUMBER", "When", "I", "use", "the", "yaml", "from", "the", "issue", "I", "get", "go", "map", "interface", "interface", "definitions", "map", "interface", "interface", "key", "map", "interface", "interface", "description", "key", "content", "properties", "map", "interface", "interface", "kty", "map", "interface", "interface", "description", "type", "type", "string", "e", "map", "interface", "interface", "description", "key", "type", "string", "use", "map", "interface", "interface", "description", "sign", "type", "string", "alg", "map", "interface", "interface", "description", "algorithm", "type", "string", "false", "map", "interface", "interface", "description", "key", "type", "string", "But", "when", "I", "quote", "the", "n", "property", "like", "the", "yaml", "below", "yaml", "definitions", "key", "description", "key", "content", "properties", "kty", "description", "type", "type", "string", "e", "description", "key", "type", "string", "use", "description", "sign", "type", "string", "alg", "description", "algorithm", "type", "string", "n", "description", "key", "type", "string", "I", "get", "go", "map", "interface", "interface", "definitions", "map", "interface", "interface", "key", "map", "interface", "interface", "properties", "map", "interface", "interface", "kty", "map", "interface", "interface", "description", "type", "type", "string", "e", "map", "interface", "interface", "description", "key", "type", "string", "use", "map", "interface", "interface", "description", "sign", "type", "string", "alg", "map", "interface", "interface", "type", "string", "description", "algorithm", "n", "map", "interface", "interface", "description", "key", "type", "string", "description", "key", "content", "relate", "NUMBER", "thanks", "a", "lot", "NUMBER", "thanks", "again", "Do", "you", "know", "of", "LINK", "Thanks", "a", "lot", "NUMBER", "which", "go", "swagger", "version", "be", "you", "use", "thanks", "I", "think", "I", "ve", "update", "this", "now", "shellsesion", "docker", "run", "rm", "it", "golang", "NUMBER", "bash", "Unable", "to", "find", "image", "golang", "NUMBER", "locally", "NUMBER", "Pulling", "from", "library", "golang", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "c", "NUMBER", "Already", "exists", "NUMBER", "b", "NUMBER", "ec", "NUMBER", "de", "Already", "exists", "ff", "NUMBER", "e", "NUMBER", "c", "NUMBER", "db", "NUMBER", "Already", "exists", "NUMBER", "a", "NUMBER", "ec", "Already", "exists", "NUMBER", "f", "NUMBER", "c", "NUMBER", "c", "NUMBER", "Pull", "complete", "NUMBER", "e", "NUMBER", "be", "NUMBER", "fe", "Pull", "complete", "a", "NUMBER", "c", "NUMBER", "fcbcd", "NUMBER", "Pull", "complete", "Digest", "sha", "NUMBER", "NUMBER", "d", "NUMBER", "f", "NUMBER", "e", "NUMBER", "de", "NUMBER", "b", "NUMBER", "ba", "NUMBER", "e", "NUMBER", "c", "NUMBER", "bf", "NUMBER", "fcbcb", "NUMBER", "d", "NUMBER", "b", "NUMBER", "b", "NUMBER", "c", "Status", "Downloaded", "newer", "image", "for", "golang", "NUMBER", "root", "a", "NUMBER", "bf", "NUMBER", "go", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "root", "a", "NUMBER", "bf", "NUMBER", "go", "swagger", "version", "NUMBER", "NUMBER", "gc", "NUMBER", "c", "NUMBER", "deb", "Thanks", "for", "catching", "this", "update", "the", "master", "branch", "with", "a", "backwards", "compatible", "context", "you", "can", "use", "swagger", "generate", "model", "for", "the", "definitions", "and", "swagger", "generate", "operation", "skip", "handler", "for", "the", "other", "inlined", "schemas", "NUMBER", "Now", "you", "d", "be", "the", "first", "one", "that", "I", "know", "of", "to", "be", "use", "that", "flag", "so", "thanks", "for", "the", "validation", "We", "may", "have", "to", "make", "a", "few", "small", "change", "to", "make", "this", "work", "properly", "though", "a", "few", "more", "superficial", "if", "guards", "This", "be", "by", "design", "this", "might", "have", "be", "a", "mistake", "though", "NUMBER", "The", "mapping", "happens", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "types", "NUMBER", "go", "L", "NUMBER", "A", "good", "way", "to", "enable", "just", "int", "be", "perhaps", "through", "provide", "a", "flag", "because", "people", "get", "upset", "when", "we", "make", "breaking", "change", "like", "this", "NUMBER", "this", "be", "great", "the", "only", "reason", "I", "didn", "t", "do", "it", "before", "be", "because", "I", "wanted", "to", "remain", "compatible", "with", "the", "previous", "version", "of", "go", "as", "well", "NUMBER", "But", "now", "the", "last", "NUMBER", "version", "of", "go", "accept", "the", "format", "so", "I", "m", "all", "for", "it", "NUMBER", "However", "you", "will", "have", "to", "run", "go", "generate", "NUMBER", "generator", "for", "your", "change", "to", "make", "into", "the", "binary", "sorry", "slipped", "my", "mind", "was", "waiting", "for", "the", "build", "to", "finish", "and", "then", "get", "sidetracked", "if", "you", "add", "the", "necessary", "interface", "methods", "to", "go", "openapi", "strfmt", "they", "should", "work", "together", "we", "d", "have", "to", "add", "GetBSON", "and", "SetBSON", "interface", "methods", "the", "the", "strfmt", "package", "objects", "and", "they", "will", "all", "be", "compatible", "with", "mgo", "feel", "free", "to", "submit", "a", "PR", "to", "go", "openapi", "strfmt", "This", "be", "how", "we", "did", "it", "for", "the", "sql", "driver", "package", "too", "Feel", "free", "to", "ask", "for", "help", "with", "creating", "a", "fork", "pull", "request", "if", "you", "ve", "never", "do", "that", "NUMBER", "We", "have", "a", "slack", "team", "LINK", "where", "you", "can", "ask", "for", "help", "or", "just", "continue", "to", "comment", "here", "LINK", "openapi", "strfmt", "blob", "master", "time", "NUMBER", "go", "L", "NUMBER", "LINK", "openapi", "strfmt", "blob", "master", "time", "NUMBER", "go", "L", "NUMBER", "and", "this", "be", "a", "thing", "I", "had", "in", "an", "older", "repo", "to", "deal", "with", "mongo", "timestamps", "so", "hopefully", "you", "can", "work", "it", "out", "from", "there", "NUMBER", "go", "package", "models", "import", "encoding", "json", "fmt", "strconv", "time", "gopkg", "NUMBER", "in", "mgo", "NUMBER", "v", "NUMBER", "bson", "Timestamp", "be", "a", "time", "but", "it", "serializes", "to", "ISO", "NUMBER", "format", "with", "millis", "type", "Timestamp", "struct", "time", "NUMBER", "Time", "ISO", "NUMBER", "format", "to", "millis", "instead", "of", "to", "nanos", "const", "RFC", "NUMBER", "Millis", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "func", "t", "Timestamp", "String", "string", "return", "t", "NUMBER", "Format", "RFC", "NUMBER", "Millis", "ParseTimestamp", "parses", "a", "string", "that", "represents", "an", "ISO", "NUMBER", "time", "or", "a", "unix", "epoch", "func", "ParseTimestamp", "data", "string", "Timestamp", "error", "d", "time", "NUMBER", "Now", "NUMBER", "UTC", "if", "data", "now", "fmt", "NUMBER", "Println", "we", "should", "try", "to", "parse", "dd", "err", "time", "NUMBER", "Parse", "RFC", "NUMBER", "Millis", "data", "if", "err", "nil", "dd", "err", "time", "NUMBER", "Parse", "time", "NUMBER", "RFC", "NUMBER", "data", "if", "err", "nil", "dd", "err", "time", "NUMBER", "Parse", "time", "NUMBER", "RFC", "NUMBER", "Nano", "data", "if", "err", "nil", "if", "data", "data", "NUMBER", "t", "err", "strconv", "NUMBER", "ParseInt", "data", "NUMBER", "NUMBER", "if", "err", "nil", "return", "Timestamp", "err", "dd", "time", "NUMBER", "Unix", "NUMBER", "t", "int", "NUMBER", "time", "NUMBER", "Millisecond", "d", "dd", "return", "Timestamp", "Time", "d", "NUMBER", "UTC", "nil", "GetBSON", "customizes", "the", "bson", "serialization", "for", "this", "type", "func", "t", "Timestamp", "GetBSON", "interface", "error", "return", "t", "NUMBER", "Time", "nil", "SetBSON", "customizes", "the", "bson", "serialization", "for", "this", "type", "func", "t", "Timestamp", "SetBSON", "raw", "bson", "NUMBER", "Raw", "error", "var", "ts", "interface", "if", "err", "raw", "NUMBER", "Unmarshal", "ts", "err", "nil", "return", "err", "switch", "ts", "NUMBER", "type", "case", "time", "NUMBER", "Time", "t", "Timestamp", "Time", "ts", "NUMBER", "time", "NUMBER", "Time", "NUMBER", "UTC", "return", "nil", "case", "string", "tss", "ts", "NUMBER", "string", "tt", "err", "ParseTimestamp", "tss", "if", "err", "nil", "return", "err", "t", "tt", "return", "nil", "case", "int", "NUMBER", "t", "Timestamp", "time", "NUMBER", "Unix", "NUMBER", "ts", "NUMBER", "int", "NUMBER", "int", "NUMBER", "time", "NUMBER", "Millisecond", "NUMBER", "UTC", "return", "nil", "case", "float", "NUMBER", "t", "Timestamp", "time", "NUMBER", "Unix", "NUMBER", "int", "NUMBER", "ts", "NUMBER", "float", "NUMBER", "int", "NUMBER", "time", "NUMBER", "Millisecond", "NUMBER", "UTC", "return", "nil", "return", "fmt", "NUMBER", "Errorf", "couldn", "t", "convert", "bson", "data", "T", "s", "to", "a", "Timestamp", "ts", "ts", "MarshalText", "implement", "the", "text", "marshaller", "interface", "func", "t", "Timestamp", "MarshalText", "byte", "error", "return", "byte", "t", "NUMBER", "String", "nil", "UnmarshalText", "reads", "this", "timestamp", "from", "a", "string", "value", "func", "t", "Timestamp", "UnmarshalText", "data", "byte", "error", "var", "value", "interface", "json", "NUMBER", "Unmarshal", "data", "value", "switch", "value", "NUMBER", "type", "case", "string", "v", "value", "NUMBER", "string", "if", "v", "return", "nil", "d", "err", "ParseTimestamp", "v", "if", "err", "nil", "return", "err", "t", "d", "case", "float", "NUMBER", "t", "Timestamp", "time", "NUMBER", "Unix", "NUMBER", "int", "NUMBER", "value", "NUMBER", "float", "NUMBER", "int", "NUMBER", "time", "NUMBER", "Millisecond", "NUMBER", "UTC", "default", "return", "fmt", "NUMBER", "Errorf", "couldn", "t", "convert", "json", "from", "T", "s", "to", "a", "time", "NUMBER", "Time", "value", "data", "return", "nil", "UnmarshalJSON", "implement", "the", "json", "unmarshaller", "interface", "func", "t", "Timestamp", "UnmarshalJSON", "data", "byte", "error", "var", "value", "interface", "json", "NUMBER", "Unmarshal", "data", "value", "switch", "value", "NUMBER", "type", "case", "string", "v", "value", "NUMBER", "string", "if", "v", "return", "nil", "d", "err", "ParseTimestamp", "v", "if", "err", "nil", "return", "err", "t", "d", "case", "float", "NUMBER", "t", "Timestamp", "time", "NUMBER", "Unix", "NUMBER", "int", "NUMBER", "value", "NUMBER", "float", "NUMBER", "int", "NUMBER", "time", "NUMBER", "Millisecond", "NUMBER", "UTC", "default", "return", "fmt", "NUMBER", "Errorf", "Couldn", "t", "convert", "json", "from", "T", "s", "to", "a", "time", "NUMBER", "Time", "value", "data", "return", "nil", "there", "be", "an", "unmarshal", "on", "raw", "how", "come", "you", "re", "not", "use", "that", "swagger", "params", "be", "use", "to", "indicate", "which", "operations", "the", "properties", "of", "the", "operation", "be", "include", "in", "the", "struct", "NUMBER", "So", "you", "d", "use", "something", "like", "these", "LINK", "swagger", "go", "swagger", "blob", "master", "fixture", "goparsing", "petstore", "rest", "handlers", "orders", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "or", "go", "swagger", "params", "listOneService", "type", "ListOneParams", "struct", "ServiceName", "description", "goes", "here", "in", "path", "required", "true", "ServiceName", "string", "json", "serviceName", "Version", "description", "goes", "here", "in", "path", "required", "true", "Version", "string", "json", "version", "tonyghita", "I", "don", "t", "think", "there", "be", "a", "param", "paramName", "atm", "NUMBER", "I", "chose", "to", "piggyback", "on", "the", "json", "tag", "because", "swagger", "typically", "do", "json", "request", "NUMBER", "these", "template", "be", "use", "strfmt", "NUMBER", "Sprintf", "they", "should", "use", "net", "NUMBER", "JoinHostPort", "instead", "and", "then", "the", "ipv", "NUMBER", "address", "will", "be", "properly", "escaped", "too", "NUMBER", "This", "be", "in", "addition", "to", "your", "fix", "there", "be", "an", "issue", "with", "escaping", "the", "backticks", "in", "the", "long", "description", "which", "makes", "the", "file", "not", "compile", "NUMBER", "Because", "of", "that", "the", "imports", "aren", "t", "be", "cleaned", "up", "by", "goimports", "NUMBER", "can", "you", "share", "a", "spec", "and", "the", "error", "message", "yeah", "for", "examples", "the", "code", "be", "checked", "in", "so", "people", "can", "browse", "it", "NUMBER", "It", "s", "be", "hugely", "useful", "in", "helping", "people", "find", "their", "way", "NUMBER", "You", "can", "add", "your", "example", "to", "the", "regenerate", "script", "too", "LINK", "swagger", "go", "swagger", "blob", "master", "hack", "regen", "samples", "NUMBER", "sh", "Thanks", "a", "lot", "more", "examples", "be", "really", "helpful", "it", "s", "not", "reachable", "from", "within", "the", "handler", "anywhere", "atm", "NUMBER", "I", "m", "curious", "about", "what", "use", "case", "this", "would", "enable", "ah", "ok", "this", "be", "possible", "in", "NUMBER", "ways", "NUMBER", "The", "first", "way", "be", "by", "use", "an", "authenticator", "the", "second", "way", "be", "make", "a", "middleware", "not", "global", "Authenticator", "go", "Authenticator", "represents", "an", "authentication", "strategy", "implementations", "of", "Authenticator", "know", "how", "to", "authenticate", "the", "request", "data", "and", "translate", "that", "into", "a", "valid", "principal", "object", "or", "an", "error", "type", "Authenticator", "interface", "Authenticate", "interface", "bool", "interface", "error", "The", "schemes", "currently", "support", "you", "can", "see", "here", "LINK", "openapi", "runtime", "tree", "master", "security", "Middleware", "go", "The", "middleware", "configuration", "be", "for", "the", "handler", "executors", "NUMBER", "These", "do", "not", "apply", "to", "the", "swagger", "NUMBER", "json", "document", "NUMBER", "The", "middleware", "executes", "after", "routing", "but", "before", "authentication", "binding", "and", "validation", "func", "setupMiddlewares", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "return", "handler", "to", "get", "to", "the", "matched", "route", "in", "one", "of", "those", "you", "can", "go", "import", "github", "NUMBER", "com", "gorilla", "context", "context", "NUMBER", "Get", "NUMBER", "request", "That", "gets", "you", "a", "matched", "route", "NUMBER", "Also", "it", "might", "be", "worth", "it", "to", "expose", "Context", "as", "an", "export", "method", "on", "the", "api", "builder", "that", "would", "be", "a", "simple", "PR", "to", "add", "the", "following", "code", "to", "go", "swagger", "go", "func", "o", "LifecycleManagerAPI", "Context", "middleware", "NUMBER", "Context", "if", "o", "NUMBER", "context", "nil", "o", "NUMBER", "context", "middleware", "NUMBER", "NewRoutableContext", "o", "NUMBER", "spec", "o", "nil", "return", "o", "NUMBER", "context", "then", "your", "middlware", "could", "take", "a", "context", "in", "and", "use", "RouteInfo", "request", "like", "this", "one", "LINK", "openapi", "runtime", "blob", "master", "middleware", "security", "NUMBER", "go", "Look", "at", "this", "one", "LINK", "openapi", "kvstore", "You", "mean", "a", "different", "context", "than", "the", "one", "available", "on", "params", "NUMBER", "HTTPRequest", "NUMBER", "Context", "More", "like", "an", "application", "level", "context", "Thanks", "at", "which", "stage", "or", "how", "be", "you", "use", "go", "swagger", "you", "could", "use", "a", "spec", "that", "gets", "merge", "in", "during", "the", "generation", "process", "but", "other", "than", "that", "it", "would", "require", "change", "to", "the", "scan", "package", "A", "syntax", "has", "to", "be", "created", "and", "then", "add", "to", "the", "parsers", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "routes", "NUMBER", "go", "L", "NUMBER", "Not", "easy", "it", "would", "involve", "make", "the", "strategy", "for", "setting", "responses", "on", "a", "route", "configurable", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "routes", "NUMBER", "go", "L", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "validators", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "did", "you", "do", "a", "go", "get", "u", "github", "NUMBER", "com", "go", "openapi", "runtime", "the", "latest", "version", "of", "swagger", "tells", "you", "which", "dependencies", "you", "have", "to", "vendor", "NUMBER", "But", "can", "you", "share", "your", "spec", "so", "I", "can", "try", "it", "in", "a", "docker", "container", "NUMBER", "The", "error", "message", "be", "a", "bit", "vague", "like", "this", "and", "that", "makes", "it", "hard", "to", "troubleshoot", "kyteague", "be", "this", "still", "an", "issue", "for", "you", "From", "version", "NUMBER", "we", "print", "the", "dependencies", "you", "require", "I", "was", "able", "to", "reproduce", "that", "with", "glide", "gvt", "otoh", "do", "everything", "as", "I", "expect", "relate", "NUMBER", "LINK", "byo", "middleware", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "issuecomment", "NUMBER", "LINK", "II", "would", "like", "to", "know", "what", "the", "spec", "looks", "like", "because", "when", "an", "operation", "has", "auth", "requirements", "defined", "it", "should", "get", "a", "second", "argument", "for", "those", "operations", "NUMBER", "The", "reason", "for", "the", "change", "be", "that", "a", "zero", "value", "for", "a", "required", "property", "be", "a", "valid", "value", "NUMBER", "So", "for", "a", "string", "be", "valid", "but", "nil", "or", "absence", "of", "the", "key", "isn", "t", "NUMBER", "You", "can", "change", "your", "spec", "and", "add", "x", "nullable", "false", "I", "add", "the", "entry", "about", "the", "breaking", "change", "to", "the", "release", "note", "too", "NUMBER", "Thanks", "for", "that", "NUMBER", "You", "can", "make", "use", "of", "this", "LINK", "openapi", "swag", "blob", "master", "convert_types", "NUMBER", "go", "To", "make", "the", "referencing", "dereferencing", "easier", "I", "will", "make", "a", "NUMBER", "release", "with", "a", "new", "feature", "and", "that", "should", "also", "fix", "the", "version", "then", "this", "be", "fix", "in", "NUMBER", "x", "I", "think", "the", "solution", "be", "not", "to", "add", "type", "info", "on", "the", "property", "but", "go", "swagger", "should", "follow", "aliased", "types", "when", "they", "be", "params", "and", "get", "to", "the", "one", "they", "actually", "represent", "NUMBER", "LINK", "swagger", "go", "swagger", "release", "tag", "NUMBER", "thanks", "can", "you", "change", "your", "type", "definitions", "json", "description", "The", "date", "and", "time", "that", "the", "device", "was", "registered", "NUMBER", "type", "string", "format", "date", "time", "json", "schema", "and", "swagger", "define", "ISO", "NUMBER", "dates", "as", "a", "know", "format", "that", "will", "fix", "your", "validation", "Thanks", "NUMBER", "LGTM", "LINK", "feel", "free", "to", "send", "a", "PR", "for", "this", "do", "you", "need", "go", "TAG", "NUMBER", "func", "m", "Item", "GetDescriptionPtr", "value", "string", "haskey", "bool", "if", "m", "NUMBER", "__nulls", "NUMBER", "has", "NUMBER", "return", "nil", "m", "NUMBER", "__setValues", "NUMBER", "has", "NUMBER", "return", "m", "NUMBER", "Description", "m", "NUMBER", "__setValues", "NUMBER", "has", "NUMBER", "len", "m", "NUMBER", "Description", "NUMBER", "func", "m", "Item", "FlagIDSet", "m", "NUMBER", "__setValues", "NUMBER", "set", "NUMBER", "func", "m", "Item", "FlagIDUnset", "m", "NUMBER", "__setValues", "NUMBER", "clear", "NUMBER", "func", "m", "Item", "FlagIDNil", "m", "NUMBER", "__nulls", "NUMBER", "set", "NUMBER", "func", "m", "Item", "FlagIDZero", "m", "NUMBER", "__nulls", "NUMBER", "clear", "NUMBER", "func", "m", "Item", "GetID", "value", "int", "NUMBER", "null", "bool", "haskey", "bool", "return", "m", "NUMBER", "ID", "m", "NUMBER", "__nulls", "NUMBER", "has", "NUMBER", "m", "NUMBER", "__setValues", "NUMBER", "has", "NUMBER", "m", "NUMBER", "ID", "NUMBER", "func", "m", "Item", "GetIDPtr", "value", "int", "NUMBER", "haskey", "bool", "if", "m", "NUMBER", "__nulls", "NUMBER", "has", "NUMBER", "return", "nil", "m", "NUMBER", "__setValues", "NUMBER", "has", "NUMBER", "return", "m", "NUMBER", "ID", "m", "NUMBER", "__setValues", "NUMBER", "has", "NUMBER", "m", "NUMBER", "ID", "NUMBER", "Validate", "validates", "this", "item", "func", "m", "Item", "Validate", "formats", "strfmt", "NUMBER", "Registry", "error", "var", "res", "error", "if", "err", "m", "NUMBER", "validateDescription", "formats", "err", "nil", "prop", "res", "append", "res", "err", "if", "len", "res", "NUMBER", "return", "error", "NUMBER", "CompositeValidationError", "res", "NUMBER", "return", "nil", "func", "m", "Item", "validateDescription", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "m", "NUMBER", "__setValues", "NUMBER", "has", "NUMBER", "return", "error", "NUMBER", "Required", "description", "body", "if", "err", "validate", "NUMBER", "MinLength", "description", "body", "m", "NUMBER", "Description", "NUMBER", "err", "nil", "return", "err", "return", "nil", "func", "m", "Item", "MarshalEasyJSON", "out", "jwriter", "NUMBER", "Writer", "out", "NUMBER", "RawByte", "first", "true", "_", "first", "if", "m", "NUMBER", "Completed", "if", "first", "out", "NUMBER", "RawByte", "first", "false", "out", "NUMBER", "RawString", "completed", "out", "NUMBER", "Bool", "m", "NUMBER", "Completed", "if", "m", "NUMBER", "Description", "if", "first", "out", "NUMBER", "RawByte", "first", "false", "out", "NUMBER", "RawString", "description", "out", "NUMBER", "String", "string", "m", "NUMBER", "Description", "else", "if", "first", "out", "NUMBER", "RawByte", "first", "false", "out", "NUMBER", "RawString", "description", "if", "m", "NUMBER", "__nulls", "NUMBER", "has", "NUMBER", "out", "NUMBER", "RawString", "null", "else", "if", "m", "NUMBER", "__setValues", "NUMBER", "has", "NUMBER", "out", "NUMBER", "RawString", "if", "m", "NUMBER", "ID", "NUMBER", "if", "first", "out", "NUMBER", "RawByte", "first", "false", "out", "NUMBER", "RawString", "id", "out", "NUMBER", "Int", "NUMBER", "m", "NUMBER", "ID", "out", "NUMBER", "RawByte", "func", "m", "Item", "MarshalJSON", "byte", "error", "out", "jwriter", "NUMBER", "Writer", "m", "NUMBER", "MarshalEasyJSON", "out", "return", "out", "NUMBER", "BuildBytes", "func", "m", "Item", "UnmarshalEasyJSON", "in", "jlexer", "NUMBER", "Lexer", "if", "in", "NUMBER", "IsNull", "in", "NUMBER", "Skip", "return", "in", "NUMBER", "Delim", "for", "in", "NUMBER", "IsDelim", "key", "in", "NUMBER", "UnsafeString", "in", "NUMBER", "WantColon", "if", "in", "NUMBER", "IsNull", "switch", "key", "case", "id", "m", "NUMBER", "ID", "NUMBER", "m", "NUMBER", "__setValues", "NUMBER", "set", "NUMBER", "m", "NUMBER", "__nulls", "NUMBER", "set", "NUMBER", "m", "NUMBER", "__nulls", "NUMBER", "clear", "NUMBER", "case", "description", "m", "NUMBER", "Description", "m", "NUMBER", "__setValues", "NUMBER", "set", "NUMBER", "m", "NUMBER", "__nulls", "NUMBER", "clear", "NUMBER", "case", "completed", "m", "NUMBER", "Completed", "false", "m", "NUMBER", "__setValues", "NUMBER", "set", "NUMBER", "m", "NUMBER", "__nulls", "NUMBER", "clear", "NUMBER", "default", "in", "NUMBER", "SkipRecursive", "in", "NUMBER", "Skip", "in", "NUMBER", "WantComma", "continue", "switch", "key", "case", "id", "m", "NUMBER", "ID", "in", "NUMBER", "Int", "NUMBER", "m", "NUMBER", "__setValues", "NUMBER", "set", "NUMBER", "m", "NUMBER", "__nulls", "NUMBER", "clear", "NUMBER", "case", "description", "m", "NUMBER", "Description", "in", "NUMBER", "String", "m", "NUMBER", "__setValues", "NUMBER", "set", "NUMBER", "m", "NUMBER", "__nulls", "NUMBER", "clear", "NUMBER", "case", "completed", "m", "NUMBER", "Completed", "in", "NUMBER", "Bool", "m", "NUMBER", "__setValues", "NUMBER", "set", "NUMBER", "m", "NUMBER", "__nulls", "NUMBER", "clear", "NUMBER", "default", "in", "NUMBER", "SkipRecursive", "in", "NUMBER", "WantComma", "in", "NUMBER", "Delim", "func", "m", "Item", "UnmarshalJSON", "data", "byte", "error", "in", "jlexer", "NUMBER", "Lexer", "Data", "data", "m", "NUMBER", "UnmarshalEasyJSON", "in", "return", "in", "NUMBER", "Error", "type", "bitmap", "uint", "func", "b", "bitmap", "clear", "idx", "uint", "bitmap", "n", "uint", "b", "n", "NUMBER", "TAG", "NUMBER", "I", "update", "the", "example", "to", "use", "willf", "s", "bitset", "and", "it", "add", "more", "helpers", "as", "well", "as", "a", "PatchWith", "and", "Clone", "method", "NUMBER", "LINK", "I", "created", "PR", "NUMBER", "to", "track", "the", "work", "that", "be", "going", "into", "implement", "this", "NUMBER", "It", "will", "take", "a", "while", "to", "complete", "as", "it", "s", "a", "fairly", "big", "change", "NUMBER", "lgtm", "lgtm", "lgtm", "cool", "look", "forward", "to", "it", "this", "was", "fix", "differently", "but", "the", "functionality", "exists", "now", "lgtm", "I", "run", "test", "locally", "like", "this", "go", "test", "go", "list", "NUMBER", "NUMBER", "grep", "v", "vendor", "Another", "way", "to", "do", "it", "be", "docker", "build", "t", "go", "swagger", "local", "f", "Dockerfile", "NUMBER", "ci", "NUMBER", "docker", "run", "rm", "it", "go", "swagger", "local", "NUMBER", "hack", "build", "docker", "NUMBER", "sh", "And", "the", "last", "way", "to", "do", "it", "be", "drone", "exec", "I", "think", "write", "a", "test", "for", "this", "would", "only", "matter", "for", "the", "client", "generation", "stuff", "NUMBER", "The", "BasePath", "property", "be", "use", "in", "the", "client", "facade", "it", "looks", "a", "bit", "like", "these", "test", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "operation_test", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "the", "template", "for", "that", "be", "clientFacadeTemplate", "and", "you", "re", "checking", "if", "this", "bit", "renders", "correctly", "transport", "httptransport", "NUMBER", "New", "printf", "v", "NUMBER", "Host", "printf", "v", "NUMBER", "BasePath", "printf", "v", "NUMBER", "Schemes", "lgtm", "I", "go", "by", "the", "drone", "one", "I", "should", "remove", "the", "circle", "one", "I", "won", "t", "be", "use", "it", "anymore", "going", "forward", "NUMBER", "Thanks", "a", "lot", "I", "think", "you", "fix", "this", "now", "can", "this", "be", "close", "recursion", "should", "be", "support", "in", "the", "way", "you", "write", "it", "here", "NUMBER", "But", "currently", "it", "might", "end", "up", "with", "a", "stack", "overflow", "when", "you", "use", "it", "in", "a", "response", "or", "param", "duplicate", "of", "NUMBER", "lgtm", "The", "trade", "off", "that", "will", "be", "made", "with", "that", "be", "that", "you", "can", "t", "really", "validate", "requiredness", "on", "builtins", "without", "turning", "them", "into", "pointer", "values", "NUMBER", "yes", "you", "re", "right", "it", "s", "not", "supposed", "to", "generate", "code", "that", "looks", "like", "that", "because", "it", "s", "nullable", "NUMBER", "You", "can", "still", "go", "back", "to", "the", "tag", "release", "though", "right", "I", "get", "different", "code", "generate", "when", "I", "try", "this", "NUMBER", "For", "me", "there", "be", "no", "dereferencing", "and", "it", "considers", "nil", "NUMBER", "This", "makes", "me", "wonder", "if", "the", "template", "need", "to", "be", "regenerated", "for", "you", "NUMBER", "the", "spec", "LINK", "swagger", "go", "swagger", "blob", "fa", "NUMBER", "e", "NUMBER", "f", "NUMBER", "ab", "NUMBER", "ec", "NUMBER", "bc", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "NUMBER", "cd", "NUMBER", "bea", "NUMBER", "b", "NUMBER", "ef", "NUMBER", "b", "NUMBER", "fixture", "codegen", "todolist", "NUMBER", "models", "NUMBER", "yml", "L", "NUMBER", "L", "NUMBER", "the", "test", "LINK", "swagger", "go", "swagger", "blob", "fa", "NUMBER", "e", "NUMBER", "f", "NUMBER", "ab", "NUMBER", "ec", "NUMBER", "bc", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "NUMBER", "cd", "NUMBER", "bea", "NUMBER", "b", "NUMBER", "ef", "NUMBER", "b", "NUMBER", "generator", "model_test", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "go", "package", "models", "This", "file", "was", "generate", "by", "the", "swagger", "tool", "NUMBER", "Editing", "this", "file", "might", "prove", "futile", "when", "you", "re", "run", "the", "swagger", "generate", "command", "import", "strfmt", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "error", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "validate", "NewProfile", "new", "profile", "swagger", "model", "newProfile", "type", "NewProfile", "struct", "id", "Required", "true", "ID", "int", "NUMBER", "json", "id", "Validate", "validates", "this", "new", "profile", "func", "m", "NewProfile", "Validate", "formats", "strfmt", "NUMBER", "Registry", "error", "var", "res", "error", "if", "err", "m", "NUMBER", "validateID", "formats", "err", "nil", "prop", "res", "append", "res", "err", "if", "len", "res", "NUMBER", "return", "error", "NUMBER", "CompositeValidationError", "res", "NUMBER", "return", "nil", "func", "m", "NewProfile", "validateID", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Required", "id", "body", "m", "NUMBER", "ID", "err", "nil", "return", "err", "return", "nil", "please", "consider", "the", "opposite", "case", "where", "you", "want", "to", "validate", "the", "struct", "not", "the", "json", "NUMBER", "This", "use", "case", "be", "real", "on", "generate", "clients", "NUMBER", "How", "do", "you", "distinguish", "between", "value", "set", "and", "value", "unset", "dolmen", "that", "behavior", "invalidates", "the", "required", "bit", "of", "the", "contract", "because", "if", "something", "isn", "t", "present", "but", "required", "then", "you", "don", "t", "get", "that", "error", "message", "NUMBER", "So", "why", "have", "the", "requirement", "there", "at", "all", "if", "you", "want", "to", "catch", "it", "with", "another", "validation", "NUMBER", "I", "m", "not", "very", "happy", "with", "the", "way", "this", "be", "currently", "work", "NUMBER", "And", "it", "still", "be", "an", "issue", "for", "patching", "objects", "because", "with", "pointers", "we", "don", "t", "know", "if", "it", "was", "actually", "a", "value", "that", "was", "set", "or", "if", "it", "was", "a", "value", "that", "s", "nil", "NUMBER", "So", "i", "think", "this", "will", "have", "to", "change", "one", "more", "time", "to", "use", "nullable", "types", "where", "set", "unset", "be", "a", "property", "on", "the", "type", "NUMBER", "That", "keep", "GC", "pressure", "lower", "but", "I", "think", "that", "might", "create", "a", "need", "for", "NUMBER", "structs", "NUMBER", "One", "be", "the", "binding", "validating", "struct", "and", "the", "second", "one", "be", "the", "one", "the", "user", "actually", "uses", "because", "a", "nullable", "type", "would", "kind", "of", "look", "like", "go", "type", "NullableBool", "struct", "value", "bool", "IsNull", "bool", "WasSet", "bool", "func", "n", "NullableBool", "Value", "bool", "if", "nIsNull", "return", "nil", "return", "n", "NUMBER", "value", "The", "biggest", "benefit", "we", "derive", "from", "this", "be", "the", "ability", "to", "do", "patches", "on", "objects", "be", "this", "different", "from", "NUMBER", "it", "won", "t", "know", "that", "those", "things", "be", "primitives", "to", "begin", "with", "NUMBER", "it", "wouldn", "t", "know", "how", "to", "turn", "that", "into", "a", "swagger", "schema", "I", "think", "NUMBER", "If", "you", "want", "nullable", "without", "change", "the", "way", "swagger", "works", "today", "this", "would", "work", "go", "swagger", "model", "type", "Community", "struct", "Sid", "string", "json", "sid", "Designjson", "interface", "Status", "string", "Xdate", "string", "After", "deliberating", "on", "this", "for", "a", "while", "NUMBER", "i", "don", "t", "think", "it", "s", "within", "swaggers", "goal", "to", "provide", "structs", "you", "can", "persist", "in", "the", "database", "NUMBER", "I", "don", "t", "want", "to", "write", "an", "orm", "my", "goal", "be", "to", "provide", "API", "boundary", "contracts", "NUMBER", "The", "database", "be", "the", "opposite", "end", "of", "that", "NUMBER", "Now", "that", "be", "said", "this", "ticket", "led", "to", "NUMBER", "and", "I", "do", "think", "there", "be", "value", "for", "us", "to", "provide", "support", "for", "nullable", "and", "set", "unset", "values", "however", "compatibility", "with", "persistence", "layers", "be", "outside", "the", "goal", "of", "the", "project", "NUMBER", "I", "know", "this", "be", "probably", "not", "the", "answer", "you", "wanted", "but", "API", "boundary", "contracts", "be", "fickle", "enough", "without", "having", "to", "deal", "with", "database", "serialization", "NUMBER", "I", "will", "leave", "this", "thread", "open", "so", "other", "people", "can", "chime", "in", "and", "let", "their", "opinions", "be", "know", "NUMBER", "lgtm", "thanks", "lgtm", "sorry", "I", "fix", "those", "in", "anohter", "branch", "this", "be", "a", "bug", "in", "the", "scanner", "it", "should", "consider", "other", "chars", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "validators", "NUMBER", "go", "L", "NUMBER", "that", "should", "probably", "use", "a", "different", "regex", "to", "capture", "those", "values", "NUMBER", "lgtm", "Wrap", "it", "in", "another", "struct", "and", "decorate", "the", "property", "with", "in", "body", "go", "swagger", "response", "Response", "type", "ResponseWrapper", "struct", "in", "body", "Body", "Response", "type", "Response", "struct", "ResultCode", "string", "json", "code", "Message", "string", "json", "message", "ScanId", "string", "json", "scan_id", "Filesize", "string", "json", "filesize", "ContentType", "string", "json", "content_type", "ScanResultUrl", "string", "json", "scanresult_url", "you", "can", "marshal", "instance", "NUMBER", "Body", "instead", "can", "t", "you", "In", "fact", "you", "don", "t", "even", "have", "to", "instantiate", "the", "response", "wrapper", "NUMBER", "You", "can", "think", "of", "it", "as", "type", "checked", "documentation", "perhaps", "interest", "I", "have", "it", "s", "often", "request", "NUMBER", "I", "just", "don", "t", "have", "enough", "time", "to", "do", "all", "the", "things", "NUMBER", "so", "I", "m", "not", "oppose", "to", "a", "pull", "request", "that", "makes", "this", "work", "NUMBER", "perhaps", "with", "an", "annotation", "like", "swagger", "responseBody", "The", "main", "thing", "be", "the", "response", "stuff", "needs", "to", "exist", "but", "we", "can", "create", "extra", "syntax", "to", "support", "unwrapped", "bodies", "NUMBER", "A", "swagger", "response", "be", "headers", "body", "so", "that", "s", "why", "there", "be", "the", "requirement", "for", "wrapping", "at", "this", "moment", "NUMBER", "What", "I", "mostly", "want", "to", "avoid", "be", "duplicating", "type", "information", "in", "doc", "comments", "seems", "a", "waste", "of", "a", "perfectly", "good", "compiler", "NUMBER", "this", "be", "the", "code", "that", "governs", "the", "response", "parsing", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "responses", "NUMBER", "go", "L", "NUMBER", "perhaps", "an", "easy", "way", "to", "do", "this", "be", "to", "check", "for", "both", "in", "Body", "and", "swagger", "response", "annotations", "to", "be", "present", "NUMBER", "If", "they", "be", "then", "the", "type", "should", "be", "wrapped", "in", "a", "response", "without", "headers", "NUMBER", "Somebody", "sent", "a", "PR", "for", "this", "last", "week", "so", "on", "master", "this", "feature", "should", "be", "available", "NUMBER", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "f", "NUMBER", "b", "NUMBER", "c", "NUMBER", "dc", "NUMBER", "aea", "NUMBER", "e", "NUMBER", "e", "NUMBER", "d", "NUMBER", "e", "NUMBER", "bfirsh", "the", "issue", "be", "that", "when", "you", "don", "t", "have", "those", "structs", "you", "re", "not", "documenting", "headers", "in", "your", "contract", "NUMBER", "A", "very", "common", "case", "for", "this", "be", "something", "like", "request", "id", "NUMBER", "you", "can", "if", "you", "use", "NUMBER", "body", "ModelName", "we", "also", "since", "have", "add", "swagger", "operation", "which", "gives", "you", "the", "ability", "to", "just", "write", "the", "yaml", "for", "the", "operation", "you", "re", "describing", "you", "will", "also", "need", "to", "add", "m", "to", "generate", "spec", "swagger", "generate", "spec", "m", "NUMBER", "NUMBER", "thanks", "hi", "don", "t", "worry", "about", "circleci", "and", "appveyor", "I", "should", "remove", "them", "because", "they", "typically", "timeout", "NUMBER", "lgtm", "Thanks", "be", "there", "something", "that", "can", "be", "worked", "out", "to", "get", "gentoo", "support", "include", "in", "the", "release", "process", "shipit", "feel", "free", "to", "send", "this", "as", "a", "PR", "close", "by", "NUMBER", "When", "you", "start", "the", "process", "you", "can", "specify", "them", "as", "argument", "of", "environment", "variables", "NUMBER", "You", "can", "also", "override", "the", "scheme", "by", "specify", "scheme", "http", "I", "just", "add", "a", "readme", "doc", "but", "I", "m", "run", "through", "the", "rest", "of", "the", "tutorial", "to", "see", "if", "it", "all", "still", "works", "NUMBER", "It", "will", "be", "fix", "today", "that", "be", "correct", "which", "be", "why", "I", "haven", "t", "push", "my", "update", "yet", "NUMBER", "Stay", "tuned", "will", "take", "a", "little", "while", "to", "get", "his", "back", "in", "shape", "once", "NUMBER", "be", "merge", "the", "tutorial", "will", "work", "again", "shipit", "lgtm", "I", "ve", "cherry", "pick", "this", "commit", "onto", "another", "branch", "so", "closing", "this", "PR", "functionality", "include", "by", "NUMBER", "I", "haven", "t", "be", "able", "to", "get", "to", "this", "but", "i", "welcome", "PR", "s", "it", "s", "not", "that", "I", "don", "t", "want", "to", "support", "it", "just", "haven", "t", "be", "able", "to", "get", "to", "it", "NUMBER", "If", "somebody", "add", "it", "as", "a", "PR", "I", "d", "be", "more", "than", "happy", "to", "merge", "it", "NUMBER", "github", "issue", "be", "my", "google", "group", "I", "don", "t", "want", "to", "have", "the", "information", "fragmented", "in", "several", "locations", "NUMBER", "So", "discussions", "question", "be", "just", "issue", "tag", "with", "question", "NUMBER", "There", "be", "a", "slack", "channel", "LINK", "if", "you", "want", "to", "have", "a", "more", "interactive", "back", "and", "forth", "NUMBER", "But", "even", "then", "I", "would", "like", "that", "information", "to", "be", "captured", "in", "my", "issue", "here", "too", "so", "that", "it", "benefits", "other", "users", "as", "well", "NUMBER", "relate", "NUMBER", "This", "ticket", "be", "labeled", "with", "raspberry", "pi", "NUMBER", "bounty", "NUMBER", "Solve", "the", "ticket", "and", "I", "ll", "send", "you", "a", "pi", "There", "be", "a", "number", "of", "package", "that", "be", "more", "like", "libraries", "they", "would", "be", "better", "extracted", "NUMBER", "Perhaps", "it", "s", "a", "good", "thing", "to", "extract", "these", "into", "their", "own", "repos", "NUMBER", "The", "CLI", "command", "can", "then", "vendor", "each", "of", "those", "repos", "NUMBER", "Most", "of", "them", "be", "stable", "at", "this", "point", "NUMBER", "specs", "jsonreference", "jsonpointer", "scan", "swag", "and", "the", "httpkit", "This", "repository", "should", "only", "contain", "the", "code", "that", "be", "directly", "use", "by", "the", "executable", "NUMBER", "Things", "that", "be", "be", "use", "as", "library", "constructs", "will", "move", "into", "their", "own", "stand", "alone", "package", "NUMBER", "I", "want", "to", "squash", "several", "issue", "here", "NUMBER", "move", "the", "yaml", "dependency", "out", "into", "package", "so", "that", "it", "doesn", "t", "automatically", "turn", "your", "application", "into", "an", "LGPL", "application", "and", "swagger", "executable", "can", "be", "classified", "as", "a", "build", "tool", "NUMBER", "NUMBER", "turn", "the", "swag", "package", "into", "its", "own", "repo", "NUMBER", "move", "jsonpointer", "package", "to", "its", "own", "repo", "NUMBER", "move", "jsonreference", "package", "to", "its", "own", "repo", "NUMBER", "separate", "spec", "package", "into", "a", "NUMBER", "repos", "NUMBER", "the", "spec", "object", "model", "NUMBER", "analysis", "package", "that", "takes", "care", "of", "analyzing", "swagger", "specifications", "and", "provides", "an", "index", "to", "be", "use", "by", "other", "package", "NUMBER", "NUMBER", "move", "validation", "into", "its", "own", "repo", "NUMBER", "move", "examples", "to", "their", "own", "repo", "NUMBER", "move", "httpkit", "into", "its", "own", "repo", "These", "repos", "will", "get", "created", "under", "the", "go", "openapi", "org", "instead", "of", "the", "go", "swagger", "org", "due", "to", "the", "rename", "of", "the", "specification", "NUMBER", "I", "ve", "begun", "work", "on", "this", "might", "not", "be", "exactly", "what", "I", "laid", "out", "in", "the", "previous", "comment", "but", "it", "will", "be", "close", "NUMBER", "I", "hope", "it", "won", "t", "take", "me", "longer", "than", "a", "weekend", "to", "complete", "this", "NUMBER", "ontucker", "yes", "I", "get", "that", "requirement", "NUMBER", "this", "be", "about", "the", "go", "swagger", "codebase", "itself", "NUMBER", "For", "your", "requirement", "I", "think", "the", "server", "that", "gets", "generate", "will", "get", "an", "interface", "pass", "in", "with", "NUMBER", "hooks", "for", "lifecycle", "events", "starting", "configuring", "stopping", "I", "like", "the", "example", "suggestion", "I", "ve", "moved", "most", "of", "the", "support", "code", "for", "to", "command", "to", "separate", "repos", "as", "well", "as", "applied", "a", "restructuring", "for", "yaml", "The", "only", "thing", "I", "didn", "t", "do", "was", "remove", "the", "examples", "from", "this", "repo", "because", "I", "think", "they", "be", "still", "kind", "of", "appropriate", "in", "this", "repo", "NUMBER", "Lgtm", "shipit", "shipit", "hey", "jredville", "that", "s", "be", "a", "long", "time", "I", "think", "you", "have", "to", "annotate", "with", "swagger", "strfmt", "uuid", "LINK", "swagger", "has", "support", "for", "uuid", "out", "of", "the", "box", "NUMBER", "I", "think", "all", "you", "do", "be", "annotate", "your", "type", "with", "swagger", "strfmt", "uuid", "I", "don", "t", "have", "an", "explicit", "test", "for", "this", "particular", "structure", "but", "when", "I", "read", "the", "code", "I", "think", "that", "would", "do", "it", "Getting", "this", "to", "work", "on", "on", "the", "client", "should", "be", "support", "today", "NUMBER", "But", "the", "server", "be", "miss", "the", "bits", "for", "the", "client", "auth", "to", "be", "validated", "NUMBER", "for", "the", "client", "part", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "todo", "list", "client", "todo_list_client", "NUMBER", "go", "L", "NUMBER", "that", "transport", "that", "gets", "created", "has", "a", "Transport", "property", "which", "be", "a", "http", "NUMBER", "RoundTripper", "NUMBER", "This", "should", "not", "be", "very", "hard", "to", "add", "to", "go", "swagger", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "I", "think", "this", "might", "be", "fix", "by", "NUMBER", "c", "NUMBER", "f", "NUMBER", "yes", "that", "went", "in", "as", "well", "NUMBER", "generate", "code", "now", "has", "access", "to", "http", "NUMBER", "Request", "and", "gorilla", "context", "be", "already", "in", "use", "by", "go", "swagger", "itself", "NUMBER", "lgtm", "you", "can", "rename", "the", "model", "in", "the", "json", "with", "the", "swagger", "model", "doc", "tag", "on", "the", "response", "data", "struct", "that", "would", "get", "you", "the", "expected", "output", "go", "swagger", "response", "SuccessResponse", "type", "SuccessResponse", "struct", "In", "body", "Data", "ResponseData", "json", "data", "swagger", "model", "SuccessResponse", "type", "ResponseData", "struct", "Field", "NUMBER", "string", "json", "field", "NUMBER", "Field", "NUMBER", "string", "json", "field", "NUMBER", "this", "needs", "an", "update", "before", "it", "can", "get", "merge", "lgtm", "lgtm", "this", "branch", "be", "out", "of", "date", "it", "needs", "a", "rebase", "shipit", "If", "you", "update", "to", "what", "s", "on", "master", "today", "the", "layout", "has", "change", "a", "bit", "of", "the", "generate", "code", "NUMBER", "It", "contains", "PR", "NUMBER", "which", "should", "address", "this", "specific", "issue", "NUMBER", "I", "ll", "make", "a", "new", "release", "this", "weekend", "NUMBER", "lgtm", "which", "go", "version", "be", "you", "use", "Are", "you", "use", "vendoring", "for", "this", "you", "require", "export", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "and", "also", "do", "your", "application", "compile", "because", "go", "swagger", "makes", "use", "of", "the", "same", "code", "the", "go", "compiler", "imports", "NUMBER", "etc", "use", "to", "discover", "all", "the", "involved", "package", "NUMBER", "So", "I", "think", "it", "requires", "your", "code", "to", "be", "mostly", "compilable", "to", "be", "able", "to", "discover", "everything", "NUMBER", "However", "the", "error", "seem", "to", "be", "relate", "to", "it", "not", "be", "able", "to", "discover", "the", "dependencies", "be", "you", "run", "the", "swagger", "command", "in", "the", "package", "that", "contains", "your", "main", "function", "would", "it", "be", "possible", "to", "share", "your", "code", "in", "some", "way", "it", "can", "be", "do", "privately", "if", "you", "re", "concerned", "about", "make", "it", "public", "NUMBER", "I", "just", "want", "to", "understand", "this", "issue", "better", "I", "have", "a", "slack", "team", "LINK", "and", "I", "m", "Ivan", "Porto", "Carrero", "in", "the", "gobridge", "slack", "team", "gsquire", "do", "you", "have", "a", "gopath", "set", "up", "Does", "that", "code", "compile", "I", "have", "problem", "get", "this", "reproduced", "shellsession", "ivan", "paradox", "md", "tmp", "genbug", "ivan", "paradox", "cd", "tmp", "genbug", "ivan", "paradox", "tmp", "genbug", "curl", "OL", "LINK", "swagger", "NUMBER", "go", "NUMBER", "ivan", "paradox", "tmp", "genbug", "ls", "test", "swagger", "NUMBER", "go", "ivan", "paradox", "tmp", "genbug", "swagger", "generate", "spec", "o", "swagger", "NUMBER", "json", "ivan", "paradox", "tmp", "genbug", "ls", "swagger", "NUMBER", "json", "test", "swagger", "NUMBER", "go", "ivan", "paradox", "tmp", "genbug", "cat", "swagger", "NUMBER", "json", "produces", "application", "text", "schemes", "http", "swagger", "NUMBER", "info", "description", "The", "purpose", "be", "to", "demonstrate", "swagger", "docs", "for", "a", "test", "app", "NUMBER", "host", "localhost", "paths", "definitions", "That", "was", "linux", "here", "s", "my", "mac", "NUMBER", "My", "go", "be", "also", "install", "through", "homebrew", "shellsession", "ivan", "aether", "md", "tmp", "gendebug", "ivan", "aether", "cd", "tmp", "gendebug", "ivan", "aether", "tmp", "gendebug", "uname", "a", "Darwin", "aether", "NUMBER", "local", "NUMBER", "Darwin", "Kernel", "Version", "NUMBER", "Fri", "Feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PST", "NUMBER", "root", "xnu", "NUMBER", "NUMBER", "RELEASE_X", "NUMBER", "_", "NUMBER", "x", "NUMBER", "_", "NUMBER", "ivan", "aether", "tmp", "gendebug", "go", "env", "GOARCH", "amd", "NUMBER", "GOBIN", "GOEXE", "GOHOSTARCH", "amd", "NUMBER", "GOHOSTOS", "darwin", "GOOS", "darwin", "GOPATH", "Users", "ivan", "go", "GORACE", "GOROOT", "usr", "local", "Cellar", "go", "NUMBER", "libexec", "GOTOOLDIR", "usr", "local", "Cellar", "go", "NUMBER", "libexec", "pkg", "tool", "darwin_amd", "NUMBER", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "CC", "clang", "GOGCCFLAGS", "fPIC", "m", "NUMBER", "pthread", "fno", "caret", "diagnostics", "Qunused", "argument", "fmessage", "length", "NUMBER", "fno", "common", "CXX", "clang", "CGO_ENABLED", "NUMBER", "ivan", "aether", "tmp", "gendebug", "curl", "OL", "LINK", "swagger", "NUMBER", "go", "NUMBER", "ivan", "aether", "tmp", "gendebug", "ls", "test", "swagger", "NUMBER", "go", "ivan", "aether", "tmp", "gendebug", "swagger", "generate", "spec", "produces", "application", "text", "schemes", "http", "swagger", "NUMBER", "info", "description", "The", "purpose", "be", "to", "demonstrate", "swagger", "docs", "for", "a", "test", "app", "NUMBER", "host", "localhost", "paths", "definitions", "ivan", "aether", "tmp", "gendebug", "did", "you", "install", "your", "go", "from", "source", "perhaps", "because", "your", "goroot", "seems", "different", "from", "mine", "duplicate", "of", "NUMBER", "this", "was", "fix", "in", "NUMBER", "bbea", "NUMBER", "acba", "NUMBER", "fbc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "a", "NUMBER", "e", "NUMBER", "fc", "currently", "keep", "configure_xxx", "NUMBER", "go", "in", "sync", "be", "a", "manual", "exercise", "which", "be", "often", "times", "confusing", "NUMBER", "It", "would", "be", "better", "if", "miss", "things", "could", "be", "add", "NUMBER", "Deleted", "operations", "and", "such", "should", "also", "be", "reflected", "in", "the", "configure_xxx", "NUMBER", "go", "file", "Also", "track", "a", "list", "of", "generate", "file", "or", "use", "a", "NUMBER", "swagger", "NUMBER", "go", "extension", "so", "that", "we", "can", "delete", "all", "ephemeral", "file", "without", "worrying", "and", "we", "don", "t", "leave", "stale", "code", "lying", "around", "NUMBER", "Updates", "should", "be", "ignored", "though", "hopefully", "they", "ll", "fail", "compilation", "NUMBER", "NUMBER", "thanks", "this", "was", "fix", "on", "NUMBER", "lgtm", "this", "needs", "an", "update", "lgtm", "Could", "you", "add", "a", "test", "that", "proves", "it", "works", "NUMBER", "I", "ll", "check", "what", "can", "be", "do", "to", "support", "this", "use", "case", "NUMBER", "I", "ve", "seen", "the", "conversations", "about", "this", "on", "the", "swagger", "spec", "NUMBER", "I", "don", "t", "think", "swagger", "NUMBER", "actually", "allows", "query", "strings", "in", "the", "swagger", "spec", "NUMBER", "But", "I", "agree", "it", "s", "a", "useful", "thing", "to", "have", "because", "you", "can", "group", "parameters", "responses", "etc", "this", "way", "NUMBER", "tl", "dr", "The", "main", "difference", "at", "this", "moment", "be", "that", "this", "one", "will", "actually", "work", "NUMBER", "The", "swagger", "codegen", "project", "only", "generates", "a", "client", "and", "even", "there", "it", "will", "only", "support", "flat", "models", "NUMBER", "This", "project", "support", "most", "features", "offered", "by", "jsonschema", "including", "polymorphism", "NUMBER", "It", "allows", "for", "generating", "a", "swagger", "specification", "from", "go", "code", "NUMBER", "It", "allows", "for", "generating", "a", "server", "from", "a", "swagger", "definition", "and", "to", "generate", "an", "equivalent", "spec", "back", "from", "that", "codebase", "NUMBER", "It", "allows", "for", "generating", "a", "client", "from", "a", "swagger", "definition", "NUMBER", "It", "has", "support", "for", "several", "common", "swagger", "vendor", "extensions", "NUMBER", "Why", "be", "this", "not", "do", "in", "the", "swagger", "codegen", "project", "Because", "I", "don", "t", "really", "know", "java", "very", "well", "and", "so", "I", "d", "be", "learning", "both", "java", "and", "the", "object", "model", "of", "the", "codegen", "which", "was", "in", "heavy", "flux", "as", "oppose", "to", "doing", "go", "and", "I", "really", "wanted", "to", "go", "experience", "of", "designing", "a", "large", "codebase", "with", "it", "NUMBER", "Go", "s", "super", "limited", "type", "system", "makes", "it", "so", "that", "it", "doesn", "t", "fit", "well", "in", "the", "model", "of", "swagger", "codegen", "Go", "s", "idea", "of", "polymorphism", "doesn", "t", "reconcile", "very", "well", "with", "a", "solution", "designed", "for", "languages", "that", "actually", "have", "inheritance", "and", "so", "forth", "NUMBER", "For", "support", "types", "like", "map", "string", "int", "NUMBER", "I", "don", "t", "think", "it", "s", "possible", "with", "mustache", "I", "gravely", "underestimated", "the", "amount", "of", "work", "that", "would", "be", "involved", "in", "make", "something", "useful", "out", "of", "it", "NUMBER", "My", "personal", "mission", "I", "want", "the", "jvm", "to", "go", "away", "it", "was", "great", "way", "back", "when", "now", "it", "s", "just", "silly", "vm", "in", "container", "on", "vm", "in", "vm", "in", "container", "landing", "page", "of", "goswagger", "NUMBER", "io", "or", "the", "readme", "thanks", "for", "the", "contribution", "but", "this", "breaks", "the", "build", "NUMBER", "There", "be", "a", "panic", "with", "a", "stackoverflow", "superseded", "by", "NUMBER", "I", "think", "that", "s", "the", "way", "to", "do", "it", "NUMBER", "At", "some", "point", "I", "include", "an", "embedded", "version", "of", "the", "swagger", "ui", "in", "this", "toolkit", "but", "it", "became", "annoying", "to", "keep", "up", "to", "date", "and", "severely", "bloated", "the", "size", "of", "my", "binary", "NUMBER", "I", "m", "reluctant", "to", "do", "so", "at", "this", "point", "in", "time", "because", "a", "git", "submodule", "break", "go", "gettability", "NUMBER", "I", "ve", "had", "it", "include", "at", "one", "point", "but", "it", "s", "so", "much", "of", "a", "moving", "target", "that", "it", "would", "always", "be", "outdate", "NUMBER", "On", "top", "of", "it", "it", "be", "a", "lot", "of", "javascript", "and", "html", "file", "and", "people", "haven", "t", "be", "over", "the", "moon", "when", "go", "swagger", "gets", "vendored", "and", "they", "see", "all", "of", "that", "NUMBER", "Now", "after", "a", "refactor", "NUMBER", "be", "complete", "I", "think", "there", "might", "be", "a", "way", "to", "bring", "this", "functionality", "back", "because", "it", "becomes", "opt", "in", "this", "broke", "json", "schema", "test", "LINK", "swagger", "build", "NUMBER", "gdolumaf", "L", "NUMBER", "o", "but", "I", "really", "like", "the", "PR", "so", "if", "you", "can", "make", "it", "pass", "test", "I", "m", "more", "than", "happy", "to", "merge", "it", "NUMBER", "Sounds", "like", "a", "lot", "of", "work", "went", "into", "it", "lgtm", "I", "wonder", "why", "there", "be", "a", "stack", "overflow", "in", "go", "NUMBER", "for", "this", "but", "it", "s", "fine", "in", "NUMBER", "hey", "I", "just", "saw", "which", "project", "this", "be", "for", "NUMBER", "Very", "cool", "fireworks", "Looks", "like", "a", "very", "nice", "approach", "to", "the", "API", "mess", "NUMBER", "We", "have", "a", "slack", "in", "case", "you", "want", "to", "influence", "direction", "a", "bit", "more", "LINK", "superseded", "by", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "fix", "by", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "fwiw", "and", "for", "other", "people", "reading", "this", "bug", "NUMBER", "An", "error", "resulting", "from", "user", "error", "in", "this", "case", "because", "the", "user", "has", "not", "supplied", "the", "body", "should", "always", "be", "in", "the", "NUMBER", "xx", "range", "NUMBER", "NUMBER", "xx", "range", "be", "reserved", "for", "error", "where", "the", "system", "be", "to", "blame", "NUMBER", "Please", "next", "time", "provide", "clear", "steps", "data", "to", "reproduce", "it", "helps", "a", "lot", "NUMBER", "Things", "that", "help", "be", "the", "swagger", "spec", "or", "a", "minimal", "swagger", "spec", "to", "reproduce", "the", "issue", "NUMBER", "And", "perhaps", "the", "request", "you", "sent", "it", "it", "s", "hard", "to", "read", "minds", "NUMBER", "this", "only", "panics", "when", "there", "be", "no", "body", "correct", "Would", "it", "be", "possible", "to", "give", "me", "steps", "to", "reproduce", "When", "do", "the", "panic", "occur", "I", "would", "like", "to", "see", "the", "stack", "trace", "of", "the", "panic", "NUMBER", "if", "possible", "also", "a", "minimal", "version", "of", "the", "spec", "NUMBER", "lgtm", "lgtm", "relate", "NUMBER", "NUMBER", "I", "think", "you", "can", "use", "c", "slmpclient", "to", "this", "effect", "NUMBER", "That", "would", "generate", "each", "client", "in", "their", "own", "package", "but", "the", "models", "would", "still", "be", "shared", "parent", "NUMBER", "parent", "NUMBER", "lgtm", "thank", "you", "for", "use", "and", "improving", "the", "tool", "sir", "the", "spec", "here", "says", "that", "it", "s", "a", "string", "NUMBER", "the", "type", "says", "string", "this", "be", "a", "confirmed", "issue", "with", "go", "imports", "lgtm", "can", "you", "add", "the", "relevant", "pieces", "of", "the", "swagger", "spec", "or", "a", "version", "that", "be", "similar", "a", "ref", "property", "takes", "over", "that", "entire", "object", "a", "parameter", "be", "point", "to", "a", "schema", "you", "can", "use", "a", "parameters", "top", "level", "property", "NUMBER", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "fix", "field", "So", "if", "you", "want", "to", "share", "parameters", "you", "can", "define", "it", "in", "the", "parameters", "top", "level", "property", "and", "do", "something", "like", "parameters", "sid", "in", "query", "required", "true", "type", "integer", "format", "int", "NUMBER", "get_main_object", "get", "tags", "maindata", "parameters", "ref", "parameters", "sid", "at", "least", "for", "json", "this", "could", "be", "helpful", "LINK", "json", "Just", "restested", "this", "NUMBER", "NUMBER", "No", "more", "panic", "a", "validation", "error", "be", "detected", "NUMBER", "Strangely", "error", "be", "repeated", "NUMBER", "NUMBER", "casualjim", "your", "example", "be", "not", "validated", "NUMBER", "Cannot", "unmarshall", "object", "NUMBER", "I", "think", "we", "can", "close", "the", "panic", "issue", "and", "perhaps", "dedicate", "a", "more", "accurate", "issue", "on", "validation", "message", "relevances", "NUMBER", "Preparing", "a", "PR", "with", "fixture", "and", "UT", "NUMBER", "can", "you", "move", "the", "swagger", "model", "annotation", "to", "be", "the", "last", "line", "in", "the", "doc", "comments", "for", "a", "struct", "Alternatively", "i", "see", "some", "definitions", "for", "responses", "in", "your", "specification", "document", "NUMBER", "But", "no", "matching", "swagger", "response", "definitions", "structs", "NUMBER", "go", "swagger", "response", "errorResponse", "type", "ErrorResponse", "struct", "in", "body", "Body", "struct", "Message", "string", "json", "error", "omitempty", "swagger", "response", "validationError", "type", "ValidationError", "struct", "in", "body", "Body", "struct", "required", "true", "Message", "string", "json", "error", "omitempty", "Field", "string", "json", "fieldName", "omitempty", "swagger", "response", "someResponse", "type", "SomeResponse", "struct", "in", "body", "Body", "User", "json", "body", "omitempty", "I", "add", "an", "option", "to", "the", "swagger", "generator", "today", "scan", "models", "which", "should", "make", "models", "be", "pick", "up", "regardless", "of", "whether", "they", "re", "in", "use", "somewhere", "else", "or", "not", "NUMBER", "Perhaps", "that", "will", "work", "NUMBER", "It", "s", "late", "where", "I", "live", "but", "I", "ll", "try", "your", "code", "tomorrow", "to", "see", "if", "I", "there", "be", "more", "work", "needed", "NUMBER", "most", "of", "them", "be", "due", "to", "go", "s", "maps", "be", "unordered", "they", "aren", "t", "actual", "change", "NUMBER", "And", "you", "re", "right", "I", "should", "run", "regen", "samples", "more", "often", "lgtm", "this", "was", "fix", "by", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "Could", "you", "please", "post", "a", "YAML", "or", "JSON", "example", "illustrating", "your", "point", "I", "have", "a", "branch", "for", "this", "but", "I", "couldn", "t", "reproduce", "your", "issue", "NUMBER", "Can", "you", "check", "if", "it", "s", "ok", "now", "lgtm", "I", "think", "this", "be", "the", "expected", "behavior", "LINK", "sec", "NUMBER", "html", "sec", "NUMBER", "Any", "HTTP", "NUMBER", "message", "containing", "an", "entity", "body", "SHOULD", "include", "a", "Content", "Type", "header", "field", "defining", "the", "media", "type", "of", "that", "body", "NUMBER", "If", "and", "only", "if", "the", "media", "type", "be", "not", "given", "by", "a", "Content", "Type", "field", "the", "recipient", "MAY", "attempt", "to", "guess", "the", "media", "type", "via", "inspection", "of", "its", "content", "and", "or", "the", "name", "extension", "s", "of", "the", "URI", "use", "to", "identify", "the", "resource", "NUMBER", "If", "the", "media", "type", "remains", "unknown", "the", "recipient", "SHOULD", "treat", "it", "as", "type", "application", "octet", "stream", "NUMBER", "So", "I", "think", "the", "swagger", "specification", "should", "have", "a", "consumer", "for", "application", "octet", "stream", "for", "those", "routes", "NUMBER", "I", "add", "support", "for", "use", "io", "NUMBER", "Reader", "and", "io", "NUMBER", "Writer", "interfaces", "to", "produce", "bytestreams", "NUMBER", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "e", "NUMBER", "ece", "NUMBER", "ef", "NUMBER", "e", "NUMBER", "f", "NUMBER", "bfa", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "operations", "in", "the", "generate", "server", "be", "expected", "to", "return", "a", "responder", "NUMBER", "This", "interface", "be", "defined", "as", "go", "Responder", "be", "an", "interface", "for", "types", "to", "implement", "when", "they", "want", "to", "be", "considered", "for", "write", "HTTP", "responses", "type", "Responder", "interface", "WriteResponse", "http", "NUMBER", "ResponseWriter", "httpkit", "NUMBER", "Producer", "With", "NUMBER", "e", "NUMBER", "I", "ve", "add", "a", "middleware", "NUMBER", "ResponderFunc", "helper", "construct", "so", "you", "can", "just", "write", "a", "func", "http", "NUMBER", "ResponseWriter", "httpkit", "NUMBER", "Producer", "where", "you", "want", "a", "streaming", "response", "NUMBER", "I", "hope", "this", "be", "sufficient", "I", "ve", "toyed", "with", "a", "channel", "based", "stream", "where", "you", "send", "struct", "objects", "to", "a", "channel", "which", "then", "gets", "streamed", "to", "the", "browser", "NUMBER", "I", "decided", "against", "this", "because", "it", "seem", "to", "just", "add", "complexity", "for", "little", "benefit", "NUMBER", "I", "can", "be", "persuaded", "to", "implement", "such", "a", "responder", "though", "and", "should", "somebody", "send", "a", "PR", "like", "that", "I", "would", "not", "say", "no", "to", "it", "NUMBER", "We", "could", "add", "an", "extension", "like", "x", "strict", "and", "that", "would", "then", "make", "the", "string", "comparison", "use", "equalfold", "NUMBER", "I", "do", "think", "both", "options", "should", "be", "support", "because", "I", "think", "that", "typically", "enums", "be", "an", "exhaustive", "list", "of", "strict", "values", "but", "at", "the", "same", "time", "I", "think", "you", "have", "a", "valid", "use", "case", "NUMBER", "Set", "the", "embedded", "spec", "the", "creation", "of", "the", "server", "and", "so", "forth", "free", "from", "the", "main", "package", "so", "it", "can", "be", "composed", "in", "executables", "with", "commands", "sorry", "this", "be", "a", "copy", "paste", "error", "i", "hope", "i", "fix", "it", "now", "swagger", "model", "allows", "you", "to", "override", "the", "name", "inferred", "from", "the", "struct", "type", "should", "you", "so", "desire", "NUMBER", "If", "you", "want", "a", "model", "to", "be", "pick", "up", "you", "just", "use", "it", "in", "a", "struct", "decorated", "with", "swagger", "parameters", "or", "swagger", "response", "NUMBER", "the", "swagger", "model", "be", "useful", "during", "spec", "generation", "when", "you", "want", "to", "override", "a", "name", "for", "example", "go", "swagger", "model", "type", "User", "struct", "results", "in", "yaml", "definitions", "User", "type", "object", "but", "go", "swagger", "model", "user", "type", "User", "struct", "results", "in", "yaml", "definitions", "user", "type", "object", "to", "use", "it", "in", "a", "response", "go", "swagger", "response", "userFound", "type", "UserFound", "struct", "in", "body", "Body", "User", "ok", "thanks", "NUMBER", "I", "ll", "try", "to", "get", "to", "this", "bug", "this", "week", "I", "have", "a", "test", "for", "this", "LINK", "swagger", "go", "swagger", "blob", "master", "fixture", "goparsing", "classification", "operations", "responses", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "would", "it", "be", "possible", "to", "give", "me", "project", "with", "the", "file", "layout", "you", "have", "I", "can", "t", "reproduce", "the", "error", "you", "have", "without", "more", "info", "NUMBER", "I", "use", "go", "NUMBER", "And", "this", "toolkit", "be", "build", "and", "test", "against", "NUMBER", "and", "NUMBER", "thanks", "for", "the", "suggestion", "There", "be", "this", "folder", "LINK", "swagger", "go", "swagger", "tree", "master", "docs", "content", "And", "that", "be", "a", "hugo", "site", "that", "gets", "push", "to", "LINK", "swagger", "go", "swagger", "NUMBER", "github", "NUMBER", "io", "I", "can", "make", "it", "all", "work", "from", "the", "go", "swagger", "NUMBER", "github", "NUMBER", "io", "repo", "in", "a", "gh", "pages", "model", "though", "if", "that", "be", "preferred", "I", "ve", "moved", "the", "sources", "of", "the", "documentation", "to", "the", "website", "repository", "NUMBER", "LINK", "swagger", "go", "swagger", "NUMBER", "github", "NUMBER", "io", "tree", "source", "You", "can", "send", "pull", "request", "there", "should", "you", "want", "to", "edit", "the", "website", "what", "be", "the", "method", "it", "uses", "where", "it", "leaves", "out", "Accept", "HTTP", "method", "GET", "POST", "PUT", "DELETE", "Anyway", "it", "s", "a", "bug", "in", "swagger", "where", "it", "should", "use", "_", "_", "as", "default", "I", "guess", "lgtm", "lgtm", "Thanks", "for", "this", "unfortunately", "it", "needs", "to", "be", "rebased", "or", "something", "because", "I", "can", "t", "merge", "it", "automatically", "lgtm", "lgtm", "Thanks", "a", "lot", "for", "this", "btw", "I", "want", "to", "write", "a", "test", "for", "this", "be", "this", "scenario", "correct", "Your", "server", "sends", "NUMBER", "s", "for", "items", "that", "come", "in", "without", "a", "trail", "slash", "Nitpick", "according", "to", "the", "spec", "on", "URI", "s", "the", "NUMBER", "be", "equivalent", "so", "why", "not", "just", "catch", "it", "with", "routing", "logic", "That", "be", "said", "I", "ve", "seen", "many", "go", "based", "APIs", "not", "handle", "calls", "with", "a", "trail", "slash", "NUMBER", "eg", "NUMBER", "LINK", "swagger", "go", "swagger", "vs", "LINK", "swagger", "go", "swagger", "which", "makes", "me", "even", "more", "confused", "NUMBER", "I", "doubt", "that", "I", "will", "be", "able", "to", "remove", "the", "usage", "of", "path", "NUMBER", "Join", "but", "I", "ll", "try", "to", "preserve", "a", "trail", "slash", "should", "it", "exist", "NUMBER", "If", "you", "add", "a", "test", "for", "that", "code", "you", "have", "a", "PR", "I", "d", "gladly", "accept", "lgtm", "Thanks", "a", "lot", "you", "can", "do", "that", "today", "already", "by", "just", "build", "up", "the", "http", "NUMBER", "Request", "object", "and", "then", "passing", "it", "to", "the", "the", "middleware", "NUMBER", "Perhaps", "use", "the", "httptest", "NUMBER", "Recorder", "to", "gather", "the", "response", "data", "agree", "on", "all", "points", "except", "the", "alItems", "one", "The", "since", "be", "for", "all", "ids", "since", "the", "one", "provide", "so", "if", "since", "be", "NUMBER", "then", "we", "want", "id", "s", "NUMBER", "NUMBER", "NUMBER", "and", "so", "on", "wrt", "to", "https", "I", "think", "it", "s", "still", "useful", "to", "include", "it", "in", "the", "tutorial", "but", "perhaps", "it", "should", "be", "an", "extra", "step", "and", "some", "more", "explanation", "about", "what", "and", "why", "To", "sum", "it", "up", "I", "would", "like", "to", "clean", "up", "the", "tutorial", "and", "example", "source", "code", "a", "bit", "NUMBER", "Does", "that", "mean", "a", "PR", "be", "come", "It", "breaks", "codegen", "for", "quay", "NUMBER", "io", "I", "ll", "look", "into", "fix", "this", "before", "monday", "superseded", "by", "NUMBER", "lgtm", "lgtm", "the", "spec", "struct", "doesn", "t", "have", "to", "be", "embedded", "but", "it", "do", "want", "it", "to", "be", "a", "struct", "NUMBER", "be", "that", "a", "problem", "for", "you", "The", "reason", "it", "be", "the", "way", "it", "be", "be", "because", "a", "response", "to", "swagger", "be", "headers", "body", "and", "go", "swagger", "wants", "to", "preserve", "that", "structure", "NUMBER", "In", "terms", "of", "typing", "effort", "it", "s", "about", "the", "same", "as", "an", "approach", "that", "uses", "comments", "only", "but", "you", "get", "verification", "of", "your", "types", "through", "the", "compiler", "NUMBER", "duplicate", "of", "NUMBER", "lgtm", "lgtm", "close", "by", "linked", "PR", "with", "bad", "comment", "LGTM", "Would", "it", "be", "possible", "for", "you", "to", "try", "with", "go", "NUMBER", "swagger", "uses", "GO", "NUMBER", "VENDOREXPERIMENT", "and", "I", "think", "it", "might", "not", "be", "able", "to", "find", "strfmt", "which", "be", "why", "it", "s", "not", "I", "ll", "publish", "new", "binaries", "tonight", "but", "you", "do", "need", "go", "swagger", "in", "your", "GOPATH", "for", "this", "to", "work", "out", "NUMBER", "BlueDragonX", "go", "swagger", "makes", "use", "of", "goimports", "to", "reformat", "and", "get", "the", "imports", "for", "the", "generate", "file", "NUMBER", "Part", "of", "that", "be", "optimizing", "the", "imports", "and", "to", "discover", "them", "properly", "it", "wants", "for", "them", "to", "be", "in", "the", "GOPATH", "so", "goimports", "can", "discover", "them", "NUMBER", "Anyway", "for", "strfmt", "in", "particular", "I", "ve", "aliased", "them", "now", "which", "will", "hopefully", "keep", "them", "I", "still", "have", "a", "bunch", "of", "serialization", "error", "when", "I", "try", "against", "the", "latest", "NUMBER", "container", "NUMBER", "I", "did", "update", "my", "loader", "tool", "which", "was", "miss", "some", "method", "for", "version", "NUMBER", "forthe", "file", "you", "can", "use", "httpkit", "NUMBER", "File", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "interfaces", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "when", "you", "say", "you", "did", "go", "get", "u", "do", "you", "mean", "you", "did", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "NUMBER", "Another", "thing", "I", "can", "offer", "to", "try", "be", "to", "rebuild", "with", "the", "a", "flag", "so", "that", "it", "rebuilds", "all", "package", "in", "use", "NUMBER", "I", "ll", "count", "this", "as", "a", "very", "strong", "NUMBER", "Provide", "a", "version", "command", "for", "go", "swagger", "I", "figured", "since", "I", "m", "signing", "tags", "I", "d", "add", "a", "pre", "commit", "hook", "which", "generates", "a", "go", "file", "with", "a", "version", "string", "in", "there", "that", "I", "can", "get", "from", "git", "describe", "NUMBER", "shellsession", "git", "master", "git", "describe", "v", "NUMBER", "NUMBER", "g", "NUMBER", "eb", "same", "suggestion", "as", "in", "NUMBER", "Cool", "perhaps", "default", "values", "enums", "and", "examples", "can", "be", "defined", "as", "function", "or", "vars", "with", "a", "naming", "convention", "Then", "the", "tool", "can", "generate", "json", "and", "yaml", "for", "them", "NUMBER", "It", "also", "makes", "it", "so", "that", "people", "can", "use", "code", "to", "express", "them", "and", "take", "advantage", "of", "the", "compiler", "yes", "a", "var", "works", "as", "well", "I", "like", "this", "NUMBER", "I", "ll", "accept", "any", "progress", "so", "you", "can", "do", "the", "simpler", "plan", "if", "you", "prefer", "I", "was", "just", "make", "a", "suggestion", "NUMBER", "I", "don", "t", "want", "to", "make", "it", "a", "hurdle", "to", "contribute", "we", "can", "always", "make", "it", "better", "later", "perhaps", "this", "could", "be", "useful", "for", "this", "LINK", "There", "be", "a", "few", "other", "ones", "out", "there", "that", "allow", "string", "eval", "of", "go", "code", "NUMBER", "McSwitch", "there", "be", "people", "actively", "work", "on", "enum", "support", "so", "you", "can", "leave", "that", "NUMBER", "Default", "value", "support", "be", "still", "not", "implement", "through", "NUMBER", "I", "think", "this", "be", "fix", "i", "didn", "t", "close", "it", "because", "I", "didn", "t", "write", "a", "test", "for", "this", "yet", "I", "have", "a", "hard", "time", "reproducing", "this", "NUMBER", "When", "I", "include", "the", "file", "in", "my", "test", "application", "it", "just", "pass", "out", "of", "curiosity", "when", "it", "fail", "did", "the", "project", "compile", "I", "understand", "this", "issue", "exists", "but", "I", "have", "trouble", "reproducing", "it", "NUMBER", "So", "if", "you", "do", "have", "this", "issue", "and", "you", "can", "provide", "me", "steps", "on", "how", "to", "reproduce", "it", "that", "would", "be", "greatly", "appreciated", "NUMBER", "I", "can", "t", "fix", "what", "I", "can", "t", "reproduce", "because", "I", "won", "t", "know", "if", "it", "s", "really", "fix", "so", "it", "becomes", "a", "bit", "like", "shrodingers", "cat", "NUMBER", "if", "you", "can", "add", "this", "as", "a", "test", "and", "PR", "that", "d", "be", "great", "I", "think", "treating", "error", "as", "string", "that", "worked", "for", "you", "right", "NUMBER", "I", "don", "t", "think", "it", "will", "fix", "the", "issue", "completely", "but", "it", "definitely", "fix", "some", "cases", "it", "be", "use", "for", "the", "allOf", "case", "and", "discriminators", "NUMBER", "it", "only", "considers", "methods", "with", "no", "args", "and", "a", "single", "return", "argument", "NUMBER", "that", "s", "a", "great", "idea", "wonderful", "thanks", "so", "much", "for", "doing", "this", "I", "wonder", "if", "this", "be", "still", "an", "issue", "after", "the", "merge", "of", "NUMBER", "This", "appears", "to", "be", "fix", "now", "NUMBER", "I", "ll", "close", "this", "one", "it", "can", "always", "be", "reopened", "when", "somebody", "runs", "into", "it", "again", "I", "think", "this", "has", "a", "merge", "conflict", "because", "I", "can", "t", "merge", "it", "github", "won", "t", "let", "me", "NUMBER", "After", "properly", "thinking", "this", "one", "through", "I", "think", "the", "public", "interface", "for", "the", "client", "contrary", "that", "what", "I", "said", "in", "the", "slack", "channel", "should", "use", "consumers", "for", "what", "be", "the", "consumer", "on", "the", "client", "side", "similarly", "to", "the", "producer", "NUMBER", "However", "when", "we", "look", "at", "the", "spec", "to", "get", "the", "defined", "consumes", "and", "produces", "values", "the", "produces", "values", "apply", "to", "the", "consumers", "property", "of", "the", "client", "and", "the", "consumes", "values", "apply", "to", "the", "producers", "property", "of", "the", "client", "NUMBER", "This", "remove", "surprising", "behavior", "on", "the", "client", "side", "and", "still", "captures", "intent", "from", "a", "client", "perspective", "but", "the", "spec", "be", "defined", "from", "the", "server", "perspective", "so", "there", "they", "be", "inverted", "in", "naming", "NUMBER", "Also", "we", "should", "put", "this", "in", "a", "comment", "in", "the", "file", "so", "that", "people", "don", "t", "read", "that", "code", "and", "go", "wth", "thanks", "NUMBER", "same", "comment", "wrt", "to", "naming", "from", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "issuecomment", "NUMBER", "i", "think", "this", "can", "be", "close", "The", "first", "question", "be", "do", "it", "need", "to", "be", "redesigned", "Currently", "when", "a", "type", "has", "a", "discriminator", "field", "we", "turn", "it", "into", "an", "interface", "NUMBER", "This", "interface", "defines", "GetXxx", "SetXxx", "methods", "NUMBER", "In", "subtypes", "we", "then", "generate", "unexported", "field", "and", "use", "the", "interface", "methods", "to", "satisfy", "the", "interface", "and", "the", "unexported", "field", "values", "NUMBER", "go", "type", "Pet", "interface", "GetName", "string", "SetName", "string", "Pet", "PetType", "string", "type", "Dog", "struct", "nameField", "string", "OtherAttr", "string", "func", "d", "Dog", "GetName", "string", "return", "d", "NUMBER", "nameField", "func", "d", "Dog", "SetName", "name", "string", "Pet", "d", "NUMBER", "nameField", "name", "return", "d", "func", "d", "Dog", "PetType", "string", "return", "dog", "This", "first", "approach", "has", "the", "disadvantage", "that", "there", "be", "no", "struct", "for", "the", "base", "type", "so", "you", "need", "to", "go", "through", "the", "method", "calls", "NUMBER", "An", "alternative", "way", "of", "implement", "this", "could", "be", "go", "type", "Pet", "struct", "Name", "string", "PetType", "string", "func", "p", "Pet", "Pet", "Pet", "return", "p", "type", "IsPet", "interface", "Pet", "Pet", "type", "Dog", "struct", "Pet", "OtherAttr", "string", "In", "this", "case", "the", "sub", "type", "won", "t", "be", "able", "to", "stand", "in", "for", "a", "pet", "without", "an", "explicit", "method", "call", "NUMBER", "Please", "give", "your", "comments", "or", "ideas", "I", "messed", "up", "the", "issue", "numbers", "but", "this", "should", "be", "fix", "now", "your", "vendoring", "manager", "should", "flatten", "this", "out", "NUMBER", "go", "swagger", "already", "uses", "GO", "NUMBER", "VENDOREXPERIMENT", "be", "I", "misreading", "your", "question", "if", "your", "loader", "project", "up", "to", "date", "Does", "your", "project", "compile", "swagger", "uses", "the", "go", "build", "infrastructure", "We", "can", "check", "out", "if", "there", "be", "something", "that", "be", "required", "to", "be", "enable", "NUMBER", "I", "ve", "update", "the", "dependencies", "there", "were", "change", "to", "the", "golang", "tool", "around", "loader", "but", "i", "don", "t", "think", "it", "will", "fix", "it", "yet", "NUMBER", "Do", "you", "have", "a", "repo", "i", "can", "use", "to", "reproduce", "this", "issue", "Thank", "your", "for", "this", "very", "complete", "story", "NUMBER", "Can", "you", "also", "try", "to", "upgrade", "to", "go", "NUMBER", "as", "there", "were", "fix", "in", "this", "area", "IIRC", "NUMBER", "How", "be", "you", "add", "things", "to", "your", "vendor", "folder", "be", "you", "use", "a", "particular", "tool", "I", "ll", "figure", "something", "out", "for", "supplying", "pre", "build", "binaries", "on", "github", "and", "or", "bintray", "as", "well", "as", "a", "docker", "container", "NUMBER", "I", "actually", "have", "a", "similar", "problem", "in", "go", "swagger", "itself", "where", "I", "need", "to", "get", "NUMBER", "different", "dependencies", "into", "the", "gopath", "but", "it", "will", "happily", "find", "all", "other", "things", "NUMBER", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "ok", "so", "the", "problem", "goes", "away", "after", "a", "complete", "clean", "solher", "can", "you", "close", "this", "issue", "if", "the", "same", "fix", "works", "for", "you", "I", "believe", "glide", "works", "with", "NUMBER", "vendor", "src", "doesn", "t", "it", "When", "i", "tried", "glide", "I", "had", "all", "kinds", "of", "issue", "so", "I", "start", "use", "gvt", "instead", "but", "ymmv", "you", "can", "start", "with", "an", "input", "file", "NUMBER", "I", "think", "there", "be", "no", "parser", "support", "for", "the", "security", "schemes", "yet", "in", "the", "comment", "parser", "NUMBER", "But", "you", "can", "start", "with", "a", "partial", "swagger", "file", "and", "then", "have", "it", "merge", "the", "discover", "from", "code", "data", "into", "the", "final", "swagger", "document", "NUMBER", "LGTM", "thanks", "NUMBER", "On", "the", "server", "this", "be", "do", "for", "serving", "the", "spec", "up", "at", "swagger", "NUMBER", "json", "Are", "you", "saying", "you", "want", "to", "optionally", "exclude", "a", "spec", "and", "make", "sure", "you", "deploy", "one", "with", "your", "generate", "server", "oops", "wrong", "issue", "number", "in", "commit", "message", "Excellent", "contribution", "NUMBER", "Do", "you", "think", "it", "would", "be", "possible", "to", "defer", "loading", "the", "template", "until", "it", "be", "use", "for", "the", "first", "time", "I", "think", "it", "would", "be", "nice", "if", "you", "ended", "up", "with", "a", "workflow", "where", "you", "just", "have", "to", "provide", "the", "template", "or", "partials", "you", "wanted", "to", "override", "and", "it", "would", "use", "the", "embedded", "ones", "for", "the", "things", "that", "don", "t", "exist", "on", "disk", "NUMBER", "If", "you", "think", "that", "s", "too", "much", "work", "for", "now", "that", "s", "fine", "too", "NUMBER", "LGTM", "Thanks", "I", "figured", "I", "d", "merge", "this", "already", "so", "that", "at", "least", "there", "be", "a", "way", "to", "do", "it", "NUMBER", "And", "then", "it", "can", "be", "improved", "with", "another", "PR", "lgtm", "Excellent", "question", "Personally", "I", "d", "err", "on", "make", "it", "not", "panic", "although", "I", "think", "you", "ll", "find", "a", "comment", "about", "a", "panic", "middleware", "should", "handle", "this", "but", "also", "not", "allowing", "bodies", "in", "DELETE", "NUMBER", "I", "can", "however", "come", "up", "with", "a", "use", "case", "for", "it", "that", "makes", "sense", "NUMBER", "Let", "s", "say", "your", "a", "search", "engine", "of", "some", "sort", "and", "you", "want", "to", "allow", "for", "a", "query", "document", "to", "govern", "the", "selection", "for", "what", "needs", "to", "get", "delete", "NUMBER", "In", "that", "case", "the", "body", "would", "make", "a", "lot", "of", "sense", "NUMBER", "So", "contrary", "to", "what", "I", "want", "out", "of", "principle", "my", "vote", "goes", "to", "option", "NUMBER", "I", "ve", "get", "a", "fix", "in", "this", "PR", "for", "this", "issue", "so", "I", "m", "closing", "this", "PR", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "fwiw", "if", "this", "be", "a", "for", "a", "JSON", "API", "then", "you", "shouldn", "t", "send", "or", "receive", "primitives", "NUMBER", "Only", "and", "be", "valid", "JSON", "objects", "NUMBER", "I", "ll", "look", "into", "fix", "this", "issue", "though", "it", "s", "accepted", "as", "bug", "already", "I", "will", "try", "to", "get", "to", "it", "this", "week", "NUMBER", "the", "template", "should", "not", "render", "the", "validate", "method", "unless", "it", "s", "a", "named", "type", "or", "a", "complex", "object", "with", "properties", "NUMBER", "The", "fix", "will", "have", "to", "go", "here", "somewhere", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "server", "parameter", "NUMBER", "gotmpl", "L", "NUMBER", "L", "NUMBER", "so", "we", "should", "make", "sure", "that", "our", "file", "naming", "doesn", "t", "end", "with", "_test", "I", "suppose", "lgtm", "LGTM", "perhaps", "This", "folder", "uses", "most", "of", "the", "annotations", "LINK", "swagger", "go", "swagger", "tree", "master", "fixture", "goparsing", "petstore", "Q", "NUMBER", "nope", "it", "needs", "to", "be", "declared", "in", "the", "same", "app", "and", "it", "needs", "to", "be", "imported", "so", "that", "goswagger", "can", "find", "it", "by", "following", "imports", "starting", "at", "the", "main", "package", "NUMBER", "Q", "NUMBER", "you", "would", "add", "all", "of", "them", "in", "the", "parameter", "struct", "at", "this", "moment", "in", "the", "case", "of", "parameters", "you", "would", "add", "a", "doc", "comment", "in", "path", "NUMBER", "Take", "a", "look", "at", "some", "of", "the", "generate", "code", "examples", "because", "they", "contain", "all", "the", "know", "annotations", "as", "well", "NUMBER", "Q", "NUMBER", "not", "case", "sensitive", "didn", "t", "want", "to", "have", "debates", "over", "casing", "NUMBER", "Whatever", "looks", "good", "to", "you", "in", "docs", "be", "what", "you", "can", "use", "NUMBER", "only", "when", "it", "s", "use", "in", "a", "discriminator", "IIRC", "NUMBER", "There", "be", "code", "in", "the", "scan", "package", "that", "treats", "nullary", "methods", "as", "properties", "if", "certain", "conditions", "be", "met", "NUMBER", "you", "still", "need", "to", "add", "enlist", "a", "struct", "as", "parameters", "for", "the", "operation", "NUMBER", "LINK", "I", "don", "t", "think", "that", "be", "support", "at", "the", "moment", "shipit", "thanks", "NUMBER", "NUMBER", "shipit", "shipit", "if", "you", "make", "map", "a", "slice", "I", "m", "all", "for", "it", "NUMBER", "That", "retains", "ordering", "yeah", "that", "s", "great", "NUMBER", "You", "I", "have", "a", "package", "call", "swag", "where", "I", "put", "everything", "I", "don", "t", "have", "a", "proper", "home", "for", "NUMBER", "Perhaps", "it", "could", "go", "in", "there", "shipit", "shipit", "NUMBER", "Thanks", "a", "lot", "shipit", "Thanks", "a", "lot", "NUMBER", "shipit", "thanks", "for", "this", "cleaner", "solution", "I", "had", "in", "mind", "NUMBER", "when", "you", "send", "a", "signal", "SIGINT", "SIGQUIT", "to", "shut", "it", "down", "to", "your", "program", "NUMBER", "It", "function", "as", "a", "finalizer", "when", "for", "example", "ctrl", "c", "be", "pressed", "NUMBER", "It", "s", "where", "you", "cleanly", "release", "file", "handles", "etc", "you", "re", "on", "windows", "right", "There", "be", "a", "config", "key", "for", "it", "LINK", "NUMBER", "I", "know", "what", "the", "issue", "be", "but", "the", "fix", "be", "less", "than", "trivial", "NUMBER", "The", "crux", "of", "the", "issue", "be", "that", "the", "spec", "uses", "definitions", "that", "nest", "allOf", "with", "additionalProperties", "and", "discriminators", "and", "the", "spec", "nests", "those", "NUMBER", "Thanks", "for", "this", "spec", "I", "ve", "add", "this", "spec", "to", "my", "canary", "test", "meaning", "on", "every", "CI", "build", "it", "will", "try", "to", "generate", "a", "client", "and", "server", "for", "this", "specification", "and", "compile", "it", "with", "go", "test", "NUMBER", "NUMBER", "it", "would", "be", "great", "if", "you", "could", "send", "a", "PR", "LINK", "swagger", "go", "swagger", "blob", "master", "fixture", "canary", "bitbucket", "NUMBER", "org", "swagger", "NUMBER", "json", "when", "you", "update", "your", "spec", "so", "that", "we", "can", "be", "reasonably", "sure", "that", "we", "don", "t", "break", "bitbucket", "client", "generation", "again", "in", "the", "future", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "fixture", "canary", "bitbucket", "NUMBER", "org", "swagger", "NUMBER", "json", "Take", "a", "look", "here", "for", "easily", "turning", "builtin", "literals", "to", "pointer", "values", "LINK", "swagger", "go", "swagger", "blob", "master", "swag", "convert_types", "NUMBER", "go", "In", "the", "spec", "you", "shared", "application", "json", "and", "application", "json", "charset", "utf", "NUMBER", "be", "the", "same", "thing", "NUMBER", "In", "fact", "when", "a", "mime", "type", "starts", "with", "application", "it", "s", "kind", "of", "expected", "that", "the", "content", "it", "describes", "be", "unicode", "NUMBER", "So", "you", "should", "be", "able", "to", "safely", "drop", "the", "charset", "utf", "NUMBER", "from", "the", "media", "type", "NUMBER", "The", "NUMBER", "case", "be", "an", "invalid", "case", "because", "you", "can", "t", "use", "ref", "in", "that", "position", "according", "to", "the", "swagger", "specification", "json", "schema", "NUMBER", "And", "thanks", "for", "this", "very", "nice", "bug", "report", "btw", "NUMBER", "duplicate", "of", "NUMBER", "and", "I", "can", "t", "reproduce", "this", "with", "the", "code", "on", "master", "fix", "by", "NUMBER", "b", "NUMBER", "f", "NUMBER", "ea", "NUMBER", "d", "NUMBER", "f", "NUMBER", "bfb", "NUMBER", "ffbcb", "NUMBER", "c", "NUMBER", "d", "NUMBER", "ac", "Fully", "support", "the", "auth", "schemes", "by", "swagger", "in", "the", "client", "generation", "NUMBER", "OAuth", "NUMBER", "authentication", "for", "clients", "in", "golang", "be", "most", "probably", "only", "applicable", "to", "these", "grant", "types", "resource", "owner", "password", "client", "credentials", "for", "an", "application", "use", "its", "own", "API", "refresh", "token", "flow", "So", "the", "client", "should", "know", "how", "to", "get", "to", "an", "access", "token", "for", "those", "grant", "types", "and", "the", "client", "needs", "to", "get", "a", "config", "option", "for", "the", "default", "grant", "type", "NUMBER", "In", "addition", "to", "those", "form", "of", "token", "exchanges", "the", "client", "also", "needs", "to", "support", "the", "bearer", "token", "scheme", "NUMBER", "NUMBER", "FA", "be", "out", "of", "scope", "for", "the", "moment", "NUMBER", "implement", "by", "allowing", "people", "to", "provide", "their", "own", "http", "client", "go", "openapi", "runtime", "NUMBER", "The", "spec", "you", "linked", "doesn", "t", "actually", "validate", "git", "master", "swagger", "validate", "LINK", "The", "swagger", "spec", "at", "LINK", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "object", "has", "no", "key", "integer", "So", "in", "that", "spec", "I", "see", "a", "bunch", "of", "ref", "integers", "that", "shouldn", "t", "be", "the", "case", "NUMBER", "Those", "should", "be", "types", "not", "refs", "NUMBER", "Once", "you", "include", "a", "ref", "in", "a", "json", "object", "the", "rest", "of", "the", "json", "object", "has", "to", "be", "ignored", "those", "be", "the", "json", "schema", "rules", "NUMBER", "Currently", "my", "validator", "isn", "t", "super", "fast", "but", "you", "re", "right", "I", "should", "make", "it", "validate", "before", "generating", "and", "let", "people", "opt", "out", "by", "specify", "skip", "validation", "The", "main", "reason", "for", "a", "spec", "needing", "to", "be", "valid", "be", "that", "there", "be", "a", "some", "rules", "that", "have", "to", "be", "followed", "and", "having", "a", "valid", "spec", "ensures", "that", "those", "be", "consistent", "NUMBER", "So", "in", "terms", "of", "figuring", "out", "what", "be", "wrong", "I", "d", "say", "it", "starts", "with", "a", "valid", "spec", "doc", "NUMBER", "generate", "ffjson", "code", "for", "structs", "where", "its", "possible", "Add", "support", "for", "use", "instead", "of", "net", "http", "LINK", "not", "a", "priority", "because", "it", "essentially", "means", "a", "rewrite", "of", "runtime", "middleware", "to", "accomodate", "the", "request", "response", "of", "fasthttp", "NUMBER", "Other", "than", "that", "there", "be", "already", "a", "compatibility", "layer", "in", "fasthttp", "which", "allows", "it", "to", "serve", "plain", "http", "NUMBER", "Handler", "which", "we", "expose", "already", "thanks", "NUMBER", "There", "be", "an", "example", "at", "the", "bottom", "of", "this", "page", "LINK", "when", "a", "value", "be", "marked", "allowEmptyValue", "then", "the", "key", "should", "be", "sent", "NUMBER", "It", "be", "a", "hint", "for", "nullability", "for", "some", "applications", "the", "absence", "of", "a", "key", "be", "treated", "different", "from", "the", "absence", "of", "a", "value", "NUMBER", "So", "be", "the", "issue", "you", "re", "describing", "here", "with", "an", "allowEmptyValue", "of", "true", "or", "false", "then", "the", "code", "that", "be", "generate", "be", "the", "code", "that", "it", "should", "generate", "NUMBER", "If", "you", "don", "t", "want", "it", "to", "add", "the", "key", "to", "the", "request", "the", "spec", "should", "be", "defined", "with", "not", "required", "and", "allowEmptyValue", "of", "false", "NUMBER", "can", "this", "be", "close", "going", "with", "yes", "because", "of", "crickets", "thanks", "aleksandr", "vin", "NUMBER", "Thanks", "NUMBER", "yeah", "you", "re", "right", "NUMBER", "I", "ll", "remove", "it", "again", "forgot", "I", "went", "with", "Nr", "instead", "NUMBER", "I", "wanted", "to", "translate", "things", "like", "NUMBER", "x", "NUMBER", "to", "SixteenBySixteen", "and", "NUMBER", "NUMBER", "to", "SixteenAndSixteen", "but", "decided", "too", "much", "clever", "I", "want", "to", "have", "a", "first", "release", "out", "by", "january", "NUMBER", "Now", "this", "be", "largely", "a", "volunteering", "effort", "so", "I", "don", "t", "want", "to", "commit", "to", "an", "actual", "date", "for", "as", "long", "as", "there", "aren", "t", "many", "people", "contribute", "to", "this", "repository", "NUMBER", "It", "says", "the", "project", "be", "sponsored", "by", "vmware", "but", "that", "mostly", "means", "that", "I", "get", "to", "work", "on", "it", "from", "time", "to", "time", "during", "work", "hours", "NUMBER", "I", "have", "other", "responsibilities", "there", "too", "so", "it", "s", "not", "like", "they", "let", "me", "work", "in", "it", "full", "time", "NUMBER", "I", "ve", "made", "NUMBER", "initial", "milestones", "for", "this", "project", "and", "I", "m", "still", "work", "on", "the", "first", "one", "which", "be", "arguably", "the", "hardest", "one", "because", "it", "needs", "to", "get", "the", "spec", "implementation", "ready", "NUMBER", "At", "this", "point", "the", "API", "be", "largely", "stable", "there", "be", "a", "few", "things", "to", "iron", "out", "in", "models", "code", "generation", "and", "as", "you", "re", "aware", "certain", "things", "be", "passing", "validation", "and", "they", "don", "t", "necessarily", "have", "to", "NUMBER", "So", "in", "short", "I", "m", "looking", "for", "help", "the", "more", "help", "I", "get", "the", "quicker", "the", "release", "come", "NUMBER", "Submitting", "bug", "be", "already", "great", "help", "NUMBER", "LINK", "swagger", "go", "swagger", "milestones", "With", "the", "exception", "of", "showstoppers", "the", "issue", "for", "the", "first", "release", "milestone", "be", "frozen", "NUMBER", "There", "be", "binary", "release", "available", "now", "NUMBER", "You", "can", "get", "swagger", "in", "a", "variety", "of", "ways", "without", "having", "to", "build", "it", "from", "source", "NUMBER", "NUMBER", "Thanks", "a", "lot", "contributes", "to", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "There", "be", "probably", "a", "few", "more", "issue", "for", "run", "this", "on", "windows", "The", "default", "value", "in", "this", "spec", "should", "be", "an", "object", "not", "a", "string", "NUMBER", "The", "error", "message", "could", "be", "better", "though", "NUMBER", "be", "this", "an", "issue", "because", "because", "each", "PricingComponent", "implementation", "will", "have", "its", "own", "MarshalJSON", "and", "UnmarshalJSON", "implementation", "NUMBER", "have", "you", "seen", "it", "actually", "output", "bad", "data", "this", "be", "a", "new", "issue", "or", "at", "least", "it", "s", "different", "from", "the", "one", "that", "s", "report", "NUMBER", "But", "it", "be", "a", "bug", "can", "you", "add", "a", "test", "in", "the", "type", "resolvers", "test", "that", "makes", "sure", "the", "isNullable", "method", "works", "for", "both", "keys", "Mostly", "to", "have", "this", "behavior", "describe", "by", "test", "so", "that", "people", "don", "t", "accidentally", "delete", "it", "in", "the", "future", "as", "part", "of", "unrelated", "work", "NUMBER", "Add", "HTTP", "NUMBER", "support", "This", "probably", "has", "several", "parts", "to", "it", "ensure", "that", "a", "http", "NUMBER", "style", "rest", "API", "can", "be", "served", "allow", "the", "client", "to", "use", "streaming", "so", "that", "connections", "be", "shared", "efficiently", "extend", "the", "spec", "with", "the", "ability", "to", "describe", "a", "series", "of", "possible", "push", "message", "see", "NUMBER", "add", "push", "strategies", "yeah", "that", "would", "be", "the", "client", "generate", "or", "at", "least", "the", "runtime", "for", "the", "generate", "client", "NUMBER", "k", "will", "close", "this", "ticket", "then", "Thanks", "for", "the", "info", "Add", "a", "diff", "command", "that", "can", "be", "use", "to", "inspect", "differences", "between", "NUMBER", "swagger", "specs", "NUMBER", "LINK", "diff", "yes", "it", "be", "of", "great", "interest", "to", "me", "Add", "support", "for", "server", "sent", "events", "This", "include", "a", "proposal", "to", "swagger", "spec", "repo", "for", "an", "extension", "NUMBER", "Server", "sent", "events", "be", "a", "specific", "mime", "type", "currently", "in", "swagger", "NUMBER", "there", "be", "no", "support", "for", "different", "responses", "based", "on", "request", "criteria", "like", "content", "type", "NUMBER", "In", "this", "proposal", "the", "idea", "be", "that", "the", "only", "possible", "response", "from", "that", "endpoint", "be", "a", "sse", "eventstream", "yaml", "paths", "get", "produces", "text", "event", "stream", "responses", "default", "description", "example", "of", "defining", "events", "for", "sse", "schema", "type", "object", "x", "events", "add", "type", "object", "properties", "message", "type", "string", "createdAt", "type", "string", "format", "date", "time", "update", "type", "object", "properties", "previous", "type", "string", "newValue", "type", "string", "updatedAt", "type", "string", "format", "date", "time", "relate", "LINK", "api", "swagger", "spec", "issue", "NUMBER", "look", "into", "dynamically", "build", "a", "protobuf", "message", "add", "generators", "as", "custom", "serializers", "I", "think", "it", "would", "mostly", "mean", "get", "a", "consumer", "and", "producer", "for", "protobuf", "NUMBER", "json", "LINK", "swagger", "go", "swagger", "blob", "fada", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "fcfb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "httpkit", "json", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "blob", "fada", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "fcfb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "generator", "support", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "And", "add", "struct", "tags", "to", "the", "field", "LINK", "swagger", "go", "swagger", "blob", "fada", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "fcfb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "generator", "template", "structfield", "NUMBER", "gotmpl", "L", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "fada", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "fcfb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "generator", "template", "schemabody", "NUMBER", "gotmpl", "L", "NUMBER", "There", "be", "cases", "where", "you", "d", "have", "to", "provide", "a", "custom", "serializer", "allOf", "you", "can", "generate", "anonymous", "structs", "etc", "to", "get", "the", "right", "protobuf", "out", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "fada", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "fcfb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "generator", "template", "tupleserializer", "NUMBER", "gotmpl", "LINK", "swagger", "go", "swagger", "blob", "fada", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "fcfb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "generator", "template", "additionalpropertiesserializer", "NUMBER", "gotmpl", "it", "already", "works", "this", "way", "NUMBER", "There", "be", "no", "param", "type", "json", "but", "the", "anntotations", "you", "provide", "should", "in", "fact", "work", "in", "that", "way", "NUMBER", "At", "this", "moment", "I", "m", "inclinded", "to", "say", "that", "this", "be", "an", "optimization", "with", "pretty", "low", "ROI", "NUMBER", "But", "I", "ll", "leave", "the", "ticket", "open", "and", "if", "more", "people", "want", "it", "they", "should", "put", "their", "NUMBER", "here", "NUMBER", "It", "was", "never", "spelled", "out", "in", "this", "thread", "why", "it", "be", "the", "way", "it", "be", "so", "here", "it", "goes", "The", "reason", "a", "body", "struct", "be", "wrapped", "atm", "be", "because", "for", "swagger", "a", "response", "be", "headers", "body", "and", "so", "my", "scanner", "wants", "to", "preserve", "that", "behavior", "NUMBER", "I", "wouldn", "t", "refuse", "a", "PR", "that", "address", "this", "through", "a", "swagger", "bodyResponse", "annotation", "instead", "of", "swagger", "model", "or", "swagger", "response", "it", "might", "be", "nice", "to", "be", "able", "to", "generate", "a", "CLI", "from", "a", "swagger", "spec", "NUMBER", "it", "could", "use", "the", "same", "syntax", "as", "httpie", "for", "specify", "params", "in", "different", "positions", "NUMBER", "Perhaps", "it", "can", "make", "use", "of", "pygments", "when", "present", "to", "colorize", "the", "output", "for", "a", "better", "experience", "NUMBER", "The", "generator", "could", "also", "generate", "a", "bash", "and", "zsh", "completion", "document", "for", "better", "usability", "there", "be", "also", "this", "LINK", "obviously", "it", "s", "not", "go", "and", "not", "as", "semantically", "nice", "but", "it", "s", "an", "option", "to", "get", "a", "CLI", "right", "now", "This", "ticket", "be", "labeled", "with", "raspberry", "pi", "NUMBER", "bounty", "NUMBER", "Solve", "the", "ticket", "and", "I", "ll", "send", "you", "a", "pi", "I", "would", "say", "it", "implement", "what", "you", "asked", "for", "NUMBER", "it", "has", "some", "logic", "for", "deciding", "when", "to", "turn", "a", "value", "into", "pointer", "NUMBER", "This", "be", "represented", "by", "the", "IsNullable", "property", "NUMBER", "it", "actually", "looks", "at", "the", "defined", "validations", "to", "make", "this", "decision", "NUMBER", "So", "the", "value", "of", "minLength", "etc", "affects", "it", "NUMBER", "There", "be", "NUMBER", "ways", "to", "set", "the", "host", "and", "you", "can", "choose", "which", "one", "you", "like", "best", "NUMBER", "The", "first", "one", "as", "you", "discover", "be", "altering", "the", "swagger", "spec", "document", "NUMBER", "The", "second", "one", "be", "go", "apiclient", "NUMBER", "Default", "NUMBER", "Transport", "NUMBER", "Host", "config", "NUMBER", "Host", "I", "m", "sorry", "that", "doesn", "t", "work", "it", "s", "this", "go", "import", "httptransport", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "client", "apiclient", "github", "NUMBER", "com", "jawspeak", "go", "stash", "restclient", "client", "func", "ConfigHost", "do", "stuff", "that", "reads", "the", "json", "config", "load", "the", "swagger", "spec", "from", "embedded", "document", "doc", "err", "spec", "NUMBER", "New", "apiclient", "NUMBER", "SwaggerJSON", "if", "err", "nil", "log", "NUMBER", "Fatal", "err", "transport", "httptransport", "NUMBER", "New", "doc", "transport", "NUMBER", "Host", "config", "NUMBER", "Host", "apiclient", "NUMBER", "Default", "NUMBER", "SetTransport", "transport", "I", "add", "the", "config", "options", "etc", "to", "the", "documentation", "page", "of", "the", "client", "on", "the", "site", "too", "I", "agree", "that", "this", "be", "a", "good", "thing", "to", "have", "at", "least", "a", "way", "to", "order", "that", "s", "not", "alphabetical", "NUMBER", "But", "for", "now", "the", "implementation", "uses", "a", "map", "and", "there", "be", "no", "weight", "option", "defined", "yet", "so", "alphabetical", "be", "the", "only", "way", "to", "get", "a", "stable", "sort", "and", "stable", "diffs", "across", "generations", "I", "think", "it", "would", "require", "add", "a", "vendor", "extension", "x", "weight", "or", "change", "the", "object", "model", "for", "swagger", "to", "not", "use", "maps", "and", "use", "slices", "with", "some", "convenience", "methods", "Add", "a", "command", "that", "lets", "people", "know", "when", "there", "be", "an", "update", "i", "mean", "you", "will", "be", "able", "to", "do", "swagger", "check", "update", "and", "then", "it", "will", "check", "the", "value", "of", "the", "current", "binary", "version", "against", "the", "value", "of", "the", "latest", "version", "know", "on", "github", "and", "print", "either", "up", "to", "date", "carry", "on", "or", "out", "of", "date", "you", "can", "run", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "NUMBER", "to", "update", "to", "the", "latest", "version", "NUMBER", "This", "seems", "like", "a", "nice", "way", "to", "deal", "with", "it", "LINK", "selfupdate", "this", "was", "implement", "in", "the", "NUMBER", "x", "version", "look", "into", "use", "shippable", "and", "publishing", "a", "set", "of", "docker", "images", "that", "make", "work", "with", "swagger", "easier", "circle", "ci", "now", "support", "docker", "images", "NUMBER", "not", "moving", "to", "shippable", "it", "means", "that", "when", "you", "generate", "a", "server", "you", "must", "do", "this", "in", "a", "location", "inside", "the", "GOPATH", "LINK", "NUMBER", "go", "swagger", "uses", "the", "go", "build", "infrastructure", "so", "it", "needs", "to", "be", "able", "to", "resolve", "dependencies", "etc", "NUMBER", "if", "you", "put", "your", "code", "in", "the", "configure_XXX", "NUMBER", "go", "file", "then", "it", "won", "t", "get", "overwritten", "to", "use", "the", "client", "yes", "you", "need", "your", "own", "main", "The", "code", "usage", "be", "documented", "a", "bit", "here", "please", "let", "me", "know", "of", "any", "difficulties", "you", "encounter", "with", "that", "LINK", "swagger", "NUMBER", "github", "NUMBER", "io", "generate", "client", "for", "your", "own", "sanity", "please", "join", "LINK", "for", "a", "client", "for", "a", "todo", "list", "you", "want", "to", "use", "the", "client", "facade", "which", "be", "going", "to", "be", "in", "the", "NUMBER", "client", "package", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "todo", "list", "client", "to_do_list_client", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "There", "you", "have", "NUMBER", "things", "that", "be", "immediately", "useful", "NUMBER", "If", "you", "don", "t", "have", "to", "change", "or", "configure", "a", "thing", "then", "you", "can", "go", "with", "the", "Default", "one", "no", "setup", "be", "required", "NUMBER", "If", "you", "re", "sure", "you", "re", "going", "to", "work", "with", "HTTP", "atm", "I", "m", "guessing", "this", "be", "NUMBER", "of", "the", "cases", "then", "the", "NewHTTPClient", "might", "work", "fine", "for", "you", "NUMBER", "if", "you", "need", "more", "customization", "then", "you", "be", "required", "to", "pass", "in", "a", "transport", "and", "so", "on", "NUMBER", "This", "be", "mostly", "because", "after", "the", "first", "release", "it", "be", "get", "different", "transports", "and", "I", "want", "them", "to", "be", "a", "matter", "of", "config", "NUMBER", "fix", "by", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "a", "NUMBER", "e", "NUMBER", "fbdcfc", "NUMBER", "f", "The", "swagger", "annotation", "comments", "be", "only", "detected", "at", "the", "beginning", "of", "a", "line", "NUMBER", "Strictly", "speaking", "the", "swagger", "model", "annotation", "isn", "t", "needed", "unless", "you", "want", "to", "rename", "model", "to", "something", "with", "lower", "case", "or", "something", "else", "NUMBER", "for", "the", "response", "part", "I", "think", "you", "need", "a", "little", "bit", "more", "glue", "NUMBER", "go", "package", "models", "Entity", "swagger", "model", "type", "Entity", "struct", "arangolite", "NUMBER", "Document", "Created", "time", "NUMBER", "Time", "json", "created", "omitempty", "LastUpdated", "time", "NUMBER", "Time", "json", "lastUpdated", "omitempty", "Type", "string", "json", "type", "omitempty", "go", "package", "controllers", "swagger", "response", "listEntityResponse", "type", "listEntityResponse", "struct", "in", "body", "Payload", "Entity", "Find", "swagger", "route", "GET", "entities", "find", "entities", "Responses", "NUMBER", "listEntityResponse", "func", "c", "EntitiesCtrl", "Find", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "userID", "err", "c", "NUMBER", "pg", "NUMBER", "GetUserID", "r", "if", "err", "nil", "c", "NUMBER", "r", "NUMBER", "JSONError", "w", "http", "NUMBER", "StatusUnauthorized", "errs", "NUMBER", "API", "NUMBER", "Internal", "err", "return", "filter", "err", "c", "NUMBER", "pg", "NUMBER", "GetFilter", "r", "if", "err", "nil", "c", "NUMBER", "r", "NUMBER", "JSONError", "w", "http", "NUMBER", "StatusBadRequest", "errs", "NUMBER", "API", "NUMBER", "FilterDecoding", "err", "return", "entities", "err", "c", "NUMBER", "i", "NUMBER", "Find", "userID", "filter", "if", "err", "nil", "switch", "err", "NUMBER", "type", "case", "errs", "NUMBER", "ErrInvalidFilter", "c", "NUMBER", "r", "NUMBER", "JSONError", "w", "NUMBER", "errs", "NUMBER", "API", "NUMBER", "InvalidFilter", "err", "default", "c", "NUMBER", "r", "NUMBER", "JSONError", "w", "http", "NUMBER", "StatusInternalServerError", "errs", "NUMBER", "API", "NUMBER", "Internal", "err", "return", "c", "NUMBER", "r", "NUMBER", "JSON", "w", "http", "NUMBER", "StatusOK", "entities", "By", "forcing", "you", "to", "use", "go", "code", "to", "document", "your", "API", "you", "ensure", "that", "if", "you", "were", "to", "rename", "your", "models", "NUMBER", "Entity", "struct", "compilation", "of", "your", "API", "would", "fail", "and", "your", "documentation", "be", "keep", "up", "to", "date", "wrt", "to", "type", "information", "NUMBER", "So", "I", "didn", "t", "want", "to", "reinvent", "the", "type", "system", "and", "I", "think", "ultimately", "it", "leads", "to", "less", "work", "than", "more", "work", "NUMBER", "I", "also", "don", "t", "think", "of", "documentation", "as", "just", "be", "comments", "documentation", "be", "what", "it", "be", "ultimately", "rendered", "not", "how", "you", "define", "it", "NUMBER", "eg", "NUMBER", "go", "s", "example", "function", "By", "allowing", "you", "to", "specify", "the", "doc", "comment", "you", "tried", "to", "use", "first", "we", "d", "have", "introduce", "more", "maintenance", "burden", "than", "be", "absolutely", "required", "and", "we", "d", "have", "made", "the", "go", "swagger", "code", "even", "more", "complex", "for", "a", "feature", "that", "s", "one", "of", "the", "major", "features", "of", "the", "go", "language", "static", "type", "checking", "NUMBER", "In", "swagger", "a", "response", "be", "always", "headers", "body", "with", "an", "optional", "status", "code", "NUMBER", "If", "you", "choose", "to", "not", "define", "any", "headers", "that", "s", "fine", "but", "it", "just", "means", "there", "be", "no", "response", "headers", "as", "part", "of", "the", "contract", "your", "service", "makes", "with", "the", "world", "NUMBER", "NUMBER", "for", "weirdness", "on", "this", "one", "This", "has", "to", "do", "with", "operations", "that", "be", "currently", "lacking", "an", "operation", "ID", "NUMBER", "Unfortunately", "swagger", "defines", "those", "as", "optional", "but", "it", "should", "do", "better", "name", "mangling", "I", "can", "t", "fix", "this", "because", "the", "reason", "for", "this", "be", "that", "there", "be", "duplicate", "operationIds", "defined", "NUMBER", "They", "have", "to", "be", "globally", "unique", "to", "the", "specification", "not", "just", "to", "the", "tag", "NUMBER", "from", "the", "swagger", "spec", "LINK", "api", "swagger", "spec", "blob", "master", "version", "NUMBER", "md", "fix", "field", "NUMBER", "for", "operationId", "Unique", "string", "use", "to", "identify", "the", "operation", "NUMBER", "The", "id", "MUST", "be", "unique", "among", "all", "operations", "describe", "in", "the", "API", "NUMBER", "Tools", "and", "libraries", "MAY", "use", "the", "operationId", "to", "uniquely", "identify", "an", "operation", "therefore", "it", "be", "recommended", "to", "follow", "common", "programming", "naming", "conventions", "NUMBER", "this", "issue", "has", "some", "more", "context", "about", "it", "LINK", "api", "swagger", "spec", "issue", "NUMBER", "generate", "test", "for", "generate", "code", "based", "with", "data", "generators", "from", "NUMBER", "This", "ticket", "be", "labeled", "with", "raspberry", "pi", "NUMBER", "bounty", "NUMBER", "Solve", "the", "ticket", "and", "I", "ll", "send", "you", "a", "pi", "relate", "NUMBER", "I", "guess", "they", "only", "differ", "on", "what", "the", "assertions", "be", "that", "be", "be", "made", "generate", "quasi", "meaningful", "random", "data", "for", "parameters", "models", "and", "headers", "NUMBER", "LINK", "klippenstein", "goregen", "LINK", "fuzz", "LINK", "LINK", "randomdata", "LINK", "There", "be", "NUMBER", "places", "where", "this", "be", "useful", "NUMBER", "Scenario", "NUMBER", "and", "that", "s", "the", "one", "we", "re", "after", "with", "this", "ticket", "You", "have", "several", "teams", "NUMBER", "html", "NUMBER", "NUMBER", "ios", "NUMBER", "android", "NUMBER", "backend", "You", "start", "a", "new", "project", "and", "you", "need", "to", "stub", "data", "instead", "of", "the", "backend", "team", "be", "a", "bottleneck", "NUMBER", "people", "can", "plug", "in", "the", "handlers", "that", "generate", "quasi", "meaningful", "random", "data", "and", "they", "can", "build", "their", "UI", "s", "with", "not", "every", "text", "field", "looking", "like", "crap", "NUMBER", "You", "want", "to", "play", "with", "an", "API", "but", "locally", "you", "get", "the", "swagger", "spec", "and", "genreate", "a", "stub", "API", "NUMBER", "This", "ticket", "be", "labeled", "with", "raspberry", "pi", "NUMBER", "bounty", "NUMBER", "Solve", "the", "ticket", "and", "I", "ll", "send", "you", "a", "pi", "casualjim", "just", "to", "keep", "trace", "of", "our", "discussion", "on", "slack", "we", "discussed", "the", "possibility", "to", "build", "on", "top", "of", "this", "LINK", "_meqa", "I", "do", "not", "compete", "for", "the", "PI", "if", "the", "offer", "still", "stands", "NUMBER", "but", "I", "ll", "have", "a", "thorough", "look", "at", "it", "in", "the", "forthcoming", "weeks", "since", "API", "excercising", "be", "an", "essential", "piece", "in", "my", "own", "works", "NUMBER", "Just", "to", "start", "with", "I", "would", "suggest", "the", "following", "requirements", "make", "it", "a", "standalone", "project", "with", "as", "small", "footprint", "as", "possible", "on", "the", "go", "swagger", "itself", "including", "dependencies", "and", "vendoring", "as", "such", "it", "could", "be", "just", "a", "set", "of", "custom", "template", "on", "top", "of", "swagger", "the", "meqa", "stuff", "should", "be", "able", "to", "exercise", "end", "to", "end", "as", "well", "as", "unit", "test", "different", "layers", "of", "the", "API", "server", "should", "be", "pluggable", "in", "our", "CI", "to", "exercise", "all", "provide", "examples", "not", "be", "on", "the", "critical", "path", "to", "go", "swagger", "V", "NUMBER", "release", "I", "ll", "edit", "this", "post", "when", "more", "ideas", "come", "Looking", "forward", "to", "your", "insight", "NUMBER", "Fred", "Currently", "this", "uses", "gorilla", "s", "context", "to", "provide", "storage", "for", "request", "specific", "information", "NUMBER", "Explore", "use", "net", "NUMBER", "Context", "and", "a", "deadline", "for", "this", "instead", "NUMBER", "it", "s", "this", "package", "LINK", "I", "think", "that", "should", "be", "fix", "now", "made", "it", "reference", "with", "https", "sorry", "about", "that", "I", "can", "t", "reproduce", "this", "shellsession", "ivan", "aether", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "git", "issue", "NUMBER", "docker", "pull", "golang", "NUMBER", "Status", "Downloaded", "newer", "image", "for", "golang", "latest", "ivan", "aether", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "git", "issue", "NUMBER", "docker", "run", "rm", "it", "golang", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "echo", "NUMBER", "I", "ve", "replaced", "the", "submodules", "with", "subtree", "integrations", "and", "things", "seem", "to", "work", "now", "NUMBER", "It", "appears", "to", "be", "unhappy", "because", "the", "submodules", "have", "a", "NUMBER", "git", "file", "perhaps", "it", "s", "this", "thing", "LINK", "this", "might", "be", "a", "duplicate", "of", "NUMBER", "I", "m", "going", "to", "close", "this", "issue", "because", "the", "information", "from", "these", "commit", "have", "be", "add", "to", "the", "master", "branch", "here", "NUMBER", "thanks", "would", "it", "be", "possible", "to", "show", "me", "the", "spec", "this", "might", "be", "because", "of", "lack", "of", "a", "space", "between", "the", "colon", "after", "a", "key", "and", "the", "value", "results", "in", "the", "error", "yaml", "definitions", "error", "type", "object", "required", "message", "properties", "code", "type", "integer", "format", "int", "NUMBER", "message", "type", "string", "correct", "yaml", "definitions", "error", "type", "object", "required", "message", "properties", "code", "type", "integer", "format", "int", "NUMBER", "message", "type", "string", "considering", "there", "was", "no", "answer", "for", "this", "long", "I", "m", "going", "to", "close", "this", "and", "assume", "there", "was", "a", "resolution", "NUMBER", "run", "the", "generation", "process", "with", "DEBUG", "NUMBER", "SWAGGER_DEBUG", "NUMBER", "the", "problem", "with", "line", "numbers", "and", "so", "on", "be", "not", "the", "problem", "in", "go", "swagger", "it", "s", "with", "the", "stdlib", "json", "and", "go", "yaml", "implementations", "NUMBER", "if", "you", "re", "able", "to", "share", "the", "spec", "I", "may", "be", "able", "to", "help", "you", "out", "but", "for", "now", "we", "have", "no", "control", "over", "linenumbers", "and", "character", "positions", "because", "we", "be", "reliant", "on", "the", "way", "go", "s", "stdlib", "json", "library", "works", "NUMBER", "I", "m", "open", "to", "any", "suggestions", "on", "make", "this", "better", "because", "I", "know", "it", "s", "a", "problem", "you", "mean", "like", "after", "generating", "how", "to", "use", "it", "to", "make", "calls", "to", "the", "API", "you", "generate", "a", "client", "for", "I", "have", "as", "top", "priority", "now", "write", "a", "documentation", "site", "I", "will", "do", "this", "this", "weekend", "NUMBER", "I", "ll", "try", "to", "write", "a", "sample", "for", "it", "in", "a", "couple", "of", "hours", "once", "the", "day", "job", "ends", "you", "want", "to", "pass", "in", "this", "guy", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "The", "idea", "be", "that", "there", "be", "other", "transports", "later", "on", "like", "nanomsg", "zeromq", "websocket", "and", "so", "on", "NUMBER", "example", "be", "here", "LINK", "swagger", "NUMBER", "github", "NUMBER", "io", "generate", "client", "Doesn", "t", "seem", "to", "scan", "go", "swagger", "response", "resp", "type", "Resp", "struct", "User", "User", "It", "s", "totally", "possible", "that", "this", "be", "better", "handle", "through", "documenting", "usage", "but", "add", "a", "test", "to", "verify", "the", "right", "thing", "happens", "with", "the", "right", "annotations", "if", "I", "follow", "the", "package", "then", "the", "makeplans", "NUMBER", "Booking", "model", "lives", "in", "a", "different", "repo", "be", "that", "right", "And", "one", "be", "a", "git", "repo", "and", "the", "other", "a", "mercurial", "one", "in", "that", "gist", "there", "be", "no", "mention", "of", "booking", "responses", "besides", "the", "mention", "in", "the", "route", "comment", "NUMBER", "I", "m", "assuming", "in", "the", "actual", "code", "there", "be", "a", "thing", "like", "go", "type", "BookingResponses", "BookingResponse", "In", "the", "end", "the", "generate", "spec", "has", "a", "faulty", "ref", "where", "it", "uses", "the", "model", "instead", "of", "the", "response", "as", "ref", "NUMBER", "Manual", "editing", "fix", "this", "diff", "BookingResponse", "description", "BookingResponse", "represents", "a", "scheduled", "appointment", "schema", "ref", "definitions", "Booking", "ref", "definitions", "BookingResponse", "I", "can", "t", "reproduce", "this", "problem", "NUMBER", "for", "the", "code", "in", "that", "gist", "I", "get", "the", "following", "spec", "NUMBER", "json", "consumes", "application", "json", "produces", "application", "json", "schemes", "https", "swagger", "NUMBER", "info", "description", "the", "purpose", "of", "this", "application", "be", "to", "provide", "an", "application", "nthat", "be", "use", "plain", "go", "code", "to", "define", "an", "API", "title", "API", "NUMBER", "version", "NUMBER", "host", "localhost", "paths", "admin", "bookings", "get", "consumes", "application", "json", "produces", "application", "json", "schemes", "http", "https", "tags", "booking", "summary", "Bookings", "lists", "all", "the", "appointments", "that", "have", "be", "made", "on", "the", "site", "NUMBER", "operationId", "Bookings", "responses", "NUMBER", "ref", "responses", "BookingResponse", "definitions", "Booking", "description", "A", "Booking", "in", "the", "system", "type", "object", "required", "id", "Subject", "properties", "Subject", "description", "Subject", "the", "subject", "of", "this", "booking", "type", "string", "id", "description", "ID", "the", "id", "of", "the", "booking", "type", "integer", "format", "int", "NUMBER", "x", "go", "name", "ID", "readOnly", "true", "x", "go", "package", "github", "NUMBER", "com", "go", "swagger", "scan", "repo", "boundary", "makeplans", "responses", "BookingResponse", "description", "BookingResponse", "represents", "a", "scheduled", "appointment", "schema", "ref", "definitions", "Booking", "thanks", "for", "the", "effort", "NUMBER", "provide", "as", "part", "a", "comment", "on", "issue", "NUMBER", "it", "incorrectly", "detects", "this", "as", "an", "object", "with", "additional", "properties", "NUMBER", "yaml", "RunParameters", "additionalProperties", "false", "type", "object", "description", "Optional", "run", "parameters", "for", "activating", "the", "build", "trigger", "properties", "branch_name", "type", "string", "description", "SCM", "only", "If", "specified", "the", "name", "of", "the", "branch", "to", "build", "NUMBER", "refs", "type", "object", "description", "SCM", "Only", "If", "specified", "the", "ref", "to", "build", "NUMBER", "commit_sha", "type", "string", "description", "Custom", "Only", "If", "specified", "the", "ref", "SHA", "NUMBER", "use", "to", "checkout", "a", "git", "repository", "NUMBER", "I", "m", "going", "to", "keep", "it", "there", "this", "be", "come", "from", "a", "spec", "that", "be", "in", "use", "in", "the", "actual", "world", "NUMBER", "The", "JSON", "Schema", "definition", "of", "the", "swagger", "spec", "allows", "it", "should", "that", "change", "I", "ll", "update", "support", "for", "it", "too", "NUMBER", "LINK", "api", "swagger", "spec", "blob", "master", "schemas", "v", "NUMBER", "schema", "NUMBER", "json", "L", "NUMBER", "L", "NUMBER", "thanks", "for", "this", "spec", "it", "has", "expose", "some", "other", "issue", "with", "anonymous", "objects", "and", "their", "validations", "NUMBER", "I", "ve", "push", "the", "fix", "for", "this", "particular", "issue", "but", "it", "will", "still", "generate", "code", "that", "won", "t", "compile", "at", "this", "stage", "NUMBER", "If", "it", "s", "urgent", "you", "can", "make", "some", "edits", "manually", "for", "NewProtoType", "i", "had", "to", "add", "an", "enum", "validation", "go", "package", "models", "This", "file", "was", "generate", "by", "the", "swagger", "tool", "NUMBER", "Editing", "this", "file", "might", "prove", "futile", "when", "you", "re", "run", "the", "swagger", "generate", "command", "import", "encoding", "json", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "error", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "validate", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "Description", "of", "a", "new", "prototype", "swagger", "model", "NewPrototype", "type", "NewPrototype", "struct", "Repository", "creating", "user", "to", "whom", "the", "rule", "should", "apply", "ActivatingUser", "struct", "The", "username", "for", "the", "activating_user", "Required", "true", "Name", "string", "json", "name", "json", "activating_user", "omitempty", "Information", "about", "the", "user", "or", "team", "to", "which", "the", "rule", "grants", "access", "Required", "true", "Delegate", "struct", "Whether", "the", "delegate", "be", "a", "user", "or", "a", "team", "Required", "true", "Kind", "string", "json", "kind", "The", "name", "for", "the", "delegate", "team", "or", "user", "Required", "true", "Name", "string", "json", "name", "json", "delegate", "Role", "that", "should", "be", "applied", "to", "the", "delegate", "Required", "true", "Role", "string", "json", "role", "Validate", "validates", "this", "new", "prototype", "func", "m", "NewPrototype", "Validate", "formats", "strfmt", "NUMBER", "Registry", "error", "var", "res", "error", "if", "err", "m", "NUMBER", "validateActivatingUser", "formats", "err", "nil", "res", "append", "res", "err", "if", "err", "m", "NUMBER", "validateDelegate", "formats", "err", "nil", "res", "append", "res", "err", "if", "err", "m", "NUMBER", "validateRole", "formats", "err", "nil", "res", "append", "res", "err", "if", "len", "res", "NUMBER", "return", "error", "NUMBER", "CompositeValidationError", "res", "NUMBER", "return", "nil", "func", "m", "NewPrototype", "validateActivatingUser", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Required", "activating_user", "NUMBER", "name", "body", "string", "m", "NUMBER", "ActivatingUser", "NUMBER", "Name", "err", "nil", "return", "err", "return", "nil", "func", "m", "NewPrototype", "validateDelegate", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Required", "delegate", "NUMBER", "kind", "body", "string", "m", "NUMBER", "Delegate", "NUMBER", "Kind", "err", "nil", "return", "err", "if", "err", "m", "NUMBER", "validateKindEnum", "delegate", "NUMBER", "kind", "body", "m", "NUMBER", "Delegate", "NUMBER", "Kind", "err", "nil", "return", "err", "if", "err", "validate", "NUMBER", "Required", "delegate", "NUMBER", "name", "body", "string", "m", "NUMBER", "Delegate", "NUMBER", "Name", "err", "nil", "return", "err", "return", "nil", "var", "newPrototypeRoleEnum", "interface", "func", "m", "NewPrototype", "validateRoleEnum", "path", "location", "string", "value", "string", "error", "if", "newPrototypeRoleEnum", "nil", "var", "res", "string", "if", "err", "json", "NUMBER", "Unmarshal", "byte", "read", "write", "admin", "res", "err", "nil", "return", "err", "for", "_", "v", "range", "res", "newPrototypeRoleEnum", "append", "newPrototypeRoleEnum", "v", "return", "validate", "NUMBER", "Enum", "path", "location", "value", "newPrototypeRoleEnum", "func", "m", "NewPrototype", "validateRole", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Required", "role", "body", "string", "m", "NUMBER", "Role", "err", "nil", "return", "err", "if", "err", "m", "NUMBER", "validateRoleEnum", "role", "body", "m", "NUMBER", "Role", "err", "nil", "return", "err", "return", "nil", "var", "newPrototypeKindEnum", "interface", "func", "m", "NewPrototype", "validateKindEnum", "path", "location", "string", "value", "string", "error", "if", "newPrototypeKindEnum", "nil", "var", "res", "string", "if", "err", "json", "NUMBER", "Unmarshal", "byte", "user", "team", "res", "err", "nil", "return", "err", "for", "_", "v", "range", "res", "newPrototypeKindEnum", "append", "newPrototypeKindEnum", "v", "return", "validate", "NUMBER", "Enum", "path", "location", "value", "newPrototypeKindEnum", "and", "for", "RunParameters", "I", "had", "to", "change", "unmarshal", "go", "package", "models", "import", "encoding", "json", "This", "file", "was", "generate", "by", "the", "swagger", "tool", "NUMBER", "Editing", "this", "file", "might", "prove", "futile", "when", "you", "re", "run", "the", "swagger", "generate", "command", "Optional", "run", "parameters", "for", "activating", "the", "build", "trigger", "swagger", "model", "RunParameters", "type", "RunParameters", "struct", "SCM", "only", "If", "specified", "the", "name", "of", "the", "branch", "to", "build", "NUMBER", "BranchName", "string", "json", "branch_name", "omitempty", "Custom", "Only", "If", "specified", "the", "ref", "SHA", "NUMBER", "use", "to", "checkout", "a", "git", "repository", "NUMBER", "CommitSha", "string", "json", "commit_sha", "omitempty", "SCM", "Only", "If", "specified", "the", "ref", "to", "build", "NUMBER", "Refs", "map", "string", "interface", "json", "refs", "omitempty", "UnmarshalJSON", "unmarshals", "this", "object", "with", "additional", "properties", "from", "JSON", "func", "m", "RunParameters", "UnmarshalJSON", "data", "byte", "error", "stage", "NUMBER", "bind", "the", "properties", "var", "stage", "NUMBER", "RunParameters", "if", "err", "json", "NUMBER", "Unmarshal", "data", "stage", "NUMBER", "err", "nil", "return", "err", "m", "stage", "NUMBER", "stage", "NUMBER", "remove", "properties", "and", "add", "to", "map", "if", "err", "json", "NUMBER", "Unmarshal", "data", "stage", "NUMBER", "err", "nil", "return", "err", "delete", "stage", "NUMBER", "branch_name", "delete", "stage", "NUMBER", "commit_sha", "delete", "stage", "NUMBER", "refs", "m", "NUMBER", "Refs", "stage", "NUMBER", "refs", "return", "nil", "MarshalJSON", "marshals", "this", "object", "with", "additional", "properties", "into", "a", "JSON", "object", "func", "m", "RunParameters", "MarshalJSON", "byte", "error", "make", "JSON", "object", "for", "know", "properties", "props", "err", "json", "NUMBER", "Marshal", "m", "if", "err", "nil", "return", "nil", "err", "return", "props", "nil", "I", "ll", "try", "to", "fix", "those", "too", "I", "ve", "put", "the", "remaining", "things", "from", "this", "issue", "in", "new", "issue", "so", "closing", "this", "one", "I", "m", "able", "to", "generate", "a", "client", "for", "quay", "NUMBER", "io", "that", "compiles", "off", "the", "spec", "without", "requiring", "edits", "instead", "of", "requiring", "NUMBER", "headers", "if", "you", "re", "going", "to", "do", "version", "through", "headers", "NUMBER", "it", "should", "be", "in", "your", "media", "type", "NUMBER", "So", "you", "want", "something", "like", "application", "vnd", "NUMBER", "company", "NUMBER", "app", "v", "NUMBER", "json", "You", "can", "add", "headers", "to", "responses", "and", "to", "parameters", "NUMBER", "Those", "can", "in", "turn", "be", "shared", "to", "a", "certain", "degree", "through", "the", "use", "of", "ref", "From", "the", "swagger", "specification", "Content", "Types", "LINK", "api", "swagger", "spec", "blob", "master", "version", "NUMBER", "md", "mime", "types", "Fixed", "field", "on", "parameter", "object", "LINK", "api", "swagger", "spec", "blob", "master", "version", "NUMBER", "md", "fix", "field", "NUMBER", "Fixed", "field", "on", "response", "objects", "LINK", "api", "swagger", "spec", "blob", "master", "version", "NUMBER", "md", "fix", "field", "NUMBER", "If", "you", "think", "the", "specification", "would", "be", "improved", "by", "add", "global", "headers", "to", "the", "API", "you", "can", "submit", "an", "issue", "at", "the", "swagger", "spec", "LINK", "api", "swagger", "spec", "repo", "there", "be", "many", "more", "people", "following", "that", "repository", "and", "it", "will", "get", "a", "discussion", "going", "NUMBER", "O", "I", "get", "it", "now", "NUMBER", "You", "still", "have", "to", "reference", "your", "parameter", "NUMBER", "The", "global", "parameters", "be", "not", "defaults", "for", "every", "operation", "NUMBER", "They", "be", "like", "a", "databag", "to", "share", "but", "you", "still", "have", "to", "provide", "a", "ref", "to", "the", "named", "parameter", "if", "you", "want", "to", "use", "them", "because", "there", "be", "nothing", "to", "fix", "see", "my", "comment", "NUMBER", "You", "have", "to", "still", "refer", "to", "them", "as", "ref", "wherever", "you", "want", "to", "use", "them", "NUMBER", "Whatever", "you", "define", "in", "the", "parameters", "property", "at", "the", "top", "level", "be", "like", "definitions", "they", "aren", "t", "defaults", "for", "every", "single", "operation", "in", "your", "spec", "NUMBER", "afaik", "I", "m", "allow", "to", "just", "ignore", "invalid", "things", "this", "could", "be", "a", "validation", "error", "though", "be", "that", "what", "you", "mean", "duplicate", "of", "issue", "NUMBER", "duplicate", "of", "issue", "NUMBER", "the", "invalid", "example", "be", "a", "valid", "issue", "ideally", "this", "would", "have", "just", "contained", "that", "one", "issue", "as", "the", "other", "ones", "be", "already", "know", "ah", "here", "it", "s", "actually", "expected", "NUMBER", "To", "get", "a", "pointer", "here", "the", "spec", "should", "read", "yaml", "order", "post", "tags", "order", "operationId", "postOrder", "summary", "Creates", "a", "new", "Order", "NUMBER", "parameters", "name", "order", "in", "body", "required", "false", "schema", "ref", "definitions", "OrderPlacement", "The", "items", "property", "be", "required", "for", "an", "array", "NUMBER", "A", "ref", "hijacks", "everything", "in", "the", "object", "so", "the", "type", "array", "shouldn", "t", "even", "be", "pick", "up", "json", "responses", "NUMBER", "description", "Success", "schema", "type", "array", "items", "ref", "definitions", "DeleteResponse", "could", "you", "get", "me", "the", "entire", "spec", "it", "would", "be", "helpful", "to", "see", "the", "context", "around", "the", "children", "thing", "NUMBER", "Hi", "thanks", "for", "the", "context", "I", "think", "this", "be", "a", "bug", "relate", "to", "the", "java", "implementation", "of", "swagger", "which", "be", "another", "project", "under", "another", "organization", "NUMBER", "I", "think", "you", "ll", "find", "that", "the", "people", "fehguy", "from", "the", "swagger", "core", "project", "might", "be", "able", "to", "help", "you", "better", "I", "m", "not", "familiar", "with", "the", "java", "implementation", "and", "its", "frameworks", "NUMBER", "LINK", "api", "swagger", "core", "You", "can", "take", "a", "look", "here", "LINK", "swagger", "go", "swagger", "tree", "master", "fixture", "goparsing", "petstore", "there", "be", "a", "few", "more", "issue", "to", "work", "out", "with", "the", "generation", "of", "a", "server", "and", "client", "before", "I", "can", "work", "on", "the", "docs", "and", "provide", "proper", "examples", "NUMBER", "see", "NUMBER", "This", "one", "be", "not", "a", "fully", "functional", "API", "but", "it", "shows", "all", "the", "annotations", "in", "use", "LINK", "swagger", "go", "swagger", "tree", "master", "fixture", "goparsing", "classification", "LINK", "swagger", "NUMBER", "github", "NUMBER", "io", "generate", "spec", "I", "botched", "a", "merge", "this", "weekend", "and", "I", "m", "catching", "up", "NUMBER", "Please", "keep", "submit", "issue", "as", "you", "find", "them", "though", "NUMBER", "If", "it", "s", "critical", "to", "what", "you", "re", "trying", "to", "do", "the", "latest", "work", "version", "of", "the", "server", "generator", "was", "NUMBER", "d", "NUMBER", "ba", "I", "botched", "a", "merge", "this", "weekend", "and", "I", "m", "catching", "up", "NUMBER", "Please", "keep", "submit", "issue", "as", "you", "find", "them", "though", "NUMBER", "If", "it", "s", "critical", "to", "what", "you", "re", "trying", "to", "do", "the", "latest", "work", "version", "of", "the", "server", "generator", "was", "NUMBER", "d", "NUMBER", "ba", "NUMBER", "b", "NUMBER", "Yes", "I", "ll", "try", "to", "fix", "some", "this", "weekend", "NUMBER", "The", "swagger", "version", "fix", "be", "relatively", "easy", "haven", "t", "really", "looked", "into", "the", "other", "one", "yet", "This", "be", "the", "cause", "for", "the", "first", "one", "LINK", "swagger", "go", "swagger", "blob", "master", "spec", "spec", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "Would", "the", "following", "solution", "work", "better", "not", "yet", "implement", "though", "responses", "default", "errorResponse", "Generic", "Error", "NUMBER", "photoResponse", "multi", "word", "description", "In", "the", "end", "it", "was", "easier", "to", "just", "reuse", "the", "documentation", "on", "the", "response", "struct", "NUMBER", "So", "that", "s", "what", "it", "be", "doing", "NUMBER", "It", "s", "not", "use", "the", "syntax", "propose", "earlier", "NUMBER", "the", "server", "generator", "on", "master", "now", "support", "the", "response", "model", "part", "of", "this", "issue", "NUMBER", "Still", "no", "way", "to", "set", "the", "reason", "Looks", "like", "there", "won", "t", "be", "a", "way", "to", "set", "the", "response", "reason", "for", "the", "go", "http", "server", "NUMBER", "Closing", "this", "now", "LINK", "at", "this", "point", "we", "make", "use", "of", "the", "go", "loader", "package", "NUMBER", "This", "allows", "us", "to", "discover", "your", "application", "and", "which", "file", "to", "scan", "for", "the", "doc", "comments", "NUMBER", "This", "application", "needs", "to", "read", "composed", "structs", "and", "so", "on", "and", "it", "s", "a", "lot", "easier", "to", "interrogate", "the", "application", "if", "you", "know", "where", "all", "the", "file", "be", "and", "not", "just", "the", "ones", "you", "created", "in", "this", "particular", "folder", "NUMBER", "Unfortunately", "it", "do", "require", "to", "be", "able", "to", "read", "How", "about", "a", "main", "class", "that", "doesn", "t", "require", "appengine", "imports", "I", "ve", "personally", "never", "use", "appening", "so", "I", "don", "t", "really", "know", "what", "be", "involved", "NUMBER", "I", "guess", "what", "I", "mean", "be", "if", "your", "code", "doesn", "t", "compile", "how", "be", "you", "run", "it", "And", "what", "I", "also", "meant", "be", "if", "this", "be", "important", "to", "you", "you", "could", "look", "at", "forking", "and", "submit", "a", "pull", "request", "NUMBER", "I", "personally", "still", "have", "a", "bunch", "of", "other", "things", "that", "need", "fix", "in", "here", "before", "I", "want", "to", "look", "at", "a", "niche", "like", "appengine", "NUMBER", "but", "the", "custom", "sdk", "they", "use", "also", "include", "a", "custom", "go", "command", "doesn", "t", "it", "I", "think", "the", "problem", "you", "re", "having", "be", "relate", "to", "your", "GOPATH", "content", "and", "can", "be", "fix", "there", "NUMBER", "afaik", "go", "always", "needs", "to", "compile", "your", "stuff", "whether", "that", "s", "in", "the", "SDK", "env", "or", "not", "have", "you", "tried", "installing", "go", "swagger", "in", "the", "SDK", "provide", "GOPATH", "I", "ll", "leave", "this", "open", "so", "i", "can", "track", "this", "the", "work", "around", "be", "simple", "just", "start", "with", "a", "swagger", "NUMBER", "json", "file", "that", "has", "the", "miss", "bits", "NUMBER", "fix", "by", "NUMBER", "a", "NUMBER", "aa", "I", "can", "t", "find", "it", "here", "as", "be", "support", "LINK", "api", "swagger", "spec", "blob", "master", "version", "NUMBER", "md", "definitionsObject", "I", "ll", "ask", "though", "and", "see", "if", "perhaps", "it", "should", "be", "NUMBER", "There", "has", "be", "a", "bunch", "of", "discussion", "on", "these", "things", "in", "the", "swagger", "spec", "repo", "NUMBER", "But", "as", "things", "stand", "while", "json", "schema", "support", "it", "it", "s", "not", "support", "for", "swagger", "at", "this", "point", "NUMBER", "The", "markdown", "document", "linked", "to", "earlier", "be", "the", "source", "of", "truth", "for", "the", "swagger", "NUMBER", "spec", "definition", "NUMBER", "it", "wouldn", "t", "be", "hard", "to", "support", "it", "but", "swagger", "currently", "doesn", "t", "allow", "for", "it", "NUMBER", "webron", "can", "you", "confirm", "that", "what", "I", "write", "here", "be", "the", "actual", "state", "of", "affairs", "But", "you", "can", "reference", "to", "URL", "s", "not", "just", "to", "local", "file", "wherever", "you", "would", "reference", "the", "definition", "NUMBER", "Things", "don", "t", "need", "to", "be", "defined", "in", "NUMBER", "file", "but", "you", "also", "don", "t", "strictly", "need", "to", "import", "global", "definitions", "NUMBER", "You", "can", "just", "reference", "remote", "entities", "json", "ref", "LINK", "definitions", "Person", "as", "far", "as", "I", "know", "the", "items", "from", "this", "PR", "be", "incorporated", "in", "the", "code", "generation", "NUMBER", "Just", "this", "PR", "was", "never", "merge", "NUMBER", "What", "specifically", "be", "still", "change", "order", "Is", "it", "the", "properties", "on", "models", "or", "the", "operations", "Going", "to", "close", "this", "pull", "request", "the", "change", "in", "here", "were", "manually", "merge", "this", "should", "not", "render", "actually", "this", "should", "throw", "an", "error", "NUMBER", "I", "think", "you", "can", "define", "your", "schema", "like", "this", "yaml", "paths", "_debug", "get", "tags", "debug", "operationId", "getDebug", "summary", "Debug", "route", "strictly", "for", "test", "NUMBER", "responses", "NUMBER", "descrition", "Debug", "result", "NUMBER", "schema", "anyOf", "type", "object", "type", "arrray", "items", "type", "object", "yeah", "this", "one", "be", "in", "more", "places", "on", "the", "master", "branch", "NUMBER", "In", "the", "template", "refactor", "branch", "there", "be", "no", "more", "upfront", "mangling", "of", "names", "this", "should", "now", "be", "fix", "on", "master", "you", "want", "the", "hostname", "format", "not", "uri", "format", "I", "update", "the", "include", "schema", "for", "swagger", "NUMBER", "This", "now", "validates", "ivan", "aether", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "git", "master", "swagger", "validate", "LINK", "api", "swagger", "spec", "master", "examples", "v", "NUMBER", "json", "petstore", "expanded", "NUMBER", "json", "The", "swagger", "spec", "at", "LINK", "api", "swagger", "spec", "master", "examples", "v", "NUMBER", "json", "petstore", "expanded", "NUMBER", "json", "be", "valid", "against", "swagger", "specification", "NUMBER", "be", "this", "still", "an", "issue", "what", "be", "the", "thing", "you", "re", "trying", "to", "achieve", "This", "was", "for", "the", "grpc", "gateway", "project", "Does", "that", "work", "do", "it", "require", "more", "work", "can", "you", "give", "me", "a", "few", "days", "to", "get", "my", "client", "branch", "integrated", "NUMBER", "I", "m", "not", "worried", "about", "this", "particular", "feature", "as", "much", "as", "with", "how", "this", "can", "be", "do", "without", "having", "to", "change", "go", "swagger", "for", "each", "thing", "people", "might", "find", "useful", "NUMBER", "I", "have", "resorted", "to", "annotations", "and", "scanning", "in", "template", "refactor", "and", "gen", "client", "branch", "NUMBER", "While", "sql", "might", "seem", "appropriate", "I", "don", "t", "know", "if", "I", "want", "go", "swagger", "to", "have", "support", "for", "sql", "in", "the", "core", "of", "the", "project", "because", "not", "everybody", "uses", "sql", "at", "all", "and", "one", "goal", "be", "to", "keep", "dependencies", "of", "go", "swagger", "very", "limited", "NUMBER", "I", "hope", "this", "makes", "sense", "So", "if", "you", "take", "a", "look", "at", "where", "I", "m", "going", "with", "this", "stuff", "in", "the", "template", "refactor", "branch", "and", "you", "can", "come", "up", "with", "a", "proposal", "that", "would", "play", "nice", "with", "those", "annotations", "and", "such", "NUMBER", "I", "would", "gladly", "merge", "it", "in", "NUMBER", "I", "think", "somebody", "else", "submitted", "that", "PR", "earlier", "the", "go", "generate", "bindata", "one", "thanks", "I", "think", "this", "be", "no", "longer", "an", "issue", "so", "I", "m", "going", "to", "close", "this", "one", "I", "think", "somebody", "fix", "that", "in", "NUMBER", "I", "thnk", "they", "moved", "here", "LINK", "swagger", "go", "swagger", "tree", "master", "httpkit", "validate", "you", "could", "also", "try", "to", "pull", "in", "the", "template", "for", "this", "from", "the", "gen", "client", "branch", "NUMBER", "i", "fix", "those", "things", "on", "there", "and", "the", "template", "for", "the", "server", "shouldn", "t", "have", "change", "NUMBER", "try", "run", "go", "generate", "NUMBER", "generator", "that", "should", "update", "the", "embedded", "template", "NUMBER", "Sorry", "don", "t", "have", "any", "docs", "about", "this", "stuff", "yet", "thanks", "Thanks", "a", "lot", "there", "be", "NUMBER", "test", "failures", "here", "NUMBER", "One", "be", "relate", "to", "the", "path", "change", "NUMBER", "The", "other", "one", "I", "don", "t", "know", "why", "it", "do", "that", "but", "might", "be", "because", "of", "the", "same", "reason", "NUMBER", "it", "will", "be", "fix", "when", "I", "m", "able", "to", "merge", "my", "branch", "back", "in", "NUMBER", "I", "m", "no", "longer", "use", "for", "comments", "this", "should", "be", "fix", "now", "on", "master", "Currently", "the", "generate", "server", "assumes", "that", "responses", "never", "define", "headers", "NUMBER", "I", "have", "this", "for", "the", "client", "on", "the", "template", "refactor", "branch", "but", "no", "such", "thing", "for", "the", "server", "yet", "each", "security", "reference", "should", "contain", "only", "unique", "scopes", "Warning", "casualjim", "need", "advice", "on", "this", "one", "since", "scopes", "be", "keys", "they", "be", "modelled", "as", "go", "maps", "NUMBER", "Therefore", "we", "can", "t", "provide", "this", "check", "in", "the", "validate", "module", "NUMBER", "Like", "the", "server", "this", "needs", "to", "support", "an", "entire", "swagger", "spec", "NUMBER", "Unlike", "the", "server", "this", "doesn", "t", "need", "an", "untyped", "version", "NUMBER", "pretty", "high", "up", "I", "m", "currently", "write", "test", "for", "the", "generator", "stuff", "to", "get", "my", "confidence", "level", "up", "NUMBER", "And", "the", "client", "be", "the", "one", "I", "want", "to", "get", "work", "first", "NUMBER", "NUMBER", "I", "ll", "let", "you", "know", "when", "I", "have", "something", "that", "might", "work", "nmonterroso", "I", "don", "t", "intend", "for", "this", "to", "become", "a", "part", "of", "swagger", "codegen", "NUMBER", "I", "start", "out", "trying", "to", "get", "it", "to", "work", "with", "swagger", "codegen", "but", "as", "I", "get", "further", "in", "my", "implementation", "I", "first", "had", "to", "let", "go", "of", "the", "object", "model", "then", "the", "mustache", "template", "NUMBER", "There", "be", "a", "number", "of", "reasons", "why", "that", "be", "I", "get", "to", "use", "go", "fmt", "NUMBER", "Sprintf", "v", "example", "to", "get", "proper", "go", "representations", "of", "types", "for", "examples", "Using", "mustache", "requires", "me", "to", "use", "multipass", "rendering", "go", "template", "allow", "me", "to", "render", "in", "NUMBER", "pass", "NUMBER", "Reuse", "of", "mustache", "template", "be", "fairly", "limited", "I", "m", "going", "to", "make", "use", "of", "static", "code", "analysis", "prior", "to", "generating", "certain", "models", "and", "so", "on", "NUMBER", "All", "of", "this", "would", "require", "a", "lot", "of", "extra", "work", "in", "java", "while", "it", "s", "much", "easier", "to", "do", "so", "in", "go", "NUMBER", "I", "also", "run", "into", "some", "bug", "in", "the", "codegen", "at", "that", "time", "NUMBER", "Trying", "to", "debug", "NUMBER", "languages", "go", "java", "and", "mustache", "while", "not", "really", "knowing", "all", "the", "things", "I", "would", "need", "add", "more", "cognitive", "overhead", "than", "I", "was", "willing", "to", "deal", "with", "NUMBER", "I", "ve", "only", "just", "worked", "out", "how", "to", "map", "all", "the", "possible", "type", "combinations", "that", "be", "support", "in", "swagger", "to", "go", "NUMBER", "Perhaps", "when", "it", "s", "all", "worked", "out", "there", "might", "a", "user", "who", "cares", "enough", "to", "port", "it", "to", "swagger", "codegen", "NUMBER", "This", "branch", "will", "be", "sleeping", "for", "a", "while", "NUMBER", "If", "you", "wanted", "experimental", "this", "be", "it", "NUMBER", "It", "will", "generate", "a", "client", "for", "simple", "things", "NUMBER", "In", "the", "mean", "time", "I", "m", "work", "on", "the", "branch", "template", "refactor", "where", "I", "m", "completing", "the", "generation", "of", "schema", "s", "to", "more", "idiomatic", "go", "NUMBER", "This", "be", "a", "bit", "more", "complex", "than", "I", "had", "anticipated", "anyway", "it", "will", "go", "something", "like", "this", "defintion", "of", "primitive", "type", "alias", "name", "defintion", "of", "array", "type", "alias", "name", "definition", "of", "map", "type", "alias", "name", "definition", "of", "object", "with", "properties", "struct", "definition", "of", "ref", "type", "alias", "name", "object", "with", "only", "additional", "properties", "map", "string", "T", "object", "with", "additional", "properties", "and", "properties", "custom", "serializer", "schema", "with", "schema", "array", "in", "items", "tuple", "struct", "with", "properties", "p", "NUMBER", "p", "NUMBER", "p", "NUMBER", "NUMBER", "custom", "serializer", "schema", "with", "all", "of", "struct", "all", "of", "schema", "with", "ref", "embedded", "value", "all", "of", "schema", "with", "properties", "properties", "be", "include", "in", "struct", "add", "an", "all", "of", "schema", "with", "just", "x", "isnullable", "true", "turns", "the", "schema", "into", "a", "pointer", "schema", "with", "additional", "items", "and", "a", "single", "schema", "nothing", "special", "happens", "it", "s", "an", "invalid", "schema", "schema", "with", "additional", "items", "and", "multiple", "schema", "s", "in", "items", "struct", "like", "tuple", "but", "with", "an", "extra", "property", "for", "the", "additional", "items", "custom", "serializer", "I", "ve", "get", "quite", "a", "bit", "of", "this", "work", "on", "that", "branch", "but", "it", "breaks", "other", "template", "at", "this", "moment", "NUMBER", "I", "have", "the", "custom", "structs", "serializers", "and", "validators", "for", "this", "A", "quick", "update", "I", "m", "finally", "through", "most", "of", "the", "work", "for", "schemas", "NUMBER", "Currently", "add", "support", "for", "enum", "validations", "in", "all", "allow", "positions", "NUMBER", "support", "additionalItems", "and", "additionalProperties", "specifically", "across", "the", "board", "has", "be", "less", "than", "trivial", "NUMBER", "So", "I", "hope", "to", "finally", "be", "able", "to", "merge", "and", "close", "this", "issue", "in", "a", "couple", "of", "days", "There", "be", "a", "strfmt", "NUMBER", "Password", "now", "NUMBER", "close", "with", "NUMBER"], "text_count": [0, 18381, 4624, 2123, 889, 141, 1708, 1, 105, 2492, 2819, 4325, 2798, 1990, 1778, 801, 0, 0, 0, 0, 6361, 1285, 777, 574, 863, 718, 0, 0, 0, 0, 10073, 6551, 3599, 122, 1811, 615, 0, 0, 0, 0, 15277, 32, 7814, 7188, 3425, 0, 0, 0, 0, 0, 3312, 1256, 2495, 911, 1015, 520, 1097, 0, 0, 0, 8741, 564, 7324, 357, 0, 0, 0, 0, 0, 0, 6987, 780, 4993, 2386, 785, 0, 0, 0, 0, 0, 13704, 7825, 1041, 4268, 598, 485, 0, 0, 0, 0, 631, 5180, 345, 0, 0, 0, 0, 0, 0, 0, 9921, 2880, 4823, 2337, 0, 0, 0, 0, 0, 0, 19323, 38668, 529, 1407, 339, 792, 0, 0, 0, 0, 52856, 303, 39304, 521, 8547, 12152]}, {"repo": "go-swagger", "type": "nonelite", "title": "", "number of text": 1922, "text": "  ## Problem statement\r\n\r\nerror on converted yaml from generated json.\r\n\r\n## Swagger specification\r\nI do all stages carefully step by step and according to documents of swagger.io , after generating .json file , I go to swaggerhub to convert it to yaml and generate UI. But some of the definitions go wrong and I had to correct those manually.\r\n## Environment\r\nswagger version: 2  \r\ngo version: 1.9  \r\nOS: UBUNTU 17.10   \r\n\r\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1394?src=pr&el=h1) Report\n> Merging [#1394](https://codecov.io/gh/go-swagger/go-swagger/pull/1394?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/d86b7c470249c233cc0262e43ed03c44edf1e16e?src=pr&el=desc) will **increase** coverage by `0.1%`.\n> The diff coverage is `90.9%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1394/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1394?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master    #1394     +/-   ##\n=========================================\n+ Coverage   72.83%   72.94%   +0.1%     \n=========================================\n  Files          37       37             \n  Lines        6844     6875     +31     \n=========================================\n+ Hits         4985     5015     +30     \n- Misses       1406     1407      +1     \n  Partials      453      453\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1394?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1394/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `80.38% <100%> (\u00f8)` | :arrow_up: |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1394/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <100%> (\u00f8)` | :arrow_up: |\n| [generator/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1394/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL29wZXJhdGlvbi5nbw==) | `68.21% <100%> (+0.69%)` | :arrow_up: |\n| [generator/template\\_repo.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1394/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3RlbXBsYXRlX3JlcG8uZ28=) | `88.35% <60%> (-0.78%)` | :arrow_down: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1394/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `60.2% <90.47%> (+8.25%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1394?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1394?src=pr&el=footer). Last update [d86b7c4...b6417da](https://codecov.io/gh/go-swagger/go-swagger/pull/1394?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   ## Problem statement\r\nWhen the body parameter is an array type, referencing another type, none of the validation is called.\r\n\r\nIts possible I'm just defining it incorrectly (as I'm new to writing swagger specs), but I can't seem to get it to satisfy the criteria around [this line of parameter.gotmpl](https://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/parameter.gotmpl#L203)\r\n\r\nIf the validation checking done [around here](https://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/parameter.gotmpl#L209) is done it works correctly, sending back a 400 any \"state\" that's not in the enum. But it never gets into this section because it passes the [{{ if .Child }} check](https://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/parameter.gotmpl#L203)\r\n\r\nIn the \"Generated Code\" section below, the Validate method for the `BulkUpdateState` type is created correctly, but never called in `BindRequest`\r\n\r\n## Swagger specification\r\n```\r\nswagger: \"2.0\"\r\ninfo:\r\n  title: Bug? Demo\r\n  description: Description.\r\n  version: \"0.1.0\"\r\nschemes:\r\n  - http\r\nproduces:\r\n  - application/json\r\nconsumes:\r\n  - application/json\r\nresponses:\r\n  200:\r\n    description: OK\r\n    schema:\r\n      type: string\r\n  400:\r\n    description: Bad Request\r\npaths:\r\n  /someResource/:\r\n    patch:\r\n      consumes:\r\n        - application/json\r\n      summary: Update the state of multiple stuff and things at once.\r\n      parameters:\r\n        - in: body\r\n          name: massUpdate\r\n          schema:\r\n            $ref: '#/definitions/BulkUpdateState'\r\n      responses:\r\n        200:\r\n          $ref: '#/responses/200'\r\n        400:\r\n          $ref: '#/responses/400'\r\n      tags:\r\n        - SomeResource\r\ndefinitions:\r\n  BulkUpdateState:\r\n    type: array\r\n    items:\r\n      $ref: '#/definitions/UpdateStateRequest'\r\n  UpdateStateRequest:\r\n    type: object\r\n    required:\r\n      - ID\r\n      - state\r\n    properties:\r\n      ID:\r\n        type: string\r\n        x-nullable: false\r\n      state:\r\n        $ref: '#/definitions/StateEnum'\r\n  UpdateRequest:\r\n    type: object\r\n  StateEnum:\r\n    type: string\r\n    enum:\r\n      - todo\r\n      - done\r\n      - blocked\r\n      - skipped\r\n      - unenrolled\r\n      - custom\r\n```\r\n## Steps to reproduce\r\n- Generate the server based on this swagger.\r\n- Add a handler\r\n- Hit the /someResource route with a patch request, containing JSON array with states other than listed in the enum.\r\n- See that requests make it to the handler.\r\n\r\n## Generated Code\r\n\r\n```\r\n// BulkUpdateState bulk update state\r\n// swagger:model BulkUpdateState\r\ntype BulkUpdateState []*UpdateStateRequest\r\n\r\n// Validate validates this bulk update state\r\nfunc (m BulkUpdateState) Validate(formats strfmt.Registry) error {\r\n\tvar res []error\r\n\r\n\tfor i := 0; i < len(m); i++ {\r\n\r\n\t\tif swag.IsZero(m[i]) { // not required\r\n\t\t\tcontinue\r\n\t\t}\r\n\r\n\t\tif m[i] != nil {\r\n\r\n\t\t\tif err := m[i].Validate(formats); err != nil {\r\n\t\t\t\tif ve, ok := err.(*errors.Validation); ok {\r\n\t\t\t\t\treturn ve.ValidateName(strconv.Itoa(i))\r\n\t\t\t\t}\r\n\t\t\t\treturn err\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tif len(res) > 0 {\r\n\t\treturn errors.CompositeValidationError(res...)\r\n\t}\r\n\treturn nil\r\n}\r\n```\r\n\r\n```\r\n// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface\r\n// for simple values it will use straight method calls\r\nfunc (o *PatchSomeResourceParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {\r\n\tvar res []error\r\n\to.HTTPRequest = r\r\n\r\n\tif runtime.HasBody(r) {\r\n\t\tdefer r.Body.Close()\r\n\t\tvar body models.BulkUpdateState\r\n\t\tif err := route.Consumer.Consume(r.Body, &body); err != nil {\r\n\t\t\tres = append(res, errors.NewParseError(\"massUpdate\", \"body\", \"\", err))\r\n\t\t} else {\r\n\r\n\t\t\tif len(res) == 0 {\r\n\t\t\t\to.MassUpdate = body\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tif len(res) > 0 {\r\n\t\treturn errors.CompositeValidationError(res...)\r\n\t}\r\n\treturn nil\r\n}\r\n```\r\n\r\n## Environment\r\nswagger version: 0.13.0\r\ngo version: 1.9.2\r\nOS:   Mac OS 10.13.2\r\n  ## Problem statement\r\nI'd like for my API to be able to be able to respond in both json and xml, for that I need to change producer depending on a query parameter contents. \r\nI can't find how to do it, is it possible? If so, could I ask for some guidance what should I look at?\r\nProducer is set by the WriteResponse function, but how do I pass a producer to this function (from handler scope)\r\n\r\n## Swagger specification\r\nanything where \r\n```yaml\r\nproduces:\r\n- application/json\r\n- application/xml\r\n```\r\n## Environment\r\nswagger version: dev\r\ngo version: 1.9.2\r\nOS:   n/a\r\n define 2 paths which include the query string\r\nThat allows you to pick producers. By default the content negotiation works based on the accept header not a query string. it should just work Thanks for the reply @casualjim,  didn't know this. I know this may be standard in http(s) API, but I was not able to find this info when googling (but then again maybe I wasn't persistent enough)\r\nI was not able to find this info in the documentation, could it be added? LMK if you have a place in mind, I'd love contribute :)\r\n\r\nBTW is there a way to manipulate prettyfying of jsons? While Accept header works just fine, there is issue with \"DefaultProduces\".\r\nI think I have set this variable correctly (even though it was application/json by default) but if Accept header is not set I am getting XML replies.\r\n\r\nin the configure_xxx.go, after registering Consumers and Producers I set the defaultConsumes and defaultProduces in the xxxAPI object\r\n```go\r\napi.SetDefaultConsumes(\"application/json\")\r\napi.SetDefaultProduces(\"application/json\")\r\n```\r\nAm I doing something wrong?\r\nShould it be configured per path? If so how can I do it?  ## Problem statement\r\n\r\nLine 1 says \"don't edit\": https://github.com/go-swagger/go-swagger/blob/18337a2ecf1022fa5e6b3b01b3ac4033e1e4955b/generator/templates/server/configureapi.gotmpl#L1\r\n\r\nBut line 28 says \"you should edit this file\": https://github.com/go-swagger/go-swagger/blob/18337a2ecf1022fa5e6b3b01b3ac4033e1e4955b/generator/templates/server/configureapi.gotmpl#L28\r\n\r\nThese messages should be made consistent.\r\n Yeah, line 1 should not have been added to this template when it was added to the others.  It probably makes sense to move line 28 to line 1.\r\n  ## Problem statement\r\nI have noticed that title field isn't added when swagger.json is generated.\r\nI tried to add  like this: Title: SocialTournamentService API but nothing has happened\r\n\r\n## Environment\r\nswagger version: 0.13.0  \r\ngo version: 1.9  \r\nOS:   Ubuntu 16.04\r\n A little bit  ## Problem statement\r\nWhen generating a client from a swagger file with a definition that specifies `type: string` and `format: int64`, the JSON struct tag generated is incorrect.\r\n\r\n## Swagger specification\r\n\r\n`test.json`:\r\n```json\r\n{\r\n    \"consumes\": [\r\n        \"application/json\"\r\n    ],\r\n    \"definitions\": {\r\n        \"Test\": {\r\n            \"properties\": {\r\n                \"id\": {\r\n                    \"format\": \"int64\",\r\n                    \"type\": \"string\"\r\n                }\r\n            },\r\n            \"type\": \"object\"\r\n        }\r\n    },\r\n    \"paths\": {\r\n        \"/api/v1/test\": {\r\n            \"get\": {\r\n                \"operationId\": \"test\",\r\n                \"responses\": {\r\n                    \"200\": {\r\n                        \"schema\": {\r\n                            \"$ref\": \"#/definitions/Test\"\r\n                        },\r\n                        \"description\": \"test\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    \"info\": {\r\n        \"version\": \"1\",\r\n        \"title\": \"Test\"\r\n    },\r\n    \"produces\": [\r\n        \"application/json\"\r\n    ],\r\n    \"schemes\": [\r\n        \"https\"\r\n    ],\r\n    \"swagger\": \"2.0\"\r\n}\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n```bash\r\n$ swagger generate client -f test.json -t ./test/\r\n```\r\n\r\nProduces a model like so:\r\n\r\n```go\r\n// Test test\r\n// swagger:model Test\r\ntype Test struct {\r\n\r\n\t// id\r\n\tID int64 `json:\"id,omitempty\"`\r\n}\r\n```\r\n\r\nIt should, ideally, be\r\n\r\n```go\r\n// Test test\r\n// swagger:model Test\r\ntype Test struct {\r\n\r\n\t// id\r\n\tID int64 `json:\"id,omitempty,string\"`\r\n}\r\n```\r\n## Environment\r\nswagger version: dev (tip of master as of today)\r\ngo version: go version go1.9.1 linux/amd64\r\nOS: Linux\r\n that's an invalid type. The openapi 2.0 spec says the type should be \r\n```\r\ntype: integer\r\nformat: int64\r\n```\r\n\r\n Do you have a source for me to reference? This swagger definition is generated by `protoc-gen-swagger` of the `grpc-gateway` project. Protobuf automatically encodes uint64 and int64 as strings because the numeric type would introduce inaccuracies (numeric being a float64). I suppose it's an open question then how OpenAPI deals with integer overflows in JSON numbers? I took a look at the 3.0 spec as well and it says:\r\n\r\n```\r\nNote that integer as a type is also supported and is defined as a JSON number without a fraction or exponent part.\r\n```\r\n\r\nI don't really understand what that means for integer overflows. I do agree that this appears to be nonstandard behaviour, but all the same this is a problem with the specification that I think the grpc-gateway (and protobuf in general) fixes. Feel free to close this issue as I understand you wouldn't be keen to implement something that's not strictly part of the OpenAPI spec.  ## Problem statement\r\n\r\nSince this commit https://github.com/go-swagger/go-swagger/commit/43c39abf79b51c062d8d38345a0b7ecfd72c6b98\r\nthe package and file name generation has changed.\r\nBefore this commit, the package name is `sms_campaigns`.\r\nAfter this commit it's like `s_m_s_campaigns`.\r\n(I did a git bisect)\r\n\r\n## Swagger specification\r\n\r\nhttps://api.sendinblue.com/v3/swagger_definition.yml\r\n\r\nIt's used in this project https://github.com/sendinblue/APIv3-go-library\r\n\r\ncc @ekta-slit\r\n\r\n## Steps to reproduce\r\n\r\n`swagger generate client -f build/swagger_definition.yml`\r\n\r\n## Environment\r\nswagger version: master  \r\ngo version: 1.10beta2 Thank you !   # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1372?src=pr&el=h1) Report\n> Merging [#1372](https://codecov.io/gh/go-swagger/go-swagger/pull/1372?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/dfe8aa7cd3ac65f8d754cdf9ae285dd52a42e1d3?src=pr&el=desc) will **increase** coverage by `0.03%`.\n> The diff coverage is `93.1%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1372/graphs/tree.svg?height=150&width=650&token=aQS1DepR8C&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1372?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1372      +/-   ##\n==========================================\n+ Coverage   72.35%   72.39%   +0.03%     \n==========================================\n  Files          36       36              \n  Lines        6718     6724       +6     \n==========================================\n+ Hits         4861     4868       +7     \n+ Misses       1404     1403       -1     \n  Partials      453      453\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1372?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1372/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `80.38% <100%> (\u00f8)` | :arrow_up: |\n| [generator/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1372/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL29wZXJhdGlvbi5nbw==) | `68.21% <100%> (+0.69%)` | :arrow_up: |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1372/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <100%> (\u00f8)` | :arrow_up: |\n| [generator/template\\_repo.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1372/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3RlbXBsYXRlX3JlcG8uZ28=) | `88.35% <60%> (-0.78%)` | :arrow_down: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1372/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `50% <0%> (-1.95%)` | :arrow_down: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1372/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `76.43% <0%> (-0.06%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1372?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1372?src=pr&el=footer). Last update [dfe8aa7...caa3dae](https://codecov.io/gh/go-swagger/go-swagger/pull/1372?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n I saw a few places where \"literal\" had an extra \"t\": \"litteral\".\r\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1371?src=pr&el=h1) Report\n> Merging [#1371](https://codecov.io/gh/go-swagger/go-swagger/pull/1371?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/2282aa13eedbf7dd75b425e892a928173921b829?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1371/graphs/tree.svg?width=650&token=aQS1DepR8C&height=150&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1371?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1371      +/-   ##\n==========================================\n+ Coverage   72.32%   72.33%   +<.01%     \n==========================================\n  Files          36       35       -1     \n  Lines        6707     6702       -5     \n==========================================\n- Hits         4851     4848       -3     \n+ Misses       1403     1402       -1     \n+ Partials      453      452       -1\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1371?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/debug.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1371/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2RlYnVnLmdv) | | |\n| [generator/types.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1371/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3R5cGVzLmdv) | `88.71% <0%> (+0.11%)` | :arrow_up: |\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1371/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `77.49% <0%> (+0.16%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1371?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1371?src=pr&el=footer). Last update [2282aa1...081a3fe](https://codecov.io/gh/go-swagger/go-swagger/pull/1371?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1369?src=pr&el=h1) Report\n> Merging [#1369](https://codecov.io/gh/go-swagger/go-swagger/pull/1369?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/3b72d1f76d4409c01f247b07af482772f304c000?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `77.77%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1369/graphs/tree.svg?token=aQS1DepR8C&width=650&src=pr&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1369?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1369   +/-   ##\n=======================================\n  Coverage   72.32%   72.32%           \n=======================================\n  Files          35       36    +1     \n  Lines        6707     6707           \n=======================================\n  Hits         4851     4851           \n  Misses       1403     1403           \n  Partials      453      453\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1369?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/types.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1369/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3R5cGVzLmdv) | `88.6% <\u00f8> (-0.12%)` | :arrow_down: |\n| [generator/debug.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1369/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2RlYnVnLmdv) | `100% <100%> (\u00f8)` | |\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1369/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `77.32% <60%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1369?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1369?src=pr&el=footer). Last update [3b72d1f...d60be3b](https://codecov.io/gh/go-swagger/go-swagger/pull/1369?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1368?src=pr&el=h1) Report\n> Merging [#1368](https://codecov.io/gh/go-swagger/go-swagger/pull/1368?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/acf3c15f3a1fd86f271220a05558717ec1c61d32?src=pr&el=desc) will **decrease** coverage by `0.53%`.\n> The diff coverage is `77.77%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/graphs/tree.svg?token=aQS1DepR8C&src=pr&height=150&width=650)](https://codecov.io/gh/go-swagger/go-swagger/pull/1368?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master   #1368      +/-   ##\n=========================================\n- Coverage   72.33%   71.8%   -0.54%     \n=========================================\n  Files          35      36       +1     \n  Lines        6702    6739      +37     \n=========================================\n- Hits         4848    4839       -9     \n- Misses       1402    1445      +43     \n- Partials      452     455       +3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1368?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/types.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3R5cGVzLmdv) | `88.6% <\u00f8> (-0.12%)` | :arrow_down: |\n| [generator/debug.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2RlYnVnLmdv) | `100% <100%> (\u00f8)` | |\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `77.71% <60%> (+0.21%)` | :arrow_up: |\n| [cmd/swagger/commands/generate/server.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc2VydmVyLmdv) | `67.53% <0%> (-20.19%)` | :arrow_down: |\n| [cmd/swagger/commands/generate/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc2hhcmVkLmdv) | `33.33% <0%> (-7.85%)` | :arrow_down: |\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `65.42% <0%> (-1.57%)` | :arrow_down: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `76.02% <0%> (-0.41%)` | :arrow_down: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `80.34% <0%> (-0.05%)` | :arrow_down: |\n| [cmd/swagger/commands/generate/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvY2xpZW50Lmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc3VwcG9ydC5nbw==) | `0% <0%> (\u00f8)` | :arrow_up: |\n| ... and [7 more](https://codecov.io/gh/go-swagger/go-swagger/pull/1368/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1368?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1368?src=pr&el=footer). Last update [acf3c15...492a6bf](https://codecov.io/gh/go-swagger/go-swagger/pull/1368?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1367?src=pr&el=h1) Report\n> Merging [#1367](https://codecov.io/gh/go-swagger/go-swagger/pull/1367?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/d2aae8150c526d861828ee0e8a16623df01d3fb5?src=pr&el=desc) will **decrease** coverage by `0.5%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/graphs/tree.svg?width=650&token=aQS1DepR8C&height=150&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1367?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1367      +/-   ##\n==========================================\n- Coverage   72.32%   71.82%   -0.51%     \n==========================================\n  Files          35       35              \n  Lines        6700     6736      +36     \n==========================================\n- Hits         4846     4838       -8     \n- Misses       1402     1444      +42     \n- Partials      452      454       +2\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1367?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `80.38% <100%> (+0.04%)` | :arrow_up: |\n| [cmd/swagger/commands/generate/server.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc2VydmVyLmdv) | `67.53% <0%> (-20.19%)` | :arrow_down: |\n| [cmd/swagger/commands/generate/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc2hhcmVkLmdv) | `33.33% <0%> (-7.85%)` | :arrow_down: |\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `65.42% <0%> (-1.57%)` | :arrow_down: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `76.02% <0%> (-0.41%)` | :arrow_down: |\n| [cmd/swagger/commands/generate/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvY2xpZW50Lmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <0%> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvb3BlcmF0aW9uLmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc3VwcG9ydC5nbw==) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [generator/template\\_repo.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3RlbXBsYXRlX3JlcG8uZ28=) | `89.18% <0%> (+0.05%)` | :arrow_up: |\n| ... and [3 more](https://codecov.io/gh/go-swagger/go-swagger/pull/1367/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1367?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1367?src=pr&el=footer). Last update [d2aae81...173ca89](https://codecov.io/gh/go-swagger/go-swagger/pull/1367?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1366?src=pr&el=h1) Report\n> Merging [#1366](https://codecov.io/gh/go-swagger/go-swagger/pull/1366?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/2db0ce663570b503015389ce4b53e61534d5c66c?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1366/graphs/tree.svg?token=aQS1DepR8C&width=650&src=pr&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1366?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1366   +/-   ##\n=======================================\n  Coverage   71.79%   71.79%           \n=======================================\n  Files          35       35           \n  Lines        6734     6734           \n=======================================\n  Hits         4835     4835           \n  Misses       1445     1445           \n  Partials      454      454\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1366?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1366/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `77.88% <\u00f8> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1366?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1366?src=pr&el=footer). Last update [2db0ce6...2278db5](https://codecov.io/gh/go-swagger/go-swagger/pull/1366?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1365?src=pr&el=h1) Report\n> Merging [#1365](https://codecov.io/gh/go-swagger/go-swagger/pull/1365?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/acf3c15f3a1fd86f271220a05558717ec1c61d32?src=pr&el=desc) will **decrease** coverage by `0.53%`.\n> The diff coverage is `60%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1365?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master   #1365      +/-   ##\n=========================================\n- Coverage   72.33%   71.8%   -0.54%     \n=========================================\n  Files          35      35              \n  Lines        6702    6739      +37     \n=========================================\n- Hits         4848    4839       -9     \n- Misses       1402    1445      +43     \n- Partials      452     455       +3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1365?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `77.71% <60%> (+0.21%)` | :arrow_up: |\n| [cmd/swagger/commands/generate/server.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc2VydmVyLmdv) | `67.53% <0%> (-20.19%)` | :arrow_down: |\n| [cmd/swagger/commands/generate/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc2hhcmVkLmdv) | `33.33% <0%> (-7.85%)` | :arrow_down: |\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `65.42% <0%> (-1.57%)` | :arrow_down: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `76.02% <0%> (-0.41%)` | :arrow_down: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `80.34% <0%> (-0.05%)` | :arrow_down: |\n| [cmd/swagger/commands/generate/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvb3BlcmF0aW9uLmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <0%> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvY2xpZW50Lmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc3VwcG9ydC5nbw==) | `0% <0%> (\u00f8)` | :arrow_up: |\n| ... and [4 more](https://codecov.io/gh/go-swagger/go-swagger/pull/1365/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1365?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1365?src=pr&el=footer). Last update [acf3c15...2e21eeb](https://codecov.io/gh/go-swagger/go-swagger/pull/1365?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\nWhen generating models, each model is created in separate file. \r\nIs there a way to group models to produce less files?\r\n\r\n\r\n## Environment\r\nswagger version: dev \r\ngo version: 1.9.2 linux/amd64 \r\nOS:   Ubuntu 16.04\r\n can you explain me the benefit of this?  The benefit isn't big, and I will fully understand if it won't be added. \r\n\r\nIt is just a matter of preference/ readability- when having many small defined types, we end up with many, many files that are ~20 lines long. Some projects have coding style guidelines to have fewer files, each with a group of types pertaining to some specific module on the back-end side. It would be nice if there was possibility to configure go-swagger to adhere to the coding style of a specific projects. Thank you very much! gocat solves the issue!  ## Problem statement\r\nissuing the `swagger generate server --dump-data` command results in the following error:\r\n\r\n> json: unsupported type: func(string) string\r\n\r\n\r\nThis seems to work on 0.13 (installed via homebrew) but no longer works against dev head. Possibly a regression error?\r\n## Swagger specification\r\n```\r\nconsumes:\r\n- application/json\r\ninfo:\r\n  title: Foo\r\n  version: 0.1.0\r\npaths:\r\n  /foo:\r\n    get:\r\n      summary: foo\r\n      operationId: listFoo\r\n      responses:\r\n        \"200\":\r\n          description: foos\r\nproduces:\r\n- application/json\r\nschemes:\r\n- http\r\nswagger: \"2.0\"\r\n```\r\n\r\n## Steps to reproduce\r\n`swagger init spec`\r\nadd the path in the above spec\r\n`swagger generate server --dump-data`\r\n\r\n## Environment\r\nswagger version: dev (head)  \r\ngo version: 1.9.2\r\nOS:   darwin/amd64\r\n Simple fix:\r\n\r\n\tBaseImportFunc   func(string) string `json:\"-\"`\r\n  ## Problem statement\r\n\r\nI have multiple `operation`s, which all refer to the same parameter. Now I want these to be reffed but cannot figure out how to add a definition to the json.\r\n\r\nI tried\r\n\r\n```\r\n// swagger:model foobar\r\ntype fooBar struct {\r\n\tName string `json:\"f\"`\r\n\tIn string `json:\"path\"`\r\n\tDescription string `json:\"F1\"`\r\n\tRequired bool `json:\"true\"`\r\n}\r\n```\r\n\r\nbut no `foobar` definition is added to the json.\r\n\r\n## Swagger specification\r\n\r\n```\r\n// swagger:operation GET /foo getFoo\r\n//\r\n// ---\r\n// produces:\r\n// - application/json\r\n// parameters:\r\n// - $ref: \"#/definitions/foobar\"\r\n\r\n```\r\n\r\n you have to use the model in a parameters struct,  the parameter struct can be assigned to many operations by listing all the operationId's it pertains to. > you have to use the model in a parameters struct, the parameter struct can be assigned to many operations by listing all the operationId's it pertains to.\r\n\r\nThanks for trying to help but I literally did not understand a single thing you said. Can you perhaps try to show with a code sample? yes but also parameters can't refer to definitions because they are distinct things.\r\n\r\nA definition is a struct to represent a payload\r\nA parameter is headers, query params, path params and body\r\n\r\nfor example:\r\n```go\r\n// An OrderBodyParams model.\r\n//\r\n// This is used for operations that want an Order as body of the request\r\n// swagger:parameters updateOrder createOrder\r\ntype OrderBodyParams struct {\r\n\t// The order to submit.\r\n\t//\r\n\t// in: body\r\n\t// required: true\r\n\tOrder *models.StoreOrder `json:\"order\"`\r\n}\r\n```\r\n\r\nthis defines a parameter that uses the models.StoreOrder (your foobar) as request body. And this parameter is associated with both the operations: updateOrder and createOrder\r\n > parameters can't refer to definitions because they are distinct things.\r\n\r\nOk, this then means I am forced to copy and paste parameter entries? I don't know why you'd need to copy paste them? it's 1 type that can be attached to many operations. You can only have 1 body > I don't know why you'd need to copy paste them?\r\n\r\nIf I have 4 operations and all of them want a path parameter of name `foobar`, this means I have to have 4 definitions of `foobar`, right?\r\n\r\n```\r\n// swagger:operation GET /{foobar}/foo1 getFoo1\r\n//\r\n// ---\r\n// produces:\r\n// - application/json\r\n// parameters:\r\n// - name: foobar\r\n//   in: path\r\n\r\n// swagger:operation GET /{foobar}/foo2 getFoo2\r\n//\r\n// ---\r\n// produces:\r\n// - application/json\r\n// parameters:\r\n// - name: foobar\r\n//   in: path\r\n``` if you use swagger:route you don't need to\r\n\r\n```go\r\n\r\n// swagger:parameter getFoo1 getFoo2\r\ntype fooBarParam struct {\r\n  // in: path\r\n  FooBar string `json:\"foobar\"`\r\n}\r\n\r\n//swagger:route GET /{foobar}/foo1 getFoo1\r\nfunc getFoo1(res responsewriter, req request) {}\r\n\r\n//swagger:route GET /{foobar}/foo2 getFoo2\r\nfunc getFoo2(res responsewriter, req request) {}\r\n\r\n```\r\n > if you use swagger:route you don't need to\r\n\r\nRoute is harder to retrofit into already working source code, IMO.\r\nI assumed, that one could refer to a \"global\" parameter since it is e.g. possible to refer to a \"global\" security definition. Now I realize, that `security` has special handling.\r\n\r\nAlso I am not clear what _model_, _route_, _operation_, etc. have as a semantic meaning. It seems the docs assume one is already very versed in these topics (which I am not).\r\n\r\nAnyway, thanks a lot for your time.\r\n  ## Problem statement\r\n\r\nThe help guide given by `swagger generate model -h` says that:\r\n```\r\n--skip-validator   when present will not generate a model validator\r\n```\r\n\r\nBut actually there is no difference with or without `--skip-validator`\r\n\r\n## Swagger specification\r\nTry the example swagger yml: https://github.com/go-swagger/go-swagger/blob/master/examples/task-tracker/swagger.yml\r\n\r\n## Steps to reproduce\r\n\r\n- run `swagger generate model -f swagger.yml`\r\n- run `swagger generate model -f swagger.yml --skip-validator`\r\n- compare the output go files\r\n\r\n## Environment\r\nswagger version: 2.0.0  \r\ngo version: 1.9.2  \r\nOS:   macOS\r\ngo-swagger: 0.13.0\r\n  Added a flag to take in additional initialisms\r\n\r\nFixes #1344 \r\n I am not sure why it is failing to build? # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1353?src=pr&el=h1) Report\n> Merging [#1353](https://codecov.io/gh/go-swagger/go-swagger/pull/1353?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/c3e4c47835b002053835e2933ab387ce1794a589?src=pr&el=desc) will **increase** coverage by `0.48%`.\n> The diff coverage is `37.5%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/graphs/tree.svg?token=aQS1DepR8C&src=pr&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1353?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master   #1353      +/-   ##\n=========================================\n+ Coverage   71.81%   72.3%   +0.48%     \n=========================================\n  Files          35      35              \n  Lines        6734    6701      -33     \n=========================================\n+ Hits         4836    4845       +9     \n+ Misses       1444    1404      -40     \n+ Partials      454     452       -2\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1353?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <\u00f8> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvbW9kZWwuZ28=) | `73.33% <\u00f8> (-1.67%)` | :arrow_down: |\n| [scan/validators.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree#diff-c2Nhbi92YWxpZGF0b3JzLmdv) | `77.63% <\u00f8> (\u00f8)` | :arrow_up: |\n| [generator/template\\_repo.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3RlbXBsYXRlX3JlcG8uZ28=) | `89.13% <\u00f8> (-0.06%)` | :arrow_down: |\n| [generator/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL29wZXJhdGlvbi5nbw==) | `67.32% <0%> (-0.11%)` | :arrow_down: |\n| [cmd/swagger/commands/generate/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc3VwcG9ydC5nbw==) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvb3BlcmF0aW9uLmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvY2xpZW50Lmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `66.98% <100%> (+1.56%)` | :arrow_up: |\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `76.74% <100%> (-1.15%)` | :arrow_down: |\n| ... and [5 more](https://codecov.io/gh/go-swagger/go-swagger/pull/1353/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1353?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1353?src=pr&el=footer). Last update [c3e4c47...edfaee6](https://codecov.io/gh/go-swagger/go-swagger/pull/1353?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n @fredbi found what the problem was.\r\n\r\nDo you mind taking another look? Thanks! @fredbi anything I can do to fix those? I am pretty lost right now I should look at the changes for the validation again. I suspect that there were things that use to be warnings that are now errors. o i didn't mean skip-validation but skip-validator flag.\r\n\r\nwe want to validate but the skip-validator we don't want to support swagger doesn't allow for type arrays so they dont' need to be supported we should remove the makefile and the scripts that uses. they are not useful and confusing oh wow thanks guys.\r\n\r\nI totally mixed up `skip-validation` and `skip-validator` flags...... @casualjim do you mind taking another look since i took out the wrong flag? Thanks! it needs a rebase on master because there was another PR merged with changes to templates, so bindata is in conflict currently Done!  ## Problem statement\r\nThis project is using https://github.com/golang/dep so we could theoretically remove vendor folder and use `dep ensure` to construct the vendor folder \r\n\r\nIs there anything I am missing?\r\n Can you point me to the part for building the binaries?\r\n\r\nIs it possible to add `dep ensure` as part of the building process? why would vendor not be version controlled, imo generated code and vendored code is part of the project there is no benefit besides some disk space.\r\n\r\nthe goal is that people can do `go get -u github.com/go-swagger/go-swagger/cmd/swagger`\r\nand it should build with the version that we tested with not with what happens to be on their GOPATH\r\n\r\n\r\n   There's both vendor and godep to version control the external dependencies, which is a bit redundant imo. Both php and node.js recommend not version control the external dependencies.\r\n\r\nI know the topic is controversial, but I just want to put an idea out there since I had to update both Gopkg.lock and the vendor folders to update a dependency if you can tell me how people can do `go get -u github.com/go-swagger/go-swagger/cmd/swagger` \r\nand at the same time use a set of libraries that are at the same version as we tested with I\"m willing to entertain the discussion. Until then we should leave the subject for what it is. I know this sounds dismissive but it's not a controversial topic. \r\nWe have tons of actual problems and higher value improvements that can be made instead. Fair enough. Thanks @casualjim   ## Problem statement\r\n\r\nI ran into an issue that I wish swagger could help me to validate MAC address in struct defined in swagger.yml, like:\r\n\r\n```\r\n      MacAddress:\r\n        description: \"MAC address of the container.\"\r\n        type: \"string\"\r\n        format: mac\r\n```\r\nThen the generated struct has a validation function to validate the mac format of this field.\r\n\r\nHowever it fails.\r\n\r\nCould we support this feature in go-swagger?\r\n\r\n## Swagger specification\r\n\r\n## Steps to reproduce\r\n\r\n## Environment\r\nswagger version: `version: 0.12.0`\r\ngo version: `go version go1.9.1 darwin/amd64` \r\nOS:   \r\n  ## Problem statement\r\n\r\nHi, All,\r\n\r\nToday I ran into an issue that I have a definition which has a Hostname, and hostname has a format of `hostname` using `strfmt`:\r\n\r\n```\r\ndefinitions:\r\n  ContainerConfig:\r\n    type: \"object\"\r\n    description: \"Configuration for a container that is portable between hosts\"\r\n    properties:\r\n      Hostname:\r\n        description: \"The hostname to use for the container, as a valid RFC 1123 hostname.\"\r\n        type: \"string\"\r\n        format: hostname\r\n```\r\n\r\nWhen when I generate `container_config.go`, I did not find any validation code for field Hostname:\r\n```\r\n// Code generated by go-swagger; DO NOT EDIT.\r\n\r\npackage types\r\n\r\n// This file was generated by the swagger tool.\r\n// Editing this file might prove futile when you re-run the swagger generate command\r\n\r\nimport (\r\n\tstrfmt \"github.com/go-openapi/strfmt\"\r\n\r\n\t\"github.com/go-openapi/errors\"\r\n\t\"github.com/go-openapi/swag\"\r\n)\r\n\r\n// ContainerConfig Configuration for a container that is portable between hosts\r\n// swagger:model ContainerConfig\r\ntype ContainerConfig struct {\r\n\r\n\t// The hostname to use for the container, as a valid RFC 1123 hostname.\r\n\tHostname strfmt.Hostname `json:\"Hostname,omitempty\"`\r\n}\r\n\r\n// Validate validates this container config\r\nfunc (m *ContainerConfig) Validate(formats strfmt.Registry) error {\r\n\tvar res []error\r\n\r\n\tif len(res) > 0 {\r\n\t\treturn errors.CompositeValidationError(res...)\r\n\t}\r\n\treturn nil\r\n}\r\n\r\n// MarshalBinary interface implementation\r\nfunc (m *ContainerConfig) MarshalBinary() ([]byte, error) {\r\n\tif m == nil {\r\n\t\treturn nil, nil\r\n\t}\r\n\treturn swag.WriteJSON(m)\r\n}\r\n\r\n// UnmarshalBinary interface implementation\r\nfunc (m *ContainerConfig) UnmarshalBinary(b []byte) error {\r\n\tvar res ContainerConfig\r\n\tif err := swag.ReadJSON(b, &res); err != nil {\r\n\t\treturn err\r\n\t}\r\n\t*m = res\r\n\treturn nil\r\n}\r\n\r\n``` \r\n\r\n**So why does it not validate Hostname if this is a not required field?**\r\n\r\nAnd I tested that if I add Hostname as required, validation code will generated:\r\n```\r\n// Validate validates this container config\r\nfunc (m *ContainerConfig) Validate(formats strfmt.Registry) error {\r\n\tvar res []error\r\n\r\n\tif err := m.validateHostname(formats); err != nil {\r\n\t\t// prop\r\n\t\tres = append(res, err)\r\n\t}\r\n\r\n\tif len(res) > 0 {\r\n\t\treturn errors.CompositeValidationError(res...)\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc (m *ContainerConfig) validateHostname(formats strfmt.Registry) error {\r\n\r\n\tif err := validate.Required(\"Hostname\", \"body\", m.Hostname); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tif err := validate.FormatOf(\"Hostname\", \"body\", \"hostname\", m.Hostname.String(), formats); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n```\r\n\r\nAnd if I add a pattern for this not required field, validation code will be generated. Is adding pattern the only way to validate format of a not required field?\r\n\r\n/cc @CodeJuan\r\n\r\n## Swagger specification\r\n\r\n## Steps to reproduce\r\n\r\n## Environment\r\nswagger version: \r\n```\r\n $ swagger version\r\ndev\r\n```\r\ngo version: `go version go1.9.1 darwin/amd64`  \r\nOS:   \r\n It's actually slightly lower down, but same basic idea, with one additional condition that should be satisfied here without a problem.\r\n\r\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/templates/schemavalidator.gotmpl#L330\r\n Oooh, nice tip.\r\n\r\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/model.go#L538\r\n\r\nI think here we should add a check for `model.Format` being a value that we know how to validate.\r\n I'm just as much of a beginner here.  The reason I said \"being a value that we know how to validate\" is that I have no idea how it will handle a format that it doesn't know how to validate.  Having said that, I realize now that it should be moot, because it will already return true if `isRequired` is true.  Decided to try this project using the petstore example yaml file: https://github.com/swagger-api/swagger-codegen/blob/master/modules/swagger-codegen/src/test/resources/2_0/petstore.yaml\r\n\r\nWhen trying to compile the generated code I get the following errors:\r\ngo build restapi/server.go \r\n# petstore/models\r\nmodels/create_users_with_array_input_params_body.go:35: ve.ValidateName undefined (type *\"github.com/go-openapi/errors\".Validation has no field or method ValidateName)\r\nmodels/create_users_with_list_input_params_body.go:35: ve.ValidateName undefined (type *\"github.com/go-openapi/errors\".Validation has no field or method ValidateName)\r\nmodels/find_pets_by_status_okbody.go:35: ve.ValidateName undefined (type *\"github.com/go-openapi/errors\".Validation has no field or method ValidateName)\r\nmodels/find_pets_by_tags_okbody.go:35: ve.ValidateName undefined (type *\"github.com/go-openapi/errors\".Validation has no field or method ValidateName)\r\nmodels/pet.go:85: ve.ValidateName undefined (type *\"github.com/go-openapi/errors\".Validation has no field or method ValidateName)\r\nmodels/pet_tags.go:35: ve.ValidateName undefined (type *\"github.com/go-openapi/errors\".Validation has no field or method ValidateName)\r\nmodels/pets.go:35: ve.ValidateName undefined (type *\"github.com/go-openapi/errors\".Validation has no field or method ValidateName)\r\n\r\n## Swagger specification: swagger: '2.0'\r\n\r\n## Steps to reproduce\r\nalias swagger='docker run --rm -it -e GOPATH=/Users/stevef1/Source_Code/go -v /Users/stevef1/Source_Code:/Users/stevef1/Source_Code -w /Users/stevef1/Source_Code/go/petstore quay.io/goswagger/swagger'\r\n\r\nswagger generate server -f petstore.yaml --target=$GOPATH/src/petstore\r\n\r\nAlso tried using the brew install approach with same result.\r\n\r\n## Environment\r\nswagger version: dev: commit: 7077865cc6012ee95137f25cdf2020ee521f985d\r\ngo version: go1.7.1 darwin/amd64\r\nOS:   MacOS Darwin Kernel Version 17.3.0 (High Sierra 10.13.2 (17C88))\r\n you need to download the dependencies it lists at the end of the generation step and regenerate. Sorry, I thought I had but I saw the instruction to do a go get -u so I tried that and now when I try to compile I get:\r\n\r\ngo build restapi/server.go \r\n# command-line-arguments\r\nrestapi/server.go:53:15: undefined: configureAPI\r\nrestapi/server.go:60:3: undefined: configureFlags\r\nrestapi/server.go:129:14: undefined: configureAPI\r\nrestapi/server.go:174:3: undefined: configureServer\r\nrestapi/server.go:206:3: undefined: configureServer\r\nrestapi/server.go:273:3: undefined: configureTLS\r\nrestapi/server.go:292:3: undefined: configureServer\r\n\r\nso closer but no cigar :-)\r\n\r\nAny help in how to get this to compile would be appreciated.  Thanks, as you can tell I am fairly new to go and it has been a year or so since I last tried writing any.\r\n\r\nI have built it! I needed to do a few more go gets for:\r\n\r\nhttps://github.com/go-openapi/strfmt\r\ngithub.com/go-openapi/analysis\r\ngithub.com/go-openapi/validate\r\n\r\nThen I needed to edit: restapi/operations/user/login_user_responses.go to add an import for \"github.com/go-openapi/strfmt\"\r\n\r\n\r\n  ## Problem statement\r\n\r\nHi, All, \r\n\r\nI ran into one situation that in my swagger.yml, I have defined an object `IPAM` in https://github.com/alibaba/pouch/blob/master/apis/swagger.yml#L1713-L1726:\r\n\r\n```\r\n  IPAM:\r\n    type: \"object\"\r\n    description: \"represents IP Address Management\"\r\n    properties:\r\n      Driver:\r\n        type: \"string\"\r\n      Options:\r\n        type: \"object\"\r\n        additionalProperties:\r\n          type: \"string\"\r\n      Config:\r\n        type: \"array\"\r\n        items:\r\n          $ref: '#/definitions/IPAMConfig'\r\n```\r\n\r\nWhen generating a file, a file named `ip_a_m.go` is generated, see https://github.com/alibaba/pouch/blob/master/apis/types/ip_a_m.go.\r\n\r\nI do not think the file name `ip_a_m.go` is what I want. \r\n\r\nSo, could I customize the file name in some places, like setting something to generate a file named `IPAM.go`?\r\n\r\n/cc @rudyfly @CodeJuan \r\n\r\n## Swagger specification\r\nSee https://github.com/alibaba/pouch/blob/master/apis/swagger.yml\r\n\r\n## Steps to reproduce\r\nNONE\r\n\r\n## Environment\r\nswagger version: `version: 0.12.0`\r\ngo version: `go version go1.9.1 darwin/amd64`\r\nOS:   `Darwin AllenSundeMacBook-Pro.local 16.7.0 Darwin Kernel Version 16.7.0: Mon Nov 13 21:56:25 PST 2017; root:xnu-3789.72.11~1/RELEASE_X86_64 x86_64`\r\n I think we recently updated the way these names are generated. do you still see that same behavior on when you build from master? So I think we need to first set the customized file name in swagger.yml, right?\r\n\r\nCurrently I have not get the way to set that file name. Could you share how to add a name in swagger.yml? Thanks a lot. Then I will try master branch.  we added changed the function that generates a file name to keep all uppercase letters grouped.\r\nSo the filename would still be lowercase but 1 word: ipam.go  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1343?src=pr&el=h1) Report\n> Merging [#1343](https://codecov.io/gh/go-swagger/go-swagger/pull/1343?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/4ec93824d5f227f9eebeda90f46192a0fcded161?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1343/graphs/tree.svg?token=aQS1DepR8C&src=pr&height=150&width=650)](https://codecov.io/gh/go-swagger/go-swagger/pull/1343?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1343   +/-   ##\n=======================================\n  Coverage   71.75%   71.75%           \n=======================================\n  Files          35       35           \n  Lines        6727     6727           \n=======================================\n  Hits         4827     4827           \n  Misses       1446     1446           \n  Partials      454      454\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1343?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1343?src=pr&el=footer). Last update [4ec9382...d60a96e](https://codecov.io/gh/go-swagger/go-swagger/pull/1343?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  this looks good to me, let me know when you're happy with it for merge I've pushed the website to the domain  ## Problem statement\r\n\r\nThe swagger utility creates temporary files and do not delete these files before program termination.\r\n\r\nIn particular, \"swagger validate\" calls the ExpandSchema() method from the dependent go-openapi/spec to validate swagger spec files. Every invocation of \"swagger validate\" may end up creating multiple temporary files in the temp folder (e.g. /tmp for Linux).\r\n\r\nThe ExpandSchema() method calls ioutil.TempFile(), which creates a temporary file, and the file is not deleted before program termination. As specified in the golang documentation, it is the caller's responsibility to delete temporary files created by ioutil.TempFile()\r\n\r\nhttps://github.com/go-openapi/spec/blob/aa90e7cfc0a78736511f9eeab8f7586d98c8f53a/expander.go#L534\r\n\r\n## Steps to reproduce\r\n1) Invoke swagger validate xyz.json\r\n2) After program execution, notice the /tmp directory (in Linux) contains multiple rootXXXX files.\r\n\r\n## Environment\r\nswagger version: x.x.x  \r\ngo version: 1.9.2\r\nOS:  Linux\r\n\r\n## Proposed fix\r\nThe tracking issue in go-openapi/spec is https://github.com/go-openapi/spec/issues/47.\r\nPull Request: https://github.com/go-openapi/spec/pull/48\r\n\r\nThe proposed fix for go-swagger is to update Gopkg.lock and use https://github.com/go-openapi/spec/pull/48/commits/                    \r\n Yes, I confirm the issue can be closed. thanks.  ## Problem statement\r\nWhen generating a server implementation and calling `Server.Shutdown` method from `restapi` package the server is not actually closed though the documentation states `Shutdown server and clean up resources`. Only the `API.ServerShutdown` callback from `operations` package is called but the actual server is not closed.\r\n\r\nThe graceful server exposes the API needed to shut it down gracefully but the generated abstraction does not allow access to this API. Because of this, only an OS signal can kill the graceful server when running the generated server.\r\n\r\nI propose to expand the `Server.Shutdown` method to signal the graceful server to initiate a shutdown. It is a fairly simple addition to the API and I'm happy to make a PR with the changes.\r\n\r\nWhen looking over the source the following changes are necessary:\r\n- `Server.Serve` should listen for on a shutdown channel and stop the graceful server when receiving a signal\r\n- `Server.Shutdown` should send a signal on the shutdown channel\r\n- Code on examples should be updated to hold the new implementation\r\n\r\n## Steps to reproduce\r\nA slightly modified version of the [`custom-server` tutorial example](https://github.com/go-swagger/go-swagger/tree/master/examples/tutorials/custom-server) shows the behaviour. After 5 seconds the server is instructed to shut down by calling `Shutdown`. The `ServerShutdown` callback is called but the server continuous to run. \r\n\r\nWhen running the output is as follows. Not that I manually interrupt the server with CTRL + C.\r\n```\r\n$ go run ./cmd/greeter/main.go --port 3000\r\n2017/12/08 14:03:39 Serving greeter at http://[::]:3000\r\n2017/12/08 14:03:44 api shutdown called\r\n^C2017/12/08 14:03:53 shutdown initiated\r\n2017/12/08 14:03:53 Stopped serving greeter at http://[::]:3000\r\n```\r\n\r\nBelow is a stripped snippet from the `main.go`.\r\n\r\n```go\r\n// from  examples/tutorials/custom-server/cmd/greeter/main.go\r\n\r\n// create new service API\r\napi := operations.NewGreeterAPI(swaggerSpec)\r\napi.ServerShutdown = func() { log.Println(\"api shutdown called\") } // added\r\nserver := restapi.NewServer(api)\r\n\r\n// parse flags\r\nflag.Parse()\r\n// set the port this service will be run on\r\nserver.Port = *portFlag\r\n\r\n// GetGreetingHandler greets the given name,\r\n// in case the name is not given, it will default to World\r\napi.GetGreetingHandler = operations.GetGreetingHandlerFunc(\r\n\tfunc(params operations.GetGreetingParams) middleware.Responder {\r\n\t\t// ...\r\n\t})\r\n\r\n// added\r\ngo func() {\r\n\ttime.Sleep(5 * time.Second)\r\n\tserver.Shutdown()\r\n}()\r\n\r\n// serve API\r\n``` @casualjim Would you be interested in this PR?\r\nI belive this is more of a bug fix than an enhancement as the generated documentation describes that the server should shutdown after a call to `Server.Shutdown()` but it does not?  The reason I'm asking is to prioritise my time as well. We are using this in production now and would like to know if a PR is likely to be released any time soon.\r\n\r\nAny how, I'll prepare a PR. Any checklists or alike I should use? I had some difficulty running the different make targets locally. Is it fine to just make the changes in the templates and sources and let example generation etc. be handled when things are to be merged?  yes I think this is a valuable contribution. I have to see exactly where the changes will be made and at worst I'd ask to rename a method or something. if you can run `go test ./...` we should be good Great. I'll prepare the PR. Thank you for the quick answers.  ## Problem statement\r\nUp to go-swagger version 0.11.0, we could use go-swagger's generator to generate other artifacts (not go code) into the path outside of $GOPATH/src using custom templates. The code that rejects such code generation outside of $GOPATH existed before but there was a bug that didn't trigger this check.\r\n\r\nBut according to the commit logs, this bug seems to have been fixed in August and this change went into 0.12.0. As a result, we can no longer use go-swagger to generate non-go code using custom templates into arbitrary folder.\r\n\r\nI am wondering if we could add a parameter to method baseImport (in support.go) so that we could have a configuration option for not triggering this $GOPATH/src check in certain cases.\r\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/support.go#L253\r\n\r\nI would appreciate for your comments.\r\n\r\nregards, aki yeah I think you're right.\r\nWe have a concept of language options but this hasn't been added to it yet.\r\nhttps://github.com/go-swagger/go-swagger/blob/master/generator/shared.go#L90\r\n\r\nPerhaps this check should move there? @fredbi I don't think skip_format=true would let you bypass this GOPATH check as the check is done before the result is written. \r\n @casualjim Yes. If we could change LanguageOpts, we could add the language specific check method there. Is this change allowed in the next 0.x.x? If not, it would be nice if we could at least modify the current check code so that it is only enabled only if GoLangOpts is used or something like that.\r\nthanks. @elakito you can make the changes in 0.x.x as long as we do it without breaking the go language support we're all good.\r\n @fredbi I know where this skip_format has effect. But I don't know why it relates to this GOPATH check. It's not about the format of the generated code but about in which folder the code is generated. \r\n\r\nThis GOPATH check happens at the generator client start up (https://github.com/go-swagger/go-swagger/blob/master/generator/client.go#L123) which is much before any writing happens where skip_format can have some effect.\r\n\r\nWe could add another property like skip_format and call it skip_gopath_check. But I find it ugly and there is some overlap with what we can do with LanguageOpts. So, I think using one of the two approaches that I suggested would be reasonable, no?\r\n the use case for language opts is exactly what you want to do @elakito so I my vote goes to continuing to expand that functionality.   # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1306?src=pr&el=h1) Report\n> Merging [#1306](https://codecov.io/gh/go-swagger/go-swagger/pull/1306?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/d8a4621bc21a557fcb0e88b26359857d3a884562?src=pr&el=desc) will **increase** coverage by `0.05%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1306/graphs/tree.svg?src=pr&token=aQS1DepR8C&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1306?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1306      +/-   ##\n==========================================\n+ Coverage   71.96%   72.02%   +0.05%     \n==========================================\n  Files          35       35              \n  Lines        6670     6670              \n==========================================\n+ Hits         4800     4804       +4     \n+ Misses       1419     1417       -2     \n+ Partials      451      449       -2\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1306?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [cmd/swagger/commands/validate.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1306/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvdmFsaWRhdGUuZ28=) | `75% <100%> (+25%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1306?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1306?src=pr&el=footer). Last update [d8a4621...8da0c33](https://codecov.io/gh/go-swagger/go-swagger/pull/1306?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1305?src=pr&el=h1) Report\n> Merging [#1305](https://codecov.io/gh/go-swagger/go-swagger/pull/1305?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/00f9ed49767ea80c90a6ae862880e6a3d14a12f6?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1305/graphs/tree.svg?width=650&src=pr&token=aQS1DepR8C&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1305?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1305   +/-   ##\n=======================================\n  Coverage   71.96%   71.96%           \n=======================================\n  Files          35       35           \n  Lines        6670     6670           \n=======================================\n  Hits         4800     4800           \n  Misses       1419     1419           \n  Partials      451      451\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1305?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1305?src=pr&el=footer). Last update [00f9ed4...f29c0b3](https://codecov.io/gh/go-swagger/go-swagger/pull/1305?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1304?src=pr&el=h1) Report\n> Merging [#1304](https://codecov.io/gh/go-swagger/go-swagger/pull/1304?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/ad8d8a6c4a077cb6686c4240efbcfac6c02b040e?src=pr&el=desc) will **decrease** coverage by `2.54%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/graphs/tree.svg?width=650&token=aQS1DepR8C&height=150&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1304?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1304      +/-   ##\n==========================================\n- Coverage   73.51%   70.96%   -2.55%     \n==========================================\n  Files          28       35       +7     \n  Lines        6518     6662     +144     \n==========================================\n- Hits         4792     4728      -64     \n- Misses       1279     1484     +205     \n- Partials      447      450       +3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1304?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/template\\_repo.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3RlbXBsYXRlX3JlcG8uZ28=) | `67.4% <0%> (-21.79%)` | :arrow_down: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `69.86% <0%> (-4.92%)` | :arrow_down: |\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `78.61% <0%> (-0.87%)` | :arrow_down: |\n| [cmd/swagger/commands/initcmd.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvaW5pdGNtZC5nbw==) | `0% <0%> (\u00f8)` | |\n| [cmd/swagger/commands/flatten.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZmxhdHRlbi5nbw==) | `0% <0%> (\u00f8)` | |\n| [cmd/swagger/commands/version.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvdmVyc2lvbi5nbw==) | `0% <0%> (\u00f8)` | |\n| [cmd/swagger/commands/mixin.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvbWl4aW4uZ28=) | `0% <0%> (\u00f8)` | |\n| [cmd/swagger/commands/serve.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvc2VydmUuZ28=) | `0% <0%> (\u00f8)` | |\n| [cmd/swagger/commands/validate.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvdmFsaWRhdGUuZ28=) | `50% <0%> (\u00f8)` | |\n| [cmd/swagger/commands/expand.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1304/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZXhwYW5kLmdv) | `0% <0%> (\u00f8)` | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1304?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1304?src=pr&el=footer). Last update [ad8d8a6...92ab4eb](https://codecov.io/gh/go-swagger/go-swagger/pull/1304?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1303?src=pr&el=h1) Report\n> Merging [#1303](https://codecov.io/gh/go-swagger/go-swagger/pull/1303?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/ab0000b2fd8296401f40b89518252bebbf7d59bd?src=pr&el=desc) will **increase** coverage by `0.61%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1303/graphs/tree.svg?src=pr&token=aQS1DepR8C&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1303?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1303      +/-   ##\n==========================================\n+ Coverage    72.5%   73.11%   +0.61%     \n==========================================\n  Files          28       28              \n  Lines        6510     6514       +4     \n==========================================\n+ Hits         4720     4763      +43     \n+ Misses       1344     1308      -36     \n+ Partials      446      443       -3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1303?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/template\\_repo.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1303/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3RlbXBsYXRlX3JlcG8uZ28=) | `89.18% <100%> (+21.78%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1303?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1303?src=pr&el=footer). Last update [ab0000b...c406158](https://codecov.io/gh/go-swagger/go-swagger/pull/1303?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  Fixes #1301.\r\n\r\nNote: PR is not complete (not doc changes, testing). Just wanted to get some feedback on the idea before finalising the work. how would that custom consumer/producer be picked up at runtime? @casualjim In the `restapi/configure_foo.go`, you would register the consumer/producer against an application type. For example:\r\n\r\n````go\r\napi.RegisterConsumer(\"application/pkcs10\", customConsumer)\r\n````\r\n\r\nIn my testing, that was all I needed to do to support reading PKCS#10 input. Because  my schema defined the type as string, my custom consumer expects to unmarshall into a string pointer. yes you're right, I verified after asking the question.. in this case: carry on :) @casualjim How would you normally test this sort of change? I can add some pattern matching tests to `/go-swagger/generator/server_test.go` to confirm the methods have been added. Is there an alternative approach in which you execute the generated code and verify the methods work as expected? (I'm still groking the code base, so some pointers would be great).\r\n\r\n it's not ideal but I just do pattern matching tests, and typically I've tried the code before. @casualjim  This is potentially ready to go, although I'm not sure how to resolve the CircleCI issues. It's failing for odd reasons:\r\n\r\nhttps://circleci.com/gh/thales-e-security/go-swagger/5\r\n\r\n```\r\n#!/bin/bash -eo pipefail\r\n.circleci/build-docker.sh\r\n?   \tgithub.com/go-swagger/go-swagger\t[no test files]\r\n?   \tgithub.com/go-swagger/go-swagger/cmd/swagger\t[no test files]\r\nPASS\r\ntesting: open /go/src/github.com/go-swagger/go-swagger/github.com/go-swagger/go-swagger/cmd/swagger/commands/profile.tmp: no such file or directory\r\nFAIL\tgithub.com/go-swagger/go-swagger/cmd/swagger/commands\t9.401s\r\nExited with code 1\r\n```\r\nPerhaps it had something to do with the fact that I was already testing my branches with Circle CI, but with a broken config? I've now removed my branch from Circle CI.\r\n   @fredbi Do I need to worry about that? I could rebase this PR to contain one commit, which I assume would trigger a new build. > It might be that you have an outdated version of this script in your branch\r\n\r\nI don't think so. My branch only alters 5 files vs master, none of them is related to circle CI.  It must have been my own CI configuration messing things up. I rebased my commits to trigger another build and this seems more hopeful. # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1302?src=pr&el=h1) Report\n> Merging [#1302](https://codecov.io/gh/go-swagger/go-swagger/pull/1302?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/b598abd1dbf4e868a276f8235f63978fcc43c125?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1302/graphs/tree.svg?token=aQS1DepR8C&src=pr&height=150&width=650)](https://codecov.io/gh/go-swagger/go-swagger/pull/1302?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1302   +/-   ##\n=======================================\n  Coverage   72.32%   72.32%           \n=======================================\n  Files          36       36           \n  Lines        6707     6707           \n=======================================\n  Hits         4851     4851           \n  Misses       1403     1403           \n  Partials      453      453\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1302?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1302/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <100%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1302?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1302?src=pr&el=footer). Last update [b598abd...d529316](https://codecov.io/gh/go-swagger/go-swagger/pull/1302?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n AFAICT, the code coverage drop is simply because some of the generated data is longer with this change. thanks!  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1300?src=pr&el=h1) Report\n> Merging [#1300](https://codecov.io/gh/go-swagger/go-swagger/pull/1300?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/ab0000b2fd8296401f40b89518252bebbf7d59bd?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1300/graphs/tree.svg?src=pr&token=aQS1DepR8C&height=150&width=650)](https://codecov.io/gh/go-swagger/go-swagger/pull/1300?src=pr&el=tree)\n\n```diff\n@@          Coverage Diff           @@\n##           master   #1300   +/-   ##\n======================================\n  Coverage    72.5%   72.5%           \n======================================\n  Files          28      28           \n  Lines        6510    6510           \n======================================\n  Hits         4720    4720           \n  Misses       1344    1344           \n  Partials      446     446\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1300?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1300?src=pr&el=footer). Last update [ab0000b...d17aa91](https://codecov.io/gh/go-swagger/go-swagger/pull/1300?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1298?src=pr&el=h1) Report\n> Merging [#1298](https://codecov.io/gh/go-swagger/go-swagger/pull/1298?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/ab0000b2fd8296401f40b89518252bebbf7d59bd?src=pr&el=desc) will **increase** coverage by `0.4%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1298/graphs/tree.svg?src=pr&token=aQS1DepR8C&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1298?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff            @@\n##           master   #1298     +/-   ##\n========================================\n+ Coverage    72.5%   72.9%   +0.4%     \n========================================\n  Files          28      28             \n  Lines        6510    6514      +4     \n========================================\n+ Hits         4720    4749     +29     \n+ Misses       1344    1315     -29     \n- Partials      446     450      +4\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1298?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1298/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `74.77% <100%> (+4.91%)` | :arrow_up: |\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1298/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `79.48% <0%> (+0.86%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1298?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1298?src=pr&el=footer). Last update [ab0000b...c79f56e](https://codecov.io/gh/go-swagger/go-swagger/pull/1298?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1295?src=pr&el=h1) Report\n> Merging [#1295](https://codecov.io/gh/go-swagger/go-swagger/pull/1295?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/ab0000b2fd8296401f40b89518252bebbf7d59bd?src=pr&el=desc) will **decrease** coverage by `0.04%`.\n> The diff coverage is `0%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1295/graphs/tree.svg?token=aQS1DepR8C&src=pr&height=150&width=650)](https://codecov.io/gh/go-swagger/go-swagger/pull/1295?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1295      +/-   ##\n==========================================\n- Coverage    72.5%   72.45%   -0.05%     \n==========================================\n  Files          28       28              \n  Lines        6510     6514       +4     \n==========================================\n  Hits         4720     4720              \n- Misses       1344     1348       +4     \n  Partials      446      446\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1295?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1295/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `69.24% <0%> (-0.62%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1295?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1295?src=pr&el=footer). Last update [ab0000b...b16304d](https://codecov.io/gh/go-swagger/go-swagger/pull/1295?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n the commit list seems very long. I wonder if this is missing a rebase? It should only be 1 commit no?  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1294?src=pr&el=h1) Report\n> Merging [#1294](https://codecov.io/gh/go-swagger/go-swagger/pull/1294?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/ab0000b2fd8296401f40b89518252bebbf7d59bd?src=pr&el=desc) will **decrease** coverage by `0.04%`.\n> The diff coverage is `0%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1294/graphs/tree.svg?width=650&height=150&token=aQS1DepR8C&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1294?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1294      +/-   ##\n==========================================\n- Coverage    72.5%   72.45%   -0.05%     \n==========================================\n  Files          28       28              \n  Lines        6510     6514       +4     \n==========================================\n  Hits         4720     4720              \n- Misses       1344     1348       +4     \n  Partials      446      446\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1294?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1294/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `69.24% <0%> (-0.62%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1294?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1294?src=pr&el=footer). Last update [ab0000b...a854b9d](https://codecov.io/gh/go-swagger/go-swagger/pull/1294?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  Hi there! I also stumbled across this issue using Homebrew.\r\n\r\n```bash\r\n# after following homebrew instructions and freshly installing go-swagger\r\nswagger version\r\nversion: 0.13.0\r\ncommit: 8135eb6728e43b73489e80f94426e6d387809502\r\n```\r\n\r\nI had problems with `operationGroups` and using custom templates. However, using `go get` to install go-swagger instead of Homebrew fixed the issue.\r\n\r\nNot sure if Homebrew is supposed to use the latest and most up-to-date version of go-swagger (i.e. I don't know if it has your recent fix), but I thought I'd bring it up just in case. this fix came in after the 0.13 release but will be included in the next release  This is not working:\r\n```\r\n\"someIds\": {\r\n    \"type\": \"array\",\r\n    \"example\": [\r\n        413,\r\n        231,\r\n        777\r\n    ],\r\n    \"default\": [\r\n        413,\r\n        231,\r\n        777\r\n    ],\r\n    \"items\": {\r\n        \"type\": \"number\"\r\n    }\r\n},\r\n\"getSomeIds\": {\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"someIds\": {\r\n            \"$ref\": \"#/definitions/someIds\",\r\n            \"type\": \"array\"\r\n        }\r\n    }\r\n},\r\n```\r\n\r\nThis is working:\r\n```\r\n\"getSomeIds\": {\r\n    \"type\": \"object\",\r\n    \"properties\": {\r\n        \"someIds\": {\r\n            \"type\": \"array\",\r\n            \"example\": [\r\n                413,\r\n                231,\r\n                777\r\n            ],\r\n            \"default\": [\r\n                413,\r\n                231,\r\n                777\r\n            ],\r\n            \"items\": {\r\n                \"type\": \"number\"\r\n            }\r\n        }\r\n    }\r\n},\r\n```\r\n\r\nInner/folded definitions should be parsed properly. I'm not sure if this is the cause of your problem, but you can't have anything else with the `\"$ref\"`.\r\n\r\n        \"someIds\": {\r\n            \"$ref\": \"#/definitions/someIds\",\r\n            \"type\": \"array\"\r\n        }\r\n What do you mean? It seems it's allowed by spec, probably json spec parser doesn't follow spec rules as intended. https://github.com/swagger-api/swagger-editor/issues/902\r\n>When you are using a $ref, it should'n have a sibling, otherwise you'll get a warning (it's weird that I didn't!). That's because when there is a $ref, everything (including $ref itself) will be replaced with the result of what that $ref is pointing to. So if you put siblings next to a $ref, they will not appear because resolver replaces it. I expect that this isn't actually related to your problem, but it would be good to eliminate it to be sure. can you define \"not working\" a little bit clearer It's not generating server code with it. You can try to fold refs like i have posted and try yourself. issue can be pin-pointed to forbidden mix $ref + sibling, which is correctly detected by swagger validate, although the returned error message does not state clearly the issue (complains about missing \"items\")\r\n\r\nYes it was complaining about missing items if i'm not wrong and my memory is still good. :D  fixes #1258 (after the spec fix)\r\nfixes #1259 \r\nfixes #1270 \r\nfixes #1065 \r\nfixes #1034  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1285?src=pr&el=h1) Report\n> Merging [#1285](https://codecov.io/gh/go-swagger/go-swagger/pull/1285?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/5ade92aa47f4b45e197e97b05f36e761fab9bbf0?src=pr&el=desc) will **decrease** coverage by `0.34%`.\n> The diff coverage is `70%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1285/graphs/tree.svg?src=pr&token=aQS1DepR8C&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1285?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1285      +/-   ##\n==========================================\n- Coverage   72.02%   71.67%   -0.35%     \n==========================================\n  Files          35       35              \n  Lines        6670     6677       +7     \n==========================================\n- Hits         4804     4786      -18     \n- Misses       1417     1439      +22     \n- Partials      449      452       +3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1285?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1285/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `50% <\u00f8> (\u00f8)` | :arrow_up: |\n| [generator/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1285/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL29wZXJhdGlvbi5nbw==) | `67.02% <0%> (-2.16%)` | :arrow_down: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1285/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `80.34% <100%> (+0.29%)` | :arrow_up: |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1285/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <100%> (\u00f8)` | :arrow_up: |\n| [generator/types.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1285/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3R5cGVzLmdv) | `88.62% <100%> (-1.2%)` | :arrow_down: |\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1285/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `66.32% <66.66%> (-2.16%)` | :arrow_down: |\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1285/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `79.01% <66.66%> (-0.47%)` | :arrow_down: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1285/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `74.34% <75%> (-0.44%)` | :arrow_down: |\n| ... and [2 more](https://codecov.io/gh/go-swagger/go-swagger/pull/1285/diff?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1285?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1285?src=pr&el=footer). Last update [5ade92a...de164a3](https://codecov.io/gh/go-swagger/go-swagger/pull/1285?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n Hello Fredbi,\r\n\r\nThanks very much for the aggregation of all the relevant issues!\r\nThis PR is ready but I'd be happy if you can confirm that it resolves your issues before we merge it.\r\n#1260 is not related to reference resolution (swagger flatten and expand work as expected) so I guess it's related to a minor issue in the code generation path. @casualjim can confirm. Please make a new release (tag) with that fix.  Currently the `version` command shows the version variable that is set on compilation time by using `git describe`.\r\n\r\nhttps://github.com/go-swagger/go-swagger/blob/5d14d17231acaff2e99c9f11d21d8b6b50acf3a9/Makefile.variables#L13\r\n\r\nIf go-swagger version is managed with `go dep`, for example, using the vendor directory, the directory won't be a git repo and `go-swagger` will always show `dev` as version. Thanks for your explanation, really appreciated.\r\n\r\nI have a requirement of being able to build from source in a reliable and predictable way, so using \"dep\" helps because I can pin commits on go-swagger dependencies (that are currently floating; so if you build go-swagger 0.12.0 now, you won't get the same binary/features than when it was released).\r\n\r\nI downloaded the binary version of 0.12.0 and the git commit reported doesn't match the commit tagged as 0.12.0; plus the floating dependencies, I can't use it because when we hit an issue we don't really know what's going on.\r\n\r\nFor example, building 0.12.0 recently, out spec didn't work anymore because of this:\r\n\r\nhttps://github.com/go-openapi/spec/commit/5a4a1e94454f878ce1e1fefff23ea10bd5dd5110\r\n\r\nSo we really need to use \"dep\" to pin the version of the dependencies.\r\n\r\nI think is reasonable to expect the version command to behave correctly when building from source, even if there's no git information available. I understand it's not a priority for the project right now, but I'd love if you considered including it in your roadmap. that particular issue is fixed now  ## Problem statement\r\nGiven this spec\r\n```\r\nswagger: '2.0'\r\nconsumes:\r\n  - application/json\r\nproduces:\r\n  - application/json\r\ninfo:\r\n  title: Test\r\n  version: 1.0.0\r\nsecurityDefinitions:\r\n  keystone:\r\n    type: apiKey\r\n    in: header\r\n    name: x-auth-token\r\nsecurity:\r\n  - keystone: []\r\npaths:\r\n  /info:\r\n    get:\r\n      security: []\r\n      responses:\r\n        '200':\r\n          description: OK\r\n          schema:\r\n            type: string\r\n\r\n```\r\n\r\nThe embedded spec in the generated server is missing the `security: []` entry in the operation.\r\nThis is semantically different from the original spec where the global `security` setting is explicitly overridden to be empty (no authentication for this operation required).\r\n\r\nThe problem is caused by an `omitempty` [struct tag](https://github.com/go-openapi/spec/blob/a4fa9574c7aa73b2fc54e251eb9524d0482bb592/operation.go#L34). I'll open a PR there to fix this issue.\r\n\r\n## Steps to reproduce\r\n`swagger generate server --name test --target test swagger.yaml`\r\n\r\n## Environment\r\nswagger version: 0.13.0  \r\ngo version: 1.9.2\r\nOS: Darwin\r\n @databus23 Is there a possibility that this will cause the `security: []` to appear on specs that don't currently have anything there, changing their semantics?\r\n no, what will appear there is `security: null` which is semantically the same as before. this change cause an error in spec generator:\r\nit generates spec with \"security\": null, @databus23  please reconsider your approach to fix server generator instead of fixing spec.\r\nI can't fix spec generator to generate json files without \"security\": null @gaplyk That's expected according to @databus23 's post that it's semantically the same as before.  Can you provide information on why that's an error for you? @gaplyk Can you elaborate a bit on what the problem is? what is the problem with `security: null` in the spec generator?\r\nI'm not sure what other ways are they to fix this. Leaving the `omitempty` tag annotation in go-openapi/spec does not seem right to me as it causes loss of information when serializing a `spec.SwaggerSpec` struct to JSON. He's saying that `security: null` is semantically the same as `omitempty`, but different than `security: []`. The problem with `omitempty` is that it not only removes `nil` values from the resulting JSON but empty slices `[]` as well. When you load the serialised JSON again you have no way of knowing if the original spec contained `[]` for `security` or the field was not set/nil.\r\n\r\nSo with `omitempty` for the operations `Security` field you loose the information that authentication was explicitly disabled (by setting it to the empty array, overridding the global security settings). @casualjim I can't agree .`nil` and `[]` are not the same in go. The first one is an uninitialised slice and the the other a slice of length 0. If you remove the `omitempty` annotation in your example you see the difference:\r\n```\r\nnil value {\"arr\":null}\r\nempty value {\"arr\":[]}\r\n```\r\n So the problem here really is`omitempty` which treats them equally, but they are not and they happen to mean different things for this specific field in a Swagger spec. They can indeed be distinguished without the `omitempty` \r\nhttps://play.golang.org/p/kuk2mk-dgV so do we need to rewrite json.Marshal then?  the problem is when you generate spec from the code and you don't have `security` on the endpoint level you are getting `\"security\": null`.\r\nthis is a problem of json.Marshal then or we have to create custom Marshaller for this type. \r\nAnd when you try to validate spec you getting \r\n```\r\n- paths.<....>.post.security in body must be of type array: \"null\"\r\n```  I played a bit with a custom marshalling function to achieve the following two properties:\r\n\r\n* keep empty slices in the resulting JSON\r\n* omit the key when the slice is unset/nil\r\n\r\nThis is what I came up with:\r\n```\r\nfunc (op OperationProps) MarshalJSON() ([]byte, error) {\r\n\ttype Alias OperationProps\r\n\tif op.Security == nil {\r\n\t\treturn json.Marshal(&struct {\r\n\t\t\tSecurity []map[string][]string `json:\"security,omitempty\"`\r\n\t\t\t*Alias\r\n\t\t}{\r\n\t\t\tSecurity: op.Security,\r\n\t\t\tAlias:    (*Alias)(&op),\r\n\t\t})\r\n\t}\r\n\treturn json.Marshal(&struct {\r\n\t\tSecurity []map[string][]string `json:\"security\"`\r\n\t\t*Alias\r\n\t}{\r\n\t\tSecurity: op.Security,\r\n\t\tAlias:    (*Alias)(&op),\r\n\t})\r\n}\r\n```\r\n\r\nIts a little convoluted and I'm up for suggestions how to achieve the desired outcome more elegantly.\r\n\r\nNote: The solution is based on this blog post: http://choly.ca/post/go-json-marshalling/ Heh, yep. Bit me too :)  I hacked this in for each of my paths/methods.\r\n\r\n```go\r\nSecurity = []map[string][]string{\r\n  map[string][]string{\r\n   \"myAPIKey\": emptyslice,\r\n  },\r\n}\r\n``` I submitted https://github.com/go-openapi/spec/pull/40 to address the discussed regression  ## Problem statement\r\nThe client parameter generated method `WriteToRequest` (found here)[https://github.com/go-swagger/go-swagger/blob/master/generator/templates/client/parameter.gotmpl#L239] seems to incorrectly omit the `SetBodyParam` when a parameter is defined as `in: body` and `schema.type: array`.\r\n\r\n## Swagger specification\r\n```\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"title\": \"GoSwaggerClientBodyParameterBug\",\r\n    \"version\": \"2.0\"\r\n  },\r\n  \"paths\": {\r\n    \"/foo\": {\r\n      \"post\": {\r\n        \"consumes\": [\r\n          \"application/json\"\r\n        ],\r\n        \"parameters\": [\r\n          {\r\n            \"name\": \"arrayBody\",\r\n            \"in\": \"body\",\r\n            \"description\": \"an array of json objects\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"type\": \"array\",\r\n              \"items\": {\r\n                \"properties\": {\r\n                  \"bar\": {\r\n                    \"type\": \"string\"\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"OK\"\r\n          },\r\n          \"400\": {\r\n            \"description\": \"Bad Request\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n## Steps to reproduce\r\n1. use the swagger spec described above to generate the client code\r\n2. note how the `client/operations/post_foo_parameters.go:PostFooParams.WriteToRequest` is missing the call to `r.SetBodyParam(o.ArrayBody)`\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: 1.9.2\r\nOS: macOS 10.13.1\r\n It definitely does not work with current master if body schema is type 'string' and format 'byte'. Generated client code is missing r.SetBodyParam(...).\r\n\r\nDidn't check op's case with array. I am able to reproduce this issue with the current master, in my test I used an array of objects. \r\n\r\nEdit:\r\nLooking further into this, #1313 was supposed to be a fix for arrays of objects. To make my case more specific, I use an array of definitions:\r\n```yaml\r\n---\r\nparameters:\r\n  - name: flex\r\n    in: body\r\n    required: true\r\n    schema:\r\n      type: array\r\n      items:\r\n        $ref: '#/definitions/SetFlex'\r\n---\r\nSetFlex:\r\n  type: object\r\n  properties:\r\n    set:\r\n      type: boolean\r\n      description: 'To...\r\n---\r\n```  Extended template unit testing to validate environments from standard templates (missing: codeGenApp context) # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1275?src=pr&el=h1) Report\n> Merging [#1275](https://codecov.io/gh/go-swagger/go-swagger/pull/1275?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/0138adf0357c013ccba23b1bb962a140134bddfe?src=pr&el=desc) will **increase** coverage by `0.02%`.\n> The diff coverage is `68.75%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1275/graphs/tree.svg?src=pr&token=aQS1DepR8C&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1275?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1275      +/-   ##\n==========================================\n+ Coverage   72.46%   72.48%   +0.02%     \n==========================================\n  Files          28       28              \n  Lines        6504     6510       +6     \n==========================================\n+ Hits         4713     4719       +6     \n  Misses       1345     1345              \n  Partials      446      446\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1275?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1275/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `48.64% <\u00f8> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1275/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvb3BlcmF0aW9uLmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1275/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvY2xpZW50Lmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1275/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc3VwcG9ydC5nbw==) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1275/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `80.04% <100%> (+0.02%)` | :arrow_up: |\n| [generator/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1275/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL29wZXJhdGlvbi5nbw==) | `69.18% <100%> (+0.04%)` | :arrow_up: |\n| [cmd/swagger/commands/generate/server.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1275/diff?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc2VydmVyLmdv) | `67.53% <50%> (\u00f8)` | :arrow_up: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1275/diff?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `69.86% <85.71%> (+0.27%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1275?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1275?src=pr&el=footer). Last update [0138adf...dfe44a1](https://codecov.io/gh/go-swagger/go-swagger/pull/1275?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n I am lost with AppVeyor report.  There is no indication of what has gone wrong for this bot.\r\nOn my side, all tests are passing. \r\nAny hint? Well, ok. I am willing to abide by these ever stricter rules (!).\r\nAny indication as for where this occurs? This branch has not changed much code, so I am lost. I could see this AppVeyor CI deployed on windows.\r\nI am just wondering if it's connected to my changes in this particular PR or it's just because you did set up AppVeyor just recently and swagger is croaking a lot on stderr ? No logging has been explicitely added in this branch.\r\nHowever I think I get your point: since I call some high level methods in the new unit test, this probably croaks on stderr. I'll work on that hypothesis to get it right. @casualjim . Just to make sure I am not spending time in the wrong direction.\r\nIf I fix the CI issue you're okay with the feature?\r\n[if not, no problem, I'll just keep it on my fork, since I do need it: just simpler for me to avoid branching] Thanks Ivan. This is exactly how I did it.\r\nI had to fix precisely this other unit test which had a side effect by switching log back to Stderr after muting it.\r\nBesides the Execute() method I am testing had an end message with fmt.Fprintf(Stderr,...). Had to fix that too.\r\n\r\nOk. So when I run the full test on generator pkg, stderr is empty. There must be a catch.\r\n master should be repaired now, sorry about that  #1272 \r\n\r\nImprove error handling while generating templates. # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=h1) Report\n> Merging [#1273](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/b015bda48dfc648fdd95e7bc81dbb5cefc17c975?src=pr&el=desc) will **increase** coverage by `1.92%`.\n> The diff coverage is `45.67%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1273/graphs/tree.svg?height=150&width=650&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1273      +/-   ##\n==========================================\n+ Coverage   67.64%   69.57%   +1.92%     \n==========================================\n  Files          28       28              \n  Lines        7832     7868      +36     \n==========================================\n+ Hits         5298     5474     +176     \n+ Misses       2046     1948      -98     \n+ Partials      488      446      -42\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [cmd/swagger/commands/generate/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc3VwcG9ydC5nbw==) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `67.1% <0%> (\u00f8)` | :arrow_up: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `77.32% <0%> (+7.88%)` | :arrow_up: |\n| [cmd/swagger/commands/generate/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvb3BlcmF0aW9uLmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [cmd/swagger/commands/generate/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvY2xpZW50Lmdv) | `0% <0%> (\u00f8)` | :arrow_up: |\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `66.4% <100%> (\u00f8)` | :arrow_up: |\n| [generator/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree#diff-Z2VuZXJhdG9yL29wZXJhdGlvbi5nbw==) | `66.13% <50%> (\u00f8)` | :arrow_up: |\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `76.44% <55.93%> (+3.26%)` | :arrow_up: |\n| [cmd/swagger/commands/generate/server.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc2VydmVyLmdv) | `62.24% <66.66%> (\u00f8)` | :arrow_up: |\n| ... and [3 more](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=footer). Last update [b015bda...7653406](https://codecov.io/gh/go-swagger/go-swagger/pull/1273?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n @casualjim , so let's recap your review:\r\n\r\n  1.  comment out the defer() in main, since we expect stacks on panic().\r\n  I hope in the future, panic() would be better handled.\r\n  Possible alternative: baseImport() returns error (more changes)\r\n  2. more idiomatic go with error printing (e.g; \"%v\",err instead of %s,err.Error()\r\n  3. replace fmt.Print with log.Printf \r\n  4. operation_test.go : more idiomatic string joining (I didn't write this code, but ok to fix it)\r\n\r\n 5. Your opinion on the criticality of SpecPath() and TargetPath(): in my view, it's okay (and not much changing with master to return blank string on errors - just more explicit)\r\n\r\nOkay with that?\r\n\r\nCheers,\r\n\r\nFred There are still annoying behaviors on Windows. I installed everything on Windos and trying to fix things up on this os. Should be fine on windows now. Unit test suite (culprit: TestBaseImport) did block when not run as admin. Fixed that by skipping test if OS does not enable symlink for the current user. Thanks Ivan for the cheer up. \r\n\r\nDifficult to get around codecov/patch since this PR specialized on error handling and that few unit tests did dig into all error causes.\r\n\r\nMostly codecov/patch complains about \"untested\" deltas resulting from mere gofmt or log message. Untested they were, untested they remain (for now).\r\n\r\nAnyhow, I tried hard to improve test coverage (btw codecov result is disappointing: I got a better impression on my go tool cover stats...).\r\n\r\n_En passant_, fixed a small bug: loading custom template files (not assets, new ones) from TargetTemplate and not \".\".\r\n\r\nNext contribution will be I think a small tutorial about playing with templates...  Was the 0.13.0 version actually released?\r\n\r\nI can see a new tag and the change log for it committed but the https://github.com/go-swagger/go-swagger/releases/latest still points to 0.12.0 and https://github.com/go-swagger/go-swagger/releases/download/0.13.0/swagger* returns 404. Looks like 0.13.0 was actually released in the end. Closing...  ## Problem statement\r\n\r\nHi, I've wrote a simple example:\r\n\r\n```\r\n// swagger:meta\r\npackage main\r\n\r\nimport (\r\n\t\"github.com/gin-gonic/gin\"\r\n)\r\n\r\n// swagger:model\r\ntype Book struct {\r\n\t// required: true\r\n\tId int `json:\"id\"`\r\n\t// required: true\r\n\tAuthor string `json:\"author\"`\r\n}\r\n\r\n// swagger:response customResponse\r\ntype CustomResponse struct {\r\n\t// in: body\r\n\tBody *Book `json:\"body,omitempty\"`\r\n}\r\n\r\nfunc main() {\r\n\tr := gin.Default()\r\n\tr.GET(\"/book\", GetBooks)\r\n\tr.Run(\":3001\")\r\n}\r\n\r\nfunc GetBooks(c *gin.Context) {\r\n\t// swagger:route GET /book listBooks\r\n\t//\r\n\t//     Consumes:\r\n\t//     - application/json\r\n\t//\r\n\t//     Produces:\r\n\t//     - application/json\r\n\t//\r\n\t//     Schemes: http, https, ws, wss\r\n\t//\r\n\t//     Responses:\r\n\t//       200: customResponse\r\n\tc.JSON(200, &Book{Id: 1, Author: \"John Doe\"})\r\n}\r\n```\r\n\r\nbut  I've got an error when I've tried to generate specification (swagger generate spec -o ./swagger.json -b ./) with next message:\r\n\r\n> unable to determine package for $GOPATH/main.go If main.go is in $GOPATH/src error is the same  ## Problem statement\r\n\r\ngo-swagger errors out on a nullable fied in a definition:\r\n\r\n```\r\n   \"definitions\": {\r\n        \"AddLabel\": {\r\n            \"description\": \"Adds a label to a manifest\",\r\n            \"properties\": {\r\n                \"media_type\": {\r\n                    \"description\": \"The media type for this label\",\r\n                    \"enum\": [\r\n                        \"text/plain\",\r\n                        \"application/json\",\r\n                        null\r\n                    ],\r\n                    \"type\": [\r\n                        \"string\",\r\n                        \"null\"\r\n                    ]\r\n                }\r\n```\r\n\r\nThe (not obvious at all) error is:\r\n\r\n```\r\ntemplate: schemavalidator:370:65: executing \"schemavalidator\" at <.>: wrong type for value; expected \r\n```\r\n\r\nI'm not well versed into swagger, a quick glance at the 2.0 spec tells me it may not be a valid swagger document, but I gathered I may as well file an issue just in case.\r\n\r\n## Swagger specification\r\n\r\nNot sure, `https://quay.io/api/v1/discovery`.\r\n\r\n## Steps to reproduce\r\n\r\n1. Download swagger definition at `https://quay.io/api/v1/discovery`\r\n2. Try go generate client library with `swagger generate client -f api.json -A client -c quay -a quay`\r\n3. This error out with:\r\n```\r\n2017/11/13 13:49:22 rendering 1 templates for model AddLabel\r\n2017/11/13 13:49:22 name field AddLabel\r\n2017/11/13 13:49:22 package field models\r\n2017/11/13 13:49:22 creating \"add_label.go\" in \"models\" as definition\r\ntemplate: schemavalidator:370:65: executing \"schemavalidator\" at <.>: wrong type for value; expected string; got interface {}\r\n```\r\n\r\n## Environment\r\nswagger version: `dev` (master, b015bda48dfc648fdd95e7bc81dbb5cefc17c975) as of today\r\ngo version: 1.9.0\r\nOS: Linux All properties are optional unless you list them in the `required` section.  As such, you don't have to do anything with `\"null\"` there to make it so. Thanks for the quick answers. Based on that I think we can close this issue.  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1262?src=pr&el=h1) Report\n> Merging [#1262](https://codecov.io/gh/go-swagger/go-swagger/pull/1262?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/53c7ee54f7dc80f5ba41c3646ff2632abaad7d40?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1262/graphs/tree.svg?token=aQS1DepR8C&width=650&src=pr&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1262?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1262   +/-   ##\n=======================================\n  Coverage   67.64%   67.64%           \n=======================================\n  Files          28       28           \n  Lines        7832     7832           \n=======================================\n  Hits         5298     5298           \n  Misses       2046     2046           \n  Partials      488      488\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1262?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1262?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `60.32% <100%> (\u00f8)` | :arrow_up: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1262?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `67.1% <100%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1262?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1262?src=pr&el=footer). Last update [53c7ee5...5a935e4](https://codecov.io/gh/go-swagger/go-swagger/pull/1262?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\nServer generation.\r\n\r\nWhen response schema is specified by $ref which defines an array structure, the generated model is not correct and does not compile, with a \"cannot make [type]\" error.\r\nNamely, the initialization of the structure ( {{ Schema.Zero}} initialization method) does not reflect the generated nature of the type.\r\n\r\n- generated type with $ref uses an 'OAI' type alias and a struct:\r\n```\r\ntype xxx struct {\r\n   OAIxxx \r\n}\r\n```\r\n- generated OAI alias:\r\n`type OAIxxx []string`\r\n\r\nWhen no ref is used (e.g. array declared inline in the definitions of the \r\nswagger file), there is no \"OAI\" alias type and compilation proceeds normally.\r\n\r\nWhen the type is an object and not an array, the generator recognize this type as a complex type and does not attempt to use the make built-in to initialize it.\r\n\r\nThe problem really here is to assimilate type X and type Y struct { X }, which the compiler does not accept.\r\n\r\nOne would expect the code generated with $ref to be identical to the one with inline schema.\r\n\r\n## Swagger specification\r\n2.0\r\n\r\n## Steps to reproduce\r\nswagger specification YAML\r\n[test3-ter-swagger.yaml.txt](https://github.com/go-swagger/go-swagger/files/1462315/test3-ter-swagger.yaml.txt)\r\n\r\nJSON schema referred to\r\n[test3-ter-model-schema.json.txt](https://github.com/go-swagger/go-swagger/files/1462317/test3-ter-model-schema.json.txt)\r\n\r\n```\r\nswagger generate server -f ../../models/test3-ter-swagger.yaml\r\n```\r\n\r\nMove to cmd/{server} directory then:\r\n```\r\n>go build\r\n# .../restapi/operations\r\n../../restapi/operations/get_all_responses.go:54:18: cannot make type models.B\r\n```\r\n## Environment\r\nswagger version: build from source origin/master\r\n```\r\n>git describe\r\n0.12.0-49-g783e5bb\r\n```\r\n\r\ngo version: 1.9\r\nOS:   linux ubuntu.14.04\r\n In my opinion, all these problems with $ref (#1258, #1259, #1260) are linked to a fundamental defect in the resolution of references, namely, the design choice to \"flatten\" things (probably for easier caching).\r\n\r\nOk I got it, if I flatten everything with no $ref, I 'll get it allright...\r\nBut this would defeat the purpose of SWAGGER spec '$ref' feature, that is allowing for heavy reuse of the underlying data model as message definitions for the interface. Thank you Ivan for your reply. Agree with your definitions of the use cases.\r\nAgree too that flattening should, theoretically, make no difference (unless we get type naming conflicts in the definition tree, which might occur, but let's put that aside...).\r\n\r\nMy opinion above was supported by my investigations of the various $ref issues found yesterday, in particular the way the modifiyRef() works. I may have misinterpreted its inner workings, as I am not (yet) familiar with the code base.\r\nIn the reported case ('xxx has no key', #1258), the generator desperately tries to find the key at the root of definitions whereas it has been already been defined deeper by the $ref. I inferred (perhaps mistakenly) that the flattening was the problem. The problem is with the id field which openapi 2.0 doesn't support. see here: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schemaObject\r\n\r\nthe supported properties are the ones defined in that list Oh the issue is not with the $id\r\nThe problem is, the code generated has this line\r\n`payload = make(models.B, 0, 50)` in get_all_responses.go\r\n\r\nB is defined as\r\n```go\r\n// B b\r\n// swagger:model b\r\ntype B struct {\r\n\tBOAIGen\r\n}\r\n```\r\n\r\nand BOAIGen is defined as\r\n```go\r\n// BOAIGen b OAI gen\r\n// swagger:model bOAIGen\r\ntype BOAIGen []string\r\n```\r\nSo I am guessing the code generator is embedding the BOAIGen when it shouldn't. \r\nIn other words, manually changing the generated code in get_all_responses.go to\r\n```go\r\npayload = &models.B{\r\n\tBOAIGen: make(models.BOAIGen, 0, 50),\r\n}\r\n```\r\nresolves the issue and the server starts properly For $id, I will let @casualjim answer that but in general, $id is almost already supported https://github.com/go-openapi/spec/blob/master/expander.go#L629\r\n\r\nThe only case where $id is not supported is when a $ref is pointing to a subschema that doesn't have an $id but inherits its $id from a parent schema/subschema.\r\n\r\nTo support this case, any $ref should not only get resolved but the whole file pointed to by the $ref should get analyzed to identify the $id of the particular subschema the $ref is pointing to.  ## Problem statement\r\nServer generation fails when referring to cascading $ref in different schema files.\r\nReference base path is wrongly formed.\r\n```\r\n>swagger generate server -f ../../models/test2-swagger.yaml \r\nThe swagger spec at \"../../models/test2-swagger.yaml\" is invalid against swagger specification 2.0. see errors :\r\n- open ./test2-schema.json/test2-bis-schema.json: no such file or directory\r\n```\r\n\r\n## Swagger specification\r\n2.0\r\n## Steps to reproduce\r\nSwagger YAML files: ($ref to JSON file 1)\r\n[test2-swagger.yaml.txt](https://github.com/go-swagger/go-swagger/files/1481551/test2-swagger.yaml.txt)\r\n\r\n\r\nJSON schema file #1: ($ref to JSON file 2)\r\n[test2-schema.json.txt](https://github.com/go-swagger/go-swagger/files/1481556/test2-schema.json.txt)\r\n\r\n\r\nJSON schema file #2 \r\n[test2-bis-schema.json.txt](https://github.com/go-swagger/go-swagger/files/1481557/test2-bis-schema.json.txt)\r\n\r\n\r\n## Environment\r\nswagger version: build from source cloned from origin/master\r\n```\r\n>git describe\r\n0.12.0-49-g783e5bb\r\n>\r\n```\r\ngo version: 1.9\r\nOS:   linux ubuntu 14.04\r\n Reference path resolution is altered by github.com/go-openapi/spec/refmodifier.go, in:\r\n```\r\nfunc modifyRefs(target *Schema, basePath string) {\r\n        if target.Ref.String() != \"\" {\r\n                if target.Ref.RemoteURI() == basePath {\r\n                        return\r\n                }\r\n                newURL := fmt.Sprintf(\"%s%s\", basePath, target.Ref.String())\r\n                target.Ref, _ = NewRef(newURL)\r\n        }\r\n...\r\n```\r\n\r\nIt seems that the basePath is not kept up to date when recursing through a tree of $ref. You are right. Error messages are so terse... I fix and run again all my test cases. \r\nIf correct, this issue should revert to a (minor) lack of spec validation information. I'll tell you in a moment Arg. I am testing with the PR ongoing for go-openapi/spec referring to #1260 ... \r\nWith this code, the initial error message disappears, but still the generated model does not compile...\r\nI fixed the definition with the '#', with no significant change in this context. I'll try with the original spec from master. Ok rolled back to master spec pkg. I checked everywhere for similar faulty syntax (i.e; /# instead of #/). Behaviour reverts to what was originally posted. Updated test case to remove syntax problem.\r\nI believe it's innocuous anyhow in this case, since paths are cleaned from trailing slash and relative slash rebased with a slash, I mean 'x/#definitions' <=> 'x#definitions' <=> 'x#/definitions'.\r\n\r\nBut I am not  going to debate such schema compliance issues here: I admit it's a bit far fetched and error prone. So now the testcase focuses on the proper issue, that is cascading $ref.\r\n  Here's a minimal example of a parameter that takes in array of objects\r\n```\r\nswagger: '2.0'\r\ninfo:\r\n  title: Test\r\n  version: '1'\r\npaths:\r\n  /test:\r\n    post:\r\n      parameters:\r\n        - name: test\r\n          in: body\r\n          schema:\r\n            type: array\r\n            items:\r\n              type: object\r\n      responses:\r\n        200:\r\n          description: success\r\n```\r\n\r\nThis generates the following segment in the restapi/operations dir\r\n```\r\nvar body []interface{}\r\n...\r\nfor _, io := range body {\r\n   if err := io.Validate(route.Formats); err != nil {\r\n      res = append(res, err)\r\n      break\r\n  }\r\n}\r\n\r\nif len(res) == 0 {\r\n  o.Test = body\r\n}\r\n```\r\n\r\nThis causes a compile error because `io.Validate` is not valid on `interface{}`.\r\n\r\nI *think* we should be checking for `.Child.IsInterface` instead of `.Schema.IsInterface`. Given that `.IsArray` is already `true`, I'm not sure if `.Schema.IsInterface` is the right check. \r\nPlease correct me if I misinterpreted this section. \r\nMy expectation is that in the case of `Items []interface{}` the `for` loop should not be generated. # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1257?src=pr&el=h1) Report\n> Merging [#1257](https://codecov.io/gh/go-swagger/go-swagger/pull/1257?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/783e5bb10a5b456e3779c3d06e6e5a37d0500602?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1257/graphs/tree.svg?width=650&src=pr&token=aQS1DepR8C&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1257?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1257   +/-   ##\n=======================================\n  Coverage   67.64%   67.64%           \n=======================================\n  Files          28       28           \n  Lines        7832     7832           \n=======================================\n  Hits         5298     5298           \n  Misses       2046     2046           \n  Partials      488      488\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1257?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1257?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `60.32% <100%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1257?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1257?src=pr&el=footer). Last update [783e5bb...d02951e](https://codecov.io/gh/go-swagger/go-swagger/pull/1257?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n Will do. Checked in the generated bindata.go  Hello,\r\n\r\nWith help of @casualjim (on Slack) I managed to set up Swagger in my Go project(s). Although I do prefer the way of setting it up in SpringBoot (which is what I was used to before moving to Go) I can see why it needs to be this way in Go.\r\n\r\nThe UI that I was used to (and I prefer due to cleanliness) is [THIS](https://api.subledger.com/) one.\r\n\r\nThe UI that I get when serving the swagger.json file is the [Petstore](http://petstore.swagger.io/#/). \r\n\r\nIs there any way to get the 'other' UI? I don't know how to refer to it, as both are SwaggerUI to me.\r\n I get this:\r\n\r\n![image](https://user-images.githubusercontent.com/5403700/32463225-74337c3e-c33c-11e7-9f50-a7eb5649f836.png)\r\n\r\nThose are not my apis. I hope I was clear enough, I want to have the same UI as on api.subledger.com (and not like on petstore).\r\n\r\nThis is the command I used:\r\n\r\n![image](https://user-images.githubusercontent.com/5403700/32463265-99046078-c33c-11e7-84f0-3ba34174ee57.png)\r\n The one I wanted is Swagger-UI v2, and the one included with go-swagger is Swagger-UI v3.  Fixes #1246 # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1247?src=pr&el=h1) Report\n> Merging [#1247](https://codecov.io/gh/go-swagger/go-swagger/pull/1247?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/f8a2c645b15b4dff8ebeaa6d5318ecdaa54dd664?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1247/graphs/tree.svg?width=650&height=150&token=aQS1DepR8C&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1247?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1247   +/-   ##\n=======================================\n  Coverage   67.54%   67.54%           \n=======================================\n  Files          28       28           \n  Lines        7812     7812           \n=======================================\n  Hits         5277     5277           \n  Misses       2048     2048           \n  Partials      487      487\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1247?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1247?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `60.32% <\u00f8> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1247?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1247?src=pr&el=footer). Last update [f8a2c64...17c6b68](https://codecov.io/gh/go-swagger/go-swagger/pull/1247?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n Done. not sure why so much changed in the generated bindata though.  ## Problem statement\r\nWhen generating a server from a simple swagger file the reverse way of generating the spec from that codebase does not work.\r\n\r\n## Swagger specification\r\n```\r\nconsumes:\r\n  - application/json\r\ninfo:\r\n  title: Kubernikus\r\n  version: 1.0.0\r\nproduces:\r\n  - application/json\r\nswagger: '2.0'\r\npaths:\r\n  /info:\r\n    get:\r\n      operationId: Info\r\n      summary: Get info about Kubernikus\r\n      responses:\r\n        '200':\r\n          description: OK\r\n          schema:\r\n            $ref: '#/definitions/Info'\r\ndefinitions:\r\n  Info:\r\n    properties:\r\n      version:\r\n        type: string\r\n```\r\n## Steps to reproduce\r\n```\r\nswagger-0.12.0 generate server --name test\r\n[...]\r\nswagger-0.12.0 generate spec -m -b cmd-server/\r\nExpr (/usr/local/Cellar/go/1.9.1/libexec/src/net/http/request.go:177:10) is unsupported for a schema\r\n```\r\n## Environment\r\nswagger version: 0.12.0  \r\ngo version: 1.9.1\r\nOS:  OSX\r\n Seems like `HTTPRequest *http.Request` that gets added to param structs is missing a `json:\"-\"` so that the spec generator ignores it. sure, np  ## Problem statement\r\nIf some content type like \"image/png\" or \"*/*\" is specified in \"produces\" part schema, generated client does not accept those content types and errors out with 'no consumer: \"image/png\"'.\r\n\r\nSpecifically, we use a schema like the one below and respond to user requests with binary data and set content-type header manually based on mime-type of the data. It works fine if you access it from curl or web browser but errors in go-swagger generated client.\r\n\r\n## Swagger specification\r\n```\r\nswagger: \"2.0\"\r\ninfo:\r\n  title: Test\r\n  version: 0.0.1\r\nschemes:\r\n- \"http\"\r\npaths:\r\n  /test:\r\n    get:\r\n      produces:\r\n        - \"application/octet-stream\"\r\n        - \"*/*\"\r\n      responses:\r\n        200:\r\n          description: 200 response\r\n          headers:\r\n            Content-Type:\r\n              type: string\r\n          schema:\r\n            type: string\r\n            format: byte\r\n``` I need to specify correct content-type so web browser is able to pick it up as correct content and display/act accordingly.\r\n\r\nWhat I guess I really need is a default consumer for generated client that if set, acts as a fallback option (most likely it will just act as a default ByteStreamConsumer). I need that since I cannot specify beforehand which content-types will be used.\r\n\r\nSomewhere here:\r\nhttps://github.com/go-openapi/runtime/blob/master/client/runtime.go#L324-L327  ## Problem statement\r\n\r\nI'm trying to use $ref to define common response headers to avoid duplication, but this generates a \"forbidden property\" error on validation.  Is this expected?\r\n\r\n## Swagger specification\r\n```\r\n---\r\nswagger: \"2.0\"\r\ninfo:\r\n  title: \"Load Balancing Service API\"\r\n  description: API for the Load Balancing Service\r\n  version: \"20170115\"\r\n\r\nbasePath: /20170115\r\n\r\npaths:\r\n  /loadBalancers/{loadBalancerId}/backendSets:\r\n    get:\r\n      summary: \"ListBackendSets\"\r\n      tags: ['loadBalancer']\r\n      description: Lists all backend sets associated with a given load balancer.\r\n      operationId: \"ListBackendSets\"\r\n      produces:\r\n      - \"application/json\"\r\n      responses:\r\n        200:\r\n          description: The list is being retrieved.\r\n          headers:\r\n            opc-response-id:\r\n              $ref: '#/x-descriptions/opc-response-id'\r\n\r\nx-descriptions:\r\n opc-response-id:\r\n    description: |\r\n      Unique identifier for the response.\r\n    type: string\r\n```\r\n## Steps to reproduce\r\n```\r\n$ /usr/local/bin/swagger validate test.yaml \r\nThe swagger spec at \"test.yaml\" is invalid against swagger specification 2.0. see errors :\r\n- must validate one and only one schema (oneOf)\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-request-id.$ref in body is a forbidden property\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-request-id.type in body is required\r\n- must validate one and only one schema (oneOf)\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-request-id.$ref in body is a forbidden property\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-request-id.type in body is required\r\n- must validate one and only one schema (oneOf)\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-request-id.$ref in body is a forbidden property\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-request-id.type in body is required\r\n- must validate one and only one schema (oneOf)\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-request-id.$ref in body is a forbidden property\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-request-id.type in body is required\r\n```\r\n## Environment\r\nswagger version:\r\nversion: 0.12.0\r\ncommit: 8135eb6728e43b73489e80f94426e6d387809502\r\n \r\ngo version: go1.9.1 darwin/amd64 \r\nOS: macOS Sierra 10.12.6\r\n If I view this same yaml file in Swagger Editor it seems to follow the #ref and displays the description and type of the header:\r\n\r\n<img width=\"503\" alt=\"screen shot 2017-11-03 at 10 07 08 am\" src=\"https://user-images.githubusercontent.com/28943639/32386661-32b07c72-c07f-11e7-8d65-4de1f2c74890.png\">\r\n\r\n I see.  The language of the [openapi 3.0 spec](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#referenceObject) is more general and seems to allow the use of $ref anywhere.  Are there any plans to support 3.0? I tried your suggestion to use yaml anchors, this version loads in Swagger Editor and displays the headers as desired:\r\n\r\n```\r\n---\r\nswagger: \"2.0\"\r\ninfo:\r\n  title: \"Load Balancing Service API\"\r\n  description: API for the Load Balancing Service\r\n  version: \"20170115\"\r\n\r\nbasePath: /20170115\r\n\r\nx-descriptions:\r\n opc-response-id: &opc-response-id\r\n    description: |\r\n      Unique identifier for the response.\r\n    type: string\r\n  \r\npaths:\r\n  /loadBalancers/{loadBalancerId}/backendSets:\r\n    get:\r\n      summary: \"ListBackendSets\"\r\n      tags: ['loadBalancer']\r\n      description: Lists all backend sets associated with a given load balancer.\r\n      operationId: \"ListBackendSets\"\r\n      produces:\r\n      - \"application/json\"\r\n      responses:\r\n        200:\r\n          description: The list is being retrieved.\r\n          headers:\r\n            opc-response-id:\r\n              <<: *opc-response-id\r\n```\r\n\r\nHowever it still doesn't validate:\r\n\r\n```\r\n$ /usr/local/bin/swagger validate test.yaml \r\nThe swagger spec at \"test.yaml\" is invalid against swagger specification 2.0. see errors :\r\n- must validate one and only one schema (oneOf)\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-response-id.type in body is required\r\n- must validate one and only one schema (oneOf)\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-response-id.type in body is required\r\n- must validate one and only one schema (oneOf)\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-response-id.type in body is required\r\n- must validate one and only one schema (oneOf)\r\n- paths./loadBalancers/{loadBalancerId}/backendSets.get.responses.200.headers.opc-response-id.type in body is required\r\n```  Hi, we have an existing REST API with many clients using it and i was trying generate swagger.json file using annotations and was successfully able to create and host it. But the problem is with **query parameters.** \r\n\r\nThe existing URL looks something like this: **https://swagger/employee?id=value&project=value**\r\n\r\nWhen i use annotations, the parameters structs fields must be exported, so that the swagger:parameters annotation will recognize the params. This is fine in case where there are no query params in the URL.\r\n\r\nBut in query params case, after generating swagger.json file with annotations  the URL will look something like this: **https://swagger/employee?Id=value&Project=value** , where the first letter of the param key is always upper case and failing to fetch the data. This is because of exporting the fields in parameters struct.\r\n\r\nIs there a way to generate these in lower case other than changing the API code and making the clients not to use new URLs ?\r\n\r\n## Environment\r\nswagger version: 2.0\r\ngo version: 1.8 \r\nOS:  windows\r\n Great ! Thanks for the reply :)   # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1239?src=pr&el=h1) Report\n> Merging [#1239](https://codecov.io/gh/go-swagger/go-swagger/pull/1239?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/a7f694139e2fb0ab5fb8161be66e91ef5731c709?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1239/graphs/tree.svg?height=150&width=650&token=aQS1DepR8C&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1239?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1239   +/-   ##\n=======================================\n  Coverage   67.53%   67.53%           \n=======================================\n  Files          28       28           \n  Lines        7808     7808           \n=======================================\n  Hits         5273     5273           \n  Misses       2048     2048           \n  Partials      487      487\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1239?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1239?src=pr&el=footer). Last update [a7f6941...be7b568](https://codecov.io/gh/go-swagger/go-swagger/pull/1239?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\nTrying to codegen a seemingly valid swagger spec segaults the swagger cli tool.\r\n\r\n## Swagger specification\r\nSwagger spec that causes the segfault:\r\n```\r\nswagger: '2.0'\r\ninfo:\r\n  version: 0.0.1\r\n  title: PowerDNS Authoritative HTTP API\r\n  license:\r\n    name: MIT\r\nhost: localhost:8081\r\nbasePath: /api/v1\r\nschemes:\r\n  - http\r\nconsumes:\r\n  - application/json\r\nproduces:\r\n  - application/json\r\npaths:\r\n  /servers:\r\n    get:\r\n      summary: List all servers\r\n      operationId: listServers\r\n      tags:\r\n        - servers\r\n      responses:\r\n        '200':\r\n          description: An array of servers\r\n          schema:\r\n            $ref: '#/definitions/Servers'\r\n\r\n  '/servers/{server_id}':\r\n    get:\r\n      summary: List a server\r\n      operationId: listServer\r\n      tags:\r\n        - servers\r\n      parameters:\r\n        - name: server_id\r\n          in: path\r\n          required: true\r\n          description: The id of the server to retrieve\r\n          type: string\r\n      responses:\r\n        '200':\r\n          description: An server\r\n          schema:\r\n            $ref: '#/definitions/Server'\r\n\r\n  '/servers/{server_id}/zones':\r\n    get:\r\n      summary: List all Zones in a server\r\n      operationId: listZones\r\n      tags:\r\n        - zones\r\n      parameters:\r\n        - name: server_id\r\n          in: path\r\n          required: true\r\n          description: The id of the server to retrieve\r\n          type: string\r\n      responses:\r\n        '200':\r\n          description: An array of Zones\r\n          schema:\r\n            $ref: '#/definitions/Zones'\r\n\r\n  '/servers/{server_id}/zones/{zone_id}':\r\n    get:\r\n      summary: zone managed by a server\r\n      operationId: listZone\r\n      tags:\r\n        - zones\r\n      parameters:\r\n        - name: server_id\r\n          in: path\r\n          required: true\r\n          description: The id of the server to retrieve\r\n          type: string\r\n        - name: zone_id\r\n          type: string\r\n          in: path\r\n          required: true\r\n          description: The id of the zone to retrieve\r\n      responses:\r\n        '200':\r\n          description: A Zone\r\n          schema:\r\n            $ref: '#/definitions/Zone'\r\n\r\n\r\ndefinitions:\r\n  Server:\r\n    properties:\r\n      type:\r\n        type: string\r\n        description: 'Set to \u201cServer\u201d'\r\n      id:\r\n        type: string\r\n        description: 'The id of the server, \u201clocalhost\u201d'\r\n      daemon_type:\r\n        type: string\r\n        description: '\u201crecursor\u201d for the PowerDNS Recursor and \u201cauthoritative\u201d for the Authoritative Server'\r\n      version:\r\n        type: string\r\n        description: 'The version of the server software'\r\n      url:\r\n        type: string\r\n        description: 'The API endpoint for this server'\r\n      config_url:\r\n        type: string\r\n        description: 'The API endpoint for this server\u2019s configuration'\r\n      zones_url:\r\n        type: string\r\n        description: 'The API endpoint for this server\u2019s zones'\r\n\r\n  Servers:\r\n    type: array\r\n    items:\r\n      $ref: '#/definitions/Server'\r\n\r\n  Zone:\r\n    properties:\r\n      id:\r\n        type: string\r\n        description: 'Opaque zone id (string), assigned by the server, should not be interpreted by the application. Guaranteed to be safe for embedding in URLs.'\r\n      name:\r\n        type: string\r\n        description: 'Name of the zone (e.g. \u201cexample.com.\u201d) MUST have a trailing dot'\r\n      type:\r\n        type: string\r\n        description: 'Set to \u201cZone\u201d'\r\n      url:\r\n        type: string\r\n        description: 'API endpoint for this zone'\r\n      kind:\r\n        type: string\r\n        enum:\r\n          - 'Native'\r\n          - 'Master'\r\n          - 'Slave'\r\n        description: 'Zone kind, one of \u201cNative\u201d, \u201cMaster\u201d, \u201cSlave\u201d'\r\n      rrsets:\r\n        type: object\r\n        items:\r\n          $ref: '#/definitions/RRSets'\r\n        description: 'RRSets in this zone'\r\n      serial:\r\n        type: integer\r\n        description: 'The SOA serial number'\r\n      notified_serial:\r\n        type: integer\r\n        description: 'The SOA serial notifications have been sent out for'\r\n      masters:\r\n        type: array\r\n        items:\r\n          type: string\r\n        description: ' List of IP addresses configured as a master for this zone (\u201cSlave\u201d type zones only)'\r\n      dnssec:\r\n        type: boolean\r\n        description: 'Whether or not this zone is DNSSEC signed (inferred from presigned being true XOR presence of at least one cryptokey with active being true)'\r\n      nsec3param:\r\n        type: string\r\n        description: 'The NSEC3PARAM record'\r\n      nsec3narrow:\r\n        type: boolean\r\n        description: 'Whether or not the zone uses NSEC3 narrow'\r\n      presigned:\r\n        type: boolean\r\n        description: 'Whether or not the zone is pre-signed'\r\n      soa_edit:\r\n        type: string\r\n        description: 'The SOA-EDIT metadata item'\r\n      soa_edit_api:\r\n        type: string\r\n        description: 'The SOA-EDIT-API metadata item'\r\n      api_rectify:\r\n        type: boolean\r\n        description: ' Whether or not the zone will be rectified on data changes via the API'\r\n      zone:\r\n        type: string\r\n        description: 'MAY contain a BIND-style zone file when creating a zone'\r\n      account:\r\n        type: string\r\n        description: 'MAY be set. Its value is defined by local policy'\r\n      nameservers:\r\n        type: array\r\n        items:\r\n          type: string\r\n        description: 'MAY be sent in client bodies during creation, and MUST NOT be sent by the server. Simple list of strings of nameserver names, including the trailing dot. Not required for slave zones.'\r\n\r\n  Zones:\r\n    type: array\r\n    items:\r\n      $ref: '#/definitions/Zone'\r\n\r\n  RRSets:\r\n    type: array\r\n    items:\r\n      $ref: '#/definitions/RRSet'\r\n\r\n  RRSet:\r\n    properties:\r\n      name:\r\n        type: string\r\n        description: 'Name for record set (e.g. \u201cwww.powerdns.com.\u201d)'\r\n      type:\r\n        type: string\r\n        description: 'Type of this record (e.g. \u201cA\u201d, \u201cPTR\u201d, \u201cMX\u201d)'\r\n      ttl:\r\n        type: integer\r\n        description: 'DNS TTL of the records, in seconds. MUST NOT be included when changetype is set to \u201cDELETE\u201d.'\r\n      changetype:\r\n        type: string\r\n        description: 'MUST be added when updating the RRSet. Must be REPLACE or DELETE. With DELETE, all existing RRs matching name and type will be deleted, including all comments. With REPLACE: when records is present, all existing RRs matching name and type will be deleted, and then new records given in records will be created. If no records are left, any existing comments will be deleted as well. When comments is present, all existing comments for the RRs matching name and type will be deleted, and then new comments given in comments will be created.'\r\n      records:\r\n        type: array\r\n        description: 'All records in this RRSet. When updating Records, this is the list of new records (replacing the old ones). Must be empty when changetype is set to DELETE. An empty list results in deletion of all records (and comments).'\r\n        items:\r\n          $ref: '#/definitions/Record'\r\n      comments:\r\n        type: array\r\n        description: 'List of Comment. Must be empty when changetype is set to DELETE. An empty list results in deletion of all comments. modified_at is optional and defaults to the current server time.'\r\n        items:\r\n          $ref: '#/definitions/Comment'\r\n\r\n  Record:\r\n    properties:\r\n      content:\r\n        type: string\r\n        description: 'The content of this record'\r\n      disabled:\r\n        type: boolean\r\n        description: 'Whether or not this record is disabled'\r\n      set-ptr:\r\n        type: boolean\r\n        description: 'f set to true, the server will find the matching reverse zone and create a PTR there. Existing PTR records are replaced. If no matching reverse Zone, an error is thrown. Only valid in client bodies, only valid for A and AAAA types. Not returned by the server.'\r\n\r\n  Comment:\r\n    properties:\r\n      content:\r\n        type: string\r\n        description: 'The actual comment'\r\n      account:\r\n        type: string\r\n        description: 'Name of an account that added the comment'\r\n      modifided_at:\r\n        type: integer\r\n        description: 'Timestamp of the last change to the comment'\r\n```\r\n\r\nWhile the spec is very large, I think the relevant part has something to do with nesting an object in the schema definition. The following patch to the above spec seems to make the problem go away (authoritative-api-swagger.yaml is the working version while the .bkp is the borked one):\r\n\r\n```\r\n$ diff authoritative-api-swagger.yaml{,.bkp}\r\n27,29d26\r\n<             #type: array\r\n<             #items:\r\n<             #  $ref: '#/definitions/Server'\r\n66,68d62\r\n<             #type: array\r\n<             #items:\r\n<             #  $ref: '#/definitions/Zone'\r\n146c140\r\n<         type: array\r\n---\r\n>         type: object\r\n148c142\r\n<           $ref: '#/definitions/RRSet'\r\n---\r\n>           $ref: '#/definitions/RRSets'\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n$ swagger validate authoritative-api-swagger.yaml.bkp\r\nThe swagger spec at \"authoritative-api-swagger.yaml.bkp\" is valid against swagger specification 2.0\r\nswagger generate client -f authoritative-api-swagger.yaml -A pdns-go\r\n\r\n$ swagger generate client -f authoritative-api-swagger.yaml.bkp -A pdns-go\r\n2017/10/30 18:16:40 building a plan for generation\r\n2017/10/30 18:16:40 planning definitions\r\nDEBUG: name - %v RRSets\r\nDEBUG: name - %v rrsets\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0xe pc=0x9608ab]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).NewSliceBranch(0xc421706c00, 0xc421b966c0, 0x1)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/model.go:388 +0x60b\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildArray(0xc421706c00, 0x0, 0x0)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/model.go:1082 +0xd5\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildItems(0xc421706c00, 0x0, 0x0)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/model.go:1118 +0xc8e\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).makeGenSchema(0xc421706c00, 0xc420cfd8f0, 0x6)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/model.go:1459 +0xa6f\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildProperties(0xc421706000, 0xc4217062c0, 0xc4228759b8)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/model.go:674 +0x304\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).makeGenSchema(0xc421706000, 0x0, 0xc421c01a10)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/model.go:1447 +0x9a6\r\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinitionHierarchy(0xc420d37ce0, 0x4, 0xc421337db0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/model.go:166 +0x31a\r\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinition(0xc420d37ce0, 0x4, 0xc421337db0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/model.go:133 +0xbc\r\ngithub.com/go-swagger/go-swagger/generator.(*appGenerator).makeCodegenApp(0xc42031ad20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/support.go:602 +0x5d9\r\ngithub.com/go-swagger/go-swagger/generator.(*clientGenerator).Generate(0xc42031ad20, 0xc42031ad20, 0x6)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/client.go:117 +0x78\r\ngithub.com/go-swagger/go-swagger/generator.GenerateClient(0x7ffc9828b199, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4204165a0, 0xc4204c7c98, ...)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/generator/client.go:109 +0x751\r\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.(*Client).Execute(0xc42080fe00, 0xc42081e420, 0x0, 0x6, 0xc42080fe00, 0x1)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/client.go:103 +0x41c\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).ParseArgs(0xc42081e3c0, 0xc4200100f0, 0x6, 0x6, 0x410a98, 0x30, 0xc4202f2a20, 0xc4201ed580, 0xc4201ece48)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:316 +0x893\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).Parse(0xc42081e3c0, 0x6, 0xbaa9d7, 0x6, 0x0, 0xbf3197)\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:186 +0x73\r\nmain.main()\r\n        /spare/local/ajaisingh/goworkspace/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go:105 +0x858\r\n```\r\n\r\n## Environment\r\nswagger version: 2.0  \r\ngo version: go version go1.8.3 linux/amd64  \r\nOS: Ubuntu 16.04\r\n This is likely your problem:\r\n\r\n      rrsets:\r\n        type: object\r\n        items:\r\n          $ref: '#/definitions/RRSets'\r\n        description: 'RRSets in this zone'\r\n\r\n`items` is for `array`, not `object`.  If you want to embed that directly, just do this:\r\n\r\n      rrsets:\r\n        $ref: '#/definitions/RRSets'\r\n \r\nNote that you can't then have a `description` there with the `$ref`.\r\n @gregmaar You're right, except the validator does not seem to error out, which I was hoping it would. Interesting.  The spec doesn't actually say that `items` is not valid for `object`, only that it's required for `array`.  That might be why the validator doesn't catch it. @gregmarr Is that a problem in the spec definition or in the codegen/parser? I honestly have no idea, @casualjim will need to chime in here.\r\n This issue has been addressed in https://github.com/go-openapi/validate/pull/32 but the changes are not pulled to go-swagger/vendor yet  ## Problem statement\r\n\r\nWhen I define an object and take another as reference. Seemed generated code of the object take others for reference don't validate the referenced one.\r\nIn below example, when try to put a sg only will check if md is exist won't check the value in it.\r\nValidation function is generated while not called.\r\n\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"description\": \"This is a sample server sg server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).     filters.\",\r\n    \"version\": \"1.0.0\",\r\n    \"title\": \"Swagger Sg\",\r\n    \"termsOfService\": \"http://swagger.io/terms/\",\r\n    \"contact\": {\r\n      \"email\": \"apiteam@swagger.io\"\r\n    },\r\n    \"license\": {\r\n      \"name\": \"Apache 2.0\",\r\n      \"url\": \"http://www.apache.org/licenses/LICENSE-2.0.html\"\r\n    }\r\n  },\r\n  \"host\": \"localhost:32260\",\r\n  \"basePath\": \"/ccmts-config/v2\",\r\n  \"tags\": [\r\n    {\r\n      \"name\": \"sg\",\r\n      \"description\": \"Everything about your sg\",\r\n      \"externalDocs\": {\r\n        \"description\": \"Find out more\",\r\n        \"url\": \"http://swagger.io\"\r\n      }\r\n    },\r\n    {\r\n      \"name\": \"global\",\r\n      \"description\": \"Everything about your global settings\"\r\n    }\r\n  ],\r\n  \"schemes\": [\r\n    \"http\"\r\n  ],\r\n  \"paths\": {\r\n    \"/sg\": {\r\n      \"put\": {\r\n        \"tags\": [\r\n          \"sg\"\r\n        ],\r\n        \"summary\": \"Add a new sg  to the store\",\r\n        \"description\": \"\",\r\n        \"operationId\": \"add sg\",\r\n        \"consumes\": [\r\n          \"application/json\"\r\n        ],\r\n        \"produces\": [\r\n          \"application/json\"\r\n        ],\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"body\",\r\n            \"name\": \"body\",\r\n            \"description\": \"sg object that needs to be added to the store\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/sg\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"405\": {\r\n            \"description\": \"Invalid input\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"/sg/{sgId}\": {\r\n      \"get\": {\r\n        \"tags\": [\r\n          \"sg\"\r\n        ],\r\n        \"summary\": \"Find sg by ID\",\r\n        \"description\": \"Returns a sg\",\r\n        \"operationId\": \"getsgById\",\r\n        \"produces\": [\r\n          \"application/json\"\r\n        ],\r\n        \"parameters\": [\r\n          {\r\n            \"name\": \"sgId\",\r\n            \"in\": \"path\",\r\n            \"description\": \"ID of sg to return\",\r\n            \"required\": true,\r\n            \"type\": \"integer\",\r\n            \"format\": \"int64\"\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"successful operation\",\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/sg\"\r\n            }\r\n          },\r\n          \"400\": {\r\n            \"description\": \"Invalid ID supplied\"\r\n          },\r\n          \"404\": {\r\n            \"description\": \"sg not found\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"/ptp\": {\r\n      \"put\": {\r\n        \"tags\": [\r\n          \"global\"\r\n        ],\r\n        \"summary\": \"Add new ptp settings to store\",\r\n        \"description\": \"\",\r\n        \"operationId\": \"add ptp\",\r\n        \"consumes\": [\r\n          \"application/json\"\r\n        ],\r\n        \"produces\": [\r\n          \"application/json\"\r\n        ],\r\n        \"parameters\": [\r\n          {\r\n            \"in\": \"body\",\r\n            \"name\": \"body\",\r\n            \"description\": \"sg object that needs to be added to the store\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/ptp\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"405\": {\r\n            \"description\": \"Invalid input\"\r\n          }\r\n        }\r\n      },\r\n      \"get\": {\r\n        \"tags\": [\r\n          \"global\"\r\n        ],\r\n        \"summary\": \"get ptp global settings\",\r\n        \"description\": \"Returns ptp global settings\",\r\n        \"operationId\": \"getptp\",\r\n        \"produces\": [\r\n          \"application/json\"\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"successful operation\",\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/ptp\"\r\n            }\r\n          },\r\n          \"404\": {\r\n            \"description\": \"ptp not found\"\r\n          }\r\n        }\r\n      },\r\n      \"delete\": {\r\n        \"tags\": [\r\n          \"global\"\r\n        ],\r\n        \"summary\": \"delete ptp global settings\",\r\n        \"description\": \"delete ptp global settings\",\r\n        \"operationId\": \"deleteptp\",\r\n        \"produces\": [\r\n          \"application/json\"\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"successful operation\",\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/ptp\"\r\n            }\r\n          },\r\n          \"404\": {\r\n            \"description\": \"ptp not deleted\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"definitions\": {\r\n    \"md\": {\r\n      \"properties\": {\r\n        \"mac\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"string\"\r\n        },\r\n        \"adminState\": {\r\n          \"type\": \"boolean\",\r\n          \"default\": true\r\n        },\r\n        \"syncInterval\": {\r\n          \"type\": \"integer\",\r\n          \"format\": \"int32\",\r\n          \"maximum\": 3000,\r\n          \"minimum\": 0\r\n        },\r\n        \"priDcid\": {\r\n          \"type\": \"array\",\r\n          \"items\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int8\",\r\n            \"minimum\": 0,\r\n            \"maximum\": 166,\r\n            \"uniqueItems\": true\r\n          }\r\n        },\r\n        \"ucid\": {\r\n          \"type\": \"array\",\r\n          \"items\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"int8\",\r\n            \"minimum\": 0,\r\n            \"maximum\": 166,\r\n            \"uniqueItems\": true\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"sg\": {\r\n      \"type\": \"object\",\r\n      \"required\": [\r\n        \"md\"\r\n      ],\r\n      \"properties\": {\r\n        \"sgId\": {\r\n          \"type\": \"integer\",\r\n          \"format\": \"int32\"\r\n        },\r\n        \"ds\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"string\"\r\n        },\r\n        \"us\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"string\"\r\n        },\r\n        \"md\": {\r\n          \"type\": \"array\",\r\n          \"items\": {\r\n            \"$ref\": \"#/definitions/md\"\r\n          }\r\n        }\r\n      },\r\n      \"xml\": {\r\n        \"name\": \"sg\"\r\n      }\r\n    },\r\n    \"ptp\": {\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"ptpMasterIp\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"string\",\r\n          \"pattern\": \"((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\"\r\n        },\r\n        \"ptpGwIp\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"string\",\r\n          \"pattern\": \"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$\"\r\n        }\r\n      },\r\n      \"xml\": {\r\n        \"name\": \"ptp\"\r\n      }\r\n    }\r\n  }\r\n}\r\n## Steps to reproduce\r\n\r\njust generate code by \"swagger generate server -f swagger.json -A pattern -t test\"\r\n\r\n## Environment\r\nswagger version: dev \r\ngo version: go1.8.3  \r\nOS:   centos 7\r\n  Hi , i am new to swagger and  was trying to generate a swagger JSON file by using annotations in GO LANG. I annotated my code using the help of https://goswagger.io/ , but was unable to annotate the parameters that are required in my URL path and always get the following error when i put JSON file in swaggerUI. \r\n\r\nError: Declared path parameter \"id\" needs to be defined as a path parameter at either the path or operation level.\r\n\r\nAnnotated something like this: \r\n// GetEmployeeData handles a GET to /example/{id}\r\n\t\t//\r\n\t\t// swagger:route GET /example/{id} getEmployee\r\n\t\t//\r\n\t\t// Parameters:\t id int  in:path\ttrue\t\"id\"\r\n\t\t//\r\n\t\t// Returns data of the employee.\r\n\t\t//\r\n\t\t//\tProduces:\r\n\t\t//\t- application/json\r\n\t\t//\r\n\t\t//     Responses:\r\n\t\t//       200: getEmployee\r\n\t\tfunc GetEmployee(w http.ResponseWriter, req *http.Request) {\r\n\tjson.NewEncoder(w).Encode(people)\r\n}\r\n\r\nI have tried different ways and also tried creating a struct and annotate it with swagger:parameters and it didn't work.\r\n\r\n//swagger:parameters\r\ntype id struct{\r\n// in:path\r\nid int \r\n}\r\n\r\nRan swagger generate spec -o ./rds.yml command to generate the JSON file. \r\n\r\nIt would be great if you can assist me.\r\n\r\n## Environment\r\nswagger version: 2.0\r\ngo version: 1.9\r\nOS:  windows\r\n It worked. Thanks :)  ## Problem statement\r\n\r\nMy spec asks for \r\n\r\n```\r\n name:\r\n        type: string\r\n```\r\n\r\nand I'm giving it \r\n```\r\n\"name\": 123\r\n```\r\n\r\nThe user gets \r\n```\r\n\"message\": \"parsing body body from \\\"\\\" failed, because json: cannot unmarshal number into Go struct field OrderRequest.name of type string\"\r\n```\r\n\r\nDo I have to replace the `errors.ServeError` function to get something pretty for the user? \r\n\r\n## Environment\r\nswagger version: 0.12\r\ngo version:  go1.8.3 linux/amd64\r\nOS:   Ubuntu / 16.04/ xenial\r\n\r\n Gotcha. Too bad we can't get access to richer parse error conditions ... like the attributes that are causing problems. \r\n\r\nI added this to `ServeError` and it's slightly less intimidating \r\n\r\n```\r\ncase *errors.ParseError:\r\n\trw.WriteHeader(asHTTPCode(int(e.Code())))\r\n\tif r == nil || r.Method != \"HEAD\" {\r\n\t\trw.Write(errorAsJSON(errors.New(e.Code(), \"Unable to parse JSON payload. Confirm syntax and schema.\")))\r\n\t}\r\n```  ## Problem statement\r\n\r\nThe fix for #1200 has the side effect of omitting writing the body when the schema has discriminator specified for it. I also tried working around it by specifying \"oneOf\" with each of the derived schemas but it had the same effect. In parameter.gotmpl there is now:\r\n\r\n```\r\n   {{if .IsBodyParam}}\r\n   {{ if and .Schema.IsNullable (not .HasDiscriminator) }}if {{ .ValueExpression }} != nil {\r\n     if err := r.SetBodyParam({{ .ValueExpression }}); err != nil {\r\n       return err\r\n     }\r\n   }{{ end }}\r\n```\r\n\r\nBefore #1200, the body was always written. Note that marshaling of derived schema specific fields also doesn't work (see #1232).\r\n\r\n## Swagger specification\r\n\r\n``` yaml\r\n      parameters:\r\n...\r\n        - name: BaseClassRequest\r\n          required: true\r\n          in: body\r\n          schema:\r\n            $ref: '#/definitions/BaseClassRequest'\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: 1.9.0\r\nOS: darwin/amd64\r\n Thanks, also I want to clarify that the marshaling issue (#1232) isn't there if --skip-flatten is passed. So it's only this new issue I think that prevents sending out a schema with discriminator in it.  ## Problem statement\r\n\r\nWhen using invalid example values for a definition they are not validated with \"swagger_windows_amd64.exe validate c:\\temp\\example.json\"\r\n\r\n## Swagger specification\r\n\r\n```swagger\r\nswagger: '2.0'\r\ninfo:\r\n  title: test example\r\n  version: \"1.0.0\"\r\nproduces:\r\n  - application/json\r\npaths:\r\n  /v1/customer/{customer_id}:\r\n    get:\r\n      parameters:\r\n        - $ref: \"#/parameters/customerIdParam\"\r\n      responses:\r\n        200:\r\n          description: Customer\r\n          schema:\r\n            $ref: '#/definitions/customer'            \r\nparameters:\r\n  customerIdParam:\r\n    name: customer_id\r\n    description: The ID of the customer\r\n    in: path\r\n    required: true\r\n    type: string\r\n    format: uuid\r\ndefinitions:\r\n  customer:\r\n    type: object\r\n    required:\r\n    - id\r\n    properties:\r\n      id:\r\n        type: string\r\n        format: uuid\r\n        description: The unique ID of the customer\r\n        example: 123\r\n      email:\r\n        type: string\r\n        format: email\r\n        description: The email address of the customer\r\n        example: 123\r\n      create_date:\r\n        type: string\r\n        format: date-time\r\n        description: The date and time when the customer was created\r\n        example: 123\r\n```\r\n\r\n## Steps to reproduce\r\n\r\nSave the swagger definition and run the validate command:\r\n\"swagger_windows_amd64.exe validate c:\\temp\\example.json\"\r\n\r\n## Environment\r\n\r\nThis release: https://github.com/go-swagger/go-swagger/releases/tag/0.12.0\r\nOS:   Windows 10\r\n Hi,\r\n\r\nthank you for your response. But what you wrote is only one type of how to provide examples.\r\n\r\nThere are more ways to provide examples - please check \r\nhttps://swagger.io/docs/specification/2-0/adding-examples/\r\n\r\nI was using the \"Property Examples\" while you show the \"Response Examples\".\r\nBut at least it is good to know that the response one would be validated. Thank you for your efforts!\r\n\r\nFor me it would be really good to not (only) have it on response level because the input models are just as important (for me) to have them in a consistent state.   In some of my API implementation, both the ResponseWriter and http.Request are needed.\r\nI know that I can get the (r *http.Request) by \r\n\r\n```go\r\n_, err := myFunc(params.HTTPRequest)\r\n```\r\n\r\nHowever, I could not find where to get the instance of  http.ResponseWriter in the generated code. Can anyone help? Thanks. Thanks @casualjim   ## Problem statement\r\nWhen including a `type CustomFields map[string]interface{}` in a model it doesn't add it as a properties. and it add additionalProperties to the parent.\r\n\r\n## Swagger specification\r\n2.0\r\n\r\n## Steps to reproduce\r\n### For file:\r\n```golang\r\n///go:generate swagger generate spec\r\n\r\n// Package API\r\n//\r\n// This is the public REST API\r\n//\r\n//\t   Version: 1.0.0\r\n//\r\n// swagger:meta\r\npackage exampleswagger\r\n\r\n// swagger:operation POST /thing aThing\r\n//\r\n// Do thing\r\n//\r\n// ---\r\n// Responses:\r\n//   '200':\r\n//     description: SomeObject\r\n//     schema:\r\n//       \"$ref\": \"#/definitions/SomeObject\"\r\n//\r\n\r\n// SomeObject ...\r\n// swagger:model\r\ntype SomeObject struct {\r\n\t// Name - a name\r\n\tName string `json:\"name\"`\r\n\tCustomFields `json:\"\"`\r\n}\r\n\r\ntype CustomFields map[string]interface{}\r\n```\r\n### The command:\r\n`./swagger generate spec -m`\r\n\r\n### Generates:\r\n```json\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"description\": \"This is the public REST API \",\r\n    \"version\": \"1.0.0\"\r\n  },\r\n  \"paths\": {\r\n    \"/thing\": {\r\n      \"post\": {\r\n        \"description\": \"Do thing\",\r\n        \"operationId\": \"aThing\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"SomeObject\",\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/SomeObject\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"definitions\": {\r\n    \"CustomFields\": {\r\n      \"type\": \"object\",\r\n      \"additionalProperties\": {\r\n        \"type\": \"object\"\r\n      },\r\n      \"x-go-package\": \"github.com/example-swagger\"\r\n    },\r\n    \"SomeObject\": {\r\n      \"type\": \"object\",\r\n      \"title\": \"SomeObject ...\",\r\n      \"properties\": {\r\n        \"name\": {\r\n          \"description\": \"Name - a name\",\r\n          \"type\": \"string\",\r\n          \"x-go-name\": \"Name\"\r\n        }\r\n      },\r\n      \"additionalProperties\": {\r\n        \"type\": \"object\"\r\n      },\r\n      \"x-go-package\": \"github.com/example-swagger\"\r\n    }\r\n  }\r\n}\r\n```\r\nField CustomFields doesn't appear in parent.\r\n## Environment\r\nswagger version: 0.12.0  \r\ngo version: 1.9.1  \r\nOS: OSX Sierra 10.12.6\r\n the fields of the `CustomFields` map should not be part of the parent object. they should be properties under customFields property in the parent object. Ok, you are right. how do I achieve the swagger you described?\r\nIf I add the `swagger:allOf` annotation:\r\n```golang\r\n//go:generate swagger generate spec\r\n\r\n// Package API\r\n//\r\n// This is the public REST API \r\n//\r\n//\t   Version: 1.0.0\r\n//\r\n// swagger:meta\r\npackage exampleswagger\r\n\r\n// swagger:operation POST /thing aThing\r\n//\r\n// Do thing\r\n//\r\n// ---\r\n// Responses:\r\n//   '200':\r\n//     description: SomeObject\r\n//     schema:\r\n//       \"$ref\": \"#/definitions/SomeObject\"\r\n//\r\n\r\n// SomeObject ...\r\n// swagger:model\r\ntype SomeObject struct {\r\n\t// Name - a name\r\n\tName string `json:\"name\"`\r\n\t// swagger:allOf\r\n\tCustomFields `json:\"\"`\r\n}\r\n\r\ntype CustomFields map[string]interface{}\r\n```\r\n\r\nI get: \r\n```json\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"description\": \"This is the public REST API \",\r\n    \"version\": \"1.0.0\"\r\n  },\r\n  \"paths\": {\r\n    \"/thing\": {\r\n      \"post\": {\r\n        \"description\": \"Do thing\",\r\n        \"operationId\": \"aThing\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"SomeObject\",\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/SomeObject\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"definitions\": {\r\n    \"CustomFields\": {\r\n      \"type\": \"object\",\r\n      \"additionalProperties\": {\r\n        \"type\": \"object\"\r\n      },\r\n      \"x-go-package\": \"github.com/example-swagger\"\r\n    },\r\n    \"SomeObject\": {\r\n      \"title\": \"SomeObject ...\",\r\n      \"allOf\": [\r\n        {},\r\n        {\r\n          \"type\": \"object\",\r\n          \"properties\": {\r\n            \"name\": {\r\n              \"description\": \"Name - a name\",\r\n              \"type\": \"string\",\r\n              \"x-go-name\": \"Name\"\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      \"x-go-package\": \"github.com/example-swagger\"\r\n    }\r\n  }\r\n}\r\n```  ## Problem statement\r\n\r\nWhen using swagger to generate models, it will generate\r\n```go\r\ntype Item struct {\r\n\t// product code\r\n\tProductCode string `json:\"productCode,omitempty\"`\r\n}\r\n```\r\n\r\nBut however,  I want to read mongo data directly into this Item, the attribute in Mongo is also called \"productCode\", however I cannot. \r\n\r\nBecause it will try to find \"productcode\" (lowercase) instead of \"productCode\". Is it possible we could add bson flag also in the descriptions? \r\n\r\n## Swagger specification\r\n\r\n## Steps to reproduce\r\n\r\n## Environment\r\nswagger version: 0.12.0 \r\ngo version: 1.18\r\nOS:  Mac OS\r\n  ## Problem statement\r\n\r\nIn discriminated.md the spec generator is said to place x-class inside the allOf while the client generator only looks at x-class specified outside the allOf. Since this is an extension, I don't know what is correct but I'm guessing what you documented is what you wanted to have working. You can see in discriminatorInfo in discriminator.go:\r\n\r\n```go\r\nfunc discriminatorInfo(doc *analysis.Spec) *discInfo {\r\n// ...\r\n\tfor _, sch := range doc.SchemasWithAllOf() {\r\n\t\tfor _, ao := range sch.Schema.AllOf {\r\n\t\t\tif ao.Ref.String() != \"\" {\r\n\t\t\t\tif bt, ok := baseTypes[ao.Ref.String()]; ok {\r\n\t\t\t\t\tname, _ := sch.Schema.Extensions.GetString(\"x-class\")\r\n```\r\n\r\nthat sch.Schema refers to the schema that contains the allOf for \"x-class\", when the document says it should be in the allOf's inner schema that doesn't contain a ref. \r\n\r\n## Swagger specification\r\n\r\nFrom discriminated.md:\r\n\r\n```yaml\r\n  modelX:\r\n    allOf:\r\n      - $ref: \"#/definitions/TeslaCar\"\r\n      - title: The ModelX version of the tesla car\r\n        properties:\r\n          doors:\r\n            description: \"The number of doors on this Model X\"\r\n            type: integer\r\n            format: int32\r\n            x-go-name: Doors\r\n        x-class: \"com.tesla.models.ModelX\"\r\n        x-go-name: ModelX\r\n```\r\n\r\nhowever the client generator will ignore x-class unless it's done like so:\r\n\r\n```yaml\r\n  modelX:\r\n    x-class: \"com.tesla.models.ModelX\"\r\n    allOf:\r\n      - $ref: \"#/definitions/TeslaCar\"\r\n      - title: The ModelX version of the tesla car\r\n        properties:\r\n          doors:\r\n            description: \"The number of doors on this Model X\"\r\n            type: integer\r\n            format: int32\r\n            x-go-name: Doors\r\n        x-go-name: ModelX\r\n```\r\n\r\n## Steps to reproduce\r\n\r\nRun \"swagger generate client\" on the definitions in discriminated.md and notice that the Tesla.Model() method returns \"modelX\" and that unmarshalTesla() looks for \"modelX\" in the switch statement instead of the expected \"com.tesla.models.ModelX\". Then try moving the \"x-class\" like shown above and trying again.\r\n\r\n## Environment\r\nswagger version: dev (latest HEAD)\r\ngo version: 1.9.0  darwin/amd64\r\nOS:   darwin/amd64\r\n I just looked at the behavior of the structure parser and it looks consistent with the client generator. It puts the x-class extension on the same schema object that contains an allOf:\r\n\r\n```go\r\nbschema.AddExtension(\"x-class\", mv)\r\n// ...\r\nbschema.AllOf = append(bschema.AllOf, newSch)\r\n```\r\n\r\nand the tests are consistent with that. Maybe the documentation just needs to be corrected to match the code?  ## Problem statement\r\n\r\nWhen the swagger file has a string field with both date format and maxLength, the generated model file does not compile.\r\n\r\nIn this example (adapted from [petstore](https://github.com/OAI/OpenAPI-Specification/blob/master/examples/v2.0/json/petstore-simple.json), the field \"birth\" is string, has date format, and a max length of 10.\r\n\r\nWe should call m.Birth.String() rather than string(m.Birth) in new_pet.go.\r\n\r\n## Swagger specification\r\n\r\n```json\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"version\": \"1.0.0\",\r\n    \"title\": \"Swagger Petstore\"\r\n  },\r\n  \"host\": \"petstore.swagger.io\",\r\n  \"basePath\": \"/api\",\r\n  \"schemes\": [\r\n    \"http\"\r\n  ],\r\n  \"consumes\": [\r\n    \"application/json\"\r\n  ],\r\n  \"produces\": [\r\n    \"application/json\"\r\n  ],\r\n  \"paths\": {\r\n    \"/pets\": {\r\n      \"post\": {\r\n        \"operationId\": \"addPet\",\r\n        \"produces\": [\r\n          \"application/json\"\r\n        ],\r\n        \"parameters\": [\r\n          {\r\n            \"name\": \"pet\",\r\n            \"in\": \"body\",\r\n            \"description\": \"Pet to add to the store\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"$ref\": \"#/definitions/NewPet\"\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"description\": \"pet response\",\r\n            \"schema\": {\r\n            }\r\n          },\r\n          \"default\": {\r\n            \"description\": \"unexpected error\",\r\n            \"schema\": {\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"definitions\": {\r\n    \"NewPet\": {\r\n      \"type\": \"object\",\r\n      \"required\": [\r\n        \"name\"\r\n      ],\r\n      \"properties\": {\r\n        \"name\": {\r\n          \"type\": \"string\"\r\n        },\r\n        \"birth\": {\r\n          \"type\": \"string\",\r\n          \"format\": \"date\",\r\n          \"maxLength\": 10\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n$ swagger generate client --spec apis/test.json\r\n$ go build client/swagger_petstore_client.go \r\n# github.com/neighborly/experiments/pershing-demo/models\r\nmodels/new_pet.go:60:54: cannot convert m.Birth (type strfmt.Date) to type string\r\n```\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: 1.9.1\r\nOS: OSX\r\n @tfeng Does it work as expected if maxLength is not specified? @kreamyx Yes, it works as expected without maxLength. The offending line is to test maxLength, so without it, that line doesn't exist in the generated file. OK thanks for the info. I will look into it Perhaps it wouldn't, but this occurs in a large swagger file that we got from an external partner. Instead of modifying their swagger file in many places, I'd rather have a codegen tool that works out of the box.\r\n\r\nIn general, I think we should either raise an error and don't except the swagger file if date+maxLength is not valid, or generate code that compiles.  - use google's oauth2 server as example\r\n\r\nSigned-off-by: Hui Kang <kangh@us.ibm.com> # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=h1) Report\n> Merging [#1219](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/e3a24f2b8a0597dfb7506f5cf4bb98f204ec6f22?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1219/graphs/tree.svg?token=aQS1DepR8C&src=pr&height=150&width=650)](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1219      +/-   ##\n==========================================\n- Coverage   67.48%   67.46%   -0.02%     \n==========================================\n  Files          28       28              \n  Lines        7797     7783      -14     \n==========================================\n- Hits         5262     5251      -11     \n+ Misses       2048     2046       -2     \n+ Partials      487      486       -1\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `64.06% <0%> (-2.35%)` | :arrow_down: |\n| [scan/scanner.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=tree#diff-c2Nhbi9zY2FubmVyLmdv) | `68.86% <0%> (\u00f8)` | :arrow_up: |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `60.32% <0%> (\u00f8)` | :arrow_up: |\n| [scan/meta.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=tree#diff-c2Nhbi9tZXRhLmdv) | `75.83% <0%> (+1.6%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=footer). Last update [e3a24f2...0e7845d](https://codecov.io/gh/go-swagger/go-swagger/pull/1219?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n Not sure why @houndci-bot does not like the format? I see other example has similar format.  ## Problem statement\r\n\r\nIn my understanding, if the _accessCode_ flow is used for oauth2 securitydefinition, the generated server could redirect the authentication to the oauth2 server, e.g., https://accounts.google.com/o/oauth2/v2/auth. However, my generated code does not perform the redirection. Could anyone help on this? Thanks.\r\n\r\n## Steps to reproduce\r\n```yams\r\n---\r\nswagger: '2.0'\r\ninfo:\r\n  title: oauth2 debug\r\n  version: 0.3.0\r\nproduces:\r\n- application/json\r\nschemes:\r\n  - http\r\nbasePath: /api\r\nsecurityDefinitions:\r\n  OauthSecurity:\r\n    type: oauth2\r\n    flow: accessCode\r\n    authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth'\r\n    tokenUrl: 'hhttps://www.googleapis.com/oauth2/v4/token'\r\n    scopes:\r\n      admin: Admin scope\r\n      user: User scope\r\nsecurity:\r\n  - OauthSecurity:\r\n    - user\r\npaths:\r\n  /customers:\r\n  ....\r\n```\r\n\r\nRun the server\r\n```shell\r\ngo run cmd/oauth-sample-server/main.go   --port 11309\r\n```\r\n\r\nOpen the browser and access: 127.0.0.1:11309. The generated server does not redirect the browser to the google login page.\r\n\r\n @casualjim Thanks for your response. Now I understand the structure of the go-swagger generated code. And I realized that I should implement checking the oauth access token in this function\r\n```go\r\n\tapi.OauthSecurityAuth = func(token string, scopes []string) (*models.Principal, error) {\r\n\t\treturn nil, errors.NotImplemented(\"oauth2 bearer auth (OauthSecurity) has not yet been implemented\")\r\n\t}\r\n```\r\n\r\nI have another follow up question, which is also applicable to apikey or basic authentication schemes. How can the server remember the authenticated request context? For example, if I uses a browser to access the api server, the request does not need to be checked each time after being authenticated once.\r\nDo you know which go libraries can handle this? Thanks.\r\n  When try to validate a swagger 2.0 spec in yaml with \"n\" as the property name like:\r\n\r\ndefinitions:\r\n  MyModel:\r\n    properties:\r\n      n:\r\n        type: number\r\n        format: double\r\n......\r\n\r\nI got the error message, \r\n2017/10/13 14:05:57 types don't match expect map key string or int got: bool\r\n\r\nAfter use the quote on the property name as 'n', it works.   I don't understand why the swagger generator behaves like this.  Also, I suggest to add the following features:\r\n\r\n1. When the validation error occurs, it's useful to print out the line number of the error in the spec file.  For a very large file (over 30K line), it's pain to debug.\r\n2. Can the generator accept the swagger 2.0 JSON format?   The internal does convert the yaml to JSON during the parse.\r\n\r\nThanks.\r\n\r\n\r\n Can you tell me why the n is a reserved keyword in the Swagger spec?  When I use the JSON file, it has to have the 'n' as well.   Thanks. As for the reason, YAML treats these strings as boolean:\r\n\r\n    { Y, true, Yes, ON  }    : Boolean true\r\n    { n, FALSE, No, off }    : Boolean false thanks.  ## Problem statement\r\n\r\nparameter not kept order struct sequence\r\n\r\n## Swagger specification\r\n```\r\n\"definitions\": {\r\n    \"LoginReq\": {\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"password\": {\r\n          \"type\": \"string\",\r\n          \"x-go-name\": \"Password\"\r\n        },\r\n        \"username\": {\r\n          \"type\": \"string\",\r\n          \"x-go-name\": \"Username\"\r\n        }\r\n      },\r\n    }\r\n  }\r\n```\r\n## Steps to reproduce\r\n```\r\n// swagger:parameters login\r\ntype LoginParam struct {\r\n\t// in:body\r\n\t// required:true\r\n\tRequestModel LoginReq `json:\"request_model\"`\r\n}\r\n\r\ntype LoginReq struct {\r\n\tUsername string `json:\"username\"`\r\n\tPassword string `json:\"password\"`\r\n}\r\n```\r\n\r\n## Environment\r\nswagger version: 2.0\r\ngo version: 1.9.1\r\nOS:   ubuntu 17.04\r\n  ## Problem statement\r\n\r\nOur endpoint receives an optional array.\r\n```\r\n        \"recipeIds\" : {\r\n          \"type\" : \"array\",\r\n          \"description\" : \"referenced recipe ids\",\r\n          \"uniqueItems\" : true,\r\n          \"items\" : {\r\n            \"type\" : \"integer\",\r\n            \"format\" : \"int64\"\r\n          }\r\n        },\r\n```\r\n\r\nAnd in the generated source i see:\r\n```\r\nRecipeIds []int64 `json:\"recipeIds\"`\r\n```\r\n\r\nI would like to ask what is the reason to not mark the array as omitempty? Because the API allows to not send this data, and it allows to send an array as data also, but in this case go-swagger sends a `null`. I have two issues with `null`, first some API doesn't handle `null` as well (i know it is an API issue, but there are APIs out of my scope and also legacy APIs) and the other is if i generate a minimal JSON template for my users it will be full with unnecessary `null` values which looks not so nice.\r\n\r\n## Environment\r\nswagger version: 0.12.0  \r\ngo version: 1.9.1 \r\n Thanks a lot.  ## Problem statement\r\n\r\nActually I need to use swagger to generate my modes in go code. But I find I can hardly generate type `int`, always `int64`.\r\n\r\nSince I need to keep back compatibility the project, I can hardly change the type. So in this case, do go-swagger meet my demand? If the answer is yes, how to make it.\r\n\r\nPlease remove the sections that don't apply\r\n\r\n## Swagger specification\r\n\r\n## Steps to reproduce\r\n\r\n## Environment\r\n```\r\n~ $ uname -a\r\nDarwin AllenSundeMacBook-Pro.local 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\r\n~ $ swagger version\r\nversion: 0.12.0\r\ncommit: 8135eb6728e43b73489e80f94426e6d387809502\r\n~ $ go version\r\ngo version go1.8.3 darwin/amd64\r\n``` \r\n\r\nThanks in advance\r\n Discussed briefly in #675  Yeah, it is brief in #675 . While I think we have not get the solution. So I suggest that it is better for us to keep this issue open, since maybe other users would have the same issue. @gregmarr   ## Description\r\n\r\nThe body won't be written to the request if it's empty.\r\n\r\nCloses #1199   I generated the Go client, and after a success generation my project doesn't compile. The reason is \"cannot convert nil to ...\"\r\n\r\n```\r\n    \"PlatformGatewaysResponse\" : {\r\n      \"type\" : \"object\",\r\n      \"properties\" : {\r\n        \"gateways\" : {\r\n          \"type\" : \"object\",\r\n          \"additionalProperties\" : {\r\n            \"type\" : \"array\",\r\n            \"uniqueItems\" : true,\r\n            \"items\" : {\r\n              \"$ref\" : \"#/definitions/CloudGatewayJson\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n```\r\n```\r\n    \"CloudGatewayJson\" : {\r\n      \"type\" : \"object\",\r\n      \"properties\" : {\r\n        \"name\" : {\r\n          \"type\" : \"string\"\r\n        },\r\n        \"id\" : {\r\n          \"type\" : \"string\"\r\n        },\r\n        \"properties\" : {\r\n          \"type\" : \"object\",\r\n          \"additionalProperties\" : {\r\n            \"type\" : \"object\"\r\n          }\r\n        }\r\n      }\r\n    },\r\n```\r\nThe full source JSON is found [here](https://gist.githubusercontent.com/mhmxs/3e4098cf37dbfe1609d25e6db5ac94ff/raw/e8f47cb21678e7ad7774b3f3741efc1a4fe6ee93/cb-api-swagger.json).\r\n\r\nThe compile errors is the following:\r\n```\r\nplatform_gateways_response.go:70:24: cannot convert nil to type CloudGatewayJSON\r\n```\r\nAnd the generated code is:\r\n```\r\nfunc (m *PlatformGatewaysResponse) validateGateways(formats strfmt.Registry) error {\r\n\t...\r\n\tfor k := range m.Gateways {\r\n\t\t...\r\n\t\tfor i := 0; i < len(m.Gateways[k]); i++ {\r\n\t\t\t...\r\n\t\t\tif m.Gateways[k][i] != nil { // cannot convert nil to\r\n\r\n\t\t\t\tif err := m.Gateways[k][i].Validate(formats); err != nil {\r\n\t\t\t\t\tif ve, ok := err.(*errors.Validation); ok {\r\n\t\t\t\t\t\treturn ve.ValidateName(\"gateways\" + \".\" + k + \".\" + strconv.Itoa(i))\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn err\r\n```\r\n\r\n## Environment\r\nswagger version: 0.12.0\r\ngo version: go version go1.9 darwin/amd64\r\nOS: macOS Sierra and High Sierra @mhmxs  : Has JSON swagger spec that you shared in above issue has changed from the time you shared it?\r\nEverything seems to be passing now \r\n```\r\ntaggarwal@taggarwal-m01 \ue0b0 ~/go/src/github.com/test-swagger \ue0b0 ls\r\ntotal 0\r\ndrwxr-xr-x   23 taggarwal  vmware   782 Oct 10 14:04 ..\r\ndrwxr-xr-x    6 taggarwal  vmware   204 Oct 10 14:08 .idea\r\ndrwx------  200 taggarwal  vmware  6800 Oct 10 14:10 models\r\ndrwxr-xr-x    5 taggarwal  vmware   170 Oct 10 14:10 .\r\ndrwx------   26 taggarwal  vmware   884 Oct 10 14:10 client\r\n taggarwal@taggarwal-m01 \ue0b0 ~/go/src/github.com/test-swagger \ue0b0 go test ./...\r\n?   \tgithub.com/test-swagger/client\t[no test files]\r\n?   \tgithub.com/test-swagger/client/accountpreferences\t[no test files]\r\n?   \tgithub.com/test-swagger/client/blueprints\t[no test files]\r\n?   \tgithub.com/test-swagger/client/cluster\t[no test files]\r\n?   \tgithub.com/test-swagger/client/clustertemplates\t[no test files]\r\n?   \tgithub.com/test-swagger/client/connectors\t[no test files]\r\n?   \tgithub.com/test-swagger/client/constraints\t[no test files]\r\n?   \tgithub.com/test-swagger/client/credentials\t[no test files]\r\n?   \tgithub.com/test-swagger/client/events\t[no test files]\r\n?   \tgithub.com/test-swagger/client/flexsubscriptions\t[no test files]\r\n?   \tgithub.com/test-swagger/client/ldap\t[no test files]\r\n?   \tgithub.com/test-swagger/client/networks\t[no test files]\r\n?   \tgithub.com/test-swagger/client/rdsconfigs\t[no test files]\r\n?   \tgithub.com/test-swagger/client/recipes\t[no test files]\r\n?   \tgithub.com/test-swagger/client/securitygroups\t[no test files]\r\n?   \tgithub.com/test-swagger/client/settings\t[no test files]\r\n?   \tgithub.com/test-swagger/client/smartsensesubscriptions\t[no test files]\r\n?   \tgithub.com/test-swagger/client/stacks\t[no test files]\r\n?   \tgithub.com/test-swagger/client/subscriptions\t[no test files]\r\n?   \tgithub.com/test-swagger/client/templates\t[no test files]\r\n?   \tgithub.com/test-swagger/client/topologies\t[no test files]\r\n?   \tgithub.com/test-swagger/client/usages\t[no test files]\r\n?   \tgithub.com/test-swagger/client/users\t[no test files]\r\n?   \tgithub.com/test-swagger/client/util\t[no test files]\r\n?   \tgithub.com/test-swagger/models\t[no test files]\r\n taggarwal@taggarwal-m01 \ue0b0 ~/go/src/github.com/test-swagger \ue0b0\r\n``` Hi @EleanorRigby ,\r\n\r\nThank you for the super fast reply, and glad to read it is already solved. We are waiting for the next official release like messiah :).  ## Problem statement\r\n\r\nIs it possible to generate server code with a principal model from a vendored package?\r\nWith swagger 0.12.0 the import is not resolved and results in a compile error in the generated code, as the type is not found. The package is in the `GOPATH`.\r\n\r\nIt could be nice if one could supply the full path to the package to the `principal` flag, something like:\r\n\r\n```\r\nswagger generate server \\\r\n  --principal 'github.com/lunarway/authentication/authentication.Auth'\r\n```\r\n## Steps to reproduce\r\nThe folder structure of the a vendored application:\r\n\r\n```\r\n|- api\r\n|-- swagger.yaml\r\n|- main.go\r\n|- vendor\r\n|-- github.com\r\n|--- lunarway\r\n|---- authentication\r\n|----- authentication.go\r\n```\r\n\r\nAnd the generate command\r\n\r\n```shell\r\nswagger generate server \\\r\n  --spec api/swagger.yaml \\\r\n  --name service \\\r\n  --target ./generated \\\r\n  --principal 'authentication.Auth'\r\n```\r\n\r\n## Environment\r\nswagger version: 0.12.0  \r\ngo version: 1.9.0  \r\nOS:  Apple macOS Sierra 10.12.6\r\n I've got this working by making sure the package was in vendored and in the `GOPATH` and the type had a unique name. In my case renaming `authentication.Auth` to `authentication.Principle`.\r\n  ## Problem statement\r\n\r\nCode generated by go-swagger could not be compiled\r\n\r\n## Swagger specification\r\n\r\n```\r\nswagger: \"2.0\"\r\ninfo:\r\n  description: API + File download\r\n  title: Test\r\n  version: 1.0.0\r\nschemes:\r\n- http\r\nconsumes:\r\n- application/json\r\nproduces:\r\n- application/json\r\npaths:\r\n  /some/file.txt:\r\n    get:\r\n      operationId: someFile\r\n      produces:\r\n      - application/octet-stream\r\n      responses:\r\n        200:\r\n          description: download file\r\n          schema:\r\n            type: file\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n```\r\nswagger generate server --target=gen\r\n\r\ngo build ./gen/cmd-server\r\n```\r\n\r\nExpecting: build success\r\n\r\nGot:\r\n\r\n```\r\ngen/models/some_file_o_k_body.go:20:6: invalid receiver type SomeFileOKBody (SomeFileOKBody is a pointer type)\r\n```\r\n\r\n## Environment\r\nswagger version: dev  \r\ngo version: go version go1.9 darwin/amd64  \r\nOS:   OSX 10.11.6\r\n this is fixed on master by: #1329  We need an easy way to get the response status code and payload.  ## Problem statement\r\n\r\nHi there,\r\n\r\nI'm trying to use an anchor in my swagger file so I can have multiple parameters be shared across all paths. I am aware that parameters can be defined in the global parameters section and be referenced multiple places, but I'd rather use an anchor so I can just reference the list of parameters that I want to place in all my paths (rather than repeating the reference to each parameter for each path).\r\n\r\nThe following works:\r\n```\r\nparameters:\r\n  RequestIdParam:\r\n    name: X-Request-ID\r\n    in: header\r\n    type: string\r\n\r\npaths:\r\n  /objects:\r\n      parameters:\r\n      - $ref: '#/parameters/RequestIdParam'\r\n      get:\r\n        summary: \"Lists the objects\"\r\n        ...\r\n```\r\n\r\nHowever this does not work:\r\n```\r\nparameters:\r\n  RequestIdParam:\r\n    name: X-Request-ID\r\n    in: header\r\n    type: string\r\n\r\nDefaultParameters: &DEFAULT_HEADERS\r\n  parameters:\r\n  - $ref: '#/parameters/RequestIdParam'\r\n\r\npaths:\r\n  /objects:\r\n      <<: *DEFAULT_HEADERS\r\n      get:\r\n        summary: \"Lists the objects\"\r\n        ...\r\n```\r\n\r\nI'm confused as to why the merge is not picking up the path-level parameters. Am I missing something obvious here? I gave that a try, but alas it does not work :( Any other suggestions? Interestingly enough, I was able to get the following to work:\r\n\r\n```\r\nparameters:\r\n  RequestIdParam:\r\n    name: X-Request-ID\r\n    in: header\r\n    type: string\r\n\r\nx-DefaultParameters: \r\n  parameters: &DEFAULT_HEADERS\r\n  - $ref: '#/parameters/RequestIdParam'\r\n\r\npaths:\r\n  /objects:\r\n      parameters: *DEFAULT_HEADERS\r\n      get:\r\n        summary: \"Lists the objects\"\r\n```\r\n\r\nSo using the alias seems to work fine, it's just using merge that has issues. @ilinamitra  : Seems like this issue is there in yaml v2 go package (https://github.com/go-yaml/yaml/issues/184)\r\n\r\nLooks like it is still open.\r\n\r\n  ## Problem statement\r\n\r\nPanic on attempt to generate server (see bottom for output). Note that the spec is valid according to the [validator-badge](https://github.com/swagger-api/validator-badge) tool (running on localhost)\r\n\r\n## Swagger specification\r\n\r\n2.0\r\n\r\n## Steps to reproduce\r\n\r\n```bash\r\nswagger generate server -f _spec/spec.yml\r\n```\r\n\r\n## Environment\r\nswagger version: [latest](https://github.com/go-swagger/go-swagger/commit/a22e5ec12e68e5b3de1957b38d036cd93ed20f02)  \r\ngo version: go version go1.9 darwin/amd64\r\nOS: macOS 10.12.6\r\n\r\n## Output\r\n\r\n```\r\npanic: interface conversion: interface {} is spec.Schema, not spec.Response\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/go-openapi/validate.(*SpecValidator).validateResponseExample(0xc422289938, 0xc42089cca0, 0x17, 0xc422289688, 0x0)\r\n\t/go/src/github.com/go-swagger/go-swagger/vendor/github.com/go-openapi/validate/spec.go:645 +0x2e6\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/go-openapi/validate.(*SpecValidator).validateExamplesValidAgainstSchema(0xc422289938, 0xc420b90540)\r\n\t/go/src/github.com/go-swagger/go-swagger/vendor/github.com/go-openapi/validate/spec.go:671 +0x25d\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/go-openapi/validate.(*SpecValidator).Validate(0xc422289938, 0x1755080, 0xc4207ea6e0, 0x131fa04, 0x16cc0c0)\r\n\t/go/src/github.com/go-swagger/go-swagger/vendor/github.com/go-openapi/validate/spec.go:125 +0x37b\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/go-openapi/validate.Spec(0xc4207ea6e0, 0x1b67b40, 0xc42033d7a0, 0x0, 0x0)\r\n\t/go/src/github.com/go-swagger/go-swagger/vendor/github.com/go-openapi/validate/spec.go:51 +0x81\r\ngithub.com/go-swagger/go-swagger/generator.validateSpec(0x7fff5fbff1e3, 0xe, 0xc4207ea6e0, 0xe, 0xc4207ea6e0)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/shared.go:608 +0x86\r\ngithub.com/go-swagger/go-swagger/generator.newAppGenerator(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4204465a0, 0x157b00a, ...)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/support.go:80 +0xae4\r\ngithub.com/go-swagger/go-swagger/generator.GenerateServer(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4204465a0, 0xc42082d930, ...)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/support.go:39 +0x94\r\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.(*Server).Execute(0xc42086be40, 0xc42082d980, 0x0, 0x4, 0xc42086be40, 0x1)\r\n\t/go/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/server.go:118 +0x54a\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).ParseArgs(0xc42084a9c0, 0xc42000e1f0, 0x4, 0x4, 0x100f168, 0x30, 0xc42021a900, 0xc420435f80, 0xc4204358c8)\r\n\t/go/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:316 +0x893\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).Parse(0xc42084a9c0, 0x6, 0x17a413a, 0x6, 0x0, 0x17ec525)\r\n\t/go/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:186 +0x73\r\nmain.main()\r\n\t/go/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go:105 +0x858\r\n``` @rafecolton : Is it possible for you to share  _spec/spec.yml ?  The new vendor extension works only with array types and controls\r\npresence of the 'omitempty' struct tag that is used by JSON Marshaler # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1189?src=pr&el=h1) Report\n> Merging [#1189](https://codecov.io/gh/go-swagger/go-swagger/pull/1189?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/0b68408a1f49fcdf1ee7c84afe5f5e9686e2554b?src=pr&el=desc) will **increase** coverage by `0.02%`.\n> The diff coverage is `97.05%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1189/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1189?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1189      +/-   ##\n==========================================\n+ Coverage   67.44%   67.46%   +0.02%     \n==========================================\n  Files          28       28              \n  Lines        7778     7783       +5     \n==========================================\n+ Hits         5246     5251       +5     \n  Misses       2046     2046              \n  Partials      486      486\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1189?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/types.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1189?src=pr&el=tree#diff-Z2VuZXJhdG9yL3R5cGVzLmdv) | `82.19% <100%> (+0.19%)` | :arrow_up: |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1189?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `60.32% <96.55%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1189?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1189?src=pr&el=footer). Last update [0b68408...8f19b5f](https://codecov.io/gh/go-swagger/go-swagger/pull/1189?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\n\r\nI am generating some models for a swagger spec where there are fields that are non-required (optional). The resulting model however does not create the string as a pointer type which causes havoc when trying to marshall 'null' from the payload.\r\n\r\n## Swagger specification\r\n\r\n```yaml\r\n  Host:\r\n    properties:\r\n      state:\r\n        type: string\r\n```\r\n## Steps to reproduce\r\n\r\n```go\r\ntype Host struct {\r\n\t// state\r\n\tState string `json:\"state,omitempty\"`\r\n}\r\n```\r\n\r\n```json\r\n{\r\n  \"state\" : null,\r\n}\r\n```\r\n\r\n## Environment\r\nswagger version: HEAD (checked out code)\r\ngo version: go1.9 darwin/amd64\r\nOS:   OSX\r\n I can reproduce this as well. And interestingly, the required field is a pointer type, and the non-required field is a pointer type.\r\n\r\n```\r\ntype Host struct {\r\n\t// not required\r\n\tState string `json:\"state,omitempty\"`\r\n\r\n    // required\r\n    Description *string `json:\"description\"`\r\n}\r\n```\r\n\r\nI think the following is expected, right?\r\n\r\n```\r\nrequired => primitive type\r\nnon-required => pointer type\r\n``` > however with zero value of empty string, how can you distinguish between set/unset vs zero value?\r\n\r\nBut why doesn't the same logic hold for optional? You won't be able to distinguish between an optional field not specified in a response and it set to its zero value when you generate it as a primitive. There you are already treating unset as zero. This is entirely for validation.  It is not an error if an optional field is not provided.  It is an error if a required field is not provided.\r\n  if we has a custom MarshalJSON/MarshalXML struct.input data type maybe cant matched to out data type.\r\n\r\nthe feature can be custom a data type ,its Like\r\n\r\n```go\r\n\r\n//swagger:type string\r\ntype OwnerInput struct {\r\n\r\n}\r\n\r\nfunc (c *OwnerInput)UnmarshalJSON(data []byte) error {\r\n  //in here,unmarshal a string to a golang struct\r\n}\r\n\r\n```\r\n\r\n who can add it to document?  ## Problem statement\r\n\r\n`swagger generate client` panics\r\n\r\n## Swagger specification\r\n\r\nhttps://gist.github.com/arekkas/9b3c57b185c58b762a5211b26f641e96\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n$ go get -u github.com/go-swagger/go-swagger/cmd/swagger\r\n$ swagger generate client -f ./api.swagger.json -A hydrasdk\r\n2017/09/26 14:07:45 building a plan for generation\r\n2017/09/26 14:07:45 planning definitions\r\n2017/09/26 14:07:46 planning operations\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal 0xc0000005 code=0x0 addr=0x9 pc=0x957751]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).NewSliceBranch(0xc043d62000, 0xc043fccfc0, 0xc042720001)\r\n        C:/workspace/go/src/github.com/go-swagger/go-swagger/generator/model.go:391 +0x131\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildArray(0xc043d62000, 0x182d9a0, 0xc042daa3c0)\r\n        C:/workspace/go/src/github.com/go-swagger/go-swagger/generator/model.go:1068 +0x14a\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildItems(0xc043d62000, 0x0, 0x0)\r\n        C:/workspace/go/src/github.com/go-swagger/go-swagger/generator/model.go:1104 +0xbfc\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).makeGenSchema(0xc043d62000, 0xc043708c60, 0xf)\r\n        C:/workspace/go/src/github.com/go-swagger/go-swagger/generator/model.go:1445 +0xab2\r\ngithub.com/go-swagger/go-swagger/generator.(*codeGenOpBuilder).MakeResponse(0xc04249d600, 0xb9b13a, 0x1, 0xc043708c60, 0xf, 0xb9b301, 0xc04321aab0, 0xc8, 0x0, 0x0, ...)\r\n```\r\n\r\n## Environment\r\nswagger version: master\r\ngo version: 1.9\r\nOS: Win10 x64\r\n Tried it with 0.12.0 and 0.11.0 with the same result. Same problem here It would fail on generate-server as well. The reason is because in the swagger spec, the schema of `clientsList` response is defined as `type: object`. It should be `type: array`\r\n```\r\n    \"clientsList\": {\r\n      \"description\": \"A list of clients.\",\r\n      \"schema\": {\r\n        \"type\": \"array\",\r\n        \"items\": {\r\n          \"$ref\": \"#/definitions/oauthClient\"\r\n        }\r\n      }\r\n    }, Why does swagger validate work? This commit https://github.com/go-openapi/validate/commit/e8b25c4c6cccee94c578fa3bd0d3f5d459290d08 \r\nshould fix this problem. We should close this issue if there are no further requirements  ## Problem statement\r\n\r\nI have an API that pulls login credentials from a JSON body payload.  It works fine with 0.12.0 but with master (commit dbc9b97 at this time) it breaks.  Calling the endpoint yields a 400 with the message\r\n```\r\n{\r\n  \"code\": 400,\r\n  \"message\": \"parsing credentials body from \\\"\\\" failed, because json: cannot unmarshal object into Go value of type *models.Credentials\"\r\n}\r\n```\r\n\r\nBinding in my code is done via:\r\n\r\n`api.AuthenticationPostLoginHandler = authentication.PostLoginHandlerFunc(login)`\r\n\r\nwith function defnition:\r\n\r\n`func login(params authentication.PostLoginParams) middleware.Responder { ... }`\r\n\r\nIf I checkout tag `0.12.0` everything works.  If I checkout master it breaks.\r\n\r\n## Swagger specification\r\n\r\nRelevant portions of my swagger.yml:\r\n\r\n```\r\npaths:\r\n  /login:\r\n    post:\r\n      summary: Login endpoint\r\n      description: 'Login here'\r\n      security: []\r\n      consumes:\r\n        - application/json\r\n      produces:\r\n        - application/json\r\n      parameters:\r\n        - name: credentials\r\n          in: body\r\n          schema:\r\n            $ref: '#/definitions/Credentials'\r\n      responses:\r\n        '200':\r\n          description: Success\r\n          schema:\r\n            $ref: '#/definitions/Login'\r\n        '400':\r\n          description: Bad Request\r\n          schema:\r\n            $ref: '#/definitions/Message'\r\n        '401':\r\n          description: Invalid credentials\r\n          schema:\r\n            $ref: '#/definitions/Message'\r\n```\r\n\r\nand\r\n\r\n```\r\ndefinitions:\r\n  Credentials:\r\n    properties:\r\n      username:\r\n        type: string\r\n      password:\r\n        type: string\r\n      token:\r\n        type: string\r\n```\r\n\r\n## Steps to reproduce\r\n\r\nIf it would help I can try to construct a minimal codebase that induces the error, but I'm hoping this is simple enough that the fix will be obvious to @EleanorRigby and won't require that.\r\n\r\n## Environment\r\nswagger version: master branch\r\ngo version: 1.9\r\nOS:   Linux (CentOS 7) The pull request to back out the change has been  created  #1178  Thanks, I'm back to normal now!  ## Problem statement\r\n\r\nTry to generate go server code, and it fails, complaining about paths.\r\n\r\n```\r\nJons-MacBook-Pro-2:xxx-backend jonmclachlan$ alias swagger=\"docker run --rm -it -v $HOME:$HOME -w $(pwd) quay.io/goswagger/swagger\"\r\nJons-MacBook-Pro-2:xxx-backend jonmclachlan$ swagger version\r\nversion: dev\r\ncommit: 8110e1bfee9ca99f346cdad6146dfe05161cb905\r\nJons-MacBook-Pro-2:xxx-backend jonmclachlan$ ls src/\r\nmorningTulips\txxx\t\txxx-server\r\nJons-MacBook-Pro-2:xxx-backend jonmclachlan$ echo $GOPATH\r\n/Users/jonmclachlan/xxx/xxx-backend\r\nJons-MacBook-Pro-2:xxx-backend jonmclachlan$ swagger generate server -f swagger/swagger.yaml -A xxx -t xxx\r\n2017/09/18 01:49:40 building a plan for generation\r\n2017/09/18 01:49:40 lstat /Users/jonmclachlan/xxx/xxx-backend/xxx: no such file or directory\r\nJons-MacBook-Pro-2:xxx-backend jonmclachlan$ swagger generate server -f swagger/swagger.yaml -A xxx -t src/xxx\r\n2017/09/18 01:49:51 building a plan for generation\r\n2017/09/18 01:49:51 target must reside inside a location in the $GOPATH/src\r\nJons-MacBook-Pro-2:xxx-backend jonmclachlan$ \r\n```\r\n\r\nThis used to work.\r\n\r\n## Environment\r\nswagger version: 8110e1bfee9ca99f346cdad6146dfe05161cb905\r\ngo version: whatever is in your latest docker img this is the commit:\r\n\r\ncommit fb51ecafe32dd2e9ea3cd697d30044fd2ee514a9\r\nAuthor: Tushar <taggarwal@vmware.com>\r\nDate:   Mon Aug 28 11:36:46 2017 -0700\r\n\r\n    Corrected Path generation for Base Imports\r\n\r\n @notasecret : Is your target path inside GOPATH? Are there any symlinks that you are using in your path? \r\nThere was a bug due to which all the paths for code generation worked. Now the behavior is corrected. Is your target path inside GOPATH? \r\nYes, as you can verify above.\r\n\r\nAre there any symlinks that you are using in your path?\r\nNo sym link funny business.\r\n\r\nYea, I am trying to gen inside src. I think the target without the \"src\" addition passes your code checks, because you added \"src\" folder to all the possible gopath's swagger finds, and, in other places in swagger server code gen, the target path does not get that \"src\" folder appended to it, and breaks? @casualjim , many thx, I tried,\r\n\r\n```\r\nJons-MacBook-Pro-2:xxx-backend jonmclachlan$ ls src/\r\nmorningTulips\txxx\t\txxx-server\r\n```\r\n\r\nxxx was the folder.  Has 777 permissions, too. @notasecret  target without  the src folder fails in very first step of the same function because it cannot see any such directory. That's the lstat error. I was able to reproduce that.\r\n\r\nI am not able to reproduce your second error.  When running swagger through docker do you pass environment variable GOPATH , otherwise it defaults to $HOME/go @notasecret : So, I finally found the problem. I noted that inside docker environment for the dev image I created similar to one on quay.io has `GOPATH=/go`\r\n\r\n```\r\n2017/09/19 02:37:45 target path is   src/test\r\n2017/09/19 02:37:45 tgtAbsPath is /Users/taggarwal/go/src/test\r\n2017/09/19 02:37:45 Gopath is /go\r\n2017/09/19 02:37:45 In for loop gopath is /go\r\n2017/09/19 02:37:45 In for loop gopath(symlink) is /go\r\n2017/09/19 02:37:45 In for loop gopath(symlink) with src is /go/src\r\n2017/09/19 02:37:45 Childpath and Parentpath are /Users/taggarwal/go/src/test and /go/src respectively\r\n2017/09/19 02:37:45 Childpath and Parentpath are /Users/taggarwal/go/src/test and /go/src respectively\r\n2017/09/19 02:37:45 Childpath and Parentpath are /Users/taggarwal/go/src/test and /go/src respectively\r\n2017/09/19 02:37:45 target must reside inside a location in the $GOPATH/src\r\n```\r\n\r\nSo, the GOPATH and target path do not match. You need to pass the intended `GOPATH` as environment variable inside docker run command like the one below. `DO NOT APPEND src to it`\r\nThis worked for me and hopefully will unblock you too. \r\n```\r\nalias swagger=\"docker run -e GOPATH=/Users/taggarwal/go --rm -it -v $HOME:$HOME -w $(pwd) swagger:dev\"\r\n```\r\nAlso, create the intended directory before you run this command. \r\n\r\nEvaluation of symlink (confusing stuff but people still use it) in target path raises the lstat error if target path does not exist. I am starting the work to fix this. Possible solution being, creating the target path if it doesn't exist before evaluation of any kind.\r\n\r\n**Why it doesn't work now and used to work earlier?**\r\nThe earlier code had a bug , it never checked whether the target path is inside GOPATH. While most users had target path inside GOPATH/src but those who did not were facing generation of wrong import paths. Post my commit the correction happened and it stopped working for you.\r\n @EleanorRigby , that was it exactly, my bad, many thx :) closing.  ## Problem statement\r\n\r\nAssume a file with a swagger model and a struct and a function type\r\n\r\n```\r\nstruct SomeStruct {\r\n  MyType\r\n}\r\n\r\n// swagger:model foo\r\nstruct MyModel {}\r\n\r\ntype MyType func() {}\r\n```\r\n\r\n`swager generate spec -m` will fail. To resolve that, we have to move the model in it's separate file. Instead, only the `swagger:` annotated fields should be inspected or unsupported types simply ignored (e.g. with a warning).  This just started happening with 0.12.0 I believe.\r\n\r\n## Problem statement\r\n\r\nGenerated models structure has changed for composites from:\r\n```\r\ntype ReportScore struct {\r\n    ScoreData\r\n\r\n    LastUpdateTime *string `json:\"lastUpdateTime\"`\r\n}\r\n```\r\nto\r\n```\r\ntype ReportScore struct {\r\n    ScoreData\r\n\r\n    ReportScoreAllOf1\r\n}\r\n```\r\nfor the following specification:\r\n\r\n## Swagger specification\r\n```\r\n  ReportScore:\r\n    allOf:\r\n      - $ref: '#/definitions/ScoreData'\r\n      - type: object\r\n        properties:\r\n          lastUpdateTime:\r\n            type: string\r\n        required: [lastUpdateTime]\r\n```\r\n## Steps to reproduce\r\nswagger generate client -t swaggen -f apispec.yaml\r\n\r\n## Environment\r\nswagger version: 0.12.0 \r\ngo version: 1.8.3\r\nOS:   Mac OS 10.10.5\r\n  ## Problem statement\r\n\r\nOn Mac, go-swagger v0.12.0, the command: `swagger generate server --name=weaviate --spec=https://raw.githubusercontent.com/weaviate/weaviate-swagger/develop/weaviate-swagger.json --default-scheme=https` fails with:\r\n\r\n```\r\n2017/09/15 12:07:07 building a plan for generation\r\n2017/09/15 12:07:07 planning definitions\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0xd pc=0x156bc09]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).makeGenSchema(0xc42079a000, 0xc421fbcf34, 0x6)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/model.go:1390 +0x5f9\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildProperties(0xc42079b800, 0xc42079b8a8, 0x100)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/model.go:660 +0x304\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).makeGenSchema(0xc42079b800, 0x0, 0xc421355740)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/model.go:1433 +0x9f3\r\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinitionHierarchy(0xc421fbd4b0, 0xf, 0xc421296c88, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/model.go:166 +0x32c\r\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinition(0xc421fbd4b0, 0xf, 0xc421296c88, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/model.go:133 +0xbc\r\ngithub.com/go-swagger/go-swagger/generator.(*appGenerator).makeCodegenApp(0xc42064a0f0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/support.go:608 +0x5d9\r\ngithub.com/go-swagger/go-swagger/generator.(*appGenerator).Generate(0xc42064a0f0, 0x8, 0x0)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/support.go:260 +0x94\r\ngithub.com/go-swagger/go-swagger/generator.GenerateServer(0x7fff5fbffab7, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4203f05a0, 0xc420646270, ...)\r\n\t/go/src/github.com/go-swagger/go-swagger/generator/support.go:43 +0xcb\r\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.(*Server).Execute(0xc42069d600, 0xc420745450, 0x0, 0x5, 0xc42069d600, 0x1)\r\n\t/go/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/server.go:118 +0x54a\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).ParseArgs(0xc42022dc20, 0xc42000e0d0, 0x5, 0x5, 0x100f168, 0x30, 0xc42040c870, 0xc42046f600, 0xc42046ef48)\r\n\t/go/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:316 +0x893\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).Parse(0xc42022dc20, 0x6, 0x17a413a, 0x6, 0x0, 0x17ec525)\r\n\t/go/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:186 +0x73\r\nmain.main()\r\n\t/go/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go:105 +0x858\r\n```\r\n\r\nThanks in advance Update, the swagger file was incorrectly formatted.\r\n\r\nFunny thing, it did pass the `swagger validate` command though, to recreate the issue you can use the swagger file as mentioned above. receiving the same error. @bobvanluijt  Can you elaborate on what incorrect formatting triggers the segfault? @johnciocoiu can you help @Ravenwater? @bobvanluijt @Ravenwater \r\n\r\nSomewhere in the swagger we used `type: array` for a property, without setting the 'items'. I think that was the thing causing the error in our case. @casualjim did you receive the spec file through email to try to reproduce it? I have narrowed it down to this data definition:\r\n\r\n  regiment:\r\n    type: object\r\n    items:\r\n      $ref: \"#/definitions/demand\"\r\n\r\n  demand:\r\n    type: object\r\n    required:\r\n      - package\r\n      - plan\r\n    properties:\r\n      package:\r\n        type: string\r\n      plan:\r\n        type: number\r\n        format: float\r\n\r\nAdd this, and it produces the error:\r\n$ swagger generate server -f mp-scoring-api-bad.yaml -P models.Principal\r\n2017/10/06 10:51:07 building a plan for generation\r\n2017/10/06 10:51:07 planning definitions\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal 0xc0000005 code=0x0 addr=0xd pc=0x957b6a]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).NewSliceBranch(0xc0431be000, 0xc043e91d40, 0x1)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:387 +0x54a\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildArray(0xc0431be000, 0x0, 0x0)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:1068 +0x14a\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildItems(0xc0431be000, 0x0, 0x0)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:1104 +0xbfc\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).makeGenSchema(0xc0431be000, 0xc0431be000, 0xc043c17d00)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:1445 +0xab2\r\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinitionHierarchy(0xc04416e290, 0x8, 0xc0435b2830, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:166 +0x2f6\r\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinition(0xc04416e290, 0x8, 0xc0435b2830, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/model.go:133 +0xc3\r\ngithub.com/go-swagger/go-swagger/generator.(*appGenerator).makeCodegenApp(0xc0432e2000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/support.go:596 +0x59d\r\ngithub.com/go-swagger/go-swagger/generator.(*appGenerator).Generate(0xc0432e2000, 0x0, 0x0)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/support.go:254 +0xbd\r\ngithub.com/go-swagger/go-swagger/generator.GenerateServer(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc042062960, 0xc042675f68, ...)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/generator/support.go:43 +0xd2\r\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.(*Server).Execute(0xc0427706e0, 0xc042631860, 0x0, 0x6, 0xc0427706e0, 0x1)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/server.go:120 +0x55e\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).ParseArgs(0xc042631800, 0xc042066010, 0x6, 0x7, 0x4111ef, 0xc0422be6c0, 0xc042317400, 0xc0423d1201, 0xc042726cc0)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:316 +0x834\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).Parse(0xc042631800, 0x6, 0xb9ebfb, 0x6, 0x0, 0xbe6d2e)\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:186 +0x78\r\nmain.main()\r\n        C:/Users/tomtz/dev/Golang/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go:105 +0xd6a\r\n\r\nnext step is to drill down in the stack trace... Was just typing the same observation regarding the incorrect use of type: object where there needs to be a type: array. when your update came in. \r\n\r\nThank you for the DEBUG=1 trick, that will help me in the future.\r\n\r\nVery much appreciated. Now go-openapi/validate guarantees that this issue won't happen again i faced the same issue by using \r\n```yaml\r\n      responses:\r\n        '200':\r\n          description: successful operation\r\n          schema:\r\n            type: object\r\n            items:\r\n              $ref: '#/definitions/Server'\r\n```\r\n\r\nwhich results in \r\n\r\n```\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x9 pc=0x1561f56]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).NewSliceBranch(0xc420149200, 0xc4215ec480, 0xc420b50001)\r\n        /go/src/github.com/go-swagger/go-swagger/generator/model.go:391 +0x116\r\n```\r\n\r\n@kreamyx so your saying that swagger validate should detect this error? when i run `swagger validate` it returns with valid spec\r\n\r\n```\r\n$ ~/ swagger validate api-description.yaml\r\n\r\nThe swagger spec at \"api-description.yaml\" is valid against swagger specification 2.0\r\n```\r\n This panic should be fixed in `master`.\r\n @sklemmer yes `validate` detects the error if you are on master  ## Problem statement\r\n\r\nGetting a 307 response from a server results in the following error:\r\n\r\n```\r\nERROR: &{<nil>} (*models.Error) is not supported by the TextConsumer, can be resolved by supporting TextUnmarshaler interface\r\n```\r\n\r\nIf you add the interface to models.Error, eg:\r\n\r\n```go\r\nfunc (m *Error) MarshalText() (text []byte, err error) {\r\n\treturn []byte(fmt.Sprintf(\"sup %v %v\", m, m.Error)), nil\r\n}\r\n\r\nfunc (m *Error) UnmarshalText(text []byte) error {\r\n\tif m.Error == nil {\r\n\t\tm.Error = &ErrorBody{}\r\n\t}\r\n\tif text == nil {\r\n\t\tm.Error.Message = \"NIL BYTES YO\"\r\n\t\treturn nil\r\n\t}\r\n\tm.Error.Message = fmt.Sprintf(\"UNYO: %v\", string(text))\r\n\treturn nil\r\n}\r\n```\r\n\r\nThen it works a tiny bit better, you get a slightly better error message, but not much. \r\n\r\nBut the bigger issue is that it returns an error (that you can't get any info out of), when it should try redirecting. \r\n @treeder : We have backed out the change as it started to break builds ( #1177 )\r\nWe will be working on redirect (307 response code)\r\n\r\n@casualjim  : can you re-open this one ? @treeder : I think golang's net/http client should be able to handle 307 retries.  Are you specifying location header in your swagger spec for the particular path? No, the server is sending the redirect location. Here's the response:\r\n\r\n```\r\nHTTP/1.1 307 Temporary Redirect\r\nContent-Length: 0\r\nContent-Type: text/plain; charset=utf-8\r\nDate: Thu, 14 Sep 2017 19:20:21 GMT\r\nLocation: /v1/apps/helloapp/routes/\r\n\r\n\r\nERROR: &{<nil>} (*models.Error) is not supported by the TextConsumer, can be resolved by supporting TextUnmarshaler interface\r\n```\r\n @casualjim : Do you have an idea what might be preventing redirection to be handled inside of http client ?\r\n\r\nIn client.go in net/http package I see redirect request is turned down in the following two cases \r\nLook at `shouldRedirect` flag\r\n```\r\n// Treat 307 and 308 specially, since they're new in\r\n// Go 1.8, and they also require re-sending the request body.\r\nif resp.Header.Get(\"Location\") == \"\" {\r\n\t// 308s have been observed in the wild being served\r\n\t// without Location headers. Since Go 1.7 and earlier\r\n\t// didn't follow these codes, just stop here instead\r\n\t// of returning an error.\r\n\t// See Issue 17773.\r\n\tshouldRedirect = false\r\n\tbreak\r\n}\r\nif ireq.GetBody == nil && ireq.outgoingLength() != 0 {\r\n\t// We had a request body, and 307/308 require\r\n\t// re-sending it, but GetBody is not defined. So just\r\n\t// return this response to the user instead of an\r\n\t// error, like we did in Go 1.7 and earlier.\r\n\tshouldRedirect = false\r\n}\r\n```\r\nAs @treeder mentioned Location header is present, I think GetBody method is nil.  The following test code from https://golang.org/src/net/http/client_test.go shows the req.GetBody is set to nil not by default. Is there any way to prevent go-swagger from setting it to nil? \r\n```go\r\n// Don't follow a 307/308 if we can't resent the request body.\r\n  func TestClientRedirect308NoGetBody(t *testing.T) {\r\n  \tconst fakeURL = \"https://localhost:1234/\" // won't be hit\r\n  \tts := httptest.NewServer(HandlerFunc(func(w ResponseWriter, r *Request) {\r\n  \t\tw.Header().Set(\"Location\", fakeURL)\r\n  \t\tw.WriteHeader(308)\r\n  \t}))\r\n  \tdefer ts.Close()\r\n  \treq, err := NewRequest(\"POST\", ts.URL, strings.NewReader(\"some body\"))\r\n  \tif err != nil {\r\n  \t\tt.Fatal(err)\r\n  \t}\r\n  \tc := ts.Client()\r\n  \treq.GetBody = nil // so it can't rewind.\r\n  \tres, err := c.Do(req)\r\n  \tif err != nil {\r\n  \t\tt.Fatal(err)\r\n  \t}\r\n  \tres.Body.Close()\r\n  \tif res.StatusCode != 308 {\r\n  \t\tt.Errorf(\"status = %d; want %d\", res.StatusCode, 308)\r\n  \t}\r\n```  ## Problem statement\r\nThe `go-openapi/runtime` library has introduced a [backwards incompatible API change](https://github.com/go-openapi/runtime/commit/0fd0aae5036b889b33df1d058572b8692ae97602), where a new interface, [Authorizer](https://github.com/go-openapi/runtime/commit/0fd0aae5036b889b33df1d058572b8692ae97602#diff-6e4d361807e32222783998dd52ee5ea3R93), is required to be implemented and causes the following error:\r\n\r\n```sh\r\nservice\\http\\restapi\\operations\\my_api.go:344:46: cannot use o (type *MyAPI) as type middleware.RoutableAPI in argument to middleware.NewRoutableContext:\r\n        *MyAPI does not implement middleware.RoutableAPI (missing Authorizer method)\r\n\r\n```\r\n\r\n\r\n## Swagger specification\r\nv2.0\r\n\r\n## Steps to reproduce\r\n```sh\r\nswagger generate server -f ./swagger/swagger.yml -t ./service/http\r\ngo get github.com/go-openapi/runtime\r\ngo get github.com/tylerb/graceful\r\ngo get github.com/jessevdk/go-flags\r\n```\r\n\r\n## Environment\r\nswagger version: 2\r\ngo version: 1.8.3/1.9.0\r\nOS: Windows 10/Alpine Linux\r\n I believe #1162 has become victim of this as well.\r\n\r\nFor now, we are pinning the run time to the hash before the specific commit. We use [Glide](http://glide.sh/) internally for dependency management. For those affected, add this into your `glide.yaml` file:\r\n\r\n```yaml\r\n- package: github.com/go-openapi/runtime\r\n  version: f1447ecfd160e50218589d4db3fb28bd24b8dec8\r\n``` Hi all! how can I solve it with govendor?\r\nMany thanks @jorgesece Having a quick look at the govendor readme, I think: `govendor fetch github.com/go-openapi/runtime@f1447ecfd160e50218589d4db3fb28bd24b8dec8` should do the trick. Hi @MatthewHartstonge,\r\nSetting the revision to `f1447ecfd160e50218589d4db3fb28bd24b8dec8` I get another error: `undefined: runtime.Authorizer`.\r\nDo you have any idea how to solve it? This issue seems to be reintroduced in the `latest` image. Same issue here. Generated server code won't run because runtime.Authorizer is not defined. Is this project still active?  I am having this same problem and it does not seem to be being addressed, rolling back version fixes it, but breaks stuff elsewhere.  Models with `x-go-type` cause a panic when generating corresponding files\r\nThis patch corrects that\r\n```\r\nsh-3.2$ git rev-parse HEAD ; go run cmd/swagger/swagger.go generate model -f fixtures/codegen/existing-model.yml\r\n3962c9253776ac7c1332321fb391292e13149658\r\n2017/09/07 18:24:41 rendering 1 templates for model JsonWebKeySet\r\n2017/09/07 18:24:41 name field JsonWebKeySet\r\n2017/09/07 18:24:41 package field models\r\n2017/09/07 18:24:41 creating \"json_web_key_set.go\" in \"models\" as definition\r\n2017/09/07 18:24:41 generated model JsonWebKeySet\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x156da30]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-swagger/go-swagger/generator.(*GenOpts).renderDefinition(0xc4201f03c0, 0x0, 0x0, 0x0)\r\n        /Users/josh/go/src/github.com/go-swagger/go-swagger/generator/shared.go:588 +0xa0\r\ngithub.com/go-swagger/go-swagger/generator.(*definitionGenerator).generateModel(0xc420bb99b0, 0x0, 0xc4204a8d3a, 0x6)\r\n        /Users/josh/go/src/github.com/go-swagger/go-swagger/generator/model.go:129 +0x3c\r\ngithub.com/go-swagger/go-swagger/generator.(*definitionGenerator).Generate(0xc420bb99b0, 0x2, 0x2)\r\n        /Users/josh/go/src/github.com/go-swagger/go-swagger/generator/model.go:119 +0x1da\r\ngithub.com/go-swagger/go-swagger/generator.GenerateDefinition(0xc4208fed80, 0x2, 0x2, 0xc4201f03c0, 0x0, 0x1)\r\n        /Users/josh/go/src/github.com/go-swagger/go-swagger/generator/model.go:89 +0x462\r\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.(*Model).Execute(0xc42019e0c0, 0xc4200630c0, 0x0, 0x4, 0xc42019e0c0, 0x1)\r\n        /Users/josh/go/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/model.go:90 +0x2ba\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).ParseArgs(0xc4207ab380, 0xc420010150, 0x4, 0x4, 0x1012878, 0xc42008ca20, 0xc420221900, 0xc42016f101, 0xc4208aba10)\r\n        /Users/josh/go/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:316 +0x841\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).Parse(0xc4207ab380, 0x6, 0x1791eb1, 0x6, 0x0, 0x17d8fc9)\r\n        /Users/josh/go/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:186 +0x71\r\nmain.main()\r\n        /Users/josh/go/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go:105 +0xd63\r\nexit status 2\r\nsh-3.2$\r\nsh-3.2$\r\nsh-3.2$\r\nsh-3.2$\r\nsh-3.2$ git checkout model-go-extension\r\nSwitched to branch 'model-go-extension'\r\nsh-3.2$ git rev-parse HEAD ; go run cmd/swagger/swagger.go generate model -f fixtures/codegen/existing-model.yml\r\nb9d371459a2ad9404e209aa0d813a73fe1a7b194\r\n2017/09/07 18:25:03 rendering 1 templates for model JsonWebKeySet\r\n2017/09/07 18:25:03 name field JsonWebKeySet\r\n2017/09/07 18:25:03 package field models\r\n2017/09/07 18:25:03 creating \"json_web_key_set.go\" in \"models\" as definition\r\n2017/09/07 18:25:03 generated model JsonWebKeySet\r\nGeneration completed!\r\n\r\nFor this generation to compile you need to have some packages in your GOPATH:\r\n\r\n  * github.com/go-openapi/runtime\r\n\r\nYou can get these now with: go get -u -f ./...\r\n``` # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1163?src=pr&el=h1) Report\n> Merging [#1163](https://codecov.io/gh/go-swagger/go-swagger/pull/1163?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/15128f742556be0dfa3d25056eaf913a61d3ea57?src=pr&el=desc) will **increase** coverage by `0.9%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1163/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1163?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master    #1163     +/-   ##\n=========================================\n+ Coverage   66.22%   67.12%   +0.9%     \n=========================================\n  Files          28       28             \n  Lines        7787     7733     -54     \n=========================================\n+ Hits         5157     5191     +34     \n+ Misses       2150     2059     -91     \n- Partials      480      483      +3\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1163?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [cmd/swagger/commands/generate/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1163?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvbW9kZWwuZ28=) | `70% <100%> (+15.94%)` | :arrow_up: |\n| [cmd/swagger/commands/generate/server.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1163?src=pr&el=tree#diff-Y21kL3N3YWdnZXIvY29tbWFuZHMvZ2VuZXJhdGUvc2VydmVyLmdv) | `61.85% <0%> (+61.85%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1163?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1163?src=pr&el=footer). Last update [15128f7...097d74b](https://codecov.io/gh/go-swagger/go-swagger/pull/1163?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n Left in a commented line -- pushed new commit to remove it @casualjim I attempted, but the tests in the `generator` package don't test the file-system portion so I wasn't sure where to start. If you can direct me, I'll happily add a test Running `generate server --skip-operations --skip-support --exclude-main --exclude-spec`\r\nworks, but `generate model` does not\r\n\r\nThe `generate model` command now just flows through `generate server`, simplifying and removing most of the model code  ## Problem statement\r\n\r\nCannot compile code generated by swagger binary.\r\n\r\n```\r\ngo build -o bin/image-manager ./cmd/image-manager/...\r\n# ...\r\ngen/restapi/operations/image_manager_api.go:386:46: cannot use o (type *ImageManagerAPI) as type middleware.RoutableAPI in argument to middleware.NewRoutableContext:\r\n\t*ImageManagerAPI does not implement middleware.RoutableAPI (missing Authorizer method)\r\n```\r\n\r\n## Swagger specification\r\n\r\n## Steps to reproduce\r\n\r\n* Install swagger via brew\r\n* generate server\r\n* build\r\n\r\n## Environment\r\nswagger version: 0.11.0 \r\ngo version: 1.9\r\nOS:   darwin\r\n  ## Problem statement\r\n`swagger:response` annotation is not generating `properties`in json file.\r\nI am using same  example as shown in https://github.com/go-swagger/go-swagger/blob/master/docs/generate/spec/response.md\r\n\r\nI am not sure what is missing?\r\nsimilar issue is faced when using `swagger:parmeters` example\r\n\r\n## Steps to reproduce\r\nhere is code in test.go file\r\n```go\r\npackage main\r\n// A ValidationError is an error that is used when the required input fails validation.\r\n// swagger:response validationError\r\ntype ValidationError struct {\r\n\t// The error message\r\n\t// in: body\r\n\tBody struct {\r\n\t\t     // The validation message\r\n\t\t     //\r\n\t\t     // Required: true\r\n\t\t     message string\r\n\t\t     // An optional field name to which this validation applies\r\n\t\t     fieldName string\r\n\t     }\r\n}\r\n```\r\nexecute `swagger generate spec  -o ./swagger.json` command\r\n\r\nswagger.json generated is \r\n```json\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"paths\": {},\r\n  \"responses\": {\r\n    \"validationError\": {\r\n      \"description\": \"A ValidationError is an error that is used when the required input fails validation.\",\r\n      \"schema\": {\r\n        \"type\": \"object\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n## Environment\r\nswagger version: 2.0\r\ngo version: 1.8.3\r\nOS:  mac\r\n Sorry but i am not clear what do you mean by `properties in the body struct need to be exported`. can you give a example? But with exporting properties(capitalizing) and running `swagger generate spec -o ./swagger.json` command i see error `unable to determine package ` So here is my test.go\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"testing/validation\"\r\n\t\"fmt\"\r\n)\r\n// swagger:route GET /v1/list validationError\r\n//\r\n// Get list of something\r\n//\r\n//     Responses:\r\n//       500: validationError\r\n\r\nfunc main(){\r\n\tfmt.Println(validation.ValidationError{})\r\n}\r\n```\r\nAnd validation.go\r\n```\r\n// swagger:response validationError\r\n\r\ntype ValidationError struct {\r\n\t// The error message\r\n\t// in: body\r\n\tBody struct {\r\n\t\t     // The validation message\r\n\t\t     //\r\n\t\t     // Required: true\r\n\t\t     Message string\r\n\t\t     // An optional field name to which this validation applies\r\n\t\t     FieldName string\r\n\t     }\r\n}\r\n```\r\nand still json generated is \r\n```\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"paths\": {\r\n    \"/v1/list\": {\r\n      \"get\": {\r\n        \"description\": \"Get list of something\",\r\n        \"operationId\": \"validationError\",\r\n        \"responses\": {\r\n          \"500\": {\r\n            \"$ref\": \"#/responses/validationError\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nSorry but i just want one basic example to get working so that i work with other files Can i get some help with this? `properties` are still missing in `swagger.json` file @casualjim I was able to generate correct json file. Thanks for your help :)  ## Problem statement\r\n\r\nSchema is empty if I use `$ref`. Example below.\r\n\r\n## Swagger specification\r\n```\r\nswagger: '2.0'\r\nbasePath: /base-path\r\npaths:\r\n  '/some-path':\r\n    get:\r\n      responses:\r\n        '200':\r\n          description: \"I can read this value\"\r\n          schema:\r\n            $ref: '#/definitions/SomeResponse'\r\ndefinitions:\r\n  SomeResponse:\r\n    description: No overwrite at all.\r\n    properties:\r\n      someField:\r\n        type: integer\r\n        format: int32\r\n        example: 0\r\n    required:\r\n      - someField\r\n```\r\n\r\n## Steps to reproduce\r\n\r\nRun the following code:\r\n```\r\nspec, _ := loads.Spec(pathToFile)\r\nspec.Spec().Paths.Paths[\"/some-path\"].Get.Responses.StatusCodeResponses[200].Schema\r\n```\r\nIt will return an empty spec.Schema struct. It ignores the whole `$ref` definition. Can't read Schema.Properties or Schema.Required properties.\r\n\r\n## Environment\r\nswagger version: 2.0\r\ngo version: 1.7.3 & 1.9.0\r\nOS: darwin/amd64\r\n Casualjim, you have saved my life. `spec.ResolveRef()` is the solution. Thanks.  ## Environment\r\nswagger version: commit #e2bfe4232707b33df6e46519f71f5d22cc6bf63b\r\ngo version: 1.8.3\r\nOS:   OSX\r\n\r\n\r\n`swagger generate server ./swagger.yaml` \r\n\r\n```\r\n2017/09/02 11:55:07 building a plan for generation\r\n2017/09/02 11:55:07 planning definitions\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0xd pc=0x1567009]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).NewSliceBranch(0xc421c22000, 0xc421b88fc0, 0x1)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/model.go:387 +0x529\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildArray(0xc421c22000, 0x0, 0x0)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/model.go:1068 +0xe2\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildItems(0xc421c22000, 0x0, 0x0)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/model.go:1104 +0xc57\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).makeGenSchema(0xc421c22000, 0xc4210ac22c, 0x4)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/model.go:1445 +0xabc\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildProperties(0xc420155200, 0xc4201552a8, 0x100)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/model.go:660 +0x304\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).makeGenSchema(0xc420155200, 0x0, 0xc421f0bc50)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/model.go:1433 +0x9f3\r\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinitionHierarchy(0xc4210c4e80, 0x7, 0xc421c9cf78, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/model.go:166 +0x32c\r\ngithub.com/go-swagger/go-swagger/generator.makeGenDefinition(0xc4210c4e80, 0x7, 0xc421c9cf78, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/model.go:133 +0xbc\r\ngithub.com/go-swagger/go-swagger/generator.(*appGenerator).makeCodegenApp(0xc42001e690, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/support.go:610 +0x5d9\r\ngithub.com/go-swagger/go-swagger/generator.(*appGenerator).Generate(0xc42001e690, 0x0, 0x0)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/support.go:262 +0x94\r\ngithub.com/go-swagger/go-swagger/generator.GenerateServer(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc4203a85a0, 0xc4206ef4b0, ...)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/generator/support.go:43 +0xcb\r\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.(*Server).Execute(0xc420870840, 0xc4208678c0, 0x1, 0x3, 0xc420870840, 0x1)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/server.go:118 +0x54a\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).ParseArgs(0xc42001c960, 0xc420010250, 0x3, 0x3, 0x1010f88, 0x30, 0xc420374870, 0xc42045d380, 0xc42045cd48)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:316 +0x893\r\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).Parse(0xc42001c960, 0x6, 0x17aa779, 0x6, 0x0, 0x17f2a5c)\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:186 +0x73\r\nmain.main()\r\n\t/Users/krasimir/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go:105 +0x858\r\n```\r\n\r\npanics with the following swagger file.\r\n\r\n```\r\nswagger: '2.0'\r\ninfo:\r\n  version: 0.0.1\r\n  title: User Management\r\nbasePath: /v1/\r\nschemes:\r\n  - http\r\nproduces:\r\n  - application/json\r\nconsumes:\r\n  - application/json\r\nsecurity:\r\n  - jwt: []\r\n\r\npaths:\r\n  /user:\r\n    get:\r\n      summary: generates a list of users\r\n      parameters:\r\n        - in: query\r\n          name: offset\r\n          type: integer\r\n          description: The number of items to skip before starting to collect the result set\r\n        - in: query\r\n          name: limit\r\n          type: integer\r\n          description: The numbers of items to return\r\n      responses:\r\n        200:\r\n          description:  full user list\r\n          schema:\r\n            type: array\r\n            items:\r\n              properties:\r\n                id:\r\n                  type: integer\r\n                username:\r\n                  type: string\r\n                created:\r\n                  type: string\r\n                f2a:\r\n                  type: integer\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n  /user/login:\r\n    post:\r\n      security: []\r\n      summary: generates a swt token to use for authentication\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n              $ref: \"#/definitions/Login\"\r\n\r\n      responses:\r\n        200:\r\n          description: A jwt token to use for authentication.\r\n          schema:\r\n            $ref: \"#/definitions/Jwt\"\r\n        206:\r\n          description: Account is with 2 factor authenticaiton so use the 2 factor endpoint to generate the final the jwt token.\r\n          schema:\r\n            $ref: \"#/definitions/Jwt\"\r\n        201:\r\n          description: Password change is required, hit the password reset endpoint with the generated jwt token\r\n          schema:\r\n            $ref: \"#/definitions/Jwt\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n  /user/2fa:\r\n    delete:\r\n      summary: disable 2 factor authenticaiton for an account\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref:\r\n              \"#/definitions/F2aDisable\"\r\n      responses:\r\n        200:\r\n          description: 2fa disabled.\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n    get:\r\n      summary: generate qr base64 encoded image and master code for the user to scan with the google authenticator and add it to the phone app\r\n      responses:\r\n        200:\r\n          description: A 2fa object.\r\n          schema:\r\n            properties:\r\n              qr:\r\n                type: string\r\n              secret:\r\n                type: string\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n    put:\r\n      summary: enables 2fa on an account\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref: \"#/definitions/F2aEnable\"\r\n      responses:\r\n        200:\r\n          description: 2fa enabled.\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n    post:\r\n      summary: used when the account is with 2 factor authentication enabled. use the login endpoint first to get the initial jwt token and than use this endpoint to get the second jwt token after providing a valid google authenticator code\r\n      security: []\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref: \"#/definitions/F2aAuth\"\r\n      responses:\r\n        200:\r\n          description: the new jwt token that can be used for all endpoints.\r\n          schema:\r\n            $ref: \"#/definitions/Jwt\"\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n  /user/management:\r\n    post:\r\n      summary: creates a new user\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref: \"#/definitions/Profile\"\r\n      responses:\r\n        200:\r\n          description: An user id of the created user.\r\n          schema:\r\n            type: object\r\n            properties:\r\n              id_profile:\r\n                type: integer\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        409:\r\n          $ref: \"#/responses/UserExistsError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n    put:\r\n      summary: updates an existing user, only submited fields will be updated so can ommit the ones that don't need updating\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref: \"#/definitions/ProfileUpdate\"\r\n      responses:\r\n        200:\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n    delete:\r\n      summary: deletes a user from the db\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            type: object\r\n            required:\r\n            - id_profile\r\n            properties:\r\n              id_profile:\r\n                type: integer\r\n      responses:\r\n        200:\r\n          description: user deleted\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n\r\n  /user/password:\r\n    post:\r\n      summary: reset an user password, when old password is not provided the user will be required to change its password upon next login using a temporary password provided by an admin\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref: \"#/definitions/PassReset\"\r\n      responses:\r\n        200:\r\n          description: \"user updated\"\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n    put:\r\n      summary: resets an user password using a temporary password provided by an admin, once reset you can login as normal using the new password\r\n      security: []\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref: \"#/definitions/PassResetTemp\"\r\n      responses:\r\n        200:\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n  /user/role:\r\n    get:\r\n      summary: generates a list of all user roles\r\n      parameters:\r\n        - in: query\r\n          name: offset\r\n          type: integer\r\n          description: The number of items to skip before starting to collect the result set\r\n        - in: query\r\n          name: limit\r\n          type: integer\r\n          description: The numbers of items to return\r\n      responses:\r\n        200:\r\n          description:  full roles list\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: \"#/definitions/UserRole\"\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n    post:\r\n      summary: creates a new role\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          description: the id field here is not used so you can put any number to pass the validation\r\n          schema:\r\n            $ref: \"#/definitions/UserRole\"\r\n      responses:\r\n        200:\r\n          description: the id of the created role.\r\n          schema:\r\n            type: object\r\n            properties:\r\n              id :\r\n                type: integer\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n    put:\r\n      summary: updates a role\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref: \"#/definitions/UserRole\"\r\n      responses:\r\n        200:\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n    delete:\r\n      summary: deletes a role\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            type: object\r\n            required:\r\n            - id\r\n            properties:\r\n              id:\r\n                type: integer\r\n      responses:\r\n        200:\r\n          description: role deleted\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\nresponses:\r\n  UnauthorizedError:\r\n    description: Authentication is missing or invalid\r\n    schema:\r\n      $ref: \"#/definitions/Response\"\r\n  UserExistsError:\r\n    description: Username already taken\r\n    schema:\r\n      $ref: \"#/definitions/Response\"\r\n  DefaultError:\r\n    description: Generic Error used for most error responses - it returns a custom code and message depending on the reply context\r\n    schema:\r\n      $ref: \"#/definitions/Response\"\r\ndefinitions:\r\n  Jwt:\r\n      type: object\r\n      required:\r\n      - \"jwt\"\r\n      properties:\r\n        jwt:\r\n          type: string\r\n  F2aAuth:\r\n      type: object\r\n      required:\r\n      - jwt\r\n      - f2a\r\n      properties:\r\n        jwt:\r\n          type: string\r\n          description: the jwt token accuired form the initial login\r\n        f2a:\r\n          type: string\r\n          description: the  2 factor time code accuired from the google authenticator app\r\n  PassReset:\r\n      type: object\r\n      required:\r\n      - \"id_profile\"\r\n      - \"password_new\"\r\n      properties:\r\n        id_profile:\r\n          type: integer\r\n        password_old:\r\n          type: string\r\n        password_new:\r\n          type: string\r\n  PassResetTemp:\r\n      type: object\r\n      required:\r\n      - jwt\r\n      - passwordNew\r\n      properties:\r\n        jwt:\r\n          type: string\r\n          description: the jwt token accuired form the initial login\r\n        passwordNew:\r\n          type: string\r\n          description: the new password for this user\r\n  F2aDisable:\r\n      type: object\r\n      required:\r\n      - password\r\n      properties:\r\n        password:\r\n          type: string\r\n  F2aEnable:\r\n      type: object\r\n      required:\r\n        - code\r\n        - secret\r\n      properties:\r\n        code:\r\n          type: string\r\n          description: the 2 factor code generted by the android app after scanning the barcode\r\n        secret:\r\n          type: string\r\n          description: the master password which will be used to for decoding\r\n  Login:\r\n      type: object\r\n      required:\r\n        - username\r\n        - password\r\n      properties:\r\n        username:\r\n          type: string\r\n        password:\r\n          type: string\r\n      example:\r\n            username: \"admin@mail.com\"\r\n            password: \"password\"\r\n  Profile:\r\n      type: object\r\n      required:\r\n      - username\r\n      - password\r\n      - active\r\n      - role\r\n      - tenant_id\r\n      - person_id\r\n      - reset_password_next_login\r\n      properties:\r\n        username:\r\n          type: string\r\n        password:\r\n          type: string\r\n        reset_password_next_login:\r\n          type: boolean\r\n        active:\r\n          type: boolean\r\n        email:\r\n          type: string\r\n        role:\r\n            items:\r\n                type: integer\r\n        tenant_id:\r\n          type: integer\r\n        person_id:\r\n          type: integer\r\n      example:\r\n            username: \"username\"\r\n            email: \"admin@mail.com\"\r\n            password: \"password\"\r\n            active: true\r\n            reset_password_next_login: false\r\n            tenant_id: 1\r\n            person_id: 1\r\n            role:\r\n              - 1\r\n              - 2\r\n  ProfileUpdate:\r\n    type: object\r\n    required:\r\n      - id\r\n    properties:\r\n      id:\r\n        type: integer\r\n      username:\r\n        type: string\r\n      reset_password_next_login:\r\n        type: string\r\n        enum:\r\n          - \"true\"\r\n          - \"false\"\r\n\r\n      password:\r\n        type: string\r\n      active:\r\n        type: string\r\n        enum:\r\n          - \"true\"\r\n          - \"false\"\r\n      email:\r\n        type: string\r\n      role:\r\n          items:\r\n              type: integer\r\n      tenant_id:\r\n        type: integer\r\n      person_id:\r\n        type: integer\r\n    example:\r\n          id: 1\r\n          username: \"username\"\r\n          email: \"admin@mail.com\"\r\n          password: \"password\"\r\n          reset_password_next_login: \"false\"\r\n          active: \"true\"\r\n          tenant_id: 1\r\n          person_id: 1\r\n          role:\r\n            - 1\r\n            - 2\r\n  UserRole:\r\n      type: object\r\n      required:\r\n        - name\r\n        - id\r\n        - data\r\n      properties:\r\n        id:\r\n          type: integer\r\n        name:\r\n          type: string\r\n        data:\r\n          type: string\r\n  Response:\r\n    type: object\r\n    properties:\r\n      code:\r\n        type: integer\r\n      message:\r\n        type: string\r\n    required:\r\n      - code\r\n      - message\r\n    example:\r\n          code: \"500\"\r\n          message: \"Server error\"\r\nsecurityDefinitions:\r\n   jwt:\r\n    type: apiKey\r\n    in: header\r\n    name: x-jwt\r\n```\r\n\r\n Just troubleshoot that the panic is because of missing type array in the swagger spec so if you want you can close this one or implement some extra checks to prevent the panic.\r\n\r\n```\r\nrole:\r\n    items:\r\n    type: integer\r\n``` Panic is very annoying. It should throw an error on validation. Hello.\r\n\r\nI have a swagger spec which works for version 0.5.0 and crashes swagger when processed by version 0.12.0, with the same panic and stacktrace as described above.\r\n\r\nDeveloper, please reopen this bug and fix the input validation to show a proper error instead the panic.\r\n\r\nI should note that I am new to swagger and do not understand the terse `fix` to the spec, as provided in the first comment. Having swagger print a proper error message describing what is wrong with the spec I (and it) was given would be truly helpful in that regard.\r\n This was fixed in the upstream component after 0.12.0 was released. Thank you. Guess I should get a checkout and update to head of `master`. Oh. `upstream component` ... Ok, so that package is fixed, however the go-swagger repo does not have that fix vendored in yet, right ? It was pulled in last week, I believe.\r\n Hm. Yes. Looks to be commit 3b22d263716d71e5a327a6cc8ff49b066ef4ad3c.\r\n Sigh. I still see the error. Time to describe more of my setup, with the latest changes:\r\n\r\nUsing go-swagger commit 7d8446310e3b93087f03c227a0b394ee9b498b2d\r\nUsing go 1.8.4 linux/amd64\r\nThe input schema is https://github.com/SUSE/cf-usb-sidecar/blob/develop/docs/swagger-spec/api.yml\r\nThe swagger tool is invoked with the script/commands below.\r\nNote how the `GOPATH` is restricted to swagger and its vendored dependencies.\r\n\r\n```\r\nTOPDIR=$(cd \"$(dirname \"$0\")/..\" && pwd)\r\nmkdir -p \"${TOPDIR}\"/src/generated/CatalogServiceManager\r\n# Run the sub-moduled swagger (which comes with a vendored (matching) go-openapi).\r\nGOPATH=\"${TOPDIR}\" go run \\\r\n    \"${TOPDIR}\"/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go \\\r\n    generate server \\\r\n    -A CatlogServiceManager \\\r\n    -t \"${TOPDIR}\"/src/generated/CatalogServiceManager \\\r\n    -f docs/swagger-spec/api.yml\r\n```\r\n\r\nThe tool crashes and prints:\r\n```\r\n2017/11/06 11:53:04 building a plan for generation\r\n2017/11/06 11:53:04 planning definitions\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0xe pc=0x964899]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).NewSliceBranch(0xc420176c00, 0xc422b79440, 0xc421d10001)\r\n\t/home/andreask/fast/go/src/github.com/SUSE/cf-usb-sidecar/src/github.com/go-swagger/go-swagger/generator/model.go:387 +0x529\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildArray(0xc420176c00, 0x0, 0x0)\r\n\t/home/andreask/fast/go/src/github.com/SUSE/cf-usb-sidecar/src/github.com/go-swagger/go-swagger/generator/model.go:1081 +0xd5\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildItems(0xc420176c00, 0x0, 0x0)\r\n\t/home/andreask/fast/go/src/github.com/SUSE/cf-usb-sidecar/src/github.com/go-swagger/go-swagger/generator/model.go:1117 +0xc8e\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).makeGenSchema(0xc420176c00, 0x0, 0x0)\r\n\t/home/andreask/fast/go/src/github.com/SUSE/cf-usb-sidecar/src/github.com/go-swagger/go-swagger/generator/model.go:1458 +0xa6f\r\ngithub.com/go-swagger/go-swagger/generator.(*mapStack).Build(0xc421ce85d0, 0xc421ce85a0, 0xc421ce85d0)\r\n\t/home/andreask/fast/go/src/github.com/SUSE/cf-usb-sidecar/src/github.com/go-swagger/go-swagger/generator/model.go:887 +0x1cd\r\ngithub.com/go-swagger/go-swagger/generator.(*schemaGenContext).buildAdditionalProperties(0xc4202a7800, 0xc4202a78a8, 0x1)\r\n```\r\n\r\nAre there online or other tools I can use to validate my spec against swagger's current schema for specs?\r\n\r\n\r\n\r\n\r\n\r\n Found an online validator. It claims that the spec is ok.\r\n\r\nhttp://online.swagger.io/validator?url=https://raw.githubusercontent.com/SUSE/cf-usb-sidecar/develop/docs/swagger-spec/api.yml\r\n Does it work if you change this:\r\n\r\n        additionalProperties:\r\n          items:\r\n            type: string\r\n\r\nto this:\r\n\r\n        additionalProperties:\r\n          type: string\r\n Yes. With that change the generation now succeeds.\r\nIs that a schema change the online validator does not yet know about ? I'm not sure if it's something that the online validator doesn't or isn't able to catch, or if it's something that is technically allowed but not expected, and so the Go validator doesn't handle it properly.  It's in a similar class to someone having `items` in a `type: object` instead of `type: array`.  It may or may not be valid, but it shouldn't cause a panic.\r\n \ud83d\udc4d on `no panic` (on any input, not even, or even especially, bad input) Good luck in fixing the panic then. I will now go and work on getting the generated things integrated and build.  ## Problem statement\r\nWhen generating client code from the swagger spec yaml and providing --client-package argument that contains dashes (`-`), generated code will be placed into the folder that has the same name that was given as --client-package but the `import` statements in the generated source code will refer to a folder name where all the dashes are replaced with underscores `_`.\r\n\r\n\r\n## Swagger specification\r\n2.0\r\n\r\n## Steps to reproduce\r\n1. Have a swagger spec file my_api_spec.yaml\r\n2. Issue a command:\r\n`/usr/bin/swagger generate client --client-package my-service --spec my_api_spec.yaml`\r\n\r\n**Expected result:**\r\nClient source code is generated under \"**my-service**\" folder and generated files contain import sections where the modules are referred to as `\"<some path>/`**my-service**`/<module name>\"`\r\n**OR**\r\nClient source code is generated under \"**my_service**\" folder and generated files contain import sections where the modules are referred to as `\"<some path>/`**my_service**`/<module name>\"`\r\n\r\n**Actual result:**\r\nClient source code is generated under the \"**my-service**\" folder BUT generated source code files contain import sections referring to the folder `\"<some path>/`**my_service**`/<module name>\"`\r\n\r\n\r\n## Environment\r\nswagger version:\r\ndocker image quay.io/goswagger/swagger:0.11.0\r\ngo version: \r\ngo1.9 darwin/amd64\r\nOS:   \r\nlinux alpine (https://quay.io/repository/goswagger/swagger?tag=0.11.0&tab=tags)\r\n :+1:  I noticed this as well  Changes to resolve linting errors produced by gometalinter (see hack/check.sh) I intentionally made the commenting of unused elements a separate commit, such that reverting that part only would be easy enough, especially if removing the elements was preferred.\r\n\r\n # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=h1) Report\n> Merging [#1156](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/3962c9253776ac7c1332321fb391292e13149658?src=pr&el=desc) will **increase** coverage by `0.14%`.\n> The diff coverage is `75%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1156/graphs/tree.svg?token=aQS1DepR8C&width=650&height=150&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1156      +/-   ##\n==========================================\n+ Coverage   69.27%   69.42%   +0.14%     \n==========================================\n  Files          21       21              \n  Lines        7391     7358      -33     \n==========================================\n- Hits         5120     5108      -12     \n+ Misses       1801     1781      -20     \n+ Partials      470      469       -1\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [scan/scanner.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=tree#diff-c2Nhbi9zY2FubmVyLmdv) | `68.86% <\u00f8> (\u00f8)` | :arrow_up: |\n| [scan/classifier.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=tree#diff-c2Nhbi9jbGFzc2lmaWVyLmdv) | `92.68% <\u00f8> (\u00f8)` | :arrow_up: |\n| [scan/schema.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=tree#diff-c2Nhbi9zY2hlbWEuZ28=) | `70.36% <0%> (+1.2%)` | :arrow_up: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `66.04% <85.71%> (\u00f8)` | :arrow_up: |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `60.32% <0%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=footer). Last update [3962c92...6d91516](https://codecov.io/gh/go-swagger/go-swagger/pull/1156?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n Rebased branch with master  ## Problem statement\r\nWhen I set the `required` property to false (which i believe should be default behavior)  for a  formData parameter with `type` set to file and `name` set to attachment1 as shown below,  the generated code within the BindRequest func makes attaching a file mandatory. An http.ErrMissingFile is returned from the r.FormFile func and a 400 response is returned to the client.  In short setting the required property to false in a formData parameter with type set to file is not working. \r\n\r\n## Swagger specification\r\n```yaml\r\npost:\r\n  tags: [\"emails\"]\r\n  summary: Received parsed emails from sendgrid \r\n  description: |\r\n     Received parsed emails from sendgrid via sendgrid inbound parse api\r\n  consumes:\r\n    - multipart/form-data\r\n  parameters:\r\n    - in: formData\r\n      name: to \r\n      type: string \r\n      description: The recipient of the parsed email\r\n    - in: formData \r\n      name: from \r\n      type: string \r\n      description: The sender of the parsed email \r\n    - in: formData \r\n      name: subject \r\n      type: string \r\n      description: The subject of the parsed email \r\n    - in: formData \r\n      name: html \r\n      type: string \r\n      description: The html body of the parsed email\r\n    - in: formData \r\n      name: attachments\r\n      type: string \r\n      description: Attachments included in the inbound email parse\r\n    - in: formData \r\n      name : attachment-info \r\n      type: string \r\n      description: The attachment file information including number of files, content types and file names\r\n    - in: formData\r\n      name: attachment1\r\n      required: false\r\n      type: file\r\n      description: The first file attached to the email\r\n    - in: formData\r\n      name: attachment2\r\n      required: false\r\n      type: file\r\n      description: The second file attached to the email\r\n    - in: formData\r\n      name: attachment3\r\n      required: false\r\n      type: file\r\n      description: The third file attached to the email\r\n  responses:\r\n    200:\r\n      description: Emails request received\r\n    500:\r\n      description: Internal server error\r\n```\r\n\r\n## Generated Code \r\n------ Generated params struct snippet:\r\n```go\r\ntype PostSendgridEmailsParams struct {\r\n\r\n\t// HTTP Request Object\r\n\tHTTPRequest *http.Request\r\n\r\n\t/*The attachment file information including number of files, content types and file names\r\n\t  In: formData\r\n\t*/\r\n\tAttachmentInfo *string\r\n\t/*The first file attached to the email\r\n\t  In: formData\r\n\t*/\r\n\tAttachment1 runtime.File ....\r\n```\r\n-------Generated BindRequest func snippet:\r\n```go\r\n// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface\r\n// for simple values it will use straight method calls\r\nfunc (o *PostSendgridEmailsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {\r\n\tvar res []error\r\n\to.HTTPRequest = r\r\n\r\n\tif err := r.ParseMultipartForm(32 << 20); err != nil {\r\n\t\tif err != http.ErrNotMultipart {\r\n\t\t\treturn err\r\n\t\t} else if err := r.ParseForm(); err != nil {\r\n\t\t\treturn err\r\n\t\t}\r\n\t}\r\n\tfds := runtime.Values(r.Form)\r\n\r\n\tfdAttachmentInfo, fdhkAttachmentInfo, _ := fds.GetOK(\"attachment-info\")\r\n\tif err := o.bindAttachmentInfo(fdAttachmentInfo, fdhkAttachmentInfo, route.Formats); err != nil {\r\n\t\tres = append(res, err)\r\n\t}\r\n\r\n\tattachment1, attachment1Header, err := r.FormFile(\"attachment1\")\r\n\tif err != nil {\r\n\t\tLog.Error(\"failed to get attachment 1 in generated code\", \"error\", err)\r\n\t\tres = append(res, errors.New(400, \"reading file %q failed: %v\", \"attachment1\", err))\r\n\t} else {\r\n\t\to.Attachment1 = runtime.File{Data: attachment1, Header: attachment1Header}\r\n\t}\r\n```\r\n\r\n## Environment\r\nswagger version: 0.11.0\r\ngo version: 1.8.1\r\nOS:   Sierra \r\n I'm seeing the same thing. Current work around:\r\npatched the code in the `BindRequest` func that is generated from the formdata parameters provided in spec. The code now checks for `http.ErrNotMultipart` error in a switch statement and just logs that the file is missing instead of appending an error to func result. The `BindRequest` func validates the payload, i believe in the middleware, bc my handler is never hit if the payload is malformed. Also had to add some logic in my handler to deal with pointer derefs if not all three files were included in the payload, and updated swagger generate build script to keep patch in place during spec generations. I attached a file containing the patch. \r\n[bindRequest.txt](https://github.com/go-swagger/go-swagger/files/1261474/bindRequest.txt)\r\n  ## Problem statement\r\n\r\nI have an enumeration definition that isn't used by any documented routes or models, but is being automatically included in a generated swagger.json file when running swagger generate spec. Due to our code structure, I end up with dozens of these model definitions that serve no purpose in our interface and have no documentation. Is there a way to request that these type definitions be skipped in the generation process?\r\n\r\nThere are a lot of moving parts with this, so bear with me please.\r\n\r\nI have a need to generate Go bindings for a Google Protobuf file, using protoc and protoc-gen-go. In our messages, we have a Message ID enumeration that differentiates the messages, like so:\r\n\r\n`message Test\r\n{\r\n    enum MessageId\r\n    {\r\n        ID = 1;\r\n    }\r\n}`\r\n\r\nwhich generates the following Go code:\r\n\r\n`type Test_MessageId int32\r\nconst (\r\n    Test_ID Test_MessageId = 1\r\n)\r\nvar Test_MessageId_name = map[int32]string{\r\n    1: \"ID\",\r\n}\r\nvar Test_MessageId_value = map[string]int32{\r\n    \"ID\": 1,\r\n}\r\n...\r\nproto.RegisterEnum(\"Test_MessageId\", Test_MessageId_name, Test_MessageId_value`\r\n\r\nNowhere in my Go project is \"Test_MessageId\" used, other than this file. No go-swagger documented routes or models lead back to this \"enum\" type definition, yet running the spec generator results in a swagger.json file that contains a definition for the enumeration:\r\n\r\n`{\r\n...\r\n  \"definitions\": \r\n    \"Test_MessageId\": {\r\n      \"type\": \"integer\",\r\n      \"format\": \"in32\",\r\n      \"x-go-package\": \"test/gpb_gen_test\"\r\n    },\r\n...\r\n}`\r\n\r\nIf this problem is prohibitively difficult to workaround (which I suspect it will be given the interaction with GPB and other tools), then would it be possible to have a type comment similar to \"swagger:model\" that ignores a particular type when generating a spec, such as \"swagger:ignore\" or \"swagger:skip\"? That would be sufficient for my needs, as I can programmatically insert those comments as needed during our build process. Thanks in advance!\r\n\r\n## Swagger specification\r\n2.0\r\n\r\n## Steps to reproduce\r\n1) Create a .proto file with a message containing an enum (shown above)\r\n2) Download protoc and protoc-gen-go, then run \"protoc --go_out=. Test.proto\" to generate Go bindings\r\n3) Insert said file into a project that has swagger:model and swagger:operation meta-comments without using the enumeration anywhere\r\n4) Run \"swagger generate spec -o ./swagger.json -m main.go\" on the Go project\r\n5) Inspect swagger.json to see extraneous type definition\r\n\r\n## Environment\r\ngo-swagger version: 0.11.0\r\ngo version: 1.8.3 \r\nOS: Windows 10\r\n I make use of swagger:model to mark the types generated by protoc as definitions for use by the routes. So if I take out -m, I don't get the enumerations, but I also don't get any of the definitions that I do need.\r\n\r\nI feel like I'm using your tool in a way it was not originally intended (comment markup on existing Go code to generate a swagger spec solely for API documentation purposes), so I expect some issues. I was just hoping that maybe there was something that I was just missing.  `NewPostCreate` gets declared twice with this spec\r\n\r\nonce in \r\n`restapi/operations/users/post_create_responses.go`\r\nand another in \r\n`restapi/operations/users/post_create.go`\r\n\r\n\r\n```\r\nswagger: '2.0'\r\ninfo:\r\n  description: >-\r\n    a service for user management.\r\n  version: 0.0.1\r\n  title: User Management\r\nbasePath: /v1/user/\r\ntags:\r\n  - name: users\r\n    description: user management - authenticate,create , delete, reset password\r\nschemes:\r\n  - http\r\npaths:\r\n  /login:\r\n    post:\r\n      tags:\r\n        - users\r\n      summary: get an swt token to access protected endpoints\r\n      consumes:\r\n        - application/json\r\n      produces:\r\n        - application/json\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref: \"#/definitions/Profile\"\r\n      responses:\r\n        200:\r\n          description: A token object.\r\n          schema:\r\n            type: object\r\n            properties:\r\n              token:\r\n                type: string\r\n        404:\r\n          $ref: \"#/responses/NotFoundError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n\r\n  /create:\r\n    post:\r\n      security:\r\n        - swtAuth: []\r\n      tags:\r\n        - users\r\n      summary: creates a new user\r\n      consumes:\r\n        - application/json\r\n      produces:\r\n        - application/json\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref: \"#/definitions/Profile\"\r\n      responses:\r\n        200:\r\n          description: An user id of the created user.\r\n          schema:\r\n            type: object\r\n            properties:\r\n              idProfile:\r\n                type: string\r\n        401:\r\n          $ref: \"#/responses/UnauthorizedError\"\r\n        404:\r\n          $ref: \"#/responses/NotFoundError\"\r\n        440:\r\n          $ref: \"#/responses/ExpiredTokenError\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\n\r\n  /password:\r\n    post:\r\n      security:\r\n        - swtAuth: []\r\n      tags:\r\n        - users\r\n      summary: change or reset an user password\r\n      consumes:\r\n        - application/json\r\n      produces:\r\n        - application/json\r\n      parameters:\r\n        - in: body\r\n          name: body\r\n          schema:\r\n            $ref: \"#/definitions/Profile\"\r\n      responses:\r\n        200:\r\n          description: shows a message if the password was set or sent with an email reminder.\r\n          schema:\r\n            $ref: \"#/definitions/Response\"\r\n        default:\r\n          $ref: \"#/responses/DefaultError\"\r\nresponses:\r\n  UnauthorizedError:\r\n    description: SWT key is missing or invalid\r\n    schema:\r\n      $ref: \"#/definitions/Response\"\r\n  NotFoundError:\r\n    description: Resource not found\r\n    schema:\r\n      $ref: \"#/definitions/Response\"\r\n  ExpiredTokenError:\r\n    description: SWT key has expired, request a new one\r\n    schema:\r\n      $ref: \"#/definitions/Response\"\r\n  DefaultError:\r\n    description: Unexpected error\r\n    schema:\r\n      $ref: \"#/definitions/Response\"\r\ndefinitions:\r\n  Profile:\r\n      type: \"object\"\r\n      required:\r\n      - \"email\"\r\n      - \"pass\"\r\n      properties:\r\n        email:\r\n          type: \"string\"\r\n        pass:\r\n          type: \"string\"\r\n  Response:\r\n    type: object\r\n    properties:\r\n      code:\r\n        type: string\r\n      message:\r\n        type: string\r\n    required:\r\n      - code\r\n      - message\r\nsecurityDefinitions:\r\n   swtAuth:\r\n     type: apiKey\r\n     in: header\r\n     name: x-token\r\n```\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: 1.8.3\r\nOS:   OSX\r\n I think the culprit is in \r\n```\r\n440:\r\n          $ref: \"#/responses/ExpiredTokenError\"\r\n``` I think it happens because 440 is not a standard code defined in the white papers. thanks I will use the existing ones for now.  ## Problem statement\r\nWe need to know about , How the Models are Running and executing?\r\n\r\nWe Gone Through the Flow  swagger.go<serve.go<redoc.go \r\nIn redoc.go , we struct at the Point library included redoc.min.js \r\n\r\nPlease Guide us Through the flow.\r\nPlease remove the sections that don't apply\r\n\r\n## Swagger specification\r\n\r\n## Steps to reproduce\r\n\r\n## Environment\r\nswagger version: x.x.x  \r\ngo version: x.x.x  \r\nOS:   \r\n I Need to understand the flow , How the Models has been executing? If this issue is resolved, can we close it?  ## Problem statement\r\n\r\nWhen generating a server and there are multiple endpoints, the `operations` directory in `restapi` contains subdirectories for each of those endpoints.\r\n\r\nFor example:\r\n\r\n```yaml\r\npaths:\r\n  '/users/{id}':\r\n    parameters:\r\n      - name: id\r\n        in: path\r\n        required: true\r\n        type: string\r\n    get:\r\n      operationId: getById\r\n      summary: Get User By ID\r\n      tags:\r\n        - Users\r\n      responses:\r\n        '200':\r\n          description: ''\r\n          schema:\r\n            $ref: '#/definitions/user-output'\r\n  '/pets/{id}':\r\n    parameters:\r\n      - name: id\r\n        in: path\r\n        required: true\r\n        type: string\r\n    get:\r\n      operationId: getById\r\n      summary: Get Pet By ID\r\n      tags:\r\n        - Pets\r\n      responses:\r\n        '200':\r\n          description: ''\r\n          schema:\r\n            $ref: '#/definitions/pet-output'\r\n```\r\n\r\nShould produce the following:\r\n```\r\n\u2514\u2500\u2500 restapi\r\n    ...\r\n    \u251c\u2500\u2500 operations\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 pets\r\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\r\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 users\r\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 ...\r\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 ...\r\n```\r\n\r\nHowever, instead of generating the server I get this error: `\"getById\" is defined 2 times`\r\n\r\n[Assuming I had used `getById` for both operations and it generated a server with no validation errors] When referring to these operations (example for response) in the api, we say `users.NewGetByIdOK()` or `pets.NewGetByIdOK()` which means it doesn't matter if the operation id was the same.\r\n\r\n## Possible Solution\r\nIs it possible to bypass this validation error *IF* the operation ids will go into separate directories?\r\n If you add the `--skip-validation` flag only one of the getByID operations will be generated I am currently in the same problem. It makes more sense for the operationId to be unique per each endpoint. Per 2.0 spec, can we understand it to be unique as per endpoint but not globally?  ## Problem statement\r\nThe generated code doesn't import the correct package path, which needs more extra effort to patch it.\r\nIs there any option to specify the import prefix when generating code?\r\n For example, go-swagger will generate the code like\r\n\r\nstorage_client.go\r\npackage storage\r\nimport (\r\n    \"github.com/go-openapi/runtime\"\r\n    httptransport \"github.com/go-openapi/runtime/client\"\r\n    strfmt \"github.com/go-openapi/strfmt\"\r\n\"../../projects/myself/ui/tools/client/storage/filesystem/authentication\" \"../../projects/myself/ui/tools/client/storage/block/authentication\"\r\n)\r\n\r\n\"storage/filesystem/authentication\" and \"storage/block/authentication\" are also generated by go-swagger. However, they are imported into storage_client.go in a bad way which can't work without patching. @sun7927 , may I know how do you solve/workaround this issue? The workaround is:\r\n   1. set GOPATH\r\n   2. set the target to $(GOPATH)/src/github.com/your_project Should this issue be kept pen? \r\n\r\nWould it make more sense to generate relative import statement, instead of\r\n\r\n\"[number of .. from GOPATH-to-root]/[location-where-the-client-is-generated]\" \r\n\r\njust using\r\n\r\n\"../client/[tag]\" \r\n\"../models\" \r\n\r\nFor example,  GOPATH is set to \"/gowork\" , and run '''swagger generate client\" at directory \"/gowork/src/company/project\" , \r\n\r\nThe current import section of /gowork/src/company/project/client/xxx_client.go will looks like\r\n\r\n    import {\r\n      ..\r\n      \"../gowork/src/company/project/client/tag\"\r\n    }\r\n\r\nSo, from \"/gowork/src/company/project/xxx_client.go\", \"../gowork/src/company/project/client/tag\" will not resolve correctly.  Yes, it makes sense to me. As my project is going to be published to github.com, I added github.com ahead of company/project. After it, I can generate the code with correct import like \"github.com/my_company/my_project\". Not sure if it works correctly without github.com prefix. What's interesting is, once I set the GOPATH to \"/gowork/src/company/project\", the generated import section of \"/gowork/src/company/project/client/xxx_client.go\" becomes \r\n\r\n    import {\r\n      ..\r\n      \"../client/tag\"\r\n    } 0.11.0, from brew . \r\n\r\nSeems like Golang does not support relative import (sorry, still pretty new to Go), so relative import is not an option.\r\n\r\nFinally figure out the cause of the issue. The problem is caused by mismatching of GOPATH and PWD when symbolic-link is used. For example there is a symbolic link  of \"\\~/gowork\" links to \"/Volume/hd2/home/dev/gowork\". \"\\~\" is \"/Users/[user-name]\" .\r\n\r\nWhen generating the client code under \"~/gowork/src/company/project/\", since the GOPATH matches the prefix of $PWD, it can generate the correct import statement like\r\n\r\n    import {\r\n      \"company/project/client/tag\"\r\n    }\r\n\r\nBut when generating the client code under \"/Volume/hd2/home/dev/gowork/src/company/project/\", the it generates relative import statement like \r\n\r\n    import {\r\n      \"../../../..//Volume/hd2/home/dev/gowork/src/company/project/client/tag\"\r\n    }  ## Problem statement\r\nThe \"operationId\" can't be same as under the different resources. It doesn't make sense and make the generated code hard to use because of the meaningless function name. Looks swagger-codegen works better for it.\r\n\r\nIs there any workaround or fix for it?\r\n \r\n## Swagger specification\r\n  ...\r\n  \"paths\": {\r\n    \"/1.0/resource-1\": {\r\n      ...\r\n      \"get\": {\r\n        \"operationId\": \"list\",\r\n      }\r\n    },\r\n    \"/1.0/resource-2\": {\r\n      ...\r\n      \"get\": {\r\n        \"operationId\": \"list\",\r\n        }\r\n      },\r\n   ...\r\n## Steps to reproduce\r\n go-swagger validate <spec>\r\n will get error about \"list\" is defined 2 times\r\n\r\n## Environment\r\nswagger version: 2.0  \r\ngo version: 1.8.3\r\nOS:   Mac OS\r\n  \r\ncould you please tell me how to run this example.\r\n\r\n$GOPATH/src/github.com/go-swagger/go-swagger/examples/stream-server/cmd/countdown-server\r\n\r\n\r\n README instructions don't work for me @casualjim \r\n\r\nthanks a lot.  This would allow for easy mocking out of clients.\r\n\r\nhttps://github.com/go-swagger/go-swagger/blob/f8fdd34ee024def2304ce2417b6bab6046b8cb02/generator/templates/client/client.gotmpl#L33\r\n\r\nOr is there a better way to do the mocking?  ## Problem statement\r\non every swagger server generate the go-openapi/runtime/security is missing in the imports in restapi/operations/user_management_service_api.go\r\n\r\n\r\n## Swagger specification\r\n```\r\nswagger: '2.0'\r\ninfo:\r\n  description: >-\r\n    a service for user management.\r\n  version: 0.0.1\r\n  title: User Management Service\r\nhost: \"localhost:8080\"\r\nbasePath: /v1/account/\r\ntags:\r\n  - name: users\r\n    description: user management - authenticate,create , delete, reset password\r\nschemes:\r\n  - http\r\npaths:\r\n  /login:\r\n    post:\r\n      tags:\r\n        - users\r\n      summary: get an swt token to access protected endpoints\r\n      description: ''\r\n      consumes:\r\n        - application/json\r\n      produces:\r\n        - application/json\r\n      parameters:\r\n        - name: body\r\n          in: body\r\n          required: true\r\n          schema:\r\n            $ref: \"#/definitions/Login\"\r\n      responses:\r\n        200:\r\n          description: A token object.\r\n          schema:\r\n            type: object\r\n            properties:\r\n              token:\r\n                type: string\r\n        404:\r\n          description: A user not found.\r\n        default:\r\n          description: Unexpected error\r\n\r\ndefinitions:\r\n  Login:\r\n      type: \"object\"\r\n      required:\r\n      - \"email\"\r\n      - \"pass\"\r\n      properties:\r\n        email:\r\n          type: \"string\"\r\n        pass:\r\n          type: \"string\"\r\n```\r\n\r\n## Steps to reproduce\r\nswagger generate server ./swagger.yaml\r\ngo run cmd/user-management-service-server/main.go\r\n\r\n\r\n## Environment\r\nswagger version: dev  \r\ngo version: go version go1.8 darwin/amd64\r\nOS:   OSX\r\n\r\ngo env\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/krasimir\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"clang\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -gno-record-gcc-switches -fno-common\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nPKG_CONFIG=\"pkg-config\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\n\r\n\r\n\r\nI think the problem is due to line: 2017/08/16 16:52:07 goimports: scanning directory /Users/krasimir/src: permission denied\r\n\r\nbut I couldn't find where it gets called and the user under which I run the swagger generator is  the owner of this folder \r\n\r\n\r\n2017/08/16 16:52:07 building a plan for generation\r\n2017/08/16 16:52:07 planning definitions\r\n2017/08/16 16:52:07 planning operations\r\n2017/08/16 16:52:07 grouping operations into packages\r\n2017/08/16 16:52:07 planning meta data and facades\r\n2017/08/16 16:52:07 rendering 1 models\r\n2017/08/16 16:52:07 rendering 1 templates for model Login\r\n2017/08/16 16:52:07 name field Login\r\n2017/08/16 16:52:07 package field models\r\n2017/08/16 16:52:07 creating \"login.go\" in \"models\" as definition\r\n2017/08/16 16:52:07 rendering 1 operation groups (tags)\r\n2017/08/16 16:52:07 rendering 1 operations for users\r\n2017/08/16 16:52:07 rendering 4 templates for operation\r\n2017/08/16 16:52:07 name field PostLogin\r\n2017/08/16 16:52:07 package field users\r\n2017/08/16 16:52:07 creating \"post_login_parameters.go\" in \"restapi/operations/users\" as parameters\r\n2017/08/16 16:52:07 name field PostLogin\r\n2017/08/16 16:52:07 package field users\r\n2017/08/16 16:52:07 creating \"post_login_urlbuilder.go\" in \"restapi/operations/users\" as urlbuilder\r\n2017/08/16 16:52:07 name field PostLogin\r\n2017/08/16 16:52:07 package field users\r\n2017/08/16 16:52:07 creating \"post_login_responses.go\" in \"restapi/operations/users\" as responses\r\n2017/08/16 16:52:07 name field PostLogin\r\n2017/08/16 16:52:07 package field users\r\n2017/08/16 16:52:07 creating \"post_login.go\" in \"restapi/operations/users\" as handler\r\n2017/08/16 16:52:07 rendering support\r\n2017/08/16 16:52:07 rendering 6 templates for application UserManagementService\r\n2017/08/16 16:52:07 name field UserManagementService\r\n2017/08/16 16:52:07 package field operations\r\n2017/08/16 16:52:07 skipping restapi/configure_user_management_service.go because it already exists\r\n2017/08/16 16:52:07 name field UserManagementService\r\n2017/08/16 16:52:07 package field operations\r\n2017/08/16 16:52:07 creating \"main.go\" in \"cmd/user-management-service-server\" as main\r\n2017/08/16 16:52:07 name field UserManagementService\r\n2017/08/16 16:52:07 package field operations\r\n2017/08/16 16:52:07 creating \"embedded_spec.go\" in \"restapi\" as embedded_spec\r\n2017/08/16 16:52:07 name field UserManagementService\r\n2017/08/16 16:52:07 package field operations\r\n2017/08/16 16:52:07 creating \"server.go\" in \"restapi\" as server\r\n2017/08/16 16:52:07 name field UserManagementService\r\n2017/08/16 16:52:07 package field operations\r\n2017/08/16 16:52:07 creating \"user_management_service_api.go\" in \"restapi/operations\" as builder\r\n2017/08/16 16:52:07 goimports: scanning directory /Users/krasimir/src: permission denied\r\n2017/08/16 16:52:07 name field UserManagementService\r\n2017/08/16 16:52:07 package field operations\r\n2017/08/16 16:52:07 creating \"doc.go\" in \"restapi\" as doc\r\n is it in the usual place and if I add it in the imports manually it compiles ok\r\n\r\n```\r\n$ ls /Users/krasimir/src/github.com/go-openapi/runtime/security\r\ntotal 48\r\n-rwxrwxrwx   1 krasimir  staff   4.2K 16 Aug 00:43 bearer_auth_test.go\r\n-rwxrwxrwx   1 krasimir  staff   1.9K 16 Aug 00:43 basic_auth_test.go\r\n-rwxrwxrwx   1 krasimir  staff   4.1K 16 Aug 00:43 authenticator.go\r\n-rwxrwxrwx   1 krasimir  staff   2.6K 16 Aug 00:43 apikey_auth_test.go\r\ndrwxrwxrwx  44 krasimir  staff   1.5K 16 Aug 00:43 ..\r\ndrwxrwxrwx   6 krasimir  staff   204B 16 Aug 00:43 .\r\n``` now it ads some packages twice\r\n\r\n```\r\nrestapi/operations/users/post_login.go:17: validate redeclared as imported package name\r\nprevious declaration at restapi/operations/users/post_login.go:15\r\n```\r\n\r\nhardcoding doesn't look like a good idea :)\r\n\r\nmaybe if you give me some pointers where is the goimport called so I can find out if maybe this `permission denied` error is the culprit. all good now \r\n\r\ndidn't spend anytime about the goimport error , but now the last generation didn't even show that error.  By default when golang marshalls a field of type []byte to json, it uses a base64 string. This should be represented as:\r\n\r\n```\r\ntype: string\r\nformat: byte\r\n```\r\n\r\nBut currently when generating a spec from code, go-swagger uses:\r\n\r\n```\r\ntype: array,\r\nitems: {\r\n  type: integer,\r\n  format: uint8\r\n}\r\n```\r\n\r\nAlthough that seems more correct. It doesn't match what go will actually do when it marshalls the struct. I think this should be changed because an actual array of integers is rarely is ever returned. I tried adding type/format annotations to the field but they don't seem to work there. Ahh yes, adding strfmt base64 fixed it. I didn't know that could be used to tag non-string field.\r\n\r\nThanks  ## Problem statement\r\n\r\nWhat is the proper way to set the header name in a param or response definition?  Example:\r\n\r\n    type FooResponse struct {\r\n\t// X-Foo header\r\n\t//\r\n\t// in: header\r\n\t// name: X-Foo\r\n\tXFoo string\r\n\t// ... \r\n    }\r\n\r\nThis creates a \"valid\" swagger definition, as:\r\n\r\n      \"headers\": {\r\n        \"XFoo\": {\r\n          \"type\": \"string\",\r\n          \"description\": \"X-Foo header\\n\\nin: header\\nname: X-Foo\"\r\n        },\r\n\r\nIs this the best I can do?  Or is there some way to instead get:\r\n\r\n      \"headers\": {\r\n        \"X-Foo\": {\r\n          \"type\": \"string\",\r\n          \"description\": \"X-Foo header\"\r\n        },\r\n\r\n? Brilliant! That does indeed do the trick. Thanks!  When running: `swagger generate spec -m -o docs/swagger.json`\r\n\r\nI get a single error message: \r\n\r\n```\r\npackage github.com/nicksnyder/go-i18n/i18n, error is: unsupported type \"TranslateFunc\"\r\n```\r\n\r\nThe type referred to's definition is:\r\n `type TranslateFunc func(translationID string, args ...interface{}) string`\r\n\r\nJust a type alias for a function. Any idea why its stopping on this? I assume its just scanning all packages but don't see why its getting bothered here. Alternatively is there a way to restrict the scan models to a specific group of packages?  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1132?src=pr&el=h1) Report\n> Merging [#1132](https://codecov.io/gh/go-swagger/go-swagger/pull/1132?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/e1a9603e1d4d1efc80355f67ddd224a2ef9da362?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1132/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1132?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1132   +/-   ##\n=======================================\n  Coverage   69.27%   69.27%           \n=======================================\n  Files          21       21           \n  Lines        7332     7332           \n=======================================\n  Hits         5079     5079           \n  Misses       1788     1788           \n  Partials      465      465\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1132?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1132?src=pr&el=footer). Last update [e1a9603...773b082](https://codecov.io/gh/go-swagger/go-swagger/pull/1132?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n Thanks @casualjim \ud83d\udc4f   # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1130?src=pr&el=h1) Report\n> Merging [#1130](https://codecov.io/gh/go-swagger/go-swagger/pull/1130?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/b35ae8975577b58dd9c69116c12dc6460837bacd?src=pr&el=desc) will **increase** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1130/graphs/tree.svg?token=aQS1DepR8C&height=150&width=650&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1130?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1130      +/-   ##\n==========================================\n+ Coverage   69.25%   69.27%   +0.01%     \n==========================================\n  Files          21       21              \n  Lines        7332     7332              \n==========================================\n+ Hits         5078     5079       +1     \n+ Misses       1789     1788       -1     \n  Partials      465      465\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1130?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1130?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `38.75% <0%> (+1.25%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1130?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1130?src=pr&el=footer). Last update [b35ae89...a96c0f4](https://codecov.io/gh/go-swagger/go-swagger/pull/1130?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\nHello, I am trying to create a custom layout for a project with templates. Everything is fine with *custom* operations  \r\n```target: \"{{ if gt (len .Tags) 0 }}{{ joinFilePath .Package .ServerPackage .APIPackage .Package  }}{{ else }}{{ joinFilePath .Package .ServerPackage .Package  }}{{ end }}\"```\r\n\r\nHowever, I also want to move models to different folders too, I tried using this configuration:  \r\n``` target: \"{{ joinFilePath .Package .ModelPackage }}\" ```\r\nIt seems that `.Package` is not defined and everything is moved to `ModelPackage` - that is `models` folder.\r\n**Is there a way to define path like this:**\r\n`operation/models/model_name` ?\r\n\r\n### Generated operations do not match imports\r\nWhile using template below it will generate and `operations` correctly, but it will not correctly import these `operations` inside `restapi/operations/x_api.go`\r\n```target: \"{{ if gt (len .Tags) 0 }}{{ joinFilePath .Package .ServerPackage .APIPackage .Package  }}{{ else }}{{ joinFilePath .Package .ServerPackage .Package  }}{{ end }}\"```\r\nIt will use default path to operations. \r\n\r\n## Environment\r\nswagger version: dev \r\ngo version: 1.8.3 \r\nOS:   Macos\r\n Yes. I pretty much copied the default config and changed `operations` to what I described.\r\nIt works for `operations` (it finds and does not overwrite). It does not work with customizing `models`, because it lacks `.Package` property. Is that by design? Can it be added? I've got into code and found out that model movement is limited by the information that can be provided in `swagger.json` configuration file. Schema does not allow to add information (unless it's a hacky way) about model whereabouts (I assume, that models should be shared).  \r\n  \r\nBut the #2 issue that i have, is that when I change the directory (with the template) to move operations to a specific folder, `imports` are not correct in `service/restapi/operations/service_api.go` file. They are imported in the default way `project_name/service/restapi/operations/x`.\r\n@casualjim do you have any ideas where can I find code for this part? I am trying to achieve this kind of structure:\r\n```\r\nservicex\r\n   - operations\r\n   - models\r\n   ...\r\n   swagger.json\r\nservicey\r\n   - operations\r\n   - models\r\n   ...\r\n   swagger.json\r\nglobal_swagger.json\r\n```\r\nBut it seems I won't be able to do it because the `models` swagger spec part does not contain `Tags` and cannot be added. Because of this, after generating server from `global_swagger.json` you cannot use models from different services, but you can reference operations (operations in swagger spec has `Tags` prop).\r\n As I stated above, I already do that successfully, however it causes 2 issues:\r\n1) Models cannot be generated to different folders (.Package is not defined while generating with custom template (I assume that it is because `definitions` does not contain `Tags`)) (shown above)\r\n2) The imports in `service/restapi/operations/service_api.go` will point to `default` location instead of the one in custom template, where I have to change auto generated file (which can be ignored by using `skip_exists: true` - but then missing the whole auto generated idea?) No. The goal is to merge 2 (or more) already established applications into 1 application.\r\nP.S. Thank you for answering so quickly You are correct. It seems that having a middleware and main file might work. I will try doing this. Thank you.  Errors were visible when defining polymorphic types that had one or more\r\nfields of polymorphic arrays.\r\n\r\nAll tests pass.\r\n\r\nThis should be carefully code reviewed as I've made some changes to how marshaling code works. Additionally it would be good to validate whether marking an array of polymorphic types as a base type and non-exportable is the correct approach or whether setting something like HasDiscriminator is better. # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=h1) Report\n> Merging [#1128](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/a5175e9846582001edec88a4e3a434963e350605?src=pr&el=desc) will **increase** coverage by `0.06%`.\n> The diff coverage is `86.36%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1128/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1128      +/-   ##\n==========================================\n+ Coverage   69.25%   69.32%   +0.06%     \n==========================================\n  Files          21       21              \n  Lines        7332     7344      +12     \n==========================================\n+ Hits         5078     5091      +13     \n+ Misses       1789     1788       -1     \n  Partials      465      465\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `60.32% <100%> (\u00f8)` | :arrow_up: |\n| [generator/types.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=tree#diff-Z2VuZXJhdG9yL3R5cGVzLmdv) | `82% <66.66%> (+0.04%)` | :arrow_up: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `69.4% <85.71%> (+0.29%)` | :arrow_up: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `38.75% <0%> (+1.25%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=footer). Last update [a5175e9...09ba6d6](https://codecov.io/gh/go-swagger/go-swagger/pull/1128?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n I've got some more changes as I found a few errors in my submission so\ndon't worry about review ingress quite yet.\n\nOn 14 Aug 2017 6:19 pm, \"Ivan Porto Carrero\" <notifications@github.com>\nwrote:\n\n> I forgot to review this over the weekend. Would it be possible to update?\n> I'll try to do it tonight\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/go-swagger/go-swagger/pull/1128#issuecomment-322251754>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABhXUOG5-CMf3_3ATKzuFqQi129UnL44ks5sYIGUgaJpZM4O0fNA>\n> .\n>\n @casualjim this is now ready to be reviewed. All unit tests pass and I've done some validation with my more complex internal models.\r\n\r\nThanks Done! Let me know if there's anything else for me to do or that I can help with.  Correct me if I'm wrong, but it looks like only go 1.7.x is supported atm?  If that is the case, I think it's worth calling that out somewhere in the docs or the README.md :) Thanks for responding so quickly! :)  When running `go get -u github.com/go-swagger/go-swagger/cmd/swagger` (as indicated in the README.md), I get the following for 1.8.3:\r\n\r\n```\r\ngo get -u github.com/go-swagger/go-swagger/cmd/swagger\r\npackage context: unrecognized import path \"context\" (import path does not begin with hostname)\r\n```\r\n\r\nInterestingly, after switching to use go 1.7.5 (using goenv) and successfully running `go get -u github.com/go-swagger/go-swagger/cmd/swagger`, running `go get -u github.com/go-swagger/go-swagger/cmd/swagger` under go 1.8.3 no longer produces any error output.\r\n\r\nOdd! Can't reproduce..   When looking at the logs of a server generated by go-swagger, I notice a lot of verbose (and for production unnecessary) output.\r\n\r\nAfter startup, for each endpoint defined in my swagger spec, the log shows something like snippet 1.\r\n\r\nAlso, for each incoming request I get something like in snippet 2.\r\n\r\nSo the question really is twofold:\r\na) Is this default go-swagger behavior or did I mess something up?\r\nb) How can I change the output to be less verbose?\r\n\r\nSnippet 1:\r\n```\r\noperation: spec.Operation {\r\n\tVendorExtensible: spec.VendorExtensible {\r\n\t\tExtensions: spec.Extensions(nil)\r\n\t},\r\n\tOperationProps: spec.OperationProps {\r\n\t\tDescription: \"\",\r\n\t\tConsumes: [] string(nil),\r\n\t\tProduces: [] string(nil),\r\n\t\tSchemes: [] string(nil),\r\n\t\tTags: [] string {\r\n\t\t\t\"Users\"\r\n\t\t},\r\n\t\tSummary: \"Updates a user\",\r\n\t\tExternalDocs: ( * spec.ExternalDocumentation)(nil),\r\n\t\tID: \"patchUser\",\r\n\t\tDeprecated: false,\r\n\t\tSecurity: [] map[string][] string(nil),\r\n\t\tParameters: [] spec.Parameter {\r\n\t\t\tspec.Parameter {\r\n\t\t\t\tRefable: spec.Refable {\r\n\t\t\t\t\tRef: spec.Ref {\r\n\t\t\t\t\t\tRef: jsonreference.Ref {\r\n\t\t\t\t\t\t\treferenceURL: ( * url.URL)(nil),\r\n\t\t\t\t\t\t\treferencePointer: jsonpointer.Pointer {\r\n\t\t\t\t\t\t\t\treferenceTokens: [] string(nil)\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tHasFullURL: false,\r\n\t\t\t\t\t\t\tHasURLPathOnly: false,\r\n\t\t\t\t\t\t\tHasFragmentOnly: false,\r\n\t\t\t\t\t\t\tHasFileScheme: false,\r\n\t\t\t\t\t\t\tHasFullFilePath: false\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tCommonValidations: spec.CommonValidations {\r\n\t\t\t\t\tMaximum: ( * float64)(nil),\r\n\t\t\t\t\tExclusiveMaximum: false,\r\n\t\t\t\t\tMinimum: ( * float64)(nil),\r\n\t\t\t\t\tExclusiveMinimum: false,\r\n\t\t\t\t\tMaxLength: ( * int64)(nil),\r\n\t\t\t\t\tMinLength: ( * int64)(nil),\r\n\t\t\t\t\tPattern: \"\",\r\n\t\t\t\t\tMaxItems: ( * int64)(nil),\r\n\t\t\t\t\tMinItems: ( * int64)(nil),\r\n\t\t\t\t\tUniqueItems: false,\r\n\t\t\t\t\tMultipleOf: ( * float64)(nil),\r\n\t\t\t\t\tEnum: [] interface {}(nil)\r\n\t\t\t\t},\r\n\t\t\t\tSimpleSchema: spec.SimpleSchema {\r\n\t\t\t\t\tType: \"string\",\r\n\t\t\t\t\tFormat: \"\",\r\n\t\t\t\t\tItems: ( * spec.Items)(nil),\r\n\t\t\t\t\tCollectionFormat: \"\",\r\n\t\t\t\t\tDefault: interface {}(nil)\r\n\t\t\t\t},\r\n\t\t\t\tVendorExtensible: spec.VendorExtensible {\r\n\t\t\t\t\tExtensions: spec.Extensions(nil)\r\n\t\t\t\t},\r\n\t\t\t\tParamProps: spec.ParamProps {\r\n\t\t\t\t\tDescription: \"\",\r\n\t\t\t\t\tName: \"id\",\r\n\t\t\t\t\tIn: \"path\",\r\n\t\t\t\t\tRequired: true,\r\n\t\t\t\t\tSchema: ( * spec.Schema)(nil),\r\n\t\t\t\t\tAllowEmptyValue: false\r\n\t\t\t\t}\r\n\t\t\t}, spec.Parameter {\r\n\t\t\t\tRefable: spec.Refable {\r\n\t\t\t\t\tRef: spec.Ref {\r\n\t\t\t\t\t\tRef: jsonreference.Ref {\r\n\t\t\t\t\t\t\treferenceURL: ( * url.URL)(nil),\r\n\t\t\t\t\t\t\treferencePointer: jsonpointer.Pointer {\r\n\t\t\t\t\t\t\t\treferenceTokens: [] string(nil)\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tHasFullURL: false,\r\n\t\t\t\t\t\t\tHasURLPathOnly: false,\r\n\t\t\t\t\t\t\tHasFragmentOnly: false,\r\n\t\t\t\t\t\t\tHasFileScheme: false,\r\n\t\t\t\t\t\t\tHasFullFilePath: false\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tCommonValidations: spec.CommonValidations {\r\n\t\t\t\t\tMaximum: ( * float64)(nil),\r\n\t\t\t\t\tExclusiveMaximum: false,\r\n\t\t\t\t\tMinimum: ( * float64)(nil),\r\n\t\t\t\t\tExclusiveMinimum: false,\r\n\t\t\t\t\tMaxLength: ( * int64)(nil),\r\n\t\t\t\t\tMinLength: ( * int64)(nil),\r\n\t\t\t\t\tPattern: \"\",\r\n\t\t\t\t\tMaxItems: ( * int64)(nil),\r\n\t\t\t\t\tMinItems: ( * int64)(nil),\r\n\t\t\t\t\tUniqueItems: false,\r\n\t\t\t\t\tMultipleOf: ( * float64)(nil),\r\n\t\t\t\t\tEnum: [] interface {}(nil)\r\n\t\t\t\t},\r\n\t\t\t\tSimpleSchema: spec.SimpleSchema {\r\n\t\t\t\t\tType: \"\",\r\n\t\t\t\t\tFormat: \"\",\r\n\t\t\t\t\tItems: ( * spec.Items)(nil),\r\n\t\t\t\t\tCollectionFormat: \"\",\r\n\t\t\t\t\tDefault: interface {}(nil)\r\n\t\t\t\t},\r\n\t\t\t\tVendorExtensible: spec.VendorExtensible {\r\n\t\t\t\t\tExtensions: spec.Extensions(nil)\r\n\t\t\t\t},\r\n\t\t\t\tParamProps: spec.ParamProps {\r\n\t\t\t\t\tDescription: \"\",\r\n\t\t\t\t\tName: \"payload\",\r\n\t\t\t\t\tIn: \"body\",\r\n\t\t\t\t\tRequired: true,\r\n\t\t\t\t\tSchema: ( * spec.Schema)(0xc4200698c0),\r\n\t\t\t\t\tAllowEmptyValue: false\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tResponses: ( * spec.Responses)(0xc4201eca80)\r\n\t}\r\n}\r\n```\r\n\r\nSnippet 2: (added line numbering manually)\r\n```\r\n01   2017-08-09T14:24:13.473274177Z [cors] 2017/08/09 14:24:13 ServeHTTP: Preflight request\r\n02   2017-08-09T14:24:13.473316875Z [cors] 2017/08/09 14:24:13   Preflight response headers: map[Access-Control-Allow-Methods:[DELETE] Access-Control-Allow-Headers:[Content-Type, Csrftoken] Access-Control-Allow-Credentials:[true] Vary:[Origin Access-Control-Request-Method Access-Control-Request-Headers] Access-Control-Allow-Origin:[http://localhost:9000]]\r\n03   2017-08-09T14:24:13.473321887Z [negroni] 2017-08-09T14:24:13Z | 200 | \t 61.591\u00b5s | <domain goes here> | OPTIONS /v1/auth\r\n04   2017-08-09T14:24:13.530857974Z 2017/08/09 14:24:13 looking up route for DELETE /v1/auth\r\n05   2017-08-09T14:24:13.530885146Z 2017/08/09 14:24:13 got a router for PUT\r\n06   2017-08-09T14:24:13.530888070Z 2017/08/09 14:24:13 got a router for DELETE\r\n07   2017-08-09T14:24:13.530890803Z 2017/08/09 14:24:13 got a router for POST\r\n08   2017-08-09T14:24:13.530893016Z 2017/08/09 14:24:13 got a router for GET\r\n09   2017-08-09T14:24:13.530895495Z 2017/08/09 14:24:13 got a router for PATCH\r\n10   2017-08-09T14:24:13.530897928Z 2017/08/09 14:24:13 found a route for DELETE /v1/auth with 0 parameters\r\n11   2017-08-09T14:24:13.530904475Z [cors] 2017/08/09 14:24:13 ServeHTTP: Actual request\r\n12   2017-08-09T14:24:13.530907212Z [cors] 2017/08/09 14:24:13   Actual response added headers: map[Vary:[Origin] Access-Control-Allow-Origin:[http://localhost:9000] Access-Control-Expose-Headers:[Location] Access-Control-Allow-Credentials:[true]]\r\n13   2017-08-09T14:24:13.533717171Z 2017/08/09 14:24:13 responding to DELETE /v1/auth with produces: [application/json]\r\n14   2017-08-09T14:24:13.533722464Z 2017/08/09 14:24:13 offers: [application/json]\r\n15   2017-08-09T14:24:13.533725141Z 2017/08/09 14:24:13 [DELETE /v1/auth] set response format \"application/json\" in context\r\n16   2017-08-09T14:24:13.533739576Z 2017/08/09 14:24:13 [DELETE /v1/auth] negotiated response format \"application/json\"\r\n17   2017-08-09T14:24:13.533744020Z [negroni] 2017-08-09T14:24:13Z | 204 | \t 4.327136ms | <domain goes here> | DELETE /v1/auth\r\n```\r\n\r\nP.S: For Snippet 2 the following lines I can account for in my middleware:  \r\n01, 02, 11, 12: CORS middleware\r\n03, 17: Negroni Logger DEBUG=true, but yes. Thanks for pointing out the obvious. Wish this would be documented somewhere.  mgo compatibility was added to strfmt in https://github.com/go-openapi/strfmt/pull/12\r\n\r\nThis adds the`strfmt.ObjectId` type to the type resolver.\r\n\r\nSigned-off-by: Matt Tucker <matt.tucker@microsoft.com>\r\n\r\nFixes #884  This seems like the appropriate way to add support for mongodb ObjectId's. I've tested with a swagger spec that includes:\r\n```yaml\r\nproperties:\r\n  _id:\r\n    type: string\r\n    format: ObjectId\r\n```\r\n\r\nThis generates a struct with:\r\n```\r\ntype Test struct {\r\n\tID strfmt.ObjectId `json:\"_id,omitempty\"`\r\n}\r\n``` # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1123?src=pr&el=h1) Report\n> Merging [#1123](https://codecov.io/gh/go-swagger/go-swagger/pull/1123?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/2b10750186555bd18f39b4fc386465ffd608ce06?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1123/graphs/tree.svg?token=aQS1DepR8C&src=pr&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1123?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1123   +/-   ##\n=======================================\n  Coverage   69.27%   69.27%           \n=======================================\n  Files          21       21           \n  Lines        7332     7332           \n=======================================\n  Hits         5079     5079           \n  Misses       1788     1788           \n  Partials      465      465\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1123?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/types.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1123?src=pr&el=tree#diff-Z2VuZXJhdG9yL3R5cGVzLmdv) | `81.95% <\u00f8> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1123?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1123?src=pr&el=footer). Last update [2b10750...bc65be9](https://codecov.io/gh/go-swagger/go-swagger/pull/1123?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  Only to bear in mind, is there any plan to release and update to support Open API spec 3.0 https://swagger.io/announcing-openapi-3-0/\r\n\r\nThanks! Very interesting!! @casualjim, is there any update on openapi 3 support? @casualjim, check-in again, is there a timeline for openapi 3 support? Or early adoption on another branch? @fredbi the problem is, as long as the spec reads `swagger: '2.0'` we will have issues using the spec for other tools, doc generators, etc.  there are a lot more issues with 3.0. it has expressions, a vastly different syntax and so on.\r\nSomebody else is more than welcome to step up but I don't have time to implement and mantain such a large specification as main contributor.   Thanks @casualjim @fredbi ... totally understand. Perhaps if I can get some cycles I'll try to contribute. I think I have some tricks I can do to keep on 2.0. Keep up the great work!  ## Problem statement\r\nI want to be able to add a prometheus metrics endpoint.  The de facto library for instrumenting prometheus metrics is https://github.com/prometheus/client_golang. They have a handler that can be added to a server to serve the metrics.  https://godoc.org/github.com/prometheus/client_golang/prometheus/promhttp#Handler.\r\n\r\nI don't see an obvious way to add a handler to the generated server.  Considering using gorilla/mux to create a mux router that has a `/metrics` route that routes to the metrics handler and a `/` route that routes to the handler normally configured.  Then just setting the handler in `main.go` and not generating main by using `--exclude-main`.  \r\n\r\nA recommendation and/or documentation would be handy.   I also need to be able to instrument each individual method handler... but don't see a convenient way to wrap individual handlers.  e.g.  If I have `GetFoo` and `PostFoo` handlers, I want to be able to wrap them individually.  `InstrumentGetFoo(GetFoo)` and `InstrumentPostFoo(PostFoo)`.   @casualjim Thanks.  \r\n\r\nI'm still not clear how I can do the 2nd case where I instrument individual method handlers with different middlewares.  \r\n\r\nIt seems both `setupGlobalMiddleware` and `setupMiddlewares` would apply the same middleware to all method handlers.\r\n\r\n\r\n @casualjim \r\n\r\nThis is the code I'm trying to replicate: https://github.com/prometheus/client_golang/blob/master/prometheus/promhttp/instrument_server_test.go#L148-L232\r\n\r\nHere's what I ended up doing in `setupMiddlewares`... not extremely pretty, but it works. :)\r\n\r\n```\r\nfunc setupMiddlewares(handler http.Handler) http.Handler {\r\n\tinFlightGauge := prometheus.NewGauge(prometheus.GaugeOpts{\r\n\t\tName: \"in_flight_requests\",\r\n\t\tHelp: \"A gauge of requests currently being served by the wrapped handler.\",\r\n\t})\r\n\r\n\tcounter := prometheus.NewCounterVec(\r\n\t\tprometheus.CounterOpts{\r\n\t\t\tName: \"api_requests_total\",\r\n\t\t\tHelp: \"A counter for requests to the wrapped handler.\",\r\n\t\t},\r\n\t\t[]string{\"code\", \"method\"},\r\n\t)\r\n\r\n\t// Durations are partitioned by the HTTP method and use custom\r\n\t// buckets based on the expected request duration. ConstLabels are used\r\n\t// to set a handler label to mark which endpoint is being tracked.\r\n\thistogramOpts := prometheus.HistogramOpts{\r\n\t\tName:        \"request_duration_seconds\",\r\n\t\tHelp:        \"A histogram of latencies for requests.\",\r\n\t\tBuckets:     []float64{.25, .5, 1, 2.5, 5, 10},\r\n\t\tConstLabels: prometheus.Labels{\"route\": \"/workflows/<id>\"},\r\n\t}\r\n\tgetWorkflowsVec := prometheus.NewHistogramVec(\r\n\t\thistogramOpts,\r\n\t\t[]string{\"method\"},\r\n\t)\r\n\thistogramOpts.ConstLabels = prometheus.Labels{\"route\": \"/workflows/<id>/signals\"}\r\n\tpostSignalsVec := prometheus.NewHistogramVec(\r\n\t\thistogramOpts,\r\n\t\t[]string{\"method\"},\r\n\t)\r\n\r\n\t// responseSize has no labels, making it a zero-dimensional\r\n\t// ObserverVec.\r\n\tresponseSize := prometheus.NewHistogramVec(\r\n\t\tprometheus.HistogramOpts{\r\n\t\t\tName:    \"response_size_bytes\",\r\n\t\t\tHelp:    \"A histogram of response sizes for requests.\",\r\n\t\t\tBuckets: []float64{200, 500, 900, 1500},\r\n\t\t},\r\n\t\t[]string{},\r\n\t)\r\n\r\n\t// Register all of the metrics in the standard registry.\r\n\tprometheus.MustRegister(inFlightGauge, counter, getWorkflowsVec, postSignalsVec, responseSize)\r\n\r\n\tinFlightMiddleware := func(handler http.Handler) http.Handler {\r\n\t\treturn promhttp.InstrumentHandlerInFlight(inFlightGauge, handler)\r\n\t}\r\n\tcounterMiddleware := func(handler http.Handler) http.Handler {\r\n\t\treturn promhttp.InstrumentHandlerCounter(counter, handler)\r\n\t}\r\n\tresponseSizeMiddleware := func(handler http.Handler) http.Handler {\r\n\t\treturn promhttp.InstrumentHandlerResponseSize(responseSize, handler)\r\n\t}\r\n\tendpointSpecificMiddleware := func(handler http.Handler) http.Handler {\r\n\t\tr := mux.NewRouter()\r\n\r\n\t\tgetWorkflowPath := getPath(&operations.GetWorkflowsIDURL{ID: \"{id}\"})\r\n\t\tr.Methods(http.MethodGet).Path(getWorkflowPath).Handler(promhttp.InstrumentHandlerDuration(getWorkflowsVec, handler))\r\n\r\n\t\tpostWorkflowSignalPath := getPath(&operations.PostWorkflowsIDSignalsURL{ID: \"{id}\"})\r\n\t\tr.Methods(http.MethodPost).Path(postWorkflowSignalPath).Handler(promhttp.InstrumentHandlerDuration(postSignalsVec, handler))\r\n\r\n\t\tr.PathPrefix(\"/\").Handler(handler)\r\n\t\treturn r\r\n\t}\r\n\treturn alice.New(inFlightMiddleware, counterMiddleware, endpointSpecificMiddleware, responseSizeMiddleware).Then(handler)\r\n}\r\n```\r\n\r\nMy `getPath` convenience method looks like this:\r\n```\r\ntype URLBuilder interface {\r\n\tBuild() (*url.URL, error)\r\n}\r\n\r\nfunc getPath(urlBuilder URLBuilder) string {\r\n\turl, err := urlBuilder.Build()\r\n\tif err != nil {\r\n\t\tpanic(fmt.Sprintf(\"Problem parsing url for type: %T\", urlBuilder))\r\n\t}\r\n\treturn url.Path\r\n}\r\n```\r\n\r\nIt would be great if we could somehow hook into or get the individual method handlers when configuring the middleware.  Would definitely clean up this example.   @casualjim That would be awesome.  Thanks. Hi there, \r\n\r\nIs this still the best way to add a Prometheus endpoint to a generated server? I'd really love to simply associate a \"/metrics\" endpoint with the promhttp.Handler that's already available (https://godoc.org/github.com/prometheus/client_golang/prometheus/promhttp#Handler). Is the only way to do so via middleware? \r\n\r\nThanks,\r\nIlina @ilinamitra As far as I know, this is still the only way.  @casualjim Let me know if there have been updates to how to add a prometheus endpoint.    The template was generating code that checked the members of the array, before actually assigning the array from the body of the request. This should now be validating the members of the array from the body, and then assigning. # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1119?src=pr&el=h1) Report\n> Merging [#1119](https://codecov.io/gh/go-swagger/go-swagger/pull/1119?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/58df9445239fc07264797fb42a76a1f7b55349e5?src=pr&el=desc) will **increase** coverage by `0.01%`.\n> The diff coverage is `96.55%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1119/graphs/tree.svg?height=150&width=650&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1119?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1119      +/-   ##\n==========================================\n+ Coverage   69.24%   69.26%   +0.01%     \n==========================================\n  Files          21       21              \n  Lines        7333     7333              \n==========================================\n+ Hits         5078     5079       +1     \n+ Misses       1790     1789       -1     \n  Partials      465      465\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1119?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1119?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `60.32% <96.55%> (\u00f8)` | :arrow_up: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1119?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `38.27% <0%> (+1.23%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1119?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1119?src=pr&el=footer). Last update [58df944...aea3899](https://codecov.io/gh/go-swagger/go-swagger/pull/1119?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n Apologies, should be fixed now.  ## Problem statement\r\n\r\nWith structs tagged with `swagger:model`, in the swagger.json generated by `swagger generate spec`, some models are generated with a title property equal to the comment preceding, and some models are generated with a description equal to the comment preceding. I can't figure out the reason for this behaviour. When the title is set as the entire comment, then in the Swagger UI, the model name is the entire comment and not just the struct name. Can someone please clarify?\r\n\r\n## Environment\r\nswagger version: dev  \r\ngo version: 1.8.3\r\nOS:  Linux\r\n So the issue appears to be, that if the first comment line, which starts with the name of the type, ends in a period, then the entire line will be used as the model title, but if there is no period then the line will be used as the description. This must be a bug, no? I would like to be able to end my sentences with a period without having the entire comment line used as the name of the model in the models section of the swagger-ui.   ## Problem statement\r\nAt the moment my generated model struct only contains a json tag. Is there a way to automatically add a db tag as well? If not, could this functionality be added?\r\n\r\nFor example:\r\n```\r\ntype NewPet struct {\r\n\r\n\t// chip\r\n\tChip string `json:\"chip,omitempty\" db:\"chip\"`\r\n\r\n\t// name\r\n\t// Required: true\r\n\tName *string `json:\"name\" db:\"name\"`\r\n\r\n\t// tag\r\n\tTag string `json:\"tag,omitempty\" db:\"tag\"`\r\n}\r\n```\r\n\r\n Thanks so much! Managed to get it working!  ## Problem statement\r\n\r\nThere is route responding with swagger:model. In case when you do not have swagger:response using this model, swagger generates invalid spec without ```definitions``` block  referenced to non-existing field\r\n\r\n## Swagger specification\r\n\r\n- swagger:model\r\n- swagger:response\r\n\r\n## Steps to reproduce\r\nI made an example based on [that code](https://github.com/go-swagger/go-swagger/blob/master/fixtures/goparsing/petstore/rest/handlers/orders.go)\r\n\r\n```\r\npackage rest\r\n\r\nimport (\r\n\t\"net/http\"\r\n\r\n\t\"github.com/go-openapi/runtime/middleware/denco\"\r\n\t\"github.com/go-openapi/strfmt\"\r\n)\r\n\r\n// An Order for one or more pets by a user.\r\n// swagger:model order\r\ntype Order struct {\r\n\t// the ID of the order\r\n\t//\r\n\t// required: true\r\n\tID int64 `json:\"id\"`\r\n\r\n\t// the id of the user who placed the order.\r\n\t//\r\n\t// required: true\r\n\tUserID int64 `json:\"userId\"`\r\n\r\n\t// the time at which this order was made.\r\n\t//\r\n\t// required: true\r\n\tOrderedAt strfmt.DateTime `json:\"orderedAt\"`\r\n\r\n\t// the items for this order\r\n\t// mininum items: 1\r\n\tItems []struct {\r\n\r\n\t\t// the id of the pet to order\r\n\t\t//\r\n\t\t// required: true\r\n\t\tPetID int64 `json:\"petId\"`\r\n\r\n\t\t// the quantity of this pet to order\r\n\t\t//\r\n\t\t// required: true\r\n\t\t// minimum: 1\r\n\t\tQuantity int32 `json:\"qty\"`\r\n\t} `json:\"items\"`\r\n}\r\n\r\n// UpdateOrder swagger:route PUT /orders/{id} orders updateOrder\r\n//\r\n// Updates an order.\r\n//\r\n// Responses:\r\n//    default: genericError\r\n//        200: order\r\n//        422: validationError\r\nfunc UpdateOrder(rw http.ResponseWriter, req *http.Request, params denco.Params) {\r\n\t// some actual stuff should happen in here\r\n}\r\n\r\n// ServeAPI serves this api\r\nfunc ServeAPI() error {\r\n\tmux := denco.NewMux()\r\n\r\n\troutes := []denco.Handler{\r\n\t\tmux.PUT(\"/orders/:id\", UpdateOrder),\r\n\t}\r\n\thandler, err := mux.Build(routes)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn http.ListenAndServe(\":8000\", handler)\r\n}\r\n\r\n```\r\nFor such app it generates swagger.json without any ```definitions``` block and references to non-existing ```#/responses/order```. But after declaring such struct\r\n```\r\n// An OrderResponse response model\r\n//\r\n// This is used for returning a response with a single order as body\r\n//\r\n// swagger:response orderResponse\r\ntype OrderResponse struct {\r\n\t// in: body\r\n\tPayload *models.Order `json:\"order\"`\r\n}\r\n```\r\nand using it in different route, swagger generates ```definitions``` block and references response correct\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: go1.8 darwin/amd64\r\nOS:   OS/X 10.11.6\r\n Thanks a lot for your response!\r\nFor me it wasn't obvious behavior and I didn't find any info in documentation about it. Maybe it would be better to describe such case, for example in [this chapter](https://goswagger.io/generate/spec.html) ? Where is the documentation for the thick `body:order`?  ## Problem statement\r\nEven the simplest server I could come up with fails on swagger UI with `TypeError: Failed to fetch`\r\n\r\n## Swagger specification\r\n\r\n```json\r\n{\r\n  \"consumes\": [\r\n    \"application/json\"\r\n  ],\r\n  \"produces\": [\r\n    \"application/json\"\r\n  ],\r\n  \"schemes\": [\r\n    \"http\",\r\n    \"https\"\r\n  ],\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"description\": \"Title: example\",\r\n    \"title\": \"is an example REST app\",\r\n    \"version\": \"0.0.1\"\r\n  },\r\n  \"host\": \"localhost:3000\",\r\n  \"basePath\": \"/v1\",\r\n  \"paths\": {\r\n    \"/foo\": {\r\n      \"get\": {\r\n        \"description\": \"Get a foo\",\r\n        \"operationId\": \"getFoo\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"$ref\": \"#/responses/getFooResponse\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"responses\": {\r\n    \"getFooResponse\": {\r\n      \"description\": \"GetFooResponse is returned by GET /foo\",\r\n      \"schema\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n          \"Name\": {\r\n            \"description\": \"Name of the foo\",\r\n            \"type\": \"string\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"securityDefinitions\": {\r\n    \"bearer\": {\r\n      \"type\": \"apiKey\",\r\n      \"name\": \"Authorization\",\r\n      \"in\": \"header\"\r\n    }\r\n  },\r\n  \"security\": [\r\n    {\r\n      \"bearer\": []\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n`main.go`:\r\n\r\n```go\r\n// Package main is an example REST app\r\n//\r\n//     Title: example\r\n//     Schemes: http, https\r\n//     Host: localhost:3000\r\n//     BasePath: /v1\r\n//     Version: 0.0.1\r\n//\r\n//     Consumes:\r\n//     - application/json\r\n//\r\n//     Produces:\r\n//     - application/json\r\n//\r\n//\t   Security:\r\n//     - bearer:\r\n//\r\n//     SecurityDefinitions:\r\n//       bearer:\r\n//         type: apiKey\r\n//         name: Authorization\r\n//         in: header\r\n// swagger:meta\r\npackage main\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\t\"log\"\r\n\t\"net/http\"\r\n\t\"time\"\r\n)\r\n\r\nfunc main() {\r\n\ts := &http.Server{\r\n\t\tAddr:           \":3000\",\r\n\t\tHandler:        &myHandler{},\r\n\t\tReadTimeout:    10 * time.Second,\r\n\t\tWriteTimeout:   10 * time.Second,\r\n\t\tMaxHeaderBytes: 1 << 20,\r\n\t}\r\n\tlog.Fatal(s.ListenAndServe())\r\n}\r\n\r\ntype myHandler struct{}\r\n\r\n// GetFoo handles a GET to /foo\r\n//\r\n// swagger:route GET /foo getFoo\r\n//\r\n// Get a foo\r\n//\r\n//     Responses:\r\n//       200: getFooResponse\r\nfunc (myHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\r\n\tlog.Printf(\"Got request %+v\", r)\r\n\tdefer r.Body.Close()\r\n\r\n\tvar resp GetFooResponse\r\n\tresp.Body.Name = \"foo\"\r\n\r\n\tjsonBody, err := json.Marshal(&resp.Body)\r\n\tif err != nil {\r\n\t\thttp.Error(w, \"failed to marshal\", 500)\r\n\t\treturn\r\n\t}\r\n\r\n\tw.Write(jsonBody)\r\n}\r\n\r\n// GetFooArgs are the parameters to GET /foo\r\n//\r\n// swagger:parameters getFoo\r\ntype GetFooArgs struct {\r\n}\r\n\r\n// GetFooResponse is returned by GET /foo\r\n//\r\n// swagger:response getFooResponse\r\ntype GetFooResponse struct {\r\n\t// in:body\r\n\tBody struct {\r\n\t\t// Name of the foo\r\n\t\tName string\r\n\t}\r\n}\r\n```\r\n\r\n```\r\ngo build && swagger generate spec -o swagger.json\r\n./example & swagger serve swagger.json -F swagger\r\n```\r\n\r\nThrough the swagger UI, try to make a `GET` request to `/foo`. It will fail.\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: go1.8.3\r\nOS: linux/amd64\r\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1106?src=pr&el=h1) Report\n> Merging [#1106](https://codecov.io/gh/go-swagger/go-swagger/pull/1106?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/f8fdd34ee024def2304ce2417b6bab6046b8cb02?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1106/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1106?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1106   +/-   ##\n=======================================\n  Coverage   69.24%   69.24%           \n=======================================\n  Files          21       21           \n  Lines        7333     7333           \n=======================================\n  Hits         5078     5078           \n  Misses       1790     1790           \n  Partials      465      465\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1106?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1106?src=pr&el=footer). Last update [f8fdd34...c984da1](https://codecov.io/gh/go-swagger/go-swagger/pull/1106?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1105?src=pr&el=h1) Report\n> Merging [#1105](https://codecov.io/gh/go-swagger/go-swagger/pull/1105?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/e09b074aed0ea3dd216b0ce68c8033dce4bc1409?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1105/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1105?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1105   +/-   ##\n=======================================\n  Coverage   69.26%   69.26%           \n=======================================\n  Files          21       21           \n  Lines        7333     7333           \n=======================================\n  Hits         5079     5079           \n  Misses       1789     1789           \n  Partials      465      465\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1105?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1105?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `60.32% <\u00f8> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1105?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1105?src=pr&el=footer). Last update [e09b074...89eabce](https://codecov.io/gh/go-swagger/go-swagger/pull/1105?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1104?src=pr&el=h1) Report\n> Merging [#1104](https://codecov.io/gh/go-swagger/go-swagger/pull/1104?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/7d7013c3f7fee28cb736ebc90f6c1347d0ea5646?src=pr&el=desc) will **increase** coverage by `0.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1104/graphs/tree.svg?width=650&src=pr&token=aQS1DepR8C&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1104?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1104      +/-   ##\n==========================================\n+ Coverage   69.24%   69.26%   +0.01%     \n==========================================\n  Files          21       21              \n  Lines        7330     7333       +3     \n==========================================\n+ Hits         5076     5079       +3     \n  Misses       1789     1789              \n  Partials      465      465\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1104?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1104?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `60.32% <100%> (\u00f8)` | :arrow_up: |\n| [generator/template\\_repo.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1104?src=pr&el=tree#diff-Z2VuZXJhdG9yL3RlbXBsYXRlX3JlcG8uZ28=) | `59.49% <100%> (+0.51%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1104?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1104?src=pr&el=footer). Last update [7d7013c...ea635e5](https://codecov.io/gh/go-swagger/go-swagger/pull/1104?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\n\r\ngo-swagger generates incorrect json for overridden `json:\"-\"` fields from embedded struct.\r\n\r\n## Steps to reproduce\r\n\r\n```go\r\n// A SimpleOne is a model with a few simple fields\r\ntype SimpleOne struct {\r\n\tID   int64  `json:\"id\"`\r\n\tName string `json:\"name\"`\r\n\tAge  int32  `json:\"age\"`\r\n}\r\n\r\n// An OverridingOneIgnore is composed of a SimpleOne and overrides a field to ignore it\r\ntype OverridingOneIgnore struct {\r\n\tSimpleOne\r\n\tAge int32 `json:\"-\"`\r\n}\r\n```\r\n\r\nAge property still will appear in result json.\r\n\r\nWill you be welcome for pull request similar to this commit https://github.com/smacker/go-swagger-gen/commit/ae481eecf270fabe8ba13b87c29655928c17c30d ?\r\n  ## Problem statement\r\n\r\nThe swagger UI doesn't pass along an authorization header.\r\n\r\n## Swagger specification\r\n```\r\n{\r\n  \"consumes\": [\r\n    \"application/json\"\r\n  ],\r\n  \"produces\": [\r\n    \"application/json\"\r\n  ],\r\n  \"schemes\": [\r\n    \"http\",\r\n    \"https\"\r\n  ],\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"description\": \"foo\",\r\n    \"version\": \"0.0.1\"\r\n  },\r\n  \"host\": \"localhost:3000\",\r\n  \"basePath\": \"/v1\",\r\n  \"paths\": {\r\n    \"/foo\": {\r\n      \"get\": {\r\n        \"summary\": \"Get a foo\",\r\n        \"operationId\": \"getFoo\",\r\n        \"responses\": {\r\n          \"201\": {\r\n            \"$ref\": \"#/responses/fooResponse\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"responses\": {\r\n    \"fooResponse\": {\r\n      \"description\": \"Foo response\",\r\n      \"schema\": {\r\n        \"type\": \"array\",\r\n        \"items\": {\r\n          \"type\": \"string\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"securityDefinitions\": {\r\n    \"bearer\": {\r\n      \"type\": \"apiKey\",\r\n      \"name\": \"Authorization\",\r\n      \"in\": \"header\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n```swagger serve swagger.json --flavor=swagger```\r\n\r\nClick `Authorize`, type something in the box, click `Authorize` on the dialog, then click `X`.\r\nNow try a request to `/foo` through the UI. No auth header is passed.\r\n\r\nThe following ends up in my log:\r\n```\r\n2017-07-20T13:58:07.997-0400    info    http/api_v1.go:75       NotFound: GET /v1/foo: map[Accept-Language:[en-US,en] Referer:[http://petstore.swagger.io/?url=http%3A%2F%2Flocalhost%3A35285%2Fswagger.json] Accept-Encoding:[gzip, deflate, br] Connection:[keep-alive] Dnt:[1] X-Do-Not-Track:[1] Accept:[application/json] Origin:[http://petstore.swagger.io] User-Agent:[Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.9.1 Chrome/56.0.2924.122 Safari/537.36]]\r\n```\r\n\r\nThere is no `Authorization` header passed along.\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: go1.8.3 \r\nOS: linux/amd64\r\n My bad, I misunderstood how to set it up. In the `meta` section, in addition to `SecurityDefinitions`, you need:\r\n\r\n```\r\n//\t   Security:\r\n//         - bearer:\r\n```  ## Problem statement\r\n\r\n## Swagger specification\r\nN/A (use any).\r\n\r\n```\r\nswagger generate server -f swagger.yml -t api_v1 --model-package=restmodels --server-package=server --exclude-main -A Example\r\n```\r\n\r\n## Steps to reproduce\r\nRun any swagger yaml through the latest code and I get the following compile errors in the generated `server.go`.\r\n\r\n1. `configureServer(domainSocket, \"unix\", string(s.SocketPath))` \r\n1. `configureServer(httpServer, \"http\", s.httpServerL.Addr().String())`\r\n1. `configureServer(httpsServer, \"https\", s.httpsServerL.Addr().String())` \r\n\r\nIn all cases the last argument needs to be removed to solve the problem.\r\n\r\n## Environment\r\nswagger version: `dev` (latest)\r\ngo version: 1.8.2\r\nOS: Mac OS 10.12.3\r\n Sorry I cannot follow. `swagger generate` generates code for me that does not compile. I don't see how the callback helps me. Thanks!  ## Problem statement\r\n\r\nWhen a name collision occurs, go-swagger silently picks one definition to use and drops the rest. While we can work around this by avoiding name collisions, it is difficult to track down on sufficiently large and disjoint web APIs.\r\n\r\n## Steps to reproduce\r\n\r\nI'm working to fully document a web API that uses Google ProtoBuf to communicate with several backend services. Each service provides its own .proto file, and the Go code is generated from the .proto file directly. Currently, the web server uses these generated types directly, but we have some name collisions between services. I am working around this issue by duplicating the types in question and providing unique names based on the service they're associated with. \r\n\r\nI would like to receive some sort of output/logging/warning that a name collision was detected so that I can fail my build process and have the developer correct the name collision prior to continuing. This would help head off potential API issues right when they're introduced, rather than much later when we're testing out the documentation layer.\r\n\r\n## Environment\r\nswagger version: 0.10.0 \r\ngo version: 1.8.3  \r\nOS: Windows 10\r\n  ## Problem statement\r\n\r\nI'm working on a API in which I have to mix Go code with a C library, ergo I need to use cgo. In the example below I have some annoted go code from the examples, together with a basic cgo integration. When the cgo import + compiler are active, an empty spec is generated. When the cgo specific code is removed or commented-out, the generator tool works as expected.\r\n\r\n## Go code + Swagger annotations\r\n```go\r\npackage main\r\n\r\n/*\r\n#include <stdlib.h>\r\n#include \"hello.h\"\r\n*/\r\nimport \"C\"\r\n\r\nimport \"net/http\"\r\n\r\n// An Order is used to foobar\r\n// swagger:response order\r\ntype Order struct {\r\n\t// The order foobars\r\n\t// in: body\r\n\tBody struct {\r\n\t\t// Name of the order\r\n\t\tname string\r\n\t\t// ID of the order\r\n\t\t// Required: true\r\n\t\tid int32\r\n\t}\r\n}\r\n\r\n// CreateOrder swagger:route POST /orders orders createOrder\r\n//\r\n// Creates an order.\r\n//\r\n// Responses:\r\n//    default: validationError\r\n//        200: order\r\n//        422: validationError\r\nfunc CreateOrder(rw http.ResponseWriter, req *http.Request) {\r\n\t// some actual stuff should happen in here\r\n}\r\n\r\nfunc main() {\r\n\tC.hello()\r\n}\r\n```\r\n\r\n## Steps to reproduce\r\n1. Run `swagger generate spec`. Result:\r\n```json\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"paths\": {}\r\n}\r\n```\r\n2. Remove the cgo build comment and import and the cgo call in the main function\r\n```go\r\n/*\r\n#include <stdlib.h>\r\n#include \"hello.h\"\r\n*/\r\nimport \"C\r\n\r\n...\r\n\r\nC.hello()\r\n```\r\n\r\n3. Without the cgo usage, run `swagger generate spec` again. The result is now:\r\n```json\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"paths\": {\r\n    \"/orders\": {\r\n      \"post\": {\r\n        \"tags\": [\r\n          \"orders\"\r\n        ],\r\n        \"summary\": \"Creates an order.\",\r\n        \"operationId\": \"createOrder\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"$ref\": \"#/responses/order\"\r\n          },\r\n          \"422\": {\r\n            \"$ref\": \"#/responses/validationError\"\r\n          },\r\n          \"default\": {\r\n            \"$ref\": \"#/responses/validationError\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"responses\": {\r\n    \"order\": {\r\n      \"description\": \"An Order is used to foobar\",\r\n      \"schema\": {\r\n        \"type\": \"object\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nThis would be the expected behaviour of the annotated go code together with the swagger generator.\r\n\r\n## Environment\r\nswagger version: 0.10.0\r\ngo version: go version go1.8.3 darwin/amd64\r\nOS:  Mac OS X 10.11.6\r\n Bump... no one?  ## Problem statement\r\n\r\nAccording to the docs here https://goswagger.io/use/server.html#your-own-code\r\n\r\n> Every incoming request is described as a bunch of input parameters which have been validated prior to calling the handler. So whenever your code is executed, the input parameters are guaranteed to be valid according to what the swagger specification prescribes.\r\n\r\nHowever, in practice the server generated does not actually validate input. I'm able to not specify required properties `resource_type` or `resource_id`, or even send an empty body and the code path still reaches my route handler.\r\n\r\n\r\n## Swagger specification\r\n```yaml\r\npaths:\r\n  /resource_schema:\r\n    put:\r\n      tags: [ResourceSchema]\r\n      description: Find or create a `ResourceSchema` based on the resource's type and id\r\n      parameters:\r\n        - in: body\r\n          name: input\r\n          required: true\r\n          schema:\r\n            type: object\r\n            properties:\r\n              resource_type: { $ref: '#/definitions/ResourceType' }\r\n              resource_id: { type: string }\r\n            required: [resource_type, resource_id]\r\n      responses:\r\n        200:\r\n          description: Success\r\n          schema: { $ref: '#/definitions/ResourceSchema' }\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n```\r\nswagger generate server -t servers/go\r\ngo run servers/go/cmd/schema-service-server/main.go\r\n```\r\n\r\nThen make a request to the server, such as\r\n```\r\ncurl -X PUT \"http://localhost:60223/v1/resource_schema\" -H \"accept: application/json\" -H \"content-type: application/json\" -d \"{}\"\r\n```\r\n\r\n\r\n\r\n## Environment\r\nswagger version: dev (latest master as of time of issue)\r\ngo version go1.8.1 darwin/amd64\r\nOS: macOS 10.12.5 (16F73) I think this is fixed in the latest release,\r\n```\r\n$ swagger version\r\nversion: 0.12.0\r\ncommit: 8135eb6728e43b73489e80f94426e6d387809502\r\n\r\n$ swagger validate spec.json\r\nThe swagger spec at \"spec.json\" is invalid against swagger specification . see errors :\r\n- .swagger in body is required\r\n- .info in body is required\r\n\r\n$ swagger generate server -t servers/go\r\nThe swagger spec at \"swagger.json\" is invalid against swagger specification . see errors :\r\n- .swagger in body is required\r\n- .info in body is required\r\n```\r\n @cswarth you are talking about validating the spec, the issue is about the generated server doing validation on http request bodies. Same issue here, I've generated a go server with a spec containing for ex this kind of parameters :\r\n```\r\n      parameters:\r\n      - name: UUID\r\n        in: path\r\n        description: \"People UUID\"\r\n        required: true\r\n        type: string\r\n        format: uuid\r\n```\r\n\r\nMy `restapi/operations/object_name` contain some generated type like :\r\n```\r\ntype GetUserPreferencesParams struct {\r\n\r\n\t// HTTP Request Object\r\n\tHTTPRequest *http.Request `json:\"-\"`\r\n\r\n\t/*People UUID\r\n\t  Required: true\r\n\t  In: path\r\n\t*/\r\n\tUUID strfmt.UUID\r\n}\r\n```\r\n\r\nAnd `strfmt.UUID` is well defined in `GitHub.com/go-openapi/strfmt/default.go` with : \r\n\r\n```\r\n// UUID represents a uuid string format\r\n//\r\n// swagger:strfmt uuid\r\ntype UUID string\r\n...\r\n// IsUUID returns true is the string matches a UUID, upper case is allowed\r\nfunc IsUUID(str string) bool {\r\n\treturn rxUUID.MatchString(str)\r\n}\r\n...\r\nUUIDPattern = `(?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$`\r\n...\r\n```\r\n\r\nBut the following code return alway `nil` with a good UUID or a bad one : \r\n```\r\nfunc (o *GetUserPreferencesParams) bindUUID(rawData []string, hasKey bool, formats strfmt.Registry) error {\r\n\tvar raw string\r\n\tif len(rawData) > 0 {\r\n\t\traw = rawData[len(rawData)-1]\r\n\t}\r\n\r\n\tvalue, err := formats.Parse(\"uuid\", raw)\r\n\tif err != nil {\r\n\t\treturn errors.InvalidType(\"UUID\", \"path\", \"strfmt.UUID\", raw)\r\n\t}\r\n\to.UUID = *(value.(*strfmt.UUID))\r\n\r\n\treturn nil\r\n}\r\n```\r\n\r\nThen trying to call API with a god or bad UUID format produce the same result :/\r\nAnything to do to force formats checking ? @fredbi I will do and keep you in touch, thank you for your response. Hello @fredbi from what I understand you've merged your fix in the master branch on 16th Jan.\r\nThen I assume I can test simply by updating my go-swagger via `go get -u github.com/go-swagger/go-swagger/cmd/swagger`.\r\n\r\nThen I've regenerated my server via `bin/swagger  generate server -A postier -f ./swagger.yml`.\r\nThis has updated some files, adding some with a strange name like `notify_new_a_d_e_l_i_mail_parameters.go` in place of `notify_new_adelimail_parameters.go` then I've deleted the old ones (in this example `notify_new_adelimail_parameters.go`).\r\n\r\nDespite all these changes, during my tests, when I try to get a parameter with bad UUID format (in URL), no error is raised :(\r\n I confirm my parameter is `required` : \r\n```\r\n      parameters:\r\n      - name: UUID\r\n        in: path\r\n        description: \"People UUID\"\r\n        required: true\r\n        type: string\r\n        format: uuid\r\n```\r\n\r\nbut despite that, the format aren't validated.\r\n\r\nAnyway I can wait next week for merging of the new go-openapi/validate in the vendor tree.\r\nFor \"strange\" naming (with is not an issue) what is strange is just that the names has changed after go-swagger upgrade and without any change in the spec.\r\n\r\nMany thanks for your time. `Anyhow, the plan with #1372 is to provide a more comprehensive support for simple params, including arrays, nested arrarys and default values for which there are many issus currently.`\r\n\r\nFrom `master` or `fredbi:909-fix-validate-format-for-simple-param` ?  ## Problem statement\r\nGo swagger generates invalid code. Specifically, here's an excerpt of generated lines\r\n\r\n```\r\nfunc (o *DeleteResourceSchemaID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {\r\n\troute, _ := o.Context.RouteInfo(r) // this line causes problems\r\n\tvar Params = NewDeleteResourceSchemaIDParams()\r\n\r\n\tif err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params\r\n```\r\n\r\nAnd here's the definition of `RouteInfo` function on `Context` struct from the `github.com/go-openapi/runtime/middleware` package\r\n\r\n```\r\nfunc (c *Context) RouteInfo(request *http.Request) (*MatchedRoute, *http.Request, bool) {\r\n```\r\n\r\nAs you can see function returns 3 results but generated code only accounts for 2 of them, causing compiler to complain\r\n\r\n## Steps to reproduce\r\n```bash\r\n$ swagger generate server -t servers/go\r\n....\r\n$ go get -u -f ./servers/go/...\r\n# github.com/segmentio/schema-service/swagger/servers/go/restapi/operations/resource_schema\r\nservers/go/restapi/operations/resource_schema/delete_resource_schema_id.go:41: assignment count mismatch: 2 = 3\r\nservers/go/restapi/operations/resource_schema/get_resource_schema_id.go:41: assignment count mismatch: 2 = 3\r\nservers/go/restapi/operations/resource_schema/put_resource_schema.go:43: assignment count mismatch: 2 = 3\r\n```\r\n\r\n## Environment\r\nswagger version: 0.10.0\r\nswagger commit: 4d1e79b5a98c6f67bbf06923643d5317ed37a058\r\ngo version go1.8.1 darwin/amd64\r\nOS:  macOS 10.12.5 (16F73)\r\n Confirmed latest master fixes it, thanks and closing! I cloned the repo, checked out the latest commit explicitly in master (just to be sure, since just cloning the repo and building also didn't work), ran `go build` and `swagger version` still shows the same commit id: \r\n```\r\n\u279c  git checkout c2a7c881ef89c08a33a18783b4a5c6f6329a0473\r\nHEAD is now at c2a7c88... replace gorilla/context with net.Context (#1090)\r\n\u279c  go build\r\n\u279c  swagger version\r\nversion: 0.10.0\r\ncommit: 4d1e79b5a98c6f67bbf06923643d5317ed37a058\r\n```\r\n\r\nI'm sure I'm doing something wrong since I still get the errors `mismatch` mentioned above. Any hints? I wound up solving the issue by copying one of the included examples near the line for the respective error, but not sure why my code still isn't generating correctly.\r\n\r\nFYI, the code in question is in the ServeHTTP func, needed to add rCtx:\r\n```\r\n\troute, rCtx, _ := o.Context.RouteInfo(r)\r\n\tif rCtx != nil {\r\n\t\tr = rCtx\r\n\t}\r\n``` Dear All,\r\n\r\nI am having similar trouble. Please suggest.\r\n\r\nswagger version: 0.12.0\r\ncommit: 8135eb6728e43b73489e80f94426e6d387809502\r\n\r\ngo version go1.8.3 linux/amd64\r\nubuntu 14.04 LTS\r\n\r\nI am using following command\r\n\r\n/usr/local/bin/swagger generate server -t gen -f ./spec/swagger.yml --exclude-main -A [AppName] -P [principal]\r\n\r\nthanks and regards,\r\nRajdeep  ## Problem statement\r\nI want to generate a specification from annotated Go code. As a simple test I copied the following Package comment to my main.go and then tried to generate the spec using go swagger. I get the following error: analyzed: yaml: line 22: mapping values are not allowed in this context.\r\n\r\n// Copyright 2015 go-swagger maintainers\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//    http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\n// Package petstore Petstore API.\r\n//\r\n// the purpose of this application is to provide an application\r\n// that is using plain go code to define an API\r\n//\r\n// This should demonstrate all the possible comment annotations\r\n// that are available to turn go code into a fully compliant swagger 2.0 spec\r\n//\r\n// Terms Of Service:\r\n//\r\n// there are no TOS at this moment, use at your own risk we take no responsibility\r\n//\r\n//     Schemes: http, https\r\n//     Host: localhost\r\n//     BasePath: /v2\r\n//     Version: 0.0.1\r\n//     License: MIT http://opensource.org/licenses/MIT\r\n//     Contact: John Doe<john.doe@example.com> http://john.doe.com\r\n//\r\n//     Consumes:\r\n//     - application/json\r\n//\r\n//     Produces:\r\n//     - application/json\r\n//\r\n// swagger:meta\r\n\r\n\r\n## Steps to reproduce\r\n$ swagger generate spec -o ./swagger.json -i main.go\r\nanalyzed: yaml: line 22: mapping values are not allowed in this context\r\n## Environment\r\nswagger version: version: 0.10.0\r\ncommit: 4d1e79b5a98c6f67bbf06923643d5317ed37a058  \r\ngo version: go version go1.8.3 darwin/amd64\r\nOS:   OSX\r\n Actually copied the go code from https://github.com/go-swagger/go-swagger/blob/master/docs/generate/spec/meta.md and placed it in a doc.go file. Still get the same error as from my own code.  I created an empty repo and added a single doc.go file to it. Added to same package comment and then ran \r\n``` bash \r\n$ swagger generate spec -o ./swagger.json \r\n```\r\n\r\nThis worked but if I use \r\n``` bash \r\n$ swagger generate spec -o ./swagger.json -i doc.go\r\n```\r\nI get the same error as before. Am I using the input file parameter properly?\r\n Is it possible to restrict it to just look at certain files? If I run it in my actual project repo, its generates 100s of errors from my imported packages. My Swagger annotations will only be in two files, doc.go and rest .go.  So I can exclude third-party libraries with annotations in my code? or do you mean that the swagger generator would need to be updated? This is typical of the errors I see when I run Swagger on my project:\r\nhypatia-go/src/github.com/gorilla/mux/context_native.go:6:2: could not import context (cannot find package \"context\" in any of:\r\n\t/usr/local/go/src/context (from $GOROOT)\r\n\thypatia-go/src/context (from $GOPATH))\r\nhypatia-go/src/github.com/gorilla/mux/context_native.go:7:2: could not import net/http (cannot find package \"net/http\" in any of:\r\n\t/usr/local/go/src/net/http (from $GOROOT)\r\n\r\nIs this a configuration issue with my environment? go version go1.8.3 darwin/amd64 Go and go-swagger both installed on OSX via Homebrew. Everything is standard, and my code functions correctly. I had the same issue on the same version of Go (1.8.3 on macOS). To resolve it, I manually set my GOROOT even though it was already set when I ran go env. There is probably a tool that does not read GOROOT properly.  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1090?src=pr&el=h1) Report\n> Merging [#1090](https://codecov.io/gh/go-swagger/go-swagger/pull/1090?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/bfd36e35adc5ee3542455214806bd959d94f46a0?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1090/graphs/tree.svg?src=pr&token=aQS1DepR8C&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1090?src=pr&el=tree)\n\n```diff\n@@          Coverage Diff           @@\n##           master   #1090   +/-   ##\n======================================\n  Coverage    72.2%   72.2%           \n======================================\n  Files          21      21           \n  Lines        6051    6051           \n======================================\n  Hits         4369    4369           \n  Misses       1217    1217           \n  Partials      465     465\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1090?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1090?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <100%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1090?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1090?src=pr&el=footer). Last update [bfd36e3...1f5edaa](https://codecov.io/gh/go-swagger/go-swagger/pull/1090?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\nWhen specifying a security block in the AND format (described here: https://swagger.io/docs/specification/authentication/ ), having only one pass allows requests to continue without a 401.\r\n\r\nThe documentation states:\r\n```\r\nsecurity:\r\n  - A\r\n  - B\r\n\r\n # A OR B\r\nsecurity:\r\n  - A\r\n    B\r\n\r\n # A AND B\r\n```\r\n\r\n## Swagger specification\r\nI've included the relevant bit here.  I've put a full test case at https://github.com/gavbaa/go-swagger-auth-test if you want to clone and review directly.  It's the TodoList Swagger file, with only the following security bit added.\r\n```\r\nsecurityDefinitions:\r\n  AppTokenAuth:\r\n    type: apiKey\r\n    in: header\r\n    name: App-Token\r\n  TokenAuth:\r\n    type: apiKey\r\n    in: header\r\n    name: Token\r\n\r\nsecurity:\r\n  - AppTokenAuth: []\r\n    TokenAuth: []\r\n```\r\n## Steps to reproduce\r\nI implemented only the AppTokenAuthAuth function and left TokenAuthAuth returning an error:\r\n```\r\n\tapi.AppTokenAuthAuth = func(token string) (interface{}, error) {\r\n\t\treturn true, nil\r\n\t\t//return nil, errors.NotImplemented(\"api key auth (AppTokenAuth) App-Token from header param [App-Token] has not yet been implemented\")\r\n\t}\r\n\r\n\t// Applies when the \"Token\" header is set\r\n\tapi.TokenAuthAuth = func(token string) (interface{}, error) {\r\n\t\treturn nil, errors.NotImplemented(\"api key auth (TokenAuth) Token from header param [Token] has not yet been implemented\")\r\n\t}\r\n```\r\n\r\nHowever, upon cURLing with just an App-Token, it moves onto the method handler instead of rejecting the request with a 401.\r\n\r\n```\r\n\u279c  ~ curl -H \"App-Token: x\" \"http://127.0.0.1:58282\"\r\n\"operation todos.Get has not yet been implemented\"\r\n```\r\n\r\n## Environment\r\nswagger version: 2.0.0 \r\ngo version: 1.8.1\r\nOS:  OSX 10.12.5\r\n New to go-swagger but I've also run into this issue and had a quick look into the code.  Long story short, the problem ultimately is with the go-openapi router + middleware collapsing the path security []map into just an [] of unique requirements, go-swagger then implements this / has to. \r\n\r\nShort story long... The go-openapi which go-swagger depends on defines a struct model for a swagger spec, take a look at spec.Operation which has a spec.OperationProps which seems to define the properties on the route path.\r\n\r\nspec.OperationProps defines security prop as an \"[]map[string][]string\"\r\n\r\nThis matches with the swagger spec / documentation, i.e there are a list of acceptable maps of security definitions + scopes, the list is the OR part and the map is the AND part.\r\n\r\nWhere this seems to go wrong / get lost is in the go-swagger analyzer, take a look at analysis.SecurityRequirementsFor:\r\n\r\n    ////\r\n\tschemes = operation.Security\r\n    ////\r\n\tunique := make(map[string]SecurityRequirement)\r\n\tfor _, scheme := range schemes {\r\n\t\tfor k, v := range scheme {\r\n\t\t\tif _, ok := unique[k]; !ok {\r\n\t\t\t\tunique[k] = SecurityRequirement{Name: k, Scopes: v}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvar result []SecurityRequirement\r\n\tfor _, v := range unique {\r\n\t\tresult = append(result, v)\r\n\t}\r\n\treturn result\r\n    ////\r\n\r\nIt takes the []map and squashes it down into a flat array of \"unique\" security requirements, destroying the grouping.  Really here it should return a [][]SecurityRequirement.  However, worse still go-swagger depends on the go-openapi runtime / middleware / router and that to my eye seems broken / explains why it is doing it.\r\n\r\nIn go-openapi middleware package router.go, the middleware.AddRoute function, it takes the go-swagger analazyer implementation similar to above  [edit: its not the same function, but similar] and gets the security definitions as an array, and then goes on to match Authenticators for them which I suspect are created by the securityDefinitions:.\r\n\r\n    func (d *defaultRouteBuilder) AddRoute(method, path string, operation *spec.Operation) {\r\n    ////\r\n    ////\r\n\t\trequirements := d.analyzer.SecurityRequirementsFor(operation)\r\n    ////\r\n\t\trecord := denco.NewRecord(pathConverter.ReplaceAllString(path, \":$1\"), &routeEnt\r\n    ////\r\n\t\t\tAuthenticators: d.api.AuthenticatorsFor(definitions)\r\n    ////\r\n    }\r\n\r\nThat seems just wrong / it should be supporting the list of map here. Having a look at the middleware context.go, middleware.Authorize:\r\n\r\n\tfor scheme, authenticator := range route.Authenticators {\r\n\t\tapplies, usr, err := authenticator.Authenticate(&security.ScopedAuthRequest{\r\n\t\t\tRequest:        request,\r\n\t\t\tRequiredScopes: route.Scopes[scheme],\r\n\t\t})\r\n\t\tif !applies || err != nil || usr == nil {\r\n\t\t\tif err != nil {\r\n\t\t\t\tlastError = err\r\n\t\t\t}\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tif route.Authorizer != nil {\r\n\t\t\tif err := route.Authorizer.Authorize(request, usr); err != nil {\r\n\t\t\t\treturn nil, nil, errors.New(http.StatusForbidden, err.Error())\r\n\t\t\t}\r\n\t\t}\r\n\t\trCtx = stdContext.WithValue(rCtx, ctxSecurityPrincipal, usr)\r\n\t\trCtx = stdContext.WithValue(rCtx, ctxSecurityScopes, route.Scopes[scheme])\r\n\t\treturn usr, request.WithContext(rCtx), nil\r\n\t}\r\n\r\nYou can see it loops through the Authenticators and if one applies and is valid, the authorizer is then questioned with the principal and the route continues or errors.  So its doing the OR part on a flattened security definition.  \r\n\r\nThis isnt just broken, its actually dangerous as if any sub part of the auth passes, the route will pass / be hit.\r\n\r\nSo looks like a fix to go-openapi is needed to handle the []map and then a fix to go-swagger is needed to implement it.  First one seems a bit tricky as the router / routes are fairly involved, the second one is simple enough apart from you need to change the codegen which looks fairly involved / steep looks learning curve. https://swagger.io/docs/specification/2-0/authentication/  (see Using Multiple Authentication Types)\r\n\r\nYeah 2.0, you can see in current vendored go-openapi code for go-swagger the spec.OperationProps struct has a [] of map[], so its in the model, it just the router fails to implement it and that has a knock on effect on the API that go-swagger implements.\r\n\r\nThe change looks fairly reasonable except for the fact one principal to rule them doesnt really cut it.  A    typed map[string]interface[] to map security definition id -> principals for whichever security group passes map be a reasonable strategy, could simplify if there was only 1 requirement / return just the principal .  \r\n\r\nWhatever changes though this doesn't interact well with the -P option where you can define a specified principal, something clever with codgen may work.  ## Problem statement\r\n\r\nWhen trying to generate swagger.json for parameters having array values, its generating in the below-mentioned structure which is giving an error in http://editor.swagger.io/.\r\n\r\n## Steps to reproduce\r\n\r\n```\r\ntype Ele struct {\r\n        SomeId  int    `json:\"someId,required\"`\r\n\tSomeName string `json:\"someName,required\"`\r\n}\r\n\r\n// swagger:parameters Request\r\ntype Request struct {\r\n  Arr []Ele `json:\"arr,omitempty\"`\r\n}\r\n```\r\n\r\nGenerates a swagger.json of the format\r\n\r\n```\r\n\"parameters\": [\r\n...\r\n{\r\n            \"type\": \"array\",\r\n            \"items\": {\r\n              \"$ref\": \"#/definitions/Ele\"\r\n            },\r\n            \"name\": \"Arr\",\r\n            \"in\": \"query\"\r\n          }\r\n...\r\n]\r\n\r\n\"definitions\": {\r\n...\r\n   \"Ele\": {\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"SomeName\": {\r\n          \"type\": \"string\",\r\n        },\r\n        \"propId\": {\r\n          \"type\": \"integer\",\r\n          \"format\": \"int64\",\r\n        }\r\n      },\r\n    },\r\n...\r\n}\r\n\r\n```\r\n\r\nError from Editor says:\r\n`items $refs cannot match any of the following: \"*#/definitions*\"`\r\n\r\nWhen editing the generated structure to the following structure for array its getting accepted.\r\n```\r\nname: Arr\r\nin: body\r\nschema:\r\n\ttype: array\r\n\titems:\r\n\t$ref: '#/definitions/Prop'\r\n```\r\n\r\nIs there any thing I'm missing?\r\n\r\n\r\n## Environment\r\nswagger version: 2.0\r\ngo version: 1.8.3\r\nOS:  OSX\r\n @casualjim thanks for the reply. \r\nAdded `in: body`\r\n\r\n```\r\n// swagger:parameters Request\r\ntype Request struct {\r\n  //in:body\r\n  Arr []Ele `json:\"arr,omitempty\"`\r\n}\r\n```\r\n\r\nIt's generating correctly, but when I have two array parameters\r\n\r\n```\r\n// swagger:parameters Request\r\ntype Request struct {\r\n  //in:body\r\n  Arr []Ele1 `json:\"arr,omitempty\"`\r\n\r\n   //in:body\r\n  Arr []Ele2 `json:\"arr,omitempty\"`\r\n\r\n}\r\n```\r\nNow i'm getting an error:\r\n`Operations must have no more than one body parameter`\r\n\r\nCan you refer me to the documentation that would be of help?  Aliases in swagger.json present as native types.\r\nTherefore all validation comments work as expected for them.\r\n\r\n```go\r\ntype Int64 int64\r\n\r\ntype MyModel struct {\r\n    // min: 10\r\n    IntField Int64 `json:\"intField\"`\r\n}\r\n```\r\n\r\nAlso fixes #649\r\n\r\nI use go-swagger only for json generation, please let me know if it breaks anything in code generator or anywhere else. # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=h1) Report\n> Merging [#1087](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/2ea68fd74988bb7c1a2548f77361dd8ecd5dd880?src=pr&el=desc) will **increase** coverage by `0.09%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1087/graphs/tree.svg?height=150&width=650&token=aQS1DepR8C&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1087      +/-   ##\n==========================================\n+ Coverage   72.18%   72.28%   +0.09%     \n==========================================\n  Files          21       21              \n  Lines        6048     6068      +20     \n==========================================\n+ Hits         4366     4386      +20     \n  Misses       1217     1217              \n  Partials      465      465\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [scan/scanner.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=tree#diff-c2Nhbi9zY2FubmVyLmdv) | `73.34% <\u00f8> (\u00f8)` | :arrow_up: |\n| [scan/schema.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=tree#diff-c2Nhbi9zY2hlbWEuZ28=) | `71.92% <100%> (+0.49%)` | :arrow_up: |\n| [scan/parameters.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=tree#diff-c2Nhbi9wYXJhbWV0ZXJzLmdv) | `77.77% <100%> (+0.57%)` | :arrow_up: |\n| [scan/classifier.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=tree#diff-c2Nhbi9jbGFzc2lmaWVyLmdv) | `94.28% <100%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=footer). Last update [2ea68fd...b70c0b4](https://codecov.io/gh/go-swagger/go-swagger/pull/1087?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n oops. master merged Do I understand right that it should be like:\r\n```go\r\ntype Int64 int64\r\n\r\ntype MyModel struct {\r\n    // swagger:alias\r\n    // min: 10\r\n    IntField Int64 `json:\"intField\"`\r\n}\r\n```\r\nfor any struct and behavior by default for structs annotated with `swagger:params`? good. thanks for the clarification. I'll try to implement it later. Thank you sir!  ## Problem statement\r\nI'm trying to get to a point where I can define an endpoint that accepts any arbitrary Content-Type as input.\r\n\r\nAt this point I am stumped on the correct way to define that the `ByteStreamConsumer` should be the default `Consumer`.\r\n\r\nLooking through the generated code, I see the `ConsumersFor(...)` function, but I don't see any place that invokes it. \r\n\r\nI haven't been able to find any documentation or code that shows how one is expected to register a new `Consumer` for a given Content-Type, regardless of wildcard.\r\n\r\n## Swagger specification\r\n```\r\n---\r\n  swagger: \"2.0\"\r\n  info:\r\n    description: \"Show wildcard accept not working\"\r\n    version: \"1.0.0\"\r\n    title: \"Acceptable\"\r\n    contact:\r\n      email: \"nelz@orionlabs.io\"\r\n  basePath: \"/\"\r\n  schemes:\r\n    - \"http\"\r\n  consumes:\r\n    - \"application/json\"\r\n  produces:\r\n    - \"application/json\"\r\n  paths:\r\n    /{filename}:\r\n      put:\r\n        summary: \"Put Resource\"\r\n        consumes:\r\n          - \"application/octet-stream\"\r\n          - \"*/*\"\r\n        description: \"Enpoint to upload a resource\"\r\n        operationId: \"putter\"\r\n        parameters:\r\n        - name: filename\r\n          in: path\r\n          description: The unique filename of the resource being uploaded\r\n          required: true\r\n          type: string\r\n          minLength: 1\r\n        - name: content\r\n          in: body\r\n          description: The contents of the file being uploaded\r\n          required: true\r\n          schema:\r\n            type: string\r\n            format: binary\r\n        - name: contentType\r\n          in: header\r\n          description: What Content-Type should be reported when retrieving\r\n          required: true\r\n          default: application/octet-stream\r\n          type: string\r\n        responses:\r\n          201:\r\n            description: successfully uploaded resource\r\n```\r\n\r\n## Environment\r\nswagger version: `dev`\r\ngo version: `go version go1.8 darwin/amd64` \r\nOS: `macOS`\r\n  Depending on the spec file, code generated for the server might not compile due to a missing import.\r\nWhat I noticed is this happens particularly when the spec file does not contain securityDefinitions. \r\n\r\n## Swagger specification\r\nUse the default one from http://editor2.swagger.io\r\nSee attachment.\r\n\r\n## Steps to reproduce\r\n- Generate server:\r\nswagger generate server -f .\\swagger.json -A tst\r\n\r\n- Vendor packages with any package manager. e.g.:\r\nglide init\r\nglide install\r\n\r\n- Build:\r\ngo install .\\cmd\\tst-server\r\n\r\nrestapi\\operations\\tst_api.go:34: undefined: security in security.BasicAuth\r\nrestapi\\operations\\tst_api.go:35: undefined: security in security.APIKeyAuth\r\nrestapi\\operations\\tst_api.go:36: undefined: security in security.BearerAuth\r\nrestapi\\operations\\tst_api.go:69: undefined: security in security.UserPassAuthentication\r\nrestapi\\operations\\tst_api.go:72: undefined: security in security.TokenAuthentication\r\nrestapi\\operations\\tst_api.go:75: undefined: security in security.ScopedTokenAuthentication\r\n\r\nManually patching restapi\\operations\\tst_api.go by adding \"github.com/go-openapi/runtime/security\" to the imports fixes it. \r\n\r\n## Environment\r\nswagger version: dev - 2ea68fd74988bb7c1a2548f77361dd8ecd5dd880\r\ngo version: 1.8.3 \r\nOS:   Windows 10\r\n[swagger.json.txt](https://github.com/go-swagger/go-swagger/files/1112654/swagger.json.txt)\r\n\r\n\r\n From what I saw it depends if you have openapi runtime in GOPATH during the code generation.\r\nPut github.com/go-openapi/runtime in GOPATH, run codegen again and it should work. Arielt,\r\n\r\nThanks for your comment. You are right. That solves the issue, although I usually avoid installing packages globally. \r\nOther option: generating code again after having vendored dependencies (including go-openapi/runtime) works too. \r\n\r\nI did not expect such dependency for code-gen (only for build), maybe it could be documented somewhere, or the template could be updated.\r\nWhat is strange is that other go-openapi packages are properly imported, except this particular one.\r\n\r\n Sure,\r\n\r\nMine looks like this:\r\n```\r\nimport:\r\n- package: github.com/go-openapi/errors\r\n- package: github.com/go-openapi/loads\r\n- package: github.com/go-openapi/runtime\r\n  subpackages:\r\n  - flagext\r\n  - middleware\r\n- package: github.com/go-openapi/spec\r\n- package: github.com/go-openapi/strfmt\r\n- package: github.com/go-openapi/swag\r\n- package: github.com/go-openapi/validate\r\n- package: github.com/jessevdk/go-flags\r\n  version: ^1.2.0\r\n- package: github.com/tylerb/graceful\r\n  version: ^1.2.15\r\n```\r\n\r\nIt works fine as soon as vendoring has been done. \r\nProblem is:\r\n- you need to code-gen once --> compile error\r\n- vendor\r\n- code-gen again --> ok now it works\r\n  ## Problem statement\r\n\r\n I tried to send request to get server time, but i get zero time. I have similar code, that works with usual string, and this code works well, but with strfmt.datetime I have problem . As I can see, server send payload with right time, but client receive zero time. Can you help me to find problem? \r\nOr maybe you can give example, how to work with strfmt.datetime.\r\n\r\nMy code:\r\nServer:\r\nconfigure_api.go:\r\n```\r\napi.GetTimeHandler = operations.GetTimeHandlerFunc(func(params operations.GetTimeParams) middleware.Responder {\r\n\t\tt := models.Datetime(time.Now())\r\n\t\tfmt.Printf(\"Server time %v \\n\", time.Time(t).String())\r\n\t\treturn operations.NewGetTimeOK().WithPayload(t)\r\n\t})\r\n```\r\nClient:\r\n```\r\ntype Client struct {\r\n\thttp *apiclient.ConfgenSwagger\r\n}\r\nfunc (c *Client) GetTime() (models.Datetime, error) {\r\n\tp := operations.NewGetTimeParams()\r\n\tresp, err := c.http.Operations.GetTime(p)\r\n        if err != nil {\r\n\t\tfmt.Printf(\"Client time error  \\n\")\r\n\t\treturn resp.Payload, err\r\n\t}\r\n\tt := resp.Payload\r\n\tfmt.Printf(\"Client time %v \\n\", time.Time(t).String())\r\n\treturn t, err\r\n}\r\n```\r\n\r\nI get next results:\r\n```\r\nServer time 2017-06-29 17:07:26.956884177 +0300 MSK\r\nClient time 0001-01-01 00:00:00 +0000 UTC\r\n```\r\n## Swagger specification\r\n\r\n```\r\n...\r\ndatetime:\r\n    type: string\r\n    format: date-time\r\npaths:\r\n  /time:\r\n    get:\r\n      description: get server time\r\n      operationId: getTime\r\n      responses:\r\n        '200':\r\n          description: getTime success\r\n          schema:\r\n            $ref: \"#/definitions/datetime\"\r\n        default:\r\n          description : getTime error\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\n```\r\n\r\n\r\n\r\n## Environment\r\nswagger version: 0.9.0  \r\ngo version: 1.5.3\r\n It seems like that client and server never use functions MarshalJSON and UnmarshalJSON from go-openapi/strfmt/time.go. I think, I found the reason of bug.\r\nWhen we call ProducerFunc from /go-openapi/runtime/json.go ,then  data interface{} has type Model.Datetime ( type, that is generated by goswagger). But this type has not methods like MarshalJSON. So it can not make right JSON.\r\nBut Model.Datetime is just redefinition of type strfmt.DateTime, that has such methods. \r\nSo we have two possible ways of solution of problem:\r\n1)Add automatic generation of methods like MarshalJSON for generated types \r\n```\r\nfunc (t Datetime) MarshalJSON() ([]byte, error) {\r\n\treturn strfmt.DateTime(t).MarshalJSON()\r\n}\r\n```\r\n2) Convert type Model.Datetime to strfmt.DateTime before it falls into ProducerFunc  According to the swagger spec 2.0 (http://swagger.io/specification/#itemsObject), the discriminator \"When used, the value MUST be the name of this schema or any schema that inherits it.\"\r\n\r\nAlso add safety check in template: buf2 should be created only if the Discriminates value is not empty + regenerate bindata.go. It is not mandatory now that by default the base struct is added, but it makes it safer.\r\n\r\nA simple definition like the following would have generated not compiling code:\r\n```\r\ndefinitions:\r\n  SomeStruct:\r\n    type: object\r\n    discriminator: SomeDiscField\r\n    required:\r\n      - SomeDiscField\r\n    properties:\r\n      SomeDiscField:\r\n        type: string\r\n```\r\n\r\n Hi, \r\nI just noticed there is a mistake in my proposal: I forgot that the base type is implemented as an interface.\r\nThus unmarshalling cannot work as such on the base type. Below is the result of my current proposal:\r\n```go\r\ntype BaseType interface {\r\n\truntime.Validatable\r\n\r\n\t// the base type name\r\n\t// Required: true\r\n\tType() string\r\n\tSetType(string)\r\n}\r\n\r\nfunc unmarshalBaseType(data []byte, consumer runtime.Consumer) (BaseType, error) {\r\n\tbuf := bytes.NewBuffer(data)\r\n\tbuf2 := bytes.NewBuffer(data)\r\n\r\n\t// the first time this is read is to fetch the value of the type property.\r\n\tvar getType struct {\r\n\t\tType string `json:\"type\"`\r\n\t}\r\n\tif err := consumer.Consume(buf, &getType); err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\tif err := validate.RequiredString(\"type\", \"body\", getType.Type); err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\r\n\t// The value of type is used to determine which type to create and unmarshal the data into\r\n\tswitch getType.Type {\r\n\tcase \"BaseType\":\r\n\t\tvar result Geometry\r\n\t\tif err := consumer.Consume(buf2, &result); err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\t\treturn &result, nil\r\n\r\n\tcase \"SomeSubType\":\r\n\t\tvar result MultiPolygon\r\n\t\tif err := consumer.Consume(buf2, &result); err != nil {\r\n\t\t\treturn nil, err\r\n\t\t}\r\n\t\treturn &result, nil\r\n\r\n\t}\r\n\treturn nil, errors.New(422, \"invalid type value: %q\", getType.Type)\r\n}\r\n```\r\n\r\nThese two lines won't work:\r\n```go\r\nvar result Geometry\r\nif err := consumer.Consume(buf2, &result); err != nil {\r\n```\r\n\r\nI see two possibilities:\r\n\r\n1. Define a base interface, containing a Get and Set Discriminator. The unmarshalBaseType function would return an instance of this interface.\r\n2. Define a private struct and a public constructor used to unmarshall and create only. Thus, for the base type we would have to use the interface, to access the fields.\r\n\r\nThe problem is that we cannot really create both a public interface and a public struct because the current implementation (if I am correct) is already limiting when have struct with different cases.\r\nHaving for instance a struct named 'BaseStruct' and an interface named 'IBaseStruct' is not possible because the 'IBaseStruct' name could already be defined in the swagger file.\r\n\r\nThe first solution looks cleaner imo.\r\n\r\nWhat do you think ?\r\n Yes, I agree. I was just concerned about usage consistency between the different types. Base type an interface, others through an interface.\r\nI can update the diff in this direction if you are ok ?  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1081?src=pr&el=h1) Report\n> Merging [#1081](https://codecov.io/gh/go-swagger/go-swagger/pull/1081?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/2ea68fd74988bb7c1a2548f77361dd8ecd5dd880?src=pr&el=desc) will **increase** coverage by `0.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1081/graphs/tree.svg?token=aQS1DepR8C&height=150&width=650&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1081?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master   #1081      +/-   ##\n=========================================\n+ Coverage   72.18%   72.2%   +0.01%     \n=========================================\n  Files          21      21              \n  Lines        6048    6051       +3     \n=========================================\n+ Hits         4366    4369       +3     \n  Misses       1217    1217              \n  Partials      465     465\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1081?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1081?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <100%> (\u00f8)` | :arrow_up: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1081?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `72.51% <100%> (+0.08%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1081?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1081?src=pr&el=footer). Last update [2ea68fd...f3e021e](https://codecov.io/gh/go-swagger/go-swagger/pull/1081?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\n```yaml\r\nParent:\r\n  default: {\"child\": {}}\r\n  required: ???\r\n  properties:\r\n    child:\r\n      $ref: '#/definitions/Child'\r\nChild:\r\n  default: {\"key\": \"value\"}\r\n  required: [ \"key\" ]\r\n```\r\nThis fails with error:\r\n```\r\n- definitions.Parent.child.key in body is required\r\n```\r\n\r\nHow do we fill in the required block in the Parent? \"child.key\" does not work\r\n## Swagger specification\r\n\r\n## Steps to reproduce\r\n\r\n## Environment\r\nswagger version: x.x.x  \r\ngo version: x.x.x  \r\nOS:   \r\n I'm not sure if there's a better way, but I got it to work by setting the in the Parent\r\n\r\n```\r\nrequired: [ \"child\" ]\r\n```\r\n\r\nThis then in turn satisfies the requirement that \"child\" is a default that requires \"key\" Actually, that didn't work, it turns out I accidentally had the required commented out. Any thoughts? hmm it only seem like it works if i set it all the way in the default:\r\n```\r\nParent:\r\n  default: {\"child\": { \"key\": \"value\" }}\r\n  properties:\r\n    child:\r\n      $ref: '#/definitions/Child'\r\nChild:\r\n  default: {\"key\": \"value\"}\r\n  required: [ \"key\" ]\r\n```\r\nThis is the only way i could get it to work. Also, setting required in Parent didn't seem necessary with the above. However, setting the default in Child was necessary.\r\n\r\nHowever, I was actually just aiming to set the zero values and it seems \"x-nullable\" fits the bill there. And x-nullable doesn't have this baggage that \"required\" does.\r\n\r\nAre all the various flags documented somewhere? or is there a part of the code that is a good reference for this? But if I don't set \"x-nullable\" then won't the \"omitempty\" in the struct remove the field when marshalling the json if it's the zero value?\r\n\r\nFor example if the default for an int is 1, if it is input as 0, then won't the default will kick in and set it to 1 (the default)? Ok, I think I've got it sorted out now, thanks.  When generating models with `-m`, don't generate models for things that don't actually have the `// swagger:model` annotation, as this can lead to a lot of junk schemas Agreed... it took me a little bit to realize what was happening, I just assumed that was how it worked, but apparently not.  At the moment, I have internal types that are bleeding out into the documentation as a result. @fredbi i don't think so. i'm getting documentation for a timestamp from another package that's not mine. because i use -m. i can't really go and change that package with :ignore  go vet reports shadowing in generated server.go\r\nvariable name changed in server.gotmpl\r\n\r\nSigned-off-by: Ariel Tubaltsev <tubaltzev@gmail.com> # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1076?src=pr&el=h1) Report\n> Merging [#1076](https://codecov.io/gh/go-swagger/go-swagger/pull/1076?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/d507f49829bea7a9c1cc313e80de65bae4a9a6bc?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1076/graphs/tree.svg?token=aQS1DepR8C&width=650&src=pr&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1076?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master    #1076   +/-   ##\n=======================================\n  Coverage   72.18%   72.18%           \n=======================================\n  Files          21       21           \n  Lines        6048     6048           \n=======================================\n  Hits         4366     4366           \n  Misses       1217     1217           \n  Partials      465      465\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1076?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1076?src=pr&el=footer). Last update [d507f49...9b4f044](https://codecov.io/gh/go-swagger/go-swagger/pull/1076?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n looks like circleci resources problem. let me recreate the request  ## Problem statement\r\nI would like an endpoint to accept any `Content-Type`, but it seems the checking of it doesn't take the wildcard into account.\r\n\r\nPlease remove the sections that don't apply\r\n\r\n## Swagger specification\r\n```\r\n---\r\n  swagger: \"2.0\"\r\n  info:\r\n    description: \"Show wildcard accept not working\"\r\n    version: \"1.0.0\"\r\n    title: \"Acceptable\"\r\n    contact:\r\n      email: \"nelz@orionlabs.io\"\r\n  basePath: \"/\"\r\n  schemes:\r\n    - \"http\"\r\n  consumes:\r\n    - \"application/json\"\r\n  produces:\r\n    - \"application/json\"\r\n  paths:\r\n    /{filename}:\r\n      put:\r\n        summary: \"Put Resource\"\r\n        consumes:\r\n          - \"*/*\"\r\n        description: \"Enpoint to upload a resource\"\r\n        operationId: \"putter\"\r\n        parameters:\r\n        - name: filename\r\n          in: path\r\n          description: The unique filename of the resource being uploaded\r\n          required: true\r\n          type: string\r\n          minLength: 1\r\n        - name: content\r\n          in: body\r\n          description: The contents of the file being uploaded\r\n          required: true\r\n          schema:\r\n            type: string\r\n            format: binary\r\n        - name: contentType\r\n          in: header\r\n          description: What Content-Type should be reported when retrieving\r\n          required: true\r\n          default: application/octet-stream\r\n          type: string\r\n        responses:\r\n          201:\r\n            description: successfully uploaded resource\r\n```\r\n## Steps to reproduce\r\n```\r\n$ curl -X PUT -H \"Content-Type: incorrect/jif\" --data-binary @zombie.gif http://127.0.0.1:8000/zombie_02.gif\r\n{\"code\":415,\"message\":\"unsupported media type \\\"incorrect/jif\\\", only [*/*] are allowed\"}\r\n```\r\n\r\nAfter a little bit of spelunking, I believe the problem is here: https://github.com/go-openapi/runtime/blob/master/middleware/validation.go#L65 in `validateContentType(...)`.\r\n* It looks for 0-length allowed, and passes if there's none, but that's not this case.\r\n* It looks for an error parsing the media type, but that's not a problem: https://play.golang.org/p/HOUa8VmcGZ\r\n* It does a case-insensitive search in a slice, but that won't help us: `incorrect/jif` vs `*/*`\r\n* It then fails with no match\r\n\r\nOn Slack @casualjim said\r\n> we use a proper mimetype library to match\r\n\r\n... But I'm not seeing that in this case.\r\n\r\n## Environment\r\nswagger version: \r\n```\r\n$ swagger version\r\ndev\r\n```\r\n\r\ngo version: \r\n```\r\n$ go version\r\ngo version go1.8 darwin/amd64\r\n```\r\n\r\nOS: macOS\r\n   # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1069?src=pr&el=h1) Report\n> Merging [#1069](https://codecov.io/gh/go-swagger/go-swagger/pull/1069?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/220a68f31437616b53c032a5f82384450f82cf4e?src=pr&el=desc) will **increase** coverage by `0.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1069/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1069?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1069      +/-   ##\n==========================================\n+ Coverage   72.11%   72.12%   +0.01%     \n==========================================\n  Files          21       21              \n  Lines        6049     6049              \n==========================================\n+ Hits         4362     4363       +1     \n+ Misses       1222     1221       -1     \n  Partials      465      465\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1069?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/types.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1069?src=pr&el=tree#diff-Z2VuZXJhdG9yL3R5cGVzLmdv) | `83.68% <100%> (\u00f8)` | :arrow_up: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1069?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `41.33% <0%> (+1.33%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1069?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1069?src=pr&el=footer). Last update [220a68f...6322228](https://codecov.io/gh/go-swagger/go-swagger/pull/1069?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  What is the logic behind the code generated using this definition:\r\n\r\n```yaml\r\ndefinitions:\r\n  Info:\r\n    type: object\r\n    properties:\r\n      test_a:\r\n        type: integer\r\n        format: uint64\r\n        minimum: 0\r\n        exclusiveMinimum: true\r\n      test_b:\r\n        type: integer\r\n        format: uint64\r\n        minimum: 1\r\n```\r\n\u2193\r\n```go\r\n// swagger:model Info\r\ntype Info struct {\r\n\r\n  // test_a\r\n  // Minimum: > 0\r\n  TestA *uint64 `json:\"test_a,omitempty\"`\r\n\r\n  // test_b\r\n  // Minimum: 1\r\n  TestB uint64 `json:\"test_b,omitempty\"`\r\n}\r\n```\r\n`TestA` is a pointer on `uint64` but not `TestB`...\r\n\r\nswagger version: dev \u2192 220a68f31437616b53c032a5f82384450f82cf4e\r\ngo version: 1.7.1\r\nOS: linux/amd64\r\n Done #1069  ## Problem statement\r\nIn this case, struct for params will not be generated\r\n\r\n## Swagger specification\r\n```\r\nswagger: '2.0'\r\ninfo:\r\n  description: description\r\n  title: title\r\n  version: 1.0.0\r\nbasePath: \"/\"\r\npaths:\r\n  \"/path\":\r\n    post:\r\n      description: description\r\n      produces:\r\n        - application/json\r\n      tags:\r\n        - path\r\n      operationId: path.post\r\n      parameters:\r\n        - name: body\r\n          in: body\r\n          schema:\r\n            required:\r\n              - params\r\n            properties:\r\n              params:\r\n                type: object\r\n                required:\r\n                  - field\r\n                properties:\r\n                  field:\r\n                    description: field\r\n                    type: integer\r\n      responses:\r\n        '200':\r\n          description: description\r\n          schema:\r\n            type: object\r\n            required:\r\n            - result\r\n            properties:\r\n              result:\r\n                type: array\r\n                items:\r\n                  type: object\r\n                  properties:\r\n                    id:\r\n                      description: id\r\n                      type: integer\r\n  ```\r\n\r\n## Steps to reproduce\r\nswagger generate client -f swagger.yaml\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: go version go1.7.5 darwin/amd64  ## Problem statement\r\nClient generation fails with `object has no key \"UserBase\"`\r\n## Swagger specification\r\n2.0\r\n## Steps to reproduce\r\n1. Create two files\r\nfirst.yml\r\n```\r\nswagger: '2.0'\r\n\r\ninfo:\r\n  version: '2.0'\r\n  title: test\r\n  description: test\r\n  license:\r\n    name: N/A\r\n\r\nbasePath: /v2\r\n\r\nschemes:\r\n  - http\r\n  - https\r\n\r\nconsumes:\r\n  - application/json\r\nproduces:\r\n  - application/json\r\n\r\npaths:\r\n  /user:\r\n    get:\r\n      operationId: getUser\r\n      description: test\r\n      responses:\r\n        200:\r\n          description: succes\r\n          schema:\r\n            $ref: 'second.yml#/definitions/User'\r\n\r\n```\r\n/second.yml\r\n```\r\nswagger: '2.0'\r\n\r\ninfo:\r\n  version: '2.0'\r\n  title: test\r\n  description: test\r\n  license:\r\n    name: N/A\r\n\r\nbasePath: /v2\r\n\r\nschemes:\r\n  - http\r\n  - https\r\n\r\nconsumes:\r\n  - application/json\r\nproduces:\r\n  - application/json\r\n\r\ndefinitions:\r\n  UserBase:\r\n    type: object\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: uint64\r\n\r\n  User:\r\n    allOf:\r\n    - $ref: '#/definitions/UserBase'\r\n    - properties:\r\n        createdAt:\r\n          type: string\r\n          format: date-time\r\n        updatedAt:\r\n          type: string\r\n          format: date-time\r\n```\r\n2. run swagger generate client -f /Users/andrew/Workspace/go/src/github.com/go-swagger/example/first.yml -t /Users/andrew/Workspace/go/src/github.com/go-swagger/example/gen --skip-validation\r\n3. swagger returns `object has no key \"UserBase\"`\r\n## Environment\r\nswagger version: latest from the master `220a68f31437616b53c032a5f82384450f82cf4e`\r\ngo version: go version go1.8.3 darwin/amd64\r\nOS:   MacOS Sierra 10.12.5\r\n yes, i tried this as well and for this case i was able to generate client from flattened spec, but if you add a reference to the properties it fails again with similar error\r\n```\r\nswagger: '2.0'\r\n\r\ninfo:\r\n  version: '2.0'\r\n  title: test\r\n  description: test\r\n  license:\r\n    name: N/A\r\n\r\nbasePath: /v2\r\n\r\nschemes:\r\n  - http\r\n  - https\r\n\r\nconsumes:\r\n  - application/json\r\nproduces:\r\n  - application/json\r\n\r\ndefinitions:\r\n  UserBase:\r\n    type: object\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: uint64\r\n\r\n  ContactEmail:\r\n    type: object\r\n    properties:\r\n      email:\r\n        type: string\r\n\r\n  User:\r\n    allOf:\r\n    - $ref: '#/definitions/UserBase'\r\n    - properties:\r\n    - properties:\r\n        contactEmails:\r\n          type: array\r\n          items:\r\n            $ref: '#/definitions/ContactEmail'\r\n        createdAt:\r\n          type: string\r\n          format: date-time\r\n        updatedAt:\r\n          type: string\r\n          format: date-time\r\n```\r\nsmall change to the second file. Just added \r\n```\r\ncontactEmails:\r\n          type: array\r\n          items:\r\n            $ref: '#/definitions/ContactEmail'\r\n```\r\n\r\nand the error is\r\n`schema analysis [#/definitions/user/allOf/2/properties/contactEmails]: object has no key \"ContactEmail\"`\r\n\r\nDo you have any ideas? for the second case i'm unable to flatten \r\n`swagger flatten /Users/andrew/Workspace/go/src/github.com/go-swagger/example/first.yml -o /Users/andrew/Workspace/go/src/github.com/go-swagger/example/flatten-spec.json`\r\nit fails with the error `schema analysis [#/definitions/user/allOf/1/properties/contactEmails]: object has no key \"ContactEmail\"`\r\n\r\nI tried to expand and it worked.\r\n\r\n however if i modify specs a bit more `expand` stops working\r\n**first.yml**\r\n```\r\nswagger: '2.0'\r\n\r\ninfo:\r\n  version: '2.0'\r\n  title: test\r\n  description: test\r\n  license:\r\n    name: N/A\r\n\r\nbasePath: /v2\r\n\r\nschemes:\r\n  - http\r\n  - https\r\n\r\nconsumes:\r\n  - application/json\r\nproduces:\r\n  - application/json\r\n\r\npaths:\r\n  /user:\r\n    get:\r\n      operationId: getUser\r\n      description: test\r\n      responses:\r\n        200:\r\n          $ref: 'second.yml#/responses/userResponse'\r\n```\r\n**second.yml**\r\n```\r\nswagger: '2.0'\r\n\r\ninfo:\r\n  version: '2.0'\r\n  title: test\r\n  description: test\r\n  license:\r\n    name: N/A\r\n\r\nbasePath: /v2\r\n\r\nschemes:\r\n  - http\r\n  - https\r\n\r\nconsumes:\r\n  - application/json\r\nproduces:\r\n  - application/json\r\n\r\nresponses:\r\n  userResponse:\r\n    description: succes\r\n    schema:\r\n      $ref:  '#/definitions/User'\r\n\r\ndefinitions:\r\n  UserBase:\r\n    type: object\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: uint64\r\n\r\n  ContactEmail:\r\n    type: object\r\n    properties:\r\n      email:\r\n        type: string\r\n\r\n  User:\r\n    allOf:\r\n    - $ref: '#/definitions/UserBase'\r\n    - properties:\r\n        contactEmails:\r\n          type: array\r\n          items:\r\n            $ref: '#/definitions/ContactEmail'\r\n        createdAt:\r\n          type: string\r\n          format: date-time\r\n        updatedAt:\r\n          type: string\r\n          format: date-time\r\n```\r\nswagger expand fails with `object has no key \"User\"` error\r\n\r\ncan you give me an idea where should i look at so I can maybe try to help fix that? looks similar to issue # 890. \r\nThe fix for 890 is on the way. I will test and see if it resolves this one too. I'm also affected by this; my case is the same @andrewkavalionak exposed: one YAML file with no definitions importing all the definitions from a second YAML file.\r\n\r\nI'm implementing a dynamic API server and it loads the spec just fine (it opens and loads the definitions from the second file).\r\n\r\nIs the client using a different mechanisms to load the spec?\r\n\r\nAlso: is flatten a super-set of expand?\r\n\r\nI run expand + flatten and generated the client code, but I'm not sure the generated models are correct (28 models when I believe I only defined 3). @reidrac : can you share your swagger spec (The two files you mentioned)? or a snippet which helps me to reproduce the case?\r\n\r\nFlatten basically makes all your references local.\r\nExpand replaces the references with the intended content. IIRC, the expander works on local references. like `#/definitions`\r\n\r\n@casualjim :do you have more info on expansion vs flattening?\r\n\r\nAlso when you generate you client the flattening happens by default\r\n\r\n```\r\n\t// Flatten if needed\r\n\tif opts.FlattenSpec {\r\n\t\tflattenOpts := analysis.FlattenOpts{\r\n\t\t\tBasePath: specDoc.SpecFilePath(),\r\n\t\t\tSpec:     analysis.New(specDoc.Spec()),\r\n\t\t}\r\n\t\terr = analysis.Flatten(flattenOpts)\r\n\t}\r\n```\r\nyou can skip it in generation using `--skip-flatten`\r\n\r\nI think multiple models are generated when you use mix of Allof, Multipleof and simiolar schema properties. @EleanorRigby these are my current spec. Is a test app to evaluate go-swagger.\r\n\r\nThis is swagger.yaml:\r\n```\r\nswagger: '2.0'\r\ninfo:\r\n  version: 0.1.0\r\n  title: Poll API\r\nschemes:\r\n  - http\r\nconsumes:\r\n  - \"application/json\"\r\nproduces:\r\n  - \"application/json\"\r\npaths:\r\n  /:\r\n    get:\r\n      tags: [\"polls\"]\r\n      operationId: getAllPolls\r\n      parameters:\r\n        - name: limit\r\n          in: query\r\n          description: Limit the response to the last n polls.\r\n          type: integer\r\n          format: int32\r\n          required: false\r\n      responses:\r\n        '200':\r\n          description: OK\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: \"models.yaml#/definitions/poll\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/error\"\r\n    post:\r\n      tags: [\"polls\"]\r\n      operationId: addPoll\r\n      parameters:\r\n        - name: poll\r\n          in: body\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/poll\"\r\n      responses:\r\n        '201':\r\n          description: Created\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/poll\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/error\"\r\n  /{id}:\r\n    parameters:\r\n      - type: integer\r\n        format: int32\r\n        name: id\r\n        in: path\r\n        required: true\r\n    get:\r\n      tags: [\"polls\"]\r\n      operationId: getPoll\r\n      responses:\r\n        '200':\r\n          description: OK\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/poll\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/error\"\r\n    put:\r\n      tags: [\"polls\"]\r\n      operationId: updatePoll\r\n      parameters:\r\n        - name: poll\r\n          in: body\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/poll\"\r\n      responses:\r\n        '200':\r\n          description: OK\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/poll\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/error\"\r\n    delete:\r\n      tags: [\"polls\"]\r\n      operationId: deletePoll\r\n      responses:\r\n        '204':\r\n          description: Deleted\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/error\"\r\n  /{id}/{choice_id}:\r\n    parameters:\r\n      - type: integer\r\n        format: int32\r\n        name: id\r\n        in: path\r\n        required: true\r\n      - type: integer\r\n        format: int32\r\n        name: choice_id\r\n        in: path\r\n        required: true\r\n    put:\r\n      tags: [\"polls\"]\r\n      operationId: voteChoice\r\n      responses:\r\n        '200':\r\n          description: OK\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/poll\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"models.yaml#/definitions/error\"\r\n```\r\n\r\nThis is models.yaml:\r\n```\r\nswagger: '2.0'\r\ndefinitions:\r\n  poll:\r\n    type: object\r\n    required:\r\n      - question\r\n      - choices\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int32\r\n        readOnly: true\r\n      question:\r\n        type: string\r\n        minLength: 1\r\n        maxLength: 200\r\n      pubDate:\r\n        type: string\r\n        format: date-time\r\n        readOnly: true\r\n      choices:\r\n        type: array\r\n        items:\r\n          $ref: '#/definitions/choice'\r\n  choice:\r\n    type: object\r\n    required:\r\n      - choiceText\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int32\r\n        readOnly: true\r\n      choiceText:\r\n        type: string\r\n        minLength: 1\r\n        maxLength: 200\r\n      votes:\r\n        type: integer\r\n        format: int32\r\n        readOnly: true\r\n  error:\r\n    type: object\r\n    required:\r\n      - message\r\n    properties:\r\n      code:\r\n        type: integer\r\n        format: int64\r\n      message:\r\n        type: string\r\n```\r\n\r\nI run:\r\n```\r\n$ swagger generate client -f swagger.yaml -t ./restclient\r\n2017/10/04 09:20:17 building a plan for generation\r\n2017/10/04 09:20:17 planning definitions\r\n2017/10/04 09:20:17 planning operations\r\nobject has no key \"choice\"\r\n```\r\n\r\nWhat gets me confused is that I'm using these same files in the server (dynamic API, not using code genration), and it reads the definitions just fine.\r\n\r\nAnd that's all I know at this point.\r\n\r\nThanks for your help. Looks like is the same problem you have when run flatten:\r\n```\r\n$ swagger flatten swagger.yaml\r\n2017/10/04 14:44:17 schema analysis [#/definitions/poll/properties/choices]: object has no key \"choice\"\r\n```\r\n\r\n(I've been reading the client generation and it does expand/flatten; doesn't it?) @reidrac : I will look into it. Will try to fix or share findings by eow.\r\nThanks for sharing. Looking at the schema I posted, if I inline the Choice schema instead of using a reference in the choices array of Poll; flatten works OK (the resulting JSON looks fine, although \"x-go-gen-location\": \"models\" doesn't seem to be consistent.\r\n\r\nWhen I try to generate the client with these YAML files, Swagger doesn't report any error, but the models aren't generated either.\r\n\r\nWhen I use --dump-data flag, I can see \"Models\" is null, although \"IncludeModel\" is true. Perhaps that should trigger an error.\r\n\r\nEDIT: actually, I used the result of flatten with generate and the client seems fine (the models look OK). I can't reproduce that success when I use the client generation straight with the YAML file that has the inlined Choice schema. Generate client doesn't resolve external references as it is; my previous comment re: expand was red herring (expand is called when the Spec is validated prior to generation).\r\n\r\nSo there's no way it'll work without running flatten first (and then there's an error that I avoided by inlining Choice definition), and that requires using an intermediate JSON file. Summing up: you can't generate a client with a YAML file that has external refs in the definitions.\r\n\r\n@EleanorRigby Can you confirm I'm in the right path? Thanks! @reidrac : looking into it now. @reidrac : Initial analysis points to same conclusion that flatten needs to be run first which makes all schema refs local. Also, the choice has to be inline (as the way current code works) Does that unblock you to work?\r\nThe thing that confuses me is that flatten is run while generating server and client within the code unless one specifies --skip-flatten flag. The flattening should have happened. I am continuing my analysis further. @reidrac : After some more digging, I now see what is happening inside the code. The current binary does not resolve any local reference inside the external reference (external ref --> Poll has a local ref --> Choice under Choices array)\r\n\r\nThe solution to this problem seems non-trivial and might take some thinking and time to fix. The best work around I can suggest currently is to inline the Choice (which you did) and flatten the spec.\r\n\r\nThe expansion of spec before generation also works perfect. The number of models generated are huge because references are used in multiple operations(That is how swagger tool behaves currently). Ideally , the `AddPollParamsBodyChoicesItems` and `UpdatePollParamsBodyChoicesItems` are the same structures but as far as I know the swagger binary does this so as to accomodate changes caused by complex definitions involving allof , anyof etc..\r\n\r\nIt would be helpful if you can think/share  a solution or design to handle these recursive references distributed within and in external files. Adding on to the discussion for future work (proposed idea)\r\n\r\n- In flatten function we need a DAG of all possible references\r\n      a. Starting the DAG creation from root doc specified.\r\n      b. All the local refs must carry a file string to indicate the local file name where these local refs have expanded definitions\r\n- The references will be resolved in a topological sort manner\r\n-  All the references which get free of other ref dependencies will have a map of refname --> absolute resolved definition values.\r\n- The final values will be substituted in root document.\r\n\r\n @EleanorRigby thanks for you help!\r\n\r\n* `--skip-flatten` flag is not available in swagger 0.12.0 (?), which version should I be using? \r\n* this is a PoC for a larger project and we were hopping to work with the YAML file, using shared definitions in different API endpoints (that's why we are exploring refs to external files); currently our working solution uses the mixin approach, that means we work with YAML but in practice we consume the \"mixed\" JSON file. The YAML files are OK to share with 3rd party to generate clients in other languages.\r\n* we're using the dynamic API approach at the server; so no code generation there. I'm confused because the YAML file I posted here seems to work on the server just fine (?). I may be missing something here or the definitions are processed differently.\r\n\r\nUnfortunately I can't suggest a solution. The time I've spent reading go-swagger code I found it a bit complicated; I miss more consistent logging, currently is quite hard to follow what's going on if you're not familiar with the codebase.\r\n\r\nAt a very high level, flatten + expand sounds like a reasonable strategy, but flatten should detect when a definition includes a reference to another definition; perhaps running expand on any spec referenced by the main Spec could do it (so Choice would be inlined automatically, right?).  ## Problem statement\r\n\r\nDocumenting, not generating, an existing code base.  There are routes the use the same operation.\r\n\r\nAny options where I don't have to duplicate the entire swagger:operation simply because I have two different routes using the method?\r\n\r\nIt seems redundant to have the route in the swagger:operation definition.  Am I missing something?\r\n\r\n## Swagger specification\r\n\r\n* swagger:route\r\n* swagger:operation\r\n\r\n## Steps to reproduce\r\n``` transport.go\r\n// swagger:route GET /mythings/{thingId} GetMyThing\r\n// swagger:route GET /myboxes/{boxId}/mythings/{thingId} GetMyThing\r\n```\r\n\r\n``` handler.go\r\n// swagger:operation GET /mythings/{thingId} GetMyThing\r\n// operation definition\r\n\r\n// swagger:operation GET /myboxes/{boxId}/mythings/{thingId} GetMyThing\r\n// duplicate of the operation definition above\r\n\r\nfunc GetMyThing(c *gin.Contet) {\r\n  //implemtation\r\n}\r\n\r\n```\r\n## Environment\r\nswagger version: dev\r\ngo version: go1.7.5 darwin/amd64\r\nOS:   OS/X 10.12.5 (16F73)\r\n Well if I document two routes\r\n\r\n// swagger:route GET /foo GetFooBar\r\n// swagger:route GET /bar GetFooBar\r\n// swagger:operation GetFooBar\r\n\r\nThen the generated swagger.json would do the work of duplicating operation GetFooBar for both route /foo and route /bar.  \r\n\r\nRight now I would have to duplicate the full definition of operation GetFooBar twice because I need to specify the full spec for both /foo and /bar.   So in the above example I have routes /foo and /bar that use operation GetFooBar.   When I create swagger.json I would write out the spec for /foo using GetFooBar and /bar using GetFooBar.\r\n\r\nThe current method seems to need both swagger:route and swagger:operation to require both the actual route and operation name.   If that is the case, couldn't you just eliminate swagger:route and just document using swagger:operation comments?\r\n\r\nRoute doesn't add any thing that isn't already defined in swagger:operation\r\n* swagger:route [method] [path pattern] [?tag1 tag2 tag3] [operation id]\r\n* swagger:operation [method] [path pattern] [?tag1 tag2 tag3] [operation id]\r\n\r\n\r\n Well tested out \r\n\r\n// swagger:route /foo GetFooBar\r\n// swagger:route /bar GetFooBar\r\n// swagger:operation /foo GetFooBar\r\n// .... details\r\n// swagger:operation /bar GetFooBar\r\n// .... Duplicate details /foo operation\r\n\r\nValidation reports duplicate operation GetFooBar.   Seems the only option is create another method this facades GetFooBar to document go-swagger.  ## Problem statement\r\n\r\nI use go-swagger to generate my documentation and need a way to define a model as readOnly. I have two Models: `User` and `Company`, where `User` has a foreign key to `Company`. What I want to achieve is having the result nested with `GET`, but not with `POST`, e.g.\r\n\r\n`POST /users`:\r\n```JSON\r\n{\r\n  \"companyID\": 0,\r\n  \"firstname\": \"string\",\r\n  \"lastname\": \"string\",\r\n  \"mail\": \"string\",\r\n  \"password\": \"string\",\r\n  \"role\": 0\r\n}\r\n```\r\n\r\n`GET /users/1`:\r\n```JSON\r\n{\r\n  \"company\": {\r\n    \"interval\": 0,\r\n    \"name\": \"string\"\r\n  },\r\n  \"companyID\": 0,\r\n  \"firstname\": \"string\",\r\n  \"lastname\": \"string\",\r\n  \"mail\": \"string\",\r\n  \"password\": \"string\",\r\n  \"role\": 0\r\n}\r\n```\r\nHowever that this works I need a way to define the model of `Company` as `readOnly`\r\n Thank you for your response, however I'm not sure that this solves my problem. My struct has the following structure:\r\n\r\n```go\r\n// User represents a user of the system\r\n//\r\n// swagger:model user\r\ntype User struct {\r\n  // the id for this user\r\n  //\r\n  // readOnly: true\r\n  // required: true\r\n  // min: 1\r\n  ID int `json:\"id\"`\r\n\r\n  // the time when this user was created\r\n  //\r\n  // readOnly: true\r\n  // swagger:strfmt date-time\r\n  CreatedAt *time.Time `json:\"createdAt\"`\r\n\r\n  // the time when this user was last updated\r\n  //\r\n  // readOnly: true\r\n  // swagger:strfmt date-time\r\n  UpdatedAt *time.Time `json:\"updatedAt\"`\r\n\r\n  // the firstname of this user\r\n  //\r\n  // required: true\r\n  Firstname string `json:\"firstname\"`\r\n\r\n  // the lastname of this user\r\n  //\r\n  // required: true\r\n  Lastname string `json:\"lastname\"`\r\n\r\n  // the role of this user\r\n  //\r\n  // required: true\r\n  Role int `json:\"role\"`\r\n\r\n  // the unique mail address of this user\r\n  //\r\n  // unique: true\r\n  // required: true\r\n  Mail string `json:\"mail\"`\r\n\r\n  // the plain text password of the user. Only sent during authentication (this is not stored in the db)\r\n  //\r\n  // required: true\r\n  Password string `json:\"password,omitempty\"`\r\n\r\n  // the foreignkey to the associated company\r\n  //\r\n  // required: true\r\n  CompanyID int `json:\"companyID\"`\r\n\r\n  // the associated company\r\n  //\r\n  // readOnly: true\r\n  Company *Company `json:\"company,omitempty\"`\r\n}\r\n```\r\n\r\nI don't have a different struct which handles the payload of GET or POST. Note that there is a pointer to Company and therefore it will always show.\r\n**UPDATE**: I played around with it and what I would need is to define on the `Company` model \"readOnly\" and it would give the result I want to achieve. Are there any options that I can do that?  I'm wondering if there is a way to change the response body format when the request doesn't pass the validation rules specified in the swagger spec for a specific API call.\r\n\r\nFor example, if I have a API route like `POST /users` which requires a body with the field `id` and I request without it, I get `{\"code\":602,\"message\":\"Id in body is required\"}`.\r\n\r\nIs it possible to change such format by a middleware or anywhere else?\r\nFor example to return `{\"error\": {\"code\": 602,  \"message\": \"Id in body is required\"}}` Great thanks!  ## Problem statement\r\n\r\nIs it possible to return error to main function of server?\r\n\r\nFor example, my server saves some configs in file. And I want that if config file is missing, then server must be stopped with some error code. It is possible to do it with panic(err), but I think it is not good way. So can I return error main function of server ?\r\n\r\n\r\n## Environment\r\nswagger version: 0.9.0 \r\n\r\n But would not be main.go rewritten if I generate server again? There is a command line argument to prevent that, `--exclude-main`.\r\n  ## Problem statement\r\n\r\nWhen the $GOPATH contains a symlink, the import paths are generated to locations using the realpath, rather than to the gopath location.\r\n\r\n## Steps to reproduce\r\n\r\n\r\nFor example\r\n\r\n```\r\nexport GOPATH=$HOME/Documents/Code/golang\r\n```\r\n\r\n```\r\n readlink \"$HOME/Documents/Code\"\r\n/Users/billie/Dropbox/Documents/Code/\r\n```\r\n\r\nThen do your code generation\r\n\r\n`swagger generate server swagger.json`\r\n\r\nAnd your imports are generated relative to the realpath, rather than the gopath.\r\n\r\n```go\r\nimport (\r\n\t\"net/http\"\r\n\r\n\t\"github.com/go-openapi/runtime\"\r\n\r\n\t\"../../../../Dropbox/Documents/Code/golang/src/github.com/purplebooth/realsov/api/models\"\r\n)\r\n```\r\n\r\nWhen you compile \r\n\r\n```\r\ngo install ./cmd/real-sov-server\r\nrestapi/operations/authentication/get_oauth_token_responses.go:11:2: local import \"../../../../Dropbox/Documents/Code/golang/src/github.com/purplebooth/realsov/api/models\" in non-local package\r\n```\r\n\r\n## Environment\r\n\r\n```\r\nswagger version\r\nversion: 0.10.0\r\ncommit: 4d1e79b5a98c6f67bbf06923643d5317ed37a058\r\n```\r\n\r\n```\r\ngo version\r\ngo version go1.8.1 darwin/amd64\r\n```\r\n\r\nMacOS Sierra\r\n\r\n\r\n## Workaround\r\n\r\nRemove the symlink from your GOPATH. The imports are correctly generated. I have no symlink in my GOPATH, go swagger 0.10.0 also generates relative paths.\r\n```go\r\npackage opr\r\n\r\n// This file was generated by the swagger tool.\r\n// Editing this file might prove futile when you re-run the swagger generate command\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"net/http\"\r\n\t\"strings\"\r\n\r\n\terrors \"github.com/go-openapi/errors\"\r\n\tloads \"github.com/go-openapi/loads\"\r\n\truntime \"github.com/go-openapi/runtime\"\r\n\tmiddleware \"github.com/go-openapi/runtime/middleware\"\r\n\tsecurity \"github.com/go-openapi/runtime/security\"\r\n\tspec \"github.com/go-openapi/spec\"\r\n\tstrfmt \"github.com/go-openapi/strfmt\"\r\n\t\"github.com/go-openapi/swag\"\r\n\r\n\t\"../../../Works/AYJiaYou/MPos-WebAPI/src/mpos/mod\"\r\n\t\"../../../Works/AYJiaYou/MPos-WebAPI/src/mpos/rest/opr/term\"\r\n)\r\n```\r\nThe version 0.8.0 is OK, 0.9.0 & 0.10.0 don't work. Just to clarify, my issue was definitely the symlink thing. Removed the symlink, worked fine, put it back, it broke, removed it it was totally fine. @casualjim \r\nI'm using `openSUSE Leap 42.2`, my GOPATH env is:\r\n```bash\r\nee@ay-lfree:~/Works/AYJiaYou/MPos-WebAPI> echo $GOPATH\r\n/home/lfree/opt/Go:/home/lfree/Works/AYJiaYou/AY-Go:/home/lfree/Works/AYJiaYou/BackHarmony:/home/lfree/Works/AYJiaYou/AY-Ad/Server:/home/lfree/Works/AYJiaYou/HealthyID/Server:/home/lfree/Works/AYJiaYou/AY-DDUP:/home/lfree/Works/AYJiaYou/MPos-WebAPI:/home/lfree/Works/github.com\r\n```\r\nI stored gen_server.sh file in `Works/AYJiaYou/MPos-WebAPI/API/` folder and run it within that folder:\r\n```bash\r\n#!/bin/bash\r\n\r\n#./swagger_linux_amd64_0.8.0 generate server \\\r\n#./swagger_linux_amd64_0.9.0 generate server \\\r\n./swagger_linux_amd64_0.10.0 generate server \\\r\n    --spec=swagger.yml \\\r\n    --api-package=opr \\\r\n    --model-package=mod \\\r\n    --server-package=rest \\\r\n    --target=../src/mpos \\\r\n    --name=mpos \\\r\n    --principal=mod.RequestInfo \\\r\n    --default-scheme=https\r\n\r\nfor file in `find ../src/mpos/ -type f -name *.go`\r\ndo\r\n    sed -i 's/\\.\\.\\/\\.\\.\\/\\.\\.\\/Works\\/AYJiaYou\\/MPos-WebAPI\\/src\\///' $file\r\ndone\r\n``` This seems to occur when your target isn't within the first in your `GOPATH`  ## Problem statement\r\n\r\nI've noticed that because of the order of [the `WriteHeader` call in the response template](https://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/responses.gotmpl#L149) if there is an error in the `producer.Produce`, although unlikely, the panic recover middleware doesn't have the possibility to respond with a status code (e.g. 500) because the header has been already written.\r\n\r\nTo state this is easier to see a generated code, for example the _[get by id response of the examples which are in this repo](https://github.com/go-swagger/go-swagger/blob/master/examples/generated/restapi/operations/pet/get_pet_by_id_responses.go#L48)_\r\n\r\nDo I miss anything or you think, like me, that's better to move the call to `WriteHeader` to the end of the function?\r\n\r\n## Environment\r\nswagger version: 0.10.0\r\ngo version: 1.8\r\nOS:  Linux \r\n > When you write to a response writer for the body go will flush the headers and the body. So if we want to return a status code then we have to do that before we start writing to the response writer, which happens in the producer.Produce call\r\n\r\nI missed that point, my simple test to confirm my initial thoughts have been to call to `panic` just after the [`rw.WriteHeader(200)`](https://github.com/go-swagger/go-swagger/blob/master/examples/generated/restapi/operations/pet/get_pet_by_id_responses.go#L48) and have basic panic recover middleware which sends status 500.\r\n\r\nThen I confirmed my thoughts of the response status code that the client gets is 200 rather than 500 and a message in the console saying something like that the header has been written more than once.\r\n\r\nWhen I basically changed the `panic` call before of the `w.WriteHeader(200)`, the client got a response with status 500. \r\n\r\nHowever, I think that you're right, because it may panic after starting to write the response body but before finishing.\r\n\r\n> I think this could be fixed in the panic middleware by having a buffered response that gets flushed at the end or when its buffer overflows perhaps?\r\n\r\nI don't understand what you exactly suggested it. Could you elaborate how a panic middleware could avoid such thing without making any change in the default template used by the generator?\r\n\r\nMany thanks!  Hi,\r\n\r\nIs there a 'getting-started' page/file?\r\n\r\nI'm pretty new to Golang, but used Swagger earlier on my Java/SpringBoot. I'd like to add Swagger documentation to my RESTful APIs written in Golang but I'm a bit lost here.\r\n\r\nHow do I get started? Yes, and it's pretty fine. The one provided [here ](https://github.com/yvasiyarov/swagger)seems 'simpler'. Anyway didn't have to time to implement swagger yet, feel free to close this issue. Cheers!  ## Problem statement\r\n\r\nWhat's the proper way to go about handling file downloads in the swagger yaml spec and in the handler code? Attempting to get proper `content-type`s and `filenames` in the process\r\n\r\nThis works but returns the file but without any headers, despite explicitly setting 'em\r\n\r\n```yaml\r\npaths:\r\n  /geturl/\r\n    get:\r\n      produces:\r\n        - application/octet-stream\r\n      responses:\r\n        '200':\r\n          description: OK\r\n          schema:\r\n            type: file\r\n```\r\n\r\n\r\n```go\r\nf, _ := os.Open(\"somefile.zip\")\r\nh := make(textproto.MIMEHeader)\r\nh.Set(\"Content-Type\", \"application-zip\")\r\nheader := multipart.FileHeader{Filename: \"returnfilename.zip\", Header: h}\r\nreturn operations.NewGetDataOK().WithPayload(runtime.File{Data: f, Header: &header})\r\n```\r\n\r\nTried setting `produces` to the resulting file type (`application/zip`), but that did not work at all (no files got passed through)?\r\n\r\n## Environment\r\nswagger version: 0.10.0\r\ngo version: 1.8.1\r\nOS: Mac OS X thanks a lot!  ## Problem statement\r\n\r\ndot separated (like `/{fileName}.{fileExt}`) parameters in the path are parsed incorrectly.\r\n\r\nsame spec is working perfectly for [swagger-codegen](http://swagger.io/swagger-codegen/)\r\n\r\n## Swagger specification\r\n\r\n```\r\nswagger: '2.0'\r\ninfo:\r\n  description: >-\r\n    Minimal swagger file to demonstrate a dot-in-th-path problem\r\n  version: 0.0.1\r\n  title: test\r\ntags:\r\n  - name: test\r\n    description: test the go-swagger generator bug\r\npaths:\r\n  /{fileName}.{fileExt}:\r\n    get:\r\n      tags:\r\n        - test\r\n      operationId: test\r\n      parameters:\r\n        - name: fileName\r\n          in: path\r\n          required: true\r\n          type: string\r\n        - name: fileExt\r\n          in: path\r\n          required: true\r\n          type: string\r\n      responses:\r\n        '204':\r\n          description: successful operation\r\n        '500':\r\n          description: Operation error\r\n\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n$swagger generate client\r\nThe swagger spec at \"swagger.yml\" is invalid against swagger specification 2.0. see errors :\r\n- path param \"{fileName}.{fileExt}\" has no parameter definition\r\n- path param \"fileName\" is not present in path \"/{fileName}.{fileExt}\"\r\n- path param \"fileExt\" is not present in path \"/{fileName}.{fileExt}\"\r\n```\r\n\r\n## Environment\r\nswagger version: dev  (installed with `go get -u github.com/go-swagger/go-swagger/cmd/swagger`)\r\ngo version: go1.8.1 darwin/amd64\r\nOS:   OS X El Capitan (10.11.6)\r\n I would not say it is good idea to give up on validation for the real world scenarios  yes right thank you\r\n\r\nfortunately this time I need just a client code which I've generated with swagger-codegen successfully.\r\n\r\nby the way, this is a spec this bug appeared with: https://github.com/komikoni/redmine-swagger\r\n  Currect swagger code is support easyjson serialization, but don't mark generated types as `easyjson:json`.\r\n\r\nThis issue can partically workarounded by `easyjson -all`, but unfortunatelly this command ignore array types like:\r\n```\r\n// swagger:model Posts\r\ntype Posts []*Post\r\n```\r\n\r\nAs result you can't use easyjson serialization with swagger model like:\r\n```\r\nswagger: '2.0'\r\npaths:\r\n  /posts/{thread_id}/profile:\r\n    get:\r\n      parameters:\r\n      - name: thread_id\r\n        in: path\r\n        required: true\r\n        type: number\r\n      responses:\r\n        200:\r\n          schema:\r\n            $ref: '#/definitions/Posts'\r\ndefinitions:\r\n  Post:\r\n    type: object\r\n    ...\r\n  Posts:\r\n    type: array\r\n    items:\r\n      $ref: '#/definitions/Post'\r\n``` # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=h1) Report\n> Merging [#1048](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/30888c7142b20c19d73d1353b4f861809a71e807?src=pr&el=desc) will **increase** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1048/graphs/tree.svg?src=pr&token=aQS1DepR8C&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1048      +/-   ##\n==========================================\n+ Coverage   72.52%   72.54%   +0.01%     \n==========================================\n  Files          21       21              \n  Lines        6147     6115      -32     \n==========================================\n- Hits         4458     4436      -22     \n+ Misses       1217     1211       -6     \n+ Partials      472      468       -4\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `64.75% <0%> (-1.76%)` | :arrow_down: |\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `61.53% <0%> (-0.83%)` | :arrow_down: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `68.35% <0%> (-0.53%)` | :arrow_down: |\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `73.69% <0%> (\u00f8)` | :arrow_up: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `41.33% <0%> (\u00f8)` | :arrow_up: |\n| [scan/schema.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree#diff-c2Nhbi9zY2hlbWEuZ28=) | `71.73% <0%> (+0.31%)` | :arrow_up: |\n| [generator/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree#diff-Z2VuZXJhdG9yL29wZXJhdGlvbi5nbw==) | `69.52% <0%> (+0.45%)` | :arrow_up: |\n| [generator/template\\_repo.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree#diff-Z2VuZXJhdG9yL3RlbXBsYXRlX3JlcG8uZ28=) | `58.95% <0%> (+0.67%)` | :arrow_up: |\n| [scan/validators.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=tree#diff-c2Nhbi92YWxpZGF0b3JzLmdv) | `79.33% <0%> (+1.28%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=footer). Last update [30888c7...e5e80f7](https://codecov.io/gh/go-swagger/go-swagger/pull/1048?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  Signed-off-by: lfree xh <xh.dreamlover@gmail.com> OK, BasicAuth and BearerAuth added. # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1045?src=pr&el=h1) Report\n> Merging [#1045](https://codecov.io/gh/go-swagger/go-swagger/pull/1045?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/c9176d83dde012ec2f00dcd5af29d398d633e1b2?src=pr&el=desc) will **increase** coverage by `0.15%`.\n> The diff coverage is `96.55%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1045/graphs/tree.svg?src=pr&token=aQS1DepR8C&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1045?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1045      +/-   ##\n==========================================\n+ Coverage   72.38%   72.54%   +0.15%     \n==========================================\n  Files          21       21              \n  Lines        6157     6145      -12     \n==========================================\n+ Hits         4457     4458       +1     \n+ Misses       1228     1215      -13     \n  Partials      472      472\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1045?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1045?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <96.55%> (+1.75%)` | :arrow_up: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1045?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `41.33% <0%> (+1.33%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1045?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1045?src=pr&el=footer). Last update [c9176d8...e6f180c](https://codecov.io/gh/go-swagger/go-swagger/pull/1045?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\nCurrently, the user's TokenAuthentication func only got the token string passed.\r\n```\r\n// TokenAuthentication authentication function\r\ntype TokenAuthentication func(string) (interface{}, error)\r\n```\r\nSometimes it's not enough to verify the token string when it's calculated based on info like the query path or body data, which should be fetched through the http.Request interface. So is it possible to pass the http.Request instance to the auth func?\r\n```\r\n// TokenAuthWithRequest authentication function\r\ntype TokenAuthWithRequest func(string, *http.Request) (interface{}, error)\r\n```  How could I change responses of validation error.\r\n\r\nThe default response when the required field is empty is the following.\r\n\r\n```\r\nHTTP/1.1 422 Unprocessable Entity\r\n\r\n{\r\n  \"code\": 602,\r\n  \"message\": \"xxx in body is required\"\r\n}\r\n```\r\n\r\nBut, I want to change responses like as follows.\r\n\r\n```\r\nHTTP/1.1 422 Unprocessable Entity\r\n\r\n{\r\n  \"code\": 422,\r\n  \"version\": \"v1\",\r\n  \"status\": \"Failure\",\r\n  \"message\": \"xxx in body is required\"\r\n}\r\n```\r\n\r\nThe definition of swagger looks something like this.\r\n```\r\n  ValidationError:\r\n    type: \"object\"\r\n    properties:\r\n      version:\r\n        type: \"string\"\r\n      status:\r\n        type: \"string\"\r\n        enum: [\"Success\", \"Failure\"]\r\n      code:\r\n        type: \"integer\"\r\n        format: \"int32\"\r\n      message:\r\n        type: \"string\"\r\n``` Thanks for your quick response. \r\n\r\nI'll try it.  This is currently how my authentication looks:\r\n\r\n```\r\napi.APIKeyAuth = func(token string) (interface{}, error) {\r\n\r\n\t\t// Check if the user has access, true if yes\r\n\t\tvalidatedUser := dbConnector.ValidateUser(token)\r\n\r\n\t\tif validatedUser == true {\r\n\t\t\treturn token, nil\r\n\t\t}\r\n\r\n\t\treturn nil, errors.New(403, \"Provided key is not valid\")\r\n\t}\r\n```\r\n\r\nPretty straight forward. However, I would like to get the IP address of the requester in `api.APIKeyAuth` is that possible? Thanks @casualjim, can I help there? If you can hint me towards a place where you would like to see such an addition I can see if I can help. @casualjim Modification as you said does give us an opportunity to replace the authenticators, but the routine work of fetching the token string must be done manually also. What do you think of adding http.Request to the parameter list of authenticator of API key as I wrote in #1043?  ## Problem statement\r\nI've created a very simple Go Rest application with two structs and a couple of rest handlers. I annotated this with swagger comments. Generating the swagger.yml file results in a file that has the routers but not the models.\r\n\r\nSomehow i'm not annotating the model or routes properly. I've tried a few variants in the example below without result. Please give suggestions to fix this.\r\n\r\nI think this (complete) example would be very useful to other people that are starting with go-swagger\r\n\r\n## Steps to reproduce\r\nCreate file main.go with the content below.\r\nIn this folder call:  swagger generate spec -o ./swagger.yml\r\n\r\n```\r\n\r\n// execute using: swagger generate spec -o ./swagger.yml\r\n\r\n\r\n// Package classification Test Rest API.\r\n//\r\n// the purpose of this application is to provide an application\r\n// that is using plain go code to define an API.\r\n//\r\n// This should demonstrate all the possible comment annotations\r\n// that are available to turn go code into a fully compliant swagger 2.0 spec\r\n//\r\n// Terms Of Service:\r\n//\r\n// there are no TOS at this moment, use at your own risk we take no responsibility\r\n//\r\n//     Schemes: http, https\r\n//     Host: localhost:12345\r\n//     BasePath: /\r\n//     Version: 0.0.1\r\n//     License: MIT http://opensource.org/licenses/MIT\r\n//     Contact: ODT<name@domain.com> http://john.doe.com\r\n//\r\n//     Consumes:\r\n//     - application/json\r\n//\r\n//     Produces:\r\n//     - application/json\r\n//\r\n//\r\n// swagger:meta\r\npackage main\r\n\r\nimport (\r\n\"encoding/json\"\r\n\"log\"\r\n\"net/http\"\r\n\r\n\"github.com/gorilla/handlers\"\r\n\"github.com/gorilla/mux\"\r\n)\r\n\r\n// Person represents the person for this application\r\n//\r\n// A person is a human being\r\n//\r\n// A person can have an address\r\n//\r\n// swagger:model Person Person\r\ntype Person struct {\r\n\t// The id of the person.\r\n\t//\r\n\t// required: true\r\n\tID        string   `json:\"id,omitempty\"`\r\n\tFirstname string   `json:\"firstname,omitempty\"`\r\n\tLastname  string   `json:\"lastname,omitempty\"`\r\n\tAddress   *Address `json:\"address,omitempty\"`\r\n}\r\n\r\n// Address represents the address of a user\r\n//\r\n// An address is an address in the US.\r\n//\r\n// swagger:model\r\ntype Address struct {\r\n\tCity  string `json:\"city,omitempty\"`\r\n\tState string `json:\"state,omitempty\"`\r\n}\r\n\r\nvar people []Person\r\n\r\n// swagger:route GET /person persons getPerson\r\n//\r\n// Returns a person based on the parameter id.\r\n//\r\n// This will return only 1 person\r\n//\r\n// Consumes:\r\n// application/json\r\n//\r\n// Produces:\r\n// application/json\r\n//\r\n// Schemes: http, https\r\n//\r\n// Responses:\r\n// 200: Person\r\nfunc GetPersonEndpoint(w http.ResponseWriter, req *http.Request) {\r\n\tparams := mux.Vars(req)\r\n\tfor _, item := range people {\r\n\t\tif item.ID == params[\"id\"] {\r\n\t\t\tjson.NewEncoder(w).Encode(item)\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\tjson.NewEncoder(w).Encode(&Person{})\r\n}\r\n\r\n// swagger:route GET /persons persons listPersons\r\n//\r\n// Lists all persons\r\n//\r\n// This will show all available persons.\r\n//\r\n//     Consumes:\r\n//     - application/json\r\n//     - application/x-protobuf\r\n//\r\n//     Produces:\r\n//     - application/json\r\n//     - application/x-protobuf\r\n//\r\n//     Schemes: http, https\r\n//\r\n//     Responses:\r\n//       200: []Person\r\nfunc GetPeopleEndpoint(w http.ResponseWriter, req *http.Request) {\r\n\tjson.NewEncoder(w).Encode(people)\r\n}\r\n\r\nfunc CreatePersonEndpoint(w http.ResponseWriter, req *http.Request) {\r\n\tparams := mux.Vars(req)\r\n\tvar person Person\r\n\t_ = json.NewDecoder(req.Body).Decode(&person)\r\n\tperson.ID = params[\"id\"]\r\n\tpeople = append(people, person)\r\n\tjson.NewEncoder(w).Encode(people)\r\n}\r\n\r\nfunc DeletePersonEndpoint(w http.ResponseWriter, req *http.Request) {\r\n\tparams := mux.Vars(req)\r\n\tfor index, item := range people {\r\n\t\tif item.ID == params[\"id\"] {\r\n\t\t\tpeople = append(people[:index], people[index+1:]...)\r\n\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\tjson.NewEncoder(w).Encode(people)\r\n}\r\n\r\nfunc main() {\r\n\trouter := mux.NewRouter()\r\n\tpeople = append(people, Person{ID: \"1\", Firstname: \"Nic\", Lastname: \"Raboy\", Address: &Address{City: \"Dublin\", State: \"CA\"}})\r\n\tpeople = append(people, Person{ID: \"2\", Firstname: \"Maria\", Lastname: \"Raboy\"})\r\n\trouter.HandleFunc(\"/people\", GetPeopleEndpoint).Methods(\"GET\")\r\n\trouter.HandleFunc(\"/people/{id}\", GetPersonEndpoint).Methods(\"GET\")\r\n\trouter.HandleFunc(\"/people/{id}\", CreatePersonEndpoint).Methods(\"POST\")\r\n\trouter.HandleFunc(\"/people/{id}\", DeletePersonEndpoint).Methods(\"DELETE\")\r\n\tlog.Fatal(http.ListenAndServe(\":12345\", handlers.CORS()(router)))\r\n}\r\n\r\n\r\n```\r\n:\r\n\r\n## Environment\r\ngo-swagger 0.10\r\ngo version: 1.8.1\r\nOS:  macos\r\n I did:   swagger generate spec -o ./swagger.yml -m\r\n\r\nNow I get the error message:\r\n\r\nunable to determine package for /Users/swesten/GoglandProjects/testRestAPI/main.go\r\n\r\nwhich does not make sense to me because there is a single main file with a package declared.\r\n\r\nI've to say that the learning curve is pretty steep. I was using a temporary folder. After moving the folder below ~/go/src it worked fine.  I like to add additional flags \r\nIf i understand well that should happens at configureFlags function in restapi package\r\n\r\nSo basically i do something like this \r\n\r\nvar acmeConfig = struct {\r\n\tacmeHost string ``long:\"acme-host\" description:\"Use autocert with specific hostname\"\r\n}{}\r\n\r\nfunc configureFlags(api *operations.MdmAPI) {\r\n\tapi.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{\r\n\t\tswag.CommandLineOptionsGroup{\r\n\t\t\tShortDescription: \"Autocert hostname\",\r\n\t\t\tOptions:          &acmeConfig,\r\n\t\t},\r\n\t}\r\n}\r\nbut after build and execute with  -h option flang did not exist \r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: 1.8\r\nOS:    Centos 7.3\r\n Most probably is that i cant find the workflow but \r\nhttps://github.com/go-openapi/kvstore/blob/master/cmd/kvstored/main.go#L50\r\nis calling \r\nhttps://github.com/go-openapi/kvstore/blob/master/gen/restapi/server.go#L47\r\nwitch is calling \r\nhttps://github.com/go-openapi/kvstore/blob/master/gen/restapi/configure_kvstore.go#L20\r\nand that is the exact part witch is not working for me \r\n\r\n I found the \"issue\" and was very lame. I did not expose the flag property  to public.\r\nEverything works like a charm \r\n  Both a client and server can be generated and reference pre-generated\r\nmodels using the new \"existing-models\" command-line switch e.g.:\r\n\r\nswagger generate server --existing-models=\"github.com/<repo>/models\"\r\nswagger generate client --existing-models=\"github.com/<repo>/models\"\r\n\r\nThis is a pr that replaces #1033 removing conflicts. # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=h1) Report\n> Merging [#1035](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/adced0f1bbcaf223020c6d7735194c0f486b2ae2?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `76.92%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1035/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1035      +/-   ##\n==========================================\n+ Coverage   72.54%   72.55%   +<.01%     \n==========================================\n  Files          21       21              \n  Lines        6115     6124       +9     \n==========================================\n+ Hits         4436     4443       +7     \n- Misses       1211     1213       +2     \n  Partials      468      468\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `73.69% <\u00f8> (\u00f8)` | :arrow_up: |\n| [generator/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=tree#diff-Z2VuZXJhdG9yL29wZXJhdGlvbi5nbw==) | `69.3% <0%> (-0.23%)` | :arrow_down: |\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `62.36% <100%> (+0.82%)` | :arrow_up: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `68.73% <100%> (+0.37%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=footer). Last update [adced0f...a376934](https://codecov.io/gh/go-swagger/go-swagger/pull/1035?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\n\r\n[$ref](http://swagger.io/specification/#pathItemObject) within path is not resolved properly. Im getting error `no operations were selected`.  `fmt.Println` shows that `Spec.operations` is empty.\r\n\r\n## Swagger specification\r\n\r\n```\r\npaths:\r\n  \"/\":\r\n    \"$ref\": './paths/options.yaml'\r\n```\r\n## Steps to reproduce\r\n\r\nCreate any spec with referenced path item.\r\n\r\n## Environment\r\nswagger version: 0.10.0\r\ngo version: go version go1.8.1 darwin/amd64\r\nOS: osx\r\n Yes flattened spec has all operations included. Is such intermediate file recommended way of generation? Thanks for posting that solution @casualjim - that will work for me in the interim as well  Add ability to use pre-generated model in server and client generation. This is useful when, for example, you wish to share some helper code between clients and servers that validate and construct models. The new command-line flag provides the user the ability to specify an external go package that contains the required models. Setting \"--existing-models\" implies \"--skip-models\".\r\n\r\nUsage:\r\nswagger generate server --existing-models=\"github.com/\\<repo\\>\\/models\"\r\nswagger generate client --existing-models=\"github.com/\\<repo\\>/models\" Thanks Ivan. I'll get the conflicts resolved early next week.\n\nOn 6 May 2017 8:10 a.m., \"Ivan Porto Carrero\" <notifications@github.com>\nwrote:\n\n> there are some conflicts here that need to be resolved. changes look good\n> though\n>\n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/go-swagger/go-swagger/pull/1033#issuecomment-299621215>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABhXUHKHoDflLbtpZmPNT9w-zc7Ky2Hmks5r3B0BgaJpZM4NSpc4>\n> .\n>\n # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=h1) Report\n> Merging [#1033](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/adced0f1bbcaf223020c6d7735194c0f486b2ae2?src=pr&el=desc) will **increase** coverage by `0.13%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1033/graphs/tree.svg?src=pr&width=650&token=aQS1DepR8C&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1033      +/-   ##\n==========================================\n+ Coverage   72.54%   72.67%   +0.13%     \n==========================================\n  Files          21       21              \n  Lines        6115     5988     -127     \n==========================================\n- Hits         4436     4352      -84     \n+ Misses       1211     1179      -32     \n+ Partials      468      457      -11\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [scan/scanner.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree#diff-c2Nhbi9zY2FubmVyLmdv) | `75% <0%> (-1.11%)` | :arrow_down: |\n| [scan/parameters.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree#diff-c2Nhbi9wYXJhbWV0ZXJzLmdv) | `76.38% <0%> (-1.11%)` | :arrow_down: |\n| [scan/validators.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree#diff-c2Nhbi92YWxpZGF0b3JzLmdv) | `78.84% <0%> (-0.5%)` | :arrow_down: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `72.12% <0%> (-0.3%)` | :arrow_down: |\n| [generator/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree#diff-Z2VuZXJhdG9yL29wZXJhdGlvbi5nbw==) | `69.47% <0%> (-0.05%)` | :arrow_down: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `41.33% <0%> (\u00f8)` | :arrow_up: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `68.94% <0%> (+0.59%)` | :arrow_up: |\n| [generator/shared.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree#diff-Z2VuZXJhdG9yL3NoYXJlZC5nbw==) | `74.36% <0%> (+0.66%)` | :arrow_up: |\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `62.5% <0%> (+0.96%)` | :arrow_up: |\n| [scan/schema.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree#diff-c2Nhbi9zY2hlbWEuZ28=) | `73% <0%> (+1.26%)` | :arrow_up: |\n| ... and [2 more](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=footer). Last update [adced0f...c716205](https://codecov.io/gh/go-swagger/go-swagger/pull/1033?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1030?src=pr&el=h1) Report\n> Merging [#1030](https://codecov.io/gh/go-swagger/go-swagger/pull/1030?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/98671ec5934eaf31b6e2838261c2f79666c4f55e?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1030/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1030?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1030      +/-   ##\n==========================================\n- Coverage    72.4%   72.38%   -0.02%     \n==========================================\n  Files          21       21              \n  Lines        6073     6073              \n==========================================\n- Hits         4397     4396       -1     \n- Misses       1207     1208       +1     \n  Partials      469      469\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1030?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1030?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `64.75% <100%> (\u00f8)` | :arrow_up: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1030?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `40% <0%> (-1.34%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1030?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1030?src=pr&el=footer). Last update [98671ec...608f77b](https://codecov.io/gh/go-swagger/go-swagger/pull/1030?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n I'm curious why you implemented this interface.  Is it used somewhere?  Does go-swagger provide an `http.HandlerFunc` or other easy method for serving Swagger UI from a prexisting web app? I want my web app to expose `/swagger-ui`, without using code generation, and without hosting a separate server. Specifically, the petstore example hardcodes the Swagger spec, whereas a production application would be more likely to use some kind of resource loading system. Could the petstore example be updated to load the JSON spec from a file nearby in version control? Or even better, skip files altogether and generate the spec on launch via Swagger Go lib?\r\n\r\nhttps://github.com/go-swagger/go-swagger/blob/master/examples/2.0/petstore/server/api/petstore.go Hi @casualjim \r\n\r\nIt is followup question to this thread,\r\n\r\nIs there any way can we serve swagger UI  using swagger-ui instead of ReDoc?\r\nDo you have any example on it.\r\n\r\nPlease let me know\r\n  ## Problem statement\r\n\r\nI am trying to get security definitions working with OAuth2 in the spec generation. However, it seems like either I'm using the scopes parameter wrong or it's not supported.\r\n\r\n## Go specification\r\n\r\nI tried the following things:\r\n\r\n```go\r\n// ...\r\n//     SecurityDefinitions:\r\n//     - oauth2:\r\n//         type: oauth2\r\n//         authorizationUrl: /oauth2/auth\r\n//         tokenUrl: /oauth2/token\r\n//         in: header\r\n//         scopes:\r\n//           bla: foo\r\n//         flow: accessCode\r\n// ...\r\n// swagger:meta\r\npackage main\r\n```\r\n\r\n```go\r\n// ...\r\n//     SecurityDefinitions:\r\n//     - oauth2:\r\n//         type: oauth2\r\n//         authorizationUrl: /oauth2/auth\r\n//         tokenUrl: /oauth2/token\r\n//         in: header\r\n//         scopes:\r\n//           bla: foo\r\n//         flow: accessCode\r\n// ...\r\n// swagger:meta\r\npackage main\r\n```\r\n\r\n```go\r\n// ...\r\n//     SecurityDefinitions:\r\n//     - oauth2:\r\n//         type: oauth2\r\n//         authorizationUrl: /oauth2/auth\r\n//         tokenUrl: /oauth2/token\r\n//         in: header\r\n//         scopes:\r\n//           - bla: foo\r\n//         flow: accessCode\r\n// ...\r\n// swagger:meta\r\npackage main\r\n```\r\n\r\nThe resulting swagger json is always the same:\r\n\r\n```json\r\n  \"securityDefinitions\": {\r\n    \"oauth2\": {\r\n      \"type\": \"\",\r\n      \"flow\": \"accessCode\"\r\n    },\r\n    \"scopes\": {\r\n      \"type\": \"\",\r\n      \"flow\": \"accessCode\"\r\n    }\r\n  },\r\n```\r\n\r\nWhen removing the scope array, or replacing it with `scope: foobar`, it simply removes the scope key:\r\n\r\n```json\r\n\r\n  \"securityDefinitions\": {\r\n    \"oauth2\": {\r\n      \"type\": \"oauth2\",\r\n      \"in\": \"header\",\r\n      \"flow\": \"accessCode\",\r\n      \"authorizationUrl\": \"/oauth2/auth\",\r\n      \"tokenUrl\": \"/oauth2/token\"\r\n    }\r\n  },\r\n```\r\n\r\n## Environment\r\nswagger version: latest master of goswagger (installed today)\r\ngo version: 1.8\r\nOS: Win10\r\n Will check and do fix tomorrow. Thank you for fixing this so swiftly!\n\n> Am 05.05.2017 um 19:50 schrieb Ivan Porto Carrero <notifications@github.com>:\n> \n> Closed #1028 via 01f8647.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n I'm still observing the same behaviour. After doing `go get -u github.com/go-swagger/go-swagger` and `gen-swagger.sh` the result of\r\n\r\n```\r\n//     Schemes: http, https\r\n//     Host:\r\n//     BasePath: /\r\n//     Version: Latest\r\n//     License: Apache 2.0 https://github.com/ory/hydra/blob/master/LICENSE\r\n//     Contact: ORY <hi@ory.am> https://www.ory.am\r\n//\r\n//     Consumes:\r\n//     - application/json\r\n//     - application/x-www-form-urlencoded\r\n//\r\n//     Produces:\r\n//     - application/json\r\n//\r\n//     SecurityDefinitions:\r\n//     - oauth2:\r\n//         type: oauth2\r\n//         authorizationUrl: /oauth2/auth\r\n//         tokenUrl: /oauth2/token\r\n//         in: header\r\n//         flow: accessCode\r\n//         scopes:\r\n//           bla: foo\r\n//\r\n//     Extensions:\r\n//     ---\r\n//     x-request-id: string\r\n//     x-forwarded-proto: string\r\n//     ---\r\n//\r\n// swagger:meta\r\n```\r\n\r\nis\r\n\r\n```\r\n  \"securityDefinitions\": {\r\n    \"oauth2\": {\r\n      \"type\": \"\"\r\n    },\r\n    \"scopes\": {\r\n      \"type\": \"\"\r\n    }\r\n  },\r\n  \"x-request-id\": \"string\"\r\n``` Ah yes, that helped, thanks! However it's only copying the first scope:\r\n\r\n```\r\n//\r\n//     SecurityDefinitions:\r\n//     - oauth2:\r\n//         type: oauth2\r\n//         authorizationUrl: /oauth2/auth\r\n//         tokenUrl: /oauth2/token\r\n//         flow: accessCode\r\n//         scopes:\r\n//           hydra.clients: \"A scope required to manage OAuth 2.0 Clients\"\r\n//           hydra.policies: \"A scope required to manage access control policies\"\r\n//           hydra.groups: \"A scope required to manage warden groups\"\r\n//           hydra.warden: \"A scope required to make access control inquiries\"\r\n//           hydra.keys.get: \"A scope required to fetch JSON Web Keys\"\r\n//           hydra.keys.create: \"A scope required to create JSON Web Keys\"\r\n//           hydra.keys.delete: \"A scope required to delete JSON Web Keys\"\r\n//           hydra.keys.update: \"A scope required to get JSON Web Keys\"\r\n//           offline: \"A scope required when requesting refresh tokens\"\r\n//           openid: \"Request an OpenID Connect ID Token\"\r\n```\r\n\r\n```\r\n  \"securityDefinitions\": {\r\n    \"oauth2\": {\r\n      \"type\": \"oauth2\",\r\n      \"flow\": \"accessCode\",\r\n      \"authorizationUrl\": \"/oauth2/auth\",\r\n      \"tokenUrl\": \"/oauth2/token\",\r\n      \"scopes\": {\r\n        \"hydra.clients\": \"\\\"A scope required to manage OAuth 2.0 Clients\\\"\"\r\n      }\r\n    }\r\n  },\r\n``` @arekkas working on that #1057 should fix your issue  ## Problem statement\r\n\r\nI want to generate a Swagger specification from a preexisting net/http application. However, go-swagger appears to have trouble finding the endpoints.\r\n\r\nAs a new go-swagger user, I'm not sure whether endpoints need to be manually annotated first, in order to assist `swagger generate spec`. Could someone clarify?\r\n\r\n## Swagger specification\r\n\r\n```json\r\n{\r\n  \"swagger\": \"2.0\",\r\n  \"paths\": {}\r\n}\r\n```\r\n## Steps to reproduce\r\n\r\n1. Define endpoints with `net/http`.\r\n2. Run `swagger generate spec`.\r\n3. Run `swagger generate spec -b ./cmd`.\r\n4. Run `swagger generate spec -b ./cmd/server`.\r\n5. Run `swagger generate spec -b ./cmd/server/main.go`.\r\n6. Run `swagger generate spec -b <git server>/<repo>/cmd/server`.\r\n\r\nSame no-paths Swagger output each time.\r\n\r\n## Environment\r\n\r\ngo-swagger version: dev\r\ngo version: 1.7.5\r\nOS: macOS 10.12 Yes. Maybe I got the syntax wrong?\r\n\r\n```go\r\n// swagger:route GET /health\r\n//\r\n// Returns status information for connected elements.\r\n//\r\n// Produces:\r\n// - application/json\r\n//\r\n// Schemes: http, https\r\n//\r\n// Responses:\r\n//   default: genericError\r\n//   200: someResponse\r\nfunc GetHealth(w http.ResponseWriter, r *http.Request) {\r\n...\r\n}\r\n``` Ah, I was missing the required operation ID field in the swagger syntax.  Can we add this feature for logo integration if possible\r\n\r\n```json\r\n{\r\n  \"consumes\": [\r\n    \"application/json\",\r\n    \"application/xml\"\r\n  ],\r\n  \"produces\": [\r\n    \"application/json\",\r\n    \"application/xml\"\r\n  ],\r\n  \"schemes\": [\r\n    \"http\",\r\n    \"https\"\r\n  ],\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"x-logo\": {\r\n      \"url\": \"./images/hrperformans/logo260x75x72.png\",\r\n      \"backgroundColor\": \"#FFFFFF\"\r\n    }\r\n}\r\n```\r\n\r\n![alt text](https://content.screencast.com/users/Ibrahim_Cobani/folders/Snagit/media/36c98202-c254-4bf5-9dc5-8ee97ce16e50/2017-04-30_13-38-27.png \"x-logo integration\")\r\n Yes I want to add another command (like bellow) for x-logo. \r\n\r\n\r\n```go\r\n// HRPERFORMANS uygulamas\u0131 API d\u00f6k\u00fcman\u0131.\r\n\r\n//\r\n// HR Performans\r\n// \u00fcreten \u00f6rnek bir go uygulamas\u0131 ortaya koymakt\u0131r.\r\n//\r\n// Uygulama go kodu ve yorum sat\u0131rlar\u0131nda kullan\u0131lan \u00f6zel direktifleri\r\n// kullanarak swagger 2.0 uyumlu bir API spesikasyon d\u00f6k\u00fcman\u0131 \u00fcretmektedir.\r\n//\r\n// Schemes: http, https\r\n// Host: localhost\r\n// BasePath: /v2\r\n// Version: 0.0.1\r\n// License: MIT http://opensource.org/licenses/MIT\r\n// Contact: ici<ibrahim@cobani.com>\r\n// X-logo: ./images/hrperformans/logo260x75x72.png\r\n//\r\n// Consumes:\r\n//   - application/json\r\n//   - application/xml\r\n//\r\n// Produces:\r\n//   - application/json\r\n//   - application/xml\r\n//\r\n// swagger:meta\r\npackage main\r\n``` Wonderfull \ud83d\udc4d  thanks  This example shows one of the handlers. It now simply returns the \"createdCode\" that is set for this event.\r\n\r\n```\r\napi.LocationsWeaviateLocationsInsertHandler = locations.WeaviateLocationsInsertHandlerFunc(func(params locations.WeaviateLocationsInsertParams) middleware.Responder {\r\n\r\n    // do stuff based on params.Body\r\n\r\n    return middleware.ResponderFunc(func(rw http.ResponseWriter, p runtime.Producer) {\r\n        rw.WriteHeader(locations.WeaviateLocationsInsertCreatedCode)\r\n    })\r\n})\r\n```\r\n\r\nI would like to know how I can validate `params.Body`. I don't seem to be able to find the correct validation function. Hi @casualjim, thx but I actually mean the expected body.\r\n\r\nIf I POST a body which is not the body from the definition it is still accepted.\r\n\r\n### Example\r\n\r\nIf I have this definition\r\n\r\n```\r\ndefinitions:\r\n    Example:\r\n        description: Example definition.\r\n        properties:\r\n            foo:\r\n                default: 'case'\r\n                description: This is a test string\r\n                type: string\r\n            bar:\r\n                default: 'case'\r\n                description: This is another test string\r\n                type: string\r\n```\r\n\r\nand I POST:\r\n\r\n```\r\n{\r\n  \"test\":\"case\"\r\n}\r\n```\r\n\r\nIt still is 'valid'. That is why I would like to validate `params.Body` against what is in the Swagger document. Check, thanks!  Also bumped vendored version of go-openapi/analysis with 'gvt update' for access to the new Mixin func. # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1024?src=pr&el=h1) Report\n> Merging [#1024](https://codecov.io/gh/go-swagger/go-swagger/pull/1024?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/98671ec5934eaf31b6e2838261c2f79666c4f55e?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1024/graphs/tree.svg?src=pr&width=650&height=150&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1024?src=pr&el=tree)\n\n```diff\n@@          Coverage Diff           @@\n##           master   #1024   +/-   ##\n======================================\n  Coverage    72.4%   72.4%           \n======================================\n  Files          21      21           \n  Lines        6073    6073           \n======================================\n  Hits         4397    4397           \n  Misses       1207    1207           \n  Partials      469     469\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1024?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1024?src=pr&el=footer). Last update [98671ec...fd05b20](https://codecov.io/gh/go-swagger/go-swagger/pull/1024?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n Thanks, Ivan. Do you need a PR for go-swagger.github.io to document the mixin command or should we let it 'settle' for a while?  Allows people to find the actually supported formats.\r\n\r\nUpdated after: https://github.com/go-swagger/go-swagger.github.io/pull/8#issuecomment-298176500 # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1023?src=pr&el=h1) Report\n> Merging [#1023](https://codecov.io/gh/go-swagger/go-swagger/pull/1023?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/e62bb826fdafcfe51ad89739ae720ed9a9901428?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1023/graphs/tree.svg?token=aQS1DepR8C&src=pr&height=150&width=650)](https://codecov.io/gh/go-swagger/go-swagger/pull/1023?src=pr&el=tree)\n\n```diff\n@@          Coverage Diff           @@\n##           master   #1023   +/-   ##\n======================================\n  Coverage    72.4%   72.4%           \n======================================\n  Files          21      21           \n  Lines        6073    6073           \n======================================\n  Hits         4397    4397           \n  Misses       1207    1207           \n  Partials      469     469\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1023?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1023?src=pr&el=footer). Last update [e62bb82...179c932](https://codecov.io/gh/go-swagger/go-swagger/pull/1023?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  I seem to be unable to find supported mime-types that the API's can consume and produce.\r\n\r\nAny references? Wonderful, thanks @casualjim.\r\n\r\n1. Did a minor pull request: https://github.com/go-swagger/go-swagger.github.io/pull/8\r\n2. Protobuf would be very much appreciated \ud83d\udc4d \r\n\r\nCheers The info appears to have been removed? Because I can't find any information about supported producer mime types. \ud83d\ude03 \r\n\r\nImagine having following `swagger.yml`\r\n\r\n```yml\r\n...\r\n  /users/{userId}/image:\r\n    get:\r\n      tags:\r\n      - user\r\n      description: Get the user's profile image\r\n      operationId: getUserImage\r\n      parameters:\r\n        - name: userId\r\n          in: path\r\n          description: The ID of the user\r\n          required: true\r\n          type: string\r\n      produces:\r\n        - application/octet-stream\r\n      responses:\r\n        200:\r\n          description: Success\r\n          schema:\r\n            type: string\r\n            format: binary\r\n...\r\n```\r\n\r\nThe API produces the binary/image with `application/octet-stream` just as intended. But writing e.g. `image/jpeg` in `produces` does not work because no producer is registered for it. It took me quite a while to figure this out because no error message was printed out and I thought that my `io.ReadCloser` simply didn't work.\r\n\r\nI am using go-swagger to generate `go` code from my swagger spec. Is there a way to register another producer? Because the `xxx_api.go` is generated, I can't add it manually or can I?\r\n\r\n(btw. I'm a `go` novice and just recently started using `go-swagger`)\r\n\r\nMaybe an error should be printed if not supported (binary) mime types are used?\r\n\r\n### Environment\r\nswagger version: \r\n-> version: 0.12.0\r\n-> commit: 8135eb6728e43b73489e80f94426e6d387809502\r\ngo version: `go version go1.9.2 windows/amd64`\r\nOS:   Windows 10  ## Problem statement\r\nWe define a specific \"shape\" for our error responses from our api.  It is an object that has a `message` field.\r\n\r\nIf for some reason our API goes down, all the routers in the path to the api (e.g. nginx, haproxy, AWS ELB, etc) return html or plain text instead of json.  When the return is `text/plain`, we get a panic.  \r\n\r\n```\r\npanic: interface conversion: interface {} is *models.Error, not *string\r\n...\r\n/go/src/github.com/3dsim/solver-svc/vendor/github.com/go-openapi/runtime/text.go:34\r\n```\r\n\r\nI would expect the generated client to return an error instead of panicking if the api returns an object that isn't the right shape.  \r\n\r\nQuoting Andrew Gerrand, \"The convention in the Go libraries is that even when a package uses panic internally, its external API still presents explicit error return values.\"\r\n\r\n## Swagger specification for responses:\r\n```\r\nresponses:\r\n        \"200\":\r\n          description: Successfully retrieved list\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: '#/definitions/Material'\r\n        \"401\":\r\n          description: Not authorized\r\n          schema:\r\n            $ref: '#/definitions/Error'\r\n        \"403\":\r\n          description: Forbidden\r\n          schema:\r\n            $ref: '#/definitions/Error'\r\n        default:\r\n          description: unexpected error\r\n          schema:\r\n            $ref: '#/definitions/Error'\r\n```\r\n\r\nSwagger for error definition:\r\n```\r\nError:\r\n    required:\r\n      - code\r\n      - message\r\n    properties:\r\n      code:\r\n        type: integer\r\n        format: int32\r\n      message:\r\n        type: string\r\n```\r\n\r\n## Steps to reproduce\r\nUse an object for error response type.  Generate client.  Use client to call a URL that will 404 with a plain text response.  \r\n\r\n## Environment\r\ngo-swagger version: 0.8.0\r\ngo version: 1.8.1\r\n @casualjim have a minute to look at this one?  It's pretty painful for us.  Surprised it hasn't come up previously. Currently to work around this we have to recover from a panic before we call any generated client code.  \r\n\r\ne.g.\r\n```\r\nfunc (c *client) Material(materialID int32) (material *models.Material, err error) {\r\n\tdefer func() {\r\n\t\t// Until this issue is resolved: https://github.com/go-swagger/go-swagger/issues/1021, we need to recover from\r\n\t\t// panics.\r\n\t\tif r := recover(); r != nil {\r\n\t\t\terr = fmt.Errorf(\"Recovered from panic: %v\", r)\r\n\t\t}\r\n\t}()\r\n\ttoken, err := c.tokenFetcher.Token(c.audience)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\tresponse, err := c.client.Operations.GetMaterial(operations.NewGetMaterialParams().WithID(materialID), openapiclient.BearerToken(token))\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\treturn response.Payload, nil\r\n}\r\n``` @casualjim Going to bump this again.  Should we be modeling our errors differently to avoid panics?  There must be something we are missing.  Should we not be specifying a schema at all for errors? @ryanwalls : can you provide location where panic is coming in runtime.go if you remove that  recovery piece of code? When I look at line 34 of runtime/text.go , it points to nothing @casualjim @EleanorRigby Good news.  Since I created this issue the bug has been fixed.  I updated one of our clients that was experiencing this issue to the more recent packages, and the panic went away.  Sorry about the recent pings.  Should have tried updating the packages before I bumped this issue.  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1019?src=pr&el=h1) Report\n> Merging [#1019](https://codecov.io/gh/go-swagger/go-swagger/pull/1019?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/daba95b0aeeea28690e4e7ba8732ddd2cd6e7542?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1019/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1019?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##           master   #1019      +/-   ##\n=========================================\n+ Coverage   72.39%   72.4%   +<.01%     \n=========================================\n  Files          21      21              \n  Lines        6072    6073       +1     \n=========================================\n+ Hits         4396    4397       +1     \n  Misses       1207    1207              \n  Partials      469     469\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1019?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/operation.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1019?src=pr&el=tree#diff-Z2VuZXJhdG9yL29wZXJhdGlvbi5nbw==) | `69.52% <100%> (+0.04%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1019?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1019?src=pr&el=footer). Last update [daba95b...921b55c](https://codecov.io/gh/go-swagger/go-swagger/pull/1019?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1018?src=pr&el=h1) Report\n> Merging [#1018](https://codecov.io/gh/go-swagger/go-swagger/pull/1018?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/500d0328205767e02bbd0a632e80ef02490d67ab?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1018/graphs/tree.svg?height=150&width=650&token=aQS1DepR8C&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1018?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1018      +/-   ##\n==========================================\n- Coverage   72.39%   72.38%   -0.02%     \n==========================================\n  Files          21       21              \n  Lines        6072     6072              \n==========================================\n- Hits         4396     4395       -1     \n- Misses       1207     1208       +1     \n  Partials      469      469\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1018?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1018?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `40% <0%> (-1.34%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1018?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1018?src=pr&el=footer). Last update [500d032...48cc3d6](https://codecov.io/gh/go-swagger/go-swagger/pull/1018?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1017?src=pr&el=h1) Report\n> Merging [#1017](https://codecov.io/gh/go-swagger/go-swagger/pull/1017?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/bea9b8697219816178b834ba81b1242287adf7f0?src=pr&el=desc) will **increase** coverage by `0.09%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1017/graphs/tree.svg?height=150&width=650&token=aQS1DepR8C&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1017?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1017      +/-   ##\n==========================================\n+ Coverage   72.28%   72.38%   +0.09%     \n==========================================\n  Files          21       21              \n  Lines        6069     6072       +3     \n==========================================\n+ Hits         4387     4395       +8     \n+ Misses       1213     1208       -5     \n  Partials      469      469\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1017?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1017?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `40% <\u00f8> (\u00f8)` | :arrow_up: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1017?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `72.42% <100%> (+0.63%)` | :arrow_up: |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1017?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `64.75% <100%> (\u00f8)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1017?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1017?src=pr&el=footer). Last update [bea9b86...e2c33ad](https://codecov.io/gh/go-swagger/go-swagger/pull/1017?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1016?src=pr&el=h1) Report\n> :exclamation: No coverage uploaded for pull request base (`master@378b492`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1016/graphs/tree.svg?token=aQS1DepR8C&width=650&height=150&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1016?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff            @@\n##             master    #1016   +/-   ##\n=========================================\n  Coverage          ?   72.26%           \n=========================================\n  Files             ?       21           \n  Lines             ?     6069           \n  Branches          ?        0           \n=========================================\n  Hits              ?     4386           \n  Misses            ?     1214           \n  Partials          ?      469\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1016?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [scan/scanner.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1016?src=pr&el=tree#diff-c2Nhbi9zY2FubmVyLmdv) | `76.1% <\u00f8> (\u00f8)` | |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1016?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `64.75% <100%> (\u00f8)` | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1016?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1016?src=pr&el=footer). Last update [378b492...7d68836](https://codecov.io/gh/go-swagger/go-swagger/pull/1016?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1015?src=pr&el=h1) Report\n> Merging [#1015](https://codecov.io/gh/go-swagger/go-swagger/pull/1015?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/f875d6b76d32b61d4574522dafd3e7bae1cc829d?src=pr&el=desc) will **decrease** coverage by `0.14%`.\n> The diff coverage is `7.69%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1015/graphs/tree.svg?token=aQS1DepR8C&width=650&height=150&src=pr)](https://codecov.io/gh/go-swagger/go-swagger/pull/1015?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1015      +/-   ##\n==========================================\n- Coverage   72.43%   72.29%   -0.15%     \n==========================================\n  Files          21       21              \n  Lines        6044     6056      +12     \n==========================================\n  Hits         4378     4378              \n- Misses       1196     1208      +12     \n  Partials      470      470\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1015?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1015?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `64.75% <7.69%> (-1.76%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1015?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1015?src=pr&el=footer). Last update [f875d6b...9019221](https://codecov.io/gh/go-swagger/go-swagger/pull/1015?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n  ## Problem statement\r\n\r\nAll generated code is using `golang.org/x/net/context` however `restapi/operations/app_api.go` is using `context` which makes the generated code fail to compile\r\n\r\n## Environment\r\nswagger version: 0.9.0\r\ngo version: 1.8\r\nOS:  Linux (Ubuntu 16.10 amd64)\r\n  ## Problem statement\r\n\r\nA query parameter, specified as an array, breaks when using pattern for items.\r\n\r\n## Swagger specification\r\n\r\n```\r\n/widgets/:\r\n  get:\r\n    summary: Retrieve all widgets.\r\n    parameters:\r\n      - name: category_id\r\n        in: query\r\n        description: Return the widgets that are associated with this category.\r\n        required: true\r\n        type: array\r\n        collectionFormat: \"multi\"\r\n        items:\r\n          type: string\r\n          pattern: '^[0-9abcdefghjkmnpqrtuvwxyz]{29}$'\r\n          format: base32ID\r\n```\r\n\r\nThe code generated for this route's parameters ends up with an incorrect variable name:\r\n\r\n```\r\nfunc (o *GetWidgetsParams) bindCategoryID(rawData []string, hasKey bool, formats strfmt.Registry) error {\r\n  if !hasKey {\r\n    return errors.Required(\"category_id\", \"query\")\r\n  }\r\n\r\n  categoryIDIC := rawData\r\n\r\n  if len(categoryIDIC) == 0 {\r\n    return errors.Required(\"category_id\", \"query\")\r\n  }\r\n\r\n  var categoryIDIR []string\r\n  for i, categoryIDIV := range categoryIDIC {\r\n    categoryIDI := categoryIDIV\r\n\r\n    if err := validate.Pattern(fmt.Sprintf(\"%s.%v\", \"category_id\", i), \"query\", category_idI, `^[0-9abcdefghjkmnpqrtuvwxyz]{29}$`); err != nil {\r\n      return err\r\n    }\r\n\r\n    categoryIDIR = append(categoryIDIR, categoryIDI)\r\n  }\r\n\r\n  o.CategoryID = categoryIDIR\r\n\r\n  return nil\r\n}\r\n```\r\n\r\nNote the `validate.Pattern` line.\r\n\r\nIt attempts to consume `category_idI` not `categoryIDI` as defined the line above. Should the `{{ ValueExpression }}` located in [this file](https://github.com/go-swagger/go-swagger/blob/master/generator/templates/validation/primitive.gotmpl#L12) be `{{ varname ValueExpression }}` or will that break other things?  ## Problem statement\r\n\r\nI want a go-swagger generated server to serve 2 swagger specs that have no overlap on paths.  One is a generic metadata api that is implemented by many services and the other is a service-specific api.   The built-in server.go template Server struct, by having exactly one API & handler, appears to prevent this.\r\n\r\nIs there a good way to do this without re-templating or major modifications to go-swagger while staying compatible with the go-openapi runtime?\r\n Could you create a top-level swagger file that just includes the two lower-level ones?\r\n Thanks.  Using a top level swagger file to merge two other files seems to require explicitly $ref'ing each path and data type entry?  ie I can't just generically union the paths: $ref:file1.json/paths $ref:file2.json/paths  and definitions: $ref:file1/definitions $ref:file2.json/definitions ?\r\n\r\nThere appears to be tooling to merge swagger files into a single file with only internal $refs. For example https://github.com/BigstickCarpet/swagger-parser has a 'bundle' function. Good point. I guess I'm looking for a flatten that takes 2 or more swagger files and merges them by ref or value. I'm trying to avoid writing the root one that ref's everything together. Awesome, just what I was thinking.  Hope to get to that shortly.  Cmd tentatively called 'mixin'. banged out a poc here https://github.com/msample/swagger-mixin.  It needs to be massaged into a PR, probably one for go-swagger (main.go as a cmd) and another for go-openapi/analysis (mixer).   Will try to get to PRs later this week.  Adds Makefile and scripts for the common development flow.\r\nAfter adding use of gometalinter, several linting issues were found\r\nand resolved as part of the fix. I'm not 100% happy with the Makefile and scripts as some parts do not work as I would have expected.\r\nBut with the number of linting items that I noticed and resolved after trying to determine how gotmetalinter was being used on the project, I figured it was best to submit the PR for feedback.\r\n\r\nWorst case, I can revert any items.\r\n # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=h1) Report\n> Merging [#1004](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/67a64c4db4bbca83cebb9e6a5382f26ad80ea7b4?src=pr&el=desc) will **decrease** coverage by `0.02%`.\n> The diff coverage is `34.78%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1004/graphs/tree.svg?height=150&width=650&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1004      +/-   ##\n==========================================\n- Coverage   72.49%   72.47%   -0.03%     \n==========================================\n  Files          21       21              \n  Lines        5985     5976       -9     \n==========================================\n- Hits         4339     4331       -8     \n+ Misses       1187     1184       -3     \n- Partials      459      461       +2\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <\u00f8> (\u00f8)` | :arrow_up: |\n| [scan/meta.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree#diff-c2Nhbi9tZXRhLmdv) | `82.88% <\u00f8> (\u00f8)` | :arrow_up: |\n| [generator/client.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree#diff-Z2VuZXJhdG9yL2NsaWVudC5nbw==) | `62.5% <\u00f8> (\u00f8)` | :arrow_up: |\n| [scan/responses.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree#diff-c2Nhbi9yZXNwb25zZXMuZ28=) | `80.6% <0%> (\u00f8)` | :arrow_up: |\n| [scan/schema.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree#diff-c2Nhbi9zY2hlbWEuZ28=) | `72.22% <0%> (-0.66%)` | :arrow_down: |\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `68.85% <0%> (+0.16%)` | :arrow_up: |\n| [scan/parameters.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree#diff-c2Nhbi9wYXJhbWV0ZXJzLmdv) | `76.38% <0%> (\u00f8)` | :arrow_up: |\n| [generator/types.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree#diff-Z2VuZXJhdG9yL3R5cGVzLmdv) | `83.68% <0%> (\u00f8)` | :arrow_up: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `71.78% <100%> (+0.04%)` | :arrow_up: |\n| [scan/scanner.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree#diff-c2Nhbi9zY2FubmVyLmdv) | `75.19% <100%> (+0.77%)` | :arrow_up: |\n| ... and [2 more](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=tree-more) | |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=footer). Last update [67a64c4...940b7dc](https://codecov.io/gh/go-swagger/go-swagger/pull/1004?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).  ## Problem statement\r\n\r\nI am trying to figure out how to write and annotate a `go-swagger` response struct that produces the following swagger output:\r\n\r\n```json\r\n\"fileResponse\": {\r\n    \"description\": \"OK\",\r\n    \"schema\": {\r\n        \"type\": \"file\"\r\n    }\r\n}\r\n```\r\nHowever, I am unable to figure out how to do this with `go-swagger` response struct and annotations and the documentation doesn't provide any clarity on this specific use-case. I end up with the following:\r\n\r\n```json\r\n\"fileResponse\": {\r\n    \"description\": \"OK\",\r\n    \"schema\": {\r\n        \"type\": \"array\",\r\n        \"items\": {\r\n            \"type\": \"integer\",\r\n            \"format\": \"uint8\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## go-swagger specification\r\n\r\nI know this is obviously wrong, but this was the closest I could approximate:\r\n\r\n```go\r\n// OK\r\n// swagger:response photoByFilenameResponse\r\ntype fileResponse struct {\r\n\t// In: body\r\n\tFile []byte `json:\"body,omitempty\"`\r\n}\r\n```\r\n\r\nFor the operation that is returning this response, I've also made sure to specify the MIME type:\r\n\r\n```go\r\n// Produces:\r\n// - image/jpeg\r\n// - image/png\r\n// - application/octet-stream\r\n```\r\n\r\n## Environment\r\nswagger version: 2.0\r\ngo-swagger version: dev\r\ngo version: 1.8.0  \r\nOS:   Mac OS X 10.10.5\r\n The only reference I've found to `strfmt` is in this package: https://github.com/go-openapi/strfmt\r\n\r\nHowever: `File not declared by package strfmt`  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1001?src=pr&el=h1) Report\n> Merging [#1001](https://codecov.io/gh/go-swagger/go-swagger/pull/1001?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/6c8b467f5e64567339a296ffa2c24df69f7ec1e8?src=pr&el=desc) will **decrease** coverage by `<.01%`.\n> The diff coverage is `50%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/1001/graphs/tree.svg?src=pr&token=aQS1DepR8C&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/1001?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master    #1001      +/-   ##\n==========================================\n- Coverage    72.5%   72.49%   -0.01%     \n==========================================\n  Files          21       21              \n  Lines        5979     5985       +6     \n==========================================\n+ Hits         4335     4339       +4     \n  Misses       1187     1187              \n- Partials      457      459       +2\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/1001?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/support.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1001?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N1cHBvcnQuZ28=) | `68.68% <50%> (-0.26%)` | :arrow_down: |\n| [scan/schema.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1001?src=pr&el=tree#diff-c2Nhbi9zY2hlbWEuZ28=) | `72.87% <50%> (-0.17%)` | :arrow_down: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/1001?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `41.33% <0%> (+2.66%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1001?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/1001?src=pr&el=footer). Last update [6c8b467...f54d7a7](https://codecov.io/gh/go-swagger/go-swagger/pull/1001?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).  ## Problem statement\r\n\r\nCreating a swagger spec with a custom type generates an invalid spec:\r\n\r\n    - must validate one and only one schema (oneOf)\r\n    - must validate one and only one schema (oneOf)\r\n    - must validate one and only one schema (oneOf)\r\n    - paths./activity.json.get.parameters.$ref in body is a forbidden property\r\n    - paths./activity.json.get.parameters.in in body should be one of [header]\r\n    - paths./activity.json.get.parameters.type in body is required\r\n\r\nIn my case, the custom type is a simpler wrapper around `time.Time`, which adds custom marshaler/unmarshaler functionality.\r\n\r\nIs there a way to use custom types in parameters?\r\n\r\nIf additional information is needed, I can produce an MRE. > Have you seen the strfmt types?\r\n\r\nI had not. Setting my custom type to a `strfmt` does seem to solve my problem. Thank you!  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/999?src=pr&el=h1) Report\n> Merging [#999](https://codecov.io/gh/go-swagger/go-swagger/pull/999?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/35a6d12bfae892f06b18f06999a98b0ad8d7a7b7?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/999/graphs/tree.svg?width=650&src=pr&token=aQS1DepR8C&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/999?src=pr&el=tree)\n\n```diff\n@@           Coverage Diff           @@\n##           master     #999   +/-   ##\n=======================================\n  Coverage   72.53%   72.53%           \n=======================================\n  Files          21       21           \n  Lines        5979     5979           \n=======================================\n  Hits         4337     4337           \n  Misses       1185     1185           \n  Partials      457      457\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/999?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/999?src=pr&el=footer). Last update [35a6d12...a315794](https://codecov.io/gh/go-swagger/go-swagger/pull/999?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).  ## Problem statement\r\n\r\nGenerated Go server using --with-context fails to compile due to mixed use of \"context\" and \"x/net/context\"\r\n\r\n## Environment\r\nswagger version: dev/HEAD as of today\r\ngo version: 1.8\r\nOS:   OSX\r\n\r\nFix for me was to update the following templates (did client one as well but did not test) and 'go generate' bindata.go again.\r\n\r\n    generator/templates/client/parameter.gotmpl\r\n    generator/templates/server/configureapi.gotmpl\r\n    generator/templates/server/operation.gotmpl\r\n\r\n    context \"golang.org/x/net/context\"  -->  context \"context\"\r\n Similar issue, in `builder.gotmpl`, there is no \"context\" import, when formatting generated code, goimports resolves context import as \"context\" not \"golang.org/x/net/context\", so there is mixed usage of context again, i worked around it by using gofmt right after generating:\r\n\r\n```\r\ngofmt -w -r '\"context\" -> \"golang.org/x/net/context\"' server/operations/my_api.go\r\n```\r\n\r\nWe should probably fix this by using stdlib context in all places, since Go 1.7 and 1.8 are out for some time. In retrospect, given that one can get the http.Request from params, and one can get the context from that by calling req.Context(),  perhaps the 'go-swagger generate server' no longer needs the '--with-context' flag? Thanks @casualjim.  It appears this is a non-issue and can be closed.  \r\n\r\nBTW the docs on goswagger.io are a big help, thank you. Appreciate the design rationale.  Emphasizing this one point would have given me a much smoother start: you MUST generate into a package under $GOPATH/src or bad things happen (I was getting weird import pkg paths).   By the looks of it, the spots that use $GOPATH in go-swagger may need the 1.8 $HOME/go defaulting when GOPATH is empty.  ## Problem statement\r\nIs it possible to write own validation for custom types ? If it is, can someone give me example ? \r\n\r\n\r\n## Environment\r\nswagger version: 0.8.0\r\n\r\n For example. \r\nThere is bookstore, with info about books: author, title, price. And we want, that books from some author will not cost more the some price. So I want write function ValidateBookCustom() like\r\n```\r\nif book.author == \"Some author\" {\r\n    if book.price > 1000 {\r\n       return false\r\n   }\r\n    else return true\r\n}\r\n```\r\n\r\nAnd I want to use this function.  ## Problem statement\r\nJust like the untyped dynamic server example in go-swagger, is there an example for a dynamic client. Can a REST client be created at runtime by loading a swagger spec file, without going through a code generation and compilation? Thanks.\r\n\r\n Thanks for taking the time to ask. If I have the swagger spec file for an existing 3rd party REST service for their application, a dynamic client would allow me to load the swagger spec file and provide the ability to formulate requests and parse responses based on the loaded spec file. For e.g. there are REST client packages for go like go-resty that provide a nice interface to interact with a REST server, but go-resty doesn't comprehend swagger specs. Adding a bit more context, can I get the rest client functionality without first generating a client using go-swagger and then compiling it back into the code. Can this be done dynamically like the dynamic server example.  ## Problem statement\r\n\r\ni'm finding it hard to understand the examples.  i've looked at todo-list and the stream-server.  i'm still having to do a lot of guesswork to figure out how to write my own API handlers.  what i think would help are more examples of returns (where the API returns something nontrivial and app-specific), and more comments in the code.\r\n\r\nis it really necessary to have such an intricate mechanism for returning values from an API?\r\n\r\nadding to my confusion is the fact that i can't get the examples to build.  are the instructions broken, or am i doing something wrong?\r\n @casualjim, thanks for your response.  i tried the instructions there, too.  was it your intention that this project be an illustrative model of how to use go-swagger?  if so, my feedback is that the instructions in the \"building\" section do not produce the ./kvstored binary referred to in the \"running\" section.  i'd also suggest adding some examples of proper usage of both the client and server, beyond the \"--help\" output.  to a newbie it is still far from obvious how to interface with go-swagger.  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=h1) Report\n> Merging [#994](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/79283a6d0dbd2ac75581fabb3075e3626c376065?src=pr&el=desc) will **increase** coverage by `0.03%`.\n> The diff coverage is `100%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/994/graphs/tree.svg?width=650&height=150&src=pr&token=aQS1DepR8C)](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master     #994      +/-   ##\n==========================================\n+ Coverage   72.58%   72.61%   +0.03%     \n==========================================\n  Files          21       21              \n  Lines        5989     5989              \n==========================================\n+ Hits         4347     4349       +2     \n+ Misses       1185     1184       -1     \n+ Partials      457      456       -1\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [scan/schema.go](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=tree#diff-c2Nhbi9zY2hlbWEuZ28=) | `73.04% <100%> (+0.03%)` | :arrow_up: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `40% <0%> (-1.34%)` | :arrow_down: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `71.8% <0%> (+0.06%)` | :arrow_up: |\n| [scan/scanner.go](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=tree#diff-c2Nhbi9zY2FubmVyLmdv) | `75% <0%> (+0.58%)` | :arrow_up: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=footer). Last update [79283a6...c1beecc](https://codecov.io/gh/go-swagger/go-swagger/pull/994?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).  ## Nested Packages: Generating Spec File\r\n\r\n## Environment\r\nswagger version: 0.8.0\r\ngo version: 1.8\r\nOS: Mac OSX\r\n\r\nI am trying to find a way to generate a spec file with the `swagger generate spec -o ./swagger.json` command that will detect the nested packages in my project structure.\r\n\r\nI have `internal/` business logic that I want to keep separated but I have no way to generate the swagger spec file for those packages.\r\n\r\nStructure would look similar to this.\r\n\r\n```\r\n/\r\ncmd/\r\n|     main.go\r\ninternal/\r\n\u2502   blah/\r\n\u2502  \u2502   *.go\r\n\u2502   blahblah/\r\n\u2502  \u2502   *.go\r\n\u2502   blahblahblah/\r\n\u2502  \u2502   *.go\r\n<root files...>\r\n```\r\n\r\nIs there a way to do something similar to the go tools ie. `go test ./...`? I\r\n @casualjim so if I have a blank `main.go` file that imports those internal packages it will generate that spec file? Cheers! @casualjim thank you so much   ## Problem statement\r\n\r\nI want to create operation with string parameter in body. Goswagger fails while generating with runtime error. But, if i change  body to query, it works.\r\nHow can I send my parameter in body with type string?\r\n## Swagger specification\r\nIt falls with panic: runtime error: invalid memory address or nil pointer dereference\r\n```\r\n    post:\r\n      description: post func\r\n      operationId: postfunc\r\n      parameters:\r\n      - name: myparam\r\n        in: body\r\n        type: string\r\n```\r\nAnd it works \r\n```\r\n    post:\r\n      description: post func\r\n      operationId: postfunc\r\n      parameters:\r\n      - name: myparam\r\n        in: query\r\n        type: string\r\n```\r\n## Steps to reproduce\r\nswagger generate server -A server-swagger -f ./swagger.yml\r\n## Environment\r\nswagger version: 0.8.0 \r\nOS:   Ubuntu 14.04\r\n ```\r\n    post:\r\n      description: post func\r\n      operationId: postfunc\r\n      schema:\r\n        parameters:\r\n        - name: myparam\r\n          in: body\r\n          type: string\r\n```\r\nCan you try adding the `schema:`?\r\nhttp://swagger.io/specification/#fixed-fields-45 Thanks, I fixed problem with schema\r\n```\r\npost:\r\n      description: post func\r\n      operationId: postfunc\r\n      parameters:\r\n      - name: myparam\r\n        in: body\r\n        required: true\r\n        schema:\r\n          type: string\r\n```\r\n\r\nBut, I think Goswagger should not fail with panic, while generating. It must be some error message about wrong parameters, not runtime error. I agree, better the error handling is always beneficial.\r\n  ## Problem statement\r\nSpec supports description on responses\r\n\r\n## Swagger specification\r\nSPEC 2.0\r\n\r\n## Steps to reproduce\r\n```go\r\n// ListUsers swagger:route GET /user user listUsers\r\n//\r\n// List all the users\r\n//\r\n// Schemes: https\r\n// Produces: application/json\r\n// Responses:\r\n//    200: listResponse\r\n//    401: response\r\n//    403:\r\n//        description: Unauthorized\r\n```\r\n\r\nExpected JSON:\r\n```json\r\n\"/user\": {\r\n      \"get\": {\r\n        \"description\": \"List all the users\",\r\n        \"schemes\": [\r\n          \"https\"\r\n        ],\r\n        \"tags\": [\r\n          \"user\"\r\n        ],\r\n        \"operationId\": \"listUsers\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"$ref\": \"#/responses/listResponse\"\r\n          },\r\n          \"401\": {\r\n            \"$ref\": \"#/responses/response\"\r\n          },\r\n          \"403\": {\r\n\t\t\t\"description\": \"Unauthorized\"\r\n\t\t  }\r\n        }\r\n      }\r\n    }\r\n```\r\n\r\n![swagger ui](https://cloud.githubusercontent.com/assets/6072255/24545355/2676e7de-1607-11e7-9ee5-71371987b5d5.png)\r\n\r\nCurrently there is no support for a description tag on response.\r\n\r\nIs there any other way to enter a description ?\r\nIf I set a text then it will set is as a ref to a model, which does no exists.\r\n\r\n## Environment\r\nswagger version: 3.0.3\r\ngo version: 1.8\r\nOS:   Windows 10\r\n Hi,\r\n\r\nI can't reopen, but that is not the case =)\r\n\r\n```\r\n// GetUsername swagger:route GET /profile/username user getUsername\r\n//\r\n// Get the home page data.\r\n//\r\n// Responses:\r\n//        200:\r\n//        417: description: StatusExpectationFailed\r\n```\r\n\r\nGenerates\r\n```\r\n\"/profile/username\": {\r\n      \"get\": {\r\n        \"tags\": [\r\n          \"user\"\r\n        ],\r\n        \"summary\": \"Get the home page data.\",\r\n        \"operationId\": \"getUsername\",\r\n        \"responses\": {\r\n          \"200\": {},\r\n          \"417\": {\r\n            \"$ref\": \"#/responses/\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n```\r\ngo version: 1.8\r\nOS: Windows 10 Can confirm this.\r\nIt is not possible to set a response description without body. Any progress on this? It seems like there is no way to notate a 204 (no-content) response as described in the [swagger 2.0 spec](https://swagger.io/docs/specification/2-0/describing-responses/) We tried to work around this by sending a body with the 204, but the go std http lib will not let you do that (`Failed to write response: http: request method or response status code does not allow body`). So there really needs to be a way to specify in the swagger doc that a 204 response has no body.\r\n\r\nThe following produce an invalid spec:\r\n\r\n| Spec                    | Error\r\n| ------------------------| --------------------------------- | \r\n| `204: `                 | `description in body is required` |\r\n| `204: description: foo` | `object has no key \"\"`            |\r\n  ## Problem statement\r\n\r\nthe todo-list example should have its own instructions.  there is a README.md in the stream-server example, but it is not clear that it is supposed to apply to this example as well.  (and i could not get that example to work either.)\r\n\r\nreally it'd be nice to have a simple makefile that has targets for build, test, and clean.\r\n\r\nthis would be useful for doing CI on the examples as well, if you're doing that.\r\n\r\n I actually had the same thoughts regarding a Makefile. I had started on one based on one I use across projects that supports running locally as well as performing all the tasks within a Docker container. \r\n\r\n@casualjim Would you be interested in having such a Makefile?\r\n  Following swagger definition\r\nhttps://gist.github.com/anopheles/cff863e0d783eba2118e2429b095c3c4\r\n\r\nwhen run with `swagger generate server ...` and finally compile the code, I get following error message:\r\n\r\nrestapi/operations/post_xxx_add.go:61: undefined: ParametersTest\r\n\r\nWhy is the ParameterTest object not created? The specified swagger definition should be valid as per http://editor.swagger.io/. I ran into this bug as well. Any idea where in the code to look? If I could get an indication on where in the code base to start looking, I'd be happy to help debug it.\r\n\r\nedit: it seems to only affect generation of post/put. E.g. this with nested properties but using GET works: https://gist.github.com/kbj/d6077e4a4cfdf46bc7b810eba94276e9 @casualjim worked perfectly, thanks!  ## Problem statement\r\n\r\nThe Node version of swagger also links to 'swagger', causing the brew install go-swagger to not correctly install the commandline\r\n\r\n## Swagger specification\r\n\r\n## Steps to reproduce\r\n\r\n## Environment\r\nswagger version: 0.80\r\nOS:   OSX Sierra\r\n  ## Problem statement\r\nGenerated client or server models have incorrect JSON tags of fields.\r\nGenerator uses **x-go-name** field to generate JSON tag instead of JSON field name.\r\nI have following model to generate spec\r\n\r\n```\r\n// User - user model\r\n// swagger:model\r\ntype User struct {\r\n\tID        string `json:\"id\"`\r\n\tFirstName string `json:\"first_name\"`\r\n\tLastName  string `json:\"last_name\"`\r\n\r\n\t// User type\r\n\t// min: 1\r\n\t// max: 5\r\n\tType int `json:\"user_type\"`\r\n}\r\n```\r\n\r\nThen after swagger spec has been generated I generated client (or server) using that spec.\r\nAs result I got incorrect JSON tags of fields in model.\r\n\r\n```\r\n// User User - user model\r\n// swagger:model User\r\ntype User struct {\r\n\r\n\t// first name\r\n\tFirstName string `json:\"FirstName,omitempty\"`\r\n\r\n\t// ID\r\n\tID string `json:\"ID,omitempty\"`\r\n\r\n\t// last name\r\n\tLastName string `json:\"LastName,omitempty\"`\r\n\r\n\t// User type\r\n\t// Maximum: 5\r\n\t// Minimum: 1\r\n\tType int64 `json:\"Type,omitempty\"`\r\n}\r\n```\r\n\r\nI got \"json:\"**LastName**,...\" instead of \"json:\"**last_name**,...\" for LastName field\r\nor for example \"json:\"**Type**,...\" instead of \"json:\"**user_type**,...\" for Type field,\r\nand so on for other fields.\r\n\r\nAnd also I got incorrect validation code for Type:\r\n\r\n```\r\nfunc (m *User) validateType(formats strfmt.Registry) error {\r\n\r\n\tif swag.IsZero(m.UserType) { // not required\r\n\t\treturn nil\r\n\t}\r\n\r\n\tif err := validate.MinimumInt(\"user_type\", \"body\", int64(m.UserType), 1, false); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tif err := validate.MaximumInt(\"user_type\", \"body\", int64(m.UserType), 5, false); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n```\r\n\r\nI got \"if swag.IsZero(m.**UserType**)\" instead of \"if swag.IsZero(m.**Type**)\"\r\n\r\n## Steps to reproduce\r\n\r\n1. Create model such as\r\n```\r\n// User - user model\r\n// swagger:model\r\ntype User struct {\r\n\tID        string `json:\"id\"`\r\n\tFirstName string `json:\"first_name\"`\r\n\tLastName  string `json:\"last_name\"`\r\n\r\n\t// User type\r\n\t// min: 1\r\n\t// max: 5\r\n\tType int `json:\"user_type\"`\r\n}\r\n```\r\n\r\n2. Run spec generating\r\nswagger generate spec -m -b ./<path_to_model> > swagger.json\r\n\r\n3. Run client generating \r\nswagger generate client -f ./swagger.json -t ./output\r\n\r\n## Environment\r\nswagger version: 0.7.4, 0.8.0  \r\ngo version: 1.8.0  \r\nOS:  Ubuntu Linux 16.10, Windows 10 x64\r\n And also I found that some structures such as\r\n\r\n```\r\n/*DataItems0 data items0\r\nswagger:model DataItems0\r\n*/\r\ntype DataItems0 struct {\r\n\tmodels.Media\r\n\r\n\t// distance\r\n\tDistance float64 `json:\"distance,omitempty\"`\r\n}\r\n```\r\n\r\nin code generated with wrong call\r\n\r\n```\r\n// UnmarshalJSON unmarshals this object from a JSON structure\r\nfunc (o *DataItems0) UnmarshalJSON(raw []byte) error {\r\n\r\n\tvar aO0 models.Media\r\n\tif err := swag.ReadJSON(raw, &aO0); err != nil {\r\n\t\treturn err\r\n\t}\r\n\to.models.Media = aO0 // <- must be \to.Media = aO0, not o.models.Media = aO0\r\n\r\n\treturn nil\r\n}\r\n```\r\n\r\nMust be **o.Media** = aO0, not **o.models.Media** = aO0 Described in new issue https://github.com/go-swagger/go-swagger/issues/982 I've tried version from master.\r\nTags were generated correctly.\r\nBut now field names of model generated ignoring x-go-name.\r\ne.g. For \"x-go-name: Type\" tool generates UserType instead of Type.\r\nIs it correct?  ## Problem statement\r\n\r\nIn a few cases we use string type aliases to represent enums; e.g. our roles including \"viewer\", \"admin\" and others; and occasionally we use one of those aliases as the key of a map in another object. Unfortunately we are having trouble getting these \"alias-keyed\" maps reflected in the swagger.json generated by `swagger generate spec`.\r\n\r\nIn the following example we demonstrate our usage of go-swagger with our route that allows admins to set the role and access of other users by providing the username and an \"AccessMap\" in a PUT request. The AccessMap is a `map[Role][]int`, where Role is defined by `type Role string`. Unfortunately when we generate the json with the usage below, the AccessMap is not properly described with only a description included (in Swagger specification below). \r\n\r\nIt's possible that we are having a related issue with `swagger:strfmt`. Despite including the comment tag above the `type Role string` line there is nothing in our `\"definitions\"` object referring to Role.\r\n\r\nPlease let us know if we can provide any more detail, or if our usage is incorrect or our expectations are out of sync with what's provided. Thanks for you time.\r\n-Jordan\r\n\r\n```\r\n// swagger:parameters PutAccessControls\r\ntype AccessParams struct {\r\n\t// Required: true\r\n\t// In: body\r\n\tAccess []AccessControl `json:\"access\"`\r\n}\r\n\r\n// AccessControl objects are provided on the PUT /access route for one or more objects\r\n// to update a user's level of access \r\n//\r\n// swagger:model AccessControl\r\ntype AccessControl struct {\r\n\tUsername\tstring\t\t`json:\"username\"`\r\n\tObjectAccess\tAccessMap\t`json:\"objects,omitempty\"`\r\n}\r\n\r\n// AccessMap maps Roles to an array of core object ids\r\n//\r\n// swagger:model AccessMap\r\ntype AccessMap map[Role][]int\r\n\r\n// Role represents the user's role\r\n//\r\n// swagger:strfmt role\r\ntype Role string\r\n\r\nconst (\r\n\tUnknownRole Role = \"unknown\"\r\n\tViewerRole       = \"viewer\"\r\n\tEntryRole        = \"entry\"\r\n\tAdminRole        = \"admin\"\r\n)\r\n```\r\n\r\n## Swagger specification\r\n```\r\n  \"paths\": {\r\n    \"/access\": {\r\n      \"put\": {\r\n        \"description\": \"Update access for a user\",\r\n        \"summary\": \"Update Access Control\",\r\n        \"operationId\": \"PutAccessControls\",\r\n\t...\r\n        \"parameters\": [\r\n          {\r\n            \"x-go-name\": \"Access\",\r\n            \"name\": \"access\",\r\n            \"in\": \"body\",\r\n            \"required\": true,\r\n            \"schema\": {\r\n              \"type\": \"array\",\r\n              \"items\": {\r\n                \"$ref\": \"#/definitions/AccessControl\"\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        \"responses\": {...}\r\n      }\r\n    },\r\n ...\r\n\"definitions\": {\r\n    \"AccessControl\": {\r\n      \"description\": \"AccessControl objects are provided on the PUT /access route for one or more objects to update a user's level of access\",\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"objects\": {\r\n          \"x-go-name\": \"ObjectAccess\",\r\n          \"$ref\": \"#/definitions/AccessMap\"\r\n        },\r\n        \"username\": {\r\n          \"type\": \"string\",\r\n          \"x-go-name\": \"Username\"\r\n        }\r\n      }\r\n    },\r\n    \"AccessMap\": {\r\n      \"description\": \"AccessMap maps Roles to an array of core object ids\",\r\n    },\r\n```\r\nNotably, if we change the definition of AccessMap to `map[string][]int` the following is generated in swagger.json:\r\n```\r\n    \"AccessMap\": {\r\n      \"description\": \"AccessMap maps Roles to an array of core object ids\",\r\n      \"type\": \"object\",\r\n      \"additionalProperties\": {\r\n        \"type\": \"array\",\r\n        \"items\": {\r\n          \"type\": \"integer\",\r\n          \"format\": \"int64\"\r\n        }\r\n      },\r\n```\r\n\r\n## Environment\r\nswagger version: 2.0\r\ngo version: 1.7.3 darwin/amd64\r\nOS:  El Capitan 10.11.6 \r\n  ## Integrating UI Into An Existing API\r\n\r\nIs there anyway to easily integrate documentation and a client without having to auto generate a server API? \r\n\r\nI don't want my API server to be auto generated for me when I already have a complex service finished. Another reason I want this capability is because I have to support many transports (gRPC & http) in a microservices architecture. \r\n\r\nI just want to have an easy way to document the service and supply a frontend for other to interact with.\r\n\r\nThanks! @casualjim that's exactly how we are going to have to do it. Thank you for your help.  ## Problem statement\r\nWhen generating a client, the pascal name applied to the packages under client/ are not consistent.\r\n\r\nFor one group of operations, I have the tag `DNS`, and for another I have a tag of `SLB`. When the package name is created, the `DNS` tag becomes package `dns`. But for `SLB` the package becomes `s_l_b`.\r\n\r\nI've tried looking through the debug output but not sure why one has underscores and the other does not.\r\nWhat are the rules associated `{{ pascalize .NAME }}`\r\n\r\n## Environment\r\nswagger version: master  \r\ngo version: 1.8.x  \r\nOS:   debian (via container golang:1.8)\r\n\r\n Is there any way from a `go-swagger` perspective to be able to override, influence, or customize it?\r\n\r\nif the value was all lower case then it would just stay `slb` and not be separated by `_` correct? Thanks! I will tweak the tag to force the desired name in the near term.  ## Problem statement\r\nMy web app accepts json body instead of individual parameters, so I want to be able to submit a single json body. From the documentation it is not clear how to write comments for this purpose. I don't know how I should use swagger:model or swagger:parameter here. Can you provide me a sample commented code for this example please:-\r\n\r\n    type test struct{\r\n        test1 string `json:\"test1\"`\r\n        test2 string `json:\"test2\"`\r\n    }\r\n\r\n  The interface `github.com/go-openapi/runtime.ClientRequest` indicates\r\nthat `SetTimeout` can return an error. Adds a check in the client\r\nparameter template for the error, and returns if not nil.\r\n\r\nIdentified by linter [errcheck](https://github.com/kisielk/errcheck) of generated code.\r\n\r\nSigned-off-by: Kenny Jones <kenjones@cisco.com> # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/969?src=pr&el=h1) Report\n> Merging [#969](https://codecov.io/gh/go-swagger/go-swagger/pull/969?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/bb1340f9a9e359e6e435b5fda5fc2f769222407c?src=pr&el=desc) will **decrease** coverage by `0.01%`.\n> The diff coverage is `n/a`.\n\n\n```diff\n@@            Coverage Diff            @@\n##           master    #969      +/-   ##\n=========================================\n- Coverage   72.61%   72.6%   -0.02%     \n=========================================\n  Files          21      21              \n  Lines        5986    5986              \n=========================================\n- Hits         4347    4346       -1     \n- Misses       1183    1184       +1     \n  Partials      456     456\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/969?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/compare/bb1340f9a9e359e6e435b5fda5fc2f769222407c...9978540db233ad6213fc6fc8191efa5247eded76?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <\u00f8> (\u00f8)` | :arrow_up: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/compare/bb1340f9a9e359e6e435b5fda5fc2f769222407c...9978540db233ad6213fc6fc8191efa5247eded76?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `40% <0%> (-1.34%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/969?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/969?src=pr&el=footer). Last update [bb1340f...9978540](https://codecov.io/gh/go-swagger/go-swagger/compare/bb1340f9a9e359e6e435b5fda5fc2f769222407c...9978540db233ad6213fc6fc8191efa5247eded76?src=pr&el=footer&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments). Looks like the tag `1.7.3` is no longer available at DockerHub, should I change it to `1.7.5` so that the circleci test will pass?  ## Problem statement\r\nWhen I'm trying to add a new item with the todo-list client from the examples section go breaks up:\r\n\r\npanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x20 pc=0x129d927]\r\n\r\ngoroutine 1 [running]:\r\ngithub.com/go-openapi/runtime/client.(*request).BuildHTTP(0xc420019500, 0x1395e99, 0x31, 0xc4201dc4e0, 0x0, 0x0, 0x0, 0x0, 0x110)\r\n        /Users/***/go/src/github.com/go-openapi/runtime/client/request.go:187 +0x857\r\ngithub.com/go-openapi/runtime/client.(*Runtime).Submit(0xc4203924e0, 0xc4200fc000, 0x0, 0x0, 0x0, 0x0)\r\n        /Users/***/go/src/github.com/go-openapi/runtime/client/runtime.go:241 +0x458\r\nexample.com/swagger2/client/todos.(*Client).AddOne(0xc4204d5f60, 0xc4201dc510, 0x0, 0x0, 0x0)\r\n        /Users/***/go/src/example.com/swagger2/client/todos/todos_client.go:45 +0x2fa\r\nmain.main()\r\n        /Users/***/go/src/example.com/swaggercimpl/client.go:34 +0x1f3\r\n\r\n## Swagger specification\r\nhttps://raw.githubusercontent.com/go-swagger/go-swagger/master/examples/todo-list/swagger.yml\r\n\r\n## Steps to reproduce\r\n```\r\nfunc main() {\r\n\t// create the transport\r\n\ttransport := httptransport.New(\"127.0.0.1\", \"\", nil)\r\n\r\n\t// create the API client, with the transport\r\n\tclient := apiclient.New(transport, strfmt.Default)\r\n\r\n\tdescription := \"TEST\"\r\n\tvar item *models.Item\r\n\titem = new(models.Item)\r\n\titem.Description = &description\r\n\r\n\tparams := todos.NewAddOneParams()\r\n\r\n\tparams.Body = item\r\n\r\n\t// make the request to get all items\r\n\tresp, err := client.Todos.AddOne(params)\r\n\tif err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n}\r\n```\r\n## Environment\r\nswagger version: dev/master\r\ngo version: go version go1.8 darwin/amd64\r\nOS:   OS X - 10.11.6\r\n I have same problem. I tried to write client to todo-list from example, but I get same error. \r\n```package main\r\n\r\nimport (\r\n\t\"log\"\r\n\t\"os\"\r\n\r\n\t\"github.com/go-openapi/strfmt\"\r\n\r\n\thttptransport \"github.com/go-openapi/runtime/client\"\r\n\tapiclient \"github.com/go-swagger/go-swagger/examples/todo-list/client\"\r\n\t\"github.com/go-swagger/go-swagger/examples/todo-list/client/todos\"\r\n)\r\n\r\nfunc main() {\r\n\r\n\t// create the API client\r\n\tclient := apiclient.New(httptransport.New(\"\", \"\", nil), strfmt.Default)\r\n\r\n\t// make the authenticated request to get all items\r\n\tapiKeyHeaderAuth := httptransport.APIKeyAuth(\"X-API-TOKEN\", \"header\", os.Getenv(\"API_KEY\"))\r\n\t_, err := client.Todos.AddOne(&todos.AddOneParams{}, apiKeyHeaderAuth)\r\n\tlog.Fatal(err)\r\n}\r\n```\r\n\r\nCan someone explain, how to fix this problem?  ## Problem statement\r\n\r\nIs it possible to temporarily disable OAUTH2? Currently I'm getting a\r\n\r\n```\r\n{\r\n\"code\": 401,\r\n\"message\": \"unauthenticated for invalid credentials\"\r\n}\r\n```\r\n\r\nBut I would like to implement OAUTH later.  I'm getting the following error when I run `swagger generate client`. \r\n\r\n```\r\n2017/03/20 00:03:22 building a plan for generation\r\n2017/03/20 00:03:22 planning definitions\r\n2017/03/20 00:03:22 planning operations\r\n2017/03/20 00:03:22 grouping operations into packages\r\n2017/03/20 00:03:22 planning meta data and facades\r\n2017/03/20 00:03:22 rendering 1 templates for application TabbDrink\r\n2017/03/20 00:03:22 name field TabbDrink\r\n2017/03/20 00:03:22 package field client\r\n2017/03/20 00:03:22 creating \"tabb_drink_client.go\" in \"client\" as facade\r\nGeneration completed!\r\n\r\n\r\nFor this generation to compile you need to have some packages in your GOPATH:\r\n\r\n  * github.com/go-openapi/runtime\r\n  * golang.org/x/net/context\r\n  * golang.org/x/net/context/ctxhttp\r\n\r\nYou can get these now with: go get -u -f ./...\r\n```\r\n\r\nWhen I run `go get -u -f ./...` it takes a while, no errors. Then I run the first command again and get the same error. \r\n\r\n## Swagger specification\r\n```\r\nconsumes:\r\n- application/tabbdrink.com.v1+json\r\ndefinitions: {}\r\ninfo:\r\n  description: TabbDrink API\r\n  title: TabbDrink API\r\n  version: 0.0.1\r\npaths: {}\r\nproduces:\r\n- application/tabbdrink.com.v1+json\r\nschemes:\r\n- http\r\nswagger: \"2.0\"\r\n```\r\n\r\n## Steps to reproduce\r\n1. Generate a swagger spec: \r\n```\r\nswagger init spec \\\r\n--title \"TabbDrink API\" \\\r\n--description \"TabbDrink API\" \\\r\n--version 0.0.1 \\\r\n--scheme http \\\r\n--consumes application/tabbdrink.com.v1+json \\\r\n--produces application/tabbdrink.com.v1+json\r\n```\r\n\r\n2. Run `swagger generate client`. \r\n\r\n\r\n## Environment\r\nswagger version: 0.8.0\r\ngo version: 1.8 \r\nOS:  osx\r\n  ## Problem statement\r\n\r\nWe can define that some property has extended string format ( for example ipv4). Then go-swagger generate this property with special type ( for ipv4 it is *strfmt.IPv4). But generated code don`t do validation for this type.\r\n## Example:\r\nswagger.yaml \r\n```\r\ndefinitions:\r\n  ethernet:\r\n    type: object\r\n    required:\r\n      - ip\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int32\r\n        readOnly: true\r\n      ip:\r\n        type: string\r\n        format: ipv4\r\n```\r\nWe get file ethernet.go with code \r\n```\r\n...\r\ntype Ethernet struct {\r\n\t// id\r\n\t// Read Only: true\r\n\tID int32 `json:\"id,omitempty\"`\r\n\r\n\t// ip\r\n\t// Required: true\r\n\tIP *strfmt.IPv4 `json:\"ip\"`\r\n}\r\n...\r\nfunc (m *Ethernet) validateIP(formats strfmt.Registry) error {\r\n\r\n\tif err := validate.Required(\"ip\", \"body\", m.IP); err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn nil\r\n}\r\n```\r\nBut why  it is not generated like this : \r\n```\r\nfunc (m *Ethernet) validateIP(formats strfmt.Registry) error {\r\n\r\n\tif err := validate.Required(\"ip\", \"body\", m.IP); err != nil {\r\n\t\treturn err\r\n\t}\r\n// check that we get string in right format\r\n\tif err := validate.FormatOf(\"ip\", \"body\", \"ipv4\", m.IP.String(), formats); err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn nil\r\n}\r\n```\r\n\r\n## Environment\r\nswagger version: 0.8.0  \r\n\r\n Did you ever work out what was going wrong here?  Hi, \r\n\r\nI'm using go-swagger to generate my Swagger docs from code, and I came across a problem with a given parameter.\r\nWhen I annotate a given struct that has a map[KeyType]OtherKeyType with `swagger:parameters`, it returns `items doesn't support maps`. I can tell the current version may not support `map`s  in the parameter delcaration, but I'm writing to (i) know if this feature may be inline for release (ii) know if there is any workaround for declaring `map`s in parameter structs.\r\n \r\nThanks in advance and congrats for the great work,\r\nRenato Vieira\r\n\r\ngo-swagger version: 0.8.0  \r\ngo version:1.7.4  \r\nOS: Ubuntu 16.04 \r\n Can you provide examples  ( Previously I have filed issues under @robbert229 but work policy for open source contributions is finally starting to take shape so I now am required to use a corporate account. )\r\n## Problem statement\r\nWhen a `definition` has a property N, if N is a number, and is not required its' generated model has the structflag `omitempty` for N. This means that when N has been set to 0 the generated JSON omits N, despite it being validly set to 0. I would still like to allow this variable to be unset, by setting it to null for example. This will also apply for returning objects that return false and so on.\r\n\r\n\r\n> The \"omitempty\" option specifies that the field should be omitted from the encoding if the field has an  empty value, defined as false, 0, a nil pointer, a nil interface value, and any empty array, slice, map, or  string.\r\n\r\nFrom - https://golang.org/pkg/encoding/json/#Marshal\r\n\r\nA workaround for this is to use `x-nullable` on my properties, but I feel like this shouldn't be required to be able to send a property whose value happens to be the default value for that type. I also understand why this is done, and it does make sense. \r\n\r\n## Swagger specification\r\nhttps://github.com/JohnRowleySEL/go-swagger-number-ommited-bug/blob/master/swagger.yaml\r\n## Steps to reproduce\r\n1. Generate server with spec -> https://github.com/JohnRowleySEL/go-swagger-number-ommited-bug/blob/master/swagger.yaml\r\n2. Attempt to send error with a code of 0\r\n\r\n\r\nThe error is ommited from the response because of `omitempty` as a struct tag https://github.com/JohnRowleySEL/go-swagger-number-ommited-bug/blob/master/models/error.go#L17\r\n\r\n## Environment\r\nswagger version: tip\r\ngo version: 1.8 linux/amd64\r\nOS:   \r\n That is what I am currently doing, but for those new to go-swagger it is not apparant that there are edge cases where your model won't properly serialize if you don't use `x-nullable` to annotate parameters.\r\n\r\n( this issue is partially filed so that people running into the issue where your model isn't showing up correctly on the client can find somthing useful )  Please see my swagger Here:\r\nhttps://gist.github.com/dimitertodorov/c4b5e4e7020c97f8ab34e2460403688e\r\nTrying to create client with:\r\n```\r\nswagger generate client -f sw.json -A nmdb_client\r\n```\r\n**Issue**\r\nCircular dependencies seem to be freezing swagger\r\nThe JSON passes validation against 2.0 schema.\r\nThis problem also occurs with swagger-ui.\r\n\r\nIf I remove the circular dependencies, it loads fine.\r\n## Environment\r\nswagger version: 2.0\r\ngo version: 1.8 \r\nOS:   OSX\r\n  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/956?src=pr&el=h1) Report\n> Merging [#956](https://codecov.io/gh/go-swagger/go-swagger/pull/956?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/c7162054cee275248662e120d0dca136ef225ce5?src=pr&el=desc) will **not change** coverage.\n> The diff coverage is `n/a`.\n\n\n```diff\n@@           Coverage Diff           @@\n##           master     #956   +/-   ##\n=======================================\n  Coverage   72.67%   72.67%           \n=======================================\n  Files          21       21           \n  Lines        5988     5988           \n=======================================\n  Hits         4352     4352           \n  Misses       1179     1179           \n  Partials      457      457\n```\n\n\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/956?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/956?src=pr&el=footer). Last update [c716205...bbd1efd](https://codecov.io/gh/go-swagger/go-swagger/compare/c7162054cee275248662e120d0dca136ef225ce5...bbd1efd0cc791473d772a72c6fdfc62e1329a504?src=pr&el=footer&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).  Is it possible to read the request body in either the setupMiddleware or setupGlobalMiddleware functions? \r\n\r\nWe are trying to validate that a request body contains correct info and we wanted to check it in the middleware.  When we stick the following into the handler function of either setup middleware functions we always get an empty body. The body is always empty even though the POST request does have a body.\r\n\r\n```\r\nvar val []byte\r\ni, err := r.Body.Read(val)\r\nr.Body.Close()\r\nif err != nil{\r\n\tlog.Print(err)\r\n} else {\r\n\tlog.Println(i)\r\n\tlog.Println(string(val))\r\n}\r\n``` Thanks for the info. We were able to get this working.  ## Problem statement\r\n\r\nI have a question: how can I get enums for a type to show up in a swagger spec? \r\n\r\n## Swagger specification\r\n\r\nSwagger specification is generated from enums.go https://github.com/tanel/swagger-enums-question/blob/master/enums.go\r\n\r\n## Steps to reproduce\r\n\r\nswagger generate spec -o swagger.json\r\n\r\nThe generated spec https://github.com/tanel/swagger-enums-question/blob/master/swagger.json has no enum values listed for ItemType. What I want is https://github.com/tanel/swagger-enums-question/blob/master/want_swagger.json\r\n\r\n## Environment\r\nswagger version: https://github.com/go-swagger/go-swagger master branch\r\ngo version: 1.8\r\nOS:   osx\r\n  this is fix for issue: #949 \r\n\r\n- Security in swagger:meta - nothing has been changed there except I added this to meta\r\n- SecurityDefinitions in swagger:meta new parser for securityDefinitions accepts following, documentation update required\r\n```\r\nSecureDefinitions:\r\n- api_key:\r\n    type: apiKey\r\n    name: KEY\r\n    in: header\r\n```\r\nNow generates the following:\r\n```\r\n  \"securityDefinitions\": {\r\n    \"api_key\": {\r\n      \"type\": \"apiKey\",\r\n      \"name\": \"UHUB_KEY\",\r\n      \"in\": \"header\"\r\n    }\r\n  },\r\n``` will do tomorrow # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/950?src=pr&el=h1) Report\n> Merging [#950](https://codecov.io/gh/go-swagger/go-swagger/pull/950?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/d9228b3c65fc72dbac3cd462e6bb57ad82f90fc1?src=pr&el=desc) will **increase** coverage by `0.09%`.\n> The diff coverage is `85.71%`.\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #950      +/-   ##\n==========================================\n+ Coverage   72.56%   72.66%   +0.09%     \n==========================================\n  Files          21       21              \n  Lines        5909     5988      +79     \n==========================================\n+ Hits         4288     4351      +63     \n- Misses       1172     1180       +8     \n- Partials      449      457       +8\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/950?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [scan/responses.go](https://codecov.io/gh/go-swagger/go-swagger/compare/d9228b3c65fc72dbac3cd462e6bb57ad82f90fc1...b1ace63910c800c69a469c3b8268fef4b45fd4f8?src=pr&el=tree#diff-c2Nhbi9yZXNwb25zZXMuZ28=) | `80.6% <100%> (\u00f8)` | :white_check_mark: |\n| [scan/routes.go](https://codecov.io/gh/go-swagger/go-swagger/compare/d9228b3c65fc72dbac3cd462e6bb57ad82f90fc1...b1ace63910c800c69a469c3b8268fef4b45fd4f8?src=pr&el=tree#diff-c2Nhbi9yb3V0ZXMuZ28=) | `95.45% <100%> (\u00f8)` | :white_check_mark: |\n| [scan/meta.go](https://codecov.io/gh/go-swagger/go-swagger/compare/d9228b3c65fc72dbac3cd462e6bb57ad82f90fc1...b1ace63910c800c69a469c3b8268fef4b45fd4f8?src=pr&el=tree#diff-c2Nhbi9tZXRhLmdv) | `82.88% <100%> (+1.4%)` | :white_check_mark: |\n| [scan/path.go](https://codecov.io/gh/go-swagger/go-swagger/compare/d9228b3c65fc72dbac3cd462e6bb57ad82f90fc1...b1ace63910c800c69a469c3b8268fef4b45fd4f8?src=pr&el=tree#diff-c2Nhbi9wYXRoLmdv) | `46.98% <100%> (\u00f8)` | :white_check_mark: |\n| [scan/validators.go](https://codecov.io/gh/go-swagger/go-swagger/compare/d9228b3c65fc72dbac3cd462e6bb57ad82f90fc1...b1ace63910c800c69a469c3b8268fef4b45fd4f8?src=pr&el=tree#diff-c2Nhbi92YWxpZGF0b3JzLmdv) | `78.84% <79.22%> (+0.02%)` | :white_check_mark: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/compare/d9228b3c65fc72dbac3cd462e6bb57ad82f90fc1...b1ace63910c800c69a469c3b8268fef4b45fd4f8?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `40% <0%> (-1.34%)` | :x: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/950?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/950?src=pr&el=footer). Last update [d9228b3...b1ace63](https://codecov.io/gh/go-swagger/go-swagger/compare/d9228b3c65fc72dbac3cd462e6bb57ad82f90fc1...b1ace63910c800c69a469c3b8268fef4b45fd4f8?el=footer&src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).  ## Problem statement\r\nAn API that provides access to a complex data structure that is defined and governed by a subsystem should not have to spec the same data model to be marshalled, as this would require a deep copy of the data structure from the subsystem to the API layer's model universe.\r\n\r\nHow do others deal with this problem?\r\n\r\nIn more detail: a subsystem that builds a complex hierarchical data structure to support its own requirements for efficiency, access, and serialization does not want the types of the API data model to be injected into its namespace. Furthermore, the subsystem can exist in many different contexts beyond the API, which is another reason it would not want to become dependent on any API types.\r\n\r\nA new requirement is proposed that wants API access to that complex data structure, and we decide to use go-swagger for that implementation. It is a pure 'read' requirement, so no need for parameter validation by the API, just the ability to gain an XML or JSON form of the data structure by a client. If we define a data model in the swagger specification we end up having to do a deep copy of that data structure from subsystem to API if we want to avoid type injection.\r\n\r\nHow do you use the swagger spec to define a raw JSON or XML transfer, defined by the subsystem's types?\r\n \r\n @Ravenwater we have the same issue. Our organization decided to keep the API and subsystem layers separate, and to perform deep copies between them. The runtime performance costs are acceptable to us, and worth it to keep API-layer dependencies out of our core library. If someone can think of a better solution we would love to know!\r\n\r\nW.R.T. your second question, I'm not sure I fully understand it.\r\n\r\nIf your question is \"How do I write arbitrary response bodies from `go-swagger` generated server code?\" (e.g. from subsystem structs that you have marshaled) then you may want to write your own [middleware.Responder](https://github.com/go-openapi/runtime/blob/master/middleware/context.go#L56-L60), which gives you direct access to the underlying `http.ResponseWriter`. (At this point, though, I wonder: why use go-swagger instead of a lighter-weight framework?)\r\n\r\nIf your question is \"how can I generate a swagger spec from my subsystem structs?\", then you should check out the `swagger generate spec` CLI command.\r\n\r\nIf I've missed the meaning of your question, my apologies, and if you can provide a more concrete example of your use case I'll try to help more!\r\n  Hello,\r\n\r\nSo far mailru/easyjson could not be used on Google App Engine due to the usage of unsafe package. Good news is that they have introduced build flags to workaround this issue:\r\n\r\nhttps://github.com/mailru/easyjson/issues/34\r\n\r\nWould you consider upgrading to latest version of easyjson? So that go-swagger itself becomes fully compatible with App Engine?\r\n\r\nActually to be honest, it seems App Engine does not play nice with vendoring and just ignores any vendor folder, and go get latest of each dependency instead (known issue). Therefore upgrading your vendor folder may not be necessary\r\n  ## Problem statement\r\nI have an endpoint that returns a file and should be using the \"application/octet-stream\" producer. The specification is valid according to go-swagger, and the generated code compile fine. When I attempt to use the endpoint it panics `ByteStreamProducer can only deal with io.Reader`.\r\n\r\nThere is a high probability that this is due to human error ( on my part ), but this issue might help others encountering the same issue that I am later on.\r\n\r\nEDIT: After some digging I have discovered that `runtime.File` doesn't implement `io.Reader`, which `ByteStreamProducer` requires.\r\n\r\n## Swagger specification\r\nhttps://github.com/robbert229/swagger-download-file-bug/blob/master/swagger.yaml\r\n\r\n## Steps to reproduce\r\n1. clone the repository && run the application\r\n3. open up swagger ui and load the locally hosted spec.\r\n4. upload a file ( via POST /file )\r\n5. attempt to download said file ( via GET /file )\r\n\r\nhttps://github.com/robbert229/swagger-download-file-bug\r\n\r\n## Environment\r\nswagger version: Master\r\ngo version: go1.7.5 linux/amd64\r\nOS:   linux ( archlinux )\r\n Making `runtime.File` implement `io.Reader` with the following implementation solves my issue.\r\n\r\n```\r\n// in github.com/go-openapi/runtime/interfaces.go\r\n\r\n// File represents an uploaded file.\r\ntype File struct {\r\n\tData   multipart.File\r\n\tHeader *multipart.FileHeader\r\n}\r\n\r\n// my addition\r\nfunc (f File) Read(p []byte) (n int, err error) {\r\n\treturn f.Data.Read(p)\r\n}\r\n```\r\n\r\nI think this issue might be outside the scope of go-swagger and in the scope of **go-openapi/runtime** Planning on it!  ## Problem statement & Steps to reproduce\r\n\r\nWhen generating a server with `swagger generate server -f swagger.json` within a directory in `$GOPATH`, the import paths in the generated files are all lower case even though the path contains a directory with capitalized letters (e.g. /go/src/github.com/FOO/bar).\r\n\r\nIs this something go recommend/enforces and therefore desired behavior?\r\n\r\n## Environment\r\nswagger-codegen: stable 2.2.1\r\nswagger version: 0.8.0  \r\ngo version: 1.8\r\n Ok, I might raise it with them if I get around to it. In the meantime I simply renamed our organization name (well, the URL) and the directory in the `$GOPATH`.  ## Problem statement\r\n\r\ngo-swagger can misidentify the $GOPATH/src folder in Windows. This manifests in a confusing `target must reside inside a location in the $GOPATH/src` error even though the path IS in $GOPATH/src.\r\n\r\nIt came up for me doing a 'generate server' command.\r\n\r\n`filepath.Abs` (at least, on this version of Windows) returns capital letters for path, for example: `C:\\dev\\src\\myproject`. However, the environmental variable GOPATH comes from user input. It may be an upper or lower case letter, eg:  `GOPATH = c:\\dev`. This causes go-swagger, in  `generator/support.go`, in `func baseImport`, line 157 `if strings.HasPrefix(p, pp) {` to fail this check, even though on windows these two strings are the same location.\r\n\r\n## Steps to reproduce\r\n\r\n1. Set gopath to `c:\\dev`\r\n2. Create a project in c:\\dev\\src called 'myproject'\r\n3. Use any swagger file.\r\n4. Install as a vendor library (e.g., with glide)\r\n5. Run with a relative path. \"go run go run .\\vendor\\github.com\\go-swagger\\go-swagger\\cmd\\swagger\\swagger.go generate server\"\r\n\r\n## Environment\r\nswagger version: 0.8.0  \r\ngo version: go1.7.4 windows/amd64\r\nOS:   Windows 10 Enterprise 64-bit, Intel Xeon E31245\r\n\r\n## Workaround\r\n\r\nSwap the GOPATH to an upper case drive letter in your environment variables. :-) Great to hear! Hopefully this issue can be a target for folks searching for the problem.\r\n\r\nedit: checking now.\r\n\r\nEdit2: Can confirm, fix on master seems to work. Thanks! :)  \u26a0\ufe0f I probably butchered this and missed a bunch of places \u26a0\ufe0f \r\n\r\nSo, I discovered swagger last night, and this project today.  I am starting a new project, and I'd like to try to do something with this type of declarative API structure swagger gives you.  This project is above and beyond any other go integration, and seems to make some solid choices on the code generation \ud83d\udcaf \r\n\r\nOne of the things I like to do for my personal projects is make them as quick to get something done as possible, so I usually end up using an ORM to streamline the workflow.  The snag I hit was with the generated models: Most of the ORMs utilize custom struct tags for hints on what to do.  I did not see any way in the documentation or code to add custom tags to a struct field.\r\n\r\nSo, I built it.  Tested it.  It works in my local dev env for the simple use case I've tried.\r\n\r\n\ud83d\udd0d  Didn't add it to additional properties, I'm not sure if that should be done or what.\r\n\ud83d\udd0d  Didn't add it to the other `json:` tag fields in the other templates.  Maybe it should be there in some cases too?\r\n\r\n\u26a0\ufe0f The current implementation does actually allow the user to create an invalid tag, as it just templates the entire thing as a string.  I could have used a different suffix for the extension name to prevent that. For example:\r\n\r\n```\r\nModel:\r\n   properties:\r\n      foo:\r\n         type: string\r\n         x-go-custom-tag-one: x,y,z\r\n         x-go-custom-tag-two: a,b,c\r\n```\r\n\r\nwould generate:\r\n\r\n```\r\ntype Model struct {\r\n   foo string `json:foo one:\"x,y,z\" two:\"a,b,c\"`\r\n}\r\n```\r\n\r\n\ud83e\udd14 Maybe I misunderstood this all along and I'm not using these models the appropriate way.  It was still fun diving into the codebase. \ud83d\udc4d  # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/939?src=pr&el=h1) Report\n> Merging [#939](https://codecov.io/gh/go-swagger/go-swagger/pull/939?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/54d23b6fa46c29ccb7e834154e2f0c0fba33f0d1?src=pr&el=desc) will **increase** coverage by `<.01%`.\n> The diff coverage is `100%`.\n\n\n```diff\n@@            Coverage Diff             @@\n##           master     #939      +/-   ##\n==========================================\n+ Coverage    72.6%   72.61%   +<.01%     \n==========================================\n  Files          21       21              \n  Lines        5896     5898       +2     \n==========================================\n+ Hits         4281     4283       +2     \n  Misses       1166     1166              \n  Partials      449      449\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/939?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/compare/54d23b6fa46c29ccb7e834154e2f0c0fba33f0d1...78fbe8d8aca5c69f4cc7ff7b1341df4a12375a28?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `41.33% <\u00f8> (\u00f8)` | :white_check_mark: |\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/compare/54d23b6fa46c29ccb7e834154e2f0c0fba33f0d1...78fbe8d8aca5c69f4cc7ff7b1341df4a12375a28?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <\u00f8> (\u00f8)` | :white_check_mark: |\n| [generator/model.go](https://codecov.io/gh/go-swagger/go-swagger/compare/54d23b6fa46c29ccb7e834154e2f0c0fba33f0d1...78fbe8d8aca5c69f4cc7ff7b1341df4a12375a28?src=pr&el=tree#diff-Z2VuZXJhdG9yL21vZGVsLmdv) | `72.12% <100%> (+0.06%)` | :white_check_mark: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/939?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/939?src=pr&el=footer). Last update [54d23b6...78fbe8d](https://codecov.io/gh/go-swagger/go-swagger/compare/54d23b6fa46c29ccb7e834154e2f0c0fba33f0d1...78fbe8d8aca5c69f4cc7ff7b1341df4a12375a28?el=footer&src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments). \ud83d\udc4d NICE!!! I was not expecting this to be merged so quickly. Wonderful, I can continue with my project!  ## Problem statement\r\n\r\nI am trying to generate swagger spec for https://github.com/go-swagger/go-swagger/tree/master/fixtures/goparsing/petstore . But the resulting swagger spec doesn't contain all the routes,models etc. Infact it only contains the data provided in doc.go .\r\n\r\n## Swagger specification\r\n\r\n    {\r\n      \"consumes\": [\r\n        \"application/json\"\r\n      ],\r\n      \"produces\": [\r\n        \"application/json\"\r\n      ],\r\n      \"schemes\": [\r\n        \"http\",\r\n        \"https\"\r\n      ],\r\n      \"swagger\": \"2.0\",\r\n      \"info\": {\r\n        \"description\": \"the purpose of this application is to provide an application\\nthat is using plain go code to define an API\\n\\nThis should demonstrate all the possible comment annotations\\nthat are available to turn go code into a fully compliant swagger 2.0 spec\",\r\n        \"title\": \"Petstore API.\",\r\n        \"termsOfService\": \"there are no TOS at this moment, use at your own risk we take no responsibility\\ngo:generate swagger generate spec -o swagger.json\",\r\n        \"contact\": {\r\n          \"name\": \"John Doe\",\r\n          \"url\": \"http://john.doe.com\",\r\n          \"email\": \"john.doe@example.com\"\r\n        },\r\n        \"license\": {\r\n          \"name\": \"MIT\",\r\n          \"url\": \"http://opensource.org/licenses/MIT\"\r\n        },\r\n        \"version\": \"0.0.1\"\r\n      },\r\n      \"host\": \"localhost\",\r\n      \"basePath\": \"/v2\",\r\n      \"paths\": {}\r\n    }\r\n\r\n## Steps to reproduce\r\n\r\nI added `//go:generate swagger generate spec -o swagger.json\r\n` in doc.go and did `go generate` in the folder containing doc.go\r\n\r\n## Environment\r\nswagger version:   dev\r\ngo version: 1.6.2  \r\nOS:   Windows 10\r\n Thank you, it works that way.  Hi,\r\n\r\nI have the following swagger:meta defined in a doc.go file within a public package:\r\n\r\n> // Package public ESB monitoring endpoints.\r\n> //\r\n> // The purpose of this API is to provide information over the status of\r\n> // components (API clients) and services (among others SIM, porting, compass\r\n> // provisioning) running in the Speakup ESB\r\n> //\r\n> //     Schemes: http, https\r\n> //     Version: 0.0.1\r\n> //     Contact: Luca Valtulina<luca@speakup.nl>\r\n> //\r\n> // swagger:meta\r\n> package public\r\n\r\nwhen generating the swagger documentation though, it randomly happens that the swagger info attribute is as following:\r\n\r\n> \"info\": {\r\n>    \"description\": \"You give it a main file and it will parse all the files that are required by that main\\npackage to produce a swagger specification.\\n\\nTo use you can add a go:generate comment to your main file for example:\\n\\ngo:generate swagger generate spec\\n\\nThe following annotations exist:\",\r\n>     \"title\": \"provides a scanner for go files that produces a swagger spec document.\",\r\n>     \"contact\": {\r\n>       \"name\": \"Luca Valtulina\",\r\n>       \"email\": \"luca@speakup.nl\"\r\n>     },\r\n>     \"version\": \"0.0.1\"\r\n>   },\r\n\r\nThis description and title can be found in the go-swagger/go-swagger/scan/doc.go file. I believe that this is triggered by the fact that I import \"github.com/go-swagger/go-swagger/cmd/swagger/commands/generate\" in my project (I need to generate the swagger documentation at runtime and I do that by instantiating a generate.SpecFile with as basePath the path to my public package and as input the doc.go file).\r\n\r\nIf you think that this cannot be considered an issue, since go-swagger is meant to be executed separately and not to be imported as a library package than please feel free to close this.\r\n\r\nThanks in advance,\r\nLuca @casualjim thanks for your reply.\r\n\r\nif with \"at build time\" you mean prior to building the golang binary (sorry newbie here) using the 'swagger generate spec' cmd then the result is unfortunately not different (4 out of 10 times the description and title in the swagger doc are incorrect). FYI, we have `go-swagger` in our vendor directory so that we can ensure a given version, even if that version isn't yet released, but we don't use any of its types from there.  We just run it from the vendor directory.  We haven't had any problems with that, so it would be good if it would continue to work that way. Thanks @casualjim for the clarifications. I think we can considered this issue a non-issue then but simply a misuse from my side.  ## Problem statement\r\n\r\nSending a request with property which is defined as 'readOnly' in the schema should return a 400.\r\nCurrently it is accepted.\r\n\r\n## Swagger specification\r\n\r\nreadOnly: boolean:\r\n\r\nRelevant only for Schema \"properties\" definitions. Declares the property as \"read only\". This means that it MAY be sent as part of a response but MUST NOT be sent as part of the request. Properties marked as readOnly being true SHOULD NOT be in the required list of the defined schema. Default value is false.\r\n\r\n## Steps to reproduce\r\n\r\n1. Create a POST verb on path / with body with schema that has a readOnly property\r\n2. Send a request that contains this property.\r\n3. You won't get an 400 error\r\n\r\n## Environment\r\n\r\nswagger version: 0.8.0\r\ngo version: go1.7.4\r\nOS: linux/amd64\r\n +1\r\nI also would really like to have this feature. An api I am building has some properties in its models like createdAt or modifiedAt, that are declared as readOnly. Currently I have to \"manually\" remove these fields from requests, what is quite annoying, and kind of negates the whole purpose of auto-generating code from swagger.\r\n\r\nI tried to find the relevant places, where this had to be implemented, but I failed. Although I think I am relatively proficient in go, I have absolutely no idea, what exactly is going on in the go-swagger code.  ## Problem statement\r\n\r\nWe have a need to set HTTP header parameters in the (generated) client code that are not necessarily part of the swagger documentation.  We know that we could specify the header parameter in swagger but that is not feasible as it should not be exposed to the public users (it will be set automatically by the gateway but for internal development we also want to set it).\r\n\r\nHowever, I don't really have access to the http request from any of the `Params` object. Unless I'm missing something, I would have to make a copy of the swagger doc with the parameter that I then use for client code generation and one for external use without the parameter.\r\n\r\nIs there a better way to solve this by letting met set custom headers that are not specified in the swagger document? Alternative would be hidden parameters in the swagger doc but I don't think that exists.  Awesome, i'll look into this. Always appreciate your fast response :). This resolved my problem and this issue can be closed.   [][]byte worked fine until Go 1.7.4. In Go 1.7.5, decoding fails \r\nwith following error:\r\n\"json: cannot unmarshal object into Go value of type []uint8\"\r\nUsing json.RawMessage works correctly in this case. # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/933?src=pr&el=h1) Report\n> Merging [#933](https://codecov.io/gh/go-swagger/go-swagger/pull/933?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/36032a7893f25e35b9c6f160c2a0dabee86425cd?src=pr&el=desc) will **increase** coverage by `0.01%`.\n> The diff coverage is `100%`.\n\n\n```diff\n@@            Coverage Diff            @@\n##           master    #933      +/-   ##\n=========================================\n+ Coverage   72.59%   72.6%   +0.01%     \n=========================================\n  Files          21      21              \n  Lines        5896    5896              \n=========================================\n+ Hits         4280    4281       +1     \n+ Misses       1167    1166       -1     \n  Partials      449     449\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/933?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [generator/bindata.go](https://codecov.io/gh/go-swagger/go-swagger/compare/36032a7893f25e35b9c6f160c2a0dabee86425cd...7055afb1c8cfb70c9e5f1aa0d156ea80276d012d?src=pr&el=tree#diff-Z2VuZXJhdG9yL2JpbmRhdGEuZ28=) | `66.51% <100%> (\u00f8)` | :white_check_mark: |\n| [generator/structs.go](https://codecov.io/gh/go-swagger/go-swagger/compare/36032a7893f25e35b9c6f160c2a0dabee86425cd...7055afb1c8cfb70c9e5f1aa0d156ea80276d012d?src=pr&el=tree#diff-Z2VuZXJhdG9yL3N0cnVjdHMuZ28=) | `41.33% <\u00f8> (+1.33%)` | :white_check_mark: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/933?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/933?src=pr&el=footer). Last update [36032a7...7055afb](https://codecov.io/gh/go-swagger/go-swagger/compare/36032a7893f25e35b9c6f160c2a0dabee86425cd...7055afb1c8cfb70c9e5f1aa0d156ea80276d012d?src=pr&el=footer&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments). Done!  ## Problem statement\r\n\r\nI have a POST request that returns different object models based on the query parameters.\r\nIs there any way to add multiple responses under the swagger route annotation like\r\n\r\n```\r\nResponses:\r\n  200: response1\r\n  200: response2\r\n... etc\r\n\r\n```\r\n\r\n\r\nAlso is it possible to have different models for the request too? \r\n sakibs,   if you specify a wrapper class or base class, you can return multiple responses. for example (in pseudo-swagger),\r\n\r\nResponseWrapper\r\ntype: object\r\nproperties:\r\n   response1: $ref: '#/definitions/response1'\r\n   response2: $ref: '#/definitions/response2'\r\n\r\nor more elegantly\r\nBaseObject:\r\ntype: object\r\nproperties:\r\n    id: type: string   format: uuid\r\n\r\nResponse1:\r\n  allOf:\r\n     - $ref: '#/definitions/BaseObject'\r\n     - type: object\r\n        properties:\r\n             extendedAttributeForResponse1\r\n\r\nResponse2:\r\n  allOf:\r\n     - $ref: '#/definitions/BaseObject'\r\n     - type: object\r\n        properties:\r\n             extendedAttribForResponse2\r\n\r\n\r\n I would assume that with OpenAPI 3.0 you'll be able to do `anyOf:` with the different response types.\r\n  ## Problem statement\r\n\r\nA swagger definition that includes more than one tag in a path's tag definitions generates bad code. It appears to nest a second `operations` directory within the first.\r\n\r\n## Swagger specification\r\n```yaml\r\nswagger: '2.0'\r\ninfo:\r\n  title: Multi tag API\r\n  description: multi tag api\r\n  version: '0.0.1'\r\n\r\n# the domain of the service\r\nhost: api.multi.tags\r\nschemes: [ https ]\r\nproduces: [ application/json ]\r\nconsumes: [ application/json ]\r\n\r\nbasePath: /v1 # Prefixed to all paths\r\npaths:\r\n  /multi:\r\n    get:\r\n      summary: A multitag route\r\n      tags:\r\n        - onetag\r\n        - twotag\r\n      responses:\r\n        default:\r\n          description: Unexpected error\r\n          schema:\r\n            type: object\r\n            properties:\r\n              type:\r\n                type: string\r\n                description: The error type\r\n              message:\r\n                type: array\r\n                description: Explanation of the errors\r\n                items: { type: string }\r\n```\r\n\r\n## Steps to reproduce\r\n`swagger generate server` with the above, and attempt to go build.\r\n\r\nYou'll get the following error:\r\n```\r\nrestapi/operations/multi_tag_api.go:54: undefined: GetMultiHandler\r\n```\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: 1.7.4\r\nOS: macOS\r\n same issue Is this still there? \r\n\r\nOn my machine with same yaml file as above , it produces perfect output.\r\n\r\nHere\r\n\r\n\r\n```\r\ntaggarwal@taggarwal-m01 \ue0b0 ~/test-swagger \ue0b0 ./swagger generate server -f bug931.yaml                                                                                                                                                                      \ue0b2 \u2714 \ue0b2 737 \ue0b2 17:20:27\r\n2017/08/23 17:44:26 building a plan for generation\r\n2017/08/23 17:44:26 planning definitions\r\n2017/08/23 17:44:26 planning operations\r\n2017/08/23 17:44:26 grouping operations into packages\r\n2017/08/23 17:44:26 planning meta data and facades\r\n2017/08/23 17:44:26 rendering 0 models\r\n2017/08/23 17:44:26 rendering 1 operation groups (tags)\r\n2017/08/23 17:44:26 rendering 1 operations for operations\r\n2017/08/23 17:44:26 rendering 4 templates for operation\r\n2017/08/23 17:44:26 name field GetMulti\r\n2017/08/23 17:44:26 package field operations\r\n2017/08/23 17:44:26 creating \"get_multi_parameters.go\" in \"restapi/operations/operations\" as parameters\r\n2017/08/23 17:44:26 name field GetMulti\r\n2017/08/23 17:44:26 package field operations\r\n2017/08/23 17:44:26 creating \"get_multi_urlbuilder.go\" in \"restapi/operations/operations\" as urlbuilder\r\n2017/08/23 17:44:26 name field GetMulti\r\n2017/08/23 17:44:26 package field operations\r\n2017/08/23 17:44:26 creating \"get_multi_responses.go\" in \"restapi/operations/operations\" as responses\r\n2017/08/23 17:44:26 name field GetMulti\r\n2017/08/23 17:44:26 package field operations\r\n2017/08/23 17:44:26 creating \"get_multi.go\" in \"restapi/operations/operations\" as handler\r\n2017/08/23 17:44:27 rendering support\r\n2017/08/23 17:44:27 rendering 6 templates for application MultiTag\r\n2017/08/23 17:44:27 name field MultiTag\r\n2017/08/23 17:44:27 package field operations\r\n2017/08/23 17:44:27 creating \"configure_multi_tag.go\" in \"restapi\" as configure\r\n2017/08/23 17:44:27 name field MultiTag\r\n2017/08/23 17:44:27 package field operations\r\n2017/08/23 17:44:27 creating \"main.go\" in \"cmd/multi-tag-server\" as main\r\n2017/08/23 17:44:27 name field MultiTag\r\n2017/08/23 17:44:27 package field operations\r\n2017/08/23 17:44:27 creating \"embedded_spec.go\" in \"restapi\" as embedded_spec\r\n2017/08/23 17:44:27 name field MultiTag\r\n2017/08/23 17:44:27 package field operations\r\n2017/08/23 17:44:27 creating \"server.go\" in \"restapi\" as server\r\n2017/08/23 17:44:27 name field MultiTag\r\n2017/08/23 17:44:27 package field operations\r\n2017/08/23 17:44:27 creating \"multi_tag_api.go\" in \"restapi/operations\" as builder\r\n2017/08/23 17:44:27 name field MultiTag\r\n2017/08/23 17:44:27 package field operations\r\n2017/08/23 17:44:27 creating \"doc.go\" in \"restapi\" as doc\r\nGeneration completed!\r\n\r\nFor this generation to compile you need to have some packages in your GOPATH:\r\n\r\n  * github.com/go-openapi/runtime\r\n  * github.com/tylerb/graceful\r\n  * github.com/jessevdk/go-flags\r\n\r\nYou can get these now with: go get -u -f ./...\r\n\r\ntaggarwal@taggarwal-m01 \ue0b0 ~/test-swagger \ue0b0 ls -R                                                                                                                                                                                                         \ue0b2 \u2714 \ue0b2 741 \ue0b2 17:45:19\r\nbug931.yaml    cmd            copyright.txt  copyright.txt~ pet.yaml       restapi        swagger\r\n\r\n./cmd:\r\napp-server       multi-tag-server\r\n\r\n./cmd/app-server:\r\nmain.go\r\n\r\n./cmd/multi-tag-server:\r\nmain.go\r\n\r\n./restapi:\r\nconfigure_app.go       configure_multi_tag.go doc.go                 embedded_spec.go       operations             server.go\r\n\r\n./restapi/operations:\r\napp_api.go       multi_tag_api.go operations\r\n\r\n./restapi/operations/operations:\r\nget_multi.go            get_multi_parameters.go get_multi_responses.go  get_multi_urlbuilder.go\r\n taggarwal@taggarwal-m01 \ue0b0 ~/test-swagger \ue0b0\r\n``` @casualjim : It has been verified. Can be closed. Im seeing the operations/operations folder created. Tried to compile my generated server but getting compile errors. \r\n2017/09/05 14:22:18 building a plan for generation\r\n2017/09/05 14:22:18 planning definitions\r\n2017/09/05 14:22:18 planning operations\r\n2017/09/05 14:22:18 grouping operations into packages\r\n2017/09/05 14:22:18 planning meta data and facades\r\n2017/09/05 14:22:18 rendering 3 models\r\n2017/09/05 14:22:18 rendering 1 templates for model uuid\r\n2017/09/05 14:22:18 name field uuid\r\n2017/09/05 14:22:18 package field models\r\n2017/09/05 14:22:18 creating \"uuid.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/models\" as definition\r\n2017/09/05 14:22:18 rendering 1 templates for model error\r\n2017/09/05 14:22:18 name field error\r\n2017/09/05 14:22:18 package field models\r\n2017/09/05 14:22:18 creating \"error.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/models\" as definition\r\n2017/09/05 14:22:18 rendering 1 templates for model success\r\n2017/09/05 14:22:18 name field success\r\n2017/09/05 14:22:18 package field models\r\n2017/09/05 14:22:18 creating \"success.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/models\" as definition\r\n2017/09/05 14:22:18 rendering 1 operation groups (tags)\r\n2017/09/05 14:22:18 rendering 1 operations for operations\r\n2017/09/05 14:22:18 rendering 4 templates for operation nusights-rest-api\r\n2017/09/05 14:22:18 name field fileupload\r\n2017/09/05 14:22:18 package field operations\r\n2017/09/05 14:22:18 creating \"fileupload_parameters.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/operations/operations\" as parameters\r\n2017/09/05 14:22:18 name field fileupload\r\n2017/09/05 14:22:18 package field operations\r\n2017/09/05 14:22:18 creating \"fileupload_urlbuilder.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/operations/operations\" as urlbuilder\r\n2017/09/05 14:22:18 name field fileupload\r\n2017/09/05 14:22:18 package field operations\r\n2017/09/05 14:22:18 creating \"fileupload_responses.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/operations/operations\" as responses\r\n2017/09/05 14:22:18 name field fileupload\r\n2017/09/05 14:22:18 package field operations\r\n2017/09/05 14:22:18 creating \"fileupload.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/operations/operations\" as handler\r\n2017/09/05 14:22:18 rendering support\r\n2017/09/05 14:22:18 rendering 6 templates for application NusightsRest\r\n2017/09/05 14:22:18 name field NusightsRest\r\n2017/09/05 14:22:18 package field operations\r\n2017/09/05 14:22:18 skipping /home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/configure_nusights_rest.go because it already exists\r\n2017/09/05 14:22:18 name field NusightsRest\r\n2017/09/05 14:22:18 package field operations\r\n2017/09/05 14:22:18 creating \"main.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/cmd/nusights-rest-server\" as main\r\n2017/09/05 14:22:18 name field NusightsRest\r\n2017/09/05 14:22:18 package field operations\r\n2017/09/05 14:22:18 creating \"embedded_spec.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi\" as embedded_spec\r\n2017/09/05 14:22:18 name field NusightsRest\r\n2017/09/05 14:22:18 package field operations\r\n2017/09/05 14:22:18 creating \"server.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi\" as server\r\n2017/09/05 14:22:18 name field NusightsRest\r\n2017/09/05 14:22:18 package field operations\r\n2017/09/05 14:22:18 creating \"nusights_rest_api.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi/operations\" as builder\r\n2017/09/05 14:22:18 name field NusightsRest\r\n2017/09/05 14:22:18 package field operations\r\n2017/09/05 14:22:18 creating \"doc.go\" in \"/home/prasadj/workspace/main6/.go/src/nusights/server/apis/restapi\" as doc\r\nGeneration completed!\r\nInvoking go build for nusights_server_apis_cmd_nusights-rest-server\r\n# nusights/server/apis/restapi/operations\r\n.go/src/nusights/server/apis/restapi/operations/nusights_rest_api.go:71: undefined: FileuploadHandler\r\nmake[3]: *** [nusights/go/nusights/server/apis/cmd/nusights-rest-server/CMakeFiles/nusights_server_apis_cmd_nusights-rest-server] Error 2 @jgsprasad : Can you try with latest pull from https://github.com/EleanorRigby/go-swagger  I want to implement push notifications with ejabberd server. I followed instructions as mentioned here:\r\n\r\nbut i got the following issues:\r\n\r\nRecompile: src/mod_onesignal\r\nsrc/mod_onesignal.erl: undefined parse transform 'lager_transform'\r\n\r\nPlease answer it as soon as possible. @casualjim Thank you so much. By mistake i posted here.  ## Problem statement\r\nI am trying to generate server and client for go-swagger. (this is my first time using swagger).\r\nAnd I have these packages:\r\n  * github.com/go-openapi/runtime\r\n  * github.com/tylerb/graceful\r\n  * github.com/jessevdk/go-flags\r\n  * golang.org/x/net/context\r\n\r\nin my `echo $GOPATH` => `/Users/argentum/dev/go`. but when I run `swagger generate server -A auth-service -f ./swagger.yml` in `/Users/argentum/dev/go/swagger-demo` .\r\nI get this:\r\n\r\n```\r\nGeneration completed!\r\n\r\nFor this generation to compile you need to have some packages in your GOPATH:\r\n\r\n  * github.com/go-openapi/runtime\r\n  * github.com/tylerb/graceful\r\n  * github.com/jessevdk/go-flags\r\n  * golang.org/x/net/context\r\n```\r\n\r\nBut I have these packages, I checked in `$GOPATH/github.com/<package-names>`\r\n## Swagger specification\r\n\r\nInstalled swagger with `go get -u github.com/go-swagger/go-swagger/cmd/swagger` when I do `swagger version` it shows `dev`\r\n\r\n## Steps to reproduce\r\nCreate a project diretory under $GOPATH.\r\nmake a swagger.yml\r\n```\r\nonsumes:\r\n- application/json\r\ninfo:\r\n  description: Issues and validates access and refresh tokens and otp for two factor\r\n    authentication\r\n  title: Authentication service\r\n  version: 1.0.0\r\nproduces:\r\n- application/json\r\nschemes:\r\n- https\r\n- http\r\nswagger: \"2.0\"\r\nsecurityDefinitions:\r\n  key:\r\n    type: apiKey\r\n    in: header\r\n    name: authorization\r\npaths:\r\n  /v1/customers/login:\r\n    delete:\r\n      tags: [\"customer login\"]\r\n      responses:\r\n        '200':\r\n          description: ok\r\n        '401':\r\n          description: unauthorized\r\n````\r\n\r\n## Environment\r\nswagger version: dev  \r\ngo version: 1.7.4 darwin/amd64\r\nOS:   OSX SIERRA\r\n\r\nAlso it would be cool if you could say, how to do a DELETE/POST request which has headers:\r\n\r\n```\r\nAuthorizartion: Bearer <token>\r\nX-Platform: Webapp\r\n```\r\n\r\nI know how to do the body. oh ok .. :D cool @casualjim um, where did you get those securityDefinitions values. as in in the documentation or in the examples/authentication its not there, please guide me a bit into figuring out where can I refer to for future problems that are already solved :) @argentum47, you can find all of that information in the official Swagger 2.0  / OpenAPI 2.0 documentation. For example your question is answered here: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#security-definitions-object  ## Problem statement\r\n\r\nWe have a Swagger Spec with a string parameter defined. When now the value contains some URL escaped characters (e.g. a space, correctly encoded as + or %20 by the client), these are not unescaped before being passed into the actual service implementation.\r\nWe now implemented a workaround but I'm quite sure this is a bug.\r\n\r\n## Swagger specification\r\n```json\r\n{\r\n   \"/v1/choices/{type}/{value}\" : {\r\n      \"get\" : {\r\n         \"produces\" : [\r\n            \"application/json\"\r\n         ],\r\n         \"responses\" : {\r\n            \"200\" : {\r\n               \"description\" : \"Choice details.\\n\",\r\n               \"schema\" : {\r\n                  \"$ref\" : \"#/definitions/choice\"\r\n               }\r\n            }\r\n         },\r\n         \"parameters\" : [\r\n            {\r\n               \"in\" : \"path\",\r\n               \"required\" : true,\r\n               \"type\" : \"string\",\r\n               \"name\" : \"type\"\r\n            },\r\n            {\r\n               \"name\" : \"value\",\r\n               \"type\" : \"string\",\r\n               \"in\" : \"path\",\r\n               \"required\" : true\r\n            }\r\n         ],\r\n         \"description\" : \"Details about one choice by its value.\"\r\n      }\r\n   }\r\n}\r\n```\r\n\r\n## Steps to reproduce\r\n\r\nFor this example:\r\n    curl 'http://127.0.0.1:8889/v1/choices/os/Ubuntu%2014.04'\r\nwill end up in some value \"Ubuntu%2014.04\"\r\nwhile\r\n    curl 'http://127.0.0.1:8889/v1/choices/os/Ubuntu 14.04'\r\nbecomes \"Ubuntu14.04\" (with no space at all)\r\n\r\n## Environment\r\nswagger version: dev (as of 2017-02-10)\r\ngo version: 1.6.2\r\nOS:   Ubuntu 14.04\r\n One additional special case which I'm not even very sure about whether it's an error in go-swagger or not:\r\n\r\nFor the case above a client sends a plus sign which is really meant to be a plus sign. It's not escaped as %2b and the customer claimed this would be correct. We discussed that for a while and indeed: RFC2616 says\r\n\r\n\"Characters other than those in the \"reserved\" and \"unsafe\" sets (see\r\n   RFC 2396 [42]) are equivalent to their \"\"%\" HEX HEX\" encoding.\"\r\n\r\nand does not say anything about an encoding a space as +, but for body content of application/x-www-urlencoded the + is an alternative for %20 ([draft](https://tools.ietf.org/html/draft-hoehrmann-urlencoded-01)):\r\n\r\n\"For compatibility with the RFC 1866 format the ampersand character is tolerated as alternative separator character, and the plus sign may be used to represent space characters.\"\r\n\r\nSo from my point of view a + in a path variable would have to stay +, only %20 should be unescaped while for form data a + would have to be encoded as %2b on client side while the server may decode + to space.\r\n\r\nSorry for nitpicking and discussing here. The potential problem I see is that it seems like several libraries do not encode correctly so implementing it to the letter of the spec could mean to cause problems with those in reality. On the other hand when the encoding bug has just recently been reported and fixed there seem not to be too many implementations even using it.\r\n\r\nPS: just tried that: a + in a path is a + for common browsers and servers (they handle the file named \"foo+bar\", not \"foo bar\". A + in a GET parameter on the other hand is a space character, even though visible in the URI.\r\nExample: [foo+bar](http://137tmx.de/~ts/foo+bar) contains +, [foo%20bar](http://137tmx.de/~ts/foo%20bar) contains \"space\" Should work like so:\r\n```diff\r\ndiff --git a/middleware/router.go b/middleware/router.go\r\nindex 84b26f8..9cd4e04 100644\r\n--- a/middleware/router.go\r\n+++ b/middleware/router.go\r\n@@ -184,7 +184,8 @@ func (d *defaultRouter) Lookup(method, path string) (*MatchedRoute, bool) {\r\n                                debugLog(\"found a route for %s %s with %d parameters\", method, path, len(entry.Parameters))\r\n                                var params RouteParams\r\n                                for _, p := range rp {\r\n-                                       v, err := url.QueryUnescape(p.Value)\r\n+                                       // according to RFC2616 a + (plus) in a path is just a +\r\n+                                       v, err := url.QueryUnescape(strings.Replace(p.Value, \"+\", \"%2B\", -1))\r\n                                        if err != nil {\r\n                                                debugLog(\"failed to escape %q: %v\", p.Value, err)\r\n                                                v = p.Value\r\ndiff --git a/middleware/router_test.go b/middleware/router_test.go\r\nindex e64fe35..ab61b67 100644\r\n--- a/middleware/router_test.go\r\n+++ b/middleware/router_test.go\r\n@@ -163,14 +163,14 @@ func TestRouter_EscapedPath(t *testing.T) {\r\n        assert.Equal(t, 200, recorder.Code)\r\n \r\n        recorder = httptest.NewRecorder()\r\n-       request, _ = http.NewRequest(\"GET\", \"/api/pets/abc%2Fdef\", nil)\r\n+       request, _ = http.NewRequest(\"GET\", \"/api/pets/abc%2Fde+f\", nil)\r\n \r\n        mw.ServeHTTP(recorder, request)\r\n        assert.Equal(t, 200, recorder.Code)\r\n        ri, _ := context.RouteInfo(request)\r\n        if assert.NotNil(t, ri) {\r\n                if assert.NotNil(t, ri.Params) {\r\n-                       assert.Equal(t, \"abc/def\", ri.Params.Get(\"id\"))\r\n+                       assert.Equal(t, \"abc/de+f\", ri.Params.Get(\"id\"))\r\n                }\r\n        }\r\n }\r\n```  In my go-swagger built API I have a date-time property that is not required, i.e. I would like to exclude it from the JSON output if the source DB value is NULL.  I successfully select the value into a sql.NullString value (endTime) then convert to a strfmt.DateTime (endTimeStr) to populate the model:\r\n\r\n    endTimeStr := strfmt.DateTime{}\r\n    (&endTimeStr).Scan(endTime.String)\r\n\r\nWhen the value in the database is NULL then instead of this value being suppressed in the JSON output I see the following:\r\n\r\n    \"end_time\": \"0001-01-01T00:00:00.000Z\",\r\n\r\nThe above value means nothing in my context so I would rather see it suppressed.  Am I able to do this?\r\n\r\nNote non-required values of other data types are not placed in the JSON, do I have to do anything extra in the case of date-time values to hide these too?\r\n\r\nThanks for any help you can provide.         Thank you casualjim, that is what I was looking for.  This is a question and not a bug. I have to rely on you core contributors and hope you have enough knowledge to understand the following:\r\n\r\nMy team want to migrate our existing go-swagger app (server generated from spec) to Google App Engine (GAE). I could not find any previous attempt of doing this on Google search.\r\n\r\nBasically, GAE is intrusive, and builds your code as a package instead of an app, and expects standard http handlers to be registered in main.go init function. If you look quickly at https://cloud.google.com/appengine/docs/go/how-requests-are-handled section \"Requests and HTTP\" you will see a sample an brief explanation.\r\n\r\nMy question: do you know if a go-swagger app can be migrated/work this way? I'm asking because I suspect the HTTP middleware you are using probably does a lot of magic things, including some ListenAndServe or similar. Which, I believe, cannot work on GAE.\r\n\r\nAny comment appreciated. If you think that could work, some clue of directions, things to change would help.\r\n Thanks for your reply. \r\n\r\nYes, I have seen, and I believe it's slightly different because they use a different approach: the op says he is just using swagger generate spec. Meaning he probably already has an app, using standard http handlers.\r\n\r\nIn our case, we use swagger generate server and therefore our app relies entirely on your http middleware and the generated code.\r\n\r\nFrom my limited understanding, GAE asks you to register your handlers, and that's all. They have some magic to actually listen and serve, hence my question.\r\n\r\nMy current attempt resulted in a panic :-) I've sent an support ticket to Google, trying to explain the situation, and I am waiting for their feedback.\r\n\r\nI will update this thread if I find anything. I have some updates:\r\n\r\nWith some help from Google support and many attempts, I've managed to get the simple TODO example working.\r\n\r\nBasically, the key point is to initialize the handlers from the middleware like this:\r\n\r\nserver.ConfigureFlags()\r\nserver.ConfigureAPI()\r\n**http.Handle(\"/\", server.GetHandler())**\r\n\r\nand then remove any further generated code since we must not start listening.\r\n\r\nIn addition, for some reason I had to tweak the route/handler mapping (initCacheHandler) to explicitly use \"/\" instead of empty string. It's still unclear why I had to do this.\r\n\r\nFinally, a 3rd party \"easyjson\" needs to be tweaked as well, as it's using restricted API (unsafe package).\r\n\r\nAfter all of this, yes: **you can get a go-swagger app working on App Engine**. I believe we can close the issue.  \r\nThis was working on `0.8.0`. \r\n\r\nOn master `swagger generate operation ... --skip-validator` does not skip the validation functions.  ## Problem statement\r\n\r\nFor a `PATCH` handler I'm trying to determine whether a field has been set (to `null`) or is not set at all. I saw there's work going on in #557 which looks to solve exactly the same problem \ud83d\ude47 but obviously isn't exactly a trivial change.\r\n\r\nIs there a way to work around this temporarily, getting/creating a map of the fields that have been set or something like that?\r\n\r\n## Swagger specification\r\nThe snipped below is just how I defined the request body.\r\n\r\n```yaml\r\n  MyUpdateParams:\r\n    description: Entity to perform changes on an existing resource.\r\n    type: object\r\n    properties:\r\n      profile_id:\r\n        description: |\r\n          Profile id the resource should be assigned to or null for anonymous resources. \r\n          If provided but set to null it will be changed whereas if the field is unset, no \r\n          change will be performed.\r\n        type: string\r\n        format: uuid\r\n        x-nullable: true\r\n```\r\n Has work already been done on it?  I don't need it quite yet, but will probably be implementing one before too much longer.\r\n Thank you for the quick response! Great to hear it will be part of the OpenAPI 3 implementation.  ## Problem statement\r\n\r\nWhen I view the API spec using `swagger serve`, I receive the following warning for several definitions:\r\n\r\n> **Warning:** Other properties are defined at the same level as $ref at \"#/definitions/TicketListItemJSON/properties/assignedTo\". They are IGNORED according to the JsonSchema spec\r\n\r\n## Steps to reproduce\r\n\r\nI have created a minimal test case:\r\n\r\nCreate this file `foo.go` in an empty directory:\r\n\r\n    package foo\r\n\r\n    // Response is a response for foo\r\n    // swagger:response FooResponse\r\n    type Response struct {\r\n    \tTickets Tickets `json:\"tickets\"`\r\n    }\r\n\r\n    type Tickets []*Ticket\r\n\r\n    type Ticket struct {\r\n    \t// The assignee\r\n    \tAssignedTo *Foo `json:\"assignedTo\"`\r\n    }\r\n\r\n    type Foo struct{}\r\n\r\nThen run:\r\n\r\n    swagger generate spec -o swagger.json\r\n\r\nThen observe the resulting file and notice the section:\r\n\r\n        \"assignedTo\": {\r\n          \"description\": \"The assignee\",\r\n          \"x-go-name\": \"AssignedTo\",\r\n          \"$ref\": \"#/definitions/Foo\"\r\n        }\r\n\r\n\r\n## Environment\r\n\r\n    $ swagger version\r\n    dev\r\n    $ go version\r\n    go version go1.7.4 linux/amd64\r\n @flimzy this is only the part of json file. Could you provide this source code and generated schema somewhere on github? I had similar problem before, afair.  @gaplyk https://github.com/flimzy/swagger-test current schema is valid so it is not spec generator issue. So it's a problem with the serve command I guess? @flimzy \r\nI also encountered the same problem.\r\n\r\nJSON reference said \r\n> Any members other than \"$ref\" in a JSON Reference object SHALL be ignored.\r\nhttps://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03#section-3\r\n\r\n`json:\"assignedTo\"` tag attache \"x-go-name\" property.\r\nBut I want to use the json tag, so this problem is not solved.\r\nIgnoring warnings. > the values other than $ref don't matter, it doesn't affect validity of the spec it just means other fields than $ref are ignored.\r\n\r\nBut they aren't ignored. That's the whole problem. They cause ugly warnings when running `swagger serve`.  When using the client code, you need to explicitly set the timeout when allocating the structs for the Params. i.e.\r\n\r\n- Call 'NewGetProviderProfileParams'\r\n- Don't call &GetProviderProfileParams{}\r\n\r\nThe second case doesn't set the default timeout, which now seems to be settable per-request rather than globally for the transport. This is a problem because you instantly get a very bad error message about 'Context deadline exceeded'.\r\n\r\nWould suggest:\r\n\r\n- If timeout is zero, default to the transport level timeout on the submission of the request.\r\n- Add some more helpful error messaging around the timeout scenario, so you don't get the x/net DeadlineExceeded standard message as an API consumer. Is there any circumstance where the fallback to the default timeout for the client when the request specific one is not set would be undesirable? Happy to leave the errors as is.\n\nSent from my iPhone\n\n> On 6 Feb. 2017, at 03:28, Ivan Porto Carrero <notifications@github.com> wrote:\n> \n> so the point of the constructor method is this exact use case. We need a way to express forever because there are certain cases where you really don't want a request to timeout.\n> For example when you write an API that behaves like docker attach/exec.\n> The reason I let it be context deadline exceeded is exactly because it's a well-known error case that's easy to match for and that matcher is reusable outside the code of go-swagger.\n> \n> That doesn't mean I would reject a PR from somebody making a more specific error type but I do think it would break a number of applications that already rely on this behavior. So that PR would have to include a flag to opt-in to this behavior at generation time\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub, or mute the thread.\n> \n couldn't the timeout be a pointer? nil becomes the default timeout and you could still set 0 for streams  ## Problem statement\r\n\r\nIn the code base, when annotated with: \r\n\r\n         swagger:route GET /plugins/{ptype}/{pname}/{pversion} getPlugin\r\n\r\nit generated with \"path\" inside swagger.json. While we have a similar route as:\r\n     \r\n        swagger:route GET /plugins/{ptype}/{pname}/{pversion}/config getPluginConfig\r\n\r\nThe annotation didn't get pick up into the swagger.json\r\n\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: go1.7 \r\nOS:   darwin/amd64\r\n @casualjim, yes. What I found is that it works in other cases. Only one particular case does not work which has the route as /plugins/{ptype}/{pname}/{pversion}/config for GET, PUT and DELETE. They're totally missing. This set of response has custom Marshal/Unmarshal. Could this be the issue?\r\n Thanks, @casualjim. \r\n\r\nHere is the link to the annotation:  https://gist.github.com/candysmurf/43cd4a179a8af12b95696e352091a19e\r\n\r\nHere is the gist for swagger.json\r\nhttps://gist.github.com/candysmurf/8294d9dd7afa348f6f568b3e9582c8c5\r\n\r\nThank you! @casualjim, apparently fields in the config type was not exported. After I had exported those fields, it worked as expected. Thanks for your help. I'm going to close this issue.\r\n\r\n  ## Problem statement\r\n\r\nThis regexp is valid in JavaScript and (so as a `pattern` schema constraint in Swagger) but rejected by `swagger validate`:\r\n`^[a-z](?=.{0,20}$)(?:[a-z0-9_]{0,4}:[a-z0-9_])?[a-z0-9_]{0,20}$`\r\n\r\nIn this regexp the assertion enforces that the whole string is always at most 21 characters long.\r\n\r\nThis cause of this failure is probably that the Go `regexp` package recognizes a smaller regexp syntax subset than Perl and JavaScript: it doesn't recognizes `(?= ... )` (zero-width positive look-ahead assertion).\r\n\r\n## Swagger specification\r\n\r\n## Steps to reproduce\r\n\r\nUse the regexp in a `pattern` in a schema definition for a type `string`.\r\n\r\n## Environment\r\nswagger version: 248eca73c69f2d5f0dbc94d49299e028c675960e\r\ngo version: 1.7.5\r\n Sadly this is not supported in Golang's regexp (std) package, as there hasn't been found an efficient way of implementing features such as lookahead, while keeping their O(n) complexity guarantee.\r\n\r\nRelevant discussion: https://github.com/golang/go/issues/18868\r\n\r\nSo there is not much we can do I'm afraid, for the time being you'll have to refactor your Regexp in a way that you're not relying on the lookahead feature. @GlenDC Refactoring of this particular pattern is possible (but the result is much less readable), but that may not be practical for all cases. And most importantly, that's not the point. **A Swagger spec using this pattern *is* valid**. So \"swagger validate\" has a bug. I understand that go-swagger may not be yet able to generate working client and server code from this regexp because of limitations of the regexp engine, but that's not the point: \"swagger validate\" should work anyway.\r\n\r\n@casualjim The better solution would be to use the best of both worlds: use `regexp` if possible (because it safer against DoS attacks and is in stdlib) and use `regexp2` only for patterns that use extended syntax (when `regexp.Compile` fails).  We experienced a malformed server generation while using goswagger with gb.\nThere was an error because the code expected the go-swagger runtime flagext\npackage to be imported, which was not.\n\nI regenerated the packaged templates using ./generator/gen-debug.sh.\n\nTo reproduce the error you can just use any swagger file like the petstore\nexample and use `gb` as build tool. After fetching all dependencies gb complains\nabout not being able to compile.\n\nIf there is still something missing or if you have any questions about\nreproducing the error feel free to get back to me. Ah, yeah, sorry, will do.  ## Problem statement\r\n\r\nI see this line of code in the runtime https://github.com/go-openapi/runtime/blob/4affd1e7cac55dd6f127f97efa114d2e02cddb55/client/runtime.go#L136 which indicates that the producers and consumers should be inferred from the specification. Is this work planned? If not, is it possible to register our own producers and consumers? We're using [json:api](http://jsonapi.org/) which requires a specific `Accept` and `Content-Type` header.\r\n\r\n## Swagger specification\r\n\r\n```\r\n  /resources:\r\n    get:\r\n      description: |\r\n        Returns a list of resources in JSON-API format\r\n      consumes:\r\n        - application/vnd.api+json\r\n      produces:\r\n        - application/vnd.api+json\r\n      parameters:\r\n        - name: filter[attribute]\r\n          in: query\r\n          description: Optional parameter for filtering by attribute\r\n          required: false\r\n          type: string\r\n      responses:\r\n        '200':\r\n          description: Successful response\r\n          schema:\r\n            $ref: '#/definitions/ResourceCollection'\r\n``` @casualjim I'm getting `panic: no consumer: \"application/vnd.api+json\"` using the spec above. @thommahoney, custom Consumers/Producers for the client an be set as follows:\r\n\r\n```go\r\nimport (\r\n    // ...\r\n    httptransport \"github.com/go-openapi/runtime/client\"\r\n    strfmt \"github.com/go-openapi/strfmt\"\r\n    myclient \"github.com/username/repo/api/client\" // your generated client package\r\n    // ...\r\n)\r\n\r\n// ...\r\n\r\nrt := httptransport.New(\r\n    myclient.DefaultHost,\r\n    myclient.DefaultBasePath,\r\n    myclient.DefaultSchemes)\r\nrt.Consumers[\"application/vnd.api+json\"] = httptransport.JSONConsumer()\r\nrt.Producers[\"application/vnd.api+json\"] = httptransport.JSONProducer()\r\n\r\n// Create Client using the function below\r\n// instead of myclient.NewHTTPClient / myclient.NewHTTPClientWithConfig\r\nmyclient.New(rt, strfmt.Default)\r\n\r\n// ...\r\n``` Relevant runtime issues:\r\n\r\n+ https://github.com/go-openapi/runtime/issues/33\r\n+ https://github.com/go-openapi/runtime/issues/32 Thank you both for your help on this. \ud83d\udc4d  @thommahoney, is your service now working as expected? Yes, you can close this issue. @GlenDC  I had the same problem and Instead of httptransport.JSONConsumer()\r\ni had to change to:\r\n\r\nruntime.JSONConsumer()\r\n\r\nfrom import \"github.com/go-openapi/runtime\" Yes @ZandorZ, you are correct. My original comment was wrong :) Same goes for any of the producers/consumers you might wish to use from the runtime (root) package.  ## Problem statement\r\n\r\nWe would like to be able to set an arbitrary user-agent header either at client generation time or at compile time. Is it possible to do this?\r\n\r\n## Swagger specification\r\n\r\nThe Swagger specification is irrelevant in this case because we are using the same specification to generate many clients. If I understand correctly, you're saying that we ought to write our own `Submit()` function (defined [here](https://github.com/go-openapi/runtime/blob/9d874dfae14238a34a7263c7278ce5663acb5fa8/client/runtime.go#L208)) that implements the `runtime.ClientTransport` interface and configure our client to use that instead using the `New()` function? All set here. Thanks. Feel free to close this issue. Can the same pattern of using an `http.RoundTripper` be used to implement the AWS Signature v4 which requires reading and modifying the `*http.Request` before its sent? Indeed it can, thank you. Is it possible to do this without a http.RoundTripper? I'm using gock for mocking the request in a test. But the test won't work because the roundtripper var is already set. See; https://github.com/h2non/gock/issues/27  ## Problem statement\r\n\r\nIn a server: When attempting to validate a UUID in client-supplied data, the generated code under `restapi/operations` will make a call like\r\n\r\n    value, err := formats.Parse(\"uuid\", raw)\r\n\r\nThis will cause the `Parse()` function in `go-openapi/strfmt/format.go` to be called, which will attempt to validate the format of the client-supplied data by applying the `strfmt.UUID.UnmarshalText()` function. \r\n\r\nHowever, the `strfmt.UUID.UnmarshalText()` function (defined in `go-openapi/strfmt/default.go`) actually accepts any input string and not just those formatted as UUIDs. (There is a comment associated with that function: \"validation is performed later on\".)\r\n\r\nShould validation of UUIDs should actually be performed using `strfmt.IsUUID()`?\r\n\r\n## Environment\r\n\r\nswagger version: 0.8.0 (commit: d1a0b6c1007402b2ccde73702eb0e8e43a5e7498)\r\ngo version: 1.7.4 linux/amd64 \r\nOS: Fedora 25\r\n Looking at this some more, it seems that `formats.Parse()` is actually working as designed, and is not intended to validate the string.\r\n\r\nValidation could be achieved by calling `formats.Validates(\"uuid\", raw)` and checking the return value -- however this does not appear to happen in the generated code.\r\n\r\nIs this something which should be happening, or have I misunderstood? It might also be worth mentioning that this is a parameter which is passed directly in the query string of a GET request, with no model generated. Relevant extract from spec:-\r\n\r\n    /endpoint:\r\n      get:\r\n        parameters:\r\n          - name: queryId\r\n            in: query\r\n            type: string\r\n            format: uuid\r\n            required: true\r\n  This has become a bit of a blocker for my team. If I can help out in any way here, let me know. Thanks  ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/906?src=pr) is 72.58% (diff: 94.44%)\n> Merging [#906](https://codecov.io/gh/go-swagger/go-swagger/pull/906?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will increase coverage by **<.01%**\n\n```diff\n@@             master       #906   diff @@\n==========================================\n  Files            21         21          \n  Lines          5890       5892     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4275       4277     +2   \n  Misses         1166       1166          \n  Partials        449        449          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [95fa3ff...70e8d85](https://codecov.io/gh/go-swagger/go-swagger/compare/95fa3ff56e3a44c340822b077ccdfdd2e8e86689...70e8d852796cbca64cba2e10c8c8f252abd9f367?src=pr)  ## Problem statement\r\nAs the API endpoints proliferate, I am in need of aggregating leaf models into larger aggregate models through composition.\r\n\r\nI thought I was getting the hang of the spec by doing this:\r\n\r\n```\r\n  plan_attributes:\r\n    type: object\r\n    required:\r\n      - birthday\r\n      - fipsCode\r\n      - healthAssessment\r\n    properties:\r\n      birthday:\r\n        type: string\r\n        format: string\r\n        minLength: 8\r\n      fipsCode:\r\n        type: string\r\n        format: string\r\n      healthAssessment:\r\n        type: string\r\n        format: string\r\n      services:\r\n        type: object\r\n        $ref: \"#/definitions/medicalServices\"\r\n      medications:\r\n        type: object\r\n        $ref: \"#/definitions/drugList\"\r\n```\r\n\r\nbut that yields warnings like these from 'swagger serve my-api.yml':\r\nWarning: Other properties are defined at the same level as $ref at \"#/definitions/plan_attributes/properties/medications\". They are IGNORED according to the JsonSchema spec\r\nWarning: Other properties are defined at the same level as $ref at \"#/definitions/plan_attributes/properties/services\". They are IGNORED according to the JsonSchema spec\r\n\r\nWhat is the proper way to aggregate leaf models into larger entities, without having to copy and paste all the attributes in the aggregation models?\r\n\r\n## Environment\r\nswagger version: dev  \r\ngo version: 1.7.4\r\nOS: Windows 10  \r\n That indeed was the way. This issue can be closed.  Fixes #889 \r\n\r\nNote that I in the end opted for building a super simple server, as the kvstore had in my opinion way to much details that would distract the reader of this tutorial. The actual goal of this tutorial is to teach users new to go-swagger how to build a server, with a custom defined cli and hand-written handlers.\r\n\r\nThe tutorial does reference the kvstore example twice. Especially in the end we want to make clear that the server we created in this tutorial is very simple, and that the user might want to check out the kvstore example next to see a more complex example, built using the exact same techniques as showcases in this tutorial.\r\n\r\nFor now I've stored the end result of the tutorial as https://github.com/GlenDC/custom-swagger-server but in case you want it to be under the `go-swagger` namespace I don't mind transferring ownership.  ## Problem statement\r\n\r\nHello\r\nWhen I specify endpoints ending with a slash in my swagger file, at runtime when trying to reach the same endpoint I get a `{\"code\":404,\"message\":\"path /trailingslashpath/ was not found\"}` response.\r\n\r\nIt looks related to this: [github.com/go-swagger/go-swagger/pull/292](https://github.com/go-swagger/go-swagger/pull/292) but the problem does not come from the same code.\r\n\r\nI don't know if this is an expected result or not.\r\nThe behavior seems to be due to the [DefaultRouter](https://github.com/go-openapi/runtime/blob/master/middleware/router.go) function. It calls the 'path.Join' function which removes any trailing slash except for the root path. \r\nThe result is that no handler seems to be registered. \r\n\r\n## Swagger specification\r\n\r\n```swagger: \"2.0\"\r\ninfo:\r\n  title: api\r\n  version: 1.0.0\r\nconsumes:\r\n- application/json\r\nproduces:\r\n- application/json\r\nschemes:\r\n- http\r\nbasePath: /\r\npaths:\r\n  /trailingslashpath/:\r\n    get:\r\n      responses:\r\n        204:\r\n          description: OK no content\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n- Start the server generated using the swagger\r\n- Call the server on the `/trailingslashpath/`\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: 1.7.3\r\nOS:  Debian 8.7\r\n @casualjim did you have a local fix somewhere for this, or do you need people to look at this? I'm on tip of master and I'm still having this problem even though a fix has been merged in.  Fixed it thx.\r\nJust to be sure: the expected result is that path with and without trailing slash are handled the same way ?  ## Problem statement\r\n\r\nWhen I send a POST request using the client API, I get a 415 (Unsupported Media Type) response. I noticed that the request has an extra header that sets \"Transfer-Encoding: chunked\". On the other hand, sending the POST request via curl works fine because it doesn't have that header.\r\n\r\nThis is my first go-swagger client and server. So, it is likely that I am doing something wrong, either in the code or in the swagger specification file.\r\n\r\nHere is the request and response:\r\n```\r\nPOST /api/v1/keys/k?value=v HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Go-http-client/1.1\r\nTransfer-Encoding: chunked\r\nAccept: application/json\r\nAccept-Encoding: gzip\r\n\r\n0\r\n\r\n\r\nHTTP/1.1 415 Unsupported Media Type\r\nConnection: close\r\nContent-Length: 113\r\nContent-Type: application/json\r\nDate: Mon, 23 Jan 2017 17:39:22 GMT\r\n\r\n{\"code\":415,\"message\":\"unsupported media type \\\"application/octet-stream\\\", only [application/json] are allowed\"}\r\nError: unknown error (status 415): {resp:0xc4202ac120} \r\n\r\n```\r\n\r\nAnd here is the error client is receiving:\r\n\r\n    &runtime.APIError{OperationName:\"unknown error\", Response:client.response{resp:(*http.Response)(0xc420090870)}, Code:415}\r\n\r\n\r\n## Swagger specification\r\n\r\n```yaml\r\nswagger: '2.0'\r\ninfo:\r\n  version: \"0.0.0\"\r\n  title: Testman\r\nschemes:\r\n  - http\r\nhost: localhost\r\nbasePath: /api/v1\r\nproduces:\r\n  - application/json\r\nconsumes:\r\n  - application/json\r\npaths:\r\n  /keys/{key}:\r\n    get:\r\n      parameters:\r\n        - name: key\r\n          in: path\r\n          required: true\r\n          type: string\r\n      responses:\r\n        200:\r\n          description: Successful response\r\n        404:\r\n          description: Not found\r\n    post:\r\n      parameters:\r\n        - name: key\r\n          in: path\r\n          required: true\r\n          type: string\r\n        - name: value\r\n          in: query\r\n          required: true\r\n          type: string\r\n      responses:\r\n        200:\r\n          description: Successful response\r\n\r\n```\r\n\r\n\r\n## Steps to reproduce\r\n\r\nI pushed everything needed to reproduce this issue at https://github.com/siadat/swagger-eg\r\n\r\n## Environment\r\nSwagger version: 2.0\r\nGo version: go version devel +6a3c6c0 Sat Jan 14 05:57:07 2017 +0000 linux/amd64\r\nOS: linux\r\n I tried to reproduce your issue as follows:\r\n\r\n```bash\r\ngo get -d github.com/siadat/swagger-eg\r\ncd $GOPATH/src/github.com/siadat/swagger-eg\r\nswagger generate server swagger.yaml --target=swagger\r\nswagger generate client swagger.yaml --target=swagger\r\ngo run server.go\r\ngo run client.go\r\n```\r\n\r\nAnd it seems to work as you would think, as I get a 200OK result:\r\n\r\n```\r\nPOST /api/v1/keys/k?value=v HTTP/1.1\r\nHost: localhost:8001\r\nUser-Agent: Go-http-client/1.1\r\nContent-Length: 0\r\nAccept: application/json\r\nAccept-Encoding: gzip\r\n\r\n\r\nHTTP/1.1 200 OK\r\nConnection: close\r\nContent-Length: 0\r\nContent-Type: application/json\r\nDate: Mon, 23 Jan 2017 21:26:27 GMT\r\n```\r\n\r\nAre you sure these are the reproduction steps that you followed @siadat? Or am I missing a step? Also can you please specify the swagger version by running `swagger version`. I am assuming you running the latest (dev) version because of your Makefile. Also are you sure you're testing your server using `go run client.go` and not via `curl`/`httpie`/`postman` or w/e. @casualjim How do I set the content-type? I am using the generated API and I cannot find the API to change the content-type or other request headers.\r\n\r\n@GlenDC I reproduced the issue using another computer. I got the same result (415).\r\n\r\n```\r\n$ go version\r\ngo version devel +5b708a6 Mon Jan 16 05:40:45 2017 +0000 linux/amd64\r\n\r\n$ swagger version\r\ndev\r\n```\r\n\r\nIn case it could be useful, here is the list of the last commit I have for go-swagger repo and each go-openapi repo:\r\n\r\n```\r\nb48220d 2017-01-23 github.com/go-swagger/go-swagger\r\nd5a75b7 2016-12-30 github.com/go-openapi/analysis\r\nfc3f73a 2017-01-04 github.com/go-openapi/errors\r\n779f453 2017-01-02 github.com/go-openapi/jsonpointer\r\n36d33bf 2016-11-05 github.com/go-openapi/jsonreference\r\n6bb6486 2017-01-17 github.com/go-openapi/loads\r\n3b13ebb 2017-01-19 github.com/go-openapi/runtime\r\n593aa4c 2017-01-16 github.com/go-openapi/spec\r\n0cb3db4 2017-01-12 github.com/go-openapi/strfmt\r\n96d7b9e 2016-12-25 github.com/go-openapi/swag\r\n035dcd7 2017-01-17 github.com/go-openapi/validate\r\n```\r\n\r\n It might be a good idea to check the generated files, perhaps compare them with the files that were generated in your case. For this purpose, I added them to the same https://github.com/siadat/swagger-eg repo. Another observation; instead of\r\n\r\n    go run server.go\r\n    go run client.go\r\n\r\nI ran\r\n\r\n    go run swagger/cmd/testman-server/main.go --port 8001\r\n    go run client.go\r\n\r\nGot the same 415 response. Found it.\r\n\r\nThe client API does not work with the latest development version of Go. This is the commit on which the client API stopped working: golang/go@4859f6a I think we all use Go as in released versions. Which for me at the moment is `go version go1.7.1 darwin/amd64` Does that mean you are not planning to support Go 1.8? It will be out in about a week. I think it will be supported. But only when it is released. @casualjim might know more about this though. Thank you. What's the current status of this? I'm getting this bug with go 1.8 stable.  We are encountering this error as well. Any update on this?  I couldn't find an example of using the generated client API. All examples are using the generated server API only.\r\n\r\nPlease provide a simple example of how to use the generated client API. Thanks Thank you, that's useful. I was looking for it in examples dir, I didn't check the docs dir.  ## Problem statement\r\nMulti-file swagger definition does not resolve correctly, or is ignored by\r\n    swagger generate client -f ./_api/swagger.yaml\r\n\r\n## Swagger specification\r\n### `project/_api/swagger.yaml`\r\n```\r\nswagger: '2.0'\r\ninfo:\r\n  title: Some API\r\n  description: Some API\r\n  version: \"1.0.0\"\r\n\r\nhost: someapi.com\r\n\r\nschemes:\r\n  - https\r\n\r\nbasePath: /v1/\r\n\r\nproduces:\r\n  - application/json\r\npaths:\r\n  /health_check:\r\n    $ref: ./paths/health_check.yaml\r\n```\r\n\r\n### `project/_api/paths/health_check.yaml`\r\n```\r\nget:\r\n  summary: Health Check\r\n  responses:\r\n    200:\r\n      description: Server OK\r\n```\r\n\r\n## Steps to reproduce\r\n1. Copy both specification data above into a folder `project`.\r\n1. Run from the `project` folder: `swagger generate client -f ./_api/swagger.yaml`\r\n\r\n## Expected Behaviour\r\nClient code generated with HealthCheck interfaces\r\n\r\n## Actual Behaviour\r\nClient code Generation completed with no interfaces for any path functionalities.\r\nconsole output:\r\n```\r\n2017/01/23 16:38:48 building a plan for generation\r\n2017/01/23 16:38:48 planning definitions\r\n2017/01/23 16:38:48 planning operations\r\n2017/01/23 16:38:48 grouping operations into packages\r\n2017/01/23 16:38:48 planning meta data and facades\r\n2017/01/23 16:38:48 rendering 1 templates for application Bookings\r\n2017/01/23 16:38:48 name field Bookings\r\n2017/01/23 16:38:48 package field client\r\n2017/01/23 16:38:48 creating \"bookings_client.go\" in \"client\" as facade\r\nGeneration completed!\r\n\r\nFor this generation to compile you need to have some packages in your GOPATH:\r\n\r\n  * github.com/go-openapi/runtime\r\n  * golang.org/x/net/context\r\n  * golang.org/x/net/context/ctxhttp\r\n\r\nYou can get these now with: go get -u -f ./...\r\n```\r\n\r\n## Environment\r\nswagger version: dev\r\ngo version: 1.7 linux/amd64\r\nOS: Linux Ubuntu 16.04LTS\r\n Thanks! `swagger flatten` did the trick. However, I am left wondering why `swagger generate` does not flatten the spec first. Isn't it safe to assume that `$ref` lines in a spec should be flattened?\r\n\r\nPS. I also got another bug from flattening but that isn't related to this. I will open a new issue for that. #1180   ## Problem statement\r\n\r\nDoes not run from a subdirectory in $GOPATH/src.\r\n\r\n## Steps to reproduce\r\n\r\n```sh\r\nsomewhere/on/gopath$ cd subdir && swagger generate server\r\n2017/01/22 06:43:08 building a plan for generation\r\n2017/01/22 06:43:08 target must reside inside a location in the $GOPATH/src\r\n```\r\n\r\n## Workaround\r\n```sh\r\nsomewhere/on/gopath$ swagger generate server --target=subdir\r\n[generates]\r\n```\r\n\r\nI'd use the workaround, but I have the command in `subdir/Makefile` and running with `make -C subdir`.\r\n Oh, actually, not true - what I changed was using the version from `brew install` rather than `go get`.\r\n\r\nSo it seems it doesn't care where the target is if the binary's in `$GOPATH/bin`?\r\n\r\nWhy does it need any relationship with `$GOPATH` anyway, at generate-time? Also it shouldn't make a difference if you use the brew version (installed in `/usr/local/bin`?) or the one from `$GOPATH/bin` though. Can you please give more details in your steps to reproduce this, as the problem might just be that you weren't in a valid $GOPATH, when trying to generate. > Because we use goimports to resolve imported libraries/packages\r\n\r\nOh, okay.\r\n\r\n> You're generating go code, so if you want to compile it, it would also need to be in a gopath\r\n\r\nYep, but I'm compiling it in a Docker container.\r\n\r\n> shouldn't make a difference if you use the brew version (installed in /usr/local/bin?)\r\n\r\nYep.\r\n\r\n> Can you please give more details in your steps to reproduce this\r\n\r\n```sh\r\n> $GOPATH/bin/swagger generate server [...]\r\n[...]\r\n2017/01/22 06:43:08 building a plan for generation\r\n2017/01/22 06:43:08 target must reside inside a location in the $GOPATH/src\r\n> $GOPATH/bin/swagger version\r\ndev\r\n> which swagger\r\n/usr/local/bin/swagger\r\n> swagger version\r\nversion: 0.8.0\r\ncommit: d1a0b6c1007402b2ccde73702eb0e8e43a5e7498\r\n> swagger generate server [...]\r\n[...]\r\nGeneration completed!For this generation to compile you need to have some packages in your GOPATH:\r\n\r\n  * github.com/go-openapi/runtime\r\n  * github.com/tylerb/graceful\r\n  * github.com/jessevdk/go-flags\r\n  * golang.org/x/net/context\r\n\r\nYou can get these now with: go get -u -f ./...\r\n``` What is your exact working directory (fully specified) at the point of generation? `~/projectname` - which isn't on my `$GOPATH` now I look at it. But it works despite that with the `go get`ted version. @OJFord you have anymore updates on this one? I ended up agreeing with @casualjim about running generation in the container, as long as I was able to write my handlers on the host machine without the generated stuff (cf. #888) to avoid needing to synchronise or use a volume.\r\n\r\nI haven't actually got that working yet because I ran into #656,  and had to leave it as I don't have time really.\r\n\r\nI'll close this though, as it seems I was basically expecting a behaviour to always occur that wasn't intentionally occurring at all.  fixes #881  @casualjim I replaced the original fix with the actual fix.\r\n\r\n`ValueExpression` is now added to the `GenHeader`. Also added your test, and checked the generated code also manually. Seems to be be all fine AFAIK. ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/885?src=pr) is 72.40% (diff: 100%)\n> Merging [#885](https://codecov.io/gh/go-swagger/go-swagger/pull/885?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will increase coverage by **0.07%**\n\n```diff\n@@             master       #885   diff @@\n==========================================\n  Files            21         21          \n  Lines          5894       5896     +2   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           4263       4269     +6   \n+ Misses         1182       1178     -4   \n  Partials        449        449          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [6d744eb...3e6300d](https://codecov.io/gh/go-swagger/go-swagger/compare/6d744eb2bbc9da1c5c86f8895ab93391b4d0c1da...3e6300d95ce94ae2f918e52ec4ad74e57de1bbc0?src=pr)  Struggling with go-swagger and mongoDB:\r\n*_id* returned from mongoDB using mgo driver is of type *bson.ObjectId*.\r\n\r\nExample model:\r\n```yaml\r\nMessage:\r\n  type: object\r\n  required:\r\n    - text\r\n  properties:\r\n    id:\r\n      type: string\r\n      readOnly: true\r\n    text:\r\n      type: string\r\n```\r\n\r\nWhen I get *Messages* from DB by\r\n```go\r\n...\r\nmessages := []*models.Message{}\r\nif err := c.Find(nil).All(&messages); err != nil {\r\n  log.Print(\"Error on getting messages: \", err)\r\n}\r\nreturn message.NewGetMessageOK().WithPayload(messages)\r\n```\r\nThe API response omitting the *id* property. Actually it's even stored as an empty string in mongoDB.\r\n```\r\nHTTP/1.1 200 OK\r\nContent-Length: 774\r\nContent-Type: application/json\r\nDate: Sat, 21 Jan 2017 20:53:08 GMT\r\n\r\n[\r\n  {\r\n    \"text\": \"string\"\r\n  }\r\n]\r\n```\r\nIs there any way to cast the *bson.ObjectId* to something that the generated server can work with or do I have to use the opposite approach by writing the server and generate the swagger spec afterwards?\r\nAnd by the way, what effect do readOnly have since it's possible to POST that parameter against the API? If you named your field `_id` instead of `id` I think you'd be able to read it. Like:\r\n\r\n```yaml\r\nMessage:\r\n  type: object\r\n  required:\r\n    - _id\r\n    - text\r\n  properties:\r\n    _id:\r\n      type: string\r\n    text:\r\n      type: string\r\n``` Already tested that. *_id* gets translated into *id* and returns as `_id=\"\"`.\r\nEven if I try to insert a model with *_id* as readOnly, it inserts as *id* into database. Weird, not sure why it gets translated. I'm using go-swagger with mongo models and it works ok. For example this [model spec](https://github.com/koding/koding/blob/master/website/swagger.json#L288) generates [this struct](https://github.com/koding/koding/blob/master/go/src/koding/remoteapi/models/j_account.go#L18). The swagger client is generated [with this command](https://github.com/koding/koding/blob/master/go/src/koding/remoteapi/remoteapi.go#L15).\r\n\r\n\ud83e\udd14 \r\n\r\n(btw I just found out - you can type \\_id in markdown by escaping the underscore like this `\\_id`) > And by the way, what effect do readOnly have since it's possible to POST that parameter against the API?\r\n\r\nLet me answer that question using the official specification:\r\n\r\n> Relevant only for Schema `\"properties\"` definitions. Declares the property as \"read only\". This means that it MAY be sent as part of a response but MUST NOT be sent as part of the request. Properties marked as `readOnly` being `true` SHOULD NOT be in the `required` list of the defined schema. Default value is `false`. - https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#schema-object @CuBiC3D can you please to try to explain the problem in a different way, as I fail to understand the exact issue here. Also do you have a link to your project, or is it closed source?\r\n\r\nEverything you describe in your issue description seems to behave as normal, AFAIK. So please help me help you, by helping me understand your situation exactly.\r\n\r\n> The API response omitting the id property. Actually it's even stored as an empty string in mongoDB.\r\n\r\nAs the `id` property isn't marked as required, it will have the `omitempty` json property annotation, and thus is omitted as expected as you can see in your response.\r\n\r\n> Already tested that. _id gets translated into id and returns as _id=\"\". Even if I try to insert a model with _id as readOnly, it inserts as id into database.\r\n\r\nThe renaming of _id might be exampled because of the automated name mangling, originating down to `swag.ToVarName`, although I think it might be a bug in case it actually affects your public interface's name. Can you please give a more detailed disruption of this specific issue as well, with steps on how to reproduce it.\r\n @rjeczalik escaping with `\\_id` leads to a more weird behavior. It generates\r\n```go\r\n// id\r\n// Required: true\r\nID *string `json:\"\\_id\"`\r\n```\r\nBut the actual output by `return message.NewGetMessageOK().WithPayload(messages)` gives me a capitalized `ID`.\r\n```\r\nHTTP/1.1 200 OK\r\nContent-Length: 794\r\nContent-Type: application/json\r\nDate: Sun, 22 Jan 2017 10:44:40 GMT\r\n\r\n[\r\n  {\r\n    \"ID\": null,\r\n...\r\n```\r\n@GlenDC Can't publish the source at this time, but can make a complete example if needed. But let me explain to make it clear: I can't use the generated models to interact with a mongoDB. Tried a bit around and found out where the actual problem is. Object transmission in mongoDB is using bson, not json. Go translates the Go models to bson just by converting them to lowercase, just like json. But here is the exception: `_id` which is represented in Go as `ID *string 'json:\"_id\"'`. mongoDB ignores the json tagged fields, and always translates `ID` into `id`. So storing requests or responding with any results from mongoDB is impossible.\r\n\r\nIf I edit the tags manually into `ID *string 'bson:\"_id\" json:\"_id\"'` it works:\r\n```\r\nHTTP/1.1 200 OK\r\nContent-Length: 891\r\nContent-Type: application/json\r\nDate: Sun, 22 Jan 2017 10:50:39 GMT\r\n\r\n[\r\n  {\r\n    \"_id\": \"X\ufffd\ufffdw\ufffdg\ufffd\ufffd3&\ufffd\",\r\n...\r\n```\r\nOk, actually it's garbage, but just because it's actually not a string but a bson.ObjectId. Changing it into `ID bson.ObjectId 'bson:\"_id\" json:\"_id\"'` gives me:\r\n```\r\nHTTP/1.1 200 OK\r\nContent-Length: 840\r\nContent-Type: application/json\r\nDate: Sun, 22 Jan 2017 11:06:54 GMT\r\n\r\n[\r\n  {\r\n    \"_id\": \"5883ed779e67b09e3326b67f\",\r\n...\r\n```\r\nThis is exactly what I expected to see as a response.\r\nSo the main question will be: Is it possible to set custom tags on fields for generation or any chance to set the bson.ObjectId type?\r\nIn my eyes the only way to handle this, is to make the project the 'other way' by writing the server in Go, make comments for swagger and generate the swagger file instead of the server right?\r\nBy the way, thank you for the help ;) > @rjeczalik escaping with \\_id leads to a more weird behavior. It generates\r\n\r\nOh, I meant Markdown in github comments - I've noticed you escape \\_id with italics __id_ so just wanted to share with my finding. Sorry for confusion. Currently there are no bson tags generated. However I don't think it would cause any harm if we would generate bson annotation tags alongside the json annotation tags. This would require an enhancement PR with updates for the `generator->template` code.\r\n\r\nI think that would be a neat way to resolve your issue. However perhaps @casualjim has another idea on this topic, as it would be great to get his input on this, before any work is done related to this. As he might know a way to make it all work for you, as swagger is in its current state.\r\n\r\nBy the way @CuBiC3D can you also please mention your swagger version? That would definitely allow to store and read swagger generated models in/from mongoDB with `readOnly: true` and `'bson: \"variable,omitempty\"'`, but that could be a breaking change in some special cases, where special characters has been used.\r\n\r\nAnother thing is the special type `bson.ObjectId` used by bson.\r\n\r\n@GlenDC \r\n```\r\n$ swagger version\r\nversion: 0.8.0\r\ncommit: d1a0b6c1007402b2ccde73702eb0e8e43a5e7498\r\n``` Yeah custom templates should fix this right? I tried forking structfield.gotmpl because it seemed to define the tags. But I get back an error message saying: \"Cannot overwrite protected template structfield\"\r\n\r\nWould it otherwise not be an idea to allow additional tags apart from just json? I'd say that this use case happens in more cases than just bson.\r\n\r\nThe type \"bson.ObjectId' would just be another type like github.com/go-openapi/strfmt I suppose. Wrapping it around the original bson objectId. Some templates can't be overridden as they are protected (https://github.com/go-swagger/go-swagger/blob/master/generator/template_repo.go#L135-L175), others are not (all other templates).\r\n\r\nIn case you require to modify such templates, you are most likely either hitting a wall because of limitations in go-openapi/go-swagger, or you are doing something weird. In case of the first option, the starting point would be to open an issue about this, describing your situation, such that a discussion can start and a solution can be found.\r\n\r\n@iain17 is correct, you might need to add support for bson specific objects in [github.com/go-openapi/strfmt](github.com/go-openapi/strfmt). By default these are used: https://github.com/go-openapi/strfmt/blob/master/default.go\r\n\r\n@CuBiC3D, Related is this open PR https://github.com/go-openapi/strfmt/pull/7/files; in that PR @roytan883 is providing Setters and Getters for the `DateTime` time. You might want to help him out with this, by also providing those for the other types. Would allow you to use the existing types, and still interact with BSON.\r\n\r\n> but that could be a breaking change in some special cases, where special characters has been used.\r\n\r\ncan you give an example of a breaking case? @GlenDC seems to me that this issue here: https://github.com/go-swagger/go-swagger/issues/353 is also connected with this problem with tags. I understand that the OpenApi spec isn't allowing go tags, so maybe this is more an issue with openapi.\r\n\r\nHowever for the time being it seems to me that the only way around this problem, is to have an external application go through the generated structs (models) from goswagger. The program would add the tags after the fact. (Bit hackish tho, I'd love to hear an alternative solution)\r\n\r\nhttps://github.com/favadi/protoc-go-inject-tag?files=1\r\n @GlenDC as soon the time makes it possible, I will support that PR with the new type.\r\nA breaking case would be every request that used a special character, got converted and resent to another external resource by bson. I don't think, that anybody did that outside the mongoDB context, but in combination with mongoDB for sure! Data fields from the database would map completely different on models.\r\n```\r\n_example -> example\r\nexample_var -> exampleVar\r\n$var -> dollarVar\r\n```\r\n\r\n@casualjim 2. It also regards reading from the database and responding. I understand that from the relational database point of view, it's fine to normalize data coming from a request, but on object orientated databases it's common to store/read subdocuments as-they-are or as the API spec describes them. In order to resolve the breaking case @CuBiC3D, you will probably have to work on issue (1), mentioned by @casualjim. Other then that, I'm looking forward to welcome your contribution to https://github.com/go-openapi/strfmt :)   ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/882?src=pr) is 72.32% (diff: 100%)\n> Merging [#882](https://codecov.io/gh/go-swagger/go-swagger/pull/882?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will not change coverage\n\n```diff\n@@             master       #882   diff @@\n==========================================\n  Files            21         21          \n  Lines          5894       5894          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4263       4263          \n  Misses         1182       1182          \n  Partials        449        449          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [d63b9a0...925f198](https://codecov.io/gh/go-swagger/go-swagger/compare/d63b9a0bcac14f77f23dbd75bea29bec6820dda5...925f19813d0b839f9b9910aa13e351849015f809?src=pr) @casualjim wow that was fast, Thanks!  Generated handler functions have this form:\r\n```go\r\napi.StaticSayHelloHandler = static.SayHelloHandlerFunc(func(params static.SayHelloParams) middleware.Responder {\r\n  return middleware.NotImplemented(\"operation static.SayHello has not yet been implemented\")\r\n})\r\n```\r\n\r\nHow you would implement [websockets](https://github.com/gorilla/websocket) HTTP upgrade function with go-swagger? Is there any way to access ResponseWriter and Request? An upgrade looks like this:\r\n```go\r\nfunc serveWs(hub *Hub, w http.ResponseWriter, r *http.Request) {\r\n  conn, err := upgrader.Upgrade(w, r, nil)\r\n  if err != nil {\r\n    log.Println(err)\r\n    return\r\n  }\r\n}\r\n``` Works like a charm, thank you! ;)  TODO: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/schemavalidator.gotmpl#L118 additional items are just a specialization of what we already have.\r\nit's a tuple with the last element being a slice  ## Problem statement\r\nAttempting to reference type utils.Error\r\n\r\n\r\n## Swagger specification\r\n```\r\npackage utils\r\n\r\n// swagger:response utils.Error\r\ntype Error {\r\n}\r\n```\r\n\r\n```\r\n// Responses:\r\n//  200: utils.Error\r\n```\r\n\r\nRemoving the dot and renaming the response reference to something like utilsError fixes this. I didn't see anything in the documentation about not working with dots, so this looks like a documentation bug.\r\n\r\n\r\n\r\n It's not documented anywhere, right now it is now allowed during parsing and I'm not sure if we want to allow punctuation or not. The official OpenAPI (Swagger 2.0) specs (see: https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) don't seem to say anything I can find about the legal characters possible for a name. It only seems to specify that names are case sensitive and must be unique. So that means that go-swagger is currently more strict than the specification specify (AFAIK).\r\n\r\nThe reason why your punctuation character currently does not work is because of the regex we use to parse that type of line as can be found here: https://github.com/go-swagger/go-swagger/blob/master/scan/scanner.go#L70\r\n\r\nChanging that regex to `swagger:response\\\\p{Zs}*(\\\\p{L}[\\\\p{L}\\\\p{N}\\\\p{Pd}\\\\p{Pc}\\\\p{Po}]+)?$` or `swagger:response\\\\p{Zs}*(\\\\p{L}[\\\\p{L}\\\\p{N}\\\\p{P}]+)?$` would make your request possible. I'm not sure if this is the only change required though, as we might also need to change a few other (validation) places to make such a change possible. Should in the end still be trivial though.\r\n\r\nThe more important question is what we really want a possibly legal name to be. I think keeping this as liberal as possible. But @casualjim might have a very different opinion about this. Once we all agree on what a legal name can consist of, it should be trivial to patch the code and/or update the documentation. Note that in case of documentation changes, it won't affect [the website](http://goswagger.io) until next release, and instead you can find the documentation up to date with latest master under the `./docs` directory. so I should be able to use `swagger:response` without any optional name, and it will be found for my route. In my experience, this did not work for `swagger:model`  ## Problem statement\r\n\r\nWhen deserializing JSON from a server that has date formats that look like this: `2017-01-17T22:58:45`, I get a parsing error:\r\n```\r\nparsing time \\\"\\\"2017-01-17T22:58:45\\\"\\\" as \\\"\\\"2006-01-02T15:04:05Z07:00\\\"\\\": cannot parse \\\"\\\"\\\" as \\\"Z07:00\\\"\r\n```\r\n\r\n## Steps to reproduce\r\nTry to deserialize `2017-01-17T22:58:45` into a strfmt.DateTime field\r\n\r\n\r\n\r\nSuggestions?  I tried manually changing the generated code to a time.Time, but still get the error.\r\n  ## Problem statement\r\n\r\nEnum definitions generate type aliases when defined in the separate _definitions_ section, but those same type aliases are not generated when defining the enum as a property of an inline definition.\r\n\r\nType aliases also don't seem to be generated when defined as a parameter, inline or not.\r\n\r\nBasically type aliases for enum values should always be generated as constants, where possible. This to prevent from having to hardcode these values otherwise when used (indirectly) within handler and/or client code.\r\n\r\nOriginally proposed in issue #861 Enums occur in following locations, and should generate type aliases in all of them:\r\n\r\n- non-body parameter:\r\n  - [ ] inline (1);\r\n  - [ ] ref (2);\r\n- header object (used to send headers along with responses);\r\n  - [ ] inline (3);\r\n- items object (used to describe array items):\r\n  - [ ] inline (4);\r\n  - [ ] ref (5) (already working pre-PR as a solution to this issue!); The behavior as it is, while this issue is unresolved, only generates type aliases for enumerations for situations (5). This situation is what @casualjim is talking about, as a solution to issue 3 of @kojustin's list in issue #861 \r\n\r\n@casualjim are any of the 5 listed situations above, situations where you think enum aliases are probably not needed. I do start to like that you should hint the compiler when you want an explicit definition. As this gives more flexibility. In which case for sure I would require type aliases for situations (2). Or perhaps we should simply support all 5 possible situations. What you think @casualjim?  ## Problem statement\r\nWhen I write the model schema directly into the query (and not use separete definition for the model) the validations like maxLength, required do not generates for the model. But when I but the schama in the definition section, and $ref to it, the validations are get generated.\r\n\r\n## Swagger specification\r\n```yaml\r\nresponses:\r\n        200:\r\n          description: Success\r\n          schema:\r\n            required:\r\n              - data\r\n            properties:\r\n              data:\r\n                required:\r\n                  - account_id\r\n                  - access_token\r\n                properties:\r\n                  account_id:\r\n                    type: integer\r\n                    format: int64\r\n                  access_token:\r\n                    type: string\r\n                    maxLength: 64\r\n```\r\n\r\n  ## Problem statement\r\n\r\nhttps://goswagger.io/generate/client.html\r\n\r\nThe instructions on this page state the following:\r\n\r\n`If you want to debug what the client is sending and receiving you can set the environment value DEBUG to a non-empty value.`\r\n\r\nI'm trying to debug what a client I generated with go-swagger is sending and receiving but I'm not seeing any output other than the error I'm catching: \"context deadline exceeded\". \r\n\r\nI set an env variable, `export DEBUG=true` before generating and using the packages, but it doesn't appear to be creating any extra output. I searched the generated code and don't see any attempts to read a \"DEBUG\" env var.\r\n\r\nIs this a bug in the docs or am I interpreting it wrong?\r\n\r\nThanks,\r\nEvan\r\n @casualjim: the code and the documentation do specify slightly different behavior:\r\n\r\nThe documentation specifies:\r\n\r\n> If you want to debug what the client is sending and receiving you can set the environment value DEBUG to a non-empty value.\r\n\r\nYet the code (https://github.com/go-openapi/runtime/blob/master/client/runtime.go#L158) specifies:\r\n\r\n```go\r\nrt.Debug = os.Getenv(\"DEBUG\") == \"1\"\r\n```\r\n\r\nI think the documentation makes more sense, as it's the more common liberal approach. So should I open a PR in https://github.com/go-openapi/runtime to make the documentation and code match once again?  ## Problem statement\r\n\r\nWhen generating code for fields that are enums, the generated code is poor.\r\n\r\n1. The validation logic needs an \"init\" function to populate a global singleton. The init function does an json.Unmarshal to extract the values it wants to compare against. However, the values are constants that are embedded into the swagger spec. The init function and this global could be replaced by referring to the constants StatusStatusBad, StatusStatusHorrible, etc. which are already generated.\r\n\r\n2. It shouldn't need to import \"github.com/go-openapi/validate\" to validate a string is one of the enum values. Requiring another dependency for this is kind of lame.\r\n\r\n3. It would be nice if the enum introduced a new type alias. This helps preserve the intention behind the enum (to separate from the underlying type, to limit the possible set of values).\r\n\r\n```\r\ntype Status string\r\n\r\nconst (\r\n\t// StatusStatusGood captures enum value \"Good\"\r\n\tStatusStatusGood Status = \"Good\"\r\n\t// StatusStatusBad captures enum value \"Bad\"\r\n\tStatusStatusBad = \"Bad\"\r\n\t// StatusStatusOk captures enum value \"Ok\"\r\n\tStatusStatusOk = \"Ok\"\r\n\t// StatusStatusDecent captures enum value \"Decent\"\r\n\tStatusStatusDecent = \"Decent\"\r\n\t// StatusStatusMiddling captures enum value \"Middling\"\r\n\tStatusStatusMiddling = \"Middling\"\r\n\t// StatusStatusHorrible captures enum value \"Horrible\"\r\n\tStatusStatusHorrible = \"Horrible\"\r\n)\r\n```\r\n\r\n\r\n\r\n\r\n## Swagger specification\r\n```\r\ndefinitions:\r\n  Status:\r\n    type: object\r\n    description: |\r\n      some object\r\n    properties:\r\n      status:\r\n        description: status\r\n        type: string\r\n        enum:\r\n          - Good\r\n          - Bad\r\n          - Ok\r\n          - Decent\r\n          - Middling\r\n          - Horrible\r\n```\r\n\r\n## Steps to reproduce\r\n```\r\n$ /usr/local/Cellar/go-swagger/0.8.0/bin/swagger generate model --spec=swag.yml\r\n$ cat models/status.go \r\npackage models\r\n\r\n// This file was generated by the swagger tool.\r\n// Editing this file might prove futile when you re-run the swagger generate command\r\n\r\nimport (\r\n\t\"encoding/json\"\r\n\r\n\tstrfmt \"github.com/go-openapi/strfmt\"\r\n\t\"github.com/go-openapi/swag\"\r\n\r\n\t\"github.com/go-openapi/errors\"\r\n\t\"github.com/go-openapi/validate\"\r\n)\r\n\r\n// Status some object\r\n//\r\n// swagger:model Status\r\ntype Status struct {\r\n\r\n\t// status\r\n\tStatus string `json:\"status,omitempty\"`\r\n}\r\n\r\n// Validate validates this status\r\nfunc (m *Status) Validate(formats strfmt.Registry) error {\r\n\tvar res []error\r\n\r\n\tif err := m.validateStatus(formats); err != nil {\r\n\t\t// prop\r\n\t\tres = append(res, err)\r\n\t}\r\n\r\n\tif len(res) > 0 {\r\n\t\treturn errors.CompositeValidationError(res...)\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nvar statusTypeStatusPropEnum []interface{}\r\n\r\nfunc init() {\r\n\tvar res []string\r\n\tif err := json.Unmarshal([]byte(`[\"Good\",\"Bad\",\"Ok\",\"Decent\",\"Middling\",\"Horrible\"]`), &res); err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tfor _, v := range res {\r\n\t\tstatusTypeStatusPropEnum = append(statusTypeStatusPropEnum, v)\r\n\t}\r\n}\r\n\r\nconst (\r\n\t// StatusStatusGood captures enum value \"Good\"\r\n\tStatusStatusGood string = \"Good\"\r\n\t// StatusStatusBad captures enum value \"Bad\"\r\n\tStatusStatusBad string = \"Bad\"\r\n\t// StatusStatusOk captures enum value \"Ok\"\r\n\tStatusStatusOk string = \"Ok\"\r\n\t// StatusStatusDecent captures enum value \"Decent\"\r\n\tStatusStatusDecent string = \"Decent\"\r\n\t// StatusStatusMiddling captures enum value \"Middling\"\r\n\tStatusStatusMiddling string = \"Middling\"\r\n\t// StatusStatusHorrible captures enum value \"Horrible\"\r\n\tStatusStatusHorrible string = \"Horrible\"\r\n)\r\n\r\n// prop value enum\r\nfunc (m *Status) validateStatusEnum(path, location string, value string) error {\r\n\tif err := validate.Enum(path, location, value, statusTypeStatusPropEnum); err != nil {\r\n\t\treturn err\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc (m *Status) validateStatus(formats strfmt.Registry) error {\r\n\r\n\tif swag.IsZero(m.Status) { // not required\r\n\t\treturn nil\r\n\t}\r\n\r\n\t// value enum\r\n\tif err := m.validateStatusEnum(\"status\", \"body\", m.Status); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n\r\n```\r\n\r\n\r\n +1 to expand the type alias behavior to inline enum definitions. @casualjim I'll open a new issue for this, as it seems to deviate from this context.  ## Problem statement\r\n\r\n`swagger validate` produces some pretty unhelpful error messages, such as `object has no key \"\"` for the following incomplete swagger spec.\r\n\r\nContrast with an online Swagger validator like http://bigstickcarpet.com/swagger-parser/www/index.html (based on https://github.com/BigstickCarpet/swagger-parser) which specifically calls out:\r\n\r\n```\r\nError resolving $ref pointer \"#/responses/\". \r\nToken \"responses\" does not exist.\r\n```\r\n\r\nMuch more helpful.\r\n\r\n## Swagger specification\r\n\r\n```\r\n{\r\n  \"consumes\": [\r\n    \"application/json\"\r\n  ],\r\n  \"produces\": [\r\n    \"application/json\"\r\n  ],\r\n  \"schemes\": [\r\n    \"http\"\r\n  ],\r\n  \"swagger\": \"2.0\",\r\n  \"info\": {\r\n    \"description\": \"description\",\r\n    \"title\": \"title\",\r\n    \"version\": \"1.0\"\r\n  },\r\n  \"host\": \"localhost\",\r\n  \"basePath\": \"/\",\r\n  \"paths\": {\r\n    \"/v1/authenticate\": {\r\n      \"get\": {\r\n        \"summary\": \"Authenticate with a token (JWT).\",\r\n        \"operationId\": \"authHandler\",\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"$ref\": \"#/responses/\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"definitions\": {}\r\n}\r\n````\r\n\r\n## Steps to reproduce\r\n\r\n```\r\n\u276f swagger validate swagger.json\r\nThe swagger spec at \"swagger.json\" is invalid against swagger specification 2.0. see errors :\r\n- object has no key \"\"\r\n```\r\n\r\n I'd like to suggest this issue be closed, or at least raised to the go-openapi/jsonpointer repository.\r\n\r\nThis error:\r\n1) is perfectly valid - parsing `\"#/responses/\"` has resulted in an empty key\r\n2) is being generated by go-openapi/jsonpointer\r\n3) doesn't possess the document context sufficient to provide a line number for where it has been generated (but that's again, a matter for the jsonpointer package) @aleksclark By all means, if the issue is in a dependency, it makes sense to open an issue there. (I had no way of knowing that).  ## Problem statement\r\n\r\nA type, using allOf, generated by 0.7.4, doesn't implement MarshalJSON and UnmarshalJSON and works properly.  This same type, generated by 0.8.0, includes these functions, and they're broken.  \r\n## Swagger specification\r\n\r\n```yaml\r\nswagger: '2.0'\r\n\r\ninfo:\r\n  title: \"\"\r\n\r\npaths:\r\n  /execute:\r\n    post:\r\n      responses:\r\n        200:\r\n          schema:\r\n            type: \"array\"\r\n            items:\r\n              $ref: \"#/definitions/ExecuteParametersWorkspace\"\r\n\r\ndefinitions:\r\n  ExecuteParameters:\r\n    type: \"object\"\r\n    properties:\r\n      WantGeometry:\r\n        type: \"boolean\"\r\n\r\n  ExecuteParametersWorkspace:\r\n    allOf:\r\n    - $ref: \"#/definitions/ExecuteParameters\"\r\n    - required:\r\n      - \"Workspace\"\r\n      properties:\r\n        Workspace:\r\n          type: \"string\"\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n`swagger generate server`\r\n\r\nBroken functions in 0.8.0:\r\n\r\n```go\r\n// UnmarshalJSON unmarshals this object from a JSON structure\r\nfunc (m *ExecuteParametersWorkspace) UnmarshalJSON(raw []byte) error {\r\n\r\n\tvar aO0 ExecuteParameters\r\n\tif err := swag.ReadJSON(raw, &aO0); err != nil {\r\n\t\treturn err\r\n\t}\r\n\tm.ExecuteParameters = aO0\r\n\r\n\treturn nil\r\n}\r\n\r\n// MarshalJSON marshals this object to a JSON structure\r\nfunc (m ExecuteParametersWorkspace) MarshalJSON() ([]byte, error) {\r\n\tvar _parts [][]byte\r\n\r\n\taO0, err := swag.WriteJSON(m.ExecuteParameters)\r\n\tif err != nil {\r\n\t\treturn nil, err\r\n\t}\r\n\t_parts = append(_parts, aO0)\r\n\r\n\treturn swag.ConcatJSON(_parts...), nil\r\n}\r\n```\r\n Curious what do you mean `broken functions` in 0.8.0? Just tested with the above spec, not seeing errors though. @Simon-Li, he probably means the fact that the `Workspace` property isn't (de)serialized. @casualjim what's actually the reason that you added an explicit Marshal-/UnmarshalJSON function in v0.8.0 (https://github.com/go-swagger/go-swagger/commit/de870963a73dd4cc2f2d11d0099e51b26eb33020)? In what cases was the implicit version not good enough? @GlenDC Yes, that's what I meant.  Thanks for clarifying.  I totally missed that I didn't say how it was broken.\r\n @casualjim but AFAIK the default marshaller works fine with inheritance, did a play ground test before asking my previous question to be sure. Can you give a situation where the implicit marshaler wouldn't work? [Update: I just realized this may be a related but different issue, since it's in 0.7.4]\r\n[Update2: and this issue has been fixed in 0.8.0: `if err != nil && err != io.EOF`]\r\n\r\nLooks like this \"use the polymorphic marshal\" is triggered by the type having a property that is a parametric type or an array of a polymorphic type:\r\n\r\n```yaml\r\n  Values:\r\n    type: \"object\"\r\n    properties:\r\n      Value:\r\n        $ref: \"#/definitions/Value\"\r\n      Array:\r\n        type: \"array\"\r\n        items:\r\n          $ref: \"#/definitions/Value\"\r\n\r\n  Value:\r\n    type: \"object\"\r\n    discriminator: \"ValueType\"\r\n    required:\r\n    - \"ValueType\"\r\n    properties:\r\n      ValueType:\r\n        type: \"string\"\r\n\r\n  ValueNumber:\r\n    allOf:\r\n    - $ref: \"#/definitions/Value\"\r\n    - required:\r\n      - \"Value\"\r\n      properties:\r\n        Value:\r\n          type: \"number\"\r\n```\r\n\r\nThis function is failing because I only set one or the other of `Array` or `Value` (since Swagger doesn't have `anyOf` yet), and this returns an error at the read of `Value` when it isn't provided.  It checks to see if `Array` is there before it tries to read it, but not `Value`.\r\n\r\n```go\r\n// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure\r\nfunc (m *Values) UnmarshalJSON(raw []byte) error {\r\n\tvar data struct {\r\n\t\tArray json.RawMessage `json:\"Array,omitempty\"`\r\n\r\n\t\tValue json.RawMessage `json:\"Value,omitempty\"`\r\n\t}\r\n\r\n\tbuf := bytes.NewBuffer(raw)\r\n\tdec := json.NewDecoder(buf)\r\n\tdec.UseNumber()\r\n\r\n\tif err := dec.Decode(&data); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tvar array []Value\r\n\r\n\tbuf = bytes.NewBuffer(raw)\r\n\tdec = json.NewDecoder(buf)\r\n\tdec.UseNumber()\r\n\r\n\tuntypedObj := make(map[string]interface{})\r\n\tif err := dec.Decode(&untypedObj); err != nil {\r\n\t\treturn err\r\n\t}\r\n\tif untypedArray, ok := untypedObj[\"Array\"]; ok {\r\n\t\tif slcArray, ok := untypedArray.([]interface{}); ok {\r\n\t\t\tfor _, slcEl := range slcArray {\r\n\t\t\t\tslcJSON, _ := json.Marshal(slcEl)\r\n\t\t\t\tslcObj, err := UnmarshalValue(bytes.NewBuffer(slcJSON), runtime.JSONConsumer())\r\n\t\t\t\tif err != nil {\r\n\t\t\t\t\treturn err\r\n\t\t\t\t}\r\n\t\t\t\tarray = append(array, slcObj)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvalue, err := UnmarshalValue(bytes.NewBuffer(data.Value), runtime.JSONConsumer())\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tvar result Values\r\n\tresult.Array = array\r\n\tresult.Value = value\r\n\t*m = result\r\n\treturn nil\r\n}\r\n```\r\n\r\nHere is the json that it's trying to unmarshal, to an array of `Values` objects:\r\n```json\r\n[ { \"Value\": { \"ValueType\": \"ValueNumber\", \"Value\": 2 } } ,\r\n  { \"Array\": [ { \"ValueType\": \"ValueNumber\", \"Value\": 0 } ] } ]\r\n``` I used the latest swagger today, and it's still broken, i.e: the properties other than allOf are not marshaled/un-marshaled. It's broken since 71225c4a7882ae49cd57e22292a58dff382908e8.\r\nWould some one bring this fix in?\r\nThanks I created a new issue about this. https://github.com/go-swagger/go-swagger/issues/1042  Quick fix for #844. @casualjim Done.\r\n\r\nWhat about adding actual stale file check to your ci? It'd be something like:\r\n\r\n```diff\r\n$ git diff HEAD~1\r\ndiff --git a/appveyor.yml b/appveyor.yml\r\nindex c072bad..6a03635 100644\r\n--- a/appveyor.yml\r\n+++ b/appveyor.yml\r\n@@ -44,6 +44,10 @@ install:\r\n   - go get -u gopkg.in/matm/v1/gocov-html\r\n   - go get -u github.com/cee-dub/go-junit-report\r\n \r\n+  # check for stale files\r\n+  - go generate -v ./generator\r\n+  - git diff --exit-code ./generator\r\n+\r\n build_script:\r\n   - cd %APPVEYOR_BUILD_FOLDER%\r\n   - echo %PATH%\r\ndiff --git a/generator/shared.go b/generator/shared.go\r\nindex 81df7c3..38564ef 100644\r\n--- a/generator/shared.go\r\n+++ b/generator/shared.go\r\n@@ -34,7 +34,7 @@ import (\r\n        \"golang.org/x/tools/imports\"\r\n )\r\n \r\n-//go:generate go-bindata -pkg=generator -ignore=.*\\.sw? ./templates/...\r\n+//go:generate go-bindata -mode 420 -modtime 1482416923 -pkg=generator -ignore=.*\\.sw? ./templates/...\r\n \r\n // LanguageOpts to describe a language to the code generator\r\n type LanguageOpts struct {\r\n``` @casualjim Please don't merge yet, testing if the check works. @casualjim Ok, looks like .git directory is removed from go-swagger before install stage:\r\n\r\n```\r\ngit diff --exit-code ./generator\r\nNot a git repository\r\nTo compare two paths outside a working tree:\r\nusage: git diff [--no-index] <path> <path>\r\nCommand exited with code 129\r\n```\r\n\r\nIt'd require more work, for a separate PR - let's merge the fix first. ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/845?src=pr) is 69.28% (diff: 100%)\n> Merging [#845](https://codecov.io/gh/go-swagger/go-swagger/pull/845?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will not change coverage\n\n```diff\n@@             master       #845   diff @@\n==========================================\n  Files            21         21          \n  Lines          5863       5863          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4062       4062          \n  Misses         1388       1388          \n  Partials        413        413          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [cfe9a99...0e9bb68](https://codecov.io/gh/go-swagger/go-swagger/compare/cfe9a99bc0c254c94420b6e1f034ce5c5f1a813b...0e9bb688107e58483b4f9d00edc30255fe4616ea?src=pr) Previous fix was wrong, I've stripped package from wrong variable - it should be GoType instead.\r\n\r\nHow to best add a test for building fixtures/codegen/issue844.json? @rjeczalik you can do so by adding a (unit) Test function named `TestIssue844` in https://github.com/go-swagger/go-swagger/blob/master/generator/model_test.go. There you can load the spec file, which it should be able to load without any errors. After that you could, if applicable, also test specifics. In the `model_test.go` file you'll see other examples that could give you inspiration if needed. Once you added the unit test @rjeczalik, you'll have to also fetch & rebase the latest master branch into your personal feature branch. You can resolve the conflict of `generator/bindata.go`, simply by generating a new one yourself, which contains both the latest templates (which you've just fetched & rebased) and your changes already committed in this PR.\r\n\r\nOnce that's done this PR is good to go :) I've added a test that generates a client and then tries to build it. The test currently fails due to a different problem:\r\n\r\n```\r\n--- FAIL: TestGenerateAndBuild (0.28s)\r\n    --- FAIL: TestGenerateAndBuild/issue_844 (0.28s)\r\n        build_test.go:40: go get ../fixtures/bugs/844/generated398758314/...: exit status 2\r\n                # github.com/go-swagger/go-swagger/fixtures/bugs/844/generated398758314/client/operations\r\n                ../fixtures/bugs/844/generated398758314/client/operations/get_responses.go:117: o.Foo.Validate undefined (type models.Foo is interface with no methods)\r\n                ../fixtures/bugs/844/generated398758314/client/operations/get_responses.go:121: o.Bar.Validate undefined (type models.Bar is interface with no methods)\r\n```\r\n\r\nIndeed the generated models lack a Validate method. Not quite sure it's a regression, as every other test passes:\r\n\r\n```\r\n$ go test -run -TestGenerateAndBuild\r\nPASS\r\nok      github.com/go-swagger/go-swagger/generator      0.197s\r\n```\r\n\r\nProbably we'd want to have this problem also fixed before merging, so we do not have a broken master. @rjeczalik I think your test file triggered a bug in the current generator code already on master.\r\n\r\nThe template responsible for your non-compiable code can be found here: https://github.com/go-swagger/go-swagger/blob/master/generator/templates/schemavalidator.gotmpl#L251\r\n\r\nThe appropriate fix would probably be to ensure that we don't try to validate in case it's an interface. So within that range you're probably missing an if/conditional check to ensure it's indeed not an interface or I suppose it's called discriminator in Swagger/OpenAPI terms.\r\n\r\nWould be cool if you could fix this alongside your other commits within this PR.\r\n\r\nAlso don't forget to rebase origin/master into your branch. > Also don't forget to rebase origin/master into your branch.\r\n\r\nAlready rebased.\r\n\r\n> Would be cool if you could fix this alongside your other commits within this PR.\r\n\r\nSure, will take a look. @GlenDC Fixed, please take a look. Thank you for the extra effort @rjeczalik, very much appreciated. @GlenDC You're welcome :-)  generate & run tests using data generators from #98 given as vendor extensions within the given swagger spec file. A host can be given optionally, to override the default one in the spec.\r\n I think they are related.\r\n\r\nThis issue is about providing a command `swagger test`, which has than a couple of optional parameters to override the host, spec-file and perhaps some other settings.\r\n\r\nIt probably does make sense to piggyback on the generated client, and thus also on #100, as that is probably about generating test requests using #98's data generator. However it would be nice if this command would also exist and thus make it work a bit more automatic?\r\n\r\nOr what's your vision on this @casualjim ?  The implementation is hinted by #837 . ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/840?src=pr) is 69.28% (diff: 100%)\n> Merging [#840](https://codecov.io/gh/go-swagger/go-swagger/pull/840?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will not change coverage\n\n```diff\n@@             master       #840   diff @@\n==========================================\n  Files            21         21          \n  Lines          5863       5863          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           4062       4062          \n  Misses         1388       1388          \n  Partials        413        413          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e4738db...b7e9fed](https://codecov.io/gh/go-swagger/go-swagger/compare/e4738db4379c006136cdc6108b7920c4e3dccb86...b7e9fed2900629f265810a64e00b4759ed20ff16?src=pr) Should I run `go generate ./generator` and push the result if a template is changed? Previously I changed templates but did not do this step though.  Got it, thank-you! @casualjim   Per @casualjim advice, a new method (ValidateNamed) should be considered to add in order to support validation errors with proper names. This is especially useful for the use case of aliased property types, in which a model can be referenced commonly (via $ref) by another property. For the sake of cleanness for the existing `Validate` implementation, the `ValidateNamed` method is therefore taken into this implementation. @casualjim Woo... great hints! will verify it.  https://coverage.vmware.run/go-swagger/go-swagger  ## Problem statement\r\n\r\n```yml\r\n/static/html:\r\n    get:\r\n      tags:\r\n        - common\r\n      operationId: GetHtmlPage\r\n      produces:\r\n        - text/plain; charset=utf-8\r\n      responses:\r\n        200:\r\n          description: OK\r\n          schema:\r\n            type: string\r\n        404:\r\n          description: Not found\r\n        403:\r\n          description: Forbidden\r\n```\r\n\r\n## Request\r\n```\r\nGET http://......./v1/static/html?query=123 HTTP/1.1\r\nHost: ..........\r\nAccept: text/plain; charset=utf-8\r\nAccept-Encoding: gzip,deflate,sdch\r\nAccept-Language: en-US,en;q=0.8,fa;q=0.6,sv;q=0.4\r\nCache-Control: no-cache\r\nConnection: keep-alive\r\nOrigin: http://editor.swagger.io\r\nReferer: http://editor.swagger.io/\r\nUser-Agent: .....\r\n```\r\n## Response\r\n```\r\nHeaders\r\n Object\r\nContent-Type:  \"\"\r\nBody\r\n \"\"\\u003cdiv\\u003e\\u003ch3\\u003eHi how are you\\u003c/h3\\u003e\\u003c/div\\u003e\"\r\n```\r\n\r\nQuestion:\r\nWhy content-type returned is empty? Thanks a lot you need api.TxtProducer = runtime.TextProducer()\r\n\r\ntry: \r\n```yaml\r\nproduces:\r\n        - text/plain\r\n```\r\n\r\n**without charset=utf-8**\r\n\r\n  Hi,\r\n\r\nI'm struggling a bit to generate external API documentation from my existing go code. I was hoping that by using go-swagger I could skip the potentially a few releases behind manually edited swagger.json file, is anyone doing that with go-swagger?\r\n\r\nI've got a two questions, sorry if these are repeats but I have spent a fairly long time lurking the issues and the documentation:\r\n\r\nIt seems to me that in 'swagger:params' (and model/response for that matter) are Format, Pattern, Type and Example completely ignored? I get them concatenated to my description field in the resulting JSON, except Example which just gets ignored.\r\n\r\nIs it at all possible to use something else than `json:\"\"` for the naming of variables? Either taking it as a parameter when generating or going for swagger instead? It's easy to bump into clashes when needing something for internal json for a struct and wanting to have another name for the consumer.\r\n\r\nThanks a bunch for all the work put into this!\r\n\r\n Thanks, great.\r\n\r\nI'm not entirely sure with regards to the Example tag. In my case I have a map[string]int representing tags and tag count in my swagger:response and rather than showing up as \"tags: {}\" in swagger I'd like to be able to put in an example json string. So for me:\r\n\r\n```\r\n//swagger:response\r\ntype resultEnvelop struct {\r\n  // Example: { \"foo\": 10, \"bar\": 20 }\r\n  Tags map[string] `json:\"tags\"`\r\n}\r\n```\r\nWould be perfect in my case. That is, being able to override analysis of the type and replace it with the string after the Example tag. I'm not sure this is something that's generally useful to everyone though.\r\n\r\n\r\n Is there any chance examples will be supported for `swagger:response`?\r\n\r\nFor Example:\r\n```\r\n// swagger:response\r\ntype Response struct {\r\n\t// example: somebrand\r\n\tBrandID string `json:\"brandId\"`\r\n\t// example: 1500000000000\r\n\tFirstRecordedDate int64 `json:\"firstRecordedDate\"`\r\n\t// example: 1500023000000\r\n\tLastRecordedDate int64 `json:\"lastRecordedDate\"`\r\n}\r\n```\r\n\r\nOr to be able to put in an example json string would be nice too, like @jmojon showed above, because in most places in the server I am working on we use `map[string]interface{}` to create json response bodies.  If there is another place able to pull the defaults without introducing a new `Default` field in `GenSchema` (and feeding into the templates), the following would be revised. ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/829?src=pr) is 68.94% (diff: 100%)\n> Merging [#829](https://codecov.io/gh/go-swagger/go-swagger/pull/829?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will decrease coverage by **0.26%**\n\n```diff\n@@             master       #829   diff @@\n==========================================\n  Files            21         19     -2   \n  Lines          5809       5567   -242   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           4020       3838   -182   \n+ Misses         1382       1351    -31   \n+ Partials        407        378    -29   \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [2e5a78e...3d71271](https://codecov.io/gh/go-swagger/go-swagger/compare/2e5a78e9549417b16031a9f7a9b85a109950b6d5...3d71271b3b462d95a4df1012b6d4753462406eff?src=pr)  ## Problem statement\r\n\r\nI have a valid definition that generates but it seems like the inner schema object is not generated correctly.\r\n\r\n## Swagger specification\r\n\r\nRelevant schema snippet:\r\n\r\n```\r\n\"post\": {\r\n                \"operationId\": \"invitation_invite\",\r\n                \"parameters\": [\r\n                    {\r\n                        \"name\": \"body\",\r\n                        \"in\": \"body\",\r\n                        \"description\": \"Email to invite\",\r\n                        \"required\": true,\r\n                        \"schema\": {\r\n                            \"type\": \"array\",\r\n                            \"uniqueItems\": true,\r\n                            \"items\": {\r\n                                \"type\": \"object\",\r\n                                \"required\": [\r\n                                    \"email\"\r\n                                ],\r\n                                \"properties\": {\r\n                                    \"email\": {\r\n                                        \"type\": \"string\"\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                ],\r\n```\r\n## Steps to reproduce\r\n\r\nWhen building I get the following error:\r\n```[...]/restapi/operations/invitation_invite_parameters.go:48: undefined: InvitationInviteParamsBodyItems0```\r\n I have a few deep structure under _definitions_ that works just fine, I've only seen this when declared directly in the operation.  ## Problem statement\r\nOn first go generate, the that import statement is missing. But issue second go generate without cleaning, that import statement will be included. But only on the code generated responses.\r\nMakign any call to if err := validate.Required fail because of missing imports\r\n\r\n## Swagger specification\r\nCannot incldue the whole spec but only the area that is causing the issue.\r\n# define reusable parameters:\r\n\r\n```yaml\r\nparameters:\r\n  MaxResults:\r\n    name: maxResults\r\n    required: false\r\n    description: xXXXXXXXXXXXXX.\r\n    type: number\r\n    format: integer\r\n    default: 100\r\n    minimum: 0\r\n    maximum: 10000\r\n    exclusiveMinimum: true\r\n    exclusiveMaximum: false\r\n    in: query\r\n\r\npaths:\r\n  /Logs:\r\n    get:\r\n      operationId: \"getLogs\"\r\n      summary: YYYYYYYYYYYYYY\r\n      parameters:\r\n       - $ref: \"#/parameters/MaxResults\"\r\n.......\r\n      responses:\r\n        200:\r\n          description: XXXXXXXXXXXXXX\r\n          schema:\r\n            type: object\r\n            properties:\r\n              nextToken:\r\n                type: string\r\n              assets:\r\n                $ref: '#/definitions/Services'     <<<<---------\r\n```\r\n## Steps to reproduce\r\nFirst go generate\r\nSecond go generate  will include the missing import statement. I checked vendor.json and it shows:\r\n\r\n\t{\r\n\t\t\t\"checksumSHA1\": \"6UO+LC1EPixDQliIfk7XC/ikcJg=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/validate\",\r\n\t\t\t\"revision\": \"027696d4b54399770f1cdcc6c6daa56975f9e14e\",\r\n\t\t\t\"revisionTime\": \"2016-10-15T05:30:59Z\"\r\n\t\t}, I tried to update to the latest validate but it seems worse off \r\n..... \r\nvendor/github.com/go-openapi/validate\r\nvendor/github.com/go-openapi/validate/spec.go:198: s.spec.SpecFilePath undefined (type *loads.Document has no field or method SpecFilePath)\r\nvendor/github.com/go-openapi/validate/spec.go:199: undefined: spec.ResolveRefWithBase\r\nvendor/github.com/go-openapi/validate/spec.go:199: undefined: spec.ExpandOptions\r\nvendor/github.com/go-openapi/validate/spec.go:623: s.spec.SpecFilePath undefined (type *loads.Document has no field or method SpecFilePath)\r\n\r\nI cannot attach the whole vendor.json but only the lines about go-openapi\r\n\r\nPart of the vendor.json that contains infor on go-openapi:\r\n\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"Ws2ljgpeN1KOb3np3u/18pPjZvo=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/analysis\",\r\n\t\t\t\"revision\": \"7222828b8ce19afee3c595aef6643b9e42150120\",\r\n\t\t\t\"revisionTime\": \"2016-10-09T06:10:32Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"qdDVSYjJg4Z0RCOMN+H8THb7VgM=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/errors\",\r\n\t\t\t\"revision\": \"4178436c9f2430cdd945c50301cfb61563b56573\",\r\n\t\t\t\"revisionTime\": \"2016-08-30T19:04:10Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"Au2qpfa4VkYqoEUjkd+pAzyL2cc=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/jsonpointer\",\r\n\t\t\t\"revision\": \"46af16f9f7b149af66e5d1bd010e3574dc06de98\",\r\n\t\t\t\"revisionTime\": \"2016-07-04T18:59:06Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"jzzeiYHpHiEhmBNVQlBFw5Knvh0=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/jsonreference\",\r\n\t\t\t\"revision\": \"13c6e3589ad90f49bd3e3bbe2c2cb3d7a4142272\",\r\n\t\t\t\"revisionTime\": \"2016-07-04T19:01:45Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"1vfk/gaZY8+35N9yNFOTIUg1H4A=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/loads\",\r\n\t\t\t\"revision\": \"9168874c33ac10e241ee7767ed9f5d209c2a5ab0\",\r\n\t\t\t\"revisionTime\": \"2016-10-15T05:15:24Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"oKtPUiZeACj17cKUpLPs9H3pDjg=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/loads/fmts\",\r\n\t\t\t\"revision\": \"9168874c33ac10e241ee7767ed9f5d209c2a5ab0\",\r\n\t\t\t\"revisionTime\": \"2016-10-15T05:15:24Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"K/UP0+bs3W9f+krIVlyNJJlRveg=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime\",\r\n\t\t\t\"revision\": \"12c07accf0687ab20b1e7b6293d8012ce282499c\",\r\n\t\t\t\"revisionTime\": \"2016-11-12T08:02:51Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"EBbEdiRHuI/u0whMY15oJNbaZB0=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime/client\",\r\n\t\t\t\"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\r\n\t\t\t\"revisionTime\": \"2016-10-19T07:03:01Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"k/v0woh+D5uViAfNI59pG8cKj1k=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime/flagext\",\r\n\t\t\t\"revision\": \"14b161b40ece9dac8e244ab2fde2d209e108c6f5\",\r\n\t\t\t\"revisionTime\": \"2016-11-24T20:43:25Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"hEfnshtHJsDTD+WNrVcbymBbupo=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime/internal/testing\",\r\n\t\t\t\"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\r\n\t\t\t\"revisionTime\": \"2016-10-19T07:03:01Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"0eungaSRPI/TsdGMs9oe8KJjn3w=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime/internal/testing/petstore\",\r\n\t\t\t\"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\r\n\t\t\t\"revisionTime\": \"2016-10-19T07:03:01Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"+cbiC4kf2T07TynJFKo4w8YFWb8=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime/middleware\",\r\n\t\t\t\"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\r\n\t\t\t\"revisionTime\": \"2016-10-19T07:03:01Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"NcTUgn9dgtv404Xz3UNAlqZfg4M=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime/middleware/denco\",\r\n\t\t\t\"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\r\n\t\t\t\"revisionTime\": \"2016-10-19T07:03:01Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"LAXDYZDlho3/kTzzHvJahQd44ns=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime/middleware/header\",\r\n\t\t\t\"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\r\n\t\t\t\"revisionTime\": \"2016-10-19T07:03:01Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"F7CZ0biPX37d51UhPyuT/DHD0d0=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime/middleware/untyped\",\r\n\t\t\t\"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\r\n\t\t\t\"revisionTime\": \"2016-10-19T07:03:01Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"mPl1xXsO+Ugmdlj7ZNfbbNcG6mk=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime/security\",\r\n\t\t\t\"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\r\n\t\t\t\"revisionTime\": \"2016-10-19T07:03:01Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"Mj44wpoxrYOMpZUK5ACmMh0Po7U=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/runtime/yamlpc\",\r\n\t\t\t\"revision\": \"2faaf90bf67e0616db00094f2141f99b00a9ebc2\",\r\n\t\t\t\"revisionTime\": \"2016-10-19T07:03:01Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"6QkdP1VGwazrtwSbzHeKAjdZJSE=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/spec\",\r\n\t\t\t\"revision\": \"8f2b3d0e3aa15100eea0ab61dc6fa02f00f5e713\",\r\n\t\t\t\"revisionTime\": \"2016-10-13T15:53:17Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"CfKtwdQamXbI88cSI5JTLWwZtcc=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/strfmt\",\r\n\t\t\t\"revision\": \"d65c7fdb29eca313476e529628176fe17e58c488\",\r\n\t\t\t\"revisionTime\": \"2016-08-12T05:05:34Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"oncFAnX5ic6dHOHUz3HmmIxu6m8=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/swag\",\r\n\t\t\t\"revision\": \"3b6d86cd965820f968760d5d419cb4add096bdd7\",\r\n\t\t\t\"revisionTime\": \"2016-10-24T02:49:19Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"6UO+LC1EPixDQliIfk7XC/ikcJg=\",\r\n\t\t\t\"path\": \"github.com/go-openapi/validate\",\r\n\t\t\t\"revision\": \"027696d4b54399770f1cdcc6c6daa56975f9e14e\",\r\n\t\t\t\"revisionTime\": \"2016-10-15T05:30:59Z\"\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"checksumSHA1\": \"JSHl8b3nI8EWvzm+uyrIqj2Hiu4=\",\r\n\t\t\t\"path\": \"github.com/golang/mock/gomock\",\r\n\t\t\t\"revision\": \"bd3c8e81be01eef76d4b503f5e687d2d1354d2d9\",\r\n\t\t\t\"revisionTime\": \"2016-01-21T18:51:14Z\"\r\n\t\t},\r\n\t\t\r\n\r\n\r\n\r\n\r\n\r\nvendor/github.com/go-openapi/validate/spec.go:623: too many arguments in call to r.IsValidURI The error goes away if juse use concrete type like just array \r\ninstead of a compound one like in the first comment. If you do something like the first comment shows to use type object to return a primitive type and then a list of a struct the the erro comes back  I made the change but the error still pops up.  So the spec is like\r\n```yaml\r\n  MaxResults:\r\n    name: maxResults\r\n    required: false\r\n    description: The maximum number of results to return.\r\n    type: integer\r\n    format: int64\r\n    default: 100 \r\n    minimum: 0\r\n    maximum: 10000\r\n    in: query\r\n```\r\nAdding or removing   exclusiveMinimum or exclusiveMaximum, does not make a dent to the issue.\r\nI can see the code generate but jsut not the required import at the top:\r\n```go\r\nimport (\r\n\t\"net/http\"\r\n\r\n\t\"github.com/go-openapi/errors\"\r\n\tmiddleware \"github.com/go-openapi/runtime/middleware\"\r\n\t\"github.com/go-openapi/strfmt\"\r\n       ....\r\n)\r\n```\r\n```go\r\n// swagger:model WhyIsThisHappening\r\ntype WhyIsThisHappening struct {\r\n\r\n\t// assets\r\n\t// Required: true\r\n\tAssets models.Clusters `json:\"assets\"`\r\n\r\n\t// next token\r\n\t// Required: true\r\n\tNextToken *string `json:\"nextToken\"`\r\n}\r\n\r\n// Validate validates this list clusters pages o k body\r\nfunc (o *WhyIsThisHappening) Validate(formats strfmt.Registry) error {\r\n\tvar res []error\r\n\r\n\tif err := o.validateAssets(formats); err != nil {\r\n\t\t// prop\r\n\t\tres = append(res, err)\r\n\t}\r\n\r\n\tif err := o.validateNextToken(formats); err != nil {\r\n\t\t// prop\r\n\t\tres = append(res, err)\r\n\t}\r\n\r\n\tif len(res) > 0 {\r\n\t\treturn errors.CompositeValidationError(res...)\r\n\t}\r\n\treturn nil\r\n}\r\n\r\nfunc (o *WhyIsThisHappening) validateAssets(formats strfmt.Registry) error {\r\n\r\n\tif err := validate.Required(\"listClustersPagesOK\"+\".\"+\"assets\", \"body\", o.Assets); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n\r\nfunc (o *WhyIsThisHappening) validateNextToken(formats strfmt.Registry) error {\r\n\r\n\tif err := validate.Required(\"listClustersPagesOK\"+\".\"+\"nextToken\", \"body\", o.NextToken); err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\treturn nil\r\n}\r\n``` I replaced some string with \"whyIsThisHappening\" because it is too specific.\r\ngo version go1.7.4 darwin/amd64\r\nI can only post the log. \r\n\r\n```\r\n2016/12/28 11:39:28 making gen schema (anon: true, req: true, tuple: false) whyIsThisHappening\r\n2016/12/28 11:39:28 {\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"assets\": {\r\n      \"$ref\": \"#/definitions/Clusters\"\r\n    },\r\n    \"nextToken\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}\r\n2016/12/28 11:39:28 after shortcuit named ref\r\n2016/12/28 11:39:28 {\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"assets\": {\r\n      \"$ref\": \"#/definitions/Clusters\"\r\n    },\r\n    \"nextToken\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}\r\n2016/12/28 11:39:28 after lifting special all of\r\n2016/12/28 11:39:28 {\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"assets\": {\r\n      \"$ref\": \"#/definitions/Clusters\"\r\n    },\r\n    \"nextToken\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}\r\n2016/12/28 11:39:28 building all of for 0 entries\r\n2016/12/28 11:39:28 {\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"assets\": {\r\n      \"$ref\": \"#/definitions/Clusters\"\r\n    },\r\n    \"nextToken\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}\r\n2016/12/28 11:39:28 model.go:1317: resolving schema (anon: true, req: true) \r\n2016/12/28 11:39:28 types.go:696: resolving object (anon: true, req: false)\r\n2016/12/28 11:39:28 gschema rrequired true nullable false\r\n2016/12/28 11:39:28 gschema nullable true\r\n2016/12/28 11:39:28 model.go:1339: resolving schema (anon: true, req: true) \r\n2016/12/28 11:39:28 types.go:696: resolving object (anon: true, req: false)\r\n2016/12/28 11:39:28 gschema nnullable true\r\n2016/12/28 11:39:28 building properties whyIsThisHappening (parent: whyIsThisHappening)\r\n2016/12/28 11:39:28 building property whyIsThisHappening[\"assets\"] (tup: false) {\r\n  \"type\": \"object\",\r\n  \"properties\": {\r\n    \"assets\": {\r\n      \"$ref\": \"#/definitions/Clusters\"\r\n    },\r\n    \"nextToken\": {\r\n      \"type\": \"string\"\r\n    }\r\n  }\r\n}\r\n2016/12/28 11:39:28 model.go:614: resolving schema (anon: true, req: false) \r\n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: false) #/definitions/Clusters\r\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\r\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: false) \r\n2016/12/28 11:39:28 types.go:666: resolving array (anon: false, req: false)\r\n2016/12/28 11:39:28 types.go:464: resolving schema (anon: true, req: false) \r\n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: false) #/definitions/Cluster\r\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\r\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: false) \r\n2016/12/28 11:39:28 types.go:696: resolving object (anon: false, req: false)\r\n2016/12/28 11:39:28 types.go:505: known def type: \"\"\r\n2016/12/28 11:39:28 types.go:505: known def type clear: \"\" -> \"\"\r\n2016/12/28 11:39:28 types.go:349: known def type: \"Cluster\"\r\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Cluster\" -> \"models.Cluster\"\r\n2016/12/28 11:39:28 type name models.Cluster, package , alias \r\n2016/12/28 11:39:28 types.go:349: known def type: \"Clusters\"\r\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Clusters\" -> \"models.Clusters\"\r\n2016/12/28 11:39:28 type name models.Clusters, package , alias \r\n2016/12/28 11:39:28 new struct branch whyIsThisHappening (parent whyIsThisHappening)\r\n2016/12/28 11:39:28 cloning context whyIsThisHappening\r\n2016/12/28 11:39:28 made new struct branch assets (parent whyIsThisHappening)\r\n2016/12/28 11:39:28 making gen schema (anon: true, req: true, tuple: false) assets\r\n2016/12/28 11:39:28 {\r\n  \"$ref\": \"#/definitions/Clusters\"\r\n}\r\n2016/12/28 11:39:28 after shortcuit named ref\r\n2016/12/28 11:39:28 {\r\n  \"$ref\": \"#/definitions/Clusters\"\r\n}\r\n2016/12/28 11:39:28 after lifting special all of\r\n2016/12/28 11:39:28 {\r\n  \"$ref\": \"#/definitions/Clusters\"\r\n}\r\n2016/12/28 11:39:28 building all of for 0 entries\r\n2016/12/28 11:39:28 {\r\n  \"$ref\": \"#/definitions/Clusters\"\r\n}\r\n2016/12/28 11:39:28 model.go:1317: resolving schema (anon: true, req: true) \r\n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: true) #/definitions/Clusters\r\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\r\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: true) \r\n2016/12/28 11:39:28 types.go:666: resolving array (anon: false, req: false)\r\n2016/12/28 11:39:28 types.go:464: resolving schema (anon: true, req: false) \r\n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: false) #/definitions/Cluster\r\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\r\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: false) \r\n2016/12/28 11:39:28 types.go:696: resolving object (anon: false, req: false)\r\n2016/12/28 11:39:28 types.go:505: known def type: \"\"\r\n2016/12/28 11:39:28 types.go:505: known def type clear: \"\" -> \"\"\r\n2016/12/28 11:39:28 types.go:349: known def type: \"Cluster\"\r\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Cluster\" -> \"models.Cluster\"\r\n2016/12/28 11:39:28 type name models.Cluster, package , alias \r\n2016/12/28 11:39:28 types.go:349: known def type: \"Clusters\"\r\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Clusters\" -> \"models.Clusters\"\r\n2016/12/28 11:39:28 type name models.Clusters, package , alias \r\n2016/12/28 11:39:28 gschema rrequired true nullable false\r\n2016/12/28 11:39:28 gschema nullable false\r\n2016/12/28 11:39:28 model.go:1339: resolving schema (anon: true, req: true) \r\n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: true) #/definitions/Clusters\r\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\r\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: true) \r\n2016/12/28 11:39:28 types.go:666: resolving array (anon: false, req: false)\r\n2016/12/28 11:39:28 types.go:464: resolving schema (anon: true, req: false) \r\n2016/12/28 11:39:28 types.go:648: resolving ref (anon: false, req: false) #/definitions/Cluster\r\n2016/12/28 11:39:28 loading with base: ./specs/omg.yaml\r\n2016/12/28 11:39:28 types.go:341: resolving schema (anon: false, req: false) \r\n2016/12/28 11:39:28 types.go:696: resolving object (anon: false, req: false)\r\n2016/12/28 11:39:28 types.go:505: known def type: \"\"\r\n2016/12/28 11:39:28 types.go:505: known def type clear: \"\" -> \"\"\r\n2016/12/28 11:39:28 types.go:349: known def type: \"Cluster\"\r\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Cluster\" -> \"models.Cluster\"\r\n2016/12/28 11:39:28 type name models.Cluster, package , alias \r\n2016/12/28 11:39:28 types.go:349: known def type: \"Clusters\"\r\n2016/12/28 11:39:28 types.go:349: known def type clear: \"Clusters\" -> \"models.Clusters\"\r\n2016/12/28 11:39:28 type name models.Clusters, package , alias \r\n2016/12/28 11:39:28 gschema nnullable false\r\n2016/12/28 11:39:28 building properties assets (parent: whyIsThisHappening)\r\n2016/12/28 11:39:28 finished gen schema for \"assets\"\r\n```\r\n Sorry I can't because it is not an opensource project. Could you perhaps try to make a small isolated yaml/json that reproduces the issue you're facing? This would help us debug your problem, while preventing you from having to share your actual swagger spec? It turns out it is related to this:\r\n\r\nhttps://github.com/go-swagger/go-swagger/issues/756\r\nThe validate package is for some reason missing but other packages like github.com/go-openapi/strfmt is ok. So when goimport try to do its job, the package is not there and the import is missing as a result but just for those files (which are server response). There is a validate package but it is under go-openapi/vendor. For now I just add a goimport after the post processing to get around it.\r\n\r\nNow have to add go get -u golang.org/x/tools/cmd/goimports, then $GOPATH/bin/goimports -w -v just fo fix those problematic files for a workaround  It's possible for the Title to contain newline seprators as well,\r\nwhich break the generated code. A notable example is\r\ngoogle.protobuf.Empty via grpc-gateway. This applies the comment\r\nfunction to it (like description) to wrap it over multiple commented\r\nlines if needed.\r\n\r\ncloses #813 \r\n\r\nSigned-off-by: Lincoln Stoll <lincoln.stoll@gmail.com> ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/814?src=pr) is 69.04% (diff: 96.55%)\n> Merging [#814](https://codecov.io/gh/go-swagger/go-swagger/pull/814?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@             master       #814   diff @@\n==========================================\n  Files            19         19          \n  Lines          5624       5624          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3882       3883     +1   \n+ Misses         1359       1358     -1   \n  Partials        383        383          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [759dbbc...05c540d](https://codecov.io/gh/go-swagger/go-swagger/compare/759dbbcca47194bacdcae74bd9e3a81a0dcd5004...05c540d0a94de8a4515d72dd057cd7a9b2bdbb5f?src=pr)  ## Problem statement\r\n```\r\n2016/12/22 23:44:31 building a plan for generation\r\n2016/12/22 23:44:31 planning definitions\r\nunresolvable: [null] (format \"\")\r\n```\r\n## Swagger specification\r\nhttps://github.com/techzilla/examplegolangrestapi/blob/master/swagger.json\r\n\r\nCommited results of using swagger-codegen,\r\nhttps://github.com/techzilla/examplegolangrestapi\r\n\r\n\r\n## Steps to reproduce\r\n\r\n    swagger generate server swagger.json\r\n  ## Problem statement\r\n\r\nWhen developing a service using go-swagger, a server can be automatically generated. On top of that a server cli application can be created, but one can be manually created as well. Before one can call `server.Serve()` the api needs to be properly configured AND the server has to have the handler set. Currently that process is in my opinion quite error prone.\r\n\r\n## Steps to reproduce\r\n\r\nGenerate a server based on any valid OpenAPI spec and then create a server cli app more or less as follows:\r\n\r\n```go\r\npackage main\r\n\r\n// imports...\r\n\r\nfunc main() {\r\n\tswaggerSpec, err := loads.Analyzed(restapi.SwaggerJSON, \"\")\r\n\tif err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n\r\n\tapi := foo.NewFooAPI(swaggerSpec)\r\n\r\n\tserver := restapi.NewServer(api)\r\n\tdefer server.Shutdown()\r\n\r\n\t// calling any route will make the server app panic (and recover)\r\n\t// the reason being that server.ConfigureAPI() isn't called\r\n\t// instead the user choose to set the handler herself,\r\n\t// but forgot to set the producers and consumers among other things.\r\n\r\n\tserver.SetHandler(api.Serve(nil))\r\n\tif err := server.Serve(); err != nil {\r\n\t\tlog.Fatalln(err)\r\n\t}\r\n}\r\n``` \r\n\r\nWhen you use the generated server cli instead you'll have it calling `server.ConfigureAPI()`, making it not panic and instead return you the expected NotImplemented errors, when calling any route.\r\n\r\n## Proposed solution\r\n\r\nWhile this work greats, it's not a good solution I think. The generated configureAPI function is pretty useless, which makes sense I suppose, knowing that it seems to be a file that is meant to be edited and thus being made useful.\r\n\r\nPersonally however I think we should rely on better defaults and I think I have a solution that doesn't break any code for people using older versions.\r\n\r\n> Make the API constructor have reasonable defaults.\r\n\r\nFor this we have to change a constructor such as this:\r\n\r\n```go\r\nfunc NewFooAPI(spec *loads.Document) *FooAPI {\r\n\treturn &FooAPI{\r\n\t\thandlers:        make(map[string]map[string]http.Handler),\r\n\t\tformats:         strfmt.Default,\r\n\t\tdefaultConsumes: \"application/json\",\r\n\t\tdefaultProduces: \"application/json\",\r\n\t\tServerShutdown:  func() {},\r\n\t\tspec:            spec,\r\n\t}\r\n}\r\n```\r\n\r\nto:\r\n\r\n```go\r\nfunc NewFooAPI(spec *loads.Document) * FooAPI {\r\n\treturn & FooAPI{\r\n\t\thandlers:        make(map[string]map[string]http.Handler),\r\n\t\tformats:         strfmt.Default,\r\n\t\tdefaultConsumes: \"application/json\",\r\n\t\tdefaultProduces: \"application/json\",\r\n\t\tServerShutdown:  func() {},\r\n\t\t// basically giving the `ServerError`, `producers`\r\n\t\t// and `consumers` a decent default\r\n\t\tServeError:      errors.ServerError,\r\n\t\tJSONConsumer:    runtime.JSONConsumer(),\r\n\t\tJSONProducer:    runtime.JSONProducer(),\r\n\t\tTxtProducer:     runtime.TextProducer(),\r\n\t\tspec:            spec,\r\n\t}\r\n}\r\n```\r\n\r\nDoing this makes it so that the API as it is just works. On top of that we could also make all the handlers by default _NotImplementedHandlers_, such that the simple example given above just works, without any weird unexpected panics.\r\n\r\nAnother idea would be that the `configureAPI` function wouldn't just stupidly override all handlers, and instead first check if the handlers are still nil. And only override a handler if it is indeed still nil.\r\n\r\nLastly, one could even forget to set the handler (e.g. via `server.SetHandler(api.Serve(nil))`) and not get a panic or fatal error at start up to warn about this. Instead no routes will be available and everything will return a `404`. These errors might tip of the user, but perhaps explicitly shouting to the user about this problem at start-up of the cmd app might be more helpful and beginner-friendly? @casualjim you have any opinions/feedback on this issue?  ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/806?src=pr) is 68.91% (diff: 100%)\n> Merging [#806](https://codecov.io/gh/go-swagger/go-swagger/pull/806?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will decrease coverage by **0.01%**\n\n```diff\n@@             master       #806   diff @@\n==========================================\n  Files            19         19          \n  Lines          5566       5566          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           3837       3836     -1   \n- Misses         1351       1352     +1   \n  Partials        378        378          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [1df2914...54adfdd](https://codecov.io/gh/go-swagger/go-swagger/compare/1df2914724e2a0dce6d33c1455638c2b2027c8fd...54adfddc4e49d5eda7ad268853720d9fec67e8f3?src=pr)  ## Problem statement\r\n\r\nLikely related to #786 ...\r\n\r\nGiven a spec with a property of\r\n```\r\n       product_type:\r\n         description: The type of product this mosaic is\r\n         enum:\u22c5\r\n           - basemap\r\n             timelapse\r\n             l3m\r\n```\r\n\r\nI'm getting this code on the client and server gen code:\r\n\r\n```\r\nfunc init() {\r\n    var res []string\r\n    if err := json.Unmarshal([]byte(`[\"basemap timelapse l3m\"]`), &res); err != nil {\r\n        panic(err)\r\n    }\r\n...\r\n}\r\n```\r\n\r\nI suspect it should be \r\n\r\n```\r\njson.Unmarshal([]byte(`[\"basemap\", \"timelapse\", \"l3m\"]`), &res);\r\n```\r\n Nice ... thanks @casualjim !  ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/803?src=pr) is 68.93% (diff: 100%)\n> Merging [#803](https://codecov.io/gh/go-swagger/go-swagger/pull/803?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will increase coverage by **0.01%**\n\n```diff\n@@             master       #803   diff @@\n==========================================\n  Files            19         19          \n  Lines          5566       5566          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3836       3837     +1   \n+ Misses         1352       1351     -1   \n  Partials        378        378          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7e9d988...3c264b6](https://codecov.io/gh/go-swagger/go-swagger/compare/7e9d9887a74909536f1c1a3dc40910082a30aac2...3c264b64ad1e76502ad54b07527aaafd71de9970?src=pr)  ## Problem statement\r\n\r\nWhen I run: `swagger generate server --name=MyName --spec=current.json --default-scheme=https` I get the output: `no operations were selected`\r\n\r\nProbably a n00b question, but how can I generate a server with _all_ operations? If I have missed the documentation, I would love to get the URL.\r\n\r\nThanks!\r\n\r\nPS:\r\nI have _many_ operations so, would be nice if I just can include all of them... Would it be possible to perhaps include the spec file you're using, might help others in knowing why it doesn't work for you. Thanks all, completely misunderstood this... Got it now.  ## Problem statement\r\n\r\nExtra (unwanted) definitions get generated when generating a spec using the `-m` flag.\r\n\r\nMore information about this flag: https://github.com/go-swagger/go-swagger/blob/master/cmd/swagger/commands/generate/spec.go#L32\r\n\r\n## Steps to reproduce\r\n\r\nCreate following main file somewhere in your `$GOPATH`:\r\n\r\n```go\r\n// A Bug API\r\n//\r\n// An API Definition to show a bug in go-swagger.\r\n//\r\n// Because of the bug, definitions get generated from types\r\n// which have no `model` annotation\r\n//\r\n// swagger:meta\r\npackage main\r\n\r\n// Ping Response\r\n//\r\n// swagger:model pingResponse\r\ntype pingResponse struct {\r\n}\r\n\r\ntype Handler interface {\r\n    Foo() int\r\n}\r\n\r\n// swagger:parameters ping\r\ntype pingParams struct {\r\n    // Represents who is pinging\r\n    //\r\n    // in: path\r\n    // required: true\r\n    Who string `json:\"who\"`\r\n}\r\n\r\n// swagger:route GET /ping/{who} ping\r\n//\r\n// Test your connection with this service.\r\n//\r\n//    Produces:\r\n//      plain/text\r\n//\r\n//    Responses:\r\n//      200: body:pingResponse\r\nfunc ping() {\r\n\r\n}\r\n\r\nfunc main() {\r\n}\r\n```\r\n\r\nGenerate the spec using following command:\r\n\r\n```\r\n$ swagger generate spec -m -o ./swagger.json\r\n```\r\n\r\nIn the generated file you should see following unwanted definitions:\r\n\r\n```json\r\n\"definitions\": {\r\n    \"Handler\": {\r\n        \"type\": \"object\",\r\n        \"properties\": {\r\n            \"Foo\": {\r\n                \"type\": \"integer\",\r\n                \"format\": \"int64\"\r\n            }\r\n        },\r\n        \"x-go-package\": \"github.com/glendc/tmp/extra-definitions\"\r\n    },\r\n    \"pingParams\": {\r\n        \"type\": \"object\",\r\n        \"required\": [\r\n            \"who\"\r\n        ],\r\n        \"properties\": {\r\n            \"who\": {\r\n                \"description\": \"Represents who is pinging\\n\\nin: path\",\r\n                \"type\": \"string\",\r\n                \"x-go-name\": \"Who\"\r\n            }\r\n        },\r\n        \"x-go-package\": \"github.com/glendc/tmp/extra-definitions\"\r\n    }\r\n}\r\n```\r\n\r\n+ `pingParams` should not be defined as a definition:\r\n  + it has no `swagger:model` annotation;\r\n  + it is a _struct_ used to define the params for the `ping` operation;\r\n+ `Handler` should not be defined as a definition:\r\n  + it has no annotations at all;\r\n  + it is an _interface_ and has nothing to do with the swagger spec; The following `TODO` (https://github.com/go-swagger/go-swagger/blob/master/scan/schema.go#L438) is the source of this bug. Solve the TODO, and the bug is probably solved as well.  ## Problem statement\r\nsome links under the section below are broken\r\nhttps://github.com/go-swagger/go-swagger#from-source  ## Problem statement\r\n\r\nCurrently it is not possible to define a route/path entirely as a Swagger 2.0 / OpenAPI YAML Path Object, supporting everything a path object would support.\r\n\r\n## Example\r\n\r\nAn example of how a `swagger:operation` annotation could look like: \r\n\r\n```go\r\n// swagger:operation PUT /pets/{id} pets updatePet\r\n//\r\n// Updates the details for a pet.\r\n//\r\n// Some long explanation,\r\n// spanning over multipele lines,\r\n// AKA the description.\r\n//\r\n// ---\r\n// consumes: \r\n//   - \"application/json\"\r\n//   - \"application/xml\"\r\n// produces: \r\n//   - \"application/xml\"\r\n//   - \"application/json\"\r\n// parameters: \r\n//   - \r\n//     in: \"body\"\r\n//     name: \"body\"\r\n//     description: \"Pet object that needs to be added to the store\"\r\n//     required: true\r\n//     schema: \r\n//       $ref: \"#/definitions/Pet\"\r\n// responses: \r\n//   400: \r\n//     description: \"Invalid ID supplied\"\r\n//   404: \r\n//     description: \"Pet not found\"\r\n//   405: \r\n//     description: \"Validation exception\"\r\n// security: \r\n//   - \r\n//     petstore_auth: \r\n//       - \"write:pets\"\r\n//       - \"read:pets\"\r\nfunc UpdatePet(w http.ResponseWriter, r *http.Request, params denco.Params) {\r\n\t// some actual stuff should happen in here\r\n}\r\n```\r\n\r\n**EDIT**: add description under summary, and `---` under description within Godoc comments. `---` indicates the start of the path spec.\r\n  fix the problem: \r\nwhen a pattern validation fails on a field in request body, which is a type definition referencing to another definition, the returned error message won't show the validation failed field name, causing trouble to read what field failed at validation. ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/792?src=pr) is 68.86% (diff: 100%)\n> Merging [#792](https://codecov.io/gh/go-swagger/go-swagger/pull/792?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will not change coverage\n\n```diff\n@@             master       #792   diff @@\n==========================================\n  Files            19         19          \n  Lines          5524       5524          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           3804       3804          \n  Misses         1342       1342          \n  Partials        378        378          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [52c95c3...13a2b23](https://codecov.io/gh/go-swagger/go-swagger/compare/52c95c3d30d54dad6d1248f1f490c2de0bfbf492...13a2b236c86033f2754b89c5da97a926956158b4?src=pr) @casualjim This makes most sense. I'll create another story to implement.  ## Problem statement\r\n\r\nCurrently the `swagger:route` generator is incomplete and doesn't allow everything that's defined in the Paths Object and its children as specified in the OpenAPI (Swagger 2.0) spec.\r\n\r\nDefining responses linked to status codes is already possible, but can currently only be defined when linked to an actual Golang type linked to an existing `swagger:response` Godoc comment. This is fine, and this behavior should remain to be supported, there are however situations where one cannot or doesn't want to link a REST API response to an explicitly defined type. In such cases it should be possible to define the response inline, as one can do in an actual OpenAPI spec file.\r\n\r\nDefining parameters is currently also already possible, but again only when linked to an actual Golang type. Again this behavior should probably remain supported, but just as with Responses, we probably also should support inline definitions of parameters, as one would usually do when defining a pure spec file.\r\n\r\nThis is an enchantment issue to announce the work I'll be doing on this codebase to make this happen. I'll also keep a checklist of the tasks involved to get this issue 'solved', such that anyone can follow the work in progress. Please get involved if:\r\n\r\n- You are working on a very similar issue already;\r\n- You have feedback on the proposal and/or work in progress;\r\n- You know of related issues that I should take a look at, and potentially fix;\r\n\r\n## Tasks\r\n\r\n- [ ] Support `Parameters` as a multi-line tag, as part of the existing `swagger:route` specification;\r\n- [ ] Make `Responses` work similar to how it the [OpenAPI::ResponseObject](http://swagger.io/specification/#responseObject) works, a reference should still be possible, but defining its schema completely inline should be possible as well;\r\n- [ ] Make it possible to define body response references, where the type does not need to be defined within an inline `Body` variable containing the actual definition;\r\n\r\n## Remaining open questions\r\n\r\n- What to do when a parameter is both defined inline as part of the `swagger:route` comment, and as a `swagger:parameter` comment?\r\n\r\n## Related issues\r\n\r\n- #782\r\n- #779\r\n- #361 This issue should probably be closed, as it might not be needed anymore after all.\r\n\r\nTalking to @casualjim on slack helped me clarify things. It seems like I was making suggestions because I didn't fully understand the design behind go-swagger. I opened issue #791 so that documentation for this can be added, as I wasn't the first to talk to @casualjim about this. Secondly I opened issue #793 to support a new annotation, `operation`, that allows you to define a Path/Route as you would specify a `Path Object` in your Swagger YAML Specification.  ## Problem statement\r\n\r\nSeems the gen'ed client code has a problem with UUID types.\r\n\r\n```\r\nclient/client/operations/get_mosaic_experimental_series_series_id_mosaics_parameters.go:103: cannot use o.SeriesID (type strfmt.UUID) as type string in argument to r.SetPathParam\r\nclient/client/operations/get_mosaic_experimental_series_series_id_parameters.go:103: cannot use o.SeriesID (type strfmt.UUID) as type string in argument to r.SetPathParam\r\n```\r\n\r\nthe path is of the form\r\n```\r\n/mosaic/experimental/series/{SeriesId}/mosaics\r\n```\r\n\r\nwhich may have something to do with it. \r\n\r\n## Swagger specification\r\nhttps://gist.github.com/SandyWalsh/5987303142bea7bf5d41c07476dccf76\r\n\r\n Hey @SandyWalsh!\r\n\r\nYou can work around this locally by copying in the client/parameters.gotmpl to your local project and specifying the --template-dir flag. You can change the SetPathParam line to:\r\n```\r\n  if err := r.SetPathParam({{ printf \"%q\" .Name }}, {{ if .Formatter }}{{ .Formatter }}({{ if .IsNullable }}*{{end}}{{ .ValueExpression }}){{ else }}{{if eq .GoType \"strfmt.UUID\" }}string({{end}}{{ if .IsNullable }}*{{end}}{{ .ValueExpression }}{{ if eq .GoType \"strfmt.UUID\" }}){{end}}{{end}}); err != nil {\r\n```\r\n\r\nAs far as upstream fixes go, I have some suggestions but I'm not sure the right/best way so I'll just leave my ideas here as notes to the maintainers:\r\n\r\nI hacked around in generator/types.go and added `\"strfmt.UUID\": \"string\"` to the `stringFormatters` map which worked perfectly w/o changing the template (where perfectly means it built for this one particular case).  It would be nice if the atomic `string` type implemented `fmt.Stringer` (as strfmt.UUID does) so that go-openapi/runtime could take a fmt.Stringer as the second param of SetPathParam -- or SetPathParam could take an empty interface and try to cast to string/fmt.Stringer/etc in turn. Hey @xtoddx ... a great voice to hear from the wilderness! \r\n\r\nIf the manual edits get to be too much I'll look at copying the templates. Thanks for that. \r\n\r\nI can see that if we're going to keep using this library I'm going to need to get my hands dirty in the implementation. Thanks for steering me in the general direction.  :) \r\n\r\n ```\r\n$ swagger version\r\nversion: 0.7.4\r\ncommit: 8f0d4bb6fc08d6b4bf2826cd4e13d7dce32c104c\r\n```\r\n\r\nOne of my colleagues noticed that the 0.7.4 sha from the docker image differs from the 0.7.4 image in the repo. \r\n\r\n\r\n  ## Problem statement\r\n\r\nwhen generating a test client, and vendoring the openapi packages, the client transport configuration picks the non-vendored version.\r\n\r\nsrc\\github.com\\stillwater\\scoring_engine\\api\\client\\mp_scoring_client.go:27: cannot use transport (type *client.Runtime) as type \"github.com/stillwater/scoring_engine/vendor/github.com/go-openapi/runtime\".ClientTransport in argument to New:\r\n\t*client.Runtime does not implement \"github.com/stillwater/scoring_engine/vendor/github.com/go-openapi/runtime\".ClientTransport (wrong type for Submit method)\r\n\t\thave Submit(*\"github.com/go-openapi/runtime\".ClientOperation) (interface {}, error)\r\n\t\twant Submit(*\"github.com/stillwater/scoring_engine/vendor/github.com/go-openapi/runtime\".ClientOperation) (interface {}, error)\r\n\r\nAnyway to get around this to create test clients from the yaml spec? Any insights how to locate where the nesting comes from?\r\n @Ravenwater have you managed to fix this by now? If so, how did you do it?  ## Problem statement\r\n\r\nI would like to specify parameters when creating a route, similar to Consumes, Produces, Responses, etc.  These details are the first that come to mind, so it could probably use some iteration.\r\n\r\n```\r\n// swagger:route PUT /profile/{id} update_profile\r\n//\r\n// Update a user profile\r\n//\r\n//     Parameters:\r\n//      - id: [in:path required:true type:string] Description goes here\r\n//      - profile: [in:body required:true model:profile_model]\r\n//     Consumes:\r\n//     - application/json\r\n//     Produces:\r\n//     - application/json\r\n//     Responses:\r\n//       200: ok\r\n//       404: NotFound\r\n```\r\n\r\nIn other places:\r\n```\r\n// swagger:route GET /profile/{id} get_profile\r\n//\r\n// Get a user profile\r\n//\r\n//     Parameters:\r\n//      - id: [in:path required:true] Description goes here\r\n//     Consumes:\r\n//     - application/json\r\n//     Produces:\r\n//     - application/json\r\n//     Responses:\r\n//       200: profile_model\r\n```\r\n```\r\n// swagger:model profile_model\r\ntype Profile struct {\r\n    //a bunch of model info here\r\n}\r\n```\r\n\r\nAnd this fits with #781, it would be nice to create a parameter and reuse it, so for example\r\n```\r\n// swagger:parameter profile_id_param\r\ntype ProfileIDParam struct {\r\n    /*Profile id\r\n      Required: true\r\n      In: path\r\n    */\r\n    ID string `json:\"id\"`\r\n}\r\n```\r\n\r\nand in the examples above, replace the lines that specify id with something like:\r\n```\r\n// Parameters\r\n//  - predefined:profile_id_param\r\n```\r\n I like this idea. I also submitted a similar request\r\nhttps://github.com/go-swagger/go-swagger/issues/779\r\n\r\nIt would also be great if we could add headers as well and descriptions for return values\r\n This almost solves my problem - my issue is that I am generating the models in a previous run of swagger and passing that json file as an input, and so I do not have model objects.  This strange setup is a side effect of using protobuf & the probably also because I'm still learning how to use go-swagger.  I'm going to give it a 2nd attempt and see if I can clean it up.\r\n\r\nHowever, I still have the original request.  I would like to create parameters under a route without having to create a struct with a `swagger:parameters` comment.  As mentioned in #781, it would be nice to point to existing parameters here too, but that's a very soft request. @casualjim the only thing I don't understand is why everything has to be linked to a struct? Why can't we simply define it as a document? For example I don't want a params struct, yet i want to be able to define the (PATH) params for a certain route? Right now that's only be possible when using a struct, no?\r\n\r\nWould it be going against the design of go-swagger if I would work on a PR for this, so that we can define params and responses all from within the route comments? Rather than having to link them to structs?\r\n\r\nAlso is there a way to define body response structs without the need for that extra Body struct value? It's a bit weird to have it there from a golang user perspective. @GlenDC What about `200: body:modelname`?  This is under the `swagger:route` comment though, so it may not solve your problem.\r\n\r\nI am adding a little parsing for the responses to support a `description:` tag.  Feel free to use that, or come up with a different way.  In general I like the idea of having `tag1:value1 tag2:value2`, etc, but this doesn't fit with descriptions, which I think is safe to assume have spaces in the value.  My workaround is to make everything after `desription:` part of the description.  See #779 for more detail. Maybe what I'm trying to achieve is a bit anti-idiomatic. But the value would be that I wouldn't have a swagger file ever, and always have it generated automatically purely on the server codebase, such that the documentation, system tests and client code is always directly generated from the generate spec, which is generated on itself from the server code.\r\n\r\nFor the most part you want to have your spec generated from golang related code, such as response structs. But sometimes you're returning a json simply as a `map[string]interface{}`. Right now that doesn't seem to be possible.\r\n\r\n@clawconduce the description tag is a beginning. But if you look at how one would normally write a fully manual openapi (swagger 2.0) spec file, there is so much more you can give it. For the cases where you would want that, because you wouldn't have access to a struct, it seems like a useful thing to have.\r\n\r\nSo to recap. I agree that you want to keep the spec comments as closely linked to actual Golang code as possible. But, because there will always be situations where that is not possible or desired, it should be possible to do anything the specs allows via comments alone. Shouldn't be too hard to achieve, should it? And I don't want to have some bits in a spec file, as the entire goal is to keep it all directly linked from within the code files, just as you also want to generate normal documentation directly from in-line comments. (think Godocs, Rust Docs) And I guess the syntax would be as close as possible to the default YAML syntax, I don't see why you would go away from that, seems already simple enough. And makes it easier to learn to use it, as people who want to use go-swagger, probably already know swagger/openapi and its spec. I agree with most of what @GlenDC says - in my situation, I would like the comments as close as possible to the code so it's right in your face when you're updating code.  I do like the yaml format, but I shied away from that because it is a lot of parsing work.\r\n\r\nI do have a valid use case for the input swagger, but it's a little strange.  We migrated most of a python codebase to golang, but there is still some python code left behind it is complex & not easy to port.  Thanks to the magic of nginx, we can hide this fact from anyone using the API.  So I am using a swagger file for the Python endpoints as an input swagger.\r\n\r\nI also use the input swagger a few places I could probably move to the code.  Our models are defined in protobuf templates, and the code for structs is genearted from that.  I put example values in the input swagger file.  I also have some responses that are used in many places, but I didn't want to add a struct - these are all 4xx responses.  I could use the #779 solution, but I wanted to point to a response (`#/responses/`) so the descriptions all came from the same place.  I think both could be solved by using structs, but I'd prefer just to write yaml/json in comments (I say json because for big json model examples, I wouldn't want to translate the example to yaml).\r\n\r\nEDIT: Grammer & some word choice The parts where it's needed yes, the part where it isn't needed I more than happily link directly to Golang code. But having this alternative for when I need it would definitely be great. I don't mind putting some time in to make this happen with a PR. Would just need some pointers to get me started and know of any gotchas, as I would be new to this project and codebase.\r\n\r\nSome responses could be linked to a struct, as it exists. But because currently you seem to need to put your struct value members within a body struct within the actual struct, I can't use that method anyway.\r\n\r\nBut for example parameters I never have them as structs, so it would be a bit silly to define a Golang struct just to be able to generate spec information for them. Would be more work than just defining them inline as a Godoc comment, from a user-perspective.\r\n\r\nAnother obvious thing that seems to be missing is adding other information to routes such as examples. As that's also kind of information that would be needed in order to automatically run system (end-to-end) tests based on a spec file. Cool, sounds like a reasonable approach. I must say I'm a bit surprised of having a new `swagger:input` annotation proposal, as I'm not planning to write an entire specification, as one comment, as that gets a bit crazy, perhaps?\r\n\r\nWas more thinking to be able to provide a complete openapi router specification, under the `swagger:router` for a router, so being able to provide parameters, responses, examples and whatnot under that annotation. Or are you saying that the `swagger:input` should also be able to handle such incomplete specifications (e.g. just 1 router definition? As I do still want the documentation of each router right above the actual router creation. Does that make sense? After some thought, this issue might be solved with the solution potentially provided in enhancement issue #793 Yes, it would! @casualjim @GlenDC Should this be closed in favor of #793?\r\n\r\nEDIT: I just realized 793 is after 782 haha.  ## Problem statement\r\n\r\nI have several endpoints that have very similar urls (GET, PUT, DELETE) all have an id in the URL.  These calls all accept different parameters in the body though.  I would like to specify the URL/in path parameters separately from the body and/or header parameters. I just noticed that parameters can be references: http://swagger.io/specification/#parametersDefinitionsObject\r\n\r\nWhich fits nicely with this issue.  Here is an example of it being used: https://portal.victorops.com/public/api-docs/victorops-api-v1.yaml Thanks!  I didn't realize the parameters structs joined together.  (Also, I hadn't found this doc yet <https://godoc.org/github.com/go-swagger/go-swagger/scan> until I grepped for the comment in the #782 comment, I've been using examples up until now).\r\n\r\nAnyways, this works really well!  I still have a request though, which I think falls more under #782.  It believe in many cases, it would be more intuitive if the route could point to several `swagger:parameters`, than if several `swagger:parameters` pointed to the same route.  I will follow up there.  ## Problem statement\r\nI have 2 interrelated questions\r\n\r\n1)\r\nIs it possible to add the reason for the error within the swagger:route annotation where we define the list of responses?\r\n\r\n```\r\n// swagger:route GET /profile profile\r\n//\r\n// Get a user profile for specified user token.\r\n//\r\n//\r\n//     Consumes:\r\n//     - application/json\r\n//\r\n//     Produces:\r\n//     - application/json\r\n//     - text/plain\r\n//\r\n//     Schemes: http, https\r\n//\r\n//     Responses:\r\n//       200: profile\r\n//       401:\r\n//       500:\r\n\r\n```\r\nfor 401 I want to say Unauthorized without creating a swagger response annotation and struct. maybe something like (I tried the below option didnt work)\r\n\r\n`// 401: description: Unauthorized\r\n`\r\n\r\nor even \r\n`// 401: reason: Unauthorized\r\n`\r\n\r\nRight now I have declared an empty struct that describes what I want the reason to be in the annotation. I feel it is cumbersome and not the best way to do it.\r\n\r\n```\r\n// Unauthorized\r\n//\r\n// swagger:response Unauthorized\r\ntype Unauthorized struct {\r\n}\r\n\r\n```\r\n\r\n2)\r\nIs it possible to define required headers inside the route itself?\r\n\r\nso maybe have something like \r\n\r\n```\r\n// swagger:route GET /profile profile\r\n//\r\n// Get a user profile for specified user token.\r\n//\r\n//\r\n//     Consumes:\r\n//     - application/json\r\n//\r\n//     Produces:\r\n//     - application/json\r\n//     - text/plain\r\n//\r\n//    Headers:\r\n//        Authorization: The authorization token\r\n//          - required\r\n//\r\n//     Schemes: http, https\r\n//\r\n//     Responses:\r\n//       200: profile\r\n//       401:\r\n//       500:\r\n\r\n```\r\n\r\nInstead of again making a struct for the parameters that then connects to the route. Right now this is what I have implemented\r\n```\r\n// swagger:parameters profile\r\ntype Authorization struct {\r\n\t// Authorization header for a users bearer token. \r\n\t// in: header\r\n\t// required: true\r\n\tAuthorization string\r\n}\r\n```\r\n\r\n\r\n## Swagger specification\r\nswagger 2.0 json\r\n\r\n I want the description so I wouldnt have to make a bunch of empty structs for status codes that just return the status code text in the body.\r\n\r\nSo for example if I want the swagger spec to display the reason I needed to make a struct. In the image below I dont have an empty struct for the 200 status code. But for the 400 status codes I do which is why it displays it. So what I mean is if the interpreter could detect a response code, it would fill in a default reason.\r\n\r\n![screen shot 2016-12-12 at 9 46 38 am](https://cloud.githubusercontent.com/assets/1878755/21109966/368612ba-c050-11e6-83a1-6efbf5347249.png)\r\n\r\nThe swagger route annotation \r\n\r\n```\r\nResponses:\r\n  200:\r\n  401:Unauthorized\r\n  403:Forbidden\r\n  404:NotFound\r\n*/\r\n```\r\n\r\nEmpty Structs. There is no struct for 200 status code\r\n\r\n```\r\n// Forbidden\r\n//\r\n// swagger:response Forbidden\r\ntype forbidden struct {\r\n}\r\n\r\n// Not Found\r\n//\r\n// swagger:response NotFound\r\ntype notFound struct {\r\n}\r\n```\r\n This seems related to #738 which I addressed in PR #777 .  Not exactly the same though - and maybe #777 should change to address this issue as well.\r\n\r\nIn #777 I assumed that the first item after the status code is always the response (or model if using `body:`), and, if there was any whitespace, everything after that was the description.  I didn't realize that there was a use case where there might be no response/model, so my PR doesn't solve this.\r\n\r\nI'm not sure what the best way to support descriptions and models.  I have some thoughts, but leave it to @casualjim to make the real decision.  I think descriptions should probably support spaces, so if the description could be at the end of a line, that's easy to parse.  Also, it would be nice to support tags - like `body:` and `description:`.  And to keep backwards compatibility, if the first item is not tagged, it's assumed to be the response.  So for #738,\r\n\r\n```\r\n// 200: statusStruct description:Return Status\r\n```\r\n\r\nand for this issue:\r\n```\r\n// 404: description:Not Found\r\n```\r\n\r\nIf these (or any) changes sound good & not too complicated, I'd be happy to add them to #777. What do you mean by type information?  like listing fields, etc? excellent, I'll probably only add description.  I also agree because of complexity - it seems like if you're getting that detailed or want to have that much information, using a 1 line comment is not the way to go. In my case I'm having a route/path which simple is used to Ping the server, and as its body (which is ignored), it simply returns \"ok\" along-side a 200 Status Code. In such a case, it should be possible to simply have a description defined, no? What is the proper way to add in the description in the route tag?\r\nBased on the conversation above, I added in the description tag in the response code\r\n\r\n```\r\n\t//     Responses:\r\n\t//       200: profileResponse\r\n\t//\t     401: Unauthorized\r\n\t//       500: InternalServiceError\r\n\t//       404: description:Not Found\r\n\r\n```\r\n\r\nAnd the swagger output for the above block is \r\n```\r\n        \"responses\": {\r\n          \"200\": {\r\n            \"$ref\": \"#/responses/profileResponse\"\r\n          },\r\n          \"401\": {\r\n            \"$ref\": \"#/responses/Unauthorized\"\r\n          },\r\n          \"404\": {\r\n            \"$ref\": \"#/responses/\"\r\n          },\r\n          \"500\": {\r\n            \"$ref\": \"#/responses/InternalServiceError\"\r\n          }\r\n        }\r\n```\r\n\r\nIs the description not getting parsed properly? I am using the latest release (0.8.0) which should have the feature support \r\n  ## Problem statement\r\n\r\nI'm trying to generate client code from yaml spec. There is a complex type (JWK), which is returned by API and already modeled within app with existing type (\"github.com/mendsley/gojwk\"). This type is able to unmarshal itself from json, besides, it does some computations to decode keys after that (because of that I cannot replace it with generated one).\r\n\r\nCurrently, I described fields of JWK in the yaml spec and go-swagger generates me a parallel type,  which I have to convert to desired type copying all fields one-by-one. I wonder, if some more convenient option exists for that? May be I can provide desired type name in yaml spec somehow, so that go-swagger would use it instead of generating a new one?\r\n\r\n## Swagger specification\r\n\r\nswagger 2.0 yaml\r\n @casualjim: Well, I tried to sort it out myself, but have a couple of questions and a sense that may be I am heading in a wrong direction. Could you please take a look at [the gist](https://gist.github.com/nikolay-turpitko/a2a79a5b83462339bcf0fefccc306690)?\r\n\r\nWhat I want to achieve. I have [this definitions in the swagger yaml spec](https://gist.github.com/nikolay-turpitko/a2a79a5b83462339bcf0fefccc306690#file-spec-yaml-L265) - an array of JWKs, and I want JWK be modeled with [this existing go class](https://github.com/mendsley/gojwk/blob/master/key.go), which come from the lib. I wrapped lib's class with [my own one](https://gist.github.com/nikolay-turpitko/a2a79a5b83462339bcf0fefccc306690#file-jwk-go) to add a stub Validate method (so that generated code be able to compile). Now I want from the go-swagger that it generate me a go code with an array of my custom jwk elements.\r\n\r\nWhat I tried so far. Not sure, whether it is a misuse for  `x-go-name` and `x-go-package` tags, but I like names and decided to use them, [I added these tags to the JsonWebKey type definition in the spec](https://gist.github.com/nikolay-turpitko/a2a79a5b83462339bcf0fefccc306690#file-spec-yaml-L305). Next, I hacked go-swagger's `generator/model.go` to skip the definition with `x-go-package` tag. And hacked `typeResolver` to return `jwk.Key` as go type for it (name constructed as base name of the package from the `x-go-package` plus name from the `x-go-name`). I created a [patch](https://gist.github.com/nikolay-turpitko/a2a79a5b83462339bcf0fefccc306690#file-patch) to illustrate changes (it's not a PR, just for the sake of the question). OK, with these changes it [kinda did what I wanted](https://gist.github.com/nikolay-turpitko/a2a79a5b83462339bcf0fefccc306690#file-json_web_key_set-go). This code compiled and go tests in `go-swagger/genearator` passed (have not tried all other tests yet, though).\r\n\r\nIt's almost OK, but I cannot figure out where the import string came from. It magically appeared and happened to be correct. But if I change package name to, for example `gojwk`, it finds and imports the package with the same name from the lib, not the package from my project. I want to put my full package name from the `x-go-package` somewhere, so that it always be used.\r\n\r\nAnd overall, this hack feels a bit clumsy, I'd anticipate to fix the method t.goTypeName() instead, so that approach would work not only in `resolveSchemaRef`, but whenever t.goTypeName() invoked. But if I try to move fix there, some existing go tests fails. Also, some hack already existed for `x-go-name` exactly at the same spots. @casualjim: Ivan, I like idea with additional extensions. But should it be two separate extensions or just one? Like `\"x-go-type\": {\"name\": \"Key\", \"package\": \"github.com/user/package\", \"alias\":\"jwk\"}`. Right now I can't come up with example of separate usage of `x-go-type` and `x-go-import`.\r\n\r\nOr, something like this:\r\n\r\n``` yaml\r\nx-go-import:\r\n  package:\r\n    path: \"github.com/user/package\"\r\n    alias: \"jwk\"\r\n  type: \"Key\"\r\n```  ## Problem statement\r\nI'm trying to debug an issue with a bad POST handler. The problem seems to stem from `BindValidRequest` in `operations.post_foo.go` during the `o.context.Respond()` call.  \r\n\r\nI'd like to find the offending portion of the input data. Or some details on where the input parameter unmarsaling occurs (I looked at `https://github.com/go-swagger/go-swagger/blob/master/design.md` do no avail)\r\n\r\nLooking at the stack trace leads me to `go-openapi/middleware/context.go` but no particulars what might be going on. \r\n\r\n```\r\n2016/12/02 17:45:05 http: panic serving 127.0.0.1:35882: runtime error: invalid memory address or nil pointer dereference\r\ngoroutine 12 [running]:\r\nnet/http.(*conn).serve.func1(0xc42074a300)\r\n        /usr/local/go/src/net/http/server.go:1491 +0x12a\r\npanic(0x8c9b80, 0xc4200120b0)\r\n        /usr/local/go/src/runtime/panic.go:458 +0x243\r\ncode.foo.com/MyCo/mosaics-api/vendor/github.com/go-openapi/runtime/middleware.(*Context).Respond(0xc420700980, 0xc0ffa0, 0xc4206de340, 0xc42066e0f0, 0xc420013990, 0x1, 0x1, 0xc42001b180, 0x8ca8a0, 0xc420446600)\r\n        /home/sandy/go/src/code.foo.com/MyCo/mosaics-api/vendor/github.com/go-openapi/runtime/middleware/context.go:438 +0x7b1\r\ncode.foo.com/MyCo/mosaics-api/server/restapi/operations.(*PostMosaicExperimentalMosaics).ServeHTTP(0xc42031a660, 0xc0ffa0, 0xc4206de340, 0xc42066e0f0)\r\n        /home/sandy/go/src/code.foo.com/MyCo/mosaics-api/server/restapi/operations/post_mosaic_experimental_mosaics.go:49 +0x34d\r\ncode.foo.com/MyCo/mosaics-api/vendor/github.com/go-openapi/runtime/middleware.NewOperationExecutor.func1(0xc0ffa0, 0xc4206de340, 0xc42066e0f0)\r\n        /home/sandy/go/src/code.foo.com/MyCo/mosaics-api/vendor/github.com/go-openapi/runtime/middleware/operation.go:24 +0x69\r\nnet/http.HandlerFunc.ServeHTTP(0xc420107b50, 0xc0ffa0, 0xc4206de340, 0xc42066e0f0)\r\n        /usr/local/go/src/net/http/server.go:1726 +0x44\r\ncode.foo.com/MyCo/mosaics-api/vendor/github.com/go-openapi/runtime/middleware.NewRouter.func1(0xc0ffa0, 0xc4206de340, 0xc42066e0f0)\r\n        /home/sandy/go/src/code.foo.com/MyCo/mosaics-api/vendor/github.com/go-openapi/runtime/middleware/router.go:89 +0x478\r\nnet/http.HandlerFunc.ServeHTTP(0xc42078f680, 0xc0ffa0, 0xc4206de340, 0xc42066e0f0)\r\n        /usr/local/go/src/net/http/server.go:1726 +0x44\r\ncode.foo.com/MyCo/mosaics-api/vendor/github.com/go-openapi/runtime/middleware.Redoc.func1(0xc0ffa0, 0xc4206de340, 0xc42066e0f0)\r\n        /home/sandy/go/src/code.foo.com/MyCo/mosaics-api/vendor/github.com/go-openapi/runtime/middleware/redoc.go:72 +0xac\r\nnet/http.HandlerFunc.ServeHTTP(0xc42078f800, 0xc0ffa0, 0xc4206de340, 0xc42066e0f0)\r\n        /usr/local/go/src/net/http/server.go:1726 +0x44\r\ncode.foo.com/MyCo/mosaics-api/vendor/github.com/go-openapi/runtime/middleware.Spec.func1(0xc0ffa0, 0xc4206de340, 0xc42066e0f0)\r\n        /home/sandy/go/src/code.foo.com/MyCo/mosaics-api/vendor/github.com/go-openapi/runtime/middleware/spec.go:45 +0x8b\r\nnet/http.HandlerFunc.ServeHTTP(0xc42078f840, 0xc0ffa0, 0xc4206de340, 0xc42066e0f0)\r\n        /usr/local/go/src/net/http/server.go:1726 +0x44\r\nnet/http.serverHandler.ServeHTTP(0xc420791980, 0xc0ffa0, 0xc4206de340, 0xc42066e0f0)\r\n        /usr/local/go/src/net/http/server.go:2202 +0x7d\r\nnet/http.(*conn).serve(0xc42074a300, 0xc109a0, 0xc420744340)\r\n        /usr/local/go/src/net/http/server.go:1579 +0x4b7\r\ncreated by net/http.(*Server).Serve\r\n        /usr/local/go/src/net/http/server.go:2293 +0x44d\r\n```\r\n\r\nThe code in `context.go`\r\n```\r\n430 >---if err, ok := data.(error); ok {\r\n431 >--->---if format == \"\" {\r\n432 >--->--->---rw.Header().Set(runtime.HeaderContentType, runtime.JSONMime)\r\n433 >--->---}\r\n434 >--->---if route == nil || route.Operation == nil {\r\n435 >--->--->---c.api.ServeErrorFor(\"\")(rw, r, err)\r\n436 >--->--->---return\r\n437 >--->---}\r\n\r\n438 >--->---c.api.ServeErrorFor(route.Operation.ID)(rw, r, err)\r\n\r\n439 >--->---return\r\n440 >---}\r\n```\r\n\r\n... which kinda leaves me at a dead-end.  Slightly different https://gist.github.com/SandyWalsh/5987303142bea7bf5d41c07476dccf76\r\n\r\n```\r\ncurl -i     -H \"Accept: application/json\"     -X POST     -d '{\"id\": \"123e4567-e89b-12d3-a456-426655440000\", \"renditions\": [], \"bbox\": {}, \"coordinate_system\": \"coordinates\", \"first_acquired\": \"2006-01-02 15:04:05\", \"last_acquired\": \"2006-01-02 15:04:05\", \"product_type\": \"basemap\", \"name\":\"My mosaic\"}'      http://127.0.0.1:8000/v1/mosaic/experimental/mosaics\r\n```\r\n\r\nI was hesitant to post the whole thing since it doesn't help me learn the flow of data through the system (give a man a fish, etc). Was really looking for tips that you use for debugging these sorts of problems. \r\n\r\nBut I do appreciate you looking into it. \r\n The error from `ServeErrorFor` seems to be \r\n\r\n```\r\nvalidation failure list:\r\nunsupported media type \"application/x-www-form-urlencoded\", only [application/json] are allowed\r\n```\r\n\r\nI suspect `curl` is altering my format. Checking ...\r\n\r\n\r\n Thanks ... was very close to that myself (almost caught a fish ;)  It would be nice to get some debug level logging around that `ServeErrorFor()` line or `BindValidRequest()`. For example, now I'm getting \r\n\r\n`parsing body body from \"\" failed, because json: cannot unmarshal object into Go value of type string`\r\n\r\nwhen I issue\r\n```\r\ncurl -i     -H \"Accept: application/json\" -H \"Content-type: application/json\"     -X POST     -d '{\"id\": \"123e4567-e89b-12d3-a456-426655440000\", \"renditions\": [], \"bbox\": {}, \"coordinate_system\": \"coordinates\", \"first_acquired\": \"2006-01-02T15:04:05Z\", \"last_acquired\": \"2006-01-02T15:04:05Z\", \"product_type\": \"basemap\", \"name\":\"My mosaic\"}'      http://127.0.0.1:8000/v1/mosaic/experimental/mosaics\r\n```\r\n\r\nNote: I'm just going to keep updating this comment with notes as I make progress ...\r\n\r\nI've traced this through `BindValidRequest` in `xxx_parameters.go` and it's led me into `route.Consumer.Consume()` ... could be something related to the comment about \r\n\r\n> it assumes that complex things implement a Validatable(strfmt.Registry) error interface for simple values it will use straight method calls\r\n Found it: `\"bbox\": \"\"` ... not `\"bbox\": {}` ... trial and error    Ensure that parameters scanner maintains the sequence of the parameters, as it is in the code.\r\n\r\ncloses #768  ## Problem statement\r\nDefine a model like this,request content type is application/json :\r\n\r\n```yaml\r\n user:\r\n    type: object\r\n    properties:\r\n      role:\r\n        type: integer\r\n        enum:\r\n          - 0\r\n          - 1\r\n          - 10\r\n          - 11\r\n          - 20\r\n```\r\n\r\nit's used for a POST method for updating something and the 'role' is not required and '0' is valid value. But if the role is not set, the value is 0 either. How can I separate the two scenario 0 value and empty?\r\n\r\nTest Code like this:\r\n```go\r\n\r\nvar body models.User\r\nb := []byte(`{}`)\r\njson.Unmarshal(b, &body)\r\nt.Logf(\"%+v %v\", body, swag.IsZero(body.Status))\r\n```\r\n__print: {Role:0 } true__\r\nSo how about use *int instead of int? just my advise\r\n\r\n## Swagger specification\r\n$ swagger version\r\ndev\r\n\r\n  ## Problem statement\r\nThe model property's default values defined in the spec are not effective on server side handling of Rest call, if the Rest request is not setting with the (default-defined) properties or setting with empty/null values.\r\n\r\n## Swagger specification\r\n```\r\ndefinitions:\r\n  IdentifierType:\r\n    type: string\r\n    format: identifier\r\n    pattern: ^[A-Za-z][-A-Za-z0-9_]*$\r\n  item:\r\n    type: object\r\n    default:\r\n      id: 12345\r\n      description: abcde\r\n      completed: true      \r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int64\r\n        readOnly: true\r\n      description:\r\n        #$ref: '#/definitions/IdentifierType'\r\n        type: string\r\n        format: identifier\r\n        pattern: ^[A-Za-z][-A-Za-z0-9_]*$\r\n        minLength: 1\r\n      completed:\r\n        type: boolean\r\n```\r\n\r\n## Steps to reproduce\r\n1. Server logging code, just prints out the params body, in order to see whether the default values are effective or not.\r\n```\r\n\t// Start\r\n\tapi.TodosAddOneHandler = todos.AddOneHandlerFunc(func(params todos.AddOneParams) middleware.Responder {\r\n\t\tlog.Println(\"Add one item body:\", params.Body)\r\n\t\treturn middleware.NotImplemented(\"operation todos.AddOne has not yet been implemented\")\r\n\t})\r\n```\r\n\r\n2. Rest call.\r\n```\r\nbash-3.2$ curl -i localhost:57329 -d \"{\\\"description\\\": \\\"\\\"}\" -H 'Content-Type: application/io.goswagger.examples.todo-list.v1+json'\r\nHTTP/1.1 501 Not Implemented\r\nContent-Type: application/io.goswagger.examples.todo-list.v1+json\r\nDate: Thu, 01 Dec 2016 15:50:34 GMT\r\nContent-Length: 54\r\n\r\n\"operation todos.AddOne has not yet been implemented\"\r\n```\r\n\r\n3. Server output.\r\n```\r\n2016/12/01 10:50:34 Add one item body: &{false  0}  <---- Not output the defaults as expected\r\n```\r\n @casualjim as you mentioned, tested again with moving down the defaults under the properties, the defaults still not effective from server side. Any hints?\r\n\r\n```\r\ndefinitions:\r\n  IdentifierType:\r\n    type: string\r\n    format: identifier\r\n    pattern: ^[A-Za-z][-A-Za-z0-9_]*$\r\n  item:\r\n    type: object\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int64\r\n        readOnly: true\r\n      description:\r\n        #$ref: '#/definitions/IdentifierType'\r\n        type: string\r\n        format: identifier\r\n        pattern: ^[A-Za-z][-A-Za-z0-9_]*$\r\n        default: abcdef\r\n        minLength: 1\r\n      completed:\r\n        type: boolean\r\n        default: true\r\n``` @casualjim closed here. A PR will create for #828   ## Problem statement\r\nWhen a pattern validation fails on a field in request body, which is a type definition referencing to another definition, the returned error message won't show the validation failed field name, causing trouble to read what field failed at validation. \r\n\r\n## Swagger specification\r\n'''\r\nswagger: \"2.0\"\r\ninfo:\r\n  description: The product of a tutorial on goswagger.io\r\n  title: A To Do list application\r\n  version: 1.0.0\r\nconsumes:\r\n- application/io.goswagger.examples.todo-list.v1+json\r\nproduces:\r\n- application/io.goswagger.examples.todo-list.v1+json\r\nschemes:\r\n- http\r\npaths:\r\n  /:\r\n    get:\r\n      tags:\r\n        - todos\r\n      operationId: findTodos\r\n      parameters:\r\n        - name: since\r\n          in: query\r\n          type: integer\r\n          format: int64\r\n        - name: limit\r\n          in: query\r\n          type: integer\r\n          format: int32\r\n          default: 20\r\n      responses:\r\n        200:\r\n          description: list the todo operations\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: \"#/definitions/item\"\r\n        default:\r\n          description: generic error response\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\n    post:\r\n      tags:\r\n        - todos\r\n      operationId: addOne\r\n      parameters:\r\n        - name: body\r\n          in: body\r\n          schema:\r\n            $ref: \"#/definitions/item\"\r\n      responses:\r\n        201:\r\n          description: Created\r\n          schema:\r\n            $ref: \"#/definitions/item\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\n  /{id}:\r\n    parameters:\r\n      - type: integer\r\n        format: int64\r\n        name: id\r\n        in: path\r\n        required: true\r\n    put:\r\n      tags:\r\n        - todos\r\n      operationId: updateOne\r\n      parameters:\r\n        - name: body\r\n          in: body\r\n          schema:\r\n            $ref: \"#/definitions/item\"\r\n      responses:\r\n        200:\r\n          description: OK\r\n          schema:\r\n            $ref: \"#/definitions/item\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\n    delete:\r\n      tags:\r\n        - todos\r\n      operationId: destroyOne\r\n      responses:\r\n        204:\r\n          description: Deleted\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\ndefinitions:\r\n  IdentifierType:\r\n    type: string\r\n    format: identifier\r\n    pattern: ^[A-Za-z][-A-Za-z0-9_]*$\r\n  item:\r\n    type: object\r\n    required:\r\n      - description\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int64\r\n        readOnly: true\r\n      description:\r\n        $ref: '#/definitions/IdentifierType'        #<------ use another definition above, this causes the issue\r\n#<----- if replacing the $ref reference to its direct definition, the issue is gone.\r\n        minLength: 1\r\n      completed:\r\n        type: boolean\r\n  error:\r\n    type: object\r\n    required:\r\n      - message\r\n    properties:\r\n      code:\r\n        type: integer\r\n        format: int64\r\n      message:\r\n        type: string\r\n'''\r\n\r\n## Steps to reproduce\r\na git repo can be provided if needed.\r\n repaste the yaml spec (for better print).\r\n\r\n```yaml\r\nswagger: \"2.0\"\r\ninfo:\r\n  description: The product of a tutorial on goswagger.io\r\n  title: A To Do list application\r\n  version: 1.0.0\r\nconsumes:\r\n- application/io.goswagger.examples.todo-list.v1+json\r\nproduces:\r\n- application/io.goswagger.examples.todo-list.v1+json\r\nschemes:\r\n- http\r\npaths:\r\n  /:\r\n    get:\r\n      tags:\r\n        - todos\r\n      operationId: findTodos\r\n      parameters:\r\n        - name: since\r\n          in: query\r\n          type: integer\r\n          format: int64\r\n        - name: limit\r\n          in: query\r\n          type: integer\r\n          format: int32\r\n          default: 20\r\n      responses:\r\n        200:\r\n          description: list the todo operations\r\n          schema:\r\n            type: array\r\n            items:\r\n              $ref: \"#/definitions/item\"\r\n        default:\r\n          description: generic error response\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\n    post:\r\n      tags:\r\n        - todos\r\n      operationId: addOne\r\n      parameters:\r\n        - name: body\r\n          in: body\r\n          schema:\r\n            $ref: \"#/definitions/item\"\r\n      responses:\r\n        201:\r\n          description: Created\r\n          schema:\r\n            $ref: \"#/definitions/item\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\n  /{id}:\r\n    parameters:\r\n      - type: integer\r\n        format: int64\r\n        name: id\r\n        in: path\r\n        required: true\r\n    put:\r\n      tags:\r\n        - todos\r\n      operationId: updateOne\r\n      parameters:\r\n        - name: body\r\n          in: body\r\n          schema:\r\n            $ref: \"#/definitions/item\"\r\n      responses:\r\n        200:\r\n          description: OK\r\n          schema:\r\n            $ref: \"#/definitions/item\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\n    delete:\r\n      tags:\r\n        - todos\r\n      operationId: destroyOne\r\n      responses:\r\n        204:\r\n          description: Deleted\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\ndefinitions:\r\n  IdentifierType:\r\n    type: string\r\n    format: identifier\r\n    pattern: ^[A-Za-z][-A-Za-z0-9_]*$\r\n  item:\r\n    type: object\r\n    required:\r\n      - description\r\n    properties:\r\n      id:\r\n        type: integer\r\n        format: int64\r\n        readOnly: true\r\n      description:\r\n        $ref: '#/definitions/IdentifierType'  #use its definition above, this causes the issue, if replacing the $ref reference to its direct definition, the issue is gone.\r\n        minLength: 1\r\n      completed:\r\n        type: boolean\r\n  error:\r\n    type: object\r\n    required:\r\n      - message\r\n    properties:\r\n      code:\r\n        type: integer\r\n        format: int64\r\n      message:\r\n        type: string\r\n``` Here is the error in rest response:\r\n\r\n```\r\ncurl -l localhost:58408 -d \"{\\\"description\\\":\\\"____message\\\"}\" -H 'Content-Type: application/io.goswagger.examples.todo-list.v1+json'\r\n\r\n{\"code\":605,\"message\":\" in body should match '^[A-Za-z][-A-Za-z0-9_]*$'\"}\r\n# missing \"description\" field name in the above log, actually showing empty before \"in body should...\"\r\n``` @casualjim solved this issue on an internal codebase, would you mind that I initiate an PR for it? thanks!  Hi,\r\nI'm using this code to generate the Swagger file:\r\n\r\n`    private static readonly Lazy<NSwag.SwaggerDocument> _swagger = new Lazy<NSwag.SwaggerDocument>(() =>\r\n        {\r\n            IHttpRoute defaultRoute = new HttpRoute();\r\n            GlobalConfiguration.Configuration.Routes.TryGetValue(\"DefaultApi\", out defaultRoute);\r\n            var settings = new WebApiToSwaggerGeneratorSettings\r\n            {\r\n                DefaultUrlTemplate = (defaultRoute == null ? \"DefaultApi\" : defaultRoute.RouteTemplate),\r\n                IsAspNetCore = false,\r\n                Title = \"VBPISAPI\",\r\n                Description = \"Business level API from APIS\",\r\n                Version = Assembly.GetExecutingAssembly().GetName().Version.ToString()\r\n        };\r\nvar generator = new WebApiToSwaggerGenerator(settings);\r\n\r\n            List<Type> derivedTypes = VType.GetDerivedTypes(typeof(ApiController), Assembly.GetExecutingAssembly());\r\n\r\n            return generator.GenerateForControllers(derivedTypes);\r\n        });\r\n        public static void GenerateSwaggerFile()\r\n        {\r\n            string strJson = JsonConvert.SerializeObject(_swagger.Value, Formatting.Indented);\r\n\r\n            File.WriteAllText(AppDomain.CurrentDomain.BaseDirectory + @\"vbpisapi-swagger.json\", strJson);\r\n        }`\r\n\r\nThe file gets generated and somewhere in the definitions I find this:\r\n\r\n`     \"definitions\": {\r\n    \"AssessmentStatus\": {\r\n      \"type\": \"integer\",\r\n      \"x-typeName\": \"AssessmentStatus\",\r\n      \"x-enumNames\": [\r\n        \"HIT\",\r\n        \"NO_HIT\",\r\n        \"ERROR\"\r\n      ],\r\n      \"enum\": [\r\n        0,\r\n        1,\r\n        2\r\n      ],\r\n      \"description\": \"\"\r\n    },\r\n...... more definitions in between ....\r\n    \"ref_62c1b6ef_5b69_4574_be54_d9c177526403\": {\r\n      \"type\": \"string\",\r\n      \"x-typeName\": \"AssessmentStatus\",\r\n      \"x-enumNames\": [\r\n        \"HIT\",\r\n        \"NO_HIT\",\r\n        \"ERROR\"\r\n      ],\r\n      \"enum\": [\r\n        \"HIT\",\r\n        \"NO_HIT\",\r\n        \"ERROR\"\r\n      ],\r\n      \"description\": \"\"\r\n    },`\r\n\r\n\r\nWhere did this \"ref_\" came from?  ## Problem statement\r\n\r\nA list of int32s is represented in go as type `[]int32` (not `[]*int32`) but validation code for minimum/maximum tries to get them as `float64(*m.TheArray[i])`. This leads to a compiler error.\r\n\r\n## Swagger specification\r\n\r\n```yaml\r\nswagger: '2.0'\r\ninfo:\r\n  title: Test\r\n  description: Test Service\r\n  version: '1.0.0'\r\nhost: localhost\r\nbasePath: /\r\nproduces:\r\n  - application/json\r\nschemes:\r\n  - http\r\npaths:\r\n  /myMethod:\r\n    get:\r\n      operationId: get_test\r\n      summary: Get a list of int32s.\r\n      responses:\r\n        200:\r\n          schema:\r\n            $ref: '#/definitions/test_list'\r\ndefinitions:\r\n  test_list:\r\n    type: object\r\n    properties:\r\n      the_array:\r\n        type: array\r\n        items:\r\n          minimum: 0\r\n          maximum: 10\r\n          type: number\r\n          format: int32\r\n```\r\n\r\n## Steps to reproduce\r\n\r\n```shellsession\r\n$ swagger generate server -f <above swagger spec>\r\n$ go build models/test_list.go\r\n\r\nmodels/test_list.go:51: invalid indirect of m.TheArray[i] (type int32)\r\nmodels/test_list.go:55: invalid indirect of m.TheArray[i] (type int32)\r\n```  ## Problem statement\r\n\r\nI am trying to integrate a package into a go-swagger generated API that is using the 'github.com/golang/glog' logger. When I initialize the glog logger it appears to shield the flags defined in the go-swagger runtime.\r\n\r\n```\r\n\"C:\\Program Files (x86)\\JetBrains\\IntelliJ IDEA 2016.3\\bin\\runnerw.exe\" \"C:\\Users\\Theodore\\AppData\\Local\\Temp\\Build main.go and rungo\" --tls-certificate ./security/mp.crt --tls-key ./security/mp.key --host 0.0.0.0 --tls-port 8090\r\nGOROOT=C:/Go\r\nGOPATH=C:/Users/Theodore/dev/Golang\r\n\"C:\\Program Files (x86)\\JetBrains\\IntelliJ IDEA 2016.3\\bin\\runnerw.exe\" C:/Go\\bin\\go.exe build -o \"C:\\Users\\Theodore\\AppData\\Local\\Temp\\Build main.go and rungo\" C:/Users/Theodore/dev/Golang/src/github.com/medicarepathfinder/scoring_engine_mvp/api/cmd/mp-scoring-server/main.go\r\nflag provided but not defined: -tls-certificate\r\nUsage of C:\\Users\\Theodore\\AppData\\Local\\Temp\\Build main.go and rungo:\r\n  -alsologtostderr\r\n    \tlog to standard error as well as files\r\n  -log_backtrace_at value\r\n    \twhen logging hits line file:N, emit a stack trace\r\n  -log_dir string\r\n    \tIf non-empty, write log files in this directory\r\n  -logtostderr\r\n    \tlog to standard error instead of files\r\n  -stderrthreshold value\r\n    \tlogs at or above this threshold go to stderr\r\n  -v value\r\n    \tlog level for V logs\r\n  -vmodule value\r\n    \tcomma-separated list of pattern=N settings for file-filtered logging\r\n```\r\n\r\n## Swagger specification\r\nany\r\n\r\n## Steps to reproduce\r\nadd a package with this code:\r\n```\r\npackage engine\r\n\r\nimport (\r\n\t\"github.com/golang/glog\"\r\n)\r\n\r\nfunc init() {\r\n\tflag.Parse()\r\n}\r\n\r\nfunc EngineFunctionPoint() {\r\n        glog.Info(\"EngineFunctionPoint called\")\r\n}\r\n```\r\n\r\nand call the EngineFunctionPoint() in the configureAPI() function of the API. Still having a problem with how and where to initialize glog so that both sets of flags are honored: the runtime flags, such as --tls-certificate and the glog flags like -log_dir and -stderrthreshold.\r\n\r\nIf I initialize glog in the config_xxx.go I don't get the go-swagger runtime flags, and if I initialize glog in the engine, I get the error, logging before flag.Parse.\r\n\r\nI realize that this question is not so much about logging per se, but more about how to merge the flag sets defined by different packages. I am having the same problem, is there any fix for this ?  ## Problem statement\r\nVery weird ... sorry to trouble you again. I'm sure I'm just doing something stupid. \r\n\r\nUsing the base gen'ed server code (no changes to the `configure_xxx.go` file) when I attempt to curl the endpoint I get \r\n\r\n```\r\n$ curl -i  http://127.0.0.1:8000/a/b/c\r\nHTTP/1.1 405 Method Not Allowed\r\nAllow: PUT,POST\r\nContent-Type: application/json\r\nDate: Mon, 28 Nov 2016 20:15:52 GMT\r\nContent-Length: 70\r\n\r\n{\"code\":405,\"message\":\"method GET is not allowed, but [PUT,POST] are\"}\r\n```\r\n\r\nI would expect to get the 501 `NotImplemented` error.\r\n\r\nBut, if I change this to a PUT or a POST I get the other methods (note the Allow values):\r\n\r\n```\r\n$ curl -i  http://127.0.0.1:8000/a/b/c --data \"\"\r\nHTTP/1.1 405 Method Not Allowed\r\nAllow: PUT,GET\r\nContent-Type: application/json\r\nDate: Mon, 28 Nov 2016 20:00:54 GMT\r\nContent-Length: 70\r\n\r\n{\"code\":405,\"message\":\"method POST is not allowed, but [PUT,GET] are\"}\r\n```\r\n\r\nor\r\n\r\n```\r\n$ curl -i  http://127.0.0.1:8000/a/b/c -XPUT\r\nHTTP/1.1 405 Method Not Allowed\r\nAllow: GET,POST\r\nContent-Type: application/json\r\nDate: Mon, 28 Nov 2016 20:17:24 GMT\r\nContent-Length: 70\r\n\r\n```\r\n\r\nI put some trace in the NotImplemented handlers and that code isn't getting called, so the router is responding beforehand. \r\n\r\n## Swagger specification\r\n\r\nThe salient part of my swagger doc looks like this ...\r\n```\r\npaths:\r\n  \"/a/b/c\":\r\n    post:\r\n      description: \"blah\"\r\n      responses:\r\n        200:\r\n          description: \"OK\"\r\n          schema:\r\n            $ref: '#/definitions/WriteResponse'\r\n        400:\r\n          description: \"blah\"\r\n          schema:\r\n            $ref: '#/definitions/APIError'\r\n    put:\r\n      description: \"blah\"\r\n      responses:\r\n        200:\r\n          description: \"OK\"\r\n          schema:\r\n            $ref: '#/definitions/WriteResponse'\r\n        400:\r\n          description: \"Blah\"\r\n          schema:\r\n            $ref: '#/definitions/APIError'\r\n    get:\r\n      description: \"blah\"\r\n      responses:\r\n        200:\r\n          description: \"blah\"\r\n          schema:\r\n            $ref: '#/definitions/FooListPage'\r\n        400:\r\n          description: \"blah\"\r\n          schema:\r\n            $ref: '#/definitions/APIError'\r\n```\r\n Sure thing ... thanks @casualjim \r\n\r\n```\r\nswagger: '2.0'\r\nbasePath: /v1\r\ninfo:\r\n  version: \"experimental\"\r\n  title: \"Mosaics API\"\r\n  description: \"An API to interact with Mosaics.\"\r\nconsumes:\r\n- application/json\r\nproduces:\r\n- application/json\r\nschemes:\r\n- https\r\n\r\ndefinitions:\r\n  MosaicSeriesFilter:\r\n    descriminator: type\r\n    properties:\r\n      filterType:\r\n        type: string\r\n      filterable:\r\n        type: string\r\n        enum: [\"mosaic_name\"]\r\n        default: mosaic_name\r\n      value:\r\n        type: string\r\n    required:\r\n    - filterType\r\n    - filterable\r\n  MosaicNameFilter:\r\n    allOf:\r\n    - $ref: '#/definitions/MosaicSeriesFilter'\r\n    properties:\r\n      value:\r\n        type: string\r\n    required:\r\n    - value\r\n\r\n  Error:\r\n    properties:\r\n      message:\r\n        description: A descriptive error message.\r\n        type: string\r\n    type: object\r\n\r\n  Errors:\r\n    description: \"A list of Errors\"\r\n    type: array\r\n    items:\r\n      $ref: '#/definitions/Error'\r\n\r\n  APIError:\r\n    description: An APIError \r\n    properties:\r\n      field:\r\n        additionalProperties:\r\n          $ref: '#/definitions/Errors'\r\n        type: object\r\n      general:\r\n        $ref: '#/definitions/Errors'\r\n    required:\r\n    - general\r\n    - field\r\n    type: object\r\n\r\n  WriteResponse:\r\n    type: object\r\n    required:\r\n      - ok\r\n    description: \"Response of requests to create a mosaic\"\r\n    properties:\r\n      ok:\r\n        description: If it was successfully created.\r\n        type: boolean\r\n      errors:\r\n        description: \"A list of validation errors which prevented the request from succeeding\"\r\n        items:\r\n          $ref: '#/definitions/APIError'\r\n        type: array\r\n      id:\r\n        description: The id of the newly created mosaic\r\n        type: string\r\n\r\n  Mosaic:\r\n    description: A Mosaic is ...\r\n    properties:\r\n      _links:\r\n        $ref: '#/definitions/MosaicLinks'\r\n      id:\r\n        description: A UUID to uniquely identify this Mosaic.\r\n        format: uuid\r\n        type: string\r\n      renditions:\r\n        description: A list of renditions to consume the Mosaic data.\r\n        items:\r\n          $ref: '#/definitions/MosaicRendition'\r\n        type: array\r\n      bbox:\r\n        description: The bounding box representing the extent of the mosaic.\r\n        format: geojson\r\n        type: string\r\n      coordinate_system:\r\n        description: The coordinate system of this mosaic\r\n        type: string\r\n      first_acquired:\r\n        description: The acquisition date of the oldest scene that contributed to this mosaic.\r\n        type: string\r\n        format: date-time\r\n      last_acquired:\r\n        description: The acquisition date of the newest scene that contributed to this mosaic.\r\n        type: string\r\n        format: date-time\r\n      interval:\r\n        description: The interval of the mosaic\r\n        type: string\r\n      product_type:\r\n        description: The product type of this mosaics, currently supported is \"timelapse\", \"basemap\"\r\n        type: string\r\n      name:\r\n        description: A name for this mosaic. This does not need to be unique.\r\n        type: string\r\n    type: object\r\n    required:\r\n      - id\r\n      - renditions\r\n      - bbox\r\n      - coordinate_system\r\n      - first_acquired\r\n      - last_acquired\r\n      - product_type\r\n      - name\r\n\r\n  MosaicSeries:\r\n    description: A Mosaic Series is a ...\r\n    properties:\r\n      _links:\r\n        $ref: '#/definitions/MosaicSeriesLinks'\r\n      id:\r\n        description: A UUID to uniquely identify this Mosaic Series.\r\n        format: uuid\r\n        type: string\r\n      name:\r\n        description: A human readable name for this series\r\n        type: string\r\n      interval:\r\n        description: The interval for the mosaics in the series.\r\n        type: string\r\n      product_type:\r\n        description: \"The type of product this mosaic is\"\r\n        enum: [\"basemap\", \"timelapse\", \"l3m\"]\r\n        type: string\r\n      selection_filters:\r\n        type: array\r\n        description: An array of MosaicSeriesFilters to filter mosaics\r\n        items:\r\n          $ref: '#/definitions/MosaicSeriesFilter'\r\n\r\n    required:\r\n    - id\r\n    - _links\r\n    - mosaic_count\r\n    - product_type\r\n    - name\r\n    type: object\r\n\r\n  MosaicRendition:\r\n    properties:\r\n      name:\r\n        description: The name of this rendition, e.g. RGB\r\n        type: string\r\n      type:\r\n        description: The type of this rendition\r\n        type: string\r\n      location:\r\n        description: A URL (possibly a template) pointing to a resource that provides access to the rendition.\r\n        type: string\r\n    type: object\r\n\r\n  MosaicListLinks:\r\n    properties:\r\n      _self:\r\n        description: \"The link back to this list page\"\r\n        type: string\r\n    type: object\r\n\r\n  MosaicSeriesListLinks:\r\n    properties:\r\n      _self:\r\n        description: \"The link to this listing page\"\r\n        type: string\r\n    type: object\r\n\r\n  MosaicLinks:\r\n    properties:\r\n      _self:\r\n        description: \"The canonical link to this specific Mosaic\"\r\n        type: string\r\n    type: object\r\n\r\n  MosaicSeriesLinks:\r\n    properties:\r\n      _self:\r\n        description: \"The canonincal link to this specific Mosaic Series\"\r\n        type: string\r\n      mosaics:\r\n        description: \"The canonincal link to the mosaics inside this Mosaic Series\"\r\n        type: string\r\n    type: object\r\n\r\n  MosaicSeriesMosaicsLinks:\r\n    properties:\r\n      _self:\r\n        description: \"The canonical link back to this list\"\r\n        type: string\r\n    type: object\r\n\r\n  MosaicListPage:\r\n    properties:\r\n      _links:\r\n        $ref: '#/definitions/MosaicListLinks'\r\n      mosaics:\r\n        items:\r\n          $ref: '#/definitions/Mosaic'\r\n        type: array\r\n    type: object\r\n\r\n  MosaicSeriesListPage:\r\n    properties:\r\n      _links:\r\n        $ref: '#/definitions/MosaicSeriesListLinks'\r\n      series:\r\n        items:\r\n          $ref: '#/definitions/MosaicSeries'\r\n        type: array\r\n    type: object\r\n\r\n  MosaicSeriesMosaicsListPage:\r\n    properties:\r\n      _links:\r\n        $ref: '#/definitions/MosaicSeriesMosaicsLinks'\r\n      mosaics:\r\n        items:\r\n          $ref: '#/definitions/Mosaic'\r\n        type: array\r\n    type: object\r\n\r\nparameters:\r\n  pSeriesId:\r\n    description: The Mosaic Series ID\r\n    in: path\r\n    name: SeriesId\r\n    format: uuid\r\n    required: true\r\n    type: string\r\n\r\npaths:\r\n  \"/mosaic/experimental/mosaics\":\r\n    post:\r\n      description: \"Creates a new mosaic\"\r\n      responses:\r\n        200:\r\n          description: \"Mosaic was successfully created\"\r\n          schema:\r\n            $ref: '#/definitions/WriteResponse'\r\n        400:\r\n          description: There was a validation error\r\n          schema:\r\n            $ref: '#/definitions/APIError'\r\n    put:\r\n      description: \"updates a mosaic\"\r\n      responses:\r\n        200:\r\n          description: \"Mosaic was successfully updated\"\r\n          schema:\r\n            $ref: '#/definitions/WriteResponse'\r\n        400:\r\n          description: There was a validation error\r\n          schema:\r\n            $ref: '#/definitions/APIError'\r\n    get:\r\n      description: \"Returns all accessible mosaics. For non authenticated users, this returns public mosaics.\"\r\n      responses:\r\n        200:\r\n          description: A list of mosaics.\r\n          schema:\r\n            $ref: '#/definitions/MosaicListPage'\r\n        400:\r\n          description: There was an error with the request.\r\n          schema:\r\n            $ref: '#/definitions/APIError'\r\n\r\n  \"/mosaic/experimental/series\":\r\n    post:\r\n      description: \"Creates a Series\"\r\n      responses:\r\n        200:\r\n          description: The series was created.\r\n          schema:\r\n            $ref: '#/definitions/WriteResponse'\r\n        400:\r\n          description: There was an error with the request\r\n          schema:\r\n            $ref: '#/definitions/APIError'\r\n    get:\r\n      description: \"Returns a list of accessible mosaic series\"\r\n      responses:\r\n        200:\r\n          description: A list of Mosaic Series\r\n          schema:\r\n            $ref: '#/definitions/MosaicSeriesListPage'\r\n        400:\r\n          description: There was an error with the request.\r\n          schema:\r\n            $ref: '#/definitions/APIError'\r\n\r\n  \"/mosaic/experimental/series/{SeriesId}\":\r\n    get:\r\n      description: \"Returns back a single Mosaic Series Record\"\r\n      parameters:\r\n      - $ref: '#/parameters/pSeriesId'\r\n      responses:\r\n        200:\r\n          description: Gets a single Mosaic Series record.\r\n          schema:\r\n            $ref: '#/definitions/MosaicSeries'\r\n        400:\r\n          description: There was an error with the request.\r\n          schema:\r\n            $ref: '#/definitions/APIError'\r\n\r\n  \"/mosaic/experimental/series/{SeriesId}/mosaics\":\r\n    get:\r\n      description: \"Returns the list of mosaics in this series.\"\r\n      parameters:\r\n      - $ref: '#/parameters/pSeriesId'\r\n      responses:\r\n        200:\r\n          description: Returns the list of mosaics in this series.\r\n          schema:\r\n            $ref: '#/definitions/MosaicSeriesMosaicsListPage'\r\n        400:\r\n          description: There was an error with the request.\r\n          schema:\r\n            $ref: '#/definitions/APIError'\r\n``` I tried a few little changes like\r\n\r\n`/mosaic/experimental/mosaics` -> `/aaa/bbb/ccc`\r\n\r\nand\r\n\r\n```\r\ninfo:\r\n  version: \"experimental\"\r\n```\r\nto \r\n\r\n```\r\ninfo:\r\n  version: \"2\"\r\n```\r\n\r\nno difference. \r\n\r\nBut I noticed the naming in configure looks a little wonky\r\n\r\n```\r\napi.GetAaaBbbCccHandler = operations.GetAaaBbbCccHandlerFunc(func(params operations.GetAaaBbbCccParams) middleware.Responder {\r\n    return middleware.NotImplemented(\"operation .GetAaaBbbCcc has not yet been implemented\")\r\n})\r\n```\r\n\r\nThe `.GetAaaBbbCcc` (note the period) might be a clue. I'm digging into the router setup code now. \r\n\r\n\r\n Ah, whoopsy! Thanks! Lots of moving parts at play here. \r\n That said ... shouldn't the framework return a 404 for those requests?  ## Problem statement\r\nI have all the go-swagger stuff vendor'ed in my project. \r\n\r\n```swagger generate server``` suggested the following external packages needed to be included\r\n\r\n```\r\nFor this generation to compile you need to have some packages in your GOPATH:\r\n\r\n  * github.com/go-openapi/runtime\r\n  * github.com/tylerb/graceful\r\n  * github.com/jessevdk/go-flags\r\n  * golang.org/x/net/context\r\n```\r\n\r\nBut the actual list turned out to be \r\n```\r\ngo get github.com/go-openapi/runtime\r\ngo get github.com/tylerb/graceful\r\ngo get github.com/jessevdk/go-flags\r\ngo get golang.org/x/net/context\r\ngo get github.com/go-openapi/analysis\r\ngo get github.com/go-openapi/spec\r\ngo get github.com/gorilla/context\r\ngo get github.com/go-openapi/loads\r\ngo get github.com/go-openapi/validate\r\n```\r\n\r\nAll of which I then vendor'ed. \r\n\r\nSo attempting to `go run main.go` I get\r\n\r\n```\r\n# my_org/my_proj/output/restapi/operations\r\n../../restapi/operations/foo_api.go:218: cannot use o.spec (type *\"my_org/my_proj/vendor/github.com/go-openapi/loads\".Document) as type *\"github.com/go-openapi/loads\".Document in argument to middleware.NewRoutableContext\r\n../../restapi/operations/foo_api.go:218: cannot use o (type *FooAPI) as type middleware.RoutableAPI in argument to middleware.NewRoutableContext:\r\n        *FooAPI does not implement middleware.RoutableAPI (wrong type for AuthenticatorsFor method)\r\n                have AuthenticatorsFor(map[string]\"my_org/my_proj/vendor/github.com/go-openapi/spec\".SecurityScheme) map[string]\"my_org/my_proj/vendor/github.com/go-openapi/runtime\".Authenticator\r\n                want AuthenticatorsFor(map[string]\"github.com/go-openapi/spec\".SecurityScheme) map[string]\"github.com/go-openapi/runtime\".Authenticator\r\n```\r\n\r\nIt looks like the generated code is not considering it could be vendored?\r\n Sorry, I should have mentioned. \r\n\r\nI'm using 1.7.1 and [govendor](https://github.com/kardianos/govendor)\r\n\r\nCould this perhaps be related to running swagger in docker? In the complaining file\r\n\r\n`my_org/my_project/output/restapi/operations/foo_api.go`\r\n\r\n```\r\nimport (\r\n    \"fmt\"\r\n    \"net/http\"\r\n    \"strings\"\r\n    loads \"github.com/go-openapi/loads\"\r\n    runtime \"github.com/go-openapi/runtime\"\r\n    middleware \"github.com/go-openapi/runtime/middleware\"\r\n    spec \"github.com/go-openapi/spec\"\r\n    strfmt \"github.com/go-openapi/strfmt\"\r\n    \"github.com/go-openapi/swag\"\r\n)\r\n\r\n``` Can confirm. Got the same results. \r\n\r\nThanks again @casualjim I'll see where `gvt` gets me.  I have no issues with vendoring using http://glide.sh/  ## Problem statement\r\n\r\ngo-swagger complains target not in $GOPATH when, I think, it is ...\r\n\r\n```\r\n$ echo $GOPATH\r\n/home/sandy/go\r\n\r\n$ pwd\r\n/home/sandy/go/src/my_org/my_project\r\n\r\n$ alias swagger=\"docker run --rm -it -v $HOME:$HOME -w $(pwd) quay.io/goswagger/swagger\"\r\n$ alias\r\n...\r\nalias swagger='docker run --rm -it -v /home/sandy:/home/sandy -w /home/sandy/go/src/my_org/my_project quay.io/goswagger/swagger'\r\n\r\n$ ls -la subdir/spec/\r\n...\r\n-rw-rw-r-- 1 sandy sandy 10116 Oct 31 15:26 project.swagger.yaml\r\n\r\n$  swagger generate server -f subdir/spec/mosaic.swagger.yaml -t output\r\n2016/11/24 17:16:22 building a plan for generation\r\n2016/11/24 17:16:22 target must reside inside a location in the $GOPATH/src\r\n\r\n\r\n```\r\n\r\nBut ... but ... it is?\r\n\r\n Awesome ... works like a charm. \r\n\r\nThanks @casualjim!  ````\r\n//Foo does stuff\r\n//swagger:response Foo\r\ntype Foo struct {\r\n    Bar int\r\n}\r\n````\r\n\r\nsimply results in swagger exiting with:\r\n`unable to determine package for /.../api.go`\r\n\r\nremoving \"swagger:response\" will make it work again, but i'm trying to add a result type here. or actually a model, but models can't be used as result.\r\nGenerally it would be nice if\r\n - there was a working example. The docs aren't exactly obvious.\r\n - swagger had error messages rather than just exiting.\r\n\r\n\r\n\r\n\r\n ah yes, it could be me not understanding gopath.\r\n````\r\nmkdir foo\r\ncd foo \r\ncat > main.go <<EOF\r\npackage main\r\n//swagger:response Foo\r\ntype Foo struct {\r\n    Bar int\r\n}\r\nEOF\r\nGOPATH=$PWD swagger generate spec\r\nunable to determine package for /tmp/foo/main.go\r\n\r\n````\r\n\r\n\r\nnote that this only happens with response. everything else generates fine strange, but thanks alot for the explanation!\r\nI'm using gom to ease the pain that is gopath, and gom exec didn't do the right thing in this specific case apparently. It would be nice if go-swagger just failed completely rather than just for response, so gom users can see the issue. actually this fixed my issue with gom:\r\n\r\n````\r\nmkdir src\r\nln -s .. src/main\r\ngom exec sh -c \"cd  src/main; swagger generate spec\"\r\n````\r\n  ## Problem statement\r\n\r\nGetting an io.EOF error that is not properly checked when unmarshalling a discriminator field that is empty at the time of the GET request. I've modified the generated client code to resolve this as follows:\r\n\r\nBefore:\r\n\r\n```go\r\n<myDiscriminator>, err := Unmarshal<myDiscriminator>(bytes.NewBuffer(<myDiscriminator>), runtime.JSONConsumer())\r\nif err != nil {\r\n  return err\r\n}\r\n```\r\n\r\nAfter:\r\n\r\n```go\r\n<myDiscriminator>, err := Unmarshal<myDiscriminator>(bytes.NewBuffer(<myDiscriminator>), runtime.JSONConsumer())\r\nif err != nil && err != io.EOF {\r\n  return err\r\n}\r\n```\r\n\r\n## Swagger specification\r\n\r\n2.0\r\n\r\n## Steps to reproduce\r\n\r\n1. Use v0.7.4 of CLI\r\n2. Generate client from existing spec with references to discriminator\r\n3. Execute client operation that returns HTTP 200 with an empty response in the discriminator field Hmm, good point. Thanks @casualjim. So my explanation of the issue may be incorrect. I'm using the Swagger spec here -> https://westus.dev.cognitive.microsoft.com/docs/services/TextAnalytics.V2.0/export?DocumentFormat=Swagger&ApiName=Azure%20Machine%20Learning%20-%20Text%20Analytics\r\n\r\nMore specifically, when I call the /operations/{operationId} endpoint, the operationProcessingResult property of the OperationResult is empty on the first few HTTP 200 responses; until the OperationResult status property returns \"Succeeded\".\r\n\r\nThe <myDiscriminator> placeholder in my code snippet is actually the OperationProcessingResult type.  ## Problem statement\r\n\r\nI am trying to serve a go-swagger generated API from a container, and get an ERR_EMPTY_RESPONSE.\r\n\r\n## Swagger specification\r\ntutorials/todo-list/server-complete/swagger.yml\r\n\r\n## Steps to reproduce\r\nDockerfile: I have copied server-complete to a standalone repo and vendored it so that the build can occur in the container.\r\n\r\n```Dockerfile\r\nFROM golang\r\nMAINTAINER E. Theodore L. Omtzigt \r\n\r\nENV GOBIN $GOPATH/bin\r\n\r\nADD . /go/src/github.com/Ravenwater/server-complete\r\nRUN go install /go/src/github.com/Ravenwater/server-complete/cmd/todo-list-server/main.go\r\nWORKDIR /go/src/github.com/Ravenwater/server-complete\r\nENTRYPOINT /go/bin/main --port 8090\r\n\r\n# serving HTTP of 8090\r\nEXPOSE 8090\r\n``` Perfect, that works.\r\n\r\nWhat is the explanation? hi @casualjim, have you tried something similar in macOS? I'm getting the below issue and I suspect your workflow is intended for Linux. Thanks\r\n\r\n`/usr/local/go/pkg/tool/darwin_amd64/link: running clang failed: exit status 1\r\nld: library not found for -lcrt0.o\r\nclang: error: linker command failed with exit code 1 (use -v to see invocation)` yeah the build script is specifically for building against a musl based linux in a docker container For anyone coming across this in the future, host takes a string, so use --host=\"0.0.0.0\" instead of --host=0.0.0.0     ... port takes an int\r\nexample:\r\n```\r\nFROM golang\r\nMAINTAINER E. Theodore L. Omtzigt \r\n\r\nENV GOBIN $GOPATH/bin\r\n\r\nADD . /go/src/github.com/Ravenwater/server-complete\r\nRUN go install /go/src/github.com/Ravenwater/server-complete/cmd/todo-list-server\r\nWORKDIR /go/src/github.com/Ravenwater/server-complete\r\nENTRYPOINT /go/bin/todo-list-server --port 8090 --host=\"0.0.0.0\"\r\n\r\n# serving HTTP of 8090\r\nEXPOSE 8090\r\n```\r\n@crezam I am using Docker for mac on OSX Sierra 10.12.6  ## Problem statement\r\n\r\nI'm currently generating a client from a spec in which one of the API operations doesn't reference a response definition. The API still returns a response, but it is not accessible since the `readResponse` implementation simply does a `return nil` since there is no model for it to reference.\r\n\r\nIs there a way to return a generic response in this case?\r\n\r\n## Swagger specification\r\n\r\n2.0\r\n\r\n## Steps to reproduce\r\n\r\nGenerate client from existing Swagger spec with an operation whose \"200\" response does not include a \"schema\" property  ## Problem statement\r\n\r\nI saw in handlerFunc , which will return middleware.Responder, so all our generated response function are extend the interface of middleware.Responder , so everyone will generate a WriteResponse function. \r\n\r\nSo my question is, how could I add other items, such as cookies , before I WriteResponse() ? \r\n\r\nShould I write something like \r\n\r\n```go\r\n\tmiddleware.ResponderFunc(myhandler)\r\n```\r\n\r\n\r\n\r\nThanks \r\n Just share my solution:\n\n``` go\nimport (\n    \"net/http\"\n    \"github.com/go-openapi/runtime\"\n    \"github.com/go-openapi/runtime/middleware\"\n)\n\ntype CustomResponder struct {\n    responder middleware.Responder\n}\n\nfunc NewCustomResponder(responder middleware.Responder) *CustomResponder {\n    return &CustomResponder{\n        responder: responder,\n    }\n}\n\nfunc (this *CustomResponder) WriteResponse(rw http.ResponseWriter, p runtime.Producer) {\n    cookie := http.Cookie{Name: \"robin\", Value:\"abcd\"}\n    http.SetCookie(rw, &cookie)\n    this.responder.WriteResponse(rw, p)\n}\n```\n  ## Problem statement\r\n\r\nI have a simple API key authentication function that checks for an API key. When the key doesn't match, I return an error. When I do, the server doesn't call the handler and the client hangs. When I return a nil for the error, the server progresses to call the function handler.\r\n\r\nThe test is the simple enumeration of authentication and valid resource state:\r\n- a valid access: correct auth token, and a valid social ID\r\ncurl -s -H 'Content-Type: application/mp_scoring.api.v1+json' -H 'X-Token: abcdefuvwxyz' http://localhost:8090/api/customers -X GET -d \"{\\\"ssn\\\": \\\"123-45-6789\\\"}\"\r\n- a 404 access: correct auth token, but an invalid social ID\r\ncurl -s -H 'Content-Type: application/mp_scoring.api.v1+json' -H 'X-Token: abcdefuvwxyz' http://localhost:8090/api/customers -X GET -d \"{\\\"ssn\\\": \\\"000-00-0000\\\"}\"\r\n- a 401 access: an incorrect auth token, even though the intruders guessed a valid social ID\r\ncurl -s -H 'Content-Type: application/mp_scoring.api.v1+json' -H 'X-Token: badauthtoken' http://localhost:8090/api/customers -X GET -d \"{\\\"ssn\\\": \\\"123-45-6789\\\"}\"\r\n- a 401 access: an incorrect auth token, and an invalid social ID\r\ncurl -s -H 'Content-Type: application/mp_scoring.api.v1+json' -H 'X-Token: badauthtoken' http://localhost:8090/api/customers -X GET -d \"{\\\"ssn\\\": \\\"000-00-0000\\\"}\"\r\n\r\nresults when I DO NOT return an error from KeyAuth\r\n$ sh unauth_access.sh\r\n{\"agentId\":12345678,\"customerId\":87654321,\"fipsCode\":\"GA, 13, 121\",\"name\":\"John\",\"ssn\":\"123-45-6789\",\"surname\":\"Lee\"}\r\n{\"code\":404,\"message\":\"Resource not found\"}\r\n{\"code\":401,\"message\":\"unauthenticated for invalid credentials\"}\r\n{\"code\":401,\"message\":\"unauthenticated for invalid credentials\"}\r\n\r\nresults when I DO return an error from KeyAuth\r\n$ sh unauth_access.sh\r\n{\"agentId\":12345678,\"customerId\":87654321,\"fipsCode\":\"GA, 13, 121\",\"name\":\"John\",\"ssn\":\"123-45-6789\",\"surname\":\"Lee\"}\r\n{\"code\":404,\"message\":\"Resource not found\"}\r\n.... server does not respond\r\n\r\n## Swagger specification\r\n2.0\r\n\r\n## Steps to reproduce\r\n\r\n```\r\nKeyAuth function that causes the server not to call handler\r\n// Applies when the \"x-token\" header is set\r\n\tapi.KeyAuth = func(token string) (interface{}, error) {\r\n\t\tif token == \"abcdefuvwxyz\" {\r\n\t\t\tappauth := new(app.ApplicationAuth)\r\n\t\t\tappauth.Token(token)\r\n\t\t\tbAuthenticated = true\r\n\t\t\treturn appauth, nil\r\n\t\t}\r\n\t\tapi.Logger(\"Access attempt with incorrect api key auth: %s\", token)\r\n\t\tbAuthenticated = false\r\n\t\treturn nil, errors.New(100, \"incorrect api key auth\")\r\n\t}\r\n\r\nKeyAuth function that does call the handler\r\n// Applies when the \"x-token\" header is set\r\n\tapi.KeyAuth = func(token string) (interface{}, error) {\r\n\t\tif token == \"abcdefuvwxyz\" {\r\n\t\t\tappauth := new(app.ApplicationAuth)\r\n\t\t\tappauth.Token(token)\r\n\t\t\tbAuthenticated = true\r\n\t\t\treturn appauth, nil\r\n\t\t}\r\n\t\tapi.Logger(\"Access attempt with incorrect api key auth: %s\", token)\r\n\t\tbAuthenticated = false\r\n\t\treturn nil, nil\r\n\t}\r\n\r\nAnd here is the function handler for this API url:\r\n\t// GET /api/customers/   message body contains SSN social identifier\r\n\tapi.CustomersGetIDHandler = customers.GetIDHandlerFunc(func(params customers.GetIDParams, principal interface{}) middleware.Responder {\r\n\t\tapi.Logger(\"Lookup customer\")\r\n\t\tcustomer, err := getCustomer(api, *params.Info.Ssn)\r\n\t\tif err != nil {\r\n\t\t\tif bAuthenticated {\r\n\t\t\t\treturn customers.NewGetCustomersNotFound().WithPayload(&models.Error{Code: 404, Message: swag.String(err.Error())})\r\n\t\t\t}\r\n\t\t\treturn customers.NewGetCustomersUnauthorized().WithPayload(&models.Error{Code: 401, Message: swag.String(err.Error())})\r\n\t\t}\r\n\t\treturn customers.NewGetCustomersOK().WithPayload(customer)\r\n\t})\r\n``` ```yaml\r\n---\r\n\r\nswagger: '2.0'\r\ninfo:\r\n  title: keyauth debug\r\n  version: 0.3.0\r\nschemes:\r\n  - http\r\nbasePath: /api\r\nconsumes:\r\n  - application/keyauth.api.v1+json\r\nproduces:\r\n  - application/keyauth.api.v1+json\r\nsecurityDefinitions:\r\n  key:\r\n    type: apiKey\r\n    in: header\r\n    name: x-token\r\nsecurity:\r\n  - key: []\r\npaths:\r\n  /customers:\r\n    post:\r\n      tags: [\"customers\"]\r\n      operationId: create\r\n      summary: Create a new customer to track\r\n      parameters:\r\n        - name: info\r\n          in: body\r\n          schema:\r\n            $ref: \"#/definitions/customer\"\r\n      responses:\r\n        '201':\r\n          description: created\r\n          schema:\r\n            $ref: \"#/definitions/customer\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\n    get:\r\n      tags: [\"customers\"]\r\n      operationId: getId\r\n      summary: Get a customerId given an SSN\r\n      parameters:\r\n        - name: info\r\n          in: body\r\n          schema:\r\n            $ref: \"#/definitions/social_id\"\r\n      responses:\r\n        '200':\r\n          description: OK\r\n          schema:\r\n            $ref: \"#/definitions/customer\"\r\n        '401':\r\n          description: unauthorized\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\n        '404':\r\n          description: resource not found\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\n        default:\r\n          description: error\r\n          schema:\r\n            $ref: \"#/definitions/error\"\r\ndefinitions:\r\n  customer:\r\n    type: object\r\n    required:\r\n      - customerId\r\n      - name\r\n      - surname\r\n      - ssn\r\n      - fipsCode\r\n    properties:\r\n      customerId:\r\n        type: integer\r\n        format: int64\r\n        readOnly: true\r\n        description: internal identifier of a customer\r\n      name:\r\n        type: string\r\n        format: string\r\n        minLength: 1\r\n      surname:\r\n        type: string\r\n        format: string\r\n        minLength: 1\r\n      agentId:\r\n        type: integer\r\n        format: int32\r\n        description: agent associated with this customer\r\n      ssn:\r\n        type: string\r\n        format: string\r\n        minLength: 11\r\n        description: Lookup identifier to find a customer in the system\r\n      fipsCode:\r\n        type: string\r\n        format: string\r\n        minLength: 1\r\n  social_id:\r\n    type: object\r\n    required:\r\n      - ssn\r\n    properties:\r\n      ssn:\r\n        type: string\r\n        format: string\r\n        minLength: 11\r\n  error:\r\n    type: object\r\n    required:\r\n       - message\r\n    properties:\r\n      code:\r\n        type: integer\r\n        format: int64\r\n      message:\r\n        type: string\r\n      fields:\r\n        type: string\r\n\r\n...\r\n```\r\n With the above spec and the following KeyAuth handler the issue is reproducable:\n\n```\nvar bAuthenticated bool\n\n// This file is safe to edit. Once it exists it will not be overwritten\ntype MyAuthInfo struct {\n    token string\n}\n\nin func configureAPI(...)\n...\n    // Applies when the \"x-token\" header is set\n    api.KeyAuth = func(token string) (interface{}, error) {\n        api.Logger(\"KeyAuth handler called\")\n        if token == \"abcdefuvwxyz\" {\n            authInfo := new(MyAuthInfo)\n            authInfo.token = token\n            bAuthenticated = true\n            return authInfo, nil\n        }\n        api.Logger(\"Access attempt with incorrect api key auth: %s\", token)\n        bAuthenticated = false\n        return nil, errors.New(100, \"incorrect api key auth\")\n        // return nil, errors.NotImplemented(\"api key auth (key) x-token from header param [x-token] has not yet been implemented\")\n    }\n```\n\n```\nTheodore@Theo-laptop-4 MINGW64 ~/dev/Golang/src/github.com/Ravenwater/keyauth_debug\n$ curl -i -H 'Content-Type: application/keyauth.api.v1+json' -H 'X-Token: abcdefuvwxyz' http://localhost:41102/api/customers\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    57  100    57    0     0    260      0 --:--:-- --:--:-- --:--:--   280HTTP/1.1 501 Not Implemented\nContent-Type: application/keyauth.api.v1+json\nDate: Fri, 18 Nov 2016 17:46:42 GMT\nContent-Length: 57\n\n\"operation customers.GetID has not yet been implemented\"\n\n\nTheodore@Theo-laptop-4 MINGW64 ~/dev/Golang/src/github.com/Ravenwater/keyauth_debug\n$ curl -i -H 'Content-Type: application/keyauth.api.v1+json' -H 'X-Token: badauthtoken' http://localhost:41102/api/customers\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:01:06 --:--:--     0\nCTRL-C\n```\n Thank you for the explanation: I would not have been able to get to that understanding.  ## Problem statement\r\n\r\nHi,\r\n\r\nIt seems when I generate a date attribute of a model, it always use strfmt.DateTime as type, is it possilbe to make it as a pointer ? such as *strfmt.DateTime\r\n\r\nThanks Cool thanks!\n  ## Problem statement\r\n\r\nThis is the first time around building an API, and with go-swagger I am often uncertain how certain patterns are supposed to work. I am looking for the designer's insight in what the middleware injection for Authentication and Content Negotiation are supposed to look like. \r\n\r\nAuthentication is clearly a pattern that most APIs use, but I haven't found an example of it in the examples or tutorial directory. \r\n\r\nSimilarly, I was thinking that it would be nice to return json or html so that you can use a browser to test the RESTfulness of an API, in which case I need to implement content negotiation. Again, looking for the patterns that the generator authors had in mind to implement this with go-swagger.\r\n\r\n## Swagger specification\r\n2.0\r\n\r\n  Just spike for the `enum`\r\n\r\nThe usage like `swagger: strfmt`, and will be two way to collection the enum values:\r\n\r\n* if const be typed, we will use the value of const which defined by the target type\r\n* if `iota` const setted, we will use the typename of const with prefix (snake upper case) equals target type\r\n\r\n```go\r\n// swagger:enum\r\ntype Level string\r\n\r\nconst (\r\n\tLEVEL_1 Level = \"ONE\"\r\n\tLEVEL_2 Level = \"TWO\"\r\n\tLEVEL_3 Level = \"THREE\"\r\n)\r\n\r\n// swagger:enum\r\ntype LevelInt int\r\n\r\nconst (\r\n        // LEVEL_INT will be type and ONE will be the value\r\n\tLEVEL_INT__ONE = iota + 1\r\n\tLEVEL_INT__TWO\r\n)\r\n\r\n// swagger:model\r\ntype Model struct {\r\n\tlevel Level\r\n\tlevelInt LevelInt;\r\n}\r\n```\r\n\r\nwill be\r\n\r\n```yaml\r\ndefinitions:\r\n  Model:\r\n     type: \"object\"\r\n     properties:\r\n        level: \r\n         type: \"string\"\r\n         enum: \r\n           - \"ONE\"\r\n           - \"TWO\"\r\n           - \"THREE\"\r\n       levelInt: \r\n         type: \"string\"\r\n         enum: \r\n           - \"ONE\"\r\n           - \"TWO\"\r\n``` # [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=h1) Report\n> Merging [#744](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=desc) into [master](https://codecov.io/gh/go-swagger/go-swagger/commit/47b3e5748d06ca1ee42d6c7a14f4a6c2982ccf36?src=pr&el=desc) will **decrease** coverage by `0.78%`.\n> The diff coverage is `0%`.\n\n[![Impacted file tree graph](https://codecov.io/gh/go-swagger/go-swagger/pull/744/graphs/tree.svg?token=aQS1DepR8C&src=pr&width=650&height=150)](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=tree)\n\n```diff\n@@            Coverage Diff             @@\n##           master     #744      +/-   ##\n==========================================\n- Coverage   72.42%   71.63%   -0.79%     \n==========================================\n  Files          21       22       +1     \n  Lines        5897     5962      +65     \n==========================================\n  Hits         4271     4271              \n- Misses       1177     1241      +64     \n- Partials      449      450       +1\n```\n\n\n| [Impacted Files](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=tree) | Coverage \u0394 | |\n|---|---|---|\n| [scan/scanner.go](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=tree#diff-c2Nhbi9zY2FubmVyLmdv) | `75% <\u00f8> (\u00f8)` | :arrow_up: |\n| [scan/responses.go](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=tree#diff-c2Nhbi9yZXNwb25zZXMuZ28=) | `79.74% <0%> (-0.7%)` | :arrow_down: |\n| [scan/enum.go](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=tree#diff-c2Nhbi9lbnVtLmdv) | `0% <0%> (\u00f8)` | |\n| [scan/parameters.go](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=tree#diff-c2Nhbi9wYXJhbWV0ZXJzLmdv) | `76.31% <0%> (-1.17%)` | :arrow_down: |\n| [scan/schema.go](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=tree#diff-c2Nhbi9zY2hlbWEuZ28=) | `71.31% <0%> (-1.61%)` | :arrow_down: |\n\n------\n\n[Continue to review full report at Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=continue).\n> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n> `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n> Powered by [Codecov](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=footer). Last update [47b3e57...214dc01](https://codecov.io/gh/go-swagger/go-swagger/pull/744?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n @morlay are you still working on this? If not, I don't mind taking it over, to finish of this PR. As it's a feature needed by multiple people. @GlenDC Cool. \r\nI just use this quick version for my project as MVP.\r\nI think @casualjim already complete some work, could you join Slack to catch up with them?\r\n\r\nThanks for taking over this. I am really busy with other work recently and bad network in China (I cannot login Slack agent \ud83d\ude1e )  ## Problem statement\r\n\r\nGenerating go-swagger server with objects containing only allOf list produces unexpected models.\r\n\r\nVersion: dev (`go get -u github.com/go-swagger/go-swagger/cmd/swagger` today, Nov 15th, 2016).\r\nHas been happening since I started to use go-swagger in Sep/Oct.\r\n\r\n## Swagger specification\r\n\r\n\"Swagger allows combining and extending model definitions using the allOf property of JSON Schema, in effect offering model composition.\"\r\n\r\n## Steps to reproduce\r\n\r\nCreate a $GOPATH/src/.../swagger.yaml -file with the following contents:\r\n```yaml\r\nswagger: \"2.0\"\r\n\r\ninfo:\r\n  title: allOf\r\n  description: allOf bug example\r\n  version: 0.0.1\r\n\r\nschemes:\r\n  - http\r\n\r\nconsumes:\r\n  - application/json\r\nproduces:\r\n  - application/json\r\n\r\ndefinitions:\r\n\r\n  Lol:\r\n    type: object\r\n    required:\r\n      - xxx\r\n      - yyy\r\n      - zzz\r\n    properties:\r\n      xxx:\r\n        type: string\r\n      yyy:\r\n        type: integer\r\n      zzz:\r\n        type: boolean\r\n\r\n  Foo:\r\n    type: object\r\n    properties:\r\n      fauna:\r\n        $ref: \"#/definitions/Lol\"\r\n      flora:\r\n        $ref: \"#/definitions/Lol\"\r\n      fungi:\r\n        $ref: \"#/definitions/Lol\"\r\n\r\n  Bar:\r\n    type: object\r\n    allOf:\r\n      - $ref: \"#/definitions/Foo\"\r\n\r\n  Baz:\r\n    type: object\r\n    properties:\r\n      squirrel:\r\n        type: string\r\n      owl:\r\n        type: string\r\n      fox:\r\n        type: string\r\n\r\n  Awol:\r\n    type: object\r\n    allOf:\r\n      - $ref: \"#/definitions/Bar\"\r\n      - $ref: \"#/definitions/Baz\"\r\n\r\npaths:\r\n\r\n  /awol:\r\n    put:\r\n      operationId: setAwol\r\n      summary: Set Awol\r\n      parameters:\r\n        - name: awol\r\n          in: body\r\n          required: true\r\n          description: Awol\r\n          schema:\r\n            $ref: \"#/definitions/Awol\"\r\n      responses:\r\n        201:\r\n          description: Awol set\r\n          schema:\r\n            $ref: \"#/definitions/Awol\"\r\n```\r\n$ generate server -f swagger.yaml\r\n\r\nYou'll find out that e.g. type Bar struct in models/bar.go is empty.\r\n\r\nYou can work around this by changing the definition of Bar as follows:\r\n```\r\n  Bar:\r\n    type: object\r\n    allOf:\r\n      - $ref: \"#/definitions/Foo\"\r\n      - properties:\r\n          wut:\r\n            type: boolean\r\n            default: true\r\n```\r\n In my case, I could also work around it like this:\n\n```\nBar:\n  allOf:\n    - $ref: \"#/definitions/Foo\"\n    - type: object\n```\n\n@casualjim This is the thing that we talked about on Slack last week that I hadn't had time to log yet.\n  ## Problem statement\r\n\r\nThe `Responses:` of a `swagger:route` should have support to add a description (which is required by the Swagger specification).\r\n\r\nHaving a comment on the response type adds a description in the `definitions` but not on the `responses`.\r\n\r\n## Swagger specification\r\n\r\nSee http://swagger.io/specification/#responseObject\r\n\r\n## Steps to reproduce\r\n\r\n1. Declare a `swagger:route` with `Responses:`\r\n2. No description can be set (just a named response)\r\n3. The `description` property is missing on the `responses` object in the generated JSON I was looking at adding this (which would fit right here: https://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L603) but I changed something that made my responses outputs looks like:\r\n\r\n```\r\n          \"200\": {\r\n            \"$ref\": \"#/responses/pet\"\r\n          },\r\n          \"500\": {\r\n            \"$ref\": \"#/responses/pet\"\r\n          }\r\n```\r\n\r\nand I believe they were previously outputting the schema as a reference - which I mocked up below: \r\n\r\n```\r\n          \"200\": {\r\n            \"schema\": {\r\n              \"$ref\": \"#/responses/pet\"\r\n            }\r\n          },\r\n```\r\n\r\nWhatever the change was, description is no longer required by the parser at http://editor.swagger.io/#/ .  In fact, when including a description, I get a warning that the field is ignored. I also wanted to point out that the reference is url encoded, so spaces turn into `%20`.  I was thinking about splitting the value portion of the line based on the first space, so any text after the first space would become the description.\r\n\r\nI am not sure what I changed in my comment or build command that stopped outputting schema, but I don't think I understand the problem well enough to code a solution. I see what the change was - I had a definition instead of a response and just missed that that changed.\r\n\r\nI took a stab at a fix in the PR linked above. Hi, thx. for the replies and your work!\r\n\r\nI still can't get it working though. Do you have an example how and where the description should go? Before closed, the documentation at https://github.com/go-swagger/go-swagger/blob/master/docs/generate/spec/route.md#example should probably be updated to reflect this new feature Thx, I got it working so the description is added to the responses of the operation when using `body:myNamedResponse`.\r\n\r\nI wonder though, why I still need to add a wrapper struct for the response and cannot just use a `swagger:model` annotated struct. It's nothing serious but I could save a struct per response and the `responses` in the generated Swagger JSON would get smaller.\r\n\r\nExample:\r\n\r\n    type authenticateResponse struct {\r\n    \t// ID of the authenticated user\r\n    \t// Required: true\r\n    \tID bson.ObjectId `json:\"id\"`\r\n    \t// Authentication token\r\n    \t// Required: true\r\n    \tToken string `json:\"token\"`\r\n    }\r\n\r\n    // swagger:response authenticateResponse\r\n    type authenticateResponseWrapper struct {\r\n    \t// in: body\r\n    \tBody authenticateResponse\r\n    }\r\n\r\n    // swagger:route POST /login authentication login\r\n    //\r\n    // Login user\r\n    //\r\n    // Logs a user in by creating an authentication token `token` ...\r\n    //\r\n    //     Consumes:\r\n    //     - application/x-www-form-urlencoded\r\n    //\r\n    //     Responses:\r\n    //       200: body:authenticateResponse On login success\r\n    //       401: body:errorMessage Invalid credentials\r\n    func authenticateHandler(w http.ResponseWriter, r *http.Request) {\r\n      // ...\r\n    } So the question is: is the `body:` prefix needed to split for a description or could you generally do that and thus allow responses with a ref to a response and a description in an operation? You can use a model directly by defining your example as follows:\r\n```go\r\n// swagger:model authenticateResponse\r\ntype authenticateResponse struct {\r\n\t// ID of the authenticated user\r\n\t// Required: true\r\n\tID bson.ObjectId `json:\"id\"`\r\n\t// Authentication token\r\n\t// Required: true\r\n\tToken string `json:\"token\"`\r\n}\r\n```\r\n\r\nYou might need to generate the spec using the include models flag: `--scan-models`. This way you can prevent having to use a wrapper struct.\r\n\r\nLet me know if this works and if you have any further questions on this topic. Thanks @GlenDC, I missed the `--scan-models` option when generating the spec. Now it works as I'd expect.  When I'm trying to use date-time format in my swagger spec for a response like this:\r\n```json\r\n properties:\r\n   testTimeField:\r\n     type: string\r\n     format: date-time\r\n```\r\nI'm getting a property of type `strfmt.DateTime` in my model\r\n```golang\r\nTestTimeField strfmt.DateTime `json:\"testTimeField,omitempty\"`\r\n```\r\nThe problem that, even though this property is optional and contains \"omitempty\", the value of this property is always present in the response even if the property is not set: \r\n```json\r\n  \"testTimeField\": \"0001-01-01T00:00:00.000Z\"\r\n``` Thank you for the help!\n  ## Problem\r\nswagger generate client wont build a client on a validated swagger.json\r\n\r\n## Swagger specification\r\nhttps://esi.tech.ccp.is/latest/swagger.json\r\n\r\n## Steps to reproduce\r\nswagger validate https://esi.tech.ccp.is/latest/swagger.json\r\nThe swagger spec at \"https://esi.tech.ccp.is/latest/swagger.json\" is valid against swagger specification 2.0\r\n\r\nswagger generate client -f https://esi.tech.ccp.is/latest/swagger.json -A esi\r\n2016/11/11 13:04:03 building a plan for generation\r\n2016/11/11 13:04:04 planning definitions\r\n2016/11/11 13:04:04 planning operations\r\nobject has no key \"GetCharactersCharacterIDMailOKBodyItems0\" seems like its some sort of formatting error\n\n## Steps to reproduce\n\nloaded https://esi.tech.ccp.is/latest/swagger.json?datasource=tranquility into http://editor.swagger.io/#/\ngenerated a client swagger.json\nswagger generate client -f ./swagger.json -A esi\nexecuted sucessfully\n the swagger.json that is generated with the client sdk of http://editor.swagger.io/#/ is actually a different one than the original.\ni think it only puts client stuff in there.\nmaybe it helps if you compare the original from https://esi.tech.ccp.is/latest/swagger.json?datasource=tranquility and the one that is generated with the client sdk under http://editor.swagger.io/#/\n  ## Problem statement\r\n\r\nI would like the generator to use (decimal.Decimal)[https://github.com/shopspring/decimal] type to represent fields with type: number, format: decimal. The decimal format is not a part of the OpenAPI specs (as far as I can tell) so I can't expect this to be available in go-swagger. How ever, float64 is not acceptable for handling money. \r\n\r\nIs there a way to plug-in / register custom format/types to the generator? I'm aware of strfmt but it doesn't seem to be possible to define the string formats for the generator (just when you're generating specs from code)\r\n\r\nI would also like to configure the generator to use int instead of int64 for integers etc. I understand this is not necessarily ideal for everyone which is why I'd like it to be configurable. \r\n\r\n## Swagger specification\r\n\r\n    Money:\r\n      type: object\r\n      properties:\r\n        amount:\r\n          type: number\r\n          format: decimal # non standard\r\n          description: Amount is the monetary value\r\n        currency:\r\n          type: string\r\n          format: currency\r\n          description: 3 char currency code  # https://en.wikipedia.org/wiki/ISO_4217\r\n\r\n----\r\n\r\nAny way to do this now, any plans to support this in the future or would you accept this feature (configurable custom formats/types in the generator) if I find a solution? @casualjim this could be provided by supporting it as an x-format-type no? Adding it to strfmt and plugging it into the other custom x-format-types we provide already? Is that what you had in mind as well?  I am trying to vendor an API generated by go-swagger to be included in a Docker container. \r\n\r\n> govendor list \r\n> .....\r\n\r\nshows many packages, what is the minimum set? \r\n\r\n\r\n I use [glide](https://github.com/Masterminds/glide) and a simple `glide init` followed by `glide install` after generating the code worked perfectly. The dependencies were correctly identified and downloaded no problem. I used glide but got the following error:\r\n\r\n```\r\n[ERROR]\tError scanning github.com/go-swagger/go-swagger/examples/authentication/client/customers: open /Users/lex/.glide/cache/src/https-github.com-go-swagger-go-swagger/examples/authentication/client/customers: no such file or directory\r\n[ERROR]\tThis error means the referenced package was not found.\r\n[ERROR]\tMissing file or directory errors usually occur when multiple packages\r\n[ERROR]\tshare a common dependency and the first reference encountered by the scanner\r\n[ERROR]\tsets the version to one that does not contain a subpackage needed required\r\n[ERROR]\tby another package that uses the shared dependency. Try setting a\r\n[ERROR]\tversion in your glide.yaml that works for all packages that share this\r\n[ERROR]\tdependency.\r\n```\r\n\r\nWhat would be the exact configuration line to use in the glide.yaml file (or other ideas) to fix this?\r\n\r\nThanks, in advance.\r\n @casualjim Thank you for your response.  \r\n\r\nAs it turns out, the way go references the vendor directory is not compatible with adding a project path to the GOPATH.\r\n\r\nI'd get the [draconian \"unexpected directory layout\" error](https://github.com/golang/go/issues/17597) when runnning `go install`\r\n\r\n```\r\nunexpected directory layout:\r\n\timport path: github.com/pkg/errors\r\n\troot: /Users/lex/go/src\r\n\tdir: /Users/lex/go/src/hi-project/vendor/github.com/pkg/errors\r\n\texpand root: /Users/lex/go/src\r\n\texpand dir: /Users/lex/go/src/hi-project/vendor/github.com/pkg/errors\r\n\tseparator: /\r\n```\r\nFWIW - I created an alias that is working well for me:\r\n\r\n`alias mvglide='mkdir -p vendors && mv vendor/ vendors/src/ && export GOPATH=$(pwd):$(pwd)/vendors;echo \"vendor packages have been moved to $(pwd)/vendors and your GOPATH: $GOPATH\"'`\r\n\r\nI simply run the following alias (`glide-install`), rather than `glide install` \r\n\r\n`alias glide-install='rm -rf {vendor,vendors};glide install && mvglide'`\r\n I can see where you might get that impression.\r\n\r\nI did recently start using Glide.\r\n\r\nIf the good folks that implemented Go's current vendoring implementation understood that the GOPATH should support more than one directory in the path, where each path is colon separated, much like the system PATH, there would be no need for my alias hacks. \r\n\r\nI used to use full github/bitbucket references when referring to imports in my project like this:\r\n\r\n `import \"github.com/myrepo/myproject/mysymbol\"`\r\n\r\nBut once I started applying the techniques used in this article... http://manuel.kiessling.net/2012/09/28/applying-the-clean-architecture-to-go-applications/\r\n\r\n...I came to appreciate that less is exponentially more:\r\n\r\n`import \"mysymbol\"`\r\n\r\nIf a directory has a src subdirectory, it should be a candidate for a GOPATH entry.  (Or at least that was the case before the new vendoring implementation.)\r\n\r\nAfter playing with glide and vendoring I found that is not the case.\r\n\r\nThank you for your follow up and for sharing your insights.  ## Problem statement\r\n\r\nWhen validating spec that includes schema from external file, it fails with:\r\n\r\n```\r\n$ swagger version\r\nversion: 0.7.4\r\ncommit: 6b8226461ff1d53e4b56ea0ea80d126aa3e9d7b5\r\n\r\n$ swagger validate spec.yaml\r\nThe swagger spec at \"spec.yaml\" is invalid against swagger specification 2.0. see errors :\r\n- invalid character 'y' in literal true (expecting 'r')\r\n```\r\n\r\nSwagger tools reports that the spec is valid:\r\n\r\n```\r\n$ swagger-tools --version\r\n0.10.1\r\n\r\n$ swagger-tools validate -v spec.yaml\r\n\r\nValidation Details:\r\n\r\n  Swagger Version: 2.0\r\n  Swagger file: spec.yaml\r\n\r\nSwagger document is valid\r\n```\r\n\r\n## Swagger specification\r\n\r\nhttps://github.com/jbub/swaggerrepro/blob/master/spec.yaml\r\n\r\n## Steps to reproduce\r\n\r\n```\r\ngit clone https://github.com/jbub/swaggerrepro.git\r\nswagger validate spec.yaml\r\n``` Has anyone figured out yet if there's a specific workaround for this in go-swagger, or is all external file reference functionality broken? @casualjim I'm finding that local references work (swagger 0.7.4, and swagger 0.8.0), but only if the references are JSON formatted files:\r\n\r\nswagger.yaml:\r\n```\r\n      'conditions':\r\n        type: array\r\n        items:\r\n          $ref: './swagger-test.yaml#definitions/Condition'\r\n```\r\nswagger-test.yaml\r\nWorks:\r\n```\r\n{\r\n  \"definitions\": {\r\n    \"Condition\": {\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"name\": {\r\n          \"type\": \"string\"\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nFails:\r\n```\r\ndefinitions:\r\n  Condition:\r\n    type: object\r\n    properties:\r\n      name:\r\n        type: string\r\n```\r\n\r\nIt would seem that a JSON parser is actually trying to resolve the references, as opposed to the YAML parser.\r\n\r\nAny ideas? @casualjim Before I go deeper here, it seems as though your examples suggest that go-swagger already is doing the right thing (the last link) - so why am I see the behavior when I run:\r\n\r\n`swagger generate server -f swagger.yaml` I've got some updates:\r\n\r\nUsing code from master, I'm able to achieve the following:\r\n\r\n```\r\n../go-swagger validate swagger-local.yaml\r\nThe swagger spec at \"swagger-local.yaml\" is valid against swagger specification 2.0\r\n```\r\nBut when I try to generate the server directly from this yaml file, I get a message like the following:\r\n\r\n```\r\n../go-swagger generate server -f swagger-local.yaml\r\n2017/04/13 09:51:36 building a plan for generation\r\n2017/04/13 09:51:36 planning definitions\r\nobject has no key \"LatLng\"\r\n```\r\n\r\nHere's an excerpt from swagger-local.yaml, demonstrating a reference\r\n\r\n```\r\n    properties:\r\n      ...\r\n      position:\r\n        $ref: ./base.yaml#/definitions/LatLng\r\n\r\n```\r\n\r\nAnd here's an excerpt from base.yaml, which is in the same directory:\r\n\r\n```\r\ndefinitions:\r\n  LatLng:\r\n    type: object\r\n    properties:\r\n      lat:\r\n        type: number\r\n        format: double\r\n      lng:\r\n        type: number\r\n        format: double\r\n    required: ['lat', 'lng']\r\n```\r\n\r\nIf i try flattening first, I get a different error, which comes from a reference from within the base.yaml file:\r\n\r\n```\r\n../go-swagger flatten swagger-local.yaml > swagger-local.json\r\n2017/04/13 09:51:19 schema analysis [#/definitions/testLocation/properties/conditions]: object has no key \"TestCondition\"\r\nmake: *** [swagger-local.json] Error 1\r\n```\r\n\r\n\r\n```\r\n\r\nTestCondition:\r\n...\r\n\r\nTestLocation:\r\n    type: object\r\n    properties:\r\n      position:\r\n        $ref: '#/definitions/LatLng'\r\n      extent:\r\n        $ref: '#/definitions/LatLngLine'\r\n      info:\r\n        $ref: '#/definitions/LocationMetadata'\r\n      length:\r\n        type: number\r\n        format: double\r\n      conditions:\r\n        type: array\r\n        items:\r\n          $ref: '#/definitions/TestCondition'\r\n    required: ['info']\r\n\r\n...\r\n```\r\n\r\nSo basically, each method has a problem.\r\n\r\nIn general, what's the right way to set these references up? Furthermore, my end goal is really to share types between different apis, so is there a best practice for that?\r\n\r\nThanks! Okay here's a version that suffers from the same issues:\r\n\r\nswagger-template.yaml:\r\n\r\n```\r\nswagger: '2.0'\r\ninfo:\r\n  title: Test\r\n  version: \"1\"\r\nhost: test.com\r\nbasePath: /\r\nproduces:\r\n  - application/json\r\nschemes:\r\n  - http\r\npaths:\r\n  /a/b:\r\n    get:\r\n      operationId: get_ab\r\n      parameters:\r\n        - name: pilot_area_only\r\n          in: query\r\n          type: boolean\r\n          default: false\r\n      responses:\r\n        200:\r\n          description: Test\r\n          headers:\r\n            Access-Control-Allow-Origin:\r\n              type: string\r\n              default: '*'\r\n          schema:\r\n            type: object\r\n            properties:\r\n              results:\r\n                $ref: '#/definitions/LocalDefs'\r\n        default:\r\n          description: Unexpected error\r\n          schema:\r\n            $ref: '#/definitions/Error'\r\ndefinitions:\r\n  LocalDef:\r\n    type: object\r\n    properties:\r\n      position:\r\n        $ref: './base.yaml#/definitions/LatLng'\r\n      extent:\r\n        $ref: './base.yaml#/definitions/LatLngLine'\r\n  LocalDefs:\r\n    type: array\r\n    items:\r\n      $ref: '#/definitions/LocalDef'\r\n  Error:\r\n    type: object\r\n    properties:\r\n      code:\r\n        type: integer\r\n        format: int32\r\n      message:\r\n        type: string\r\n```\r\n\r\nbase.yaml:\r\n```\r\ndefinitions:\r\n  LatLng:\r\n    type: object\r\n    properties:\r\n      lat:\r\n        type: number\r\n        format: double\r\n      lng:\r\n        type: number\r\n        format: double\r\n    required: ['lat', 'lng']\r\n  LatLngLine:\r\n    type: array\r\n    items:\r\n      $ref: '#/definitions/LatLng'\r\n```\r\nAs is, if I try to generate directly from swagger-template.yaml, I get the following error:\r\n\r\n```\r\n../go-swagger generate server -f swagger-local.yaml\r\n2017/04/13 11:48:45 building a plan for generation\r\n2017/04/13 11:48:45 planning definitions\r\nobject has no key \"LatLng\"\r\n```\r\n\r\nIf instead I flatten first:\r\n```\r\n../go-swagger flatten swagger-local.yaml > swagg-flattened.json\r\ndanieljy:parking-availability danielyehuda$ ../go-swagger generate server -f swagg-flattened.json\r\nThe swagger spec at \"swagg-flattened.json\" is invalid against swagger specification 2.0. see errors :\r\n- object has no key \"LatLng\"\r\n```\r\n\r\nIf i change base.yaml to look like this:\r\n\r\n```\r\ndefinitions:\r\n  LatLng:\r\n    type: object\r\n    properties:\r\n      lat:\r\n        type: number\r\n        format: double\r\n      lng:\r\n        type: number\r\n        format: double\r\n    required: ['lat', 'lng']\r\n  LatLngLine:\r\n    type: array\r\n    items:\r\n      $ref: '#./base.yaml/definitions/LatLng'\r\n```\r\n\r\nI am able to fully generate a server, though it requires that I manually generate the models from base.yaml (they don't get generated as part of the `generate server` command on the main file) and then I have the problem that the generated operations files don't include the models.\r\n\r\nIf I try flattening first, it just hangs.\r\n\r\n\r\nHope this helps!\r\n\r\n I came upon: https://github.com/go-swagger/go-swagger/issues/402, which seems to be the same issue I'm seeing when I change my base.yaml to the form directly above.\r\n\r\nIt seems the issue is closed, but it's unclear to me where i should inserting the `x-go-package` and `x-go-name` to make the generated code properly import and reference the models.\r\n\r\nAny ideas? @casualjim What about my most recent comment - seems I can actually get everything working without flattening, except for getting the generated code to reference separately generated models.\r\n\r\nI'd actually prefer to have a single package with the generated shared models rather than flattening (which I believe would cause me to generate differently namespaced models depending on where I reference them).\r\n\r\nIn other words, is there a proper way of setting `x-go` params somewhere so that my generated code properly imports external models?  ## Problem statement\r\n\r\nHi ! I come back again since a long vocation! \r\n\r\nI have a simple question, how could we set cookies when I return the request ?\r\n\r\nSolution (with corsHandler):\r\n```go\r\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\r\n\tcorsHandler := cors.New(cors.Options{\r\n\t\tDebug: false,\r\n\t\tAllowedHeaders:[]string{\"*\"},\r\n\t\tAllowedOrigins:[]string{\"*\"},\r\n\t\tAllowedMethods:[]string{},\r\n\t\tAllowCredentials: true,\r\n\t\tMaxAge:1000,\r\n\t})\r\n\tcorsHandler.Log = zllogger.Trace\r\n\th := corsHandler.Handler(handler)\r\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\r\n\t\texpiration := time.Now().Add(365 * 24 * time.Hour)\r\n\t\tcookie  :=  http.Cookie{Name: \"yoyo\",Value:\"abcd\",Expires:expiration}\r\n\t\thttp.SetCookie(w, &cookie)\r\n\t\tzllogger.Info.Println(\"set cookies done\")\r\n\t\th.ServeHTTP(w, r)\r\n\t})\r\n}\r\n```\r\n\r\n\r\nThanks\r\nRobin  This could be a great addition. We currently have a need for adding scopes to an `apiKey` authentication mechanism.  ## Problem statement\r\nI read a doc about generating json spec from code (from comments). \r\nI follow the example providing in gitbook.\r\n## Swagger specification\r\n```go\r\n// ServeAPI serves the API for this record store\r\nfunc ServeAPI(host, basePath string, schemes []string) error {\r\n\r\n    // swagger:route GET /pets listPets pets users\r\n    //\r\n    // Lists pets filtered by some parameters.\r\n    //\r\n    // This will show all available pets by default.\r\n    // You can get the pets that are out of stock\r\n    //\r\n    //     Consumes:\r\n    //     - application/json\r\n    //     - application/x-protobuf\r\n    //\r\n    //     Produces:\r\n    //     - application/json\r\n    //     - application/x-protobuf\r\n    //\r\n    //     Schemes: http, https, ws, wss\r\n    //\r\n    //     Security:\r\n    //       api_key:\r\n    //       oauth: read, write\r\n    //\r\n    //     Responses:\r\n    //       default: genericError\r\n    //       200: someResponse\r\n    //       422: validationError\r\n    mountItem(\"GET\", basePath+\"/pets\", nil)\r\n}\r\n```\r\n## Steps to reproduce\r\nGenerate doc from code.\r\n\r\n```bash\r\n swagger generate spec -o ./apidoc.json \r\n```\r\n\r\nPut generated json to swagger editor and got:\r\n`Security definition could not be resolved: api_key`\r\n`Security definition could not be resolved: oauth`\r\n Looks like this feature is missing. `api_key` is used in the example but goswagger will not generate the `securityDefinition` Confirm this. And there is no way to write securityDefinitions in swagger:meta section.  I would like to use httptest for testing my handlers.\n\nGo-swagger provides a Server, but not a configured handler. I use this hack : in a file test.go in the restapi folder, I steal the private configureAPI function. It works.\n\n``` go\npackage restapi\n\nimport (\n    loads \"github.com/go-openapi/loads\"\n    \"github.com/pim/pam/poum/restapi/operations\"\n    \"net/http\"\n)\n\nfunc getAPI() (*operations.ThefactoryAPI, error) {\n    swaggerSpec, err := loads.Analyzed(SwaggerJSON, \"\")\n    if err != nil {\n        return nil, err\n    }\n    api := operations.NewThefactoryAPI(swaggerSpec)\n    return api, nil\n}\n\nfunc GetAPIHandler() (http.Handler, error) {\n    api, err := getAPI()\n    if err != nil {\n        return nil, err\n    }\n    h := configureAPI(api)\n    err = api.Validate()\n    if err != nil {\n        return nil, err\n    }\n    return h, nil\n}\n```\n\nI can use is in test like this\n\n``` go\n    handler, err := restapi.GetAPIHandler()\n    if err != nil {\n        t.Fatal(\"get api handler\", err)\n    }\n    ts := httptest.NewServer(handler)\n    defer ts.Close()\n    res, err := http.Get(ts.URL + \"/api/v1/boxes\")\n```\n\nBut, hacking restapi, wich use my handlers is cyclic, I can't drop my test near my handlers, and this is still a hack.\n\nWhat is the offical way to manage handler testing?\n  ## Problem statement\n\nThis may be a bug.\nI have a service which should return a list of Foo. The list may be empty. However, empty list is converted to null json because (?) generated code contains \"omitempty\" tag. Adding \"required: true\" to the response schema causes the model file in question to become empty - I guess generation fails entirely.\n## Swagger specification\n## Steps to reproduce\n\n```\nresponses:\n        200:\n          description: List of Foo\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/Foo\"\n```\n\nproduces:\n\n```\ntype ListFooOK struct {\n    // In: body\n    Payload []*models.Foo `json:\"body,omitempty\"`\n}\n```\n\nand:\n\n```\nresponses:\n        200:\n          description: List of Foo\n          schema:\n            type: array\n            required: true\n            items:\n              $ref: \"#/definitions/Foo\"\n```\n\nvalidates OK but generates empty file.\n  fixes #707\n @casualjim thanks, just ran that and pushed\n looks like I need to update some tests...\n  In order to respond with the code 201 Created, I want to add Location header according to [RFC 2116](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.30) pointing to the created resource.\n\nIs it possible to do the reverse routing in such case? Something similar to [Gorilla reverse](http://www.gorillatoolkit.org/pkg/reverse#files)?\n Thank you for the suggestion but I feel it should be like this:\n\n``` yaml\n201:\n  description: Pet created\n  headers:\n    Location:\n      description: uri of the new pet\n      type: string\n      format: uri          \n```\n\nI think I've seen in the docs somewhere a notice that it's possible to replace the default router. Maybe I can use Gorila's mux or something instead of denco and get the reverse routing even though it's gonna be slower. Do you have any example of how to do that? \n I think you right, replacing router won't help much and denco as good as any other in this sense.\nWhat I really want to do is to have a some sort of a method, which can return me a URL to a resource providing the request parameters. If a new Pet instance could return an URI, that would be great but I don't think it's feasible because the Pet resource can be returned from a number of paths. So, I think the more or less implementable approach would be related to something in the API struct itself, having similar name as a get handler and accepting all the parameters as the handler (except http.Request) but instead of returning a resource this method should return a URI and err.\nSomething like:\n\nurl, err := api.GetUriToPetByPetID(id)\n\nI think this automatically generated implementation will be way more reliable than the traditional ones based on some string names of the path and a parameters matching (like [here](https://github.com/alehano/reverse) or in .NET's CreatedAtRoute) because: \na) it has the name of the resource in the name of the function\nb) it has exact number and types of the parameters as the reverse routed path needs \nc) the code breaks if you make an API change touching ether of aforementioned elements\n Thank you for implementing it! \n  ## Problem statement\n\nWhen generating simple spec it fails with:\n\n```\nswagger generate server -A Item -f ./swagger.yaml\n\n2016/10/21 11:58:17 building a plan for generation\n2016/10/21 11:58:17 planning definitions\n2016/10/21 11:58:17 planning operations\n2016/10/21 11:58:17 grouping operations into packages\n2016/10/21 11:58:17 planning meta data and facades\n2016/10/21 11:58:17 rendering 0 models\n2016/10/21 11:58:17 rendering 1 operation groups (tags)\n2016/10/21 11:58:17 rendering 2 operations for operations\n2016/10/21 11:58:17 rendering 3 templates for operation Item\n2016/10/21 11:58:17 name field GetItems\n2016/10/21 11:58:17 package field operations\n2016/10/21 11:58:17 creating \"get_items_parameters.go\" in \"restapi/operations\" as parameters\n2016/10/21 11:58:17 name field GetItems\n2016/10/21 11:58:17 package field operations\n2016/10/21 11:58:17 creating \"get_items_responses.go\" in \"restapi/operations\" as responses\nformat \"responses\" failed: get_items_responses.go:29:14: expected type, found 'STRING' `json:\"body,omitempty\"` (and 8 more errors)\n```\n\nProblem seems to be with the `array $ref` schema linked to external schema file (https://github.com/jbub/swaggerepro/blob/master/swagger.yaml#L22-L25).\n## Swagger specification\n\nhttps://github.com/jbub/swaggerepro\n## Steps to reproduce\n1. Clone the repo.\n2. Install go swagger version:\n   \n   ```\n   version: 0.7.3\n   commit: 01d9ee15ff01cdbfdc735d21949a7cc66ab6ab56\n   ```\n3. Run `swagger generate server -A Item -f ./swagger.yaml` from the root of the repo.\n  ## Problem statement\n\nThe `generate` command does not generate valid swagger 2.0 specs.\n## Swagger specification\n\n2.0\n## Steps to reproduce\n\n```\nswagger generate spec\n```\n\nProduces\n\n```\n{\n  \"swagger\": \"2.0\",\n  \"paths\": {},\n  \"definitions\": {}\n}\n```\n\nwhich is missing the \"info\" key.\n @casualjim This is in a directory where there isn't any code.\n My problem is that I get the same behavior when I do the swagger generate command in a go project that does have annotated code. I get this:\n\n```\n{\n  \"swagger\": \"2.0\",\n  \"paths\": {\n    \"/admin/healthchecks\": {\n      \"get\": {\n        \"consumes\": [\n          \"plain/text\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"schemes\": [\n          \"http\"\n        ],\n        \"operationId\": \"getHealthchecks\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/OkResponse\"\n          }\n        }\n      }\n    },\n    \"/admin/versions\": {\n      \"get\": {\n        \"consumes\": [\n          \"plain/text\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"schemes\": [\n          \"http\"\n        ],\n        \"operationId\": \"getVersions\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/OkResponse\"\n          }\n        }\n      }\n    },\n    \"/api-docs\": {\n      \"get\": {\n        \"consumes\": [\n          \"plain/text\"\n        ],\n        \"produces\": [\n          \"application/json\"\n        ],\n        \"schemes\": [\n          \"http\"\n        ],\n        \"operationId\": \"getApiDocsHandler\",\n        \"responses\": {\n          \"200\": {\n            \"$ref\": \"#/responses/OkResponse\"\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {},\n  \"responses\": {\n    \"BadGatewayResponse\": {\n      \"description\": \"BadGatewayResponse occurs when a downstream service is unavailable.\"\n    },\n    \"BadRequestResponse\": {\n      \"description\": \"BadRequestResponse occurs when request params and/or body are invalid.\"\n    },\n    \"ConflictResponse\": {\n      \"description\": \"ConflictResponse occurs when a resource can't be created or updated.\"\n    },\n    \"CreatedResponse\": {\n      \"description\": \"CreatedResponse occurs when a requested resource is created.\"\n    },\n    \"EmptyResponse\": {\n      \"description\": \"EmptyResponse is an empty response body.\"\n    },\n    \"ForbiddenResponse\": {\n      \"description\": \"ForbiddenResponse occurs when a resource can not be accessed due to inadequate permissions.\"\n    },\n    \"GatewayTimeoutResponse\": {\n      \"description\": \"GatewayTimeoutResponse occurs when a downstream service does not respond in time.\"\n    },\n    \"InternalServerErrorResponse\": {\n      \"description\": \"InternalServerErrorResponse occurs when a server has an unrecoverable error.\"\n    },\n    \"NoContentResponse\": {\n      \"description\": \"NoContentResponse occurs when a resource is deleted.\"\n    },\n    \"NotFoundResponse\": {\n      \"description\": \"NotFoundResponse occurs when a service can not locate a requested resource.\"\n    },\n    \"ServiceUnavailableResponse\": {\n      \"description\": \"ServiceUnavailableResponse occurs when a service is unavailable to take requests.\"\n    },\n    \"UnauthorizedResponse\": {\n      \"description\": \"UnauthorizedResponse occurs when a request can not be authenticated.\"\n    },\n    \"UnprocessableEntityResponse\": {\n      \"description\": \"UnprocessableEntityResponse occurs when a request body has 1+ invalid values.\"\n    },\n    \"UnsupportedMediaTypeResponse\": {\n      \"description\": \"UnsupportedMediaTypeResponse occurs when the Content-Type is not supported.\"\n    }\n  }\n}\n```\n Unfortunately the code isn't open source.\nI can come up with some example code that reproduces though.\n  ## Problem statement\r\n\r\nSome alphabet could not be used as field in object definitions properties.\r\n## Steps to reproduce\r\n\r\nI tried to make a object in definition section in swagger.yml, like this\r\n\r\n```yaml\r\ndefinitions: \r\n  key:\r\n    description: key content\r\n    properties:\r\n      kty:\r\n        description: type\r\n        type: string\r\n      e:\r\n        description: key\r\n        type: string\r\n      use:\r\n        description: sign\r\n        type: string\r\n      alg:\r\n        description: algorithm\r\n        type: string\r\n      n:\r\n        description: key\r\n        type: string\r\n```\r\n\r\nBut it reports error when validate the swagger.yml\r\n\r\n```\r\nswagger validate ./swagger/user_service.yml                                                                                                                                                        \r\n2016/10/20 11:54:54 types don't match: expect map key string or int get: bool                                                                                                                      \r\nmake: *** [swagger-validate] Error 1    \r\n```\r\n\r\nAfter I remove the \r\n\r\n```\r\n      n: \r\n        description: key\r\n        type: string\r\n```\r\n\r\nThen there is no error.\r\n\r\nSome alphabets works, some not.\r\n ~~Interpreting the map keys `y` and `n` as boolean values is *not* intended behavior for YAML. This is a bug in the YAML parser that go-swagger uses.~~\r\n\r\n~~For comparison, try using this online YAML parser with map keys like `n` and `y`: http://yaml-online-parser.appspot.com/~~\r\n\r\nEdit: I want to apologize - I think I misinterpreted YAML's behavior in this respect.\r\n\r\nI also want to point out: I think it is misleading to include this bug in the list of \"fixed bugs\" in the release notes for go-swagger version 0.7.4. I came to look for a new release because I encountered the same issue. I saw that note saying that the issue was fixed. Then I was confused when my problem persisted even after updating.  ## Problem statement\n\nI want a different name in json as in go (the web developer keeps requesting name changes, and I don't want to change my go code each time).  I tried to use `x-go-name`, which seems the way to do this.\n\nIn a related note, when I want to get rid of omittempty, I seem to need to add `x-nullable: false` and make it required.  Here I really want to return 0 rather than omit it.  Is there some easier way to do this?\n## Swagger specification\n\n```\n  ViewWindow:\n    title: The view window as two rotational angles, and the field of view (opening)\n    type: object\n    properties:\n      yaw:\n        type: number\n        description: horizontal rotation in radians\n        example: -0.982\n        x-nullable: false\n      pitch:\n        type: number\n        description: vertical rotation in radians\n        example: 1.32\n        x-nullable: false\n      field_of_view:\n        type: number\n        description: field of view in radians (1 / zoom)\n        example: 0.54\n        x-nullable: false\n        x-go-name: Fov\n    required: ['yaw', 'pitch', 'field_of_view']\n```\n\nGo Code:\n\n```\n// ViewWindow The view window as two rotational angles, and the field of view (opening)\n// swagger:model ViewWindow\ntype ViewWindow struct {\n\n    // field of view in radians (1 / zoom)\n    // Required: true\n    FieldOfView float64 `json:\"field_of_view\"`\n\n    // vertical rotation in radians\n    // Required: true\n    Pitch float64 `json:\"pitch\"`\n\n    // horizontal rotation in radians\n    // Required: true\n    Yaw float64 `json:\"yaw\"`\n}\n```\n## Steps to reproduce\n\nRan this with the most recent master (commit `6755c2f`)\n  First commit makes formatting errors fatal. Previously if there was an error here it would print a warning (which was very easy to miss because it's just one line in a lot of text) and not write anything to the file (because `formatted` was the empty string). With this change the unformatted content is written to the file (for debugging purposes) and the generation exits immediately (since the output is invalid).\n\nSecond and third commit change from `/* */` style comments to single line `//` comments, which are the go  convention.\n ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/696?src=pr) is 68.90% (diff: 77.50%)\n\n> Merging [#696](https://codecov.io/gh/go-swagger/go-swagger/pull/696?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will decrease coverage by **0.02%**\n\n``` diff\n@@             master       #696   diff @@\n==========================================\n  Files            19         19          \n  Lines          5215       5223     +8   \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n+ Hits           3595       3599     +4   \n- Misses         1271       1275     +4   \n  Partials        349        349          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [a0ea04f...2a72b26](https://codecov.io/gh/go-swagger/go-swagger/compare/a0ea04f6838c06ab7457dde88174077703604e8d...2a72b26ff688a862f9637ecc41f0fb6c05406fa1?src=pr)\n  of properties when allOf is exists in the struct\n\nexample: \n\n``` go\ntype EmbeddedModel struct {\n    Field string `json:\"field\"`\n}\n\ntype AllOfStruct struct {\n    // swagger:allOf\n    EmbeddedModel\n}\n```\n\nthe result gonna be:\n\n``` json\n\"AllOfStruct\":{\n   \"allOf\":[\n      {\"type\":\"object\",\"properties\":{\"field\":{\"type\":\"string\",\"x-go-name\":\"Field\"}}},\n      {\"type\":\"object\"}\n   ]\n}\n```\n ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/689?src=pr) is 68.83% (diff: 100%)\n\n> Merging [#689](https://codecov.io/gh/go-swagger/go-swagger/pull/689?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will decrease coverage by **0.01%**\n\n``` diff\n@@             master       #689   diff @@\n==========================================\n  Files            19         19          \n  Lines          5215       5215          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n- Hits           3591       3590     -1   \n- Misses         1275       1276     +1   \n  Partials        349        349          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [f56b02a...eb04567](https://codecov.io/gh/go-swagger/go-swagger/compare/f56b02a7f80ed9ec54fee277ec7a57de1e329f79...eb04567e85ab7f173d7958eb4f292eca80022658?src=pr)\n  This change generates constants for string enum model properties. E.g., for this model definition\n\n``` yaml\ndefinitions:\n  Book:\n    type: object\n    properties:\n      genre:\n        type: string\n        enum:\n          - scifi\n          - mystery\n          - horror\n```\n\nyou get:\n\n``` go\nconst (\n    BookGenreScifi   string = \"scifi\"\n    BookGenreMystery string = \"mystery\"\n    BookGenreHorror  string = \"horror\"\n)\n```\n\nsimilar in spirit to https://github.com/go-swagger/go-swagger/pull/660\n ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/686?src=pr) is 68.82% (diff: 100%)\n\n> Merging [#686](https://codecov.io/gh/go-swagger/go-swagger/pull/686?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will not change coverage\n\n``` diff\n@@             master       #686   diff @@\n==========================================\n  Files            19         19          \n  Lines          5216       5216          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           3590       3590          \n  Misses         1277       1277          \n  Partials        349        349          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [7252939...da06f7a](https://codecov.io/gh/go-swagger/go-swagger/compare/7252939c081328a56f28510eb101316a80f5b73e...da06f7a0bbc4689a0db698c5bc63d090540be6b7?src=pr)\n  ## Problem statement\n\nI am trying to configure the TLS from within the code. Do not want to pass the TLSCertificate nor the TLSCertificateKey on the command line.  We have a secrets server that we have to talk to to get the TLS information.  So I tried to accomplish this using the configureTLS function, but several errors were observed.  All errors caused me to make changes to the server.go code which gets automatically generated.\n\nIn my generated server.go code in the Listen function I had to remove the first if s.hasScheme(schemeHTTPS) block because it is checking for the required command line flags `--tls-certificate` and `--tls-key`.  (see attached file line 206-223)\n\nIn the Serve function after the configureTLS function call there is an err check that I also had to comment out.  It was the error from trying to load the tls certificates from the command line.  (see attached file line 182-184)\n\nI would like to be able to auto generate without fixing the code for this situation.  I attached the server.go file that was generated with my lines commented out for reference.\n[server.go.txt](https://github.com/go-swagger/go-swagger/files/519896/server.go.txt)\n It was the docker from quay.io/goswagger/swagger:dev from 2 weeks ago.  It looks like it has been updated recently, but I have not updated it yet.\n  Fixes #676\n- adds `--skip-validator` to `swagger generate operation` so that models can be generated without validation\n- fixes a bug where anonymous response objects were created with a suffix of `BodyBody`. Now only one `Body` as appended\n- adds support for setting the name of an anonymous schema from the `title`\n\nIf any of this is controversial I'd be happy to split it into a separate PR to get the rest merged.\n ## [Current coverage](https://codecov.io/gh/go-swagger/go-swagger/pull/680?src=pr) is 75.42% (diff: 100%)\n\n> Merging [#680](https://codecov.io/gh/go-swagger/go-swagger/pull/680?src=pr) into [master](https://codecov.io/gh/go-swagger/go-swagger/branch/master?src=pr) will not change coverage\n\n``` diff\n@@             master       #680   diff @@\n==========================================\n  Files             8          8          \n  Lines          1994       1994          \n  Methods           0          0          \n  Messages          0          0          \n  Branches          0          0          \n==========================================\n  Hits           1504       1504          \n  Misses          336        336          \n  Partials        154        154          \n```\n\n> Powered by [Codecov](https://codecov.io?src=pr). Last update [e4435d7...dfae7e6](https://codecov.io/gh/go-swagger/go-swagger/compare/e4435d763f153373bde15018740fda039ba0e146...dfae7e60ebd52bb6ae672fdabdaa5ed1f41c0a15?src=pr)\n  ## Problem statement\n\nI can't install `swagger` command in Go 1.6.\nHave you switched to 1.7 completely, without backward compatibility?\n## Steps to reproduce\n\n```\n$ go version\ngo version go1.6.3 darwin/amd64\n$ go get github.com/go-swagger/go-swagger/cmd/swagger\npackage context: unrecognized import path \"context\" (import path does not begin with hostname)\n```\n I think I'm still seeing this issue after updating go-swagger.\n\nError when I try to build the client:\n\n```\ngen-go/client/user_search/find_users_parameters.go:7:2: cannot find package \"context\" in any of:...\n```\n\nHere's what the imports in the generated `find_users_parameters.go` look like:\n\n``` go\nimport (\n    \"context\"  // <-- Invalid import\n    \"time\"\n\n    \"github.com/go-openapi/errors\"\n    \"github.com/go-openapi/runtime\"\n    cr \"github.com/go-openapi/runtime/client\"\n\n    strfmt \"github.com/go-openapi/strfmt\"\n)\n```\n  In the [swagger spec I'm working with](https://github.com/bfirsh/docker-api-reference/blob/master/swagger.yaml) there are lots of inlined response schemas. I'd like to generate a model for them using `swagger generate model ...`. As far as I understand it, currently you can only generate models for the schemas under `definitions`.\n\nI'd like to add a feature to generate a model from these inline response schemas.  The name of the model would be `<operationId><response code>Response`.\n\nDo you think there is value in this, or is there some easier way to work with inline schemas?\n Ah perfect, I'll try it out, thanks!\n `generate operation` is looking promising. I think I need to add a `--skip-validator` to match `generate model`. \n\nThe model name is a bit unfortunate (ex: `VolumesListOKBodyBody`), Something like `VolumeListOkResponseBody` would be a lot nicer.  I haven't had a chance to look into why the name is that way.\n  Looking at `generator/types.go` it seems like there is no way to force `go-swagger` to generate a model that uses golang type `int`. It defaults to `int64` and I can't find a format that will give me `int`.\n\nIs this by design, or did I miss something?\n I think I might opt for using more explicit types for now. I'll close this issue until I run into a case where it's not working well.\n To be honest, this is not so user-friendly. I think it might be some kind of against other thing's design.\r\n\r\nCould you give me some guidance that how to `A good way to enable just int is perhaps through providing a flag`? @casualjim \r\n\r\nThanks a lot.  Starts to implement #673\n Ah, that's what I was missing, thanks!\n  Fixing schema scan for case when Embedded struct has tag `json:\"-\"`\n\n``` go\ntype Error struct {\n    Code   string\n    Header http.Header\n}\n\ntype EmbeddedModel struct {\n    Field string `json:\"field\"`\n\n    Error `json:\"-\"`\n}\n\n// swagger:model SuccessAllOfResponse\ntype SuccessAllOfResponse struct {\n    // swagger:allOf\n    EmbeddedModel\n\n    Error `json:\"-\"`\n}\n```\n\nExample URL:\nhttps://github.com/gaplyk/go-swagger-issue/commit/28ad72c5e95258053f754b69a2824f0e53b9975c\n @casualjim when you could merge it? :)\n :+1: \n  ## Problem statement\n\nHi,\nMaybe this question should point to openapi or mgo, but I still want to share this question, maybe could get some ideas.\n\nAs I use mgo for Mongo driver , thus I defined the swagger model as :\n\n``` yml\n...\ndefinitions:\n  myitem:\n    type: object\n    properties:\n      inserttime:\n        type: string\n        format: date-time\n```\n\nThus in go swagger, I get :\n\n``` go\n    Inserttime strfmt.DateTime `json:\"inserttime,omitempty\"`\n```\n\nWhen I get mongo result by model generated by swagger , then the time is :\n\n> 0001-01-01T00:00:00.000Z\n\nBut when I change the model to \n\n``` go\n    Inserttime time.Time `json:\"inserttime,omitempty\"`\n```\n\nThen I get time is :\n\n> 2016-09-25T20:03:21.567Z\n\nThen I see the definition of \"strfmt.DateTime\",  defined as :\n\n``` go\n    type DateTime time.Time\n```\n\nSo I'm very confused ....why it doesn't work with strfmt.DateTime?\n\nAny idea? Thanks a lot\n I read the source code of mgo, I found the reason:\nin mgo.v2, it detect the type of time by\n\n``` go\ntypeTime           = reflect.TypeOf(time.Time{})\n// typeTime value is : time.Time\n```\n\nAnd I try to get the type of strfmt.DateTime:\n\n``` go\nfmt.Print(reflect.TypeOf(item.Inserttime))\n// print out \"strfmt.DateTime\"\n```\n\nThus mgo.v2 cannot compatible with openapi,  and then it cannot compatible with swagger\n @casualjim  Coool! I try to do that , if it works, I will put source code and share with others :)\n Here is my SetBSON, cause currently I don't have any test case for GetJSON, so I just put first part of code here, after I finish it, I will create a PR for go-openapi, please review @casualjim ,\n\n``` go\npackage strfmt\n\nimport (\n        ....\n    \"gopkg.in/mgo.v2/bson\"\n)\n\nfunc (t *DateTime) SetBSON(raw bson.Raw) error {\n    if len(raw.Data) < 8 {\n        return fmt.Errorf(\"couldn't convert bson data to a Timestamp\")\n    }\n    b := raw.Data[0 : 8]\n    i := int64((uint64(b[0]) << 0) |\n        (uint64(b[1]) << 8) |\n        (uint64(b[2]) << 16) |\n        (uint64(b[3]) << 24) |\n        (uint64(b[4]) << 32) |\n        (uint64(b[5]) << 40) |\n        (uint64(b[6]) << 48) |\n        (uint64(b[7]) << 56))\n    if i == -62135596800000 {\n        *t = DateTime(time.Time{})\n    } else {\n        *t = DateTime(time.Unix(i/1e3, i%1e3*1e6))\n    }\n    return nil\n}\n```\n @casualjim can you take a look at https://github.com/go-openapi/strfmt/issues/12 as it aims to resolve this issue as well. Fixed by https://github.com/go-openapi/strfmt/pull/12.  ## Problem statement\n\nThe route is // swagger:route GET /services/{serviceName}/version/{version}  pets listOneService\n,How to comment the two params('serviceName' and 'version')\n## Swagger specification\n## Steps to reproduce\n @casualjim I noticed you used `json:\"paramName\"` for the path param. When would you want to use `param:\"paramName\"`?\n @casualjim thank you\uff01\n  Hi,\n\nI found the following problem: if I will run the server with `--host=0.0.0.0` and I have both http and https schemes - the server will panic with `listen tcp: too many colons in address :::0`.\n\nI think I figured out what's going wrong:\n1. here https://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/server.gotmpl#L230 `s.Host` is being used to construct the address. This works fine.\n2. here https://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/server.gotmpl#L239 `s.Host` will be re-assigned with the value from the `swag.SplitHostPort(listener.Addr().String())`. This works mostly fine except when the host is `0.0.0.0`. In this case `s.Host` will be `::` which apparently would mean all interfaces.\n3. and finally here https://github.com/go-swagger/go-swagger/blob/master/generator/templates/server/server.gotmpl#L248 tlsListener will use the modified `s.Host`. And if it was changed to `::` the resulting address will be `:::0` (instead of `[::]:0`).\n\nI'm not sure what was the best way to fix the issue, so I just moved the assignment of the https host to the top before its modification. Please tell me if you think there's a better way.\n\nPS: thanks for the amazing go-swagger project!\n  I am using the `swagger.yaml` from [http://petstore.swagger.io/v2/swagger.json](http://petstore.swagger.io/v2/swagger.json)\n\nAnd I generate the server code by using the command:\n`swagger generate server -A PetStore -f specs/swagger.yaml`\n\nIn the generated `cmd/pet-store-server/main.go`\uff0c there are duplicated imports\non `user, pet, store` :\n\n``` go\npackage main\n\nimport (\n   ...\n\n  \"iriswag/models\"\n  \"iriswag/restapi/operations/user\"\n  \"iriswag/restapi/operations/pet\"\n  \"iriswag/restapi/operations/store\"\n  \"iriswag/restapi/operations/user\"\n  \"iriswag/restapi/operations/store\"\n  \"iriswag/restapi/operations/pet\"\n  \"iriswag/restapi\"\n  \"iriswag/restapi/operations\"  \n)\n```\n  ## Problem statement\n\nIn Swagger UI, after I set authentication of API KEY, then it said it doesn't enable CROS, but I configure CROS handler already in :\n\n``` go\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    handleCORS := cors.Default().Handler\n    return handleCORS(handler)\n}\n```\n\nDo u have any idea? \nThanks a lot\n @casualjim  Fixed and debuged by following source code:\n\n``` go\nimport \"github.com/rs/cors\"\n\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    corsHandler := cors.New(cors.Options{\n        Debug: false,\n        AllowedHeaders:[]string{\"*\"},\n        AllowedOrigins:[]string{\"*\"},\n        AllowedMethods:[]string{},\n        MaxAge:1000,\n    })\n    return corsHandler.Handler(handler)\n}\n```\n  I did this exercise to prove it out for myself... And I thought others might benefit from it too.\n\nSigned-off-by: Nelz nelz9999@gmail.com\n Hrm... I see the build failed because it didn't find the generated code... Should I also check in generated resources as well?\n  My question is how i can access the generated API  interface from operator handler function ?\nCan i pass it somehow via context or any other way to do that   ?\n Thanks for the answer will try to find another workaround.\nAnd about the use case its probably not relevant and its really custom.\n\nI created an module like apache access module ACL based on IP address for different url. Instand of URL for lookup key i was decided to use Operation.ID. (lookup will be faster in that way  because each operation have unique id according to swagged specification )\n\nThe problem comes when i wont to check against that ACL \nThere is 2 options to place a \"hook\" in golbalMiddleware or in each Operation Handler.\nIf i go for an golbalMiddleware a need to get an middleware.MatchedRoute.\nBecause i did not found a way to do that I add my ACL struct to the API struct and was thinking that i can access ACL property somehow from the context but did not found a way to do that.\n Perhaps related to this ... I have some domain objects I need access to in the handlers (db connection, telemetry client, etc). What's the recommended way/place to define these and access them in the handlers? Would I define them in `configure_xxx()` and make wrapper functions for the handlers to make them accessible? Or is there a nice way to add them to the context? Perhaps some middleware to stuff it in? \r\n\r\nI was looking for some examples of this but couldn't find anything.  Thanks again @casualjim \r\n\r\nI guess the important takeaway is that main and the handlers have to be pulled outside of the generated code since only `configure_xxx()` is protected. And `main()` doesn't call `configureAPI()` ... that was a little confusing looking through the other examples and not seeing any changes to the vanilla config code. \r\n\r\n\"It has to be there somewhere ...\" Hey @casualjim ... related to above discussion, wouldn't it be better to have all the handlers automatically be part of a default struct that simply has a Context member variable or empty interface? That would save everyone a lot of copy/pasta when we need to inject some info.  yes, exactly. Something I can stuff a database reference or other business state into.   This adds constants for string enum model definitions. E.g., for this swagger model definition:\n\n```\ndefinitions:\n  Foo:\n    type: string\n    enum:\n      - bar\n      - baz\n```\n\nyou get:\n\n``` go\nconst (\n        FooBar Foo = \"bar\"\n        FooBaz Foo = \"baz\"\n)\n```\n  Is there any way to implement the Amazon API Gateway vendor extensions (x-amazon-apigateway*) easily for spec generation?\n\nBasically I'm looking for a way to add custom vendor extensions.\n I have my paths being generated, but I need to be able to add the amazon extensions to them. Hopefully this example helps. If there is an easy way for me to add my own extensions that can be generated from comments, it would be awesome.\n\n```\n\"paths\": {\n  \"/\": {\n    \"options\": {\n      stuff\n    }\n    \"x-amazon-apigateway-integration\": {\n      \"requestTemplates\": {\n        \"application/json\": \"{\\\"statusCode\\\": 200}\"\n      },\n      \"passthroughBehavior\": \"when_no_match\",\n      \"responses\": {\n        \"default\": {\n          \"statusCode\": \"200\",\n          \"responseParameters\": {\n            \"method.response.header.Access-Control-Allow-Methods\": \"'OPTIONS'\",\n            \"method.response.header.Access-Control-Allow-Headers\": \"'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'\",\n            \"method.response.header.Access-Control-Allow-Origin\": \"'*'\"\n          }\n        }\n      },\n      \"type\": \"mock\"\n    }\n}\n```\n The extensions I need to add are these: http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions.html\n Is there anyway for me to easily integrate these extensions?\n Okay, I have a solution in the works, but I have another issue. AWS does not support response refs. Is there an easy way to make go-swagger put responses inline instead of as $refs?\n  ## Problem statement\n\nI get multiple errors when I try to build with the latest version of swagger (0.6.0).  This is the first of many.  It seems that the generated code is missing imports.\n## Swagger specification\n\n```\nswagger: \"2.0\"\ninfo:\n  version: 1.0.0\n  title: OnFrontiers API\nhost: api.onfrontiers.com\nbasePath: /v1\nschemes:\n  - http\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n  /experts:\n    get:\n      summary: List all experts\n      operationId: listExperts\n      tags:\n        - experts\n      parameters:\n        - name: limit\n          in: query\n          description: How many items to return at one time (max 100)\n          required: false\n          type: integer\n          format: int32\n      responses:\n        \"200\":\n          description: An paged array of users\n          headers:\n            x-next:\n              type: string\n              description: A link to the next page of responses\n          schema:\n            $ref: '#/definitions/User'\n        default:\n          description: unexpected error\n          schema:\n            $ref: '#/definitions/Error'\n  /users/{userId}:\n    get:\n      summary: Info for a specific user\n      operationId: showUserById\n      tags:\n        - users\n      parameters:\n        - name: userId\n          in: path\n          required: true\n          description: The id of the user to retrieve\n          type: string\n      responses:\n        \"200\":\n          description: Expected response to a valid request\n          schema:\n            $ref: '#/definitions/Users'\n        default:\n          description: unexpected error\n          schema:\n            $ref: '#/definitions/Error'\ndefinitions:\n  User:\n    required:\n      - id\n      - name\n    properties:\n      id:\n        type: integer\n        format: int64\n      name:\n        type: string\n      tag:\n        type: string\n  Users:\n    type: array\n    items:\n      $ref: '#/definitions/User'\n  Error:\n    required:\n      - code\n      - message\n    properties:\n      code:\n        type: integer\n        format: int32\n      message:\n        type: string\n\n```\n## Steps to reproduce\n\n```\n$ swagger generate server -f swagger.yml\n$ go build <repo path>/cmd/on-frontiers-server\n```\n Don't forget to also re-generate the relevant output (`swagger generate {args...}`) after running `go get -u github.com/go-openapi/runtime`.\n @daved   Does not seem to work for me. Still getting swag.IsZero undefined.\n For me this is still a problem.\r\n\r\nI'm starting out with an empty `$GOPATH` and a the swagger `0.7.4` binary.\r\nFollowing the simple server tutorial I generate the `swagger.yml` with:\r\n\r\n```\r\nswagger init spec \\\r\n  --title \"A To Do list application\" \\\r\n  --description \"The product of a tutorial on goswagger.io\" \\\r\n  --version 1.0.0 \\\r\n  --scheme http \\\r\n  --consumes application/io.goswagger.examples.todo-list.v1+json \\\r\n  --produces application/io.goswagger.examples.todo-list.v1+json\r\n```\r\n\r\nWhich finishes with the message:\r\n\r\n```\r\nFor this generation to compile you need to have some packages in your GOPATH:\r\n\r\n  * github.com/go-openapi/runtime\r\n  * github.com/tylerb/graceful\r\n  * github.com/jessevdk/go-flags\r\n  * golang.org/x/net/context\r\n```\r\nI `go get -u` those and add a simple hello world get handler that returns a string and 200 to the swagger spec. Then I try to build the server with `go build -v cmd/a-to-do-list-application-server/main.go`.\r\nIt failes on missing packages:\r\n- `github.com/go-openapi/analysis`\r\n- `github.com/go-openapi/loads`\r\n- `github.com/go-openapi/spec`\r\n- `github.com/go-openapi/validate`\r\n- `github.com/gorilla/context`\r\n\r\nAfter installing those I try to compile again and finally get the message this issue is built on:\r\n\r\n```bash\r\n[rio@ravage testserver]$ go build -v cmd/a-to-do-list-application-server/main.go \r\ngithub.com/go-openapi/runtime/middleware/denco\r\ngithub.com/go-openapi/runtime/middleware/header\r\ngithub.com/go-openapi/runtime/middleware/untyped\r\ngithub.com/go-openapi/runtime/security\r\ngithub.com/go-openapi/runtime/middleware\r\ntestserver/restapi/operations\r\n# testserver/restapi/operations\r\nrestapi/operations/a_to_do_list_application_api.go:57: undefined: swag in swag.CommandLineOptionsGroup\r\n```\r\n\r\nRunning `swagger generate server --spec swagger.yml` again will fix this with this diff:\r\n\r\n```diff\r\ndiff --git a/restapi/operations/a_to_do_list_application_api.go b/restapi/operations/a_to_do_list_application_api.go\r\nindex 19060b2..e7942cc 100644\r\n--- a/restapi/operations/a_to_do_list_application_api.go\r\n+++ b/restapi/operations/a_to_do_list_application_api.go\r\n@@ -13,6 +13,7 @@ import (\r\n        middleware \"github.com/go-openapi/runtime/middleware\"\r\n        spec \"github.com/go-openapi/spec\"\r\n        strfmt \"github.com/go-openapi/strfmt\"\r\n+       \"github.com/go-openapi/swag\"\r\n )\r\n \r\n // NewAToDoListApplicationAPI creates a new AToDoListApplication instance\r\ndiff --git a/restapi/operations/get_parameters.go b/restapi/operations/get_parameters.go\r\nindex 8524a0c..941e437 100644\r\n--- a/restapi/operations/get_parameters.go\r\n+++ b/restapi/operations/get_parameters.go\r\n@@ -7,6 +7,7 @@ import (\r\n        \"net/http\"\r\n \r\n        \"github.com/go-openapi/errors\"\r\n+       \"github.com/go-openapi/runtime/middleware\"\r\n )\r\n \r\n // NewGetParams creates a new GetParams object\r\ndiff --git a/restapi/server.go b/restapi/server.go\r\nindex 1a23589..a92af06 100644\r\n--- a/restapi/server.go\r\n+++ b/restapi/server.go\r\n@@ -10,6 +10,7 @@ import (\r\n        \"sync\"\r\n        \"time\"\r\n \r\n+       \"github.com/go-openapi/swag\"\r\n        flags \"github.com/jessevdk/go-flags\"\r\n        graceful \"github.com/tylerb/graceful\"\r\n```\r\n\r\nSo it does seem the swag  and middleware import is not coming through on first generation.\r\nAlso the first generation message is missing some packages. @Rio this seems to be recently fixed via https://github.com/go-swagger/go-swagger/pull/867 and possible others. Could you please confirm?\r\n\r\nI tested it myself using your reproduce steps, and it works for me, once I get all the dependencies via go get.\r\n\r\nNote: the `For this generation to compile you need to have some packages in your GOPATH` message is incomplete, as I also had to `go get` the following packages: `github.com/docker/go-units github.com/go-openapi/analysis github.com/go-openapi/loads github.com/go-openapi/spec github.com/go-openapi/validate github.com/gorilla/context` I think if you start with `github.com/go-openapi/validate` it gets the rest of the ones that you need.\r\n I remember talking to @casualjim about this, and if I remember correctly, he was surprised that `go-openapi/runtime` didn't pull in `go-openapi/validate`. it's not solved for me. I still need to do another `swagger generate` to get the proper imports set. I've even got one extra that's missing:\r\n```\r\nrestapi/operations/get_parameters.go:31: undefined: middleware in middleware.MatchedRoute\r\nrestapi/operations/todo_list_api.go:57: undefined: swag in swag.CommandLineOptionsGroup\r\n```  ## Swagger specification\n\nlatest Swagger 2.0 from master, (build with src)\n\nI'd like to know how to set global header of the server? cause in Swagger-UI, i get \"Can't read from server. It may not have the appropriate access-control-origin settings.\"\n\nThanks a lot\n  This is what I had to do to make the api client work:\n\n``` go\npackage main\n\nimport (\n    \"fmt\"\n    \"log\"\n\n    \"github.com/org/project/pkg/api-client/client/repositories\"\n    \"github.com/go-openapi/strfmt\"\n\n    apiclient \"github.com/org/project/pkg/api-client/client\"\n    httptransport \"github.com/go-openapi/runtime/client\"\n)\n\nfunc main() {\n    runtime := httptransport.New(\"172.17.0.1\", \"/\", []string{\"https\"})\n    runtime.DefaultAuthentication = httptransport.APIKeyAuth(\"cookie\", \"header\", \"session=blah; csrftoken=blah\")\n    client := apiclient.New(runtime, strfmt.Default)\n\n    resp, err := client.Repositories.ListRepositories(repositories.NewListRepositoriesParams())\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"%#v\\n\", resp.Payload)\n}\n```\n\nI ran into 2 big issues:\n1. The auth works completely differently from what's documented.\n2. Initially I tried to create the params object manually and that set the timeout to 0 and caused every request to fail immediately and mysteriously with a deadline exceeded error.\n\nEdit: I was using the 0.6.0 image. Maybe things changed since 0.5.0?\n I ran into the `deadline exceeded error` bug for the same reason.   Maybe it is a way to go now but it breaks all our code. Basically it always generates pointers even if property is required.\n\nNote how Code field is generated. In 0.5.0 it is an int while 0.6.0 generates pointer there.\n\n```\n$ cat /tmp/swag.json\n{\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"title\": \"Borked\"\n    },\n    \"definitions\": {\n        \"Error\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"code\": {\n                    \"type\": \"integer\"\n                },\n                \"message\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"required\": [\n                \"code\",\n                \"message\"\n            ]\n        }\n    }\n}\n```\n\n**0.5.0**\n\n```\n$ env GOPATH=/tmp /opt/swagger-0.5.0/swagger_linux_amd64 generate client -f /tmp/swag.json -t /tmp/src/\n...\n$  cat tmp/src/models/error.go | head -32\npackage models\n\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\n\nimport (\n        strfmt \"github.com/go-swagger/go-swagger/strfmt\"\n\n        \"github.com/go-swagger/go-swagger/errors\"\n        \"github.com/go-swagger/go-swagger/httpkit/validate\"\n)\n\n/*Error error\n\nswagger:model Error\n*/\ntype Error struct {\n\n        /* code\n\n        Required: true\n        */\n        Code int64 `json:\"code\"`\n\n        /* message\n\n        Required: true\n        */\n        Message string `json:\"message\"`\n}\n\n// Validate validates this error\n```\n\n**0.6.0**\n\n```\n$ env GOPATH=/tmp /opt/swagger-0.6.0/swagger_linux_amd64 generate client -f /tmp/swag.json -t /tmp/src/\n...\n$  cat tmp/src/models/error.go | head -32\npackage models\n\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\n\nimport (\n        strfmt \"github.com/go-openapi/strfmt\"\n\n        \"github.com/go-openapi/errors\"\n        \"github.com/go-openapi/validate\"\n)\n\n/*Error error\n\nswagger:model Error\n*/\ntype Error struct {\n\n        /* code\n\n        Required: true\n        */\n        Code *int64 `json:\"code\"`\n\n        /* message\n\n        Required: true\n        */\n        Message *string `json:\"message\"`\n}\n\n// Validate validates this error\n```\n It breaks everything but I couldn't find any BREAKING change for 0.6.0.\n Probably you should regenerate all examples, revisit all docs and tutorials as they are simply broken now. I mean this project is all about generating code. This release breaks this very thing for any existing code.\n @casualjim no, `x-nullable` doesn't help as if, say, int64 field is set to 0 then server code still treats it as a missing value. Sure, this happens before 0 value is the zero value for int64 type.\n This is a problematic part here. If value is a required property, the only\nthing you can do is to have a pointer.\nI really understand your problem, I went through this suffering too. It\nbroke many things on my side as well, but it is not as critical as it could\nbe. It just took 2 hours for me to update all projects to handle this\nchange gracefully.\nYes, access values like *v - looks very ugly, but this is necessary evil to\nmake things right.\n\nAlso, this change will be very helpful when swagger switch over to the\nbitset for indication if the value is nil and set. You practically will\njust need to change v == nil to v.IsNil()\n\nOn Fri, Sep 2, 2016 at 3:29 AM, Alexander Krasnukhin <\nnotifications@github.com> wrote:\n\n> @casualjim https://github.com/casualjim no, x-nullable doesn't help as\n> if, say, int64 field is set to 0 then server code still treats it as a\n> missing one. Sure, this happens before 0 value is the zero value for int64\n> type.\n> \n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/go-swagger/go-swagger/issues/651#issuecomment-244340734,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AEJjqw4xXHPj_XbERNtM5k77li9d8aEXks5ql_qTgaJpZM4Jy_Cl\n> .\n @vburenin meh, I'm ok to have zero values  everywhere by default. I we have golang client talking to golang server. Having pointers makes it awkward on both sides.\n I close this issue as we decided to simple not upgrade. Doesn't worth the effort for us.\n  ```\n$ https://github.com/go-swagger/go-swagger/releases/download/0.6.0/swagger_linux_amd64\n$ chmod +x ./swagger_linux_adm64\n$ ./swagger_linux_amd64 version\n0.5.0-171-gae8082b\n```\n Also getting this, even from master.  This is really confusing.\n\n```\n$ go get -u github.com/go-swagger/go-swagger/cmd/swagger\n$ swagger version\n0.5.0-171-g34f62b5\n```\n  I have code like this:\n\n```\ntype Weekday int\n\ntype Parameters struct {\n    //in:query\n    Day Weekday\n}\n```\n\ngenerate spec generates this json for parameter:\n\n```\n{\n  \"$ref\": \"#/definitions/Weekday\",\n  \"x-go-name\": \"Day\",\n  \"name\": \"Day\",\n  \"in\": \"query\"\n},\n```\n\nwhat is invalid, because query parameter can have one of predefined datatypes according to spec.\n\nIs it possible somehow to force go-swagger to use custom parameter type for spec generation?\n\nLike:\n\n```\ntype Parameters struct {\n  //in:query\n  //type:int\n  //minimum:1\n  //maximum:7\n  Day Weekday\n}\n```\n  ## Problem statement\n\nLatest release for swagger_linux_amd64 does not match the master branch of go-swagger.  \nThe release's version results to 0.5.0, however when doing a `go install` under the go-swagger/cmd/swagger directory generates version 0.5.0-166-gd492656\n## Steps to reproduce\n\nGenerated a swagger client with swagger_linux_amd64\n  Code which cause error:\n\n``` go\n// swagger:response SuccessResponse\ntype successResponseBody struct {\n    // In: body\n    Body SuccessResponse\n}\n\n// swagger:model SuccessResponse\ntype SuccessResponse map[string]string\n\ntype successData struct {\n    SuccessResponse\n}\n```\n\nexample here: https://github.com/gaplyk/go-swagger-issue\n  Given the attached swagger, the validator complains:\n\n```\n\"/register.modifiedOn in body should match 'yyyy-MM-dd'T'HH:mm:ss.SSS'Z''\",\"\"\n```\n\nboth when the example is given as\n\n```\n\"modifiedOn\":\"2015-05-05'T'12:09:33.281'Z'\"\n```\n\nor (the correct one):\n\n```\n\"modifiedOn\":\"2015-05-05T12:09:33.281Z\"\n```\n\n[DM.zip](https://github.com/go-swagger/go-swagger/files/443555/DM.zip)\n  issue with parsing custom types for maps\n\n``` go\ntype MapType map[string]string\ntype MapTypeArr map[string][]string\n\ntype MyStruct struct {\n    Field   MapType\n    Field2   MapTypeArr\n}\n```\n\nI have problem with writing test for it fast, just have to spend more time to understand what is going on there and create the test.\n\nLooks like there is one issue more, but i didn't find it yet.\nexample is here: \nhttps://github.com/gaplyk/go-swagger-issue\n  issue with parsing custom types for maps\n\n``` go\ntype MapType map[string]string\ntype MapTypeArr map[string][]string\n\ntype MyStruct struct {\n    Field   MapType\n    Field2   MapTypeArr\n}\n```\n\nI have problem with writing test for it fast, just have to spend more time to understand what is going on there and create the test.\n\nLooks like there is one issue more, but i didn't find it yet.\nexample is here: \nhttps://github.com/gaplyk/go-swagger-issue\n  Swagger generates public `SwaggerJSON` variable in `embedded_spec.go` file. When I am running `go doc` on my package it dumps this big variable in binary format.\nCan you make the variable private and make a public method to access it?\n  ## Spec generation failing on Ubuntu after d4320763baca34e95720ad77880a3fd0ed882309\n\nError message:\n`Failed to load template serverConfigureapi: template: serverConfigureapi:23: illegal number syntax: \"-\"`\n\nIt does NOT occur when running on Mac OS X, but our CI builds are on Ubuntu which started failing yesterday.\n## Steps to reproduce\n\nThis should be reproducible on any go application.\n\nIf you need one, grab the small sample project from https://github.com/lucas-natraj/go-notes and follow the standard setup instructions on the README.\n\nThe error is easily seen when running: \n\n```\n$ ./bin/swagger generate spec --input=./swagger-aux.json --output=./swagger.json --base-path=./src/notes/app/\n```\n\nI have forked the repo to https://github.com/lucas-natraj/go-swagger and reverted the aforementioned commit, and the error message no longer occurs.\n I believe that commit broke compatibility with go < 1.6\nhttps://github.com/golang/go/issues/14381\n @emosbaugh: Yeah, that looks like it. Thanks for finding that.\n @casualjim Nope. I'm perfectly fine with the change. I'm upgrading our CI builds accordingly. \nI just didn't find anything to explain why this was failing, so I figured it'd be easier to just submit this issue in case anyone else hit the same problem.\n\nMight be good to put a note somewhere (perhaps it's already there, and I just missed it) that there's a line in the sand with this commit.\n Change is ok by me.\n\nFor those who run into this issue in circleci:\nThe default build environment ships with go 1.5. It's possible to update the project build environment to use Ubuntu 14.04 image which ships with go 1.6.\n  ## Problem statement\n\nI see lot of places where the code looks like this:\n\n```\nif Debug {\n    log.Println(\"absolute path\", fa)\n}\n```\n\nEvent though it is trivial and debug only, it contributes into the code size overall reducing readability.\n## Proposition.\n\n I would consider moving it out into just one function that supports some kind of log levels or I would just use an existing logging library.\n\nThoughts?\n  This was related to #587 and #612, right?\n\nI was actually looking forward to those changes. Was there any further discussion about this?\n I want to be in the control where and how I listen to client connections as\nwell as what is in the spec shemes list independently.\n > So I think the intent is we don't want the spec to decide between https, http or unix sockets. We want that to be decision that is made when we start the process of the server. Would you agree that that is the change you want preserved?\n\nYup, that is exactly what I was looking for!\n  ## Problem statement\n\nif a parameter is set to \"type:string, format:uuid, required:false\", \n\"go run\" gives  this error: \"_...cannot convert o.ID (type *strfmt.UUID) to type string\"_.\n\nHowever, if set the parameter to \" type:string, format:uuid, required:true\", this issue is not observed.\n  ## Problem statement\n\nI use swagger version `0.5.0-145-g163c0cd` and I updated all my project dependencies (`go get -t -u ./...`). I'm seeing the following error when trying to start my REST API server. \n\n```\n# github.com/go-openapi/runtime/middleware\n../../../github.com/go-openapi/runtime/middleware/router.go:233: cannot use parameters (type map[interface {}]spec.Parameter) as type map[string]spec.Parameter in field value\n../../../github.com/go-openapi/runtime/middleware/router.go:235: cannot use parameters (type map[interface {}]spec.Parameter) as type map[string]spec.Parameter in argument to newUntypedRequestBinder\n```\n\nAny ideas or maybe this is not related to swagger?\n Thanks for the quite reply. Not yet, but I guess the time has come.\n Thanks that fixes it. \n   should be checking for length of string, rather than arbitrarily (trying) to convert a string to an float64\n  ## Problem statement\n\nGenerated code validation when checking for max string length does not work. tries casting to an int64 rather than checking for the length of the string\n## Swagger specification\n\nhttp://a4677c9873c9611e6aa7102b92f75d5c-1135862614.us-west-2.elb.amazonaws.com/v3/swagger.json\n## Steps to reproduce\n\nGenerate the code with go-swagger and look at /models/get_job.go line 95\n  When doing `200: body:SomeResponse` in responses, `SomeResponse` won't get included in the definitions. Introduced by #596.\n\nHere's a broken test case to demonstrate: https://github.com/bfirsh/go-swagger/commit/5ae46516fd61c0eb33365c1467eb4144c0bc5d03\n\nSome digging through the code suggests that `postDecls` keeps track of what is added to definitions through some kind of discovery process, and when `setOpResponses.Parse()` parses the responses it should do _something_ with that.\n\nThe discovery process is very tangled and undocumented though so I can't figure out what it should do, so maybe this is more obvious to someone who knows how this bit of code works...\n Refer to http://goswagger.io/generate/spec/route/\n\nResponse should be `200: SomeResponse`\n\nBody is a tag that goes into a struct.\n I was facing the same issue, but I find out this can be mitigated by setting `--scan-models` option to be true, which force add the swagger annotated model into the swagger spec. And then the response will fail swagger check due to no description, then have to add description part here https://github.com/go-swagger/go-swagger/blob/master/scan/validators.go#L602. \n\nHope this response model bug can be fixed soon!\n  If there are multiple packages of the same name, it might pick the wrong one. Pos will absolutely pick the correct file.\n\nThis fixes my app in #608, but it unfortunately breaks the test suite because `gofile.Pos()` (`../fixtures/goparsing/classification/models/nomodel.go`) is different to `fil.Pos()` (`/Users/ben/go/src/github.com/go-swagger/go-swagger/fixtures/goparsing/classification/operations/noparams.go`). I'm not sure why one is relative and one isn't, and I copied the code from elsewhere in the file, so I'm not sure why this doesn't work. Any ideas?\n\nAlso \u2013\u00a0not quite sure how to write a test for this, because I think the behaviour is non-deterministic depending on what order files are scanned...\n When this gonna be merged? I faced same issue today and would like to have this asap :(\n Yes this fixed my issues. I can do example how to reproduce it on Monday. It is very simple :)\n And yes looks like this change in scan-package branch will fix same issue but in different way. :)\n https://github.com/gaplyk/go-swagger-issue\nhere is how to reproduce it\n I meant scan-package will fix this as well as this PR.\n  Following on from #617... turns out this was done in 3 places, so I've yanked it out into its own parsing function and added more tests for blank names in JSON tags.\n\nLooks like there's some more duplication and refactoring that can be done here, but I suppose this is a good start.\n  ## Problem statement\n\nI am seeing an issue when i have an `interface` in my struct that i am trying to annotate as a response in swagger. \n\nmy code:\n\n``` go\n// Generic API response type\n// swagger:response APIResponse\ntype Response struct {\n     //status of the call\n    Status string `json:\"status\"`\n    //some data returned\n    Data interface{} `json:\"data\"`\n    // optional message\n    Message string `json:\"message\"`\n}\n```\n\nthe generated swagger  then ends up like below. notice the `Data` field is missing a type which makes the response invalid.\n\n``` yaml\nresponses:\n  APIResponse:\n    description: Generic API response type\n    schema:\n      type: object\n      properties:\n        Status:\n          type: string\n          description: status of the call\n        Data:\n          description: some data returned\n        Message:\n          type: string\n          description: optional message\n```\n\nany idea why this might be happening?\n Were you able to get around this? Pardon my ignorance since I'm new to both swagger AND go.\r\nI'm not sure if I'm understanding your last reply.  \r\n\r\nI basically have the same issue as stated in the original post.  \r\nI have a generic return struct defined as follows:\r\n\r\n``` Go\r\n// Generic API response\r\n// swagger:response defaultResponse\r\ntype Response struct {\r\n    Status string `json:\"status\"`\r\n    Code int `json:\"code\"`\r\n    // Can be a Foo or a Bar\r\n    Data interface{} `json:\"data\"`\r\n}\r\n```\r\n\r\nI also have several other types that get shoehorned into the Data slot.  Here are two examples:\r\n``` Go\r\n// Some arbitrary data type\r\n// swagger:response\r\ntype Foo struct {\r\n    Id string `json:\"Id\"`\r\n    Configs []Baz `json:\"configs\"`\r\n}\r\n\r\ntype Bar struct {\r\n    Id string `json:\"id\"`\r\n}\r\n\r\ntype Baz struct {\r\n    Name string `json:\"name\"`\r\n}\r\n```\r\n\r\nIs there a way to annotate this so as to generate valid swagger?   the swagger web editor is what I'm using to validate the generated output. So I updated my annotations like so and compiled with the --scan-models tag.  Yay, I have definitions now!\r\n\r\n``` Go\r\n// Generic API response\r\n// swagger:response defaultResponse\r\ntype Response struct {\r\n    Status string `json:\"status\"`\r\n    Code int `json:\"code\"`\r\n    // Can be a Foo or a Bar\r\n    Data interface{} `json:\"data\"`\r\n}\r\n\r\n// My Foo Struct\r\n// swagger:model\r\ntype Foo struct {\r\n    Id string `json:\"Id\"`\r\n    Configs []Baz `json:\"configs\"`\r\n}\r\n\r\n// My Bar Struct\r\n// swagger:model\r\ntype Bar struct {\r\n    Id string `json:\"id\"`\r\n}\r\n\r\n// My Baz Struct\r\n// swagger:model\r\ntype Baz struct {\r\n    Name string `json:\"name\"`\r\n}\r\n```\r\n\r\nBut I still don't know how to handle the inherent polymorphism of `Data`.  This is likely a syntax fail on my part but, let's say I have two routes:\r\n\r\n- The first route returns my generic response with a `Bar` in the `Data` field\r\n- The second route returns the same generic response, but with a `Foo` in the `Data` field\r\n\r\nIt seems like I would want to define two Response sub-types.  One with Bar in the Data field, and one with Baz.  Is there a way to do this via annotation?  For example, this should use the name \"Foo\" rather than the blank string:\n\n```\nFoo string `json:\",omitempty\"`\n```\n  similar to https://github.com/go-swagger/go-swagger/issues/597 I was wondering how I would get the default response from the client. \n\nI have a spec like this:\n\n``` yaml\n/deploys/{deploy_id}:\n  get:\n    operationId: getDeploy\n    parameters:\n      - name: deploy_id\n        type: string\n        in: path\n        required: true\n    responses:\n      '200':\n        description: OK\n        schema:\n          $ref: \"#/definitions/deploy\"\n      default:\n        description: error\n        schema:\n          $ref: \"#/definitions/error\"\n```\n\nWhich generates two models: `GetDeployOK` and `GetDeployDefault`. The API generated will return the OK case. \n\n``` go\nfunc (a *Client) GetDeploy(params *GetDeployParams, authInfo runtime.ClientAuthInfoWriter) (*GetDeployOK, error) {\n  // TODO: Validate the params before sending\n  if params == nil {\n    params = NewGetDeployParams()\n  }\n\n  result, err := a.transport.Submit(&runtime.ClientOperation{\n    ID:                 \"getDeploy\",\n    Method:             \"GET\",\n    PathPattern:        \"/deploys/{deploy_id}\",\n    ProducesMediaTypes: []string{\"application/json\"},\n    ConsumesMediaTypes: []string{\"application/json\"},\n    Schemes:            []string{\"https\"},\n    Params:             params,\n    Reader:             &GetDeployReader{formats: a.formats},\n    AuthInfo:           authInfo,\n  })\n  if err != nil {\n    return nil, err\n  }\n  return result.(*GetDeployOK), nil\n}\n```\n\nDoes that mean that if I get a non-2xx response I should check the err to actually be the a `GetDeployDefault` reference? \n\n``` go\n resp, err := c.Operations.GetDeploy(&params, authInfo)\n if err != nil {\n   if casted, ok := err.(models.GetDeployDefault); ok {\n      // do something here....\n   } else  {\n     false, err\n   }\n }\n```\n\nI was tracing through the code in `Runtime.Submit` and it delegates to the `GetDeployReader.ReadResponse` which makes the distinction. But it isn't clear in those how that response is actually surfaced. \n  I have a piece of code which references an external struct:\n\n```\nimport (\n  \"github.com/docker/go-units\"\n  ...\n)\n\n// swagger: model\ntype Resources struct {\n  Ulimits              []*units.Ulimit\n  ...\n}\n```\n\nAnd get this error when generating a spec:\n\n```\nunknown field type ele for \"Ulimits\"\n```\n\nIs there a way to implicitly turn referenced types into Swagger models, or do I have to copy them in my code and mark them as Swagger models?\n Interesting \u2013\u00a0so in theory this should work? What do you mean by missing a case?\n\nI thought I had to add `swagger:model` to all of the types I want to be included, but the documentation is ambiguous about this.\n Ah, my mistake. This was actually parameters, not a model, and query parameters can only be lists of simple types, not objects.\n A thought: if this had been a better error message, I could have fixed this much quicker. Would it make sense to replace [the error here](https://github.com/go-swagger/go-swagger/blob/master/scan/parameters.go#L388) with something like:\n\n> You have used the type \"Ulimits\" in the response \"Resources\", but it is not supported in responses. The supported types are primitives (e.g. string, int), X, Y, and Z.\n\nOr is there a better place to put this?\n (Opening again because I consider a bad error message to be a bug. ;)\n  The message introduced in #437 is causing pretty sporadic error messages for me. Every time I run`swagger generate spec`, I get different paths for the error:\n\n```\npackage github.com/coreos/etcd/pkg/types, error is: unknown builtin \"Port\"\n```\n\n```\npackage github.com/docker/containerd/api/grpc/types, error is: unknown builtin \"Port\"\n```\n\n... and so on. None of those packages have anything to do with the type \"Port\", nor have any swagger definitions in them.\n\nI'm running off master.\n https://github.com/bfirsh/docker/tree/generate-swagger-specification\nhttps://github.com/bfirsh/engine-api/tree/add-swagger-annotations\n\nNote that it currently doesn't generate at all for reasons I can't figure out (`Port` is defined as a model, but it's still throwing an error for some reason). I've been running a version of go-swagger which ignores unknown types to try and debug: https://github.com/bfirsh/go-swagger/commit/5acf8482e5cd05a7f0fe4bec9155c7b063f41031\n This is quite hard to debug because the errors seem somewhat non-deterministic, but it seems the object (`Port`) might incorrect in this error too. With that patch applied to ignore unknown types, `Port` _sometimes_ shows up in the output, and _sometimes_ doesn't. If I disable some of the more complex routes (e.g. creating containers), then `Port` consistently shows up in the output.\n\nPerhaps there is an object that is causing the error that isn't actually mentioned in the error? Perhaps files are getting processed in a different order, so `Port` sometimes gets processed before the object that is actually broken but sometimes doesn't? Not sure... but might be a clue!\n Fantastic, thanks!\n\nThe root problem causing the error is #241, I believe. It also hints at the non-deterministic nature of it.\n\nIt's quite possible I'm just doing something wrong, but the error message isn't pointing me in the right place so it's very hard to figure out what is actually wrong.\n Docker's pretty hairy to build, so perhaps this isn't the demonstration of the problem. I might try and build a smaller reproducible test case.\n\nIf you want to dive further into this, check out the branches above of both docker and engine-api, then this is the command I'm running to get a build environment set up:\n\n```\nDOCKER_MOUNT=\"-v $(pwd):/go/src/github.com/docker/docker -v $(pwd)/../engine-api:/go/src/github.com/docker/engine-api\" shell\n```\n\nThat builds a container with all of the dependencies in there. To then build the swagger definition:\n\n```\nhack/make.sh swagger\n```\n I'm running into a similar issue now with a different object:\n\n```\nunable to find NetworkCreate in github.com/coreos/etcd/pkg/types\n```\n\nHere's the relevant code: https://github.com/bfirsh/engine-api/blob/8b2ebf69c454c8b2122d6e16a1a0e75bf59d12f9/types/types.go#L507\n\n`NetworkCreate` is used in `NetworkCreateRequest` and `NetworkCreateResponse` which are the actual objects used for Swagger. The obvious weird thing is that is that `github.com/coreos/etcd/pkg/types` is the wrong package. I've no idea why it's picking that package, because it doesn't have a `NetworkCreate` object or anything. With debugging enabled, we can see if definitely is loading the correct package:\n\n```\n2016/08/09 13:36:59 analyzing: github.com/docker/engine-api/types\n```\n\nThe other weird thing is why it doesn't work in the first place. I'm guessing there is a real error that is being swallowed somewhere, but I'm not sure where to look.\n Ahah - I've got it! The clue is that the package names are all called `types`. I have several packages called `types`, and `packageForFile` looks for packages by package name only, so it is picking the wrong one.\n\nI shall investigate further...\n A half fix! #623\n  ## Problem statement\n\nRunning `swagger validate <file>` on the specification below hangs and eventually fails with an out of memory error.\n## Swagger specification\n\n``` yaml\nswagger: '2.0'\ninfo:\n  title: swagger validate out of memory\n  version: 0.1.0\npaths:\n  /foos:\n    post:\n      operationId: createFoo\n      responses:\n        200:\n          schema:\n            $ref: '#/definitions/Foo'\n\ndefinitions:\n  Foo:\n    type: object\n    properties:\n      bar:\n        $ref: '#definitions/Bar'\n      baz:\n        $ref: '#definitions/Baz'\n\n  Bar:\n    type: string\n    enum:\n      - a\n      - b\n\n  Baz:\n    type: array\n    items:\n      type: string\n```\n## Steps to reproduce\n\nRun `swagger validate` on the specification above.\n\nStrangely, if I comment out either `bar` or `baz` as properties on `Foo`, it validates. Only when both properties are present does the command hang.\n I should also note that there are a couple of things incorrect about this config:\n1. `#definitions/Bar` and `#definitions/Baz` should be `#/definitions/Bar` and `#/definitions/Baz`, respectively.\n2. There should be a description on the 200 response.\n\nThe online validator at http://editor.swagger.io passes once both of these are changed. `go-swagger` passes once (1) is changed. So there are perhaps two bugs here:\n- Whatever is causing go-swagger to hang on the config\n- (assuming editor.swagger.io is correct) go-swagger doesn't fail validation if a response lacks a description\n  Let's imagine we have a list of products that are available at a store. A product resource should include a reference to the store it's available in but instead of including the entire store resource I would like to include a url to the store. \n\nWhat's the best approach to generate the url dynamically?\n### Example\n\n`/v1/products/:id`\n\n```\n{\n   \"id\": 123,\n   \"name\": \"Book\",\n   \"available_at_url\": \"https://api.example/com/v1/stores/456\"\n}\n```\n\n`/v1/stores/:id`\n\n```\n{\n  \"id\": 456,\n  \"name\": \"Book Store\",\n  \"address\": \"1 Main Road\"\n}\n```\n From what I've found there's no way in go-swagger to link the value of a primitive inside Object 1 into a formatted string primitive in Object 2. It might not even be possible inside the OpenAPI spec. \n\nA swagger:response does have a pattern property, which would get you most of the way there,  that and a well-worded description is your best bet, I think.     \n  Hi, \nI am currently trying to use go-swagger to generate some part of a Server application automatically. The server has been written with the idea of code generation in mind but we would love to reuse entirely our code transforming the code in go templates. It would be actually enough the export the `appGenerator` type and have a function that returns it (maybe `generator.GenerateServer` itself?). I would then use `appGenerator` to execute the templates.\nI would be interested in discussing how I could realize what I want to do, if it is possible with the current `go-swagger`  or not. \nThanks in advance~\n Wouldn't this generate roughly the same structure of the server? I don't want to change minor details, I want to have code that looks totally different (but only for the server part, models and clients are more than okay) while using code the parsing and validation from `go-swagger`. This means different number of files and different functionalities. This is why I thought that having something that could return the AppGenerator could be enough, but I am interested in understanding your opinion. \n Yeah, I would love to have something much simpler. I do not have the current project opensource, but I can create a gist to give you an idea as all this part can actually be opensourced. I will then work on the PR so that we can discuss further. \n @casualjim The server will look somehow similar to https://github.com/zalando/chimp/blob/master/api/server.go where the routes part will be generate from the swagger def. The handlers, similar to  https://github.com/zalando/chimp/blob/master/api/handler.go will be able to use something like this https://gist.github.com/Raffo/0bcc37995a15bd383944f099d94d1b82 for response generation. I hope that at least the idea is clear: I want to build a very opinionated server, with only few parts auto generated in order to satisfy an use case that pretty much matches the need of our project but to do so I want to re-use the parts of go-swagger. \n @casualjim Sorry for the delay, but I didn't have time at all to work on this. I quickly hacked something to give you an understanding of what I meant with this issue here: https://github.com/Raffo/go-swagger/commit/a196c5954def2bb9f1b335f7bb8011c49c5c1f08\n\nEssentially the only thing that was done is: \n- Making appGenerator public and accessible from the outside\n- Created a \"main\" that can be used to generate any template using Go's templates. This main should be evolved in just executing the templates based on the content of appGenerator (now it is only an hack) -> https://github.com/Raffo/go-swagger/blob/a196c5954def2bb9f1b335f7bb8011c49c5c1f08/cmd/swagger/commands/generate/cmd/main.go \n\nPlease note that all of this is an hack and that is not definitive or well done. I just wanted to bump the discussion and give a better understanding of what I meant before. \n Up, any update? \n Yes, but do you think it would be actually possible? It looks like the code that is generated has an enforced structure... could you give me an hint on how you would change the code? \n Nice, let me know if you would love help to get it finished and if so, what kind of help! \n I didn't get how to test it. I tried the following in `github.com/go-swagger/cmd/swagger`\n\n```\n go build .\nmir:swagger raffo$ swagger generate server --help\nUsage:\n  swagger [OPTIONS] generate server [server-OPTIONS]\n\ngenerate all the files for a server application\n\nHelp Options:\n  -h, --help                 Show this help message\n\n[server command options]\n      -f, --spec=            the spec file to use (default: ./swagger.json)\n      -a, --api-package=     the package to save the operations (default: operations)\n      -m, --model-package=   the package to save the models (default: models)\n      -s, --server-package=  the package to save the server specific code (default: restapi)\n      -c, --client-package=  the package to save the client specific code (default: client)\n      -t, --target=          the base directory for generating the files (default: ./)\n      -T, --template-dir=    alternative template override directory\n      -A, --name=            the name of the application, defaults to a mangled value of info.title\n      -O, --operation=       specify an operation to include, repeat for multiple\n          --tags=            the tags to include, if not specified defaults to all\n      -P, --principal=       the model to use for the security principal\n          --default-scheme=  the default scheme for this API (default: http)\n      -M, --model=           specify a model to include, repeat for multiple\n          --skip-models      no models will be generated when this flag is specified\n          --skip-operations  no operations will be generated when this flag is specified\n          --skip-support     no supporting files will be generated when this flag is specified\n          --exclude-main     exclude main function, so just generate the library\n          --exclude-spec     don't embed the swagger specification\n          --with-context     handlers get a context as first arg\n          --dump-data        when present dumps the json for the template generator instead of generating files\n\nmir:swagger raffo$ grep -R \"config-file\" .\n./commands/generate/server.go:  ConfigFile    flags.Filename `long:\"config-file\" short:\"C\" description:\"configuration file to use for overriding template options\"`\n```\n\nAm I doing something wrong? \n\nThanks for your work! \n\nEDIT: I was using a wrongly compiled binary, this comment is outdated. \n @casualjim with this example config: \n\n```\nlayout:\n  application:\n    - name: configure\n      source: asset:serverConfigureapi\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"{{ .Name }}_client.go\"\n      skip_exists: true\n    - name: main\n      source: asset:serverMain\n      target: \"{{ joinFilePath .Target \\\"cmd\\\" (dasherize (pascalize .Name)) }}-server\"\n      file_name: \"main.go\"\n    - name: embedded_spec\n      source: asset:swaggerJsonEmbed\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"embedded_spec.go\"\n    - name: server\n      source: asset:serverServer\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"server.go\"\n    - name: builder\n      source: asset:serverBuilder\n      target: \"{{ joinFilePath .Target .ServerPackage .Package }}\"\n      file_name: \"{{ snakize (pascalize .Name) }}_api.go\"\n    - name: doc\n      source: asset:serverDoc\n      target: \"{{ joinFilePath .Target .ServerPackage }}\"\n      file_name: \"doc.go\"\n  models:\n    - name: definition\n      source: asset:model\n      target: \"{{ joinFilePath .Target .ModelPackage }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\n  operations:\n    - name: parameters\n      source: asset:serverParameter\n      target: \"{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_parameters.go\"\n    - name: responses\n      source: asset:serverResponses\n      target: \"{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}_responses.go\"\n    - name: handler\n      source: asset:serverOperation\n      target: \"{{ joinFilePath .Target .ServerPackage .APIPackage .Package  }}\"\n      file_name: \"{{ (snakize (pascalize .Name)) }}.go\"\n```\n\nit doesn't seeem to work and I don't get any meaningful log. Any idea of what could be wrong? Thanks again :-) \n  I have been unable to determine how to access the HTTP Status code of a response using the auto gen client..apologies if this is in the docs or sample code and I have just failed to find it.  \n @I'm getting quite a number of issues using the autogen client code, beginning to suspect it's early days for this piece and I should hand a roll a client for now.  Is this a fair comment?\n Operation spec:\n\n```\npost:\n  parameters:\n    -\n      in: body\n      required: true\n      name: client\n      schema:\n        $ref: \"#/definitions/client\"\n  responses:\n    200:\n      description: \"Create new client\"\n      schema:\n        $ref: \"#/definitions/client\"\n    401:\n      description: \"unauthorised\"\n    default:\n      description: \"generic error response\"\n      schema:\n        $ref: \"#/definitions/errorMessage\"\n  tags:\n    - clients\n```\n\nClient def:\n\n```\nproperties:\n  id:\n    format: int64\n    type: integer\n  name:\n    type: string\nrequired:\n  - id\n  - name\ntype: object\n```\n\nIntegration test code:\n\n```\nfunc TestCreateOneOk(t *testing.T) {\n\n    id := int64(0)\n\n    client := &models.Client{ID: &id, Name: SPtr(\"New Client\")}\n\n    response, err := Apiclient.Clients.PostClients(clients.NewPostClientsParams().WithClient(client)) //Returns (*PostClientsOk, error)\n\n    if err != nil {\n        t.Fatal(fmt.Sprintf(\"Error: %s\", err.Error()))\n    }\n\n    payloadJson, _ := json.Marshal(response.Payload)\n    errorJson, _ := json.Marshal(response.Error())\n\n    log.Print(string(payloadJson))\n    log.Print(string(errorJson))\n\n}\n```\n\nRequest / Response\n\n```\nPOST /clients HTTP/1.1\nUser-Agent: Go-http-client/1.1\nContent-Length: 29\nAccept: application/json\nContent-Type: application/json\nAccept-Encoding: gzip\nHost: localhost:4004\n\n{\"id\":0,\"name\":\"New Client\"}\n\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nVary: Origin\nDate: Wed, 27 Jul 2016 14:30:58 GMT\nContent-Length: 32\n\n{\"id\":1040,\"name\":\"New Client\"}\n```\n\nOutput from test:\n\n```\n2016/07/27 15:26:41 {\"id\":1039,\"name\":\"New Client\"}\n2016/07/27 15:26:41 \"[POST /clients][200] postClientsOK  \\u0026{ID:0xc82021e9a8 Name:0xc82021e9c0}\"\n```\n\nSo I have 2 questions; 1) as the Apiclient.Clients.PostClients(..) method returns *PostClientsOk how could it return the other types that are bound to/represent different HTTP status codes. 2) what is the purpose of the error string? \n That all makes sense now.  Thank you for your patience.\n  Feature: Create a swagger doc/ spec from just comments where the responses are defined using only swagger:model\n\nex:\n\n```\n// Person ...\n// swagger:model Person\ntype Person struct {\n    // Name of this person\n    Name string \n    // Username of this person\n    Username string\n    // Email for this person\n    Email string\n    // Height of this person in inches\n    Height int\n}\n\n// Get get this person from the database and return them to the user.\n// swagger:route GET /person/{id} people getPerson\n// \n// Get the person by id.\n// \n// Returns a person\n// \n// Consumes:\n// - application/json\n// \n// Produces:\n// - application/json\n// \n// Schemes: https\n// \n// Responses:\n//     200: body:Person\nfunc (p *Person) Get(r http.ResponseWriter, req *http.Request) {\n    // Some code\n}\n```\n\nwould create a swagger spec where the Response for endpoint /person/{id} is just a json payload of a Person.\n this exact example doesnt work for me. Person is simply not generated and definitions is empty. @casualjim erf, thanks alot!  ## Problem statement\n\nvalidate operation on the spec fails while the generate on the spec succeeds and has no issues.\n## Swagger specification\n\n``` yaml\nconsumes:\n- application/json\ndefinitions: \n  portmap:\n    type: object\n    properties:\n      id:\n        type: integer\n        format: int64\n        readonly: true\n      source:\n        type: string\n        minlength: 1\n      destination:\n        type: string\n      starttimestamp:\n        type: string\n        format: date-time\n      lastupdated:\n        type: string\n        format: date-time\n      done:\n        type: boolean\n        default: false\n  error:\n    type: object\n    required:\n      - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type: string\ninfo:\n  description: Nimbus proxy bridge port-foward nimbus serious log receiver\n  title: ProxyBridge Server\n  version: \"0.1\"\npaths: \n  /portmap:\n    post:\n      tags:\n        - portmap\n      responses:\n        201:\n          description: Created\n          schema:\n            $ref: \"#/definitions/portmap\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\n    get:\n      tags:\n        - portmap\n      responses:\n        200:\n          description: list of portmaps\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/portmap\"\n        default:\n          description: error\n          schema:\n          $ref: \"#/definitions/error\"\nproduces:\n- application/json\nschemes:\n- http\nswagger: \"2.0\"\n```\n## Steps to reproduce\n\n```\n$docker run --rm -it -v <the swagger spec>:/swagger.yml golang bash\n#go get -u github.com/go-swagger/go-swagger/cmd/swagger\n#swagger validate /swagger.yml\n```\n  ## Problem statement\n\nI'm running head of master, currently 3981236c3f6bd9eabb26f14e9d31b853d340405f\n\nNot sure if this is an issue or just a lack of understanding on my part.  I have a healthcheck method that returns a status 500 by default along with an errorMessage object defined in the model. However, the WithPayload method takes a GetHealthcheckDefaultBodyBody type.  Not such a big issue here as I can just create one of those, but where I need to return arrays of model types I'll end up writing a lot of boilerplate to map from the model types to the BodyBody types, E.G.\n\n``` go\nfunc ClientsGet(params clients.GetClientsParams) middleware.Responder {\n\n    results, err := repository.GetAllClients()\n\n    if err != nil {\n        return clients.NewGetClientsDefault(500).WithPayload(clients.GetClientsDefaultBodyBody{Message: sPtr(err.Error())})\n    }\n\n\n    return &clients.GetClientsOK{results} //does not compile as GetClientsOK accepts []*clients.GetClientsOKBodyBody not []*models.Client\n}\n```\n\nI noticed that the example code in the repo is different in this regard to my generated code: https://github.com/go-swagger/go-swagger/blob/3981236c3f6bd9eabb26f14e9d31b853d340405f/examples/tutorials/todo-list/server-complete/restapi/operations/todos/add_one_responses.go.  I was unable to generate code from the example spec here: https://github.com/go-swagger/go-swagger/blob/3981236c3f6bd9eabb26f14e9d31b853d340405f/examples/tutorials/todo-list/server-complete/swagger.yml\n\nMy Spec:\n\n``` json\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"M3 Intl Maas Service\",\n    \"version\": \"0.1.0\"\n  },\n  \"produces\": [\n    \"application/json\"\n  ],\n  \"consumes\": [\n    \"application/json\"\n  ],\n  \"schemes\": [\n    \"http\"\n  ],\n  \"definitions\": {\n    \"client\": {\n      \"properties\": {\n        \"id\": {\n          \"format\": \"int64\",\n          \"type\": \"integer\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"name\"\n      ],\n      \"type\": \"object\"\n    },\n    \"messageTeaser\": {\n      \"properties\": {\n        \"campaignId\": {\n          \"type\": \"string\"\n        },\n        \"clientName\": {\n          \"type\": \"string\"\n        },\n        \"footer\": {\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"type\": \"string\"\n        },\n        \"isNew\": {\n          \"type\": \"boolean\"\n        },\n        \"jobNumber\": {\n          \"type\": \"string\"\n        },\n        \"piLink\": {\n          \"type\": \"string\"\n        },\n        \"repId\": {\n          \"type\": \"string\"\n        },\n        \"summary\": {\n          \"type\": \"string\"\n        },\n        \"title\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"title\",\n        \"summary\",\n        \"isNew\",\n        \"footer\",\n        \"jobNumber\",\n        \"clientName\",\n        \"piLink\",\n        \"repId\",\n        \"campaignId\"\n      ],\n      \"type\": \"object\"\n    },\n    \"errorMessage\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"message\"\n      ],\n      \"properties\": {\n        \"message\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  },\n  \"paths\": {\n    \"/clients\": {\n      \"get\": {\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"required\": true,\n            \"name\": \"client_id\",\n            \"type\": \"integer\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"get client\",\n            \"schema\": {\n              \"items\": {\n                \"properties\": {\n                  \"id\": {\n                    \"format\": \"int64\",\n                    \"type\": \"integer\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"id\",\n                  \"name\"\n                ],\n                \"type\": \"object\"\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"unauthorised\"\n          },\n          \"404\": {\n            \"description\": \"client not found\"\n          },\n          \"default\": {\n            \"description\": \"generic error response\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"message\"\n              ],\n              \"properties\": {\n                \"message\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"clients\"\n        ]\n      },\n      \"put\": {\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"required\": true,\n            \"name\": \"client_id\",\n            \"type\": \"integer\"\n          },\n          {\n            \"in\": \"body\",\n            \"required\": true,\n            \"name\": \"client\",\n            \"schema\": {\n              \"properties\": {\n                \"id\": {\n                  \"format\": \"int64\",\n                  \"type\": \"integer\"\n                },\n                \"name\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"id\",\n                \"name\"\n              ],\n              \"type\": \"object\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"update client\",\n            \"schema\": {\n              \"items\": {\n                \"properties\": {\n                  \"id\": {\n                    \"format\": \"int64\",\n                    \"type\": \"integer\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"id\",\n                  \"name\"\n                ],\n                \"type\": \"object\"\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"unauthorised\"\n          },\n          \"404\": {\n            \"description\": \"client not found\"\n          },\n          \"default\": {\n            \"description\": \"generic error response\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"message\"\n              ],\n              \"properties\": {\n                \"message\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"clients\"\n        ]\n      },\n      \"delete\": {\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"required\": true,\n            \"name\": \"client_id\",\n            \"type\": \"integer\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"delete client\"\n          },\n          \"401\": {\n            \"description\": \"unauthorised\"\n          },\n          \"404\": {\n            \"description\": \"client not found\"\n          },\n          \"default\": {\n            \"description\": \"generic error response\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"message\"\n              ],\n              \"properties\": {\n                \"message\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/clients/{client_id}\": {\n      \"get\": {\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"required\": true,\n            \"name\": \"client_id\",\n            \"type\": \"integer\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"get client\",\n            \"schema\": {\n              \"items\": {\n                \"properties\": {\n                  \"id\": {\n                    \"format\": \"int64\",\n                    \"type\": \"integer\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"id\",\n                  \"name\"\n                ],\n                \"type\": \"object\"\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"unauthorised\"\n          },\n          \"404\": {\n            \"description\": \"client not found\"\n          },\n          \"default\": {\n            \"description\": \"generic error response\",\n            \"schema\": {\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"message\"\n                ],\n                \"properties\": {\n                  \"message\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"clients\"\n        ]\n      },\n      \"put\": {\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"required\": true,\n            \"name\": \"client_id\",\n            \"type\": \"integer\"\n          },\n          {\n            \"in\": \"body\",\n            \"required\": true,\n            \"name\": \"client\",\n            \"schema\": {\n              \"properties\": {\n                \"id\": {\n                  \"format\": \"int64\",\n                  \"type\": \"integer\"\n                },\n                \"name\": {\n                  \"type\": \"string\"\n                }\n              },\n              \"required\": [\n                \"id\",\n                \"name\"\n              ],\n              \"type\": \"object\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"update client\",\n            \"schema\": {\n              \"items\": {\n                \"properties\": {\n                  \"id\": {\n                    \"format\": \"int64\",\n                    \"type\": \"integer\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"id\",\n                  \"name\"\n                ],\n                \"type\": \"object\"\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"unauthorised\"\n          },\n          \"404\": {\n            \"description\": \"client not found\"\n          },\n          \"default\": {\n            \"description\": \"generic error response\",\n            \"schema\": {\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"message\"\n                ],\n                \"properties\": {\n                  \"message\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"clients\"\n        ]\n      },\n      \"delete\": {\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"required\": true,\n            \"name\": \"client_id\",\n            \"type\": \"integer\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"delete client\"\n          },\n          \"401\": {\n            \"description\": \"unauthorised\"\n          },\n          \"404\": {\n            \"description\": \"client not found\"\n          },\n          \"default\": {\n            \"description\": \"generic error response\",\n            \"schema\": {\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"message\"\n                ],\n                \"properties\": {\n                  \"message\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"/healthcheck\": {\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"confirm that the service is healthy\"\n          },\n          \"default\": {\n            \"description\": \"generic error response\",\n            \"schema\": {\n              \"type\": \"object\",\n              \"required\": [\n                \"message\"\n              ],\n              \"properties\": {\n                \"message\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        },\n        \"tags\": [\n          \"healthcheck\"\n        ]\n      }\n    },\n    \"/usermessagesummary/{community_id}/{user_id}/{lang_id}\": {\n      \"get\": {\n        \"parameters\": [\n          {\n            \"in\": \"path\",\n            \"required\": true,\n            \"name\": \"community_id\",\n            \"type\": \"string\"\n          },\n          {\n            \"in\": \"path\",\n            \"required\": true,\n            \"name\": \"user_id\",\n            \"type\": \"string\"\n          },\n          {\n            \"in\": \"path\",\n            \"required\": true,\n            \"name\": \"lang_id\",\n            \"type\": \"string\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Returns message summary according to criteria\",\n            \"schema\": {\n              \"items\": {\n                \"properties\": {\n                  \"campaignId\": {\n                    \"type\": \"string\"\n                  },\n                  \"clientName\": {\n                    \"type\": \"string\"\n                  },\n                  \"footer\": {\n                    \"type\": \"string\"\n                  },\n                  \"id\": {\n                    \"type\": \"string\"\n                  },\n                  \"isNew\": {\n                    \"type\": \"boolean\"\n                  },\n                  \"jobNumber\": {\n                    \"type\": \"string\"\n                  },\n                  \"piLink\": {\n                    \"type\": \"string\"\n                  },\n                  \"repId\": {\n                    \"type\": \"string\"\n                  },\n                  \"summary\": {\n                    \"type\": \"string\"\n                  },\n                  \"title\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\n                  \"id\",\n                  \"title\",\n                  \"summary\",\n                  \"isNew\",\n                  \"footer\",\n                  \"jobNumber\",\n                  \"clientName\",\n                  \"piLink\",\n                  \"repId\",\n                  \"campaignId\"\n                ],\n                \"type\": \"object\"\n              }\n            }\n          },\n          \"401\": {\n            \"description\": \"unauthorised\"\n          },\n          \"404\": {\n            \"description\": \"client not found\"\n          },\n          \"default\": {\n            \"description\": \"generic error response\",\n            \"schema\": {\n              \"items\": {\n                \"type\": \"object\",\n                \"required\": [\n                  \"message\"\n                ],\n                \"properties\": {\n                  \"message\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n```\n\nI also posted this on StackOverflow (creating a go-swagger tag in doing so) http://stackoverflow.com/questions/38478783/go-swagger-response-payloads-not-model-types\n Ah yes of course! I have split my spec in to separate files and I am reconstituting them using json-refs.  However, I had neglected to filter out relative refs from being resolved (--filter relative) hence the definition being repeated local to the response.  Thank you.  Great work BTW.\n  ## Problem statement\n\nGenerated resetapi/server.go file is missing \"github.com/go-openapi/swag\" import\n\ngo-swagger revision (installed from source) : 3981236c3f6bd9eabb26f14e9d31b853d340405f\n## Swagger specification\n\n2.0\n## Steps to reproduce\n\ngenerate server skeleton code\n  ## Problem statement\n\nGenerated operations/[name]_service_api.go file is missing \"github.com/go-openapi/swag\" import\n\ngo-swagger revision (installed from source) : 3981236c3f6bd9eabb26f14e9d31b853d340405f\n## Swagger specification\n\n2.0\n## Steps to reproduce\n\ngenerate server skeleton code\n  ## Problem statement\n\nGenerated get_[name]_parameters.go is missing \"github.com/go-openapi/runtime/middleware\" import.\n\ngo-swagger revision (installed from source) : 3981236c3f6bd9eabb26f14e9d31b853d340405f \n## Swagger specification\n\n2.0\n## Steps to reproduce\n\ngenerate server skeleton code\n @casualjim \nDid that but the \"github.com/go-openapi/swag\"  is still missing from import\n i encountered the same issue and after regenerating it did add the correct imports..  but it is a little bit confusing if you generate for a fresh project and then vendor and then you have regenerate for it to add those imports.\n maybe a parameter to do that introspection or else just always add the imports so that then when you run glide (or whatever) it will just do the right thing.  Seems like that would be majority case for people just starting off?\n I have the same problem: \"github.com/go-openapi/swag\" is still missing SOMETIME !\r\nI have start a number of `swagger generate server` commands and SOMETIME the import is here, SOMETIME is not.\r\nThe import `github.com/go-openapi/runtime` is in my vendor directory\r\n\r\nThe code i'm using to test (using swagger version 0.8.0 (d1a0b6c1)): \r\n```bash\r\nfor i in $(seq 1 20); do\r\n    echo -n \"Test $i:\"\r\n    swagger generate server &>/dev/null\r\n    grep -q 'github.com/go-openapi/swag' models/application_set_report.go && echo \"Found\" || echo \"NOT found\"\r\ndone\r\n```\r\nResult:\r\n```\r\nTest 1:Found\r\nTest 2:Found\r\nTest 3:Found\r\nTest 4:Found\r\nTest 5:NOT found\r\nTest 6:Found\r\nTest 7:Found\r\nTest 8:Found\r\nTest 9:NOT found\r\nTest 10:Found\r\nTest 11:Found\r\nTest 12:NOT found\r\nTest 13:NOT found\r\nTest 14:Found\r\nTest 15:Found\r\nTest 16:Found\r\nTest 17:Found\r\nTest 18:Found\r\nTest 19:Found\r\nTest 20:Found\r\n```\r\nPerhaps it's a bug with `go-imports` that didn't see that the imports are in the vendor directory and so doesn't add the import line ? Ok i found the bug ! \r\nIt's in go-imports. When go-imports scan the directories if it found an error (like a directory that it can't read) it will stop the scan and so no import is found and the lines not added in the import section.\r\n\r\nIt easy to reproduce: create a directory that can't be read by the current user in the vendor directory:\r\n```bash\r\nsudo mkdir vendor/a\r\nsudo chmod 0 vendor/a\r\n```\r\nand try to generate the code with `swagger` and no import will be found.\r\n The best to resolve such error, is perhaps to add:\r\ngithub.com/go-openapi/runtime/middleware\r\ngithub.com/go-openapi/swag\r\nby default in the templates files where they can be used.\r\nSo go-imports, will remove this imports if not used in the code, instead of adding missing import. The solution \"fix\" also the problem when vendor directory have missing pkg: the compilation will fail reporting that the pkg is missing.    There is a need to run a server in HTTP mode only behind nginx that adds TLS layer.\nBecause of that, the provided schema contains HTTP mode only, however server is HTTPS only. That results in the situation that clients like 'bravado' can't not work with this server.\n\nSo, It would be good If user could just define which schemas (http or https) to provide in a swagger spec.\n\nps. I will add all needed changes some time soon.\n @vburenin Anything I can do to help?\n I haven't invest any time into this yet. Maybe soon.\n Using --force-schema should override whatever default is.\n\n--force-schema=http -> [\"http\"]\n--force-schema=https -> [\"https\"]\n--force-schema=http --force-schema=https -> [\"http\", \"https\"]\n\nI am also thinking that server should not really have a different code to run HTTP and HTTPS server, both modes should be optional for any schema definitions.\n\nLet say:\n--http - enables HTTP\n--https - enables HTTPS requiring TLS key/cert/ca.\n\n@casualjim Do you have any opinion around it?\n  Implemented in https://github.com/go-swagger/go-swagger/pull/612\n\nPanic! It should break all scripts that are running a swagger application.\n  the generated client sends an empty Accept: header.\n\nit should probably either send Accept: application/json , or nothing.\n @casualjim nope. thanks and sorry for the noise.\n  ## Problem statement\n\nIf a swagger doc includes multiple success responses, the client generated results in a scenario that causes a panic due to attempting to convert betwen invalid generated structs. \n\nThe generated client creates separate structs for types of responses, this causes a conflict when multiple successes are possible, for instance for a AddWidget endpoint that returns either a 200 or 201 response code. \nThe client is generated with two structs;\nAddWidgetOK\nAddWidgetCreated\n\nReadResponse of the generated responses template will return one of those two objects depending on the response code.\nHowever in the the AddWidget method in the client template, it attempts to return only (The first?) success type, AddWidgetOK. If a 201 created response comes back then a panic occurs. \n## Swagger specification\n\n```\n\"responses\" : {\n  \"200\" : {\n    \"description\" : \"(OK): Updated\",\n    \"schema\" : {\n      \"$ref\" : \"#/definitions/Widget\"\n    }\n  },\n  \"201\" : {\n    \"description\" : \"(Created): Added\",\n    \"schema\" : {\n      \"$ref\" : \"#/definitions/Widget\"\n    }\n  },\n  \"404\" : {\n    \"description\" : \"(Not found): Widget not found\"\n  }\n}\n\n```\n## Steps to reproduce\n\nGenerate a client froma swagger def which has more than one success response code. \nMake a call which returns a success code other than what the client is generated with.\n I have a working fix at the moment for my needs, however it creates a new *Response struct for returning from the calls. Under that struct are then the *OK or *Created structs.  ie;\n\n```\n    type AddGroupResponse struct {\n        AddGroupOK *AddGroupOK //200 response\n        AddGroupCreated *AddGroupCreated //201 response\n        AddGroupNotFound *AddGroupNotFound //404 response\n    }\n```\n\nThe problem with this (in terms of making it a PR as is) is that even for single (success) responses it creates the Response struct, so that would break any existing generated client. \n\n```\ntype GetGroupResponse struct {\n    GetGroupOK *GetGroupOK //200 response\n    GetGroupNotFound *GetGroupNotFound //404 response\n}\n```\n\nDoes the Response struct make sense? is there an alternative? \n- Should always returning the Response struct instead of a OK/Created be an option? (I personally like this, as any changes to the API/swagger doc may be less impactful) \n- Should the fields under the struct be prefixed with the method name similar to the models? Or just use the friendly names of the http status codes ie;\n\n```\n    type AddGroupResponse struct {\n        OK *AddGroupOK //200 response\n        Created *AddGroupCreated //201 response\n        NotFound *AddGroupNotFound //404 response\n    }\n```\n\nSince AddGroupOK and AddGroupCreated reall yjust have Payload under them (are there other scnearios where there are more fields?) ie;\n\n```\ntype AddGroupCreated struct {\n    Payload *models.GroupDetails\n}\ntype AddGroupOK struct {\n    Payload *models.GroupDetails\n}\n```\n\nI'm inclined to target a struct of;\n\n```\n    type AddGroupResponse struct {\n        OK *models.GroupDetails //200 response\n        Created *models.GroupDetails //201 response\n        NotFound *models.EmptyPayload //404 response\n        resultCode int\n    }\n    func (r *AddGroupResponse) Code() int {\n          return r.resultCode\n    }\n```\n\n?\n  prototype resolve #582\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"34\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/go-swagger/go-swagger/583)\n\n<!-- Reviewable:end -->\n not yet, just moved focus to other emergency on work :S\n\nIvan Porto Carrero notifications@github.com\u4e8e2016\u5e747\u670822\u65e5\u5468\u4e94 \u4e0a\u53481:11\u5199\u9053\uff1a\n\n> are you done with this?\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/go-swagger/go-swagger/pull/583#issuecomment-234320147,\n> or mute the thread\n> https://github.com/notifications/unsubscribe-auth/AADwsgsGNkL5jS6PD-sb5u0jjQ1sDhJJks5qX6hdgaJpZM4JCApZ\n> .\n Hi @flier how is your situation at the moment. Thank you very much for your work so far in this PR, would it be a lot of work to finish this of? What would you like to see happening with this PR? :) Thanks again, your time and effort is very well appreciated!  ## Problem statement\n\nAs you know, [gRPC](http://www.grpc.io) provides more powerful and faster API mechanism base on HTTP/2.0 with protobuf encoding than HTTP/HTTPS with JSON/XML encoding.\n\nI'm working on a faster prototype to implement gRPC backend base on go-swagger, it could works to generate probobuf schema and server side code.\n\nIf you think it is ok, we may put more efforts on it.\n can we have a TODO list about gRPC backend?\n- [x] generate protobuf file base on schema\n- [x] generate gRPC service server stub\n- [x] generate gRPC service client stub\n- [x] validate parameters base on schema\n- [x] use TLS based secure connection in gRPC\n- [ ] support stream based parameter\n- [ ] support middleware\n- [ ] export generated .proto file\n- [ ] ~~migrate templates to use go 1.5 or earlier syntax~~\n- [ ] add/update gRPC examples\n- [ ] performance test tool/reports\n Did this ever go anywhere?  A few of the services we're building will suffer from a large penalty from the serialization costs of JSON versus something like Protobuf so we've been considering gRPC.  We'd like to continue to define the APIs via Swagger and translate.  There are some other initiatives to take Protobufs and generate Swagger which is also an option, but remaining with go-swagger would be the most preferable. Also curious to know what the status is, would like to support Protobuf too.  ## Problem statement\n\nMax int64 and uint64 seems to be wrong even if correct in the json schema definition\n\n```\ngo test -race ./...\n# github.com/opencontainers/image-spec/specsgo\nspecsgo/int64_validator.go:17: constant -9223372036854776000 overflows int64\nspecsgo/int64_validator.go:21: constant 9223372036854776000 overflows int64\nspecsgo/uint64_validator.go:21: constant 18446744073709552000 overflows int64\n?       github.com/opencontainers/image-spec/cmd/oci-image-tool [no test files]\n?       github.com/opencontainers/image-spec/image  [no test files]\nok      github.com/opencontainers/image-spec/schema 1.139s\nMakefile:91: recipe for target 'test' failed\nmake: *** [test] Error 2\n```\n\nThe schema def is:\n\n```\n\"int64\": {                                                                  \n 20       \"type\": \"integer\",                                                        \n 21       \"minimum\": -9223372036854775808,                                          \n 22       \"maximum\": 9223372036854775807                                            \n 23     },\n```\n\nand\n\n```\n 39     \"uint64\": {                                                                 \n 40       \"type\": \"integer\",                                                        \n 41       \"minimum\": 0,                                                             \n 42       \"maximum\": 18446744073709551615                                           \n 43     },\n```\n## Swagger specification\n## Steps to reproduce\n What should we do with this one @casualjim ?  ## Problem statement\n\nthe `github.com/go-openapi/swag` import is missing in validation files which need it.\n\n```\ngo test -race ./...\n# github.com/opencontainers/image-spec/specsgo\nspecsgo/array_of_hooks_validator.go:18: undefined: swag in swag.IsZero\nspecsgo/id_mapping_validator.go:39: undefined: swag in swag.IsZero\nspecsgo/id_mapping_validator.go:52: undefined: swag in swag.IsZero\nspecsgo/id_mapping_validator.go:65: undefined: swag in swag.IsZero\n```\n\nLooking at those files, the import is missing.\nThe command I used:\n\n```\nswagger generate model -f schema/defs.json --skip-struct -m specsgo\n```\n\nin the `opencontainers/image-spec` repository. You can see there are some usages of `swag\\.IsZero` but the import is missing\n## Swagger specification\n## Steps to reproduce\n I can't reproduce it anymore - not sure what's happened\n I see thx I think I can close this\n I can reproduce this every time by just running goswagger in a container. I used the following command: let me know if I'm doing something wrong.\n\n```\ndocker run --rm -e GOPATH=/go -v /home/me/project:/go/src/github.com/org/project -w /go/src/github.com/org/project -u 1000:1000 quay.io/goswagger/swagger:0.6.0 generate client -f swagger2.json -t pkg/api-client\n```\n\nUpdate: looks like the import is missing only in the models directory. Running goimports on every file in that directory manually fixes it.\n I'm just running the docker image. It doesn't have access to what's on my system.\n It works! Thanks!\n  ## Problem statement\n\nif I generate the structs into `./specs-go` and validations in `./specs-go/validation` then types in the validation directory aren't referencing types in specs-go and I get not declared errors\n## Swagger specification\n## Steps to reproduce\n or put it another way - there could be a way to name the validation only files with a `_validation.go` suffix, does it work? but this way I can't have a validation only pkg\n Thanks a lot! \n Can we leave this  open for the pkg work which could be done in the future? \n  We would like to propose exposing the server handler via a getter so that we can use the handler in test suites. See below for an example use case:\n\n``` go\npackage apitests\n\nimport (\n    \"io\"\n    \"log\"\n    \"net/http/httptest\"\n\n    \"github.com/go-openapi/loads\"\n    \"github.com/xiwenc/someService/restapi\"\n    \"github.com/xiwenc/someService/restapi/operations\"\n)\n\nvar testserver *httptest.Server\n\nfunc setup() {\n    swaggerSpec, err := loads.Analyzed(restapi.SwaggerJSON, \"\")\n    if err != nil {\n        log.Fatalln(err)\n    }\n\n    api := operations.ExampleServiceAPI(swaggerSpec)\n    server := restapi.NewServer(api)\n    server.ConfigureAPI()\n    testserver = httptest.NewServer(server.GetHandler()) // The proposed change would enable easier usage of the handler in tests\n}\n\nfunc teardown() {\n    testserver.Close()\n}\n\nfunc TestSample(t *testing.T) {\n    setup()\n    // do some requests to testserver.URL\n    // assert.Equal(t, 201, response.StatusCode, \"Great success\")\n    teardown()\n}\n```\n  Within the `server-complete` example code, show how someone would use the facilities for adding command line flags.\n\nCloses #572 \n\nSigned-off-by: Nelson Carpentier nelz9999@gmail.com\n    @casualjim ty\n  Any suggestions on how to test this? Seems like the test in scan/classifier_test.go are similar, maybe add model with embedded pointer in fixtures/goparsing/classification/models/ ? Didn't find an example that would test whether the JSON model  is correct (e.g. we want the embedded type to be there as optional).\n\nThe committed change produces correct  swagger, as far as I can tell, i.e. the members of embedded type are all there and optional.\n  ## Problem statement\n\nFollowing code:\n\n``` Go\n type A struct {\n        *B\n}\n```\n\ncauses error (regardless of type of B):\n\n```\nunable to resolve embedded struct for: &{991 B}\n```\n\nSeems like the problem is that the scan/schema.go parseEmbeddedType function does not support StarExpr.\n  - added support for byte, uintptr\n- added error for complex64, complex128, there's no default JSON\n  marshaller\n- changed rune from string to int32 according to Go docs\n Makes sense, adding for the valid types that we missed.\n\nNot sure how to add test for the complex\\* types since it's a negative test, meaning parsing should fail. Would it make sense to add a test to classifier_test.go, something similar to other negative tests like TestDuplicateAnnotations?\n Updated pull request, added missing positive unit tests (byte, uintptr).\n  ## Problem statement\n\nIt's my first experience using go-swagger in a project. I read tutorials and wrote some simple code.\nI have the following structure of the project (example)\n\n**main.go**\n\n``` go\n//go:generate swagger generate spec\n\npackage main\n\nimport (\n    \"fmt\"\n    \"stackexchange/example/models\"\n)\n\nfunc main() {\n    user := &models.User{10, \"Martin\"}\n    fmt.Println(*user)\n}\n```\n\n**doc.go**\n\n``` go\n//     Schemes: http, https\n//     Host: localhost\n//     BasePath: /v1\n//     Version: 0.0.1\n//     License: MIT http://opensource.org/licenses/MIT\n//\n//     Consumes:\n//     - application/json\n//     - application/xml\n//\n//     Produces:\n//     - application/json\n//     - application/xml\n//\n//\n// swagger:meta\npackage main\n```\n\n**user.go**\n\n``` go\n// Copyright 2015 go-swagger maintainers\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\npackage models\n\n// User represents the user for this application\n//\n// A user is the security principal for this aplication.\n// It's also used as one of main axis for reporting.\n//\n// A user can have friends with whom they can share what they like.\n//\n// swagger:model\ntype User struct {\n    // the id for this user\n    //\n    // required: true\n    // min: 1\n    ID int64 `json:\"id\"`\n\n    // the name for this user\n    // required: true\n    // min length: 3\n    Name string `json:\"name\"`\n}\n```\n## Steps to reproduce\n\nI run `go generate` and get:\n\n``` yml\nconsumes:\n  - application/json\n  - application/xml\nproduces:\n  - application/json\n  - application/xml\nschemes:\n  - http\n  - https\nswagger: '2.0'\ninfo:\n  license:\n    name: MIT\n    url: 'http://opensource.org/licenses/MIT'\n  version: 0.0.1\nhost: localhost\nbasePath: /v1\npaths: {}\ndefinitions: {}\n```\n\nBut don't understand how to deal with model annotation.\n @casualjim Thanks for quick response, now it's ok. I'll close the issue.\n  ## Problem statement\n\nscan/scanner.go function swaggerSchemaForType maps primitive Go types to swagger type/format. It's missing some of Go builtin types.\n\nError generated when unsupported type is used:\n\n`package reflect, error is: unknown primitive \"uintptr\"`\n## Steps to reproduce\n\nOne of the missing types is uintptr which is used in e.g. Go reflect package, error would be triggered by following example.\n\nExample code that triggers the error:\n\n``` go\nimport \"reflect\"\n// User\n//\n// Use documentation here...\n//\n// swagger:model\ntype User struct {\n    // reflect type for testing reflect\n    //\n    // required: false\n    Rt reflect.Type `json:\"rt\"`\n    // the id for this user\n    //\n    // required: true\n    Id int64 `json:\"id\"`\n    Name string `json:\"name\"`\n}\n```\n\nSwagger invocation:\n\n``` bash\n$ swagger generate spec -m\npackage reflect, error is: unknown primitive \"uintptr\"\n```\n\nSeems like a good solution would be to support all Go builtin types as listed at [https://golang.org/pkg/builtin/](https://golang.org/pkg/builtin/) (except for the *Type types which are there for documentation purposes only).\n\nI am not sure what the swagger type/format should be for the missing Go builtin types, seems like some of them are not trivial to handle (e.g. byte, complex).\n After further investigation we figured out that based on Go builtin doc https://golang.org/pkg/builtin/ the following changes in swaggerSchemaForType might make sense:\n- ADD byte: prop.Typed(\"integer\", \"uint8\")\n- ADD complex128, complex64 should cause error, no default JSON marshaller\n- CHANGE error\n  - OLD: prop.Typed(\"string\", \"\")\n  - NEW: error, it's an interface with no default JSON marshaller\n- CHANGE rune\n  - OLD: prop.Typed(\"string\", \"\")\n  - NEW: prop.Typed(\"integer\", \"int32\"), doc says rune is alias for int32, it's encoded as a number\n- ADD uintptr: prop.Typed(\"integer\", \"uint64\")\n\nNote about the error: some implementations of error interface might be JSON encoded as a string however it seems to be dangerous to assume that it's always the case, e.g. errors.New creates error that is encoded as JSON empty object {}.\n\nIf anybody wants to play with this https://play.golang.org/p/4l2AKRz4LO demostrates how Go builtin types are encoded to JSON.\n\nPlease let me know what you think about these suggestions.\n Can join slack team, which one?\n\nError - yes, that's tricky, string makes sense lot of times. In general it's the same problem as other objects with JSON marshaller. They all show up as object in swagger model but might be actually something else in JSON representation (which is the opne that is relevant to Rest API). E.g. using guregu null makes swagger docs misleading (that was another issue I planned to file, how to deal with these types of objects)\n While this was fixed in code, the specification document was not updated to reflect that. Could someone do so?\r\n\r\nhttp://swagger.io/specification/ - does not list unsigned types (uint32, uint64, complex128, etc.) I see - sorry, I'm coming in to this as an outsider :) I'm working on a project that uses Swagger (it is not Golang based) and uses both the int64 and uint64 types. I came to the spec to try and verify that uint64 was a valid type, which per the spec I found, is not. It's just confusing, I am trying to find a definitive list of types that are valid within the Swagger IDL, or documentation of mapping those to their individual languages/implementations.\r\n\r\nThanks, and sorry if this isn't exactly the right venue for this conversation!  I've noticed that there is very little documentation on how to generate swagger files from annotations.\nIs this really all there is http://goswagger.io/generate/spec/?\n\nHow about some code examples that show annotations being used?\n While I agree with the project vs. product sentiment, it's difficult to help document something I don't understand. \ud83d\ude15 \r\n\r\nI have `swagger generate` working with routes, but I'm having trouble defining models and responses and link it all together for an existing code base. @nathany the latest documentation for the code on master can be found here: https://github.com/go-swagger/go-swagger/tree/master/docs/generate/spec\r\n\r\nImprovement of documentation is always a good request. You are in a unique position however as you are a newcomer and thus have the perspective that is perfectly fit to help with the improvement of documentation.\r\n\r\nCould you please add questions here that are not answered by the documentation. Also any suggestions on what according to you is missing, is always more then welcome :) @GlenDC Thanks for the link. I see swagger:operation is documented there but not yet on https://goswagger.io.\r\n\r\nRight now I'm having some trouble getting the `Responses:` section working for `swagger:router`, including some routes that have just a status code with no other response. While searching around the code, I also saw `description:` for the route responses. There seems to be some inconsistency between what's documented and the examples lying around, which makes me less certain why validation is failing (also #859).\r\n\r\nWhat I think would help the most is a tutorial that walks through generating swagger.json from code annotations, assuming someone is coming from an existing code base (even if it were a to do app). I've decided to write swagger.yml instead of using the code annotations for now. It's going well. @nathany yes that's the recommended and more sane approach. Also saves you tons of work. Also in the end writing annotations doesn't save that much work compared to writing the spec, as you end up writing most of the stuff anyhow.\r\n\r\nNone the less, does not mean that annotations should not be well documented. Your tutorial suggestion is definitely a good idea.\r\n\r\nCould you please be a bit more clear about the other stuff? Please be as clear as possible with the questions and to what they relate. This way we can take it into account when improving the documentation. Regarding the other questions, in the `swagger.yml` I just write something like this for a route:\r\n\r\n```\r\nresponses:\r\n  201:\r\n    description: Created\r\n  400:\r\n    description: Bad request\r\n    schema:\r\n      $ref: \"#/definitions/error\"\r\n  401:\r\n    description: Unauthorized\r\n  500:\r\n    description: Unexpected error\r\n    schema:\r\n      $ref: \"#/definitions/error\"\r\n```\r\n\r\nBut I was having trouble getting the equivalent to work as code annotations. Perhaps I just wasn't formatting it correctly.  ## Problem statement\n\nuse swagger editor will get errors\n## Swagger specification\n\n```\nswagger: '2.0'\ninfo:\n  version: 0.1.0\n  title: Simple To Do List API\nsecurityDefinitions:\n  key:\n    type: apiKey\n    in: header\n    name: x-petstore-token\nsecurity:\n  - key: []\nconsumes:\n  - application/io.swagger.examples.todo-list.v1+json\nproduces:\n  - application/io.swagger.examples.todo-list.v1+json\nschemes:\n  - http\n  - https\nx-schemes:\n  - unix\npaths:\n  /:\n    get:\n      tags: [\"todos\"]\n      operationId: find\n      parameters:\n        - name: limit\n          in: formData\n          type: integer\n          format: int32\n          required: true\n          allowEmptyValue: true\n        - name: \"X-Rate-Limit\"\n          in: header\n          type: integer\n          format: int32\n          required: true\n        - name: tags\n          in: formData\n          type: array\n          collectionFormat: multi\n          allowEmptyValue: true\n          items:\n            type: string\n            format: int32\n            required: true\n          required: true\n      responses:\n        '200':\n          description: OK\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/item\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\n    post:\n      tags: [\"todos\"]\n      operationId: addOne\n      parameters:\n        - name: body\n          in: body\n          schema:\n            $ref: \"#/definitions/item\"\n      responses:\n        '201':\n          description: Created\n          schema:\n            $ref: \"#/definitions/item\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\n  /{id}:\n    parameters:\n      - type: string\n        name: id\n        in: path\n        required: true\n    put:\n      tags: [\"todos\"]\n      operationId: updateOne\n      parameters:\n        - name: body\n          in: body\n          schema:\n            $ref: \"#/definitions/item\"\n      responses:\n        '200':\n          description: OK\n          schema:\n            $ref: \"#/definitions/item\"\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\n    delete:\n      tags: [\"todos\"]\n      operationId: destroyOne\n      responses:\n        '204':\n          description: Deleted\n        default:\n          description: error\n          schema:\n            $ref: \"#/definitions/error\"\ndefinitions:\n  item:\n    type: object\n    required:\n      - description\n    properties:\n      id:\n        type: integer\n        format: int64\n        readOnly: true\n      description:\n        type: string\n        minLength: 1\n      completed:\n        type: boolean\n  error:\n    type: object\n    required:\n      - message\n    properties:\n      code:\n        type: integer\n        format: int64\n      message:\n        type: string\n```\n## Steps to reproduce\n\nerror:\n\u2716 Swagger Error\nNot a valid parameter definition\nJump to line 37\nDetails\n Object\n\nthanks\n OK thanks.\n  ## Problem statement\n\nI've installed go-swagger using brew (first time), and then faced many issues with package renaming, as the generated code had many packages missing. Having gone through 'migration' section, I've changed it using a script, but still was having issues with things like spec.Document and spec.SecurityScheme being moved around. As these files are auto-generated, seemed like too much of an overhead to change them each time.\n\nDecided to uninstall and tried to re-install from sources, but now the 'swagger' alias is gone. How do I add it?\n\nWhat am I doing wrong in general? Just seems like a simple example in http://goswagger.io/tutorial/todo-list/ doesn't work no matter what I try\n\n```\n$ swagger generate server -A TodoList -f ./swagger.yml \n2016/06/03 13:40:36 building a plan for generation\n2016/06/03 13:40:36 planning definitions\n2016/06/03 13:40:36 planning operations\n2016/06/03 13:40:36 grouping operations into packages\n2016/06/03 13:40:36 planning meta data and facades\n2016/06/03 13:40:36 rendering 2 models\n2016/06/03 13:40:36 rendered model template: error\n2016/06/03 13:40:36 rendered model template: item\n2016/06/03 13:40:36 rendered handler template: todos.AddOne\n2016/06/03 13:40:36 generated handler todos.AddOne\n2016/06/03 13:40:36 rendered parameters template: todos.AddOneParameters\n2016/06/03 13:40:37 generated parameters todos.AddOneParameters\n2016/06/03 13:40:37 rendered responses template: todos.AddOneResponses\n2016/06/03 13:40:37 generated responses todos.AddOneResponses\n2016/06/03 13:40:37 rendered handler template: todos.DestroyOne\n2016/06/03 13:40:37 generated handler todos.DestroyOne\n2016/06/03 13:40:37 rendered parameters template: todos.DestroyOneParameters\n2016/06/03 13:40:37 generated parameters todos.DestroyOneParameters\n2016/06/03 13:40:37 rendered responses template: todos.DestroyOneResponses\n2016/06/03 13:40:37 generated responses todos.DestroyOneResponses\n2016/06/03 13:40:37 rendered handler template: todos.Find\n2016/06/03 13:40:37 generated handler todos.Find\n2016/06/03 13:40:37 rendered parameters template: todos.FindParameters\n2016/06/03 13:40:37 generated parameters todos.FindParameters\n2016/06/03 13:40:37 rendered responses template: todos.FindResponses\n2016/06/03 13:40:37 generated responses todos.FindResponses\n2016/06/03 13:40:37 rendered handler template: todos.UpdateOne\n2016/06/03 13:40:37 generated handler todos.UpdateOne\n2016/06/03 13:40:37 rendered parameters template: todos.UpdateOneParameters\n2016/06/03 13:40:37 generated parameters todos.UpdateOneParameters\n2016/06/03 13:40:37 rendered responses template: todos.UpdateOneResponses\n2016/06/03 13:40:37 generated responses todos.UpdateOneResponses\n2016/06/03 13:40:37 rendered embedded Swagger JSON template: restapi.TodoList\n2016/06/03 13:40:37 rendered builder template: operations.TodoList\n2016/06/03 13:40:37 rendered server template: restapi.Server\n2016/06/03 13:40:37 rendered configure api template: operations.ConfigureTodoList\n2016/06/03 13:40:37 rendered doc template: operations.TodoList\n2016/06/03 13:40:37 rendered main template: server.TodoList\n\n$ find .\n.\n./cmd\n./cmd/todo-list-server\n./cmd/todo-list-server/main.go\n./models\n./models/error.go\n./models/item.go\n./restapi\n./restapi/configure_todo_list.go\n./restapi/doc.go\n./restapi/embedded_spec.go\n./restapi/operations\n./restapi/operations/todo_list_api.go\n./restapi/operations/todos\n./restapi/operations/todos/add_one.go\n./restapi/operations/todos/add_one_parameters.go\n./restapi/operations/todos/add_one_responses.go\n./restapi/operations/todos/destroy_one.go\n./restapi/operations/todos/destroy_one_parameters.go\n./restapi/operations/todos/destroy_one_responses.go\n./restapi/operations/todos/find.go\n./restapi/operations/todos/find_parameters.go\n./restapi/operations/todos/find_responses.go\n./restapi/operations/todos/update_one.go\n./restapi/operations/todos/update_one_parameters.go\n./restapi/operations/todos/update_one_responses.go\n./restapi/server.go\n./swagger.yml\n\n$ go run ./cmd/todo-list-server/main.go\nmodels/error.go:9:2: cannot find package \"github.com/go-swagger/go-swagger/errors\" in any of:\n        /usr/local/go/src/github.com/go-swagger/go-swagger/errors (from $GOROOT)\n        /Users/anton/go/src/github.com/go-swagger/go-swagger/errors (from $GOPATH)\nrestapi/operations/todos/add_one_responses.go:9:2: cannot find package \"github.com/go-swagger/go-swagger/httpkit\" in any of:\n        /usr/local/go/src/github.com/go-swagger/go-swagger/httpkit (from $GOROOT)\n        /Users/anton/go/src/github.com/go-swagger/go-swagger/httpkit (from $GOPATH)\nrestapi/operations/todos/add_one.go:9:2: cannot find package \"github.com/go-swagger/go-swagger/httpkit/middleware\" in any of:\n        /usr/local/go/src/github.com/go-swagger/go-swagger/httpkit/middleware (from $GOROOT)\n        /Users/anton/go/src/github.com/go-swagger/go-swagger/httpkit/middleware (from $GOPATH)\nrestapi/operations/todo_list_api.go:14:2: cannot find package \"github.com/go-swagger/go-swagger/httpkit/security\" in any of:\n        /usr/local/go/src/github.com/go-swagger/go-swagger/httpkit/security (from $GOROOT)\n        /Users/anton/go/src/github.com/go-swagger/go-swagger/httpkit/security (from $GOPATH)\nmodels/error.go:10:2: cannot find package \"github.com/go-swagger/go-swagger/httpkit/validate\" in any of:\n        /usr/local/go/src/github.com/go-swagger/go-swagger/httpkit/validate (from $GOROOT)\n        /Users/anton/go/src/github.com/go-swagger/go-swagger/httpkit/validate (from $GOPATH)\nrestapi/operations/todo_list_api.go:15:2: cannot find package \"github.com/go-swagger/go-swagger/spec\" in any of:\n        /usr/local/go/src/github.com/go-swagger/go-swagger/spec (from $GOROOT)\n        /Users/anton/go/src/github.com/go-swagger/go-swagger/spec (from $GOPATH)\nmodels/error.go:7:2: cannot find package \"github.com/go-swagger/go-swagger/strfmt\" in any of:\n        /usr/local/go/src/github.com/go-swagger/go-swagger/strfmt (from $GOROOT)\n        /Users/anton/go/src/github.com/go-swagger/go-swagger/strfmt (from $GOPATH)\nrestapi/operations/todos/find_parameters.go:14:2: cannot find package \"github.com/go-swagger/go-swagger/swag\" in any of:\n        /usr/local/go/src/github.com/go-swagger/go-swagger/swag (from $GOROOT)\n        /Users/anton/go/src/github.com/go-swagger/go-swagger/swag (from $GOPATH)\n```\n\nAfter replacing paths, still:\n\n```\n$ go run ./cmd/todo-list-server/main.go\nrestapi/operations/todo_list_api.go:37: undefined: spec.Document\n```\n You are running very old version of go-swagger, please consider updating it. Most of those packages that you see are moved to go-openapi relatively long time ago.\n More than happy to do it - but how? Brew seems to install an old one. The github version doesn't create the alias for the 'swagger' command to run the generator.\n Just install swagger from sources: go get -u github.com/go-swagger/go-swagger/cmd/swagger\n\nanyway, you will still need to pull all dependencies.\n Yes, I've done that, how do I get swagger in command line? Symlink?\n your binary is installed into GOBIN. So, just add appropriate path into your PATH.\n Thank a lot, it's all working now!\n\nPerhaps you should kill the brew version - it only confuses things.\n I'm digging dead bodies here - I ran into the same problem as @aroslov irw \n`undefined: spec.Document`\n\nI've installed swagger from sources, pulled dependencies and did the proper path replacements. \n`swagger version` returns **0.5.0**\n\nI've looked a bit into the **spec** package, there's no Document type - hence the error, somewhere I guess I'm way off with code versions!\n\nAnything I may still be overlooking here? Thanks.\n Thanks, just got my swagger server up and running. \n  ## Problem statement\n\nThe generated handler function for a request without parameters does not allow one to access the original HTTP request because it does not have a `params` object in the signature. For the swagger snippet below I see the following handler being generated in the `configure_whatever.go`:\n\n```\napi.HealthGetHealthHandler = health.GetHealthHandlerFunc(func() middleware.Responder {\n  return middleware.NotImplemented(\"operation health.GetHealth has not yet been implemented\")\n})\n```\n\nThere is no argument in the signature that allows me to access the original HTTP request to, for example, read an HTTP header. \n## Swagger specification\n\n```\nswagger: '2.0'\ninfo:\n  title: Swagger issue\n  description: foobar\n  version: \"1.0.0\"\nhost: example.com\nschemes:\n  - http\nbasePath: /v1\nconsumes:\n  - application/json\nproduces:\n  - application/json\n\npaths:\n  /health:\n    get:\n      summary: Health check resource\n      description: Checks the health of the API.\n      tags:\n        - Health\n      responses:\n        200:\n          description: Service is healty\n          schema:\n            $ref: '#/definitions/Health'\n        503:\n          description: Service not available\n\ndefinitions:\n  Health:\n    type: object\n    properties:\n      status:\n        type: string\n        description: Short status message about the health.\n\n```\n## Steps to reproduce\n1. Generate server\n\n```\nswagger generate server -f swagger.yml\n```\n1. Look at the handler and try go access original request. \n I am having the same problem. @frosenberg, were you able to work around this?\n @aocole what I did was to declare the headers I needed as optional parameters at the top level like this:\n\n```\n# Optional header parameters\nparameters:\n  DlaasGroup:\n      name: X-DLaaS-Roles\n      description: Roles of a user\n      type: string\n      in: header\n      required: false\n```\n\nThen in my resources I just reference them:\n\n```\npaths:\n  /tickets:\n    parameters:\n      - $ref: '#/parameters/DlaasGroup'\n    post:\n      summary: ...\n      description: ...\n```\n\nThis way the client and server have explicit methods to set/get them. Not ideal but it works. Since the header are coming from our proxy the client wont need to set them and I would have preferred to handle transparently for the user but that is an OK solution for now. @casualjim's fix looks like it should do exactly what I need but I have not had time to look at it.\n That's a good workaround @frosenberg. I am going to backport @casualjim's fix from #558 in to a fork until I can upgrade after #467\n  When compiling go-swagger v0.5.9 (the tarball from https://github.com/go-swagger/go-swagger/releases, git snapshot fade7c6), I got this error:\n\n> go-swagger/cmd/swagger\n> scan/classifier.go:21:2: cannot find package \"golang.org/x/tools/go/loader\" in any of:\n>     /var/tmp/portage/dev-util/go-swagger-0.5.9/work/gopath/src/github.com/go-swagger/go-swagger/vendor/golang.org/x/tools/go/loader (vendor tree)\n>     /usr/lib/go/src/golang.org/x/tools/go/loader (from $GOROOT)\n>     /var/tmp/portage/dev-util/go-swagger-0.5.9/work/gopath/src/golang.org/x/tools/go/loader (from $GOPATH)\n> generator/shared.go:30:2: cannot find package \"golang.org/x/tools/imports\" in any of:\n>     /var/tmp/portage/dev-util/go-swagger-0.5.9/work/gopath/src/github.com/go-swagger/go-swagger/vendor/golang.org/x/tools/imports (vendor tree)\n>     /usr/lib/go/src/golang.org/x/tools/imports (from $GOROOT)\n>     /var/tmp/portage/dev-util/go-swagger-0.5.9/work/gopath/src/golang.org/x/tools/imports (from $GOPATH)\n\nIt's the same issue from #434, but on a different `golang.org/x/tools` subpackage.\n > What is the go version you're using?\n\ngo-1.6.1, and go-1.6.2\n\n> However I want to find out what is causing this build failure and why none of my ci envs pick it up.\n\nI can only guess: maybe your CI environments have a copy of the missing subpackes somewhere inside your GOPATH or GOROOT, leading to a successful compilation even if those subpackages are not present within the `vendor` directory.  When I package go-swagger for Gentoo/Linux I use a GOROOT/GOPATH workspace where there is nothing inside except for the go standard library (usually in `/usr/lib/go`), making easy to detect missing vendored dependencies.\n\nI would check for copies of the `golang.org/x/tools` package with the `find` tool on all yours CI envs; in case, make sure that you are not reusing old precompiled go-objects by removing all the `pkg` subdirectories every time you run a test on the CI.\n Thank you @casualjim. v0.6.0 successfully packaged for [Gentoo/Linux](https://github.com/Dr-Terrible/go-overlay/tree/master/dev-util/go-swagger) without any problems. :+1: \n\nEverything compiles as expected, and go-swagger seems to work correctly :)\n  \u2026ode for string enums\n  ## Problem statement\n\nIf i try to use the `--principal` flag during server generation the resulting code fails to compile.\n\n`swagger version` returns `0.5.0-118-gfffb4b0`\n### Swagger specification\n\nThe specification needs to include a security definition. e.g.\n\n``` yaml\nsecurityDefinitions:\n  bearer:\n    type: apiKey\n    name: Authorization\n    in: header\n```\n### Steps to reproduce\n\n``` bash\nswagger generate server --principal=my.Principal\n```\n\n``` bash\ngo build\n...\nmy_api.go:174: cannot use o.BearerAuth (type func(string) (*my.Principal, error))\nas type security.TokenAuthentication in argument to security.APIKeyAuth\n```\n\nTo resolve the issue all I had to do was alter 2 of the generated files.\n\n_example_api.go_\n\n``` diff\n- BearerAuth func(string) (*my.Principal, error)\n+ BearerAuth func(string) (interface{}, error)\n```\n\n_configure_example.go_\n\n``` diff\n- api.BearerAuth = func(token string) (*my.Principal, error) {\n+ api.BearerAuth = func(token string) (interface{}, error) {\n```\n\nI was then successfully able to `return &my.Principal{...}, nil` from `configure_example.go` and have it passed into the api handler with the correct type. \n\n_configure_example.go_\n\n```\napi.ExampleOpHandler = example.OpHandlerFunc(func(ctx context.Context, params example.OpGetParams, principal *my.Principal) middleware.Responder {\n    foo := principal.Foo\n    // ...\n}\n```\n I have seen this as well\n I must admit that I only ever tried a struct and not an interface. However the outcome is the same if its a struct created from a definition in the swagger specification file or if its a standalone struct defined in another library.\n I see the same thing after updating to the latest go-swagger. My principle is a custom struct too. \n For what I see the bug was introduced in the oauth2 merge here:\n\nhttps://github.com/go-swagger/go-swagger/commit/8ed1d59afc9a52f05f035c7ff299cd1757a1b799\n\nLine 150 in generator/templates/server/builder.gotmpl has been \"simplified\" and the bug was introduced. The footprint of the API key function is not func(string) ({}interface, error) when a custom principal is used, so a type error appears.\n Works for me now.\n  ## Problem statement\n\nI cant get the swagger-ui to run in the browser. \nIn the browser http://127.0.0.1:53536/swagger-ui/ gets me:\n\n```\nThis page contains the following errors:\n\nerror on line 1 at column 1: Document is empty\nBelow is a rendering of the page up to the first error.\n\n```\n\ni am using the petsotre example. I pulled the code yesterday so its fresh.\n\nOn my terminal i have the following:\n\n```\n\n # Validate\n swagger validate ./swagger.json\n\n# Delete old\n rm -rf cmd\n rm -rf cmd\n rm -rf models\n rm -rf restapi\n\n # Gen \n #swagger generate server -A IssueTracker -f ./swagger.yml\n swagger generate server -A PetStore -f ./swagger.json\n\n swagger generate client -A PetStore -f ./swagger.json\n\ngo build cmd/pet-store-server/main.go\n\n./main\n\n2016/05/27 15:58:30 Serving pet store at http://127.0.0.1:53536\n```\n http://127.0.0.1:3000/swagger.json works, returning the json file.\n\nhttp://127.0.0.1:3000 returns the same error message of:\n\n```\n{\"code\":404,\"message\":\"path / was not found\"}\n```\n How to enable cors ? That's the likely culprit.\nI could not fing it anywhere\n\nOn Fri, 27 May 2016, 16:40 Ivan Porto Carrero, notifications@github.com\nwrote:\n\n> I don't quite understand the problem yet.The error message comes when you\n> try to call the petstore api or when you try to load the swagger ui?\n> You're using the swagger ui docker container?\n> Did you add a CORS middleware to your swagger server?\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly, view it on GitHub\n> https://github.com/go-swagger/go-swagger/issues/542#issuecomment-222164145,\n> or mute the thread\n> https://github.com/notifications/unsubscribe/ALcac5Gq6oW_Il50CkUp4csJHG8Yxcemks5qFwJwgaJpZM4IojE7\n> .\n @joeblew99 you probably already figured it out. To help other googlers: _don't_ forget to add `/v1` prefix or or whatever you have specified in `basePath`.\n  ## Problem statement\n\nThere's supposed to be two tutorials in the \"Use\" section on [goswagger.io](https://goswagger.io) web site - https://goswagger.io/tutorial/dynamic/ and https://goswagger.io/untyped/server/. Pages look incomplete and abandoned, so I'd propose to remove or complete them to avoid confusion.\n I'm also trying to access the dynamic API definition page and it is not finished. Is that dynamic API definition still a feature?\n Since new documentation website is released, I think this issue could be closed.\n  ## Problem statement\n\nWhen i do the todo list tutorial and generate the code,  the todo-list/restapi/configure_todo_list.go has: \nimport errors \"github.com/go-swagger/go-swagger/errors\", and refuses to compile.\n\nBut when i look at the example in the go-swagger repo, the todo-list/restapi/configure_todo_list.go has:\nerrors \"github.com/go-openapi/errors\"\n\nPlease remove the sections that don't apply\n## Swagger specification\n## Steps to reproduce\n\nI have latest golang, and am using the latest binary of swagger to do my generation from.\n ok that fixed it.\n\nall the build errors are gone\nI use gvt for vendoring and had to just bring in 2 or 3 libs from the openAPI account:\nhttps://github.com/go-openapi/\n\nBut i have one line that will not compile and not sure if its your code or a lib:\n\nFrom /cmd/todo-list-server:\n\n```\nx-MacBook-Pro:todo-list-server apple$ go build\n# github.com/test/go-gedw99/go-service/restapi/operations/todos\n../../restapi/operations/todos/get_parameters.go:49: undefined: middleware in middleware.MatchedRoute\n\n```\n no its not that. gvt already brought it in via the \n\n```\ngvt fetch  github.com/go-openapi/runtime\n```\n\nStill hunting for what it might be.\n I got the todo-list  & task-tracker working off yml and json files.\nBTW i used a generic YAML --> JSON tool to make JSON and it works perfectly.\nIt also can convert the other way. Might be useful for you , because you can automate it in the core CI / testing if you want.\n\nI know why it did not work.\ni was calling the gen and build scripts i had written from too deep down.\nOnce i just copied the swagger.json, and ran the scripts it all worked perfectly.\n\nNice work !!\n  The attached swagger files has recursive ancestor refs.\n\nValidation overflows.  The stack trace is attached.\n\nSwagger (as .txt file):\n[refs-recursive-circular-ancestor-invalid.txt](https://github.com/go-swagger/go-swagger/files/280022/refs-recursive-circular-ancestor-invalid.txt)\n\nStack trace:\n[refs-recursive-circular-ancestor-invalid-stack.txt](https://github.com/go-swagger/go-swagger/files/280023/refs-recursive-circular-ancestor-invalid-stack.txt)\n  The following swagger has duplicate `operationId`s, but they are not reported.\n\n0.5.0-118-gfffb4b0\n\n```\n{\"swagger\": \"2.0\",\n \"info\": { \"description\": \"duplicateprops\", \"version\" : \"1\", \"title\" : \"duplicateprops\"},\n \"host\": \"petstore.swagger.wordnik.com\",\n \"basePath\": \"/v2\",\n \"schemes\": [ \"http\" ],\n \"paths\": {\n     \"/pets\": {\n         \"get\": {\n             \"operationId\": \"getPets\",\n             \"responses\": { \"default\": { \"description\": \"Generic Error\" }}},\n         \"post\" : {\n             \"operationId\": \"getPets\",\n             \"responses\": { \"default\": { \"description\": \"Generic Error\" }}}},\n     \"/humans\": {\n         \"get\": {\n             \"operationId\": \"getPets\",\n             \"responses\": { \"default\": { \"description\": \"Generic Error\" }}},\n         \"post\" : {\n             \"operationId\": \"getPets\",\n             \"responses\": { \"default\": { \"description\": \"Generic Error\" }}}}}}\n```\n  ## Problem statement\n\nMy uses case is that I need to support react & react native apps. These use the fetch api. Does go-swagger support this ?\n Thanks. I will test it to be sure.\n      ```\ngo-swagger/vendor/github.com/go-openapi/validate/* (especially spec.go)\n```\n\nhas code that performs \"semantic\" validation of a swagger document.\n\nIn the past I found\n\n```\ngo-swagger/validate/\n```\n\nfor running tests, and\n\n```\ngo-swagger/fixtures/validation\n```\n\nas json input to the tests.\n\nWhere is the validator test code and input files?\n thanks\n  ## Problem statement\n\nIf there is a model that uses array of another model, there is no validation code is generated that calls Validate of each array item.\n## Swagger specification\n\n```\nswagger: '2.0'\n\ndefinitions:\n  m1:\n    type: object\n    required: ['f1']\n    properties:\n      f1:\n        type: string\n        minLength: 1\n        maxLength: 2\n      f2:\n        type: array\n        minItems: 1\n        maxItems: 10\n        items:\n          $ref: \"#/definitions/m2\"\n  m2:\n    type: object\n    required: ['k1']\n    properties:\n      k1:\n        type: string\n        minLength: 1\n        maxLength: 2\n\ninfo:\n  description: test\n  title: test\n  version: 1.1.0\npaths: {}\n```\n# Just length check.\n\n```\nfunc (m *M1) validateF2(formats strfmt.Registry) error {\n\n    if swag.IsZero(m.F2) { // not required\n        return nil\n    }\n\n    iF2Size := int64(len(m.F2))\n\n    if err := validate.MinItems(\"f2\", \"body\", iF2Size, 1); err != nil {\n        return err\n    }\n\n    if err := validate.MaxItems(\"f2\", \"body\", iF2Size, 10); err != nil {\n        return err\n    }\n\n    return nil\n}\n```\n  ### Problem statement\n\nWhen `enum` is specified and send a correct parameter,  `type in formData should be one of [0 1]\"` returned always.\n\ngo-swagger generates validator code as follows if enum specified.\n\n```\nfunc (o *GetFooJSONParams) validateType(formats strfmt.Registry) error {\n    if err := validate.Enum(\"type\", \"formData\", *o.Type, []interface{}{0, 1}); err != nil {\n        return err\n    }\n\n    return nil\n}\n```\n\nHere, o.Type is `int64` because all integer converted to int64. And, `[]interface{}{0, 1}` is an `int`.\nSo, `reflect.DeepEqual` in a `validate.Enum()` always return `EnumFail`.\n## Swagger specification\n\n```\n  /example:\n    get:\n      parameters:\n        - name: type\n          type: integer\n          in: query\n          enum:\n            - 0\n            - 1\n```\n## How to fix\n\nIf I change these like this manually,\n\n```\n    if err := validate.Enum(\"type\", \"formData\", *o.Type, []int64{0, 1}); err != nil {\n```\n\nit works fine for me.\n\nSo, could you change to a template to use actual go type?\n\nThank you!\n I confirmed. Thank you very much!\n  Signed-off-by: Jake Burkhead jake.b@socialcodeinc.com\n\nrelates to https://github.com/go-swagger/go-swagger/issues/520\n  Closes #518\n Yeah because it's comparing the good name to the old typo `api.Mulitpart...`. Didn't look back in the code but I'd guess it is missing more changes. Notice I had also fixed the same typo in go-openapi/errors so it's possible there's more in other packages. \n Should be good now.\n  ## Idea\n\nSometimes it is just useful to have a model that I could use internally (config, etc). Of course, I could use a protobuf or something similar to generate them, but it feels a little redundant if swagger can already generate models from the spec even with validators - which is really good for things like config.\n\nSo, it would be awesome to add some separate model generator to just generate models without any APIs, etc.\n\nThoughts?\n It is already in! Yay!\n  ## Problem statement\n\nIf the response type of one of your endpoints is type=file, the generated Go code returns a runtime.File, which is meant for uploads. My case is an API that returns mostly JSON, but some of the endpoints return files associated to users.\n## Swagger specification\n\nHere's my spec, without the actual API, only the file download endpoint:\n\n```\nswagger: \"2.0\"\ninfo:\n  description: API + File download\n  title: Test\n  version: 1.0.0\nschemes:\n- http\nconsumes:\n- application/json\nproduces:\n- application/json\npaths:\n  /some/file.txt:\n    get:\n      operationId: someFile\n      produces:\n      - application/octet-stream\n      responses:\n        200:\n          description: download file\n          schema:\n            type: file\n```\n## Steps to reproduce\n\nGenerate the code, look at restpi/operations/some_file_response.go:\n\n```\ntype SomeFileOK struct {                                                        \n\n        // In: body                                                             \n        Payload runtime.File `json:\"body,omitempty\"`                            \n}                                                                               \n```\n\nThat is definitely not what I want. I started looking around in the swagger package and go-openapi for a middleware.Responder for octet streams and couldn't find one. I'm currently using this as a workaround in my handlers:\n\n```\nfunc NewOctetStream(f *os.File) middleware.Responder {\n        return middleware.ResponderFunc(func(w http.ResponseWriter, _ runtime.Producer) {\n                fn := filepath.Base(f.Name())\n                w.Header().Set(\"Content-Type\", \"application/octet-stream\")\n                w.Header().Set(\"Content-Disposition\", fmt.Sprintf(\"attachment; filename=%q\", fn))\n                io.Copy(w, f)\n                f.Close()\n        })\n}\n```\n\nThere are many downsides to this despite solving my problem. For one, looks very hack-ish because the producer is ignored. Also, you cannot `defer f.Close()` in the handler, because the middleware executes after you return. That forces me to take ownership of the file in the mw and close it there.\n\nIs this a gap in the current implementation or am I completely off?\n I tried using string and format `binary`. Why do I get an `io.Writer` as a result on the client?\n I'm not sure I follow. Maybe you have a sample of can point me to the code.\n @casualjim has the fix gone into master yet? \n What does the API look like with this change? I'm curious.\n Works for me! Thanks\n  When trying to generate a swagger spec from my Go code annotations it will fail sometimes saying it cannot find an external package in `$GOPATH`, `$GOROOT`, etc.\n\nI use [gb](https://getgb.io) to build my app and it uses a folder called `vendor/src` to store third-party dependencies. I would prefer not to have to also add these dependencies to my `$GOPATH` just to generate docs.\n\nCan this be added as a path to search like the `vendor` directory was added for Go 1.6 and above?\n I can dig into the code today and see. It makes sense to not want to support every third party tool for dependency management since they are a dime a dozen, but if it's trivial to add then that would be awesome.\n So I think the line that generates the error I am seeing is [here](https://github.com/go-swagger/go-swagger/blob/dccba1c40fcbec15a1926b5742e23291a0ebaab2/vendor/golang.org/x/tools/imports/fix.go#L290). Since this uses the Go standard library parser, I can see not wanting to patch this. You can go ahead and close this if you agree.\n Yeah I think adding a slice of \"extra\" paths to the options struct and then calling `Import` could be an option.\n I ended up moving to another build tool so I will close this issue. Thanks again.\n  Signed-off-by: Todd Neal todd@tneal.org\n  Ive fix template file for code generation of put request params\n  ## Problem statement\n\nFor optional primitive fields, generated model code can no longer distinguish null JSON values from default/zero values. This is due to models no longer using pointers.\n\nFor example, model code cannot differentiate `{ \"email_address\": null }` from `{ \"email_address\": \"\" }`.\n## Swagger specification\n\n```\n  \"definitions\": {\n    \"CreatePersonRequest\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"email_address\": {\n          \"type\": \"string\",\n          \"description\": \"Optional email address\"\n        },\n      }\n    }\n  }\n```\n\nThis now generates:\n\n```\ntype CreatePersonRequest struct {\n  EmailAddress string `json:\"email_address,omitempty\"`\n}\n```\n\nThis used to generate:\n\n```\ntype CreatePersonRequest struct {\n  EmailAddress *string `json:\"email_address,omitempty\"`\n}\n```\n## Steps to reproduce\n just set x-nullable: true and you are good to go.\n Thanks @casualjim and @vburenin. I added a comment on #476 - I don't think requiring `x-nullable: true` is ideal.\n Also with numbers. Trying to set <code>{total: 0}</code> results into <code>{ }</code>. <code>x-nullable: false</code> doesn't help.\r\n```\r\n \"definitions\": {\r\n    \"stats\": {\r\n      \"type\": \"object\",\r\n      \"properties\": {\r\n        \"total\": {\r\n          \"type\": \"integer\",\r\n        },\r\n      }\r\n    }\r\n  \r\n```    Removed redundant code. Less JSON parsing. Speedups on many things into several times. The larger spec is, the more noticeable speed up.\n This broke my build:\n\n```\n$ go get github.com/go-swagger/go-swagger/cmd/swagger\n# github.com/go-swagger/go-swagger/generator\ngenerator/types.go:244: doc.OrigSpec undefined (type *loads.Document has no field or method OrigSpec)\n```\n Did you update all dependencies? This thing is defined in github.com/go-openapi/loads, I guess that is why.\n Yep - go-openapi/loads doesn't seem to have a OrigSpec field on Document.\n does it work now?\n\nOn Tue, May 3, 2016 at 7:53 AM, Ben Firshman notifications@github.com\nwrote:\n\n> Yep - go-openapi/loads doesn't seem to have a OrigSpec field on Document.\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/go-swagger/go-swagger/pull/503#issuecomment-216553948\n Ah, thanks!\n  fixes #453 \nfixes #455\n Could you please check my changes? I am not really confident I've done it as it should be.\n  In #416 you included one of the Swagger files from my [catalog](https://github.com/APIs-guru/api-models).  Maybe you interested in testing against rest of 200+ Swagger files.\nThis can be done through [REST API](https://github.com/APIs-guru/api-models) to my catalog.\n @casualjim Maybe I can help you to chew this cucumber :smile: \nIf you have some question or feature requests, please [open an issue](https://github.com/APIs-guru/api-models/issues/new).\nWe can also chat in Gitter: https://gitter.im/APIs-guru/api-models\n  When I create a method which produces only a non-default content-type, the `Respond()` code in package `middleware` context.go always uses the DefaultProduces content-type instead of the type specified by the spec.  This is because it initializes the `offers` array with the DefaultProduces value and then appends the passed-in `produces` values to it, and NegotiateContentType ends up choosing the first item in the array. \n\nThe method's \"produces\" specification should override the default, shouldn't it?  Further, I don't see any way to specify a method which doesn't produce the API's default content type at all.\n\nGiven the spec below in an API which has a default content-type of application/json, the only way I can get the method to return text/plain is to explicitly specify that in an Accept header.\n## Swagger specification\n\n```\n            \"get\": {\n                \"produces\": [\n                    \"text/plain\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"blah blah\"\n                    }\n                }\n            }\n```\n Just moving `c.api.DefaultProduces()` to the _end_ of the `offers` array in `Respond()` (making it a fallback in case of non-matching) produces the result that seems correct to me, although it still doesn't address the issue of making a method which _doesn't_ produce the default content-type.\n I think this was fixed in https://github.com/go-openapi/runtime/pull/4.\n  When parsing discovered schemas it includes all structs including ones that should not be included. This patch makes the schemaParser aware of the discovered schema so we can use that information to exclude schema that are not needed.\n  I didn't notice `.githooks` folder and that I was supposed to use `git-hooks` to install hooks manually (am I right?).  It would be great to mention this in the contribution guidelines. \n\nSo I add missed `bindata` regeneration for #494 \n  ## Problem statement\n\ninvalid character '\u00ef' looking for beginning of value when generate server from swagger specification on windows with swagger_windows_386.exe (release 0.5.0) :\nswagger.exe   generate server \n## Swagger specification\n\n``` yaml\n\n---\nswagger: '2.0'\n\n################################################################################\n#                              API Information                                 #\n################################################################################\ninfo:\n  version: \"1.0\"\n  title: API IoT - Capgemini Development Challenge\n  description: Rendez-vous sur http://editor.swagger.io/ pour g\u00e9n\u00e9rer le code serveur. Le script d'injection Gatling s\u00e9quencera \u00e9critures et lectures. 10 injecteurs simultan\u00e9s injecterons 10 000 messages chacuns, soit 100 000 messages au total.\n  contact:\n    name: Ludovic Toinel\n    url: https://www.yammer.com/capgemini.com/#/Threads/show?threadId=682664973\n    email: ludovic.toinel@capgemini.com\n\n# during dev, should point to your local machine\nhost: 192.168.1.1\n# basePath prefixes all resource paths\nbasePath: /\n#\nschemes:\n  # tip: remove http to make production-grade\n  - http\n# format of bodies a client can send (Content-Type)\nconsumes:\n  - application/json\n# format of the responses to the client (Accepts)\nproduces:\n  - application/json\n\npaths:\n  /messages:\n    post:\n      description: Service d'acquisition de messages provenant d'objets connect\u00e9s\n      responses:\n        200:\n          description: R\u00e9ception du message en succ\u00e9s.\n      parameters:\n        - name: message\n          description: Message transmis par l'objet connect\u00e9.\n          in: body\n          schema:\n            $ref: '#/definitions/message'\n\n  /messages/synthesis:\n    get:\n      description: Service fournissant une synth\u00e8se des donn\u00e9es sur les 60 derni\u00e8res minutes, minute en cours incluse. L'objet \"synthesis\" retourn\u00e9 doit \u00eatre unique par type de capteur. \n      responses:\n        200:\n          description: successful operation.\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/synthesis'\n\ndefinitions:\n  message:\n    type: object\n    properties:\n      id:\n        type: string\n        description: Identifiant unique du message envoy\u00e9 par le capteur, un controle des doublons doit \u00eatre effectu\u00e9 (max 64 chars).\n      timestamp:\n        type:  string\n        format: date-time\n        description: Horaire de la fabrication du message par le capteur (format RFC3339). Ce timestamp fait fois lors calcul de la synth\u00e8se.\n      sensorType:\n        type: integer\n        format: int32\n        description: Type de capteur \u00e0 l'origine de l'emission du message.\n      value:\n        type: integer\n        format: int64\n        description: Valeur transmise par le capteur.\n\n  synthesis:\n    type: object\n    properties:\n      sensorType:\n        type: integer\n        format: int32\n        description: Type de capteur \u00e0 l'origine de l'emission du message.\n      minValue:\n        type: integer\n        format: int64\n        description: Valeur minimum transmise par ce type de capteur.\n      maxValue:\n        type: integer\n        format: int64\n        description: Valeur maximale transmise par ce capteur type de capteur.\n      mediumValue:\n        type: integer\n        format: int64\n        description: Valeur moyenne des donn\u00e9es transmises par ce type de capteur arrondie \u00e0 deux d\u00e9cimales\n\n```\n I'm still having the same problem @ZandorZ can you please provide more information about your setup (swagger version, OS, golang version) and what exactly the issue is that you are encountering. I'm using Linux Ubuntu 16.4, Go version 1.7.3. I'm also using Goa to generate  swagger file\r\nhttps://gist.github.com/ZandorZ/cc6e4a27bb634f91d058e017ff45b761 sorry, rename the gist file wrong\r\ni'm already using the .yaml extension, but tried with both @ZandorZ can you please specify your swagger version (can be found executing `swagger version`) Sorry, actually my problem is not when generating the code from yaml file, but using the generated client. I get the same message \"invalid character '\u00ef' looking for beginning of value\" when executing the client code @GlenDC Dev  I generated the client code again using yaml file this time and the error changed \r\n\r\nMy main.go https://gist.github.com/ZandorZ/c62c8c5dbad10acf3fc7789e9308a4df\r\n\r\nAnd the output: \r\n\r\n> GET /api/municipio HTTP/1.1\r\nHost: localhost:8080\r\nUser-Agent: Go-http-client/1.1\r\nAccept: application/gob\r\nAccept: application/json\r\nAccept: application/x-gob\r\nAccept: application/xml\r\nAccept-Encoding: gzip\r\n\r\n\r\nHTTP/1.1 200 OK\r\nContent-Length: 264\r\nContent-Type: application/bj.portal.municipio+json; type=collection\r\nDate: Tue, 31 Jan 2017 16:23:23 GMT\r\n\r\n\"\ufffd\ufffdMunicipioCollection\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdIDNome\r\nANTONIO OLINTO                      \ufffd\ufffd\ufffd\ufffd\r\nBALSA NOVCONTENDIRATI\r\nLAPA\r\nPAULO FRONTINEPALMEIRA\r\n             QUITANDINHA        REBOU\u00c7AS\u2592SAO JOAO DO TRIUNFO\u2592SAO MATEUS DO SUL\r\n2017/01/31 14:23:23 no consumer: \"application/bj.portal.municipio+json; type=collection\r\n I'm sorry. Actually this is the code that i'm having that issue\r\nhttps://gist.github.com/ZandorZ/0c97ddf6f9ea4369da7ae80a17b72d4e\r\n\r\n> GET /api/municipio/1 HTTP/1.1\r\nHost: localhost:8080\r\nUser-Agent: Go-http-client/1.1\r\nAccept: application/gob\r\nAccept: application/json\r\nAccept: application/x-gob\r\nAccept: application/xml\r\nAccept-Encoding: gzip\r\n\r\n\r\nHTTP/1.1 200 OK\r\nContent-Length: 51\r\nContent-Type: application/json\r\nDate: Tue, 31 Jan 2017 17:58:36 GMT\r\n\r\n\ufffd\ufffd\ufffd\ufffdIDNome\r\n          \ufffd\ufffdANTONIO OLINTO\r\n2017/01/31 15:58:36 invalid character '\\x1c' looking for beginning of value\r\n\r\n Nevermind, I followed your advice and changed the \r\n\r\n> \tProducesMediaTypes: []string{\"application/json\"},\r\n\t\tConsumesMediaTypes: []string{\"application/json\"},\r\n\r\njust to accept _\"application/json_\" and it worked, removed the other options: _\"application/x-gob\", \"application/xml\"_\r\n\r\nthank u for the answers  A bugfix to this issue #494 \n  I'm using an embedded interface as part of a response struct, and it fails with the error message \"unable to resolve embedded struct for: Resulter\".\n\nPart of the code:\n\n``` go\ntype Resulter interface {\n    Result() (int, interface{}, error)\n}\n\ntype jobResponse struct {\n    // in: body\n    Payload *partialJob\n\n    Resulter\n}\n```\n\nI can provide more details if that's desired. Should go-swagger ignore embedded interfaces?\n Seems like embedded interface does not cause error anymore, maybe this fixed it https://github.com/go-swagger/go-swagger/commit/6a060045f0c71475b6932bfd327387af081adcec\n\nIt seems the embedded interface is ignored (don't see it in generated json) but there is a function in scan/schema.go parseInterfaceType that parses interface. Given that the interface in Go can only have functions which will never be part of Rest API, why is interface parsed?\n  Thank you for developing very useful tool!\n## Problem statement\n\nI generated a source code with `--with-context` and I want to use `context.Context` on a middleware.\nBut, it seems context is created after middleware are invoked like [here](https://github.com/go-swagger/go-swagger/blob/4b4f832be2b3869d0ecfd5baa9fda046696d9712/generator/templates/server/operation.gotmpl#L69).\n\nCould you tell me how to set something on a middleware and use it from HandlerFuncs?\n\nrefs. #96\n\nThanks!\n## Swagger specification\n\nnil\n## Steps to reproduce\n\nnil\n I have the same problem right now. I would like the middleware to inject some value in the context that I can later re-use in my actual http handlers. Any way to do this?\n Here's an example of middleware setting a \"clientCert\" value in the context to pass the client TLS certificate along to the handlers.\n\n```\n// SetupMiddlewares - configure the higher-level middleware\nfunc (s *MyServer) SetupMiddlewares(handler http.Handler) http.Handler {\n    ourFunc := func(w http.ResponseWriter, r *http.Request) {\n\n        if r.TLS != nil && len(r.TLS.PeerCertificates) > 0 {\n            context.Set(r, \"clientCert\", r.TLS.PeerCertificates[0])\n        }\n\n        handler.ServeHTTP(w, r)\n    }\n    return http.HandlerFunc(ourFunc)\n}\n```\n\nAnd in the handler, you can get the cert like this (since you have the HTTP.Request object):\n\n```\n    clientCertIntf, ok := context.GetOk(req, \"clientCert\")\n    if !ok {\n        fmt.Printf(\"This request has no client cert.\\n\")\n        return nil\n    }\n    clientCert, ok := clientCertIntf.(*x509.Certificate)\n    if !ok {\n        return nil\n    }\n```\n Thanks for your fast response. I see that the context object you are using is from `github.com/gorilla/context`. I was actually looking at the `golang.org/x/net/context` one b/c that is what I have available in my handler (I called `swagger generate` with `--with-context`). I'm not sure these two contexts are compatible... \n Ah, sorry, I missed that.  Never mind. :)\n @ontucker thanks anyway, so I learned about the gorilla context :).\n\n@casualjim yeah that might work too. What were the problem you ran into? I would really like to see net.context available in handlers any time soon :)\n  I'm trying to add functionality add trace headers to logs and I want this trace header to be available everywhere. I looked into using gorilla context but it requires that I have access to the original request object in the handler, but I only have access to the params object generated by go swagger. How can I get the original request object in my handler, that is, the http.Request object?\n ok sweet thanks. When's the next swagger version coming out?\n Actually, I'm not seeing a way to get the header from the params object. What version is this in? Besides the request values, I only have BindRequest available to me.\n So the X-Request-Id isn't isn't being set after I add this. Here's my swagger:\n\n/score:\n    post:\n      parameters:\n        - name: X-Request-Id\n          in: header\n          type: string\n        - name: recipients\n          in: body\n          description: A list of recipient emails to score\n          required: true\n          schema: \n            $ref: '#/definitions/PostScoreRequest'\n      responses:\n        '200':\n          description: Ok\n          schema:\n            $ref: '#/definitions/RecipientListScore'\n        '400':\n          description: Bad Request\n          schema:\n            $ref: '#/definitions/ErrorResponse'\n I won't, I'll try this out. Thanks for the quick responses!\n Yes and no. I still couldn't get a map to the request object, because that id is a randomly generated one (remember, I need the http.Request object to get a request context using gorilla libraries). However, I made my own request context map that uses that id as the key and I pass that id through to the parameters in the request.\n\nAs great as I think go swagger is, I think it's not great that you get ride of the original request object and feed in your own. That potentially makes a lot of great http golang libraries, like the one mentioned, useless as the require items from that requests object, or the request object itself as it's used to map values. It would be great to have this in the future so that I don't have to make my swagger spec include a request ID just so I can pass through a context ID to my handlers.\n  ## Problem statement\n\n``` sh\nswagger generate server -A TestAPI -f ./swagger.yml`\n```\n\ngives this error `types don't match: expect map key string or int get: bool`\n## Swagger specification\n\n``` yml\nconsumes:\n- application/json\ndefinitions:\n  viewBox:\n    type: object\n    properties:\n      x:\n        type: integer\n        format: int16\n      # y -> types don't match: expect map key string or int get: bool\n      y:\n        type: integer\n        format: int16\n      width:\n        type: integer\n        format: int16\n      height:\n        type: integer\n        format: int16\ninfo:\n  description: Test RESTful APIs\n  title: Test Server\n  version: 1.0.0\nbasePath: /api\npaths:\n  /test:\n    get:\n      operationId: findAll\n      parameters:\n        - name: since\n          in: query\n          type: integer\n          format: int64\n        - name: limit\n          in: query\n          type: integer\n          format: int32\n          default: 20\n      responses:\n        200:\n          description: Array[Trigger]\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/viewBox\"\nproduces:\n- application/json\nschemes:\n- https\nswagger: \"2.0\"\n```\n## Steps to reproduce\n\nChange the `y` property to any other word and the spec will validate.\n Just use quotes as 'y', it should solve the problem.\n \ud83d\udc4d \n    ## Problem statement\n\nIt would be useful if it was possible to specify constants within the spec. I know the recommended practice is to use an enum with 1 value, but this will only _validate_ inputs. A given client is unable to reference the possible values or know what the appropriate default is.  I've experimented a little with using extensions, but the long and the short of it is that I ultimately have to write a factory for each model object to properly initialize the values. It would be much more convenient if I could somehow define constants or a constructor inside the spec.\n## Swagger specification\n\n```\n\"VersionClusterState\" : {\n            \"type\" : \"object\",\n            \"required\" : [ \n                \"major\",\n                \"minor\",\n                \"patch\"\n            ],\n            \"properties\" : {\n                \"major\" : {\n                    \"type\" : \"integer\",\n                    \"enum\" : [ 1 ] \n                },\n                \"minor\" : {\n                    \"type\" : \"integer\",\n                    \"enum\" : [ 1 ]\n                },\n                \"patch\" : {\n                    \"type\" : \"integer\",\n                    \"enum\" : [ 0 ]\n                }\n            }\n        }\n```\n## Client\n\n```\n// returns Major, Minor, Patch = 0, useless\nfunc DefaultVersionClusterState() *models.VersionClusterState {\n        &models.VersionClusterState{}\n}\n\n// returns initialized object, but pain in the ass and defeats purpose. Given the choice to modify spec and code, I'll just modify code instead\nfunc NewVersionClusterState() *VersionClusterState{\n        var spec = spec.New(restapi.SwaggerJSON, \"\").Extensions[]... //read custom extensions from spec\n        &models.VersionClusterState{spec.Major, spec.Minor, spec.Patch}\n}\n\n//easier but error prone and hard for developers to manage versions\nfunc NewVersionClusterState() *VersionClusterState{\n        &models.VersionClusterState{1, 1, 0}\n}\n```\n\nI'm curious if it's possible to improve this behaviour. Ideally something like adding a factory method that would supply an object with its default values based on the spec.\n## Steps to reproduce\n1. Generate server with above spec\n2. Generate client with above spec\n3. Note that you have to manually insert code to initialize the right values\n Possibly related to issue #861 @Ahhmyface what would be the right (default) value be for an enum with more then 1 possibility, in your opinion?  ## Problem statement\n\nI find the case that swagger panics with a stack overflow.\nIn this case, the swagger specification contains a schema that includes an item which has some special property, the definition containing that array of itself.\n\nThis schema is valid with [swagger edittor](http://editor.swagger.io/).\n\nMy swagger version is `0.5.0-58-gf6472e8`.\n## Swagger specification\n\n```\nswagger: \"2.0\"\ninfo:\n  title: sample\n  version: 1.0.0\nschemes:\n- http\n- https\nconsumes:\n- application/vdn.sample.v1+json\nproduces:\n- application/vdn.sample.v1+json\npaths:\n  /:  \n    get:\n      responses:\n        200:\n          description: list all suites\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/Foo'\ndefinitions:\n  Foo:\n    type: object\n    properties:\n      foo:\n        $ref: \"#/definitions/Bar\"\n  Bar:\n    type: object\n    properties:\n      bar:\n        type: array\n        items:\n          $ref: \"#/definitions/Bar\"\n```\n## Steps to reproduce\n- Run `swagger validate swagger.yml` with the given swagger specification\n ![workingonswag](https://cloud.githubusercontent.com/assets/2294309/14647235/72371194-0622-11e6-865c-30faac68f2e7.jpg)\n   ## Problem statement\n\nXMLHttpRequest cannot load http://127.0.0.1:2000/swagger.json. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:8080' is therefore not allowed access.\n\ni've tried to add \"Access-Control-Allow-Origin\" to response header\n###### \n\nif origin := r.Header.Get(\"Origin\"); origin != \"\" {\n    rw.Header().Set(\"Access-Control-Allow-Origin\", origin)\n}\nrw.Header().Set(\"Content-Type\", \"application/json\")\nrw.Header().Set(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE\")\nrw.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token\")\nrw.Header().Set(\"Access-Control-Allow-Credentials\", \"true\")\n###### \n\nbut not work!\nI can't use swagger-ui & swagger_editor to load swager.json & test API\n Working example (in configure_name.go):\n\n``` go\nimport \"github.com/rs/cors\"\n\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    handleCORS := cors.Default().Handler\n\n    return handleCORS(handler)\n}\n\n```\n This is not working for me, I still get 405 Method Not Allowed. Is there a new fix for this?  ## Problem statement\n\nswagger.json document is always available at the root path as http://1.1.1.1/swagger.json\nI can see why, but I would be happier if it was prefixed by a basePath such as:\n\nhttp://1.1.1.1/v1/swagger.json\n hi,\r\nAny chance you know the priority on this?\r\nI am trying to get swagger.json be available on the same path as the api's basePath. Is it possible on current go-swagger implementation?\r\n\r\nThanks\r\nSrikar How very topical.  I'm just starting to look at this myself.\r\n This looks promising:\r\n\r\n```\r\n// Spec creates a middleware to serve a swagger spec.\r\n// This allows for altering the spec before starting the http listener.\r\n// This can be useful if you want to serve the swagger spec from another path than /swagger.json\r\n//\r\nfunc Spec(basePath string, b []byte, next http.Handler) http.Handler {\r\n``` So this function is called by \r\n\r\n```\r\n// APIHandler returns a handler to serve the API, this includes a swagger spec, router and the contract defined in the swagger spec\r\nfunc (c *Context) APIHandler(builder Builder) http.Handler {\r\n...\r\n\treturn Spec(\"\", c.spec.Raw(), Redoc(redocOpts, c.RoutesHandler(builder)))\r\n}\r\n```\r\n\r\nand that is called by\r\n\r\n```\r\nfunc (o *<GENERATED>API) Serve(builder middleware.Builder) http.Handler {\r\n\to.Init()\r\n\r\n\tif o.Middleware != nil {\r\n\t\treturn o.Middleware(builder)\r\n\t}\r\n\treturn o.context.APIHandler(builder)\r\n}\r\n```\r\n\r\nSo maybe the path could be added to the Context object.\r\n thanks.\r\nthats correct, but these files will get overwritten if/when you run the generator again. Yes, I wasn't thinking for post-generate editing, just strategy for implementation. thanks for the pointer though, I was able to get it working by using Spec in setupGlobalMiddleware()\r\n```\r\nif r.URL.Path == swaggerJSONPath {\r\n\t\t\tswaggerSpec, err := loads.Analyzed(SwaggerJSON, \"\")\r\n\t\t\tif err != nil {\r\n\t\t\t\tlogger.Log.Error(\"Failed to get swagger spec json.\", nil)\r\n\t\t\t}\r\n\t\t\trawSpec := swaggerSpec.Raw()\r\n\t\t\trootHandler := middleware.Spec(path+\"/ui/\", rawSpec, http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\r\n\t\t\t\trw.WriteHeader(http.StatusFound)\r\n\t\t\t\treturn\r\n\t\t\t}))\r\n\t\t\trootHandler.ServeHTTP(w, r)\r\n\t\t\treturn\r\n\t\t}\r\n``` I did like @njsrikar did and added the `Spec` call through `setupGlobalMiddleware` after saving the base path in main.\r\n\r\nThe convention doesn't work for me because my API is behind an API gateway, where there is a path assigned to my service, and the root of my service is not accessible.  For ease of using a single Swagger file to both provision the gateway and drive `go-swagger`, that base path is used in the swagger file and thus in my generated routes. ditto with my case as well.\r\n\r\n@casualjim thanks for the tip on --skip-main ..will come in handy.  This sounds spooky to me. If I need something like that, I would handle it by my self adding additional properties to the patch object.\n I actually like the idea of adding accessor functions to hide the details.  You can only do so much with basic data types.  It's a pointer or it isn't.  Attributes like optional, required, default, etc are semantics that are very difficult to represent in computer languages.  The only way to do it is to make complex data structures to add those semantics.\n\nThe only issue I have is that go-swagger has allowed us to access these data types directly up till now, so when the implementation changes, we all have to go through and change our code to use the updated semantics.  Other \"IDL\" technology uses the approach of accessor functions.  I bring up Thrift as an example.  I cannot remember the exact code, but to find out if a data is optional, that information is only available through a function call.\n\nIf a model was something like,\n\nImage {\n   ID *string\n   name *string\n}\n\nAn example generation could be\n\nfunc (i _Image) GetIDValue() (_string, optional, required) {}\n\nI am not advocating that specific signature.  It's just an example.  When Swagger adds more richness to their definition, go-swagger can enrich the data types in the back without affecting users' code.\n\nYes, it's more tedious to use accessors, but it's the only way to add richness to datatypes in a language (go) that has limited semantics in the datatypes.\n Another option for the implementation is to use go's fields and reflection.  Again, if users were using accessor functions, the implementation detail would be hidden.\n I'm not sure how I feel about that.\n\nThe issue is that most APIs often will try to interpret the zero value sent, often causing problems for things like dates, which will default to Jan 1, 1970, which is never the intended behavior the API designer intended, and often requires' forking the upstream swagger to add `x-isnullable` so the correct behavior occurs.\n\nThe simple solution is to `always` use pointers, unless on a slice, or map, which can be nil already. The `required` flag would simply cause a check for `nil` on the property to be generated as validation. No longer would it effect whether a value is a pointer or not.\n\nTo compare to another library I've used, [aws-sdk-go](https://github.com/aws/aws-sdk-go) it's very consistent all around in using pointers. Defaults could stay pretty simple, and you can use the `swag` functions to get zero values from nil properties without having to check for `nil`\n\nIt may be a bit more verbose, but I believe it is truely the correct behavior to never send values not filled in, meaning in some fashion, you should use a pointer, since a zero value cannot be assumed to be unset. There's no need to do anything crazy with extra fields/types/etc for the base object that go-swagger generates, because we can more easily build those accessor/setter patterns on top of this base, and additively to boot, after we've decided if we want multiple return values, structs, chaining, etc.\n I like companion field proposition, but it shouldn't be generated by default. It might be better just to add a flag x-go-nil-flag: true that could instruct generator to generato companion like this:\n\n```\nMyValue *int64\nMyValueIsNil bool\n```\n I think the default behavior should allow distinguishing between null and default values. Since JSON distinguishes null vs zero value, and swagger is JSON-oriented, coercing nulls into other values seems like an optimization that isn't needed for most users. For this reason, I disagree on `x-nullable` being necessary.\n\nIf reducing pointers is a goal, something along the lines of the following could work. I would use a bit set instead of a companion bool per field.\n\n```\nMyValueSet bool // ideally a shared bit set\nMyValue int64\n\n// getters\nfunc (o *Object) GetOrDefaultMyValue() (int64, bool) {\n  return o.MyValue, o.MyValueSet\n}\n\nfunc (o *Object) GetMyValue() *int64 {\n  if o.MyValueSet {\n    return &o.MyValue\n  } else {\n    return nil\n  }\n}\n```\n I definitely need methods:\nIsDescriptionNil\nIsDescriptionNotNil\nIsDescriptionSet\nIsDescriptionNotSet\nHasDescriptionValue -> IsDescriptionSet && IsDescriptionNotNil\n  lgtm\n    For some reason the schema for array item is enforced in such way that array items become required.\nI created a copy of the originating schema and reset required flag for it. Test update was necessary.\n  ## Problem statement\n\nThe current Go template for the generated server code in 'main.go' ignores the return values from `parser.AddGroup`, including possible errors. This results in a buggy `go-flags`-formatted struct quietly failing, making it confusing to the developer why their flags aren't showing up.\n## Steps to reproduce\n\nDefine an invalid `go-flags` options struct. Add your flags in `configure_{api}.go:configureFlags`:\n\n``` go\ntype MyFlags struct {\n    Verbose bool `short:\"v\"`\n    Verbosity int   `short:\"v\"`\n}\n\nfunc configureFlags(api *operations.SwishAPI) {\n    api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroups{\n        {\"verbosity\", \"verbosity levels\", &MyFlags{}}\n    }\n}\n```\n\nBuild and run your server: `go run cmd/api-server/main.go -h`. The user-defined flags don't appear.\n## Solution\n\nUpdate the loop that processes the CommandLineOptionsGroups to log and exit the start-up process:\n\n``` go\n    for _, optsGroup := range api.CommandLineOptionsGroups {\n        _, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)\n        if err != nil {\n            log.Fatal(err)\n        }\n    }\n```\n\nExiting the process is reasonable here, because the CLI flags are statically configured inside the code, and we want to alert the developer as soon as possible that they've made a mistake.\nI have this, and a small comment inside `configureFlags` explaining how to add custom flags, ready to go in a PR.\n  When expanding a schema, go-swagger does not correctly process a response which is an array of objects. For example:\n\n``` json\n \"Pets\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/Pet\"\n      }\n}\n```\n\nThis pull request adds detection and correct expansion of this case.\n  Just a little thing I noticed when i had the -a flag set to something other than 'operations'\n  This fixes the issue, but I'd like to know a good place to put a test for this (or modify an existing test).\nIn addition, I'm opening the PR so I know the existing test-suite passes because\n1) I couldn't find instructions on how to run all tests locally\n2) The Circle process I ran on my fork failed - https://circleci.com/gh/nikhilm/go-swagger/3\n existing test suite passed locally, where should I put the new test and\nwhat can I use as an example for this kind of test? Thanks!\n\nOn Tue, Apr 5, 2016 at 4:46 PM, Ivan Porto Carrero <notifications@github.com\n\n> wrote:\n> \n> I run tests locally like this:\n> \n> go test $(go list ./... | grep -v vendor)\n> \n> Another way to do it is:\n> \n> docker build -t go-swagger:local -f Dockerfile.ci .\n> docker run --rm -it go-swagger:local ./hack/build-docker.sh\n> \n> And the last way to do it is:\n> \n> drone exec\n> \n> \u2014\n> You are receiving this because you authored the thread.\n> Reply to this email directly or view it on GitHub\n> https://github.com/go-swagger/go-swagger/pull/466#issuecomment-206038391\n The CircleCI failures don't seem to be my fault.\n  ## Problem statement\n\nEven if the swagger specification has a basePath, the generated client's http transport is not initialized with this basepath.\n## Swagger specification\n\n```\nswagger: '2.0'\ninfo:\n  title: My spec\n  version: \"0.2.23\"\n# the domain of the service\nhost: \"localhost:8080\"\n# array of all schemes that your API supports\nschemes:\n  - https\n  - http\n# will be prefixed to all paths\nbasePath: /v1/myfancy\nconsumes:\n  - application/json\nproduces:\n  - application/json\npaths:\n  /images:\n    get:\n      summary: \"Get all images.\"\n      description: \"Blah\"\n      responses:\n        200:\n          description: List of images.\n          schema:\n            type: string\n            name: hello\n```\n## Steps to reproduce\n\nRun `swagger generate client -f reduced.yml`\n\nThe client's http transport initialization is \n`transport := httptransport.New(\"localhost:8080\", \"\", []string{\"http\", \"https\"})`\n\ninstead of\n\n`transport := httptransport.New(\"localhost:8080\", \"/v1/myfancy\", []string{\"http\", \"https\"})`\n Fixed in #466\n  When writing manually a Swagger specification, one may make a typo and create a recursive schema.\n\n`swagger validate` should detect such errors.\n\nA directly recursive schema (YAML):\n\n``` yaml\ndefinitions:\n   Item:\n      type: object\n      properties:\n        key:\n          $ref: '#/definitions/Item'\n```\n\nAn indirect recursion:\n\n``` yaml\ndefinitions:\n   Item1:\n      type: object\n      properties:\n        key:\n          $ref: '#/definitions/Item2'\n   Item2:\n      type: object\n      properties:\n        key:\n          $ref: '#/definitions/Item1'\n```\n  This change introduces a precedence for a user defined attribute x-nullable.\nx-nullable is an extension that actually gives user a freedom to optionally define code generator behavior for nullable and non nullable values.\n  ## Problem statement\n\nWith the recent change all required values are now pointers. Even though it is a valid and reasonable change from some points of view, it makes life much harder for me, GC and makes code ugly to work with generated models when required property can not be nullable and even zero value by design.\n\nThe similar problem affected not required values, many of them turned to be not nullable. However, I like this, because I have a control via \"x-nullable: true\" to turn them to be nullable when I want to. On the other hand, there is no way to use the same way to turn required properties to be not nullable.\n\nSo, the request is to make \"x-nullable: false\" to work with the required property.\n\nrelated: #476\n I think, it is true if a value can get in to the range of a zero value. Otherwise, a zero value can be used as \"nil/null\".  For a \"required validation error message\" it can say \"value is required and can not be nil or zero/empty\".\n Here is a solution pull request that satisfies default behavior as well as user defined behavior: https://github.com/go-swagger/go-swagger/pull/459\n Now I am confused. I tested this commit from master [7f2565c](https://github.com/go-swagger/go-swagger/commit/7f2565cca6067d3bac6d2b666475ff1b0b5b2dad)\nAssume that I have a definition:\n\n```\n    \"newProfile\": {\n        \"type\": \"object\",\n        \"required\": [\n            \"id\"\n        ],\n        \"properties\": {\n            \"id\":{\n                \"type\": \"integer\",\n                \"x-nullable\": true\n            }\n        }\n    }\n```\n\nThat was generated in models:\n\n```\ntype NewProfile struct {\n\n    /* id\n\n    Required: true\n    */\n    ID *int64 `json:\"id\"`\n}\n\nfunc (m *NewProfile) validateID(formats strfmt.Registry) error {\n\n    if err := validate.Required(\"id\", \"body\", int64(*m.ID)); err != nil {\n        return err\n    }\n    return nil\n}\n```\n\nSo  `{\"id\": 0}`  is invalid by current version of `validate.Required`. And `{}` leads to a runtime panic `invalid memory address or nil pointer dereference`, because of this `int64(*m.ID)`\nDesired behaviour is `{\"id\": 0}` - valid, `{}` - invalid, but no panic.\nAm I correct?\nCan you give some clarifications please?\n If _all required values are now pointers_, this is a regression.\nWhy would a pointer be necessary if the value is required?\n If the pointer was added because the standard JSON unmarshaler does not allow to distinguish when a property is missing, this is the JSON parsing that must be fixed (for example by providing a custom `UnmarshalJSON` method that checks for missing properties), not the struct.\n I think there many opinions around this, I also tend to agree with Ivan. So, the same day I added an ability to enforce pointer/non-pointer value for required properties using x-nullable:true/false.\n @casualjim Yes, you are correct. I somehow messed the environment and stuck in previous version of the templates. Starting the server in a clean docker environment shows no issues with required fields. Shame on me. \n > please consider the opposite case, where you want to validate the struct not the json. This use case is real on generated clients.\n\nIt seems we have now a case where the model generation could be improved if it knew if the model is used for client or for server. The `readOnly` flag in the spec is also useful.\n\n> How do you distinguish between value-set and value-unset?\n\nAs I stated in #132 we should distinguish the case where the Go zero value is a valid value or not. A pointer is not needed if the Go zero value is not a valid value for the schema.\n @dolmen You now can instruct swagger using x-nullable: false/true to generate a value or a pointer, it is totally up to. I am with you since I understand the problem, but I am also with Ivan since there some cases when such behavior is not desired. So, the best approach to me will be the usage of x-nullable where you wish to have a specific behavior.\n Closing as it is no longer the case.\n  ## Problem statement\n\nRequests with required nested objects are not validated correctly. If the object is set then it its contents are validated. However, the object itself being set is not validated.\n## Swagger specification\n\n```\n{\n  \"paths\": {\n    \"/thing\": {\n      \"post\": {\n        \"summary\": \"CreateThing\",\n        \"description\": \"\",\n        \"parameters\": [\n          {\n            \"name\": \"body\",\n            \"in\": \"body\",\n            \"required\": true,\n            \"description\": \"\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/CreateThingRequest\"\n            }\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"schema\": {\n              \"$ref\": \"#/definitions/CreateThingResponse\"\n            }\n          }\n        }\n      }\n    }\n  },\n  \"definitions\": {\n    \"CreateThingRequest\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"required_other_thing\",\n        \"required_array_other_thing\"\n      ],\n      \"properties\": {\n        \"required_other_thing\": {\n          \"$ref\": \"#/definitions/OtherThing\",\n          \"description\": \"BUG: presence of this should be validated but is not\"\n        },\n        \"required_array_other_thing\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/OtherThing\"\n          },\n          \"description\": \"\"\n        }\n      },\n      \"description\": \"\"\n    },\n    \"CreateThingResponse\": {\n      \"type\": \"object\",\n      \"properties\": {},\n      \"description\": \"\"\n    },\n    \"OtherThing\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"some_field\": {\n          \"type\": \"string\",\n          \"description\": \"\"\n        }\n      },\n      \"description\": \"\"\n    }\n  },\n  \"host\": \"connect.squareup.com\",\n  \"schemes\": [\"https\"],\n  \"produces\": [\"application/json\"],\n  \"swagger\": \"2.0\",\n  \"consumes\": [\"application/json\"],\n  \"info\": {\n    \"title\": \"Test API\",\n    \"version\": \"1.23\"\n  }\n}\n```\n## Generated code\n\nThe following is a snippet from the generated `create_thing_request.go` code. The code between the START and END comments was not generated as expected.\n\n```\n\nfunc (m *CreateThingRequest) validateRequiredOtherThing(formats strfmt.Registry) error {\n\n    // START necessary code that was not generated\n    if err := validate.Required(\"required_other_thing\", \"body\", m.RequiredOtherThing); err != nil {\n        return err\n    }\n    // END\n\n    if m.RequiredOtherThing != nil {\n\n        if err := m.RequiredOtherThing.Validate(formats); err != nil {\n            return err\n        }\n    }\n\n    return nil\n}\n```\n Yes, although they are similar.\n\nThis bug covers the case of an unset required field (that is an object, not a primitive) passing validation.\n\n```\n{\n  \"something_required\": null  // where something_required should be set to an object but validation passes\n}\n```\n\n#453 covers an optional field that is an object being set but never validated.\n\n```\n{\n  \"something_optional\": { \"an_int\": \"but i'm a string!\"} // optional nested object is not validated\n}\n```\n  ## Problem statement\n\nI'm getting a \"no import found message\" \n\nHere is sample of the schema \n\n``` go\npackage model\n\nimport (\n    //\"encoding/json\"\n    \"time\"\n\n    \"../nullable\"\n      `\"gopkg.in/guregu/null.v3\"\n`)\n\n// swagger:model\ntype Community struct {\n    Sid                string `json:\"sid\"`\n    Designjson         nullable.JSON\n    Status             null.String\n    Xdate              null.String \n}\n```\n\nThe exact error I get is: \n$GOPATH/bin/swagger generate spec -m -o ./swagger.json\n**no import found for null**\n\nI'm assuming \"null is the package I'm using to wrap sql types that might return a null value. I figured the import \"null.v3\" might be confusing it so I replaced \n`\"gopkg.in/guregu/null.v3\"` with `null \"gopkg.in/guregu/null.v3\"` to give it a package name ... this produces the following error :\n\n $GOPATH/bin/swagger generate spec -m -o ./swagger.json\n**package ./model, error is: unknown primitive \"byte\"**\n\nWhat am I doing wrong here ... will it just not support non-primative types? \n\nThanks\n Hmm ... I think I need to preserve sql types since this struct is tied to the db \nex. https://golang.org/pkg/database/sql/#NullFloat64 \n\nNull / nullable are just wrappers around that. I'm sure someone else must be dealing with database/sql and mapping their model definitions ...\n  This PR aims to fix:  https://github.com/go-swagger/go-swagger/issues/449\n\nI changed the `/fixtures/goparsing/classification/operations/todo_operation.go` file in order to test more general scopes (For example Google uses URL as scopes).\n\nI changed the  `scan/routes_test.go` accordingly.\n\nI removed the useless regexp that I replaced with a simple TrimAfter followed by a TrimSpace. This is possibile because following the specifications scopes can't contain spaces (must be url encoded if present).\n\nSigned-off-by: Paolo Galeone nessuno@nerdz.eu\n  Function `Required` had, I suppose, not desired behaviour due to not correct usage of `reflect` package.\nAlso I added some tests to `validate` package because there were not that many of them.\n I am not that sure but aren't these CI (\"to long\") errors kinda common for the current branch? Am I supposed care about them in this pull request to make it accepted?\n  Hi, I'm trying to use swagger to generate a swagger.json file.\n\nI've defined a route following [the referece](http://goswagger.io/generate/spec/route/), in that way:\n\n``` go\n// Posts handles the request and returns the required posts written by the specified user\nfunc Posts() echo.HandlerFunc {\n\n    // swagger:route GET /users/{id}/posts user posts getUserPosts\n    //\n    // List posts on user board, filtered by some parameters.\n    //\n    // This will show the last posts on the user board by default.\n    // You can personalize the request via query string parameters\n    //\n    //  Security:\n    //      oauth: profile:read,base:read\n    //\n    //  Responses:\n    //      default: apiResponse\n\n//..... other code\n}\n```\n\nAfther that, I generate the file with `generate swagger generate spec -o swagger.json`\n\nBut the \":\" character in the oauth2 scope definition is missing as you can see:\n\n``` json\n    \"paths\": {\n        \"/users/{id}/posts\": {\n            \"get\": {\n                \"description\": \"This will show the last posts on the user board by default.\\nYou can personalize the request via query string parameters\",\n                \"tags\": [\"user\", \"posts\"],\n                \"summary\": \"List posts on user board, filtered by some parameters.\",\n                \"operationId\": \"getUserPosts\",\n                \"security\": [{\n                    \"oauth\": [\"profileread\", \"baseread\"]\n                }],\n                \"responses\": {\n                    \"default\": {\n                        \"$ref\": \"#/responses/apiResponse\"\n                    }\n                }\n            }\n        }\n```\n\nIn my API, scopes follows the following syntax: `<resource>[:[read,][write]]`\nThus something like `profile:read,write base:read` or `comments:read profile:write` is fine in my specification (and in OAuth2 specification too, because the list of scopes con contain anything and scopes must be separated by a single space). \n\nIs there something I'm doing wrong or it's a swagger bug / limitation?\n\nThank you!\n  The functionality to determine the value of reinstateSlash would\nset it to true in the case where req.URL.Path is \"/\".  This would\nresult in an extra \"/\" being appended to req.URL.Path after it was\njoined with the BasePath, causing requests to fail.  The path.Join()\nfunction calls path.Clean() on each path element to be joined.\nClean() will return a trailing \"/\" on a path element only if it is\n\"/\".\n  I have an app that generates a JSON response body declared as follows:\n\n// swagger:response Response\ntype Response struct {\n    ResultCode string `json:\"code\"`\n    Message string `json:\"message\"`\n    ScanId string `json:\"scan_id\"`\n    Filesize string `json:\"filesize\"`\n    ContentType string `json:\"content_type\"`\n    ScanResultUrl string `json:\"scanresult_url\"`\n}\n\nWhen I generate a Swagger spec from the go-swagger response markup the spec shows the response struct members as response headers:\n\n<...>\nresponses:\n  ScanResponse:\n    headers:\n      content_type:\n        type: string\n      filesize:\n        type: string\n      message:\n        type: string\n      scan_id:\n        type: string\n      scanresult_url:\n        type: string\n\nQuestions: \n- is this expected behaviour?\n- is there markup to express that my response is a simple JSON response body?\n Sure, could do that, but it means a nested layer in the JSON serialized to the client. Is that the only way?\n yup I can pass back the nested Body struct thanks. Not sure I love the idea of nesting my structs to support generation tho, for example, initializing with nesting seems a little awkward. Any interest in supporting spec generation with non-nested types?\n @casualjim, I would like this as well. If you could please point out where in the \"swagger generate spec\" code would be a good place to start exploring I could take a stab at this.\n This is a blocker for us adopting go-swagger for Docker. I quite like the idea of `swagger:responseBody`.\n\nIs anybody working on this? If I find some time I might dig into this.\n Oh \u2013\u00a0_nice_! I'll give it a try.\n\nThanks!\n @casualjim I think none of our response have any special headers. Adding Swagger annotations to the codebase is much more palatable when there aren't hundreds of useless wrapper structs. ;)\n Does that PR actually allow you to avoid using wrapper structs? From the [docs](https://goswagger.io/generate/spec/model.html):\r\n\r\n> Definitions only appear in the generated spec when they are actually used somewhere in the application (eg. on a params or response struct)\r\n\r\nso ... do I need a wrapper struct anyways? Can a `swagger:route` directly refer to a `swagger:model` in the `Responses` section? It doesn't look like it ... Yes, that seems to work. Thanks!    Add package name in message \"unknown primitive ....\".\nFor better diagnostic issue #241\nhttps://github.com/go-swagger/go-swagger/issues/241\n  When compiling go-swagger v0.5.0 (the tarball from https://github.com/go-swagger/go-swagger/releases, git snapshot ff42df2), I got this error:\n\n> agger/cmd/swagger\n> vendor/golang.org/x/tools/go/loader/util.go:17:2: cannot find package \"golang.org/x/tools/go/buildutil\" in any of:\n>     /var/tmp/portage/dev-util/go-swagger-0.5.0/work/gopath/src/github.com/go-swagger/go-swagger/vendor/golang.org/x/tools/go/buildutil (vendor tree)\n>     /usr/lib/go/src/golang.org/x/tools/go/buildutil (from $GOROOT)\n>     /var/tmp/portage/dev-util/go-swagger-0.5.0/work/gopath/src/golang.org/x/tools/go/buildutil (from $GOPATH)\n\nThe Go lang toolchain is right, there isn't a `golang.org/x/tools/go/buildutil` inside the vendor path of the  git snapshot [ff42df2](https://github.com/go-swagger/go-swagger/tree/ff42df2bf231f6a12383b36332f8364254ea86d6/vendor/golang.org/x/tools/go) (v0.5.0). This scenario makes impossible to properly package go-swagger for GNU/Linux source-based distributions such as Arch, and Gentoo due to missing bundled dependencies.\n\nI am the maintainer of the Gentoo `ebuild` for go-swagger (you can find it [here](https://github.com/Dr-Terrible/go-overlay/tree/master/dev-util/go-swagger)), so I can easily circumvent the issue by manually update the missing dependency. Unfortunately, it will not be so easy to fix for other distributions, so I think it's worth fixing by upstream with an updated tarball (or a new version bump, whatever suits you better).\n > is there something that can be worked out to get gentoo support included in the release process?\n\nSure, when there are new releases ready to be rolled out just warn me and I'll test a live git snapshot on x86_64, x86_32, and arm7+ (complete with Unit Testing). Then I'll report a success or whatever is amiss before the official release.\n\nI do it regularly for several official packages; as a reference, take Asciinema's work-flow as an example: https://github.com/asciinema/asciinema/issues/116  They use a specific issue with which new releases are signalled and then every GNU/Linux distribution maintainers report their feedbacks.\n\nIt works quite well as a solution, but just in case I'm open to other suggestions too. I have no particular preference.\n    This topic has already came up. It would be nice to be able to set own TLS config options like client cert validation, etc.\nIt seems like it is possible to just add an additional configuration hook into configure_xxx.go to set custom TLS options.\n\n``` diff\ndiff --git a/generator/templates/server/configureapi.gotmpl b/generator/templates/server/configureapi.gotmpl\nindex 33dd0ce..d74e269 100644\n--- a/generator/templates/server/configureapi.gotmpl\n+++ b/generator/templates/server/configureapi.gotmpl\n@@ -2,6 +2,7 @@ package {{ .APIPackage }}\n\n import (\n   \"net/http\"\n+  \"crypto/tls\"\n\n   errors \"github.com/go-swagger/go-swagger/errors\"\n   httpkit \"github.com/go-swagger/go-swagger/httpkit\"\n@@ -56,6 +57,11 @@ func configureAPI(api *{{.Package}}.{{ pascalize .Name }}API) http.Handler {\n   return setupGlobalMiddleware(api.Serve(setupMiddlewares))\n }\n\n+// The TLS configuration before HTTPS server starts.\n+func configureTLS(tlsConfig *tls.Config) {\n+  // Make all necessary changes to the TLS configuration here.\n+}\n+\n // The middleware configuration is for the handler executors. These do not apply to the swagger.json document.\n // The middleware executes after routing but before authentication, binding and validation\n func setupMiddlewares(handler http.Handler) http.Handler {\ndiff --git a/generator/templates/server/server.gotmpl b/generator/templates/server/server.gotmpl\nindex bba5ad3..65b9134 100644\n--- a/generator/templates/server/server.gotmpl\n+++ b/generator/templates/server/server.gotmpl\n@@ -110,6 +110,9 @@ func (s *Server) Serve() (err error) {\n        httpsServer.TLSConfig.MinVersion = tls.VersionTLS11\n        httpsServer.TLSConfig.Certificates = make([]tls.Certificate, 1)\n        httpsServer.TLSConfig.Certificates[0], err = tls.LoadX509KeyPair(string(s.TLSCertificate), string(s.TLSCertificateKey))\n+\n+       configureTLS(httpsServer.TLSConfig)\n+\n        if err != nil {\n                return err\n        }\n```\n Hi, I used swagger to build a simple go server, got this issue:\n**the required flags `--tls-certificate` and `--tls-key` were not specified**\nso how can i set the -tls-certificate and tls-key\n I also ended up here coming from the [todo list tutorial](https://github.com/go-swagger/go-swagger/blob/master/docs/tutorial/todo-list.md) . Would you take a PR to add in the `--scheme http` to that doc? FWIW, I'm getting a 404 rather than the expected 501 when I run the generated server.  Error messages improved. By example:\n\nOld message is:\n&{%!s(token.Pos=1478849) %!s(_ast.FieldList=&{1478853 [0xc8217db440] 1478870}) %!s(_ast.FieldList=&{1478872 [0xc8217db480 0xc8217db4c0] 1478888})} is unsupported for a schema\n\nNew message is:\nExpr (/path/src/gopkg.in/mgo.v2/session.go:386:13) is unsupported for a schema\n  This gives handlers access to the http.Request object itself via Params.\n\nI liked this approach better than just supplying the RequestURL, because now handlers can build the URLs themselves or use the http.Request as per their need.\n  This PR adds a serve-ui command to swagger\n\nThe command is pretty simplistic. \n1. Given a swagger spec path, it loads the spec \n2. Host the spec.json on a server  \n3. Open petstore.swagger.io with the locally hosted spec. \n\nThis would allow users to get a quick view of their specification\n\n<!-- Reviewable:start -->\n\n---\n\nThis change is [<img src=\"https://reviewable.io/review_button.svg\" height=\"35\" align=\"absmiddle\" alt=\"Reviewable\"/>](https://reviewable.io/reviews/go-swagger/go-swagger/425)\n\n<!-- Reviewable:end -->\n  A couple of somewhat related questions:\n\nQ1. Currently, swagger parameters are defined as standalone typed structures listing all related paths.\n\nIs there any possibility to group parameters under each related path?  The parameter definition could be still done once, and referenced from multiple paths.  This would greatly improve maintainability of our Swagger Go docs.\n\nQ2. In generated swagger specs, parameter definitions are duplicated for each path.\n\nIs it possible, instead, to generate swagger parameters section and reference it from each relevant path?\n\nThanks.\n I have the same question as #1 above.  Any word?  Thanks!\n  Hi,\nGo-swagger looks great for me. But what about websocket support on server side? My application will be with chat component and I want use websockets (web and mobile clients).\n\nMaybe I miss something and there is better way to implement this.\n\nThanks.\n\n// Do you have google group or another place for questions?\n  Would love to see this happen, and help out where I can.  We use go-swagger currently at [http://stoplight.io/](url), and when I was evaluating it, I almost passed it up because we were looking for a way to just parse and load a swagger file.\n\nIf everything were to be broken up into libraries, I feel like it would be a lot more approachable.  Go-Swagger can do a lot of cool things, and navigating the source code was daunting.  One day Stoplight might do code generation, for apis, but because we don't need that now I almost passed on this awesome project.  I have submitted a few pull requests to fix some issues in the spec package, and even though all the tests were passing in the spec package, my changes broke some tests in another packaged that I knew nothing about, and had to fix.\n\nThat is all for now.\n It would be nice to serve swagger-ui in a more user-friendly way. \n\nAlso, for better compatibility with the Docker `go-wrapper` command, can `main.go` be moved in the root `$projectFolder` i.e. `test/test-api/main.go` from `test/test-api/cmd/test-server/main.go`?\n\nDocker build errors: \n- `can't load package: package test/test-api: no buildable Go source files in /go/src/test/test-api`\n- `can't load package: package test/test-api/cmd/test-server: no buildable Go source files in /go/src/test/test-api/cmd/test-server`\n\nAnother cool thing to have would be database schema/migrations auto-gen. Something like [slick-codegen](http://slick.typesafe.com/doc/2.1.0/code-generation.html).\n I am the author of the [swagger2](https://github.com/emicklei/swagger2) package which is intended to be a rewrite/upgrade of [go-restful/swagger](https://github.com/emicklei/go-restful/tree/master/swagger).\n\nThe goal of this swagger2 project is to separate the Swagger part from the REST part, allowing others to use the package independently by provinding only the specification objects. I was planning to create another (sub?) package for building model objects from Go types (as I already created 1.2).\n\nAs discussed offline with one of the authors of go-swagger, I would like to see go-swagger to be split into multiple repos for the most part because of handling the dependencies. Applications that import go-swagger (using vendoring) should not be forced to include the whole package deal (e.g. generators).\n\nIf the go-swagger project would separate the spec part into a new repo then I will probably drop my swagger2 project and collaborate on that instead.\n I commented about this on another issue but I'm not sure if you saw it, so I'll repeat it here.  What I'd really like to see is a structure of generated code that allows it to stay as a completely standalone module that requires no editing of the files within.  I have taken to simply ignoring most of the generated `main()`, `configure_xyz.go`, and `server.go` code and duplicating their functionality in external modules in order to avoid the mess that occurs when I regenerate from the spec and the structure of files I've edited has changed (regarding edits due to go-swagger changes, not necessarily due to changes to my spec).  It's much easier to regenerate from the spec and then diff that entire tree with the knowledge that I'm only looking at differences in generated code, not adding in the complications of my hand-edits.\n\nSo my recommendation is that the entire `cmd` directory, as well as `configure_xyz.go` and `server.go` be factored out into a separate \"example\" directory to indicate how you _could_ use the generated code, but with the expectation that people are _actually_ going to integrate the generated code into a codebase that doesn't necessarily follow that structure.\n Oh, yeah, I meant to throw in a comment to the effect that \"this may not be specifically relevant to this issue, but so long as you're reorganizing things I want to mention it so you have it in mind while moving things around.\"  :)  Thanks.\n  Title says it all.\n  closes #415 \n  Signed-off-by: Tom Pytleski pytlesk4@gmail.com\n\nCloses #399 \n  ## Problem statement\n\n`unable to resolve embedded struct for: RankBy`\n## Error cause\n\nRankBy is a custom type which appears to be the source of the error parsing it.\n\n```\n// RankBy specifies the order in which results are listed.\n    RankBy\n```\n\nhttps://godoc.org/googlemaps.github.io/maps#RankBy\n## Steps to reproduce\n\n```\nimport (\n    \"googlemaps.github.io/maps\"\n)\n\n// NearbySearchRequest\n//\n// swagger:parameters Nearby\ntype NearbySearchRequest struct {\n    maps.NearbySearchRequest\n}\n\n// PlacesNearby swagger:route POST /places/nearby places Nearby\n//\n// Search for a place nearby\n//\n//\n// Produces:\n// application/json\n//\n// Responses:\n// 200: maps.PlacesSearchResponse\nfunc (s *Server) PlacesNearby(w http.ResponseWriter, r *http.Request) {\n}\n```\n in this case is better to do:\n\n``` go\n// swagger:response NearbySearchResponse\ntype NearbySearchResponse struct {\n   // In: body \n   Body maps.PlacesSearchResponse\n}\n```\n\nand this structure is not necessary to use in your handler. it should exists just for swagger. \n In: body in the response isn't necessary, it works without this.\n\nThe request part is what is throwing an error, specifically looking for RankBy \n\n```\n// NearbySearchRequest\n//\n// swagger:parameters Nearby\ntype NearbySearchRequest struct {\n    maps.NearbySearchRequest\n}\n```\n I'm seeing the same thing with the following file:\n\n``` go\npackage main\n\nimport uuid \"github.com/satori/go.uuid\"\n\ntype Foo struct {\n    uuid.UUID\n}\n\n// swagger:model\ntype Bar struct {\n    Id Foo\n}\n\nfunc main() {\n    print(1)\n}\n```\n\nWhen I run swagger I get the following error:\n\n```\n~/tmp$ swagger generate spec -m ./... -o swagger.json                                                                                                                                                                          \nunable to resolve embedded struct for: &{uuid UUID}\n```\n\nUUID is defined in the library as `type UUID [16]byte`\n\n@casualjim any ideas?\n Hey there, long time indeed. Funny that we both ended up in Go-land now :). Hope everything is going well for you.\n\nWhere would that annotation go? Do I need to open a PR on https://github.com/satori/go.uuid/, or can I just do it in my code?\n @casualjim that worked, thanks!\n  Has anybody used go-swagger to do end-to-end mutual TLS connections with client and server certificates issued from a custom CA?  I am having quite some difficulty, although I haven't exhaustively debugged it yet.  Just thought I'd ask here to see if it's known whether or not it will work.\n\nThe basic approach is to modify server.go to set `httpsServer.TLSConfig.ClientAuth = tls.RequestClientCert` and to override the client Transport's `TLSClientConfig` to have a `RootCAs` certpool which I've added my CA root cert to.  The client is reporting \"x509: certificate signed by unknown authority.\"\n\nI _am_ able to get this to work with a simple no-swagger client using net/http directly to issue an HTTPS request with the same certs, so I don't think it's something wrong with the certs themselves.\n This turned out to be me flubbing the path to the root cert file, so it's working now.  Regarding the server, I've worked around it temporarily by modifying my XyzHandler to pass the http.Request in along with the XyzParams:\n\n```\ntype GetTestHandlerFunc func(GetTestParams, *http.Request) middleware.Responder\n```\n\nThis lets the handler grab the TLS context and examine the certs to do client validation.\n\nI'm not too enthused about this solution but it is working at the moment.  Perhaps I'll think of something better.  I could also do the client validation in some middleware but I need a way for middleware to set some app-specific context that the method handlers can see, because ultimately I want my method handlers to make some decisions based on the client's certificate.  If you have any suggestions I'm all ears.\n yes, it fixes it. However, one thing I don't like it is a configuration options for HTTPS. I am forced to add them into different group of CLI parameters, which means --ca-cert option is teared apart from private key and cert config.\n This has veered off from having anything to do with custom root certs, of course.  It looks like some of the recent changes address the ability to see the TLS context in the request handlers, but I'm not sure 53c4f85 is the one I'd cite.  I have yet to try it out, but I saw a change go by that allowed access to the http.Request in the handlers, which would be perfect, as not only does it enable looking at the connection directly in the handlers, but it also allows one to use something like gorilla/context to pass arbitrary info between middleware and handlers.\n I'm going to go ahead and close this even though I haven't tried it out.  If it doesn't work when I finally do, a new bug will make more sense anyway.\n  Added a mapping for application/.*raw-stream to bin mapping for\nmimetypes.  We have a specific vendor mimetype that ends in\nraw-stream that we would like to get handle.  If this isn't there,\nwe can get a panic during runtime in some code generation.  If\nthe generated file restapi/operations/xxx_api.go refers to the\nmimetype as the defaultConsumes or defaultProduces, our server\nwill panic.  Adding this resolves the panic.\n  ## Problem statement\n\nI have follow response:\n\n``` go\n// swagger:response SuccessResponse\ntype SuccessResponse struct {\n   // In: body\n   Data ResponseData `json:\"data\"`\n} \ntype ResponseData struct {\n   Field1 string `json:\"field1\"`\n   Field2 string `json:\"field2\"`\n}\n```\n\nExpected schema:\n\n``` json\n{\n  \"responses\": {\n    \"ErrorResponse\": {},\n    \"SuccessResponse\": {\n      \"description\": \"SuccessResponse is success response\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/SuccessResponse\"\n      }\n    }\n  }\n}\n```\n\nbut getting:\n\n``` json\n{\n  \"responses\": {\n    \"ErrorResponse\": {},\n    \"SuccessResponse\": {\n      \"description\": \"SuccessResponse is success response\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/ResponseData\"\n      }\n    }\n  }\n}\n```\n\nI know this is expected working behavior.\nProbably you can advice what can I do. \nI don't want to add additional level of structs just to support pretty output \n\nmaybe to add additional swagger tag, like `swagger:responseJSON` or add additional param, e.g `swagger:response [json] [name]`\n In this case I'm getting correct responses with ref to `SuccessResponse`, but wrong model without `Data` field:\n\n``` json\n{\n   \"SuccessResponse\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"field\": {\n          \"type\": \"string\",\n          \"x-go-name\": \"Field\"\n        }\n      },\n      \"x-go-name\": \"ResponseData\",\n      \"x-go-package\": \"test_scan/responses\"\n    }\n}\n```\n\nlooks like there are 2 options:\n1. Add body struct\n2. Something new in go-swagger. :)  \n  While the With methods are more readable and less boring to write,\nthe return type of With methods make it impossible to abstract common\ninterface out. Then it's hard to have a factory method to generate these\nobjects. Though most of the time, we are generating similar response,\nwe cannot write generic code because there's no common interface.\n\nFor example, Every response type has WithPayload method like this:\n\n`\nfunc (r *ResponseType) WithPayload(payload *models.Error) *ResponseType \n`\n\nThis patch adds a setter method for each field, then the method becomes:\n\n`\nfunc (r *ResponseType) SetPayload(payload *models.Error)\n`\n\nFor all the response type that has models.Error payload, we can have\ncommon interface. Then it's possible to have a factory method that\ncreates such response type with specific error payload. \n  If allowed list is empty, it means it doesn't matter which content type it is.\n  ## Problem statement\n\nI'm generating server stubs and basically need to hook some code to run after all the flags have been parsed but before server starts serving requests. I think this is a standard use case where you want to connect to storage (redis, postgres, ...) or load some configuration file but you want to get the info about the location of storage or file from command line flags.\n\nIn go-swagger 0.2.17. the `main.go` file was not overwritten after the initial generation unless you specifically asked for that so we could just add our own hook there. In swagger 0.4.0. the only file never overwritten is `config_xxx.go`. Its `configureAPI` function is called before flags are parsed so this can not be used.\n\nThe only option is to lazily connect/initialize in a request handler but I would rather not do that. Now I am using my own `main.go` and removing the go-swagger generated one.\n\nIs there a way to do this that I haven't thought of or is this use case not supported at the moment?\n Awesome. Thanks for the quick reply.\n\nI have taken a look at the PR. Looks like exactly what I need.\n I need the same to initialise a db connection once and not on every request , but when I put some code inside the `configureFlags` that relies on the some custom flags it fails to use the default values.\r\n\r\nhere is the gist\r\nhttps://gist.github.com/krasi-georgiev/af1709549e58768c3b57150a26c8df67\r\n\r\nby the way the file says \r\n`// Code generated by go-swagger; DO NOT EDIT.` \r\nand than in the middle \r\n`// This file is safe to edit. Once it exists it will not be overwritten`\r\n\r\nwhich exclude each other :)  In command `generate model ...`, It's not necessary to force `--name` as required. If we don't specify a name, it should generate all models.\n  ## Problem statement\n\nI'm unable to run the spec generator on my app. What am I doing wrong?\nhttps://gist.github.com/morenoh149/e44be6819bde86f52e7e\n\nI get many errors of the form `... .go:10:2: could not import github.com/facebookgo/stackerr (cannot find package \"github.com/ ...`\n## Steps to reproduce\n\nexecute `$ swagger generate spec -o ./swagger.json` in project folder\n go version go1.5.3 darwin/amd64\n\nI believe I have vendoring enabled yes. (Not sure I'm new).\n I have `GO15VENDOREXPERIMENT=1` set in my environment and my application compiles and runs without complaints. It must be having issues finding the dependencies\n\nmy dir structure is\n\n```\n/api <- go app\n/vendor <- go deps\n```\n\nthis is probably why it's having issues\n I execute the command from the api dir. I'll join.\n I am running into this issue when trying to generate a swagger spec as well. I believe it is because I installed go with home brew on a mac so my library paths are different.\n\nCommand I am running: `swagger generate spec`\nFile I am trying to generate with: https://gist.github.com/gsquire/cce277b4bd10ba283f4522e896dc91d6\n\nError trace:\n\n``` sh\n/Users/gsquire/scratch/test-swagger.go:14:2: could not import fmt (cannot find package \"fmt\" in any of:\n    /usr/local/go/src/fmt (from $GOROOT)\n    /Users/gsquire/gopath/src/fmt (from $GOPATH))\n/Users/gsquire/scratch/test-swagger.go:15:2: could not import net/http (cannot find package \"net/http\" in any of:\n    /usr/local/go/src/net/http (from $GOROOT)\n    /Users/gsquire/gopath/src/net/http (from $GOPATH))\n/Users/gsquire/scratch/test-swagger.go:18:14: undeclared name: http\n/Users/gsquire/scratch/test-swagger.go:18:38: undeclared name: http\n/Users/gsquire/scratch/test-swagger.go:19:2: undeclared name: fmt\n/Users/gsquire/scratch/test-swagger.go:23:2: undeclared name: http\n/Users/gsquire/scratch/test-swagger.go:24:2: undeclared name: http\n```\n Yes, it compiles and my $GOPATH is set up as well. Does my gist not work?\n Are you on a Linux box? Like I said, I think it's a path issue since home brew installs it in a different location based on my output. I'll have to try on something that isn't mac.\n Ok then...I'm stumped. Thanks for proving me wrong, I guess I need to try some other things.\n I uninstalled go-swagger from brew, installed it from source and it worked. So strange. And no, I installed it through brew:\n\n``` sh\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/gsquire/gopath\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.6.1/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.6.1/libexec/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n```\n  ## Problem statement\n\nIn an object definition, some properties (integer, string, etc.) are defined as \"required\".\nThe zero values (0, \"\") are all valid values of them. However, the go-swagger validation package `github.com/go-swagger/go-swagger/httpkit/validate` rejects these zero values as invalid.\n\nIt's now introducing big problems for my application when my user wants to clear some properties (set to 0, or \"\", they are all valid values in the application's logic) in the data models, the server simply reject the request as they are invalid.\n## Swagger specification\n\n```\nswagger: '2.0'\ndefinitions:\n  Property:\n    description: A property of a resource\n    properties:\n      propType:\n        type: string\n        description: discriminating type of the property\n      computed:\n        type: boolean\n        description: is property computed\n      intval:\n        type: integer\n        format: int64\n      strval:\n        type: string\n    required:\n      - propType\n      - intval\n      - strval\n```\n\nThe generated code is\n\n```\nswagger:model Property\n*/\ntype Property struct {\n\n    /* is property computed\n     */\n    Computed *bool `json:\"computed,omitempty\"`\n\n    /* Intval intval\n\n    Required: true\n    */\n    Intval int64 `json:\"intval,omitempty\"`\n\n    /* discriminating type of the property\n\n    Required: true\n    */\n    PropType string `json:\"propType,omitempty\"`\n\n    /* Strval strval\n\n    Required: true\n    */\n    Strval string `json:\"strval,omitempty\"`\n}\n```\n It's unreasonable to put `omitempty` for all required properties. In the json generated from the model, all these properties get lost with zero values which are valid values.\n Related, but I would not say \"duplicated\". Because #300 is the opposite (required fields are pointers). In my situation, the fields generated are not pointers. I feel #300 should be fixed, this bug is related to validation logic, not duplicate of #300\n  I'm still getting used to how things in go-swagger are organized, but my desire is to have the API implementation live in an entirely different module so that I don't have to edit any of the files that live amongst the generated code.  I am currently modifying configure_xxx.go to just do a one-line call out to a server which exports a .ConfigureAPI method and then implements all the XYZHandlerFuncs itself and hooks them to 'api'.  However, it might be cleaner if the generated API defined an interface that contains all the handlers I need to provide and I could just pass something which implements that into operations.NewXXXAPI from main.\n I started putting operation implementations under restapi/implementations. It would be great if configure_***.go file automatically binds to implementations.xxx methods when models are updated. The generator can add stub implementation if the implementation files do not exist, but leave existing ones in place.  Handling of the following field:\n\n``` go\ntype MyStruct struct {\n  Field string\n}\n\ntype MyStructs []*MyStruct\n\ntype SomethingHere struct {\n   MyStr MyStructs\n}\n```\n  ## Problem statement\n\nI want to create a `Link` header containing information for paginating content. What's the best way to create values based on the swagger path/request URL? \n\n``` go\napi.BooksListBooksHandler = books.ListBooksHandlerFunc(func() middleware.Responder {\n    var list = []*models.Book{\n        &models.Book{Title: \"Winnie the Pooh\", Summary: \"Famous children's book\"},\n    }\n\n    // How to get the URL based on the request?\n    links := []string{\n        `<https://api.bookstore.com/v1/?page=2>; rel=\"next\"`,\n        `<https://api.bookstore.com/v1/?page=13>; rel=\"last\"`,\n    }\n    return books.NewListBooksOK().WithLink(strings.Join(links, \",\")).WithPayload(list)\n})\n\n```\n## Swagger specification\n\n``` yaml\nswagger: \"2.0\"\ninfo:\n  title: Swagger Sample\n  description: Sample API Playground.\n  version: 1.0.0\nbasePath: /v1\nschemes:\n- http\nconsumes:\n- application/vdn.sample.v1+json\nproduces:\n- application/vdn.sample.v1+json\n\npaths:\n  /books:\n    get:\n      summary: List all books\n      operationId: listBooks\n      tags:\n        - books\n      responses:\n        200:\n          headers:\n            Link:\n              type: string\n              example: \"<https://api.bookstore.com/books?page=2>; rel=\\\"next\\\",\n      <https://api.github.com/resource?page=5>; rel=\\\"last\\\"\"\n          description: An array of books\n          schema:\n            type: array\n            items:\n              $ref: \"#/definitions/Book\"\n        default:\n          description: generic error response\n          schema:\n            $ref: \"#/definitions/Error\"\n\ndefinitions:\n  # Book\n  Book:\n    type: object\n    required:\n      - title\n      - summary\n    properties:\n      title:\n        type: string\n        example: Winnie the Pooh\n      summary:\n        type: string\n        example: Famous children's book\n\n  # Error\n  Error:\n    type: object\n    readOnly: true\n    properties:\n      code:\n        type: integer\n        format: int64\n        example: 400\n      message:\n        type: string\n        example: Unexpected error\n    required:\n      - message\n\n```\n I'm interested in this as well, since I'm currently trying to figure out a good way to access the TLS client info from inside a handler func.  I figure I can do some middleware trickery to get at the http.Request but I'm curious if I'm overlooking some more straightforward way to plumb it down into the handler.\n  @casualjim let me know what you think!\n  NewServer no longer configures the API but instead relies on\nConfigureAPI call to do it.\n\nAlso add a new ConfigureFlags method so that we can add command line\nflags from the handlers.\n\nThis way we can get additional flags from the handlers and initialize\nthem once\n\nSigned-off-by: S.\u00c7a\u011flar Onur conur@vmware.com\n    Our legacy application supports Swagger paths like the following:\n\n```\nPOST /v3/items/{name}?type=key&size={size}\n```\n\nwhere both _{name}_ and _{size}_ are defined as path parameters.\n\nIn Go-Swagger, we cannot include '?' and '=' characters into the path definition.\n\nWhat would be the best suggestion for us, if we have to preserve this style?  \n\nOn one side, we do not wish to add query parameter _{type}_ with fixed value 'key' (we assume it will appear in the generated Java API), and on other side, we cannot change the path to `/v3/items/key/{name}`, even if we think it is a good idea.\n\nWe are considering a workaround using _%3F_ for '?' and _%3D_ for '='.\n  [Swagger-codegen](https://github.com/swagger-api/swagger-codegen) can now generate Go libraries too. Which one should I use? Could somebody please document it with something like a feature matrix comparing the two, so it is easier for people to get the best tool for the job they need done?\n This explanation should definitely go to the first/landing page.\n Both?\n The explanation is now explicitly defined on both the readme and goswagger.io, since quite a while now. Closing this issue.  According to JSON reference spec http://tools.ietf.org/html/draft-pbryan-zyp-json-ref-02#section-4 reference must be represented by valid URI which is not only a \"link\" with schema, but also a path to local file.\n\nThis PR supports #159 \n @casualjim thanks! I'm sorry, didn't notice the problem on my local, because it didn't reproduce at the first time. Following test runs revealed the problem.\n  I was trying to serve swagger-ui from the generated API Server and I didn't find a straightforward enough way in the docs, so I've created my own swagger-ui middleware:\n\n``` go\nfunc setupGlobalMiddleware(handler http.Handler) http.Handler {\n    return uiMiddleware(handler)\n}\n\nfunc uiMiddleware(handler http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // Shortcut helpers for swagger-ui\n        if r.URL.Path == \"/swagger-ui\" || r.URL.Path == \"/api/help\" {\n            http.Redirect(w, r, \"/swagger-ui/\", http.StatusFound)\n            return\n        }\n        // Serving ./swagger-ui/\n        if strings.Index(r.URL.Path, \"/swagger-ui/\") == 0 {\n            http.StripPrefix(\"/swagger-ui/\", http.FileServer(http.Dir(\"swagger-ui\"))).ServeHTTP(w, r)\n            return\n        }\n        handler.ServeHTTP(w, r)\n    })\n}\n```\n\nCan this be achieved any easier?\n\nThank you\n What do you say if we add swagger-ui as git submodule, include this middleware in your binary and update the docs?\n awesome stuff. \n\n@casualjim Could you let me know the status.\n\nI noticed the architecture is staying very close to the golang way. For example using .gotmpl, etc.\n\nHere my tasks list:\nDevelopers UI\n- Would be great to use golang templates to run it. Prefer not to pollute with other stuff, just lean and easy to refactor as needs change.\n\nProxy JS\n- Golang based generators for the Javascript\n- Try out use fetch API, as its the react approach and has full polyfil now for all browser too.\n  Signed-off-by: Tom Pytleski pytlesk4@gmail.com\n\nCloses #367 \n thanks!  that hurt my head!\n Testing 1.5 now, strange error though.\n  ``` js\nvar broken = {\n  \"definitions\": {\n    \"car\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"make\": {\n          \"type\": \"string\"\n        },\n        \"brand\": {\n          \"items\": {\n            \"$ref\": \"#/definitions/brand\"\n          }\n        }\n      }\n    },\n    \"tag\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"value\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"brand\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"id\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n}\n```\n\n``` go\nfunc TestItemsExpansion(t *testing.T) {\n        spec := new(Swagger)\n    err = json.Unmarshal(broken, spec)\n    assert.NoError(t, err)\n\n    resolver, err := defaultSchemaLoader(spec, nil, nil)\n    assert.NoError(t, err)\n\n    schema := spec.Definitions[\"car\"]\n    oldBrand := schema.Properties[\"brand\"]\n    assert.NotEmpty(t, oldBrand.Items.Schema.Ref.String())\n    assert.NotEqual(t, spec.Definitions[\"brand\"], oldBrand)\n\n    err = expandSchema(&schema, resolver)\n    assert.NoError(t, err)\n\n    newBrand := schema.Properties[\"brand\"]\n        // Assertions below are going to fail.\n    assert.Empty(t, newBrand.Items.Schema.Ref.String())\n    assert.Equal(t, spec.Definitions[\"brand\"], *newBrand.Items.Schema)\n}\n```\n  We're trying to detect an empty body in a request.  I added \"required\" to the body parameter, but it doesn't seem to make a difference.  If we make a request with no body, our handler gets called and the param object has an empty body generated.\n\n`\"name\": \"container\",\n          \"in\": \"body\",\n          \"description\": \"Container to create\",\n          \"schema\": {\n            \"$ref\": \"#/definitions/ContainerConfig\"\n          },\n          \"required\": true\n`\n\ngenerates\n\n`type CreateParams struct {\n    /*Container to create\n      Required: true\n      In: body\n    */\n    Container *models.ContainerConfig\n`\n\nThe expected response is a 500 error with EOF or any type of message.  It's also expected that the middleware handles this and our handler doesn't get called.  The actual result is our handler gets called and Container is filled with an empty models.ContainerConfig.  We need a way to detect an empty body and respond to user requests appropriately.  Even if it isn't handled in the middleware, when it gets to our handler and CreateParams.Container == nil for cases where the body is missing, that would work for us.\n [swagger.json.zip](https://github.com/go-swagger/go-swagger/files/164056/swagger.json.zip)\n\nAttached is a file you can use to test against.  It has one simple POST operation.\n\nExample Run:\n\n$> curl -X POST http://127.0.0.1:49000/create\n\"operation .Create has not yet been implemented\"\n\n# \n\nComments:\n\nOur handler was reached, which is fine.  However, the params.Config is not nil.  It's the same result we had prior to the change.  What I see when I debug this is that in BindRequest,\n\n`if err := route.Consumer.Consume(r.Body, &body); err != nil {`\n\nThe result is err == nil so the check for required is never performed.\n  I added the following to a swagger spec path operation:\n\n```\n    \"consumes\": [\n      \"application/json\",\n      \"application/octet-stream\"\n    ],\n```\n\nResult: panic\n\n```\n    \"consumes\": [\n      \"application/json\"\n    ],\n```\n\nResult: no panic\n# \n\nIn the panic scenario, the code generation doesn't always create code that panics.  With the same spec, two different code generation may result in different results.  I have captured the file diff between two generations where one succeeds and the other fails.[docker_api-panic.go](https://files.zenhub.io/56d9e17bae23ad603d73432b)\nUploaded using [**ZenHub.io**](http://www.zenhub.io)\n[docker_api-nopanic.go](https://files.zenhub.io/56d9e19cae23ad603d73432d)\nUploaded using [**ZenHub.io**](http://www.zenhub.io)\n I believe that is the case.  The request I'm making has no body.\n I tracked down the problem to docker_api.go in the following area:\n\n```\n    defaultConsumes: \"application/json\",\n    defaultProduces: \"application/json\",\n```\n\nif those defaults to application/octet-streaming during a generation, it panics.\n 1) Get VIC sources\n2) $> make dockerapi\n3) run the server\n4) curl -X GET http://.../v1.22/_ping\n\nAs in the comments above, it depends on what is generated in docker_api.go file.  If the defaults are not application/json, you will get a panic.  From one generation to another, the defaults are changed.  Our swagger specs have numerous mime types for consumers/producers.  How do you chose which mime are defaults?  Is it just random?\n\n# \n\n```\ncurl -i -X GET -H 'Accept: */*' http://127.0.0.1:49000/_ping\n2016/03/08 09:05:42 http: panic serving 127.0.0.1:32934: runtime error: invalid memory address or nil pointer dereference\ngoroutine 12 [running]:\nnet/http.(*conn).serve.func1(0xc820249580)\n    /usr/local/go/src/net/http/server.go:1389 +0xc1\npanic(0x8e20e0, 0xc82000e140)\n    /usr/local/go/src/runtime/panic.go:426 +0x4e9\ngithub.com/vmware/vic/apiservers/docker/restapi/operations/misc.(*PingOK).WriteResponse(0xc82042aa60, 0x7f790ffd0220, 0xc8203580d0, 0x0, 0x0)\n    /home/loc/work/go/src/github.com/vmware/vic/apiservers/docker/restapi/operations/misc/ping_responses.go:37 +0xd8\ngithub.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware.(*Context).Respond(0xc8201d9c40, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180, 0xc820329600, 0x1, 0x1, 0xc8202c3260, 0x8e3c00, 0xc82042aa60)\n    /home/loc/work/go/src/github.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware/context.go:384 +0x674\ngithub.com/vmware/vic/apiservers/docker/restapi/operations/misc.(*Ping).ServeHTTP(0xc82034a700, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /home/loc/work/go/src/github.com/vmware/vic/apiservers/docker/restapi/operations/misc/ping.go:52 +0x20b\ngithub.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware.newOperationExecutor.func1(0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /home/loc/work/go/src/github.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware/operation.go:23 +0x6f\nnet/http.HandlerFunc.ServeHTTP(0xc8203295e0, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\ngithub.com/vmware/vic/vendor/github.com/casualjim/curler.New.func1(0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /home/loc/work/go/src/github.com/vmware/vic/vendor/github.com/casualjim/curler/curler.go:43 +0xaaa\nnet/http.HandlerFunc.ServeHTTP(0xc820167a70, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\ngithub.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware.newRouter.func1(0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /home/loc/work/go/src/github.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware/router.go:85 +0x663\nnet/http.HandlerFunc.ServeHTTP(0xc82040ddc0, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\ngithub.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware.specMiddleware.func1(0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /home/loc/work/go/src/github.com/vmware/vic/vendor/github.com/go-swagger/go-swagger/httpkit/middleware/spec.go:36 +0x1d1\nnet/http.HandlerFunc.ServeHTTP(0xc8202a6580, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /usr/local/go/src/net/http/server.go:1618 +0x3a\nnet/http.serverHandler.ServeHTTP(0xc820248e80, 0x7f790ffd0220, 0xc8203580d0, 0xc8202c3180)\n    /usr/local/go/src/net/http/server.go:2081 +0x19e\nnet/http.(*conn).serve(0xc820249580)\n    /usr/local/go/src/net/http/server.go:1472 +0xf2e\ncreated by net/http.(*Server).Serve\n    /usr/local/go/src/net/http/server.go:2137 +0x44e\n```\n I think I may know what this is.  I'm trying something.\n Ok, this isn't a bug.  This is noob Swagger user error.  I forgot to add producer/consumers for the new members in api in configure_api.go.  I tried it, and I'm no longer getting any panics.  You can close this issue.\n  Add plain text consumer and producer and use it in client runtime and generator support. Fixes #360.\n  Add XML consumer and producer and use it in client runtime and generator support. Fixes #359.\n  We need to be able to generate clients for more than one APIs within the same project. Some definitions are shared among these APIs, so we would like to put them in a separate YAML file, e.g. `definitions.yaml` and refer to them from the main swagger files using JSON references such as `definitions.yml#/definitions/Task`. However, this is currently not possible with go-swagger. For some reason, the definitions are not found in this case and no models are generated.\n  We need to be able to generate clients for more than one APIs within the same project. Note that these are really different APIs served by different endpoints, so they can't be combined. Some definitions are shared among these APIs, so we want all of them to use the same generated `models/*.go`. I couldn't find a way to do this without renaming files and types after each generation, even though I was careful to use different operation names.\n\nThe main points of collision are `client/operations/operations_client.go` and `client/<app>_client.go`, since some of the generated filenames (e.g. `operations_client.go`), type names (e.g. `Client`), and function names (e.g. `New`) are too generic and don't contain the application name. This issue could be addressed by ensuring that all such names contain the application name, e.g. `slmp_operations_client.go`, `SlmpClient`, `NewSlmp`, etc. Alternatively, a different directory / package structure could be used by the generator, e.g. `client/<app>/` instead of just `client/`\n\nTo address this issue, we currently do the following after each API generation:\n- Move `client/operations/operations_client.go` to its own file, e.g. `mv client/operations/operations_client.go client/operations/slmp_operations_client.go`\n- In `client/operations/slmp_operations_client.go`, rename the type `Client` to `SlmpClient`, and the function `NewClient` to `NewSlmpClient`.\n- In `client/slmp_client.go`, rename the variable `Default` to `DefaultSlmp`, and the functions `NewHTTPClient` and `New` to `NewSlmpHTTPClient` and `NewSlmp`.\n Thanks, this works perfectly! Sorry, I didn't know about this argument, as I didn't find it in the documentation. Only now I thought about running `swagger generate client --help` and saw the various options available there.\n  We are using a swagger model in which the produced and consumed media type for all operations is \"application/xml\". The model contains \"wrapped\" XML arrays, for example:\n\n``` yaml\nfiles:\n  type: array\n  items:\n    $ref: \"#/definitions/File\"\n  xml:\n    namespace: http://www.sap.com/lmsl/slp\n    wrapped: true\n```\n\nCurrently, array types are always generated simply as arrays, e.g. `type Files []*File`. Instead, if `xml.wrapped` is `true`, they should be generated as structs containing arrays. There should also be a field of type `xml.Name` that contains the namespace specified in `xml.namespace` and the correct XML element name (see #354). \n\n``` go\ntype Files struct {\n    XMLName xml.Name `xml:\"http://www.sap.com/lmsl/slp files\"`\n    Files   []*File  `xml:\"File,omitempty\"`\n}\n```\n\nConsequently in the `Validate` function, `m.Files` should be used instead of `m` to refer to the array.\n\nSimilarly, arrays within object types are also always generated simply as arrays, e.g. `Parameters []*Parameter`. Instead, if `xml.wrapped` is `true`, they should also be generated as structs containing arrays, for example:\n\n``` go\ntype ProcessParameters struct {\n    Parameters []*Parameter `xml:\"Parameter,omitempty\"`\n}\n\ntype Process struct {\n...\n  Parameters ProcessParameters `xml:\"parameters,omitempty\"`\n}\n```\n\nI believe in this case it's better to generate a named struct type instead of anonymous one, as the corresponding field is then much easier to initialize.\n We're using both JSON and XML. \n\nI like this approach rather than creating `type StuffThings []StuffThing`or something like that when wrapped=true. \n\n```\ntype Stuff struct {\n    XMLName xml.Name `json:\"-\" xml:\"http://www.sap.com/lmsl/slp tuple\"`\n    Name string `json:\"name\" \n    StuffThings []StuffThing `json:\"stuffThings,omitempty\"    xml:\"StuffThings>StuffThing,omitempty\"` \n}\n```\n  We are using a swagger model in which the produced and consumed media type for all operations is \"application/xml\". Sometimes, the XML element names used are different from the generated type names, and all elements belong to a custom XML namespace, for example:\n\n``` yaml\ntuple:\n  type: object\n  properties:\n...\n  xml:\n    namespace: http://www.sap.com/lmsl/slp\n```\n\nIn all generated model structs, there should be a field of type `xml.Name` that contains the namespace specified in `xml.namespace` and the correct XML element name, for example:\n\n``` go\ntype Tuple struct {\n    XMLName xml.Name `xml:\"http://www.sap.com/lmsl/slp tuple\"`\n```\n\nAs reported in #353, there is currently no support for media type \"application/xml\" at all. However, once it is added, naming of XML elements and support for XML namespaces should be considered as well.\n  Related to #241.\n @casualjim thanks for merging!\n The commit ea284b6 causes the example \"fixtures/goparsing/petstore\" can not generate the swagger spec.\n\nUnder the folder \"fixtures/goparsing/petstore/petstore-fixture\", run the command: swagger.exe  generate spec -o ./swagger.json. It reports the error: unknown primitive \"error\".\n\nAfter I revert the commit ea284b6, the generate spec command can correctly work.\n\n@fsouza  I'm a fresher on go-swagger. Could you help to have a look at this problem? Thanks.\n Hi @supereagle, that's because you haven't recompiled swagger.exe. Please try running `go get -u github.com/go-swagger/go-swagger/cmd/swagger`.\n @fsouza  Thanks for your help. \n  If I define a boolean parameter in an operation, the generated code converts the boolean to a string.\n\nTake for instance,\n\n```\n    }, {\n      \"name\": \"stream\",\n      \"in\": \"query\",\n      \"description\": \"1/True/true or 0/False/false, return stream. Default false\",\n      \"type\": \"string\",\n      \"default\": \"false\"\n    }, {\n```\n\nGenerated code,\n\n```\nStream *string\n```\n\nI wasn't sure whether I am suppose to expect a bool or a string in the generated code.\n  Here's the generated model file (partially)\n\n``` go\n...\nimport (\n    \"bytes\"\n    \"encoding/json\"\n\n    strfmt \"github.com/go-swagger/go-swagger/strfmt\"\n\n    \"github.com/go-swagger/go-swagger/errors\"\n    \"github.com/go-swagger/go-swagger/httpkit/validate\"\n)\n\n...\n\nfunc (m Model) MarshalJSON() ([]byte, error) {\n        ...\n    return swag.ConcatJSON(b1, b2), nil\n}\n\n...\n```\n\nThe package `swag` should be in `imports`\n  Add the missing import:\ngithub.com/go-swagger/go-swagger/httpkit\n\nTo fix #343 \n  Here's part of generated code:\n\n``` go\nimport (\n    \"bytes\"\n    \"io\"\n    \"io/ioutil\"\n\n    \"github.com/go-swagger/go-swagger/errors\"\n    \"github.com/go-swagger/go-swagger/httpkit/validate\"\n)\n\ntype Resource interface {\n    httpkit.Validatable\n...\n```\n\nObviously, it should be `validate.Validatable`, not `httpkit.Validatable`\n here's the piece:\n\n``` yaml\ndefinitions:\n Resource:\n    description: A resource\n    discriminator: resourceType\n    properties:\n      resourceType:\n        type: string\n        description: discriminating type of the resource\n      name:\n        type: string\n        description: name of the resource\n    required:\n      - resourceType\n      - name\n```\n  I've made accidental copy paste error in the paths section, that resulted in this stack trace error:\n\n```\n2016/02/29 13:59:10 building a plan for generation\n2016/02/29 13:59:10 planning definitions\n2016/02/29 13:59:10 planning operations\npanic: interface conversion: interface is spec.Schema, not spec.Parameter\n\ngoroutine 1 [running]:\npanic(0x6d97c0, 0xc8206b2dc0)\n    /usr/local/go/src/runtime/panic.go:464 +0x3e6\ngithub.com/go-swagger/go-swagger/spec.(*specAnalyzer).paramsAsMap(0xc82000b7a0, 0xc8206f9400, 0x3, 0x4, 0xc820962390)\n    /drone/src/github.com/go-swagger/go-swagger/spec/analyzer.go:331 +0x1c5\ngithub.com/go-swagger/go-swagger/spec.(*specAnalyzer).ParamsFor(0xc82000b7a0, 0x7a9dd0, 0x3, 0xc820011fb0, 0x10, 0x4)\n    /drone/src/github.com/go-swagger/go-swagger/spec/analyzer.go:379 +0x1f1\ngithub.com/go-swagger/go-swagger/generator.(*codeGenOpBuilder).MakeOperation(0xc820392d20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n    /drone/src/github.com/go-swagger/go-swagger/generator/operation.go:318 +0x412\ngithub.com/go-swagger/go-swagger/generator.(*appGenerator).makeCodegenApp(0xc8204917a0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)\n    /drone/src/github.com/go-swagger/go-swagger/generator/support.go:571 +0xf2f\ngithub.com/go-swagger/go-swagger/generator.(*appGenerator).Generate(0xc8204917a0, 0x0, 0x0)\n    /drone/src/github.com/go-swagger/go-swagger/generator/support.go:154 +0x87\ngithub.com/go-swagger/go-swagger/generator.GenerateServer(0x7fff5fbffb4b, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7fff5fbffb52, 0xd, ...)\n    /drone/src/github.com/go-swagger/go-swagger/generator/support.go:40 +0x118\ngithub.com/go-swagger/go-swagger/cmd/swagger/commands/generate.(*Server).Execute(0xc8201d63c0, 0xc82026be80, 0x0, 0x8, 0x0, 0x0)\n    /drone/src/github.com/go-swagger/go-swagger/cmd/swagger/commands/generate/server.go:69 +0x22e\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).ParseArgs(0xc8202e2b40, 0xc820088010, 0x8, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /drone/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:301 +0xa10\ngithub.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags.(*Parser).Parse(0xc8202e2b40, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /drone/src/github.com/go-swagger/go-swagger/vendor/github.com/jessevdk/go-flags/parser.go:175 +0x9b\nmain.main()\n    /drone/src/github.com/go-swagger/go-swagger/cmd/swagger/swagger.go:79 +0x841\n```\n\nBroken path definition:\n\n> ```\n> /get_main_object:\n> get:\n>   tags:\n>     - maindata\n>   parameters:\n>     - name: sid\n>       in: query\n>       required: true\n>       $ref: \"#/definitions/sample_info/properties/sid\"  <<<< Error is here.\n> ```\n\n```\nGo 1.6\nSwagger version:  0.4.0\n```\n It was just a copy/paste error I made that caused crash during the generation process. So, I wanted to point out that there is a place go-swagger panics.\n  Here is my simple rest service:\n\n```\n// Package classification User API.\n//\n// the purpose of this application is to provide an application\n// that is using plain go code to define an API\n//\n// This should demonstrate all the possible comment annotations\n// that are available to turn go code into a fully compliant swagger 2.0 spec\n//\n// Terms Of Service:\n//\n// there are no TOS at this moment, use at your own risk we take no responsibility\n//\n//     Schemes: http, https\n//     Host: localhost\n//     BasePath: /v2\n//     Version: 0.0.1\n//     License: MIT http://opensource.org/licenses/MIT\n//     Contact: John Doe<john.doe@example.com> http://john.doe.com\n//\n//     Consumes:\n//     - application/json\n//     - application/xml\n//\n//     Produces:\n//     - application/json\n//     - application/xml\n//\n//\n// swagger:meta\npackage main\nimport (\n \"github.com/gin-gonic/gin\"\n \"strconv\"\n \"database/sql\"\n _ \"github.com/go-sql-driver/mysql\"\n \"gopkg.in/gorp.v1\"\n \"log\"\n)\n\n// swagger:model\n// User represents the user for this application\n//\n// A user is the security principal for this application.\n// It's also used as one of main axis for reporting.\n//\n// A user can have friends with whom they can share what they like.\n//\ntype User struct {\n    // the id for this user\n    //\n    // required: true\n    // min: 1\n    Id int64 `db:\"id\" json:\"id\"`\n    // the first name for this user\n    // required: true\n    // min length: 3\n    Firstname string `db:\"firstname\" json:\"firstname\"`\n    // the last name for this user\n    // required: true\n    // min length: 3\n    Lastname string `db:\"lastname\" json:\"lastname\"`\n}\n\nfunc main() {\n r := gin.Default()\n r.Use(Cors())\n v1 := r.Group(\"api/v1\")\n {\n v1.GET(\"/users\", GetUsers)\n v1.GET(\"/users/:id\", GetUser)\n v1.POST(\"/users\", PostUser)\n v1.PUT(\"/users/:id\", UpdateUser)\n v1.DELETE(\"/users/:id\", DeleteUser)\n v1.OPTIONS(\"/users\", OptionsUser)     // POST\n v1.OPTIONS(\"/users/:id\", OptionsUser) // PUT, DELETE\n }\nr.Run(\":8696\")\n}\n\n\nfunc GetUsers(c *gin.Context) {\n    // swagger:route GET /user listPets pets users\n    //\n    // Lists pets filtered by some parameters.\n    //\n    // This will show all available pets by default.\n    // You can get the pets that are out of stock\n    //\n    //     Consumes:\n    //     - application/json\n    //     - application/x-protobuf\n    //\n    //     Produces:\n    //     - application/json\n    //     - application/x-protobuf\n    //\n    //     Schemes: http, https, ws, wss\n    //\n    //     Security:\n    //       api_key:\n    //       oauth: read, write\n    //\n    //     Responses:\n    //       default: genericError\n    //       200: someResponse\n    //       422: validationError\n     var users []User\n     _, err := dbmap.Select(&users, \"SELECT * FROM user\")\n    if err == nil {\n     c.JSON(200, users)\n     } else {\n     c.JSON(404, gin.H{\"error\": \"no user(s) into the table\"})\n }\n// curl -i http://localhost:8080/api/v1/users\n}\n\nfunc GetUser(c *gin.Context) {\n id := c.Params.ByName(\"id\")\n var user User\n err := dbmap.SelectOne(&user, \"SELECT * FROM user WHERE id=?\", id)\nif err == nil {\n user_id, _ := strconv.ParseInt(id, 0, 64)\ncontent := &User{\n Id: user_id,\n Firstname: user.Firstname,\n Lastname: user.Lastname,\n }\n c.JSON(200, content)\n } else {\n c.JSON(404, gin.H{\"error\": \"user not found\"})\n }\n// curl -i http://localhost:8080/api/v1/users/1\n}\n\nfunc PostUser(c *gin.Context) {\n var user User\n c.Bind(&user)\nif user.Firstname != \"\" && user.Lastname != \"\" {\nif insert, _ := dbmap.Exec(`INSERT INTO user (firstname, lastname) VALUES (?, ?)`, user.Firstname, user.Lastname); insert != nil {\n user_id, err := insert.LastInsertId()\n if err == nil {\n content := &User{\n Id: user_id,\n Firstname: user.Firstname,\n Lastname: user.Lastname,\n }\n c.JSON(201, content)\n } else {\n checkErr(err, \"Insert failed\")\n }\n }\n} else {\n c.JSON(422, gin.H{\"error\": \"fields are empty\"})\n }\n// curl -i -X POST -H \"Content-Type: application/json\" -d \"{ \\\"firstname\\\": \\\"Thea\\\", \\\"lastname\\\": \\\"Queen\\\" }\" http://localhost:8080/api/v1/users\n}\n\nfunc UpdateUser(c *gin.Context) {\n id := c.Params.ByName(\"id\")\n var user User\n err := dbmap.SelectOne(&user, \"SELECT * FROM user WHERE id=?\", id)\nif err == nil {\n var json User\n c.Bind(&json)\nuser_id, _ := strconv.ParseInt(id, 0, 64)\nuser := User{\n Id: user_id,\n Firstname: json.Firstname,\n Lastname: json.Lastname,\n }\nif user.Firstname != \"\" && user.Lastname != \"\"{\n _, err = dbmap.Update(&user)\nif err == nil {\n c.JSON(200, user)\n } else {\n checkErr(err, \"Updated failed\")\n }\n} else {\n c.JSON(422, gin.H{\"error\": \"fields are empty\"})\n }\n} else {\n c.JSON(404, gin.H{\"error\": \"user not found\"})\n }\n// curl -i -X PUT -H \"Content-Type: application/json\" -d \"{ \\\"firstname\\\": \\\"Thea\\\", \\\"lastname\\\": \\\"Merlyn\\\" }\" http://localhost:8080/api/v1/users/1\n}\n\nfunc DeleteUser(c *gin.Context) {\n id := c.Params.ByName(\"id\")\nvar user User\n err := dbmap.SelectOne(&user, \"SELECT id FROM user WHERE id=?\", id)\nif err == nil {\n _, err = dbmap.Delete(&user)\nif err == nil {\n c.JSON(200, gin.H{\"id #\" + id: \" deleted\"})\n } else {\n checkErr(err, \"Delete failed\")\n }\n} else {\n c.JSON(404, gin.H{\"error\": \"user not found\"})\n }\n// curl -i -X DELETE http://localhost:8080/api/v1/users/1\n}\n\nvar dbmap = initDb()\nfunc initDb() *gorp.DbMap {\n db, err := sql.Open(\"mysql\",\n        \"root:max_123@tcp(127.0.0.1:3306)/gotest\")\n checkErr(err, \"sql.Open failed\")\n dbmap := &gorp.DbMap{Db: db, Dialect:           gorp.MySQLDialect{\"InnoDB\", \"UTF8\"}}\n dbmap.AddTableWithName(User{}, \"User\").SetKeys(true, \"Id\")\n err = dbmap.CreateTablesIfNotExists()\n checkErr(err, \"Create table failed\")\nreturn dbmap\n}\n\nfunc checkErr(err error, msg string) {\n if err != nil {\n log.Fatalln(msg, err)\n }\n}\n\n\nfunc Cors() gin.HandlerFunc {\n return func(c *gin.Context) {\n c.Writer.Header().Add(\"Access-Control-Allow-Origin\", \"*\")\n c.Next()\n }\n}\n\nfunc OptionsUser(c *gin.Context) {\n c.Writer.Header().Add(\"Access-Control-Allow-Origin\", \"*\")\n c.Writer.Header().Set(\"Access-Control-Allow-Methods\", \"DELETE,POST, PUT\")\n c.Writer.Header().Set(\"Access-Control-Allow-Headers\", \"Content-Type\")\n c.Next()\n}\n```\n\nNow when I'm executing : swagger generate spec -o ./swagger.json to generate the json spec I'm getting:\n\n```\n{\n    \"consumes\": [\"application/json\", \"application/xml\"],\n    \"produces\": [\"application/json\", \"application/xml\"],\n    \"schemes\": [\"http\", \"https\"],\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"description\": \"the purpose of this application is to provide an application\\nthat is using plain go code to define an API\\n\\nThis should demonstrate all the possible comment annotations\\nthat are available to turn go code into a fully compliant swagger 2.0 spec\",\n        \"title\": \"User API.\",\n        \"termsOfService\": \"there are no TOS at this moment, use at your own risk we take no responsibility\",\n        \"contact\": {\n            \"name\": \"John Doe\",\n            \"url\": \"http://john.doe.com\",\n            \"email\": \"john.doe@example.com\"\n        },\n        \"license\": {\n            \"name\": \"MIT\",\n            \"url\": \"http://opensource.org/licenses/MIT\"\n        },\n        \"version\": \"0.0.1\"\n    },\n    \"host\": \"localhost\",\n    \"basePath\": \"/v2\",\n    \"paths\": {\n        \"/user\": {\n            \"get\": {\n                \"description\": \"This will show all available pets by default.\\nYou can get the pets that are out of stock\",\n                \"consumes\": [\"application/json\", \"application/x-protobuf\"],\n                \"produces\": [\"application/json\", \"application/x-protobuf\"],\n                \"schemes\": [\"http\", \"https\", \"ws\", \"wss\"],\n                \"tags\": [\"listPets\", \"pets\"],\n                \"summary\": \"Lists pets filtered by some parameters.\",\n                \"operationId\": \"users\",\n                \"security\": [{\n                    \"api_key\": null\n                }, {\n                    \"oauth\": [\"read\", \"write\"]\n                }],\n                \"responses\": {\n                    \"200\": {\n                        \"$ref\": \"#/responses/someResponse\"\n                    },\n                    \"422\": {\n                        \"$ref\": \"#/responses/validationError\"\n                    },\n                    \"default\": {\n                        \"$ref\": \"#/responses/genericError\"\n                    }\n                }\n            }\n        }\n    },\n    \"definitions\": {}\n}\n```\n\nNote that my definitions are empty, not sure why. If I paste the same json spec in http://editor.swagger.io/#/ It says\n\nError\n Object\nmessage:  \"options.definition is required\"\ncode:  \"UNCAUGHT_SWAY_WORKER_ERROR\"\nAny directions on what is the right way to generate swagger documentation would help\n   I'm a little concerned with the amount of changes that occurred after running ./hack/regen-samples.sh \n  Addresses #326.\n  Here's the environment:\n\n```\nmkdir -p ~/dev/go/src/mylib\nexport GOPATH=$HOME/dev/go\nexport PATH=$GOPATH/bin:$PATH\ncd ~/dev/go/src/mylib\nmkdir cmd spec pkg vendor\nvi glide.yaml\nglide install\nvi spec/api.yml\n```\n\nMy Go is Go 1.6, and when I generate the server code using \n\n```\nswagger generate server -f spec/api.yml -t pkg\n```\n\nthe generated file `pkg/restapi/operations/mylib_api.go` has wrong prefix on the import package path: `mylib/vendor/github.com/go-swagger/go-swagger/swag`\n\nThe prefix `mylib/vendor/` should not be there.\n  Looks like validator treats references as validation errors. For instance, let's put a reference to parameter list:\n\n```\n  /foo:\n    get:\n      summary: Some endpoint\n      parameters:\n        - name: some_id\n          in: query\n          description: some ID\n          required: true\n          type: integer\n        - $ref: '#/parameters/some_shared_param'\n          required: false\n```\n\nValidator output for such case is:\n\n```\n- paths./foo.get.parameters.$ref in body is a forbidden property\n- paths./foo.get.parameters.name in body is required\n- paths./foo.get.parameters.in in body is required\n- paths./foo.get.parameters.type in body is required\n```\n\nAs specification says, using references in parameter list is valid: http://swagger.io/specification/#operationObject (`parameters` is expected to hold an array `[Parameter Object | Reference Object]`)\n False alarm.\nThis happens when one tries to override reference's parameter with some other value. Like this:\n\n```\n        - $ref: '#/parameters/some_shared_param'\n          required: false\n```\n\nSwagger specs does not allow this, hence the ticket can be closed.\n This validation causes false positives and the issue should be reopened.\r\nIn our case, we use urls with hashtags as a way to make our level 0 system apis have unique endpoints and thus become swagger compatible. \r\nexample paths:\r\n\r\n- our.rest/endpoint#Action1\r\n- our.rest/endpoint#Action2\r\n\r\nthe go swagger validation treats these as validation errors: \r\n- paths.#Action1 in body is a forbidden property\r\n- paths.#Action2 in body is a forbidden property\r\n\r\nthese aren't references to schema. The actual value of the path has a valid html symbol \"#\" in it. The go-swagger validation needs to be updated to flag schema reference matches by just matching \"#\" values in a property value.\r\n\r\nswagger codegen does not have an issue with this\r\n you use fragments on the server? here's a sample. Again, this wouldn't be how you'd define the API from scratch, but this is a tool to describe an RPC level 0 endpoint in swagger. The fragments aren't actually used as we have an internal preexisting way to route the action. They fragments just make every path unique (which is a requirement for swagger). Swagger allows the use of a defined operationId parameter, but every path must be a unique path.\r\n\r\n```json\r\n{\r\n  \"swagger\" : \"2.0\",\r\n  \"info\" : {\r\n...\r\n  },\r\n  \"host\" : \"myhost.net\",\r\n  \"basePath\" : \"/api/myrpcendpoint\",\r\n  \"schemes\" : [ \"https\" ],\r\n  \"consumes\" : [ \"application/json\" ],\r\n  \"produces\" : [ \"application/json\" ],\r\n  \"paths\" : {\r\n    \"#GetAcct\" : {\r\n      \"post\" : {\r\n        \"summary\" : \"get_acc\",\r\n        \"operationId\" : \"GetAcct\",\r\n        \"parameters\" : [ {\r\n          \"name\" : \"body\",\r\n          \"in\" : \"body\",\r\n          \"required\" : \"true\",\r\n          \"schema\" : {\r\n            \"$ref\" : \"#/definitions/GetAcct\"\r\n          }\r\n        } ],\r\n        \"tags\" : [ \"GetAcct\" ],\r\n        \"responses\" : {\r\n          \"default\" : {\r\n            \"schema\" : {\r\n              \"$ref\" : \"#/definitions/GetAcctResponse\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    \"#CalcCredit\" : {\r\n      \"post\" : {\r\n...\r\n    },\r\n    \"#GetPaypal\" : {\r\n      \"post\" : {\r\n...\r\n}\r\n..\r\n``` it would work if you were to use query string syntax. fragments in uri's are a client only construct and as such we don't support those in our path syntax currently. So with ? instead of # it should work we've instructed our client to use swagger-codegen and it works in that environment as is. We have clients that use swagger for many different languages so thats really our recommended platform.\r\n\r\nThat said, your option would probably work as a workaround for a small system. In our case its a 500+ api system and that change would have a pretty significant impact. (and again this works as is in swagger codegen)   The client generator has an issue with parameters of type `file`. For example, for the following swagger spec:\n\n``` yml\n  /services/{serviceId}/files:\n    post:\n      operationId: CreateServiceFiles\n      consumes:\n        - multipart/form-data\n      parameters:\n        - name: files\n          in: formData\n          required: true\n          type: file\n```\n\nIn the `CreateServiceFilesParams` struct, the field `Files` is of type `os.File`, but is later compared to `nil`. It should either be of type `*os.File`, or the `nil` comparison should not be there.\n\nWe need this for one of our projects at SAP. It seems to be a rather small and straightforward change, I would like to contribute a PR for it.\n The issue is no longer reproducible with the newest generator, built from source. Thanks a lot for fixing it!\n  Adds support for setting the `http.CookieJar` to `httpkit/client/runtime.go`, similar to the existing support for setting the `http.RoundTripper`. The default jar is nil as before (no support for cookies). Fixes #308.\n  When I do the following against a server that only supports application/json and text/plain at the moment, I get odd behavior.\n\nRequest:\n\ncurl -X POST -i http://127.0.0.1:49000/v1.21/images/create?fromImage=golang\\&tag=latest\n\nWhat the server sees:\n\nPOST /v1.21/images/create?fromImage=golang&tag=latest HTTP/1.1\nHost: 127.0.0.1:49000\nUser-Agent: curl/7.43.0\nAccept: _/_\n\nWhat the server responds:\n\nHTTP/1.1 415 Unsupported Media Type\nContent-Type: application/json\nDate: Sat, 20 Feb 2016 00:00:55 GMT\nContent-Length: 124\n\n{\"code\":415,\"message\":\"unsupported media type \\\"application/octet-stream\\\", only [application/json text/plain] are allowed\"}\n\nThe handler for the operation never gets called.  This interpretation of the request is happening much earlier.\n @casualjim You should reopen this based on our recent conversation.  go-swagger currently ignores octet-stream as a consumes so there is no way for me to generate code that can handle this case.  Adding \"application/octet-stream\" to either global or operation-local has no effect during regeneration.\n I think I'm still seeing this issue too. I have the following swagger.json:\n\n```\n/items/{id}:   \n    get:\n      summary: Get the iteam as application/zip\n      description: |\n        Downloads a item as zip file.\n      produces:\n        - application/octet-stream\n      parameters:\n        - name: id\n          description: The `id` of the item.\n          in: path\n          required: true\n          type: string\n          format: string\n\n      responses:\n        200:\n          description: Successfully retrieved the zip file\n          schema:\n            type: string\n            format: binary     \n```\n\nOn the client I'm always seeing the following error:\n`no consumer: \"application/octet-stream\"`\n\nIf I change the content type to `application/zip`, I'm seeing the same error with the respective content type. I'm on the latest git master@head.\n Is there a working example somewhere?\n I hacked the following statement into my client and it seems to work now:\n\n``` go\n// [...]\ntransport := client.New(host, path, schemes)\n// FIXME this should not be there and a bug in go-swagger - without this the zip download fails\ntransport.Consumers[\"application/octet-stream\"] = runtime.ByteStreamConsumer()\nreturn restClient.New(transport, strfmt.Default), nil\n```\n\nIt looks to me the following part in `swagger.yml`\n\n```\nproduces:\n        - application/octet-stream\n```\n\nis ignored in the client generation?\n  Docker client expects a stream of JSON structs from daemon to show a progress bar. Attached file is a dump of following command\n\n> curl -i -X POST http://IP:PORT/images/create?fromImage=alpine&tag=latest\n\n[Dump](https://files.zenhub.io/56c7a77ef5b278b53b8dcd2b)\n  Our swagger API is case sensitive for enums. E.g. \"DESC\" is ok but \"desc\" or \"deSC\" will cause 400s. This is needlessly strict and we should support case insensitive enums. We'd like to allow it to be case insensitive (these are get params). Since the validation code is deep in go-swagger generated code, have you considered this as a go-swagger feature?\n\nthanks!\n  Why were the checks in the code below (fx `hasInsecure`, `hasSecure`) during this refactor? And anywhere else in the template.\n\n```\nvar opts struct { {{ if (contains .ExtraSchemes \"unix\") }}\n  SocketPath flags.Filename `long:\"socket-path\" description:\"the unix socket to listen on\" default:\"/var/run/{{ dasherize .Name }}.sock\"`{{ end }}{{ if (hasInsecure .Schemes) }}\n    Host string `long:\"host\" description:\"the IP to listen on\" default:\"localhost\" env:\"HOST\"`\n    Port int    `long:\"port\" description:\"the port to listen on for insecure connections, defaults to a random value\" env:\"PORT\"`{{ end }}{{ if (hasSecure .Schemes) }}\n\n    TLSHost           string         `long:\"tls-host\" description:\"the IP to listen on for tls, when not specified it's the same as --host\" env:\"TLS_HOST\"`\n    TLSPort           int            `long:\"tls-port\" description:\"the port to listen on for secure connections, defaults to a random value\" env:\"TLS_PORT\"`\n    TLSCertificate    flags.Filename `long:\"tls-certificate\" description:\"the certificate to use for secure connections\" required:\"true\" env:\"TLS_CERTIFICATE\"`\n    TLSCertificateKey flags.Filename `long:\"tls-key\" description:\"the private key to use for secure conections\" required:\"true\" env:\"TLS_PRIVATE_KEY\"` {{ end }}\n}\n```\n\nFrom https://github.com/go-swagger/go-swagger/blob/9562a0d590791d7d1db4c05798541273bc467271/generator/templates/server/main.gotmpl#L23-L32 to https://github.com/go-swagger/go-swagger/blob/b05016969860b299a3fbe8cc770ae4fed7819171/generator/templates/server/server.gotmpl#L31-L44\n As far as I can see, it's fixed. Thank you.\n  Hello,\n\nI got these swagger:meta, swagger:route, swagger:response etc. But I could not understand the swagger:model and when I use it where ?\n\nI just added this in my go file but it is not appear in my swagger.json file.\n\n``` go\n// User represents the user for this application\n//\n// A user is the security principal for this application.\n// It's also used as one of main axis for reporting.\n//\n// A user can have friends with whom they can share what they like.\n//\n// swagger:model\ntype User struct {\n    // the id for this user\n    //\n    // required: true\n    // min: 1\n    ID int64 `json:\"id\"`\n\n    // the name for this user\n    // required: true\n    // min length: 3\n    Name string `json:\"name\"`\n\n    // the email address for this user\n    //\n    // required: true\n    Email strfmt.Email `json:\"login\"`\n\n    // the friends for this user\n    Friends []User `json:\"friends\"`\n}\n```\n\ncan you help me please ? I want to use swagger response and swagger models together\n can you give me an example please?\n\nis it useful during generate spec ?\n thank you dude!\n @casualjim but it does not work correctly, when I use embeded struct.\n\n``` go\n// User the user model\n// swagger:model\ntype User struct {\n    ID    int64\n    Email string\n    Name  string\n}\n\n// UserResponse the user response\n// swagger:response userResponse\ntype UserResponse struct {\n    // in:body\n    Body struct {\n        ID    int64\n        Email string\n        Name  string\n    }\n}\n\n// UserResponse the user response\n// swagger:response userResponse\ntype UserResponse struct {\n    // in:body\n    Body User\n}\n```\n\n``` json\n{\n    \"consumes\": [\"application/json\"],\n    \"produces\": [\"application/json\"],\n    \"schemes\": [\"http\", \"https\"],\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"description\": \"the purpose of this application is to provide an application\\nthat is using plain go code to define an API\\n\\nThis should demonstrate all the possible comment annotations\\nthat are available to turn go code into a fully compliant swagger 2.0 spec\",\n        \"title\": \"Petstore API.\",\n        \"termsOfService\": \"there are no TOS at this moment, use at your own risk we take no responsibility\",\n        \"contact\": {\n            \"name\": \"John Doe\",\n            \"url\": \"http://john.doe.com\",\n            \"email\": \"john.doe@example.com\"\n        },\n        \"license\": {\n            \"name\": \"MIT\",\n            \"url\": \"http://opensource.org/licenses/MIT\"\n        },\n        \"version\": \"0.0.1\"\n    },\n    \"host\": \"localhost\",\n    \"basePath\": \"/v2\",\n    \"paths\": {\n        \"/user\": {\n            \"get\": {\n                \"description\": \"This will show all available pets by default.\\nYou can get the pets that are out of stock\",\n                \"consumes\": [\"application/json\"],\n                \"produces\": [\"application/json\"],\n                \"schemes\": [\"http\", \"https\", \"ws\", \"wss\"],\n                \"summary\": \"Lists pets filtered by some parameters.\",\n                \"operationId\": \"getUser\",\n                \"responses\": {\n                    \"200\": {\n                        \"$ref\": \"#/responses/userResponse\"\n                    }\n                }\n            }\n        }\n    },\n    \"definitions\": {},\n    \"responses\": {\n        \"userResponse\": {\n            \"description\": \"UserResponse the user response\",\n            \"schema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"Email\": {\n                        \"type\": \"string\"\n                    },\n                    \"ID\": {\n                        \"type\": \"integer\",\n                        \"format\": \"int64\"\n                    },\n                    \"Name\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nthis is embeded\n\n``` json\n{\n    \"consumes\": [\"application/json\"],\n    \"produces\": [\"application/json\"],\n    \"schemes\": [\"http\", \"https\"],\n    \"swagger\": \"2.0\",\n    \"info\": {\n        \"description\": \"the purpose of this application is to provide an application\\nthat is using plain go code to define an API\\n\\nThis should demonstrate all the possible comment annotations\\nthat are available to turn go code into a fully compliant swagger 2.0 spec\",\n        \"title\": \"Petstore API.\",\n        \"termsOfService\": \"there are no TOS at this moment, use at your own risk we take no responsibility\",\n        \"contact\": {\n            \"name\": \"John Doe\",\n            \"url\": \"http://john.doe.com\",\n            \"email\": \"john.doe@example.com\"\n        },\n        \"license\": {\n            \"name\": \"MIT\",\n            \"url\": \"http://opensource.org/licenses/MIT\"\n        },\n        \"version\": \"0.0.1\"\n    },\n    \"host\": \"localhost\",\n    \"basePath\": \"/v2\",\n    \"paths\": {\n        \"/user\": {\n            \"get\": {\n                \"description\": \"This will show all available pets by default.\\nYou can get the pets that are out of stock\",\n                \"consumes\": [\"application/json\"],\n                \"produces\": [\"application/json\"],\n                \"schemes\": [\"http\", \"https\", \"ws\", \"wss\"],\n                \"summary\": \"Lists pets filtered by some parameters.\",\n                \"operationId\": \"getUser\",\n                \"responses\": {\n                    \"200\": {\n                        \"$ref\": \"#/responses/userResponse\"\n                    }\n                }\n            }\n        }\n    },\n    \"definitions\": {\n        \"User\": {\n            \"description\": \"User the user model\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"Email\": {\n                    \"type\": \"string\"\n                },\n                \"ID\": {\n                    \"type\": \"integer\",\n                    \"format\": \"int64\"\n                },\n                \"Name\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"x-go-package\": \"github.com/alioygur/piklook-corporate/app\"\n        },\n        \"UserResponse\": {\n            \"description\": \"UserResponse the user response\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"Body\": {\n                    \"description\": \"in:body\",\n                    \"$ref\": \"#/definitions/User\"\n                }\n            },\n            \"x-go-package\": \"github.com/alioygur/piklook-corporate/app\"\n        }\n    },\n    \"responses\": {\n        \"userResponse\": {\n            \"description\": \"UserResponse the user response\",\n            \"schema\": {\n                \"$ref\": \"#/definitions/User\"\n            }\n        }\n    }\n}\n```\n @casualjim I just found a hint for this problem.\n\nthis works well\n\n``` go\n// Post Response\n// swagger:response\ntype postRes struct {\n    // in: body\n    Body struct {\n        postResBody\n    }\n}\n```\n\nthis works bad\n\n``` go\n// Post Response\n// swagger:response\ntype postRes struct {\n    // in: body\n    Body postResBody\n}\n```\n\nI hope this will be useful during fix this bug.\n Good luck\n Hello, I will give to you more info.\n\nAlso I test this codes in my project.\n\nThank you.\nOn Feb 28, 2016 4:46 AM, \"Ivan Porto Carrero\" notifications@github.com\nwrote:\n\n> I have a test for this:\n> https://github.com/go-swagger/go-swagger/blob/master/fixtures/goparsing/classification/operations/responses.go#L150-L164\n> \n> would it be possible to give me project with the file layout you have? I\n> can't reproduce the error you have, without more info.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/go-swagger/go-swagger/issues/301#issuecomment-189767627\n> .\n @casualjim which golang version do you use?\n  So people can update the website docs with pull requests :) Make it eaiser going forword\n Ah That's perfect :) Up to you man , great work :) I might throw up a pull request :)\n Also did some work on the https://github.com/yvasiyarov/swagger before, great to see some doing a better job :D \n  The docker CLI leaves out the Accept: header in some requests.  The current go-swagger middleware does not handle this well.  It currently returns,\n\n{\"code\":406,\"message\":\"unsupported media type requested, only [application/json] are available\"}\n NegotiateContentType() in negotiate.go.\n So... you're saying, you're going to add it, right?\n  The generated code does not compile if a file parameter has the property \"required\": true.\nFor example:\n`\"parameters\": [\n    {\n        \"name\": \"file\",\n        \"in\": \"formData\",\n        \"description\": \"file to upload\",\n        \"required\": true,\n        \"type\": \"file\"\n    }\n],\n\"consumes\": [\n    \"multipart/form-data\"\n],`\n  This pull request closes issue #275 Clean up the tutorial.  \n  Given a path like \"/api/tasks/\" the runtime uses `path.Join` to join the\nbase path to it which strips any trailing slash. If the path previously\nended with a trailing slash (\"/\"), it is reinstated after adding the\nbase path prefix because the behaviour of the server's path handling\ncannot be guaranteed.\n\nFixes #289\n\nSigned-off-by: Jonathan Ingram jonathan.b.ingram@gmail.com\n You're welcome @casualjim it's the least I can do! You're the one that created the great lib :) Still hitting some curve balls to get it working for our API, but hoping we will get there.\n  At https://github.com/go-swagger/go-swagger/blob/master/httpkit/client/runtime.go#L138\n\nIt uses `path.Join` which strips the trailing slash from my path, e.g. https://play.golang.org/p/qIVI8ANGZt\n\nMy server 301s, but the redirect is not followed. Apparently 10 redirects are followed per https://github.com/go-swagger/go-swagger/blob/master/httpkit/client/runtime.go#L153 so not sure if this is a bug or not, but ideally I feel that the redirects should not be necessary in this case because the runtime should not change the given path - at least so far as not changing the trailing slash choice that the server makes.\n For me, I think not having the server handle both was because of the std libs behaviour of `http.Handle` and whether the path arg is a prefix - I can't recall exactly, but without the slash I think the server would not treat the given path as a prefix so the handler would not get matched for nested routes.\n\nRe why not just catch it:\n\nI guess the server is catching it, and (possibly?) doing the \"right\" thing by doing a 301 to the canonical resource.\n\nRe your test:\n\nCorrect, so here's an example call:\n\n```\n$ curl -D - https://example.com/api/my-op\nHTTP/1.1 301 Moved Permanently\nLocation: /api/my-op/\nContent-Type: text/html; charset=utf-8\nVary: Accept-Encoding\nDate: Mon, 15 Feb 2016 01:56:54 GMT\nServer: Google Frontend\nCache-Control: private\nAlt-Svc: quic=\":443\"; ma=604800; v=\"30,29,28,27,26,25\"\nAccept-Ranges: none\nTransfer-Encoding: chunked\n\n<a href=\"/api/my-op/\">Moved Permanently</a>.\n```\n\nI'm sure you'll figure out the ideal solution (if you choose to implement this), but I just did this locally and it achieved what I needed:\n\n``` diff\ndiff --git a/httpkit/client/runtime.go b/httpkit/client/runtime.go\nindex f3a957a..da6d6bc 100644\n--- a/httpkit/client/runtime.go\n+++ b/httpkit/client/runtime.go\n@@ -135,7 +135,14 @@ func (r *Runtime) Submit(operation *client.Operation) (interface{}, error) {\n        }\n        req.URL.Scheme = r.pickScheme(operation.Schemes)\n        req.URL.Host = r.Host\n+       var reinstateSlash bool\n+       if req.URL.Path[len(req.URL.Path)-1] == '/' {\n+               reinstateSlash = true\n+       }\n        req.URL.Path = path.Join(r.BasePath, req.URL.Path)\n+       if reinstateSlash {\n+               req.URL.Path = req.URL.Path + \"/\"\n+       }\n\n        r.clientOnce.Do(func() {\n                r.client = &http.Client{\n```\n No probs, happy to help :)\n  Any feedback is appreciated, and please let me know if special mark-up is not supposed to work.\n\nFixes #276.\n  The matter of additional transports has come up several times, and is now getting discussed in https://github.com/vmware/vic/issues/69 ([here](https://github.com/vmware/vic/issues/69#issuecomment-183457021)).\n\nThis is for a direct in-memory call so that we can spec out components that live within the same process, allowing us to easily migrate components from initial in-process implementation to distributed.\n The question is whether Swagger wants to be this type of technology or just public APIs for systems, similar to the roles that webservices and EDI played in the past.\n  I followed the todo list tutorial and feel that there is room for improvement:\n- the copyright year needs to get updated\n- I like YAML, but I don't see YAML files often. I was a little confused about the swagger.yml as in some\n  lines I saw strings in double quotes besides strings enclosed by single quotes and some without any quotes at all. Furthermore, I feel that the usage of flow style is a little confusing.\n- The completed spec includes a \"- https\", which makes it more difficult to follow the tutorial because you have to specify startup parameters like `tis-certificate` and `tls-key`.\n- There are some differences between the tutorial and the example source code:\n  - `var store = make(map[int64]models.Item)` <=> `var items = make(map[int64]*models.Item)`\n  - `var ids int64` <=> `var lastID int64`\n  - `curl -i localhost:8765` returns `nil` instead of `[]`: in order to fix it you have to add `result = make([]*models.Item, 0)` to the `allItems` function (see [configure_todo_list.go](https://github.com/go-swagger/go-swagger/blob/master/examples/tutorials/todo-list/server-complete/cmd/todo-list-server/configure_todo_list.go#L74-L84))\n- the `allItems` function doesn't interpret the `since` parameter the way I expected it. In my opinion [line 79](https://github.com/go-swagger/go-swagger/blob/master/examples/tutorials/todo-list/server-complete/cmd/todo-list-server/configure_todo_list.go#L79) has to be changed to `if since == 0 || since <= id {`\n- the [`FindTodosHandlerFunc`](https://github.com/go-swagger/go-swagger/blob/master/examples/tutorials/todo-list/server-complete/cmd/todo-list-server/configure_todo_list.go#L108-L116) ignores the `Since`and `Limit`parameters. I feel that it should be changed to something like\n\n```\n    api.TodosFindTodosHandler = todos.FindTodosHandlerFunc(func(params todos.FindTodosParams) middleware.Responder {\n        mergedParams := todos.NewFindTodosParams()\n        mergedParams.Since = swag.Int64(0)\n        if params.Since != nil {\n            mergedParams.Since = params.Since\n        }\n        if params.Limit != nil {\n            mergedParams.Limit = params.Limit\n        }\n        return todos.NewFindTodosOK().WithPayload(allItems(*mergedParams.Since, *mergedParams.Limit))\n    })\n```\n\nTo sum it up, I would like to \"clean up\" the tutorial and example source code a bit.\n > agree on all points except the alItems one \n> The since is for all ids since the one provided (so if since is 1 then we want id's 2,3,4 and so on)\n\nRight now, the program code looks like this:\n\n```\nif since == 0 || since > id {\n    result = append(result, item)\n}\n```\n\nSo, if since is 3 you would get the ids 1 and 2. You wouldn't get 4, 5, 6 and so on.\n\nProbably the program code should look like this:\n\n```\nif since == 0 || id > since {\n    result = append(result, item)\n}\n```\n\n> Does that mean a PR is coming?\n\nYes!\n  The old scheme of handler method naming caused problems during regeneration.  For our project, we were generating a REST server and committing only the server code to our repo and discarding the models and operations generated by go-swagger.  Our intent was to regenerate those for every build, but the handler method names were not the same on code regeneration, even when we did not update the swagger spec.\n\nBy changing the method and file names to be a combo of Swagger Method + Path, it worked much better for us.\n    This patch sets the content length of the request or else a chunked transfer is declared, and this corrupts outgoing payloads. the content's length must be set prior to the body being written per the spec at https://golang.org/pkg/net/http\n\n```\n If Body is present, Content-Length is <= 0 and\n TransferEncoding hasn't been set to \"identity\", Write\n adds \"Transfer-Encoding: chunked\" to the header. Body\n is closed after it is sent.\n```\n\nTo that end a temporary buffer, b, is created to produce the payload body, and then its size is used to set the request's content length.\n  Is there an alternative to using embedded structs to populate response schema properties?\n\nI'm using go-swagger to generate a swagger spec from existing go-code and ran into something interesting. It looks as though the only way to get response fields to show under \"responses > my-response-struct > schema > properties\" is to structure the go types as embedded structs. For example:\n\n``` go\n// Some response object i want to generate a swagger spec for\n// swagger:response my-response\ntype MyResponse struct {\n    SomeField      string\n    SomeOtherField string\n}\n```\n\nGenerates:\n\n``` json\n\"responses\": {\n        \"my-response\": {\n            \"description\": \"A Style returns all the information for a particular style\",\n            \"headers\": {\n                \"SomeField\": {\n                    \"type\": \"string\"\n                },\n                \"SomeOtherField\": {\n                    \"type\": \"string\"\n                }\n            }\n        }\n}\n```\n\nThe only way to get it in the schema properties where I'd expect it is to change my struct to this:\n\n``` go\n// Some response object i want to generate a swagger spec for\n// swagger:response my-response2\ntype MyEmbeddedResponse struct {\n    //in: body\n    EmbeddedThing struct {\n        SomeField      string\n        SomeOtherField string\n    }\n}\n```\n\nWhich then results in my expected swagger spec:\n\n``` json\n \"my-response2\": {\n            \"description\": \"Some response object i want to generate a swagger spec for\",\n            \"schema\": {\n                \"properties\": {\n                    \"SomeField\": {\n                        \"type\": \"string\"\n                    },\n                    \"SomeOtherField\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"type\": \"object\"\n            }\n        },\n```\n  Signed-off-by: Tom Pytleski pytlesk4@gmail.com\n\nCloses #268\n  request.ParseMultipartForm will return an error if the Content-Type is wrong. If the Content-Type is not a multipart this will just call ParseForm instead.\n  Hi, \n\nI'm having some problems trying to use the DELETE operation without a body (DELETE /item/{id}).\nFirst of all, let me say that I'm not sure if requests like DELETE /item/{id} without a body must have their header Content-Type set or not. So in the end, I found myself trying both cases.\n##### Without Content-Type\n\nIf I decide not to define a content type, the swagger spec will be something like this:\n\n``` yml\nswagger: '2.0'\ninfo:\n  version: 1.0.0\n  title: 'Test'\nschemes:\n  - http\npaths:\n  /key/{id}:\n    delete:\n      parameters:\n        - name: id\n          in: path\n          type: integer\n          required: true\n      responses:\n        '200':\n          description: OK\n```\n\nI created the server and executed:\n`curl -X \"DELETE\" http://127.0.0.1:36128/key/1`\n\nWhich gave me the following error: \n`{\"code\":415,\"message\":\"unsupported media type \\\"application/octet-stream\\\", only [] are allowed\"}`\nDigging into the code I've found that if no content type is set, it defaults to \"application/octet-stream\". [https://github.com/go-swagger/go-swagger/blob/master/httpkit/headers.go#L29](https://github.com/go-swagger/go-swagger/blob/master/httpkit/headers.go#L29)\nSo it seems that the Content-Type is required.\n##### With Content-Type\n\nThe swagger looks like: \n\n``` yml\nswagger: '2.0'\ninfo:\n  version: 1.0.0\n  title: 'Test'\nschemes:\n  - http\nproduces:\n  - application/json\nconsumes:\n  - application/json\npaths:\n  /key/{id}:\n    delete:\n      parameters:\n        - name: id\n          in: path\n          type: integer\n          required: true\n      responses:\n        '200':\n          description: OK\n```\n\nThe curl command :\n\n```\ncurl -X \"DELETE\" -H \"Content-Type: application/json\" http://127.0.0.1:36128/key/1\n```\n\nWorks well.\n\nBut when I try to use the generated client I fall back to the previous case when no content type is set.\nI feel that this is relateded with [https://github.com/go-swagger/go-swagger/blob/master/httpkit/client/request.go#L152](https://github.com/go-swagger/go-swagger/blob/master/httpkit/client/request.go#L152), where the content type only is being sent if there is a payload. \nMaybe this is related to #238.\n\nProbably I missed something, but if someone can help me on this.\n\nThanks.\n   Hello,\n\nI have generated code from a spec.\nWhile compiling i get an error\n\n```\ngo install ./cmd/ini-goapi-server                                                                                   :(\n# ini-goapi/models\nmodels/file.go:34: undefined: strfmt\nmodels/hit.go:26: undefined: strfmt\nmodels/member.go:18: undefined: strfmt\n```\n\nExample model file content:\n\n```\npackage models\n\n// This file was generated by the swagger tool.\n// Editing this file might prove futile when you re-run the swagger generate command\n\n/*File File file\n\nswagger:model File\n*/\ntype File struct {\n\n    /* text content of the file, if availible\n     */\n    Content *string `json:\"content,omitempty\"`\n\n    /* DownloadLink download link\n     */\n    DownloadLink *string `json:\"downloadLink,omitempty\"`\n\n    /* Mime mime\n     */\n    Mime *string `json:\"mime,omitempty\"`\n\n    /* Name name\n     */\n    Name *string `json:\"name,omitempty\"`\n\n    /* size in bytes\n     */\n    Size *string `json:\"size,omitempty\"`\n}\n\n// Validate validates this file\nfunc (m *File) Validate(formats strfmt.Registry) error {\n    return nil\n}\n\n```\n\ngo version go1.4.2 linux/amd64\n I'm having the same issue with the static 0.3.0 binary. The generated files which have this error simply doesn't have an import statement for strfmt.\n Meaning you should go get go-swagger prior to calling swagger generate?\n\nHow is it that this affects swagger's ability to generate the correct import statement? Other models are generated with the correct imports.\n Thanks, I appreciate the explanation!\n  when you specify nested references in definitions, example: https://gist.github.com/jchenry/cfe3ae069dfeb5a8155d\n\nswagger errors with the following message: \n\n> The swagger spec at \"parent-child.yml\" is invalid against swagger specification 2.0. see errors :\n> - object has no field \"definitions\"\n\nthis documents validated properly in other swagger/OpenAPI validators like: \nhttp://bigstickcarpet.com/swagger-parser/www/index.html\n This manifests itself on go1.6rc2\n  First up, thanks for the great tool :)\n\nI'm trying to figure out how to use annotations for generating my client SDK for the case when the API call expects a form file. I've tried a few things, and this particular case gives me a panic:\n\n```\npanic: interface conversion: interface is spec.Schema, not spec.Parameter\n```\n\nNote: I'm not sure if the panic is just expected behaviour, but it goes unchecked in the code so I expect not. I guess I'd like it to tell me what I'm doing wrong.\n\nHere's the full main.go to replicate this:\n\n``` go\n//go:generate swagger generate spec -o ./swagger.json\n\n// Package main MyCompany API.\n//\n//     Schemes: https\n//     Host: localhost\n//     BasePath: /\n//     Version: 0.0.1\n//     License: MIT http://opensource.org/licenses/MIT\n//\n//     Consumes:\n//     - application/json\n//\n//     Produces:\n//     - application/json\n//\n//\n// swagger:meta\npackage main\n\nimport (\n    \"bytes\"\n    \"net/http\"\n)\n\n// swagger:parameters myOperation\ntype MyStruct struct {\n    // MyFormFile desc.\n    //\n    // name: file\n    // in: formData\n    // type: file\n    MyFormFile *bytes.Buffer `json:\"myFormFile\"`\n}\n\nfunc main() {\n    // swagger:route POST /api/my-op/ myOperation\n    //\n    //     Consumes:\n    //     - multipart/form-data\n    //\n    //     Produces:\n    //     - application/json\n    //\n    //     Security:\n    //       api_key:\n    http.HandleFunc(\"/api/my-op/\", func(w http.ResponseWriter, r *http.Request) {\n\n    })\n}\n```\n\nAnd obviously just run this\n\n```\ngo generate\nswagger generate client\n```\n\nInstead of the `*bytes.Buffer` I've tried `*os.File` and I get this:\n\n```\nunable to resolve embedded struct for: &{280192 file}\n```\n\nand `httpkit.File` and I get this:\n\n```\nunknown primitive \"File\"\n```\n\nEdit: I've also tried `multipart.File` and get\n\n```\nunknown primitive \"File\"\n```\n\nIf it helps (and if you have any thoughts on if this is possible with go-swagger!), essentially I'm trying to use annotations to replicate my call that allows _both_ a JSON-encoded `body` and also a `file` form fields, equivalent of this CURL request:\n\n``` curl\ncurl http://localhost/api/my-op/ \\\n  -F file=@myfile.txt \\\n  -F body='{\"someKey\":\"someVal\"}'\n```\n @casualjim thanks for the reply. I did already try `httpkit.File` previously and just tried it again and it returns the error:\n\n```\nunknown primitive \"File\"\n```\n\nWould this be a bug?\n\nI did check out the test at https://github.com/go-swagger/go-swagger/blob/328dc1bb22db726edd68fcd101220ca7813539cb/examples/generated/restapi/operations/pet/upload_file_parameters.go#L27 but if I'm correct it looks like that file is generated from the swagger.json, opposed to what I'm trying to do which is generate it from code annotations/comments.\n For the record, here's the complete running program to replicate the error when using `httpkit.File`:\n\n``` go\n//go:generate swagger generate spec -o ./swagger.json\n\n// Package main MyCompany API.\n//\n//     Schemes: https\n//     Host: localhost\n//     BasePath: /\n//     Version: 0.0.1\n//     License: MIT http://opensource.org/licenses/MIT\n//\n//     Consumes:\n//     - application/json\n//\n//     Produces:\n//     - application/json\n//\n//\n// swagger:meta\npackage main\n\nimport (\n    \"net/http\"\n\n    \"github.com/go-swagger/go-swagger/httpkit\"\n)\n\n// swagger:parameters myOperation\ntype MyStruct struct {\n    // MyFormFile desc.\n    //\n    // name: file\n    // in: formData\n    // type: file\n    MyFormFile httpkit.File `json:\"myFormFile\"`\n}\n\nfunc main() {\n    // swagger:route POST /api/my-op/ myOperation\n    //\n    //     Consumes:\n    //     - multipart/form-data\n    //\n    //     Produces:\n    //     - application/json\n    //\n    //     Security:\n    //       api_key:\n    http.HandleFunc(\"/api/my-op/\", func(w http.ResponseWriter, r *http.Request) {\n\n    })\n}\n```\n Hi @casualjim thanks for the fix. However, I have run `go get -u` and added the annotation `swagger:file` and when generating I get the error `classifier: unknown swagger annotation \"file\"`. Here's the full file (I copied the `MyFileParams` struct directly from your recent commit so figured it should work). Any thoughts?\n\n``` go\n//go:generate swagger generate spec -o ./swagger.json\n\n// Package main MyCompany API.\n//\n//     Schemes: https\n//     Host: localhost\n//     BasePath: /\n//     Version: 0.0.1\n//     License: MIT http://opensource.org/licenses/MIT\n//\n//     Consumes:\n//     - application/json\n//\n//     Produces:\n//     - application/json\n//\n//\n// swagger:meta\npackage main\n\nimport (\n    \"bytes\"\n    \"net/http\"\n)\n\n// MyFileParams contains the uploaded file data\n// swagger:parameters myOperation\ntype MyFileParams struct {\n    // MyFormFile desc.\n    //\n    // in: formData\n    //\n    // swagger:file\n    MyFormFile *bytes.Buffer `json:\"myFormFile\"`\n}\n\nfunc main() {\n    // swagger:route POST /api/my-op/ myOperation\n    //\n    //     Consumes:\n    //     - multipart/form-data\n    //\n    //     Produces:\n    //     - application/json\n    //\n    //     Security:\n    //       api_key:\n    http.HandleFunc(\"/api/my-op/\", func(w http.ResponseWriter, r *http.Request) {\n\n    })\n}\n```\n @casualjim ah thanks, my bad, rookie mistake. I forgot that this was using a `swagger` command opposed to just `import`ing it in my own code so I needed to make sure the swagger command was rebuilt. Sorry for the noise and thanks again for the fix.\n  @casualjim I'm having difficulty with `swagger:route` and `swagger generate spec`.  Can we get a full example where the json is generated from embedded comments, or clarification of rules on where `swagger:route` can appear?  I've tried putting it:\n- outside of methods that are then added with `http.HandleFunc`\n- inside methods handled by `http.HandleFunc`\n- inside `main()`, above `http.HandleFunc()` calls\n\nIn no case can I get the paths & documentation to appear in generated json.  I may be missing tags, I may be putting the documentation in the wrong place; it isn't clear to me how this is supposed to work.\n\nThanks!\n Sorry... this may be a duplicate of #213 .  @casualjim  I'm fine if you close this as a duplicate.\n  This is a nontrivial thing to do in Go due to the lack of compile-time code execution.\n  It would be great to support enums in the annotations of swagger:paramaters.\nI'll try to work on this soon.\n\nPossibly something like:\n\n```\n    // The direction of the sort. Can be \"DESC\" or \"ASC\".\n    //\n    // in: query\n    // enum: [\"DESC\", \"ASC\"]\n    SortOrder string `json:\"sortorder\"`\n```\n  It would be great to support default values in the annotations of swagger:paramaters.\nI'll try to work on this soon.\n\nPossibly something like:\n\n```\n    // The direction of the sort. Can be \"DESC\" or \"ASC\".\n    //\n    // in: query\n    // default: \"DESC\"\n    SortOrder string `json:\"sortorder\"`\n```\n Functions with naming conventions sound overly complicated to me, but that might be because I have only used the spec generator from go-swagger. What if we implement a new swagger type?\n\nMight be something like:\n\n```\n// swagger:defaultvalue\nvar defaultSortOrder = \"DESC\"\n\n// swagger:enum\nvar allowedSorts = []string{\n    \"DESC\",\n    \"ASC\",\n}\n```\n\nWhich results in the following paramater definition:\n\n```\n    // The direction of the sort. Can be \"DESC\" or \"ASC\".\n    //\n    // in: query\n    // default: defaultSortOrder\n    // enum: allowedSorts\n    SortOrder string `json:\"sortorder\"`\n```\n\nThen it kind of works the same as with route Responses codes/struct mapping.\n Great, I'll see what I can do tomorrow. Makes it more complicated than my initial plan so I might not get that far.\n Nah, it's no problem. I rather do it correctly right away.\nI'll report my progress here and maybe someone else can pick up the work when I'm out of time. \n See my work in progress here:\nhttps://github.com/go-swagger/go-swagger/compare/master...jerbob92:feature/244-245-enums-defaults-for-parameters?expand=1\n @jerbob92 Do you mind if I pickup this issue? May I use the progress you have made thus far? @McSwitch sure! I'm not working on it anymore @casualjim Instead of going the whole nine yards here, could I simply add `enum` and `default` options into the swagger:parameters annotation, this will at least give us a starting point to work from?\r\n\r\n## Usage\r\n\r\n```go\r\n// swagger:parameters operation\r\ntype Example struct {\r\n    // enum: foo,bar,none\r\n    // default: bar\r\n    // in: query\r\n    Category string `json:\"category\"`\r\n}\r\n```\r\n\r\nThis should output the following into the category parameter section:\r\n```json\r\n            \"type\": \"string\",\r\n            \"enum\": [\r\n              \"foo\",\r\n              \"bar\",\r\n              \"none\"\r\n            ],\r\n            \"default\": \"bar\",\r\n            \"x-go-name\": \"Category\",\r\n            \"name\": \"category\",\r\n            \"in\": \"query\"\r\n```  If I compile with `-race`  using the same client call concurrently results in : \n\n```\n==================\nWARNING: DATA RACE\nWrite by goroutine 23:\n  github.com/go-swagger/go-swagger/httpkit/client.(*Runtime).Submit()\n      /home/mstoykov/go/src/github.com/go-swagger/go-swagger/httpkit/client/runtime.go:138 +0xc7a\n  super_secret_lib/hosts.(*Client).GetHosts()\n      /home/mstoykov/go/src/super_secret_lib/hosts/hosts_client.go:124 +0x3bc\n// OMITTED FOR CLARITY \n\nPrevious write by goroutine 25:\n  github.com/go-swagger/go-swagger/httpkit/client.(*Runtime).Submit()\n      /home/mstoykov/go/src/github.com/go-swagger/go-swagger/httpkit/client/runtime.go:138 +0xc7a\n  super_secret_lib/hosts.(*Client).GetHosts()\n      /home/mstoykov/go/src/super_secret_lib/hosts/hosts_client.go:124 +0x3bc\n// OMITTED FOR CLARITY \n\nGoroutine 23 (running) created at:\n  super_secret_app/package2.(*Application).execute()\n      /home/mstoykov/go/src/super_secret_app/handlers.go:116 +0x3b5\n\nGoroutine 25 (running) created at:\n  super_secret_app/package2.(*Application).execute()\n      /home/mstoykov/go/src/super_secret_app/handlers.go:116 +0x3b5\n==================\n```\n\nthe line in question is \n\n``` go\n138         r.client.Transport = r.Transport\n```\n\nWhere the Transport of the client is being reset on each call to the API. \nI suppose it's so that the Transport can be changed? If this is so I propose unexporting Transport and using RWMutex with a Setter.\n  The spec generate will often fail for me given the following definitions (for example)\n\n``` go\n// ActionParam\n//\n// swagger:parameters actionParam\ntype ActionParam struct {\n    // in: body\n    // required: true\n    Body actionParam\n}\n\ntype actionParam struct {\n    // required: true\n    FieldA string\n\n    // required: true\n    FieldB string\n\n    // required: true\n    FieldC int`\n}\n```\n\nGenerating a spec for this file will yield: `unknown primitive \"actionParam\"`\nChanging around all the fields, names, etc does not fix the issue.\n\nCurrently on go 1.5.2 darwin/amd64 with the latest version of swagger.\n Yes, it seems like a flaky issue - I might try running the tool on another machine or platform, but it seems doubtful that that would fix the issue. Some more information about the project: \n- there are many different packages in the project that depend on each other (the issues appeared in sub-sub packages from the root, but this is probably more correlation than causation)\n- the problem will often go away when moving the struct declarations to another file in the same package but sometimes not\n- in a previous version of go-swagger, the error would read `unknown primitive \"error\"`\n\nI've since moved all of the swagger comments from the project and will define everything in a .yml instead.\n yep!\n +1\n @casualjim I am new on Golang.\n\nthere is my file called as response.go\n\n``` go\npackage app\n\nimport (\n    \"github.com/alioygur/piklook-corporate/app/domain\"\n    \"github.com/alioygur/piklook-corporate/app/lib\"\n)\n\ntype times struct {\n    CreatedAt int64 `json:\"createdAt\"`\n    UpdatedAt int64 `json:\"updatedAt\"`\n}\n\ntype response struct {\n    Data interface{} `json:\"data\"`\n}\n\ntype userRes struct {\n    ID       int64  `json:\"id\"`\n    Username string `json:\"username\"`\n    Email    string `json:\"email\"`\n    times\n}\n\nfunc newUserRes(user *domain.User) *userRes {\n    res := new(userRes)\n    lib.CopyTo(user, res)\n\n    return res\n}\n\n// swagger:response jobRes\ntype jobRes struct {\n    ID          int64       `json:\"id\"`\n    UserID      int64       `json:\"userId\"`\n    Title       string      `json:\"title\"`\n    Description string      `json:\"description\"`\n    Skills      []*skillRes `json:\"skills,omitempty\"`\n}\n\ntype skillRes struct {\n    ID   int64  `json:\"id\"`\n    Name string `json:\"name\"`\n}\n\nfunc newJobRes(job *domain.Job) interface{} {\n    res := new(jobRes)\n\n    lib.CopyTo(job, res)\n\n    skillRess := make([]*skillRes, len(job.Skills))\n\n    for i, skill := range job.Skills {\n        lib.CopyTo(skill, &skillRess[i])\n    }\n\n    res.Skills = skillRess\n\n    return response{res}\n}\n\nfunc newJobsRes(jobs []*domain.Job) interface{} {\n    res := make([]jobRes, len(jobs))\n    for index, p := range jobs {\n        lib.CopyTo(p, &res[index])\n    }\n\n    return response{res}\n}\n```\n\nThe error\n\n``` sh\n\u279c  piklook-corporate  swagger generate spec -o swagger.json\nunknown field type ele for \"skills\"\n```\n Hey there, I'm fighting this issue and managed to track it down to an interface. I have the following interface:\n\n``` go\n// TranscodingProvider represents a provider of transcoding.\n//\n// It defines a basic API for transcoding a media and query the status of a\n// Job. The underlying provider should handle the profileSpec as deisired (it\n// might be a JSON, or an XML, or anything else.\ntype TranscodingProvider interface {\n    JobStatus(id string) (*JobStatus, error)\n\n    // Healthcheck should return nil if the provider is currently available\n    // for transcoding videos, otherwise it should return an error\n    // explaining what's going on.\n    Healthcheck() error\n}\n```\n\nThere's no special mark-up in this interface. It considers the Healthcheck method to be an attribute. If I remove the method, it works. If I change `swaggerSchemaForType` (in go-swagger code) to treat an error as a string ([see the diff](https://gist.github.com/fsouza/fc7e6d58c6e804069dd3)), it includes TranscodingProvider as one of the definitions in the manifest, declaring it as follow:\n\n``` json\n  \"TranscodingProvider\": {\n      \"description\": \"It defines a basic API for transcoding a media and query the status of a\\nJob. The underlying provider should handle the profileSpec as deisired (it\\nmight be a JSON, or an XML, or anything else.\",\n      \"type\": \"object\",\n      \"title\": \"TranscodingProvider represents a provider of transcoding.\",\n      \"properties\": {\n        \"Healthcheck\": {\n          \"description\": \"Healthcheck should return nil if the provider is currently available\\nfor transcoding videos, otherwise it should return an error\\nexplaining what's going on.\",\n          \"type\": \"string\"\n        }\n      },\n      \"x-go-package\": \"github.com/nytm/video-transcoding-api/provider\"\n    }\n```\n\n```\n```\n @casualjim I can, but what's the right fix? Ignore interfaces?\n But don't you think that treating an interface method as a property is buggy? Interfaces have no properties, they should be skipped.\n I see. Can I have a `swagger:skip` or something like that then? It's really a method that takes no arguments and returns a single parameter, it is not an accessor.\n @casualjim I think it's more complicated than that. Should it be explicit in a sense that it only adds stuff that are explicitly tagged with some `swagger:` mark-up, or should it be implicit, forcing users to explicitly mark types, attributes and methods when they want to exclude something? It seems to be something in the middle now :-(\n\nAnyway, I sent PR #349 treating error as strings, I'm not sure if it's fine to change the fixture, please let me know what you think.\n > Generating a spec for this file will yield: unknown primitive \"actionParam\"\n\nI confirm. I found a similar error: unknown primitive \"MyTypeName\".\n\nAnd this error is **random**.\n\nI traced the error.\n\nschemaParser.parseIdentProperty() call findSourceFile(), scan/schema.go, line about 690\nfindSourceFile (pkg \\* loader.PackageInfo, typeName string), scan/schema.go, line about 760\nThis function not found information **sometimes**.\n\nI traced next.\n\nfindSourceFile() called **with incorrect pkg parameter** sometimes. My package have name \"myPackagePath/errors\". It is similar golang system package name \"errors\". \n\nSometime findSourceFile called with correct package name \"myPackagePath/errors\" and my correct typeName\nSometime findSourceFile() called with **incorrect package name \"errors\"** and my correct typeName\n\nUnder Linux (Ubuntu 14.04, 64-bit) and MacOS X (Yosemite) same. With Go 1.5.2, 1.6 - 64-bit\nUnder Windows 10, 64-bit - no errors. Or it is random? )))\n I was fool this bug.\nI was rename my package \"myPackagePath/errors\" to \"myPackagePath/apierrors\".\ngo-swagger works fine after.\n\nProblem is **random package names**. See my message above.\n Faced same issue: \nafter 2 days investigation got  the place where it's failing:\nhttps://github.com/go-swagger/go-swagger/blob/master/scan/schema.go#L745\nbecause \n`*ast.InterfaceType` not found it this switch. I could not reproduce this error without the code, but in my code it's failing always.\n\n#391 \n I'm facing this issue one more time, this time intermittently. I didn't investigate it much further, but could `swaggerSchemaForType` ignore unknown primitives? I mean, apply this patch:\n\n``` diff\ndiff --git a/scan/scanner.go b/scan/scanner.go\nindex d8053c4..9a78197 100644\n--- a/scan/scanner.go\n+++ b/scan/scanner.go\n@@ -408,8 +408,6 @@ func swaggerSchemaForType(typeName string, prop swaggerTypable) error {\n                prop.Typed(\"number\", \"float\")\n        case \"float64\":\n                prop.Typed(\"number\", \"double\")\n-       default:\n-               return fmt.Errorf(\"unknown primitive %q\", typeName)\n        }\n        return nil\n }\n```\n  Based on top of my PR #236, can separate out if necessary\n  I have reworked the way templates are compiled so when specifying custom templates you are no longer restricted to just the template names that are embedded. I have added a doc page on it as well.\n\nI will clean up the documentation a bit, hopefully when I get some more time, adding some documentation on the data type the templates are called with but I wanted to just put this up there.\n whoops, forgot that I was using protected templates in the tests\n  Addresses #235\n  Currently Accept headers are gathered from the registered consumers on a client's `httpkit/client/(*Runtime).Consumers` map. Instead the MIME types in the operation's `consumes` field should be used.\n\nThis looks like it would be a matter of updating the template https://github.com/go-swagger/go-swagger/blob/master/generator/templates/client/client.gotmpl, the operation struct https://github.com/go-swagger/go-swagger/blob/master/client/client.go#L18, and the client submit method https://github.com/go-swagger/go-swagger/blob/master/httpkit/client/runtime.go#L117-L122\n   I'm coming across compilation errors with generated models containing references to shared enums.\n\nHere's an example `swagger.json` file that will generate uncompilable code:\n\n```\n{\n    \"paths\": {...},\n    \"host\": \"test.com\",\n    \"schemes\": [\"https\"],\n    \"produces\": [\"application/json\"],\n    \"swagger\": \"2.0\",\n    \"definitions\": {\n        \"Currency\": {\n            \"description\": \"\",\n            \"enum\": [\n                \"JPY\",\n                \"USD\",\n            ],\n            \"type\": \"string\"\n        },\n        \"Money\": {\n            \"description\": \"\",\n            \"properties\": {\n                \"amount\": {\"type\": \"integer\"},\n                \"currency\": {\"$ref\": \"#/definitions/Currency\"}\n            },\n            \"type\": \"object\"\n        },\n    },\n    \"consumes\": [\"application/json\"],\n    \"info\": {\n        \"title\": \"Test\",\n        \"version\": \"1.0\"\n    }\n}\n```\n\nThe generated `Money` struct, minus comments is below. This compiles, although I was surprised that the `Currency` field wasn't of type `*Currency`.\n\n```\ntype Money struct {\n    Amount *int64 `json:\"amount,omitempty\"`\n\n    Currency Currency `json:\"currency,omitempty\"`\n}\n\nfunc (m *Money) Validate(formats strfmt.Registry) error {\n    return nil\n}\n```\n\nThe generated `Currency` struct does not compile due to errors in the `Validate` method:\n\n```\ntype Currency string\n\nvar currencyEnum []interface{}\n\nfunc (m *Currency) validateCurrencyEnum(path, location string, value string) error {\n    if currencyEnum == nil {\n        var res []string\n        if err := json.Unmarshal([]byte(`[\"USD\", \"JPY\"]`), &res); err != nil {\n            return err\n        }\n        for _, v := range res {\n            currencyEnum = append(currencyEnum, v)\n        }\n    }\n    if err := validate.Enum(path, location, value, currencyEnum); err != nil {\n        return err\n    }\n    return nil\n}\n\nfunc (m Currency) Validate(formats strfmt.Registry) error {\n    var res []error\n\n    // ...../generated/models/country.go:42: cannot use m (type Country) as type string in argument to m.validateCountryEnum\n    if err := m.validateCurrencyEnum(\"\", \"body\", m); err != nil {\n        return err\n    }\n\n    // ...../generated/models/country.go:46: cannot use m (type Country) as type string in argument to m.validateCountryEnum\n    if err := m.validateCurrencyEnum(\"\", \"body\", m); err != nil {\n        res = append(res, err)\n    }\n\n    if len(res) > 0 {\n        return errors.CompositeValidationError(res...)\n    }\n    return nil\n}\n```\n\nFrom the compilation errors included in comments above, it seems that the generated code is trying to use `string` and `Country` interchangeably without casting.\n Thanks for the quick fix, @casualjim!\n  Currently, when I try to `swagger generate spec` with the GO15VENDOREXPERIMENT and all my dependencies installed in the `vendor` directory, go-swagger seems to ignore it and crashes during the generation, saying that dependencies doesn't exists.\n\nIs that a known problem or did I miss something ?\n\nThanks\n Just to be sure there is no misunderstanding, there is no problem running the `swagger` command itself.\nThere is also no problem doing a `go build`. Everything works fine.\n\nThe problem is that go-swagger doesn't seems to look for dependencies inside the vendor directory when generating the spec. It crashes when a `go build` passes under the same conditions.\n Yes it builds. That's the weird thing.\nI'm gonna double check if the env var is overrided somewhere when calling the swagger gen...\nBut I already tried to run `GO15VENDOREXPERIMENT=1 swagger generate spec -o swagger.json` without success.\n\nI have no problem generating the doc without using the vendor experiment BTW.\n I also have this problem:\n\n**_go-swagger version (there being no \"version\" command in the executable)_**\n\n```\n1258)go-swagger/go-swagger % git log -1\ncommit b4422d1e33b980d9653ee089a12593168efcb7b4\nAuthor: Ivan Porto Carrero <ivan@flanders.co.nz>\nDate:   Sat Jan 30 22:49:08 2016 -0800\n\n    update code of conduct to 1.4 version\n1259)go-swagger/go-swagger % cd -\n~/workspace/src/bitbucket.org/internationalsos/riskratings\n```\n\n**_The project builds, so Go vendoring is  working:_**\n\n```\n1260)internationalsos/riskratings % GO15VENDOREXPERIMENT=1 go build -o build/web ./cmd/web\n1261)internationalsos/riskratings % echo $?\n0\n```\n\n_**To prove that a package is, indeed, in the vendor directory:**_\n\n```\n1262)internationalsos/riskratings % ls vendor/github.com/namsral/flag\nexamples         export_test.go  flag_test.go  README.md\nexample_test.go  flag.go         LICENSE       testdata\n```\n\n**_and that we're using Go 1.5_**\n\n```\n1263)internationalsos/riskratings % go version\ngo version go1.5.2 linux/amd64\n```\n\n_**However, go-swagger does not find the vendored packages, and does not appear\nto be looking in the ./vendor directory:**_\n\n```\n1264)internationalsos/riskratings % GO15VENDOREXPERIMENT=1 swagger generate spec -b ./cmd/web -o swagger.json 2>&1 | head -n 10\n/home/ser/workspace/src/bitbucket.org/internationalsos/riskratings/cmd/web/main.go:30:2: could not import github.com/namsral/flag (cannot find package \"github.com/namsral/flag\" in any of:\n        /home/ser/Software/go/src/github.com/namsral/flag (from $GOROOT)\n        /home/ser/workspace/src/github.com/namsral/flag (from $GOPATH))\n/home/ser/workspace/src/bitbucket.org/internationalsos/riskratings/cmd/web/main.go:33:2: could not import github.com/fvbock/endless (cannot find package \"github.com/fvbock/endless\" in any of:\n```\n\n... and so on, for all dependencies.  Note, mainly, that `vendor` isn't in the search path.  \n\nI can't make this project public, but I'll try to put together a minimum test case for you.\n Hi,\n\nI cleaned and rebuilt swagger using go1.5.3, and it is working now.  Thanks for the pointer!\n @casualjim After I upgraded to 1.5.3 and recompiled go-swagger with that version, it started working.\n Hum... After recompiling and running `go build; swagger generate spec;` in a fresh 1.5.3 golang container, I still get the issue while the build succeeds. I'm using Glide btw.\n\nNevermind, it must be a problem from somewhere else if it fixes the issue for everybody ;)\n It doesn't seems like it. The dependencies are directly in ./vendor (e.g. ./vendor/github.com/go-swagger/go-swagger).\nI'll give a try to gvt.\nDependency management is so annoying right now. I hope Go 1.6 will help with that.\n @solher, it may not be you.  Try to clear out all your `$GO*` environment variables and set them to sane values.  I had to mess around a lot to get go-swagger to do vendoring correctly, and I'm not sure exactly what it was I did to make it work.  I reset a lot of my env vars, I installed Go 1.5.3, and I recompiled both `gvt` and `go-swagger` with the newer Go before `go-swagger` worked.  Try a few more things before you give up.\n\nI've been using `gvt` and have been happy with it, BTW.\n I had the same issue. It was fixed after upgrading Go from 1.5.3 to 1.6.3.\n  I'm failing to find any examples of how to generate the following:\n\n``` json\n  \"securityDefinitions\": {\n    \"api_key\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"header\"\n    }\n  },\n```\n\nAny help would be appreciated, thanks!\n Okay, thanks.\n  \u2026IXES #223\n\nSigned-off-by: Mihail Stoykov M.Stoikov@gmail.com\n I was wondering whether to not change swag.ToGoName to do what pascalize does but decided against on the account that there was probably a reason for it to not do it in the first place. \n  The same as #190 but for the server generated code.\n I certainly won't need that feature in my current project. \n\nIt's a good idea and I like it. But it could be optional I suppose. \n\nMaybe change the behavior in such a way that I could give nil instead of the spec and still have a way to provide whatever else it gets from it.\n  Fixes #101 \n\nThis is a very basic implementation of template overriding. It will scan the directory provided and if there is a file matching an existing template it will replace it with that.\n I had a look at making it a bit more customizable in terms of adding templates that don't exist etc. It would be nice to be able to not just overwrite the builtin templates but also extend without having to use the exact directory structure. If I get some time on the weekend I will have a look again and see if I can get something a bit more robust working.\n  Fixes #219\n I really messed up this PR, sorry while I try to fix it\n Okay, looking better now\n  Using the following swagger.yml\n\n``` yml\nswagger: '2.0'\ninfo:\n  version: 1.0.0\n  title: 'delete-body-api'\npaths:\n  /path:\n    delete:\n      consumes:\n        - application/json\n      produces:\n        - application/json\n      summary: Delete an object\n      parameters:\n        - name: body\n          in: body\n          description: this argument is an object with a string key\n          required: true\n          schema:\n            type: object\n            properties:\n              name:\n                type: string\n      responses:\n        '200':\n          description: All is good\n```\n\nYou can successfully validate, generate, and run a server. That said when trying to make a request\n\n```\ncurl -H \"Content-Type: application/json\" -X DELETE -d '{}' http://localhost:8000/path\n```\n\nYou get a runtime exception - \n\n```\n2016/01/20 13:39:01 http: panic serving 127.0.0.1:51765: runtime error: invalid memory address or nil pointer dereference\ngoroutine 8 [running]:\nnet/http.(*conn).serve.func1(0xc8201e2000, 0x7bda80, 0xc8201e0000)\n    /usr/local/Cellar/go/1.5.1/libexec/src/net/http/server.go:1287 +0xb5\ngithub.com/Clever/swagger-test/restapi/operations.(*DeletePathParams).BindRequest(0xc820232608, 0xc82032a000, 0xc82032a0e0, 0x0, 0x0)\n    /Users/templaedhel/go/src/github.com/Clever/swagger-test/restapi/operations/delete_path_parameters.go:37 +0x122\ngithub.com/go-swagger/go-swagger/httpkit/middleware.(*Context).BindValidRequest(0xc820141640, 0xc82032a000, 0xc82032a0e0, 0x7bdc60, 0xc820232608, 0x0, 0x0)\n    /Users/templaedhel/go/src/github.com/go-swagger/go-swagger/httpkit/middleware/context.go:234 +0x328\ngithub.com/Clever/swagger-test/restapi/operations.(*DeletePath).ServeHTTP(0xc820232600, 0x7bdc28, 0xc8201e20b0, 0xc82032a000)\n    /Users/templaedhel/go/src/github.com/Clever/swagger-test/restapi/operations/delete_path.go:48 +0x101\ngithub.com/go-swagger/go-swagger/httpkit/middleware.newOperationExecutor.func1(0x7bdc28, 0xc8201e20b0, 0xc82032a000)\n    /Users/templaedhel/go/src/github.com/go-swagger/go-swagger/httpkit/middleware/operation.go:23 +0x6f\nnet/http.HandlerFunc.ServeHTTP(0xc82018f9c0, 0x7bdc28, 0xc8201e20b0, 0xc82032a000)\n    /usr/local/Cellar/go/1.5.1/libexec/src/net/http/server.go:1422 +0x3a\ngithub.com/go-swagger/go-swagger/httpkit/middleware.newRouter.func1(0x7bdc28, 0xc8201e20b0, 0xc82032a000)\n    /Users/templaedhel/go/src/github.com/go-swagger/go-swagger/httpkit/middleware/router.go:78 +0x108\nnet/http.HandlerFunc.ServeHTTP(0xc820141980, 0x7bdc28, 0xc8201e20b0, 0xc82032a000)\n    /usr/local/Cellar/go/1.5.1/libexec/src/net/http/server.go:1422 +0x3a\ngithub.com/go-swagger/go-swagger/httpkit/middleware.specMiddleware.func1(0x7bdc28, 0xc8201e20b0, 0xc82032a000)\n    /Users/templaedhel/go/src/github.com/go-swagger/go-swagger/httpkit/middleware/spec.go:36 +0x1d1\nnet/http.HandlerFunc.ServeHTTP(0xc8202af5c0, 0x7bdc28, 0xc8201e20b0, 0xc82032a000)\n    /usr/local/Cellar/go/1.5.1/libexec/src/net/http/server.go:1422 +0x3a\nnet/http.serverHandler.ServeHTTP(0xc8200147e0, 0x7bdc28, 0xc8201e20b0, 0xc82032a000)\n    /usr/local/Cellar/go/1.5.1/libexec/src/net/http/server.go:1862 +0x19e\nnet/http.(*conn).serve(0xc8201e2000)\n    /usr/local/Cellar/go/1.5.1/libexec/src/net/http/server.go:1361 +0xbee\ncreated by net/http.(*Server).Serve\n    /usr/local/Cellar/go/1.5.1/libexec/src/net/http/server.go:1910 +0x3f6\n```\n\nAs I see it there are a few possibilities here:\n1. Fix the code causing the runtime exception. My understanding is that should be as simple as adding delete [here](https://github.com/go-swagger/go-swagger/blob/master/httpkit/request.go#L28)\n2. Decide that we don't want to support DELETEs with bodies. Generally you shouldn't be sending bodies with REST APIs, _but_ it isn't forbidden in HTTP1.1 - http://tools.ietf.org/html/rfc7231#section-4.3.5. If this is the case it should probably fail validation. \n\nHappy to submit a PR but would like to hear thoughts on which approach we want to take here. \n  This appears to fix #217. Should probably add some tests, but I haven't looked into them in depth yet. \n\nThis causes a regression on #196 which makes sense since the example in that issue is type `string` and  as per the changes here non complex objects won't get validated. \n\nOne thing I'm still trying to figure out how to do is check the type of array items, since currently this fails if you do\n\n``` yml\ntype: array\nitems:\n  type: object\n```\n\nsince `.Validate` is called on each of the items in the array. \n  The following `swagger.yml` creates invalid server code when using `swagger generate server`. From what I can tell this is a valid spec according to the swagger spec and tested using both the online swagger editor/viewer as well as the provided go-swagger `validate` command. \n\n``` yml\nswagger: '2.0'\ninfo:\n  version: 1.0.0\n  title: 'string-body-api'\npaths:\n  /echo:\n    post:\n      summary: Post a string, get the same string back.\n      parameters:\n        - name: body\n          in: body\n          description: this argument is a string\n          schema:\n            type: string\n      responses:\n        '200':\n          description: this return value is a string\n          schema:\n            type: string\n```\n\nWhen running the generated code (no changes) the following error occurs:\n\n```\n$ go run cmd/string-body-server/*.go\n# ./restapi/operations\nrestapi/operations/post_echo_parameters.go:40: body.Validate undefined (type string has no field or method Validate)\n```\n\nLooking at that file the error becomes apparent\n\n``` go\nvar body string\nif err := route.Consumer.Consume(r.Body, &body); err != nil {\n  res = append(res, errors.NewParseError(\"body\", \"body\", \"\", err))\n} else {\n  if err := body.Validate(route.Formats); err != nil { // <- Calling validate without defining it\n    res = append(res, err)\n  }\n\n  if len(res) == 0 {\n    o.Body = &body\n  }\n}\n```\n\nNot sure what the best fix is here. We could define a custom type and add a Validate method, but that may make it painful to deal with non string types being passed around. Alternatively we could possibly turn off validation for plain types like strings and numbers. \n\n_Note that the above example uses `string`, but `number` and `boolean` have the same issue._\n @casualjim That's a good point about non array/object values being invalid JSON. I think it's reasonable to disallow those as long as you think that's inline with the swagger spec (but should probably fail `validate` or something then).\n\nThat said, I was playing around some more and this also fails\n\n``` yaml\nswagger: '2.0'\ninfo:\n  version: 1.0.0\n  title: 'string-body-api'\npaths:\n  /echo:\n    post:\n      summary: Post an object\n      parameters:\n        - name: body\n          in: body\n          description: this argument is a string\n          schema:\n            type: object\n      responses:\n        '200':\n          description: All is good\n```\n\n(notice the object type in the body param)\n\n```\ngo run cmd/string-body-server/*.go\n# ./restapi/operations\nrestapi/operations/post_echo_parameters.go:40: body.Validate undefined (type interface {} is interface with no methods)\n```\n\nUnless I'm missing something I think this is almost certainly a valid spec. \n  ``` shell\n$ swagger generate server -f test.json\n$ cd cmd/test-server\n$ go build \n./main.go:39: undefined: configureAPI\n$ mv configure_test.go configure.go\n$ go build \n$ echo $?\n0\n```\n after reporting it and trying rereport #216 I found out that the file is name `configure_test.go`  because my api was called 'test' which makes this issue no problem and explains why I only found out about it while reporting ... \n\nI suppose it will be better if it was names test_configure.go but it isn't a problem at all.\n where's a copy of the API?\n @Xe I have since deleted it but the title has to start with the word 'test': \n\n``` json\n{\n  \"consumes\": [\n    \"application/json\",\n    \"application/x-www-form-urlencoded\"\n  ],\n  \"info\": {\n    \"title\": \"Test api\",\n    \"version\": \"0.1\"\n  },\n  \"paths\": {\n    \"/a\": {\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success message\"\n          },\n          \"500\": {\n            \"description\": \"Fail message\"\n          }\n        }\n      }\n    }\n  },\n  \"produces\": [\n    \"application/json\"\n  ],\n  \"swagger\": \"2.0\"\n}\n```\n\n@casualjim It will be a good idea, but given the case in which it happens, it's mostly so people who report bugs and name their test api's 'test api' to not be unpleasantly surprised. If you decide to fix this I propose to not append user generate strings but to prepend them.\nIn this case this means that the file will be called `test_configuration.go` which will work fine.\n  ex:\n\n``` go\n/* FindPetsByStatus: Finds Pets by status\n\nMultiple status values can be provided with comma separated strings\n*/\nfunc (a *Client) FindPetsByStatus(params *FindPetsByStatusParams, authInfo client.AuthInfoWriter) (*FindPetsByStatusOK, error) {\n...\n```\n ``` console\n$ swagger generate client swagger.json && golint ./...\n2016/01/16 22:05:58 building a plan for generation\n2016/01/16 22:05:58 planning definitions\n2016/01/16 22:05:58 planning operations\n2016/01/16 22:05:59 grouping operations into packages\n2016/01/16 22:05:59 planning meta data and facades\n2016/01/16 22:05:59 rendered model template: Pet\n2016/01/16 22:05:59 rendered model template: Order\n2016/01/16 22:05:59 rendered model template: Category\n2016/01/16 22:05:59 rendered model template: User\n2016/01/16 22:05:59 rendered model template: Tag\n2016/01/16 22:05:59 rendered model template: ApiResponse\n2016/01/16 22:05:59 rendered client parameters template: pet.AddPetParameters\n2016/01/16 22:05:59 rendered client responses template: pet.AddPetResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.DeletePetParameters\n2016/01/16 22:05:59 rendered client responses template: pet.DeletePetResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.FindPetsByStatusParameters\n2016/01/16 22:05:59 rendered client responses template: pet.FindPetsByStatusResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.FindPetsByTagsParameters\n2016/01/16 22:05:59 rendered client responses template: pet.FindPetsByTagsResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.GetPetByIDParameters\n2016/01/16 22:05:59 rendered client responses template: pet.GetPetByIDResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.UpdatePetParameters\n2016/01/16 22:05:59 rendered client responses template: pet.UpdatePetResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.UpdatePetWithFormParameters\n2016/01/16 22:05:59 rendered client responses template: pet.UpdatePetWithFormResponses\n2016/01/16 22:05:59 rendered client parameters template: pet.UploadFileParameters\n2016/01/16 22:05:59 rendered client responses template: pet.UploadFileResponses\n2016/01/16 22:05:59 rendered operation group client template: pet.PetClient\n2016/01/16 22:05:59 rendered client parameters template: store.DeleteOrderParameters\n2016/01/16 22:05:59 rendered client responses template: store.DeleteOrderResponses\n2016/01/16 22:05:59 rendered client parameters template: store.GetInventoryParameters\n2016/01/16 22:05:59 rendered client responses template: store.GetInventoryResponses\n2016/01/16 22:05:59 rendered client parameters template: store.GetOrderByIDParameters\n2016/01/16 22:05:59 rendered client responses template: store.GetOrderByIDResponses\n2016/01/16 22:05:59 rendered client parameters template: store.PlaceOrderParameters\n2016/01/16 22:05:59 rendered client responses template: store.PlaceOrderResponses\n2016/01/16 22:05:59 rendered operation group client template: store.StoreClient\n2016/01/16 22:05:59 rendered client parameters template: user.CreateUserParameters\n2016/01/16 22:05:59 rendered client responses template: user.CreateUserResponses\n2016/01/16 22:05:59 rendered client parameters template: user.CreateUsersWithArrayInputParameters\n2016/01/16 22:05:59 rendered client responses template: user.CreateUsersWithArrayInputResponses\n2016/01/16 22:05:59 rendered client parameters template: user.CreateUsersWithListInputParameters\n2016/01/16 22:05:59 rendered client responses template: user.CreateUsersWithListInputResponses\n2016/01/16 22:05:59 rendered client parameters template: user.DeleteUserParameters\n2016/01/16 22:05:59 rendered client responses template: user.DeleteUserResponses\n2016/01/16 22:05:59 rendered client parameters template: user.GetUserByNameParameters\n2016/01/16 22:05:59 rendered client responses template: user.GetUserByNameResponses\n2016/01/16 22:05:59 rendered client parameters template: user.LoginUserParameters\n2016/01/16 22:06:00 rendered client responses template: user.LoginUserResponses\n2016/01/16 22:06:00 rendered client parameters template: user.LogoutUserParameters\n2016/01/16 22:06:00 rendered client responses template: user.LogoutUserResponses\n2016/01/16 22:06:00 rendered client parameters template: user.UpdateUserParameters\n2016/01/16 22:06:00 rendered client responses template: user.UpdateUserResponses\n2016/01/16 22:06:00 rendered operation group client template: user.UserClient\n2016/01/16 22:06:00 rendered client facade template: client.SwaggerPetstoreClient\n```\n ``` console\n$ golint ./...\nclient/pet/delete_pet_parameters.go:41:37: method parameter petId should be petID\nclient/pet/get_pet_by_id_parameters.go:33:38: method parameter petId should be petID\nclient/pet/update_pet_with_form_parameters.go:49:45: method parameter petId should be petID\nclient/pet/upload_file_parameters.go:57:38: method parameter petId should be petID\nclient/store/delete_order_parameters.go:33:41: method parameter orderId should be orderID\nclient/store/get_order_by_id_parameters.go:33:42: method parameter orderId should be orderID\n```\n  I have read the [swagger.json generation](https://goswagger.io/generate/spec.html) and feel confused. Could you please give an example for it :)\n @casualjim 3 questions : \nQ1: Does a struct for Parameter model have to be declared in the SAME .go file where the swagger:route is declared for a router function?\nQ2: Assume that I have a route \"/services/{serviceName}\", how would I named the field associated with the path \"{serviceName}\" above in a struct wrapper for path params?\ni.e. type  ServiceNameParam struct {\n  ServiceName string <== is this named as \"serviceName\" or \"ServiceName\" or \"SERVICENAME\"?\n}\nQ3: Is the annotations casesenstive like \"Required\" vs \"required\"?. I see mixed examples about this.\n @casualjim Thx for the answers. One more question: Can methods in an interface be annotated?\n @casualjim : My generated spec is now working but seems to be missing a parameter \"description\"  to indicate to end user of the API URL endpoint of what's its doing. Example below, I wanted the line \"Disable/enable a compute node EC2 machine with a given IP address\" to show up as some sorta of description for the parameter... Am I missing something?\n\n// v2PutXXX disable/enable a compute node EC2 machine with a given IP address\n//\n// swagger:route PUT /compute/nodes/{nodeIPAddress} v2PutXXX\n//\n//  Disable/enable a compute node machine with a given IP address\n//\n//     Produces:\n//     - application/json\n//\n//     Consumes:\n//     - application/json\n//\n//     Schemes: http\n//\n//     Responses:\n//       default: errorResp\n//       200: okResp\n//\nfunc v2PutXXX(....)\n Is there an example how to generate example values from the code? Thank you for the answer.  - The comment for the server main template says that main should only be\n  overwritten if an `--include-main` flag is passed to `swagger\n  generate`.  This adds that flag and enforces it.\n\nFixes https://github.com/go-swagger/go-swagger/issues/210\n<a href='#crh-start'></a><a href='#crh-data-%7B%22approved%22%3A%20%7B%22https%3A//github.com/casualjim%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%7D%7D%2C%20%22comments%22%3A%20%7B%22General%20Comment%22%3A%20%7B%22html_url%22%3A%20%22https%3A//github.com/go-swagger/go-swagger/pull/211%23issuecomment-171517110%22%2C%20%22comments%22%3A%20%5B%7B%22body%22%3A%20%22%3Ashipit%3A%22%2C%20%22created_at%22%3A%20%222016-01-14T03%3A10%3A28Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%2C%20%7B%22body%22%3A%20%22thanks%20%3A100%3A%20%22%2C%20%22created_at%22%3A%20%222016-01-14T03%3A11%3A19Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%2C%20%7B%22body%22%3A%20%22%3A%2B1%3A%22%2C%20%22created_at%22%3A%20%222016-01-14T03%3A16%3A29Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%5D%2C%20%22title%22%3A%20%22General%20Comment%22%7D%7D%2C%20%22processed%22%3A%20%5B%22https%3A//github.com/go-swagger/go-swagger/pull/211%23issuecomment-171517110%22%2C%20%22https%3A//github.com/go-swagger/go-swagger/pull/211%23issuecomment-171517215%22%2C%20%22https%3A//github.com/go-swagger/go-swagger/pull/211%23issuecomment-171517733%22%5D%7D'></a>\n<a href='https://www.codereviewhub.com/'><img src='http://www.codereviewhub.com/site/github-bar.png' height=40></a>\n\n<img src='http://www.codereviewhub.com/site/github-approved-avatar.png'><a href='https://github.com/casualjim'><img src='https://avatars.githubusercontent.com/u/456109?v=3' width=34 height=34></a>\n- [x] <a href='#crh-comment-General Comment'></a> <img src='http://www.codereviewhub.com/site/github-completed.png' height=16 width=60>&nbsp;<b><a href='https://github.com/go-swagger/go-swagger/pull/211#issuecomment-171517110'>General Comment</a></b>\n- <a href='https://github.com/casualjim'><img border=0 src='https://avatars.githubusercontent.com/u/456109?v=3' height=16 width=16'></a> :shipit:\n- <a href='https://github.com/casualjim'><img border=0 src='https://avatars.githubusercontent.com/u/456109?v=3' height=16 width=16'></a> thanks :100:\n\n<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/211?mark_as_completed=1'><img src='http://www.codereviewhub.com/site/github-mark-as-completed.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/211?approve=1'><img src='http://www.codereviewhub.com/site/github-approve.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/211?approve=0'><img src='http://www.codereviewhub.com/site/github-undo-approve.png' height=26></a>&nbsp;<a href='https://github.com/go-swagger/go-swagger/pull/211'><img src='http://www.codereviewhub.com/site/github-refresh.png' height=26></a>\n<a href='#crh-end'></a>\n  - Before, operations without a \"Tag\" field in their spec would\n  generate incorrect imports (`$PROJECT/restapi/operations/operations`\n  instead of `$PROJECT/restapi/operations`)\n  <a href='#crh-start'></a><a href='#crh-data-%7B%22approved%22%3A%20%7B%22https%3A//github.com/casualjim%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%7D%7D%2C%20%22comments%22%3A%20%7B%22General%20Comment%22%3A%20%7B%22html_url%22%3A%20%22https%3A//github.com/go-swagger/go-swagger/pull/209%23issuecomment-171498933%22%2C%20%22comments%22%3A%20%5B%7B%22body%22%3A%20%22%3Ashipit%3A%22%2C%20%22created_at%22%3A%20%222016-01-14T01%3A48%3A33Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%5D%2C%20%22title%22%3A%20%22General%20Comment%22%7D%7D%2C%20%22processed%22%3A%20%5B%22https%3A//github.com/go-swagger/go-swagger/pull/209%23issuecomment-171498933%22%5D%7D'></a>\n  <a href='https://www.codereviewhub.com/'><img src='http://www.codereviewhub.com/site/github-bar.png' height=40></a>\n\n<img src='http://www.codereviewhub.com/site/github-approved-avatar.png'><a href='https://github.com/casualjim'><img src='https://avatars.githubusercontent.com/u/456109?v=3' width=34 height=34></a>\n\n<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/209?approve=1'><img src='http://www.codereviewhub.com/site/github-approve.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/209?approve=0'><img src='http://www.codereviewhub.com/site/github-undo-approve.png' height=26></a>&nbsp;<a href='https://github.com/go-swagger/go-swagger/pull/209'><img src='http://www.codereviewhub.com/site/github-refresh.png' height=26></a>\n<a href='#crh-end'></a>\n  Added possibility for custom command line option parsing as agreed upon in #207.\nCloses #207\n    Signed-off-by: Tobias Theobald tobitheo@gmail.com\n<a href='#crh-start'></a><a href='#crh-data-%7B%22approved%22%3A%20%7B%22https%3A//github.com/casualjim%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%7D%7D%2C%20%22comments%22%3A%20%7B%22General%20Comment%22%3A%20%7B%22html_url%22%3A%20%22https%3A//github.com/go-swagger/go-swagger/pull/208%23issuecomment-171363159%22%2C%20%22comments%22%3A%20%5B%7B%22body%22%3A%20%22%3Ashipit%3A%22%2C%20%22created_at%22%3A%20%222016-01-13T16%3A57%3A08Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%5D%2C%20%22title%22%3A%20%22General%20Comment%22%7D%7D%2C%20%22processed%22%3A%20%5B%22https%3A//github.com/go-swagger/go-swagger/pull/208%23issuecomment-171363159%22%5D%7D'></a>\n<a href='https://www.codereviewhub.com/'><img src='http://www.codereviewhub.com/site/github-bar.png' height=40></a>\n\n<img src='http://www.codereviewhub.com/site/github-approved-avatar.png'><a href='https://github.com/casualjim'><img src='https://avatars.githubusercontent.com/u/456109?v=3' width=34 height=34></a>\n\n<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/208?approve=1'><img src='http://www.codereviewhub.com/site/github-approve.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/208?approve=0'><img src='http://www.codereviewhub.com/site/github-undo-approve.png' height=26></a>&nbsp;<a href='https://github.com/go-swagger/go-swagger/pull/208'><img src='http://www.codereviewhub.com/site/github-refresh.png' height=26></a>\n<a href='#crh-end'></a>\n  If I am correct, there is currently no way to add custom command line options to the generated server code without modifying the ephemeral main.go. The go-flags package seems to conflict with the flag package (both packages fail upon finding unknown flags) and unlike the flag package, go-flags is object-oriented, so we can not simply define the necessary flags in every file's init() function as could be done with the built-in flag package.\nAs go-flags, however, is IMHO (and apparently also in the authors') much nicer than the builtin package, I propose the following solution to integrate user-defined flags with the generated parsing step.\n\nSolution sketch:\nxxx_api.go: Add a map[string]interface{} to the XxxAPI struct\nconfigure_xxx.go: configureAPI(...): Add an example on how to populate the map with own flag groups\nmain.go: Call configureAPI before parser.Parse but after creating parser. After calling configureAPI, iterate over flags map from api object and call parser.AddGroup(key, \"\", value) for each key-value pair.\n\nWhat do you think? The only downside I currently see, is that iterating over a map is unordered and so might result in help texts with differing order with each execution.\nI am currently working on a pull request.\n The problem I see with that is that a []interface{} slice only takes the object, but go-parser also wants a description (short appears to suffice). I think adding an extra type for that might help:\n\ntype CommandLineOptionsGroup struct {\n  ShortDescription string\n  LongDescription string\n  Options interface{}\n}\n\nHow does that sound? Where would you recommend putting such a type?\n  Make consistent to strfmt.Duration type.\n\nCloses #205.\n\nSigned-off-by: Aleksandr Vinokurov aleksandr.vin@gmail.com\n<a href='#crh-start'></a><a href='#crh-data-%7B%22processed%22%3A%20%5B%22https%3A//github.com/go-swagger/go-swagger/pull/206%23issuecomment-171106285%22%2C%20%22https%3A//github.com/go-swagger/go-swagger/pull/206%23issuecomment-171106395%22%5D%2C%20%22comments%22%3A%20%7B%22General%20Comment%22%3A%20%7B%22html_url%22%3A%20%22https%3A//github.com/go-swagger/go-swagger/pull/206%23issuecomment-171106285%22%2C%20%22comments%22%3A%20%5B%7B%22body%22%3A%20%22After%20adding%20missed%20fixes%20to%20tests%2C%20all%20seems%20to%20be%20ok%22%2C%20%22created_at%22%3A%20%222016-01-13T00%3A08%3A59Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/223293%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/aleksandr-vin%22%7D%7D%2C%20%7B%22body%22%3A%20%22%3Ashipit%3A%22%2C%20%22created_at%22%3A%20%222016-01-13T00%3A09%3A46Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%5D%2C%20%22title%22%3A%20%22General%20Comment%22%7D%7D%2C%20%22approved%22%3A%20%7B%22https%3A//github.com/casualjim%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%7D%7D%7D'></a>\n<a href='https://www.codereviewhub.com/'><img src='http://www.codereviewhub.com/site/github-bar.png' height=40></a>\n\n<img src='http://www.codereviewhub.com/site/github-approved-avatar.png'><a href='https://github.com/casualjim'><img src='https://avatars.githubusercontent.com/u/456109?v=3' width=34 height=34></a>\n- [x] <a href='#crh-comment-General Comment'></a> <img src='http://www.codereviewhub.com/site/github-completed.png' height=16 width=60>&nbsp;<b><a href='https://github.com/go-swagger/go-swagger/pull/206#issuecomment-171106285'>General Comment</a></b>\n- <a href='https://github.com/aleksandr-vin'><img border=0 src='https://avatars.githubusercontent.com/u/223293?v=3' height=16 width=16'></a> After adding missed fixes to tests, all seems to be ok\n\n<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/206?mark_as_completed=1'><img src='http://www.codereviewhub.com/site/github-mark-as-completed.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/206?approve=1'><img src='http://www.codereviewhub.com/site/github-approve.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/206?approve=0'><img src='http://www.codereviewhub.com/site/github-undo-approve.png' height=26></a>&nbsp;<a href='https://github.com/go-swagger/go-swagger/pull/206'><img src='http://www.codereviewhub.com/site/github-refresh.png' height=26></a>\n<a href='#crh-end'></a>\n After adding missed fixes to tests, all seems to be ok\n  Fixes #201\n<a href='#crh-start'></a><a href='#crh-data-%7B%22approved%22%3A%20%7B%22https%3A//github.com/casualjim%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%7D%7D%2C%20%22comments%22%3A%20%7B%22General%20Comment%22%3A%20%7B%22html_url%22%3A%20%22https%3A//github.com/go-swagger/go-swagger/pull/202%23issuecomment-170733237%22%2C%20%22comments%22%3A%20%5B%7B%22body%22%3A%20%22%3Ashipit%3A%22%2C%20%22created_at%22%3A%20%222016-01-11T23%3A39%3A34Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%2C%20%7B%22body%22%3A%20%22%3A100%3A%20Thanks%20a%20lot%21%22%2C%20%22created_at%22%3A%20%222016-01-11T23%3A42%3A09Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%5D%2C%20%22title%22%3A%20%22General%20Comment%22%7D%7D%2C%20%22processed%22%3A%20%5B%22https%3A//github.com/go-swagger/go-swagger/pull/202%23issuecomment-170733237%22%2C%20%22https%3A//github.com/go-swagger/go-swagger/pull/202%23issuecomment-170733687%22%5D%7D'></a>\n<a href='https://www.codereviewhub.com/'><img src='http://www.codereviewhub.com/site/github-bar.png' height=40></a>\n\n<img src='http://www.codereviewhub.com/site/github-approved-avatar.png'><a href='https://github.com/casualjim'><img src='https://avatars.githubusercontent.com/u/456109?v=3' width=34 height=34></a>\n- [ ] <a href='#crh-comment-General Comment'></a> <img src='http://www.codereviewhub.com/site/github-remaining.png' height=16 width=60>&nbsp;<b><a href='https://github.com/go-swagger/go-swagger/pull/202#issuecomment-170733237'>General Comment</a></b>\n- <a href='https://github.com/casualjim'><img border=0 src='https://avatars.githubusercontent.com/u/456109?v=3' height=16 width=16'></a> :shipit:\n- <a href='https://github.com/casualjim'><img border=0 src='https://avatars.githubusercontent.com/u/456109?v=3' height=16 width=16'></a> :100: Thanks a lot!\n\n<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/202?mark_as_completed=1'><img src='http://www.codereviewhub.com/site/github-mark-as-completed.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/202?approve=1'><img src='http://www.codereviewhub.com/site/github-approve.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/202?approve=0'><img src='http://www.codereviewhub.com/site/github-undo-approve.png' height=26></a>&nbsp;<a href='https://github.com/go-swagger/go-swagger/pull/202'><img src='http://www.codereviewhub.com/site/github-refresh.png' height=26></a>\n<a href='#crh-end'></a>\n  Signed-off-by: Mihail Stoykov M.Stoikov@gmail.com\n<a href='#crh-start'></a><a href='#crh-data-%7B%22approved%22%3A%20%7B%22https%3A//github.com/casualjim%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%7D%7D%2C%20%22comments%22%3A%20%7B%22General%20Comment%22%3A%20%7B%22html_url%22%3A%20%22https%3A//github.com/go-swagger/go-swagger/pull/200%23issuecomment-170584754%22%2C%20%22comments%22%3A%20%5B%7B%22body%22%3A%20%22%3Ashipit%3A%22%2C%20%22created_at%22%3A%20%222016-01-11T15%3A18%3A57Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%2C%20%7B%22body%22%3A%20%22Thanks%20a%20lot%20%3A100%3A%20%22%2C%20%22created_at%22%3A%20%222016-01-11T15%3A26%3A23Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%5D%2C%20%22title%22%3A%20%22General%20Comment%22%7D%7D%2C%20%22processed%22%3A%20%5B%22https%3A//github.com/go-swagger/go-swagger/pull/200%23issuecomment-170584754%22%2C%20%22https%3A//github.com/go-swagger/go-swagger/pull/200%23issuecomment-170586741%22%5D%7D'></a>\n<a href='https://www.codereviewhub.com/'><img src='http://www.codereviewhub.com/site/github-bar.png' height=40></a>\n\n<img src='http://www.codereviewhub.com/site/github-approved-avatar.png'><a href='https://github.com/casualjim'><img src='https://avatars.githubusercontent.com/u/456109?v=3' width=34 height=34></a>\n- [ ] <a href='#crh-comment-General Comment'></a> <img src='http://www.codereviewhub.com/site/github-remaining.png' height=16 width=60>&nbsp;<b><a href='https://github.com/go-swagger/go-swagger/pull/200#issuecomment-170584754'>General Comment</a></b>\n- <a href='https://github.com/casualjim'><img border=0 src='https://avatars.githubusercontent.com/u/456109?v=3' height=16 width=16'></a> :shipit:\n- <a href='https://github.com/casualjim'><img border=0 src='https://avatars.githubusercontent.com/u/456109?v=3' height=16 width=16'></a> Thanks a lot :100:\n\n<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/200?mark_as_completed=1'><img src='http://www.codereviewhub.com/site/github-mark-as-completed.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/200?approve=1'><img src='http://www.codereviewhub.com/site/github-approve.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/200?approve=0'><img src='http://www.codereviewhub.com/site/github-undo-approve.png' height=26></a>&nbsp;<a href='https://github.com/go-swagger/go-swagger/pull/200'><img src='http://www.codereviewhub.com/site/github-refresh.png' height=26></a>\n<a href='#crh-end'></a>\n  Added a shutdown hook in main. It can be assigned to the newly created variable in the xxxAPI struct during configuration. The parameter is preinitialized for backwards compatibility comaptibility reasons.\n<a href='#crh-start'></a><a href='#crh-data-%7B%22processed%22%3A%20%5B%22https%3A//github.com/go-swagger/go-swagger/pull/199%23issuecomment-170052260%22%2C%20%22https%3A//github.com/go-swagger/go-swagger/pull/199%23issuecomment-170067151%22%2C%20%22https%3A//github.com/go-swagger/go-swagger/pull/199%23issuecomment-170067632%22%5D%2C%20%22comments%22%3A%20%7B%22General%20Comment%22%3A%20%7B%22html_url%22%3A%20%22https%3A//github.com/go-swagger/go-swagger/pull/199%23issuecomment-170052260%22%2C%20%22comments%22%3A%20%5B%7B%22body%22%3A%20%22Forgot%20signed-off-by%20message%22%2C%20%22created_at%22%3A%20%222016-01-08T16%3A47%3A08Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/1289180%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/Tobi042%22%7D%7D%2C%20%7B%22body%22%3A%20%22%3Ashipit%3A%22%2C%20%22created_at%22%3A%20%222016-01-08T17%3A33%3A23Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%2C%20%7B%22body%22%3A%20%22thanks%20for%20this%2C%20cleaner%20solution%20I%20had%20in%20mind.%22%2C%20%22created_at%22%3A%20%222016-01-08T17%3A35%3A06Z%22%2C%20%22user%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%2C%20%22html_url%22%3A%20%22https%3A//github.com/casualjim%22%7D%7D%5D%2C%20%22title%22%3A%20%22General%20Comment%22%7D%7D%2C%20%22approved%22%3A%20%7B%22https%3A//github.com/casualjim%22%3A%20%7B%22avatar_url%22%3A%20%22https%3A//avatars.githubusercontent.com/u/456109%3Fv%3D3%22%7D%7D%7D'></a>\n<a href='https://www.codereviewhub.com/'><img src='http://www.codereviewhub.com/site/github-bar.png' height=40></a>\n\n<img src='http://www.codereviewhub.com/site/github-approved-avatar.png'><a href='https://github.com/casualjim'><img src='https://avatars.githubusercontent.com/u/456109?v=3' width=34 height=34></a>\n- [ ] <a href='#crh-comment-General Comment'></a> <img src='http://www.codereviewhub.com/site/github-remaining.png' height=16 width=60>&nbsp;<b><a href='https://github.com/go-swagger/go-swagger/pull/199#issuecomment-170052260'>General Comment</a></b>\n- <a href='https://github.com/Tobi042'><img border=0 src='https://avatars.githubusercontent.com/u/1289180?v=3' height=16 width=16'></a> Forgot signed-off-by message\n- <a href='https://github.com/casualjim'><img border=0 src='https://avatars.githubusercontent.com/u/456109?v=3' height=16 width=16'></a> :shipit:\n- <a href='https://github.com/casualjim'><img border=0 src='https://avatars.githubusercontent.com/u/456109?v=3' height=16 width=16'></a> thanks for this, cleaner solution I had in mind.\n\n<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/199?mark_as_completed=1'><img src='http://www.codereviewhub.com/site/github-mark-as-completed.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/199?approve=1'><img src='http://www.codereviewhub.com/site/github-approve.png' height=26></a>&nbsp;<a href='https://www.codereviewhub.com/go-swagger/go-swagger/pull/199?approve=0'><img src='http://www.codereviewhub.com/site/github-undo-approve.png' height=26></a>&nbsp;<a href='https://github.com/go-swagger/go-swagger/pull/199'><img src='http://www.codereviewhub.com/site/github-refresh.png' height=26></a>\n<a href='#crh-end'></a>\n Forgot signed-off-by message\n I see the api.ServerShutdown method hook in the generated struct, but how is it invoked/what invokes this method? Pending investigation how to configure the \"Stop Process\" button in the IntelliJ IDE. According to customer support it is only supported for the JVM, and would need to be added by the Golang plugin for Golang processes.  I've been trying to generate code for our swaggerfile, but the generator appears to be crashing. https://bitbucket.org/!api/2.0/snippets/evzijst/78nyR/a92c1d3130a18e5031cbd452ec0303ef09165154/files/swagger.json is the swaggerfile and this is the output:\n\n```\n% swagger generate client -f swagger.json bitbucket\n2016/01/07 13:18:33 building a plan for generation\n2016/01/07 13:18:33 planning definitions\n2016/01/07 13:18:44 planning operations\n2016/01/07 13:18:58 grouping operations into packages\n2016/01/07 13:18:58 planning meta data and facades\n2016/01/07 13:18:58 rendered model template: paginated_issue_attachments\n2016/01/07 13:18:58 rendered model template: paginated_issues\ntemplate: docstring:1:28: executing \"docstring\" at <.Title>: nil pointer evaluating *generator.GenSchema.Title\n```\n\nThe swaggerfile is valid, according to this tool.\n Thanks! Right now our swagger support is undergoing quite a few changes, so I'll hold off on submitting updates to our swaggerfile for a bit. When it starts to stabilize, we'll get an updated swaggerfile submitted.\n  I expect that the following spec: \n\n``` json\n{\n  \"consumes\": [\n    \"application/json\",\n    \"application/x-www-form-urlencoded\"\n  ],\n  \"paths\": {\n    \"/testing\": {\n      \"get\": {\n        \"parameters\": [\n          {\n            \"allowEmptyValue\": false,\n            \"in\": \"query\",\n            \"name\": \"testingThis\",\n            \"required\": false,\n            \"type\": \"integer\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success message\"\n          }\n        }\n      }\n    }\n  },\n  \"produces\": [\n    \"application/json\",\n    \"application/json; charset=utf-8\"\n  ],\n  \"swagger\": \"2.0\"\n}\n```\n\nmeans that I can send a request without the query param 'testingThis'. \n\nThe relevant generated code, below, will always set the param:\n\n``` go\nqrTestingThis := o.TestingThis\nqTestingThis := swag.FormatInt64(qrTestingThis)\nif qTestingThis != \"\" {\n       if err := r.SetQueryParam(\"testingThis\", qTestingThis); err != nil {\n             return err\n       }\n}\n```\n\nThe `qTestingThis != \"\"` is always true and the whole check can be omitted in this case.\n\nI don't know how to implement this, without breaking backwards compatibility, with previously generated code. \n\nBreaking compatibility proposition:\nIf all the fields that are not required are actually pointers to the values, a pointer of `nil` can mean that they are not set. This will definitely break code that use direct field setting of the param struct:\n\n``` go\n&GetTestingParams{\n     TestingThis: 12, \n}\n```\n\ninstead of the functions. \n\np.s. My workaround (especially because I never actually set the field) is to change it's type to string before generating the code. \n Thank you. \n  If a parameter has a format the generated code will not compile:\nExamples: \n\n``` json\n{\n  \"consumes\": [\n    \"application/json\",\n    \"application/x-www-form-urlencoded\"\n  ],\n  \"paths\": {\n    \"/testing\": {\n      \"put\": {\n        \"parameters\": [\n          {\n            \"format\": \"date\",\n            \"in\": \"formData\",\n            \"name\": \"testingThis\",\n            \"type\": \"string\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success message\"\n          }\n        }\n      }\n    }\n  },\n  \"produces\": [\n    \"application/json\",\n    \"application/json; charset=utf-8\"\n  ],\n  \"swagger\": \"2.0\"\n}\n```\n\nAnd some console output:\n\n``` shell\n$ swagger generate client -f testapi.json\n2016/01/06 13:20:16 rendered client parameters template: operations.PutTestingParameters\n2016/01/06 13:20:16 rendered client responses template: operations.PutTestingResponses\n2016/01/06 13:20:16 rendered operation group client template: operations.OperationsClient\n2016/01/06 13:20:16 rendered client embedded swagger JSON template: client.SwaggerClient\n2016/01/06 13:20:16 rendered client facade template: client.SwaggerClient\n$ cd client/\n$ go build\noperations/put_testing_parameters.go:41: invalid operation: fTestingThis != \"\" (mismatched types strfmt.Date and string)\noperations/put_testing_parameters.go:42: cannot use fTestingThis (type strfmt.Date) as type string in argument to r.SetFormParam\n```\n\nThis was found with a parameter of an array type with elements which had format: \n\n``` json\n{\n  \"consumes\": [\n    \"application/json\",\n    \"application/x-www-form-urlencoded\"\n  ],\n  \"paths\": {\n    \"/testing\": {\n      \"put\": {\n        \"parameters\": [\n          {\n            \"in\": \"formData\",\n            \"items\": {\n              \"format\": \"date\",\n              \"type\": \"string\"\n            },\n            \"name\": \"testingThis\",\n            \"type\": \"array\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success message\"\n          }\n        }\n      }\n    }\n  },\n  \"produces\": [\n    \"application/json\",\n    \"application/json; charset=utf-8\"\n  ],\n  \"swagger\": \"2.0\"\n}\n```\n\nWhich does not compile with a similar error:\n\n``` shell\n$ swagger generate client -f testapiarray.json\n2016/01/06 13:32:05 rendered client parameters template: operations.PutTestingParameters\n2016/01/06 13:32:05 rendered client responses template: operations.PutTestingResponses\n2016/01/06 13:32:05 rendered operation group client template: operations.OperationsClient\n2016/01/06 13:32:05 rendered client embedded swagger JSON template: client.SwaggerClient\n2016/01/06 13:32:06 rendered client facade template: client.SwaggerClient\n$ cd client/\n$ go build\noperations/put_testing_parameters.go:41: cannot use valuesTestingThis (type []strfmt.Date) as type []string in argument to swag.JoinByFormat\n```\n\nAnd final example:\nIf the type of the items is referenced:\n\n``` json\n{\n  \"consumes\": [\n    \"application/json\",\n    \"application/x-www-form-urlencoded\"\n  ],\n  \"definitions\": {\n    \"testType\": {\n      \"format\": \"date\",\n      \"type\": \"string\"\n    }\n  },\n  \"paths\": {\n    \"/testing\": {\n      \"put\": {\n        \"parameters\": [\n          {\n            \"in\": \"formData\",\n            \"items\": {\n              \"$ref\": \"#/definitions/testType\"\n            },\n            \"name\": \"testingThis\",\n            \"type\": \"array\"\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success message\"\n          }\n        }\n      }\n    }\n  },\n  \"produces\": [\n    \"application/json\",\n    \"application/json; charset=utf-8\"\n  ],\n  \"swagger\": \"2.0\"\n}\n```\n\nWhich results in \n\n``` shell\n$ swagger generate client -f testapi2.json\n2016/01/06 13:38:37 rendered model template: testType\n2016/01/06 13:38:37 generated model testType\n2016/01/06 13:38:37 rendered client parameters template: operations.PutTestingParameters\n2016/01/06 13:38:37 put_testing_parameters.go:32:17: expected type, found newline (and 5 more errors)\n2016/01/06 13:38:37 rendered client responses template: operations.PutTestingResponses\n2016/01/06 13:38:37 rendered operation group client template: operations.OperationsClient\n2016/01/06 13:38:37 rendered client embedded swagger JSON template: client.SwaggerClient\n2016/01/06 13:38:37 rendered client facade template: client.SwaggerClient\n$ cd client/\n$ go build\noperations/put_testing_parameters.go:32: syntax error: unexpected semicolon or newline\noperations/put_testing_parameters.go:38: syntax error: unexpected )\noperations/put_testing_parameters.go:40: non-declaration statement outside function body\noperations/put_testing_parameters.go:41: syntax error: unexpected }\n```\n @casualjim the 3rd example was my try at working around the problem. It looked valid from the [specification](http://swagger.io/specification/), but I am only reading trough it for the second time :)\n\nOn the question of the bug: \nI agree that the fix fixes the showed problem above, but I it doesn't work for all possible formats, for example it doesn't work with hostname. \n  In the generated unmarshalPricingComponent function, the case statement is using uppercased names for the `@type` property, when in the definition, I've defined them as lower case.\n\nDefinition:\n\n```\n    \"flatPricingComponent\": {\n      \"allOf\": [\n        {\n          \"$ref\": \"#/definitions/PricingComponent\"\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {}\n        }\n      ]\n    },\n\n```\n\ngenerated unmarshal code:\n\n```\nfunc unmarshalPricingComponent(data []byte, consumer httpkit.Consumer) (PricingComponent, error) {\n    buf := bytes.NewBuffer(data)\n\n    // the first time this is read is to fetch the value of the @type property.\n    var getType struct {\n        Type string `json:\"@type\"`\n    }\n    if err := consumer.Consume(buf, &getType); err != nil {\n        return nil, err\n    }\n\n    if err := validate.RequiredString(\"@type\", \"body\", getType.Type); err != nil {\n        return nil, err\n    }\n\n    // The value of @type is used to determine which type to create and unmarshal the data into\n    switch getType.Type {\n    case \"FlatPricingComponent\":\n        var result FlatPricingComponent\n        if err := consumer.Consume(buf, &result); err != nil {\n            return nil, err\n        }\n        return &result, nil\n\n    case \"TieredPricingComponent\":\n        var result TieredPricingComponent\n        if err := consumer.Consume(buf, &result); err != nil {\n            return nil, err\n        }\n        return &result, nil\n\n    case \"TieredVolumePricingComponent\":\n        var result TieredVolumePricingComponent\n        if err := consumer.Consume(buf, &result); err != nil {\n            return nil, err\n        }\n        return &result, nil\n\n    }\n    return nil, errors.New(422, \"invalid @type value: %q\", getType.Type)\n\n}\n```\n\nEx: `case \"FlatPricingComponent\":` should be `case \"flatPricingComponent\":` \n Rebuilding after deleting my models/client directories fixed it.\n  `models/flat_pricing_component.go:774: m.priceExplanation undefined (type *FlatPricingComponent has no field or method priceExplanation, but does have PriceExplanation)`\n\n```\ntype FlatPricingComponent struct {\n...\n    priceExplanationField []string\n...\n}\n```\n\nValidator method is missing the `Field` at the end of the field it's referencing:\n\n```\nfunc (m *FlatPricingComponent) validatePriceExplanation(formats strfmt.Registry) error {\n\n    for i := 0; i < len(m.PriceExplanation()); i++ {\n\n        if err := validate.Required(\"priceExplanation\"+\".\"+strconv.Itoa(i), \"body\", string(m.priceExplanation[i])); err != nil {\n            return err\n        }\n\n    }\n\n    return nil\n}\n```\n  @casualjim I'm not that familiar with golang, so I struggled to see how to add the the `bearer` token for use with client credentials grant. \r\n\r\nI got it working by exporting the runtime.do function i.e. `Do` and then creating a custom `Runtime` and setting `runtime.Do` to my implementation below:\r\n\r\n```golang\r\nfunc NewAuthenticatedClient(config *client.TransportConfig) *AuthenticatedClient {\r\n\ta := &AuthenticatedClientCheckRedirect{}\r\n\th := &http.Client{\r\n\t\tTransport: http.DefaultTransport,\r\n\t\tCheckRedirect: a.CheckRedirect,\r\n\t}\r\n\r\n\trt := rc.NewWithClient(config.Host, config.BasePath, config.Schemes, h)\r\n\tauthClient := &AuthenticatedClient{\r\n\t\tApiClients: client.New(rt, strfmt.Default),\r\n\t\tHttpClient: h,\r\n\t\tConfig: config,\r\n\t}\r\n\r\n\trt.Consumers[\"application/vnd.api+json;charset=UTF-8\"] = runtime.JSONConsumer()\r\n\trt.Consumers[\"application/vnd.api+json\"] = runtime.JSONConsumer()\r\n\trt.Do = authClient.Do\r\n\r\n\treturn authClient\r\n}\r\n\r\nfunc (r *AuthenticatedClient) Do(ctx context.Context, client *http.Client, req *http.Request) (*http.Response, error) {\r\n\tif client == nil {\r\n\t\tclient = r.HttpClient\r\n\t}\r\n\r\n\tif len(r.AccessToken) > 0 {\r\n\t\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", r.AccessToken))\r\n\t}\r\n\r\n\tresp, err := client.Do(req.WithContext(ctx))\r\n\t// If we got an error, and the context has been canceled,\r\n\t// the context's error is probably more useful.\r\n\tif err != nil {\r\n\t\tselect {\r\n\t\tcase <-ctx.Done():\r\n\t\t\terr = ctx.Err()\r\n\t\tdefault:\r\n\t\t}\r\n\t}\r\n\treturn resp, err\r\n}\r\n\r\nfunc (r *AuthenticatedClient) Login(clientId string, clientSecret string) error {\r\n\r\n\tmpbody := bytes.NewBuffer(nil)\r\n\twriter := multipart.NewWriter(mpbody)\r\n\t_ = writer.WriteField(\"grant_type\", \"client_credentials\")\r\n\twriter.Close()\r\n\treq, _ := http.NewRequest(\"POST\", \"/oauth2/token\", mpbody)\r\n\treq.URL.Host = r.Config.Host\r\n\treq.URL.Path = path.Join(r.Config.BasePath, req.URL.Path)\r\n\treq.URL.Scheme = r.Config.Schemes[0]\r\n\r\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\r\n\tencoded := base64.StdEncoding.EncodeToString([]byte(clientId + \":\" + clientSecret))\r\n\treq.Header.Set(\"Authorization\", \"Basic \"+encoded)\r\n\r\n\tclient := &http.Client{}\r\n\tresp, err := client.Do(req)\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\r\n\tbody, err := ioutil.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\tpanic(err.Error())\r\n\t}\r\n\r\n\tloginResponse, err := getLoginResponse([]byte(body))\r\n\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tr.AccessToken = loginResponse.AccessToken\r\n\treturn nil\r\n}\r\n```\r\n\r\nThat fact that I had to make the `do` method public makes me think there is probably a better way to do this?  Every time I generate a client from a 2.0 swagger spec it get random properties for models. Here is the spec.json file i'm using (https://gist.github.com/mephux/474d9512cbe54411900f). Is this a model gen logic error or is my spec wrong in some fashion?\n\nIf it's a logic issue can you point me in the right direction (in the code) and i'll fix and submit a pull request.\n @casualjim was wondering if that would be your reply.. hehe so, that would cause random property selection? Can you point me to the code for that? if proper model generation is dependent on validation.. why not just exit out completely on failure? I am using this spec now (https://gist.github.com/mephux/9181100f0cc2711cd628). I susspect the validation logic may be incorrect as well as this one returns different validation messages than what is returned from the swagger site.\n Closing - issue was a validation 2.0 inconsistency.\n\n`\"$ref\": \"#/definitions/integer\"` VS. `\"type\": \"integer\"\n   I believe when we tested ffjson we found that ugorji codec was faster: https://github.com/coreos/etcd/pull/3308\n\nhttps://github.com/ugorji/go/tree/master/codec\n  Has your opinion changed on this one @casualjim or do you still want to go with it?  - Tests in strfmt/time_test.go were separated to logical groups\n- Excessive tests were removed\n- Some assertions were normalized\n- strfmt.NewDateTime function was added to represent zero value for DateTime\n- strfmt.DateTime UnmarshalText was reduced, delegating decision to ParseDateTime\n  I have generated server and client for petstore, created build and trying get the list of pets it is showing the following message\n\n\"operation .FindPets has not yet been implemented\"\nHow can i implement \"FindPets\".\nIs there any example code to implement by referring that.\nPlease help me.\n  currently (just fetched latest and re-generated my client), all query params are sent to the server if they are in the swagger spec, even if they are marked `allowEmptyValue`.\n\nSee `<sample>_parameters.go`:\n\n```\n    // query param role.1\n    var qrRole1 string\n    if o.Role1 != nil {\n        qrRole1 = *o.Role1\n    }\n    qRole1 := qrRole1\n    if err := r.SetQueryParam(\"role.1\", qRole1); err != nil {\n        return err\n    }\n```\n\nReason this is useful:\n- some servers will break if you send up a param without a value, because they do validation on the value.\n- today as it is implemented, it will _always_ send the query param up. we'd rather not send it if it is null.\n\nLooks like the relevant generator code is: `go-swagger/generator/templates/client/parameter.gotmpl`:\n\n```\n  {{ if .IsQueryParam }}\n  // query param {{ .Name }}\n  {{ if .IsNullable }}var qr{{ pascalize .Name }} {{ .GoType }}\n  if {{ .ValueExpression }} != nil {\n    qr{{ pascalize .Name }} = *{{ .ValueExpression }}\n  }{{ else }}qr{{ pascalize .Name }} := {{ .ValueExpression }}{{ end}}\n  q{{ pascalize .Name}} := {{ if .Formatter }}{{ .Formatter }}(qr{{ pascalize .Name }}){{ else }}qr{{ pascalize .Name }}{{end}}{{ if not .AllowEmptyValue }}\n  if q{{ pascalize .Name }} != \"\" { {{ end }}\n  if err := r.SetQueryParam({{ printf \"%q\" .Name }}, q{{ pascalize .Name }}); err != nil {\n    return err\n  }\n  {{ if not .AllowEmptyValue }}}{{ end }}\n```\n\nFixed code for my query param \"username.2\" in the `<sample>_parameters.go` generated code:\n\n```\n    // query param username.2\n    var qrUsername2 string\n    if o.Username2 != nil {\n        qrUsername2 = *o.Username2\n    }\n    qUsername2 := qrUsername2\n    if (o.Username2 != nil) {\n        if err := r.SetQueryParam(\"username.2\", qUsername2); err != nil {\n            return err\n        }\n    }\n```\n Thanks - Here the value of allowEmptyValue is true. \n  New response objects should be created with `NewXXXX()` function call\ninstead of `XXXX{}` struct instantiation. Then default values for\nheaders will be pre filled.\n\nSigned-off-by: Aleksandr Vinokurov aleksandr.vin@gmail.com\n  replaced some hardcoded \":\" to Listseparator and changed some filepath to path (slash path)\n  I'm getting errors attempting to `go get` the project after a recent change possibly related to `divan/num2words`.\n\nI tested in a Docker container to ensure I was working with a clean environment. Here is my test when `GO15VENDOREXPERIMENT=1`:\n\n```\nroot@d33a963f53f2:/go# GO15VENDOREXPERIMENT=1 go get -u github.com/go-swagger/go-swagger/...\n# cd .; git --git-dir=/go/src/github.com/go-swagger/go-swagger/.git submodule update --init --recursive\nNo submodule mapping found in .gitmodules for path 'vendor/github.com/divan/num2words'\npackage github.com/go-swagger/go-swagger/...: exit status 1\n```\n\nHere is my test when `GO15VENDOREXPERIMENT=0`:\n\n```\nroot@d33a963f53f2:/go# GO15VENDOREXPERIMENT=0 go get -u github.com/go-swagger/go-swagger/...\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions\n    imports github.com/smartystreets/assertions/internal/oglematchers: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock/createmock\n    imports github.com/smartystreets/assertions/internal/oglemock/generate: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock/generate/test_cases\n    imports github.com/smartystreets/assertions/internal/oglemock: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock/generate/test_cases\n    imports github.com/smartystreets/assertions/internal/oglemock/generate/test_cases/complicated_pkg: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/oglemock/generate/test_cases\n    imports github.com/smartystreets/assertions/internal/oglemock/generate/test_cases/renamed_pkg: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest\n    imports github.com/smartystreets/assertions/internal/ogletest/srcutil: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest\n    imports github.com/smartystreets/assertions/internal/reqtrace: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest/test_cases\n    imports github.com/smartystreets/assertions/internal/ogletest: use of internal package not allowed\npackage github.com/go-swagger/go-swagger/vendor/github.com/smartystreets/assertions/internal/ogletest/test_cases\n    imports github.com/smartystreets/assertions/internal/ogletest/test_cases/mock_image: use of internal package not allowed\n```\n Is num2words even used? I think it was considered for when you have json keys that start with a number. it is much simpler to have that code into 'N16x16' for instance vs 'sixteenxsixteen' because it is actually hard to read typed out words. \n hahah indeed (:\n\nOn Sat, Dec 12, 2015 at 7:02 PM, Ivan Porto Carrero <\nnotifications@github.com> wrote:\n\n> yeah you're right. I'll remove it again, forgot I went with Nr instead.\n> I wanted to translate things like 16x16 to SixteenBySixteen and 16+16 to\n> SixteenAndSixteen but decided too much clever\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/go-swagger/go-swagger/issues/166#issuecomment-164213569\n> .\n\n## \n\n-Jonathan\n  Hi casualjim, @casualjim \n\n Do we have any plan for publishing a formal stable release of Go-Swagger project? \n\nIn the readme, I saw:\n\"This API is not stable yet, when it is stable it will be distributed over gopkg.in\", but I cannot find what's the exact date for the stable release in the readme.\n\nAny comment is appreciated! Thank you.\n\nThanks,\nXiaofei\n    If the type of schema in parameters attribute is \"object\", the validation will throw error saying \n\"panic: validation failure list:\nrequestBody in body must be of type object: \"string\" \"\n\nsample swagger:\n\"/folders\": {\n            \"post\": {\n\n```\n            \"parameters\": [{\n                \"name\": \"requestBody\",\n                \"in\": \"body\",\n                \"description\": \"body parameter\",\n                \"required\": true,\n                \"schema\": {\n                    \"type\": \"object\",\n                    \"title\": \"body of creating folder\",\n                    \"description\": \"body parameter of creating folder\",\n                    \"default\": \"{\\\"name\\\":\\\"new\\\",\\\"parent\\\":{\\\"id\\\":\\\"0\\\"}}\",\n                    \"required\": [\"name\",\n                    \"parent\"],\n                    \"properties\": {\n                        \"name\": {\n                            \"type\": \"object\"\n                        },\n                        \"parent\": {\n                            \"$ref\": \"#/definitions/parent\"\n                        }\n                    },\n                    \"readOnly\": false,\n                    \"externalDocs\": {\n                        \"description\": \"create a new folder.\",\n                        \"url\": \"https://box-content.readme.io/#create-a-new-folder\"\n                    },\n                    \"example\": {\n                        \"name\": \"newname.jpg\",\n                        \"parent\": {\n                            \"id\": \"0\"\n                        }\n                    }\n                }\n            }],\n```\n\n....\n}\n\nIf I change the Type value from \"object\" to \"string\", the validation will be OK. (The specific path is : /folders->post->parameters->schema->type, the sample is attached.)\nActually, the value \"object\" is valid in swagger 2.0 doc and the validation should be passed.\n\nHope this can be fixed.\n\nThanks,\nXiaofei\n[petstore.txt](https://github.com/go-swagger/go-swagger/files/57984/petstore.txt)\n  Code to unmarshal a generic type exists when the generic type of a normal property of a model. However, if a property is an array of a generic type, than the code doesn't handle unmarshalling the generic type.\n\nExample:\n\nif \u201cPricingComponent\u201d is generic than this will generate code to unmarshal the property \"pricingComponent\" on the model it's :\n\n```\n\"properties\": {\n  \"pricingComponent\": {\n    \"$ref\": \"#/definitions/PricingComponent\"\n  }\n}\n```\n\nThis doesn\u2019t generate any code to unmarshal the \"pricingComponents\" property.\n\n```\n\"properties\": {\n  \"pricingComponents\": {\n    \"type\": \"array\",\n    \"items\": {\n      \"$ref\": \"#/definitions/PricingComponent\"\n    }\n  }\n}\n```\n It never calls the generic unmarshal function which switches on the dispatch property in the case of the array of `PricingComponent`'s. You're correct, each implementation has it's own MarshalJSON/UnmarshalJSON implementation, but the function which calls those never gets run in the case of an array. \n\nHere's an example of the generated code for those (with the extra properties, sorry got lazy):\nhttps://gist.github.com/ecnahc515/0c7cd5769efc58690f66\n\nNo array: https://gist.github.com/ecnahc515/0c7cd5769efc58690f66#file-product_rate_plan_no_array-go-L117\nCauses this to get generated: https://gist.github.com/ecnahc515/0c7cd5769efc58690f66#file-product_rate_plan_no_array-go-L649-L724\n\nAn array: https://gist.github.com/ecnahc515/0c7cd5769efc58690f66#file-product_rate_plan_with_array-go-L118\n\nCauses no custom MarshalJSON or UnmarshalJSON to get generated for the ProductRatePlan object at all.\n  The validation feature does not support to validate the reference.  In the \"$ref\" element\n![incorrect referenct](https://cloud.githubusercontent.com/assets/2208663/11685168/01917d6c-9eb2-11e5-9968-ba52d0d7f9be.png)\n\n, I input an incorrect value, the validation can still pass. Actually, it should throw error and report. \n\nAlthough there is a ticket https://github.com/go-swagger/go-swagger/issues/16, but that one is just an enhancement, not a bug ticket.\n\nI believe this is a validation bug and we should  fix it.\n\nThanks,\nXiaofei\n Also, I noticed that validator treats references as validation errors. For instance, let's put a reference to parameter list:\n\n```\n  /foo:\n    get:\n      summary: Some endpoint\n      parameters:\n        - name: some_id\n          in: query\n          description: some ID\n          required: true\n          type: integer\n        - $ref: '#/parameters/some_shared_param'\n```\n\nValidator output for such case is:\n\n```\n- paths./foo.get.parameters.$ref in body is a forbidden property\n- paths./foo.get.parameters.name in body is required\n- paths./foo.get.parameters.in in body is required\n- paths./foo.get.parameters.type in body is required\n```\n\nAs specification says, using references in parameter list is valid: http://swagger.io/specification/#operationObject (`parameters` is expected to hold an array `[Parameter Object | Reference Object]`)\n\nIs there any plans to fix? Perhaps I overlooked something :)\n I thought that it looks similar because of the same reason: incorrect processing of `$ref` :) Let me open a new one...\n\nUpd: #321\n   Which client is this referring to, the is the client generated from a swagger spec?\n On go1.6, the client will automatically be http2 when the server supports it. In fact, the default behavior of http/2 clients is to identify as http/1.2. That should also take care of any efficiency gains from http2. There's no need to change anything to use streaming etc. Once it's http/2, the `net/http` will optimize the connection opens.\n No problem, I went down the same train of though a few weeks ago. This is a really good post on the topic: http://rmurphey.com/blog/2015/11/25/building-for-http2\n  Is this still a wish of yours @casualjim ?   What would be involved in implementing this? It looks like the primary Go protobuf library I see used won't support DynamicMessage (golang/protobuf#106)\n  It would be nice to have an additional param type like `json` which just takes a go struct and uses it as a default JSON `body`.\n\nHere is an example:\n\n``` go\ntype LoginPayload struct {\n    Email    string `json:\"email\"`\n    UserName string `json:\"user_name\"`\n    // Required: true\n    Password string `json:\"password\"`\n}\n\n// swagger:parameters login\ntype ImplicitWrapperStruct struct {\n    // In: body\n    Body PersonLoginPayload\n}\n```\n Hi @casualjim. Maybe I didn't make it clear enough. I was hoping for a way **without** the wrapper struct.\n Thanks!\n @casualjim I just came across this and for me this wouldn't be about optimising, but more about having to change your Go code so that it works with the swagger generator, opposed to swagger just working with your original code, right? I mean, would you find a blog article on writing a standard Go handler func that says \"make sure that you use a wrapper struct so that swagger generate can handle it\"? Not sure if that makes sense...?\n\ncc @schickling \n @casualjim  My pr did not address what they were talking about as he Is talking about paramaters not response. I do plan on doing a pr to add `swagger:bodyparamaters` though\n  > it could use the same syntax as httpie for specifying params in different positions.\n> The generator could also generate a bash and zsh completion document for better usability\n\nYou could use [gcli](https://github.com/tcnksm/gcli), a tool for generating the boilerplate code for the command-line interface. With gcli you can use the CLI framework that you like, but since you need bash-zsh autocompletion I suggest [Cobra](https://github.com/spf13/cobra), because it is the only one that has built-in support for generation of bash-zsh autocompletion; as a bonus, Cobra has support for generating man pages too, which is a nice addition.\n This would be terrifically useful!\n\nA couple lessons learned from building some cli tools for APIs:\n1. session file, so we can store session data for ease of use\n2. Detect login endpoint so auth APIs are easy to use with the cli\n3. Cross platform: portable cli binaries are very useful for testing an API\n This is exactly why am using go-swagger. To make a CLI. It would be great to have a tool to fully generate CLIs.\n\n@drewwells summarized it well.\n\nFor his second point, I would probably check for /user endpoint and /user/auth, /user/login.\nAlso maybe ask a few questions regarding this during generation. Like type of authentication, login endpoint...\n I think this is out of scope for the core go-swagger. But that would be a cool project using the go-swagger libs.\n The `operationId` is a key property of an [operation](http://swagger.io/specification/#operationObject) to provide short commands.\n  The model and its `validate` method generated by `swagger generate models` should properly handle optional properties (properties not mentionned as `required`).\n\nCurrently optional properties that are not filled are rejected if they do not match a valid value.\n\nInstead, the zero value should be used to detect if the property has not been set. If the zero value of the property is a valid value for the property, the type of the property in the generated model should be a pointer in order to allow `nil`. For example, for a `string` property that has `minLength >= 1`, the empty string (\"\") can be used to distinguish a case where the property is not set, so a `string` type is ok. If `minLength == 0`, `*string` should be used.\n\nHere is a (failing) test case:\n\n``` go\n// Dump this in a `models/pet_test.go` file with petstore.json (from Swagger), then:\n//   cd models; go generate; go test -v\npackage models\n\n//go:generate swagger generate model -t .. -m models -n Pet -f ../petstore.json\n//go:generate swagger generate model -t .. -m models -n Category -f ../petstore.json\n//go:generate swagger generate model -t .. -m models -n Tag -f ../petstore.json\n\nimport (\n    \"encoding/json\"\n    \"github.com/go-swagger/go-swagger/strfmt\"\n    \"testing\"\n)\n\nfunc TestValidateOptionalFields(t *testing.T) {\n    // Only name and photoUrls are required\n    in := []byte(`{\"name\":\"\",\"photoUrls\":[]}`)\n    var pet Pet\n    if err := json.Unmarshal(in, &pet); err != nil {\n        t.FailNow()\n    }\n\n    validators := strfmt.NewFormats()\n\n    if err := pet.Validate(validators); err != nil {\n        t.Log(err)\n        t.FailNow()\n    }\n}\n```\n\nOutput:\n\n```\n=== RUN   TestValidateOptionalFields\n--- FAIL: TestValidateOptionalFields (0.00s)\n    pet_test.go:24: validation failure list:\n        status in body should be one of [available pending sold]\nFAIL\nexit status 1\nFAIL    github.com/dolmen/go-swagger-petstore/models    0.128s\n```\n\nThe `status` property is not marked as required in petstore.json `Pet`. The empty string is not a valid value for the enum, so the empty string should be accepted as _unset_ value.\n ae029a7471324faf982064dd0c991e99205cb35b is a workaround for this issue, but not the cleaner solution I proposed (but I understand, more complex to implement).\n  I generated my client: swagger generate client -f swagger.yml\n\nFor one spec that is used for staging and production hosts, is there a best practice to hook in and modify which host the generated client to use?  I read http://go-swagger.github.io/generate/client/ which was very helpful.\n\nThanks for a so-far-very-useful library! I came up with this, but I don't know if it is the way you intend.\n\nfile: config.go\n\n``` go\npackage main\n\nimport (\n    \"fmt\"\n    apiclient \"github.com/jawspeak/go-stash-restclient/client\"\n    \"github.com/go-swagger/go-swagger/spec\"\n    \"encoding/json\"\n    \"regexp\"\n    \"io/ioutil\"\n    \"os\"\n)\n\ntype goStashRestClientConfig struct {\n    Host     string        `json:host`\n    Username string        `json:username`\n    Password string        `json:password`\n}\n\nfunc validateRequiredField(field string, configValue *string) {\n    if configValue == nil || len(*configValue) == 0 {\n        fmt.Println(\"Required field unset in config.json: \", field)\n        os.Exit(1)\n    }\n}\n\nfunc SetupConfig() {\n    file, err := ioutil.ReadFile(\"./config.json\")\n    commentStripper := regexp.MustCompile(\"(?s)//.*?\\n|/\\\\*.*?\\\\*/\")\n    file = commentStripper.ReplaceAll(file, nil)\n    if err != nil {\n        fmt.Printf(\"File error: %v\\n\", err)\n        panic(err)\n    }\n    fmt.Println(string(file))\n    var config goStashRestClientConfig\n    json.Unmarshal(file, &config)\n    validateRequiredField(\"host\", &config.Host)\n    //validateRequiredField(\"username\", config.Username)\n    //validateRequiredField(\"password\", config.Password)\n\n    s := &spec.Swagger{}\n    s.UnmarshalJSON(apiclient.SwaggerJSON)\n    s.Host = config.Host\n    fmt.Println(\"Using host=\", s.Host)\n\n    bytes, err := s.MarshalJSON()\n    if err != nil {\n        // the spec should be valid since it was generated by go-swagger.\n        panic(err)\n    }\n\n    // Then overwrite the previous json with the new settings.\n    apiclient.SwaggerJSON = json.RawMessage(bytes) // Update with the new hostname. TODO better way?\n}\n```\n\nfile: main.go\n\n``` go\npackage main\n\nimport (\n    \"fmt\"\n\n    \"log\"\n\n    apiclient \"github.com/jawspeak/go-stash-restclient/client\"\n    \"github.com/jawspeak/go-stash-restclient/client/operations\"\n)\nfunc main() {\n    SetupConfig() // call setup to override the serialized swagger spec.\n\n    // some operation, use directly\n    resp, err := apiclient.Default.Operations.GetCommits(operations.GetCommitsParams{Project: \"GO\", Repo: \"square\"})\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"%#v\\n\", resp.Payload)\n}\n```\n Thanks - excellent, much simpler. Also - note my older had a bug after I posted it. So I'm closing this. I used the following:\n\n./config.go\n\n``` go\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n    \"regexp\"\n\n    \"github.com/go-swagger/go-swagger/spec\"\n    httptransport \"github.com/go-swagger/go-swagger/httpkit/client\"\n    apiclient \"github.com/jawspeak/go-stash-restclient/client\"\n)\n\ntype goStashRestClientConfig struct {\n    Host     string `json:host`\n    Username string `json:username`\n    Password string `json:password`\n}\n\nfunc validateRequiredField(field string, configValue *string) {\n    if configValue == nil || len(*configValue) == 0 {\n        fmt.Println(\"Required field unset in config.json: \", field)\n        os.Exit(1)\n    }\n}\n\nfunc SetupConfig() {\n    file, err := ioutil.ReadFile(\"./config.json\")\n    commentStripper := regexp.MustCompile(\"(?s)//.*?\\n|/\\\\*.*?\\\\*/\")\n    file = commentStripper.ReplaceAll(file, nil)\n    if err != nil {\n        fmt.Printf(\"File error: %v\\n\", err)\n        panic(err)\n    }\n    var config goStashRestClientConfig\n    json.Unmarshal(file, &config)\n    validateRequiredField(\"host\", &config.Host)\n    //validateRequiredField(\"username\", config.Username)\n    //validateRequiredField(\"password\", config.Password)\n\n    doc, err := spec.New(apiclient.SwaggerJSON, \"\")\n    if err != nil {\n        panic(err)\n    }\n    transport := httptransport.New(doc)\n    transport.Host = config.Host\n    apiclient.Default.SetTransport(transport)\n}\n```\n\n./config.json\n\n``` json\n// Config file you use to connect to your repository.\n// Rename to config.json when you're ready for your environment.\n// Reminder - json doesn't accept comments usually, we strip these out.\n{\n  \"host\": \"api.example.com\",\n  \"username\": \"your-user\",\n  \"password\": \"your-pass\"\n}\n```\n\n./main.go\n\n``` go\npackage main\n\nimport (\n    \"fmt\"\n\n    \"log\"\n\n    apiclient \"github.com/jawspeak/go-stash-restclient/client\"\n    \"github.com/jawspeak/go-stash-restclient/client/operations\"\n)\n\nfunc main() {\n    SetupConfig()\n\n    resp, err := apiclient.Default.Operations.GetCommits(operations.GetCommitsParams{Project: \"GO\", Repo: \"square\"})\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Printf(\"%#v\\n\", resp.Payload)\n}\n```\n  Consider a `swagger` option to produce sorted-order fields in models' structs or a spec-persistent order.\n\nAs for me: I place parameters in spec in a specific order to describe the object in domains. But `swagger generate` sorts them alphabetically, and such order is taken for ORM system to generate tables in DB... which are rather hard to read. \n  Do you mean an auto check for new release on Github? On each swagger call?\n Nice. Please look at Cocoa Pods, it goes a bit further and checks automatically. You can make a background check on every swagger call and print at the end of the work...\n  Started from the need of smth. like [flask.url_for in Python](http://flask.pocoo.org/docs/0.10/api/#flask.url_for) to return a newly created resource url in Location header.\n\nConsidering that _/generator/templates/server/operation.gotmpl_ is a nice place for such url builder function.\n## Below are my suggestions\n\nAt first point I think of extending the point to get the ability to build urls for any **unique** resource path mentioned in spec.\n\nFor ex. all these 5 operations\n- _GET /events_\n- _POST /events_\n- _GET /events/{id}_\n- _PUT /events/{id}_\n- _DELETE /events/{id}_\n\nWill need only two url builder functions, smth. like:\n- `events.BuildUrl()`\n- `events.BuildUrl(Id)`\n\nBut this case seems to have a leak in abstraction between operation and its url. If we decide to replace the _PUT /events/{id}_ **operation** to another url keeping the _operationId_ unchanged -- we will need to update the call to its url builder function. But actually we have not changed the semantic of the **operations** so we need a concrete url builder call for it.\n\nIn other words I think we need a one-to-one url-builder functions for each **operation** to be able to use the proper one based on the operation semantics.\n  https://app.shippable.com/\n  Hi,\n\nWhen I try to generate a GO server with my swagger.json file (which passes validation), I get the following message:\n\n 2015/11/18 11:23:01 rendered model template: vmid\n2015/11/18 11:23:01 generated model vmid\n2015/11/18 11:23:01 rendered model template: vmspec\n2015/11/18 11:23:01 generated model vmspec\n2015/11/18 11:23:01 rendered model template: error\n2015/11/18 11:23:01 generated model error\n2015/11/18 11:23:01 rendered model template: vmspec_cpu\n2015/11/18 11:23:02 generated model vmspec_cpu\n2015/11/18 11:23:02 rendered model template: vmspec_memory\n2015/11/18 11:23:02 generated model vmspec_memory\n2015/11/18 11:23:02 target must reside inside a location in the GOPATH\n\nA models directory is generated.  What does the error mean that target must reside inside a location in the GOPATH?  Thank you.\n Where are you calling `swagger generate`? And what are your GOPATH?\n Ah ha.. Thanks.  With this, I got further:\n aktwang@aktwang-VirtualBox:~/.gvm/pkgsets/go1.4/global/src/github.ibm.com/user/json$ echo $GOPATH\n/home/aktwang/.gvm/pkgsets/go1.4/global\naktwang@aktwang-VirtualBox:~/.gvm/pkgsets/go1.4/global/src/github.ibm.com/user/json$ swagger generate server -f ./swagger.json\n2015/11/18 11:52:41 rendered model template: vmspec_memory\n2015/11/18 11:52:42 generated model vmspec_memory\n2015/11/18 11:52:42 rendered model template: vmid\n2015/11/18 11:52:42 generated model vmid\n2015/11/18 11:52:42 rendered model template: vmspec\n2015/11/18 11:52:42 generated model vmspec\n2015/11/18 11:52:42 rendered model template: error\n2015/11/18 11:52:42 generated model error\n2015/11/18 11:52:42 rendered model template: vmspec_cpu\n2015/11/18 11:52:42 generated model vmspec_cpu\n2015/11/18 11:52:42 rendered handler template: Default.VMPost\n2015/11/18 11:52:42 generated handler Default.VMPost\n2015/11/18 11:52:42 rendered parameters template: Default.VMPostParameters\n2015/11/18 11:52:42 generated parameters Default.VMPostParameters\n2015/11/18 11:52:42 rendered responses template: Default.VMPostResponses\n2015/11/18 11:52:42 generated responses Default.VMPostResponses\n2015/11/18 11:52:42 rendered builder template: operations.Genesis\n2015/11/18 11:52:42 genesis_api.go:51:17: expected ';', found 'default' (and 3 more errors)\n2015/11/18 11:52:42 rendered embedded Swagger JSON template: server.Genesis\n2015/11/18 11:52:42 rendered configure api template: operations.ConfigureGenesis\n2015/11/18 11:52:42 configure_genesis.go:28:23: expected operand, found 'default' (and 2 more errors)\n2015/11/18 11:52:42 rendered main template: server.Genesis\naktwang@aktwang-VirtualBox:~/.gvm/pkgsets/go1.4/global/src/github.ibm.com/user/json$\n Hi guys, My server code generation works great!  However, I have a general question.  Let's say if I modify some of my APIs (the swagger.json) file, and having the need to regenerate the server code.  However, I've added my own code into some Handler routines already.  So, does that mean I have to re-do all the work after I regenerate again?  Thanks!\n casualjim, Thanks for the quick reply. I took a closer look at the server code and now have a better understanding on how to use it.  Another general question, I also generated the client.  (went smoothly!) How do I use the client? :)  I assume I should write my own main(), right?  I see a default_client.go in the default directory and a XXX_client.go file generated.  Thanks again!\n Ah ha.  This is mighty useful (the doc)! Thanks casualjim.  \n casualjim, More questions...  What's the difference between using a httptransport to create a client and not using it?  Also, I have two client files generated.  Should I add my main in the default_client.go file, or the XXX_client.go file?  (this one may be a dumb question because I ought to figure it out by reading the code..right? :) \n  If an HTTP response has a Content-Type of `application/json;charset=utf-8` then the generated client's consumer will not properly handle the response and returns an error `no consumer: application/json;charset=utf-8\"`. This is a valid header, and it should be able to handle the charset, and potentially other values in a header. \n  I'm currently trying to use the spec generator but I can't get the `model` annotation to work.\n\nHere is my code:\n\n``` go\npackage models\n\n// Entity swagger:model \ntype Entity struct {\n    arangolite.Document\n    Created     *time.Time `json:\"created,omitempty\"`\n    LastUpdated *time.Time `json:\"lastUpdated,omitempty\"`\n    Type        *string    `json:\"type,omitempty\"`\n}\n```\n\n``` go\npackage controllers\n\n// Find swagger:route GET /entities entities find\n// Responses:\n//  200: []Entity\nfunc (c *EntitiesCtrl) Find(w http.ResponseWriter, r *http.Request) {\n    userID, err := c.pg.GetUserID(r)\n    if err != nil {\n        c.r.JSONError(w, http.StatusUnauthorized, errs.API.Internal, err)\n        return\n    }\n\n    filter, err := c.pg.GetFilter(r)\n    if err != nil {\n        c.r.JSONError(w, http.StatusBadRequest, errs.API.FilterDecoding, err)\n        return\n    }\n\n    entities, err := c.i.Find(userID, filter)\n    if err != nil {\n        switch err.(type) {\n        case errs.ErrInvalidFilter:\n            c.r.JSONError(w, 422, errs.API.InvalidFilter, err)\n        default:\n            c.r.JSONError(w, http.StatusInternalServerError, errs.API.Internal, err)\n        }\n        return\n    }\n\n    c.r.JSON(w, http.StatusOK, entities)\n}\n```\n\nI already read the https://github.com/go-swagger/go-swagger/issues/67 issue and tried to add `_ = models.Entity{}` or `_ = []models.Entity{}` in the controller to trigger the generation but nothing works.\n\nI also thought that maybe there were some kind of issues with the package naming so I tried to annotate the model with `// swagger:model models.Entity` and the response `//  200: []models.Entity` but it doesn't work either.\n\nThanks a lot for your help.\n Oh I have to wrap my models in structs to use it in responses ?\nShouldn't `// swagger:model` be an alias for that ?\nI mean, it is kinda weird to have to write actual Go code to make the documentation system work.\n Ok that makes sense.\nThanks a lot for your help and your work ;)\n  Using the swagger schema from https://quay.io/api/v1/discovery:\n\nIf I generate a client the use of other clients is inconsistent. I generated a schema which orgiinally included the archivedlogs client, but after regenerating it a few times, it removed the archivedlogs, but added userfiles. It seems it's not always using all clients it generated in the frontend_client constructor.\n\nHere's the diff (it took me a few client generations to get this to happen since it doesn't always occur). It seems to be limited to the archivedlogs and userfiles packages, not sure why the others aren't being added/removed between generation.\n\n``` diff\ndiff --git a/common/go-quay/client/quay_frontend_client.go b/common/go-quay/client/quay_frontend_client.go\nindex 52b5e16..9487e26 100644\n--- a/common/go-quay/client/quay_frontend_client.go\n+++ b/common/go-quay/client/quay_frontend_client.go\n@@ -7,6 +7,7 @@ import (\n    \"github.com/go-swagger/go-swagger/client\"\n    \"github.com/go-swagger/go-swagger/strfmt\"\n\n+   \"github.com/foo/common/go-quay/client/archivedlogs\"\n    \"github.com/foo/common/go-quay/client/billing\"\n    \"github.com/foo/common/go-quay/client/build\"\n    \"github.com/foo/common/go-quay/client/discovery\"\n@@ -25,13 +26,14 @@ import (\n    \"github.com/foo/common/go-quay/client/team\"\n    \"github.com/foo/common/go-quay/client/trigger\"\n    \"github.com/foo/common/go-quay/client/user\"\n-   \"github.com/foo/common/go-quay/client/userfiles\"\n )\n\n // New creates a new quay frontend client\n func New(transport client.Transport, formats strfmt.Registry) *QuayFrontend {\n    cli := new(QuayFrontend)\n\n+   cli.Archivedlogs = archivedlogs.New(transport, formats)\n+\n    cli.Billing = billing.New(transport, formats)\n\n    cli.Build = build.New(transport, formats)\n@@ -68,13 +70,13 @@ func New(transport client.Transport, formats strfmt.Registry) *QuayFrontend {\n\n    cli.User = user.New(transport, formats)\n\n-   cli.Userfiles = userfiles.New(transport, formats)\n-\n    return cli\n }\n\n // QuayFrontend is a client for quay frontend\n type QuayFrontend struct {\n+   Archivedlogs *archivedlogs.Client\n+\n    Billing *billing.Client\n\n    Build *build.Client\n@@ -110,6 +112,4 @@ type QuayFrontend struct {\n    Trigger *trigger.Client\n\n    User *user.Client\n-\n-   Userfiles *userfiles.Client\n }\n```\n Reported this upstream to the quay.io folk. I'll leave this open since it seems validation/client generation should probably be able to determine this was, in fact not completely valid. (maybe just do a rough pass at the beginning to check all operations are unique?).\n\nBy the way, I wrote a simple JQ query which is able to tell me if any operationIds were repeated if it's of use to anyone finding this themselves.\n\n`curl https://quay.io/api/v1/discovery | jq '.paths[][].operationId?' | uniq -d`\n  How does this issue differ from #100?  Where would this be useful?\n  What is this `net` package you are refering to?\nI see no `Context` in [stdlib `net`](https://golang.org/pkg/net/)...\n  Hi there, we are having difficulties with `go get` recently after a submodule was added to the project. We are seeing the following errors:\n\n```\ngo get -u github.com/go-swagger/go-swagger/...\n# cd .; git --git-dir=/drone/src/github.com/go-swagger/go-swagger/.git submodule update --init --recursive\nNo submodule mapping found in .gitmodules for path 'docs/public'\n```\n\nThe issue appears to be the use of a `git+ssh` url:\n\n```\n[submodule \"docs/public\"]\n    path = docs/public\n    url = git@github.com:go-swagger/go-swagger.github.io.git\n```\n\nThis can be problematic for CI servers that may be building public repositories and don't have an SSH key installed on them. Without an SSH key it is unable to authenticate to GitHub and clone the repository:\n\n```\ngit clone git@github.com:go-swagger/go-swagger.github.io.git\nCloning into 'go-swagger.github.io'...\nThe authenticity of host 'github.com (192.30.252.131)' can't be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added 'github.com,192.30.252.131' (RSA) to the list of known hosts.\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\nWould it be possible to use `git+https` instead for the submodule?\n Still not working:\n\n```\ngo get -u github.com/go-swagger/go-swagger/...\n# cd .; git --git-dir=/go/src/github.com/go-swagger/go-swagger/.git submodule update --init --recursive\nNo submodule mapping found in .gitmodules for path 'docs/public'\npackage github.com/go-swagger/go-swagger/...: exit status 1\n```\n @casualjim it has something to do with `GO15VENDOREXPERIMENT`:\n\n```\ndocker run -t -i golang:1.5 /bin/bash -c \"GO15VENDOREXPERIMENT=1 go get -u github.com/go-swagger/go-swagger/...\"\n# cd .; git --git-dir=/go/src/github.com/go-swagger/go-swagger/.git submodule update --init --recursive\nNo submodule mapping found in .gitmodules for path 'docs/public'\npackage github.com/go-swagger/go-swagger/...: exit status 1\n```\n\nwith `GO15VENDOREXPERIMENT=1` it fails and with `GO15VENDOREXPERIMENT=0` it succeeds.\n  Errors:\n\n```\nrestapi/operations/events/get_event_by_id.go:13: undefined: models in models.Event\nrestapi/operations/events/get_event_by_id.go:15: undefined: models in models.Event\nrestapi/operations/events/get_event_by_id.go:21: undefined: models in models.Event\nrestapi/operations/events/get_events.go:13: undefined: models in models.Event\nrestapi/operations/events/get_events.go:15: undefined: models in models.Event\nrestapi/operations/events/get_events.go:21: undefined: models in models.Event\nrestapi/operations/events/post_event_parameters.go:17: undefined: models in models.Event\n```\n\nswagger.yml:\n\n``` yaml\nswagger: '2.0'\ninfo:\n  version: 0.0.0\n  title: 'AttendList'\n  description: |\n    AttendList service.\n  contact:\n    name: API Support\n    url: http://attendlist.co/support\n    email: contact@evecon.co\nconsumes:\n  - application/json\nproduces:\n  - application/json\ndefinitions:\n  Event:\n    title: Event\n    type: object\n    properties:\n      Id:\n        type: integer\n        format: int64\n        readOnly: true\n      Version:\n        type: integer\n        format: int64\n        readOnly: true\n      Created:\n        type: integer\n        format: int64\n        readOnly: true\n      Updated:\n        type: integer\n        format: int64\n        readOnly: true\n      Deleted:\n        type: boolean\n        readOnly: true\n      StartDate:\n        type: string\n        format: date-time\n      EndDate:\n        type: string\n        format: date-time\n      Latitude:\n        type: number\n        format: float\n      Longitude:\n        type: number\n        format: float\n      Name:\n        type: string\n      URL:\n        type: string\n      Notes:\n        type: string\n      Autosearch:\n        type: boolean\n    example:\n      StartDate: \"2015-11-01T12:00:00Z\"\n      EndDate: \"2015-11-05T12:00:00Z\"\n      Latitude: 59.842609\n      Longitude: 30.319087\n      Name: \"Bikers meeting\"\n      URL: \"http://attendlist.co\"\n      Notes: \"Yet another bikers meeting\"\n      Autosearch: false\npaths:\n  /events:\n    get:\n      description: Get events.\n      tags:\n      - events\n      operationId: getEvents\n      responses:\n        default:\n          description: Generic Error\n        '200':\n          description: Successful response\n          schema:\n            title: ArrayOfEvents\n            type: array\n            items:\n              $ref: '#/definitions/Event'\n    post:\n      description: Create new event.\n      tags:\n      - events\n      operationId: postEvent\n      parameters:\n        - name: Event\n          in: body\n          description: New events\n          required: true\n          schema:\n            $ref: '#/definitions/Event'\n      responses:\n        default:\n          description: Generic Error\n        '201':\n          description: |\n            Successful response.\n            'Location' header with link to /events/{id} containing new ID.\n  /events/{id}:\n    parameters:\n      - name: id\n        in: path\n        description: Existing event id.\n        required: true\n        type: integer\n        format: int64\n    get:\n      description: Get event by id.\n      tags:\n      - events\n      operationId: getEventById\n      responses:\n        default:\n          description: Generic Error\n        '200':\n          description: Successful response\n          schema:\n            title: Newly created event\n            $ref: '#/definitions/Event'\n    put:\n      description: Update existing event.\n      tags:\n      - events\n      operationId: putEventById\n      parameters:\n        - name: Event\n          in: body\n          description: Existing event\n          required: true\n          schema:\n            $ref: '#/definitions/Event'\n      responses:\n        default:\n          description: Generic Error\n        '204':\n          description: Successful response\n    delete:\n      description: Delete event by id.\n      tags:\n      - events\n      operationId: deleteEventById\n      responses:\n        default:\n          description: Generic Error\n        '204':\n          description: Successful response\n```\n  Please take a look at these changes I made in my fork to get the client generation to work for my schema. Sorry, I can't provide a simple test case right now, and I don't know if this is the correct solution, but it works for me right now.\n\nhttps://github.com/vikstrous/go-swagger/commit/35e98933b7cdc13f9811f07bc004932385a02dc0#diff-4d4fdff26b287fb670cca8f91d5fab55L46\n\nhttps://github.com/vikstrous/go-swagger/commit/35e98933b7cdc13f9811f07bc004932385a02dc0#diff-6b20cc8a4514b56c8fc0488c02ece5f0R26\n\nI also needed basic auth and a way to set the schema, which I hacked in here: https://github.com/vikstrous/go-swagger/commit/35e98933b7cdc13f9811f07bc004932385a02dc0#diff-a52382dc63bff4be8c1f89ca5125811bL75 \n\nThis line was messing up the paths, so I had to remove it: https://github.com/vikstrous/go-swagger/commit/35e98933b7cdc13f9811f07bc004932385a02dc0#diff-a52382dc63bff4be8c1f89ca5125811bL77\n\nFeel free to apply some of these fixes to the main project. I don't know if my solution is the correct one and I just wanted to get something working first.\n Sweet! Thanks!\n  201 Responses should be able to contain a body. There is no rule enforcing HTTP 201 status code to return an empty body. The current code does not allow a 201 response to contain a body.\n\nAccording to HTTP 1.1 spec:\n\n> 201 Created\n> \n> The request has been fulfilled and resulted in a new resource being created. The newly created resource can be referenced by the URI(s) returned in the entity of the response, with the most specific URI for the resource given by a Location header field. The response SHOULD include an entity containing a list of resource characteristics and location(s) from which the user or user agent can choose the one most appropriate. The entity format is specified by the media type given in the Content-Type header field. The origin server MUST create the resource before returning the 201 status code. If the action cannot be carried out immediately, the server SHOULD respond with 202 (Accepted) response instead.\n  Running `swagger generate client` on a spec which has passed `swagger validate` (At least, the command exited with no errors/output....) is resulting in the following: \n\n```\n$ swagger generate client -f swagger.json\njson: cannot unmarshal bool into Go value of type string\n```\n\nIs there an easy way to see where this has been generated to work out what the problem is? \n Pardon my reopening an old issue! I've encountered this exact same problem. I'm getting the error message\r\n`2017/02/02 18:38:54 json: cannot unmarshal bool into Go value of type []string`\r\nand I've no idea what in the 5824 line yaml file is causing the error. Some debug output identifying approximately where go-swagger got to when the issue is encountered would be great.  Hi, thanks your help! I've actually found the issue by diffing the last commit. The problem was a definitions object which looked like this:\r\ndefinitions:\r\n__MenuItem:\r\n____properties:\r\n______item_currency:\r\n________type: string\r\n________required: false\r\nwhere the item_currency's required key is false. I think go-swagger was expecting a []string here and not a boolean.  Is there an example of how to use the generated client? Struggling a bit on what to do.\n Yea, I just an example of how to use it.  Kind of confused on what the `Transport` should be in the generated `New` method.  \n\nThanks @casualjim.  \n Thanks I got that working now. However getting authentication errors.\n\nI followed this example https://github.com/go-swagger/go-swagger/blob/2e74a8626dbd66f60ef5a47e1d0bfaebd2c2b080/fixtures/codegen/tasklist.basic.yml and have this in my config.\n\n``` yaml\nsecurityDefinitions:\n  auth_token:\n    type: apiKey\n    name: Authorization\n    in: header\n```\n\nin the individual route i have:\n\n``` yaml\npaths:\n  /customers:\n    get:\n      summary: Customer List\n      operationId: allCustomers\n      description: All registered customers. \n      parameters:\n      - name: order\n        in: query\n        type: string\n        description: Any field in the database.\n      tags:\n        - Customers\n      security:\n        - auth_token: []\n      responses:\n        '200':\n          description: An array of customers\n          schema:\n            type: array\n            items:\n              $ref: '#/definitions/CustomersResponse'\n        default:\n          description: Unexpected error\n          schema:\n            $ref: '#/definitions/Error'\n```\n\nThis doesn't seem to generate any Authentication methods for me?  Or just not sure where to find them. I found this issue https://github.com/go-swagger/go-swagger/issues/40 but I dont have a `AuthenticatesFor` method in my generated code.\n\nThanks for the help.\n  I'm still having issues with responses and I think this ticket is related...\n\nswagger validate passes, but there's errors about missing definitions on editor.swagger.io which seems to manifest as missing responses on all the endpoints on swagger-ui here: https://skillful-elf-105206.appspot.com/swagger/#/admin/bookings/\n\nMy route looks like this:\n\n```\n// Bookings swagger:route GET /admin/bookings/ booking Bookings\n//\n// Bookings lists all the appointments that have been made on the site.\n//\n//\n// Consumes:\n// application/json\n//\n// Schemes: http, https\n//\n// Produces:\n// application/json\n//\n// Responses:\n// 200: BookingResponses\n```\n\nMy response looks like this:\n\n```\n// BookingResponses is a slice of bookings\n//\n// swagger:response BookingResponses\ntype BookingResponses struct {\n    // Booking slice\n    //\n    // in: body\n    // required: true\n    Bookings []makeplans.Booking `json:\"bookings\"`\n}\n```\n The bookingresponse is in a private git bit bucket repo and wraps booking\nin a separate repo. I can make a complete example in a gist so you can see\nit end to end.\n\nOn Tue, Nov 24, 2015, 10:52 PM Ivan Porto Carrero notifications@github.com\nwrote:\n\n> if I follow the packages then the makeplans.Booking model lives in a\n> different repo is that right?\n> And one is a git repo and the other a mercurial one?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub\n> https://github.com/go-swagger/go-swagger/issues/75#issuecomment-159491527\n> .\n Here's a gist and output from `swagger generate spec`: https://gist.github.com/drewwells/f6bad58215d15ab0d8b4\n\nswagger-ui doesn't validate b/c something is off, but I think that's unrelated to the responses models being empty.\n ack, you are right there's a typo in the gist. I reran it as BookingResponse\n\nHere's the output from swagger-ui about the response model: `https://gist.githubusercontent.com/drewwells/f6bad58215d15ab0d8b4/raw/01c783261ea02f7e7f52d31a8573760077826d68/gist.json#/definitions/Booking is not defined!`\n This is consistent with my experience. When the internal structs do get definitions, they get shown in the swagger-ui output. So instead of it showing my nested responses `BookingResponse{ Booking: {} }` in the response model, it shows just `Booking{}`. So there must be some unwrapping going on here.\n That's the behavior I'm trying to understand\n\n```\n\"responses\": {\n    \"BookingResponse\": {\n      \"description\": \"BookingResponse represents a scheduled appointment\",\n      \"schema\": {\n        \"$ref\": \"#/definitions/Booking\"\n      }\n    }\n  }\n```\n\nBookingResponse is being unwrapped. So `Booking:{}` is returned instead of `BookingResponse{Booking:{}}`. The response is BookingResponse, not Booking. swagger-ui makes this worse, since it has a bug with looking up that remote ref in the definition.\n Working as intended, this can be closed\n  In fact `false` is not allowed as a value for `additionalProperties`. This is because Swagger 2.0 has a more restricted definition than JSON Schema.\nSee [@webron's clarification of the spec](/swagger-api/swagger-codegen/issues/1318#issuecomment-146302879).\n  After #71 I am hitting a new one generating the quay.io models:\n\n```\n$  wget https://quay.io/api/v1/discovery\n$ swagger generate client -f discovery -A quay\n2015/10/17 22:32:17 rendered model template: ChangeVisibility\n2015/10/17 22:32:17 generated model ChangeVisibility\n2015/10/17 22:32:17 rendered model template: RunParameters\n2015/10/17 22:32:17 generated model RunParameters\n2015/10/17 22:32:17 rendered model template: NewRepo\n2015/10/17 22:32:17 generated model NewRepo\n2015/10/17 22:32:17 rendered model template: RevertTag\n2015/10/17 22:32:17 generated model RevertTag\n2015/10/17 22:32:17 rendered model template: RepoUpdate\n2015/10/17 22:32:17 generated model RepoUpdate\n2015/10/17 22:32:17 rendered model template: UpdateApp\n2015/10/17 22:32:17 generated model UpdateApp\nmodel: template: schemavalidations:78:62: executing \"mapvalidator\" at <.AdditionalPropertie...>: nil pointer evaluating *generator.GenSchema.HasValidations\n```\n Thanks for the fast fixes!\n  It will be good if possibility to add any headers (in all routes) is exist.\nFor example: in some doc.go \n\n``` go\n// Consumes:\n// - application/json\n// Header:Version-V1 // This is expected header (or something like that)\n//\n// swagger:meta\n```\n\nAnd after generate spec we get swagger.json like that:\n\n``` json\n \"consumes\": [\n  \"application/json\",\n  \"Version/V1\"\n ]\n```\n\nand swagger-ui will generate all requests with additional header Version like that:\n\n```\ncurl -X GET --header \"Accept: application/json\" --header \"Version: V1\"\n```\n Header **Version** is only for example.\nIt will be better if possibility exists to add any headers.\n  The following Swagger 2.0 spec is valid but `swagger validate` reports a false negative:\n\n```\nThe swagger spec at \"global-parameters.json\" is invalid against swagger specification 2.0. see errors :\n- path param \"userId\" is not present in the path\n```\n\nParameter `userId` is not used in any path (there is no `parameters` section for path `/` with a `$ref` to `/parameters/userId`). This should not be reported as an error.\n\n``` json\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"version\": \"0.0.1\",\n    \"title\": \"test of Swagger global parameters\"\n  },\n  \"parameters\": {\n    \"userId\": {\n      \"name\": \"userId\",\n      \"in\": \"path\",\n      \"type\": \"string\",\n      \"required\": true\n    }\n  },\n  \"paths\": {\n    \"/\": {\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n The [specification](http://swagger.io/specification/#schemaObject) says about `/parameters`:\n\n> An object to hold parameters that can be used across operations. This property does _not_ define global parameters for all operations.\n To workaround this issue, I wrote [a Perl 5 script that inlines parameters defined at global scope](https://gist.github.com/dolmen/1ddd5e6a0f8ff54b5df8).\n Why is this issue closed? I don't see a commit that fixes it...\n > because there is nothing to fix, see my comment. You have to still refer to them as $ref wherever you want to use them.\n\nYes, that's exactly how I'm using them. So why is `swagger validate` still complaining about `path param \"userId\" is not present in path \"/\"` with the example initially presented? (I updated to the latest master)\n\nThe issue is NOT FIXED.\n Here is another example. Parameter `userId` is used in path `/users/{userId}`. It is not used in either path `/foo` and `/bar`.\n\nThe issue is that each parameter in `/parameters` is reported as a error for any operation where it is **NOT** used.\n\nThe output:\n\n```\nThe swagger spec at \"global-parameters-2.json\" is invalid against swagger specification 2.0. see errors :\n- path param \"userId\" is not present in path \"/foo\"\n- path param \"userId\" is not present in path \"/bar\"\n```\n\nThe spec:\n\n``` json\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"version\": \"0.0.1\",\n    \"title\": \"test of Swagger global parameters\"\n  },\n  \"parameters\": {\n    \"userId\": {\n      \"name\": \"userId\",\n      \"in\": \"path\",\n      \"type\": \"string\",\n      \"required\": true\n    }\n  },\n  \"paths\": {\n    \"/foo\": {\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful\"\n          }\n        }\n      }\n    },\n    \"/bar\": {\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful\"\n          }\n        }\n      }\n    },\n    \"/users/{userId}\": {\n      \"parameters\": [\n        { \"$ref\": \"#/parameters/userId\" }\n      ],\n      \"get\": {\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Successful\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n Parameters in global scope seem to be fixed.\nBut there is also an issue with parameters defined at path scope. I will open a separate issue.\n  This spec is invalid (`invalid-property` is not allowed in a `pathItem`) but go-swagger accepts it:\n\n``` json\n{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"version\": \"0.0.1\",\n    \"title\": \"test of Swagger of additionalProperties in pathItem\"\n  },\n  \"paths\": {\n    \"/\": {\n      \"invalid-property\": null\n    }\n  }\n}\n```\n\nOnly vendor extensions (properties starting with `x-` should be accepted in addition to the normalized properties. See [`/definitions/pathItem` in the JSON schema for Swagger 2.0](/swagger-api/swagger-spec/blob/master/schemas/v2.0/schema.json#L290).\n > this could be a validation error though\n\nThat's what I mean.\n  There are 3 issues that I found.\n\nFor the test swagger file, you can download from: https://github.com/lixingwang/go-swagger-files/blob/master/SwaggerValidationIssues.json\n1. Validation error while define parameter with more than one ref fields(line 319).\n   ![1](https://cloud.githubusercontent.com/assets/987686/9987389/24bd179a-607a-11e5-96bb-36072d324a0d.png)\n2. Validate Error while define response definition and including 'examples' element(line 847)\n\n![2](https://cloud.githubusercontent.com/assets/987686/9987390/24bd7be0-607a-11e5-9c3a-e0c6f333a764.png)\n3. Validate Error while define parameter definition and including path parameter element(line 30 and line 804)\n![3](https://cloud.githubusercontent.com/assets/987686/9987391/24bfdb60-607a-11e5-9e87-372773e42767.png)\n\nThey should valid swagger file but go-swagger validator treat it as invalid.\n 3 different issues should be filled a 3 different tickets.\n  Spec:\n\n``` yml\n'/order':                                                                                \n  post:                                                                                  \n    tags: ['order']                                                                      \n    operationId: 'postOrder'                                                             \n    summary: 'Creates a new Order.'                                                      \n    parameters:                                                                          \n      - name: 'order'                                                                    \n        in: 'body'                                                                       \n        required: true                                                                   \n        schema: { '$ref': '#/definitions/OrderPlacement' }                               \n```\n\nGenerated handler looks like this:\n\n``` go\n// PostOrderHandlerFunc turns a function with the right signature into a post order handler\ntype PostOrderHandlerFunc func(PostOrderParams, *models.Principal) (*models.Result, error) \n\nfunc (fn PostOrderHandlerFunc) Handle(params PostOrderParams, principal *models.Principal) (*models.Result, error) {\n  return fn(params, principal)                                                             \n}\n```\n\nAnd the generated parameter object looks like this:\n\n``` go\n// PostOrderParams contains all the bound params for the post order operation       \n// typically these are obtained from a http.Request                                 \ntype PostOrderParams struct {                                                       \n  // info about the order to place, along with payment authorization token.         \n  Order models.OrderPlacement                                                       \n}\n```\n\nI think either:\n- The `Order` field should be a pointer or...\n- The `PostOrderParams` in the handler signature should be a pointer.\n  Defined a response, in it the schema specify array type. The validation failed with message \"response body for 'operationxx' is a collection without an element type\"\n\n```\n...\n\"responses\": { \n             \"200\": {\n                        \"description\": \"Successful operation\",\n                        \"schema\": {\n                            \"type\": \"array\",\n                            \"$ref\": \"#/definitions/DeleteResponse\"\n                        }\n                    }\n             }\n....\n```\n I'm having a similar problem, for a response like:\n\n```\n        \"children\" : {\n          \"type\" : \"array\",\n          \"items\" : {\n            \"$ref\" : \"#/definitions/NodeTree\"\n          }\n        }\n```\n\nit works fine as expected. But when we have the follow:\n\n```\n        \"children\" : {\n          \"type\" : \"array\",\n        }\n```\n\nIt is failing, so the $ref is being 'undefined' because that. Do you have any hit about how to solve this problem? \n\nThanks in advance.\n @casualjim I found another issue related https://github.com/kongchen/swagger-maven-plugin/issues/224\n @casualjim  Like you have asked follow my context, include response class, end-point and js where the code brokers, because of a undefined property $ref.\n\nRelated:  kongchen/swagger-maven-plugin#224\n\n```\npublic class NodeTree {\n    private Long id;\n    private String name;\n    private List<NodeTree> children;\n\n    // GETTERS AND SETTERS\n}\n```\n\nMy documented REST end-point.\n\n```\n@POST\n@Path(\"/{treeId}/nodes\")\n@Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n@ApiOperation(value = \"Create node tree.\")\n@ApiImplicitParams(value = {\n    @ApiImplicitParam(name = \"nodeTree\", value = \"\", required = true, dataType = \"NodeTree\",\n                      paramType = \"data\")})\n@ApiResponses(value = { @ApiResponse(code = 200, message = \"Succees\", response = NodeTree.class)})\npublic Response createNodeTree(@ApiParam(value = \"Tree id\", required = true) @PathParam(\"treeId\") Long treeId, NodeTree nodeTree) {\n\n    // IMPLEMENTATION OMITED \n}\n```\n\nSo the swagger-maven-plugin is generating the follow swagger.json:\n\n```\n\"NodeTree\" : {\n  \"type\" : \"object\",\n  \"required\" : [ \"name\" ],\n  \"properties\" : {\n    \"id\" : {\n      \"type\" : \"integer\",\n      \"format\" : \"int64\"\n    },\n    \"name\" : {\n      \"type\" : \"string\"\n    },\n    \"children\" : {\n      \"type\" : \"array\"\n      /* Here missing the follow part: \n          \"items\" : {\n            \"$ref\" : \"#/definitions/NodeTree\"\n          }\n      */\n    }\n  }\n}\n```\n\nBecause this the \"swagger-client.js\" is breaking in the follow function:\n\n```\nResolver.prototype.resolveTo = function (property, objs) {\n\n  // it is breaking here, because we don't have \n  // $ref in the property to the type = array.\n  var ref = property.$ref;\n\n  if(ref) {\n    if(ref.indexOf('http') === 0) {\n      if(Array.isArray(objs[ref])) {\n        objs[ref].push({obj: property, resolveAs: '$ref'});\n      }\n      else {\n        objs[ref] = [{obj: property, resolveAs: '$ref'}];\n      }\n    }\n  }\n  else if(property.type === 'array') {\n    var items = property.items;\n    this.resolveTo(items, objs);\n  }\n}; \n```\n\nI hope this can be useful in order to solve the problem.\nRegards.\nWillian.\n  Hi,\n\nI tried to generate a swagger.json file with some annotations in my Go code but I do not find any concrete examples and I have always this result\n\n```\n> swagger generate spec -o ./swagger.json\n{\"swagger\":\"2.0\",\"paths\":null}\n```\n\nI tried those annotations from this document but it is not working properly or I do not know how to use them. \n\nhttp://godoc.org/github.com/go-swagger/go-swagger/scan\n\nDoes an exemple of swagger generate spec exist ?\n I will take a look. Thanks !\n  compiling a generated server with path parameters defined as `type: string` and `format: uuid` throws this error: `cannot use raw (type string) as type strfmt.UUID in assignment`\n\nThe raw parameter for bind{Param}() function may need to be casted strfmt.UUID (or any other custom types defined?).\n Thanks @casualjim, I'll use 797d4ba for now. Will post issues as I find them. I'll put in some PRs when I got the time too.\n  When using `swagger generate server -f swagger.yml -A myApp`, the imports for the model in the code inside `restapi/operations` are incorrect. \n\nThe import statement looks like this:\n\n```\nimport (\n    \"net/http\"\n\n    \"github.com/myRepo/myApp/operations/models\"\n    \"github.com/go-swagger/go-swagger/httpkit/middleware\"\n)\n```\n\nThe models are in `github.com/myRepo/myApp/models` and not in `github.com/myRepo/myApp/operations/models`.\n\nThis causes compile errors.\n  When missing \"swagger\" field, the validation passed. But the \"swagger\" field is required in schema\uff0c so it should validate against schema.\n\nBTY, there are three required filed \"swagger\", \"info\" and \"paths\", but the validation result is different.\n1. Missing \"swagger\" field, validation pass.\n2. Missing \"info\", validation failure failed, get error message \".info in body is required\".\n3. Missing \"paths\", get \"nil pointer dereference\" error, the related issue #52.\n\nSo hope the 1 and 3 could be fixed.\n @casualjim \nHi casualjim, do we have any plan on this issue?\n\nThanks,\nAlice\n  I tried a few kinds of comments and none of them got the description filled:\n\n// swagger:response photoResponse [description here]\nThis one caused the response to not get added to the generated spec at all.\n\n// swagger:response photoResponse\n//\n// [description here]\nThis one did not get the description filled in, but the response was added to the spec.\n\n// [description here]\n// swagger:response photoResponse\nThis one got the description filled as the \"title\" field for that particular object, but not as a description for the response.\n Sure that looks good to me.\n  I could not find a way to put a message or structure next to each response for an api route. In swagger-ui the response area just lists the response codes, but no description next to them. Is there a way to populate these fields using code comments (with generate spec)?\n but I think it still would be nice to implement the feature. I really want to set some custom reason because it really makes sense in swagger-ui.\nsomething like this maybe:\n\n```\n/*\n...\n        409: \n          ref: UserResponse\n          reason: username already exists\n...\n*/\n```\n\nany idea?\n  App engine apps use some package imports which don't resolve when run with go build: \"appengine\", \"appengine/datastore\", etc. But it seems like \"swagger generate spec\" fails if it can't first build my app. To support app engine you'd need to remove that requirement. I would like to use go-swagger with my app engine project, so please make it parse the comments without first needing to build the app.\n I tried adding the appengine build constraint, and it didn't error out, but it generated an empty spec.\n For an app engine app, typically the main.go doesn't require any of the special appengine imports... however it uses an init() function instead of a main() function, and in there is where you instantiate the router and bind all the routes to handlers. It is the handlers (usually in their own separate files) which need the appengine imports.\n\nI don't know if that's what you are asking about, but I know app engine fairly well so I can answer more questions if you have any.\n Fair enough, if you're not interested in supporting app engine that's fine. I did try forking to fix that other bug that I filed, but the code was a bit over my head so I wasn't able to fix it.\n\nTo answer your question, app engine apps don't get compiled with \"go build\", instead they are run on a dev server provided by the app engine SDK, and then they are deployed to app engine and run on the Google Cloud Platform infrastructure. The only reason they don't compile is because some of the packages (\"appengine\", \"appengine/datastore\", etc.) are only available in this SDK environment, they are not found in $GOPATH.\n\nMaybe app engine could improve this situation in the future, and then go-swagger wouldn't have to change to support it, but as it stands now this will not work with any app engine apps that use any of the appengine-specific imports.\n\nI will go back to using github.com/yvasiyarov/swagger for now, which doesn't require the app to build to generate the spec, but it is also not generating swagger 2.0, so I hope I can use your package sometime in the future.\n Hmm that is an interesting thought. I will experiment more on this today. The app engine SDK definitely uses the regular system GOPATH to resolve most of the includes, but it maybe has another internal GOPATH also, I'm not sure. Will post my findings a bit later.\n Wow! You're right man! All that was needed to make generate spec work, was to add this to GOPATH:\n[go_appengine_sdk_location]/goroot\n\nThe appengine includes are in there. It's working now, thanks for the insight!\n @defcronyke @casualjim this thread is an awesome reading. I'm glad that I could use go+appengine+swagger with your validation. Thanks again for the discussion!\n  When trying to run swagger-ui with a swagger.json generated from your included petstore example, swagger-ui errors out with TypeError: spec is null\n\nI compared the generated spec with the offical petstore swagger.json, and noticed \"swagger\":2.0 was missing from the beginning of the generated one, and after manually adding it, the generated spec then worked with swagger-ui.\n\nPlease fix the generator so that generated specs work with swagger-ui.\n My workaround was to use a bash script to inject the \"swagger\":2.0 at the beginning, after generating the spec, but I guess that works too. I hope you'll fix this though, since swagger 2.0 spec says the swagger field is required.\n Just a quick followup to mention that the -o flag isn't working, so to save the spec to a swagger.json file, it was needed to use file redirection ( swagger generate spec > swagger.json ). Because of this, the workaround you mentioned won't work.\n Upon further investigation, the field should be \"swagger\":\"2.0\" (the 2.0 must be a string), and also the \"$schema\" field must now be removed otherwise swagger-ui shows the swagger to be invalid.\n  AFAIK This is valid JSON schema references:\n\n``` yaml\ndefinitions: { '$ref': 'another-file.json#/definitions' }\n```\n\nThis should be supported in `go-swagger`. Not sure how much effort is needed tho. This allows multiple schema to share definitions or for splitting large schema into smaller files, for example.\n Its part of JSON Schema, which I think is what the swagger spec defers to. Not sure if the extent is specified in the schema, I'll dig up something. It does enable a lot of interesting use cases for the specs that we want to use, though.\n ![image](https://cloud.githubusercontent.com/assets/45545/9090118/d6ca6104-3bc2-11e5-9352-19928bc22c59.jpg)\n\nThis is from the spec on the swagger.io site. So, yeah it is officially recommended :-)\n I'll see if I can help you with a PR\n People tend to confuse the structure of the Swagger spec with JSON Schema, because there are similarities between the two. That said, just because we have `definitions` in the Swagger spec, doesn't mean it's the same `definitions` as defined by JSON Schema. We use the same name, but it's not exactly the same thing. Right now, we do not allow referencing the entire `definitions` to an external source.\n @casualjim @webron the markdown you linked contained the exact same text. https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md#file-structure\n\n> However, parts of the definitions can be split into separate files, at the discretion of the user. This is applicable for $ref fields in the specification as follows from the JSON Schema definitions.\n\nI'm not confusing swagger with JSON Schema, but this is in the spec. So if this shouldn't be supported, why is it still in the spec? Should it be removed?\n As I stated earlier though, the spec files gets large pretty quickly as we're adding features. The ability to compose them up from smaller files is a very crucial feature for us.\n So re-posting from the chat, in case anyone else's searching for this issue: Per-model reference works. Referencing the whole `definitions` key does not.\n\n**WORKS:**\n\n``` yaml\ndefinitions:\n    User: { '$ref': 'another-file.json#/definitions/User' }\n```\n\n**ALSO WORKS:**\n\n``` yaml\ndefinitions:\n    User: { '$ref': 'http://example.com/swagger.json#/definitions/User' }\n```\n\n**DOES NOT WORK**\n\n``` yaml\ndefinitions: { '$ref': 'http://example.com/swagger.json#/definitions' }\n```\n  So they are always generated in the same deterministic order.\nOtherwise re-running the generator will result in changed code even in\nplaces where the specification is unchanged.\n @casualjim I'm running into this and it's making updating API bindings really troublesome because diffs become incomprehensible. Is it possible to get this PR updated and merged in? Would be glad to test patches.\n @casualjim Client parameters. \n\nIt looks like 8e9c7f5 fixed part of it, but the `client/{appname}_frontend_client.go` file is still not deterministic.\n\nIf you want this filed as a new issue, let me know.\nExample: \nFirst run:\n\n```\ndiff --git a/common/go-quay/client/quay_frontend_client.go b/common/go-quay/client/quay_frontend_client.go\nindex c35c01b..dc3a177 100644\n--- a/common/go-quay/client/quay_frontend_client.go\n+++ b/common/go-quay/client/quay_frontend_client.go\n@@ -7,6 +7,7 @@ import (\n    \"github.com/go-swagger/go-swagger/client\"\n    \"github.com/go-swagger/go-swagger/strfmt\"\n\n+   \"github.com/foo/test/common/go-quay/client/archivedlogs\"\n    \"github.com/foo/test/common/go-quay/client/billing\"\n    \"github.com/foo/test/common/go-quay/client/build\"\n    \"github.com/foo/test/common/go-quay/client/discovery\"\n@@ -25,91 +26,90 @@ import (\n    \"github.com/foo/test/common/go-quay/client/team\"\n    \"github.com/foo/test/common/go-quay/client/trigger\"\n    \"github.com/foo/test/common/go-quay/client/user\"\n-   \"github.com/foo/test/common/go-quay/client/userfiles\"\n )\n\n // New creates a new quay frontend client\n func New(transport client.Transport, formats strfmt.Registry) *QuayFrontend {\n    cli := new(QuayFrontend)\n\n-   cli.Logs = logs.New(transport, formats)\n+   cli.Repositorynotification = repositorynotification.New(transport, formats)\n\n-   cli.Secscan = secscan.New(transport, formats)\n+   cli.User = user.New(transport, formats)\n\n-   cli.Repository = repository.New(transport, formats)\n+   cli.Image = image.New(transport, formats)\n\n-   cli.User = user.New(transport, formats)\n+   cli.Billing = billing.New(transport, formats)\n+\n+   cli.Tag = tag.New(transport, formats)\n\n    cli.Repotoken = repotoken.New(transport, formats)\n\n-   cli.Repositorynotification = repositorynotification.New(transport, formats)\n+   cli.Robot = robot.New(transport, formats)\n+\n+   cli.Logs = logs.New(transport, formats)\n\n    cli.Build = build.New(transport, formats)\n\n-   cli.Permission = permission.New(transport, formats)\n+   cli.Organization = organization.New(transport, formats)\n\n-   cli.Robot = robot.New(transport, formats)\n+   cli.Permission = permission.New(transport, formats)\n\n-   cli.Prototype = prototype.New(transport, formats)\n+   cli.Search = search.New(transport, formats)\n\n    cli.Team = team.New(transport, formats)\n\n-   cli.Billing = billing.New(transport, formats)\n+   cli.Archivedlogs = archivedlogs.New(transport, formats)\n\n-   cli.Userfiles = userfiles.New(transport, formats)\n+   cli.Trigger = trigger.New(transport, formats)\n\n-   cli.Tag = tag.New(transport, formats)\n+   cli.Repository = repository.New(transport, formats)\n\n-   cli.Search = search.New(transport, formats)\n+   cli.Prototype = prototype.New(transport, formats)\n\n    cli.Discovery = discovery.New(transport, formats)\n\n-   cli.Image = image.New(transport, formats)\n-\n-   cli.Trigger = trigger.New(transport, formats)\n-\n-   cli.Organization = organization.New(transport, formats)\n+   cli.Secscan = secscan.New(transport, formats)\n\n    return cli\n }\n\n // QuayFrontend is a client for quay frontend\n type QuayFrontend struct {\n-   Logs *logs.Client\n+   Repositorynotification *repositorynotification.Client\n\n-   Secscan *secscan.Client\n+   User *user.Client\n\n-   Repository *repository.Client\n+   Image *image.Client\n\n-   User *user.Client\n+   Billing *billing.Client\n+\n+   Tag *tag.Client\n\n    Repotoken *repotoken.Client\n\n-   Repositorynotification *repositorynotification.Client\n+   Robot *robot.Client\n+\n+   Logs *logs.Client\n\n    Build *build.Client\n\n-   Permission *permission.Client\n+   Organization *organization.Client\n\n-   Robot *robot.Client\n+   Permission *permission.Client\n\n-   Prototype *prototype.Client\n+   Search *search.Client\n\n    Team *team.Client\n\n-   Billing *billing.Client\n+   Archivedlogs *archivedlogs.Client\n\n-   Userfiles *userfiles.Client\n+   Trigger *trigger.Client\n\n-   Tag *tag.Client\n+   Repository *repository.Client\n\n-   Search *search.Client\n+   Prototype *prototype.Client\n\n    Discovery *discovery.Client\n\n-   Image *image.Client\n-\n-   Trigger *trigger.Client\n-\n-   Organization *organization.Client\n+   Secscan *secscan.Client\n }\n```\n\nSecond run:\n\n```\ndiff --git a/common/go-quay/client/quay_frontend_client.go b/common/go-quay/client/quay_frontend_client.go\nindex c35c01b..779a7a8 100644\n--- a/common/go-quay/client/quay_frontend_client.go\n+++ b/common/go-quay/client/quay_frontend_client.go\n@@ -7,6 +7,7 @@ import (\n    \"github.com/go-swagger/go-swagger/client\"\n    \"github.com/go-swagger/go-swagger/strfmt\"\n\n+   \"github.com/foo/test/common/go-quay/client/archivedlogs\"\n    \"github.com/foo/test/common/go-quay/client/billing\"\n    \"github.com/foo/test/common/go-quay/client/build\"\n    \"github.com/foo/test/common/go-quay/client/discovery\"\n@@ -25,91 +26,90 @@ import (\n    \"github.com/foo/test/common/go-quay/client/team\"\n    \"github.com/foo/test/common/go-quay/client/trigger\"\n    \"github.com/foo/test/common/go-quay/client/user\"\n-   \"github.com/foo/test/common/go-quay/client/userfiles\"\n )\n\n // New creates a new quay frontend client\n func New(transport client.Transport, formats strfmt.Registry) *QuayFrontend {\n    cli := new(QuayFrontend)\n\n-   cli.Logs = logs.New(transport, formats)\n-\n-   cli.Secscan = secscan.New(transport, formats)\n+   cli.Trigger = trigger.New(transport, formats)\n\n    cli.Repository = repository.New(transport, formats)\n\n-   cli.User = user.New(transport, formats)\n-\n-   cli.Repotoken = repotoken.New(transport, formats)\n+   cli.Permission = permission.New(transport, formats)\n\n    cli.Repositorynotification = repositorynotification.New(transport, formats)\n\n-   cli.Build = build.New(transport, formats)\n+   cli.Team = team.New(transport, formats)\n\n-   cli.Permission = permission.New(transport, formats)\n+   cli.Discovery = discovery.New(transport, formats)\n\n-   cli.Robot = robot.New(transport, formats)\n+   cli.Image = image.New(transport, formats)\n\n-   cli.Prototype = prototype.New(transport, formats)\n+   cli.Archivedlogs = archivedlogs.New(transport, formats)\n\n-   cli.Team = team.New(transport, formats)\n+   cli.Build = build.New(transport, formats)\n\n-   cli.Billing = billing.New(transport, formats)\n+   cli.Organization = organization.New(transport, formats)\n\n-   cli.Userfiles = userfiles.New(transport, formats)\n+   cli.Search = search.New(transport, formats)\n\n-   cli.Tag = tag.New(transport, formats)\n+   cli.User = user.New(transport, formats)\n\n-   cli.Search = search.New(transport, formats)\n+   cli.Logs = logs.New(transport, formats)\n\n-   cli.Discovery = discovery.New(transport, formats)\n+   cli.Secscan = secscan.New(transport, formats)\n\n-   cli.Image = image.New(transport, formats)\n+   cli.Tag = tag.New(transport, formats)\n\n-   cli.Trigger = trigger.New(transport, formats)\n+   cli.Robot = robot.New(transport, formats)\n\n-   cli.Organization = organization.New(transport, formats)\n+   cli.Prototype = prototype.New(transport, formats)\n+\n+   cli.Repotoken = repotoken.New(transport, formats)\n+\n+   cli.Billing = billing.New(transport, formats)\n\n    return cli\n }\n\n // QuayFrontend is a client for quay frontend\n type QuayFrontend struct {\n-   Logs *logs.Client\n-\n-   Secscan *secscan.Client\n+   Trigger *trigger.Client\n\n    Repository *repository.Client\n\n-   User *user.Client\n-\n-   Repotoken *repotoken.Client\n+   Permission *permission.Client\n\n    Repositorynotification *repositorynotification.Client\n\n-   Build *build.Client\n+   Team *team.Client\n\n-   Permission *permission.Client\n+   Discovery *discovery.Client\n\n-   Robot *robot.Client\n+   Image *image.Client\n\n-   Prototype *prototype.Client\n+   Archivedlogs *archivedlogs.Client\n\n-   Team *team.Client\n+   Build *build.Client\n\n-   Billing *billing.Client\n+   Organization *organization.Client\n\n-   Userfiles *userfiles.Client\n+   Search *search.Client\n\n-   Tag *tag.Client\n+   User *user.Client\n\n-   Search *search.Client\n+   Logs *logs.Client\n\n-   Discovery *discovery.Client\n+   Secscan *secscan.Client\n\n-   Image *image.Client\n+   Tag *tag.Client\n\n-   Trigger *trigger.Client\n+   Robot *robot.Client\n\n-   Organization *organization.Client\n+   Prototype *prototype.Client\n+\n+   Repotoken *repotoken.Client\n+\n+   Billing *billing.Client\n }\n```\n  Relevant section:\n\n``` yaml\npaths:                                                      \n  '/_debug':                                                \n    get:                                                    \n      tags: ['debug']                                       \n      operationId: 'getDebug'                               \n      summary: 'Debug route strictly for testing.'          \n      responses:                                            \n        '200':                                              \n          descrition: 'Debug result.'                       \n          schema: { type: 'any' }                           \n```\n\nProduces the following type:\n\n``` go\ntype GetDebugHandlerFunc func(*models.User) (*interface{}, error)                   \n\nfunc (fn GetDebugHandlerFunc) Handle(principal *models.User) (*interface{}, error) {\n  return fn(principal)                                                              \n}\n```\n\nNotice the `*interface{}` there. I think this should be plain non-pointer `interface{}` ?\n  Relevant part from my current swagger.yaml:\n\n``` yaml\nsecurityDefinitions:  \n  api_key:            \n    type: \"apiKey\"    \n    name: \"api_key\"   \n    in: \"query\"       \nsecurity:             \n  - \"api_key\": []     \n```\n\nAnd here is the generated `AuthenticatorsFor` method in the main API interface file:\n\n```\n// AuthenticatorsFor gets the authenticators for the specified security schemes                                                     \nfunc (t *TixGenAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]httpkit.Authenticator {                                                                                           \n  result := make(map[string]httpkit.Authenticator)                                         \n  for name, scheme := range schemes {                                                      \n    switch name {                                                                          \n\n    case \"apiKey\":                                                                         \n\n      result[name] = security.APIKeyAuth(scheme.Name, scheme.In, func(tok string) (interface{}, error) { return t.APIKeyAuth(tok) })\n\n    }                                                                                      \n  }                                                                                        \n  return result                                                                            \n\n}                                                                                          \n```\n\nHowever if I add `fmt.Println(name)` to the loop, only `api_key` is printed. So authenticators will never match. I think this is related to the security definition names being mangled at https://github.com/go-swagger/go-swagger/blob/0030e4ac459a6f01ddfe33c601df8c2d09392ca3/generator/support.go#L345 .\n\nIf i change the referenced line to remove `swag.ToJSON` (don't touch the name), everything works correctly. \n\nBut I am not sure if that is the correct fix.\n  I follow the homepage of the project,\n\n```\nswagger validate https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json\n```\n\nbut have error: \n\n```\nThe swagger spec at \"https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json\" is invalid against swagger specification 2.0. see errors :\n- host in body must be of type uri: \"petstore.swagger.io\"\n```\n\nfollow the code, may be something wrong when call function \n\n```\nfunc IsStrictURI(str string) bool {\n    _, err := url.ParseRequestURI(str)\n    return err == nil\n}\ngithub.com/go-swagger/go-swagger/strfmt/default.go\n```\n\nthe params pass to IsStrictURI is petstore.swagger.io\n\nis that should be http://petstore.swagger.io  or https://petstore.swagger.io ?\n but the file is from swagger 2.0 official example, anything wrong here ?\n![image](https://cloud.githubusercontent.com/assets/2741940/8764236/16d8cd68-2dfd-11e5-8995-f5f14b1c7c43.png)\n thanks ! \n  Some structs like [simpleSchema](https://github.com/go-swagger/go-swagger/blob/master/spec/items.go#L9-L15) should be exported.\n\nExample usecase: (pseudo code)\n\n```\nfunc setType(p spec.SimpleSchema, t SourceType) {\n    if t.IsRef() {\n        p.Ref = spec.MustCreateRef(\"#/definitions/\" + t.GetName())\n    } else {\n        p.Type = toSwaggerType(t)\n        p.Format = toSwaggerFormat(t)\n    }\n}\n```\n I'm working on it. But I'm not sure if struct can be exported directly.\nDo I need to do it in this way?\n\n```\ntype simpleSchemaProp {\n    // ...\n}\n\ntype SimpleSchema{\n    simpleSchemaProp\n}\n\n\n```\n I can't remember, but I think I created this issue because I need to write several functions which does same thing.\n\nI wanted to create a function with this signature, but I couldn't. Instead, I just wrote several functions, and this is not an issue for me. Closing..\n\n```\nfunc setType(p spec.SimpleSchema, t SourceType) {\n    if t.IsRef() {\n        p.Ref = spec.MustCreateRef(\"#/definitions/\" + t.GetName())\n    } else {\n        p.Type = toSwaggerType(t)\n        p.Format = toSwaggerFormat(t)\n    }\n}\n```\n Multiple functions like\n\n```\nfunc setItemsType(p spec.Items, t SourceType) {\n// same code\n}\n```\n\nworks\n  Personally I think this should be a package separate from go-swagger. Validations and creations of the value types implemented here could be re-used in a lot of other projects.\n\nMy issue however, is to request that the values implement basic [`sql.Scanner`](http://golang.org/pkg/database/sql/#Scanner) and [`database/sql/driver.Valuer`](http://godoc.org/database/sql/driver#Valuer) so that text-based types such as `strfmt.Email` and `strfmt.UUID` on the structs can be marshalled to-and-fro the database without having to define a new type.\n\nThe implementation is quite trivial since most string types are just straight type renames so the implementation of those interfaces is just converting them back to the base `string` type.\n\nHere's an example of how I define a `UUID` type (before go-swagger):\n\n``` go\ntype ID string                                                 \n\nvar __id = ID(\"asdf\")                                          \nvar _ sql.Scanner = &__id                                      \nvar _ driver.Valuer = __id                                     \n\nfunc NewID() ID {                                              \n  raw := uuid.NewV4().String()                                 \n  raw = raw[1 : len(raw)-1]                                    \n  raw = strings.ToLower(raw)                                   \n  return ID(raw)                                               \n}                                                              \n\nfunc (id *ID) Scan(raw interface{}) error {                    \n  switch v := raw.(type) {                                     \n  case []byte:                                                 \n    *id = ID(string(v))                                        \n  case string:                                                 \n    *id = ID(v)                                                \n  default:                                                     \n    fmt.Errorf(\"cannot sql.Scanner.Scan() to `ID` from: %#v\", v)\n  }                                                            \n\n  return nil                                                   \n}                                                              \n\nfunc (id ID) Value() (driver.Value, error) {                   \n  return driver.Value(string(id)), nil                         \n}                                                              \n```\n\nAs you can see, pretty trivial conversion. With this I can use this type inside any structs `type User struct{ id ID }` and all it'd marshal to-and-fro the db without a hitch.\n\nThis is esp. important when using `go-swagger` with [`jmoiron/sqlx`](https://github.com/jmoiron/sqlx) or any database mapping library in general.\n Also I think the list of types might benefits from `go generate` in some way or another. Those `MarshalText()` calls could just be generated.\n @casualjim would you accept a PR for this? Code should be pretty trivial.\n I agree with you @casualjim, I think it is better to keep any specific support (like sql one) out of go-swagger. Otherwise, things will be unmanageable.\n Closing since #39 has been merged.\n  The package handling code currently assumes that the path separator is the slash, and also that Go package paths and file paths use the same separator. This PR has small fixes go make it work on Windows but I wonder if there is some better way (e.g. something from go/build) to handle the imports.\n Seems go generate was not run after the package namespace change from casualjim->go-swagger. That's an unrelated change to the Windows one but I didn't create a branch for it, let me know if you want to split.\n Sorry, yes, of course, I didn't check after rebasing (and the generated files were dirty because of line endings in the encoded data). Removed that commit now.\n  Hi,\n\nIn this PR we included the change to just remove the `configureapi.gotmpl` since when moved it to `main.gotmpl` the server generation will still create a `configureapi.go` which is redundant.\n\nOf course, you may have other plans for `configureapi.gotmpl` in addition to including the function `configureAPI`. If that's the case then feel free to close this PR, otherwise please merge this as well.\n\nNote if you accept both PRs then we may need to rebase this one and resubmit since this one includes both changes.\n\nWe are flexible, just let us know your preference.\n\nCheers.\n  I used the petstore example provided in (https://github.com/go-swagger/go-swagger/tree/master/examples) to test the server generation.\nThe generated code differs from the one existing in the example folder where the generated code is composed of 3 packages:\n- cmd\n- models\n- restapi\n  - operations\n    - pet\n    - store\n      - user\n\nmy generated code is:\n- cmd\n- models\n- restapi\n  - operations\n- operations\n  - restapi\n    - pet\n    - store\n    - user\n\nI think that somewhere in the code generation there is an \"operations/restapi\" instead of \"restapi/operations\".\n\n/cc @maximilien\n  The generated code is still referring to casualjim repository:\n\n``` go\n   \"github.com/casualjim/go-swagger\"\n    \"github.com/casualjim/go-swagger/middleware\"\n    \"github.com/casualjim/go-swagger/spec\"\n    \"github.com/casualjim/go-swagger/strfmt\"\n```\n\nMoreover, the middleware package is actually under github.com/casualjim/go-swagger/middleware/httpkit/middleware.\n\nIn some other imports there is a reference to validation package\n\n``` go\n\"github.com/casualjim/go-swagger/validation\"\n```\n\nI guess that it should refer to validate package?\n\nCould you please point me to the right place in the code so I can update it. I would be happy to contribute and help. \n Having the same issues even by modifying the templates. Could it be that the generator is referring to external templates? Because even when I removed the templates completely, the server was generated with the wrong package paths.\n Thanks, this was helpful!\n @casualjim ^ did that for you : )\n Tagged operations still have `casualjim` in there tho. I am not sure where that came from.\n    I found that when I used -target, I was still getting restapi stuff ditched into my gopath.\n\nI believe the fix below covers that issue.\n  I have a sample description of an API \n\n``` json\n{\n    \"swagger\": \"2.0\",\n ...\n                \"description\": \"Checks for VM presence.\\n\",\n                \"parameters\": [\n                    {\n                        \"name\": \"vm_cid\",\n                        \"in\": \"query\",\n                        \"description\": \"cloud ID of the VM created disk will most likely be attached; \\nit could be used to optimize disk placement so that disk is located near the VM\\n\",\n                        \"required\": true,\n                        \"type\": \"string\"\n  ...\n}\n```\n\nThe generated code fails to compile because the \"description\" element is transformed to multiple lines where the comment covers just the first line.\nHere is the code for parameters.go:\n\n``` go\ntype Params struct {\n  // cloud ID of the VM created disk will most likely be attached; \nit could be used to optimize disk placement so that disk is located near the VM\n  VMCid string\n}\n```\n\nIt seems that the \"\\n\" in the description is causing this issue and when I removed it the generation went through. I tried to resolve the issue but unfortunately I didn't find the right code to modify. Any hints to help?\n/cc @maximilien\n  Seems the generator also ignored responses when multiple entries are defined?\n\nExample operation:\n\n``` yaml\nput:                                                  \n  tags: ['tweets']                                    \n  operationId: 'putTweet'                             \n  summary: 'Send a single tweet.'                     \n  parameters:                                         \n    - name: 'tweet'                                   \n      in: 'body'                                      \n      description: 'The tweet to post'                \n      required: true                                  \n      schema: { '$ref': '#/definitions/Tweet' }       \n  responses:                                          \n    '201':                                            \n      description: 'Tweet has been saved.'            \n      schema: { '$ref': '#/definitions/Result' }      \n    '400':                                            \n      description: 'There are validation error(s).'   \n      schema: { '$ref': '#/definitions/Result' }      \n```\n\nThis result in the following signature being generated for the operation:\n\n``` go\ntype PutTweetHandlerFunc func(PutTweetParams) error \n```\n\nSo no mention of the `Result` struct there.\n Assuming this is because there is no code in `go-swagger` to differentiate between different response codes yet?\n  yeah it's a best effort one. we can close this issue with your comment. it's resolved :)  Where would you place this issue on your roadmap? I'm debating waiting for this feature, or going the route of Apache Thrift... which is not nearly as desirable since my API is already using Swagger. \n\nThanks, and great work thus far!\n If you need a guinea pig/tester for an experimental branch, I hereby volunteering myself :sunglasses: \n This is a really great idea, and I'd be willing to help out in any way I can. Any thoughts on possibly making this a part of [swagger-codegen](https://github.com/swagger-api/swagger-codegen/tree/master/modules/swagger-codegen/src/main/resources)?\n Thanks for the info! When the time comes, I might be willing to help port to swagger-codegen, since that was my first stop when trying to figure out \"is there a swagger client generator for go?\", I imagine others will check there as well.\n nice!, I'm really looking forward to having this generator. \n  You have pretty much everything but the one thing that is needed, `password` here:  https://github.com/casualjim/go-swagger#whats-inside\n This is addressed now by allowing users to specify named custom string formats.  So people can implement passwords whichever way they see fit.\n", "text_all_count": 171166, "text_word_token": ["Problem", "statement", "error", "on", "converted", "yaml", "from", "generate", "json", "NUMBER", "Swagger", "specification", "I", "do", "all", "stages", "carefully", "step", "by", "step", "and", "according", "to", "documents", "of", "swagger", "NUMBER", "io", "after", "generating", "NUMBER", "json", "file", "I", "go", "to", "swaggerhub", "to", "convert", "it", "to", "yaml", "and", "generate", "UI", "NUMBER", "But", "some", "of", "the", "definitions", "go", "wrong", "and", "I", "had", "to", "correct", "those", "manually", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "UBUNTU", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "c", "NUMBER", "cc", "NUMBER", "e", "NUMBER", "ed", "NUMBER", "c", "NUMBER", "edf", "NUMBER", "e", "NUMBER", "e", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "wZXJhdGlvbi", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "template", "_repo", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "RlbXBsYXRlX", "NUMBER", "JlcG", "NUMBER", "uZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "b", "NUMBER", "da", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "When", "the", "body", "parameter", "be", "an", "array", "type", "referencing", "another", "type", "none", "of", "the", "validation", "be", "call", "NUMBER", "Its", "possible", "I", "m", "just", "defining", "it", "incorrectly", "as", "I", "m", "new", "to", "write", "swagger", "specs", "but", "I", "can", "t", "seem", "to", "get", "it", "to", "satisfy", "the", "criteria", "around", "this", "line", "of", "parameter", "NUMBER", "gotmpl", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "server", "parameter", "NUMBER", "gotmpl", "L", "NUMBER", "If", "the", "validation", "checking", "do", "around", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "server", "parameter", "NUMBER", "gotmpl", "L", "NUMBER", "be", "do", "it", "works", "correctly", "sending", "back", "a", "NUMBER", "any", "state", "that", "s", "not", "in", "the", "enum", "NUMBER", "But", "it", "never", "gets", "into", "this", "section", "because", "it", "pass", "the", "if", "NUMBER", "Child", "check", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "server", "parameter", "NUMBER", "gotmpl", "L", "NUMBER", "In", "the", "Generated", "Code", "section", "below", "the", "Validate", "method", "for", "the", "BulkUpdateState", "type", "be", "created", "correctly", "but", "never", "call", "in", "BindRequest", "Swagger", "specification", "swagger", "NUMBER", "info", "title", "Bug", "Demo", "description", "Description", "NUMBER", "version", "NUMBER", "schemes", "http", "produces", "application", "json", "consumes", "application", "json", "responses", "NUMBER", "description", "OK", "schema", "type", "string", "NUMBER", "description", "Bad", "Request", "paths", "someResource", "patch", "consumes", "application", "json", "summary", "Update", "the", "state", "of", "multiple", "stuff", "and", "things", "at", "once", "NUMBER", "parameters", "in", "body", "name", "massUpdate", "schema", "ref", "definitions", "BulkUpdateState", "responses", "NUMBER", "ref", "responses", "NUMBER", "NUMBER", "ref", "responses", "NUMBER", "tags", "SomeResource", "definitions", "BulkUpdateState", "type", "array", "items", "ref", "definitions", "UpdateStateRequest", "UpdateStateRequest", "type", "object", "required", "ID", "state", "properties", "ID", "type", "string", "x", "nullable", "false", "state", "ref", "definitions", "StateEnum", "UpdateRequest", "type", "object", "StateEnum", "type", "string", "enum", "todo", "do", "blocked", "skipped", "unenrolled", "custom", "Steps", "to", "reproduce", "Generate", "the", "server", "based", "on", "this", "swagger", "NUMBER", "Add", "a", "handler", "Hit", "the", "someResource", "route", "with", "a", "patch", "request", "containing", "JSON", "array", "with", "state", "other", "than", "listed", "in", "the", "enum", "NUMBER", "See", "that", "request", "make", "it", "to", "the", "handler", "NUMBER", "Generated", "Code", "BulkUpdateState", "bulk", "update", "state", "swagger", "model", "BulkUpdateState", "type", "BulkUpdateState", "UpdateStateRequest", "Validate", "validates", "this", "bulk", "update", "state", "func", "m", "BulkUpdateState", "Validate", "formats", "strfmt", "NUMBER", "Registry", "error", "var", "res", "error", "for", "i", "NUMBER", "i", "TAG", "NUMBER", "return", "error", "NUMBER", "CompositeValidationError", "res", "NUMBER", "return", "nil", "BindRequest", "both", "binds", "and", "validates", "a", "request", "it", "assumes", "that", "complex", "things", "implement", "a", "Validatable", "strfmt", "NUMBER", "Registry", "error", "interface", "for", "simple", "values", "it", "will", "use", "straight", "method", "calls", "func", "o", "PatchSomeResourceParams", "BindRequest", "r", "http", "NUMBER", "Request", "route", "middleware", "NUMBER", "MatchedRoute", "error", "var", "res", "error", "o", "NUMBER", "HTTPRequest", "r", "if", "runtime", "NUMBER", "HasBody", "r", "defer", "r", "NUMBER", "Body", "NUMBER", "Close", "var", "body", "models", "NUMBER", "BulkUpdateState", "if", "err", "route", "NUMBER", "Consumer", "NUMBER", "Consume", "r", "NUMBER", "Body", "body", "err", "nil", "res", "append", "res", "error", "NUMBER", "NewParseError", "massUpdate", "body", "err", "else", "if", "len", "res", "NUMBER", "o", "NUMBER", "MassUpdate", "body", "if", "len", "res", "NUMBER", "return", "error", "NUMBER", "CompositeValidationError", "res", "NUMBER", "return", "nil", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Mac", "OS", "NUMBER", "Problem", "statement", "I", "d", "like", "for", "my", "API", "to", "be", "able", "to", "be", "able", "to", "respond", "in", "both", "json", "and", "xml", "for", "that", "I", "need", "to", "change", "producer", "depending", "on", "a", "query", "parameter", "contents", "NUMBER", "I", "can", "t", "find", "how", "to", "do", "it", "be", "it", "possible", "If", "so", "could", "I", "ask", "for", "some", "guidance", "what", "should", "I", "look", "at", "Producer", "be", "set", "by", "the", "WriteResponse", "function", "but", "how", "do", "I", "pass", "a", "producer", "to", "this", "function", "from", "handler", "scope", "Swagger", "specification", "anything", "where", "yaml", "produces", "application", "json", "application", "xml", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "n", "a", "define", "NUMBER", "paths", "which", "include", "the", "query", "string", "That", "allows", "you", "to", "pick", "producers", "NUMBER", "By", "default", "the", "content", "negotiation", "works", "based", "on", "the", "accept", "header", "not", "a", "query", "string", "NUMBER", "it", "should", "just", "work", "Thanks", "for", "the", "reply", "casualjim", "didn", "t", "know", "this", "NUMBER", "I", "know", "this", "may", "be", "standard", "in", "http", "s", "API", "but", "I", "was", "not", "able", "to", "find", "this", "info", "when", "googling", "but", "then", "again", "maybe", "I", "wasn", "t", "persistent", "enough", "I", "was", "not", "able", "to", "find", "this", "info", "in", "the", "documentation", "could", "it", "be", "add", "LMK", "if", "you", "have", "a", "place", "in", "mind", "I", "d", "love", "contribute", "BTW", "be", "there", "a", "way", "to", "manipulate", "prettyfying", "of", "jsons", "While", "Accept", "header", "works", "just", "fine", "there", "be", "issue", "with", "DefaultProduces", "NUMBER", "I", "think", "I", "have", "set", "this", "variable", "correctly", "even", "though", "it", "was", "application", "json", "by", "default", "but", "if", "Accept", "header", "be", "not", "set", "I", "be", "get", "XML", "replies", "NUMBER", "in", "the", "configure_xxx", "NUMBER", "go", "after", "registering", "Consumers", "and", "Producers", "I", "set", "the", "defaultConsumes", "and", "defaultProduces", "in", "the", "xxxAPI", "object", "go", "api", "NUMBER", "SetDefaultConsumes", "application", "json", "api", "NUMBER", "SetDefaultProduces", "application", "json", "Am", "I", "doing", "something", "wrong", "Should", "it", "be", "configured", "per", "path", "If", "so", "how", "can", "I", "do", "it", "Problem", "statement", "Line", "NUMBER", "says", "don", "t", "edit", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "a", "NUMBER", "ecf", "NUMBER", "fa", "NUMBER", "e", "NUMBER", "b", "NUMBER", "b", "NUMBER", "b", "NUMBER", "ac", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "generator", "template", "server", "configureapi", "NUMBER", "gotmpl", "L", "NUMBER", "But", "line", "NUMBER", "says", "you", "should", "edit", "this", "file", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "a", "NUMBER", "ecf", "NUMBER", "fa", "NUMBER", "e", "NUMBER", "b", "NUMBER", "b", "NUMBER", "b", "NUMBER", "ac", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "generator", "template", "server", "configureapi", "NUMBER", "gotmpl", "L", "NUMBER", "These", "message", "should", "be", "made", "consistent", "NUMBER", "Yeah", "line", "NUMBER", "should", "not", "have", "be", "add", "to", "this", "template", "when", "it", "was", "add", "to", "the", "others", "NUMBER", "It", "probably", "makes", "sense", "to", "move", "line", "NUMBER", "to", "line", "NUMBER", "Problem", "statement", "I", "have", "notice", "that", "title", "field", "isn", "t", "add", "when", "swagger", "NUMBER", "json", "be", "generate", "NUMBER", "I", "tried", "to", "add", "like", "this", "Title", "SocialTournamentService", "API", "but", "nothing", "has", "happened", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Ubuntu", "NUMBER", "A", "little", "bit", "Problem", "statement", "When", "generating", "a", "client", "from", "a", "swagger", "file", "with", "a", "definition", "that", "specifies", "type", "string", "and", "format", "int", "NUMBER", "the", "JSON", "struct", "tag", "generate", "be", "incorrect", "NUMBER", "Swagger", "specification", "test", "NUMBER", "json", "json", "consumes", "application", "json", "definitions", "Test", "properties", "id", "format", "int", "NUMBER", "type", "string", "type", "object", "paths", "api", "v", "NUMBER", "test", "get", "operationId", "test", "responses", "NUMBER", "schema", "ref", "definitions", "Test", "description", "test", "info", "version", "NUMBER", "title", "Test", "produces", "application", "json", "schemes", "https", "swagger", "NUMBER", "Steps", "to", "reproduce", "bash", "swagger", "generate", "client", "f", "test", "NUMBER", "json", "t", "NUMBER", "test", "Produces", "a", "model", "like", "so", "go", "Test", "test", "swagger", "model", "Test", "type", "Test", "struct", "id", "ID", "int", "NUMBER", "json", "id", "omitempty", "It", "should", "ideally", "be", "go", "Test", "test", "swagger", "model", "Test", "type", "Test", "struct", "id", "ID", "int", "NUMBER", "json", "id", "omitempty", "string", "Environment", "swagger", "version", "dev", "tip", "of", "master", "as", "of", "today", "go", "version", "go", "version", "go", "NUMBER", "linux", "amd", "NUMBER", "OS", "Linux", "that", "s", "an", "invalid", "type", "NUMBER", "The", "openapi", "NUMBER", "spec", "says", "the", "type", "should", "be", "type", "integer", "format", "int", "NUMBER", "Do", "you", "have", "a", "source", "for", "me", "to", "reference", "This", "swagger", "definition", "be", "generate", "by", "protoc", "gen", "swagger", "of", "the", "grpc", "gateway", "project", "NUMBER", "Protobuf", "automatically", "encodes", "uint", "NUMBER", "and", "int", "NUMBER", "as", "strings", "because", "the", "numeric", "type", "would", "introduce", "inaccuracies", "numeric", "be", "a", "float", "NUMBER", "NUMBER", "I", "suppose", "it", "s", "an", "open", "question", "then", "how", "OpenAPI", "deals", "with", "integer", "overflows", "in", "JSON", "numbers", "I", "took", "a", "look", "at", "the", "NUMBER", "spec", "as", "well", "and", "it", "says", "Note", "that", "integer", "as", "a", "type", "be", "also", "support", "and", "be", "defined", "as", "a", "JSON", "number", "without", "a", "fraction", "or", "exponent", "part", "NUMBER", "I", "don", "t", "really", "understand", "what", "that", "means", "for", "integer", "overflows", "NUMBER", "I", "do", "agree", "that", "this", "appears", "to", "be", "nonstandard", "behaviour", "but", "all", "the", "same", "this", "be", "a", "problem", "with", "the", "specification", "that", "I", "think", "the", "grpc", "gateway", "and", "protobuf", "in", "general", "fix", "NUMBER", "Feel", "free", "to", "close", "this", "issue", "as", "I", "understand", "you", "wouldn", "t", "be", "keen", "to", "implement", "something", "that", "s", "not", "strictly", "part", "of", "the", "OpenAPI", "spec", "NUMBER", "Problem", "statement", "Since", "this", "commit", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "c", "NUMBER", "abf", "NUMBER", "b", "NUMBER", "c", "NUMBER", "d", "NUMBER", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "ecfd", "NUMBER", "c", "NUMBER", "b", "NUMBER", "the", "package", "and", "file", "name", "generation", "has", "change", "NUMBER", "Before", "this", "commit", "the", "package", "name", "be", "sms_campaigns", "NUMBER", "After", "this", "commit", "it", "s", "like", "s_m_s_campaigns", "NUMBER", "I", "did", "a", "git", "bisect", "Swagger", "specification", "LINK", "_definition", "NUMBER", "yml", "It", "s", "use", "in", "this", "project", "LINK", "go", "library", "cc", "ekta", "slit", "Steps", "to", "reproduce", "swagger", "generate", "client", "f", "build", "swagger_definition", "NUMBER", "yml", "Environment", "swagger", "version", "master", "go", "version", "NUMBER", "beta", "NUMBER", "Thank", "you", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "dfe", "NUMBER", "aa", "NUMBER", "cd", "NUMBER", "ac", "NUMBER", "f", "NUMBER", "d", "NUMBER", "cdf", "NUMBER", "ae", "NUMBER", "dd", "NUMBER", "a", "NUMBER", "e", "NUMBER", "d", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "height", "NUMBER", "width", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "wZXJhdGlvbi", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "template", "_repo", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "RlbXBsYXRlX", "NUMBER", "JlcG", "NUMBER", "uZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "dfe", "NUMBER", "aa", "NUMBER", "caa", "NUMBER", "dae", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "I", "saw", "a", "few", "places", "where", "literal", "had", "an", "extra", "t", "litteral", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "aa", "NUMBER", "eedbf", "NUMBER", "dd", "NUMBER", "b", "NUMBER", "e", "NUMBER", "a", "NUMBER", "b", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "TAG", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "aa", "NUMBER", "a", "NUMBER", "fe", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "NUMBER", "d", "NUMBER", "c", "NUMBER", "f", "NUMBER", "b", "NUMBER", "af", "NUMBER", "f", "NUMBER", "c", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "src", "pr", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "types", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "R", "NUMBER", "cGVzLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "debug", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "RlYnVnLmdv", "NUMBER", "TAG", "\u00f8", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "NUMBER", "d", "NUMBER", "be", "NUMBER", "b", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "acf", "NUMBER", "c", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "a", "NUMBER", "ec", "NUMBER", "c", "NUMBER", "d", "NUMBER", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "height", "NUMBER", "width", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "types", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "R", "NUMBER", "cGVzLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "debug", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "RlYnVnLmdv", "NUMBER", "TAG", "\u00f8", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VydmVyLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "cmd", "swagger", "commands", "generate", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "hhcmVkLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "cmd", "swagger", "commands", "generate", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvY", "NUMBER", "xpZW", "NUMBER", "Lmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VwcG", "NUMBER", "ydC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "NUMBER", "and", "NUMBER", "more", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "more", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "acf", "NUMBER", "c", "NUMBER", "a", "NUMBER", "bf", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "d", "NUMBER", "aae", "NUMBER", "c", "NUMBER", "d", "NUMBER", "ee", "NUMBER", "e", "NUMBER", "a", "NUMBER", "df", "NUMBER", "d", "NUMBER", "fb", "NUMBER", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VydmVyLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "cmd", "swagger", "commands", "generate", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "hhcmVkLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "cmd", "swagger", "commands", "generate", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvY", "NUMBER", "xpZW", "NUMBER", "Lmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvb", "NUMBER", "BlcmF", "NUMBER", "aW", "NUMBER", "uLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VwcG", "NUMBER", "ydC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "template", "_repo", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "RlbXBsYXRlX", "NUMBER", "JlcG", "NUMBER", "uZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "NUMBER", "and", "NUMBER", "more", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "more", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "d", "NUMBER", "aae", "NUMBER", "ca", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "db", "NUMBER", "ce", "NUMBER", "b", "NUMBER", "ce", "NUMBER", "b", "NUMBER", "e", "NUMBER", "d", "NUMBER", "c", "NUMBER", "c", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "src", "pr", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "db", "NUMBER", "ce", "NUMBER", "db", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "acf", "NUMBER", "c", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "a", "NUMBER", "ec", "NUMBER", "c", "NUMBER", "d", "NUMBER", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VydmVyLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "cmd", "swagger", "commands", "generate", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "hhcmVkLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "cmd", "swagger", "commands", "generate", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvb", "NUMBER", "BlcmF", "NUMBER", "aW", "NUMBER", "uLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvY", "NUMBER", "xpZW", "NUMBER", "Lmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VwcG", "NUMBER", "ydC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "NUMBER", "and", "NUMBER", "more", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "more", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "acf", "NUMBER", "c", "NUMBER", "e", "NUMBER", "eeb", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "When", "generating", "models", "each", "model", "be", "created", "in", "separate", "file", "NUMBER", "Is", "there", "a", "way", "to", "group", "models", "to", "produce", "less", "file", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "linux", "amd", "NUMBER", "OS", "Ubuntu", "NUMBER", "can", "you", "explain", "me", "the", "benefit", "of", "this", "The", "benefit", "isn", "t", "big", "and", "I", "will", "fully", "understand", "if", "it", "won", "t", "be", "add", "NUMBER", "It", "be", "just", "a", "matter", "of", "preference", "readability", "when", "having", "many", "small", "defined", "types", "we", "end", "up", "with", "many", "many", "file", "that", "be", "NUMBER", "lines", "long", "NUMBER", "Some", "projects", "have", "code", "style", "guidelines", "to", "have", "fewer", "file", "each", "with", "a", "group", "of", "types", "pertaining", "to", "some", "specific", "module", "on", "the", "back", "end", "side", "NUMBER", "It", "would", "be", "nice", "if", "there", "was", "possibility", "to", "configure", "go", "swagger", "to", "adhere", "to", "the", "code", "style", "of", "a", "specific", "projects", "NUMBER", "Thank", "you", "very", "much", "gocat", "solves", "the", "issue", "Problem", "statement", "issue", "the", "swagger", "generate", "server", "dump", "data", "command", "results", "in", "the", "following", "error", "json", "unsupported", "type", "func", "string", "string", "This", "seems", "to", "work", "on", "NUMBER", "install", "via", "homebrew", "but", "no", "longer", "works", "against", "dev", "head", "NUMBER", "Possibly", "a", "regression", "error", "Swagger", "specification", "consumes", "application", "json", "info", "title", "Foo", "version", "NUMBER", "paths", "foo", "get", "summary", "foo", "operationId", "listFoo", "responses", "NUMBER", "description", "foos", "produces", "application", "json", "schemes", "http", "swagger", "NUMBER", "Steps", "to", "reproduce", "swagger", "init", "spec", "add", "the", "path", "in", "the", "above", "spec", "swagger", "generate", "server", "dump", "data", "Environment", "swagger", "version", "dev", "head", "go", "version", "NUMBER", "OS", "darwin", "amd", "NUMBER", "Simple", "fix", "BaseImportFunc", "func", "string", "string", "json", "Problem", "statement", "I", "have", "multiple", "operation", "s", "which", "all", "refer", "to", "the", "same", "parameter", "NUMBER", "Now", "I", "want", "these", "to", "be", "reffed", "but", "cannot", "figure", "out", "how", "to", "add", "a", "definition", "to", "the", "json", "NUMBER", "I", "tried", "swagger", "model", "foobar", "type", "fooBar", "struct", "Name", "string", "json", "f", "In", "string", "json", "path", "Description", "string", "json", "F", "NUMBER", "Required", "bool", "json", "true", "but", "no", "foobar", "definition", "be", "add", "to", "the", "json", "NUMBER", "Swagger", "specification", "swagger", "operation", "GET", "foo", "getFoo", "produces", "application", "json", "parameters", "ref", "definitions", "foobar", "you", "have", "to", "use", "the", "model", "in", "a", "parameters", "struct", "the", "parameter", "struct", "can", "be", "assigned", "to", "many", "operations", "by", "listing", "all", "the", "operationId", "s", "it", "pertains", "to", "NUMBER", "you", "have", "to", "use", "the", "model", "in", "a", "parameters", "struct", "the", "parameter", "struct", "can", "be", "assigned", "to", "many", "operations", "by", "listing", "all", "the", "operationId", "s", "it", "pertains", "to", "NUMBER", "Thanks", "for", "trying", "to", "help", "but", "I", "literally", "did", "not", "understand", "a", "single", "thing", "you", "said", "NUMBER", "Can", "you", "perhaps", "try", "to", "show", "with", "a", "code", "sample", "yes", "but", "also", "parameters", "can", "t", "refer", "to", "definitions", "because", "they", "be", "distinct", "things", "NUMBER", "A", "definition", "be", "a", "struct", "to", "represent", "a", "payload", "A", "parameter", "be", "headers", "query", "params", "path", "params", "and", "body", "for", "example", "go", "An", "OrderBodyParams", "model", "NUMBER", "This", "be", "use", "for", "operations", "that", "want", "an", "Order", "as", "body", "of", "the", "request", "swagger", "parameters", "updateOrder", "createOrder", "type", "OrderBodyParams", "struct", "The", "order", "to", "submit", "NUMBER", "in", "body", "required", "true", "Order", "models", "NUMBER", "StoreOrder", "json", "order", "this", "defines", "a", "parameter", "that", "uses", "the", "models", "NUMBER", "StoreOrder", "your", "foobar", "as", "request", "body", "NUMBER", "And", "this", "parameter", "be", "associated", "with", "both", "the", "operations", "updateOrder", "and", "createOrder", "parameters", "can", "t", "refer", "to", "definitions", "because", "they", "be", "distinct", "things", "NUMBER", "Ok", "this", "then", "means", "I", "be", "forced", "to", "copy", "and", "paste", "parameter", "entries", "I", "don", "t", "know", "why", "you", "d", "need", "to", "copy", "paste", "them", "it", "s", "NUMBER", "type", "that", "can", "be", "attached", "to", "many", "operations", "NUMBER", "You", "can", "only", "have", "NUMBER", "body", "I", "don", "t", "know", "why", "you", "d", "need", "to", "copy", "paste", "them", "If", "I", "have", "NUMBER", "operations", "and", "all", "of", "them", "want", "a", "path", "parameter", "of", "name", "foobar", "this", "means", "I", "have", "to", "have", "NUMBER", "definitions", "of", "foobar", "right", "swagger", "operation", "GET", "foobar", "foo", "NUMBER", "getFoo", "NUMBER", "produces", "application", "json", "parameters", "name", "foobar", "in", "path", "swagger", "operation", "GET", "foobar", "foo", "NUMBER", "getFoo", "NUMBER", "produces", "application", "json", "parameters", "name", "foobar", "in", "path", "if", "you", "use", "swagger", "route", "you", "don", "t", "need", "to", "go", "swagger", "parameter", "getFoo", "NUMBER", "getFoo", "NUMBER", "type", "fooBarParam", "struct", "in", "path", "FooBar", "string", "json", "foobar", "swagger", "route", "GET", "foobar", "foo", "NUMBER", "getFoo", "NUMBER", "func", "getFoo", "NUMBER", "res", "responsewriter", "req", "request", "swagger", "route", "GET", "foobar", "foo", "NUMBER", "getFoo", "NUMBER", "func", "getFoo", "NUMBER", "res", "responsewriter", "req", "request", "if", "you", "use", "swagger", "route", "you", "don", "t", "need", "to", "Route", "be", "harder", "to", "retrofit", "into", "already", "work", "source", "code", "IMO", "NUMBER", "I", "assumed", "that", "one", "could", "refer", "to", "a", "global", "parameter", "since", "it", "be", "e", "NUMBER", "g", "NUMBER", "possible", "to", "refer", "to", "a", "global", "security", "definition", "NUMBER", "Now", "I", "realize", "that", "security", "has", "special", "handle", "NUMBER", "Also", "I", "be", "not", "clear", "what", "_model_", "_route_", "_operation_", "etc", "NUMBER", "have", "as", "a", "semantic", "meaning", "NUMBER", "It", "seems", "the", "docs", "assume", "one", "be", "already", "very", "versed", "in", "these", "topics", "which", "I", "be", "not", "NUMBER", "Anyway", "thanks", "a", "lot", "for", "your", "time", "NUMBER", "Problem", "statement", "The", "help", "guide", "given", "by", "swagger", "generate", "model", "h", "says", "that", "skip", "validator", "when", "present", "will", "not", "generate", "a", "model", "validator", "But", "actually", "there", "be", "no", "difference", "with", "or", "without", "skip", "validator", "Swagger", "specification", "Try", "the", "example", "swagger", "yml", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "task", "tracker", "swagger", "NUMBER", "yml", "Steps", "to", "reproduce", "run", "swagger", "generate", "model", "f", "swagger", "NUMBER", "yml", "run", "swagger", "generate", "model", "f", "swagger", "NUMBER", "yml", "skip", "validator", "compare", "the", "output", "go", "file", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "macOS", "go", "swagger", "NUMBER", "Added", "a", "flag", "to", "take", "in", "additional", "initialisms", "Fixes", "NUMBER", "I", "be", "not", "sure", "why", "it", "be", "fail", "to", "build", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "c", "NUMBER", "e", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "ab", "NUMBER", "ce", "NUMBER", "a", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvbW", "NUMBER", "kZWwuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "scan", "validators", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "YWxpZGF", "NUMBER", "b", "NUMBER", "JzLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "template", "_repo", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "RlbXBsYXRlX", "NUMBER", "JlcG", "NUMBER", "uZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "wZXJhdGlvbi", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "cmd", "swagger", "commands", "generate", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VwcG", "NUMBER", "ydC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvb", "NUMBER", "BlcmF", "NUMBER", "aW", "NUMBER", "uLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvY", "NUMBER", "xpZW", "NUMBER", "Lmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "NUMBER", "and", "NUMBER", "more", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "more", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "c", "NUMBER", "e", "NUMBER", "c", "NUMBER", "edfaee", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "fredbi", "find", "what", "the", "problem", "was", "NUMBER", "Do", "you", "mind", "taking", "another", "look", "Thanks", "fredbi", "anything", "I", "can", "do", "to", "fix", "those", "I", "be", "pretty", "lost", "right", "now", "I", "should", "look", "at", "the", "change", "for", "the", "validation", "again", "NUMBER", "I", "suspect", "that", "there", "were", "things", "that", "use", "to", "be", "warnings", "that", "be", "now", "error", "NUMBER", "o", "i", "didn", "t", "mean", "skip", "validation", "but", "skip", "validator", "flag", "NUMBER", "we", "want", "to", "validate", "but", "the", "skip", "validator", "we", "don", "t", "want", "to", "support", "swagger", "doesn", "t", "allow", "for", "type", "arrays", "so", "they", "dont", "need", "to", "be", "support", "we", "should", "remove", "the", "makefile", "and", "the", "scripts", "that", "uses", "NUMBER", "they", "be", "not", "useful", "and", "confusing", "oh", "wow", "thanks", "guys", "NUMBER", "I", "totally", "mix", "up", "skip", "validation", "and", "skip", "validator", "flags", "NUMBER", "casualjim", "do", "you", "mind", "taking", "another", "look", "since", "i", "took", "out", "the", "wrong", "flag", "Thanks", "it", "needs", "a", "rebase", "on", "master", "because", "there", "was", "another", "PR", "merge", "with", "change", "to", "template", "so", "bindata", "be", "in", "conflict", "currently", "Done", "Problem", "statement", "This", "project", "be", "use", "LINK", "so", "we", "could", "theoretically", "remove", "vendor", "folder", "and", "use", "dep", "ensure", "to", "construct", "the", "vendor", "folder", "Is", "there", "anything", "I", "be", "miss", "Can", "you", "point", "me", "to", "the", "part", "for", "build", "the", "binaries", "Is", "it", "possible", "to", "add", "dep", "ensure", "as", "part", "of", "the", "build", "process", "why", "would", "vendor", "not", "be", "version", "controlled", "imo", "generate", "code", "and", "vendored", "code", "be", "part", "of", "the", "project", "there", "be", "no", "benefit", "besides", "some", "disk", "space", "NUMBER", "the", "goal", "be", "that", "people", "can", "do", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "and", "it", "should", "build", "with", "the", "version", "that", "we", "test", "with", "not", "with", "what", "happens", "to", "be", "on", "their", "GOPATH", "There", "s", "both", "vendor", "and", "godep", "to", "version", "control", "the", "external", "dependencies", "which", "be", "a", "bit", "redundant", "imo", "NUMBER", "Both", "php", "and", "node", "NUMBER", "js", "recommend", "not", "version", "control", "the", "external", "dependencies", "NUMBER", "I", "know", "the", "topic", "be", "controversial", "but", "I", "just", "want", "to", "put", "an", "idea", "out", "there", "since", "I", "had", "to", "update", "both", "Gopkg", "NUMBER", "lock", "and", "the", "vendor", "folders", "to", "update", "a", "dependency", "if", "you", "can", "tell", "me", "how", "people", "can", "do", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "and", "at", "the", "same", "time", "use", "a", "set", "of", "libraries", "that", "be", "at", "the", "same", "version", "as", "we", "test", "with", "I", "m", "willing", "to", "entertain", "the", "discussion", "NUMBER", "Until", "then", "we", "should", "leave", "the", "subject", "for", "what", "it", "be", "NUMBER", "I", "know", "this", "sounds", "dismissive", "but", "it", "s", "not", "a", "controversial", "topic", "NUMBER", "We", "have", "tons", "of", "actual", "problem", "and", "higher", "value", "improvement", "that", "can", "be", "made", "instead", "NUMBER", "Fair", "enough", "NUMBER", "Thanks", "casualjim", "Problem", "statement", "I", "run", "into", "an", "issue", "that", "I", "wish", "swagger", "could", "help", "me", "to", "validate", "MAC", "address", "in", "struct", "defined", "in", "swagger", "NUMBER", "yml", "like", "MacAddress", "description", "MAC", "address", "of", "the", "container", "NUMBER", "type", "string", "format", "mac", "Then", "the", "generate", "struct", "has", "a", "validation", "function", "to", "validate", "the", "mac", "format", "of", "this", "field", "NUMBER", "However", "it", "fail", "NUMBER", "Could", "we", "support", "this", "feature", "in", "go", "swagger", "Swagger", "specification", "Steps", "to", "reproduce", "Environment", "swagger", "version", "version", "NUMBER", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "Problem", "statement", "Hi", "All", "Today", "I", "run", "into", "an", "issue", "that", "I", "have", "a", "definition", "which", "has", "a", "Hostname", "and", "hostname", "has", "a", "format", "of", "hostname", "use", "strfmt", "definitions", "ContainerConfig", "type", "object", "description", "Configuration", "for", "a", "container", "that", "be", "portable", "between", "hosts", "properties", "Hostname", "description", "The", "hostname", "to", "use", "for", "the", "container", "as", "a", "valid", "RFC", "NUMBER", "hostname", "NUMBER", "type", "string", "format", "hostname", "When", "when", "I", "generate", "container_config", "NUMBER", "go", "I", "did", "not", "find", "any", "validation", "code", "for", "field", "Hostname", "Code", "generate", "by", "go", "swagger", "DO", "NOT", "EDIT", "NUMBER", "package", "types", "This", "file", "was", "generate", "by", "the", "swagger", "tool", "NUMBER", "Editing", "this", "file", "might", "prove", "futile", "when", "you", "re", "run", "the", "swagger", "generate", "command", "import", "strfmt", "github", "NUMBER", "com", "go", "openapi", "strfmt", "github", "NUMBER", "com", "go", "openapi", "error", "github", "NUMBER", "com", "go", "openapi", "swag", "ContainerConfig", "Configuration", "for", "a", "container", "that", "be", "portable", "between", "hosts", "swagger", "model", "ContainerConfig", "type", "ContainerConfig", "struct", "The", "hostname", "to", "use", "for", "the", "container", "as", "a", "valid", "RFC", "NUMBER", "hostname", "NUMBER", "Hostname", "strfmt", "NUMBER", "Hostname", "json", "Hostname", "omitempty", "Validate", "validates", "this", "container", "config", "func", "m", "ContainerConfig", "Validate", "formats", "strfmt", "NUMBER", "Registry", "error", "var", "res", "error", "if", "len", "res", "NUMBER", "return", "error", "NUMBER", "CompositeValidationError", "res", "NUMBER", "return", "nil", "MarshalBinary", "interface", "implementation", "func", "m", "ContainerConfig", "MarshalBinary", "byte", "error", "if", "m", "nil", "return", "nil", "nil", "return", "swag", "NUMBER", "WriteJSON", "m", "UnmarshalBinary", "interface", "implementation", "func", "m", "ContainerConfig", "UnmarshalBinary", "b", "byte", "error", "var", "res", "ContainerConfig", "if", "err", "swag", "NUMBER", "ReadJSON", "b", "res", "err", "nil", "return", "err", "m", "res", "return", "nil", "So", "why", "do", "it", "not", "validate", "Hostname", "if", "this", "be", "a", "not", "required", "field", "And", "I", "test", "that", "if", "I", "add", "Hostname", "as", "required", "validation", "code", "will", "generate", "Validate", "validates", "this", "container", "config", "func", "m", "ContainerConfig", "Validate", "formats", "strfmt", "NUMBER", "Registry", "error", "var", "res", "error", "if", "err", "m", "NUMBER", "validateHostname", "formats", "err", "nil", "prop", "res", "append", "res", "err", "if", "len", "res", "NUMBER", "return", "error", "NUMBER", "CompositeValidationError", "res", "NUMBER", "return", "nil", "func", "m", "ContainerConfig", "validateHostname", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Required", "Hostname", "body", "m", "NUMBER", "Hostname", "err", "nil", "return", "err", "if", "err", "validate", "NUMBER", "FormatOf", "Hostname", "body", "hostname", "m", "NUMBER", "Hostname", "NUMBER", "String", "formats", "err", "nil", "return", "err", "return", "nil", "And", "if", "I", "add", "a", "pattern", "for", "this", "not", "required", "field", "validation", "code", "will", "be", "generate", "NUMBER", "Is", "add", "pattern", "the", "only", "way", "to", "validate", "format", "of", "a", "not", "required", "field", "cc", "CodeJuan", "Swagger", "specification", "Steps", "to", "reproduce", "Environment", "swagger", "version", "swagger", "version", "dev", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "It", "s", "actually", "slightly", "lower", "down", "but", "same", "basic", "idea", "with", "one", "additional", "condition", "that", "should", "be", "satisfied", "here", "without", "a", "problem", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "schemavalidator", "NUMBER", "gotmpl", "L", "NUMBER", "Oooh", "nice", "tip", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "model", "NUMBER", "go", "L", "NUMBER", "I", "think", "here", "we", "should", "add", "a", "check", "for", "model", "NUMBER", "Format", "be", "a", "value", "that", "we", "know", "how", "to", "validate", "NUMBER", "I", "m", "just", "as", "much", "of", "a", "beginner", "here", "NUMBER", "The", "reason", "I", "said", "be", "a", "value", "that", "we", "know", "how", "to", "validate", "be", "that", "I", "have", "no", "idea", "how", "it", "will", "handle", "a", "format", "that", "it", "doesn", "t", "know", "how", "to", "validate", "NUMBER", "Having", "said", "that", "I", "realize", "now", "that", "it", "should", "be", "moot", "because", "it", "will", "already", "return", "true", "if", "isRequired", "be", "true", "NUMBER", "Decided", "to", "try", "this", "project", "use", "the", "petstore", "example", "yaml", "file", "LINK", "api", "swagger", "codegen", "blob", "master", "modules", "swagger", "codegen", "src", "test", "resources", "NUMBER", "_", "NUMBER", "petstore", "NUMBER", "yaml", "When", "trying", "to", "compile", "the", "generate", "code", "I", "get", "the", "following", "error", "go", "build", "restapi", "server", "NUMBER", "go", "petstore", "models", "models", "create_users_with_array_input_params_body", "NUMBER", "go", "NUMBER", "ve", "NUMBER", "ValidateName", "undefined", "type", "github", "NUMBER", "com", "go", "openapi", "error", "NUMBER", "Validation", "has", "no", "field", "or", "method", "ValidateName", "models", "create_users_with_list_input_params_body", "NUMBER", "go", "NUMBER", "ve", "NUMBER", "ValidateName", "undefined", "type", "github", "NUMBER", "com", "go", "openapi", "error", "NUMBER", "Validation", "has", "no", "field", "or", "method", "ValidateName", "models", "find_pets_by_status_okbody", "NUMBER", "go", "NUMBER", "ve", "NUMBER", "ValidateName", "undefined", "type", "github", "NUMBER", "com", "go", "openapi", "error", "NUMBER", "Validation", "has", "no", "field", "or", "method", "ValidateName", "models", "find_pets_by_tags_okbody", "NUMBER", "go", "NUMBER", "ve", "NUMBER", "ValidateName", "undefined", "type", "github", "NUMBER", "com", "go", "openapi", "error", "NUMBER", "Validation", "has", "no", "field", "or", "method", "ValidateName", "models", "pet", "NUMBER", "go", "NUMBER", "ve", "NUMBER", "ValidateName", "undefined", "type", "github", "NUMBER", "com", "go", "openapi", "error", "NUMBER", "Validation", "has", "no", "field", "or", "method", "ValidateName", "models", "pet_tags", "NUMBER", "go", "NUMBER", "ve", "NUMBER", "ValidateName", "undefined", "type", "github", "NUMBER", "com", "go", "openapi", "error", "NUMBER", "Validation", "has", "no", "field", "or", "method", "ValidateName", "models", "pets", "NUMBER", "go", "NUMBER", "ve", "NUMBER", "ValidateName", "undefined", "type", "github", "NUMBER", "com", "go", "openapi", "error", "NUMBER", "Validation", "has", "no", "field", "or", "method", "ValidateName", "Swagger", "specification", "swagger", "NUMBER", "Steps", "to", "reproduce", "alias", "swagger", "docker", "run", "rm", "it", "e", "GOPATH", "Users", "stevef", "NUMBER", "Source_Code", "go", "v", "Users", "stevef", "NUMBER", "Source_Code", "Users", "stevef", "NUMBER", "Source_Code", "w", "Users", "stevef", "NUMBER", "Source_Code", "go", "petstore", "quay", "NUMBER", "io", "goswagger", "swagger", "swagger", "generate", "server", "f", "petstore", "NUMBER", "yaml", "target", "GOPATH", "src", "petstore", "Also", "tried", "use", "the", "brew", "install", "approach", "with", "same", "result", "NUMBER", "Environment", "swagger", "version", "dev", "commit", "NUMBER", "cc", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "cdf", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "d", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "MacOS", "Darwin", "Kernel", "Version", "NUMBER", "High", "Sierra", "NUMBER", "NUMBER", "C", "NUMBER", "you", "need", "to", "download", "the", "dependencies", "it", "lists", "at", "the", "end", "of", "the", "generation", "step", "and", "regenerate", "NUMBER", "Sorry", "I", "thought", "I", "had", "but", "I", "saw", "the", "instruction", "to", "do", "a", "go", "get", "u", "so", "I", "tried", "that", "and", "now", "when", "I", "try", "to", "compile", "I", "get", "go", "build", "restapi", "server", "NUMBER", "go", "command", "line", "argument", "restapi", "server", "NUMBER", "go", "NUMBER", "NUMBER", "undefined", "configureAPI", "restapi", "server", "NUMBER", "go", "NUMBER", "NUMBER", "undefined", "configureFlags", "restapi", "server", "NUMBER", "go", "NUMBER", "NUMBER", "undefined", "configureAPI", "restapi", "server", "NUMBER", "go", "NUMBER", "NUMBER", "undefined", "configureServer", "restapi", "server", "NUMBER", "go", "NUMBER", "NUMBER", "undefined", "configureServer", "restapi", "server", "NUMBER", "go", "NUMBER", "NUMBER", "undefined", "configureTLS", "restapi", "server", "NUMBER", "go", "NUMBER", "NUMBER", "undefined", "configureServer", "so", "closer", "but", "no", "cigar", "Any", "help", "in", "how", "to", "get", "this", "to", "compile", "would", "be", "appreciated", "NUMBER", "Thanks", "as", "you", "can", "tell", "I", "be", "fairly", "new", "to", "go", "and", "it", "has", "be", "a", "year", "or", "so", "since", "I", "last", "tried", "write", "any", "NUMBER", "I", "have", "build", "it", "I", "needed", "to", "do", "a", "few", "more", "go", "gets", "for", "LINK", "openapi", "strfmt", "github", "NUMBER", "com", "go", "openapi", "analysis", "github", "NUMBER", "com", "go", "openapi", "validate", "Then", "I", "needed", "to", "edit", "restapi", "operations", "user", "login_user_responses", "NUMBER", "go", "to", "add", "an", "import", "for", "github", "NUMBER", "com", "go", "openapi", "strfmt", "Problem", "statement", "Hi", "All", "I", "run", "into", "one", "situation", "that", "in", "my", "swagger", "NUMBER", "yml", "I", "have", "defined", "an", "object", "IPAM", "in", "LINK", "L", "NUMBER", "L", "NUMBER", "IPAM", "type", "object", "description", "represents", "IP", "Address", "Management", "properties", "Driver", "type", "string", "Options", "type", "object", "additionalProperties", "type", "string", "Config", "type", "array", "items", "ref", "definitions", "IPAMConfig", "When", "generating", "a", "file", "a", "file", "named", "ip_a_m", "NUMBER", "go", "be", "generate", "see", "LINK", "_a_m", "NUMBER", "go", "NUMBER", "I", "do", "not", "think", "the", "file", "name", "ip_a_m", "NUMBER", "go", "be", "what", "I", "want", "NUMBER", "So", "could", "I", "customize", "the", "file", "name", "in", "some", "places", "like", "setting", "something", "to", "generate", "a", "file", "named", "IPAM", "NUMBER", "go", "cc", "rudyfly", "CodeJuan", "Swagger", "specification", "See", "LINK", "Steps", "to", "reproduce", "NONE", "Environment", "swagger", "version", "version", "NUMBER", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "Darwin", "AllenSundeMacBook", "Pro", "NUMBER", "local", "NUMBER", "Darwin", "Kernel", "Version", "NUMBER", "Mon", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PST", "NUMBER", "root", "xnu", "NUMBER", "NUMBER", "RELEASE_X", "NUMBER", "_", "NUMBER", "x", "NUMBER", "_", "NUMBER", "I", "think", "we", "recently", "update", "the", "way", "these", "names", "be", "generate", "NUMBER", "do", "you", "still", "see", "that", "same", "behavior", "on", "when", "you", "build", "from", "master", "So", "I", "think", "we", "need", "to", "first", "set", "the", "customized", "file", "name", "in", "swagger", "NUMBER", "yml", "right", "Currently", "I", "have", "not", "get", "the", "way", "to", "set", "that", "file", "name", "NUMBER", "Could", "you", "share", "how", "to", "add", "a", "name", "in", "swagger", "NUMBER", "yml", "Thanks", "a", "lot", "NUMBER", "Then", "I", "will", "try", "master", "branch", "NUMBER", "we", "add", "change", "the", "function", "that", "generates", "a", "file", "name", "to", "keep", "all", "uppercase", "letters", "grouped", "NUMBER", "So", "the", "filename", "would", "still", "be", "lowercase", "but", "NUMBER", "word", "ipam", "NUMBER", "go", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "ec", "NUMBER", "d", "NUMBER", "f", "NUMBER", "f", "NUMBER", "eebeda", "NUMBER", "f", "NUMBER", "a", "NUMBER", "fcded", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "height", "NUMBER", "width", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "ec", "NUMBER", "d", "NUMBER", "a", "NUMBER", "e", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "this", "looks", "good", "to", "me", "let", "me", "know", "when", "you", "re", "happy", "with", "it", "for", "merge", "I", "ve", "push", "the", "website", "to", "the", "domain", "Problem", "statement", "The", "swagger", "utility", "creates", "temporary", "file", "and", "do", "not", "delete", "these", "file", "before", "program", "termination", "NUMBER", "In", "particular", "swagger", "validate", "calls", "the", "ExpandSchema", "method", "from", "the", "dependent", "go", "openapi", "spec", "to", "validate", "swagger", "spec", "file", "NUMBER", "Every", "invocation", "of", "swagger", "validate", "may", "end", "up", "creating", "multiple", "temporary", "file", "in", "the", "temp", "folder", "e", "NUMBER", "g", "NUMBER", "tmp", "for", "Linux", "NUMBER", "The", "ExpandSchema", "method", "calls", "ioutil", "NUMBER", "TempFile", "which", "creates", "a", "temporary", "file", "and", "the", "file", "be", "not", "delete", "before", "program", "termination", "NUMBER", "As", "specified", "in", "the", "golang", "documentation", "it", "be", "the", "caller", "s", "responsibility", "to", "delete", "temporary", "file", "created", "by", "ioutil", "NUMBER", "TempFile", "LINK", "openapi", "spec", "blob", "aa", "NUMBER", "e", "NUMBER", "cfc", "NUMBER", "a", "NUMBER", "f", "NUMBER", "eeab", "NUMBER", "f", "NUMBER", "d", "NUMBER", "c", "NUMBER", "f", "NUMBER", "a", "expander", "NUMBER", "go", "L", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Invoke", "swagger", "validate", "xyz", "NUMBER", "json", "NUMBER", "After", "program", "execution", "notice", "the", "tmp", "directory", "in", "Linux", "contains", "multiple", "rootXXXX", "file", "NUMBER", "Environment", "swagger", "version", "x", "NUMBER", "x", "NUMBER", "x", "go", "version", "NUMBER", "OS", "Linux", "Proposed", "fix", "The", "track", "issue", "in", "go", "openapi", "spec", "be", "LINK", "openapi", "spec", "issue", "NUMBER", "Pull", "Request", "LINK", "openapi", "spec", "pull", "NUMBER", "The", "propose", "fix", "for", "go", "swagger", "be", "to", "update", "Gopkg", "NUMBER", "lock", "and", "use", "LINK", "openapi", "spec", "pull", "NUMBER", "commit", "Yes", "I", "confirm", "the", "issue", "can", "be", "close", "NUMBER", "thanks", "NUMBER", "Problem", "statement", "When", "generating", "a", "server", "implementation", "and", "calling", "Server", "NUMBER", "Shutdown", "method", "from", "restapi", "package", "the", "server", "be", "not", "actually", "close", "though", "the", "documentation", "state", "Shutdown", "server", "and", "clean", "up", "resources", "NUMBER", "Only", "the", "API", "NUMBER", "ServerShutdown", "callback", "from", "operations", "package", "be", "call", "but", "the", "actual", "server", "be", "not", "close", "NUMBER", "The", "graceful", "server", "exposes", "the", "API", "needed", "to", "shut", "it", "down", "gracefully", "but", "the", "generate", "abstraction", "do", "not", "allow", "access", "to", "this", "API", "NUMBER", "Because", "of", "this", "only", "an", "OS", "signal", "can", "kill", "the", "graceful", "server", "when", "run", "the", "generate", "server", "NUMBER", "I", "propose", "to", "expand", "the", "Server", "NUMBER", "Shutdown", "method", "to", "signal", "the", "graceful", "server", "to", "initiate", "a", "shutdown", "NUMBER", "It", "be", "a", "fairly", "simple", "addition", "to", "the", "API", "and", "I", "m", "happy", "to", "make", "a", "PR", "with", "the", "change", "NUMBER", "When", "looking", "over", "the", "source", "the", "following", "change", "be", "necessary", "Server", "NUMBER", "Serve", "should", "listen", "for", "on", "a", "shutdown", "channel", "and", "stop", "the", "graceful", "server", "when", "receiving", "a", "signal", "Server", "NUMBER", "Shutdown", "should", "send", "a", "signal", "on", "the", "shutdown", "channel", "Code", "on", "examples", "should", "be", "update", "to", "hold", "the", "new", "implementation", "Steps", "to", "reproduce", "A", "slightly", "modify", "version", "of", "the", "custom", "server", "tutorial", "example", "LINK", "swagger", "go", "swagger", "tree", "master", "examples", "tutorials", "custom", "server", "shows", "the", "behaviour", "NUMBER", "After", "NUMBER", "seconds", "the", "server", "be", "instructed", "to", "shut", "down", "by", "calling", "Shutdown", "NUMBER", "The", "ServerShutdown", "callback", "be", "call", "but", "the", "server", "continuous", "to", "run", "NUMBER", "When", "run", "the", "output", "be", "as", "follows", "NUMBER", "Not", "that", "I", "manually", "interrupt", "the", "server", "with", "CTRL", "C", "NUMBER", "go", "run", "NUMBER", "cmd", "greeter", "main", "NUMBER", "go", "port", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Serving", "greeter", "at", "LINK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "api", "shutdown", "call", "C", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "shutdown", "initiated", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Stopped", "serving", "greeter", "at", "LINK", "NUMBER", "Below", "be", "a", "stripped", "snippet", "from", "the", "main", "NUMBER", "go", "NUMBER", "go", "from", "examples", "tutorials", "custom", "server", "cmd", "greeter", "main", "NUMBER", "go", "create", "new", "service", "API", "api", "operations", "NUMBER", "NewGreeterAPI", "swaggerSpec", "api", "NUMBER", "ServerShutdown", "func", "log", "NUMBER", "Println", "api", "shutdown", "call", "add", "server", "restapi", "NUMBER", "NewServer", "api", "parse", "flags", "flag", "NUMBER", "Parse", "set", "the", "port", "this", "service", "will", "be", "run", "on", "server", "NUMBER", "Port", "portFlag", "GetGreetingHandler", "greets", "the", "given", "name", "in", "case", "the", "name", "be", "not", "given", "it", "will", "default", "to", "World", "api", "NUMBER", "GetGreetingHandler", "operations", "NUMBER", "GetGreetingHandlerFunc", "func", "params", "operations", "NUMBER", "GetGreetingParams", "middleware", "NUMBER", "Responder", "NUMBER", "add", "go", "func", "time", "NUMBER", "Sleep", "NUMBER", "time", "NUMBER", "Second", "server", "NUMBER", "Shutdown", "serve", "API", "casualjim", "Would", "you", "be", "interested", "in", "this", "PR", "I", "belive", "this", "be", "more", "of", "a", "bug", "fix", "than", "an", "enhancement", "as", "the", "generate", "documentation", "describes", "that", "the", "server", "should", "shutdown", "after", "a", "call", "to", "Server", "NUMBER", "Shutdown", "but", "it", "do", "not", "The", "reason", "I", "m", "ask", "be", "to", "prioritise", "my", "time", "as", "well", "NUMBER", "We", "be", "use", "this", "in", "production", "now", "and", "would", "like", "to", "know", "if", "a", "PR", "be", "likely", "to", "be", "release", "any", "time", "soon", "NUMBER", "Any", "how", "I", "ll", "prepare", "a", "PR", "NUMBER", "Any", "checklists", "or", "alike", "I", "should", "use", "I", "had", "some", "difficulty", "run", "the", "different", "make", "target", "locally", "NUMBER", "Is", "it", "fine", "to", "just", "make", "the", "change", "in", "the", "template", "and", "sources", "and", "let", "example", "generation", "etc", "NUMBER", "be", "handle", "when", "things", "be", "to", "be", "merge", "yes", "I", "think", "this", "be", "a", "valuable", "contribution", "NUMBER", "I", "have", "to", "see", "exactly", "where", "the", "change", "will", "be", "made", "and", "at", "worst", "I", "d", "ask", "to", "rename", "a", "method", "or", "something", "NUMBER", "if", "you", "can", "run", "go", "test", "NUMBER", "NUMBER", "we", "should", "be", "good", "Great", "NUMBER", "I", "ll", "prepare", "the", "PR", "NUMBER", "Thank", "you", "for", "the", "quick", "answers", "NUMBER", "Problem", "statement", "Up", "to", "go", "swagger", "version", "NUMBER", "we", "could", "use", "go", "swagger", "s", "generator", "to", "generate", "other", "artifacts", "not", "go", "code", "into", "the", "path", "outside", "of", "GOPATH", "src", "use", "custom", "template", "NUMBER", "The", "code", "that", "rejects", "such", "code", "generation", "outside", "of", "GOPATH", "existed", "before", "but", "there", "was", "a", "bug", "that", "didn", "t", "trigger", "this", "check", "NUMBER", "But", "according", "to", "the", "commit", "logs", "this", "bug", "seems", "to", "have", "be", "fix", "in", "August", "and", "this", "change", "went", "into", "NUMBER", "As", "a", "result", "we", "can", "no", "longer", "use", "go", "swagger", "to", "generate", "non", "go", "code", "use", "custom", "template", "into", "arbitrary", "folder", "NUMBER", "I", "be", "wondering", "if", "we", "could", "add", "a", "parameter", "to", "method", "baseImport", "in", "support", "NUMBER", "go", "so", "that", "we", "could", "have", "a", "configuration", "option", "for", "not", "triggering", "this", "GOPATH", "src", "check", "in", "certain", "cases", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "support", "NUMBER", "go", "L", "NUMBER", "I", "would", "appreciate", "for", "your", "comments", "NUMBER", "regards", "aki", "yeah", "I", "think", "you", "re", "right", "NUMBER", "We", "have", "a", "concept", "of", "language", "options", "but", "this", "hasn", "t", "be", "add", "to", "it", "yet", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "shared", "NUMBER", "go", "L", "NUMBER", "Perhaps", "this", "check", "should", "move", "there", "fredbi", "I", "don", "t", "think", "skip_format", "true", "would", "let", "you", "bypass", "this", "GOPATH", "check", "as", "the", "check", "be", "do", "before", "the", "result", "be", "write", "NUMBER", "casualjim", "Yes", "NUMBER", "If", "we", "could", "change", "LanguageOpts", "we", "could", "add", "the", "language", "specific", "check", "method", "there", "NUMBER", "Is", "this", "change", "allow", "in", "the", "next", "NUMBER", "x", "NUMBER", "x", "If", "not", "it", "would", "be", "nice", "if", "we", "could", "at", "least", "modify", "the", "current", "check", "code", "so", "that", "it", "be", "only", "enable", "only", "if", "GoLangOpts", "be", "use", "or", "something", "like", "that", "NUMBER", "thanks", "NUMBER", "elakito", "you", "can", "make", "the", "change", "in", "NUMBER", "x", "NUMBER", "x", "as", "long", "as", "we", "do", "it", "without", "breaking", "the", "go", "language", "support", "we", "re", "all", "good", "NUMBER", "fredbi", "I", "know", "where", "this", "skip_format", "has", "effect", "NUMBER", "But", "I", "don", "t", "know", "why", "it", "relate", "to", "this", "GOPATH", "check", "NUMBER", "It", "s", "not", "about", "the", "format", "of", "the", "generate", "code", "but", "about", "in", "which", "folder", "the", "code", "be", "generate", "NUMBER", "This", "GOPATH", "check", "happens", "at", "the", "generator", "client", "start", "up", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "client", "NUMBER", "go", "L", "NUMBER", "which", "be", "much", "before", "any", "write", "happens", "where", "skip_format", "can", "have", "some", "effect", "NUMBER", "We", "could", "add", "another", "property", "like", "skip_format", "and", "call", "it", "skip_gopath_check", "NUMBER", "But", "I", "find", "it", "ugly", "and", "there", "be", "some", "overlap", "with", "what", "we", "can", "do", "with", "LanguageOpts", "NUMBER", "So", "I", "think", "use", "one", "of", "the", "two", "approaches", "that", "I", "suggested", "would", "be", "reasonable", "no", "the", "use", "case", "for", "language", "opts", "be", "exactly", "what", "you", "want", "to", "do", "elakito", "so", "I", "my", "vote", "goes", "to", "continuing", "to", "expand", "that", "functionality", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "d", "NUMBER", "a", "NUMBER", "bc", "NUMBER", "a", "NUMBER", "fcb", "NUMBER", "e", "NUMBER", "b", "NUMBER", "d", "NUMBER", "a", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "cmd", "swagger", "commands", "validate", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvdmFsaWRhdGUuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "d", "NUMBER", "a", "NUMBER", "da", "NUMBER", "c", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "f", "NUMBER", "ed", "NUMBER", "ea", "NUMBER", "c", "NUMBER", "a", "NUMBER", "ae", "NUMBER", "e", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "f", "NUMBER", "ed", "NUMBER", "f", "NUMBER", "c", "NUMBER", "b", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "ad", "NUMBER", "d", "NUMBER", "a", "NUMBER", "c", "NUMBER", "a", "NUMBER", "cb", "NUMBER", "c", "NUMBER", "efbcfac", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "template", "_repo", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "RlbXBsYXRlX", "NUMBER", "JlcG", "NUMBER", "uZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "cmd", "swagger", "commands", "initcmd", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvaW", "NUMBER", "pdGNtZC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "cmd", "swagger", "commands", "flatten", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZmxhdHRlbi", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "cmd", "swagger", "commands", "version", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvdmVyc", "NUMBER", "lvbi", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "cmd", "swagger", "commands", "mixin", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvbWl", "NUMBER", "aW", "NUMBER", "uZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "cmd", "swagger", "commands", "serve", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvc", "NUMBER", "VydmUuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "cmd", "swagger", "commands", "validate", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvdmFsaWRhdGUuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "cmd", "swagger", "commands", "expand", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZXhwYW", "NUMBER", "kLmdv", "NUMBER", "TAG", "\u00f8", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "ad", "NUMBER", "d", "NUMBER", "a", "NUMBER", "ab", "NUMBER", "eb", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "ab", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "b", "NUMBER", "bebbf", "NUMBER", "d", "NUMBER", "bd", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "template", "_repo", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "RlbXBsYXRlX", "NUMBER", "JlcG", "NUMBER", "uZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "ab", "NUMBER", "b", "NUMBER", "c", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Fixes", "NUMBER", "Note", "PR", "be", "not", "complete", "not", "doc", "change", "test", "NUMBER", "Just", "wanted", "to", "get", "some", "feedback", "on", "the", "idea", "before", "finalising", "the", "work", "NUMBER", "how", "would", "that", "custom", "consumer", "producer", "be", "pick", "up", "at", "runtime", "casualjim", "In", "the", "restapi", "configure_foo", "NUMBER", "go", "you", "would", "register", "the", "consumer", "producer", "against", "an", "application", "type", "NUMBER", "For", "example", "go", "api", "NUMBER", "RegisterConsumer", "application", "pkcs", "NUMBER", "customConsumer", "In", "my", "test", "that", "was", "all", "I", "needed", "to", "do", "to", "support", "reading", "PKCS", "NUMBER", "input", "NUMBER", "Because", "my", "schema", "defined", "the", "type", "as", "string", "my", "custom", "consumer", "expects", "to", "unmarshall", "into", "a", "string", "pointer", "NUMBER", "yes", "you", "re", "right", "I", "verify", "after", "ask", "the", "question", "NUMBER", "in", "this", "case", "carry", "on", "casualjim", "How", "would", "you", "normally", "test", "this", "sort", "of", "change", "I", "can", "add", "some", "pattern", "matching", "test", "to", "go", "swagger", "generator", "server_test", "NUMBER", "go", "to", "confirm", "the", "methods", "have", "be", "add", "NUMBER", "Is", "there", "an", "alternative", "approach", "in", "which", "you", "execute", "the", "generate", "code", "and", "verify", "the", "methods", "work", "as", "expected", "I", "m", "still", "groking", "the", "code", "base", "so", "some", "pointers", "would", "be", "great", "NUMBER", "it", "s", "not", "ideal", "but", "I", "just", "do", "pattern", "matching", "test", "and", "typically", "I", "ve", "tried", "the", "code", "before", "NUMBER", "casualjim", "This", "be", "potentially", "ready", "to", "go", "although", "I", "m", "not", "sure", "how", "to", "resolve", "the", "CircleCI", "issue", "NUMBER", "It", "s", "fail", "for", "odd", "reasons", "LINK", "e", "security", "go", "swagger", "NUMBER", "bin", "bash", "eo", "pipefail", "NUMBER", "circleci", "build", "docker", "NUMBER", "sh", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "no", "test", "file", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "no", "test", "file", "PASS", "test", "open", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "profile", "NUMBER", "tmp", "no", "such", "file", "or", "directory", "FAIL", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "NUMBER", "s", "Exited", "with", "code", "NUMBER", "Perhaps", "it", "had", "something", "to", "do", "with", "the", "fact", "that", "I", "was", "already", "test", "my", "branch", "with", "Circle", "CI", "but", "with", "a", "broken", "config", "I", "ve", "now", "remove", "my", "branch", "from", "Circle", "CI", "NUMBER", "fredbi", "Do", "I", "need", "to", "worry", "about", "that", "I", "could", "rebase", "this", "PR", "to", "contain", "one", "commit", "which", "I", "assume", "would", "trigger", "a", "new", "build", "NUMBER", "It", "might", "be", "that", "you", "have", "an", "outdate", "version", "of", "this", "script", "in", "your", "branch", "I", "don", "t", "think", "so", "NUMBER", "My", "branch", "only", "alters", "NUMBER", "file", "vs", "master", "none", "of", "them", "be", "relate", "to", "circle", "CI", "NUMBER", "It", "must", "have", "be", "my", "own", "CI", "configuration", "messing", "things", "up", "NUMBER", "I", "rebased", "my", "commit", "to", "trigger", "another", "build", "and", "this", "seems", "more", "hopeful", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "b", "NUMBER", "abd", "NUMBER", "dbf", "NUMBER", "e", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "fcc", "NUMBER", "c", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "height", "NUMBER", "width", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "b", "NUMBER", "abd", "NUMBER", "d", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "AFAICT", "the", "code", "coverage", "drop", "be", "simply", "because", "some", "of", "the", "generate", "data", "be", "longer", "with", "this", "change", "NUMBER", "thanks", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "ab", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "b", "NUMBER", "bebbf", "NUMBER", "d", "NUMBER", "bd", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "width", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "ab", "NUMBER", "b", "NUMBER", "d", "NUMBER", "aa", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "ab", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "b", "NUMBER", "bebbf", "NUMBER", "d", "NUMBER", "bd", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "ab", "NUMBER", "b", "NUMBER", "c", "NUMBER", "f", "NUMBER", "e", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "ab", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "b", "NUMBER", "bebbf", "NUMBER", "d", "NUMBER", "bd", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "height", "NUMBER", "width", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "ab", "NUMBER", "b", "NUMBER", "b", "NUMBER", "d", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "the", "commit", "list", "seems", "very", "long", "NUMBER", "I", "wonder", "if", "this", "be", "miss", "a", "rebase", "It", "should", "only", "be", "NUMBER", "commit", "no", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "ab", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "b", "NUMBER", "bebbf", "NUMBER", "d", "NUMBER", "bd", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "ab", "NUMBER", "b", "NUMBER", "a", "NUMBER", "b", "NUMBER", "d", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Hi", "there", "I", "also", "stumbled", "across", "this", "issue", "use", "Homebrew", "NUMBER", "bash", "after", "following", "homebrew", "instructions", "and", "freshly", "installing", "go", "swagger", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "I", "had", "problem", "with", "operationGroups", "and", "use", "custom", "template", "NUMBER", "However", "use", "go", "get", "to", "install", "go", "swagger", "instead", "of", "Homebrew", "fix", "the", "issue", "NUMBER", "Not", "sure", "if", "Homebrew", "be", "supposed", "to", "use", "the", "latest", "and", "most", "up", "to", "date", "version", "of", "go", "swagger", "i", "NUMBER", "e", "NUMBER", "I", "don", "t", "know", "if", "it", "has", "your", "recent", "fix", "but", "I", "thought", "I", "d", "bring", "it", "up", "just", "in", "case", "NUMBER", "this", "fix", "came", "in", "after", "the", "NUMBER", "release", "but", "will", "be", "include", "in", "the", "next", "release", "This", "be", "not", "work", "someIds", "type", "array", "example", "NUMBER", "NUMBER", "NUMBER", "default", "NUMBER", "NUMBER", "NUMBER", "items", "type", "number", "getSomeIds", "type", "object", "properties", "someIds", "ref", "definitions", "someIds", "type", "array", "This", "be", "work", "getSomeIds", "type", "object", "properties", "someIds", "type", "array", "example", "NUMBER", "NUMBER", "NUMBER", "default", "NUMBER", "NUMBER", "NUMBER", "items", "type", "number", "Inner", "folded", "definitions", "should", "be", "parsed", "properly", "NUMBER", "I", "m", "not", "sure", "if", "this", "be", "the", "cause", "of", "your", "problem", "but", "you", "can", "t", "have", "anything", "else", "with", "the", "ref", "NUMBER", "someIds", "ref", "definitions", "someIds", "type", "array", "What", "do", "you", "mean", "It", "seems", "it", "s", "allow", "by", "spec", "probably", "json", "spec", "parser", "doesn", "t", "follow", "spec", "rules", "as", "intended", "NUMBER", "LINK", "api", "swagger", "editor", "issue", "NUMBER", "When", "you", "be", "use", "a", "ref", "it", "should", "n", "have", "a", "sibling", "otherwise", "you", "ll", "get", "a", "warning", "it", "s", "weird", "that", "I", "didn", "t", "NUMBER", "That", "s", "because", "when", "there", "be", "a", "ref", "everything", "including", "ref", "itself", "will", "be", "replaced", "with", "the", "result", "of", "what", "that", "ref", "be", "point", "to", "NUMBER", "So", "if", "you", "put", "siblings", "next", "to", "a", "ref", "they", "will", "not", "appear", "because", "resolver", "replaces", "it", "NUMBER", "I", "expect", "that", "this", "isn", "t", "actually", "relate", "to", "your", "problem", "but", "it", "would", "be", "good", "to", "eliminate", "it", "to", "be", "sure", "NUMBER", "can", "you", "define", "not", "work", "a", "little", "bit", "clearer", "It", "s", "not", "generating", "server", "code", "with", "it", "NUMBER", "You", "can", "try", "to", "fold", "refs", "like", "i", "have", "posted", "and", "try", "yourself", "NUMBER", "issue", "can", "be", "pin", "point", "to", "forbidden", "mix", "ref", "sibling", "which", "be", "correctly", "detected", "by", "swagger", "validate", "although", "the", "returned", "error", "message", "do", "not", "state", "clearly", "the", "issue", "complains", "about", "miss", "items", "Yes", "it", "was", "complaining", "about", "miss", "items", "if", "i", "m", "not", "wrong", "and", "my", "memory", "be", "still", "good", "NUMBER", "D", "fix", "NUMBER", "after", "the", "spec", "fix", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "fix", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "ade", "NUMBER", "aa", "NUMBER", "f", "NUMBER", "b", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "NUMBER", "f", "NUMBER", "e", "NUMBER", "fab", "NUMBER", "bbf", "NUMBER", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "wZXJhdGlvbi", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "types", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "R", "NUMBER", "cGVzLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "NUMBER", "and", "NUMBER", "more", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "more", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "ade", "NUMBER", "a", "NUMBER", "de", "NUMBER", "a", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Hello", "Fredbi", "Thanks", "very", "much", "for", "the", "aggregation", "of", "all", "the", "relevant", "issue", "This", "PR", "be", "ready", "but", "I", "d", "be", "happy", "if", "you", "can", "confirm", "that", "it", "resolve", "your", "issue", "before", "we", "merge", "it", "NUMBER", "NUMBER", "be", "not", "relate", "to", "reference", "resolution", "swagger", "flatten", "and", "expand", "work", "as", "expected", "so", "I", "guess", "it", "s", "relate", "to", "a", "minor", "issue", "in", "the", "code", "generation", "path", "NUMBER", "casualjim", "can", "confirm", "NUMBER", "Please", "make", "a", "new", "release", "tag", "with", "that", "fix", "NUMBER", "Currently", "the", "version", "command", "shows", "the", "version", "variable", "that", "be", "set", "on", "compilation", "time", "by", "use", "git", "describe", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "d", "NUMBER", "d", "NUMBER", "acaff", "NUMBER", "e", "NUMBER", "c", "NUMBER", "f", "NUMBER", "d", "NUMBER", "d", "NUMBER", "b", "NUMBER", "b", "NUMBER", "acf", "NUMBER", "a", "NUMBER", "Makefile", "NUMBER", "variables", "L", "NUMBER", "If", "go", "swagger", "version", "be", "managed", "with", "go", "dep", "for", "example", "use", "the", "vendor", "directory", "the", "directory", "won", "t", "be", "a", "git", "repo", "and", "go", "swagger", "will", "always", "show", "dev", "as", "version", "NUMBER", "Thanks", "for", "your", "explanation", "really", "appreciated", "NUMBER", "I", "have", "a", "requirement", "of", "be", "able", "to", "build", "from", "source", "in", "a", "reliable", "and", "predictable", "way", "so", "use", "dep", "helps", "because", "I", "can", "pin", "commit", "on", "go", "swagger", "dependencies", "that", "be", "currently", "floating", "so", "if", "you", "build", "go", "swagger", "NUMBER", "now", "you", "won", "t", "get", "the", "same", "binary", "features", "than", "when", "it", "was", "release", "NUMBER", "I", "downloaded", "the", "binary", "version", "of", "NUMBER", "and", "the", "git", "commit", "report", "doesn", "t", "match", "the", "commit", "tag", "as", "NUMBER", "plus", "the", "floating", "dependencies", "I", "can", "t", "use", "it", "because", "when", "we", "hit", "an", "issue", "we", "don", "t", "really", "know", "what", "s", "going", "on", "NUMBER", "For", "example", "build", "NUMBER", "recently", "out", "spec", "didn", "t", "work", "anymore", "because", "of", "this", "LINK", "openapi", "spec", "commit", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "f", "NUMBER", "ce", "NUMBER", "e", "NUMBER", "fefff", "NUMBER", "ea", "NUMBER", "bd", "NUMBER", "dd", "NUMBER", "So", "we", "really", "need", "to", "use", "dep", "to", "pin", "the", "version", "of", "the", "dependencies", "NUMBER", "I", "think", "be", "reasonable", "to", "expect", "the", "version", "command", "to", "behave", "correctly", "when", "build", "from", "source", "even", "if", "there", "s", "no", "git", "information", "available", "NUMBER", "I", "understand", "it", "s", "not", "a", "priority", "for", "the", "project", "right", "now", "but", "I", "d", "love", "if", "you", "considered", "including", "it", "in", "your", "roadmap", "NUMBER", "that", "particular", "issue", "be", "fix", "now", "Problem", "statement", "Given", "this", "spec", "swagger", "NUMBER", "consumes", "application", "json", "produces", "application", "json", "info", "title", "Test", "version", "NUMBER", "securityDefinitions", "keystone", "type", "apiKey", "in", "header", "name", "x", "auth", "token", "security", "keystone", "paths", "info", "get", "security", "responses", "NUMBER", "description", "OK", "schema", "type", "string", "The", "embedded", "spec", "in", "the", "generate", "server", "be", "miss", "the", "security", "entry", "in", "the", "operation", "NUMBER", "This", "be", "semantically", "different", "from", "the", "original", "spec", "where", "the", "global", "security", "setting", "be", "explicitly", "overridden", "to", "be", "empty", "no", "authentication", "for", "this", "operation", "required", "NUMBER", "The", "problem", "be", "cause", "by", "an", "omitempty", "struct", "tag", "LINK", "openapi", "spec", "blob", "a", "NUMBER", "fa", "NUMBER", "c", "NUMBER", "aa", "NUMBER", "b", "NUMBER", "fc", "NUMBER", "e", "NUMBER", "eb", "NUMBER", "d", "NUMBER", "bb", "NUMBER", "operation", "NUMBER", "go", "L", "NUMBER", "NUMBER", "I", "ll", "open", "a", "PR", "there", "to", "fix", "this", "issue", "NUMBER", "Steps", "to", "reproduce", "swagger", "generate", "server", "name", "test", "target", "test", "swagger", "NUMBER", "yaml", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Darwin", "databus", "NUMBER", "Is", "there", "a", "possibility", "that", "this", "will", "cause", "the", "security", "to", "appear", "on", "specs", "that", "don", "t", "currently", "have", "anything", "there", "change", "their", "semantics", "no", "what", "will", "appear", "there", "be", "security", "null", "which", "be", "semantically", "the", "same", "as", "before", "NUMBER", "this", "change", "cause", "an", "error", "in", "spec", "generator", "it", "generates", "spec", "with", "security", "null", "databus", "NUMBER", "please", "reconsider", "your", "approach", "to", "fix", "server", "generator", "instead", "of", "fix", "spec", "NUMBER", "I", "can", "t", "fix", "spec", "generator", "to", "generate", "json", "file", "without", "security", "null", "gaplyk", "That", "s", "expected", "according", "to", "databus", "NUMBER", "s", "post", "that", "it", "s", "semantically", "the", "same", "as", "before", "NUMBER", "Can", "you", "provide", "information", "on", "why", "that", "s", "an", "error", "for", "you", "gaplyk", "Can", "you", "elaborate", "a", "bit", "on", "what", "the", "problem", "be", "what", "be", "the", "problem", "with", "security", "null", "in", "the", "spec", "generator", "I", "m", "not", "sure", "what", "other", "ways", "be", "they", "to", "fix", "this", "NUMBER", "Leaving", "the", "omitempty", "tag", "annotation", "in", "go", "openapi", "spec", "do", "not", "seem", "right", "to", "me", "as", "it", "causes", "loss", "of", "information", "when", "serializing", "a", "spec", "NUMBER", "SwaggerSpec", "struct", "to", "JSON", "NUMBER", "He", "s", "saying", "that", "security", "null", "be", "semantically", "the", "same", "as", "omitempty", "but", "different", "than", "security", "NUMBER", "The", "problem", "with", "omitempty", "be", "that", "it", "not", "only", "remove", "nil", "values", "from", "the", "resulting", "JSON", "but", "empty", "slices", "as", "well", "NUMBER", "When", "you", "load", "the", "serialised", "JSON", "again", "you", "have", "no", "way", "of", "knowing", "if", "the", "original", "spec", "contained", "for", "security", "or", "the", "field", "was", "not", "set", "nil", "NUMBER", "So", "with", "omitempty", "for", "the", "operations", "Security", "field", "you", "loose", "the", "information", "that", "authentication", "was", "explicitly", "disabled", "by", "setting", "it", "to", "the", "empty", "array", "overridding", "the", "global", "security", "settings", "NUMBER", "casualjim", "I", "can", "t", "agree", "NUMBER", "nil", "and", "be", "not", "the", "same", "in", "go", "NUMBER", "The", "first", "one", "be", "an", "uninitialised", "slice", "and", "the", "the", "other", "a", "slice", "of", "length", "NUMBER", "If", "you", "remove", "the", "omitempty", "annotation", "in", "your", "example", "you", "see", "the", "difference", "nil", "value", "arr", "null", "empty", "value", "arr", "So", "the", "problem", "here", "really", "be", "omitempty", "which", "treats", "them", "equally", "but", "they", "be", "not", "and", "they", "happen", "to", "mean", "different", "things", "for", "this", "specific", "field", "in", "a", "Swagger", "spec", "NUMBER", "They", "can", "indeed", "be", "distinguished", "without", "the", "omitempty", "LINK", "dgV", "so", "do", "we", "need", "to", "rewrite", "json", "NUMBER", "Marshal", "then", "the", "problem", "be", "when", "you", "generate", "spec", "from", "the", "code", "and", "you", "don", "t", "have", "security", "on", "the", "endpoint", "level", "you", "be", "get", "security", "null", "NUMBER", "this", "be", "a", "problem", "of", "json", "NUMBER", "Marshal", "then", "or", "we", "have", "to", "create", "custom", "Marshaller", "for", "this", "type", "NUMBER", "And", "when", "you", "try", "to", "validate", "spec", "you", "get", "paths", "NUMBER", "TAG", "NUMBER", "post", "NUMBER", "security", "in", "body", "must", "be", "of", "type", "array", "null", "I", "played", "a", "bit", "with", "a", "custom", "marshalling", "function", "to", "achieve", "the", "following", "two", "properties", "keep", "empty", "slices", "in", "the", "resulting", "JSON", "omit", "the", "key", "when", "the", "slice", "be", "unset", "nil", "This", "be", "what", "I", "came", "up", "with", "func", "op", "OperationProps", "MarshalJSON", "byte", "error", "type", "Alias", "OperationProps", "if", "op", "NUMBER", "Security", "nil", "return", "json", "NUMBER", "Marshal", "struct", "Security", "map", "string", "string", "json", "security", "omitempty", "Alias", "Security", "op", "NUMBER", "Security", "Alias", "Alias", "op", "return", "json", "NUMBER", "Marshal", "struct", "Security", "map", "string", "string", "json", "security", "Alias", "Security", "op", "NUMBER", "Security", "Alias", "Alias", "op", "Its", "a", "little", "convoluted", "and", "I", "m", "up", "for", "suggestions", "how", "to", "achieve", "the", "desired", "outcome", "more", "elegantly", "NUMBER", "Note", "The", "solution", "be", "based", "on", "this", "blog", "post", "LINK", "json", "marshalling", "Heh", "yep", "NUMBER", "Bit", "me", "too", "I", "hacked", "this", "in", "for", "each", "of", "my", "paths", "methods", "NUMBER", "go", "Security", "map", "string", "string", "map", "string", "string", "myAPIKey", "emptyslice", "I", "submitted", "LINK", "openapi", "spec", "pull", "NUMBER", "to", "address", "the", "discussed", "regression", "Problem", "statement", "The", "client", "parameter", "generate", "method", "WriteToRequest", "find", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "client", "parameter", "NUMBER", "gotmpl", "L", "NUMBER", "seems", "to", "incorrectly", "omit", "the", "SetBodyParam", "when", "a", "parameter", "be", "defined", "as", "in", "body", "and", "schema", "NUMBER", "type", "array", "NUMBER", "Swagger", "specification", "swagger", "NUMBER", "info", "title", "GoSwaggerClientBodyParameterBug", "version", "NUMBER", "paths", "foo", "post", "consumes", "application", "json", "parameters", "name", "arrayBody", "in", "body", "description", "an", "array", "of", "json", "objects", "required", "true", "schema", "type", "array", "items", "properties", "bar", "type", "string", "responses", "NUMBER", "description", "OK", "NUMBER", "description", "Bad", "Request", "Steps", "to", "reproduce", "NUMBER", "use", "the", "swagger", "spec", "describe", "above", "to", "generate", "the", "client", "code", "NUMBER", "note", "how", "the", "client", "operations", "post_foo_parameters", "NUMBER", "go", "PostFooParams", "NUMBER", "WriteToRequest", "be", "miss", "the", "call", "to", "r", "NUMBER", "SetBodyParam", "o", "NUMBER", "ArrayBody", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "macOS", "NUMBER", "It", "definitely", "do", "not", "work", "with", "current", "master", "if", "body", "schema", "be", "type", "string", "and", "format", "byte", "NUMBER", "Generated", "client", "code", "be", "miss", "r", "NUMBER", "SetBodyParam", "NUMBER", "NUMBER", "Didn", "t", "check", "op", "s", "case", "with", "array", "NUMBER", "I", "be", "able", "to", "reproduce", "this", "issue", "with", "the", "current", "master", "in", "my", "test", "I", "use", "an", "array", "of", "objects", "NUMBER", "Edit", "Looking", "further", "into", "this", "NUMBER", "was", "supposed", "to", "be", "a", "fix", "for", "arrays", "of", "objects", "NUMBER", "To", "make", "my", "case", "more", "specific", "I", "use", "an", "array", "of", "definitions", "yaml", "parameters", "name", "flex", "in", "body", "required", "true", "schema", "type", "array", "items", "ref", "definitions", "SetFlex", "SetFlex", "type", "object", "properties", "set", "type", "boolean", "description", "To", "NUMBER", "Extended", "template", "unit", "test", "to", "validate", "environments", "from", "standard", "template", "miss", "codeGenApp", "context", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "adf", "NUMBER", "c", "NUMBER", "ccba", "NUMBER", "b", "NUMBER", "bb", "NUMBER", "a", "NUMBER", "bddfe", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvb", "NUMBER", "BlcmF", "NUMBER", "aW", "NUMBER", "uLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvY", "NUMBER", "xpZW", "NUMBER", "Lmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VwcG", "NUMBER", "ydC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "wZXJhdGlvbi", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VydmVyLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "diff", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "adf", "NUMBER", "dfe", "NUMBER", "a", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "I", "be", "lost", "with", "AppVeyor", "report", "NUMBER", "There", "be", "no", "indication", "of", "what", "has", "gone", "wrong", "for", "this", "bot", "NUMBER", "On", "my", "side", "all", "test", "be", "passing", "NUMBER", "Any", "hint", "Well", "ok", "NUMBER", "I", "be", "willing", "to", "abide", "by", "these", "ever", "stricter", "rules", "NUMBER", "Any", "indication", "as", "for", "where", "this", "occur", "This", "branch", "has", "not", "change", "much", "code", "so", "I", "be", "lost", "NUMBER", "I", "could", "see", "this", "AppVeyor", "CI", "deployed", "on", "windows", "NUMBER", "I", "be", "just", "wondering", "if", "it", "s", "connected", "to", "my", "change", "in", "this", "particular", "PR", "or", "it", "s", "just", "because", "you", "did", "set", "up", "AppVeyor", "just", "recently", "and", "swagger", "be", "croaking", "a", "lot", "on", "stderr", "No", "logging", "has", "be", "explicitely", "add", "in", "this", "branch", "NUMBER", "However", "I", "think", "I", "get", "your", "point", "since", "I", "call", "some", "high", "level", "methods", "in", "the", "new", "unit", "test", "this", "probably", "croaks", "on", "stderr", "NUMBER", "I", "ll", "work", "on", "that", "hypothesis", "to", "get", "it", "right", "NUMBER", "casualjim", "NUMBER", "Just", "to", "make", "sure", "I", "be", "not", "spending", "time", "in", "the", "wrong", "direction", "NUMBER", "If", "I", "fix", "the", "CI", "issue", "you", "re", "okay", "with", "the", "feature", "if", "not", "no", "problem", "I", "ll", "just", "keep", "it", "on", "my", "fork", "since", "I", "do", "need", "it", "just", "simpler", "for", "me", "to", "avoid", "branch", "Thanks", "Ivan", "NUMBER", "This", "be", "exactly", "how", "I", "did", "it", "NUMBER", "I", "had", "to", "fix", "precisely", "this", "other", "unit", "test", "which", "had", "a", "side", "effect", "by", "switching", "log", "back", "to", "Stderr", "after", "muting", "it", "NUMBER", "Besides", "the", "Execute", "method", "I", "be", "test", "had", "an", "end", "message", "with", "fmt", "NUMBER", "Fprintf", "Stderr", "NUMBER", "NUMBER", "Had", "to", "fix", "that", "too", "NUMBER", "Ok", "NUMBER", "So", "when", "I", "run", "the", "full", "test", "on", "generator", "pkg", "stderr", "be", "empty", "NUMBER", "There", "must", "be", "a", "catch", "NUMBER", "master", "should", "be", "repaired", "now", "sorry", "about", "that", "NUMBER", "Improve", "error", "handle", "while", "generating", "template", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "b", "NUMBER", "bda", "NUMBER", "dfc", "NUMBER", "fdd", "NUMBER", "e", "NUMBER", "bc", "NUMBER", "dbb", "NUMBER", "cefc", "NUMBER", "c", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "height", "NUMBER", "width", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "cmd", "swagger", "commands", "generate", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VwcG", "NUMBER", "ydC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "cmd", "swagger", "commands", "generate", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvb", "NUMBER", "BlcmF", "NUMBER", "aW", "NUMBER", "uLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "cmd", "swagger", "commands", "generate", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvY", "NUMBER", "xpZW", "NUMBER", "Lmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "wZXJhdGlvbi", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VydmVyLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "NUMBER", "and", "NUMBER", "more", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "more", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "b", "NUMBER", "bda", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "casualjim", "so", "let", "s", "recap", "your", "review", "NUMBER", "comment", "out", "the", "defer", "in", "main", "since", "we", "expect", "stacks", "on", "panic", "NUMBER", "I", "hope", "in", "the", "future", "panic", "would", "be", "better", "handle", "NUMBER", "Possible", "alternative", "baseImport", "returns", "error", "more", "change", "NUMBER", "more", "idiomatic", "go", "with", "error", "printing", "e", "NUMBER", "g", "v", "err", "instead", "of", "s", "err", "NUMBER", "Error", "NUMBER", "replace", "fmt", "NUMBER", "Print", "with", "log", "NUMBER", "Printf", "NUMBER", "operation_test", "NUMBER", "go", "more", "idiomatic", "string", "joining", "I", "didn", "t", "write", "this", "code", "but", "ok", "to", "fix", "it", "NUMBER", "Your", "opinion", "on", "the", "criticality", "of", "SpecPath", "and", "TargetPath", "in", "my", "view", "it", "s", "okay", "and", "not", "much", "change", "with", "master", "to", "return", "blank", "string", "on", "error", "just", "more", "explicit", "Okay", "with", "that", "Cheers", "Fred", "There", "be", "still", "annoying", "behaviors", "on", "Windows", "NUMBER", "I", "install", "everything", "on", "Windos", "and", "trying", "to", "fix", "things", "up", "on", "this", "os", "NUMBER", "Should", "be", "fine", "on", "windows", "now", "NUMBER", "Unit", "test", "suite", "culprit", "TestBaseImport", "did", "block", "when", "not", "run", "as", "admin", "NUMBER", "Fixed", "that", "by", "skipping", "test", "if", "OS", "do", "not", "enable", "symlink", "for", "the", "current", "user", "NUMBER", "Thanks", "Ivan", "for", "the", "cheer", "up", "NUMBER", "Difficult", "to", "get", "around", "codecov", "patch", "since", "this", "PR", "specialized", "on", "error", "handle", "and", "that", "few", "unit", "test", "did", "dig", "into", "all", "error", "causes", "NUMBER", "Mostly", "codecov", "patch", "complains", "about", "untested", "deltas", "resulting", "from", "mere", "gofmt", "or", "log", "message", "NUMBER", "Untested", "they", "were", "untested", "they", "remain", "for", "now", "NUMBER", "Anyhow", "I", "tried", "hard", "to", "improve", "test", "coverage", "btw", "codecov", "result", "be", "disappointing", "I", "get", "a", "better", "impression", "on", "my", "go", "tool", "cover", "stats", "NUMBER", "NUMBER", "_En", "passant_", "fix", "a", "small", "bug", "loading", "custom", "template", "file", "not", "assets", "new", "ones", "from", "TargetTemplate", "and", "not", "NUMBER", "NUMBER", "Next", "contribution", "will", "be", "I", "think", "a", "small", "tutorial", "about", "playing", "with", "template", "NUMBER", "Was", "the", "NUMBER", "version", "actually", "release", "I", "can", "see", "a", "new", "tag", "and", "the", "change", "log", "for", "it", "commit", "but", "the", "LINK", "swagger", "go", "swagger", "release", "latest", "still", "points", "to", "NUMBER", "and", "LINK", "swagger", "go", "swagger", "release", "download", "NUMBER", "swagger", "returns", "NUMBER", "Looks", "like", "NUMBER", "was", "actually", "release", "in", "the", "end", "NUMBER", "Closing", "NUMBER", "Problem", "statement", "Hi", "I", "ve", "write", "a", "simple", "example", "swagger", "meta", "package", "main", "import", "github", "NUMBER", "com", "gin", "gonic", "gin", "swagger", "model", "type", "Book", "struct", "required", "true", "Id", "int", "json", "id", "required", "true", "Author", "string", "json", "author", "swagger", "response", "customResponse", "type", "CustomResponse", "struct", "in", "body", "Body", "Book", "json", "body", "omitempty", "func", "main", "r", "gin", "NUMBER", "Default", "r", "NUMBER", "GET", "book", "GetBooks", "r", "NUMBER", "Run", "NUMBER", "func", "GetBooks", "c", "gin", "NUMBER", "Context", "swagger", "route", "GET", "book", "listBooks", "Consumes", "application", "json", "Produces", "application", "json", "Schemes", "http", "https", "ws", "wss", "Responses", "NUMBER", "customResponse", "c", "NUMBER", "JSON", "NUMBER", "Book", "Id", "NUMBER", "Author", "John", "Doe", "but", "I", "ve", "get", "an", "error", "when", "I", "ve", "tried", "to", "generate", "specification", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "b", "NUMBER", "with", "next", "message", "unable", "to", "determine", "package", "for", "GOPATH", "main", "NUMBER", "go", "If", "main", "NUMBER", "go", "be", "in", "GOPATH", "src", "error", "be", "the", "same", "Problem", "statement", "go", "swagger", "error", "out", "on", "a", "nullable", "fied", "in", "a", "definition", "definitions", "AddLabel", "description", "Adds", "a", "label", "to", "a", "manifest", "properties", "media_type", "description", "The", "media", "type", "for", "this", "label", "enum", "text", "plain", "application", "json", "null", "type", "string", "null", "The", "not", "obvious", "at", "all", "error", "be", "template", "schemavalidator", "NUMBER", "NUMBER", "executing", "schemavalidator", "at", "TAG", "wrong", "type", "for", "value", "expected", "I", "m", "not", "well", "versed", "into", "swagger", "a", "quick", "glance", "at", "the", "NUMBER", "spec", "tells", "me", "it", "may", "not", "be", "a", "valid", "swagger", "document", "but", "I", "gathered", "I", "may", "as", "well", "file", "an", "issue", "just", "in", "case", "NUMBER", "Swagger", "specification", "Not", "sure", "LINK", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Download", "swagger", "definition", "at", "LINK", "NUMBER", "Try", "go", "generate", "client", "library", "with", "swagger", "generate", "client", "f", "api", "NUMBER", "json", "A", "client", "c", "quay", "a", "quay", "NUMBER", "This", "error", "out", "with", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "model", "AddLabel", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "AddLabel", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "add_label", "NUMBER", "go", "in", "models", "as", "definition", "template", "schemavalidator", "NUMBER", "NUMBER", "executing", "schemavalidator", "at", "TAG", "wrong", "type", "for", "value", "expected", "string", "get", "interface", "Environment", "swagger", "version", "dev", "master", "b", "NUMBER", "bda", "NUMBER", "dfc", "NUMBER", "fdd", "NUMBER", "e", "NUMBER", "bc", "NUMBER", "dbb", "NUMBER", "cefc", "NUMBER", "c", "NUMBER", "as", "of", "today", "go", "version", "NUMBER", "OS", "Linux", "All", "properties", "be", "optional", "unless", "you", "list", "them", "in", "the", "required", "section", "NUMBER", "As", "such", "you", "don", "t", "have", "to", "do", "anything", "with", "null", "there", "to", "make", "it", "so", "NUMBER", "Thanks", "for", "the", "quick", "answers", "NUMBER", "Based", "on", "that", "I", "think", "we", "can", "close", "this", "issue", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "c", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "dc", "NUMBER", "f", "NUMBER", "ba", "NUMBER", "c", "NUMBER", "ff", "NUMBER", "abaad", "NUMBER", "d", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "src", "pr", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "c", "NUMBER", "ee", "NUMBER", "a", "NUMBER", "e", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "Server", "generation", "NUMBER", "When", "response", "schema", "be", "specified", "by", "ref", "which", "defines", "an", "array", "structure", "the", "generate", "model", "be", "not", "correct", "and", "do", "not", "compile", "with", "a", "cannot", "make", "type", "error", "NUMBER", "Namely", "the", "initialization", "of", "the", "structure", "Schema", "NUMBER", "Zero", "initialization", "method", "do", "not", "reflect", "the", "generate", "nature", "of", "the", "type", "NUMBER", "generate", "type", "with", "ref", "uses", "an", "OAI", "type", "alias", "and", "a", "struct", "type", "xxx", "struct", "OAIxxx", "generate", "OAI", "alias", "type", "OAIxxx", "string", "When", "no", "ref", "be", "use", "e", "NUMBER", "g", "NUMBER", "array", "declared", "inline", "in", "the", "definitions", "of", "the", "swagger", "file", "there", "be", "no", "OAI", "alias", "type", "and", "compilation", "proceeds", "normally", "NUMBER", "When", "the", "type", "be", "an", "object", "and", "not", "an", "array", "the", "generator", "recognize", "this", "type", "as", "a", "complex", "type", "and", "do", "not", "attempt", "to", "use", "the", "make", "build", "in", "to", "initialize", "it", "NUMBER", "The", "problem", "really", "here", "be", "to", "assimilate", "type", "X", "and", "type", "Y", "struct", "X", "which", "the", "compiler", "do", "not", "accept", "NUMBER", "One", "would", "expect", "the", "code", "generate", "with", "ref", "to", "be", "identical", "to", "the", "one", "with", "inline", "schema", "NUMBER", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "swagger", "specification", "YAML", "test", "NUMBER", "ter", "swagger", "NUMBER", "yaml", "NUMBER", "txt", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "test", "NUMBER", "ter", "swagger", "NUMBER", "yaml", "NUMBER", "txt", "JSON", "schema", "referred", "to", "test", "NUMBER", "ter", "model", "schema", "NUMBER", "json", "NUMBER", "txt", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "test", "NUMBER", "ter", "model", "schema", "NUMBER", "json", "NUMBER", "txt", "swagger", "generate", "server", "f", "NUMBER", "NUMBER", "models", "test", "NUMBER", "ter", "swagger", "NUMBER", "yaml", "Move", "to", "cmd", "server", "directory", "then", "go", "build", "NUMBER", "restapi", "operations", "NUMBER", "NUMBER", "restapi", "operations", "get_all_responses", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "make", "type", "models", "NUMBER", "B", "Environment", "swagger", "version", "build", "from", "source", "origin", "master", "git", "describe", "NUMBER", "NUMBER", "g", "NUMBER", "e", "NUMBER", "bb", "go", "version", "NUMBER", "OS", "linux", "ubuntu", "NUMBER", "In", "my", "opinion", "all", "these", "problem", "with", "ref", "NUMBER", "NUMBER", "NUMBER", "be", "linked", "to", "a", "fundamental", "defect", "in", "the", "resolution", "of", "references", "namely", "the", "design", "choice", "to", "flatten", "things", "probably", "for", "easier", "caching", "NUMBER", "Ok", "I", "get", "it", "if", "I", "flatten", "everything", "with", "no", "ref", "I", "ll", "get", "it", "allright", "NUMBER", "But", "this", "would", "defeat", "the", "purpose", "of", "SWAGGER", "spec", "ref", "feature", "that", "be", "allowing", "for", "heavy", "reuse", "of", "the", "underlying", "data", "model", "as", "message", "definitions", "for", "the", "interface", "NUMBER", "Thank", "you", "Ivan", "for", "your", "reply", "NUMBER", "Agree", "with", "your", "definitions", "of", "the", "use", "cases", "NUMBER", "Agree", "too", "that", "flattening", "should", "theoretically", "make", "no", "difference", "unless", "we", "get", "type", "naming", "conflict", "in", "the", "definition", "tree", "which", "might", "occur", "but", "let", "s", "put", "that", "aside", "NUMBER", "NUMBER", "My", "opinion", "above", "was", "support", "by", "my", "investigations", "of", "the", "various", "ref", "issue", "find", "yesterday", "in", "particular", "the", "way", "the", "modifiyRef", "works", "NUMBER", "I", "may", "have", "misinterpreted", "its", "inner", "workings", "as", "I", "be", "not", "yet", "familiar", "with", "the", "code", "base", "NUMBER", "In", "the", "report", "case", "xxx", "has", "no", "key", "NUMBER", "the", "generator", "desperately", "try", "to", "find", "the", "key", "at", "the", "root", "of", "definitions", "whereas", "it", "has", "be", "already", "be", "defined", "deeper", "by", "the", "ref", "NUMBER", "I", "inferred", "perhaps", "mistakenly", "that", "the", "flattening", "was", "the", "problem", "NUMBER", "The", "problem", "be", "with", "the", "id", "field", "which", "openapi", "NUMBER", "doesn", "t", "support", "NUMBER", "see", "here", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "schemaObject", "the", "support", "properties", "be", "the", "ones", "defined", "in", "that", "list", "Oh", "the", "issue", "be", "not", "with", "the", "id", "The", "problem", "be", "the", "code", "generate", "has", "this", "line", "payload", "make", "models", "NUMBER", "B", "NUMBER", "NUMBER", "in", "get_all_responses", "NUMBER", "go", "B", "be", "defined", "as", "go", "B", "b", "swagger", "model", "b", "type", "B", "struct", "BOAIGen", "and", "BOAIGen", "be", "defined", "as", "go", "BOAIGen", "b", "OAI", "gen", "swagger", "model", "bOAIGen", "type", "BOAIGen", "string", "So", "I", "be", "guessing", "the", "code", "generator", "be", "embedding", "the", "BOAIGen", "when", "it", "shouldn", "t", "NUMBER", "In", "other", "words", "manually", "change", "the", "generate", "code", "in", "get_all_responses", "NUMBER", "go", "to", "go", "payload", "models", "NUMBER", "B", "BOAIGen", "make", "models", "NUMBER", "BOAIGen", "NUMBER", "NUMBER", "resolve", "the", "issue", "and", "the", "server", "starts", "properly", "For", "id", "I", "will", "let", "casualjim", "answer", "that", "but", "in", "general", "id", "be", "almost", "already", "support", "LINK", "openapi", "spec", "blob", "master", "expander", "NUMBER", "go", "L", "NUMBER", "The", "only", "case", "where", "id", "be", "not", "support", "be", "when", "a", "ref", "be", "point", "to", "a", "subschema", "that", "doesn", "t", "have", "an", "id", "but", "inherits", "its", "id", "from", "a", "parent", "schema", "subschema", "NUMBER", "To", "support", "this", "case", "any", "ref", "should", "not", "only", "get", "resolve", "but", "the", "whole", "file", "point", "to", "by", "the", "ref", "should", "get", "analyzed", "to", "identify", "the", "id", "of", "the", "particular", "subschema", "the", "ref", "be", "point", "to", "NUMBER", "Problem", "statement", "Server", "generation", "fail", "when", "referring", "to", "cascading", "ref", "in", "different", "schema", "file", "NUMBER", "Reference", "base", "path", "be", "wrongly", "formed", "NUMBER", "swagger", "generate", "server", "f", "NUMBER", "NUMBER", "models", "test", "NUMBER", "swagger", "NUMBER", "yaml", "The", "swagger", "spec", "at", "NUMBER", "NUMBER", "models", "test", "NUMBER", "swagger", "NUMBER", "yaml", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "open", "NUMBER", "test", "NUMBER", "schema", "NUMBER", "json", "test", "NUMBER", "bis", "schema", "NUMBER", "json", "no", "such", "file", "or", "directory", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "Swagger", "YAML", "file", "ref", "to", "JSON", "file", "NUMBER", "test", "NUMBER", "swagger", "NUMBER", "yaml", "NUMBER", "txt", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "test", "NUMBER", "swagger", "NUMBER", "yaml", "NUMBER", "txt", "JSON", "schema", "file", "NUMBER", "ref", "to", "JSON", "file", "NUMBER", "test", "NUMBER", "schema", "NUMBER", "json", "NUMBER", "txt", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "test", "NUMBER", "schema", "NUMBER", "json", "NUMBER", "txt", "JSON", "schema", "file", "NUMBER", "test", "NUMBER", "bis", "schema", "NUMBER", "json", "NUMBER", "txt", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "test", "NUMBER", "bis", "schema", "NUMBER", "json", "NUMBER", "txt", "Environment", "swagger", "version", "build", "from", "source", "cloned", "from", "origin", "master", "git", "describe", "NUMBER", "NUMBER", "g", "NUMBER", "e", "NUMBER", "bb", "go", "version", "NUMBER", "OS", "linux", "ubuntu", "NUMBER", "Reference", "path", "resolution", "be", "altered", "by", "github", "NUMBER", "com", "go", "openapi", "spec", "refmodifier", "NUMBER", "go", "in", "func", "modifyRefs", "target", "Schema", "basePath", "string", "if", "target", "NUMBER", "Ref", "NUMBER", "String", "if", "target", "NUMBER", "Ref", "NUMBER", "RemoteURI", "basePath", "return", "newURL", "fmt", "NUMBER", "Sprintf", "s", "s", "basePath", "target", "NUMBER", "Ref", "NUMBER", "String", "target", "NUMBER", "Ref", "_", "NewRef", "newURL", "NUMBER", "It", "seems", "that", "the", "basePath", "be", "not", "keep", "up", "to", "date", "when", "recursing", "through", "a", "tree", "of", "ref", "NUMBER", "You", "be", "right", "NUMBER", "Error", "message", "be", "so", "terse", "NUMBER", "I", "fix", "and", "run", "again", "all", "my", "test", "cases", "NUMBER", "If", "correct", "this", "issue", "should", "revert", "to", "a", "minor", "lack", "of", "spec", "validation", "information", "NUMBER", "I", "ll", "tell", "you", "in", "a", "moment", "Arg", "NUMBER", "I", "be", "test", "with", "the", "PR", "ongoing", "for", "go", "openapi", "spec", "referring", "to", "NUMBER", "NUMBER", "With", "this", "code", "the", "initial", "error", "message", "disappears", "but", "still", "the", "generate", "model", "do", "not", "compile", "NUMBER", "I", "fix", "the", "definition", "with", "the", "with", "no", "significant", "change", "in", "this", "context", "NUMBER", "I", "ll", "try", "with", "the", "original", "spec", "from", "master", "NUMBER", "Ok", "rolled", "back", "to", "master", "spec", "pkg", "NUMBER", "I", "checked", "everywhere", "for", "similar", "faulty", "syntax", "i", "NUMBER", "e", "instead", "of", "NUMBER", "Behaviour", "revert", "to", "what", "was", "originally", "posted", "NUMBER", "Updated", "test", "case", "to", "remove", "syntax", "problem", "NUMBER", "I", "believe", "it", "s", "innocuous", "anyhow", "in", "this", "case", "since", "paths", "be", "cleaned", "from", "trail", "slash", "and", "relative", "slash", "rebased", "with", "a", "slash", "I", "mean", "x", "definitions", "TAG", "x", "definitions", "TAG", "x", "definitions", "NUMBER", "But", "I", "be", "not", "going", "to", "debate", "such", "schema", "compliance", "issue", "here", "I", "admit", "it", "s", "a", "bit", "far", "fetched", "and", "error", "prone", "NUMBER", "So", "now", "the", "testcase", "focuses", "on", "the", "proper", "issue", "that", "be", "cascading", "ref", "NUMBER", "Here", "s", "a", "minimal", "example", "of", "a", "parameter", "that", "takes", "in", "array", "of", "objects", "swagger", "NUMBER", "info", "title", "Test", "version", "NUMBER", "paths", "test", "post", "parameters", "name", "test", "in", "body", "schema", "type", "array", "items", "type", "object", "responses", "NUMBER", "description", "success", "This", "generates", "the", "following", "segment", "in", "the", "restapi", "operations", "dir", "var", "body", "interface", "NUMBER", "for", "_", "io", "range", "body", "if", "err", "io", "NUMBER", "Validate", "route", "NUMBER", "Formats", "err", "nil", "res", "append", "res", "err", "break", "if", "len", "res", "NUMBER", "o", "NUMBER", "Test", "body", "This", "causes", "a", "compile", "error", "because", "io", "NUMBER", "Validate", "be", "not", "valid", "on", "interface", "NUMBER", "I", "think", "we", "should", "be", "checking", "for", "NUMBER", "Child", "NUMBER", "IsInterface", "instead", "of", "NUMBER", "Schema", "NUMBER", "IsInterface", "NUMBER", "Given", "that", "NUMBER", "IsArray", "be", "already", "true", "I", "m", "not", "sure", "if", "NUMBER", "Schema", "NUMBER", "IsInterface", "be", "the", "right", "check", "NUMBER", "Please", "correct", "me", "if", "I", "misinterpreted", "this", "section", "NUMBER", "My", "expectation", "be", "that", "in", "the", "case", "of", "Items", "interface", "the", "for", "loop", "should", "not", "be", "generate", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "c", "NUMBER", "d", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "d", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "d", "NUMBER", "e", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Will", "do", "NUMBER", "Checked", "in", "the", "generate", "bindata", "NUMBER", "go", "Hello", "With", "help", "of", "casualjim", "on", "Slack", "I", "managed", "to", "set", "up", "Swagger", "in", "my", "Go", "project", "s", "NUMBER", "Although", "I", "do", "prefer", "the", "way", "of", "setting", "it", "up", "in", "SpringBoot", "which", "be", "what", "I", "was", "use", "to", "before", "moving", "to", "Go", "I", "can", "see", "why", "it", "needs", "to", "be", "this", "way", "in", "Go", "NUMBER", "The", "UI", "that", "I", "was", "use", "to", "and", "I", "prefer", "due", "to", "cleanliness", "be", "THIS", "LINK", "one", "NUMBER", "The", "UI", "that", "I", "get", "when", "serving", "the", "swagger", "NUMBER", "json", "file", "be", "the", "Petstore", "LINK", "NUMBER", "Is", "there", "any", "way", "to", "get", "the", "other", "UI", "I", "don", "t", "know", "how", "to", "refer", "to", "it", "as", "both", "be", "SwaggerUI", "to", "me", "NUMBER", "I", "get", "this", "image", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "c", "NUMBER", "e", "c", "NUMBER", "c", "NUMBER", "e", "NUMBER", "NUMBER", "f", "NUMBER", "a", "NUMBER", "eb", "NUMBER", "f", "NUMBER", "png", "Those", "be", "not", "my", "apis", "NUMBER", "I", "hope", "I", "was", "clear", "enough", "I", "want", "to", "have", "the", "same", "UI", "as", "on", "api", "NUMBER", "subledger", "NUMBER", "com", "and", "not", "like", "on", "petstore", "NUMBER", "This", "be", "the", "command", "I", "use", "image", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "c", "NUMBER", "c", "NUMBER", "e", "NUMBER", "NUMBER", "f", "NUMBER", "NUMBER", "ba", "NUMBER", "ee", "NUMBER", "png", "The", "one", "I", "wanted", "be", "Swagger", "UI", "v", "NUMBER", "and", "the", "one", "include", "with", "go", "swagger", "be", "Swagger", "UI", "v", "NUMBER", "Fixes", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "f", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "b", "NUMBER", "dff", "NUMBER", "ebeaa", "NUMBER", "d", "NUMBER", "ecdaa", "NUMBER", "dd", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "f", "NUMBER", "a", "NUMBER", "c", "NUMBER", "c", "NUMBER", "b", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Done", "NUMBER", "not", "sure", "why", "so", "much", "change", "in", "the", "generate", "bindata", "though", "NUMBER", "Problem", "statement", "When", "generating", "a", "server", "from", "a", "simple", "swagger", "file", "the", "reverse", "way", "of", "generating", "the", "spec", "from", "that", "codebase", "do", "not", "work", "NUMBER", "Swagger", "specification", "consumes", "application", "json", "info", "title", "Kubernikus", "version", "NUMBER", "produces", "application", "json", "swagger", "NUMBER", "paths", "info", "get", "operationId", "Info", "summary", "Get", "info", "about", "Kubernikus", "responses", "NUMBER", "description", "OK", "schema", "ref", "definitions", "Info", "definitions", "Info", "properties", "version", "type", "string", "Steps", "to", "reproduce", "swagger", "NUMBER", "generate", "server", "name", "test", "NUMBER", "swagger", "NUMBER", "generate", "spec", "m", "b", "cmd", "server", "Expr", "usr", "local", "Cellar", "go", "NUMBER", "libexec", "src", "net", "http", "request", "NUMBER", "go", "NUMBER", "NUMBER", "be", "unsupported", "for", "a", "schema", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "OSX", "Seems", "like", "HTTPRequest", "http", "NUMBER", "Request", "that", "gets", "add", "to", "param", "structs", "be", "miss", "a", "json", "so", "that", "the", "spec", "generator", "ignores", "it", "NUMBER", "sure", "np", "Problem", "statement", "If", "some", "content", "type", "like", "image", "png", "or", "be", "specified", "in", "produces", "part", "schema", "generate", "client", "do", "not", "accept", "those", "content", "types", "and", "error", "out", "with", "no", "consumer", "image", "png", "NUMBER", "Specifically", "we", "use", "a", "schema", "like", "the", "one", "below", "and", "respond", "to", "user", "request", "with", "binary", "data", "and", "set", "content", "type", "header", "manually", "based", "on", "mime", "type", "of", "the", "data", "NUMBER", "It", "works", "fine", "if", "you", "access", "it", "from", "curl", "or", "web", "browser", "but", "error", "in", "go", "swagger", "generate", "client", "NUMBER", "Swagger", "specification", "swagger", "NUMBER", "info", "title", "Test", "version", "NUMBER", "schemes", "http", "paths", "test", "get", "produces", "application", "octet", "stream", "responses", "NUMBER", "description", "NUMBER", "response", "headers", "Content", "Type", "type", "string", "schema", "type", "string", "format", "byte", "I", "need", "to", "specify", "correct", "content", "type", "so", "web", "browser", "be", "able", "to", "pick", "it", "up", "as", "correct", "content", "and", "display", "act", "accordingly", "NUMBER", "What", "I", "guess", "I", "really", "need", "be", "a", "default", "consumer", "for", "generate", "client", "that", "if", "set", "acts", "as", "a", "fallback", "option", "most", "likely", "it", "will", "just", "act", "as", "a", "default", "ByteStreamConsumer", "NUMBER", "I", "need", "that", "since", "I", "cannot", "specify", "beforehand", "which", "content", "types", "will", "be", "use", "NUMBER", "Somewhere", "here", "LINK", "openapi", "runtime", "blob", "master", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "Problem", "statement", "I", "m", "trying", "to", "use", "ref", "to", "define", "common", "response", "headers", "to", "avoid", "duplication", "but", "this", "generates", "a", "forbidden", "property", "error", "on", "validation", "NUMBER", "Is", "this", "expected", "Swagger", "specification", "swagger", "NUMBER", "info", "title", "Load", "Balancing", "Service", "API", "description", "API", "for", "the", "Load", "Balancing", "Service", "version", "NUMBER", "basePath", "NUMBER", "paths", "loadBalancers", "loadBalancerId", "backendSets", "get", "summary", "ListBackendSets", "tags", "loadBalancer", "description", "Lists", "all", "backend", "sets", "associated", "with", "a", "given", "load", "balancer", "NUMBER", "operationId", "ListBackendSets", "produces", "application", "json", "responses", "NUMBER", "description", "The", "list", "be", "be", "retrieved", "NUMBER", "headers", "opc", "response", "id", "ref", "x", "descriptions", "opc", "response", "id", "x", "descriptions", "opc", "response", "id", "description", "Unique", "identifier", "for", "the", "response", "NUMBER", "type", "string", "Steps", "to", "reproduce", "usr", "local", "bin", "swagger", "validate", "test", "NUMBER", "yaml", "The", "swagger", "spec", "at", "test", "NUMBER", "yaml", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "must", "validate", "one", "and", "only", "one", "schema", "oneOf", "paths", "NUMBER", "loadBalancers", "loadBalancerId", "backendSets", "NUMBER", "get", "NUMBER", "responses", "NUMBER", "headers", "NUMBER", "opc", "request", "id", "NUMBER", "ref", "in", "body", "be", "a", "forbidden", "property", "paths", "NUMBER", "loadBalancers", "loadBalancerId", "backendSets", "NUMBER", "get", "NUMBER", "responses", "NUMBER", "headers", "NUMBER", "opc", "request", "id", "NUMBER", "type", "in", "body", "be", "required", "must", "validate", "one", "and", "only", "one", "schema", "oneOf", "paths", "NUMBER", "loadBalancers", "loadBalancerId", "backendSets", "NUMBER", "get", "NUMBER", "responses", "NUMBER", "headers", "NUMBER", "opc", "request", "id", "NUMBER", "ref", "in", "body", "be", "a", "forbidden", "property", "paths", "NUMBER", "loadBalancers", "loadBalancerId", "backendSets", "NUMBER", "get", "NUMBER", "responses", "NUMBER", "headers", "NUMBER", "opc", "request", "id", "NUMBER", "type", "in", "body", "be", "required", "must", "validate", "one", "and", "only", "one", "schema", "oneOf", "paths", "NUMBER", "loadBalancers", "loadBalancerId", "backendSets", "NUMBER", "get", "NUMBER", "responses", "NUMBER", "headers", "NUMBER", "opc", "request", "id", "NUMBER", "ref", "in", "body", "be", "a", "forbidden", "property", "paths", "NUMBER", "loadBalancers", "loadBalancerId", "backendSets", "NUMBER", "get", "NUMBER", "responses", "NUMBER", "headers", "NUMBER", "opc", "request", "id", "NUMBER", "type", "in", "body", "be", "required", "must", "validate", "one", "and", "only", "one", "schema", "oneOf", "paths", "NUMBER", "loadBalancers", "loadBalancerId", "backendSets", "NUMBER", "get", "NUMBER", "responses", "NUMBER", "headers", "NUMBER", "opc", "request", "id", "NUMBER", "ref", "in", "body", "be", "a", "forbidden", "property", "paths", "NUMBER", "loadBalancers", "loadBalancerId", "backendSets", "NUMBER", "get", "NUMBER", "responses", "NUMBER", "headers", "NUMBER", "opc", "request", "id", "NUMBER", "type", "in", "body", "be", "required", "Environment", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "macOS", "Sierra", "NUMBER", "If", "I", "view", "this", "same", "yaml", "file", "in", "Swagger", "Editor", "it", "seems", "to", "follow", "the", "ref", "and", "displays", "the", "description", "and", "type", "of", "the", "header", "TAG", "I", "see", "NUMBER", "The", "language", "of", "the", "openapi", "NUMBER", "spec", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "referenceObject", "be", "more", "general", "and", "seems", "to", "allow", "the", "use", "of", "ref", "anywhere", "NUMBER", "Are", "there", "any", "plan", "to", "support", "NUMBER", "I", "tried", "your", "suggestion", "to", "use", "yaml", "anchors", "this", "version", "loads", "in", "Swagger", "Editor", "and", "displays", "the", "headers", "as", "desired", "swagger", "NUMBER", "info", "title", "Load", "Balancing", "Service", "API", "description", "API", "for", "the", "Load", "Balancing", "Service", "version", "NUMBER", "basePath", "NUMBER", "x", "descriptions", "opc", "response", "id", "opc", "response", "id", "description", "Unique", "identifier", "for", "the", "response", "NUMBER", "type", "string", "paths", "loadBalancers", "loadBalancerId", "backendSets", "get", "summary", "ListBackendSets", "tags", "loadBalancer", "description", "Lists", "all", "backend", "sets", "associated", "with", "a", "given", "load", "balancer", "NUMBER", "operationId", "ListBackendSets", "produces", "application", "json", "responses", "NUMBER", "description", "The", "list", "be", "be", "retrieved", "NUMBER", "headers", "opc", "response", "id", "TAG", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "fb", "NUMBER", "ab", "NUMBER", "fb", "NUMBER", "be", "NUMBER", "e", "NUMBER", "ef", "NUMBER", "c", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "height", "NUMBER", "width", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "a", "NUMBER", "f", "NUMBER", "be", "NUMBER", "b", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "Trying", "to", "codegen", "a", "seemingly", "valid", "swagger", "spec", "segaults", "the", "swagger", "cli", "tool", "NUMBER", "Swagger", "specification", "Swagger", "spec", "that", "causes", "the", "segfault", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "PowerDNS", "Authoritative", "HTTP", "API", "license", "name", "MIT", "host", "localhost", "NUMBER", "basePath", "api", "v", "NUMBER", "schemes", "http", "consumes", "application", "json", "produces", "application", "json", "paths", "servers", "get", "summary", "List", "all", "servers", "operationId", "listServers", "tags", "servers", "responses", "NUMBER", "description", "An", "array", "of", "servers", "schema", "ref", "definitions", "Servers", "servers", "server_id", "get", "summary", "List", "a", "server", "operationId", "listServer", "tags", "servers", "parameters", "name", "server_id", "in", "path", "required", "true", "description", "The", "id", "of", "the", "server", "to", "retrieve", "type", "string", "responses", "NUMBER", "description", "An", "server", "schema", "ref", "definitions", "Server", "servers", "server_id", "zones", "get", "summary", "List", "all", "Zones", "in", "a", "server", "operationId", "listZones", "tags", "zones", "parameters", "name", "server_id", "in", "path", "required", "true", "description", "The", "id", "of", "the", "server", "to", "retrieve", "type", "string", "responses", "NUMBER", "description", "An", "array", "of", "Zones", "schema", "ref", "definitions", "Zones", "servers", "server_id", "zones", "zone_id", "get", "summary", "zone", "managed", "by", "a", "server", "operationId", "listZone", "tags", "zones", "parameters", "name", "server_id", "in", "path", "required", "true", "description", "The", "id", "of", "the", "server", "to", "retrieve", "type", "string", "name", "zone_id", "type", "string", "in", "path", "required", "true", "description", "The", "id", "of", "the", "zone", "to", "retrieve", "responses", "NUMBER", "description", "A", "Zone", "schema", "ref", "definitions", "Zone", "definitions", "Server", "properties", "type", "type", "string", "description", "Set", "to", "Server", "id", "type", "string", "description", "The", "id", "of", "the", "server", "localhost", "daemon_type", "type", "string", "description", "recursor", "for", "the", "PowerDNS", "Recursor", "and", "authoritative", "for", "the", "Authoritative", "Server", "version", "type", "string", "description", "The", "version", "of", "the", "server", "software", "url", "type", "string", "description", "The", "API", "endpoint", "for", "this", "server", "config_url", "type", "string", "description", "The", "API", "endpoint", "for", "this", "server", "s", "configuration", "zones_url", "type", "string", "description", "The", "API", "endpoint", "for", "this", "server", "s", "zones", "Servers", "type", "array", "items", "ref", "definitions", "Server", "Zone", "properties", "id", "type", "string", "description", "Opaque", "zone", "id", "string", "assigned", "by", "the", "server", "should", "not", "be", "interpreted", "by", "the", "application", "NUMBER", "Guaranteed", "to", "be", "safe", "for", "embedding", "in", "URLs", "NUMBER", "name", "type", "string", "description", "Name", "of", "the", "zone", "e", "NUMBER", "g", "NUMBER", "example", "NUMBER", "com", "NUMBER", "MUST", "have", "a", "trail", "dot", "type", "type", "string", "description", "Set", "to", "Zone", "url", "type", "string", "description", "API", "endpoint", "for", "this", "zone", "kind", "type", "string", "enum", "Native", "Master", "Slave", "description", "Zone", "kind", "one", "of", "Native", "Master", "Slave", "rrsets", "type", "object", "items", "ref", "definitions", "RRSets", "description", "RRSets", "in", "this", "zone", "serial", "type", "integer", "description", "The", "SOA", "serial", "number", "notified_serial", "type", "integer", "description", "The", "SOA", "serial", "notifications", "have", "be", "sent", "out", "for", "masters", "type", "array", "items", "type", "string", "description", "List", "of", "IP", "address", "configured", "as", "a", "master", "for", "this", "zone", "Slave", "type", "zones", "only", "dnssec", "type", "boolean", "description", "Whether", "or", "not", "this", "zone", "be", "DNSSEC", "sign", "inferred", "from", "presigned", "be", "true", "XOR", "presence", "of", "at", "least", "one", "cryptokey", "with", "active", "be", "true", "nsec", "NUMBER", "param", "type", "string", "description", "The", "NSEC", "NUMBER", "PARAM", "record", "nsec", "NUMBER", "narrow", "type", "boolean", "description", "Whether", "or", "not", "the", "zone", "uses", "NSEC", "NUMBER", "narrow", "presigned", "type", "boolean", "description", "Whether", "or", "not", "the", "zone", "be", "pre", "sign", "soa_edit", "type", "string", "description", "The", "SOA", "EDIT", "metadata", "item", "soa_edit_api", "type", "string", "description", "The", "SOA", "EDIT", "API", "metadata", "item", "api_rectify", "type", "boolean", "description", "Whether", "or", "not", "the", "zone", "will", "be", "rectified", "on", "data", "change", "via", "the", "API", "zone", "type", "string", "description", "MAY", "contain", "a", "BIND", "style", "zone", "file", "when", "creating", "a", "zone", "account", "type", "string", "description", "MAY", "be", "set", "NUMBER", "Its", "value", "be", "defined", "by", "local", "policy", "nameservers", "type", "array", "items", "type", "string", "description", "MAY", "be", "sent", "in", "client", "bodies", "during", "creation", "and", "MUST", "NOT", "be", "sent", "by", "the", "server", "NUMBER", "Simple", "list", "of", "strings", "of", "nameserver", "names", "including", "the", "trail", "dot", "NUMBER", "Not", "required", "for", "slave", "zones", "NUMBER", "Zones", "type", "array", "items", "ref", "definitions", "Zone", "RRSets", "type", "array", "items", "ref", "definitions", "RRSet", "RRSet", "properties", "name", "type", "string", "description", "Name", "for", "record", "set", "e", "NUMBER", "g", "NUMBER", "www", "NUMBER", "powerdns", "NUMBER", "com", "NUMBER", "type", "type", "string", "description", "Type", "of", "this", "record", "e", "NUMBER", "g", "NUMBER", "A", "PTR", "MX", "ttl", "type", "integer", "description", "DNS", "TTL", "of", "the", "records", "in", "seconds", "NUMBER", "MUST", "NOT", "be", "include", "when", "changetype", "be", "set", "to", "DELETE", "NUMBER", "changetype", "type", "string", "description", "MUST", "be", "add", "when", "update", "the", "RRSet", "NUMBER", "Must", "be", "REPLACE", "or", "DELETE", "NUMBER", "With", "DELETE", "all", "exist", "RRs", "matching", "name", "and", "type", "will", "be", "delete", "including", "all", "comments", "NUMBER", "With", "REPLACE", "when", "records", "be", "present", "all", "exist", "RRs", "matching", "name", "and", "type", "will", "be", "delete", "and", "then", "new", "records", "given", "in", "records", "will", "be", "created", "NUMBER", "If", "no", "records", "be", "left", "any", "exist", "comments", "will", "be", "delete", "as", "well", "NUMBER", "When", "comments", "be", "present", "all", "exist", "comments", "for", "the", "RRs", "matching", "name", "and", "type", "will", "be", "delete", "and", "then", "new", "comments", "given", "in", "comments", "will", "be", "created", "NUMBER", "records", "type", "array", "description", "All", "records", "in", "this", "RRSet", "NUMBER", "When", "update", "Records", "this", "be", "the", "list", "of", "new", "records", "replacing", "the", "old", "ones", "NUMBER", "Must", "be", "empty", "when", "changetype", "be", "set", "to", "DELETE", "NUMBER", "An", "empty", "list", "results", "in", "deletion", "of", "all", "records", "and", "comments", "NUMBER", "items", "ref", "definitions", "Record", "comments", "type", "array", "description", "List", "of", "Comment", "NUMBER", "Must", "be", "empty", "when", "changetype", "be", "set", "to", "DELETE", "NUMBER", "An", "empty", "list", "results", "in", "deletion", "of", "all", "comments", "NUMBER", "modified_at", "be", "optional", "and", "defaults", "to", "the", "current", "server", "time", "NUMBER", "items", "ref", "definitions", "Comment", "Record", "properties", "content", "type", "string", "description", "The", "content", "of", "this", "record", "disabled", "type", "boolean", "description", "Whether", "or", "not", "this", "record", "be", "disabled", "set", "ptr", "type", "boolean", "description", "f", "set", "to", "true", "the", "server", "will", "find", "the", "matching", "reverse", "zone", "and", "create", "a", "PTR", "there", "NUMBER", "Existing", "PTR", "records", "be", "replaced", "NUMBER", "If", "no", "matching", "reverse", "Zone", "an", "error", "be", "throw", "NUMBER", "Only", "valid", "in", "client", "bodies", "only", "valid", "for", "A", "and", "AAAA", "types", "NUMBER", "Not", "returned", "by", "the", "server", "NUMBER", "Comment", "properties", "content", "type", "string", "description", "The", "actual", "comment", "account", "type", "string", "description", "Name", "of", "an", "account", "that", "add", "the", "comment", "modifided_at", "type", "integer", "description", "Timestamp", "of", "the", "last", "change", "to", "the", "comment", "While", "the", "spec", "be", "very", "large", "I", "think", "the", "relevant", "part", "has", "something", "to", "do", "with", "nesting", "an", "object", "in", "the", "schema", "definition", "NUMBER", "The", "following", "patch", "to", "the", "above", "spec", "seems", "to", "make", "the", "problem", "go", "away", "authoritative", "api", "swagger", "NUMBER", "yaml", "be", "the", "work", "version", "while", "the", "NUMBER", "bkp", "be", "the", "borked", "one", "diff", "authoritative", "api", "swagger", "NUMBER", "yaml", "NUMBER", "bkp", "NUMBER", "NUMBER", "d", "NUMBER", "TAG", "type", "object", "NUMBER", "c", "NUMBER", "TAG", "ref", "definitions", "RRSets", "Steps", "to", "reproduce", "swagger", "validate", "authoritative", "api", "swagger", "NUMBER", "yaml", "NUMBER", "bkp", "The", "swagger", "spec", "at", "authoritative", "api", "swagger", "NUMBER", "yaml", "NUMBER", "bkp", "be", "valid", "against", "swagger", "specification", "NUMBER", "swagger", "generate", "client", "f", "authoritative", "api", "swagger", "NUMBER", "yaml", "A", "pdns", "go", "swagger", "generate", "client", "f", "authoritative", "api", "swagger", "NUMBER", "yaml", "NUMBER", "bkp", "A", "pdns", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "DEBUG", "name", "v", "RRSets", "DEBUG", "name", "v", "rrsets", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "SIGSEGV", "segmentation", "violation", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "xe", "pc", "NUMBER", "x", "NUMBER", "ab", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "NewSliceBranch", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildArray", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xd", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildItems", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "makeGenSchema", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "cfd", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "f", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildProperties", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "makeGenSchema", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "a", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "makeGenDefinitionHierarchy", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "ce", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "db", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "makeGenDefinition", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "ce", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "db", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xbc", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "makeCodegenApp", "NUMBER", "xc", "NUMBER", "ad", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "clientGenerator", "NUMBER", "Generate", "NUMBER", "xc", "NUMBER", "ad", "NUMBER", "NUMBER", "xc", "NUMBER", "ad", "NUMBER", "NUMBER", "x", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "GenerateClient", "NUMBER", "x", "NUMBER", "ffc", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "NUMBER", "Client", "NUMBER", "Execute", "NUMBER", "xc", "NUMBER", "fe", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "fe", "NUMBER", "NUMBER", "x", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "ParseArgs", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "ed", "NUMBER", "NUMBER", "xc", "NUMBER", "ece", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "Parse", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xbaa", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xbf", "NUMBER", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "main", "NUMBER", "main", "spare", "local", "ajaisingh", "goworkspace", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "go", "version", "go", "NUMBER", "linux", "amd", "NUMBER", "OS", "Ubuntu", "NUMBER", "This", "be", "likely", "your", "problem", "rrsets", "type", "object", "items", "ref", "definitions", "RRSets", "description", "RRSets", "in", "this", "zone", "items", "be", "for", "array", "not", "object", "NUMBER", "If", "you", "want", "to", "embed", "that", "directly", "just", "do", "this", "rrsets", "ref", "definitions", "RRSets", "Note", "that", "you", "can", "t", "then", "have", "a", "description", "there", "with", "the", "ref", "NUMBER", "gregmaar", "You", "re", "right", "except", "the", "validator", "do", "not", "seem", "to", "error", "out", "which", "I", "was", "hoping", "it", "would", "NUMBER", "Interesting", "NUMBER", "The", "spec", "doesn", "t", "actually", "say", "that", "items", "be", "not", "valid", "for", "object", "only", "that", "it", "s", "required", "for", "array", "NUMBER", "That", "might", "be", "why", "the", "validator", "doesn", "t", "catch", "it", "NUMBER", "gregmarr", "Is", "that", "a", "problem", "in", "the", "spec", "definition", "or", "in", "the", "codegen", "parser", "I", "honestly", "have", "no", "idea", "casualjim", "will", "need", "to", "chime", "in", "here", "NUMBER", "This", "issue", "has", "be", "address", "in", "LINK", "openapi", "validate", "pull", "NUMBER", "but", "the", "change", "be", "not", "pull", "to", "go", "swagger", "vendor", "yet", "Problem", "statement", "When", "I", "define", "an", "object", "and", "take", "another", "as", "reference", "NUMBER", "Seemed", "generate", "code", "of", "the", "object", "take", "others", "for", "reference", "don", "t", "validate", "the", "referenced", "one", "NUMBER", "In", "below", "example", "when", "try", "to", "put", "a", "sg", "only", "will", "check", "if", "md", "be", "exist", "won", "t", "check", "the", "value", "in", "it", "NUMBER", "Validation", "function", "be", "generate", "while", "not", "call", "NUMBER", "swagger", "NUMBER", "info", "description", "This", "be", "a", "sample", "server", "sg", "server", "NUMBER", "You", "can", "find", "out", "more", "about", "Swagger", "at", "LINK", "LINK", "or", "on", "irc", "NUMBER", "freenode", "NUMBER", "net", "swagger", "LINK", "NUMBER", "filters", "NUMBER", "version", "NUMBER", "title", "Swagger", "Sg", "termsOfService", "LINK", "contact", "email", "apiteam", "swagger", "NUMBER", "io", "license", "name", "Apache", "NUMBER", "url", "LINK", "NUMBER", "html", "host", "localhost", "NUMBER", "basePath", "ccmts", "config", "v", "NUMBER", "tags", "name", "sg", "description", "Everything", "about", "your", "sg", "externalDocs", "description", "Find", "out", "more", "url", "LINK", "name", "global", "description", "Everything", "about", "your", "global", "settings", "schemes", "http", "paths", "sg", "put", "tags", "sg", "summary", "Add", "a", "new", "sg", "to", "the", "store", "description", "operationId", "add", "sg", "consumes", "application", "json", "produces", "application", "json", "parameters", "in", "body", "name", "body", "description", "sg", "object", "that", "needs", "to", "be", "add", "to", "the", "store", "required", "true", "schema", "ref", "definitions", "sg", "responses", "NUMBER", "description", "Invalid", "input", "sg", "sgId", "get", "tags", "sg", "summary", "Find", "sg", "by", "ID", "description", "Returns", "a", "sg", "operationId", "getsgById", "produces", "application", "json", "parameters", "name", "sgId", "in", "path", "description", "ID", "of", "sg", "to", "return", "required", "true", "type", "integer", "format", "int", "NUMBER", "responses", "NUMBER", "description", "successful", "operation", "schema", "ref", "definitions", "sg", "NUMBER", "description", "Invalid", "ID", "supplied", "NUMBER", "description", "sg", "not", "find", "ptp", "put", "tags", "global", "summary", "Add", "new", "ptp", "settings", "to", "store", "description", "operationId", "add", "ptp", "consumes", "application", "json", "produces", "application", "json", "parameters", "in", "body", "name", "body", "description", "sg", "object", "that", "needs", "to", "be", "add", "to", "the", "store", "required", "true", "schema", "ref", "definitions", "ptp", "responses", "NUMBER", "description", "Invalid", "input", "get", "tags", "global", "summary", "get", "ptp", "global", "settings", "description", "Returns", "ptp", "global", "settings", "operationId", "getptp", "produces", "application", "json", "responses", "NUMBER", "description", "successful", "operation", "schema", "ref", "definitions", "ptp", "NUMBER", "description", "ptp", "not", "find", "delete", "tags", "global", "summary", "delete", "ptp", "global", "settings", "description", "delete", "ptp", "global", "settings", "operationId", "deleteptp", "produces", "application", "json", "responses", "NUMBER", "description", "successful", "operation", "schema", "ref", "definitions", "ptp", "NUMBER", "description", "ptp", "not", "delete", "definitions", "md", "properties", "mac", "type", "string", "format", "string", "adminState", "type", "boolean", "default", "true", "syncInterval", "type", "integer", "format", "int", "NUMBER", "maximum", "NUMBER", "minimum", "NUMBER", "priDcid", "type", "array", "items", "type", "integer", "format", "int", "NUMBER", "minimum", "NUMBER", "maximum", "NUMBER", "uniqueItems", "true", "ucid", "type", "array", "items", "type", "integer", "format", "int", "NUMBER", "minimum", "NUMBER", "maximum", "NUMBER", "uniqueItems", "true", "sg", "type", "object", "required", "md", "properties", "sgId", "type", "integer", "format", "int", "NUMBER", "ds", "type", "string", "format", "string", "us", "type", "string", "format", "string", "md", "type", "array", "items", "ref", "definitions", "md", "xml", "name", "sg", "ptp", "type", "object", "properties", "ptpMasterIp", "type", "string", "format", "string", "pattern", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ptpGwIp", "type", "string", "format", "string", "pattern", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "xml", "name", "ptp", "Steps", "to", "reproduce", "just", "generate", "code", "by", "swagger", "generate", "server", "f", "swagger", "NUMBER", "json", "A", "pattern", "t", "test", "Environment", "swagger", "version", "dev", "go", "version", "go", "NUMBER", "OS", "centos", "NUMBER", "Hi", "i", "be", "new", "to", "swagger", "and", "was", "trying", "to", "generate", "a", "swagger", "JSON", "file", "by", "use", "annotations", "in", "GO", "LANG", "NUMBER", "I", "annotated", "my", "code", "use", "the", "help", "of", "LINK", "but", "was", "unable", "to", "annotate", "the", "parameters", "that", "be", "required", "in", "my", "URL", "path", "and", "always", "get", "the", "following", "error", "when", "i", "put", "JSON", "file", "in", "swaggerUI", "NUMBER", "Error", "Declared", "path", "parameter", "id", "needs", "to", "be", "defined", "as", "a", "path", "parameter", "at", "either", "the", "path", "or", "operation", "level", "NUMBER", "Annotated", "something", "like", "this", "GetEmployeeData", "handles", "a", "GET", "to", "example", "id", "swagger", "route", "GET", "example", "id", "getEmployee", "Parameters", "id", "int", "in", "path", "true", "id", "Returns", "data", "of", "the", "employee", "NUMBER", "Produces", "application", "json", "Responses", "NUMBER", "getEmployee", "func", "GetEmployee", "w", "http", "NUMBER", "ResponseWriter", "req", "http", "NUMBER", "Request", "json", "NUMBER", "NewEncoder", "w", "NUMBER", "Encode", "people", "I", "have", "tried", "different", "ways", "and", "also", "tried", "creating", "a", "struct", "and", "annotate", "it", "with", "swagger", "parameters", "and", "it", "didn", "t", "work", "NUMBER", "swagger", "parameters", "type", "id", "struct", "in", "path", "id", "int", "Ran", "swagger", "generate", "spec", "o", "NUMBER", "rds", "NUMBER", "yml", "command", "to", "generate", "the", "JSON", "file", "NUMBER", "It", "would", "be", "great", "if", "you", "can", "assist", "me", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "windows", "It", "worked", "NUMBER", "Thanks", "Problem", "statement", "My", "spec", "asks", "for", "name", "type", "string", "and", "I", "m", "giving", "it", "name", "NUMBER", "The", "user", "gets", "message", "parsing", "body", "body", "from", "fail", "because", "json", "cannot", "unmarshal", "number", "into", "Go", "struct", "field", "OrderRequest", "NUMBER", "name", "of", "type", "string", "Do", "I", "have", "to", "replace", "the", "error", "NUMBER", "ServeError", "function", "to", "get", "something", "pretty", "for", "the", "user", "Environment", "swagger", "version", "NUMBER", "go", "version", "go", "NUMBER", "linux", "amd", "NUMBER", "OS", "Ubuntu", "NUMBER", "xenial", "Gotcha", "NUMBER", "Too", "bad", "we", "can", "t", "get", "access", "to", "richer", "parse", "error", "conditions", "NUMBER", "like", "the", "attributes", "that", "be", "cause", "problem", "NUMBER", "I", "add", "this", "to", "ServeError", "and", "it", "s", "slightly", "less", "intimidating", "case", "error", "NUMBER", "ParseError", "rw", "NUMBER", "WriteHeader", "asHTTPCode", "int", "e", "NUMBER", "Code", "if", "r", "nil", "r", "NUMBER", "Method", "HEAD", "rw", "NUMBER", "Write", "errorAsJSON", "error", "NUMBER", "New", "e", "NUMBER", "Code", "Unable", "to", "parse", "JSON", "payload", "NUMBER", "Confirm", "syntax", "and", "schema", "NUMBER", "Problem", "statement", "The", "fix", "for", "NUMBER", "has", "the", "side", "effect", "of", "omitting", "write", "the", "body", "when", "the", "schema", "has", "discriminator", "specified", "for", "it", "NUMBER", "I", "also", "tried", "work", "around", "it", "by", "specify", "oneOf", "with", "each", "of", "the", "derived", "schemas", "but", "it", "had", "the", "same", "effect", "NUMBER", "In", "parameter", "NUMBER", "gotmpl", "there", "be", "now", "if", "NUMBER", "IsBodyParam", "if", "and", "NUMBER", "Schema", "NUMBER", "IsNullable", "not", "NUMBER", "HasDiscriminator", "if", "NUMBER", "ValueExpression", "nil", "if", "err", "r", "NUMBER", "SetBodyParam", "NUMBER", "ValueExpression", "err", "nil", "return", "err", "end", "Before", "NUMBER", "the", "body", "was", "always", "write", "NUMBER", "Note", "that", "marshaling", "of", "derived", "schema", "specific", "field", "also", "doesn", "t", "work", "see", "NUMBER", "NUMBER", "Swagger", "specification", "yaml", "parameters", "NUMBER", "name", "BaseClassRequest", "required", "true", "in", "body", "schema", "ref", "definitions", "BaseClassRequest", "Steps", "to", "reproduce", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "darwin", "amd", "NUMBER", "Thanks", "also", "I", "want", "to", "clarify", "that", "the", "marshaling", "issue", "NUMBER", "isn", "t", "there", "if", "skip", "flatten", "be", "pass", "NUMBER", "So", "it", "s", "only", "this", "new", "issue", "I", "think", "that", "prevents", "sending", "out", "a", "schema", "with", "discriminator", "in", "it", "NUMBER", "Problem", "statement", "When", "use", "invalid", "example", "values", "for", "a", "definition", "they", "be", "not", "validated", "with", "swagger_windows_amd", "NUMBER", "exe", "validate", "c", "temp", "example", "NUMBER", "json", "Swagger", "specification", "swagger", "swagger", "NUMBER", "info", "title", "test", "example", "version", "NUMBER", "produces", "application", "json", "paths", "v", "NUMBER", "customer", "customer_id", "get", "parameters", "ref", "parameters", "customerIdParam", "responses", "NUMBER", "description", "Customer", "schema", "ref", "definitions", "customer", "parameters", "customerIdParam", "name", "customer_id", "description", "The", "ID", "of", "the", "customer", "in", "path", "required", "true", "type", "string", "format", "uuid", "definitions", "customer", "type", "object", "required", "id", "properties", "id", "type", "string", "format", "uuid", "description", "The", "unique", "ID", "of", "the", "customer", "example", "NUMBER", "email", "type", "string", "format", "email", "description", "The", "email", "address", "of", "the", "customer", "example", "NUMBER", "create_date", "type", "string", "format", "date", "time", "description", "The", "date", "and", "time", "when", "the", "customer", "was", "created", "example", "NUMBER", "Steps", "to", "reproduce", "Save", "the", "swagger", "definition", "and", "run", "the", "validate", "command", "swagger_windows_amd", "NUMBER", "exe", "validate", "c", "temp", "example", "NUMBER", "json", "Environment", "This", "release", "LINK", "swagger", "go", "swagger", "release", "tag", "NUMBER", "OS", "Windows", "NUMBER", "Hi", "thank", "you", "for", "your", "response", "NUMBER", "But", "what", "you", "write", "be", "only", "one", "type", "of", "how", "to", "provide", "examples", "NUMBER", "There", "be", "more", "ways", "to", "provide", "examples", "please", "check", "LINK", "NUMBER", "add", "examples", "I", "was", "use", "the", "Property", "Examples", "while", "you", "show", "the", "Response", "Examples", "NUMBER", "But", "at", "least", "it", "be", "good", "to", "know", "that", "the", "response", "one", "would", "be", "validated", "NUMBER", "Thank", "you", "for", "your", "efforts", "For", "me", "it", "would", "be", "really", "good", "to", "not", "only", "have", "it", "on", "response", "level", "because", "the", "input", "models", "be", "just", "as", "important", "for", "me", "to", "have", "them", "in", "a", "consistent", "state", "NUMBER", "In", "some", "of", "my", "API", "implementation", "both", "the", "ResponseWriter", "and", "http", "NUMBER", "Request", "be", "needed", "NUMBER", "I", "know", "that", "I", "can", "get", "the", "r", "http", "NUMBER", "Request", "by", "go", "_", "err", "myFunc", "params", "NUMBER", "HTTPRequest", "However", "I", "could", "not", "find", "where", "to", "get", "the", "instance", "of", "http", "NUMBER", "ResponseWriter", "in", "the", "generate", "code", "NUMBER", "Can", "anyone", "help", "Thanks", "NUMBER", "Thanks", "casualjim", "Problem", "statement", "When", "including", "a", "type", "CustomFields", "map", "string", "interface", "in", "a", "model", "it", "doesn", "t", "add", "it", "as", "a", "properties", "NUMBER", "and", "it", "add", "additionalProperties", "to", "the", "parent", "NUMBER", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "For", "file", "golang", "go", "generate", "swagger", "generate", "spec", "Package", "API", "This", "be", "the", "public", "REST", "API", "Version", "NUMBER", "swagger", "meta", "package", "exampleswagger", "swagger", "operation", "POST", "thing", "aThing", "Do", "thing", "Responses", "NUMBER", "description", "SomeObject", "schema", "ref", "definitions", "SomeObject", "SomeObject", "NUMBER", "swagger", "model", "type", "SomeObject", "struct", "Name", "a", "name", "Name", "string", "json", "name", "CustomFields", "json", "type", "CustomFields", "map", "string", "interface", "The", "command", "NUMBER", "swagger", "generate", "spec", "m", "Generates", "json", "swagger", "NUMBER", "info", "description", "This", "be", "the", "public", "REST", "API", "version", "NUMBER", "paths", "thing", "post", "description", "Do", "thing", "operationId", "aThing", "responses", "NUMBER", "description", "SomeObject", "schema", "ref", "definitions", "SomeObject", "definitions", "CustomFields", "type", "object", "additionalProperties", "type", "object", "x", "go", "package", "github", "NUMBER", "com", "example", "swagger", "SomeObject", "type", "object", "title", "SomeObject", "NUMBER", "properties", "name", "description", "Name", "a", "name", "type", "string", "x", "go", "name", "Name", "additionalProperties", "type", "object", "x", "go", "package", "github", "NUMBER", "com", "example", "swagger", "Field", "CustomFields", "doesn", "t", "appear", "in", "parent", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "OSX", "Sierra", "NUMBER", "the", "field", "of", "the", "CustomFields", "map", "should", "not", "be", "part", "of", "the", "parent", "object", "NUMBER", "they", "should", "be", "properties", "under", "customFields", "property", "in", "the", "parent", "object", "NUMBER", "Ok", "you", "be", "right", "NUMBER", "how", "do", "I", "achieve", "the", "swagger", "you", "describe", "If", "I", "add", "the", "swagger", "allOf", "annotation", "golang", "go", "generate", "swagger", "generate", "spec", "Package", "API", "This", "be", "the", "public", "REST", "API", "Version", "NUMBER", "swagger", "meta", "package", "exampleswagger", "swagger", "operation", "POST", "thing", "aThing", "Do", "thing", "Responses", "NUMBER", "description", "SomeObject", "schema", "ref", "definitions", "SomeObject", "SomeObject", "NUMBER", "swagger", "model", "type", "SomeObject", "struct", "Name", "a", "name", "Name", "string", "json", "name", "swagger", "allOf", "CustomFields", "json", "type", "CustomFields", "map", "string", "interface", "I", "get", "json", "swagger", "NUMBER", "info", "description", "This", "be", "the", "public", "REST", "API", "version", "NUMBER", "paths", "thing", "post", "description", "Do", "thing", "operationId", "aThing", "responses", "NUMBER", "description", "SomeObject", "schema", "ref", "definitions", "SomeObject", "definitions", "CustomFields", "type", "object", "additionalProperties", "type", "object", "x", "go", "package", "github", "NUMBER", "com", "example", "swagger", "SomeObject", "title", "SomeObject", "NUMBER", "allOf", "type", "object", "properties", "name", "description", "Name", "a", "name", "type", "string", "x", "go", "name", "Name", "x", "go", "package", "github", "NUMBER", "com", "example", "swagger", "Problem", "statement", "When", "use", "swagger", "to", "generate", "models", "it", "will", "generate", "go", "type", "Item", "struct", "product", "code", "ProductCode", "string", "json", "productCode", "omitempty", "But", "however", "I", "want", "to", "read", "mongo", "data", "directly", "into", "this", "Item", "the", "attribute", "in", "Mongo", "be", "also", "call", "productCode", "however", "I", "cannot", "NUMBER", "Because", "it", "will", "try", "to", "find", "productcode", "lowercase", "instead", "of", "productCode", "NUMBER", "Is", "it", "possible", "we", "could", "add", "bson", "flag", "also", "in", "the", "descriptions", "Swagger", "specification", "Steps", "to", "reproduce", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Mac", "OS", "Problem", "statement", "In", "discriminated", "NUMBER", "md", "the", "spec", "generator", "be", "said", "to", "place", "x", "class", "inside", "the", "allOf", "while", "the", "client", "generator", "only", "looks", "at", "x", "class", "specified", "outside", "the", "allOf", "NUMBER", "Since", "this", "be", "an", "extension", "I", "don", "t", "know", "what", "be", "correct", "but", "I", "m", "guessing", "what", "you", "documented", "be", "what", "you", "wanted", "to", "have", "work", "NUMBER", "You", "can", "see", "in", "discriminatorInfo", "in", "discriminator", "NUMBER", "go", "go", "func", "discriminatorInfo", "doc", "analysis", "NUMBER", "Spec", "discInfo", "NUMBER", "for", "_", "sch", "range", "doc", "NUMBER", "SchemasWithAllOf", "for", "_", "ao", "range", "sch", "NUMBER", "Schema", "NUMBER", "AllOf", "if", "ao", "NUMBER", "Ref", "NUMBER", "String", "if", "bt", "ok", "baseTypes", "ao", "NUMBER", "Ref", "NUMBER", "String", "ok", "name", "_", "sch", "NUMBER", "Schema", "NUMBER", "Extensions", "NUMBER", "GetString", "x", "class", "that", "sch", "NUMBER", "Schema", "refers", "to", "the", "schema", "that", "contains", "the", "allOf", "for", "x", "class", "when", "the", "document", "says", "it", "should", "be", "in", "the", "allOf", "s", "inner", "schema", "that", "doesn", "t", "contain", "a", "ref", "NUMBER", "Swagger", "specification", "From", "discriminated", "NUMBER", "md", "yaml", "modelX", "allOf", "ref", "definitions", "TeslaCar", "title", "The", "ModelX", "version", "of", "the", "tesla", "car", "properties", "doors", "description", "The", "number", "of", "doors", "on", "this", "Model", "X", "type", "integer", "format", "int", "NUMBER", "x", "go", "name", "Doors", "x", "class", "com", "NUMBER", "tesla", "NUMBER", "models", "NUMBER", "ModelX", "x", "go", "name", "ModelX", "however", "the", "client", "generator", "will", "ignore", "x", "class", "unless", "it", "s", "do", "like", "so", "yaml", "modelX", "x", "class", "com", "NUMBER", "tesla", "NUMBER", "models", "NUMBER", "ModelX", "allOf", "ref", "definitions", "TeslaCar", "title", "The", "ModelX", "version", "of", "the", "tesla", "car", "properties", "doors", "description", "The", "number", "of", "doors", "on", "this", "Model", "X", "type", "integer", "format", "int", "NUMBER", "x", "go", "name", "Doors", "x", "go", "name", "ModelX", "Steps", "to", "reproduce", "Run", "swagger", "generate", "client", "on", "the", "definitions", "in", "discriminated", "NUMBER", "md", "and", "notice", "that", "the", "Tesla", "NUMBER", "Model", "method", "returns", "modelX", "and", "that", "unmarshalTesla", "looks", "for", "modelX", "in", "the", "switch", "statement", "instead", "of", "the", "expected", "com", "NUMBER", "tesla", "NUMBER", "models", "NUMBER", "ModelX", "NUMBER", "Then", "try", "moving", "the", "x", "class", "like", "shown", "above", "and", "trying", "again", "NUMBER", "Environment", "swagger", "version", "dev", "latest", "HEAD", "go", "version", "NUMBER", "darwin", "amd", "NUMBER", "OS", "darwin", "amd", "NUMBER", "I", "just", "looked", "at", "the", "behavior", "of", "the", "structure", "parser", "and", "it", "looks", "consistent", "with", "the", "client", "generator", "NUMBER", "It", "puts", "the", "x", "class", "extension", "on", "the", "same", "schema", "object", "that", "contains", "an", "allOf", "go", "bschema", "NUMBER", "AddExtension", "x", "class", "mv", "NUMBER", "bschema", "NUMBER", "AllOf", "append", "bschema", "NUMBER", "AllOf", "newSch", "and", "the", "test", "be", "consistent", "with", "that", "NUMBER", "Maybe", "the", "documentation", "just", "needs", "to", "be", "correct", "to", "match", "the", "code", "Problem", "statement", "When", "the", "swagger", "file", "has", "a", "string", "field", "with", "both", "date", "format", "and", "maxLength", "the", "generate", "model", "file", "do", "not", "compile", "NUMBER", "In", "this", "example", "adapted", "from", "petstore", "LINK", "Specification", "blob", "master", "examples", "v", "NUMBER", "json", "petstore", "simple", "NUMBER", "json", "the", "field", "birth", "be", "string", "has", "date", "format", "and", "a", "max", "length", "of", "NUMBER", "We", "should", "call", "m", "NUMBER", "Birth", "NUMBER", "String", "rather", "than", "string", "m", "NUMBER", "Birth", "in", "new_pet", "NUMBER", "go", "NUMBER", "Swagger", "specification", "json", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "Swagger", "Petstore", "host", "petstore", "NUMBER", "swagger", "NUMBER", "io", "basePath", "api", "schemes", "http", "consumes", "application", "json", "produces", "application", "json", "paths", "pets", "post", "operationId", "addPet", "produces", "application", "json", "parameters", "name", "pet", "in", "body", "description", "Pet", "to", "add", "to", "the", "store", "required", "true", "schema", "ref", "definitions", "NewPet", "responses", "NUMBER", "description", "pet", "response", "schema", "default", "description", "unexpect", "error", "schema", "definitions", "NewPet", "type", "object", "required", "name", "properties", "name", "type", "string", "birth", "type", "string", "format", "date", "maxLength", "NUMBER", "Steps", "to", "reproduce", "swagger", "generate", "client", "spec", "apis", "test", "NUMBER", "json", "go", "build", "client", "swagger_petstore_client", "NUMBER", "go", "github", "NUMBER", "com", "neighborly", "experiments", "pershing", "demo", "models", "models", "new_pet", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "convert", "m", "NUMBER", "Birth", "type", "strfmt", "NUMBER", "Date", "to", "type", "string", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "OSX", "tfeng", "Does", "it", "work", "as", "expected", "if", "maxLength", "be", "not", "specified", "kreamyx", "Yes", "it", "works", "as", "expected", "without", "maxLength", "NUMBER", "The", "offending", "line", "be", "to", "test", "maxLength", "so", "without", "it", "that", "line", "doesn", "t", "exist", "in", "the", "generate", "file", "NUMBER", "OK", "thanks", "for", "the", "info", "NUMBER", "I", "will", "look", "into", "it", "Perhaps", "it", "wouldn", "t", "but", "this", "occur", "in", "a", "large", "swagger", "file", "that", "we", "get", "from", "an", "external", "partner", "NUMBER", "Instead", "of", "modifying", "their", "swagger", "file", "in", "many", "places", "I", "d", "rather", "have", "a", "codegen", "tool", "that", "works", "out", "of", "the", "box", "NUMBER", "In", "general", "I", "think", "we", "should", "either", "raise", "an", "error", "and", "don", "t", "except", "the", "swagger", "file", "if", "date", "maxLength", "be", "not", "valid", "or", "generate", "code", "that", "compiles", "NUMBER", "use", "google", "s", "oauth", "NUMBER", "server", "as", "example", "Signed", "off", "by", "Hui", "Kang", "TAG", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "e", "NUMBER", "a", "NUMBER", "f", "NUMBER", "b", "NUMBER", "a", "NUMBER", "dfb", "NUMBER", "f", "NUMBER", "cf", "NUMBER", "bb", "NUMBER", "f", "NUMBER", "ec", "NUMBER", "f", "NUMBER", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "height", "NUMBER", "width", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "scan", "scanner", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "FubmVyLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "scan", "meta", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "tZXRhLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "e", "NUMBER", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Not", "sure", "why", "houndci", "bot", "do", "not", "like", "the", "format", "I", "see", "other", "example", "has", "similar", "format", "NUMBER", "Problem", "statement", "In", "my", "understanding", "if", "the", "_accessCode_", "flow", "be", "use", "for", "oauth", "NUMBER", "securitydefinition", "the", "generate", "server", "could", "redirect", "the", "authentication", "to", "the", "oauth", "NUMBER", "server", "e", "NUMBER", "g", "NUMBER", "LINK", "However", "my", "generate", "code", "do", "not", "perform", "the", "redirection", "NUMBER", "Could", "anyone", "help", "on", "this", "Thanks", "NUMBER", "Steps", "to", "reproduce", "yams", "swagger", "NUMBER", "info", "title", "oauth", "NUMBER", "debug", "version", "NUMBER", "produces", "application", "json", "schemes", "http", "basePath", "api", "securityDefinitions", "OauthSecurity", "type", "oauth", "NUMBER", "flow", "accessCode", "authorizationUrl", "LINK", "tokenUrl", "h", "LINK", "scopes", "admin", "Admin", "scope", "user", "User", "scope", "security", "OauthSecurity", "user", "paths", "customers", "NUMBER", "Run", "the", "server", "shell", "go", "run", "cmd", "oauth", "sample", "server", "main", "NUMBER", "go", "port", "NUMBER", "Open", "the", "browser", "and", "access", "NUMBER", "NUMBER", "The", "generate", "server", "do", "not", "redirect", "the", "browser", "to", "the", "google", "login", "page", "NUMBER", "casualjim", "Thanks", "for", "your", "response", "NUMBER", "Now", "I", "understand", "the", "structure", "of", "the", "go", "swagger", "generate", "code", "NUMBER", "And", "I", "realized", "that", "I", "should", "implement", "checking", "the", "oauth", "access", "token", "in", "this", "function", "go", "api", "NUMBER", "OauthSecurityAuth", "func", "token", "string", "scopes", "string", "models", "NUMBER", "Principal", "error", "return", "nil", "error", "NUMBER", "NotImplemented", "oauth", "NUMBER", "bearer", "auth", "OauthSecurity", "has", "not", "yet", "be", "implement", "I", "have", "another", "follow", "up", "question", "which", "be", "also", "applicable", "to", "apikey", "or", "basic", "authentication", "schemes", "NUMBER", "How", "can", "the", "server", "remember", "the", "authenticated", "request", "context", "For", "example", "if", "I", "uses", "a", "browser", "to", "access", "the", "api", "server", "the", "request", "do", "not", "need", "to", "be", "checked", "each", "time", "after", "be", "authenticated", "once", "NUMBER", "Do", "you", "know", "which", "go", "libraries", "can", "handle", "this", "Thanks", "NUMBER", "When", "try", "to", "validate", "a", "swagger", "NUMBER", "spec", "in", "yaml", "with", "n", "as", "the", "property", "name", "like", "definitions", "MyModel", "properties", "n", "type", "number", "format", "double", "NUMBER", "I", "get", "the", "error", "message", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "don", "t", "match", "expect", "map", "key", "string", "or", "int", "get", "bool", "After", "use", "the", "quote", "on", "the", "property", "name", "as", "n", "it", "works", "NUMBER", "I", "don", "t", "understand", "why", "the", "swagger", "generator", "behaves", "like", "this", "NUMBER", "Also", "I", "suggest", "to", "add", "the", "following", "features", "NUMBER", "When", "the", "validation", "error", "occur", "it", "s", "useful", "to", "print", "out", "the", "line", "number", "of", "the", "error", "in", "the", "spec", "file", "NUMBER", "For", "a", "very", "large", "file", "over", "NUMBER", "K", "line", "it", "s", "pain", "to", "debug", "NUMBER", "NUMBER", "Can", "the", "generator", "accept", "the", "swagger", "NUMBER", "JSON", "format", "The", "internal", "do", "convert", "the", "yaml", "to", "JSON", "during", "the", "parse", "NUMBER", "Thanks", "NUMBER", "Can", "you", "tell", "me", "why", "the", "n", "be", "a", "reserved", "keyword", "in", "the", "Swagger", "spec", "When", "I", "use", "the", "JSON", "file", "it", "has", "to", "have", "the", "n", "as", "well", "NUMBER", "Thanks", "NUMBER", "As", "for", "the", "reason", "YAML", "treats", "these", "strings", "as", "boolean", "Y", "true", "Yes", "ON", "Boolean", "true", "n", "FALSE", "No", "off", "Boolean", "false", "thanks", "NUMBER", "Problem", "statement", "parameter", "not", "keep", "order", "struct", "sequence", "Swagger", "specification", "definitions", "LoginReq", "type", "object", "properties", "password", "type", "string", "x", "go", "name", "Password", "username", "type", "string", "x", "go", "name", "Username", "Steps", "to", "reproduce", "swagger", "parameters", "login", "type", "LoginParam", "struct", "in", "body", "required", "true", "RequestModel", "LoginReq", "json", "request_model", "type", "LoginReq", "struct", "Username", "string", "json", "username", "Password", "string", "json", "password", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "ubuntu", "NUMBER", "Problem", "statement", "Our", "endpoint", "receives", "an", "optional", "array", "NUMBER", "recipeIds", "type", "array", "description", "referenced", "recipe", "ids", "uniqueItems", "true", "items", "type", "integer", "format", "int", "NUMBER", "And", "in", "the", "generate", "source", "i", "see", "RecipeIds", "int", "NUMBER", "json", "recipeIds", "I", "would", "like", "to", "ask", "what", "be", "the", "reason", "to", "not", "mark", "the", "array", "as", "omitempty", "Because", "the", "API", "allows", "to", "not", "send", "this", "data", "and", "it", "allows", "to", "send", "an", "array", "as", "data", "also", "but", "in", "this", "case", "go", "swagger", "sends", "a", "null", "NUMBER", "I", "have", "two", "issue", "with", "null", "first", "some", "API", "doesn", "t", "handle", "null", "as", "well", "i", "know", "it", "be", "an", "API", "issue", "but", "there", "be", "APIs", "out", "of", "my", "scope", "and", "also", "legacy", "APIs", "and", "the", "other", "be", "if", "i", "generate", "a", "minimal", "JSON", "template", "for", "my", "users", "it", "will", "be", "full", "with", "unnecessary", "null", "values", "which", "looks", "not", "so", "nice", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "Thanks", "a", "lot", "NUMBER", "Problem", "statement", "Actually", "I", "need", "to", "use", "swagger", "to", "generate", "my", "modes", "in", "go", "code", "NUMBER", "But", "I", "find", "I", "can", "hardly", "generate", "type", "int", "always", "int", "NUMBER", "NUMBER", "Since", "I", "need", "to", "keep", "back", "compatibility", "the", "project", "I", "can", "hardly", "change", "the", "type", "NUMBER", "So", "in", "this", "case", "do", "go", "swagger", "meet", "my", "demand", "If", "the", "answer", "be", "yes", "how", "to", "make", "it", "NUMBER", "Please", "remove", "the", "sections", "that", "don", "t", "apply", "Swagger", "specification", "Steps", "to", "reproduce", "Environment", "uname", "a", "Darwin", "AllenSundeMacBook", "Pro", "NUMBER", "local", "NUMBER", "Darwin", "Kernel", "Version", "NUMBER", "Thu", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PDT", "NUMBER", "root", "xnu", "NUMBER", "NUMBER", "RELEASE_X", "NUMBER", "_", "NUMBER", "x", "NUMBER", "_", "NUMBER", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "Thanks", "in", "advance", "Discussed", "briefly", "in", "NUMBER", "Yeah", "it", "be", "brief", "in", "NUMBER", "NUMBER", "While", "I", "think", "we", "have", "not", "get", "the", "solution", "NUMBER", "So", "I", "suggest", "that", "it", "be", "better", "for", "us", "to", "keep", "this", "issue", "open", "since", "maybe", "other", "users", "would", "have", "the", "same", "issue", "NUMBER", "gregmarr", "Description", "The", "body", "won", "t", "be", "write", "to", "the", "request", "if", "it", "s", "empty", "NUMBER", "Closes", "NUMBER", "I", "generate", "the", "Go", "client", "and", "after", "a", "success", "generation", "my", "project", "doesn", "t", "compile", "NUMBER", "The", "reason", "be", "cannot", "convert", "nil", "to", "NUMBER", "PlatformGatewaysResponse", "type", "object", "properties", "gateways", "type", "object", "additionalProperties", "type", "array", "uniqueItems", "true", "items", "ref", "definitions", "CloudGatewayJson", "CloudGatewayJson", "type", "object", "properties", "name", "type", "string", "id", "type", "string", "properties", "type", "object", "additionalProperties", "type", "object", "The", "full", "source", "JSON", "be", "find", "here", "LINK", "api", "swagger", "NUMBER", "json", "NUMBER", "The", "compile", "error", "be", "the", "following", "platform_gateways_response", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "convert", "nil", "to", "type", "CloudGatewayJSON", "And", "the", "generate", "code", "be", "func", "m", "PlatformGatewaysResponse", "validateGateways", "formats", "strfmt", "NUMBER", "Registry", "error", "NUMBER", "for", "k", "range", "m", "NUMBER", "Gateways", "NUMBER", "for", "i", "NUMBER", "i", "TAG", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "b", "NUMBER", "a", "NUMBER", "f", "NUMBER", "fcdf", "NUMBER", "ee", "NUMBER", "c", "NUMBER", "afe", "NUMBER", "f", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "types", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "R", "NUMBER", "cGVzLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "b", "NUMBER", "f", "NUMBER", "b", "NUMBER", "f", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "I", "be", "generating", "some", "models", "for", "a", "swagger", "spec", "where", "there", "be", "field", "that", "be", "non", "required", "optional", "NUMBER", "The", "resulting", "model", "however", "do", "not", "create", "the", "string", "as", "a", "pointer", "type", "which", "causes", "havoc", "when", "trying", "to", "marshall", "null", "from", "the", "payload", "NUMBER", "Swagger", "specification", "yaml", "Host", "properties", "state", "type", "string", "Steps", "to", "reproduce", "go", "type", "Host", "struct", "state", "State", "string", "json", "state", "omitempty", "json", "state", "null", "Environment", "swagger", "version", "HEAD", "checked", "out", "code", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "OSX", "I", "can", "reproduce", "this", "as", "well", "NUMBER", "And", "interestingly", "the", "required", "field", "be", "a", "pointer", "type", "and", "the", "non", "required", "field", "be", "a", "pointer", "type", "NUMBER", "type", "Host", "struct", "not", "required", "State", "string", "json", "state", "omitempty", "required", "Description", "string", "json", "description", "I", "think", "the", "following", "be", "expected", "right", "required", "primitive", "type", "non", "required", "pointer", "type", "however", "with", "zero", "value", "of", "empty", "string", "how", "can", "you", "distinguish", "between", "set", "unset", "vs", "zero", "value", "But", "why", "doesn", "t", "the", "same", "logic", "hold", "for", "optional", "You", "won", "t", "be", "able", "to", "distinguish", "between", "an", "optional", "field", "not", "specified", "in", "a", "response", "and", "it", "set", "to", "its", "zero", "value", "when", "you", "generate", "it", "as", "a", "primitive", "NUMBER", "There", "you", "be", "already", "treating", "unset", "as", "zero", "NUMBER", "This", "be", "entirely", "for", "validation", "NUMBER", "It", "be", "not", "an", "error", "if", "an", "optional", "field", "be", "not", "provide", "NUMBER", "It", "be", "an", "error", "if", "a", "required", "field", "be", "not", "provide", "NUMBER", "if", "we", "has", "a", "custom", "MarshalJSON", "MarshalXML", "struct", "NUMBER", "input", "data", "type", "maybe", "cant", "matched", "to", "out", "data", "type", "NUMBER", "the", "feature", "can", "be", "custom", "a", "data", "type", "its", "Like", "go", "swagger", "type", "string", "type", "OwnerInput", "struct", "func", "c", "OwnerInput", "UnmarshalJSON", "data", "byte", "error", "in", "here", "unmarshal", "a", "string", "to", "a", "golang", "struct", "who", "can", "add", "it", "to", "document", "Problem", "statement", "swagger", "generate", "client", "panics", "Swagger", "specification", "LINK", "Steps", "to", "reproduce", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "generate", "client", "f", "NUMBER", "api", "NUMBER", "swagger", "NUMBER", "json", "A", "hydrasdk", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "NUMBER", "xc", "NUMBER", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "x", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "NewSliceBranch", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "fccfc", "NUMBER", "NUMBER", "xc", "NUMBER", "C", "workspace", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildArray", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "daa", "NUMBER", "c", "NUMBER", "C", "workspace", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildItems", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "C", "workspace", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xbfc", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "makeGenSchema", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xf", "C", "workspace", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xab", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "codeGenOpBuilder", "NUMBER", "MakeResponse", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xb", "NUMBER", "b", "NUMBER", "a", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xf", "NUMBER", "xb", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "aab", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "Environment", "swagger", "version", "master", "go", "version", "NUMBER", "OS", "Win", "NUMBER", "x", "NUMBER", "Tried", "it", "with", "NUMBER", "and", "NUMBER", "with", "the", "same", "result", "NUMBER", "Same", "problem", "here", "It", "would", "fail", "on", "generate", "server", "as", "well", "NUMBER", "The", "reason", "be", "because", "in", "the", "swagger", "spec", "the", "schema", "of", "clientsList", "response", "be", "defined", "as", "type", "object", "NUMBER", "It", "should", "be", "type", "array", "clientsList", "description", "A", "list", "of", "clients", "NUMBER", "schema", "type", "array", "items", "ref", "definitions", "oauthClient", "Why", "do", "swagger", "validate", "work", "This", "commit", "LINK", "openapi", "validate", "commit", "e", "NUMBER", "b", "NUMBER", "c", "NUMBER", "c", "NUMBER", "cccee", "NUMBER", "c", "NUMBER", "fa", "NUMBER", "bd", "NUMBER", "d", "NUMBER", "f", "NUMBER", "d", "NUMBER", "d", "NUMBER", "should", "fix", "this", "problem", "NUMBER", "We", "should", "close", "this", "issue", "if", "there", "be", "no", "further", "requirements", "Problem", "statement", "I", "have", "an", "API", "that", "pulls", "login", "credentials", "from", "a", "JSON", "body", "payload", "NUMBER", "It", "works", "fine", "with", "NUMBER", "but", "with", "master", "commit", "dbc", "NUMBER", "b", "NUMBER", "at", "this", "time", "it", "breaks", "NUMBER", "Calling", "the", "endpoint", "yields", "a", "NUMBER", "with", "the", "message", "code", "NUMBER", "message", "parsing", "credentials", "body", "from", "fail", "because", "json", "cannot", "unmarshal", "object", "into", "Go", "value", "of", "type", "models", "NUMBER", "Credentials", "Binding", "in", "my", "code", "be", "do", "via", "api", "NUMBER", "AuthenticationPostLoginHandler", "authentication", "NUMBER", "PostLoginHandlerFunc", "login", "with", "function", "defnition", "func", "login", "params", "authentication", "NUMBER", "PostLoginParams", "middleware", "NUMBER", "Responder", "NUMBER", "If", "I", "checkout", "tag", "NUMBER", "everything", "works", "NUMBER", "If", "I", "checkout", "master", "it", "breaks", "NUMBER", "Swagger", "specification", "Relevant", "portions", "of", "my", "swagger", "NUMBER", "yml", "paths", "login", "post", "summary", "Login", "endpoint", "description", "Login", "here", "security", "consumes", "application", "json", "produces", "application", "json", "parameters", "name", "credentials", "in", "body", "schema", "ref", "definitions", "Credentials", "responses", "NUMBER", "description", "Success", "schema", "ref", "definitions", "Login", "NUMBER", "description", "Bad", "Request", "schema", "ref", "definitions", "Message", "NUMBER", "description", "Invalid", "credentials", "schema", "ref", "definitions", "Message", "and", "definitions", "Credentials", "properties", "username", "type", "string", "password", "type", "string", "token", "type", "string", "Steps", "to", "reproduce", "If", "it", "would", "help", "I", "can", "try", "to", "construct", "a", "minimal", "codebase", "that", "induces", "the", "error", "but", "I", "m", "hoping", "this", "be", "simple", "enough", "that", "the", "fix", "will", "be", "obvious", "to", "EleanorRigby", "and", "won", "t", "require", "that", "NUMBER", "Environment", "swagger", "version", "master", "branch", "go", "version", "NUMBER", "OS", "Linux", "CentOS", "NUMBER", "The", "pull", "request", "to", "back", "out", "the", "change", "has", "be", "created", "NUMBER", "Thanks", "I", "m", "back", "to", "normal", "now", "Problem", "statement", "Try", "to", "generate", "go", "server", "code", "and", "it", "fail", "complaining", "about", "paths", "NUMBER", "Jons", "MacBook", "Pro", "NUMBER", "xxx", "backend", "jonmclachlan", "alias", "swagger", "docker", "run", "rm", "it", "v", "HOME", "HOME", "w", "pwd", "quay", "NUMBER", "io", "goswagger", "swagger", "Jons", "MacBook", "Pro", "NUMBER", "xxx", "backend", "jonmclachlan", "swagger", "version", "version", "dev", "commit", "NUMBER", "e", "NUMBER", "bfee", "NUMBER", "ca", "NUMBER", "f", "NUMBER", "cdad", "NUMBER", "dfe", "NUMBER", "cb", "NUMBER", "Jons", "MacBook", "Pro", "NUMBER", "xxx", "backend", "jonmclachlan", "ls", "src", "morningTulips", "xxx", "xxx", "server", "Jons", "MacBook", "Pro", "NUMBER", "xxx", "backend", "jonmclachlan", "echo", "GOPATH", "Users", "jonmclachlan", "xxx", "xxx", "backend", "Jons", "MacBook", "Pro", "NUMBER", "xxx", "backend", "jonmclachlan", "swagger", "generate", "server", "f", "swagger", "swagger", "NUMBER", "yaml", "A", "xxx", "t", "xxx", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lstat", "Users", "jonmclachlan", "xxx", "xxx", "backend", "xxx", "no", "such", "file", "or", "directory", "Jons", "MacBook", "Pro", "NUMBER", "xxx", "backend", "jonmclachlan", "swagger", "generate", "server", "f", "swagger", "swagger", "NUMBER", "yaml", "A", "xxx", "t", "src", "xxx", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "target", "must", "reside", "inside", "a", "location", "in", "the", "GOPATH", "src", "Jons", "MacBook", "Pro", "NUMBER", "xxx", "backend", "jonmclachlan", "This", "use", "to", "work", "NUMBER", "Environment", "swagger", "version", "NUMBER", "e", "NUMBER", "bfee", "NUMBER", "ca", "NUMBER", "f", "NUMBER", "cdad", "NUMBER", "dfe", "NUMBER", "cb", "NUMBER", "go", "version", "whatever", "be", "in", "your", "latest", "docker", "img", "this", "be", "the", "commit", "commit", "fb", "NUMBER", "ecafe", "NUMBER", "dd", "NUMBER", "e", "NUMBER", "ea", "NUMBER", "cd", "NUMBER", "d", "NUMBER", "fd", "NUMBER", "ee", "NUMBER", "a", "NUMBER", "Author", "Tushar", "TAG", "Date", "Mon", "Aug", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Corrected", "Path", "generation", "for", "Base", "Imports", "notasecret", "Is", "your", "target", "path", "inside", "GOPATH", "Are", "there", "any", "symlinks", "that", "you", "be", "use", "in", "your", "path", "There", "was", "a", "bug", "due", "to", "which", "all", "the", "paths", "for", "code", "generation", "worked", "NUMBER", "Now", "the", "behavior", "be", "correct", "NUMBER", "Is", "your", "target", "path", "inside", "GOPATH", "Yes", "as", "you", "can", "verify", "above", "NUMBER", "Are", "there", "any", "symlinks", "that", "you", "be", "use", "in", "your", "path", "No", "sym", "link", "funny", "business", "NUMBER", "Yea", "I", "be", "trying", "to", "gen", "inside", "src", "NUMBER", "I", "think", "the", "target", "without", "the", "src", "addition", "pass", "your", "code", "checks", "because", "you", "add", "src", "folder", "to", "all", "the", "possible", "gopath", "s", "swagger", "finds", "and", "in", "other", "places", "in", "swagger", "server", "code", "gen", "the", "target", "path", "do", "not", "get", "that", "src", "folder", "appended", "to", "it", "and", "breaks", "casualjim", "many", "thx", "I", "tried", "Jons", "MacBook", "Pro", "NUMBER", "xxx", "backend", "jonmclachlan", "ls", "src", "morningTulips", "xxx", "xxx", "server", "xxx", "was", "the", "folder", "NUMBER", "Has", "NUMBER", "permissions", "too", "NUMBER", "notasecret", "target", "without", "the", "src", "folder", "fail", "in", "very", "first", "step", "of", "the", "same", "function", "because", "it", "cannot", "see", "any", "such", "directory", "NUMBER", "That", "s", "the", "lstat", "error", "NUMBER", "I", "was", "able", "to", "reproduce", "that", "NUMBER", "I", "be", "not", "able", "to", "reproduce", "your", "second", "error", "NUMBER", "When", "run", "swagger", "through", "docker", "do", "you", "pass", "environment", "variable", "GOPATH", "otherwise", "it", "defaults", "to", "HOME", "go", "notasecret", "So", "I", "finally", "find", "the", "problem", "NUMBER", "I", "noted", "that", "inside", "docker", "environment", "for", "the", "dev", "image", "I", "created", "similar", "to", "one", "on", "quay", "NUMBER", "io", "has", "GOPATH", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "target", "path", "be", "src", "test", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "tgtAbsPath", "be", "Users", "taggarwal", "go", "src", "test", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Gopath", "be", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "In", "for", "loop", "gopath", "be", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "In", "for", "loop", "gopath", "symlink", "be", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "In", "for", "loop", "gopath", "symlink", "with", "src", "be", "go", "src", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Childpath", "and", "Parentpath", "be", "Users", "taggarwal", "go", "src", "test", "and", "go", "src", "respectively", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Childpath", "and", "Parentpath", "be", "Users", "taggarwal", "go", "src", "test", "and", "go", "src", "respectively", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Childpath", "and", "Parentpath", "be", "Users", "taggarwal", "go", "src", "test", "and", "go", "src", "respectively", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "target", "must", "reside", "inside", "a", "location", "in", "the", "GOPATH", "src", "So", "the", "GOPATH", "and", "target", "path", "do", "not", "match", "NUMBER", "You", "need", "to", "pass", "the", "intended", "GOPATH", "as", "environment", "variable", "inside", "docker", "run", "command", "like", "the", "one", "below", "NUMBER", "DO", "NOT", "APPEND", "src", "to", "it", "This", "worked", "for", "me", "and", "hopefully", "will", "unblock", "you", "too", "NUMBER", "alias", "swagger", "docker", "run", "e", "GOPATH", "Users", "taggarwal", "go", "rm", "it", "v", "HOME", "HOME", "w", "pwd", "swagger", "dev", "Also", "create", "the", "intended", "directory", "before", "you", "run", "this", "command", "NUMBER", "Evaluation", "of", "symlink", "confusing", "stuff", "but", "people", "still", "use", "it", "in", "target", "path", "raises", "the", "lstat", "error", "if", "target", "path", "do", "not", "exist", "NUMBER", "I", "be", "starting", "the", "work", "to", "fix", "this", "NUMBER", "Possible", "solution", "be", "creating", "the", "target", "path", "if", "it", "doesn", "t", "exist", "before", "evaluation", "of", "any", "kind", "NUMBER", "Why", "it", "doesn", "t", "work", "now", "and", "use", "to", "work", "earlier", "The", "earlier", "code", "had", "a", "bug", "it", "never", "checked", "whether", "the", "target", "path", "be", "inside", "GOPATH", "NUMBER", "While", "most", "users", "had", "target", "path", "inside", "GOPATH", "src", "but", "those", "who", "did", "not", "were", "facing", "generation", "of", "wrong", "import", "paths", "NUMBER", "Post", "my", "commit", "the", "correction", "happened", "and", "it", "stopped", "work", "for", "you", "NUMBER", "EleanorRigby", "that", "was", "it", "exactly", "my", "bad", "many", "thx", "closing", "NUMBER", "Problem", "statement", "Assume", "a", "file", "with", "a", "swagger", "model", "and", "a", "struct", "and", "a", "function", "type", "struct", "SomeStruct", "MyType", "swagger", "model", "foo", "struct", "MyModel", "type", "MyType", "func", "swager", "generate", "spec", "m", "will", "fail", "NUMBER", "To", "resolve", "that", "we", "have", "to", "move", "the", "model", "in", "it", "s", "separate", "file", "NUMBER", "Instead", "only", "the", "swagger", "annotated", "field", "should", "be", "inspected", "or", "unsupported", "types", "simply", "ignored", "e", "NUMBER", "g", "NUMBER", "with", "a", "warning", "NUMBER", "This", "just", "start", "happening", "with", "NUMBER", "I", "believe", "NUMBER", "Problem", "statement", "Generated", "models", "structure", "has", "change", "for", "composites", "from", "type", "ReportScore", "struct", "ScoreData", "LastUpdateTime", "string", "json", "lastUpdateTime", "to", "type", "ReportScore", "struct", "ScoreData", "ReportScoreAllOf", "NUMBER", "for", "the", "following", "specification", "Swagger", "specification", "ReportScore", "allOf", "ref", "definitions", "ScoreData", "type", "object", "properties", "lastUpdateTime", "type", "string", "required", "lastUpdateTime", "Steps", "to", "reproduce", "swagger", "generate", "client", "t", "swaggen", "f", "apispec", "NUMBER", "yaml", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Mac", "OS", "NUMBER", "Problem", "statement", "On", "Mac", "go", "swagger", "v", "NUMBER", "the", "command", "swagger", "generate", "server", "name", "weaviate", "spec", "LINK", "swagger", "develop", "weaviate", "swagger", "NUMBER", "json", "default", "scheme", "https", "fail", "with", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "SIGSEGV", "segmentation", "violation", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "xd", "pc", "NUMBER", "x", "NUMBER", "bc", "NUMBER", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "makeGenSchema", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "fbcf", "NUMBER", "NUMBER", "x", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildProperties", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "makeGenSchema", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "makeGenDefinitionHierarchy", "NUMBER", "xc", "NUMBER", "fbd", "NUMBER", "b", "NUMBER", "NUMBER", "xf", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "makeGenDefinition", "NUMBER", "xc", "NUMBER", "fbd", "NUMBER", "b", "NUMBER", "NUMBER", "xf", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xbc", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "makeCodegenApp", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "Generate", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "GenerateServer", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "fbffab", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "xcb", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "NUMBER", "Server", "NUMBER", "Execute", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "ParseArgs", "NUMBER", "xc", "NUMBER", "dc", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "ef", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "Parse", "NUMBER", "xc", "NUMBER", "dc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "a", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ec", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "main", "NUMBER", "main", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "Thanks", "in", "advance", "Update", "the", "swagger", "file", "was", "incorrectly", "formatted", "NUMBER", "Funny", "thing", "it", "did", "pass", "the", "swagger", "validate", "command", "though", "to", "recreate", "the", "issue", "you", "can", "use", "the", "swagger", "file", "as", "mention", "above", "NUMBER", "receiving", "the", "same", "error", "NUMBER", "bobvanluijt", "Can", "you", "elaborate", "on", "what", "incorrect", "format", "triggers", "the", "segfault", "johnciocoiu", "can", "you", "help", "Ravenwater", "bobvanluijt", "Ravenwater", "Somewhere", "in", "the", "swagger", "we", "use", "type", "array", "for", "a", "property", "without", "setting", "the", "items", "NUMBER", "I", "think", "that", "was", "the", "thing", "cause", "the", "error", "in", "our", "case", "NUMBER", "casualjim", "did", "you", "receive", "the", "spec", "file", "through", "email", "to", "try", "to", "reproduce", "it", "I", "have", "narrowed", "it", "down", "to", "this", "data", "definition", "regiment", "type", "object", "items", "ref", "definitions", "demand", "demand", "type", "object", "required", "package", "plan", "properties", "package", "type", "string", "plan", "type", "number", "format", "float", "Add", "this", "and", "it", "produces", "the", "error", "swagger", "generate", "server", "f", "mp", "scoring", "api", "bad", "NUMBER", "yaml", "P", "models", "NUMBER", "Principal", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "NUMBER", "xc", "NUMBER", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "xd", "pc", "NUMBER", "x", "NUMBER", "b", "NUMBER", "a", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "NewSliceBranch", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildArray", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildItems", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xbfc", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "makeGenSchema", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "d", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xab", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "makeGenDefinitionHierarchy", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "makeGenDefinition", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xc", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "makeCodegenApp", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "Generate", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "xbd", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "GenerateServer", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "xd", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "NUMBER", "Server", "NUMBER", "Execute", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "e", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "ParseArgs", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ef", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "cc", "NUMBER", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "Parse", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xb", "NUMBER", "ebfb", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xbe", "NUMBER", "d", "NUMBER", "e", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "main", "NUMBER", "main", "C", "Users", "tomtz", "dev", "Golang", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "NUMBER", "go", "NUMBER", "NUMBER", "xd", "NUMBER", "a", "next", "step", "be", "to", "drill", "down", "in", "the", "stack", "trace", "NUMBER", "Was", "just", "typing", "the", "same", "observation", "regard", "the", "incorrect", "use", "of", "type", "object", "where", "there", "needs", "to", "be", "a", "type", "array", "NUMBER", "when", "your", "update", "came", "in", "NUMBER", "Thank", "you", "for", "the", "DEBUG", "NUMBER", "trick", "that", "will", "help", "me", "in", "the", "future", "NUMBER", "Very", "much", "appreciated", "NUMBER", "Now", "go", "openapi", "validate", "guarantees", "that", "this", "issue", "won", "t", "happen", "again", "i", "faced", "the", "same", "issue", "by", "use", "yaml", "responses", "NUMBER", "description", "successful", "operation", "schema", "type", "object", "items", "ref", "definitions", "Server", "which", "results", "in", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "SIGSEGV", "segmentation", "violation", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "x", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "f", "NUMBER", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "NewSliceBranch", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "ec", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "kreamyx", "so", "your", "saying", "that", "swagger", "validate", "should", "detect", "this", "error", "when", "i", "run", "swagger", "validate", "it", "returns", "with", "valid", "spec", "swagger", "validate", "api", "description", "NUMBER", "yaml", "The", "swagger", "spec", "at", "api", "description", "NUMBER", "yaml", "be", "valid", "against", "swagger", "specification", "NUMBER", "This", "panic", "should", "be", "fix", "in", "master", "NUMBER", "sklemmer", "yes", "validate", "detects", "the", "error", "if", "you", "be", "on", "master", "Problem", "statement", "Getting", "a", "NUMBER", "response", "from", "a", "server", "results", "in", "the", "following", "error", "ERROR", "TAG", "models", "NUMBER", "Error", "be", "not", "support", "by", "the", "TextConsumer", "can", "be", "resolve", "by", "support", "TextUnmarshaler", "interface", "If", "you", "add", "the", "interface", "to", "models", "NUMBER", "Error", "eg", "go", "func", "m", "Error", "MarshalText", "text", "byte", "err", "error", "return", "byte", "fmt", "NUMBER", "Sprintf", "sup", "v", "v", "m", "m", "NUMBER", "Error", "nil", "func", "m", "Error", "UnmarshalText", "text", "byte", "error", "if", "m", "NUMBER", "Error", "nil", "m", "NUMBER", "Error", "ErrorBody", "if", "text", "nil", "m", "NUMBER", "Error", "NUMBER", "Message", "NIL", "BYTES", "YO", "return", "nil", "m", "NUMBER", "Error", "NUMBER", "Message", "fmt", "NUMBER", "Sprintf", "UNYO", "v", "string", "text", "return", "nil", "Then", "it", "works", "a", "tiny", "bit", "better", "you", "get", "a", "slightly", "better", "error", "message", "but", "not", "much", "NUMBER", "But", "the", "bigger", "issue", "be", "that", "it", "returns", "an", "error", "that", "you", "can", "t", "get", "any", "info", "out", "of", "when", "it", "should", "try", "redirecting", "NUMBER", "treeder", "We", "have", "backed", "out", "the", "change", "as", "it", "start", "to", "break", "build", "NUMBER", "We", "will", "be", "work", "on", "redirect", "NUMBER", "response", "code", "casualjim", "can", "you", "re", "open", "this", "one", "treeder", "I", "think", "golang", "s", "net", "http", "client", "should", "be", "able", "to", "handle", "NUMBER", "retries", "NUMBER", "Are", "you", "specify", "location", "header", "in", "your", "swagger", "spec", "for", "the", "particular", "path", "No", "the", "server", "be", "sending", "the", "redirect", "location", "NUMBER", "Here", "s", "the", "response", "HTTP", "NUMBER", "NUMBER", "Temporary", "Redirect", "Content", "Length", "NUMBER", "Content", "Type", "text", "plain", "charset", "utf", "NUMBER", "Date", "Thu", "NUMBER", "Sep", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Location", "v", "NUMBER", "apps", "helloapp", "routes", "ERROR", "TAG", "models", "NUMBER", "Error", "be", "not", "support", "by", "the", "TextConsumer", "can", "be", "resolve", "by", "support", "TextUnmarshaler", "interface", "casualjim", "Do", "you", "have", "an", "idea", "what", "might", "be", "preventing", "redirection", "to", "be", "handle", "inside", "of", "http", "client", "In", "client", "NUMBER", "go", "in", "net", "http", "package", "I", "see", "redirect", "request", "be", "turned", "down", "in", "the", "following", "two", "cases", "Look", "at", "shouldRedirect", "flag", "Treat", "NUMBER", "and", "NUMBER", "specially", "since", "they", "re", "new", "in", "Go", "NUMBER", "and", "they", "also", "require", "re", "sending", "the", "request", "body", "NUMBER", "if", "resp", "NUMBER", "Header", "NUMBER", "Get", "Location", "NUMBER", "s", "have", "be", "observed", "in", "the", "wild", "be", "served", "without", "Location", "headers", "NUMBER", "Since", "Go", "NUMBER", "and", "earlier", "didn", "t", "follow", "these", "code", "just", "stop", "here", "instead", "of", "returning", "an", "error", "NUMBER", "See", "Issue", "NUMBER", "shouldRedirect", "false", "break", "if", "ireq", "NUMBER", "GetBody", "nil", "ireq", "NUMBER", "outgoingLength", "NUMBER", "We", "had", "a", "request", "body", "and", "NUMBER", "NUMBER", "require", "re", "sending", "it", "but", "GetBody", "be", "not", "defined", "NUMBER", "So", "just", "return", "this", "response", "to", "the", "user", "instead", "of", "an", "error", "like", "we", "did", "in", "Go", "NUMBER", "and", "earlier", "NUMBER", "shouldRedirect", "false", "As", "treeder", "mention", "Location", "header", "be", "present", "I", "think", "GetBody", "method", "be", "nil", "NUMBER", "The", "following", "test", "code", "from", "LINK", "_test", "NUMBER", "go", "shows", "the", "req", "NUMBER", "GetBody", "be", "set", "to", "nil", "not", "by", "default", "NUMBER", "Is", "there", "any", "way", "to", "prevent", "go", "swagger", "from", "setting", "it", "to", "nil", "go", "Don", "t", "follow", "a", "NUMBER", "NUMBER", "if", "we", "can", "t", "resent", "the", "request", "body", "NUMBER", "func", "TestClientRedirect", "NUMBER", "NoGetBody", "t", "test", "NUMBER", "T", "const", "fakeURL", "LINK", "won", "t", "be", "hit", "ts", "httptest", "NUMBER", "NewServer", "HandlerFunc", "func", "w", "ResponseWriter", "r", "Request", "w", "NUMBER", "Header", "NUMBER", "Set", "Location", "fakeURL", "w", "NUMBER", "WriteHeader", "NUMBER", "defer", "ts", "NUMBER", "Close", "req", "err", "NewRequest", "POST", "ts", "NUMBER", "URL", "strings", "NUMBER", "NewReader", "some", "body", "if", "err", "nil", "t", "NUMBER", "Fatal", "err", "c", "ts", "NUMBER", "Client", "req", "NUMBER", "GetBody", "nil", "so", "it", "can", "t", "rewind", "NUMBER", "res", "err", "c", "NUMBER", "Do", "req", "if", "err", "nil", "t", "NUMBER", "Fatal", "err", "res", "NUMBER", "Body", "NUMBER", "Close", "if", "res", "NUMBER", "StatusCode", "NUMBER", "t", "NUMBER", "Errorf", "status", "d", "want", "d", "res", "NUMBER", "StatusCode", "NUMBER", "Problem", "statement", "The", "go", "openapi", "runtime", "library", "has", "introduce", "a", "backwards", "incompatible", "API", "change", "LINK", "openapi", "runtime", "commit", "NUMBER", "fd", "NUMBER", "aae", "NUMBER", "b", "NUMBER", "b", "NUMBER", "df", "NUMBER", "d", "NUMBER", "b", "NUMBER", "ae", "NUMBER", "where", "a", "new", "interface", "Authorizer", "LINK", "openapi", "runtime", "commit", "NUMBER", "fd", "NUMBER", "aae", "NUMBER", "b", "NUMBER", "b", "NUMBER", "df", "NUMBER", "d", "NUMBER", "b", "NUMBER", "ae", "NUMBER", "diff", "NUMBER", "e", "NUMBER", "d", "NUMBER", "e", "NUMBER", "dd", "NUMBER", "ee", "NUMBER", "ea", "NUMBER", "R", "NUMBER", "be", "required", "to", "be", "implement", "and", "causes", "the", "following", "error", "sh", "service", "http", "restapi", "operations", "my_api", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "use", "o", "type", "MyAPI", "as", "type", "middleware", "NUMBER", "RoutableAPI", "in", "argument", "to", "middleware", "NUMBER", "NewRoutableContext", "MyAPI", "do", "not", "implement", "middleware", "NUMBER", "RoutableAPI", "miss", "Authorizer", "method", "Swagger", "specification", "v", "NUMBER", "Steps", "to", "reproduce", "sh", "swagger", "generate", "server", "f", "NUMBER", "swagger", "swagger", "NUMBER", "yml", "t", "NUMBER", "service", "http", "go", "get", "github", "NUMBER", "com", "go", "openapi", "runtime", "go", "get", "github", "NUMBER", "com", "tylerb", "graceful", "go", "get", "github", "NUMBER", "com", "jessevdk", "go", "flags", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "NUMBER", "OS", "Windows", "NUMBER", "Alpine", "Linux", "I", "believe", "NUMBER", "has", "become", "victim", "of", "this", "as", "well", "NUMBER", "For", "now", "we", "be", "pinning", "the", "run", "time", "to", "the", "hash", "before", "the", "specific", "commit", "NUMBER", "We", "use", "Glide", "LINK", "internally", "for", "dependency", "management", "NUMBER", "For", "those", "affected", "add", "this", "into", "your", "glide", "NUMBER", "yaml", "file", "yaml", "package", "github", "NUMBER", "com", "go", "openapi", "runtime", "version", "f", "NUMBER", "ecfd", "NUMBER", "e", "NUMBER", "d", "NUMBER", "db", "NUMBER", "fb", "NUMBER", "bd", "NUMBER", "b", "NUMBER", "dec", "NUMBER", "Hi", "all", "how", "can", "I", "solve", "it", "with", "govendor", "Many", "thanks", "jorgesece", "Having", "a", "quick", "look", "at", "the", "govendor", "readme", "I", "think", "govendor", "fetch", "github", "NUMBER", "com", "go", "openapi", "runtime", "f", "NUMBER", "ecfd", "NUMBER", "e", "NUMBER", "d", "NUMBER", "db", "NUMBER", "fb", "NUMBER", "bd", "NUMBER", "b", "NUMBER", "dec", "NUMBER", "should", "do", "the", "trick", "NUMBER", "Hi", "MatthewHartstonge", "Setting", "the", "revision", "to", "f", "NUMBER", "ecfd", "NUMBER", "e", "NUMBER", "d", "NUMBER", "db", "NUMBER", "fb", "NUMBER", "bd", "NUMBER", "b", "NUMBER", "dec", "NUMBER", "I", "get", "another", "error", "undefined", "runtime", "NUMBER", "Authorizer", "NUMBER", "Do", "you", "have", "any", "idea", "how", "to", "solve", "it", "This", "issue", "seems", "to", "be", "reintroduced", "in", "the", "latest", "image", "NUMBER", "Same", "issue", "here", "NUMBER", "Generated", "server", "code", "won", "t", "run", "because", "runtime", "NUMBER", "Authorizer", "be", "not", "defined", "NUMBER", "Is", "this", "project", "still", "active", "I", "be", "having", "this", "same", "problem", "and", "it", "do", "not", "seem", "to", "be", "be", "address", "rolling", "back", "version", "fix", "it", "but", "breaks", "stuff", "elsewhere", "NUMBER", "Models", "with", "x", "go", "type", "cause", "a", "panic", "when", "generating", "corresponding", "file", "This", "patch", "corrects", "that", "sh", "NUMBER", "git", "rev", "parse", "HEAD", "go", "run", "cmd", "swagger", "swagger", "NUMBER", "go", "generate", "model", "f", "fixture", "codegen", "exist", "model", "NUMBER", "yml", "NUMBER", "c", "NUMBER", "ac", "NUMBER", "c", "NUMBER", "fb", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "model", "JsonWebKeySet", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "JsonWebKeySet", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "json_web_key_set", "NUMBER", "go", "in", "models", "as", "definition", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "JsonWebKeySet", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "SIGSEGV", "segmentation", "violation", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "x", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "da", "NUMBER", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "GenOpts", "NUMBER", "renderDefinition", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "josh", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "shared", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "definitionGenerator", "NUMBER", "generateModel", "NUMBER", "xc", "NUMBER", "bb", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "NUMBER", "x", "NUMBER", "Users", "josh", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "definitionGenerator", "NUMBER", "Generate", "NUMBER", "xc", "NUMBER", "bb", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "josh", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "da", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "GenerateDefinition", "NUMBER", "xc", "NUMBER", "fed", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "josh", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "NUMBER", "Model", "NUMBER", "Execute", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "josh", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "ba", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "ParseArgs", "NUMBER", "xc", "NUMBER", "ab", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "ca", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "aba", "NUMBER", "Users", "josh", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "Parse", "NUMBER", "xc", "NUMBER", "ab", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "eb", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "fc", "NUMBER", "Users", "josh", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "main", "NUMBER", "main", "Users", "josh", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "NUMBER", "go", "NUMBER", "NUMBER", "xd", "NUMBER", "exit", "status", "NUMBER", "sh", "NUMBER", "sh", "NUMBER", "sh", "NUMBER", "sh", "NUMBER", "sh", "NUMBER", "git", "checkout", "model", "go", "extension", "Switched", "to", "branch", "model", "go", "extension", "sh", "NUMBER", "git", "rev", "parse", "HEAD", "go", "run", "cmd", "swagger", "swagger", "NUMBER", "go", "generate", "model", "f", "fixture", "codegen", "exist", "model", "NUMBER", "yml", "b", "NUMBER", "d", "NUMBER", "a", "NUMBER", "ad", "NUMBER", "e", "NUMBER", "aa", "NUMBER", "d", "NUMBER", "a", "NUMBER", "fe", "NUMBER", "a", "NUMBER", "b", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "model", "JsonWebKeySet", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "JsonWebKeySet", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "json_web_key_set", "NUMBER", "go", "in", "models", "as", "definition", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "JsonWebKeySet", "Generation", "completed", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "github", "NUMBER", "com", "go", "openapi", "runtime", "You", "can", "get", "these", "now", "with", "go", "get", "u", "f", "NUMBER", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "f", "NUMBER", "be", "NUMBER", "dfa", "NUMBER", "d", "NUMBER", "eaf", "NUMBER", "a", "NUMBER", "d", "NUMBER", "ea", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "cmd", "swagger", "commands", "generate", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvbW", "NUMBER", "kZWwuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Y", "NUMBER", "kL", "NUMBER", "N", "NUMBER", "YWdnZXIvY", "NUMBER", "tbWFuZHMvZ", "NUMBER", "VuZXJhdGUvc", "NUMBER", "VydmVyLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "f", "NUMBER", "d", "NUMBER", "b", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Left", "in", "a", "commented", "line", "push", "new", "commit", "to", "remove", "it", "casualjim", "I", "attempted", "but", "the", "test", "in", "the", "generator", "package", "don", "t", "test", "the", "file", "system", "portion", "so", "I", "wasn", "t", "sure", "where", "to", "start", "NUMBER", "If", "you", "can", "direct", "me", "I", "ll", "happily", "add", "a", "test", "Running", "generate", "server", "skip", "operations", "skip", "support", "exclude", "main", "exclude", "spec", "works", "but", "generate", "model", "do", "not", "The", "generate", "model", "command", "now", "just", "flows", "through", "generate", "server", "simplifying", "and", "remove", "most", "of", "the", "model", "code", "Problem", "statement", "Cannot", "compile", "code", "generate", "by", "swagger", "binary", "NUMBER", "go", "build", "o", "bin", "image", "manager", "NUMBER", "cmd", "image", "manager", "NUMBER", "NUMBER", "gen", "restapi", "operations", "image_manager_api", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "use", "o", "type", "ImageManagerAPI", "as", "type", "middleware", "NUMBER", "RoutableAPI", "in", "argument", "to", "middleware", "NUMBER", "NewRoutableContext", "ImageManagerAPI", "do", "not", "implement", "middleware", "NUMBER", "RoutableAPI", "miss", "Authorizer", "method", "Swagger", "specification", "Steps", "to", "reproduce", "Install", "swagger", "via", "brew", "generate", "server", "build", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "darwin", "Problem", "statement", "swagger", "response", "annotation", "be", "not", "generating", "properties", "in", "json", "file", "NUMBER", "I", "be", "use", "same", "example", "as", "shown", "in", "LINK", "swagger", "go", "swagger", "blob", "master", "docs", "generate", "spec", "response", "NUMBER", "md", "I", "be", "not", "sure", "what", "be", "miss", "similar", "issue", "be", "faced", "when", "use", "swagger", "parmeters", "example", "Steps", "to", "reproduce", "here", "be", "code", "in", "test", "NUMBER", "go", "file", "go", "package", "main", "A", "ValidationError", "be", "an", "error", "that", "be", "use", "when", "the", "required", "input", "fail", "validation", "NUMBER", "swagger", "response", "validationError", "type", "ValidationError", "struct", "The", "error", "message", "in", "body", "Body", "struct", "The", "validation", "message", "Required", "true", "message", "string", "An", "optional", "field", "name", "to", "which", "this", "validation", "applies", "fieldName", "string", "execute", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "command", "swagger", "NUMBER", "json", "generate", "be", "json", "swagger", "NUMBER", "paths", "responses", "validationError", "description", "A", "ValidationError", "be", "an", "error", "that", "be", "use", "when", "the", "required", "input", "fail", "validation", "NUMBER", "schema", "type", "object", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "mac", "Sorry", "but", "i", "be", "not", "clear", "what", "do", "you", "mean", "by", "properties", "in", "the", "body", "struct", "need", "to", "be", "export", "NUMBER", "can", "you", "give", "a", "example", "But", "with", "exporting", "properties", "capitalizing", "and", "run", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "command", "i", "see", "error", "unable", "to", "determine", "package", "So", "here", "be", "my", "test", "NUMBER", "go", "package", "main", "import", "test", "validation", "fmt", "swagger", "route", "GET", "v", "NUMBER", "list", "validationError", "Get", "list", "of", "something", "Responses", "NUMBER", "validationError", "func", "main", "fmt", "NUMBER", "Println", "validation", "NUMBER", "ValidationError", "And", "validation", "NUMBER", "go", "swagger", "response", "validationError", "type", "ValidationError", "struct", "The", "error", "message", "in", "body", "Body", "struct", "The", "validation", "message", "Required", "true", "Message", "string", "An", "optional", "field", "name", "to", "which", "this", "validation", "applies", "FieldName", "string", "and", "still", "json", "generate", "be", "swagger", "NUMBER", "paths", "v", "NUMBER", "list", "get", "description", "Get", "list", "of", "something", "operationId", "validationError", "responses", "NUMBER", "ref", "responses", "validationError", "Sorry", "but", "i", "just", "want", "one", "basic", "example", "to", "get", "work", "so", "that", "i", "work", "with", "other", "file", "Can", "i", "get", "some", "help", "with", "this", "properties", "be", "still", "miss", "in", "swagger", "NUMBER", "json", "file", "casualjim", "I", "was", "able", "to", "generate", "correct", "json", "file", "NUMBER", "Thanks", "for", "your", "help", "Problem", "statement", "Schema", "be", "empty", "if", "I", "use", "ref", "NUMBER", "Example", "below", "NUMBER", "Swagger", "specification", "swagger", "NUMBER", "basePath", "base", "path", "paths", "some", "path", "get", "responses", "NUMBER", "description", "I", "can", "read", "this", "value", "schema", "ref", "definitions", "SomeResponse", "definitions", "SomeResponse", "description", "No", "overwrite", "at", "all", "NUMBER", "properties", "someField", "type", "integer", "format", "int", "NUMBER", "example", "NUMBER", "required", "someField", "Steps", "to", "reproduce", "Run", "the", "following", "code", "spec", "_", "loads", "NUMBER", "Spec", "pathToFile", "spec", "NUMBER", "Spec", "NUMBER", "Paths", "NUMBER", "Paths", "some", "path", "NUMBER", "Get", "NUMBER", "Responses", "NUMBER", "StatusCodeResponses", "NUMBER", "NUMBER", "Schema", "It", "will", "return", "an", "empty", "spec", "NUMBER", "Schema", "struct", "NUMBER", "It", "ignores", "the", "whole", "ref", "definition", "NUMBER", "Can", "t", "read", "Schema", "NUMBER", "Properties", "or", "Schema", "NUMBER", "Required", "properties", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "NUMBER", "OS", "darwin", "amd", "NUMBER", "Casualjim", "you", "have", "saved", "my", "life", "NUMBER", "spec", "NUMBER", "ResolveRef", "be", "the", "solution", "NUMBER", "Thanks", "NUMBER", "Environment", "swagger", "version", "commit", "e", "NUMBER", "bfe", "NUMBER", "b", "NUMBER", "df", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "d", "NUMBER", "cc", "NUMBER", "bf", "NUMBER", "b", "go", "version", "NUMBER", "OS", "OSX", "swagger", "generate", "server", "NUMBER", "swagger", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "SIGSEGV", "segmentation", "violation", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "xd", "pc", "NUMBER", "x", "NUMBER", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "NewSliceBranch", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "fc", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildArray", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xe", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildItems", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xc", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "makeGenSchema", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "ac", "NUMBER", "c", "NUMBER", "x", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xabc", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildProperties", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "makeGenSchema", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "bc", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "makeGenDefinitionHierarchy", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "makeGenDefinition", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xbc", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "makeCodegenApp", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "Generate", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "GenerateServer", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "ef", "NUMBER", "b", "NUMBER", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "xcb", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "NUMBER", "Server", "NUMBER", "Execute", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "ParseArgs", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "cd", "NUMBER", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "Parse", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "aa", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "c", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "main", "NUMBER", "main", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "panics", "with", "the", "following", "swagger", "file", "NUMBER", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "User", "Management", "basePath", "v", "NUMBER", "schemes", "http", "produces", "application", "json", "consumes", "application", "json", "security", "jwt", "paths", "user", "get", "summary", "generates", "a", "list", "of", "users", "parameters", "in", "query", "name", "offset", "type", "integer", "description", "The", "number", "of", "items", "to", "skip", "before", "starting", "to", "collect", "the", "result", "set", "in", "query", "name", "limit", "type", "integer", "description", "The", "numbers", "of", "items", "to", "return", "responses", "NUMBER", "description", "full", "user", "list", "schema", "type", "array", "items", "properties", "id", "type", "integer", "username", "type", "string", "created", "type", "string", "f", "NUMBER", "a", "type", "integer", "default", "ref", "responses", "DefaultError", "user", "login", "post", "security", "summary", "generates", "a", "swt", "token", "to", "use", "for", "authentication", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "Login", "responses", "NUMBER", "description", "A", "jwt", "token", "to", "use", "for", "authentication", "NUMBER", "schema", "ref", "definitions", "Jwt", "NUMBER", "description", "Account", "be", "with", "NUMBER", "factor", "authenticaiton", "so", "use", "the", "NUMBER", "factor", "endpoint", "to", "generate", "the", "final", "the", "jwt", "token", "NUMBER", "schema", "ref", "definitions", "Jwt", "NUMBER", "description", "Password", "change", "be", "required", "hit", "the", "password", "reset", "endpoint", "with", "the", "generate", "jwt", "token", "schema", "ref", "definitions", "Jwt", "default", "ref", "responses", "DefaultError", "user", "NUMBER", "fa", "delete", "summary", "disable", "NUMBER", "factor", "authenticaiton", "for", "an", "account", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "F", "NUMBER", "aDisable", "responses", "NUMBER", "description", "NUMBER", "fa", "disabled", "NUMBER", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "get", "summary", "generate", "qr", "base", "NUMBER", "encoded", "image", "and", "master", "code", "for", "the", "user", "to", "scan", "with", "the", "google", "authenticator", "and", "add", "it", "to", "the", "phone", "app", "responses", "NUMBER", "description", "A", "NUMBER", "fa", "object", "NUMBER", "schema", "properties", "qr", "type", "string", "secret", "type", "string", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "put", "summary", "enable", "NUMBER", "fa", "on", "an", "account", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "F", "NUMBER", "aEnable", "responses", "NUMBER", "description", "NUMBER", "fa", "enable", "NUMBER", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "post", "summary", "use", "when", "the", "account", "be", "with", "NUMBER", "factor", "authentication", "enable", "NUMBER", "use", "the", "login", "endpoint", "first", "to", "get", "the", "initial", "jwt", "token", "and", "than", "use", "this", "endpoint", "to", "get", "the", "second", "jwt", "token", "after", "provide", "a", "valid", "google", "authenticator", "code", "security", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "F", "NUMBER", "aAuth", "responses", "NUMBER", "description", "the", "new", "jwt", "token", "that", "can", "be", "use", "for", "all", "endpoints", "NUMBER", "schema", "ref", "definitions", "Jwt", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "user", "management", "post", "summary", "creates", "a", "new", "user", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "Profile", "responses", "NUMBER", "description", "An", "user", "id", "of", "the", "created", "user", "NUMBER", "schema", "type", "object", "properties", "id_profile", "type", "integer", "NUMBER", "ref", "responses", "UnauthorizedError", "NUMBER", "ref", "responses", "UserExistsError", "default", "ref", "responses", "DefaultError", "put", "summary", "update", "an", "exist", "user", "only", "submited", "field", "will", "be", "update", "so", "can", "ommit", "the", "ones", "that", "don", "t", "need", "update", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "ProfileUpdate", "responses", "NUMBER", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "delete", "summary", "deletes", "a", "user", "from", "the", "db", "parameters", "in", "body", "name", "body", "schema", "type", "object", "required", "id_profile", "properties", "id_profile", "type", "integer", "responses", "NUMBER", "description", "user", "delete", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "user", "password", "post", "summary", "reset", "an", "user", "password", "when", "old", "password", "be", "not", "provide", "the", "user", "will", "be", "required", "to", "change", "its", "password", "upon", "next", "login", "use", "a", "temporary", "password", "provide", "by", "an", "admin", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "PassReset", "responses", "NUMBER", "description", "user", "update", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "put", "summary", "resets", "an", "user", "password", "use", "a", "temporary", "password", "provide", "by", "an", "admin", "once", "reset", "you", "can", "login", "as", "normal", "use", "the", "new", "password", "security", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "PassResetTemp", "responses", "NUMBER", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "user", "role", "get", "summary", "generates", "a", "list", "of", "all", "user", "roles", "parameters", "in", "query", "name", "offset", "type", "integer", "description", "The", "number", "of", "items", "to", "skip", "before", "starting", "to", "collect", "the", "result", "set", "in", "query", "name", "limit", "type", "integer", "description", "The", "numbers", "of", "items", "to", "return", "responses", "NUMBER", "description", "full", "roles", "list", "schema", "type", "array", "items", "ref", "definitions", "UserRole", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "post", "summary", "creates", "a", "new", "role", "parameters", "in", "body", "name", "body", "description", "the", "id", "field", "here", "be", "not", "use", "so", "you", "can", "put", "any", "number", "to", "pass", "the", "validation", "schema", "ref", "definitions", "UserRole", "responses", "NUMBER", "description", "the", "id", "of", "the", "created", "role", "NUMBER", "schema", "type", "object", "properties", "id", "type", "integer", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "put", "summary", "update", "a", "role", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "UserRole", "responses", "NUMBER", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "delete", "summary", "deletes", "a", "role", "parameters", "in", "body", "name", "body", "schema", "type", "object", "required", "id", "properties", "id", "type", "integer", "responses", "NUMBER", "description", "role", "delete", "NUMBER", "ref", "responses", "UnauthorizedError", "default", "ref", "responses", "DefaultError", "responses", "UnauthorizedError", "description", "Authentication", "be", "miss", "or", "invalid", "schema", "ref", "definitions", "Response", "UserExistsError", "description", "Username", "already", "taken", "schema", "ref", "definitions", "Response", "DefaultError", "description", "Generic", "Error", "use", "for", "most", "error", "responses", "it", "returns", "a", "custom", "code", "and", "message", "depending", "on", "the", "reply", "context", "schema", "ref", "definitions", "Response", "definitions", "Jwt", "type", "object", "required", "jwt", "properties", "jwt", "type", "string", "F", "NUMBER", "aAuth", "type", "object", "required", "jwt", "f", "NUMBER", "a", "properties", "jwt", "type", "string", "description", "the", "jwt", "token", "accuired", "form", "the", "initial", "login", "f", "NUMBER", "a", "type", "string", "description", "the", "NUMBER", "factor", "time", "code", "accuired", "from", "the", "google", "authenticator", "app", "PassReset", "type", "object", "required", "id_profile", "password_new", "properties", "id_profile", "type", "integer", "password_old", "type", "string", "password_new", "type", "string", "PassResetTemp", "type", "object", "required", "jwt", "passwordNew", "properties", "jwt", "type", "string", "description", "the", "jwt", "token", "accuired", "form", "the", "initial", "login", "passwordNew", "type", "string", "description", "the", "new", "password", "for", "this", "user", "F", "NUMBER", "aDisable", "type", "object", "required", "password", "properties", "password", "type", "string", "F", "NUMBER", "aEnable", "type", "object", "required", "code", "secret", "properties", "code", "type", "string", "description", "the", "NUMBER", "factor", "code", "generted", "by", "the", "android", "app", "after", "scanning", "the", "barcode", "secret", "type", "string", "description", "the", "master", "password", "which", "will", "be", "use", "to", "for", "decoding", "Login", "type", "object", "required", "username", "password", "properties", "username", "type", "string", "password", "type", "string", "example", "username", "admin", "mail", "NUMBER", "com", "password", "password", "Profile", "type", "object", "required", "username", "password", "active", "role", "tenant_id", "person_id", "reset_password_next_login", "properties", "username", "type", "string", "password", "type", "string", "reset_password_next_login", "type", "boolean", "active", "type", "boolean", "email", "type", "string", "role", "items", "type", "integer", "tenant_id", "type", "integer", "person_id", "type", "integer", "example", "username", "username", "email", "admin", "mail", "NUMBER", "com", "password", "password", "active", "true", "reset_password_next_login", "false", "tenant_id", "NUMBER", "person_id", "NUMBER", "role", "NUMBER", "NUMBER", "ProfileUpdate", "type", "object", "required", "id", "properties", "id", "type", "integer", "username", "type", "string", "reset_password_next_login", "type", "string", "enum", "true", "false", "password", "type", "string", "active", "type", "string", "enum", "true", "false", "email", "type", "string", "role", "items", "type", "integer", "tenant_id", "type", "integer", "person_id", "type", "integer", "example", "id", "NUMBER", "username", "username", "email", "admin", "mail", "NUMBER", "com", "password", "password", "reset_password_next_login", "false", "active", "true", "tenant_id", "NUMBER", "person_id", "NUMBER", "role", "NUMBER", "NUMBER", "UserRole", "type", "object", "required", "name", "id", "data", "properties", "id", "type", "integer", "name", "type", "string", "data", "type", "string", "Response", "type", "object", "properties", "code", "type", "integer", "message", "type", "string", "required", "code", "message", "example", "code", "NUMBER", "message", "Server", "error", "securityDefinitions", "jwt", "type", "apiKey", "in", "header", "name", "x", "jwt", "Just", "troubleshoot", "that", "the", "panic", "be", "because", "of", "miss", "type", "array", "in", "the", "swagger", "spec", "so", "if", "you", "want", "you", "can", "close", "this", "one", "or", "implement", "some", "extra", "checks", "to", "prevent", "the", "panic", "NUMBER", "role", "items", "type", "integer", "Panic", "be", "very", "annoying", "NUMBER", "It", "should", "throw", "an", "error", "on", "validation", "NUMBER", "Hello", "NUMBER", "I", "have", "a", "swagger", "spec", "which", "works", "for", "version", "NUMBER", "and", "crashes", "swagger", "when", "processed", "by", "version", "NUMBER", "with", "the", "same", "panic", "and", "stacktrace", "as", "describe", "above", "NUMBER", "Developer", "please", "reopen", "this", "bug", "and", "fix", "the", "input", "validation", "to", "show", "a", "proper", "error", "instead", "the", "panic", "NUMBER", "I", "should", "note", "that", "I", "be", "new", "to", "swagger", "and", "do", "not", "understand", "the", "terse", "fix", "to", "the", "spec", "as", "provide", "in", "the", "first", "comment", "NUMBER", "Having", "swagger", "print", "a", "proper", "error", "message", "describing", "what", "be", "wrong", "with", "the", "spec", "I", "and", "it", "was", "given", "would", "be", "truly", "helpful", "in", "that", "regard", "NUMBER", "This", "was", "fix", "in", "the", "upstream", "component", "after", "NUMBER", "was", "release", "NUMBER", "Thank", "you", "NUMBER", "Guess", "I", "should", "get", "a", "checkout", "and", "update", "to", "head", "of", "master", "NUMBER", "Oh", "NUMBER", "upstream", "component", "NUMBER", "Ok", "so", "that", "package", "be", "fix", "however", "the", "go", "swagger", "repo", "do", "not", "have", "that", "fix", "vendored", "in", "yet", "right", "It", "was", "pull", "in", "last", "week", "I", "believe", "NUMBER", "Hm", "NUMBER", "Yes", "NUMBER", "Looks", "to", "be", "commit", "NUMBER", "b", "NUMBER", "d", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "NUMBER", "a", "NUMBER", "cc", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "ef", "NUMBER", "ad", "NUMBER", "c", "NUMBER", "Sigh", "NUMBER", "I", "still", "see", "the", "error", "NUMBER", "Time", "to", "describe", "more", "of", "my", "setup", "with", "the", "latest", "change", "Using", "go", "swagger", "commit", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "f", "NUMBER", "c", "NUMBER", "a", "NUMBER", "b", "NUMBER", "ee", "NUMBER", "b", "NUMBER", "b", "NUMBER", "d", "Using", "go", "NUMBER", "linux", "amd", "NUMBER", "The", "input", "schema", "be", "LINK", "usb", "sidecar", "blob", "develop", "docs", "swagger", "spec", "api", "NUMBER", "yml", "The", "swagger", "tool", "be", "invoked", "with", "the", "script", "commands", "below", "NUMBER", "Note", "how", "the", "GOPATH", "be", "restricted", "to", "swagger", "and", "its", "vendored", "dependencies", "NUMBER", "TOPDIR", "cd", "dirname", "NUMBER", "NUMBER", "pwd", "mkdir", "p", "TOPDIR", "src", "generate", "CatalogServiceManager", "Run", "the", "sub", "moduled", "swagger", "which", "comes", "with", "a", "vendored", "matching", "go", "openapi", "NUMBER", "GOPATH", "TOPDIR", "go", "run", "TOPDIR", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "NUMBER", "go", "generate", "server", "A", "CatlogServiceManager", "t", "TOPDIR", "src", "generate", "CatalogServiceManager", "f", "docs", "swagger", "spec", "api", "NUMBER", "yml", "The", "tool", "crashes", "and", "prints", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "SIGSEGV", "segmentation", "violation", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "xe", "pc", "NUMBER", "x", "NUMBER", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "NewSliceBranch", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "home", "andreask", "fast", "go", "src", "github", "NUMBER", "com", "SUSE", "cf", "usb", "sidecar", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildArray", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "home", "andreask", "fast", "go", "src", "github", "NUMBER", "com", "SUSE", "cf", "usb", "sidecar", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xd", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildItems", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "home", "andreask", "fast", "go", "src", "github", "NUMBER", "com", "SUSE", "cf", "usb", "sidecar", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "makeGenSchema", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "home", "andreask", "fast", "go", "src", "github", "NUMBER", "com", "SUSE", "cf", "usb", "sidecar", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "f", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "mapStack", "NUMBER", "Build", "NUMBER", "xc", "NUMBER", "ce", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "ce", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "ce", "NUMBER", "d", "NUMBER", "home", "andreask", "fast", "go", "src", "github", "NUMBER", "com", "SUSE", "cf", "usb", "sidecar", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "model", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "cd", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "schemaGenContext", "NUMBER", "buildAdditionalProperties", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "Are", "there", "online", "or", "other", "tool", "I", "can", "use", "to", "validate", "my", "spec", "against", "swagger", "s", "current", "schema", "for", "specs", "Found", "an", "online", "validator", "NUMBER", "It", "claims", "that", "the", "spec", "be", "ok", "NUMBER", "LINK", "LINK", "usb", "sidecar", "develop", "docs", "swagger", "spec", "api", "NUMBER", "yml", "Does", "it", "work", "if", "you", "change", "this", "additionalProperties", "items", "type", "string", "to", "this", "additionalProperties", "type", "string", "Yes", "NUMBER", "With", "that", "change", "the", "generation", "now", "succeeds", "NUMBER", "Is", "that", "a", "schema", "change", "the", "online", "validator", "do", "not", "yet", "know", "about", "I", "m", "not", "sure", "if", "it", "s", "something", "that", "the", "online", "validator", "doesn", "t", "or", "isn", "t", "able", "to", "catch", "or", "if", "it", "s", "something", "that", "be", "technically", "allow", "but", "not", "expected", "and", "so", "the", "Go", "validator", "doesn", "t", "handle", "it", "properly", "NUMBER", "It", "s", "in", "a", "similar", "class", "to", "someone", "having", "items", "in", "a", "type", "object", "instead", "of", "type", "array", "NUMBER", "It", "may", "or", "may", "not", "be", "valid", "but", "it", "shouldn", "t", "cause", "a", "panic", "NUMBER", "on", "no", "panic", "on", "any", "input", "not", "even", "or", "even", "especially", "bad", "input", "Good", "luck", "in", "fix", "the", "panic", "then", "NUMBER", "I", "will", "now", "go", "and", "work", "on", "get", "the", "generate", "things", "integrated", "and", "build", "NUMBER", "Problem", "statement", "When", "generating", "client", "code", "from", "the", "swagger", "spec", "yaml", "and", "provide", "client", "package", "argument", "that", "contains", "dashes", "generate", "code", "will", "be", "placed", "into", "the", "folder", "that", "has", "the", "same", "name", "that", "was", "given", "as", "client", "package", "but", "the", "import", "statements", "in", "the", "generate", "source", "code", "will", "refer", "to", "a", "folder", "name", "where", "all", "the", "dashes", "be", "replaced", "with", "underscores", "_", "NUMBER", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Have", "a", "swagger", "spec", "file", "my_api_spec", "NUMBER", "yaml", "NUMBER", "Issue", "a", "command", "usr", "bin", "swagger", "generate", "client", "client", "package", "my", "service", "spec", "my_api_spec", "NUMBER", "yaml", "Expected", "result", "Client", "source", "code", "be", "generate", "under", "my", "service", "folder", "and", "generate", "file", "contain", "import", "sections", "where", "the", "modules", "be", "referred", "to", "as", "TAG", "my", "service", "TAG", "OR", "Client", "source", "code", "be", "generate", "under", "my_service", "folder", "and", "generate", "file", "contain", "import", "sections", "where", "the", "modules", "be", "referred", "to", "as", "TAG", "my_service", "TAG", "Actual", "result", "Client", "source", "code", "be", "generate", "under", "the", "my", "service", "folder", "BUT", "generate", "source", "code", "file", "contain", "import", "sections", "referring", "to", "the", "folder", "TAG", "my_service", "TAG", "Environment", "swagger", "version", "docker", "image", "quay", "NUMBER", "io", "goswagger", "swagger", "NUMBER", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "linux", "alpine", "LINK", "NUMBER", "tab", "tags", "NUMBER", "I", "notice", "this", "as", "well", "Changes", "to", "resolve", "linting", "error", "produced", "by", "gometalinter", "see", "hack", "check", "NUMBER", "sh", "I", "intentionally", "made", "the", "commenting", "of", "unuse", "elements", "a", "separate", "commit", "such", "that", "revert", "that", "part", "only", "would", "be", "easy", "enough", "especially", "if", "remove", "the", "elements", "was", "preferred", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "c", "NUMBER", "ac", "NUMBER", "c", "NUMBER", "fb", "NUMBER", "e", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "scan", "scanner", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "FubmVyLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "scan", "classifier", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "jbGFzc", "NUMBER", "lmaWVyLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "scan", "schema", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "hlbWEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "c", "NUMBER", "d", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Rebased", "branch", "with", "master", "Problem", "statement", "When", "I", "set", "the", "required", "property", "to", "false", "which", "i", "believe", "should", "be", "default", "behavior", "for", "a", "formData", "parameter", "with", "type", "set", "to", "file", "and", "name", "set", "to", "attachment", "NUMBER", "as", "shown", "below", "the", "generate", "code", "within", "the", "BindRequest", "func", "makes", "attaching", "a", "file", "mandatory", "NUMBER", "An", "http", "NUMBER", "ErrMissingFile", "be", "returned", "from", "the", "r", "NUMBER", "FormFile", "func", "and", "a", "NUMBER", "response", "be", "returned", "to", "the", "client", "NUMBER", "In", "short", "setting", "the", "required", "property", "to", "false", "in", "a", "formData", "parameter", "with", "type", "set", "to", "file", "be", "not", "work", "NUMBER", "Swagger", "specification", "yaml", "post", "tags", "emails", "summary", "Received", "parsed", "emails", "from", "sendgrid", "description", "Received", "parsed", "emails", "from", "sendgrid", "via", "sendgrid", "inbound", "parse", "api", "consumes", "multipart", "form", "data", "parameters", "in", "formData", "name", "to", "type", "string", "description", "The", "recipient", "of", "the", "parsed", "email", "in", "formData", "name", "from", "type", "string", "description", "The", "sender", "of", "the", "parsed", "email", "in", "formData", "name", "subject", "type", "string", "description", "The", "subject", "of", "the", "parsed", "email", "in", "formData", "name", "html", "type", "string", "description", "The", "html", "body", "of", "the", "parsed", "email", "in", "formData", "name", "attachments", "type", "string", "description", "Attachments", "include", "in", "the", "inbound", "email", "parse", "in", "formData", "name", "attachment", "info", "type", "string", "description", "The", "attachment", "file", "information", "including", "number", "of", "file", "content", "types", "and", "file", "names", "in", "formData", "name", "attachment", "NUMBER", "required", "false", "type", "file", "description", "The", "first", "file", "attached", "to", "the", "email", "in", "formData", "name", "attachment", "NUMBER", "required", "false", "type", "file", "description", "The", "second", "file", "attached", "to", "the", "email", "in", "formData", "name", "attachment", "NUMBER", "required", "false", "type", "file", "description", "The", "third", "file", "attached", "to", "the", "email", "responses", "NUMBER", "description", "Emails", "request", "received", "NUMBER", "description", "Internal", "server", "error", "Generated", "Code", "Generated", "params", "struct", "snippet", "go", "type", "PostSendgridEmailsParams", "struct", "HTTP", "Request", "Object", "HTTPRequest", "http", "NUMBER", "Request", "The", "attachment", "file", "information", "including", "number", "of", "file", "content", "types", "and", "file", "names", "In", "formData", "AttachmentInfo", "string", "The", "first", "file", "attached", "to", "the", "email", "In", "formData", "Attachment", "NUMBER", "runtime", "NUMBER", "File", "NUMBER", "Generated", "BindRequest", "func", "snippet", "go", "BindRequest", "both", "binds", "and", "validates", "a", "request", "it", "assumes", "that", "complex", "things", "implement", "a", "Validatable", "strfmt", "NUMBER", "Registry", "error", "interface", "for", "simple", "values", "it", "will", "use", "straight", "method", "calls", "func", "o", "PostSendgridEmailsParams", "BindRequest", "r", "http", "NUMBER", "Request", "route", "middleware", "NUMBER", "MatchedRoute", "error", "var", "res", "error", "o", "NUMBER", "HTTPRequest", "r", "if", "err", "r", "NUMBER", "ParseMultipartForm", "NUMBER", "TAG", "a", "service", "for", "user", "management", "NUMBER", "version", "NUMBER", "title", "User", "Management", "basePath", "v", "NUMBER", "user", "tags", "name", "users", "description", "user", "management", "authenticate", "create", "delete", "reset", "password", "schemes", "http", "paths", "login", "post", "tags", "users", "summary", "get", "an", "swt", "token", "to", "access", "protected", "endpoints", "consumes", "application", "json", "produces", "application", "json", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "Profile", "responses", "NUMBER", "description", "A", "token", "object", "NUMBER", "schema", "type", "object", "properties", "token", "type", "string", "NUMBER", "ref", "responses", "NotFoundError", "default", "ref", "responses", "DefaultError", "create", "post", "security", "swtAuth", "tags", "users", "summary", "creates", "a", "new", "user", "consumes", "application", "json", "produces", "application", "json", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "Profile", "responses", "NUMBER", "description", "An", "user", "id", "of", "the", "created", "user", "NUMBER", "schema", "type", "object", "properties", "idProfile", "type", "string", "NUMBER", "ref", "responses", "UnauthorizedError", "NUMBER", "ref", "responses", "NotFoundError", "NUMBER", "ref", "responses", "ExpiredTokenError", "default", "ref", "responses", "DefaultError", "password", "post", "security", "swtAuth", "tags", "users", "summary", "change", "or", "reset", "an", "user", "password", "consumes", "application", "json", "produces", "application", "json", "parameters", "in", "body", "name", "body", "schema", "ref", "definitions", "Profile", "responses", "NUMBER", "description", "shows", "a", "message", "if", "the", "password", "was", "set", "or", "sent", "with", "an", "email", "reminder", "NUMBER", "schema", "ref", "definitions", "Response", "default", "ref", "responses", "DefaultError", "responses", "UnauthorizedError", "description", "SWT", "key", "be", "miss", "or", "invalid", "schema", "ref", "definitions", "Response", "NotFoundError", "description", "Resource", "not", "find", "schema", "ref", "definitions", "Response", "ExpiredTokenError", "description", "SWT", "key", "has", "expired", "request", "a", "new", "one", "schema", "ref", "definitions", "Response", "DefaultError", "description", "Unexpected", "error", "schema", "ref", "definitions", "Response", "definitions", "Profile", "type", "object", "required", "email", "pass", "properties", "email", "type", "string", "pass", "type", "string", "Response", "type", "object", "properties", "code", "type", "string", "message", "type", "string", "required", "code", "message", "securityDefinitions", "swtAuth", "type", "apiKey", "in", "header", "name", "x", "token", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "OSX", "I", "think", "the", "culprit", "be", "in", "NUMBER", "ref", "responses", "ExpiredTokenError", "I", "think", "it", "happens", "because", "NUMBER", "be", "not", "a", "standard", "code", "defined", "in", "the", "white", "papers", "NUMBER", "thanks", "I", "will", "use", "the", "exist", "ones", "for", "now", "NUMBER", "Problem", "statement", "We", "need", "to", "know", "about", "How", "the", "Models", "be", "Running", "and", "executing", "We", "Gone", "Through", "the", "Flow", "swagger", "NUMBER", "go", "TAG", "will", "get", "error", "about", "list", "be", "defined", "NUMBER", "times", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Mac", "OS", "could", "you", "please", "tell", "me", "how", "to", "run", "this", "example", "NUMBER", "GOPATH", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "examples", "stream", "server", "cmd", "countdown", "server", "README", "instructions", "don", "t", "work", "for", "me", "casualjim", "thanks", "a", "lot", "NUMBER", "This", "would", "allow", "for", "easy", "mocking", "out", "of", "clients", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "f", "NUMBER", "fdd", "NUMBER", "ee", "NUMBER", "def", "NUMBER", "ce", "NUMBER", "b", "NUMBER", "bab", "NUMBER", "b", "NUMBER", "cb", "NUMBER", "generator", "template", "client", "client", "NUMBER", "gotmpl", "L", "NUMBER", "Or", "be", "there", "a", "better", "way", "to", "do", "the", "mocking", "Problem", "statement", "on", "every", "swagger", "server", "generate", "the", "go", "openapi", "runtime", "security", "be", "miss", "in", "the", "imports", "in", "restapi", "operations", "user_management_service_api", "NUMBER", "go", "Swagger", "specification", "swagger", "NUMBER", "info", "description", "a", "service", "for", "user", "management", "NUMBER", "version", "NUMBER", "title", "User", "Management", "Service", "host", "localhost", "NUMBER", "basePath", "v", "NUMBER", "account", "tags", "name", "users", "description", "user", "management", "authenticate", "create", "delete", "reset", "password", "schemes", "http", "paths", "login", "post", "tags", "users", "summary", "get", "an", "swt", "token", "to", "access", "protected", "endpoints", "description", "consumes", "application", "json", "produces", "application", "json", "parameters", "name", "body", "in", "body", "required", "true", "schema", "ref", "definitions", "Login", "responses", "NUMBER", "description", "A", "token", "object", "NUMBER", "schema", "type", "object", "properties", "token", "type", "string", "NUMBER", "description", "A", "user", "not", "find", "NUMBER", "default", "description", "Unexpected", "error", "definitions", "Login", "type", "object", "required", "email", "pass", "properties", "email", "type", "string", "pass", "type", "string", "Steps", "to", "reproduce", "swagger", "generate", "server", "NUMBER", "swagger", "NUMBER", "yaml", "go", "run", "cmd", "user", "management", "service", "server", "main", "NUMBER", "go", "Environment", "swagger", "version", "dev", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "OSX", "go", "env", "GOARCH", "amd", "NUMBER", "GOBIN", "GOEXE", "GOHOSTARCH", "amd", "NUMBER", "GOHOSTOS", "darwin", "GOOS", "darwin", "GOPATH", "Users", "krasimir", "GORACE", "GOROOT", "usr", "local", "go", "GOTOOLDIR", "usr", "local", "go", "pkg", "tool", "darwin_amd", "NUMBER", "GCCGO", "gccgo", "CC", "clang", "GOGCCFLAGS", "fPIC", "m", "NUMBER", "pthread", "fno", "caret", "diagnostics", "Qunused", "argument", "fmessage", "length", "NUMBER", "gno", "record", "gcc", "switches", "fno", "common", "CXX", "clang", "CGO_ENABLED", "NUMBER", "PKG_CONFIG", "pkg", "config", "CGO_CFLAGS", "g", "O", "NUMBER", "CGO_CPPFLAGS", "CGO_CXXFLAGS", "g", "O", "NUMBER", "CGO_FFLAGS", "g", "O", "NUMBER", "CGO_LDFLAGS", "g", "O", "NUMBER", "I", "think", "the", "problem", "be", "due", "to", "line", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "goimports", "scanning", "directory", "Users", "krasimir", "src", "permission", "denied", "but", "I", "couldn", "t", "find", "where", "it", "gets", "call", "and", "the", "user", "under", "which", "I", "run", "the", "swagger", "generator", "be", "the", "owner", "of", "this", "folder", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "grouping", "operations", "into", "package", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "meta", "data", "and", "facades", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "model", "Login", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "Login", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "login", "NUMBER", "go", "in", "models", "as", "definition", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "operation", "group", "tags", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "operations", "for", "users", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "operation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "PostLogin", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "users", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "post_login_parameters", "NUMBER", "go", "in", "restapi", "operations", "users", "as", "parameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "PostLogin", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "users", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "post_login_urlbuilder", "NUMBER", "go", "in", "restapi", "operations", "users", "as", "urlbuilder", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "PostLogin", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "users", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "post_login_responses", "NUMBER", "go", "in", "restapi", "operations", "users", "as", "responses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "PostLogin", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "users", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "post_login", "NUMBER", "go", "in", "restapi", "operations", "users", "as", "handler", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "support", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "application", "UserManagementService", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "UserManagementService", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "skipping", "restapi", "configure_user_management_service", "NUMBER", "go", "because", "it", "already", "exists", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "UserManagementService", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "main", "NUMBER", "go", "in", "cmd", "user", "management", "service", "server", "as", "main", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "UserManagementService", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "embedded_spec", "NUMBER", "go", "in", "restapi", "as", "embedded_spec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "UserManagementService", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "server", "NUMBER", "go", "in", "restapi", "as", "server", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "UserManagementService", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "user_management_service_api", "NUMBER", "go", "in", "restapi", "operations", "as", "builder", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "goimports", "scanning", "directory", "Users", "krasimir", "src", "permission", "denied", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "UserManagementService", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "doc", "NUMBER", "go", "in", "restapi", "as", "doc", "be", "it", "in", "the", "usual", "place", "and", "if", "I", "add", "it", "in", "the", "imports", "manually", "it", "compiles", "ok", "ls", "Users", "krasimir", "src", "github", "NUMBER", "com", "go", "openapi", "runtime", "security", "total", "NUMBER", "rwxrwxrwx", "NUMBER", "krasimir", "staff", "NUMBER", "K", "NUMBER", "Aug", "NUMBER", "NUMBER", "bearer_auth_test", "NUMBER", "go", "rwxrwxrwx", "NUMBER", "krasimir", "staff", "NUMBER", "K", "NUMBER", "Aug", "NUMBER", "NUMBER", "basic_auth_test", "NUMBER", "go", "rwxrwxrwx", "NUMBER", "krasimir", "staff", "NUMBER", "K", "NUMBER", "Aug", "NUMBER", "NUMBER", "authenticator", "NUMBER", "go", "rwxrwxrwx", "NUMBER", "krasimir", "staff", "NUMBER", "K", "NUMBER", "Aug", "NUMBER", "NUMBER", "apikey_auth_test", "NUMBER", "go", "drwxrwxrwx", "NUMBER", "krasimir", "staff", "NUMBER", "K", "NUMBER", "Aug", "NUMBER", "NUMBER", "NUMBER", "drwxrwxrwx", "NUMBER", "krasimir", "staff", "NUMBER", "B", "NUMBER", "Aug", "NUMBER", "NUMBER", "NUMBER", "now", "it", "ads", "some", "package", "twice", "restapi", "operations", "users", "post_login", "NUMBER", "go", "NUMBER", "validate", "redeclared", "as", "imported", "package", "name", "previous", "declaration", "at", "restapi", "operations", "users", "post_login", "NUMBER", "go", "NUMBER", "hardcoding", "doesn", "t", "look", "like", "a", "good", "idea", "maybe", "if", "you", "give", "me", "some", "pointers", "where", "be", "the", "goimport", "call", "so", "I", "can", "find", "out", "if", "maybe", "this", "permission", "denied", "error", "be", "the", "culprit", "NUMBER", "all", "good", "now", "didn", "t", "spend", "anytime", "about", "the", "goimport", "error", "but", "now", "the", "last", "generation", "didn", "t", "even", "show", "that", "error", "NUMBER", "By", "default", "when", "golang", "marshalls", "a", "field", "of", "type", "byte", "to", "json", "it", "uses", "a", "base", "NUMBER", "string", "NUMBER", "This", "should", "be", "represented", "as", "type", "string", "format", "byte", "But", "currently", "when", "generating", "a", "spec", "from", "code", "go", "swagger", "uses", "type", "array", "items", "type", "integer", "format", "uint", "NUMBER", "Although", "that", "seems", "more", "correct", "NUMBER", "It", "doesn", "t", "match", "what", "go", "will", "actually", "do", "when", "it", "marshalls", "the", "struct", "NUMBER", "I", "think", "this", "should", "be", "change", "because", "an", "actual", "array", "of", "integers", "be", "rarely", "be", "ever", "returned", "NUMBER", "I", "tried", "add", "type", "format", "annotations", "to", "the", "field", "but", "they", "don", "t", "seem", "to", "work", "there", "NUMBER", "Ahh", "yes", "add", "strfmt", "base", "NUMBER", "fix", "it", "NUMBER", "I", "didn", "t", "know", "that", "could", "be", "use", "to", "tag", "non", "string", "field", "NUMBER", "Thanks", "Problem", "statement", "What", "be", "the", "proper", "way", "to", "set", "the", "header", "name", "in", "a", "param", "or", "response", "definition", "Example", "type", "FooResponse", "struct", "X", "Foo", "header", "in", "header", "name", "X", "Foo", "XFoo", "string", "NUMBER", "This", "creates", "a", "valid", "swagger", "definition", "as", "headers", "XFoo", "type", "string", "description", "X", "Foo", "header", "n", "nin", "header", "nname", "X", "Foo", "Is", "this", "the", "best", "I", "can", "do", "Or", "be", "there", "some", "way", "to", "instead", "get", "headers", "X", "Foo", "type", "string", "description", "X", "Foo", "header", "Brilliant", "That", "do", "indeed", "do", "the", "trick", "NUMBER", "Thanks", "When", "run", "swagger", "generate", "spec", "m", "o", "docs", "swagger", "NUMBER", "json", "I", "get", "a", "single", "error", "message", "package", "github", "NUMBER", "com", "nicksnyder", "go", "i", "NUMBER", "n", "i", "NUMBER", "n", "error", "be", "unsupported", "type", "TranslateFunc", "The", "type", "referred", "to", "s", "definition", "be", "type", "TranslateFunc", "func", "translationID", "string", "args", "NUMBER", "interface", "string", "Just", "a", "type", "alias", "for", "a", "function", "NUMBER", "Any", "idea", "why", "its", "stopping", "on", "this", "I", "assume", "its", "just", "scanning", "all", "package", "but", "don", "t", "see", "why", "its", "get", "bothered", "here", "NUMBER", "Alternatively", "be", "there", "a", "way", "to", "restrict", "the", "scan", "models", "to", "a", "specific", "group", "of", "package", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "d", "NUMBER", "d", "NUMBER", "efc", "NUMBER", "f", "NUMBER", "ddd", "NUMBER", "a", "NUMBER", "ef", "NUMBER", "da", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "e", "NUMBER", "a", "NUMBER", "b", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Thanks", "casualjim", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "b", "NUMBER", "ae", "NUMBER", "b", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "c", "NUMBER", "dc", "NUMBER", "bacd", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "width", "NUMBER", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "b", "NUMBER", "ae", "NUMBER", "a", "NUMBER", "c", "NUMBER", "f", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "Hello", "I", "be", "trying", "to", "create", "a", "custom", "layout", "for", "a", "project", "with", "template", "NUMBER", "Everything", "be", "fine", "with", "custom", "operations", "target", "if", "gt", "len", "NUMBER", "Tags", "NUMBER", "joinFilePath", "NUMBER", "Package", "NUMBER", "ServerPackage", "NUMBER", "APIPackage", "NUMBER", "Package", "else", "joinFilePath", "NUMBER", "Package", "NUMBER", "ServerPackage", "NUMBER", "Package", "end", "However", "I", "also", "want", "to", "move", "models", "to", "different", "folders", "too", "I", "tried", "use", "this", "configuration", "target", "joinFilePath", "NUMBER", "Package", "NUMBER", "ModelPackage", "It", "seems", "that", "NUMBER", "Package", "be", "not", "defined", "and", "everything", "be", "moved", "to", "ModelPackage", "that", "be", "models", "folder", "NUMBER", "Is", "there", "a", "way", "to", "define", "path", "like", "this", "operation", "models", "model_name", "Generated", "operations", "do", "not", "match", "imports", "While", "use", "template", "below", "it", "will", "generate", "and", "operations", "correctly", "but", "it", "will", "not", "correctly", "import", "these", "operations", "inside", "restapi", "operations", "x_api", "NUMBER", "go", "target", "if", "gt", "len", "NUMBER", "Tags", "NUMBER", "joinFilePath", "NUMBER", "Package", "NUMBER", "ServerPackage", "NUMBER", "APIPackage", "NUMBER", "Package", "else", "joinFilePath", "NUMBER", "Package", "NUMBER", "ServerPackage", "NUMBER", "Package", "end", "It", "will", "use", "default", "path", "to", "operations", "NUMBER", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "Macos", "Yes", "NUMBER", "I", "pretty", "much", "copied", "the", "default", "config", "and", "change", "operations", "to", "what", "I", "describe", "NUMBER", "It", "works", "for", "operations", "it", "finds", "and", "do", "not", "overwrite", "NUMBER", "It", "do", "not", "work", "with", "customizing", "models", "because", "it", "lacks", "NUMBER", "Package", "property", "NUMBER", "Is", "that", "by", "design", "Can", "it", "be", "add", "I", "ve", "get", "into", "code", "and", "find", "out", "that", "model", "movement", "be", "limited", "by", "the", "information", "that", "can", "be", "provide", "in", "swagger", "NUMBER", "json", "configuration", "file", "NUMBER", "Schema", "do", "not", "allow", "to", "add", "information", "unless", "it", "s", "a", "hacky", "way", "about", "model", "whereabouts", "I", "assume", "that", "models", "should", "be", "shared", "NUMBER", "But", "the", "NUMBER", "issue", "that", "i", "have", "be", "that", "when", "I", "change", "the", "directory", "with", "the", "template", "to", "move", "operations", "to", "a", "specific", "folder", "imports", "be", "not", "correct", "in", "service", "restapi", "operations", "service_api", "NUMBER", "go", "file", "NUMBER", "They", "be", "imported", "in", "the", "default", "way", "project_name", "service", "restapi", "operations", "x", "NUMBER", "casualjim", "do", "you", "have", "any", "ideas", "where", "can", "I", "find", "code", "for", "this", "part", "I", "be", "trying", "to", "achieve", "this", "kind", "of", "structure", "servicex", "operations", "models", "NUMBER", "swagger", "NUMBER", "json", "servicey", "operations", "models", "NUMBER", "swagger", "NUMBER", "json", "global_swagger", "NUMBER", "json", "But", "it", "seems", "I", "won", "t", "be", "able", "to", "do", "it", "because", "the", "models", "swagger", "spec", "part", "do", "not", "contain", "Tags", "and", "cannot", "be", "add", "NUMBER", "Because", "of", "this", "after", "generating", "server", "from", "global_swagger", "NUMBER", "json", "you", "cannot", "use", "models", "from", "different", "services", "but", "you", "can", "reference", "operations", "operations", "in", "swagger", "spec", "has", "Tags", "prop", "NUMBER", "As", "I", "stated", "above", "I", "already", "do", "that", "successfully", "however", "it", "causes", "NUMBER", "issue", "NUMBER", "Models", "cannot", "be", "generate", "to", "different", "folders", "NUMBER", "Package", "be", "not", "defined", "while", "generating", "with", "custom", "template", "I", "assume", "that", "it", "be", "because", "definitions", "do", "not", "contain", "Tags", "shown", "above", "NUMBER", "The", "imports", "in", "service", "restapi", "operations", "service_api", "NUMBER", "go", "will", "point", "to", "default", "location", "instead", "of", "the", "one", "in", "custom", "template", "where", "I", "have", "to", "change", "auto", "generate", "file", "which", "can", "be", "ignored", "by", "use", "skip_exists", "true", "but", "then", "miss", "the", "whole", "auto", "generate", "idea", "No", "NUMBER", "The", "goal", "be", "to", "merge", "NUMBER", "or", "more", "already", "established", "applications", "into", "NUMBER", "application", "NUMBER", "P", "NUMBER", "S", "NUMBER", "Thank", "you", "for", "answering", "so", "quickly", "You", "be", "correct", "NUMBER", "It", "seems", "that", "having", "a", "middleware", "and", "main", "file", "might", "work", "NUMBER", "I", "will", "try", "doing", "this", "NUMBER", "Thank", "you", "NUMBER", "Errors", "were", "visible", "when", "defining", "polymorphic", "types", "that", "had", "one", "or", "more", "field", "of", "polymorphic", "arrays", "NUMBER", "All", "test", "pass", "NUMBER", "This", "should", "be", "carefully", "code", "review", "as", "I", "ve", "made", "some", "change", "to", "how", "marshaling", "code", "works", "NUMBER", "Additionally", "it", "would", "be", "good", "to", "validate", "whether", "marking", "an", "array", "of", "polymorphic", "types", "as", "a", "base", "type", "and", "non", "exportable", "be", "the", "correct", "approach", "or", "whether", "setting", "something", "like", "HasDiscriminator", "be", "better", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "a", "NUMBER", "e", "NUMBER", "edec", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "types", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "R", "NUMBER", "cGVzLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "a", "NUMBER", "e", "NUMBER", "ba", "NUMBER", "d", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "I", "ve", "get", "some", "more", "change", "as", "I", "find", "a", "few", "error", "in", "my", "submission", "so", "don", "t", "worry", "about", "review", "ingress", "quite", "yet", "NUMBER", "On", "NUMBER", "Aug", "NUMBER", "NUMBER", "NUMBER", "pm", "Ivan", "Porto", "Carrero", "TAG", "write", "I", "forgot", "to", "review", "this", "over", "the", "weekend", "NUMBER", "Would", "it", "be", "possible", "to", "update", "I", "ll", "try", "to", "do", "it", "tonight", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "casualjim", "this", "be", "now", "ready", "to", "be", "review", "NUMBER", "All", "unit", "test", "pass", "and", "I", "ve", "do", "some", "validation", "with", "my", "more", "complex", "internal", "models", "NUMBER", "Thanks", "Done", "Let", "me", "know", "if", "there", "s", "anything", "else", "for", "me", "to", "do", "or", "that", "I", "can", "help", "with", "NUMBER", "Correct", "me", "if", "I", "m", "wrong", "but", "it", "looks", "like", "only", "go", "NUMBER", "x", "be", "support", "atm", "If", "that", "be", "the", "case", "I", "think", "it", "s", "worth", "calling", "that", "out", "somewhere", "in", "the", "docs", "or", "the", "README", "NUMBER", "md", "Thanks", "for", "responding", "so", "quickly", "When", "run", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "as", "indicated", "in", "the", "README", "NUMBER", "md", "I", "get", "the", "following", "for", "NUMBER", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "package", "context", "unrecognized", "import", "path", "context", "import", "path", "do", "not", "begin", "with", "hostname", "Interestingly", "after", "switching", "to", "use", "go", "NUMBER", "use", "goenv", "and", "successfully", "run", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "run", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "under", "go", "NUMBER", "no", "longer", "produces", "any", "error", "output", "NUMBER", "Odd", "Can", "t", "reproduce", "NUMBER", "When", "looking", "at", "the", "logs", "of", "a", "server", "generate", "by", "go", "swagger", "I", "notice", "a", "lot", "of", "verbose", "and", "for", "production", "unnecessary", "output", "NUMBER", "After", "startup", "for", "each", "endpoint", "defined", "in", "my", "swagger", "spec", "the", "log", "shows", "something", "like", "snippet", "NUMBER", "Also", "for", "each", "incoming", "request", "I", "get", "something", "like", "in", "snippet", "NUMBER", "So", "the", "question", "really", "be", "twofold", "a", "Is", "this", "default", "go", "swagger", "behavior", "or", "did", "I", "mess", "something", "up", "b", "How", "can", "I", "change", "the", "output", "to", "be", "less", "verbose", "Snippet", "NUMBER", "operation", "spec", "NUMBER", "Operation", "VendorExtensible", "spec", "NUMBER", "VendorExtensible", "Extensions", "spec", "NUMBER", "Extensions", "nil", "OperationProps", "spec", "NUMBER", "OperationProps", "Description", "Consumes", "string", "nil", "Produces", "string", "nil", "Schemes", "string", "nil", "Tags", "string", "Users", "Summary", "Updates", "a", "user", "ExternalDocs", "spec", "NUMBER", "ExternalDocumentation", "nil", "ID", "patchUser", "Deprecated", "false", "Security", "map", "string", "string", "nil", "Parameters", "spec", "NUMBER", "Parameter", "spec", "NUMBER", "Parameter", "Refable", "spec", "NUMBER", "Refable", "Ref", "spec", "NUMBER", "Ref", "Ref", "jsonreference", "NUMBER", "Ref", "referenceURL", "url", "NUMBER", "URL", "nil", "referencePointer", "jsonpointer", "NUMBER", "Pointer", "referenceTokens", "string", "nil", "HasFullURL", "false", "HasURLPathOnly", "false", "HasFragmentOnly", "false", "HasFileScheme", "false", "HasFullFilePath", "false", "CommonValidations", "spec", "NUMBER", "CommonValidations", "Maximum", "float", "NUMBER", "nil", "ExclusiveMaximum", "false", "Minimum", "float", "NUMBER", "nil", "ExclusiveMinimum", "false", "MaxLength", "int", "NUMBER", "nil", "MinLength", "int", "NUMBER", "nil", "Pattern", "MaxItems", "int", "NUMBER", "nil", "MinItems", "int", "NUMBER", "nil", "UniqueItems", "false", "MultipleOf", "float", "NUMBER", "nil", "Enum", "interface", "nil", "SimpleSchema", "spec", "NUMBER", "SimpleSchema", "Type", "string", "Format", "Items", "spec", "NUMBER", "Items", "nil", "CollectionFormat", "Default", "interface", "nil", "VendorExtensible", "spec", "NUMBER", "VendorExtensible", "Extensions", "spec", "NUMBER", "Extensions", "nil", "ParamProps", "spec", "NUMBER", "ParamProps", "Description", "Name", "id", "In", "path", "Required", "true", "Schema", "spec", "NUMBER", "Schema", "nil", "AllowEmptyValue", "false", "spec", "NUMBER", "Parameter", "Refable", "spec", "NUMBER", "Refable", "Ref", "spec", "NUMBER", "Ref", "Ref", "jsonreference", "NUMBER", "Ref", "referenceURL", "url", "NUMBER", "URL", "nil", "referencePointer", "jsonpointer", "NUMBER", "Pointer", "referenceTokens", "string", "nil", "HasFullURL", "false", "HasURLPathOnly", "false", "HasFragmentOnly", "false", "HasFileScheme", "false", "HasFullFilePath", "false", "CommonValidations", "spec", "NUMBER", "CommonValidations", "Maximum", "float", "NUMBER", "nil", "ExclusiveMaximum", "false", "Minimum", "float", "NUMBER", "nil", "ExclusiveMinimum", "false", "MaxLength", "int", "NUMBER", "nil", "MinLength", "int", "NUMBER", "nil", "Pattern", "MaxItems", "int", "NUMBER", "nil", "MinItems", "int", "NUMBER", "nil", "UniqueItems", "false", "MultipleOf", "float", "NUMBER", "nil", "Enum", "interface", "nil", "SimpleSchema", "spec", "NUMBER", "SimpleSchema", "Type", "Format", "Items", "spec", "NUMBER", "Items", "nil", "CollectionFormat", "Default", "interface", "nil", "VendorExtensible", "spec", "NUMBER", "VendorExtensible", "Extensions", "spec", "NUMBER", "Extensions", "nil", "ParamProps", "spec", "NUMBER", "ParamProps", "Description", "Name", "payload", "In", "body", "Required", "true", "Schema", "spec", "NUMBER", "Schema", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "AllowEmptyValue", "false", "Responses", "spec", "NUMBER", "Responses", "NUMBER", "xc", "NUMBER", "eca", "NUMBER", "Snippet", "NUMBER", "add", "line", "numbering", "manually", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "cors", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ServeHTTP", "Preflight", "request", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "cors", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Preflight", "response", "headers", "map", "Access", "Control", "Allow", "Methods", "DELETE", "Access", "Control", "Allow", "Headers", "Content", "Type", "Csrftoken", "Access", "Control", "Allow", "Credentials", "true", "Vary", "Origin", "Access", "Control", "Request", "Method", "Access", "Control", "Request", "Headers", "Access", "Control", "Allow", "Origin", "LINK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "negroni", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "\u00b5s", "TAG", "OPTIONS", "v", "NUMBER", "auth", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "looking", "up", "route", "for", "DELETE", "v", "NUMBER", "auth", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "get", "a", "router", "for", "PUT", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "get", "a", "router", "for", "DELETE", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "get", "a", "router", "for", "POST", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "get", "a", "router", "for", "GET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "get", "a", "router", "for", "PATCH", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "find", "a", "route", "for", "DELETE", "v", "NUMBER", "auth", "with", "NUMBER", "parameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "cors", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ServeHTTP", "Actual", "request", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "cors", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Actual", "response", "add", "headers", "map", "Vary", "Origin", "Access", "Control", "Allow", "Origin", "LINK", "Access", "Control", "Expose", "Headers", "Location", "Access", "Control", "Allow", "Credentials", "true", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "responding", "to", "DELETE", "v", "NUMBER", "auth", "with", "produces", "application", "json", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "offers", "application", "json", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "DELETE", "v", "NUMBER", "auth", "set", "response", "format", "application", "json", "in", "context", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "DELETE", "v", "NUMBER", "auth", "negotiated", "response", "format", "application", "json", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "negroni", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "ms", "TAG", "DELETE", "v", "NUMBER", "auth", "P", "NUMBER", "S", "For", "Snippet", "NUMBER", "the", "following", "lines", "I", "can", "account", "for", "in", "my", "middleware", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CORS", "middleware", "NUMBER", "NUMBER", "Negroni", "Logger", "DEBUG", "true", "but", "yes", "NUMBER", "Thanks", "for", "point", "out", "the", "obvious", "NUMBER", "Wish", "this", "would", "be", "documented", "somewhere", "NUMBER", "mgo", "compatibility", "was", "add", "to", "strfmt", "in", "LINK", "openapi", "strfmt", "pull", "NUMBER", "This", "add", "the", "strfmt", "NUMBER", "ObjectId", "type", "to", "the", "type", "resolver", "NUMBER", "Signed", "off", "by", "Matt", "Tucker", "TAG", "Fixes", "NUMBER", "This", "seems", "like", "the", "appropriate", "way", "to", "add", "support", "for", "mongodb", "ObjectId", "s", "NUMBER", "I", "ve", "test", "with", "a", "swagger", "spec", "that", "include", "yaml", "properties", "_id", "type", "string", "format", "ObjectId", "This", "generates", "a", "struct", "with", "type", "Test", "struct", "ID", "strfmt", "NUMBER", "ObjectId", "json", "_id", "omitempty", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "b", "NUMBER", "bd", "NUMBER", "f", "NUMBER", "b", "NUMBER", "fc", "NUMBER", "ffd", "NUMBER", "ce", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "types", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "R", "NUMBER", "cGVzLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "b", "NUMBER", "bc", "NUMBER", "be", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Only", "to", "bear", "in", "mind", "be", "there", "any", "plan", "to", "release", "and", "update", "to", "support", "Open", "API", "spec", "NUMBER", "LINK", "openapi", "NUMBER", "NUMBER", "Thanks", "Very", "interesting", "casualjim", "be", "there", "any", "update", "on", "openapi", "NUMBER", "support", "casualjim", "check", "in", "again", "be", "there", "a", "timeline", "for", "openapi", "NUMBER", "support", "Or", "early", "adoption", "on", "another", "branch", "fredbi", "the", "problem", "be", "as", "long", "as", "the", "spec", "reads", "swagger", "NUMBER", "we", "will", "have", "issue", "use", "the", "spec", "for", "other", "tool", "doc", "generators", "etc", "NUMBER", "there", "be", "a", "lot", "more", "issue", "with", "NUMBER", "it", "has", "expressions", "a", "vastly", "different", "syntax", "and", "so", "on", "NUMBER", "Somebody", "else", "be", "more", "than", "welcome", "to", "step", "up", "but", "I", "don", "t", "have", "time", "to", "implement", "and", "mantain", "such", "a", "large", "specification", "as", "main", "contributor", "NUMBER", "Thanks", "casualjim", "fredbi", "NUMBER", "totally", "understand", "NUMBER", "Perhaps", "if", "I", "can", "get", "some", "cycles", "I", "ll", "try", "to", "contribute", "NUMBER", "I", "think", "I", "have", "some", "tricks", "I", "can", "do", "to", "keep", "on", "NUMBER", "Keep", "up", "the", "great", "work", "Problem", "statement", "I", "want", "to", "be", "able", "to", "add", "a", "prometheus", "metrics", "endpoint", "NUMBER", "The", "de", "facto", "library", "for", "instrumenting", "prometheus", "metrics", "be", "LINK", "_golang", "NUMBER", "They", "have", "a", "handler", "that", "can", "be", "add", "to", "a", "server", "to", "serve", "the", "metrics", "NUMBER", "LINK", "_golang", "prometheus", "promhttp", "Handler", "NUMBER", "I", "don", "t", "see", "an", "obvious", "way", "to", "add", "a", "handler", "to", "the", "generate", "server", "NUMBER", "Considering", "use", "gorilla", "mux", "to", "create", "a", "mux", "router", "that", "has", "a", "metrics", "route", "that", "routes", "to", "the", "metrics", "handler", "and", "a", "route", "that", "routes", "to", "the", "handler", "normally", "configured", "NUMBER", "Then", "just", "setting", "the", "handler", "in", "main", "NUMBER", "go", "and", "not", "generating", "main", "by", "use", "exclude", "main", "NUMBER", "A", "recommendation", "and", "or", "documentation", "would", "be", "handy", "NUMBER", "I", "also", "need", "to", "be", "able", "to", "instrument", "each", "individual", "method", "handler", "NUMBER", "but", "don", "t", "see", "a", "convenient", "way", "to", "wrap", "individual", "handlers", "NUMBER", "e", "NUMBER", "g", "NUMBER", "If", "I", "have", "GetFoo", "and", "PostFoo", "handlers", "I", "want", "to", "be", "able", "to", "wrap", "them", "individually", "NUMBER", "InstrumentGetFoo", "GetFoo", "and", "InstrumentPostFoo", "PostFoo", "NUMBER", "casualjim", "Thanks", "NUMBER", "I", "m", "still", "not", "clear", "how", "I", "can", "do", "the", "NUMBER", "case", "where", "I", "instrument", "individual", "method", "handlers", "with", "different", "middlewares", "NUMBER", "It", "seems", "both", "setupGlobalMiddleware", "and", "setupMiddlewares", "would", "apply", "the", "same", "middleware", "to", "all", "method", "handlers", "NUMBER", "casualjim", "This", "be", "the", "code", "I", "m", "trying", "to", "replicate", "LINK", "_golang", "blob", "master", "prometheus", "promhttp", "instrument_server_test", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "Here", "s", "what", "I", "ended", "up", "doing", "in", "setupMiddlewares", "NUMBER", "not", "extremely", "pretty", "but", "it", "works", "NUMBER", "func", "setupMiddlewares", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "inFlightGauge", "prometheus", "NUMBER", "NewGauge", "prometheus", "NUMBER", "GaugeOpts", "Name", "in_flight_requests", "Help", "A", "gauge", "of", "request", "currently", "be", "served", "by", "the", "wrapped", "handler", "NUMBER", "counter", "prometheus", "NUMBER", "NewCounterVec", "prometheus", "NUMBER", "CounterOpts", "Name", "api_requests_total", "Help", "A", "counter", "for", "request", "to", "the", "wrapped", "handler", "NUMBER", "string", "code", "method", "Durations", "be", "partitioned", "by", "the", "HTTP", "method", "and", "use", "custom", "buckets", "based", "on", "the", "expected", "request", "duration", "NUMBER", "ConstLabels", "be", "use", "to", "set", "a", "handler", "label", "to", "mark", "which", "endpoint", "be", "be", "tracked", "NUMBER", "histogramOpts", "prometheus", "NUMBER", "HistogramOpts", "Name", "request_duration_seconds", "Help", "A", "histogram", "of", "latencies", "for", "request", "NUMBER", "Buckets", "float", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ConstLabels", "prometheus", "NUMBER", "Labels", "route", "workflows", "TAG", "getWorkflowsVec", "prometheus", "NUMBER", "NewHistogramVec", "histogramOpts", "string", "method", "histogramOpts", "NUMBER", "ConstLabels", "prometheus", "NUMBER", "Labels", "route", "workflows", "TAG", "signals", "postSignalsVec", "prometheus", "NUMBER", "NewHistogramVec", "histogramOpts", "string", "method", "responseSize", "has", "no", "labels", "make", "it", "a", "zero", "dimensional", "ObserverVec", "NUMBER", "responseSize", "prometheus", "NUMBER", "NewHistogramVec", "prometheus", "NUMBER", "HistogramOpts", "Name", "response_size_bytes", "Help", "A", "histogram", "of", "response", "sizes", "for", "request", "NUMBER", "Buckets", "float", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "string", "Register", "all", "of", "the", "metrics", "in", "the", "standard", "registry", "NUMBER", "prometheus", "NUMBER", "MustRegister", "inFlightGauge", "counter", "getWorkflowsVec", "postSignalsVec", "responseSize", "inFlightMiddleware", "func", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "return", "promhttp", "NUMBER", "InstrumentHandlerInFlight", "inFlightGauge", "handler", "counterMiddleware", "func", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "return", "promhttp", "NUMBER", "InstrumentHandlerCounter", "counter", "handler", "responseSizeMiddleware", "func", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "return", "promhttp", "NUMBER", "InstrumentHandlerResponseSize", "responseSize", "handler", "endpointSpecificMiddleware", "func", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "r", "mux", "NUMBER", "NewRouter", "getWorkflowPath", "getPath", "operations", "NUMBER", "GetWorkflowsIDURL", "ID", "id", "r", "NUMBER", "Methods", "http", "NUMBER", "MethodGet", "NUMBER", "Path", "getWorkflowPath", "NUMBER", "Handler", "promhttp", "NUMBER", "InstrumentHandlerDuration", "getWorkflowsVec", "handler", "postWorkflowSignalPath", "getPath", "operations", "NUMBER", "PostWorkflowsIDSignalsURL", "ID", "id", "r", "NUMBER", "Methods", "http", "NUMBER", "MethodPost", "NUMBER", "Path", "postWorkflowSignalPath", "NUMBER", "Handler", "promhttp", "NUMBER", "InstrumentHandlerDuration", "postSignalsVec", "handler", "r", "NUMBER", "PathPrefix", "NUMBER", "Handler", "handler", "return", "r", "return", "alice", "NUMBER", "New", "inFlightMiddleware", "counterMiddleware", "endpointSpecificMiddleware", "responseSizeMiddleware", "NUMBER", "Then", "handler", "My", "getPath", "convenience", "method", "looks", "like", "this", "type", "URLBuilder", "interface", "Build", "url", "NUMBER", "URL", "error", "func", "getPath", "urlBuilder", "URLBuilder", "string", "url", "err", "urlBuilder", "NUMBER", "Build", "if", "err", "nil", "panic", "fmt", "NUMBER", "Sprintf", "Problem", "parsing", "url", "for", "type", "T", "urlBuilder", "return", "url", "NUMBER", "Path", "It", "would", "be", "great", "if", "we", "could", "somehow", "hook", "into", "or", "get", "the", "individual", "method", "handlers", "when", "configuring", "the", "middleware", "NUMBER", "Would", "definitely", "clean", "up", "this", "example", "NUMBER", "casualjim", "That", "would", "be", "awesome", "NUMBER", "Thanks", "NUMBER", "Hi", "there", "Is", "this", "still", "the", "best", "way", "to", "add", "a", "Prometheus", "endpoint", "to", "a", "generate", "server", "I", "d", "really", "love", "to", "simply", "associate", "a", "metrics", "endpoint", "with", "the", "promhttp", "NUMBER", "Handler", "that", "s", "already", "available", "LINK", "_golang", "prometheus", "promhttp", "Handler", "NUMBER", "Is", "the", "only", "way", "to", "do", "so", "via", "middleware", "Thanks", "Ilina", "ilinamitra", "As", "far", "as", "I", "know", "this", "be", "still", "the", "only", "way", "NUMBER", "casualjim", "Let", "me", "know", "if", "there", "have", "be", "update", "to", "how", "to", "add", "a", "prometheus", "endpoint", "NUMBER", "The", "template", "was", "generating", "code", "that", "checked", "the", "members", "of", "the", "array", "before", "actually", "assigning", "the", "array", "from", "the", "body", "of", "the", "request", "NUMBER", "This", "should", "now", "be", "validating", "the", "members", "of", "the", "array", "from", "the", "body", "and", "then", "assigning", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "df", "NUMBER", "fc", "NUMBER", "fb", "NUMBER", "a", "NUMBER", "a", "NUMBER", "f", "NUMBER", "b", "NUMBER", "e", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "height", "NUMBER", "width", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "df", "NUMBER", "aea", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Apologies", "should", "be", "fix", "now", "NUMBER", "Problem", "statement", "With", "structs", "tag", "with", "swagger", "model", "in", "the", "swagger", "NUMBER", "json", "generate", "by", "swagger", "generate", "spec", "some", "models", "be", "generate", "with", "a", "title", "property", "equal", "to", "the", "comment", "preceding", "and", "some", "models", "be", "generate", "with", "a", "description", "equal", "to", "the", "comment", "preceding", "NUMBER", "I", "can", "t", "figure", "out", "the", "reason", "for", "this", "behaviour", "NUMBER", "When", "the", "title", "be", "set", "as", "the", "entire", "comment", "then", "in", "the", "Swagger", "UI", "the", "model", "name", "be", "the", "entire", "comment", "and", "not", "just", "the", "struct", "name", "NUMBER", "Can", "someone", "please", "clarify", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "Linux", "So", "the", "issue", "appears", "to", "be", "that", "if", "the", "first", "comment", "line", "which", "starts", "with", "the", "name", "of", "the", "type", "ends", "in", "a", "period", "then", "the", "entire", "line", "will", "be", "use", "as", "the", "model", "title", "but", "if", "there", "be", "no", "period", "then", "the", "line", "will", "be", "use", "as", "the", "description", "NUMBER", "This", "must", "be", "a", "bug", "no", "I", "would", "like", "to", "be", "able", "to", "end", "my", "sentences", "with", "a", "period", "without", "having", "the", "entire", "comment", "line", "use", "as", "the", "name", "of", "the", "model", "in", "the", "models", "section", "of", "the", "swagger", "ui", "NUMBER", "Problem", "statement", "At", "the", "moment", "my", "generate", "model", "struct", "only", "contains", "a", "json", "tag", "NUMBER", "Is", "there", "a", "way", "to", "automatically", "add", "a", "db", "tag", "as", "well", "If", "not", "could", "this", "functionality", "be", "add", "For", "example", "type", "NewPet", "struct", "chip", "Chip", "string", "json", "chip", "omitempty", "db", "chip", "name", "Required", "true", "Name", "string", "json", "name", "db", "name", "tag", "Tag", "string", "json", "tag", "omitempty", "db", "tag", "Thanks", "so", "much", "Managed", "to", "get", "it", "work", "Problem", "statement", "There", "be", "route", "responding", "with", "swagger", "model", "NUMBER", "In", "case", "when", "you", "do", "not", "have", "swagger", "response", "use", "this", "model", "swagger", "generates", "invalid", "spec", "without", "definitions", "block", "referenced", "to", "non", "exist", "field", "Swagger", "specification", "swagger", "model", "swagger", "response", "Steps", "to", "reproduce", "I", "made", "an", "example", "based", "on", "that", "code", "LINK", "swagger", "go", "swagger", "blob", "master", "fixture", "goparsing", "petstore", "rest", "handlers", "orders", "NUMBER", "go", "package", "rest", "import", "net", "http", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "denco", "github", "NUMBER", "com", "go", "openapi", "strfmt", "An", "Order", "for", "one", "or", "more", "pets", "by", "a", "user", "NUMBER", "swagger", "model", "order", "type", "Order", "struct", "the", "ID", "of", "the", "order", "required", "true", "ID", "int", "NUMBER", "json", "id", "the", "id", "of", "the", "user", "who", "placed", "the", "order", "NUMBER", "required", "true", "UserID", "int", "NUMBER", "json", "userId", "the", "time", "at", "which", "this", "order", "was", "made", "NUMBER", "required", "true", "OrderedAt", "strfmt", "NUMBER", "DateTime", "json", "orderedAt", "the", "items", "for", "this", "order", "mininum", "items", "NUMBER", "Items", "struct", "the", "id", "of", "the", "pet", "to", "order", "required", "true", "PetID", "int", "NUMBER", "json", "petId", "the", "quantity", "of", "this", "pet", "to", "order", "required", "true", "minimum", "NUMBER", "Quantity", "int", "NUMBER", "json", "qty", "json", "items", "UpdateOrder", "swagger", "route", "PUT", "orders", "id", "orders", "updateOrder", "Updates", "an", "order", "NUMBER", "Responses", "default", "genericError", "NUMBER", "order", "NUMBER", "validationError", "func", "UpdateOrder", "rw", "http", "NUMBER", "ResponseWriter", "req", "http", "NUMBER", "Request", "params", "denco", "NUMBER", "Params", "some", "actual", "stuff", "should", "happen", "in", "here", "ServeAPI", "serves", "this", "api", "func", "ServeAPI", "error", "mux", "denco", "NUMBER", "NewMux", "routes", "denco", "NUMBER", "Handler", "mux", "NUMBER", "PUT", "orders", "id", "UpdateOrder", "handler", "err", "mux", "NUMBER", "Build", "routes", "if", "err", "nil", "return", "err", "return", "http", "NUMBER", "ListenAndServe", "NUMBER", "handler", "For", "such", "app", "it", "generates", "swagger", "NUMBER", "json", "without", "any", "definitions", "block", "and", "references", "to", "non", "exist", "responses", "order", "NUMBER", "But", "after", "declaring", "such", "struct", "An", "OrderResponse", "response", "model", "This", "be", "use", "for", "returning", "a", "response", "with", "a", "single", "order", "as", "body", "swagger", "response", "orderResponse", "type", "OrderResponse", "struct", "in", "body", "Payload", "models", "NUMBER", "Order", "json", "order", "and", "use", "it", "in", "different", "route", "swagger", "generates", "definitions", "block", "and", "references", "response", "correct", "Environment", "swagger", "version", "dev", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "OS", "X", "NUMBER", "Thanks", "a", "lot", "for", "your", "response", "For", "me", "it", "wasn", "t", "obvious", "behavior", "and", "I", "didn", "t", "find", "any", "info", "in", "documentation", "about", "it", "NUMBER", "Maybe", "it", "would", "be", "better", "to", "describe", "such", "case", "for", "example", "in", "this", "chapter", "LINK", "Where", "be", "the", "documentation", "for", "the", "thick", "body", "order", "Problem", "statement", "Even", "the", "simplest", "server", "I", "could", "come", "up", "with", "fail", "on", "swagger", "UI", "with", "TypeError", "Failed", "to", "fetch", "Swagger", "specification", "json", "consumes", "application", "json", "produces", "application", "json", "schemes", "http", "https", "swagger", "NUMBER", "info", "description", "Title", "example", "title", "be", "an", "example", "REST", "app", "version", "NUMBER", "host", "localhost", "NUMBER", "basePath", "v", "NUMBER", "paths", "foo", "get", "description", "Get", "a", "foo", "operationId", "getFoo", "responses", "NUMBER", "ref", "responses", "getFooResponse", "responses", "getFooResponse", "description", "GetFooResponse", "be", "returned", "by", "GET", "foo", "schema", "type", "object", "properties", "Name", "description", "Name", "of", "the", "foo", "type", "string", "securityDefinitions", "bearer", "type", "apiKey", "name", "Authorization", "in", "header", "security", "bearer", "Steps", "to", "reproduce", "main", "NUMBER", "go", "go", "Package", "main", "be", "an", "example", "REST", "app", "Title", "example", "Schemes", "http", "https", "Host", "localhost", "NUMBER", "BasePath", "v", "NUMBER", "Version", "NUMBER", "Consumes", "application", "json", "Produces", "application", "json", "Security", "bearer", "SecurityDefinitions", "bearer", "type", "apiKey", "name", "Authorization", "in", "header", "swagger", "meta", "package", "main", "import", "encoding", "json", "log", "net", "http", "time", "func", "main", "s", "http", "NUMBER", "Server", "Addr", "NUMBER", "Handler", "myHandler", "ReadTimeout", "NUMBER", "time", "NUMBER", "Second", "WriteTimeout", "NUMBER", "time", "NUMBER", "Second", "MaxHeaderBytes", "NUMBER", "TAG", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "f", "NUMBER", "fdd", "NUMBER", "ee", "NUMBER", "def", "NUMBER", "ce", "NUMBER", "b", "NUMBER", "bab", "NUMBER", "b", "NUMBER", "cb", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "f", "NUMBER", "fdd", "NUMBER", "c", "NUMBER", "da", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "e", "NUMBER", "b", "NUMBER", "aed", "NUMBER", "ea", "NUMBER", "dd", "NUMBER", "b", "NUMBER", "ce", "NUMBER", "c", "NUMBER", "dce", "NUMBER", "bc", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "e", "NUMBER", "b", "NUMBER", "eabce", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "d", "NUMBER", "c", "NUMBER", "f", "NUMBER", "fee", "NUMBER", "cb", "NUMBER", "ebc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "d", "NUMBER", "ea", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "template", "_repo", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "RlbXBsYXRlX", "NUMBER", "JlcG", "NUMBER", "uZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "d", "NUMBER", "c", "NUMBER", "ea", "NUMBER", "e", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "go", "swagger", "generates", "incorrect", "json", "for", "overridden", "json", "field", "from", "embedded", "struct", "NUMBER", "Steps", "to", "reproduce", "go", "A", "SimpleOne", "be", "a", "model", "with", "a", "few", "simple", "field", "type", "SimpleOne", "struct", "ID", "int", "NUMBER", "json", "id", "Name", "string", "json", "name", "Age", "int", "NUMBER", "json", "age", "An", "OverridingOneIgnore", "be", "composed", "of", "a", "SimpleOne", "and", "overrides", "a", "field", "to", "ignore", "it", "type", "OverridingOneIgnore", "struct", "SimpleOne", "Age", "int", "NUMBER", "json", "Age", "property", "still", "will", "appear", "in", "result", "json", "NUMBER", "Will", "you", "be", "welcome", "for", "pull", "request", "similar", "to", "this", "commit", "LINK", "swagger", "gen", "commit", "ae", "NUMBER", "eecf", "NUMBER", "fabe", "NUMBER", "ba", "NUMBER", "b", "NUMBER", "c", "NUMBER", "c", "NUMBER", "c", "NUMBER", "d", "Problem", "statement", "The", "swagger", "UI", "doesn", "t", "pass", "along", "an", "authorization", "header", "NUMBER", "Swagger", "specification", "consumes", "application", "json", "produces", "application", "json", "schemes", "http", "https", "swagger", "NUMBER", "info", "description", "foo", "version", "NUMBER", "host", "localhost", "NUMBER", "basePath", "v", "NUMBER", "paths", "foo", "get", "summary", "Get", "a", "foo", "operationId", "getFoo", "responses", "NUMBER", "ref", "responses", "fooResponse", "responses", "fooResponse", "description", "Foo", "response", "schema", "type", "array", "items", "type", "string", "securityDefinitions", "bearer", "type", "apiKey", "name", "Authorization", "in", "header", "Steps", "to", "reproduce", "swagger", "serve", "swagger", "NUMBER", "json", "flavor", "swagger", "Click", "Authorize", "type", "something", "in", "the", "box", "click", "Authorize", "on", "the", "dialog", "then", "click", "X", "NUMBER", "Now", "try", "a", "request", "to", "foo", "through", "the", "UI", "NUMBER", "No", "auth", "header", "be", "pass", "NUMBER", "The", "following", "ends", "up", "in", "my", "log", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "info", "http", "api_v", "NUMBER", "go", "NUMBER", "NotFound", "GET", "v", "NUMBER", "foo", "map", "Accept", "Language", "en", "US", "en", "Referer", "LINK", "http", "NUMBER", "A", "NUMBER", "F", "NUMBER", "Flocalhost", "NUMBER", "A", "NUMBER", "NUMBER", "Fswagger", "NUMBER", "json", "Accept", "Encoding", "gzip", "deflate", "br", "Connection", "keep", "alive", "Dnt", "NUMBER", "X", "Do", "Not", "Track", "NUMBER", "Accept", "application", "json", "Origin", "LINK", "User", "Agent", "Mozilla", "NUMBER", "X", "NUMBER", "Linux", "x", "NUMBER", "_", "NUMBER", "AppleWebKit", "NUMBER", "KHTML", "like", "Gecko", "QtWebEngine", "NUMBER", "Chrome", "NUMBER", "Safari", "NUMBER", "There", "be", "no", "Authorization", "header", "pass", "along", "NUMBER", "Environment", "swagger", "version", "dev", "go", "version", "go", "NUMBER", "OS", "linux", "amd", "NUMBER", "My", "bad", "I", "misunderstood", "how", "to", "set", "it", "up", "NUMBER", "In", "the", "meta", "section", "in", "addition", "to", "SecurityDefinitions", "you", "need", "Security", "bearer", "Problem", "statement", "Swagger", "specification", "N", "A", "use", "any", "NUMBER", "swagger", "generate", "server", "f", "swagger", "NUMBER", "yml", "t", "api_v", "NUMBER", "model", "package", "restmodels", "server", "package", "server", "exclude", "main", "A", "Example", "Steps", "to", "reproduce", "Run", "any", "swagger", "yaml", "through", "the", "latest", "code", "and", "I", "get", "the", "following", "compile", "error", "in", "the", "generate", "server", "NUMBER", "go", "NUMBER", "NUMBER", "configureServer", "domainSocket", "unix", "string", "s", "NUMBER", "SocketPath", "NUMBER", "configureServer", "httpServer", "http", "s", "NUMBER", "httpServerL", "NUMBER", "Addr", "NUMBER", "String", "NUMBER", "configureServer", "httpsServer", "https", "s", "NUMBER", "httpsServerL", "NUMBER", "Addr", "NUMBER", "String", "In", "all", "cases", "the", "last", "argument", "needs", "to", "be", "remove", "to", "solve", "the", "problem", "NUMBER", "Environment", "swagger", "version", "dev", "latest", "go", "version", "NUMBER", "OS", "Mac", "OS", "NUMBER", "Sorry", "I", "cannot", "follow", "NUMBER", "swagger", "generate", "generates", "code", "for", "me", "that", "do", "not", "compile", "NUMBER", "I", "don", "t", "see", "how", "the", "callback", "helps", "me", "NUMBER", "Thanks", "Problem", "statement", "When", "a", "name", "collision", "occur", "go", "swagger", "silently", "pick", "one", "definition", "to", "use", "and", "drops", "the", "rest", "NUMBER", "While", "we", "can", "work", "around", "this", "by", "avoiding", "name", "collisions", "it", "be", "difficult", "to", "track", "down", "on", "sufficiently", "large", "and", "disjoint", "web", "APIs", "NUMBER", "Steps", "to", "reproduce", "I", "m", "work", "to", "fully", "document", "a", "web", "API", "that", "uses", "Google", "ProtoBuf", "to", "communicate", "with", "several", "backend", "services", "NUMBER", "Each", "service", "provides", "its", "own", "NUMBER", "proto", "file", "and", "the", "Go", "code", "be", "generate", "from", "the", "NUMBER", "proto", "file", "directly", "NUMBER", "Currently", "the", "web", "server", "uses", "these", "generate", "types", "directly", "but", "we", "have", "some", "name", "collisions", "between", "services", "NUMBER", "I", "be", "work", "around", "this", "issue", "by", "duplicating", "the", "types", "in", "question", "and", "provide", "unique", "names", "based", "on", "the", "service", "they", "re", "associated", "with", "NUMBER", "I", "would", "like", "to", "receive", "some", "sort", "of", "output", "logging", "warning", "that", "a", "name", "collision", "was", "detected", "so", "that", "I", "can", "fail", "my", "build", "process", "and", "have", "the", "developer", "correct", "the", "name", "collision", "prior", "to", "continuing", "NUMBER", "This", "would", "help", "head", "off", "potential", "API", "issue", "right", "when", "they", "re", "introduce", "rather", "than", "much", "later", "when", "we", "re", "test", "out", "the", "documentation", "layer", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Windows", "NUMBER", "Problem", "statement", "I", "m", "work", "on", "a", "API", "in", "which", "I", "have", "to", "mix", "Go", "code", "with", "a", "C", "library", "ergo", "I", "need", "to", "use", "cgo", "NUMBER", "In", "the", "example", "below", "I", "have", "some", "annoted", "go", "code", "from", "the", "examples", "together", "with", "a", "basic", "cgo", "integration", "NUMBER", "When", "the", "cgo", "import", "compiler", "be", "active", "an", "empty", "spec", "be", "generate", "NUMBER", "When", "the", "cgo", "specific", "code", "be", "remove", "or", "commented", "out", "the", "generator", "tool", "works", "as", "expected", "NUMBER", "Go", "code", "Swagger", "annotations", "go", "package", "main", "include", "TAG", "include", "hello", "NUMBER", "h", "import", "C", "import", "net", "http", "An", "Order", "be", "use", "to", "foobar", "swagger", "response", "order", "type", "Order", "struct", "The", "order", "foobars", "in", "body", "Body", "struct", "Name", "of", "the", "order", "name", "string", "ID", "of", "the", "order", "Required", "true", "id", "int", "NUMBER", "CreateOrder", "swagger", "route", "POST", "orders", "orders", "createOrder", "Creates", "an", "order", "NUMBER", "Responses", "default", "validationError", "NUMBER", "order", "NUMBER", "validationError", "func", "CreateOrder", "rw", "http", "NUMBER", "ResponseWriter", "req", "http", "NUMBER", "Request", "some", "actual", "stuff", "should", "happen", "in", "here", "func", "main", "C", "NUMBER", "hello", "Steps", "to", "reproduce", "NUMBER", "Run", "swagger", "generate", "spec", "NUMBER", "Result", "json", "swagger", "NUMBER", "paths", "NUMBER", "Remove", "the", "cgo", "build", "comment", "and", "import", "and", "the", "cgo", "call", "in", "the", "main", "function", "go", "include", "TAG", "include", "hello", "NUMBER", "h", "import", "C", "NUMBER", "C", "NUMBER", "hello", "NUMBER", "Without", "the", "cgo", "usage", "run", "swagger", "generate", "spec", "again", "NUMBER", "The", "result", "be", "now", "json", "swagger", "NUMBER", "paths", "orders", "post", "tags", "orders", "summary", "Creates", "an", "order", "NUMBER", "operationId", "createOrder", "responses", "NUMBER", "ref", "responses", "order", "NUMBER", "ref", "responses", "validationError", "default", "ref", "responses", "validationError", "responses", "order", "description", "An", "Order", "be", "use", "to", "foobar", "schema", "type", "object", "This", "would", "be", "the", "expected", "behaviour", "of", "the", "annotated", "go", "code", "together", "with", "the", "swagger", "generator", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "Mac", "OS", "X", "NUMBER", "Bump", "NUMBER", "no", "one", "Problem", "statement", "According", "to", "the", "docs", "here", "LINK", "your", "own", "code", "Every", "incoming", "request", "be", "describe", "as", "a", "bunch", "of", "input", "parameters", "which", "have", "be", "validated", "prior", "to", "calling", "the", "handler", "NUMBER", "So", "whenever", "your", "code", "be", "executed", "the", "input", "parameters", "be", "guaranteed", "to", "be", "valid", "according", "to", "what", "the", "swagger", "specification", "prescribes", "NUMBER", "However", "in", "practice", "the", "server", "generate", "do", "not", "actually", "validate", "input", "NUMBER", "I", "m", "able", "to", "not", "specify", "required", "properties", "resource_type", "or", "resource_id", "or", "even", "send", "an", "empty", "body", "and", "the", "code", "path", "still", "reaches", "my", "route", "handler", "NUMBER", "Swagger", "specification", "yaml", "paths", "resource_schema", "put", "tags", "ResourceSchema", "description", "Find", "or", "create", "a", "ResourceSchema", "based", "on", "the", "resource", "s", "type", "and", "id", "parameters", "in", "body", "name", "input", "required", "true", "schema", "type", "object", "properties", "resource_type", "ref", "definitions", "ResourceType", "resource_id", "type", "string", "required", "resource_type", "resource_id", "responses", "NUMBER", "description", "Success", "schema", "ref", "definitions", "ResourceSchema", "Steps", "to", "reproduce", "swagger", "generate", "server", "t", "servers", "go", "go", "run", "servers", "go", "cmd", "schema", "service", "server", "main", "NUMBER", "go", "Then", "make", "a", "request", "to", "the", "server", "such", "as", "curl", "X", "PUT", "LINK", "_schema", "H", "accept", "application", "json", "H", "content", "type", "application", "json", "d", "Environment", "swagger", "version", "dev", "latest", "master", "as", "of", "time", "of", "issue", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "macOS", "NUMBER", "NUMBER", "F", "NUMBER", "I", "think", "this", "be", "fix", "in", "the", "latest", "release", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "swagger", "validate", "spec", "NUMBER", "json", "The", "swagger", "spec", "at", "spec", "NUMBER", "json", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "NUMBER", "swagger", "in", "body", "be", "required", "NUMBER", "info", "in", "body", "be", "required", "swagger", "generate", "server", "t", "servers", "go", "The", "swagger", "spec", "at", "swagger", "NUMBER", "json", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "NUMBER", "swagger", "in", "body", "be", "required", "NUMBER", "info", "in", "body", "be", "required", "cswarth", "you", "be", "talking", "about", "validating", "the", "spec", "the", "issue", "be", "about", "the", "generate", "server", "doing", "validation", "on", "http", "request", "bodies", "NUMBER", "Same", "issue", "here", "I", "ve", "generate", "a", "go", "server", "with", "a", "spec", "containing", "for", "ex", "this", "kind", "of", "parameters", "parameters", "name", "UUID", "in", "path", "description", "People", "UUID", "required", "true", "type", "string", "format", "uuid", "My", "restapi", "operations", "object_name", "contain", "some", "generate", "type", "like", "type", "GetUserPreferencesParams", "struct", "HTTP", "Request", "Object", "HTTPRequest", "http", "NUMBER", "Request", "json", "People", "UUID", "Required", "true", "In", "path", "UUID", "strfmt", "NUMBER", "UUID", "And", "strfmt", "NUMBER", "UUID", "be", "well", "defined", "in", "GitHub", "NUMBER", "com", "go", "openapi", "strfmt", "default", "NUMBER", "go", "with", "UUID", "represents", "a", "uuid", "string", "format", "swagger", "strfmt", "uuid", "type", "UUID", "string", "NUMBER", "IsUUID", "returns", "true", "be", "the", "string", "matches", "a", "UUID", "upper", "case", "be", "allow", "func", "IsUUID", "str", "string", "bool", "return", "rxUUID", "NUMBER", "MatchString", "str", "NUMBER", "UUIDPattern", "i", "NUMBER", "NUMBER", "a", "f", "NUMBER", "NUMBER", "NUMBER", "a", "f", "NUMBER", "NUMBER", "NUMBER", "a", "f", "NUMBER", "NUMBER", "NUMBER", "a", "f", "NUMBER", "NUMBER", "NUMBER", "a", "f", "NUMBER", "NUMBER", "But", "the", "following", "code", "return", "alway", "nil", "with", "a", "good", "UUID", "or", "a", "bad", "one", "func", "o", "GetUserPreferencesParams", "bindUUID", "rawData", "string", "hasKey", "bool", "formats", "strfmt", "NUMBER", "Registry", "error", "var", "raw", "string", "if", "len", "rawData", "NUMBER", "raw", "rawData", "len", "rawData", "NUMBER", "value", "err", "formats", "NUMBER", "Parse", "uuid", "raw", "if", "err", "nil", "return", "error", "NUMBER", "InvalidType", "UUID", "path", "strfmt", "NUMBER", "UUID", "raw", "o", "NUMBER", "UUID", "value", "NUMBER", "strfmt", "NUMBER", "UUID", "return", "nil", "Then", "trying", "to", "call", "API", "with", "a", "god", "or", "bad", "UUID", "format", "produce", "the", "same", "result", "Anything", "to", "do", "to", "force", "formats", "checking", "fredbi", "I", "will", "do", "and", "keep", "you", "in", "touch", "thank", "you", "for", "your", "response", "NUMBER", "Hello", "fredbi", "from", "what", "I", "understand", "you", "ve", "merge", "your", "fix", "in", "the", "master", "branch", "on", "NUMBER", "Jan", "NUMBER", "Then", "I", "assume", "I", "can", "test", "simply", "by", "update", "my", "go", "swagger", "via", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "NUMBER", "Then", "I", "ve", "regenerated", "my", "server", "via", "bin", "swagger", "generate", "server", "A", "postier", "f", "NUMBER", "swagger", "NUMBER", "yml", "NUMBER", "This", "has", "update", "some", "file", "add", "some", "with", "a", "strange", "name", "like", "notify_new_a_d_e_l_i_mail_parameters", "NUMBER", "go", "in", "place", "of", "notify_new_adelimail_parameters", "NUMBER", "go", "then", "I", "ve", "delete", "the", "old", "ones", "in", "this", "example", "notify_new_adelimail_parameters", "NUMBER", "go", "NUMBER", "Despite", "all", "these", "change", "during", "my", "test", "when", "I", "try", "to", "get", "a", "parameter", "with", "bad", "UUID", "format", "in", "URL", "no", "error", "be", "raise", "I", "confirm", "my", "parameter", "be", "required", "parameters", "name", "UUID", "in", "path", "description", "People", "UUID", "required", "true", "type", "string", "format", "uuid", "but", "despite", "that", "the", "format", "aren", "t", "validated", "NUMBER", "Anyway", "I", "can", "wait", "next", "week", "for", "merge", "of", "the", "new", "go", "openapi", "validate", "in", "the", "vendor", "tree", "NUMBER", "For", "strange", "naming", "with", "be", "not", "an", "issue", "what", "be", "strange", "be", "just", "that", "the", "names", "has", "change", "after", "go", "swagger", "upgrade", "and", "without", "any", "change", "in", "the", "spec", "NUMBER", "Many", "thanks", "for", "your", "time", "NUMBER", "Anyhow", "the", "plan", "with", "NUMBER", "be", "to", "provide", "a", "more", "comprehensive", "support", "for", "simple", "params", "including", "arrays", "nested", "arrarys", "and", "default", "values", "for", "which", "there", "be", "many", "issus", "currently", "NUMBER", "From", "master", "or", "fredbi", "NUMBER", "fix", "validate", "format", "for", "simple", "param", "Problem", "statement", "Go", "swagger", "generates", "invalid", "code", "NUMBER", "Specifically", "here", "s", "an", "excerpt", "of", "generate", "lines", "func", "o", "DeleteResourceSchemaID", "ServeHTTP", "rw", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "route", "_", "o", "NUMBER", "Context", "NUMBER", "RouteInfo", "r", "this", "line", "causes", "problem", "var", "Params", "NewDeleteResourceSchemaIDParams", "if", "err", "o", "NUMBER", "Context", "NUMBER", "BindValidRequest", "r", "route", "Params", "err", "nil", "bind", "params", "And", "here", "s", "the", "definition", "of", "RouteInfo", "function", "on", "Context", "struct", "from", "the", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "package", "func", "c", "Context", "RouteInfo", "request", "http", "NUMBER", "Request", "MatchedRoute", "http", "NUMBER", "Request", "bool", "As", "you", "can", "see", "function", "returns", "NUMBER", "results", "but", "generate", "code", "only", "accounts", "for", "NUMBER", "of", "them", "cause", "compiler", "to", "complain", "Steps", "to", "reproduce", "bash", "swagger", "generate", "server", "t", "servers", "go", "NUMBER", "go", "get", "u", "f", "NUMBER", "servers", "go", "NUMBER", "github", "NUMBER", "com", "segmentio", "schema", "service", "swagger", "servers", "go", "restapi", "operations", "resource_schema", "servers", "go", "restapi", "operations", "resource_schema", "delete_resource_schema_id", "NUMBER", "go", "NUMBER", "assignment", "count", "mismatch", "NUMBER", "NUMBER", "servers", "go", "restapi", "operations", "resource_schema", "get_resource_schema_id", "NUMBER", "go", "NUMBER", "assignment", "count", "mismatch", "NUMBER", "NUMBER", "servers", "go", "restapi", "operations", "resource_schema", "put_resource_schema", "NUMBER", "go", "NUMBER", "assignment", "count", "mismatch", "NUMBER", "NUMBER", "Environment", "swagger", "version", "NUMBER", "swagger", "commit", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bbf", "NUMBER", "d", "NUMBER", "ed", "NUMBER", "a", "NUMBER", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "macOS", "NUMBER", "NUMBER", "F", "NUMBER", "Confirmed", "latest", "master", "fix", "it", "thanks", "and", "closing", "I", "cloned", "the", "repo", "checked", "out", "the", "latest", "commit", "explicitly", "in", "master", "just", "to", "be", "sure", "since", "just", "cloning", "the", "repo", "and", "build", "also", "didn", "t", "work", "run", "go", "build", "and", "swagger", "version", "still", "shows", "the", "same", "commit", "id", "git", "checkout", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "ef", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "f", "NUMBER", "a", "NUMBER", "HEAD", "be", "now", "at", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "replace", "gorilla", "context", "with", "net", "NUMBER", "Context", "NUMBER", "go", "build", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bbf", "NUMBER", "d", "NUMBER", "ed", "NUMBER", "a", "NUMBER", "I", "m", "sure", "I", "m", "doing", "something", "wrong", "since", "I", "still", "get", "the", "error", "mismatch", "mention", "above", "NUMBER", "Any", "hints", "I", "wound", "up", "solving", "the", "issue", "by", "copying", "one", "of", "the", "include", "examples", "near", "the", "line", "for", "the", "respective", "error", "but", "not", "sure", "why", "my", "code", "still", "isn", "t", "generating", "correctly", "NUMBER", "FYI", "the", "code", "in", "question", "be", "in", "the", "ServeHTTP", "func", "needed", "to", "add", "rCtx", "route", "rCtx", "_", "o", "NUMBER", "Context", "NUMBER", "RouteInfo", "r", "if", "rCtx", "nil", "r", "rCtx", "Dear", "All", "I", "be", "having", "similar", "trouble", "NUMBER", "Please", "suggest", "NUMBER", "swagger", "version", "NUMBER", "commit", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "go", "version", "go", "NUMBER", "linux", "amd", "NUMBER", "ubuntu", "NUMBER", "LTS", "I", "be", "use", "following", "command", "usr", "local", "bin", "swagger", "generate", "server", "t", "gen", "f", "NUMBER", "spec", "swagger", "NUMBER", "yml", "exclude", "main", "A", "AppName", "P", "principal", "thanks", "and", "regards", "Rajdeep", "Problem", "statement", "I", "want", "to", "generate", "a", "specification", "from", "annotated", "Go", "code", "NUMBER", "As", "a", "simple", "test", "I", "copied", "the", "following", "Package", "comment", "to", "my", "main", "NUMBER", "go", "and", "then", "tried", "to", "generate", "the", "spec", "use", "go", "swagger", "NUMBER", "I", "get", "the", "following", "error", "analyzed", "yaml", "line", "NUMBER", "mapping", "values", "be", "not", "allow", "in", "this", "context", "NUMBER", "Copyright", "NUMBER", "go", "swagger", "maintainers", "Licensed", "under", "the", "Apache", "License", "Version", "NUMBER", "the", "License", "you", "may", "not", "use", "this", "file", "except", "in", "compliance", "with", "the", "License", "NUMBER", "You", "may", "obtain", "a", "copy", "of", "the", "License", "at", "LINK", "NUMBER", "Unless", "required", "by", "applicable", "law", "or", "agreed", "to", "in", "write", "software", "distributed", "under", "the", "License", "be", "distributed", "on", "an", "AS", "IS", "BASIS", "WITHOUT", "WARRANTIES", "OR", "CONDITIONS", "OF", "ANY", "KIND", "either", "express", "or", "implied", "NUMBER", "See", "the", "License", "for", "the", "specific", "language", "governing", "permissions", "and", "limitations", "under", "the", "License", "NUMBER", "Package", "petstore", "Petstore", "API", "NUMBER", "the", "purpose", "of", "this", "application", "be", "to", "provide", "an", "application", "that", "be", "use", "plain", "go", "code", "to", "define", "an", "API", "This", "should", "demonstrate", "all", "the", "possible", "comment", "annotations", "that", "be", "available", "to", "turn", "go", "code", "into", "a", "fully", "compliant", "swagger", "NUMBER", "spec", "Terms", "Of", "Service", "there", "be", "no", "TOS", "at", "this", "moment", "use", "at", "your", "own", "risk", "we", "take", "no", "responsibility", "Schemes", "http", "https", "Host", "localhost", "BasePath", "v", "NUMBER", "Version", "NUMBER", "License", "MIT", "LINK", "Contact", "John", "Doe", "TAG", "LINK", "Consumes", "application", "json", "Produces", "application", "json", "swagger", "meta", "Steps", "to", "reproduce", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "i", "main", "NUMBER", "go", "analyzed", "yaml", "line", "NUMBER", "mapping", "values", "be", "not", "allow", "in", "this", "context", "Environment", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bbf", "NUMBER", "d", "NUMBER", "ed", "NUMBER", "a", "NUMBER", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "OSX", "Actually", "copied", "the", "go", "code", "from", "LINK", "swagger", "go", "swagger", "blob", "master", "docs", "generate", "spec", "meta", "NUMBER", "md", "and", "placed", "it", "in", "a", "doc", "NUMBER", "go", "file", "NUMBER", "Still", "get", "the", "same", "error", "as", "from", "my", "own", "code", "NUMBER", "I", "created", "an", "empty", "repo", "and", "add", "a", "single", "doc", "NUMBER", "go", "file", "to", "it", "NUMBER", "Added", "to", "same", "package", "comment", "and", "then", "run", "bash", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "This", "worked", "but", "if", "I", "use", "bash", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "i", "doc", "NUMBER", "go", "I", "get", "the", "same", "error", "as", "before", "NUMBER", "Am", "I", "use", "the", "input", "file", "parameter", "properly", "Is", "it", "possible", "to", "restrict", "it", "to", "just", "look", "at", "certain", "file", "If", "I", "run", "it", "in", "my", "actual", "project", "repo", "its", "generates", "NUMBER", "s", "of", "error", "from", "my", "imported", "package", "NUMBER", "My", "Swagger", "annotations", "will", "only", "be", "in", "two", "file", "doc", "NUMBER", "go", "and", "rest", "NUMBER", "go", "NUMBER", "So", "I", "can", "exclude", "third", "party", "libraries", "with", "annotations", "in", "my", "code", "or", "do", "you", "mean", "that", "the", "swagger", "generator", "would", "need", "to", "be", "update", "This", "be", "typical", "of", "the", "error", "I", "see", "when", "I", "run", "Swagger", "on", "my", "project", "hypatia", "go", "src", "github", "NUMBER", "com", "gorilla", "mux", "context_native", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "context", "cannot", "find", "package", "context", "in", "any", "of", "usr", "local", "go", "src", "context", "from", "GOROOT", "hypatia", "go", "src", "context", "from", "GOPATH", "hypatia", "go", "src", "github", "NUMBER", "com", "gorilla", "mux", "context_native", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "net", "http", "cannot", "find", "package", "net", "http", "in", "any", "of", "usr", "local", "go", "src", "net", "http", "from", "GOROOT", "Is", "this", "a", "configuration", "issue", "with", "my", "environment", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "Go", "and", "go", "swagger", "both", "install", "on", "OSX", "via", "Homebrew", "NUMBER", "Everything", "be", "standard", "and", "my", "code", "function", "correctly", "NUMBER", "I", "had", "the", "same", "issue", "on", "the", "same", "version", "of", "Go", "NUMBER", "on", "macOS", "NUMBER", "To", "resolve", "it", "I", "manually", "set", "my", "GOROOT", "even", "though", "it", "was", "already", "set", "when", "I", "run", "go", "env", "NUMBER", "There", "be", "probably", "a", "tool", "that", "do", "not", "read", "GOROOT", "properly", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "bfd", "NUMBER", "e", "NUMBER", "adc", "NUMBER", "ee", "NUMBER", "bd", "NUMBER", "d", "NUMBER", "f", "NUMBER", "a", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "bfd", "NUMBER", "e", "NUMBER", "f", "NUMBER", "edaa", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "When", "specify", "a", "security", "block", "in", "the", "AND", "format", "describe", "here", "LINK", "having", "only", "one", "pass", "allows", "request", "to", "continue", "without", "a", "NUMBER", "The", "documentation", "state", "security", "A", "B", "A", "OR", "B", "security", "A", "B", "A", "AND", "B", "Swagger", "specification", "I", "ve", "include", "the", "relevant", "bit", "here", "NUMBER", "I", "ve", "put", "a", "full", "test", "case", "at", "LINK", "swagger", "auth", "test", "if", "you", "want", "to", "clone", "and", "review", "directly", "NUMBER", "It", "s", "the", "TodoList", "Swagger", "file", "with", "only", "the", "following", "security", "bit", "add", "NUMBER", "securityDefinitions", "AppTokenAuth", "type", "apiKey", "in", "header", "name", "App", "Token", "TokenAuth", "type", "apiKey", "in", "header", "name", "Token", "security", "AppTokenAuth", "TokenAuth", "Steps", "to", "reproduce", "I", "implement", "only", "the", "AppTokenAuthAuth", "function", "and", "left", "TokenAuthAuth", "returning", "an", "error", "api", "NUMBER", "AppTokenAuthAuth", "func", "token", "string", "interface", "error", "return", "true", "nil", "return", "nil", "error", "NUMBER", "NotImplemented", "api", "key", "auth", "AppTokenAuth", "App", "Token", "from", "header", "param", "App", "Token", "has", "not", "yet", "be", "implement", "Applies", "when", "the", "Token", "header", "be", "set", "api", "NUMBER", "TokenAuthAuth", "func", "token", "string", "interface", "error", "return", "nil", "error", "NUMBER", "NotImplemented", "api", "key", "auth", "TokenAuth", "Token", "from", "header", "param", "Token", "has", "not", "yet", "be", "implement", "However", "upon", "cURLing", "with", "just", "an", "App", "Token", "it", "moves", "onto", "the", "method", "handler", "instead", "of", "rejecting", "the", "request", "with", "a", "NUMBER", "curl", "H", "App", "Token", "x", "LINK", "operation", "todos", "NUMBER", "Get", "has", "not", "yet", "be", "implement", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "OSX", "NUMBER", "New", "to", "go", "swagger", "but", "I", "ve", "also", "run", "into", "this", "issue", "and", "had", "a", "quick", "look", "into", "the", "code", "NUMBER", "Long", "story", "short", "the", "problem", "ultimately", "be", "with", "the", "go", "openapi", "router", "middleware", "collapsing", "the", "path", "security", "map", "into", "just", "an", "of", "unique", "requirements", "go", "swagger", "then", "implement", "this", "has", "to", "NUMBER", "Short", "story", "long", "NUMBER", "The", "go", "openapi", "which", "go", "swagger", "depends", "on", "defines", "a", "struct", "model", "for", "a", "swagger", "spec", "take", "a", "look", "at", "spec", "NUMBER", "Operation", "which", "has", "a", "spec", "NUMBER", "OperationProps", "which", "seems", "to", "define", "the", "properties", "on", "the", "route", "path", "NUMBER", "spec", "NUMBER", "OperationProps", "defines", "security", "prop", "as", "an", "map", "string", "string", "This", "matches", "with", "the", "swagger", "spec", "documentation", "i", "NUMBER", "e", "there", "be", "a", "list", "of", "acceptable", "maps", "of", "security", "definitions", "scopes", "the", "list", "be", "the", "OR", "part", "and", "the", "map", "be", "the", "AND", "part", "NUMBER", "Where", "this", "seems", "to", "go", "wrong", "get", "lost", "be", "in", "the", "go", "swagger", "analyzer", "take", "a", "look", "at", "analysis", "NUMBER", "SecurityRequirementsFor", "schemes", "operation", "NUMBER", "Security", "unique", "make", "map", "string", "SecurityRequirement", "for", "_", "scheme", "range", "schemes", "for", "k", "v", "range", "scheme", "if", "_", "ok", "unique", "k", "ok", "unique", "k", "SecurityRequirement", "Name", "k", "Scopes", "v", "var", "result", "SecurityRequirement", "for", "_", "v", "range", "unique", "result", "append", "result", "v", "return", "result", "It", "takes", "the", "map", "and", "squashes", "it", "down", "into", "a", "flat", "array", "of", "unique", "security", "requirements", "destroying", "the", "grouping", "NUMBER", "Really", "here", "it", "should", "return", "a", "SecurityRequirement", "NUMBER", "However", "worse", "still", "go", "swagger", "depends", "on", "the", "go", "openapi", "runtime", "middleware", "router", "and", "that", "to", "my", "eye", "seems", "broken", "explains", "why", "it", "be", "doing", "it", "NUMBER", "In", "go", "openapi", "middleware", "package", "router", "NUMBER", "go", "the", "middleware", "NUMBER", "AddRoute", "function", "it", "takes", "the", "go", "swagger", "analazyer", "implementation", "similar", "to", "above", "edit", "its", "not", "the", "same", "function", "but", "similar", "and", "gets", "the", "security", "definitions", "as", "an", "array", "and", "then", "goes", "on", "to", "match", "Authenticators", "for", "them", "which", "I", "suspect", "be", "created", "by", "the", "securityDefinitions", "NUMBER", "func", "d", "defaultRouteBuilder", "AddRoute", "method", "path", "string", "operation", "spec", "NUMBER", "Operation", "requirements", "d", "NUMBER", "analyzer", "NUMBER", "SecurityRequirementsFor", "operation", "record", "denco", "NUMBER", "NewRecord", "pathConverter", "NUMBER", "ReplaceAllString", "path", "NUMBER", "routeEnt", "Authenticators", "d", "NUMBER", "api", "NUMBER", "AuthenticatorsFor", "definitions", "That", "seems", "just", "wrong", "it", "should", "be", "support", "the", "list", "of", "map", "here", "NUMBER", "Having", "a", "look", "at", "the", "middleware", "context", "NUMBER", "go", "middleware", "NUMBER", "Authorize", "for", "scheme", "authenticator", "range", "route", "NUMBER", "Authenticators", "applies", "usr", "err", "authenticator", "NUMBER", "Authenticate", "security", "NUMBER", "ScopedAuthRequest", "Request", "request", "RequiredScopes", "route", "NUMBER", "Scopes", "scheme", "if", "applies", "err", "nil", "usr", "nil", "if", "err", "nil", "lastError", "err", "continue", "if", "route", "NUMBER", "Authorizer", "nil", "if", "err", "route", "NUMBER", "Authorizer", "NUMBER", "Authorize", "request", "usr", "err", "nil", "return", "nil", "nil", "error", "NUMBER", "New", "http", "NUMBER", "StatusForbidden", "err", "NUMBER", "Error", "rCtx", "stdContext", "NUMBER", "WithValue", "rCtx", "ctxSecurityPrincipal", "usr", "rCtx", "stdContext", "NUMBER", "WithValue", "rCtx", "ctxSecurityScopes", "route", "NUMBER", "Scopes", "scheme", "return", "usr", "request", "NUMBER", "WithContext", "rCtx", "nil", "You", "can", "see", "it", "loops", "through", "the", "Authenticators", "and", "if", "one", "applies", "and", "be", "valid", "the", "authorizer", "be", "then", "questioned", "with", "the", "principal", "and", "the", "route", "continues", "or", "error", "NUMBER", "So", "its", "doing", "the", "OR", "part", "on", "a", "flattened", "security", "definition", "NUMBER", "This", "isnt", "just", "broken", "its", "actually", "dangerous", "as", "if", "any", "sub", "part", "of", "the", "auth", "pass", "the", "route", "will", "pass", "be", "hit", "NUMBER", "So", "looks", "like", "a", "fix", "to", "go", "openapi", "be", "needed", "to", "handle", "the", "map", "and", "then", "a", "fix", "to", "go", "swagger", "be", "needed", "to", "implement", "it", "NUMBER", "First", "one", "seems", "a", "bit", "tricky", "as", "the", "router", "routes", "be", "fairly", "involved", "the", "second", "one", "be", "simple", "enough", "apart", "from", "you", "need", "to", "change", "the", "codegen", "which", "looks", "fairly", "involved", "steep", "looks", "learning", "curve", "NUMBER", "LINK", "NUMBER", "authentication", "see", "Using", "Multiple", "Authentication", "Types", "Yeah", "NUMBER", "you", "can", "see", "in", "current", "vendored", "go", "openapi", "code", "for", "go", "swagger", "the", "spec", "NUMBER", "OperationProps", "struct", "has", "a", "of", "map", "so", "its", "in", "the", "model", "it", "just", "the", "router", "fail", "to", "implement", "it", "and", "that", "has", "a", "knock", "on", "effect", "on", "the", "API", "that", "go", "swagger", "implement", "NUMBER", "The", "change", "looks", "fairly", "reasonable", "except", "for", "the", "fact", "one", "principal", "to", "rule", "them", "doesnt", "really", "cut", "it", "NUMBER", "A", "typed", "map", "string", "interface", "to", "map", "security", "definition", "id", "principals", "for", "whichever", "security", "group", "pass", "map", "be", "a", "reasonable", "strategy", "could", "simplify", "if", "there", "was", "only", "NUMBER", "requirement", "return", "just", "the", "principal", "NUMBER", "Whatever", "change", "though", "this", "doesn", "t", "interact", "well", "with", "the", "P", "option", "where", "you", "can", "define", "a", "specified", "principal", "something", "clever", "with", "codgen", "may", "work", "NUMBER", "Problem", "statement", "When", "trying", "to", "generate", "swagger", "NUMBER", "json", "for", "parameters", "having", "array", "values", "its", "generating", "in", "the", "below", "mention", "structure", "which", "be", "giving", "an", "error", "in", "LINK", "Steps", "to", "reproduce", "type", "Ele", "struct", "SomeId", "int", "json", "someId", "required", "SomeName", "string", "json", "someName", "required", "swagger", "parameters", "Request", "type", "Request", "struct", "Arr", "Ele", "json", "arr", "omitempty", "Generates", "a", "swagger", "NUMBER", "json", "of", "the", "format", "parameters", "NUMBER", "type", "array", "items", "ref", "definitions", "Ele", "name", "Arr", "in", "query", "NUMBER", "definitions", "NUMBER", "Ele", "type", "object", "properties", "SomeName", "type", "string", "propId", "type", "integer", "format", "int", "NUMBER", "NUMBER", "Error", "from", "Editor", "says", "items", "refs", "cannot", "match", "any", "of", "the", "following", "definitions", "When", "editing", "the", "generate", "structure", "to", "the", "following", "structure", "for", "array", "its", "get", "accepted", "NUMBER", "name", "Arr", "in", "body", "schema", "type", "array", "items", "ref", "definitions", "Prop", "Is", "there", "any", "thing", "I", "m", "miss", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "OSX", "casualjim", "thanks", "for", "the", "reply", "NUMBER", "Added", "in", "body", "swagger", "parameters", "Request", "type", "Request", "struct", "in", "body", "Arr", "Ele", "json", "arr", "omitempty", "It", "s", "generating", "correctly", "but", "when", "I", "have", "two", "array", "parameters", "swagger", "parameters", "Request", "type", "Request", "struct", "in", "body", "Arr", "Ele", "NUMBER", "json", "arr", "omitempty", "in", "body", "Arr", "Ele", "NUMBER", "json", "arr", "omitempty", "Now", "i", "m", "get", "an", "error", "Operations", "must", "have", "no", "more", "than", "one", "body", "parameter", "Can", "you", "refer", "me", "to", "the", "documentation", "that", "would", "be", "of", "help", "Aliases", "in", "swagger", "NUMBER", "json", "present", "as", "native", "types", "NUMBER", "Therefore", "all", "validation", "comments", "work", "as", "expected", "for", "them", "NUMBER", "go", "type", "Int", "NUMBER", "int", "NUMBER", "type", "MyModel", "struct", "min", "NUMBER", "IntField", "Int", "NUMBER", "json", "intField", "Also", "fix", "NUMBER", "I", "use", "go", "swagger", "only", "for", "json", "generation", "please", "let", "me", "know", "if", "it", "breaks", "anything", "in", "code", "generator", "or", "anywhere", "else", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "ea", "NUMBER", "fd", "NUMBER", "bb", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "dd", "NUMBER", "ecd", "NUMBER", "dd", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "height", "NUMBER", "width", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "scan", "scanner", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "FubmVyLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "scan", "schema", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "hlbWEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "scan", "parameters", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "wYXJhbWV", "NUMBER", "ZXJzLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "scan", "classifier", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "jbGFzc", "NUMBER", "lmaWVyLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "ea", "NUMBER", "fd", "NUMBER", "b", "NUMBER", "c", "NUMBER", "b", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "oops", "NUMBER", "master", "merge", "Do", "I", "understand", "right", "that", "it", "should", "be", "like", "go", "type", "Int", "NUMBER", "int", "NUMBER", "type", "MyModel", "struct", "swagger", "alias", "min", "NUMBER", "IntField", "Int", "NUMBER", "json", "intField", "for", "any", "struct", "and", "behavior", "by", "default", "for", "structs", "annotated", "with", "swagger", "params", "good", "NUMBER", "thanks", "for", "the", "clarification", "NUMBER", "I", "ll", "try", "to", "implement", "it", "later", "NUMBER", "Thank", "you", "sir", "Problem", "statement", "I", "m", "trying", "to", "get", "to", "a", "point", "where", "I", "can", "define", "an", "endpoint", "that", "accepts", "any", "arbitrary", "Content", "Type", "as", "input", "NUMBER", "At", "this", "point", "I", "be", "stumped", "on", "the", "correct", "way", "to", "define", "that", "the", "ByteStreamConsumer", "should", "be", "the", "default", "Consumer", "NUMBER", "Looking", "through", "the", "generate", "code", "I", "see", "the", "ConsumersFor", "NUMBER", "function", "but", "I", "don", "t", "see", "any", "place", "that", "invokes", "it", "NUMBER", "I", "haven", "t", "be", "able", "to", "find", "any", "documentation", "or", "code", "that", "shows", "how", "one", "be", "expected", "to", "register", "a", "new", "Consumer", "for", "a", "given", "Content", "Type", "regardless", "of", "wildcard", "NUMBER", "Swagger", "specification", "swagger", "NUMBER", "info", "description", "Show", "wildcard", "accept", "not", "work", "version", "NUMBER", "title", "Acceptable", "contact", "email", "nelz", "orionlabs", "NUMBER", "io", "basePath", "schemes", "http", "consumes", "application", "json", "produces", "application", "json", "paths", "filename", "put", "summary", "Put", "Resource", "consumes", "application", "octet", "stream", "description", "Enpoint", "to", "upload", "a", "resource", "operationId", "putter", "parameters", "name", "filename", "in", "path", "description", "The", "unique", "filename", "of", "the", "resource", "be", "uploaded", "required", "true", "type", "string", "minLength", "NUMBER", "name", "content", "in", "body", "description", "The", "contents", "of", "the", "file", "be", "uploaded", "required", "true", "schema", "type", "string", "format", "binary", "name", "contentType", "in", "header", "description", "What", "Content", "Type", "should", "be", "report", "when", "retrieving", "required", "true", "default", "application", "octet", "stream", "type", "string", "responses", "NUMBER", "description", "successfully", "uploaded", "resource", "Environment", "swagger", "version", "dev", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "macOS", "Depending", "on", "the", "spec", "file", "code", "generate", "for", "the", "server", "might", "not", "compile", "due", "to", "a", "miss", "import", "NUMBER", "What", "I", "notice", "be", "this", "happens", "particularly", "when", "the", "spec", "file", "do", "not", "contain", "securityDefinitions", "NUMBER", "Swagger", "specification", "Use", "the", "default", "one", "from", "LINK", "See", "attachment", "NUMBER", "Steps", "to", "reproduce", "Generate", "server", "swagger", "generate", "server", "f", "NUMBER", "swagger", "NUMBER", "json", "A", "tst", "Vendor", "package", "with", "any", "package", "manager", "NUMBER", "e", "NUMBER", "g", "NUMBER", "glide", "init", "glide", "install", "Build", "go", "install", "NUMBER", "cmd", "tst", "server", "restapi", "operations", "tst_api", "NUMBER", "go", "NUMBER", "undefined", "security", "in", "security", "NUMBER", "BasicAuth", "restapi", "operations", "tst_api", "NUMBER", "go", "NUMBER", "undefined", "security", "in", "security", "NUMBER", "APIKeyAuth", "restapi", "operations", "tst_api", "NUMBER", "go", "NUMBER", "undefined", "security", "in", "security", "NUMBER", "BearerAuth", "restapi", "operations", "tst_api", "NUMBER", "go", "NUMBER", "undefined", "security", "in", "security", "NUMBER", "UserPassAuthentication", "restapi", "operations", "tst_api", "NUMBER", "go", "NUMBER", "undefined", "security", "in", "security", "NUMBER", "TokenAuthentication", "restapi", "operations", "tst_api", "NUMBER", "go", "NUMBER", "undefined", "security", "in", "security", "NUMBER", "ScopedTokenAuthentication", "Manually", "patching", "restapi", "operations", "tst_api", "NUMBER", "go", "by", "add", "github", "NUMBER", "com", "go", "openapi", "runtime", "security", "to", "the", "imports", "fix", "it", "NUMBER", "Environment", "swagger", "version", "dev", "NUMBER", "ea", "NUMBER", "fd", "NUMBER", "bb", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "dd", "NUMBER", "ecd", "NUMBER", "dd", "NUMBER", "go", "version", "NUMBER", "OS", "Windows", "NUMBER", "swagger", "NUMBER", "json", "NUMBER", "txt", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "swagger", "NUMBER", "json", "NUMBER", "txt", "From", "what", "I", "saw", "it", "depends", "if", "you", "have", "openapi", "runtime", "in", "GOPATH", "during", "the", "code", "generation", "NUMBER", "Put", "github", "NUMBER", "com", "go", "openapi", "runtime", "in", "GOPATH", "run", "codegen", "again", "and", "it", "should", "work", "NUMBER", "Arielt", "Thanks", "for", "your", "comment", "NUMBER", "You", "be", "right", "NUMBER", "That", "solves", "the", "issue", "although", "I", "usually", "avoid", "installing", "package", "globally", "NUMBER", "Other", "option", "generating", "code", "again", "after", "having", "vendored", "dependencies", "including", "go", "openapi", "runtime", "works", "too", "NUMBER", "I", "did", "not", "expect", "such", "dependency", "for", "code", "gen", "only", "for", "build", "maybe", "it", "could", "be", "documented", "somewhere", "or", "the", "template", "could", "be", "update", "NUMBER", "What", "be", "strange", "be", "that", "other", "go", "openapi", "package", "be", "properly", "imported", "except", "this", "particular", "one", "NUMBER", "Sure", "Mine", "looks", "like", "this", "import", "package", "github", "NUMBER", "com", "go", "openapi", "error", "package", "github", "NUMBER", "com", "go", "openapi", "loads", "package", "github", "NUMBER", "com", "go", "openapi", "runtime", "subpackages", "flagext", "middleware", "package", "github", "NUMBER", "com", "go", "openapi", "spec", "package", "github", "NUMBER", "com", "go", "openapi", "strfmt", "package", "github", "NUMBER", "com", "go", "openapi", "swag", "package", "github", "NUMBER", "com", "go", "openapi", "validate", "package", "github", "NUMBER", "com", "jessevdk", "go", "flags", "version", "NUMBER", "package", "github", "NUMBER", "com", "tylerb", "graceful", "version", "NUMBER", "It", "works", "fine", "as", "soon", "as", "vendoring", "has", "be", "do", "NUMBER", "Problem", "be", "you", "need", "to", "code", "gen", "once", "compile", "error", "vendor", "code", "gen", "again", "ok", "now", "it", "works", "Problem", "statement", "I", "tried", "to", "send", "request", "to", "get", "server", "time", "but", "i", "get", "zero", "time", "NUMBER", "I", "have", "similar", "code", "that", "works", "with", "usual", "string", "and", "this", "code", "works", "well", "but", "with", "strfmt", "NUMBER", "datetime", "I", "have", "problem", "NUMBER", "As", "I", "can", "see", "server", "send", "payload", "with", "right", "time", "but", "client", "receive", "zero", "time", "NUMBER", "Can", "you", "help", "me", "to", "find", "problem", "Or", "maybe", "you", "can", "give", "example", "how", "to", "work", "with", "strfmt", "NUMBER", "datetime", "NUMBER", "My", "code", "Server", "configure_api", "NUMBER", "go", "api", "NUMBER", "GetTimeHandler", "operations", "NUMBER", "GetTimeHandlerFunc", "func", "params", "operations", "NUMBER", "GetTimeParams", "middleware", "NUMBER", "Responder", "t", "models", "NUMBER", "Datetime", "time", "NUMBER", "Now", "fmt", "NUMBER", "Printf", "Server", "time", "v", "n", "time", "NUMBER", "Time", "t", "NUMBER", "String", "return", "operations", "NUMBER", "NewGetTimeOK", "NUMBER", "WithPayload", "t", "Client", "type", "Client", "struct", "http", "apiclient", "NUMBER", "ConfgenSwagger", "func", "c", "Client", "GetTime", "models", "NUMBER", "Datetime", "error", "p", "operations", "NUMBER", "NewGetTimeParams", "resp", "err", "c", "NUMBER", "http", "NUMBER", "Operations", "NUMBER", "GetTime", "p", "if", "err", "nil", "fmt", "NUMBER", "Printf", "Client", "time", "error", "n", "return", "resp", "NUMBER", "Payload", "err", "t", "resp", "NUMBER", "Payload", "fmt", "NUMBER", "Printf", "Client", "time", "v", "n", "time", "NUMBER", "Time", "t", "NUMBER", "String", "return", "t", "err", "I", "get", "next", "results", "Server", "time", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "MSK", "Client", "time", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "Swagger", "specification", "NUMBER", "datetime", "type", "string", "format", "date", "time", "paths", "time", "get", "description", "get", "server", "time", "operationId", "getTime", "responses", "NUMBER", "description", "getTime", "success", "schema", "ref", "definitions", "datetime", "default", "description", "getTime", "error", "schema", "ref", "definitions", "error", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "It", "seems", "like", "that", "client", "and", "server", "never", "use", "function", "MarshalJSON", "and", "UnmarshalJSON", "from", "go", "openapi", "strfmt", "time", "NUMBER", "go", "NUMBER", "I", "think", "I", "find", "the", "reason", "of", "bug", "NUMBER", "When", "we", "call", "ProducerFunc", "from", "go", "openapi", "runtime", "json", "NUMBER", "go", "then", "data", "interface", "has", "type", "Model", "NUMBER", "Datetime", "type", "that", "be", "generate", "by", "goswagger", "NUMBER", "But", "this", "type", "has", "not", "methods", "like", "MarshalJSON", "NUMBER", "So", "it", "can", "not", "make", "right", "JSON", "NUMBER", "But", "Model", "NUMBER", "Datetime", "be", "just", "redefinition", "of", "type", "strfmt", "NUMBER", "DateTime", "that", "has", "such", "methods", "NUMBER", "So", "we", "have", "two", "possible", "ways", "of", "solution", "of", "problem", "NUMBER", "Add", "automatic", "generation", "of", "methods", "like", "MarshalJSON", "for", "generate", "types", "func", "t", "Datetime", "MarshalJSON", "byte", "error", "return", "strfmt", "NUMBER", "DateTime", "t", "NUMBER", "MarshalJSON", "NUMBER", "Convert", "type", "Model", "NUMBER", "Datetime", "to", "strfmt", "NUMBER", "DateTime", "before", "it", "falls", "into", "ProducerFunc", "According", "to", "the", "swagger", "spec", "NUMBER", "LINK", "itemsObject", "the", "discriminator", "When", "use", "the", "value", "MUST", "be", "the", "name", "of", "this", "schema", "or", "any", "schema", "that", "inherits", "it", "NUMBER", "Also", "add", "safety", "check", "in", "template", "buf", "NUMBER", "should", "be", "created", "only", "if", "the", "Discriminates", "value", "be", "not", "empty", "regenerate", "bindata", "NUMBER", "go", "NUMBER", "It", "be", "not", "mandatory", "now", "that", "by", "default", "the", "base", "struct", "be", "add", "but", "it", "makes", "it", "safer", "NUMBER", "A", "simple", "definition", "like", "the", "following", "would", "have", "generate", "not", "compile", "code", "definitions", "SomeStruct", "type", "object", "discriminator", "SomeDiscField", "required", "SomeDiscField", "properties", "SomeDiscField", "type", "string", "Hi", "I", "just", "notice", "there", "be", "a", "mistake", "in", "my", "proposal", "I", "forgot", "that", "the", "base", "type", "be", "implement", "as", "an", "interface", "NUMBER", "Thus", "unmarshalling", "cannot", "work", "as", "such", "on", "the", "base", "type", "NUMBER", "Below", "be", "the", "result", "of", "my", "current", "proposal", "go", "type", "BaseType", "interface", "runtime", "NUMBER", "Validatable", "the", "base", "type", "name", "Required", "true", "Type", "string", "SetType", "string", "func", "unmarshalBaseType", "data", "byte", "consumer", "runtime", "NUMBER", "Consumer", "BaseType", "error", "buf", "bytes", "NUMBER", "NewBuffer", "data", "buf", "NUMBER", "bytes", "NUMBER", "NewBuffer", "data", "the", "first", "time", "this", "be", "read", "be", "to", "fetch", "the", "value", "of", "the", "type", "property", "NUMBER", "var", "getType", "struct", "Type", "string", "json", "type", "if", "err", "consumer", "NUMBER", "Consume", "buf", "getType", "err", "nil", "return", "nil", "err", "if", "err", "validate", "NUMBER", "RequiredString", "type", "body", "getType", "NUMBER", "Type", "err", "nil", "return", "nil", "err", "The", "value", "of", "type", "be", "use", "to", "determine", "which", "type", "to", "create", "and", "unmarshal", "the", "data", "into", "switch", "getType", "NUMBER", "Type", "case", "BaseType", "var", "result", "Geometry", "if", "err", "consumer", "NUMBER", "Consume", "buf", "NUMBER", "result", "err", "nil", "return", "nil", "err", "return", "result", "nil", "case", "SomeSubType", "var", "result", "MultiPolygon", "if", "err", "consumer", "NUMBER", "Consume", "buf", "NUMBER", "result", "err", "nil", "return", "nil", "err", "return", "result", "nil", "return", "nil", "error", "NUMBER", "New", "NUMBER", "invalid", "type", "value", "q", "getType", "NUMBER", "Type", "These", "two", "lines", "won", "t", "work", "go", "var", "result", "Geometry", "if", "err", "consumer", "NUMBER", "Consume", "buf", "NUMBER", "result", "err", "nil", "I", "see", "two", "possibilities", "NUMBER", "Define", "a", "base", "interface", "containing", "a", "Get", "and", "Set", "Discriminator", "NUMBER", "The", "unmarshalBaseType", "function", "would", "return", "an", "instance", "of", "this", "interface", "NUMBER", "NUMBER", "Define", "a", "private", "struct", "and", "a", "public", "constructor", "use", "to", "unmarshall", "and", "create", "only", "NUMBER", "Thus", "for", "the", "base", "type", "we", "would", "have", "to", "use", "the", "interface", "to", "access", "the", "field", "NUMBER", "The", "problem", "be", "that", "we", "cannot", "really", "create", "both", "a", "public", "interface", "and", "a", "public", "struct", "because", "the", "current", "implementation", "if", "I", "be", "correct", "be", "already", "limiting", "when", "have", "struct", "with", "different", "cases", "NUMBER", "Having", "for", "instance", "a", "struct", "named", "BaseStruct", "and", "an", "interface", "named", "IBaseStruct", "be", "not", "possible", "because", "the", "IBaseStruct", "name", "could", "already", "be", "defined", "in", "the", "swagger", "file", "NUMBER", "The", "first", "solution", "looks", "cleaner", "imo", "NUMBER", "What", "do", "you", "think", "Yes", "I", "agree", "NUMBER", "I", "was", "just", "concerned", "about", "usage", "consistency", "between", "the", "different", "types", "NUMBER", "Base", "type", "an", "interface", "others", "through", "an", "interface", "NUMBER", "I", "can", "update", "the", "diff", "in", "this", "direction", "if", "you", "be", "ok", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "ea", "NUMBER", "fd", "NUMBER", "bb", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "dd", "NUMBER", "ecd", "NUMBER", "dd", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "width", "NUMBER", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "ea", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "e", "NUMBER", "e", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "yaml", "Parent", "default", "child", "required", "properties", "child", "ref", "definitions", "Child", "Child", "default", "key", "value", "required", "key", "This", "fail", "with", "error", "definitions", "NUMBER", "Parent", "NUMBER", "child", "NUMBER", "key", "in", "body", "be", "required", "How", "do", "we", "fill", "in", "the", "required", "block", "in", "the", "Parent", "child", "NUMBER", "key", "do", "not", "work", "Swagger", "specification", "Steps", "to", "reproduce", "Environment", "swagger", "version", "x", "NUMBER", "x", "NUMBER", "x", "go", "version", "x", "NUMBER", "x", "NUMBER", "x", "OS", "I", "m", "not", "sure", "if", "there", "s", "a", "better", "way", "but", "I", "get", "it", "to", "work", "by", "setting", "the", "in", "the", "Parent", "required", "child", "This", "then", "in", "turn", "satisfies", "the", "requirement", "that", "child", "be", "a", "default", "that", "requires", "key", "Actually", "that", "didn", "t", "work", "it", "turns", "out", "I", "accidentally", "had", "the", "required", "commented", "out", "NUMBER", "Any", "thoughts", "hmm", "it", "only", "seem", "like", "it", "works", "if", "i", "set", "it", "all", "the", "way", "in", "the", "default", "Parent", "default", "child", "key", "value", "properties", "child", "ref", "definitions", "Child", "Child", "default", "key", "value", "required", "key", "This", "be", "the", "only", "way", "i", "could", "get", "it", "to", "work", "NUMBER", "Also", "setting", "required", "in", "Parent", "didn", "t", "seem", "necessary", "with", "the", "above", "NUMBER", "However", "setting", "the", "default", "in", "Child", "was", "necessary", "NUMBER", "However", "I", "was", "actually", "just", "aiming", "to", "set", "the", "zero", "values", "and", "it", "seems", "x", "nullable", "fits", "the", "bill", "there", "NUMBER", "And", "x", "nullable", "doesn", "t", "have", "this", "baggage", "that", "required", "do", "NUMBER", "Are", "all", "the", "various", "flags", "documented", "somewhere", "or", "be", "there", "a", "part", "of", "the", "code", "that", "be", "a", "good", "reference", "for", "this", "But", "if", "I", "don", "t", "set", "x", "nullable", "then", "won", "t", "the", "omitempty", "in", "the", "struct", "remove", "the", "field", "when", "marshalling", "the", "json", "if", "it", "s", "the", "zero", "value", "For", "example", "if", "the", "default", "for", "an", "int", "be", "NUMBER", "if", "it", "be", "input", "as", "NUMBER", "then", "won", "t", "the", "default", "will", "kick", "in", "and", "set", "it", "to", "NUMBER", "the", "default", "Ok", "I", "think", "I", "ve", "get", "it", "sorted", "out", "now", "thanks", "NUMBER", "When", "generating", "models", "with", "m", "don", "t", "generate", "models", "for", "things", "that", "don", "t", "actually", "have", "the", "swagger", "model", "annotation", "as", "this", "can", "lead", "to", "a", "lot", "of", "junk", "schemas", "Agreed", "NUMBER", "it", "took", "me", "a", "little", "bit", "to", "realize", "what", "was", "happening", "I", "just", "assumed", "that", "was", "how", "it", "worked", "but", "apparently", "not", "NUMBER", "At", "the", "moment", "I", "have", "internal", "types", "that", "be", "bleeding", "out", "into", "the", "documentation", "as", "a", "result", "NUMBER", "fredbi", "i", "don", "t", "think", "so", "NUMBER", "i", "m", "get", "documentation", "for", "a", "timestamp", "from", "another", "package", "that", "s", "not", "mine", "NUMBER", "because", "i", "use", "m", "NUMBER", "i", "can", "t", "really", "go", "and", "change", "that", "package", "with", "ignore", "go", "vet", "report", "shadowing", "in", "generate", "server", "NUMBER", "go", "variable", "name", "change", "in", "server", "NUMBER", "gotmpl", "Signed", "off", "by", "Ariel", "Tubaltsev", "TAG", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "d", "NUMBER", "f", "NUMBER", "bea", "NUMBER", "a", "NUMBER", "c", "NUMBER", "cc", "NUMBER", "e", "NUMBER", "de", "NUMBER", "bae", "NUMBER", "a", "NUMBER", "a", "NUMBER", "bc", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "src", "pr", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "d", "NUMBER", "f", "NUMBER", "b", "NUMBER", "f", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "looks", "like", "circleci", "resources", "problem", "NUMBER", "let", "me", "recreate", "the", "request", "Problem", "statement", "I", "would", "like", "an", "endpoint", "to", "accept", "any", "Content", "Type", "but", "it", "seems", "the", "checking", "of", "it", "doesn", "t", "take", "the", "wildcard", "into", "account", "NUMBER", "Please", "remove", "the", "sections", "that", "don", "t", "apply", "Swagger", "specification", "swagger", "NUMBER", "info", "description", "Show", "wildcard", "accept", "not", "work", "version", "NUMBER", "title", "Acceptable", "contact", "email", "nelz", "orionlabs", "NUMBER", "io", "basePath", "schemes", "http", "consumes", "application", "json", "produces", "application", "json", "paths", "filename", "put", "summary", "Put", "Resource", "consumes", "description", "Enpoint", "to", "upload", "a", "resource", "operationId", "putter", "parameters", "name", "filename", "in", "path", "description", "The", "unique", "filename", "of", "the", "resource", "be", "uploaded", "required", "true", "type", "string", "minLength", "NUMBER", "name", "content", "in", "body", "description", "The", "contents", "of", "the", "file", "be", "uploaded", "required", "true", "schema", "type", "string", "format", "binary", "name", "contentType", "in", "header", "description", "What", "Content", "Type", "should", "be", "report", "when", "retrieving", "required", "true", "default", "application", "octet", "stream", "type", "string", "responses", "NUMBER", "description", "successfully", "uploaded", "resource", "Steps", "to", "reproduce", "curl", "X", "PUT", "H", "Content", "Type", "incorrect", "jif", "data", "binary", "zombie", "NUMBER", "gif", "LINK", "_", "NUMBER", "gif", "code", "NUMBER", "message", "unsupported", "media", "type", "incorrect", "jif", "only", "be", "allow", "After", "a", "little", "bit", "of", "spelunking", "I", "believe", "the", "problem", "be", "here", "LINK", "openapi", "runtime", "blob", "master", "middleware", "validation", "NUMBER", "go", "L", "NUMBER", "in", "validateContentType", "NUMBER", "NUMBER", "It", "looks", "for", "NUMBER", "length", "allow", "and", "pass", "if", "there", "s", "none", "but", "that", "s", "not", "this", "case", "NUMBER", "It", "looks", "for", "an", "error", "parsing", "the", "media", "type", "but", "that", "s", "not", "a", "problem", "LINK", "It", "do", "a", "case", "insensitive", "search", "in", "a", "slice", "but", "that", "won", "t", "help", "us", "incorrect", "jif", "vs", "It", "then", "fail", "with", "no", "match", "On", "Slack", "casualjim", "said", "we", "use", "a", "proper", "mimetype", "library", "to", "match", "NUMBER", "But", "I", "m", "not", "seeing", "that", "in", "this", "case", "NUMBER", "Environment", "swagger", "version", "swagger", "version", "dev", "go", "version", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "macOS", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "a", "NUMBER", "f", "NUMBER", "b", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "cf", "NUMBER", "e", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "types", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "R", "NUMBER", "cGVzLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "a", "NUMBER", "f", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "What", "be", "the", "logic", "behind", "the", "code", "generate", "use", "this", "definition", "yaml", "definitions", "Info", "type", "object", "properties", "test_a", "type", "integer", "format", "uint", "NUMBER", "minimum", "NUMBER", "exclusiveMinimum", "true", "test_b", "type", "integer", "format", "uint", "NUMBER", "minimum", "NUMBER", "go", "swagger", "model", "Info", "type", "Info", "struct", "test_a", "Minimum", "NUMBER", "TestA", "uint", "NUMBER", "json", "test_a", "omitempty", "test_b", "Minimum", "NUMBER", "TestB", "uint", "NUMBER", "json", "test_b", "omitempty", "TestA", "be", "a", "pointer", "on", "uint", "NUMBER", "but", "not", "TestB", "NUMBER", "swagger", "version", "dev", "NUMBER", "a", "NUMBER", "f", "NUMBER", "b", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "cf", "NUMBER", "e", "go", "version", "NUMBER", "OS", "linux", "amd", "NUMBER", "Done", "NUMBER", "Problem", "statement", "In", "this", "case", "struct", "for", "params", "will", "not", "be", "generate", "Swagger", "specification", "swagger", "NUMBER", "info", "description", "description", "title", "title", "version", "NUMBER", "basePath", "paths", "path", "post", "description", "description", "produces", "application", "json", "tags", "path", "operationId", "path", "NUMBER", "post", "parameters", "name", "body", "in", "body", "schema", "required", "params", "properties", "params", "type", "object", "required", "field", "properties", "field", "description", "field", "type", "integer", "responses", "NUMBER", "description", "description", "schema", "type", "object", "required", "result", "properties", "result", "type", "array", "items", "type", "object", "properties", "id", "description", "id", "type", "integer", "Steps", "to", "reproduce", "swagger", "generate", "client", "f", "swagger", "NUMBER", "yaml", "Environment", "swagger", "version", "dev", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "Problem", "statement", "Client", "generation", "fail", "with", "object", "has", "no", "key", "UserBase", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Create", "two", "file", "first", "NUMBER", "yml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "test", "description", "test", "license", "name", "N", "A", "basePath", "v", "NUMBER", "schemes", "http", "https", "consumes", "application", "json", "produces", "application", "json", "paths", "user", "get", "operationId", "getUser", "description", "test", "responses", "NUMBER", "description", "succes", "schema", "ref", "second", "NUMBER", "yml", "definitions", "User", "second", "NUMBER", "yml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "test", "description", "test", "license", "name", "N", "A", "basePath", "v", "NUMBER", "schemes", "http", "https", "consumes", "application", "json", "produces", "application", "json", "definitions", "UserBase", "type", "object", "properties", "id", "type", "integer", "format", "uint", "NUMBER", "User", "allOf", "ref", "definitions", "UserBase", "properties", "createdAt", "type", "string", "format", "date", "time", "updatedAt", "type", "string", "format", "date", "time", "NUMBER", "run", "swagger", "generate", "client", "f", "Users", "andrew", "Workspace", "go", "src", "github", "NUMBER", "com", "go", "swagger", "example", "first", "NUMBER", "yml", "t", "Users", "andrew", "Workspace", "go", "src", "github", "NUMBER", "com", "go", "swagger", "example", "gen", "skip", "validation", "NUMBER", "swagger", "returns", "object", "has", "no", "key", "UserBase", "Environment", "swagger", "version", "latest", "from", "the", "master", "NUMBER", "a", "NUMBER", "f", "NUMBER", "b", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "cf", "NUMBER", "e", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "MacOS", "Sierra", "NUMBER", "yes", "i", "tried", "this", "as", "well", "and", "for", "this", "case", "i", "was", "able", "to", "generate", "client", "from", "flattened", "spec", "but", "if", "you", "add", "a", "reference", "to", "the", "properties", "it", "fail", "again", "with", "similar", "error", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "test", "description", "test", "license", "name", "N", "A", "basePath", "v", "NUMBER", "schemes", "http", "https", "consumes", "application", "json", "produces", "application", "json", "definitions", "UserBase", "type", "object", "properties", "id", "type", "integer", "format", "uint", "NUMBER", "ContactEmail", "type", "object", "properties", "email", "type", "string", "User", "allOf", "ref", "definitions", "UserBase", "properties", "properties", "contactEmails", "type", "array", "items", "ref", "definitions", "ContactEmail", "createdAt", "type", "string", "format", "date", "time", "updatedAt", "type", "string", "format", "date", "time", "small", "change", "to", "the", "second", "file", "NUMBER", "Just", "add", "contactEmails", "type", "array", "items", "ref", "definitions", "ContactEmail", "and", "the", "error", "be", "schema", "analysis", "definitions", "user", "allOf", "NUMBER", "properties", "contactEmails", "object", "has", "no", "key", "ContactEmail", "Do", "you", "have", "any", "ideas", "for", "the", "second", "case", "i", "m", "unable", "to", "flatten", "swagger", "flatten", "Users", "andrew", "Workspace", "go", "src", "github", "NUMBER", "com", "go", "swagger", "example", "first", "NUMBER", "yml", "o", "Users", "andrew", "Workspace", "go", "src", "github", "NUMBER", "com", "go", "swagger", "example", "flatten", "spec", "NUMBER", "json", "it", "fail", "with", "the", "error", "schema", "analysis", "definitions", "user", "allOf", "NUMBER", "properties", "contactEmails", "object", "has", "no", "key", "ContactEmail", "I", "tried", "to", "expand", "and", "it", "worked", "NUMBER", "however", "if", "i", "modify", "specs", "a", "bit", "more", "expand", "stops", "work", "first", "NUMBER", "yml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "test", "description", "test", "license", "name", "N", "A", "basePath", "v", "NUMBER", "schemes", "http", "https", "consumes", "application", "json", "produces", "application", "json", "paths", "user", "get", "operationId", "getUser", "description", "test", "responses", "NUMBER", "ref", "second", "NUMBER", "yml", "responses", "userResponse", "second", "NUMBER", "yml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "test", "description", "test", "license", "name", "N", "A", "basePath", "v", "NUMBER", "schemes", "http", "https", "consumes", "application", "json", "produces", "application", "json", "responses", "userResponse", "description", "succes", "schema", "ref", "definitions", "User", "definitions", "UserBase", "type", "object", "properties", "id", "type", "integer", "format", "uint", "NUMBER", "ContactEmail", "type", "object", "properties", "email", "type", "string", "User", "allOf", "ref", "definitions", "UserBase", "properties", "contactEmails", "type", "array", "items", "ref", "definitions", "ContactEmail", "createdAt", "type", "string", "format", "date", "time", "updatedAt", "type", "string", "format", "date", "time", "swagger", "expand", "fail", "with", "object", "has", "no", "key", "User", "error", "can", "you", "give", "me", "an", "idea", "where", "should", "i", "look", "at", "so", "I", "can", "maybe", "try", "to", "help", "fix", "that", "looks", "similar", "to", "issue", "NUMBER", "The", "fix", "for", "NUMBER", "be", "on", "the", "way", "NUMBER", "I", "will", "test", "and", "see", "if", "it", "resolve", "this", "one", "too", "NUMBER", "I", "m", "also", "affected", "by", "this", "my", "case", "be", "the", "same", "andrewkavalionak", "expose", "one", "YAML", "file", "with", "no", "definitions", "importing", "all", "the", "definitions", "from", "a", "second", "YAML", "file", "NUMBER", "I", "m", "implement", "a", "dynamic", "API", "server", "and", "it", "loads", "the", "spec", "just", "fine", "it", "opens", "and", "loads", "the", "definitions", "from", "the", "second", "file", "NUMBER", "Is", "the", "client", "use", "a", "different", "mechanisms", "to", "load", "the", "spec", "Also", "be", "flatten", "a", "super", "set", "of", "expand", "I", "run", "expand", "flatten", "and", "generate", "the", "client", "code", "but", "I", "m", "not", "sure", "the", "generate", "models", "be", "correct", "NUMBER", "models", "when", "I", "believe", "I", "only", "defined", "NUMBER", "NUMBER", "reidrac", "can", "you", "share", "your", "swagger", "spec", "The", "two", "file", "you", "mention", "or", "a", "snippet", "which", "helps", "me", "to", "reproduce", "the", "case", "Flatten", "basically", "makes", "all", "your", "references", "local", "NUMBER", "Expand", "replaces", "the", "references", "with", "the", "intended", "content", "NUMBER", "IIRC", "the", "expander", "works", "on", "local", "references", "NUMBER", "like", "definitions", "casualjim", "do", "you", "have", "more", "info", "on", "expansion", "vs", "flattening", "Also", "when", "you", "generate", "you", "client", "the", "flattening", "happens", "by", "default", "Flatten", "if", "needed", "if", "opts", "NUMBER", "FlattenSpec", "flattenOpts", "analysis", "NUMBER", "FlattenOpts", "BasePath", "specDoc", "NUMBER", "SpecFilePath", "Spec", "analysis", "NUMBER", "New", "specDoc", "NUMBER", "Spec", "err", "analysis", "NUMBER", "Flatten", "flattenOpts", "you", "can", "skip", "it", "in", "generation", "use", "skip", "flatten", "I", "think", "multiple", "models", "be", "generate", "when", "you", "use", "mix", "of", "Allof", "Multipleof", "and", "simiolar", "schema", "properties", "NUMBER", "EleanorRigby", "these", "be", "my", "current", "spec", "NUMBER", "Is", "a", "test", "app", "to", "evaluate", "go", "swagger", "NUMBER", "This", "be", "swagger", "NUMBER", "yaml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "Poll", "API", "schemes", "http", "consumes", "application", "json", "produces", "application", "json", "paths", "get", "tags", "polls", "operationId", "getAllPolls", "parameters", "name", "limit", "in", "query", "description", "Limit", "the", "response", "to", "the", "last", "n", "polls", "NUMBER", "type", "integer", "format", "int", "NUMBER", "required", "false", "responses", "NUMBER", "description", "OK", "schema", "type", "array", "items", "ref", "models", "NUMBER", "yaml", "definitions", "poll", "default", "description", "error", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "error", "post", "tags", "polls", "operationId", "addPoll", "parameters", "name", "poll", "in", "body", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "poll", "responses", "NUMBER", "description", "Created", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "poll", "default", "description", "error", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "error", "id", "parameters", "type", "integer", "format", "int", "NUMBER", "name", "id", "in", "path", "required", "true", "get", "tags", "polls", "operationId", "getPoll", "responses", "NUMBER", "description", "OK", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "poll", "default", "description", "error", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "error", "put", "tags", "polls", "operationId", "updatePoll", "parameters", "name", "poll", "in", "body", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "poll", "responses", "NUMBER", "description", "OK", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "poll", "default", "description", "error", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "error", "delete", "tags", "polls", "operationId", "deletePoll", "responses", "NUMBER", "description", "Deleted", "default", "description", "error", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "error", "id", "choice_id", "parameters", "type", "integer", "format", "int", "NUMBER", "name", "id", "in", "path", "required", "true", "type", "integer", "format", "int", "NUMBER", "name", "choice_id", "in", "path", "required", "true", "put", "tags", "polls", "operationId", "voteChoice", "responses", "NUMBER", "description", "OK", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "poll", "default", "description", "error", "schema", "ref", "models", "NUMBER", "yaml", "definitions", "error", "This", "be", "models", "NUMBER", "yaml", "swagger", "NUMBER", "definitions", "poll", "type", "object", "required", "question", "choices", "properties", "id", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "question", "type", "string", "minLength", "NUMBER", "maxLength", "NUMBER", "pubDate", "type", "string", "format", "date", "time", "readOnly", "true", "choices", "type", "array", "items", "ref", "definitions", "choice", "choice", "type", "object", "required", "choiceText", "properties", "id", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "choiceText", "type", "string", "minLength", "NUMBER", "maxLength", "NUMBER", "votes", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "error", "type", "object", "required", "message", "properties", "code", "type", "integer", "format", "int", "NUMBER", "message", "type", "string", "I", "run", "swagger", "generate", "client", "f", "swagger", "NUMBER", "yaml", "t", "NUMBER", "restclient", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "object", "has", "no", "key", "choice", "What", "gets", "me", "confused", "be", "that", "I", "m", "use", "these", "same", "file", "in", "the", "server", "dynamic", "API", "not", "use", "code", "genration", "and", "it", "reads", "the", "definitions", "just", "fine", "NUMBER", "And", "that", "s", "all", "I", "know", "at", "this", "point", "NUMBER", "Thanks", "for", "your", "help", "NUMBER", "Looks", "like", "be", "the", "same", "problem", "you", "have", "when", "run", "flatten", "swagger", "flatten", "swagger", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "schema", "analysis", "definitions", "poll", "properties", "choices", "object", "has", "no", "key", "choice", "I", "ve", "be", "reading", "the", "client", "generation", "and", "it", "do", "expand", "flatten", "doesn", "t", "it", "reidrac", "I", "will", "look", "into", "it", "NUMBER", "Will", "try", "to", "fix", "or", "share", "findings", "by", "eow", "NUMBER", "Thanks", "for", "sharing", "NUMBER", "Looking", "at", "the", "schema", "I", "posted", "if", "I", "inline", "the", "Choice", "schema", "instead", "of", "use", "a", "reference", "in", "the", "choices", "array", "of", "Poll", "flatten", "works", "OK", "the", "resulting", "JSON", "looks", "fine", "although", "x", "go", "gen", "location", "models", "doesn", "t", "seem", "to", "be", "consistent", "NUMBER", "When", "I", "try", "to", "generate", "the", "client", "with", "these", "YAML", "file", "Swagger", "doesn", "t", "report", "any", "error", "but", "the", "models", "aren", "t", "generate", "either", "NUMBER", "When", "I", "use", "dump", "data", "flag", "I", "can", "see", "Models", "be", "null", "although", "IncludeModel", "be", "true", "NUMBER", "Perhaps", "that", "should", "trigger", "an", "error", "NUMBER", "EDIT", "actually", "I", "use", "the", "result", "of", "flatten", "with", "generate", "and", "the", "client", "seems", "fine", "the", "models", "look", "OK", "NUMBER", "I", "can", "t", "reproduce", "that", "success", "when", "I", "use", "the", "client", "generation", "straight", "with", "the", "YAML", "file", "that", "has", "the", "inlined", "Choice", "schema", "NUMBER", "Generate", "client", "doesn", "t", "resolve", "external", "references", "as", "it", "be", "my", "previous", "comment", "re", "expand", "was", "red", "herring", "expand", "be", "call", "when", "the", "Spec", "be", "validated", "prior", "to", "generation", "NUMBER", "So", "there", "s", "no", "way", "it", "ll", "work", "without", "run", "flatten", "first", "and", "then", "there", "s", "an", "error", "that", "I", "avoided", "by", "inlining", "Choice", "definition", "and", "that", "requires", "use", "an", "intermediate", "JSON", "file", "NUMBER", "Summing", "up", "you", "can", "t", "generate", "a", "client", "with", "a", "YAML", "file", "that", "has", "external", "refs", "in", "the", "definitions", "NUMBER", "EleanorRigby", "Can", "you", "confirm", "I", "m", "in", "the", "right", "path", "Thanks", "reidrac", "looking", "into", "it", "now", "NUMBER", "reidrac", "Initial", "analysis", "points", "to", "same", "conclusion", "that", "flatten", "needs", "to", "be", "run", "first", "which", "makes", "all", "schema", "refs", "local", "NUMBER", "Also", "the", "choice", "has", "to", "be", "inline", "as", "the", "way", "current", "code", "works", "Does", "that", "unblock", "you", "to", "work", "The", "thing", "that", "confuses", "me", "be", "that", "flatten", "be", "run", "while", "generating", "server", "and", "client", "within", "the", "code", "unless", "one", "specifies", "skip", "flatten", "flag", "NUMBER", "The", "flattening", "should", "have", "happened", "NUMBER", "I", "be", "continuing", "my", "analysis", "further", "NUMBER", "reidrac", "After", "some", "more", "digging", "I", "now", "see", "what", "be", "happening", "inside", "the", "code", "NUMBER", "The", "current", "binary", "do", "not", "resolve", "any", "local", "reference", "inside", "the", "external", "reference", "external", "ref", "Poll", "has", "a", "local", "ref", "Choice", "under", "Choices", "array", "The", "solution", "to", "this", "problem", "seems", "non", "trivial", "and", "might", "take", "some", "thinking", "and", "time", "to", "fix", "NUMBER", "The", "best", "work", "around", "I", "can", "suggest", "currently", "be", "to", "inline", "the", "Choice", "which", "you", "did", "and", "flatten", "the", "spec", "NUMBER", "The", "expansion", "of", "spec", "before", "generation", "also", "works", "perfect", "NUMBER", "The", "number", "of", "models", "generate", "be", "huge", "because", "references", "be", "use", "in", "multiple", "operations", "That", "be", "how", "swagger", "tool", "behaves", "currently", "NUMBER", "Ideally", "the", "AddPollParamsBodyChoicesItems", "and", "UpdatePollParamsBodyChoicesItems", "be", "the", "same", "structures", "but", "as", "far", "as", "I", "know", "the", "swagger", "binary", "do", "this", "so", "as", "to", "accomodate", "change", "cause", "by", "complex", "definitions", "involving", "allof", "anyof", "etc", "NUMBER", "It", "would", "be", "helpful", "if", "you", "can", "think", "share", "a", "solution", "or", "design", "to", "handle", "these", "recursive", "references", "distributed", "within", "and", "in", "external", "file", "NUMBER", "Adding", "on", "to", "the", "discussion", "for", "future", "work", "propose", "idea", "In", "flatten", "function", "we", "need", "a", "DAG", "of", "all", "possible", "references", "a", "NUMBER", "Starting", "the", "DAG", "creation", "from", "root", "doc", "specified", "NUMBER", "b", "NUMBER", "All", "the", "local", "refs", "must", "carry", "a", "file", "string", "to", "indicate", "the", "local", "file", "name", "where", "these", "local", "refs", "have", "expanded", "definitions", "The", "references", "will", "be", "resolve", "in", "a", "topological", "sort", "manner", "All", "the", "references", "which", "get", "free", "of", "other", "ref", "dependencies", "will", "have", "a", "map", "of", "refname", "absolute", "resolve", "definition", "values", "NUMBER", "The", "final", "values", "will", "be", "substituted", "in", "root", "document", "NUMBER", "EleanorRigby", "thanks", "for", "you", "help", "skip", "flatten", "flag", "be", "not", "available", "in", "swagger", "NUMBER", "which", "version", "should", "I", "be", "use", "this", "be", "a", "PoC", "for", "a", "larger", "project", "and", "we", "were", "hopping", "to", "work", "with", "the", "YAML", "file", "use", "shared", "definitions", "in", "different", "API", "endpoints", "that", "s", "why", "we", "be", "exploring", "refs", "to", "external", "file", "currently", "our", "work", "solution", "uses", "the", "mixin", "approach", "that", "means", "we", "work", "with", "YAML", "but", "in", "practice", "we", "consume", "the", "mix", "JSON", "file", "NUMBER", "The", "YAML", "file", "be", "OK", "to", "share", "with", "NUMBER", "party", "to", "generate", "clients", "in", "other", "languages", "NUMBER", "we", "re", "use", "the", "dynamic", "API", "approach", "at", "the", "server", "so", "no", "code", "generation", "there", "NUMBER", "I", "m", "confused", "because", "the", "YAML", "file", "I", "posted", "here", "seems", "to", "work", "on", "the", "server", "just", "fine", "NUMBER", "I", "may", "be", "miss", "something", "here", "or", "the", "definitions", "be", "processed", "differently", "NUMBER", "Unfortunately", "I", "can", "t", "suggest", "a", "solution", "NUMBER", "The", "time", "I", "ve", "spent", "reading", "go", "swagger", "code", "I", "find", "it", "a", "bit", "complicated", "I", "miss", "more", "consistent", "logging", "currently", "be", "quite", "hard", "to", "follow", "what", "s", "going", "on", "if", "you", "re", "not", "familiar", "with", "the", "codebase", "NUMBER", "At", "a", "very", "high", "level", "flatten", "expand", "sounds", "like", "a", "reasonable", "strategy", "but", "flatten", "should", "detect", "when", "a", "definition", "include", "a", "reference", "to", "another", "definition", "perhaps", "run", "expand", "on", "any", "spec", "referenced", "by", "the", "main", "Spec", "could", "do", "it", "so", "Choice", "would", "be", "inlined", "automatically", "right", "NUMBER", "Problem", "statement", "Documenting", "not", "generating", "an", "exist", "code", "base", "NUMBER", "There", "be", "routes", "the", "use", "the", "same", "operation", "NUMBER", "Any", "options", "where", "I", "don", "t", "have", "to", "duplicate", "the", "entire", "swagger", "operation", "simply", "because", "I", "have", "two", "different", "routes", "use", "the", "method", "It", "seems", "redundant", "to", "have", "the", "route", "in", "the", "swagger", "operation", "definition", "NUMBER", "Am", "I", "miss", "something", "Swagger", "specification", "swagger", "route", "swagger", "operation", "Steps", "to", "reproduce", "transport", "NUMBER", "go", "swagger", "route", "GET", "mythings", "thingId", "GetMyThing", "swagger", "route", "GET", "myboxes", "boxId", "mythings", "thingId", "GetMyThing", "handler", "NUMBER", "go", "swagger", "operation", "GET", "mythings", "thingId", "GetMyThing", "operation", "definition", "swagger", "operation", "GET", "myboxes", "boxId", "mythings", "thingId", "GetMyThing", "duplicate", "of", "the", "operation", "definition", "above", "func", "GetMyThing", "c", "gin", "NUMBER", "Contet", "implemtation", "Environment", "swagger", "version", "dev", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "OS", "X", "NUMBER", "NUMBER", "F", "NUMBER", "Well", "if", "I", "document", "two", "routes", "swagger", "route", "GET", "foo", "GetFooBar", "swagger", "route", "GET", "bar", "GetFooBar", "swagger", "operation", "GetFooBar", "Then", "the", "generate", "swagger", "NUMBER", "json", "would", "do", "the", "work", "of", "duplicating", "operation", "GetFooBar", "for", "both", "route", "foo", "and", "route", "bar", "NUMBER", "Right", "now", "I", "would", "have", "to", "duplicate", "the", "full", "definition", "of", "operation", "GetFooBar", "twice", "because", "I", "need", "to", "specify", "the", "full", "spec", "for", "both", "foo", "and", "bar", "NUMBER", "So", "in", "the", "above", "example", "I", "have", "routes", "foo", "and", "bar", "that", "use", "operation", "GetFooBar", "NUMBER", "When", "I", "create", "swagger", "NUMBER", "json", "I", "would", "write", "out", "the", "spec", "for", "foo", "use", "GetFooBar", "and", "bar", "use", "GetFooBar", "NUMBER", "The", "current", "method", "seems", "to", "need", "both", "swagger", "route", "and", "swagger", "operation", "to", "require", "both", "the", "actual", "route", "and", "operation", "name", "NUMBER", "If", "that", "be", "the", "case", "couldn", "t", "you", "just", "eliminate", "swagger", "route", "and", "just", "document", "use", "swagger", "operation", "comments", "Route", "doesn", "t", "add", "any", "thing", "that", "isn", "t", "already", "defined", "in", "swagger", "operation", "swagger", "route", "method", "path", "pattern", "tag", "NUMBER", "tag", "NUMBER", "tag", "NUMBER", "operation", "id", "swagger", "operation", "method", "path", "pattern", "tag", "NUMBER", "tag", "NUMBER", "tag", "NUMBER", "operation", "id", "Well", "test", "out", "swagger", "route", "foo", "GetFooBar", "swagger", "route", "bar", "GetFooBar", "swagger", "operation", "foo", "GetFooBar", "NUMBER", "details", "swagger", "operation", "bar", "GetFooBar", "NUMBER", "Duplicate", "details", "foo", "operation", "Validation", "report", "duplicate", "operation", "GetFooBar", "NUMBER", "Seems", "the", "only", "option", "be", "create", "another", "method", "this", "facades", "GetFooBar", "to", "document", "go", "swagger", "NUMBER", "Problem", "statement", "I", "use", "go", "swagger", "to", "generate", "my", "documentation", "and", "need", "a", "way", "to", "define", "a", "model", "as", "readOnly", "NUMBER", "I", "have", "two", "Models", "User", "and", "Company", "where", "User", "has", "a", "foreign", "key", "to", "Company", "NUMBER", "What", "I", "want", "to", "achieve", "be", "having", "the", "result", "nested", "with", "GET", "but", "not", "with", "POST", "e", "NUMBER", "g", "NUMBER", "POST", "users", "JSON", "companyID", "NUMBER", "firstname", "string", "lastname", "string", "mail", "string", "password", "string", "role", "NUMBER", "GET", "users", "NUMBER", "JSON", "company", "interval", "NUMBER", "name", "string", "companyID", "NUMBER", "firstname", "string", "lastname", "string", "mail", "string", "password", "string", "role", "NUMBER", "However", "that", "this", "works", "I", "need", "a", "way", "to", "define", "the", "model", "of", "Company", "as", "readOnly", "Thank", "you", "for", "your", "response", "however", "I", "m", "not", "sure", "that", "this", "solves", "my", "problem", "NUMBER", "My", "struct", "has", "the", "following", "structure", "go", "User", "represents", "a", "user", "of", "the", "system", "swagger", "model", "user", "type", "User", "struct", "the", "id", "for", "this", "user", "readOnly", "true", "required", "true", "min", "NUMBER", "ID", "int", "json", "id", "the", "time", "when", "this", "user", "was", "created", "readOnly", "true", "swagger", "strfmt", "date", "time", "CreatedAt", "time", "NUMBER", "Time", "json", "createdAt", "the", "time", "when", "this", "user", "was", "last", "update", "readOnly", "true", "swagger", "strfmt", "date", "time", "UpdatedAt", "time", "NUMBER", "Time", "json", "updatedAt", "the", "firstname", "of", "this", "user", "required", "true", "Firstname", "string", "json", "firstname", "the", "lastname", "of", "this", "user", "required", "true", "Lastname", "string", "json", "lastname", "the", "role", "of", "this", "user", "required", "true", "Role", "int", "json", "role", "the", "unique", "mail", "address", "of", "this", "user", "unique", "true", "required", "true", "Mail", "string", "json", "mail", "the", "plain", "text", "password", "of", "the", "user", "NUMBER", "Only", "sent", "during", "authentication", "this", "be", "not", "stored", "in", "the", "db", "required", "true", "Password", "string", "json", "password", "omitempty", "the", "foreignkey", "to", "the", "associated", "company", "required", "true", "CompanyID", "int", "json", "companyID", "the", "associated", "company", "readOnly", "true", "Company", "Company", "json", "company", "omitempty", "I", "don", "t", "have", "a", "different", "struct", "which", "handles", "the", "payload", "of", "GET", "or", "POST", "NUMBER", "Note", "that", "there", "be", "a", "pointer", "to", "Company", "and", "therefore", "it", "will", "always", "show", "NUMBER", "UPDATE", "I", "played", "around", "with", "it", "and", "what", "I", "would", "need", "be", "to", "define", "on", "the", "Company", "model", "readOnly", "and", "it", "would", "give", "the", "result", "I", "want", "to", "achieve", "NUMBER", "Are", "there", "any", "options", "that", "I", "can", "do", "that", "I", "m", "wondering", "if", "there", "be", "a", "way", "to", "change", "the", "response", "body", "format", "when", "the", "request", "doesn", "t", "pass", "the", "validation", "rules", "specified", "in", "the", "swagger", "spec", "for", "a", "specific", "API", "call", "NUMBER", "For", "example", "if", "I", "have", "a", "API", "route", "like", "POST", "users", "which", "requires", "a", "body", "with", "the", "field", "id", "and", "I", "request", "without", "it", "I", "get", "code", "NUMBER", "message", "Id", "in", "body", "be", "required", "NUMBER", "Is", "it", "possible", "to", "change", "such", "format", "by", "a", "middleware", "or", "anywhere", "else", "For", "example", "to", "return", "error", "code", "NUMBER", "message", "Id", "in", "body", "be", "required", "Great", "thanks", "Problem", "statement", "Is", "it", "possible", "to", "return", "error", "to", "main", "function", "of", "server", "For", "example", "my", "server", "saves", "some", "configs", "in", "file", "NUMBER", "And", "I", "want", "that", "if", "config", "file", "be", "miss", "then", "server", "must", "be", "stopped", "with", "some", "error", "code", "NUMBER", "It", "be", "possible", "to", "do", "it", "with", "panic", "err", "but", "I", "think", "it", "be", "not", "good", "way", "NUMBER", "So", "can", "I", "return", "error", "main", "function", "of", "server", "Environment", "swagger", "version", "NUMBER", "But", "would", "not", "be", "main", "NUMBER", "go", "rewritten", "if", "I", "generate", "server", "again", "There", "be", "a", "command", "line", "argument", "to", "prevent", "that", "exclude", "main", "NUMBER", "Problem", "statement", "When", "the", "GOPATH", "contains", "a", "symlink", "the", "import", "paths", "be", "generate", "to", "locations", "use", "the", "realpath", "rather", "than", "to", "the", "gopath", "location", "NUMBER", "Steps", "to", "reproduce", "For", "example", "export", "GOPATH", "HOME", "Documents", "Code", "golang", "readlink", "HOME", "Documents", "Code", "Users", "billie", "Dropbox", "Documents", "Code", "Then", "do", "your", "code", "generation", "swagger", "generate", "server", "swagger", "NUMBER", "json", "And", "your", "imports", "be", "generate", "relative", "to", "the", "realpath", "rather", "than", "the", "gopath", "NUMBER", "go", "import", "net", "http", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Dropbox", "Documents", "Code", "golang", "src", "github", "NUMBER", "com", "purplebooth", "realsov", "api", "models", "When", "you", "compile", "go", "install", "NUMBER", "cmd", "real", "sov", "server", "restapi", "operations", "authentication", "get_oauth_token_responses", "NUMBER", "go", "NUMBER", "NUMBER", "local", "import", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Dropbox", "Documents", "Code", "golang", "src", "github", "NUMBER", "com", "purplebooth", "realsov", "api", "models", "in", "non", "local", "package", "Environment", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bbf", "NUMBER", "d", "NUMBER", "ed", "NUMBER", "a", "NUMBER", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "MacOS", "Sierra", "Workaround", "Remove", "the", "symlink", "from", "your", "GOPATH", "NUMBER", "The", "imports", "be", "correctly", "generate", "NUMBER", "I", "have", "no", "symlink", "in", "my", "GOPATH", "go", "swagger", "NUMBER", "also", "generates", "relative", "paths", "NUMBER", "go", "package", "opr", "This", "file", "was", "generate", "by", "the", "swagger", "tool", "NUMBER", "Editing", "this", "file", "might", "prove", "futile", "when", "you", "re", "run", "the", "swagger", "generate", "command", "import", "fmt", "net", "http", "strings", "error", "github", "NUMBER", "com", "go", "openapi", "error", "loads", "github", "NUMBER", "com", "go", "openapi", "loads", "runtime", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "security", "github", "NUMBER", "com", "go", "openapi", "runtime", "security", "spec", "github", "NUMBER", "com", "go", "openapi", "spec", "strfmt", "github", "NUMBER", "com", "go", "openapi", "strfmt", "github", "NUMBER", "com", "go", "openapi", "swag", "NUMBER", "NUMBER", "NUMBER", "Works", "AYJiaYou", "MPos", "WebAPI", "src", "mpos", "mod", "NUMBER", "NUMBER", "NUMBER", "Works", "AYJiaYou", "MPos", "WebAPI", "src", "mpos", "rest", "opr", "term", "The", "version", "NUMBER", "be", "OK", "NUMBER", "NUMBER", "don", "t", "work", "NUMBER", "Just", "to", "clarify", "my", "issue", "was", "definitely", "the", "symlink", "thing", "NUMBER", "Removed", "the", "symlink", "worked", "fine", "put", "it", "back", "it", "broke", "remove", "it", "it", "was", "totally", "fine", "NUMBER", "casualjim", "I", "m", "use", "openSUSE", "Leap", "NUMBER", "my", "GOPATH", "env", "be", "bash", "ee", "ay", "lfree", "Works", "AYJiaYou", "MPos", "WebAPI", "echo", "GOPATH", "home", "lfree", "opt", "Go", "home", "lfree", "Works", "AYJiaYou", "AY", "Go", "home", "lfree", "Works", "AYJiaYou", "BackHarmony", "home", "lfree", "Works", "AYJiaYou", "AY", "Ad", "Server", "home", "lfree", "Works", "AYJiaYou", "HealthyID", "Server", "home", "lfree", "Works", "AYJiaYou", "AY", "DDUP", "home", "lfree", "Works", "AYJiaYou", "MPos", "WebAPI", "home", "lfree", "Works", "github", "NUMBER", "com", "I", "stored", "gen_server", "NUMBER", "sh", "file", "in", "Works", "AYJiaYou", "MPos", "WebAPI", "API", "folder", "and", "run", "it", "within", "that", "folder", "bash", "bin", "bash", "NUMBER", "swagger_linux_amd", "NUMBER", "_", "NUMBER", "generate", "server", "NUMBER", "swagger_linux_amd", "NUMBER", "_", "NUMBER", "generate", "server", "NUMBER", "swagger_linux_amd", "NUMBER", "_", "NUMBER", "generate", "server", "spec", "swagger", "NUMBER", "yml", "api", "package", "opr", "model", "package", "mod", "server", "package", "rest", "target", "NUMBER", "src", "mpos", "name", "mpos", "principal", "mod", "NUMBER", "RequestInfo", "default", "scheme", "https", "for", "file", "in", "find", "NUMBER", "src", "mpos", "type", "f", "name", "NUMBER", "go", "do", "sed", "i", "s", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Works", "AYJiaYou", "MPos", "WebAPI", "src", "file", "do", "This", "seems", "to", "occur", "when", "your", "target", "isn", "t", "within", "the", "first", "in", "your", "GOPATH", "Problem", "statement", "I", "ve", "notice", "that", "because", "of", "the", "order", "of", "the", "WriteHeader", "call", "in", "the", "response", "template", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "server", "responses", "NUMBER", "gotmpl", "L", "NUMBER", "if", "there", "be", "an", "error", "in", "the", "producer", "NUMBER", "Produce", "although", "unlikely", "the", "panic", "recover", "middleware", "doesn", "t", "have", "the", "possibility", "to", "respond", "with", "a", "status", "code", "e", "NUMBER", "g", "NUMBER", "NUMBER", "because", "the", "header", "has", "be", "already", "write", "NUMBER", "To", "state", "this", "be", "easier", "to", "see", "a", "generate", "code", "for", "example", "the", "_", "get", "by", "id", "response", "of", "the", "examples", "which", "be", "in", "this", "repo", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "generate", "restapi", "operations", "pet", "get_pet_by_id_responses", "NUMBER", "go", "L", "NUMBER", "_", "Do", "I", "miss", "anything", "or", "you", "think", "like", "me", "that", "s", "better", "to", "move", "the", "call", "to", "WriteHeader", "to", "the", "end", "of", "the", "function", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Linux", "When", "you", "write", "to", "a", "response", "writer", "for", "the", "body", "go", "will", "flush", "the", "headers", "and", "the", "body", "NUMBER", "So", "if", "we", "want", "to", "return", "a", "status", "code", "then", "we", "have", "to", "do", "that", "before", "we", "start", "write", "to", "the", "response", "writer", "which", "happens", "in", "the", "producer", "NUMBER", "Produce", "call", "I", "miss", "that", "point", "my", "simple", "test", "to", "confirm", "my", "initial", "thoughts", "have", "be", "to", "call", "to", "panic", "just", "after", "the", "rw", "NUMBER", "WriteHeader", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "generate", "restapi", "operations", "pet", "get_pet_by_id_responses", "NUMBER", "go", "L", "NUMBER", "and", "have", "basic", "panic", "recover", "middleware", "which", "sends", "status", "NUMBER", "Then", "I", "confirmed", "my", "thoughts", "of", "the", "response", "status", "code", "that", "the", "client", "gets", "be", "NUMBER", "rather", "than", "NUMBER", "and", "a", "message", "in", "the", "console", "saying", "something", "like", "that", "the", "header", "has", "be", "write", "more", "than", "once", "NUMBER", "When", "I", "basically", "change", "the", "panic", "call", "before", "of", "the", "w", "NUMBER", "WriteHeader", "NUMBER", "the", "client", "get", "a", "response", "with", "status", "NUMBER", "However", "I", "think", "that", "you", "re", "right", "because", "it", "may", "panic", "after", "starting", "to", "write", "the", "response", "body", "but", "before", "finishing", "NUMBER", "I", "think", "this", "could", "be", "fix", "in", "the", "panic", "middleware", "by", "having", "a", "buffered", "response", "that", "gets", "flushed", "at", "the", "end", "or", "when", "its", "buffer", "overflows", "perhaps", "I", "don", "t", "understand", "what", "you", "exactly", "suggested", "it", "NUMBER", "Could", "you", "elaborate", "how", "a", "panic", "middleware", "could", "avoid", "such", "thing", "without", "make", "any", "change", "in", "the", "default", "template", "use", "by", "the", "generator", "Many", "thanks", "Hi", "Is", "there", "a", "get", "start", "page", "file", "I", "m", "pretty", "new", "to", "Golang", "but", "use", "Swagger", "earlier", "on", "my", "Java", "SpringBoot", "NUMBER", "I", "d", "like", "to", "add", "Swagger", "documentation", "to", "my", "RESTful", "APIs", "write", "in", "Golang", "but", "I", "m", "a", "bit", "lost", "here", "NUMBER", "How", "do", "I", "get", "start", "Yes", "and", "it", "s", "pretty", "fine", "NUMBER", "The", "one", "provide", "here", "LINK", "seems", "simpler", "NUMBER", "Anyway", "didn", "t", "have", "to", "time", "to", "implement", "swagger", "yet", "feel", "free", "to", "close", "this", "issue", "NUMBER", "Cheers", "Problem", "statement", "What", "s", "the", "proper", "way", "to", "go", "about", "handle", "file", "downloads", "in", "the", "swagger", "yaml", "spec", "and", "in", "the", "handler", "code", "Attempting", "to", "get", "proper", "content", "type", "s", "and", "filenames", "in", "the", "process", "This", "works", "but", "returns", "the", "file", "but", "without", "any", "headers", "despite", "explicitly", "setting", "em", "yaml", "paths", "geturl", "get", "produces", "application", "octet", "stream", "responses", "NUMBER", "description", "OK", "schema", "type", "file", "go", "f", "_", "os", "NUMBER", "Open", "somefile", "NUMBER", "zip", "h", "make", "textproto", "NUMBER", "MIMEHeader", "h", "NUMBER", "Set", "Content", "Type", "application", "zip", "header", "multipart", "NUMBER", "FileHeader", "Filename", "returnfilename", "NUMBER", "zip", "Header", "h", "return", "operations", "NUMBER", "NewGetDataOK", "NUMBER", "WithPayload", "runtime", "NUMBER", "File", "Data", "f", "Header", "header", "Tried", "setting", "produces", "to", "the", "resulting", "file", "type", "application", "zip", "but", "that", "did", "not", "work", "at", "all", "no", "file", "get", "pass", "through", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Mac", "OS", "X", "thanks", "a", "lot", "Problem", "statement", "dot", "separated", "like", "fileName", "NUMBER", "fileExt", "parameters", "in", "the", "path", "be", "parsed", "incorrectly", "NUMBER", "same", "spec", "be", "work", "perfectly", "for", "swagger", "codegen", "LINK", "codegen", "Swagger", "specification", "swagger", "NUMBER", "info", "description", "Minimal", "swagger", "file", "to", "demonstrate", "a", "dot", "in", "th", "path", "problem", "version", "NUMBER", "title", "test", "tags", "name", "test", "description", "test", "the", "go", "swagger", "generator", "bug", "paths", "fileName", "NUMBER", "fileExt", "get", "tags", "test", "operationId", "test", "parameters", "name", "fileName", "in", "path", "required", "true", "type", "string", "name", "fileExt", "in", "path", "required", "true", "type", "string", "responses", "NUMBER", "description", "successful", "operation", "NUMBER", "description", "Operation", "error", "Steps", "to", "reproduce", "swagger", "generate", "client", "The", "swagger", "spec", "at", "swagger", "NUMBER", "yml", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "path", "param", "fileName", "NUMBER", "fileExt", "has", "no", "parameter", "definition", "path", "param", "fileName", "be", "not", "present", "in", "path", "fileName", "NUMBER", "fileExt", "path", "param", "fileExt", "be", "not", "present", "in", "path", "fileName", "NUMBER", "fileExt", "Environment", "swagger", "version", "dev", "install", "with", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "OS", "X", "El", "Capitan", "NUMBER", "I", "would", "not", "say", "it", "be", "good", "idea", "to", "give", "up", "on", "validation", "for", "the", "real", "world", "scenarios", "yes", "right", "thank", "you", "fortunately", "this", "time", "I", "need", "just", "a", "client", "code", "which", "I", "ve", "generate", "with", "swagger", "codegen", "successfully", "NUMBER", "by", "the", "way", "this", "be", "a", "spec", "this", "bug", "appeared", "with", "LINK", "swagger", "Currect", "swagger", "code", "be", "support", "easyjson", "serialization", "but", "don", "t", "mark", "generate", "types", "as", "easyjson", "json", "NUMBER", "This", "issue", "can", "partically", "workarounded", "by", "easyjson", "all", "but", "unfortunatelly", "this", "command", "ignore", "array", "types", "like", "swagger", "model", "Posts", "type", "Posts", "Post", "As", "result", "you", "can", "t", "use", "easyjson", "serialization", "with", "swagger", "model", "like", "swagger", "NUMBER", "paths", "posts", "thread_id", "profile", "get", "parameters", "name", "thread_id", "in", "path", "required", "true", "type", "number", "responses", "NUMBER", "schema", "ref", "definitions", "Posts", "definitions", "Post", "type", "object", "NUMBER", "Posts", "type", "array", "items", "ref", "definitions", "Post", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "c", "NUMBER", "b", "NUMBER", "c", "NUMBER", "d", "NUMBER", "d", "NUMBER", "b", "NUMBER", "f", "NUMBER", "a", "NUMBER", "e", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "scan", "schema", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "hlbWEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "wZXJhdGlvbi", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "template", "_repo", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "RlbXBsYXRlX", "NUMBER", "JlcG", "NUMBER", "uZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "scan", "validators", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "YWxpZGF", "NUMBER", "b", "NUMBER", "JzLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "c", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Signed", "off", "by", "lfree", "xh", "TAG", "OK", "BasicAuth", "and", "BearerAuth", "add", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "c", "NUMBER", "d", "NUMBER", "dde", "NUMBER", "ec", "NUMBER", "f", "NUMBER", "dcd", "NUMBER", "af", "NUMBER", "d", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "c", "NUMBER", "d", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "Currently", "the", "user", "s", "TokenAuthentication", "func", "only", "get", "the", "token", "string", "pass", "NUMBER", "TokenAuthentication", "authentication", "function", "type", "TokenAuthentication", "func", "string", "interface", "error", "Sometimes", "it", "s", "not", "enough", "to", "verify", "the", "token", "string", "when", "it", "s", "calculated", "based", "on", "info", "like", "the", "query", "path", "or", "body", "data", "which", "should", "be", "fetched", "through", "the", "http", "NUMBER", "Request", "interface", "NUMBER", "So", "be", "it", "possible", "to", "pass", "the", "http", "NUMBER", "Request", "instance", "to", "the", "auth", "func", "TokenAuthWithRequest", "authentication", "function", "type", "TokenAuthWithRequest", "func", "string", "http", "NUMBER", "Request", "interface", "error", "How", "could", "I", "change", "responses", "of", "validation", "error", "NUMBER", "The", "default", "response", "when", "the", "required", "field", "be", "empty", "be", "the", "following", "NUMBER", "HTTP", "NUMBER", "NUMBER", "Unprocessable", "Entity", "code", "NUMBER", "message", "xxx", "in", "body", "be", "required", "But", "I", "want", "to", "change", "responses", "like", "as", "follows", "NUMBER", "HTTP", "NUMBER", "NUMBER", "Unprocessable", "Entity", "code", "NUMBER", "version", "v", "NUMBER", "status", "Failure", "message", "xxx", "in", "body", "be", "required", "The", "definition", "of", "swagger", "looks", "something", "like", "this", "NUMBER", "ValidationError", "type", "object", "properties", "version", "type", "string", "status", "type", "string", "enum", "Success", "Failure", "code", "type", "integer", "format", "int", "NUMBER", "message", "type", "string", "Thanks", "for", "your", "quick", "response", "NUMBER", "I", "ll", "try", "it", "NUMBER", "This", "be", "currently", "how", "my", "authentication", "looks", "api", "NUMBER", "APIKeyAuth", "func", "token", "string", "interface", "error", "Check", "if", "the", "user", "has", "access", "true", "if", "yes", "validatedUser", "dbConnector", "NUMBER", "ValidateUser", "token", "if", "validatedUser", "true", "return", "token", "nil", "return", "nil", "error", "NUMBER", "New", "NUMBER", "Provided", "key", "be", "not", "valid", "Pretty", "straight", "forward", "NUMBER", "However", "I", "would", "like", "to", "get", "the", "IP", "address", "of", "the", "requester", "in", "api", "NUMBER", "APIKeyAuth", "be", "that", "possible", "Thanks", "casualjim", "can", "I", "help", "there", "If", "you", "can", "hint", "me", "towards", "a", "place", "where", "you", "would", "like", "to", "see", "such", "an", "addition", "I", "can", "see", "if", "I", "can", "help", "NUMBER", "casualjim", "Modification", "as", "you", "said", "do", "give", "us", "an", "opportunity", "to", "replace", "the", "authenticators", "but", "the", "routine", "work", "of", "fetching", "the", "token", "string", "must", "be", "do", "manually", "also", "NUMBER", "What", "do", "you", "think", "of", "add", "http", "NUMBER", "Request", "to", "the", "parameter", "list", "of", "authenticator", "of", "API", "key", "as", "I", "write", "in", "NUMBER", "Problem", "statement", "I", "ve", "created", "a", "very", "simple", "Go", "Rest", "application", "with", "two", "structs", "and", "a", "couple", "of", "rest", "handlers", "NUMBER", "I", "annotated", "this", "with", "swagger", "comments", "NUMBER", "Generating", "the", "swagger", "NUMBER", "yml", "file", "results", "in", "a", "file", "that", "has", "the", "routers", "but", "not", "the", "models", "NUMBER", "Somehow", "i", "m", "not", "annotating", "the", "model", "or", "routes", "properly", "NUMBER", "I", "ve", "tried", "a", "few", "variants", "in", "the", "example", "below", "without", "result", "NUMBER", "Please", "give", "suggestions", "to", "fix", "this", "NUMBER", "I", "think", "this", "complete", "example", "would", "be", "very", "useful", "to", "other", "people", "that", "be", "starting", "with", "go", "swagger", "Steps", "to", "reproduce", "Create", "file", "main", "NUMBER", "go", "with", "the", "content", "below", "NUMBER", "In", "this", "folder", "call", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "yml", "execute", "use", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "yml", "Package", "classification", "Test", "Rest", "API", "NUMBER", "the", "purpose", "of", "this", "application", "be", "to", "provide", "an", "application", "that", "be", "use", "plain", "go", "code", "to", "define", "an", "API", "NUMBER", "This", "should", "demonstrate", "all", "the", "possible", "comment", "annotations", "that", "be", "available", "to", "turn", "go", "code", "into", "a", "fully", "compliant", "swagger", "NUMBER", "spec", "Terms", "Of", "Service", "there", "be", "no", "TOS", "at", "this", "moment", "use", "at", "your", "own", "risk", "we", "take", "no", "responsibility", "Schemes", "http", "https", "Host", "localhost", "NUMBER", "BasePath", "Version", "NUMBER", "License", "MIT", "LINK", "Contact", "ODT", "TAG", "LINK", "Consumes", "application", "json", "Produces", "application", "json", "swagger", "meta", "package", "main", "import", "encoding", "json", "log", "net", "http", "github", "NUMBER", "com", "gorilla", "handlers", "github", "NUMBER", "com", "gorilla", "mux", "Person", "represents", "the", "person", "for", "this", "application", "A", "person", "be", "a", "human", "be", "A", "person", "can", "have", "an", "address", "swagger", "model", "Person", "Person", "type", "Person", "struct", "The", "id", "of", "the", "person", "NUMBER", "required", "true", "ID", "string", "json", "id", "omitempty", "Firstname", "string", "json", "firstname", "omitempty", "Lastname", "string", "json", "lastname", "omitempty", "Address", "Address", "json", "address", "omitempty", "Address", "represents", "the", "address", "of", "a", "user", "An", "address", "be", "an", "address", "in", "the", "US", "NUMBER", "swagger", "model", "type", "Address", "struct", "City", "string", "json", "city", "omitempty", "State", "string", "json", "state", "omitempty", "var", "people", "Person", "swagger", "route", "GET", "person", "persons", "getPerson", "Returns", "a", "person", "based", "on", "the", "parameter", "id", "NUMBER", "This", "will", "return", "only", "NUMBER", "person", "Consumes", "application", "json", "Produces", "application", "json", "Schemes", "http", "https", "Responses", "NUMBER", "Person", "func", "GetPersonEndpoint", "w", "http", "NUMBER", "ResponseWriter", "req", "http", "NUMBER", "Request", "params", "mux", "NUMBER", "Vars", "req", "for", "_", "item", "range", "people", "if", "item", "NUMBER", "ID", "params", "id", "json", "NUMBER", "NewEncoder", "w", "NUMBER", "Encode", "item", "return", "json", "NUMBER", "NewEncoder", "w", "NUMBER", "Encode", "Person", "swagger", "route", "GET", "persons", "persons", "listPersons", "Lists", "all", "persons", "This", "will", "show", "all", "available", "persons", "NUMBER", "Consumes", "application", "json", "application", "x", "protobuf", "Produces", "application", "json", "application", "x", "protobuf", "Schemes", "http", "https", "Responses", "NUMBER", "Person", "func", "GetPeopleEndpoint", "w", "http", "NUMBER", "ResponseWriter", "req", "http", "NUMBER", "Request", "json", "NUMBER", "NewEncoder", "w", "NUMBER", "Encode", "people", "func", "CreatePersonEndpoint", "w", "http", "NUMBER", "ResponseWriter", "req", "http", "NUMBER", "Request", "params", "mux", "NUMBER", "Vars", "req", "var", "person", "Person", "_", "json", "NUMBER", "NewDecoder", "req", "NUMBER", "Body", "NUMBER", "Decode", "person", "person", "NUMBER", "ID", "params", "id", "people", "append", "people", "person", "json", "NUMBER", "NewEncoder", "w", "NUMBER", "Encode", "people", "func", "DeletePersonEndpoint", "w", "http", "NUMBER", "ResponseWriter", "req", "http", "NUMBER", "Request", "params", "mux", "NUMBER", "Vars", "req", "for", "index", "item", "range", "people", "if", "item", "NUMBER", "ID", "params", "id", "people", "append", "people", "index", "people", "index", "NUMBER", "NUMBER", "break", "json", "NUMBER", "NewEncoder", "w", "NUMBER", "Encode", "people", "func", "main", "router", "mux", "NUMBER", "NewRouter", "people", "append", "people", "Person", "ID", "NUMBER", "Firstname", "Nic", "Lastname", "Raboy", "Address", "Address", "City", "Dublin", "State", "CA", "people", "append", "people", "Person", "ID", "NUMBER", "Firstname", "Maria", "Lastname", "Raboy", "router", "NUMBER", "HandleFunc", "people", "GetPeopleEndpoint", "NUMBER", "Methods", "GET", "router", "NUMBER", "HandleFunc", "people", "id", "GetPersonEndpoint", "NUMBER", "Methods", "GET", "router", "NUMBER", "HandleFunc", "people", "id", "CreatePersonEndpoint", "NUMBER", "Methods", "POST", "router", "NUMBER", "HandleFunc", "people", "id", "DeletePersonEndpoint", "NUMBER", "Methods", "DELETE", "log", "NUMBER", "Fatal", "http", "NUMBER", "ListenAndServe", "NUMBER", "handlers", "NUMBER", "CORS", "router", "Environment", "go", "swagger", "NUMBER", "go", "version", "NUMBER", "OS", "maco", "I", "did", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "yml", "m", "Now", "I", "get", "the", "error", "message", "unable", "to", "determine", "package", "for", "Users", "swesten", "GoglandProjects", "testRestAPI", "main", "NUMBER", "go", "which", "do", "not", "make", "sense", "to", "me", "because", "there", "be", "a", "single", "main", "file", "with", "a", "package", "declared", "NUMBER", "I", "ve", "to", "say", "that", "the", "learning", "curve", "be", "pretty", "steep", "NUMBER", "I", "was", "use", "a", "temporary", "folder", "NUMBER", "After", "moving", "the", "folder", "below", "go", "src", "it", "worked", "fine", "NUMBER", "I", "like", "to", "add", "additional", "flags", "If", "i", "understand", "well", "that", "should", "happens", "at", "configureFlags", "function", "in", "restapi", "package", "So", "basically", "i", "do", "something", "like", "this", "var", "acmeConfig", "struct", "acmeHost", "string", "long", "acme", "host", "description", "Use", "autocert", "with", "specific", "hostname", "func", "configureFlags", "api", "operations", "NUMBER", "MdmAPI", "api", "NUMBER", "CommandLineOptionsGroups", "swag", "NUMBER", "CommandLineOptionsGroup", "swag", "NUMBER", "CommandLineOptionsGroup", "ShortDescription", "Autocert", "hostname", "Options", "acmeConfig", "but", "after", "build", "and", "execute", "with", "h", "option", "flang", "did", "not", "exist", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "Centos", "NUMBER", "Most", "probably", "be", "that", "i", "cant", "find", "the", "workflow", "but", "LINK", "openapi", "kvstore", "blob", "master", "cmd", "kvstored", "main", "NUMBER", "go", "L", "NUMBER", "be", "calling", "LINK", "openapi", "kvstore", "blob", "master", "gen", "restapi", "server", "NUMBER", "go", "L", "NUMBER", "witch", "be", "calling", "LINK", "openapi", "kvstore", "blob", "master", "gen", "restapi", "configure_kvstore", "NUMBER", "go", "L", "NUMBER", "and", "that", "be", "the", "exact", "part", "witch", "be", "not", "work", "for", "me", "I", "find", "the", "issue", "and", "was", "very", "lame", "NUMBER", "I", "did", "not", "expose", "the", "flag", "property", "to", "public", "NUMBER", "Everything", "works", "like", "a", "charm", "Both", "a", "client", "and", "server", "can", "be", "generate", "and", "reference", "pre", "generate", "models", "use", "the", "new", "exist", "models", "command", "line", "switch", "e", "NUMBER", "g", "NUMBER", "swagger", "generate", "server", "exist", "models", "github", "NUMBER", "com", "TAG", "models", "swagger", "generate", "client", "exist", "models", "github", "NUMBER", "com", "TAG", "models", "This", "be", "a", "pr", "that", "replaces", "NUMBER", "remove", "conflict", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "adced", "NUMBER", "f", "NUMBER", "bbcaf", "NUMBER", "c", "NUMBER", "d", "NUMBER", "c", "NUMBER", "f", "NUMBER", "b", "NUMBER", "ae", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "TAG", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "wZXJhdGlvbi", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "adced", "NUMBER", "f", "NUMBER", "a", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "ref", "LINK", "pathItemObject", "within", "path", "be", "not", "resolve", "properly", "NUMBER", "Im", "get", "error", "no", "operations", "were", "selected", "NUMBER", "fmt", "NUMBER", "Println", "shows", "that", "Spec", "NUMBER", "operations", "be", "empty", "NUMBER", "Swagger", "specification", "paths", "ref", "NUMBER", "paths", "options", "NUMBER", "yaml", "Steps", "to", "reproduce", "Create", "any", "spec", "with", "referenced", "path", "item", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "osx", "Yes", "flattened", "spec", "has", "all", "operations", "include", "NUMBER", "Is", "such", "intermediate", "file", "recommended", "way", "of", "generation", "Thanks", "for", "posting", "that", "solution", "casualjim", "that", "will", "work", "for", "me", "in", "the", "interim", "as", "well", "Add", "ability", "to", "use", "pre", "generate", "model", "in", "server", "and", "client", "generation", "NUMBER", "This", "be", "useful", "when", "for", "example", "you", "wish", "to", "share", "some", "helper", "code", "between", "clients", "and", "servers", "that", "validate", "and", "construct", "models", "NUMBER", "The", "new", "command", "line", "flag", "provides", "the", "user", "the", "ability", "to", "specify", "an", "external", "go", "package", "that", "contains", "the", "required", "models", "NUMBER", "Setting", "exist", "models", "implies", "skip", "models", "NUMBER", "Usage", "swagger", "generate", "server", "exist", "models", "github", "NUMBER", "com", "TAG", "models", "swagger", "generate", "client", "exist", "models", "github", "NUMBER", "com", "TAG", "models", "Thanks", "Ivan", "NUMBER", "I", "ll", "get", "the", "conflict", "resolve", "early", "next", "week", "NUMBER", "On", "NUMBER", "May", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "m", "NUMBER", "Ivan", "Porto", "Carrero", "TAG", "write", "there", "be", "some", "conflict", "here", "that", "need", "to", "be", "resolve", "NUMBER", "change", "look", "good", "though", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "adced", "NUMBER", "f", "NUMBER", "bbcaf", "NUMBER", "c", "NUMBER", "d", "NUMBER", "c", "NUMBER", "f", "NUMBER", "b", "NUMBER", "ae", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "width", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "scan", "scanner", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "FubmVyLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "scan", "parameters", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "wYXJhbWV", "NUMBER", "ZXJzLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "scan", "validators", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "YWxpZGF", "NUMBER", "b", "NUMBER", "JzLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "operation", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "wZXJhdGlvbi", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "shared", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NoYXJlZC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "NUMBER", "arrow_up", "scan", "schema", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "hlbWEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "NUMBER", "and", "NUMBER", "more", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "more", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "adced", "NUMBER", "f", "NUMBER", "c", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "ec", "NUMBER", "eaf", "NUMBER", "b", "NUMBER", "e", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "f", "NUMBER", "e", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "ec", "NUMBER", "f", "NUMBER", "b", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "I", "m", "curious", "why", "you", "implement", "this", "interface", "NUMBER", "Is", "it", "use", "somewhere", "Does", "go", "swagger", "provide", "an", "http", "NUMBER", "HandlerFunc", "or", "other", "easy", "method", "for", "serving", "Swagger", "UI", "from", "a", "prexisting", "web", "app", "I", "want", "my", "web", "app", "to", "expose", "swagger", "ui", "without", "use", "code", "generation", "and", "without", "hosting", "a", "separate", "server", "NUMBER", "Specifically", "the", "petstore", "example", "hardcodes", "the", "Swagger", "spec", "whereas", "a", "production", "application", "would", "be", "more", "likely", "to", "use", "some", "kind", "of", "resource", "loading", "system", "NUMBER", "Could", "the", "petstore", "example", "be", "update", "to", "load", "the", "JSON", "spec", "from", "a", "file", "nearby", "in", "version", "control", "Or", "even", "better", "skip", "file", "altogether", "and", "generate", "the", "spec", "on", "launch", "via", "Swagger", "Go", "lib", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "NUMBER", "petstore", "server", "api", "petstore", "NUMBER", "go", "Hi", "casualjim", "It", "be", "followup", "question", "to", "this", "thread", "Is", "there", "any", "way", "can", "we", "serve", "swagger", "UI", "use", "swagger", "ui", "instead", "of", "ReDoc", "Do", "you", "have", "any", "example", "on", "it", "NUMBER", "Please", "let", "me", "know", "Problem", "statement", "I", "be", "trying", "to", "get", "security", "definitions", "work", "with", "OAuth", "NUMBER", "in", "the", "spec", "generation", "NUMBER", "However", "it", "seems", "like", "either", "I", "m", "use", "the", "scopes", "parameter", "wrong", "or", "it", "s", "not", "support", "NUMBER", "Go", "specification", "I", "tried", "the", "following", "things", "go", "NUMBER", "SecurityDefinitions", "oauth", "NUMBER", "type", "oauth", "NUMBER", "authorizationUrl", "oauth", "NUMBER", "auth", "tokenUrl", "oauth", "NUMBER", "token", "in", "header", "scopes", "bla", "foo", "flow", "accessCode", "NUMBER", "swagger", "meta", "package", "main", "go", "NUMBER", "SecurityDefinitions", "oauth", "NUMBER", "type", "oauth", "NUMBER", "authorizationUrl", "oauth", "NUMBER", "auth", "tokenUrl", "oauth", "NUMBER", "token", "in", "header", "scopes", "bla", "foo", "flow", "accessCode", "NUMBER", "swagger", "meta", "package", "main", "go", "NUMBER", "SecurityDefinitions", "oauth", "NUMBER", "type", "oauth", "NUMBER", "authorizationUrl", "oauth", "NUMBER", "auth", "tokenUrl", "oauth", "NUMBER", "token", "in", "header", "scopes", "bla", "foo", "flow", "accessCode", "NUMBER", "swagger", "meta", "package", "main", "The", "resulting", "swagger", "json", "be", "always", "the", "same", "json", "securityDefinitions", "oauth", "NUMBER", "type", "flow", "accessCode", "scopes", "type", "flow", "accessCode", "When", "remove", "the", "scope", "array", "or", "replacing", "it", "with", "scope", "foobar", "it", "simply", "remove", "the", "scope", "key", "json", "securityDefinitions", "oauth", "NUMBER", "type", "oauth", "NUMBER", "in", "header", "flow", "accessCode", "authorizationUrl", "oauth", "NUMBER", "auth", "tokenUrl", "oauth", "NUMBER", "token", "Environment", "swagger", "version", "latest", "master", "of", "goswagger", "install", "today", "go", "version", "NUMBER", "OS", "Win", "NUMBER", "Will", "check", "and", "do", "fix", "tomorrow", "NUMBER", "Thank", "you", "for", "fix", "this", "so", "swiftly", "Am", "NUMBER", "um", "NUMBER", "NUMBER", "schrieb", "Ivan", "Porto", "Carrero", "TAG", "Closed", "NUMBER", "via", "NUMBER", "f", "NUMBER", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "I", "m", "still", "observing", "the", "same", "behaviour", "NUMBER", "After", "doing", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "and", "gen", "swagger", "NUMBER", "sh", "the", "result", "of", "Schemes", "http", "https", "Host", "BasePath", "Version", "Latest", "License", "Apache", "NUMBER", "LINK", "Contact", "ORY", "TAG", "LINK", "Consumes", "application", "json", "application", "x", "www", "form", "urlencoded", "Produces", "application", "json", "SecurityDefinitions", "oauth", "NUMBER", "type", "oauth", "NUMBER", "authorizationUrl", "oauth", "NUMBER", "auth", "tokenUrl", "oauth", "NUMBER", "token", "in", "header", "flow", "accessCode", "scopes", "bla", "foo", "Extensions", "x", "request", "id", "string", "x", "forwarded", "proto", "string", "swagger", "meta", "be", "securityDefinitions", "oauth", "NUMBER", "type", "scopes", "type", "x", "request", "id", "string", "Ah", "yes", "that", "helped", "thanks", "However", "it", "s", "only", "copying", "the", "first", "scope", "SecurityDefinitions", "oauth", "NUMBER", "type", "oauth", "NUMBER", "authorizationUrl", "oauth", "NUMBER", "auth", "tokenUrl", "oauth", "NUMBER", "token", "flow", "accessCode", "scopes", "hydra", "NUMBER", "clients", "A", "scope", "required", "to", "manage", "OAuth", "NUMBER", "Clients", "hydra", "NUMBER", "policies", "A", "scope", "required", "to", "manage", "access", "control", "policies", "hydra", "NUMBER", "group", "A", "scope", "required", "to", "manage", "warden", "group", "hydra", "NUMBER", "warden", "A", "scope", "required", "to", "make", "access", "control", "inquiries", "hydra", "NUMBER", "keys", "NUMBER", "get", "A", "scope", "required", "to", "fetch", "JSON", "Web", "Keys", "hydra", "NUMBER", "keys", "NUMBER", "create", "A", "scope", "required", "to", "create", "JSON", "Web", "Keys", "hydra", "NUMBER", "keys", "NUMBER", "delete", "A", "scope", "required", "to", "delete", "JSON", "Web", "Keys", "hydra", "NUMBER", "keys", "NUMBER", "update", "A", "scope", "required", "to", "get", "JSON", "Web", "Keys", "offline", "A", "scope", "required", "when", "request", "refresh", "tokens", "openid", "Request", "an", "OpenID", "Connect", "ID", "Token", "securityDefinitions", "oauth", "NUMBER", "type", "oauth", "NUMBER", "flow", "accessCode", "authorizationUrl", "oauth", "NUMBER", "auth", "tokenUrl", "oauth", "NUMBER", "token", "scopes", "hydra", "NUMBER", "clients", "A", "scope", "required", "to", "manage", "OAuth", "NUMBER", "Clients", "arekkas", "work", "on", "that", "NUMBER", "should", "fix", "your", "issue", "Problem", "statement", "I", "want", "to", "generate", "a", "Swagger", "specification", "from", "a", "preexisting", "net", "http", "application", "NUMBER", "However", "go", "swagger", "appears", "to", "have", "trouble", "finding", "the", "endpoints", "NUMBER", "As", "a", "new", "go", "swagger", "user", "I", "m", "not", "sure", "whether", "endpoints", "need", "to", "be", "manually", "annotated", "first", "in", "order", "to", "assist", "swagger", "generate", "spec", "NUMBER", "Could", "someone", "clarify", "Swagger", "specification", "json", "swagger", "NUMBER", "paths", "Steps", "to", "reproduce", "NUMBER", "Define", "endpoints", "with", "net", "http", "NUMBER", "NUMBER", "Run", "swagger", "generate", "spec", "NUMBER", "NUMBER", "Run", "swagger", "generate", "spec", "b", "NUMBER", "cmd", "NUMBER", "NUMBER", "Run", "swagger", "generate", "spec", "b", "NUMBER", "cmd", "server", "NUMBER", "NUMBER", "Run", "swagger", "generate", "spec", "b", "NUMBER", "cmd", "server", "main", "NUMBER", "go", "NUMBER", "NUMBER", "Run", "swagger", "generate", "spec", "b", "TAG", "TAG", "cmd", "server", "NUMBER", "Same", "no", "paths", "Swagger", "output", "each", "time", "NUMBER", "Environment", "go", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "macOS", "NUMBER", "Yes", "NUMBER", "Maybe", "I", "get", "the", "syntax", "wrong", "go", "swagger", "route", "GET", "health", "Returns", "status", "information", "for", "connected", "elements", "NUMBER", "Produces", "application", "json", "Schemes", "http", "https", "Responses", "default", "genericError", "NUMBER", "someResponse", "func", "GetHealth", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "NUMBER", "Ah", "I", "was", "miss", "the", "required", "operation", "ID", "field", "in", "the", "swagger", "syntax", "NUMBER", "Can", "we", "add", "this", "feature", "for", "logo", "integration", "if", "possible", "json", "consumes", "application", "json", "application", "xml", "produces", "application", "json", "application", "xml", "schemes", "http", "https", "swagger", "NUMBER", "info", "x", "logo", "url", "NUMBER", "images", "hrperformans", "logo", "NUMBER", "x", "NUMBER", "x", "NUMBER", "png", "backgroundColor", "FFFFFF", "alt", "text", "LINK", "_Cobani", "folders", "Snagit", "media", "NUMBER", "c", "NUMBER", "c", "NUMBER", "NUMBER", "bf", "NUMBER", "NUMBER", "dc", "NUMBER", "NUMBER", "ee", "NUMBER", "ce", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "_", "NUMBER", "NUMBER", "NUMBER", "png", "x", "logo", "integration", "Yes", "I", "want", "to", "add", "another", "command", "like", "bellow", "for", "x", "logo", "NUMBER", "go", "HRPERFORMANS", "uygulamas\u0131", "API", "d\u00f6k\u00fcman\u0131", "NUMBER", "HR", "Performans", "\u00fcreten", "\u00f6rnek", "bir", "go", "uygulamas\u0131", "ortaya", "koymakt\u0131r", "NUMBER", "Uygulama", "go", "kodu", "ve", "yorum", "sat\u0131rlar\u0131nda", "kullan\u0131lan", "\u00f6zel", "direktifleri", "kullanarak", "swagger", "NUMBER", "uyumlu", "bir", "API", "spesikasyon", "d\u00f6k\u00fcman\u0131", "\u00fcretmektedir", "NUMBER", "Schemes", "http", "https", "Host", "localhost", "BasePath", "v", "NUMBER", "Version", "NUMBER", "License", "MIT", "LINK", "Contact", "ici", "TAG", "X", "logo", "NUMBER", "images", "hrperformans", "logo", "NUMBER", "x", "NUMBER", "x", "NUMBER", "png", "Consumes", "application", "json", "application", "xml", "Produces", "application", "json", "application", "xml", "swagger", "meta", "package", "main", "Wonderfull", "thanks", "This", "example", "shows", "one", "of", "the", "handlers", "NUMBER", "It", "now", "simply", "returns", "the", "createdCode", "that", "be", "set", "for", "this", "event", "NUMBER", "api", "NUMBER", "LocationsWeaviateLocationsInsertHandler", "locations", "NUMBER", "WeaviateLocationsInsertHandlerFunc", "func", "params", "locations", "NUMBER", "WeaviateLocationsInsertParams", "middleware", "NUMBER", "Responder", "do", "stuff", "based", "on", "params", "NUMBER", "Body", "return", "middleware", "NUMBER", "ResponderFunc", "func", "rw", "http", "NUMBER", "ResponseWriter", "p", "runtime", "NUMBER", "Producer", "rw", "NUMBER", "WriteHeader", "locations", "NUMBER", "WeaviateLocationsInsertCreatedCode", "I", "would", "like", "to", "know", "how", "I", "can", "validate", "params", "NUMBER", "Body", "NUMBER", "I", "don", "t", "seem", "to", "be", "able", "to", "find", "the", "correct", "validation", "function", "NUMBER", "Hi", "casualjim", "thx", "but", "I", "actually", "mean", "the", "expected", "body", "NUMBER", "If", "I", "POST", "a", "body", "which", "be", "not", "the", "body", "from", "the", "definition", "it", "be", "still", "accepted", "NUMBER", "Example", "If", "I", "have", "this", "definition", "definitions", "Example", "description", "Example", "definition", "NUMBER", "properties", "foo", "default", "case", "description", "This", "be", "a", "test", "string", "type", "string", "bar", "default", "case", "description", "This", "be", "another", "test", "string", "type", "string", "and", "I", "POST", "test", "case", "It", "still", "be", "valid", "NUMBER", "That", "be", "why", "I", "would", "like", "to", "validate", "params", "NUMBER", "Body", "against", "what", "be", "in", "the", "Swagger", "document", "NUMBER", "Check", "thanks", "Also", "bump", "vendored", "version", "of", "go", "openapi", "analysis", "with", "gvt", "update", "for", "access", "to", "the", "new", "Mixin", "func", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "ec", "NUMBER", "eaf", "NUMBER", "b", "NUMBER", "e", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "f", "NUMBER", "e", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "width", "NUMBER", "height", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "ec", "NUMBER", "fd", "NUMBER", "b", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Thanks", "Ivan", "NUMBER", "Do", "you", "need", "a", "PR", "for", "go", "swagger", "NUMBER", "github", "NUMBER", "io", "to", "document", "the", "mixin", "command", "or", "should", "we", "let", "it", "settle", "for", "a", "while", "Allows", "people", "to", "find", "the", "actually", "support", "formats", "NUMBER", "Updated", "after", "LINK", "swagger", "go", "swagger", "NUMBER", "github", "NUMBER", "io", "pull", "NUMBER", "issuecomment", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "e", "NUMBER", "bb", "NUMBER", "fdafcfe", "NUMBER", "ad", "NUMBER", "ae", "NUMBER", "ed", "NUMBER", "a", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "height", "NUMBER", "width", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "e", "NUMBER", "bb", "NUMBER", "c", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "I", "seem", "to", "be", "unable", "to", "find", "support", "mime", "types", "that", "the", "API", "s", "can", "consume", "and", "produce", "NUMBER", "Any", "references", "Wonderful", "thanks", "casualjim", "NUMBER", "NUMBER", "Did", "a", "minor", "pull", "request", "LINK", "swagger", "go", "swagger", "NUMBER", "github", "NUMBER", "io", "pull", "NUMBER", "NUMBER", "Protobuf", "would", "be", "very", "much", "appreciated", "Cheers", "The", "info", "appears", "to", "have", "be", "remove", "Because", "I", "can", "t", "find", "any", "information", "about", "support", "producer", "mime", "types", "NUMBER", "Imagine", "having", "following", "swagger", "NUMBER", "yml", "yml", "NUMBER", "users", "userId", "image", "get", "tags", "user", "description", "Get", "the", "user", "s", "profile", "image", "operationId", "getUserImage", "parameters", "name", "userId", "in", "path", "description", "The", "ID", "of", "the", "user", "required", "true", "type", "string", "produces", "application", "octet", "stream", "responses", "NUMBER", "description", "Success", "schema", "type", "string", "format", "binary", "NUMBER", "The", "API", "produces", "the", "binary", "image", "with", "application", "octet", "stream", "just", "as", "intended", "NUMBER", "But", "write", "e", "NUMBER", "g", "NUMBER", "image", "jpeg", "in", "produces", "do", "not", "work", "because", "no", "producer", "be", "registered", "for", "it", "NUMBER", "It", "took", "me", "quite", "a", "while", "to", "figure", "this", "out", "because", "no", "error", "message", "was", "printed", "out", "and", "I", "thought", "that", "my", "io", "NUMBER", "ReadCloser", "simply", "didn", "t", "work", "NUMBER", "I", "be", "use", "go", "swagger", "to", "generate", "go", "code", "from", "my", "swagger", "spec", "NUMBER", "Is", "there", "a", "way", "to", "register", "another", "producer", "Because", "the", "xxx_api", "NUMBER", "go", "be", "generate", "I", "can", "t", "add", "it", "manually", "or", "can", "I", "btw", "NUMBER", "I", "m", "a", "go", "novice", "and", "just", "recently", "start", "use", "go", "swagger", "Maybe", "an", "error", "should", "be", "printed", "if", "not", "support", "binary", "mime", "types", "be", "use", "Environment", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "go", "version", "go", "version", "go", "NUMBER", "windows", "amd", "NUMBER", "OS", "Windows", "NUMBER", "Problem", "statement", "We", "define", "a", "specific", "shape", "for", "our", "error", "responses", "from", "our", "api", "NUMBER", "It", "be", "an", "object", "that", "has", "a", "message", "field", "NUMBER", "If", "for", "some", "reason", "our", "API", "goes", "down", "all", "the", "routers", "in", "the", "path", "to", "the", "api", "e", "NUMBER", "g", "NUMBER", "nginx", "haproxy", "AWS", "ELB", "etc", "return", "html", "or", "plain", "text", "instead", "of", "json", "NUMBER", "When", "the", "return", "be", "text", "plain", "we", "get", "a", "panic", "NUMBER", "panic", "interface", "conversion", "interface", "be", "models", "NUMBER", "Error", "not", "string", "NUMBER", "go", "src", "github", "NUMBER", "com", "NUMBER", "dsim", "solver", "svc", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "text", "NUMBER", "go", "NUMBER", "I", "would", "expect", "the", "generate", "client", "to", "return", "an", "error", "instead", "of", "panicking", "if", "the", "api", "returns", "an", "object", "that", "isn", "t", "the", "right", "shape", "NUMBER", "Quoting", "Andrew", "Gerrand", "The", "convention", "in", "the", "Go", "libraries", "be", "that", "even", "when", "a", "package", "uses", "panic", "internally", "its", "external", "API", "still", "presents", "explicit", "error", "return", "values", "NUMBER", "Swagger", "specification", "for", "responses", "responses", "NUMBER", "description", "Successfully", "retrieved", "list", "schema", "type", "array", "items", "ref", "definitions", "Material", "NUMBER", "description", "Not", "authorized", "schema", "ref", "definitions", "Error", "NUMBER", "description", "Forbidden", "schema", "ref", "definitions", "Error", "default", "description", "unexpect", "error", "schema", "ref", "definitions", "Error", "Swagger", "for", "error", "definition", "Error", "required", "code", "message", "properties", "code", "type", "integer", "format", "int", "NUMBER", "message", "type", "string", "Steps", "to", "reproduce", "Use", "an", "object", "for", "error", "response", "type", "NUMBER", "Generate", "client", "NUMBER", "Use", "client", "to", "call", "a", "URL", "that", "will", "NUMBER", "with", "a", "plain", "text", "response", "NUMBER", "Environment", "go", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "casualjim", "have", "a", "minute", "to", "look", "at", "this", "one", "It", "s", "pretty", "painful", "for", "us", "NUMBER", "Surprised", "it", "hasn", "t", "come", "up", "previously", "NUMBER", "Currently", "to", "work", "around", "this", "we", "have", "to", "recover", "from", "a", "panic", "before", "we", "call", "any", "generate", "client", "code", "NUMBER", "e", "NUMBER", "g", "NUMBER", "func", "c", "client", "Material", "materialID", "int", "NUMBER", "material", "models", "NUMBER", "Material", "err", "error", "defer", "func", "Until", "this", "issue", "be", "resolve", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "we", "need", "to", "recover", "from", "panics", "NUMBER", "if", "r", "recover", "r", "nil", "err", "fmt", "NUMBER", "Errorf", "Recovered", "from", "panic", "v", "r", "token", "err", "c", "NUMBER", "tokenFetcher", "NUMBER", "Token", "c", "NUMBER", "audience", "if", "err", "nil", "return", "nil", "err", "response", "err", "c", "NUMBER", "client", "NUMBER", "Operations", "NUMBER", "GetMaterial", "operations", "NUMBER", "NewGetMaterialParams", "NUMBER", "WithID", "materialID", "openapiclient", "NUMBER", "BearerToken", "token", "if", "err", "nil", "return", "nil", "err", "return", "response", "NUMBER", "Payload", "nil", "casualjim", "Going", "to", "bump", "this", "again", "NUMBER", "Should", "we", "be", "modeling", "our", "error", "differently", "to", "avoid", "panics", "There", "must", "be", "something", "we", "be", "miss", "NUMBER", "Should", "we", "not", "be", "specify", "a", "schema", "at", "all", "for", "error", "ryanwalls", "can", "you", "provide", "location", "where", "panic", "be", "come", "in", "runtime", "NUMBER", "go", "if", "you", "remove", "that", "recovery", "piece", "of", "code", "When", "I", "look", "at", "line", "NUMBER", "of", "runtime", "text", "NUMBER", "go", "it", "points", "to", "nothing", "casualjim", "EleanorRigby", "Good", "news", "NUMBER", "Since", "I", "created", "this", "issue", "the", "bug", "has", "be", "fix", "NUMBER", "I", "update", "one", "of", "our", "clients", "that", "was", "experience", "this", "issue", "to", "the", "more", "recent", "package", "and", "the", "panic", "went", "away", "NUMBER", "Sorry", "about", "the", "recent", "pings", "NUMBER", "Should", "have", "tried", "update", "the", "package", "before", "I", "bump", "this", "issue", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "daba", "NUMBER", "b", "NUMBER", "aeeea", "NUMBER", "e", "NUMBER", "e", "NUMBER", "ba", "NUMBER", "ddd", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "TAG", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "daba", "NUMBER", "b", "NUMBER", "b", "NUMBER", "c", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "d", "NUMBER", "e", "NUMBER", "bbd", "NUMBER", "a", "NUMBER", "e", "NUMBER", "ef", "NUMBER", "d", "NUMBER", "ab", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "height", "NUMBER", "width", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "d", "NUMBER", "cc", "NUMBER", "d", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "bea", "NUMBER", "b", "NUMBER", "b", "NUMBER", "ba", "NUMBER", "b", "NUMBER", "adf", "NUMBER", "f", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "height", "NUMBER", "width", "NUMBER", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "bea", "NUMBER", "b", "NUMBER", "e", "NUMBER", "c", "NUMBER", "ad", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "exclamation", "No", "coverage", "uploaded", "for", "pull", "request", "base", "master", "NUMBER", "b", "NUMBER", "NUMBER", "Click", "here", "to", "learn", "what", "that", "means", "LINK", "reference", "section", "miss", "base", "commit", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "Files", "NUMBER", "Lines", "NUMBER", "Branches", "NUMBER", "Hits", "NUMBER", "Misses", "NUMBER", "Partials", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "scan", "scanner", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "FubmVyLmdv", "NUMBER", "TAG", "\u00f8", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "b", "NUMBER", "d", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "f", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "dafd", "NUMBER", "e", "NUMBER", "bae", "NUMBER", "cc", "NUMBER", "d", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "src", "pr", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "f", "NUMBER", "d", "NUMBER", "b", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "All", "generate", "code", "be", "use", "golang", "NUMBER", "org", "x", "net", "context", "however", "restapi", "operations", "app_api", "NUMBER", "go", "be", "use", "context", "which", "makes", "the", "generate", "code", "fail", "to", "compile", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Linux", "Ubuntu", "NUMBER", "amd", "NUMBER", "Problem", "statement", "A", "query", "parameter", "specified", "as", "an", "array", "breaks", "when", "use", "pattern", "for", "items", "NUMBER", "Swagger", "specification", "widgets", "get", "summary", "Retrieve", "all", "widgets", "NUMBER", "parameters", "name", "category_id", "in", "query", "description", "Return", "the", "widgets", "that", "be", "associated", "with", "this", "category", "NUMBER", "required", "true", "type", "array", "collectionFormat", "multi", "items", "type", "string", "pattern", "NUMBER", "NUMBER", "abcdefghjkmnpqrtuvwxyz", "NUMBER", "format", "base", "NUMBER", "ID", "The", "code", "generate", "for", "this", "route", "s", "parameters", "ends", "up", "with", "an", "incorrect", "variable", "name", "func", "o", "GetWidgetsParams", "bindCategoryID", "rawData", "string", "hasKey", "bool", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "hasKey", "return", "error", "NUMBER", "Required", "category_id", "query", "categoryIDIC", "rawData", "if", "len", "categoryIDIC", "NUMBER", "return", "error", "NUMBER", "Required", "category_id", "query", "var", "categoryIDIR", "string", "for", "i", "categoryIDIV", "range", "categoryIDIC", "categoryIDI", "categoryIDIV", "if", "err", "validate", "NUMBER", "Pattern", "fmt", "NUMBER", "Sprintf", "s", "NUMBER", "v", "category_id", "i", "query", "category_idI", "NUMBER", "NUMBER", "abcdefghjkmnpqrtuvwxyz", "NUMBER", "err", "nil", "return", "err", "categoryIDIR", "append", "categoryIDIR", "categoryIDI", "o", "NUMBER", "CategoryID", "categoryIDIR", "return", "nil", "Note", "the", "validate", "NUMBER", "Pattern", "line", "NUMBER", "It", "attempts", "to", "consume", "category_idI", "not", "categoryIDI", "as", "defined", "the", "line", "above", "NUMBER", "Should", "the", "ValueExpression", "located", "in", "this", "file", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "validation", "primitive", "NUMBER", "gotmpl", "L", "NUMBER", "be", "varname", "ValueExpression", "or", "will", "that", "break", "other", "things", "Problem", "statement", "I", "want", "a", "go", "swagger", "generate", "server", "to", "serve", "NUMBER", "swagger", "specs", "that", "have", "no", "overlap", "on", "paths", "NUMBER", "One", "be", "a", "generic", "metadata", "api", "that", "be", "implement", "by", "many", "services", "and", "the", "other", "be", "a", "service", "specific", "api", "NUMBER", "The", "build", "in", "server", "NUMBER", "go", "template", "Server", "struct", "by", "having", "exactly", "one", "API", "handler", "appears", "to", "prevent", "this", "NUMBER", "Is", "there", "a", "good", "way", "to", "do", "this", "without", "re", "templating", "or", "major", "modifications", "to", "go", "swagger", "while", "staying", "compatible", "with", "the", "go", "openapi", "runtime", "Could", "you", "create", "a", "top", "level", "swagger", "file", "that", "just", "include", "the", "two", "lower", "level", "ones", "Thanks", "NUMBER", "Using", "a", "top", "level", "swagger", "file", "to", "merge", "two", "other", "file", "seems", "to", "require", "explicitly", "ref", "ing", "each", "path", "and", "data", "type", "entry", "ie", "I", "can", "t", "just", "generically", "union", "the", "paths", "ref", "file", "NUMBER", "json", "paths", "ref", "file", "NUMBER", "json", "paths", "and", "definitions", "ref", "file", "NUMBER", "definitions", "ref", "file", "NUMBER", "json", "definitions", "There", "appears", "to", "be", "tooling", "to", "merge", "swagger", "file", "into", "a", "single", "file", "with", "only", "internal", "refs", "NUMBER", "For", "example", "LINK", "parser", "has", "a", "bundle", "function", "NUMBER", "Good", "point", "NUMBER", "I", "guess", "I", "m", "looking", "for", "a", "flatten", "that", "takes", "NUMBER", "or", "more", "swagger", "file", "and", "merge", "them", "by", "ref", "or", "value", "NUMBER", "I", "m", "trying", "to", "avoid", "write", "the", "root", "one", "that", "ref", "s", "everything", "together", "NUMBER", "Awesome", "just", "what", "I", "was", "thinking", "NUMBER", "Hope", "to", "get", "to", "that", "shortly", "NUMBER", "Cmd", "tentatively", "call", "mixin", "NUMBER", "banged", "out", "a", "poc", "here", "LINK", "mixin", "NUMBER", "It", "needs", "to", "be", "massaged", "into", "a", "PR", "probably", "one", "for", "go", "swagger", "main", "NUMBER", "go", "as", "a", "cmd", "and", "another", "for", "go", "openapi", "analysis", "mixer", "NUMBER", "Will", "try", "to", "get", "to", "PRs", "later", "this", "week", "NUMBER", "Adds", "Makefile", "and", "scripts", "for", "the", "common", "development", "flow", "NUMBER", "After", "add", "use", "of", "gometalinter", "several", "linting", "issue", "were", "find", "and", "resolve", "as", "part", "of", "the", "fix", "NUMBER", "I", "m", "not", "NUMBER", "happy", "with", "the", "Makefile", "and", "scripts", "as", "some", "parts", "do", "not", "work", "as", "I", "would", "have", "expected", "NUMBER", "But", "with", "the", "number", "of", "linting", "items", "that", "I", "notice", "and", "resolve", "after", "trying", "to", "determine", "how", "gotmetalinter", "was", "be", "use", "on", "the", "project", "I", "figured", "it", "was", "best", "to", "submit", "the", "PR", "for", "feedback", "NUMBER", "Worst", "case", "I", "can", "revert", "any", "items", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "a", "NUMBER", "c", "NUMBER", "db", "NUMBER", "bbca", "NUMBER", "cebb", "NUMBER", "e", "NUMBER", "a", "NUMBER", "f", "NUMBER", "ad", "NUMBER", "ea", "NUMBER", "b", "NUMBER", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "height", "NUMBER", "width", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "scan", "meta", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "tZXRhLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "client", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "NsaWVudC", "NUMBER", "nbw", "NUMBER", "TAG", "\u00f8", "arrow_up", "scan", "responses", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "yZXNwb", "NUMBER", "zZXMuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "scan", "schema", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "hlbWEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "scan", "parameters", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "wYXJhbWV", "NUMBER", "ZXJzLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "types", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "R", "NUMBER", "cGVzLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "scan", "scanner", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "FubmVyLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "NUMBER", "and", "NUMBER", "more", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "more", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "dc", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "I", "be", "trying", "to", "figure", "out", "how", "to", "write", "and", "annotate", "a", "go", "swagger", "response", "struct", "that", "produces", "the", "following", "swagger", "output", "json", "fileResponse", "description", "OK", "schema", "type", "file", "However", "I", "be", "unable", "to", "figure", "out", "how", "to", "do", "this", "with", "go", "swagger", "response", "struct", "and", "annotations", "and", "the", "documentation", "doesn", "t", "provide", "any", "clarity", "on", "this", "specific", "use", "case", "NUMBER", "I", "end", "up", "with", "the", "following", "json", "fileResponse", "description", "OK", "schema", "type", "array", "items", "type", "integer", "format", "uint", "NUMBER", "go", "swagger", "specification", "I", "know", "this", "be", "obviously", "wrong", "but", "this", "was", "the", "closest", "I", "could", "approximate", "go", "OK", "swagger", "response", "photoByFilenameResponse", "type", "fileResponse", "struct", "In", "body", "File", "byte", "json", "body", "omitempty", "For", "the", "operation", "that", "be", "returning", "this", "response", "I", "ve", "also", "made", "sure", "to", "specify", "the", "MIME", "type", "go", "Produces", "image", "jpeg", "image", "png", "application", "octet", "stream", "Environment", "swagger", "version", "NUMBER", "go", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "Mac", "OS", "X", "NUMBER", "The", "only", "reference", "I", "ve", "find", "to", "strfmt", "be", "in", "this", "package", "LINK", "openapi", "strfmt", "However", "File", "not", "declared", "by", "package", "strfmt", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "c", "NUMBER", "b", "NUMBER", "f", "NUMBER", "e", "NUMBER", "a", "NUMBER", "ffa", "NUMBER", "c", "NUMBER", "df", "NUMBER", "f", "NUMBER", "ec", "NUMBER", "e", "NUMBER", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "TAG", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "support", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cHBvcnQuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "scan", "schema", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "hlbWEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "c", "NUMBER", "b", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "Creating", "a", "swagger", "spec", "with", "a", "custom", "type", "generates", "an", "invalid", "spec", "must", "validate", "one", "and", "only", "one", "schema", "oneOf", "must", "validate", "one", "and", "only", "one", "schema", "oneOf", "must", "validate", "one", "and", "only", "one", "schema", "oneOf", "paths", "NUMBER", "activity", "NUMBER", "json", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "ref", "in", "body", "be", "a", "forbidden", "property", "paths", "NUMBER", "activity", "NUMBER", "json", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "in", "in", "body", "should", "be", "one", "of", "header", "paths", "NUMBER", "activity", "NUMBER", "json", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "type", "in", "body", "be", "required", "In", "my", "case", "the", "custom", "type", "be", "a", "simpler", "wrapper", "around", "time", "NUMBER", "Time", "which", "add", "custom", "marshaler", "unmarshaler", "functionality", "NUMBER", "Is", "there", "a", "way", "to", "use", "custom", "types", "in", "parameters", "If", "additional", "information", "be", "needed", "I", "can", "produce", "an", "MRE", "NUMBER", "Have", "you", "seen", "the", "strfmt", "types", "I", "had", "not", "NUMBER", "Setting", "my", "custom", "type", "to", "a", "strfmt", "do", "seem", "to", "solve", "my", "problem", "NUMBER", "Thank", "you", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "a", "NUMBER", "d", "NUMBER", "bfae", "NUMBER", "f", "NUMBER", "b", "NUMBER", "f", "NUMBER", "a", "NUMBER", "b", "NUMBER", "ad", "NUMBER", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "Generated", "Go", "server", "use", "with", "context", "fail", "to", "compile", "due", "to", "mix", "use", "of", "context", "and", "x", "net", "context", "Environment", "swagger", "version", "dev", "HEAD", "as", "of", "today", "go", "version", "NUMBER", "OS", "OSX", "Fix", "for", "me", "was", "to", "update", "the", "following", "template", "did", "client", "one", "as", "well", "but", "did", "not", "test", "and", "go", "generate", "bindata", "NUMBER", "go", "again", "NUMBER", "generator", "template", "client", "parameter", "NUMBER", "gotmpl", "generator", "template", "server", "configureapi", "NUMBER", "gotmpl", "generator", "template", "server", "operation", "NUMBER", "gotmpl", "context", "golang", "NUMBER", "org", "x", "net", "context", "context", "context", "Similar", "issue", "in", "builder", "NUMBER", "gotmpl", "there", "be", "no", "context", "import", "when", "format", "generate", "code", "goimports", "resolve", "context", "import", "as", "context", "not", "golang", "NUMBER", "org", "x", "net", "context", "so", "there", "be", "mix", "usage", "of", "context", "again", "i", "worked", "around", "it", "by", "use", "gofmt", "right", "after", "generating", "gofmt", "w", "r", "context", "golang", "NUMBER", "org", "x", "net", "context", "server", "operations", "my_api", "NUMBER", "go", "We", "should", "probably", "fix", "this", "by", "use", "stdlib", "context", "in", "all", "places", "since", "Go", "NUMBER", "and", "NUMBER", "be", "out", "for", "some", "time", "NUMBER", "In", "retrospect", "given", "that", "one", "can", "get", "the", "http", "NUMBER", "Request", "from", "params", "and", "one", "can", "get", "the", "context", "from", "that", "by", "calling", "req", "NUMBER", "Context", "perhaps", "the", "go", "swagger", "generate", "server", "no", "longer", "needs", "the", "with", "context", "flag", "Thanks", "casualjim", "NUMBER", "It", "appears", "this", "be", "a", "non", "issue", "and", "can", "be", "close", "NUMBER", "BTW", "the", "docs", "on", "goswagger", "NUMBER", "io", "be", "a", "big", "help", "thank", "you", "NUMBER", "Appreciate", "the", "design", "rationale", "NUMBER", "Emphasizing", "this", "one", "point", "would", "have", "given", "me", "a", "much", "smoother", "start", "you", "MUST", "generate", "into", "a", "package", "under", "GOPATH", "src", "or", "bad", "things", "happen", "I", "was", "get", "weird", "import", "pkg", "paths", "NUMBER", "By", "the", "looks", "of", "it", "the", "spots", "that", "use", "GOPATH", "in", "go", "swagger", "may", "need", "the", "NUMBER", "HOME", "go", "defaulting", "when", "GOPATH", "be", "empty", "NUMBER", "Problem", "statement", "Is", "it", "possible", "to", "write", "own", "validation", "for", "custom", "types", "If", "it", "be", "can", "someone", "give", "me", "example", "Environment", "swagger", "version", "NUMBER", "For", "example", "NUMBER", "There", "be", "bookstore", "with", "info", "about", "books", "author", "title", "price", "NUMBER", "And", "we", "want", "that", "books", "from", "some", "author", "will", "not", "cost", "more", "the", "some", "price", "NUMBER", "So", "I", "want", "write", "function", "ValidateBookCustom", "like", "if", "book", "NUMBER", "author", "Some", "author", "if", "book", "NUMBER", "price", "NUMBER", "return", "false", "else", "return", "true", "And", "I", "want", "to", "use", "this", "function", "NUMBER", "Problem", "statement", "Just", "like", "the", "untyped", "dynamic", "server", "example", "in", "go", "swagger", "be", "there", "an", "example", "for", "a", "dynamic", "client", "NUMBER", "Can", "a", "REST", "client", "be", "created", "at", "runtime", "by", "loading", "a", "swagger", "spec", "file", "without", "going", "through", "a", "code", "generation", "and", "compilation", "Thanks", "NUMBER", "Thanks", "for", "taking", "the", "time", "to", "ask", "NUMBER", "If", "I", "have", "the", "swagger", "spec", "file", "for", "an", "exist", "NUMBER", "party", "REST", "service", "for", "their", "application", "a", "dynamic", "client", "would", "allow", "me", "to", "load", "the", "swagger", "spec", "file", "and", "provide", "the", "ability", "to", "formulate", "request", "and", "parse", "responses", "based", "on", "the", "loaded", "spec", "file", "NUMBER", "For", "e", "NUMBER", "g", "NUMBER", "there", "be", "REST", "client", "package", "for", "go", "like", "go", "resty", "that", "provide", "a", "nice", "interface", "to", "interact", "with", "a", "REST", "server", "but", "go", "resty", "doesn", "t", "comprehend", "swagger", "specs", "NUMBER", "Adding", "a", "bit", "more", "context", "can", "I", "get", "the", "rest", "client", "functionality", "without", "first", "generating", "a", "client", "use", "go", "swagger", "and", "then", "compile", "it", "back", "into", "the", "code", "NUMBER", "Can", "this", "be", "do", "dynamically", "like", "the", "dynamic", "server", "example", "NUMBER", "Problem", "statement", "i", "m", "finding", "it", "hard", "to", "understand", "the", "examples", "NUMBER", "i", "ve", "looked", "at", "todo", "list", "and", "the", "stream", "server", "NUMBER", "i", "m", "still", "having", "to", "do", "a", "lot", "of", "guesswork", "to", "figure", "out", "how", "to", "write", "my", "own", "API", "handlers", "NUMBER", "what", "i", "think", "would", "help", "be", "more", "examples", "of", "returns", "where", "the", "API", "returns", "something", "nontrivial", "and", "app", "specific", "and", "more", "comments", "in", "the", "code", "NUMBER", "be", "it", "really", "necessary", "to", "have", "such", "an", "intricate", "mechanism", "for", "returning", "values", "from", "an", "API", "add", "to", "my", "confusion", "be", "the", "fact", "that", "i", "can", "t", "get", "the", "examples", "to", "build", "NUMBER", "be", "the", "instructions", "broken", "or", "be", "i", "doing", "something", "wrong", "casualjim", "thanks", "for", "your", "response", "NUMBER", "i", "tried", "the", "instructions", "there", "too", "NUMBER", "was", "it", "your", "intention", "that", "this", "project", "be", "an", "illustrative", "model", "of", "how", "to", "use", "go", "swagger", "if", "so", "my", "feedback", "be", "that", "the", "instructions", "in", "the", "build", "section", "do", "not", "produce", "the", "NUMBER", "kvstored", "binary", "referred", "to", "in", "the", "run", "section", "NUMBER", "i", "d", "also", "suggest", "add", "some", "examples", "of", "proper", "usage", "of", "both", "the", "client", "and", "server", "beyond", "the", "help", "output", "NUMBER", "to", "a", "newbie", "it", "be", "still", "far", "from", "obvious", "how", "to", "interface", "with", "go", "swagger", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "a", "NUMBER", "d", "NUMBER", "dbd", "NUMBER", "ac", "NUMBER", "fabb", "NUMBER", "e", "NUMBER", "c", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "width", "NUMBER", "height", "NUMBER", "src", "pr", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "scan", "schema", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "hlbWEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_up", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "scan", "scanner", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "FubmVyLmdv", "NUMBER", "TAG", "NUMBER", "arrow_up", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "a", "NUMBER", "c", "NUMBER", "beecc", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Nested", "Packages", "Generating", "Spec", "File", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Mac", "OSX", "I", "be", "trying", "to", "find", "a", "way", "to", "generate", "a", "spec", "file", "with", "the", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "command", "that", "will", "detect", "the", "nested", "package", "in", "my", "project", "structure", "NUMBER", "I", "have", "internal", "business", "logic", "that", "I", "want", "to", "keep", "separated", "but", "I", "have", "no", "way", "to", "generate", "the", "swagger", "spec", "file", "for", "those", "package", "NUMBER", "Structure", "would", "look", "similar", "to", "this", "NUMBER", "cmd", "main", "NUMBER", "go", "internal", "blah", "NUMBER", "go", "blahblah", "NUMBER", "go", "blahblahblah", "NUMBER", "go", "TAG", "Is", "there", "a", "way", "to", "do", "something", "similar", "to", "the", "go", "tool", "ie", "NUMBER", "go", "test", "NUMBER", "NUMBER", "I", "casualjim", "so", "if", "I", "have", "a", "blank", "main", "NUMBER", "go", "file", "that", "imports", "those", "internal", "package", "it", "will", "generate", "that", "spec", "file", "Cheers", "casualjim", "thank", "you", "so", "much", "Problem", "statement", "I", "want", "to", "create", "operation", "with", "string", "parameter", "in", "body", "NUMBER", "Goswagger", "fail", "while", "generating", "with", "runtime", "error", "NUMBER", "But", "if", "i", "change", "body", "to", "query", "it", "works", "NUMBER", "How", "can", "I", "send", "my", "parameter", "in", "body", "with", "type", "string", "Swagger", "specification", "It", "falls", "with", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "post", "description", "post", "func", "operationId", "postfunc", "parameters", "name", "myparam", "in", "body", "type", "string", "And", "it", "works", "post", "description", "post", "func", "operationId", "postfunc", "parameters", "name", "myparam", "in", "query", "type", "string", "Steps", "to", "reproduce", "swagger", "generate", "server", "A", "server", "swagger", "f", "NUMBER", "swagger", "NUMBER", "yml", "Environment", "swagger", "version", "NUMBER", "OS", "Ubuntu", "NUMBER", "post", "description", "post", "func", "operationId", "postfunc", "schema", "parameters", "name", "myparam", "in", "body", "type", "string", "Can", "you", "try", "add", "the", "schema", "LINK", "fix", "field", "NUMBER", "Thanks", "I", "fix", "problem", "with", "schema", "post", "description", "post", "func", "operationId", "postfunc", "parameters", "name", "myparam", "in", "body", "required", "true", "schema", "type", "string", "But", "I", "think", "Goswagger", "should", "not", "fail", "with", "panic", "while", "generating", "NUMBER", "It", "must", "be", "some", "error", "message", "about", "wrong", "parameters", "not", "runtime", "error", "NUMBER", "I", "agree", "better", "the", "error", "handle", "be", "always", "beneficial", "NUMBER", "Problem", "statement", "Spec", "support", "description", "on", "responses", "Swagger", "specification", "SPEC", "NUMBER", "Steps", "to", "reproduce", "go", "ListUsers", "swagger", "route", "GET", "user", "user", "listUsers", "List", "all", "the", "users", "Schemes", "https", "Produces", "application", "json", "Responses", "NUMBER", "listResponse", "NUMBER", "response", "NUMBER", "description", "Unauthorized", "Expected", "JSON", "json", "user", "get", "description", "List", "all", "the", "users", "schemes", "https", "tags", "user", "operationId", "listUsers", "responses", "NUMBER", "ref", "responses", "listResponse", "NUMBER", "ref", "responses", "response", "NUMBER", "description", "Unauthorized", "swagger", "ui", "LINK", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "ee", "NUMBER", "NUMBER", "b", "NUMBER", "d", "NUMBER", "png", "Currently", "there", "be", "no", "support", "for", "a", "description", "tag", "on", "response", "NUMBER", "Is", "there", "any", "other", "way", "to", "enter", "a", "description", "If", "I", "set", "a", "text", "then", "it", "will", "set", "be", "as", "a", "ref", "to", "a", "model", "which", "do", "no", "exists", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Windows", "NUMBER", "Hi", "I", "can", "t", "reopen", "but", "that", "be", "not", "the", "case", "GetUsername", "swagger", "route", "GET", "profile", "username", "user", "getUsername", "Get", "the", "home", "page", "data", "NUMBER", "Responses", "NUMBER", "NUMBER", "description", "StatusExpectationFailed", "Generates", "profile", "username", "get", "tags", "user", "summary", "Get", "the", "home", "page", "data", "NUMBER", "operationId", "getUsername", "responses", "NUMBER", "NUMBER", "ref", "responses", "go", "version", "NUMBER", "OS", "Windows", "NUMBER", "Can", "confirm", "this", "NUMBER", "It", "be", "not", "possible", "to", "set", "a", "response", "description", "without", "body", "NUMBER", "Any", "progress", "on", "this", "It", "seems", "like", "there", "be", "no", "way", "to", "notate", "a", "NUMBER", "no", "content", "response", "as", "describe", "in", "the", "swagger", "NUMBER", "spec", "LINK", "NUMBER", "describing", "responses", "We", "tried", "to", "work", "around", "this", "by", "sending", "a", "body", "with", "the", "NUMBER", "but", "the", "go", "std", "http", "lib", "will", "not", "let", "you", "do", "that", "Failed", "to", "write", "response", "http", "request", "method", "or", "response", "status", "code", "do", "not", "allow", "body", "NUMBER", "So", "there", "really", "needs", "to", "be", "a", "way", "to", "specify", "in", "the", "swagger", "doc", "that", "a", "NUMBER", "response", "has", "no", "body", "NUMBER", "The", "following", "produce", "an", "invalid", "spec", "Spec", "Error", "NUMBER", "description", "in", "body", "be", "required", "NUMBER", "description", "foo", "object", "has", "no", "key", "Problem", "statement", "the", "todo", "list", "example", "should", "have", "its", "own", "instructions", "NUMBER", "there", "be", "a", "README", "NUMBER", "md", "in", "the", "stream", "server", "example", "but", "it", "be", "not", "clear", "that", "it", "be", "supposed", "to", "apply", "to", "this", "example", "as", "well", "NUMBER", "and", "i", "could", "not", "get", "that", "example", "to", "work", "either", "NUMBER", "really", "it", "d", "be", "nice", "to", "have", "a", "simple", "makefile", "that", "has", "target", "for", "build", "test", "and", "clean", "NUMBER", "this", "would", "be", "useful", "for", "doing", "CI", "on", "the", "examples", "as", "well", "if", "you", "re", "doing", "that", "NUMBER", "I", "actually", "had", "the", "same", "thoughts", "regard", "a", "Makefile", "NUMBER", "I", "had", "start", "on", "one", "based", "on", "one", "I", "use", "across", "projects", "that", "support", "run", "locally", "as", "well", "as", "performing", "all", "the", "tasks", "within", "a", "Docker", "container", "NUMBER", "casualjim", "Would", "you", "be", "interested", "in", "having", "such", "a", "Makefile", "Following", "swagger", "definition", "LINK", "when", "run", "with", "swagger", "generate", "server", "NUMBER", "and", "finally", "compile", "the", "code", "I", "get", "following", "error", "message", "restapi", "operations", "post_xxx_add", "NUMBER", "go", "NUMBER", "undefined", "ParametersTest", "Why", "be", "the", "ParameterTest", "object", "not", "created", "The", "specified", "swagger", "definition", "should", "be", "valid", "as", "per", "LINK", "I", "run", "into", "this", "bug", "as", "well", "NUMBER", "Any", "idea", "where", "in", "the", "code", "to", "look", "If", "I", "could", "get", "an", "indication", "on", "where", "in", "the", "code", "base", "to", "start", "looking", "I", "d", "be", "happy", "to", "help", "debug", "it", "NUMBER", "edit", "it", "seems", "to", "only", "affect", "generation", "of", "post", "put", "NUMBER", "E", "NUMBER", "g", "NUMBER", "this", "with", "nested", "properties", "but", "use", "GET", "works", "LINK", "casualjim", "worked", "perfectly", "thanks", "Problem", "statement", "The", "Node", "version", "of", "swagger", "also", "links", "to", "swagger", "cause", "the", "brew", "install", "go", "swagger", "to", "not", "correctly", "install", "the", "commandline", "Swagger", "specification", "Steps", "to", "reproduce", "Environment", "swagger", "version", "NUMBER", "OS", "OSX", "Sierra", "Problem", "statement", "Generated", "client", "or", "server", "models", "have", "incorrect", "JSON", "tags", "of", "field", "NUMBER", "Generator", "uses", "x", "go", "name", "field", "to", "generate", "JSON", "tag", "instead", "of", "JSON", "field", "name", "NUMBER", "I", "have", "following", "model", "to", "generate", "spec", "User", "user", "model", "swagger", "model", "type", "User", "struct", "ID", "string", "json", "id", "FirstName", "string", "json", "first_name", "LastName", "string", "json", "last_name", "User", "type", "min", "NUMBER", "max", "NUMBER", "Type", "int", "json", "user_type", "Then", "after", "swagger", "spec", "has", "be", "generate", "I", "generate", "client", "or", "server", "use", "that", "spec", "NUMBER", "As", "result", "I", "get", "incorrect", "JSON", "tags", "of", "field", "in", "model", "NUMBER", "User", "User", "user", "model", "swagger", "model", "User", "type", "User", "struct", "first", "name", "FirstName", "string", "json", "FirstName", "omitempty", "ID", "ID", "string", "json", "ID", "omitempty", "last", "name", "LastName", "string", "json", "LastName", "omitempty", "User", "type", "Maximum", "NUMBER", "Minimum", "NUMBER", "Type", "int", "NUMBER", "json", "Type", "omitempty", "I", "get", "json", "LastName", "NUMBER", "instead", "of", "json", "last_name", "NUMBER", "for", "LastName", "field", "or", "for", "example", "json", "Type", "NUMBER", "instead", "of", "json", "user_type", "NUMBER", "for", "Type", "field", "and", "so", "on", "for", "other", "field", "NUMBER", "And", "also", "I", "get", "incorrect", "validation", "code", "for", "Type", "func", "m", "User", "validateType", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "swag", "NUMBER", "IsZero", "m", "NUMBER", "UserType", "not", "required", "return", "nil", "if", "err", "validate", "NUMBER", "MinimumInt", "user_type", "body", "int", "NUMBER", "m", "NUMBER", "UserType", "NUMBER", "false", "err", "nil", "return", "err", "if", "err", "validate", "NUMBER", "MaximumInt", "user_type", "body", "int", "NUMBER", "m", "NUMBER", "UserType", "NUMBER", "false", "err", "nil", "return", "err", "return", "nil", "I", "get", "if", "swag", "NUMBER", "IsZero", "m", "NUMBER", "UserType", "instead", "of", "if", "swag", "NUMBER", "IsZero", "m", "NUMBER", "Type", "Steps", "to", "reproduce", "NUMBER", "Create", "model", "such", "as", "User", "user", "model", "swagger", "model", "type", "User", "struct", "ID", "string", "json", "id", "FirstName", "string", "json", "first_name", "LastName", "string", "json", "last_name", "User", "type", "min", "NUMBER", "max", "NUMBER", "Type", "int", "json", "user_type", "NUMBER", "Run", "spec", "generating", "swagger", "generate", "spec", "m", "b", "NUMBER", "TAG", "swagger", "NUMBER", "json", "NUMBER", "Run", "client", "generating", "swagger", "generate", "client", "f", "NUMBER", "swagger", "NUMBER", "json", "t", "NUMBER", "output", "Environment", "swagger", "version", "NUMBER", "NUMBER", "go", "version", "NUMBER", "OS", "Ubuntu", "Linux", "NUMBER", "Windows", "NUMBER", "x", "NUMBER", "And", "also", "I", "find", "that", "some", "structures", "such", "as", "DataItems", "NUMBER", "data", "items", "NUMBER", "swagger", "model", "DataItems", "NUMBER", "type", "DataItems", "NUMBER", "struct", "models", "NUMBER", "Media", "distance", "Distance", "float", "NUMBER", "json", "distance", "omitempty", "in", "code", "generate", "with", "wrong", "call", "UnmarshalJSON", "unmarshals", "this", "object", "from", "a", "JSON", "structure", "func", "o", "DataItems", "NUMBER", "UnmarshalJSON", "raw", "byte", "error", "var", "aO", "NUMBER", "models", "NUMBER", "Media", "if", "err", "swag", "NUMBER", "ReadJSON", "raw", "aO", "NUMBER", "err", "nil", "return", "err", "o", "NUMBER", "models", "NUMBER", "Media", "aO", "NUMBER", "TAG", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "bb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "e", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "NUMBER", "fda", "NUMBER", "fc", "NUMBER", "f", "NUMBER", "c", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "bb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "e", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "NUMBER", "fda", "NUMBER", "fc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "db", "NUMBER", "ad", "NUMBER", "fc", "NUMBER", "fc", "NUMBER", "efa", "NUMBER", "eded", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "arrow_up", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "bb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "e", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "NUMBER", "fda", "NUMBER", "fc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "db", "NUMBER", "ad", "NUMBER", "fc", "NUMBER", "fc", "NUMBER", "efa", "NUMBER", "eded", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "bb", "NUMBER", "f", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "bb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "e", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "NUMBER", "fda", "NUMBER", "fc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "db", "NUMBER", "ad", "NUMBER", "fc", "NUMBER", "fc", "NUMBER", "efa", "NUMBER", "eded", "NUMBER", "src", "pr", "el", "footer", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Looks", "like", "the", "tag", "NUMBER", "be", "no", "longer", "available", "at", "DockerHub", "should", "I", "change", "it", "to", "NUMBER", "so", "that", "the", "circleci", "test", "will", "pass", "Problem", "statement", "When", "I", "m", "trying", "to", "add", "a", "new", "item", "with", "the", "todo", "list", "client", "from", "the", "examples", "section", "go", "breaks", "up", "panic", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "signal", "SIGSEGV", "segmentation", "violation", "code", "NUMBER", "x", "NUMBER", "addr", "NUMBER", "x", "NUMBER", "pc", "NUMBER", "x", "NUMBER", "d", "NUMBER", "goroutine", "NUMBER", "run", "github", "NUMBER", "com", "go", "openapi", "runtime", "client", "NUMBER", "request", "NUMBER", "BuildHTTP", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "dc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "go", "src", "github", "NUMBER", "com", "go", "openapi", "runtime", "client", "request", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "runtime", "client", "NUMBER", "Runtime", "NUMBER", "Submit", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "fc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "go", "src", "github", "NUMBER", "com", "go", "openapi", "runtime", "client", "runtime", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "example", "NUMBER", "com", "swagger", "NUMBER", "client", "todos", "NUMBER", "Client", "NUMBER", "AddOne", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "dc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "go", "src", "example", "NUMBER", "com", "swagger", "NUMBER", "client", "todos", "todos_client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "fa", "main", "NUMBER", "main", "Users", "go", "src", "example", "NUMBER", "com", "swaggercimpl", "client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "Swagger", "specification", "LINK", "swagger", "go", "swagger", "master", "examples", "todo", "list", "swagger", "NUMBER", "yml", "Steps", "to", "reproduce", "func", "main", "create", "the", "transport", "transport", "httptransport", "NUMBER", "New", "NUMBER", "nil", "create", "the", "API", "client", "with", "the", "transport", "client", "apiclient", "NUMBER", "New", "transport", "strfmt", "NUMBER", "Default", "description", "TEST", "var", "item", "models", "NUMBER", "Item", "item", "new", "models", "NUMBER", "Item", "item", "NUMBER", "Description", "description", "params", "todos", "NUMBER", "NewAddOneParams", "params", "NUMBER", "Body", "item", "make", "the", "request", "to", "get", "all", "items", "resp", "err", "client", "NUMBER", "Todos", "NUMBER", "AddOne", "params", "if", "err", "nil", "log", "NUMBER", "Fatal", "err", "Environment", "swagger", "version", "dev", "master", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "OS", "OS", "X", "NUMBER", "I", "have", "same", "problem", "NUMBER", "I", "tried", "to", "write", "client", "to", "todo", "list", "from", "example", "but", "I", "get", "same", "error", "NUMBER", "package", "main", "import", "log", "os", "github", "NUMBER", "com", "go", "openapi", "strfmt", "httptransport", "github", "NUMBER", "com", "go", "openapi", "runtime", "client", "apiclient", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "examples", "todo", "list", "client", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "examples", "todo", "list", "client", "todos", "func", "main", "create", "the", "API", "client", "client", "apiclient", "NUMBER", "New", "httptransport", "NUMBER", "New", "nil", "strfmt", "NUMBER", "Default", "make", "the", "authenticated", "request", "to", "get", "all", "items", "apiKeyHeaderAuth", "httptransport", "NUMBER", "APIKeyAuth", "X", "API", "TOKEN", "header", "os", "NUMBER", "Getenv", "API_KEY", "_", "err", "client", "NUMBER", "Todos", "NUMBER", "AddOne", "todos", "NUMBER", "AddOneParams", "apiKeyHeaderAuth", "log", "NUMBER", "Fatal", "err", "Can", "someone", "explain", "how", "to", "fix", "this", "problem", "Problem", "statement", "Is", "it", "possible", "to", "temporarily", "disable", "OAUTH", "NUMBER", "Currently", "I", "m", "get", "a", "code", "NUMBER", "message", "unauthenticated", "for", "invalid", "credentials", "But", "I", "would", "like", "to", "implement", "OAUTH", "later", "NUMBER", "I", "m", "get", "the", "following", "error", "when", "I", "run", "swagger", "generate", "client", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "grouping", "operations", "into", "package", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "meta", "data", "and", "facades", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "application", "TabbDrink", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "TabbDrink", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "client", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "tabb_drink_client", "NUMBER", "go", "in", "client", "as", "facade", "Generation", "completed", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "github", "NUMBER", "com", "go", "openapi", "runtime", "golang", "NUMBER", "org", "x", "net", "context", "golang", "NUMBER", "org", "x", "net", "context", "ctxhttp", "You", "can", "get", "these", "now", "with", "go", "get", "u", "f", "NUMBER", "NUMBER", "When", "I", "run", "go", "get", "u", "f", "NUMBER", "NUMBER", "it", "takes", "a", "while", "no", "error", "NUMBER", "Then", "I", "run", "the", "first", "command", "again", "and", "get", "the", "same", "error", "NUMBER", "Swagger", "specification", "consumes", "application", "tabbdrink", "NUMBER", "com", "NUMBER", "v", "NUMBER", "json", "definitions", "info", "description", "TabbDrink", "API", "title", "TabbDrink", "API", "version", "NUMBER", "paths", "produces", "application", "tabbdrink", "NUMBER", "com", "NUMBER", "v", "NUMBER", "json", "schemes", "http", "swagger", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Generate", "a", "swagger", "spec", "swagger", "init", "spec", "title", "TabbDrink", "API", "description", "TabbDrink", "API", "version", "NUMBER", "scheme", "http", "consumes", "application", "tabbdrink", "NUMBER", "com", "NUMBER", "v", "NUMBER", "json", "produces", "application", "tabbdrink", "NUMBER", "com", "NUMBER", "v", "NUMBER", "json", "NUMBER", "Run", "swagger", "generate", "client", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "osx", "Problem", "statement", "We", "can", "define", "that", "some", "property", "has", "extend", "string", "format", "for", "example", "ipv", "NUMBER", "NUMBER", "Then", "go", "swagger", "generate", "this", "property", "with", "special", "type", "for", "ipv", "NUMBER", "it", "be", "strfmt", "NUMBER", "IPv", "NUMBER", "NUMBER", "But", "generate", "code", "don", "t", "do", "validation", "for", "this", "type", "NUMBER", "Example", "swagger", "NUMBER", "yaml", "definitions", "ethernet", "type", "object", "required", "ip", "properties", "id", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "ip", "type", "string", "format", "ipv", "NUMBER", "We", "get", "file", "ethernet", "NUMBER", "go", "with", "code", "NUMBER", "type", "Ethernet", "struct", "id", "Read", "Only", "true", "ID", "int", "NUMBER", "json", "id", "omitempty", "ip", "Required", "true", "IP", "strfmt", "NUMBER", "IPv", "NUMBER", "json", "ip", "NUMBER", "func", "m", "Ethernet", "validateIP", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Required", "ip", "body", "m", "NUMBER", "IP", "err", "nil", "return", "err", "return", "nil", "But", "why", "it", "be", "not", "generate", "like", "this", "func", "m", "Ethernet", "validateIP", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Required", "ip", "body", "m", "NUMBER", "IP", "err", "nil", "return", "err", "check", "that", "we", "get", "string", "in", "right", "format", "if", "err", "validate", "NUMBER", "FormatOf", "ip", "body", "ipv", "NUMBER", "m", "NUMBER", "IP", "NUMBER", "String", "formats", "err", "nil", "return", "err", "return", "nil", "Environment", "swagger", "version", "NUMBER", "Did", "you", "ever", "work", "out", "what", "was", "going", "wrong", "here", "Hi", "I", "m", "use", "go", "swagger", "to", "generate", "my", "Swagger", "docs", "from", "code", "and", "I", "came", "across", "a", "problem", "with", "a", "given", "parameter", "NUMBER", "When", "I", "annotate", "a", "given", "struct", "that", "has", "a", "map", "KeyType", "OtherKeyType", "with", "swagger", "parameters", "it", "returns", "items", "doesn", "t", "support", "maps", "NUMBER", "I", "can", "tell", "the", "current", "version", "may", "not", "support", "map", "s", "in", "the", "parameter", "delcaration", "but", "I", "m", "write", "to", "i", "know", "if", "this", "feature", "may", "be", "inline", "for", "release", "ii", "know", "if", "there", "be", "any", "workaround", "for", "declaring", "map", "s", "in", "parameter", "structs", "NUMBER", "Thanks", "in", "advance", "and", "congrats", "for", "the", "great", "work", "Renato", "Vieira", "go", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "Ubuntu", "NUMBER", "Can", "you", "provide", "examples", "Previously", "I", "have", "file", "issue", "under", "robbert", "NUMBER", "but", "work", "policy", "for", "open", "source", "contributions", "be", "finally", "starting", "to", "take", "shape", "so", "I", "now", "be", "required", "to", "use", "a", "corporate", "account", "NUMBER", "Problem", "statement", "When", "a", "definition", "has", "a", "property", "N", "if", "N", "be", "a", "number", "and", "be", "not", "required", "its", "generate", "model", "has", "the", "structflag", "omitempty", "for", "N", "NUMBER", "This", "means", "that", "when", "N", "has", "be", "set", "to", "NUMBER", "the", "generate", "JSON", "omits", "N", "despite", "it", "be", "validly", "set", "to", "NUMBER", "I", "would", "still", "like", "to", "allow", "this", "variable", "to", "be", "unset", "by", "setting", "it", "to", "null", "for", "example", "NUMBER", "This", "will", "also", "apply", "for", "returning", "objects", "that", "return", "false", "and", "so", "on", "NUMBER", "The", "omitempty", "option", "specifies", "that", "the", "field", "should", "be", "omitted", "from", "the", "encoding", "if", "the", "field", "has", "an", "empty", "value", "defined", "as", "false", "NUMBER", "a", "nil", "pointer", "a", "nil", "interface", "value", "and", "any", "empty", "array", "slice", "map", "or", "string", "NUMBER", "From", "LINK", "Marshal", "A", "workaround", "for", "this", "be", "to", "use", "x", "nullable", "on", "my", "properties", "but", "I", "feel", "like", "this", "shouldn", "t", "be", "required", "to", "be", "able", "to", "send", "a", "property", "whose", "value", "happens", "to", "be", "the", "default", "value", "for", "that", "type", "NUMBER", "I", "also", "understand", "why", "this", "be", "do", "and", "it", "do", "make", "sense", "NUMBER", "Swagger", "specification", "LINK", "swagger", "number", "ommited", "bug", "blob", "master", "swagger", "NUMBER", "yaml", "Steps", "to", "reproduce", "NUMBER", "Generate", "server", "with", "spec", "LINK", "swagger", "number", "ommited", "bug", "blob", "master", "swagger", "NUMBER", "yaml", "NUMBER", "Attempt", "to", "send", "error", "with", "a", "code", "of", "NUMBER", "The", "error", "be", "ommited", "from", "the", "response", "because", "of", "omitempty", "as", "a", "struct", "tag", "LINK", "swagger", "number", "ommited", "bug", "blob", "master", "models", "error", "NUMBER", "go", "L", "NUMBER", "Environment", "swagger", "version", "tip", "go", "version", "NUMBER", "linux", "amd", "NUMBER", "OS", "That", "be", "what", "I", "be", "currently", "doing", "but", "for", "those", "new", "to", "go", "swagger", "it", "be", "not", "apparant", "that", "there", "be", "edge", "cases", "where", "your", "model", "won", "t", "properly", "serialize", "if", "you", "don", "t", "use", "x", "nullable", "to", "annotate", "parameters", "NUMBER", "this", "issue", "be", "partially", "file", "so", "that", "people", "run", "into", "the", "issue", "where", "your", "model", "isn", "t", "showing", "up", "correctly", "on", "the", "client", "can", "find", "somthing", "useful", "Please", "see", "my", "swagger", "Here", "LINK", "Trying", "to", "create", "client", "with", "swagger", "generate", "client", "f", "sw", "NUMBER", "json", "A", "nmdb_client", "Issue", "Circular", "dependencies", "seem", "to", "be", "freezing", "swagger", "The", "JSON", "pass", "validation", "against", "NUMBER", "schema", "NUMBER", "This", "problem", "also", "occur", "with", "swagger", "ui", "NUMBER", "If", "I", "remove", "the", "circular", "dependencies", "it", "loads", "fine", "NUMBER", "Environment", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "OS", "OSX", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "c", "NUMBER", "cee", "NUMBER", "e", "NUMBER", "d", "NUMBER", "dca", "NUMBER", "ef", "NUMBER", "ce", "NUMBER", "src", "pr", "el", "desc", "will", "not", "change", "coverage", "NUMBER", "The", "diff", "coverage", "be", "n", "a", "NUMBER", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "c", "NUMBER", "bbd", "NUMBER", "efd", "LINK", "swagger", "go", "swagger", "compare", "c", "NUMBER", "cee", "NUMBER", "e", "NUMBER", "d", "NUMBER", "dca", "NUMBER", "ef", "NUMBER", "ce", "NUMBER", "bbd", "NUMBER", "efd", "NUMBER", "cc", "NUMBER", "d", "NUMBER", "a", "NUMBER", "c", "NUMBER", "fdfc", "NUMBER", "e", "NUMBER", "a", "NUMBER", "src", "pr", "el", "footer", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Is", "it", "possible", "to", "read", "the", "request", "body", "in", "either", "the", "setupMiddleware", "or", "setupGlobalMiddleware", "function", "We", "be", "trying", "to", "validate", "that", "a", "request", "body", "contains", "correct", "info", "and", "we", "wanted", "to", "check", "it", "in", "the", "middleware", "NUMBER", "When", "we", "stick", "the", "following", "into", "the", "handler", "function", "of", "either", "setup", "middleware", "function", "we", "always", "get", "an", "empty", "body", "NUMBER", "The", "body", "be", "always", "empty", "even", "though", "the", "POST", "request", "do", "have", "a", "body", "NUMBER", "var", "val", "byte", "i", "err", "r", "NUMBER", "Body", "NUMBER", "Read", "val", "r", "NUMBER", "Body", "NUMBER", "Close", "if", "err", "nil", "log", "NUMBER", "Print", "err", "else", "log", "NUMBER", "Println", "i", "log", "NUMBER", "Println", "string", "val", "Thanks", "for", "the", "info", "NUMBER", "We", "were", "able", "to", "get", "this", "work", "NUMBER", "Problem", "statement", "I", "have", "a", "question", "how", "can", "I", "get", "enums", "for", "a", "type", "to", "show", "up", "in", "a", "swagger", "spec", "Swagger", "specification", "Swagger", "specification", "be", "generate", "from", "enums", "NUMBER", "go", "LINK", "enums", "question", "blob", "master", "enums", "NUMBER", "go", "Steps", "to", "reproduce", "swagger", "generate", "spec", "o", "swagger", "NUMBER", "json", "The", "generate", "spec", "LINK", "enums", "question", "blob", "master", "swagger", "NUMBER", "json", "has", "no", "enum", "values", "listed", "for", "ItemType", "NUMBER", "What", "I", "want", "be", "LINK", "enums", "question", "blob", "master", "want_swagger", "NUMBER", "json", "Environment", "swagger", "version", "LINK", "swagger", "go", "swagger", "master", "branch", "go", "version", "NUMBER", "OS", "osx", "this", "be", "fix", "for", "issue", "NUMBER", "Security", "in", "swagger", "meta", "nothing", "has", "be", "change", "there", "except", "I", "add", "this", "to", "meta", "SecurityDefinitions", "in", "swagger", "meta", "new", "parser", "for", "securityDefinitions", "accepts", "following", "documentation", "update", "required", "SecureDefinitions", "api_key", "type", "apiKey", "name", "KEY", "in", "header", "Now", "generates", "the", "following", "securityDefinitions", "api_key", "type", "apiKey", "name", "UHUB_KEY", "in", "header", "will", "do", "tomorrow", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "dbac", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "ad", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "scan", "responses", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "dbac", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "ad", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ace", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "fef", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "yZXNwb", "NUMBER", "zZXMuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "white_check_mark", "scan", "routes", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "dbac", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "ad", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ace", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "fef", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "yb", "NUMBER", "V", "NUMBER", "ZXMuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "white_check_mark", "scan", "meta", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "dbac", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "ad", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ace", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "fef", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "tZXRhLmdv", "NUMBER", "TAG", "NUMBER", "white_check_mark", "scan", "path", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "dbac", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "ad", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ace", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "fef", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "wYXRoLmdv", "NUMBER", "TAG", "\u00f8", "white_check_mark", "scan", "validators", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "dbac", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "ad", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ace", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "fef", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "YWxpZGF", "NUMBER", "b", "NUMBER", "JzLmdv", "NUMBER", "TAG", "NUMBER", "white_check_mark", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "dbac", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "ad", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ace", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "fef", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "x", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "d", "NUMBER", "b", "NUMBER", "b", "NUMBER", "ace", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "dbac", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "ad", "NUMBER", "f", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ace", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "fef", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "f", "NUMBER", "el", "footer", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Problem", "statement", "An", "API", "that", "provides", "access", "to", "a", "complex", "data", "structure", "that", "be", "defined", "and", "governed", "by", "a", "subsystem", "should", "not", "have", "to", "spec", "the", "same", "data", "model", "to", "be", "marshalled", "as", "this", "would", "require", "a", "deep", "copy", "of", "the", "data", "structure", "from", "the", "subsystem", "to", "the", "API", "layer", "s", "model", "universe", "NUMBER", "How", "do", "others", "deal", "with", "this", "problem", "In", "more", "detail", "a", "subsystem", "that", "build", "a", "complex", "hierarchical", "data", "structure", "to", "support", "its", "own", "requirements", "for", "efficiency", "access", "and", "serialization", "do", "not", "want", "the", "types", "of", "the", "API", "data", "model", "to", "be", "injected", "into", "its", "namespace", "NUMBER", "Furthermore", "the", "subsystem", "can", "exist", "in", "many", "different", "contexts", "beyond", "the", "API", "which", "be", "another", "reason", "it", "would", "not", "want", "to", "become", "dependent", "on", "any", "API", "types", "NUMBER", "A", "new", "requirement", "be", "propose", "that", "wants", "API", "access", "to", "that", "complex", "data", "structure", "and", "we", "decide", "to", "use", "go", "swagger", "for", "that", "implementation", "NUMBER", "It", "be", "a", "pure", "read", "requirement", "so", "no", "need", "for", "parameter", "validation", "by", "the", "API", "just", "the", "ability", "to", "gain", "an", "XML", "or", "JSON", "form", "of", "the", "data", "structure", "by", "a", "client", "NUMBER", "If", "we", "define", "a", "data", "model", "in", "the", "swagger", "specification", "we", "end", "up", "having", "to", "do", "a", "deep", "copy", "of", "that", "data", "structure", "from", "subsystem", "to", "API", "if", "we", "want", "to", "avoid", "type", "injection", "NUMBER", "How", "do", "you", "use", "the", "swagger", "spec", "to", "define", "a", "raw", "JSON", "or", "XML", "transfer", "defined", "by", "the", "subsystem", "s", "types", "Ravenwater", "we", "have", "the", "same", "issue", "NUMBER", "Our", "organization", "decided", "to", "keep", "the", "API", "and", "subsystem", "layers", "separate", "and", "to", "perform", "deep", "copies", "between", "them", "NUMBER", "The", "runtime", "performance", "costs", "be", "acceptable", "to", "us", "and", "worth", "it", "to", "keep", "API", "layer", "dependencies", "out", "of", "our", "core", "library", "NUMBER", "If", "someone", "can", "think", "of", "a", "better", "solution", "we", "would", "love", "to", "know", "W", "NUMBER", "R", "NUMBER", "T", "NUMBER", "your", "second", "question", "I", "m", "not", "sure", "I", "fully", "understand", "it", "NUMBER", "If", "your", "question", "be", "How", "do", "I", "write", "arbitrary", "response", "bodies", "from", "go", "swagger", "generate", "server", "code", "e", "NUMBER", "g", "NUMBER", "from", "subsystem", "structs", "that", "you", "have", "marshaled", "then", "you", "may", "want", "to", "write", "your", "own", "middleware", "NUMBER", "Responder", "LINK", "openapi", "runtime", "blob", "master", "middleware", "context", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "which", "gives", "you", "direct", "access", "to", "the", "underlying", "http", "NUMBER", "ResponseWriter", "NUMBER", "At", "this", "point", "though", "I", "wonder", "why", "use", "go", "swagger", "instead", "of", "a", "lighter", "weight", "framework", "If", "your", "question", "be", "how", "can", "I", "generate", "a", "swagger", "spec", "from", "my", "subsystem", "structs", "then", "you", "should", "check", "out", "the", "swagger", "generate", "spec", "CLI", "command", "NUMBER", "If", "I", "ve", "miss", "the", "meaning", "of", "your", "question", "my", "apologies", "and", "if", "you", "can", "provide", "a", "more", "concrete", "example", "of", "your", "use", "case", "I", "ll", "try", "to", "help", "more", "Hello", "So", "far", "mailru", "easyjson", "could", "not", "be", "use", "on", "Google", "App", "Engine", "due", "to", "the", "usage", "of", "unsafe", "package", "NUMBER", "Good", "news", "be", "that", "they", "have", "introduce", "build", "flags", "to", "workaround", "this", "issue", "LINK", "Would", "you", "consider", "upgrading", "to", "latest", "version", "of", "easyjson", "So", "that", "go", "swagger", "itself", "becomes", "fully", "compatible", "with", "App", "Engine", "Actually", "to", "be", "honest", "it", "seems", "App", "Engine", "do", "not", "play", "nice", "with", "vendoring", "and", "just", "ignores", "any", "vendor", "folder", "and", "go", "get", "latest", "of", "each", "dependency", "instead", "know", "issue", "NUMBER", "Therefore", "upgrading", "your", "vendor", "folder", "may", "not", "be", "necessary", "Problem", "statement", "I", "have", "an", "endpoint", "that", "returns", "a", "file", "and", "should", "be", "use", "the", "application", "octet", "stream", "producer", "NUMBER", "The", "specification", "be", "valid", "according", "to", "go", "swagger", "and", "the", "generate", "code", "compile", "fine", "NUMBER", "When", "I", "attempt", "to", "use", "the", "endpoint", "it", "panics", "ByteStreamProducer", "can", "only", "deal", "with", "io", "NUMBER", "Reader", "NUMBER", "There", "be", "a", "high", "probability", "that", "this", "be", "due", "to", "human", "error", "on", "my", "part", "but", "this", "issue", "might", "help", "others", "encountering", "the", "same", "issue", "that", "I", "be", "later", "on", "NUMBER", "EDIT", "After", "some", "digging", "I", "have", "discover", "that", "runtime", "NUMBER", "File", "doesn", "t", "implement", "io", "NUMBER", "Reader", "which", "ByteStreamProducer", "requires", "NUMBER", "Swagger", "specification", "LINK", "download", "file", "bug", "blob", "master", "swagger", "NUMBER", "yaml", "Steps", "to", "reproduce", "NUMBER", "clone", "the", "repository", "run", "the", "application", "NUMBER", "open", "up", "swagger", "ui", "and", "load", "the", "locally", "hosted", "spec", "NUMBER", "NUMBER", "upload", "a", "file", "via", "POST", "file", "NUMBER", "attempt", "to", "download", "said", "file", "via", "GET", "file", "LINK", "download", "file", "bug", "Environment", "swagger", "version", "Master", "go", "version", "go", "NUMBER", "linux", "amd", "NUMBER", "OS", "linux", "archlinux", "Making", "runtime", "NUMBER", "File", "implement", "io", "NUMBER", "Reader", "with", "the", "following", "implementation", "solves", "my", "issue", "NUMBER", "in", "github", "NUMBER", "com", "go", "openapi", "runtime", "interfaces", "NUMBER", "go", "File", "represents", "an", "uploaded", "file", "NUMBER", "type", "File", "struct", "Data", "multipart", "NUMBER", "File", "Header", "multipart", "NUMBER", "FileHeader", "my", "addition", "func", "f", "File", "Read", "p", "byte", "n", "int", "err", "error", "return", "f", "NUMBER", "Data", "NUMBER", "Read", "p", "I", "think", "this", "issue", "might", "be", "outside", "the", "scope", "of", "go", "swagger", "and", "in", "the", "scope", "of", "go", "openapi", "runtime", "Planning", "on", "it", "Problem", "statement", "Steps", "to", "reproduce", "When", "generating", "a", "server", "with", "swagger", "generate", "server", "f", "swagger", "NUMBER", "json", "within", "a", "directory", "in", "GOPATH", "the", "import", "paths", "in", "the", "generate", "file", "be", "all", "lower", "case", "even", "though", "the", "path", "contains", "a", "directory", "with", "capitalized", "letters", "e", "NUMBER", "g", "NUMBER", "go", "src", "github", "NUMBER", "com", "FOO", "bar", "NUMBER", "Is", "this", "something", "go", "recommend", "enforces", "and", "therefore", "desired", "behavior", "Environment", "swagger", "codegen", "stable", "NUMBER", "swagger", "version", "NUMBER", "go", "version", "NUMBER", "Ok", "I", "might", "raise", "it", "with", "them", "if", "I", "get", "around", "to", "it", "NUMBER", "In", "the", "meantime", "I", "simply", "renamed", "our", "organization", "name", "well", "the", "URL", "and", "the", "directory", "in", "the", "GOPATH", "NUMBER", "Problem", "statement", "go", "swagger", "can", "misidentify", "the", "GOPATH", "src", "folder", "in", "Windows", "NUMBER", "This", "manifests", "in", "a", "confusing", "target", "must", "reside", "inside", "a", "location", "in", "the", "GOPATH", "src", "error", "even", "though", "the", "path", "IS", "in", "GOPATH", "src", "NUMBER", "It", "came", "up", "for", "me", "doing", "a", "generate", "server", "command", "NUMBER", "filepath", "NUMBER", "Abs", "at", "least", "on", "this", "version", "of", "Windows", "returns", "capital", "letters", "for", "path", "for", "example", "C", "dev", "src", "myproject", "NUMBER", "However", "the", "environmental", "variable", "GOPATH", "comes", "from", "user", "input", "NUMBER", "It", "may", "be", "an", "upper", "or", "lower", "case", "letter", "eg", "GOPATH", "c", "dev", "NUMBER", "This", "causes", "go", "swagger", "in", "generator", "support", "NUMBER", "go", "in", "func", "baseImport", "line", "NUMBER", "if", "strings", "NUMBER", "HasPrefix", "p", "pp", "to", "fail", "this", "check", "even", "though", "on", "windows", "these", "two", "strings", "be", "the", "same", "location", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Set", "gopath", "to", "c", "dev", "NUMBER", "Create", "a", "project", "in", "c", "dev", "src", "call", "myproject", "NUMBER", "Use", "any", "swagger", "file", "NUMBER", "NUMBER", "Install", "as", "a", "vendor", "library", "e", "NUMBER", "g", "NUMBER", "with", "glide", "NUMBER", "Run", "with", "a", "relative", "path", "NUMBER", "go", "run", "go", "run", "NUMBER", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "NUMBER", "go", "generate", "server", "Environment", "swagger", "version", "NUMBER", "go", "version", "go", "NUMBER", "windows", "amd", "NUMBER", "OS", "Windows", "NUMBER", "Enterprise", "NUMBER", "bit", "Intel", "Xeon", "E", "NUMBER", "Workaround", "Swap", "the", "GOPATH", "to", "an", "upper", "case", "drive", "letter", "in", "your", "environment", "variables", "NUMBER", "Great", "to", "hear", "Hopefully", "this", "issue", "can", "be", "a", "target", "for", "folks", "searching", "for", "the", "problem", "NUMBER", "edit", "checking", "now", "NUMBER", "Edit", "NUMBER", "Can", "confirm", "fix", "on", "master", "seems", "to", "work", "NUMBER", "Thanks", "I", "probably", "butchered", "this", "and", "miss", "a", "bunch", "of", "places", "So", "I", "discover", "swagger", "last", "night", "and", "this", "project", "today", "NUMBER", "I", "be", "starting", "a", "new", "project", "and", "I", "d", "like", "to", "try", "to", "do", "something", "with", "this", "type", "of", "declarative", "API", "structure", "swagger", "gives", "you", "NUMBER", "This", "project", "be", "above", "and", "beyond", "any", "other", "go", "integration", "and", "seems", "to", "make", "some", "solid", "choices", "on", "the", "code", "generation", "One", "of", "the", "things", "I", "like", "to", "do", "for", "my", "personal", "projects", "be", "make", "them", "as", "quick", "to", "get", "something", "do", "as", "possible", "so", "I", "usually", "end", "up", "use", "an", "ORM", "to", "streamline", "the", "workflow", "NUMBER", "The", "snag", "I", "hit", "was", "with", "the", "generate", "models", "Most", "of", "the", "ORMs", "utilize", "custom", "struct", "tags", "for", "hints", "on", "what", "to", "do", "NUMBER", "I", "did", "not", "see", "any", "way", "in", "the", "documentation", "or", "code", "to", "add", "custom", "tags", "to", "a", "struct", "field", "NUMBER", "So", "I", "build", "it", "NUMBER", "Tested", "it", "NUMBER", "It", "works", "in", "my", "local", "dev", "env", "for", "the", "simple", "use", "case", "I", "ve", "tried", "NUMBER", "Didn", "t", "add", "it", "to", "additional", "properties", "I", "m", "not", "sure", "if", "that", "should", "be", "do", "or", "what", "NUMBER", "Didn", "t", "add", "it", "to", "the", "other", "json", "tag", "field", "in", "the", "other", "template", "NUMBER", "Maybe", "it", "should", "be", "there", "in", "some", "cases", "too", "The", "current", "implementation", "do", "actually", "allow", "the", "user", "to", "create", "an", "invalid", "tag", "as", "it", "just", "template", "the", "entire", "thing", "as", "a", "string", "NUMBER", "I", "could", "have", "use", "a", "different", "suffix", "for", "the", "extension", "name", "to", "prevent", "that", "NUMBER", "For", "example", "Model", "properties", "foo", "type", "string", "x", "go", "custom", "tag", "one", "x", "y", "z", "x", "go", "custom", "tag", "two", "a", "b", "c", "would", "generate", "type", "Model", "struct", "foo", "string", "json", "foo", "one", "x", "y", "z", "two", "a", "b", "c", "Maybe", "I", "misunderstood", "this", "all", "along", "and", "I", "m", "not", "use", "these", "models", "the", "appropriate", "way", "NUMBER", "It", "was", "still", "fun", "diving", "into", "the", "codebase", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "d", "NUMBER", "b", "NUMBER", "fa", "NUMBER", "c", "NUMBER", "ccb", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "fba", "NUMBER", "f", "NUMBER", "d", "NUMBER", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "TAG", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "TAG", "\u00f8", "white_check_mark", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "d", "NUMBER", "b", "NUMBER", "fa", "NUMBER", "c", "NUMBER", "ccb", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "fba", "NUMBER", "f", "NUMBER", "d", "NUMBER", "fbe", "NUMBER", "d", "NUMBER", "aca", "NUMBER", "c", "NUMBER", "f", "NUMBER", "cc", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "df", "NUMBER", "a", "NUMBER", "a", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "white_check_mark", "generator", "model", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "d", "NUMBER", "b", "NUMBER", "fa", "NUMBER", "c", "NUMBER", "ccb", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "fba", "NUMBER", "f", "NUMBER", "d", "NUMBER", "fbe", "NUMBER", "d", "NUMBER", "aca", "NUMBER", "c", "NUMBER", "f", "NUMBER", "cc", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "df", "NUMBER", "a", "NUMBER", "a", "NUMBER", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "vZGVsLmdv", "NUMBER", "TAG", "NUMBER", "white_check_mark", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "d", "NUMBER", "b", "NUMBER", "fbe", "NUMBER", "d", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "d", "NUMBER", "b", "NUMBER", "fa", "NUMBER", "c", "NUMBER", "ccb", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "fba", "NUMBER", "f", "NUMBER", "d", "NUMBER", "fbe", "NUMBER", "d", "NUMBER", "aca", "NUMBER", "c", "NUMBER", "f", "NUMBER", "cc", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "df", "NUMBER", "a", "NUMBER", "a", "NUMBER", "el", "footer", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "NICE", "I", "was", "not", "expecting", "this", "to", "be", "merge", "so", "quickly", "NUMBER", "Wonderful", "I", "can", "continue", "with", "my", "project", "Problem", "statement", "I", "be", "trying", "to", "generate", "swagger", "spec", "for", "LINK", "swagger", "go", "swagger", "tree", "master", "fixture", "goparsing", "petstore", "NUMBER", "But", "the", "resulting", "swagger", "spec", "doesn", "t", "contain", "all", "the", "routes", "models", "etc", "NUMBER", "Infact", "it", "only", "contains", "the", "data", "provide", "in", "doc", "NUMBER", "go", "NUMBER", "Swagger", "specification", "consumes", "application", "json", "produces", "application", "json", "schemes", "http", "https", "swagger", "NUMBER", "info", "description", "the", "purpose", "of", "this", "application", "be", "to", "provide", "an", "application", "nthat", "be", "use", "plain", "go", "code", "to", "define", "an", "API", "n", "nThis", "should", "demonstrate", "all", "the", "possible", "comment", "annotations", "nthat", "be", "available", "to", "turn", "go", "code", "into", "a", "fully", "compliant", "swagger", "NUMBER", "spec", "title", "Petstore", "API", "NUMBER", "termsOfService", "there", "be", "no", "TOS", "at", "this", "moment", "use", "at", "your", "own", "risk", "we", "take", "no", "responsibility", "ngo", "generate", "swagger", "generate", "spec", "o", "swagger", "NUMBER", "json", "contact", "name", "John", "Doe", "url", "LINK", "email", "john", "NUMBER", "doe", "example", "NUMBER", "com", "license", "name", "MIT", "url", "LINK", "version", "NUMBER", "host", "localhost", "basePath", "v", "NUMBER", "paths", "Steps", "to", "reproduce", "I", "add", "go", "generate", "swagger", "generate", "spec", "o", "swagger", "NUMBER", "json", "in", "doc", "NUMBER", "go", "and", "did", "go", "generate", "in", "the", "folder", "containing", "doc", "NUMBER", "go", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "Windows", "NUMBER", "Thank", "you", "it", "works", "that", "way", "NUMBER", "Hi", "I", "have", "the", "following", "swagger", "meta", "defined", "in", "a", "doc", "NUMBER", "go", "file", "within", "a", "public", "package", "Package", "public", "ESB", "monitoring", "endpoints", "NUMBER", "The", "purpose", "of", "this", "API", "be", "to", "provide", "information", "over", "the", "status", "of", "components", "API", "clients", "and", "services", "among", "others", "SIM", "porting", "compass", "provisioning", "run", "in", "the", "Speakup", "ESB", "Schemes", "http", "https", "Version", "NUMBER", "Contact", "Luca", "Valtulina", "TAG", "swagger", "meta", "package", "public", "when", "generating", "the", "swagger", "documentation", "though", "it", "randomly", "happens", "that", "the", "swagger", "info", "attribute", "be", "as", "following", "info", "description", "You", "give", "it", "a", "main", "file", "and", "it", "will", "parse", "all", "the", "file", "that", "be", "required", "by", "that", "main", "npackage", "to", "produce", "a", "swagger", "specification", "NUMBER", "n", "nTo", "use", "you", "can", "add", "a", "go", "generate", "comment", "to", "your", "main", "file", "for", "example", "n", "ngo", "generate", "swagger", "generate", "spec", "n", "nThe", "following", "annotations", "exist", "title", "provides", "a", "scanner", "for", "go", "file", "that", "produces", "a", "swagger", "spec", "document", "NUMBER", "contact", "name", "Luca", "Valtulina", "email", "luca", "speakup", "NUMBER", "nl", "version", "NUMBER", "This", "description", "and", "title", "can", "be", "find", "in", "the", "go", "swagger", "go", "swagger", "scan", "doc", "NUMBER", "go", "file", "NUMBER", "I", "believe", "that", "this", "be", "triggered", "by", "the", "fact", "that", "I", "import", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "in", "my", "project", "I", "need", "to", "generate", "the", "swagger", "documentation", "at", "runtime", "and", "I", "do", "that", "by", "instantiating", "a", "generate", "NUMBER", "SpecFile", "with", "as", "basePath", "the", "path", "to", "my", "public", "package", "and", "as", "input", "the", "doc", "NUMBER", "go", "file", "NUMBER", "If", "you", "think", "that", "this", "cannot", "be", "considered", "an", "issue", "since", "go", "swagger", "be", "meant", "to", "be", "executed", "separately", "and", "not", "to", "be", "imported", "as", "a", "library", "package", "than", "please", "feel", "free", "to", "close", "this", "NUMBER", "Thanks", "in", "advance", "Luca", "casualjim", "thanks", "for", "your", "reply", "NUMBER", "if", "with", "at", "build", "time", "you", "mean", "prior", "to", "build", "the", "golang", "binary", "sorry", "newbie", "here", "use", "the", "swagger", "generate", "spec", "cmd", "then", "the", "result", "be", "unfortunately", "not", "different", "NUMBER", "out", "of", "NUMBER", "times", "the", "description", "and", "title", "in", "the", "swagger", "doc", "be", "incorrect", "NUMBER", "FYI", "we", "have", "go", "swagger", "in", "our", "vendor", "directory", "so", "that", "we", "can", "ensure", "a", "given", "version", "even", "if", "that", "version", "isn", "t", "yet", "release", "but", "we", "don", "t", "use", "any", "of", "its", "types", "from", "there", "NUMBER", "We", "just", "run", "it", "from", "the", "vendor", "directory", "NUMBER", "We", "haven", "t", "had", "any", "problem", "with", "that", "so", "it", "would", "be", "good", "if", "it", "would", "continue", "to", "work", "that", "way", "NUMBER", "Thanks", "casualjim", "for", "the", "clarifications", "NUMBER", "I", "think", "we", "can", "considered", "this", "issue", "a", "non", "issue", "then", "but", "simply", "a", "misuse", "from", "my", "side", "NUMBER", "Problem", "statement", "Sending", "a", "request", "with", "property", "which", "be", "defined", "as", "readOnly", "in", "the", "schema", "should", "return", "a", "NUMBER", "Currently", "it", "be", "accepted", "NUMBER", "Swagger", "specification", "readOnly", "boolean", "Relevant", "only", "for", "Schema", "properties", "definitions", "NUMBER", "Declares", "the", "property", "as", "read", "only", "NUMBER", "This", "means", "that", "it", "MAY", "be", "sent", "as", "part", "of", "a", "response", "but", "MUST", "NOT", "be", "sent", "as", "part", "of", "the", "request", "NUMBER", "Properties", "marked", "as", "readOnly", "be", "true", "SHOULD", "NOT", "be", "in", "the", "required", "list", "of", "the", "defined", "schema", "NUMBER", "Default", "value", "be", "false", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Create", "a", "POST", "verb", "on", "path", "with", "body", "with", "schema", "that", "has", "a", "readOnly", "property", "NUMBER", "Send", "a", "request", "that", "contains", "this", "property", "NUMBER", "NUMBER", "You", "won", "t", "get", "an", "NUMBER", "error", "Environment", "swagger", "version", "NUMBER", "go", "version", "go", "NUMBER", "OS", "linux", "amd", "NUMBER", "NUMBER", "I", "also", "would", "really", "like", "to", "have", "this", "feature", "NUMBER", "An", "api", "I", "be", "build", "has", "some", "properties", "in", "its", "models", "like", "createdAt", "or", "modifiedAt", "that", "be", "declared", "as", "readOnly", "NUMBER", "Currently", "I", "have", "to", "manually", "remove", "these", "field", "from", "request", "what", "be", "quite", "annoying", "and", "kind", "of", "negates", "the", "whole", "purpose", "of", "auto", "generating", "code", "from", "swagger", "NUMBER", "I", "tried", "to", "find", "the", "relevant", "places", "where", "this", "had", "to", "be", "implement", "but", "I", "fail", "NUMBER", "Although", "I", "think", "I", "be", "relatively", "proficient", "in", "go", "I", "have", "absolutely", "no", "idea", "what", "exactly", "be", "going", "on", "in", "the", "go", "swagger", "code", "NUMBER", "Problem", "statement", "We", "have", "a", "need", "to", "set", "HTTP", "header", "parameters", "in", "the", "generate", "client", "code", "that", "be", "not", "necessarily", "part", "of", "the", "swagger", "documentation", "NUMBER", "We", "know", "that", "we", "could", "specify", "the", "header", "parameter", "in", "swagger", "but", "that", "be", "not", "feasible", "as", "it", "should", "not", "be", "expose", "to", "the", "public", "users", "it", "will", "be", "set", "automatically", "by", "the", "gateway", "but", "for", "internal", "development", "we", "also", "want", "to", "set", "it", "NUMBER", "However", "I", "don", "t", "really", "have", "access", "to", "the", "http", "request", "from", "any", "of", "the", "Params", "object", "NUMBER", "Unless", "I", "m", "miss", "something", "I", "would", "have", "to", "make", "a", "copy", "of", "the", "swagger", "doc", "with", "the", "parameter", "that", "I", "then", "use", "for", "client", "code", "generation", "and", "one", "for", "external", "use", "without", "the", "parameter", "NUMBER", "Is", "there", "a", "better", "way", "to", "solve", "this", "by", "letting", "met", "set", "custom", "headers", "that", "be", "not", "specified", "in", "the", "swagger", "document", "Alternative", "would", "be", "hidden", "parameters", "in", "the", "swagger", "doc", "but", "I", "don", "t", "think", "that", "exists", "NUMBER", "Awesome", "i", "ll", "look", "into", "this", "NUMBER", "Always", "appreciate", "your", "fast", "response", "NUMBER", "This", "resolve", "my", "problem", "and", "this", "issue", "can", "be", "close", "NUMBER", "byte", "worked", "fine", "until", "Go", "NUMBER", "In", "Go", "NUMBER", "decoding", "fail", "with", "following", "error", "json", "cannot", "unmarshal", "object", "into", "Go", "value", "of", "type", "uint", "NUMBER", "Using", "json", "NUMBER", "RawMessage", "works", "correctly", "in", "this", "case", "NUMBER", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "b", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "a", "NUMBER", "dabee", "NUMBER", "cd", "src", "pr", "el", "desc", "will", "increase", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "generator", "bindata", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "b", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "a", "NUMBER", "dabee", "NUMBER", "cd", "NUMBER", "afb", "NUMBER", "c", "NUMBER", "cfb", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "aa", "NUMBER", "d", "NUMBER", "ea", "NUMBER", "d", "NUMBER", "d", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "JpbmRhdGEuZ", "NUMBER", "NUMBER", "TAG", "\u00f8", "white_check_mark", "generator", "structs", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "b", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "a", "NUMBER", "dabee", "NUMBER", "cd", "NUMBER", "afb", "NUMBER", "c", "NUMBER", "cfb", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "aa", "NUMBER", "d", "NUMBER", "ea", "NUMBER", "d", "NUMBER", "d", "src", "pr", "el", "tree", "diff", "Z", "NUMBER", "VuZXJhdG", "NUMBER", "yL", "NUMBER", "N", "NUMBER", "cnVjdHMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "white_check_mark", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "a", "NUMBER", "afb", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "b", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "a", "NUMBER", "dabee", "NUMBER", "cd", "NUMBER", "afb", "NUMBER", "c", "NUMBER", "cfb", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "aa", "NUMBER", "d", "NUMBER", "ea", "NUMBER", "d", "NUMBER", "d", "src", "pr", "el", "footer", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "Done", "Problem", "statement", "I", "have", "a", "POST", "request", "that", "returns", "different", "object", "models", "based", "on", "the", "query", "parameters", "NUMBER", "Is", "there", "any", "way", "to", "add", "multiple", "responses", "under", "the", "swagger", "route", "annotation", "like", "Responses", "NUMBER", "response", "NUMBER", "NUMBER", "response", "NUMBER", "NUMBER", "etc", "Also", "be", "it", "possible", "to", "have", "different", "models", "for", "the", "request", "too", "sakibs", "if", "you", "specify", "a", "wrapper", "class", "or", "base", "class", "you", "can", "return", "multiple", "responses", "NUMBER", "for", "example", "in", "pseudo", "swagger", "ResponseWrapper", "type", "object", "properties", "response", "NUMBER", "ref", "definitions", "response", "NUMBER", "response", "NUMBER", "ref", "definitions", "response", "NUMBER", "or", "more", "elegantly", "BaseObject", "type", "object", "properties", "id", "type", "string", "format", "uuid", "Response", "NUMBER", "allOf", "ref", "definitions", "BaseObject", "type", "object", "properties", "extendedAttributeForResponse", "NUMBER", "Response", "NUMBER", "allOf", "ref", "definitions", "BaseObject", "type", "object", "properties", "extendedAttribForResponse", "NUMBER", "I", "would", "assume", "that", "with", "OpenAPI", "NUMBER", "you", "ll", "be", "able", "to", "do", "anyOf", "with", "the", "different", "response", "types", "NUMBER", "Problem", "statement", "A", "swagger", "definition", "that", "include", "more", "than", "one", "tag", "in", "a", "path", "s", "tag", "definitions", "generates", "bad", "code", "NUMBER", "It", "appears", "to", "nest", "a", "second", "operations", "directory", "within", "the", "first", "NUMBER", "Swagger", "specification", "yaml", "swagger", "NUMBER", "info", "title", "Multi", "tag", "API", "description", "multi", "tag", "api", "version", "NUMBER", "the", "domain", "of", "the", "service", "host", "api", "NUMBER", "multi", "NUMBER", "tags", "schemes", "https", "produces", "application", "json", "consumes", "application", "json", "basePath", "v", "NUMBER", "Prefixed", "to", "all", "paths", "paths", "multi", "get", "summary", "A", "multitag", "route", "tags", "onetag", "twotag", "responses", "default", "description", "Unexpected", "error", "schema", "type", "object", "properties", "type", "type", "string", "description", "The", "error", "type", "message", "type", "array", "description", "Explanation", "of", "the", "error", "items", "type", "string", "Steps", "to", "reproduce", "swagger", "generate", "server", "with", "the", "above", "and", "attempt", "to", "go", "build", "NUMBER", "You", "ll", "get", "the", "following", "error", "restapi", "operations", "multi_tag_api", "NUMBER", "go", "NUMBER", "undefined", "GetMultiHandler", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "macOS", "same", "issue", "Is", "this", "still", "there", "On", "my", "machine", "with", "same", "yaml", "file", "as", "above", "it", "produces", "perfect", "output", "NUMBER", "Here", "taggarwal", "taggarwal", "m", "NUMBER", "test", "swagger", "NUMBER", "swagger", "generate", "server", "f", "bug", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "grouping", "operations", "into", "package", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "meta", "data", "and", "facades", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "operation", "group", "tags", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "operations", "for", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "operation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "GetMulti", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "get_multi_parameters", "NUMBER", "go", "in", "restapi", "operations", "operations", "as", "parameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "GetMulti", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "get_multi_urlbuilder", "NUMBER", "go", "in", "restapi", "operations", "operations", "as", "urlbuilder", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "GetMulti", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "get_multi_responses", "NUMBER", "go", "in", "restapi", "operations", "operations", "as", "responses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "GetMulti", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "get_multi", "NUMBER", "go", "in", "restapi", "operations", "operations", "as", "handler", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "support", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "application", "MultiTag", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "MultiTag", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "configure_multi_tag", "NUMBER", "go", "in", "restapi", "as", "configure", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "MultiTag", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "main", "NUMBER", "go", "in", "cmd", "multi", "tag", "server", "as", "main", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "MultiTag", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "embedded_spec", "NUMBER", "go", "in", "restapi", "as", "embedded_spec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "MultiTag", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "server", "NUMBER", "go", "in", "restapi", "as", "server", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "MultiTag", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "multi_tag_api", "NUMBER", "go", "in", "restapi", "operations", "as", "builder", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "MultiTag", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "doc", "NUMBER", "go", "in", "restapi", "as", "doc", "Generation", "completed", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "github", "NUMBER", "com", "go", "openapi", "runtime", "github", "NUMBER", "com", "tylerb", "graceful", "github", "NUMBER", "com", "jessevdk", "go", "flags", "You", "can", "get", "these", "now", "with", "go", "get", "u", "f", "NUMBER", "NUMBER", "taggarwal", "taggarwal", "m", "NUMBER", "test", "swagger", "ls", "R", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "bug", "NUMBER", "yaml", "cmd", "copyright", "NUMBER", "txt", "copyright", "NUMBER", "txt", "pet", "NUMBER", "yaml", "restapi", "swagger", "NUMBER", "cmd", "app", "server", "multi", "tag", "server", "NUMBER", "cmd", "app", "server", "main", "NUMBER", "go", "NUMBER", "cmd", "multi", "tag", "server", "main", "NUMBER", "go", "NUMBER", "restapi", "configure_app", "NUMBER", "go", "configure_multi_tag", "NUMBER", "go", "doc", "NUMBER", "go", "embedded_spec", "NUMBER", "go", "operations", "server", "NUMBER", "go", "NUMBER", "restapi", "operations", "app_api", "NUMBER", "go", "multi_tag_api", "NUMBER", "go", "operations", "NUMBER", "restapi", "operations", "operations", "get_multi", "NUMBER", "go", "get_multi_parameters", "NUMBER", "go", "get_multi_responses", "NUMBER", "go", "get_multi_urlbuilder", "NUMBER", "go", "taggarwal", "taggarwal", "m", "NUMBER", "test", "swagger", "casualjim", "It", "has", "be", "verify", "NUMBER", "Can", "be", "close", "NUMBER", "Im", "seeing", "the", "operations", "operations", "folder", "created", "NUMBER", "Tried", "to", "compile", "my", "generate", "server", "but", "get", "compile", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "grouping", "operations", "into", "package", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "meta", "data", "and", "facades", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "model", "uuid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "uuid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "uuid", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "models", "as", "definition", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "model", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "error", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "models", "as", "definition", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "model", "success", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "success", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "success", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "models", "as", "definition", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "operation", "group", "tags", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "operations", "for", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "operation", "nusights", "rest", "api", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "fileupload", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "fileupload_parameters", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "restapi", "operations", "operations", "as", "parameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "fileupload", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "fileupload_urlbuilder", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "restapi", "operations", "operations", "as", "urlbuilder", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "fileupload", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "fileupload_responses", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "restapi", "operations", "operations", "as", "responses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "fileupload", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "fileupload", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "restapi", "operations", "operations", "as", "handler", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "support", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "application", "NusightsRest", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "NusightsRest", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "skipping", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "restapi", "configure_nusights_rest", "NUMBER", "go", "because", "it", "already", "exists", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "NusightsRest", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "main", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "cmd", "nusights", "rest", "server", "as", "main", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "NusightsRest", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "embedded_spec", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "restapi", "as", "embedded_spec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "NusightsRest", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "server", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "restapi", "as", "server", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "NusightsRest", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "nusights_rest_api", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "restapi", "operations", "as", "builder", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "NusightsRest", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "doc", "NUMBER", "go", "in", "home", "prasadj", "workspace", "main", "NUMBER", "NUMBER", "go", "src", "nusights", "server", "apis", "restapi", "as", "doc", "Generation", "completed", "Invoking", "go", "build", "for", "nusights_server_apis_cmd_nusights", "rest", "server", "nusights", "server", "apis", "restapi", "operations", "NUMBER", "go", "src", "nusights", "server", "apis", "restapi", "operations", "nusights_rest_api", "NUMBER", "go", "NUMBER", "undefined", "FileuploadHandler", "make", "NUMBER", "nusights", "go", "nusights", "server", "apis", "cmd", "nusights", "rest", "server", "CMakeFiles", "nusights_server_apis_cmd_nusights", "rest", "server", "Error", "NUMBER", "jgsprasad", "Can", "you", "try", "with", "latest", "pull", "from", "LINK", "swagger", "I", "want", "to", "implement", "push", "notifications", "with", "ejabberd", "server", "NUMBER", "I", "followed", "instructions", "as", "mention", "here", "but", "i", "get", "the", "following", "issue", "Recompile", "src", "mod_onesignal", "src", "mod_onesignal", "NUMBER", "erl", "undefined", "parse", "transform", "lager_transform", "Please", "answer", "it", "as", "soon", "as", "possible", "NUMBER", "casualjim", "Thank", "you", "so", "much", "NUMBER", "By", "mistake", "i", "posted", "here", "NUMBER", "Problem", "statement", "I", "be", "trying", "to", "generate", "server", "and", "client", "for", "go", "swagger", "NUMBER", "this", "be", "my", "first", "time", "use", "swagger", "NUMBER", "And", "I", "have", "these", "package", "github", "NUMBER", "com", "go", "openapi", "runtime", "github", "NUMBER", "com", "tylerb", "graceful", "github", "NUMBER", "com", "jessevdk", "go", "flags", "golang", "NUMBER", "org", "x", "net", "context", "in", "my", "echo", "GOPATH", "Users", "argentum", "dev", "go", "NUMBER", "but", "when", "I", "run", "swagger", "generate", "server", "A", "auth", "service", "f", "NUMBER", "swagger", "NUMBER", "yml", "in", "Users", "argentum", "dev", "go", "swagger", "demo", "NUMBER", "I", "get", "this", "Generation", "completed", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "github", "NUMBER", "com", "go", "openapi", "runtime", "github", "NUMBER", "com", "tylerb", "graceful", "github", "NUMBER", "com", "jessevdk", "go", "flags", "golang", "NUMBER", "org", "x", "net", "context", "But", "I", "have", "these", "package", "I", "checked", "in", "GOPATH", "github", "NUMBER", "com", "TAG", "Swagger", "specification", "Installed", "swagger", "with", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "when", "I", "do", "swagger", "version", "it", "shows", "dev", "Steps", "to", "reproduce", "Create", "a", "project", "diretory", "under", "GOPATH", "NUMBER", "make", "a", "swagger", "NUMBER", "yml", "onsumes", "application", "json", "info", "description", "Issues", "and", "validates", "access", "and", "refresh", "tokens", "and", "otp", "for", "two", "factor", "authentication", "title", "Authentication", "service", "version", "NUMBER", "produces", "application", "json", "schemes", "https", "http", "swagger", "NUMBER", "securityDefinitions", "key", "type", "apiKey", "in", "header", "name", "authorization", "paths", "v", "NUMBER", "customers", "login", "delete", "tags", "customer", "login", "responses", "NUMBER", "description", "ok", "NUMBER", "description", "unauthorized", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "darwin", "amd", "NUMBER", "OS", "OSX", "SIERRA", "Also", "it", "would", "be", "cool", "if", "you", "could", "say", "how", "to", "do", "a", "DELETE", "POST", "request", "which", "has", "headers", "Authorizartion", "Bearer", "TAG", "X", "Platform", "Webapp", "I", "know", "how", "to", "do", "the", "body", "NUMBER", "oh", "ok", "NUMBER", "D", "cool", "casualjim", "um", "where", "did", "you", "get", "those", "securityDefinitions", "values", "NUMBER", "as", "in", "in", "the", "documentation", "or", "in", "the", "examples", "authentication", "its", "not", "there", "please", "guide", "me", "a", "bit", "into", "figuring", "out", "where", "can", "I", "refer", "to", "for", "future", "problem", "that", "be", "already", "solve", "argentum", "NUMBER", "you", "can", "find", "all", "of", "that", "information", "in", "the", "official", "Swagger", "NUMBER", "OpenAPI", "NUMBER", "documentation", "NUMBER", "For", "example", "your", "question", "be", "answered", "here", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "security", "definitions", "object", "Problem", "statement", "We", "have", "a", "Swagger", "Spec", "with", "a", "string", "parameter", "defined", "NUMBER", "When", "now", "the", "value", "contains", "some", "URL", "escaped", "characters", "e", "NUMBER", "g", "NUMBER", "a", "space", "correctly", "encoded", "as", "or", "NUMBER", "by", "the", "client", "these", "be", "not", "unescaped", "before", "be", "pass", "into", "the", "actual", "service", "implementation", "NUMBER", "We", "now", "implement", "a", "workaround", "but", "I", "m", "quite", "sure", "this", "be", "a", "bug", "NUMBER", "Swagger", "specification", "json", "v", "NUMBER", "choices", "type", "value", "get", "produces", "application", "json", "responses", "NUMBER", "description", "Choice", "details", "NUMBER", "n", "schema", "ref", "definitions", "choice", "parameters", "in", "path", "required", "true", "type", "string", "name", "type", "name", "value", "type", "string", "in", "path", "required", "true", "description", "Details", "about", "one", "choice", "by", "its", "value", "NUMBER", "Steps", "to", "reproduce", "For", "this", "example", "curl", "LINK", "NUMBER", "will", "end", "up", "in", "some", "value", "Ubuntu", "NUMBER", "while", "curl", "LINK", "NUMBER", "becomes", "Ubuntu", "NUMBER", "with", "no", "space", "at", "all", "Environment", "swagger", "version", "dev", "as", "of", "NUMBER", "NUMBER", "NUMBER", "go", "version", "NUMBER", "OS", "Ubuntu", "NUMBER", "One", "additional", "special", "case", "which", "I", "m", "not", "even", "very", "sure", "about", "whether", "it", "s", "an", "error", "in", "go", "swagger", "or", "not", "For", "the", "case", "above", "a", "client", "sends", "a", "plus", "sign", "which", "be", "really", "meant", "to", "be", "a", "plus", "sign", "NUMBER", "It", "s", "not", "escaped", "as", "NUMBER", "b", "and", "the", "customer", "claimed", "this", "would", "be", "correct", "NUMBER", "We", "discussed", "that", "for", "a", "while", "and", "indeed", "RFC", "NUMBER", "says", "Characters", "other", "than", "those", "in", "the", "reserved", "and", "unsafe", "sets", "see", "RFC", "NUMBER", "NUMBER", "be", "equivalent", "to", "their", "HEX", "HEX", "encoding", "NUMBER", "and", "do", "not", "say", "anything", "about", "an", "encoding", "a", "space", "as", "but", "for", "body", "content", "of", "application", "x", "www", "urlencoded", "the", "be", "an", "alternative", "for", "NUMBER", "draft", "LINK", "hoehrmann", "urlencoded", "NUMBER", "For", "compatibility", "with", "the", "RFC", "NUMBER", "format", "the", "ampersand", "character", "be", "tolerated", "as", "alternative", "separator", "character", "and", "the", "plus", "sign", "may", "be", "use", "to", "represent", "space", "characters", "NUMBER", "So", "from", "my", "point", "of", "view", "a", "in", "a", "path", "variable", "would", "have", "to", "stay", "only", "NUMBER", "should", "be", "unescaped", "while", "for", "form", "data", "a", "would", "have", "to", "be", "encoded", "as", "NUMBER", "b", "on", "client", "side", "while", "the", "server", "may", "decode", "to", "space", "NUMBER", "Sorry", "for", "nitpicking", "and", "discussing", "here", "NUMBER", "The", "potential", "problem", "I", "see", "be", "that", "it", "seems", "like", "several", "libraries", "do", "not", "encode", "correctly", "so", "implement", "it", "to", "the", "letter", "of", "the", "spec", "could", "mean", "to", "cause", "problem", "with", "those", "in", "reality", "NUMBER", "On", "the", "other", "hand", "when", "the", "encoding", "bug", "has", "just", "recently", "be", "report", "and", "fix", "there", "seem", "not", "to", "be", "too", "many", "implementations", "even", "use", "it", "NUMBER", "PS", "just", "tried", "that", "a", "in", "a", "path", "be", "a", "for", "common", "browsers", "and", "servers", "they", "handle", "the", "file", "named", "foo", "bar", "not", "foo", "bar", "NUMBER", "A", "in", "a", "GET", "parameter", "on", "the", "other", "hand", "be", "a", "space", "character", "even", "though", "visible", "in", "the", "URI", "NUMBER", "Example", "foo", "bar", "LINK", "ts", "foo", "bar", "contains", "foo", "NUMBER", "bar", "LINK", "ts", "foo", "NUMBER", "bar", "contains", "space", "Should", "work", "like", "so", "diff", "diff", "git", "a", "middleware", "router", "NUMBER", "go", "b", "middleware", "router", "NUMBER", "go", "index", "NUMBER", "b", "NUMBER", "f", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "NUMBER", "a", "middleware", "router", "NUMBER", "go", "b", "middleware", "router", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "func", "d", "defaultRouter", "Lookup", "method", "path", "string", "MatchedRoute", "bool", "debugLog", "find", "a", "route", "for", "s", "s", "with", "d", "parameters", "method", "path", "len", "entry", "NUMBER", "Parameters", "var", "params", "RouteParams", "for", "_", "p", "range", "rp", "v", "err", "url", "NUMBER", "QueryUnescape", "p", "NUMBER", "Value", "according", "to", "RFC", "NUMBER", "a", "plus", "in", "a", "path", "be", "just", "a", "v", "err", "url", "NUMBER", "QueryUnescape", "strings", "NUMBER", "Replace", "p", "NUMBER", "Value", "NUMBER", "B", "NUMBER", "if", "err", "nil", "debugLog", "fail", "to", "escape", "q", "v", "p", "NUMBER", "Value", "err", "v", "p", "NUMBER", "Value", "diff", "git", "a", "middleware", "router_test", "NUMBER", "go", "b", "middleware", "router_test", "NUMBER", "go", "index", "e", "NUMBER", "fe", "NUMBER", "ab", "NUMBER", "b", "NUMBER", "NUMBER", "a", "middleware", "router_test", "NUMBER", "go", "b", "middleware", "router_test", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "func", "TestRouter_EscapedPath", "t", "test", "NUMBER", "T", "assert", "NUMBER", "Equal", "t", "NUMBER", "recorder", "NUMBER", "Code", "recorder", "httptest", "NUMBER", "NewRecorder", "request", "_", "http", "NUMBER", "NewRequest", "GET", "api", "pets", "abc", "NUMBER", "Fdef", "nil", "request", "_", "http", "NUMBER", "NewRequest", "GET", "api", "pets", "abc", "NUMBER", "Fde", "f", "nil", "mw", "NUMBER", "ServeHTTP", "recorder", "request", "assert", "NUMBER", "Equal", "t", "NUMBER", "recorder", "NUMBER", "Code", "ri", "_", "context", "NUMBER", "RouteInfo", "request", "if", "assert", "NUMBER", "NotNil", "t", "ri", "if", "assert", "NUMBER", "NotNil", "t", "ri", "NUMBER", "Params", "assert", "NUMBER", "Equal", "t", "abc", "def", "ri", "NUMBER", "Params", "NUMBER", "Get", "id", "assert", "NUMBER", "Equal", "t", "abc", "de", "f", "ri", "NUMBER", "Params", "NUMBER", "Get", "id", "In", "my", "go", "swagger", "build", "API", "I", "have", "a", "date", "time", "property", "that", "be", "not", "required", "i", "NUMBER", "e", "NUMBER", "I", "would", "like", "to", "exclude", "it", "from", "the", "JSON", "output", "if", "the", "source", "DB", "value", "be", "NULL", "NUMBER", "I", "successfully", "select", "the", "value", "into", "a", "sql", "NUMBER", "NullString", "value", "endTime", "then", "convert", "to", "a", "strfmt", "NUMBER", "DateTime", "endTimeStr", "to", "populate", "the", "model", "endTimeStr", "strfmt", "NUMBER", "DateTime", "endTimeStr", "NUMBER", "Scan", "endTime", "NUMBER", "String", "When", "the", "value", "in", "the", "database", "be", "NULL", "then", "instead", "of", "this", "value", "be", "suppressed", "in", "the", "JSON", "output", "I", "see", "the", "following", "end_time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "The", "above", "value", "means", "nothing", "in", "my", "context", "so", "I", "would", "rather", "see", "it", "suppressed", "NUMBER", "Am", "I", "able", "to", "do", "this", "Note", "non", "required", "values", "of", "other", "data", "types", "be", "not", "placed", "in", "the", "JSON", "do", "I", "have", "to", "do", "anything", "extra", "in", "the", "case", "of", "date", "time", "values", "to", "hide", "these", "too", "Thanks", "for", "any", "help", "you", "can", "provide", "NUMBER", "Thank", "you", "casualjim", "that", "be", "what", "I", "was", "looking", "for", "NUMBER", "This", "be", "a", "question", "and", "not", "a", "bug", "NUMBER", "I", "have", "to", "rely", "on", "you", "core", "contributors", "and", "hope", "you", "have", "enough", "knowledge", "to", "understand", "the", "following", "My", "team", "want", "to", "migrate", "our", "exist", "go", "swagger", "app", "server", "generate", "from", "spec", "to", "Google", "App", "Engine", "GAE", "NUMBER", "I", "could", "not", "find", "any", "previous", "attempt", "of", "doing", "this", "on", "Google", "search", "NUMBER", "Basically", "GAE", "be", "intrusive", "and", "build", "your", "code", "as", "a", "package", "instead", "of", "an", "app", "and", "expects", "standard", "http", "handlers", "to", "be", "registered", "in", "main", "NUMBER", "go", "init", "function", "NUMBER", "If", "you", "look", "quickly", "at", "LINK", "request", "be", "handle", "section", "Requests", "and", "HTTP", "you", "will", "see", "a", "sample", "an", "brief", "explanation", "NUMBER", "My", "question", "do", "you", "know", "if", "a", "go", "swagger", "app", "can", "be", "migrated", "work", "this", "way", "I", "m", "ask", "because", "I", "suspect", "the", "HTTP", "middleware", "you", "be", "use", "probably", "do", "a", "lot", "of", "magic", "things", "including", "some", "ListenAndServe", "or", "similar", "NUMBER", "Which", "I", "believe", "cannot", "work", "on", "GAE", "NUMBER", "Any", "comment", "appreciated", "NUMBER", "If", "you", "think", "that", "could", "work", "some", "clue", "of", "directions", "things", "to", "change", "would", "help", "NUMBER", "Thanks", "for", "your", "reply", "NUMBER", "Yes", "I", "have", "seen", "and", "I", "believe", "it", "s", "slightly", "different", "because", "they", "use", "a", "different", "approach", "the", "op", "says", "he", "be", "just", "use", "swagger", "generate", "spec", "NUMBER", "Meaning", "he", "probably", "already", "has", "an", "app", "use", "standard", "http", "handlers", "NUMBER", "In", "our", "case", "we", "use", "swagger", "generate", "server", "and", "therefore", "our", "app", "relies", "entirely", "on", "your", "http", "middleware", "and", "the", "generate", "code", "NUMBER", "From", "my", "limited", "understanding", "GAE", "asks", "you", "to", "register", "your", "handlers", "and", "that", "s", "all", "NUMBER", "They", "have", "some", "magic", "to", "actually", "listen", "and", "serve", "hence", "my", "question", "NUMBER", "My", "current", "attempt", "resulted", "in", "a", "panic", "I", "ve", "sent", "an", "support", "ticket", "to", "Google", "trying", "to", "explain", "the", "situation", "and", "I", "be", "waiting", "for", "their", "feedback", "NUMBER", "I", "will", "update", "this", "thread", "if", "I", "find", "anything", "NUMBER", "I", "have", "some", "update", "With", "some", "help", "from", "Google", "support", "and", "many", "attempts", "I", "ve", "managed", "to", "get", "the", "simple", "TODO", "example", "work", "NUMBER", "Basically", "the", "key", "point", "be", "to", "initialize", "the", "handlers", "from", "the", "middleware", "like", "this", "server", "NUMBER", "ConfigureFlags", "server", "NUMBER", "ConfigureAPI", "http", "NUMBER", "Handle", "server", "NUMBER", "GetHandler", "and", "then", "remove", "any", "further", "generate", "code", "since", "we", "must", "not", "start", "listening", "NUMBER", "In", "addition", "for", "some", "reason", "I", "had", "to", "tweak", "the", "route", "handler", "mapping", "initCacheHandler", "to", "explicitly", "use", "instead", "of", "empty", "string", "NUMBER", "It", "s", "still", "unclear", "why", "I", "had", "to", "do", "this", "NUMBER", "Finally", "a", "NUMBER", "party", "easyjson", "needs", "to", "be", "tweaked", "as", "well", "as", "it", "s", "use", "restricted", "API", "unsafe", "package", "NUMBER", "After", "all", "of", "this", "yes", "you", "can", "get", "a", "go", "swagger", "app", "work", "on", "App", "Engine", "NUMBER", "I", "believe", "we", "can", "close", "the", "issue", "NUMBER", "This", "was", "work", "on", "NUMBER", "NUMBER", "On", "master", "swagger", "generate", "operation", "NUMBER", "skip", "validator", "do", "not", "skip", "the", "validation", "function", "NUMBER", "Problem", "statement", "For", "a", "PATCH", "handler", "I", "m", "trying", "to", "determine", "whether", "a", "field", "has", "be", "set", "to", "null", "or", "be", "not", "set", "at", "all", "NUMBER", "I", "saw", "there", "s", "work", "going", "on", "in", "NUMBER", "which", "looks", "to", "solve", "exactly", "the", "same", "problem", "but", "obviously", "isn", "t", "exactly", "a", "trivial", "change", "NUMBER", "Is", "there", "a", "way", "to", "work", "around", "this", "temporarily", "get", "creating", "a", "map", "of", "the", "field", "that", "have", "be", "set", "or", "something", "like", "that", "Swagger", "specification", "The", "snipped", "below", "be", "just", "how", "I", "defined", "the", "request", "body", "NUMBER", "yaml", "MyUpdateParams", "description", "Entity", "to", "perform", "change", "on", "an", "exist", "resource", "NUMBER", "type", "object", "properties", "profile_id", "description", "Profile", "id", "the", "resource", "should", "be", "assigned", "to", "or", "null", "for", "anonymous", "resources", "NUMBER", "If", "provide", "but", "set", "to", "null", "it", "will", "be", "change", "whereas", "if", "the", "field", "be", "unset", "no", "change", "will", "be", "performed", "NUMBER", "type", "string", "format", "uuid", "x", "nullable", "true", "Has", "work", "already", "be", "do", "on", "it", "I", "don", "t", "need", "it", "quite", "yet", "but", "will", "probably", "be", "implement", "one", "before", "too", "much", "longer", "NUMBER", "Thank", "you", "for", "the", "quick", "response", "Great", "to", "hear", "it", "will", "be", "part", "of", "the", "OpenAPI", "NUMBER", "implementation", "NUMBER", "Problem", "statement", "When", "I", "view", "the", "API", "spec", "use", "swagger", "serve", "I", "receive", "the", "following", "warning", "for", "several", "definitions", "Warning", "Other", "properties", "be", "defined", "at", "the", "same", "level", "as", "ref", "at", "definitions", "TicketListItemJSON", "properties", "assignedTo", "NUMBER", "They", "be", "IGNORED", "according", "to", "the", "JsonSchema", "spec", "Steps", "to", "reproduce", "I", "have", "created", "a", "minimal", "test", "case", "Create", "this", "file", "foo", "NUMBER", "go", "in", "an", "empty", "directory", "package", "foo", "Response", "be", "a", "response", "for", "foo", "swagger", "response", "FooResponse", "type", "Response", "struct", "Tickets", "Tickets", "json", "tickets", "type", "Tickets", "Ticket", "type", "Ticket", "struct", "The", "assignee", "AssignedTo", "Foo", "json", "assignedTo", "type", "Foo", "struct", "Then", "run", "swagger", "generate", "spec", "o", "swagger", "NUMBER", "json", "Then", "observe", "the", "resulting", "file", "and", "notice", "the", "section", "assignedTo", "description", "The", "assignee", "x", "go", "name", "AssignedTo", "ref", "definitions", "Foo", "Environment", "swagger", "version", "dev", "go", "version", "go", "version", "go", "NUMBER", "linux", "amd", "NUMBER", "flimzy", "this", "be", "only", "the", "part", "of", "json", "file", "NUMBER", "Could", "you", "provide", "this", "source", "code", "and", "generate", "schema", "somewhere", "on", "github", "I", "had", "similar", "problem", "before", "afair", "NUMBER", "gaplyk", "LINK", "test", "current", "schema", "be", "valid", "so", "it", "be", "not", "spec", "generator", "issue", "NUMBER", "So", "it", "s", "a", "problem", "with", "the", "serve", "command", "I", "guess", "flimzy", "I", "also", "encountered", "the", "same", "problem", "NUMBER", "JSON", "reference", "said", "Any", "members", "other", "than", "ref", "in", "a", "JSON", "Reference", "object", "SHALL", "be", "ignored", "NUMBER", "LINK", "pbryan", "zyp", "json", "ref", "NUMBER", "section", "NUMBER", "json", "assignedTo", "tag", "attache", "x", "go", "name", "property", "NUMBER", "But", "I", "want", "to", "use", "the", "json", "tag", "so", "this", "problem", "be", "not", "solve", "NUMBER", "Ignoring", "warnings", "NUMBER", "the", "values", "other", "than", "ref", "don", "t", "matter", "it", "doesn", "t", "affect", "validity", "of", "the", "spec", "it", "just", "means", "other", "field", "than", "ref", "be", "ignored", "NUMBER", "But", "they", "aren", "t", "ignored", "NUMBER", "That", "s", "the", "whole", "problem", "NUMBER", "They", "cause", "ugly", "warnings", "when", "run", "swagger", "serve", "NUMBER", "When", "use", "the", "client", "code", "you", "need", "to", "explicitly", "set", "the", "timeout", "when", "allocating", "the", "structs", "for", "the", "Params", "NUMBER", "i", "NUMBER", "e", "NUMBER", "Call", "NewGetProviderProfileParams", "Don", "t", "call", "GetProviderProfileParams", "The", "second", "case", "doesn", "t", "set", "the", "default", "timeout", "which", "now", "seems", "to", "be", "settable", "per", "request", "rather", "than", "globally", "for", "the", "transport", "NUMBER", "This", "be", "a", "problem", "because", "you", "instantly", "get", "a", "very", "bad", "error", "message", "about", "Context", "deadline", "exceeded", "NUMBER", "Would", "suggest", "If", "timeout", "be", "zero", "default", "to", "the", "transport", "level", "timeout", "on", "the", "submission", "of", "the", "request", "NUMBER", "Add", "some", "more", "helpful", "error", "messaging", "around", "the", "timeout", "scenario", "so", "you", "don", "t", "get", "the", "x", "net", "DeadlineExceeded", "standard", "message", "as", "an", "API", "consumer", "NUMBER", "Is", "there", "any", "circumstance", "where", "the", "fallback", "to", "the", "default", "timeout", "for", "the", "client", "when", "the", "request", "specific", "one", "be", "not", "set", "would", "be", "undesirable", "Happy", "to", "leave", "the", "error", "as", "be", "NUMBER", "Sent", "from", "my", "iPhone", "On", "NUMBER", "Feb", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "Ivan", "Porto", "Carrero", "TAG", "write", "so", "the", "point", "of", "the", "constructor", "method", "be", "this", "exact", "use", "case", "NUMBER", "We", "need", "a", "way", "to", "express", "forever", "because", "there", "be", "certain", "cases", "where", "you", "really", "don", "t", "want", "a", "request", "to", "timeout", "NUMBER", "For", "example", "when", "you", "write", "an", "API", "that", "behaves", "like", "docker", "attach", "exec", "NUMBER", "The", "reason", "I", "let", "it", "be", "context", "deadline", "exceeded", "be", "exactly", "because", "it", "s", "a", "well", "know", "error", "case", "that", "s", "easy", "to", "match", "for", "and", "that", "matcher", "be", "reusable", "outside", "the", "code", "of", "go", "swagger", "NUMBER", "That", "doesn", "t", "mean", "I", "would", "reject", "a", "PR", "from", "somebody", "make", "a", "more", "specific", "error", "type", "but", "I", "do", "think", "it", "would", "break", "a", "number", "of", "applications", "that", "already", "rely", "on", "this", "behavior", "NUMBER", "So", "that", "PR", "would", "have", "to", "include", "a", "flag", "to", "opt", "in", "to", "this", "behavior", "at", "generation", "time", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "or", "mute", "the", "thread", "NUMBER", "couldn", "t", "the", "timeout", "be", "a", "pointer", "nil", "becomes", "the", "default", "timeout", "and", "you", "could", "still", "set", "NUMBER", "for", "streams", "Problem", "statement", "In", "the", "code", "base", "when", "annotated", "with", "swagger", "route", "GET", "plugins", "ptype", "pname", "pversion", "getPlugin", "it", "generate", "with", "path", "inside", "swagger", "NUMBER", "json", "NUMBER", "While", "we", "have", "a", "similar", "route", "as", "swagger", "route", "GET", "plugins", "ptype", "pname", "pversion", "config", "getPluginConfig", "The", "annotation", "didn", "t", "get", "pick", "up", "into", "the", "swagger", "NUMBER", "json", "Environment", "swagger", "version", "dev", "go", "version", "go", "NUMBER", "OS", "darwin", "amd", "NUMBER", "casualjim", "yes", "NUMBER", "What", "I", "find", "be", "that", "it", "works", "in", "other", "cases", "NUMBER", "Only", "one", "particular", "case", "do", "not", "work", "which", "has", "the", "route", "as", "plugins", "ptype", "pname", "pversion", "config", "for", "GET", "PUT", "and", "DELETE", "NUMBER", "They", "re", "totally", "miss", "NUMBER", "This", "set", "of", "response", "has", "custom", "Marshal", "Unmarshal", "NUMBER", "Could", "this", "be", "the", "issue", "Thanks", "casualjim", "NUMBER", "Here", "be", "the", "link", "to", "the", "annotation", "LINK", "Here", "be", "the", "gist", "for", "swagger", "NUMBER", "json", "LINK", "Thank", "you", "casualjim", "apparently", "field", "in", "the", "config", "type", "was", "not", "export", "NUMBER", "After", "I", "had", "export", "those", "field", "it", "worked", "as", "expected", "NUMBER", "Thanks", "for", "your", "help", "NUMBER", "I", "m", "going", "to", "close", "this", "issue", "NUMBER", "Problem", "statement", "This", "regexp", "be", "valid", "in", "JavaScript", "and", "so", "as", "a", "pattern", "schema", "constraint", "in", "Swagger", "but", "rejected", "by", "swagger", "validate", "a", "z", "NUMBER", "NUMBER", "NUMBER", "a", "z", "NUMBER", "NUMBER", "_", "NUMBER", "NUMBER", "a", "z", "NUMBER", "NUMBER", "_", "a", "z", "NUMBER", "NUMBER", "_", "NUMBER", "NUMBER", "In", "this", "regexp", "the", "assertion", "enforces", "that", "the", "whole", "string", "be", "always", "at", "most", "NUMBER", "characters", "long", "NUMBER", "This", "cause", "of", "this", "failure", "be", "probably", "that", "the", "Go", "regexp", "package", "recognizes", "a", "smaller", "regexp", "syntax", "subset", "than", "Perl", "and", "JavaScript", "it", "doesn", "t", "recognizes", "NUMBER", "zero", "width", "positive", "look", "ahead", "assertion", "NUMBER", "Swagger", "specification", "Steps", "to", "reproduce", "Use", "the", "regexp", "in", "a", "pattern", "in", "a", "schema", "definition", "for", "a", "type", "string", "NUMBER", "Environment", "swagger", "version", "NUMBER", "eca", "NUMBER", "c", "NUMBER", "f", "NUMBER", "d", "NUMBER", "f", "NUMBER", "dbc", "NUMBER", "d", "NUMBER", "e", "NUMBER", "c", "NUMBER", "e", "go", "version", "NUMBER", "Sadly", "this", "be", "not", "support", "in", "Golang", "s", "regexp", "std", "package", "as", "there", "hasn", "t", "be", "find", "an", "efficient", "way", "of", "implement", "features", "such", "as", "lookahead", "while", "keep", "their", "O", "n", "complexity", "guarantee", "NUMBER", "Relevant", "discussion", "LINK", "So", "there", "be", "not", "much", "we", "can", "do", "I", "m", "afraid", "for", "the", "time", "be", "you", "ll", "have", "to", "refactor", "your", "Regexp", "in", "a", "way", "that", "you", "re", "not", "relying", "on", "the", "lookahead", "feature", "NUMBER", "GlenDC", "Refactoring", "of", "this", "particular", "pattern", "be", "possible", "but", "the", "result", "be", "much", "less", "readable", "but", "that", "may", "not", "be", "practical", "for", "all", "cases", "NUMBER", "And", "most", "importantly", "that", "s", "not", "the", "point", "NUMBER", "A", "Swagger", "spec", "use", "this", "pattern", "be", "valid", "NUMBER", "So", "swagger", "validate", "has", "a", "bug", "NUMBER", "I", "understand", "that", "go", "swagger", "may", "not", "be", "yet", "able", "to", "generate", "work", "client", "and", "server", "code", "from", "this", "regexp", "because", "of", "limitations", "of", "the", "regexp", "engine", "but", "that", "s", "not", "the", "point", "swagger", "validate", "should", "work", "anyway", "NUMBER", "casualjim", "The", "better", "solution", "would", "be", "to", "use", "the", "best", "of", "both", "worlds", "use", "regexp", "if", "possible", "because", "it", "safer", "against", "DoS", "attacks", "and", "be", "in", "stdlib", "and", "use", "regexp", "NUMBER", "only", "for", "patterns", "that", "use", "extend", "syntax", "when", "regexp", "NUMBER", "Compile", "fail", "NUMBER", "We", "experienced", "a", "malformed", "server", "generation", "while", "use", "goswagger", "with", "gb", "NUMBER", "There", "was", "an", "error", "because", "the", "code", "expected", "the", "go", "swagger", "runtime", "flagext", "package", "to", "be", "imported", "which", "was", "not", "NUMBER", "I", "regenerated", "the", "packaged", "template", "use", "NUMBER", "generator", "gen", "debug", "NUMBER", "sh", "NUMBER", "To", "reproduce", "the", "error", "you", "can", "just", "use", "any", "swagger", "file", "like", "the", "petstore", "example", "and", "use", "gb", "as", "build", "tool", "NUMBER", "After", "fetching", "all", "dependencies", "gb", "complains", "about", "not", "be", "able", "to", "compile", "NUMBER", "If", "there", "be", "still", "something", "miss", "or", "if", "you", "have", "any", "question", "about", "reproducing", "the", "error", "feel", "free", "to", "get", "back", "to", "me", "NUMBER", "Ah", "yeah", "sorry", "will", "do", "NUMBER", "Problem", "statement", "I", "see", "this", "line", "of", "code", "in", "the", "runtime", "LINK", "openapi", "runtime", "blob", "NUMBER", "affd", "NUMBER", "e", "NUMBER", "cac", "NUMBER", "dd", "NUMBER", "f", "NUMBER", "f", "NUMBER", "efa", "NUMBER", "d", "NUMBER", "e", "NUMBER", "cddb", "NUMBER", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "which", "indicates", "that", "the", "producers", "and", "consumers", "should", "be", "inferred", "from", "the", "specification", "NUMBER", "Is", "this", "work", "planned", "If", "not", "be", "it", "possible", "to", "register", "our", "own", "producers", "and", "consumers", "We", "re", "use", "json", "api", "LINK", "which", "requires", "a", "specific", "Accept", "and", "Content", "Type", "header", "NUMBER", "Swagger", "specification", "resources", "get", "description", "Returns", "a", "list", "of", "resources", "in", "JSON", "API", "format", "consumes", "application", "vnd", "NUMBER", "api", "json", "produces", "application", "vnd", "NUMBER", "api", "json", "parameters", "name", "filter", "attribute", "in", "query", "description", "Optional", "parameter", "for", "filtering", "by", "attribute", "required", "false", "type", "string", "responses", "NUMBER", "description", "Successful", "response", "schema", "ref", "definitions", "ResourceCollection", "casualjim", "I", "m", "get", "panic", "no", "consumer", "application", "vnd", "NUMBER", "api", "json", "use", "the", "spec", "above", "NUMBER", "thommahoney", "custom", "Consumers", "Producers", "for", "the", "client", "an", "be", "set", "as", "follows", "go", "import", "NUMBER", "httptransport", "github", "NUMBER", "com", "go", "openapi", "runtime", "client", "strfmt", "github", "NUMBER", "com", "go", "openapi", "strfmt", "myclient", "github", "NUMBER", "com", "username", "repo", "api", "client", "your", "generate", "client", "package", "NUMBER", "NUMBER", "rt", "httptransport", "NUMBER", "New", "myclient", "NUMBER", "DefaultHost", "myclient", "NUMBER", "DefaultBasePath", "myclient", "NUMBER", "DefaultSchemes", "rt", "NUMBER", "Consumers", "application", "vnd", "NUMBER", "api", "json", "httptransport", "NUMBER", "JSONConsumer", "rt", "NUMBER", "Producers", "application", "vnd", "NUMBER", "api", "json", "httptransport", "NUMBER", "JSONProducer", "Create", "Client", "use", "the", "function", "below", "instead", "of", "myclient", "NUMBER", "NewHTTPClient", "myclient", "NUMBER", "NewHTTPClientWithConfig", "myclient", "NUMBER", "New", "rt", "strfmt", "NUMBER", "Default", "NUMBER", "Relevant", "runtime", "issue", "LINK", "openapi", "runtime", "issue", "NUMBER", "LINK", "openapi", "runtime", "issue", "NUMBER", "Thank", "you", "both", "for", "your", "help", "on", "this", "NUMBER", "thommahoney", "be", "your", "service", "now", "work", "as", "expected", "Yes", "you", "can", "close", "this", "issue", "NUMBER", "GlenDC", "I", "had", "the", "same", "problem", "and", "Instead", "of", "httptransport", "NUMBER", "JSONConsumer", "i", "had", "to", "change", "to", "runtime", "NUMBER", "JSONConsumer", "from", "import", "github", "NUMBER", "com", "go", "openapi", "runtime", "Yes", "ZandorZ", "you", "be", "correct", "NUMBER", "My", "original", "comment", "was", "wrong", "Same", "goes", "for", "any", "of", "the", "producers", "consumers", "you", "might", "wish", "to", "use", "from", "the", "runtime", "root", "package", "NUMBER", "Problem", "statement", "We", "would", "like", "to", "be", "able", "to", "set", "an", "arbitrary", "user", "agent", "header", "either", "at", "client", "generation", "time", "or", "at", "compile", "time", "NUMBER", "Is", "it", "possible", "to", "do", "this", "Swagger", "specification", "The", "Swagger", "specification", "be", "irrelevant", "in", "this", "case", "because", "we", "be", "use", "the", "same", "specification", "to", "generate", "many", "clients", "NUMBER", "If", "I", "understand", "correctly", "you", "re", "saying", "that", "we", "ought", "to", "write", "our", "own", "Submit", "function", "defined", "here", "LINK", "openapi", "runtime", "blob", "NUMBER", "d", "NUMBER", "dfae", "NUMBER", "a", "NUMBER", "a", "NUMBER", "c", "NUMBER", "ce", "NUMBER", "acb", "NUMBER", "fa", "NUMBER", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "that", "implement", "the", "runtime", "NUMBER", "ClientTransport", "interface", "and", "configure", "our", "client", "to", "use", "that", "instead", "use", "the", "New", "function", "All", "set", "here", "NUMBER", "Thanks", "NUMBER", "Feel", "free", "to", "close", "this", "issue", "NUMBER", "Can", "the", "same", "pattern", "of", "use", "an", "http", "NUMBER", "RoundTripper", "be", "use", "to", "implement", "the", "AWS", "Signature", "v", "NUMBER", "which", "requires", "reading", "and", "modifying", "the", "http", "NUMBER", "Request", "before", "its", "sent", "Indeed", "it", "can", "thank", "you", "NUMBER", "Is", "it", "possible", "to", "do", "this", "without", "a", "http", "NUMBER", "RoundTripper", "I", "m", "use", "gock", "for", "mocking", "the", "request", "in", "a", "test", "NUMBER", "But", "the", "test", "won", "t", "work", "because", "the", "roundtripper", "var", "be", "already", "set", "NUMBER", "See", "LINK", "Problem", "statement", "In", "a", "server", "When", "attempting", "to", "validate", "a", "UUID", "in", "client", "supplied", "data", "the", "generate", "code", "under", "restapi", "operations", "will", "make", "a", "call", "like", "value", "err", "formats", "NUMBER", "Parse", "uuid", "raw", "This", "will", "cause", "the", "Parse", "function", "in", "go", "openapi", "strfmt", "format", "NUMBER", "go", "to", "be", "call", "which", "will", "attempt", "to", "validate", "the", "format", "of", "the", "client", "supplied", "data", "by", "applying", "the", "strfmt", "NUMBER", "UUID", "NUMBER", "UnmarshalText", "function", "NUMBER", "However", "the", "strfmt", "NUMBER", "UUID", "NUMBER", "UnmarshalText", "function", "defined", "in", "go", "openapi", "strfmt", "default", "NUMBER", "go", "actually", "accepts", "any", "input", "string", "and", "not", "just", "those", "formatted", "as", "UUIDs", "NUMBER", "There", "be", "a", "comment", "associated", "with", "that", "function", "validation", "be", "performed", "later", "on", "NUMBER", "Should", "validation", "of", "UUIDs", "should", "actually", "be", "performed", "use", "strfmt", "NUMBER", "IsUUID", "Environment", "swagger", "version", "NUMBER", "commit", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ccde", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "go", "version", "NUMBER", "linux", "amd", "NUMBER", "OS", "Fedora", "NUMBER", "Looking", "at", "this", "some", "more", "it", "seems", "that", "formats", "NUMBER", "Parse", "be", "actually", "work", "as", "designed", "and", "be", "not", "intended", "to", "validate", "the", "string", "NUMBER", "Validation", "could", "be", "achieved", "by", "calling", "formats", "NUMBER", "Validates", "uuid", "raw", "and", "checking", "the", "return", "value", "however", "this", "do", "not", "appear", "to", "happen", "in", "the", "generate", "code", "NUMBER", "Is", "this", "something", "which", "should", "be", "happening", "or", "have", "I", "misunderstood", "It", "might", "also", "be", "worth", "mentioning", "that", "this", "be", "a", "parameter", "which", "be", "pass", "directly", "in", "the", "query", "string", "of", "a", "GET", "request", "with", "no", "model", "generate", "NUMBER", "Relevant", "extract", "from", "spec", "endpoint", "get", "parameters", "name", "queryId", "in", "query", "type", "string", "format", "uuid", "required", "true", "This", "has", "become", "a", "bit", "of", "a", "blocker", "for", "my", "team", "NUMBER", "If", "I", "can", "help", "out", "in", "any", "way", "here", "let", "me", "know", "NUMBER", "Thanks", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "increase", "coverage", "by", "TAG", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "NUMBER", "fa", "NUMBER", "ff", "NUMBER", "e", "NUMBER", "d", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "fa", "NUMBER", "ff", "NUMBER", "e", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ccdfdd", "NUMBER", "e", "NUMBER", "e", "NUMBER", "e", "NUMBER", "d", "NUMBER", "cbca", "NUMBER", "cba", "NUMBER", "e", "NUMBER", "c", "NUMBER", "c", "NUMBER", "f", "NUMBER", "abd", "NUMBER", "f", "NUMBER", "src", "pr", "Problem", "statement", "As", "the", "API", "endpoints", "proliferate", "I", "be", "in", "need", "of", "aggregating", "leaf", "models", "into", "larger", "aggregate", "models", "through", "composition", "NUMBER", "I", "thought", "I", "was", "get", "the", "hang", "of", "the", "spec", "by", "doing", "this", "plan_attributes", "type", "object", "required", "birthday", "fipsCode", "healthAssessment", "properties", "birthday", "type", "string", "format", "string", "minLength", "NUMBER", "fipsCode", "type", "string", "format", "string", "healthAssessment", "type", "string", "format", "string", "services", "type", "object", "ref", "definitions", "medicalServices", "medications", "type", "object", "ref", "definitions", "drugList", "but", "that", "yields", "warnings", "like", "these", "from", "swagger", "serve", "my", "api", "NUMBER", "yml", "Warning", "Other", "properties", "be", "defined", "at", "the", "same", "level", "as", "ref", "at", "definitions", "plan_attributes", "properties", "medications", "NUMBER", "They", "be", "IGNORED", "according", "to", "the", "JsonSchema", "spec", "Warning", "Other", "properties", "be", "defined", "at", "the", "same", "level", "as", "ref", "at", "definitions", "plan_attributes", "properties", "services", "NUMBER", "They", "be", "IGNORED", "according", "to", "the", "JsonSchema", "spec", "What", "be", "the", "proper", "way", "to", "aggregate", "leaf", "models", "into", "larger", "entities", "without", "having", "to", "copy", "and", "paste", "all", "the", "attributes", "in", "the", "aggregation", "models", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "Windows", "NUMBER", "That", "indeed", "was", "the", "way", "NUMBER", "This", "issue", "can", "be", "close", "NUMBER", "Fixes", "NUMBER", "Note", "that", "I", "in", "the", "end", "opted", "for", "build", "a", "super", "simple", "server", "as", "the", "kvstore", "had", "in", "my", "opinion", "way", "to", "much", "details", "that", "would", "distract", "the", "reader", "of", "this", "tutorial", "NUMBER", "The", "actual", "goal", "of", "this", "tutorial", "be", "to", "teach", "users", "new", "to", "go", "swagger", "how", "to", "build", "a", "server", "with", "a", "custom", "defined", "cli", "and", "hand", "write", "handlers", "NUMBER", "The", "tutorial", "do", "reference", "the", "kvstore", "example", "twice", "NUMBER", "Especially", "in", "the", "end", "we", "want", "to", "make", "clear", "that", "the", "server", "we", "created", "in", "this", "tutorial", "be", "very", "simple", "and", "that", "the", "user", "might", "want", "to", "check", "out", "the", "kvstore", "example", "next", "to", "see", "a", "more", "complex", "example", "build", "use", "the", "exact", "same", "techniques", "as", "showcases", "in", "this", "tutorial", "NUMBER", "For", "now", "I", "ve", "stored", "the", "end", "result", "of", "the", "tutorial", "as", "LINK", "swagger", "server", "but", "in", "case", "you", "want", "it", "to", "be", "under", "the", "go", "swagger", "namespace", "I", "don", "t", "mind", "transferring", "ownership", "NUMBER", "Problem", "statement", "Hello", "When", "I", "specify", "endpoints", "ending", "with", "a", "slash", "in", "my", "swagger", "file", "at", "runtime", "when", "trying", "to", "reach", "the", "same", "endpoint", "I", "get", "a", "code", "NUMBER", "message", "path", "trailingslashpath", "was", "not", "find", "response", "NUMBER", "It", "looks", "relate", "to", "this", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "pull", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "but", "the", "problem", "do", "not", "come", "from", "the", "same", "code", "NUMBER", "I", "don", "t", "know", "if", "this", "be", "an", "expected", "result", "or", "not", "NUMBER", "The", "behavior", "seems", "to", "be", "due", "to", "the", "DefaultRouter", "LINK", "openapi", "runtime", "blob", "master", "middleware", "router", "NUMBER", "go", "function", "NUMBER", "It", "calls", "the", "path", "NUMBER", "Join", "function", "which", "remove", "any", "trail", "slash", "except", "for", "the", "root", "path", "NUMBER", "The", "result", "be", "that", "no", "handler", "seems", "to", "be", "registered", "NUMBER", "Swagger", "specification", "swagger", "NUMBER", "info", "title", "api", "version", "NUMBER", "consumes", "application", "json", "produces", "application", "json", "schemes", "http", "basePath", "paths", "trailingslashpath", "get", "responses", "NUMBER", "description", "OK", "no", "content", "Steps", "to", "reproduce", "Start", "the", "server", "generate", "use", "the", "swagger", "Call", "the", "server", "on", "the", "trailingslashpath", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "OS", "Debian", "NUMBER", "casualjim", "did", "you", "have", "a", "local", "fix", "somewhere", "for", "this", "or", "do", "you", "need", "people", "to", "look", "at", "this", "I", "m", "on", "tip", "of", "master", "and", "I", "m", "still", "having", "this", "problem", "even", "though", "a", "fix", "has", "be", "merge", "in", "NUMBER", "Fixed", "it", "thx", "NUMBER", "Just", "to", "be", "sure", "the", "expected", "result", "be", "that", "path", "with", "and", "without", "trail", "slash", "be", "handle", "the", "same", "way", "Problem", "statement", "When", "I", "send", "a", "POST", "request", "use", "the", "client", "API", "I", "get", "a", "NUMBER", "Unsupported", "Media", "Type", "response", "NUMBER", "I", "notice", "that", "the", "request", "has", "an", "extra", "header", "that", "sets", "Transfer", "Encoding", "chunked", "NUMBER", "On", "the", "other", "hand", "sending", "the", "POST", "request", "via", "curl", "works", "fine", "because", "it", "doesn", "t", "have", "that", "header", "NUMBER", "This", "be", "my", "first", "go", "swagger", "client", "and", "server", "NUMBER", "So", "it", "be", "likely", "that", "I", "be", "doing", "something", "wrong", "either", "in", "the", "code", "or", "in", "the", "swagger", "specification", "file", "NUMBER", "Here", "be", "the", "request", "and", "response", "POST", "api", "v", "NUMBER", "keys", "k", "value", "v", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "User", "Agent", "Go", "http", "client", "NUMBER", "Transfer", "Encoding", "chunked", "Accept", "application", "json", "Accept", "Encoding", "gzip", "NUMBER", "HTTP", "NUMBER", "NUMBER", "Unsupported", "Media", "Type", "Connection", "close", "Content", "Length", "NUMBER", "Content", "Type", "application", "json", "Date", "Mon", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "code", "NUMBER", "message", "unsupported", "media", "type", "application", "octet", "stream", "only", "application", "json", "be", "allow", "Error", "unknown", "error", "status", "NUMBER", "resp", "NUMBER", "xc", "NUMBER", "ac", "NUMBER", "And", "here", "be", "the", "error", "client", "be", "receiving", "runtime", "NUMBER", "APIError", "OperationName", "unknown", "error", "Response", "client", "NUMBER", "response", "resp", "http", "NUMBER", "Response", "NUMBER", "xc", "NUMBER", "Code", "NUMBER", "Swagger", "specification", "yaml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "Testman", "schemes", "http", "host", "localhost", "basePath", "api", "v", "NUMBER", "produces", "application", "json", "consumes", "application", "json", "paths", "keys", "key", "get", "parameters", "name", "key", "in", "path", "required", "true", "type", "string", "responses", "NUMBER", "description", "Successful", "response", "NUMBER", "description", "Not", "find", "post", "parameters", "name", "key", "in", "path", "required", "true", "type", "string", "name", "value", "in", "query", "required", "true", "type", "string", "responses", "NUMBER", "description", "Successful", "response", "Steps", "to", "reproduce", "I", "push", "everything", "needed", "to", "reproduce", "this", "issue", "at", "LINK", "eg", "Environment", "Swagger", "version", "NUMBER", "Go", "version", "go", "version", "devel", "NUMBER", "a", "NUMBER", "c", "NUMBER", "c", "NUMBER", "Sat", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "linux", "amd", "NUMBER", "OS", "linux", "I", "tried", "to", "reproduce", "your", "issue", "as", "follows", "bash", "go", "get", "d", "github", "NUMBER", "com", "siadat", "swagger", "eg", "cd", "GOPATH", "src", "github", "NUMBER", "com", "siadat", "swagger", "eg", "swagger", "generate", "server", "swagger", "NUMBER", "yaml", "target", "swagger", "swagger", "generate", "client", "swagger", "NUMBER", "yaml", "target", "swagger", "go", "run", "server", "NUMBER", "go", "go", "run", "client", "NUMBER", "go", "And", "it", "seems", "to", "work", "as", "you", "would", "think", "as", "I", "get", "a", "NUMBER", "OK", "result", "POST", "api", "v", "NUMBER", "keys", "k", "value", "v", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "User", "Agent", "Go", "http", "client", "NUMBER", "Content", "Length", "NUMBER", "Accept", "application", "json", "Accept", "Encoding", "gzip", "HTTP", "NUMBER", "NUMBER", "OK", "Connection", "close", "Content", "Length", "NUMBER", "Content", "Type", "application", "json", "Date", "Mon", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Are", "you", "sure", "these", "be", "the", "reproduction", "steps", "that", "you", "followed", "siadat", "Or", "be", "I", "miss", "a", "step", "Also", "can", "you", "please", "specify", "the", "swagger", "version", "by", "run", "swagger", "version", "NUMBER", "I", "be", "assuming", "you", "run", "the", "latest", "dev", "version", "because", "of", "your", "Makefile", "NUMBER", "Also", "be", "you", "sure", "you", "re", "test", "your", "server", "use", "go", "run", "client", "NUMBER", "go", "and", "not", "via", "curl", "httpie", "postman", "or", "w", "e", "NUMBER", "casualjim", "How", "do", "I", "set", "the", "content", "type", "I", "be", "use", "the", "generate", "API", "and", "I", "cannot", "find", "the", "API", "to", "change", "the", "content", "type", "or", "other", "request", "headers", "NUMBER", "GlenDC", "I", "reproduced", "the", "issue", "use", "another", "computer", "NUMBER", "I", "get", "the", "same", "result", "NUMBER", "NUMBER", "go", "version", "go", "version", "devel", "NUMBER", "b", "NUMBER", "a", "NUMBER", "Mon", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "linux", "amd", "NUMBER", "swagger", "version", "dev", "In", "case", "it", "could", "be", "useful", "here", "be", "the", "list", "of", "the", "last", "commit", "I", "have", "for", "go", "swagger", "repo", "and", "each", "go", "openapi", "repo", "b", "NUMBER", "d", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "analysis", "fc", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "error", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "jsonpointer", "NUMBER", "d", "NUMBER", "bf", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "jsonreference", "NUMBER", "bb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "loads", "NUMBER", "b", "NUMBER", "ebb", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "aa", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "spec", "NUMBER", "cb", "NUMBER", "db", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "d", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "swag", "NUMBER", "dcd", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "validate", "It", "might", "be", "a", "good", "idea", "to", "check", "the", "generate", "file", "perhaps", "compare", "them", "with", "the", "file", "that", "were", "generate", "in", "your", "case", "NUMBER", "For", "this", "purpose", "I", "add", "them", "to", "the", "same", "LINK", "eg", "repo", "NUMBER", "Another", "observation", "instead", "of", "go", "run", "server", "NUMBER", "go", "go", "run", "client", "NUMBER", "go", "I", "run", "go", "run", "swagger", "cmd", "testman", "server", "main", "NUMBER", "go", "port", "NUMBER", "go", "run", "client", "NUMBER", "go", "Got", "the", "same", "NUMBER", "response", "NUMBER", "Found", "it", "NUMBER", "The", "client", "API", "do", "not", "work", "with", "the", "latest", "development", "version", "of", "Go", "NUMBER", "This", "be", "the", "commit", "on", "which", "the", "client", "API", "stopped", "work", "golang", "go", "NUMBER", "f", "NUMBER", "a", "I", "think", "we", "all", "use", "Go", "as", "in", "release", "version", "NUMBER", "Which", "for", "me", "at", "the", "moment", "be", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "Does", "that", "mean", "you", "be", "not", "planning", "to", "support", "Go", "NUMBER", "It", "will", "be", "out", "in", "about", "a", "week", "NUMBER", "I", "think", "it", "will", "be", "support", "NUMBER", "But", "only", "when", "it", "be", "release", "NUMBER", "casualjim", "might", "know", "more", "about", "this", "though", "NUMBER", "Thank", "you", "NUMBER", "What", "s", "the", "current", "status", "of", "this", "I", "m", "get", "this", "bug", "with", "go", "NUMBER", "stable", "NUMBER", "We", "be", "encountering", "this", "error", "as", "well", "NUMBER", "Any", "update", "on", "this", "I", "couldn", "t", "find", "an", "example", "of", "use", "the", "generate", "client", "API", "NUMBER", "All", "examples", "be", "use", "the", "generate", "server", "API", "only", "NUMBER", "Please", "provide", "a", "simple", "example", "of", "how", "to", "use", "the", "generate", "client", "API", "NUMBER", "Thanks", "Thank", "you", "that", "s", "useful", "NUMBER", "I", "was", "looking", "for", "it", "in", "examples", "dir", "I", "didn", "t", "check", "the", "docs", "dir", "NUMBER", "Problem", "statement", "Multi", "file", "swagger", "definition", "do", "not", "resolve", "correctly", "or", "be", "ignored", "by", "swagger", "generate", "client", "f", "NUMBER", "_api", "swagger", "NUMBER", "yaml", "Swagger", "specification", "project", "_api", "swagger", "NUMBER", "yaml", "swagger", "NUMBER", "info", "title", "Some", "API", "description", "Some", "API", "version", "NUMBER", "host", "someapi", "NUMBER", "com", "schemes", "https", "basePath", "v", "NUMBER", "produces", "application", "json", "paths", "health_check", "ref", "NUMBER", "paths", "health_check", "NUMBER", "yaml", "project", "_api", "paths", "health_check", "NUMBER", "yaml", "get", "summary", "Health", "Check", "responses", "NUMBER", "description", "Server", "OK", "Steps", "to", "reproduce", "NUMBER", "Copy", "both", "specification", "data", "above", "into", "a", "folder", "project", "NUMBER", "NUMBER", "Run", "from", "the", "project", "folder", "swagger", "generate", "client", "f", "NUMBER", "_api", "swagger", "NUMBER", "yaml", "Expected", "Behaviour", "Client", "code", "generate", "with", "HealthCheck", "interfaces", "Actual", "Behaviour", "Client", "code", "Generation", "completed", "with", "no", "interfaces", "for", "any", "path", "functionalities", "NUMBER", "console", "output", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "grouping", "operations", "into", "package", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "meta", "data", "and", "facades", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "application", "Bookings", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "Bookings", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "client", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "bookings_client", "NUMBER", "go", "in", "client", "as", "facade", "Generation", "completed", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "github", "NUMBER", "com", "go", "openapi", "runtime", "golang", "NUMBER", "org", "x", "net", "context", "golang", "NUMBER", "org", "x", "net", "context", "ctxhttp", "You", "can", "get", "these", "now", "with", "go", "get", "u", "f", "NUMBER", "NUMBER", "Environment", "swagger", "version", "dev", "go", "version", "NUMBER", "linux", "amd", "NUMBER", "OS", "Linux", "Ubuntu", "NUMBER", "LTS", "Thanks", "swagger", "flatten", "did", "the", "trick", "NUMBER", "However", "I", "be", "left", "wondering", "why", "swagger", "generate", "do", "not", "flatten", "the", "spec", "first", "NUMBER", "Isn", "t", "it", "safe", "to", "assume", "that", "ref", "lines", "in", "a", "spec", "should", "be", "flattened", "PS", "NUMBER", "I", "also", "get", "another", "bug", "from", "flattening", "but", "that", "isn", "t", "relate", "to", "this", "NUMBER", "I", "will", "open", "a", "new", "issue", "for", "that", "NUMBER", "NUMBER", "Problem", "statement", "Does", "not", "run", "from", "a", "subdirectory", "in", "GOPATH", "src", "NUMBER", "Steps", "to", "reproduce", "sh", "somewhere", "on", "gopath", "cd", "subdir", "swagger", "generate", "server", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "target", "must", "reside", "inside", "a", "location", "in", "the", "GOPATH", "src", "Workaround", "sh", "somewhere", "on", "gopath", "swagger", "generate", "server", "target", "subdir", "generates", "I", "d", "use", "the", "workaround", "but", "I", "have", "the", "command", "in", "subdir", "Makefile", "and", "run", "with", "make", "C", "subdir", "NUMBER", "Oh", "actually", "not", "true", "what", "I", "change", "was", "use", "the", "version", "from", "brew", "install", "rather", "than", "go", "get", "NUMBER", "So", "it", "seems", "it", "doesn", "t", "care", "where", "the", "target", "be", "if", "the", "binary", "s", "in", "GOPATH", "bin", "Why", "do", "it", "need", "any", "relationship", "with", "GOPATH", "anyway", "at", "generate", "time", "Also", "it", "shouldn", "t", "make", "a", "difference", "if", "you", "use", "the", "brew", "version", "install", "in", "usr", "local", "bin", "or", "the", "one", "from", "GOPATH", "bin", "though", "NUMBER", "Can", "you", "please", "give", "more", "details", "in", "your", "steps", "to", "reproduce", "this", "as", "the", "problem", "might", "just", "be", "that", "you", "weren", "t", "in", "a", "valid", "GOPATH", "when", "trying", "to", "generate", "NUMBER", "Because", "we", "use", "goimports", "to", "resolve", "imported", "libraries", "package", "Oh", "okay", "NUMBER", "You", "re", "generating", "go", "code", "so", "if", "you", "want", "to", "compile", "it", "it", "would", "also", "need", "to", "be", "in", "a", "gopath", "Yep", "but", "I", "m", "compile", "it", "in", "a", "Docker", "container", "NUMBER", "shouldn", "t", "make", "a", "difference", "if", "you", "use", "the", "brew", "version", "install", "in", "usr", "local", "bin", "Yep", "NUMBER", "Can", "you", "please", "give", "more", "details", "in", "your", "steps", "to", "reproduce", "this", "sh", "GOPATH", "bin", "swagger", "generate", "server", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "target", "must", "reside", "inside", "a", "location", "in", "the", "GOPATH", "src", "GOPATH", "bin", "swagger", "version", "dev", "which", "swagger", "usr", "local", "bin", "swagger", "swagger", "version", "version", "NUMBER", "commit", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ccde", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "swagger", "generate", "server", "NUMBER", "NUMBER", "Generation", "completed", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "github", "NUMBER", "com", "go", "openapi", "runtime", "github", "NUMBER", "com", "tylerb", "graceful", "github", "NUMBER", "com", "jessevdk", "go", "flags", "golang", "NUMBER", "org", "x", "net", "context", "You", "can", "get", "these", "now", "with", "go", "get", "u", "f", "NUMBER", "NUMBER", "What", "be", "your", "exact", "work", "directory", "fully", "specified", "at", "the", "point", "of", "generation", "projectname", "which", "isn", "t", "on", "my", "GOPATH", "now", "I", "look", "at", "it", "NUMBER", "But", "it", "works", "despite", "that", "with", "the", "go", "get", "ted", "version", "NUMBER", "OJFord", "you", "have", "anymore", "update", "on", "this", "one", "I", "ended", "up", "agreeing", "with", "casualjim", "about", "run", "generation", "in", "the", "container", "as", "long", "as", "I", "was", "able", "to", "write", "my", "handlers", "on", "the", "host", "machine", "without", "the", "generate", "stuff", "cf", "NUMBER", "NUMBER", "to", "avoid", "needing", "to", "synchronise", "or", "use", "a", "volume", "NUMBER", "I", "haven", "t", "actually", "get", "that", "work", "yet", "because", "I", "run", "into", "NUMBER", "and", "had", "to", "leave", "it", "as", "I", "don", "t", "have", "time", "really", "NUMBER", "I", "ll", "close", "this", "though", "as", "it", "seems", "I", "was", "basically", "expecting", "a", "behaviour", "to", "always", "occur", "that", "wasn", "t", "intentionally", "occurring", "at", "all", "NUMBER", "fix", "NUMBER", "casualjim", "I", "replaced", "the", "original", "fix", "with", "the", "actual", "fix", "NUMBER", "ValueExpression", "be", "now", "add", "to", "the", "GenHeader", "NUMBER", "Also", "add", "your", "test", "and", "checked", "the", "generate", "code", "also", "manually", "NUMBER", "Seems", "to", "be", "be", "all", "fine", "AFAIK", "NUMBER", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "increase", "coverage", "by", "NUMBER", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "NUMBER", "d", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "d", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "d", "NUMBER", "eb", "NUMBER", "bbc", "NUMBER", "da", "NUMBER", "c", "NUMBER", "c", "NUMBER", "f", "NUMBER", "ab", "NUMBER", "b", "NUMBER", "d", "NUMBER", "c", "NUMBER", "da", "NUMBER", "e", "NUMBER", "d", "NUMBER", "ce", "NUMBER", "ae", "NUMBER", "f", "NUMBER", "e", "NUMBER", "ec", "NUMBER", "ad", "NUMBER", "e", "NUMBER", "de", "NUMBER", "bbc", "NUMBER", "src", "pr", "Struggling", "with", "go", "swagger", "and", "mongoDB", "_id", "returned", "from", "mongoDB", "use", "mgo", "driver", "be", "of", "type", "bson", "NUMBER", "ObjectId", "NUMBER", "Example", "model", "yaml", "Message", "type", "object", "required", "text", "properties", "id", "type", "string", "readOnly", "true", "text", "type", "string", "When", "I", "get", "Messages", "from", "DB", "by", "go", "NUMBER", "message", "models", "NUMBER", "Message", "if", "err", "c", "NUMBER", "Find", "nil", "NUMBER", "All", "message", "err", "nil", "log", "NUMBER", "Print", "Error", "on", "get", "message", "err", "return", "message", "NUMBER", "NewGetMessageOK", "NUMBER", "WithPayload", "message", "The", "API", "response", "omitting", "the", "id", "property", "NUMBER", "Actually", "it", "s", "even", "stored", "as", "an", "empty", "string", "in", "mongoDB", "NUMBER", "HTTP", "NUMBER", "NUMBER", "OK", "Content", "Length", "NUMBER", "Content", "Type", "application", "json", "Date", "Sat", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "text", "string", "Is", "there", "any", "way", "to", "cast", "the", "bson", "NUMBER", "ObjectId", "to", "something", "that", "the", "generate", "server", "can", "work", "with", "or", "do", "I", "have", "to", "use", "the", "opposite", "approach", "by", "write", "the", "server", "and", "generate", "the", "swagger", "spec", "afterwards", "And", "by", "the", "way", "what", "effect", "do", "readOnly", "have", "since", "it", "s", "possible", "to", "POST", "that", "parameter", "against", "the", "API", "If", "you", "named", "your", "field", "_id", "instead", "of", "id", "I", "think", "you", "d", "be", "able", "to", "read", "it", "NUMBER", "Like", "yaml", "Message", "type", "object", "required", "_id", "text", "properties", "_id", "type", "string", "text", "type", "string", "Already", "test", "that", "NUMBER", "_id", "gets", "translated", "into", "id", "and", "returns", "as", "_id", "NUMBER", "Even", "if", "I", "try", "to", "insert", "a", "model", "with", "_id", "as", "readOnly", "it", "inserts", "as", "id", "into", "database", "NUMBER", "Weird", "not", "sure", "why", "it", "gets", "translated", "NUMBER", "I", "m", "use", "go", "swagger", "with", "mongo", "models", "and", "it", "works", "ok", "NUMBER", "For", "example", "this", "model", "spec", "LINK", "L", "NUMBER", "generates", "this", "struct", "LINK", "_account", "NUMBER", "go", "L", "NUMBER", "NUMBER", "The", "swagger", "client", "be", "generate", "with", "this", "command", "LINK", "L", "NUMBER", "NUMBER", "btw", "I", "just", "find", "out", "you", "can", "type", "_id", "in", "markdown", "by", "escaping", "the", "underscore", "like", "this", "_id", "And", "by", "the", "way", "what", "effect", "do", "readOnly", "have", "since", "it", "s", "possible", "to", "POST", "that", "parameter", "against", "the", "API", "Let", "me", "answer", "that", "question", "use", "the", "official", "specification", "Relevant", "only", "for", "Schema", "properties", "definitions", "NUMBER", "Declares", "the", "property", "as", "read", "only", "NUMBER", "This", "means", "that", "it", "MAY", "be", "sent", "as", "part", "of", "a", "response", "but", "MUST", "NOT", "be", "sent", "as", "part", "of", "the", "request", "NUMBER", "Properties", "marked", "as", "readOnly", "be", "true", "SHOULD", "NOT", "be", "in", "the", "required", "list", "of", "the", "defined", "schema", "NUMBER", "Default", "value", "be", "false", "NUMBER", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "schema", "object", "CuBiC", "NUMBER", "D", "can", "you", "please", "to", "try", "to", "explain", "the", "problem", "in", "a", "different", "way", "as", "I", "fail", "to", "understand", "the", "exact", "issue", "here", "NUMBER", "Also", "do", "you", "have", "a", "link", "to", "your", "project", "or", "be", "it", "close", "source", "Everything", "you", "describe", "in", "your", "issue", "description", "seems", "to", "behave", "as", "normal", "AFAIK", "NUMBER", "So", "please", "help", "me", "help", "you", "by", "helping", "me", "understand", "your", "situation", "exactly", "NUMBER", "The", "API", "response", "omitting", "the", "id", "property", "NUMBER", "Actually", "it", "s", "even", "stored", "as", "an", "empty", "string", "in", "mongoDB", "NUMBER", "As", "the", "id", "property", "isn", "t", "marked", "as", "required", "it", "will", "have", "the", "omitempty", "json", "property", "annotation", "and", "thus", "be", "omitted", "as", "expected", "as", "you", "can", "see", "in", "your", "response", "NUMBER", "Already", "test", "that", "NUMBER", "_id", "gets", "translated", "into", "id", "and", "returns", "as", "_id", "NUMBER", "Even", "if", "I", "try", "to", "insert", "a", "model", "with", "_id", "as", "readOnly", "it", "inserts", "as", "id", "into", "database", "NUMBER", "The", "renaming", "of", "_id", "might", "be", "exampled", "because", "of", "the", "automate", "name", "mangling", "originating", "down", "to", "swag", "NUMBER", "ToVarName", "although", "I", "think", "it", "might", "be", "a", "bug", "in", "case", "it", "actually", "affects", "your", "public", "interface", "s", "name", "NUMBER", "Can", "you", "please", "give", "a", "more", "detailed", "disruption", "of", "this", "specific", "issue", "as", "well", "with", "steps", "on", "how", "to", "reproduce", "it", "NUMBER", "rjeczalik", "escaping", "with", "_id", "leads", "to", "a", "more", "weird", "behavior", "NUMBER", "It", "generates", "go", "id", "Required", "true", "ID", "string", "json", "_id", "But", "the", "actual", "output", "by", "return", "message", "NUMBER", "NewGetMessageOK", "NUMBER", "WithPayload", "message", "gives", "me", "a", "capitalized", "ID", "NUMBER", "HTTP", "NUMBER", "NUMBER", "OK", "Content", "Length", "NUMBER", "Content", "Type", "application", "json", "Date", "Sun", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "ID", "null", "NUMBER", "GlenDC", "Can", "t", "publish", "the", "source", "at", "this", "time", "but", "can", "make", "a", "complete", "example", "if", "needed", "NUMBER", "But", "let", "me", "explain", "to", "make", "it", "clear", "I", "can", "t", "use", "the", "generate", "models", "to", "interact", "with", "a", "mongoDB", "NUMBER", "Tried", "a", "bit", "around", "and", "find", "out", "where", "the", "actual", "problem", "be", "NUMBER", "Object", "transmission", "in", "mongoDB", "be", "use", "bson", "not", "json", "NUMBER", "Go", "translates", "the", "Go", "models", "to", "bson", "just", "by", "converting", "them", "to", "lowercase", "just", "like", "json", "NUMBER", "But", "here", "be", "the", "exception", "_id", "which", "be", "represented", "in", "Go", "as", "ID", "string", "json", "_id", "NUMBER", "mongoDB", "ignores", "the", "json", "tag", "field", "and", "always", "translates", "ID", "into", "id", "NUMBER", "So", "storing", "request", "or", "responding", "with", "any", "results", "from", "mongoDB", "be", "impossible", "NUMBER", "If", "I", "edit", "the", "tags", "manually", "into", "ID", "string", "bson", "_id", "json", "_id", "it", "works", "HTTP", "NUMBER", "NUMBER", "OK", "Content", "Length", "NUMBER", "Content", "Type", "application", "json", "Date", "Sun", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "_id", "X", "w", "g", "NUMBER", "NUMBER", "Ok", "actually", "it", "s", "garbage", "but", "just", "because", "it", "s", "actually", "not", "a", "string", "but", "a", "bson", "NUMBER", "ObjectId", "NUMBER", "Changing", "it", "into", "ID", "bson", "NUMBER", "ObjectId", "bson", "_id", "json", "_id", "gives", "me", "HTTP", "NUMBER", "NUMBER", "OK", "Content", "Length", "NUMBER", "Content", "Type", "application", "json", "Date", "Sun", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "_id", "NUMBER", "ed", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "b", "NUMBER", "f", "NUMBER", "This", "be", "exactly", "what", "I", "expected", "to", "see", "as", "a", "response", "NUMBER", "So", "the", "main", "question", "will", "be", "Is", "it", "possible", "to", "set", "custom", "tags", "on", "field", "for", "generation", "or", "any", "chance", "to", "set", "the", "bson", "NUMBER", "ObjectId", "type", "In", "my", "eyes", "the", "only", "way", "to", "handle", "this", "be", "to", "make", "the", "project", "the", "other", "way", "by", "write", "the", "server", "in", "Go", "make", "comments", "for", "swagger", "and", "generate", "the", "swagger", "file", "instead", "of", "the", "server", "right", "By", "the", "way", "thank", "you", "for", "the", "help", "rjeczalik", "escaping", "with", "_id", "leads", "to", "a", "more", "weird", "behavior", "NUMBER", "It", "generates", "Oh", "I", "meant", "Markdown", "in", "github", "comments", "I", "ve", "notice", "you", "escape", "_id", "with", "italics", "__id_", "so", "just", "wanted", "to", "share", "with", "my", "finding", "NUMBER", "Sorry", "for", "confusion", "NUMBER", "Currently", "there", "be", "no", "bson", "tags", "generate", "NUMBER", "However", "I", "don", "t", "think", "it", "would", "cause", "any", "harm", "if", "we", "would", "generate", "bson", "annotation", "tags", "alongside", "the", "json", "annotation", "tags", "NUMBER", "This", "would", "require", "an", "enhancement", "PR", "with", "update", "for", "the", "generator", "template", "code", "NUMBER", "I", "think", "that", "would", "be", "a", "neat", "way", "to", "resolve", "your", "issue", "NUMBER", "However", "perhaps", "casualjim", "has", "another", "idea", "on", "this", "topic", "as", "it", "would", "be", "great", "to", "get", "his", "input", "on", "this", "before", "any", "work", "be", "do", "relate", "to", "this", "NUMBER", "As", "he", "might", "know", "a", "way", "to", "make", "it", "all", "work", "for", "you", "as", "swagger", "be", "in", "its", "current", "state", "NUMBER", "By", "the", "way", "CuBiC", "NUMBER", "D", "can", "you", "also", "please", "mention", "your", "swagger", "version", "That", "would", "definitely", "allow", "to", "store", "and", "read", "swagger", "generate", "models", "in", "from", "mongoDB", "with", "readOnly", "true", "and", "bson", "variable", "omitempty", "but", "that", "could", "be", "a", "breaking", "change", "in", "some", "special", "cases", "where", "special", "characters", "has", "be", "use", "NUMBER", "Another", "thing", "be", "the", "special", "type", "bson", "NUMBER", "ObjectId", "use", "by", "bson", "NUMBER", "GlenDC", "swagger", "version", "version", "NUMBER", "commit", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ccde", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "Yeah", "custom", "template", "should", "fix", "this", "right", "I", "tried", "forking", "structfield", "NUMBER", "gotmpl", "because", "it", "seem", "to", "define", "the", "tags", "NUMBER", "But", "I", "get", "back", "an", "error", "message", "saying", "Cannot", "overwrite", "protected", "template", "structfield", "Would", "it", "otherwise", "not", "be", "an", "idea", "to", "allow", "additional", "tags", "apart", "from", "just", "json", "I", "d", "say", "that", "this", "use", "case", "happens", "in", "more", "cases", "than", "just", "bson", "NUMBER", "The", "type", "bson", "NUMBER", "ObjectId", "would", "just", "be", "another", "type", "like", "github", "NUMBER", "com", "go", "openapi", "strfmt", "I", "suppose", "NUMBER", "Wrapping", "it", "around", "the", "original", "bson", "objectId", "NUMBER", "Some", "template", "can", "t", "be", "overridden", "as", "they", "be", "protected", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template_repo", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "others", "be", "not", "all", "other", "template", "NUMBER", "In", "case", "you", "require", "to", "modify", "such", "template", "you", "be", "most", "likely", "either", "hitting", "a", "wall", "because", "of", "limitations", "in", "go", "openapi", "go", "swagger", "or", "you", "be", "doing", "something", "weird", "NUMBER", "In", "case", "of", "the", "first", "option", "the", "starting", "point", "would", "be", "to", "open", "an", "issue", "about", "this", "describing", "your", "situation", "such", "that", "a", "discussion", "can", "start", "and", "a", "solution", "can", "be", "find", "NUMBER", "iain", "NUMBER", "be", "correct", "you", "might", "need", "to", "add", "support", "for", "bson", "specific", "objects", "in", "github", "NUMBER", "com", "go", "openapi", "strfmt", "github", "NUMBER", "com", "go", "openapi", "strfmt", "NUMBER", "By", "default", "these", "be", "use", "LINK", "openapi", "strfmt", "blob", "master", "default", "NUMBER", "go", "CuBiC", "NUMBER", "D", "Related", "be", "this", "open", "PR", "LINK", "openapi", "strfmt", "pull", "NUMBER", "file", "in", "that", "PR", "roytan", "NUMBER", "be", "provide", "Setters", "and", "Getters", "for", "the", "DateTime", "time", "NUMBER", "You", "might", "want", "to", "help", "him", "out", "with", "this", "by", "also", "provide", "those", "for", "the", "other", "types", "NUMBER", "Would", "allow", "you", "to", "use", "the", "exist", "types", "and", "still", "interact", "with", "BSON", "NUMBER", "but", "that", "could", "be", "a", "breaking", "change", "in", "some", "special", "cases", "where", "special", "characters", "has", "be", "use", "NUMBER", "can", "you", "give", "an", "example", "of", "a", "breaking", "case", "GlenDC", "seems", "to", "me", "that", "this", "issue", "here", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "be", "also", "connected", "with", "this", "problem", "with", "tags", "NUMBER", "I", "understand", "that", "the", "OpenApi", "spec", "isn", "t", "allowing", "go", "tags", "so", "maybe", "this", "be", "more", "an", "issue", "with", "openapi", "NUMBER", "However", "for", "the", "time", "be", "it", "seems", "to", "me", "that", "the", "only", "way", "around", "this", "problem", "be", "to", "have", "an", "external", "application", "go", "through", "the", "generate", "structs", "models", "from", "goswagger", "NUMBER", "The", "program", "would", "add", "the", "tags", "after", "the", "fact", "NUMBER", "Bit", "hackish", "tho", "I", "d", "love", "to", "hear", "an", "alternative", "solution", "LINK", "go", "inject", "tag", "file", "NUMBER", "GlenDC", "as", "soon", "the", "time", "makes", "it", "possible", "I", "will", "support", "that", "PR", "with", "the", "new", "type", "NUMBER", "A", "breaking", "case", "would", "be", "every", "request", "that", "use", "a", "special", "character", "get", "converted", "and", "resent", "to", "another", "external", "resource", "by", "bson", "NUMBER", "I", "don", "t", "think", "that", "anybody", "did", "that", "outside", "the", "mongoDB", "context", "but", "in", "combination", "with", "mongoDB", "for", "sure", "Data", "field", "from", "the", "database", "would", "map", "completely", "different", "on", "models", "NUMBER", "_example", "example", "example_var", "exampleVar", "var", "dollarVar", "casualjim", "NUMBER", "It", "also", "regards", "reading", "from", "the", "database", "and", "responding", "NUMBER", "I", "understand", "that", "from", "the", "relational", "database", "point", "of", "view", "it", "s", "fine", "to", "normalize", "data", "come", "from", "a", "request", "but", "on", "object", "orientated", "databases", "it", "s", "common", "to", "store", "read", "subdocuments", "as", "they", "be", "or", "as", "the", "API", "spec", "describes", "them", "NUMBER", "In", "order", "to", "resolve", "the", "breaking", "case", "CuBiC", "NUMBER", "D", "you", "will", "probably", "have", "to", "work", "on", "issue", "NUMBER", "mention", "by", "casualjim", "NUMBER", "Other", "then", "that", "I", "m", "looking", "forward", "to", "welcome", "your", "contribution", "to", "LINK", "openapi", "strfmt", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "not", "change", "coverage", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "d", "NUMBER", "b", "NUMBER", "a", "NUMBER", "f", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "d", "NUMBER", "b", "NUMBER", "a", "NUMBER", "bcac", "NUMBER", "f", "NUMBER", "f", "NUMBER", "dbd", "NUMBER", "bea", "NUMBER", "bec", "NUMBER", "dda", "NUMBER", "f", "NUMBER", "d", "NUMBER", "b", "NUMBER", "f", "NUMBER", "b", "NUMBER", "aa", "NUMBER", "e", "NUMBER", "f", "NUMBER", "src", "pr", "casualjim", "wow", "that", "was", "fast", "Thanks", "Generated", "handler", "function", "have", "this", "form", "go", "api", "NUMBER", "StaticSayHelloHandler", "static", "NUMBER", "SayHelloHandlerFunc", "func", "params", "static", "NUMBER", "SayHelloParams", "middleware", "NUMBER", "Responder", "return", "middleware", "NUMBER", "NotImplemented", "operation", "static", "NUMBER", "SayHello", "has", "not", "yet", "be", "implement", "How", "you", "would", "implement", "websockets", "LINK", "HTTP", "upgrade", "function", "with", "go", "swagger", "Is", "there", "any", "way", "to", "access", "ResponseWriter", "and", "Request", "An", "upgrade", "looks", "like", "this", "go", "func", "serveWs", "hub", "Hub", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "conn", "err", "upgrader", "NUMBER", "Upgrade", "w", "r", "nil", "if", "err", "nil", "log", "NUMBER", "Println", "err", "return", "Works", "like", "a", "charm", "thank", "you", "TODO", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "schemavalidator", "NUMBER", "gotmpl", "L", "NUMBER", "additional", "items", "be", "just", "a", "specialization", "of", "what", "we", "already", "have", "NUMBER", "it", "s", "a", "tuple", "with", "the", "last", "element", "be", "a", "slice", "Problem", "statement", "Attempting", "to", "reference", "type", "utils", "NUMBER", "Error", "Swagger", "specification", "package", "utils", "swagger", "response", "utils", "NUMBER", "Error", "type", "Error", "Responses", "NUMBER", "utils", "NUMBER", "Error", "Removing", "the", "dot", "and", "renaming", "the", "response", "reference", "to", "something", "like", "utilsError", "fix", "this", "NUMBER", "I", "didn", "t", "see", "anything", "in", "the", "documentation", "about", "not", "work", "with", "dots", "so", "this", "looks", "like", "a", "documentation", "bug", "NUMBER", "It", "s", "not", "documented", "anywhere", "right", "now", "it", "be", "now", "allow", "during", "parsing", "and", "I", "m", "not", "sure", "if", "we", "want", "to", "allow", "punctuation", "or", "not", "NUMBER", "The", "official", "OpenAPI", "Swagger", "NUMBER", "specs", "see", "LINK", "Specification", "blob", "master", "version", "NUMBER", "md", "don", "t", "seem", "to", "say", "anything", "I", "can", "find", "about", "the", "legal", "characters", "possible", "for", "a", "name", "NUMBER", "It", "only", "seems", "to", "specify", "that", "names", "be", "case", "sensitive", "and", "must", "be", "unique", "NUMBER", "So", "that", "means", "that", "go", "swagger", "be", "currently", "more", "strict", "than", "the", "specification", "specify", "AFAIK", "NUMBER", "The", "reason", "why", "your", "punctuation", "character", "currently", "do", "not", "work", "be", "because", "of", "the", "regex", "we", "use", "to", "parse", "that", "type", "of", "line", "as", "can", "be", "find", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "scanner", "NUMBER", "go", "L", "NUMBER", "Changing", "that", "regex", "to", "swagger", "response", "p", "Zs", "p", "L", "p", "L", "p", "N", "p", "Pd", "p", "Pc", "p", "Po", "or", "swagger", "response", "p", "Zs", "p", "L", "p", "L", "p", "N", "p", "P", "would", "make", "your", "request", "possible", "NUMBER", "I", "m", "not", "sure", "if", "this", "be", "the", "only", "change", "required", "though", "as", "we", "might", "also", "need", "to", "change", "a", "few", "other", "validation", "places", "to", "make", "such", "a", "change", "possible", "NUMBER", "Should", "in", "the", "end", "still", "be", "trivial", "though", "NUMBER", "The", "more", "important", "question", "be", "what", "we", "really", "want", "a", "possibly", "legal", "name", "to", "be", "NUMBER", "I", "think", "keep", "this", "as", "liberal", "as", "possible", "NUMBER", "But", "casualjim", "might", "have", "a", "very", "different", "opinion", "about", "this", "NUMBER", "Once", "we", "all", "agree", "on", "what", "a", "legal", "name", "can", "consist", "of", "it", "should", "be", "trivial", "to", "patch", "the", "code", "and", "or", "update", "the", "documentation", "NUMBER", "Note", "that", "in", "case", "of", "documentation", "change", "it", "won", "t", "affect", "the", "website", "LINK", "until", "next", "release", "and", "instead", "you", "can", "find", "the", "documentation", "up", "to", "date", "with", "latest", "master", "under", "the", "NUMBER", "docs", "directory", "NUMBER", "so", "I", "should", "be", "able", "to", "use", "swagger", "response", "without", "any", "optional", "name", "and", "it", "will", "be", "find", "for", "my", "route", "NUMBER", "In", "my", "experience", "this", "did", "not", "work", "for", "swagger", "model", "Problem", "statement", "When", "deserializing", "JSON", "from", "a", "server", "that", "has", "date", "formats", "that", "look", "like", "this", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "I", "get", "a", "parsing", "error", "parsing", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "as", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "NUMBER", "NUMBER", "cannot", "parse", "as", "Z", "NUMBER", "NUMBER", "Steps", "to", "reproduce", "Try", "to", "deserialize", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "into", "a", "strfmt", "NUMBER", "DateTime", "field", "Suggestions", "I", "tried", "manually", "change", "the", "generate", "code", "to", "a", "time", "NUMBER", "Time", "but", "still", "get", "the", "error", "NUMBER", "Problem", "statement", "Enum", "definitions", "generate", "type", "aliases", "when", "defined", "in", "the", "separate", "_definitions_", "section", "but", "those", "same", "type", "aliases", "be", "not", "generate", "when", "defining", "the", "enum", "as", "a", "property", "of", "an", "inline", "definition", "NUMBER", "Type", "aliases", "also", "don", "t", "seem", "to", "be", "generate", "when", "defined", "as", "a", "parameter", "inline", "or", "not", "NUMBER", "Basically", "type", "aliases", "for", "enum", "values", "should", "always", "be", "generate", "as", "constants", "where", "possible", "NUMBER", "This", "to", "prevent", "from", "having", "to", "hardcode", "these", "values", "otherwise", "when", "use", "indirectly", "within", "handler", "and", "or", "client", "code", "NUMBER", "Originally", "propose", "in", "issue", "NUMBER", "Enums", "occur", "in", "following", "locations", "and", "should", "generate", "type", "aliases", "in", "all", "of", "them", "non", "body", "parameter", "inline", "NUMBER", "ref", "NUMBER", "header", "object", "use", "to", "send", "headers", "along", "with", "responses", "inline", "NUMBER", "items", "object", "use", "to", "describe", "array", "items", "inline", "NUMBER", "ref", "NUMBER", "already", "work", "pre", "PR", "as", "a", "solution", "to", "this", "issue", "The", "behavior", "as", "it", "be", "while", "this", "issue", "be", "unresolve", "only", "generates", "type", "aliases", "for", "enumerations", "for", "situations", "NUMBER", "NUMBER", "This", "situation", "be", "what", "casualjim", "be", "talking", "about", "as", "a", "solution", "to", "issue", "NUMBER", "of", "kojustin", "s", "list", "in", "issue", "NUMBER", "casualjim", "be", "any", "of", "the", "NUMBER", "listed", "situations", "above", "situations", "where", "you", "think", "enum", "aliases", "be", "probably", "not", "needed", "NUMBER", "I", "do", "start", "to", "like", "that", "you", "should", "hint", "the", "compiler", "when", "you", "want", "an", "explicit", "definition", "NUMBER", "As", "this", "gives", "more", "flexibility", "NUMBER", "In", "which", "case", "for", "sure", "I", "would", "require", "type", "aliases", "for", "situations", "NUMBER", "NUMBER", "Or", "perhaps", "we", "should", "simply", "support", "all", "NUMBER", "possible", "situations", "NUMBER", "What", "you", "think", "casualjim", "Problem", "statement", "When", "I", "write", "the", "model", "schema", "directly", "into", "the", "query", "and", "not", "use", "separete", "definition", "for", "the", "model", "the", "validations", "like", "maxLength", "required", "do", "not", "generates", "for", "the", "model", "NUMBER", "But", "when", "I", "but", "the", "schama", "in", "the", "definition", "section", "and", "ref", "to", "it", "the", "validations", "be", "get", "generate", "NUMBER", "Swagger", "specification", "yaml", "responses", "NUMBER", "description", "Success", "schema", "required", "data", "properties", "data", "required", "account_id", "access_token", "properties", "account_id", "type", "integer", "format", "int", "NUMBER", "access_token", "type", "string", "maxLength", "NUMBER", "Problem", "statement", "LINK", "The", "instructions", "on", "this", "page", "state", "the", "following", "If", "you", "want", "to", "debug", "what", "the", "client", "be", "sending", "and", "receiving", "you", "can", "set", "the", "environment", "value", "DEBUG", "to", "a", "non", "empty", "value", "NUMBER", "I", "m", "trying", "to", "debug", "what", "a", "client", "I", "generate", "with", "go", "swagger", "be", "sending", "and", "receiving", "but", "I", "m", "not", "seeing", "any", "output", "other", "than", "the", "error", "I", "m", "catching", "context", "deadline", "exceeded", "NUMBER", "I", "set", "an", "env", "variable", "export", "DEBUG", "true", "before", "generating", "and", "use", "the", "package", "but", "it", "doesn", "t", "appear", "to", "be", "creating", "any", "extra", "output", "NUMBER", "I", "search", "the", "generate", "code", "and", "don", "t", "see", "any", "attempts", "to", "read", "a", "DEBUG", "env", "var", "NUMBER", "Is", "this", "a", "bug", "in", "the", "docs", "or", "be", "I", "interpreting", "it", "wrong", "Thanks", "Evan", "casualjim", "the", "code", "and", "the", "documentation", "do", "specify", "slightly", "different", "behavior", "The", "documentation", "specifies", "If", "you", "want", "to", "debug", "what", "the", "client", "be", "sending", "and", "receiving", "you", "can", "set", "the", "environment", "value", "DEBUG", "to", "a", "non", "empty", "value", "NUMBER", "Yet", "the", "code", "LINK", "openapi", "runtime", "blob", "master", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "specifies", "go", "rt", "NUMBER", "Debug", "os", "NUMBER", "Getenv", "DEBUG", "NUMBER", "I", "think", "the", "documentation", "makes", "more", "sense", "as", "it", "s", "the", "more", "common", "liberal", "approach", "NUMBER", "So", "should", "I", "open", "a", "PR", "in", "LINK", "openapi", "runtime", "to", "make", "the", "documentation", "and", "code", "match", "once", "again", "Problem", "statement", "When", "generating", "code", "for", "field", "that", "be", "enums", "the", "generate", "code", "be", "poor", "NUMBER", "NUMBER", "The", "validation", "logic", "needs", "an", "init", "function", "to", "populate", "a", "global", "singleton", "NUMBER", "The", "init", "function", "do", "an", "json", "NUMBER", "Unmarshal", "to", "extract", "the", "values", "it", "wants", "to", "compare", "against", "NUMBER", "However", "the", "values", "be", "constants", "that", "be", "embedded", "into", "the", "swagger", "spec", "NUMBER", "The", "init", "function", "and", "this", "global", "could", "be", "replaced", "by", "referring", "to", "the", "constants", "StatusStatusBad", "StatusStatusHorrible", "etc", "NUMBER", "which", "be", "already", "generate", "NUMBER", "NUMBER", "It", "shouldn", "t", "need", "to", "import", "github", "NUMBER", "com", "go", "openapi", "validate", "to", "validate", "a", "string", "be", "one", "of", "the", "enum", "values", "NUMBER", "Requiring", "another", "dependency", "for", "this", "be", "kind", "of", "lame", "NUMBER", "NUMBER", "It", "would", "be", "nice", "if", "the", "enum", "introduce", "a", "new", "type", "alias", "NUMBER", "This", "helps", "preserve", "the", "intention", "behind", "the", "enum", "to", "separate", "from", "the", "underlying", "type", "to", "limit", "the", "possible", "set", "of", "values", "NUMBER", "type", "Status", "string", "const", "StatusStatusGood", "captures", "enum", "value", "Good", "StatusStatusGood", "Status", "Good", "StatusStatusBad", "captures", "enum", "value", "Bad", "StatusStatusBad", "Bad", "StatusStatusOk", "captures", "enum", "value", "Ok", "StatusStatusOk", "Ok", "StatusStatusDecent", "captures", "enum", "value", "Decent", "StatusStatusDecent", "Decent", "StatusStatusMiddling", "captures", "enum", "value", "Middling", "StatusStatusMiddling", "Middling", "StatusStatusHorrible", "captures", "enum", "value", "Horrible", "StatusStatusHorrible", "Horrible", "Swagger", "specification", "definitions", "Status", "type", "object", "description", "some", "object", "properties", "status", "description", "status", "type", "string", "enum", "Good", "Bad", "Ok", "Decent", "Middling", "Horrible", "Steps", "to", "reproduce", "usr", "local", "Cellar", "go", "swagger", "NUMBER", "bin", "swagger", "generate", "model", "spec", "swag", "NUMBER", "yml", "cat", "models", "status", "NUMBER", "go", "package", "models", "This", "file", "was", "generate", "by", "the", "swagger", "tool", "NUMBER", "Editing", "this", "file", "might", "prove", "futile", "when", "you", "re", "run", "the", "swagger", "generate", "command", "import", "encoding", "json", "strfmt", "github", "NUMBER", "com", "go", "openapi", "strfmt", "github", "NUMBER", "com", "go", "openapi", "swag", "github", "NUMBER", "com", "go", "openapi", "error", "github", "NUMBER", "com", "go", "openapi", "validate", "Status", "some", "object", "swagger", "model", "Status", "type", "Status", "struct", "status", "Status", "string", "json", "status", "omitempty", "Validate", "validates", "this", "status", "func", "m", "Status", "Validate", "formats", "strfmt", "NUMBER", "Registry", "error", "var", "res", "error", "if", "err", "m", "NUMBER", "validateStatus", "formats", "err", "nil", "prop", "res", "append", "res", "err", "if", "len", "res", "NUMBER", "return", "error", "NUMBER", "CompositeValidationError", "res", "NUMBER", "return", "nil", "var", "statusTypeStatusPropEnum", "interface", "func", "init", "var", "res", "string", "if", "err", "json", "NUMBER", "Unmarshal", "byte", "Good", "Bad", "Ok", "Decent", "Middling", "Horrible", "res", "err", "nil", "panic", "err", "for", "_", "v", "range", "res", "statusTypeStatusPropEnum", "append", "statusTypeStatusPropEnum", "v", "const", "StatusStatusGood", "captures", "enum", "value", "Good", "StatusStatusGood", "string", "Good", "StatusStatusBad", "captures", "enum", "value", "Bad", "StatusStatusBad", "string", "Bad", "StatusStatusOk", "captures", "enum", "value", "Ok", "StatusStatusOk", "string", "Ok", "StatusStatusDecent", "captures", "enum", "value", "Decent", "StatusStatusDecent", "string", "Decent", "StatusStatusMiddling", "captures", "enum", "value", "Middling", "StatusStatusMiddling", "string", "Middling", "StatusStatusHorrible", "captures", "enum", "value", "Horrible", "StatusStatusHorrible", "string", "Horrible", "prop", "value", "enum", "func", "m", "Status", "validateStatusEnum", "path", "location", "string", "value", "string", "error", "if", "err", "validate", "NUMBER", "Enum", "path", "location", "value", "statusTypeStatusPropEnum", "err", "nil", "return", "err", "return", "nil", "func", "m", "Status", "validateStatus", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "swag", "NUMBER", "IsZero", "m", "NUMBER", "Status", "not", "required", "return", "nil", "value", "enum", "if", "err", "m", "NUMBER", "validateStatusEnum", "status", "body", "m", "NUMBER", "Status", "err", "nil", "return", "err", "return", "nil", "NUMBER", "to", "expand", "the", "type", "alias", "behavior", "to", "inline", "enum", "definitions", "NUMBER", "casualjim", "I", "ll", "open", "a", "new", "issue", "for", "this", "as", "it", "seems", "to", "deviate", "from", "this", "context", "NUMBER", "Problem", "statement", "swagger", "validate", "produces", "some", "pretty", "unhelpful", "error", "message", "such", "as", "object", "has", "no", "key", "for", "the", "following", "incomplete", "swagger", "spec", "NUMBER", "Contrast", "with", "an", "online", "Swagger", "validator", "like", "LINK", "parser", "www", "index", "NUMBER", "html", "based", "on", "LINK", "parser", "which", "specifically", "calls", "out", "Error", "resolving", "ref", "pointer", "responses", "NUMBER", "Token", "responses", "do", "not", "exist", "NUMBER", "Much", "more", "helpful", "NUMBER", "Swagger", "specification", "consumes", "application", "json", "produces", "application", "json", "schemes", "http", "swagger", "NUMBER", "info", "description", "description", "title", "title", "version", "NUMBER", "host", "localhost", "basePath", "paths", "v", "NUMBER", "authenticate", "get", "summary", "Authenticate", "with", "a", "token", "JWT", "NUMBER", "operationId", "authHandler", "responses", "NUMBER", "ref", "responses", "definitions", "Steps", "to", "reproduce", "swagger", "validate", "swagger", "NUMBER", "json", "The", "swagger", "spec", "at", "swagger", "NUMBER", "json", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "object", "has", "no", "key", "I", "d", "like", "to", "suggest", "this", "issue", "be", "close", "or", "at", "least", "raise", "to", "the", "go", "openapi", "jsonpointer", "repository", "NUMBER", "This", "error", "NUMBER", "be", "perfectly", "valid", "parsing", "responses", "has", "resulted", "in", "an", "empty", "key", "NUMBER", "be", "be", "generate", "by", "go", "openapi", "jsonpointer", "NUMBER", "doesn", "t", "possess", "the", "document", "context", "sufficient", "to", "provide", "a", "line", "number", "for", "where", "it", "has", "be", "generate", "but", "that", "s", "again", "a", "matter", "for", "the", "jsonpointer", "package", "aleksclark", "By", "all", "means", "if", "the", "issue", "be", "in", "a", "dependency", "it", "makes", "sense", "to", "open", "an", "issue", "there", "NUMBER", "I", "had", "no", "way", "of", "knowing", "that", "NUMBER", "Problem", "statement", "A", "type", "use", "allOf", "generate", "by", "NUMBER", "doesn", "t", "implement", "MarshalJSON", "and", "UnmarshalJSON", "and", "works", "properly", "NUMBER", "This", "same", "type", "generate", "by", "NUMBER", "include", "these", "function", "and", "they", "re", "broken", "NUMBER", "Swagger", "specification", "yaml", "swagger", "NUMBER", "info", "title", "paths", "execute", "post", "responses", "NUMBER", "schema", "type", "array", "items", "ref", "definitions", "ExecuteParametersWorkspace", "definitions", "ExecuteParameters", "type", "object", "properties", "WantGeometry", "type", "boolean", "ExecuteParametersWorkspace", "allOf", "ref", "definitions", "ExecuteParameters", "required", "Workspace", "properties", "Workspace", "type", "string", "Steps", "to", "reproduce", "swagger", "generate", "server", "Broken", "function", "in", "NUMBER", "go", "UnmarshalJSON", "unmarshals", "this", "object", "from", "a", "JSON", "structure", "func", "m", "ExecuteParametersWorkspace", "UnmarshalJSON", "raw", "byte", "error", "var", "aO", "NUMBER", "ExecuteParameters", "if", "err", "swag", "NUMBER", "ReadJSON", "raw", "aO", "NUMBER", "err", "nil", "return", "err", "m", "NUMBER", "ExecuteParameters", "aO", "NUMBER", "return", "nil", "MarshalJSON", "marshals", "this", "object", "to", "a", "JSON", "structure", "func", "m", "ExecuteParametersWorkspace", "MarshalJSON", "byte", "error", "var", "_parts", "byte", "aO", "NUMBER", "err", "swag", "NUMBER", "WriteJSON", "m", "NUMBER", "ExecuteParameters", "if", "err", "nil", "return", "nil", "err", "_parts", "append", "_parts", "aO", "NUMBER", "return", "swag", "NUMBER", "ConcatJSON", "_parts", "NUMBER", "nil", "Curious", "what", "do", "you", "mean", "broken", "function", "in", "NUMBER", "Just", "test", "with", "the", "above", "spec", "not", "seeing", "error", "though", "NUMBER", "Simon", "Li", "he", "probably", "means", "the", "fact", "that", "the", "Workspace", "property", "isn", "t", "de", "serialized", "NUMBER", "casualjim", "what", "s", "actually", "the", "reason", "that", "you", "add", "an", "explicit", "Marshal", "UnmarshalJSON", "function", "in", "v", "NUMBER", "LINK", "swagger", "go", "swagger", "commit", "de", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "cc", "NUMBER", "f", "NUMBER", "d", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "eb", "NUMBER", "In", "what", "cases", "was", "the", "implicit", "version", "not", "good", "enough", "GlenDC", "Yes", "that", "s", "what", "I", "meant", "NUMBER", "Thanks", "for", "clarifying", "NUMBER", "I", "totally", "miss", "that", "I", "didn", "t", "say", "how", "it", "was", "broken", "NUMBER", "casualjim", "but", "AFAIK", "the", "default", "marshaller", "works", "fine", "with", "inheritance", "did", "a", "play", "ground", "test", "before", "ask", "my", "previous", "question", "to", "be", "sure", "NUMBER", "Can", "you", "give", "a", "situation", "where", "the", "implicit", "marshaler", "wouldn", "t", "work", "Update", "I", "just", "realized", "this", "may", "be", "a", "relate", "but", "different", "issue", "since", "it", "s", "in", "NUMBER", "Update", "NUMBER", "and", "this", "issue", "has", "be", "fix", "in", "NUMBER", "if", "err", "nil", "err", "io", "NUMBER", "EOF", "Looks", "like", "this", "use", "the", "polymorphic", "marshal", "be", "triggered", "by", "the", "type", "having", "a", "property", "that", "be", "a", "parametric", "type", "or", "an", "array", "of", "a", "polymorphic", "type", "yaml", "Values", "type", "object", "properties", "Value", "ref", "definitions", "Value", "Array", "type", "array", "items", "ref", "definitions", "Value", "Value", "type", "object", "discriminator", "ValueType", "required", "ValueType", "properties", "ValueType", "type", "string", "ValueNumber", "allOf", "ref", "definitions", "Value", "required", "Value", "properties", "Value", "type", "number", "This", "function", "be", "fail", "because", "I", "only", "set", "one", "or", "the", "other", "of", "Array", "or", "Value", "since", "Swagger", "doesn", "t", "have", "anyOf", "yet", "and", "this", "returns", "an", "error", "at", "the", "read", "of", "Value", "when", "it", "isn", "t", "provide", "NUMBER", "It", "checks", "to", "see", "if", "Array", "be", "there", "before", "it", "try", "to", "read", "it", "but", "not", "Value", "NUMBER", "go", "UnmarshalJSON", "unmarshals", "this", "object", "with", "a", "polymorphic", "type", "from", "a", "JSON", "structure", "func", "m", "Values", "UnmarshalJSON", "raw", "byte", "error", "var", "data", "struct", "Array", "json", "NUMBER", "RawMessage", "json", "Array", "omitempty", "Value", "json", "NUMBER", "RawMessage", "json", "Value", "omitempty", "buf", "bytes", "NUMBER", "NewBuffer", "raw", "dec", "json", "NUMBER", "NewDecoder", "buf", "dec", "NUMBER", "UseNumber", "if", "err", "dec", "NUMBER", "Decode", "data", "err", "nil", "return", "err", "var", "array", "Value", "buf", "bytes", "NUMBER", "NewBuffer", "raw", "dec", "json", "NUMBER", "NewDecoder", "buf", "dec", "NUMBER", "UseNumber", "untypedObj", "make", "map", "string", "interface", "if", "err", "dec", "NUMBER", "Decode", "untypedObj", "err", "nil", "return", "err", "if", "untypedArray", "ok", "untypedObj", "Array", "ok", "if", "slcArray", "ok", "untypedArray", "NUMBER", "interface", "ok", "for", "_", "slcEl", "range", "slcArray", "slcJSON", "_", "json", "NUMBER", "Marshal", "slcEl", "slcObj", "err", "UnmarshalValue", "bytes", "NUMBER", "NewBuffer", "slcJSON", "runtime", "NUMBER", "JSONConsumer", "if", "err", "nil", "return", "err", "array", "append", "array", "slcObj", "value", "err", "UnmarshalValue", "bytes", "NUMBER", "NewBuffer", "data", "NUMBER", "Value", "runtime", "NUMBER", "JSONConsumer", "if", "err", "nil", "return", "err", "var", "result", "Values", "result", "NUMBER", "Array", "array", "result", "NUMBER", "Value", "value", "m", "result", "return", "nil", "Here", "be", "the", "json", "that", "it", "s", "trying", "to", "unmarshal", "to", "an", "array", "of", "Values", "objects", "json", "Value", "ValueType", "ValueNumber", "Value", "NUMBER", "Array", "ValueType", "ValueNumber", "Value", "NUMBER", "I", "use", "the", "latest", "swagger", "today", "and", "it", "s", "still", "broken", "i", "NUMBER", "e", "the", "properties", "other", "than", "allOf", "be", "not", "marshaled", "un", "marshaled", "NUMBER", "It", "s", "broken", "since", "NUMBER", "c", "NUMBER", "a", "NUMBER", "ae", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "a", "NUMBER", "dff", "NUMBER", "e", "NUMBER", "Would", "some", "one", "bring", "this", "fix", "in", "Thanks", "I", "created", "a", "new", "issue", "about", "this", "NUMBER", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "Quick", "fix", "for", "NUMBER", "casualjim", "Done", "NUMBER", "What", "about", "add", "actual", "stale", "file", "check", "to", "your", "ci", "It", "d", "be", "something", "like", "diff", "git", "diff", "HEAD", "NUMBER", "diff", "git", "a", "appveyor", "NUMBER", "yml", "b", "appveyor", "NUMBER", "yml", "index", "c", "NUMBER", "bad", "NUMBER", "a", "NUMBER", "NUMBER", "a", "appveyor", "NUMBER", "yml", "b", "appveyor", "NUMBER", "yml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "install", "go", "get", "u", "gopkg", "NUMBER", "in", "matm", "v", "NUMBER", "gocov", "html", "go", "get", "u", "github", "NUMBER", "com", "cee", "dub", "go", "junit", "report", "check", "for", "stale", "file", "go", "generate", "v", "NUMBER", "generator", "git", "diff", "exit", "code", "NUMBER", "generator", "build_script", "cd", "APPVEYOR_BUILD_FOLDER", "echo", "PATH", "diff", "git", "a", "generator", "shared", "NUMBER", "go", "b", "generator", "shared", "NUMBER", "go", "index", "NUMBER", "df", "NUMBER", "c", "NUMBER", "ef", "NUMBER", "a", "generator", "shared", "NUMBER", "go", "b", "generator", "shared", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "golang", "NUMBER", "org", "x", "tool", "imports", "go", "generate", "go", "bindata", "pkg", "generator", "ignore", "NUMBER", "NUMBER", "sw", "NUMBER", "template", "NUMBER", "go", "generate", "go", "bindata", "mode", "NUMBER", "modtime", "NUMBER", "pkg", "generator", "ignore", "NUMBER", "NUMBER", "sw", "NUMBER", "template", "NUMBER", "LanguageOpts", "to", "describe", "a", "language", "to", "the", "code", "generator", "type", "LanguageOpts", "struct", "casualjim", "Please", "don", "t", "merge", "yet", "test", "if", "the", "check", "works", "NUMBER", "casualjim", "Ok", "looks", "like", "NUMBER", "git", "directory", "be", "remove", "from", "go", "swagger", "before", "install", "stage", "git", "diff", "exit", "code", "NUMBER", "generator", "Not", "a", "git", "repository", "To", "compare", "two", "paths", "outside", "a", "work", "tree", "usage", "git", "diff", "no", "index", "TAG", "TAG", "Command", "exited", "with", "code", "NUMBER", "It", "d", "require", "more", "work", "for", "a", "separate", "PR", "let", "s", "merge", "the", "fix", "first", "NUMBER", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "not", "change", "coverage", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "cfe", "NUMBER", "a", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "cfe", "NUMBER", "a", "NUMBER", "bc", "NUMBER", "c", "NUMBER", "c", "NUMBER", "b", "NUMBER", "e", "NUMBER", "f", "NUMBER", "ce", "NUMBER", "c", "NUMBER", "f", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "e", "NUMBER", "b", "NUMBER", "f", "NUMBER", "d", "NUMBER", "edc", "NUMBER", "fe", "NUMBER", "ea", "src", "pr", "Previous", "fix", "was", "wrong", "I", "ve", "stripped", "package", "from", "wrong", "variable", "it", "should", "be", "GoType", "instead", "NUMBER", "How", "to", "best", "add", "a", "test", "for", "build", "fixture", "codegen", "issue", "NUMBER", "json", "rjeczalik", "you", "can", "do", "so", "by", "add", "a", "unit", "Test", "function", "named", "TestIssue", "NUMBER", "in", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "model_test", "NUMBER", "go", "NUMBER", "There", "you", "can", "load", "the", "spec", "file", "which", "it", "should", "be", "able", "to", "load", "without", "any", "error", "NUMBER", "After", "that", "you", "could", "if", "applicable", "also", "test", "specifics", "NUMBER", "In", "the", "model_test", "NUMBER", "go", "file", "you", "ll", "see", "other", "examples", "that", "could", "give", "you", "inspiration", "if", "needed", "NUMBER", "Once", "you", "add", "the", "unit", "test", "rjeczalik", "you", "ll", "have", "to", "also", "fetch", "rebase", "the", "latest", "master", "branch", "into", "your", "personal", "feature", "branch", "NUMBER", "You", "can", "resolve", "the", "conflict", "of", "generator", "bindata", "NUMBER", "go", "simply", "by", "generating", "a", "new", "one", "yourself", "which", "contains", "both", "the", "latest", "template", "which", "you", "ve", "just", "fetched", "rebased", "and", "your", "change", "already", "commit", "in", "this", "PR", "NUMBER", "Once", "that", "s", "do", "this", "PR", "be", "good", "to", "go", "I", "ve", "add", "a", "test", "that", "generates", "a", "client", "and", "then", "try", "to", "build", "it", "NUMBER", "The", "test", "currently", "fail", "due", "to", "a", "different", "problem", "FAIL", "TestGenerateAndBuild", "NUMBER", "s", "FAIL", "TestGenerateAndBuild", "issue_", "NUMBER", "NUMBER", "s", "build_test", "NUMBER", "go", "NUMBER", "go", "get", "NUMBER", "fixture", "bug", "NUMBER", "generate", "NUMBER", "NUMBER", "exit", "status", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "fixture", "bug", "NUMBER", "generate", "NUMBER", "client", "operations", "NUMBER", "fixture", "bug", "NUMBER", "generate", "NUMBER", "client", "operations", "get_responses", "NUMBER", "go", "NUMBER", "o", "NUMBER", "Foo", "NUMBER", "Validate", "undefined", "type", "models", "NUMBER", "Foo", "be", "interface", "with", "no", "methods", "NUMBER", "fixture", "bug", "NUMBER", "generate", "NUMBER", "client", "operations", "get_responses", "NUMBER", "go", "NUMBER", "o", "NUMBER", "Bar", "NUMBER", "Validate", "undefined", "type", "models", "NUMBER", "Bar", "be", "interface", "with", "no", "methods", "Indeed", "the", "generate", "models", "lack", "a", "Validate", "method", "NUMBER", "Not", "quite", "sure", "it", "s", "a", "regression", "as", "every", "other", "test", "pass", "go", "test", "run", "TestGenerateAndBuild", "PASS", "ok", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "s", "Probably", "we", "d", "want", "to", "have", "this", "problem", "also", "fix", "before", "merge", "so", "we", "do", "not", "have", "a", "broken", "master", "NUMBER", "rjeczalik", "I", "think", "your", "test", "file", "triggered", "a", "bug", "in", "the", "current", "generator", "code", "already", "on", "master", "NUMBER", "The", "template", "responsible", "for", "your", "non", "compiable", "code", "can", "be", "find", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "schemavalidator", "NUMBER", "gotmpl", "L", "NUMBER", "The", "appropriate", "fix", "would", "probably", "be", "to", "ensure", "that", "we", "don", "t", "try", "to", "validate", "in", "case", "it", "s", "an", "interface", "NUMBER", "So", "within", "that", "range", "you", "re", "probably", "miss", "an", "if", "conditional", "check", "to", "ensure", "it", "s", "indeed", "not", "an", "interface", "or", "I", "suppose", "it", "s", "call", "discriminator", "in", "Swagger", "OpenAPI", "terms", "NUMBER", "Would", "be", "cool", "if", "you", "could", "fix", "this", "alongside", "your", "other", "commit", "within", "this", "PR", "NUMBER", "Also", "don", "t", "forget", "to", "rebase", "origin", "master", "into", "your", "branch", "NUMBER", "Also", "don", "t", "forget", "to", "rebase", "origin", "master", "into", "your", "branch", "NUMBER", "Already", "rebased", "NUMBER", "Would", "be", "cool", "if", "you", "could", "fix", "this", "alongside", "your", "other", "commit", "within", "this", "PR", "NUMBER", "Sure", "will", "take", "a", "look", "NUMBER", "GlenDC", "Fixed", "please", "take", "a", "look", "NUMBER", "Thank", "you", "for", "the", "extra", "effort", "rjeczalik", "very", "much", "appreciated", "NUMBER", "GlenDC", "You", "re", "welcome", "generate", "run", "test", "use", "data", "generators", "from", "NUMBER", "given", "as", "vendor", "extensions", "within", "the", "given", "swagger", "spec", "file", "NUMBER", "A", "host", "can", "be", "given", "optionally", "to", "override", "the", "default", "one", "in", "the", "spec", "NUMBER", "I", "think", "they", "be", "relate", "NUMBER", "This", "issue", "be", "about", "provide", "a", "command", "swagger", "test", "which", "has", "than", "a", "couple", "of", "optional", "parameters", "to", "override", "the", "host", "spec", "file", "and", "perhaps", "some", "other", "settings", "NUMBER", "It", "probably", "do", "make", "sense", "to", "piggyback", "on", "the", "generate", "client", "and", "thus", "also", "on", "NUMBER", "as", "that", "be", "probably", "about", "generating", "test", "request", "use", "NUMBER", "s", "data", "generator", "NUMBER", "However", "it", "would", "be", "nice", "if", "this", "command", "would", "also", "exist", "and", "thus", "make", "it", "work", "a", "bit", "more", "automatic", "Or", "what", "s", "your", "vision", "on", "this", "casualjim", "The", "implementation", "be", "hinted", "by", "NUMBER", "NUMBER", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "not", "change", "coverage", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "e", "NUMBER", "db", "NUMBER", "b", "NUMBER", "e", "NUMBER", "fed", "LINK", "swagger", "go", "swagger", "compare", "e", "NUMBER", "db", "NUMBER", "c", "NUMBER", "cdc", "NUMBER", "b", "NUMBER", "c", "NUMBER", "e", "NUMBER", "dccb", "NUMBER", "b", "NUMBER", "e", "NUMBER", "fed", "NUMBER", "f", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "ed", "NUMBER", "ff", "NUMBER", "src", "pr", "Should", "I", "run", "go", "generate", "NUMBER", "generator", "and", "push", "the", "result", "if", "a", "template", "be", "change", "Previously", "I", "change", "template", "but", "did", "not", "do", "this", "step", "though", "NUMBER", "Got", "it", "thank", "you", "casualjim", "Per", "casualjim", "advice", "a", "new", "method", "ValidateNamed", "should", "be", "considered", "to", "add", "in", "order", "to", "support", "validation", "error", "with", "proper", "names", "NUMBER", "This", "be", "especially", "useful", "for", "the", "use", "case", "of", "aliased", "property", "types", "in", "which", "a", "model", "can", "be", "referenced", "commonly", "via", "ref", "by", "another", "property", "NUMBER", "For", "the", "sake", "of", "cleanness", "for", "the", "exist", "Validate", "implementation", "the", "ValidateNamed", "method", "be", "therefore", "taken", "into", "this", "implementation", "NUMBER", "casualjim", "Woo", "NUMBER", "great", "hints", "will", "verify", "it", "NUMBER", "LINK", "swagger", "go", "swagger", "Problem", "statement", "yml", "static", "html", "get", "tags", "common", "operationId", "GetHtmlPage", "produces", "text", "plain", "charset", "utf", "NUMBER", "responses", "NUMBER", "description", "OK", "schema", "type", "string", "NUMBER", "description", "Not", "find", "NUMBER", "description", "Forbidden", "Request", "GET", "LINK", "NUMBER", "HTTP", "NUMBER", "Host", "NUMBER", "Accept", "text", "plain", "charset", "utf", "NUMBER", "Accept", "Encoding", "gzip", "deflate", "sdch", "Accept", "Language", "en", "US", "en", "q", "NUMBER", "fa", "q", "NUMBER", "sv", "q", "NUMBER", "Cache", "Control", "no", "cache", "Connection", "keep", "alive", "Origin", "LINK", "Referer", "LINK", "User", "Agent", "NUMBER", "Response", "Headers", "Object", "Content", "Type", "Body", "u", "NUMBER", "cdiv", "u", "NUMBER", "e", "u", "NUMBER", "ch", "NUMBER", "u", "NUMBER", "eHi", "how", "be", "you", "u", "NUMBER", "c", "h", "NUMBER", "u", "NUMBER", "e", "u", "NUMBER", "c", "div", "u", "NUMBER", "e", "Question", "Why", "content", "type", "returned", "be", "empty", "Thanks", "a", "lot", "you", "need", "api", "NUMBER", "TxtProducer", "runtime", "NUMBER", "TextProducer", "try", "yaml", "produces", "text", "plain", "without", "charset", "utf", "NUMBER", "Hi", "I", "m", "struggling", "a", "bit", "to", "generate", "external", "API", "documentation", "from", "my", "exist", "go", "code", "NUMBER", "I", "was", "hoping", "that", "by", "use", "go", "swagger", "I", "could", "skip", "the", "potentially", "a", "few", "release", "behind", "manually", "edit", "swagger", "NUMBER", "json", "file", "be", "anyone", "doing", "that", "with", "go", "swagger", "I", "ve", "get", "a", "two", "question", "sorry", "if", "these", "be", "repeats", "but", "I", "have", "spent", "a", "fairly", "long", "time", "lurking", "the", "issue", "and", "the", "documentation", "It", "seems", "to", "me", "that", "in", "swagger", "params", "and", "model", "response", "for", "that", "matter", "be", "Format", "Pattern", "Type", "and", "Example", "completely", "ignored", "I", "get", "them", "concatenated", "to", "my", "description", "field", "in", "the", "resulting", "JSON", "except", "Example", "which", "just", "gets", "ignored", "NUMBER", "Is", "it", "at", "all", "possible", "to", "use", "something", "else", "than", "json", "for", "the", "naming", "of", "variables", "Either", "taking", "it", "as", "a", "parameter", "when", "generating", "or", "going", "for", "swagger", "instead", "It", "s", "easy", "to", "bump", "into", "clashes", "when", "needing", "something", "for", "internal", "json", "for", "a", "struct", "and", "wanting", "to", "have", "another", "name", "for", "the", "consumer", "NUMBER", "Thanks", "a", "bunch", "for", "all", "the", "work", "put", "into", "this", "Thanks", "great", "NUMBER", "I", "m", "not", "entirely", "sure", "with", "regards", "to", "the", "Example", "tag", "NUMBER", "In", "my", "case", "I", "have", "a", "map", "string", "int", "representing", "tags", "and", "tag", "count", "in", "my", "swagger", "response", "and", "rather", "than", "showing", "up", "as", "tags", "in", "swagger", "I", "d", "like", "to", "be", "able", "to", "put", "in", "an", "example", "json", "string", "NUMBER", "So", "for", "me", "swagger", "response", "type", "resultEnvelop", "struct", "Example", "foo", "NUMBER", "bar", "NUMBER", "Tags", "map", "string", "json", "tags", "Would", "be", "perfect", "in", "my", "case", "NUMBER", "That", "be", "be", "able", "to", "override", "analysis", "of", "the", "type", "and", "replace", "it", "with", "the", "string", "after", "the", "Example", "tag", "NUMBER", "I", "m", "not", "sure", "this", "be", "something", "that", "s", "generally", "useful", "to", "everyone", "though", "NUMBER", "Is", "there", "any", "chance", "examples", "will", "be", "support", "for", "swagger", "response", "For", "Example", "swagger", "response", "type", "Response", "struct", "example", "somebrand", "BrandID", "string", "json", "brandId", "example", "NUMBER", "FirstRecordedDate", "int", "NUMBER", "json", "firstRecordedDate", "example", "NUMBER", "LastRecordedDate", "int", "NUMBER", "json", "lastRecordedDate", "Or", "to", "be", "able", "to", "put", "in", "an", "example", "json", "string", "would", "be", "nice", "too", "like", "jmojon", "showed", "above", "because", "in", "most", "places", "in", "the", "server", "I", "be", "work", "on", "we", "use", "map", "string", "interface", "to", "create", "json", "response", "bodies", "NUMBER", "If", "there", "be", "another", "place", "able", "to", "pull", "the", "defaults", "without", "introduce", "a", "new", "Default", "field", "in", "GenSchema", "and", "feeding", "into", "the", "template", "the", "following", "would", "be", "revised", "NUMBER", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "decrease", "coverage", "by", "NUMBER", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "d", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "a", "NUMBER", "f", "NUMBER", "a", "NUMBER", "b", "NUMBER", "a", "NUMBER", "b", "NUMBER", "d", "NUMBER", "d", "NUMBER", "b", "NUMBER", "b", "NUMBER", "d", "NUMBER", "a", "NUMBER", "df", "NUMBER", "b", "NUMBER", "d", "NUMBER", "eff", "src", "pr", "Problem", "statement", "I", "have", "a", "valid", "definition", "that", "generates", "but", "it", "seems", "like", "the", "inner", "schema", "object", "be", "not", "generate", "correctly", "NUMBER", "Swagger", "specification", "Relevant", "schema", "snippet", "post", "operationId", "invitation_invite", "parameters", "name", "body", "in", "body", "description", "Email", "to", "invite", "required", "true", "schema", "type", "array", "uniqueItems", "true", "items", "type", "object", "required", "email", "properties", "email", "type", "string", "Steps", "to", "reproduce", "When", "build", "I", "get", "the", "following", "error", "NUMBER", "restapi", "operations", "invitation_invite_parameters", "NUMBER", "go", "NUMBER", "undefined", "InvitationInviteParamsBodyItems", "NUMBER", "I", "have", "a", "few", "deep", "structure", "under", "_definitions_", "that", "works", "just", "fine", "I", "ve", "only", "seen", "this", "when", "declared", "directly", "in", "the", "operation", "NUMBER", "Problem", "statement", "On", "first", "go", "generate", "the", "that", "import", "statement", "be", "miss", "NUMBER", "But", "issue", "second", "go", "generate", "without", "cleaning", "that", "import", "statement", "will", "be", "include", "NUMBER", "But", "only", "on", "the", "code", "generate", "responses", "NUMBER", "Makign", "any", "call", "to", "if", "err", "validate", "NUMBER", "Required", "fail", "because", "of", "miss", "imports", "Swagger", "specification", "Cannot", "incldue", "the", "whole", "spec", "but", "only", "the", "area", "that", "be", "cause", "the", "issue", "NUMBER", "define", "reusable", "parameters", "yaml", "parameters", "MaxResults", "name", "maxResults", "required", "false", "description", "xXXXXXXXXXXXXX", "NUMBER", "type", "number", "format", "integer", "default", "NUMBER", "minimum", "NUMBER", "maximum", "NUMBER", "exclusiveMinimum", "true", "exclusiveMaximum", "false", "in", "query", "paths", "Logs", "get", "operationId", "getLogs", "summary", "YYYYYYYYYYYYYY", "parameters", "ref", "parameters", "MaxResults", "NUMBER", "responses", "NUMBER", "description", "XXXXXXXXXXXXXX", "schema", "type", "object", "properties", "nextToken", "type", "string", "assets", "ref", "definitions", "Services", "TAG", "NUMBER", "return", "error", "NUMBER", "CompositeValidationError", "res", "NUMBER", "return", "nil", "func", "o", "WhyIsThisHappening", "validateAssets", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Required", "listClustersPagesOK", "NUMBER", "assets", "body", "o", "NUMBER", "Assets", "err", "nil", "return", "err", "return", "nil", "func", "o", "WhyIsThisHappening", "validateNextToken", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Required", "listClustersPagesOK", "NUMBER", "nextToken", "body", "o", "NUMBER", "NextToken", "err", "nil", "return", "err", "return", "nil", "I", "replaced", "some", "string", "with", "whyIsThisHappening", "because", "it", "be", "too", "specific", "NUMBER", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "I", "can", "only", "post", "the", "log", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "make", "gen", "schema", "anon", "true", "req", "true", "tuple", "false", "whyIsThisHappening", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "object", "properties", "assets", "ref", "definitions", "Clusters", "nextToken", "type", "string", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "after", "shortcuit", "named", "ref", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "object", "properties", "assets", "ref", "definitions", "Clusters", "nextToken", "type", "string", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "after", "lifting", "special", "all", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "object", "properties", "assets", "ref", "definitions", "Clusters", "nextToken", "type", "string", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "all", "of", "for", "NUMBER", "entries", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "object", "properties", "assets", "ref", "definitions", "Clusters", "nextToken", "type", "string", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "model", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "true", "req", "true", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "object", "anon", "true", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "gschema", "rrequired", "true", "nullable", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "gschema", "nullable", "true", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "model", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "true", "req", "true", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "object", "anon", "true", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "gschema", "nnullable", "true", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "properties", "whyIsThisHappening", "parent", "whyIsThisHappening", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "property", "whyIsThisHappening", "assets", "tup", "false", "type", "object", "properties", "assets", "ref", "definitions", "Clusters", "nextToken", "type", "string", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "model", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "true", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "ref", "anon", "false", "req", "false", "definitions", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "loading", "with", "base", "NUMBER", "specs", "omg", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "false", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "array", "anon", "false", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "true", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "ref", "anon", "false", "req", "false", "definitions", "Cluster", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "loading", "with", "base", "NUMBER", "specs", "omg", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "false", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "object", "anon", "false", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "clear", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "Cluster", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "clear", "Cluster", "models", "NUMBER", "Cluster", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "name", "models", "NUMBER", "Cluster", "package", "alias", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "clear", "Clusters", "models", "NUMBER", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "name", "models", "NUMBER", "Clusters", "package", "alias", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "new", "struct", "branch", "whyIsThisHappening", "parent", "whyIsThisHappening", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "cloning", "context", "whyIsThisHappening", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "made", "new", "struct", "branch", "assets", "parent", "whyIsThisHappening", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "make", "gen", "schema", "anon", "true", "req", "true", "tuple", "false", "assets", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ref", "definitions", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "after", "shortcuit", "named", "ref", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ref", "definitions", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "after", "lifting", "special", "all", "of", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ref", "definitions", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "all", "of", "for", "NUMBER", "entries", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ref", "definitions", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "model", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "true", "req", "true", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "ref", "anon", "false", "req", "true", "definitions", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "loading", "with", "base", "NUMBER", "specs", "omg", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "false", "req", "true", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "array", "anon", "false", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "true", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "ref", "anon", "false", "req", "false", "definitions", "Cluster", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "loading", "with", "base", "NUMBER", "specs", "omg", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "false", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "object", "anon", "false", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "clear", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "Cluster", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "clear", "Cluster", "models", "NUMBER", "Cluster", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "name", "models", "NUMBER", "Cluster", "package", "alias", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "clear", "Clusters", "models", "NUMBER", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "name", "models", "NUMBER", "Clusters", "package", "alias", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "gschema", "rrequired", "true", "nullable", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "gschema", "nullable", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "model", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "true", "req", "true", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "ref", "anon", "false", "req", "true", "definitions", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "loading", "with", "base", "NUMBER", "specs", "omg", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "false", "req", "true", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "array", "anon", "false", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "true", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "ref", "anon", "false", "req", "false", "definitions", "Cluster", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "loading", "with", "base", "NUMBER", "specs", "omg", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "schema", "anon", "false", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "resolving", "object", "anon", "false", "req", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "clear", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "Cluster", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "clear", "Cluster", "models", "NUMBER", "Cluster", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "name", "models", "NUMBER", "Cluster", "package", "alias", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "NUMBER", "go", "NUMBER", "know", "def", "type", "clear", "Clusters", "models", "NUMBER", "Clusters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "name", "models", "NUMBER", "Clusters", "package", "alias", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "gschema", "nnullable", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "properties", "assets", "parent", "whyIsThisHappening", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "finished", "gen", "schema", "for", "assets", "Sorry", "I", "can", "t", "because", "it", "be", "not", "an", "opensource", "project", "NUMBER", "Could", "you", "perhaps", "try", "to", "make", "a", "small", "isolated", "yaml", "json", "that", "reproduces", "the", "issue", "you", "re", "facing", "This", "would", "help", "us", "debug", "your", "problem", "while", "preventing", "you", "from", "having", "to", "share", "your", "actual", "swagger", "spec", "It", "turns", "out", "it", "be", "relate", "to", "this", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "The", "validate", "package", "be", "for", "some", "reason", "miss", "but", "other", "package", "like", "github", "NUMBER", "com", "go", "openapi", "strfmt", "be", "ok", "NUMBER", "So", "when", "goimport", "try", "to", "do", "its", "job", "the", "package", "be", "not", "there", "and", "the", "import", "be", "miss", "as", "a", "result", "but", "just", "for", "those", "file", "which", "be", "server", "response", "NUMBER", "There", "be", "a", "validate", "package", "but", "it", "be", "under", "go", "openapi", "vendor", "NUMBER", "For", "now", "I", "just", "add", "a", "goimport", "after", "the", "post", "processing", "to", "get", "around", "it", "NUMBER", "Now", "have", "to", "add", "go", "get", "u", "golang", "NUMBER", "org", "x", "tool", "cmd", "goimports", "then", "GOPATH", "bin", "goimports", "w", "v", "just", "fo", "fix", "those", "problematic", "file", "for", "a", "workaround", "It", "s", "possible", "for", "the", "Title", "to", "contain", "newline", "seprators", "as", "well", "which", "break", "the", "generate", "code", "NUMBER", "A", "notable", "example", "be", "google", "NUMBER", "protobuf", "NUMBER", "Empty", "via", "grpc", "gateway", "NUMBER", "This", "applies", "the", "comment", "function", "to", "it", "like", "description", "to", "wrap", "it", "over", "multiple", "commented", "lines", "if", "needed", "NUMBER", "close", "NUMBER", "Signed", "off", "by", "Lincoln", "Stoll", "TAG", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "increase", "coverage", "by", "NUMBER", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "NUMBER", "dbbc", "NUMBER", "c", "NUMBER", "d", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "dbbcca", "NUMBER", "bacdcae", "NUMBER", "bd", "NUMBER", "e", "NUMBER", "a", "NUMBER", "a", "NUMBER", "dcd", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "de", "NUMBER", "a", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "cd", "NUMBER", "a", "NUMBER", "b", "NUMBER", "bdbb", "NUMBER", "f", "src", "pr", "Problem", "statement", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "unresolvable", "null", "format", "Swagger", "specification", "LINK", "Commited", "results", "of", "use", "swagger", "codegen", "LINK", "Steps", "to", "reproduce", "swagger", "generate", "server", "swagger", "NUMBER", "json", "Problem", "statement", "When", "developing", "a", "service", "use", "go", "swagger", "a", "server", "can", "be", "automatically", "generate", "NUMBER", "On", "top", "of", "that", "a", "server", "cli", "application", "can", "be", "created", "but", "one", "can", "be", "manually", "created", "as", "well", "NUMBER", "Before", "one", "can", "call", "server", "NUMBER", "Serve", "the", "api", "needs", "to", "be", "properly", "configured", "AND", "the", "server", "has", "to", "have", "the", "handler", "set", "NUMBER", "Currently", "that", "process", "be", "in", "my", "opinion", "quite", "error", "prone", "NUMBER", "Steps", "to", "reproduce", "Generate", "a", "server", "based", "on", "any", "valid", "OpenAPI", "spec", "and", "then", "create", "a", "server", "cli", "app", "more", "or", "less", "as", "follows", "go", "package", "main", "imports", "NUMBER", "func", "main", "swaggerSpec", "err", "loads", "NUMBER", "Analyzed", "restapi", "NUMBER", "SwaggerJSON", "if", "err", "nil", "log", "NUMBER", "Fatalln", "err", "api", "foo", "NUMBER", "NewFooAPI", "swaggerSpec", "server", "restapi", "NUMBER", "NewServer", "api", "defer", "server", "NUMBER", "Shutdown", "calling", "any", "route", "will", "make", "the", "server", "app", "panic", "and", "recover", "the", "reason", "be", "that", "server", "NUMBER", "ConfigureAPI", "isn", "t", "call", "instead", "the", "user", "choose", "to", "set", "the", "handler", "herself", "but", "forgot", "to", "set", "the", "producers", "and", "consumers", "among", "other", "things", "NUMBER", "server", "NUMBER", "SetHandler", "api", "NUMBER", "Serve", "nil", "if", "err", "server", "NUMBER", "Serve", "err", "nil", "log", "NUMBER", "Fatalln", "err", "When", "you", "use", "the", "generate", "server", "cli", "instead", "you", "ll", "have", "it", "calling", "server", "NUMBER", "ConfigureAPI", "make", "it", "not", "panic", "and", "instead", "return", "you", "the", "expected", "NotImplemented", "error", "when", "calling", "any", "route", "NUMBER", "Proposed", "solution", "While", "this", "work", "greats", "it", "s", "not", "a", "good", "solution", "I", "think", "NUMBER", "The", "generate", "configureAPI", "function", "be", "pretty", "useless", "which", "makes", "sense", "I", "suppose", "knowing", "that", "it", "seems", "to", "be", "a", "file", "that", "be", "meant", "to", "be", "edit", "and", "thus", "be", "made", "useful", "NUMBER", "Personally", "however", "I", "think", "we", "should", "rely", "on", "better", "defaults", "and", "I", "think", "I", "have", "a", "solution", "that", "doesn", "t", "break", "any", "code", "for", "people", "use", "older", "version", "NUMBER", "Make", "the", "API", "constructor", "have", "reasonable", "defaults", "NUMBER", "For", "this", "we", "have", "to", "change", "a", "constructor", "such", "as", "this", "go", "func", "NewFooAPI", "spec", "loads", "NUMBER", "Document", "FooAPI", "return", "FooAPI", "handlers", "make", "map", "string", "map", "string", "http", "NUMBER", "Handler", "formats", "strfmt", "NUMBER", "Default", "defaultConsumes", "application", "json", "defaultProduces", "application", "json", "ServerShutdown", "func", "spec", "spec", "to", "go", "func", "NewFooAPI", "spec", "loads", "NUMBER", "Document", "FooAPI", "return", "FooAPI", "handlers", "make", "map", "string", "map", "string", "http", "NUMBER", "Handler", "formats", "strfmt", "NUMBER", "Default", "defaultConsumes", "application", "json", "defaultProduces", "application", "json", "ServerShutdown", "func", "basically", "giving", "the", "ServerError", "producers", "and", "consumers", "a", "decent", "default", "ServeError", "error", "NUMBER", "ServerError", "JSONConsumer", "runtime", "NUMBER", "JSONConsumer", "JSONProducer", "runtime", "NUMBER", "JSONProducer", "TxtProducer", "runtime", "NUMBER", "TextProducer", "spec", "spec", "Doing", "this", "makes", "it", "so", "that", "the", "API", "as", "it", "be", "just", "works", "NUMBER", "On", "top", "of", "that", "we", "could", "also", "make", "all", "the", "handlers", "by", "default", "_NotImplementedHandlers_", "such", "that", "the", "simple", "example", "given", "above", "just", "works", "without", "any", "weird", "unexpect", "panics", "NUMBER", "Another", "idea", "would", "be", "that", "the", "configureAPI", "function", "wouldn", "t", "just", "stupidly", "override", "all", "handlers", "and", "instead", "first", "check", "if", "the", "handlers", "be", "still", "nil", "NUMBER", "And", "only", "override", "a", "handler", "if", "it", "be", "indeed", "still", "nil", "NUMBER", "Lastly", "one", "could", "even", "forget", "to", "set", "the", "handler", "e", "NUMBER", "g", "NUMBER", "via", "server", "NUMBER", "SetHandler", "api", "NUMBER", "Serve", "nil", "and", "not", "get", "a", "panic", "or", "fatal", "error", "at", "start", "up", "to", "warn", "about", "this", "NUMBER", "Instead", "no", "routes", "will", "be", "available", "and", "everything", "will", "return", "a", "NUMBER", "NUMBER", "These", "error", "might", "tip", "of", "the", "user", "but", "perhaps", "explicitly", "shouting", "to", "the", "user", "about", "this", "problem", "at", "start", "up", "of", "the", "cmd", "app", "might", "be", "more", "helpful", "and", "beginner", "friendly", "casualjim", "you", "have", "any", "opinions", "feedback", "on", "this", "issue", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "decrease", "coverage", "by", "NUMBER", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "NUMBER", "df", "NUMBER", "adfdd", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "df", "NUMBER", "e", "NUMBER", "a", "NUMBER", "dce", "NUMBER", "d", "NUMBER", "c", "NUMBER", "c", "NUMBER", "b", "NUMBER", "c", "NUMBER", "fd", "NUMBER", "adfddc", "NUMBER", "e", "NUMBER", "d", "NUMBER", "eda", "NUMBER", "ad", "NUMBER", "d", "NUMBER", "fec", "NUMBER", "e", "NUMBER", "f", "NUMBER", "src", "pr", "Problem", "statement", "Likely", "relate", "to", "NUMBER", "NUMBER", "Given", "a", "spec", "with", "a", "property", "of", "product_type", "description", "The", "type", "of", "product", "this", "mosaic", "be", "enum", "basemap", "timelapse", "l", "NUMBER", "m", "I", "m", "get", "this", "code", "on", "the", "client", "and", "server", "gen", "code", "func", "init", "var", "res", "string", "if", "err", "json", "NUMBER", "Unmarshal", "byte", "basemap", "timelapse", "l", "NUMBER", "m", "res", "err", "nil", "panic", "err", "NUMBER", "I", "suspect", "it", "should", "be", "json", "NUMBER", "Unmarshal", "byte", "basemap", "timelapse", "l", "NUMBER", "m", "res", "Nice", "NUMBER", "thanks", "casualjim", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "increase", "coverage", "by", "NUMBER", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "NUMBER", "e", "NUMBER", "d", "NUMBER", "c", "NUMBER", "b", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "e", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "c", "NUMBER", "a", "NUMBER", "dc", "NUMBER", "a", "NUMBER", "aac", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ad", "NUMBER", "e", "NUMBER", "ad", "NUMBER", "b", "NUMBER", "aaafd", "NUMBER", "de", "NUMBER", "src", "pr", "Problem", "statement", "When", "I", "run", "swagger", "generate", "server", "name", "MyName", "spec", "current", "NUMBER", "json", "default", "scheme", "https", "I", "get", "the", "output", "no", "operations", "were", "selected", "Probably", "a", "n", "NUMBER", "b", "question", "but", "how", "can", "I", "generate", "a", "server", "with", "_all_", "operations", "If", "I", "have", "miss", "the", "documentation", "I", "would", "love", "to", "get", "the", "URL", "NUMBER", "Thanks", "PS", "I", "have", "_many_", "operations", "so", "would", "be", "nice", "if", "I", "just", "can", "include", "all", "of", "them", "NUMBER", "Would", "it", "be", "possible", "to", "perhaps", "include", "the", "spec", "file", "you", "re", "use", "might", "help", "others", "in", "knowing", "why", "it", "doesn", "t", "work", "for", "you", "NUMBER", "Thanks", "all", "completely", "misunderstood", "this", "NUMBER", "Got", "it", "now", "NUMBER", "Problem", "statement", "Extra", "unwanted", "definitions", "get", "generate", "when", "generating", "a", "spec", "use", "the", "m", "flag", "NUMBER", "More", "information", "about", "this", "flag", "LINK", "swagger", "go", "swagger", "blob", "master", "cmd", "swagger", "commands", "generate", "spec", "NUMBER", "go", "L", "NUMBER", "Steps", "to", "reproduce", "Create", "following", "main", "file", "somewhere", "in", "your", "GOPATH", "go", "A", "Bug", "API", "An", "API", "Definition", "to", "show", "a", "bug", "in", "go", "swagger", "NUMBER", "Because", "of", "the", "bug", "definitions", "get", "generate", "from", "types", "which", "have", "no", "model", "annotation", "swagger", "meta", "package", "main", "Ping", "Response", "swagger", "model", "pingResponse", "type", "pingResponse", "struct", "type", "Handler", "interface", "Foo", "int", "swagger", "parameters", "ping", "type", "pingParams", "struct", "Represents", "who", "be", "pinging", "in", "path", "required", "true", "Who", "string", "json", "who", "swagger", "route", "GET", "ping", "who", "ping", "Test", "your", "connection", "with", "this", "service", "NUMBER", "Produces", "plain", "text", "Responses", "NUMBER", "body", "pingResponse", "func", "ping", "func", "main", "Generate", "the", "spec", "use", "following", "command", "swagger", "generate", "spec", "m", "o", "NUMBER", "swagger", "NUMBER", "json", "In", "the", "generate", "file", "you", "should", "see", "following", "unwanted", "definitions", "json", "definitions", "Handler", "type", "object", "properties", "Foo", "type", "integer", "format", "int", "NUMBER", "x", "go", "package", "github", "NUMBER", "com", "glendc", "tmp", "extra", "definitions", "pingParams", "type", "object", "required", "who", "properties", "who", "description", "Represents", "who", "be", "pinging", "n", "nin", "path", "type", "string", "x", "go", "name", "Who", "x", "go", "package", "github", "NUMBER", "com", "glendc", "tmp", "extra", "definitions", "pingParams", "should", "not", "be", "defined", "as", "a", "definition", "it", "has", "no", "swagger", "model", "annotation", "it", "be", "a", "_struct_", "use", "to", "define", "the", "params", "for", "the", "ping", "operation", "Handler", "should", "not", "be", "defined", "as", "a", "definition", "it", "has", "no", "annotations", "at", "all", "it", "be", "an", "_interface_", "and", "has", "nothing", "to", "do", "with", "the", "swagger", "spec", "The", "following", "TODO", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "schema", "NUMBER", "go", "L", "NUMBER", "be", "the", "source", "of", "this", "bug", "NUMBER", "Solve", "the", "TODO", "and", "the", "bug", "be", "probably", "solve", "as", "well", "NUMBER", "Problem", "statement", "some", "links", "under", "the", "section", "below", "be", "broken", "LINK", "swagger", "go", "swagger", "from", "source", "Problem", "statement", "Currently", "it", "be", "not", "possible", "to", "define", "a", "route", "path", "entirely", "as", "a", "Swagger", "NUMBER", "OpenAPI", "YAML", "Path", "Object", "support", "everything", "a", "path", "object", "would", "support", "NUMBER", "Example", "An", "example", "of", "how", "a", "swagger", "operation", "annotation", "could", "look", "like", "go", "swagger", "operation", "PUT", "pets", "id", "pets", "updatePet", "Updates", "the", "details", "for", "a", "pet", "NUMBER", "Some", "long", "explanation", "spanning", "over", "multipele", "lines", "AKA", "the", "description", "NUMBER", "consumes", "application", "json", "application", "xml", "produces", "application", "xml", "application", "json", "parameters", "in", "body", "name", "body", "description", "Pet", "object", "that", "needs", "to", "be", "add", "to", "the", "store", "required", "true", "schema", "ref", "definitions", "Pet", "responses", "NUMBER", "description", "Invalid", "ID", "supplied", "NUMBER", "description", "Pet", "not", "find", "NUMBER", "description", "Validation", "exception", "security", "petstore_auth", "write", "pets", "read", "pets", "func", "UpdatePet", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "params", "denco", "NUMBER", "Params", "some", "actual", "stuff", "should", "happen", "in", "here", "EDIT", "add", "description", "under", "summary", "and", "under", "description", "within", "Godoc", "comments", "NUMBER", "indicates", "the", "start", "of", "the", "path", "spec", "NUMBER", "fix", "the", "problem", "when", "a", "pattern", "validation", "fail", "on", "a", "field", "in", "request", "body", "which", "be", "a", "type", "definition", "referencing", "to", "another", "definition", "the", "returned", "error", "message", "won", "t", "show", "the", "validation", "fail", "field", "name", "cause", "trouble", "to", "read", "what", "field", "fail", "at", "validation", "NUMBER", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "not", "change", "coverage", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "b", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "c", "NUMBER", "c", "NUMBER", "d", "NUMBER", "d", "NUMBER", "dad", "NUMBER", "d", "NUMBER", "f", "NUMBER", "f", "NUMBER", "c", "NUMBER", "de", "NUMBER", "bfbf", "NUMBER", "a", "NUMBER", "b", "NUMBER", "c", "NUMBER", "f", "NUMBER", "b", "NUMBER", "c", "NUMBER", "da", "NUMBER", "a", "NUMBER", "b", "NUMBER", "src", "pr", "casualjim", "This", "makes", "most", "sense", "NUMBER", "I", "ll", "create", "another", "story", "to", "implement", "NUMBER", "Problem", "statement", "Currently", "the", "swagger", "route", "generator", "be", "incomplete", "and", "doesn", "t", "allow", "everything", "that", "s", "defined", "in", "the", "Paths", "Object", "and", "its", "children", "as", "specified", "in", "the", "OpenAPI", "Swagger", "NUMBER", "spec", "NUMBER", "Defining", "responses", "linked", "to", "status", "code", "be", "already", "possible", "but", "can", "currently", "only", "be", "defined", "when", "linked", "to", "an", "actual", "Golang", "type", "linked", "to", "an", "exist", "swagger", "response", "Godoc", "comment", "NUMBER", "This", "be", "fine", "and", "this", "behavior", "should", "remain", "to", "be", "support", "there", "be", "however", "situations", "where", "one", "cannot", "or", "doesn", "t", "want", "to", "link", "a", "REST", "API", "response", "to", "an", "explicitly", "defined", "type", "NUMBER", "In", "such", "cases", "it", "should", "be", "possible", "to", "define", "the", "response", "inline", "as", "one", "can", "do", "in", "an", "actual", "OpenAPI", "spec", "file", "NUMBER", "Defining", "parameters", "be", "currently", "also", "already", "possible", "but", "again", "only", "when", "linked", "to", "an", "actual", "Golang", "type", "NUMBER", "Again", "this", "behavior", "should", "probably", "remain", "support", "but", "just", "as", "with", "Responses", "we", "probably", "also", "should", "support", "inline", "definitions", "of", "parameters", "as", "one", "would", "usually", "do", "when", "defining", "a", "pure", "spec", "file", "NUMBER", "This", "be", "an", "enchantment", "issue", "to", "announce", "the", "work", "I", "ll", "be", "doing", "on", "this", "codebase", "to", "make", "this", "happen", "NUMBER", "I", "ll", "also", "keep", "a", "checklist", "of", "the", "tasks", "involved", "to", "get", "this", "issue", "solve", "such", "that", "anyone", "can", "follow", "the", "work", "in", "progress", "NUMBER", "Please", "get", "involved", "if", "You", "be", "work", "on", "a", "very", "similar", "issue", "already", "You", "have", "feedback", "on", "the", "proposal", "and", "or", "work", "in", "progress", "You", "know", "of", "relate", "issue", "that", "I", "should", "take", "a", "look", "at", "and", "potentially", "fix", "Tasks", "Support", "Parameters", "as", "a", "multi", "line", "tag", "as", "part", "of", "the", "exist", "swagger", "route", "specification", "Make", "Responses", "work", "similar", "to", "how", "it", "the", "OpenAPI", "ResponseObject", "LINK", "responseObject", "works", "a", "reference", "should", "still", "be", "possible", "but", "defining", "its", "schema", "completely", "inline", "should", "be", "possible", "as", "well", "Make", "it", "possible", "to", "define", "body", "response", "references", "where", "the", "type", "do", "not", "need", "to", "be", "defined", "within", "an", "inline", "Body", "variable", "containing", "the", "actual", "definition", "Remaining", "open", "question", "What", "to", "do", "when", "a", "parameter", "be", "both", "defined", "inline", "as", "part", "of", "the", "swagger", "route", "comment", "and", "as", "a", "swagger", "parameter", "comment", "Related", "issue", "NUMBER", "NUMBER", "NUMBER", "This", "issue", "should", "probably", "be", "close", "as", "it", "might", "not", "be", "needed", "anymore", "after", "all", "NUMBER", "Talking", "to", "casualjim", "on", "slack", "helped", "me", "clarify", "things", "NUMBER", "It", "seems", "like", "I", "was", "make", "suggestions", "because", "I", "didn", "t", "fully", "understand", "the", "design", "behind", "go", "swagger", "NUMBER", "I", "opened", "issue", "NUMBER", "so", "that", "documentation", "for", "this", "can", "be", "add", "as", "I", "wasn", "t", "the", "first", "to", "talk", "to", "casualjim", "about", "this", "NUMBER", "Secondly", "I", "opened", "issue", "NUMBER", "to", "support", "a", "new", "annotation", "operation", "that", "allows", "you", "to", "define", "a", "Path", "Route", "as", "you", "would", "specify", "a", "Path", "Object", "in", "your", "Swagger", "YAML", "Specification", "NUMBER", "Problem", "statement", "Seems", "the", "gen", "ed", "client", "code", "has", "a", "problem", "with", "UUID", "types", "NUMBER", "client", "client", "operations", "get_mosaic_experimental_series_series_id_mosaics_parameters", "NUMBER", "go", "NUMBER", "cannot", "use", "o", "NUMBER", "SeriesID", "type", "strfmt", "NUMBER", "UUID", "as", "type", "string", "in", "argument", "to", "r", "NUMBER", "SetPathParam", "client", "client", "operations", "get_mosaic_experimental_series_series_id_parameters", "NUMBER", "go", "NUMBER", "cannot", "use", "o", "NUMBER", "SeriesID", "type", "strfmt", "NUMBER", "UUID", "as", "type", "string", "in", "argument", "to", "r", "NUMBER", "SetPathParam", "the", "path", "be", "of", "the", "form", "mosaic", "experimental", "series", "SeriesId", "mosaics", "which", "may", "have", "something", "to", "do", "with", "it", "NUMBER", "Swagger", "specification", "LINK", "Hey", "SandyWalsh", "You", "can", "work", "around", "this", "locally", "by", "copying", "in", "the", "client", "parameters", "NUMBER", "gotmpl", "to", "your", "local", "project", "and", "specify", "the", "template", "dir", "flag", "NUMBER", "You", "can", "change", "the", "SetPathParam", "line", "to", "if", "err", "r", "NUMBER", "SetPathParam", "printf", "q", "NUMBER", "Name", "if", "NUMBER", "Formatter", "NUMBER", "Formatter", "if", "NUMBER", "IsNullable", "end", "NUMBER", "ValueExpression", "else", "if", "eq", "NUMBER", "GoType", "strfmt", "NUMBER", "UUID", "string", "end", "if", "NUMBER", "IsNullable", "end", "NUMBER", "ValueExpression", "if", "eq", "NUMBER", "GoType", "strfmt", "NUMBER", "UUID", "end", "end", "err", "nil", "As", "far", "as", "upstream", "fix", "go", "I", "have", "some", "suggestions", "but", "I", "m", "not", "sure", "the", "right", "best", "way", "so", "I", "ll", "just", "leave", "my", "ideas", "here", "as", "note", "to", "the", "maintainers", "I", "hacked", "around", "in", "generator", "types", "NUMBER", "go", "and", "add", "strfmt", "NUMBER", "UUID", "string", "to", "the", "stringFormatters", "map", "which", "worked", "perfectly", "w", "o", "change", "the", "template", "where", "perfectly", "means", "it", "build", "for", "this", "one", "particular", "case", "NUMBER", "It", "would", "be", "nice", "if", "the", "atomic", "string", "type", "implement", "fmt", "NUMBER", "Stringer", "as", "strfmt", "NUMBER", "UUID", "do", "so", "that", "go", "openapi", "runtime", "could", "take", "a", "fmt", "NUMBER", "Stringer", "as", "the", "second", "param", "of", "SetPathParam", "or", "SetPathParam", "could", "take", "an", "empty", "interface", "and", "try", "to", "cast", "to", "string", "fmt", "NUMBER", "Stringer", "etc", "in", "turn", "NUMBER", "Hey", "xtoddx", "NUMBER", "a", "great", "voice", "to", "hear", "from", "the", "wilderness", "If", "the", "manual", "edits", "get", "to", "be", "too", "much", "I", "ll", "look", "at", "copying", "the", "template", "NUMBER", "Thanks", "for", "that", "NUMBER", "I", "can", "see", "that", "if", "we", "re", "going", "to", "keep", "use", "this", "library", "I", "m", "going", "to", "need", "to", "get", "my", "hands", "dirty", "in", "the", "implementation", "NUMBER", "Thanks", "for", "steering", "me", "in", "the", "general", "direction", "NUMBER", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "f", "NUMBER", "d", "NUMBER", "bb", "NUMBER", "fc", "NUMBER", "d", "NUMBER", "b", "NUMBER", "bf", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "d", "NUMBER", "dce", "NUMBER", "c", "NUMBER", "c", "One", "of", "my", "colleagues", "notice", "that", "the", "NUMBER", "sha", "from", "the", "docker", "image", "differs", "from", "the", "NUMBER", "image", "in", "the", "repo", "NUMBER", "Problem", "statement", "when", "generating", "a", "test", "client", "and", "vendoring", "the", "openapi", "package", "the", "client", "transport", "configuration", "pick", "the", "non", "vendored", "version", "NUMBER", "src", "github", "NUMBER", "com", "stillwater", "scoring_engine", "api", "client", "mp_scoring_client", "NUMBER", "go", "NUMBER", "cannot", "use", "transport", "type", "client", "NUMBER", "Runtime", "as", "type", "github", "NUMBER", "com", "stillwater", "scoring_engine", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "ClientTransport", "in", "argument", "to", "New", "client", "NUMBER", "Runtime", "do", "not", "implement", "github", "NUMBER", "com", "stillwater", "scoring_engine", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "ClientTransport", "wrong", "type", "for", "Submit", "method", "have", "Submit", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "ClientOperation", "interface", "error", "want", "Submit", "github", "NUMBER", "com", "stillwater", "scoring_engine", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "ClientOperation", "interface", "error", "Anyway", "to", "get", "around", "this", "to", "create", "test", "clients", "from", "the", "yaml", "spec", "Any", "insights", "how", "to", "locate", "where", "the", "nesting", "comes", "from", "Ravenwater", "have", "you", "managed", "to", "fix", "this", "by", "now", "If", "so", "how", "did", "you", "do", "it", "Problem", "statement", "I", "would", "like", "to", "specify", "parameters", "when", "creating", "a", "route", "similar", "to", "Consumes", "Produces", "Responses", "etc", "NUMBER", "These", "details", "be", "the", "first", "that", "come", "to", "mind", "so", "it", "could", "probably", "use", "some", "iteration", "NUMBER", "swagger", "route", "PUT", "profile", "id", "update_profile", "Update", "a", "user", "profile", "Parameters", "id", "in", "path", "required", "true", "type", "string", "Description", "goes", "here", "profile", "in", "body", "required", "true", "model", "profile_model", "Consumes", "application", "json", "Produces", "application", "json", "Responses", "NUMBER", "ok", "NUMBER", "NotFound", "In", "other", "places", "swagger", "route", "GET", "profile", "id", "get_profile", "Get", "a", "user", "profile", "Parameters", "id", "in", "path", "required", "true", "Description", "goes", "here", "Consumes", "application", "json", "Produces", "application", "json", "Responses", "NUMBER", "profile_model", "swagger", "model", "profile_model", "type", "Profile", "struct", "a", "bunch", "of", "model", "info", "here", "And", "this", "fits", "with", "NUMBER", "it", "would", "be", "nice", "to", "create", "a", "parameter", "and", "reuse", "it", "so", "for", "example", "swagger", "parameter", "profile_id_param", "type", "ProfileIDParam", "struct", "Profile", "id", "Required", "true", "In", "path", "ID", "string", "json", "id", "and", "in", "the", "examples", "above", "replace", "the", "lines", "that", "specify", "id", "with", "something", "like", "Parameters", "predefined", "profile_id_param", "I", "like", "this", "idea", "NUMBER", "I", "also", "submitted", "a", "similar", "request", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "It", "would", "also", "be", "great", "if", "we", "could", "add", "headers", "as", "well", "and", "descriptions", "for", "return", "values", "This", "almost", "solves", "my", "problem", "my", "issue", "be", "that", "I", "be", "generating", "the", "models", "in", "a", "previous", "run", "of", "swagger", "and", "passing", "that", "json", "file", "as", "an", "input", "and", "so", "I", "do", "not", "have", "model", "objects", "NUMBER", "This", "strange", "setup", "be", "a", "side", "effect", "of", "use", "protobuf", "the", "probably", "also", "because", "I", "m", "still", "learning", "how", "to", "use", "go", "swagger", "NUMBER", "I", "m", "going", "to", "give", "it", "a", "NUMBER", "attempt", "and", "see", "if", "I", "can", "clean", "it", "up", "NUMBER", "However", "I", "still", "have", "the", "original", "request", "NUMBER", "I", "would", "like", "to", "create", "parameters", "under", "a", "route", "without", "having", "to", "create", "a", "struct", "with", "a", "swagger", "parameters", "comment", "NUMBER", "As", "mention", "in", "NUMBER", "it", "would", "be", "nice", "to", "point", "to", "exist", "parameters", "here", "too", "but", "that", "s", "a", "very", "soft", "request", "NUMBER", "casualjim", "the", "only", "thing", "I", "don", "t", "understand", "be", "why", "everything", "has", "to", "be", "linked", "to", "a", "struct", "Why", "can", "t", "we", "simply", "define", "it", "as", "a", "document", "For", "example", "I", "don", "t", "want", "a", "params", "struct", "yet", "i", "want", "to", "be", "able", "to", "define", "the", "PATH", "params", "for", "a", "certain", "route", "Right", "now", "that", "s", "only", "be", "possible", "when", "use", "a", "struct", "no", "Would", "it", "be", "going", "against", "the", "design", "of", "go", "swagger", "if", "I", "would", "work", "on", "a", "PR", "for", "this", "so", "that", "we", "can", "define", "params", "and", "responses", "all", "from", "within", "the", "route", "comments", "Rather", "than", "having", "to", "link", "them", "to", "structs", "Also", "be", "there", "a", "way", "to", "define", "body", "response", "structs", "without", "the", "need", "for", "that", "extra", "Body", "struct", "value", "It", "s", "a", "bit", "weird", "to", "have", "it", "there", "from", "a", "golang", "user", "perspective", "NUMBER", "GlenDC", "What", "about", "NUMBER", "body", "modelname", "This", "be", "under", "the", "swagger", "route", "comment", "though", "so", "it", "may", "not", "solve", "your", "problem", "NUMBER", "I", "be", "add", "a", "little", "parsing", "for", "the", "responses", "to", "support", "a", "description", "tag", "NUMBER", "Feel", "free", "to", "use", "that", "or", "come", "up", "with", "a", "different", "way", "NUMBER", "In", "general", "I", "like", "the", "idea", "of", "having", "tag", "NUMBER", "value", "NUMBER", "tag", "NUMBER", "value", "NUMBER", "etc", "but", "this", "doesn", "t", "fit", "with", "descriptions", "which", "I", "think", "be", "safe", "to", "assume", "have", "spaces", "in", "the", "value", "NUMBER", "My", "workaround", "be", "to", "make", "everything", "after", "desription", "part", "of", "the", "description", "NUMBER", "See", "NUMBER", "for", "more", "detail", "NUMBER", "Maybe", "what", "I", "m", "trying", "to", "achieve", "be", "a", "bit", "anti", "idiomatic", "NUMBER", "But", "the", "value", "would", "be", "that", "I", "wouldn", "t", "have", "a", "swagger", "file", "ever", "and", "always", "have", "it", "generate", "automatically", "purely", "on", "the", "server", "codebase", "such", "that", "the", "documentation", "system", "test", "and", "client", "code", "be", "always", "directly", "generate", "from", "the", "generate", "spec", "which", "be", "generate", "on", "itself", "from", "the", "server", "code", "NUMBER", "For", "the", "most", "part", "you", "want", "to", "have", "your", "spec", "generate", "from", "golang", "relate", "code", "such", "as", "response", "structs", "NUMBER", "But", "sometimes", "you", "re", "returning", "a", "json", "simply", "as", "a", "map", "string", "interface", "NUMBER", "Right", "now", "that", "doesn", "t", "seem", "to", "be", "possible", "NUMBER", "clawconduce", "the", "description", "tag", "be", "a", "beginning", "NUMBER", "But", "if", "you", "look", "at", "how", "one", "would", "normally", "write", "a", "fully", "manual", "openapi", "swagger", "NUMBER", "spec", "file", "there", "be", "so", "much", "more", "you", "can", "give", "it", "NUMBER", "For", "the", "cases", "where", "you", "would", "want", "that", "because", "you", "wouldn", "t", "have", "access", "to", "a", "struct", "it", "seems", "like", "a", "useful", "thing", "to", "have", "NUMBER", "So", "to", "recap", "NUMBER", "I", "agree", "that", "you", "want", "to", "keep", "the", "spec", "comments", "as", "closely", "linked", "to", "actual", "Golang", "code", "as", "possible", "NUMBER", "But", "because", "there", "will", "always", "be", "situations", "where", "that", "be", "not", "possible", "or", "desired", "it", "should", "be", "possible", "to", "do", "anything", "the", "specs", "allows", "via", "comments", "alone", "NUMBER", "Shouldn", "t", "be", "too", "hard", "to", "achieve", "should", "it", "And", "I", "don", "t", "want", "to", "have", "some", "bits", "in", "a", "spec", "file", "as", "the", "entire", "goal", "be", "to", "keep", "it", "all", "directly", "linked", "from", "within", "the", "code", "file", "just", "as", "you", "also", "want", "to", "generate", "normal", "documentation", "directly", "from", "in", "line", "comments", "NUMBER", "think", "Godocs", "Rust", "Docs", "And", "I", "guess", "the", "syntax", "would", "be", "as", "close", "as", "possible", "to", "the", "default", "YAML", "syntax", "I", "don", "t", "see", "why", "you", "would", "go", "away", "from", "that", "seems", "already", "simple", "enough", "NUMBER", "And", "makes", "it", "easier", "to", "learn", "to", "use", "it", "as", "people", "who", "want", "to", "use", "go", "swagger", "probably", "already", "know", "swagger", "openapi", "and", "its", "spec", "NUMBER", "I", "agree", "with", "most", "of", "what", "GlenDC", "says", "in", "my", "situation", "I", "would", "like", "the", "comments", "as", "close", "as", "possible", "to", "the", "code", "so", "it", "s", "right", "in", "your", "face", "when", "you", "re", "update", "code", "NUMBER", "I", "do", "like", "the", "yaml", "format", "but", "I", "shied", "away", "from", "that", "because", "it", "be", "a", "lot", "of", "parsing", "work", "NUMBER", "I", "do", "have", "a", "valid", "use", "case", "for", "the", "input", "swagger", "but", "it", "s", "a", "little", "strange", "NUMBER", "We", "migrated", "most", "of", "a", "python", "codebase", "to", "golang", "but", "there", "be", "still", "some", "python", "code", "left", "behind", "it", "be", "complex", "not", "easy", "to", "port", "NUMBER", "Thanks", "to", "the", "magic", "of", "nginx", "we", "can", "hide", "this", "fact", "from", "anyone", "use", "the", "API", "NUMBER", "So", "I", "be", "use", "a", "swagger", "file", "for", "the", "Python", "endpoints", "as", "an", "input", "swagger", "NUMBER", "I", "also", "use", "the", "input", "swagger", "a", "few", "places", "I", "could", "probably", "move", "to", "the", "code", "NUMBER", "Our", "models", "be", "defined", "in", "protobuf", "template", "and", "the", "code", "for", "structs", "be", "genearted", "from", "that", "NUMBER", "I", "put", "example", "values", "in", "the", "input", "swagger", "file", "NUMBER", "I", "also", "have", "some", "responses", "that", "be", "use", "in", "many", "places", "but", "I", "didn", "t", "want", "to", "add", "a", "struct", "these", "be", "all", "NUMBER", "xx", "responses", "NUMBER", "I", "could", "use", "the", "NUMBER", "solution", "but", "I", "wanted", "to", "point", "to", "a", "response", "responses", "so", "the", "descriptions", "all", "came", "from", "the", "same", "place", "NUMBER", "I", "think", "both", "could", "be", "solve", "by", "use", "structs", "but", "I", "d", "prefer", "just", "to", "write", "yaml", "json", "in", "comments", "I", "say", "json", "because", "for", "big", "json", "model", "examples", "I", "wouldn", "t", "want", "to", "translate", "the", "example", "to", "yaml", "NUMBER", "EDIT", "Grammer", "some", "word", "choice", "The", "parts", "where", "it", "s", "needed", "yes", "the", "part", "where", "it", "isn", "t", "needed", "I", "more", "than", "happily", "link", "directly", "to", "Golang", "code", "NUMBER", "But", "having", "this", "alternative", "for", "when", "I", "need", "it", "would", "definitely", "be", "great", "NUMBER", "I", "don", "t", "mind", "putting", "some", "time", "in", "to", "make", "this", "happen", "with", "a", "PR", "NUMBER", "Would", "just", "need", "some", "pointers", "to", "get", "me", "start", "and", "know", "of", "any", "gotchas", "as", "I", "would", "be", "new", "to", "this", "project", "and", "codebase", "NUMBER", "Some", "responses", "could", "be", "linked", "to", "a", "struct", "as", "it", "exists", "NUMBER", "But", "because", "currently", "you", "seem", "to", "need", "to", "put", "your", "struct", "value", "members", "within", "a", "body", "struct", "within", "the", "actual", "struct", "I", "can", "t", "use", "that", "method", "anyway", "NUMBER", "But", "for", "example", "parameters", "I", "never", "have", "them", "as", "structs", "so", "it", "would", "be", "a", "bit", "silly", "to", "define", "a", "Golang", "struct", "just", "to", "be", "able", "to", "generate", "spec", "information", "for", "them", "NUMBER", "Would", "be", "more", "work", "than", "just", "defining", "them", "inline", "as", "a", "Godoc", "comment", "from", "a", "user", "perspective", "NUMBER", "Another", "obvious", "thing", "that", "seems", "to", "be", "miss", "be", "add", "other", "information", "to", "routes", "such", "as", "examples", "NUMBER", "As", "that", "s", "also", "kind", "of", "information", "that", "would", "be", "needed", "in", "order", "to", "automatically", "run", "system", "end", "to", "end", "test", "based", "on", "a", "spec", "file", "NUMBER", "Cool", "sounds", "like", "a", "reasonable", "approach", "NUMBER", "I", "must", "say", "I", "m", "a", "bit", "surprised", "of", "having", "a", "new", "swagger", "input", "annotation", "proposal", "as", "I", "m", "not", "planning", "to", "write", "an", "entire", "specification", "as", "one", "comment", "as", "that", "gets", "a", "bit", "crazy", "perhaps", "Was", "more", "thinking", "to", "be", "able", "to", "provide", "a", "complete", "openapi", "router", "specification", "under", "the", "swagger", "router", "for", "a", "router", "so", "be", "able", "to", "provide", "parameters", "responses", "examples", "and", "whatnot", "under", "that", "annotation", "NUMBER", "Or", "be", "you", "saying", "that", "the", "swagger", "input", "should", "also", "be", "able", "to", "handle", "such", "incomplete", "specifications", "e", "NUMBER", "g", "NUMBER", "just", "NUMBER", "router", "definition", "As", "I", "do", "still", "want", "the", "documentation", "of", "each", "router", "right", "above", "the", "actual", "router", "creation", "NUMBER", "Does", "that", "make", "sense", "After", "some", "thought", "this", "issue", "might", "be", "solve", "with", "the", "solution", "potentially", "provide", "in", "enhancement", "issue", "NUMBER", "Yes", "it", "would", "casualjim", "GlenDC", "Should", "this", "be", "close", "in", "favor", "of", "NUMBER", "EDIT", "I", "just", "realized", "NUMBER", "be", "after", "NUMBER", "haha", "NUMBER", "Problem", "statement", "I", "have", "several", "endpoints", "that", "have", "very", "similar", "urls", "GET", "PUT", "DELETE", "all", "have", "an", "id", "in", "the", "URL", "NUMBER", "These", "calls", "all", "accept", "different", "parameters", "in", "the", "body", "though", "NUMBER", "I", "would", "like", "to", "specify", "the", "URL", "in", "path", "parameters", "separately", "from", "the", "body", "and", "or", "header", "parameters", "NUMBER", "I", "just", "notice", "that", "parameters", "can", "be", "references", "LINK", "parametersDefinitionsObject", "Which", "fits", "nicely", "with", "this", "issue", "NUMBER", "Here", "be", "an", "example", "of", "it", "be", "use", "LINK", "docs", "victorops", "api", "v", "NUMBER", "yaml", "Thanks", "I", "didn", "t", "realize", "the", "parameters", "structs", "joined", "together", "NUMBER", "Also", "I", "hadn", "t", "find", "this", "doc", "yet", "TAG", "until", "I", "grepped", "for", "the", "comment", "in", "the", "NUMBER", "comment", "I", "ve", "be", "use", "examples", "up", "until", "now", "NUMBER", "Anyways", "this", "works", "really", "well", "I", "still", "have", "a", "request", "though", "which", "I", "think", "falls", "more", "under", "NUMBER", "It", "believe", "in", "many", "cases", "it", "would", "be", "more", "intuitive", "if", "the", "route", "could", "point", "to", "several", "swagger", "parameters", "than", "if", "several", "swagger", "parameters", "point", "to", "the", "same", "route", "NUMBER", "I", "will", "follow", "up", "there", "NUMBER", "Problem", "statement", "I", "have", "NUMBER", "interrelated", "question", "NUMBER", "Is", "it", "possible", "to", "add", "the", "reason", "for", "the", "error", "within", "the", "swagger", "route", "annotation", "where", "we", "define", "the", "list", "of", "responses", "swagger", "route", "GET", "profile", "profile", "Get", "a", "user", "profile", "for", "specified", "user", "token", "NUMBER", "Consumes", "application", "json", "Produces", "application", "json", "text", "plain", "Schemes", "http", "https", "Responses", "NUMBER", "profile", "NUMBER", "NUMBER", "for", "NUMBER", "I", "want", "to", "say", "Unauthorized", "without", "creating", "a", "swagger", "response", "annotation", "and", "struct", "NUMBER", "maybe", "something", "like", "I", "tried", "the", "below", "option", "didnt", "work", "NUMBER", "description", "Unauthorized", "or", "even", "NUMBER", "reason", "Unauthorized", "Right", "now", "I", "have", "declared", "an", "empty", "struct", "that", "describes", "what", "I", "want", "the", "reason", "to", "be", "in", "the", "annotation", "NUMBER", "I", "feel", "it", "be", "cumbersome", "and", "not", "the", "best", "way", "to", "do", "it", "NUMBER", "Unauthorized", "swagger", "response", "Unauthorized", "type", "Unauthorized", "struct", "NUMBER", "Is", "it", "possible", "to", "define", "required", "headers", "inside", "the", "route", "itself", "so", "maybe", "have", "something", "like", "swagger", "route", "GET", "profile", "profile", "Get", "a", "user", "profile", "for", "specified", "user", "token", "NUMBER", "Consumes", "application", "json", "Produces", "application", "json", "text", "plain", "Headers", "Authorization", "The", "authorization", "token", "required", "Schemes", "http", "https", "Responses", "NUMBER", "profile", "NUMBER", "NUMBER", "Instead", "of", "again", "make", "a", "struct", "for", "the", "parameters", "that", "then", "connects", "to", "the", "route", "NUMBER", "Right", "now", "this", "be", "what", "I", "have", "implement", "swagger", "parameters", "profile", "type", "Authorization", "struct", "Authorization", "header", "for", "a", "users", "bearer", "token", "NUMBER", "in", "header", "required", "true", "Authorization", "string", "Swagger", "specification", "swagger", "NUMBER", "json", "I", "want", "the", "description", "so", "I", "wouldnt", "have", "to", "make", "a", "bunch", "of", "empty", "structs", "for", "status", "code", "that", "just", "return", "the", "status", "code", "text", "in", "the", "body", "NUMBER", "So", "for", "example", "if", "I", "want", "the", "swagger", "spec", "to", "display", "the", "reason", "I", "needed", "to", "make", "a", "struct", "NUMBER", "In", "the", "image", "below", "I", "dont", "have", "an", "empty", "struct", "for", "the", "NUMBER", "status", "code", "NUMBER", "But", "for", "the", "NUMBER", "status", "code", "I", "do", "which", "be", "why", "it", "displays", "it", "NUMBER", "So", "what", "I", "mean", "be", "if", "the", "interpreter", "could", "detect", "a", "response", "code", "it", "would", "fill", "in", "a", "default", "reason", "NUMBER", "screen", "shot", "NUMBER", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "NUMBER", "be", "LINK", "c", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "efbf", "NUMBER", "png", "The", "swagger", "route", "annotation", "Responses", "NUMBER", "NUMBER", "Unauthorized", "NUMBER", "Forbidden", "NUMBER", "NotFound", "Empty", "Structs", "NUMBER", "There", "be", "no", "struct", "for", "NUMBER", "status", "code", "Forbidden", "swagger", "response", "Forbidden", "type", "forbidden", "struct", "Not", "Found", "swagger", "response", "NotFound", "type", "notFound", "struct", "This", "seems", "relate", "to", "NUMBER", "which", "I", "address", "in", "PR", "NUMBER", "NUMBER", "Not", "exactly", "the", "same", "though", "and", "maybe", "NUMBER", "should", "change", "to", "address", "this", "issue", "as", "well", "NUMBER", "In", "NUMBER", "I", "assumed", "that", "the", "first", "item", "after", "the", "status", "code", "be", "always", "the", "response", "or", "model", "if", "use", "body", "and", "if", "there", "was", "any", "whitespace", "everything", "after", "that", "was", "the", "description", "NUMBER", "I", "didn", "t", "realize", "that", "there", "was", "a", "use", "case", "where", "there", "might", "be", "no", "response", "model", "so", "my", "PR", "doesn", "t", "solve", "this", "NUMBER", "I", "m", "not", "sure", "what", "the", "best", "way", "to", "support", "descriptions", "and", "models", "NUMBER", "I", "have", "some", "thoughts", "but", "leave", "it", "to", "casualjim", "to", "make", "the", "real", "decision", "NUMBER", "I", "think", "descriptions", "should", "probably", "support", "spaces", "so", "if", "the", "description", "could", "be", "at", "the", "end", "of", "a", "line", "that", "s", "easy", "to", "parse", "NUMBER", "Also", "it", "would", "be", "nice", "to", "support", "tags", "like", "body", "and", "description", "NUMBER", "And", "to", "keep", "backwards", "compatibility", "if", "the", "first", "item", "be", "not", "tag", "it", "s", "assumed", "to", "be", "the", "response", "NUMBER", "So", "for", "NUMBER", "NUMBER", "statusStruct", "description", "Return", "Status", "and", "for", "this", "issue", "NUMBER", "description", "Not", "Found", "If", "these", "or", "any", "change", "sound", "good", "not", "too", "complicated", "I", "d", "be", "happy", "to", "add", "them", "to", "NUMBER", "What", "do", "you", "mean", "by", "type", "information", "like", "listing", "field", "etc", "excellent", "I", "ll", "probably", "only", "add", "description", "NUMBER", "I", "also", "agree", "because", "of", "complexity", "it", "seems", "like", "if", "you", "re", "get", "that", "detailed", "or", "want", "to", "have", "that", "much", "information", "use", "a", "NUMBER", "line", "comment", "be", "not", "the", "way", "to", "go", "NUMBER", "In", "my", "case", "I", "m", "having", "a", "route", "path", "which", "simple", "be", "use", "to", "Ping", "the", "server", "and", "as", "its", "body", "which", "be", "ignored", "it", "simply", "returns", "ok", "along", "side", "a", "NUMBER", "Status", "Code", "NUMBER", "In", "such", "a", "case", "it", "should", "be", "possible", "to", "simply", "have", "a", "description", "defined", "no", "What", "be", "the", "proper", "way", "to", "add", "in", "the", "description", "in", "the", "route", "tag", "Based", "on", "the", "conversation", "above", "I", "add", "in", "the", "description", "tag", "in", "the", "response", "code", "Responses", "NUMBER", "profileResponse", "NUMBER", "Unauthorized", "NUMBER", "InternalServiceError", "NUMBER", "description", "Not", "Found", "And", "the", "swagger", "output", "for", "the", "above", "block", "be", "responses", "NUMBER", "ref", "responses", "profileResponse", "NUMBER", "ref", "responses", "Unauthorized", "NUMBER", "ref", "responses", "NUMBER", "ref", "responses", "InternalServiceError", "Is", "the", "description", "not", "get", "parsed", "properly", "I", "be", "use", "the", "latest", "release", "NUMBER", "which", "should", "have", "the", "feature", "support", "Problem", "statement", "I", "m", "trying", "to", "generate", "client", "code", "from", "yaml", "spec", "NUMBER", "There", "be", "a", "complex", "type", "JWK", "which", "be", "returned", "by", "API", "and", "already", "modeled", "within", "app", "with", "exist", "type", "github", "NUMBER", "com", "mendsley", "gojwk", "NUMBER", "This", "type", "be", "able", "to", "unmarshal", "itself", "from", "json", "besides", "it", "do", "some", "computations", "to", "decode", "keys", "after", "that", "because", "of", "that", "I", "cannot", "replace", "it", "with", "generate", "one", "NUMBER", "Currently", "I", "describe", "field", "of", "JWK", "in", "the", "yaml", "spec", "and", "go", "swagger", "generates", "me", "a", "parallel", "type", "which", "I", "have", "to", "convert", "to", "desired", "type", "copying", "all", "field", "one", "by", "one", "NUMBER", "I", "wonder", "if", "some", "more", "convenient", "option", "exists", "for", "that", "May", "be", "I", "can", "provide", "desired", "type", "name", "in", "yaml", "spec", "somehow", "so", "that", "go", "swagger", "would", "use", "it", "instead", "of", "generating", "a", "new", "one", "Swagger", "specification", "swagger", "NUMBER", "yaml", "casualjim", "Well", "I", "tried", "to", "sort", "it", "out", "myself", "but", "have", "a", "couple", "of", "question", "and", "a", "sense", "that", "may", "be", "I", "be", "heading", "in", "a", "wrong", "direction", "NUMBER", "Could", "you", "please", "take", "a", "look", "at", "the", "gist", "LINK", "turpitko", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "bcf", "NUMBER", "fefccc", "NUMBER", "What", "I", "want", "to", "achieve", "NUMBER", "I", "have", "this", "definitions", "in", "the", "swagger", "yaml", "spec", "LINK", "turpitko", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "bcf", "NUMBER", "fefccc", "NUMBER", "file", "spec", "yaml", "L", "NUMBER", "an", "array", "of", "JWKs", "and", "I", "want", "JWK", "be", "modeled", "with", "this", "exist", "go", "class", "LINK", "which", "come", "from", "the", "lib", "NUMBER", "I", "wrapped", "lib", "s", "class", "with", "my", "own", "one", "LINK", "turpitko", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "bcf", "NUMBER", "fefccc", "NUMBER", "file", "jwk", "go", "to", "add", "a", "stub", "Validate", "method", "so", "that", "generate", "code", "be", "able", "to", "compile", "NUMBER", "Now", "I", "want", "from", "the", "go", "swagger", "that", "it", "generate", "me", "a", "go", "code", "with", "an", "array", "of", "my", "custom", "jwk", "elements", "NUMBER", "What", "I", "tried", "so", "far", "NUMBER", "Not", "sure", "whether", "it", "be", "a", "misuse", "for", "x", "go", "name", "and", "x", "go", "package", "tags", "but", "I", "like", "names", "and", "decided", "to", "use", "them", "I", "add", "these", "tags", "to", "the", "JsonWebKey", "type", "definition", "in", "the", "spec", "LINK", "turpitko", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "bcf", "NUMBER", "fefccc", "NUMBER", "file", "spec", "yaml", "L", "NUMBER", "NUMBER", "Next", "I", "hacked", "go", "swagger", "s", "generator", "model", "NUMBER", "go", "to", "skip", "the", "definition", "with", "x", "go", "package", "tag", "NUMBER", "And", "hacked", "typeResolver", "to", "return", "jwk", "NUMBER", "Key", "as", "go", "type", "for", "it", "name", "constructed", "as", "base", "name", "of", "the", "package", "from", "the", "x", "go", "package", "plus", "name", "from", "the", "x", "go", "name", "NUMBER", "I", "created", "a", "patch", "LINK", "turpitko", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "bcf", "NUMBER", "fefccc", "NUMBER", "file", "patch", "to", "illustrate", "change", "it", "s", "not", "a", "PR", "just", "for", "the", "sake", "of", "the", "question", "NUMBER", "OK", "with", "these", "change", "it", "kinda", "did", "what", "I", "wanted", "LINK", "turpitko", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "bcf", "NUMBER", "fefccc", "NUMBER", "file", "json_web_key_set", "go", "NUMBER", "This", "code", "compiled", "and", "go", "test", "in", "go", "swagger", "genearator", "pass", "have", "not", "tried", "all", "other", "test", "yet", "though", "NUMBER", "It", "s", "almost", "OK", "but", "I", "cannot", "figure", "out", "where", "the", "import", "string", "came", "from", "NUMBER", "It", "magically", "appeared", "and", "happened", "to", "be", "correct", "NUMBER", "But", "if", "I", "change", "package", "name", "to", "for", "example", "gojwk", "it", "finds", "and", "imports", "the", "package", "with", "the", "same", "name", "from", "the", "lib", "not", "the", "package", "from", "my", "project", "NUMBER", "I", "want", "to", "put", "my", "full", "package", "name", "from", "the", "x", "go", "package", "somewhere", "so", "that", "it", "always", "be", "use", "NUMBER", "And", "overall", "this", "hack", "feels", "a", "bit", "clumsy", "I", "d", "anticipate", "to", "fix", "the", "method", "t", "NUMBER", "goTypeName", "instead", "so", "that", "approach", "would", "work", "not", "only", "in", "resolveSchemaRef", "but", "whenever", "t", "NUMBER", "goTypeName", "invoked", "NUMBER", "But", "if", "I", "try", "to", "move", "fix", "there", "some", "exist", "go", "test", "fail", "NUMBER", "Also", "some", "hack", "already", "existed", "for", "x", "go", "name", "exactly", "at", "the", "same", "spots", "NUMBER", "casualjim", "Ivan", "I", "like", "idea", "with", "additional", "extensions", "NUMBER", "But", "should", "it", "be", "two", "separate", "extensions", "or", "just", "one", "Like", "x", "go", "type", "name", "Key", "package", "github", "NUMBER", "com", "user", "package", "alias", "jwk", "NUMBER", "Right", "now", "I", "can", "t", "come", "up", "with", "example", "of", "separate", "usage", "of", "x", "go", "type", "and", "x", "go", "import", "NUMBER", "Or", "something", "like", "this", "yaml", "x", "go", "import", "package", "path", "github", "NUMBER", "com", "user", "package", "alias", "jwk", "type", "Key", "Problem", "statement", "I", "m", "trying", "to", "debug", "an", "issue", "with", "a", "bad", "POST", "handler", "NUMBER", "The", "problem", "seems", "to", "stem", "from", "BindValidRequest", "in", "operations", "NUMBER", "post_foo", "NUMBER", "go", "during", "the", "o", "NUMBER", "context", "NUMBER", "Respond", "call", "NUMBER", "I", "d", "like", "to", "find", "the", "offending", "portion", "of", "the", "input", "data", "NUMBER", "Or", "some", "details", "on", "where", "the", "input", "parameter", "unmarsaling", "occur", "I", "looked", "at", "LINK", "swagger", "go", "swagger", "blob", "master", "design", "NUMBER", "md", "do", "no", "avail", "Looking", "at", "the", "stack", "trace", "leads", "me", "to", "go", "openapi", "middleware", "context", "NUMBER", "go", "but", "no", "particulars", "what", "might", "be", "going", "on", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "http", "panic", "serving", "NUMBER", "NUMBER", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "goroutine", "NUMBER", "run", "net", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "panic", "NUMBER", "x", "NUMBER", "c", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "usr", "local", "go", "src", "runtime", "panic", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "NUMBER", "Context", "NUMBER", "Respond", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "ca", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "home", "sandy", "go", "src", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "server", "restapi", "operations", "NUMBER", "PostMosaicExperimentalMosaics", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "home", "sandy", "go", "src", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "server", "restapi", "operations", "post_mosaic_experimental_mosaics", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "NUMBER", "NewOperationExecutor", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "home", "sandy", "go", "src", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "operation", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "NUMBER", "NewRouter", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "home", "sandy", "go", "src", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "router", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "NUMBER", "Redoc", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "home", "sandy", "go", "src", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "redoc", "NUMBER", "go", "NUMBER", "NUMBER", "xac", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "NUMBER", "Spec", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "home", "sandy", "go", "src", "code", "NUMBER", "foo", "NUMBER", "com", "MyCo", "mosaics", "api", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "spec", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "net", "http", "NUMBER", "serverHandler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "ffa", "NUMBER", "NUMBER", "xc", "NUMBER", "de", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "f", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "net", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "created", "by", "net", "http", "NUMBER", "Server", "NUMBER", "Serve", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "The", "code", "in", "context", "NUMBER", "go", "NUMBER", "if", "err", "ok", "data", "NUMBER", "error", "ok", "NUMBER", "if", "format", "NUMBER", "rw", "NUMBER", "Header", "NUMBER", "Set", "runtime", "NUMBER", "HeaderContentType", "runtime", "NUMBER", "JSONMime", "NUMBER", "NUMBER", "if", "route", "nil", "route", "NUMBER", "Operation", "nil", "NUMBER", "c", "NUMBER", "api", "NUMBER", "ServeErrorFor", "rw", "r", "err", "NUMBER", "return", "NUMBER", "NUMBER", "c", "NUMBER", "api", "NUMBER", "ServeErrorFor", "route", "NUMBER", "Operation", "NUMBER", "ID", "rw", "r", "err", "NUMBER", "return", "NUMBER", "NUMBER", "which", "kinda", "leaves", "me", "at", "a", "dead", "end", "NUMBER", "Slightly", "different", "LINK", "curl", "i", "H", "Accept", "application", "json", "X", "POST", "d", "id", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "NUMBER", "d", "NUMBER", "a", "NUMBER", "NUMBER", "renditions", "bbox", "coordinate_system", "coordinates", "first_acquired", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "last_acquired", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "product_type", "basemap", "name", "My", "mosaic", "LINK", "I", "was", "hesitant", "to", "post", "the", "whole", "thing", "since", "it", "doesn", "t", "help", "me", "learn", "the", "flow", "of", "data", "through", "the", "system", "give", "a", "man", "a", "fish", "etc", "NUMBER", "Was", "really", "looking", "for", "tips", "that", "you", "use", "for", "debugging", "these", "sorts", "of", "problem", "NUMBER", "But", "I", "do", "appreciate", "you", "looking", "into", "it", "NUMBER", "The", "error", "from", "ServeErrorFor", "seems", "to", "be", "validation", "failure", "list", "unsupported", "media", "type", "application", "x", "www", "form", "urlencoded", "only", "application", "json", "be", "allow", "I", "suspect", "curl", "be", "altering", "my", "format", "NUMBER", "Checking", "NUMBER", "Thanks", "NUMBER", "was", "very", "close", "to", "that", "myself", "almost", "caught", "a", "fish", "It", "would", "be", "nice", "to", "get", "some", "debug", "level", "logging", "around", "that", "ServeErrorFor", "line", "or", "BindValidRequest", "NUMBER", "For", "example", "now", "I", "m", "get", "parsing", "body", "body", "from", "fail", "because", "json", "cannot", "unmarshal", "object", "into", "Go", "value", "of", "type", "string", "when", "I", "issue", "curl", "i", "H", "Accept", "application", "json", "H", "Content", "type", "application", "json", "X", "POST", "d", "id", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "NUMBER", "d", "NUMBER", "a", "NUMBER", "NUMBER", "renditions", "bbox", "coordinate_system", "coordinates", "first_acquired", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "last_acquired", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "product_type", "basemap", "name", "My", "mosaic", "LINK", "Note", "I", "m", "just", "going", "to", "keep", "update", "this", "comment", "with", "note", "as", "I", "make", "progress", "NUMBER", "I", "ve", "traced", "this", "through", "BindValidRequest", "in", "xxx_parameters", "NUMBER", "go", "and", "it", "s", "led", "me", "into", "route", "NUMBER", "Consumer", "NUMBER", "Consume", "NUMBER", "could", "be", "something", "relate", "to", "the", "comment", "about", "it", "assumes", "that", "complex", "things", "implement", "a", "Validatable", "strfmt", "NUMBER", "Registry", "error", "interface", "for", "simple", "values", "it", "will", "use", "straight", "method", "calls", "Found", "it", "bbox", "NUMBER", "not", "bbox", "NUMBER", "trial", "and", "error", "Ensure", "that", "parameters", "scanner", "maintains", "the", "sequence", "of", "the", "parameters", "as", "it", "be", "in", "the", "code", "NUMBER", "close", "NUMBER", "Problem", "statement", "Define", "a", "model", "like", "this", "request", "content", "type", "be", "application", "json", "yaml", "user", "type", "object", "properties", "role", "type", "integer", "enum", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "it", "s", "use", "for", "a", "POST", "method", "for", "update", "something", "and", "the", "role", "be", "not", "required", "and", "NUMBER", "be", "valid", "value", "NUMBER", "But", "if", "the", "role", "be", "not", "set", "the", "value", "be", "NUMBER", "either", "NUMBER", "How", "can", "I", "separate", "the", "two", "scenario", "NUMBER", "value", "and", "empty", "Test", "Code", "like", "this", "go", "var", "body", "models", "NUMBER", "User", "b", "byte", "json", "NUMBER", "Unmarshal", "b", "body", "t", "NUMBER", "Logf", "v", "v", "body", "swag", "NUMBER", "IsZero", "body", "NUMBER", "Status", "__print", "Role", "NUMBER", "true__", "So", "how", "about", "use", "int", "instead", "of", "int", "just", "my", "advise", "Swagger", "specification", "swagger", "version", "dev", "Problem", "statement", "The", "model", "property", "s", "default", "values", "defined", "in", "the", "spec", "be", "not", "effective", "on", "server", "side", "handle", "of", "Rest", "call", "if", "the", "Rest", "request", "be", "not", "setting", "with", "the", "default", "defined", "properties", "or", "setting", "with", "empty", "null", "values", "NUMBER", "Swagger", "specification", "definitions", "IdentifierType", "type", "string", "format", "identifier", "pattern", "A", "Za", "z", "A", "Za", "z", "NUMBER", "NUMBER", "_", "item", "type", "object", "default", "id", "NUMBER", "description", "abcde", "completed", "true", "properties", "id", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "description", "ref", "definitions", "IdentifierType", "type", "string", "format", "identifier", "pattern", "A", "Za", "z", "A", "Za", "z", "NUMBER", "NUMBER", "_", "minLength", "NUMBER", "completed", "type", "boolean", "Steps", "to", "reproduce", "NUMBER", "Server", "logging", "code", "just", "prints", "out", "the", "params", "body", "in", "order", "to", "see", "whether", "the", "default", "values", "be", "effective", "or", "not", "NUMBER", "Start", "api", "NUMBER", "TodosAddOneHandler", "todos", "NUMBER", "AddOneHandlerFunc", "func", "params", "todos", "NUMBER", "AddOneParams", "middleware", "NUMBER", "Responder", "log", "NUMBER", "Println", "Add", "one", "item", "body", "params", "NUMBER", "Body", "return", "middleware", "NUMBER", "NotImplemented", "operation", "todos", "NUMBER", "AddOne", "has", "not", "yet", "be", "implement", "NUMBER", "Rest", "call", "NUMBER", "bash", "NUMBER", "curl", "i", "localhost", "NUMBER", "d", "description", "H", "Content", "Type", "application", "io", "NUMBER", "goswagger", "NUMBER", "examples", "NUMBER", "todo", "list", "NUMBER", "v", "NUMBER", "json", "HTTP", "NUMBER", "NUMBER", "Not", "Implemented", "Content", "Type", "application", "io", "NUMBER", "goswagger", "NUMBER", "examples", "NUMBER", "todo", "list", "NUMBER", "v", "NUMBER", "json", "Date", "Thu", "NUMBER", "Dec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Content", "Length", "NUMBER", "operation", "todos", "NUMBER", "AddOne", "has", "not", "yet", "be", "implement", "NUMBER", "Server", "output", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Add", "one", "item", "body", "false", "NUMBER", "TAG", "_swagger", "new", "Lazy", "TAG", "IHttpRoute", "defaultRoute", "new", "HttpRoute", "GlobalConfiguration", "NUMBER", "Configuration", "NUMBER", "Routes", "NUMBER", "TryGetValue", "DefaultApi", "out", "defaultRoute", "var", "settings", "new", "WebApiToSwaggerGeneratorSettings", "DefaultUrlTemplate", "defaultRoute", "null", "DefaultApi", "defaultRoute", "NUMBER", "RouteTemplate", "IsAspNetCore", "false", "Title", "VBPISAPI", "Description", "Business", "level", "API", "from", "APIS", "Version", "Assembly", "NUMBER", "GetExecutingAssembly", "NUMBER", "GetName", "NUMBER", "Version", "NUMBER", "ToString", "var", "generator", "new", "WebApiToSwaggerGenerator", "settings", "List", "TAG", "derivedTypes", "VType", "NUMBER", "GetDerivedTypes", "typeof", "ApiController", "Assembly", "NUMBER", "GetExecutingAssembly", "return", "generator", "NUMBER", "GenerateForControllers", "derivedTypes", "public", "static", "void", "GenerateSwaggerFile", "string", "strJson", "JsonConvert", "NUMBER", "SerializeObject", "_swagger", "NUMBER", "Value", "Formatting", "NUMBER", "Indented", "File", "NUMBER", "WriteAllText", "AppDomain", "NUMBER", "CurrentDomain", "NUMBER", "BaseDirectory", "vbpisapi", "swagger", "NUMBER", "json", "strJson", "The", "file", "gets", "generate", "and", "somewhere", "in", "the", "definitions", "I", "find", "this", "definitions", "AssessmentStatus", "type", "integer", "x", "typeName", "AssessmentStatus", "x", "enumNames", "HIT", "NO_HIT", "ERROR", "enum", "NUMBER", "NUMBER", "NUMBER", "description", "NUMBER", "more", "definitions", "in", "between", "NUMBER", "ref_", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ef_", "NUMBER", "b", "NUMBER", "_", "NUMBER", "_be", "NUMBER", "_d", "NUMBER", "c", "NUMBER", "type", "string", "x", "typeName", "AssessmentStatus", "x", "enumNames", "HIT", "NO_HIT", "ERROR", "enum", "HIT", "NO_HIT", "ERROR", "description", "Where", "did", "this", "ref_", "came", "from", "Problem", "statement", "A", "list", "of", "int", "NUMBER", "s", "be", "represented", "in", "go", "as", "type", "int", "NUMBER", "not", "int", "NUMBER", "but", "validation", "code", "for", "minimum", "maximum", "try", "to", "get", "them", "as", "float", "NUMBER", "m", "NUMBER", "TheArray", "i", "NUMBER", "This", "leads", "to", "a", "compiler", "error", "NUMBER", "Swagger", "specification", "yaml", "swagger", "NUMBER", "info", "title", "Test", "description", "Test", "Service", "version", "NUMBER", "host", "localhost", "basePath", "produces", "application", "json", "schemes", "http", "paths", "myMethod", "get", "operationId", "get_test", "summary", "Get", "a", "list", "of", "int", "NUMBER", "s", "NUMBER", "responses", "NUMBER", "schema", "ref", "definitions", "test_list", "definitions", "test_list", "type", "object", "properties", "the_array", "type", "array", "items", "minimum", "NUMBER", "maximum", "NUMBER", "type", "number", "format", "int", "NUMBER", "Steps", "to", "reproduce", "shellsession", "swagger", "generate", "server", "f", "TAG", "go", "build", "models", "test_list", "NUMBER", "go", "models", "test_list", "NUMBER", "go", "NUMBER", "invalid", "indirect", "of", "m", "NUMBER", "TheArray", "i", "type", "int", "NUMBER", "models", "test_list", "NUMBER", "go", "NUMBER", "invalid", "indirect", "of", "m", "NUMBER", "TheArray", "i", "type", "int", "NUMBER", "Problem", "statement", "I", "be", "trying", "to", "integrate", "a", "package", "into", "a", "go", "swagger", "generate", "API", "that", "be", "use", "the", "github", "NUMBER", "com", "golang", "glog", "logger", "NUMBER", "When", "I", "initialize", "the", "glog", "logger", "it", "appears", "to", "shield", "the", "flags", "defined", "in", "the", "go", "swagger", "runtime", "NUMBER", "C", "Program", "Files", "x", "NUMBER", "JetBrains", "IntelliJ", "IDEA", "NUMBER", "bin", "runnerw", "NUMBER", "exe", "C", "Users", "Theodore", "AppData", "Local", "Temp", "Build", "main", "NUMBER", "go", "and", "rungo", "tls", "certificate", "NUMBER", "security", "mp", "NUMBER", "crt", "tls", "key", "NUMBER", "security", "mp", "NUMBER", "key", "host", "NUMBER", "tls", "port", "NUMBER", "GOROOT", "C", "Go", "GOPATH", "C", "Users", "Theodore", "dev", "Golang", "C", "Program", "Files", "x", "NUMBER", "JetBrains", "IntelliJ", "IDEA", "NUMBER", "bin", "runnerw", "NUMBER", "exe", "C", "Go", "bin", "go", "NUMBER", "exe", "build", "o", "C", "Users", "Theodore", "AppData", "Local", "Temp", "Build", "main", "NUMBER", "go", "and", "rungo", "C", "Users", "Theodore", "dev", "Golang", "src", "github", "NUMBER", "com", "medicarepathfinder", "scoring_engine_mvp", "api", "cmd", "mp", "scoring", "server", "main", "NUMBER", "go", "flag", "provide", "but", "not", "defined", "tls", "certificate", "Usage", "of", "C", "Users", "Theodore", "AppData", "Local", "Temp", "Build", "main", "NUMBER", "go", "and", "rungo", "alsologtostderr", "log", "to", "standard", "error", "as", "well", "as", "file", "log_backtrace_at", "value", "when", "logging", "hits", "line", "file", "N", "emit", "a", "stack", "trace", "log_dir", "string", "If", "non", "empty", "write", "log", "file", "in", "this", "directory", "logtostderr", "log", "to", "standard", "error", "instead", "of", "file", "stderrthreshold", "value", "logs", "at", "or", "above", "this", "threshold", "go", "to", "stderr", "v", "value", "log", "level", "for", "V", "logs", "vmodule", "value", "comma", "separated", "list", "of", "pattern", "N", "settings", "for", "file", "filtered", "logging", "Swagger", "specification", "any", "Steps", "to", "reproduce", "add", "a", "package", "with", "this", "code", "package", "engine", "import", "github", "NUMBER", "com", "golang", "glog", "func", "init", "flag", "NUMBER", "Parse", "func", "EngineFunctionPoint", "glog", "NUMBER", "Info", "EngineFunctionPoint", "call", "and", "call", "the", "EngineFunctionPoint", "in", "the", "configureAPI", "function", "of", "the", "API", "NUMBER", "Still", "having", "a", "problem", "with", "how", "and", "where", "to", "initialize", "glog", "so", "that", "both", "sets", "of", "flags", "be", "honored", "the", "runtime", "flags", "such", "as", "tls", "certificate", "and", "the", "glog", "flags", "like", "log_dir", "and", "stderrthreshold", "NUMBER", "If", "I", "initialize", "glog", "in", "the", "config_xxx", "NUMBER", "go", "I", "don", "t", "get", "the", "go", "swagger", "runtime", "flags", "and", "if", "I", "initialize", "glog", "in", "the", "engine", "I", "get", "the", "error", "logging", "before", "flag", "NUMBER", "Parse", "NUMBER", "I", "realize", "that", "this", "question", "be", "not", "so", "much", "about", "logging", "per", "se", "but", "more", "about", "how", "to", "merge", "the", "flag", "sets", "defined", "by", "different", "package", "NUMBER", "I", "be", "having", "the", "same", "problem", "be", "there", "any", "fix", "for", "this", "Problem", "statement", "Very", "weird", "NUMBER", "sorry", "to", "trouble", "you", "again", "NUMBER", "I", "m", "sure", "I", "m", "just", "doing", "something", "stupid", "NUMBER", "Using", "the", "base", "gen", "ed", "server", "code", "no", "change", "to", "the", "configure_xxx", "NUMBER", "go", "file", "when", "I", "attempt", "to", "curl", "the", "endpoint", "I", "get", "curl", "i", "LINK", "HTTP", "NUMBER", "NUMBER", "Method", "Not", "Allowed", "Allow", "PUT", "POST", "Content", "Type", "application", "json", "Date", "Mon", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Content", "Length", "NUMBER", "code", "NUMBER", "message", "method", "GET", "be", "not", "allow", "but", "PUT", "POST", "be", "I", "would", "expect", "to", "get", "the", "NUMBER", "NotImplemented", "error", "NUMBER", "But", "if", "I", "change", "this", "to", "a", "PUT", "or", "a", "POST", "I", "get", "the", "other", "methods", "note", "the", "Allow", "values", "curl", "i", "LINK", "data", "HTTP", "NUMBER", "NUMBER", "Method", "Not", "Allowed", "Allow", "PUT", "GET", "Content", "Type", "application", "json", "Date", "Mon", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Content", "Length", "NUMBER", "code", "NUMBER", "message", "method", "POST", "be", "not", "allow", "but", "PUT", "GET", "be", "or", "curl", "i", "LINK", "XPUT", "HTTP", "NUMBER", "NUMBER", "Method", "Not", "Allowed", "Allow", "GET", "POST", "Content", "Type", "application", "json", "Date", "Mon", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Content", "Length", "NUMBER", "I", "put", "some", "trace", "in", "the", "NotImplemented", "handlers", "and", "that", "code", "isn", "t", "get", "call", "so", "the", "router", "be", "responding", "beforehand", "NUMBER", "Swagger", "specification", "The", "salient", "part", "of", "my", "swagger", "doc", "looks", "like", "this", "NUMBER", "paths", "a", "b", "c", "post", "description", "blah", "responses", "NUMBER", "description", "OK", "schema", "ref", "definitions", "WriteResponse", "NUMBER", "description", "blah", "schema", "ref", "definitions", "APIError", "put", "description", "blah", "responses", "NUMBER", "description", "OK", "schema", "ref", "definitions", "WriteResponse", "NUMBER", "description", "Blah", "schema", "ref", "definitions", "APIError", "get", "description", "blah", "responses", "NUMBER", "description", "blah", "schema", "ref", "definitions", "FooListPage", "NUMBER", "description", "blah", "schema", "ref", "definitions", "APIError", "Sure", "thing", "NUMBER", "thanks", "casualjim", "swagger", "NUMBER", "basePath", "v", "NUMBER", "info", "version", "experimental", "title", "Mosaics", "API", "description", "An", "API", "to", "interact", "with", "Mosaics", "NUMBER", "consumes", "application", "json", "produces", "application", "json", "schemes", "https", "definitions", "MosaicSeriesFilter", "descriminator", "type", "properties", "filterType", "type", "string", "filterable", "type", "string", "enum", "mosaic_name", "default", "mosaic_name", "value", "type", "string", "required", "filterType", "filterable", "MosaicNameFilter", "allOf", "ref", "definitions", "MosaicSeriesFilter", "properties", "value", "type", "string", "required", "value", "Error", "properties", "message", "description", "A", "descriptive", "error", "message", "NUMBER", "type", "string", "type", "object", "Errors", "description", "A", "list", "of", "Errors", "type", "array", "items", "ref", "definitions", "Error", "APIError", "description", "An", "APIError", "properties", "field", "additionalProperties", "ref", "definitions", "Errors", "type", "object", "general", "ref", "definitions", "Errors", "required", "general", "field", "type", "object", "WriteResponse", "type", "object", "required", "ok", "description", "Response", "of", "request", "to", "create", "a", "mosaic", "properties", "ok", "description", "If", "it", "was", "successfully", "created", "NUMBER", "type", "boolean", "error", "description", "A", "list", "of", "validation", "error", "which", "prevented", "the", "request", "from", "succeeding", "items", "ref", "definitions", "APIError", "type", "array", "id", "description", "The", "id", "of", "the", "newly", "created", "mosaic", "type", "string", "Mosaic", "description", "A", "Mosaic", "be", "NUMBER", "properties", "_links", "ref", "definitions", "MosaicLinks", "id", "description", "A", "UUID", "to", "uniquely", "identify", "this", "Mosaic", "NUMBER", "format", "uuid", "type", "string", "renditions", "description", "A", "list", "of", "renditions", "to", "consume", "the", "Mosaic", "data", "NUMBER", "items", "ref", "definitions", "MosaicRendition", "type", "array", "bbox", "description", "The", "bounding", "box", "representing", "the", "extent", "of", "the", "mosaic", "NUMBER", "format", "geojson", "type", "string", "coordinate_system", "description", "The", "coordinate", "system", "of", "this", "mosaic", "type", "string", "first_acquired", "description", "The", "acquisition", "date", "of", "the", "oldest", "scene", "that", "contributed", "to", "this", "mosaic", "NUMBER", "type", "string", "format", "date", "time", "last_acquired", "description", "The", "acquisition", "date", "of", "the", "newest", "scene", "that", "contributed", "to", "this", "mosaic", "NUMBER", "type", "string", "format", "date", "time", "interval", "description", "The", "interval", "of", "the", "mosaic", "type", "string", "product_type", "description", "The", "product", "type", "of", "this", "mosaics", "currently", "support", "be", "timelapse", "basemap", "type", "string", "name", "description", "A", "name", "for", "this", "mosaic", "NUMBER", "This", "do", "not", "need", "to", "be", "unique", "NUMBER", "type", "string", "type", "object", "required", "id", "renditions", "bbox", "coordinate_system", "first_acquired", "last_acquired", "product_type", "name", "MosaicSeries", "description", "A", "Mosaic", "Series", "be", "a", "NUMBER", "properties", "_links", "ref", "definitions", "MosaicSeriesLinks", "id", "description", "A", "UUID", "to", "uniquely", "identify", "this", "Mosaic", "Series", "NUMBER", "format", "uuid", "type", "string", "name", "description", "A", "human", "readable", "name", "for", "this", "series", "type", "string", "interval", "description", "The", "interval", "for", "the", "mosaics", "in", "the", "series", "NUMBER", "type", "string", "product_type", "description", "The", "type", "of", "product", "this", "mosaic", "be", "enum", "basemap", "timelapse", "l", "NUMBER", "m", "type", "string", "selection_filters", "type", "array", "description", "An", "array", "of", "MosaicSeriesFilters", "to", "filter", "mosaics", "items", "ref", "definitions", "MosaicSeriesFilter", "required", "id", "_links", "mosaic_count", "product_type", "name", "type", "object", "MosaicRendition", "properties", "name", "description", "The", "name", "of", "this", "rendition", "e", "NUMBER", "g", "NUMBER", "RGB", "type", "string", "type", "description", "The", "type", "of", "this", "rendition", "type", "string", "location", "description", "A", "URL", "possibly", "a", "template", "point", "to", "a", "resource", "that", "provides", "access", "to", "the", "rendition", "NUMBER", "type", "string", "type", "object", "MosaicListLinks", "properties", "_self", "description", "The", "link", "back", "to", "this", "list", "page", "type", "string", "type", "object", "MosaicSeriesListLinks", "properties", "_self", "description", "The", "link", "to", "this", "listing", "page", "type", "string", "type", "object", "MosaicLinks", "properties", "_self", "description", "The", "canonical", "link", "to", "this", "specific", "Mosaic", "type", "string", "type", "object", "MosaicSeriesLinks", "properties", "_self", "description", "The", "canonincal", "link", "to", "this", "specific", "Mosaic", "Series", "type", "string", "mosaics", "description", "The", "canonincal", "link", "to", "the", "mosaics", "inside", "this", "Mosaic", "Series", "type", "string", "type", "object", "MosaicSeriesMosaicsLinks", "properties", "_self", "description", "The", "canonical", "link", "back", "to", "this", "list", "type", "string", "type", "object", "MosaicListPage", "properties", "_links", "ref", "definitions", "MosaicListLinks", "mosaics", "items", "ref", "definitions", "Mosaic", "type", "array", "type", "object", "MosaicSeriesListPage", "properties", "_links", "ref", "definitions", "MosaicSeriesListLinks", "series", "items", "ref", "definitions", "MosaicSeries", "type", "array", "type", "object", "MosaicSeriesMosaicsListPage", "properties", "_links", "ref", "definitions", "MosaicSeriesMosaicsLinks", "mosaics", "items", "ref", "definitions", "Mosaic", "type", "array", "type", "object", "parameters", "pSeriesId", "description", "The", "Mosaic", "Series", "ID", "in", "path", "name", "SeriesId", "format", "uuid", "required", "true", "type", "string", "paths", "mosaic", "experimental", "mosaics", "post", "description", "Creates", "a", "new", "mosaic", "responses", "NUMBER", "description", "Mosaic", "was", "successfully", "created", "schema", "ref", "definitions", "WriteResponse", "NUMBER", "description", "There", "was", "a", "validation", "error", "schema", "ref", "definitions", "APIError", "put", "description", "update", "a", "mosaic", "responses", "NUMBER", "description", "Mosaic", "was", "successfully", "update", "schema", "ref", "definitions", "WriteResponse", "NUMBER", "description", "There", "was", "a", "validation", "error", "schema", "ref", "definitions", "APIError", "get", "description", "Returns", "all", "accessible", "mosaics", "NUMBER", "For", "non", "authenticated", "users", "this", "returns", "public", "mosaics", "NUMBER", "responses", "NUMBER", "description", "A", "list", "of", "mosaics", "NUMBER", "schema", "ref", "definitions", "MosaicListPage", "NUMBER", "description", "There", "was", "an", "error", "with", "the", "request", "NUMBER", "schema", "ref", "definitions", "APIError", "mosaic", "experimental", "series", "post", "description", "Creates", "a", "Series", "responses", "NUMBER", "description", "The", "series", "was", "created", "NUMBER", "schema", "ref", "definitions", "WriteResponse", "NUMBER", "description", "There", "was", "an", "error", "with", "the", "request", "schema", "ref", "definitions", "APIError", "get", "description", "Returns", "a", "list", "of", "accessible", "mosaic", "series", "responses", "NUMBER", "description", "A", "list", "of", "Mosaic", "Series", "schema", "ref", "definitions", "MosaicSeriesListPage", "NUMBER", "description", "There", "was", "an", "error", "with", "the", "request", "NUMBER", "schema", "ref", "definitions", "APIError", "mosaic", "experimental", "series", "SeriesId", "get", "description", "Returns", "back", "a", "single", "Mosaic", "Series", "Record", "parameters", "ref", "parameters", "pSeriesId", "responses", "NUMBER", "description", "Gets", "a", "single", "Mosaic", "Series", "record", "NUMBER", "schema", "ref", "definitions", "MosaicSeries", "NUMBER", "description", "There", "was", "an", "error", "with", "the", "request", "NUMBER", "schema", "ref", "definitions", "APIError", "mosaic", "experimental", "series", "SeriesId", "mosaics", "get", "description", "Returns", "the", "list", "of", "mosaics", "in", "this", "series", "NUMBER", "parameters", "ref", "parameters", "pSeriesId", "responses", "NUMBER", "description", "Returns", "the", "list", "of", "mosaics", "in", "this", "series", "NUMBER", "schema", "ref", "definitions", "MosaicSeriesMosaicsListPage", "NUMBER", "description", "There", "was", "an", "error", "with", "the", "request", "NUMBER", "schema", "ref", "definitions", "APIError", "I", "tried", "a", "few", "little", "change", "like", "mosaic", "experimental", "mosaics", "aaa", "bbb", "ccc", "and", "info", "version", "experimental", "to", "info", "version", "NUMBER", "no", "difference", "NUMBER", "But", "I", "notice", "the", "naming", "in", "configure", "looks", "a", "little", "wonky", "api", "NUMBER", "GetAaaBbbCccHandler", "operations", "NUMBER", "GetAaaBbbCccHandlerFunc", "func", "params", "operations", "NUMBER", "GetAaaBbbCccParams", "middleware", "NUMBER", "Responder", "return", "middleware", "NUMBER", "NotImplemented", "operation", "NUMBER", "GetAaaBbbCcc", "has", "not", "yet", "be", "implement", "The", "NUMBER", "GetAaaBbbCcc", "note", "the", "period", "might", "be", "a", "clue", "NUMBER", "I", "m", "digging", "into", "the", "router", "setup", "code", "now", "NUMBER", "Ah", "whoopsy", "Thanks", "Lots", "of", "moving", "parts", "at", "play", "here", "NUMBER", "That", "said", "NUMBER", "shouldn", "t", "the", "framework", "return", "a", "NUMBER", "for", "those", "request", "Problem", "statement", "I", "have", "all", "the", "go", "swagger", "stuff", "vendor", "ed", "in", "my", "project", "NUMBER", "swagger", "generate", "server", "suggested", "the", "following", "external", "package", "needed", "to", "be", "include", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "github", "NUMBER", "com", "go", "openapi", "runtime", "github", "NUMBER", "com", "tylerb", "graceful", "github", "NUMBER", "com", "jessevdk", "go", "flags", "golang", "NUMBER", "org", "x", "net", "context", "But", "the", "actual", "list", "turned", "out", "to", "be", "go", "get", "github", "NUMBER", "com", "go", "openapi", "runtime", "go", "get", "github", "NUMBER", "com", "tylerb", "graceful", "go", "get", "github", "NUMBER", "com", "jessevdk", "go", "flags", "go", "get", "golang", "NUMBER", "org", "x", "net", "context", "go", "get", "github", "NUMBER", "com", "go", "openapi", "analysis", "go", "get", "github", "NUMBER", "com", "go", "openapi", "spec", "go", "get", "github", "NUMBER", "com", "gorilla", "context", "go", "get", "github", "NUMBER", "com", "go", "openapi", "loads", "go", "get", "github", "NUMBER", "com", "go", "openapi", "validate", "All", "of", "which", "I", "then", "vendor", "ed", "NUMBER", "So", "attempting", "to", "go", "run", "main", "NUMBER", "go", "I", "get", "my_org", "my_proj", "output", "restapi", "operations", "NUMBER", "NUMBER", "restapi", "operations", "foo_api", "NUMBER", "go", "NUMBER", "cannot", "use", "o", "NUMBER", "spec", "type", "my_org", "my_proj", "vendor", "github", "NUMBER", "com", "go", "openapi", "loads", "NUMBER", "Document", "as", "type", "github", "NUMBER", "com", "go", "openapi", "loads", "NUMBER", "Document", "in", "argument", "to", "middleware", "NUMBER", "NewRoutableContext", "NUMBER", "NUMBER", "restapi", "operations", "foo_api", "NUMBER", "go", "NUMBER", "cannot", "use", "o", "type", "FooAPI", "as", "type", "middleware", "NUMBER", "RoutableAPI", "in", "argument", "to", "middleware", "NUMBER", "NewRoutableContext", "FooAPI", "do", "not", "implement", "middleware", "NUMBER", "RoutableAPI", "wrong", "type", "for", "AuthenticatorsFor", "method", "have", "AuthenticatorsFor", "map", "string", "my_org", "my_proj", "vendor", "github", "NUMBER", "com", "go", "openapi", "spec", "NUMBER", "SecurityScheme", "map", "string", "my_org", "my_proj", "vendor", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "Authenticator", "want", "AuthenticatorsFor", "map", "string", "github", "NUMBER", "com", "go", "openapi", "spec", "NUMBER", "SecurityScheme", "map", "string", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "Authenticator", "It", "looks", "like", "the", "generate", "code", "be", "not", "considering", "it", "could", "be", "vendored", "Sorry", "I", "should", "have", "mention", "NUMBER", "I", "m", "use", "NUMBER", "and", "govendor", "LINK", "Could", "this", "perhaps", "be", "relate", "to", "run", "swagger", "in", "docker", "In", "the", "complaining", "file", "my_org", "my_project", "output", "restapi", "operations", "foo_api", "NUMBER", "go", "import", "fmt", "net", "http", "strings", "loads", "github", "NUMBER", "com", "go", "openapi", "loads", "runtime", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "spec", "github", "NUMBER", "com", "go", "openapi", "spec", "strfmt", "github", "NUMBER", "com", "go", "openapi", "strfmt", "github", "NUMBER", "com", "go", "openapi", "swag", "Can", "confirm", "NUMBER", "Got", "the", "same", "results", "NUMBER", "Thanks", "again", "casualjim", "I", "ll", "see", "where", "gvt", "gets", "me", "NUMBER", "I", "have", "no", "issue", "with", "vendoring", "use", "LINK", "Problem", "statement", "go", "swagger", "complains", "target", "not", "in", "GOPATH", "when", "I", "think", "it", "be", "NUMBER", "echo", "GOPATH", "home", "sandy", "go", "pwd", "home", "sandy", "go", "src", "my_org", "my_project", "alias", "swagger", "docker", "run", "rm", "it", "v", "HOME", "HOME", "w", "pwd", "quay", "NUMBER", "io", "goswagger", "swagger", "alias", "NUMBER", "alias", "swagger", "docker", "run", "rm", "it", "v", "home", "sandy", "home", "sandy", "w", "home", "sandy", "go", "src", "my_org", "my_project", "quay", "NUMBER", "io", "goswagger", "swagger", "ls", "la", "subdir", "spec", "NUMBER", "rw", "rw", "r", "NUMBER", "sandy", "sandy", "NUMBER", "Oct", "NUMBER", "NUMBER", "NUMBER", "project", "NUMBER", "swagger", "NUMBER", "yaml", "swagger", "generate", "server", "f", "subdir", "spec", "mosaic", "NUMBER", "swagger", "NUMBER", "yaml", "t", "output", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "target", "must", "reside", "inside", "a", "location", "in", "the", "GOPATH", "src", "But", "NUMBER", "but", "NUMBER", "it", "be", "Awesome", "NUMBER", "works", "like", "a", "charm", "NUMBER", "Thanks", "casualjim", "Foo", "do", "stuff", "swagger", "response", "Foo", "type", "Foo", "struct", "Bar", "int", "simply", "results", "in", "swagger", "exiting", "with", "unable", "to", "determine", "package", "for", "NUMBER", "api", "NUMBER", "go", "remove", "swagger", "response", "will", "make", "it", "work", "again", "but", "i", "m", "trying", "to", "add", "a", "result", "type", "here", "NUMBER", "or", "actually", "a", "model", "but", "models", "can", "t", "be", "use", "as", "result", "NUMBER", "Generally", "it", "would", "be", "nice", "if", "there", "was", "a", "work", "example", "NUMBER", "The", "docs", "aren", "t", "exactly", "obvious", "NUMBER", "swagger", "had", "error", "message", "rather", "than", "just", "exiting", "NUMBER", "ah", "yes", "it", "could", "be", "me", "not", "understanding", "gopath", "NUMBER", "mkdir", "foo", "cd", "foo", "cat", "main", "NUMBER", "go", "TAG", "err", "Unmarshal", "TAG", "bytes", "NUMBER", "NewBuffer", "TAG", "runtime", "NUMBER", "JSONConsumer", "if", "err", "nil", "return", "err", "After", "go", "TAG", "err", "Unmarshal", "TAG", "bytes", "NUMBER", "NewBuffer", "TAG", "runtime", "NUMBER", "JSONConsumer", "if", "err", "nil", "err", "io", "NUMBER", "EOF", "return", "err", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Use", "v", "NUMBER", "of", "CLI", "NUMBER", "Generate", "client", "from", "exist", "spec", "with", "references", "to", "discriminator", "NUMBER", "Execute", "client", "operation", "that", "returns", "HTTP", "NUMBER", "with", "an", "empty", "response", "in", "the", "discriminator", "field", "Hmm", "good", "point", "NUMBER", "Thanks", "casualjim", "NUMBER", "So", "my", "explanation", "of", "the", "issue", "may", "be", "incorrect", "NUMBER", "I", "m", "use", "the", "Swagger", "spec", "here", "LINK", "Swagger", "ApiName", "Azure", "NUMBER", "Machine", "NUMBER", "Learning", "NUMBER", "NUMBER", "Text", "NUMBER", "Analytics", "More", "specifically", "when", "I", "call", "the", "operations", "operationId", "endpoint", "the", "operationProcessingResult", "property", "of", "the", "OperationResult", "be", "empty", "on", "the", "first", "few", "HTTP", "NUMBER", "responses", "until", "the", "OperationResult", "status", "property", "returns", "Succeeded", "NUMBER", "The", "TAG", "placeholder", "in", "my", "code", "snippet", "be", "actually", "the", "OperationProcessingResult", "type", "NUMBER", "Problem", "statement", "I", "be", "trying", "to", "serve", "a", "go", "swagger", "generate", "API", "from", "a", "container", "and", "get", "an", "ERR_EMPTY_RESPONSE", "NUMBER", "Swagger", "specification", "tutorials", "todo", "list", "server", "complete", "swagger", "NUMBER", "yml", "Steps", "to", "reproduce", "Dockerfile", "I", "have", "copied", "server", "complete", "to", "a", "standalone", "repo", "and", "vendored", "it", "so", "that", "the", "build", "can", "occur", "in", "the", "container", "NUMBER", "Dockerfile", "FROM", "golang", "MAINTAINER", "E", "NUMBER", "Theodore", "L", "NUMBER", "Omtzigt", "ENV", "GOBIN", "GOPATH", "bin", "ADD", "NUMBER", "go", "src", "github", "NUMBER", "com", "Ravenwater", "server", "complete", "RUN", "go", "install", "go", "src", "github", "NUMBER", "com", "Ravenwater", "server", "complete", "cmd", "todo", "list", "server", "main", "NUMBER", "go", "WORKDIR", "go", "src", "github", "NUMBER", "com", "Ravenwater", "server", "complete", "ENTRYPOINT", "go", "bin", "main", "port", "NUMBER", "serving", "HTTP", "of", "NUMBER", "EXPOSE", "NUMBER", "Perfect", "that", "works", "NUMBER", "What", "be", "the", "explanation", "hi", "casualjim", "have", "you", "tried", "something", "similar", "in", "macOS", "I", "m", "get", "the", "below", "issue", "and", "I", "suspect", "your", "workflow", "be", "intended", "for", "Linux", "NUMBER", "Thanks", "usr", "local", "go", "pkg", "tool", "darwin_amd", "NUMBER", "link", "run", "clang", "fail", "exit", "status", "NUMBER", "ld", "library", "not", "find", "for", "lcrt", "NUMBER", "o", "clang", "error", "linker", "command", "fail", "with", "exit", "code", "NUMBER", "use", "v", "to", "see", "invocation", "yeah", "the", "build", "script", "be", "specifically", "for", "build", "against", "a", "musl", "based", "linux", "in", "a", "docker", "container", "For", "anyone", "come", "across", "this", "in", "the", "future", "host", "takes", "a", "string", "so", "use", "host", "NUMBER", "instead", "of", "host", "NUMBER", "NUMBER", "port", "takes", "an", "int", "example", "FROM", "golang", "MAINTAINER", "E", "NUMBER", "Theodore", "L", "NUMBER", "Omtzigt", "ENV", "GOBIN", "GOPATH", "bin", "ADD", "NUMBER", "go", "src", "github", "NUMBER", "com", "Ravenwater", "server", "complete", "RUN", "go", "install", "go", "src", "github", "NUMBER", "com", "Ravenwater", "server", "complete", "cmd", "todo", "list", "server", "WORKDIR", "go", "src", "github", "NUMBER", "com", "Ravenwater", "server", "complete", "ENTRYPOINT", "go", "bin", "todo", "list", "server", "port", "NUMBER", "host", "NUMBER", "serving", "HTTP", "of", "NUMBER", "EXPOSE", "NUMBER", "crezam", "I", "be", "use", "Docker", "for", "mac", "on", "OSX", "Sierra", "NUMBER", "Problem", "statement", "I", "m", "currently", "generating", "a", "client", "from", "a", "spec", "in", "which", "one", "of", "the", "API", "operations", "doesn", "t", "reference", "a", "response", "definition", "NUMBER", "The", "API", "still", "returns", "a", "response", "but", "it", "be", "not", "accessible", "since", "the", "readResponse", "implementation", "simply", "do", "a", "return", "nil", "since", "there", "be", "no", "model", "for", "it", "to", "reference", "NUMBER", "Is", "there", "a", "way", "to", "return", "a", "generic", "response", "in", "this", "case", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "Generate", "client", "from", "exist", "Swagger", "spec", "with", "an", "operation", "whose", "NUMBER", "response", "do", "not", "include", "a", "schema", "property", "Problem", "statement", "I", "saw", "in", "handlerFunc", "which", "will", "return", "middleware", "NUMBER", "Responder", "so", "all", "our", "generate", "response", "function", "be", "extend", "the", "interface", "of", "middleware", "NUMBER", "Responder", "so", "everyone", "will", "generate", "a", "WriteResponse", "function", "NUMBER", "So", "my", "question", "be", "how", "could", "I", "add", "other", "items", "such", "as", "cookies", "before", "I", "WriteResponse", "Should", "I", "write", "something", "like", "go", "middleware", "NUMBER", "ResponderFunc", "myhandler", "Thanks", "Just", "share", "my", "solution", "go", "import", "net", "http", "github", "NUMBER", "com", "go", "openapi", "runtime", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "type", "CustomResponder", "struct", "responder", "middleware", "NUMBER", "Responder", "func", "NewCustomResponder", "responder", "middleware", "NUMBER", "Responder", "CustomResponder", "return", "CustomResponder", "responder", "responder", "func", "this", "CustomResponder", "WriteResponse", "rw", "http", "NUMBER", "ResponseWriter", "p", "runtime", "NUMBER", "Producer", "cookie", "http", "NUMBER", "Cookie", "Name", "robin", "Value", "abcd", "http", "NUMBER", "SetCookie", "rw", "cookie", "this", "NUMBER", "responder", "NUMBER", "WriteResponse", "rw", "p", "Problem", "statement", "I", "have", "a", "simple", "API", "key", "authentication", "function", "that", "checks", "for", "an", "API", "key", "NUMBER", "When", "the", "key", "doesn", "t", "match", "I", "return", "an", "error", "NUMBER", "When", "I", "do", "the", "server", "doesn", "t", "call", "the", "handler", "and", "the", "client", "hangs", "NUMBER", "When", "I", "return", "a", "nil", "for", "the", "error", "the", "server", "progresses", "to", "call", "the", "function", "handler", "NUMBER", "The", "test", "be", "the", "simple", "enumeration", "of", "authentication", "and", "valid", "resource", "state", "a", "valid", "access", "correct", "auth", "token", "and", "a", "valid", "social", "ID", "curl", "s", "H", "Content", "Type", "application", "mp_scoring", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "H", "X", "Token", "abcdefuvwxyz", "LINK", "X", "GET", "d", "ssn", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "access", "correct", "auth", "token", "but", "an", "invalid", "social", "ID", "curl", "s", "H", "Content", "Type", "application", "mp_scoring", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "H", "X", "Token", "abcdefuvwxyz", "LINK", "X", "GET", "d", "ssn", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "access", "an", "incorrect", "auth", "token", "even", "though", "the", "intruders", "guessed", "a", "valid", "social", "ID", "curl", "s", "H", "Content", "Type", "application", "mp_scoring", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "H", "X", "Token", "badauthtoken", "LINK", "X", "GET", "d", "ssn", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "access", "an", "incorrect", "auth", "token", "and", "an", "invalid", "social", "ID", "curl", "s", "H", "Content", "Type", "application", "mp_scoring", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "H", "X", "Token", "badauthtoken", "LINK", "X", "GET", "d", "ssn", "NUMBER", "NUMBER", "NUMBER", "results", "when", "I", "DO", "NOT", "return", "an", "error", "from", "KeyAuth", "sh", "unauth_access", "NUMBER", "sh", "agentId", "NUMBER", "customerId", "NUMBER", "fipsCode", "GA", "NUMBER", "NUMBER", "name", "John", "ssn", "NUMBER", "NUMBER", "NUMBER", "surname", "Lee", "code", "NUMBER", "message", "Resource", "not", "find", "code", "NUMBER", "message", "unauthenticated", "for", "invalid", "credentials", "code", "NUMBER", "message", "unauthenticated", "for", "invalid", "credentials", "results", "when", "I", "DO", "return", "an", "error", "from", "KeyAuth", "sh", "unauth_access", "NUMBER", "sh", "agentId", "NUMBER", "customerId", "NUMBER", "fipsCode", "GA", "NUMBER", "NUMBER", "name", "John", "ssn", "NUMBER", "NUMBER", "NUMBER", "surname", "Lee", "code", "NUMBER", "message", "Resource", "not", "find", "NUMBER", "server", "do", "not", "respond", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "KeyAuth", "function", "that", "causes", "the", "server", "not", "to", "call", "handler", "Applies", "when", "the", "x", "token", "header", "be", "set", "api", "NUMBER", "KeyAuth", "func", "token", "string", "interface", "error", "if", "token", "abcdefuvwxyz", "appauth", "new", "app", "NUMBER", "ApplicationAuth", "appauth", "NUMBER", "Token", "token", "bAuthenticated", "true", "return", "appauth", "nil", "api", "NUMBER", "Logger", "Access", "attempt", "with", "incorrect", "api", "key", "auth", "s", "token", "bAuthenticated", "false", "return", "nil", "error", "NUMBER", "New", "NUMBER", "incorrect", "api", "key", "auth", "KeyAuth", "function", "that", "do", "call", "the", "handler", "Applies", "when", "the", "x", "token", "header", "be", "set", "api", "NUMBER", "KeyAuth", "func", "token", "string", "interface", "error", "if", "token", "abcdefuvwxyz", "appauth", "new", "app", "NUMBER", "ApplicationAuth", "appauth", "NUMBER", "Token", "token", "bAuthenticated", "true", "return", "appauth", "nil", "api", "NUMBER", "Logger", "Access", "attempt", "with", "incorrect", "api", "key", "auth", "s", "token", "bAuthenticated", "false", "return", "nil", "nil", "And", "here", "be", "the", "function", "handler", "for", "this", "API", "url", "GET", "api", "customers", "message", "body", "contains", "SSN", "social", "identifier", "api", "NUMBER", "CustomersGetIDHandler", "customers", "NUMBER", "GetIDHandlerFunc", "func", "params", "customers", "NUMBER", "GetIDParams", "principal", "interface", "middleware", "NUMBER", "Responder", "api", "NUMBER", "Logger", "Lookup", "customer", "customer", "err", "getCustomer", "api", "params", "NUMBER", "Info", "NUMBER", "Ssn", "if", "err", "nil", "if", "bAuthenticated", "return", "customers", "NUMBER", "NewGetCustomersNotFound", "NUMBER", "WithPayload", "models", "NUMBER", "Error", "Code", "NUMBER", "Message", "swag", "NUMBER", "String", "err", "NUMBER", "Error", "return", "customers", "NUMBER", "NewGetCustomersUnauthorized", "NUMBER", "WithPayload", "models", "NUMBER", "Error", "Code", "NUMBER", "Message", "swag", "NUMBER", "String", "err", "NUMBER", "Error", "return", "customers", "NUMBER", "NewGetCustomersOK", "NUMBER", "WithPayload", "customer", "yaml", "swagger", "NUMBER", "info", "title", "keyauth", "debug", "version", "NUMBER", "schemes", "http", "basePath", "api", "consumes", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "produces", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "securityDefinitions", "key", "type", "apiKey", "in", "header", "name", "x", "token", "security", "key", "paths", "customers", "post", "tags", "customers", "operationId", "create", "summary", "Create", "a", "new", "customer", "to", "track", "parameters", "name", "info", "in", "body", "schema", "ref", "definitions", "customer", "responses", "NUMBER", "description", "created", "schema", "ref", "definitions", "customer", "default", "description", "error", "schema", "ref", "definitions", "error", "get", "tags", "customers", "operationId", "getId", "summary", "Get", "a", "customerId", "given", "an", "SSN", "parameters", "name", "info", "in", "body", "schema", "ref", "definitions", "social_id", "responses", "NUMBER", "description", "OK", "schema", "ref", "definitions", "customer", "NUMBER", "description", "unauthorized", "schema", "ref", "definitions", "error", "NUMBER", "description", "resource", "not", "find", "schema", "ref", "definitions", "error", "default", "description", "error", "schema", "ref", "definitions", "error", "definitions", "customer", "type", "object", "required", "customerId", "name", "surname", "ssn", "fipsCode", "properties", "customerId", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "description", "internal", "identifier", "of", "a", "customer", "name", "type", "string", "format", "string", "minLength", "NUMBER", "surname", "type", "string", "format", "string", "minLength", "NUMBER", "agentId", "type", "integer", "format", "int", "NUMBER", "description", "agent", "associated", "with", "this", "customer", "ssn", "type", "string", "format", "string", "minLength", "NUMBER", "description", "Lookup", "identifier", "to", "find", "a", "customer", "in", "the", "system", "fipsCode", "type", "string", "format", "string", "minLength", "NUMBER", "social_id", "type", "object", "required", "ssn", "properties", "ssn", "type", "string", "format", "string", "minLength", "NUMBER", "error", "type", "object", "required", "message", "properties", "code", "type", "integer", "format", "int", "NUMBER", "message", "type", "string", "field", "type", "string", "NUMBER", "With", "the", "above", "spec", "and", "the", "following", "KeyAuth", "handler", "the", "issue", "be", "reproducable", "var", "bAuthenticated", "bool", "This", "file", "be", "safe", "to", "edit", "NUMBER", "Once", "it", "exists", "it", "will", "not", "be", "overwritten", "type", "MyAuthInfo", "struct", "token", "string", "in", "func", "configureAPI", "NUMBER", "NUMBER", "Applies", "when", "the", "x", "token", "header", "be", "set", "api", "NUMBER", "KeyAuth", "func", "token", "string", "interface", "error", "api", "NUMBER", "Logger", "KeyAuth", "handler", "call", "if", "token", "abcdefuvwxyz", "authInfo", "new", "MyAuthInfo", "authInfo", "NUMBER", "token", "token", "bAuthenticated", "true", "return", "authInfo", "nil", "api", "NUMBER", "Logger", "Access", "attempt", "with", "incorrect", "api", "key", "auth", "s", "token", "bAuthenticated", "false", "return", "nil", "error", "NUMBER", "New", "NUMBER", "incorrect", "api", "key", "auth", "return", "nil", "error", "NUMBER", "NotImplemented", "api", "key", "auth", "key", "x", "token", "from", "header", "param", "x", "token", "has", "not", "yet", "be", "implement", "Theodore", "Theo", "laptop", "NUMBER", "MINGW", "NUMBER", "dev", "Golang", "src", "github", "NUMBER", "com", "Ravenwater", "keyauth_debug", "curl", "i", "H", "Content", "Type", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "H", "X", "Token", "abcdefuvwxyz", "LINK", "Total", "Received", "Xferd", "Average", "Speed", "Time", "Time", "Time", "Current", "Dload", "Upload", "Total", "Spent", "Left", "Speed", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "HTTP", "NUMBER", "NUMBER", "Not", "Implemented", "Content", "Type", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "Date", "Fri", "NUMBER", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Content", "Length", "NUMBER", "operation", "customers", "NUMBER", "GetID", "has", "not", "yet", "be", "implement", "Theodore", "Theo", "laptop", "NUMBER", "MINGW", "NUMBER", "dev", "Golang", "src", "github", "NUMBER", "com", "Ravenwater", "keyauth_debug", "curl", "i", "H", "Content", "Type", "application", "keyauth", "NUMBER", "api", "NUMBER", "v", "NUMBER", "json", "H", "X", "Token", "badauthtoken", "LINK", "Total", "Received", "Xferd", "Average", "Speed", "Time", "Time", "Time", "Current", "Dload", "Upload", "Total", "Spent", "Left", "Speed", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "CTRL", "C", "Thank", "you", "for", "the", "explanation", "I", "would", "not", "have", "be", "able", "to", "get", "to", "that", "understanding", "NUMBER", "Problem", "statement", "Hi", "It", "seems", "when", "I", "generate", "a", "date", "attribute", "of", "a", "model", "it", "always", "use", "strfmt", "NUMBER", "DateTime", "as", "type", "be", "it", "possilbe", "to", "make", "it", "as", "a", "pointer", "such", "as", "strfmt", "NUMBER", "DateTime", "Thanks", "Cool", "thanks", "Problem", "statement", "This", "be", "the", "first", "time", "around", "build", "an", "API", "and", "with", "go", "swagger", "I", "be", "often", "uncertain", "how", "certain", "patterns", "be", "supposed", "to", "work", "NUMBER", "I", "be", "looking", "for", "the", "designer", "s", "insight", "in", "what", "the", "middleware", "injection", "for", "Authentication", "and", "Content", "Negotiation", "be", "supposed", "to", "look", "like", "NUMBER", "Authentication", "be", "clearly", "a", "pattern", "that", "most", "APIs", "use", "but", "I", "haven", "t", "find", "an", "example", "of", "it", "in", "the", "examples", "or", "tutorial", "directory", "NUMBER", "Similarly", "I", "was", "thinking", "that", "it", "would", "be", "nice", "to", "return", "json", "or", "html", "so", "that", "you", "can", "use", "a", "browser", "to", "test", "the", "RESTfulness", "of", "an", "API", "in", "which", "case", "I", "need", "to", "implement", "content", "negotiation", "NUMBER", "Again", "looking", "for", "the", "patterns", "that", "the", "generator", "authors", "had", "in", "mind", "to", "implement", "this", "with", "go", "swagger", "NUMBER", "Swagger", "specification", "NUMBER", "Just", "spike", "for", "the", "enum", "The", "usage", "like", "swagger", "strfmt", "and", "will", "be", "two", "way", "to", "collection", "the", "enum", "values", "if", "const", "be", "typed", "we", "will", "use", "the", "value", "of", "const", "which", "defined", "by", "the", "target", "type", "if", "iota", "const", "setted", "we", "will", "use", "the", "typename", "of", "const", "with", "prefix", "snake", "upper", "case", "equals", "target", "type", "go", "swagger", "enum", "type", "Level", "string", "const", "LEVEL_", "NUMBER", "Level", "ONE", "LEVEL_", "NUMBER", "Level", "TWO", "LEVEL_", "NUMBER", "Level", "THREE", "swagger", "enum", "type", "LevelInt", "int", "const", "LEVEL_INT", "will", "be", "type", "and", "ONE", "will", "be", "the", "value", "LEVEL_INT__ONE", "iota", "NUMBER", "LEVEL_INT__TWO", "swagger", "model", "type", "Model", "struct", "level", "Level", "levelInt", "LevelInt", "will", "be", "yaml", "definitions", "Model", "type", "object", "properties", "level", "type", "string", "enum", "ONE", "TWO", "THREE", "levelInt", "type", "string", "enum", "ONE", "TWO", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "h", "NUMBER", "Report", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "desc", "into", "master", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "b", "NUMBER", "e", "NUMBER", "d", "NUMBER", "ca", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "a", "NUMBER", "c", "NUMBER", "ccf", "NUMBER", "src", "pr", "el", "desc", "will", "decrease", "coverage", "by", "NUMBER", "NUMBER", "The", "diff", "coverage", "be", "NUMBER", "NUMBER", "Impacted", "file", "tree", "graph", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "graphs", "tree", "NUMBER", "svg", "token", "aQS", "NUMBER", "DepR", "NUMBER", "C", "src", "pr", "width", "NUMBER", "height", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "Coverage", "Diff", "master", "NUMBER", "Coverage", "NUMBER", "NUMBER", "NUMBER", "Files", "NUMBER", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "NUMBER", "Impacted", "Files", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "Coverage", "\u0394", "scan", "scanner", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "FubmVyLmdv", "NUMBER", "TAG", "\u00f8", "arrow_up", "scan", "responses", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "yZXNwb", "NUMBER", "zZXMuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "scan", "enum", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "lbnVtLmdv", "NUMBER", "TAG", "\u00f8", "scan", "parameters", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "wYXJhbWV", "NUMBER", "ZXJzLmdv", "NUMBER", "TAG", "NUMBER", "arrow_down", "scan", "schema", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "tree", "diff", "c", "NUMBER", "Nhbi", "NUMBER", "zY", "NUMBER", "hlbWEuZ", "NUMBER", "NUMBER", "TAG", "NUMBER", "arrow_down", "Continue", "to", "review", "full", "report", "at", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "continue", "NUMBER", "Legend", "Click", "here", "to", "learn", "more", "LINK", "delta", "\u0394", "absolute", "TAG", "impact", "\u00f8", "not", "affected", "miss", "data", "Powered", "by", "Codecov", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "footer", "NUMBER", "Last", "update", "NUMBER", "b", "NUMBER", "e", "NUMBER", "dc", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "el", "lastupdated", "NUMBER", "Read", "the", "comment", "docs", "LINK", "request", "comments", "NUMBER", "morlay", "be", "you", "still", "work", "on", "this", "If", "not", "I", "don", "t", "mind", "taking", "it", "over", "to", "finish", "of", "this", "PR", "NUMBER", "As", "it", "s", "a", "feature", "needed", "by", "multiple", "people", "NUMBER", "GlenDC", "Cool", "NUMBER", "I", "just", "use", "this", "quick", "version", "for", "my", "project", "as", "MVP", "NUMBER", "I", "think", "casualjim", "already", "complete", "some", "work", "could", "you", "join", "Slack", "to", "catch", "up", "with", "them", "Thanks", "for", "taking", "over", "this", "NUMBER", "I", "be", "really", "busy", "with", "other", "work", "recently", "and", "bad", "network", "in", "China", "I", "cannot", "login", "Slack", "agent", "Problem", "statement", "Generating", "go", "swagger", "server", "with", "objects", "containing", "only", "allOf", "list", "produces", "unexpect", "models", "NUMBER", "Version", "dev", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "today", "Nov", "NUMBER", "NUMBER", "NUMBER", "Has", "be", "happening", "since", "I", "start", "to", "use", "go", "swagger", "in", "Sep", "Oct", "NUMBER", "Swagger", "specification", "Swagger", "allows", "combining", "and", "extending", "model", "definitions", "use", "the", "allOf", "property", "of", "JSON", "Schema", "in", "effect", "offering", "model", "composition", "NUMBER", "Steps", "to", "reproduce", "Create", "a", "GOPATH", "src", "NUMBER", "swagger", "NUMBER", "yaml", "file", "with", "the", "following", "contents", "yaml", "swagger", "NUMBER", "info", "title", "allOf", "description", "allOf", "bug", "example", "version", "NUMBER", "schemes", "http", "consumes", "application", "json", "produces", "application", "json", "definitions", "Lol", "type", "object", "required", "xxx", "yyy", "zzz", "properties", "xxx", "type", "string", "yyy", "type", "integer", "zzz", "type", "boolean", "Foo", "type", "object", "properties", "fauna", "ref", "definitions", "Lol", "flora", "ref", "definitions", "Lol", "fungi", "ref", "definitions", "Lol", "Bar", "type", "object", "allOf", "ref", "definitions", "Foo", "Baz", "type", "object", "properties", "squirrel", "type", "string", "owl", "type", "string", "fox", "type", "string", "Awol", "type", "object", "allOf", "ref", "definitions", "Bar", "ref", "definitions", "Baz", "paths", "awol", "put", "operationId", "setAwol", "summary", "Set", "Awol", "parameters", "name", "awol", "in", "body", "required", "true", "description", "Awol", "schema", "ref", "definitions", "Awol", "responses", "NUMBER", "description", "Awol", "set", "schema", "ref", "definitions", "Awol", "generate", "server", "f", "swagger", "NUMBER", "yaml", "You", "ll", "find", "out", "that", "e", "NUMBER", "g", "NUMBER", "type", "Bar", "struct", "in", "models", "bar", "NUMBER", "go", "be", "empty", "NUMBER", "You", "can", "work", "around", "this", "by", "change", "the", "definition", "of", "Bar", "as", "follows", "Bar", "type", "object", "allOf", "ref", "definitions", "Foo", "properties", "wut", "type", "boolean", "default", "true", "In", "my", "case", "I", "could", "also", "work", "around", "it", "like", "this", "Bar", "allOf", "ref", "definitions", "Foo", "type", "object", "casualjim", "This", "be", "the", "thing", "that", "we", "talked", "about", "on", "Slack", "last", "week", "that", "I", "hadn", "t", "had", "time", "to", "log", "yet", "NUMBER", "Problem", "statement", "The", "Responses", "of", "a", "swagger", "route", "should", "have", "support", "to", "add", "a", "description", "which", "be", "required", "by", "the", "Swagger", "specification", "NUMBER", "Having", "a", "comment", "on", "the", "response", "type", "add", "a", "description", "in", "the", "definitions", "but", "not", "on", "the", "responses", "NUMBER", "Swagger", "specification", "See", "LINK", "responseObject", "Steps", "to", "reproduce", "NUMBER", "Declare", "a", "swagger", "route", "with", "Responses", "NUMBER", "No", "description", "can", "be", "set", "just", "a", "named", "response", "NUMBER", "The", "description", "property", "be", "miss", "on", "the", "responses", "object", "in", "the", "generate", "JSON", "I", "was", "looking", "at", "add", "this", "which", "would", "fit", "right", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "validators", "NUMBER", "go", "L", "NUMBER", "but", "I", "change", "something", "that", "made", "my", "responses", "outputs", "looks", "like", "NUMBER", "ref", "responses", "pet", "NUMBER", "ref", "responses", "pet", "and", "I", "believe", "they", "were", "previously", "outputting", "the", "schema", "as", "a", "reference", "which", "I", "mocked", "up", "below", "NUMBER", "schema", "ref", "responses", "pet", "Whatever", "the", "change", "was", "description", "be", "no", "longer", "required", "by", "the", "parser", "at", "LINK", "NUMBER", "In", "fact", "when", "including", "a", "description", "I", "get", "a", "warning", "that", "the", "field", "be", "ignored", "NUMBER", "I", "also", "wanted", "to", "point", "out", "that", "the", "reference", "be", "url", "encoded", "so", "spaces", "turn", "into", "NUMBER", "NUMBER", "I", "was", "thinking", "about", "splitting", "the", "value", "portion", "of", "the", "line", "based", "on", "the", "first", "space", "so", "any", "text", "after", "the", "first", "space", "would", "become", "the", "description", "NUMBER", "I", "be", "not", "sure", "what", "I", "change", "in", "my", "comment", "or", "build", "command", "that", "stopped", "outputting", "schema", "but", "I", "don", "t", "think", "I", "understand", "the", "problem", "well", "enough", "to", "code", "a", "solution", "NUMBER", "I", "see", "what", "the", "change", "was", "I", "had", "a", "definition", "instead", "of", "a", "response", "and", "just", "miss", "that", "that", "change", "NUMBER", "I", "took", "a", "stab", "at", "a", "fix", "in", "the", "PR", "linked", "above", "NUMBER", "Hi", "thx", "NUMBER", "for", "the", "replies", "and", "your", "work", "I", "still", "can", "t", "get", "it", "work", "though", "NUMBER", "Do", "you", "have", "an", "example", "how", "and", "where", "the", "description", "should", "go", "Before", "close", "the", "documentation", "at", "LINK", "swagger", "go", "swagger", "blob", "master", "docs", "generate", "spec", "route", "NUMBER", "md", "example", "should", "probably", "be", "update", "to", "reflect", "this", "new", "feature", "Thx", "I", "get", "it", "work", "so", "the", "description", "be", "add", "to", "the", "responses", "of", "the", "operation", "when", "use", "body", "myNamedResponse", "NUMBER", "I", "wonder", "though", "why", "I", "still", "need", "to", "add", "a", "wrapper", "struct", "for", "the", "response", "and", "cannot", "just", "use", "a", "swagger", "model", "annotated", "struct", "NUMBER", "It", "s", "nothing", "serious", "but", "I", "could", "save", "a", "struct", "per", "response", "and", "the", "responses", "in", "the", "generate", "Swagger", "JSON", "would", "get", "smaller", "NUMBER", "Example", "type", "authenticateResponse", "struct", "ID", "of", "the", "authenticated", "user", "Required", "true", "ID", "bson", "NUMBER", "ObjectId", "json", "id", "Authentication", "token", "Required", "true", "Token", "string", "json", "token", "swagger", "response", "authenticateResponse", "type", "authenticateResponseWrapper", "struct", "in", "body", "Body", "authenticateResponse", "swagger", "route", "POST", "login", "authentication", "login", "Login", "user", "Logs", "a", "user", "in", "by", "creating", "an", "authentication", "token", "token", "NUMBER", "Consumes", "application", "x", "www", "form", "urlencoded", "Responses", "NUMBER", "body", "authenticateResponse", "On", "login", "success", "NUMBER", "body", "errorMessage", "Invalid", "credentials", "func", "authenticateHandler", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "NUMBER", "So", "the", "question", "be", "be", "the", "body", "prefix", "needed", "to", "split", "for", "a", "description", "or", "could", "you", "generally", "do", "that", "and", "thus", "allow", "responses", "with", "a", "ref", "to", "a", "response", "and", "a", "description", "in", "an", "operation", "You", "can", "use", "a", "model", "directly", "by", "defining", "your", "example", "as", "follows", "go", "swagger", "model", "authenticateResponse", "type", "authenticateResponse", "struct", "ID", "of", "the", "authenticated", "user", "Required", "true", "ID", "bson", "NUMBER", "ObjectId", "json", "id", "Authentication", "token", "Required", "true", "Token", "string", "json", "token", "You", "might", "need", "to", "generate", "the", "spec", "use", "the", "include", "models", "flag", "scan", "models", "NUMBER", "This", "way", "you", "can", "prevent", "having", "to", "use", "a", "wrapper", "struct", "NUMBER", "Let", "me", "know", "if", "this", "works", "and", "if", "you", "have", "any", "further", "question", "on", "this", "topic", "NUMBER", "Thanks", "GlenDC", "I", "miss", "the", "scan", "models", "option", "when", "generating", "the", "spec", "NUMBER", "Now", "it", "works", "as", "I", "d", "expect", "NUMBER", "When", "I", "m", "trying", "to", "use", "date", "time", "format", "in", "my", "swagger", "spec", "for", "a", "response", "like", "this", "json", "properties", "testTimeField", "type", "string", "format", "date", "time", "I", "m", "get", "a", "property", "of", "type", "strfmt", "NUMBER", "DateTime", "in", "my", "model", "golang", "TestTimeField", "strfmt", "NUMBER", "DateTime", "json", "testTimeField", "omitempty", "The", "problem", "that", "even", "though", "this", "property", "be", "optional", "and", "contains", "omitempty", "the", "value", "of", "this", "property", "be", "always", "present", "in", "the", "response", "even", "if", "the", "property", "be", "not", "set", "json", "testTimeField", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Thank", "you", "for", "the", "help", "Problem", "swagger", "generate", "client", "wont", "build", "a", "client", "on", "a", "validated", "swagger", "NUMBER", "json", "Swagger", "specification", "LINK", "Steps", "to", "reproduce", "swagger", "validate", "LINK", "The", "swagger", "spec", "at", "LINK", "be", "valid", "against", "swagger", "specification", "NUMBER", "swagger", "generate", "client", "f", "LINK", "A", "esi", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "object", "has", "no", "key", "GetCharactersCharacterIDMailOKBodyItems", "NUMBER", "seems", "like", "its", "some", "sort", "of", "format", "error", "Steps", "to", "reproduce", "loaded", "LINK", "tranquility", "into", "LINK", "generate", "a", "client", "swagger", "NUMBER", "json", "swagger", "generate", "client", "f", "NUMBER", "swagger", "NUMBER", "json", "A", "esi", "executed", "sucessfully", "the", "swagger", "NUMBER", "json", "that", "be", "generate", "with", "the", "client", "sdk", "of", "LINK", "be", "actually", "a", "different", "one", "than", "the", "original", "NUMBER", "i", "think", "it", "only", "puts", "client", "stuff", "in", "there", "NUMBER", "maybe", "it", "helps", "if", "you", "compare", "the", "original", "from", "LINK", "tranquility", "and", "the", "one", "that", "be", "generate", "with", "the", "client", "sdk", "under", "LINK", "Problem", "statement", "I", "would", "like", "the", "generator", "to", "use", "decimal", "NUMBER", "Decimal", "LINK", "type", "to", "represent", "field", "with", "type", "number", "format", "decimal", "NUMBER", "The", "decimal", "format", "be", "not", "a", "part", "of", "the", "OpenAPI", "specs", "as", "far", "as", "I", "can", "tell", "so", "I", "can", "t", "expect", "this", "to", "be", "available", "in", "go", "swagger", "NUMBER", "How", "ever", "float", "NUMBER", "be", "not", "acceptable", "for", "handle", "money", "NUMBER", "Is", "there", "a", "way", "to", "plug", "in", "register", "custom", "format", "types", "to", "the", "generator", "I", "m", "aware", "of", "strfmt", "but", "it", "doesn", "t", "seem", "to", "be", "possible", "to", "define", "the", "string", "formats", "for", "the", "generator", "just", "when", "you", "re", "generating", "specs", "from", "code", "I", "would", "also", "like", "to", "configure", "the", "generator", "to", "use", "int", "instead", "of", "int", "NUMBER", "for", "integers", "etc", "NUMBER", "I", "understand", "this", "be", "not", "necessarily", "ideal", "for", "everyone", "which", "be", "why", "I", "d", "like", "it", "to", "be", "configurable", "NUMBER", "Swagger", "specification", "Money", "type", "object", "properties", "amount", "type", "number", "format", "decimal", "non", "standard", "description", "Amount", "be", "the", "monetary", "value", "currency", "type", "string", "format", "currency", "description", "NUMBER", "char", "currency", "code", "LINK", "_", "NUMBER", "Any", "way", "to", "do", "this", "now", "any", "plan", "to", "support", "this", "in", "the", "future", "or", "would", "you", "accept", "this", "feature", "configurable", "custom", "formats", "types", "in", "the", "generator", "if", "I", "find", "a", "solution", "casualjim", "this", "could", "be", "provide", "by", "support", "it", "as", "an", "x", "format", "type", "no", "Adding", "it", "to", "strfmt", "and", "plugging", "it", "into", "the", "other", "custom", "x", "format", "types", "we", "provide", "already", "Is", "that", "what", "you", "had", "in", "mind", "as", "well", "I", "be", "trying", "to", "vendor", "an", "API", "generate", "by", "go", "swagger", "to", "be", "include", "in", "a", "Docker", "container", "NUMBER", "govendor", "list", "NUMBER", "shows", "many", "package", "what", "be", "the", "minimum", "set", "I", "use", "glide", "LINK", "and", "a", "simple", "glide", "init", "followed", "by", "glide", "install", "after", "generating", "the", "code", "worked", "perfectly", "NUMBER", "The", "dependencies", "were", "correctly", "identified", "and", "downloaded", "no", "problem", "NUMBER", "I", "use", "glide", "but", "get", "the", "following", "error", "ERROR", "Error", "scanning", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "examples", "authentication", "client", "customers", "open", "Users", "lex", "NUMBER", "glide", "cache", "src", "https", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "examples", "authentication", "client", "customers", "no", "such", "file", "or", "directory", "ERROR", "This", "error", "means", "the", "referenced", "package", "was", "not", "find", "NUMBER", "ERROR", "Missing", "file", "or", "directory", "error", "usually", "occur", "when", "multiple", "package", "ERROR", "share", "a", "common", "dependency", "and", "the", "first", "reference", "encountered", "by", "the", "scanner", "ERROR", "sets", "the", "version", "to", "one", "that", "do", "not", "contain", "a", "subpackage", "needed", "required", "ERROR", "by", "another", "package", "that", "uses", "the", "shared", "dependency", "NUMBER", "Try", "setting", "a", "ERROR", "version", "in", "your", "glide", "NUMBER", "yaml", "that", "works", "for", "all", "package", "that", "share", "this", "ERROR", "dependency", "NUMBER", "What", "would", "be", "the", "exact", "configuration", "line", "to", "use", "in", "the", "glide", "NUMBER", "yaml", "file", "or", "other", "ideas", "to", "fix", "this", "Thanks", "in", "advance", "NUMBER", "casualjim", "Thank", "you", "for", "your", "response", "NUMBER", "As", "it", "turns", "out", "the", "way", "go", "references", "the", "vendor", "directory", "be", "not", "compatible", "with", "add", "a", "project", "path", "to", "the", "GOPATH", "NUMBER", "I", "d", "get", "the", "draconian", "unexpect", "directory", "layout", "error", "LINK", "when", "runnning", "go", "install", "unexpect", "directory", "layout", "import", "path", "github", "NUMBER", "com", "pkg", "error", "root", "Users", "lex", "go", "src", "dir", "Users", "lex", "go", "src", "hi", "project", "vendor", "github", "NUMBER", "com", "pkg", "error", "expand", "root", "Users", "lex", "go", "src", "expand", "dir", "Users", "lex", "go", "src", "hi", "project", "vendor", "github", "NUMBER", "com", "pkg", "error", "separator", "FWIW", "I", "created", "an", "alias", "that", "be", "work", "well", "for", "me", "alias", "mvglide", "mkdir", "p", "vendors", "mv", "vendor", "vendors", "src", "export", "GOPATH", "pwd", "pwd", "vendors", "echo", "vendor", "package", "have", "be", "moved", "to", "pwd", "vendors", "and", "your", "GOPATH", "GOPATH", "I", "simply", "run", "the", "following", "alias", "glide", "install", "rather", "than", "glide", "install", "alias", "glide", "install", "rm", "rf", "vendor", "vendors", "glide", "install", "mvglide", "I", "can", "see", "where", "you", "might", "get", "that", "impression", "NUMBER", "I", "did", "recently", "start", "use", "Glide", "NUMBER", "If", "the", "good", "folks", "that", "implement", "Go", "s", "current", "vendoring", "implementation", "understood", "that", "the", "GOPATH", "should", "support", "more", "than", "one", "directory", "in", "the", "path", "where", "each", "path", "be", "colon", "separated", "much", "like", "the", "system", "PATH", "there", "would", "be", "no", "need", "for", "my", "alias", "hacks", "NUMBER", "I", "use", "to", "use", "full", "github", "bitbucket", "references", "when", "referring", "to", "imports", "in", "my", "project", "like", "this", "import", "github", "NUMBER", "com", "myrepo", "myproject", "mysymbol", "But", "once", "I", "start", "applying", "the", "techniques", "use", "in", "this", "article", "NUMBER", "LINK", "the", "clean", "architecture", "to", "go", "applications", "NUMBER", "I", "came", "to", "appreciate", "that", "less", "be", "exponentially", "more", "import", "mysymbol", "If", "a", "directory", "has", "a", "src", "subdirectory", "it", "should", "be", "a", "candidate", "for", "a", "GOPATH", "entry", "NUMBER", "Or", "at", "least", "that", "was", "the", "case", "before", "the", "new", "vendoring", "implementation", "NUMBER", "After", "playing", "with", "glide", "and", "vendoring", "I", "find", "that", "be", "not", "the", "case", "NUMBER", "Thank", "you", "for", "your", "follow", "up", "and", "for", "sharing", "your", "insights", "NUMBER", "Problem", "statement", "When", "validating", "spec", "that", "include", "schema", "from", "external", "file", "it", "fail", "with", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "b", "NUMBER", "ff", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "ea", "NUMBER", "ea", "NUMBER", "d", "NUMBER", "aa", "NUMBER", "e", "NUMBER", "d", "NUMBER", "b", "NUMBER", "swagger", "validate", "spec", "NUMBER", "yaml", "The", "swagger", "spec", "at", "spec", "NUMBER", "yaml", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "invalid", "character", "y", "in", "literal", "true", "expecting", "r", "Swagger", "tool", "report", "that", "the", "spec", "be", "valid", "swagger", "tool", "version", "NUMBER", "swagger", "tool", "validate", "v", "spec", "NUMBER", "yaml", "Validation", "Details", "Swagger", "Version", "NUMBER", "Swagger", "file", "spec", "NUMBER", "yaml", "Swagger", "document", "be", "valid", "Swagger", "specification", "LINK", "Steps", "to", "reproduce", "git", "clone", "LINK", "swagger", "validate", "spec", "NUMBER", "yaml", "Has", "anyone", "figured", "out", "yet", "if", "there", "s", "a", "specific", "workaround", "for", "this", "in", "go", "swagger", "or", "be", "all", "external", "file", "reference", "functionality", "broken", "casualjim", "I", "m", "finding", "that", "local", "references", "work", "swagger", "NUMBER", "and", "swagger", "NUMBER", "but", "only", "if", "the", "references", "be", "JSON", "formatted", "file", "swagger", "NUMBER", "yaml", "conditions", "type", "array", "items", "ref", "NUMBER", "swagger", "test", "NUMBER", "yaml", "definitions", "Condition", "swagger", "test", "NUMBER", "yaml", "Works", "definitions", "Condition", "type", "object", "properties", "name", "type", "string", "Fails", "definitions", "Condition", "type", "object", "properties", "name", "type", "string", "It", "would", "seem", "that", "a", "JSON", "parser", "be", "actually", "trying", "to", "resolve", "the", "references", "as", "oppose", "to", "the", "YAML", "parser", "NUMBER", "Any", "ideas", "casualjim", "Before", "I", "go", "deeper", "here", "it", "seems", "as", "though", "your", "examples", "suggest", "that", "go", "swagger", "already", "be", "doing", "the", "right", "thing", "the", "last", "link", "so", "why", "be", "I", "see", "the", "behavior", "when", "I", "run", "swagger", "generate", "server", "f", "swagger", "NUMBER", "yaml", "I", "ve", "get", "some", "update", "Using", "code", "from", "master", "I", "m", "able", "to", "achieve", "the", "following", "NUMBER", "go", "swagger", "validate", "swagger", "local", "NUMBER", "yaml", "The", "swagger", "spec", "at", "swagger", "local", "NUMBER", "yaml", "be", "valid", "against", "swagger", "specification", "NUMBER", "But", "when", "I", "try", "to", "generate", "the", "server", "directly", "from", "this", "yaml", "file", "I", "get", "a", "message", "like", "the", "following", "NUMBER", "go", "swagger", "generate", "server", "f", "swagger", "local", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "object", "has", "no", "key", "LatLng", "Here", "s", "an", "excerpt", "from", "swagger", "local", "NUMBER", "yaml", "demonstrating", "a", "reference", "properties", "NUMBER", "position", "ref", "NUMBER", "base", "NUMBER", "yaml", "definitions", "LatLng", "And", "here", "s", "an", "excerpt", "from", "base", "NUMBER", "yaml", "which", "be", "in", "the", "same", "directory", "definitions", "LatLng", "type", "object", "properties", "lat", "type", "number", "format", "double", "lng", "type", "number", "format", "double", "required", "lat", "lng", "If", "i", "try", "flattening", "first", "I", "get", "a", "different", "error", "which", "comes", "from", "a", "reference", "from", "within", "the", "base", "NUMBER", "yaml", "file", "NUMBER", "go", "swagger", "flatten", "swagger", "local", "NUMBER", "yaml", "swagger", "local", "NUMBER", "json", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "schema", "analysis", "definitions", "testLocation", "properties", "conditions", "object", "has", "no", "key", "TestCondition", "make", "swagger", "local", "NUMBER", "json", "Error", "NUMBER", "TestCondition", "NUMBER", "TestLocation", "type", "object", "properties", "position", "ref", "definitions", "LatLng", "extent", "ref", "definitions", "LatLngLine", "info", "ref", "definitions", "LocationMetadata", "length", "type", "number", "format", "double", "conditions", "type", "array", "items", "ref", "definitions", "TestCondition", "required", "info", "NUMBER", "So", "basically", "each", "method", "has", "a", "problem", "NUMBER", "In", "general", "what", "s", "the", "right", "way", "to", "set", "these", "references", "up", "Furthermore", "my", "end", "goal", "be", "really", "to", "share", "types", "between", "different", "apis", "so", "be", "there", "a", "best", "practice", "for", "that", "Thanks", "Okay", "here", "s", "a", "version", "that", "suffers", "from", "the", "same", "issue", "swagger", "template", "NUMBER", "yaml", "swagger", "NUMBER", "info", "title", "Test", "version", "NUMBER", "host", "test", "NUMBER", "com", "basePath", "produces", "application", "json", "schemes", "http", "paths", "a", "b", "get", "operationId", "get_ab", "parameters", "name", "pilot_area_only", "in", "query", "type", "boolean", "default", "false", "responses", "NUMBER", "description", "Test", "headers", "Access", "Control", "Allow", "Origin", "type", "string", "default", "schema", "type", "object", "properties", "results", "ref", "definitions", "LocalDefs", "default", "description", "Unexpected", "error", "schema", "ref", "definitions", "Error", "definitions", "LocalDef", "type", "object", "properties", "position", "ref", "NUMBER", "base", "NUMBER", "yaml", "definitions", "LatLng", "extent", "ref", "NUMBER", "base", "NUMBER", "yaml", "definitions", "LatLngLine", "LocalDefs", "type", "array", "items", "ref", "definitions", "LocalDef", "Error", "type", "object", "properties", "code", "type", "integer", "format", "int", "NUMBER", "message", "type", "string", "base", "NUMBER", "yaml", "definitions", "LatLng", "type", "object", "properties", "lat", "type", "number", "format", "double", "lng", "type", "number", "format", "double", "required", "lat", "lng", "LatLngLine", "type", "array", "items", "ref", "definitions", "LatLng", "As", "be", "if", "I", "try", "to", "generate", "directly", "from", "swagger", "template", "NUMBER", "yaml", "I", "get", "the", "following", "error", "NUMBER", "go", "swagger", "generate", "server", "f", "swagger", "local", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "object", "has", "no", "key", "LatLng", "If", "instead", "I", "flatten", "first", "NUMBER", "go", "swagger", "flatten", "swagger", "local", "NUMBER", "yaml", "swagg", "flattened", "NUMBER", "json", "danieljy", "parking", "availability", "danielyehuda", "NUMBER", "go", "swagger", "generate", "server", "f", "swagg", "flattened", "NUMBER", "json", "The", "swagger", "spec", "at", "swagg", "flattened", "NUMBER", "json", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "object", "has", "no", "key", "LatLng", "If", "i", "change", "base", "NUMBER", "yaml", "to", "look", "like", "this", "definitions", "LatLng", "type", "object", "properties", "lat", "type", "number", "format", "double", "lng", "type", "number", "format", "double", "required", "lat", "lng", "LatLngLine", "type", "array", "items", "ref", "NUMBER", "base", "NUMBER", "yaml", "definitions", "LatLng", "I", "be", "able", "to", "fully", "generate", "a", "server", "though", "it", "requires", "that", "I", "manually", "generate", "the", "models", "from", "base", "NUMBER", "yaml", "they", "don", "t", "get", "generate", "as", "part", "of", "the", "generate", "server", "command", "on", "the", "main", "file", "and", "then", "I", "have", "the", "problem", "that", "the", "generate", "operations", "file", "don", "t", "include", "the", "models", "NUMBER", "If", "I", "try", "flattening", "first", "it", "just", "hangs", "NUMBER", "Hope", "this", "helps", "I", "came", "upon", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "which", "seems", "to", "be", "the", "same", "issue", "I", "m", "seeing", "when", "I", "change", "my", "base", "NUMBER", "yaml", "to", "the", "form", "directly", "above", "NUMBER", "It", "seems", "the", "issue", "be", "close", "but", "it", "s", "unclear", "to", "me", "where", "i", "should", "inserting", "the", "x", "go", "package", "and", "x", "go", "name", "to", "make", "the", "generate", "code", "properly", "import", "and", "reference", "the", "models", "NUMBER", "Any", "ideas", "casualjim", "What", "about", "my", "most", "recent", "comment", "seems", "I", "can", "actually", "get", "everything", "work", "without", "flattening", "except", "for", "get", "the", "generate", "code", "to", "reference", "separately", "generate", "models", "NUMBER", "I", "d", "actually", "prefer", "to", "have", "a", "single", "package", "with", "the", "generate", "shared", "models", "rather", "than", "flattening", "which", "I", "believe", "would", "cause", "me", "to", "generate", "differently", "namespaced", "models", "depending", "on", "where", "I", "reference", "them", "NUMBER", "In", "other", "words", "be", "there", "a", "proper", "way", "of", "setting", "x", "go", "params", "somewhere", "so", "that", "my", "generate", "code", "properly", "imports", "external", "models", "Problem", "statement", "Hi", "I", "come", "back", "again", "since", "a", "long", "vocation", "I", "have", "a", "simple", "question", "how", "could", "we", "set", "cookies", "when", "I", "return", "the", "request", "Solution", "with", "corsHandler", "go", "func", "setupGlobalMiddleware", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "corsHandler", "cors", "NUMBER", "New", "cors", "NUMBER", "Options", "Debug", "false", "AllowedHeaders", "string", "AllowedOrigins", "string", "AllowedMethods", "string", "AllowCredentials", "true", "MaxAge", "NUMBER", "corsHandler", "NUMBER", "Log", "zllogger", "NUMBER", "Trace", "h", "corsHandler", "NUMBER", "Handler", "handler", "return", "http", "NUMBER", "HandlerFunc", "func", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "expiration", "time", "NUMBER", "Now", "NUMBER", "Add", "NUMBER", "NUMBER", "time", "NUMBER", "Hour", "cookie", "http", "NUMBER", "Cookie", "Name", "yoyo", "Value", "abcd", "Expires", "expiration", "http", "NUMBER", "SetCookie", "w", "cookie", "zllogger", "NUMBER", "Info", "NUMBER", "Println", "set", "cookies", "do", "h", "NUMBER", "ServeHTTP", "w", "r", "Thanks", "Robin", "This", "could", "be", "a", "great", "addition", "NUMBER", "We", "currently", "have", "a", "need", "for", "add", "scopes", "to", "an", "apiKey", "authentication", "mechanism", "NUMBER", "Problem", "statement", "I", "read", "a", "doc", "about", "generating", "json", "spec", "from", "code", "from", "comments", "NUMBER", "I", "follow", "the", "example", "provide", "in", "gitbook", "NUMBER", "Swagger", "specification", "go", "ServeAPI", "serves", "the", "API", "for", "this", "record", "store", "func", "ServeAPI", "host", "basePath", "string", "schemes", "string", "error", "swagger", "route", "GET", "pets", "listPets", "pets", "users", "Lists", "pets", "filtered", "by", "some", "parameters", "NUMBER", "This", "will", "show", "all", "available", "pets", "by", "default", "NUMBER", "You", "can", "get", "the", "pets", "that", "be", "out", "of", "stock", "Consumes", "application", "json", "application", "x", "protobuf", "Produces", "application", "json", "application", "x", "protobuf", "Schemes", "http", "https", "ws", "wss", "Security", "api_key", "oauth", "read", "write", "Responses", "default", "genericError", "NUMBER", "someResponse", "NUMBER", "validationError", "mountItem", "GET", "basePath", "pets", "nil", "Steps", "to", "reproduce", "Generate", "doc", "from", "code", "NUMBER", "bash", "swagger", "generate", "spec", "o", "NUMBER", "apidoc", "NUMBER", "json", "Put", "generate", "json", "to", "swagger", "editor", "and", "get", "Security", "definition", "could", "not", "be", "resolve", "api_key", "Security", "definition", "could", "not", "be", "resolve", "oauth", "Looks", "like", "this", "feature", "be", "miss", "NUMBER", "api_key", "be", "use", "in", "the", "example", "but", "goswagger", "will", "not", "generate", "the", "securityDefinition", "Confirm", "this", "NUMBER", "And", "there", "be", "no", "way", "to", "write", "securityDefinitions", "in", "swagger", "meta", "section", "NUMBER", "I", "would", "like", "to", "use", "httptest", "for", "test", "my", "handlers", "NUMBER", "Go", "swagger", "provides", "a", "Server", "but", "not", "a", "configured", "handler", "NUMBER", "I", "use", "this", "hack", "in", "a", "file", "test", "NUMBER", "go", "in", "the", "restapi", "folder", "I", "steal", "the", "private", "configureAPI", "function", "NUMBER", "It", "works", "NUMBER", "go", "package", "restapi", "import", "loads", "github", "NUMBER", "com", "go", "openapi", "loads", "github", "NUMBER", "com", "pim", "pam", "poum", "restapi", "operations", "net", "http", "func", "getAPI", "operations", "NUMBER", "ThefactoryAPI", "error", "swaggerSpec", "err", "loads", "NUMBER", "Analyzed", "SwaggerJSON", "if", "err", "nil", "return", "nil", "err", "api", "operations", "NUMBER", "NewThefactoryAPI", "swaggerSpec", "return", "api", "nil", "func", "GetAPIHandler", "http", "NUMBER", "Handler", "error", "api", "err", "getAPI", "if", "err", "nil", "return", "nil", "err", "h", "configureAPI", "api", "err", "api", "NUMBER", "Validate", "if", "err", "nil", "return", "nil", "err", "return", "h", "nil", "I", "can", "use", "be", "in", "test", "like", "this", "go", "handler", "err", "restapi", "NUMBER", "GetAPIHandler", "if", "err", "nil", "t", "NUMBER", "Fatal", "get", "api", "handler", "err", "ts", "httptest", "NUMBER", "NewServer", "handler", "defer", "ts", "NUMBER", "Close", "res", "err", "http", "NUMBER", "Get", "ts", "NUMBER", "URL", "api", "v", "NUMBER", "boxes", "But", "hacking", "restapi", "wich", "use", "my", "handlers", "be", "cyclic", "I", "can", "t", "drop", "my", "test", "near", "my", "handlers", "and", "this", "be", "still", "a", "hack", "NUMBER", "What", "be", "the", "offical", "way", "to", "manage", "handler", "test", "Problem", "statement", "This", "may", "be", "a", "bug", "NUMBER", "I", "have", "a", "service", "which", "should", "return", "a", "list", "of", "Foo", "NUMBER", "The", "list", "may", "be", "empty", "NUMBER", "However", "empty", "list", "be", "converted", "to", "null", "json", "because", "generate", "code", "contains", "omitempty", "tag", "NUMBER", "Adding", "required", "true", "to", "the", "response", "schema", "causes", "the", "model", "file", "in", "question", "to", "become", "empty", "I", "guess", "generation", "fail", "entirely", "NUMBER", "Swagger", "specification", "Steps", "to", "reproduce", "responses", "NUMBER", "description", "List", "of", "Foo", "schema", "type", "array", "items", "ref", "definitions", "Foo", "produces", "type", "ListFooOK", "struct", "In", "body", "Payload", "models", "NUMBER", "Foo", "json", "body", "omitempty", "and", "responses", "NUMBER", "description", "List", "of", "Foo", "schema", "type", "array", "required", "true", "items", "ref", "definitions", "Foo", "validates", "OK", "but", "generates", "empty", "file", "NUMBER", "fix", "NUMBER", "casualjim", "thanks", "just", "run", "that", "and", "push", "looks", "like", "I", "need", "to", "update", "some", "test", "NUMBER", "In", "order", "to", "respond", "with", "the", "code", "NUMBER", "Created", "I", "want", "to", "add", "Location", "header", "according", "to", "RFC", "NUMBER", "LINK", "sec", "NUMBER", "html", "sec", "NUMBER", "point", "to", "the", "created", "resource", "NUMBER", "Is", "it", "possible", "to", "do", "the", "reverse", "routing", "in", "such", "case", "Something", "similar", "to", "Gorilla", "reverse", "LINK", "file", "Thank", "you", "for", "the", "suggestion", "but", "I", "feel", "it", "should", "be", "like", "this", "yaml", "NUMBER", "description", "Pet", "created", "headers", "Location", "description", "uri", "of", "the", "new", "pet", "type", "string", "format", "uri", "I", "think", "I", "ve", "seen", "in", "the", "docs", "somewhere", "a", "notice", "that", "it", "s", "possible", "to", "replace", "the", "default", "router", "NUMBER", "Maybe", "I", "can", "use", "Gorila", "s", "mux", "or", "something", "instead", "of", "denco", "and", "get", "the", "reverse", "routing", "even", "though", "it", "s", "gonna", "be", "slower", "NUMBER", "Do", "you", "have", "any", "example", "of", "how", "to", "do", "that", "I", "think", "you", "right", "replacing", "router", "won", "t", "help", "much", "and", "denco", "as", "good", "as", "any", "other", "in", "this", "sense", "NUMBER", "What", "I", "really", "want", "to", "do", "be", "to", "have", "a", "some", "sort", "of", "a", "method", "which", "can", "return", "me", "a", "URL", "to", "a", "resource", "provide", "the", "request", "parameters", "NUMBER", "If", "a", "new", "Pet", "instance", "could", "return", "an", "URI", "that", "would", "be", "great", "but", "I", "don", "t", "think", "it", "s", "feasible", "because", "the", "Pet", "resource", "can", "be", "returned", "from", "a", "number", "of", "paths", "NUMBER", "So", "I", "think", "the", "more", "or", "less", "implementable", "approach", "would", "be", "relate", "to", "something", "in", "the", "API", "struct", "itself", "having", "similar", "name", "as", "a", "get", "handler", "and", "accepting", "all", "the", "parameters", "as", "the", "handler", "except", "http", "NUMBER", "Request", "but", "instead", "of", "returning", "a", "resource", "this", "method", "should", "return", "a", "URI", "and", "err", "NUMBER", "Something", "like", "url", "err", "api", "NUMBER", "GetUriToPetByPetID", "id", "I", "think", "this", "automatically", "generate", "implementation", "will", "be", "way", "more", "reliable", "than", "the", "traditional", "ones", "based", "on", "some", "string", "names", "of", "the", "path", "and", "a", "parameters", "matching", "like", "here", "LINK", "or", "in", "NUMBER", "NET", "s", "CreatedAtRoute", "because", "a", "it", "has", "the", "name", "of", "the", "resource", "in", "the", "name", "of", "the", "function", "b", "it", "has", "exact", "number", "and", "types", "of", "the", "parameters", "as", "the", "reverse", "routed", "path", "needs", "c", "the", "code", "breaks", "if", "you", "make", "an", "API", "change", "touching", "ether", "of", "aforementioned", "elements", "Thank", "you", "for", "implement", "it", "Problem", "statement", "When", "generating", "simple", "spec", "it", "fail", "with", "swagger", "generate", "server", "A", "Item", "f", "NUMBER", "swagger", "NUMBER", "yaml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "grouping", "operations", "into", "package", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "meta", "data", "and", "facades", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "operation", "group", "tags", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "operations", "for", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "template", "for", "operation", "Item", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "GetItems", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "get_items_parameters", "NUMBER", "go", "in", "restapi", "operations", "as", "parameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "name", "field", "GetItems", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "field", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "get_items_responses", "NUMBER", "go", "in", "restapi", "operations", "as", "responses", "format", "responses", "fail", "get_items_responses", "NUMBER", "go", "NUMBER", "NUMBER", "expected", "type", "find", "STRING", "json", "body", "omitempty", "and", "NUMBER", "more", "error", "Problem", "seems", "to", "be", "with", "the", "array", "ref", "schema", "linked", "to", "external", "schema", "file", "LINK", "L", "NUMBER", "L", "NUMBER", "NUMBER", "Swagger", "specification", "LINK", "Steps", "to", "reproduce", "NUMBER", "Clone", "the", "repo", "NUMBER", "NUMBER", "Install", "go", "swagger", "version", "version", "NUMBER", "commit", "NUMBER", "d", "NUMBER", "ee", "NUMBER", "ff", "NUMBER", "cdbfdc", "NUMBER", "d", "NUMBER", "a", "NUMBER", "cc", "NUMBER", "ab", "NUMBER", "ab", "NUMBER", "NUMBER", "Run", "swagger", "generate", "server", "A", "Item", "f", "NUMBER", "swagger", "NUMBER", "yaml", "from", "the", "root", "of", "the", "repo", "NUMBER", "Problem", "statement", "The", "generate", "command", "do", "not", "generate", "valid", "swagger", "NUMBER", "specs", "NUMBER", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "swagger", "generate", "spec", "Produces", "swagger", "NUMBER", "paths", "definitions", "which", "be", "miss", "the", "info", "key", "NUMBER", "casualjim", "This", "be", "in", "a", "directory", "where", "there", "isn", "t", "any", "code", "NUMBER", "My", "problem", "be", "that", "I", "get", "the", "same", "behavior", "when", "I", "do", "the", "swagger", "generate", "command", "in", "a", "go", "project", "that", "do", "have", "annotated", "code", "NUMBER", "I", "get", "this", "swagger", "NUMBER", "paths", "admin", "healthchecks", "get", "consumes", "plain", "text", "produces", "application", "json", "schemes", "http", "operationId", "getHealthchecks", "responses", "NUMBER", "ref", "responses", "OkResponse", "admin", "version", "get", "consumes", "plain", "text", "produces", "application", "json", "schemes", "http", "operationId", "getVersions", "responses", "NUMBER", "ref", "responses", "OkResponse", "api", "docs", "get", "consumes", "plain", "text", "produces", "application", "json", "schemes", "http", "operationId", "getApiDocsHandler", "responses", "NUMBER", "ref", "responses", "OkResponse", "definitions", "responses", "BadGatewayResponse", "description", "BadGatewayResponse", "occur", "when", "a", "downstream", "service", "be", "unavailable", "NUMBER", "BadRequestResponse", "description", "BadRequestResponse", "occur", "when", "request", "params", "and", "or", "body", "be", "invalid", "NUMBER", "ConflictResponse", "description", "ConflictResponse", "occur", "when", "a", "resource", "can", "t", "be", "created", "or", "update", "NUMBER", "CreatedResponse", "description", "CreatedResponse", "occur", "when", "a", "request", "resource", "be", "created", "NUMBER", "EmptyResponse", "description", "EmptyResponse", "be", "an", "empty", "response", "body", "NUMBER", "ForbiddenResponse", "description", "ForbiddenResponse", "occur", "when", "a", "resource", "can", "not", "be", "accessed", "due", "to", "inadequate", "permissions", "NUMBER", "GatewayTimeoutResponse", "description", "GatewayTimeoutResponse", "occur", "when", "a", "downstream", "service", "do", "not", "respond", "in", "time", "NUMBER", "InternalServerErrorResponse", "description", "InternalServerErrorResponse", "occur", "when", "a", "server", "has", "an", "unrecoverable", "error", "NUMBER", "NoContentResponse", "description", "NoContentResponse", "occur", "when", "a", "resource", "be", "delete", "NUMBER", "NotFoundResponse", "description", "NotFoundResponse", "occur", "when", "a", "service", "can", "not", "locate", "a", "request", "resource", "NUMBER", "ServiceUnavailableResponse", "description", "ServiceUnavailableResponse", "occur", "when", "a", "service", "be", "unavailable", "to", "take", "request", "NUMBER", "UnauthorizedResponse", "description", "UnauthorizedResponse", "occur", "when", "a", "request", "can", "not", "be", "authenticated", "NUMBER", "UnprocessableEntityResponse", "description", "UnprocessableEntityResponse", "occur", "when", "a", "request", "body", "has", "NUMBER", "invalid", "values", "NUMBER", "UnsupportedMediaTypeResponse", "description", "UnsupportedMediaTypeResponse", "occur", "when", "the", "Content", "Type", "be", "not", "support", "NUMBER", "Unfortunately", "the", "code", "isn", "t", "open", "source", "NUMBER", "I", "can", "come", "up", "with", "some", "example", "code", "that", "reproduces", "though", "NUMBER", "Problem", "statement", "Some", "alphabet", "could", "not", "be", "use", "as", "field", "in", "object", "definitions", "properties", "NUMBER", "Steps", "to", "reproduce", "I", "tried", "to", "make", "a", "object", "in", "definition", "section", "in", "swagger", "NUMBER", "yml", "like", "this", "yaml", "definitions", "key", "description", "key", "content", "properties", "kty", "description", "type", "type", "string", "e", "description", "key", "type", "string", "use", "description", "sign", "type", "string", "alg", "description", "algorithm", "type", "string", "n", "description", "key", "type", "string", "But", "it", "report", "error", "when", "validate", "the", "swagger", "NUMBER", "yml", "swagger", "validate", "NUMBER", "swagger", "user_service", "NUMBER", "yml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "types", "don", "t", "match", "expect", "map", "key", "string", "or", "int", "get", "bool", "make", "swagger", "validate", "Error", "NUMBER", "After", "I", "remove", "the", "n", "description", "key", "type", "string", "Then", "there", "be", "no", "error", "NUMBER", "Some", "alphabets", "works", "some", "not", "NUMBER", "Interpreting", "the", "map", "keys", "y", "and", "n", "as", "boolean", "values", "be", "not", "intended", "behavior", "for", "YAML", "NUMBER", "This", "be", "a", "bug", "in", "the", "YAML", "parser", "that", "go", "swagger", "uses", "NUMBER", "For", "comparison", "try", "use", "this", "online", "YAML", "parser", "with", "map", "keys", "like", "n", "and", "y", "LINK", "online", "parser", "NUMBER", "appspot", "NUMBER", "com", "Edit", "I", "want", "to", "apologize", "I", "think", "I", "misinterpreted", "YAML", "s", "behavior", "in", "this", "respect", "NUMBER", "I", "also", "want", "to", "point", "out", "I", "think", "it", "be", "misleading", "to", "include", "this", "bug", "in", "the", "list", "of", "fix", "bug", "in", "the", "release", "note", "for", "go", "swagger", "version", "NUMBER", "I", "came", "to", "look", "for", "a", "new", "release", "because", "I", "encountered", "the", "same", "issue", "NUMBER", "I", "saw", "that", "note", "saying", "that", "the", "issue", "was", "fix", "NUMBER", "Then", "I", "was", "confused", "when", "my", "problem", "persisted", "even", "after", "update", "NUMBER", "Problem", "statement", "I", "want", "a", "different", "name", "in", "json", "as", "in", "go", "the", "web", "developer", "keep", "request", "name", "change", "and", "I", "don", "t", "want", "to", "change", "my", "go", "code", "each", "time", "NUMBER", "I", "tried", "to", "use", "x", "go", "name", "which", "seems", "the", "way", "to", "do", "this", "NUMBER", "In", "a", "relate", "note", "when", "I", "want", "to", "get", "rid", "of", "omittempty", "I", "seem", "to", "need", "to", "add", "x", "nullable", "false", "and", "make", "it", "required", "NUMBER", "Here", "I", "really", "want", "to", "return", "NUMBER", "rather", "than", "omit", "it", "NUMBER", "Is", "there", "some", "easier", "way", "to", "do", "this", "Swagger", "specification", "ViewWindow", "title", "The", "view", "window", "as", "two", "rotational", "angles", "and", "the", "field", "of", "view", "open", "type", "object", "properties", "yaw", "type", "number", "description", "horizontal", "rotation", "in", "radians", "example", "NUMBER", "x", "nullable", "false", "pitch", "type", "number", "description", "vertical", "rotation", "in", "radians", "example", "NUMBER", "x", "nullable", "false", "field_of_view", "type", "number", "description", "field", "of", "view", "in", "radians", "NUMBER", "zoom", "example", "NUMBER", "x", "nullable", "false", "x", "go", "name", "Fov", "required", "yaw", "pitch", "field_of_view", "Go", "Code", "ViewWindow", "The", "view", "window", "as", "two", "rotational", "angles", "and", "the", "field", "of", "view", "open", "swagger", "model", "ViewWindow", "type", "ViewWindow", "struct", "field", "of", "view", "in", "radians", "NUMBER", "zoom", "Required", "true", "FieldOfView", "float", "NUMBER", "json", "field_of_view", "vertical", "rotation", "in", "radians", "Required", "true", "Pitch", "float", "NUMBER", "json", "pitch", "horizontal", "rotation", "in", "radians", "Required", "true", "Yaw", "float", "NUMBER", "json", "yaw", "Steps", "to", "reproduce", "Ran", "this", "with", "the", "most", "recent", "master", "commit", "NUMBER", "c", "NUMBER", "f", "First", "commit", "makes", "format", "error", "fatal", "NUMBER", "Previously", "if", "there", "was", "an", "error", "here", "it", "would", "print", "a", "warning", "which", "was", "very", "easy", "to", "miss", "because", "it", "s", "just", "one", "line", "in", "a", "lot", "of", "text", "and", "not", "write", "anything", "to", "the", "file", "because", "formatted", "was", "the", "empty", "string", "NUMBER", "With", "this", "change", "the", "unformatted", "content", "be", "write", "to", "the", "file", "for", "debugging", "purposes", "and", "the", "generation", "exits", "immediately", "since", "the", "output", "be", "invalid", "NUMBER", "Second", "and", "third", "commit", "change", "from", "style", "comments", "to", "single", "line", "comments", "which", "be", "the", "go", "convention", "NUMBER", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "decrease", "coverage", "by", "NUMBER", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "a", "NUMBER", "ea", "NUMBER", "f", "NUMBER", "a", "NUMBER", "b", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "a", "NUMBER", "ea", "NUMBER", "f", "NUMBER", "c", "NUMBER", "ab", "NUMBER", "dde", "NUMBER", "e", "NUMBER", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "ff", "NUMBER", "a", "NUMBER", "f", "NUMBER", "ecc", "NUMBER", "f", "NUMBER", "fb", "NUMBER", "c", "NUMBER", "fa", "NUMBER", "src", "pr", "of", "properties", "when", "allOf", "be", "exists", "in", "the", "struct", "example", "go", "type", "EmbeddedModel", "struct", "Field", "string", "json", "field", "type", "AllOfStruct", "struct", "swagger", "allOf", "EmbeddedModel", "the", "result", "gonna", "be", "json", "AllOfStruct", "allOf", "type", "object", "properties", "field", "type", "string", "x", "go", "name", "Field", "type", "object", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "decrease", "coverage", "by", "NUMBER", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "f", "NUMBER", "b", "NUMBER", "a", "NUMBER", "eb", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "f", "NUMBER", "b", "NUMBER", "a", "NUMBER", "f", "NUMBER", "ed", "NUMBER", "ec", "NUMBER", "fee", "NUMBER", "ec", "NUMBER", "a", "NUMBER", "de", "NUMBER", "e", "NUMBER", "f", "NUMBER", "eb", "NUMBER", "e", "NUMBER", "ab", "NUMBER", "f", "NUMBER", "d", "NUMBER", "eb", "NUMBER", "f", "NUMBER", "eca", "NUMBER", "src", "pr", "This", "change", "generates", "constants", "for", "string", "enum", "model", "properties", "NUMBER", "E", "NUMBER", "g", "NUMBER", "for", "this", "model", "definition", "yaml", "definitions", "Book", "type", "object", "properties", "genre", "type", "string", "enum", "scifi", "mystery", "horror", "you", "get", "go", "const", "BookGenreScifi", "string", "scifi", "BookGenreMystery", "string", "mystery", "BookGenreHorror", "string", "horror", "similar", "in", "spirit", "to", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "not", "change", "coverage", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "NUMBER", "da", "NUMBER", "f", "NUMBER", "a", "LINK", "swagger", "go", "swagger", "compare", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "eb", "NUMBER", "a", "NUMBER", "f", "NUMBER", "b", "NUMBER", "e", "NUMBER", "da", "NUMBER", "f", "NUMBER", "a", "NUMBER", "bbc", "NUMBER", "a", "NUMBER", "db", "NUMBER", "c", "NUMBER", "bc", "NUMBER", "d", "NUMBER", "be", "NUMBER", "b", "NUMBER", "src", "pr", "Problem", "statement", "I", "be", "trying", "to", "configure", "the", "TLS", "from", "within", "the", "code", "NUMBER", "Do", "not", "want", "to", "pass", "the", "TLSCertificate", "nor", "the", "TLSCertificateKey", "on", "the", "command", "line", "NUMBER", "We", "have", "a", "secrets", "server", "that", "we", "have", "to", "talk", "to", "to", "get", "the", "TLS", "information", "NUMBER", "So", "I", "tried", "to", "accomplish", "this", "use", "the", "configureTLS", "function", "but", "several", "error", "were", "observed", "NUMBER", "All", "error", "cause", "me", "to", "make", "change", "to", "the", "server", "NUMBER", "go", "code", "which", "gets", "automatically", "generate", "NUMBER", "In", "my", "generate", "server", "NUMBER", "go", "code", "in", "the", "Listen", "function", "I", "had", "to", "remove", "the", "first", "if", "s", "NUMBER", "hasScheme", "schemeHTTPS", "block", "because", "it", "be", "checking", "for", "the", "required", "command", "line", "flags", "tls", "certificate", "and", "tls", "key", "NUMBER", "see", "attached", "file", "line", "NUMBER", "NUMBER", "In", "the", "Serve", "function", "after", "the", "configureTLS", "function", "call", "there", "be", "an", "err", "check", "that", "I", "also", "had", "to", "comment", "out", "NUMBER", "It", "was", "the", "error", "from", "trying", "to", "load", "the", "tls", "certificates", "from", "the", "command", "line", "NUMBER", "see", "attached", "file", "line", "NUMBER", "NUMBER", "I", "would", "like", "to", "be", "able", "to", "auto", "generate", "without", "fix", "the", "code", "for", "this", "situation", "NUMBER", "I", "attached", "the", "server", "NUMBER", "go", "file", "that", "was", "generate", "with", "my", "lines", "commented", "out", "for", "reference", "NUMBER", "server", "NUMBER", "go", "NUMBER", "txt", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "server", "NUMBER", "go", "NUMBER", "txt", "It", "was", "the", "docker", "from", "quay", "NUMBER", "io", "goswagger", "swagger", "dev", "from", "NUMBER", "weeks", "ago", "NUMBER", "It", "looks", "like", "it", "has", "be", "update", "recently", "but", "I", "have", "not", "update", "it", "yet", "NUMBER", "Fixes", "NUMBER", "add", "skip", "validator", "to", "swagger", "generate", "operation", "so", "that", "models", "can", "be", "generate", "without", "validation", "fix", "a", "bug", "where", "anonymous", "response", "objects", "were", "created", "with", "a", "suffix", "of", "BodyBody", "NUMBER", "Now", "only", "one", "Body", "as", "appended", "add", "support", "for", "setting", "the", "name", "of", "an", "anonymous", "schema", "from", "the", "title", "If", "any", "of", "this", "be", "controversial", "I", "d", "be", "happy", "to", "split", "it", "into", "a", "separate", "PR", "to", "get", "the", "rest", "merge", "NUMBER", "Current", "coverage", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "be", "NUMBER", "diff", "NUMBER", "Merging", "NUMBER", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "src", "pr", "into", "master", "LINK", "swagger", "go", "swagger", "branch", "master", "src", "pr", "will", "not", "change", "coverage", "diff", "master", "NUMBER", "diff", "Files", "NUMBER", "NUMBER", "Lines", "NUMBER", "NUMBER", "Methods", "NUMBER", "NUMBER", "Messages", "NUMBER", "NUMBER", "Branches", "NUMBER", "NUMBER", "Hits", "NUMBER", "NUMBER", "Misses", "NUMBER", "NUMBER", "Partials", "NUMBER", "NUMBER", "Powered", "by", "Codecov", "LINK", "pr", "NUMBER", "Last", "update", "e", "NUMBER", "d", "NUMBER", "dfae", "NUMBER", "e", "NUMBER", "LINK", "swagger", "go", "swagger", "compare", "e", "NUMBER", "d", "NUMBER", "f", "NUMBER", "bde", "NUMBER", "fda", "NUMBER", "ba", "NUMBER", "e", "NUMBER", "dfae", "NUMBER", "e", "NUMBER", "ebd", "NUMBER", "bb", "NUMBER", "ae", "NUMBER", "fdabdaa", "NUMBER", "ed", "NUMBER", "f", "NUMBER", "c", "NUMBER", "a", "NUMBER", "src", "pr", "Problem", "statement", "I", "can", "t", "install", "swagger", "command", "in", "Go", "NUMBER", "Have", "you", "switched", "to", "NUMBER", "completely", "without", "backward", "compatibility", "Steps", "to", "reproduce", "go", "version", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "go", "get", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "package", "context", "unrecognized", "import", "path", "context", "import", "path", "do", "not", "begin", "with", "hostname", "I", "think", "I", "m", "still", "seeing", "this", "issue", "after", "update", "go", "swagger", "NUMBER", "Error", "when", "I", "try", "to", "build", "the", "client", "gen", "go", "client", "user_search", "find_users_parameters", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "context", "in", "any", "of", "NUMBER", "Here", "s", "what", "the", "imports", "in", "the", "generate", "find_users_parameters", "NUMBER", "go", "look", "like", "go", "import", "context", "TAG", "TAG", "Response", "NUMBER", "Do", "you", "think", "there", "be", "value", "in", "this", "or", "be", "there", "some", "easier", "way", "to", "work", "with", "inline", "schemas", "Ah", "perfect", "I", "ll", "try", "it", "out", "thanks", "generate", "operation", "be", "looking", "promising", "NUMBER", "I", "think", "I", "need", "to", "add", "a", "skip", "validator", "to", "match", "generate", "model", "NUMBER", "The", "model", "name", "be", "a", "bit", "unfortunate", "ex", "VolumesListOKBodyBody", "Something", "like", "VolumeListOkResponseBody", "would", "be", "a", "lot", "nicer", "NUMBER", "I", "haven", "t", "had", "a", "chance", "to", "look", "into", "why", "the", "name", "be", "that", "way", "NUMBER", "Looking", "at", "generator", "types", "NUMBER", "go", "it", "seems", "like", "there", "be", "no", "way", "to", "force", "go", "swagger", "to", "generate", "a", "model", "that", "uses", "golang", "type", "int", "NUMBER", "It", "defaults", "to", "int", "NUMBER", "and", "I", "can", "t", "find", "a", "format", "that", "will", "give", "me", "int", "NUMBER", "Is", "this", "by", "design", "or", "did", "I", "miss", "something", "I", "think", "I", "might", "opt", "for", "use", "more", "explicit", "types", "for", "now", "NUMBER", "I", "ll", "close", "this", "issue", "until", "I", "run", "into", "a", "case", "where", "it", "s", "not", "work", "well", "NUMBER", "To", "be", "honest", "this", "be", "not", "so", "user", "friendly", "NUMBER", "I", "think", "it", "might", "be", "some", "kind", "of", "against", "other", "thing", "s", "design", "NUMBER", "Could", "you", "give", "me", "some", "guidance", "that", "how", "to", "A", "good", "way", "to", "enable", "just", "int", "be", "perhaps", "through", "provide", "a", "flag", "casualjim", "Thanks", "a", "lot", "NUMBER", "Starts", "to", "implement", "NUMBER", "Ah", "that", "s", "what", "I", "was", "miss", "thanks", "Fixing", "schema", "scan", "for", "case", "when", "Embedded", "struct", "has", "tag", "json", "go", "type", "Error", "struct", "Code", "string", "Header", "http", "NUMBER", "Header", "type", "EmbeddedModel", "struct", "Field", "string", "json", "field", "Error", "json", "swagger", "model", "SuccessAllOfResponse", "type", "SuccessAllOfResponse", "struct", "swagger", "allOf", "EmbeddedModel", "Error", "json", "Example", "URL", "LINK", "swagger", "issue", "commit", "NUMBER", "ad", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "b", "NUMBER", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "b", "NUMBER", "c", "casualjim", "when", "you", "could", "merge", "it", "NUMBER", "Problem", "statement", "Hi", "Maybe", "this", "question", "should", "point", "to", "openapi", "or", "mgo", "but", "I", "still", "want", "to", "share", "this", "question", "maybe", "could", "get", "some", "ideas", "NUMBER", "As", "I", "use", "mgo", "for", "Mongo", "driver", "thus", "I", "defined", "the", "swagger", "model", "as", "yml", "NUMBER", "definitions", "myitem", "type", "object", "properties", "inserttime", "type", "string", "format", "date", "time", "Thus", "in", "go", "swagger", "I", "get", "go", "Inserttime", "strfmt", "NUMBER", "DateTime", "json", "inserttime", "omitempty", "When", "I", "get", "mongo", "result", "by", "model", "generate", "by", "swagger", "then", "the", "time", "be", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "But", "when", "I", "change", "the", "model", "to", "go", "Inserttime", "time", "NUMBER", "Time", "json", "inserttime", "omitempty", "Then", "I", "get", "time", "be", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Then", "I", "see", "the", "definition", "of", "strfmt", "NUMBER", "DateTime", "defined", "as", "go", "type", "DateTime", "time", "NUMBER", "Time", "So", "I", "m", "very", "confused", "NUMBER", "why", "it", "doesn", "t", "work", "with", "strfmt", "NUMBER", "DateTime", "Any", "idea", "Thanks", "a", "lot", "I", "read", "the", "source", "code", "of", "mgo", "I", "find", "the", "reason", "in", "mgo", "NUMBER", "v", "NUMBER", "it", "detect", "the", "type", "of", "time", "by", "go", "typeTime", "reflect", "NUMBER", "TypeOf", "time", "NUMBER", "Time", "typeTime", "value", "be", "time", "NUMBER", "Time", "And", "I", "try", "to", "get", "the", "type", "of", "strfmt", "NUMBER", "DateTime", "go", "fmt", "NUMBER", "Print", "reflect", "NUMBER", "TypeOf", "item", "NUMBER", "Inserttime", "print", "out", "strfmt", "NUMBER", "DateTime", "Thus", "mgo", "NUMBER", "v", "NUMBER", "cannot", "compatible", "with", "openapi", "and", "then", "it", "cannot", "compatible", "with", "swagger", "casualjim", "Coool", "I", "try", "to", "do", "that", "if", "it", "works", "I", "will", "put", "source", "code", "and", "share", "with", "others", "Here", "be", "my", "SetBSON", "cause", "currently", "I", "don", "t", "have", "any", "test", "case", "for", "GetJSON", "so", "I", "just", "put", "first", "part", "of", "code", "here", "after", "I", "finish", "it", "I", "will", "create", "a", "PR", "for", "go", "openapi", "please", "review", "casualjim", "go", "package", "strfmt", "import", "NUMBER", "gopkg", "NUMBER", "in", "mgo", "NUMBER", "v", "NUMBER", "bson", "func", "t", "DateTime", "SetBSON", "raw", "bson", "NUMBER", "Raw", "error", "if", "len", "raw", "NUMBER", "Data", "TAG", "cmd", "on", "frontiers", "server", "Don", "t", "forget", "to", "also", "re", "generate", "the", "relevant", "output", "swagger", "generate", "args", "NUMBER", "after", "run", "go", "get", "u", "github", "NUMBER", "com", "go", "openapi", "runtime", "NUMBER", "daved", "Does", "not", "seem", "to", "work", "for", "me", "NUMBER", "Still", "get", "swag", "NUMBER", "IsZero", "undefined", "NUMBER", "For", "me", "this", "be", "still", "a", "problem", "NUMBER", "I", "m", "starting", "out", "with", "an", "empty", "GOPATH", "and", "a", "the", "swagger", "NUMBER", "binary", "NUMBER", "Following", "the", "simple", "server", "tutorial", "I", "generate", "the", "swagger", "NUMBER", "yml", "with", "swagger", "init", "spec", "title", "A", "To", "Do", "list", "application", "description", "The", "product", "of", "a", "tutorial", "on", "goswagger", "NUMBER", "io", "version", "NUMBER", "scheme", "http", "consumes", "application", "io", "NUMBER", "goswagger", "NUMBER", "examples", "NUMBER", "todo", "list", "NUMBER", "v", "NUMBER", "json", "produces", "application", "io", "NUMBER", "goswagger", "NUMBER", "examples", "NUMBER", "todo", "list", "NUMBER", "v", "NUMBER", "json", "Which", "finishes", "with", "the", "message", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "github", "NUMBER", "com", "go", "openapi", "runtime", "github", "NUMBER", "com", "tylerb", "graceful", "github", "NUMBER", "com", "jessevdk", "go", "flags", "golang", "NUMBER", "org", "x", "net", "context", "I", "go", "get", "u", "those", "and", "add", "a", "simple", "hello", "world", "get", "handler", "that", "returns", "a", "string", "and", "NUMBER", "to", "the", "swagger", "spec", "NUMBER", "Then", "I", "try", "to", "build", "the", "server", "with", "go", "build", "v", "cmd", "a", "to", "do", "list", "application", "server", "main", "NUMBER", "go", "NUMBER", "It", "failes", "on", "miss", "package", "github", "NUMBER", "com", "go", "openapi", "analysis", "github", "NUMBER", "com", "go", "openapi", "loads", "github", "NUMBER", "com", "go", "openapi", "spec", "github", "NUMBER", "com", "go", "openapi", "validate", "github", "NUMBER", "com", "gorilla", "context", "After", "installing", "those", "I", "try", "to", "compile", "again", "and", "finally", "get", "the", "message", "this", "issue", "be", "build", "on", "bash", "rio", "ravage", "testserver", "go", "build", "v", "cmd", "a", "to", "do", "list", "application", "server", "main", "NUMBER", "go", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "denco", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "header", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "untyped", "github", "NUMBER", "com", "go", "openapi", "runtime", "security", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "testserver", "restapi", "operations", "testserver", "restapi", "operations", "restapi", "operations", "a_to_do_list_application_api", "NUMBER", "go", "NUMBER", "undefined", "swag", "in", "swag", "NUMBER", "CommandLineOptionsGroup", "Running", "swagger", "generate", "server", "spec", "swagger", "NUMBER", "yml", "again", "will", "fix", "this", "with", "this", "diff", "diff", "diff", "git", "a", "restapi", "operations", "a_to_do_list_application_api", "NUMBER", "go", "b", "restapi", "operations", "a_to_do_list_application_api", "NUMBER", "go", "index", "NUMBER", "b", "NUMBER", "e", "NUMBER", "cc", "NUMBER", "a", "restapi", "operations", "a_to_do_list_application_api", "NUMBER", "go", "b", "restapi", "operations", "a_to_do_list_application_api", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "middleware", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "spec", "github", "NUMBER", "com", "go", "openapi", "spec", "strfmt", "github", "NUMBER", "com", "go", "openapi", "strfmt", "github", "NUMBER", "com", "go", "openapi", "swag", "NewAToDoListApplicationAPI", "creates", "a", "new", "AToDoListApplication", "instance", "diff", "git", "a", "restapi", "operations", "get_parameters", "NUMBER", "go", "b", "restapi", "operations", "get_parameters", "NUMBER", "go", "index", "NUMBER", "a", "NUMBER", "c", "NUMBER", "e", "NUMBER", "NUMBER", "a", "restapi", "operations", "get_parameters", "NUMBER", "go", "b", "restapi", "operations", "get_parameters", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "net", "http", "github", "NUMBER", "com", "go", "openapi", "error", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "NewGetParams", "creates", "a", "new", "GetParams", "object", "diff", "git", "a", "restapi", "server", "NUMBER", "go", "b", "restapi", "server", "NUMBER", "go", "index", "NUMBER", "a", "NUMBER", "a", "NUMBER", "af", "NUMBER", "NUMBER", "a", "restapi", "server", "NUMBER", "go", "b", "restapi", "server", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "sync", "time", "github", "NUMBER", "com", "go", "openapi", "swag", "flags", "github", "NUMBER", "com", "jessevdk", "go", "flags", "graceful", "github", "NUMBER", "com", "tylerb", "graceful", "So", "it", "do", "seem", "the", "swag", "and", "middleware", "import", "be", "not", "come", "through", "on", "first", "generation", "NUMBER", "Also", "the", "first", "generation", "message", "be", "miss", "some", "package", "NUMBER", "Rio", "this", "seems", "to", "be", "recently", "fix", "via", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "and", "possible", "others", "NUMBER", "Could", "you", "please", "confirm", "I", "test", "it", "myself", "use", "your", "reproduce", "steps", "and", "it", "works", "for", "me", "once", "I", "get", "all", "the", "dependencies", "via", "go", "get", "NUMBER", "Note", "the", "For", "this", "generation", "to", "compile", "you", "need", "to", "have", "some", "package", "in", "your", "GOPATH", "message", "be", "incomplete", "as", "I", "also", "had", "to", "go", "get", "the", "following", "package", "github", "NUMBER", "com", "docker", "go", "units", "github", "NUMBER", "com", "go", "openapi", "analysis", "github", "NUMBER", "com", "go", "openapi", "loads", "github", "NUMBER", "com", "go", "openapi", "spec", "github", "NUMBER", "com", "go", "openapi", "validate", "github", "NUMBER", "com", "gorilla", "context", "I", "think", "if", "you", "start", "with", "github", "NUMBER", "com", "go", "openapi", "validate", "it", "gets", "the", "rest", "of", "the", "ones", "that", "you", "need", "NUMBER", "I", "remember", "talking", "to", "casualjim", "about", "this", "and", "if", "I", "remember", "correctly", "he", "was", "surprised", "that", "go", "openapi", "runtime", "didn", "t", "pull", "in", "go", "openapi", "validate", "NUMBER", "it", "s", "not", "solve", "for", "me", "NUMBER", "I", "still", "need", "to", "do", "another", "swagger", "generate", "to", "get", "the", "proper", "imports", "set", "NUMBER", "I", "ve", "even", "get", "one", "extra", "that", "s", "miss", "restapi", "operations", "get_parameters", "NUMBER", "go", "NUMBER", "undefined", "middleware", "in", "middleware", "NUMBER", "MatchedRoute", "restapi", "operations", "todo_list_api", "NUMBER", "go", "NUMBER", "undefined", "swag", "in", "swag", "NUMBER", "CommandLineOptionsGroup", "Swagger", "specification", "latest", "Swagger", "NUMBER", "from", "master", "build", "with", "src", "I", "d", "like", "to", "know", "how", "to", "set", "global", "header", "of", "the", "server", "cause", "in", "Swagger", "UI", "i", "get", "Can", "t", "read", "from", "server", "NUMBER", "It", "may", "not", "have", "the", "appropriate", "access", "control", "origin", "settings", "NUMBER", "Thanks", "a", "lot", "This", "be", "what", "I", "had", "to", "do", "to", "make", "the", "api", "client", "work", "go", "package", "main", "import", "fmt", "log", "github", "NUMBER", "com", "org", "project", "pkg", "api", "client", "client", "repositories", "github", "NUMBER", "com", "go", "openapi", "strfmt", "apiclient", "github", "NUMBER", "com", "org", "project", "pkg", "api", "client", "client", "httptransport", "github", "NUMBER", "com", "go", "openapi", "runtime", "client", "func", "main", "runtime", "httptransport", "NUMBER", "New", "NUMBER", "string", "https", "runtime", "NUMBER", "DefaultAuthentication", "httptransport", "NUMBER", "APIKeyAuth", "cookie", "header", "session", "blah", "csrftoken", "blah", "client", "apiclient", "NUMBER", "New", "runtime", "strfmt", "NUMBER", "Default", "resp", "err", "client", "NUMBER", "Repositories", "NUMBER", "ListRepositories", "repositories", "NUMBER", "NewListRepositoriesParams", "if", "err", "nil", "log", "NUMBER", "Fatal", "err", "fmt", "NUMBER", "Printf", "v", "n", "resp", "NUMBER", "Payload", "I", "run", "into", "NUMBER", "big", "issue", "NUMBER", "The", "auth", "works", "completely", "differently", "from", "what", "s", "documented", "NUMBER", "NUMBER", "Initially", "I", "tried", "to", "create", "the", "params", "object", "manually", "and", "that", "set", "the", "timeout", "to", "NUMBER", "and", "cause", "every", "request", "to", "fail", "immediately", "and", "mysteriously", "with", "a", "deadline", "exceeded", "error", "NUMBER", "Edit", "I", "was", "use", "the", "NUMBER", "image", "NUMBER", "Maybe", "things", "change", "since", "NUMBER", "I", "run", "into", "the", "deadline", "exceeded", "error", "bug", "for", "the", "same", "reason", "NUMBER", "Maybe", "it", "be", "a", "way", "to", "go", "now", "but", "it", "breaks", "all", "our", "code", "NUMBER", "Basically", "it", "always", "generates", "pointers", "even", "if", "property", "be", "required", "NUMBER", "Note", "how", "Code", "field", "be", "generate", "NUMBER", "In", "NUMBER", "it", "be", "an", "int", "while", "NUMBER", "generates", "pointer", "there", "NUMBER", "cat", "tmp", "swag", "NUMBER", "json", "swagger", "NUMBER", "info", "title", "Borked", "definitions", "Error", "type", "object", "properties", "code", "type", "integer", "message", "type", "string", "required", "code", "message", "NUMBER", "env", "GOPATH", "tmp", "opt", "swagger", "NUMBER", "swagger_linux_amd", "NUMBER", "generate", "client", "f", "tmp", "swag", "NUMBER", "json", "t", "tmp", "src", "NUMBER", "cat", "tmp", "src", "models", "error", "NUMBER", "go", "head", "NUMBER", "package", "models", "This", "file", "was", "generate", "by", "the", "swagger", "tool", "NUMBER", "Editing", "this", "file", "might", "prove", "futile", "when", "you", "re", "run", "the", "swagger", "generate", "command", "import", "strfmt", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "error", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "validate", "Error", "error", "swagger", "model", "Error", "type", "Error", "struct", "code", "Required", "true", "Code", "int", "NUMBER", "json", "code", "message", "Required", "true", "Message", "string", "json", "message", "Validate", "validates", "this", "error", "NUMBER", "env", "GOPATH", "tmp", "opt", "swagger", "NUMBER", "swagger_linux_amd", "NUMBER", "generate", "client", "f", "tmp", "swag", "NUMBER", "json", "t", "tmp", "src", "NUMBER", "cat", "tmp", "src", "models", "error", "NUMBER", "go", "head", "NUMBER", "package", "models", "This", "file", "was", "generate", "by", "the", "swagger", "tool", "NUMBER", "Editing", "this", "file", "might", "prove", "futile", "when", "you", "re", "run", "the", "swagger", "generate", "command", "import", "strfmt", "github", "NUMBER", "com", "go", "openapi", "strfmt", "github", "NUMBER", "com", "go", "openapi", "error", "github", "NUMBER", "com", "go", "openapi", "validate", "Error", "error", "swagger", "model", "Error", "type", "Error", "struct", "code", "Required", "true", "Code", "int", "NUMBER", "json", "code", "message", "Required", "true", "Message", "string", "json", "message", "Validate", "validates", "this", "error", "It", "breaks", "everything", "but", "I", "couldn", "t", "find", "any", "BREAKING", "change", "for", "NUMBER", "Probably", "you", "should", "regenerate", "all", "examples", "revisit", "all", "docs", "and", "tutorials", "as", "they", "be", "simply", "broken", "now", "NUMBER", "I", "mean", "this", "project", "be", "all", "about", "generating", "code", "NUMBER", "This", "release", "breaks", "this", "very", "thing", "for", "any", "exist", "code", "NUMBER", "casualjim", "no", "x", "nullable", "doesn", "t", "help", "as", "if", "say", "int", "NUMBER", "field", "be", "set", "to", "NUMBER", "then", "server", "code", "still", "treats", "it", "as", "a", "miss", "value", "NUMBER", "Sure", "this", "happens", "before", "NUMBER", "value", "be", "the", "zero", "value", "for", "int", "NUMBER", "type", "NUMBER", "This", "be", "a", "problematic", "part", "here", "NUMBER", "If", "value", "be", "a", "required", "property", "the", "only", "thing", "you", "can", "do", "be", "to", "have", "a", "pointer", "NUMBER", "I", "really", "understand", "your", "problem", "I", "went", "through", "this", "suffering", "too", "NUMBER", "It", "broke", "many", "things", "on", "my", "side", "as", "well", "but", "it", "be", "not", "as", "critical", "as", "it", "could", "be", "NUMBER", "It", "just", "took", "NUMBER", "hours", "for", "me", "to", "update", "all", "projects", "to", "handle", "this", "change", "gracefully", "NUMBER", "Yes", "access", "values", "like", "v", "looks", "very", "ugly", "but", "this", "be", "necessary", "evil", "to", "make", "things", "right", "NUMBER", "Also", "this", "change", "will", "be", "very", "helpful", "when", "swagger", "switch", "over", "to", "the", "bitset", "for", "indication", "if", "the", "value", "be", "nil", "and", "set", "NUMBER", "You", "practically", "will", "just", "need", "to", "change", "v", "nil", "to", "v", "NUMBER", "IsNil", "On", "Fri", "Sep", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Alexander", "Krasnukhin", "TAG", "write", "casualjim", "LINK", "no", "x", "nullable", "doesn", "t", "help", "as", "if", "say", "int", "NUMBER", "field", "be", "set", "to", "NUMBER", "then", "server", "code", "still", "treats", "it", "as", "a", "miss", "one", "NUMBER", "Sure", "this", "happens", "before", "NUMBER", "value", "be", "the", "zero", "value", "for", "int", "NUMBER", "type", "NUMBER", "You", "be", "receiving", "this", "because", "you", "be", "subscribed", "to", "this", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "issuecomment", "NUMBER", "or", "mute", "the", "thread", "LINK", "auth", "AEJjqw", "NUMBER", "xXHPj_XbERNtM", "NUMBER", "k", "NUMBER", "li", "NUMBER", "d", "NUMBER", "aEXks", "NUMBER", "ql_qTgaJpZM", "NUMBER", "Jy_Cl", "NUMBER", "vburenin", "meh", "I", "m", "ok", "to", "have", "zero", "values", "everywhere", "by", "default", "NUMBER", "I", "we", "have", "golang", "client", "talking", "to", "golang", "server", "NUMBER", "Having", "pointers", "makes", "it", "awkward", "on", "both", "sides", "NUMBER", "I", "close", "this", "issue", "as", "we", "decided", "to", "simple", "not", "upgrade", "NUMBER", "Doesn", "t", "worth", "the", "effort", "for", "us", "NUMBER", "LINK", "swagger", "go", "swagger", "release", "download", "NUMBER", "swagger_linux_amd", "NUMBER", "chmod", "x", "NUMBER", "swagger_linux_adm", "NUMBER", "NUMBER", "swagger_linux_amd", "NUMBER", "version", "NUMBER", "NUMBER", "gae", "NUMBER", "b", "Also", "get", "this", "even", "from", "master", "NUMBER", "This", "be", "really", "confusing", "NUMBER", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "version", "NUMBER", "NUMBER", "g", "NUMBER", "f", "NUMBER", "b", "NUMBER", "I", "have", "code", "like", "this", "type", "Weekday", "int", "type", "Parameters", "struct", "in", "query", "Day", "Weekday", "generate", "spec", "generates", "this", "json", "for", "parameter", "ref", "definitions", "Weekday", "x", "go", "name", "Day", "name", "Day", "in", "query", "what", "be", "invalid", "because", "query", "parameter", "can", "have", "one", "of", "predefined", "datatypes", "according", "to", "spec", "NUMBER", "Is", "it", "possible", "somehow", "to", "force", "go", "swagger", "to", "use", "custom", "parameter", "type", "for", "spec", "generation", "Like", "type", "Parameters", "struct", "in", "query", "type", "int", "minimum", "NUMBER", "maximum", "NUMBER", "Day", "Weekday", "Problem", "statement", "Latest", "release", "for", "swagger_linux_amd", "NUMBER", "do", "not", "match", "the", "master", "branch", "of", "go", "swagger", "NUMBER", "The", "release", "s", "version", "results", "to", "NUMBER", "however", "when", "doing", "a", "go", "install", "under", "the", "go", "swagger", "cmd", "swagger", "directory", "generates", "version", "NUMBER", "NUMBER", "gd", "NUMBER", "Steps", "to", "reproduce", "Generated", "a", "swagger", "client", "with", "swagger_linux_amd", "NUMBER", "Code", "which", "cause", "error", "go", "swagger", "response", "SuccessResponse", "type", "successResponseBody", "struct", "In", "body", "Body", "SuccessResponse", "swagger", "model", "SuccessResponse", "type", "SuccessResponse", "map", "string", "string", "type", "successData", "struct", "SuccessResponse", "example", "here", "LINK", "swagger", "issue", "Given", "the", "attached", "swagger", "the", "validator", "complains", "register", "NUMBER", "modifiedOn", "in", "body", "should", "match", "yyyy", "MM", "dd", "T", "HH", "mm", "ss", "NUMBER", "SSS", "Z", "both", "when", "the", "example", "be", "given", "as", "modifiedOn", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "or", "the", "correct", "one", "modifiedOn", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "DM", "NUMBER", "zip", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "DM", "NUMBER", "zip", "issue", "with", "parsing", "custom", "types", "for", "maps", "go", "type", "MapType", "map", "string", "string", "type", "MapTypeArr", "map", "string", "string", "type", "MyStruct", "struct", "Field", "MapType", "Field", "NUMBER", "MapTypeArr", "I", "have", "problem", "with", "write", "test", "for", "it", "fast", "just", "have", "to", "spend", "more", "time", "to", "understand", "what", "be", "going", "on", "there", "and", "create", "the", "test", "NUMBER", "Looks", "like", "there", "be", "one", "issue", "more", "but", "i", "didn", "t", "find", "it", "yet", "NUMBER", "example", "be", "here", "LINK", "swagger", "issue", "issue", "with", "parsing", "custom", "types", "for", "maps", "go", "type", "MapType", "map", "string", "string", "type", "MapTypeArr", "map", "string", "string", "type", "MyStruct", "struct", "Field", "MapType", "Field", "NUMBER", "MapTypeArr", "I", "have", "problem", "with", "write", "test", "for", "it", "fast", "just", "have", "to", "spend", "more", "time", "to", "understand", "what", "be", "going", "on", "there", "and", "create", "the", "test", "NUMBER", "Looks", "like", "there", "be", "one", "issue", "more", "but", "i", "didn", "t", "find", "it", "yet", "NUMBER", "example", "be", "here", "LINK", "swagger", "issue", "Swagger", "generates", "public", "SwaggerJSON", "variable", "in", "embedded_spec", "NUMBER", "go", "file", "NUMBER", "When", "I", "be", "run", "go", "doc", "on", "my", "package", "it", "dumps", "this", "big", "variable", "in", "binary", "format", "NUMBER", "Can", "you", "make", "the", "variable", "private", "and", "make", "a", "public", "method", "to", "access", "it", "Spec", "generation", "fail", "on", "Ubuntu", "after", "d", "NUMBER", "baca", "NUMBER", "e", "NUMBER", "ad", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "ed", "NUMBER", "Error", "message", "Failed", "to", "load", "template", "serverConfigureapi", "template", "serverConfigureapi", "NUMBER", "illegal", "number", "syntax", "It", "do", "NOT", "occur", "when", "run", "on", "Mac", "OS", "X", "but", "our", "CI", "build", "be", "on", "Ubuntu", "which", "start", "fail", "yesterday", "NUMBER", "Steps", "to", "reproduce", "This", "should", "be", "reproducible", "on", "any", "go", "application", "NUMBER", "If", "you", "need", "one", "grab", "the", "small", "sample", "project", "from", "LINK", "natraj", "go", "note", "and", "follow", "the", "standard", "setup", "instructions", "on", "the", "README", "NUMBER", "The", "error", "be", "easily", "seen", "when", "run", "NUMBER", "bin", "swagger", "generate", "spec", "input", "NUMBER", "swagger", "aux", "NUMBER", "json", "output", "NUMBER", "swagger", "NUMBER", "json", "base", "path", "NUMBER", "src", "note", "app", "I", "have", "forked", "the", "repo", "to", "LINK", "natraj", "go", "swagger", "and", "revert", "the", "aforementioned", "commit", "and", "the", "error", "message", "no", "longer", "occur", "NUMBER", "I", "believe", "that", "commit", "broke", "compatibility", "with", "go", "TAG", "So", "I", "think", "the", "intent", "be", "we", "don", "t", "want", "the", "spec", "to", "decide", "between", "https", "http", "or", "unix", "sockets", "NUMBER", "We", "want", "that", "to", "be", "decision", "that", "be", "made", "when", "we", "start", "the", "process", "of", "the", "server", "NUMBER", "Would", "you", "agree", "that", "that", "be", "the", "change", "you", "want", "preserved", "Yup", "that", "be", "exactly", "what", "I", "was", "looking", "for", "Problem", "statement", "if", "a", "parameter", "be", "set", "to", "type", "string", "format", "uuid", "required", "false", "go", "run", "gives", "this", "error", "_", "NUMBER", "cannot", "convert", "o", "NUMBER", "ID", "type", "strfmt", "NUMBER", "UUID", "to", "type", "string", "_", "NUMBER", "However", "if", "set", "the", "parameter", "to", "type", "string", "format", "uuid", "required", "true", "this", "issue", "be", "not", "observed", "NUMBER", "Problem", "statement", "I", "use", "swagger", "version", "NUMBER", "NUMBER", "g", "NUMBER", "c", "NUMBER", "cd", "and", "I", "update", "all", "my", "project", "dependencies", "go", "get", "t", "u", "NUMBER", "NUMBER", "NUMBER", "I", "m", "seeing", "the", "following", "error", "when", "trying", "to", "start", "my", "REST", "API", "server", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "router", "NUMBER", "go", "NUMBER", "cannot", "use", "parameters", "type", "map", "interface", "spec", "NUMBER", "Parameter", "as", "type", "map", "string", "spec", "NUMBER", "Parameter", "in", "field", "value", "NUMBER", "NUMBER", "NUMBER", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "router", "NUMBER", "go", "NUMBER", "cannot", "use", "parameters", "type", "map", "interface", "spec", "NUMBER", "Parameter", "as", "type", "map", "string", "spec", "NUMBER", "Parameter", "in", "argument", "to", "newUntypedRequestBinder", "Any", "ideas", "or", "maybe", "this", "be", "not", "relate", "to", "swagger", "Thanks", "for", "the", "quite", "reply", "NUMBER", "Not", "yet", "but", "I", "guess", "the", "time", "has", "come", "NUMBER", "Thanks", "that", "fix", "it", "NUMBER", "should", "be", "checking", "for", "length", "of", "string", "rather", "than", "arbitrarily", "trying", "to", "convert", "a", "string", "to", "an", "float", "NUMBER", "Problem", "statement", "Generated", "code", "validation", "when", "checking", "for", "max", "string", "length", "do", "not", "work", "NUMBER", "try", "casting", "to", "an", "int", "NUMBER", "rather", "than", "checking", "for", "the", "length", "of", "the", "string", "Swagger", "specification", "LINK", "NUMBER", "us", "west", "NUMBER", "elb", "NUMBER", "amazonaws", "NUMBER", "com", "v", "NUMBER", "swagger", "NUMBER", "json", "Steps", "to", "reproduce", "Generate", "the", "code", "with", "go", "swagger", "and", "look", "at", "models", "get_job", "NUMBER", "go", "line", "NUMBER", "When", "doing", "NUMBER", "body", "SomeResponse", "in", "responses", "SomeResponse", "won", "t", "get", "include", "in", "the", "definitions", "NUMBER", "Introduced", "by", "NUMBER", "Here", "s", "a", "broken", "test", "case", "to", "demonstrate", "LINK", "swagger", "commit", "NUMBER", "ae", "NUMBER", "fd", "NUMBER", "c", "NUMBER", "eb", "NUMBER", "c", "NUMBER", "eb", "NUMBER", "c", "NUMBER", "bc", "NUMBER", "d", "NUMBER", "Some", "digging", "through", "the", "code", "suggests", "that", "postDecls", "keep", "track", "of", "what", "be", "add", "to", "definitions", "through", "some", "kind", "of", "discovery", "process", "and", "when", "setOpResponses", "NUMBER", "Parse", "parses", "the", "responses", "it", "should", "do", "_something_", "with", "that", "NUMBER", "The", "discovery", "process", "be", "very", "tangled", "and", "undocumented", "though", "so", "I", "can", "t", "figure", "out", "what", "it", "should", "do", "so", "maybe", "this", "be", "more", "obvious", "to", "someone", "who", "knows", "how", "this", "bit", "of", "code", "works", "NUMBER", "Refer", "to", "LINK", "Response", "should", "be", "NUMBER", "SomeResponse", "Body", "be", "a", "tag", "that", "goes", "into", "a", "struct", "NUMBER", "I", "was", "facing", "the", "same", "issue", "but", "I", "find", "out", "this", "can", "be", "mitigated", "by", "setting", "scan", "models", "option", "to", "be", "true", "which", "force", "add", "the", "swagger", "annotated", "model", "into", "the", "swagger", "spec", "NUMBER", "And", "then", "the", "response", "will", "fail", "swagger", "check", "due", "to", "no", "description", "then", "have", "to", "add", "description", "part", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "validators", "NUMBER", "go", "L", "NUMBER", "Hope", "this", "response", "model", "bug", "can", "be", "fix", "soon", "If", "there", "be", "multiple", "package", "of", "the", "same", "name", "it", "might", "pick", "the", "wrong", "one", "NUMBER", "Pos", "will", "absolutely", "pick", "the", "correct", "file", "NUMBER", "This", "fix", "my", "app", "in", "NUMBER", "but", "it", "unfortunately", "breaks", "the", "test", "suite", "because", "gofile", "NUMBER", "Pos", "NUMBER", "fixture", "goparsing", "classification", "models", "nomodel", "NUMBER", "go", "be", "different", "to", "fil", "NUMBER", "Pos", "Users", "ben", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "fixture", "goparsing", "classification", "operations", "noparams", "NUMBER", "go", "NUMBER", "I", "m", "not", "sure", "why", "one", "be", "relative", "and", "one", "isn", "t", "and", "I", "copied", "the", "code", "from", "elsewhere", "in", "the", "file", "so", "I", "m", "not", "sure", "why", "this", "doesn", "t", "work", "NUMBER", "Any", "ideas", "Also", "not", "quite", "sure", "how", "to", "write", "a", "test", "for", "this", "because", "I", "think", "the", "behaviour", "be", "non", "deterministic", "depending", "on", "what", "order", "file", "be", "scanned", "NUMBER", "When", "this", "gonna", "be", "merge", "I", "faced", "same", "issue", "today", "and", "would", "like", "to", "have", "this", "asap", "Yes", "this", "fix", "my", "issue", "NUMBER", "I", "can", "do", "example", "how", "to", "reproduce", "it", "on", "Monday", "NUMBER", "It", "be", "very", "simple", "And", "yes", "looks", "like", "this", "change", "in", "scan", "package", "branch", "will", "fix", "same", "issue", "but", "in", "different", "way", "NUMBER", "LINK", "swagger", "issue", "here", "be", "how", "to", "reproduce", "it", "I", "meant", "scan", "package", "will", "fix", "this", "as", "well", "as", "this", "PR", "NUMBER", "Following", "on", "from", "NUMBER", "turns", "out", "this", "was", "do", "in", "NUMBER", "places", "so", "I", "ve", "yanked", "it", "out", "into", "its", "own", "parsing", "function", "and", "add", "more", "test", "for", "blank", "names", "in", "JSON", "tags", "NUMBER", "Looks", "like", "there", "s", "some", "more", "duplication", "and", "refactoring", "that", "can", "be", "do", "here", "but", "I", "suppose", "this", "be", "a", "good", "start", "NUMBER", "Problem", "statement", "I", "be", "seeing", "an", "issue", "when", "i", "have", "an", "interface", "in", "my", "struct", "that", "i", "be", "trying", "to", "annotate", "as", "a", "response", "in", "swagger", "NUMBER", "my", "code", "go", "Generic", "API", "response", "type", "swagger", "response", "APIResponse", "type", "Response", "struct", "status", "of", "the", "call", "Status", "string", "json", "status", "some", "data", "returned", "Data", "interface", "json", "data", "optional", "message", "Message", "string", "json", "message", "the", "generate", "swagger", "then", "ends", "up", "like", "below", "NUMBER", "notice", "the", "Data", "field", "be", "miss", "a", "type", "which", "makes", "the", "response", "invalid", "NUMBER", "yaml", "responses", "APIResponse", "description", "Generic", "API", "response", "type", "schema", "type", "object", "properties", "Status", "type", "string", "description", "status", "of", "the", "call", "Data", "description", "some", "data", "returned", "Message", "type", "string", "description", "optional", "message", "any", "idea", "why", "this", "might", "be", "happening", "Were", "you", "able", "to", "get", "around", "this", "Pardon", "my", "ignorance", "since", "I", "m", "new", "to", "both", "swagger", "AND", "go", "NUMBER", "I", "m", "not", "sure", "if", "I", "m", "understanding", "your", "last", "reply", "NUMBER", "I", "basically", "have", "the", "same", "issue", "as", "stated", "in", "the", "original", "post", "NUMBER", "I", "have", "a", "generic", "return", "struct", "defined", "as", "follows", "Go", "Generic", "API", "response", "swagger", "response", "defaultResponse", "type", "Response", "struct", "Status", "string", "json", "status", "Code", "int", "json", "code", "Can", "be", "a", "Foo", "or", "a", "Bar", "Data", "interface", "json", "data", "I", "also", "have", "several", "other", "types", "that", "get", "shoehorned", "into", "the", "Data", "slot", "NUMBER", "Here", "be", "two", "examples", "Go", "Some", "arbitrary", "data", "type", "swagger", "response", "type", "Foo", "struct", "Id", "string", "json", "Id", "Configs", "Baz", "json", "configs", "type", "Bar", "struct", "Id", "string", "json", "id", "type", "Baz", "struct", "Name", "string", "json", "name", "Is", "there", "a", "way", "to", "annotate", "this", "so", "as", "to", "generate", "valid", "swagger", "the", "swagger", "web", "editor", "be", "what", "I", "m", "use", "to", "validate", "the", "generate", "output", "NUMBER", "So", "I", "update", "my", "annotations", "like", "so", "and", "compiled", "with", "the", "scan", "models", "tag", "NUMBER", "Yay", "I", "have", "definitions", "now", "Go", "Generic", "API", "response", "swagger", "response", "defaultResponse", "type", "Response", "struct", "Status", "string", "json", "status", "Code", "int", "json", "code", "Can", "be", "a", "Foo", "or", "a", "Bar", "Data", "interface", "json", "data", "My", "Foo", "Struct", "swagger", "model", "type", "Foo", "struct", "Id", "string", "json", "Id", "Configs", "Baz", "json", "configs", "My", "Bar", "Struct", "swagger", "model", "type", "Bar", "struct", "Id", "string", "json", "id", "My", "Baz", "Struct", "swagger", "model", "type", "Baz", "struct", "Name", "string", "json", "name", "But", "I", "still", "don", "t", "know", "how", "to", "handle", "the", "inherent", "polymorphism", "of", "Data", "NUMBER", "This", "be", "likely", "a", "syntax", "fail", "on", "my", "part", "but", "let", "s", "say", "I", "have", "two", "routes", "The", "first", "route", "returns", "my", "generic", "response", "with", "a", "Bar", "in", "the", "Data", "field", "The", "second", "route", "returns", "the", "same", "generic", "response", "but", "with", "a", "Foo", "in", "the", "Data", "field", "It", "seems", "like", "I", "would", "want", "to", "define", "two", "Response", "sub", "types", "NUMBER", "One", "with", "Bar", "in", "the", "Data", "field", "and", "one", "with", "Baz", "NUMBER", "Is", "there", "a", "way", "to", "do", "this", "via", "annotation", "For", "example", "this", "should", "use", "the", "name", "Foo", "rather", "than", "the", "blank", "string", "Foo", "string", "json", "omitempty", "similar", "to", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "I", "was", "wondering", "how", "I", "would", "get", "the", "default", "response", "from", "the", "client", "NUMBER", "I", "have", "a", "spec", "like", "this", "yaml", "deploys", "deploy_id", "get", "operationId", "getDeploy", "parameters", "name", "deploy_id", "type", "string", "in", "path", "required", "true", "responses", "NUMBER", "description", "OK", "schema", "ref", "definitions", "deploy", "default", "description", "error", "schema", "ref", "definitions", "error", "Which", "generates", "two", "models", "GetDeployOK", "and", "GetDeployDefault", "NUMBER", "The", "API", "generate", "will", "return", "the", "OK", "case", "NUMBER", "go", "func", "a", "Client", "GetDeploy", "params", "GetDeployParams", "authInfo", "runtime", "NUMBER", "ClientAuthInfoWriter", "GetDeployOK", "error", "TODO", "Validate", "the", "params", "before", "sending", "if", "params", "nil", "params", "NewGetDeployParams", "result", "err", "a", "NUMBER", "transport", "NUMBER", "Submit", "runtime", "NUMBER", "ClientOperation", "ID", "getDeploy", "Method", "GET", "PathPattern", "deploys", "deploy_id", "ProducesMediaTypes", "string", "application", "json", "ConsumesMediaTypes", "string", "application", "json", "Schemes", "string", "https", "Params", "params", "Reader", "GetDeployReader", "formats", "a", "NUMBER", "formats", "AuthInfo", "authInfo", "if", "err", "nil", "return", "nil", "err", "return", "result", "NUMBER", "GetDeployOK", "nil", "Does", "that", "mean", "that", "if", "I", "get", "a", "non", "NUMBER", "xx", "response", "I", "should", "check", "the", "err", "to", "actually", "be", "the", "a", "GetDeployDefault", "reference", "go", "resp", "err", "c", "NUMBER", "Operations", "NUMBER", "GetDeploy", "params", "authInfo", "if", "err", "nil", "if", "casted", "ok", "err", "NUMBER", "models", "NUMBER", "GetDeployDefault", "ok", "do", "something", "here", "NUMBER", "else", "false", "err", "I", "was", "tracing", "through", "the", "code", "in", "Runtime", "NUMBER", "Submit", "and", "it", "delegates", "to", "the", "GetDeployReader", "NUMBER", "ReadResponse", "which", "makes", "the", "distinction", "NUMBER", "But", "it", "isn", "t", "clear", "in", "those", "how", "that", "response", "be", "actually", "surfaced", "NUMBER", "I", "have", "a", "piece", "of", "code", "which", "references", "an", "external", "struct", "import", "github", "NUMBER", "com", "docker", "go", "units", "NUMBER", "swagger", "model", "type", "Resources", "struct", "Ulimits", "units", "NUMBER", "Ulimit", "NUMBER", "And", "get", "this", "error", "when", "generating", "a", "spec", "unknown", "field", "type", "ele", "for", "Ulimits", "Is", "there", "a", "way", "to", "implicitly", "turn", "referenced", "types", "into", "Swagger", "models", "or", "do", "I", "have", "to", "copy", "them", "in", "my", "code", "and", "mark", "them", "as", "Swagger", "models", "Interesting", "so", "in", "theory", "this", "should", "work", "What", "do", "you", "mean", "by", "miss", "a", "case", "I", "thought", "I", "had", "to", "add", "swagger", "model", "to", "all", "of", "the", "types", "I", "want", "to", "be", "include", "but", "the", "documentation", "be", "ambiguous", "about", "this", "NUMBER", "Ah", "my", "mistake", "NUMBER", "This", "was", "actually", "parameters", "not", "a", "model", "and", "query", "parameters", "can", "only", "be", "lists", "of", "simple", "types", "not", "objects", "NUMBER", "A", "thought", "if", "this", "had", "be", "a", "better", "error", "message", "I", "could", "have", "fix", "this", "much", "quicker", "NUMBER", "Would", "it", "make", "sense", "to", "replace", "the", "error", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "parameters", "NUMBER", "go", "L", "NUMBER", "with", "something", "like", "You", "have", "use", "the", "type", "Ulimits", "in", "the", "response", "Resources", "but", "it", "be", "not", "support", "in", "responses", "NUMBER", "The", "support", "types", "be", "primitives", "e", "NUMBER", "g", "NUMBER", "string", "int", "X", "Y", "and", "Z", "NUMBER", "Or", "be", "there", "a", "better", "place", "to", "put", "this", "Opening", "again", "because", "I", "consider", "a", "bad", "error", "message", "to", "be", "a", "bug", "NUMBER", "The", "message", "introduce", "in", "NUMBER", "be", "cause", "pretty", "sporadic", "error", "message", "for", "me", "NUMBER", "Every", "time", "I", "run", "swagger", "generate", "spec", "I", "get", "different", "paths", "for", "the", "error", "package", "github", "NUMBER", "com", "coreos", "etcd", "pkg", "types", "error", "be", "unknown", "builtin", "Port", "package", "github", "NUMBER", "com", "docker", "containerd", "api", "grpc", "types", "error", "be", "unknown", "builtin", "Port", "NUMBER", "and", "so", "on", "NUMBER", "None", "of", "those", "package", "have", "anything", "to", "do", "with", "the", "type", "Port", "nor", "have", "any", "swagger", "definitions", "in", "them", "NUMBER", "I", "m", "run", "off", "master", "NUMBER", "LINK", "swagger", "specification", "LINK", "api", "tree", "add", "swagger", "annotations", "Note", "that", "it", "currently", "doesn", "t", "generate", "at", "all", "for", "reasons", "I", "can", "t", "figure", "out", "Port", "be", "defined", "as", "a", "model", "but", "it", "s", "still", "throw", "an", "error", "for", "some", "reason", "NUMBER", "I", "ve", "be", "run", "a", "version", "of", "go", "swagger", "which", "ignores", "unknown", "types", "to", "try", "and", "debug", "LINK", "swagger", "commit", "NUMBER", "acf", "NUMBER", "e", "NUMBER", "cd", "NUMBER", "a", "NUMBER", "f", "NUMBER", "fe", "NUMBER", "bec", "NUMBER", "c", "NUMBER", "b", "NUMBER", "f", "NUMBER", "This", "be", "quite", "hard", "to", "debug", "because", "the", "error", "seem", "somewhat", "non", "deterministic", "but", "it", "seems", "the", "object", "Port", "might", "incorrect", "in", "this", "error", "too", "NUMBER", "With", "that", "patch", "applied", "to", "ignore", "unknown", "types", "Port", "_sometimes_", "shows", "up", "in", "the", "output", "and", "_sometimes_", "doesn", "t", "NUMBER", "If", "I", "disable", "some", "of", "the", "more", "complex", "routes", "e", "NUMBER", "g", "NUMBER", "creating", "container", "then", "Port", "consistently", "shows", "up", "in", "the", "output", "NUMBER", "Perhaps", "there", "be", "an", "object", "that", "be", "cause", "the", "error", "that", "isn", "t", "actually", "mention", "in", "the", "error", "Perhaps", "file", "be", "get", "processed", "in", "a", "different", "order", "so", "Port", "sometimes", "gets", "processed", "before", "the", "object", "that", "be", "actually", "broken", "but", "sometimes", "doesn", "t", "Not", "sure", "NUMBER", "but", "might", "be", "a", "clue", "Fantastic", "thanks", "The", "root", "problem", "cause", "the", "error", "be", "NUMBER", "I", "believe", "NUMBER", "It", "also", "hints", "at", "the", "non", "deterministic", "nature", "of", "it", "NUMBER", "It", "s", "quite", "possible", "I", "m", "just", "doing", "something", "wrong", "but", "the", "error", "message", "isn", "t", "point", "me", "in", "the", "right", "place", "so", "it", "s", "very", "hard", "to", "figure", "out", "what", "be", "actually", "wrong", "NUMBER", "Docker", "s", "pretty", "hairy", "to", "build", "so", "perhaps", "this", "isn", "t", "the", "demonstration", "of", "the", "problem", "NUMBER", "I", "might", "try", "and", "build", "a", "smaller", "reproducible", "test", "case", "NUMBER", "If", "you", "want", "to", "dive", "further", "into", "this", "check", "out", "the", "branch", "above", "of", "both", "docker", "and", "engine", "api", "then", "this", "be", "the", "command", "I", "m", "run", "to", "get", "a", "build", "environment", "set", "up", "DOCKER_MOUNT", "v", "pwd", "go", "src", "github", "NUMBER", "com", "docker", "docker", "v", "pwd", "NUMBER", "engine", "api", "go", "src", "github", "NUMBER", "com", "docker", "engine", "api", "shell", "That", "build", "a", "container", "with", "all", "of", "the", "dependencies", "in", "there", "NUMBER", "To", "then", "build", "the", "swagger", "definition", "hack", "make", "NUMBER", "sh", "swagger", "I", "m", "run", "into", "a", "similar", "issue", "now", "with", "a", "different", "object", "unable", "to", "find", "NetworkCreate", "in", "github", "NUMBER", "com", "coreos", "etcd", "pkg", "types", "Here", "s", "the", "relevant", "code", "LINK", "api", "blob", "NUMBER", "b", "NUMBER", "ebf", "NUMBER", "c", "NUMBER", "c", "NUMBER", "b", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "bf", "NUMBER", "d", "NUMBER", "f", "NUMBER", "types", "types", "NUMBER", "go", "L", "NUMBER", "NetworkCreate", "be", "use", "in", "NetworkCreateRequest", "and", "NetworkCreateResponse", "which", "be", "the", "actual", "objects", "use", "for", "Swagger", "NUMBER", "The", "obvious", "weird", "thing", "be", "that", "be", "that", "github", "NUMBER", "com", "coreos", "etcd", "pkg", "types", "be", "the", "wrong", "package", "NUMBER", "I", "ve", "no", "idea", "why", "it", "s", "picking", "that", "package", "because", "it", "doesn", "t", "have", "a", "NetworkCreate", "object", "or", "anything", "NUMBER", "With", "debugging", "enable", "we", "can", "see", "if", "definitely", "be", "loading", "the", "correct", "package", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "analyzing", "github", "NUMBER", "com", "docker", "engine", "api", "types", "The", "other", "weird", "thing", "be", "why", "it", "doesn", "t", "work", "in", "the", "first", "place", "NUMBER", "I", "m", "guessing", "there", "be", "a", "real", "error", "that", "be", "be", "swallowed", "somewhere", "but", "I", "m", "not", "sure", "where", "to", "look", "NUMBER", "Ahah", "I", "ve", "get", "it", "The", "clue", "be", "that", "the", "package", "names", "be", "all", "call", "types", "NUMBER", "I", "have", "several", "package", "call", "types", "and", "packageForFile", "looks", "for", "package", "by", "package", "name", "only", "so", "it", "be", "picking", "the", "wrong", "one", "NUMBER", "I", "shall", "investigate", "further", "NUMBER", "A", "half", "fix", "NUMBER", "Problem", "statement", "Running", "swagger", "validate", "TAG", "on", "the", "specification", "below", "hangs", "and", "eventually", "fail", "with", "an", "out", "of", "memory", "error", "NUMBER", "Swagger", "specification", "yaml", "swagger", "NUMBER", "info", "title", "swagger", "validate", "out", "of", "memory", "version", "NUMBER", "paths", "foos", "post", "operationId", "createFoo", "responses", "NUMBER", "schema", "ref", "definitions", "Foo", "definitions", "Foo", "type", "object", "properties", "bar", "ref", "definitions", "Bar", "baz", "ref", "definitions", "Baz", "Bar", "type", "string", "enum", "a", "b", "Baz", "type", "array", "items", "type", "string", "Steps", "to", "reproduce", "Run", "swagger", "validate", "on", "the", "specification", "above", "NUMBER", "Strangely", "if", "I", "comment", "out", "either", "bar", "or", "baz", "as", "properties", "on", "Foo", "it", "validates", "NUMBER", "Only", "when", "both", "properties", "be", "present", "do", "the", "command", "hang", "NUMBER", "I", "should", "also", "note", "that", "there", "be", "a", "couple", "of", "things", "incorrect", "about", "this", "config", "NUMBER", "definitions", "Bar", "and", "definitions", "Baz", "should", "be", "definitions", "Bar", "and", "definitions", "Baz", "respectively", "NUMBER", "NUMBER", "There", "should", "be", "a", "description", "on", "the", "NUMBER", "response", "NUMBER", "The", "online", "validator", "at", "LINK", "pass", "once", "both", "of", "these", "be", "change", "NUMBER", "go", "swagger", "pass", "once", "NUMBER", "be", "change", "NUMBER", "So", "there", "be", "perhaps", "two", "bug", "here", "Whatever", "be", "cause", "go", "swagger", "to", "hang", "on", "the", "config", "assuming", "editor", "NUMBER", "swagger", "NUMBER", "io", "be", "correct", "go", "swagger", "doesn", "t", "fail", "validation", "if", "a", "response", "lacks", "a", "description", "Let", "s", "imagine", "we", "have", "a", "list", "of", "products", "that", "be", "available", "at", "a", "store", "NUMBER", "A", "product", "resource", "should", "include", "a", "reference", "to", "the", "store", "it", "s", "available", "in", "but", "instead", "of", "including", "the", "entire", "store", "resource", "I", "would", "like", "to", "include", "a", "url", "to", "the", "store", "NUMBER", "What", "s", "the", "best", "approach", "to", "generate", "the", "url", "dynamically", "Example", "v", "NUMBER", "products", "id", "id", "NUMBER", "name", "Book", "available_at_url", "LINK", "v", "NUMBER", "stores", "id", "id", "NUMBER", "name", "Book", "Store", "address", "NUMBER", "Main", "Road", "From", "what", "I", "ve", "find", "there", "s", "no", "way", "in", "go", "swagger", "to", "link", "the", "value", "of", "a", "primitive", "inside", "Object", "NUMBER", "into", "a", "formatted", "string", "primitive", "in", "Object", "NUMBER", "It", "might", "not", "even", "be", "possible", "inside", "the", "OpenAPI", "spec", "NUMBER", "A", "swagger", "response", "do", "have", "a", "pattern", "property", "which", "would", "get", "you", "most", "of", "the", "way", "there", "that", "and", "a", "well", "worded", "description", "be", "your", "best", "bet", "I", "think", "NUMBER", "Hi", "I", "be", "currently", "trying", "to", "use", "go", "swagger", "to", "generate", "some", "part", "of", "a", "Server", "application", "automatically", "NUMBER", "The", "server", "has", "be", "write", "with", "the", "idea", "of", "code", "generation", "in", "mind", "but", "we", "would", "love", "to", "reuse", "entirely", "our", "code", "transforming", "the", "code", "in", "go", "template", "NUMBER", "It", "would", "be", "actually", "enough", "the", "export", "the", "appGenerator", "type", "and", "have", "a", "function", "that", "returns", "it", "maybe", "generator", "NUMBER", "GenerateServer", "itself", "NUMBER", "I", "would", "then", "use", "appGenerator", "to", "execute", "the", "template", "NUMBER", "I", "would", "be", "interested", "in", "discussing", "how", "I", "could", "realize", "what", "I", "want", "to", "do", "if", "it", "be", "possible", "with", "the", "current", "go", "swagger", "or", "not", "NUMBER", "Thanks", "in", "advance", "Wouldn", "t", "this", "generate", "roughly", "the", "same", "structure", "of", "the", "server", "I", "don", "t", "want", "to", "change", "minor", "details", "I", "want", "to", "have", "code", "that", "looks", "totally", "different", "but", "only", "for", "the", "server", "part", "models", "and", "clients", "be", "more", "than", "okay", "while", "use", "code", "the", "parsing", "and", "validation", "from", "go", "swagger", "NUMBER", "This", "means", "different", "number", "of", "file", "and", "different", "functionalities", "NUMBER", "This", "be", "why", "I", "thought", "that", "having", "something", "that", "could", "return", "the", "AppGenerator", "could", "be", "enough", "but", "I", "be", "interested", "in", "understanding", "your", "opinion", "NUMBER", "Yeah", "I", "would", "love", "to", "have", "something", "much", "simpler", "NUMBER", "I", "do", "not", "have", "the", "current", "project", "opensource", "but", "I", "can", "create", "a", "gist", "to", "give", "you", "an", "idea", "as", "all", "this", "part", "can", "actually", "be", "opensourced", "NUMBER", "I", "will", "then", "work", "on", "the", "PR", "so", "that", "we", "can", "discuss", "further", "NUMBER", "casualjim", "The", "server", "will", "look", "somehow", "similar", "to", "LINK", "where", "the", "routes", "part", "will", "be", "generate", "from", "the", "swagger", "def", "NUMBER", "The", "handlers", "similar", "to", "LINK", "will", "be", "able", "to", "use", "something", "like", "this", "LINK", "for", "response", "generation", "NUMBER", "I", "hope", "that", "at", "least", "the", "idea", "be", "clear", "I", "want", "to", "build", "a", "very", "opinionated", "server", "with", "only", "few", "parts", "auto", "generate", "in", "order", "to", "satisfy", "an", "use", "case", "that", "pretty", "much", "matches", "the", "need", "of", "our", "project", "but", "to", "do", "so", "I", "want", "to", "re", "use", "the", "parts", "of", "go", "swagger", "NUMBER", "casualjim", "Sorry", "for", "the", "delay", "but", "I", "didn", "t", "have", "time", "at", "all", "to", "work", "on", "this", "NUMBER", "I", "quickly", "hacked", "something", "to", "give", "you", "an", "understanding", "of", "what", "I", "meant", "with", "this", "issue", "here", "LINK", "swagger", "commit", "a", "NUMBER", "c", "NUMBER", "def", "NUMBER", "bb", "NUMBER", "f", "NUMBER", "b", "NUMBER", "f", "NUMBER", "bb", "NUMBER", "c", "NUMBER", "c", "NUMBER", "c", "NUMBER", "f", "NUMBER", "Essentially", "the", "only", "thing", "that", "was", "do", "be", "Making", "appGenerator", "public", "and", "accessible", "from", "the", "outside", "Created", "a", "main", "that", "can", "be", "use", "to", "generate", "any", "template", "use", "Go", "s", "template", "NUMBER", "This", "main", "should", "be", "evolved", "in", "just", "executing", "the", "template", "based", "on", "the", "content", "of", "appGenerator", "now", "it", "be", "only", "an", "hack", "LINK", "swagger", "blob", "a", "NUMBER", "c", "NUMBER", "def", "NUMBER", "bb", "NUMBER", "f", "NUMBER", "b", "NUMBER", "f", "NUMBER", "bb", "NUMBER", "c", "NUMBER", "c", "NUMBER", "c", "NUMBER", "f", "NUMBER", "cmd", "swagger", "commands", "generate", "cmd", "main", "NUMBER", "go", "Please", "note", "that", "all", "of", "this", "be", "an", "hack", "and", "that", "be", "not", "definitive", "or", "well", "do", "NUMBER", "I", "just", "wanted", "to", "bump", "the", "discussion", "and", "give", "a", "better", "understanding", "of", "what", "I", "meant", "before", "NUMBER", "Up", "any", "update", "Yes", "but", "do", "you", "think", "it", "would", "be", "actually", "possible", "It", "looks", "like", "the", "code", "that", "be", "generate", "has", "an", "enforced", "structure", "NUMBER", "could", "you", "give", "me", "an", "hint", "on", "how", "you", "would", "change", "the", "code", "Nice", "let", "me", "know", "if", "you", "would", "love", "help", "to", "get", "it", "finished", "and", "if", "so", "what", "kind", "of", "help", "I", "didn", "t", "get", "how", "to", "test", "it", "NUMBER", "I", "tried", "the", "following", "in", "github", "NUMBER", "com", "go", "swagger", "cmd", "swagger", "go", "build", "NUMBER", "mir", "swagger", "raffo", "swagger", "generate", "server", "help", "Usage", "swagger", "OPTIONS", "generate", "server", "server", "OPTIONS", "generate", "all", "the", "file", "for", "a", "server", "application", "Help", "Options", "h", "help", "Show", "this", "help", "message", "server", "command", "options", "f", "spec", "the", "spec", "file", "to", "use", "default", "NUMBER", "swagger", "NUMBER", "json", "a", "api", "package", "the", "package", "to", "save", "the", "operations", "default", "operations", "m", "model", "package", "the", "package", "to", "save", "the", "models", "default", "models", "s", "server", "package", "the", "package", "to", "save", "the", "server", "specific", "code", "default", "restapi", "c", "client", "package", "the", "package", "to", "save", "the", "client", "specific", "code", "default", "client", "t", "target", "the", "base", "directory", "for", "generating", "the", "file", "default", "NUMBER", "T", "template", "dir", "alternative", "template", "override", "directory", "A", "name", "the", "name", "of", "the", "application", "defaults", "to", "a", "mangled", "value", "of", "info", "NUMBER", "title", "O", "operation", "specify", "an", "operation", "to", "include", "repeat", "for", "multiple", "tags", "the", "tags", "to", "include", "if", "not", "specified", "defaults", "to", "all", "P", "principal", "the", "model", "to", "use", "for", "the", "security", "principal", "default", "scheme", "the", "default", "scheme", "for", "this", "API", "default", "http", "M", "model", "specify", "a", "model", "to", "include", "repeat", "for", "multiple", "skip", "models", "no", "models", "will", "be", "generate", "when", "this", "flag", "be", "specified", "skip", "operations", "no", "operations", "will", "be", "generate", "when", "this", "flag", "be", "specified", "skip", "support", "no", "support", "file", "will", "be", "generate", "when", "this", "flag", "be", "specified", "exclude", "main", "exclude", "main", "function", "so", "just", "generate", "the", "library", "exclude", "spec", "don", "t", "embed", "the", "swagger", "specification", "with", "context", "handlers", "get", "a", "context", "as", "first", "arg", "dump", "data", "when", "present", "dumps", "the", "json", "for", "the", "template", "generator", "instead", "of", "generating", "file", "mir", "swagger", "raffo", "grep", "R", "config", "file", "NUMBER", "NUMBER", "commands", "generate", "server", "NUMBER", "go", "ConfigFile", "flags", "NUMBER", "Filename", "long", "config", "file", "short", "C", "description", "configuration", "file", "to", "use", "for", "overriding", "template", "options", "Am", "I", "doing", "something", "wrong", "Thanks", "for", "your", "work", "EDIT", "I", "was", "use", "a", "wrongly", "compiled", "binary", "this", "comment", "be", "outdate", "NUMBER", "casualjim", "with", "this", "example", "config", "layout", "application", "name", "configure", "source", "asset", "serverConfigureapi", "target", "joinFilePath", "NUMBER", "Target", "NUMBER", "ServerPackage", "file_name", "NUMBER", "Name", "_client", "NUMBER", "go", "skip_exists", "true", "name", "main", "source", "asset", "serverMain", "target", "joinFilePath", "NUMBER", "Target", "cmd", "dasherize", "pascalize", "NUMBER", "Name", "server", "file_name", "main", "NUMBER", "go", "name", "embedded_spec", "source", "asset", "swaggerJsonEmbed", "target", "joinFilePath", "NUMBER", "Target", "NUMBER", "ServerPackage", "file_name", "embedded_spec", "NUMBER", "go", "name", "server", "source", "asset", "serverServer", "target", "joinFilePath", "NUMBER", "Target", "NUMBER", "ServerPackage", "file_name", "server", "NUMBER", "go", "name", "builder", "source", "asset", "serverBuilder", "target", "joinFilePath", "NUMBER", "Target", "NUMBER", "ServerPackage", "NUMBER", "Package", "file_name", "snakize", "pascalize", "NUMBER", "Name", "_api", "NUMBER", "go", "name", "doc", "source", "asset", "serverDoc", "target", "joinFilePath", "NUMBER", "Target", "NUMBER", "ServerPackage", "file_name", "doc", "NUMBER", "go", "models", "name", "definition", "source", "asset", "model", "target", "joinFilePath", "NUMBER", "Target", "NUMBER", "ModelPackage", "file_name", "snakize", "pascalize", "NUMBER", "Name", "NUMBER", "go", "operations", "name", "parameters", "source", "asset", "serverParameter", "target", "joinFilePath", "NUMBER", "Target", "NUMBER", "ServerPackage", "NUMBER", "APIPackage", "NUMBER", "Package", "file_name", "snakize", "pascalize", "NUMBER", "Name", "_parameters", "NUMBER", "go", "name", "responses", "source", "asset", "serverResponses", "target", "joinFilePath", "NUMBER", "Target", "NUMBER", "ServerPackage", "NUMBER", "APIPackage", "NUMBER", "Package", "file_name", "snakize", "pascalize", "NUMBER", "Name", "_responses", "NUMBER", "go", "name", "handler", "source", "asset", "serverOperation", "target", "joinFilePath", "NUMBER", "Target", "NUMBER", "ServerPackage", "NUMBER", "APIPackage", "NUMBER", "Package", "file_name", "snakize", "pascalize", "NUMBER", "Name", "NUMBER", "go", "it", "doesn", "t", "seeem", "to", "work", "and", "I", "don", "t", "get", "any", "meaningful", "log", "NUMBER", "Any", "idea", "of", "what", "could", "be", "wrong", "Thanks", "again", "I", "have", "be", "unable", "to", "determine", "how", "to", "access", "the", "HTTP", "Status", "code", "of", "a", "response", "use", "the", "auto", "gen", "client", "NUMBER", "apologies", "if", "this", "be", "in", "the", "docs", "or", "sample", "code", "and", "I", "have", "just", "fail", "to", "find", "it", "NUMBER", "I", "m", "get", "quite", "a", "number", "of", "issue", "use", "the", "autogen", "client", "code", "beginning", "to", "suspect", "it", "s", "early", "days", "for", "this", "piece", "and", "I", "should", "hand", "a", "roll", "a", "client", "for", "now", "NUMBER", "Is", "this", "a", "fair", "comment", "Operation", "spec", "post", "parameters", "in", "body", "required", "true", "name", "client", "schema", "ref", "definitions", "client", "responses", "NUMBER", "description", "Create", "new", "client", "schema", "ref", "definitions", "client", "NUMBER", "description", "unauthorised", "default", "description", "generic", "error", "response", "schema", "ref", "definitions", "errorMessage", "tags", "clients", "Client", "def", "properties", "id", "format", "int", "NUMBER", "type", "integer", "name", "type", "string", "required", "id", "name", "type", "object", "Integration", "test", "code", "func", "TestCreateOneOk", "t", "test", "NUMBER", "T", "id", "int", "NUMBER", "NUMBER", "client", "models", "NUMBER", "Client", "ID", "id", "Name", "SPtr", "New", "Client", "response", "err", "Apiclient", "NUMBER", "Clients", "NUMBER", "PostClients", "clients", "NUMBER", "NewPostClientsParams", "NUMBER", "WithClient", "client", "Returns", "PostClientsOk", "error", "if", "err", "nil", "t", "NUMBER", "Fatal", "fmt", "NUMBER", "Sprintf", "Error", "s", "err", "NUMBER", "Error", "payloadJson", "_", "json", "NUMBER", "Marshal", "response", "NUMBER", "Payload", "errorJson", "_", "json", "NUMBER", "Marshal", "response", "NUMBER", "Error", "log", "NUMBER", "Print", "string", "payloadJson", "log", "NUMBER", "Print", "string", "errorJson", "Request", "Response", "POST", "clients", "HTTP", "NUMBER", "User", "Agent", "Go", "http", "client", "NUMBER", "Content", "Length", "NUMBER", "Accept", "application", "json", "Content", "Type", "application", "json", "Accept", "Encoding", "gzip", "Host", "localhost", "NUMBER", "id", "NUMBER", "name", "New", "Client", "HTTP", "NUMBER", "NUMBER", "OK", "Content", "Type", "application", "json", "Vary", "Origin", "Date", "Wed", "NUMBER", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Content", "Length", "NUMBER", "id", "NUMBER", "name", "New", "Client", "Output", "from", "test", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "id", "NUMBER", "name", "New", "Client", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "POST", "clients", "NUMBER", "postClientsOK", "u", "NUMBER", "ID", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "a", "NUMBER", "Name", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "c", "NUMBER", "So", "I", "have", "NUMBER", "question", "NUMBER", "as", "the", "Apiclient", "NUMBER", "Clients", "NUMBER", "PostClients", "NUMBER", "method", "returns", "PostClientsOk", "how", "could", "it", "return", "the", "other", "types", "that", "be", "bound", "to", "represent", "different", "HTTP", "status", "code", "NUMBER", "NUMBER", "what", "be", "the", "purpose", "of", "the", "error", "string", "That", "all", "makes", "sense", "now", "NUMBER", "Thank", "you", "for", "your", "patience", "NUMBER", "Feature", "Create", "a", "swagger", "doc", "spec", "from", "just", "comments", "where", "the", "responses", "be", "defined", "use", "only", "swagger", "model", "ex", "Person", "NUMBER", "swagger", "model", "Person", "type", "Person", "struct", "Name", "of", "this", "person", "Name", "string", "Username", "of", "this", "person", "Username", "string", "Email", "for", "this", "person", "Email", "string", "Height", "of", "this", "person", "in", "inches", "Height", "int", "Get", "get", "this", "person", "from", "the", "database", "and", "return", "them", "to", "the", "user", "NUMBER", "swagger", "route", "GET", "person", "id", "people", "getPerson", "Get", "the", "person", "by", "id", "NUMBER", "Returns", "a", "person", "Consumes", "application", "json", "Produces", "application", "json", "Schemes", "https", "Responses", "NUMBER", "body", "Person", "func", "p", "Person", "Get", "r", "http", "NUMBER", "ResponseWriter", "req", "http", "NUMBER", "Request", "Some", "code", "would", "create", "a", "swagger", "spec", "where", "the", "Response", "for", "endpoint", "person", "id", "be", "just", "a", "json", "payload", "of", "a", "Person", "NUMBER", "this", "exact", "example", "doesnt", "work", "for", "me", "NUMBER", "Person", "be", "simply", "not", "generate", "and", "definitions", "be", "empty", "NUMBER", "casualjim", "erf", "thanks", "alot", "Problem", "statement", "validate", "operation", "on", "the", "spec", "fail", "while", "the", "generate", "on", "the", "spec", "succeeds", "and", "has", "no", "issue", "NUMBER", "Swagger", "specification", "yaml", "consumes", "application", "json", "definitions", "portmap", "type", "object", "properties", "id", "type", "integer", "format", "int", "NUMBER", "readonly", "true", "source", "type", "string", "minlength", "NUMBER", "destination", "type", "string", "starttimestamp", "type", "string", "format", "date", "time", "lastupdated", "type", "string", "format", "date", "time", "do", "type", "boolean", "default", "false", "error", "type", "object", "required", "message", "properties", "code", "type", "integer", "format", "int", "NUMBER", "message", "type", "string", "info", "description", "Nimbus", "proxy", "bridge", "port", "foward", "nimbus", "serious", "log", "receiver", "title", "ProxyBridge", "Server", "version", "NUMBER", "paths", "portmap", "post", "tags", "portmap", "responses", "NUMBER", "description", "Created", "schema", "ref", "definitions", "portmap", "default", "description", "error", "schema", "ref", "definitions", "error", "get", "tags", "portmap", "responses", "NUMBER", "description", "list", "of", "portmaps", "schema", "type", "array", "items", "ref", "definitions", "portmap", "default", "description", "error", "schema", "ref", "definitions", "error", "produces", "application", "json", "schemes", "http", "swagger", "NUMBER", "Steps", "to", "reproduce", "docker", "run", "rm", "it", "v", "TAG", "swagger", "NUMBER", "yml", "golang", "bash", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "validate", "swagger", "NUMBER", "yml", "Problem", "statement", "I", "m", "run", "head", "of", "master", "currently", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bd", "NUMBER", "eabb", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "Not", "sure", "if", "this", "be", "an", "issue", "or", "just", "a", "lack", "of", "understanding", "on", "my", "part", "NUMBER", "I", "have", "a", "healthcheck", "method", "that", "returns", "a", "status", "NUMBER", "by", "default", "along", "with", "an", "errorMessage", "object", "defined", "in", "the", "model", "NUMBER", "However", "the", "WithPayload", "method", "takes", "a", "GetHealthcheckDefaultBodyBody", "type", "NUMBER", "Not", "such", "a", "big", "issue", "here", "as", "I", "can", "just", "create", "one", "of", "those", "but", "where", "I", "need", "to", "return", "arrays", "of", "model", "types", "I", "ll", "end", "up", "write", "a", "lot", "of", "boilerplate", "to", "map", "from", "the", "model", "types", "to", "the", "BodyBody", "types", "E", "NUMBER", "G", "NUMBER", "go", "func", "ClientsGet", "params", "clients", "NUMBER", "GetClientsParams", "middleware", "NUMBER", "Responder", "results", "err", "repository", "NUMBER", "GetAllClients", "if", "err", "nil", "return", "clients", "NUMBER", "NewGetClientsDefault", "NUMBER", "NUMBER", "WithPayload", "clients", "NUMBER", "GetClientsDefaultBodyBody", "Message", "sPtr", "err", "NUMBER", "Error", "return", "clients", "NUMBER", "GetClientsOK", "results", "do", "not", "compile", "as", "GetClientsOK", "accepts", "clients", "NUMBER", "GetClientsOKBodyBody", "not", "models", "NUMBER", "Client", "I", "notice", "that", "the", "example", "code", "in", "the", "repo", "be", "different", "in", "this", "regard", "to", "my", "generate", "code", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bd", "NUMBER", "eabb", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "examples", "tutorials", "todo", "list", "server", "complete", "restapi", "operations", "todos", "add_one_responses", "NUMBER", "go", "NUMBER", "I", "was", "unable", "to", "generate", "code", "from", "the", "example", "spec", "here", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bd", "NUMBER", "eabb", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "examples", "tutorials", "todo", "list", "server", "complete", "swagger", "NUMBER", "yml", "My", "Spec", "json", "swagger", "NUMBER", "info", "title", "M", "NUMBER", "Intl", "Maas", "Service", "version", "NUMBER", "produces", "application", "json", "consumes", "application", "json", "schemes", "http", "definitions", "client", "properties", "id", "format", "int", "NUMBER", "type", "integer", "name", "type", "string", "required", "id", "name", "type", "object", "messageTeaser", "properties", "campaignId", "type", "string", "clientName", "type", "string", "footer", "type", "string", "id", "type", "string", "isNew", "type", "boolean", "jobNumber", "type", "string", "piLink", "type", "string", "repId", "type", "string", "summary", "type", "string", "title", "type", "string", "required", "id", "title", "summary", "isNew", "footer", "jobNumber", "clientName", "piLink", "repId", "campaignId", "type", "object", "errorMessage", "type", "object", "required", "message", "properties", "message", "type", "string", "paths", "clients", "get", "parameters", "in", "path", "required", "true", "name", "client_id", "type", "integer", "responses", "NUMBER", "description", "get", "client", "schema", "items", "properties", "id", "format", "int", "NUMBER", "type", "integer", "name", "type", "string", "required", "id", "name", "type", "object", "NUMBER", "description", "unauthorised", "NUMBER", "description", "client", "not", "find", "default", "description", "generic", "error", "response", "schema", "type", "object", "required", "message", "properties", "message", "type", "string", "tags", "clients", "put", "parameters", "in", "path", "required", "true", "name", "client_id", "type", "integer", "in", "body", "required", "true", "name", "client", "schema", "properties", "id", "format", "int", "NUMBER", "type", "integer", "name", "type", "string", "required", "id", "name", "type", "object", "responses", "NUMBER", "description", "update", "client", "schema", "items", "properties", "id", "format", "int", "NUMBER", "type", "integer", "name", "type", "string", "required", "id", "name", "type", "object", "NUMBER", "description", "unauthorised", "NUMBER", "description", "client", "not", "find", "default", "description", "generic", "error", "response", "schema", "type", "object", "required", "message", "properties", "message", "type", "string", "tags", "clients", "delete", "parameters", "in", "path", "required", "true", "name", "client_id", "type", "integer", "responses", "NUMBER", "description", "delete", "client", "NUMBER", "description", "unauthorised", "NUMBER", "description", "client", "not", "find", "default", "description", "generic", "error", "response", "schema", "type", "object", "required", "message", "properties", "message", "type", "string", "clients", "client_id", "get", "parameters", "in", "path", "required", "true", "name", "client_id", "type", "integer", "responses", "NUMBER", "description", "get", "client", "schema", "items", "properties", "id", "format", "int", "NUMBER", "type", "integer", "name", "type", "string", "required", "id", "name", "type", "object", "NUMBER", "description", "unauthorised", "NUMBER", "description", "client", "not", "find", "default", "description", "generic", "error", "response", "schema", "items", "type", "object", "required", "message", "properties", "message", "type", "string", "tags", "clients", "put", "parameters", "in", "path", "required", "true", "name", "client_id", "type", "integer", "in", "body", "required", "true", "name", "client", "schema", "properties", "id", "format", "int", "NUMBER", "type", "integer", "name", "type", "string", "required", "id", "name", "type", "object", "responses", "NUMBER", "description", "update", "client", "schema", "items", "properties", "id", "format", "int", "NUMBER", "type", "integer", "name", "type", "string", "required", "id", "name", "type", "object", "NUMBER", "description", "unauthorised", "NUMBER", "description", "client", "not", "find", "default", "description", "generic", "error", "response", "schema", "items", "type", "object", "required", "message", "properties", "message", "type", "string", "tags", "clients", "delete", "parameters", "in", "path", "required", "true", "name", "client_id", "type", "integer", "responses", "NUMBER", "description", "delete", "client", "NUMBER", "description", "unauthorised", "NUMBER", "description", "client", "not", "find", "default", "description", "generic", "error", "response", "schema", "items", "type", "object", "required", "message", "properties", "message", "type", "string", "healthcheck", "get", "responses", "NUMBER", "description", "confirm", "that", "the", "service", "be", "healthy", "default", "description", "generic", "error", "response", "schema", "type", "object", "required", "message", "properties", "message", "type", "string", "tags", "healthcheck", "usermessagesummary", "community_id", "user_id", "lang_id", "get", "parameters", "in", "path", "required", "true", "name", "community_id", "type", "string", "in", "path", "required", "true", "name", "user_id", "type", "string", "in", "path", "required", "true", "name", "lang_id", "type", "string", "responses", "NUMBER", "description", "Returns", "message", "summary", "according", "to", "criteria", "schema", "items", "properties", "campaignId", "type", "string", "clientName", "type", "string", "footer", "type", "string", "id", "type", "string", "isNew", "type", "boolean", "jobNumber", "type", "string", "piLink", "type", "string", "repId", "type", "string", "summary", "type", "string", "title", "type", "string", "required", "id", "title", "summary", "isNew", "footer", "jobNumber", "clientName", "piLink", "repId", "campaignId", "type", "object", "NUMBER", "description", "unauthorised", "NUMBER", "description", "client", "not", "find", "default", "description", "generic", "error", "response", "schema", "items", "type", "object", "required", "message", "properties", "message", "type", "string", "I", "also", "posted", "this", "on", "StackOverflow", "creating", "a", "go", "swagger", "tag", "in", "doing", "so", "LINK", "swagger", "response", "payloads", "not", "model", "types", "Ah", "yes", "of", "course", "I", "have", "split", "my", "spec", "in", "to", "separate", "file", "and", "I", "be", "reconstituting", "them", "use", "json", "refs", "NUMBER", "However", "I", "had", "neglected", "to", "filter", "out", "relative", "refs", "from", "be", "resolve", "filter", "relative", "hence", "the", "definition", "be", "repeated", "local", "to", "the", "response", "NUMBER", "Thank", "you", "NUMBER", "Great", "work", "BTW", "NUMBER", "Problem", "statement", "Generated", "resetapi", "server", "NUMBER", "go", "file", "be", "miss", "github", "NUMBER", "com", "go", "openapi", "swag", "import", "go", "swagger", "revision", "install", "from", "source", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bd", "NUMBER", "eabb", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "generate", "server", "skeleton", "code", "Problem", "statement", "Generated", "operations", "name", "_service_api", "NUMBER", "go", "file", "be", "miss", "github", "NUMBER", "com", "go", "openapi", "swag", "import", "go", "swagger", "revision", "install", "from", "source", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bd", "NUMBER", "eabb", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "generate", "server", "skeleton", "code", "Problem", "statement", "Generated", "get_", "name", "_parameters", "NUMBER", "go", "be", "miss", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "import", "NUMBER", "go", "swagger", "revision", "install", "from", "source", "NUMBER", "c", "NUMBER", "f", "NUMBER", "bd", "NUMBER", "eabb", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "Swagger", "specification", "NUMBER", "Steps", "to", "reproduce", "generate", "server", "skeleton", "code", "casualjim", "Did", "that", "but", "the", "github", "NUMBER", "com", "go", "openapi", "swag", "be", "still", "miss", "from", "import", "i", "encountered", "the", "same", "issue", "and", "after", "regenerating", "it", "did", "add", "the", "correct", "imports", "NUMBER", "but", "it", "be", "a", "little", "bit", "confusing", "if", "you", "generate", "for", "a", "fresh", "project", "and", "then", "vendor", "and", "then", "you", "have", "regenerate", "for", "it", "to", "add", "those", "imports", "NUMBER", "maybe", "a", "parameter", "to", "do", "that", "introspection", "or", "else", "just", "always", "add", "the", "imports", "so", "that", "then", "when", "you", "run", "glide", "or", "whatever", "it", "will", "just", "do", "the", "right", "thing", "NUMBER", "Seems", "like", "that", "would", "be", "majority", "case", "for", "people", "just", "starting", "off", "I", "have", "the", "same", "problem", "github", "NUMBER", "com", "go", "openapi", "swag", "be", "still", "miss", "SOMETIME", "I", "have", "start", "a", "number", "of", "swagger", "generate", "server", "commands", "and", "SOMETIME", "the", "import", "be", "here", "SOMETIME", "be", "not", "NUMBER", "The", "import", "github", "NUMBER", "com", "go", "openapi", "runtime", "be", "in", "my", "vendor", "directory", "The", "code", "i", "m", "use", "to", "test", "use", "swagger", "version", "NUMBER", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "c", "NUMBER", "bash", "for", "i", "in", "seq", "NUMBER", "NUMBER", "do", "echo", "n", "Test", "i", "swagger", "generate", "server", "dev", "null", "grep", "q", "github", "NUMBER", "com", "go", "openapi", "swag", "models", "application_set_report", "NUMBER", "go", "echo", "Found", "echo", "NOT", "find", "do", "Result", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "NOT", "find", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "NOT", "find", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "NOT", "find", "Test", "NUMBER", "NOT", "find", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Test", "NUMBER", "Found", "Perhaps", "it", "s", "a", "bug", "with", "go", "imports", "that", "didn", "t", "see", "that", "the", "imports", "be", "in", "the", "vendor", "directory", "and", "so", "doesn", "t", "add", "the", "import", "line", "Ok", "i", "find", "the", "bug", "It", "s", "in", "go", "imports", "NUMBER", "When", "go", "imports", "scan", "the", "directories", "if", "it", "find", "an", "error", "like", "a", "directory", "that", "it", "can", "t", "read", "it", "will", "stop", "the", "scan", "and", "so", "no", "import", "be", "find", "and", "the", "lines", "not", "add", "in", "the", "import", "section", "NUMBER", "It", "easy", "to", "reproduce", "create", "a", "directory", "that", "can", "t", "be", "read", "by", "the", "current", "user", "in", "the", "vendor", "directory", "bash", "sudo", "mkdir", "vendor", "a", "sudo", "chmod", "NUMBER", "vendor", "a", "and", "try", "to", "generate", "the", "code", "with", "swagger", "and", "no", "import", "will", "be", "find", "NUMBER", "The", "best", "to", "resolve", "such", "error", "be", "perhaps", "to", "add", "github", "NUMBER", "com", "go", "openapi", "runtime", "middleware", "github", "NUMBER", "com", "go", "openapi", "swag", "by", "default", "in", "the", "template", "file", "where", "they", "can", "be", "use", "NUMBER", "So", "go", "imports", "will", "remove", "this", "imports", "if", "not", "use", "in", "the", "code", "instead", "of", "add", "miss", "import", "NUMBER", "The", "solution", "fix", "also", "the", "problem", "when", "vendor", "directory", "have", "miss", "pkg", "the", "compilation", "will", "fail", "report", "that", "the", "pkg", "be", "miss", "NUMBER", "There", "be", "a", "need", "to", "run", "a", "server", "in", "HTTP", "mode", "only", "behind", "nginx", "that", "add", "TLS", "layer", "NUMBER", "Because", "of", "that", "the", "provide", "schema", "contains", "HTTP", "mode", "only", "however", "server", "be", "HTTPS", "only", "NUMBER", "That", "results", "in", "the", "situation", "that", "clients", "like", "bravado", "can", "t", "not", "work", "with", "this", "server", "NUMBER", "So", "It", "would", "be", "good", "If", "user", "could", "just", "define", "which", "schemas", "http", "or", "https", "to", "provide", "in", "a", "swagger", "spec", "NUMBER", "ps", "NUMBER", "I", "will", "add", "all", "needed", "change", "some", "time", "soon", "NUMBER", "vburenin", "Anything", "I", "can", "do", "to", "help", "I", "haven", "t", "invest", "any", "time", "into", "this", "yet", "NUMBER", "Maybe", "soon", "NUMBER", "Using", "force", "schema", "should", "override", "whatever", "default", "be", "NUMBER", "force", "schema", "http", "http", "force", "schema", "https", "https", "force", "schema", "http", "force", "schema", "https", "http", "https", "I", "be", "also", "thinking", "that", "server", "should", "not", "really", "have", "a", "different", "code", "to", "run", "HTTP", "and", "HTTPS", "server", "both", "modes", "should", "be", "optional", "for", "any", "schema", "definitions", "NUMBER", "Let", "say", "http", "enable", "HTTP", "https", "enable", "HTTPS", "requiring", "TLS", "key", "cert", "ca", "NUMBER", "casualjim", "Do", "you", "have", "any", "opinion", "around", "it", "Implemented", "in", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "Panic", "It", "should", "break", "all", "scripts", "that", "be", "run", "a", "swagger", "application", "NUMBER", "the", "generate", "client", "sends", "an", "empty", "Accept", "header", "NUMBER", "it", "should", "probably", "either", "send", "Accept", "application", "json", "or", "nothing", "NUMBER", "casualjim", "nope", "NUMBER", "thanks", "and", "sorry", "for", "the", "noise", "NUMBER", "Problem", "statement", "If", "a", "swagger", "doc", "include", "multiple", "success", "responses", "the", "client", "generate", "results", "in", "a", "scenario", "that", "causes", "a", "panic", "due", "to", "attempting", "to", "convert", "betwen", "invalid", "generate", "structs", "NUMBER", "The", "generate", "client", "creates", "separate", "structs", "for", "types", "of", "responses", "this", "causes", "a", "conflict", "when", "multiple", "successes", "be", "possible", "for", "instance", "for", "a", "AddWidget", "endpoint", "that", "returns", "either", "a", "NUMBER", "or", "NUMBER", "response", "code", "NUMBER", "The", "client", "be", "generate", "with", "two", "structs", "AddWidgetOK", "AddWidgetCreated", "ReadResponse", "of", "the", "generate", "responses", "template", "will", "return", "one", "of", "those", "two", "objects", "depending", "on", "the", "response", "code", "NUMBER", "However", "in", "the", "the", "AddWidget", "method", "in", "the", "client", "template", "it", "attempts", "to", "return", "only", "The", "first", "success", "type", "AddWidgetOK", "NUMBER", "If", "a", "NUMBER", "created", "response", "comes", "back", "then", "a", "panic", "occur", "NUMBER", "Swagger", "specification", "responses", "NUMBER", "description", "OK", "Updated", "schema", "ref", "definitions", "Widget", "NUMBER", "description", "Created", "Added", "schema", "ref", "definitions", "Widget", "NUMBER", "description", "Not", "find", "Widget", "not", "find", "Steps", "to", "reproduce", "Generate", "a", "client", "froma", "swagger", "def", "which", "has", "more", "than", "one", "success", "response", "code", "NUMBER", "Make", "a", "call", "which", "returns", "a", "success", "code", "other", "than", "what", "the", "client", "be", "generate", "with", "NUMBER", "I", "have", "a", "work", "fix", "at", "the", "moment", "for", "my", "needs", "however", "it", "creates", "a", "new", "Response", "struct", "for", "returning", "from", "the", "calls", "NUMBER", "Under", "that", "struct", "be", "then", "the", "OK", "or", "Created", "structs", "NUMBER", "ie", "type", "AddGroupResponse", "struct", "AddGroupOK", "AddGroupOK", "NUMBER", "response", "AddGroupCreated", "AddGroupCreated", "NUMBER", "response", "AddGroupNotFound", "AddGroupNotFound", "NUMBER", "response", "The", "problem", "with", "this", "in", "terms", "of", "make", "it", "a", "PR", "as", "be", "be", "that", "even", "for", "single", "success", "responses", "it", "creates", "the", "Response", "struct", "so", "that", "would", "break", "any", "exist", "generate", "client", "NUMBER", "type", "GetGroupResponse", "struct", "GetGroupOK", "GetGroupOK", "NUMBER", "response", "GetGroupNotFound", "GetGroupNotFound", "NUMBER", "response", "Does", "the", "Response", "struct", "make", "sense", "be", "there", "an", "alternative", "Should", "always", "returning", "the", "Response", "struct", "instead", "of", "a", "OK", "Created", "be", "an", "option", "I", "personally", "like", "this", "as", "any", "change", "to", "the", "API", "swagger", "doc", "may", "be", "less", "impactful", "Should", "the", "field", "under", "the", "struct", "be", "prefixed", "with", "the", "method", "name", "similar", "to", "the", "models", "Or", "just", "use", "the", "friendly", "names", "of", "the", "http", "status", "code", "ie", "type", "AddGroupResponse", "struct", "OK", "AddGroupOK", "NUMBER", "response", "Created", "AddGroupCreated", "NUMBER", "response", "NotFound", "AddGroupNotFound", "NUMBER", "response", "Since", "AddGroupOK", "and", "AddGroupCreated", "reall", "yjust", "have", "Payload", "under", "them", "be", "there", "other", "scnearios", "where", "there", "be", "more", "field", "ie", "type", "AddGroupCreated", "struct", "Payload", "models", "NUMBER", "GroupDetails", "type", "AddGroupOK", "struct", "Payload", "models", "NUMBER", "GroupDetails", "I", "m", "inclined", "to", "target", "a", "struct", "of", "type", "AddGroupResponse", "struct", "OK", "models", "NUMBER", "GroupDetails", "NUMBER", "response", "Created", "models", "NUMBER", "GroupDetails", "NUMBER", "response", "NotFound", "models", "NUMBER", "EmptyPayload", "NUMBER", "response", "resultCode", "int", "func", "r", "AddGroupResponse", "Code", "int", "return", "r", "NUMBER", "resultCode", "prototype", "resolve", "NUMBER", "TAG", "This", "change", "be", "TAG", "LINK", "swagger", "go", "swagger", "NUMBER", "TAG", "not", "yet", "just", "moved", "focus", "to", "other", "emergency", "on", "work", "S", "Ivan", "Porto", "Carrero", "notifications", "github", "NUMBER", "com\u4e8e", "NUMBER", "\u5e74", "NUMBER", "\u6708", "NUMBER", "\u65e5\u5468\u4e94", "\u4e0a\u5348", "NUMBER", "NUMBER", "\u5199\u9053", "be", "you", "do", "with", "this", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "issuecomment", "NUMBER", "or", "mute", "the", "thread", "LINK", "auth", "AADwsgsGNkL", "NUMBER", "jS", "NUMBER", "PD", "sb", "NUMBER", "u", "NUMBER", "jjQ", "NUMBER", "sDhJJks", "NUMBER", "qX", "NUMBER", "hdgaJpZM", "NUMBER", "JCApZ", "NUMBER", "Hi", "flier", "how", "be", "your", "situation", "at", "the", "moment", "NUMBER", "Thank", "you", "very", "much", "for", "your", "work", "so", "far", "in", "this", "PR", "would", "it", "be", "a", "lot", "of", "work", "to", "finish", "this", "of", "What", "would", "you", "like", "to", "see", "happening", "with", "this", "PR", "Thanks", "again", "your", "time", "and", "effort", "be", "very", "well", "appreciated", "Problem", "statement", "As", "you", "know", "gRPC", "LINK", "provides", "more", "powerful", "and", "faster", "API", "mechanism", "base", "on", "HTTP", "NUMBER", "with", "protobuf", "encoding", "than", "HTTP", "HTTPS", "with", "JSON", "XML", "encoding", "NUMBER", "I", "m", "work", "on", "a", "faster", "prototype", "to", "implement", "gRPC", "backend", "base", "on", "go", "swagger", "it", "could", "works", "to", "generate", "probobuf", "schema", "and", "server", "side", "code", "NUMBER", "If", "you", "think", "it", "be", "ok", "we", "may", "put", "more", "efforts", "on", "it", "NUMBER", "can", "we", "have", "a", "TODO", "list", "about", "gRPC", "backend", "x", "generate", "protobuf", "file", "base", "on", "schema", "x", "generate", "gRPC", "service", "server", "stub", "x", "generate", "gRPC", "service", "client", "stub", "x", "validate", "parameters", "base", "on", "schema", "x", "use", "TLS", "based", "secure", "connection", "in", "gRPC", "support", "stream", "based", "parameter", "support", "middleware", "export", "generate", "NUMBER", "proto", "file", "migrate", "template", "to", "use", "go", "NUMBER", "or", "earlier", "syntax", "add", "update", "gRPC", "examples", "performance", "test", "tool", "report", "Did", "this", "ever", "go", "anywhere", "A", "few", "of", "the", "services", "we", "re", "build", "will", "suffer", "from", "a", "large", "penalty", "from", "the", "serialization", "costs", "of", "JSON", "versus", "something", "like", "Protobuf", "so", "we", "ve", "be", "considering", "gRPC", "NUMBER", "We", "d", "like", "to", "continue", "to", "define", "the", "APIs", "via", "Swagger", "and", "translate", "NUMBER", "There", "be", "some", "other", "initiatives", "to", "take", "Protobufs", "and", "generate", "Swagger", "which", "be", "also", "an", "option", "but", "remaining", "with", "go", "swagger", "would", "be", "the", "most", "preferable", "NUMBER", "Also", "curious", "to", "know", "what", "the", "status", "be", "would", "like", "to", "support", "Protobuf", "too", "NUMBER", "Problem", "statement", "Max", "int", "NUMBER", "and", "uint", "NUMBER", "seems", "to", "be", "wrong", "even", "if", "correct", "in", "the", "json", "schema", "definition", "go", "test", "race", "NUMBER", "NUMBER", "github", "NUMBER", "com", "opencontainers", "image", "spec", "specsgo", "specsgo", "int", "NUMBER", "_validator", "NUMBER", "go", "NUMBER", "constant", "NUMBER", "overflows", "int", "NUMBER", "specsgo", "int", "NUMBER", "_validator", "NUMBER", "go", "NUMBER", "constant", "NUMBER", "overflows", "int", "NUMBER", "specsgo", "uint", "NUMBER", "_validator", "NUMBER", "go", "NUMBER", "constant", "NUMBER", "overflows", "int", "NUMBER", "github", "NUMBER", "com", "opencontainers", "image", "spec", "cmd", "oci", "image", "tool", "no", "test", "file", "github", "NUMBER", "com", "opencontainers", "image", "spec", "image", "no", "test", "file", "ok", "github", "NUMBER", "com", "opencontainers", "image", "spec", "schema", "NUMBER", "s", "Makefile", "NUMBER", "recipe", "for", "target", "test", "fail", "make", "test", "Error", "NUMBER", "The", "schema", "def", "be", "int", "NUMBER", "NUMBER", "type", "integer", "NUMBER", "minimum", "NUMBER", "NUMBER", "maximum", "NUMBER", "NUMBER", "and", "NUMBER", "uint", "NUMBER", "NUMBER", "type", "integer", "NUMBER", "minimum", "NUMBER", "NUMBER", "maximum", "NUMBER", "NUMBER", "Swagger", "specification", "Steps", "to", "reproduce", "What", "should", "we", "do", "with", "this", "one", "casualjim", "Problem", "statement", "the", "github", "NUMBER", "com", "go", "openapi", "swag", "import", "be", "miss", "in", "validation", "file", "which", "need", "it", "NUMBER", "go", "test", "race", "NUMBER", "NUMBER", "github", "NUMBER", "com", "opencontainers", "image", "spec", "specsgo", "specsgo", "array_of_hooks_validator", "NUMBER", "go", "NUMBER", "undefined", "swag", "in", "swag", "NUMBER", "IsZero", "specsgo", "id_mapping_validator", "NUMBER", "go", "NUMBER", "undefined", "swag", "in", "swag", "NUMBER", "IsZero", "specsgo", "id_mapping_validator", "NUMBER", "go", "NUMBER", "undefined", "swag", "in", "swag", "NUMBER", "IsZero", "specsgo", "id_mapping_validator", "NUMBER", "go", "NUMBER", "undefined", "swag", "in", "swag", "NUMBER", "IsZero", "Looking", "at", "those", "file", "the", "import", "be", "miss", "NUMBER", "The", "command", "I", "use", "swagger", "generate", "model", "f", "schema", "defs", "NUMBER", "json", "skip", "struct", "m", "specsgo", "in", "the", "opencontainers", "image", "spec", "repository", "NUMBER", "You", "can", "see", "there", "be", "some", "usages", "of", "swag", "NUMBER", "IsZero", "but", "the", "import", "be", "miss", "Swagger", "specification", "Steps", "to", "reproduce", "I", "can", "t", "reproduce", "it", "anymore", "not", "sure", "what", "s", "happened", "I", "see", "thx", "I", "think", "I", "can", "close", "this", "I", "can", "reproduce", "this", "every", "time", "by", "just", "run", "goswagger", "in", "a", "container", "NUMBER", "I", "use", "the", "following", "command", "let", "me", "know", "if", "I", "m", "doing", "something", "wrong", "NUMBER", "docker", "run", "rm", "e", "GOPATH", "go", "v", "home", "me", "project", "go", "src", "github", "NUMBER", "com", "org", "project", "w", "go", "src", "github", "NUMBER", "com", "org", "project", "u", "NUMBER", "NUMBER", "quay", "NUMBER", "io", "goswagger", "swagger", "NUMBER", "generate", "client", "f", "swagger", "NUMBER", "json", "t", "pkg", "api", "client", "Update", "looks", "like", "the", "import", "be", "miss", "only", "in", "the", "models", "directory", "NUMBER", "Running", "goimports", "on", "every", "file", "in", "that", "directory", "manually", "fix", "it", "NUMBER", "I", "m", "just", "run", "the", "docker", "image", "NUMBER", "It", "doesn", "t", "have", "access", "to", "what", "s", "on", "my", "system", "NUMBER", "It", "works", "Thanks", "Problem", "statement", "if", "I", "generate", "the", "structs", "into", "NUMBER", "specs", "go", "and", "validations", "in", "NUMBER", "specs", "go", "validation", "then", "types", "in", "the", "validation", "directory", "aren", "t", "referencing", "types", "in", "specs", "go", "and", "I", "get", "not", "declared", "error", "Swagger", "specification", "Steps", "to", "reproduce", "or", "put", "it", "another", "way", "there", "could", "be", "a", "way", "to", "name", "the", "validation", "only", "file", "with", "a", "_validation", "NUMBER", "go", "suffix", "do", "it", "work", "but", "this", "way", "I", "can", "t", "have", "a", "validation", "only", "pkg", "Thanks", "a", "lot", "Can", "we", "leave", "this", "open", "for", "the", "pkg", "work", "which", "could", "be", "do", "in", "the", "future", "We", "would", "like", "to", "propose", "exposing", "the", "server", "handler", "via", "a", "getter", "so", "that", "we", "can", "use", "the", "handler", "in", "test", "suite", "NUMBER", "See", "below", "for", "an", "example", "use", "case", "go", "package", "apitests", "import", "io", "log", "net", "http", "httptest", "github", "NUMBER", "com", "go", "openapi", "loads", "github", "NUMBER", "com", "xiwenc", "someService", "restapi", "github", "NUMBER", "com", "xiwenc", "someService", "restapi", "operations", "var", "testserver", "httptest", "NUMBER", "Server", "func", "setup", "swaggerSpec", "err", "loads", "NUMBER", "Analyzed", "restapi", "NUMBER", "SwaggerJSON", "if", "err", "nil", "log", "NUMBER", "Fatalln", "err", "api", "operations", "NUMBER", "ExampleServiceAPI", "swaggerSpec", "server", "restapi", "NUMBER", "NewServer", "api", "server", "NUMBER", "ConfigureAPI", "testserver", "httptest", "NUMBER", "NewServer", "server", "NUMBER", "GetHandler", "The", "propose", "change", "would", "enable", "easier", "usage", "of", "the", "handler", "in", "test", "func", "teardown", "testserver", "NUMBER", "Close", "func", "TestSample", "t", "test", "NUMBER", "T", "setup", "do", "some", "request", "to", "testserver", "NUMBER", "URL", "assert", "NUMBER", "Equal", "t", "NUMBER", "response", "NUMBER", "StatusCode", "Great", "success", "teardown", "Within", "the", "server", "complete", "example", "code", "show", "how", "someone", "would", "use", "the", "facilities", "for", "add", "command", "line", "flags", "NUMBER", "Closes", "NUMBER", "Signed", "off", "by", "Nelson", "Carpentier", "nelz", "NUMBER", "gmail", "NUMBER", "com", "casualjim", "ty", "Any", "suggestions", "on", "how", "to", "test", "this", "Seems", "like", "the", "test", "in", "scan", "classifier_test", "NUMBER", "go", "be", "similar", "maybe", "add", "model", "with", "embedded", "pointer", "in", "fixture", "goparsing", "classification", "models", "Didn", "t", "find", "an", "example", "that", "would", "test", "whether", "the", "JSON", "model", "be", "correct", "e", "NUMBER", "g", "NUMBER", "we", "want", "the", "embedded", "type", "to", "be", "there", "as", "optional", "NUMBER", "The", "commit", "change", "produces", "correct", "swagger", "as", "far", "as", "I", "can", "tell", "i", "NUMBER", "e", "NUMBER", "the", "members", "of", "embedded", "type", "be", "all", "there", "and", "optional", "NUMBER", "Problem", "statement", "Following", "code", "Go", "type", "A", "struct", "B", "causes", "error", "regardless", "of", "type", "of", "B", "unable", "to", "resolve", "embedded", "struct", "for", "NUMBER", "B", "Seems", "like", "the", "problem", "be", "that", "the", "scan", "schema", "NUMBER", "go", "parseEmbeddedType", "function", "do", "not", "support", "StarExpr", "NUMBER", "add", "support", "for", "byte", "uintptr", "add", "error", "for", "complex", "NUMBER", "complex", "NUMBER", "there", "s", "no", "default", "JSON", "marshaller", "change", "rune", "from", "string", "to", "int", "NUMBER", "according", "to", "Go", "docs", "Makes", "sense", "add", "for", "the", "valid", "types", "that", "we", "miss", "NUMBER", "Not", "sure", "how", "to", "add", "test", "for", "the", "complex", "types", "since", "it", "s", "a", "negative", "test", "meaning", "parsing", "should", "fail", "NUMBER", "Would", "it", "make", "sense", "to", "add", "a", "test", "to", "classifier_test", "NUMBER", "go", "something", "similar", "to", "other", "negative", "test", "like", "TestDuplicateAnnotations", "Updated", "pull", "request", "add", "miss", "positive", "unit", "test", "byte", "uintptr", "NUMBER", "Problem", "statement", "It", "s", "my", "first", "experience", "use", "go", "swagger", "in", "a", "project", "NUMBER", "I", "read", "tutorials", "and", "write", "some", "simple", "code", "NUMBER", "I", "have", "the", "following", "structure", "of", "the", "project", "example", "main", "NUMBER", "go", "go", "go", "generate", "swagger", "generate", "spec", "package", "main", "import", "fmt", "stackexchange", "example", "models", "func", "main", "user", "models", "NUMBER", "User", "NUMBER", "Martin", "fmt", "NUMBER", "Println", "user", "doc", "NUMBER", "go", "go", "Schemes", "http", "https", "Host", "localhost", "BasePath", "v", "NUMBER", "Version", "NUMBER", "License", "MIT", "LINK", "Consumes", "application", "json", "application", "xml", "Produces", "application", "json", "application", "xml", "swagger", "meta", "package", "main", "user", "NUMBER", "go", "go", "Copyright", "NUMBER", "go", "swagger", "maintainers", "Licensed", "under", "the", "Apache", "License", "Version", "NUMBER", "the", "License", "you", "may", "not", "use", "this", "file", "except", "in", "compliance", "with", "the", "License", "NUMBER", "You", "may", "obtain", "a", "copy", "of", "the", "License", "at", "LINK", "NUMBER", "Unless", "required", "by", "applicable", "law", "or", "agreed", "to", "in", "write", "software", "distributed", "under", "the", "License", "be", "distributed", "on", "an", "AS", "IS", "BASIS", "WITHOUT", "WARRANTIES", "OR", "CONDITIONS", "OF", "ANY", "KIND", "either", "express", "or", "implied", "NUMBER", "See", "the", "License", "for", "the", "specific", "language", "governing", "permissions", "and", "limitations", "under", "the", "License", "NUMBER", "package", "models", "User", "represents", "the", "user", "for", "this", "application", "A", "user", "be", "the", "security", "principal", "for", "this", "aplication", "NUMBER", "It", "s", "also", "use", "as", "one", "of", "main", "axis", "for", "report", "NUMBER", "A", "user", "can", "have", "friends", "with", "whom", "they", "can", "share", "what", "they", "like", "NUMBER", "swagger", "model", "type", "User", "struct", "the", "id", "for", "this", "user", "required", "true", "min", "NUMBER", "ID", "int", "NUMBER", "json", "id", "the", "name", "for", "this", "user", "required", "true", "min", "length", "NUMBER", "Name", "string", "json", "name", "Steps", "to", "reproduce", "I", "run", "go", "generate", "and", "get", "yml", "consumes", "application", "json", "application", "xml", "produces", "application", "json", "application", "xml", "schemes", "http", "https", "swagger", "NUMBER", "info", "license", "name", "MIT", "url", "LINK", "version", "NUMBER", "host", "localhost", "basePath", "v", "NUMBER", "paths", "definitions", "But", "don", "t", "understand", "how", "to", "deal", "with", "model", "annotation", "NUMBER", "casualjim", "Thanks", "for", "quick", "response", "now", "it", "s", "ok", "NUMBER", "I", "ll", "close", "the", "issue", "NUMBER", "Problem", "statement", "scan", "scanner", "NUMBER", "go", "function", "swaggerSchemaForType", "maps", "primitive", "Go", "types", "to", "swagger", "type", "format", "NUMBER", "It", "s", "miss", "some", "of", "Go", "builtin", "types", "NUMBER", "Error", "generate", "when", "unsupported", "type", "be", "use", "package", "reflect", "error", "be", "unknown", "primitive", "uintptr", "Steps", "to", "reproduce", "One", "of", "the", "miss", "types", "be", "uintptr", "which", "be", "use", "in", "e", "NUMBER", "g", "NUMBER", "Go", "reflect", "package", "error", "would", "be", "triggered", "by", "following", "example", "NUMBER", "Example", "code", "that", "triggers", "the", "error", "go", "import", "reflect", "User", "Use", "documentation", "here", "NUMBER", "swagger", "model", "type", "User", "struct", "reflect", "type", "for", "test", "reflect", "required", "false", "Rt", "reflect", "NUMBER", "Type", "json", "rt", "the", "id", "for", "this", "user", "required", "true", "Id", "int", "NUMBER", "json", "id", "Name", "string", "json", "name", "Swagger", "invocation", "bash", "swagger", "generate", "spec", "m", "package", "reflect", "error", "be", "unknown", "primitive", "uintptr", "Seems", "like", "a", "good", "solution", "would", "be", "to", "support", "all", "Go", "builtin", "types", "as", "listed", "at", "LINK", "LINK", "except", "for", "the", "Type", "types", "which", "be", "there", "for", "documentation", "purposes", "only", "NUMBER", "I", "be", "not", "sure", "what", "the", "swagger", "type", "format", "should", "be", "for", "the", "miss", "Go", "builtin", "types", "seems", "like", "some", "of", "them", "be", "not", "trivial", "to", "handle", "e", "NUMBER", "g", "NUMBER", "byte", "complex", "NUMBER", "After", "further", "investigation", "we", "figured", "out", "that", "based", "on", "Go", "builtin", "doc", "LINK", "the", "following", "change", "in", "swaggerSchemaForType", "might", "make", "sense", "ADD", "byte", "prop", "NUMBER", "Typed", "integer", "uint", "NUMBER", "ADD", "complex", "NUMBER", "complex", "NUMBER", "should", "cause", "error", "no", "default", "JSON", "marshaller", "CHANGE", "error", "OLD", "prop", "NUMBER", "Typed", "string", "NEW", "error", "it", "s", "an", "interface", "with", "no", "default", "JSON", "marshaller", "CHANGE", "rune", "OLD", "prop", "NUMBER", "Typed", "string", "NEW", "prop", "NUMBER", "Typed", "integer", "int", "NUMBER", "doc", "says", "rune", "be", "alias", "for", "int", "NUMBER", "it", "s", "encoded", "as", "a", "number", "ADD", "uintptr", "prop", "NUMBER", "Typed", "integer", "uint", "NUMBER", "Note", "about", "the", "error", "some", "implementations", "of", "error", "interface", "might", "be", "JSON", "encoded", "as", "a", "string", "however", "it", "seems", "to", "be", "dangerous", "to", "assume", "that", "it", "s", "always", "the", "case", "e", "NUMBER", "g", "NUMBER", "error", "NUMBER", "New", "creates", "error", "that", "be", "encoded", "as", "JSON", "empty", "object", "NUMBER", "If", "anybody", "wants", "to", "play", "with", "this", "LINK", "demostrates", "how", "Go", "builtin", "types", "be", "encoded", "to", "JSON", "NUMBER", "Please", "let", "me", "know", "what", "you", "think", "about", "these", "suggestions", "NUMBER", "Can", "join", "slack", "team", "which", "one", "Error", "yes", "that", "s", "tricky", "string", "makes", "sense", "lot", "of", "times", "NUMBER", "In", "general", "it", "s", "the", "same", "problem", "as", "other", "objects", "with", "JSON", "marshaller", "NUMBER", "They", "all", "show", "up", "as", "object", "in", "swagger", "model", "but", "might", "be", "actually", "something", "else", "in", "JSON", "representation", "which", "be", "the", "opne", "that", "be", "relevant", "to", "Rest", "API", "NUMBER", "E", "NUMBER", "g", "NUMBER", "use", "guregu", "null", "makes", "swagger", "docs", "misleading", "that", "was", "another", "issue", "I", "planned", "to", "file", "how", "to", "deal", "with", "these", "types", "of", "objects", "While", "this", "was", "fix", "in", "code", "the", "specification", "document", "was", "not", "update", "to", "reflect", "that", "NUMBER", "Could", "someone", "do", "so", "LINK", "do", "not", "list", "unsigned", "types", "uint", "NUMBER", "uint", "NUMBER", "complex", "NUMBER", "etc", "NUMBER", "I", "see", "sorry", "I", "m", "come", "in", "to", "this", "as", "an", "outsider", "I", "m", "work", "on", "a", "project", "that", "uses", "Swagger", "it", "be", "not", "Golang", "based", "and", "uses", "both", "the", "int", "NUMBER", "and", "uint", "NUMBER", "types", "NUMBER", "I", "came", "to", "the", "spec", "to", "try", "and", "verify", "that", "uint", "NUMBER", "was", "a", "valid", "type", "which", "per", "the", "spec", "I", "find", "be", "not", "NUMBER", "It", "s", "just", "confusing", "I", "be", "trying", "to", "find", "a", "definitive", "list", "of", "types", "that", "be", "valid", "within", "the", "Swagger", "IDL", "or", "documentation", "of", "mapping", "those", "to", "their", "individual", "languages", "implementations", "NUMBER", "Thanks", "and", "sorry", "if", "this", "isn", "t", "exactly", "the", "right", "venue", "for", "this", "conversation", "I", "ve", "notice", "that", "there", "be", "very", "little", "documentation", "on", "how", "to", "generate", "swagger", "file", "from", "annotations", "NUMBER", "Is", "this", "really", "all", "there", "be", "LINK", "How", "about", "some", "code", "examples", "that", "show", "annotations", "be", "use", "While", "I", "agree", "with", "the", "project", "vs", "NUMBER", "product", "sentiment", "it", "s", "difficult", "to", "help", "document", "something", "I", "don", "t", "understand", "NUMBER", "I", "have", "swagger", "generate", "work", "with", "routes", "but", "I", "m", "having", "trouble", "defining", "models", "and", "responses", "and", "link", "it", "all", "together", "for", "an", "exist", "code", "base", "NUMBER", "nathany", "the", "latest", "documentation", "for", "the", "code", "on", "master", "can", "be", "find", "here", "LINK", "swagger", "go", "swagger", "tree", "master", "docs", "generate", "spec", "Improvement", "of", "documentation", "be", "always", "a", "good", "request", "NUMBER", "You", "be", "in", "a", "unique", "position", "however", "as", "you", "be", "a", "newcomer", "and", "thus", "have", "the", "perspective", "that", "be", "perfectly", "fit", "to", "help", "with", "the", "improvement", "of", "documentation", "NUMBER", "Could", "you", "please", "add", "question", "here", "that", "be", "not", "answered", "by", "the", "documentation", "NUMBER", "Also", "any", "suggestions", "on", "what", "according", "to", "you", "be", "miss", "be", "always", "more", "then", "welcome", "GlenDC", "Thanks", "for", "the", "link", "NUMBER", "I", "see", "swagger", "operation", "be", "documented", "there", "but", "not", "yet", "on", "LINK", "Right", "now", "I", "m", "having", "some", "trouble", "get", "the", "Responses", "section", "work", "for", "swagger", "router", "including", "some", "routes", "that", "have", "just", "a", "status", "code", "with", "no", "other", "response", "NUMBER", "While", "searching", "around", "the", "code", "I", "also", "saw", "description", "for", "the", "route", "responses", "NUMBER", "There", "seems", "to", "be", "some", "inconsistency", "between", "what", "s", "documented", "and", "the", "examples", "lying", "around", "which", "makes", "me", "less", "certain", "why", "validation", "be", "fail", "also", "NUMBER", "NUMBER", "What", "I", "think", "would", "help", "the", "most", "be", "a", "tutorial", "that", "walks", "through", "generating", "swagger", "NUMBER", "json", "from", "code", "annotations", "assuming", "someone", "be", "come", "from", "an", "exist", "code", "base", "even", "if", "it", "were", "a", "to", "do", "app", "NUMBER", "I", "ve", "decided", "to", "write", "swagger", "NUMBER", "yml", "instead", "of", "use", "the", "code", "annotations", "for", "now", "NUMBER", "It", "s", "going", "well", "NUMBER", "nathany", "yes", "that", "s", "the", "recommended", "and", "more", "sane", "approach", "NUMBER", "Also", "saves", "you", "tons", "of", "work", "NUMBER", "Also", "in", "the", "end", "write", "annotations", "doesn", "t", "save", "that", "much", "work", "compared", "to", "write", "the", "spec", "as", "you", "end", "up", "write", "most", "of", "the", "stuff", "anyhow", "NUMBER", "None", "the", "less", "do", "not", "mean", "that", "annotations", "should", "not", "be", "well", "documented", "NUMBER", "Your", "tutorial", "suggestion", "be", "definitely", "a", "good", "idea", "NUMBER", "Could", "you", "please", "be", "a", "bit", "more", "clear", "about", "the", "other", "stuff", "Please", "be", "as", "clear", "as", "possible", "with", "the", "question", "and", "to", "what", "they", "relate", "NUMBER", "This", "way", "we", "can", "take", "it", "into", "account", "when", "improving", "the", "documentation", "NUMBER", "Regarding", "the", "other", "question", "in", "the", "swagger", "NUMBER", "yml", "I", "just", "write", "something", "like", "this", "for", "a", "route", "responses", "NUMBER", "description", "Created", "NUMBER", "description", "Bad", "request", "schema", "ref", "definitions", "error", "NUMBER", "description", "Unauthorized", "NUMBER", "description", "Unexpected", "error", "schema", "ref", "definitions", "error", "But", "I", "was", "having", "trouble", "get", "the", "equivalent", "to", "work", "as", "code", "annotations", "NUMBER", "Perhaps", "I", "just", "wasn", "t", "format", "it", "correctly", "NUMBER", "Problem", "statement", "use", "swagger", "editor", "will", "get", "error", "Swagger", "specification", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "Simple", "To", "Do", "List", "API", "securityDefinitions", "key", "type", "apiKey", "in", "header", "name", "x", "petstore", "token", "security", "key", "consumes", "application", "io", "NUMBER", "swagger", "NUMBER", "examples", "NUMBER", "todo", "list", "NUMBER", "v", "NUMBER", "json", "produces", "application", "io", "NUMBER", "swagger", "NUMBER", "examples", "NUMBER", "todo", "list", "NUMBER", "v", "NUMBER", "json", "schemes", "http", "https", "x", "schemes", "unix", "paths", "get", "tags", "todos", "operationId", "find", "parameters", "name", "limit", "in", "formData", "type", "integer", "format", "int", "NUMBER", "required", "true", "allowEmptyValue", "true", "name", "X", "Rate", "Limit", "in", "header", "type", "integer", "format", "int", "NUMBER", "required", "true", "name", "tags", "in", "formData", "type", "array", "collectionFormat", "multi", "allowEmptyValue", "true", "items", "type", "string", "format", "int", "NUMBER", "required", "true", "required", "true", "responses", "NUMBER", "description", "OK", "schema", "type", "array", "items", "ref", "definitions", "item", "default", "description", "error", "schema", "ref", "definitions", "error", "post", "tags", "todos", "operationId", "addOne", "parameters", "name", "body", "in", "body", "schema", "ref", "definitions", "item", "responses", "NUMBER", "description", "Created", "schema", "ref", "definitions", "item", "default", "description", "error", "schema", "ref", "definitions", "error", "id", "parameters", "type", "string", "name", "id", "in", "path", "required", "true", "put", "tags", "todos", "operationId", "updateOne", "parameters", "name", "body", "in", "body", "schema", "ref", "definitions", "item", "responses", "NUMBER", "description", "OK", "schema", "ref", "definitions", "item", "default", "description", "error", "schema", "ref", "definitions", "error", "delete", "tags", "todos", "operationId", "destroyOne", "responses", "NUMBER", "description", "Deleted", "default", "description", "error", "schema", "ref", "definitions", "error", "definitions", "item", "type", "object", "required", "description", "properties", "id", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "description", "type", "string", "minLength", "NUMBER", "completed", "type", "boolean", "error", "type", "object", "required", "message", "properties", "code", "type", "integer", "format", "int", "NUMBER", "message", "type", "string", "Steps", "to", "reproduce", "error", "Swagger", "Error", "Not", "a", "valid", "parameter", "definition", "Jump", "to", "line", "NUMBER", "Details", "Object", "thanks", "OK", "thanks", "NUMBER", "Problem", "statement", "I", "ve", "install", "go", "swagger", "use", "brew", "first", "time", "and", "then", "faced", "many", "issue", "with", "package", "renaming", "as", "the", "generate", "code", "had", "many", "package", "miss", "NUMBER", "Having", "gone", "through", "migration", "section", "I", "ve", "change", "it", "use", "a", "script", "but", "still", "was", "having", "issue", "with", "things", "like", "spec", "NUMBER", "Document", "and", "spec", "NUMBER", "SecurityScheme", "be", "moved", "around", "NUMBER", "As", "these", "file", "be", "auto", "generate", "seem", "like", "too", "much", "of", "an", "overhead", "to", "change", "them", "each", "time", "NUMBER", "Decided", "to", "uninstall", "and", "tried", "to", "re", "install", "from", "sources", "but", "now", "the", "swagger", "alias", "be", "gone", "NUMBER", "How", "do", "I", "add", "it", "What", "be", "I", "doing", "wrong", "in", "general", "Just", "seems", "like", "a", "simple", "example", "in", "LINK", "list", "doesn", "t", "work", "no", "matter", "what", "I", "try", "swagger", "generate", "server", "A", "TodoList", "f", "NUMBER", "swagger", "NUMBER", "yml", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "grouping", "operations", "into", "package", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "meta", "data", "and", "facades", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendering", "NUMBER", "models", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "item", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "handler", "template", "todos", "NUMBER", "AddOne", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "handler", "todos", "NUMBER", "AddOne", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "parameters", "template", "todos", "NUMBER", "AddOneParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "parameters", "todos", "NUMBER", "AddOneParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "responses", "template", "todos", "NUMBER", "AddOneResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "responses", "todos", "NUMBER", "AddOneResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "handler", "template", "todos", "NUMBER", "DestroyOne", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "handler", "todos", "NUMBER", "DestroyOne", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "parameters", "template", "todos", "NUMBER", "DestroyOneParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "parameters", "todos", "NUMBER", "DestroyOneParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "responses", "template", "todos", "NUMBER", "DestroyOneResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "responses", "todos", "NUMBER", "DestroyOneResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "handler", "template", "todos", "NUMBER", "Find", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "handler", "todos", "NUMBER", "Find", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "parameters", "template", "todos", "NUMBER", "FindParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "parameters", "todos", "NUMBER", "FindParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "responses", "template", "todos", "NUMBER", "FindResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "responses", "todos", "NUMBER", "FindResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "handler", "template", "todos", "NUMBER", "UpdateOne", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "handler", "todos", "NUMBER", "UpdateOne", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "parameters", "template", "todos", "NUMBER", "UpdateOneParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "parameters", "todos", "NUMBER", "UpdateOneParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "responses", "template", "todos", "NUMBER", "UpdateOneResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "responses", "todos", "NUMBER", "UpdateOneResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "embedded", "Swagger", "JSON", "template", "restapi", "NUMBER", "TodoList", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "builder", "template", "operations", "NUMBER", "TodoList", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "server", "template", "restapi", "NUMBER", "Server", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "configure", "api", "template", "operations", "NUMBER", "ConfigureTodoList", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "doc", "template", "operations", "NUMBER", "TodoList", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "main", "template", "server", "NUMBER", "TodoList", "find", "NUMBER", "NUMBER", "NUMBER", "cmd", "NUMBER", "cmd", "todo", "list", "server", "NUMBER", "cmd", "todo", "list", "server", "main", "NUMBER", "go", "NUMBER", "models", "NUMBER", "models", "error", "NUMBER", "go", "NUMBER", "models", "item", "NUMBER", "go", "NUMBER", "restapi", "NUMBER", "restapi", "configure_todo_list", "NUMBER", "go", "NUMBER", "restapi", "doc", "NUMBER", "go", "NUMBER", "restapi", "embedded_spec", "NUMBER", "go", "NUMBER", "restapi", "operations", "NUMBER", "restapi", "operations", "todo_list_api", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "NUMBER", "restapi", "operations", "todos", "add_one", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "add_one_parameters", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "add_one_responses", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "destroy_one", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "destroy_one_parameters", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "destroy_one_responses", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "find", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "find_parameters", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "find_responses", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "update_one", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "update_one_parameters", "NUMBER", "go", "NUMBER", "restapi", "operations", "todos", "update_one_responses", "NUMBER", "go", "NUMBER", "restapi", "server", "NUMBER", "go", "NUMBER", "swagger", "NUMBER", "yml", "go", "run", "NUMBER", "cmd", "todo", "list", "server", "main", "NUMBER", "go", "models", "error", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "error", "in", "any", "of", "usr", "local", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "error", "from", "GOROOT", "Users", "anton", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "error", "from", "GOPATH", "restapi", "operations", "todos", "add_one_responses", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "in", "any", "of", "usr", "local", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "from", "GOROOT", "Users", "anton", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "from", "GOPATH", "restapi", "operations", "todos", "add_one", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "in", "any", "of", "usr", "local", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "from", "GOROOT", "Users", "anton", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "from", "GOPATH", "restapi", "operations", "todo_list_api", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "security", "in", "any", "of", "usr", "local", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "security", "from", "GOROOT", "Users", "anton", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "security", "from", "GOPATH", "models", "error", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "validate", "in", "any", "of", "usr", "local", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "validate", "from", "GOROOT", "Users", "anton", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "validate", "from", "GOPATH", "restapi", "operations", "todo_list_api", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "spec", "in", "any", "of", "usr", "local", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "spec", "from", "GOROOT", "Users", "anton", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "spec", "from", "GOPATH", "models", "error", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "in", "any", "of", "usr", "local", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "from", "GOROOT", "Users", "anton", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "from", "GOPATH", "restapi", "operations", "todos", "find_parameters", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "swag", "in", "any", "of", "usr", "local", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "swag", "from", "GOROOT", "Users", "anton", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "swag", "from", "GOPATH", "After", "replacing", "paths", "still", "go", "run", "NUMBER", "cmd", "todo", "list", "server", "main", "NUMBER", "go", "restapi", "operations", "todo_list_api", "NUMBER", "go", "NUMBER", "undefined", "spec", "NUMBER", "Document", "You", "be", "run", "very", "old", "version", "of", "go", "swagger", "please", "consider", "update", "it", "NUMBER", "Most", "of", "those", "package", "that", "you", "see", "be", "moved", "to", "go", "openapi", "relatively", "long", "time", "ago", "NUMBER", "More", "than", "happy", "to", "do", "it", "but", "how", "Brew", "seems", "to", "install", "an", "old", "one", "NUMBER", "The", "github", "version", "doesn", "t", "create", "the", "alias", "for", "the", "swagger", "command", "to", "run", "the", "generator", "NUMBER", "Just", "install", "swagger", "from", "sources", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "anyway", "you", "will", "still", "need", "to", "pull", "all", "dependencies", "NUMBER", "Yes", "I", "ve", "do", "that", "how", "do", "I", "get", "swagger", "in", "command", "line", "Symlink", "your", "binary", "be", "install", "into", "GOBIN", "NUMBER", "So", "just", "add", "appropriate", "path", "into", "your", "PATH", "NUMBER", "Thank", "a", "lot", "it", "s", "all", "work", "now", "Perhaps", "you", "should", "kill", "the", "brew", "version", "it", "only", "confuses", "things", "NUMBER", "I", "m", "digging", "dead", "bodies", "here", "I", "run", "into", "the", "same", "problem", "as", "aroslov", "irw", "undefined", "spec", "NUMBER", "Document", "I", "ve", "install", "swagger", "from", "sources", "pull", "dependencies", "and", "did", "the", "proper", "path", "replacements", "NUMBER", "swagger", "version", "returns", "NUMBER", "I", "ve", "looked", "a", "bit", "into", "the", "spec", "package", "there", "s", "no", "Document", "type", "hence", "the", "error", "somewhere", "I", "guess", "I", "m", "way", "off", "with", "code", "version", "Anything", "I", "may", "still", "be", "overlooking", "here", "Thanks", "NUMBER", "Thanks", "just", "get", "my", "swagger", "server", "up", "and", "run", "NUMBER", "Problem", "statement", "The", "generate", "handler", "function", "for", "a", "request", "without", "parameters", "do", "not", "allow", "one", "to", "access", "the", "original", "HTTP", "request", "because", "it", "do", "not", "have", "a", "params", "object", "in", "the", "signature", "NUMBER", "For", "the", "swagger", "snippet", "below", "I", "see", "the", "following", "handler", "be", "generate", "in", "the", "configure_whatever", "NUMBER", "go", "api", "NUMBER", "HealthGetHealthHandler", "health", "NUMBER", "GetHealthHandlerFunc", "func", "middleware", "NUMBER", "Responder", "return", "middleware", "NUMBER", "NotImplemented", "operation", "health", "NUMBER", "GetHealth", "has", "not", "yet", "be", "implement", "There", "be", "no", "argument", "in", "the", "signature", "that", "allows", "me", "to", "access", "the", "original", "HTTP", "request", "to", "for", "example", "read", "an", "HTTP", "header", "NUMBER", "Swagger", "specification", "swagger", "NUMBER", "info", "title", "Swagger", "issue", "description", "foobar", "version", "NUMBER", "host", "example", "NUMBER", "com", "schemes", "http", "basePath", "v", "NUMBER", "consumes", "application", "json", "produces", "application", "json", "paths", "health", "get", "summary", "Health", "check", "resource", "description", "Checks", "the", "health", "of", "the", "API", "NUMBER", "tags", "Health", "responses", "NUMBER", "description", "Service", "be", "healty", "schema", "ref", "definitions", "Health", "NUMBER", "description", "Service", "not", "available", "definitions", "Health", "type", "object", "properties", "status", "type", "string", "description", "Short", "status", "message", "about", "the", "health", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Generate", "server", "swagger", "generate", "server", "f", "swagger", "NUMBER", "yml", "NUMBER", "Look", "at", "the", "handler", "and", "try", "go", "access", "original", "request", "NUMBER", "I", "be", "having", "the", "same", "problem", "NUMBER", "frosenberg", "were", "you", "able", "to", "work", "around", "this", "aocole", "what", "I", "did", "was", "to", "declare", "the", "headers", "I", "needed", "as", "optional", "parameters", "at", "the", "top", "level", "like", "this", "Optional", "header", "parameters", "parameters", "DlaasGroup", "name", "X", "DLaaS", "Roles", "description", "Roles", "of", "a", "user", "type", "string", "in", "header", "required", "false", "Then", "in", "my", "resources", "I", "just", "reference", "them", "paths", "tickets", "parameters", "ref", "parameters", "DlaasGroup", "post", "summary", "NUMBER", "description", "NUMBER", "This", "way", "the", "client", "and", "server", "have", "explicit", "methods", "to", "set", "get", "them", "NUMBER", "Not", "ideal", "but", "it", "works", "NUMBER", "Since", "the", "header", "be", "come", "from", "our", "proxy", "the", "client", "wont", "need", "to", "set", "them", "and", "I", "would", "have", "preferred", "to", "handle", "transparently", "for", "the", "user", "but", "that", "be", "an", "OK", "solution", "for", "now", "NUMBER", "casualjim", "s", "fix", "looks", "like", "it", "should", "do", "exactly", "what", "I", "need", "but", "I", "have", "not", "had", "time", "to", "look", "at", "it", "NUMBER", "That", "s", "a", "good", "workaround", "frosenberg", "NUMBER", "I", "be", "going", "to", "backport", "casualjim", "s", "fix", "from", "NUMBER", "in", "to", "a", "fork", "until", "I", "can", "upgrade", "after", "NUMBER", "When", "compile", "go", "swagger", "v", "NUMBER", "the", "tarball", "from", "LINK", "swagger", "go", "swagger", "release", "git", "snapshot", "fade", "NUMBER", "c", "NUMBER", "I", "get", "this", "error", "go", "swagger", "cmd", "swagger", "scan", "classifier", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "golang", "NUMBER", "org", "x", "tool", "go", "loader", "in", "any", "of", "var", "tmp", "portage", "dev", "util", "go", "swagger", "NUMBER", "work", "gopath", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "golang", "NUMBER", "org", "x", "tool", "go", "loader", "vendor", "tree", "usr", "lib", "go", "src", "golang", "NUMBER", "org", "x", "tool", "go", "loader", "from", "GOROOT", "var", "tmp", "portage", "dev", "util", "go", "swagger", "NUMBER", "work", "gopath", "src", "golang", "NUMBER", "org", "x", "tool", "go", "loader", "from", "GOPATH", "generator", "shared", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "golang", "NUMBER", "org", "x", "tool", "imports", "in", "any", "of", "var", "tmp", "portage", "dev", "util", "go", "swagger", "NUMBER", "work", "gopath", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "golang", "NUMBER", "org", "x", "tool", "imports", "vendor", "tree", "usr", "lib", "go", "src", "golang", "NUMBER", "org", "x", "tool", "imports", "from", "GOROOT", "var", "tmp", "portage", "dev", "util", "go", "swagger", "NUMBER", "work", "gopath", "src", "golang", "NUMBER", "org", "x", "tool", "imports", "from", "GOPATH", "It", "s", "the", "same", "issue", "from", "NUMBER", "but", "on", "a", "different", "golang", "NUMBER", "org", "x", "tool", "subpackage", "NUMBER", "What", "be", "the", "go", "version", "you", "re", "use", "go", "NUMBER", "and", "go", "NUMBER", "However", "I", "want", "to", "find", "out", "what", "be", "cause", "this", "build", "failure", "and", "why", "none", "of", "my", "ci", "envs", "pick", "it", "up", "NUMBER", "I", "can", "only", "guess", "maybe", "your", "CI", "environments", "have", "a", "copy", "of", "the", "miss", "subpackes", "somewhere", "inside", "your", "GOPATH", "or", "GOROOT", "leading", "to", "a", "successful", "compilation", "even", "if", "those", "subpackages", "be", "not", "present", "within", "the", "vendor", "directory", "NUMBER", "When", "I", "package", "go", "swagger", "for", "Gentoo", "Linux", "I", "use", "a", "GOROOT", "GOPATH", "workspace", "where", "there", "be", "nothing", "inside", "except", "for", "the", "go", "standard", "library", "usually", "in", "usr", "lib", "go", "make", "easy", "to", "detect", "miss", "vendored", "dependencies", "NUMBER", "I", "would", "check", "for", "copies", "of", "the", "golang", "NUMBER", "org", "x", "tool", "package", "with", "the", "find", "tool", "on", "all", "yours", "CI", "envs", "in", "case", "make", "sure", "that", "you", "be", "not", "reusing", "old", "precompiled", "go", "objects", "by", "remove", "all", "the", "pkg", "subdirectories", "every", "time", "you", "run", "a", "test", "on", "the", "CI", "NUMBER", "Thank", "you", "casualjim", "NUMBER", "v", "NUMBER", "successfully", "packaged", "for", "Gentoo", "Linux", "LINK", "Terrible", "go", "overlay", "tree", "master", "dev", "util", "go", "swagger", "without", "any", "problem", "NUMBER", "NUMBER", "Everything", "compiles", "as", "expected", "and", "go", "swagger", "seems", "to", "work", "correctly", "ode", "for", "string", "enums", "Problem", "statement", "If", "i", "try", "to", "use", "the", "principal", "flag", "during", "server", "generation", "the", "resulting", "code", "fail", "to", "compile", "NUMBER", "swagger", "version", "returns", "NUMBER", "NUMBER", "gfffb", "NUMBER", "b", "NUMBER", "Swagger", "specification", "The", "specification", "needs", "to", "include", "a", "security", "definition", "NUMBER", "e", "NUMBER", "g", "NUMBER", "yaml", "securityDefinitions", "bearer", "type", "apiKey", "name", "Authorization", "in", "header", "Steps", "to", "reproduce", "bash", "swagger", "generate", "server", "principal", "my", "NUMBER", "Principal", "bash", "go", "build", "NUMBER", "my_api", "NUMBER", "go", "NUMBER", "cannot", "use", "o", "NUMBER", "BearerAuth", "type", "func", "string", "my", "NUMBER", "Principal", "error", "as", "type", "security", "NUMBER", "TokenAuthentication", "in", "argument", "to", "security", "NUMBER", "APIKeyAuth", "To", "resolve", "the", "issue", "all", "I", "had", "to", "do", "was", "alter", "NUMBER", "of", "the", "generate", "file", "NUMBER", "_example_api", "NUMBER", "go_", "diff", "BearerAuth", "func", "string", "my", "NUMBER", "Principal", "error", "BearerAuth", "func", "string", "interface", "error", "_configure_example", "NUMBER", "go_", "diff", "api", "NUMBER", "BearerAuth", "func", "token", "string", "my", "NUMBER", "Principal", "error", "api", "NUMBER", "BearerAuth", "func", "token", "string", "interface", "error", "I", "was", "then", "successfully", "able", "to", "return", "my", "NUMBER", "Principal", "NUMBER", "nil", "from", "configure_example", "NUMBER", "go", "and", "have", "it", "pass", "into", "the", "api", "handler", "with", "the", "correct", "type", "NUMBER", "_configure_example", "NUMBER", "go_", "api", "NUMBER", "ExampleOpHandler", "example", "NUMBER", "OpHandlerFunc", "func", "ctx", "context", "NUMBER", "Context", "params", "example", "NUMBER", "OpGetParams", "principal", "my", "NUMBER", "Principal", "middleware", "NUMBER", "Responder", "foo", "principal", "NUMBER", "Foo", "NUMBER", "I", "have", "seen", "this", "as", "well", "I", "must", "admit", "that", "I", "only", "ever", "tried", "a", "struct", "and", "not", "an", "interface", "NUMBER", "However", "the", "outcome", "be", "the", "same", "if", "its", "a", "struct", "created", "from", "a", "definition", "in", "the", "swagger", "specification", "file", "or", "if", "its", "a", "standalone", "struct", "defined", "in", "another", "library", "NUMBER", "I", "see", "the", "same", "thing", "after", "update", "to", "the", "latest", "go", "swagger", "NUMBER", "My", "principle", "be", "a", "custom", "struct", "too", "NUMBER", "For", "what", "I", "see", "the", "bug", "was", "introduce", "in", "the", "oauth", "NUMBER", "merge", "here", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "ed", "NUMBER", "d", "NUMBER", "afc", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "c", "NUMBER", "ff", "NUMBER", "cd", "NUMBER", "a", "NUMBER", "b", "NUMBER", "Line", "NUMBER", "in", "generator", "template", "server", "builder", "NUMBER", "gotmpl", "has", "be", "simplified", "and", "the", "bug", "was", "introduce", "NUMBER", "The", "footprint", "of", "the", "API", "key", "function", "be", "not", "func", "string", "interface", "error", "when", "a", "custom", "principal", "be", "use", "so", "a", "type", "error", "appears", "NUMBER", "Works", "for", "me", "now", "NUMBER", "Problem", "statement", "I", "cant", "get", "the", "swagger", "ui", "to", "run", "in", "the", "browser", "NUMBER", "In", "the", "browser", "LINK", "ui", "gets", "me", "This", "page", "contains", "the", "following", "error", "error", "on", "line", "NUMBER", "at", "column", "NUMBER", "Document", "be", "empty", "Below", "be", "a", "rendering", "of", "the", "page", "up", "to", "the", "first", "error", "NUMBER", "i", "be", "use", "the", "petsotre", "example", "NUMBER", "I", "pull", "the", "code", "yesterday", "so", "its", "fresh", "NUMBER", "On", "my", "terminal", "i", "have", "the", "following", "Validate", "swagger", "validate", "NUMBER", "swagger", "NUMBER", "json", "Delete", "old", "rm", "rf", "cmd", "rm", "rf", "cmd", "rm", "rf", "models", "rm", "rf", "restapi", "Gen", "swagger", "generate", "server", "A", "IssueTracker", "f", "NUMBER", "swagger", "NUMBER", "yml", "swagger", "generate", "server", "A", "PetStore", "f", "NUMBER", "swagger", "NUMBER", "json", "swagger", "generate", "client", "A", "PetStore", "f", "NUMBER", "swagger", "NUMBER", "json", "go", "build", "cmd", "pet", "store", "server", "main", "NUMBER", "go", "NUMBER", "main", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Serving", "pet", "store", "at", "LINK", "LINK", "works", "returning", "the", "json", "file", "NUMBER", "LINK", "returns", "the", "same", "error", "message", "of", "code", "NUMBER", "message", "path", "was", "not", "find", "How", "to", "enable", "cors", "That", "s", "the", "likely", "culprit", "NUMBER", "I", "could", "not", "fing", "it", "anywhere", "On", "Fri", "NUMBER", "May", "NUMBER", "NUMBER", "NUMBER", "Ivan", "Porto", "Carrero", "notifications", "github", "NUMBER", "com", "write", "I", "don", "t", "quite", "understand", "the", "problem", "yet", "NUMBER", "The", "error", "message", "comes", "when", "you", "try", "to", "call", "the", "petstore", "api", "or", "when", "you", "try", "to", "load", "the", "swagger", "ui", "You", "re", "use", "the", "swagger", "ui", "docker", "container", "Did", "you", "add", "a", "CORS", "middleware", "to", "your", "swagger", "server", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "issuecomment", "NUMBER", "or", "mute", "the", "thread", "LINK", "_Il", "NUMBER", "CkUp", "NUMBER", "csJHG", "NUMBER", "Yxcemks", "NUMBER", "qFwJwgaJpZM", "NUMBER", "IojE", "NUMBER", "NUMBER", "joeblew", "NUMBER", "you", "probably", "already", "figured", "it", "out", "NUMBER", "To", "help", "other", "googlers", "_don", "t_", "forget", "to", "add", "v", "NUMBER", "prefix", "or", "or", "whatever", "you", "have", "specified", "in", "basePath", "NUMBER", "Problem", "statement", "There", "s", "supposed", "to", "be", "two", "tutorials", "in", "the", "Use", "section", "on", "goswagger", "NUMBER", "io", "LINK", "web", "site", "LINK", "and", "LINK", "Pages", "look", "incomplete", "and", "abandoned", "so", "I", "d", "propose", "to", "remove", "or", "complete", "them", "to", "avoid", "confusion", "NUMBER", "I", "m", "also", "trying", "to", "access", "the", "dynamic", "API", "definition", "page", "and", "it", "be", "not", "finished", "NUMBER", "Is", "that", "dynamic", "API", "definition", "still", "a", "feature", "Since", "new", "documentation", "website", "be", "release", "I", "think", "this", "issue", "could", "be", "close", "NUMBER", "Problem", "statement", "When", "i", "do", "the", "todo", "list", "tutorial", "and", "generate", "the", "code", "the", "todo", "list", "restapi", "configure_todo_list", "NUMBER", "go", "has", "import", "error", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "error", "and", "refuses", "to", "compile", "NUMBER", "But", "when", "i", "look", "at", "the", "example", "in", "the", "go", "swagger", "repo", "the", "todo", "list", "restapi", "configure_todo_list", "NUMBER", "go", "has", "error", "github", "NUMBER", "com", "go", "openapi", "error", "Please", "remove", "the", "sections", "that", "don", "t", "apply", "Swagger", "specification", "Steps", "to", "reproduce", "I", "have", "latest", "golang", "and", "be", "use", "the", "latest", "binary", "of", "swagger", "to", "do", "my", "generation", "from", "NUMBER", "ok", "that", "fix", "it", "NUMBER", "all", "the", "build", "error", "be", "gone", "I", "use", "gvt", "for", "vendoring", "and", "had", "to", "just", "bring", "in", "NUMBER", "or", "NUMBER", "libs", "from", "the", "openAPI", "account", "LINK", "openapi", "But", "i", "have", "one", "line", "that", "will", "not", "compile", "and", "not", "sure", "if", "its", "your", "code", "or", "a", "lib", "From", "cmd", "todo", "list", "server", "x", "MacBook", "Pro", "todo", "list", "server", "apple", "go", "build", "github", "NUMBER", "com", "test", "go", "gedw", "NUMBER", "go", "service", "restapi", "operations", "todos", "NUMBER", "NUMBER", "restapi", "operations", "todos", "get_parameters", "NUMBER", "go", "NUMBER", "undefined", "middleware", "in", "middleware", "NUMBER", "MatchedRoute", "no", "its", "not", "that", "NUMBER", "gvt", "already", "brought", "it", "in", "via", "the", "gvt", "fetch", "github", "NUMBER", "com", "go", "openapi", "runtime", "Still", "hunting", "for", "what", "it", "might", "be", "NUMBER", "I", "get", "the", "todo", "list", "task", "tracker", "work", "off", "yml", "and", "json", "file", "NUMBER", "BTW", "i", "use", "a", "generic", "YAML", "JSON", "tool", "to", "make", "JSON", "and", "it", "works", "perfectly", "NUMBER", "It", "also", "can", "convert", "the", "other", "way", "NUMBER", "Might", "be", "useful", "for", "you", "because", "you", "can", "automate", "it", "in", "the", "core", "CI", "test", "if", "you", "want", "NUMBER", "I", "know", "why", "it", "did", "not", "work", "NUMBER", "i", "was", "calling", "the", "gen", "and", "build", "scripts", "i", "had", "write", "from", "too", "deep", "down", "NUMBER", "Once", "i", "just", "copied", "the", "swagger", "NUMBER", "json", "and", "run", "the", "scripts", "it", "all", "worked", "perfectly", "NUMBER", "Nice", "work", "The", "attached", "swagger", "file", "has", "recursive", "ancestor", "refs", "NUMBER", "Validation", "overflows", "NUMBER", "The", "stack", "trace", "be", "attached", "NUMBER", "Swagger", "as", "NUMBER", "txt", "file", "refs", "recursive", "circular", "ancestor", "invalid", "NUMBER", "txt", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "refs", "recursive", "circular", "ancestor", "invalid", "NUMBER", "txt", "Stack", "trace", "refs", "recursive", "circular", "ancestor", "invalid", "stack", "NUMBER", "txt", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "refs", "recursive", "circular", "ancestor", "invalid", "stack", "NUMBER", "txt", "The", "following", "swagger", "has", "duplicate", "operationId", "s", "but", "they", "be", "not", "report", "NUMBER", "NUMBER", "NUMBER", "gfffb", "NUMBER", "b", "NUMBER", "swagger", "NUMBER", "info", "description", "duplicateprops", "version", "NUMBER", "title", "duplicateprops", "host", "petstore", "NUMBER", "swagger", "NUMBER", "wordnik", "NUMBER", "com", "basePath", "v", "NUMBER", "schemes", "http", "paths", "pets", "get", "operationId", "getPets", "responses", "default", "description", "Generic", "Error", "post", "operationId", "getPets", "responses", "default", "description", "Generic", "Error", "humans", "get", "operationId", "getPets", "responses", "default", "description", "Generic", "Error", "post", "operationId", "getPets", "responses", "default", "description", "Generic", "Error", "Problem", "statement", "My", "uses", "case", "be", "that", "I", "need", "to", "support", "react", "react", "native", "apps", "NUMBER", "These", "use", "the", "fetch", "api", "NUMBER", "Does", "go", "swagger", "support", "this", "Thanks", "NUMBER", "I", "will", "test", "it", "to", "be", "sure", "NUMBER", "go", "swagger", "vendor", "github", "NUMBER", "com", "go", "openapi", "validate", "especially", "spec", "NUMBER", "go", "has", "code", "that", "performs", "semantic", "validation", "of", "a", "swagger", "document", "NUMBER", "In", "the", "past", "I", "find", "go", "swagger", "validate", "for", "run", "test", "and", "go", "swagger", "fixture", "validation", "as", "json", "input", "to", "the", "test", "NUMBER", "Where", "be", "the", "validator", "test", "code", "and", "input", "file", "thanks", "Problem", "statement", "If", "there", "be", "a", "model", "that", "uses", "array", "of", "another", "model", "there", "be", "no", "validation", "code", "be", "generate", "that", "calls", "Validate", "of", "each", "array", "item", "NUMBER", "Swagger", "specification", "swagger", "NUMBER", "definitions", "m", "NUMBER", "type", "object", "required", "f", "NUMBER", "properties", "f", "NUMBER", "type", "string", "minLength", "NUMBER", "maxLength", "NUMBER", "f", "NUMBER", "type", "array", "minItems", "NUMBER", "maxItems", "NUMBER", "items", "ref", "definitions", "m", "NUMBER", "m", "NUMBER", "type", "object", "required", "k", "NUMBER", "properties", "k", "NUMBER", "type", "string", "minLength", "NUMBER", "maxLength", "NUMBER", "info", "description", "test", "title", "test", "version", "NUMBER", "paths", "Just", "length", "check", "NUMBER", "func", "m", "M", "NUMBER", "validateF", "NUMBER", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "swag", "NUMBER", "IsZero", "m", "NUMBER", "F", "NUMBER", "not", "required", "return", "nil", "iF", "NUMBER", "Size", "int", "NUMBER", "len", "m", "NUMBER", "F", "NUMBER", "if", "err", "validate", "NUMBER", "MinItems", "f", "NUMBER", "body", "iF", "NUMBER", "Size", "NUMBER", "err", "nil", "return", "err", "if", "err", "validate", "NUMBER", "MaxItems", "f", "NUMBER", "body", "iF", "NUMBER", "Size", "NUMBER", "err", "nil", "return", "err", "return", "nil", "Problem", "statement", "When", "enum", "be", "specified", "and", "send", "a", "correct", "parameter", "type", "in", "formData", "should", "be", "one", "of", "NUMBER", "NUMBER", "returned", "always", "NUMBER", "go", "swagger", "generates", "validator", "code", "as", "follows", "if", "enum", "specified", "NUMBER", "func", "o", "GetFooJSONParams", "validateType", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Enum", "type", "formData", "o", "NUMBER", "Type", "interface", "NUMBER", "NUMBER", "err", "nil", "return", "err", "return", "nil", "Here", "o", "NUMBER", "Type", "be", "int", "NUMBER", "because", "all", "integer", "converted", "to", "int", "NUMBER", "And", "interface", "NUMBER", "NUMBER", "be", "an", "int", "NUMBER", "So", "reflect", "NUMBER", "DeepEqual", "in", "a", "validate", "NUMBER", "Enum", "always", "return", "EnumFail", "NUMBER", "Swagger", "specification", "example", "get", "parameters", "name", "type", "type", "integer", "in", "query", "enum", "NUMBER", "NUMBER", "How", "to", "fix", "If", "I", "change", "these", "like", "this", "manually", "if", "err", "validate", "NUMBER", "Enum", "type", "formData", "o", "NUMBER", "Type", "int", "NUMBER", "NUMBER", "NUMBER", "err", "nil", "it", "works", "fine", "for", "me", "NUMBER", "So", "could", "you", "change", "to", "a", "template", "to", "use", "actual", "go", "type", "Thank", "you", "I", "confirmed", "NUMBER", "Thank", "you", "very", "much", "Signed", "off", "by", "Jake", "Burkhead", "jake", "NUMBER", "b", "socialcodeinc", "NUMBER", "com", "relate", "to", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "Closes", "NUMBER", "Yeah", "because", "it", "s", "comparing", "the", "good", "name", "to", "the", "old", "typo", "api", "NUMBER", "Mulitpart", "NUMBER", "NUMBER", "Didn", "t", "look", "back", "in", "the", "code", "but", "I", "d", "guess", "it", "be", "miss", "more", "change", "NUMBER", "Notice", "I", "had", "also", "fix", "the", "same", "typo", "in", "go", "openapi", "error", "so", "it", "s", "possible", "there", "s", "more", "in", "other", "package", "NUMBER", "Should", "be", "good", "now", "NUMBER", "Idea", "Sometimes", "it", "be", "just", "useful", "to", "have", "a", "model", "that", "I", "could", "use", "internally", "config", "etc", "NUMBER", "Of", "course", "I", "could", "use", "a", "protobuf", "or", "something", "similar", "to", "generate", "them", "but", "it", "feels", "a", "little", "redundant", "if", "swagger", "can", "already", "generate", "models", "from", "the", "spec", "even", "with", "validators", "which", "be", "really", "good", "for", "things", "like", "config", "NUMBER", "So", "it", "would", "be", "awesome", "to", "add", "some", "separate", "model", "generator", "to", "just", "generate", "models", "without", "any", "APIs", "etc", "NUMBER", "Thoughts", "It", "be", "already", "in", "Yay", "Problem", "statement", "If", "the", "response", "type", "of", "one", "of", "your", "endpoints", "be", "type", "file", "the", "generate", "Go", "code", "returns", "a", "runtime", "NUMBER", "File", "which", "be", "meant", "for", "uploads", "NUMBER", "My", "case", "be", "an", "API", "that", "returns", "mostly", "JSON", "but", "some", "of", "the", "endpoints", "return", "file", "associated", "to", "users", "NUMBER", "Swagger", "specification", "Here", "s", "my", "spec", "without", "the", "actual", "API", "only", "the", "file", "download", "endpoint", "swagger", "NUMBER", "info", "description", "API", "File", "download", "title", "Test", "version", "NUMBER", "schemes", "http", "consumes", "application", "json", "produces", "application", "json", "paths", "some", "file", "NUMBER", "txt", "get", "operationId", "someFile", "produces", "application", "octet", "stream", "responses", "NUMBER", "description", "download", "file", "schema", "type", "file", "Steps", "to", "reproduce", "Generate", "the", "code", "look", "at", "restpi", "operations", "some_file_response", "NUMBER", "go", "type", "SomeFileOK", "struct", "In", "body", "Payload", "runtime", "NUMBER", "File", "json", "body", "omitempty", "That", "be", "definitely", "not", "what", "I", "want", "NUMBER", "I", "start", "looking", "around", "in", "the", "swagger", "package", "and", "go", "openapi", "for", "a", "middleware", "NUMBER", "Responder", "for", "octet", "streams", "and", "couldn", "t", "find", "one", "NUMBER", "I", "m", "currently", "use", "this", "as", "a", "workaround", "in", "my", "handlers", "func", "NewOctetStream", "f", "os", "NUMBER", "File", "middleware", "NUMBER", "Responder", "return", "middleware", "NUMBER", "ResponderFunc", "func", "w", "http", "NUMBER", "ResponseWriter", "_", "runtime", "NUMBER", "Producer", "fn", "filepath", "NUMBER", "Base", "f", "NUMBER", "Name", "w", "NUMBER", "Header", "NUMBER", "Set", "Content", "Type", "application", "octet", "stream", "w", "NUMBER", "Header", "NUMBER", "Set", "Content", "Disposition", "fmt", "NUMBER", "Sprintf", "attachment", "filename", "q", "fn", "io", "NUMBER", "Copy", "w", "f", "f", "NUMBER", "Close", "There", "be", "many", "downsides", "to", "this", "despite", "solving", "my", "problem", "NUMBER", "For", "one", "looks", "very", "hack", "ish", "because", "the", "producer", "be", "ignored", "NUMBER", "Also", "you", "cannot", "defer", "f", "NUMBER", "Close", "in", "the", "handler", "because", "the", "middleware", "executes", "after", "you", "return", "NUMBER", "That", "forces", "me", "to", "take", "ownership", "of", "the", "file", "in", "the", "mw", "and", "close", "it", "there", "NUMBER", "Is", "this", "a", "gap", "in", "the", "current", "implementation", "or", "be", "I", "completely", "off", "I", "tried", "use", "string", "and", "format", "binary", "NUMBER", "Why", "do", "I", "get", "an", "io", "NUMBER", "Writer", "as", "a", "result", "on", "the", "client", "I", "m", "not", "sure", "I", "follow", "NUMBER", "Maybe", "you", "have", "a", "sample", "of", "can", "point", "me", "to", "the", "code", "NUMBER", "casualjim", "has", "the", "fix", "gone", "into", "master", "yet", "What", "do", "the", "API", "look", "like", "with", "this", "change", "I", "m", "curious", "NUMBER", "Works", "for", "me", "Thanks", "When", "trying", "to", "generate", "a", "swagger", "spec", "from", "my", "Go", "code", "annotations", "it", "will", "fail", "sometimes", "saying", "it", "cannot", "find", "an", "external", "package", "in", "GOPATH", "GOROOT", "etc", "NUMBER", "I", "use", "gb", "LINK", "to", "build", "my", "app", "and", "it", "uses", "a", "folder", "call", "vendor", "src", "to", "store", "third", "party", "dependencies", "NUMBER", "I", "would", "prefer", "not", "to", "have", "to", "also", "add", "these", "dependencies", "to", "my", "GOPATH", "just", "to", "generate", "docs", "NUMBER", "Can", "this", "be", "add", "as", "a", "path", "to", "search", "like", "the", "vendor", "directory", "was", "add", "for", "Go", "NUMBER", "and", "above", "I", "can", "dig", "into", "the", "code", "today", "and", "see", "NUMBER", "It", "makes", "sense", "to", "not", "want", "to", "support", "every", "third", "party", "tool", "for", "dependency", "management", "since", "they", "be", "a", "dime", "a", "dozen", "but", "if", "it", "s", "trivial", "to", "add", "then", "that", "would", "be", "awesome", "NUMBER", "So", "I", "think", "the", "line", "that", "generates", "the", "error", "I", "be", "seeing", "be", "here", "LINK", "swagger", "go", "swagger", "blob", "dccba", "NUMBER", "c", "NUMBER", "fcbec", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "a", "NUMBER", "ebaab", "NUMBER", "vendor", "golang", "NUMBER", "org", "x", "tool", "imports", "fix", "NUMBER", "go", "L", "NUMBER", "NUMBER", "Since", "this", "uses", "the", "Go", "standard", "library", "parser", "I", "can", "see", "not", "wanting", "to", "patch", "this", "NUMBER", "You", "can", "go", "ahead", "and", "close", "this", "if", "you", "agree", "NUMBER", "Yeah", "I", "think", "add", "a", "slice", "of", "extra", "paths", "to", "the", "options", "struct", "and", "then", "calling", "Import", "could", "be", "an", "option", "NUMBER", "I", "ended", "up", "moving", "to", "another", "build", "tool", "so", "I", "will", "close", "this", "issue", "NUMBER", "Thanks", "again", "NUMBER", "Signed", "off", "by", "Todd", "Neal", "todd", "tneal", "NUMBER", "org", "Ive", "fix", "template", "file", "for", "code", "generation", "of", "put", "request", "params", "Problem", "statement", "For", "optional", "primitive", "field", "generate", "model", "code", "can", "no", "longer", "distinguish", "null", "JSON", "values", "from", "default", "zero", "values", "NUMBER", "This", "be", "due", "to", "models", "no", "longer", "use", "pointers", "NUMBER", "For", "example", "model", "code", "cannot", "differentiate", "email_address", "null", "from", "email_address", "NUMBER", "Swagger", "specification", "definitions", "CreatePersonRequest", "type", "object", "properties", "email_address", "type", "string", "description", "Optional", "email", "address", "This", "now", "generates", "type", "CreatePersonRequest", "struct", "EmailAddress", "string", "json", "email_address", "omitempty", "This", "use", "to", "generate", "type", "CreatePersonRequest", "struct", "EmailAddress", "string", "json", "email_address", "omitempty", "Steps", "to", "reproduce", "just", "set", "x", "nullable", "true", "and", "you", "be", "good", "to", "go", "NUMBER", "Thanks", "casualjim", "and", "vburenin", "NUMBER", "I", "add", "a", "comment", "on", "NUMBER", "I", "don", "t", "think", "requiring", "x", "nullable", "true", "be", "ideal", "NUMBER", "Also", "with", "numbers", "NUMBER", "Trying", "to", "set", "TAG", "total", "NUMBER", "TAG", "results", "into", "TAG", "TAG", "NUMBER", "TAG", "x", "nullable", "false", "TAG", "doesn", "t", "help", "NUMBER", "definitions", "stats", "type", "object", "properties", "total", "type", "integer", "Removed", "redundant", "code", "NUMBER", "Less", "JSON", "parsing", "NUMBER", "Speedups", "on", "many", "things", "into", "several", "times", "NUMBER", "The", "larger", "spec", "be", "the", "more", "noticeable", "speed", "up", "NUMBER", "This", "broke", "my", "build", "go", "get", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "generator", "types", "NUMBER", "go", "NUMBER", "doc", "NUMBER", "OrigSpec", "undefined", "type", "loads", "NUMBER", "Document", "has", "no", "field", "or", "method", "OrigSpec", "Did", "you", "update", "all", "dependencies", "This", "thing", "be", "defined", "in", "github", "NUMBER", "com", "go", "openapi", "loads", "I", "guess", "that", "be", "why", "NUMBER", "Yep", "go", "openapi", "loads", "doesn", "t", "seem", "to", "have", "a", "OrigSpec", "field", "on", "Document", "NUMBER", "do", "it", "work", "now", "On", "Tue", "May", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Ben", "Firshman", "notifications", "github", "NUMBER", "com", "write", "Yep", "go", "openapi", "loads", "doesn", "t", "seem", "to", "have", "a", "OrigSpec", "field", "on", "Document", "NUMBER", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "issuecomment", "NUMBER", "Ah", "thanks", "fix", "NUMBER", "fix", "NUMBER", "Could", "you", "please", "check", "my", "change", "I", "be", "not", "really", "confident", "I", "ve", "do", "it", "as", "it", "should", "be", "NUMBER", "In", "NUMBER", "you", "include", "one", "of", "the", "Swagger", "file", "from", "my", "catalog", "LINK", "guru", "api", "models", "NUMBER", "Maybe", "you", "interested", "in", "test", "against", "rest", "of", "NUMBER", "Swagger", "file", "NUMBER", "This", "can", "be", "do", "through", "REST", "API", "LINK", "guru", "api", "models", "to", "my", "catalog", "NUMBER", "casualjim", "Maybe", "I", "can", "help", "you", "to", "chew", "this", "cucumber", "smile", "If", "you", "have", "some", "question", "or", "feature", "request", "please", "open", "an", "issue", "LINK", "guru", "api", "models", "issue", "new", "NUMBER", "We", "can", "also", "chat", "in", "Gitter", "LINK", "guru", "api", "models", "When", "I", "create", "a", "method", "which", "produces", "only", "a", "non", "default", "content", "type", "the", "Respond", "code", "in", "package", "middleware", "context", "NUMBER", "go", "always", "uses", "the", "DefaultProduces", "content", "type", "instead", "of", "the", "type", "specified", "by", "the", "spec", "NUMBER", "This", "be", "because", "it", "initializes", "the", "offers", "array", "with", "the", "DefaultProduces", "value", "and", "then", "appends", "the", "pass", "in", "produces", "values", "to", "it", "and", "NegotiateContentType", "ends", "up", "choosing", "the", "first", "item", "in", "the", "array", "NUMBER", "The", "method", "s", "produces", "specification", "should", "override", "the", "default", "shouldn", "t", "it", "Further", "I", "don", "t", "see", "any", "way", "to", "specify", "a", "method", "which", "doesn", "t", "produce", "the", "API", "s", "default", "content", "type", "at", "all", "NUMBER", "Given", "the", "spec", "below", "in", "an", "API", "which", "has", "a", "default", "content", "type", "of", "application", "json", "the", "only", "way", "I", "can", "get", "the", "method", "to", "return", "text", "plain", "be", "to", "explicitly", "specify", "that", "in", "an", "Accept", "header", "NUMBER", "Swagger", "specification", "get", "produces", "text", "plain", "responses", "NUMBER", "description", "blah", "blah", "Just", "moving", "c", "NUMBER", "api", "NUMBER", "DefaultProduces", "to", "the", "_end_", "of", "the", "offers", "array", "in", "Respond", "make", "it", "a", "fallback", "in", "case", "of", "non", "matching", "produces", "the", "result", "that", "seems", "correct", "to", "me", "although", "it", "still", "doesn", "t", "address", "the", "issue", "of", "make", "a", "method", "which", "_doesn", "t_", "produce", "the", "default", "content", "type", "NUMBER", "I", "think", "this", "was", "fix", "in", "LINK", "openapi", "runtime", "pull", "NUMBER", "When", "parsing", "discover", "schemas", "it", "include", "all", "structs", "including", "ones", "that", "should", "not", "be", "include", "NUMBER", "This", "patch", "makes", "the", "schemaParser", "aware", "of", "the", "discover", "schema", "so", "we", "can", "use", "that", "information", "to", "exclude", "schema", "that", "be", "not", "needed", "NUMBER", "I", "didn", "t", "notice", "NUMBER", "githooks", "folder", "and", "that", "I", "was", "supposed", "to", "use", "git", "hooks", "to", "install", "hooks", "manually", "be", "I", "right", "NUMBER", "It", "would", "be", "great", "to", "mention", "this", "in", "the", "contribution", "guidelines", "NUMBER", "So", "I", "add", "miss", "bindata", "regeneration", "for", "NUMBER", "Problem", "statement", "invalid", "character", "\u00ef", "looking", "for", "beginning", "of", "value", "when", "generate", "server", "from", "swagger", "specification", "on", "windows", "with", "swagger_windows_", "NUMBER", "exe", "release", "NUMBER", "swagger", "NUMBER", "exe", "generate", "server", "Swagger", "specification", "yaml", "swagger", "NUMBER", "API", "Information", "info", "version", "NUMBER", "title", "API", "IoT", "Capgemini", "Development", "Challenge", "description", "Rendez", "vous", "sur", "LINK", "pour", "g\u00e9n\u00e9rer", "le", "code", "serveur", "NUMBER", "Le", "script", "d", "injection", "Gatling", "s\u00e9quencera", "\u00e9critures", "et", "lectures", "NUMBER", "NUMBER", "injecteurs", "simultan\u00e9s", "injecterons", "NUMBER", "NUMBER", "message", "chacuns", "soit", "NUMBER", "NUMBER", "message", "au", "total", "NUMBER", "contact", "name", "Ludovic", "Toinel", "url", "LINK", "Threads", "show", "threadId", "NUMBER", "email", "ludovic", "NUMBER", "toinel", "capgemini", "NUMBER", "com", "during", "dev", "should", "point", "to", "your", "local", "machine", "host", "NUMBER", "basePath", "prefixes", "all", "resource", "paths", "basePath", "schemes", "tip", "remove", "http", "to", "make", "production", "grade", "http", "format", "of", "bodies", "a", "client", "can", "send", "Content", "Type", "consumes", "application", "json", "format", "of", "the", "responses", "to", "the", "client", "Accepts", "produces", "application", "json", "paths", "message", "post", "description", "Service", "d", "acquisition", "de", "message", "provenant", "d", "objets", "connect\u00e9s", "responses", "NUMBER", "description", "R\u00e9ception", "du", "message", "en", "succ\u00e9s", "NUMBER", "parameters", "name", "message", "description", "Message", "transmis", "par", "l", "objet", "connect\u00e9", "NUMBER", "in", "body", "schema", "ref", "definitions", "message", "message", "synthesis", "get", "description", "Service", "fournissant", "une", "synth\u00e8se", "des", "donn\u00e9es", "sur", "les", "NUMBER", "derni\u00e8res", "minutes", "minute", "en", "cours", "incluse", "NUMBER", "L", "objet", "synthesis", "retourn\u00e9", "doit", "\u00eatre", "unique", "par", "type", "de", "capteur", "NUMBER", "responses", "NUMBER", "description", "successful", "operation", "NUMBER", "schema", "type", "array", "items", "ref", "definitions", "synthesis", "definitions", "message", "type", "object", "properties", "id", "type", "string", "description", "Identifiant", "unique", "du", "message", "envoy\u00e9", "par", "le", "capteur", "un", "controle", "des", "doublons", "doit", "\u00eatre", "effectu\u00e9", "max", "NUMBER", "chars", "NUMBER", "timestamp", "type", "string", "format", "date", "time", "description", "Horaire", "de", "la", "fabrication", "du", "message", "par", "le", "capteur", "format", "RFC", "NUMBER", "NUMBER", "Ce", "timestamp", "fait", "fois", "lors", "calcul", "de", "la", "synth\u00e8se", "NUMBER", "sensorType", "type", "integer", "format", "int", "NUMBER", "description", "Type", "de", "capteur", "\u00e0", "l", "origine", "de", "l", "emission", "du", "message", "NUMBER", "value", "type", "integer", "format", "int", "NUMBER", "description", "Valeur", "transmise", "par", "le", "capteur", "NUMBER", "synthesis", "type", "object", "properties", "sensorType", "type", "integer", "format", "int", "NUMBER", "description", "Type", "de", "capteur", "\u00e0", "l", "origine", "de", "l", "emission", "du", "message", "NUMBER", "minValue", "type", "integer", "format", "int", "NUMBER", "description", "Valeur", "minimum", "transmise", "par", "ce", "type", "de", "capteur", "NUMBER", "maxValue", "type", "integer", "format", "int", "NUMBER", "description", "Valeur", "maximale", "transmise", "par", "ce", "capteur", "type", "de", "capteur", "NUMBER", "mediumValue", "type", "integer", "format", "int", "NUMBER", "description", "Valeur", "moyenne", "des", "donn\u00e9es", "transmises", "par", "ce", "type", "de", "capteur", "arrondie", "\u00e0", "deux", "d\u00e9cimales", "I", "m", "still", "having", "the", "same", "problem", "ZandorZ", "can", "you", "please", "provide", "more", "information", "about", "your", "setup", "swagger", "version", "OS", "golang", "version", "and", "what", "exactly", "the", "issue", "be", "that", "you", "be", "encountering", "NUMBER", "I", "m", "use", "Linux", "Ubuntu", "NUMBER", "Go", "version", "NUMBER", "I", "m", "also", "use", "Goa", "to", "generate", "swagger", "file", "LINK", "sorry", "rename", "the", "gist", "file", "wrong", "i", "m", "already", "use", "the", "NUMBER", "yaml", "extension", "but", "tried", "with", "both", "ZandorZ", "can", "you", "please", "specify", "your", "swagger", "version", "can", "be", "find", "executing", "swagger", "version", "Sorry", "actually", "my", "problem", "be", "not", "when", "generating", "the", "code", "from", "yaml", "file", "but", "use", "the", "generate", "client", "NUMBER", "I", "get", "the", "same", "message", "invalid", "character", "\u00ef", "looking", "for", "beginning", "of", "value", "when", "executing", "the", "client", "code", "GlenDC", "Dev", "I", "generate", "the", "client", "code", "again", "use", "yaml", "file", "this", "time", "and", "the", "error", "change", "My", "main", "NUMBER", "go", "LINK", "And", "the", "output", "GET", "api", "municipio", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "User", "Agent", "Go", "http", "client", "NUMBER", "Accept", "application", "gob", "Accept", "application", "json", "Accept", "application", "x", "gob", "Accept", "application", "xml", "Accept", "Encoding", "gzip", "HTTP", "NUMBER", "NUMBER", "OK", "Content", "Length", "NUMBER", "Content", "Type", "application", "bj", "NUMBER", "portal", "NUMBER", "municipio", "json", "type", "collection", "Date", "Tue", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "MunicipioCollection", "IDNome", "ANTONIO", "OLINTO", "BALSA", "NOVCONTENDIRATI", "LAPA", "PAULO", "FRONTINEPALMEIRA", "QUITANDINHA", "REBOU\u00c7AS", "SAO", "JOAO", "DO", "TRIUNFO", "SAO", "MATEUS", "DO", "SUL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "no", "consumer", "application", "bj", "NUMBER", "portal", "NUMBER", "municipio", "json", "type", "collection", "I", "m", "sorry", "NUMBER", "Actually", "this", "be", "the", "code", "that", "i", "m", "having", "that", "issue", "LINK", "GET", "api", "municipio", "NUMBER", "HTTP", "NUMBER", "Host", "localhost", "NUMBER", "User", "Agent", "Go", "http", "client", "NUMBER", "Accept", "application", "gob", "Accept", "application", "json", "Accept", "application", "x", "gob", "Accept", "application", "xml", "Accept", "Encoding", "gzip", "HTTP", "NUMBER", "NUMBER", "OK", "Content", "Length", "NUMBER", "Content", "Type", "application", "json", "Date", "Tue", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "IDNome", "ANTONIO", "OLINTO", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "invalid", "character", "x", "NUMBER", "c", "looking", "for", "beginning", "of", "value", "Nevermind", "I", "followed", "your", "advice", "and", "change", "the", "ProducesMediaTypes", "string", "application", "json", "ConsumesMediaTypes", "string", "application", "json", "just", "to", "accept", "_", "application", "json_", "and", "it", "worked", "remove", "the", "other", "options", "_", "application", "x", "gob", "application", "xml", "_", "thank", "u", "for", "the", "answers", "A", "bugfix", "to", "this", "issue", "NUMBER", "I", "m", "use", "an", "embedded", "interface", "as", "part", "of", "a", "response", "struct", "and", "it", "fail", "with", "the", "error", "message", "unable", "to", "resolve", "embedded", "struct", "for", "Resulter", "NUMBER", "Part", "of", "the", "code", "go", "type", "Resulter", "interface", "Result", "int", "interface", "error", "type", "jobResponse", "struct", "in", "body", "Payload", "partialJob", "Resulter", "I", "can", "provide", "more", "details", "if", "that", "s", "desired", "NUMBER", "Should", "go", "swagger", "ignore", "embedded", "interfaces", "Seems", "like", "embedded", "interface", "do", "not", "cause", "error", "anymore", "maybe", "this", "fix", "it", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "a", "NUMBER", "f", "NUMBER", "c", "NUMBER", "b", "NUMBER", "bfd", "NUMBER", "af", "NUMBER", "adcec", "It", "seems", "the", "embedded", "interface", "be", "ignored", "don", "t", "see", "it", "in", "generate", "json", "but", "there", "be", "a", "function", "in", "scan", "schema", "NUMBER", "go", "parseInterfaceType", "that", "parses", "interface", "NUMBER", "Given", "that", "the", "interface", "in", "Go", "can", "only", "have", "function", "which", "will", "never", "be", "part", "of", "Rest", "API", "why", "be", "interface", "parsed", "Thank", "you", "for", "developing", "very", "useful", "tool", "Problem", "statement", "I", "generate", "a", "source", "code", "with", "with", "context", "and", "I", "want", "to", "use", "context", "NUMBER", "Context", "on", "a", "middleware", "NUMBER", "But", "it", "seems", "context", "be", "created", "after", "middleware", "be", "invoked", "like", "here", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "b", "NUMBER", "f", "NUMBER", "be", "NUMBER", "b", "NUMBER", "d", "NUMBER", "ecfd", "NUMBER", "baa", "NUMBER", "fda", "NUMBER", "d", "NUMBER", "generator", "template", "server", "operation", "NUMBER", "gotmpl", "L", "NUMBER", "NUMBER", "Could", "you", "tell", "me", "how", "to", "set", "something", "on", "a", "middleware", "and", "use", "it", "from", "HandlerFuncs", "refs", "NUMBER", "NUMBER", "Thanks", "Swagger", "specification", "nil", "Steps", "to", "reproduce", "nil", "I", "have", "the", "same", "problem", "right", "now", "NUMBER", "I", "would", "like", "the", "middleware", "to", "inject", "some", "value", "in", "the", "context", "that", "I", "can", "later", "re", "use", "in", "my", "actual", "http", "handlers", "NUMBER", "Any", "way", "to", "do", "this", "Here", "s", "an", "example", "of", "middleware", "setting", "a", "clientCert", "value", "in", "the", "context", "to", "pass", "the", "client", "TLS", "certificate", "along", "to", "the", "handlers", "NUMBER", "SetupMiddlewares", "configure", "the", "higher", "level", "middleware", "func", "s", "MyServer", "SetupMiddlewares", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "ourFunc", "func", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "if", "r", "NUMBER", "TLS", "nil", "len", "r", "NUMBER", "TLS", "NUMBER", "PeerCertificates", "NUMBER", "context", "NUMBER", "Set", "r", "clientCert", "r", "NUMBER", "TLS", "NUMBER", "PeerCertificates", "NUMBER", "handler", "NUMBER", "ServeHTTP", "w", "r", "return", "http", "NUMBER", "HandlerFunc", "ourFunc", "And", "in", "the", "handler", "you", "can", "get", "the", "cert", "like", "this", "since", "you", "have", "the", "HTTP", "NUMBER", "Request", "object", "clientCertIntf", "ok", "context", "NUMBER", "GetOk", "req", "clientCert", "if", "ok", "fmt", "NUMBER", "Printf", "This", "request", "has", "no", "client", "cert", "NUMBER", "n", "return", "nil", "clientCert", "ok", "clientCertIntf", "NUMBER", "x", "NUMBER", "Certificate", "if", "ok", "return", "nil", "Thanks", "for", "your", "fast", "response", "NUMBER", "I", "see", "that", "the", "context", "object", "you", "be", "use", "be", "from", "github", "NUMBER", "com", "gorilla", "context", "NUMBER", "I", "was", "actually", "looking", "at", "the", "golang", "NUMBER", "org", "x", "net", "context", "one", "b", "c", "that", "be", "what", "I", "have", "available", "in", "my", "handler", "I", "call", "swagger", "generate", "with", "with", "context", "NUMBER", "I", "m", "not", "sure", "these", "two", "contexts", "be", "compatible", "NUMBER", "Ah", "sorry", "I", "miss", "that", "NUMBER", "Never", "mind", "NUMBER", "ontucker", "thanks", "anyway", "so", "I", "learned", "about", "the", "gorilla", "context", "NUMBER", "casualjim", "yeah", "that", "might", "work", "too", "NUMBER", "What", "were", "the", "problem", "you", "run", "into", "I", "would", "really", "like", "to", "see", "net", "NUMBER", "context", "available", "in", "handlers", "any", "time", "soon", "I", "m", "trying", "to", "add", "functionality", "add", "trace", "headers", "to", "logs", "and", "I", "want", "this", "trace", "header", "to", "be", "available", "everywhere", "NUMBER", "I", "looked", "into", "use", "gorilla", "context", "but", "it", "requires", "that", "I", "have", "access", "to", "the", "original", "request", "object", "in", "the", "handler", "but", "I", "only", "have", "access", "to", "the", "params", "object", "generate", "by", "go", "swagger", "NUMBER", "How", "can", "I", "get", "the", "original", "request", "object", "in", "my", "handler", "that", "be", "the", "http", "NUMBER", "Request", "object", "ok", "sweet", "thanks", "NUMBER", "When", "s", "the", "next", "swagger", "version", "come", "out", "Actually", "I", "m", "not", "seeing", "a", "way", "to", "get", "the", "header", "from", "the", "params", "object", "NUMBER", "What", "version", "be", "this", "in", "Besides", "the", "request", "values", "I", "only", "have", "BindRequest", "available", "to", "me", "NUMBER", "So", "the", "X", "Request", "Id", "isn", "t", "isn", "t", "be", "set", "after", "I", "add", "this", "NUMBER", "Here", "s", "my", "swagger", "score", "post", "parameters", "name", "X", "Request", "Id", "in", "header", "type", "string", "name", "recipients", "in", "body", "description", "A", "list", "of", "recipient", "emails", "to", "score", "required", "true", "schema", "ref", "definitions", "PostScoreRequest", "responses", "NUMBER", "description", "Ok", "schema", "ref", "definitions", "RecipientListScore", "NUMBER", "description", "Bad", "Request", "schema", "ref", "definitions", "ErrorResponse", "I", "won", "t", "I", "ll", "try", "this", "out", "NUMBER", "Thanks", "for", "the", "quick", "responses", "Yes", "and", "no", "NUMBER", "I", "still", "couldn", "t", "get", "a", "map", "to", "the", "request", "object", "because", "that", "id", "be", "a", "randomly", "generate", "one", "remember", "I", "need", "the", "http", "NUMBER", "Request", "object", "to", "get", "a", "request", "context", "use", "gorilla", "libraries", "NUMBER", "However", "I", "made", "my", "own", "request", "context", "map", "that", "uses", "that", "id", "as", "the", "key", "and", "I", "pass", "that", "id", "through", "to", "the", "parameters", "in", "the", "request", "NUMBER", "As", "great", "as", "I", "think", "go", "swagger", "be", "I", "think", "it", "s", "not", "great", "that", "you", "get", "ride", "of", "the", "original", "request", "object", "and", "feed", "in", "your", "own", "NUMBER", "That", "potentially", "makes", "a", "lot", "of", "great", "http", "golang", "libraries", "like", "the", "one", "mention", "useless", "as", "the", "require", "items", "from", "that", "request", "object", "or", "the", "request", "object", "itself", "as", "it", "s", "use", "to", "map", "values", "NUMBER", "It", "would", "be", "great", "to", "have", "this", "in", "the", "future", "so", "that", "I", "don", "t", "have", "to", "make", "my", "swagger", "spec", "include", "a", "request", "ID", "just", "so", "I", "can", "pass", "through", "a", "context", "ID", "to", "my", "handlers", "NUMBER", "Problem", "statement", "sh", "swagger", "generate", "server", "A", "TestAPI", "f", "NUMBER", "swagger", "NUMBER", "yml", "gives", "this", "error", "types", "don", "t", "match", "expect", "map", "key", "string", "or", "int", "get", "bool", "Swagger", "specification", "yml", "consumes", "application", "json", "definitions", "viewBox", "type", "object", "properties", "x", "type", "integer", "format", "int", "NUMBER", "y", "types", "don", "t", "match", "expect", "map", "key", "string", "or", "int", "get", "bool", "y", "type", "integer", "format", "int", "NUMBER", "width", "type", "integer", "format", "int", "NUMBER", "height", "type", "integer", "format", "int", "NUMBER", "info", "description", "Test", "RESTful", "APIs", "title", "Test", "Server", "version", "NUMBER", "basePath", "api", "paths", "test", "get", "operationId", "findAll", "parameters", "name", "since", "in", "query", "type", "integer", "format", "int", "NUMBER", "name", "limit", "in", "query", "type", "integer", "format", "int", "NUMBER", "default", "NUMBER", "responses", "NUMBER", "description", "Array", "Trigger", "schema", "type", "array", "items", "ref", "definitions", "viewBox", "produces", "application", "json", "schemes", "https", "swagger", "NUMBER", "Steps", "to", "reproduce", "Change", "the", "y", "property", "to", "any", "other", "word", "and", "the", "spec", "will", "validate", "NUMBER", "Just", "use", "quotes", "as", "y", "it", "should", "solve", "the", "problem", "NUMBER", "Problem", "statement", "It", "would", "be", "useful", "if", "it", "was", "possible", "to", "specify", "constants", "within", "the", "spec", "NUMBER", "I", "know", "the", "recommended", "practice", "be", "to", "use", "an", "enum", "with", "NUMBER", "value", "but", "this", "will", "only", "_validate_", "inputs", "NUMBER", "A", "given", "client", "be", "unable", "to", "reference", "the", "possible", "values", "or", "know", "what", "the", "appropriate", "default", "be", "NUMBER", "I", "ve", "experimented", "a", "little", "with", "use", "extensions", "but", "the", "long", "and", "the", "short", "of", "it", "be", "that", "I", "ultimately", "have", "to", "write", "a", "factory", "for", "each", "model", "object", "to", "properly", "initialize", "the", "values", "NUMBER", "It", "would", "be", "much", "more", "convenient", "if", "I", "could", "somehow", "define", "constants", "or", "a", "constructor", "inside", "the", "spec", "NUMBER", "Swagger", "specification", "VersionClusterState", "type", "object", "required", "major", "minor", "patch", "properties", "major", "type", "integer", "enum", "NUMBER", "minor", "type", "integer", "enum", "NUMBER", "patch", "type", "integer", "enum", "NUMBER", "Client", "returns", "Major", "Minor", "Patch", "NUMBER", "useless", "func", "DefaultVersionClusterState", "models", "NUMBER", "VersionClusterState", "models", "NUMBER", "VersionClusterState", "returns", "initialized", "object", "but", "pain", "in", "the", "ass", "and", "defeats", "purpose", "NUMBER", "Given", "the", "choice", "to", "modify", "spec", "and", "code", "I", "ll", "just", "modify", "code", "instead", "func", "NewVersionClusterState", "VersionClusterState", "var", "spec", "spec", "NUMBER", "New", "restapi", "NUMBER", "SwaggerJSON", "NUMBER", "Extensions", "NUMBER", "read", "custom", "extensions", "from", "spec", "models", "NUMBER", "VersionClusterState", "spec", "NUMBER", "Major", "spec", "NUMBER", "Minor", "spec", "NUMBER", "Patch", "easier", "but", "error", "prone", "and", "hard", "for", "developers", "to", "manage", "version", "func", "NewVersionClusterState", "VersionClusterState", "models", "NUMBER", "VersionClusterState", "NUMBER", "NUMBER", "NUMBER", "I", "m", "curious", "if", "it", "s", "possible", "to", "improve", "this", "behaviour", "NUMBER", "Ideally", "something", "like", "add", "a", "factory", "method", "that", "would", "supply", "an", "object", "with", "its", "default", "values", "based", "on", "the", "spec", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "Generate", "server", "with", "above", "spec", "NUMBER", "Generate", "client", "with", "above", "spec", "NUMBER", "Note", "that", "you", "have", "to", "manually", "insert", "code", "to", "initialize", "the", "right", "values", "Possibly", "relate", "to", "issue", "NUMBER", "Ahhmyface", "what", "would", "be", "the", "right", "default", "value", "be", "for", "an", "enum", "with", "more", "then", "NUMBER", "possibility", "in", "your", "opinion", "Problem", "statement", "I", "find", "the", "case", "that", "swagger", "panics", "with", "a", "stack", "overflow", "NUMBER", "In", "this", "case", "the", "swagger", "specification", "contains", "a", "schema", "that", "include", "an", "item", "which", "has", "some", "special", "property", "the", "definition", "containing", "that", "array", "of", "itself", "NUMBER", "This", "schema", "be", "valid", "with", "swagger", "edittor", "LINK", "NUMBER", "My", "swagger", "version", "be", "NUMBER", "NUMBER", "gf", "NUMBER", "e", "NUMBER", "NUMBER", "Swagger", "specification", "swagger", "NUMBER", "info", "title", "sample", "version", "NUMBER", "schemes", "http", "https", "consumes", "application", "vdn", "NUMBER", "sample", "NUMBER", "v", "NUMBER", "json", "produces", "application", "vdn", "NUMBER", "sample", "NUMBER", "v", "NUMBER", "json", "paths", "get", "responses", "NUMBER", "description", "list", "all", "suite", "schema", "type", "array", "items", "ref", "definitions", "Foo", "definitions", "Foo", "type", "object", "properties", "foo", "ref", "definitions", "Bar", "Bar", "type", "object", "properties", "bar", "type", "array", "items", "ref", "definitions", "Bar", "Steps", "to", "reproduce", "Run", "swagger", "validate", "swagger", "NUMBER", "yml", "with", "the", "given", "swagger", "specification", "workingonswag", "LINK", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "faac", "NUMBER", "f", "NUMBER", "e", "NUMBER", "jpg", "Problem", "statement", "XMLHttpRequest", "cannot", "load", "LINK", "No", "Access", "Control", "Allow", "Origin", "header", "be", "present", "on", "the", "request", "resource", "NUMBER", "Origin", "LINK", "be", "therefore", "not", "allow", "access", "NUMBER", "i", "ve", "tried", "to", "add", "Access", "Control", "Allow", "Origin", "to", "response", "header", "if", "origin", "r", "NUMBER", "Header", "NUMBER", "Get", "Origin", "origin", "rw", "NUMBER", "Header", "NUMBER", "Set", "Access", "Control", "Allow", "Origin", "origin", "rw", "NUMBER", "Header", "NUMBER", "Set", "Content", "Type", "application", "json", "rw", "NUMBER", "Header", "NUMBER", "Set", "Access", "Control", "Allow", "Methods", "POST", "GET", "OPTIONS", "PUT", "DELETE", "rw", "NUMBER", "Header", "NUMBER", "Set", "Access", "Control", "Allow", "Headers", "Content", "Type", "Content", "Length", "Accept", "Encoding", "X", "CSRF", "Token", "rw", "NUMBER", "Header", "NUMBER", "Set", "Access", "Control", "Allow", "Credentials", "true", "but", "not", "work", "I", "can", "t", "use", "swagger", "ui", "swagger_editor", "to", "load", "swager", "NUMBER", "json", "test", "API", "Working", "example", "in", "configure_name", "NUMBER", "go", "go", "import", "github", "NUMBER", "com", "rs", "cors", "func", "setupGlobalMiddleware", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "handleCORS", "cors", "NUMBER", "Default", "NUMBER", "Handler", "return", "handleCORS", "handler", "This", "be", "not", "work", "for", "me", "I", "still", "get", "NUMBER", "Method", "Not", "Allowed", "NUMBER", "Is", "there", "a", "new", "fix", "for", "this", "Problem", "statement", "swagger", "NUMBER", "json", "document", "be", "always", "available", "at", "the", "root", "path", "as", "LINK", "I", "can", "see", "why", "but", "I", "would", "be", "happier", "if", "it", "was", "prefixed", "by", "a", "basePath", "such", "as", "LINK", "hi", "Any", "chance", "you", "know", "the", "priority", "on", "this", "I", "be", "trying", "to", "get", "swagger", "NUMBER", "json", "be", "available", "on", "the", "same", "path", "as", "the", "api", "s", "basePath", "NUMBER", "Is", "it", "possible", "on", "current", "go", "swagger", "implementation", "Thanks", "Srikar", "How", "very", "topical", "NUMBER", "I", "m", "just", "starting", "to", "look", "at", "this", "myself", "NUMBER", "This", "looks", "promising", "Spec", "creates", "a", "middleware", "to", "serve", "a", "swagger", "spec", "NUMBER", "This", "allows", "for", "altering", "the", "spec", "before", "starting", "the", "http", "listener", "NUMBER", "This", "can", "be", "useful", "if", "you", "want", "to", "serve", "the", "swagger", "spec", "from", "another", "path", "than", "swagger", "NUMBER", "json", "func", "Spec", "basePath", "string", "b", "byte", "next", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "So", "this", "function", "be", "call", "by", "APIHandler", "returns", "a", "handler", "to", "serve", "the", "API", "this", "include", "a", "swagger", "spec", "router", "and", "the", "contract", "defined", "in", "the", "swagger", "spec", "func", "c", "Context", "APIHandler", "builder", "Builder", "http", "NUMBER", "Handler", "NUMBER", "return", "Spec", "c", "NUMBER", "spec", "NUMBER", "Raw", "Redoc", "redocOpts", "c", "NUMBER", "RoutesHandler", "builder", "and", "that", "be", "call", "by", "func", "o", "TAG", "API", "Serve", "builder", "middleware", "NUMBER", "Builder", "http", "NUMBER", "Handler", "o", "NUMBER", "Init", "if", "o", "NUMBER", "Middleware", "nil", "return", "o", "NUMBER", "Middleware", "builder", "return", "o", "NUMBER", "context", "NUMBER", "APIHandler", "builder", "So", "maybe", "the", "path", "could", "be", "add", "to", "the", "Context", "object", "NUMBER", "thanks", "NUMBER", "thats", "correct", "but", "these", "file", "will", "get", "overwritten", "if", "when", "you", "run", "the", "generator", "again", "NUMBER", "Yes", "I", "wasn", "t", "thinking", "for", "post", "generate", "editing", "just", "strategy", "for", "implementation", "NUMBER", "thanks", "for", "the", "pointer", "though", "I", "was", "able", "to", "get", "it", "work", "by", "use", "Spec", "in", "setupGlobalMiddleware", "if", "r", "NUMBER", "URL", "NUMBER", "Path", "swaggerJSONPath", "swaggerSpec", "err", "loads", "NUMBER", "Analyzed", "SwaggerJSON", "if", "err", "nil", "logger", "NUMBER", "Log", "NUMBER", "Error", "Failed", "to", "get", "swagger", "spec", "json", "NUMBER", "nil", "rawSpec", "swaggerSpec", "NUMBER", "Raw", "rootHandler", "middleware", "NUMBER", "Spec", "path", "ui", "rawSpec", "http", "NUMBER", "HandlerFunc", "func", "rw", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "rw", "NUMBER", "WriteHeader", "http", "NUMBER", "StatusFound", "return", "rootHandler", "NUMBER", "ServeHTTP", "w", "r", "return", "I", "did", "like", "njsrikar", "did", "and", "add", "the", "Spec", "call", "through", "setupGlobalMiddleware", "after", "saving", "the", "base", "path", "in", "main", "NUMBER", "The", "convention", "doesn", "t", "work", "for", "me", "because", "my", "API", "be", "behind", "an", "API", "gateway", "where", "there", "be", "a", "path", "assigned", "to", "my", "service", "and", "the", "root", "of", "my", "service", "be", "not", "accessible", "NUMBER", "For", "ease", "of", "use", "a", "single", "Swagger", "file", "to", "both", "provision", "the", "gateway", "and", "drive", "go", "swagger", "that", "base", "path", "be", "use", "in", "the", "swagger", "file", "and", "thus", "in", "my", "generate", "routes", "NUMBER", "ditto", "with", "my", "case", "as", "well", "NUMBER", "casualjim", "thanks", "for", "the", "tip", "on", "skip", "main", "NUMBER", "will", "come", "in", "handy", "NUMBER", "This", "sounds", "spooky", "to", "me", "NUMBER", "If", "I", "need", "something", "like", "that", "I", "would", "handle", "it", "by", "my", "self", "add", "additional", "properties", "to", "the", "patch", "object", "NUMBER", "I", "actually", "like", "the", "idea", "of", "add", "accessor", "function", "to", "hide", "the", "details", "NUMBER", "You", "can", "only", "do", "so", "much", "with", "basic", "data", "types", "NUMBER", "It", "s", "a", "pointer", "or", "it", "isn", "t", "NUMBER", "Attributes", "like", "optional", "required", "default", "etc", "be", "semantics", "that", "be", "very", "difficult", "to", "represent", "in", "computer", "languages", "NUMBER", "The", "only", "way", "to", "do", "it", "be", "to", "make", "complex", "data", "structures", "to", "add", "those", "semantics", "NUMBER", "The", "only", "issue", "I", "have", "be", "that", "go", "swagger", "has", "allow", "us", "to", "access", "these", "data", "types", "directly", "up", "till", "now", "so", "when", "the", "implementation", "change", "we", "all", "have", "to", "go", "through", "and", "change", "our", "code", "to", "use", "the", "update", "semantics", "NUMBER", "Other", "IDL", "technology", "uses", "the", "approach", "of", "accessor", "function", "NUMBER", "I", "bring", "up", "Thrift", "as", "an", "example", "NUMBER", "I", "cannot", "remember", "the", "exact", "code", "but", "to", "find", "out", "if", "a", "data", "be", "optional", "that", "information", "be", "only", "available", "through", "a", "function", "call", "NUMBER", "If", "a", "model", "was", "something", "like", "Image", "ID", "string", "name", "string", "An", "example", "generation", "could", "be", "func", "i", "_Image", "GetIDValue", "_string", "optional", "required", "I", "be", "not", "advocating", "that", "specific", "signature", "NUMBER", "It", "s", "just", "an", "example", "NUMBER", "When", "Swagger", "add", "more", "richness", "to", "their", "definition", "go", "swagger", "can", "enrich", "the", "data", "types", "in", "the", "back", "without", "affecting", "users", "code", "NUMBER", "Yes", "it", "s", "more", "tedious", "to", "use", "accessors", "but", "it", "s", "the", "only", "way", "to", "add", "richness", "to", "datatypes", "in", "a", "language", "go", "that", "has", "limited", "semantics", "in", "the", "datatypes", "NUMBER", "Another", "option", "for", "the", "implementation", "be", "to", "use", "go", "s", "field", "and", "reflection", "NUMBER", "Again", "if", "users", "were", "use", "accessor", "function", "the", "implementation", "detail", "would", "be", "hidden", "NUMBER", "I", "m", "not", "sure", "how", "I", "feel", "about", "that", "NUMBER", "The", "issue", "be", "that", "most", "APIs", "often", "will", "try", "to", "interpret", "the", "zero", "value", "sent", "often", "cause", "problem", "for", "things", "like", "dates", "which", "will", "default", "to", "Jan", "NUMBER", "NUMBER", "which", "be", "never", "the", "intended", "behavior", "the", "API", "designer", "intended", "and", "often", "requires", "forking", "the", "upstream", "swagger", "to", "add", "x", "isnullable", "so", "the", "correct", "behavior", "occur", "NUMBER", "The", "simple", "solution", "be", "to", "always", "use", "pointers", "unless", "on", "a", "slice", "or", "map", "which", "can", "be", "nil", "already", "NUMBER", "The", "required", "flag", "would", "simply", "cause", "a", "check", "for", "nil", "on", "the", "property", "to", "be", "generate", "as", "validation", "NUMBER", "No", "longer", "would", "it", "effect", "whether", "a", "value", "be", "a", "pointer", "or", "not", "NUMBER", "To", "compare", "to", "another", "library", "I", "ve", "use", "aws", "sdk", "go", "LINK", "sdk", "go", "it", "s", "very", "consistent", "all", "around", "in", "use", "pointers", "NUMBER", "Defaults", "could", "stay", "pretty", "simple", "and", "you", "can", "use", "the", "swag", "function", "to", "get", "zero", "values", "from", "nil", "properties", "without", "having", "to", "check", "for", "nil", "It", "may", "be", "a", "bit", "more", "verbose", "but", "I", "believe", "it", "be", "truely", "the", "correct", "behavior", "to", "never", "send", "values", "not", "filled", "in", "meaning", "in", "some", "fashion", "you", "should", "use", "a", "pointer", "since", "a", "zero", "value", "cannot", "be", "assumed", "to", "be", "unset", "NUMBER", "There", "s", "no", "need", "to", "do", "anything", "crazy", "with", "extra", "field", "types", "etc", "for", "the", "base", "object", "that", "go", "swagger", "generates", "because", "we", "can", "more", "easily", "build", "those", "accessor", "setter", "patterns", "on", "top", "of", "this", "base", "and", "additively", "to", "boot", "after", "we", "ve", "decided", "if", "we", "want", "multiple", "return", "values", "structs", "chaining", "etc", "NUMBER", "I", "like", "companion", "field", "proposition", "but", "it", "shouldn", "t", "be", "generate", "by", "default", "NUMBER", "It", "might", "be", "better", "just", "to", "add", "a", "flag", "x", "go", "nil", "flag", "true", "that", "could", "instruct", "generator", "to", "generato", "companion", "like", "this", "MyValue", "int", "NUMBER", "MyValueIsNil", "bool", "I", "think", "the", "default", "behavior", "should", "allow", "distinguishing", "between", "null", "and", "default", "values", "NUMBER", "Since", "JSON", "distinguishes", "null", "vs", "zero", "value", "and", "swagger", "be", "JSON", "oriented", "coercing", "nulls", "into", "other", "values", "seems", "like", "an", "optimization", "that", "isn", "t", "needed", "for", "most", "users", "NUMBER", "For", "this", "reason", "I", "disagree", "on", "x", "nullable", "be", "necessary", "NUMBER", "If", "reducing", "pointers", "be", "a", "goal", "something", "along", "the", "lines", "of", "the", "following", "could", "work", "NUMBER", "I", "would", "use", "a", "bit", "set", "instead", "of", "a", "companion", "bool", "per", "field", "NUMBER", "MyValueSet", "bool", "ideally", "a", "shared", "bit", "set", "MyValue", "int", "NUMBER", "getters", "func", "o", "Object", "GetOrDefaultMyValue", "int", "NUMBER", "bool", "return", "o", "NUMBER", "MyValue", "o", "NUMBER", "MyValueSet", "func", "o", "Object", "GetMyValue", "int", "NUMBER", "if", "o", "NUMBER", "MyValueSet", "return", "o", "NUMBER", "MyValue", "else", "return", "nil", "I", "definitely", "need", "methods", "IsDescriptionNil", "IsDescriptionNotNil", "IsDescriptionSet", "IsDescriptionNotSet", "HasDescriptionValue", "IsDescriptionSet", "IsDescriptionNotNil", "lgtm", "For", "some", "reason", "the", "schema", "for", "array", "item", "be", "enforced", "in", "such", "way", "that", "array", "items", "become", "required", "NUMBER", "I", "created", "a", "copy", "of", "the", "originating", "schema", "and", "reset", "required", "flag", "for", "it", "NUMBER", "Test", "update", "was", "necessary", "NUMBER", "Problem", "statement", "The", "current", "Go", "template", "for", "the", "generate", "server", "code", "in", "main", "NUMBER", "go", "ignores", "the", "return", "values", "from", "parser", "NUMBER", "AddGroup", "including", "possible", "error", "NUMBER", "This", "results", "in", "a", "buggy", "go", "flags", "formatted", "struct", "quietly", "fail", "make", "it", "confusing", "to", "the", "developer", "why", "their", "flags", "aren", "t", "showing", "up", "NUMBER", "Steps", "to", "reproduce", "Define", "an", "invalid", "go", "flags", "options", "struct", "NUMBER", "Add", "your", "flags", "in", "configure_", "api", "NUMBER", "go", "configureFlags", "go", "type", "MyFlags", "struct", "Verbose", "bool", "short", "v", "Verbosity", "int", "short", "v", "func", "configureFlags", "api", "operations", "NUMBER", "SwishAPI", "api", "NUMBER", "CommandLineOptionsGroups", "swag", "NUMBER", "CommandLineOptionsGroups", "verbosity", "verbosity", "levels", "MyFlags", "Build", "and", "run", "your", "server", "go", "run", "cmd", "api", "server", "main", "NUMBER", "go", "h", "NUMBER", "The", "user", "defined", "flags", "don", "t", "appear", "NUMBER", "Solution", "Update", "the", "loop", "that", "processes", "the", "CommandLineOptionsGroups", "to", "log", "and", "exit", "the", "start", "up", "process", "go", "for", "_", "optsGroup", "range", "api", "NUMBER", "CommandLineOptionsGroups", "_", "err", "parser", "NUMBER", "AddGroup", "optsGroup", "NUMBER", "ShortDescription", "optsGroup", "NUMBER", "LongDescription", "optsGroup", "NUMBER", "Options", "if", "err", "nil", "log", "NUMBER", "Fatal", "err", "Exiting", "the", "process", "be", "reasonable", "here", "because", "the", "CLI", "flags", "be", "statically", "configured", "inside", "the", "code", "and", "we", "want", "to", "alert", "the", "developer", "as", "soon", "as", "possible", "that", "they", "ve", "made", "a", "mistake", "NUMBER", "I", "have", "this", "and", "a", "small", "comment", "inside", "configureFlags", "explaining", "how", "to", "add", "custom", "flags", "ready", "to", "go", "in", "a", "PR", "NUMBER", "When", "expanding", "a", "schema", "go", "swagger", "do", "not", "correctly", "process", "a", "response", "which", "be", "an", "array", "of", "objects", "NUMBER", "For", "example", "json", "Pets", "type", "array", "items", "ref", "definitions", "Pet", "This", "pull", "request", "add", "detection", "and", "correct", "expansion", "of", "this", "case", "NUMBER", "Just", "a", "little", "thing", "I", "notice", "when", "i", "had", "the", "a", "flag", "set", "to", "something", "other", "than", "operations", "This", "fix", "the", "issue", "but", "I", "d", "like", "to", "know", "a", "good", "place", "to", "put", "a", "test", "for", "this", "or", "modify", "an", "exist", "test", "NUMBER", "In", "addition", "I", "m", "open", "the", "PR", "so", "I", "know", "the", "exist", "test", "suite", "pass", "because", "NUMBER", "I", "couldn", "t", "find", "instructions", "on", "how", "to", "run", "all", "test", "locally", "NUMBER", "The", "Circle", "process", "I", "run", "on", "my", "fork", "fail", "LINK", "swagger", "NUMBER", "exist", "test", "suite", "pass", "locally", "where", "should", "I", "put", "the", "new", "test", "and", "what", "can", "I", "use", "as", "an", "example", "for", "this", "kind", "of", "test", "Thanks", "On", "Tue", "Apr", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Ivan", "Porto", "Carrero", "TAG", "write", "I", "run", "test", "locally", "like", "this", "go", "test", "go", "list", "NUMBER", "NUMBER", "grep", "v", "vendor", "Another", "way", "to", "do", "it", "be", "docker", "build", "t", "go", "swagger", "local", "f", "Dockerfile", "NUMBER", "ci", "NUMBER", "docker", "run", "rm", "it", "go", "swagger", "local", "NUMBER", "hack", "build", "docker", "NUMBER", "sh", "And", "the", "last", "way", "to", "do", "it", "be", "drone", "exec", "You", "be", "receiving", "this", "because", "you", "authored", "the", "thread", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "issuecomment", "NUMBER", "The", "CircleCI", "failures", "don", "t", "seem", "to", "be", "my", "fault", "NUMBER", "Problem", "statement", "Even", "if", "the", "swagger", "specification", "has", "a", "basePath", "the", "generate", "client", "s", "http", "transport", "be", "not", "initialized", "with", "this", "basepath", "NUMBER", "Swagger", "specification", "swagger", "NUMBER", "info", "title", "My", "spec", "version", "NUMBER", "the", "domain", "of", "the", "service", "host", "localhost", "NUMBER", "array", "of", "all", "schemes", "that", "your", "API", "support", "schemes", "https", "http", "will", "be", "prefixed", "to", "all", "paths", "basePath", "v", "NUMBER", "myfancy", "consumes", "application", "json", "produces", "application", "json", "paths", "images", "get", "summary", "Get", "all", "images", "NUMBER", "description", "Blah", "responses", "NUMBER", "description", "List", "of", "images", "NUMBER", "schema", "type", "string", "name", "hello", "Steps", "to", "reproduce", "Run", "swagger", "generate", "client", "f", "reduced", "NUMBER", "yml", "The", "client", "s", "http", "transport", "initialization", "be", "transport", "httptransport", "NUMBER", "New", "localhost", "NUMBER", "string", "http", "https", "instead", "of", "transport", "httptransport", "NUMBER", "New", "localhost", "NUMBER", "v", "NUMBER", "myfancy", "string", "http", "https", "Fixed", "in", "NUMBER", "When", "write", "manually", "a", "Swagger", "specification", "one", "may", "make", "a", "typo", "and", "create", "a", "recursive", "schema", "NUMBER", "swagger", "validate", "should", "detect", "such", "error", "NUMBER", "A", "directly", "recursive", "schema", "YAML", "yaml", "definitions", "Item", "type", "object", "properties", "key", "ref", "definitions", "Item", "An", "indirect", "recursion", "yaml", "definitions", "Item", "NUMBER", "type", "object", "properties", "key", "ref", "definitions", "Item", "NUMBER", "Item", "NUMBER", "type", "object", "properties", "key", "ref", "definitions", "Item", "NUMBER", "This", "change", "introduces", "a", "precedence", "for", "a", "user", "defined", "attribute", "x", "nullable", "NUMBER", "x", "nullable", "be", "an", "extension", "that", "actually", "gives", "user", "a", "freedom", "to", "optionally", "define", "code", "generator", "behavior", "for", "nullable", "and", "non", "nullable", "values", "NUMBER", "Problem", "statement", "With", "the", "recent", "change", "all", "required", "values", "be", "now", "pointers", "NUMBER", "Even", "though", "it", "be", "a", "valid", "and", "reasonable", "change", "from", "some", "points", "of", "view", "it", "makes", "life", "much", "harder", "for", "me", "GC", "and", "makes", "code", "ugly", "to", "work", "with", "generate", "models", "when", "required", "property", "can", "not", "be", "nullable", "and", "even", "zero", "value", "by", "design", "NUMBER", "The", "similar", "problem", "affected", "not", "required", "values", "many", "of", "them", "turned", "to", "be", "not", "nullable", "NUMBER", "However", "I", "like", "this", "because", "I", "have", "a", "control", "via", "x", "nullable", "true", "to", "turn", "them", "to", "be", "nullable", "when", "I", "want", "to", "NUMBER", "On", "the", "other", "hand", "there", "be", "no", "way", "to", "use", "the", "same", "way", "to", "turn", "required", "properties", "to", "be", "not", "nullable", "NUMBER", "So", "the", "request", "be", "to", "make", "x", "nullable", "false", "to", "work", "with", "the", "required", "property", "NUMBER", "relate", "NUMBER", "I", "think", "it", "be", "true", "if", "a", "value", "can", "get", "in", "to", "the", "range", "of", "a", "zero", "value", "NUMBER", "Otherwise", "a", "zero", "value", "can", "be", "use", "as", "nil", "null", "NUMBER", "For", "a", "required", "validation", "error", "message", "it", "can", "say", "value", "be", "required", "and", "can", "not", "be", "nil", "or", "zero", "empty", "NUMBER", "Here", "be", "a", "solution", "pull", "request", "that", "satisfies", "default", "behavior", "as", "well", "as", "user", "defined", "behavior", "LINK", "swagger", "go", "swagger", "pull", "NUMBER", "Now", "I", "be", "confused", "NUMBER", "I", "test", "this", "commit", "from", "master", "NUMBER", "f", "NUMBER", "c", "LINK", "swagger", "go", "swagger", "commit", "NUMBER", "f", "NUMBER", "cca", "NUMBER", "d", "NUMBER", "bac", "NUMBER", "d", "NUMBER", "b", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "b", "NUMBER", "b", "NUMBER", "dad", "Assume", "that", "I", "have", "a", "definition", "newProfile", "type", "object", "required", "id", "properties", "id", "type", "integer", "x", "nullable", "true", "That", "was", "generate", "in", "models", "type", "NewProfile", "struct", "id", "Required", "true", "ID", "int", "NUMBER", "json", "id", "func", "m", "NewProfile", "validateID", "formats", "strfmt", "NUMBER", "Registry", "error", "if", "err", "validate", "NUMBER", "Required", "id", "body", "int", "NUMBER", "m", "NUMBER", "ID", "err", "nil", "return", "err", "return", "nil", "So", "id", "NUMBER", "be", "invalid", "by", "current", "version", "of", "validate", "NUMBER", "Required", "NUMBER", "And", "leads", "to", "a", "runtime", "panic", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "because", "of", "this", "int", "NUMBER", "m", "NUMBER", "ID", "Desired", "behaviour", "be", "id", "NUMBER", "valid", "invalid", "but", "no", "panic", "NUMBER", "Am", "I", "correct", "Can", "you", "give", "some", "clarifications", "please", "If", "_all", "required", "values", "be", "now", "pointers_", "this", "be", "a", "regression", "NUMBER", "Why", "would", "a", "pointer", "be", "necessary", "if", "the", "value", "be", "required", "If", "the", "pointer", "was", "add", "because", "the", "standard", "JSON", "unmarshaler", "do", "not", "allow", "to", "distinguish", "when", "a", "property", "be", "miss", "this", "be", "the", "JSON", "parsing", "that", "must", "be", "fix", "for", "example", "by", "provide", "a", "custom", "UnmarshalJSON", "method", "that", "checks", "for", "miss", "properties", "not", "the", "struct", "NUMBER", "I", "think", "there", "many", "opinions", "around", "this", "I", "also", "tend", "to", "agree", "with", "Ivan", "NUMBER", "So", "the", "same", "day", "I", "add", "an", "ability", "to", "enforce", "pointer", "non", "pointer", "value", "for", "required", "properties", "use", "x", "nullable", "true", "false", "NUMBER", "casualjim", "Yes", "you", "be", "correct", "NUMBER", "I", "somehow", "messed", "the", "environment", "and", "stuck", "in", "previous", "version", "of", "the", "template", "NUMBER", "Starting", "the", "server", "in", "a", "clean", "docker", "environment", "shows", "no", "issue", "with", "required", "field", "NUMBER", "Shame", "on", "me", "NUMBER", "please", "consider", "the", "opposite", "case", "where", "you", "want", "to", "validate", "the", "struct", "not", "the", "json", "NUMBER", "This", "use", "case", "be", "real", "on", "generate", "clients", "NUMBER", "It", "seems", "we", "have", "now", "a", "case", "where", "the", "model", "generation", "could", "be", "improved", "if", "it", "knew", "if", "the", "model", "be", "use", "for", "client", "or", "for", "server", "NUMBER", "The", "readOnly", "flag", "in", "the", "spec", "be", "also", "useful", "NUMBER", "How", "do", "you", "distinguish", "between", "value", "set", "and", "value", "unset", "As", "I", "stated", "in", "NUMBER", "we", "should", "distinguish", "the", "case", "where", "the", "Go", "zero", "value", "be", "a", "valid", "value", "or", "not", "NUMBER", "A", "pointer", "be", "not", "needed", "if", "the", "Go", "zero", "value", "be", "not", "a", "valid", "value", "for", "the", "schema", "NUMBER", "dolmen", "You", "now", "can", "instruct", "swagger", "use", "x", "nullable", "false", "true", "to", "generate", "a", "value", "or", "a", "pointer", "it", "be", "totally", "up", "to", "NUMBER", "I", "be", "with", "you", "since", "I", "understand", "the", "problem", "but", "I", "be", "also", "with", "Ivan", "since", "there", "some", "cases", "when", "such", "behavior", "be", "not", "desired", "NUMBER", "So", "the", "best", "approach", "to", "me", "will", "be", "the", "usage", "of", "x", "nullable", "where", "you", "wish", "to", "have", "a", "specific", "behavior", "NUMBER", "Closing", "as", "it", "be", "no", "longer", "the", "case", "NUMBER", "Problem", "statement", "Requests", "with", "required", "nested", "objects", "be", "not", "validated", "correctly", "NUMBER", "If", "the", "object", "be", "set", "then", "it", "its", "contents", "be", "validated", "NUMBER", "However", "the", "object", "itself", "be", "set", "be", "not", "validated", "NUMBER", "Swagger", "specification", "paths", "thing", "post", "summary", "CreateThing", "description", "parameters", "name", "body", "in", "body", "required", "true", "description", "schema", "ref", "definitions", "CreateThingRequest", "responses", "NUMBER", "description", "Success", "schema", "ref", "definitions", "CreateThingResponse", "definitions", "CreateThingRequest", "type", "object", "required", "required_other_thing", "required_array_other_thing", "properties", "required_other_thing", "ref", "definitions", "OtherThing", "description", "BUG", "presence", "of", "this", "should", "be", "validated", "but", "be", "not", "required_array_other_thing", "type", "array", "items", "ref", "definitions", "OtherThing", "description", "description", "CreateThingResponse", "type", "object", "properties", "description", "OtherThing", "type", "object", "properties", "some_field", "type", "string", "description", "description", "host", "connect", "NUMBER", "squareup", "NUMBER", "com", "schemes", "https", "produces", "application", "json", "swagger", "NUMBER", "consumes", "application", "json", "info", "title", "Test", "API", "version", "NUMBER", "Generated", "code", "The", "following", "be", "a", "snippet", "from", "the", "generate", "create_thing_request", "NUMBER", "go", "code", "NUMBER", "The", "code", "between", "the", "START", "and", "END", "comments", "was", "not", "generate", "as", "expected", "NUMBER", "func", "m", "CreateThingRequest", "validateRequiredOtherThing", "formats", "strfmt", "NUMBER", "Registry", "error", "START", "necessary", "code", "that", "was", "not", "generate", "if", "err", "validate", "NUMBER", "Required", "required_other_thing", "body", "m", "NUMBER", "RequiredOtherThing", "err", "nil", "return", "err", "END", "if", "m", "NUMBER", "RequiredOtherThing", "nil", "if", "err", "m", "NUMBER", "RequiredOtherThing", "NUMBER", "Validate", "formats", "err", "nil", "return", "err", "return", "nil", "Yes", "although", "they", "be", "similar", "NUMBER", "This", "bug", "covers", "the", "case", "of", "an", "unset", "required", "field", "that", "be", "an", "object", "not", "a", "primitive", "passing", "validation", "NUMBER", "something_required", "null", "where", "something_required", "should", "be", "set", "to", "an", "object", "but", "validation", "pass", "NUMBER", "covers", "an", "optional", "field", "that", "be", "an", "object", "be", "set", "but", "never", "validated", "NUMBER", "something_optional", "an_int", "but", "i", "m", "a", "string", "optional", "nested", "object", "be", "not", "validated", "Problem", "statement", "I", "m", "get", "a", "no", "import", "find", "message", "Here", "be", "sample", "of", "the", "schema", "go", "package", "model", "import", "encoding", "json", "time", "NUMBER", "nullable", "gopkg", "NUMBER", "in", "guregu", "null", "NUMBER", "v", "NUMBER", "swagger", "model", "type", "Community", "struct", "Sid", "string", "json", "sid", "Designjson", "nullable", "NUMBER", "JSON", "Status", "null", "NUMBER", "String", "Xdate", "null", "NUMBER", "String", "The", "exact", "error", "I", "get", "be", "GOPATH", "bin", "swagger", "generate", "spec", "m", "o", "NUMBER", "swagger", "NUMBER", "json", "no", "import", "find", "for", "null", "I", "m", "assuming", "null", "be", "the", "package", "I", "m", "use", "to", "wrap", "sql", "types", "that", "might", "return", "a", "null", "value", "NUMBER", "I", "figured", "the", "import", "null", "NUMBER", "v", "NUMBER", "might", "be", "confusing", "it", "so", "I", "replaced", "gopkg", "NUMBER", "in", "guregu", "null", "NUMBER", "v", "NUMBER", "with", "null", "gopkg", "NUMBER", "in", "guregu", "null", "NUMBER", "v", "NUMBER", "to", "give", "it", "a", "package", "name", "NUMBER", "this", "produces", "the", "following", "error", "GOPATH", "bin", "swagger", "generate", "spec", "m", "o", "NUMBER", "swagger", "NUMBER", "json", "package", "NUMBER", "model", "error", "be", "unknown", "primitive", "byte", "What", "be", "I", "doing", "wrong", "here", "NUMBER", "will", "it", "just", "not", "support", "non", "primative", "types", "Thanks", "Hmm", "NUMBER", "I", "think", "I", "need", "to", "preserve", "sql", "types", "since", "this", "struct", "be", "tied", "to", "the", "db", "ex", "NUMBER", "LINK", "NullFloat", "NUMBER", "Null", "nullable", "be", "just", "wrappers", "around", "that", "NUMBER", "I", "m", "sure", "someone", "else", "must", "be", "dealing", "with", "database", "sql", "and", "mapping", "their", "model", "definitions", "NUMBER", "This", "PR", "aims", "to", "fix", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "I", "change", "the", "fixture", "goparsing", "classification", "operations", "todo_operation", "NUMBER", "go", "file", "in", "order", "to", "test", "more", "general", "scopes", "For", "example", "Google", "uses", "URL", "as", "scopes", "NUMBER", "I", "change", "the", "scan", "routes_test", "NUMBER", "go", "accordingly", "NUMBER", "I", "remove", "the", "useless", "regexp", "that", "I", "replaced", "with", "a", "simple", "TrimAfter", "followed", "by", "a", "TrimSpace", "NUMBER", "This", "be", "possibile", "because", "following", "the", "specifications", "scopes", "can", "t", "contain", "spaces", "must", "be", "url", "encoded", "if", "present", "NUMBER", "Signed", "off", "by", "Paolo", "Galeone", "nessuno", "nerdz", "NUMBER", "eu", "Function", "Required", "had", "I", "suppose", "not", "desired", "behaviour", "due", "to", "not", "correct", "usage", "of", "reflect", "package", "NUMBER", "Also", "I", "add", "some", "test", "to", "validate", "package", "because", "there", "were", "not", "that", "many", "of", "them", "NUMBER", "I", "be", "not", "that", "sure", "but", "aren", "t", "these", "CI", "to", "long", "error", "kinda", "common", "for", "the", "current", "branch", "Am", "I", "supposed", "care", "about", "them", "in", "this", "pull", "request", "to", "make", "it", "accepted", "Hi", "I", "m", "trying", "to", "use", "swagger", "to", "generate", "a", "swagger", "NUMBER", "json", "file", "NUMBER", "I", "ve", "defined", "a", "route", "following", "the", "referece", "LINK", "in", "that", "way", "go", "Posts", "handles", "the", "request", "and", "returns", "the", "required", "posts", "write", "by", "the", "specified", "user", "func", "Posts", "echo", "NUMBER", "HandlerFunc", "swagger", "route", "GET", "users", "id", "posts", "user", "posts", "getUserPosts", "List", "posts", "on", "user", "board", "filtered", "by", "some", "parameters", "NUMBER", "This", "will", "show", "the", "last", "posts", "on", "the", "user", "board", "by", "default", "NUMBER", "You", "can", "personalize", "the", "request", "via", "query", "string", "parameters", "Security", "oauth", "profile", "read", "base", "read", "Responses", "default", "apiResponse", "NUMBER", "other", "code", "Afther", "that", "I", "generate", "the", "file", "with", "generate", "swagger", "generate", "spec", "o", "swagger", "NUMBER", "json", "But", "the", "character", "in", "the", "oauth", "NUMBER", "scope", "definition", "be", "miss", "as", "you", "can", "see", "json", "paths", "users", "id", "posts", "get", "description", "This", "will", "show", "the", "last", "posts", "on", "the", "user", "board", "by", "default", "NUMBER", "nYou", "can", "personalize", "the", "request", "via", "query", "string", "parameters", "tags", "user", "posts", "summary", "List", "posts", "on", "user", "board", "filtered", "by", "some", "parameters", "NUMBER", "operationId", "getUserPosts", "security", "oauth", "profileread", "baseread", "responses", "default", "ref", "responses", "apiResponse", "In", "my", "API", "scopes", "follows", "the", "following", "syntax", "TAG", "read", "write", "Thus", "something", "like", "profile", "read", "write", "base", "read", "or", "comments", "read", "profile", "write", "be", "fine", "in", "my", "specification", "and", "in", "OAuth", "NUMBER", "specification", "too", "because", "the", "list", "of", "scopes", "con", "contain", "anything", "and", "scopes", "must", "be", "separated", "by", "a", "single", "space", "NUMBER", "Is", "there", "something", "I", "m", "doing", "wrong", "or", "it", "s", "a", "swagger", "bug", "limitation", "Thank", "you", "The", "functionality", "to", "determine", "the", "value", "of", "reinstateSlash", "would", "set", "it", "to", "true", "in", "the", "case", "where", "req", "NUMBER", "URL", "NUMBER", "Path", "be", "NUMBER", "This", "would", "result", "in", "an", "extra", "be", "appended", "to", "req", "NUMBER", "URL", "NUMBER", "Path", "after", "it", "was", "joined", "with", "the", "BasePath", "cause", "request", "to", "fail", "NUMBER", "The", "path", "NUMBER", "Join", "function", "calls", "path", "NUMBER", "Clean", "on", "each", "path", "element", "to", "be", "joined", "NUMBER", "Clean", "will", "return", "a", "trail", "on", "a", "path", "element", "only", "if", "it", "be", "NUMBER", "I", "have", "an", "app", "that", "generates", "a", "JSON", "response", "body", "declared", "as", "follows", "swagger", "response", "Response", "type", "Response", "struct", "ResultCode", "string", "json", "code", "Message", "string", "json", "message", "ScanId", "string", "json", "scan_id", "Filesize", "string", "json", "filesize", "ContentType", "string", "json", "content_type", "ScanResultUrl", "string", "json", "scanresult_url", "When", "I", "generate", "a", "Swagger", "spec", "from", "the", "go", "swagger", "response", "markup", "the", "spec", "shows", "the", "response", "struct", "members", "as", "response", "headers", "TAG", "responses", "ScanResponse", "headers", "content_type", "type", "string", "filesize", "type", "string", "message", "type", "string", "scan_id", "type", "string", "scanresult_url", "type", "string", "Questions", "be", "this", "expected", "behaviour", "be", "there", "markup", "to", "express", "that", "my", "response", "be", "a", "simple", "JSON", "response", "body", "Sure", "could", "do", "that", "but", "it", "means", "a", "nested", "layer", "in", "the", "JSON", "serialized", "to", "the", "client", "NUMBER", "Is", "that", "the", "only", "way", "yup", "I", "can", "pass", "back", "the", "nested", "Body", "struct", "thanks", "NUMBER", "Not", "sure", "I", "love", "the", "idea", "of", "nesting", "my", "structs", "to", "support", "generation", "tho", "for", "example", "initializing", "with", "nesting", "seems", "a", "little", "awkward", "NUMBER", "Any", "interest", "in", "support", "spec", "generation", "with", "non", "nested", "types", "casualjim", "I", "would", "like", "this", "as", "well", "NUMBER", "If", "you", "could", "please", "point", "out", "where", "in", "the", "swagger", "generate", "spec", "code", "would", "be", "a", "good", "place", "to", "start", "exploring", "I", "could", "take", "a", "stab", "at", "this", "NUMBER", "This", "be", "a", "blocker", "for", "us", "adopting", "go", "swagger", "for", "Docker", "NUMBER", "I", "quite", "like", "the", "idea", "of", "swagger", "responseBody", "NUMBER", "Is", "anybody", "work", "on", "this", "If", "I", "find", "some", "time", "I", "might", "dig", "into", "this", "NUMBER", "Oh", "_nice_", "I", "ll", "give", "it", "a", "try", "NUMBER", "Thanks", "casualjim", "I", "think", "none", "of", "our", "response", "have", "any", "special", "headers", "NUMBER", "Adding", "Swagger", "annotations", "to", "the", "codebase", "be", "much", "more", "palatable", "when", "there", "aren", "t", "hundreds", "of", "useless", "wrapper", "structs", "NUMBER", "Does", "that", "PR", "actually", "allow", "you", "to", "avoid", "use", "wrapper", "structs", "From", "the", "docs", "LINK", "Definitions", "only", "appear", "in", "the", "generate", "spec", "when", "they", "be", "actually", "use", "somewhere", "in", "the", "application", "eg", "NUMBER", "on", "a", "params", "or", "response", "struct", "so", "NUMBER", "do", "I", "need", "a", "wrapper", "struct", "anyways", "Can", "a", "swagger", "route", "directly", "refer", "to", "a", "swagger", "model", "in", "the", "Responses", "section", "It", "doesn", "t", "look", "like", "it", "NUMBER", "Yes", "that", "seems", "to", "work", "NUMBER", "Thanks", "Add", "package", "name", "in", "message", "unknown", "primitive", "NUMBER", "NUMBER", "For", "better", "diagnostic", "issue", "NUMBER", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "When", "compile", "go", "swagger", "v", "NUMBER", "the", "tarball", "from", "LINK", "swagger", "go", "swagger", "release", "git", "snapshot", "ff", "NUMBER", "df", "NUMBER", "I", "get", "this", "error", "agger", "cmd", "swagger", "vendor", "golang", "NUMBER", "org", "x", "tool", "go", "loader", "util", "NUMBER", "go", "NUMBER", "NUMBER", "cannot", "find", "package", "golang", "NUMBER", "org", "x", "tool", "go", "buildutil", "in", "any", "of", "var", "tmp", "portage", "dev", "util", "go", "swagger", "NUMBER", "work", "gopath", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "golang", "NUMBER", "org", "x", "tool", "go", "buildutil", "vendor", "tree", "usr", "lib", "go", "src", "golang", "NUMBER", "org", "x", "tool", "go", "buildutil", "from", "GOROOT", "var", "tmp", "portage", "dev", "util", "go", "swagger", "NUMBER", "work", "gopath", "src", "golang", "NUMBER", "org", "x", "tool", "go", "buildutil", "from", "GOPATH", "The", "Go", "lang", "toolchain", "be", "right", "there", "isn", "t", "a", "golang", "NUMBER", "org", "x", "tool", "go", "buildutil", "inside", "the", "vendor", "path", "of", "the", "git", "snapshot", "ff", "NUMBER", "df", "NUMBER", "LINK", "swagger", "go", "swagger", "tree", "ff", "NUMBER", "df", "NUMBER", "bf", "NUMBER", "f", "NUMBER", "a", "NUMBER", "b", "NUMBER", "f", "NUMBER", "ea", "NUMBER", "d", "NUMBER", "vendor", "golang", "NUMBER", "org", "x", "tool", "go", "v", "NUMBER", "NUMBER", "This", "scenario", "makes", "impossible", "to", "properly", "package", "go", "swagger", "for", "GNU", "Linux", "source", "based", "distributions", "such", "as", "Arch", "and", "Gentoo", "due", "to", "miss", "bundled", "dependencies", "NUMBER", "I", "be", "the", "maintainer", "of", "the", "Gentoo", "ebuild", "for", "go", "swagger", "you", "can", "find", "it", "here", "LINK", "Terrible", "go", "overlay", "tree", "master", "dev", "util", "go", "swagger", "so", "I", "can", "easily", "circumvent", "the", "issue", "by", "manually", "update", "the", "miss", "dependency", "NUMBER", "Unfortunately", "it", "will", "not", "be", "so", "easy", "to", "fix", "for", "other", "distributions", "so", "I", "think", "it", "s", "worth", "fix", "by", "upstream", "with", "an", "update", "tarball", "or", "a", "new", "version", "bump", "whatever", "suits", "you", "better", "NUMBER", "be", "there", "something", "that", "can", "be", "worked", "out", "to", "get", "gentoo", "support", "include", "in", "the", "release", "process", "Sure", "when", "there", "be", "new", "release", "ready", "to", "be", "rolled", "out", "just", "warn", "me", "and", "I", "ll", "test", "a", "live", "git", "snapshot", "on", "x", "NUMBER", "_", "NUMBER", "x", "NUMBER", "_", "NUMBER", "and", "arm", "NUMBER", "complete", "with", "Unit", "Testing", "NUMBER", "Then", "I", "ll", "report", "a", "success", "or", "whatever", "be", "amiss", "before", "the", "official", "release", "NUMBER", "I", "do", "it", "regularly", "for", "several", "official", "package", "as", "a", "reference", "take", "Asciinema", "s", "work", "flow", "as", "an", "example", "LINK", "They", "use", "a", "specific", "issue", "with", "which", "new", "release", "be", "signalled", "and", "then", "every", "GNU", "Linux", "distribution", "maintainers", "report", "their", "feedbacks", "NUMBER", "It", "works", "quite", "well", "as", "a", "solution", "but", "just", "in", "case", "I", "m", "open", "to", "other", "suggestions", "too", "NUMBER", "I", "have", "no", "particular", "preference", "NUMBER", "This", "topic", "has", "already", "came", "up", "NUMBER", "It", "would", "be", "nice", "to", "be", "able", "to", "set", "own", "TLS", "config", "options", "like", "client", "cert", "validation", "etc", "NUMBER", "It", "seems", "like", "it", "be", "possible", "to", "just", "add", "an", "additional", "configuration", "hook", "into", "configure_xxx", "NUMBER", "go", "to", "set", "custom", "TLS", "options", "NUMBER", "diff", "diff", "git", "a", "generator", "template", "server", "configureapi", "NUMBER", "gotmpl", "b", "generator", "template", "server", "configureapi", "NUMBER", "gotmpl", "index", "NUMBER", "dd", "NUMBER", "ce", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "a", "generator", "template", "server", "configureapi", "NUMBER", "gotmpl", "b", "generator", "template", "server", "configureapi", "NUMBER", "gotmpl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "package", "NUMBER", "APIPackage", "import", "net", "http", "crypto", "tls", "error", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "error", "httpkit", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "func", "configureAPI", "api", "NUMBER", "Package", "NUMBER", "pascalize", "NUMBER", "Name", "API", "http", "NUMBER", "Handler", "return", "setupGlobalMiddleware", "api", "NUMBER", "Serve", "setupMiddlewares", "The", "TLS", "configuration", "before", "HTTPS", "server", "starts", "NUMBER", "func", "configureTLS", "tlsConfig", "tls", "NUMBER", "Config", "Make", "all", "necessary", "change", "to", "the", "TLS", "configuration", "here", "NUMBER", "The", "middleware", "configuration", "be", "for", "the", "handler", "executors", "NUMBER", "These", "do", "not", "apply", "to", "the", "swagger", "NUMBER", "json", "document", "NUMBER", "The", "middleware", "executes", "after", "routing", "but", "before", "authentication", "binding", "and", "validation", "func", "setupMiddlewares", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "diff", "git", "a", "generator", "template", "server", "server", "NUMBER", "gotmpl", "b", "generator", "template", "server", "server", "NUMBER", "gotmpl", "index", "bba", "NUMBER", "ad", "NUMBER", "b", "NUMBER", "NUMBER", "a", "generator", "template", "server", "server", "NUMBER", "gotmpl", "b", "generator", "template", "server", "server", "NUMBER", "gotmpl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "func", "s", "Server", "Serve", "err", "error", "httpsServer", "NUMBER", "TLSConfig", "NUMBER", "MinVersion", "tls", "NUMBER", "VersionTLS", "NUMBER", "httpsServer", "NUMBER", "TLSConfig", "NUMBER", "Certificates", "make", "tls", "NUMBER", "Certificate", "NUMBER", "httpsServer", "NUMBER", "TLSConfig", "NUMBER", "Certificates", "NUMBER", "err", "tls", "NUMBER", "LoadX", "NUMBER", "KeyPair", "string", "s", "NUMBER", "TLSCertificate", "string", "s", "NUMBER", "TLSCertificateKey", "configureTLS", "httpsServer", "NUMBER", "TLSConfig", "if", "err", "nil", "return", "err", "Hi", "I", "use", "swagger", "to", "build", "a", "simple", "go", "server", "get", "this", "issue", "the", "required", "flags", "tls", "certificate", "and", "tls", "key", "were", "not", "specified", "so", "how", "can", "i", "set", "the", "tls", "certificate", "and", "tls", "key", "I", "also", "ended", "up", "here", "come", "from", "the", "todo", "list", "tutorial", "LINK", "swagger", "go", "swagger", "blob", "master", "docs", "tutorial", "todo", "list", "NUMBER", "md", "NUMBER", "Would", "you", "take", "a", "PR", "to", "add", "in", "the", "scheme", "http", "to", "that", "doc", "FWIW", "I", "m", "get", "a", "NUMBER", "rather", "than", "the", "expected", "NUMBER", "when", "I", "run", "the", "generate", "server", "NUMBER", "Error", "message", "improved", "NUMBER", "By", "example", "Old", "message", "be", "s", "token", "NUMBER", "Pos", "NUMBER", "s", "_ast", "NUMBER", "FieldList", "NUMBER", "NUMBER", "xc", "NUMBER", "db", "NUMBER", "NUMBER", "s", "_ast", "NUMBER", "FieldList", "NUMBER", "NUMBER", "xc", "NUMBER", "db", "NUMBER", "NUMBER", "xc", "NUMBER", "db", "NUMBER", "c", "NUMBER", "NUMBER", "be", "unsupported", "for", "a", "schema", "New", "message", "be", "Expr", "path", "src", "gopkg", "NUMBER", "in", "mgo", "NUMBER", "v", "NUMBER", "session", "NUMBER", "go", "NUMBER", "NUMBER", "be", "unsupported", "for", "a", "schema", "This", "gives", "handlers", "access", "to", "the", "http", "NUMBER", "Request", "object", "itself", "via", "Params", "NUMBER", "I", "liked", "this", "approach", "better", "than", "just", "supplying", "the", "RequestURL", "because", "now", "handlers", "can", "build", "the", "URLs", "themselves", "or", "use", "the", "http", "NUMBER", "Request", "as", "per", "their", "need", "NUMBER", "This", "PR", "add", "a", "serve", "ui", "command", "to", "swagger", "The", "command", "be", "pretty", "simplistic", "NUMBER", "NUMBER", "Given", "a", "swagger", "spec", "path", "it", "loads", "the", "spec", "NUMBER", "Host", "the", "spec", "NUMBER", "json", "on", "a", "server", "NUMBER", "Open", "petstore", "NUMBER", "swagger", "NUMBER", "io", "with", "the", "locally", "hosted", "spec", "NUMBER", "This", "would", "allow", "users", "to", "get", "a", "quick", "view", "of", "their", "specification", "TAG", "This", "change", "be", "TAG", "LINK", "swagger", "go", "swagger", "NUMBER", "TAG", "A", "couple", "of", "somewhat", "relate", "question", "Q", "NUMBER", "Currently", "swagger", "parameters", "be", "defined", "as", "standalone", "typed", "structures", "listing", "all", "relate", "paths", "NUMBER", "Is", "there", "any", "possibility", "to", "group", "parameters", "under", "each", "relate", "path", "The", "parameter", "definition", "could", "be", "still", "do", "once", "and", "referenced", "from", "multiple", "paths", "NUMBER", "This", "would", "greatly", "improve", "maintainability", "of", "our", "Swagger", "Go", "docs", "NUMBER", "Q", "NUMBER", "In", "generate", "swagger", "specs", "parameter", "definitions", "be", "duplicate", "for", "each", "path", "NUMBER", "Is", "it", "possible", "instead", "to", "generate", "swagger", "parameters", "section", "and", "reference", "it", "from", "each", "relevant", "path", "Thanks", "NUMBER", "I", "have", "the", "same", "question", "as", "NUMBER", "above", "NUMBER", "Any", "word", "Thanks", "Hi", "Go", "swagger", "looks", "great", "for", "me", "NUMBER", "But", "what", "about", "websocket", "support", "on", "server", "side", "My", "application", "will", "be", "with", "chat", "component", "and", "I", "want", "use", "websockets", "web", "and", "mobile", "clients", "NUMBER", "Maybe", "I", "miss", "something", "and", "there", "be", "better", "way", "to", "implement", "this", "NUMBER", "Thanks", "NUMBER", "Do", "you", "have", "google", "group", "or", "another", "place", "for", "question", "Would", "love", "to", "see", "this", "happen", "and", "help", "out", "where", "I", "can", "NUMBER", "We", "use", "go", "swagger", "currently", "at", "LINK", "url", "and", "when", "I", "was", "evaluating", "it", "I", "almost", "pass", "it", "up", "because", "we", "were", "looking", "for", "a", "way", "to", "just", "parse", "and", "load", "a", "swagger", "file", "NUMBER", "If", "everything", "were", "to", "be", "broken", "up", "into", "libraries", "I", "feel", "like", "it", "would", "be", "a", "lot", "more", "approachable", "NUMBER", "Go", "Swagger", "can", "do", "a", "lot", "of", "cool", "things", "and", "navigating", "the", "source", "code", "was", "daunting", "NUMBER", "One", "day", "Stoplight", "might", "do", "code", "generation", "for", "apis", "but", "because", "we", "don", "t", "need", "that", "now", "I", "almost", "pass", "on", "this", "awesome", "project", "NUMBER", "I", "have", "submitted", "a", "few", "pull", "request", "to", "fix", "some", "issue", "in", "the", "spec", "package", "and", "even", "though", "all", "the", "test", "were", "passing", "in", "the", "spec", "package", "my", "change", "broke", "some", "test", "in", "another", "packaged", "that", "I", "knew", "nothing", "about", "and", "had", "to", "fix", "NUMBER", "That", "be", "all", "for", "now", "NUMBER", "It", "would", "be", "nice", "to", "serve", "swagger", "ui", "in", "a", "more", "user", "friendly", "way", "NUMBER", "Also", "for", "better", "compatibility", "with", "the", "Docker", "go", "wrapper", "command", "can", "main", "NUMBER", "go", "be", "moved", "in", "the", "root", "projectFolder", "i", "NUMBER", "e", "NUMBER", "test", "test", "api", "main", "NUMBER", "go", "from", "test", "test", "api", "cmd", "test", "server", "main", "NUMBER", "go", "Docker", "build", "error", "can", "t", "load", "package", "package", "test", "test", "api", "no", "buildable", "Go", "source", "file", "in", "go", "src", "test", "test", "api", "can", "t", "load", "package", "package", "test", "test", "api", "cmd", "test", "server", "no", "buildable", "Go", "source", "file", "in", "go", "src", "test", "test", "api", "cmd", "test", "server", "Another", "cool", "thing", "to", "have", "would", "be", "database", "schema", "migrations", "auto", "gen", "NUMBER", "Something", "like", "slick", "codegen", "LINK", "generation", "NUMBER", "html", "NUMBER", "I", "be", "the", "author", "of", "the", "swagger", "NUMBER", "LINK", "package", "which", "be", "intended", "to", "be", "a", "rewrite", "upgrade", "of", "go", "restful", "swagger", "LINK", "restful", "tree", "master", "swagger", "NUMBER", "The", "goal", "of", "this", "swagger", "NUMBER", "project", "be", "to", "separate", "the", "Swagger", "part", "from", "the", "REST", "part", "allowing", "others", "to", "use", "the", "package", "independently", "by", "provinding", "only", "the", "specification", "objects", "NUMBER", "I", "was", "planning", "to", "create", "another", "sub", "package", "for", "build", "model", "objects", "from", "Go", "types", "as", "I", "already", "created", "NUMBER", "NUMBER", "As", "discussed", "offline", "with", "one", "of", "the", "authors", "of", "go", "swagger", "I", "would", "like", "to", "see", "go", "swagger", "to", "be", "split", "into", "multiple", "repos", "for", "the", "most", "part", "because", "of", "handle", "the", "dependencies", "NUMBER", "Applications", "that", "import", "go", "swagger", "use", "vendoring", "should", "not", "be", "forced", "to", "include", "the", "whole", "package", "deal", "e", "NUMBER", "g", "NUMBER", "generators", "NUMBER", "If", "the", "go", "swagger", "project", "would", "separate", "the", "spec", "part", "into", "a", "new", "repo", "then", "I", "will", "probably", "drop", "my", "swagger", "NUMBER", "project", "and", "collaborate", "on", "that", "instead", "NUMBER", "I", "commented", "about", "this", "on", "another", "issue", "but", "I", "m", "not", "sure", "if", "you", "saw", "it", "so", "I", "ll", "repeat", "it", "here", "NUMBER", "What", "I", "d", "really", "like", "to", "see", "be", "a", "structure", "of", "generate", "code", "that", "allows", "it", "to", "stay", "as", "a", "completely", "standalone", "module", "that", "requires", "no", "editing", "of", "the", "file", "within", "NUMBER", "I", "have", "taken", "to", "simply", "ignoring", "most", "of", "the", "generate", "main", "configure_xyz", "NUMBER", "go", "and", "server", "NUMBER", "go", "code", "and", "duplicating", "their", "functionality", "in", "external", "modules", "in", "order", "to", "avoid", "the", "mess", "that", "occur", "when", "I", "regenerate", "from", "the", "spec", "and", "the", "structure", "of", "file", "I", "ve", "edit", "has", "change", "regard", "edits", "due", "to", "go", "swagger", "change", "not", "necessarily", "due", "to", "change", "to", "my", "spec", "NUMBER", "It", "s", "much", "easier", "to", "regenerate", "from", "the", "spec", "and", "then", "diff", "that", "entire", "tree", "with", "the", "knowledge", "that", "I", "m", "only", "looking", "at", "differences", "in", "generate", "code", "not", "add", "in", "the", "complications", "of", "my", "hand", "edits", "NUMBER", "So", "my", "recommendation", "be", "that", "the", "entire", "cmd", "directory", "as", "well", "as", "configure_xyz", "NUMBER", "go", "and", "server", "NUMBER", "go", "be", "factored", "out", "into", "a", "separate", "example", "directory", "to", "indicate", "how", "you", "_could_", "use", "the", "generate", "code", "but", "with", "the", "expectation", "that", "people", "be", "_actually_", "going", "to", "integrate", "the", "generate", "code", "into", "a", "codebase", "that", "doesn", "t", "necessarily", "follow", "that", "structure", "NUMBER", "Oh", "yeah", "I", "meant", "to", "throw", "in", "a", "comment", "to", "the", "effect", "that", "this", "may", "not", "be", "specifically", "relevant", "to", "this", "issue", "but", "so", "long", "as", "you", "re", "reorganizing", "things", "I", "want", "to", "mention", "it", "so", "you", "have", "it", "in", "mind", "while", "moving", "things", "around", "NUMBER", "Thanks", "NUMBER", "Title", "says", "it", "all", "NUMBER", "close", "NUMBER", "Signed", "off", "by", "Tom", "Pytleski", "pytlesk", "NUMBER", "gmail", "NUMBER", "com", "Closes", "NUMBER", "Problem", "statement", "unable", "to", "resolve", "embedded", "struct", "for", "RankBy", "Error", "cause", "RankBy", "be", "a", "custom", "type", "which", "appears", "to", "be", "the", "source", "of", "the", "error", "parsing", "it", "NUMBER", "RankBy", "specifies", "the", "order", "in", "which", "results", "be", "listed", "NUMBER", "RankBy", "LINK", "RankBy", "Steps", "to", "reproduce", "import", "googlemaps", "NUMBER", "github", "NUMBER", "io", "maps", "NearbySearchRequest", "swagger", "parameters", "Nearby", "type", "NearbySearchRequest", "struct", "maps", "NUMBER", "NearbySearchRequest", "PlacesNearby", "swagger", "route", "POST", "places", "nearby", "places", "Nearby", "Search", "for", "a", "place", "nearby", "Produces", "application", "json", "Responses", "NUMBER", "maps", "NUMBER", "PlacesSearchResponse", "func", "s", "Server", "PlacesNearby", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "in", "this", "case", "be", "better", "to", "do", "go", "swagger", "response", "NearbySearchResponse", "type", "NearbySearchResponse", "struct", "In", "body", "Body", "maps", "NUMBER", "PlacesSearchResponse", "and", "this", "structure", "be", "not", "necessary", "to", "use", "in", "your", "handler", "NUMBER", "it", "should", "exists", "just", "for", "swagger", "NUMBER", "In", "body", "in", "the", "response", "isn", "t", "necessary", "it", "works", "without", "this", "NUMBER", "The", "request", "part", "be", "what", "be", "throw", "an", "error", "specifically", "looking", "for", "RankBy", "NearbySearchRequest", "swagger", "parameters", "Nearby", "type", "NearbySearchRequest", "struct", "maps", "NUMBER", "NearbySearchRequest", "I", "m", "seeing", "the", "same", "thing", "with", "the", "following", "file", "go", "package", "main", "import", "uuid", "github", "NUMBER", "com", "satori", "go", "NUMBER", "uuid", "type", "Foo", "struct", "uuid", "NUMBER", "UUID", "swagger", "model", "type", "Bar", "struct", "Id", "Foo", "func", "main", "print", "NUMBER", "When", "I", "run", "swagger", "I", "get", "the", "following", "error", "tmp", "swagger", "generate", "spec", "m", "NUMBER", "NUMBER", "o", "swagger", "NUMBER", "json", "unable", "to", "resolve", "embedded", "struct", "for", "uuid", "UUID", "UUID", "be", "defined", "in", "the", "library", "as", "type", "UUID", "NUMBER", "byte", "casualjim", "any", "ideas", "Hey", "there", "long", "time", "indeed", "NUMBER", "Funny", "that", "we", "both", "ended", "up", "in", "Go", "land", "now", "NUMBER", "Hope", "everything", "be", "going", "well", "for", "you", "NUMBER", "Where", "would", "that", "annotation", "go", "Do", "I", "need", "to", "open", "a", "PR", "on", "LINK", "or", "can", "I", "just", "do", "it", "in", "my", "code", "casualjim", "that", "worked", "thanks", "Has", "anybody", "use", "go", "swagger", "to", "do", "end", "to", "end", "mutual", "TLS", "connections", "with", "client", "and", "server", "certificates", "issue", "from", "a", "custom", "CA", "I", "be", "having", "quite", "some", "difficulty", "although", "I", "haven", "t", "exhaustively", "debugged", "it", "yet", "NUMBER", "Just", "thought", "I", "d", "ask", "here", "to", "see", "if", "it", "s", "know", "whether", "or", "not", "it", "will", "work", "NUMBER", "The", "basic", "approach", "be", "to", "modify", "server", "NUMBER", "go", "to", "set", "httpsServer", "NUMBER", "TLSConfig", "NUMBER", "ClientAuth", "tls", "NUMBER", "RequestClientCert", "and", "to", "override", "the", "client", "Transport", "s", "TLSClientConfig", "to", "have", "a", "RootCAs", "certpool", "which", "I", "ve", "add", "my", "CA", "root", "cert", "to", "NUMBER", "The", "client", "be", "report", "x", "NUMBER", "certificate", "sign", "by", "unknown", "authority", "NUMBER", "I", "_am_", "able", "to", "get", "this", "to", "work", "with", "a", "simple", "no", "swagger", "client", "use", "net", "http", "directly", "to", "issue", "an", "HTTPS", "request", "with", "the", "same", "certs", "so", "I", "don", "t", "think", "it", "s", "something", "wrong", "with", "the", "certs", "themselves", "NUMBER", "This", "turned", "out", "to", "be", "me", "flubbing", "the", "path", "to", "the", "root", "cert", "file", "so", "it", "s", "work", "now", "NUMBER", "Regarding", "the", "server", "I", "ve", "worked", "around", "it", "temporarily", "by", "modifying", "my", "XyzHandler", "to", "pass", "the", "http", "NUMBER", "Request", "in", "along", "with", "the", "XyzParams", "type", "GetTestHandlerFunc", "func", "GetTestParams", "http", "NUMBER", "Request", "middleware", "NUMBER", "Responder", "This", "lets", "the", "handler", "grab", "the", "TLS", "context", "and", "examine", "the", "certs", "to", "do", "client", "validation", "NUMBER", "I", "m", "not", "too", "enthused", "about", "this", "solution", "but", "it", "be", "work", "at", "the", "moment", "NUMBER", "Perhaps", "I", "ll", "think", "of", "something", "better", "NUMBER", "I", "could", "also", "do", "the", "client", "validation", "in", "some", "middleware", "but", "I", "need", "a", "way", "for", "middleware", "to", "set", "some", "app", "specific", "context", "that", "the", "method", "handlers", "can", "see", "because", "ultimately", "I", "want", "my", "method", "handlers", "to", "make", "some", "decisions", "based", "on", "the", "client", "s", "certificate", "NUMBER", "If", "you", "have", "any", "suggestions", "I", "m", "all", "ears", "NUMBER", "yes", "it", "fix", "it", "NUMBER", "However", "one", "thing", "I", "don", "t", "like", "it", "be", "a", "configuration", "options", "for", "HTTPS", "NUMBER", "I", "be", "forced", "to", "add", "them", "into", "different", "group", "of", "CLI", "parameters", "which", "means", "ca", "cert", "option", "be", "teared", "apart", "from", "private", "key", "and", "cert", "config", "NUMBER", "This", "has", "veered", "off", "from", "having", "anything", "to", "do", "with", "custom", "root", "certs", "of", "course", "NUMBER", "It", "looks", "like", "some", "of", "the", "recent", "change", "address", "the", "ability", "to", "see", "the", "TLS", "context", "in", "the", "request", "handlers", "but", "I", "m", "not", "sure", "NUMBER", "c", "NUMBER", "f", "NUMBER", "be", "the", "one", "I", "d", "cite", "NUMBER", "I", "have", "yet", "to", "try", "it", "out", "but", "I", "saw", "a", "change", "go", "by", "that", "allow", "access", "to", "the", "http", "NUMBER", "Request", "in", "the", "handlers", "which", "would", "be", "perfect", "as", "not", "only", "do", "it", "enable", "looking", "at", "the", "connection", "directly", "in", "the", "handlers", "but", "it", "also", "allows", "one", "to", "use", "something", "like", "gorilla", "context", "to", "pass", "arbitrary", "info", "between", "middleware", "and", "handlers", "NUMBER", "I", "m", "going", "to", "go", "ahead", "and", "close", "this", "even", "though", "I", "haven", "t", "tried", "it", "out", "NUMBER", "If", "it", "doesn", "t", "work", "when", "I", "finally", "do", "a", "new", "bug", "will", "make", "more", "sense", "anyway", "NUMBER", "Added", "a", "mapping", "for", "application", "NUMBER", "raw", "stream", "to", "bin", "mapping", "for", "mimetypes", "NUMBER", "We", "have", "a", "specific", "vendor", "mimetype", "that", "ends", "in", "raw", "stream", "that", "we", "would", "like", "to", "get", "handle", "NUMBER", "If", "this", "isn", "t", "there", "we", "can", "get", "a", "panic", "during", "runtime", "in", "some", "code", "generation", "NUMBER", "If", "the", "generate", "file", "restapi", "operations", "xxx_api", "NUMBER", "go", "refers", "to", "the", "mimetype", "as", "the", "defaultConsumes", "or", "defaultProduces", "our", "server", "will", "panic", "NUMBER", "Adding", "this", "resolve", "the", "panic", "NUMBER", "Problem", "statement", "I", "have", "follow", "response", "go", "swagger", "response", "SuccessResponse", "type", "SuccessResponse", "struct", "In", "body", "Data", "ResponseData", "json", "data", "type", "ResponseData", "struct", "Field", "NUMBER", "string", "json", "field", "NUMBER", "Field", "NUMBER", "string", "json", "field", "NUMBER", "Expected", "schema", "json", "responses", "ErrorResponse", "SuccessResponse", "description", "SuccessResponse", "be", "success", "response", "schema", "ref", "definitions", "SuccessResponse", "but", "get", "json", "responses", "ErrorResponse", "SuccessResponse", "description", "SuccessResponse", "be", "success", "response", "schema", "ref", "definitions", "ResponseData", "I", "know", "this", "be", "expected", "work", "behavior", "NUMBER", "Probably", "you", "can", "advice", "what", "can", "I", "do", "NUMBER", "I", "don", "t", "want", "to", "add", "additional", "level", "of", "structs", "just", "to", "support", "pretty", "output", "maybe", "to", "add", "additional", "swagger", "tag", "like", "swagger", "responseJSON", "or", "add", "additional", "param", "e", "NUMBER", "g", "swagger", "response", "json", "name", "In", "this", "case", "I", "m", "get", "correct", "responses", "with", "ref", "to", "SuccessResponse", "but", "wrong", "model", "without", "Data", "field", "json", "SuccessResponse", "type", "object", "properties", "field", "type", "string", "x", "go", "name", "Field", "x", "go", "name", "ResponseData", "x", "go", "package", "test_scan", "responses", "looks", "like", "there", "be", "NUMBER", "options", "NUMBER", "Add", "body", "struct", "NUMBER", "Something", "new", "in", "go", "swagger", "NUMBER", "While", "the", "With", "methods", "be", "more", "readable", "and", "less", "boring", "to", "write", "the", "return", "type", "of", "With", "methods", "make", "it", "impossible", "to", "abstract", "common", "interface", "out", "NUMBER", "Then", "it", "s", "hard", "to", "have", "a", "factory", "method", "to", "generate", "these", "objects", "NUMBER", "Though", "most", "of", "the", "time", "we", "be", "generating", "similar", "response", "we", "cannot", "write", "generic", "code", "because", "there", "s", "no", "common", "interface", "NUMBER", "For", "example", "Every", "response", "type", "has", "WithPayload", "method", "like", "this", "func", "r", "ResponseType", "WithPayload", "payload", "models", "NUMBER", "Error", "ResponseType", "This", "patch", "add", "a", "setter", "method", "for", "each", "field", "then", "the", "method", "becomes", "func", "r", "ResponseType", "SetPayload", "payload", "models", "NUMBER", "Error", "For", "all", "the", "response", "type", "that", "has", "models", "NUMBER", "Error", "payload", "we", "can", "have", "common", "interface", "NUMBER", "Then", "it", "s", "possible", "to", "have", "a", "factory", "method", "that", "creates", "such", "response", "type", "with", "specific", "error", "payload", "NUMBER", "If", "allow", "list", "be", "empty", "it", "means", "it", "doesn", "t", "matter", "which", "content", "type", "it", "be", "NUMBER", "Problem", "statement", "I", "m", "generating", "server", "stubs", "and", "basically", "need", "to", "hook", "some", "code", "to", "run", "after", "all", "the", "flags", "have", "be", "parsed", "but", "before", "server", "starts", "serving", "request", "NUMBER", "I", "think", "this", "be", "a", "standard", "use", "case", "where", "you", "want", "to", "connect", "to", "storage", "redis", "postgres", "NUMBER", "or", "load", "some", "configuration", "file", "but", "you", "want", "to", "get", "the", "info", "about", "the", "location", "of", "storage", "or", "file", "from", "command", "line", "flags", "NUMBER", "In", "go", "swagger", "NUMBER", "the", "main", "NUMBER", "go", "file", "was", "not", "overwritten", "after", "the", "initial", "generation", "unless", "you", "specifically", "asked", "for", "that", "so", "we", "could", "just", "add", "our", "own", "hook", "there", "NUMBER", "In", "swagger", "NUMBER", "the", "only", "file", "never", "overwritten", "be", "config_xxx", "NUMBER", "go", "NUMBER", "Its", "configureAPI", "function", "be", "call", "before", "flags", "be", "parsed", "so", "this", "can", "not", "be", "use", "NUMBER", "The", "only", "option", "be", "to", "lazily", "connect", "initialize", "in", "a", "request", "handler", "but", "I", "would", "rather", "not", "do", "that", "NUMBER", "Now", "I", "be", "use", "my", "own", "main", "NUMBER", "go", "and", "remove", "the", "go", "swagger", "generate", "one", "NUMBER", "Is", "there", "a", "way", "to", "do", "this", "that", "I", "haven", "t", "thought", "of", "or", "be", "this", "use", "case", "not", "support", "at", "the", "moment", "Awesome", "NUMBER", "Thanks", "for", "the", "quick", "reply", "NUMBER", "I", "have", "taken", "a", "look", "at", "the", "PR", "NUMBER", "Looks", "like", "exactly", "what", "I", "need", "NUMBER", "I", "need", "the", "same", "to", "initialise", "a", "db", "connection", "once", "and", "not", "on", "every", "request", "but", "when", "I", "put", "some", "code", "inside", "the", "configureFlags", "that", "relies", "on", "the", "some", "custom", "flags", "it", "fail", "to", "use", "the", "default", "values", "NUMBER", "here", "be", "the", "gist", "LINK", "georgiev", "af", "NUMBER", "e", "NUMBER", "c", "NUMBER", "b", "NUMBER", "a", "NUMBER", "c", "NUMBER", "df", "NUMBER", "by", "the", "way", "the", "file", "says", "Code", "generate", "by", "go", "swagger", "DO", "NOT", "EDIT", "NUMBER", "and", "than", "in", "the", "middle", "This", "file", "be", "safe", "to", "edit", "NUMBER", "Once", "it", "exists", "it", "will", "not", "be", "overwritten", "which", "exclude", "each", "other", "In", "command", "generate", "model", "NUMBER", "It", "s", "not", "necessary", "to", "force", "name", "as", "required", "NUMBER", "If", "we", "don", "t", "specify", "a", "name", "it", "should", "generate", "all", "models", "NUMBER", "Problem", "statement", "I", "m", "unable", "to", "run", "the", "spec", "generator", "on", "my", "app", "NUMBER", "What", "be", "I", "doing", "wrong", "LINK", "I", "get", "many", "error", "of", "the", "form", "NUMBER", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "facebookgo", "stackerr", "cannot", "find", "package", "github", "NUMBER", "com", "NUMBER", "Steps", "to", "reproduce", "execute", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "in", "project", "folder", "go", "version", "go", "NUMBER", "darwin", "amd", "NUMBER", "I", "believe", "I", "have", "vendoring", "enable", "yes", "NUMBER", "Not", "sure", "I", "m", "new", "NUMBER", "I", "have", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "set", "in", "my", "environment", "and", "my", "application", "compiles", "and", "runs", "without", "complaints", "NUMBER", "It", "must", "be", "having", "issue", "finding", "the", "dependencies", "my", "dir", "structure", "be", "api", "TAG", "rel", "next", "TAG", "rel", "last", "return", "books", "NUMBER", "NewListBooksOK", "NUMBER", "WithLink", "strings", "NUMBER", "Join", "links", "NUMBER", "WithPayload", "list", "Swagger", "specification", "yaml", "swagger", "NUMBER", "info", "title", "Swagger", "Sample", "description", "Sample", "API", "Playground", "NUMBER", "version", "NUMBER", "basePath", "v", "NUMBER", "schemes", "http", "consumes", "application", "vdn", "NUMBER", "sample", "NUMBER", "v", "NUMBER", "json", "produces", "application", "vdn", "NUMBER", "sample", "NUMBER", "v", "NUMBER", "json", "paths", "books", "get", "summary", "List", "all", "books", "operationId", "listBooks", "tags", "books", "responses", "NUMBER", "headers", "Link", "type", "string", "example", "TAG", "rel", "next", "TAG", "rel", "last", "description", "An", "array", "of", "books", "schema", "type", "array", "items", "ref", "definitions", "Book", "default", "description", "generic", "error", "response", "schema", "ref", "definitions", "Error", "definitions", "Book", "Book", "type", "object", "required", "title", "summary", "properties", "title", "type", "string", "example", "Winnie", "the", "Pooh", "summary", "type", "string", "example", "Famous", "children", "s", "book", "Error", "Error", "type", "object", "readOnly", "true", "properties", "code", "type", "integer", "format", "int", "NUMBER", "example", "NUMBER", "message", "type", "string", "example", "Unexpected", "error", "required", "message", "I", "m", "interested", "in", "this", "as", "well", "since", "I", "m", "currently", "trying", "to", "figure", "out", "a", "good", "way", "to", "access", "the", "TLS", "client", "info", "from", "inside", "a", "handler", "func", "NUMBER", "I", "figure", "I", "can", "do", "some", "middleware", "trickery", "to", "get", "at", "the", "http", "NUMBER", "Request", "but", "I", "m", "curious", "if", "I", "m", "overlooking", "some", "more", "straightforward", "way", "to", "plumb", "it", "down", "into", "the", "handler", "NUMBER", "casualjim", "let", "me", "know", "what", "you", "think", "NewServer", "no", "longer", "configures", "the", "API", "but", "instead", "relies", "on", "ConfigureAPI", "call", "to", "do", "it", "NUMBER", "Also", "add", "a", "new", "ConfigureFlags", "method", "so", "that", "we", "can", "add", "command", "line", "flags", "from", "the", "handlers", "NUMBER", "This", "way", "we", "can", "get", "additional", "flags", "from", "the", "handlers", "and", "initialize", "them", "once", "Signed", "off", "by", "S", "NUMBER", "\u00c7a\u011flar", "Onur", "conur", "vmware", "NUMBER", "com", "Our", "legacy", "application", "support", "Swagger", "paths", "like", "the", "following", "POST", "v", "NUMBER", "items", "name", "type", "key", "size", "size", "where", "both", "_", "name", "_", "and", "_", "size", "_", "be", "defined", "as", "path", "parameters", "NUMBER", "In", "Go", "Swagger", "we", "cannot", "include", "and", "characters", "into", "the", "path", "definition", "NUMBER", "What", "would", "be", "the", "best", "suggestion", "for", "us", "if", "we", "have", "to", "preserve", "this", "style", "On", "one", "side", "we", "do", "not", "wish", "to", "add", "query", "parameter", "_", "type", "_", "with", "fix", "value", "key", "we", "assume", "it", "will", "appear", "in", "the", "generate", "Java", "API", "and", "on", "other", "side", "we", "cannot", "change", "the", "path", "to", "v", "NUMBER", "items", "key", "name", "even", "if", "we", "think", "it", "be", "a", "good", "idea", "NUMBER", "We", "be", "considering", "a", "workaround", "use", "_", "NUMBER", "F_", "for", "and", "_", "NUMBER", "D_", "for", "NUMBER", "Swagger", "codegen", "LINK", "api", "swagger", "codegen", "can", "now", "generate", "Go", "libraries", "too", "NUMBER", "Which", "one", "should", "I", "use", "Could", "somebody", "please", "document", "it", "with", "something", "like", "a", "feature", "matrix", "comparing", "the", "two", "so", "it", "be", "easier", "for", "people", "to", "get", "the", "best", "tool", "for", "the", "job", "they", "need", "do", "This", "explanation", "should", "definitely", "go", "to", "the", "first", "landing", "page", "NUMBER", "Both", "The", "explanation", "be", "now", "explicitly", "defined", "on", "both", "the", "readme", "and", "goswagger", "NUMBER", "io", "since", "quite", "a", "while", "now", "NUMBER", "Closing", "this", "issue", "NUMBER", "According", "to", "JSON", "reference", "spec", "LINK", "pbryan", "zyp", "json", "ref", "NUMBER", "section", "NUMBER", "reference", "must", "be", "represented", "by", "valid", "URI", "which", "be", "not", "only", "a", "link", "with", "schema", "but", "also", "a", "path", "to", "local", "file", "NUMBER", "This", "PR", "support", "NUMBER", "casualjim", "thanks", "I", "m", "sorry", "didn", "t", "notice", "the", "problem", "on", "my", "local", "because", "it", "didn", "t", "reproduce", "at", "the", "first", "time", "NUMBER", "Following", "test", "runs", "revealed", "the", "problem", "NUMBER", "I", "was", "trying", "to", "serve", "swagger", "ui", "from", "the", "generate", "API", "Server", "and", "I", "didn", "t", "find", "a", "straightforward", "enough", "way", "in", "the", "docs", "so", "I", "ve", "created", "my", "own", "swagger", "ui", "middleware", "go", "func", "setupGlobalMiddleware", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "return", "uiMiddleware", "handler", "func", "uiMiddleware", "handler", "http", "NUMBER", "Handler", "http", "NUMBER", "Handler", "return", "http", "NUMBER", "HandlerFunc", "func", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "Shortcut", "helpers", "for", "swagger", "ui", "if", "r", "NUMBER", "URL", "NUMBER", "Path", "swagger", "ui", "r", "NUMBER", "URL", "NUMBER", "Path", "api", "help", "http", "NUMBER", "Redirect", "w", "r", "swagger", "ui", "http", "NUMBER", "StatusFound", "return", "Serving", "NUMBER", "swagger", "ui", "if", "strings", "NUMBER", "Index", "r", "NUMBER", "URL", "NUMBER", "Path", "swagger", "ui", "NUMBER", "http", "NUMBER", "StripPrefix", "swagger", "ui", "http", "NUMBER", "FileServer", "http", "NUMBER", "Dir", "swagger", "ui", "NUMBER", "ServeHTTP", "w", "r", "return", "handler", "NUMBER", "ServeHTTP", "w", "r", "Can", "this", "be", "achieved", "any", "easier", "Thank", "you", "What", "do", "you", "say", "if", "we", "add", "swagger", "ui", "as", "git", "submodule", "include", "this", "middleware", "in", "your", "binary", "and", "update", "the", "docs", "awesome", "stuff", "NUMBER", "casualjim", "Could", "you", "let", "me", "know", "the", "status", "NUMBER", "I", "notice", "the", "architecture", "be", "staying", "very", "close", "to", "the", "golang", "way", "NUMBER", "For", "example", "use", "NUMBER", "gotmpl", "etc", "NUMBER", "Here", "my", "tasks", "list", "Developers", "UI", "Would", "be", "great", "to", "use", "golang", "template", "to", "run", "it", "NUMBER", "Prefer", "not", "to", "pollute", "with", "other", "stuff", "just", "lean", "and", "easy", "to", "refactor", "as", "needs", "change", "NUMBER", "Proxy", "JS", "Golang", "based", "generators", "for", "the", "Javascript", "Try", "out", "use", "fetch", "API", "as", "its", "the", "react", "approach", "and", "has", "full", "polyfil", "now", "for", "all", "browser", "too", "NUMBER", "Signed", "off", "by", "Tom", "Pytleski", "pytlesk", "NUMBER", "gmail", "NUMBER", "com", "Closes", "NUMBER", "thanks", "that", "hurt", "my", "head", "Testing", "NUMBER", "now", "strange", "error", "though", "NUMBER", "js", "var", "broken", "definitions", "car", "type", "object", "properties", "id", "type", "integer", "format", "int", "NUMBER", "make", "type", "string", "brand", "items", "ref", "definitions", "brand", "tag", "type", "object", "properties", "id", "type", "integer", "format", "int", "NUMBER", "value", "type", "string", "brand", "type", "object", "properties", "id", "type", "integer", "format", "int", "NUMBER", "name", "type", "string", "go", "func", "TestItemsExpansion", "t", "test", "NUMBER", "T", "spec", "new", "Swagger", "err", "json", "NUMBER", "Unmarshal", "broken", "spec", "assert", "NUMBER", "NoError", "t", "err", "resolver", "err", "defaultSchemaLoader", "spec", "nil", "nil", "assert", "NUMBER", "NoError", "t", "err", "schema", "spec", "NUMBER", "Definitions", "car", "oldBrand", "schema", "NUMBER", "Properties", "brand", "assert", "NUMBER", "NotEmpty", "t", "oldBrand", "NUMBER", "Items", "NUMBER", "Schema", "NUMBER", "Ref", "NUMBER", "String", "assert", "NUMBER", "NotEqual", "t", "spec", "NUMBER", "Definitions", "brand", "oldBrand", "err", "expandSchema", "schema", "resolver", "assert", "NUMBER", "NoError", "t", "err", "newBrand", "schema", "NUMBER", "Properties", "brand", "Assertions", "below", "be", "going", "to", "fail", "NUMBER", "assert", "NUMBER", "Empty", "t", "newBrand", "NUMBER", "Items", "NUMBER", "Schema", "NUMBER", "Ref", "NUMBER", "String", "assert", "NUMBER", "Equal", "t", "spec", "NUMBER", "Definitions", "brand", "newBrand", "NUMBER", "Items", "NUMBER", "Schema", "We", "re", "trying", "to", "detect", "an", "empty", "body", "in", "a", "request", "NUMBER", "I", "add", "required", "to", "the", "body", "parameter", "but", "it", "doesn", "t", "seem", "to", "make", "a", "difference", "NUMBER", "If", "we", "make", "a", "request", "with", "no", "body", "our", "handler", "gets", "call", "and", "the", "param", "object", "has", "an", "empty", "body", "generate", "NUMBER", "name", "container", "in", "body", "description", "Container", "to", "create", "schema", "ref", "definitions", "ContainerConfig", "required", "true", "generates", "type", "CreateParams", "struct", "Container", "to", "create", "Required", "true", "In", "body", "Container", "models", "NUMBER", "ContainerConfig", "The", "expected", "response", "be", "a", "NUMBER", "error", "with", "EOF", "or", "any", "type", "of", "message", "NUMBER", "It", "s", "also", "expected", "that", "the", "middleware", "handles", "this", "and", "our", "handler", "doesn", "t", "get", "call", "NUMBER", "The", "actual", "result", "be", "our", "handler", "gets", "call", "and", "Container", "be", "filled", "with", "an", "empty", "models", "NUMBER", "ContainerConfig", "NUMBER", "We", "need", "a", "way", "to", "detect", "an", "empty", "body", "and", "respond", "to", "user", "request", "appropriately", "NUMBER", "Even", "if", "it", "isn", "t", "handle", "in", "the", "middleware", "when", "it", "gets", "to", "our", "handler", "and", "CreateParams", "NUMBER", "Container", "nil", "for", "cases", "where", "the", "body", "be", "miss", "that", "would", "work", "for", "us", "NUMBER", "swagger", "NUMBER", "json", "NUMBER", "zip", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "swagger", "NUMBER", "json", "NUMBER", "zip", "Attached", "be", "a", "file", "you", "can", "use", "to", "test", "against", "NUMBER", "It", "has", "one", "simple", "POST", "operation", "NUMBER", "Example", "Run", "curl", "X", "POST", "LINK", "operation", "NUMBER", "Create", "has", "not", "yet", "be", "implement", "Comments", "Our", "handler", "was", "reached", "which", "be", "fine", "NUMBER", "However", "the", "params", "NUMBER", "Config", "be", "not", "nil", "NUMBER", "It", "s", "the", "same", "result", "we", "had", "prior", "to", "the", "change", "NUMBER", "What", "I", "see", "when", "I", "debug", "this", "be", "that", "in", "BindRequest", "if", "err", "route", "NUMBER", "Consumer", "NUMBER", "Consume", "r", "NUMBER", "Body", "body", "err", "nil", "The", "result", "be", "err", "nil", "so", "the", "check", "for", "required", "be", "never", "performed", "NUMBER", "I", "add", "the", "following", "to", "a", "swagger", "spec", "path", "operation", "consumes", "application", "json", "application", "octet", "stream", "Result", "panic", "consumes", "application", "json", "Result", "no", "panic", "In", "the", "panic", "scenario", "the", "code", "generation", "doesn", "t", "always", "create", "code", "that", "panics", "NUMBER", "With", "the", "same", "spec", "two", "different", "code", "generation", "may", "result", "in", "different", "results", "NUMBER", "I", "have", "captured", "the", "file", "diff", "between", "two", "generations", "where", "one", "succeeds", "and", "the", "other", "fail", "NUMBER", "docker_api", "panic", "NUMBER", "go", "LINK", "Uploaded", "use", "ZenHub", "NUMBER", "io", "LINK", "docker_api", "nopanic", "NUMBER", "go", "LINK", "Uploaded", "use", "ZenHub", "NUMBER", "io", "LINK", "I", "believe", "that", "be", "the", "case", "NUMBER", "The", "request", "I", "m", "make", "has", "no", "body", "NUMBER", "I", "tracked", "down", "the", "problem", "to", "docker_api", "NUMBER", "go", "in", "the", "following", "area", "defaultConsumes", "application", "json", "defaultProduces", "application", "json", "if", "those", "defaults", "to", "application", "octet", "streaming", "during", "a", "generation", "it", "panics", "NUMBER", "NUMBER", "Get", "VIC", "sources", "NUMBER", "make", "dockerapi", "NUMBER", "run", "the", "server", "NUMBER", "curl", "X", "GET", "LINK", "_ping", "As", "in", "the", "comments", "above", "it", "depends", "on", "what", "be", "generate", "in", "docker_api", "NUMBER", "go", "file", "NUMBER", "If", "the", "defaults", "be", "not", "application", "json", "you", "will", "get", "a", "panic", "NUMBER", "From", "one", "generation", "to", "another", "the", "defaults", "be", "change", "NUMBER", "Our", "swagger", "specs", "have", "numerous", "mime", "types", "for", "consumers", "producers", "NUMBER", "How", "do", "you", "chose", "which", "mime", "be", "defaults", "Is", "it", "just", "random", "curl", "i", "X", "GET", "H", "Accept", "LINK", "_ping", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "http", "panic", "serving", "NUMBER", "NUMBER", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "goroutine", "NUMBER", "run", "net", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "xc", "NUMBER", "panic", "NUMBER", "x", "NUMBER", "e", "NUMBER", "e", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "usr", "local", "go", "src", "runtime", "panic", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "github", "NUMBER", "com", "vmware", "vic", "apiservers", "docker", "restapi", "operations", "misc", "NUMBER", "PingOK", "NUMBER", "WriteResponse", "NUMBER", "xc", "NUMBER", "aa", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "home", "loc", "work", "go", "src", "github", "NUMBER", "com", "vmware", "vic", "apiservers", "docker", "restapi", "operations", "misc", "ping_responses", "NUMBER", "go", "NUMBER", "NUMBER", "xd", "NUMBER", "github", "NUMBER", "com", "vmware", "vic", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "NUMBER", "Context", "NUMBER", "Respond", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "aa", "NUMBER", "home", "loc", "work", "go", "src", "github", "NUMBER", "com", "vmware", "vic", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "vmware", "vic", "apiservers", "docker", "restapi", "operations", "misc", "NUMBER", "Ping", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "home", "loc", "work", "go", "src", "github", "NUMBER", "com", "vmware", "vic", "apiservers", "docker", "restapi", "operations", "misc", "ping", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "github", "NUMBER", "com", "vmware", "vic", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "NUMBER", "newOperationExecutor", "NUMBER", "func", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "home", "loc", "work", "go", "src", "github", "NUMBER", "com", "vmware", "vic", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "operation", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "vmware", "vic", "vendor", "github", "NUMBER", "com", "casualjim", "curler", "NUMBER", "New", "NUMBER", "func", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "home", "loc", "work", "go", "src", "github", "NUMBER", "com", "vmware", "vic", "vendor", "github", "NUMBER", "com", "casualjim", "curler", "curler", "NUMBER", "go", "NUMBER", "NUMBER", "xaaa", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "vmware", "vic", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "NUMBER", "newRouter", "NUMBER", "func", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "home", "loc", "work", "go", "src", "github", "NUMBER", "com", "vmware", "vic", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "router", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "ddc", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "vmware", "vic", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "NUMBER", "specMiddleware", "NUMBER", "func", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "home", "loc", "work", "go", "src", "github", "NUMBER", "com", "vmware", "vic", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "spec", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "net", "http", "NUMBER", "serverHandler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "ffd", "NUMBER", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "xc", "NUMBER", "c", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "e", "net", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "xc", "NUMBER", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "xf", "NUMBER", "e", "created", "by", "net", "http", "NUMBER", "Server", "NUMBER", "Serve", "usr", "local", "go", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "e", "I", "think", "I", "may", "know", "what", "this", "be", "NUMBER", "I", "m", "trying", "something", "NUMBER", "Ok", "this", "isn", "t", "a", "bug", "NUMBER", "This", "be", "noob", "Swagger", "user", "error", "NUMBER", "I", "forgot", "to", "add", "producer", "consumers", "for", "the", "new", "members", "in", "api", "in", "configure_api", "NUMBER", "go", "NUMBER", "I", "tried", "it", "and", "I", "m", "no", "longer", "get", "any", "panics", "NUMBER", "You", "can", "close", "this", "issue", "NUMBER", "Add", "plain", "text", "consumer", "and", "producer", "and", "use", "it", "in", "client", "runtime", "and", "generator", "support", "NUMBER", "Fixes", "NUMBER", "Add", "XML", "consumer", "and", "producer", "and", "use", "it", "in", "client", "runtime", "and", "generator", "support", "NUMBER", "Fixes", "NUMBER", "We", "need", "to", "be", "able", "to", "generate", "clients", "for", "more", "than", "one", "APIs", "within", "the", "same", "project", "NUMBER", "Some", "definitions", "be", "shared", "among", "these", "APIs", "so", "we", "would", "like", "to", "put", "them", "in", "a", "separate", "YAML", "file", "e", "NUMBER", "g", "NUMBER", "definitions", "NUMBER", "yaml", "and", "refer", "to", "them", "from", "the", "main", "swagger", "file", "use", "JSON", "references", "such", "as", "definitions", "NUMBER", "yml", "definitions", "Task", "NUMBER", "However", "this", "be", "currently", "not", "possible", "with", "go", "swagger", "NUMBER", "For", "some", "reason", "the", "definitions", "be", "not", "find", "in", "this", "case", "and", "no", "models", "be", "generate", "NUMBER", "We", "need", "to", "be", "able", "to", "generate", "clients", "for", "more", "than", "one", "APIs", "within", "the", "same", "project", "NUMBER", "Note", "that", "these", "be", "really", "different", "APIs", "served", "by", "different", "endpoints", "so", "they", "can", "t", "be", "combined", "NUMBER", "Some", "definitions", "be", "shared", "among", "these", "APIs", "so", "we", "want", "all", "of", "them", "to", "use", "the", "same", "generate", "models", "NUMBER", "go", "NUMBER", "I", "couldn", "t", "find", "a", "way", "to", "do", "this", "without", "renaming", "file", "and", "types", "after", "each", "generation", "even", "though", "I", "was", "careful", "to", "use", "different", "operation", "names", "NUMBER", "The", "main", "points", "of", "collision", "be", "client", "operations", "operations_client", "NUMBER", "go", "and", "client", "TAG", "_client", "NUMBER", "go", "since", "some", "of", "the", "generate", "filenames", "e", "NUMBER", "g", "NUMBER", "operations_client", "NUMBER", "go", "type", "names", "e", "NUMBER", "g", "NUMBER", "Client", "and", "function", "names", "e", "NUMBER", "g", "NUMBER", "New", "be", "too", "generic", "and", "don", "t", "contain", "the", "application", "name", "NUMBER", "This", "issue", "could", "be", "address", "by", "ensuring", "that", "all", "such", "names", "contain", "the", "application", "name", "e", "NUMBER", "g", "NUMBER", "slmp_operations_client", "NUMBER", "go", "SlmpClient", "NewSlmp", "etc", "NUMBER", "Alternatively", "a", "different", "directory", "package", "structure", "could", "be", "use", "by", "the", "generator", "e", "NUMBER", "g", "NUMBER", "client", "TAG", "instead", "of", "just", "client", "To", "address", "this", "issue", "we", "currently", "do", "the", "following", "after", "each", "API", "generation", "Move", "client", "operations", "operations_client", "NUMBER", "go", "to", "its", "own", "file", "e", "NUMBER", "g", "NUMBER", "mv", "client", "operations", "operations_client", "NUMBER", "go", "client", "operations", "slmp_operations_client", "NUMBER", "go", "In", "client", "operations", "slmp_operations_client", "NUMBER", "go", "rename", "the", "type", "Client", "to", "SlmpClient", "and", "the", "function", "NewClient", "to", "NewSlmpClient", "NUMBER", "In", "client", "slmp_client", "NUMBER", "go", "rename", "the", "variable", "Default", "to", "DefaultSlmp", "and", "the", "function", "NewHTTPClient", "and", "New", "to", "NewSlmpHTTPClient", "and", "NewSlmp", "NUMBER", "Thanks", "this", "works", "perfectly", "Sorry", "I", "didn", "t", "know", "about", "this", "argument", "as", "I", "didn", "t", "find", "it", "in", "the", "documentation", "NUMBER", "Only", "now", "I", "thought", "about", "run", "swagger", "generate", "client", "help", "and", "saw", "the", "various", "options", "available", "there", "NUMBER", "We", "be", "use", "a", "swagger", "model", "in", "which", "the", "produced", "and", "consumed", "media", "type", "for", "all", "operations", "be", "application", "xml", "NUMBER", "The", "model", "contains", "wrapped", "XML", "arrays", "for", "example", "yaml", "file", "type", "array", "items", "ref", "definitions", "File", "xml", "namespace", "LINK", "wrapped", "true", "Currently", "array", "types", "be", "always", "generate", "simply", "as", "arrays", "e", "NUMBER", "g", "NUMBER", "type", "Files", "File", "NUMBER", "Instead", "if", "xml", "NUMBER", "wrapped", "be", "true", "they", "should", "be", "generate", "as", "structs", "containing", "arrays", "NUMBER", "There", "should", "also", "be", "a", "field", "of", "type", "xml", "NUMBER", "Name", "that", "contains", "the", "namespace", "specified", "in", "xml", "NUMBER", "namespace", "and", "the", "correct", "XML", "element", "name", "see", "NUMBER", "NUMBER", "go", "type", "Files", "struct", "XMLName", "xml", "NUMBER", "Name", "xml", "LINK", "file", "Files", "File", "xml", "File", "omitempty", "Consequently", "in", "the", "Validate", "function", "m", "NUMBER", "Files", "should", "be", "use", "instead", "of", "m", "to", "refer", "to", "the", "array", "NUMBER", "Similarly", "arrays", "within", "object", "types", "be", "also", "always", "generate", "simply", "as", "arrays", "e", "NUMBER", "g", "NUMBER", "Parameters", "Parameter", "NUMBER", "Instead", "if", "xml", "NUMBER", "wrapped", "be", "true", "they", "should", "also", "be", "generate", "as", "structs", "containing", "arrays", "for", "example", "go", "type", "ProcessParameters", "struct", "Parameters", "Parameter", "xml", "Parameter", "omitempty", "type", "Process", "struct", "NUMBER", "Parameters", "ProcessParameters", "xml", "parameters", "omitempty", "I", "believe", "in", "this", "case", "it", "s", "better", "to", "generate", "a", "named", "struct", "type", "instead", "of", "anonymous", "one", "as", "the", "corresponding", "field", "be", "then", "much", "easier", "to", "initialize", "NUMBER", "We", "re", "use", "both", "JSON", "and", "XML", "NUMBER", "I", "like", "this", "approach", "rather", "than", "creating", "type", "StuffThings", "StuffThing", "or", "something", "like", "that", "when", "wrapped", "true", "NUMBER", "type", "Stuff", "struct", "XMLName", "xml", "NUMBER", "Name", "json", "xml", "LINK", "tuple", "Name", "string", "json", "name", "StuffThings", "StuffThing", "json", "stuffThings", "omitempty", "xml", "StuffThings", "StuffThing", "omitempty", "We", "be", "use", "a", "swagger", "model", "in", "which", "the", "produced", "and", "consumed", "media", "type", "for", "all", "operations", "be", "application", "xml", "NUMBER", "Sometimes", "the", "XML", "element", "names", "use", "be", "different", "from", "the", "generate", "type", "names", "and", "all", "elements", "belong", "to", "a", "custom", "XML", "namespace", "for", "example", "yaml", "tuple", "type", "object", "properties", "NUMBER", "xml", "namespace", "LINK", "In", "all", "generate", "model", "structs", "there", "should", "be", "a", "field", "of", "type", "xml", "NUMBER", "Name", "that", "contains", "the", "namespace", "specified", "in", "xml", "NUMBER", "namespace", "and", "the", "correct", "XML", "element", "name", "for", "example", "go", "type", "Tuple", "struct", "XMLName", "xml", "NUMBER", "Name", "xml", "LINK", "tuple", "As", "report", "in", "NUMBER", "there", "be", "currently", "no", "support", "for", "media", "type", "application", "xml", "at", "all", "NUMBER", "However", "once", "it", "be", "add", "naming", "of", "XML", "elements", "and", "support", "for", "XML", "namespaces", "should", "be", "considered", "as", "well", "NUMBER", "Related", "to", "NUMBER", "casualjim", "thanks", "for", "merge", "The", "commit", "ea", "NUMBER", "b", "NUMBER", "causes", "the", "example", "fixture", "goparsing", "petstore", "can", "not", "generate", "the", "swagger", "spec", "NUMBER", "Under", "the", "folder", "fixture", "goparsing", "petstore", "petstore", "fixture", "run", "the", "command", "swagger", "NUMBER", "exe", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "NUMBER", "It", "report", "the", "error", "unknown", "primitive", "error", "NUMBER", "After", "I", "revert", "the", "commit", "ea", "NUMBER", "b", "NUMBER", "the", "generate", "spec", "command", "can", "correctly", "work", "NUMBER", "fsouza", "I", "m", "a", "fresher", "on", "go", "swagger", "NUMBER", "Could", "you", "help", "to", "have", "a", "look", "at", "this", "problem", "Thanks", "NUMBER", "Hi", "supereagle", "that", "s", "because", "you", "haven", "t", "recompiled", "swagger", "NUMBER", "exe", "NUMBER", "Please", "try", "run", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "NUMBER", "fsouza", "Thanks", "for", "your", "help", "NUMBER", "If", "I", "define", "a", "boolean", "parameter", "in", "an", "operation", "the", "generate", "code", "converts", "the", "boolean", "to", "a", "string", "NUMBER", "Take", "for", "instance", "name", "stream", "in", "query", "description", "NUMBER", "True", "true", "or", "NUMBER", "False", "false", "return", "stream", "NUMBER", "Default", "false", "type", "string", "default", "false", "Generated", "code", "Stream", "string", "I", "wasn", "t", "sure", "whether", "I", "be", "suppose", "to", "expect", "a", "bool", "or", "a", "string", "in", "the", "generate", "code", "NUMBER", "Here", "s", "the", "generate", "model", "file", "partially", "go", "NUMBER", "import", "bytes", "encoding", "json", "strfmt", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "error", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "validate", "NUMBER", "func", "m", "Model", "MarshalJSON", "byte", "error", "NUMBER", "return", "swag", "NUMBER", "ConcatJSON", "b", "NUMBER", "b", "NUMBER", "nil", "NUMBER", "The", "package", "swag", "should", "be", "in", "imports", "Add", "the", "miss", "import", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "To", "fix", "NUMBER", "Here", "s", "part", "of", "generate", "code", "go", "import", "bytes", "io", "io", "ioutil", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "error", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "validate", "type", "Resource", "interface", "httpkit", "NUMBER", "Validatable", "NUMBER", "Obviously", "it", "should", "be", "validate", "NUMBER", "Validatable", "not", "httpkit", "NUMBER", "Validatable", "here", "s", "the", "piece", "yaml", "definitions", "Resource", "description", "A", "resource", "discriminator", "resourceType", "properties", "resourceType", "type", "string", "description", "discriminating", "type", "of", "the", "resource", "name", "type", "string", "description", "name", "of", "the", "resource", "required", "resourceType", "name", "I", "ve", "made", "accidental", "copy", "paste", "error", "in", "the", "paths", "section", "that", "resulted", "in", "this", "stack", "trace", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "panic", "interface", "conversion", "interface", "be", "spec", "NUMBER", "Schema", "not", "spec", "NUMBER", "Parameter", "goroutine", "NUMBER", "run", "panic", "NUMBER", "x", "NUMBER", "d", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "dc", "NUMBER", "usr", "local", "go", "src", "runtime", "panic", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "spec", "NUMBER", "specAnalyzer", "NUMBER", "paramsAsMap", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "spec", "analyzer", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "spec", "NUMBER", "specAnalyzer", "NUMBER", "ParamsFor", "NUMBER", "xc", "NUMBER", "b", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "xc", "NUMBER", "fb", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "spec", "analyzer", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "codeGenOpBuilder", "NUMBER", "MakeOperation", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "operation", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "makeCodegenApp", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "xf", "NUMBER", "f", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "appGenerator", "NUMBER", "Generate", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "NUMBER", "GenerateServer", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "fbffb", "NUMBER", "b", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "fbffb", "NUMBER", "NUMBER", "xd", "NUMBER", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "generator", "support", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "NUMBER", "Server", "NUMBER", "Execute", "NUMBER", "xc", "NUMBER", "d", "NUMBER", "c", "NUMBER", "NUMBER", "xc", "NUMBER", "be", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "commands", "generate", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "e", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "ParseArgs", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "xa", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "NUMBER", "Parser", "NUMBER", "Parse", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "jessevdk", "go", "flags", "parser", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "main", "NUMBER", "main", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "cmd", "swagger", "swagger", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "Broken", "path", "definition", "get_main_object", "get", "tags", "maindata", "parameters", "name", "sid", "in", "query", "required", "true", "ref", "definitions", "sample_info", "properties", "sid", "TAG", "Go", "NUMBER", "Swagger", "version", "NUMBER", "It", "was", "just", "a", "copy", "paste", "error", "I", "made", "that", "cause", "crash", "during", "the", "generation", "process", "NUMBER", "So", "I", "wanted", "to", "point", "out", "that", "there", "be", "a", "place", "go", "swagger", "panics", "NUMBER", "Here", "be", "my", "simple", "rest", "service", "Package", "classification", "User", "API", "NUMBER", "the", "purpose", "of", "this", "application", "be", "to", "provide", "an", "application", "that", "be", "use", "plain", "go", "code", "to", "define", "an", "API", "This", "should", "demonstrate", "all", "the", "possible", "comment", "annotations", "that", "be", "available", "to", "turn", "go", "code", "into", "a", "fully", "compliant", "swagger", "NUMBER", "spec", "Terms", "Of", "Service", "there", "be", "no", "TOS", "at", "this", "moment", "use", "at", "your", "own", "risk", "we", "take", "no", "responsibility", "Schemes", "http", "https", "Host", "localhost", "BasePath", "v", "NUMBER", "Version", "NUMBER", "License", "MIT", "LINK", "Contact", "John", "Doe", "TAG", "LINK", "Consumes", "application", "json", "application", "xml", "Produces", "application", "json", "application", "xml", "swagger", "meta", "package", "main", "import", "github", "NUMBER", "com", "gin", "gonic", "gin", "strconv", "database", "sql", "_", "github", "NUMBER", "com", "go", "sql", "driver", "mysql", "gopkg", "NUMBER", "in", "gorp", "NUMBER", "v", "NUMBER", "log", "swagger", "model", "User", "represents", "the", "user", "for", "this", "application", "A", "user", "be", "the", "security", "principal", "for", "this", "application", "NUMBER", "It", "s", "also", "use", "as", "one", "of", "main", "axis", "for", "report", "NUMBER", "A", "user", "can", "have", "friends", "with", "whom", "they", "can", "share", "what", "they", "like", "NUMBER", "type", "User", "struct", "the", "id", "for", "this", "user", "required", "true", "min", "NUMBER", "Id", "int", "NUMBER", "db", "id", "json", "id", "the", "first", "name", "for", "this", "user", "required", "true", "min", "length", "NUMBER", "Firstname", "string", "db", "firstname", "json", "firstname", "the", "last", "name", "for", "this", "user", "required", "true", "min", "length", "NUMBER", "Lastname", "string", "db", "lastname", "json", "lastname", "func", "main", "r", "gin", "NUMBER", "Default", "r", "NUMBER", "Use", "Cors", "v", "NUMBER", "r", "NUMBER", "Group", "api", "v", "NUMBER", "v", "NUMBER", "GET", "users", "GetUsers", "v", "NUMBER", "GET", "users", "id", "GetUser", "v", "NUMBER", "POST", "users", "PostUser", "v", "NUMBER", "PUT", "users", "id", "UpdateUser", "v", "NUMBER", "DELETE", "users", "id", "DeleteUser", "v", "NUMBER", "OPTIONS", "users", "OptionsUser", "POST", "v", "NUMBER", "OPTIONS", "users", "id", "OptionsUser", "PUT", "DELETE", "r", "NUMBER", "Run", "NUMBER", "func", "GetUsers", "c", "gin", "NUMBER", "Context", "swagger", "route", "GET", "user", "listPets", "pets", "users", "Lists", "pets", "filtered", "by", "some", "parameters", "NUMBER", "This", "will", "show", "all", "available", "pets", "by", "default", "NUMBER", "You", "can", "get", "the", "pets", "that", "be", "out", "of", "stock", "Consumes", "application", "json", "application", "x", "protobuf", "Produces", "application", "json", "application", "x", "protobuf", "Schemes", "http", "https", "ws", "wss", "Security", "api_key", "oauth", "read", "write", "Responses", "default", "genericError", "NUMBER", "someResponse", "NUMBER", "validationError", "var", "users", "User", "_", "err", "dbmap", "NUMBER", "Select", "users", "SELECT", "FROM", "user", "if", "err", "nil", "c", "NUMBER", "JSON", "NUMBER", "users", "else", "c", "NUMBER", "JSON", "NUMBER", "gin", "NUMBER", "H", "error", "no", "user", "s", "into", "the", "table", "curl", "i", "LINK", "func", "GetUser", "c", "gin", "NUMBER", "Context", "id", "c", "NUMBER", "Params", "NUMBER", "ByName", "id", "var", "user", "User", "err", "dbmap", "NUMBER", "SelectOne", "user", "SELECT", "FROM", "user", "WHERE", "id", "id", "if", "err", "nil", "user_id", "_", "strconv", "NUMBER", "ParseInt", "id", "NUMBER", "NUMBER", "content", "User", "Id", "user_id", "Firstname", "user", "NUMBER", "Firstname", "Lastname", "user", "NUMBER", "Lastname", "c", "NUMBER", "JSON", "NUMBER", "content", "else", "c", "NUMBER", "JSON", "NUMBER", "gin", "NUMBER", "H", "error", "user", "not", "find", "curl", "i", "LINK", "func", "PostUser", "c", "gin", "NUMBER", "Context", "var", "user", "User", "c", "NUMBER", "Bind", "user", "if", "user", "NUMBER", "Firstname", "user", "NUMBER", "Lastname", "if", "insert", "_", "dbmap", "NUMBER", "Exec", "INSERT", "INTO", "user", "firstname", "lastname", "VALUES", "user", "NUMBER", "Firstname", "user", "NUMBER", "Lastname", "insert", "nil", "user_id", "err", "insert", "NUMBER", "LastInsertId", "if", "err", "nil", "content", "User", "Id", "user_id", "Firstname", "user", "NUMBER", "Firstname", "Lastname", "user", "NUMBER", "Lastname", "c", "NUMBER", "JSON", "NUMBER", "content", "else", "checkErr", "err", "Insert", "fail", "else", "c", "NUMBER", "JSON", "NUMBER", "gin", "NUMBER", "H", "error", "field", "be", "empty", "curl", "i", "X", "POST", "H", "Content", "Type", "application", "json", "d", "firstname", "Thea", "lastname", "Queen", "LINK", "func", "UpdateUser", "c", "gin", "NUMBER", "Context", "id", "c", "NUMBER", "Params", "NUMBER", "ByName", "id", "var", "user", "User", "err", "dbmap", "NUMBER", "SelectOne", "user", "SELECT", "FROM", "user", "WHERE", "id", "id", "if", "err", "nil", "var", "json", "User", "c", "NUMBER", "Bind", "json", "user_id", "_", "strconv", "NUMBER", "ParseInt", "id", "NUMBER", "NUMBER", "user", "User", "Id", "user_id", "Firstname", "json", "NUMBER", "Firstname", "Lastname", "json", "NUMBER", "Lastname", "if", "user", "NUMBER", "Firstname", "user", "NUMBER", "Lastname", "_", "err", "dbmap", "NUMBER", "Update", "user", "if", "err", "nil", "c", "NUMBER", "JSON", "NUMBER", "user", "else", "checkErr", "err", "Updated", "fail", "else", "c", "NUMBER", "JSON", "NUMBER", "gin", "NUMBER", "H", "error", "field", "be", "empty", "else", "c", "NUMBER", "JSON", "NUMBER", "gin", "NUMBER", "H", "error", "user", "not", "find", "curl", "i", "X", "PUT", "H", "Content", "Type", "application", "json", "d", "firstname", "Thea", "lastname", "Merlyn", "LINK", "func", "DeleteUser", "c", "gin", "NUMBER", "Context", "id", "c", "NUMBER", "Params", "NUMBER", "ByName", "id", "var", "user", "User", "err", "dbmap", "NUMBER", "SelectOne", "user", "SELECT", "id", "FROM", "user", "WHERE", "id", "id", "if", "err", "nil", "_", "err", "dbmap", "NUMBER", "Delete", "user", "if", "err", "nil", "c", "NUMBER", "JSON", "NUMBER", "gin", "NUMBER", "H", "id", "id", "delete", "else", "checkErr", "err", "Delete", "fail", "else", "c", "NUMBER", "JSON", "NUMBER", "gin", "NUMBER", "H", "error", "user", "not", "find", "curl", "i", "X", "DELETE", "LINK", "var", "dbmap", "initDb", "func", "initDb", "gorp", "NUMBER", "DbMap", "db", "err", "sql", "NUMBER", "Open", "mysql", "root", "max_", "NUMBER", "tcp", "NUMBER", "NUMBER", "gotest", "checkErr", "err", "sql", "NUMBER", "Open", "fail", "dbmap", "gorp", "NUMBER", "DbMap", "Db", "db", "Dialect", "gorp", "NUMBER", "MySQLDialect", "InnoDB", "UTF", "NUMBER", "dbmap", "NUMBER", "AddTableWithName", "User", "User", "NUMBER", "SetKeys", "true", "Id", "err", "dbmap", "NUMBER", "CreateTablesIfNotExists", "checkErr", "err", "Create", "table", "fail", "return", "dbmap", "func", "checkErr", "err", "error", "msg", "string", "if", "err", "nil", "log", "NUMBER", "Fatalln", "msg", "err", "func", "Cors", "gin", "NUMBER", "HandlerFunc", "return", "func", "c", "gin", "NUMBER", "Context", "c", "NUMBER", "Writer", "NUMBER", "Header", "NUMBER", "Add", "Access", "Control", "Allow", "Origin", "c", "NUMBER", "Next", "func", "OptionsUser", "c", "gin", "NUMBER", "Context", "c", "NUMBER", "Writer", "NUMBER", "Header", "NUMBER", "Add", "Access", "Control", "Allow", "Origin", "c", "NUMBER", "Writer", "NUMBER", "Header", "NUMBER", "Set", "Access", "Control", "Allow", "Methods", "DELETE", "POST", "PUT", "c", "NUMBER", "Writer", "NUMBER", "Header", "NUMBER", "Set", "Access", "Control", "Allow", "Headers", "Content", "Type", "c", "NUMBER", "Next", "Now", "when", "I", "m", "executing", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "to", "generate", "the", "json", "spec", "I", "m", "get", "consumes", "application", "json", "application", "xml", "produces", "application", "json", "application", "xml", "schemes", "http", "https", "swagger", "NUMBER", "info", "description", "the", "purpose", "of", "this", "application", "be", "to", "provide", "an", "application", "nthat", "be", "use", "plain", "go", "code", "to", "define", "an", "API", "n", "nThis", "should", "demonstrate", "all", "the", "possible", "comment", "annotations", "nthat", "be", "available", "to", "turn", "go", "code", "into", "a", "fully", "compliant", "swagger", "NUMBER", "spec", "title", "User", "API", "NUMBER", "termsOfService", "there", "be", "no", "TOS", "at", "this", "moment", "use", "at", "your", "own", "risk", "we", "take", "no", "responsibility", "contact", "name", "John", "Doe", "url", "LINK", "email", "john", "NUMBER", "doe", "example", "NUMBER", "com", "license", "name", "MIT", "url", "LINK", "version", "NUMBER", "host", "localhost", "basePath", "v", "NUMBER", "paths", "user", "get", "description", "This", "will", "show", "all", "available", "pets", "by", "default", "NUMBER", "nYou", "can", "get", "the", "pets", "that", "be", "out", "of", "stock", "consumes", "application", "json", "application", "x", "protobuf", "produces", "application", "json", "application", "x", "protobuf", "schemes", "http", "https", "ws", "wss", "tags", "listPets", "pets", "summary", "Lists", "pets", "filtered", "by", "some", "parameters", "NUMBER", "operationId", "users", "security", "api_key", "null", "oauth", "read", "write", "responses", "NUMBER", "ref", "responses", "someResponse", "NUMBER", "ref", "responses", "validationError", "default", "ref", "responses", "genericError", "definitions", "Note", "that", "my", "definitions", "be", "empty", "not", "sure", "why", "NUMBER", "If", "I", "paste", "the", "same", "json", "spec", "in", "LINK", "It", "says", "Error", "Object", "message", "options", "NUMBER", "definition", "be", "required", "code", "UNCAUGHT_SWAY_WORKER_ERROR", "Any", "directions", "on", "what", "be", "the", "right", "way", "to", "generate", "swagger", "documentation", "would", "help", "I", "m", "a", "little", "concerned", "with", "the", "amount", "of", "change", "that", "occur", "after", "run", "NUMBER", "hack", "regen", "samples", "NUMBER", "sh", "Addresses", "NUMBER", "Here", "s", "the", "environment", "mkdir", "p", "dev", "go", "src", "mylib", "export", "GOPATH", "HOME", "dev", "go", "export", "PATH", "GOPATH", "bin", "PATH", "cd", "dev", "go", "src", "mylib", "mkdir", "cmd", "spec", "pkg", "vendor", "vi", "glide", "NUMBER", "yaml", "glide", "install", "vi", "spec", "api", "NUMBER", "yml", "My", "Go", "be", "Go", "NUMBER", "and", "when", "I", "generate", "the", "server", "code", "use", "swagger", "generate", "server", "f", "spec", "api", "NUMBER", "yml", "t", "pkg", "the", "generate", "file", "pkg", "restapi", "operations", "mylib_api", "NUMBER", "go", "has", "wrong", "prefix", "on", "the", "import", "package", "path", "mylib", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "swag", "The", "prefix", "mylib", "vendor", "should", "not", "be", "there", "NUMBER", "Looks", "like", "validator", "treats", "references", "as", "validation", "error", "NUMBER", "For", "instance", "let", "s", "put", "a", "reference", "to", "parameter", "list", "foo", "get", "summary", "Some", "endpoint", "parameters", "name", "some_id", "in", "query", "description", "some", "ID", "required", "true", "type", "integer", "ref", "parameters", "some_shared_param", "required", "false", "Validator", "output", "for", "such", "case", "be", "paths", "NUMBER", "foo", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "ref", "in", "body", "be", "a", "forbidden", "property", "paths", "NUMBER", "foo", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "name", "in", "body", "be", "required", "paths", "NUMBER", "foo", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "in", "in", "body", "be", "required", "paths", "NUMBER", "foo", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "type", "in", "body", "be", "required", "As", "specification", "says", "use", "references", "in", "parameter", "list", "be", "valid", "LINK", "operationObject", "parameters", "be", "expected", "to", "hold", "an", "array", "Parameter", "Object", "Reference", "Object", "False", "alarm", "NUMBER", "This", "happens", "when", "one", "try", "to", "override", "reference", "s", "parameter", "with", "some", "other", "value", "NUMBER", "Like", "this", "ref", "parameters", "some_shared_param", "required", "false", "Swagger", "specs", "do", "not", "allow", "this", "hence", "the", "ticket", "can", "be", "close", "NUMBER", "This", "validation", "causes", "false", "positives", "and", "the", "issue", "should", "be", "reopened", "NUMBER", "In", "our", "case", "we", "use", "urls", "with", "hashtags", "as", "a", "way", "to", "make", "our", "level", "NUMBER", "system", "apis", "have", "unique", "endpoints", "and", "thus", "become", "swagger", "compatible", "NUMBER", "example", "paths", "our", "NUMBER", "rest", "endpoint", "Action", "NUMBER", "our", "NUMBER", "rest", "endpoint", "Action", "NUMBER", "the", "go", "swagger", "validation", "treats", "these", "as", "validation", "error", "paths", "NUMBER", "Action", "NUMBER", "in", "body", "be", "a", "forbidden", "property", "paths", "NUMBER", "Action", "NUMBER", "in", "body", "be", "a", "forbidden", "property", "these", "aren", "t", "references", "to", "schema", "NUMBER", "The", "actual", "value", "of", "the", "path", "has", "a", "valid", "html", "symbol", "in", "it", "NUMBER", "The", "go", "swagger", "validation", "needs", "to", "be", "update", "to", "flag", "schema", "reference", "matches", "by", "just", "matching", "values", "in", "a", "property", "value", "NUMBER", "swagger", "codegen", "do", "not", "have", "an", "issue", "with", "this", "you", "use", "fragment", "on", "the", "server", "here", "s", "a", "sample", "NUMBER", "Again", "this", "wouldn", "t", "be", "how", "you", "d", "define", "the", "API", "from", "scratch", "but", "this", "be", "a", "tool", "to", "describe", "an", "RPC", "level", "NUMBER", "endpoint", "in", "swagger", "NUMBER", "The", "fragment", "aren", "t", "actually", "use", "as", "we", "have", "an", "internal", "preexisting", "way", "to", "route", "the", "action", "NUMBER", "They", "fragment", "just", "make", "every", "path", "unique", "which", "be", "a", "requirement", "for", "swagger", "NUMBER", "Swagger", "allows", "the", "use", "of", "a", "defined", "operationId", "parameter", "but", "every", "path", "must", "be", "a", "unique", "path", "NUMBER", "json", "swagger", "NUMBER", "info", "NUMBER", "host", "myhost", "NUMBER", "net", "basePath", "api", "myrpcendpoint", "schemes", "https", "consumes", "application", "json", "produces", "application", "json", "paths", "GetAcct", "post", "summary", "get_acc", "operationId", "GetAcct", "parameters", "name", "body", "in", "body", "required", "true", "schema", "ref", "definitions", "GetAcct", "tags", "GetAcct", "responses", "default", "schema", "ref", "definitions", "GetAcctResponse", "CalcCredit", "post", "NUMBER", "GetPaypal", "post", "NUMBER", "NUMBER", "it", "would", "work", "if", "you", "were", "to", "use", "query", "string", "syntax", "NUMBER", "fragment", "in", "uri", "s", "be", "a", "client", "only", "construct", "and", "as", "such", "we", "don", "t", "support", "those", "in", "our", "path", "syntax", "currently", "NUMBER", "So", "with", "instead", "of", "it", "should", "work", "we", "ve", "instructed", "our", "client", "to", "use", "swagger", "codegen", "and", "it", "works", "in", "that", "environment", "as", "be", "NUMBER", "We", "have", "clients", "that", "use", "swagger", "for", "many", "different", "languages", "so", "thats", "really", "our", "recommended", "platform", "NUMBER", "That", "said", "your", "option", "would", "probably", "work", "as", "a", "workaround", "for", "a", "small", "system", "NUMBER", "In", "our", "case", "its", "a", "NUMBER", "api", "system", "and", "that", "change", "would", "have", "a", "pretty", "significant", "impact", "NUMBER", "and", "again", "this", "works", "as", "be", "in", "swagger", "codegen", "The", "client", "generator", "has", "an", "issue", "with", "parameters", "of", "type", "file", "NUMBER", "For", "example", "for", "the", "following", "swagger", "spec", "yml", "services", "serviceId", "file", "post", "operationId", "CreateServiceFiles", "consumes", "multipart", "form", "data", "parameters", "name", "file", "in", "formData", "required", "true", "type", "file", "In", "the", "CreateServiceFilesParams", "struct", "the", "field", "Files", "be", "of", "type", "os", "NUMBER", "File", "but", "be", "later", "compared", "to", "nil", "NUMBER", "It", "should", "either", "be", "of", "type", "os", "NUMBER", "File", "or", "the", "nil", "comparison", "should", "not", "be", "there", "NUMBER", "We", "need", "this", "for", "one", "of", "our", "projects", "at", "SAP", "NUMBER", "It", "seems", "to", "be", "a", "rather", "small", "and", "straightforward", "change", "I", "would", "like", "to", "contribute", "a", "PR", "for", "it", "NUMBER", "The", "issue", "be", "no", "longer", "reproducible", "with", "the", "newest", "generator", "build", "from", "source", "NUMBER", "Thanks", "a", "lot", "for", "fix", "it", "Adds", "support", "for", "setting", "the", "http", "NUMBER", "CookieJar", "to", "httpkit", "client", "runtime", "NUMBER", "go", "similar", "to", "the", "exist", "support", "for", "setting", "the", "http", "NUMBER", "RoundTripper", "NUMBER", "The", "default", "jar", "be", "nil", "as", "before", "no", "support", "for", "cookies", "NUMBER", "Fixes", "NUMBER", "When", "I", "do", "the", "following", "against", "a", "server", "that", "only", "support", "application", "json", "and", "text", "plain", "at", "the", "moment", "I", "get", "odd", "behavior", "NUMBER", "Request", "curl", "X", "POST", "i", "LINK", "golang", "tag", "latest", "What", "the", "server", "sees", "POST", "v", "NUMBER", "images", "create", "fromImage", "golang", "tag", "latest", "HTTP", "NUMBER", "Host", "NUMBER", "NUMBER", "User", "Agent", "curl", "NUMBER", "Accept", "_", "_", "What", "the", "server", "responds", "HTTP", "NUMBER", "NUMBER", "Unsupported", "Media", "Type", "Content", "Type", "application", "json", "Date", "Sat", "NUMBER", "Feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Content", "Length", "NUMBER", "code", "NUMBER", "message", "unsupported", "media", "type", "application", "octet", "stream", "only", "application", "json", "text", "plain", "be", "allow", "The", "handler", "for", "the", "operation", "never", "gets", "call", "NUMBER", "This", "interpretation", "of", "the", "request", "be", "happening", "much", "earlier", "NUMBER", "casualjim", "You", "should", "reopen", "this", "based", "on", "our", "recent", "conversation", "NUMBER", "go", "swagger", "currently", "ignores", "octet", "stream", "as", "a", "consumes", "so", "there", "be", "no", "way", "for", "me", "to", "generate", "code", "that", "can", "handle", "this", "case", "NUMBER", "Adding", "application", "octet", "stream", "to", "either", "global", "or", "operation", "local", "has", "no", "effect", "during", "regeneration", "NUMBER", "I", "think", "I", "m", "still", "seeing", "this", "issue", "too", "NUMBER", "I", "have", "the", "following", "swagger", "NUMBER", "json", "items", "id", "get", "summary", "Get", "the", "iteam", "as", "application", "zip", "description", "Downloads", "a", "item", "as", "zip", "file", "NUMBER", "produces", "application", "octet", "stream", "parameters", "name", "id", "description", "The", "id", "of", "the", "item", "NUMBER", "in", "path", "required", "true", "type", "string", "format", "string", "responses", "NUMBER", "description", "Successfully", "retrieved", "the", "zip", "file", "schema", "type", "string", "format", "binary", "On", "the", "client", "I", "m", "always", "seeing", "the", "following", "error", "no", "consumer", "application", "octet", "stream", "If", "I", "change", "the", "content", "type", "to", "application", "zip", "I", "m", "seeing", "the", "same", "error", "with", "the", "respective", "content", "type", "NUMBER", "I", "m", "on", "the", "latest", "git", "master", "head", "NUMBER", "Is", "there", "a", "work", "example", "somewhere", "I", "hacked", "the", "following", "statement", "into", "my", "client", "and", "it", "seems", "to", "work", "now", "go", "NUMBER", "transport", "client", "NUMBER", "New", "host", "path", "schemes", "FIXME", "this", "should", "not", "be", "there", "and", "a", "bug", "in", "go", "swagger", "without", "this", "the", "zip", "download", "fail", "transport", "NUMBER", "Consumers", "application", "octet", "stream", "runtime", "NUMBER", "ByteStreamConsumer", "return", "restClient", "NUMBER", "New", "transport", "strfmt", "NUMBER", "Default", "nil", "It", "looks", "to", "me", "the", "following", "part", "in", "swagger", "NUMBER", "yml", "produces", "application", "octet", "stream", "be", "ignored", "in", "the", "client", "generation", "Docker", "client", "expects", "a", "stream", "of", "JSON", "structs", "from", "daemon", "to", "show", "a", "progress", "bar", "NUMBER", "Attached", "file", "be", "a", "dump", "of", "following", "command", "curl", "i", "X", "POST", "LINK", "alpine", "tag", "latest", "Dump", "LINK", "Our", "swagger", "API", "be", "case", "sensitive", "for", "enums", "NUMBER", "E", "NUMBER", "g", "NUMBER", "DESC", "be", "ok", "but", "desc", "or", "deSC", "will", "cause", "NUMBER", "s", "NUMBER", "This", "be", "needlessly", "strict", "and", "we", "should", "support", "case", "insensitive", "enums", "NUMBER", "We", "d", "like", "to", "allow", "it", "to", "be", "case", "insensitive", "these", "be", "get", "params", "NUMBER", "Since", "the", "validation", "code", "be", "deep", "in", "go", "swagger", "generate", "code", "have", "you", "considered", "this", "as", "a", "go", "swagger", "feature", "thanks", "Why", "were", "the", "checks", "in", "the", "code", "below", "fx", "hasInsecure", "hasSecure", "during", "this", "refactor", "And", "anywhere", "else", "in", "the", "template", "NUMBER", "var", "opts", "struct", "if", "contains", "NUMBER", "ExtraSchemes", "unix", "SocketPath", "flags", "NUMBER", "Filename", "long", "socket", "path", "description", "the", "unix", "socket", "to", "listen", "on", "default", "var", "run", "dasherize", "NUMBER", "Name", "NUMBER", "sock", "end", "if", "hasInsecure", "NUMBER", "Schemes", "Host", "string", "long", "host", "description", "the", "IP", "to", "listen", "on", "default", "localhost", "env", "HOST", "Port", "int", "long", "port", "description", "the", "port", "to", "listen", "on", "for", "insecure", "connections", "defaults", "to", "a", "random", "value", "env", "PORT", "end", "if", "hasSecure", "NUMBER", "Schemes", "TLSHost", "string", "long", "tls", "host", "description", "the", "IP", "to", "listen", "on", "for", "tls", "when", "not", "specified", "it", "s", "the", "same", "as", "host", "env", "TLS_HOST", "TLSPort", "int", "long", "tls", "port", "description", "the", "port", "to", "listen", "on", "for", "secure", "connections", "defaults", "to", "a", "random", "value", "env", "TLS_PORT", "TLSCertificate", "flags", "NUMBER", "Filename", "long", "tls", "certificate", "description", "the", "certificate", "to", "use", "for", "secure", "connections", "required", "true", "env", "TLS_CERTIFICATE", "TLSCertificateKey", "flags", "NUMBER", "Filename", "long", "tls", "key", "description", "the", "private", "key", "to", "use", "for", "secure", "conections", "required", "true", "env", "TLS_PRIVATE_KEY", "end", "From", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "a", "NUMBER", "d", "NUMBER", "d", "NUMBER", "d", "NUMBER", "db", "NUMBER", "c", "NUMBER", "bc", "NUMBER", "generator", "template", "server", "main", "NUMBER", "gotmpl", "L", "NUMBER", "L", "NUMBER", "to", "LINK", "swagger", "go", "swagger", "blob", "b", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fbe", "NUMBER", "cc", "NUMBER", "ae", "NUMBER", "fed", "NUMBER", "generator", "template", "server", "server", "NUMBER", "gotmpl", "L", "NUMBER", "L", "NUMBER", "As", "far", "as", "I", "can", "see", "it", "s", "fix", "NUMBER", "Thank", "you", "NUMBER", "Hello", "I", "get", "these", "swagger", "meta", "swagger", "route", "swagger", "response", "etc", "NUMBER", "But", "I", "could", "not", "understand", "the", "swagger", "model", "and", "when", "I", "use", "it", "where", "I", "just", "add", "this", "in", "my", "go", "file", "but", "it", "be", "not", "appear", "in", "my", "swagger", "NUMBER", "json", "file", "NUMBER", "go", "User", "represents", "the", "user", "for", "this", "application", "A", "user", "be", "the", "security", "principal", "for", "this", "application", "NUMBER", "It", "s", "also", "use", "as", "one", "of", "main", "axis", "for", "report", "NUMBER", "A", "user", "can", "have", "friends", "with", "whom", "they", "can", "share", "what", "they", "like", "NUMBER", "swagger", "model", "type", "User", "struct", "the", "id", "for", "this", "user", "required", "true", "min", "NUMBER", "ID", "int", "NUMBER", "json", "id", "the", "name", "for", "this", "user", "required", "true", "min", "length", "NUMBER", "Name", "string", "json", "name", "the", "email", "address", "for", "this", "user", "required", "true", "Email", "strfmt", "NUMBER", "Email", "json", "login", "the", "friends", "for", "this", "user", "Friends", "User", "json", "friends", "can", "you", "help", "me", "please", "I", "want", "to", "use", "swagger", "response", "and", "swagger", "models", "together", "can", "you", "give", "me", "an", "example", "please", "be", "it", "useful", "during", "generate", "spec", "thank", "you", "dude", "casualjim", "but", "it", "do", "not", "work", "correctly", "when", "I", "use", "embeded", "struct", "NUMBER", "go", "User", "the", "user", "model", "swagger", "model", "type", "User", "struct", "ID", "int", "NUMBER", "Email", "string", "Name", "string", "UserResponse", "the", "user", "response", "swagger", "response", "userResponse", "type", "UserResponse", "struct", "in", "body", "Body", "struct", "ID", "int", "NUMBER", "Email", "string", "Name", "string", "UserResponse", "the", "user", "response", "swagger", "response", "userResponse", "type", "UserResponse", "struct", "in", "body", "Body", "User", "json", "consumes", "application", "json", "produces", "application", "json", "schemes", "http", "https", "swagger", "NUMBER", "info", "description", "the", "purpose", "of", "this", "application", "be", "to", "provide", "an", "application", "nthat", "be", "use", "plain", "go", "code", "to", "define", "an", "API", "n", "nThis", "should", "demonstrate", "all", "the", "possible", "comment", "annotations", "nthat", "be", "available", "to", "turn", "go", "code", "into", "a", "fully", "compliant", "swagger", "NUMBER", "spec", "title", "Petstore", "API", "NUMBER", "termsOfService", "there", "be", "no", "TOS", "at", "this", "moment", "use", "at", "your", "own", "risk", "we", "take", "no", "responsibility", "contact", "name", "John", "Doe", "url", "LINK", "email", "john", "NUMBER", "doe", "example", "NUMBER", "com", "license", "name", "MIT", "url", "LINK", "version", "NUMBER", "host", "localhost", "basePath", "v", "NUMBER", "paths", "user", "get", "description", "This", "will", "show", "all", "available", "pets", "by", "default", "NUMBER", "nYou", "can", "get", "the", "pets", "that", "be", "out", "of", "stock", "consumes", "application", "json", "produces", "application", "json", "schemes", "http", "https", "ws", "wss", "summary", "Lists", "pets", "filtered", "by", "some", "parameters", "NUMBER", "operationId", "getUser", "responses", "NUMBER", "ref", "responses", "userResponse", "definitions", "responses", "userResponse", "description", "UserResponse", "the", "user", "response", "schema", "type", "object", "properties", "Email", "type", "string", "ID", "type", "integer", "format", "int", "NUMBER", "Name", "type", "string", "this", "be", "embeded", "json", "consumes", "application", "json", "produces", "application", "json", "schemes", "http", "https", "swagger", "NUMBER", "info", "description", "the", "purpose", "of", "this", "application", "be", "to", "provide", "an", "application", "nthat", "be", "use", "plain", "go", "code", "to", "define", "an", "API", "n", "nThis", "should", "demonstrate", "all", "the", "possible", "comment", "annotations", "nthat", "be", "available", "to", "turn", "go", "code", "into", "a", "fully", "compliant", "swagger", "NUMBER", "spec", "title", "Petstore", "API", "NUMBER", "termsOfService", "there", "be", "no", "TOS", "at", "this", "moment", "use", "at", "your", "own", "risk", "we", "take", "no", "responsibility", "contact", "name", "John", "Doe", "url", "LINK", "email", "john", "NUMBER", "doe", "example", "NUMBER", "com", "license", "name", "MIT", "url", "LINK", "version", "NUMBER", "host", "localhost", "basePath", "v", "NUMBER", "paths", "user", "get", "description", "This", "will", "show", "all", "available", "pets", "by", "default", "NUMBER", "nYou", "can", "get", "the", "pets", "that", "be", "out", "of", "stock", "consumes", "application", "json", "produces", "application", "json", "schemes", "http", "https", "ws", "wss", "summary", "Lists", "pets", "filtered", "by", "some", "parameters", "NUMBER", "operationId", "getUser", "responses", "NUMBER", "ref", "responses", "userResponse", "definitions", "User", "description", "User", "the", "user", "model", "type", "object", "properties", "Email", "type", "string", "ID", "type", "integer", "format", "int", "NUMBER", "Name", "type", "string", "x", "go", "package", "github", "NUMBER", "com", "alioygur", "piklook", "corporate", "app", "UserResponse", "description", "UserResponse", "the", "user", "response", "type", "object", "properties", "Body", "description", "in", "body", "ref", "definitions", "User", "x", "go", "package", "github", "NUMBER", "com", "alioygur", "piklook", "corporate", "app", "responses", "userResponse", "description", "UserResponse", "the", "user", "response", "schema", "ref", "definitions", "User", "casualjim", "I", "just", "find", "a", "hint", "for", "this", "problem", "NUMBER", "this", "works", "well", "go", "Post", "Response", "swagger", "response", "type", "postRes", "struct", "in", "body", "Body", "struct", "postResBody", "this", "works", "bad", "go", "Post", "Response", "swagger", "response", "type", "postRes", "struct", "in", "body", "Body", "postResBody", "I", "hope", "this", "will", "be", "useful", "during", "fix", "this", "bug", "NUMBER", "Good", "luck", "Hello", "I", "will", "give", "to", "you", "more", "info", "NUMBER", "Also", "I", "test", "this", "code", "in", "my", "project", "NUMBER", "Thank", "you", "NUMBER", "On", "Feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "Ivan", "Porto", "Carrero", "notifications", "github", "NUMBER", "com", "write", "I", "have", "a", "test", "for", "this", "LINK", "swagger", "go", "swagger", "blob", "master", "fixture", "goparsing", "classification", "operations", "responses", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "would", "it", "be", "possible", "to", "give", "me", "project", "with", "the", "file", "layout", "you", "have", "I", "can", "t", "reproduce", "the", "error", "you", "have", "without", "more", "info", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "issuecomment", "NUMBER", "NUMBER", "casualjim", "which", "golang", "version", "do", "you", "use", "So", "people", "can", "update", "the", "website", "docs", "with", "pull", "request", "Make", "it", "eaiser", "going", "forword", "Ah", "That", "s", "perfect", "Up", "to", "you", "man", "great", "work", "I", "might", "throw", "up", "a", "pull", "request", "Also", "did", "some", "work", "on", "the", "LINK", "before", "great", "to", "see", "some", "doing", "a", "better", "job", "D", "The", "docker", "CLI", "leaves", "out", "the", "Accept", "header", "in", "some", "request", "NUMBER", "The", "current", "go", "swagger", "middleware", "do", "not", "handle", "this", "well", "NUMBER", "It", "currently", "returns", "code", "NUMBER", "message", "unsupported", "media", "type", "request", "only", "application", "json", "be", "available", "NegotiateContentType", "in", "negotiate", "NUMBER", "go", "NUMBER", "So", "NUMBER", "you", "re", "saying", "you", "re", "going", "to", "add", "it", "right", "The", "generate", "code", "do", "not", "compile", "if", "a", "file", "parameter", "has", "the", "property", "required", "true", "NUMBER", "For", "example", "parameters", "name", "file", "in", "formData", "description", "file", "to", "upload", "required", "true", "type", "file", "consumes", "multipart", "form", "data", "This", "pull", "request", "close", "issue", "NUMBER", "Clean", "up", "the", "tutorial", "NUMBER", "Given", "a", "path", "like", "api", "tasks", "the", "runtime", "uses", "path", "NUMBER", "Join", "to", "join", "the", "base", "path", "to", "it", "which", "strips", "any", "trail", "slash", "NUMBER", "If", "the", "path", "previously", "ended", "with", "a", "trail", "slash", "it", "be", "reinstated", "after", "add", "the", "base", "path", "prefix", "because", "the", "behaviour", "of", "the", "server", "s", "path", "handle", "cannot", "be", "guaranteed", "NUMBER", "Fixes", "NUMBER", "Signed", "off", "by", "Jonathan", "Ingram", "jonathan", "NUMBER", "b", "NUMBER", "ingram", "gmail", "NUMBER", "com", "You", "re", "welcome", "casualjim", "it", "s", "the", "least", "I", "can", "do", "You", "re", "the", "one", "that", "created", "the", "great", "lib", "Still", "hitting", "some", "curve", "balls", "to", "get", "it", "work", "for", "our", "API", "but", "hoping", "we", "will", "get", "there", "NUMBER", "At", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "It", "uses", "path", "NUMBER", "Join", "which", "strips", "the", "trail", "slash", "from", "my", "path", "e", "NUMBER", "g", "NUMBER", "LINK", "My", "server", "NUMBER", "s", "but", "the", "redirect", "be", "not", "followed", "NUMBER", "Apparently", "NUMBER", "redirects", "be", "followed", "per", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "so", "not", "sure", "if", "this", "be", "a", "bug", "or", "not", "but", "ideally", "I", "feel", "that", "the", "redirects", "should", "not", "be", "necessary", "in", "this", "case", "because", "the", "runtime", "should", "not", "change", "the", "given", "path", "at", "least", "so", "far", "as", "not", "change", "the", "trail", "slash", "choice", "that", "the", "server", "makes", "NUMBER", "For", "me", "I", "think", "not", "having", "the", "server", "handle", "both", "was", "because", "of", "the", "std", "libs", "behaviour", "of", "http", "NUMBER", "Handle", "and", "whether", "the", "path", "arg", "be", "a", "prefix", "I", "can", "t", "recall", "exactly", "but", "without", "the", "slash", "I", "think", "the", "server", "would", "not", "treat", "the", "given", "path", "as", "a", "prefix", "so", "the", "handler", "would", "not", "get", "matched", "for", "nested", "routes", "NUMBER", "Re", "why", "not", "just", "catch", "it", "I", "guess", "the", "server", "be", "catching", "it", "and", "possibly", "doing", "the", "right", "thing", "by", "doing", "a", "NUMBER", "to", "the", "canonical", "resource", "NUMBER", "Re", "your", "test", "Correct", "so", "here", "s", "an", "example", "call", "curl", "D", "LINK", "op", "HTTP", "NUMBER", "NUMBER", "Moved", "Permanently", "Location", "api", "my", "op", "Content", "Type", "text", "html", "charset", "utf", "NUMBER", "Vary", "Accept", "Encoding", "Date", "Mon", "NUMBER", "Feb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Server", "Google", "Frontend", "Cache", "Control", "private", "Alt", "Svc", "quic", "NUMBER", "ma", "NUMBER", "v", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Accept", "Ranges", "none", "Transfer", "Encoding", "chunked", "TAG", "Moved", "Permanently", "TAG", "NUMBER", "I", "m", "sure", "you", "ll", "figure", "out", "the", "ideal", "solution", "if", "you", "choose", "to", "implement", "this", "but", "I", "just", "did", "this", "locally", "and", "it", "achieved", "what", "I", "needed", "diff", "diff", "git", "a", "httpkit", "client", "runtime", "NUMBER", "go", "b", "httpkit", "client", "runtime", "NUMBER", "go", "index", "f", "NUMBER", "a", "NUMBER", "a", "NUMBER", "da", "NUMBER", "d", "NUMBER", "bc", "NUMBER", "a", "httpkit", "client", "runtime", "NUMBER", "go", "b", "httpkit", "client", "runtime", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "func", "r", "Runtime", "Submit", "operation", "client", "NUMBER", "Operation", "interface", "error", "req", "NUMBER", "URL", "NUMBER", "Scheme", "r", "NUMBER", "pickScheme", "operation", "NUMBER", "Schemes", "req", "NUMBER", "URL", "NUMBER", "Host", "r", "NUMBER", "Host", "var", "reinstateSlash", "bool", "if", "req", "NUMBER", "URL", "NUMBER", "Path", "len", "req", "NUMBER", "URL", "NUMBER", "Path", "NUMBER", "reinstateSlash", "true", "req", "NUMBER", "URL", "NUMBER", "Path", "path", "NUMBER", "Join", "r", "NUMBER", "BasePath", "req", "NUMBER", "URL", "NUMBER", "Path", "if", "reinstateSlash", "req", "NUMBER", "URL", "NUMBER", "Path", "req", "NUMBER", "URL", "NUMBER", "Path", "r", "NUMBER", "clientOnce", "NUMBER", "Do", "func", "r", "NUMBER", "client", "http", "NUMBER", "Client", "No", "probs", "happy", "to", "help", "Any", "feedback", "be", "appreciated", "and", "please", "let", "me", "know", "if", "special", "mark", "up", "be", "not", "supposed", "to", "work", "NUMBER", "Fixes", "NUMBER", "The", "matter", "of", "additional", "transports", "has", "come", "up", "several", "times", "and", "be", "now", "get", "discussed", "in", "LINK", "here", "LINK", "issuecomment", "NUMBER", "NUMBER", "This", "be", "for", "a", "direct", "in", "memory", "call", "so", "that", "we", "can", "spec", "out", "components", "that", "live", "within", "the", "same", "process", "allowing", "us", "to", "easily", "migrate", "components", "from", "initial", "in", "process", "implementation", "to", "distributed", "NUMBER", "The", "question", "be", "whether", "Swagger", "wants", "to", "be", "this", "type", "of", "technology", "or", "just", "public", "APIs", "for", "systems", "similar", "to", "the", "roles", "that", "webservices", "and", "EDI", "played", "in", "the", "past", "NUMBER", "I", "followed", "the", "todo", "list", "tutorial", "and", "feel", "that", "there", "be", "room", "for", "improvement", "the", "copyright", "year", "needs", "to", "get", "update", "I", "like", "YAML", "but", "I", "don", "t", "see", "YAML", "file", "often", "NUMBER", "I", "was", "a", "little", "confused", "about", "the", "swagger", "NUMBER", "yml", "as", "in", "some", "lines", "I", "saw", "strings", "in", "double", "quotes", "besides", "strings", "enclosed", "by", "single", "quotes", "and", "some", "without", "any", "quotes", "at", "all", "NUMBER", "Furthermore", "I", "feel", "that", "the", "usage", "of", "flow", "style", "be", "a", "little", "confusing", "NUMBER", "The", "completed", "spec", "include", "a", "https", "which", "makes", "it", "more", "difficult", "to", "follow", "the", "tutorial", "because", "you", "have", "to", "specify", "startup", "parameters", "like", "tis", "certificate", "and", "tls", "key", "NUMBER", "There", "be", "some", "differences", "between", "the", "tutorial", "and", "the", "example", "source", "code", "var", "store", "make", "map", "int", "NUMBER", "models", "NUMBER", "Item", "TAG", "var", "items", "make", "map", "int", "NUMBER", "models", "NUMBER", "Item", "var", "ids", "int", "NUMBER", "TAG", "var", "lastID", "int", "NUMBER", "curl", "i", "localhost", "NUMBER", "returns", "nil", "instead", "of", "in", "order", "to", "fix", "it", "you", "have", "to", "add", "result", "make", "models", "NUMBER", "Item", "NUMBER", "to", "the", "allItems", "function", "see", "configure_todo_list", "NUMBER", "go", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "tutorials", "todo", "list", "server", "complete", "cmd", "todo", "list", "server", "configure_todo_list", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "the", "allItems", "function", "doesn", "t", "interpret", "the", "since", "parameter", "the", "way", "I", "expected", "it", "NUMBER", "In", "my", "opinion", "line", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "examples", "tutorials", "todo", "list", "server", "complete", "cmd", "todo", "list", "server", "configure_todo_list", "NUMBER", "go", "L", "NUMBER", "has", "to", "be", "change", "to", "if", "since", "NUMBER", "since", "TAG", "agree", "on", "all", "points", "except", "the", "alItems", "one", "The", "since", "be", "for", "all", "ids", "since", "the", "one", "provide", "so", "if", "since", "be", "NUMBER", "then", "we", "want", "id", "s", "NUMBER", "NUMBER", "NUMBER", "and", "so", "on", "Right", "now", "the", "program", "code", "looks", "like", "this", "if", "since", "NUMBER", "since", "id", "result", "append", "result", "item", "So", "if", "since", "be", "NUMBER", "you", "would", "get", "the", "ids", "NUMBER", "and", "NUMBER", "You", "wouldn", "t", "get", "NUMBER", "NUMBER", "NUMBER", "and", "so", "on", "NUMBER", "Probably", "the", "program", "code", "should", "look", "like", "this", "if", "since", "NUMBER", "id", "since", "result", "append", "result", "item", "Does", "that", "mean", "a", "PR", "be", "come", "Yes", "The", "old", "scheme", "of", "handler", "method", "naming", "cause", "problem", "during", "regeneration", "NUMBER", "For", "our", "project", "we", "were", "generating", "a", "REST", "server", "and", "committing", "only", "the", "server", "code", "to", "our", "repo", "and", "discarding", "the", "models", "and", "operations", "generate", "by", "go", "swagger", "NUMBER", "Our", "intent", "was", "to", "regenerate", "those", "for", "every", "build", "but", "the", "handler", "method", "names", "were", "not", "the", "same", "on", "code", "regeneration", "even", "when", "we", "did", "not", "update", "the", "swagger", "spec", "NUMBER", "By", "change", "the", "method", "and", "file", "names", "to", "be", "a", "combo", "of", "Swagger", "Method", "Path", "it", "worked", "much", "better", "for", "us", "NUMBER", "This", "patch", "sets", "the", "content", "length", "of", "the", "request", "or", "else", "a", "chunked", "transfer", "be", "declared", "and", "this", "corrupts", "outgoing", "payloads", "NUMBER", "the", "content", "s", "length", "must", "be", "set", "prior", "to", "the", "body", "be", "write", "per", "the", "spec", "at", "LINK", "If", "Body", "be", "present", "Content", "Length", "be", "TAG", "my", "response", "struct", "schema", "properties", "be", "to", "structure", "the", "go", "types", "as", "embedded", "structs", "NUMBER", "For", "example", "go", "Some", "response", "object", "i", "want", "to", "generate", "a", "swagger", "spec", "for", "swagger", "response", "my", "response", "type", "MyResponse", "struct", "SomeField", "string", "SomeOtherField", "string", "Generates", "json", "responses", "my", "response", "description", "A", "Style", "returns", "all", "the", "information", "for", "a", "particular", "style", "headers", "SomeField", "type", "string", "SomeOtherField", "type", "string", "The", "only", "way", "to", "get", "it", "in", "the", "schema", "properties", "where", "I", "d", "expect", "it", "be", "to", "change", "my", "struct", "to", "this", "go", "Some", "response", "object", "i", "want", "to", "generate", "a", "swagger", "spec", "for", "swagger", "response", "my", "response", "NUMBER", "type", "MyEmbeddedResponse", "struct", "in", "body", "EmbeddedThing", "struct", "SomeField", "string", "SomeOtherField", "string", "Which", "then", "results", "in", "my", "expected", "swagger", "spec", "json", "my", "response", "NUMBER", "description", "Some", "response", "object", "i", "want", "to", "generate", "a", "swagger", "spec", "for", "schema", "properties", "SomeField", "type", "string", "SomeOtherField", "type", "string", "type", "object", "Signed", "off", "by", "Tom", "Pytleski", "pytlesk", "NUMBER", "gmail", "NUMBER", "com", "Closes", "NUMBER", "request", "NUMBER", "ParseMultipartForm", "will", "return", "an", "error", "if", "the", "Content", "Type", "be", "wrong", "NUMBER", "If", "the", "Content", "Type", "be", "not", "a", "multipart", "this", "will", "just", "call", "ParseForm", "instead", "NUMBER", "Hi", "I", "m", "having", "some", "problem", "trying", "to", "use", "the", "DELETE", "operation", "without", "a", "body", "DELETE", "item", "id", "NUMBER", "First", "of", "all", "let", "me", "say", "that", "I", "m", "not", "sure", "if", "request", "like", "DELETE", "item", "id", "without", "a", "body", "must", "have", "their", "header", "Content", "Type", "set", "or", "not", "NUMBER", "So", "in", "the", "end", "I", "find", "myself", "trying", "both", "cases", "NUMBER", "Without", "Content", "Type", "If", "I", "decide", "not", "to", "define", "a", "content", "type", "the", "swagger", "spec", "will", "be", "something", "like", "this", "yml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "Test", "schemes", "http", "paths", "key", "id", "delete", "parameters", "name", "id", "in", "path", "type", "integer", "required", "true", "responses", "NUMBER", "description", "OK", "I", "created", "the", "server", "and", "executed", "curl", "X", "DELETE", "LINK", "Which", "gave", "me", "the", "following", "error", "code", "NUMBER", "message", "unsupported", "media", "type", "application", "octet", "stream", "only", "be", "allow", "Digging", "into", "the", "code", "I", "ve", "find", "that", "if", "no", "content", "type", "be", "set", "it", "defaults", "to", "application", "octet", "stream", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "headers", "NUMBER", "go", "L", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "headers", "NUMBER", "go", "L", "NUMBER", "So", "it", "seems", "that", "the", "Content", "Type", "be", "required", "NUMBER", "With", "Content", "Type", "The", "swagger", "looks", "like", "yml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "Test", "schemes", "http", "produces", "application", "json", "consumes", "application", "json", "paths", "key", "id", "delete", "parameters", "name", "id", "in", "path", "type", "integer", "required", "true", "responses", "NUMBER", "description", "OK", "The", "curl", "command", "curl", "X", "DELETE", "H", "Content", "Type", "application", "json", "LINK", "Works", "well", "NUMBER", "But", "when", "I", "try", "to", "use", "the", "generate", "client", "I", "fall", "back", "to", "the", "previous", "case", "when", "no", "content", "type", "be", "set", "NUMBER", "I", "feel", "that", "this", "be", "relateded", "with", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "client", "request", "NUMBER", "go", "L", "NUMBER", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "client", "request", "NUMBER", "go", "L", "NUMBER", "where", "the", "content", "type", "only", "be", "be", "sent", "if", "there", "be", "a", "payload", "NUMBER", "Maybe", "this", "be", "relate", "to", "NUMBER", "Probably", "I", "miss", "something", "but", "if", "someone", "can", "help", "me", "on", "this", "NUMBER", "Thanks", "NUMBER", "Hello", "I", "have", "generate", "code", "from", "a", "spec", "NUMBER", "While", "compile", "i", "get", "an", "error", "go", "install", "NUMBER", "cmd", "ini", "goapi", "server", "ini", "goapi", "models", "models", "file", "NUMBER", "go", "NUMBER", "undefined", "strfmt", "models", "hit", "NUMBER", "go", "NUMBER", "undefined", "strfmt", "models", "member", "NUMBER", "go", "NUMBER", "undefined", "strfmt", "Example", "model", "file", "content", "package", "models", "This", "file", "was", "generate", "by", "the", "swagger", "tool", "NUMBER", "Editing", "this", "file", "might", "prove", "futile", "when", "you", "re", "run", "the", "swagger", "generate", "command", "File", "File", "file", "swagger", "model", "File", "type", "File", "struct", "text", "content", "of", "the", "file", "if", "availible", "Content", "string", "json", "content", "omitempty", "DownloadLink", "download", "link", "DownloadLink", "string", "json", "downloadLink", "omitempty", "Mime", "mime", "Mime", "string", "json", "mime", "omitempty", "Name", "name", "Name", "string", "json", "name", "omitempty", "size", "in", "bytes", "Size", "string", "json", "size", "omitempty", "Validate", "validates", "this", "file", "func", "m", "File", "Validate", "formats", "strfmt", "NUMBER", "Registry", "error", "return", "nil", "go", "version", "go", "NUMBER", "linux", "amd", "NUMBER", "I", "m", "having", "the", "same", "issue", "with", "the", "static", "NUMBER", "binary", "NUMBER", "The", "generate", "file", "which", "have", "this", "error", "simply", "doesn", "t", "have", "an", "import", "statement", "for", "strfmt", "NUMBER", "Meaning", "you", "should", "go", "get", "go", "swagger", "prior", "to", "calling", "swagger", "generate", "How", "be", "it", "that", "this", "affects", "swagger", "s", "ability", "to", "generate", "the", "correct", "import", "statement", "Other", "models", "be", "generate", "with", "the", "correct", "imports", "NUMBER", "Thanks", "I", "appreciate", "the", "explanation", "when", "you", "specify", "nested", "references", "in", "definitions", "example", "LINK", "swagger", "error", "with", "the", "following", "message", "The", "swagger", "spec", "at", "parent", "child", "NUMBER", "yml", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "object", "has", "no", "field", "definitions", "this", "documents", "validated", "properly", "in", "other", "swagger", "OpenAPI", "validators", "like", "LINK", "parser", "www", "index", "NUMBER", "html", "This", "manifests", "itself", "on", "go", "NUMBER", "rc", "NUMBER", "First", "up", "thanks", "for", "the", "great", "tool", "I", "m", "trying", "to", "figure", "out", "how", "to", "use", "annotations", "for", "generating", "my", "client", "SDK", "for", "the", "case", "when", "the", "API", "call", "expects", "a", "form", "file", "NUMBER", "I", "ve", "tried", "a", "few", "things", "and", "this", "particular", "case", "gives", "me", "a", "panic", "panic", "interface", "conversion", "interface", "be", "spec", "NUMBER", "Schema", "not", "spec", "NUMBER", "Parameter", "Note", "I", "m", "not", "sure", "if", "the", "panic", "be", "just", "expected", "behaviour", "but", "it", "goes", "unchecked", "in", "the", "code", "so", "I", "expect", "not", "NUMBER", "I", "guess", "I", "d", "like", "it", "to", "tell", "me", "what", "I", "m", "doing", "wrong", "NUMBER", "Here", "s", "the", "full", "main", "NUMBER", "go", "to", "replicate", "this", "go", "go", "generate", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "Package", "main", "MyCompany", "API", "NUMBER", "Schemes", "https", "Host", "localhost", "BasePath", "Version", "NUMBER", "License", "MIT", "LINK", "Consumes", "application", "json", "Produces", "application", "json", "swagger", "meta", "package", "main", "import", "bytes", "net", "http", "swagger", "parameters", "myOperation", "type", "MyStruct", "struct", "MyFormFile", "desc", "NUMBER", "name", "file", "in", "formData", "type", "file", "MyFormFile", "bytes", "NUMBER", "Buffer", "json", "myFormFile", "func", "main", "swagger", "route", "POST", "api", "my", "op", "myOperation", "Consumes", "multipart", "form", "data", "Produces", "application", "json", "Security", "api_key", "http", "NUMBER", "HandleFunc", "api", "my", "op", "func", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "And", "obviously", "just", "run", "this", "go", "generate", "swagger", "generate", "client", "Instead", "of", "the", "bytes", "NUMBER", "Buffer", "I", "ve", "tried", "os", "NUMBER", "File", "and", "I", "get", "this", "unable", "to", "resolve", "embedded", "struct", "for", "NUMBER", "file", "and", "httpkit", "NUMBER", "File", "and", "I", "get", "this", "unknown", "primitive", "File", "Edit", "I", "ve", "also", "tried", "multipart", "NUMBER", "File", "and", "get", "unknown", "primitive", "File", "If", "it", "helps", "and", "if", "you", "have", "any", "thoughts", "on", "if", "this", "be", "possible", "with", "go", "swagger", "essentially", "I", "m", "trying", "to", "use", "annotations", "to", "replicate", "my", "call", "that", "allows", "_both_", "a", "JSON", "encoded", "body", "and", "also", "a", "file", "form", "field", "equivalent", "of", "this", "CURL", "request", "curl", "curl", "LINK", "op", "F", "file", "myfile", "NUMBER", "txt", "F", "body", "someKey", "someVal", "casualjim", "thanks", "for", "the", "reply", "NUMBER", "I", "did", "already", "try", "httpkit", "NUMBER", "File", "previously", "and", "just", "tried", "it", "again", "and", "it", "returns", "the", "error", "unknown", "primitive", "File", "Would", "this", "be", "a", "bug", "I", "did", "check", "out", "the", "test", "at", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "dc", "NUMBER", "bb", "NUMBER", "db", "NUMBER", "edd", "NUMBER", "fcd", "NUMBER", "ca", "NUMBER", "cb", "examples", "generate", "restapi", "operations", "pet", "upload_file_parameters", "NUMBER", "go", "L", "NUMBER", "but", "if", "I", "m", "correct", "it", "looks", "like", "that", "file", "be", "generate", "from", "the", "swagger", "NUMBER", "json", "oppose", "to", "what", "I", "m", "trying", "to", "do", "which", "be", "generate", "it", "from", "code", "annotations", "comments", "NUMBER", "For", "the", "record", "here", "s", "the", "complete", "run", "program", "to", "replicate", "the", "error", "when", "use", "httpkit", "NUMBER", "File", "go", "go", "generate", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "Package", "main", "MyCompany", "API", "NUMBER", "Schemes", "https", "Host", "localhost", "BasePath", "Version", "NUMBER", "License", "MIT", "LINK", "Consumes", "application", "json", "Produces", "application", "json", "swagger", "meta", "package", "main", "import", "net", "http", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "swagger", "parameters", "myOperation", "type", "MyStruct", "struct", "MyFormFile", "desc", "NUMBER", "name", "file", "in", "formData", "type", "file", "MyFormFile", "httpkit", "NUMBER", "File", "json", "myFormFile", "func", "main", "swagger", "route", "POST", "api", "my", "op", "myOperation", "Consumes", "multipart", "form", "data", "Produces", "application", "json", "Security", "api_key", "http", "NUMBER", "HandleFunc", "api", "my", "op", "func", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "Hi", "casualjim", "thanks", "for", "the", "fix", "NUMBER", "However", "I", "have", "run", "go", "get", "u", "and", "add", "the", "annotation", "swagger", "file", "and", "when", "generating", "I", "get", "the", "error", "classifier", "unknown", "swagger", "annotation", "file", "NUMBER", "Here", "s", "the", "full", "file", "I", "copied", "the", "MyFileParams", "struct", "directly", "from", "your", "recent", "commit", "so", "figured", "it", "should", "work", "NUMBER", "Any", "thoughts", "go", "go", "generate", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "Package", "main", "MyCompany", "API", "NUMBER", "Schemes", "https", "Host", "localhost", "BasePath", "Version", "NUMBER", "License", "MIT", "LINK", "Consumes", "application", "json", "Produces", "application", "json", "swagger", "meta", "package", "main", "import", "bytes", "net", "http", "MyFileParams", "contains", "the", "uploaded", "file", "data", "swagger", "parameters", "myOperation", "type", "MyFileParams", "struct", "MyFormFile", "desc", "NUMBER", "in", "formData", "swagger", "file", "MyFormFile", "bytes", "NUMBER", "Buffer", "json", "myFormFile", "func", "main", "swagger", "route", "POST", "api", "my", "op", "myOperation", "Consumes", "multipart", "form", "data", "Produces", "application", "json", "Security", "api_key", "http", "NUMBER", "HandleFunc", "api", "my", "op", "func", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "casualjim", "ah", "thanks", "my", "bad", "rookie", "mistake", "NUMBER", "I", "forgot", "that", "this", "was", "use", "a", "swagger", "command", "oppose", "to", "just", "import", "ing", "it", "in", "my", "own", "code", "so", "I", "needed", "to", "make", "sure", "the", "swagger", "command", "was", "rebuilt", "NUMBER", "Sorry", "for", "the", "noise", "and", "thanks", "again", "for", "the", "fix", "NUMBER", "casualjim", "I", "m", "having", "difficulty", "with", "swagger", "route", "and", "swagger", "generate", "spec", "NUMBER", "Can", "we", "get", "a", "full", "example", "where", "the", "json", "be", "generate", "from", "embedded", "comments", "or", "clarification", "of", "rules", "on", "where", "swagger", "route", "can", "appear", "I", "ve", "tried", "putting", "it", "outside", "of", "methods", "that", "be", "then", "add", "with", "http", "NUMBER", "HandleFunc", "inside", "methods", "handle", "by", "http", "NUMBER", "HandleFunc", "inside", "main", "above", "http", "NUMBER", "HandleFunc", "calls", "In", "no", "case", "can", "I", "get", "the", "paths", "documentation", "to", "appear", "in", "generate", "json", "NUMBER", "I", "may", "be", "miss", "tags", "I", "may", "be", "putting", "the", "documentation", "in", "the", "wrong", "place", "it", "isn", "t", "clear", "to", "me", "how", "this", "be", "supposed", "to", "work", "NUMBER", "Thanks", "Sorry", "NUMBER", "this", "may", "be", "a", "duplicate", "of", "NUMBER", "NUMBER", "casualjim", "I", "m", "fine", "if", "you", "close", "this", "as", "a", "duplicate", "NUMBER", "This", "be", "a", "nontrivial", "thing", "to", "do", "in", "Go", "due", "to", "the", "lack", "of", "compile", "time", "code", "execution", "NUMBER", "It", "would", "be", "great", "to", "support", "enums", "in", "the", "annotations", "of", "swagger", "paramaters", "NUMBER", "I", "ll", "try", "to", "work", "on", "this", "soon", "NUMBER", "Possibly", "something", "like", "The", "direction", "of", "the", "sort", "NUMBER", "Can", "be", "DESC", "or", "ASC", "NUMBER", "in", "query", "enum", "DESC", "ASC", "SortOrder", "string", "json", "sortorder", "It", "would", "be", "great", "to", "support", "default", "values", "in", "the", "annotations", "of", "swagger", "paramaters", "NUMBER", "I", "ll", "try", "to", "work", "on", "this", "soon", "NUMBER", "Possibly", "something", "like", "The", "direction", "of", "the", "sort", "NUMBER", "Can", "be", "DESC", "or", "ASC", "NUMBER", "in", "query", "default", "DESC", "SortOrder", "string", "json", "sortorder", "Functions", "with", "naming", "conventions", "sound", "overly", "complicated", "to", "me", "but", "that", "might", "be", "because", "I", "have", "only", "use", "the", "spec", "generator", "from", "go", "swagger", "NUMBER", "What", "if", "we", "implement", "a", "new", "swagger", "type", "Might", "be", "something", "like", "swagger", "defaultvalue", "var", "defaultSortOrder", "DESC", "swagger", "enum", "var", "allowedSorts", "string", "DESC", "ASC", "Which", "results", "in", "the", "following", "paramater", "definition", "The", "direction", "of", "the", "sort", "NUMBER", "Can", "be", "DESC", "or", "ASC", "NUMBER", "in", "query", "default", "defaultSortOrder", "enum", "allowedSorts", "SortOrder", "string", "json", "sortorder", "Then", "it", "kind", "of", "works", "the", "same", "as", "with", "route", "Responses", "code", "struct", "mapping", "NUMBER", "Great", "I", "ll", "see", "what", "I", "can", "do", "tomorrow", "NUMBER", "Makes", "it", "more", "complicated", "than", "my", "initial", "plan", "so", "I", "might", "not", "get", "that", "far", "NUMBER", "Nah", "it", "s", "no", "problem", "NUMBER", "I", "rather", "do", "it", "correctly", "right", "away", "NUMBER", "I", "ll", "report", "my", "progress", "here", "and", "maybe", "someone", "else", "can", "pick", "up", "the", "work", "when", "I", "m", "out", "of", "time", "NUMBER", "See", "my", "work", "in", "progress", "here", "LINK", "swagger", "go", "swagger", "compare", "master", "NUMBER", "jerbob", "NUMBER", "feature", "NUMBER", "NUMBER", "enums", "defaults", "for", "parameters", "expand", "NUMBER", "jerbob", "NUMBER", "Do", "you", "mind", "if", "I", "pickup", "this", "issue", "May", "I", "use", "the", "progress", "you", "have", "made", "thus", "far", "McSwitch", "sure", "I", "m", "not", "work", "on", "it", "anymore", "casualjim", "Instead", "of", "going", "the", "whole", "nine", "yards", "here", "could", "I", "simply", "add", "enum", "and", "default", "options", "into", "the", "swagger", "parameters", "annotation", "this", "will", "at", "least", "give", "us", "a", "starting", "point", "to", "work", "from", "Usage", "go", "swagger", "parameters", "operation", "type", "Example", "struct", "enum", "foo", "bar", "none", "default", "bar", "in", "query", "Category", "string", "json", "category", "This", "should", "output", "the", "following", "into", "the", "category", "parameter", "section", "json", "type", "string", "enum", "foo", "bar", "none", "default", "bar", "x", "go", "name", "Category", "name", "category", "in", "query", "If", "I", "compile", "with", "race", "use", "the", "same", "client", "call", "concurrently", "results", "in", "WARNING", "DATA", "RACE", "Write", "by", "goroutine", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "client", "NUMBER", "Runtime", "NUMBER", "Submit", "home", "mstoykov", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "client", "runtime", "NUMBER", "go", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "super_secret_lib", "hosts", "NUMBER", "Client", "NUMBER", "GetHosts", "home", "mstoykov", "go", "src", "super_secret_lib", "hosts", "hosts_client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "bc", "OMITTED", "FOR", "CLARITY", "Previous", "write", "by", "goroutine", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "client", "NUMBER", "Runtime", "NUMBER", "Submit", "home", "mstoykov", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "client", "runtime", "NUMBER", "go", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "super_secret_lib", "hosts", "NUMBER", "Client", "NUMBER", "GetHosts", "home", "mstoykov", "go", "src", "super_secret_lib", "hosts", "hosts_client", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "bc", "OMITTED", "FOR", "CLARITY", "Goroutine", "NUMBER", "run", "created", "at", "super_secret_app", "package", "NUMBER", "Application", "NUMBER", "execute", "home", "mstoykov", "go", "src", "super_secret_app", "handlers", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "Goroutine", "NUMBER", "run", "created", "at", "super_secret_app", "package", "NUMBER", "Application", "NUMBER", "execute", "home", "mstoykov", "go", "src", "super_secret_app", "handlers", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "the", "line", "in", "question", "be", "go", "NUMBER", "r", "NUMBER", "client", "NUMBER", "Transport", "r", "NUMBER", "Transport", "Where", "the", "Transport", "of", "the", "client", "be", "be", "reset", "on", "each", "call", "to", "the", "API", "NUMBER", "I", "suppose", "it", "s", "so", "that", "the", "Transport", "can", "be", "change", "If", "this", "be", "so", "I", "propose", "unexporting", "Transport", "and", "use", "RWMutex", "with", "a", "Setter", "NUMBER", "The", "spec", "generate", "will", "often", "fail", "for", "me", "given", "the", "following", "definitions", "for", "example", "go", "ActionParam", "swagger", "parameters", "actionParam", "type", "ActionParam", "struct", "in", "body", "required", "true", "Body", "actionParam", "type", "actionParam", "struct", "required", "true", "FieldA", "string", "required", "true", "FieldB", "string", "required", "true", "FieldC", "int", "Generating", "a", "spec", "for", "this", "file", "will", "yield", "unknown", "primitive", "actionParam", "Changing", "around", "all", "the", "field", "names", "etc", "do", "not", "fix", "the", "issue", "NUMBER", "Currently", "on", "go", "NUMBER", "darwin", "amd", "NUMBER", "with", "the", "latest", "version", "of", "swagger", "NUMBER", "Yes", "it", "seems", "like", "a", "flaky", "issue", "I", "might", "try", "run", "the", "tool", "on", "another", "machine", "or", "platform", "but", "it", "seems", "doubtful", "that", "that", "would", "fix", "the", "issue", "NUMBER", "Some", "more", "information", "about", "the", "project", "there", "be", "many", "different", "package", "in", "the", "project", "that", "depend", "on", "each", "other", "the", "issue", "appeared", "in", "sub", "sub", "package", "from", "the", "root", "but", "this", "be", "probably", "more", "correlation", "than", "causation", "the", "problem", "will", "often", "go", "away", "when", "moving", "the", "struct", "declarations", "to", "another", "file", "in", "the", "same", "package", "but", "sometimes", "not", "in", "a", "previous", "version", "of", "go", "swagger", "the", "error", "would", "read", "unknown", "primitive", "error", "I", "ve", "since", "moved", "all", "of", "the", "swagger", "comments", "from", "the", "project", "and", "will", "define", "everything", "in", "a", "NUMBER", "yml", "instead", "NUMBER", "yep", "NUMBER", "casualjim", "I", "be", "new", "on", "Golang", "NUMBER", "there", "be", "my", "file", "call", "as", "response", "NUMBER", "go", "go", "package", "app", "import", "github", "NUMBER", "com", "alioygur", "piklook", "corporate", "app", "domain", "github", "NUMBER", "com", "alioygur", "piklook", "corporate", "app", "lib", "type", "times", "struct", "CreatedAt", "int", "NUMBER", "json", "createdAt", "UpdatedAt", "int", "NUMBER", "json", "updatedAt", "type", "response", "struct", "Data", "interface", "json", "data", "type", "userRes", "struct", "ID", "int", "NUMBER", "json", "id", "Username", "string", "json", "username", "Email", "string", "json", "email", "times", "func", "newUserRes", "user", "domain", "NUMBER", "User", "userRes", "res", "new", "userRes", "lib", "NUMBER", "CopyTo", "user", "res", "return", "res", "swagger", "response", "jobRes", "type", "jobRes", "struct", "ID", "int", "NUMBER", "json", "id", "UserID", "int", "NUMBER", "json", "userId", "Title", "string", "json", "title", "Description", "string", "json", "description", "Skills", "skillRes", "json", "skills", "omitempty", "type", "skillRes", "struct", "ID", "int", "NUMBER", "json", "id", "Name", "string", "json", "name", "func", "newJobRes", "job", "domain", "NUMBER", "Job", "interface", "res", "new", "jobRes", "lib", "NUMBER", "CopyTo", "job", "res", "skillRess", "make", "skillRes", "len", "job", "NUMBER", "Skills", "for", "i", "skill", "range", "job", "NUMBER", "Skills", "lib", "NUMBER", "CopyTo", "skill", "skillRess", "i", "res", "NUMBER", "Skills", "skillRess", "return", "response", "res", "func", "newJobsRes", "jobs", "domain", "NUMBER", "Job", "interface", "res", "make", "jobRes", "len", "jobs", "for", "index", "p", "range", "jobs", "lib", "NUMBER", "CopyTo", "p", "res", "index", "return", "response", "res", "The", "error", "sh", "piklook", "corporate", "swagger", "generate", "spec", "o", "swagger", "NUMBER", "json", "unknown", "field", "type", "ele", "for", "skills", "Hey", "there", "I", "m", "fighting", "this", "issue", "and", "managed", "to", "track", "it", "down", "to", "an", "interface", "NUMBER", "I", "have", "the", "following", "interface", "go", "TranscodingProvider", "represents", "a", "provider", "of", "transcoding", "NUMBER", "It", "defines", "a", "basic", "API", "for", "transcoding", "a", "media", "and", "query", "the", "status", "of", "a", "Job", "NUMBER", "The", "underlying", "provider", "should", "handle", "the", "profileSpec", "as", "deisired", "it", "might", "be", "a", "JSON", "or", "an", "XML", "or", "anything", "else", "NUMBER", "type", "TranscodingProvider", "interface", "JobStatus", "id", "string", "JobStatus", "error", "Healthcheck", "should", "return", "nil", "if", "the", "provider", "be", "currently", "available", "for", "transcoding", "videos", "otherwise", "it", "should", "return", "an", "error", "explaining", "what", "s", "going", "on", "NUMBER", "Healthcheck", "error", "There", "s", "no", "special", "mark", "up", "in", "this", "interface", "NUMBER", "It", "considers", "the", "Healthcheck", "method", "to", "be", "an", "attribute", "NUMBER", "If", "I", "remove", "the", "method", "it", "works", "NUMBER", "If", "I", "change", "swaggerSchemaForType", "in", "go", "swagger", "code", "to", "treat", "an", "error", "as", "a", "string", "see", "the", "diff", "LINK", "it", "include", "TranscodingProvider", "as", "one", "of", "the", "definitions", "in", "the", "manifest", "declaring", "it", "as", "follow", "json", "TranscodingProvider", "description", "It", "defines", "a", "basic", "API", "for", "transcoding", "a", "media", "and", "query", "the", "status", "of", "a", "nJob", "NUMBER", "The", "underlying", "provider", "should", "handle", "the", "profileSpec", "as", "deisired", "it", "nmight", "be", "a", "JSON", "or", "an", "XML", "or", "anything", "else", "NUMBER", "type", "object", "title", "TranscodingProvider", "represents", "a", "provider", "of", "transcoding", "NUMBER", "properties", "Healthcheck", "description", "Healthcheck", "should", "return", "nil", "if", "the", "provider", "be", "currently", "available", "nfor", "transcoding", "videos", "otherwise", "it", "should", "return", "an", "error", "nexplaining", "what", "s", "going", "on", "NUMBER", "type", "string", "x", "go", "package", "github", "NUMBER", "com", "nytm", "video", "transcoding", "api", "provider", "casualjim", "I", "can", "but", "what", "s", "the", "right", "fix", "Ignore", "interfaces", "But", "don", "t", "you", "think", "that", "treating", "an", "interface", "method", "as", "a", "property", "be", "buggy", "Interfaces", "have", "no", "properties", "they", "should", "be", "skipped", "NUMBER", "I", "see", "NUMBER", "Can", "I", "have", "a", "swagger", "skip", "or", "something", "like", "that", "then", "It", "s", "really", "a", "method", "that", "takes", "no", "argument", "and", "returns", "a", "single", "parameter", "it", "be", "not", "an", "accessor", "NUMBER", "casualjim", "I", "think", "it", "s", "more", "complicated", "than", "that", "NUMBER", "Should", "it", "be", "explicit", "in", "a", "sense", "that", "it", "only", "add", "stuff", "that", "be", "explicitly", "tag", "with", "some", "swagger", "mark", "up", "or", "should", "it", "be", "implicit", "forcing", "users", "to", "explicitly", "mark", "types", "attributes", "and", "methods", "when", "they", "want", "to", "exclude", "something", "It", "seems", "to", "be", "something", "in", "the", "middle", "now", "Anyway", "I", "sent", "PR", "NUMBER", "treating", "error", "as", "strings", "I", "m", "not", "sure", "if", "it", "s", "fine", "to", "change", "the", "fixture", "please", "let", "me", "know", "what", "you", "think", "NUMBER", "Generating", "a", "spec", "for", "this", "file", "will", "yield", "unknown", "primitive", "actionParam", "I", "confirm", "NUMBER", "I", "find", "a", "similar", "error", "unknown", "primitive", "MyTypeName", "NUMBER", "And", "this", "error", "be", "random", "NUMBER", "I", "traced", "the", "error", "NUMBER", "schemaParser", "NUMBER", "parseIdentProperty", "call", "findSourceFile", "scan", "schema", "NUMBER", "go", "line", "about", "NUMBER", "findSourceFile", "pkg", "loader", "NUMBER", "PackageInfo", "typeName", "string", "scan", "schema", "NUMBER", "go", "line", "about", "NUMBER", "This", "function", "not", "find", "information", "sometimes", "NUMBER", "I", "traced", "next", "NUMBER", "findSourceFile", "call", "with", "incorrect", "pkg", "parameter", "sometimes", "NUMBER", "My", "package", "have", "name", "myPackagePath", "error", "NUMBER", "It", "be", "similar", "golang", "system", "package", "name", "error", "NUMBER", "Sometime", "findSourceFile", "call", "with", "correct", "package", "name", "myPackagePath", "error", "and", "my", "correct", "typeName", "Sometime", "findSourceFile", "call", "with", "incorrect", "package", "name", "error", "and", "my", "correct", "typeName", "Under", "Linux", "Ubuntu", "NUMBER", "NUMBER", "bit", "and", "MacOS", "X", "Yosemite", "same", "NUMBER", "With", "Go", "NUMBER", "NUMBER", "NUMBER", "bit", "Under", "Windows", "NUMBER", "NUMBER", "bit", "no", "error", "NUMBER", "Or", "it", "be", "random", "I", "was", "fool", "this", "bug", "NUMBER", "I", "was", "rename", "my", "package", "myPackagePath", "error", "to", "myPackagePath", "apierrors", "NUMBER", "go", "swagger", "works", "fine", "after", "NUMBER", "Problem", "be", "random", "package", "names", "NUMBER", "See", "my", "message", "above", "NUMBER", "Faced", "same", "issue", "after", "NUMBER", "days", "investigation", "get", "the", "place", "where", "it", "s", "fail", "LINK", "swagger", "go", "swagger", "blob", "master", "scan", "schema", "NUMBER", "go", "L", "NUMBER", "because", "ast", "NUMBER", "InterfaceType", "not", "find", "it", "this", "switch", "NUMBER", "I", "could", "not", "reproduce", "this", "error", "without", "the", "code", "but", "in", "my", "code", "it", "s", "fail", "always", "NUMBER", "NUMBER", "I", "m", "facing", "this", "issue", "one", "more", "time", "this", "time", "intermittently", "NUMBER", "I", "didn", "t", "investigate", "it", "much", "further", "but", "could", "swaggerSchemaForType", "ignore", "unknown", "primitives", "I", "mean", "apply", "this", "patch", "diff", "diff", "git", "a", "scan", "scanner", "NUMBER", "go", "b", "scan", "scanner", "NUMBER", "go", "index", "d", "NUMBER", "c", "NUMBER", "a", "NUMBER", "NUMBER", "a", "scan", "scanner", "NUMBER", "go", "b", "scan", "scanner", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "func", "swaggerSchemaForType", "typeName", "string", "prop", "swaggerTypable", "error", "prop", "NUMBER", "Typed", "number", "float", "case", "float", "NUMBER", "prop", "NUMBER", "Typed", "number", "double", "default", "return", "fmt", "NUMBER", "Errorf", "unknown", "primitive", "q", "typeName", "return", "nil", "Based", "on", "top", "of", "my", "PR", "NUMBER", "can", "separate", "out", "if", "necessary", "I", "have", "reworked", "the", "way", "template", "be", "compiled", "so", "when", "specify", "custom", "template", "you", "be", "no", "longer", "restricted", "to", "just", "the", "template", "names", "that", "be", "embedded", "NUMBER", "I", "have", "add", "a", "doc", "page", "on", "it", "as", "well", "NUMBER", "I", "will", "clean", "up", "the", "documentation", "a", "bit", "hopefully", "when", "I", "get", "some", "more", "time", "add", "some", "documentation", "on", "the", "data", "type", "the", "template", "be", "call", "with", "but", "I", "wanted", "to", "just", "put", "this", "up", "there", "NUMBER", "whoops", "forgot", "that", "I", "was", "use", "protected", "template", "in", "the", "test", "Addresses", "NUMBER", "Currently", "Accept", "headers", "be", "gathered", "from", "the", "registered", "consumers", "on", "a", "client", "s", "httpkit", "client", "Runtime", "NUMBER", "Consumers", "map", "NUMBER", "Instead", "the", "MIME", "types", "in", "the", "operation", "s", "consumes", "field", "should", "be", "use", "NUMBER", "This", "looks", "like", "it", "would", "be", "a", "matter", "of", "update", "the", "template", "LINK", "swagger", "go", "swagger", "blob", "master", "generator", "template", "client", "client", "NUMBER", "gotmpl", "the", "operation", "struct", "LINK", "swagger", "go", "swagger", "blob", "master", "client", "client", "NUMBER", "go", "L", "NUMBER", "and", "the", "client", "submit", "method", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "client", "runtime", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "I", "m", "come", "across", "compilation", "error", "with", "generate", "models", "containing", "references", "to", "shared", "enums", "NUMBER", "Here", "s", "an", "example", "swagger", "NUMBER", "json", "file", "that", "will", "generate", "uncompilable", "code", "paths", "NUMBER", "host", "test", "NUMBER", "com", "schemes", "https", "produces", "application", "json", "swagger", "NUMBER", "definitions", "Currency", "description", "enum", "JPY", "USD", "type", "string", "Money", "description", "properties", "amount", "type", "integer", "currency", "ref", "definitions", "Currency", "type", "object", "consumes", "application", "json", "info", "title", "Test", "version", "NUMBER", "The", "generate", "Money", "struct", "minus", "comments", "be", "below", "NUMBER", "This", "compiles", "although", "I", "was", "surprised", "that", "the", "Currency", "field", "wasn", "t", "of", "type", "Currency", "NUMBER", "type", "Money", "struct", "Amount", "int", "NUMBER", "json", "amount", "omitempty", "Currency", "Currency", "json", "currency", "omitempty", "func", "m", "Money", "Validate", "formats", "strfmt", "NUMBER", "Registry", "error", "return", "nil", "The", "generate", "Currency", "struct", "do", "not", "compile", "due", "to", "error", "in", "the", "Validate", "method", "type", "Currency", "string", "var", "currencyEnum", "interface", "func", "m", "Currency", "validateCurrencyEnum", "path", "location", "string", "value", "string", "error", "if", "currencyEnum", "nil", "var", "res", "string", "if", "err", "json", "NUMBER", "Unmarshal", "byte", "USD", "JPY", "res", "err", "nil", "return", "err", "for", "_", "v", "range", "res", "currencyEnum", "append", "currencyEnum", "v", "if", "err", "validate", "NUMBER", "Enum", "path", "location", "value", "currencyEnum", "err", "nil", "return", "err", "return", "nil", "func", "m", "Currency", "Validate", "formats", "strfmt", "NUMBER", "Registry", "error", "var", "res", "error", "NUMBER", "generate", "models", "country", "NUMBER", "go", "NUMBER", "cannot", "use", "m", "type", "Country", "as", "type", "string", "in", "argument", "to", "m", "NUMBER", "validateCountryEnum", "if", "err", "m", "NUMBER", "validateCurrencyEnum", "body", "m", "err", "nil", "return", "err", "NUMBER", "generate", "models", "country", "NUMBER", "go", "NUMBER", "cannot", "use", "m", "type", "Country", "as", "type", "string", "in", "argument", "to", "m", "NUMBER", "validateCountryEnum", "if", "err", "m", "NUMBER", "validateCurrencyEnum", "body", "m", "err", "nil", "res", "append", "res", "err", "if", "len", "res", "NUMBER", "return", "error", "NUMBER", "CompositeValidationError", "res", "NUMBER", "return", "nil", "From", "the", "compilation", "error", "include", "in", "comments", "above", "it", "seems", "that", "the", "generate", "code", "be", "trying", "to", "use", "string", "and", "Country", "interchangeably", "without", "casting", "NUMBER", "Thanks", "for", "the", "quick", "fix", "casualjim", "Currently", "when", "I", "try", "to", "swagger", "generate", "spec", "with", "the", "GO", "NUMBER", "VENDOREXPERIMENT", "and", "all", "my", "dependencies", "install", "in", "the", "vendor", "directory", "go", "swagger", "seems", "to", "ignore", "it", "and", "crashes", "during", "the", "generation", "saying", "that", "dependencies", "doesn", "t", "exists", "NUMBER", "Is", "that", "a", "know", "problem", "or", "did", "I", "miss", "something", "Thanks", "Just", "to", "be", "sure", "there", "be", "no", "misunderstanding", "there", "be", "no", "problem", "run", "the", "swagger", "command", "itself", "NUMBER", "There", "be", "also", "no", "problem", "doing", "a", "go", "build", "NUMBER", "Everything", "works", "fine", "NUMBER", "The", "problem", "be", "that", "go", "swagger", "doesn", "t", "seems", "to", "look", "for", "dependencies", "inside", "the", "vendor", "directory", "when", "generating", "the", "spec", "NUMBER", "It", "crashes", "when", "a", "go", "build", "pass", "under", "the", "same", "conditions", "NUMBER", "Yes", "it", "build", "NUMBER", "That", "s", "the", "weird", "thing", "NUMBER", "I", "m", "gonna", "double", "check", "if", "the", "env", "var", "be", "overrided", "somewhere", "when", "calling", "the", "swagger", "gen", "NUMBER", "But", "I", "already", "tried", "to", "run", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "swagger", "generate", "spec", "o", "swagger", "NUMBER", "json", "without", "success", "NUMBER", "I", "have", "no", "problem", "generating", "the", "doc", "without", "use", "the", "vendor", "experiment", "BTW", "NUMBER", "I", "also", "have", "this", "problem", "_go", "swagger", "version", "there", "be", "no", "version", "command", "in", "the", "executable", "_", "NUMBER", "go", "swagger", "go", "swagger", "git", "log", "NUMBER", "commit", "b", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "d", "NUMBER", "ee", "NUMBER", "a", "NUMBER", "efcb", "NUMBER", "b", "NUMBER", "Author", "Ivan", "Porto", "Carrero", "TAG", "Date", "Sat", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "update", "code", "of", "conduct", "to", "NUMBER", "version", "NUMBER", "go", "swagger", "go", "swagger", "cd", "workspace", "src", "bitbucket", "NUMBER", "org", "internationalsos", "riskratings", "_The", "project", "build", "so", "Go", "vendoring", "be", "work", "_", "NUMBER", "internationalsos", "riskratings", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "go", "build", "o", "build", "web", "NUMBER", "cmd", "web", "NUMBER", "internationalsos", "riskratings", "echo", "NUMBER", "_", "To", "prove", "that", "a", "package", "be", "indeed", "in", "the", "vendor", "directory", "_", "NUMBER", "internationalsos", "riskratings", "ls", "vendor", "github", "NUMBER", "com", "namsral", "flag", "examples", "export_test", "NUMBER", "go", "flag_test", "NUMBER", "go", "README", "NUMBER", "md", "example_test", "NUMBER", "go", "flag", "NUMBER", "go", "LICENSE", "testdata", "_and", "that", "we", "re", "use", "Go", "NUMBER", "_", "NUMBER", "internationalsos", "riskratings", "go", "version", "go", "version", "go", "NUMBER", "linux", "amd", "NUMBER", "_", "However", "go", "swagger", "do", "not", "find", "the", "vendored", "package", "and", "do", "not", "appear", "to", "be", "looking", "in", "the", "NUMBER", "vendor", "directory", "_", "NUMBER", "internationalsos", "riskratings", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "swagger", "generate", "spec", "b", "NUMBER", "cmd", "web", "o", "swagger", "NUMBER", "json", "NUMBER", "NUMBER", "head", "n", "NUMBER", "home", "ser", "workspace", "src", "bitbucket", "NUMBER", "org", "internationalsos", "riskratings", "cmd", "web", "main", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "namsral", "flag", "cannot", "find", "package", "github", "NUMBER", "com", "namsral", "flag", "in", "any", "of", "home", "ser", "Software", "go", "src", "github", "NUMBER", "com", "namsral", "flag", "from", "GOROOT", "home", "ser", "workspace", "src", "github", "NUMBER", "com", "namsral", "flag", "from", "GOPATH", "home", "ser", "workspace", "src", "bitbucket", "NUMBER", "org", "internationalsos", "riskratings", "cmd", "web", "main", "NUMBER", "go", "NUMBER", "NUMBER", "could", "not", "import", "github", "NUMBER", "com", "fvbock", "endless", "cannot", "find", "package", "github", "NUMBER", "com", "fvbock", "endless", "in", "any", "of", "NUMBER", "and", "so", "on", "for", "all", "dependencies", "NUMBER", "Note", "mainly", "that", "vendor", "isn", "t", "in", "the", "search", "path", "NUMBER", "I", "can", "t", "make", "this", "project", "public", "but", "I", "ll", "try", "to", "put", "together", "a", "minimum", "test", "case", "for", "you", "NUMBER", "Hi", "I", "cleaned", "and", "rebuilt", "swagger", "use", "go", "NUMBER", "and", "it", "be", "work", "now", "NUMBER", "Thanks", "for", "the", "pointer", "casualjim", "After", "I", "upgrade", "to", "NUMBER", "and", "recompiled", "go", "swagger", "with", "that", "version", "it", "start", "work", "NUMBER", "Hum", "NUMBER", "After", "recompiling", "and", "run", "go", "build", "swagger", "generate", "spec", "in", "a", "fresh", "NUMBER", "golang", "container", "I", "still", "get", "the", "issue", "while", "the", "build", "succeeds", "NUMBER", "I", "m", "use", "Glide", "btw", "NUMBER", "Nevermind", "it", "must", "be", "a", "problem", "from", "somewhere", "else", "if", "it", "fix", "the", "issue", "for", "everybody", "It", "doesn", "t", "seems", "like", "it", "NUMBER", "The", "dependencies", "be", "directly", "in", "NUMBER", "vendor", "e", "NUMBER", "g", "NUMBER", "NUMBER", "vendor", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "I", "ll", "give", "a", "try", "to", "gvt", "NUMBER", "Dependency", "management", "be", "so", "annoying", "right", "now", "NUMBER", "I", "hope", "Go", "NUMBER", "will", "help", "with", "that", "NUMBER", "solher", "it", "may", "not", "be", "you", "NUMBER", "Try", "to", "clear", "out", "all", "your", "GO", "environment", "variables", "and", "set", "them", "to", "sane", "values", "NUMBER", "I", "had", "to", "mess", "around", "a", "lot", "to", "get", "go", "swagger", "to", "do", "vendoring", "correctly", "and", "I", "m", "not", "sure", "exactly", "what", "it", "was", "I", "did", "to", "make", "it", "work", "NUMBER", "I", "reset", "a", "lot", "of", "my", "env", "vars", "I", "install", "Go", "NUMBER", "and", "I", "recompiled", "both", "gvt", "and", "go", "swagger", "with", "the", "newer", "Go", "before", "go", "swagger", "worked", "NUMBER", "Try", "a", "few", "more", "things", "before", "you", "give", "up", "NUMBER", "I", "ve", "be", "use", "gvt", "and", "have", "be", "happy", "with", "it", "BTW", "NUMBER", "I", "had", "the", "same", "issue", "NUMBER", "It", "was", "fix", "after", "upgrading", "Go", "from", "NUMBER", "to", "NUMBER", "I", "m", "fail", "to", "find", "any", "examples", "of", "how", "to", "generate", "the", "following", "json", "securityDefinitions", "api_key", "type", "apiKey", "name", "api_key", "in", "header", "Any", "help", "would", "be", "appreciated", "thanks", "Okay", "thanks", "NUMBER", "IXES", "NUMBER", "Signed", "off", "by", "Mihail", "Stoykov", "M", "NUMBER", "Stoikov", "gmail", "NUMBER", "com", "I", "was", "wondering", "whether", "to", "not", "change", "swag", "NUMBER", "ToGoName", "to", "do", "what", "pascalize", "do", "but", "decided", "against", "on", "the", "account", "that", "there", "was", "probably", "a", "reason", "for", "it", "to", "not", "do", "it", "in", "the", "first", "place", "NUMBER", "The", "same", "as", "NUMBER", "but", "for", "the", "server", "generate", "code", "NUMBER", "I", "certainly", "won", "t", "need", "that", "feature", "in", "my", "current", "project", "NUMBER", "It", "s", "a", "good", "idea", "and", "I", "like", "it", "NUMBER", "But", "it", "could", "be", "optional", "I", "suppose", "NUMBER", "Maybe", "change", "the", "behavior", "in", "such", "a", "way", "that", "I", "could", "give", "nil", "instead", "of", "the", "spec", "and", "still", "have", "a", "way", "to", "provide", "whatever", "else", "it", "gets", "from", "it", "NUMBER", "Fixes", "NUMBER", "This", "be", "a", "very", "basic", "implementation", "of", "template", "overriding", "NUMBER", "It", "will", "scan", "the", "directory", "provide", "and", "if", "there", "be", "a", "file", "matching", "an", "exist", "template", "it", "will", "replace", "it", "with", "that", "NUMBER", "I", "had", "a", "look", "at", "make", "it", "a", "bit", "more", "customizable", "in", "terms", "of", "add", "template", "that", "don", "t", "exist", "etc", "NUMBER", "It", "would", "be", "nice", "to", "be", "able", "to", "not", "just", "overwrite", "the", "builtin", "template", "but", "also", "extend", "without", "having", "to", "use", "the", "exact", "directory", "structure", "NUMBER", "If", "I", "get", "some", "time", "on", "the", "weekend", "I", "will", "have", "a", "look", "again", "and", "see", "if", "I", "can", "get", "something", "a", "bit", "more", "robust", "work", "NUMBER", "Fixes", "NUMBER", "I", "really", "messed", "up", "this", "PR", "sorry", "while", "I", "try", "to", "fix", "it", "Okay", "looking", "better", "now", "Using", "the", "following", "swagger", "NUMBER", "yml", "yml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "delete", "body", "api", "paths", "path", "delete", "consumes", "application", "json", "produces", "application", "json", "summary", "Delete", "an", "object", "parameters", "name", "body", "in", "body", "description", "this", "argument", "be", "an", "object", "with", "a", "string", "key", "required", "true", "schema", "type", "object", "properties", "name", "type", "string", "responses", "NUMBER", "description", "All", "be", "good", "You", "can", "successfully", "validate", "generate", "and", "run", "a", "server", "NUMBER", "That", "said", "when", "trying", "to", "make", "a", "request", "curl", "H", "Content", "Type", "application", "json", "X", "DELETE", "d", "LINK", "You", "get", "a", "runtime", "exception", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "http", "panic", "serving", "NUMBER", "NUMBER", "runtime", "error", "invalid", "memory", "address", "or", "nil", "pointer", "dereference", "goroutine", "NUMBER", "run", "net", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "func", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "bda", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "usr", "local", "Cellar", "go", "NUMBER", "libexec", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "xb", "NUMBER", "github", "NUMBER", "com", "Clever", "swagger", "test", "restapi", "operations", "NUMBER", "DeletePathParams", "NUMBER", "BindRequest", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "templaedhel", "go", "src", "github", "NUMBER", "com", "Clever", "swagger", "test", "restapi", "operations", "delete_path_parameters", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "NUMBER", "Context", "NUMBER", "BindValidRequest", "NUMBER", "xc", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "bdc", "NUMBER", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "Users", "templaedhel", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "context", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "Clever", "swagger", "test", "restapi", "operations", "NUMBER", "DeletePath", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "bdc", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "Users", "templaedhel", "go", "src", "github", "NUMBER", "com", "Clever", "swagger", "test", "restapi", "operations", "delete_path", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "NUMBER", "newOperationExecutor", "NUMBER", "func", "NUMBER", "NUMBER", "x", "NUMBER", "bdc", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "Users", "templaedhel", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "operation", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "bdc", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "usr", "local", "Cellar", "go", "NUMBER", "libexec", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "NUMBER", "newRouter", "NUMBER", "func", "NUMBER", "NUMBER", "x", "NUMBER", "bdc", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "Users", "templaedhel", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "router", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "NUMBER", "x", "NUMBER", "bdc", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "usr", "local", "Cellar", "go", "NUMBER", "libexec", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "NUMBER", "specMiddleware", "NUMBER", "func", "NUMBER", "NUMBER", "x", "NUMBER", "bdc", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "Users", "templaedhel", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "spec", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "net", "http", "NUMBER", "HandlerFunc", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "af", "NUMBER", "c", "NUMBER", "NUMBER", "x", "NUMBER", "bdc", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "usr", "local", "Cellar", "go", "NUMBER", "libexec", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "a", "net", "http", "NUMBER", "serverHandler", "NUMBER", "ServeHTTP", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "bdc", "NUMBER", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "b", "NUMBER", "NUMBER", "xc", "NUMBER", "a", "NUMBER", "usr", "local", "Cellar", "go", "NUMBER", "libexec", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "e", "net", "http", "NUMBER", "conn", "NUMBER", "serve", "NUMBER", "xc", "NUMBER", "e", "NUMBER", "usr", "local", "Cellar", "go", "NUMBER", "libexec", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "xbee", "created", "by", "net", "http", "NUMBER", "Server", "NUMBER", "Serve", "usr", "local", "Cellar", "go", "NUMBER", "libexec", "src", "net", "http", "server", "NUMBER", "go", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "As", "I", "see", "it", "there", "be", "a", "few", "possibilities", "here", "NUMBER", "Fix", "the", "code", "cause", "the", "runtime", "exception", "NUMBER", "My", "understanding", "be", "that", "should", "be", "as", "simple", "as", "add", "delete", "here", "LINK", "swagger", "go", "swagger", "blob", "master", "httpkit", "request", "NUMBER", "go", "L", "NUMBER", "NUMBER", "Decide", "that", "we", "don", "t", "want", "to", "support", "DELETEs", "with", "bodies", "NUMBER", "Generally", "you", "shouldn", "t", "be", "sending", "bodies", "with", "REST", "APIs", "_but_", "it", "isn", "t", "forbidden", "in", "HTTP", "NUMBER", "LINK", "section", "NUMBER", "If", "this", "be", "the", "case", "it", "should", "probably", "fail", "validation", "NUMBER", "Happy", "to", "submit", "a", "PR", "but", "would", "like", "to", "hear", "thoughts", "on", "which", "approach", "we", "want", "to", "take", "here", "NUMBER", "This", "appears", "to", "fix", "NUMBER", "Should", "probably", "add", "some", "test", "but", "I", "haven", "t", "looked", "into", "them", "in", "depth", "yet", "NUMBER", "This", "causes", "a", "regression", "on", "NUMBER", "which", "makes", "sense", "since", "the", "example", "in", "that", "issue", "be", "type", "string", "and", "as", "per", "the", "change", "here", "non", "complex", "objects", "won", "t", "get", "validated", "NUMBER", "One", "thing", "I", "m", "still", "trying", "to", "figure", "out", "how", "to", "do", "be", "check", "the", "type", "of", "array", "items", "since", "currently", "this", "fail", "if", "you", "do", "yml", "type", "array", "items", "type", "object", "since", "NUMBER", "Validate", "be", "call", "on", "each", "of", "the", "items", "in", "the", "array", "NUMBER", "The", "following", "swagger", "NUMBER", "yml", "creates", "invalid", "server", "code", "when", "use", "swagger", "generate", "server", "NUMBER", "From", "what", "I", "can", "tell", "this", "be", "a", "valid", "spec", "according", "to", "the", "swagger", "spec", "and", "test", "use", "both", "the", "online", "swagger", "editor", "viewer", "as", "well", "as", "the", "provide", "go", "swagger", "validate", "command", "NUMBER", "yml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "string", "body", "api", "paths", "echo", "post", "summary", "Post", "a", "string", "get", "the", "same", "string", "back", "NUMBER", "parameters", "name", "body", "in", "body", "description", "this", "argument", "be", "a", "string", "schema", "type", "string", "responses", "NUMBER", "description", "this", "return", "value", "be", "a", "string", "schema", "type", "string", "When", "run", "the", "generate", "code", "no", "change", "the", "following", "error", "occur", "go", "run", "cmd", "string", "body", "server", "NUMBER", "go", "NUMBER", "restapi", "operations", "restapi", "operations", "post_echo_parameters", "NUMBER", "go", "NUMBER", "body", "NUMBER", "Validate", "undefined", "type", "string", "has", "no", "field", "or", "method", "Validate", "Looking", "at", "that", "file", "the", "error", "becomes", "apparent", "go", "var", "body", "string", "if", "err", "route", "NUMBER", "Consumer", "NUMBER", "Consume", "r", "NUMBER", "Body", "body", "err", "nil", "res", "append", "res", "error", "NUMBER", "NewParseError", "body", "body", "err", "else", "if", "err", "body", "NUMBER", "Validate", "route", "NUMBER", "Formats", "err", "nil", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "x", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "General", "Comment", "TAG", "TAG", "TAG", "TAG", "TAG", "shipit", "TAG", "TAG", "TAG", "thanks", "NUMBER", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "TAG", "TAG", "Before", "operations", "without", "a", "Tag", "field", "in", "their", "spec", "would", "generate", "incorrect", "imports", "PROJECT", "restapi", "operations", "operations", "instead", "of", "PROJECT", "restapi", "operations", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "TAG", "TAG", "Added", "possibility", "for", "custom", "command", "line", "option", "parsing", "as", "agreed", "upon", "in", "NUMBER", "Closes", "NUMBER", "Signed", "off", "by", "Tobias", "Theobald", "tobitheo", "gmail", "NUMBER", "com", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "TAG", "TAG", "If", "I", "be", "correct", "there", "be", "currently", "no", "way", "to", "add", "custom", "command", "line", "options", "to", "the", "generate", "server", "code", "without", "modifying", "the", "ephemeral", "main", "NUMBER", "go", "NUMBER", "The", "go", "flags", "package", "seems", "to", "conflict", "with", "the", "flag", "package", "both", "package", "fail", "upon", "finding", "unknown", "flags", "and", "unlike", "the", "flag", "package", "go", "flags", "be", "object", "oriented", "so", "we", "can", "not", "simply", "define", "the", "necessary", "flags", "in", "every", "file", "s", "init", "function", "as", "could", "be", "do", "with", "the", "build", "in", "flag", "package", "NUMBER", "As", "go", "flags", "however", "be", "IMHO", "and", "apparently", "also", "in", "the", "authors", "much", "nicer", "than", "the", "builtin", "package", "I", "propose", "the", "following", "solution", "to", "integrate", "user", "defined", "flags", "with", "the", "generate", "parsing", "step", "NUMBER", "Solution", "sketch", "xxx_api", "NUMBER", "go", "Add", "a", "map", "string", "interface", "to", "the", "XxxAPI", "struct", "configure_xxx", "NUMBER", "go", "configureAPI", "NUMBER", "Add", "an", "example", "on", "how", "to", "populate", "the", "map", "with", "own", "flag", "group", "main", "NUMBER", "go", "Call", "configureAPI", "before", "parser", "NUMBER", "Parse", "but", "after", "creating", "parser", "NUMBER", "After", "calling", "configureAPI", "iterate", "over", "flags", "map", "from", "api", "object", "and", "call", "parser", "NUMBER", "AddGroup", "key", "value", "for", "each", "key", "value", "pair", "NUMBER", "What", "do", "you", "think", "The", "only", "downside", "I", "currently", "see", "be", "that", "iterating", "over", "a", "map", "be", "unordered", "and", "so", "might", "result", "in", "help", "texts", "with", "differing", "order", "with", "each", "execution", "NUMBER", "I", "be", "currently", "work", "on", "a", "pull", "request", "NUMBER", "The", "problem", "I", "see", "with", "that", "be", "that", "a", "interface", "slice", "only", "takes", "the", "object", "but", "go", "parser", "also", "wants", "a", "description", "short", "appears", "to", "suffice", "NUMBER", "I", "think", "add", "an", "extra", "type", "for", "that", "might", "help", "type", "CommandLineOptionsGroup", "struct", "ShortDescription", "string", "LongDescription", "string", "Options", "interface", "How", "do", "that", "sound", "Where", "would", "you", "recommend", "putting", "such", "a", "type", "Make", "consistent", "to", "strfmt", "NUMBER", "Duration", "type", "NUMBER", "Closes", "NUMBER", "Signed", "off", "by", "Aleksandr", "Vinokurov", "aleksandr", "NUMBER", "vin", "gmail", "NUMBER", "com", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "x", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "General", "Comment", "TAG", "TAG", "TAG", "TAG", "TAG", "After", "add", "miss", "fix", "to", "test", "all", "seems", "to", "be", "ok", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "TAG", "TAG", "After", "add", "miss", "fix", "to", "test", "all", "seems", "to", "be", "ok", "Fixes", "NUMBER", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "General", "Comment", "TAG", "TAG", "TAG", "TAG", "TAG", "shipit", "TAG", "TAG", "TAG", "NUMBER", "Thanks", "a", "lot", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "TAG", "TAG", "Signed", "off", "by", "Mihail", "Stoykov", "M", "NUMBER", "Stoikov", "gmail", "NUMBER", "com", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "General", "Comment", "TAG", "TAG", "TAG", "TAG", "TAG", "shipit", "TAG", "TAG", "TAG", "Thanks", "a", "lot", "NUMBER", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "TAG", "TAG", "Added", "a", "shutdown", "hook", "in", "main", "NUMBER", "It", "can", "be", "assigned", "to", "the", "newly", "created", "variable", "in", "the", "xxxAPI", "struct", "during", "configuration", "NUMBER", "The", "parameter", "be", "preinitialized", "for", "backwards", "compatibility", "comaptibility", "reasons", "NUMBER", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "General", "Comment", "TAG", "TAG", "TAG", "TAG", "TAG", "Forgot", "sign", "off", "by", "message", "TAG", "TAG", "TAG", "shipit", "TAG", "TAG", "TAG", "thanks", "for", "this", "cleaner", "solution", "I", "had", "in", "mind", "NUMBER", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "nbsp", "TAG", "TAG", "TAG", "TAG", "TAG", "Forgot", "sign", "off", "by", "message", "I", "see", "the", "api", "NUMBER", "ServerShutdown", "method", "hook", "in", "the", "generate", "struct", "but", "how", "be", "it", "invoked", "what", "invokes", "this", "method", "Pending", "investigation", "how", "to", "configure", "the", "Stop", "Process", "button", "in", "the", "IntelliJ", "IDE", "NUMBER", "According", "to", "customer", "support", "it", "be", "only", "support", "for", "the", "JVM", "and", "would", "need", "to", "be", "add", "by", "the", "Golang", "plugin", "for", "Golang", "processes", "NUMBER", "I", "ve", "be", "trying", "to", "generate", "code", "for", "our", "swaggerfile", "but", "the", "generator", "appears", "to", "be", "crash", "NUMBER", "LINK", "api", "NUMBER", "snippets", "evzijst", "NUMBER", "nyR", "a", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "e", "NUMBER", "cbd", "NUMBER", "ec", "NUMBER", "ef", "NUMBER", "file", "swagger", "NUMBER", "json", "be", "the", "swaggerfile", "and", "this", "be", "the", "output", "swagger", "generate", "client", "f", "swagger", "NUMBER", "json", "bitbucket", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "build", "a", "plan", "for", "generation", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "definitions", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "operations", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "grouping", "operations", "into", "package", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "planning", "meta", "data", "and", "facades", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "paginated_issue_attachments", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "paginated_issues", "template", "docstring", "NUMBER", "NUMBER", "executing", "docstring", "at", "TAG", "nil", "pointer", "evaluating", "generator", "NUMBER", "GenSchema", "NUMBER", "Title", "The", "swaggerfile", "be", "valid", "according", "to", "this", "tool", "NUMBER", "Thanks", "Right", "now", "our", "swagger", "support", "be", "undergoing", "quite", "a", "few", "change", "so", "I", "ll", "hold", "off", "on", "submit", "update", "to", "our", "swaggerfile", "for", "a", "bit", "NUMBER", "When", "it", "starts", "to", "stabilize", "we", "ll", "get", "an", "update", "swaggerfile", "submitted", "NUMBER", "I", "expect", "that", "the", "following", "spec", "json", "consumes", "application", "json", "application", "x", "www", "form", "urlencoded", "paths", "test", "get", "parameters", "allowEmptyValue", "false", "in", "query", "name", "testingThis", "required", "false", "type", "integer", "responses", "NUMBER", "description", "Success", "message", "produces", "application", "json", "application", "json", "charset", "utf", "NUMBER", "swagger", "NUMBER", "means", "that", "I", "can", "send", "a", "request", "without", "the", "query", "param", "testingThis", "NUMBER", "The", "relevant", "generate", "code", "below", "will", "always", "set", "the", "param", "go", "qrTestingThis", "o", "NUMBER", "TestingThis", "qTestingThis", "swag", "NUMBER", "FormatInt", "NUMBER", "qrTestingThis", "if", "qTestingThis", "if", "err", "r", "NUMBER", "SetQueryParam", "testingThis", "qTestingThis", "err", "nil", "return", "err", "The", "qTestingThis", "be", "always", "true", "and", "the", "whole", "check", "can", "be", "omitted", "in", "this", "case", "NUMBER", "I", "don", "t", "know", "how", "to", "implement", "this", "without", "breaking", "backwards", "compatibility", "with", "previously", "generate", "code", "NUMBER", "Breaking", "compatibility", "proposition", "If", "all", "the", "field", "that", "be", "not", "required", "be", "actually", "pointers", "to", "the", "values", "a", "pointer", "of", "nil", "can", "mean", "that", "they", "be", "not", "set", "NUMBER", "This", "will", "definitely", "break", "code", "that", "use", "direct", "field", "setting", "of", "the", "param", "struct", "go", "GetTestingParams", "TestingThis", "NUMBER", "instead", "of", "the", "function", "NUMBER", "p", "NUMBER", "s", "NUMBER", "My", "workaround", "especially", "because", "I", "never", "actually", "set", "the", "field", "be", "to", "change", "it", "s", "type", "to", "string", "before", "generating", "the", "code", "NUMBER", "Thank", "you", "NUMBER", "If", "a", "parameter", "has", "a", "format", "the", "generate", "code", "will", "not", "compile", "Examples", "json", "consumes", "application", "json", "application", "x", "www", "form", "urlencoded", "paths", "test", "put", "parameters", "format", "date", "in", "formData", "name", "testingThis", "type", "string", "responses", "NUMBER", "description", "Success", "message", "produces", "application", "json", "application", "json", "charset", "utf", "NUMBER", "swagger", "NUMBER", "And", "some", "console", "output", "shell", "swagger", "generate", "client", "f", "testapi", "NUMBER", "json", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "parameters", "template", "operations", "NUMBER", "PutTestingParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "responses", "template", "operations", "NUMBER", "PutTestingResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "operation", "group", "client", "template", "operations", "NUMBER", "OperationsClient", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "embedded", "swagger", "JSON", "template", "client", "NUMBER", "SwaggerClient", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "facade", "template", "client", "NUMBER", "SwaggerClient", "cd", "client", "go", "build", "operations", "put_testing_parameters", "NUMBER", "go", "NUMBER", "invalid", "operation", "fTestingThis", "mismatched", "types", "strfmt", "NUMBER", "Date", "and", "string", "operations", "put_testing_parameters", "NUMBER", "go", "NUMBER", "cannot", "use", "fTestingThis", "type", "strfmt", "NUMBER", "Date", "as", "type", "string", "in", "argument", "to", "r", "NUMBER", "SetFormParam", "This", "was", "find", "with", "a", "parameter", "of", "an", "array", "type", "with", "elements", "which", "had", "format", "json", "consumes", "application", "json", "application", "x", "www", "form", "urlencoded", "paths", "test", "put", "parameters", "in", "formData", "items", "format", "date", "type", "string", "name", "testingThis", "type", "array", "responses", "NUMBER", "description", "Success", "message", "produces", "application", "json", "application", "json", "charset", "utf", "NUMBER", "swagger", "NUMBER", "Which", "do", "not", "compile", "with", "a", "similar", "error", "shell", "swagger", "generate", "client", "f", "testapiarray", "NUMBER", "json", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "parameters", "template", "operations", "NUMBER", "PutTestingParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "responses", "template", "operations", "NUMBER", "PutTestingResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "operation", "group", "client", "template", "operations", "NUMBER", "OperationsClient", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "embedded", "swagger", "JSON", "template", "client", "NUMBER", "SwaggerClient", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "facade", "template", "client", "NUMBER", "SwaggerClient", "cd", "client", "go", "build", "operations", "put_testing_parameters", "NUMBER", "go", "NUMBER", "cannot", "use", "valuesTestingThis", "type", "strfmt", "NUMBER", "Date", "as", "type", "string", "in", "argument", "to", "swag", "NUMBER", "JoinByFormat", "And", "final", "example", "If", "the", "type", "of", "the", "items", "be", "referenced", "json", "consumes", "application", "json", "application", "x", "www", "form", "urlencoded", "definitions", "testType", "format", "date", "type", "string", "paths", "test", "put", "parameters", "in", "formData", "items", "ref", "definitions", "testType", "name", "testingThis", "type", "array", "responses", "NUMBER", "description", "Success", "message", "produces", "application", "json", "application", "json", "charset", "utf", "NUMBER", "swagger", "NUMBER", "Which", "results", "in", "shell", "swagger", "generate", "client", "f", "testapi", "NUMBER", "json", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "testType", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "testType", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "parameters", "template", "operations", "NUMBER", "PutTestingParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "put_testing_parameters", "NUMBER", "go", "NUMBER", "NUMBER", "expected", "type", "find", "newline", "and", "NUMBER", "more", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "responses", "template", "operations", "NUMBER", "PutTestingResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "operation", "group", "client", "template", "operations", "NUMBER", "OperationsClient", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "embedded", "swagger", "JSON", "template", "client", "NUMBER", "SwaggerClient", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "client", "facade", "template", "client", "NUMBER", "SwaggerClient", "cd", "client", "go", "build", "operations", "put_testing_parameters", "NUMBER", "go", "NUMBER", "syntax", "error", "unexpect", "semicolon", "or", "newline", "operations", "put_testing_parameters", "NUMBER", "go", "NUMBER", "syntax", "error", "unexpect", "operations", "put_testing_parameters", "NUMBER", "go", "NUMBER", "non", "declaration", "statement", "outside", "function", "body", "operations", "put_testing_parameters", "NUMBER", "go", "NUMBER", "syntax", "error", "unexpect", "casualjim", "the", "NUMBER", "example", "was", "my", "try", "at", "work", "around", "the", "problem", "NUMBER", "It", "looked", "valid", "from", "the", "specification", "LINK", "but", "I", "be", "only", "reading", "trough", "it", "for", "the", "second", "time", "On", "the", "question", "of", "the", "bug", "I", "agree", "that", "the", "fix", "fix", "the", "showed", "problem", "above", "but", "I", "it", "doesn", "t", "work", "for", "all", "possible", "formats", "for", "example", "it", "doesn", "t", "work", "with", "hostname", "NUMBER", "In", "the", "generate", "unmarshalPricingComponent", "function", "the", "case", "statement", "be", "use", "uppercased", "names", "for", "the", "type", "property", "when", "in", "the", "definition", "I", "ve", "defined", "them", "as", "lower", "case", "NUMBER", "Definition", "flatPricingComponent", "allOf", "ref", "definitions", "PricingComponent", "type", "object", "properties", "generate", "unmarshal", "code", "func", "unmarshalPricingComponent", "data", "byte", "consumer", "httpkit", "NUMBER", "Consumer", "PricingComponent", "error", "buf", "bytes", "NUMBER", "NewBuffer", "data", "the", "first", "time", "this", "be", "read", "be", "to", "fetch", "the", "value", "of", "the", "type", "property", "NUMBER", "var", "getType", "struct", "Type", "string", "json", "type", "if", "err", "consumer", "NUMBER", "Consume", "buf", "getType", "err", "nil", "return", "nil", "err", "if", "err", "validate", "NUMBER", "RequiredString", "type", "body", "getType", "NUMBER", "Type", "err", "nil", "return", "nil", "err", "The", "value", "of", "type", "be", "use", "to", "determine", "which", "type", "to", "create", "and", "unmarshal", "the", "data", "into", "switch", "getType", "NUMBER", "Type", "case", "FlatPricingComponent", "var", "result", "FlatPricingComponent", "if", "err", "consumer", "NUMBER", "Consume", "buf", "result", "err", "nil", "return", "nil", "err", "return", "result", "nil", "case", "TieredPricingComponent", "var", "result", "TieredPricingComponent", "if", "err", "consumer", "NUMBER", "Consume", "buf", "result", "err", "nil", "return", "nil", "err", "return", "result", "nil", "case", "TieredVolumePricingComponent", "var", "result", "TieredVolumePricingComponent", "if", "err", "consumer", "NUMBER", "Consume", "buf", "result", "err", "nil", "return", "nil", "err", "return", "result", "nil", "return", "nil", "error", "NUMBER", "New", "NUMBER", "invalid", "type", "value", "q", "getType", "NUMBER", "Type", "Ex", "case", "FlatPricingComponent", "should", "be", "case", "flatPricingComponent", "Rebuilding", "after", "deleting", "my", "models", "client", "directories", "fix", "it", "NUMBER", "models", "flat_pricing_component", "NUMBER", "go", "NUMBER", "m", "NUMBER", "priceExplanation", "undefined", "type", "FlatPricingComponent", "has", "no", "field", "or", "method", "priceExplanation", "but", "do", "have", "PriceExplanation", "type", "FlatPricingComponent", "struct", "NUMBER", "priceExplanationField", "string", "NUMBER", "Validator", "method", "be", "miss", "the", "Field", "at", "the", "end", "of", "the", "field", "it", "s", "referencing", "func", "m", "FlatPricingComponent", "validatePriceExplanation", "formats", "strfmt", "NUMBER", "Registry", "error", "for", "i", "NUMBER", "i", "TAG", "NUMBER", "req", "NUMBER", "Header", "NUMBER", "Set", "Authorization", "fmt", "NUMBER", "Sprintf", "Bearer", "s", "r", "NUMBER", "AccessToken", "resp", "err", "client", "NUMBER", "Do", "req", "NUMBER", "WithContext", "ctx", "If", "we", "get", "an", "error", "and", "the", "context", "has", "be", "canceled", "the", "context", "s", "error", "be", "probably", "more", "useful", "NUMBER", "if", "err", "nil", "select", "case", "TAG", "_parameters", "NUMBER", "go", "query", "param", "role", "NUMBER", "var", "qrRole", "NUMBER", "string", "if", "o", "NUMBER", "Role", "NUMBER", "nil", "qrRole", "NUMBER", "o", "NUMBER", "Role", "NUMBER", "qRole", "NUMBER", "qrRole", "NUMBER", "if", "err", "r", "NUMBER", "SetQueryParam", "role", "NUMBER", "qRole", "NUMBER", "err", "nil", "return", "err", "Reason", "this", "be", "useful", "some", "servers", "will", "break", "if", "you", "send", "up", "a", "param", "without", "a", "value", "because", "they", "do", "validation", "on", "the", "value", "NUMBER", "today", "as", "it", "be", "implement", "it", "will", "_always_", "send", "the", "query", "param", "up", "NUMBER", "we", "d", "rather", "not", "send", "it", "if", "it", "be", "null", "NUMBER", "Looks", "like", "the", "relevant", "generator", "code", "be", "go", "swagger", "generator", "template", "client", "parameter", "NUMBER", "gotmpl", "if", "NUMBER", "IsQueryParam", "query", "param", "NUMBER", "Name", "if", "NUMBER", "IsNullable", "var", "qr", "pascalize", "NUMBER", "Name", "NUMBER", "GoType", "if", "NUMBER", "ValueExpression", "nil", "qr", "pascalize", "NUMBER", "Name", "NUMBER", "ValueExpression", "else", "qr", "pascalize", "NUMBER", "Name", "NUMBER", "ValueExpression", "end", "q", "pascalize", "NUMBER", "Name", "if", "NUMBER", "Formatter", "NUMBER", "Formatter", "qr", "pascalize", "NUMBER", "Name", "else", "qr", "pascalize", "NUMBER", "Name", "end", "if", "not", "NUMBER", "AllowEmptyValue", "if", "q", "pascalize", "NUMBER", "Name", "end", "if", "err", "r", "NUMBER", "SetQueryParam", "printf", "q", "NUMBER", "Name", "q", "pascalize", "NUMBER", "Name", "err", "nil", "return", "err", "if", "not", "NUMBER", "AllowEmptyValue", "end", "Fixed", "code", "for", "my", "query", "param", "username", "NUMBER", "in", "the", "TAG", "_parameters", "NUMBER", "go", "generate", "code", "query", "param", "username", "NUMBER", "var", "qrUsername", "NUMBER", "string", "if", "o", "NUMBER", "Username", "NUMBER", "nil", "qrUsername", "NUMBER", "o", "NUMBER", "Username", "NUMBER", "qUsername", "NUMBER", "qrUsername", "NUMBER", "if", "o", "NUMBER", "Username", "NUMBER", "nil", "if", "err", "r", "NUMBER", "SetQueryParam", "username", "NUMBER", "qUsername", "NUMBER", "err", "nil", "return", "err", "Thanks", "Here", "the", "value", "of", "allowEmptyValue", "be", "true", "NUMBER", "New", "response", "objects", "should", "be", "created", "with", "NewXXXX", "function", "call", "instead", "of", "XXXX", "struct", "instantiation", "NUMBER", "Then", "default", "values", "for", "headers", "will", "be", "pre", "filled", "NUMBER", "Signed", "off", "by", "Aleksandr", "Vinokurov", "aleksandr", "NUMBER", "vin", "gmail", "NUMBER", "com", "replaced", "some", "hardcoded", "to", "Listseparator", "and", "change", "some", "filepath", "to", "path", "slash", "path", "I", "m", "get", "error", "attempting", "to", "go", "get", "the", "project", "after", "a", "recent", "change", "possibly", "relate", "to", "divan", "num", "NUMBER", "words", "NUMBER", "I", "test", "in", "a", "Docker", "container", "to", "ensure", "I", "was", "work", "with", "a", "clean", "environment", "NUMBER", "Here", "be", "my", "test", "when", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "root", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "go", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "cd", "NUMBER", "git", "git", "dir", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "git", "submodule", "update", "init", "recursive", "No", "submodule", "mapping", "find", "in", "NUMBER", "gitmodules", "for", "path", "vendor", "github", "NUMBER", "com", "divan", "num", "NUMBER", "words", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "exit", "status", "NUMBER", "Here", "be", "my", "test", "when", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "root", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "go", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "smartystreets", "assertions", "imports", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "oglematchers", "use", "of", "internal", "package", "not", "allow", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "oglemock", "createmock", "imports", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "oglemock", "generate", "use", "of", "internal", "package", "not", "allow", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "oglemock", "generate", "test_cases", "imports", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "oglemock", "use", "of", "internal", "package", "not", "allow", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "oglemock", "generate", "test_cases", "imports", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "oglemock", "generate", "test_cases", "complicated_pkg", "use", "of", "internal", "package", "not", "allow", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "oglemock", "generate", "test_cases", "imports", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "oglemock", "generate", "test_cases", "renamed_pkg", "use", "of", "internal", "package", "not", "allow", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "ogletest", "imports", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "ogletest", "srcutil", "use", "of", "internal", "package", "not", "allow", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "ogletest", "imports", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "reqtrace", "use", "of", "internal", "package", "not", "allow", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "ogletest", "test_cases", "imports", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "ogletest", "use", "of", "internal", "package", "not", "allow", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "vendor", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "ogletest", "test_cases", "imports", "github", "NUMBER", "com", "smartystreets", "assertions", "internal", "ogletest", "test_cases", "mock_image", "use", "of", "internal", "package", "not", "allow", "Is", "num", "NUMBER", "words", "even", "use", "I", "think", "it", "was", "considered", "for", "when", "you", "have", "json", "keys", "that", "start", "with", "a", "number", "NUMBER", "it", "be", "much", "simpler", "to", "have", "that", "code", "into", "N", "NUMBER", "x", "NUMBER", "for", "instance", "vs", "sixteenxsixteen", "because", "it", "be", "actually", "hard", "to", "read", "typed", "out", "words", "NUMBER", "hahah", "indeed", "On", "Sat", "Dec", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Ivan", "Porto", "Carrero", "TAG", "write", "yeah", "you", "re", "right", "NUMBER", "I", "ll", "remove", "it", "again", "forgot", "I", "went", "with", "Nr", "instead", "NUMBER", "I", "wanted", "to", "translate", "things", "like", "NUMBER", "x", "NUMBER", "to", "SixteenBySixteen", "and", "NUMBER", "NUMBER", "to", "SixteenAndSixteen", "but", "decided", "too", "much", "clever", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "issuecomment", "NUMBER", "NUMBER", "Jonathan", "Hi", "casualjim", "casualjim", "Do", "we", "have", "any", "plan", "for", "publishing", "a", "formal", "stable", "release", "of", "Go", "Swagger", "project", "In", "the", "readme", "I", "saw", "This", "API", "be", "not", "stable", "yet", "when", "it", "be", "stable", "it", "will", "be", "distributed", "over", "gopkg", "NUMBER", "in", "but", "I", "cannot", "find", "what", "s", "the", "exact", "date", "for", "the", "stable", "release", "in", "the", "readme", "NUMBER", "Any", "comment", "be", "appreciated", "Thank", "you", "NUMBER", "Thanks", "Xiaofei", "If", "the", "type", "of", "schema", "in", "parameters", "attribute", "be", "object", "the", "validation", "will", "throw", "error", "saying", "panic", "validation", "failure", "list", "requestBody", "in", "body", "must", "be", "of", "type", "object", "string", "sample", "swagger", "folders", "post", "parameters", "name", "requestBody", "in", "body", "description", "body", "parameter", "required", "true", "schema", "type", "object", "title", "body", "of", "creating", "folder", "description", "body", "parameter", "of", "creating", "folder", "default", "name", "new", "parent", "id", "NUMBER", "required", "name", "parent", "properties", "name", "type", "object", "parent", "ref", "definitions", "parent", "readOnly", "false", "externalDocs", "description", "create", "a", "new", "folder", "NUMBER", "url", "LINK", "content", "NUMBER", "readme", "NUMBER", "io", "create", "a", "new", "folder", "example", "name", "newname", "NUMBER", "jpg", "parent", "id", "NUMBER", "NUMBER", "If", "I", "change", "the", "Type", "value", "from", "object", "to", "string", "the", "validation", "will", "be", "OK", "NUMBER", "The", "specific", "path", "be", "folders", "post", "parameters", "schema", "type", "the", "sample", "be", "attached", "NUMBER", "Actually", "the", "value", "object", "be", "valid", "in", "swagger", "NUMBER", "doc", "and", "the", "validation", "should", "be", "pass", "NUMBER", "Hope", "this", "can", "be", "fix", "NUMBER", "Thanks", "Xiaofei", "petstore", "NUMBER", "txt", "LINK", "swagger", "go", "swagger", "file", "NUMBER", "petstore", "NUMBER", "txt", "Code", "to", "unmarshal", "a", "generic", "type", "exists", "when", "the", "generic", "type", "of", "a", "normal", "property", "of", "a", "model", "NUMBER", "However", "if", "a", "property", "be", "an", "array", "of", "a", "generic", "type", "than", "the", "code", "doesn", "t", "handle", "unmarshalling", "the", "generic", "type", "NUMBER", "Example", "if", "PricingComponent", "be", "generic", "than", "this", "will", "generate", "code", "to", "unmarshal", "the", "property", "pricingComponent", "on", "the", "model", "it", "s", "properties", "pricingComponent", "ref", "definitions", "PricingComponent", "This", "doesn", "t", "generate", "any", "code", "to", "unmarshal", "the", "pricingComponents", "property", "NUMBER", "properties", "pricingComponents", "type", "array", "items", "ref", "definitions", "PricingComponent", "It", "never", "calls", "the", "generic", "unmarshal", "function", "which", "switches", "on", "the", "dispatch", "property", "in", "the", "case", "of", "the", "array", "of", "PricingComponent", "s", "NUMBER", "You", "re", "correct", "each", "implementation", "has", "it", "s", "own", "MarshalJSON", "UnmarshalJSON", "implementation", "but", "the", "function", "which", "calls", "those", "never", "gets", "run", "in", "the", "case", "of", "an", "array", "NUMBER", "Here", "s", "an", "example", "of", "the", "generate", "code", "for", "those", "with", "the", "extra", "properties", "sorry", "get", "lazy", "LINK", "No", "array", "LINK", "file", "product_rate_plan_no_array", "go", "L", "NUMBER", "Causes", "this", "to", "get", "generate", "LINK", "file", "product_rate_plan_no_array", "go", "L", "NUMBER", "L", "NUMBER", "An", "array", "LINK", "file", "product_rate_plan_with_array", "go", "L", "NUMBER", "Causes", "no", "custom", "MarshalJSON", "or", "UnmarshalJSON", "to", "get", "generate", "for", "the", "ProductRatePlan", "object", "at", "all", "NUMBER", "The", "validation", "feature", "do", "not", "support", "to", "validate", "the", "reference", "NUMBER", "In", "the", "ref", "element", "incorrect", "referenct", "LINK", "NUMBER", "eb", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "ba", "NUMBER", "d", "NUMBER", "d", "NUMBER", "f", "NUMBER", "be", "NUMBER", "png", "I", "input", "an", "incorrect", "value", "the", "validation", "can", "still", "pass", "NUMBER", "Actually", "it", "should", "throw", "error", "and", "report", "NUMBER", "Although", "there", "be", "a", "ticket", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "but", "that", "one", "be", "just", "an", "enhancement", "not", "a", "bug", "ticket", "NUMBER", "I", "believe", "this", "be", "a", "validation", "bug", "and", "we", "should", "fix", "it", "NUMBER", "Thanks", "Xiaofei", "Also", "I", "notice", "that", "validator", "treats", "references", "as", "validation", "error", "NUMBER", "For", "instance", "let", "s", "put", "a", "reference", "to", "parameter", "list", "foo", "get", "summary", "Some", "endpoint", "parameters", "name", "some_id", "in", "query", "description", "some", "ID", "required", "true", "type", "integer", "ref", "parameters", "some_shared_param", "Validator", "output", "for", "such", "case", "be", "paths", "NUMBER", "foo", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "ref", "in", "body", "be", "a", "forbidden", "property", "paths", "NUMBER", "foo", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "name", "in", "body", "be", "required", "paths", "NUMBER", "foo", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "in", "in", "body", "be", "required", "paths", "NUMBER", "foo", "NUMBER", "get", "NUMBER", "parameters", "NUMBER", "type", "in", "body", "be", "required", "As", "specification", "says", "use", "references", "in", "parameter", "list", "be", "valid", "LINK", "operationObject", "parameters", "be", "expected", "to", "hold", "an", "array", "Parameter", "Object", "Reference", "Object", "Is", "there", "any", "plan", "to", "fix", "Perhaps", "I", "overlooked", "something", "I", "thought", "that", "it", "looks", "similar", "because", "of", "the", "same", "reason", "incorrect", "processing", "of", "ref", "Let", "me", "open", "a", "new", "one", "NUMBER", "Upd", "NUMBER", "Which", "client", "be", "this", "referring", "to", "the", "be", "the", "client", "generate", "from", "a", "swagger", "spec", "On", "go", "NUMBER", "the", "client", "will", "automatically", "be", "http", "NUMBER", "when", "the", "server", "support", "it", "NUMBER", "In", "fact", "the", "default", "behavior", "of", "http", "NUMBER", "clients", "be", "to", "identify", "as", "http", "NUMBER", "That", "should", "also", "take", "care", "of", "any", "efficiency", "gains", "from", "http", "NUMBER", "There", "s", "no", "need", "to", "change", "anything", "to", "use", "streaming", "etc", "NUMBER", "Once", "it", "s", "http", "NUMBER", "the", "net", "http", "will", "optimize", "the", "connection", "opens", "NUMBER", "No", "problem", "I", "went", "down", "the", "same", "train", "of", "though", "a", "few", "weeks", "ago", "NUMBER", "This", "be", "a", "really", "good", "post", "on", "the", "topic", "LINK", "for", "http", "NUMBER", "Is", "this", "still", "a", "wish", "of", "yours", "casualjim", "What", "would", "be", "involved", "in", "implement", "this", "It", "looks", "like", "the", "primary", "Go", "protobuf", "library", "I", "see", "use", "won", "t", "support", "DynamicMessage", "golang", "protobuf", "NUMBER", "It", "would", "be", "nice", "to", "have", "an", "additional", "param", "type", "like", "json", "which", "just", "takes", "a", "go", "struct", "and", "uses", "it", "as", "a", "default", "JSON", "body", "NUMBER", "Here", "be", "an", "example", "go", "type", "LoginPayload", "struct", "Email", "string", "json", "email", "UserName", "string", "json", "user_name", "Required", "true", "Password", "string", "json", "password", "swagger", "parameters", "login", "type", "ImplicitWrapperStruct", "struct", "In", "body", "Body", "PersonLoginPayload", "Hi", "casualjim", "NUMBER", "Maybe", "I", "didn", "t", "make", "it", "clear", "enough", "NUMBER", "I", "was", "hoping", "for", "a", "way", "without", "the", "wrapper", "struct", "NUMBER", "Thanks", "casualjim", "I", "just", "came", "across", "this", "and", "for", "me", "this", "wouldn", "t", "be", "about", "optimising", "but", "more", "about", "having", "to", "change", "your", "Go", "code", "so", "that", "it", "works", "with", "the", "swagger", "generator", "oppose", "to", "swagger", "just", "work", "with", "your", "original", "code", "right", "I", "mean", "would", "you", "find", "a", "blog", "article", "on", "write", "a", "standard", "Go", "handler", "func", "that", "says", "make", "sure", "that", "you", "use", "a", "wrapper", "struct", "so", "that", "swagger", "generate", "can", "handle", "it", "Not", "sure", "if", "that", "makes", "sense", "NUMBER", "cc", "schickling", "casualjim", "My", "pr", "did", "not", "address", "what", "they", "were", "talking", "about", "as", "he", "Is", "talking", "about", "paramaters", "not", "response", "NUMBER", "I", "do", "plan", "on", "doing", "a", "pr", "to", "add", "swagger", "bodyparamaters", "though", "it", "could", "use", "the", "same", "syntax", "as", "httpie", "for", "specify", "params", "in", "different", "positions", "NUMBER", "The", "generator", "could", "also", "generate", "a", "bash", "and", "zsh", "completion", "document", "for", "better", "usability", "You", "could", "use", "gcli", "LINK", "a", "tool", "for", "generating", "the", "boilerplate", "code", "for", "the", "command", "line", "interface", "NUMBER", "With", "gcli", "you", "can", "use", "the", "CLI", "framework", "that", "you", "like", "but", "since", "you", "need", "bash", "zsh", "autocompletion", "I", "suggest", "Cobra", "LINK", "because", "it", "be", "the", "only", "one", "that", "has", "build", "in", "support", "for", "generation", "of", "bash", "zsh", "autocompletion", "as", "a", "bonus", "Cobra", "has", "support", "for", "generating", "man", "pages", "too", "which", "be", "a", "nice", "addition", "NUMBER", "This", "would", "be", "terrifically", "useful", "A", "couple", "lessons", "learned", "from", "build", "some", "cli", "tool", "for", "APIs", "NUMBER", "session", "file", "so", "we", "can", "store", "session", "data", "for", "ease", "of", "use", "NUMBER", "Detect", "login", "endpoint", "so", "auth", "APIs", "be", "easy", "to", "use", "with", "the", "cli", "NUMBER", "Cross", "platform", "portable", "cli", "binaries", "be", "very", "useful", "for", "test", "an", "API", "This", "be", "exactly", "why", "be", "use", "go", "swagger", "NUMBER", "To", "make", "a", "CLI", "NUMBER", "It", "would", "be", "great", "to", "have", "a", "tool", "to", "fully", "generate", "CLIs", "NUMBER", "drewwells", "summarized", "it", "well", "NUMBER", "For", "his", "second", "point", "I", "would", "probably", "check", "for", "user", "endpoint", "and", "user", "auth", "user", "login", "NUMBER", "Also", "maybe", "ask", "a", "few", "question", "regard", "this", "during", "generation", "NUMBER", "Like", "type", "of", "authentication", "login", "endpoint", "NUMBER", "I", "think", "this", "be", "out", "of", "scope", "for", "the", "core", "go", "swagger", "NUMBER", "But", "that", "would", "be", "a", "cool", "project", "use", "the", "go", "swagger", "libs", "NUMBER", "The", "operationId", "be", "a", "key", "property", "of", "an", "operation", "LINK", "operationObject", "to", "provide", "short", "commands", "NUMBER", "The", "model", "and", "its", "validate", "method", "generate", "by", "swagger", "generate", "models", "should", "properly", "handle", "optional", "properties", "properties", "not", "mentionned", "as", "required", "NUMBER", "Currently", "optional", "properties", "that", "be", "not", "filled", "be", "rejected", "if", "they", "do", "not", "match", "a", "valid", "value", "NUMBER", "Instead", "the", "zero", "value", "should", "be", "use", "to", "detect", "if", "the", "property", "has", "not", "be", "set", "NUMBER", "If", "the", "zero", "value", "of", "the", "property", "be", "a", "valid", "value", "for", "the", "property", "the", "type", "of", "the", "property", "in", "the", "generate", "model", "should", "be", "a", "pointer", "in", "order", "to", "allow", "nil", "NUMBER", "For", "example", "for", "a", "string", "property", "that", "has", "minLength", "NUMBER", "the", "empty", "string", "can", "be", "use", "to", "distinguish", "a", "case", "where", "the", "property", "be", "not", "set", "so", "a", "string", "type", "be", "ok", "NUMBER", "If", "minLength", "NUMBER", "string", "should", "be", "use", "NUMBER", "Here", "be", "a", "fail", "test", "case", "go", "Dump", "this", "in", "a", "models", "pet_test", "NUMBER", "go", "file", "with", "petstore", "NUMBER", "json", "from", "Swagger", "then", "cd", "models", "go", "generate", "go", "test", "v", "package", "models", "go", "generate", "swagger", "generate", "model", "t", "NUMBER", "m", "models", "n", "Pet", "f", "NUMBER", "petstore", "NUMBER", "json", "go", "generate", "swagger", "generate", "model", "t", "NUMBER", "m", "models", "n", "Category", "f", "NUMBER", "petstore", "NUMBER", "json", "go", "generate", "swagger", "generate", "model", "t", "NUMBER", "m", "models", "n", "Tag", "f", "NUMBER", "petstore", "NUMBER", "json", "import", "encoding", "json", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "test", "func", "TestValidateOptionalFields", "t", "test", "NUMBER", "T", "Only", "name", "and", "photoUrls", "be", "required", "in", "byte", "name", "photoUrls", "var", "pet", "Pet", "if", "err", "json", "NUMBER", "Unmarshal", "in", "pet", "err", "nil", "t", "NUMBER", "FailNow", "validators", "strfmt", "NUMBER", "NewFormats", "if", "err", "pet", "NUMBER", "Validate", "validators", "err", "nil", "t", "NUMBER", "Log", "err", "t", "NUMBER", "FailNow", "Output", "RUN", "TestValidateOptionalFields", "FAIL", "TestValidateOptionalFields", "NUMBER", "s", "pet_test", "NUMBER", "go", "NUMBER", "validation", "failure", "list", "status", "in", "body", "should", "be", "one", "of", "available", "pending", "sold", "FAIL", "exit", "status", "NUMBER", "FAIL", "github", "NUMBER", "com", "dolmen", "go", "swagger", "petstore", "models", "NUMBER", "s", "The", "status", "property", "be", "not", "marked", "as", "required", "in", "petstore", "NUMBER", "json", "Pet", "NUMBER", "The", "empty", "string", "be", "not", "a", "valid", "value", "for", "the", "enum", "so", "the", "empty", "string", "should", "be", "accepted", "as", "_unset_", "value", "NUMBER", "ae", "NUMBER", "a", "NUMBER", "faf", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "e", "NUMBER", "cb", "NUMBER", "b", "be", "a", "workaround", "for", "this", "issue", "but", "not", "the", "cleaner", "solution", "I", "propose", "but", "I", "understand", "more", "complex", "to", "implement", "NUMBER", "I", "generate", "my", "client", "swagger", "generate", "client", "f", "swagger", "NUMBER", "yml", "For", "one", "spec", "that", "be", "use", "for", "staging", "and", "production", "hosts", "be", "there", "a", "best", "practice", "to", "hook", "in", "and", "modify", "which", "host", "the", "generate", "client", "to", "use", "I", "read", "LINK", "swagger", "NUMBER", "github", "NUMBER", "io", "generate", "client", "which", "was", "very", "helpful", "NUMBER", "Thanks", "for", "a", "so", "far", "very", "useful", "library", "I", "came", "up", "with", "this", "but", "I", "don", "t", "know", "if", "it", "be", "the", "way", "you", "intend", "NUMBER", "file", "config", "NUMBER", "go", "go", "package", "main", "import", "fmt", "apiclient", "github", "NUMBER", "com", "jawspeak", "go", "stash", "restclient", "client", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "spec", "encoding", "json", "regexp", "io", "ioutil", "os", "type", "goStashRestClientConfig", "struct", "Host", "string", "json", "host", "Username", "string", "json", "username", "Password", "string", "json", "password", "func", "validateRequiredField", "field", "string", "configValue", "string", "if", "configValue", "nil", "len", "configValue", "NUMBER", "fmt", "NUMBER", "Println", "Required", "field", "unset", "in", "config", "NUMBER", "json", "field", "os", "NUMBER", "Exit", "NUMBER", "func", "SetupConfig", "file", "err", "ioutil", "NUMBER", "ReadFile", "NUMBER", "config", "NUMBER", "json", "commentStripper", "regexp", "NUMBER", "MustCompile", "s", "NUMBER", "n", "NUMBER", "file", "commentStripper", "NUMBER", "ReplaceAll", "file", "nil", "if", "err", "nil", "fmt", "NUMBER", "Printf", "File", "error", "v", "n", "err", "panic", "err", "fmt", "NUMBER", "Println", "string", "file", "var", "config", "goStashRestClientConfig", "json", "NUMBER", "Unmarshal", "file", "config", "validateRequiredField", "host", "config", "NUMBER", "Host", "validateRequiredField", "username", "config", "NUMBER", "Username", "validateRequiredField", "password", "config", "NUMBER", "Password", "s", "spec", "NUMBER", "Swagger", "s", "NUMBER", "UnmarshalJSON", "apiclient", "NUMBER", "SwaggerJSON", "s", "NUMBER", "Host", "config", "NUMBER", "Host", "fmt", "NUMBER", "Println", "Using", "host", "s", "NUMBER", "Host", "bytes", "err", "s", "NUMBER", "MarshalJSON", "if", "err", "nil", "the", "spec", "should", "be", "valid", "since", "it", "was", "generate", "by", "go", "swagger", "NUMBER", "panic", "err", "Then", "overwrite", "the", "previous", "json", "with", "the", "new", "settings", "NUMBER", "apiclient", "NUMBER", "SwaggerJSON", "json", "NUMBER", "RawMessage", "bytes", "Update", "with", "the", "new", "hostname", "NUMBER", "TODO", "better", "way", "file", "main", "NUMBER", "go", "go", "package", "main", "import", "fmt", "log", "apiclient", "github", "NUMBER", "com", "jawspeak", "go", "stash", "restclient", "client", "github", "NUMBER", "com", "jawspeak", "go", "stash", "restclient", "client", "operations", "func", "main", "SetupConfig", "call", "setup", "to", "override", "the", "serialized", "swagger", "spec", "NUMBER", "some", "operation", "use", "directly", "resp", "err", "apiclient", "NUMBER", "Default", "NUMBER", "Operations", "NUMBER", "GetCommits", "operations", "NUMBER", "GetCommitsParams", "Project", "GO", "Repo", "square", "if", "err", "nil", "log", "NUMBER", "Fatal", "err", "fmt", "NUMBER", "Printf", "v", "n", "resp", "NUMBER", "Payload", "Thanks", "excellent", "much", "simpler", "NUMBER", "Also", "note", "my", "older", "had", "a", "bug", "after", "I", "posted", "it", "NUMBER", "So", "I", "m", "closing", "this", "NUMBER", "I", "use", "the", "following", "NUMBER", "config", "NUMBER", "go", "go", "package", "main", "import", "encoding", "json", "fmt", "io", "ioutil", "os", "regexp", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "spec", "httptransport", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "client", "apiclient", "github", "NUMBER", "com", "jawspeak", "go", "stash", "restclient", "client", "type", "goStashRestClientConfig", "struct", "Host", "string", "json", "host", "Username", "string", "json", "username", "Password", "string", "json", "password", "func", "validateRequiredField", "field", "string", "configValue", "string", "if", "configValue", "nil", "len", "configValue", "NUMBER", "fmt", "NUMBER", "Println", "Required", "field", "unset", "in", "config", "NUMBER", "json", "field", "os", "NUMBER", "Exit", "NUMBER", "func", "SetupConfig", "file", "err", "ioutil", "NUMBER", "ReadFile", "NUMBER", "config", "NUMBER", "json", "commentStripper", "regexp", "NUMBER", "MustCompile", "s", "NUMBER", "n", "NUMBER", "file", "commentStripper", "NUMBER", "ReplaceAll", "file", "nil", "if", "err", "nil", "fmt", "NUMBER", "Printf", "File", "error", "v", "n", "err", "panic", "err", "var", "config", "goStashRestClientConfig", "json", "NUMBER", "Unmarshal", "file", "config", "validateRequiredField", "host", "config", "NUMBER", "Host", "validateRequiredField", "username", "config", "NUMBER", "Username", "validateRequiredField", "password", "config", "NUMBER", "Password", "doc", "err", "spec", "NUMBER", "New", "apiclient", "NUMBER", "SwaggerJSON", "if", "err", "nil", "panic", "err", "transport", "httptransport", "NUMBER", "New", "doc", "transport", "NUMBER", "Host", "config", "NUMBER", "Host", "apiclient", "NUMBER", "Default", "NUMBER", "SetTransport", "transport", "NUMBER", "config", "NUMBER", "json", "json", "Config", "file", "you", "use", "to", "connect", "to", "your", "repository", "NUMBER", "Rename", "to", "config", "NUMBER", "json", "when", "you", "re", "ready", "for", "your", "environment", "NUMBER", "Reminder", "json", "doesn", "t", "accept", "comments", "usually", "we", "strip", "these", "out", "NUMBER", "host", "api", "NUMBER", "example", "NUMBER", "com", "username", "your", "user", "password", "your", "pass", "NUMBER", "main", "NUMBER", "go", "go", "package", "main", "import", "fmt", "log", "apiclient", "github", "NUMBER", "com", "jawspeak", "go", "stash", "restclient", "client", "github", "NUMBER", "com", "jawspeak", "go", "stash", "restclient", "client", "operations", "func", "main", "SetupConfig", "resp", "err", "apiclient", "NUMBER", "Default", "NUMBER", "Operations", "NUMBER", "GetCommits", "operations", "NUMBER", "GetCommitsParams", "Project", "GO", "Repo", "square", "if", "err", "nil", "log", "NUMBER", "Fatal", "err", "fmt", "NUMBER", "Printf", "v", "n", "resp", "NUMBER", "Payload", "Consider", "a", "swagger", "option", "to", "produce", "sorted", "order", "field", "in", "models", "structs", "or", "a", "spec", "persistent", "order", "NUMBER", "As", "for", "me", "I", "place", "parameters", "in", "spec", "in", "a", "specific", "order", "to", "describe", "the", "object", "in", "domains", "NUMBER", "But", "swagger", "generate", "sorts", "them", "alphabetically", "and", "such", "order", "be", "taken", "for", "ORM", "system", "to", "generate", "tables", "in", "DB", "NUMBER", "which", "be", "rather", "hard", "to", "read", "NUMBER", "Do", "you", "mean", "an", "auto", "check", "for", "new", "release", "on", "Github", "On", "each", "swagger", "call", "Nice", "NUMBER", "Please", "look", "at", "Cocoa", "Pods", "it", "goes", "a", "bit", "further", "and", "checks", "automatically", "NUMBER", "You", "can", "make", "a", "background", "check", "on", "every", "swagger", "call", "and", "print", "at", "the", "end", "of", "the", "work", "NUMBER", "Started", "from", "the", "need", "of", "smth", "NUMBER", "like", "flask", "NUMBER", "url_for", "in", "Python", "LINK", "flask", "NUMBER", "url_for", "to", "return", "a", "newly", "created", "resource", "url", "in", "Location", "header", "NUMBER", "Considering", "that", "_", "generator", "template", "server", "operation", "NUMBER", "gotmpl_", "be", "a", "nice", "place", "for", "such", "url", "builder", "function", "NUMBER", "Below", "be", "my", "suggestions", "At", "first", "point", "I", "think", "of", "extending", "the", "point", "to", "get", "the", "ability", "to", "build", "urls", "for", "any", "unique", "resource", "path", "mention", "in", "spec", "NUMBER", "For", "ex", "NUMBER", "all", "these", "NUMBER", "operations", "_GET", "events_", "_POST", "events_", "_GET", "events", "id", "_", "_PUT", "events", "id", "_", "_DELETE", "events", "id", "_", "Will", "need", "only", "two", "url", "builder", "function", "smth", "NUMBER", "like", "events", "NUMBER", "BuildUrl", "events", "NUMBER", "BuildUrl", "Id", "But", "this", "case", "seems", "to", "have", "a", "leak", "in", "abstraction", "between", "operation", "and", "its", "url", "NUMBER", "If", "we", "decide", "to", "replace", "the", "_PUT", "events", "id", "_", "operation", "to", "another", "url", "keep", "the", "_operationId_", "unchanged", "we", "will", "need", "to", "update", "the", "call", "to", "its", "url", "builder", "function", "NUMBER", "But", "actually", "we", "have", "not", "change", "the", "semantic", "of", "the", "operations", "so", "we", "need", "a", "concrete", "url", "builder", "call", "for", "it", "NUMBER", "In", "other", "words", "I", "think", "we", "need", "a", "one", "to", "one", "url", "builder", "function", "for", "each", "operation", "to", "be", "able", "to", "use", "the", "proper", "one", "based", "on", "the", "operation", "semantics", "NUMBER", "LINK", "Hi", "When", "I", "try", "to", "generate", "a", "GO", "server", "with", "my", "swagger", "NUMBER", "json", "file", "which", "pass", "validation", "I", "get", "the", "following", "message", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "vmid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "vmid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "vmspec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "vmspec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "vmspec_cpu", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "vmspec_cpu", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "vmspec_memory", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "vmspec_memory", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "target", "must", "reside", "inside", "a", "location", "in", "the", "GOPATH", "A", "models", "directory", "be", "generate", "NUMBER", "What", "do", "the", "error", "mean", "that", "target", "must", "reside", "inside", "a", "location", "in", "the", "GOPATH", "Thank", "you", "NUMBER", "Where", "be", "you", "calling", "swagger", "generate", "And", "what", "be", "your", "GOPATH", "Ah", "ha", "NUMBER", "Thanks", "NUMBER", "With", "this", "I", "get", "further", "aktwang", "aktwang", "VirtualBox", "NUMBER", "gvm", "pkgsets", "go", "NUMBER", "global", "src", "github", "NUMBER", "ibm", "NUMBER", "com", "user", "json", "echo", "GOPATH", "home", "aktwang", "NUMBER", "gvm", "pkgsets", "go", "NUMBER", "global", "aktwang", "aktwang", "VirtualBox", "NUMBER", "gvm", "pkgsets", "go", "NUMBER", "global", "src", "github", "NUMBER", "ibm", "NUMBER", "com", "user", "json", "swagger", "generate", "server", "f", "NUMBER", "swagger", "NUMBER", "json", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "vmspec_memory", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "vmspec_memory", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "vmid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "vmid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "vmspec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "vmspec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "vmspec_cpu", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "vmspec_cpu", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "handler", "template", "Default", "NUMBER", "VMPost", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "handler", "Default", "NUMBER", "VMPost", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "parameters", "template", "Default", "NUMBER", "VMPostParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "parameters", "Default", "NUMBER", "VMPostParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "responses", "template", "Default", "NUMBER", "VMPostResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "responses", "Default", "NUMBER", "VMPostResponses", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "builder", "template", "operations", "NUMBER", "Genesis", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "genesis_api", "NUMBER", "go", "NUMBER", "NUMBER", "expected", "find", "default", "and", "NUMBER", "more", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "embedded", "Swagger", "JSON", "template", "server", "NUMBER", "Genesis", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "configure", "api", "template", "operations", "NUMBER", "ConfigureGenesis", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "configure_genesis", "NUMBER", "go", "NUMBER", "NUMBER", "expected", "operand", "find", "default", "and", "NUMBER", "more", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "main", "template", "server", "NUMBER", "Genesis", "aktwang", "aktwang", "VirtualBox", "NUMBER", "gvm", "pkgsets", "go", "NUMBER", "global", "src", "github", "NUMBER", "ibm", "NUMBER", "com", "user", "json", "Hi", "guys", "My", "server", "code", "generation", "works", "great", "However", "I", "have", "a", "general", "question", "NUMBER", "Let", "s", "say", "if", "I", "modify", "some", "of", "my", "APIs", "the", "swagger", "NUMBER", "json", "file", "and", "having", "the", "need", "to", "regenerate", "the", "server", "code", "NUMBER", "However", "I", "ve", "add", "my", "own", "code", "into", "some", "Handler", "routines", "already", "NUMBER", "So", "do", "that", "mean", "I", "have", "to", "re", "do", "all", "the", "work", "after", "I", "regenerate", "again", "Thanks", "casualjim", "Thanks", "for", "the", "quick", "reply", "NUMBER", "I", "took", "a", "closer", "look", "at", "the", "server", "code", "and", "now", "have", "a", "better", "understanding", "on", "how", "to", "use", "it", "NUMBER", "Another", "general", "question", "I", "also", "generate", "the", "client", "NUMBER", "went", "smoothly", "How", "do", "I", "use", "the", "client", "I", "assume", "I", "should", "write", "my", "own", "main", "right", "I", "see", "a", "default_client", "NUMBER", "go", "in", "the", "default", "directory", "and", "a", "XXX_client", "NUMBER", "go", "file", "generate", "NUMBER", "Thanks", "again", "Ah", "ha", "NUMBER", "This", "be", "mighty", "useful", "the", "doc", "Thanks", "casualjim", "NUMBER", "casualjim", "More", "question", "NUMBER", "What", "s", "the", "difference", "between", "use", "a", "httptransport", "to", "create", "a", "client", "and", "not", "use", "it", "Also", "I", "have", "two", "client", "file", "generate", "NUMBER", "Should", "I", "add", "my", "main", "in", "the", "default_client", "NUMBER", "go", "file", "or", "the", "XXX_client", "NUMBER", "go", "file", "this", "one", "may", "be", "a", "dumb", "question", "because", "I", "ought", "to", "figure", "it", "out", "by", "reading", "the", "code", "NUMBER", "right", "If", "an", "HTTP", "response", "has", "a", "Content", "Type", "of", "application", "json", "charset", "utf", "NUMBER", "then", "the", "generate", "client", "s", "consumer", "will", "not", "properly", "handle", "the", "response", "and", "returns", "an", "error", "no", "consumer", "application", "json", "charset", "utf", "NUMBER", "NUMBER", "This", "be", "a", "valid", "header", "and", "it", "should", "be", "able", "to", "handle", "the", "charset", "and", "potentially", "other", "values", "in", "a", "header", "NUMBER", "I", "m", "currently", "trying", "to", "use", "the", "spec", "generator", "but", "I", "can", "t", "get", "the", "model", "annotation", "to", "work", "NUMBER", "Here", "be", "my", "code", "go", "package", "models", "Entity", "swagger", "model", "type", "Entity", "struct", "arangolite", "NUMBER", "Document", "Created", "time", "NUMBER", "Time", "json", "created", "omitempty", "LastUpdated", "time", "NUMBER", "Time", "json", "lastUpdated", "omitempty", "Type", "string", "json", "type", "omitempty", "go", "package", "controllers", "Find", "swagger", "route", "GET", "entities", "entities", "find", "Responses", "NUMBER", "Entity", "func", "c", "EntitiesCtrl", "Find", "w", "http", "NUMBER", "ResponseWriter", "r", "http", "NUMBER", "Request", "userID", "err", "c", "NUMBER", "pg", "NUMBER", "GetUserID", "r", "if", "err", "nil", "c", "NUMBER", "r", "NUMBER", "JSONError", "w", "http", "NUMBER", "StatusUnauthorized", "errs", "NUMBER", "API", "NUMBER", "Internal", "err", "return", "filter", "err", "c", "NUMBER", "pg", "NUMBER", "GetFilter", "r", "if", "err", "nil", "c", "NUMBER", "r", "NUMBER", "JSONError", "w", "http", "NUMBER", "StatusBadRequest", "errs", "NUMBER", "API", "NUMBER", "FilterDecoding", "err", "return", "entities", "err", "c", "NUMBER", "i", "NUMBER", "Find", "userID", "filter", "if", "err", "nil", "switch", "err", "NUMBER", "type", "case", "errs", "NUMBER", "ErrInvalidFilter", "c", "NUMBER", "r", "NUMBER", "JSONError", "w", "NUMBER", "errs", "NUMBER", "API", "NUMBER", "InvalidFilter", "err", "default", "c", "NUMBER", "r", "NUMBER", "JSONError", "w", "http", "NUMBER", "StatusInternalServerError", "errs", "NUMBER", "API", "NUMBER", "Internal", "err", "return", "c", "NUMBER", "r", "NUMBER", "JSON", "w", "http", "NUMBER", "StatusOK", "entities", "I", "already", "read", "the", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "issue", "and", "tried", "to", "add", "_", "models", "NUMBER", "Entity", "or", "_", "models", "NUMBER", "Entity", "in", "the", "controller", "to", "trigger", "the", "generation", "but", "nothing", "works", "NUMBER", "I", "also", "thought", "that", "maybe", "there", "were", "some", "kind", "of", "issue", "with", "the", "package", "naming", "so", "I", "tried", "to", "annotate", "the", "model", "with", "swagger", "model", "models", "NUMBER", "Entity", "and", "the", "response", "NUMBER", "models", "NUMBER", "Entity", "but", "it", "doesn", "t", "work", "either", "NUMBER", "Thanks", "a", "lot", "for", "your", "help", "NUMBER", "Oh", "I", "have", "to", "wrap", "my", "models", "in", "structs", "to", "use", "it", "in", "responses", "Shouldn", "t", "swagger", "model", "be", "an", "alias", "for", "that", "I", "mean", "it", "be", "kinda", "weird", "to", "have", "to", "write", "actual", "Go", "code", "to", "make", "the", "documentation", "system", "work", "NUMBER", "Ok", "that", "makes", "sense", "NUMBER", "Thanks", "a", "lot", "for", "your", "help", "and", "your", "work", "Using", "the", "swagger", "schema", "from", "LINK", "If", "I", "generate", "a", "client", "the", "use", "of", "other", "clients", "be", "inconsistent", "NUMBER", "I", "generate", "a", "schema", "which", "orgiinally", "include", "the", "archivedlogs", "client", "but", "after", "regenerating", "it", "a", "few", "times", "it", "remove", "the", "archivedlogs", "but", "add", "userfiles", "NUMBER", "It", "seems", "it", "s", "not", "always", "use", "all", "clients", "it", "generate", "in", "the", "frontend_client", "constructor", "NUMBER", "Here", "s", "the", "diff", "it", "took", "me", "a", "few", "client", "generations", "to", "get", "this", "to", "happen", "since", "it", "doesn", "t", "always", "occur", "NUMBER", "It", "seems", "to", "be", "limited", "to", "the", "archivedlogs", "and", "userfiles", "package", "not", "sure", "why", "the", "others", "aren", "t", "be", "add", "remove", "between", "generation", "NUMBER", "diff", "diff", "git", "a", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "b", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "index", "NUMBER", "b", "NUMBER", "e", "NUMBER", "e", "NUMBER", "NUMBER", "a", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "b", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "client", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "github", "NUMBER", "com", "foo", "common", "go", "quay", "client", "archivedlogs", "github", "NUMBER", "com", "foo", "common", "go", "quay", "client", "billing", "github", "NUMBER", "com", "foo", "common", "go", "quay", "client", "build", "github", "NUMBER", "com", "foo", "common", "go", "quay", "client", "discovery", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "github", "NUMBER", "com", "foo", "common", "go", "quay", "client", "team", "github", "NUMBER", "com", "foo", "common", "go", "quay", "client", "trigger", "github", "NUMBER", "com", "foo", "common", "go", "quay", "client", "user", "github", "NUMBER", "com", "foo", "common", "go", "quay", "client", "userfiles", "New", "creates", "a", "new", "quay", "frontend", "client", "func", "New", "transport", "client", "NUMBER", "Transport", "formats", "strfmt", "NUMBER", "Registry", "QuayFrontend", "cli", "new", "QuayFrontend", "cli", "NUMBER", "Archivedlogs", "archivedlogs", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Billing", "billing", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Build", "build", "NUMBER", "New", "transport", "formats", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "func", "New", "transport", "client", "NUMBER", "Transport", "formats", "strfmt", "NUMBER", "Registry", "QuayFrontend", "cli", "NUMBER", "User", "user", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Userfiles", "userfiles", "NUMBER", "New", "transport", "formats", "return", "cli", "QuayFrontend", "be", "a", "client", "for", "quay", "frontend", "type", "QuayFrontend", "struct", "Archivedlogs", "archivedlogs", "NUMBER", "Client", "Billing", "billing", "NUMBER", "Client", "Build", "build", "NUMBER", "Client", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "type", "QuayFrontend", "struct", "Trigger", "trigger", "NUMBER", "Client", "User", "user", "NUMBER", "Client", "Userfiles", "userfiles", "NUMBER", "Client", "Reported", "this", "upstream", "to", "the", "quay", "NUMBER", "io", "folk", "NUMBER", "I", "ll", "leave", "this", "open", "since", "it", "seems", "validation", "client", "generation", "should", "probably", "be", "able", "to", "determine", "this", "was", "in", "fact", "not", "completely", "valid", "NUMBER", "maybe", "just", "do", "a", "rough", "pass", "at", "the", "beginning", "to", "check", "all", "operations", "be", "unique", "NUMBER", "By", "the", "way", "I", "write", "a", "simple", "JQ", "query", "which", "be", "able", "to", "tell", "me", "if", "any", "operationIds", "were", "repeated", "if", "it", "s", "of", "use", "to", "anyone", "finding", "this", "themselves", "NUMBER", "curl", "LINK", "jq", "NUMBER", "paths", "NUMBER", "operationId", "uniq", "d", "How", "do", "this", "issue", "differ", "from", "NUMBER", "Where", "would", "this", "be", "useful", "What", "be", "this", "net", "package", "you", "be", "refering", "to", "I", "see", "no", "Context", "in", "stdlib", "net", "LINK", "NUMBER", "Hi", "there", "we", "be", "having", "difficulties", "with", "go", "get", "recently", "after", "a", "submodule", "was", "add", "to", "the", "project", "NUMBER", "We", "be", "seeing", "the", "following", "error", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "cd", "NUMBER", "git", "git", "dir", "drone", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "git", "submodule", "update", "init", "recursive", "No", "submodule", "mapping", "find", "in", "NUMBER", "gitmodules", "for", "path", "docs", "public", "The", "issue", "appears", "to", "be", "the", "use", "of", "a", "git", "ssh", "url", "submodule", "docs", "public", "path", "docs", "public", "url", "git", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "github", "NUMBER", "io", "NUMBER", "git", "This", "can", "be", "problematic", "for", "CI", "servers", "that", "may", "be", "build", "public", "repositories", "and", "don", "t", "have", "an", "SSH", "key", "install", "on", "them", "NUMBER", "Without", "an", "SSH", "key", "it", "be", "unable", "to", "authenticate", "to", "GitHub", "and", "clone", "the", "repository", "git", "clone", "git", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "github", "NUMBER", "io", "NUMBER", "git", "Cloning", "into", "go", "swagger", "NUMBER", "github", "NUMBER", "io", "NUMBER", "The", "authenticity", "of", "host", "github", "NUMBER", "com", "NUMBER", "can", "t", "be", "established", "NUMBER", "RSA", "key", "fingerprint", "be", "NUMBER", "NUMBER", "ac", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "d", "NUMBER", "NUMBER", "NUMBER", "b", "NUMBER", "NUMBER", "d", "eb", "df", "a", "NUMBER", "NUMBER", "Are", "you", "sure", "you", "want", "to", "continue", "connecting", "yes", "no", "yes", "Warning", "Permanently", "add", "github", "NUMBER", "com", "NUMBER", "RSA", "to", "the", "list", "of", "know", "hosts", "NUMBER", "Permission", "denied", "publickey", "NUMBER", "fatal", "Could", "not", "read", "from", "remote", "repository", "NUMBER", "Please", "make", "sure", "you", "have", "the", "correct", "access", "rights", "and", "the", "repository", "exists", "NUMBER", "Would", "it", "be", "possible", "to", "use", "git", "https", "instead", "for", "the", "submodule", "Still", "not", "work", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "cd", "NUMBER", "git", "git", "dir", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "git", "submodule", "update", "init", "recursive", "No", "submodule", "mapping", "find", "in", "NUMBER", "gitmodules", "for", "path", "docs", "public", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "exit", "status", "NUMBER", "casualjim", "it", "has", "something", "to", "do", "with", "GO", "NUMBER", "VENDOREXPERIMENT", "docker", "run", "t", "i", "golang", "NUMBER", "bin", "bash", "c", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "go", "get", "u", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "cd", "NUMBER", "git", "git", "dir", "go", "src", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "git", "submodule", "update", "init", "recursive", "No", "submodule", "mapping", "find", "in", "NUMBER", "gitmodules", "for", "path", "docs", "public", "package", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "NUMBER", "exit", "status", "NUMBER", "with", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "it", "fail", "and", "with", "GO", "NUMBER", "VENDOREXPERIMENT", "NUMBER", "it", "succeeds", "NUMBER", "Errors", "restapi", "operations", "events", "get_event_by_id", "NUMBER", "go", "NUMBER", "undefined", "models", "in", "models", "NUMBER", "Event", "restapi", "operations", "events", "get_event_by_id", "NUMBER", "go", "NUMBER", "undefined", "models", "in", "models", "NUMBER", "Event", "restapi", "operations", "events", "get_event_by_id", "NUMBER", "go", "NUMBER", "undefined", "models", "in", "models", "NUMBER", "Event", "restapi", "operations", "events", "get_events", "NUMBER", "go", "NUMBER", "undefined", "models", "in", "models", "NUMBER", "Event", "restapi", "operations", "events", "get_events", "NUMBER", "go", "NUMBER", "undefined", "models", "in", "models", "NUMBER", "Event", "restapi", "operations", "events", "get_events", "NUMBER", "go", "NUMBER", "undefined", "models", "in", "models", "NUMBER", "Event", "restapi", "operations", "events", "post_event_parameters", "NUMBER", "go", "NUMBER", "undefined", "models", "in", "models", "NUMBER", "Event", "swagger", "NUMBER", "yml", "yaml", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "AttendList", "description", "AttendList", "service", "NUMBER", "contact", "name", "API", "Support", "url", "LINK", "email", "contact", "evecon", "NUMBER", "co", "consumes", "application", "json", "produces", "application", "json", "definitions", "Event", "title", "Event", "type", "object", "properties", "Id", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "Version", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "Created", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "Updated", "type", "integer", "format", "int", "NUMBER", "readOnly", "true", "Deleted", "type", "boolean", "readOnly", "true", "StartDate", "type", "string", "format", "date", "time", "EndDate", "type", "string", "format", "date", "time", "Latitude", "type", "number", "format", "float", "Longitude", "type", "number", "format", "float", "Name", "type", "string", "URL", "type", "string", "Notes", "type", "string", "Autosearch", "type", "boolean", "example", "StartDate", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "EndDate", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "Latitude", "NUMBER", "Longitude", "NUMBER", "Name", "Bikers", "meeting", "URL", "LINK", "Notes", "Yet", "another", "bikers", "meeting", "Autosearch", "false", "paths", "events", "get", "description", "Get", "events", "NUMBER", "tags", "events", "operationId", "getEvents", "responses", "default", "description", "Generic", "Error", "NUMBER", "description", "Successful", "response", "schema", "title", "ArrayOfEvents", "type", "array", "items", "ref", "definitions", "Event", "post", "description", "Create", "new", "event", "NUMBER", "tags", "events", "operationId", "postEvent", "parameters", "name", "Event", "in", "body", "description", "New", "events", "required", "true", "schema", "ref", "definitions", "Event", "responses", "default", "description", "Generic", "Error", "NUMBER", "description", "Successful", "response", "NUMBER", "Location", "header", "with", "link", "to", "events", "id", "containing", "new", "ID", "NUMBER", "events", "id", "parameters", "name", "id", "in", "path", "description", "Existing", "event", "id", "NUMBER", "required", "true", "type", "integer", "format", "int", "NUMBER", "get", "description", "Get", "event", "by", "id", "NUMBER", "tags", "events", "operationId", "getEventById", "responses", "default", "description", "Generic", "Error", "NUMBER", "description", "Successful", "response", "schema", "title", "Newly", "created", "event", "ref", "definitions", "Event", "put", "description", "Update", "exist", "event", "NUMBER", "tags", "events", "operationId", "putEventById", "parameters", "name", "Event", "in", "body", "description", "Existing", "event", "required", "true", "schema", "ref", "definitions", "Event", "responses", "default", "description", "Generic", "Error", "NUMBER", "description", "Successful", "response", "delete", "description", "Delete", "event", "by", "id", "NUMBER", "tags", "events", "operationId", "deleteEventById", "responses", "default", "description", "Generic", "Error", "NUMBER", "description", "Successful", "response", "Please", "take", "a", "look", "at", "these", "change", "I", "made", "in", "my", "fork", "to", "get", "the", "client", "generation", "to", "work", "for", "my", "schema", "NUMBER", "Sorry", "I", "can", "t", "provide", "a", "simple", "test", "case", "right", "now", "and", "I", "don", "t", "know", "if", "this", "be", "the", "correct", "solution", "but", "it", "works", "for", "me", "right", "now", "NUMBER", "LINK", "swagger", "commit", "NUMBER", "e", "NUMBER", "b", "NUMBER", "cdc", "NUMBER", "f", "NUMBER", "f", "NUMBER", "bc", "NUMBER", "a", "NUMBER", "dc", "NUMBER", "diff", "NUMBER", "d", "NUMBER", "fdff", "NUMBER", "b", "NUMBER", "fb", "NUMBER", "cca", "NUMBER", "f", "NUMBER", "d", "NUMBER", "fab", "NUMBER", "L", "NUMBER", "LINK", "swagger", "commit", "NUMBER", "e", "NUMBER", "b", "NUMBER", "cdc", "NUMBER", "f", "NUMBER", "f", "NUMBER", "bc", "NUMBER", "a", "NUMBER", "dc", "NUMBER", "diff", "NUMBER", "b", "NUMBER", "cc", "NUMBER", "a", "NUMBER", "b", "NUMBER", "c", "NUMBER", "fc", "NUMBER", "c", "NUMBER", "ece", "NUMBER", "f", "NUMBER", "R", "NUMBER", "I", "also", "needed", "basic", "auth", "and", "a", "way", "to", "set", "the", "schema", "which", "I", "hacked", "in", "here", "LINK", "swagger", "commit", "NUMBER", "e", "NUMBER", "b", "NUMBER", "cdc", "NUMBER", "f", "NUMBER", "f", "NUMBER", "bc", "NUMBER", "a", "NUMBER", "dc", "NUMBER", "diff", "a", "NUMBER", "dc", "NUMBER", "bff", "NUMBER", "be", "NUMBER", "c", "NUMBER", "f", "NUMBER", "ca", "NUMBER", "bL", "NUMBER", "This", "line", "was", "messing", "up", "the", "paths", "so", "I", "had", "to", "remove", "it", "LINK", "swagger", "commit", "NUMBER", "e", "NUMBER", "b", "NUMBER", "cdc", "NUMBER", "f", "NUMBER", "f", "NUMBER", "bc", "NUMBER", "a", "NUMBER", "dc", "NUMBER", "diff", "a", "NUMBER", "dc", "NUMBER", "bff", "NUMBER", "be", "NUMBER", "c", "NUMBER", "f", "NUMBER", "ca", "NUMBER", "bL", "NUMBER", "Feel", "free", "to", "apply", "some", "of", "these", "fix", "to", "the", "main", "project", "NUMBER", "I", "don", "t", "know", "if", "my", "solution", "be", "the", "correct", "one", "and", "I", "just", "wanted", "to", "get", "something", "work", "first", "NUMBER", "Sweet", "Thanks", "NUMBER", "Responses", "should", "be", "able", "to", "contain", "a", "body", "NUMBER", "There", "be", "no", "rule", "enforcing", "HTTP", "NUMBER", "status", "code", "to", "return", "an", "empty", "body", "NUMBER", "The", "current", "code", "do", "not", "allow", "a", "NUMBER", "response", "to", "contain", "a", "body", "NUMBER", "According", "to", "HTTP", "NUMBER", "spec", "NUMBER", "Created", "The", "request", "has", "be", "fulfilled", "and", "resulted", "in", "a", "new", "resource", "be", "created", "NUMBER", "The", "newly", "created", "resource", "can", "be", "referenced", "by", "the", "URI", "s", "returned", "in", "the", "entity", "of", "the", "response", "with", "the", "most", "specific", "URI", "for", "the", "resource", "given", "by", "a", "Location", "header", "field", "NUMBER", "The", "response", "SHOULD", "include", "an", "entity", "containing", "a", "list", "of", "resource", "characteristics", "and", "location", "s", "from", "which", "the", "user", "or", "user", "agent", "can", "choose", "the", "one", "most", "appropriate", "NUMBER", "The", "entity", "format", "be", "specified", "by", "the", "media", "type", "given", "in", "the", "Content", "Type", "header", "field", "NUMBER", "The", "origin", "server", "MUST", "create", "the", "resource", "before", "returning", "the", "NUMBER", "status", "code", "NUMBER", "If", "the", "action", "cannot", "be", "carried", "out", "immediately", "the", "server", "SHOULD", "respond", "with", "NUMBER", "Accepted", "response", "instead", "NUMBER", "Running", "swagger", "generate", "client", "on", "a", "spec", "which", "has", "pass", "swagger", "validate", "At", "least", "the", "command", "exited", "with", "no", "error", "output", "NUMBER", "be", "resulting", "in", "the", "following", "swagger", "generate", "client", "f", "swagger", "NUMBER", "json", "json", "cannot", "unmarshal", "bool", "into", "Go", "value", "of", "type", "string", "Is", "there", "an", "easy", "way", "to", "see", "where", "this", "has", "be", "generate", "to", "work", "out", "what", "the", "problem", "be", "Pardon", "my", "reopening", "an", "old", "issue", "I", "ve", "encountered", "this", "exact", "same", "problem", "NUMBER", "I", "m", "get", "the", "error", "message", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "json", "cannot", "unmarshal", "bool", "into", "Go", "value", "of", "type", "string", "and", "I", "ve", "no", "idea", "what", "in", "the", "NUMBER", "line", "yaml", "file", "be", "cause", "the", "error", "NUMBER", "Some", "debug", "output", "identifying", "approximately", "where", "go", "swagger", "get", "to", "when", "the", "issue", "be", "encountered", "would", "be", "great", "NUMBER", "Hi", "thanks", "your", "help", "I", "ve", "actually", "find", "the", "issue", "by", "diffing", "the", "last", "commit", "NUMBER", "The", "problem", "was", "a", "definitions", "object", "which", "looked", "like", "this", "definitions", "__MenuItem", "____properties", "______item_currency", "________type", "string", "________required", "false", "where", "the", "item_currency", "s", "required", "key", "be", "false", "NUMBER", "I", "think", "go", "swagger", "was", "expecting", "a", "string", "here", "and", "not", "a", "boolean", "NUMBER", "Is", "there", "an", "example", "of", "how", "to", "use", "the", "generate", "client", "Struggling", "a", "bit", "on", "what", "to", "do", "NUMBER", "Yea", "I", "just", "an", "example", "of", "how", "to", "use", "it", "NUMBER", "Kind", "of", "confused", "on", "what", "the", "Transport", "should", "be", "in", "the", "generate", "New", "method", "NUMBER", "Thanks", "casualjim", "NUMBER", "Thanks", "I", "get", "that", "work", "now", "NUMBER", "However", "get", "authentication", "error", "NUMBER", "I", "followed", "this", "example", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "e", "NUMBER", "a", "NUMBER", "dbd", "NUMBER", "f", "NUMBER", "ef", "NUMBER", "a", "NUMBER", "e", "NUMBER", "d", "NUMBER", "bfaebd", "NUMBER", "c", "NUMBER", "b", "NUMBER", "fixture", "codegen", "tasklist", "NUMBER", "basic", "NUMBER", "yml", "and", "have", "this", "in", "my", "config", "NUMBER", "yaml", "securityDefinitions", "auth_token", "type", "apiKey", "name", "Authorization", "in", "header", "in", "the", "individual", "route", "i", "have", "yaml", "paths", "customers", "get", "summary", "Customer", "List", "operationId", "allCustomers", "description", "All", "registered", "customers", "NUMBER", "parameters", "name", "order", "in", "query", "type", "string", "description", "Any", "field", "in", "the", "database", "NUMBER", "tags", "Customers", "security", "auth_token", "responses", "NUMBER", "description", "An", "array", "of", "customers", "schema", "type", "array", "items", "ref", "definitions", "CustomersResponse", "default", "description", "Unexpected", "error", "schema", "ref", "definitions", "Error", "This", "doesn", "t", "seem", "to", "generate", "any", "Authentication", "methods", "for", "me", "Or", "just", "not", "sure", "where", "to", "find", "them", "NUMBER", "I", "find", "this", "issue", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "but", "I", "dont", "have", "a", "AuthenticatesFor", "method", "in", "my", "generate", "code", "NUMBER", "Thanks", "for", "the", "help", "NUMBER", "I", "m", "still", "having", "issue", "with", "responses", "and", "I", "think", "this", "ticket", "be", "relate", "NUMBER", "swagger", "validate", "pass", "but", "there", "s", "error", "about", "miss", "definitions", "on", "editor", "NUMBER", "swagger", "NUMBER", "io", "which", "seems", "to", "manifest", "as", "miss", "responses", "on", "all", "the", "endpoints", "on", "swagger", "ui", "here", "LINK", "elf", "NUMBER", "appspot", "NUMBER", "com", "swagger", "admin", "bookings", "My", "route", "looks", "like", "this", "Bookings", "swagger", "route", "GET", "admin", "bookings", "booking", "Bookings", "Bookings", "lists", "all", "the", "appointments", "that", "have", "be", "made", "on", "the", "site", "NUMBER", "Consumes", "application", "json", "Schemes", "http", "https", "Produces", "application", "json", "Responses", "NUMBER", "BookingResponses", "My", "response", "looks", "like", "this", "BookingResponses", "be", "a", "slice", "of", "bookings", "swagger", "response", "BookingResponses", "type", "BookingResponses", "struct", "Booking", "slice", "in", "body", "required", "true", "Bookings", "makeplans", "NUMBER", "Booking", "json", "bookings", "The", "bookingresponse", "be", "in", "a", "private", "git", "bit", "bucket", "repo", "and", "wraps", "booking", "in", "a", "separate", "repo", "NUMBER", "I", "can", "make", "a", "complete", "example", "in", "a", "gist", "so", "you", "can", "see", "it", "end", "to", "end", "NUMBER", "On", "Tue", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "PM", "Ivan", "Porto", "Carrero", "notifications", "github", "NUMBER", "com", "write", "if", "I", "follow", "the", "package", "then", "the", "makeplans", "NUMBER", "Booking", "model", "lives", "in", "a", "different", "repo", "be", "that", "right", "And", "one", "be", "a", "git", "repo", "and", "the", "other", "a", "mercurial", "one", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "swagger", "go", "swagger", "issue", "NUMBER", "issuecomment", "NUMBER", "NUMBER", "Here", "s", "a", "gist", "and", "output", "from", "swagger", "generate", "spec", "LINK", "swagger", "ui", "doesn", "t", "validate", "b", "c", "something", "be", "off", "but", "I", "think", "that", "s", "unrelated", "to", "the", "responses", "models", "be", "empty", "NUMBER", "ack", "you", "be", "right", "there", "s", "a", "typo", "in", "the", "gist", "NUMBER", "I", "reran", "it", "as", "BookingResponse", "Here", "s", "the", "output", "from", "swagger", "ui", "about", "the", "response", "model", "LINK", "definitions", "Booking", "be", "not", "defined", "This", "be", "consistent", "with", "my", "experience", "NUMBER", "When", "the", "internal", "structs", "do", "get", "definitions", "they", "get", "shown", "in", "the", "swagger", "ui", "output", "NUMBER", "So", "instead", "of", "it", "showing", "my", "nested", "responses", "BookingResponse", "Booking", "in", "the", "response", "model", "it", "shows", "just", "Booking", "NUMBER", "So", "there", "must", "be", "some", "unwrapping", "going", "on", "here", "NUMBER", "That", "s", "the", "behavior", "I", "m", "trying", "to", "understand", "responses", "BookingResponse", "description", "BookingResponse", "represents", "a", "scheduled", "appointment", "schema", "ref", "definitions", "Booking", "BookingResponse", "be", "be", "unwrapped", "NUMBER", "So", "Booking", "be", "returned", "instead", "of", "BookingResponse", "Booking", "NUMBER", "The", "response", "be", "BookingResponse", "not", "Booking", "NUMBER", "swagger", "ui", "makes", "this", "worse", "since", "it", "has", "a", "bug", "with", "looking", "up", "that", "remote", "ref", "in", "the", "definition", "NUMBER", "Working", "as", "intended", "this", "can", "be", "close", "In", "fact", "false", "be", "not", "allow", "as", "a", "value", "for", "additionalProperties", "NUMBER", "This", "be", "because", "Swagger", "NUMBER", "has", "a", "more", "restricted", "definition", "than", "JSON", "Schema", "NUMBER", "See", "webron", "s", "clarification", "of", "the", "spec", "swagger", "api", "swagger", "codegen", "issue", "NUMBER", "issuecomment", "NUMBER", "NUMBER", "After", "NUMBER", "I", "be", "hitting", "a", "new", "one", "generating", "the", "quay", "NUMBER", "io", "models", "wget", "LINK", "swagger", "generate", "client", "f", "discovery", "A", "quay", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "ChangeVisibility", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "ChangeVisibility", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "RunParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "RunParameters", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "NewRepo", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "NewRepo", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "RevertTag", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "RevertTag", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "RepoUpdate", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "RepoUpdate", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rendered", "model", "template", "UpdateApp", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "generate", "model", "UpdateApp", "model", "template", "schemavalidations", "NUMBER", "NUMBER", "executing", "mapvalidator", "at", "TAG", "nil", "pointer", "evaluating", "generator", "NUMBER", "GenSchema", "NUMBER", "HasValidations", "Thanks", "for", "the", "fast", "fix", "It", "will", "be", "good", "if", "possibility", "to", "add", "any", "headers", "in", "all", "routes", "be", "exist", "NUMBER", "For", "example", "in", "some", "doc", "NUMBER", "go", "go", "Consumes", "application", "json", "Header", "Version", "V", "NUMBER", "This", "be", "expected", "header", "or", "something", "like", "that", "swagger", "meta", "And", "after", "generate", "spec", "we", "get", "swagger", "NUMBER", "json", "like", "that", "json", "consumes", "application", "json", "Version", "V", "NUMBER", "and", "swagger", "ui", "will", "generate", "all", "request", "with", "additional", "header", "Version", "like", "that", "curl", "X", "GET", "header", "Accept", "application", "json", "header", "Version", "V", "NUMBER", "Header", "Version", "be", "only", "for", "example", "NUMBER", "It", "will", "be", "better", "if", "possibility", "exists", "to", "add", "any", "headers", "NUMBER", "The", "following", "Swagger", "NUMBER", "spec", "be", "valid", "but", "swagger", "validate", "report", "a", "false", "negative", "The", "swagger", "spec", "at", "global", "parameters", "NUMBER", "json", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "path", "param", "userId", "be", "not", "present", "in", "the", "path", "Parameter", "userId", "be", "not", "use", "in", "any", "path", "there", "be", "no", "parameters", "section", "for", "path", "with", "a", "ref", "to", "parameters", "userId", "NUMBER", "This", "should", "not", "be", "report", "as", "an", "error", "NUMBER", "json", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "test", "of", "Swagger", "global", "parameters", "parameters", "userId", "name", "userId", "in", "path", "type", "string", "required", "true", "paths", "get", "responses", "NUMBER", "description", "Successful", "The", "specification", "LINK", "schemaObject", "says", "about", "parameters", "An", "object", "to", "hold", "parameters", "that", "can", "be", "use", "across", "operations", "NUMBER", "This", "property", "do", "_not_", "define", "global", "parameters", "for", "all", "operations", "NUMBER", "To", "workaround", "this", "issue", "I", "write", "a", "Perl", "NUMBER", "script", "that", "inlines", "parameters", "defined", "at", "global", "scope", "LINK", "NUMBER", "Why", "be", "this", "issue", "close", "I", "don", "t", "see", "a", "commit", "that", "fix", "it", "NUMBER", "because", "there", "be", "nothing", "to", "fix", "see", "my", "comment", "NUMBER", "You", "have", "to", "still", "refer", "to", "them", "as", "ref", "wherever", "you", "want", "to", "use", "them", "NUMBER", "Yes", "that", "s", "exactly", "how", "I", "m", "use", "them", "NUMBER", "So", "why", "be", "swagger", "validate", "still", "complaining", "about", "path", "param", "userId", "be", "not", "present", "in", "path", "with", "the", "example", "initially", "presented", "I", "update", "to", "the", "latest", "master", "The", "issue", "be", "NOT", "FIXED", "NUMBER", "Here", "be", "another", "example", "NUMBER", "Parameter", "userId", "be", "use", "in", "path", "users", "userId", "NUMBER", "It", "be", "not", "use", "in", "either", "path", "foo", "and", "bar", "NUMBER", "The", "issue", "be", "that", "each", "parameter", "in", "parameters", "be", "report", "as", "a", "error", "for", "any", "operation", "where", "it", "be", "NOT", "use", "NUMBER", "The", "output", "The", "swagger", "spec", "at", "global", "parameters", "NUMBER", "json", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "path", "param", "userId", "be", "not", "present", "in", "path", "foo", "path", "param", "userId", "be", "not", "present", "in", "path", "bar", "The", "spec", "json", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "test", "of", "Swagger", "global", "parameters", "parameters", "userId", "name", "userId", "in", "path", "type", "string", "required", "true", "paths", "foo", "get", "responses", "NUMBER", "description", "Successful", "bar", "get", "responses", "NUMBER", "description", "Successful", "users", "userId", "parameters", "ref", "parameters", "userId", "get", "responses", "NUMBER", "description", "Successful", "Parameters", "in", "global", "scope", "seem", "to", "be", "fix", "NUMBER", "But", "there", "be", "also", "an", "issue", "with", "parameters", "defined", "at", "path", "scope", "NUMBER", "I", "will", "open", "a", "separate", "issue", "NUMBER", "This", "spec", "be", "invalid", "invalid", "property", "be", "not", "allow", "in", "a", "pathItem", "but", "go", "swagger", "accepts", "it", "json", "swagger", "NUMBER", "info", "version", "NUMBER", "title", "test", "of", "Swagger", "of", "additionalProperties", "in", "pathItem", "paths", "invalid", "property", "null", "Only", "vendor", "extensions", "properties", "starting", "with", "x", "should", "be", "accepted", "in", "addition", "to", "the", "normalized", "properties", "NUMBER", "See", "definitions", "pathItem", "in", "the", "JSON", "schema", "for", "Swagger", "NUMBER", "swagger", "api", "swagger", "spec", "blob", "master", "schemas", "v", "NUMBER", "schema", "NUMBER", "json", "L", "NUMBER", "NUMBER", "this", "could", "be", "a", "validation", "error", "though", "That", "s", "what", "I", "mean", "NUMBER", "There", "be", "NUMBER", "issue", "that", "I", "find", "NUMBER", "For", "the", "test", "swagger", "file", "you", "can", "download", "from", "LINK", "swagger", "file", "blob", "master", "SwaggerValidationIssues", "NUMBER", "json", "NUMBER", "Validation", "error", "while", "define", "parameter", "with", "more", "than", "one", "ref", "field", "line", "NUMBER", "NUMBER", "NUMBER", "LINK", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "bb", "NUMBER", "d", "NUMBER", "a", "NUMBER", "d", "NUMBER", "png", "NUMBER", "Validate", "Error", "while", "define", "response", "definition", "and", "including", "examples", "element", "line", "NUMBER", "NUMBER", "LINK", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "c", "NUMBER", "a", "e", "NUMBER", "c", "NUMBER", "f", "NUMBER", "a", "NUMBER", "png", "NUMBER", "Validate", "Error", "while", "define", "parameter", "definition", "and", "including", "path", "parameter", "element", "line", "NUMBER", "and", "line", "NUMBER", "NUMBER", "LINK", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "png", "They", "should", "valid", "swagger", "file", "but", "go", "swagger", "validator", "treat", "it", "as", "invalid", "NUMBER", "NUMBER", "different", "issue", "should", "be", "filled", "a", "NUMBER", "different", "tickets", "NUMBER", "Spec", "yml", "order", "post", "tags", "order", "operationId", "postOrder", "summary", "Creates", "a", "new", "Order", "NUMBER", "parameters", "name", "order", "in", "body", "required", "true", "schema", "ref", "definitions", "OrderPlacement", "Generated", "handler", "looks", "like", "this", "go", "PostOrderHandlerFunc", "turns", "a", "function", "with", "the", "right", "signature", "into", "a", "post", "order", "handler", "type", "PostOrderHandlerFunc", "func", "PostOrderParams", "models", "NUMBER", "Principal", "models", "NUMBER", "Result", "error", "func", "fn", "PostOrderHandlerFunc", "Handle", "params", "PostOrderParams", "principal", "models", "NUMBER", "Principal", "models", "NUMBER", "Result", "error", "return", "fn", "params", "principal", "And", "the", "generate", "parameter", "object", "looks", "like", "this", "go", "PostOrderParams", "contains", "all", "the", "bound", "params", "for", "the", "post", "order", "operation", "typically", "these", "be", "obtained", "from", "a", "http", "NUMBER", "Request", "type", "PostOrderParams", "struct", "info", "about", "the", "order", "to", "place", "along", "with", "payment", "authorization", "token", "NUMBER", "Order", "models", "NUMBER", "OrderPlacement", "I", "think", "either", "The", "Order", "field", "should", "be", "a", "pointer", "or", "NUMBER", "The", "PostOrderParams", "in", "the", "handler", "signature", "should", "be", "a", "pointer", "NUMBER", "Defined", "a", "response", "in", "it", "the", "schema", "specify", "array", "type", "NUMBER", "The", "validation", "fail", "with", "message", "response", "body", "for", "operationxx", "be", "a", "collection", "without", "an", "element", "type", "NUMBER", "responses", "NUMBER", "description", "Successful", "operation", "schema", "type", "array", "ref", "definitions", "DeleteResponse", "NUMBER", "I", "m", "having", "a", "similar", "problem", "for", "a", "response", "like", "children", "type", "array", "items", "ref", "definitions", "NodeTree", "it", "works", "fine", "as", "expected", "NUMBER", "But", "when", "we", "have", "the", "follow", "children", "type", "array", "It", "be", "fail", "so", "the", "ref", "be", "be", "undefined", "because", "that", "NUMBER", "Do", "you", "have", "any", "hit", "about", "how", "to", "solve", "this", "problem", "Thanks", "in", "advance", "NUMBER", "casualjim", "I", "find", "another", "issue", "relate", "LINK", "maven", "plugin", "issue", "NUMBER", "casualjim", "Like", "you", "have", "asked", "follow", "my", "context", "include", "response", "class", "end", "point", "and", "js", "where", "the", "code", "brokers", "because", "of", "a", "undefined", "property", "ref", "NUMBER", "Related", "kongchen", "swagger", "maven", "plugin", "NUMBER", "public", "class", "NodeTree", "private", "Long", "id", "private", "String", "name", "private", "List", "TAG", "children", "GETTERS", "AND", "SETTERS", "My", "documented", "REST", "end", "point", "NUMBER", "POST", "Path", "treeId", "nodes", "Produces", "MediaType", "NUMBER", "APPLICATION_JSON", "MediaType", "NUMBER", "APPLICATION_XML", "Consumes", "MediaType", "NUMBER", "APPLICATION_JSON", "MediaType", "NUMBER", "APPLICATION_XML", "ApiOperation", "value", "Create", "node", "tree", "NUMBER", "ApiImplicitParams", "value", "ApiImplicitParam", "name", "nodeTree", "value", "required", "true", "dataType", "NodeTree", "paramType", "data", "ApiResponses", "value", "ApiResponse", "code", "NUMBER", "message", "Succees", "response", "NodeTree", "NUMBER", "class", "public", "Response", "createNodeTree", "ApiParam", "value", "Tree", "id", "required", "true", "PathParam", "treeId", "Long", "treeId", "NodeTree", "nodeTree", "IMPLEMENTATION", "OMITED", "So", "the", "swagger", "maven", "plugin", "be", "generating", "the", "follow", "swagger", "NUMBER", "json", "NodeTree", "type", "object", "required", "name", "properties", "id", "type", "integer", "format", "int", "NUMBER", "name", "type", "string", "children", "type", "array", "Here", "miss", "the", "follow", "part", "items", "ref", "definitions", "NodeTree", "Because", "this", "the", "swagger", "client", "NUMBER", "js", "be", "breaking", "in", "the", "follow", "function", "Resolver", "NUMBER", "prototype", "NUMBER", "resolveTo", "function", "property", "objs", "it", "be", "breaking", "here", "because", "we", "don", "t", "have", "ref", "in", "the", "property", "to", "the", "type", "array", "NUMBER", "var", "ref", "property", "NUMBER", "ref", "if", "ref", "if", "ref", "NUMBER", "indexOf", "http", "NUMBER", "if", "Array", "NUMBER", "isArray", "objs", "ref", "objs", "ref", "NUMBER", "push", "obj", "property", "resolveAs", "ref", "else", "objs", "ref", "obj", "property", "resolveAs", "ref", "else", "if", "property", "NUMBER", "type", "array", "var", "items", "property", "NUMBER", "items", "this", "NUMBER", "resolveTo", "items", "objs", "I", "hope", "this", "can", "be", "useful", "in", "order", "to", "solve", "the", "problem", "NUMBER", "Regards", "NUMBER", "Willian", "NUMBER", "Hi", "I", "tried", "to", "generate", "a", "swagger", "NUMBER", "json", "file", "with", "some", "annotations", "in", "my", "Go", "code", "but", "I", "do", "not", "find", "any", "concrete", "examples", "and", "I", "have", "always", "this", "result", "swagger", "generate", "spec", "o", "NUMBER", "swagger", "NUMBER", "json", "swagger", "NUMBER", "paths", "null", "I", "tried", "those", "annotations", "from", "this", "document", "but", "it", "be", "not", "work", "properly", "or", "I", "do", "not", "know", "how", "to", "use", "them", "NUMBER", "LINK", "swagger", "go", "swagger", "scan", "Does", "an", "exemple", "of", "swagger", "generate", "spec", "exist", "I", "will", "take", "a", "look", "NUMBER", "Thanks", "compile", "a", "generate", "server", "with", "path", "parameters", "defined", "as", "type", "string", "and", "format", "uuid", "throw", "this", "error", "cannot", "use", "raw", "type", "string", "as", "type", "strfmt", "NUMBER", "UUID", "in", "assignment", "The", "raw", "parameter", "for", "bind", "Param", "function", "may", "need", "to", "be", "casted", "strfmt", "NUMBER", "UUID", "or", "any", "other", "custom", "types", "defined", "NUMBER", "Thanks", "casualjim", "I", "ll", "use", "NUMBER", "d", "NUMBER", "ba", "for", "now", "NUMBER", "Will", "post", "issue", "as", "I", "find", "them", "NUMBER", "I", "ll", "put", "in", "some", "PRs", "when", "I", "get", "the", "time", "too", "NUMBER", "When", "use", "swagger", "generate", "server", "f", "swagger", "NUMBER", "yml", "A", "myApp", "the", "imports", "for", "the", "model", "in", "the", "code", "inside", "restapi", "operations", "be", "incorrect", "NUMBER", "The", "import", "statement", "looks", "like", "this", "import", "net", "http", "github", "NUMBER", "com", "myRepo", "myApp", "operations", "models", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "httpkit", "middleware", "The", "models", "be", "in", "github", "NUMBER", "com", "myRepo", "myApp", "models", "and", "not", "in", "github", "NUMBER", "com", "myRepo", "myApp", "operations", "models", "NUMBER", "This", "causes", "compile", "error", "NUMBER", "When", "miss", "swagger", "field", "the", "validation", "pass", "NUMBER", "But", "the", "swagger", "field", "be", "required", "in", "schema", "so", "it", "should", "validate", "against", "schema", "NUMBER", "BTY", "there", "be", "three", "required", "file", "swagger", "info", "and", "paths", "but", "the", "validation", "result", "be", "different", "NUMBER", "NUMBER", "Missing", "swagger", "field", "validation", "pass", "NUMBER", "NUMBER", "Missing", "info", "validation", "failure", "fail", "get", "error", "message", "NUMBER", "info", "in", "body", "be", "required", "NUMBER", "NUMBER", "Missing", "paths", "get", "nil", "pointer", "dereference", "error", "the", "relate", "issue", "NUMBER", "So", "hope", "the", "NUMBER", "and", "NUMBER", "could", "be", "fix", "NUMBER", "casualjim", "Hi", "casualjim", "do", "we", "have", "any", "plan", "on", "this", "issue", "Thanks", "Alice", "I", "tried", "a", "few", "kinds", "of", "comments", "and", "none", "of", "them", "get", "the", "description", "filled", "swagger", "response", "photoResponse", "description", "here", "This", "one", "cause", "the", "response", "to", "not", "get", "add", "to", "the", "generate", "spec", "at", "all", "NUMBER", "swagger", "response", "photoResponse", "description", "here", "This", "one", "did", "not", "get", "the", "description", "filled", "in", "but", "the", "response", "was", "add", "to", "the", "spec", "NUMBER", "description", "here", "swagger", "response", "photoResponse", "This", "one", "get", "the", "description", "filled", "as", "the", "title", "field", "for", "that", "particular", "object", "but", "not", "as", "a", "description", "for", "the", "response", "NUMBER", "Sure", "that", "looks", "good", "to", "me", "NUMBER", "I", "could", "not", "find", "a", "way", "to", "put", "a", "message", "or", "structure", "next", "to", "each", "response", "for", "an", "api", "route", "NUMBER", "In", "swagger", "ui", "the", "response", "area", "just", "lists", "the", "response", "code", "but", "no", "description", "next", "to", "them", "NUMBER", "Is", "there", "a", "way", "to", "populate", "these", "field", "use", "code", "comments", "with", "generate", "spec", "but", "I", "think", "it", "still", "would", "be", "nice", "to", "implement", "the", "feature", "NUMBER", "I", "really", "want", "to", "set", "some", "custom", "reason", "because", "it", "really", "makes", "sense", "in", "swagger", "ui", "NUMBER", "something", "like", "this", "maybe", "NUMBER", "NUMBER", "ref", "UserResponse", "reason", "username", "already", "exists", "NUMBER", "any", "idea", "App", "engine", "apps", "use", "some", "package", "imports", "which", "don", "t", "resolve", "when", "run", "with", "go", "build", "appengine", "appengine", "datastore", "etc", "NUMBER", "But", "it", "seems", "like", "swagger", "generate", "spec", "fail", "if", "it", "can", "t", "first", "build", "my", "app", "NUMBER", "To", "support", "app", "engine", "you", "d", "need", "to", "remove", "that", "requirement", "NUMBER", "I", "would", "like", "to", "use", "go", "swagger", "with", "my", "app", "engine", "project", "so", "please", "make", "it", "parse", "the", "comments", "without", "first", "needing", "to", "build", "the", "app", "NUMBER", "I", "tried", "add", "the", "appengine", "build", "constraint", "and", "it", "didn", "t", "error", "out", "but", "it", "generate", "an", "empty", "spec", "NUMBER", "For", "an", "app", "engine", "app", "typically", "the", "main", "NUMBER", "go", "doesn", "t", "require", "any", "of", "the", "special", "appengine", "imports", "NUMBER", "however", "it", "uses", "an", "init", "function", "instead", "of", "a", "main", "function", "and", "in", "there", "be", "where", "you", "instantiate", "the", "router", "and", "bind", "all", "the", "routes", "to", "handlers", "NUMBER", "It", "be", "the", "handlers", "usually", "in", "their", "own", "separate", "file", "which", "need", "the", "appengine", "imports", "NUMBER", "I", "don", "t", "know", "if", "that", "s", "what", "you", "be", "ask", "about", "but", "I", "know", "app", "engine", "fairly", "well", "so", "I", "can", "answer", "more", "question", "if", "you", "have", "any", "NUMBER", "Fair", "enough", "if", "you", "re", "not", "interested", "in", "support", "app", "engine", "that", "s", "fine", "NUMBER", "I", "did", "try", "forking", "to", "fix", "that", "other", "bug", "that", "I", "file", "but", "the", "code", "was", "a", "bit", "over", "my", "head", "so", "I", "wasn", "t", "able", "to", "fix", "it", "NUMBER", "To", "answer", "your", "question", "app", "engine", "apps", "don", "t", "get", "compiled", "with", "go", "build", "instead", "they", "be", "run", "on", "a", "dev", "server", "provide", "by", "the", "app", "engine", "SDK", "and", "then", "they", "be", "deployed", "to", "app", "engine", "and", "run", "on", "the", "Google", "Cloud", "Platform", "infrastructure", "NUMBER", "The", "only", "reason", "they", "don", "t", "compile", "be", "because", "some", "of", "the", "package", "appengine", "appengine", "datastore", "etc", "NUMBER", "be", "only", "available", "in", "this", "SDK", "environment", "they", "be", "not", "find", "in", "GOPATH", "NUMBER", "Maybe", "app", "engine", "could", "improve", "this", "situation", "in", "the", "future", "and", "then", "go", "swagger", "wouldn", "t", "have", "to", "change", "to", "support", "it", "but", "as", "it", "stands", "now", "this", "will", "not", "work", "with", "any", "app", "engine", "apps", "that", "use", "any", "of", "the", "appengine", "specific", "imports", "NUMBER", "I", "will", "go", "back", "to", "use", "github", "NUMBER", "com", "yvasiyarov", "swagger", "for", "now", "which", "doesn", "t", "require", "the", "app", "to", "build", "to", "generate", "the", "spec", "but", "it", "be", "also", "not", "generating", "swagger", "NUMBER", "so", "I", "hope", "I", "can", "use", "your", "package", "sometime", "in", "the", "future", "NUMBER", "Hmm", "that", "be", "an", "interesting", "thought", "NUMBER", "I", "will", "experiment", "more", "on", "this", "today", "NUMBER", "The", "app", "engine", "SDK", "definitely", "uses", "the", "regular", "system", "GOPATH", "to", "resolve", "most", "of", "the", "include", "but", "it", "maybe", "has", "another", "internal", "GOPATH", "also", "I", "m", "not", "sure", "NUMBER", "Will", "post", "my", "findings", "a", "bit", "later", "NUMBER", "Wow", "You", "re", "right", "man", "All", "that", "was", "needed", "to", "make", "generate", "spec", "work", "was", "to", "add", "this", "to", "GOPATH", "go_appengine_sdk_location", "goroot", "The", "appengine", "include", "be", "in", "there", "NUMBER", "It", "s", "work", "now", "thanks", "for", "the", "insight", "defcronyke", "casualjim", "this", "thread", "be", "an", "awesome", "reading", "NUMBER", "I", "m", "glad", "that", "I", "could", "use", "go", "appengine", "swagger", "with", "your", "validation", "NUMBER", "Thanks", "again", "for", "the", "discussion", "When", "trying", "to", "run", "swagger", "ui", "with", "a", "swagger", "NUMBER", "json", "generate", "from", "your", "include", "petstore", "example", "swagger", "ui", "error", "out", "with", "TypeError", "spec", "be", "null", "I", "compared", "the", "generate", "spec", "with", "the", "offical", "petstore", "swagger", "NUMBER", "json", "and", "notice", "swagger", "NUMBER", "was", "miss", "from", "the", "beginning", "of", "the", "generate", "one", "and", "after", "manually", "add", "it", "the", "generate", "spec", "then", "worked", "with", "swagger", "ui", "NUMBER", "Please", "fix", "the", "generator", "so", "that", "generate", "specs", "work", "with", "swagger", "ui", "NUMBER", "My", "workaround", "was", "to", "use", "a", "bash", "script", "to", "inject", "the", "swagger", "NUMBER", "at", "the", "beginning", "after", "generating", "the", "spec", "but", "I", "guess", "that", "works", "too", "NUMBER", "I", "hope", "you", "ll", "fix", "this", "though", "since", "swagger", "NUMBER", "spec", "says", "the", "swagger", "field", "be", "required", "NUMBER", "Just", "a", "quick", "followup", "to", "mention", "that", "the", "o", "flag", "isn", "t", "work", "so", "to", "save", "the", "spec", "to", "a", "swagger", "NUMBER", "json", "file", "it", "was", "needed", "to", "use", "file", "redirection", "swagger", "generate", "spec", "swagger", "NUMBER", "json", "NUMBER", "Because", "of", "this", "the", "workaround", "you", "mention", "won", "t", "work", "NUMBER", "Upon", "further", "investigation", "the", "field", "should", "be", "swagger", "NUMBER", "the", "NUMBER", "must", "be", "a", "string", "and", "also", "the", "schema", "field", "must", "now", "be", "remove", "otherwise", "swagger", "ui", "shows", "the", "swagger", "to", "be", "invalid", "NUMBER", "AFAIK", "This", "be", "valid", "JSON", "schema", "references", "yaml", "definitions", "ref", "another", "file", "NUMBER", "json", "definitions", "This", "should", "be", "support", "in", "go", "swagger", "NUMBER", "Not", "sure", "how", "much", "effort", "be", "needed", "tho", "NUMBER", "This", "allows", "multiple", "schema", "to", "share", "definitions", "or", "for", "splitting", "large", "schema", "into", "smaller", "file", "for", "example", "NUMBER", "Its", "part", "of", "JSON", "Schema", "which", "I", "think", "be", "what", "the", "swagger", "spec", "defers", "to", "NUMBER", "Not", "sure", "if", "the", "extent", "be", "specified", "in", "the", "schema", "I", "ll", "dig", "up", "something", "NUMBER", "It", "do", "enable", "a", "lot", "of", "interesting", "use", "cases", "for", "the", "specs", "that", "we", "want", "to", "use", "though", "NUMBER", "image", "LINK", "NUMBER", "bc", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "bc", "NUMBER", "c", "NUMBER", "jpg", "This", "be", "from", "the", "spec", "on", "the", "swagger", "NUMBER", "io", "site", "NUMBER", "So", "yeah", "it", "be", "officially", "recommended", "I", "ll", "see", "if", "I", "can", "help", "you", "with", "a", "PR", "People", "tend", "to", "confuse", "the", "structure", "of", "the", "Swagger", "spec", "with", "JSON", "Schema", "because", "there", "be", "similarities", "between", "the", "two", "NUMBER", "That", "said", "just", "because", "we", "have", "definitions", "in", "the", "Swagger", "spec", "doesn", "t", "mean", "it", "s", "the", "same", "definitions", "as", "defined", "by", "JSON", "Schema", "NUMBER", "We", "use", "the", "same", "name", "but", "it", "s", "not", "exactly", "the", "same", "thing", "NUMBER", "Right", "now", "we", "do", "not", "allow", "referencing", "the", "entire", "definitions", "to", "an", "external", "source", "NUMBER", "casualjim", "webron", "the", "markdown", "you", "linked", "contained", "the", "exact", "same", "text", "NUMBER", "LINK", "api", "swagger", "spec", "blob", "master", "version", "NUMBER", "md", "file", "structure", "However", "parts", "of", "the", "definitions", "can", "be", "split", "into", "separate", "file", "at", "the", "discretion", "of", "the", "user", "NUMBER", "This", "be", "applicable", "for", "ref", "field", "in", "the", "specification", "as", "follows", "from", "the", "JSON", "Schema", "definitions", "NUMBER", "I", "m", "not", "confusing", "swagger", "with", "JSON", "Schema", "but", "this", "be", "in", "the", "spec", "NUMBER", "So", "if", "this", "shouldn", "t", "be", "support", "why", "be", "it", "still", "in", "the", "spec", "Should", "it", "be", "remove", "As", "I", "stated", "earlier", "though", "the", "spec", "file", "gets", "large", "pretty", "quickly", "as", "we", "re", "add", "features", "NUMBER", "The", "ability", "to", "compose", "them", "up", "from", "smaller", "file", "be", "a", "very", "crucial", "feature", "for", "us", "NUMBER", "So", "re", "posting", "from", "the", "chat", "in", "case", "anyone", "else", "s", "searching", "for", "this", "issue", "Per", "model", "reference", "works", "NUMBER", "Referencing", "the", "whole", "definitions", "key", "do", "not", "NUMBER", "WORKS", "yaml", "definitions", "User", "ref", "another", "file", "NUMBER", "json", "definitions", "User", "ALSO", "WORKS", "yaml", "definitions", "User", "ref", "LINK", "definitions", "User", "DOES", "NOT", "WORK", "yaml", "definitions", "ref", "LINK", "definitions", "So", "they", "be", "always", "generate", "in", "the", "same", "deterministic", "order", "NUMBER", "Otherwise", "re", "run", "the", "generator", "will", "result", "in", "change", "code", "even", "in", "places", "where", "the", "specification", "be", "unchanged", "NUMBER", "casualjim", "I", "m", "run", "into", "this", "and", "it", "s", "make", "update", "API", "bindings", "really", "troublesome", "because", "diffs", "become", "incomprehensible", "NUMBER", "Is", "it", "possible", "to", "get", "this", "PR", "update", "and", "merge", "in", "Would", "be", "glad", "to", "test", "patches", "NUMBER", "casualjim", "Client", "parameters", "NUMBER", "It", "looks", "like", "NUMBER", "e", "NUMBER", "c", "NUMBER", "f", "NUMBER", "fix", "part", "of", "it", "but", "the", "client", "appname", "_frontend_client", "NUMBER", "go", "file", "be", "still", "not", "deterministic", "NUMBER", "If", "you", "want", "this", "file", "as", "a", "new", "issue", "let", "me", "know", "NUMBER", "Example", "First", "run", "diff", "git", "a", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "b", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "index", "c", "NUMBER", "c", "NUMBER", "b", "NUMBER", "dc", "NUMBER", "a", "NUMBER", "NUMBER", "a", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "b", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "client", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "archivedlogs", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "billing", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "build", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "discovery", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "team", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "trigger", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "user", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "userfiles", "New", "creates", "a", "new", "quay", "frontend", "client", "func", "New", "transport", "client", "NUMBER", "Transport", "formats", "strfmt", "NUMBER", "Registry", "QuayFrontend", "cli", "new", "QuayFrontend", "cli", "NUMBER", "Logs", "logs", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Repositorynotification", "repositorynotification", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Secscan", "secscan", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "User", "user", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Repository", "repository", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Image", "image", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "User", "user", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Billing", "billing", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Tag", "tag", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Repotoken", "repotoken", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Repositorynotification", "repositorynotification", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Robot", "robot", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Logs", "logs", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Build", "build", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Permission", "permission", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Organization", "organization", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Robot", "robot", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Permission", "permission", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Prototype", "prototype", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Search", "search", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Team", "team", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Billing", "billing", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Archivedlogs", "archivedlogs", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Userfiles", "userfiles", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Trigger", "trigger", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Tag", "tag", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Repository", "repository", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Search", "search", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Prototype", "prototype", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Discovery", "discovery", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Image", "image", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Trigger", "trigger", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Organization", "organization", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Secscan", "secscan", "NUMBER", "New", "transport", "formats", "return", "cli", "QuayFrontend", "be", "a", "client", "for", "quay", "frontend", "type", "QuayFrontend", "struct", "Logs", "logs", "NUMBER", "Client", "Repositorynotification", "repositorynotification", "NUMBER", "Client", "Secscan", "secscan", "NUMBER", "Client", "User", "user", "NUMBER", "Client", "Repository", "repository", "NUMBER", "Client", "Image", "image", "NUMBER", "Client", "User", "user", "NUMBER", "Client", "Billing", "billing", "NUMBER", "Client", "Tag", "tag", "NUMBER", "Client", "Repotoken", "repotoken", "NUMBER", "Client", "Repositorynotification", "repositorynotification", "NUMBER", "Client", "Robot", "robot", "NUMBER", "Client", "Logs", "logs", "NUMBER", "Client", "Build", "build", "NUMBER", "Client", "Permission", "permission", "NUMBER", "Client", "Organization", "organization", "NUMBER", "Client", "Robot", "robot", "NUMBER", "Client", "Permission", "permission", "NUMBER", "Client", "Prototype", "prototype", "NUMBER", "Client", "Search", "search", "NUMBER", "Client", "Team", "team", "NUMBER", "Client", "Billing", "billing", "NUMBER", "Client", "Archivedlogs", "archivedlogs", "NUMBER", "Client", "Userfiles", "userfiles", "NUMBER", "Client", "Trigger", "trigger", "NUMBER", "Client", "Tag", "tag", "NUMBER", "Client", "Repository", "repository", "NUMBER", "Client", "Search", "search", "NUMBER", "Client", "Prototype", "prototype", "NUMBER", "Client", "Discovery", "discovery", "NUMBER", "Client", "Image", "image", "NUMBER", "Client", "Trigger", "trigger", "NUMBER", "Client", "Organization", "organization", "NUMBER", "Client", "Secscan", "secscan", "NUMBER", "Client", "Second", "run", "diff", "git", "a", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "b", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "index", "c", "NUMBER", "c", "NUMBER", "b", "NUMBER", "a", "NUMBER", "a", "NUMBER", "NUMBER", "a", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "b", "common", "go", "quay", "client", "quay_frontend_client", "NUMBER", "go", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "client", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "archivedlogs", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "billing", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "build", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "discovery", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "team", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "trigger", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "user", "github", "NUMBER", "com", "foo", "test", "common", "go", "quay", "client", "userfiles", "New", "creates", "a", "new", "quay", "frontend", "client", "func", "New", "transport", "client", "NUMBER", "Transport", "formats", "strfmt", "NUMBER", "Registry", "QuayFrontend", "cli", "new", "QuayFrontend", "cli", "NUMBER", "Logs", "logs", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Secscan", "secscan", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Trigger", "trigger", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Repository", "repository", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "User", "user", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Repotoken", "repotoken", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Permission", "permission", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Repositorynotification", "repositorynotification", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Build", "build", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Team", "team", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Permission", "permission", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Discovery", "discovery", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Robot", "robot", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Image", "image", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Prototype", "prototype", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Archivedlogs", "archivedlogs", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Team", "team", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Build", "build", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Billing", "billing", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Organization", "organization", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Userfiles", "userfiles", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Search", "search", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Tag", "tag", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "User", "user", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Search", "search", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Logs", "logs", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Discovery", "discovery", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Secscan", "secscan", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Image", "image", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Tag", "tag", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Trigger", "trigger", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Robot", "robot", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Organization", "organization", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Prototype", "prototype", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Repotoken", "repotoken", "NUMBER", "New", "transport", "formats", "cli", "NUMBER", "Billing", "billing", "NUMBER", "New", "transport", "formats", "return", "cli", "QuayFrontend", "be", "a", "client", "for", "quay", "frontend", "type", "QuayFrontend", "struct", "Logs", "logs", "NUMBER", "Client", "Secscan", "secscan", "NUMBER", "Client", "Trigger", "trigger", "NUMBER", "Client", "Repository", "repository", "NUMBER", "Client", "User", "user", "NUMBER", "Client", "Repotoken", "repotoken", "NUMBER", "Client", "Permission", "permission", "NUMBER", "Client", "Repositorynotification", "repositorynotification", "NUMBER", "Client", "Build", "build", "NUMBER", "Client", "Team", "team", "NUMBER", "Client", "Permission", "permission", "NUMBER", "Client", "Discovery", "discovery", "NUMBER", "Client", "Robot", "robot", "NUMBER", "Client", "Image", "image", "NUMBER", "Client", "Prototype", "prototype", "NUMBER", "Client", "Archivedlogs", "archivedlogs", "NUMBER", "Client", "Team", "team", "NUMBER", "Client", "Build", "build", "NUMBER", "Client", "Billing", "billing", "NUMBER", "Client", "Organization", "organization", "NUMBER", "Client", "Userfiles", "userfiles", "NUMBER", "Client", "Search", "search", "NUMBER", "Client", "Tag", "tag", "NUMBER", "Client", "User", "user", "NUMBER", "Client", "Search", "search", "NUMBER", "Client", "Logs", "logs", "NUMBER", "Client", "Discovery", "discovery", "NUMBER", "Client", "Secscan", "secscan", "NUMBER", "Client", "Image", "image", "NUMBER", "Client", "Tag", "tag", "NUMBER", "Client", "Trigger", "trigger", "NUMBER", "Client", "Robot", "robot", "NUMBER", "Client", "Organization", "organization", "NUMBER", "Client", "Prototype", "prototype", "NUMBER", "Client", "Repotoken", "repotoken", "NUMBER", "Client", "Billing", "billing", "NUMBER", "Client", "Relevant", "section", "yaml", "paths", "_debug", "get", "tags", "debug", "operationId", "getDebug", "summary", "Debug", "route", "strictly", "for", "test", "NUMBER", "responses", "NUMBER", "descrition", "Debug", "result", "NUMBER", "schema", "type", "any", "Produces", "the", "following", "type", "go", "type", "GetDebugHandlerFunc", "func", "models", "NUMBER", "User", "interface", "error", "func", "fn", "GetDebugHandlerFunc", "Handle", "principal", "models", "NUMBER", "User", "interface", "error", "return", "fn", "principal", "Notice", "the", "interface", "there", "NUMBER", "I", "think", "this", "should", "be", "plain", "non", "pointer", "interface", "Relevant", "part", "from", "my", "current", "swagger", "NUMBER", "yaml", "yaml", "securityDefinitions", "api_key", "type", "apiKey", "name", "api_key", "in", "query", "security", "api_key", "And", "here", "be", "the", "generate", "AuthenticatorsFor", "method", "in", "the", "main", "API", "interface", "file", "AuthenticatorsFor", "gets", "the", "authenticators", "for", "the", "specified", "security", "schemes", "func", "t", "TixGenAPI", "AuthenticatorsFor", "schemes", "map", "string", "spec", "NUMBER", "SecurityScheme", "map", "string", "httpkit", "NUMBER", "Authenticator", "result", "make", "map", "string", "httpkit", "NUMBER", "Authenticator", "for", "name", "scheme", "range", "schemes", "switch", "name", "case", "apiKey", "result", "name", "security", "NUMBER", "APIKeyAuth", "scheme", "NUMBER", "Name", "scheme", "NUMBER", "In", "func", "tok", "string", "interface", "error", "return", "t", "NUMBER", "APIKeyAuth", "tok", "return", "result", "However", "if", "I", "add", "fmt", "NUMBER", "Println", "name", "to", "the", "loop", "only", "api_key", "be", "printed", "NUMBER", "So", "authenticators", "will", "never", "match", "NUMBER", "I", "think", "this", "be", "relate", "to", "the", "security", "definition", "names", "be", "mangled", "at", "LINK", "swagger", "go", "swagger", "blob", "NUMBER", "e", "NUMBER", "ac", "NUMBER", "a", "NUMBER", "f", "NUMBER", "ddfe", "NUMBER", "c", "NUMBER", "df", "NUMBER", "c", "NUMBER", "d", "NUMBER", "ca", "NUMBER", "generator", "support", "NUMBER", "go", "L", "NUMBER", "NUMBER", "If", "i", "change", "the", "referenced", "line", "to", "remove", "swag", "NUMBER", "ToJSON", "don", "t", "touch", "the", "name", "everything", "works", "correctly", "NUMBER", "But", "I", "be", "not", "sure", "if", "that", "be", "the", "correct", "fix", "NUMBER", "I", "follow", "the", "homepage", "of", "the", "project", "swagger", "validate", "LINK", "api", "swagger", "spec", "master", "examples", "v", "NUMBER", "json", "petstore", "expanded", "NUMBER", "json", "but", "have", "error", "The", "swagger", "spec", "at", "LINK", "api", "swagger", "spec", "master", "examples", "v", "NUMBER", "json", "petstore", "expanded", "NUMBER", "json", "be", "invalid", "against", "swagger", "specification", "NUMBER", "see", "error", "host", "in", "body", "must", "be", "of", "type", "uri", "petstore", "NUMBER", "swagger", "NUMBER", "io", "follow", "the", "code", "may", "be", "something", "wrong", "when", "call", "function", "func", "IsStrictURI", "str", "string", "bool", "_", "err", "url", "NUMBER", "ParseRequestURI", "str", "return", "err", "nil", "github", "NUMBER", "com", "go", "swagger", "go", "swagger", "strfmt", "default", "NUMBER", "go", "the", "params", "pass", "to", "IsStrictURI", "be", "petstore", "NUMBER", "swagger", "NUMBER", "io", "be", "that", "should", "be", "LINK", "or", "LINK", "but", "the", "file", "be", "from", "swagger", "NUMBER", "official", "example", "anything", "wrong", "here", "image", "LINK", "NUMBER", "dfd", "NUMBER", "e", "NUMBER", "NUMBER", "f", "NUMBER", "f", "NUMBER", "b", "NUMBER", "c", "NUMBER", "c", "NUMBER", "png", "thanks", "Some", "structs", "like", "simpleSchema", "LINK", "swagger", "go", "swagger", "blob", "master", "spec", "items", "NUMBER", "go", "L", "NUMBER", "L", "NUMBER", "should", "be", "export", "NUMBER", "Example", "usecase", "pseudo", "code", "func", "setType", "p", "spec", "NUMBER", "SimpleSchema", "t", "SourceType", "if", "t", "NUMBER", "IsRef", "p", "NUMBER", "Ref", "spec", "NUMBER", "MustCreateRef", "definitions", "t", "NUMBER", "GetName", "else", "p", "NUMBER", "Type", "toSwaggerType", "t", "p", "NUMBER", "Format", "toSwaggerFormat", "t", "I", "m", "work", "on", "it", "NUMBER", "But", "I", "m", "not", "sure", "if", "struct", "can", "be", "export", "directly", "NUMBER", "Do", "I", "need", "to", "do", "it", "in", "this", "way", "type", "simpleSchemaProp", "NUMBER", "type", "SimpleSchema", "simpleSchemaProp", "I", "can", "t", "remember", "but", "I", "think", "I", "created", "this", "issue", "because", "I", "need", "to", "write", "several", "function", "which", "do", "same", "thing", "NUMBER", "I", "wanted", "to", "create", "a", "function", "with", "this", "signature", "but", "I", "couldn", "t", "NUMBER", "Instead", "I", "just", "write", "several", "function", "and", "this", "be", "not", "an", "issue", "for", "me", "NUMBER", "Closing", "NUMBER", "func", "setType", "p", "spec", "NUMBER", "SimpleSchema", "t", "SourceType", "if", "t", "NUMBER", "IsRef", "p", "NUMBER", "Ref", "spec", "NUMBER", "MustCreateRef", "definitions", "t", "NUMBER", "GetName", "else", "p", "NUMBER", "Type", "toSwaggerType", "t", "p", "NUMBER", "Format", "toSwaggerFormat", "t", "Multiple", "function", "like", "func", "setItemsType", "p", "spec", "NUMBER", "Items", "t", "SourceType", "same", "code", "works", "Personally", "I", "think", "this", "should", "be", "a", "package", "separate", "from", "go", "swagger", "NUMBER", "Validations", "and", "creations", "of", "the", "value", "types", "implement", "here", "could", "be", "re", "use", "in", "a", "lot", "of", "other", "projects", "NUMBER", "My", "issue", "however", "be", "to", "request", "that", "the", "values", "implement", "basic", "sql", "NUMBER", "Scanner", "LINK", "Scanner", "and", "database", "sql", "driver", "NUMBER", "Valuer", "LINK", "Valuer", "so", "that", "text", "based", "types", "such", "as", "strfmt", "NUMBER", "Email", "and", "strfmt", "NUMBER", "UUID", "on", "the", "structs", "can", "be", "marshalled", "to", "and", "fro", "the", "database", "without", "having", "to", "define", "a", "new", "type", "NUMBER", "The", "implementation", "be", "quite", "trivial", "since", "most", "string", "types", "be", "just", "straight", "type", "renames", "so", "the", "implementation", "of", "those", "interfaces", "be", "just", "converting", "them", "back", "to", "the", "base", "string", "type", "NUMBER", "Here", "s", "an", "example", "of", "how", "I", "define", "a", "UUID", "type", "before", "go", "swagger", "go", "type", "ID", "string", "var", "__id", "ID", "asdf", "var", "_", "sql", "NUMBER", "Scanner", "__id", "var", "_", "driver", "NUMBER", "Valuer", "__id", "func", "NewID", "ID", "raw", "uuid", "NUMBER", "NewV", "NUMBER", "NUMBER", "String", "raw", "raw", "NUMBER", "len", "raw", "NUMBER", "raw", "strings", "NUMBER", "ToLower", "raw", "return", "ID", "raw", "func", "id", "ID", "Scan", "raw", "interface", "error", "switch", "v", "raw", "NUMBER", "type", "case", "byte", "id", "ID", "string", "v", "case", "string", "id", "ID", "v", "default", "fmt", "NUMBER", "Errorf", "cannot", "sql", "NUMBER", "Scanner", "NUMBER", "Scan", "to", "ID", "from", "v", "v", "return", "nil", "func", "id", "ID", "Value", "driver", "NUMBER", "Value", "error", "return", "driver", "NUMBER", "Value", "string", "id", "nil", "As", "you", "can", "see", "pretty", "trivial", "conversion", "NUMBER", "With", "this", "I", "can", "use", "this", "type", "inside", "any", "structs", "type", "User", "struct", "id", "ID", "and", "all", "it", "d", "marshal", "to", "and", "fro", "the", "db", "without", "a", "hitch", "NUMBER", "This", "be", "esp", "NUMBER", "important", "when", "use", "go", "swagger", "with", "jmoiron", "sqlx", "LINK", "or", "any", "database", "mapping", "library", "in", "general", "NUMBER", "Also", "I", "think", "the", "list", "of", "types", "might", "benefits", "from", "go", "generate", "in", "some", "way", "or", "another", "NUMBER", "Those", "MarshalText", "calls", "could", "just", "be", "generate", "NUMBER", "casualjim", "would", "you", "accept", "a", "PR", "for", "this", "Code", "should", "be", "pretty", "trivial", "NUMBER", "I", "agree", "with", "you", "casualjim", "I", "think", "it", "be", "better", "to", "keep", "any", "specific", "support", "like", "sql", "one", "out", "of", "go", "swagger", "NUMBER", "Otherwise", "things", "will", "be", "unmanageable", "NUMBER", "Closing", "since", "NUMBER", "has", "be", "merge", "NUMBER", "The", "package", "handle", "code", "currently", "assumes", "that", "the", "path", "separator", "be", "the", "slash", "and", "also", "that", "Go", "package", "paths", "and", "file", "paths", "use", "the", "same", "separator", "NUMBER", "This", "PR", "has", "small", "fix", "go", "make", "it", "work", "on", "Windows", "but", "I", "wonder", "if", "there", "be", "some", "better", "way", "e", "NUMBER", "g", "NUMBER", "something", "from", "go", "build", "to", "handle", "the", "imports", "NUMBER", "Seems", "go", "generate", "was", "not", "run", "after", "the", "package", "namespace", "change", "from", "casualjim", "go", "swagger", "NUMBER", "That", "s", "an", "unrelated", "change", "to", "the", "Windows", "one", "but", "I", "didn", "t", "create", "a", "branch", "for", "it", "let", "me", "know", "if", "you", "want", "to", "split", "NUMBER", "Sorry", "yes", "of", "course", "I", "didn", "t", "check", "after", "rebasing", "and", "the", "generate", "file", "were", "dirty", "because", "of", "line", "endings", "in", "the", "encoded", "data", "NUMBER", "Removed", "that", "commit", "now", "NUMBER", "Hi", "In", "this", "PR", "we", "include", "the", "change", "to", "just", "remove", "the", "configureapi", "NUMBER", "gotmpl", "since", "when", "moved", "it", "to", "main", "NUMBER", "gotmpl", "the", "server", "generation", "will", "still", "create", "a", "configureapi", "NUMBER", "go", "which", "be", "redundant", "NUMBER", "Of", "course", "you", "may", "have", "other", "plan", "for", "configureapi", "NUMBER", "gotmpl", "in", "addition", "to", "including", "the", "function", "configureAPI", "NUMBER", "If", "that", "s", "the", "case", "then", "feel", "free", "to", "close", "this", "PR", "otherwise", "please", "merge", "this", "as", "well", "NUMBER", "Note", "if", "you", "accept", "both", "PRs", "then", "we", "may", "need", "to", "rebase", "this", "one", "and", "resubmit", "since", "this", "one", "include", "both", "change", "NUMBER", "We", "be", "flexible", "just", "let", "us", "know", "your", "preference", "NUMBER", "Cheers", "NUMBER", "I", "use", "the", "petstore", "example", "provide", "in", "LINK", "swagger", "go", "swagger", "tree", "master", "examples", "to", "test", "the", "server", "generation", "NUMBER", "The", "generate", "code", "differs", "from", "the", "one", "exist", "in", "the", "example", "folder", "where", "the", "generate", "code", "be", "composed", "of", "NUMBER", "package", "cmd", "models", "restapi", "operations", "pet", "store", "user", "my", "generate", "code", "be", "cmd", "models", "restapi", "operations", "operations", "restapi", "pet", "store", "user", "I", "think", "that", "somewhere", "in", "the", "code", "generation", "there", "be", "an", "operations", "restapi", "instead", "of", "restapi", "operations", "NUMBER", "cc", "maximilien", "The", "generate", "code", "be", "still", "referring", "to", "casualjim", "repository", "go", "github", "NUMBER", "com", "casualjim", "go", "swagger", "github", "NUMBER", "com", "casualjim", "go", "swagger", "middleware", "github", "NUMBER", "com", "casualjim", "go", "swagger", "spec", "github", "NUMBER", "com", "casualjim", "go", "swagger", "strfmt", "Moreover", "the", "middleware", "package", "be", "actually", "under", "github", "NUMBER", "com", "casualjim", "go", "swagger", "middleware", "httpkit", "middleware", "NUMBER", "In", "some", "other", "imports", "there", "be", "a", "reference", "to", "validation", "package", "go", "github", "NUMBER", "com", "casualjim", "go", "swagger", "validation", "I", "guess", "that", "it", "should", "refer", "to", "validate", "package", "Could", "you", "please", "point", "me", "to", "the", "right", "place", "in", "the", "code", "so", "I", "can", "update", "it", "NUMBER", "I", "would", "be", "happy", "to", "contribute", "and", "help", "NUMBER", "Having", "the", "same", "issue", "even", "by", "modifying", "the", "template", "NUMBER", "Could", "it", "be", "that", "the", "generator", "be", "referring", "to", "external", "template", "Because", "even", "when", "I", "remove", "the", "template", "completely", "the", "server", "was", "generate", "with", "the", "wrong", "package", "paths", "NUMBER", "Thanks", "this", "was", "helpful", "casualjim", "did", "that", "for", "you", "Tagged", "operations", "still", "have", "casualjim", "in", "there", "tho", "NUMBER", "I", "be", "not", "sure", "where", "that", "came", "from", "NUMBER", "I", "find", "that", "when", "I", "use", "target", "I", "was", "still", "get", "restapi", "stuff", "ditched", "into", "my", "gopath", "NUMBER", "I", "believe", "the", "fix", "below", "covers", "that", "issue", "NUMBER", "I", "have", "a", "sample", "description", "of", "an", "API", "json", "swagger", "NUMBER", "NUMBER", "description", "Checks", "for", "VM", "presence", "NUMBER", "n", "parameters", "name", "vm_cid", "in", "query", "description", "cloud", "ID", "of", "the", "VM", "created", "disk", "will", "most", "likely", "be", "attached", "nit", "could", "be", "use", "to", "optimize", "disk", "placement", "so", "that", "disk", "be", "located", "near", "the", "VM", "n", "required", "true", "type", "string", "NUMBER", "The", "generate", "code", "fail", "to", "compile", "because", "the", "description", "element", "be", "transformed", "to", "multiple", "lines", "where", "the", "comment", "covers", "just", "the", "first", "line", "NUMBER", "Here", "be", "the", "code", "for", "parameters", "NUMBER", "go", "go", "type", "Params", "struct", "cloud", "ID", "of", "the", "VM", "created", "disk", "will", "most", "likely", "be", "attached", "it", "could", "be", "use", "to", "optimize", "disk", "placement", "so", "that", "disk", "be", "located", "near", "the", "VM", "VMCid", "string", "It", "seems", "that", "the", "n", "in", "the", "description", "be", "cause", "this", "issue", "and", "when", "I", "remove", "it", "the", "generation", "went", "through", "NUMBER", "I", "tried", "to", "resolve", "the", "issue", "but", "unfortunately", "I", "didn", "t", "find", "the", "right", "code", "to", "modify", "NUMBER", "Any", "hints", "to", "help", "cc", "maximilien", "Seems", "the", "generator", "also", "ignored", "responses", "when", "multiple", "entries", "be", "defined", "Example", "operation", "yaml", "put", "tags", "tweets", "operationId", "putTweet", "summary", "Send", "a", "single", "tweet", "NUMBER", "parameters", "name", "tweet", "in", "body", "description", "The", "tweet", "to", "post", "required", "true", "schema", "ref", "definitions", "Tweet", "responses", "NUMBER", "description", "Tweet", "has", "be", "saved", "NUMBER", "schema", "ref", "definitions", "Result", "NUMBER", "description", "There", "be", "validation", "error", "s", "NUMBER", "schema", "ref", "definitions", "Result", "This", "result", "in", "the", "following", "signature", "be", "generate", "for", "the", "operation", "go", "type", "PutTweetHandlerFunc", "func", "PutTweetParams", "error", "So", "no", "mention", "of", "the", "Result", "struct", "there", "NUMBER", "Assuming", "this", "be", "because", "there", "be", "no", "code", "in", "go", "swagger", "to", "differentiate", "between", "different", "response", "code", "yet", "yeah", "it", "s", "a", "best", "effort", "one", "NUMBER", "we", "can", "close", "this", "issue", "with", "your", "comment", "NUMBER", "it", "s", "resolve", "Where", "would", "you", "place", "this", "issue", "on", "your", "roadmap", "I", "m", "debating", "waiting", "for", "this", "feature", "or", "going", "the", "route", "of", "Apache", "Thrift", "NUMBER", "which", "be", "not", "nearly", "as", "desirable", "since", "my", "API", "be", "already", "use", "Swagger", "NUMBER", "Thanks", "and", "great", "work", "thus", "far", "If", "you", "need", "a", "guinea", "pig", "tester", "for", "an", "experimental", "branch", "I", "hereby", "volunteering", "myself", "sunglasses", "This", "be", "a", "really", "great", "idea", "and", "I", "d", "be", "willing", "to", "help", "out", "in", "any", "way", "I", "can", "NUMBER", "Any", "thoughts", "on", "possibly", "make", "this", "a", "part", "of", "swagger", "codegen", "LINK", "api", "swagger", "codegen", "tree", "master", "modules", "swagger", "codegen", "src", "main", "resources", "Thanks", "for", "the", "info", "When", "the", "time", "comes", "I", "might", "be", "willing", "to", "help", "port", "to", "swagger", "codegen", "since", "that", "was", "my", "first", "stop", "when", "trying", "to", "figure", "out", "be", "there", "a", "swagger", "client", "generator", "for", "go", "I", "imagine", "others", "will", "check", "there", "as", "well", "NUMBER", "nice", "I", "m", "really", "looking", "forward", "to", "having", "this", "generator", "NUMBER", "You", "have", "pretty", "much", "everything", "but", "the", "one", "thing", "that", "be", "needed", "password", "here", "LINK", "swagger", "whats", "inside", "This", "be", "address", "now", "by", "allowing", "users", "to", "specify", "named", "custom", "string", "formats", "NUMBER", "So", "people", "can", "implement", "passwords", "whichever", "way", "they", "see", "fit", "NUMBER"], "text_count": [0, 46939, 10423, 5402, 3861, 331, 3906, 10, 163, 4997, 7365, 11804, 6993, 5013, 4709, 2830, 0, 0, 0, 0, 20036, 3734, 2156, 1576, 3237, 1928, 0, 0, 0, 0, 34556, 21057, 13731, 373, 6367, 1694, 0, 0, 0, 0, 56965, 117, 34602, 32254, 10473, 0, 0, 0, 0, 0, 10638, 4483, 8175, 2164, 3218, 1849, 3757, 0, 0, 0, 34319, 1532, 29290, 1271, 0, 0, 0, 0, 0, 0, 24940, 2642, 17795, 8208, 3162, 0, 0, 0, 0, 0, 56507, 34936, 3644, 15846, 1899, 1774, 0, 0, 0, 0, 1994, 14672, 869, 0, 0, 0, 0, 0, 0, 0, 33014, 10426, 16678, 6503, 0, 0, 0, 0, 0, 0, 84586, 142264, 1954, 6699, 1241, 2339, 0, 0, 0, 0, 202143, 625, 145160, 2425, 27129, 51435]}]