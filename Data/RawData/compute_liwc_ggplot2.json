[{"repo": "ggplot2", "type": "elite", "title": "", "number of text": 811, "text": "  It would be nice to be able to do something like:\n\n``` R\nscale_shape_manual(values = list(raster_shape('file1.png'), vector_shape('file2.svg'))\n```\n\nThere also needs to be some way to control the relative sizing of the shapes.\n\nAlso, it would be nice to be able to use shapes for legends, even when there are no point geoms. Like the example in the first answer here: http://stackoverflow.com/questions/13148404/use-image-instead-of-labels-in-ggplot2-legend/13148768\n  In some scales (like linetype, shape, x, and y), NAs values result in the geom not being displayed. In other scales (like colour and fill), NAs result in the the geom showing, with a special value. This is something that should be made consistent at some point, or documented thoroughly.\n\nFor example, see #711.\n  From https://groups.google.com/forum/?fromgroups=#!topic/ggplot2/w6PA7ifC_lc\n\n``` R\nggplot(data=msleep, aes(x=brainwt, y=bodywt, linetype=factor(vore)), group=vore)+ geom_line()\n# Error in grid.Call.graphics(L_lines, x$x, x$y, index, x$arrow) : \n#   invalid hex digit in 'color' or 'lty'\n# In addition: Warning message:\n# Removed 25 rows containing missing values (geom_path). \n\n\n# This works\nms <- msleep[ !is.na(msleep$vore), ]\nggplot(data=ms, aes(x=brainwt, y=bodywt, linetype=factor(vore)), group=vore)+ geom_line()\n```\n Maybe the solution is to have it default to `na.value=\"solid\"` (or some other value)?\n @BrianDiggs thanks for taking a close look at this. As you noticed, I also decided to set it to `\"blank\"`.\n\nI think it's OK to leave `scale_linetype_identity` unchanged. As for `scale_linetype_manual`, it's less clear to me whether it `na.value` should be changed. If so, then manual scales with similar behavior should also be changed (like shape).\n I haven't tried all of the examples, but I think that the missing values are because of NAs in the x and y variables, not the linetype.\n\nEdit: oh wait, I see that you're talking about the manual and identity scales.\n  Wow, I made a mess of that. Thanks for the fixes!\n  Example:\n\n``` R\npoints <- data.frame(x=runif(50, -1, 1), y=runif(50, -1, 1))\nsegments <- data.frame(a=0.75, b=-0.75, c=-0.5, d=0.5)\n\n\n# Base plot with points\np <- ggplot() + geom_point(aes(x=x, y=y), data=points) \n\n# With geom_segment: OK\np1 <- p + geom_segment(aes(x=a, xend=b, y=c, yend=d), data=segments)\np1\n\n# With geom_segment and scale_y_reverse: OK\np1 + scale_y_reverse()\n\n\n\n# With annotate: OK\np2 <- p + annotate(\"segment\", x=0.75, xend=-0.75, y=-0.5, yend=0.5)\np2\n\n# With annotate and scale_y_reverse: Not OK\np2 + scale_y_reverse()\n```\n  This partially fixes #676. It fixes the first case, where there are some groups with >= 3 points. But there are still errors if all groups have < 3 points. This is because `StatDensity$calculate` returns an empty data frame with no y values to train the scale. I'm not sure what the proper solution is. Maybe return a data frame with `y=0`?\n\nFor the fix that I've done so far, I had to infer the correct behavior of `finite.cases()`. @hadley, it would be good if you could look at the tests I wrote to check if I was right.\n Previously, it would throw an error if the input had only one row:\n\n```\n> ggplot2:::finite.cases(data.frame(x=4))\nError in rowSums(vapply(x, is.finite, logical(nrow(x)))) : \n  'x' must be an array of at least two dimensions\n\n> ggplot2:::finite.cases(data.frame(x=4, y=11))\nError in rowSums(vapply(x, is.finite, logical(nrow(x)))) : \n  'x' must be an array of at least two dimensions\n\n> ggplot2:::finite.cases(data.frame(x=4:5))\n[1] TRUE TRUE\n```\n The remaining error happens because no y scale gets created. For example:\n\n``` R\ndat <- data.frame(x=3)\nggplot(dat, aes(x=x)) + geom_density()\n#Error in UseMethod(\"scale_dimension\") : \n#  no applicable method for 'scale_dimension' applied to an object of class \"NULL\"\n```\n\nI think the place to add the y scale is in `scales_add_defaults()`. This is where it happens when the stat returns a non-empty data frame.\n  This fixes #672. To use it, you specify the last version where the function was _good_. Example usage:\n\n```\ngg_dep(\"0.8.9\", \"blah blah blah\")\n```\n\nSample output:\n\n```\n# Differs by subminor version number\nqplot(1:3, 1:3) + coord_cartesian(wise=T)\n# wise argument to coord_cartesian is ignored (Deprecated; last used in version 0.9.0)\n\n# Differs by minor version number\nqplot(1:3, 1:3, colour=1:3) + scale_colour_continuous(legend=T)\n# Warning message:\n# \"legend\" argument in scale_XXX is deprecated. Use guide=\"none\" for suppress the guide display. (Deprecated; last used in version 0.8.9) \n\n```\n  This is from @dkahle's suggestion in #641.\n\nThis example illustrates the output:\n\n```\ntheme_classic <- function(base_size = 12, base_family = \"\"){\n  theme_bw(base_size = base_size, base_family = base_family) %+replace%\n    theme(\n      panel.border     = element_blank(),\n      axis.line        = element_line(colour = \"black\"),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank()\n    )\n}\n\nqplot(displ, hwy, data = mpg, colour=class) + theme_classic()\n```\n  This fixes #666.\n\nThese are the times with the old version (ggplot2 0.9.2.1). First is `geom_polygon`, then `geom_path`:\n\n``` R\nlibrary(ggplot2)\nlibrary(maps)\nsystem.time(print(ggplot(map_data(\"world\")) + geom_polygon(aes(long, lat, group = group))))\n#   user  system elapsed \n#11.701   0.247  46.543 \nsystem.time(print(ggplot(map_data(\"world\")) + geom_path(aes(long, lat, group = group))))\n#   user  system elapsed \n#  2.802   0.123   3.044\n```\n\nThese are the times after the fix:\n\n``` R\nlibrary(ggplot2)\nlibrary(maps)\nsystem.time(print(ggplot(map_data(\"world\")) + geom_polygon(aes(long, lat, group = group))))\n#   user  system elapsed \n#  0.922   0.098   1.157 \nsystem.time(print(ggplot(map_data(\"world\")) + geom_path(aes(long, lat, group = group))))\n#   user  system elapsed \n#  3.038   0.146   3.319 \n```\n\n`geom_polygon` is now about 12.5x faster than it was before -- and it's now 3x faster than `geom_path`. Not bad!\n\nAll the tests pass, and visual tests are unchanged (which is a little surprising -- I would have expected the change in polygon grouping to result in some changes to the PDF).\n Now that `geom_polygon()` is faster, examples that use `geom_path()` but draw closed polygons (not open paths) should probably be changed to use `geom_polygon(colour=\"black\", fill=NA)`.\n  This fixes #689. It should also give correct results for  #562.\n\nI've also added some visual tests for the projections.\n  I'm pretty sure that's how it's supposed to work. The mailing list might be helpful if you're looking to contours with fill. Also see http://docs.ggplot2.org/0.9.2.1/stat_contour.html.\n  This doesn't sound like a ggplot2 problem. I agree that it's likely that `options(warning=2)` is getting set, but ggplot2 doesn't do that anywhere. I think the mailing list might be more able to help (and be sure to include `sessionInfo()`).\n  Looks good, thanks.\n  Nice, this is a useful feature. I've made some comments on the code.\n  Could you reapply the changes, basing them off of hadley/master? And also be careful about the spurious changes...\n\nMore info here:\nhttps://github.com/hadley/ggplot2/wiki/Developing-ggplot2-using-github\n I personally am not a fan of trailing whitespace either, but allow me to reframe this from the perspective of someone who uses a different text editor: the problem is that your editor automatically modifies the text.\n\nI'm not opposed to having a patch that removes trailing whitespace, but I'm a little wary about the possibility of bugs. It's probably best to get Hadley's input on that.\n I'm looking at the SO thread, and it seems that plenty of people think that the person asking the question should just turn off the auto-whitespace trimming. The R internals page doesn't say anything about trailing whitespace. It has an example config for ESS in which it says the state of `ess-nuke-trailing-whitespace-p` is `'ask` -- I don't use ESS, but does this mean it will ask about the trailing whitespace? The R source code has many, many lines with trailing whitespace (you can grep it for yourself).  I've looked at the GNU coding standards and I don't see anything about trailing whitespace. Google's R standards don't say anything about them either. And for ggplot2, there's this: https://github.com/hadley/devtools/wiki/Style\n\nLet me draw an analogy: the R source code has a mix of tabs and spaces, which I personally find very annoying because of the way my text editor handles tabs and indentation. Let's say my editor auto-replaced tabs with spaces. I wouldn't submit a patch that also replaces all the tabs with spaces, and then tell them that the problem is that they use tabs the wrong way.\n\nI'm not sure I understand what feature you're asking about in RStudio. Are you asking if it will add back whitespace that has been removed?\n\nAs for branching from `hadley/master`: there's a merge commit that has nothing in it: 19afd44. It's not the end of the world, but it makes a cleaner and easier-to-understand project history if it's branched off of `hadley/master`. I don't know why you have the commit, but my guess is that it has something to do with a `--no-ff` merge.\n  I think you should be able to do this using gtable - create a grob for the entire plot using `ggplotGrob()` and a textGrob with your label, then put them into a new gtable object.\n  It looks like with the Mathematica version, the image get rasterized before making it all squiggly:\nhttp://blog.wolfram.com/2012/10/05/automating-xkcd-diagrams-transforming-serious-to-funny/\n\nSo if that were implemented for R, then the present ggplot2 themes would be sufficient.\n\nDrawing squiggly lines directly with the theme system would probably require some new grobs -- and a big rewrite of the theme system!\n  It actually gives this error when there are < 3 observations:\n\n```\n# Error\ndat <- data.frame(x=3)\nggplot(dat, aes(x=x)) + geom_density()\n\n# Error\ndat <- data.frame(x=3:4)\nggplot(dat, aes(x=x)) + geom_density()\n\n# OK\ndat <- data.frame(x=3:5)\nggplot(dat, aes(x=x)) + geom_density()\n```\n  OK, I changed it to to an error, then rebased and merged at 272d3cb.\n  OK, I changed it to to an error, then rebased and merged at 272d3cb.\n  Do you think there would be any problems with changing `geom_polygon` so it uses one grob for all the groups? It is extremely slow.\n  This is a first pass at adding facet headers. Examples here: http://rpubs.com/wch/1306\n\nThings that need to be done:\n- Improve appearance\n- Decide whether to allow this for `facet_wrap`, and if so, how\n- Control over whether each header is drawn\n- Syntax for setting header labels to something other than the default\n- Figure out what to do when facet has two variables on one axis, like `facet_grid(. ~ am + cyl)`\n\nMaybe the labels could be controlled like this:\n\n```\nfacet_grid(am ~ cyl, titles = \"auto/manual\" ~ NULL)\n```\n\nWhere `NULL` means not to draw facet headers for that variable.\n  It works fine for me, with the same versions of the packages. Can you provide more information?\n It's possible that the old version of devtools loaded things in a way that didn't work quite right.\n\nTry installing the latest github version of devtools and doing `load_all` -- there have been a lot of changes, and it now loads packages in a way that is much more like loading a package with `library()`.\n I'm glad it works for you.\n\nHadley decided that removing `~/.Rpackages` would make thing simpler, and he thought he was the only person who used it. I guess he was wrong about the second part. :)\n  Fixed in 06914a7940822a782e43f7a33cd90e223e128b32.\n  Thanks, fixed in 2431a1593384c23668d4d1d9932d2ecad2a46f4e.\n  This fixes #632. It provides clearer error messages when the user makes a graph with `stat_bin` and also maps something to a `y` value.\n\nA couple notes:\n- I'm not sure the error message will be clear to a novice -- someone who uses `geom_bar` might not even realize that they're using `stat=\"bin\"`.\n- It might break existing user code that relies on the buggy behavior where you can use `stat=\"bin\"` and map values to y, provided that there's only one y value per group. This could possibly affect a lot of existing code.\n\nIt should also have some tests added.\n I've changed the error to a very long warning message. Even though it's really long, I think it is worth keeping, since this is probably a very common issue and it can be confusing.\n  Try updating your packages with `update.packages()` and starting with a new R session. I think this probably has something to do with the scales package being out of date.\n  This fixes #592. It passes all tests, and visual tests are unchanged.\n\nIt did make a warning go away in a couple visual tests in `scale-date.r`, though:\n\n```\ndt + scale_x_date(breaks = \"3 weeks\")\n# Warning message:\n# 'package:ggplot2' may not be available when loading \n```\n  This fixes #583. It passes all tests, and visual tests are unchanged.\n\nI'm not sure it should be merged though -- although it solves the printing problem, it'll break all code where people define their own geoms and stats in external packages.\n\nThere's also some weird behavior with printing that I don't understand. Depending on how you print it, it might or might not tell you that it's a `ggproto` object:\n\n``` R\nstr(z)\n# proto object \n#  $ mapping    : NULL \n#  $ geom_params:List of 1 \n#  $ stat_params: Named list() \n#  $ stat       :proto object  \n#   ..parent: proto object  \n#  .. .. parent: proto object  \n#  $ inherit.aes: logi TRUE \n#  $ geom       :proto object  \n#   ..parent: proto object  \n#  .. .. parent: proto object  \n#  $ position   :proto object  \n#   ..parent: proto object  \n#  .. .. parent: proto object  \n#  .. .. .. parent: proto object  \n#  $ subset     : NULL \n#  $ data       : list() \n#   ..- attr(*, \"class\")= chr \"waiver\" \n#  $ show_guide : logi NA \n#  parent: proto object \n\nz\n# geom_point: na.rm = FALSE \n# stat_identity:  \n# <environment: 0x10c9fcb08>\n# attr(,\"class\")\n# [1] \"proto\"       \"environment\"\n\nclass(z)\n# [1] \"ggproto\"     \"proto\"       \"environment\"\n```\n\nThere's another bizarre property of proto objects. If you set the class via `structure()`, even if you _don't_ assign it back to the variable, it modifies the class of the object.\n\n``` R\nclass(z)\n# [1] \"ggproto\"     \"proto\"       \"environment\"\n\nstructure(z, class = c(\"foo\", class(z)))\n# geom_point: na.rm = FALSE \n# stat_identity:  \n# <environment: 0x10c9fcb08>\n# attr(,\"class\")\n# [1] \"proto\"       \"environment\"\n\nclass(z)\n# [1] \"foo\"         \"ggproto\"     \"proto\"       \"environment\"\n```\n\nI'm concerned that, because proto is so opaque and confusing, there may be unintended consequences of this change.\n Since we're going to change to S3 anyway, I'd prefer not to merge these changes.\n  Thanks - can you please re-indent it so it looks like the code for `theme_bw`?\n Rebased, cleaned up, and merged at 96132d08f73d71c38aeef6a4b4f5c14c92e72462\n  NEWS item for this change?\n  Fixes #623.\n\nThe code is essentially copied over from `geom_point`, except that `na.rm` is set to FALSE so it will always display the warning message; there's not the option to change it.\n\nIt also checks x, y, xend, yend, size, and shape for NA.\n\nI also tried modifying `scale_linetype_discrete` so that it would use `na.value=\"01\"`, hoping it would make a blank line, but grid apparently doesn't like zeros in the `lty`:\n\n```\nError in grid.Call.graphics(L_segments, x$x0, x$y0, x$x1, x$y1, x$arrow) : \n  invalid line type: zeroes are not allowed\n```\n Good point, I'll add it in there.\n  This fixes #562. Examples that are fixed by this:\n\n``` R\nsky2 <- data.frame(RA=0, Dec=0)\n\nskyplot2 <- qplot(RA,Dec,data=sky2,xlim=c(0,360),ylim=c(-89.999,89.999))\n\nskyplot2 + coord_map(projection=\"aitoff\",orientation=c(89.999,180,0)) + \n  scale_y_continuous(breaks=(-2:2)*30,limits=c(-89,89)) + \n  scale_x_continuous(breaks=(0:8)*45,limits=c(0,360), labels=c(\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\")) +\n   theme(panel.grid.major = theme_line(colour='black'))\n\n\nskyplot2 + coord_map(projection=\"lagrange\",orientation=c(89.999,180,0)) + \n  scale_y_continuous(breaks=(-2:2)*30,limits=c(-89.999,89.999)) + \n  scale_x_continuous(breaks=(0:8)*45,limits=c(0,360), labels=c(\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\")) +\n  theme(panel.grid.major = theme_line(colour='black'))\n```\n I rebased the commit onto master at 70ea0bc732ff776d81cebf184af1b65a08c624cf.\n  Test text.\n\n``` R\n# These three together result in an error\ntheme_nothing <- function(base_size = 12, base_family = \"Helvetica\") {\n    theme_grey(base_size = base_size, base_family = base_family) %+replace%\n      theme(\n            axis.text = element_blank(),\n            axis.ticks.length = unit(0, \"lines\"),\n            axis.ticks.margin = unit(0, \"lines\")\n           )\n    }\n\nqplot(1:3, 1:3) + theme_nothing()\n# Error in grid.Call.graphics(L_setviewport, pvp, TRUE) : \n#   Non-finite location and/or size for viewport\n```\n\nIf you take out any one of those three theme items, it works.\n This appears to happen with zero-height gtable objects.\n\n``` R\nlibrary(grid)\nlibrary(gtable)\nr1 <- rectGrob(gp=gpar(fill=\"red\"))\nr2 <- rectGrob(gp=gpar(fill=\"blue\"))\nr3 <- rectGrob(gp=gpar(fill=\"green\"))\nh1 <- unit(0, \"mm\")\nh2 <- unit(0, \"mm\")\nh3 <- unit(0, \"mm\")\ngt <- gtable_col(\"test\", grobs = list(r1, r2, r3), heights = c(h1,h2,h3))\ngrid.newpage()\ngrid.draw(gt)\n# Error in grid.Call.graphics(L_setviewport, pvp, TRUE) : \n#   Non-finite location and/or size for viewport\n```\n\nIf any of the heights is set to a non-zero value, it works fine.\n\nStrangely, it seems to work when the heights are specified as `unit(c(...))` instead of `c(unit(...), unit(...))`:\n\n``` R\n# OK\nh1 <- unit(c(0,0,0), \"cm\")\ngt1 <- gtable_col(\"test\", grobs = list(r1, r2, r3), heights = h1)\ngrid.newpage()\ngrid.draw(gt1)\n\n# Error\nh2 <- c(unit(0,\"cm\"),unit(0,\"cm\"),unit(0,\"cm\"))\ngt2 <- gtable_col(\"test\", grobs = list(r1, r2, r3), heights = h2)\ngrid.newpage()\ngrid.draw(gt1)\n```\n\nIt also works if you use `unit.c` instead of `c`:\n\n``` R\ngt <- gtable_col(\"test\", grobs = list(r1, r2, r3), heights = unit.c(h1,h2,h3))\ngrid.newpage()\ngrid.draw(gt)\n```\n\nHow you put unit objects together seems to matter:\n\n``` R\n# Notice that z2 is NOT a unit object, which causes problems\nz1 <- unit(c(0,0,0), \"cm\")\nz2 <- c(unit(0,\"cm\"),unit(0,\"cm\"),unit(0,\"cm\"))\nz3 <- unit.c(unit(0,\"cm\"),unit(0,\"cm\"),unit(0,\"cm\"))\nstr(unclass(z1))\nstr(unclass(z2))\nstr(unclass(z3))\n```\n Even with `unit.c`, there is still a problem when the unit is `null`, which happens in the gtable layouts:\n\n``` R\nlibrary(grid)\nlibrary(gtable)\nr1 <- rectGrob(gp=gpar(fill=\"red\"))\nr2 <- rectGrob(gp=gpar(fill=\"blue\"))\nh1 <- unit(0, \"mm\")\nh2 <- unit(0, \"null\")\ngt <- gtable_col(\"test\", grobs = list(r1, r2), heights = unit.c(h1,h2))\ngrid.newpage()\ngrid.draw(gt)\n# Error in grid.Call.graphics(L_setviewport, pvp, TRUE) : \n#   Non-finite location and/or size for viewport\n```\n This is confirmed by Paul Murrell as a bug in grid. Hopefully it'll be fixed in the next release of R.\n\nI somewhat agree that the ticks shouldn't be drawn when length is zero, but I think this is a pretty unusual case and the benefit does not outweigh cost (in terms of complexity) of adding the extra code.\n  Here are some attempts of mine, to get a balloon plot with the value proportional to area\n\n``` R\n# Make data\ndat <- data.frame(x = 3:9)\np <- ggplot(dat, aes(x=x, y=1, size=x)) + geom_point() + xlim(2.5, 9.5)\n\n\n\n# linear mapping from position on scale to radius\n# values 3-9 gets mapped to radius 1-6\np\n# Bad: Value is NOT proportional to area\n\n# linear mapping from position on scale to area (I think)\n# values 3-9 gets mapped to area 1-6\np + scale_area()\n# Bad: Value is NOT proportional to area\n\n# To make value proportional to area\n# values 0-9 get mapped to area 0-6\n# Actual values 3-9 get mapped linearly to area 2-6\np + scale_area(limits=c(0,9), range=c(0,6))\n# Good: Value is proportional to area\n# But this has unneeded legend key at 0\n\n# I think this should do something similar to above:\n# Map values 3-9 to area 2-6\np + scale_area(limits=range(dat$x), range=range(dat$x) * 2/3)\n# Bad: Value is NOT proportional to area\n# It doesn't actually work\n# Maybe scale_area doesn't pay attention to limits in determining area?\n\n# This will map values 3-9 to radius 2*sqrt(3) to 2*sqrt(9)\nggplot(dat, aes(x=x, y=1, size=2*sqrt(x))) + geom_point() +\n    scale_size_identity()\n# Good: Value is proportional to area\n# But no legend\n```\n\nI think the following is to take the 3rd method above and add `breaks`:\n\n``` R\n# To make value proportional to area\n# values 0-9 get mapped to area 0-6\n# Actual values 3-9 get mapped linearly to area 2-6\np + scale_area(limits=c(0,9), range=c(0,6), breaks=c(3,5,7,9))\n```\n\nBut it seems unnecessarily complicated; with `scale_area` it should be easier to make a plot with both:\n- Area proportional to value\n- A decent-looking legend\n This might be fixable by setting the `rescaler` argument in the call to `continuous_scale`. See the examples in `?scale_colour_gradientn`.\n I think it shouldn't be the default because it would be a strange thing to use for lines.\n\nI'd suggest adding a notes to the help pages for `geom_point()` and `scale_size_continuous()`, saying that you may want to use `scale_area()`.\n Those functions are in the scales package.\n  I merged it into NEWS and fixed the formatting, at 84358c575e6ff38da78fbe53b257b3ff9be8dc47.\n  There's actually a `stat_ecdf` in the current development branch, which will be released in a month. It's not quite the same, but it's similar to this.\n  From: https://groups.google.com/forum/?fromgroups#!searchin/ggplot2/from:powell/ggplot2/oXFE3WkV2UM/41u1SYs3WJwJ\n\n```\nlibrary(ggplot2)\ndf <- data.frame( variable = c(\"resembles\", \"does not resemble\"), value = c(80, 20)  ) \n\n# Works\nggplot(df, aes(x = \"\", y = value, fill = variable)) + geom_bar(width = 1) \n\n\n# Gives confusing error message\nggplot(df, aes(x = \"\", y = value)) + geom_bar(width = 1) \n# Error in pmin(y, 0) : object 'y' not found\n```\n\nI think this has to do with it using `stat=\"identity\"` vs. `stat=\"bin\"`.\n This points to something that I've found confusing about `stat_bin` for a long time: when you map something to `y` and there's one data point per `x` value, then it behaves like `stat_identity`.\n\nHere are examples of the normal behavior for each:\n\n``` R\ndat <- data.frame(g=c(\"a\",\"a\",\"b\"), val=c(3,2,6))\n\n# Plot counts using stat_bin (the default stat)\nggplot(dat, aes(x=g)) + geom_bar(stat=\"bin\")\n\n# Plot values using stat_identity (with outlines to make stacking clear)\nggplot(dat, aes(x=g, y=val)) +\n  geom_bar(stat=\"identity\", colour=\"black\", fill=\"white\")\n```\n\nAnd here's an example of the confusing behavior with `stat_bin`:\n\n``` R\n# stat_bin: plot values when values are mapped to y, and one data point per x\n# \"a\" bar is removed; \"b\" bar is present, but shows values\nggplot(dat, aes(x=g, y=val)) + geom_bar(stat=\"bin\")\n# Warning message:\n# Removed 1 rows containing missing values (position_stack). \nggplot(dat, aes(x=g, y=val)) + geom_bar() # Same as above; 'bin' is default\n```\n\nHow about making this less confusing by having more consistent behavior? There's a possibility that this could break a lot of existing user code, though.\n  Can you provide a (simple) reproducible example?\n  It looks like the problem happens because `StatBoxplot$calculate_groups` is run on each facet separately, and it determines width with this:\n\n``` R\n    width <- width %||%  resolution(data$x) * 0.75\n```\n\nIdeally, it would check whether `x` is a discrete or continuous scale, and do the width calculation accordingly. But I don't think that information is available at this stage.\n\nOne workaround is of course to specify the width:\n\n``` R\nset.seed(323)\nd <- expand.grid(g = c(\"A\", \"B\"), x=c(\"x1\", \"x2\", \"x3\", \"x4\"))\nd <- rbind(d, d, d)\nd$y <- runif(nrow(d))\n\n# Sort\nd <- arrange(d, g)\n\n# All combinations: looks OK\nggplot(d) + geom_boxplot(aes(x=x, y=y)) + facet_grid(g ~ .)\n\n\n# Drop every other x value in facet B\nd2 <- subset(d, g == \"A\" | (x == \"x2\" | x == \"x4\"))\n\n# Boxes too wide in bottom\nggplot(d2) + geom_boxplot(aes(x=x, y=y)) + facet_grid(g ~ .)\n\n# Specify width: looks OK\nggplot(d2) + geom_boxplot(aes(x=x, y=y), width=1) + facet_grid(g ~ .)\n```\n\nIncidentally, it looks like the width of the boxes is actually 0.75 times the specified width, as the code below demonstrates. This seems a bit odd to me.\n\n``` R\n# Use default width\nggplot(d) + geom_boxplot(aes(x=x, y=y)) + facet_grid(g ~ .) +\n  geom_vline(xintercept = 1.375, colour=\"red\")\n\n# width=1: appears same as above\nggplot(d) + geom_boxplot(aes(x=x, y=y), width=1) + facet_grid(g ~ .) +\n  geom_vline(xintercept = 1.375, colour=\"red\")\n\n# width=0.9: narrower boxes\nggplot(d) + geom_boxplot(aes(x=x, y=y), width=0.9) + facet_grid(g ~ .) +\n  geom_vline(xintercept = 1.375, colour=\"red\")\n\n```\n Yes, it does appear that, in `stat_boxplot`:\n- when the incoming x data is discrete, `data$x` is integer\n- when the incoming x data is continuous, `data$x` is numeric -- even if the incoming data is of type integer.\n\nBut I think relying on this distinction to determine width is a fragile solution. Ideally the stats and geoms could query the plot object to find if the scales are discrete or continuous, and adjust behavior accordingly. Either that, or the data structure passed to the stat/geom would report whether each variable is discrete or continuous.\n Now that I've looked around a bit, it looks like testing for integers is used elsewhere, like in `StatBin$calculate()`. It seems to work fine there, so maybe it's not so bad.\n  This is from the examples:\n\n``` R\n# OK\nqplot(mpg, wt, data=mtcars) + ylim(0, 10)\n\n# All data is outside y limits - Error\nqplot(mpg, wt, data=mtcars) + ylim(10, 20)\n# Error: Discrete value supplied to continuous scale\n```\n  This fixes #625. Visual tests no longer error out.\n\nIt also looks like I might have undone commit bfe9097f5ebf093eb894cbc67d97d632d1e99397. I'm not sure what the purpose of that commit was, though.\n  Thanks, fixed in 3debefc5c372bffb4cb38859be6cf2b15b9ee6fe.\n  The issue is that with a continuous x axis, grouping needs to be specified:\n\n``` R\nstat_sum_df <- function(fun, geom=\"crossbar\", ...) {\n    stat_summary(fun.data=fun, colour=\"red\", geom=geom, width=0.2, ...)\n}\nqplot(cyl, mpg, group=cyl, data=mtcars) + stat_sum_df(\"mean_cl_boot\")\n```\n\nThe underlying problem is that `stat_summary` calls `summarise_by_x()`: this function takes the data at each x value as a separate group for calculating the summary statistic, but it doesn't actually set the `group` column in the data. Here's the relevant code from https://github.com/hadley/ggplot2/blob/master/R/stat-summary.r#L157:\n\n``` R\nsummary <- ddply(data, .(group, x), summary, ...)\n```\n\nI don't think at this stage of processing it's really possible to change the `group` column. I believe the proper fix is to NOT have it group by x at all, and instead use only the grouping defined by `group`. Users would always have to specify grouping explicitly, as I showed above.\n\nIn other words, the code should look like this:\n\n``` R\nsummary <- ddply(data, .(group), summary, ...)\n```\n\nBut this may break some existing user code.\n\nedit: Now that I've thought about it more, perhaps `stat_summary` should work like `stat_boxplot`, with a `calculate()` function that is run for each group.\n  This is with the development version. It looks like stacked bar graphs now produce a warning about constant width:\n\n``` R\nggplot(mpg, aes(x=drv)) + geom_bar()\n# Warning message:\n# position_stack requires constant width: output may be incorrect \n```\n\nIt doesn't seem to happen with 0.9.1.\n I think we need a clear specification of what `zero_range` is supposed to do. Its purpose is not entirely clear to me. It seems that sometimes `zero_range` is being used when we're trying to test \"are the values very close together?\", as we are here.\n\nPerhaps we need two separate functions, or, as @kohske suggests, a tolerance/scale factor option.\n After taking a closer look at the recently-changed `zero_range` function, I think that it will return TRUE only when the two values are _exactly_ the same, in which case you might as well use `==`.\n\nIf you look at `?.Machine`, it says: `double.eps: the smallest positive floating-point number \u2018x\u2019 such that \u20181 + x != 1\u2019.` So _by definition_, it's not possible for there to be a difference that's smaller than `double.eps` (if you're using 1 as the base value).\n\nThis should illustrate:\n\n```\n# Adding double.eps to 1 results in a detectable difference with ==\n1 + .Machine$double.eps == 1\n# FALSE\n\n# Same result with zero_range\nzero_range(c(1 + .Machine$double.eps, 1))\n# FALSE\n\n\n\n# Adding a value half the size of double.eps  -- they are identical\n1 + .Machine$double.eps/2 == 1\n# TRUE\n\n# Same result with zero_range\nzero_range(c(1 + .Machine$double.eps/2, 1))\n# TRUE\n```\n\nOne possible change is to use some multiple of `.Machine$double.eps`. In the `quantile.default` function, the epsilon value is defined as:\n\n``` R\neps <- 100 * .Machine$double.eps\n```\n\nIn the `?integer` page, it defines the following function, which uses the square root of `.Machine$double.eps`:\n\n``` R\nis.wholenumber <- function(x, tol = .Machine$double.eps^0.5)  abs(x - round(x)) < tol\n```\n Fixed with new version of scales, at 33509e67a854d3171a4e90300131b213eb289665.\n  Right now, there's code in `guide_axis()` that allows putting the axes on the top and right, but it looks like all the actual calls to that function are hard-coded to use `\"left\"` and `\"bottom\"`.\n\nThere should also be visual tests of the results.\n How should the sides be specified? It could be a theme element, something like this:\n\n```\n# Axes on all four sides\nqplot(1:3, 1:3) + theme(axis.sides = \"trbl\")\n```\n  I've rebased and merged into master at 89a61c5f547f2f58994e1ec24ccb106b3e1c2d2d.\n  This fixes #606, and requires the modified version of gtable.\n\nI ran some timings on it, and with no facets, it's slightly faster than the old version, but with facets, it's slightly slower. All tests were run on installed versions of ggplot2 (not loaded via `load_all`).\n\nFor all the test runs, I ran the plots a few times before actually running the test.\n## No-facet tests\n\nHere's the code for the no-facet test:\n\n```\nn <- 10\ntimes <- numeric(n)\nfor (i in seq_len(n)) {\n  t <- system.time(print(ggplot(mtcars, aes(wt,mpg)) + geom_point()))\n  times[i] <- t[1]\n}\ntimes\nmean(times)\n```\n\nThe results for the old version:\n\n```\n> times\n [1] 0.162 0.157 0.150 0.153 0.158 0.157 0.156 0.150 0.160 0.151\n> mean(times)\n[1] 0.1554\n```\n\nAnd the results for the new version:\n\n```\nd> times\n [1] 0.151 0.149 0.140 0.149 0.147 0.158 0.146 0.147 0.144 0.149\nd> mean(times)\n[1] 0.148\n```\n\nSince we're using R, we might as well do a statistical test. :)\n\n```\n> t.test(times, times2)\n\n    Welch Two Sample t-test\n\ndata:  times and times2 \nt = -3.7082, df = 17.804, p-value = 0.001634\nalternative hypothesis: true difference in means is not equal to 0 \n95 percent confidence interval:\n -0.011595806 -0.003204194 \nsample estimates:\nmean of x mean of y \n   0.1480    0.1554 \n```\n## Facet tests\n\nThis code adds two faceting variables, for a 2x3 grid.\n\n```\nn <- 10\ntimes <- numeric(n)\nfor (i in seq_len(n)) {\n  t <- system.time(print(ggplot(mtcars, aes(wt,mpg)) + geom_point() + facet_grid(am~cyl)))\n  times[i] <- t[1]\n}\n```\n\nResults for the old version:\n\n```\n> times\n [1] 0.511 0.516 0.492 0.533 0.496 0.480 0.500 0.498 0.500 0.489\n> mean(times)\n[1] 0.5015\n```\n\nAnd the new version:\n\n```\nd> times\n [1] 0.521 0.511 0.518 0.498 0.521 0.491 0.563 0.555 0.507 0.516\nd> mean(times)\n[1] 0.5201\n```\n\nAnd the t-test:\n\n```\n> t.test(times, times2)\n\n    Welch Two Sample t-test\n\ndata:  times and times2 \nt = 2.1526, df = 15.621, p-value = 0.04735\nalternative hypothesis: true difference in means is not equal to 0 \n95 percent confidence interval:\n 0.0002465331 0.0369534669 \nsample estimates:\nmean of x mean of y \n   0.5201    0.5015 \n```\n Oh right, thanks for catching that.\n\nUpdate: On second thought, I'm not sure that it makes sense to put the `vp` in the gtable -- see my comment in hadley/gtable#25.\n > You may implement the function for counting the elapsed time and performing statistical test from the previous commit in your visual test library ;-p\n\nYou may be joking, but that's actually not a bad idea...\n I've made changes so that this uses the latest version of gtable, in which gtable objects are also grobs.\n\nI think everything works, but some of the visual tests are broken (due to other bugs), so I can't check for sure.\n Rebased and merged at 30413b6e569fdfac88c06cc5d7a5a0bf2a32b34e.\n  Also see the 0.9 transition guide: http://cloud.github.com/downloads/hadley/ggplot2/guide-col.pdf\n  Fixes #471.\n\nThis code fixes `coord_distance.polar` to give correct lengths. It could be cleaned up a bit, and it could also use some tests.\n\nThe following code generates [this PDF](https://dl.dropbox.com/u/84377/spiraltest.pdf):\n\n```\n#80 concentric circles\ndf <- data.frame(x = 0:1, y=rep(c(1:80), each=2))\nggplot(df, aes(x=x, y=y, group=factor(y))) + geom_line() + coord_polar()\n```\n\nIt's somewhat of an improvement over the current method, [shown here](https://dl.dropbox.com/u/84377/spiral_orig.pdf).\n\nThe resolution toward the center still isn't high enough, in my opinion. As I mentioned in #471, there's often a greater information density (and therefore sharper turns) toward the center of the circle, and so it would be useful to have higher resolution toward the center.\n I think we'd need a way of calculating the degree of curvature - the more curved it is, the shorter the segments should be. Or maybe another way of thinking about it is that two segments in a row should never have an angle between them greater than some constant `k`. Maybe a value of one degree or 0.5 degrees would be reasonable.\n\nI suspect this would be slow, since it seems like an iterative process. There might be a faster way that I'm not seeing, though.\n Another possible method is to find the angle change between the start and end of each arc, and break it into a number of segments proportional to the angular change.\n\nFor example, if the change in angle is 80 degrees, you might want to use 80 segments. Actually, now that I think about it more, I think this is the optimal solution, even for angled lines (which get turned into spiral arcs): a straight, angled line gets warped by `coord_polar` so that the closer it is to the center, the greater the curvature. It also happens that, if you slice up the line into equal-length segments _before_ the transformation, then _after_ the transformation, the closer your are to the center, the shorter the segments are. I don't know for sure, but I think it probably works out so that each consecutive segment will have the same angle change (but different length).\n Actually, I was thinking that distance isn't the right metric. A function like `angle_delta()` would be more appropriate. For example, if the post-transformation line is straight, you still only need two points; and if the post-transformation line is a circle, you may want, say, 360 points. The same logic applies for map projections.\n\nThat said, distance may be useful as a a secondary factor -- a small 5mm circle probably doesn't need as many points as a large 50mm circle to look nice.\n The number of segments to use could be something like `delta_angle * length + 2`, or `delta_angle * log(length) + 2`. The plus 2 is because you always need at least 2 points, even if there's no angle change.\n This may not be the perfect solution, but I rebased it and merged in 30e56bcc1d7bc5d4f890536cc2178498ef37d003.\n  This fixes #543. The reason this works is because a call to `ldply()` in `layout_base()`:\n\n``` R\nbase <- unique(ldply(values[has_all]))\n```\n\nIf the first data frame in the list contains all the levels of the variable, then `base` will have that ordering of the variables. However, if the first data frame does _not_ contain all the levels, then `base` will add the levels in the order they're encountered.\n\nTo illustrate:\n\n``` R\nd1 <- data.frame(f=factor(rep(letters[1:3], each=5), levels=letters[3:1]))\nd2 <- data.frame(f=rep(\"b\", 15))\n\nstr(d1)\n# 'data.frame':   15 obs. of  1 variable:\n#  $ f: Factor w/ 3 levels \"c\",\"b\",\"a\": 3 3 3 3 3 2 2 2 2 2 ...\nstr(d2)\n# 'data.frame':   15 obs. of  1 variable:\n#  $ f: Factor w/ 1 level \"b\": 1 1 1 1 1 1 1 1 1 1 ...\n\nstr(unique(ldply(list(d1, d2))))\n# 'data.frame':   3 obs. of  1 variable:\n#  $ f: Factor w/ 3 levels \"c\",\"b\",\"a\": 3 2 1\nstr(unique(ldply(list(d2, d1))))\n# 'data.frame':   3 obs. of  1 variable:\n#  $ f: Factor w/ 3 levels \"b\",\"c\",\"a\": 1 3 2\n```\n\nThe fix is to put the default data frame from the ggplot object first, rather than last.\n This passes all tests and visual tests are unchanged.\n Rebased onto master and merged at 3b8326d72a6ec87e61ad4c14ba79a3aaa8ccb153.\n  This discussion may also be of interest:\nhttps://groups.google.com/forum/?fromgroups#!topic/ggplot2-dev/_gpWsOWrSDk\n  Looks good - in the future, it would be better to do the commit message a little differently: use a short description on the first line, then add a blank line, then add any other notes below that, and hard-wrap the lines. Something like this:\n\n```\nAdding linetype functionality to boxplot legends. Fixes #608.\n\nCode fix was provided by Kohske Takahashi. Any other notes go here, with\nhard-wrapping of long lines.\n```\n I've rebased this patch onto master, at 3e9c42bcfd7d2c367048b791d094ba05cb9245ea.\n  Fixed in f91803b85f9cac594753cad8e3e4c0bd2546c949.\n  Also run timings on plots before and after.\n This is going to be tough. With a frameGrob, you can set the `just` of grobs inside -- in this case, the `labels` grob is created so that the text has its own `hjust` and `vjust` values, and then the `labels` grob is put inside the `frameGrob` with a separate `just` value (top/bottom/left/right). This makes it possible for separate facets to have the labels+ticks all justified to the top, for the x axis.\n\nWith gtable, all the grobs in a row are centered. This is fine if they all have the same width and height, but if they are different sizes, it's impossible to justify all of the separate grobs to the top. Because the ticks+labels in each facet are created independently, they can't be all set to the same size, and it's impossible to top-justify them all.\n\nThis illustrates the problem with facets:\n\n``` R\n\nmpg2 <- subset(mpg, manufacturer %in% c(\"honda\", \"volkswagen\"))\n\nqplot(reorder(model, hwy), hwy, data=mpg2) +\n  facet_grid(. ~ manufacturer, scales=\"free\") +\n  theme(axis.text.x = element_text(angle=90, hjust=1, vjust=0.5))\n```\n\nThis shows how gtable centers the grobs in each cell:\n\n``` R\nlibrary(gtable)\n\ngrob1 <- rectGrob(width=unit(1,\"cm\"), height=unit(1,\"cm\"))\ngrob2 <- rectGrob(width=unit(.5,\"cm\"), height=unit(.5,\"cm\"))\ngrobmat <- matrix(list(grob1, grob1, grob1, grob2, grob1, grob1), nrow=2)\n\ngt <- gtable_matrix(\"test\", grobmat,\n  widths=unit(c(1,1,1),\"cm\"), heights=unit(c(1,1),\"cm\") )\n\nplot(gt)\n```\n\nThis example is like the facets. The squares in the bottom row represent each facet's axis labels and ticks. They can be different sizes, and they presently can't communicate their sizes with each other. What's needed is a way to top-justify the middle box.\n Ah, I didn't know about the viewport justification with gTree.\n @kohske, I know it's possible to set the justification of a rectGrob (with `just=\"botttom\"`), but in this case, the ticks and labels are put together in a `gList`, which doesn't have a justification setting. But maybe Baptiste's method of wrapping in in a `gTree` with the `viewport` argument will work here.\n I've played with baptiste's code, and it does look like you need to set the `vp` for a grob, then wrap it in a gTree.\n\nThis should plot a row of boxes, then a row of red circles. The goal is to shift the circles up, away from center.\n\n``` R\ngrob1 <- rectGrob(width=unit(1,\"cm\"), height=unit(1,\"cm\"))\ngrob2 <- circleGrob(r=unit(.25,\"cm\"), gp = gpar(fill=\"red\"), just=\"bottom\")\ngrob3 <- circleGrob(r=unit(.25,\"cm\"), gp = gpar(fill=\"red\"), vp = viewport(y=.5, just=\"bottom\"))\ngrob4 <- grobTree(grob3)\n\n\ngt <- gtable(widths=unit(c(1,1,1),\"cm\"), heights=unit(c(1,1),\"cm\") )\ngt <- gtable_add_grob(gt, grob1, 1, 1)\ngt <- gtable_add_grob(gt, grob1, 1, 2)\ngt <- gtable_add_grob(gt, grob1, 1, 3)\ngt <- gtable_add_grob(gt, grob2, 2, 1) # Centered\ngt <- gtable_add_grob(gt, grob3, 2, 2) # Centered\ngt <- gtable_add_grob(gt, grob4, 2, 3) # Shifted up\ngt\nplot(gt)\n```\n OK, I think I've distilled the problem. The challenge, for anyone brave enough, is to figure out how to justify the blue sub-table to the top of the cell in the example below.\n\nI'm creating a large 2x3 gtable, then embedding two smaller 2x1 gtables into it. One of the sub-tables (red) is 2x1, and takes up the entire cell that it's in. The other sub-table (blue) is 2x1, and is only half the height of the cell that it's in.\n\n``` R\ngrob1 <- rectGrob()\ngrob2 <- rectGrob(gp = gpar(fill=\"pink\", col=\"black\"))\ngrob3 <- rectGrob(gp = gpar(fill=\"lightblue\", col=\"black\"))\n\n# The main 2x3 table, with rect grobs on top row\ngt <- gtable(widths=unit(c(2,2,2,2),\"cm\"), heights=unit(c(2,2),\"cm\") )\ngt <- gtable_add_grob(gt, grob1, 1, 1)\ngt <- gtable_add_grob(gt, grob1, 1, 2)\ngt <- gtable_add_grob(gt, grob1, 1, 3)\ngt <- gtable_add_grob(gt, grob1, 1, 4)\ngtable_show_layout(gt)\n\n\n# a 2x1 sub-table, with full (2cm) height, with red grobs\nsubgt1 <- gtable(widths=unit(2,\"cm\"), heights=unit(c(1,1),\"cm\"))\nsubgt1 <- gtable_add_grob(subgt1, grob2, 1, 1)\nsubgt1 <- gtable_add_grob(subgt1, grob2, 2, 1)\ngtable_show_layout(subgt1)\n\n# a 2x1 sub-table with half (1cm) height, with blue grubs\nsubgt2 <- gtable(widths=unit(2,\"cm\"), heights=unit(c(0.5,0.5),\"cm\"))\nsubgt2 <- gtable_add_grob(subgt2, grob3, 1, 1)\nsubgt2 <- gtable_add_grob(subgt2, grob3, 2, 1)\ngtable_show_layout(subgt2)\n\n\n# Embed the first (larger) subtable into gt\ngt <- gtable_add_grob(gt, gtable_gTree(subgt1), 2, 1)\n\n# Embed the second (smaller) subtable into gt\ngt <- gtable_add_grob(gt, gtable_gTree(subgt2), 2, 2)\n\ngt\nplot(gt)\n```\n\nIt seems possible to use `vp` if you wrap it in a grobTree, but I haven't figured out how to justify things properly. \n\n``` R\n# No effect\ngt <- gtable_add_grob(gt, gtable_gTree(subgt2, vp=viewport(just=\"bottom\")), 2, 3)\n\n# Wrapping in another grobTree works.\n# But this justifies _center_ of subtable to top of cell\ngt <- gtable_add_grob(gt, grobTree(gtable_gTree(subgt2, vp=viewport(just=\"bottom\"))), 2, 4)\n\nplot(gt)\n```\n\nAgain, the goal is to justify the blue table to the top of its containing cell.\n\nIf you try to solve it, note that there's a bug in gtable where, if you have two grobs in the same cell, only the first one will render. Basically, this means that you can't add a grob to a cell if something is already there -- you have to rebuild the whole gtable.\n Thanks - I wish we didn't need either (a) the absolute dimension `unit(1, \"cm\")`, or (b) going into the `subgt2` data structure directly with `subgt2$heights`. I may end up using the second method anyway.\n\nHadley suggested modifying `gtable_viewport` so that each viewport knows exactly how big it should be, but I haven't investigated this yet.\n I have a few thoughts, not particularly well organized:\n\n@kohske I'm not sure it makes sense to have `gtable_gTree()` treat the `vp` argument differently from `gTree()`. In this case, it uses `vp` to modify the `childrenvp` argument that's passed to `gTree()`, right? With this method, a gtable object will respect the `vp` argument for `gtable_gTree()`, but not the `vp` argument for `gTree()`.\n\nIf we wanted to go in this direction, I think it would be better to make gtable respect the `vp` of grobs in general, without requiring a `gTree` wrapper.\n\nAnother thought: it would be nice to have a general justification wrapper function, something roughly like this:\n\n``` R\ngrob_justify <- function(grob, just = \"center\") {\n  vp <- switch(just,\n    top    = viewport(y = 1, height = grobWidth(grob),  just = \"left\"),\n    right  = viewport(x = 1, height = grobWidth(grob),  just = \"right\"),\n    bottom = viewport(y = 0, height = grobHeight(grob), just = \"bottom\"),\n    left   = viewport(x = 0, height = grobHeight(grob), just = \"top\"),\n  )\n\n  grobTree(grob, vp = vp)\n}\n\n# Then you could do something like:\ngt <- gtable_add_grob(gt, grob_justify(g2, just=\"bottom\"), 2, 3)\n```\n\nThe problem is that `grobWidth` and `grobHeight` don't seem to work with gTree objects, such as the ones returned by `gtable_gTree()`. Is this because the grobs within a gTree can be in different viewports? I don't understand it well enough to know...\n\nIf it's impossible to write a function for justifying grobs in general, another possibility is to have:\n- a function that justifies basic grobs (like rectGrob, circleGrob, etc) which work with `grobHeight`\n- a function that justifies gtable objects for embedding in other gtables. For example, you pass in a gtable, and it returns something like `grobTree(gtable_gTree(x, vp = viewport(y=0, height=sum(x$heights), just=\"bottom\"))`\n @baptiste, I can see why it would be difficult/impossible to get the height of a regular gTree. It seems like the gTree returned by gtable_gTree is a special case where it is possible to get the height. Maybe another class should be added to those objects.\n\n@kohske, I like that approach in general, but I don't think it should be called grobHeight.gtable, if it takes a gtable as an input, since a gtable is not a grob.\n  In the current master branch, the use of `extended_breaks()` sometimes results in breaks at the extremes of a scale. This can look bad with facets because the tick labels for adjacent facets can be very close to each other.\n\n``` R\nggplot(mtcars, aes(x=wt, y=mpg, colour=hp)) + geom_point() + facet_grid(am~cyl)\n```\n  This fixes #585. It requires some modifications to gtable.\n\nRegular and `facet_wrap` work:\n\n``` R\nqplot(wt,mpg,colour=hp, data=mtcars) + \n    theme(axis.line = element_line(colour='black', lineend='square', size=4))\n\nqplot(wt,mpg,colour=hp, data=mtcars) + \n    theme(axis.line = element_line(colour='black', lineend='square', size=4)) +\n    facet_wrap(~cyl)\n```\n\nHowever, `facet_grid` still doesn't work properly. I think there needs to be a good way to edit the z values (in `facet_render.grid`) after the gtable has been created.\n\n``` R\nqplot(wt,mpg,colour=hp, data=mtcars) + \n    theme(axis.line = element_line(colour='black', lineend='square', size=4)) +\n    facet_grid(am~cyl)\n```\n Rebased onto master and merged at 13664066ecfc92294d28530d5bed6f0a843c0de3.\n  Hi, I think this is a question that's probably more appropriate for the ggplot2 mailing list: https://groups.google.com/forum/?fromgroups#!forum/ggplot2\n  This changes ggplot2 to use the external gtable package.\n Remaining:\n- Remove tests - check that they're in gtable package\n- Using multiple legends doesn't seem to work, e.g.: `dat <- data.frame(x=LETTERS[1:3], y=1, c=1:3); ggplot(dat, aes(x=x, y=y, fill=x, colour=c)) + geom_point()`\n- Make clear the name of each object\n @kohske When I create multiple guides, I get this error. Do you have any ideas where this is coming from?\n\n``` R\ndat <- data.frame(x=LETTERS[1:3], y=1, c=1:3)\nggplot(dat, aes(x=x, y=y, fill=x, colour=c)) + geom_point()\n# Error in grid.Call.graphics(L_downvppath, name$path, name$name, strict) : \n#   Viewport 'guide-1-2-2-2-2' was not found\n# In addition: Warning messages:\n# 1: In if (!(vp$parent$name %in% \"ROOT\")) push.vp(vp$parent, recording) :\n#   the condition has length > 1 and only the first element will be used\n# 2: In while (!rootVP(pvp)) { :\n#   the condition has length > 1 and only the first element will be used\n# 3: In while (!rootVP(pvp)) { :\n#   the condition has length > 1 and only the first element will be used\n```\n You should be able to completely delete `utilities-table.r` and `utilities-table-template.r`\n @hadley I was able to remove utilities-table-template.r, but utilities-table.r contains `compute_grob_widths()` and heights, which is called from `facet_render.wrap()`. I didn't find any equivalent functions in the gtable package.\n It seems like the fact we still need `compute_grob_widths` is a deficiency in the gtable api, but I don't see an obvious easy way to fix it.\n Visual test results here (minus the two broken tests from the colorbar change): http://stdout.org/~winston/vtest-gtable/diff/\n\nEverything looks good to me, except the last test in guide-position. The legend bounding boxes don't have the correct padding. The placement looks correct, though.\n Rebased and merged in 6f8800a3613d6ffae430ca6d989429beea6ca8ff.\n  And could you add a bullet to `NEWS` please?\n Thanks!\n Actually, do we also need a similar fix for `geom_segment`? \n  Rebased, squashed, added NEWS, and merged in c34750942c212427be188e4f4f2498c404e05f4c.\n  ``` R\n# This is a data set where group1 has values between 0 and 0.1, and\n# group2 is all 0.\n\nset.seed(222)\ndat <- data.frame(x=c(runif(10, max=0.1), 0, 0, 0), g = c(rep(\"group1\", 10), rep(\"group2\", 3)))\n\n# group2 looks flat relative to group1\nggplot(dat, aes(x = x, colour = g)) + geom_density()\n\n# Plotting group2 alone shows that it's not flat\nggplot(subset(dat, g==\"group2\"), aes(x = x, colour = g)) + geom_density() +\n  xlim(-2, 2)\n```\n\nI think the problem is probably that the bandwidth is calculated separately for each data group, and so they have very different smoothing levels.\n\nI'm not sure whether this should be considered a feature or a bug.\n A very similar problem happens with stat_ydensity, when one of the groups has all points at the same y value.\n\n``` R\n# mtcars data with all 4-cylinder models given 15 mpg\ndat <- mtcars\ndat$mpg[dat$cyl == 4] <- 15\n\nggplot(dat, aes(x=factor(cyl), y = mpg)) + geom_violin() + geom_point()\nggplot(dat, aes(x=factor(cyl), y = mpg)) + geom_violin(scale=\"count\") + geom_point()\n```\n\nI think the problem is that, when all the points have the same value, the bandwidth chosen by `density()` is arbitrary, and it's a very different value than the values for the other groups. This can be seen by setting `trim=FALSE`:\n\n``` R\nggplot(dat, aes(x=factor(cyl), y = mpg)) + geom_violin(trim=FALSE) + geom_point()\n```\n\nThe question is, what bandwidth value do you use? What you want to use might depend on how the other groups are distributed, so that the violins have somewhat-equal widths. To illustrate, we can disperse the data for the 6 and 8 cylinder models by a factor of 10, but leave the 4-cylinder models still all at the same value. This makes the 6 and 8 violins relatively narrower, so the 4 violin is relatively wider, even though the 4 violin hasn't changed at all.\n\n``` R\n# Disperse the data by a factor of 10\n# 4-cylinder models are still all at 15\nlibrary(plyr)\ndat2 <- ddply(dat, \"cyl\", transform, mpg = (mpg - mean(mpg)) * 10 + mean(mpg))\n\nggplot(dat2, aes(x=factor(cyl), y = mpg)) + geom_violin(trim=FALSE) + geom_point()\n```\n\nOne possible solution is to hard-code a width for these cases. But then this could throw off scaling to equal areas, and scaling area relative to count.\n Maybe use this code from densityvis:\nhttps://github.com/hadley/densityvis/blob/master/R/density-local.r\n It looks like there's different behavior when there's 1, 2, or more observations for a group.\n\n```\nset.seed(222)\ndat <- data.frame(x=c(runif(10, max=0.1), 0, 0, 0), g = c(rep(\"group1\", 10), rep(\"group2\", 3)))\n\n# When group2 has 3 observations, a line appears but it's not scaled appropriately\nggplot(dat, aes(x = x, colour = g)) + geom_density()\n\n# When group2 has 2 observations, no line appears for group2\nggplot(dat[1:12,], aes(x = x, colour = g)) + geom_density()\n\n# When group2 has 1 observations, error\nggplot(dat[1:11,], aes(x = x, colour = g)) + geom_density()\n# Error in rowSums(vapply(x, is.finite, logical(nrow(x)))) : \n#   'x' must be an array of at least two dimensions\n# Error in UseMethod(\"scale_dimension\") : \n#   no applicable method for 'scale_dimension' applied to an object of class \"NULL\"\n```\n  @kohske instead of merging master into these branches, could you rebase the branch on top of the current master instead, with `git rebase master mybranch`? I think this makes it easier to understand the changes made by each branch.\n @kohske, I have done this many times and haven't had any problems yet. If someone does pulls your branch and then adds commits to it, then it could cause problems for them -- it could make it harder to merge their changes back into your branch, but these problems can still be fixed. In practice, I don't think this is a big problem for ggplot2, because it's been pretty uncommon for people to work off of someone else's branch.\n\nRebasing the master branch would probably be a bad idea, since a lot of people do pull master and work from it.\n I think that's right -- you do not need a merge before the rebase.\n I think you can use expressions directly here, instead of passing in a string and parsing it.\n UPDATE: I was wrong about this working with master. Please see next comment.\n\nOn the master branch with the latest version of scales, labels can actually use expressions directly:\n\n``` R\n\np <- qplot(1:10, 1:10, colour = 1:10) + \n  scale_colour_gradient(breaks = c(2, 5, 8), labels = expression(2^2, 2^3, 2^4))\np\n\np + guides(colour = \"legend\")\n```\n\nThis is a slightly modified version of the example posted to the mailing list. It looks fine to me, with superscripted exponents:\n\n``` R\np <- qplot(1:10, 1:10, colour = 1:10) + \n  scale_colour_gradient(trans='log10', guide=guide_colorbar(), \n    breaks=trans_breaks('log10', function(x) 10^x),\n    labels=trans_format('log10', math_format()))\np\n```\n\nSo, is this problem already fixed?\n In the previous comment, I was right about expressions working with color bars, but I was wrong about it working with the output of formatters like `math_format()`.\n\nTo fix this, I've adapted @kohske's code in commit 1567d9d76bd752b9f692127317739bd705a8da84.\n  This sounds like exactly the same issue as #592.\n Fixed in #643.\n  All of these examples look the same to me, using ggplot2 0.9.1 and the 0.9.2 release candidate. The format of the dates is \"Jan 2012\".\n\nCan you post the result of `sessionInfo()`?\n\nedit: Oh, is it that it displays \"Okt 2012\" for the German locale?\n I think the problem is that `train_cartesian()` is memoized, so it's storing the result of the first call to `scale_break_info()`, and does not run it again on subsequent calls to `ggplot()`.\n\nI'm not sure of a good solution - the ones I can think of are not very good:\n- Make `memoise()` detect changes to locale changes. But this seems too much of a special case.\n- Provide a user-facing function to clear the memoization cache. But I don't think users would ever figure this out since it's so obscure.\n- Provide an easy way to reload ggplot2 (which will create new environments for the memoization). But again, I don't think most users would figure this out.\n- Don't memoize the function.\n It looks like the speed difference is negligible.\n\nHere's some test code, with no facets, and with `facet_grid`:\n\n``` R\nn <- 10\ntimes <- numeric(n)\n\n# Non-faceted version:\nfor (i in 1:n)\n  times[i] <- system.time(print(qplot(wt, mpg, data=mtcars)))[1]\n\n\n# Or, with facet_grid:\nfor (i in 1:n)\n  times[i] <- system.time(print(qplot(wt, mpg, data=mtcars) + facet_grid(am~cyl)))[1]\n```\n\nI ran each test in a clean session. Here are the results without facets. It's basically the same with or without faceting:\n\n``` R\n# =========================\n# Without facets\n# =========================\n\n# ==== With memoise() ====\ntimes\n# [1] 0.262 0.164 0.162 0.159 0.158 0.152 0.162 0.175 0.171 0.157\nmean(times)\n# 0.1722\nmean(times[-1])\n# 0.1622\n\n# ==== Without memoise() ====\ntimes\n# [1] 0.246 0.162 0.161 0.158 0.160 0.154 0.161 0.157 0.162 0.161\nmean(times)\n# 0.1682\nmean(times[-1])\n# 0.1600\n```\n\nHere are the results with facets:\n\n``` R\n# =========================\n# With facet_grid(am ~ cyl)\n# =========================\n\n# ==== With memoise() ====\ntimes\n# [1] 0.874 0.566 0.574 0.549 0.529 0.544 0.545 0.547 0.544 0.544\nmean(times)\n# 0.5816\nmean(times[-1])\n# 0.5491\nsd(times[-1])\n# 0.0133\n\n# ==== Without memoise() ====\ntimes\n# [1] 0.739 0.560 0.554 0.630 0.560 0.549 0.543 0.562 0.541 0.551\nmean(times)\n# 0.5789\nmean(times[-1])\n# 0.5611\nsd(times[-1])\n# 0.0270\n```\n\nI think we can just take it out.\n No worries - the issue was a bug, and now it's fixed (by #643).\n  Fixes #580.\n\nThis is to be used with hadley/scales#22, where the default breaks algorithm is changed to `extended_breaks()`. Since `extended_breaks()` doesn't work with dates and times, the default for dates/times needs to be set to the original `pretty_breaks()`.\n\nThis still has a problem: if you don't specify `scale_x_date()`, it instead uses the plain old `scale_x_continuous()`, which uses `extended_breaks()`:\n\n``` R\nset.seed(321)\ndf <- data.frame(\n  dx = seq(as.Date(\"2012-02-29\"), len=100, by=\"1 day\")[sample(100, 50)],\n  price = runif(50)\n)\ndf <- df[order(df$dx), ]\n\n# This works now:\nqplot(dx, price, data=df, geom=\"line\") + scale_x_date()\n\n\n# This doesn't:\nqplot(dx, price, data=df, geom=\"line\") \n# Error in Math.difftime(35.9333333333333, base = 10) : \n#   'log' not defined for \"difftime\" objects\n```\n\nI think the problem is that  `scales_add_defaults()` in scales-.r only appends `discrete` and `continuous` to the scale name, when in this case it should append `date`.\n I've made changes to `scales_add_defaults()` so that it can properly distinguish between the different types of scales, and create them appropriately.\n\nVisual tests results here (minus a couple tests from scale-breaks, since they were broken by the recent colorbar change):\nhttp://stdout.org/~winston/vtest/diff/\n\nThings look pretty good. One possible change is to increase the default number of breaks for `extended_breaks()` from 5 to something larger. See the geom-raster and line test pages for examples where there aren't enough breaks (in my opinion).\n I think the current default `n` is fine - unless you want to test a few other values.\n\nAlso, since this change depends on a new version of an external package, can you please increment the minor version number of scales and increment the required version in the `DESCRIPTION`?\n I've incremented the version in the DESCRIPTION here and in scales (to 0.2.1.1). Do you think we should add another issue to 0.9.2 so that we don't forget to turn the version numbers to a 3-number format before release?\n\nAlso, I tried changing `n` from 5 to 6. Although some things looked a little better, others looked worse, so I guess we might as well leave it as is.\n  With upcoming version of ggplot2 (0.9.2), it gives a different error:\n\n```\n> ggplot(data, aes(x=Date, y=value)) + geom_line()\nDon't know how to automatically pick scale for object of type yearmon. Defaulting to continuous\nError: Discrete value supplied to continuous scale\n```\n\nMaking it work would require modifying the scales package to support yearmon objects.\n\nSince yearmon (and yearqtr) are classes specific to zoo, I don't think it makes sense to make the changes to ggplot2/scales. A simple way to handle this case is to convert it back to a Date object:\n\n``` R\ndata$Date <- as.Date(data$Date)\nggplot(data, aes(x=Date, y=value)) + geom_line()\n\nggplot(data, aes(x=Date, y=value)) + geom_line() + scale_x_date()\nggplot(data, aes(x=Date, y=value)) + geom_line() + scale_x_date(labels=date_format(\"%Y-%m-%d\"))\n```\n Here's some sample code showing how to create a new transformer object.\n\n``` R\n# functions for yearmon transformer ================ \n\n# Convert from numeric to yearmon\nto_yearmon <- function(x)  as.yearmon(x)\n\n# Inverse: convert from yearmon to numeric\nfrom_yearmon <- function(x) {\n  if (!inherits(x, \"yearmon\")) {\n    stop(\"Invalid input: date_yearmon works with objects of class yearmon only\",\n      call. = FALSE)\n  }\n  as.numeric(x)\n}\n\n# Returns a _function_ that takes a yearmon object as input and returns a \n# yearmon object as output, with approximately n breaks, using pretty_breaks().\n# Can't just use pretty_breaks() directly, since it changes yearmon objects\n# to numeric.\n# n is number of breaks\n# (Does this really need to be a function returning a function?)\nyearmon_breaks <- function(n = 5) {\n  function(x) as.yearmon(pretty_breaks(n)(x))\n}\n\n# Takes a yearmon as input and returns a string representation of it\nyearmon_format <- function(x) {\n  paste(\"foo\", as.numeric(x))\n}\n\n# yearmon transformation object ================ \n\n# Returns a function that creates a transformer\n# (Does this really need to be a function returning a function?)\nyearmon_trans <- function() {\n  trans_new(\"yearmon\", transform = from_yearmon, inverse = to_yearmon,\n    breaks = yearmon_breaks(), format = yearmon_format)\n}\n\n\n# Example ====================================================================\n\nlibrary(zoo)\ndates <- as.yearmon(seq(as.Date('2008-12-01'), by='month', to=as.Date('2012-06-01')))\ndata <- data.frame(Date=dates, value=rnorm(length(dates)))\n\nggplot(data, aes(x=Date, y=value)) + geom_line() +\n  scale_x_continuous(trans = yearmon_trans())\n```\n  Looks pretty good. For future reference, you don't have to rebuild the docs after each commit -- just once at the end would be fine.\n Looks great - thanks!  I've added a few comments about various details.\n Does this fix #501?\n Ok, no problems - I just wanted to check.  In the future, can you please either roxygenise within each commit, or once at the end - otherwise the commit history gets a bit cluttered.\n\n@wch can you please help getting the commit to merge cleanly?\n Sure, I'll get it merged. In general, I think it's good to keep the roxygenizing commits separate to make merging easier -- this makes it possible to drop the roxygenizing commits in case of conflicts, and then re-run it later.\n I rebased it, cleaned it up, and merged at 4a64647f004636016e05414fd02bd35e4e252d4f.\n  Thanks for taking the effort to improve the ggplot2 documentation! Some notes:\n- The \"right\" way to modify the documentation is to modify the .r files and then run the `document()` function from devtools (or the `roxygenize()` function from roxygen2). (I think you did this, but not completely sure)\n- Make a commit before you run `document()`; after running it, make another commit with a message like \"Re-roxygenize\". This will be especially helpful right now, because there have been some changes to devtools (or roxygen2?) that changed the way text is sorted, and this will cause merge conflicts that will be easier to fix if the roxygen step is in its own commit.\n- The lines should be hard-wrapped around 72-80 characters (although sometimes slightly more)\n I think it would be best to re-do the changes with a separate roxygen step, because of merging issues. The branch with the new theming system should get merged soon, and since it also updated documentation with roxygen, there will be some merge conflicts that will be easier to fix if it's in a separate commit.\n\nYou might want to make a new branch and pull request (there are ways of replacing this branch with a new one of the same name, but it might just be simpler to make a new branch).\n FYI, you can delete this old branch from github with:\n\n```\ngit push origin :DocumentationWork\n```\n\nThis won't affect your local branch.\n  I think this is the same underlying issue as #520, and should be fixed with the gtable rewrite in the next release.\n  @hadley, is `print.proto` needed anymore? I can't think of any cases where it would be used, except debugging. And in that case, the equivalent could be called with `x$pprint()`.\n\nedit: I take it back - it does look like it's used all the time. Maybe the fix should wait for the S3 rewrite?\n I think the printing is useful at the user level - for example, when you run:\n\n``` R\n> scale_x_continuous()\ncontinuous_scale(aesthetics = c(\"x\", \"xmin\", \"xmax\", \"xend\", \n    \"xintercept\"), scale_name = \"position_c\", palette = identity, \n    expand = expand, guide = \"none\")\n```\n\nMaybe the class could be `ggproto`?\n It looks like it will be tedious to add the class `ggproto` to all the proto objects in ggplot2. When you create a new proto object from a prototype, it doesn't inherit the class.\n\nHere is something I added to `aaa-.r`:\n\n``` R\nclass(TopLevel) <- c(\"ggproto\", class(TopLevel))\n```\n\nWhen you look at `TopLevel`, it has the class:\n\n``` R\nclass(TopLevel)\n# [1] \"ggproto\"     \"proto\"       \"environment\"\n```\n\nBut its descendants don't get the added class:\n\n``` R\nclass(Stat)\n# [1] \"proto\"       \"environment\"\nclass(stat_bin())\n# [1] \"proto\"       \"environment\"\n\n# Test it on a new object\n\nz <- proto(TopLevel)\nclass(z)\n# [1] \"proto\"       \"environment\"\n```\n\nI think we'd need to add the `ggproto` class manually to every proto object in ggplot2.\n I tried this:\n\n``` R\nggproto <- function(...) {\n  x <- proto(...)\n  class(x) <- c(\"ggproto\", class(x))\n  x\n}\n```\n\nand I replaced all instances of `proto()` with `ggproto()`. It doesn't seem happy, though. Lots of stuff doesn't work anymore. For example:\n\n```\n> stat_bin()\nError in eval(expr, envir, enclos) : argument is missing, with no default\n\n> geom_point()\nError in eval(expr, envir, enclos) : argument is missing, with no default\n```\n\n---\n\nI've also tried copying the call for proto more closely in the hopes of preserving the environment, but it still doesn't work.\n\n``` R\nggproto <- function(. = parent.env(envir), expr = {},\n  envir = new.env(parent = parent.frame()), ..., funEnvir = envir) {\n\n  x <- proto(. = ., expr = expr, envir = envir, ..., funEnvir = envir)\n  class(x) <- c(\"ggproto\", class(x))\n  x\n}\n```\n\nWhen I try to load, it's unhappy:\n\n```\n> load_all()\nLoading ggplot2\nError in eval(expr, envir, enclos) : object 'expr' not found\n```\n\nI think it may have something to do with this line `proto()`, but I'm not sure:\n\n``` R\n   eval(substitute(eval(quote({\n        expr\n    })))\n```\n Yup, that looks like it works.\n Putting this off to release 0.10, when we stop using proto.\n  Thanks - does this pass all tests and visual tests?\n\nAlso it should be 'suppressed', not 'surpressed'.\n You should use the latest version of vtest from github. I think you should test it against `ggplot2-0.9.1` (but I'm not 100% sure).\n\nYou can also try running `vdiffstat('recent')` or `vdiff_webpage('recent')`, which should compare it against a somewhat newer commit (although that commit has the same resultset as 0.9.1).\n @kohske Thanks for running tests.\n\nI have a question about the warnings: Does it really need a warning when users do `breaks=NULL`? For positional scales (x and y), `breaks=NULL` just means that nothing shows up on the guide (the axis ticks), and there's no warning.\n\nIn other words, why is it valid to use `breaks=NULL` for x and y, but invalid for colour, fill, etc?\n I think it makes sense for a non-positional guide to be suppressed when `breaks=NULL`, but I don't think a warning is necessary. I guess we can see what Hadley thinks.\n I vote for no warning.\n I took out the warnings and merged into master (2e7015c7f31027269e6f5e7c314d011254ede04b).\n   I made the change to my copy of the scales package. It seems to work, except for dates. I get the error:\n\n``` R\nd> pretty_breaks()(as.Date(c(\"2008-01-01\", \"2009-01-01\")))\n    Jan 2008     Apr 2008     Jul 2008     Oct 2008     Jan 2009 \n\"2008-01-01\" \"2008-04-01\" \"2008-07-01\" \"2008-10-01\" \"2009-01-01\" \n\nd> extended_breaks()(as.Date(c(\"2008-01-01\", \"2009-01-01\")))\nError in Math.difftime(122, base = 10) : \n  'log' not defined for \"difftime\" objects\n```\n Here are the lines of code from `labeling::extended`:\n\n``` r\ndelta <- (dmax-dmin)/(k+1)/j/q\nz <- ceiling(log(delta, base=10))\n```\n\nI think that the purpose of the `log` is to get the difference in number of digits between the smallest and the largest number in the ticks. So for dates, I think `z` can just be set to zero. I'll contact the author of the labeling package and ask him.\n Yes, extended breaks shouldn't be the default for dates and times.  Stick with the old default for them.\n I think this might require a wrapper function in scales which sends numerics to `extended_breaks()`, and dates to `pretty_breaks()`.\n I think the defaults for `scale_datetime` should change from waiver to `pretty_breaks`\n  Some of the visual tests in visual_test/scale-breaks.r now throw errors. This was introduced by e6594a11b5cec0941a0c8c15b5c31ff41ba22be2, where the colorbar guide started being used as the default.\n\nHere are the two bad tests:\n\n``` R\ndat <- data.frame(x=1:3, y=1:3)\n\nggplot(dat, aes(x=1, y=y, fill=x)) + geom_point(shape=21) + scale_fill_continuous(breaks=NULL)\n\nggplot(dat, aes(x=1, y=y, colour=x)) + geom_point() + scale_colour_continuous(breaks=NULL)\n```\n\nWe should also have some unit tests for this...\n The error in master (1df1e826901a4631f36761536daabfc3068c4ddc) is this:\n\n``` R\ndat <- data.frame(x=1:3, y=1:3)\nggplot(dat, aes(x=1, y=y, fill=x)) + geom_point(shape=21) + scale_fill_continuous(breaks=NULL)\n# Error in names(guide$key) <- c(output, \".label\", \".value\") : \n#   'names' attribute [3] must be the same length as the vector [2]\n\nggplot(dat, aes(x=1, y=y, colour=x)) + geom_point() + scale_colour_continuous(breaks=NULL)\n# Error in names(guide$key) <- c(output, \".label\", \".value\") : \n#  'names' attribute [3] must be the same length as the vector [2]\n```\n\nAlso, this gives a warning:\n\n``` R\nggplot(dat, aes(x=1, y=y, size=x)) + geom_point() + scale_size_continuous(breaks=NULL)\n# Warning message:\n# In is.na(breaks) : is.na() applied to non-(list or vector) of type 'NULL'\n```\n In 0.9.1, I get warnings only, but no errors.\n\n``` R\nggplot(dat, aes(x=1, y=y, colour=x)) + geom_point() + scale_colour_continuous(breaks=NULL)\n# Warning message:\n# In is.na(breaks) : is.na() applied to non-(list or vector) of type 'NULL'\n```\n\nMaybe it should not show the legend when `breaks=NULL`? I think that is the existing behavior in 0.9.1.\n Oh, I see what you mean. Yes, the bug is in colorbar.\n  I'm not sure if this is buggy behavior, exactly, or just not well-defined. The problem isn't with `geom_segment`, but with adding geoms with data that introduce new factor levels. By default, unused levels are dropped when you add a geom with its own data. But if you add another geom which uses more factor levels, all the combined factor levels are put into a new factor, with the levels ordered alphabetically.\n\nHere's a simplified version of the code which distills the problem:\n\n``` R\ndf1 <- data.frame(x=1.5, y=factor(\"b\",        levels=c(\"b\",\"a\")))\ndf2 <- data.frame(x=1:2, y=factor(c(\"a\",\"b\"), levels=c(\"b\",\"a\")))\n\np1 <- geom_point(aes(x,y), data=df1, colour=\"red\")\np2 <- geom_point(aes(x,y), data=df2)\n\n# Order (from origin) is \"a\", \"b\"\n# This is different than the order of the factor levels\nggplot() + p1 + p2\n\n# Order (from origin) is \"b\", \"a\"\n# This is the correct order, based on order of factor levels\nggplot() + p2 + p1\n```\n\nThe way to make it work as expected is to use `scale_y_discrete(drop=FALSE)`:\n\n``` R\n# b only\nggplot() + p1\n# Only print point from df1, but have both y levels \"b\", \"a\"\nggplot() + p1 + scale_y_discrete(drop=FALSE)\n\n\n# Both of these have order \"b\", \"a\"\nggplot() + p1 + p2 + scale_y_discrete(drop=FALSE)\nggplot() + p2 + p1 + scale_y_discrete(drop=FALSE)\n```\n Winston's explanation is right - this the behaviour is a bit confusing, but I don't see any other way to deal with the problem of having different datasets on different layers.  You can either make sure the layers have the same factor setup, or override it with scale limits.\n Oh, hmmmm.  Now I see.  Maybe that is a bug\n Maybe the way to fix this is to drop unused levels after they get combined together. Right now, I think they're getting dropped early in the process, before they are combined.\n  I think you also need the latest version of scales, 0.2.1 -- in fact, installing ggplot2 0.9.1 lists scales 0.2.1 as a dependency, so installing ggplot2 should automatically install that version of scales.\n  These are things that will break existing code, so they should be delayed until 0.10 or 1.0:\n- Increase axis title margin, so that x and y axis titles aren't so close to tick labels\n- Remove element_blank (?)\n- Merge some element properties:\n  - `xx.margin` into `xx.background`\n  - `legend.key.height`/`width` into `legend.key`\n  - `xx.align` into xx (NA or \"auto\" for text/number auto alignment)\n  - `axis.ticks.length` into `axis.ticks`\n- Convert `theme_grey()` from a function to a simple list\n- Allow theming for geoms, such as `geom_bar = element_geom(...)`\n   I added more commits, and I think this branch is ready to be merged now.\n Let's go over this on Tuesday, and then you can merge it.\n  Would you like to submit a pull request for this? Some instructions on getting started here:\nhttps://github.com/hadley/ggplot2/wiki/Developing-ggplot2-using-github\n\nIf not, no problem.\n  Because `id` was being calculated from the un-munched data, it sometimes ended up being a different length from `coords$x` and `$y`.\n\nI also removed the `match()` used to calculate `id`. The same information seems to be there already, in `coords$group`, but this should be double-checked.\n This branch was rebased onto master: aa29fc288c175042050b93a998c8a637c567a3d1.\n  The change to a new auto-generated web documentation system is currently in progress; hopefully the new pages will be up soon.\n  This is happening because qplot is making one set of bars for the histogram (it automatically adds a geom_bar), and then geom_bar is adding another set of bars on top. You probably want something like this:\n\n``` R\n# With ggplot:\nggplot(mydata, aes(x=date, fill=value)) + geom_bar(binwidth = 7, alpha=0.5)\n\n# With qplot:\nqplot(date, fill=value, data=mydata, binwidth=7)\n```\n  this should be fixed in 0.9.1. Are you using that version?\n Got it. I've submitted a pull request for a fix.\n  @BrianDiggs Thanks for delving into this. This is a very weird bug. I can confirm that it happens in Linux and on OS X.\n\nIt turns out that if you save the output of `llply()` and then run `compact()` on that, it works fine!\n\n```\n> library(ggplot2)\n> debug(ggplot2:::locate_grid)\n> test.2 <- data.frame(title='something', x=24, y=110, gridrow='a', gridcol='a')\n> qplot(x=x, y=y, label=title, geom='text', data=test.2) + facet_grid(gridrow~gridcol)\n\ndebugging in: locate_grid(data, layout, facet$rows, facet$cols, facet$margins)\ndebug at /...../ggplot2/R/facet-locate.r#6: {\n<<... etc ...>>\n\n<<Hit 'n' a few times until you get to this line:>>\n\n debug at /...../ggplot2/R/facet-locate.r#21: values <- compact(llply(data, quoted_df, vars = c(rows, cols)))\nBrowse[2]> data\n      title  x   y gridrow gridcol\n1 something 24 110       a       a\nBrowse[2]> llply(data, quoted_df, vars = c(rows, cols))\n$title\ndata frame with 0 columns and 0 rows\n\n$x\ndata frame with 0 columns and 0 rows\n\n$y\ndata frame with 0 columns and 0 rows\n\n$gridrow\ndata frame with 0 columns and 0 rows\n\n$gridcol\ndata frame with 0 columns and 0 rows\n```\n\nAt this point, things are exactly the same for me with both data frames, except that in one `data$x==24`, and in the other `data$x==25`. The `llply()` returns the exact same thing in both cases.\n\nAlso, if you save the output of `llply()` and then run `compact()` on it, it works fine in both cases:\n\n```\nBrowse[2]> z <- llply(data, quoted_df, vars = c(rows, cols))\nBrowse[2]> compact(z)\n$title\ndata frame with 0 columns and 0 rows\n\n$x\ndata frame with 0 columns and 0 rows\n\n$y\ndata frame with 0 columns and 0 rows\n\n$gridrow\ndata frame with 0 columns and 0 rows\n\n$gridcol\ndata frame with 0 columns and 0 rows\n```\n\nIt's only when you run `compact(llply(...))` that things go awry with the data where `x==25`:\n\n```\n### when x == 25\nBrowse[2]> compact(llply(data, quoted_df, vars = c(rows, cols)))\nError in eval(expr, envir, enclos) : object 'expr' not found\n\n\n### when x == 24\nBrowse[2]> compact(llply(data, quoted_df, vars = c(rows, cols)))\n$title\ndata frame with 0 columns and 0 rows\n\n$x\ndata frame with 0 columns and 0 rows\n\n$y\ndata frame with 0 columns and 0 rows\n\n$gridrow\ndata frame with 0 columns and 0 rows\n\n$gridcol\ndata frame with 0 columns and 0 rows\n```\n\nThe `compact()` function is very simple and just relies on functions in base R:\n\n```\n> compact\nfunction (l) \nFilter(Negate(is.null), l)\n<environment: namespace:plyr>\n```\n\nThis may be a bug in the way plyr evaluates things, but it's also possible that this is a bug in R!\n Hm, it actually looks like even though this line sets `values`, the variable is never used again. https://github.com/hadley/ggplot2/blob/master/R/facet-locate.r#L21\n\n``` R\nvalues <- compact(llply(data, quoted_df, vars = c(rows, cols)))\n```\n\nIt doesn't seem to make sense to run llply on it like that anyway.\n\nMy guess is that this a piece of leftover test code. When the line was added in a4c85114c33105dd9ca66aec9d5edf679ccfc91a, it was indented slightly differently from the surrounding code, and even then `values` was set but never used again.\n I'm pretty sure the error has something to do with the call stack depth. I tried stripping down the problem to the bare minimum. If you run these from the top-level prompt, they crash at different values of `i`:\n\n``` R\nlibrary(plyr)\nlibrary(ggplot2)\n\n# Crashes at i==12\nfor (i in 1:100) {\n  print(i)\n  llply(data.frame(myvar=i), ggplot2:::quoted_df, vars = as.quoted(\"foo\"))\n}\n\n# Wrapped with identity()\n# Crashes at i==13\nfor (i in 1:100) {\n  print(i)\n  identity(\n    llply(data.frame(myvar=i), ggplot2:::quoted_df, vars = as.quoted(\"foo\")))\n}\n\n# Wrapped with 2x identity()\n# Crashes at i==14\nfor (i in 1:100) {\n  print(i)\n  identity(identity(\n    llply(data.frame(myvar=i), ggplot2:::quoted_df, vars = as.quoted(\"foo\"))))\n}\n\n```\n\nIf you run them from within `locate_grid()`, the numbers are 21, 22, and 23.\n\nIf you removing the `llply()`, the code works without trouble.\n OK, I think I've gotten to the bottom of it. The problem has to do with the way `eval` handles integer values.\n\nFirst, take a look at the `quoted_df` function:\n\n```\n> ggplot2:::quoted_df\nfunction(data, vars) {\n  values <- eval.quoted(vars, data, emptyenv(), try = TRUE)\n  as.data.frame(compact(values))\n}\n```\n\nWe'll use a simpler version of this function and to some tests with 11, 12, and 11:12. The value 12 does something weird.\n\n``` R\n# A simpler version of quoted_df\ntest <- function(data, vars) {\n  eval.quoted(vars, data, emptyenv(), try = TRUE)\n}\n\nllply(data.frame(myvar=11), test, vars = as.quoted(\"foo\"))\n# myvar\n# $myvar$foo\n# NULL\n\nllply(data.frame(myvar=12), test, vars = as.quoted(\"foo\"))\n# $myvar\n# $myvar$foo\n# $myvar$foo[[1]]\n# NULL\n# \n# $myvar$foo[[2]]\n# eval(expr, envir, enclos)\n# \n# $myvar$foo[[3]]\n# function (e) \n# {\n# }\n# <environment: 0x1060def58>\n\n\nllply(data.frame(myvar=11:12), test, vars = as.quoted(\"foo\"))\n# myvar\n# $myvar$foo\n# NULL\n```\n\nThe issue has something to do with `eval.quoted`, which looks like this:\n\n```\n> eval.quoted\nfunction (exprs, envir = NULL, enclos = NULL, try = FALSE) \n{\n    if (is.numeric(exprs)) \n        return(envir[exprs])\n    qenv <- if (is.quoted(exprs)) \n        attr(exprs, \"env\")\n    else parent.frame()\n    if (is.null(envir)) \n        envir <- qenv\n    if (is.data.frame(envir) && is.null(enclos)) \n        enclos <- qenv\n    if (try) {\n        results <- lapply(exprs, failwith(NULL, eval, quiet = TRUE), \n            envir = envir, enclos = enclos)\n    }\n    else {\n        results <- lapply(exprs, eval, envir = envir, enclos = enclos)\n    }\n    names(results) <- names(exprs)\n    results\n}\n<environment: namespace:plyr>\n```\n\nIt uses `lapply` to call `eval`. In the call to `eval`, the value of `envir` is the `data` that's passed in.\n\nIt turns out that if you call `eval` when `envir` is set to a number, it treats it differently than if it's something else -- it specifies the frame number to evaluate the expression.\n\nSo I would say the bug is in `quoted_df`. It should check for the special case where `data` is a single integer, and wrap it up somehow so that `eval` uses it as the environment to evaluate in, not as the frame number of the environment to evaluate in.\n Thanks for the sleuthing - I agree that that line can be eliminated.  `eval.quoted` should probably do a better job of checking its inputs, but that's another story.\n Fixed in c97be666dcbb5696d226a5b2add1aa93e23f2a1c. I've also filed an issue for plyr for `eval.quoted`: hadley/plyr#85.\n  Thanks, fixed in 31b5358fb521ef000559fa4319dc6ed9f2c1e6a3.\n  It looks like the problem is that in `coord_render_bg.map`, the `xrange` values are expanded to go outside the range [0,360].\n\nBrowsing inside that function:\n\n```\nBrowse[1]> xrange\n[1] -97.2 457.2\n```\n\nAfter they're projected, the grid lines actually wrap around, which is why there are the horizontal lines. I modified the code to draw semi-transparent lines, and it made the wraparound very apparent.\n\nThe solution is to limit `xrange` and `yrange` to values that won't wrap around.\n  This looks just like a previous issue with `scale_shape_identity`: #402.\n\nI don't know if the solution (changing it to a continuous scale) is the same though. `linetype` can take string values, so it may not play well if it's changed to continuous.\n\nIn the meantime, the \"proper\" solution is to use `scale_linetype_identity`, which tells ggplot that the linetype values should be passed directly:\n\n``` R\nggplot(data = data.frame(x=1:3,y=1:3)) + \n            geom_point(aes(x,y)) + \n            geom_vline(aes(xintercept = c(0.5, 0.95, 1), linetype = c(2,1,2)), color = 'grey') +\n            scale_linetype_identity()\n```\n @dlebauer - I was referring to changing the _definition_ of `scale_linetype` from a discrete scale to a continuous scale, as 402 -- not changing the data that's passed in.\n The previous behaviour was a bug - you shouldn't be able to map linetype to a continuous value. \n That would be analogous to `qplot(Species, Sepal.Length, data = iris, linetype = c(1,2,1)) + scale_linetype_identity()`\n  Should it be \"colourbar\" for spelling consistency?\n I mean, should it be \"colourbar\" in the code?\n Rebased, edited, and merged in 81c847b25899ac3f62b4dac9d72e256da8fd68be.\n  It would be handy to be able to set just the lower or upper limit of a scale. For example, when making a line graph, you might just want to set the lower y limit to 0, but let ggplot automatically calculate the upper bound.\n\n``` R\n# Lower y value on plot is 8\nggplot(BOD, aes(Time, demand)) + geom_line()\n\n# Something like this would be useful\nggplot(BOD, aes(Time, demand)) + geom_line() + ylim(0,NULL)\n```\n  I think having unit tests is an excellent idea. Visual tests would also be useful. In order to keep the number of visual tests small (and therefore fast), I think it would be good to \"exercise\" multiple things in one graph -- for example, in one visual test, do something to the x scale and do something different to the y scale.\n I'm adding some more tests... Can you explain what the difference is between `major` and `major_source`, and the same for `minor` and `minor_source`? This will help me write better tests.\n\n**Edit:** Is `major_source` in the data space, and `major` in the panel's native coordinates (ranging from 0 to 1)?\n I squashed the commits into 22434e76375eaea3f530598db435751966f79264, added some tests, and merged in 7f2cbec26b2fa333de3a74659de29120473047b4.\n  My feeling is that it's harder to visually match up colors on a continuous color legend. Perhaps this is something that deserves empirical study, e.g., see how accurately and quickly people can interpret graphs with with continuous vs. discrete guides.\n When there's a continuous colorbar, I find my eyes going back and forth between the legend and the data a lot, and without any practical gain in interpreting the data... For example, compare these:\n\n```\nggplot(mtcars, aes(wt,mpg, colour=disp)) + geom_point(size=4)\n\nggplot(mtcars, aes(wt,mpg, colour=disp)) + geom_point(size=4) +\n    guides(colour=\"colourbar\")\n```\n\nHere's what it feels like I'm doing:\n- With the discrete legend, I can look at a point, then at the legend, at the point, and then at the legend again. Then I can say, that point is around 300 or so, maybe in the direction of 400.\n- With the colorbar, I look back and forth between the points and legend many more times, trying to find the exact point on the bar that matches the color of a point. But in the end, my interpretation of the values feels no more accurate than before. I think the gradient makes it difficult to accurately perceive a horizontal \"line\" of color on the legend -- the neighboring colors interfere with the perception of each line.\n\nOf course, it would be nice to have data on this stuff.\n\nSemi-unrelated issue: I noticed that the discrete legend has the larger values on top, while the continuous legend has smaller values on top. Is this difference intended?\n  I think the `equal` option (for equal area) should stay the same. And `width` should change to `equalwidth`. \n\nThis will maintain compatibility with previous version, and since `equalwidth` will probably not be commonly used, I think it's OK for it to get the more verbose name.\n I really don't like that usage of `match.args` - I think it's better to not rely on special evaluation tricks and just give `match.args` all the arguments it needs.\n Rebased onto master and merged at aa9655e62f68bec5e8f1a70b0e014b7668502ad7.\n  This was broken by 19da6a8a4ec313c7e447b493387c3241584d1535.\n\nBisect script here: https://gist.github.com/2697594\n  In `scale-.r`, the function `scale_breaks.continuous()` calls `zero_range()` from scales, which is defined as:\n\n``` R\nfunction (x)  {\n    length(x) == 1 || isTRUE(all.equal(x[1] - x[2], 0))\n}\n```\n\nThe default tolerance for `all.equal` is `.Machine$double.eps ^ 0.5`. According to `?.Machine`, `double.eps` is \"the smallest positive floating-point number x such that `1 + x != 1`.\"\n\nIn general, I think `scale_breaks.continuous()` needs a better way of figuring out whether a non-zero range is intended or due to floating point error. (I'm not sure this is possible, though.)\n  The problem is that you're using `scale_date` with `POSIXct` values (it expects dates).  I think the solution is that somewhere in `scale_x_datetime` a warning needs to be raised if you're using the wrong type of data.  Probably the best place is in `to_time` and `to_date`\n  This is happening because each group of the data is binned separately, and for each group, the bins are centered based on the data.\n\nA workaround is to specify the origin:\n\n``` R\nggplot(data = temp, aes(x, y, z = z, colour = f)) +\n  stat_summary2d(origin=c(min(temp$x), min(temp$y)))\n```\n\nNote that the outlines overlap and so it may look a little strange.\n Probably the mailing list is a better place to discuss this, but it's OK here since this started out as a bug report.\n\nOne way is to re-order the factor levels:\n\n``` R\ntemp$f <- factor(temp$f, levels=c(\"3\", \"1\", \"2\"))\n\nggplot(data = temp, aes(x, y, z = z, colour = f)) +\n  stat_summary2d(origin=c(min(temp$x), min(temp$y)))\n```\n  There are many roxygen documentation blocks that aren't properly commented. They have just `#`, instead of `#'` marking the block, and so they're ignored by roxygen2.\n\nFor example, the `firstUpper` function here:\nhttps://github.com/hadley/ggplot2/blob/master/R/aaa-.r\n\nAlso, a lot of these blocks have a typo where they use `@keyword` instead of `@keywords`.\n There are also many cases with `@keywords internal` that have `#'`. Should those be changed to `#`, then?\n\nOr are there two types of internal docs you have in mind?\n After some clarification from @hadley, I think the code generally doesn't need to be changed:\n\nThere are three levels of documentation:\n\n1) needed by package users\n2) need by some package users - i.e. if you wanted to develop a new geom\n3) needed only by hard core developers\n\n1 = #'\n2 = #'  + @keywords internal\n3 = #\n  It would be good to move functions from `stat-smooth-methods.r` into a separate modelvis package.\n\nSee https://groups.google.com/forum/?fromgroups#!topic/ggplot2-dev/txxfT5y7drY.\n\nAlso see https://gist.github.com/2520748 for some code to generate predictions from models.\n  This fixes #521.\n  This patch allows arguments to get passed properly to `kde2d`. For example, with the `lims` argument, it previously was getting confused because `lims` needs to be a vector, but each element of `lims` vector was getting turned into an element in the _list_.\n\nThis example now works -- density contours are drawn beyond the range of the data:\n\n``` R\n# Set up the data\nsigm1 <- diag(c(30,50))\nsigm2 <- diag(c(5,3))\nmu1 <- c(10,15)\nmu2 <- c(80,60)\nlibrary(mvtnorm)\nsample <- round(rbind(rmvnorm(100,mu1,sigm1),rmvnorm(100,mu2,sigm2)))\nsample <- sample[! (sample[,1] <1 | sample[,2] <1 | sample[,1]> 100 |\nsample[,2]>100),]\nd <- as.data.frame(sample)\nnames(d)<-c(\"x\",\"y\")\n\n# lims now gets passed to stat_density2d\nggplot(d, aes(x,y)) + stat_density2d(bins=4, lims=c(-20, 120, 0, 100)) + \n  geom_point() + xlim(-20,120)\n\n```\n\nNote that the limits need to be specified for ggplot, with `xlim`, and to `kde2d` (via `stat_density2d`), with `lims=c(xmin, xmax, ymin, ymax)`.\n\nIt would be nice to get the values for `lims` from the scales, instead of requiring the user to enter it twice.\n I updated it to automatically get `lims` from the scales.\n\n``` R\n    dens <- safe.call(kde2d, list(x = df$x, y = df$y, n = n,\n      lims = c(scale_dimension(scales$x), scale_dimension(scales$y)), ...))\n```\n\nNow this works:\n\n``` R\nggplot(d, aes(x,y)) + stat_density2d() + geom_point() +\n  xlim(-20,120) + ylim(-10, 80)\n```\n  I think this should use the same algorithm as discrete scales do when adding new values.\n  It looks like this was broken by the scales revamp: b7d7bfc2a255e20c6517b45225de773f8950acf3\n There are some examples with `scale_x_date` for 0.9.0 here: http://had.co.nz/ggplot2/docs/scale_date.html\n\nFor the scales package you can do:\n\n```\nlibrary(scales)\n?date_breaks\n?date_format\n```\n  Done\n  It looks like this is because the `to_time()` function in scales creates the POSIXct object but doesn't add the `tzone` attribute.\n\nHere's the function:\n\n``` R\nto_time <- function(x)   structure(x, class = c(\"POSIXt\", \"POSIXct\"))\n```\n\nHere's a demonstration (with code borrowed from the time_trans help page).\n\n``` R\nlibrary(scales)\nt <- time_trans()\n\n# Create times with EST\nhours <- seq(ISOdate(2000,3,20, tz = \"EST\"), by = \"hour\", length.out = 4)\nhours\n# [1] \"2000-03-20 12:00:00 EST\" \"2000-03-20 13:00:00 EST\"\n# [3] \"2000-03-20 14:00:00 EST\" \"2000-03-20 15:00:00 EST\"\n\nattributes(hours)\n# $class\n# [1] \"POSIXct\" \"POSIXt\" \n# \n# $tzone\n# [1] \"EST\"\n\n\n# Attempt to pass it through time_trans\n# Convert to numbers, and then back to times\nhours2 <- t$inv(t$trans(hours))\n\n# Gets converted to local time\nhours2\n# [1] \"2000-03-20 11:00:00 CST\" \"2000-03-20 12:00:00 CST\"\n# [3] \"2000-03-20 13:00:00 CST\" \"2000-03-20 14:00:00 CST\"\n\n# No tzone attribute\nattributes(hours2)\n# $class\n# [1] \"POSIXt\"  \"POSIXct\"\n```\n\nThe question here is how to to allow passing in a value for tzone.\n Giving that the times are correct (they always refer to the same instant in time), I think this is a display problem, which means that date format needs an additional `tz` argument. \n\nI'm not sure how to set it up to preserve the original time zone, though.  One option would be to modify `to_time` and `from_time` so that the first time `from_time` is used for a given transformer it captures the tz:\n\n``` R\ntime2_trans <- function() {\n\n  tz <- NULL\n  to_time <- function(x) {\n    force(x)\n    structure(x, class = c(\"POSIXt\", \"POSIXct\"), tzone = tz)\n  }\n\n  from_time <- function(x) {\n    if (is.null(tz)) {\n      tz <<- attr(as.POSIXlt(x), \"tzone\")[[1]]      \n    }\n    structure(as.numeric(x), names = names(x))\n  }\n\n  trans_new(\"time2\", \"from_time\", \"to_time\")\n}\n\nt2 <- time2_trans()\nhours <- seq(ISOdate(2000,3,20, tz = \"EST\"), by = \"hour\", length.out = 4)\nhours\n\nhours2 <- t2$inv(t2$trans(hours))\nhours2\n```\n  This fixes #529.\n\nWith this change, it passes all tests, and visual tests are unchanged.\n Actually, this change seems to have no effect on whether col `col` works. The behavior of all these examples is the same before and after this patch:\n\n``` R\n# \"colour\" works\nggplot(mtcars, aes(x=wt, y=mpg, colour=cyl)) + geom_point()\nggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(colour=\"red\")\n\n# \"color\" works\nggplot(mtcars, aes(x=wt, y=mpg, color=cyl)) + geom_point()\nggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(color=\"red\")\n\n# \"col\" works\nggplot(mtcars, aes(x=wt, y=mpg, col=cyl)) + geom_point()\nggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(col=\"red\")\n\n# \"colo\" doesn't work\nggplot(mtcars, aes(x=wt, y=mpg, colo=cyl)) + geom_point()\nggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(colo=\"red\")\n\n\n# \"fill\" works\nggplot(mtcars, aes(x=wt, y=mpg, fill=cyl)) + geom_point(shape=21)\nggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(shape=21, fill=\"red\")\n\n# \"fil\" doesn't work\nggplot(mtcars, aes(x=wt, y=mpg, fil=cyl)) + geom_point(shape=21)\nggplot(mtcars, aes(x=wt, y=mpg)) + geom_point(shape=21, fil=\"red\")\n```\n\nMaybe `col` is explicitly specified as an alias to `colour` somewhere?\n\nI'm not really sure what the partial matching with `charmatch` is doing here... As far as I can tell, the only difference in behavior is that, before the change, `rename_aes()` would eat up arguments that were a partial match but not listed in `.all_aesthetics`, so that they wouldn't get passed on to other stages in the plot building -- but it wouldn't assign values with partial matches. For example `colo=\"red\"` doesn't set `colour` to `\"red\"`, and it also doesn't allow the value of `colo` to be passed on to the `$draw` function. The fix here allows `colo` to be passed along.\n Merged in 1a818ef.\n  I think this is happening because `mid` is a partial argument match for `middle`, which is listed in `.all_aesthetics`. If I rename it to `mid1`, it works fine. It looks like the partial matching is happening in `rename_aes()`. It's matching to `middle` since `mid` isn't in the `.all_aesthetic` list.\n\nIs partial argument matching really desirable?\n\nUpdate: I think the partial matching somehow doesn't really set `middle` to the value of `mid`. All that happens is that the value for `mid` gets thrown away somewhere (`middle` is not set at all).\n  Fixes #526\n  The plan is to move from proto to S3 methods, but it's not yet determined exactly how things will work. The change will probably happen over the summer. Hopefully it will be easier to develop with ggplot2 once the change is made.\n  With a git bisect, I found that 47d6210fcf490e60db92200ce7a4d3c566492ed9 is the guilty commit.\n I think the solution is to revert the change in 47d6210, setting the return value to 1. This would also match with the documentation for the function.\n\nThen to avoid issue #388 (which 47d6210 fixed), users could set the `expand` value for `scale_x_discrete`, like this:\n\n``` R\nggplot(aes(x=survey_id, y=count), data=mydata) + geom_bar(stat=\"identity\")  +scale_x_discrete(expand=c(1,0))\n```\n  **Update**: I had some of the version numbers wrong before. I've edited it to correct the versions\n\nThis looks like a change in dodging behavior from 0.9.0 to the current master, c75fb70774bb4f249622cb941477fdec78ddaf54.\n- In 0.8.9 and 0.9.0, if you mapped a variable to fill, then _set_ the variable to a value, and then told it to use `position=\"dodge\"`, then the geoms would be dodged.\n- In master, if you do the same thing, then the geoms are not dodged.\n\n``` R\ndat <- data.frame(x=LETTERS[1:3], \n                  y=c(10,5,8,7,9,4),\n                  g=c(\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"))\ndat\n# x  y g\n# A 10 a\n# B  5 a\n# C  8 a\n# A  7 b\n# B  9 b\n# C  4 b \n\n# Dodged bars\nggplot(dat, aes(x=x, y=y, fill=g)) +\n    geom_bar(position=\"dodge\", stat=\"identity\")\n\n# Set fill to white:\n#  In 0.9.0, bars are dodged\n#  In master, bars are not dodged\nggplot(dat, aes(x=x, y=y, fill=g)) +\n    geom_bar(position=\"dodge\", fill=\"white\", colour=\"black\", stat=\"identity\")\n```\n\nOne workaround is to map the variable to `group`:\n\n``` R\nggplot(dat, aes(x=x, y=y, fill=g)) +\n    geom_bar(position=\"dodge\", aes(group=g), fill=\"white\", colour=\"black\", stat=\"identity\")\n```\n With a git bisect, I found that 67939c1e45d2209a65956ebe4d1594571058c70e was the guilty commit.\n Here's a unit test:\n\n``` R\ncontext(\"Dodging\")\n\ntest_that(\"Geoms will be dodged when mapping and then setting an aesthetic\", {\n  dat <- data.frame(x=LETTERS[1:3], \n                    y=c(10,5,8,7,9,4),\n                    g=c(\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"))\n\n  data <- pdata(ggplot(dat, aes(x=x, y=y, fill=g)) +\n      geom_bar(position=\"dodge\", fill=\"white\", colour=\"black\", stat=\"identity\"))[[1]]\n\n  # Check that every bar is 0.45 wide, with some tolerance for rounding error\n  expect_true(all(data$xmax - data$xmin - 0.45 < 1e-6))\n})\n\n```\n @BrianDiggs Actually, the bars aren't stacked or dodged -- they have `position=\"identity\"`, so they're just overlaid on top of each other. It just looks like a stacked bar graph.\n\nPoint taken that the new behavior may be more \"correct\" than the old behavior...\n Right, sorry, I mixed up `stat=\"identity\"` and `position=\"identity\"` in my head.\n Sounds good - I'll correct the example on the wiki page.\n  For `scale_x_continuous` and `scale_y_continuous`, the default behavior is to drop values that go outside of the limits. The default behavior should be changed so that these values are not dropped. One way to do this is by setting `oob=rescale_none`.\n\nThese example illustrates by shrinking the x range of the scale, and then zooming out with `coord_cartesian`:\n\n``` R\n# Drops data outside limits\nqplot(1:10, 1:10) + scale_x_continuous(limits=c(4,7)) +\n  coord_cartesian(xlim=c(0,11))\n# Warning message:\n# Removed 6 rows containing missing values (geom_point). \n\n\n# Data is not dropped when oob=rescale_none\nqplot(1:10, 1:10) + scale_x_continuous(limits=c(4,7), oob=rescale_none) +\n  coord_cartesian(xlim=c(0,11))\n```\n  It's not a priority at this point, because it's not commonly used.  Sorry!\n  has been fixed in #305\n try `install_github(\"ggplot2\", \"hadley\", \"fix/axis\")` and this version of ggplot2 requires the updated `scales` so also try `install_github(\"scales\", \"hadley\")` before loading the newer version of ggplot2.\n  You have to use `scale_shape_identity` -- that tells it to use the numeric codes directly for point shapes:\n\n``` R\nggplot(data=data.frame(x=c(1:16))) + geom_point(aes(x=x,y=x,shape=x)) +\n  scale_shape_identity()\n\n```\n  I've done this many times also. I'd think that, say, 20x20 inches is a reasonable limit -- if it's larger than that, `ggsave` could print a message. Also, it would be good to have an option to suppress the messages.\n  http://www.cloudstat.org/index.php?do=/kaichew/blog/radar-chart-with-r/\n\nThis may be implemented by slight modification of coord_polar.\n Basically coord polar without munching, I guess.\n Will you merge this if I implement?\n Yes, but for 0.9.2.\n OK, thanks.\n Here's a basic implementation\n\n``` R\n\nlibrary(ggplot2)\n\ncoord_radar <- function(...) {\n  structure(coord_polar(...), class = c(\"radar\", \"polar\", \"coord\"))\n}\nis.linear.radar <- function(coord) TRUE\n\nscaled <- as.data.frame(lapply(mtcars, ggplot2:::rescale01))\nscaled$model <- rownames(mtcars)\n\nmtcarsm <- reshape2::melt(scaled)\nqplot(variable, value, data = mtcarsm, geom = \"line\", group = model) + \ncoord_radar()\n```\n\nI'm not sure if it even deserves it's own class, unless there was more that you were thinking of.  It would also be fairly easy to create a `make_linear` operator on coords, so that `coord_radar() = make_linear(coord_polar())`.  Not sure if there are other use cases for this. \n  Fixes #430.\n  This commit fixes #513\n  The second problem is because `NA` is a logical, which ggplot2 treats as a discrete vector - use `NA_real` instead:\n\n`b <- data.frame(x = 1:10, y = 10:1, col = NA_real_)`\n  Fixed in 4bb6aa3e718fbae620ab46f15bf244a73a8af95b.\n   Could you please rebase against master and include a note in NEWS?\n I also suggest changing line 30, so that it's not drawing a lot of lines (or points) with the same start and end point:\n\n```\n   else                xvals <- unique(x)\n```\n\nNice use of rpubs!\n Also, for the documentation:\n\n``` R\n#' @param n if not NULL, the number of points to interpolate with. If NULL, do not interpolate.\n```\n\nI actually made similar changes earlier but forgot to push them...\n Rebased onto master, cleaned up, and merged in 1abe5676082d5dbbd813100e88766c7e895f5ac4.\n  This was a deliberate choice - whenever a geom has both colour and fill, alpha only affects the fill.  I don't recall my exact reasoning (probably that you don't normally modify the alpha of a line border line), but I don't think it's worth changing now.\n This was a deliberate choice - whenever a geom has both colour and fill, alpha only affects the fill.  I don't recall my exact reasoning (probably that you don't normally modify the alpha of a line border line), but I don't think it's worth changing now.\n  I don't think this is a bug - the `map_id` names the matching variable in the data data frame, not the map data frame.  As documented, that must always be called `id` or `region`\n   Rebased, cleaned up, and merged in b453114c0a5de350a54977b3192445d182622f35.\n  Fix #31 and fix #332. This should be considered just a rough attempt to illustrate how it could be done. I modified `facet-null.r`, but `facet-wrap.r` and `facet-grid.r` should probably also be modified.\n\nNote that there's a change in behavior -- plots with 0 rows of data are now allowed. For example:\n\n``` R\nempty <- data.frame(x=numeric(0), y=numeric(0))\n\nggplot(empty, aes(x=x,y=y)) + geom_point()\n```\n\nThis works, but there are no points, and no breaks. It's just a gray plotting area with \"x\" and \"y\" axis labels. \n This will also fix #176, when #482 is also merged.\n Cool - thanks. I guess another option would be to default to `data = waiver()` or possible `data = inherit()` (for a more obvious name in this context) and then NULLs could just be nulls.\n That makes sense. It may require some more extensive waiver checks in the code than what I added here, because there are some operations that work fine with a 0-row data frame, but don't work with NULL.\n\nDo you want to go with `waiver()` or `inherit()`?\n I think `inherit` - it can just be defined as `inherit <- waiver`, but documented to describe a little bit about the default behaviour.\n Should it also define `is.inherit <- is.waive`?\n No, it's more of a user-facing change than a developer-facing change.  (Although I might uniformly prefer inherit to waiver - I'm not sure)\n Should all the geoms and stats be updated to have a default of `data = inherit()`, or should they remain as `data = NULL`? The latter works right now because `fortify.null` simply returns `inherit()`.\n Probably all updated, but let's hang off on that until the layer rewrite.\n I changed to `inherit()`, rebased, and pushed. Please check if the help makes sense. You said that `inherit()` is meant to be only a user-facing change, but the user can't actually see it anywhere at this point, since it's only called from `fortify.null` -- so should we use `waiver()` instead?\n\nA couple more things left before it can be merged. I have to test for facet grid and wrap, and figure out why this fails:\n\n``` R\nqplot(1:5, 1:5)\n# Error in data.frame(evaled, PANEL = data$PANEL) : \n#  arguments imply differing number of rows: 5, 0\n\nggplot() + geom_point(aes(x=1:5, y=1:5))\n# Works fine\n```\n Everything works now. There's slightly complicated logic at the end of `compute_aesthetics()` in `layer.r`. It was necessary to support weird cases, like when `data` is not set, but aesthetics are given vectors, like `ggplot(mapping=aes(x=1:4, y=1:4)) + geom_point()`.\n\nI also don't think defining `inherit()` is necessary, since it's not used in any user-facing code. And, as discussed above, it's tested with `is.waive()`, which I think is a little odd.\n\nThis is the test battery I've been using. (It passes all the regular tests, and visual tests are unchanged.) All of the tests with the one-row data frame are here for comparison, but they could be removed. I'd prefer to turn these into regular (non-visual) tests, but it's not clear to me what parts can be tested this way. Any advice?\n\n``` R\n# Zero rows of data\ndf0 <- data.frame(x=numeric(0), y=numeric(0), am=numeric(0), cyl=numeric(0))\n# One row of data\ndf1 <- data.frame(x=1, y=1, am=1, cyl=4)\n\n\n# No visible points\nggplot(df0, aes(x=x,y=y)) + geom_point()\nggplot() + geom_point(data=df0, aes(x=x,y=y))\n\n# One point at 1, 1\nggplot() + geom_point(data=df1, aes(x=x,y=y))\n\n\n# Regular mtcars data, x=mpg, y=wt, plus df0 data frame\nggplot(mtcars, aes(x=mpg, y=wt)) + geom_point() + geom_point(data=df0, aes(x=x, y=y))\n\n# Regular mtcars data, no visible points\nggplot(mtcars, aes(x=mpg, y=wt)) + geom_point(data=df0, aes(x=x,y=y))\n\n# mtcars data with df1 data, one red point at 1, 1\nggplot(mtcars, aes(x=mpg, y=wt)) + geom_point() + geom_point(data=df1, aes(x=x,y=y), colour=\"red\")\n\n\n# == facets ==\n\n# mtcars data plus df0 data frame, facet_wrap\nggplot(mtcars, aes(x=mpg, y=wt)) + geom_point() + geom_point(data=df0, aes(x=x,y=y)) + facet_wrap(~ cyl)\n# mtcars data plus df0 data frame, facet_grid\nggplot(mtcars, aes(x=mpg, y=wt)) + geom_point() + geom_point(data=df0, aes(x=x,y=y)) + facet_grid(am ~ cyl)\n\n# mtcars data plus one red point at 1, 1, cyl=4,facet_wrap\nggplot(mtcars, aes(x=mpg, y=wt)) + geom_point() + geom_point(data=df1, aes(x=x,y=y), colour=\"red\") +\n  facet_wrap(~ cyl)\n# mtcars data plus one red point at 1, 1, am=1, cyl=4, facet_grid\nggplot(mtcars, aes(x=mpg, y=wt)) + geom_point() + geom_point(data=df1, aes(x=x,y=y), colour=\"red\") + \n  facet_grid(am ~ cyl)\n\n# Empty data, facet_wrap, throws error\nggplot(df0, aes(x=x, y=y)) + geom_point() + facet_wrap(~ cyl)\n# Empty data, facet_grid, throws error\nggplot(df0, aes(x=x, y=y)) + geom_point() + facet_grid(am ~ cyl)\n\n# One data point, facet_wrap\nggplot(df1, aes(x=x, y=y)) + geom_point() + facet_wrap(~ cyl)\n# One data point, facet_grid\nggplot(df1, aes(x=x, y=y)) + geom_point() + facet_grid(am ~ cyl)\n\n\n# Empty data with x and y mapped to vector of values\nqplot(1:5, 1:5)\nggplot(mapping=aes(x=1:5, y=1:5)) + geom_point()\nqplot(x, y, data=data.frame(x=1:5, y=1:5))\nggplot() + geom_point(aes(x=1:5, y=1:5))\n\n```\n Looks good - thanks! For the tests, I'd suggest looking at the output from `ggplot_build` \n I'm still a bit worried about the change to `compute_aesthetics`.  Could you add a test like:\n\n``` R\nqplot(mpg, wt, data = mtcars) + \n  facet_wrap(~cyl) + \n  geom_point(data = data.frame(), x = 20, y = 3, colour = \"red\", size = 5)\n```\n You're right - that added point is getting lost. I'll fix it.\n\nThe point shows up, though, when data is NULL:\n\n``` R\nqplot(mpg, wt, data = mtcars) +\n  facet_wrap(~cyl) +\n  geom_point(data = NULL, x = 20, y = 3, colour = \"red\", size = 5)\n```\n\nNow that I think about it, I believe this is the correct behavior. If you want to add a single point, you should use `annotate`; if you use a zero-row data frame, there's no data for which the aesthetics should be set.\n Here's a roadblock for having `data.frame()` and `NULL` result in the same behavior. The `fortify` methods aren't the same:\n\n``` R\nfortify.data.frame <- function(model, data, ...) model\nfortify.NULL <- function(model, data, ...) waiver()\n```\n\nAs things stand right now, if you pass `data=NULL` to a layer, that means that it should inherit the data. When we replace all the default `data=NULL` arguments with `data=waiver()` in the geoms and stats, then we should be able to address this problem better. That is, `waiver()` should behave one way, and `data.frame()` and `NULL` should behave another.\n I think I got confused before - `NULL` and `data.frame()` should behave differently.  (Eventually they'll be the same when we replace the default NULL behaviour with `waiver`).  `NULL` is translated to `waiver()` and so the layer inherits from the plot data frame.  `data.frame()` is for when you want a layer with no data associated with it - this can occur when you're subsetting, or if you wanted to have no scaling, just mapping.\n I've added more tests, some of which presently fail. It would be good to discuss if the tests are correct.\n Also fixes #506 and fixes #507.\n OK, it should be good to go. It passes all the new and old tests, and visual tests are unchanged.\n  I'm still not sure what's causing the bug, but if you just want black lines, do `geom_line(colour = \"black\")`\n Is this a bug? I think it might be expected behavior.\n\nIn this case, the color in `scale_color_manual` _shouldn't_ set the color of the line. This is because no variable is mapped to `color` -- therefore doing stuff to the color scale has no effect. `geom_smooth` and `geom_line` both behave the same way -- it's just that the default color of `geom_smooth` is blue and the default color of `geom_line` is black:\n\n``` R\nfoo <- data.frame(x = rnorm(30),  y = rnorm(30),  z = 1:3)\nfoo$z <-  factor(foo$z)\n# Setting color in scale has no effect\nggplot(foo,  aes(x = x,  y = y, linetype=z)) + geom_smooth() + \n  scale_colour_manual(values = c(\"red\"))\nggplot(foo,  aes(x = x,  y = y, linetype=z)) + geom_line() + \n  scale_colour_manual(values = c(\"red\"))\n\n# Setting it directly works\nggplot(foo,  aes(x = x,  y = y, linetype=z)) + geom_smooth(colour=\"red\")\nggplot(foo,  aes(x = x,  y = y, linetype=z)) + geom_line(colour=\"red\")\n```\n\nAs for the issue, regarding why the other lines don't show up when `colour` is mapped and the scale only has one value, I think this is happening because the other values are assumed to be NA if they're not specified.\n\n``` R\n# Only one line shows up, in black\nggplot(foo,  aes(x = x,  y = y, linetype=z, colour = z)) + geom_smooth() + \n  scale_colour_manual(values = c(\"black\"))\n\n# First and third lines show up\nggplot(foo,  aes(x = x,  y = y, linetype=z, color = z)) + geom_smooth() + \n  scale_color_manual(values = c(\"black\",NA,\"red\"))\n\n```\n\nI think it would probably be a good idea to print a message when not enough values are specified in a discrete scale.\n\nUpdate: I checked 0.8.9, and the behavior is the same.\n Agreed, this is expected behaviour.  I'm not sure if a warning would be the right thing to do:\n\nHow would that differ from the following bevahiour? \n\n``` R\nggplot(foo,  aes(x = x,  y = y, linetype=z, color = z)) + \n  geom_smooth() + \n  scale_colour_manual(values = \"black\", na.value = \"red\")\n```\n\nBut maybe that behaviour is undesirable?\n I have a hard time envisioning situations where using `na.value` this way would be desirable... when would you want to pass a vector with NAs to `values` and then tell it to substitute the NAs with something else?\n\nI guess the NA substitution makes sense for continuous color scales, but in those cases, the NAs are calculated from the scale -- they're not manually specified, as is the case here.\n Good point.  I'll make the fix.\n The manual scales issue is now #512.\n\nCurrently, there's no way to change the default aesthetics of geoms on mass.  This may be something that will be possible after the layer rewrite.  Could you please file that as a separate issue, outlining your use case?\n\nThanks!\n  `stat_smooth` doesn't pass non-formal arguments to model functions because of the way `safe.call()` is used. For example, with the `locfit()` model function, the `kern` argument is a non-formal argument (it's taken in `...` and passed along to another function) and so when `stat_smooth()` is called with `method=locfit, kern=\"rect\"`, the kern argument doesn't get passed to the `locfit()` function.\n\n``` r\nrequire(locfit)\n\n# sim data\nset.seed(123)\ndata <- data.frame(x=runif(1000), y=rbinom(1000,1,0.5))\n\n\n# With kern = \"rect\": lines do not match\nmodel <- locfit(y ~ lp(x, h=0.2), data=data, kern=\"rect\")\nxseq <- seq(0, 1, length = 100)\npred <- predict(model, newdata = data.frame(x = xseq))\ndata.locfit <- data.frame(x=xseq, y=pred)\n\nggplot(data,aes(x=x,y=y)) + \n  stat_smooth(method=\"locfit\",formula = y~lp(x,h=0.2), kern = \"rect\") + \n  geom_line(data=data.locfit,aes(x=x,y=y)) +\n  ylim(0,1)\n\n\n# Without kern = \"rect\": lines match\nmodel <- locfit(y ~ lp(x, h=0.2), data=data)\nxseq <- seq(0, 1, length = 100)\npred <- predict(model, newdata = data.frame(x = xseq))\ndata.locfit <- data.frame(x=xseq, y=pred)\n\nggplot(data,aes(x=x,y=y)) + \n  stat_smooth(method=\"locfit\",formula = y~lp(x,h=0.2)) + \n  geom_line(data=data.locfit,aes(x=x,y=y)) +\n  ylim(0,1)\n```\n Pushing to 0.9.3. after the stat/geom rewrite, we should have enough information to deal with this properly.\n The problem is that functions like `locfit` use `...` and expect those arguments to get passed along to another function. In the example above, I think `locfit() ends up calling`locfit.raw()`, and passes along the`...`.\n\nThis line in `StatSmooth$calculate` makes sure that only the formal args are passed along:\n\n``` R\nmodel <- safe.call(method.special, list(...), names(formals(method)))\n```\n\nI'm not sure that it's possible to fix this issue without making `safe.call` less safe, or adding complexity.\n\nOne possible way is to add an argument `args` to `stat_smooth`, in which you pass it a list that is used for arguments, similar to `do.call`:\n\n``` R\nstat_smooth(method=\"locfit\", args = list(formula = y~lp(x,h=0.2), kern = \"rect\"))\n```\n\nThis would make it clear which arguments go to the smooth function, and which go to `stat_smooth`. But this is inelegant and would break existing code.\n  ```\nggplot(dat,aes(Rep,Dem,colour=date))+geom_point()\n```\n\nshould be\n\n```\nggplot(dat,aes(Rep,Dem,colour=dates))+geom_point()\n```\n\nYou cannot use partial matching for aes.\n    Looks good - thanks!\n  This fixes the warnings for `coord_polar` introduced by #474.\n\nLet me know if it can be done more cleanly.\n  This is some slightly more informative help for `annotate()`. Suggestions on other improvements are welcome. Example code would be especially helpful.\n\nFix #487\n  Allow passing in a data frame that allows specifying facet.\n Called something like `filter` or `subset` or `facet`\n This is harder to do than I thought.  The problem is a specification like:\n\n`annotate(x = 1, y = 1, labels = c(\"a\", \"b\"), facets = data.frame(d = 1:2))`\n\nBecause the labels are not in the data frame the facets have no information about how to split them up.  I don't see any easy way to resolve this, except adding a new parameter to a layer that controls which aesthetics are scaled, and which are left as is.  This would make `annotate` substantially` simpler as it would only have to construct a single data frame, and then make sure that only position aesthetics are scaled.\n\nI'm not sure where else this would be useful - it's possibly useful in `qplot`, and possibly if you're using a facet specific raster as a background, and want to use fill for another variable.  It does seem like a useful generalisation though, and I can imagine there's potential use cases that I've missed.\n\nA possible specification could be (e.g.) `aes(colour = I(colour))`\n   Doh\n  This fixes #426. As discussed, it splits `geom_hline` into a geom and annotation.\n\nIf this looks like the right approach, I can do the same for vline and abline. If so, should I put `annotate_hline`, `annotate_vline`, `annotate_abline` all in one file since they're quite simple? Or they could be added to their respective `geom-Xline.r` files.\n\nAlso, some of the visual tests will have to be updated.\n It also looks like there's a lot of code in the `stat_Xline` functions that's intended to remove duplicate lines. Can I remove that stuff? It would simplify the code a lot.\n\nAlso, stat_abline gives default values for slope and intercept. Is that necessary?\n The code for the line stats is a bit simpler with the duplicate stuff removed. It might be a good idea to print a message when using a geom with fixed intercept values, though, because it's easy to do accidentally. I also removed the default values for `StatAbline`.\n\nHere's some code that tests what should be expected when the duplicate line prevention code is removed:\n\n``` R\np <- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point()\n\np + geom_abline(aes(intercept = mpg, slope = mpg/5), alpha = .2) # Lots of lines\np + geom_abline(intercept = 20, slope = 1, alpha = .2)      # Should be dark\np + geom_abline(aes(intercept = 20, slope = 1), alpha = .2) # Should be dark\np + annotate_abline(intercept = 20, slope = 1, alpha = .2)  # Should be light\n\n\np + geom_vline(aes(xintercept = wt), alpha=.2)   # Lines through each point\np + geom_vline(xintercept = 3, alpha=.2)         # Should be dark\np + geom_vline(aes(xintercept = 3), alpha=.2)    # Should be dark\np + annotate_vline(xintercept = 3, alpha=.2)     # Should be light\n\n\np + geom_hline(aes(yintercept = mpg), alpha=.2)   # Lines through each point\np + geom_hline(yintercept = 20, alpha=.2)         # Should be dark\np + geom_hline(aes(yintercept = 20), alpha=.2)    # Should be dark\np + annotate_hline(yintercept = 20, alpha=.2)     # Should be light\n\n```\n Looks good! I wonder now if the stat functions could be removed altogether and just moved into the geoms?  I'm trying to remember why I had separate stat functions - it's probably something to do with either correctly setting scale limits, or with non-Cartesian coordinates.  If you have tests for those and they work fine, I think we could go ahead and remove the stat functions.\n And we might not want to include this in 0.9.1 since it breaks backward compatability\n Regarding removing the stat: it apparently also can work if passed a function for `intercept`. I think if that capability were removed, it should be simple to move the remaining code into the geom.\n I now think that should be removed - it's not elegant, and it's not inline with the way that the rest of ggplot2 works.\n OK, I removed the stat and the examples I posted above still work. The code is much simpler now.\n\nWhat remains to (possibly) be done:\n- Merge help pages\n- Move `annotate_Xline` functions into `annotate()`\n Another thought: as long as we're breaking compatibility, all these geoms could probably be collapsed into a single one, like `geom_line`.\n\nIt could take `xintercept`, `yintercept`, and `slope`. The `xintercept` and `yintercept` would be incompatible,  but you could use `slope` with either x or y intercept.\n I deliberately made it three separate functions because I think it makes more sense to keep behaviours separate, especially when you start having combinations of arguments that don't make sense.\n @BrianDiggs I was thinking of having `slope` default to `NULL`, and infer whether it's horizontal or vertical by `yintercept` or `xintercept` is present.\n\nCome to think of it, you can always specify a line with two of the three: `xintercept`, `yintercept`, and `slope`. And if you just have `xintercept` or `yintercept`, you can assume that it's vertical or horizontal.\n\nHere's what combinations would be valid:\n\n| xintercept | yintercept | slope | valid? |\n| --- | --- | --- | --- |\n| yes | yes | yes | no |\n| yes | yes | no | yes |\n| yes | no | yes | yes |\n| yes | no | no | yes |\n| no | yes | yes | yes |\n| no | yes | no | yes |\n| no | no | yes | no |\n| no | no | no | no |\n Yes, this is the way that `abline` works in base R - and I don't like it.  If you need a table to figure out what the valid combination of arguments is, I think there's something wrong with your function!\n I've consolidated the docs into `geom-hline.r`, and clarified them a bit.\n\nThere's one inconsistency between `annotate` form of `abline` and the others. With `hline` and `vline`, you can pass a vector as the intercept values, but with `abline`, you can't:\n\n``` R\n# Works\np + annotate(\"hline\", yintercept = seq(10, 30, by = 5))\np + annotate(\"vline\", xintercept = 1:5)\n\n# Doesn't work\np + annotate(\"abline\", intercept = c(17, 22), slope = c(0.5, 1))\n```\n\nI think this is because `annotate()` captures `xintercept` and `yintercept` explicitly and puts them in a list that serves as the data passed to `geom_xxx`, but it doesn't capture `intercept` and `slope`, so they just get passed as `...` args, which are expected to be single values.\n\nIn general, I like the idea of being able to pass vectors as aesthetic properties using `annotate` -- then it could be used to draw any sort of geom based on vector values. This may require some retooling of how it works, though.\n Oh hmmm, good catch.  The problem in general is that putting other aesthetics in the data frame will cause them to be mapped - maybe we need some way to turn that off?  (But that seems like it would add a lot of complexity for little gain)\n Could we just `rep` all the passed-in vectors to be the same length as the longest vector, and then put them all into a data frame? That way, none of the aesthetics would have to hard-coded into `annotate()`. Are values for `...` used for anything else besides aesthetic properties?\n But how would you stop them from being mapped?  i.e. if you do `annotate(\"text\", label = \"My label\", colour = \"blue\")` you don't want the scale to map blue to something else.\n The bug with `geom_abline` and multiple slopes/intercepts is probably related to https://github.com/hadley/ggplot2/issues/31\n Regarding stopping vars from being mapped, I can't see a way to avoid it right now. What if there were an option to pass a \"raw\" (unmapped) data frame to `layer()`?\n I think that's something I explored a bit in the layers repo - lets not worry about it for now.\n  Should be able to adjust clipping so (e.g.) text prints outside the plot viewport.\n And when points are placed on the margins with inf, -inf\n Moving to 0.9.3 - this should be tackled as part of the stats/geom rewrite. \n  The easiest way to debug this sort of problem is to look at the layer:\n\n``` R\n> stat_density2d(aes(x, y, fill=..density..), h=.1, geom=\"raster\", contour=F)\nmapping: x = x, y = y, fill = ..density.. \ngeom_raster: hjust = 0.1 \nstat_density2d: na.rm = FALSE, contour = FALSE, n = 100 \nposition_identity: (width = NULL, height = NULL)\n```\n\nwhere you can see `h = 0.1` has been caught by the `hjust` parameter.  You can work around this by manually specifying geom and stat params:\n\n``` R\n> stat_density2d(aes(x, y, fill=..density..), geom=\"raster\", stat_params = list(h = 0.1, contour = F), geom_params = list())\nmapping: x = x, y = y, fill = ..density.. \ngeom_raster:  \nstat_density2d: h = 0.1, contour = FALSE \nposition_identity: (width = NULL, height = NULL)\n```\n\nUnfortunately you have to set `geom_params` to an empty list because of a bug.\n  Thanks!\n  In `GeomPoint$draw`, it uses `pointsGrob` with the following:\n\n``` R\ngp=gpar(col=alpha(colour, alpha), fill = alpha(fill, alpha), fontsize = size * .pt)\n```\n\nIt looks like this problem is happening because the `alpha()` function behaves slightly differently now.\n\nPreviously, the `alpha()` function was in ggplot2, and now it's in the scales package. It looks like this commit changed how it handles the fourth (alpha) byte of a color: hadley/scales@e04a9b2d1f90605a1f0e721f34c8fa160af16fa8\n\nIn the old (0.8.9) version, if the color is specified as RGB, then it uses the `alpha` argument to set the A value. But if the color is specifed as RGBA, then it ignores the `alpha` arg:\n\n``` R\n> alpha(\"#000000\", 0.5)\n[1] \"#00000080\"\n> alpha(\"#000000\", 1)\n[1] \"#000000FF\"\n\n> alpha(\"#000000aa\", 0.5)\n[1] \"#000000AA\"\n> alpha(\"#000000aa\", 1)\n[1] \"#000000AA\"\n```\n\nIn the current version, with `alpha()` from scales, it always ignores the fourth (A) byte and only uses the `alpha` argument:\n\n``` R\n> alpha(\"#000000\", 0.5)\n[1] \"#00000080\"\n> alpha(\"#000000\", 1)\n[1] \"#000000FF\"\n\n> alpha(\"#000000aa\", 0.5)\n[1] \"#00000080\"\n> alpha(\"#000000aa\", 1)\n[1] \"#000000FF\"\n```\n\nIf this is to be changed, the question is, how _should_ the `alpha()` function behave -- what should happen when the color is RGBA, and a value is given for `alpha`?\n This is probably related to #335.\n I think the idea of giving a warning is good, but one difficulty is detecting when this happens. If you _don't_ set the value of `alpha`, then somewhere along the line, ggplot sets `alpha=1`. By the time it gets to the part where `alpha()` is called, it can't distinguish between cases where `alpha` was not set vs. `alpha` was set to 1.\n I think the best way to fix this is to default alpha to NA, and then modify `alpha()` to not overwrite alpha when it's missing.\n  This fixes #422, in which NA's show up in the theta breaks when using `coord_polar`.\n\nI modified `coord_train.polar()` to do something similar to what `coord_train.cartesian()` does (by calling `train_cartesian()`). See line 87 of [coord-cartesian.r](https://github.com/hadley/ggplot2/blob/master/R/coord-cartesian-.r).\n\nNow `coord_train.polar()` removes `NA`'s that are returned from `scale_breaks()`.\n\nThis passes the tests, and visual test results are unchanged.\n I also fixed `coord_train.trans`, which also returned NA's, and I added tests.\n\nThe tests also helped me find a different bug in `coord_train.map`, which I fixed (f272d50c7edc005d85582ea68beab58363c834e7) and pushed to master.\n We probably should figure out why they are returning NAs in the first place :/  Can you file a bug on the scales repo?\n I think it's needed for matching labels to values, or something like that. In an earlier attempt to fix it, I changed some code to remove the NAs earlier in the pipeline (maybe in `scale_breaks()`?) and it failed some tests that expected the NAs to be there.\n I think it failed the the first test here when I modified `scale_breaks()` to not return NAs:\nhttps://github.com/hadley/ggplot2/blob/master/inst/tests/test-scales-breaks-labels.r\n Hmmm, that's vaguely coming back to me.  We may need to re-look at the entire dimensions/breaks/labels process in more depth (but maybe in the future)\n IIRC, at some time after 0.8.9, scale_breaks are changed to set NA for out-of-range value.\nThis is work well with non-positional scales, since there is no mapping between oob-value and aes.\nBut now I think positional scales should extend the breaks out-of-range if possible (e.g., linear scale).\n The changes have been rebased onto master.\n  This fixes #282.\n\nWhen using bars with `width` < 1, the spacing is uneven, as demonstrated in #282:\n\n``` R\ndat <- data.frame(x=LETTERS[1:3], y=4)\n\n# Bad\n# A and C boxes touch - angle AC is smaller than AB and BC\nggplot(dat, aes(x=x, y=y)) + geom_bar() + coord_polar()\n```\n\nA longhand manual solution is to use `expand=TRUE` and set the `expand` values in both the x and y scales. The `expand` values that are appropriate for a circular graph are different from those for a rectangular graph. However, this is really verbose:\n\n``` R\n# Good\n# This removes the space in the middle\nggplot(dat, aes(x=x, y=y)) + geom_bar() +\n  coord_polar(expand=T) +\n  scale_x_discrete(expand=c(0, .5)) +   # equal theta spacing\n  scale_y_continuous(expand=c(0, 0))    # don't leave a hole in the middle\n```\n\nAs far as I can tell, there's no reason to use `expand` values that are different from these ones, in a polar graph. You don't want your theta/x to be spaced unevenly, and you don't want a hole in the middle. If you really want to change these things, you can set `xlim` and `ylim`.\n\nThis pull request also overrides `expand` values for racetrack plots (where `theta=\"y\"`). In the existing code, if you use `expand=TRUE` with a racetrack plot, it doesn't form a full circle, but I overrode it close the circle. Again, if you want to override these values, you should be able to set `xlim` and `ylim`.\n\nSee the new visual tests for examples.\n\nThoughts?\n Random thought - maybe expand should default to `c(NA, NA)` and the coordinate system supplies default values\n I would say that using `NA` as a \"flag\" for something is not a good idea. \n Here's a link to the visual test results -- see the last four images: http://stdout.org/~winston/vtest/html/coord-polar.html\n I've made the changes discussed on the mailing list. Here are the highlights:\n- Changed default expand values for all scales to be `c(NA, NA)`\n- Changed `scale_dimension()` to use 0 if an expansion value is NA\n- Changed instances of `scale_dimension(x, expand=c(0,0))` in stats to remove `expand` argument since it's no longer needed.\n- Added `coord_expand_defaults` S3 function, which substitutes in default expand values\n  - The default method uses values of `c(0, 0.6)` if discrete, and `c(0.05, 0)` if continuous.\n  - The polar method has different values for theta and r. For theta: `c(0, 0.5)` if discrete, `c(0, 0)` if continuous. For r: `c(0, 0)` in all cases.\n\nIt passes all tests. The visual tests have some slight changes. See the changed images and coord-polar section here: http://stdout.org/~winston/vtest/diff/\n\nMost of the changes involve polar plots and were expected, but there are a couple changed images in the guide-axis section -- some of the facets seem wider, and some seem narrower. I'm not sure why that's happening.\n I'd guess that the calculations for discrete dimensions has changed slightly.\n\nWe also need to say something about how `expand` is used in `continuous_scale` and `discrete_scale`\n I think the calculations are in general the same, since nothing else changed... I suspect the change has something to do with the facets, as those are the only visual tests that have facets.\n\nI can add info about how expand is used.\n\nIs the approach I used to set the defaults a reasonable one? At the beginning of each version of `coord_train()`, it calls `coord_expand_defaults()` to set default expand values. Since it's called from within `coord_train()`, the \"top-level\" scales object doesn't get modified, only the copy referenced inside `coord_train()`.\n `facet_panels.grid` uses `scale_dimension(x)`.\n FacetGrid needs to know the expansion for the calculation of the width/height of each panel.\nThese are very complex part of facetting and I'm aware of these point on the way of modification with writing new position grid. Finally I have not found good solution.\nNow I don't have enough time though... In Japan, new semester begins April.\n\nBut anyway, I felt that the coords and facets can be simplified. Sorry I don't know how to do that...\n I modified `ggplot_build()` to set the default expand values by modifying the plot object's scales. See `plot-build.r` for how it works.\n\nIt's not the most elegant, but it's not clear to me how else to do it. I had to set the default expand values twice -- it had to be done the second time in case one of the scales was created by a stat. For example when you make a histogram, at first there will not be a `y` scale, until after you run `stat_bin`.\n\nThis recent change fixes the issue with faceting discussed above. It passes all tests, and the only changed visual tests are the polar plots that were buggy.\n Maybe scale_dimension should come in two forms, with one that defaults to zero expansion.\n I changed it to `waiver()` and rebased it on top of the current master.\n\nI think that splitting `scale_dimension()` into two is a good idea. As it stands, I had to add some `is.waive()` checks to the `scale_dimension` functions, for those cases where the function is called before the default expand values are set in the scale.\n\nIt presently fails some tests involving coord_trans, I think because `coord_train.trans` references `expand[1]`.\n\nOther than those issues, what remains to be done is:\n- Change the expand_defaults stuff into a panel function\n- Figure out at what stage of `ggplot_build` the expansion should happen.\n > - Change the expand_defaults stuff into a panel function\n> - Figure out at what stage of ggplot_build the expansion should happen.\n\nPlease see my commit.\nThe `expand_default` is in coord function. I think this is reasonable.\n Now I'm coming to think `scale` may not have `expand`.\nIn the updated code, coord has a responsibility for expansion.\nIf this is okey,I have no idea where the **expand of scale** is required.\n  Functions like `position_jitter` should be able accept a random seed so that the results are reproducible. This would also make it possible to jitter two separate layers in exactly the same way, which would be useful when, for example, plotting points with labels.\n\nMaybe it should also be possible to pass a random seed to `ggplot` so that all randomness within a plot is reproducible?\n Hmmm, I'm not really sure I see the point of this - you can already set a seed outside of ggplot2, and if you want to reuse jitter across multiple layers, just generate the randomness yourself.\n I spoke with someone today wanted this feature -- he pointed out that jittering it manually doesn't work when one of the axes is a factor. Here's an example he gave me where he wanted to align points and lines with jitter:\n\nhttp://rpubs.com/wch/1270\n\nI worked around it by converting x (which is a factor) to numeric, but that's not a good general solution.\n  This is a follow-up to the discussion in #449. Even though the bug there was fixed, there is still a problem of not enough \"segment resolution\" near the center.\n\nIn this example, there aren't enough segments near the center, so the smallest circles are drawn as triangles or even line segments.\n\n``` R\ndf <- data.frame(x = 0:1, y=rep(1:80, each=2))\n\nggplot(df, aes(x=x, y=y, group=factor(y))) + geom_line() + coord_polar()\n```\n\nProbably `coord_munch` should be modified to use shorter segments near the center, since there's often a higher information density there.\n Just a note. IIRC, now the `coord_munch` munches a path by equally spaced points.\ni.e., 0, 10 is divided into 0, 1, 2, ..., 10.\nThis is because `munch_data` only knows distance of two point.\n\nIn the case of `coord_polar`, obviously it cannot work.\nSo `munch_data` need to know the density or mapping in addition to the distance.\nAnd this is not an easy work...\n\nI come up with one way.\nFirst, divide the path as fine as possible.\nThen, drop some points if it looks unnecessary.\nThis can be done by comparing the finely-divided path and the droped path.\nIf they are similar enough, it is ok.\n\nBut definitely this is too poor way though...\n Another approach would be to recursively divide the line, and keep dividing while the transformed distance is greater than some threshold.  I feel like there's probably a really good algorithm to do this, but I don't know where to start looking.\n I think the problem is simpler. The distance calculation in `coord_distance.polar` looks off to me - it's completely different to `dist_polar`, and in @wch's example, the ratio of distances doesn't look right for the smallest and the largest rings - it's ~1/79, but the distance between the two end points should grow as a square, not linearly.\n\nI suspect `dist_polar` just needs a fix so that it always looks at clockwise distance (not shortest distance) and then it can replace the existing calculations in `coord_distance.polar`.\n http://math.ucsd.edu/~wgarner/math4c/derivations/distance/distancepolar.htm\n @hadley The formula from the website is straight-line distance between two points, when the points are given in polar coordinates.\n\nI think we need something a little different for determining how many pieces to break it up into when munching. What we need is the length of a line drawn from point A to point B, which follows something like an arc. For example, if there's a line drawn from (r=0.5, theta=5) to (r=0.75, theta=355), it is part of a spiral.\n\nI think this is the formula we need: http://mathworld.wolfram.com/ArchimedesSpiral.html\n I think we need the spiral arc length. For example, the straight-line distance from (r=0.5, theta=0) to (r=0.5, theta=360) is zero, but ggplot would draw a full circle in this case.\n But there's only one straight-line distance between two points, and it's always the shortest distance.\n\nAnyway, I have some code that should properly calculate lengths for spiral arcs:\n\n``` R\n\n# ============== Utility functions =================\n# Given n points, find the slope, xintercept, and yintercept of\n# the lines connecting them.\n#\n# This returns a data frame with length(x)-1 rows\n#\n# @param x A vector of x values\n# @param y A vector of y values\n# @examples\n# find_line_formula(c(4, 7), c(1, 5))\n# find_line_formula(c(4, 7, 9), c(1, 5, 3))\nfind_line_formula <- function(x, y) {\n  slope <- diff(y) / diff(x)\n  yintercept <- y[-1] - (slope * x[-1])\n  xintercept <- x[-1] - (y[-1] / slope)\n  data.frame(x1 = x[-length(x)], y1 = y[-length(y)],\n    x2 = x[-1], y2 = y[-1],\n    slope = slope, yintercept = yintercept, xintercept = xintercept)\n}\n\n# Spiral arc length\n#\n# Each segment consists of a spiral line of slope 'a' between angles\n# 'theta1' and 'theta2'. Because each segment has its own _normalized_\n# slope, the ending theta2 value may not be the same as the starting\n# theta1 value of the next point.\n#\n# @param a A vector of spiral \"slopes\". Each spiral is defined as r = a * theta.\n# @param theta1 A vector of starting theta values.\n# @param theta2 A vector of ending theta values.\n# @examples\n# spiral_arc_length(a = c(0.2, 0.5), c(0.5 * pi, pi), c(pi, 1.25 * pi))\nspiral_arc_length <- function(a, theta1, theta2) {\n  # Archimedes' spiral arc length formula from\n  # http://mathworld.wolfram.com/ArchimedesSpiral.html\n  0.5 * a * (\n    (theta1 * sqrt(1 + theta1 * theta1) + asinh(theta1)) -\n    (theta2 * sqrt(1 + theta2 * theta2) + asinh(theta2)))\n}\n\n```\n\nHere's a test, that should cover all the situations. If you cut and paste, you'll see the result:\n\n``` R\nlibrary(plyr)\nlibrary(ggplot2)\n\n# ==== Make some sample data ====\ndat <- data.frame(\n  theta = c(0, 2*pi,   2,   6, 6, 1,    1, 0),\n  r     = c(0,    0, 0.5, 0.5, 1, 1, 0.25, .125),\n  g     = 1:8)\n\n# ==== Take a look at the path in cartesian coords ====\nggplot(dat, aes(x=theta, y=r, colour = g)) + geom_path() + geom_point(alpha=0.5)\n# In polar coords\nggplot(dat, aes(x=theta, y=r, colour = g)) + geom_path() + geom_point(alpha=0.5) + coord_polar()\n\n\n# ==== Do the distance calculation ====\n\n# Get the formulas for each line (\nlf <- find_line_formula(dat$theta, dat$r)\nlf\n\n# Rename x and y columns to r and t, since we're working in polar\n# Note that 'slope' actually means the spiral slope, 'a' in the spiral\n#   formula r = a * theta\nlf <- rename(lf, c(x1 = \"t1\", x2 = \"t2\", y1 = \"r1\", y2 = \"r2\",\n  yintercept = \"r_int\",  xintercept = \"t_int\"))\n\n# Re-normalize the theta values so that intercept for each is 0\nlf <- transform(lf, tn1 = t1 - t_int, tn2 = t2 - t_int)\n\n\n# Add distance column\nlf$dist <- NA_real_\n\n# Get spiral arc length for segments that have non-zero, non-infinite slope\n# (spiral_arc_length only works for these)\nangled_idx <- lf$slope != 0 & !is.infinite(lf$slope)\nlf$dist[angled_idx] <-\n  spiral_arc_length(lf$slope[angled_idx], lf$tn1[angled_idx], lf$tn2[angled_idx])\n\n# Get cicular arc length for segments that have zero slope (r1 == r2)\nzero_idx <- lf$slope == 0\nlf$dist[zero_idx] <- lf$r1[zero_idx] * (lf$t2[zero_idx] - lf$t1[zero_idx])\n\n# Get radial length for segments that have infinite slope (t1 == t2)\ninf_idx <- is.infinite(lf$slope)\nlf$dist[inf_idx] <- lf$r1[inf_idx] - lf$r2[inf_idx]\n\n# Final distance values\nlf$dist <- abs(lf$dist)\nlf\n```\n\nWhen I eyeball the polar graph and compare the length of each segment to the value of the `dist` column, the numbers look correct.\n For reference, here are the results using the current method (for ggplot2 0.9.1). The numbers don't look right.\n\n```\ndat <- data.frame(\n  theta = c(0, 2*pi,   2,   6, 6, 1,    1,     0),\n  r     = c(0,    0, 0.5, 0.5, 1, 1, 0.25, 0.125),\n  g     = 1:8)\n\n# Visualize in polar coords\nggplot(dat, aes(x=theta, y=r, colour = g)) + geom_path() + geom_point(alpha=0.5) + coord_polar()\n\n\npx <- dat$r * cos(dat$theta)\npy <- dat$r * sin(dat$theta)\npz <- dat$theta * dat$r\n\ndist <- sqrt(diff(px) ^ 2 + diff(py) ^ 2 + diff(pz) ^ 2)\nd <- data.frame(\n  t1 = dat$theta[-nrow(dat)],\n  t2 = dat$theta[-1],\n  r1 = dat$r[-nrow(dat)],\n  r2 = dat$r[-1],\n  px1 = px[-nrow(dat)],\n  px2 = px[-1],\n  py1 = py[-nrow(dat)],\n  py2 = py[-1],\n  pz1 = pz[-nrow(dat)],\n  pz2 = pz[-1],\n  dist = dist)\n\nd\n```\n Victory!\n Maybe the reason it's clearer to me is because in the past I had experimented with `geom_abline` so that it would wrap around when `coord_polar` was used.\n\nIt turns out that every abline that is \"angled\" (i.e., not circle arcs with constant `r` or rays with constant `theta`) is a section of a spiral. If you make the lines \"wrap around\", they always spiral into the center.\n\nWhen you draw a `geom_abline` in cartesian coordinates, the x intercept is when `y==0`. If you use `coord_polar`, the \"theta intercept\" is when `r==0`. This is the starting angle of the spiral.\n  The commit has been rebased onto master.\n  I can find many times the usage below:\n\n```\nd <- list(1:3, 4:6)\n\np <- list()\nfor (i in 1:2) {\n  p[[i]] <- ggplot(NULL, aes(x = d[[i]], y = -d[[i]])) + geom_point()\n}\n\nprint(p[[1]])\n```\n\nOf course, due to the evaluation, the plot with `i=2` is drawn.\n\nSo it may be nice if we have a kind of syntax like `bquote`, say:\n\n```\naes(x = .(d[[i]]), y = .(d[[i]]))\n```\n\nwherein the inside of the `.()` is evaluated.\n\nPerhaps the new `aes` looks like this:\n\n```\naes <- function (x, y, ...) \n{\n    aes <- as.list(match.call()[-1])\n    aes <- lapply(aes, function(e) {\n        if (is.call(e) && e[[1L]] == as.name(\".\")) eval(e[[2L]], parent.frame())\n        else e\n    })\n    aes <- structure(aes, class = \"uneval\")\n\n    ggplot2:::rename_aes(aes)\n}\n```\n\nthen,\n\n```\np <- list()\nfor (i in 1:2) {\n  p[[i]] <- ggplot(NULL, aes(x = .(d[[i]]), y = .(-d[[i]]))) + geom_point()\n}\nprint(p[[1]])\n```\n\ndraws a plot with `i=1`.\n What happens if you use `list` instead of `aes`?\n > What happens if you use list instead of aes?\n\nError as followings:\n\n```\n> p <- list()\n> for (i in 1:2) {\n+   p[[i]] <- ggplot(NULL, list(x = d[[i]], y = -d[[i]])) + geom_point()\n+ }\nError in ggplot.data.frame(fortify(data, ...), mapping) : \n  Mapping should be created with aes or aes_string\n```\n\nDo you mean like this?\n  `axis.line` accepts `theme_segment`\n  This excludes `label` as a grouping variable and adds tests. (fixes #465)\n This change was rebased onto master.\n  I think I found the source of the problem: the `label` column of the data is being treated as a grouping variable, when it shouldn't be.\n\nHere's the relevant code from `utilities-layer.r` in 0.8.9. It explicitly ignores `label`:\n\n``` R\n  if (is.null(data$group)) {\n    cat <- sapply(data[setdiff(names(data), \"label\")], is.discrete)\n    cat <- intersect(names(which(cat)), .all_aesthetics)\n\n    if (length(cat) == 0) {\n      data$group <- 1\n    } else {\n      data$group <- as.numeric(interaction(data[cat]))\n    }\n  }\n```\n\nHere's the code in 0.9.0. It does _not_ ignore `label`:\n\n``` R\n  if (is.null(data$group)) {\n    disc <- vapply(data, is.discrete, logical(1))\n\n    if (any(disc)) {\n      data$group <- id(data[disc], drop = TRUE)      \n    } else {\n      data$group <- 1L\n    }\n  }\n```\n\n@hadley This change was made in 8267bf658c6375f5c77e1e2dabcfcaabb484a079. In that commit you edited the documentation and removed the part where it said, \"... excluding label\". Was there a reason for doing this? If not, then I think the solution is to add back the code to exclude label.\n Hmmm I don't know why I did that - maybe because it made the code look cleaner?  I should have added a test :/\n  Without seeing the code for `sectorplot` or the structure of `structurelist`, it's not really possible to diagnose this problem. Does `sectorplot` return a `ggplot` object?\n Probably the problem is due to the lazy evaluation of R.\nAs @wch sais, it is impossible to answer without inspecting the `sectorplot`.\n Could you please provide a reproducible example (e.g., we cannot know how `x` is)?\n Still hard to say what the problem is, but it may have something to do with the `print` at the end of the `sectorplot` function, and then it being printed again in the for loop. It should probably be printed only once. The function is printing _and_ returning the `ggplot` object. It's effectively doing something like this:\n\n``` R\nfoo <- function() {\n  print(qplot(mpg, wt, data=mtcars))\n}\n\nz <- foo()\nprint(z)\n\n```\n\nThis prints the picture twice.\n Closing - will re-open if reproducible example provided.\n  I noticed when developing the vtest package that the breaks for date scales sometimes change. They move around, and sometimes the ones on the end appear/disappear. See the test results I posted here (look at the changed pictures): http://stdout.org/~winston/ggplot2-vtest-date/diff/\n\nI'm not sure what causes it. It's possible that it happens after I repeatedly run `load_all`, but I haven't had a chance to test it carefully. @hadley mentioned that it may be related to the time of day that ggplot is run.\n These tests are all in the `visual_test` directory (this is where I moved all the visual tests to): https://github.com/hadley/ggplot2/tree/master/visual_test\n\nYou're right that the tests use `Sys.Date()`, so I guess that's an easy fix.\n Fixed in aac84d9b6a6017e5979a18ef405b1b05cd68009c.\n  @wch If we implement this, we probably need automated tests.  The gtable infrastructure should take care of most of the naming.\n I think this is a good time to think about setting the names, now that the external gtable change is merged. Here's an example of the current names. Any thoughts on what should be changed?\n\n``` R\np <- ggplot(mtcars, aes(x=wt, y=mpg, colour=cyl, size=disp)) +\n     geom_point() +\n     facet_wrap(~cyl)\n\ng <- ggplotGrob(p)\ngrid.ls(g)\n# GRID.gTree.10257\n#   panel-1-4-4-4-4\n#     grill.gTree.10119\n#       panel.background.rect.10110\n#       panel.grid.minor.y.polyline.10112\n#       panel.grid.minor.x.polyline.10114\n#       panel.grid.major.y.polyline.10116\n#       panel.grid.major.x.polyline.10118\n#     geom_point.points.10102\n#     panel.border.zeroGrob.10107\n#   panel-2-4-7-4-7\n#     grill.gTree.10134\n#       panel.background.rect.10125\n#       panel.grid.minor.y.polyline.10127\n#       panel.grid.minor.x.polyline.10129\n#       panel.grid.major.y.polyline.10131\n#       panel.grid.major.x.polyline.10133\n#     geom_point.points.10104\n#     panel.border.zeroGrob.10122\n#   panel-3-4-10-4-10\n#     grill.gTree.10149\n#       panel.background.rect.10140\n#       panel.grid.minor.y.polyline.10142\n#       panel.grid.minor.x.polyline.10144\n#       panel.grid.major.y.polyline.10146\n#       panel.grid.major.x.polyline.10148\n#     geom_point.points.10106\n#     panel.border.zeroGrob.10137\n#   strip_t-1-3-4-3-4\n#     strip.background.rect.10202\n#     strip.text.x.text.10199\n#   strip_t-2-3-7-3-7\n#     strip.background.rect.10208\n#     strip.text.x.text.10205\n#   strip_t-3-3-10-3-10\n#     strip.background.rect.10214\n#     strip.text.x.text.10211\n#   axis_l-1-4-3-4-3\n#     axis.line.y.zeroGrob.10187\n#     axis.frame.10191\n#       GRID.cellGrob.10192\n#         axis.text.y.text.10186\n#       GRID.cellGrob.10193\n#         axis.ticks.y.polyline.10189\n#   axis_l-2-4-6-4-6\n#   axis_l-3-4-9-4-9\n#   axis_b-1-5-4-5-4\n#     axis.line.x.zeroGrob.10154\n#     axis.frame.10158\n#       GRID.cellGrob.10159\n#         axis.text.x.text.10153\n#       GRID.cellGrob.10160\n#         axis.ticks.x.polyline.10156\n#   axis_b-2-5-7-5-7\n#     axis.line.x.zeroGrob.10165\n#     axis.frame.10169\n#       GRID.cellGrob.10170\n#         axis.text.x.text.10164\n#       GRID.cellGrob.10171\n#         axis.ticks.x.polyline.10167\n#   axis_b-3-5-10-5-10\n#     axis.line.x.zeroGrob.10176\n#     axis.frame.10180\n#       GRID.cellGrob.10181\n#         axis.text.x.text.10175\n#       GRID.cellGrob.10182\n#         axis.ticks.x.polyline.10178\n#   xlab-7-10-7-4\n#   ylab-4-2-4-2\n#   guide-box-4-12-4-12\n#     guides-2-2-2-2\n#       background-1-6-5-1\n#       bar-4-2-4-2\n#       label-4-4-4-4\n#       title-2-5-2-2\n#       ticks-4-2-4-2\n#     guides-4-2-4-2\n#       background-1-6-8-1\n#       title-2-5-2-2\n#       key-3-1-bg-4-2-4-2\n#       key-3-1-1-4-2-4-2\n#       key-4-1-bg-5-2-5-2\n#       key-4-1-1-5-2-5-2\n#       key-5-1-bg-6-2-6-2\n#       key-5-1-1-6-2-6-2\n#       key-6-1-bg-7-2-7-2\n#       key-6-1-1-7-2-7-2\n#       label-3-3-4-4-4-4\n#       label-4-3-5-4-5-4\n#       label-5-3-6-4-6-4\n#       label-6-3-7-4-7-4\n#   title-2-10-2-4\n```\n That looks pretty good to me - the main thing to worry about are the names starting with `GRID` and I think they all come from code in `guides-axis` that should be converted to use `gtable`.  \n\nAnd maybe all uses of `_` should be converted to `-` for consistency?\n\nAnd maybe the top level element should be called `ggplot`?\n I'm not sure it's possible to make it completely reproducible - what happens if you then want to combine two ggplots on one graphics device?  The ids need to be unique.   (Also that link didn't work)\n I'm pretty sure the whole reason why the arbitrary integers are on the names is so that grobs have globally unique names.  I'm not sure I see much point in fixing it - it's fairly easy to ignore anything after the last `.`\n Yeah, maybe I'm misremembering - if you could check with Paul that would be great.  It should be a simple fix to remove the trailing digits.\n I believe this is the same problem: hadley/gtable#24.\n  Hmmmm.  I think my reasoning is that it's better to force the user to be explicitly - this makes code less likely to have problems if I change argument names in the future.\n Oh, I finally remembered why I did this - the problem is that most people supply the first argument (the title) without a name.  If we made `...` the last argument, all of this code would break.\n  This fixes and cleans up the code for dodging by groups.  It fixes #436 and a dodging bug mentioned in this thread:\nhttp://groups.google.com/group/ggplot2/browse_thread/thread/e6086175832049c1\n This patch passes the regular tests and results in no changes on the visual tests.\n  I moved the visual tests from `/inst/tests/visual-xxx.r` to `/visual_test/xxx.r`, so that they can be used with the new visual test system. \n\nI also added descriptions for all the tests -- but I'm not 100% sure that the descriptions are accurate. With vtest, it is important that these descriptions not change in the future, so please look them over and let me know if any of them should be changed.\n An example of the test results can be seen here: http://stdout.org/~winston/ggplot2-vtest/html/\n\nAnd an example of _diff_ results can be seen here: http://stdout.org/~winston/ggplot2-vtest/diff/\n\nFor the diffs, a number of changes can be seen. I did the following between the test runs:\n- added some tests\n- changed some descriptions -- the description is used as the test identifier, so it thought some tests were added and others were deleted\n- changed the code that handled warnings, which resulted in some changed output images\n  This fixes the bug: the appearance of all the tests is the same.\n\nHowever, there's still a triangle and a line segment in the center. Perhaps there needs to just be more resolution at the center, as mentioned in #449. Maybe that should be considered a separate issue.\n These commits have been rebased onto master and squashed.\n  This is based on https://groups.google.com/forum/?fromgroups#!topic/ggplot2/b8pIbU4PILw\n\nI think this has something to do with `coord_distance.polar()`, called from `coord_munch()`. I think there are two problems:\n- There's just not enough \"segment resolution\" near the center. There tends to be a higher information density near the center than at the edge, resulting in tighter turns that require more segments.\n- It's probably calculating distances on the `y` values _before_ they're remapped to their ending radial position. For example, a with a y range of (-10,10), a y value of 0 would be halfway from the center to the edge, but this is calculating the number of segments based on the \"raw\" y value. This is demonstrated by the second and third examples.\n\nHere are some examples.\n\n``` R\ndf <- data.frame(x = 0:1, y=rep(1:80, each=2))\n\n# Inside circles are jagged\nggplot(df, aes(x=x, y=y, group=factor(y))) +\n geom_line() +\n coord_polar()\n\n# Outside gets jagged\nggplot(df, aes(x=x, y=y-80, group=factor(y))) +\n geom_line() +\n coord_polar()\n\n# Middle range gets jagged\nggplot(df, aes(x=x, y=y-40, group=factor(y))) +\n geom_line() +\n coord_polar()\n\n# Everything looks smooth\nggplot(df, aes(x=x, y=y+100, group=factor(y))) +\n geom_line() +\n coord_polar()\n\n# Multiplication has no effect\nggplot(df, aes(x=x, y=y*100, group=factor(y))) +\n geom_line() +\n coord_polar()\n\n```\n  @BrianDiggs Could you add an entry in NEWS?\n For future reference, rebasing public branches actually isn't as bad as commonly believed. I think it'll only cause problems if someone else fetches your branch and starts working off of it. I frequently rebase my pull requests... there was a small discussion about it in #374.\n The commits have been rebased onto master.\n  This fixes #421.\n\nIn the changes to coord_range, if there's a better way to set the names of the list items to \"x\" and \"y\", that would be good. As it is, the order of x and y can change, depending on which one is mapped to theta.\n OK, I did as you suggested and rebased.\n  Some stats seem to reset `width`. \n\n``` R\ndat <- data.frame(x=LETTERS[1:4], y=3:6)\n\n# OK (narrower bars): bin (default)\nggplot(dat, aes(x,y)) + geom_bar(width=.5)\n\n\n# Not OK (wide bars): identity\nggplot(dat, aes(x,y)) + geom_bar(stat=\"identity\", width=.5)\n\n# Not OK: another way of doing identity\nggplot(dat, aes(x,y)) + stat_identity(geom=\"bar\", width=.5)\n\n# Not OK: summary\nggplot(dat, aes(x,y)) + stat_summary(geom=\"bar\", fun.y=\"mean\", width=.5)\n\n# OK: bin (explicitly specified)\nggplot(dat, aes(x,y)) + stat_bin(geom=\"bar\", width=.5)\n\n```\n Leaving this to 1 - once geoms can report their size accurately, this class of problems should go away.\n This is probably related to #235.\n  This is from the discussion thread here: http://groups.google.com/group/ggplot2/browse_thread/thread/5213ac35da6b36d4/bdbb8be0a658bfe5\n\n``` R\ndat <- data.frame(x=rep(1:4, 10), g=rep(c(\"A\",\"B\"),each=20))\n\np <- ggplot(dat, aes(x,x)) + geom_point(position=\"jitter\")\n\n# OK: 20 points in each facet\np + facet_wrap(~g)\n\n# Not OK: 4 points in each facet\np + facet_grid(.~g)\n```\n I found the guilty line, in [facet-locate.r](https://github.com/hadley/ggplot2/blob/master/R/facet-locate.r), line 17:\n\n``` R\n  # Workaround for bug in reshape\n  data <- unique(data)\n```\n\nI commented out this line and it appears to generate the correct result image. However, it fails one of the tests: **Facetting (location): margins add extra data**. Here's the relevant test code, using the original (uncommented) version of `facet-locate`:\n\n``` R\ndf <- expand.grid(a = 1:2, b = 1:2)\npanel <- layout_grid(list(df), \"a\", \"b\", margins = \"b\")\nloc <- locate_grid(df, panel, \"a\", \"b\", margins = \"b\")\npanel\n#   PANEL ROW COL a     b\n# 1     1   1   1 1     1\n# 2     2   1   2 1     2\n# 3     3   1   3 1 (all)\n# 4     4   2   1 2     1\n# 5     5   2   2 2     2\n# 6     6   2   3 2 (all)\n\nloc\n#   a     b PANEL\n# 1 1     1     1\n# 2 1     2     2\n# 3 1 (all)     3\n# 4 2     1     4\n# 5 2     2     5\n# 6 2 (all)     6\n\nexpect_that(nrow(loc), equals(nrow(df) + 2))  \n# This works\n```\n\nWith the modified (commented) version, there are a couple extra lines in `loc`:\n\n``` R\nloc\n#   a     b PANEL\n# 1 1     1     1\n# 2 1     2     2\n# 3 1 (all)     3\n# 4 1 (all)     3\n# 5 2     1     4\n# 6 2     2     5\n# 7 2 (all)     6\n# 8 2 (all)     6\n\nexpect_that(nrow(loc), equals(nrow(df) + 2))  \n# Fails\n```\n\n@hadley what is the meaning of `(all)`? When I comment out the line, it produces the correct jittered graph, all the visual tests are unchanged (about 12 of the vtests use facets), and all the non-visual tests pass except the one above. Perhaps the test is wrong?\n @BrianDiggs that makes sense. I don't think that the `(all)` rows are actually used anywhere in ggplot2 code.\n\nI wonder - what is the bug in reshape2 that is worked around by that line of code?\n Hmmm, I think I must have fixed the bug because the output without unique looks fine.  I'll fix the test.\n  This is very preliminary, so I'm just looking for comments and suggestions. Many of the changes are just moved files. The new functions are in `visual-test.r`. The files `aspect-ratio.r` and `dotplot.r` have been converted to the new system, so take a look at them for examples of how to use it.\n\nYou can try it out by doing the following. Fetch and checkout the branch:\n\n```\ngit fetch https://github.com/wch/ggplot2.git visual-test\ngit checkout FETCH_HEAD\n```\n\nIn your R session, starting in the ggplot2 dir:\n\n``` R\n# I think this is needed for consistent output across platforms\n# If asked, agree to download and install gtk+ (~56MB for Mac)\ninstall.packages('cairoDevice')\n\nlibrary(devtools)\ndev_mode()\nload_all('.')\nsource('visual_test/aspect-ratio.r')\nsource('visual_test/dotplot.r')\n```\n\nOutput files will go in `visual_test/aspect-ratio/` and `visual_test/dotplot/`. In each of these dirs there is a index.html page that shows all the tests, with descriptions. In the future, everything in these directories will be committed to the repo.\n\nStill needs to be done:\n- Convert the rest of the visual tests to the new system\n- Write a single function that will run all tests\n- Create a top-level webpage with links to each page of tests\n- Write code to generate visual diffs between commits\n\nOpen questions:\n- Use optipng to shrink output files?\n  - Pro: smaller file size - visual tests may add up over time. Even minor changes to, say, tick marks, padding, or automatic breaks will result in an entirely new set of test files. Example: for the dotplot tests, total size is 440,934 bytes vs. 189,408 bytes after using optipng.\n  - Con: it adds an external dependency.\n- Use smaller images? Presently the default size is 4x4 inches at 72 ppi, or 288x288 pixels.\n\nNow that I think of it, this is probably a good candidate for using a git submodule. All the visual test results could go in the submodule.\n It turns out that cairoDevice might not be so consistent across platforms. This is a page of visual diffs; in the left column is cairoDevice on a Mac, the middle is cairoDevice on Linux, and the right is the difference: http://stdout.org/~winston/visual_test/aspect-ratio/diff.html\n\nI think the main difference is fonts. Not only are they different sizes, but I think the fonts themselves are slightly different (notice the shape of the \"3\" across the platforms).\n\nUpdate: It looks like uncompressed PDFs are stored efficiently. Even though each PDF file is relatively large (15-20KB for each one of these), they are plain text and have a lot of overlap. I created a new blank repo and put all the PDF's generated by the dotplot and aspect-ratio tests in there. The files are 630KB, but the git repo is only 60KB, after running a `git gc` to clean it up.\n\nPDF's are also the same across platforms, at least Mac and Linux. The only problem is that they embed the creation date and time in a line of text, but that should be easy to alter.\n I rewrote the code to use css, and did many, many other things behind the scenes. The code still could use some major cleaning up and modularization, but at least now it's somewhat robust in the way it deals with different possible git refs, and in how it generates the web pages.\n\nA page of test images:\nhttp://stdout.org/~winston/visual_test/html/aspect-ratio/\n\nA page of visual diffs, showing changed images, removed images, and added images:\nhttp://stdout.org/~winston/visual_test/diff/diff/visual_test/aspect-ratio/\n\nI shamelessly stole the look of the staticdocs pages. ;)\n- For the vdiffs, there's now an option to generate PNG images. It takes a little time, but it's better now that I have it not duplicate the work when the files haven't changed.\n- I don't know the purpose of many of the tests, so I'll need someone to help with the descriptions -- a description should be right the first time and not change, because it's used for the identifying hash.\n- For the tests that require map and mapproj, I can't get them to run when I do `load_all('.'); require(map);`. It seems these packages have to be loaded _before_ doing `load_all` on ggplot2. Do you know how to make this work?\n- Some of the visual tests throw errors, because they test unresolved bugs. I'll have to figure out how to handle that.\n Moved visual testing code to separate R package.\n  I like the idea, but I'm not a big fan of the name (I don't like the compounding).  Any other ideas?\n I like `scale_*_distiller` - if you make the change, I'm happy to merge the pull request.\n I don't particularly see the appeal of collapsing scales with rather different arguments in to one function - I think two many r functions do that already, and it's rather confusing.  A function should do one thing well.\n I don't particularly see the appeal of collapsing scales with rather different arguments in to one function - I think two many r functions do that already, and it's rather confusing.  A function should do one thing well.\n  It looks like the problem may be with the dodging code itself. I believe it made some assumptions about geoms that aren't always true. I wrote a preliminary fix, which is at wch@9e74f2de84e1f6d47919448fc367717a2441c40f.\nYou can test out with:\n\n``` R\nlibrary(devtools)\ndev_mode()\ninstall_github('ggplot2', 'wch', 'fix/dodge')\nlibrary(ggplot2)\n```\n\nI'm not 100% sure yet that it won't mess up other stuff, so if you could try it out and let me know, that would be really helpful.\n @jdlee I think you might be able to do something similar by using a geom_segment, but it probably doesn't capture all the features of a beanplot:\n\n``` R\nset.seed(234)\ndat <- data.frame(letters=LETTERS[1:3], size=rnorm(120))\n\nggplot(dat, aes(x=letters, y=size)) + \n  geom_violin() +\n  geom_segment(aes(x=as.numeric(letters)-.25, xend=as.numeric(letters)+.25,\n                   y=size, yend=size))\n```\n\nThis uses a little hack -- it converts `letters` to a numeric so that you can set the x start and end positions of the segment. Also, I don't think this will work properly if you want to use dodging.\n\nAnother alternative is to overlay dot plots on top of the violins. I'm probably biased, but I think this result is clearer than a bean plot (and it looks more \"bean-like\" than a bean plot!). Examples are on this page: https://github.com/wch/ggplot2/wiki/geom_dotplot\n\nAs far as I know, I'm the only person who's made these kinds of plots, and I haven't written a paper about it, so bear that in mind.\n The fix was merged into master.\n  Any change you'd be willing to contribute a few sentences?  You can probably mostly copy from `dcast`\n Thanks!\n  It'll be helpful if you edit your comment and mark the block of  code by adding lines with three backticks, like this:\n\n``````\ntext here\n\n```\ncode is here\nx <- 1:3\n```    \n\ntext here\n``````\n\n**Update: I edited the original post to have these code block markers**\n Some steps towards understanding the problem\n\n``` R\n\nmap <- fortify(boston_shp, region='TRACT')\n\ndata <- as.data.frame(boston_shp)\ndata$id <- data$TRACT\nqplot(as.numeric(TRACT), dis, data = data)\n\nboth <- join(map, data, by = \"id\")\nqplot(as.numeric(TRACT), dis, data = both)\n\n\nggplot(both, aes(x=long, y=lat, group=group, fill=dis)) + \n  geom_polygon() + \n  coord_equal()\n```\n ``` R\n\n# I really don't understand what's going on - the match between\n# TRACT and dis seems ok\nhead(arrange(unique(both[c(\"id\", \"dis\")]), id))\nhead(arrange(data, id)[c(\"id\", \"dis\")])\n\ntail(arrange(unique(both[c(\"id\", \"dis\")]), id))\ntail(arrange(data, id)[c(\"id\", \"dis\")])\n\n# And it's not a polygon drawing problem because points look fine\nggplot(both, aes(x=long, y=lat, group=group, colour = dis)) + \n  geom_point()\n\n```\n ```\n# This works\nsaferFortify.SPDF <- function(model, data, region=NULL){\n warning('Using FIDs as the id.  User should verify that Feature IDs are also the row.names of data.frame. See spChFIDs().')\n attr <- as.data.frame(model)\n coords <- ldply(model@polygons,fortify)\n coords <- cbind(coords,attr[as.character(coords$id),])\n}\n\nboth2 <- saferFortify.SPDF(boston_shp)\n# But the mapping between id and dis isn't any different?!\ntail(arrange(unique(both2[c(\"id\", \"dis\")]), id))\nhead(arrange(unique(both2[c(\"id\", \"dis\")]), id))\n\nggplot(both2, aes(x=long, y=lat, group=group, colour = dis)) + \n  geom_point()\n```\n I made a branch with the fix, and merged in 9f119467da965ba723196f347821925623d63972.\n  Legend should be below the title.  At some point we should make the layout more flexible, but I hope the next version of gtable will make that easier.\n @kohske Is this hard to fix?\n easy. actually guide is not responsible, plot_render is. I will fix in a day.\n  It's hard to verify your issue without example data... \n\nBut this works for me:\n\n``` R\n\ndat <- data.frame(x=1:2, y=1:6, g=LETTERS[1:3], e=.5)\npos <- position_dodge(.2)\nlim <- aes(ymin=y-e, ymax=y+e)\n\nggplot(dat, aes(x=x, y=y, colour=g)) + geom_point(position=pos) + \n  geom_errorbar(lim, position=pos, width=.1)\n```\n I'm pretty sure this isn't a bug -- the reason it stopped working for you is because a bug in 0.8.9 was fixed! That bug is also the reason why you had to order the data frame in a particular way. I recently wrote about this same bug on the mailing list: http://groups.google.com/group/ggplot2/browse_thread/thread/e8e44bd0aa4c3074\n\nCommit ac91fe4 is the one that changed the behavior.\n\nIn your default aesthetic mapping, you make `group` a grouping variable, by mapping it to `linetype`. But in this line of code, you unset the `linetype=group` mapping, so `group` is **not** a grouping variable for the error bars:\n\n``` R\nlimits <- aes(ymax=mean + std.error, ymin=mean - std.error, linetype=NULL)\n```\n\nSince the error bars aren't grouped on the `group` variable, they won't be dodged.\n\nIf you re-run the same code without setting `linetype=NULL`, it works in 0.9.0:\n\n``` R\n# Dodging works, but with dashed and dotted error bars\nlimits <- aes(ymax=mean + std.error, ymin=mean - std.error)\npos <- position_dodge(width=0.2)\nbadplot <- ggplot(df, aes(x=time, y=mean, linetype=group)) + \n  geom_line(position=pos, size=1.1) + \n  geom_errorbar(limits, width=0.2, position=pos, show_guide=FALSE) + \n  geom_point(position=pos, size=2.0) +\n  facet_wrap(~Disorder)\nprint(badplot)\n```\n\nOf course, you probably don't want the linetype of the error bars to be dotted and dashed like this. To make them all solid, but still use `group` as a grouping var, you can map `aes(..., linetype=NULL, group=group)`:\n\n``` R\n# Dodging works, solid error bars\nlimits <- aes(ymax=mean + std.error, ymin=mean - std.error, linetype=NULL, group=group)\npos <- position_dodge(width=0.2)\nbadplot <- ggplot(df, aes(x=time, y=mean, linetype=group)) + \n  geom_line(position=pos, size=1.1) + \n  geom_errorbar(limits, width=0.2, position=pos, show_guide=FALSE) + \n  geom_point(position=pos, size=2.0) +\n  facet_wrap(~Disorder)\nprint(badplot)\n```\n\nOr in the _default_ mapping you can map `group=group`, then set `linetype=\"solid\"` for the error bars.\n\n``` R\n# Dodging works, solid error bars\nlimits <- aes(ymax=mean + std.error, ymin=mean - std.error)\npos <- position_dodge(width=0.2)\nbadplot <- ggplot(df, aes(x=time, y=mean, linetype=group, group=group)) + \n  geom_line(position=pos, size=1.1) + \n  geom_errorbar(limits, width=0.2, position=pos, show_guide=FALSE, linetype=\"solid\") + \n  geom_point(position=pos, size=2.0) +\n  facet_wrap(~Disorder)\nprint(badplot)\n```\n  This same happens for `coord_cartesian` as well; the breaks won't go outside of the data range.\n\n``` R\ndat <- data.frame(x=1:5, y=1:5)\n\nggplot(dat, aes(x,y)) + geom_point() +\n  scale_y_continuous(breaks=seq(0,10,.5)) +\n  coord_cartesian(ylim=c(0,10))\n```\n After some other fixes, it seems there's a problem specific to `coord_map()`. It looks like at least one break has to be within the data range.\n\n``` R\ndat <- data.frame(x=seq(0.1, 0.9, by=0.1), y=seq(0.1, 0.9, by=0.1))\np <- ggplot(dat, aes(x=x, y=y)) + geom_point()\n\n# Error\np + scale_x_continuous(breaks=NULL) + coord_map()\np + scale_x_continuous(breaks=1:10) + coord_map()\np + scale_x_continuous(breaks=c(0,10)) + coord_map()\n\n# OK: at least one break is within range\np + scale_x_continuous(breaks=c(0, 0.2, 10)) + coord_map()\np + scale_x_continuous(breaks=0.9) + coord_map()\n\n\n# Other coords are OK\np + scale_x_continuous(breaks=NULL) + coord_trans()\np + scale_x_continuous(breaks=NULL) + coord_cartesian()\np + scale_x_continuous(breaks=1:10) + coord_cartesian()\n\n```\n  This implements stacking for geom_dotplot, using `stackgroups=TRUE`.\n  I think this is already easy with lubridate's `round_date` function.\n  Regardless of the other issues, do you think the legend should include all 4 values?\n In the second example, the only problem is really the labelling of the legend, right?  You asked that 4 be mapped to orange, and that's what you got.\n And the real issue is that the names of labels are not used have no impact - labels are matched purely on position.  Did using names ever work?\n  For `geom_hline`, `vline`, and `abline`, `inherit.aes` is always FALSE. I can see an advantage: when drawing data from a different data frame, it won't attempt to map possibly nonexistent variables to `x` and `y`. However, there are a few drawbacks:\n- Behavior is inconsistent with other geoms.\n- Aesthetics such as `colour` and `yintercept` can't be inherited and must be respecified for the geom. This is especially strange if the values are drawn from the original data frame.\n\n``` R\nmtcar_means <- ddply(mtcars, .(cyl), summarise, mpg = mean(mpg))\n# cyl      mpg\n#   4 26.66364\n#   6 19.74286\n#   8 15.10000\n\n# All black lines\nggplot(mtcars, aes(x=disp, y=mpg, colour=factor(cyl))) + geom_point() +\n  geom_hline(aes(yintercept=mpg), data=mtcar_means)\n\n# Need to respecify mapping to get colored lines\nggplot(mtcars, aes(x=disp, y=mpg, colour=factor(cyl))) + geom_point() +\n  geom_hline(aes(yintercept=mpg, colour=factor(cyl)), data=mtcar_means)\n```\n\nIt appears impossible to set `inherit.aes=TRUE`. I think this is because the value is hard-coded in the `$new` functions for each geom. If it is indeed desired to have them _not_ inherit by default, I think a better way is to set the default value `inherit.aes=FALSE`, instead of hard-coding it.\n\n``` R\n# Can't set inherit.aes=TRUE\nggplot(mtcars, aes(x=disp, y=mpg, colour=factor(cyl))) + geom_point() +\n  geom_hline(aes(yintercept=mpg), data=mtcar_means, inherit.aes=TRUE)\n# Error in get(x, envir = this, inherits = inh)(this, ...) :\n#   formal argument \"inherit.aes\" matched by multiple actual arguments\n```\n Could we just use `annotate` to do this? I tried running this code, but it doesn't work:\n\n``` R\nggplot(mtcars, aes(x=disp, y=mpg, colour=factor(cyl))) + geom_point() +\n  annotate(\"hline\", yintercept=20)\n# Error in is.unit(y1) : object 'yend' not found\n```\n\nI think it has something to do with `GeomHline$new` not getting called when you use `annotate()`.\n  In the first changed example, using `aes()` made it overplot the same text many times. I also changed the data frame to `NULL`.\n\nIn the second example, I changed the documentation to reflect the code. The code uses `family`, not `fontfamily`. However, this might actually be a bug -- in NEWS, it says that it uses `fontfamily`. @kohske, is it a bug in the documentation, or in the code?\n  This doesn't throw any errors when I try it. Are you loading any other packages first? And are your other packages up to date with `update.packages()`?\n Closing because it looks like an installation issue.\n  I think the problem is that `scale_breaks.continuous` uses `censor()` on the breaks, and this can return a vector with `NA`.\n\n```\ndebug at ggplot2/R/scale-.r#284: breaks <- censor(scale$trans$trans(breaks), scale_dimension(scale))\nBrowse[3]> breaks\n[1]  0  2  4  6  8 10 12\ndebug at ggplot2/R/scale-.r#284: breaks <- censor(scale$trans$trans(breaks), scale_dimension(scale))\nBrowse[3]> n\nBrowse[3]> breaks\n[1] NA  2  4  6  8 10 12\n```\n\nI tried replacing `censor` with `discard, but that causes some tests to fail; it looks like the`NA`is expected from`scale_breaks`.\n  Actually, I think the problem was that in `range`, there was `theta.range` and `r.range`, but no `x.range` or `y.range`.\n  Well anything that has a baseline of 0 is going to have problems with log transforms...\n  I think I re-submitted the same issue in #449, so I'm closing this one.\n  @wch Could you please add a note to NEWS and then merge? Thanks!\n  Unfortunately this is outside the scope of ggplot2 so there's not much I can do to fix it.\n  I'd also like to explore using the [labelling](http://cran.r-project.org/web/packages/labeling/index.html) package for this.  And probably the breaks should be computed on the range from `scale_dimension`, not `scale_limits`\n Fixed in #473.\n  Could you provide an example use case?\n  But they do get a different colour...\n I think the best resolution for this would be for the legend to display an entry for NA when there are any on the graph - the default colours might make it difficult to distinguish the missing value from other values, but at least you'd know it was there and could remedy the problem.\n\nThe challenge, as @kohske mentioned, is that there are two meanings for NA: an explicit NA from the original data (which we want to preserve) or a NA introduced because the value is outside the range of the scale (we don't want to show that on the plot, but it should trigger an error message). One option which is not particularly elegant, would be to use NA and NaN to distinguish between the two states.  Otherwise I could try creating a new vector type that could have multiple types of missing values (a hybrid continuous/discrete variable).  \n  Could you please also provide a non-visual test?\n Oh sorry, I forgot about that.  I think in the next version (1.0) it will be easier to do these tests.\n  For the discrete case, I'm not sure if it's possible to fix this behaviour with out breaking other desirable behaviour - `scale_discrete` also has to deal with continuous values so that (e.g.) `geom_jitter` works if you have categorical x's.\n Here's an outline of a solution to the other problem\n\n``` R\nto_time2 <- function(x)    structure(x, class = c(\"POSIXt\", \"POSIXct\"))\nfrom_time2 <- function(x) {\n  if (!inherits(x, \"POSIXt\")) {\n    stop(\"Time transformer requires POSIXt as input\", call. = FALSE)\n  }\n  structure(as.numeric(x), names = names(x))\n}\ntime2_trans <- trans_new(\"time\", \"from_time2\", \"to_time2\")\n\nggplot(d) + geom_point(aes(x=x, y=y)) + scale_x_continuous(trans = time2_trans)\n```\n\nthis needs to be fixed in the scales package, and a similar change is needed for dates.\n Moved to scales: https://github.com/hadley/scales/issues/18\n  We probably need a little documentation for `scale_breaks_minor` describing exactly what it does.\n I'll do it - either today or tomorrow.  (Note to self: also make sure to document minor_breaks arguments to date scales)\n Hmmm, this is more complicated than I thought. Ideally, we should be able to wrap the default behaviour (n evenly spaced minor breaks between each major break) into a standard minor breaks function - but currently it needs both the major breaks and the limits.  This may suggest that the minor breaks function should get both those arguments - but then all other minor breaks functions will need to be rewritten (e.g. for date and date time).\n\nWe also need someway to easily control the number of minor breaks between major breaks.\n See exploration in `minor_breaks` branch: https://github.com/hadley/ggplot2/compare/minor_breaks\n I think this is big enough that I'm going to put it off until 0.9.1\n And now until 0.9.2\n  I think option 3 is the right one for shape scales.  I made this change because the previous behaviour had broken one of the tests.  \n We also need to supplement the tests so this doesn't happen again.\n Hmmm, probably just best to change the example.  Otherwise we'd need to muck with a custom scale class for shape identity.\n This turned out to be much simpler than I thought - and should slightly improve performance with identity scales.\n  I think this a good idea.\n Now that you have admin access, do you want to do this yourself?\n Yeah, probably.  They should at least be consistent!\n Seems ok to me\n  Sure - but in principle, I should only ever be using the released version of roxygen.\n  Fixed in the development version :)\n  It probably should be customisable, but I'd prefer to figure out how to do it in general - there are many margins and paddings that should be user configurable.\n Ah, I see how it works now.  I think we will have to come back to this in the future - and rewrite to use methods on a gtable object.  Generally, you shouldn't have to create the layout by hand (but you might have to do this currently because gtable doesn't provide enough useful tools)\n  Could you please provide a reproducible example? \n  Thanks Brian!\n  Would you mind using the new `@family` tag?\n Roxygen comments look good, and I think that's all the guide related functions.  However, due to a roxygen bug (fixed in dev version), you're using a different sort order to me, and hence there are a lot of spurious changes.\n  @kohske Could you make this a pull request please?\n @kohske oh you did already, sorry!\n Fixed in 67bfcc110ee69a1945ca859c7595b038cb7686c0\n  Simplified and expanded test cases:\n\n``` R\ndat <- data.frame(g = c(\"B\",\"A\",\"A\"))\np <- ggplot(dat, aes(g, fill = g)) + geom_bar()\ncol <- c(\"A\" = \"red\", \"B\" = \"green\", \"C\" = \"blue\")\n\ncols <- function(x) ggplot_build(x)$data[[1]][, \"fill\"]\nfill_scale <- function(order) scale_fill_manual(values = col[order], \n  na.value = \"black\")\n\n# OK: Scale with three values, order ABC\np + fill_scale(1:3)\np + fill_scale(1:2)\np + fill_scale(2:1)\n\n# NOT OK: missing colour\np + fill_scale(c(3, 2, 1))\np + fill_scale(c(3, 1, 2))\np + fill_scale(c(1, 3, 2))\n\n# NOT OK: doesn't use na.value\np + fill_scale(c(3, 1))\np + fill_scale(c(1, 3))\n\n```\n  Also, the behaviour from 0.8.9 has changed - previously the bar did not show up.\n Slightly more comprehensive set of examples, also checking non-finite positions:\n\n``` R\n\n\ndat <- data.frame(x=c(\"a\", \"b\", \"c\"), y=c(1, 5, 10))\nbase <- ggplot(dat, aes(x=x, y=y)) + \n  geom_bar() + \n  annotate(\"point\", x = \"a\", y = c(-Inf, Inf))\n\nbase + scale_y_continuous(limits = c(0, 5))\nbase + geom_bar() + scale_y_continuous(limits = c(3, 7))\n\nbase + scale_y_continuous(limits = c(0, 5), oob = squish)\nbase + geom_bar() + scale_y_continuous(limits = c(3, 7), oob = squish)\n\n```\n  The commit message has a spelling mistake :/\n Do you have any test cases?  I think the correct fix is:\n\n``` R\n\n  calculate_groups <- function(., data, scales, ...) {\n    if (is.null(data$weight)) data$weight <- 1\n\n    group_by <- intersect(names(data), .all_aesthetics))\n    counts <- count(data, group_by, wt_var = \"weight\")\n    names(counts)[4] <- \"n\"\n    counts$prop <- ave(counts$n, counts$group, FUN = prop.table)\n\n    counts\n  }\n```\n\nAvoiding the default `calculate_groups` makes the function considerably faster (i.e. it's vectorised).\n  The fix looks unrelated, but is the underlying bug.  It was revealed by a change in the way I generated the grouping variable for the contours.\n  Well `as.quoted.formula` has a real parser, so I probably just need to use that.  The problem is that it collapses both sides into one list.\n Not sure whether this is more or less hackish, but I'll probably go with\n\n``` R\nas.quoted(structure(f[[2]], class = \"formula\"))\nas.quoted(structure(f[[3]], class = \"formula\"))\n```\n\nneed to write a couple of tests to make sure it doesn't happen again.\n Well it's relying on my knowledge that `as.quoted.formula` will handle the call objects in the correct way.  Equivalently I could do `as.quoted.formula(f[[2]])` but that's not exported from the plyr namespace.\n How about helper functions:\n\n``` R\nlhs <- function(x) if(length(x) == 2) NULL else x[-3]\nrhs <- function(x) if(length(x) == 2) x else x[-2]\n```\n  It works for me without evaluate:\n\n``` R\nf <- function() {\n  library(ggplot2)\n  freq <- table(as.integer(runif(1000, 1, 100)))\n  m <- max(freq) + 1\n  qplot(c(freq), breaks=0:m, log='y', xlab='Probe number')\n}\nf()\n```\n\nso I think that suggests it's an evaluate bug.\n Hmmm, good point.  This works:\n\n``` R\nf = function() {\n env = new.env(parent = globalenv())\n eval(parse(text = \"library(ggplot2)\n          freq <- table(as.integer(runif(1000, 1, 100)))\n          m <- max(freq) + 1\n          qplot(c(freq), log='y', xlab='Probe number')\"),\n          envir = env)\n}\nf()\n```\n\nso it's only parameter that are causing problems.\n\nLooking at qplot, I see:\n\n``` R\n\n   mapply(function(g, s, ps) {\n        if (is.character(g)) \n            g <- Geom$find(g)\n        if (is.character(s)) \n            s <- Stat$find(s)\n        if (is.character(ps)) \n            ps <- Position$find(ps)\n        params <- arguments[setdiff(names(arguments), c(aes_names, \n            argnames))]\n        params <- lapply(params, eval, parent.frame(n = 1))\n        p <<- p + layer(geom = g, stat = s, geom_params = params, \n            stat_params = params, position = ps)\n    }, geom, stat, position)\n```\n\nwhich is possibly causing the problem.  Not sure why I need to do special evaluation here.\n  Could you please also implement for `scale_datetime`? Thanks!\n  Isn't this what `trans_breaks` does?  The default in ggplot2 is to space major breaks evenly in the transformed space, and the minor breaks evenly in the data space. \n  Could you please add a note to news and maybe a few examples in geom_vline, hline, abline of using them with different coordinate systems?\n Looks good.  And it probably is a good idea to get rid of `last_plot()`\n  Hmmm, that's an interesting point.  Probably would need to be based on the maximum group size, because otherwise the quadratic behaviour of loess will become a problem.  Another option would be to implement a better smoothing system that can deal with all sizes.\n Good idea - it should be a message though.  I think that should be a general principle - whenever a reasonably important default setting is chosen automatically, a message should inform the user what is going on.\n Fixed - @wch can you please use (fixes #367) to ensure that the issue gets automatically closed, not just referenced?\n  Thanks - that was a dumb mistake.  You could add a check for equal lengths if you want - the assumption is that they will be because that function gets called with columns from a data frame.\n  How about `coord_mapping`?\n\nThe ranges in `coord_map` are the ranges of the transformed values (after they've been projected).  If this seems inconsistent with the other coords, you could change that too.  Maybe x.raw -> x.range and x.range -> x.proj ?\n  Looking at the code, I have no idea what I was thinking and I have no idea why I thought it would work.  But I've figured out a much better strategy that seems to work reliably.\n  Yes, basically geom_abline, geom_vline and geom_hline don't work properly except for `coord_cartesian`\n I think the basic problem is we don't have a standard way of referring to the maximal extent of the coordinate system.  If we did, I think it might be possible to use that information in the coordinate munching process and then geom_vline etc would just become special cases of geom_line.  But I've never been able to quite figure it out.  Geom_vline, hline and abline are definitely one of the trickiest components of ggplot2.\n\n(They also work a bit confusingly because if you supply the arguments in a certain way you get something that behaves more like an annotation than a geom)\n I would rather not special case these functions, but instead figure out how to do it in general.  geom_abline isn't very useful for polar coordinates, but geom_vline and geom_hline are.\n But I think coordinate objects should largely be opaque - they should just provide methods to do what you want.\n What information do you need to know how to do it generally?  I'd think about flip, polar and map - if you can get it work for those three, then the rest should be easy.\n And you think that's sufficient information?  That seems like a really easy solution, and it seems like that might lead to a natural way of incorporating non-cartesian coordinates into facets with varying scales.\n Fixed in 8d09896cd804805f315d27aedf64336a76f7b93a\n  Unfortunately because of the way that grid and ggplot2 interact, there is no way to fix this in general.  But geom_dotplot should at least give an informative message.\n For a coordinate system in general I'm pretty sure you can't do it. You might be able to special case it, but I don't think that's a terribly useful use of anyone's time. \n I think this type of display also points to some of the limitations of the grammar - geoms, stats and coords aren't really completely independent.\n  No - it's impossible because of the way that facet data is constructed.  And if I could easily make `geom_point(aes(d$x))` an error I would - it's just not how ggplot2 works.\n Yes, scalars and functions from outside ggplot2, but not vectors. Otherwise it gets too confusing too fast - data frames are where data should live and they ensure that your variables are aligned correctly.\n Well that's one of the reasons I'm not sure I want to forbid it, but it is definitely quick and dirty, and if `m$fitted.values` isn't the correct length, it may silently produce an incorrect plot.\n  This always confuses me - if your data is `c(3, 1, 5)` you don't expect the numbers to be ordered differently.  I think it's better for people to learn how factors work in R than for ggplot2 to do something magical.  I suspect if I did make the change, there would be just as many (if not more) people complaining that ggplot2 no longer ordered character variables alphabetically.\n While I can see your point, I really think that would be counter-intuitive behaviour. Some things are confusing because you need to learn a bit more about how R works.  It's more effort now, but pays off in the future.\n  And could you please not check in the `NAMESPACE` file? Because of a buglet in roxygen it will conflict with my version.\n Done in 83a2275d1b898632b1a7541bb838fdd0b3973f66\n  In the devel version (which is waiting on cran to be released), this first block gives: `Error: A continuous variable can not be mapped to shape`\n  Ok, perfect.  I think the correct fix is to `force(x)`.\n Fixed in scales.\n  I don't think this is possible with `grid.raster`.  How did you imagine it being used?\n  I turned pad to just in 42c1ed3f74a9acaa15a8d1058ded2217f2908ed5\n  Looks good!\n  See also `missing_s3` in the development devtools for an attempt to pick this up automatically.\n Looks good. Thanks\n  It doesn't look like it can be automatically merged - could you please have a look into why?\n  @kohske Could you flag that with a `#' @TODO`, or file another bug so we remember to fix it once gtable gets z-ordering?  Then I can pull the request.\n Oh, I guess I just mean `# @todo`\n  Is this different to #340?  It looks the same to me.\n\nAnswers to questions:\n\n(1) maybe closed and filled?\n\n(2) Off the top of my head, I don't know of any modelling functions that model the median apart from quantreg, which is dealt with in `geom_quantile`\n We need to get you set up with a workflow that works regardless of what I'm doing.  I think if you do separate branches you should be ok.  I've closed #340 since it was duplicate of this.\n Closing b/c of new pull request.\n  Looks good. Could you please also a bullet point to the news file?  (Including crediting yourself)\n  Looks great - thanks Dennis!  Will probably be a few days until I merge it - ggplot2 has been submitted to CRAN and if something goes wrong with that I don't want to get confused about which changes are where.\n > Assuming that my latest install from Github is the current state of the package, I'll make separate branches for the geom, scale and stat help pages and put whatever corrections/amendments in the appropriate branch. When the CRAN version comes out, I can double check against those, commit and push. In the meantime, I can start working on the scales doc and ggplot2 transition doc.\n\nSounds good.  But don't worry about the CRAN release - just make sure\nyou're always making changes against the master branch and you'll\nalways be ok.\n\nHadley\n\n## \n\nAssistant Professor / Dobelman Family Junior Chair\nDepartment of Statistics / Rice University\nhttp://had.co.nz/\n  Looks like this got included in #340, so I'm going to close it for now.\n  Did this use to work?\n  Is this a duplicate of #31 ?\n Taking a quick look at the code, I think it is related to #31, but not I'm completely sure if it's the same or not. Somewhere the layer data is getting dropped completely, and only the plot data used - which does not contain x and y variables.\n  Closing since the new pulls are better :)\n  Thanks Dennis.  I didn't end up using the pull request directly, but your changes were very helpful and have now been incorporated.  Thanks!\n  I like this idea - lets put it in 0.9.1 (when hopefully gtable will be\nits own package)\n\nHadley\n\nOn Sun, Dec 25, 2011 at 7:26 PM, kohske takahashi\nreply@reply.github.com\nwrote:\n\n> Here is an initial implementation. https://github.com/kohske/ggplot2/tree/feature/plot-layout\n> \n> Two way of combining:\n> 1. Size-sensitive combining: arrange plots with panel size adjustment.\n>    Currently, using S3 of cbind and rbind.\n> 2. Simple layout -- like grid.arrange in gridExtra. Not implemented yet.\n> \n> Any idea and suggestions are welcome.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/hadley/ggplot2/issues/326\n\n## \n\nAssistant Professor / Dobelman Family Junior Chair\nDepartment of Statistics / Rice University\nhttp://had.co.nz/\n Moving to 0.9.2 since I'm now reserving 0.9.1 for bug fixes and v. small features.\n I now wonder if this shouldn't be in it's own package.\n  Fixed in 7cb04ed759c9a858abf4a4d363f439c19f188c16\n   See https://github.com/hadley/gtable for package.\n A good place to start would be to make sure that `gtable` passes `R CMD check` and then add `gtable` to the imports and remove all existing gtable code.  If you want to go further, you could suggest improvements to the gtable api by inspecting what gets done in the facetting functions to assemble the whole plot together.\n Not yet. Once the theme changes get merged (probably in the next two days) I'm going to start on this.\n I don't know yet what I'm going to do with it - I don't yet know enough about gtable to know what I'll do with it. But I will definitely keep in mind your guides.\n Done in 6f8800a3613d6ffae430ca6d989429beea6ca8ff.\n  Looks good - also needs documentation updates to describe what `free_x` and `free_y` do. \n Looks good - the last thing to do is to update your checkout and then rebase this branch so I can cleanly include it. Please email ggplot-dev if you need help with that.\n  Should be able to:\n- supply title, describing what to look like\n- supply file name\n- focus in on specific components of the gtable (to avoid detecting spurious changes)\n- generate html page comparing current and previous version (may need git installed)\n\nNeed to function to run all visual tests in a directory, and `stop()` if there are any changes (to avoid R CMD check silently passing when there has been a change)\n\nMay need a visual testing manifest file that gives the source R file name, image name, title and hash of image. \n I'm not really worried about the git repo file size - I'm imagining most images will be pretty small.  And I was thinking png because then the git image compare will kick in (which is only useful retrospectively, but still)\n I've figured out how to use ImageMagick to do visual diffs with git. Add this to your `.git/config` file:\n\n```\n[difftool \"image\"]\n        cmd = compare $LOCAL $REMOTE - | convert $LOCAL $REMOTE - +append x:\n```\n\nSuppose you have a .png file that's committed to the repo, and then you overwrite that file with a new version. You can get the visual diff like (this doesn't require committing the new image to the repo):\n\n```\ngit difftool -t image\n```\n\nYou can also compare any commit to another commit, e.g. `git difftool -t image HEAD^ mybranch`.\n\nThis command puts the images left to right, in this order: Old, New, Diff. But it's possible to change the order, and arrange them vertically, if desired.\n The changes in #454 allow ggplot2 to work with the new vtest package.\n  `stat_contour` now gives a warning when it generates no data.  I'd prefer to keep smoothing/interpolation and contouring separate - I think it's the job of the user to apply an appropriate method.\n Alternatively, there may be an implementation of contouring that uses a data frame directly, rather than a grid of points.\n  See @wch's suggestions on mailing list and #277\n  For scales arguments: name, breaks, minor_breaks, labels, legend.  NULL should suppress that element.\n  Slightly simpler example:\n\n``` R\n\nlibrary(ggplot2)\ndata <- data.frame(\n  x = paste(\"X\", 1:6, sep = \"\"), \n  y = 1:6, \n  group = rep(c(\"a\", \"b\"), c(4, 2)))\n\nbase <- ggplot(data, aes(x, y)) + geom_point() \n# OK\nbase + facet_grid(group ~ ., scales = \"free\", space = \"free\") \n# Problems\nbase + facet_grid(. ~ group, scales = \"free\", space = \"free\") \n```\n  Don't we already have the equivalent of `parse = T`, i.e. `labels = parse_format()` ?\n FYI the easiest way to create the vector of unevaluated calls is `.(alpha, beta, gamma)`\n  Could you please move this to https://github.com/hadley/gtable ?\n Closing this because I've recreated as individual issues in gtable.\n  Can we not do this more directly by manipulating the gtable object?\n I don't care about performance ;)  I'd rather make something simple and then make ggplot2 fast enough that it doesn't matter too much.  But using gtable should (eventually) have other advantages like being able to make the legend a fixed size.\n Yes, I can.  That would be a better way to implement this code (and would handle null results etc).  Could you please open a request?\n @wch this should be something that's easy to do with gtable - I don't think it should be an argument in ggplot2.\n  What's the best way to fix this problem in general?  Add a z column to gtable and order by that prior to drawing?  \n @wch this should be trivial with gtable's z support.\n Yeah, I think we'll implement it differently.\n  A few test cases would make me feel much more comfortable...\n Visual tests are helpful, but I'd really prefer some automated ones, especially for the dodging.  That makes it much less likely I'll accidentally break them if I need to modify the code.\n I also wonder why the fill is lost in this case:\n\n``` R\nggplot(dat, aes(x, fill=g, group= 1)) +\n  geom_dotplot(binwidth=.4, alpha=.4, binpositions=\"all\", position=\"stack\")\n```\n\n(adapted from the \"Multiple groups with aligned bins,\\n stacked (currently doesn't work)\" example in the visual tests)\n I like the idea of using titles on the visual tests - eventually the visual tests will be run automatically (so we can use git to compare the output), and the filenames could be generated by hashing their titles.\n Maybe a combination of the two - it might be easier to supply the path where the image should be saved so you can more easily locate the corresponding code. Ideally, the visual testing infrastructure would also create an html page for previewing all images in one test.\n Ah ok, so for dotplot groups work like geom_histogram, rather than like geom_point.  That makes sense now that I think about it.  \n\nAnd please see #319 for discussion of a better visual testing framework.\n  Run `check_doc` until no errors found.\n Done!\n   Thanks - also made a number of improvements in 1d4cc9a148404ac93d35cf93ca103ae303754765\n  Thanks for the bug report and investigation - will fix soon.\n  Duplicate of #168, but I'll close that one since it has no info.  \n\nCould you please circulate your fix on the mailing list to see anyone know if it's actually t-distributed?  (I would have guessed z)\n\nFinally, it's better to use `#' @importFrom stats predict` rather than `stats::predict`\n Ok, I think t-based intervals are at least a reasonable approximation.  Would you mind putting together a pull request with a little bit of documentation?\n  Tiny note - if you're testing scales, it's better to test them directly, rather than creating the entire graphic (where many other things can go wrong).  See the `scale-r.` for a list of scale methods.  That will also make it easier to know what to expect.\n @koshke would you mind bundling your changes + the test into a pull request?  Thanks!\n  Thanks - in general, I want to eliminate all use of `with`, `subset`, `transform` etc in ggplot2 code.\n  At some point in the future, but I don't have immediate plans.  I agree it would be useful to flag any changes in the book, but I don't currently have time to do that.  \n  I'm not sure I see why you need so many options - to me, the only sensible scalings are area constant, or area proportional to sample size.\n Unless you strongly object, I'd suggest getting rid of width scaling.\n How about `scale = \"fixed\"` or `\"free\"`?  Would be nice parallel to facets\n Agreed - I like scale, count and equal.\n Could you please also add a note to NEWS and then we'll be ready to go.\n Do you mind rebasing your branch against master?  I think it's slightly easier to do from your end.\n  Looks good, apart from the few changes I noted above.  Can you please also add notch parameter and documentation to `stat_boxplot`?\n Roxygen should be idempotent - if not, then that's a roxygen bug (so send me an email about it)\n Two last changes and I think it's ready - a bullet point in `NEWS`, and a reference to a paper that describes how notched boxplots work.\n Perfect - thanks!\n  I also notice you have `default_aes <- function(.) aes(fill = ..value..)`.  Does this cause problems if you use geoms other than rect?\n Oh good point - I was thinking in terms of `stat_summary` where it has different summary functions for different outputs (but I don't think that's a better approach).\n Yes, some basic documentation would be great please.\n Could you please rebase off master (I think it's just a conflict with NEWS) and I'll pull in.\n  Could you please also add a note to NEWS about what they do?\n  FYI this is the same bug as #118, so I'm going to close the discussion here.\n  Either with some small random probability, or only on certain days.  Messages would encourage people to sign up for mailing list etc.\n If you're worried about it, you can always use `suppressStartupMessages`\n  Can you try reproducing with pure grid graphics? It's unlikely to be a ggplot2 bug.\n  I think that when theta is a factor, the angular spacing should always be equal. \n\nIn these examples, the angular spacing with geom_point is different than with geom_bar. And since x/theta is a factor, I don't think it's possible to change the limits to get equal spacing (if it were numeric, you could control the spacing with`xlim(0.5, 4.5)`).\n\n``` R\ndat <- data.frame(x=c(\"A\",\"B\",\"C\",\"D\") , y=5:8)\n\n# x/theta is a factor, with geom_point: first and last are merged \nggplot(dat, aes(x=x, y=y)) + geom_point() + coord_polar()\n\n# x/theta is a factor, with geom_bar: not merged, but unequal spacing\nggplot(dat, aes(x=x, y=y)) + geom_bar() + coord_polar()\n\n# equal spacing with geom_bar when width=1\nggplot(dat, aes(x=x, y=y)) + geom_bar(width=1) + coord_polar()\n```\n\nFor this to be truly polar, the theta values should wrap around and connect -- perhaps it would help to formalize the property of looping/wrapping for scales.\n Fixed in #473.\n  Putting off until 1.0.  Will need a decent set of tests associated with it.  Almost wonder if we need a separate boxplot package to do calculating for all boxplot related displays (see http://vita.had.co.nz/papers/boxplots.html)\n  Yeah, I'm totally with @Koshke on this one.  It gets even more complicated if you consider longitudinal data where possibly none of the time points align.  \n\nBut I think it's worth having some tool that will do this, just not automatically.  Something to consider for 1.0\n  Fixed in 7dafed40a6cf96b005c276a021246ed81ffb59b5\n  Hmmm, I think the best way to solve this would be for `collide` to first check if it actually needs to do any adjustment. Long term, I really need a better strategy for dodging.\n Will wait to work on this until @wch's violin code merged in - needs tweaks to `collide`\n It's not clear to me how this code ever worked :(\n The problem is that the boxplots don't all have the same width because the two boxes on the very end don't get a full 0.5 worth of data.  If the data is rounded before going into ggplot2, then the boxes do have same width.\n  Hmm, I think conceptually I picture the minor grid lines lying underneath the major grid lines.  Could you give a bit of an example where this is causing you problems?\n I think that's reasonable, so I've flagged it for 0.9 and the change should be done in the next couple of days.\n\nI'd like to hear more about the huge data sets you're plotting, as there may be other features 0.9 that will help but that probably shouldn't occur in issue comments.\n  Oh this is going to be very difficult to fix :/ Outliers are a total exception to all the standard rules.  \n\nThis wasn't a problem before because the range of the plot was always the range of the data, not the range of the transformed data.\n\nThanks for the test!\n I wouldn't worry about backward compatibility.  \n\nThe quick hack to fix the bug is ok I think.  A better fix will come when geoms and stats are rewritten.\n I think I prefer @kohske's solution - can you please merge it in (or create a pull request).  Again, something that needs to be looked at again when layers are rewritten.\n  Which should suggest ggplot2 so it can be used for examples\n    Including spatial fortify code, and specialised methods for `geom_raster` and `geom_map`\n\nShould import  mapproj, maps, gpclib, maptools and extend sp so all packages are available.\n  Fixed.  In the future, please use the new ggplot2-dev mailing list for problems like this.\n  That's on R.\n  Fixed in d3173c5da066b9c7caba47f24ee5078625f7712b.\n\nAnd yes 2.14 is necessary because I'm now importing proto which didn't use to have a namespace.  Generally, I can't provide any guarantees that ggplot2 will work with an older version, because I only test on the latest.\n  Test case looks good.  Would be slightly be if you wrapped in a test: i.e. `test_that(\"labels don't have extra padding\", {...})`, and in this case, a slightly better (i.e. more general) test might be `xlabs <- p$panel$ranges[[1]]$x.labels[1]; expect_equal(xlabs, str_trim(xlabs))`.\n A pull request with test case and fix would be much appreciated. Trying to get back in the swing of development, so I should be approving things much more quickly over the next few weeks.\n  Thanks for the bug reports - probably won't have a chance work on them for a couple of weeks (until class finishes) but I hope I can get a release out by Christmas/New Years.  If you want to increase the speed at which I fix these bugs, formal test cases using the output of `ggplot_build` would really help.\n\nI agree that both breaks and values should match by both position and name.\n Ok, this isn't a bug so much as functionality that hasn't yet been implemented in 0.9.  Palettes don't work at this level (matching potential values), so I think `scale_manual` needs to work like `scale_identity` with it's own method for `scale_map`. \n\nHere's a test case for when it does get implemented:\n\n``` R\ntest_that(\"names of values used in manual scales\", {\n   s <- scale_colour_manual(values = c(\"8\" = \"c\",\"4\" = \"a\",\"6\" = \"b\"))\n   scale_train(s, c(\"4\", \"6\", \"8\"))\n   expect_equal(scale_map(s, c(\"4\", \"6\", \"8\")), c(\"a\", \"b\", \"c\"))  \n})\n```\n Thanks for the additional test!\n I can't reproduce the problem.  Are you sure you have the latest version of scales?\n  This is a desired change in behaviour.  Use `labels = math_format(...)` to get the old style labels.\n  @kohske would you mind taking care of this too?  One pull request for both would be fine.\n Actually this is exactly the same problem as #266.\n  This should be fixed in the devel version.\n Because lubridate affects the global workspace by modifying the base definitions of + etc. \n  If you don't want a straight line in visual space, use `coord_trans`:\n\n``` R\ndf <- data.frame(x = 1:11, y = 10 ^ (0:10))\ncbase <- qplot(x, y, data = df) + coord_trans(y = \"log10\")\n\n# All of these cases seem to work ok\ncbase + geom_line()\ncbase + geom_segment(aes(xend = 1, yend = y))\ncbase + geom_segment(aes(yend = y), xend = 1)\ncbase + geom_segment(aes(xend = x, yend = 1))\ncbase + geom_segment(aes(xend = x), yend = 1)\n\ncbase + geom_segment(aes(xend = 1, yend = y / 10))\ncbase + geom_segment(aes(yend = y / 10), xend = 1)\n```\n\nThe problem is with scale_log10:\n\n``` R\nsbase <- qplot(x, y, data = df) + scale_y_log10()\n\nsbase + geom_segment(aes(xend = x, yend = 1))\nsbase + geom_segment(aes(xend = x), yend = 1)\n```\n\nSet aesthetic values are not scaled/transformed. \n\nI don't think this is a bug, because it's analogous to `geom_segment(colour = \"red\")` where colour definitely should not be scaled. Normally the raw and transformed position scales align so you don't notice, but I'm reasonably certain that the current behaviour is correct and consistent.\n  I think you're missing something about scale transformations. The following two plots should look identical apart from the labels on the y-axis:\n\n``` R\nggplot(dat, aes(x=x, y=y, fill=group)) + geom_area() + scale_y_log10()\nggplot(dat, aes(x=x, y= log10(y), fill=group)) + geom_area()\n```\n\nThe real problem here is basically the same as the last plot - the base line (which is effectively _set_ not mapped), is not being scaled.  It really should be placed at -Infinity.  \n\nThis requires a rewrite of how geoms and scales interact, so I'm putting off until 1.0\n  I'm pretty sure that you're right - `coord_flip` should be linear.\n  This is expected behaviour - you might find the `inherit.aes` argument useful for your problem.\n  Is this the correct fix?  The principle with alpha is that it is applied to fill if a geom uses it, otherwise it's applied to colour.\n  Perfect - thanks!\n  This is by design.  For geoms with both colour and fill, alpha only affects fill.  (You can argue about whether or not that's a good idea, but that's the way it is :/)\n  Also fixed in 3fd4fabff0cbfc83191e240ced86b9252d1ff359.  Let me know if you see problems in new places.\n  I think this is an inherent property of how ggplot2 works - each layer does not capture scope independently.  Evaluation of all arguments should occur in the environment where the **plot** is defined.\n Sorry, I got in a bit of a ticket closing frenzy.  I think a simple fix is to replace `globalenv()` with `parent.frame()`  to at least capture the environment where `ggplot()` is called.  \n Oh, I like that even better.  Especially since if a layer doesn't have an aes call, then it doesn't need any special help.\n\nThat reminds me that I've been wanting to make `aes` more like `plyr::.` for a while.  `.` captures the current environment, and offers a much more complete API for coercing to and from different data types.\n  Don't know what fixed it, but it's fine now.\n  Also make sure to check out `count` and `geom_raster` if you're doing this for big plots. See also [densityVis](https://github.com/hadley/densityvis) where I've been working on the underlying data transforms more rigorously.  Hopefully will incorporate into ggplot2 by 1.0\n  Fixed in the devel version.\n  Special case implemented in `geom_raster`.  I don't think it's appropriate to implement geoms in general.\n  I'm going to put this off until 1.0.  Too much in this version already.\n  This appears to be fixed in the development version because `date_breaks` always rounds up/down to the nearest multiple.  \n\n``` R\n\ndf <- data.frame(\n  x = as.Date(ISOdate(c(2005, 2008, 2011), c(10, 1, 4), 1)),\n  y = c(10, 1000, 100)\n)\n\n(p <- ggplot(df, aes(x, y)) + geom_line() + geom_point())\n\np + scale_x_date(breaks = date_breaks(\"1 year\"), \n  minor_breaks = date_breaks(\"3 months\"))\n\nshrink <- as.Date(c(\"2005-1-1\", \"2012-1-1\"))\np + scale_x_date(breaks = date_breaks(\"1 year\"), \n  minor_breaks = date_breaks(\"3 months\"), limits = shrink)\n```\n  Fixed in scales, where this now lives.\n  Would you mind updating to the latest version of the develop branch? Then I'll pull in.\n Sorry, match to master branch now - develop has been retired.\n  Done by Kohske.\n  @kohske can you please look into why this doesn't work anymore?  Should it be `guide = \"legend\"` ?\n Hmm, I think this may be too much work for this release.  Let's fix legends in 1.0.\n The background dots actually are being included in the legend. However, they are being shown at the same size as the other dots. This example will illustrate:\n\n``` R\n\ndat <- data.frame(x=1:5, y=1:5, s=runif(5))\n\nggplot(dat, aes(x, y)) + \n  geom_point(aes(size=1), colour = \"red\") +\n  geom_point(aes(size=s), colour=\"blue\", alpha=0.5)\n```\n\nIs the expected behavior that the background (red) dots will all be the maximum size?\n I'm not sure that the current behavior is wrong.\n\nIn the first example here, the size of the red points is on the same scale as the semi-transparent blue points; since it's on the same scale, shouldn't the legend indicate what sizes represent what values?\n\nThe second example has the same effect, but gets the value for the size of the red dots from a a column in the data frame.\n\nIn the third example, the size is set (outside of `aes()`), so it makes sense not to include it in the legend.\n\n``` R\nset.seed(234)\ndat <- data.frame(x=1:5, y=1:5, s=10*runif(5))\n\n# mapping a constant value to size\nggplot(dat, aes(x, y)) +\n  geom_point(aes(size=7), guide=\"legend\", colour = \"red\") +\n  geom_point(aes(size=s), colour=\"blue\", alpha=0.5)\n\n\n# same as this\ndat2 <- data.frame(dat, z=7)\nggplot(dat2, aes(x, y)) +\n  geom_point(aes(size=z), guide=\"legend\", colour = \"red\") +\n  geom_point(aes(size=s), colour=\"blue\", alpha=0.5)\n\n\n# setting size - doesn't show in legend\nggplot(dat, aes(x, y)) +\n  geom_point(size=7, guide=\"legend\", colour = \"red\") +\n  geom_point(aes(size=s), colour=\"blue\", alpha=0.5)\n```\n  Fixed in f5bcca2e36d2a523d42f7b0ed642e953e2ef113c\n  Fixed in f5bcca2e36d2a523d42f7b0ed642e953e2ef113c\n  Hmmmm, I think this is a problem with `scales::discrete_range` - it actually should be sorting character vectors when it sees them.  But it shouldn't sort factors, and I'm not sure what it should do if some data is factors and some is character, or you get factors with multiple sets of levels.  \n\nOr maybe it's that `scales::clevels` needs to sort character vectors.\n Somewhat refined test case (easier to see what's going wrong when you extract the exact piece you're interested in)\n\n``` R\ncontext(\"Data\")\n\ntest_that(\"stringsAsFactors doesn't affect results\", {\n\n    sAF <- getOption(\"stringsAsFactors\")\n    dat.character <- data.frame(x=letters[5:1], y=1:5, stringsAsFactors=FALSE)\n    dat.factor <- data.frame(x=letters[5:1], y=1:5, stringsAsFactors=TRUE)\n\n    base <- ggplot(, aes(x, y)) + geom_point()\n    xlabels <- function(x) x$panel$ranges[[1]]$x.labels\n\n    options(stringsAsFactors = TRUE)\n    char_true <- ggplot_build(base %+% dat.character)\n    factor_true <- ggplot_build(base %+% dat.factor)\n\n    options(stringsAsFactors = FALSE)\n    char_false <- ggplot_build(base %+% dat.character)\n    factor_false <- ggplot_build(base %+% dat.factor)\n\n    options(stringsAsFactors = sAF)\n\n    expect_that(xlabels(char_true), equals(letters[1:5]))\n    expect_that(xlabels(char_false), equals(letters[1:5]))\n    expect_that(xlabels(factor_true), equals(letters[1:5]))\n    expect_that(xlabels(factor_false), equals(letters[1:5]))\n})\n```\n This is fixed in the development version of scales.\n  Somewhat refined test case (easier to see what's going wrong when you extract the exact piece you're interested in)\n\n``` R\ncontext(\"Data\")\n\ntest_that(\"stringsAsFactors doesn't affect results\", {\n\n    sAF <- getOption(\"stringsAsFactors\")\n    dat.character <- data.frame(x=letters[5:1], y=1:5, stringsAsFactors=FALSE)\n    dat.factor <- data.frame(x=letters[5:1], y=1:5, stringsAsFactors=TRUE)\n\n    base <- ggplot(, aes(x, y)) + geom_point()\n    xlabels <- function(x) x$panel$ranges[[1]]$x.labels\n\n    options(stringsAsFactors = TRUE)\n    char_true <- ggplot_build(base %+% dat.character)\n    factor_true <- ggplot_build(base %+% dat.factor)\n\n    options(stringsAsFactors = FALSE)\n    char_false <- ggplot_build(base %+% dat.character)\n    factor_false <- ggplot_build(base %+% dat.factor)\n\n    options(stringsAsFactors = sAF)\n\n    expect_that(xlabels(char_true), equals(letters[1:5]))\n    expect_that(xlabels(char_false), equals(letters[1:5]))\n    expect_that(xlabels(factor_true), equals(letters[1:5]))\n    expect_that(xlabels(factor_false), equals(letters[1:5]))\n})\n```\n Oops, yes, thanks.\n  Ooops, thanks!\n  Yeah, I very rarely bother with ordered factors, since the only impact they have is to change the contrasts in linear models.\n  Yes, that's where it's supposed to point.  It's an internal function and won't be exported in the next version.\n  The Rd files are automatically generated from roxygen comments in R - would you mind fixing in the source document? (position-jitter.R)\n Thanks!\n  Awesome - thanks!\n  Doh, that was a dumb mistake.  Thanks for the fix!\n  This could be a good opportunity to try out `git bisect`\n  This is fixed in the develop branch.\n You need the develop branch.\n  I'd rather make that a new position adjustment altogether.\n  Already fixed in the develop branch.\n By the end of summer hopefully. Working on updated documentation at the moment.\n  Closing this pull request because I just made these changes myself!  Great minds think alike ;)\n\nI'll push my changes shortly.  I just completed a big re-write of roxygen over the weekend that adds a few new features to reduce documentation duplication.  It's temporarily available at https://github.com/hadley/rxygn but it will be merged back into the main development trunk https://github.com/klutometis/roxygen and hopefully hence to CRAN soon after.\n  Got it - thanks Brian!\n  i.e. it's Tukey's boxplots and the hinges and whisker are calculated as ...\n  ```\nlibrary(ggplot2)\n\ndata(Boston, package = \"MASS\")\nqplot(zn, data = Boston)\nqplot(zn, data = Boston, binwidth = 5, xlim = c(0,100))\n```\n\nReported by Antony Unwin\n Need to think about what correct behaviour is.  And should `right = T` by default?\n  Axes labelling fixed in 35d830c052d907e5c66c390a947c7eb4501a3aaf\n First colour labelling bug fixed in f7ec52a85b5da5ddd570236a6bed09ef51ab20b0\n Fixed weird breaks expansion bug in 32c29499251473b2d125675acbcf570a93addfba\n Ok, I think that's everything - thanks for the bug report, and for exposing many and various problems!\n  Unfortunately it's a bit more complicated than that - it's because there are two nested layouts and the axis title is drawn in the outer layout which doesn't know anything about the inner layout. If you wanted to have a go at fixing it, you basically need to work with `panelGrid` instead of working with `panelGrob`.  Take a look at `utilities-table.r` to see how it works.  This is something I'll probably pull out of ggplot2 eventually.\n Working on this now.  Have titles and labels working.  Still working on legends, but should be done in a few days.\n Largely fixed in gtable-render branch (https://github.com/hadley/ggplot2/tree/feature%2Fgtable-render).  Would you mind having a play and seeing if there's anything I've missed?  Also the code in `plot-render.r` should hopefully be easier to understand (and to improve in the future), but layout is still hard!\n Fixed. Let me know if you see any others.\n This branch also reduces plotting time by about 40ms, which is nice.\n  This is fixed in the development version, as part of better zero detection in the scales package.\n  Fixed, thanks to Jiho's pull request.\n  Yes, I like this idea, and I like that basic syntax.  But how do limit and free scales interact?  And what happens if you specify `facet_wrap(~ vs, limits = lims)`.\n\nAnother related idea that I've been thinking about is giving layers the ability not to affect scale limits - this is useful when you are plotting spatial data and want to add a map on top.  You don't want the map to affect the limits, because it may be much bigger than you data, and using coord to zoom in is a hassle.  If that idea was implemented, modifying scales on a facet-by-facet basis would amount to using `train_position = F` for all layers, apart from a `geom_blank` which specified the dummy data to expand the scales as needed - which `expand_limits` already does.\n\nImplementing scale limits in that way would also mean the behaviour of free scales etc could remain as is.\n Hmmmm, that code just looks too complicated to me.  It's a lot of extra complexity for not a lot of extra gain.  I think giving layers the ability to control whether or not they affect position scaling is simpler to implement, more elegant (in terms of playing nicely with existing code for free limits) and allows a number of other interesting techniques that were previously not possibly.\n That's actually possible in the devel version - you can take the output of `ggplot_build` and modify the per-panel labels there.  I'm not sure if I want to commit to a formal API yet.  \n\nggplot2 will never handle these details like lattice does, because I really dislike how that works - you should be describing things in terms of the underlying data, not by some arbitrary panel number.\n  This is fixed in the development version of ggplot2, which I hope to release by the end of summer.\n  I'm still not certain about this change - it gets a bit confusing if you do something like `ggsave(units = \"cm\")`.  What does that mean?   \n\nAre you aware of the `cm` function?  That way you can at least do `ggsave(width = cm(10), height = cm(10))`\n Looking good - if you can fix those last formatting issues I'll pull it.\n If you update again, I promise to pull in this time!\n  Putting this of for 1.0 and densityVis integration.\n  Yes, this was a colossally dumb bug on my behalf :(  Thankfully it's fixed now!\n  This is fixed by #499 and #482 together. A different syntax, using `annotate(\"vline\")`, is required:\n\n``` R\nDF <- data.frame(x = 1:6, y = seq(6) * 10^6)\nqplot(x, y, data = DF)  + annotate(\"vline\", xintercept=numeric(0))\n\n```\n This works fine for me (no line, and no error):\n\n``` R\nqplot(1:3, 1:3) + geom_vline(xintercept=b, col = \"dark blue\", lty='dashed')\n```\n\nThe original example gives me some warnings, but they seem to be related to the loess smoothing of the small data set. Increasing the number of points from 6 to 7 makes the errors go away.\n  Fixed at some point in the past.  Thanks!\n  No longer relevant with move to S3.\n  Works for me in devel version.\n  Problem is in way that `layout_base` computes base data - it uses only the levels that appear in the data.  When `drop = F` it needs to use all combinations of unique values. Needs to follow same strategy as `plyr::split_labels`\n Need to write test cases to ensure these problems don't re-occur\n Tests for a few more related cases:\n\n``` R\n\nmpg$cyl2 <- factor(mpg$cyl, levels = c(2, 4, 5, 6, 8, 10))\nmpg$cyl3 <- factor(mpg$cyl, levels = c(8 ,6, 5, 4, 1))\nmpg$cyl4 <- factor(mpg$cyl, levels = c(2, 4))\n\nqplot(displ, hwy, data = mpg) + facet_wrap(~ cyl2, drop = FALSE)\nqplot(displ, hwy, data = mpg) + facet_wrap(~ cyl3, drop = FALSE)\nqplot(displ, hwy, data = mpg) + facet_wrap(~ cyl4, drop = FALSE)\n\nqplot(displ, hwy, data = mpg) + facet_grid(. ~ cyl2, drop = FALSE)\nqplot(displ, hwy, data = mpg) + facet_grid(. ~ cyl3, drop = FALSE)\nqplot(displ, hwy, data = mpg) + facet_grid(. ~ cyl4, drop = FALSE)\n```\n  I'm going to close this for now - it's confusing, but I'm not convinced there's anyway to do it better.\n  Works fine in dev version.\n  Works for me in devel version.\n  ``` R\ndiamonds$cut <- ordered(diamonds$cut)\ndiamonds$color <- ordered(diamonds$color)\ndiamonds$clarity <- ordered(diamonds$clarity)\nsave(diamonds, file = \"data/diamonds.rda\")\n\nmidwest$county <- as.character(midwest$county)\nmidwest$state <- as.character(midwest$state)\nsave(midwest, file = \"data/midwest.rda\")\n\nmovies$title <- as.character(movies$title)\nsave(movies, file = \"data/movies.rda\")\n\nmsleep$name <- as.character(msleep$name)\nmsleep$genus <- as.character(msleep$genus)\nmsleep$order <- as.character(msleep$order)\nsave(msleep, file = \"data/msleep.rda\")\n```\n  No reproducible code.\n  I'd suggest that when outlier.colour = NULL it defaults to the same colour as the boxes.\n  Also provide fortify functions for `cld`, `glht` (use `coef` component), and `summary` (use `test` component)\n  Fixed in development version.\n  This is unfortunate, but I'm not willing/able to change the order of legend labels for special cases.  I'd put this under polishing plots for presentation, which largely needs to be done by hand.\n  Not relevant any more.\n  Duplicate of #163\n  @hadley do you mean the (new) `element_xx` functions should accept both? They do now. For example, `element_line()` is defined as:\n\n``` R\nfunction(colour = NULL, size = NULL, linetype = NULL, lineend = NULL, color = NULL) {\n  if (!is.null(color))  colour <- color\n  ...\n}\n\n```\n  Done in dev version.\n  Works for me in devel version.\n  It should be possible for a nicely design axis guide to this automatically, particularly if it could use Justin Talbot's algorithms.  I've assigned to Kohske, but marked it as a long term to do.\n  On happens with `facet_grid` in devel version\n Is this one fixed now? It looks ok to me.\n Yup, looks good to me.\n  Fixed in devel version.\n  Done in devel.\n  Better test case is\n\n``` R\n\n\n\nggplot(data = mtcars, aes(x = mpg, fill = NA)) +\n  geom_density(alpha = 0.2, aes(fill = factor(vs))) +\n  geom_text(x = Inf, y = Inf, label = \"Test\", hjust = 1, vjust = 1)\n\nggplot(data = mtcars, aes(x = mpg)) +\n  geom_density(alpha = 0.2, aes(fill = factor(vs))) +\n  geom_text(x = Inf, y = Inf, label = \"Test\", hjust = 1, vjust = 1)\n```\n\n(and would be even better to use annotate to avoid duplication of text labels)\n\nwhich works for me in the current dev version.\n  Also currently a problem with legends, and zooming with coord_cartesian.  Need to write tests to ensure it's fixed.\n Here's a simple plot that illustrates both problems:\n\n``` R\nqplot(displ, hwy, data =mpg, colour = hwy) + \n  coord_cartesian(xlim = c(2.1,4.9)) + \n  scale_colour_gradient(breaks = seq(0, 40, by = 10))\n```\n Yes, that strategy makes sense to me. \n I wonder if that strategy should be implemented by `scale_breaks`\n And perhaps the default value for breaks should be `waiver()` so that then `NULL` would suppress breaks altogether.\n Let's do that later - see #313\n Fixed with Kohske's latest patch.\n Yes, let's fix that as part of a wider move to using waiver.\n  It looks like neither of the graphs work anymore.\n  Done in devel.\n  That code would need a lot of work.  We might be able to adapt the code from lvplot: https://github.com/hadley/lvplot/blob/master/R/calculate.r\n That block of code makes my eyes bleed :/ \n I think we should use quantiles, and then mention that in the documentation.\n  This is going to be a huge amount of work to add to the current API, but should be relatively straightforward once the geom/stat rewrite is complete.  I'm moving the milestone to 0.9.3 which is when (hopefully) that will occur.\n  Done in devel with guide = \"colorbar\"\n  Works for me in devel.  Probably as result of scales clean up.\n  Will be done as part of densityVis package.\n  @Kohske, can you please check this works?\n  I think since legends automatically pick up the shape, the bug is the autodetecting in the legend code.  Kohske, would you mind taking a look please?\n Yeah, I think I did that deliberately a long time ago, but it's no longer necessary.\n Closed - note that if you put `fixed #99` in your commit message it will be automatically closed.\n  Works for me in devel.\n  That's basically how it works in the devel version.  But I think it's worth keeping gradient2 around because it automatically deals with a zero point.\n  Works for me in devel.\n  Free scales aren't going to be working with non-Cartesian coordinates systems for a long time :/\n  This is implemented in the development version.  It could probably do with more examples in the docs though.\n  Working in devel version.\n  Moved to https://github.com/hadley/scales/issues/8\n  Is this one fixed now? I'm not sure what the bug is.\n The bug is that the vertical line disappears, probably because somewhere `log(-Inf)` is being calculated\n  Fixed in devel.\n  @HarlanH would you mind contributing a couple of reproducible examples?\n  Duplicate of #86\n  Intuition is arguable here.  I think changing now would cause even more confusion.  A future version might separate into different geoms.\n  Fixed in devel version.\n  Part of densityVis\n  @Kohske would you mind taking a look?  \n Thanks.  I think z-order would be the way to go.  Would you minding filing an issue so we remember to do that?  1.0 is probably a good milestone for that (and gtable needs to get spun off into own package)\n  That was deliberate - round butts look weird in the legend.\n  Not sure what fixed this, but it's now working in bf0052e23bdfae164a2a72c0c79d42a1bf06478e\n  See densityVis package\n  Works in devel version.\n Now I don't see think the first case should work - the position scales only see data as it is rendered by the layers and there is no x data on that plot.  Adding `geom_blank` should make it work without errors though - I'll look into that.\n Fixed in https://github.com/hadley/scales/commit/9ede0c2c1e6e1cd0c357ec5a1a304b0d200c1f4a\n  Not reproducible, and haven't seen it lately, so closing.\n  Fixed in devel.\n  It works with `coord_trans(y=\"log10\")` :\n\n``` R\nbase + coord_trans(y=\"log10\")\n```\n\nI agree, this is poorly defined for scales. Maybe it should give a warning message.\n  Duplicate of #95\n  Works for me in devel version.\n  The `map_layout()` function in `panel.r` assumes that if it gets an empty data frame, then the data should be inherited from `plot_data`. The problem is that there's no way to tell whether the empty data frame is passed in, or if it was just not specified in the layer. When the geom is not specified, this is what happens: `layer$new` calls `fortify.NULL()`, which returns `data.frame()`, and it's this data frame that can't be distinguished from an empty data frame passed in to the layer.\n\nOne possible solution is to make `fortify.NULL()` add an attribute to the data frame, and then test for that attribute in `map_layout()`.\n The fix I've submitted works for this, although you need to set `inherit.aes = FALSE`:\n\n``` R\nqplot(mpg, wt, data = mtcars) + geom_point(data = data.frame(), colour = \"red\", inherit.aes = FALSE)\n\n```\n  Hmmm, it shouldn't be too hard if you follow a parallel path to `facet_grid`.   One roadblock is figuring out what arguments the function should accept.\n  @Koshke, another one for you to look at.  \n Hmmm, actually I think I might have already fixed this!\n  Done in devel.\n  Another one for you :)\n  Works in devel.\n", "text_all_count": 13566, "text_word_token": ["It", "would", "be", "nice", "to", "be", "able", "to", "do", "something", "like", "R", "scale_shape_manual", "values", "list", "raster_shape", "file", "NUMBER", "png", "vector_shape", "file", "NUMBER", "svg", "There", "also", "needs", "to", "be", "some", "way", "to", "control", "the", "relative", "sizing", "of", "the", "shapes", "NUMBER", "Also", "it", "would", "be", "nice", "to", "be", "able", "to", "use", "shapes", "for", "legends", "even", "when", "there", "be", "no", "point", "geoms", "NUMBER", "Like", "the", "example", "in", "the", "first", "answer", "here", "LINK", "image", "instead", "of", "labels", "in", "ggplot", "NUMBER", "legend", "NUMBER", "In", "some", "scales", "like", "linetype", "shape", "x", "and", "y", "NAs", "values", "result", "in", "the", "geom", "not", "be", "display", "NUMBER", "In", "other", "scales", "like", "colour", "and", "fill", "NAs", "result", "in", "the", "the", "geom", "showing", "with", "a", "special", "value", "NUMBER", "This", "be", "something", "that", "should", "be", "made", "consistent", "at", "some", "point", "or", "documented", "thoroughly", "NUMBER", "For", "example", "see", "NUMBER", "From", "LINK", "topic", "ggplot", "NUMBER", "w", "NUMBER", "PA", "NUMBER", "ifC_lc", "R", "ggplot", "data", "msleep", "aes", "x", "brainwt", "y", "bodywt", "linetype", "factor", "vore", "group", "vore", "geom_line", "Error", "in", "grid", "NUMBER", "Call", "NUMBER", "graphics", "L_lines", "x", "x", "x", "y", "index", "x", "arrow", "invalid", "hex", "digit", "in", "color", "or", "lty", "In", "addition", "Warning", "message", "Removed", "NUMBER", "rows", "containing", "miss", "values", "geom_path", "NUMBER", "This", "works", "ms", "TAG", "NUMBER", "points", "NUMBER", "But", "there", "be", "still", "error", "if", "all", "group", "have", "TAG", "ggplot", "NUMBER", "finite", "NUMBER", "cases", "data", "NUMBER", "frame", "x", "NUMBER", "Error", "in", "rowSums", "vapply", "x", "be", "NUMBER", "finite", "logical", "nrow", "x", "x", "must", "be", "an", "array", "of", "at", "least", "two", "dimensions", "ggplot", "NUMBER", "finite", "NUMBER", "cases", "data", "NUMBER", "frame", "x", "NUMBER", "y", "NUMBER", "Error", "in", "rowSums", "vapply", "x", "be", "NUMBER", "finite", "logical", "nrow", "x", "x", "must", "be", "an", "array", "of", "at", "least", "two", "dimensions", "ggplot", "NUMBER", "finite", "NUMBER", "cases", "data", "NUMBER", "frame", "x", "NUMBER", "NUMBER", "NUMBER", "TRUE", "TRUE", "The", "remaining", "error", "happens", "because", "no", "y", "scale", "gets", "created", "NUMBER", "For", "example", "R", "dat", "TAG", "attr", "class", "NUMBER", "proto", "environment", "class", "z", "NUMBER", "ggproto", "proto", "environment", "There", "s", "another", "bizarre", "property", "of", "proto", "objects", "NUMBER", "If", "you", "set", "the", "class", "via", "structure", "even", "if", "you", "_don", "t_", "assign", "it", "back", "to", "the", "variable", "it", "modifies", "the", "class", "of", "the", "object", "NUMBER", "R", "class", "z", "NUMBER", "ggproto", "proto", "environment", "structure", "z", "class", "c", "foo", "class", "z", "geom_point", "na", "NUMBER", "rm", "FALSE", "stat_identity", "TAG", "attr", "class", "NUMBER", "proto", "environment", "class", "z", "NUMBER", "foo", "ggproto", "proto", "environment", "I", "m", "concerned", "that", "because", "proto", "be", "so", "opaque", "and", "confusing", "there", "may", "be", "unintended", "consequences", "of", "this", "change", "NUMBER", "Since", "we", "re", "going", "to", "change", "to", "S", "NUMBER", "anyway", "I", "d", "prefer", "not", "to", "merge", "these", "change", "NUMBER", "Thanks", "can", "you", "please", "re", "indent", "it", "so", "it", "looks", "like", "the", "code", "for", "theme_bw", "Rebased", "cleaned", "up", "and", "merge", "at", "NUMBER", "d", "NUMBER", "f", "NUMBER", "d", "NUMBER", "c", "NUMBER", "aeef", "NUMBER", "a", "NUMBER", "b", "NUMBER", "f", "NUMBER", "c", "NUMBER", "c", "NUMBER", "e", "NUMBER", "NEWS", "item", "for", "this", "change", "Fixes", "NUMBER", "The", "code", "be", "essentially", "copied", "over", "from", "geom_point", "except", "that", "na", "NUMBER", "rm", "be", "set", "to", "FALSE", "so", "it", "will", "always", "display", "the", "warning", "message", "there", "s", "not", "the", "option", "to", "change", "it", "NUMBER", "It", "also", "checks", "x", "y", "xend", "yend", "size", "and", "shape", "for", "NA", "NUMBER", "I", "also", "tried", "modifying", "scale_linetype_discrete", "so", "that", "it", "would", "use", "na", "NUMBER", "value", "NUMBER", "hoping", "it", "would", "make", "a", "blank", "line", "but", "grid", "apparently", "doesn", "t", "like", "zeros", "in", "the", "lty", "Error", "in", "grid", "NUMBER", "Call", "NUMBER", "graphics", "L_segments", "x", "x", "NUMBER", "x", "y", "NUMBER", "x", "x", "NUMBER", "x", "y", "NUMBER", "x", "arrow", "invalid", "line", "type", "zeroes", "be", "not", "allow", "Good", "point", "I", "ll", "add", "it", "in", "there", "NUMBER", "This", "fix", "NUMBER", "Examples", "that", "be", "fix", "by", "this", "R", "sky", "NUMBER", "TAG", "times", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mean", "times", "NUMBER", "NUMBER", "And", "the", "results", "for", "the", "new", "version", "d", "times", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "d", "mean", "times", "NUMBER", "NUMBER", "Since", "we", "re", "use", "R", "we", "might", "as", "well", "do", "a", "statistical", "test", "NUMBER", "t", "NUMBER", "test", "times", "times", "NUMBER", "Welch", "Two", "Sample", "t", "test", "data", "times", "and", "times", "NUMBER", "t", "NUMBER", "df", "NUMBER", "p", "value", "NUMBER", "alternative", "hypothesis", "true", "difference", "in", "means", "be", "not", "equal", "to", "NUMBER", "NUMBER", "percent", "confidence", "interval", "NUMBER", "NUMBER", "sample", "estimates", "mean", "of", "x", "mean", "of", "y", "NUMBER", "NUMBER", "Facet", "test", "This", "code", "add", "two", "faceting", "variables", "for", "a", "NUMBER", "x", "NUMBER", "grid", "NUMBER", "n", "TAG", "times", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mean", "times", "NUMBER", "NUMBER", "And", "the", "new", "version", "d", "times", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "d", "mean", "times", "NUMBER", "NUMBER", "And", "the", "t", "test", "t", "NUMBER", "test", "times", "times", "NUMBER", "Welch", "Two", "Sample", "t", "test", "data", "times", "and", "times", "NUMBER", "t", "NUMBER", "df", "NUMBER", "p", "value", "NUMBER", "alternative", "hypothesis", "true", "difference", "in", "means", "be", "not", "equal", "to", "NUMBER", "NUMBER", "percent", "confidence", "interval", "NUMBER", "NUMBER", "sample", "estimates", "mean", "of", "x", "mean", "of", "y", "NUMBER", "NUMBER", "Oh", "right", "thanks", "for", "catching", "that", "NUMBER", "Update", "On", "second", "thought", "I", "m", "not", "sure", "that", "it", "makes", "sense", "to", "put", "the", "vp", "in", "the", "gtable", "see", "my", "comment", "in", "hadley", "gtable", "NUMBER", "You", "may", "implement", "the", "function", "for", "counting", "the", "elapse", "time", "and", "performing", "statistical", "test", "from", "the", "previous", "commit", "in", "your", "visual", "test", "library", "p", "You", "may", "be", "joking", "but", "that", "s", "actually", "not", "a", "bad", "idea", "NUMBER", "I", "ve", "made", "change", "so", "that", "this", "uses", "the", "latest", "version", "of", "gtable", "in", "which", "gtable", "objects", "be", "also", "grobs", "NUMBER", "I", "think", "everything", "works", "but", "some", "of", "the", "visual", "test", "be", "broken", "due", "to", "other", "bug", "so", "I", "can", "t", "check", "for", "sure", "NUMBER", "Rebased", "and", "merge", "at", "NUMBER", "b", "NUMBER", "e", "NUMBER", "fdfac", "NUMBER", "c", "NUMBER", "cc", "NUMBER", "d", "NUMBER", "a", "NUMBER", "a", "NUMBER", "bf", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "Also", "see", "the", "NUMBER", "transition", "guide", "LINK", "col", "NUMBER", "pdf", "Fixes", "NUMBER", "This", "code", "fix", "coord_distance", "NUMBER", "polar", "to", "give", "correct", "lengths", "NUMBER", "It", "could", "be", "cleaned", "up", "a", "bit", "and", "it", "could", "also", "use", "some", "test", "NUMBER", "The", "following", "code", "generates", "this", "PDF", "LINK", "NUMBER", "concentric", "circles", "df", "TAG", "NUMBER", "and", "only", "the", "first", "element", "will", "be", "use", "NUMBER", "In", "while", "rootVP", "pvp", "the", "condition", "has", "length", "NUMBER", "and", "only", "the", "first", "element", "will", "be", "use", "NUMBER", "In", "while", "rootVP", "pvp", "the", "condition", "has", "length", "NUMBER", "and", "only", "the", "first", "element", "will", "be", "use", "You", "should", "be", "able", "to", "completely", "delete", "utilities", "table", "NUMBER", "r", "and", "utilities", "table", "template", "NUMBER", "r", "hadley", "I", "was", "able", "to", "remove", "utilities", "table", "template", "NUMBER", "r", "but", "utilities", "table", "NUMBER", "r", "contains", "compute_grob_widths", "and", "heights", "which", "be", "call", "from", "facet_render", "NUMBER", "wrap", "NUMBER", "I", "didn", "t", "find", "any", "equivalent", "function", "in", "the", "gtable", "package", "NUMBER", "It", "seems", "like", "the", "fact", "we", "still", "need", "compute_grob_widths", "be", "a", "deficiency", "in", "the", "gtable", "api", "but", "I", "don", "t", "see", "an", "obvious", "easy", "way", "to", "fix", "it", "NUMBER", "Visual", "test", "results", "here", "minus", "the", "two", "broken", "test", "from", "the", "colorbar", "change", "LINK", "winston", "vtest", "gtable", "diff", "Everything", "looks", "good", "to", "me", "except", "the", "last", "test", "in", "guide", "position", "NUMBER", "The", "legend", "bounding", "boxes", "don", "t", "have", "the", "correct", "padding", "NUMBER", "The", "placement", "looks", "correct", "though", "NUMBER", "Rebased", "and", "merge", "in", "NUMBER", "f", "NUMBER", "a", "NUMBER", "d", "NUMBER", "ffae", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "beea", "NUMBER", "ca", "NUMBER", "ff", "NUMBER", "And", "could", "you", "add", "a", "bullet", "to", "NEWS", "please", "Thanks", "Actually", "do", "we", "also", "need", "a", "similar", "fix", "for", "geom_segment", "Rebased", "squashed", "add", "NEWS", "and", "merge", "in", "c", "NUMBER", "c", "NUMBER", "be", "NUMBER", "e", "NUMBER", "f", "NUMBER", "f", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "R", "This", "be", "a", "data", "set", "where", "group", "NUMBER", "has", "values", "between", "NUMBER", "and", "NUMBER", "and", "group", "NUMBER", "be", "all", "NUMBER", "set", "NUMBER", "seed", "NUMBER", "dat", "TAG", "ggplot", "data", "aes", "x", "Date", "y", "value", "geom_line", "Don", "t", "know", "how", "to", "automatically", "pick", "scale", "for", "object", "of", "type", "yearmon", "NUMBER", "Defaulting", "to", "continuous", "Error", "Discrete", "value", "supplied", "to", "continuous", "scale", "Making", "it", "work", "would", "require", "modifying", "the", "scales", "package", "to", "support", "yearmon", "objects", "NUMBER", "Since", "yearmon", "and", "yearqtr", "be", "classes", "specific", "to", "zoo", "I", "don", "t", "think", "it", "makes", "sense", "to", "make", "the", "change", "to", "ggplot", "NUMBER", "scales", "NUMBER", "A", "simple", "way", "to", "handle", "this", "case", "be", "to", "convert", "it", "back", "to", "a", "Date", "object", "R", "data", "Date", "TAG", "scale_x_continuous", "continuous_scale", "aesthetics", "c", "x", "xmin", "xmax", "xend", "xintercept", "scale_name", "position_c", "palette", "identity", "expand", "expand", "guide", "none", "Maybe", "the", "class", "could", "be", "ggproto", "It", "looks", "like", "it", "will", "be", "tedious", "to", "add", "the", "class", "ggproto", "to", "all", "the", "proto", "objects", "in", "ggplot", "NUMBER", "When", "you", "create", "a", "new", "proto", "object", "from", "a", "prototype", "it", "doesn", "t", "inherit", "the", "class", "NUMBER", "Here", "be", "something", "I", "add", "to", "aaa", "NUMBER", "r", "R", "class", "TopLevel", "TAG", "stat_bin", "Error", "in", "eval", "expr", "envir", "enclos", "argument", "be", "miss", "with", "no", "default", "geom_point", "Error", "in", "eval", "expr", "envir", "enclos", "argument", "be", "miss", "with", "no", "default", "I", "ve", "also", "tried", "copying", "the", "call", "for", "proto", "more", "closely", "in", "the", "hopes", "of", "preserving", "the", "environment", "but", "it", "still", "doesn", "t", "work", "NUMBER", "R", "ggproto", "TAG", "load_all", "Loading", "ggplot", "NUMBER", "Error", "in", "eval", "expr", "envir", "enclos", "object", "expr", "not", "find", "I", "think", "it", "may", "have", "something", "to", "do", "with", "this", "line", "proto", "but", "I", "m", "not", "sure", "R", "eval", "substitute", "eval", "quote", "expr", "Yup", "that", "looks", "like", "it", "works", "NUMBER", "Putting", "this", "off", "to", "release", "NUMBER", "when", "we", "stop", "use", "proto", "NUMBER", "Thanks", "do", "this", "pass", "all", "test", "and", "visual", "test", "Also", "it", "should", "be", "suppressed", "not", "surpressed", "NUMBER", "You", "should", "use", "the", "latest", "version", "of", "vtest", "from", "github", "NUMBER", "I", "think", "you", "should", "test", "it", "against", "ggplot", "NUMBER", "NUMBER", "but", "I", "m", "not", "NUMBER", "sure", "NUMBER", "You", "can", "also", "try", "run", "vdiffstat", "recent", "or", "vdiff_webpage", "recent", "which", "should", "compare", "it", "against", "a", "somewhat", "newer", "commit", "although", "that", "commit", "has", "the", "same", "resultset", "as", "NUMBER", "NUMBER", "kohske", "Thanks", "for", "run", "test", "NUMBER", "I", "have", "a", "question", "about", "the", "warnings", "Does", "it", "really", "need", "a", "warning", "when", "users", "do", "breaks", "NULL", "For", "positional", "scales", "x", "and", "y", "breaks", "NULL", "just", "means", "that", "nothing", "shows", "up", "on", "the", "guide", "the", "axis", "ticks", "and", "there", "s", "no", "warning", "NUMBER", "In", "other", "words", "why", "be", "it", "valid", "to", "use", "breaks", "NULL", "for", "x", "and", "y", "but", "invalid", "for", "colour", "fill", "etc", "I", "think", "it", "makes", "sense", "for", "a", "non", "positional", "guide", "to", "be", "suppressed", "when", "breaks", "NULL", "but", "I", "don", "t", "think", "a", "warning", "be", "necessary", "NUMBER", "I", "guess", "we", "can", "see", "what", "Hadley", "thinks", "NUMBER", "I", "vote", "for", "no", "warning", "NUMBER", "I", "took", "out", "the", "warnings", "and", "merge", "into", "master", "NUMBER", "e", "NUMBER", "c", "NUMBER", "f", "NUMBER", "e", "NUMBER", "f", "NUMBER", "e", "NUMBER", "c", "NUMBER", "d", "NUMBER", "ede", "NUMBER", "b", "NUMBER", "I", "made", "the", "change", "to", "my", "copy", "of", "the", "scales", "package", "NUMBER", "It", "seems", "to", "work", "except", "for", "dates", "NUMBER", "I", "get", "the", "error", "R", "d", "pretty_breaks", "as", "NUMBER", "Date", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Jan", "NUMBER", "Apr", "NUMBER", "Jul", "NUMBER", "Oct", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "d", "extended_breaks", "as", "NUMBER", "Date", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Error", "in", "Math", "NUMBER", "difftime", "NUMBER", "base", "NUMBER", "log", "not", "defined", "for", "difftime", "objects", "Here", "be", "the", "lines", "of", "code", "from", "labeling", "extend", "r", "delta", "TAG", "library", "ggplot", "NUMBER", "debug", "ggplot", "NUMBER", "locate_grid", "test", "NUMBER", "TAG", "qplot", "x", "x", "y", "y", "label", "title", "geom", "text", "data", "test", "NUMBER", "facet_grid", "gridrow", "gridcol", "debugging", "in", "locate_grid", "data", "layout", "facet", "rows", "facet", "cols", "facet", "margins", "debug", "at", "NUMBER", "ggplot", "NUMBER", "R", "facet", "locate", "NUMBER", "r", "NUMBER", "TAG", "TAG", "debug", "at", "NUMBER", "ggplot", "NUMBER", "R", "facet", "locate", "NUMBER", "r", "NUMBER", "values", "TAG", "data", "title", "x", "y", "gridrow", "gridcol", "NUMBER", "something", "NUMBER", "NUMBER", "a", "a", "Browse", "NUMBER", "llply", "data", "quoted_df", "vars", "c", "rows", "cols", "title", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "x", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "y", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "gridrow", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "gridcol", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "At", "this", "point", "things", "be", "exactly", "the", "same", "for", "me", "with", "both", "data", "frames", "except", "that", "in", "one", "data", "x", "NUMBER", "and", "in", "the", "other", "data", "x", "NUMBER", "NUMBER", "The", "llply", "returns", "the", "exact", "same", "thing", "in", "both", "cases", "NUMBER", "Also", "if", "you", "save", "the", "output", "of", "llply", "and", "then", "run", "compact", "on", "it", "it", "works", "fine", "in", "both", "cases", "Browse", "NUMBER", "z", "TAG", "compact", "z", "title", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "x", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "y", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "gridrow", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "gridcol", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "It", "s", "only", "when", "you", "run", "compact", "llply", "NUMBER", "that", "things", "go", "awry", "with", "the", "data", "where", "x", "NUMBER", "when", "x", "NUMBER", "Browse", "NUMBER", "compact", "llply", "data", "quoted_df", "vars", "c", "rows", "cols", "Error", "in", "eval", "expr", "envir", "enclos", "object", "expr", "not", "find", "when", "x", "NUMBER", "Browse", "NUMBER", "compact", "llply", "data", "quoted_df", "vars", "c", "rows", "cols", "title", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "x", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "y", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "gridrow", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "gridcol", "data", "frame", "with", "NUMBER", "columns", "and", "NUMBER", "rows", "The", "compact", "function", "be", "very", "simple", "and", "just", "relies", "on", "function", "in", "base", "R", "compact", "function", "l", "Filter", "Negate", "be", "NUMBER", "null", "l", "TAG", "This", "may", "be", "a", "bug", "in", "the", "way", "plyr", "evaluates", "things", "but", "it", "s", "also", "possible", "that", "this", "be", "a", "bug", "in", "R", "Hm", "it", "actually", "looks", "like", "even", "though", "this", "line", "sets", "values", "the", "variable", "be", "never", "use", "again", "NUMBER", "LINK", "locate", "NUMBER", "r", "L", "NUMBER", "R", "values", "TAG", "ggplot", "NUMBER", "quoted_df", "function", "data", "vars", "values", "TAG", "llply", "data", "NUMBER", "frame", "myvar", "NUMBER", "NUMBER", "test", "vars", "as", "NUMBER", "quoted", "foo", "myvar", "myvar", "foo", "NULL", "The", "issue", "has", "something", "to", "do", "with", "eval", "NUMBER", "quoted", "which", "looks", "like", "this", "eval", "NUMBER", "quoted", "function", "exprs", "envir", "NULL", "enclos", "NULL", "try", "FALSE", "if", "be", "NUMBER", "numeric", "exprs", "return", "envir", "exprs", "qenv", "TAG", "It", "uses", "lapply", "to", "call", "eval", "NUMBER", "In", "the", "call", "to", "eval", "the", "value", "of", "envir", "be", "the", "data", "that", "s", "pass", "in", "NUMBER", "It", "turns", "out", "that", "if", "you", "call", "eval", "when", "envir", "be", "set", "to", "a", "number", "it", "treats", "it", "differently", "than", "if", "it", "s", "something", "else", "it", "specifies", "the", "frame", "number", "to", "evaluate", "the", "expression", "NUMBER", "So", "I", "would", "say", "the", "bug", "be", "in", "quoted_df", "NUMBER", "It", "should", "check", "for", "the", "special", "case", "where", "data", "be", "a", "single", "integer", "and", "wrap", "it", "up", "somehow", "so", "that", "eval", "uses", "it", "as", "the", "environment", "to", "evaluate", "in", "not", "as", "the", "frame", "number", "of", "the", "environment", "to", "evaluate", "in", "NUMBER", "Thanks", "for", "the", "sleuthing", "I", "agree", "that", "that", "line", "can", "be", "eliminated", "NUMBER", "eval", "NUMBER", "quoted", "should", "probably", "do", "a", "better", "job", "of", "checking", "its", "inputs", "but", "that", "s", "another", "story", "NUMBER", "Fixed", "in", "c", "NUMBER", "be", "NUMBER", "dcbb", "NUMBER", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "add", "NUMBER", "aa", "NUMBER", "e", "NUMBER", "f", "NUMBER", "a", "NUMBER", "c", "NUMBER", "I", "ve", "also", "file", "an", "issue", "for", "plyr", "for", "eval", "NUMBER", "quoted", "hadley", "plyr", "NUMBER", "Thanks", "fix", "in", "NUMBER", "b", "NUMBER", "fb", "NUMBER", "ef", "NUMBER", "fa", "NUMBER", "dc", "NUMBER", "ed", "NUMBER", "f", "NUMBER", "c", "NUMBER", "e", "NUMBER", "a", "NUMBER", "It", "looks", "like", "the", "problem", "be", "that", "in", "coord_render_bg", "NUMBER", "map", "the", "xrange", "values", "be", "expanded", "to", "go", "outside", "the", "range", "NUMBER", "NUMBER", "NUMBER", "Browsing", "inside", "that", "function", "Browse", "NUMBER", "xrange", "NUMBER", "NUMBER", "NUMBER", "After", "they", "re", "projected", "the", "grid", "lines", "actually", "wrap", "around", "which", "be", "why", "there", "be", "the", "horizontal", "lines", "NUMBER", "I", "modify", "the", "code", "to", "draw", "semi", "transparent", "lines", "and", "it", "made", "the", "wraparound", "very", "apparent", "NUMBER", "The", "solution", "be", "to", "limit", "xrange", "and", "yrange", "to", "values", "that", "won", "t", "wrap", "around", "NUMBER", "This", "looks", "just", "like", "a", "previous", "issue", "with", "scale_shape_identity", "NUMBER", "I", "don", "t", "know", "if", "the", "solution", "change", "it", "to", "a", "continuous", "scale", "be", "the", "same", "though", "NUMBER", "linetype", "can", "take", "string", "values", "so", "it", "may", "not", "play", "well", "if", "it", "s", "change", "to", "continuous", "NUMBER", "In", "the", "meantime", "the", "proper", "solution", "be", "to", "use", "scale_linetype_identity", "which", "tells", "ggplot", "that", "the", "linetype", "values", "should", "be", "pass", "directly", "R", "ggplot", "data", "data", "NUMBER", "frame", "x", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "geom_point", "aes", "x", "y", "geom_vline", "aes", "xintercept", "c", "NUMBER", "NUMBER", "NUMBER", "linetype", "c", "NUMBER", "NUMBER", "NUMBER", "color", "grey", "scale_linetype_identity", "dlebauer", "I", "was", "referring", "to", "change", "the", "_definition_", "of", "scale_linetype", "from", "a", "discrete", "scale", "to", "a", "continuous", "scale", "as", "NUMBER", "not", "change", "the", "data", "that", "s", "pass", "in", "NUMBER", "The", "previous", "behaviour", "was", "a", "bug", "you", "shouldn", "t", "be", "able", "to", "map", "linetype", "to", "a", "continuous", "value", "NUMBER", "That", "would", "be", "analogous", "to", "qplot", "Species", "Sepal", "NUMBER", "Length", "data", "iris", "linetype", "c", "NUMBER", "NUMBER", "NUMBER", "scale_linetype_identity", "Should", "it", "be", "colourbar", "for", "spelling", "consistency", "I", "mean", "should", "it", "be", "colourbar", "in", "the", "code", "Rebased", "edit", "and", "merge", "in", "NUMBER", "c", "NUMBER", "b", "NUMBER", "ac", "NUMBER", "f", "NUMBER", "b", "NUMBER", "dac", "NUMBER", "d", "NUMBER", "e", "NUMBER", "da", "NUMBER", "fd", "NUMBER", "be", "NUMBER", "It", "would", "be", "handy", "to", "be", "able", "to", "set", "just", "the", "lower", "or", "upper", "limit", "of", "a", "scale", "NUMBER", "For", "example", "when", "make", "a", "line", "graph", "you", "might", "just", "want", "to", "set", "the", "lower", "y", "limit", "to", "NUMBER", "but", "let", "ggplot", "automatically", "calculate", "the", "upper", "bound", "NUMBER", "R", "Lower", "y", "value", "on", "plot", "be", "NUMBER", "ggplot", "BOD", "aes", "Time", "demand", "geom_line", "Something", "like", "this", "would", "be", "useful", "ggplot", "BOD", "aes", "Time", "demand", "geom_line", "ylim", "NUMBER", "NULL", "I", "think", "having", "unit", "test", "be", "an", "excellent", "idea", "NUMBER", "Visual", "test", "would", "also", "be", "useful", "NUMBER", "In", "order", "to", "keep", "the", "number", "of", "visual", "test", "small", "and", "therefore", "fast", "I", "think", "it", "would", "be", "good", "to", "exercise", "multiple", "things", "in", "one", "graph", "for", "example", "in", "one", "visual", "test", "do", "something", "to", "the", "x", "scale", "and", "do", "something", "different", "to", "the", "y", "scale", "NUMBER", "I", "m", "add", "some", "more", "test", "NUMBER", "Can", "you", "explain", "what", "the", "difference", "be", "between", "major", "and", "major_source", "and", "the", "same", "for", "minor", "and", "minor_source", "This", "will", "help", "me", "write", "better", "test", "NUMBER", "Edit", "Is", "major_source", "in", "the", "data", "space", "and", "major", "in", "the", "panel", "s", "native", "coordinates", "ranging", "from", "NUMBER", "to", "NUMBER", "I", "squashed", "the", "commit", "into", "NUMBER", "e", "NUMBER", "eaea", "NUMBER", "f", "NUMBER", "db", "NUMBER", "f", "NUMBER", "add", "some", "test", "and", "merge", "in", "NUMBER", "f", "NUMBER", "cbec", "NUMBER", "b", "NUMBER", "fa", "NUMBER", "de", "NUMBER", "a", "NUMBER", "de", "NUMBER", "b", "NUMBER", "My", "feeling", "be", "that", "it", "s", "harder", "to", "visually", "match", "up", "colors", "on", "a", "continuous", "color", "legend", "NUMBER", "Perhaps", "this", "be", "something", "that", "deserves", "empirical", "study", "e", "NUMBER", "g", "NUMBER", "see", "how", "accurately", "and", "quickly", "people", "can", "interpret", "graphs", "with", "with", "continuous", "vs", "NUMBER", "discrete", "guide", "NUMBER", "When", "there", "s", "a", "continuous", "colorbar", "I", "find", "my", "eyes", "going", "back", "and", "forth", "between", "the", "legend", "and", "the", "data", "a", "lot", "and", "without", "any", "practical", "gain", "in", "interpreting", "the", "data", "NUMBER", "For", "example", "compare", "these", "ggplot", "mtcars", "aes", "wt", "mpg", "colour", "disp", "geom_point", "size", "NUMBER", "ggplot", "mtcars", "aes", "wt", "mpg", "colour", "disp", "geom_point", "size", "NUMBER", "guide", "colour", "colourbar", "Here", "s", "what", "it", "feels", "like", "I", "m", "doing", "With", "the", "discrete", "legend", "I", "can", "look", "at", "a", "point", "then", "at", "the", "legend", "at", "the", "point", "and", "then", "at", "the", "legend", "again", "NUMBER", "Then", "I", "can", "say", "that", "point", "be", "around", "NUMBER", "or", "so", "maybe", "in", "the", "direction", "of", "NUMBER", "With", "the", "colorbar", "I", "look", "back", "and", "forth", "between", "the", "points", "and", "legend", "many", "more", "times", "trying", "to", "find", "the", "exact", "point", "on", "the", "bar", "that", "matches", "the", "color", "of", "a", "point", "NUMBER", "But", "in", "the", "end", "my", "interpretation", "of", "the", "values", "feels", "no", "more", "accurate", "than", "before", "NUMBER", "I", "think", "the", "gradient", "makes", "it", "difficult", "to", "accurately", "perceive", "a", "horizontal", "line", "of", "color", "on", "the", "legend", "the", "neighboring", "colors", "interfere", "with", "the", "perception", "of", "each", "line", "NUMBER", "Of", "course", "it", "would", "be", "nice", "to", "have", "data", "on", "this", "stuff", "NUMBER", "Semi", "unrelated", "issue", "I", "notice", "that", "the", "discrete", "legend", "has", "the", "larger", "values", "on", "top", "while", "the", "continuous", "legend", "has", "smaller", "values", "on", "top", "NUMBER", "Is", "this", "difference", "intended", "I", "think", "the", "equal", "option", "for", "equal", "area", "should", "stay", "the", "same", "NUMBER", "And", "width", "should", "change", "to", "equalwidth", "NUMBER", "This", "will", "maintain", "compatibility", "with", "previous", "version", "and", "since", "equalwidth", "will", "probably", "not", "be", "commonly", "use", "I", "think", "it", "s", "OK", "for", "it", "to", "get", "the", "more", "verbose", "name", "NUMBER", "I", "really", "don", "t", "like", "that", "usage", "of", "match", "NUMBER", "args", "I", "think", "it", "s", "better", "to", "not", "rely", "on", "special", "evaluation", "tricks", "and", "just", "give", "match", "NUMBER", "args", "all", "the", "argument", "it", "needs", "NUMBER", "Rebased", "onto", "master", "and", "merge", "at", "aa", "NUMBER", "e", "NUMBER", "f", "NUMBER", "bec", "NUMBER", "e", "NUMBER", "f", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "b", "NUMBER", "ad", "NUMBER", "This", "was", "broken", "by", "NUMBER", "da", "NUMBER", "a", "NUMBER", "a", "NUMBER", "ec", "NUMBER", "c", "NUMBER", "e", "NUMBER", "b", "NUMBER", "c", "NUMBER", "d", "NUMBER", "Bisect", "script", "here", "LINK", "In", "scale", "NUMBER", "r", "the", "function", "scale_breaks", "NUMBER", "continuous", "calls", "zero_range", "from", "scales", "which", "be", "defined", "as", "R", "function", "x", "length", "x", "NUMBER", "isTRUE", "all", "NUMBER", "equal", "x", "NUMBER", "x", "NUMBER", "NUMBER", "The", "default", "tolerance", "for", "all", "NUMBER", "equal", "be", "NUMBER", "Machine", "double", "NUMBER", "eps", "NUMBER", "NUMBER", "According", "to", "NUMBER", "Machine", "double", "NUMBER", "eps", "be", "the", "smallest", "positive", "floating", "point", "number", "x", "such", "that", "NUMBER", "x", "NUMBER", "NUMBER", "In", "general", "I", "think", "scale_breaks", "NUMBER", "continuous", "needs", "a", "better", "way", "of", "figuring", "out", "whether", "a", "non", "zero", "range", "be", "intended", "or", "due", "to", "floating", "point", "error", "NUMBER", "I", "m", "not", "sure", "this", "be", "possible", "though", "NUMBER", "The", "problem", "be", "that", "you", "re", "use", "scale_date", "with", "POSIXct", "values", "it", "expects", "dates", "NUMBER", "I", "think", "the", "solution", "be", "that", "somewhere", "in", "scale_x_datetime", "a", "warning", "needs", "to", "be", "raise", "if", "you", "re", "use", "the", "wrong", "type", "of", "data", "NUMBER", "Probably", "the", "best", "place", "be", "in", "to_time", "and", "to_date", "This", "be", "happening", "because", "each", "group", "of", "the", "data", "be", "binned", "separately", "and", "for", "each", "group", "the", "bins", "be", "centered", "based", "on", "the", "data", "NUMBER", "A", "workaround", "be", "to", "specify", "the", "origin", "R", "ggplot", "data", "temp", "aes", "x", "y", "z", "z", "colour", "f", "stat_summary", "NUMBER", "d", "origin", "c", "min", "temp", "x", "min", "temp", "y", "Note", "that", "the", "outlines", "overlap", "and", "so", "it", "may", "look", "a", "little", "strange", "NUMBER", "Probably", "the", "mailing", "list", "be", "a", "better", "place", "to", "discuss", "this", "but", "it", "s", "OK", "here", "since", "this", "start", "out", "as", "a", "bug", "report", "NUMBER", "One", "way", "be", "to", "re", "order", "the", "factor", "levels", "R", "temp", "f", "TAG", "NUMBER", "sample", "NUMBER", "NUMBER", "d", "TAG", "stat_density", "NUMBER", "d", "aes", "x", "y", "fill", "NUMBER", "density", "NUMBER", "h", "NUMBER", "geom", "raster", "contour", "F", "mapping", "x", "x", "y", "y", "fill", "NUMBER", "density", "NUMBER", "geom_raster", "hjust", "NUMBER", "stat_density", "NUMBER", "d", "na", "NUMBER", "rm", "FALSE", "contour", "FALSE", "n", "NUMBER", "position_identity", "width", "NULL", "height", "NULL", "where", "you", "can", "see", "h", "NUMBER", "has", "be", "caught", "by", "the", "hjust", "parameter", "NUMBER", "You", "can", "work", "around", "this", "by", "manually", "specify", "geom", "and", "stat", "params", "R", "stat_density", "NUMBER", "d", "aes", "x", "y", "fill", "NUMBER", "density", "NUMBER", "geom", "raster", "stat_params", "list", "h", "NUMBER", "contour", "F", "geom_params", "list", "mapping", "x", "x", "y", "y", "fill", "NUMBER", "density", "NUMBER", "geom_raster", "stat_density", "NUMBER", "d", "h", "NUMBER", "contour", "FALSE", "position_identity", "width", "NULL", "height", "NULL", "Unfortunately", "you", "have", "to", "set", "geom_params", "to", "an", "empty", "list", "because", "of", "a", "bug", "NUMBER", "Thanks", "In", "GeomPoint", "draw", "it", "uses", "pointsGrob", "with", "the", "following", "R", "gp", "gpar", "col", "alpha", "colour", "alpha", "fill", "alpha", "fill", "alpha", "fontsize", "size", "NUMBER", "pt", "It", "looks", "like", "this", "problem", "be", "happening", "because", "the", "alpha", "function", "behaves", "slightly", "differently", "now", "NUMBER", "Previously", "the", "alpha", "function", "was", "in", "ggplot", "NUMBER", "and", "now", "it", "s", "in", "the", "scales", "package", "NUMBER", "It", "looks", "like", "this", "commit", "change", "how", "it", "handles", "the", "fourth", "alpha", "byte", "of", "a", "color", "hadley", "scales", "e", "NUMBER", "a", "NUMBER", "b", "NUMBER", "d", "NUMBER", "f", "NUMBER", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "fa", "NUMBER", "af", "NUMBER", "fa", "NUMBER", "In", "the", "old", "NUMBER", "version", "if", "the", "color", "be", "specified", "as", "RGB", "then", "it", "uses", "the", "alpha", "argument", "to", "set", "the", "A", "value", "NUMBER", "But", "if", "the", "color", "be", "specifed", "as", "RGBA", "then", "it", "ignores", "the", "alpha", "arg", "R", "alpha", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "alpha", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "FF", "alpha", "NUMBER", "aa", "NUMBER", "NUMBER", "NUMBER", "AA", "alpha", "NUMBER", "aa", "NUMBER", "NUMBER", "NUMBER", "AA", "In", "the", "current", "version", "with", "alpha", "from", "scales", "it", "always", "ignores", "the", "fourth", "A", "byte", "and", "only", "uses", "the", "alpha", "argument", "R", "alpha", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "alpha", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "FF", "alpha", "NUMBER", "aa", "NUMBER", "NUMBER", "NUMBER", "alpha", "NUMBER", "aa", "NUMBER", "NUMBER", "NUMBER", "FF", "If", "this", "be", "to", "be", "change", "the", "question", "be", "how", "_should_", "the", "alpha", "function", "behave", "what", "should", "happen", "when", "the", "color", "be", "RGBA", "and", "a", "value", "be", "given", "for", "alpha", "This", "be", "probably", "relate", "to", "NUMBER", "I", "think", "the", "idea", "of", "giving", "a", "warning", "be", "good", "but", "one", "difficulty", "be", "detecting", "when", "this", "happens", "NUMBER", "If", "you", "_don", "t_", "set", "the", "value", "of", "alpha", "then", "somewhere", "along", "the", "line", "ggplot", "sets", "alpha", "NUMBER", "NUMBER", "By", "the", "time", "it", "gets", "to", "the", "part", "where", "alpha", "be", "call", "it", "can", "t", "distinguish", "between", "cases", "where", "alpha", "was", "not", "set", "vs", "NUMBER", "alpha", "was", "set", "to", "NUMBER", "I", "think", "the", "best", "way", "to", "fix", "this", "be", "to", "default", "alpha", "to", "NA", "and", "then", "modify", "alpha", "to", "not", "overwrite", "alpha", "when", "it", "s", "miss", "NUMBER", "This", "fix", "NUMBER", "in", "which", "NA", "s", "show", "up", "in", "the", "theta", "breaks", "when", "use", "coord_polar", "NUMBER", "I", "modify", "coord_train", "NUMBER", "polar", "to", "do", "something", "similar", "to", "what", "coord_train", "NUMBER", "cartesian", "do", "by", "calling", "train_cartesian", "NUMBER", "See", "line", "NUMBER", "of", "coord", "cartesian", "NUMBER", "r", "LINK", "cartesian", "NUMBER", "r", "NUMBER", "Now", "coord_train", "NUMBER", "polar", "remove", "NA", "s", "that", "be", "returned", "from", "scale_breaks", "NUMBER", "This", "pass", "the", "test", "and", "visual", "test", "results", "be", "unchanged", "NUMBER", "I", "also", "fix", "coord_train", "NUMBER", "trans", "which", "also", "returned", "NA", "s", "and", "I", "add", "test", "NUMBER", "The", "test", "also", "helped", "me", "find", "a", "different", "bug", "in", "coord_train", "NUMBER", "map", "which", "I", "fix", "f", "NUMBER", "d", "NUMBER", "c", "NUMBER", "edc", "NUMBER", "d", "NUMBER", "ea", "NUMBER", "beab", "NUMBER", "c", "NUMBER", "e", "NUMBER", "and", "push", "to", "master", "NUMBER", "We", "probably", "should", "figure", "out", "why", "they", "be", "returning", "NAs", "in", "the", "first", "place", "Can", "you", "file", "a", "bug", "on", "the", "scales", "repo", "I", "think", "it", "s", "needed", "for", "matching", "labels", "to", "values", "or", "something", "like", "that", "NUMBER", "In", "an", "earlier", "attempt", "to", "fix", "it", "I", "change", "some", "code", "to", "remove", "the", "NAs", "earlier", "in", "the", "pipeline", "maybe", "in", "scale_breaks", "and", "it", "fail", "some", "test", "that", "expected", "the", "NAs", "to", "be", "there", "NUMBER", "I", "think", "it", "fail", "the", "the", "first", "test", "here", "when", "I", "modify", "scale_breaks", "to", "not", "return", "NAs", "LINK", "scales", "breaks", "labels", "NUMBER", "r", "Hmmm", "that", "s", "vaguely", "come", "back", "to", "me", "NUMBER", "We", "may", "need", "to", "re", "look", "at", "the", "entire", "dimensions", "breaks", "labels", "process", "in", "more", "depth", "but", "maybe", "in", "the", "future", "IIRC", "at", "some", "time", "after", "NUMBER", "scale_breaks", "be", "change", "to", "set", "NA", "for", "out", "of", "range", "value", "NUMBER", "This", "be", "work", "well", "with", "non", "positional", "scales", "since", "there", "be", "no", "mapping", "between", "oob", "value", "and", "aes", "NUMBER", "But", "now", "I", "think", "positional", "scales", "should", "extend", "the", "breaks", "out", "of", "range", "if", "possible", "e", "NUMBER", "g", "NUMBER", "linear", "scale", "NUMBER", "The", "change", "have", "be", "rebased", "onto", "master", "NUMBER", "This", "fix", "NUMBER", "When", "use", "bars", "with", "width", "TAG", "Change", "the", "expand_defaults", "stuff", "into", "a", "panel", "function", "Figure", "out", "at", "what", "stage", "of", "ggplot_build", "the", "expansion", "should", "happen", "NUMBER", "Please", "see", "my", "commit", "NUMBER", "The", "expand_default", "be", "in", "coord", "function", "NUMBER", "I", "think", "this", "be", "reasonable", "NUMBER", "Now", "I", "m", "come", "to", "think", "scale", "may", "not", "have", "expand", "NUMBER", "In", "the", "update", "code", "coord", "has", "a", "responsibility", "for", "expansion", "NUMBER", "If", "this", "be", "okey", "I", "have", "no", "idea", "where", "the", "expand", "of", "scale", "be", "required", "NUMBER", "Functions", "like", "position_jitter", "should", "be", "able", "accept", "a", "random", "seed", "so", "that", "the", "results", "be", "reproducible", "NUMBER", "This", "would", "also", "make", "it", "possible", "to", "jitter", "two", "separate", "layers", "in", "exactly", "the", "same", "way", "which", "would", "be", "useful", "when", "for", "example", "plotting", "points", "with", "labels", "NUMBER", "Maybe", "it", "should", "also", "be", "possible", "to", "pass", "a", "random", "seed", "to", "ggplot", "so", "that", "all", "randomness", "within", "a", "plot", "be", "reproducible", "Hmmm", "I", "m", "not", "really", "sure", "I", "see", "the", "point", "of", "this", "you", "can", "already", "set", "a", "seed", "outside", "of", "ggplot", "NUMBER", "and", "if", "you", "want", "to", "reuse", "jitter", "across", "multiple", "layers", "just", "generate", "the", "randomness", "yourself", "NUMBER", "I", "spoke", "with", "someone", "today", "wanted", "this", "feature", "he", "point", "out", "that", "jittering", "it", "manually", "doesn", "t", "work", "when", "one", "of", "the", "axes", "be", "a", "factor", "NUMBER", "Here", "s", "an", "example", "he", "gave", "me", "where", "he", "wanted", "to", "align", "points", "and", "lines", "with", "jitter", "LINK", "I", "worked", "around", "it", "by", "converting", "x", "which", "be", "a", "factor", "to", "numeric", "but", "that", "s", "not", "a", "good", "general", "solution", "NUMBER", "This", "be", "a", "follow", "up", "to", "the", "discussion", "in", "NUMBER", "Even", "though", "the", "bug", "there", "was", "fix", "there", "be", "still", "a", "problem", "of", "not", "enough", "segment", "resolution", "near", "the", "center", "NUMBER", "In", "this", "example", "there", "aren", "t", "enough", "segments", "near", "the", "center", "so", "the", "smallest", "circles", "be", "drawn", "as", "triangles", "or", "even", "line", "segments", "NUMBER", "R", "df", "TAG", "What", "happens", "if", "you", "use", "list", "instead", "of", "aes", "Error", "as", "followings", "p", "TAG", "for", "i", "in", "NUMBER", "NUMBER", "p", "i", "TAG", "breaks", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "debug", "at", "ggplot", "NUMBER", "R", "scale", "NUMBER", "r", "NUMBER", "breaks", "TAG", "n", "Browse", "NUMBER", "breaks", "NUMBER", "NA", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "tried", "replacing", "censor", "with", "discard", "but", "that", "causes", "some", "test", "to", "fail", "it", "looks", "like", "the", "NA", "be", "expected", "from", "scale_breaks", "NUMBER", "Actually", "I", "think", "the", "problem", "was", "that", "in", "range", "there", "was", "theta", "NUMBER", "range", "and", "r", "NUMBER", "range", "but", "no", "x", "NUMBER", "range", "or", "y", "NUMBER", "range", "NUMBER", "Well", "anything", "that", "has", "a", "baseline", "of", "NUMBER", "be", "going", "to", "have", "problem", "with", "log", "transforms", "NUMBER", "I", "think", "I", "re", "submitted", "the", "same", "issue", "in", "NUMBER", "so", "I", "m", "closing", "this", "one", "NUMBER", "wch", "Could", "you", "please", "add", "a", "note", "to", "NEWS", "and", "then", "merge", "Thanks", "Unfortunately", "this", "be", "outside", "the", "scope", "of", "ggplot", "NUMBER", "so", "there", "s", "not", "much", "I", "can", "do", "to", "fix", "it", "NUMBER", "I", "d", "also", "like", "to", "explore", "use", "the", "labelling", "LINK", "project", "NUMBER", "org", "web", "package", "labeling", "index", "NUMBER", "html", "package", "for", "this", "NUMBER", "And", "probably", "the", "breaks", "should", "be", "computed", "on", "the", "range", "from", "scale_dimension", "not", "scale_limits", "Fixed", "in", "NUMBER", "Could", "you", "provide", "an", "example", "use", "case", "But", "they", "do", "get", "a", "different", "colour", "NUMBER", "I", "think", "the", "best", "resolution", "for", "this", "would", "be", "for", "the", "legend", "to", "display", "an", "entry", "for", "NA", "when", "there", "be", "any", "on", "the", "graph", "the", "default", "colours", "might", "make", "it", "difficult", "to", "distinguish", "the", "miss", "value", "from", "other", "values", "but", "at", "least", "you", "d", "know", "it", "was", "there", "and", "could", "remedy", "the", "problem", "NUMBER", "The", "challenge", "as", "kohske", "mention", "be", "that", "there", "be", "two", "meanings", "for", "NA", "an", "explicit", "NA", "from", "the", "original", "data", "which", "we", "want", "to", "preserve", "or", "a", "NA", "introduce", "because", "the", "value", "be", "outside", "the", "range", "of", "the", "scale", "we", "don", "t", "want", "to", "show", "that", "on", "the", "plot", "but", "it", "should", "trigger", "an", "error", "message", "NUMBER", "One", "option", "which", "be", "not", "particularly", "elegant", "would", "be", "to", "use", "NA", "and", "NaN", "to", "distinguish", "between", "the", "two", "state", "NUMBER", "Otherwise", "I", "could", "try", "creating", "a", "new", "vector", "type", "that", "could", "have", "multiple", "types", "of", "miss", "values", "a", "hybrid", "continuous", "discrete", "variable", "NUMBER", "Could", "you", "please", "also", "provide", "a", "non", "visual", "test", "Oh", "sorry", "I", "forgot", "about", "that", "NUMBER", "I", "think", "in", "the", "next", "version", "NUMBER", "it", "will", "be", "easier", "to", "do", "these", "test", "NUMBER", "For", "the", "discrete", "case", "I", "m", "not", "sure", "if", "it", "s", "possible", "to", "fix", "this", "behaviour", "with", "out", "breaking", "other", "desirable", "behaviour", "scale_discrete", "also", "has", "to", "deal", "with", "continuous", "values", "so", "that", "e", "NUMBER", "g", "NUMBER", "geom_jitter", "works", "if", "you", "have", "categorical", "x", "s", "NUMBER", "Here", "s", "an", "outline", "of", "a", "solution", "to", "the", "other", "problem", "R", "to_time", "NUMBER", "TAG", "x", "NUMBER", "range", "and", "x", "NUMBER", "range", "x", "NUMBER", "proj", "Looking", "at", "the", "code", "I", "have", "no", "idea", "what", "I", "was", "thinking", "and", "I", "have", "no", "idea", "why", "I", "thought", "it", "would", "work", "NUMBER", "But", "I", "ve", "figured", "out", "a", "much", "better", "strategy", "that", "seems", "to", "work", "reliably", "NUMBER", "Yes", "basically", "geom_abline", "geom_vline", "and", "geom_hline", "don", "t", "work", "properly", "except", "for", "coord_cartesian", "I", "think", "the", "basic", "problem", "be", "we", "don", "t", "have", "a", "standard", "way", "of", "referring", "to", "the", "maximal", "extent", "of", "the", "coordinate", "system", "NUMBER", "If", "we", "did", "I", "think", "it", "might", "be", "possible", "to", "use", "that", "information", "in", "the", "coordinate", "munching", "process", "and", "then", "geom_vline", "etc", "would", "just", "become", "special", "cases", "of", "geom_line", "NUMBER", "But", "I", "ve", "never", "be", "able", "to", "quite", "figure", "it", "out", "NUMBER", "Geom_vline", "hline", "and", "abline", "be", "definitely", "one", "of", "the", "trickiest", "components", "of", "ggplot", "NUMBER", "They", "also", "work", "a", "bit", "confusingly", "because", "if", "you", "supply", "the", "argument", "in", "a", "certain", "way", "you", "get", "something", "that", "behaves", "more", "like", "an", "annotation", "than", "a", "geom", "I", "would", "rather", "not", "special", "case", "these", "function", "but", "instead", "figure", "out", "how", "to", "do", "it", "in", "general", "NUMBER", "geom_abline", "isn", "t", "very", "useful", "for", "polar", "coordinates", "but", "geom_vline", "and", "geom_hline", "be", "NUMBER", "But", "I", "think", "coordinate", "objects", "should", "largely", "be", "opaque", "they", "should", "just", "provide", "methods", "to", "do", "what", "you", "want", "NUMBER", "What", "information", "do", "you", "need", "to", "know", "how", "to", "do", "it", "generally", "I", "d", "think", "about", "flip", "polar", "and", "map", "if", "you", "can", "get", "it", "work", "for", "those", "three", "then", "the", "rest", "should", "be", "easy", "NUMBER", "And", "you", "think", "that", "s", "sufficient", "information", "That", "seems", "like", "a", "really", "easy", "solution", "and", "it", "seems", "like", "that", "might", "lead", "to", "a", "natural", "way", "of", "incorporating", "non", "cartesian", "coordinates", "into", "facets", "with", "varying", "scales", "NUMBER", "Fixed", "in", "NUMBER", "d", "NUMBER", "cd", "NUMBER", "f", "NUMBER", "d", "NUMBER", "aedf", "NUMBER", "a", "NUMBER", "f", "NUMBER", "b", "NUMBER", "a", "Unfortunately", "because", "of", "the", "way", "that", "grid", "and", "ggplot", "NUMBER", "interact", "there", "be", "no", "way", "to", "fix", "this", "in", "general", "NUMBER", "But", "geom_dotplot", "should", "at", "least", "give", "an", "informative", "message", "NUMBER", "For", "a", "coordinate", "system", "in", "general", "I", "m", "pretty", "sure", "you", "can", "t", "do", "it", "NUMBER", "You", "might", "be", "able", "to", "special", "case", "it", "but", "I", "don", "t", "think", "that", "s", "a", "terribly", "useful", "use", "of", "anyone", "s", "time", "NUMBER", "I", "think", "this", "type", "of", "display", "also", "points", "to", "some", "of", "the", "limitations", "of", "the", "grammar", "geoms", "stats", "and", "coords", "aren", "t", "really", "completely", "independent", "NUMBER", "No", "it", "s", "impossible", "because", "of", "the", "way", "that", "facet", "data", "be", "constructed", "NUMBER", "And", "if", "I", "could", "easily", "make", "geom_point", "aes", "d", "x", "an", "error", "I", "would", "it", "s", "just", "not", "how", "ggplot", "NUMBER", "works", "NUMBER", "Yes", "scalars", "and", "function", "from", "outside", "ggplot", "NUMBER", "but", "not", "vectors", "NUMBER", "Otherwise", "it", "gets", "too", "confusing", "too", "fast", "data", "frames", "be", "where", "data", "should", "live", "and", "they", "ensure", "that", "your", "variables", "be", "aligned", "correctly", "NUMBER", "Well", "that", "s", "one", "of", "the", "reasons", "I", "m", "not", "sure", "I", "want", "to", "forbid", "it", "but", "it", "be", "definitely", "quick", "and", "dirty", "and", "if", "m", "fitted", "NUMBER", "values", "isn", "t", "the", "correct", "length", "it", "may", "silently", "produce", "an", "incorrect", "plot", "NUMBER", "This", "always", "confuses", "me", "if", "your", "data", "be", "c", "NUMBER", "NUMBER", "NUMBER", "you", "don", "t", "expect", "the", "numbers", "to", "be", "ordered", "differently", "NUMBER", "I", "think", "it", "s", "better", "for", "people", "to", "learn", "how", "factors", "work", "in", "R", "than", "for", "ggplot", "NUMBER", "to", "do", "something", "magical", "NUMBER", "I", "suspect", "if", "I", "did", "make", "the", "change", "there", "would", "be", "just", "as", "many", "if", "not", "more", "people", "complaining", "that", "ggplot", "NUMBER", "no", "longer", "ordered", "character", "variables", "alphabetically", "NUMBER", "While", "I", "can", "see", "your", "point", "I", "really", "think", "that", "would", "be", "counter", "intuitive", "behaviour", "NUMBER", "Some", "things", "be", "confusing", "because", "you", "need", "to", "learn", "a", "bit", "more", "about", "how", "R", "works", "NUMBER", "It", "s", "more", "effort", "now", "but", "pays", "off", "in", "the", "future", "NUMBER", "And", "could", "you", "please", "not", "check", "in", "the", "NAMESPACE", "file", "Because", "of", "a", "buglet", "in", "roxygen", "it", "will", "conflict", "with", "my", "version", "NUMBER", "Done", "in", "NUMBER", "a", "NUMBER", "d", "NUMBER", "b", "NUMBER", "b", "NUMBER", "a", "NUMBER", "bb", "NUMBER", "fdd", "NUMBER", "b", "NUMBER", "f", "NUMBER", "In", "the", "devel", "version", "which", "be", "waiting", "on", "cran", "to", "be", "release", "this", "first", "block", "gives", "Error", "A", "continuous", "variable", "can", "not", "be", "mapped", "to", "shape", "Ok", "perfect", "NUMBER", "I", "think", "the", "correct", "fix", "be", "to", "force", "x", "NUMBER", "Fixed", "in", "scales", "NUMBER", "I", "don", "t", "think", "this", "be", "possible", "with", "grid", "NUMBER", "raster", "NUMBER", "How", "did", "you", "imagine", "it", "be", "use", "I", "turned", "pad", "to", "just", "in", "NUMBER", "c", "NUMBER", "ed", "NUMBER", "f", "NUMBER", "a", "NUMBER", "acaa", "NUMBER", "a", "NUMBER", "d", "NUMBER", "ded", "NUMBER", "f", "NUMBER", "ed", "NUMBER", "Looks", "good", "See", "also", "missing_s", "NUMBER", "in", "the", "development", "devtools", "for", "an", "attempt", "to", "pick", "this", "up", "automatically", "NUMBER", "Looks", "good", "NUMBER", "Thanks", "It", "doesn", "t", "look", "like", "it", "can", "be", "automatically", "merge", "could", "you", "please", "have", "a", "look", "into", "why", "kohske", "Could", "you", "flag", "that", "with", "a", "TODO", "or", "file", "another", "bug", "so", "we", "remember", "to", "fix", "it", "once", "gtable", "gets", "z", "ordering", "Then", "I", "can", "pull", "the", "request", "NUMBER", "Oh", "I", "guess", "I", "just", "mean", "todo", "Is", "this", "different", "to", "NUMBER", "It", "looks", "the", "same", "to", "me", "NUMBER", "Answers", "to", "question", "NUMBER", "maybe", "close", "and", "filled", "NUMBER", "Off", "the", "top", "of", "my", "head", "I", "don", "t", "know", "of", "any", "modelling", "function", "that", "model", "the", "median", "apart", "from", "quantreg", "which", "be", "dealt", "with", "in", "geom_quantile", "We", "need", "to", "get", "you", "set", "up", "with", "a", "workflow", "that", "works", "regardless", "of", "what", "I", "m", "doing", "NUMBER", "I", "think", "if", "you", "do", "separate", "branch", "you", "should", "be", "ok", "NUMBER", "I", "ve", "close", "NUMBER", "since", "it", "was", "duplicate", "of", "this", "NUMBER", "Closing", "b", "c", "of", "new", "pull", "request", "NUMBER", "Looks", "good", "NUMBER", "Could", "you", "please", "also", "a", "bullet", "point", "to", "the", "news", "file", "Including", "crediting", "yourself", "Looks", "great", "thanks", "Dennis", "Will", "probably", "be", "a", "few", "days", "until", "I", "merge", "it", "ggplot", "NUMBER", "has", "be", "submitted", "to", "CRAN", "and", "if", "something", "goes", "wrong", "with", "that", "I", "don", "t", "want", "to", "get", "confused", "about", "which", "change", "be", "where", "NUMBER", "Assuming", "that", "my", "latest", "install", "from", "Github", "be", "the", "current", "state", "of", "the", "package", "I", "ll", "make", "separate", "branch", "for", "the", "geom", "scale", "and", "stat", "help", "pages", "and", "put", "whatever", "corrections", "amendments", "in", "the", "appropriate", "branch", "NUMBER", "When", "the", "CRAN", "version", "comes", "out", "I", "can", "double", "check", "against", "those", "commit", "and", "push", "NUMBER", "In", "the", "meantime", "I", "can", "start", "work", "on", "the", "scales", "doc", "and", "ggplot", "NUMBER", "transition", "doc", "NUMBER", "Sounds", "good", "NUMBER", "But", "don", "t", "worry", "about", "the", "CRAN", "release", "just", "make", "sure", "you", "re", "always", "make", "change", "against", "the", "master", "branch", "and", "you", "ll", "always", "be", "ok", "NUMBER", "Hadley", "Assistant", "Professor", "Dobelman", "Family", "Junior", "Chair", "Department", "of", "Statistics", "Rice", "University", "LINK", "Looks", "like", "this", "get", "include", "in", "NUMBER", "so", "I", "m", "going", "to", "close", "it", "for", "now", "NUMBER", "Did", "this", "use", "to", "work", "Is", "this", "a", "duplicate", "of", "NUMBER", "Taking", "a", "quick", "look", "at", "the", "code", "I", "think", "it", "be", "relate", "to", "NUMBER", "but", "not", "I", "m", "completely", "sure", "if", "it", "s", "the", "same", "or", "not", "NUMBER", "Somewhere", "the", "layer", "data", "be", "get", "drop", "completely", "and", "only", "the", "plot", "data", "use", "which", "do", "not", "contain", "x", "and", "y", "variables", "NUMBER", "Closing", "since", "the", "new", "pulls", "be", "better", "Thanks", "Dennis", "NUMBER", "I", "didn", "t", "end", "up", "use", "the", "pull", "request", "directly", "but", "your", "change", "were", "very", "helpful", "and", "have", "now", "be", "incorporated", "NUMBER", "Thanks", "I", "like", "this", "idea", "lets", "put", "it", "in", "NUMBER", "when", "hopefully", "gtable", "will", "be", "its", "own", "package", "Hadley", "On", "Sun", "Dec", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "kohske", "takahashi", "reply", "reply", "NUMBER", "github", "NUMBER", "com", "write", "Here", "be", "an", "initial", "implementation", "NUMBER", "LINK", "layout", "Two", "way", "of", "combining", "NUMBER", "Size", "sensitive", "combining", "arrange", "plots", "with", "panel", "size", "adjustment", "NUMBER", "Currently", "use", "S", "NUMBER", "of", "cbind", "and", "rbind", "NUMBER", "NUMBER", "Simple", "layout", "like", "grid", "NUMBER", "arrange", "in", "gridExtra", "NUMBER", "Not", "implement", "yet", "NUMBER", "Any", "idea", "and", "suggestions", "be", "welcome", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "Assistant", "Professor", "Dobelman", "Family", "Junior", "Chair", "Department", "of", "Statistics", "Rice", "University", "LINK", "Moving", "to", "NUMBER", "since", "I", "m", "now", "reserving", "NUMBER", "for", "bug", "fix", "and", "v", "NUMBER", "small", "features", "NUMBER", "I", "now", "wonder", "if", "this", "shouldn", "t", "be", "in", "it", "s", "own", "package", "NUMBER", "Fixed", "in", "NUMBER", "cb", "NUMBER", "ed", "NUMBER", "c", "NUMBER", "a", "NUMBER", "abf", "NUMBER", "a", "NUMBER", "d", "NUMBER", "f", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "See", "LINK", "for", "package", "NUMBER", "A", "good", "place", "to", "start", "would", "be", "to", "make", "sure", "that", "gtable", "pass", "R", "CMD", "check", "and", "then", "add", "gtable", "to", "the", "imports", "and", "remove", "all", "exist", "gtable", "code", "NUMBER", "If", "you", "want", "to", "go", "further", "you", "could", "suggest", "improvement", "to", "the", "gtable", "api", "by", "inspecting", "what", "gets", "do", "in", "the", "facetting", "function", "to", "assemble", "the", "whole", "plot", "together", "NUMBER", "Not", "yet", "NUMBER", "Once", "the", "theme", "change", "get", "merge", "probably", "in", "the", "next", "two", "days", "I", "m", "going", "to", "start", "on", "this", "NUMBER", "I", "don", "t", "know", "yet", "what", "I", "m", "going", "to", "do", "with", "it", "I", "don", "t", "yet", "know", "enough", "about", "gtable", "to", "know", "what", "I", "ll", "do", "with", "it", "NUMBER", "But", "I", "will", "definitely", "keep", "in", "mind", "your", "guide", "NUMBER", "Done", "in", "NUMBER", "f", "NUMBER", "a", "NUMBER", "d", "NUMBER", "ffae", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "beea", "NUMBER", "ca", "NUMBER", "ff", "NUMBER", "Looks", "good", "also", "needs", "documentation", "update", "to", "describe", "what", "free_x", "and", "free_y", "do", "NUMBER", "Looks", "good", "the", "last", "thing", "to", "do", "be", "to", "update", "your", "checkout", "and", "then", "rebase", "this", "branch", "so", "I", "can", "cleanly", "include", "it", "NUMBER", "Please", "email", "ggplot", "dev", "if", "you", "need", "help", "with", "that", "NUMBER", "Should", "be", "able", "to", "supply", "title", "describing", "what", "to", "look", "like", "supply", "file", "name", "focus", "in", "on", "specific", "components", "of", "the", "gtable", "to", "avoid", "detecting", "spurious", "change", "generate", "html", "page", "comparing", "current", "and", "previous", "version", "may", "need", "git", "install", "Need", "to", "function", "to", "run", "all", "visual", "test", "in", "a", "directory", "and", "stop", "if", "there", "be", "any", "change", "to", "avoid", "R", "CMD", "check", "silently", "passing", "when", "there", "has", "be", "a", "change", "May", "need", "a", "visual", "test", "manifest", "file", "that", "gives", "the", "source", "R", "file", "name", "image", "name", "title", "and", "hash", "of", "image", "NUMBER", "I", "m", "not", "really", "worried", "about", "the", "git", "repo", "file", "size", "I", "m", "imagining", "most", "images", "will", "be", "pretty", "small", "NUMBER", "And", "I", "was", "thinking", "png", "because", "then", "the", "git", "image", "compare", "will", "kick", "in", "which", "be", "only", "useful", "retrospectively", "but", "still", "I", "ve", "figured", "out", "how", "to", "use", "ImageMagick", "to", "do", "visual", "diffs", "with", "git", "NUMBER", "Add", "this", "to", "your", "NUMBER", "git", "config", "file", "difftool", "image", "cmd", "compare", "LOCAL", "REMOTE", "convert", "LOCAL", "REMOTE", "append", "x", "Suppose", "you", "have", "a", "NUMBER", "png", "file", "that", "s", "commit", "to", "the", "repo", "and", "then", "you", "overwrite", "that", "file", "with", "a", "new", "version", "NUMBER", "You", "can", "get", "the", "visual", "diff", "like", "this", "doesn", "t", "require", "committing", "the", "new", "image", "to", "the", "repo", "git", "difftool", "t", "image", "You", "can", "also", "compare", "any", "commit", "to", "another", "commit", "e", "NUMBER", "g", "NUMBER", "git", "difftool", "t", "image", "HEAD", "mybranch", "NUMBER", "This", "command", "puts", "the", "images", "left", "to", "right", "in", "this", "order", "Old", "New", "Diff", "NUMBER", "But", "it", "s", "possible", "to", "change", "the", "order", "and", "arrange", "them", "vertically", "if", "desired", "NUMBER", "The", "change", "in", "NUMBER", "allow", "ggplot", "NUMBER", "to", "work", "with", "the", "new", "vtest", "package", "NUMBER", "stat_contour", "now", "gives", "a", "warning", "when", "it", "generates", "no", "data", "NUMBER", "I", "d", "prefer", "to", "keep", "smoothing", "interpolation", "and", "contouring", "separate", "I", "think", "it", "s", "the", "job", "of", "the", "user", "to", "apply", "an", "appropriate", "method", "NUMBER", "Alternatively", "there", "may", "be", "an", "implementation", "of", "contouring", "that", "uses", "a", "data", "frame", "directly", "rather", "than", "a", "grid", "of", "points", "NUMBER", "See", "wch", "s", "suggestions", "on", "mailing", "list", "and", "NUMBER", "For", "scales", "argument", "name", "breaks", "minor_breaks", "labels", "legend", "NUMBER", "NULL", "should", "suppress", "that", "element", "NUMBER", "Slightly", "simpler", "example", "R", "library", "ggplot", "NUMBER", "data", "data", "NUMBER", "frame", "x", "paste", "X", "NUMBER", "NUMBER", "sep", "y", "NUMBER", "NUMBER", "group", "rep", "c", "a", "b", "c", "NUMBER", "NUMBER", "base", "ggplot", "data", "aes", "x", "y", "geom_point", "OK", "base", "facet_grid", "group", "NUMBER", "scales", "free", "space", "free", "Problems", "base", "facet_grid", "NUMBER", "group", "scales", "free", "space", "free", "Don", "t", "we", "already", "have", "the", "equivalent", "of", "parse", "T", "i", "NUMBER", "e", "NUMBER", "labels", "parse_format", "FYI", "the", "easiest", "way", "to", "create", "the", "vector", "of", "unevaluated", "calls", "be", "NUMBER", "alpha", "beta", "gamma", "Could", "you", "please", "move", "this", "to", "LINK", "Closing", "this", "because", "I", "ve", "recreated", "as", "individual", "issue", "in", "gtable", "NUMBER", "Can", "we", "not", "do", "this", "more", "directly", "by", "manipulating", "the", "gtable", "object", "I", "don", "t", "care", "about", "performance", "I", "d", "rather", "make", "something", "simple", "and", "then", "make", "ggplot", "NUMBER", "fast", "enough", "that", "it", "doesn", "t", "matter", "too", "much", "NUMBER", "But", "use", "gtable", "should", "eventually", "have", "other", "advantages", "like", "be", "able", "to", "make", "the", "legend", "a", "fix", "size", "NUMBER", "Yes", "I", "can", "NUMBER", "That", "would", "be", "a", "better", "way", "to", "implement", "this", "code", "and", "would", "handle", "null", "results", "etc", "NUMBER", "Could", "you", "please", "open", "a", "request", "wch", "this", "should", "be", "something", "that", "s", "easy", "to", "do", "with", "gtable", "I", "don", "t", "think", "it", "should", "be", "an", "argument", "in", "ggplot", "NUMBER", "What", "s", "the", "best", "way", "to", "fix", "this", "problem", "in", "general", "Add", "a", "z", "column", "to", "gtable", "and", "order", "by", "that", "prior", "to", "drawing", "wch", "this", "should", "be", "trivial", "with", "gtable", "s", "z", "support", "NUMBER", "Yeah", "I", "think", "we", "ll", "implement", "it", "differently", "NUMBER", "A", "few", "test", "cases", "would", "make", "me", "feel", "much", "more", "comfortable", "NUMBER", "Visual", "test", "be", "helpful", "but", "I", "d", "really", "prefer", "some", "automate", "ones", "especially", "for", "the", "dodging", "NUMBER", "That", "makes", "it", "much", "less", "likely", "I", "ll", "accidentally", "break", "them", "if", "I", "need", "to", "modify", "the", "code", "NUMBER", "I", "also", "wonder", "why", "the", "fill", "be", "lost", "in", "this", "case", "R", "ggplot", "dat", "aes", "x", "fill", "g", "group", "NUMBER", "geom_dotplot", "binwidth", "NUMBER", "alpha", "NUMBER", "binpositions", "all", "position", "stack", "adapted", "from", "the", "Multiple", "group", "with", "aligned", "bins", "n", "stacked", "currently", "doesn", "t", "work", "example", "in", "the", "visual", "test", "I", "like", "the", "idea", "of", "use", "titles", "on", "the", "visual", "test", "eventually", "the", "visual", "test", "will", "be", "run", "automatically", "so", "we", "can", "use", "git", "to", "compare", "the", "output", "and", "the", "filenames", "could", "be", "generate", "by", "hashing", "their", "titles", "NUMBER", "Maybe", "a", "combination", "of", "the", "two", "it", "might", "be", "easier", "to", "supply", "the", "path", "where", "the", "image", "should", "be", "saved", "so", "you", "can", "more", "easily", "locate", "the", "corresponding", "code", "NUMBER", "Ideally", "the", "visual", "test", "infrastructure", "would", "also", "create", "an", "html", "page", "for", "previewing", "all", "images", "in", "one", "test", "NUMBER", "Ah", "ok", "so", "for", "dotplot", "group", "work", "like", "geom_histogram", "rather", "than", "like", "geom_point", "NUMBER", "That", "makes", "sense", "now", "that", "I", "think", "about", "it", "NUMBER", "And", "please", "see", "NUMBER", "for", "discussion", "of", "a", "better", "visual", "test", "framework", "NUMBER", "Run", "check_doc", "until", "no", "error", "find", "NUMBER", "Done", "Thanks", "also", "made", "a", "number", "of", "improvement", "in", "NUMBER", "d", "NUMBER", "cc", "NUMBER", "a", "NUMBER", "ac", "NUMBER", "d", "NUMBER", "cf", "NUMBER", "ca", "NUMBER", "ae", "NUMBER", "Thanks", "for", "the", "bug", "report", "and", "investigation", "will", "fix", "soon", "NUMBER", "Duplicate", "of", "NUMBER", "but", "I", "ll", "close", "that", "one", "since", "it", "has", "no", "info", "NUMBER", "Could", "you", "please", "circulate", "your", "fix", "on", "the", "mailing", "list", "to", "see", "anyone", "know", "if", "it", "s", "actually", "t", "distributed", "I", "would", "have", "guessed", "z", "Finally", "it", "s", "better", "to", "use", "importFrom", "stats", "predict", "rather", "than", "stats", "predict", "Ok", "I", "think", "t", "based", "intervals", "be", "at", "least", "a", "reasonable", "approximation", "NUMBER", "Would", "you", "mind", "putting", "together", "a", "pull", "request", "with", "a", "little", "bit", "of", "documentation", "Tiny", "note", "if", "you", "re", "test", "scales", "it", "s", "better", "to", "test", "them", "directly", "rather", "than", "creating", "the", "entire", "graphic", "where", "many", "other", "things", "can", "go", "wrong", "NUMBER", "See", "the", "scale", "r", "NUMBER", "for", "a", "list", "of", "scale", "methods", "NUMBER", "That", "will", "also", "make", "it", "easier", "to", "know", "what", "to", "expect", "NUMBER", "koshke", "would", "you", "mind", "bundling", "your", "change", "the", "test", "into", "a", "pull", "request", "Thanks", "Thanks", "in", "general", "I", "want", "to", "eliminate", "all", "use", "of", "with", "subset", "transform", "etc", "in", "ggplot", "NUMBER", "code", "NUMBER", "At", "some", "point", "in", "the", "future", "but", "I", "don", "t", "have", "immediate", "plan", "NUMBER", "I", "agree", "it", "would", "be", "useful", "to", "flag", "any", "change", "in", "the", "book", "but", "I", "don", "t", "currently", "have", "time", "to", "do", "that", "NUMBER", "I", "m", "not", "sure", "I", "see", "why", "you", "need", "so", "many", "options", "to", "me", "the", "only", "sensible", "scalings", "be", "area", "constant", "or", "area", "proportional", "to", "sample", "size", "NUMBER", "Unless", "you", "strongly", "object", "I", "d", "suggest", "get", "rid", "of", "width", "scaling", "NUMBER", "How", "about", "scale", "fix", "or", "free", "Would", "be", "nice", "parallel", "to", "facets", "Agreed", "I", "like", "scale", "count", "and", "equal", "NUMBER", "Could", "you", "please", "also", "add", "a", "note", "to", "NEWS", "and", "then", "we", "ll", "be", "ready", "to", "go", "NUMBER", "Do", "you", "mind", "rebasing", "your", "branch", "against", "master", "I", "think", "it", "s", "slightly", "easier", "to", "do", "from", "your", "end", "NUMBER", "Looks", "good", "apart", "from", "the", "few", "change", "I", "noted", "above", "NUMBER", "Can", "you", "please", "also", "add", "notch", "parameter", "and", "documentation", "to", "stat_boxplot", "Roxygen", "should", "be", "idempotent", "if", "not", "then", "that", "s", "a", "roxygen", "bug", "so", "send", "me", "an", "email", "about", "it", "Two", "last", "change", "and", "I", "think", "it", "s", "ready", "a", "bullet", "point", "in", "NEWS", "and", "a", "reference", "to", "a", "paper", "that", "describes", "how", "notched", "boxplots", "work", "NUMBER", "Perfect", "thanks", "I", "also", "notice", "you", "have", "default_aes", "function", "NUMBER", "aes", "fill", "NUMBER", "value", "NUMBER", "NUMBER", "Does", "this", "cause", "problem", "if", "you", "use", "geoms", "other", "than", "rect", "Oh", "good", "point", "I", "was", "thinking", "in", "terms", "of", "stat_summary", "where", "it", "has", "different", "summary", "function", "for", "different", "outputs", "but", "I", "don", "t", "think", "that", "s", "a", "better", "approach", "NUMBER", "Yes", "some", "basic", "documentation", "would", "be", "great", "please", "NUMBER", "Could", "you", "please", "rebase", "off", "master", "I", "think", "it", "s", "just", "a", "conflict", "with", "NEWS", "and", "I", "ll", "pull", "in", "NUMBER", "Could", "you", "please", "also", "add", "a", "note", "to", "NEWS", "about", "what", "they", "do", "FYI", "this", "be", "the", "same", "bug", "as", "NUMBER", "so", "I", "m", "going", "to", "close", "the", "discussion", "here", "NUMBER", "Either", "with", "some", "small", "random", "probability", "or", "only", "on", "certain", "days", "NUMBER", "Messages", "would", "encourage", "people", "to", "sign", "up", "for", "mailing", "list", "etc", "NUMBER", "If", "you", "re", "worried", "about", "it", "you", "can", "always", "use", "suppressStartupMessages", "Can", "you", "try", "reproducing", "with", "pure", "grid", "graphics", "It", "s", "unlikely", "to", "be", "a", "ggplot", "NUMBER", "bug", "NUMBER", "I", "think", "that", "when", "theta", "be", "a", "factor", "the", "angular", "space", "should", "always", "be", "equal", "NUMBER", "In", "these", "examples", "the", "angular", "space", "with", "geom_point", "be", "different", "than", "with", "geom_bar", "NUMBER", "And", "since", "x", "theta", "be", "a", "factor", "I", "don", "t", "think", "it", "s", "possible", "to", "change", "the", "limits", "to", "get", "equal", "space", "if", "it", "were", "numeric", "you", "could", "control", "the", "space", "with", "xlim", "NUMBER", "NUMBER", "NUMBER", "R", "dat", "data", "NUMBER", "frame", "x", "c", "A", "B", "C", "D", "y", "NUMBER", "NUMBER", "x", "theta", "be", "a", "factor", "with", "geom_point", "first", "and", "last", "be", "merge", "ggplot", "dat", "aes", "x", "x", "y", "y", "geom_point", "coord_polar", "x", "theta", "be", "a", "factor", "with", "geom_bar", "not", "merge", "but", "unequal", "space", "ggplot", "dat", "aes", "x", "x", "y", "y", "geom_bar", "coord_polar", "equal", "space", "with", "geom_bar", "when", "width", "NUMBER", "ggplot", "dat", "aes", "x", "x", "y", "y", "geom_bar", "width", "NUMBER", "coord_polar", "For", "this", "to", "be", "truly", "polar", "the", "theta", "values", "should", "wrap", "around", "and", "connect", "perhaps", "it", "would", "help", "to", "formalize", "the", "property", "of", "looping", "wrapping", "for", "scales", "NUMBER", "Fixed", "in", "NUMBER", "Putting", "off", "until", "NUMBER", "Will", "need", "a", "decent", "set", "of", "test", "associated", "with", "it", "NUMBER", "Almost", "wonder", "if", "we", "need", "a", "separate", "boxplot", "package", "to", "do", "calculating", "for", "all", "boxplot", "relate", "displays", "see", "LINK", "Yeah", "I", "m", "totally", "with", "Koshke", "on", "this", "one", "NUMBER", "It", "gets", "even", "more", "complicated", "if", "you", "consider", "longitudinal", "data", "where", "possibly", "none", "of", "the", "time", "points", "align", "NUMBER", "But", "I", "think", "it", "s", "worth", "having", "some", "tool", "that", "will", "do", "this", "just", "not", "automatically", "NUMBER", "Something", "to", "consider", "for", "NUMBER", "Fixed", "in", "NUMBER", "dafed", "NUMBER", "a", "NUMBER", "cf", "NUMBER", "b", "NUMBER", "c", "NUMBER", "a", "NUMBER", "ed", "NUMBER", "ffb", "NUMBER", "b", "NUMBER", "Hmmm", "I", "think", "the", "best", "way", "to", "solve", "this", "would", "be", "for", "collide", "to", "first", "check", "if", "it", "actually", "needs", "to", "do", "any", "adjustment", "NUMBER", "Long", "term", "I", "really", "need", "a", "better", "strategy", "for", "dodging", "NUMBER", "Will", "wait", "to", "work", "on", "this", "until", "wch", "s", "violin", "code", "merge", "in", "needs", "tweak", "to", "collide", "It", "s", "not", "clear", "to", "me", "how", "this", "code", "ever", "worked", "The", "problem", "be", "that", "the", "boxplots", "don", "t", "all", "have", "the", "same", "width", "because", "the", "two", "boxes", "on", "the", "very", "end", "don", "t", "get", "a", "full", "NUMBER", "worth", "of", "data", "NUMBER", "If", "the", "data", "be", "rounded", "before", "going", "into", "ggplot", "NUMBER", "then", "the", "boxes", "do", "have", "same", "width", "NUMBER", "Hmm", "I", "think", "conceptually", "I", "picture", "the", "minor", "grid", "lines", "lying", "underneath", "the", "major", "grid", "lines", "NUMBER", "Could", "you", "give", "a", "bit", "of", "an", "example", "where", "this", "be", "cause", "you", "problem", "I", "think", "that", "s", "reasonable", "so", "I", "ve", "flagged", "it", "for", "NUMBER", "and", "the", "change", "should", "be", "do", "in", "the", "next", "couple", "of", "days", "NUMBER", "I", "d", "like", "to", "hear", "more", "about", "the", "huge", "data", "sets", "you", "re", "plotting", "as", "there", "may", "be", "other", "features", "NUMBER", "that", "will", "help", "but", "that", "probably", "shouldn", "t", "occur", "in", "issue", "comments", "NUMBER", "Oh", "this", "be", "going", "to", "be", "very", "difficult", "to", "fix", "Outliers", "be", "a", "total", "exception", "to", "all", "the", "standard", "rules", "NUMBER", "This", "wasn", "t", "a", "problem", "before", "because", "the", "range", "of", "the", "plot", "was", "always", "the", "range", "of", "the", "data", "not", "the", "range", "of", "the", "transformed", "data", "NUMBER", "Thanks", "for", "the", "test", "I", "wouldn", "t", "worry", "about", "backward", "compatibility", "NUMBER", "The", "quick", "hack", "to", "fix", "the", "bug", "be", "ok", "I", "think", "NUMBER", "A", "better", "fix", "will", "come", "when", "geoms", "and", "stats", "be", "rewritten", "NUMBER", "I", "think", "I", "prefer", "kohske", "s", "solution", "can", "you", "please", "merge", "it", "in", "or", "create", "a", "pull", "request", "NUMBER", "Again", "something", "that", "needs", "to", "be", "looked", "at", "again", "when", "layers", "be", "rewritten", "NUMBER", "Which", "should", "suggest", "ggplot", "NUMBER", "so", "it", "can", "be", "use", "for", "examples", "Including", "spatial", "fortify", "code", "and", "specialised", "methods", "for", "geom_raster", "and", "geom_map", "Should", "import", "mapproj", "maps", "gpclib", "maptools", "and", "extend", "sp", "so", "all", "package", "be", "available", "NUMBER", "Fixed", "NUMBER", "In", "the", "future", "please", "use", "the", "new", "ggplot", "NUMBER", "dev", "mailing", "list", "for", "problem", "like", "this", "NUMBER", "That", "s", "on", "R", "NUMBER", "Fixed", "in", "d", "NUMBER", "c", "NUMBER", "da", "NUMBER", "b", "NUMBER", "c", "NUMBER", "caba", "NUMBER", "f", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "b", "NUMBER", "And", "yes", "NUMBER", "be", "necessary", "because", "I", "m", "now", "importing", "proto", "which", "didn", "t", "use", "to", "have", "a", "namespace", "NUMBER", "Generally", "I", "can", "t", "provide", "any", "guarantees", "that", "ggplot", "NUMBER", "will", "work", "with", "an", "older", "version", "because", "I", "only", "test", "on", "the", "latest", "NUMBER", "Test", "case", "looks", "good", "NUMBER", "Would", "be", "slightly", "be", "if", "you", "wrapped", "in", "a", "test", "i", "NUMBER", "e", "NUMBER", "test_that", "labels", "don", "t", "have", "extra", "padding", "NUMBER", "and", "in", "this", "case", "a", "slightly", "better", "i", "NUMBER", "e", "NUMBER", "more", "general", "test", "might", "be", "xlabs", "p", "panel", "ranges", "NUMBER", "x", "NUMBER", "labels", "NUMBER", "expect_equal", "xlabs", "str_trim", "xlabs", "NUMBER", "A", "pull", "request", "with", "test", "case", "and", "fix", "would", "be", "much", "appreciated", "NUMBER", "Trying", "to", "get", "back", "in", "the", "swing", "of", "development", "so", "I", "should", "be", "approving", "things", "much", "more", "quickly", "over", "the", "next", "few", "weeks", "NUMBER", "Thanks", "for", "the", "bug", "report", "probably", "won", "t", "have", "a", "chance", "work", "on", "them", "for", "a", "couple", "of", "weeks", "until", "class", "finishes", "but", "I", "hope", "I", "can", "get", "a", "release", "out", "by", "Christmas", "New", "Years", "NUMBER", "If", "you", "want", "to", "increase", "the", "speed", "at", "which", "I", "fix", "these", "bug", "formal", "test", "cases", "use", "the", "output", "of", "ggplot_build", "would", "really", "help", "NUMBER", "I", "agree", "that", "both", "breaks", "and", "values", "should", "match", "by", "both", "position", "and", "name", "NUMBER", "Ok", "this", "isn", "t", "a", "bug", "so", "much", "as", "functionality", "that", "hasn", "t", "yet", "be", "implement", "in", "NUMBER", "Palettes", "don", "t", "work", "at", "this", "level", "matching", "potential", "values", "so", "I", "think", "scale_manual", "needs", "to", "work", "like", "scale_identity", "with", "it", "s", "own", "method", "for", "scale_map", "NUMBER", "Here", "s", "a", "test", "case", "for", "when", "it", "do", "get", "implement", "R", "test_that", "names", "of", "values", "use", "in", "manual", "scales", "s", "scale_colour_manual", "values", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "b", "scale_train", "s", "c", "NUMBER", "NUMBER", "NUMBER", "expect_equal", "scale_map", "s", "c", "NUMBER", "NUMBER", "NUMBER", "c", "a", "b", "c", "Thanks", "for", "the", "additional", "test", "I", "can", "t", "reproduce", "the", "problem", "NUMBER", "Are", "you", "sure", "you", "have", "the", "latest", "version", "of", "scales", "This", "be", "a", "desired", "change", "in", "behaviour", "NUMBER", "Use", "labels", "math_format", "NUMBER", "to", "get", "the", "old", "style", "labels", "NUMBER", "kohske", "would", "you", "mind", "taking", "care", "of", "this", "too", "One", "pull", "request", "for", "both", "would", "be", "fine", "NUMBER", "Actually", "this", "be", "exactly", "the", "same", "problem", "as", "NUMBER", "This", "should", "be", "fix", "in", "the", "devel", "version", "NUMBER", "Because", "lubridate", "affects", "the", "global", "workspace", "by", "modifying", "the", "base", "definitions", "of", "etc", "NUMBER", "If", "you", "don", "t", "want", "a", "straight", "line", "in", "visual", "space", "use", "coord_trans", "R", "df", "data", "NUMBER", "frame", "x", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "NUMBER", "cbase", "qplot", "x", "y", "data", "df", "coord_trans", "y", "log", "NUMBER", "All", "of", "these", "cases", "seem", "to", "work", "ok", "cbase", "geom_line", "cbase", "geom_segment", "aes", "xend", "NUMBER", "yend", "y", "cbase", "geom_segment", "aes", "yend", "y", "xend", "NUMBER", "cbase", "geom_segment", "aes", "xend", "x", "yend", "NUMBER", "cbase", "geom_segment", "aes", "xend", "x", "yend", "NUMBER", "cbase", "geom_segment", "aes", "xend", "NUMBER", "yend", "y", "NUMBER", "cbase", "geom_segment", "aes", "yend", "y", "NUMBER", "xend", "NUMBER", "The", "problem", "be", "with", "scale_log", "NUMBER", "R", "sbase", "qplot", "x", "y", "data", "df", "scale_y_log", "NUMBER", "sbase", "geom_segment", "aes", "xend", "x", "yend", "NUMBER", "sbase", "geom_segment", "aes", "xend", "x", "yend", "NUMBER", "Set", "aesthetic", "values", "be", "not", "scaled", "transformed", "NUMBER", "I", "don", "t", "think", "this", "be", "a", "bug", "because", "it", "s", "analogous", "to", "geom_segment", "colour", "red", "where", "colour", "definitely", "should", "not", "be", "scaled", "NUMBER", "Normally", "the", "raw", "and", "transformed", "position", "scales", "align", "so", "you", "don", "t", "notice", "but", "I", "m", "reasonably", "certain", "that", "the", "current", "behaviour", "be", "correct", "and", "consistent", "NUMBER", "I", "think", "you", "re", "miss", "something", "about", "scale", "transformations", "NUMBER", "The", "following", "two", "plots", "should", "look", "identical", "apart", "from", "the", "labels", "on", "the", "y", "axis", "R", "ggplot", "dat", "aes", "x", "x", "y", "y", "fill", "group", "geom_area", "scale_y_log", "NUMBER", "ggplot", "dat", "aes", "x", "x", "y", "log", "NUMBER", "y", "fill", "group", "geom_area", "The", "real", "problem", "here", "be", "basically", "the", "same", "as", "the", "last", "plot", "the", "base", "line", "which", "be", "effectively", "_set_", "not", "mapped", "be", "not", "be", "scaled", "NUMBER", "It", "really", "should", "be", "placed", "at", "Infinity", "NUMBER", "This", "requires", "a", "rewrite", "of", "how", "geoms", "and", "scales", "interact", "so", "I", "m", "putting", "off", "until", "NUMBER", "I", "m", "pretty", "sure", "that", "you", "re", "right", "coord_flip", "should", "be", "linear", "NUMBER", "This", "be", "expected", "behaviour", "you", "might", "find", "the", "inherit", "NUMBER", "aes", "argument", "useful", "for", "your", "problem", "NUMBER", "Is", "this", "the", "correct", "fix", "The", "principle", "with", "alpha", "be", "that", "it", "be", "applied", "to", "fill", "if", "a", "geom", "uses", "it", "otherwise", "it", "s", "applied", "to", "colour", "NUMBER", "Perfect", "thanks", "This", "be", "by", "design", "NUMBER", "For", "geoms", "with", "both", "colour", "and", "fill", "alpha", "only", "affects", "fill", "NUMBER", "You", "can", "argue", "about", "whether", "or", "not", "that", "s", "a", "good", "idea", "but", "that", "s", "the", "way", "it", "be", "Also", "fix", "in", "NUMBER", "fd", "NUMBER", "fabff", "NUMBER", "cbfc", "NUMBER", "e", "NUMBER", "ced", "NUMBER", "b", "NUMBER", "d", "NUMBER", "ff", "NUMBER", "Let", "me", "know", "if", "you", "see", "problem", "in", "new", "places", "NUMBER", "I", "think", "this", "be", "an", "inherent", "property", "of", "how", "ggplot", "NUMBER", "works", "each", "layer", "do", "not", "capture", "scope", "independently", "NUMBER", "Evaluation", "of", "all", "argument", "should", "occur", "in", "the", "environment", "where", "the", "plot", "be", "defined", "NUMBER", "Sorry", "I", "get", "in", "a", "bit", "of", "a", "ticket", "closing", "frenzy", "NUMBER", "I", "think", "a", "simple", "fix", "be", "to", "replace", "globalenv", "with", "parent", "NUMBER", "frame", "to", "at", "least", "capture", "the", "environment", "where", "ggplot", "be", "call", "NUMBER", "Oh", "I", "like", "that", "even", "better", "NUMBER", "Especially", "since", "if", "a", "layer", "doesn", "t", "have", "an", "aes", "call", "then", "it", "doesn", "t", "need", "any", "special", "help", "NUMBER", "That", "reminds", "me", "that", "I", "ve", "be", "wanting", "to", "make", "aes", "more", "like", "plyr", "NUMBER", "for", "a", "while", "NUMBER", "NUMBER", "captures", "the", "current", "environment", "and", "offers", "a", "much", "more", "complete", "API", "for", "coercing", "to", "and", "from", "different", "data", "types", "NUMBER", "Don", "t", "know", "what", "fix", "it", "but", "it", "s", "fine", "now", "NUMBER", "Also", "make", "sure", "to", "check", "out", "count", "and", "geom_raster", "if", "you", "re", "doing", "this", "for", "big", "plots", "NUMBER", "See", "also", "densityVis", "LINK", "where", "I", "ve", "be", "work", "on", "the", "underlying", "data", "transforms", "more", "rigorously", "NUMBER", "Hopefully", "will", "incorporate", "into", "ggplot", "NUMBER", "by", "NUMBER", "Fixed", "in", "the", "devel", "version", "NUMBER", "Special", "case", "implement", "in", "geom_raster", "NUMBER", "I", "don", "t", "think", "it", "s", "appropriate", "to", "implement", "geoms", "in", "general", "NUMBER", "I", "m", "going", "to", "put", "this", "off", "until", "NUMBER", "Too", "much", "in", "this", "version", "already", "NUMBER", "This", "appears", "to", "be", "fix", "in", "the", "development", "version", "because", "date_breaks", "always", "rounds", "up", "down", "to", "the", "nearest", "multiple", "NUMBER", "R", "df", "data", "NUMBER", "frame", "x", "as", "NUMBER", "Date", "ISOdate", "c", "NUMBER", "NUMBER", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "y", "c", "NUMBER", "NUMBER", "NUMBER", "p", "ggplot", "df", "aes", "x", "y", "geom_line", "geom_point", "p", "scale_x_date", "breaks", "date_breaks", "NUMBER", "year", "minor_breaks", "date_breaks", "NUMBER", "months", "shrink", "as", "NUMBER", "Date", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "p", "scale_x_date", "breaks", "date_breaks", "NUMBER", "year", "minor_breaks", "date_breaks", "NUMBER", "months", "limits", "shrink", "Fixed", "in", "scales", "where", "this", "now", "lives", "NUMBER", "Would", "you", "mind", "update", "to", "the", "latest", "version", "of", "the", "develop", "branch", "Then", "I", "ll", "pull", "in", "NUMBER", "Sorry", "match", "to", "master", "branch", "now", "develop", "has", "be", "retired", "NUMBER", "Done", "by", "Kohske", "NUMBER", "kohske", "can", "you", "please", "look", "into", "why", "this", "doesn", "t", "work", "anymore", "Should", "it", "be", "guide", "legend", "Hmm", "I", "think", "this", "may", "be", "too", "much", "work", "for", "this", "release", "NUMBER", "Let", "s", "fix", "legends", "in", "NUMBER", "The", "background", "dots", "actually", "be", "be", "include", "in", "the", "legend", "NUMBER", "However", "they", "be", "be", "shown", "at", "the", "same", "size", "as", "the", "other", "dots", "NUMBER", "This", "example", "will", "illustrate", "R", "dat", "data", "NUMBER", "frame", "x", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "s", "runif", "NUMBER", "ggplot", "dat", "aes", "x", "y", "geom_point", "aes", "size", "NUMBER", "colour", "red", "geom_point", "aes", "size", "s", "colour", "blue", "alpha", "NUMBER", "Is", "the", "expected", "behavior", "that", "the", "background", "red", "dots", "will", "all", "be", "the", "maximum", "size", "I", "m", "not", "sure", "that", "the", "current", "behavior", "be", "wrong", "NUMBER", "In", "the", "first", "example", "here", "the", "size", "of", "the", "red", "points", "be", "on", "the", "same", "scale", "as", "the", "semi", "transparent", "blue", "points", "since", "it", "s", "on", "the", "same", "scale", "shouldn", "t", "the", "legend", "indicate", "what", "sizes", "represent", "what", "values", "The", "second", "example", "has", "the", "same", "effect", "but", "gets", "the", "value", "for", "the", "size", "of", "the", "red", "dots", "from", "a", "a", "column", "in", "the", "data", "frame", "NUMBER", "In", "the", "third", "example", "the", "size", "be", "set", "outside", "of", "aes", "so", "it", "makes", "sense", "not", "to", "include", "it", "in", "the", "legend", "NUMBER", "R", "set", "NUMBER", "seed", "NUMBER", "dat", "data", "NUMBER", "frame", "x", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "s", "NUMBER", "runif", "NUMBER", "mapping", "a", "constant", "value", "to", "size", "ggplot", "dat", "aes", "x", "y", "geom_point", "aes", "size", "NUMBER", "guide", "legend", "colour", "red", "geom_point", "aes", "size", "s", "colour", "blue", "alpha", "NUMBER", "same", "as", "this", "dat", "NUMBER", "data", "NUMBER", "frame", "dat", "z", "NUMBER", "ggplot", "dat", "NUMBER", "aes", "x", "y", "geom_point", "aes", "size", "z", "guide", "legend", "colour", "red", "geom_point", "aes", "size", "s", "colour", "blue", "alpha", "NUMBER", "setting", "size", "doesn", "t", "show", "in", "legend", "ggplot", "dat", "aes", "x", "y", "geom_point", "size", "NUMBER", "guide", "legend", "colour", "red", "geom_point", "aes", "size", "s", "colour", "blue", "alpha", "NUMBER", "Fixed", "in", "f", "NUMBER", "bcca", "NUMBER", "e", "NUMBER", "d", "NUMBER", "a", "NUMBER", "d", "NUMBER", "f", "NUMBER", "b", "NUMBER", "ed", "NUMBER", "e", "NUMBER", "e", "NUMBER", "ef", "NUMBER", "c", "Fixed", "in", "f", "NUMBER", "bcca", "NUMBER", "e", "NUMBER", "d", "NUMBER", "a", "NUMBER", "d", "NUMBER", "f", "NUMBER", "b", "NUMBER", "ed", "NUMBER", "e", "NUMBER", "e", "NUMBER", "ef", "NUMBER", "c", "Hmmmm", "I", "think", "this", "be", "a", "problem", "with", "scales", "discrete_range", "it", "actually", "should", "be", "sorting", "character", "vectors", "when", "it", "sees", "them", "NUMBER", "But", "it", "shouldn", "t", "sort", "factors", "and", "I", "m", "not", "sure", "what", "it", "should", "do", "if", "some", "data", "be", "factors", "and", "some", "be", "character", "or", "you", "get", "factors", "with", "multiple", "sets", "of", "levels", "NUMBER", "Or", "maybe", "it", "s", "that", "scales", "clevels", "needs", "to", "sort", "character", "vectors", "NUMBER", "Somewhat", "refined", "test", "case", "easier", "to", "see", "what", "s", "going", "wrong", "when", "you", "extract", "the", "exact", "piece", "you", "re", "interested", "in", "R", "context", "Data", "test_that", "stringsAsFactors", "doesn", "t", "affect", "results", "sAF", "getOption", "stringsAsFactors", "dat", "NUMBER", "character", "data", "NUMBER", "frame", "x", "letters", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "stringsAsFactors", "FALSE", "dat", "NUMBER", "factor", "data", "NUMBER", "frame", "x", "letters", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "stringsAsFactors", "TRUE", "base", "ggplot", "aes", "x", "y", "geom_point", "xlabels", "function", "x", "x", "panel", "ranges", "NUMBER", "x", "NUMBER", "labels", "options", "stringsAsFactors", "TRUE", "char_true", "ggplot_build", "base", "dat", "NUMBER", "character", "factor_true", "ggplot_build", "base", "dat", "NUMBER", "factor", "options", "stringsAsFactors", "FALSE", "char_false", "ggplot_build", "base", "dat", "NUMBER", "character", "factor_false", "ggplot_build", "base", "dat", "NUMBER", "factor", "options", "stringsAsFactors", "sAF", "expect_that", "xlabels", "char_true", "equals", "letters", "NUMBER", "NUMBER", "expect_that", "xlabels", "char_false", "equals", "letters", "NUMBER", "NUMBER", "expect_that", "xlabels", "factor_true", "equals", "letters", "NUMBER", "NUMBER", "expect_that", "xlabels", "factor_false", "equals", "letters", "NUMBER", "NUMBER", "This", "be", "fix", "in", "the", "development", "version", "of", "scales", "NUMBER", "Somewhat", "refined", "test", "case", "easier", "to", "see", "what", "s", "going", "wrong", "when", "you", "extract", "the", "exact", "piece", "you", "re", "interested", "in", "R", "context", "Data", "test_that", "stringsAsFactors", "doesn", "t", "affect", "results", "sAF", "getOption", "stringsAsFactors", "dat", "NUMBER", "character", "data", "NUMBER", "frame", "x", "letters", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "stringsAsFactors", "FALSE", "dat", "NUMBER", "factor", "data", "NUMBER", "frame", "x", "letters", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "stringsAsFactors", "TRUE", "base", "ggplot", "aes", "x", "y", "geom_point", "xlabels", "function", "x", "x", "panel", "ranges", "NUMBER", "x", "NUMBER", "labels", "options", "stringsAsFactors", "TRUE", "char_true", "ggplot_build", "base", "dat", "NUMBER", "character", "factor_true", "ggplot_build", "base", "dat", "NUMBER", "factor", "options", "stringsAsFactors", "FALSE", "char_false", "ggplot_build", "base", "dat", "NUMBER", "character", "factor_false", "ggplot_build", "base", "dat", "NUMBER", "factor", "options", "stringsAsFactors", "sAF", "expect_that", "xlabels", "char_true", "equals", "letters", "NUMBER", "NUMBER", "expect_that", "xlabels", "char_false", "equals", "letters", "NUMBER", "NUMBER", "expect_that", "xlabels", "factor_true", "equals", "letters", "NUMBER", "NUMBER", "expect_that", "xlabels", "factor_false", "equals", "letters", "NUMBER", "NUMBER", "Oops", "yes", "thanks", "NUMBER", "Ooops", "thanks", "Yeah", "I", "very", "rarely", "bother", "with", "ordered", "factors", "since", "the", "only", "impact", "they", "have", "be", "to", "change", "the", "contrasts", "in", "linear", "models", "NUMBER", "Yes", "that", "s", "where", "it", "s", "supposed", "to", "point", "NUMBER", "It", "s", "an", "internal", "function", "and", "won", "t", "be", "export", "in", "the", "next", "version", "NUMBER", "The", "Rd", "file", "be", "automatically", "generate", "from", "roxygen", "comments", "in", "R", "would", "you", "mind", "fix", "in", "the", "source", "document", "position", "jitter", "NUMBER", "R", "Thanks", "Awesome", "thanks", "Doh", "that", "was", "a", "dumb", "mistake", "NUMBER", "Thanks", "for", "the", "fix", "This", "could", "be", "a", "good", "opportunity", "to", "try", "out", "git", "bisect", "This", "be", "fix", "in", "the", "develop", "branch", "NUMBER", "You", "need", "the", "develop", "branch", "NUMBER", "I", "d", "rather", "make", "that", "a", "new", "position", "adjustment", "altogether", "NUMBER", "Already", "fix", "in", "the", "develop", "branch", "NUMBER", "By", "the", "end", "of", "summer", "hopefully", "NUMBER", "Working", "on", "update", "documentation", "at", "the", "moment", "NUMBER", "Closing", "this", "pull", "request", "because", "I", "just", "made", "these", "change", "myself", "Great", "minds", "think", "alike", "I", "ll", "push", "my", "change", "shortly", "NUMBER", "I", "just", "completed", "a", "big", "re", "write", "of", "roxygen", "over", "the", "weekend", "that", "add", "a", "few", "new", "features", "to", "reduce", "documentation", "duplication", "NUMBER", "It", "s", "temporarily", "available", "at", "LINK", "but", "it", "will", "be", "merge", "back", "into", "the", "main", "development", "trunk", "LINK", "and", "hopefully", "hence", "to", "CRAN", "soon", "after", "NUMBER", "Got", "it", "thanks", "Brian", "i", "NUMBER", "e", "NUMBER", "it", "s", "Tukey", "s", "boxplots", "and", "the", "hinges", "and", "whisker", "be", "calculated", "as", "NUMBER", "library", "ggplot", "NUMBER", "data", "Boston", "package", "MASS", "qplot", "zn", "data", "Boston", "qplot", "zn", "data", "Boston", "binwidth", "NUMBER", "xlim", "c", "NUMBER", "NUMBER", "Reported", "by", "Antony", "Unwin", "Need", "to", "think", "about", "what", "correct", "behaviour", "be", "NUMBER", "And", "should", "right", "T", "by", "default", "Axes", "labelling", "fix", "in", "NUMBER", "d", "NUMBER", "c", "NUMBER", "d", "NUMBER", "e", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "eb", "NUMBER", "a", "NUMBER", "aaf", "First", "colour", "labelling", "bug", "fix", "in", "f", "NUMBER", "ec", "NUMBER", "a", "NUMBER", "b", "NUMBER", "da", "NUMBER", "ddd", "NUMBER", "a", "NUMBER", "bed", "NUMBER", "ef", "NUMBER", "ab", "NUMBER", "b", "NUMBER", "Fixed", "weird", "breaks", "expansion", "bug", "in", "NUMBER", "c", "NUMBER", "b", "NUMBER", "d", "NUMBER", "acbcf", "NUMBER", "a", "NUMBER", "addfba", "Ok", "I", "think", "that", "s", "everything", "thanks", "for", "the", "bug", "report", "and", "for", "exposing", "many", "and", "various", "problem", "Unfortunately", "it", "s", "a", "bit", "more", "complicated", "than", "that", "it", "s", "because", "there", "be", "two", "nested", "layouts", "and", "the", "axis", "title", "be", "drawn", "in", "the", "outer", "layout", "which", "doesn", "t", "know", "anything", "about", "the", "inner", "layout", "NUMBER", "If", "you", "wanted", "to", "have", "a", "go", "at", "fix", "it", "you", "basically", "need", "to", "work", "with", "panelGrid", "instead", "of", "work", "with", "panelGrob", "NUMBER", "Take", "a", "look", "at", "utilities", "table", "NUMBER", "r", "to", "see", "how", "it", "works", "NUMBER", "This", "be", "something", "I", "ll", "probably", "pull", "out", "of", "ggplot", "NUMBER", "eventually", "NUMBER", "Working", "on", "this", "now", "NUMBER", "Have", "titles", "and", "labels", "work", "NUMBER", "Still", "work", "on", "legends", "but", "should", "be", "do", "in", "a", "few", "days", "NUMBER", "Largely", "fix", "in", "gtable", "render", "branch", "LINK", "NUMBER", "Fgtable", "render", "NUMBER", "Would", "you", "mind", "having", "a", "play", "and", "seeing", "if", "there", "s", "anything", "I", "ve", "miss", "Also", "the", "code", "in", "plot", "render", "NUMBER", "r", "should", "hopefully", "be", "easier", "to", "understand", "and", "to", "improve", "in", "the", "future", "but", "layout", "be", "still", "hard", "Fixed", "NUMBER", "Let", "me", "know", "if", "you", "see", "any", "others", "NUMBER", "This", "branch", "also", "reduces", "plotting", "time", "by", "about", "NUMBER", "ms", "which", "be", "nice", "NUMBER", "This", "be", "fix", "in", "the", "development", "version", "as", "part", "of", "better", "zero", "detection", "in", "the", "scales", "package", "NUMBER", "Fixed", "thanks", "to", "Jiho", "s", "pull", "request", "NUMBER", "Yes", "I", "like", "this", "idea", "and", "I", "like", "that", "basic", "syntax", "NUMBER", "But", "how", "do", "limit", "and", "free", "scales", "interact", "And", "what", "happens", "if", "you", "specify", "facet_wrap", "vs", "limits", "lims", "NUMBER", "Another", "relate", "idea", "that", "I", "ve", "be", "thinking", "about", "be", "giving", "layers", "the", "ability", "not", "to", "affect", "scale", "limits", "this", "be", "useful", "when", "you", "be", "plotting", "spatial", "data", "and", "want", "to", "add", "a", "map", "on", "top", "NUMBER", "You", "don", "t", "want", "the", "map", "to", "affect", "the", "limits", "because", "it", "may", "be", "much", "bigger", "than", "you", "data", "and", "use", "coord", "to", "zoom", "in", "be", "a", "hassle", "NUMBER", "If", "that", "idea", "was", "implement", "modifying", "scales", "on", "a", "facet", "by", "facet", "basis", "would", "amount", "to", "use", "train_position", "F", "for", "all", "layers", "apart", "from", "a", "geom_blank", "which", "specified", "the", "dummy", "data", "to", "expand", "the", "scales", "as", "needed", "which", "expand_limits", "already", "do", "NUMBER", "Implementing", "scale", "limits", "in", "that", "way", "would", "also", "mean", "the", "behaviour", "of", "free", "scales", "etc", "could", "remain", "as", "be", "NUMBER", "Hmmmm", "that", "code", "just", "looks", "too", "complicated", "to", "me", "NUMBER", "It", "s", "a", "lot", "of", "extra", "complexity", "for", "not", "a", "lot", "of", "extra", "gain", "NUMBER", "I", "think", "giving", "layers", "the", "ability", "to", "control", "whether", "or", "not", "they", "affect", "position", "scaling", "be", "simpler", "to", "implement", "more", "elegant", "in", "terms", "of", "playing", "nicely", "with", "exist", "code", "for", "free", "limits", "and", "allows", "a", "number", "of", "other", "interesting", "techniques", "that", "were", "previously", "not", "possibly", "NUMBER", "That", "s", "actually", "possible", "in", "the", "devel", "version", "you", "can", "take", "the", "output", "of", "ggplot_build", "and", "modify", "the", "per", "panel", "labels", "there", "NUMBER", "I", "m", "not", "sure", "if", "I", "want", "to", "commit", "to", "a", "formal", "API", "yet", "NUMBER", "ggplot", "NUMBER", "will", "never", "handle", "these", "details", "like", "lattice", "do", "because", "I", "really", "dislike", "how", "that", "works", "you", "should", "be", "describing", "things", "in", "terms", "of", "the", "underlying", "data", "not", "by", "some", "arbitrary", "panel", "number", "NUMBER", "This", "be", "fix", "in", "the", "development", "version", "of", "ggplot", "NUMBER", "which", "I", "hope", "to", "release", "by", "the", "end", "of", "summer", "NUMBER", "I", "m", "still", "not", "certain", "about", "this", "change", "it", "gets", "a", "bit", "confusing", "if", "you", "do", "something", "like", "ggsave", "units", "cm", "NUMBER", "What", "do", "that", "mean", "Are", "you", "aware", "of", "the", "cm", "function", "That", "way", "you", "can", "at", "least", "do", "ggsave", "width", "cm", "NUMBER", "height", "cm", "NUMBER", "Looking", "good", "if", "you", "can", "fix", "those", "last", "format", "issue", "I", "ll", "pull", "it", "NUMBER", "If", "you", "update", "again", "I", "promise", "to", "pull", "in", "this", "time", "Putting", "this", "of", "for", "NUMBER", "and", "densityVis", "integration", "NUMBER", "Yes", "this", "was", "a", "colossally", "dumb", "bug", "on", "my", "behalf", "Thankfully", "it", "s", "fix", "now", "This", "be", "fix", "by", "NUMBER", "and", "NUMBER", "together", "NUMBER", "A", "different", "syntax", "use", "annotate", "vline", "be", "required", "R", "DF", "data", "NUMBER", "frame", "x", "NUMBER", "NUMBER", "y", "seq", "NUMBER", "NUMBER", "NUMBER", "qplot", "x", "y", "data", "DF", "annotate", "vline", "xintercept", "numeric", "NUMBER", "This", "works", "fine", "for", "me", "no", "line", "and", "no", "error", "R", "qplot", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "geom_vline", "xintercept", "b", "col", "dark", "blue", "lty", "dashed", "The", "original", "example", "gives", "me", "some", "warnings", "but", "they", "seem", "to", "be", "relate", "to", "the", "loess", "smoothing", "of", "the", "small", "data", "set", "NUMBER", "Increasing", "the", "number", "of", "points", "from", "NUMBER", "to", "NUMBER", "makes", "the", "error", "go", "away", "NUMBER", "Fixed", "at", "some", "point", "in", "the", "past", "NUMBER", "Thanks", "No", "longer", "relevant", "with", "move", "to", "S", "NUMBER", "Works", "for", "me", "in", "devel", "version", "NUMBER", "Problem", "be", "in", "way", "that", "layout_base", "computes", "base", "data", "it", "uses", "only", "the", "levels", "that", "appear", "in", "the", "data", "NUMBER", "When", "drop", "F", "it", "needs", "to", "use", "all", "combinations", "of", "unique", "values", "NUMBER", "Needs", "to", "follow", "same", "strategy", "as", "plyr", "split_labels", "Need", "to", "write", "test", "cases", "to", "ensure", "these", "problem", "don", "t", "re", "occur", "Tests", "for", "a", "few", "more", "relate", "cases", "R", "mpg", "cyl", "NUMBER", "factor", "mpg", "cyl", "levels", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mpg", "cyl", "NUMBER", "factor", "mpg", "cyl", "levels", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mpg", "cyl", "NUMBER", "factor", "mpg", "cyl", "levels", "c", "NUMBER", "NUMBER", "qplot", "displ", "hwy", "data", "mpg", "facet_wrap", "cyl", "NUMBER", "drop", "FALSE", "qplot", "displ", "hwy", "data", "mpg", "facet_wrap", "cyl", "NUMBER", "drop", "FALSE", "qplot", "displ", "hwy", "data", "mpg", "facet_wrap", "cyl", "NUMBER", "drop", "FALSE", "qplot", "displ", "hwy", "data", "mpg", "facet_grid", "NUMBER", "cyl", "NUMBER", "drop", "FALSE", "qplot", "displ", "hwy", "data", "mpg", "facet_grid", "NUMBER", "cyl", "NUMBER", "drop", "FALSE", "qplot", "displ", "hwy", "data", "mpg", "facet_grid", "NUMBER", "cyl", "NUMBER", "drop", "FALSE", "I", "m", "going", "to", "close", "this", "for", "now", "it", "s", "confusing", "but", "I", "m", "not", "convinced", "there", "s", "anyway", "to", "do", "it", "better", "NUMBER", "Works", "fine", "in", "dev", "version", "NUMBER", "Works", "for", "me", "in", "devel", "version", "NUMBER", "R", "diamonds", "cut", "ordered", "diamonds", "cut", "diamonds", "color", "ordered", "diamonds", "color", "diamonds", "clarity", "ordered", "diamonds", "clarity", "save", "diamonds", "file", "data", "diamonds", "NUMBER", "a", "midwest", "county", "as", "NUMBER", "character", "midwest", "county", "midwest", "state", "as", "NUMBER", "character", "midwest", "state", "save", "midwest", "file", "data", "midwest", "NUMBER", "a", "movies", "title", "as", "NUMBER", "character", "movies", "title", "save", "movies", "file", "data", "movies", "NUMBER", "a", "msleep", "name", "as", "NUMBER", "character", "msleep", "name", "msleep", "genus", "as", "NUMBER", "character", "msleep", "genus", "msleep", "order", "as", "NUMBER", "character", "msleep", "order", "save", "msleep", "file", "data", "msleep", "NUMBER", "a", "No", "reproducible", "code", "NUMBER", "I", "d", "suggest", "that", "when", "outlier", "NUMBER", "colour", "NULL", "it", "defaults", "to", "the", "same", "colour", "as", "the", "boxes", "NUMBER", "Also", "provide", "fortify", "function", "for", "cld", "glht", "use", "coef", "component", "and", "summary", "use", "test", "component", "Fixed", "in", "development", "version", "NUMBER", "This", "be", "unfortunate", "but", "I", "m", "not", "willing", "able", "to", "change", "the", "order", "of", "legend", "labels", "for", "special", "cases", "NUMBER", "I", "d", "put", "this", "under", "polishing", "plots", "for", "presentation", "which", "largely", "needs", "to", "be", "do", "by", "hand", "NUMBER", "Not", "relevant", "any", "more", "NUMBER", "Duplicate", "of", "NUMBER", "hadley", "do", "you", "mean", "the", "new", "element_xx", "function", "should", "accept", "both", "They", "do", "now", "NUMBER", "For", "example", "element_line", "be", "defined", "as", "R", "function", "colour", "NULL", "size", "NULL", "linetype", "NULL", "lineend", "NULL", "color", "NULL", "if", "be", "NUMBER", "null", "color", "colour", "color", "NUMBER", "Done", "in", "dev", "version", "NUMBER", "Works", "for", "me", "in", "devel", "version", "NUMBER", "It", "should", "be", "possible", "for", "a", "nicely", "design", "axis", "guide", "to", "this", "automatically", "particularly", "if", "it", "could", "use", "Justin", "Talbot", "s", "algorithms", "NUMBER", "I", "ve", "assigned", "to", "Kohske", "but", "marked", "it", "as", "a", "long", "term", "to", "do", "NUMBER", "On", "happens", "with", "facet_grid", "in", "devel", "version", "Is", "this", "one", "fix", "now", "It", "looks", "ok", "to", "me", "NUMBER", "Yup", "looks", "good", "to", "me", "NUMBER", "Fixed", "in", "devel", "version", "NUMBER", "Done", "in", "devel", "NUMBER", "Better", "test", "case", "be", "R", "ggplot", "data", "mtcars", "aes", "x", "mpg", "fill", "NA", "geom_density", "alpha", "NUMBER", "aes", "fill", "factor", "vs", "geom_text", "x", "Inf", "y", "Inf", "label", "Test", "hjust", "NUMBER", "vjust", "NUMBER", "ggplot", "data", "mtcars", "aes", "x", "mpg", "geom_density", "alpha", "NUMBER", "aes", "fill", "factor", "vs", "geom_text", "x", "Inf", "y", "Inf", "label", "Test", "hjust", "NUMBER", "vjust", "NUMBER", "and", "would", "be", "even", "better", "to", "use", "annotate", "to", "avoid", "duplication", "of", "text", "labels", "which", "works", "for", "me", "in", "the", "current", "dev", "version", "NUMBER", "Also", "currently", "a", "problem", "with", "legends", "and", "zooming", "with", "coord_cartesian", "NUMBER", "Need", "to", "write", "test", "to", "ensure", "it", "s", "fix", "NUMBER", "Here", "s", "a", "simple", "plot", "that", "illustrates", "both", "problem", "R", "qplot", "displ", "hwy", "data", "mpg", "colour", "hwy", "coord_cartesian", "xlim", "c", "NUMBER", "NUMBER", "scale_colour_gradient", "breaks", "seq", "NUMBER", "NUMBER", "by", "NUMBER", "Yes", "that", "strategy", "makes", "sense", "to", "me", "NUMBER", "I", "wonder", "if", "that", "strategy", "should", "be", "implement", "by", "scale_breaks", "And", "perhaps", "the", "default", "value", "for", "breaks", "should", "be", "waiver", "so", "that", "then", "NULL", "would", "suppress", "breaks", "altogether", "NUMBER", "Let", "s", "do", "that", "later", "see", "NUMBER", "Fixed", "with", "Kohske", "s", "latest", "patch", "NUMBER", "Yes", "let", "s", "fix", "that", "as", "part", "of", "a", "wider", "move", "to", "use", "waiver", "NUMBER", "It", "looks", "like", "neither", "of", "the", "graphs", "work", "anymore", "NUMBER", "Done", "in", "devel", "NUMBER", "That", "code", "would", "need", "a", "lot", "of", "work", "NUMBER", "We", "might", "be", "able", "to", "adapt", "the", "code", "from", "lvplot", "LINK", "That", "block", "of", "code", "makes", "my", "eyes", "bleed", "I", "think", "we", "should", "use", "quantiles", "and", "then", "mention", "that", "in", "the", "documentation", "NUMBER", "This", "be", "going", "to", "be", "a", "huge", "amount", "of", "work", "to", "add", "to", "the", "current", "API", "but", "should", "be", "relatively", "straightforward", "once", "the", "geom", "stat", "rewrite", "be", "complete", "NUMBER", "I", "m", "moving", "the", "milestone", "to", "NUMBER", "which", "be", "when", "hopefully", "that", "will", "occur", "NUMBER", "Done", "in", "devel", "with", "guide", "colorbar", "Works", "for", "me", "in", "devel", "NUMBER", "Probably", "as", "result", "of", "scales", "clean", "up", "NUMBER", "Will", "be", "do", "as", "part", "of", "densityVis", "package", "NUMBER", "Kohske", "can", "you", "please", "check", "this", "works", "I", "think", "since", "legends", "automatically", "pick", "up", "the", "shape", "the", "bug", "be", "the", "autodetecting", "in", "the", "legend", "code", "NUMBER", "Kohske", "would", "you", "mind", "taking", "a", "look", "please", "Yeah", "I", "think", "I", "did", "that", "deliberately", "a", "long", "time", "ago", "but", "it", "s", "no", "longer", "necessary", "NUMBER", "Closed", "note", "that", "if", "you", "put", "fix", "NUMBER", "in", "your", "commit", "message", "it", "will", "be", "automatically", "close", "NUMBER", "Works", "for", "me", "in", "devel", "NUMBER", "That", "s", "basically", "how", "it", "works", "in", "the", "devel", "version", "NUMBER", "But", "I", "think", "it", "s", "worth", "keep", "gradient", "NUMBER", "around", "because", "it", "automatically", "deals", "with", "a", "zero", "point", "NUMBER", "Works", "for", "me", "in", "devel", "NUMBER", "Free", "scales", "aren", "t", "going", "to", "be", "work", "with", "non", "Cartesian", "coordinates", "systems", "for", "a", "long", "time", "This", "be", "implement", "in", "the", "development", "version", "NUMBER", "It", "could", "probably", "do", "with", "more", "examples", "in", "the", "docs", "though", "NUMBER", "Working", "in", "devel", "version", "NUMBER", "Moved", "to", "LINK", "Is", "this", "one", "fix", "now", "I", "m", "not", "sure", "what", "the", "bug", "be", "NUMBER", "The", "bug", "be", "that", "the", "vertical", "line", "disappears", "probably", "because", "somewhere", "log", "Inf", "be", "be", "calculated", "Fixed", "in", "devel", "NUMBER", "HarlanH", "would", "you", "mind", "contribute", "a", "couple", "of", "reproducible", "examples", "Duplicate", "of", "NUMBER", "Intuition", "be", "arguable", "here", "NUMBER", "I", "think", "change", "now", "would", "cause", "even", "more", "confusion", "NUMBER", "A", "future", "version", "might", "separate", "into", "different", "geoms", "NUMBER", "Fixed", "in", "devel", "version", "NUMBER", "Part", "of", "densityVis", "Kohske", "would", "you", "mind", "taking", "a", "look", "Thanks", "NUMBER", "I", "think", "z", "order", "would", "be", "the", "way", "to", "go", "NUMBER", "Would", "you", "minding", "file", "an", "issue", "so", "we", "remember", "to", "do", "that", "NUMBER", "be", "probably", "a", "good", "milestone", "for", "that", "and", "gtable", "needs", "to", "get", "spun", "off", "into", "own", "package", "That", "was", "deliberate", "round", "butts", "look", "weird", "in", "the", "legend", "NUMBER", "Not", "sure", "what", "fix", "this", "but", "it", "s", "now", "work", "in", "bf", "NUMBER", "e", "NUMBER", "bdfae", "NUMBER", "a", "NUMBER", "a", "NUMBER", "c", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "bf", "NUMBER", "e", "See", "densityVis", "package", "Works", "in", "devel", "version", "NUMBER", "Now", "I", "don", "t", "see", "think", "the", "first", "case", "should", "work", "the", "position", "scales", "only", "see", "data", "as", "it", "be", "rendered", "by", "the", "layers", "and", "there", "be", "no", "x", "data", "on", "that", "plot", "NUMBER", "Adding", "geom_blank", "should", "make", "it", "work", "without", "error", "though", "I", "ll", "look", "into", "that", "NUMBER", "Fixed", "in", "LINK", "Not", "reproducible", "and", "haven", "t", "seen", "it", "lately", "so", "closing", "NUMBER", "Fixed", "in", "devel", "NUMBER", "It", "works", "with", "coord_trans", "y", "log", "NUMBER", "R", "base", "coord_trans", "y", "log", "NUMBER", "I", "agree", "this", "be", "poorly", "defined", "for", "scales", "NUMBER", "Maybe", "it", "should", "give", "a", "warning", "message", "NUMBER", "Duplicate", "of", "NUMBER", "Works", "for", "me", "in", "devel", "version", "NUMBER", "The", "map_layout", "function", "in", "panel", "NUMBER", "r", "assumes", "that", "if", "it", "gets", "an", "empty", "data", "frame", "then", "the", "data", "should", "be", "inherited", "from", "plot_data", "NUMBER", "The", "problem", "be", "that", "there", "s", "no", "way", "to", "tell", "whether", "the", "empty", "data", "frame", "be", "pass", "in", "or", "if", "it", "was", "just", "not", "specified", "in", "the", "layer", "NUMBER", "When", "the", "geom", "be", "not", "specified", "this", "be", "what", "happens", "layer", "new", "calls", "fortify", "NUMBER", "NULL", "which", "returns", "data", "NUMBER", "frame", "and", "it", "s", "this", "data", "frame", "that", "can", "t", "be", "distinguished", "from", "an", "empty", "data", "frame", "pass", "in", "to", "the", "layer", "NUMBER", "One", "possible", "solution", "be", "to", "make", "fortify", "NUMBER", "NULL", "add", "an", "attribute", "to", "the", "data", "frame", "and", "then", "test", "for", "that", "attribute", "in", "map_layout", "NUMBER", "The", "fix", "I", "ve", "submitted", "works", "for", "this", "although", "you", "need", "to", "set", "inherit", "NUMBER", "aes", "FALSE", "R", "qplot", "mpg", "wt", "data", "mtcars", "geom_point", "data", "data", "NUMBER", "frame", "colour", "red", "inherit", "NUMBER", "aes", "FALSE", "Hmmm", "it", "shouldn", "t", "be", "too", "hard", "if", "you", "follow", "a", "parallel", "path", "to", "facet_grid", "NUMBER", "One", "roadblock", "be", "figuring", "out", "what", "argument", "the", "function", "should", "accept", "NUMBER", "Koshke", "another", "one", "for", "you", "to", "look", "at", "NUMBER", "Hmmm", "actually", "I", "think", "I", "might", "have", "already", "fix", "this", "Done", "in", "devel", "NUMBER", "Another", "one", "for", "you", "Works", "in", "devel", "NUMBER"], "text_count": [0, 13356, 2916, 1032, 506, 60, 734, 7, 91, 1879, 2143, 3560, 2125, 1289, 1586, 382, 0, 0, 0, 0, 4207, 1379, 839, 499, 1016, 866, 0, 0, 0, 0, 7624, 4694, 3143, 97, 1804, 502, 0, 0, 0, 0, 10475, 50, 4867, 4901, 2950, 0, 0, 0, 0, 0, 2814, 1202, 1245, 846, 1038, 455, 1002, 0, 0, 0, 8036, 896, 6172, 417, 0, 0, 0, 0, 0, 0, 5299, 684, 3478, 1441, 909, 0, 0, 0, 0, 0, 9751, 5318, 701, 3254, 406, 419, 0, 0, 0, 0, 484, 2987, 307, 0, 0, 0, 0, 0, 0, 0, 8448, 1611, 4771, 2084, 0, 0, 0, 0, 0, 0, 14395, 29922, 322, 1140, 326, 458, 0, 0, 0, 0, 41327, 122, 32204, 399, 6984, 7967]}, {"repo": "ggplot2", "type": "nonelite", "title": "", "number of text": 953, "text": "    I would think it would be better for `na.value` to default to `\"blank\"`; that is, missing data would, by default, not show up.\n\nThis is related to Issue #623 and Issue #638. There, the specific geom (`geom_segment`) was modified to eliminate `NA`. Addressing this at the scale level would mean that each geom would not have to be changed. Changes here should be then see if the changes in #638 should be reverted (so that `geom_segment` can represent NA values if desired).\n\nFinally, the changes need to appear in both `scale_linetype` and `scale_linetype_manual` because that has a different instantiation path. I don't know if `scale_linetype_identity` should have this as well.\n\nEffectively, the problem is that the default value for `na.value` (`NA`) is not a valid value for linetypes and so any use of linetype must have a different default. Citation for `NA` not being valid is in the help for `par` under the \"Line Type Specification\" section.\n\n> Note that `NA` is not a valid value for `lty`. \n\n(I see that I'm not typing fast enough because a commit has already been made on this, but the above points need to be addressed for this to be considered closed.)\n @wch Well, I think having a default value which will result in an error, especially as cryptic an error as this gives, is a problem.  Consider:\n\n``` r\nggplot(data=msleep, aes(x=brainwt, y=bodywt, linetype=factor(vore)), group=vore) + \n  geom_line() +\n  scale_linetype_manual(values=c(\"solid\", \"22\", \"42\", \"44\"))\n# Error in grid.Call.graphics(L_lines, x$x, x$y, index, x$arrow) : \n#   invalid hex digit in 'color' or 'lty'\n# In addition: Warning message:\n# Removed 25 rows containing missing values (geom_path). \nggplot(data=msleep, aes(x=brainwt, y=bodywt, linetype=factor(vore)), group=vore) + \n  geom_line() +\n  scale_linetype_manual(values=c(\"solid\", \"22\", \"42\", \"44\"), na.value=\"blank\")\n# Warning message:\n# Removed 27 rows containing missing values (geom_path). \n```\n\nIdentity is even worse, because it seems `na.value` does not even have an effect (possibly an altogether different bug):\n\n``` r\nmymsleep <- \n  transform(msleep,\n            linetype = factor(vore, \n                              levels = c(\"carni\", \"herbi\", \"insecti\", \"omni\"),\n                              labels = c(\"solid\", \"22\", \"42\", \"44\")))\n\nggplot(data=mymsleep, aes(x=brainwt, y=bodywt, linetype=linetype), group=vore) + \n  geom_line() +\n  scale_linetype_identity()\n# Error in grid.Call.graphics(L_lines, x$x, x$y, index, x$arrow) : \n#   invalid hex digit in 'color' or 'lty'\n# In addition: Warning message:\n# Removed 25 rows containing missing values (geom_path). \n\nggplot(data=mymsleep, aes(x=brainwt, y=bodywt, linetype=linetype), group=vore) + \n  geom_line() +\n  scale_linetype_identity(na.value = \"blank\")\n# Error in grid.Call.graphics(L_lines, x$x, x$y, index, x$arrow) : \n#   invalid hex digit in 'color' or 'lty'\n# In addition: Warning message:\n# Removed 25 rows containing missing values (geom_path). \n\nmymsleep <- \n  transform(msleep,\n            linetype2 = factor(vore,\n                               levels = c(\"carni\", \"herbi\", \"insecti\", \"omni\", \"NA\"),\n                               labels = c(\"solid\", \"22\", \"42\", \"44\", \"blank\")))\nmymsleep$linetype2[is.na(mymsleep$linetype2)] <- \"blank\"\n\nggplot(data=mymsleep, aes(x=brainwt, y=bodywt, linetype=linetype2), group=vore) + \n  geom_line() +\n  scale_linetype_identity()\n# Warning message:\n# Removed 27 rows containing missing values (geom_path). \n\nggplot(data=mymsleep, aes(x=brainwt, y=bodywt, linetype=linetype2), group=vore) + \n  geom_line() +\n  scale_linetype_identity(na.value = \"blank\")\n# Warning message:\n# Removed 27 rows containing missing values (geom_path). \n```\n\nPerhaps this is more a discussion of how things need to be dealt with in regard to Issue #712, but I decided to continue the discussion here.\n  The documentation for gg_dep and the function arguments disagreed on\nthe name of the second argument. Fixed documentation to agree with code.\n\nTwo instances of multiple character strings being passed to gg_dep\n(where it was possible to pass them to message/warning) were fixed\nby wrapping them in paste with a sep of \\n (like was done in other\nfunctions).\n\nThere is no function error, it is stop.\n   What was wrong with the old behaviour of finite cases?  I can't intuit how your version is different.\n Ok got it - I think it's probably related to http://r.789695.n4.nabble.com/simplify2array-edge-case-td4645894.html.  Your fix looks good.\n  Looks good!\n   Nice! That definitely deserves a bullet in the news.\n   For the following example, I was expecting that geom_contour would work without adding additional mappings:\n\n``` R\nx = c(1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5)\ny = c(1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5)\nx2 = x*y\ndf_test = data.frame(a=x, b=y, c=x2)\nplot = ggplot(df_test, aes(x=a, y=b, fill=c)) +   \n  geom_tile() \nplot\nplot + geom_contour()\n# Error: stat_contour requires the following missing aesthetics: z\nplot +   geom_contour(aes(z=c))\n# works\n```\n I was just surprised that it didn't work: More or less I wanted a tile plot with contours and I thought that both of them represent the same data mappings. \n  I ran into a probable bug. I am working with big dataset and data.table package. Though it is hard to reproduce, or I am not aware of way of doing it...\n\nFirst I have some data, that print graphs in this form \n\n```\n  plot_cleared <- ggplot(crude_dataset_2[abs(log_ret)>0.003], aes(strptime(Time,\"%H%M\"), log_ret))\n  plot_cleared + geom_point(alpha = 1/10) + xlab(\"Time\") + ylab(\"Log-return\") + scale_y_continuous(limits=c(-0.015,0.015))\n```\n\nit works fine, I draw several graphs, it always warns that some rows contain missing values (as in the subject above, but after some playing around with graphs (generally changing parameter like 0.003 to something different) starts to produce error from the warning.\n\nIt seems as if something internally changed `options(warnings = )` to a value that converts warnings to errors. (I haven't been able to check it, because it hasn't happened since I came up with this explanation.) The data didn't change at all, so the only explanation is `ggplot2` or some interaction between `data.table` and `ggplot2`, which is weird, because `data.table` should pretend to be `data.frame`...\n\nThe error doesn't go away with unloading of the package (so it supports the option variant), but when I restart the r-session, it is fine.\n\nI cannot even share the data, because they are confidential :(.\n  Cleaner commit of pull request #683. \n\nI reordered the class attribute of element objects so that the subclass is listed first. As it stands now, an S3 method could not be written for element_blank, etc.\n  Implements setting of only one limit of a continuous scale by specifying\nNA for the limit which you don't want to set.  See #557.\n\nI had to use NA instead of NULL to implement this, as is.null() is not \nvectorized, a vector with null at any location is TRUE.\n I agree with all of your comments, the new commit should fix them.  Also thanks for pointing out the any function, I was not aware of it, and it makes the code much clearer, I always thought the sum(logicals) idiom seemed hacky.  Thanks for the comments!\n Is there anything else you need from this pull request in order to merge it?  I would be happy to make any changes needed.\n Hi Jim - at the moment I'm working on other projects besides ggplot2, but when I get back to it I'll be able to take a closer look at the pull request. Offhand it looks fine, but merging changes like this requires some careful consideration to make sure it that it's done right, and also that it doesn't introduce subtle bugs.\n  I reordered the class attribute of element objects so that the subclass is listed first. As it stands now, an S3 method could not be written for element_blank, etc. \n Will do.  I'm sorry about the spurious changes, and I'm not trying to sound like a dick, but problem is with the ggplot source The ggplot source it is filled with trailing whitespace, something which most projects disallow for this very reason. Could you cleanup the code to remove all the trailing whitespace? Or I could submit a patch that does it.\n And I was loathe to mention it because it is your project, so you set the coding style. It is just that in this case the consensus appears to be to not allow them: [R internals](http://cran.r-project.org/doc/manuals/R-ints.html), Linux kernel, Drupal, Mozilla, Keberos [SO](http://stackoverflow.com/questions/3515597/git-add-only-non-whitespace-changes) and basically any coding convention I can find prohibit trailing whitespace. Even without a text editor, pre-commit hooks can be added to git to strip out the trailing whitespace. [Here](https://github.com/jrnold/ggplot2/compare/fix/kill-trailing-whitespace) is a diff that removes all the trailing whitespace: there were 2290 lines in the r files.\n\nBut I know that you set the coding standards, and I'll adjust. And I know that it is frustrating from you end to have extraneous lines in diffs, but it is also frustrating from the submitters end. I have a couple of patches that I've sat on because I it is too tedious to add back in trailing whitespace to get it to work. \n\nIs Rstudio going to add that feature soon? \n\nAlso, what do you mean by branching from hadley/master? I keep jrnold/master in-sync with hadley/master and then make a new branch for any feature / fix.\n I was taking the example ESS config file `ess-nuke-trailing-whitespace-p` as endorsing no trailing whitespace. But I didn't grep it, so apparently, that isn't followed in practice.  Google's coding standards for C++ excludes trailing whitespace, and so does the [Linux kernell](http://www.kernel.org/doc/Documentation/CodingStyle) with references to git. I still think it is better to require no trailing whitespace in any code that versioned, but the decision isn't mine to make, so at this point I'll shut up and make sure to turn off nuking whitespace when I edit ggplot.\n\nI'll close this request and open a new branch to make those couple of changes without all the extraneous line diffs. \n  I would like to print some \"explanation\" next/below the plot. This seems to be really hard:\nhttp://stackoverflow.com/questions/10014187/displaying-text-below-the-plot-generated-by-ggplot2\n\nIt would be nice if ggplot would have a call like \n\n```\np <- ...\np <- p + description(position=\"below\", text=\"some explanation about the plot\", wrap=T)\np\n```\n\nwhich would print the description below the plot (and wraps it, if needed -> see #681).\n This is something that I think is outside of the scope of ggplot2 - and it's usually much easier to do outside of R.\n From my point of view it is the same as `ggtitle(\"...\")` :-) Having to do this outside of R would mean that it can't be used in knitr/... and inside R like in the mentioned stackoverflow question is really hard.\n\nThis isn't about adding a captions (like in latex) but more like \"(C) ggplot2 developers\", \"Data from >>big survey of anything<< project\" or \"Plot based on data with x=3 and y=4\".\n\nIt would be nice if you could reconsider this issue. Thanks!\n Umm, can you give an actual example Jan? Normally when inserting figures, you would then provide the caption text, yourself. What is so hard about putting the text in the latex or markdown after the figure is generated? Unless you had a bunch of figures with some kind of pre-generated attributes that don't fit in the title. But if that is the case then I can imagine using a loop, and perhaps printing ggplot plots, and then printing text. But I think @hadley is right, this normally is outside the scope of the plotting routine. But I'd be curious to see an actual example where it is necessary.\n In my case I just saved several similar plots where I subsetted my original dataframe and putting \"(at x=5, y=6)\" in the title became really ugly. I was later adding the plots to a powerpoint presentation, where it was nice that the actual \"description\" of the plot was all contained in the png.\n  This comes from the discussion at  jrnold/ggthemes#2: Basically I would like to be able to do something like this\n\n``` R\nxkcd <- T\nbw_journal <- F\nif (xkcd) {\n    ggplot_default_style(xkcd)\n} else if (bw_journal) {\n     ggplot_default_style(tufte)\n} else {\n    ggplot_default_style(default)\n}\nplot <- ... # without any color of similar appearance definitions\nplot\n```\n\nIn the discussion jrnold/ggthemes#2 @jrnold said that this is currently not possible as you have to add more ggplot2 calls to change the plot to the desired appearance. This includes different color schemes, different axis and in the case of xkcd-style plots a special jittery line style (for every drawn line).\n\nWould it be possible to enhance themes so that they can effect this things so that as long as you don't change colors and so on, the theme will be able to overwrite such defaults?\n Mathematica can do it with one call per plot:  http://mathematica.stackexchange.com/questions/11350/xkcd-style-graphs\n\n:-)\n  ``` R\ndat <- data.frame(x=rnorm(7), g=c(\"a\",\"a\",\"a\",\"b\",\"b\",\"b\",\"c\"))\nggplot(dat, aes(x=x, colour=g)) + geom_density()\n#Error in rowSums(vapply(x, is.finite, logical(nrow(x)))) : \n#  'x' must be an array of at least two dimensions\n#Error in UseMethod(\"scale_dimension\") : \n#  no applicable method for 'scale_dimension' applied to an object of class \"NULL\"\n\n\n# For an even simpler version:\ndat <- data.frame(x=3, g=\"a\")\nggplot(dat, aes(x=x)) + geom_density()\n\n```\n  This fixes #673.\n  This is discussed in detail at [stackoverflow](http://stackoverflow.com/questions/12560858/using-coord-flip-with-facet-wrapscales-free-y-in-ggplot2-seems-to-give-une).\n\nWhen I combine coord_flip() and facet_wrap(scales= \"free_y\" or \"free_x\") it makes the horizontal axis scale variable but it repeats the tick marks for the vertical facet axes only instead of for the horizontal facet axes only:\n\n``` R\n    c <- ggplot(diamonds, aes(clarity)) + geom_bar()\n    c + facet_wrap(~cut, scales = \"free_y\") + coord_flip()\n```\n\nI am running ggplot2 version 0.9.2.1 on R 2.15.1 under Mac OS X. I would be very interested to hear of any potential workarounds.\n\nAlso, I am not sure that this is the place for it, but ggplot2 is great.\n You can not use free scales with a non-Cartesian coordinate system - we need to more clearly advertise this with an error or warning.\n  ``` R\n\nlibrary(ggplot2)\n\nworld_map <- geom_polygon(aes(long, lat, group = group),\n  data = map_data(\"world\"), fill = NA, colour = \"white\", inherit.aes = FALSE)\n\nggplot() + world_map\n```\n I just tested this out with earlier version (0.8.9, 0.9.0, 0.9.1), and it's still slow. I suspect it's because there are just a lot of segments in a whole world map. I think it's possible to request lower resolution polygons from the maps package.\n `geom_path` is much much much faster.  It's probably because `geom_polygon` creates a grob for each group, rather than one grob with the appropriate `id` set\n I don't think so - and it should have a big performance impact. I can't believe that I didn't notice this before.\n   scales:  8fa5a67b2556da16dff076af4f9ecf564918942f\ngtable: d20948645d0a0a8b3e83dd92ed8e6358f2c1c10c\nggplot2: e4fd80a3b2c46e2e540890b5f8c39390bbada438\n\n```\nqplot(letters[1:3], 1:3)\n```\n\nfails to:\n\n```\nError: Discrete value supplied to continuous scale\n```\n By `load_all`ing the relevant packages:\n\n```\nload_all(\"~/Dropbox/dev/R/scales/\")\nload_all(\"~/Dropbox/dev/R/gtable/\")\nload_all(\"~/Dropbox/dev/R/ggplot2/\")\n```\n\nby `library`ing, it wokrs:\n\nAm I missing something (maybe w.r.t. devtools)?\n Worked with the latest devtools, thanks.\nBTW, why was the `~/Rpackages` support removed?\n >  I guess he was wrong about the second part. :)\n\nDefinitely yes :-)\nHere is the other person who loves the `.Rpackages`.\n\nBut okey, I can manage things by myself.\n  Maybe I am wrong, I always think if the aesthetics control is not mapped to variable, I don't  have to pass it with aes(). But looks it's not true with geom_tile.\n1.  Here is an example\n\n```\n# Generate data\nlibrary(ggplot2)\npp <- function (n,r=4){ \n  x <- seq(-r*pi, r*pi, len=n) \n  df <- expand.grid(x=x, y=x) \n  df$r <- sqrt(df$x^2 + df$y^2) \n  df$z <- cos(df$r^2)*exp(-df$r/6) \n  df \n} \n\n## doens't work\nggplot(pp(20)) + geom_tile(aes(x = x, y = y, fill = z), width = 0.3, height = 0.3)\n## works\nggplot(pp(20)) + geom_tile(aes(x = x, y = y, fill = z, width = 0.3, height = 0.3))\n```\n\n```\n> sessionInfo()\nR Under development (unstable) (2012-07-17 r59871)\nPlatform: x86_64-unknown-linux-gnu (64-bit)\n\nlocale:\n [1] LC_CTYPE=zh_CN.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=C                 LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_0.9.1\n\nloaded via a namespace (and not attached):\n [1] colorspace_1.1-1   compiler_2.16.0    dichromat_1.2-4    digest_0.5.1      \n [5] grid_2.16.0        labeling_0.1       MASS_7.3-19        memoise_0.1       \n [9] munsell_0.3        plyr_1.7.1         proto_0.3-9.2      RColorBrewer_1.0-5\n[13] reshape2_1.2.1     scales_0.2.1       stringr_0.6.1      tools_2.16.0    \n```\n This looks like an issue with `stat_identity`:\n\n``` R\n# Width works with bin\nggplot(PlantGrowth, aes(x=group)) + geom_boxplot(width=.2, stat=\"bin\")\n\n# Width doesn't work with identity\npgsub <- PlantGrowth[c(1,11,21), ]\nggplot(pgsub, aes(x=group, y=weight)) + geom_bar(width=.2, stat=\"identity\")\n\n# Width works when in aes()\nggplot(pgsub, aes(x=group, y=weight)) + geom_bar(aes(width=.2), stat=\"identity\")\n\n```\n  Can we get a message in plotmatrix that GGally is prefered? I was using it for a while, not realising that it's basically deprecated, until I read https://github.com/hadley/ggplot2/issues/158. \n   Hi,\n\nI just updated ggplot to the latest version \n\nInstalling package(s) into \u2018/Library/Frameworks/R.framework/Versions/2.15/Resources/library\u2019 (as \u2018lib\u2019 is unspecified)\ntrying URL 'http://www.stats.bris.ac.uk/R/bin/macosx/leopard/contrib/2.15/ggplot2_0.9.1.tgz'\n\nand then running it on any dataset of my choice leads to:\n\nError in as.trans(trans) : internal error -3 in R_decompress1\nIn addition: Warning message:\nIn as.trans(trans) : restarting interrupted promise evaluation\n\nData plots fine with lattice. \n  Looks good.\n  Hmmm, it will break printing, but it shouldn't be anything else? And it will stop breaking for other's who are using proto.\n\nI suspect this will be the last release with proto, so it probably doesn't matter much either way.\n  Such a minimal theme is generally quite popular; rather than redefining it in many packages, could it be included here?\n As a similar kind of thing, I would suggest a theme_normal as in\n\n```\ntheme_barebones <- function(base_size = 12, base_family = \"\"){\n  theme_bw(base_size, base_family) %+replace%\n    theme(\n      panel.border = element_rect(fill = NA, colour = NA),\n      axis.line=element_line(colour=\"black\"),\n      panel.grid.major = element_line(colour = NA),\n      panel.grid.minor = element_line(colour = NA)\n    )\n}\n\nqplot(displ, hwy, data = mpg) + theme_barebones()\n```\n\nI don't know what the policies are these days about adding themes into ggplot2, but it seems reasonable to put in a collection of prominent ones.\n I like this theme. What about calling it `theme_classic`?\n Yea, much better!\n  Fixes #188.  Also general tidy up of code and improved examples\n Rebased and merged at 53912e788dac033f9788712e94e5b6b9cbaa206a.\n  Why no `na.rm` argument?\n  Looks good!\n  `axis.ticks.length = unit(0, \"lines\")` makes the height or width for the ticks zero, but still gtable of axis ticks is drawn.\nI think it should not be drawn when length is zero.\n  And should `scale_area` be the default?  If so, that will have to happen in a non-backward compatible release.\n Maybe something like this?\n\n``` R\nscale_area <- function(..., max_size = 6) {\n  continuous_scale(\"size\", \"area\", \n    pal = abs_area(max_size), \n    rescaler = rescale_max, ...)\n}\n\nabs_area <- function(max) {\n  function(x) rescale(sqrt(abs(x)), c(0, max), c(0, 1))\n}\n\nrescale_max <- function(x, to = c(0, 1), from = range(x, na.rm = TRUE)) {\n  x / from[2] * to[2] \n}\n```\n\nIt may also need a warning if the size is negative.  And maybe these function should live in the scales package.  \n\nThis probably should be the default for `scale_area` but is not backwards compatible.\n To preserve backward compatibility, how about introducing `scale_size_area` with the new code, and deprecating the old `size_area`? This would also make the scale naming more consistent.\n `abs_area` and `rescale_max` never made it into the code.\n Ah. Not sure why ggplot2 wasn't importing scales but\nrebuilding/reinstalling the packages fixed it.\n\nOn Fri, Oct 12, 2012 at 8:34 PM, Winston Chang notifications@github.comwrote:\n\n> Those functions are in the scales package.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/hadley/ggplot2/issues/635#issuecomment-9400508.\n  Is there a reason to have both a CHANGELOG and a NEWS file? Looks like the former hasn't been updated.  \n No reason.  I think we can either delete `CHANGELOG` or move it into `NEWS`\n  I found myself needing a cumulative stat_bin function for some graphing work I was doing, similar to the discussion here https://groups.google.com/d/msg/ggplot2/UT8f5K5Agf0/eWZM_GKoGI0J.  Anyway, as this is my first foray into the ggplot2 code, it is possible there is a better way solution.  Still, I hacked stat_cbin together and it has worked quite well for my needs so I thought I'd pass it on in case is useful for inclusion.\n or,\n\n```\nggplot(simple, aes(x)) + stat_bin(aes(y = cumsum(..count..)))\n```\n\nwill work similarly.\n Thanks for the contribution - I don't think it's commonly enough to include in ggplot2, but we're working on ways to make it easier to distribute additional geoms/stats in external packages.\n  Changing `geom_bar$reparameterise` to \n\n``` R\n  reparameterise <- function(., df, params) {\n    df$width <- df$width %||% \n      params$width %||% (resolution(df$x, FALSE) * 0.9)\n\n    if (is.null(df$y)) stop(\"geom_bar: missing y aesthetic\", call. = FALSE)\n    if (is.null(df$x)) stop(\"geom_bar: missing x aesthetic\", call. = FALSE)\n\n    df$ymin <- pmin(df$y, 0)\n    df$ymax <- pmax(df$y, 0)\n    df$xmin <- df$x - df$width / 2\n    df$xmax <- df$x + df$width / 2\n\n    df\n  }\n```\n\nhelps a little but is still not that informative.\n We could also add\n\n```\n    if (is.null(df$y) && !is.null(df$count)) {\n      df$y <- df$count\n    }\n```\n\nand in `stat_bin` maybe use `y` if `weight` is not specified.  Or is that too magical?\n I think that's reasonable - I really don't how the current behaviour makes any sense.\n  I create bar charts with coord_flip, unfortunately this creates a reverse alphabetical order y scale. I would commonly reorder the factors in the underlying data, but always found this slightly cumbersome.\n\nRecently I figured out I could use `xlim(rev(levels(x$variable)))` instead to fix the order, however this seems to \"reset\" the dropped factors when paired with facets.\n ```\n# plot some bar charts with states on the axis split up between two facets\nstate <- factor(sample(state.name, size=10))\nvalue <- sample(50:60, size=10)\nfacet <- factor(sample(1:2, size=10, replace=T))\n\ndata <- data.frame(state, value, facet)\n\n# the below graph appears to have the final y axis \"backwards\", that is if I\n# read top to bottom it is in reverse alphabetical order, note this is\n# expected behavior via coord_flip()\nggplot(data, aes(x=state, y=value)) +\n  facet_wrap(~ facet, ncol=1, scales=\"free_x\") +\n  geom_bar(stat=\"identity\") +\n  coord_flip()\n\n# one way to fix this is to just reorder the underlying factor\ndata$state.rev <- factor(data$state, levels=rev(levels(data$state)))\nggplot(data, aes(x=state.rev, y=value)) +\n  facet_wrap(~ facet, ncol=1, scales=\"free_x\") +\n  geom_bar(stat=\"identity\") +\n  coord_flip()\n\n# but rather than modify our underlying factor, we could use xlim instead\n# however this seems to now ignore the scales=\"free_x\" and puts all\n# states on the y axis for both facets\nggplot(data, aes(x=state, y=value)) +\n  facet_wrap(~ facet, ncol=1, scales=\"free_x\") +\n  geom_bar(stat=\"identity\") +\n  coord_flip() +\n  xlim(rev(levels(data$state)))\n\n# maybe we need to add drop=T (I'm not sure of the interaction here), but that\n# doesn't seem to change anything\nggplot(data, aes(x=state, y=value)) +\n  facet_wrap(~ facet, ncol=1, scales=\"free_x\", drop=TRUE) +\n  geom_bar(stat=\"identity\") +\n  coord_flip() +\n  xlim(rev(levels(data$state)))\n```\n This is by design - setting the limits overrides the scales so that they don't look at the data at all.  It's probably not that desirable in this case, but there's an easy workaround and fixing it would be hard.\n Thanks, that makes sense.\n  ```\nlibrary(\"ggplot2\")\n\n# create a collection of cases\nd <- expand.grid(a=c(\"a\", \"b\"), x=c(\"x1\", \"x2\", \"x3\", \"x4\"))\n# with replicates\nd <- rbind(d, d, d)\n# add data\nset.seed(1)\nd$y <- runif(nrow(d))\n\n# plot everything\n(p <- ggplot(d) + geom_boxplot(aes(x=x, y=y)) + facet_grid(a~.))\n\n# now make some holes: remove all observations for a given combination of x and a \nds <- d[-which(d$a == \"b\" & d$x %in% c(\"x1\", \"x3\")),]\np %+% ds\n# -> unequal width boxplots\n\nds <- d[-which(d$x %in% c(\"x1\") | d$a == \"b\" & d$x %in% c(\"x3\")),]\np %+% ds\n# -> ok, because x1 was removed in all\np %+% ds + scale_x_discrete(drop=F)\n# but when x1 is kept explicitly, the issue reappears\n```\n\nThis may seem like a corner issue but in fact it appears quite often when plotting datasets with missing cases and `facet_grid`: in that situation, most combinations of cases are kept because the levels exist in at least one the facets, and this result in very erratic looking plots, with boxplot of varying width across all facets.\n\nSo it's actually pretty severe.\n I think you can distinguish between discrete and continuous because discrete will be integers.  Maybe resolution should include a specific check for that?  Or maybe we should have `ggresolution` which is specialised for this feature of ggplot2?\n  I think this should be simple fix: make `censor` return `NA_real_` instead of `NA` (which is logical, and hence counted as discrete).  Even better you should return an NA of the same type as `x` - but I don't know an easy way of doing that.\n   Using ggplot 0.9.0\n\n```\nstat_vline(intercept=.5, linetype=\"dotted\")\n\nError in get(x, envir = this, inherits = inh)(this, ...) : \n  stat_vline now uses xintercept instead of intercept\n```\n\nbut:\n\n```\n+   stat_vline(xintercept=.5, linetype=\"dotted\")\nError in do.call(\"layer\", list(mapping = mapping, data = data, geom = geom,  : \n  argument \"intercept\" is missing, with no default\n```\n\nUsing geom_vline instead works fine.\n  Hi, \n\nI didn't investigate if it's Hmisc or ggplot, but the following example from \"stat_summary\" page is producing mambo jambo:\n\n```\n\nd <- qplot(cyl, mpg, data=mtcars)\nstat_sum_df <- function(fun, geom=\"crossbar\", ...) {\n    stat_summary(fun.data=fun, colour=\"red\", geom=geom, width=0.2, ...)\n}\nd + stat_sum_df(\"mean_cl_boot\")\n```\n\nThanks.\n I think `summarise_by_x` just needs to modify the group column - that's what most of the stats do (and what the default `calculate_groups` does.\n  That's probably because of the more sensitive `zero_range` :(\n I think `zero_range` needs scale factor, or tolerance.\n  I did start thinking about this - I think it should also be possible to change the position of the facet labels, and then you also need some way of specifying whether the axes should be inside or outside of the facet labels.\n Here is my previous ideas and implementations:\nhttps://groups.google.com/forum/?fromgroups=#!topic/ggplot2-dev/JkJU5CLBkQw\n\nNow the internals of ggplot2 is largely changing, so it cannot wokr as is.\n   Now we don't need the wrapping by gTree for justification.\n I hope that the `vpStack` trick will improve speed as well as introduce simplicity!!\nAnyway, thanks for the statistical test ;-p\n You may implement the function for counting the elapsed time and performing statistical test from the previous commit in your visual test library ;-p\n  I recently updated to ggplot2 v0.91 (R version 2.15.1)\nMy old ggplot scripts now fail due to two missing functions:\n- comma\n- scale_y_probit\n\nAfter searching the changelog and various lists I can't find any mention of the function being deprecated.\n\nexample included:\n\ntest<-data.frame(ecdf=c(0.02040816,0.04081633,0.06122449,0.08163265,0.10204082,0.14285714,0.14285714,0.16326531,0.24489796,0.24489796,0.24489796,0.24489796,0.26530612,0.28571429,0.30612245,0.32653061,0.36734694,0.36734694,0.38775510,0.40816327,0.42857143,0.46938776,0.46938776,0.48979592,0.53061224,0.53061224,0.59183673,0.59183673,0.59183673,0.61224490,0.63265306,0.65306122,0.67346939,0.69387755,0.71428571,0.73469388,0.75510204,0.77551020,0.79591837,0.81632653,0.83673469,0.85714286,0.87755102,0.89795918,0.91836735,0.93877551,0.95918367,0.97959184,0.99900000),lat=c(50.7812,66.4062,70.3125,97.6562,101.5620,105.4690,105.4690,109.3750,113.2810,113.2810,113.2810,113.2810,125.0000,136.7190,148.4380,164.0620,167.9690,167.9690,171.8750,175.7810,183.5940,187.5000,187.5000,191.4060,195.3120,195.3120,234.3750,234.3750,234.3750,238.2810,261.7190,312.5000,316.4060,324.2190,417.9690,507.8120,511.7190,562.5000,664.0620,683.5940,957.0310,1023.4400,1050.7800,1070.3100,1109.3800,1484.3800,1574.2200,1593.7500,1750.0000))\n\nxbreaks<-c(50,100,150,200,300,500,1000,2000)\nybreaks<-c(1,2,5,10,20,30,40,50,60,70,80,90,95,98,99,99.5,99.9)/100\n\np <- ggplot( test, aes(lat, ecdf) ) \np+geom_point()+scale_y_probit(\"cumulative probability %\", formatter='formatter100', breaks=ybreaks)+\nscale_x_log10(breaks=xbreaks, labels = comma(xbreaks)) \n You need to explicitly load the `scales` package to get comma, and use `scale_y_continuous(trans = probit)`.\n Thanks for the tips, might be good to update the manual pages on the ggplot2 website too, they still refer to the old scale_y_probit function.\n  That's definitely an improvement! I wonder what criterion we should really be satisfying in order to get smooth circles all the way down.\n So basically we'd need a distance that capture this, and then maybe think about doing the breaking recursively (or at least do a second round if the distances in the first round aren't so good)\n   I was looking for this ability recently as some of my facet factor levels are numeric so the actual strip text isn't very helpful for viewers unless they can tell by the numeric levels which variable combination they're looking at.\n\nThe question was actually just asked on SO: http://stackoverflow.com/questions/11353287/how-do-you-add-a-general-label-to-facets-in-ggplot2\n\nThere are a couple of similar questions linked in the question and in the comments. The question provides a  nice mockup of what this option would produce if the above wasn't clear.\n I linked to it on the SO question as well. Thanks!\n\nJohn\n\nOn Sun, Jul 8, 2012 at 2:59 PM, Winston Chang\nreply@reply.github.com\nwrote:\n\n> This discussion may also be of interest:\n> https://groups.google.com/forum/?fromgroups#!topic/ggplot2-dev/_gpWsOWrSDk\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/hadley/ggplot2/issues/612#issuecomment-6834055\n A similar feature request, nested sets of factors levels on the model axis.\n\nhttps://groups.google.com/forum/?fromgroups=#!topic/ggplot2/UbSzepDnJ24\n\nSantiM.\n  This fixes #608. Code fix was provided by Kohske Takahashi.\n    Last time I discussed justification with Hadley, it was suggested to write a function that embeds a grob in a gTree. Consider this,\n\n``` r\nlibrary(gtable)\n\na <- gtable(unit(5, \"cm\"), unit(c(3, 1), \"cm\"))\n\ng1 <- rectGrob(gp = gpar(lty=3, fill=\"blue\", alpha=0.2))\n\n## doesn't work, presumably vp is modified by gtable\ng2 <- xaxisGrob(seq(0, 1, by=0.1), vp=viewport(y=1, just=\"bottom\"))\n\n## embedding in a gTree works, as the child viewport is not overwritten\ng2 <- gTree(children=gList(xaxisGrob(seq(0, 1, by=0.1),\n              vp=viewport(y=1, just=\"bottom\"))))\n\na <- gtable_add_grob(a, g1, 1, 1)\na <- gtable_add_grob(a, g2, 2, 1)\nplot(a)\n```\n\nI'm still not convinced that gtable shouldn't support justification, precisely because of such cases. \n `gtable_layout` may respect some parameters of child nodes if exists.\n @wch I'm not sure if that will work well when `gtable` contains `gtable`.\nActually this was the case when I wrote legend guides.\nYou can find dirty hack around here: https://github.com/hadley/ggplot2/blob/master/R/plot-render.r#L87\n Here is the way:\n\ngt <- gtable_add_grob(gt, grobTree(gtable_gTree(subgt2, vp=viewport(just=\"bottom\", y = 0, height = unit(1, \"cm\")))), 2, 4)\n\nbasically you need to set the size of the child.\nAnd this is similar to what I do in the plot-render: https://github.com/hadley/ggplot2/blob/master/R/plot-render.r#L87\n `height = sum(subgt2$heights)` is okey so gtable can wisely handle this problem.\n Here is the example without wrapping another gTree:\n\n``` r\n\np <- gtable_gTree(subgt2)\np$childrenvp$parent$y <- unit(0, \"npc\")\np$childrenvp$parent$height <- sum(subgt2$heights)\np$childrenvp$parent$justification <- \"bottom\"\np$childrenvp$parent$valid.just <- valid.just(\"bottom\")\ngt <- gtable_add_grob(gt, p, 2, 3)\n\nplot(gt)\n```\n\nbut it would be better that the gtable_viewport set the new viewport by respecting some params of the children.\n Here is the possible modification:\n\n``` r\n\ngtable_viewport <- function(x, vp = NULL) {\n  if (!is.null(vp)) {\n    # respect\n    vp$layout <- gtable_layout(x)\n    vp$name <- x$name\n    layout_vp <- vp\n  } else {\n    layout_vp <- viewport(layout = gtable_layout(x), name = x$name)\n  }\n  vp <- function(i) {\n    vp <- x$layout[i, ]\n    viewport(\n      name = vpname(vp), \n      layout.pos.row = vp$t:vp$b, \n      layout.pos.col = vp$l:vp$r, \n      clip = vp$clip\n    )\n  }\n  children_vp <- do.call(\"vpList\", lapply(seq_along(x$grobs), vp))\n  vpTree(layout_vp, children_vp)\n}\n\n\ngtable_gTree <- function(x, vp  = NULL, ...) {\n  if (length(x) == 0) return(nullGrob())\n\n  children <- gtable_gList(x)\n  vp <- gtable_viewport(x, vp)\n  gTree(children = children, childrenvp = vp, ...)\n}\n\n```\n\nthen,\n\n``` r\np <- gtable_gTree(subgt2, \n                  vp = viewport(y = 0, height = sum(subgt2$heights), just = \"bottom\"))\ngt <- gtable_add_grob(gt, p, 2, 3)\n```\n FWIW I much prefer that last one, personally. Forcing the use of absolute units sounds too limiting, and wrapping in a gTree is just ugly.\n For ordinary grobs, the justification is easy. So I'm talking about gtable in gtable.\n\n>  With this method, a gtable object will respect the vp argument for gtable_gTree(), but not the vp argument for gTree().\n\nThere is no `gTree` object before  calling `gtable_gTree`\n\nI think we can handle gtable and grobs for children of gtable in the same way.\n > The problem is that `grobWidth` and `grobHeight` don't seem to work with gTree objects, such as the ones returned by `gtable_gTree()`. Is this because the grobs within a gTree can be in different viewports?\n\nI think the issue is that widthDetails.gTree is basically an empty default. If you give a class to the gTree you can then define your own method to calculate the size,\n\n``` r\nlibrary(grid)\n\ng1 <- rectGrob(width = unit(2, \"cm\"))\ng2 <- textGrob(\"this text is somewhat longer\")\ng <- gTree(children = gList(g1, g2), cl = \"test\")\n\nconvertWidth(grobWidth(g), \"cm\")\n# [1] 0cm\n\nwidthDetails.test <- function(x)\n  do.call(max, lapply(x$children, grobWidth))\n\nconvertWidth(grobWidth(g), \"cm\")\n# [1] 6.70277777777778cm\n\n```\n\nIf there are multiple children, of course the question of the size is non-trivial (their positions may be offset, some may have relative units, or undefined size, etc.)\n `gtable` may have options x, y, just = just, hjust = hjust, vjust = vjust, rot = rot as in the other grobs.\nAnd grobHeight.gtable/grobWidth.gtable can be defined.\nThey are something like:\n\n```\n\nfunction (x) \n{\n    sum(x$heights)\n}\n```\n > since a gtable is not a grob.\n\nbtw, is there a good reason that it isn't? That would certainly simplify the vocabulary (e.g the non-standard gtable_gTree, this class issue, etc.)\n also, I have a feeling that it should be `heightDetails.xxx` not `grobHeight.xxx`, though it is very difficult to find a reason why the former is preferred in Paul's book (and code). I believe it has something to do with on-the-fly calculations when you resize an interactive device.\n    Hi,\n\nFirst of all, I'm really impressed with ggplot2.\n\nI'm trying to use stat_sum to sum  data \n\nCurrently I'm doing something like\n\n```\n dd <- ddply(d, .(x,y), transform, z=sum(z))\n qplot(x,y, data=dd, size=z)\n```\n\nbut I feel I'm writting the same thing twice. It seems also that that's what stat_sum or stat_summary are made for?\nBut the only thing I can get from stat_sum is a count, not a real sum.  Does stat_sum or anything else can do it , or should I group/aggregate my data beforehand ?\n\nThanks\n  In general that's the problem of viewport when gtable contains gtable.\nHere is the minimal example:\n\n``` r\ngrid.newpage()\n\na <- rectGrob(gp = gpar(fill = \"red\"))\nb <- circleGrob()\nc <- linesGrob()\n\nr1 <- matrix(list(a, b, c), nrow = 1)\nr2 <- matrix(list(c, b, a), nrow = 1)\n\ngt1 <- gtable_matrix(\"demo\", r1, unit(c(1, 1, 1), \"null\"), unit(1, \"null\"))\ngt2 <- gtable_matrix(\"demo\", r2, unit(c(1, 1, 1), \"null\"), unit(1, \"null\"))\n\nggrobs <- list(gt1, gt2)\nn <- length(ggrobs)\n\ngt <- gtable_row(name = paste(\"guide-\", seq(n), sep = \"\"),\n                 grobs = lapply(ggrobs, gtable_gTree),\n                 widths = unit(1, \"null\"), height = unit(c(1, 1), \"null\"))\n\ngrid.draw(gt)\n```\n\nThis is because `gtable_gList` edits the `vp` slot of element using the name given by the creation of gtable, while there is no such viewport, probably.\n\nI will look through gtable package later, and probably will suggest solution.\n Now gtable_gList edit the vp of children, but why?\n No, sorry. this is relevant to `name = paste(\"guide-\", seq(n), sep = \"\")`, which generates n-length vector.\n  https://groups.google.com/forum/?fromgroups#!topic/ggplot2/QkdrXgj8tWk\n\n``` r\nggplot(mtcars, aes(x=wt, y=mpg, colour=cyl))+\n  geom_path(arrow=arrow(type=\"closed\"))\nggplot(mtcars, aes(x=wt, y=mpg, colour=cyl, fill = cyl))+\n  geom_path(arrow=arrow(type=\"closed\"))\nggplot(mtcars, aes(x=wt, y=mpg, colour=cyl, fill = cyl))+\n  geom_path(arrow=arrow(type=\"open\"))\n```\n\nI set white as default, in compatible with the previous behavior.\nBut maybe NA default, i.e., transparent, is better.\n Sure. I always forget that.\n Updated and tested for geom-segment.\n  Passed tests.\n  I think this is also related to #629\n To select a common bandwidth across all groups, you can do something like this:\n\n``` R\n\n  calculate_groups <- function(., data, scales, bandwidth = NULL, adjust = 1, ...) {\n    if (is.null(bandwidth)) {\n      # Estimate bandwidth for each group separately, then take the median\n      bws <- unlist(dlply(data, \"group\", function(df) bw.SJ(df$x)))\n      bandwidth <- median(bws)\n\n      message(\"stat_density: bandwidth not specified. Using: \", \n        format(bandwidth, digits = 3), \" * \", format(adjust, digits = 3))\n    }\n\n    .super$calculate_groups(., data, scales, \n      bandwidth = bandwidth, adjust = adjust, ...)    \n  }\n```\n\n(along with similar changes to calculate)\n\nTaking the median is a rule of thumb that I read somewhere - it doesn't help in this case.  There's not enough data for `bw.SJ` to work (similar with `ucv` and `bcv` in `MASS`).  I think the real problem here is that the tails are trimmed off by default.\n Hmmm, `trim = FALSE` is better, but requires that the range be adjusted:\n\n``` R\n    bw <- bw.nrd0(data$x)\n\n    range <- scale_dimension(scales$x, c(0, 0))\n    if (!trim) {\n      range <- range + c(-1, 1) * 3 * bw\n    }\n```\n This will require backward incompatible changes to fix properly, so I'm going to move to `0.10`.\n\nIt may be simpler to switch to using `locfit` (e.g. https://github.com/hadley/densityvis/blob/master/R/density-local.r) but this will have performance implications.\n  Passed all unit test and probably also visual test.\nsee this thread: https://groups.google.com/group/ggplot2/browse_thread/thread/3a9efa6d01b8500e\n\nbut maybe the xxx_format should return the list of expression instead of list of call.\n ``` r\np <- qplot(1:10, 1:10, colour = 1:10) + \n  scale_colour_gradient(breaks = c(2, 5, 8), labels = c(\"2^2\", \"2^3\", \"2^4\"))\n\np + guides(colour = guide_legend(parse = TRUE))\np + guides(colour = guide_colourbar(parse = TRUE))\n```\n @wch done it. Is rebase safe in any case? I'm afraid that rebase may induce problem if someone already pull the branch, but not sure though.\n @wch agreed. Then, I don't need `git merge master` before `git rebase master mybranch`?\n @wch Ok, thanks.\n I don't think a parse argument is the right way to handle this - we should return calls from the trans object, and the guides should correctly interpret them.\n @hadley could you tell in more details? I couldn't figure out the problem.\n Does this commit still have a problem?\n  Ok - this is somewhat difficult to reconstruct, as I was not able to reconstruct the misbehavior that some people have observed: only the first plot uses the correct language for the names of the months for axis labeling. \nHowever I was able to reconstruct some strange and not tracable behaviors.\n\nSo we try following on a fresh R-Console\n\n``` r\nSys.getlocale(\"LC_TIME\")\nSys.setlocale(\"LC_TIME\", \"en_US\")\nlibrary(ggplot2)\ntest<-data.frame(a=runif(12),b=as.Date(paste(\"2012\",1:12,\"1\",sep=\"-\")))\nggplot(test,aes(b,a)) + geom_point() #Correct language on x-axis\nmonths(test$b)\n\nSys.setlocale(\"LC_TIME\", \"ru_RU\")\ntest<-data.frame(a=runif(12),b=as.Date(paste(\"2012\",1:12,\"1\",sep=\"-\")))\nggplot(test,aes(b,a)) + geom_point() #it stays english\nmonths(test$b) #correct russian names\n\n\nSys.setlocale(\"LC_TIME\", \"de_DE\")\ntest<-data.frame(a=runif(12),b=as.Date(paste(\"2012\",1:12,\"1\",sep=\"-\")))\nggplot(test,aes(b,a)) + geom_point() #still english names\nmonths(test$b) #correct german names\n```\n\nWell im not really sure if it is a bug in ggplot2 or a strange implementation of language variables in R as R-Studio behaves a little different but as I also was able to create plots with German y-labels and English x-labels there might be somethig wrong in ggplot2.\n  When plotting time series data, setting the locale (for date formatting on x-axis), e.g. Sys.setlocale(\"LC_TIME\",\"de_DE.UTF-8\"), will only work with a fresh workspace. Setting an new locale for the same dataset after plotting once will not have any effect. Also funny: independently of the x-axis the same can be performed for y-axis: set locale once and ignore afterwards...\n\n``` R\nlibrary(ggplot2)\ntest<-data.frame(a=runif(12),b=as.Date(paste(\"2012\",1:12,\"1\",sep=\"-\")))\nSys.getlocale(\"LC_TIME\")\nSys.setlocale(\"LC_TIME\", \"de_DE.UTF-8\")\nggplot(test,aes(x=b,y=a)) + geom_point()\n#look at result\nSys.setlocale(\"LC_TIME\", \"en_US.UTF-8\")\nggplot(test,aes(x=b,y=a)) + geom_point()\n#look at result - new locale igonred\nggplot(test,aes(x=a,y=b)) + geom_point()\n#look at result - on the y-axis, new locale is used\nSys.setlocale(\"LC_TIME\", \"de_DE.UTF-8\")\nggplot(test,aes(x=a,y=b)) + geom_point()\n#look at result - the second new locale ignored on y-axis, too\n```\n What are the performance implications of dropping the memoisation?\n Hi Winston,\nexcuse the late reply, I am on vacation.\nThanks for your efforts and for the explanation. Knowing how to handle \nthe situation should be enough for most users since one usually doesn't \nswitch languages during a session (I work either on project A or B). I \nguess it would be enough to have it included in a users guide or FAQ.\n\nRegards - Andre\n\nAm 03.08.2012 05:33, schrieb Winston Chang:\n\n> I think the problem is that `train_cartesian()` is memoized, so it's storing the result of the first call to `scale_break_info()`, and does not run it again on subsequent calls to `ggplot()`.\n> \n> I'm not sure of a good solution - the ones I can think of are not very good:\n> - Make `memoise()` detect changes to locale changes. But this seems too much of a special case.\n> - Provide a user-facing function to clear the memoization cache. But I don't think users would ever figure this out since it's so obscure.\n> - Provide an easy way to reload ggplot2 (which will create new environments for the memoization). But again, I don't think most users would figure this out.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/hadley/ggplot2/issues/592#issuecomment-7474857\n   ``` R\ndates <- as.yearmon(seq(as.Date('2008-12-01'), by='month', to=as.Date('2012-06-01')))\ndata <- data.frame(Date=dates, value=rnorm(length(dates)))\nggplot(data, aes(x=Date, y=value)) + geom_line()\n```\n\n> Error: Discrete value supplied to continuous scale\n\nWhile adding `scale_x_date()` produces a chart of sorts, the X range is way off; instead expected 2008 - 2012 range it shows 1975-07-03 - 1975-07-06 (as seen with the latter example)\n\n``` R\nggplot(data, aes(x=Date, y=value)) + geom_line() + scale_x_date()\nggplot(data, aes(x=Date, y=value)) + geom_line() + scale_x_date(labels=date_format(\"%Y-%m-%d\"))\n```\n What package is `as.yearmon` in?\n oh, sorry, I was sure I reproduced this in clear environment.\n\n`as.yearmon` is in `zoo`\n Or at least document how to make it work - e.g. extend the right method\n @wch Could you add a `scale_type` method and appropriately named scale and then send to Dennis to include in the book?\n\n@tko I don't think this is used commonly enough to be included in ggplot2, but you could easily add to another package.\n  Hopefully I did a better job this time!\n This doesn't address everything raised in #501, which seemed to me to be a bigger project. I was just trying to remedy the fact that `discrete_scale` was documented but `continuous_scale` wasn't (along with a handful of other small issues). \n\nkoshke mentions having generic help pages for `coord`, `geom`, `stat` etc. I can certainly work on that, but that seems like a bigger project, and I was trying to start fairly simple as I get comfortable with git and roxygen.\n  This is my first attempt, and I'm brand new at GitHub, so apologies if this is a mess. I wasn't sure how many commits to have in a pull request, and if you have any advice on writing useful commit notes I'm all ears.\n\nThe two big things I changed were altering aesthetics() in utilities-help.r to list the required aesthetics first, in bold, and giving continuous_scale a (mostly) complete argument list, largely copying from discrete_scale where appropriate.\n\nThe rest are minor typos, linking to relevant documentation, or slightly clarified descriptions.\n I was indeed doing the first, but not the second two (except, perhaps, by chance). Do I need to redo anything relating to this pull request, or were those suggestions for anything I do in the future?\n\nThanks for being patient with me...I'll get up to speed quickly, I promise!\n  After changing the default theme_grey to \n\naxis.line =         theme_segment(colour = \"grey25\")\n\nonly the x-axis has a grey line.\n\nE.g.\nqplot(carat, price, data=diamonds)\n  I am using `proto` and `ggplot2`. I looks like the `print.proto` method in `ggplot2` is breaking `proto`.\n\n```\n> test_proto <- proto(x=5)\n> print(test_proto)\nError in print.proto(test_proto) : attempt to apply non-function\n\nEnter a frame number, or 0 to exit   \n\n1: print(test_proto)\n2: print.proto(test_proto)\n\nSelection: 2\nCalled from: top level \nBrowse[1]> getAnywhere(print.proto)\nA single object matching \u2018print.proto\u2019 was found\nIt was found in the following places\n  registered S3 method for print from namespace ggplot2\n  namespace:ggplot2\nwith value\n\nfunction (x, ...) \nx$pprint(...)\n<environment: namespace:ggplot2>\n```\n\nUninstalling `ggplot2` makes the problem go away.\n\n```\nError in loadNamespace(name) : there is no package called \u2018ggplot2\u2019\n\n> library(proto)\n> test_proto <- proto(y=5)\n> test_proto\n<environment: 0x7fc1dda1c8e8>\nattr(,\"class\")\n[1] \"proto\"       \"environment\"\n```\n\nUnfortunately, I rely heavily on `ggplot2` and I am developing a package that uses `proto`. Any suggestions for a workaround would be appreciated.\n Instead of `print.proto` we should either call it explicitly, or give all proto elements a common class, and use that.\n We could just create `ggproto` to wrap `proto` and add the correct class\n Then how about\n\n``` R\ngg <- function(x) structure(x, class = c(\"ggproto\", class(x))\n\nStatDensity <- gg(proto(Stat, {}))\n# etc.\n```\n   @wch passes all unit test. Which version of vtest should I use, and which commit shoud the vtest do against?\n\nAll vtest are passed. I mean vdiff in vtest.\n @wch looks ok for visual comparison between the latest commit and tag 0.9.1.\n @wch I think that non-positional guide without breaks is meaningless while positional guide without breaks is used in somewhere What do you think?\n\nAt least, legend guide cannot be drawn if there is no breaks.\n Ok, I will wait @hadley 's response.\n  `labeling::extended` doesn't care about data/time, so you may implement for date class.\nWill `lubridate` implement the extended breaks for date/POSIXt classes?\n I think pretty breaks for date class need more specific works.\nThis is because, making breaks along **day** is insufficient in some cases.\n\n``` r\n> pretty(as.Date(c(\"2008-01-01\", \"2009-01-01\")))\n[1] \"2008-01-01\" \"2008-04-01\" \"2008-07-01\" \"2008-10-01\" \"2009-01-01\"\n> as.Date(pretty(as.numeric(as.Date(c(\"2008-01-01\", \"2009-01-01\")))), origin = \"1970-01-01\")\n[1] \"2007-10-14\" \"2008-01-22\" \"2008-05-01\" \"2008-08-09\" \"2008-11-17\" \"2009-02-25\"\n```\n\neven if setting `z` to `0`, we will not get pretty breaks for date.\n\nYou may also look through `grDevices:::prettyDate` to see how things are complicated.\n `extended_breaks` can return S3 function. Or internal dispatch may be sufficient here:\n\n``` r\nextended_breaks <- function (n = 5, ...) \n{\n  function(x) {\n    if (is.Date(x)) {\n      pretty(x)\n    } else {\n      extended(min(x), max(x), n, only.loose = FALSE, ...)\n    }\n  }\n}\n```\n  0.9.1 also results in error.\nAnd legend guide also induce a warning.\nWhat is the expected behavior if `breaks = NULL` for non-positional scales?\n I mean that these errors and warnings also happen in the released version 0.9.1.\n\nI'm sure why this error happens.\nBut I'm not sure how it should be. The `breaks = NULL` for non-positional scales would be meaningless.\n\nShould it be simply ignored, with some warning message?\n @wch \n\nyes, but in 0.9.1,\n\n```\n> ggplot(dat, aes(x=1, y=y, colour=x)) + geom_point() + scale_colour_continuous(breaks=NULL, guide = \"colorbar\")\nError in names(guide$key) <- c(output, \".label\", \".value\") : \n  'names' attribute [3] must be the same length as the vector [2]\n```\n\nSo the bug(?) is not due to changing the colorbar as default.\n\n> Maybe it should not show the legend when breaks=NULL? \n\nI agree. Do you think there is a situation where someone want to show colorbar without tick/lables?\n So possible solution for `break = NULL` for the non-positional scale is either, \n1. Surpress showing guide, with some warning messages.\n2. Use default breaks (waiver()) instead, with some warning messages.\n\nThe warning message should be like:\n\n> `breaks = NULL` for non-spatial scale is meaningless so the guide is not displayed.\n ah..., if the branch referring the issue is merged on github, those who commit the branch will close the issue, I understand.\nA bit surprising because I was sleeping at that time...\n  Hi, today I discovered a bug that was quite hard to pinpoint. Essentially, I am using geom_point in combination with geom_segment, with a factor on the y axis. The 2 geoms have separate data.frames, but the factor has the same levels in each of these 2 data.frames. I expect that the y axis will be ordered from bottom to top using the levels of the factor from beginning to end. However, this is only the case when I do ggplot()+geom_segment()+geom_point(), and the factor levels are strangely not respected when I use ggplot()+geom_point()+geom_segment(). The current workaround I am using is to always use the first form, but it would be nice to have these 2 forms be consistent. Here is some code that replicates the problem:\n\n``` r\n## ggplot2 weird bug.\nlibrary(grid)\nlibrary(ggplot2)\nplotboth <- function(low,up){\n  lowup <- function(x)factor(x,c(low,up))\n  dfs <- list(segment=data.frame(min=1:2,max=2:3,y=lowup(c(up,low))),\n              point=data.frame(x=1.5,y=lowup(low)))\n  str(dfs)\n\n  grid.newpage()\n  the.layout <- grid.layout(ncol=2)\n  pushViewport(viewport(layout=the.layout))\n\n  seg.layer <- geom_segment(aes(x=min,xend=max,y=y,yend=y),data=dfs$segment)\n  pt.layer <- geom_point(aes(x,y),data=dfs$point)\n  ## I would expect these 2 plots to be the same:\n  plot.list <- list(ok=ggplot()+seg.layer+pt.layer,\n                    weird=ggplot()+pt.layer+seg.layer)\n  for(i in seq_along(plot.list)){\n    plot.obj <- plot.list[[i]]+opts(title=names(plot.list)[i])\n    pushViewport(viewport(layout.pos.col=i))\n    print(plot.obj,newpage=FALSE)\n    popViewport()\n  }\n}\n## I expect all of these to be the same!\nplotboth(\"a\",\"b\") ## the same\nplotboth(\"b\",\"a\") ## different\nplotboth(1,2) ## the same\nplotboth(2,1) ## different\n\n\n```\n To be clear, the factors in each layer DO each have the same levels,\nbut some of the levels do not appear in some of the layers. In my\nmind, I specified the order of the categorical variable using the\nlevels of the factors, so it seems weird that the order in which I\nspecify the layers affects the order in which the factors are drawn.\n\nAnyway, thanks for the pointer to scale_discrete(drop=FALSE), which\nindeed solves the problem.\n It looks like the fix for this would require extensive changes to the scale training system, or some ugly hacks. Since there's a workaround (use `drop=FALSE` or specify `breaks`), I think the cost isn't worth the benefit in this case.\n If this bug is addressed in the future, here is a set of test cases:\n\n``` R\ndf1 <- data.frame(x1=1.5, y1=factor(\"b\",        levels=c(\"b\",\"a\")))\ndf2 <- data.frame(x2=1:2, y2=factor(c(\"a\",\"b\"), levels=c(\"b\",\"a\")))\n\np1 <- geom_jitter(aes(x1,y1), data=df1, colour=\"red\")\np2 <- geom_point(aes(x2,y2), data=df2)\n\n# Order (from origin) is \"a\", \"b\"\n# This is different than the order of the factor levels\nggplot() + p1 + p2\n\n# Order (from origin) is \"b\", \"a\"\n# This is the correct order, based on order of factor levels\nggplot() + p2 + p1\nThe way to make it work as expected is to use scale_y_discrete(drop=FALSE):\n\n# b only\nggplot() + p1\n# Only print point from df1, but have both y levels \"b\", \"a\"\nggplot() + p1 + scale_y_discrete(drop=FALSE)\n\n\n# Both of these have order \"b\", \"a\"\nggplot() + p1 + p2 + scale_y_discrete(drop=FALSE)\nggplot() + p2 + p1 + scale_y_discrete(drop=FALSE)\n\n# Mixing discrete and continuous\nggplot() + p1 + p2 + geom_point(aes(x3,y3), data=data.frame(x3=1.2, y3=1.8), colour=\"blue\")\n# With extra column\nggplot() + p1 + p2 + geom_point(aes(x3,y3,colour=g), data=data.frame(x3=1.2, y3=1.8, g=\"foo\"))\n\n# Layer with data with new factor levels\nggplot() + p1 + p2 + geom_point(aes(x3,y3), data=data.frame(x3=1.3, y3=\"c\"), colour=\"blue\")\n# With extra column\nggplot() + p1 + p2 + geom_point(aes(x3,y3,colour=g), data=data.frame(x3=1.3, y3=\"c\", g=\"foo\"))\n```\n  The examples in help(geom_point) and help(geom_line) produce empty plots - the axes and background are all set correctly, there's just no points or lines. From a fresh R run with --vanilla.\n\nexample(geom_line) shows empty plots (with the correct axes, legend) up until the last one with geom_path, which shows its lines in all its glory.\n\nSeems to be a problem with the alpha:\n\n```\n# visible, looks right: \nqplot(mpg, wt, data = mtcars, size = I(5), alpha = I(0.2))\n# blank\nqplot(mpg, wt, data = mtcars, size = I(5))\n```\n\nSession Info:\n\n```\nR version 2.14.2 (2012-02-29)\nPlatform: i486-pc-linux-gnu (32-bit)\n```\n\nother attached packages:\n\n```\n[1] ggplot2_0.9.1\n\nloaded via a namespace (and not attached):\n [1] colorspace_1.1-1   dichromat_1.2-4    digest_0.5.1       grid_2.14.2       \n [5] MASS_7.3-16        memoise_0.1        munsell_0.3        plyr_1.7          \n [9] proto_0.3-9.2      RColorBrewer_1.0-5 reshape2_1.2.1     scales_0.2.0      \n[13] stringr_0.6        tools_2.14.2      \n```\n\nWorks fine in 2.15. Either needs fixing or kick the required version of R up a notch! I'm upgrading R now...\n I think I must have grabbed the latest ggplot using devtools from github and it didn't get scales to match.\n\nSeems to fix the problem. So user error I guess. \n    The way the default amount of jittering is calculated in ggplot2 (0.9.1) seems buggy, or at least sub-optimal. Here\u2019s a simple example:\n\n``` r\nlibrary(ggplot2)\n\nn = 100\nvals = seq(1, 500, 50)\nx = sample(vals, n, replace=TRUE)\ny = sample(vals, n, replace=TRUE)\n\nqplot(x, y, geom=\"jitter\")\n```\n\nEven though the actual resolution in the data is 50, the points drawn are almost overlapping. Compare this to the same code but with `vals = seq(0, 500, 50)`.\n\nThe reason is the calculations in position-jitter.r:\n\n``` r\nif (is.null(.$width)) .$width <- resolution(data$x) * 0.4\nif (is.null(.$height)) .$height <- resolution(data$y) * 0.4\n\n```\n\nIf you add `zero=FALSE` to the two `resolution()` functions, it will work as expected.\n OK. I\u2019ll try to submit a pull request. (Might be a few days before I get time to do it.)\n   Today I wanted to format my labels as percentages. Since I do such things not on every day, I checked http://had.co.nz/ggplot2/scale_continuous.html how to do it. There one can read: `p + scale_y_continuous(formatter = \"percent\")`. But when entering this code into **R**, I get an error with the current version 0.9.1 of ggplot2.\n\nAfter some digging, I found the correct usage in the source code of ggplot at https://github.com/hadley/ggplot2/blob/master/R/scale-continuous.r#L55 which is: `p + scale_y_continuous(labels = percent)`.\n\nSince I expect that I am not the only one who looks things up at the mentioned webpage, I would like to kindly ask for an update of the respective part.\n\nPhilipp\n Thanks for your fast answer. I definitely look forward to it!\n\nI support the idea of an automatic process since it not only helps to save time and reduces redundant work but also allows to fix things like my issue fast and... automatically ;-)\n  Having this issue in both 0.90 and 0.91. When binning dates, qplot displays weird stuff sometimes. In the example below, the qplot will display a tiny overlapping bar at the far right of the plot. One we add some alpha, it becomes clear that there is more weird stuff\n\n```\nSet.seed(123)\ndate <- as.Date(Sys.time()) - round(runif(1000, 0, 60));\nvalue <- factor(round(runif(10000, 1, 5)), levels=1:5, labels=c(\"Foo\", \"Bar\", \"Zoo\", \"Baz\", \"Dee\"))\nmydata <- data.frame(date, value)\n\nggplot(aes(x=date, fill=value), data=mydata) + geom_bar(binwidth = 7)\nqplot(date, fill=value, data=mydata) + geom_bar(binwidth = 7)\nqplot(date, fill=value, data=mydata) + geom_bar(binwidth = 7, alpha=0.5)\n```\n Ah you are right. Sorry.\n  This looks to be the same bug as Issue#480. Copying Hadley's code in 480:\n\n```\nlibrary(ggplot2)\nlibrary(reshape2) # for melt\ncrimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)\ncrimesm <- melt(crimes, id = 1)\nstates_map <- map_data(\"state\")\n\nggplot(crimes, aes(map_id = state)) + geom_map(aes(fill = Murder), map = states_map) + expand_limits(x == states_map$long, y = states_map$lat) + annotation_map(states_map) + coord_map()\n```\n\nGets the error \"Error in validDetails.polygon(x) :   'x' and 'y' and 'id' must all be same length\".\n I downloaded and installed the new package today so I presume it is the latest and greatest. When I tried Hadley's original code with just geom_map() and coord_map() it worked. But when I added annotation_map() (see code) it failed with the original error for Issue#480.\n  Consider the following two data frames:\n\ntest.1 <- data.frame(title='something', x=25, y=110, gridrow='a', gridcol='a')\n\ntest.2 <- data.frame(title='something', x=24, y=110, gridrow='a', gridcol='a')\n\n(the only difference is the x column)\n\n```\nqplot(x=x, y=y, label=title, geom='text', data=test.1) + facet_grid(gridrow~gridcol)\n```\n\ngives the error\n\n```\nError in eval(expr, envir, enclos) : object 'expr' not found\n```\n\nwhile\n\n```\nqplot(x=x, y=y, label=title, geom='text', data=test.2) + facet_grid(gridrow~gridcol)\n```\n\nproduces the plot. The problem only exists in conjunction with facet_grid() and is not confined to instances with only one-factor facet variables. The problem arises with all values of x between 25 and 25.9\n\n```\n> sessionInfo()\nR version 2.15.0 (2012-03-30)\nPlatform: x86_64-apple-darwin9.8.0/x86_64 (64-bit)\n\nlocale:\n[1] da_DK.UTF-8/da_DK.UTF-8/da_DK.UTF-8/C/da_DK.UTF-8/da_DK.UTF-8\n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils    \n[6] datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_0.9.1      RColorBrewer_1.0-5\n[3] plyr_1.7.1         reshape2_1.2.1    \n[5] Rcpp_0.9.10       \n\nloaded via a namespace (and not attached):\n [1] Biobase_2.16.0     BiocGenerics_0.2.0\n [3] Biostrings_2.24.1  caret_5.15-023    \n [5] codetools_0.2-8    colorspace_1.1-1  \n [7] dichromat_1.2-4    digest_0.5.2      \n [9] ggdendro_0.1-05    IRanges_1.14.2    \n[11] labeling_0.1       lattice_0.20-6    \n[13] MASS_7.3-18        memoise_0.1       \n[15] munsell_0.3        mzR_1.2.1         \n[17] OutlierD_1.20.0    pcaMethods_1.42.0 \n[19] pcaPP_1.9-46       pepmaps_1.5-1     \n[21] proto_0.3-9.2      scales_0.2.1      \n[23] stats4_2.15.0      stringr_0.6       \n[25] tools_2.15.0       xcms_1.32.0 \n```\n\nedit: Fixed a glaring error in my test code : ) (Thanks Brian)\n That is bizarre. But I can confirm that it is happening  (with the adjustment of the data names in the `qplot` call to match the given data frames).\n\nI tried to figure out what was wrong, but finally got completely lost in the rabbit hole. Here is what I was able to figure out, so that someone else can hopefully make it further.\n\nThe error is happening in locate_grid, at the line https://github.com/hadley/ggplot2/blob/master/R/facet-locate.r#L21\n\n``` r\n  values <- compact(llply(data, quoted_df, vars = c(rows, cols)))\n```\n\nPlaying around with this in the debugger, it is the call to `compact` that is causing the error. Digging further, it seems to be `quoted_df` (called inside the `llply` loop) which in turn calls `eval.quoted` which sometimes returns odd structures like\n\n```\n[[1]]\n[[1]][[1]]\nNULL\n\n[[1]][[2]]\neval(expr, envir, enclos)\n\n[[1]][[3]]\nfunction (e) \n{\n}\n<environment: 0x000000000845d288>\n\n\n[[2]]\n[[2]][[1]]\nNULL\n\n[[2]][[2]]\neval(expr, envir, enclos)\n\n[[2]][[3]]\nfunction (e) \n{\n}\n<environment: 0x00000000065f8130>\n```\n\nAt this point, I was completely lost, and so just leave this information for someone who understands the code better to figure out.\n Yeah, I couldn't understand what that code was supposed to be doing.  Typically when I see `llply(data,...` in ggplot code, `data` is a list of `data.frame`s (one per layer). But here it is a single `data.frame`, so the loop becomes over the columns of `data`. \n\nI also noticed that splitting up the `compact()` and `llply()` call didn't cause the error. And that seemed weird too.\n\nI also get that feeling that there is some bug lurking somewhere deeper (`plyr`?, base R?, or maybe `quoted_df`) It would take awhile to make a minimal reproducible example that doesn't rely on all the ggplot framework. And I have no idea what type of errors happen when a numeric value is between 24 and 26, but not above or below that!\n\nYou are also right that `values` is never used again. But it has been there since the very first import of that file. https://github.com/hadley/ggplot2/blob/a4c85114c33105dd9ca66aec9d5edf679ccfc91a/R/facet-locate.r#L14 And it was never used again there either. (As you noted.) None of those functions should have side effects, so my recommendation would be to delete that line and see what happens.  \n\nNot the most comforting bug fix, I admit.\n Nice sleuthing. I think you are right that `quoted_df` should make sure that it is actually evaluating in a `data.frame`. That was probably the assumption for the function. Which also supports that the `values` line is not supposed to be in the code anyway.\n  There is a small typo in the documentation for geom_boxplot: \"the first and third quartiles (the 25th and 7th percentiles).\" Should read 25th and 75th.\n  When trying to plot celestial object on the sky (basically with coordinates equivalent to latitude/longitude) using the `aitoff` projection of the `coord_map` function, the grid is badly displayed, i.e. residual horizontal lines are still displayed for latitudes non equal to zero along with their correct projections.\n\nHere is the code to reproduce this bug:\n\n```\nlibrary(ggplot2)\nsky2 = data.frame(RA=0, Dec=0)\nskyplot2 <- qplot(RA,Dec,data=sky2,xlim=c(0,360),ylim=c(-89.999,89.999),\nxlab=\"R.A.(\u00b0)\", ylab=\"Decl. (\u00b0)\",main=\"Source repartition on the sky\")\nskyplot2 + coord_map(projection=\"aitoff\",orientation=c(89.999,180,0)) + \nscale_y_continuous(breaks=(-2:2)*30,limits=c(-89.999,89.999)) + \nscale_x_continuous(breaks=(0:8)*45,limits=c(0,360), labels=c(\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"))\n```\n\nAnd the resulting image:\n![skyplot](http://img3.imageshack.us/img3/5815/skyplotgrid.png)\n\nA quick hack is available here: http://stackoverflow.com/questions/10706632/grid-badly-displayed-using-ggplot2\n  Something like this is in my existing code:\n\n```\nggplot(data = data.frame(x=1:3,y=1:3)) + \n            geom_point(aes(x,y)) + \n            geom_vline(aes(xintercept = c(0.5, 0.95, 1), linetype = c(2,1,2)), color = 'grey')\n```\n\nIt works fine in ggplot v 0.8.9, but in v. 0.9.0, I get the following error:\n\n```\nError: A continuous variable can not be mapped to linetype\n```\n\nThe problem is resolved by changing the code to `linetype = as.factor(c(2,1,2))`\n\nThis change breaks old code, I don't see the value in the change (although perhaps there is value). This is FYI - I can change my old code.\n\nHere is sessionInfo() where it works:\n\n```\n> sessionInfo()\nR version 2.12.2 (2011-02-25)\nPlatform: x86_64-redhat-linux-gnu (64-bit)\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=C              LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] ggplot2_0.8.9 proto_0.3-8   reshape_0.8.3 plyr_1.6     \n\nloaded via a namespace (and not attached):\n[1] coda_0.13-5     digest_0.4.2    lattice_0.19-17 rjags_2.2.0-2  \n```\n\nand where it doesn't work:\n\n```\nsessionInfo()\nR version 2.14.2 (2012-02-29)\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=C                 LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] plyr_1.7.1    ggplot2_0.9.0\n\nloaded via a namespace (and not attached):\n [1] colorspace_1.1-1   dichromat_1.2-4    digest_0.5.2       grid_2.14.2       \n [5] MASS_7.3-18        memoise_0.1        munsell_0.3        proto_0.3-9.2     \n [9] RColorBrewer_1.0-5 reshape2_1.2.1     scales_0.2.0       stringr_0.6       \n[13] tools_2.14.2      \n```\n @wch I think you have it backward - \n\n> I don't know if the solution (changing it to a continuous scale) is the same though. linetype can take string values, so it may not play well if it's changed to continuous.\n\nthe problem is that `c(1,2,1)` is a continuous numeric vector; my solution was to change it to a discrete vector (e.g. `as.factor`). This does seem similar to issue #402, where a proposed solution was to use `as.integer` , although it appears that this didn't actually work.\n I understand your point, but wouldn't this be analogous to\n\n```\nwith(iris, plot(Sepal.Length ~ Species, lty = c(1,2,1)))\n\n```\n   Could you please add a note to `NEWS`?\n Updated.\n @wch Thanks, fixed.\n Sure, fixed ;-)\n   I believe this will fix the problem. This passed all unit tests. May I write visual tests and additional unit test codes?\n Thanks, that's right. `major` and `minor` is in the native coords while `*_source` is in the data space.\n`coord_map` and `coord_polor` requires that in the data space.\n\nBut this may be changed into more consistent way.\n   That seems to be an issue with representing a continuous variable with color (a feature that has been available for long time). This is just an issue of how the legend/guide is displayed. Now, even a continuous mapping between color and data is represented by a few discrete labeled values. The colorbar guide draws the whole (or at least many more levels so that it looks continuous) range of colors and labels a select few with the corresponding data value. The colors that would be used on the graph would be unchanged from the current approach.\n\nThat said, it would be interesting to see empirical data on determining the data value given the color comparing the current blocked legend versus a colorbar legend.\n I agree Hadley's proposal.\n\nThe benefit of color bar is twofold.\nFirst, colorbar guide itself will tell viewers that the color is continuous scale. This is quite important.\nSecond, it enables viewers create a complicated map (i.e., function) between value and color.\nFor example, try this:\n\n```\nggplot(mtcars, aes(wt,mpg, colour=disp)) + geom_point(size=4) +\n    guides(colour=\"colourbar\") + scale_color_continuous(trans = \"log10\")\nggplot(mtcars, aes(wt,mpg, colour=disp)) + geom_point(size=4) + \n    scale_color_continuous(trans = \"log10\")\n```\n\nI imagine that few people will intend to show accurate value by continuous scale, e.g., few people will be interested in whether the point is 400, 399, or 401. By continuous color scale, viewer will be required to grasp the relation between each data point. For this purpose, gradient in the colorbar would be useful. If you want to show the precise value for continuous scale, you'd better to use other way, e.g., direct label.\n\n> Semi-unrelated issue: I noticed that the discrete legend has the larger values on top, while the continuous legend has smaller values on top. Is this difference intended?\n\nYes and no. When I write the colorbar, I followed Matlab style, so larger on top.\n  - Reformat stat_ydensity to look more like stat_density.\n- Also get coding cues from stat_boxplot.\n- Introduce a new scale options to have equal width (useful when\n  comparing observations with very different densities).\n- Keep all computed densities and use a new variable to compute\n  the density actually used to plot the violin.\n Simple use case: compare distributions with very different sample sizes\n\n```\nd <- data.frame(a=c(\"a\", rep(\"b\", 100), rep(\"c\", 100)), x=c(1, rnorm(100, 1, 50), rnorm(100,2,30)))\nlibrary(\"ggplot2\")\nggplot(d, aes(x=a, y=x)) + geom_violin()\n```\n\nThe two violins for b and c are useless. I agree that it is misleading because there is no indication of the difference in sample size, but at least, in routine checking having equal widths gives a readable plot.\n Regarding the names of the arguments: I found \"equal\" to be a bit cryptic (what is equal exactly?) and I found your original ideas on this mater (scalearea and scalecount) clearer. So I thought it might be still time to change it; later will be too late. In particular since equal is the default, so there's a really good chance that nobody explicitly specified it yet. Another possibility is to document \"area\", \"count\" and \"width\" only, but also allow \"equal\" internally.\n\nEven if you still want to change back \"area\" to \"equal\", I think \"width\" can stay as it is, can't it?\n The last commits should solve the `match.args` issue (my original code was based on what I usually saw in R but I agree that in the context of proto functions which call each other many times it is not as clear).\n\nAs for scale=\"area\" or scale=\"equal\" I made it so both can be used byt \"equal\" triggers a deprecated call (using .Deprecated, that will help flag it and later remove it)\n  ```\nlibrary(\"ggplot2\")\n\nd <- data.frame(x=1:10)\n\nggplot(d) + geom_point(aes(x=x, y=x))\n\nggplot(d) + geom_point(aes(x=x, y=x)) + scale_y_continuous(breaks=c(1,5), labels=c(\"foo\", \"bar\"))\n# OK\n\nggplot(d) + geom_point(aes(x=x, y=x)) + scale_y_continuous(breaks=c(-1,5), labels=c(\"foo\", \"bar\"))\nggplot(d) + geom_point(aes(x=x, y=x)) + scale_y_continuous(breaks=c(1,11), labels=c(\"foo\", \"bar\"))\n# Fails\n\nggplot(d) + geom_point(aes(x=x, y=x)) + scale_y_continuous(breaks=c(-1,5), labels=c(\"foo\", \"bar\"), limits=c(-1,10))\nggplot(d) + geom_point(aes(x=x, y=x)) + scale_y_continuous(breaks=c(1,11), labels=c(\"foo\", \"bar\"), limits=c(1, 11))\n# OK, because the scales are expanded\n```\n\nWhat should happen is :\n- when limits are not explicitly set, setting breaks outside of the data range expands the limits to those breaks\n- when limits are explicitly set, breaks and labels outside of the limit range are dropped\n good point. thanks.\n Thanks @wch, I figured out what is problem.\n\nThe limits of coord (not limits of scale) will be determined by some ways.\n\n(1) coord limits\n(2) scale limits\n(3) scale breaks\n(4) default (i.e., the range of data)\n\nSo the rule is:\n\na) If (1) coord limits is explicitly set, use it and ignore the others including the _oob breaks_.\nb) If (2) scale limits is explicitly set, use it and ignore the _oob breaks_.\nc) if (3) scale breaks is explicitly set and it spans out of data range, expand the range to the scale breaks.\nd) if all of 1-3 are absent, or if (3) is set but it spans inside the data range, use data range.\n\nI'm not sure if (b) and (c) is ok.\nDo you have any ideas?\n\nHere is a pseudo code:\n\n```\nrange <- data_limits\nif (!is.null(coord_limits)) { \n  range <- coord_lim \n  drop_oob_breaks(range)\n}\nelse if(!is.null(scale_limits))  {\n  range <- coord\n  drop_oob_breaks(range)\n}\nelse if(!is.null(scale_breaks)) {\n  range[1] <- min(range[1], scale_breaks[1])\n  range[2] <- max(range[2], scale_breaks[2])\n}\n```\n The problemis if oob breaks expand the existing limits.\n\nProbably three ways:\n\n(1) oob breaks doesn't affect the scale/coord limits and simply will be dropped (@wch's suggestion and compatible with 0.9).\n(2) oob breaks expands the scale/coord limits if they are not explicitly set (my tentative implementation).\n(3) Parameters to scales such as `respect.breaks = T/F` to choose (1) or (2). I don't like this way. \n\nI like the @wch's suggestion, because we can set limits explicitly if necessary.\n  Thanks to David Kahle for the examples. \n\n``` R\nn <- 10\n\n# original demonstration of problem\ndf <- data.frame(x = 10^runif(n, -19, -13), y = rnorm(n))\nqplot(x, y, data = df) + scale_x_log10()\n\n# happens on normal scale, too\nqplot(x, y, data = df)\n\n# this helps to see where it happens\nu <- runif(n); y <- rnorm(n)\ndf <- NULL\nfor(k in 1:18){\n  df <- rbind(df, data.frame(x = 10^(-k-u), y = y, g = k))\n}\n\nqplot(x, y, data = df) # ok\nqplot(x, y, data = df) + scale_x_log10() # ok\nqplot(x, y, data = df) + facet_wrap(~ g, scales = 'free_x')\nqplot(x, y, data = df) + facet_wrap(~ g, scales = 'free_x') + scale_x_log10()\n```\n I was sure it had something to do with the size of his values. Tiny values are tiny. \n Collecting some comments/discussion on this.\n\nThere was a patch to `scales` that addressed some aspects of this problem. That patch was hadley/scales#6 which I believe was at least partially in response to https://groups.google.com/d/topic/ggplot2/voh__Tl5hxA/discussion. However, that fix does not seem to handle all the cases which are triggering false positives. In particular see two StackOverflow questions: http://stackoverflow.com/q/10900809/892313 and http://stackoverflow.com/q/10808056/892313 which deal with small numbers (on the order of 10^-11 and 10^-123).  \n\nThe current fix applies to small differences in large numbers (based on the code in the tests in hadley/scales@e130daa74de012ee529e1203e1f1ad7f8bbec3f2). What is missing is not triggering a false positive on (relatively) large differences in very small numbers.\n\nThere is also a discussion on ggplot-dev: https://groups.google.com/d/topic/ggplot2-dev/hNDrahVs94E/discussion\n  ```\nlibrary(lubridate)\nlibrary(scales)\nlibrary(ggplot2)\n\n#Two sample datasets\ndfr1 <- data.frame(\n  date = seq(as.Date(\"2012-01-01\"), as.Date(\"2012-12-31\"), by = \"1 day\"),\n  value = runif(366)  \n)\n\ndfr2 <- data.frame(\n  date = seq(ymd(\"2012-01-01\"), ymd(\"2012-12-31\"), by = \"1 day\"),\n  value = runif(366)  \n)\n\n#OK\n(p <- ggplot(dfr1, aes(date, value)) +\n  geom_line() +\n  scale_x_date(\n    breaks = date_breaks(\"months\"),\n    labels = date_format(\"%b\")\n  )\n)\n\n#No axis labels\np %+% dfr2\n```\n\n`date_breaks()(dfr1$date)` and `date_breaks()(dfr2$date)` return the same dates (though with different classes), so I suspect that the problem lies somewhere in the scale creation.\n Fixed in hadley/scales#542b8149107776bdd37fdf07ac0cbe27021a7ba7\n  The following produces overlapping bins.\n\n``` r\nn = 1000\ntemp <- data.frame( \n                   x= rnorm(n)\n                 , y = rnorm(n)\n                 , z = sample(1:5, n, replace = TRUE)\n                 , f = as.factor(sample(1:3, n, replace = TRUE, prob = c(0.8, 0.15, 0.05)))\n            )\n\nggplot(data = temp, aes(x, y, z = z, colour = f))+ stat_summary2d()\n```\n Is it possible to specify which color ends up on top? Also was/is this the right place to talk about this?\n  That's probably deliberate - I use `#` for internal docs.\n     The facet order is broken when adding a new layer with new data.\n\n``` r\nlibrary(ggplot2)\nset.seed(123)\n\nd <- data.frame(x=1:15, y=rnorm(15), f=factor(rep(letters[1:3],\neach=5), levels=letters[1:3]))\n\n## all fine, facets are a, b, c\n( p <- ggplot(d, aes(x, y)) + facet_grid(f~.)+\n geom_path()  )\n\nd2 <- data.frame(x=2, y=2, f=\"b\",\n                           stringsAsFactors=FALSE) # to be sure\n\n## now the facets are in a different (wrong) order!\np +  geom_blank(data=d2)\n```\n This will be fixed at:\n\n```\nbase <- unique(ldply(values[has_all]))    \n```\n\nin `layout_base` of `facet-layout.r`.\n\nBut things are complicated.\n  Using the scale date example from http://had.co.nz/ggplot2/scale_date.html\n\n```\nlibrary(\"ggplot2\")\ndf <- data.frame(date = seq(Sys.Date(), len=100, by=\"1 day\")[sample(100, 50)], price = runif(50))\ndf <- df[order(df$date), ]\ndt <- qplot(date, price, data=df, geom=\"line\") + opts(aspect.ratio = 1/4)\ndt + scale_x_date(major=\"months\", minor=\"weeks\", format=\"%b\")\n```\n\nGives the error:\n**Error in continuous_scale(aesthetics, \"date\", identity, breaks = breaks,  : \n  unused argument(s) (major = \"months\", minor = \"weeks\", format = \"%b\")**\n\nThis was working the first week of April\n The arguments you used would apply to 0.8.9 but not to 0.9.0. As Winston mentioned, setting certain positional scales is different in 0.9.0, now using the scales package. This should be close to what you want:\n\ndt + scale_x_date(breaks = date_breaks(width = '1 month'),\n                   minor_breaks = '1 week',\n                   labels = date_format('%b-%Y'))\n Thank you for the detailed response.  Is there documentation for the scales package?  I had so many reports fail on 0.9.0 that I had to go back to 0.8.9.\n Thank you!\n Hi:\n\nThe transition guide to 0.9.0 has some documentation re scales: http://cloud.github.com/downloads/hadley/ggplot2/guide-col.pdf\u00a0 See sections 6 and 7. This was written before the minor_breaks = argument was working, so no examples using it are contained there (but I tried :).\n\nAt the moment, the help pages for the scales package, the document mentioned above and the ggplot2 on-line help pages (had.co.nz/ggplot2/docs) are the only sources of documentation I know; a few posts on the ggplot2 list and maybe some at StackOverflow might provide a little more material of interest. However, Hadley and I are commencing a fairly large documentation project that will encompass both ggplot2 and scales to be available on-line in a few months, but that doesn't address your immediate concerns.\n\nHTH,\nDennis\n\n---\n\n From: cfranko reply@reply.github.com\nTo: Dennis Murphy djmurphy0420@yahoo.com \nSent: Tuesday, May 8, 2012 5:04 PM\nSubject: Re: [ggplot2] Scale-date formatting no longer working (#542)\n\nThank you for the detailed response.\u00a0 Is there documentation for the scales package?\u00a0 I had so many reports fail on 0.9.0 that I had to go back to 0.8.9.\n\n---\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/hadley/ggplot2/issues/542#issuecomment-5589812\n    when passing POSIXct datetime values with GMT timezones, scale_x_datetime appears to convert the x axis labels to the local machine timezone. There have a been a few posts on the google group and stack overflow related to this, but I have not seen a resolution or found a bug filed here.\n\nI have tired passing tz=\"GMT\" but that is unused.\n\nreproducible example and sessionInfo() available at:\nhttps://gist.github.com/2578877\n Fixed in hadley/scales@274c1f9abd9a3c7726edd569c893b289e3886276\n  But this would then break (e.g.) `aes(col = x)`.  \n As an aside, `col` is separately mapped to `colour` as part of the support for being able to use base graphics names for aesthetics: https://github.com/hadley/ggplot2/blob/master/R/aes.r#L11 which then gets used in `rename_aes`\n also, maybe using `pmatch` instead of `charmatch` could prevent conflicts\n  ``` r\n# Changing the length of the ticks\nlibrary(grid)\n\nlibrary(MASS)\nlibrary(scales)\na <- ggplot(Animals, aes(x = body, y = brain)) + geom_point() +\n     scale_x_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n                   labels = trans_format(\"log10\", math_format(10^.x))) +\n     scale_y_log10(breaks = trans_breaks(\"log10\", function(x) 10^x),\n                   labels = trans_format(\"log10\", math_format(10^.x))) +\n     theme_bw()\na + annotation_logticks(short = unit(.5,\"mm\"), mid = unit(10,\"mm\"), long = unit(4,\"mm\"))\n```\n   The newest version of ggplot (and dev version) break a few custom geom and stats.\n\neg:  https://github.com/edielivon/FAAV/blob/master/r/stat-ellipse.R\n\neven after doing the ggplot2:::Stat and $new() changes.\n\nAre there any plans to make ggplot2 backward compatible?\n The original is here:\n\nhttps://github.com/JoFrhwld/FAAV/blob/master/r/stat-ellipse.R\n\nThis would make an amazing geom to include in base ggplot2.\n Try changing the last line to\n\n``` r\nstat_ellipse <- function(mapping=NULL, data=NULL, geom=\"path\", position=\"identity\", ...) {\n  StatEllipse$new(mapping=mapping, data=data, geom=geom, position=position, ...)\n}\n```\n\nThat works for me on a simple test.\n\nAs for your question:\n\n> Are there any plans to make ggplot2 backward compatible?\n\nI don't believe that there are. 0.9.0 changed a good bit of how things worked, and making new geoms and stats were always considered tinkering under the hood and were never guaranteed to keep working. That said, more changes over time are intended to make a more stable way to extend geoms and stats. Of course, in doing so, it will almost certainly break all the existing custom ones.\n Thanks that works.  Do you have suggestion for the move away from proto?\n  Please try the following:\n\ndf <- expand.grid(y = rnorm(50), x1 = c('a', 'b'),  x2 = c('a', 'b')) \ndf$y[df$x1 == 'a' & df$x2 == 'a'] <- NA \nggplot(df, aes(x = x1, y = y)) + geom_boxplot() + facet_grid(.~x2) \n\nAs you can see, the boxplot in the left panel has not the same width as those in the right panel.\n  In the [geom_violin wiki](https://github.com/wch/ggplot2/wiki/geom_violin), there are a number of examples.  One describes overlaying a boxplot on a violin plot that is dodged by a categorical variable:\n\n```\n# Generate some data\nset.seed(111)\ndat <- data.frame(x=LETTERS[1:3], y=rnorm(90))\n# Get rid of half the C entries (to illustrate scaling to sample size)\ndat <- dat[ dat$x!=\"C\" | c(T,F), ]\n\n# Dodging with boxplot overlay\nggplot(dat, aes(x=\"foo\", fill=x, y=y)) + geom_violin() +\n  geom_boxplot(width=.1, outlier.size=0, fill=\"grey50\", position=position_dodge(.9)) +\n  stat_summary(fun.y=median, geom=\"point\", fill=\"white\", shape=21, size=4, position=position_dodge(.9))\n```\n\nWhen I run this code, the 3 the violin plots are placed correctly, but only a single boxplot and median point is placed (or perhaps all 3 are overlayed), right in the center. \n\nIt seems that the problem is caused by the _fill_ definitions in the _geom_boxplot()_ and _stat_summary()_ functions.  Removing them causes 3 boxplots/points to be plotted, but of course they are the same color as the violin plots.  \n\nIn addition, once the fill definition is removed, the _position=position_dodge(.9)_ definition is also apparently wrong, as the 0.9 value plots the boxplots/points in the wrong position.  A value of 0.45 plots them correctly so they are inside the violin plots, but I suspect that the problem is more likely the position of the violin plots, as they appear squished in the center of the plot, with lots of empty space on either side.\n\nThanks,\n\nJon\n I am seeing different behavior than you in 0.9.0.  \n\n```\nggplot(dat, aes(x=x, y=y, fill=g)) +\n    geom_bar(position=\"dodge\", fill=\"white\", colour=\"black\", stat=\"identity\")\n```\n\ngives me a plot where the columns are stacked, not dodged.\n\nI'm going to make an argument that the current behavior (what I'm seeing in 0.9.0 and what you are seeing in master)  is the correct one:\n\nI'll start with a quote from the `ggplot2` book: \n\n\"By default, the `group` is set to the interaction of all discrete variables in the plot.\" (Section 4.5.3, page 49)\n\nOn its surface, this seems to support the idea that the boxplot in this case should be grouped by fill, but I don't think it really does.  First, \"variables\" is not that well defined of a concept, so I think the best understanding of it is \"aesthetic\", and even more \"mapped aesthetics.\"  Also, layers are independent of each other, though a layer will inherit data and aesthetics from the base call -- unless they are overridden in that layer.  So I think that \"in the plot\" should really be \"in the layer\" (each layer determining default group separately).\n\nSo if you agree that the more precise statement should be \"By default, the `group` is set to the interaction of all discrete mapped aesthetics in the layer\", then the new behavior is correct. In the boxplot layer, `fill` is no longer a mapped discrete aesthetic; it is a set value. \n\nConsider a different example:\n\nggplot(mtcars, aes(x=wt, y=mpg, colour=factor(cyl))) +\n  geom_point() +\n  geom_smooth(method=\"lm\") +\n  geom_smooth(method=\"lm\", colour=\"black\")\n\nI would expect that the second `geom_smooth` would create a single best fit line for all the data, and it does (in 0.9.0).\n\nNow, I realize that you are talking about the behavior of `position_dodge` and not any of the summary statistics. However, I would expect that dodge should use the same interpretation of what the grouping variables are as the layer it is in.\n You're right; they aren't stacked.  However, they do not have `position=\"identity\"` either. They are dodged, just not visibly so; that is, they are dodged but without anything to dodge with respect to. If you look at the summary, then the layer with the bars does have it's position listed as dodge. Also:\n\n``` r\np <- ggplot(dat, aes(x=x, y=y, fill=g)) +\n    geom_bar(position=\"dodge\", fill=\"white\", colour=\"black\", stat=\"identity\")\n\nwith(ggplot2:::PositionDodge, debug(adjust))\ndebug(ggplot2:::pos_dodge)\np\ndata\nc\ndf\nc\ndf\nc\ndf\nc\nwith(ggplot2:::PositionDodge, undebug(adjust))\nundebug(ggplot2:::pos_dodge)\n```\n\ngives\n\n``` r\n> p <- ggplot(dat, aes(x=x, y=y, fill=g)) +\n+     geom_bar(position=\"dodge\", fill=\"white\", colour=\"black\", stat=\"identity\")\n> \n> with(ggplot2:::PositionDodge, debug(adjust))\n> debug(ggplot2:::pos_dodge)\n> p\ndebugging in: get(x, envir = this, inherits = inh)(this, ...)\ndebug: {\n    if (empty(data)) \n        return(data.frame())\n    check_required_aesthetics(\"x\", names(data), \"position_dodge\")\n    collide(data, .$width, .$my_name(), pos_dodge, check.width = FALSE)\n}\nBrowse[2]> data\n  x  y PANEL group ymin ymax xmin xmax\n1 1 10     1     1    0   10 0.55 1.45\n2 2  5     1     2    0    5 1.55 2.45\n3 3  8     1     3    0    8 2.55 3.45\n4 1  7     1     1    0    7 0.55 1.45\n5 2  9     1     2    0    9 1.55 2.45\n6 3  4     1     3    0    4 2.55 3.45\nBrowse[2]> c\ndebugging in: .fun(piece, ...)\ndebug: {\n    n <- length(unique(df$group))\n    if (n == 1) \n        return(df)\n    if (!all(c(\"xmin\", \"xmax\") %in% names(df))) {\n        df$xmin <- df$x\n        df$xmax <- df$x\n    }\n    d_width <- with(df, max(xmax - xmin))\n    diff <- width - d_width\n    groupidx <- match(df$group, sort(unique(df$group)))\n    within(df, {\n        xmin <- xmin + width/n * (groupidx - 1) - diff * (n - \n            1)/(2 * n)\n        xmax <- xmin + d_width/n\n        x <- (xmin + xmax)/2\n    })\n}\nBrowse[2]> df\n  x  y PANEL group ymin ymax xmin xmax\n1 1 10     1     1    0   10 0.55 1.45\n4 1  7     1     1    0    7 0.55 1.45\nBrowse[2]> c\nexiting from: .fun(piece, ...)\ndebugging in: .fun(piece, ...)\ndebug: {\n    n <- length(unique(df$group))\n    if (n == 1) \n        return(df)\n    if (!all(c(\"xmin\", \"xmax\") %in% names(df))) {\n        df$xmin <- df$x\n        df$xmax <- df$x\n    }\n    d_width <- with(df, max(xmax - xmin))\n    diff <- width - d_width\n    groupidx <- match(df$group, sort(unique(df$group)))\n    within(df, {\n        xmin <- xmin + width/n * (groupidx - 1) - diff * (n - \n            1)/(2 * n)\n        xmax <- xmin + d_width/n\n        x <- (xmin + xmax)/2\n    })\n}\nBrowse[2]> df\n  x y PANEL group ymin ymax xmin xmax\n2 2 5     1     2    0    5 1.55 2.45\n5 2 9     1     2    0    9 1.55 2.45\nBrowse[2]> c\nexiting from: .fun(piece, ...)\ndebugging in: .fun(piece, ...)\ndebug: {\n    n <- length(unique(df$group))\n    if (n == 1) \n        return(df)\n    if (!all(c(\"xmin\", \"xmax\") %in% names(df))) {\n        df$xmin <- df$x\n        df$xmax <- df$x\n    }\n    d_width <- with(df, max(xmax - xmin))\n    diff <- width - d_width\n    groupidx <- match(df$group, sort(unique(df$group)))\n    within(df, {\n        xmin <- xmin + width/n * (groupidx - 1) - diff * (n - \n            1)/(2 * n)\n        xmax <- xmin + d_width/n\n        x <- (xmin + xmax)/2\n    })\n}\nBrowse[2]> df\n  x y PANEL group ymin ymax xmin xmax\n3 3 8     1     3    0    8 2.55 3.45\n6 3 4     1     3    0    4 2.55 3.45\nBrowse[2]> c\nexiting from: .fun(piece, ...)\nexiting from: get(x, envir = this, inherits = inh)(this, ...)\n> with(ggplot2:::PositionDodge, undebug(adjust))\n> undebug(ggplot2:::pos_dodge)\n```\n This behaviour is correct - setting an aesthetic is the same as not mapping.  I agree with Brian's description.\n   I had the functionality described in this wiki post\n\nhttps://github.com/hadley/ggplot2/wiki/Share-a-legend-between-two-ggplot2-graphs\n\nset up and running beautifully with ggplot2 version 0.8.9. After our system underwent some maintenance, we had to reinstall all of our packages and ggplot2 0.9 was installed. As it turns out, this broke the functionality of `opts(keep='legend_box')`. Adding that option did not remove plot, as expected. After reinstalling 0.8.9, we got back the desired behavior.\n\nIs there a new way of doing this, or is this a bug? If the former is the case, could the above wiki post be updated?\n\nThanks, and best regards\n\nChris\n You can't use this opts() anymore, instead you need to extract the legend from gtable, which is probably work in progress (gtable package). I've updated the wiki page with a way to do it manually.\n Great - thanks!\n Thanks for the hard work.  No way to get this backward compatible?\n  The following example illustrates the problem:\n\n```\n  qplot(1,1) + opts(axis.line = theme_segment (colour = \"black\", size=10))\n```\n\nThe bottom (x) axis is above the plot panel, but the left (y) axis is below.\n I tried `install_github(\"ggplot2\", \"hadley\")` and  `install_github(\"ggplot2\", \"kohske\")`, neither of them fixed this issue. Is it somewhere in a more experimental branch?\n I see, thanks. I'd tried fix/axis but from your account and it failed to fetch. This fixes the problem.\n  geom_point doesn't accept integers for shape in aes().\n\n\"ggplot(data=data.frame(x=c(1:16))) + geom_point(aes(x=x,y=x,shape=x))\" \n\nworked before R2.15.0 and now errors out with \"Error: A continuous variable can not be mapped to shape.\"  Even converting to factors (shape=factor(x))) seems to only accept 6 shapes  in the aes.  More notes at: http://www.win-vector.com/blog/2012/04/how-to-remember-point-shape-codes-in-r/\n You are correct, sorry about that.\n  This is definitely in the category of \"users shouldn't do that\" ... but here we are. \n\nFor a brief moment I forgot that `ggsave` takes the `width` and `height` arguments as inches and not pixels, and I (stupidly) entered `400` for the width and height of my plot. The pdf option saved my graphic and it opened, though the points were invisibly small. The `.png` version, however, killed R with an error on my OS X 10.6 machine, and froze R as `Not Responding` on my OS X 10.7 machine. \n\nI don't know where the upper limit is on size handling for large rasters, but if one is known, it might be nice to have a check that warns the user and doesn't even try to execute the save if one/both of the dimensions are over that limit.\n\nNot a super important issue, but I did just trip on it.\n     Hi the use case where i encountered this bug was when i was trying to plot county borders overlay-ed with colored lines of specific routes. I tried to plot the countries with geom_map.\n\nThe example is a bit complicated therefore a small example that produces exactly the same traceback\n\nMy idea was to use the NA colour to give a specific colour to one dataset (the country borders) and then use the color scale to give colours to the other dataset. So one dataset has only NA. I realize this is already a work around for plotting the borders but setting the colour arugment for geom_map did not seem to work:\n\n``` R\nrequire(ggplot2)\ncrimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)\ncrimes$Murder<-NA\nstates_map <- map_data(\"state\")\nggplot(crimes, aes(map_id = state)) +\n   geom_map(aes(fill = Murder), map = states_map, color=\"green\") +\n   expand_limits(x = states_map$long, y = states_map$lat) +\n        scale_fill_hue(na.value=NA)\n```\n\nproduces an empty plot instead of green borders as expected. Using colour mapped as an aes seams to work:\n\n``` R\nggplot(crimes, aes(map_id = state)) +\n   geom_map(aes(fill = Murder, colour=Murder), map = states_map) +\n   expand_limits(x = states_map$long, y = states_map$lat) +\n        scale_fill_hue(na.value=NA)\n```\n\nbut then i run into this problem below there one dataset has only NA in the colour column\n\n``` R\n> a<-data.frame(x=1:10, y=1:10, col=1:10);\n> b<-data.frame(x=1:10, y=10:1, col=NA); \n> ggplot(data=a,aes(x=x,y=y,colour=col))+geom_point()+geom_point(data=b)+scale_colour_gradient(na.value=\"red\")\nError: Discrete value supplied to continuous scale\n> traceback()\n12: stop(\"Discrete value supplied to continuous scale\", call. = FALSE)\n11: train_continuous(x, range)\n10: scale$range$train(x)\n9: scale_train.continuous(scale, df[[aesthetic]])\n8: scale_train(scale, df[[aesthetic]])\n7: FUN(X[[1L]], ...)\n6: lapply(scales$scales, scale_train_df, df = df)\n5: FUN(X[[2L]], ...)\n4: lapply(data, scales_train_df, scales = npscales)\n3: ggplot_build(x)\n2: print.ggplot(list(data = list(x = 1:10, y = 1:10, col = 1:10), \n       layers = list(<environment>, <environment>), scales = <S4 object of class \"Scales\">, \n       mapping = list(x = x, y = y, colour = col), options = list(\n           labels = list(x = \"x\", y = \"y\", colour = \"col\")), coordinates = list(\n           limits = list(x = NULL, y = NULL), wise = FALSE), facet = list(\n           shrink = TRUE), plot_env = <environment>))\n1: print(list(data = list(x = 1:10, y = 1:10, col = 1:10), layers = list(\n       <environment>, <environment>), scales = <S4 object of class \"Scales\">, \n       mapping = list(x = x, y = y, colour = col), options = list(\n           labels = list(x = \"x\", y = \"y\", colour = \"col\")), coordinates = list(\n           limits = list(x = NULL, y = NULL), wise = FALSE), facet = list(\n           shrink = TRUE), plot_env = <environment>))\n\n```\n\nBut it seems to work as soon as the colour column of the b dataset does contain one non na value\n\n``` R\n> a<-data.frame(x=1:10, y=1:10, col=1:10);b<-data.frame(x=1:10, y=10:1, col=c(1,rep(NA,9))); ggplot(data=a,aes(x=x,y=y,colour=col))+geom_point()+geom_point(data=b)+scale_colour_gradient(na.value=\"red\")\n```\n\n``` R\n> sessionInfo()\nR version 2.15.0 (2012-03-30)\nPlatform: x86_64-pc-linux-gnu (64-bit)\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=C                 LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_0.9.0\n\nloaded via a namespace (and not attached):\n [1] colorspace_1.1-1   dichromat_1.2-4    digest_0.5.2       grid_2.15.0       \n [5] MASS_7.3-17        memoise_0.1        munsell_0.3        plyr_1.7.1        \n [9] proto_0.3-9.2      RColorBrewer_1.0-5 reshape2_1.2.1     scales_0.2.0      \n[13] stringr_0.6  \n```\n Thanks for fixing! and the hint for NA_real_\n  Thank you for creating ggplot.  It looks really good.  I noticed that the ggsave function does not handle the emf file type, just the wmf.  Can I suggest this addition to the save.r script at about line 49 of the current version.\n\n  emf <- function(..., width, height)\n    grDevices::win.metafile(..., width=width, height=height)\n\nMany thanks\n\nCharles\n  Here is the usage and output:\n\nhttp://rpubs.com/kohske/656\n Yes exactly. `unique` should be after `ecdf`.\n  For all filled shapes (polygons, reactangles, etc.) alpha affected fill only.\nOne could set the stroke to be a transparent colour using\n\n```\ncolour=scales::alpha(\"blue\", 0.5)\n```\n\noutside of aes() for example. But there was no way to map the colour of the\nstroke to a semi transparent colour. This commit fixes it.\n :-(\n  Consider the following example using geom_map:\n\n```\ncrimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)\nstates_map <- map_data(\"state\")\nggplot(crimes, aes(map_id = state)) +\n   geom_map(aes(fill = Murder), map = states_map) +\n   expand_limits(x = states_map$long, y = states_map$lat) +\n   guides(fill = guide_colorbar(colours = topo.colors(10))) +\n   opts(legend.position = \"top\")\n```\n\nOne would expect that by using `map_id = state`, that a link was made between a column in `states_map` (the polygons) and a column in `crimes` (Murder). `crimes` contains a state column:\n\n```\n> head(crimes)\n               state Murder Assault UrbanPop Rape\nAlabama       alabama   13.2     236       58 21.2\nAlaska         alaska   10.0     263       48 44.5\nArizona       arizona    8.1     294       80 31.0\nArkansas     arkansas    8.8     190       50 19.5\nCalifornia california    9.0     276       91 40.6\nColorado     colorado    7.9     204       78 38.7\n```\n\nbut states_map does not:\n\n```\n> head(states_map)\n       long      lat group order  region subregion\n1 -87.46201 30.38968     1     1 alabama      <NA>\n2 -87.48493 30.37249     1     2 alabama      <NA>\n3 -87.52503 30.37249     1     3 alabama      <NA>\n4 -87.53076 30.33239     1     4 alabama      <NA>\n5 -87.57087 30.32665     1     5 alabama      <NA>\n6 -87.58806 30.32665     1     6 alabama      <NA>\n```\n\nWhen using `geom_map`, the variable that links the polygons to the value in the dataset is ignored. In stead, the `region` variable in `states_maps` is always used. In this example above, this is expected behavior. But in this StackOverflow question this present a problem:\n\nhttp://stackoverflow.com/questions/10219919/geom-map-all-subregions-the-same-color/10224042#10224042\n\nSo, I think the `map_id` variable should be interpreted correctly, and not ignored.\n I edited the SO answer I wrote to reflect the documentation. Thanks for the feedback.\n    `geom_smooth` does not pick up its color from a `scale_color_manual` unless `color` is explicitly added to the aesthetic; `geom_line` does.  Perhaps this is best explained by illustration:\n\n```\nfoo <- data.frame(x = rnorm(30),  y = rnorm(30),  z = 1:3)\nfoo$z <-  factor(foo$z)\n# the below graph has blue smooth lines\nggplot(foo,  aes(x = x,  y = y, linetype=z)) + geom_smooth() + \n  scale_color_manual(values = c(\"black\"))\n# the below graph has black lines\nggplot(foo,  aes(x = x,  y = y, linetype=z)) + geom_line() + \n  scale_color_manual(values = c(\"black\"))\n# this makes the first line black, but the other two don't show up\nggplot(foo,  aes(x = x,  y = y, linetype=z, color = z)) + geom_smooth() + \n  scale_color_manual(values = c(\"black\"))\n```\n\nIt seems like a bug for the two functions to behave differently, but I can't tell which one is misbehaving.  I would prefer if they both behaved like `geom_line`, because I am trying to \"zero out\" all the colors in a graph with the `scale_color_manual` (for a dead-tree version of a graph).  If there is an alternative, better way to do that, I would also be interested in hearing about it...\n\nThanks.\n Hrm.  I have lost track somewhat of the discussion.  I think I understand why the `geom_smooth` is blue whereas the `geom_line` is black.  \n\nFrom the point of view of a user, it would be convenient if a quick print-suitable version of a graph could be generated by `last_plot() + theme_bw() + <something>`.  That is what I was trying to use the `scale_color_manual` to do -- to remove all the color from the plot.  So, I think that the missing piece is one or both of:\n1. making `geom_smooth` and friends read their default color from the theme, instead of having a global default.  This would let them be black in `theme_bw`, but blue in `theme_default`\n2. adding a `scale_color_constant` function, which would override any color that is specified by an aesthetic with a single value (in this case black).  This has the advantage of avoiding the need to specify black in each geom that makes up the graph.\n\nThat turns this from a bug report into a feature request, I suppose.  I've looked at the code involved, and while I wouldn't say that I have wrapped my head around all its object-orientedness, I could take a crack at implementing these things if there is interest in them.\n  An ugly turn around to pass the ... arguments is the following:\n\n``` R\n############## overload the locfit constructor\nlocfit.smooth <- function(formula,data,weights=NULL,...){\n   v=list(...)\n   vv=v[[\"...\"]]\nprint(vv$kern)\n   l=locfit(formula=formula, data=data,\n        kern=ifelse(is.null(vv$kern),\"rect\",vv$kern))\n   return(l)\n}\n\n# With kern = \"rect\": lines match now\nmodel <- locfit(y ~ lp(x, h=0.2), data=data, kern=\"rect\")\nxseq <- seq(0, 1, length = 100)\npred <- predict(model, newdata = data.frame(x = xseq))\ndata.locfit <- data.frame(x=xseq, y=pred)\n\n############## use this constructor in stat_smooth with ...=list( syntax\nggplot(data,aes(x=x,y=y)) + \n  stat_smooth(method=locfit.smooth,formula = y~lp(x,h=0.2), ...=list(kern = \"rect\")) + \n  geom_line(data=data.locfit,aes(x=x,y=y)) +\n  ylim(0,1)\n\n```\n Hmmmm - we may need to rethink this as part of the geom/stat rewrite.  There are just too many ... floating around for this strategy to succeed in general.  Let's push this to 0.10.\n   The following code is taken (slightly simplified) from\nhttp://stackoverflow.com/questions/10155058/plot-correlations-between-2-y-axes\n\n  Basically, if I have a variable name called 'date', my plot fails,\nwhereas it works if I either use dat$date (bad practice, I know) or rename the variable.\n\ndat <- data.frame( words = c( \"Aliens\", \"Aliens\", \"Constitution\", \"Constitution\",    \"Entitled\", \"Entitled\" ),\n              dates =  as.Date( c (\"2010-01-05\", \"2010-02-13\", \"2010-04-20\", \"2010-06-11\",\"2010-03-18\", \"2010-09-13\" )), \n                    Rep =    c( .18, .14, .16, .45, .33, .71 ), Dem = c( .16, .38, .24, .11, .59, .34 ))\n\nlibrary(ggplot2)\n\nggplot(dat,aes(Rep,Dem,colour=date))+geom_point()\n\nFails with:\n Error in data.frame(x = c(0.18, 0.14, 0.16, 0.45, \n   0.33, 0.71), y = c(0.16,  : \n  arguments imply differing number of rows: 6, 0\n\n either of the following hacks work:\n\nggplot(dat,aes(Rep,Dem,colour=dat$date))+geom_point()\ndat$ddate <- dat$date\nggplot(dat,aes(Rep,Dem,colour=ddate))+geom_point()\n doh!  Sorry, thanks for your time. I'm glad you're not Brian Ripley.\n   ggpcp stated it was using reshape::melt, but it is actually\nusing reshape2::melt.\n\nThe scale arguments to ggorder and ggstructure had a scale\nargument that was no longer used (corresponding argument in\nggpcp removed in 030fadf59a0fd896865b28fd9e76da9698164ec2.\nRemoved this argument (and its documentation which referenced\nreshape).\n\nSince I didn't have reshape installed on my newest R installation, these references were generating a NOTE in R CMD check for me. Since ggplot2 doesn't rely on reshape, but rather reshape2, now, I figured I would hunt down the source.\n    I don't know much about the backbone of ggplot2 but couldn't this programmed like the positioning of legends, i.e., relative to the entire plot?\n  Duplicate of Issue #484?\n  So a horizontal line would be specified with `yintercept=...` and `slope=0`, a vertical line with `xintercept=...` and `slope=Inf`? Could the value of `slope` be inferred if missing and only one of `xintercept` or `yintercept` is specified (the assumption being if no slope is specified, a horizontal or vertical line is desired)?\n  Maybe you'd want to have one clipGrob() attached to each layer, so that e.g ablines don't go wild outside the plot panel when you turn clipping off for some text annotations.\n  In the documentation it says extra parameters to stat_density2d are passed along to MASS::kde2d, but this is not the case for the h parameter:\n\n```\nlibrary(ggplot2)\n\nf <- data.frame(\n        x=rnorm(100),\n        y=rnorm(100))\n\np <- ggplot(f) +\n  stat_density2d(aes(x, y, fill=..density..), h=.1, geom=\"raster\", contour=F)\n\n\n\nprint(p)\n```\n Thanks Hadley\n  It currently references continuous_scale\n  Hi, \nhex colors in ggplot2 0.9 (in my case after updating to R 2.15) do not support the alpha channel anymore. Here is an example: \n    qplot(rnorm(100),rnorm(100),color=\"#cc000044\")\nignores the alpha channel. It used to work and \n    plot(rnorm(100),rnorm(100),bg=\"#cc000044\",pch=21)\nalso renders the colors correctly. \n\nThere are two reasons why I think ggplot2 should still support hex colors with alpha channel even when alpha=xx is the standard way to set transparency:\n\n1) ggplot2 0.8X used to allow the setting of the alpha channel in hex colors so 0.9 breaks compatibility with the old code.\n2) hex colors with an alpha channel are standard syntax in R and I don't see why ggplot2 shouldn't support that (see the plot example above)\n\nNote that I started having this problem only after upgrading to R 2.15!\n Good point and I am not sure what the right behavior is. A warning massage would be useful for sure. I like the behavior with the new guides. legend=F still works to disable a legend but produces a warning that guide=none is now that standard. \nSo a hex color with an alpha channel and without a alpha argument set could produce the 'correct' color but display a warning massage similar to the one for legend=F.\nhex color with alpha + alpha argument could behave as it does right now and display a warning message that the alpha channel is ignored. \n\nAn alternative would be to add the different alpha values from the color and the alpha value so that the final color is more transparent. But I am not sure whether the is desired. \n     It is simple if r (i.e., distance from center) of two point are equal. But probably things may be more complicated if they are different. \n Hmmmm, I'm reasonably certain that we want the straight-line (shortest) distance between two points in the converted coordinate system - that's why we use the great circle distance for `coord_map`.  I might be wrong though.\n That's why that formula needs tweaking - to account for the fact that arcs in ggplot2's polar coordinates only go in one direction.\n Ok - you've convinced me!\n But I wish I understood this better in general - i.e. given the polar coordinates transformation, why is that the correct distance metric?\n > But I wish I understood this better in general - i.e. given the polar coordinates transformation, why is that the correct distance metric?\n\nme too!!\n  Address Issue #448 request for news entry related to push request.\n   ```\nqplot(runif(10), runif(10)) + opts(axis.line=theme_line())\n```\n\n**Error in validDetails.polyline(x) : \n  It is invalid to specify both 'id' and 'id.lengths'**\n   It seems that when text labels are used, dodged label positions get mixed up.  See https://groups.google.com/group/ggplot2/browse_thread/thread/d9a86f13145d4650 for the discussion.\n\n```\nset.seed(121)\ndf = data.frame(class = c(1,1,2,2,3,3,4,4,5,5), val = round(runif(10),2), group = c(\"group1\", \"group2\"))\ndf$text_labels = as.character(sprintf(\"%2.2f\", df$val))\n\nggplot(data = df, aes(x=class, y=val, fill=group)) +\n    geom_bar(stat=\"identity\", position=position_dodge(width=1)) + \n    geom_text(aes(label = text_labels, y = val + 0.1), angle = 45,\n        alpha = 0.5, position = position_dodge(width=1)) +\n    geom_text(aes(label = val, y = val + 0.1), angle = 45, colour = \"red\",\n        alpha=0.5, position = position_dodge(width=1))\n```\n  Hello,\n\nI am using ggplot 0.9 and am having trouble with logic that worked in 0.89.  The below code takes a list, which I named sectorlist,  and is supposed to insert each item in the list into a function (sectorplot).  The function contains two plots.  The problem is that the last plot is printed twice.  This is an inconvenience.  Can anyone tell by looking at this logic why it no longer works?  As mentioned, the same code worked in version 0.89.\n\nfor ( i in 1:length(sectorlist)) {\n  print(sectorplot(as.character(sectorlist[i])))}\n\nThanks.\n Yes sectorplot returns a ggplot.  Below is the code for sectorplot.  As I mentioned\n\nx.df = data.frame(x)\nx.sub = x.df[x.df$VSR==\"YES\" ,   ]\n\nqrscore = x.sub\nattach(qrscore)\ndrop.levels <- function(dat){\n\n  dat[] <- lapply(dat, function(x) x[,drop=TRUE])\n  return(dat)\n}\n\nrequire(ggplot2)\n\nsectorlist=na.omit(unique(qrscore$Sector))\nsectorplot <- function(sectorname) {\nsectordata=subset(qrscore, Sector %in% c(sectorname))\nsectordata=drop.levels(sectordata)\nportfolio_name1=paste(\"Sector: \",sectorname,\"Data\")\nsectorplot1=qplot(QR,GR,data=sectordata,colour=Subind, xlim = c(0, 1), ylim = c(0, 1), shape=Class,  \nsize=MKTcap,label=Symbol,main=paste(\"Sector: \",sectorname,\"Data\",\"4/3/2012\"))\nprint(sectorplot1+geom_text(size=1.75,hjust=0,vjust=0,colour=\"black\")+scale_area(range=c(1,15)) )\nsectorplot2=qplot(QR+GR, HL_VR,data=sectordata,colour=Subind, xlim = c(0, 2), ylim = c(0,  \n1),size=MKTcap,label=Symbol,shape=Class, ylab=\"Cheap                          HL_VR                       Expensive\",main=paste(portfolio_name, portfolio_name1,sep=\"\\n\"))\nprint(sectorplot2+geom_text(size=1.75,hjust=0,vjust=0,colour=\"black\")+scale_area(range=c(1,15)))\n}\npdf(file=\"S:/xxx/xxx.pdf\", width=10,height=7,paper=\"special\",pointsize=5)\nfor ( i in 1:length(sectorlist)) {\n  print(sectorplot(as.character(sectorlist[i])))\n        indulist=na.omit(unique(qrscore$sectordata))\n    }\ndev.off()\n  Can I look at your test code?\nI think the examples in .Rd include Sys.Date(), so the output depends on the date when you run the test code.\n\nSo I would think it is better if all `Sys.Date()` in the examples is replaced by any fixed date using, say, `as.Date(\"1978/10/17\")`.\n  It would be cool to have unique grob names (again?). \nI frequently just produce the grob and then edit some of the labels / names / titles afterwards according to some table. This allows me to quickly change notation and use expressions very easily. In editGrob() I need to specify a gPath and if the name of an element is not unique, this does not work reliably.\n\nSee below for an example and output.\n\nThanks!\n\n``` R\nrequire(ggplot2)\nrequire(grid)\ndata <- expand.grid(v1=letters[1:4], v2=LETTERS[1:3])\ndata$y <- rnorm(12)\n\ngp <- ggplot(data, aes(y, v1, color=v1, shape=v2)) + geom_point()\ngrob <- ggplotGrob(gp)\n## get the labels \nlls <- getGrob(grob, gPath='label-', grep=TRUE, global=TRUE)\n## now we would edit the labels using editGrob,\n## but this doesn't work since the names are not unique, e.g.,\n## both have the same name and vp\nlls[[1]][c('name', 'vp', 'label')]\nlls[[4]][c('name', 'vp', 'label')]\n\nsessionInfo()\n\n## this produces the following output:\n\n## > Loading required package: ggplot2\n## > Loading required package: grid\n## > > > > > > > > > > > $name\n## [1] \"label-3-3-4-4\"\n\n## $vp\n## layout::label-3-3-4-4 \n\n## $label\n## [1] \"A\"\n\n## > $name\n## [1] \"label-3-3-4-4\"\n\n## $vp\n## layout::label-3-3-4-4 \n\n## $label\n## [1] \"a\"\n\n## > > R version 2.15.0 RC (2012-03-25 r58832)\n## Platform: x86_64-unknown-linux-gnu (64-bit)\n\n## locale:\n##  [1] LC_CTYPE=de_CH.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8       \n##  [4] LC_COLLATE=de_CH.UTF-8     LC_MONETARY=en_US.UTF-8    LC_MESSAGES=de_CH.UTF-8   \n##  [7] LC_PAPER=C                 LC_NAME=C                  LC_ADDRESS=C              \n## [10] LC_TELEPHONE=C             LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       \n\n## attached base packages:\n## [1] grid      graphics  grDevices datasets  stats     utils     methods   base     \n\n## other attached packages:\n## [1] ggplot2_0.9.0  fortunes_1.4-2 sfsmisc_1.0-20\n\n## loaded via a namespace (and not attached):\n##  [1] colorspace_1.1-1   dichromat_1.2-4    digest_0.5.2       MASS_7.3-17       \n##  [5] memoise_0.1        munsell_0.3        plyr_1.7.1         proto_0.3-9.2     \n##  [9] RColorBrewer_1.0-5 reshape2_1.2.1     scales_0.2.0       stringr_0.6       \n## [13] tools_2.15.0      \n## > \n```\n I totally agree. I hope this feature, the consistent naming of each grob, will appear in the future version.\n I'm wondering, could we replace unique numbers as in `axis.ticks.x.polyline.10178` with an alternative that is more reproducible? This last number, as far as I can tell, is constructed internally by grid, and will vary from user to user, and even from plot to plot in a given session. \n\nIt makes post-processing more difficult than it could be; for example one might want to be sure that a particular grob has an exact name, no matter what the drawing context may be, to attach a SVG decoration to it; alternatively the structure of two plots could be compared in a text representation using diff tools, etc.\n\nBTW, there's a pdf documenting the lattice naming convention, http://lattice.r-forge.r-project.org/Vignettes/src/naming-scheme/namingScheme.pdf\n I don't know to be honest, it might be worth asking Paul Murrell for advice. I imagine if two plots are on the same device / display list, the low-level grobs remain children of their unique parent and don't become delocalised or anything. If you specify the full grob path, starting from the unique parent id, it should find only one instance of the grob, right?\n IIRC there is the way to reset index in grid.\nResetting it before plot will make thing reproducible.\n ``` r\nassign(\"index\", 0, environment(grid:::grobAutoName))\n```\n\ncan reset the index, but I don't recommend.\nAs @hadley suggested, we can ignore the suffix.\n I've never read that a unique id was required (grobAutoName is merely used when the user doesn't supply a name, which doesn't have to be unique: most of the above aren't if you push two identical plots on a device!), in fact my guess is that it is a relic of an old implementation. \nI can check with Paul if you want; if it's not needed it just adds noise to an otherwise very clean and consistent naming scheme.\n I've made one small change to eliminate the trailing unique integers.  But we need to a think a bit about the naming scheme, because it's currently a bit inconsistent.  Should we use `.` or `-` to separate components? Should all names containing the class of the grob as the last component?\n sorry i've been busy and haven't found the time to summarise Paul's reply here\n Ok, this is harder than I thought - as well as fixing `ggname`, I think `Geom$draw_groups` also needs to modified to rename all of the children geoms.\n To do this properly is pretty hard with the current structure of geoms.  We'll fix it once and for all (hopefully!) as part of the geom/stat rewrite and conversion to s3.\n  Because the `...` is not the first argument of `scale_***` functions further arguments cannot be abbreviated. For example:\n\n```\nlibrary(\"ggplot2\")\nset.seed(123)\nd <- data.frame(a=letters[1:5], x=runif(5), y=runif(5))\nggplot(d) + geom_point(aes(x, y, colour=a))\n#1\nggplot(d) + geom_point(aes(x, y, colour=a)) + scale_colour_discrete()\n#2\nggplot(d) + geom_point(aes(x, y, colour=a)) + scale_colour_discrete(h.start=100)\n#3\nggplot(d) + geom_point(aes(x, y, colour=a)) + scale_colour_discrete(h.st=100)\n#3 should be like 2 but fails instead, saying that h.st is unknown\n```\n\nWhat is the logic behind the position of `...`? I tested putting `...` at the end for all colour and fill functions and did not notice anything breaking (tests were arguably not extensive but still, I've worked on a few projects with this since yesterday and it was alright).\n While I understand the reasoning, it goes against R's convention. Abbreviating arguments is a source of errors but it is also convenient. It should be left to the user to choose wether he wants to be slow and disciplined or fast and sloppy (at least that's the position of R in that respect). So if there's really no difference between putting `...` in the front or at the end, I think it should be in the end, just to follow R's convention.\n That makes sense. If there's a way to still abbreviate the rest that would be better but I can't seem to find one.\nYou can close this if there is none.\n     Could you add a test (visual or otherwise) to confirm that this works?  I think you could probably inspect the number of rows per group in the output of `ggplot_build`\n Perhaps output of `ggplot_build` only respects the scale transformation. This issue is relevant to coord transformation. So at the moment I can only provide visual test.\n @wch yes, the conversion from cartesian to polar is not a simple problem.\nSo could you please file another issue?\n  > There's just not enough \"segment resolution\" near the center. There tends to be a higher information density near the center than at the edge, resulting in tighter turns that require more segments.\n\nThis is not easy to improve. Maybe there is some good algorithms to determine the breaks of curve.\n\n> It's probably calculating distances on the y values before they're remapped to their ending radial position. For example, a with a y range of (-10,10), a y value of 0 would be halfway from the center to the edge, but this is calculating the number of segments based on the \"raw\" y value. This is demonstrated by the second and third examples.\n\nThis is very easy to fix.\n  stat_bin2d did not correctly handle NA's in the data. This could be\ntriggered by setting scale limits which did not include the entire\nrange of the data.\n\nThis arose from a discussion on the mailing list\nhttps://groups.google.com/d/topic/ggplot2/VAB1wKqwg9w/discussion\n Thanks Brian - will pull next time I'm working on ggplot2.\n It was easier to create another pull request with the update to NEWS (#469) because when I branched off to make the fix, NEWS didn't have anyplace to put new entries and I wanted each to apply cleanly. And I can't rebase an already public branch.\n   Here is a verbose way to do that:\n\n```\nggplot(dat, aes(x,y)) + geom_bar(stat=\"identity\", geom_params = list(width=.5))\n```\n\nI'm not sure if this is a bug, but to fix this, we need to reconsider the construction of layer, especially the sensitivities to the parameters.\n  I think the test is wrong.  `(all)` is the category that is the margin. Effectively, there should be a copy of the data where any margined value is replaced with `(all)`. I think that the test should be\n\n```\nexpect_that(nrow(loc), equals(2 * nrow(df)))\n```\n\nOr in general, for `n` faceting variables, \n\n```\nexpect_that(nrow(loc), equals((2 ^ n) * nrow(df)))\n```\n The `(all)` rows contain the data that is to be displayed/used in the panels that are the marginals.\n\nI don't know what the bug is/was that was being worked around.  It was introduced in 9fb2a973166c2e60ea057c8e072804de8369f3a8 by Hadley. There was later discussion of this bug on that commit.\n This bug fix warrants a mention in the NEWS file.\n   It fetches 6 colours from a colorbrewer palette and feeds them to gradientn. It gives very nice results even if the palettes were not intended for that use originally.\n\nIdeally, the regular brewer scale should be able to deal with this: use `scale_colour/fill_brewer()` and provide a continuous or a discrete scale depending on the data... but this may run again into the problem that the data is only known at render time or something like this. Anyhow, I couldn't figure out how to do that with the current state of the code so a created new functions. The names (`scale_colour/fill_brewerc`) are clearly not very inspired so I am completely open to suggestions.\n This is an example map produced with the \"Spectral\" palette (and stereographic projection in coord_map, Yay!):\n\n![image](https://f.cloud.github.com/assets/18445/471006/6cf5ca72-b70b-11e2-97ee-42310d95c5d7.png)\n\nFor those who want to know, this is the average \ntemperature at the sea surface in summer.\n What about `scale_***_distiller` to signify that it goes a bit further than \"brewer\". That's not very discoverable (to say the least) but is kinda fun.\n Just realized there might be some unintended association with Acrobat Distiller and the production of PDFs etc. Did anyone else think of this?\n So, what about `scale_***_distiller`? Opinions anyone? I know I won't be able to find a better name, but native english speakers might.\n The only thing I can think of would require overhauling all the color/fill names: making the method of generation of the levels a suffix. So this would be `scale_***_continuous_brewer`, and the current `scale_***_brewer` would be `scale_***_discrete_brewer`; `scale_***_gradient` would be `scale_***_continuous_gradient`; etc. However, I am not sure that it would be worth it (even with the original names being maintained as aliases for backwards compatibility).\n It's always seemed kind of odd to me that Brewer palettes (and, if they were to be implemented, those of dichromat) would have their own special syntax in ggplot2. Should we consider the possibility of hard-coding these particular colour values in ggplot2 (or package scales, presumably), independently of the original package, and make a more consistent interface to all these special cases? It could even be part of a new colour package, defining a general structure to define and access colour palettes.\nThe weird contraints of RColorBrewer (n >=3 for \"Set1\" ??), the absence of continuous versions, and the inconsistent naming scheme are somewhat confusing in the otherwise consistent ggplot2 framework. \n I agree with baptiste though. I think there should be two colour scales: `scale_colour_discrete` and `scale_colour_continuous` and the palette argument should determine which colours to use. For the discrete scale, the default could be `\"hue\"` and that would be the current behaviour, or the appropriate palettes from ColorBrewer or dichromat.\n\nBut that would probably break too much pre-existing code to be viable...\n `But that would probably break too much pre-existing code to be viable...`\n\nnot necessarily: if `scale_colour_brewer()` became merely an alias for `scale_colour_discrete(palette = ...)` the more general functions would not have to break anything.\n On 2012-Jun-11, at 17:06 , hadley wickham wrote:\n\n> I don't particularly see the appeal of collapsing scales with rather different arguments in to one function - I think two many r functions do that already, and it's rather confusing.  A function should do one thing well.\n\nI agree that, from a programming point of view, a function should be as elemental as possible and do one thing, and one thing only, very well.\n\nFrom a User Interaction standpoint however, you want an interface as simple and compact as possible. So if I want to change the colour of my geom, I _always_ use scale_colour_discrete/continuous (actually, as you know, I would even prefer scale_colour and leave the rest to be figured out by the function). This function should have a nice set of defaults, that work \"well enough\". Now, once I am more familiar with the function, I can go and explore a bit more to make more complex stuff with it. At that point, I find a palette argument to scale_colour_**\\* more discoverable than several separate functions.\n\nBut in the end, it's probably a matter of personal preference. For example, I love the OS X menu UI where you can browse all the plain and simple menu actions and when you press Alt, some of the menu items change and provide more advanced actions. That's simple as a first approach and there is a consistent way to get more advanced stuff. Some people hate that and would rather have everything exposed from the onset, or access toe advanced stuff though another UI entirely. To me that's quite akin to having a consistent function as the main UI, with more advanced stuff \"hidden\" away into arguments instead of several functions which all look equally important.\n > I don't particularly see the appeal of collapsing scales with rather different arguments in to one function - I think two many r functions do that already, and it's rather confusing. A function should do one thing well.\n\nI'm not sure; if a grammar of graphic does such a good job at combining heaps of different plot types into a single, consistent framework with one top-level function (ggplot), why couldn't we aim for the same approach with scales?\n\nIt seems to me that choosing a colour scale is conceptually similar to choosing a type of plot and playing with variations, from a user's perspective. \nHaving a wild variety of different colour functions that inherit their name from the particular colour package they come from, or the type of scale that they represent, or something else, ... seems more confusing to me than one or two generic functions, with good defaults, that accept one consistent argument for fine-tuning the appearance (namely, the palette of colours).\n It's quite different from the problem at hand but while we are on the topic of scales and since many interested parties are watching the topic, here is another suggestion: issue #578.\n\nEdit: wow, it actually got automatically referenced here. Nice. Thanks github.\n  Running the following code leads to the dotplot elements being centered for the \"H\" factor as expected, but leads to dotplot elements of the \"L\" factor to be slightly offset to the left.  \n\ndat <- data.frame(letters=LETTERS[1:3], level = c(\"L\",\"H\"), size=rnorm(120))\n\nggplot(dat, aes(x=letters, y=size, fill = factor(level))) + \n  geom_boxplot(position=position_dodge(width=1)) +\n  geom_dotplot(position=position_dodge(width=1), binaxis=\"y\", stackdir=\"center\", binwidth=.1, alpha = .3)\n Winston,\n\nWorks perfectly!  Thanks very much.\n\nI have not thought very much about the following, but am curious if the new violin plot function will support something like the attached figure from a paper describing the R package \"bean plot\" (Kampstra, P. (2008). Beanplot: A boxplot alternative for visual comparison of distributions. Journal of Statistical Software, 8, 1-8. ).  It seems like there should be a way to create something like this, but the solution is not obvious.  \n\nThanks again for the quick fix and the great tool,\n\nJohn\n\nJohn D. Lee\nEmerson Professor\nDepartment of Industrial and Systems Engineering\nUniversity of Wisconsin-Madison\nPhone (608) 890-3168\nFax (608) 262-8454\njdlee@engr.wisc.edu \n\nOn Mar 14, 2012, at 12:17 PM, Winston Chang wrote:\n\n> It looks like the problem may be with the dodging code itself. I believe it made some assumptions about geoms that aren't always true. I wrote a preliminary fix, which is at wch@9e74f2de84e1f6d47919448fc367717a2441c40f.\n> You can test out with:\n> \n> ``` R\n> library(devtools)\n> dev_mode()\n> install_github('ggplot2', 'wch', 'fix/dodge')\n> library(ggplot2)\n> ```\n> \n> I'm not 100% sure yet that it won't mess up other stuff, so if you could try it out and let me know, that would be really helpful.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/hadley/ggplot2/issues/436#issuecomment-4502990\n  In the documentation for `facet_grid`, the `margins` parameter is described as:\n\n> logical value, should marginal rows and columns be displayed\n\nIn fact, `margins` can also take on a (vector of) character values which specify which variables/margins are to be computed. This functionality was requested in Issue #3, but never documented.\n  I have a SpatialPolygonsDataFrame in which the FIDs have been set to a specific column in the data.frame.\n\nfortify.SpatialPolygonsDataFrame is then not giving the result I expected; it seems to be reordering the features and\ngiving them the wrong label; the 'id' column of the resulting ggplot data.frame doesn't match the region id of the original sp object.\nThe reordering seems to happen in the split() or invert() commands of fortify.SpatialPolygonsDataFrame().\n\nI have attached reproducible code, with the expected spplot() results, the unexpected results from fortify.SpatialPolygonsDataFrame(), and\nhow I fixed it by rewriting the fortify to be more like fortify.SpatialPolygons(), and using the Feature IDs to name the ids and merge the data.frame attributes.\n\nIt is entirely possible that I am using the region parameter of fortify() improperly, I don't know.\nDoes anyone know what is going wrong with fortify.SpatialPolygonsDataFrame() here, or with how I am using it?\n\nNicholas\n\nNicholas Nagle,\nDept. of Geography\nUniversity of Tennessee\n307 Burchfiel Geography Bldg.\nKnoxville, TN 37996\n\n``` R\n#################################################################\ndownload.file('http://graunt.bus.utk.edu/Files/boston_shp.Rdata','boston_shp.Rdata')\nload('boston_shp.Rdata')\n# boston_shp: the Harrison-Rubinfeld boston data, attached to the 1970 tract boundaries\n# from the National Historical GIS <http://www.nhgis.org>\n\n# The Feature IDs are also the 'TRACT' columns\n\n\n# Desired result...\nspplot(boston_shp,'dis')\n\n####################\n# Does not work as expected\nboston.ggdf <- fortify(boston_shp,region='TRACT')\n# Merge the ggplot data frame with the attributes attributes, matching\n#   boston.ggdf$id to row.names(boston_shp@data)\n\nboston.ggdf <- cbind(boston.ggdf, boston_shp@data[as.character(boston.ggdf$id),])\n\nboston.ggplot <- ggplot(boston.ggdf, aes(x=long, y=lat, group=group, fill=dis))\nboston.ggplot+geom_polygon()+coord_equal()\n\n########################################\n# This does work as expected\nsaferFortify.SPDF <- function(model, data, region=NULL){\n warning('Using FIDs as the id.  User should verify that Feature IDs are also the row.names of data.frame. See spChFIDs().')\n attr <- as.data.frame(model)\n coords <- ldply(model@polygons,fortify)\n coords <- cbind(coords,attr[as.character(coords$id),])\n}\n\nboston.ggdf <- saferFortify.SPDF(boston_shp)\nboston.ggplot <- ggplot(boston.ggdf, aes(x=long, y=lat, group=group, fill=dis))\nboston.ggplot+geom_polygon()+coord_equal()\n```\n Charlotte says it's something to do with the difference in ordering between split and invert.\n A small test case:\n\n``` R\nlibrary(ggplot2)\nlibrary(sp)\n\nmake_square <- function(x = 0, y = 0, height = 1, width = 1){\n  delx <- width/2\n  dely <- height/2\n  Polygon(matrix(c(x + delx, x - delx,x - delx,x + delx,x + delx , \n      y - dely,y - dely,y + dely,y + dely,y - dely), ncol = 2))  \n}\n\nmake_hole <- function(x = 0, y = 0, height = .5, width = .5){\n  p <- make_square(x = x, y = y, height = height, width = width)\n  p@hole <- TRUE\n  p\n}\n\nfake_data <- data.frame(ids = 1:5, region = c(1,1,2,3,4))\nrownames(fake_data) <- 1:5\npolys <- list(Polygons(list(make_square(), make_hole()), 1), \n              Polygons(list(make_square(1,0), make_square(2, 0)), 2),\n              Polygons(list(make_square(1,1)), 3),\n              Polygons(list(make_square(0,1)), 4),\n              Polygons(list(make_square(0,3)), 5))\n\npolys_sp <- SpatialPolygons(polys)\nfake_sp <- SpatialPolygonsDataFrame(polys_sp, fake_data)\n\nfake_gg <- fortify(fake_sp)\nqplot(long, lat, data = fake_gg, geom = \"polygon\", fill = id)\n\n# works\nfake_gg_r <- fortify(fake_sp, region = \"region\")\nqplot(long, lat, data = fake_gg_r, geom = \"polygon\", fill = id)\n\n# now reorder regions\npolys2 <- rev(polys)\npolys2_sp <- SpatialPolygons(polys2)\nfake_sp2 <- SpatialPolygonsDataFrame(polys2_sp, fake_data)\n\n# doesn't work!\nfake_gg2 <- fortify(fake_sp2)\nqplot(long, lat, data = fake_gg2, geom = \"polygon\", fill = id)\n\n# doesn't work!\nfake_gg_r2 <- fortify(fake_sp2, region = \"region\")\nqplot(long, lat, data = fake_gg_r2, geom = \"polygon\", fill = id)\n```\n This fixes the problem of ordering, and changes the default behavior to splitting each Polygons element into it's own region (rather than using the first column to define region), following Nicholas' code.\n\n``` R\nfortify.SpatialPolygonsDataFrame <- function(model, data, region = NULL, ...) {\n  attr <- as.data.frame(model)\n  # If not specified, split into regions based on polygons\n  if (is.null(region)) {\n    coords <- ldply(model@polygons,fortify)\n    message(\"Regions defined for each Polygons\")\n  } else {\n    cp <- polygons(model)\n    try_require(\"maptools\")\n\n    # Union together all polygons that make up a region\n    unioned <- unionSpatialPolygons(cp, attr[, region])\n    coords <- fortify(unioned)\n    coords$order <- 1:nrow(coords)\n  }\n  coords\n}\n```\n And a test:\n\n```\nexpect_equivalent(fortify(fake_sp), arrange(fortify(fake_sp2), id, order))\n```\n  If a legend is specified to be displayed on top it is drawn above the plot title. \n\n  library(\"ggplot2\")\n  library(\"scales\")\n\n  qplot(mpg, cyl, data=mtcars, geom=\"point\", colour=gear) + opts(title=\"Test Plot\", legend.position=\"top\")\n\nMaybe this could be changed to the behaviour in the 0.8.x version were the legend was below the plot title\n In 0.8.9 was the legend top of the title?\nAnd which is better, top of title, bottom of title, or customizable?\n I think it would be better to have the legend below the title, as it gives more detailed information as the title and should therefore be closer to the drawing area. \n\nBut, of course it is always nice if you can customize something :-)\n  A plot I previously created in ggplot2-0.8.9 no longer dodges the error bars despite properly dodging geom_line and geom_point. Here's the command I used. I'm running R 2.14.1 on Mac OS X 10.7. Downgrading to 0.8.9 fixed this problem. The result is a plot where the points and lines are dodged, but the error bars are are overlaid.\n\nlimits <- aes(ymax=mean + std.error, ymin=mean - std.error, linetype=NULL)\nbase_size=11\n\npos <- position_dodge(width=0.2)\n\nTotalplot <- ggplot(allTotal, aes(x=time, y=mean, linetype=group)) + theme_bw(base_size=base_size) +\n    geom_line(position=pos, size=1.1) + \n    geom_errorbar(limits, width=0.2, position=pos) + \n    geom_point(position=pos, size=2.5) +\n    facet_wrap(~Disorder) +\n    ylab(paste(\"Mean number of total PD symptoms\")) + xlab(\"Time since enrollment (years)\") +\n    opts(legend.key.size=unit(2, \"lines\"), axis.ticks.margin = unit(0.25, \"lines\"), plot.margin = unit(c(1, 1, 0.5, 0.5), \"lines\")) +\n    opts(panel.margin = unit(0.7, \"lines\")) +\n    scale_x_continuous(breaks=c(0,1,2,3)) +\n    scale_linetype(\"Latent\\ntrajectory\") +\n    opts(axis.title.x = theme_text(size = base_size, vjust = 0.0)) +\n    opts(axis.title.y = theme_text(size = base_size, hjust = 0.5, vjust=0.3, angle=90)) +\n    opts(legend.title = theme_text(size = base_size \\* 0.8, hjust = 0))\n Thanks for the follow-up. I should have included a reproducible example... When I tried to create a simple one extending the example you provided, I couldn't get the problem to show-up. But here is a dput of the actual data (which is pretty simple), along with a pared down version of the ggplot call that creates the failure to dodge error bars.\n\nMy sense is that it has to do with faceting and the order of the data. Apparently this issue is more complicated than I realized, though. On 0.9.0, the code below does not dodge the error bars. But under 0.8.9, it actually dodges the error bars incorrectly for the right-hand panel. If I sort the data by the faceting factor, then linetype factor, the dodging is correct.\n\nlibrary(ggplot2)\nlibrary(grid)\ndf <- structure(list(mean = c(18.5229357798165, 14.8888888888889, 0.363636363636364, \n10.4495412844037, 0.555555555555556, 0.454545454545455, 9.91743119266055, \n0, 3.54545454545455, 1.31506849315068, 12, 4.1, 1.12328767123288, \n8.1578947368421, 0, 2.78082191780822, 6.97368421052632, 0), std.error = c(1.46441516614787, \n3.80585967965643, 0.152120004824377, 1.07669583017945, 0.293972367896066, \n0.281671516087812, 1.05135936473872, 0, 1.23850082661283, 0.150944152292836, \n0.920757928874163, 0.504424865014052, 0.171111067785861, 1.31493571163454, \n0, 0.345798094888679, 1.31491436048081, 0), group = structure(c(1L, \n3L, 2L, 1L, 3L, 2L, 1L, 3L, 2L, 1L, 2L, 3L, 1L, 2L, 3L, 1L, 2L, \n3L), .Label = c(\"1\", \"2\", \"3\"), class = \"factor\"), Disorder = structure(c(2L, \n2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, \n1L), .Label = c(\"NPD\", \"PPD\"), class = \"factor\"), time = c(0, \n0, 0, 0.97, 0.97, 0.97, 2.77, 2.77, 2.77, 0, 0, 0, 0.97, 0.97, \n0.97, 2.77, 2.77, 2.77)), .Names = c(\"mean\", \"std.error\", \"group\", \n\"Disorder\", \"time\"), class = \"data.frame\", row.names = c(NA, \n18L))\n\n#if this command is not run in 0.8.9, the error bar dodging below is out of order in the right panel\n#in 0.9.0, ordering has no effect (error bars are not dodged at all)\n#df <- df[order(df$Disorder, df$group),]\n\nlimits <- aes(ymax=mean + std.error, ymin=mean - std.error, linetype=NULL)\npos <- position_dodge(width=0.2)\nbadplot <- ggplot(df, aes(x=time, y=mean, linetype=group)) + \n    geom_line(position=pos, size=1.1) + \n    geom_errorbar(limits, width=0.2, position=pos, show_guide=FALSE) + \n    geom_point(position=pos, size=2.0) +\n    facet_wrap(~Disorder)  \nprint(badplot)\n It seems that the faceting variable is not being picked up as a grouping variable for the error bars where it is for the others. By explicitly setting the group to include it, you get consistent positioning (Using values defined in the previous comment):\n\n``` r\nggplot(df, aes(x=time, y=mean, linetype=group, group=interaction(Disorder,group))) +\ngeom_line(position=pos, size=1.1) +\ngeom_errorbar(limits, width=0.2, position=pos, show_guide=FALSE) +\ngeom_point(position=pos, size=2.0) +\nfacet_wrap(~Disorder)\n```\n\nI haven't looked further, but hopefully this can help the next person.\n Sorry for misdiagnosing the problem. I didn't notice the `linetype=NULL` in `limits`.\n Thanks, Winston, and Brian for the suggestions. I see what you mean that unsetting linetype for the error bars should turn off the dodge positioning, so the undodged plot is quite sensible. Setting group and unsetting linetype in the mapping for the error bars works perfectly. I'll stick with this approach in the future.\n  ```\nqplot(runif(10), runif(10)) + scale_x_continuous(breaks=NULL)\nqplot(runif(10), runif(10)) + scale_x_continuous(breaks=NULL) + coord_map()\n```\n\n**Error in unit(x, default.units) : 'x' and 'units' must have length > 0**\n Actually `breaks = something` fails when `something` is outside of the data range and coord_map() is used\n\n```\nqplot(runif(10), runif(10))\nqplot(runif(10), runif(10)) + scale_x_continuous(breaks=0.5)\nqplot(runif(10), runif(10)) + coord_map()\nqplot(runif(10), runif(10)) + scale_x_continuous(breaks=0.5) + coord_map()\n\nqplot(runif(10), runif(10)) + scale_x_continuous(breaks=10)\nqplot(runif(10), runif(10)) + scale_x_continuous(breaks=10) + coord_map()\n```\n Just a note, here is a workaround:\n\n```\nggplot(dat, aes(x,y)) + geom_point() +\n  scale_y_continuous(breaks=seq(0,10,.5), limits = c(0, 10)) +\n  coord_cartesian(ylim=c(0,10))\n```\n\nSo this is a general problem in calculating the ranges for breaks of position guide.\nNow, the range is based on the data range. So if coord is wider than data, you need to tell the scales the range of coord.\nThis can be fixed.\n@jiho, could you please change the title of issue to easily recall the problem by the title?\n Done. Do you like the title?\n @jiho thanks.\n   One may want to group objects by soem time increment when using scale_z_date/datetime for either z=x or z=y axes.  Syntax such as the following would allow one to both indicate you want to group by time and by what time interval you want the grouping to occur.\n\nqplot( time , y , data = d , geom = \"boxplot\" , fill = z , group = time ) + scale_x_date( group = \"1 day\" )\n\nThe above would say that in data set d, you want boxplots for each day and those boxplots should be split by the levels of variable z.\n\nThis would be a nice enhancement.\n Could you please provide a complete example data (and a rough picture of the plot you want, if possible)?\n  Consider the following example:\n\n``` R\ntest.df <- data.frame( a = rnorm(100), b = rnorm(100), c = sample( c('1','2','3'), 100, replace = TRUE ) )\nggplot( test.df ) + geom_text( aes( x = a, y = b, label = c, color = c ) ) + scale_color_manual(\n        values = c( \"1\" = 'red', \"2\" = 'green', \"3\" ='blue', \"4\" = 'orange' ),\n        labels = c(  \"4\" = '4', \"2\" = '2', \"1\" = '1',  \"3\" = '3' ) )\n```\n\nIt's expected that in the legend you would see 1(red), 2(green), 3(blue).\nInstead, labels are assigned to the colors by their order in which they are listed in labels: 4(red) 2(green) 1(blue)\n\nWhat is worse, in this example:\n\n``` R\ntest.df <- data.frame( a = rnorm(100), b = rnorm(100), c = sample( c('1','2','4'), 100, replace = TRUE ) )\nggplot( test.df ) + geom_text( aes( x = a, y = b, label = c, color = c ) ) + scale_color_manual(\n        values = c( \"1\" = 'red', \"2\" = 'green', \"3\" ='blue', \"4\" = 'orange' ),\n        labels = c(  \"1\" = '1', \"2\" = '2', \"3\" = '3',  \"4\" = '4' ) )\n```\n\nthe order of the values and the labels is perfectly matched, but since value 3 is missing in the data, instead of\n1(red), 2(green), 4(orange) we have 1(red), 2(green), 3(orange).\n\nggplot2 0.9, R2.14.1\n 1. In my usecases it's fine to hide those labels that never appear in the data (like it is now), but it would be cool to have them shown as an option. :)\n2. Yes, the matching of the colors in the plot itself is ok.\n3. I'm not sure anymore and have no system to test, but I think in 0.8.x series the legend was working correctly.\n  I think the best solution is to split `geom_hline` into `geom_hline` for when you want to map the position of the line to a variable in your data and `annotate_hline` for when you have a vector of positions.\n Yes, but I think it needs some re-writing of the `geom_hline` code because it tries to automatically figure out if you want a annotation or a data-based geom.\n  Now the name of aes is `family` and it is bind to `fontfamily` of `gpar` (like `colour` in aes and `col` in gpar).\nThis is because `theme_text` uses `family`.\n  `library(ggplot2)`\n`g <-ggplot(data=data.frame(a=1:2))`\n\nyields the error \n\n> Error in initFields(scales = scales) : \n>   could not find function \"initRefFields\"\n> Calls: ggplot ... initialize -> initialize -> <Anonymous> -> initFields\n\non R/OS version: \n\n> platform       x86_64-apple-darwin9.8.0  \n> arch           x86_64  \n> os             darwin9.8.0  \n> system         x86_64, darwin9.8.0  \n> status  \n> major          2  \n> minor          14.0  \n> year           2011  \n> month          10  \n> day            31  \n> svn rev        57496  \n> language       R  \n> version.string R version 2.14.0 (2011-10-31)\n Using ggplot2 0.9 downloaded from CRAN this morning\n\n> Package:            ggplot2\n> Type:               Package\n> Title:              An implementation of the Grammar of Graphics\n> Version:            0.9.0\n> Author:             Hadley Wickham h.wickham@gmail.com\n> Maintainer:         Hadley Wickham h.wickham@gmail.com\n> Description:        An implementation of the grammar of graphics in R. It combines the advantages of both base and lattice graphics:\n>                     conditioning and shared axes are handled automatically, and you can still build up a plot step by step from multiple data\n>                     sources. It also implements a sophisticated multidimensional conditioning system and a consistent interface to map data to\n>                     aesthetic attributes. See the ggplot2 website for more information, documentation and examples.\n> Depends:            R (>= 2.14), stats, methods\n> Imports:            plyr (>= 1.0), digest, grid, reshape2, scales, memoise, proto, MASS\n> Suggests:           quantreg, Hmisc, mapproj, maps, hexbin, gpclib, maptools, multcomp, nlme\n> Extends:            sp\n> License:            GPL-2\n> URL:                http://had.co.nz/ggplot2/\n `ggplot2` 0.9 seems to actually require R 2.14.1; it does not run in 2.14.0.\n Upgrade to 2.14.2 fixes this issue.\n\nIt seems the description file should read\n\n> Depends: R(>=2.14.1)\n\n(Unless specifying the minor version to subdecimal is bad form.)\n Found that updating ggplot2 to 0.9 and R to v.14.2 still does not work. Any hint? there goes session info: \n\n> sessionInfo()\n> R version 2.14.2 (2012-02-29)\n> Platform: x86_64-pc-mingw32/x64 (64-bit)\n> attached base packages:\n> [1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] plyr_1.7.1    ggplot2_0.9.0\n\nloaded via a namespace (and not attached):\n[1] colorspace_1.1-1   dichromat_1.2-4    digest_0.5.2       grid_2.14.0            MASS_7.3-16  \n[6] memoise_0.1        munsell_0.3        proto_0.3-9.2      RColorBrewer_1.0-5    reshape2_1.2.1  \n[11] scales_0.2.0       stringr_0.6        tools_2.14.0 \n Something didn't seem to work with your upgrade; the base packages are still at 2.14.0 (see, for example, the attached tools package). When you upgrade, you should get a newer version of all the base packages as well. I'm not sure what would cause the mismatch. A standard install of R 2.14.2 should just work.\n  This happens when x/theta is continuous:\n\n``` R\nset.seed(123)\ndat <- data.frame(x=1:12, y=1:12)\n\np <- ggplot(dat, aes(x=x, y=y)) + geom_line()\n\np + coord_polar()\n```\n Probably this will be fixed by rewriting of grid and positional guides.\n  When you set the y limits, it throws an error when high data is clipped. The error doesn't happen when low data is clipped, though.\n\n``` R\ndat <- data.frame(x=rep(1:5),\n                  y=c(1,2,10,3,4))\n\np <- ggplot(dat, aes(x=x, y=y)) + geom_line()\n\n# OK: polar + automatic range\np + coord_polar()\n\n# OK: polar + manual range that includes all data\np + coord_polar() + ylim(0,11)\n\n# bad: polar + manual range that clips high data\np + coord_polar() + ylim(0,9)\n#Error in data$y[data$y == -Inf] <- range$y.range[1] : \n#  replacement has length zero\n\n# OK: polar + manual range that clips low data\np + coord_polar() + ylim(3,11)\n\n# OK: not polar + manual range that clips high data\np + ylim(0,9)\n\n# OK: not polar + manual range that clips low data\np + ylim(3,11)\n```\n\nIt's OK when using geom_point instead of geom_line:\n\n``` R\nggplot(dat, aes(x=x, y=y)) + geom_point() + coord_polar() + ylim(0,9)\n\n```\n This is because:\n\n```\n> x <- c(1, NA, 2)\n> x[x == Inf]\n[1] NA\n```\n\ntest for infinity in `coord_munch` is incorrect, which is easy to be fixed.\n  I was taking a look at #257, and experimenting with `coord_trans(y=\"log10\")` instead of using `scale_y_log10()`. But it doesn't seem to work with some geoms and some transform functions.\n\n``` R\ndat <- data.frame(group=rep(LETTERS[1:4], each=3),\n                  x=rep(1:3,4),\n                  y=rep(10^(1:3),4))\n\np <- ggplot(dat, aes(x=x, y=y, fill=group))\n\n\n# OK: area + sqrt\np + geom_area() + coord_trans(y=\"sqrt\")\n\n# error: area + log10\np + geom_area() + coord_trans(y=\"log10\")\n\n# error: bar + sqrt\np + geom_bar() + coord_trans(y=\"sqrt\")\n\n# error: bar + log10\np + geom_bar() + coord_trans(y=\"log10\")\n\n# OK: point + sqrt\np + geom_point() + coord_trans(y=\"sqrt\") \n\n# OK: point + log10\np + geom_point() + coord_trans(y=\"log10\") \n```\n Oh, right. And it looks like the geom_bar cases don't work because of the continuous x axis. I guess everything works as expected, then.\n  I wanted to put this issue in the tracker before it's forgotten, even though the problem isn't entirely clear to me.\n\nSee this thread, in particular the 5th message: http://groups.google.com/group/ggplot2/browse_thread/thread/6fca486d4e0f20bc\n Actually it simply calculates the distance between two point.\nMaybe we need consider the curvature etc.\nI think there should be a known good algorithm for this.\n  On the mailing list I said I wasn't sure whether this should be in ggplot2 or not. But now that it's an annotation and not a geom, it seems to make more sense.\n Excellent!!\n\nMaybe the logticks (more generally, internal ticks) can be merged into the new positional guide system.\nBut it will take quite a long time, so I agree that the logticks annotation is merged into master.\n That would be cool -- do you have anything written about where the positional guide system is going? I don't have a very clear idea of what it will do.\n\nIf you want to try it out (This requires a recent version of devtools because apparently previous versions always used the master branch):\n\n``` R\ninstall_github('ggplot2', 'wch', 'feature/logticks')\n```\n\nThe help file has many examples.\n @wch Thanks. Now the branch is on my local repository and I can play with it.\n\n> That would be cool -- do you have anything written about where the positional guide system is going?\n\nNot yet. I will upload it on a github soon, in a few days, i hope.\nIt will be a variant of guide_axis, or guide_axis may have an option which inside or outside the ticks are drawn.\n  ```\nlibrary(ggplot2)\nd <- expand.grid(x=1:10, y=1:10)\nd$z <- runif(100)\nggplot(d) + geom_tile(aes(x=x, y=y, fill=z))\nggsave(\"test_tile.pdf\")\nggplot(d) + geom_raster(aes(x=x, y=y, fill=z))\nggsave(\"test_raster.pdf\")\nggsave(\"test_raster.png\")\nsystem(\"open test_*.p*\")\n```\n\nCopy-pasting from a quartz device on OS X gives even stranger results: http://dl.dropbox.com/u/1047321/ggplot2-bugs/test_raster-copy_paster.pdf\n Actually the wrong rendering of `test_raster.pdf` is caused by Apple's Preview app. Google Chrome renders the PDF correctly. See the rendering by Chrome: http://dl.dropbox.com/u/1047321/ggplot2-bugs/Screen%20Shot%202012-02-29%20at%2005.10.50%20.png , and by Apple Preview: http://dl.dropbox.com/u/1047321/ggplot2-bugs/Screen%20Shot%202012-02-29%20at%2005.11.06%20.png\n I've noticed that Apple Preview does this when I have PDF documents with a small bitmap (say 32x32 pixels) that is displayed large (say 4x4 inches). It does some sort of interpolation when it scales it up, probably to avoid jagged aliasing artifacts. In those cases, what I really wanted was the non-interpolated version.\n\nI wonder if it's part of the PDF specification to be able to specify how to handle bitmap scaling.\n Example here: http://dl.dropbox.com/u/84377/PDFimagescaling/test.pdf\n\nFor me, it's blurry in Mac Preview, sharp in Chrome, Adobe Reader, and evince (in Linux).\n\nLatex source file:\n\n``` latex\n\\documentclass{article}\n\\usepackage{graphicx}\n\\begin{document}\n16x16 pixel PNG image, scaled to 10x10 cm.\n\n\\includegraphics[width=10cm]{grid.png}\n\\end{document}\n```\n\nAnd the PNG image file: http://dl.dropbox.com/u/84377/PDFimagescaling/grid.png\n I recently had to revert to using `rectGrob()` instead of `rasterGrob()` at the last minute of submitting a manuscript, because none of my coworkers could see the graphic not blurry (even though it had interpolate=FALSE). I came to the conclusion that the unfortunate current situation is that most pdf viewers do not render correctly raster graphics. Some of them have the option to perform interpolation or not.\n  e.g., \n\n```\nqplot(c(0.1, 1:5), 1:6)\n```\n\nThis code will not show breaks at x = 0, but maybe it should show it unless the `limits` is set explicitly.\n\nIn the case of fill/colour legend, I changed to remove out-of-range value since the color/fill of oob value cannot be defined.\nBut we can assume the continuity the positional scale, so oob value can be defined.\nAlso, colour_gradient etc may have nicer breaks,\nOR, limits should be pretty.\n\nMaybe pretty limit will be preferable.\nSo, scales have two limits, limits of data and limits of the scale.\nIn the case of color/fill gradient or size, the limit of mapping is the limits of scale instead of the limits of data.\n ```\n> sc <- scale_x_continuous()\n> scale_train(sc, c(0.1, 1:3))\n> scale_limits(sc)\n[1] 0.1 3.0\n> scale_breaks(sc)\n[1] 0.0 0.5 1.0 1.5 2.0 2.5 3.0\n> \n> scale_pretty_limits <- function(sc) range(pretty(scale_limits(sc)))\n> scale_pretty_limits(sc)\n[1] 0 3\n> \n> scale_breaks(sc)\n[1] 0.0 0.5 1.0 1.5 2.0 2.5 3.0\n> scale_break_positions(sc)\n[1]  NA 0.5 1.0 1.5 2.0 2.5 3.0\n\n> # but should be like this?\n> # scale_breaks_positions(sc)\n> # [1] 0.0 0.5 1.0 1.5 2.0 2.5 3.0\n```\n Of course, you can set the limits by:\n\n```\nqplot(c(0.1, 1:5), 1:6) + scale_x_continuous(limits = c(0, 5))\n```\n\nBut I like this is default behavior. What do you think?\n good idea! So we need thin wrappers for `labeling` family., eg.\n\n```\nrpretty <- function(...) function(range, ...) labeling::rpretty(range[1], range[2], ...)\n```\n  Right now both are hard coded to <code>interpolate=FALSE</code>.  Can we get that as an argument to <code>geom_raster</code> and <code>annotation_raster</code>?  \n Sure, I have a version of <code>annotation_raster</code> in ggmap (not exported) which does the job until it can get into ggplot2.  Using the file http://dl.dropbox.com/u/24648660/ggmapTemp.jpg, check out the difference -\n\nlibrary(devtools)\ndev_mode()\ninstall_github('ggmap', username = 'dkahle', branch = 'master')\n\nr <- read.jpeg('ggmapTemp.jpg')\ndf <- expand.grid(x = 0:1, y = 0:1)\n\nggplot(aes(x = x, y = y), data = df) + geom_blank() +\n  ggplot2::annotation_raster(r, 0, 1, 0, 1)\n\nggplot(aes(x = x, y = y), data = df) + geom_blank() +\n  ggmap:::annotation_raster(r, 0, 1, 0, 1)  \n  Consider:\n\ndat <- data.frame(a = 1:10,b=1:10,c=c(1:9,NA))\nggplot() +\n    geom_point(aes(x = a,y = b,colour = c),data=dat) +\n    scale_colour_gradient(guide = guide_legend(),low = '#000000',high = '#e3e1e2')\n\nThere is no indication in the legend what NA values look like, and even if there was, the reader would not be able to distinguish it from the color scale. It seems to me that NAs need either a special plotting symbol (perhaps an open point with \"NA\" written inside it), or they should be dropped with a warning.\n Not if the scale includes that color (as in the example). Even in the default gradient, the default NA color is close enough to the scale to cause confusion. The NA color can of course be changed explicitly. \n Actually ggplot2 doesn't know what NA means.\n\nIn my view, ggplot2 would display warning messages but try to draw by using na.default.\nIf users need to set color/symbol for NA, they can do by changes na.default.\nMaybe the legend should have an option such as display.NA. This is easy now.\n\nIn generating legend, handling NA is really annoying. \nJust for note, IIRC now ggplot2 (and scales) uses internally NA for, e.g., out-of-range value.\nIt will induce some problems.\n   > Could you please also provide a non-visual test?\n\nSounds challenging... Ok, I will try :)\n Now I found it is almost impossible.\nI tried to use the return value of `ggplot_buide`, but the return value is OK.\nThe bug is in the conversion from the data to geom.\nHow can I manage this type of bug in a non-visual test?\n\nShould I use `grid.get`?\n > I think in the next version (1.0) it will be easier to do these tests.\n\nSounds nice !!\n  Given this continuous data\n\n```\nlibrary(\"ggplot2\")\nset.seed(123)\nd <- data.frame(x=runif(10), y=runif(10))\nggplot(d) + geom_point(aes(x=x, y=y))\n```\n\nI would expect these\n\n```\nggplot(d) + geom_point(aes(x=x, y=y)) + scale_x_discrete(breaks=c(0,0.5,1))\nggplot(d) + geom_point(aes(x=x, y=y)) + scale_x_date()\n```\n\nto throw an error. Instead they do unexpected stuffL\n- `scale_x_discrete` produces a axis with breaks at 0 and 1 only and leaves a lot of blank space on the right of 1\n- `scale_x_date` produces a scale which depends on the current time\n For info, I was just following the conversation and you advice there: http://groups.google.com/group/ggplot2/msg/0cc68781574b0297. I'm not sure how fixable these things are ;)\n  ``` r\n\n## setting numeric values for minor_breaks works:\n\nqplot(10^(1:6), 10^(1:6)) + scale_x_log10(breaks = 10^(1:6),\n  minor_breaks = log(c(sapply(10^(1:6), function(x) seq(0, x, x/10))), 10))) \n\n## but a function is ignored:\n\nqplot(10^(1:6), 10^(1:6)) + scale_x_log10(breaks = trans_breaks(\"log10\", function(x) 10^x, n=6) ,\n   minor_breaks = trans_breaks(\"log10\", function(x) 10^x, n=60) )\n\n\n```\n\nthe minor breaks disappear entirely.\n Actually that is not ignored, but simply out of range.\n\n```\nqplot(10^(1:6), 10^(1:6)) + scale_x_log10(breaks = trans_breaks(\"log10\", function(x) 10^x, n=6) ,\n   minor_breaks = trans_breaks(\"log10\", function(x) log(10^x, 10), n=60) )\n```\n\nwill work.\n\nThe breaks internally transform the data, while the minor breaks do not.\nI know it's confusing.\n oh, I see, thanks. I think it would be much less confusing to have the same behavior as major breaks. Also, the example you submitted \n\n```\nqplot(10^(1:6), 10^(1:6)) + scale_x_log10(breaks = 10^(1:6),\nminor_breaks = log(c(sapply(10^(1:6), function(x) seq(0, x, x/10))), 10))\n```\n\nwould be quite useful in the documentation for scale_x_log10.\n > We probably need a little documentation for scale_breaks_minor describing exactly what it does.\n\nWho is going to?\n > We also need someway to easily control the number of minor breaks between major breaks.\n\nggplot2 may have its own `number + unit` representation (at least internally).\n\ne.g.,\n\n```\nminor_breaks = c(0, 1, 2) # raw numeric\nminor_breaks = ggunit(1, \"count\") # number of minor breaks between major breaks\nminor_breaks = ggunit(-1, \"level\") # in the case of date/datetime, if major breaks = month, minor = week.\n```\n\nI imagine this function would be useful in many places.\n of course `ggunit` is a simple function like this:\n\n```\nggunit <- function(value, unit = \"I\", ...) \n  structure(value, class = \"ggunit\", unit = unit, ...)\n```\n `ggunit` is available also for data space identifier. like:\n\n```\nbreaks = ggunit(c(1:10), \"transformed\")\nbreaks = ggunit(c(1:10), \"original\")\n```\n\nthe name `ggunit` should be reconsidered, though.\n  Commit f175bbb1b99f38e583fbbd9d0d71de488d5d448d broke `R CMD check`:\n\n``` R\ndf2 <- data.frame(x = 1:5 , y = 1:25, z = 1:25)\ns <- ggplot(df2, aes(x = x, y = y))\ns + geom_point(aes(shape = z), size = 4) + scale_shape_identity()\n# Error: Continuous value supplied to discrete scale\n```\n Shape is inherently discrete; the fact that you can't use a continuous variable isn't surprising. What ought it do?\n Prior to f175bbb, it produced a chart of all the point shapes from 1-25, by using the `z` value for the shape. I'm not sure if this is \"correct\" or not. But since shapes are identified by numbers, it seems like you'd want to be able do something like this.\n\n**UPDATE: this part about `as.integer()` working is wrong. It doesn't work.**\n\nIt is possible to make it work by using `as.integer(z)`: \n\n``` R\ns + geom_point(aes(shape = as.integer(z)), size = 4) + scale_shape_identity()\n```\n\nIt seems to me there are a few alternatives:\n1. Just fix the example so `R CMD check` will run.\n2. When a numeric vector is passed to a discrete scale, throw an error that conveys information like, \"Did you mean for your (continuous) numeric vector to be a (discrete) integer vector? If so, use as.integer().\" Also, fix the example.\n3. When a numeric vector is passed to a discrete scale, if it's all integer values, go ahead and use it, coercing with `as.integer()`; if it's not all integers, throw an error.\n I put a function in `stat-bindot.r` called `is.wholenumber` that will check whether a number is a whole number, with some tolerance for FP error. (I took the function from the `?integer` page.) It might be a good idea to move it to, say, `utilities.r` and make use of it here.\n Hm, I was actually wrong -- wrapping it with `as.integer()` doesn't actually make a difference. I think I had actually switched to a different version of ggplot2 when I was doing that test.\n\nAt any rate, after playing with this some more, I think there are two challenges:\n- issues with the legend. When the code worked (as in 0.9.0) it generated the image with a table of points, but there was no legend. Even if there were a legend, it would just be labeled 1, 2, 3, etc -- not very meaningful.\n- In order to make things work, I think things need to be changed in the scales package. Specifically, the `train_discrete` function in `scale-discrete.r` would need to be modified to accept numerics in the way described in option 3 above. This will affect other aesthetics other than shape, so it's important to decide whether this integer-only behavior should be used for all discrete identity scales.\n\nAt any rate, here's a test:\n\n``` R\ntest_that(\"shape identity scale works for numerics\", {\n  ssi <- scale_shape_identity()\n\n  expect_identical(scale_train(ssi, 1:5), 1:5)\n\n  expect_error(scale_train(ssi, c(.5, 1:4)))\n})\n```\n\nIf you don't think that the scales package should be changed, here's a quick fix for the code that's breaking R CMD check:\n\n``` R\ndf2 <- data.frame(x = 1:5 , y = 1:25, z = 1:25)\ns <- ggplot(df2, aes(x = x, y = y))\ns + geom_point(aes(shape = as.character(z)), size = 4) + \n  scale_shape_manual(breaks = as.character(df2$z), values = df2$z, guide = FALSE)\n```\n  Some previous releases are \"marked\" by having branches -- essentially branches off of master that didn't go anywhere. I think it would be good to mark them with tags instead (or in addition to) the branches. This fits better with the concepts of tags and branches, and it also makes it easier for others to refer to old releases.\n\n```\n# With the present system, if I want to check out 0.8.9 (branch):\ngit checkout remotes/origin/ggplot-0.8.9\n\n# With tags (like 0.9.0)\ngit checkout ggplot-0.9.0\n```\n\nIt looks like the older releases, like 0.8.3, are tagged. 0.8.5 has both a branch and a tag, while 0.8.6 - 0.8.9 only have branches.\n\n@hadley I think you would have to tag those commits in your local repo and then push.\n Sure. I have a question: the old releases are tagged ggplot2-0.8.x, while the recent release is tagged ggplot-0.9.0. Should they all be ggplot2-xxx, including the recent release?\n Ok, I added annotated tags for 0.8.5 and up, and pushed. I also added a tag for ggplot2-0.9.0 and deleted ggplot-0.9.0. If you can do a `git fetch --tags` and verify that they look right, I'll go ahead and delete the branches.\n OK, I deleted the branches ggplot-0.8.x branches.\n  Unbelievably, this commit passes all exinting tests relevant to scales!\n So now users can explicitly specify for that breaks and labels are absent, by setting them `NULL`\n Cool - will `breaks=NA` still work?\n the behavior for `breaks=NA` is probably undefined. In 0.8.9, `breaks=NA` indicate no breaks, right?\nThen I will make it so for backward compatibility with a warning message.\n Oh... `breaks=NA` is what I have always used for no breaks. Have I been doing it wrong all this time?\n Okey, then I will implement this. \n\nIndeed, `NA` is buggy for some senses. e.g., `length(NA)` is `1` which indicate there is something.\nAnd actually I have no experience to remove breaks so I didn't know how to do this ;-p\n OK, good. I thought maybe I had missed something very basic... :)\n\nI think it would also be a good idea to give a message saying something like this:\n\n```\nbreaks=NA is deprecated. Please use breaks=NULL to remove breaks in the scale.\n```\n Probably I have not roxygenized yet. Could you please do that, since I'm not sure which version of roxygen2 I should use?\n  Apologies if I've missed mention of this elsewhere, but it looks as though certain variable names can cause. \nIn the following code...\n\n``` R\nrequire(ggplot2)\n\neg <- data.frame(x=sort(rnorm(20)),\n                 y=sort(rnorm(20)),\n                 group=rep(c(\"A\",\"B\"), len=20),\n                 GROUP=rep(c(\"A\",\"B\"), len=20))\n\nggplot(eg, aes(x=x, y=y)) + geom_point() + facet_wrap(~ group)\nggplot(eg, aes(x=x, y=y)) + geom_point() + facet_wrap(~ GROUP)\n```\n\n...the first ggplot call produces the error:\n\n``` R\nError in names(out) <- names(x) : \n  'names' attribute [2] must be the same length as the vector [0]\n```\n\nwhile the second works a treat.\n Your powers are strong!\n\n-----Original Message-----\nFrom: hadley wickham [mailto:reply@reply.github.com] \nSent: Thursday, 9 February 2012 2:58 PM\nTo: Lovell, David (CMIS, Acton)\nSubject: Re: [ggplot2] errors caused by certain variable names (#396)\n\nFixed in the development version :)\n\n---\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/hadley/ggplot2/issues/396#issuecomment-3881627\n  maybe the size of padding should be customizable?\n The codes have been updated.\n\nw.r.t the customize, we need to discuss about theme-ing system.\nMaybe CSS-like system, i.e., class-and-style?\n  For stat_summary() I have mapped both colour and fill to the same variable, therefore I would like to have only one legend with the keys that have both fill and color set according to the aesthetics.\n\nUnfortunately, I don't know if there's a standard way in ggplot2 to combine both fill and colour in one guide, but one workaround would be to support named lists in override.aes, i.e.:\noverride.aes = list( colour = c( fair = 'red', unfair = 'blue' ) ),\nwhere names are factor levels.\n Ok, sorry, now I see my problem. :)\nI had a code like this:\n\n```\ntest.df <- data.frame( type = sample( c( \"a\", \"b\", \"c\" ), 10000, replace = TRUE ),\n                       category = sample( c( \"I\", \"II\", \"III\" ), 10000, replace = TRUE ),\n                       value = rnorm( 10000 ), stringsAsFactors = FALSE )\n\nggplot( test.df, aes( x = type, y = value, color = category, fill = category ) ) +\n        geom_boxplot( alpha = 0.6, outlier.colour = NULL ) +\n        scale_color_manual( 'Category', values = c( I = 'blue', II = 'red', III = 'green' ) ) +\n        scale_fill_manual( 'Cat.', values = c( I = 'blue', II = 'red', III = 'red' ) ) +\n       guides( fill = FALSE )\n```\n\nIf the fill guide is not disabled, then separate legends are shown, because the fill and color titles are different.\nAlso, if the scales specify different labels for the factor levels, the legends are separated.\nI think such behavior more than makes sense.\n  Per discussion/request on developer mailing list\nhttp://groups.google.com/group/ggplot2-dev/browse_thread/thread/446615dd5fcf35cf\n  This change will hopefully make it easier for users to discover guide options by ensuring that all of the `guides` manpages link to each other\n @hadley - Fixed. Are there any other functions that belong in the `guides` family for documentation?\n @hadley - I'm using the latest version of roxygen from the master branch on github: https://github.com/klutometis/roxygen/commit/179448a8e1230589cf2919157a2675ff3ab543ed\n\nThere's no `dev` branch of roxygen, so I'm not sure which version you're referring to. Can you please point me to which branch contains the fix?\n See the updated pull request #391\n  This was reported on the mailing list. In 0.9.0, there is no padding between the legend contents and the bounding rectangle. If the rectangle is visible, then each key item overlaps the rectangle and obscures the line. In 0.8.9, there was padding.\n\n```\ndat <- data.frame(x=LETTERS[1:3], y=1)\n\np <- ggplot(dat, aes(x=x, y=y, fill=x)) + geom_bar() +\n    opts(legend.background = theme_rect())\n```\n  Hi, I noticed that this code works in 0.8.x but not 0.9. Basically, I want to specify custom fill colors for geom_rect, but sometimes one of the colors disappears.\n\n<pre>\npro = data.frame(position=c(10,20),logratio=rnorm(2))\nlibrary(ggplot2)\nsc = scale_fill_manual(values=c(\n                      \"1breakpoint\"=\"#ff7d7d\",\n                      \"normal\"=\"#f6f4bf\",\n                      \">0breakpoints\"=\"#a445ee\"\n                      ))\nmakeplot = function(ann){\nggplot()+\n  geom_rect(aes(xmin=min,xmax=max,fill=annotation),\n            ymax=2,ymin=-2,data=ann)+\n  geom_point(aes(position,logratio),pch=1,colour=\"black\",data=pro)\n}\n(p = makeplot(data.frame(min=c(10,13,18),max=c(12,15,20),\n  annotation=c(\">0breakpoints\",\"1breakpoint\",\"normal\")))) #ok\np+sc ##ok\n(p =makeplot(data.frame(min=c(10,13,18),max=c(12,15,20),\n  annotation=c(\"1breakpoint\",\">0breakpoints\",\">0breakpoints\")))) #ok\np+sc ## >0breakpoints color not what I specified in scale_fill_manual!\n</pre>\n Very strange - whether or not the scale works seems to depend on the number and order of items.\n\n``` R\n# A data frame with two levels of 'g'\ndat2 <- data.frame(x=factor(1:3),\n                   y=3,\n                   g=c(\"B\",\"A\",\"A\"))\n\np2 <- ggplot(dat2, aes(x=x,y=y,fill=g)) + geom_bar()\n\n# OK with no scale added\np2\n\n# OK: Scale with three values, order ABC\np2 + scale_fill_manual(values=c(\"A\"=\"red\", \"B\"=\"green\", \"C\"=\"blue\"))\n\n# Not OK: Scale with three values, order BCA\np2 + scale_fill_manual(values=c(\"B\"=\"red\", \"C\"=\"green\", \"A\"=\"blue\"))\n\n# OK: Scale with two values, order AB\np2 + scale_fill_manual(values=c(\"A\"=\"green\", \"B\"=\"red\"))\n\n# OK: Scale with two values, order BA\np2 + scale_fill_manual(values=c(\"B\"=\"red\", \"A\"=\"green\"))\n```\n\nThis may be related to #264.\n\n@tdhock This isn't a solution to the underlying problem, but it should work if you change the order of items in your scale to match the factor level order -- that is, put `\">0breakpoints\"` first in the scale.\n I ran this bisection script: https://gist.github.com/1740215. It says 7bcccb6f12b42ed3ebf0a2600cf90b3af1c1caf7 is the first bad commit, and that's the commit that fixed #264.\n\nThe output of the script can be viewed (without doing all the git bisect stuff) by just running it from the command line.\n\nThe colors of the bars in the graph should be lightblue, blue, blue, going from left to right. In 0.8.9, they're in that order. At some point, they become blue, darkblue, darkblue, indicating that the names for the `values` are not being respected -- that was bug 264. After the fix for 264, the colors are _blank_, blue, blue.\n @wch I'm having similar issues.\n\nI'm starting to develop a working hypothesis. Whatever is causing the problem seems to behave like this:\n- Compute the number of unique fill values (`n`) in the data. In your example above, `n = 2`, since the only unique values for `g` are \"B\" and \"A\". Let's call the collection of unique data values `dataValues`.\n- Read the first `n` items in the `values` argument to `scale_fill_manual()`. We'll call those first `n` items `scaleValues`. In your first \"Not OK\" example above, `scaleValues = c(\"B\"=\"red\", \"C\"=\"green\")`\n- Match any values in `dataValues` with those in `scaleValues`.\n\nNote that in your examples above, the first \"Not OK\" one is where the definition for a data's fill value (`\"A\" = \"blue\"`) is the third element of `values`. My hypothesis is that since there were only 2 unique values of that factor in the data itself, the scale function \"stopped reading in `values`\" after two and never saw the third element \"A\" that should have been matched for blue rectangles.\n\nI wondered if this pattern would extend, so I created [a gist to test my hypothesis](https://gist.github.com/1765194). Every result in my gist is consistent with my hypothesis. For any `n` unique values of a factor in the data, I can get all the fill colors to appear as long as they're listed within the first `n` elements of `values`. I also show (I think) how one can selectively cause certain values not to appear by making sure they're ordered after the `n`th element of `values`.\n\nI really, really want to solve this problem because it's affecting my package too. Please let me know if you think my explanation matches the behavior.\n That sounds like a reasonable explanation. It has something to do with those lines changed in the commit, so it shouldn't be too hard to find and fix.\n OK, I have a fix. It also required modifying the palette functions in the scales package. One drawback to modularization of packages is that it makes it complicated to synchronize and reference fixes.\n\nThe problem was that `scale$palette(n)` can only take a number, when it sometimes needs a vector of names instead.  For example, if the specified colors are: `c(B=\"red\", C=\"blue\", A=\"green\")`, but the data only contains `c(\"B\", \"A\", \"A\")`, then  `scale$palette(n)` returns only the first two palette items, for B and C. This is why A ends up blank.\n\nI modified the palette functions to optionally take a `limits` parameter, which is a vector of names. The limits of the data in this case are `c(\"A\", \"B\")`, and the function returns the appropriate named palette items.\n\nYou can see the commit in scales here: wch/scales@5c740627141988569da29ed2cf419c7a0f7abb4c\n\nTo try it out you can either fetch my branches of scales and ggplot2, or you can install directly. Bear in mind that I changed only two types of palettes; I think the others will also need to be changed. \n\n```\n# To install\ninstall_github('wch', 'scales', 'palette-limits')\ninstall_github('wch', 'ggplot2', 'fix-manual-palette')\n```\n\n@briandk: With these fixes, it passes your new tests in #264.\n  Currently the out of bounds parameter appears to have no effect and perhaps a bug. These all produce the same graph:\n\n```\nlibrary(ggplot2)\nlibrary(scales)\nqplot(rep(100,100)) + scale_y_continuous(limits = c(0,10), oob = squish)\nqplot(rep(100,100)) + scale_y_continuous(limits = c(0,10), oob = censor)\n```\n It may be easier to see the issue with this:\n\n``` R\ndat <- data.frame(x=factor(1:10), y=1:10)\np <- ggplot(dat, aes(x=x, y=y)) + geom_bar() \np + scale_y_continuous(limits = c(3,7), oob = squish)\np + scale_y_continuous(limits = c(3,7), oob = censor)\n```\n\nThe squished bars should be visible at 3 and 7.\n  now aes (e.g., colour, fill, etc) is not dropped during stats calculation.\nIs there any reason why `stat_sum` only use `calculate_groups` but not use `calculate`?\n I decided to take my bisect script for a test drive on this bug. The problem was tracked to a6b74b28d72ea5620869ce3fa26f437345239d65. Note that I don't really know anything about this bug, or the expected behavior -- I just assume that the result from 0.8.9 is correct. (I also don't really know whether I'm running the right tests - I just took an example from the mailing list.)\n\nI suggest trying the script yourself. You can download the script here: https://gist.github.com/1715469.  Save it in your ggplot2 directory and run:\n\n```\nchmod +x stat_sum_test.r\ngit bisect start\n\ngit checkout master\n./stat_sum_test.r\n# Look at the result, and mark as bad -- although you gave an interactive response,\n# it wasn't automatically passed to git bisect. (That only happens with git bisect run)\ngit bisect bad\n\ngit checkout remotes/origin/ggplot-0.8.9\n./stat_sum_test.r\n# Look at the result, and mark as good\ngit bisect good\n\n# Now run automated testing with manual response\ngit bisect run ./stat_sum_test.r\n```\n\nIf you already knew that master was bad and 0.8.9 was good, you could save some steps by doing this instead:\n\n```\ngit bisect start master remotes/origin/ggplot-0.8.9\ngit bisect run ./stat_sum_test.r\n```\n Thanks, @wch!! Great bisect.\nNow I have figured out what is exactly problem.\nI will rewrite the fix with some test codes.\n @kohske glad to be helpful! I'm actually kind of surprised that the script worked so well for the first real problem I tried it on.\n Ok, I will move it in the `calculate_groups` and will write a test case.\n  I believe I have found a bug in 0.9.0, which is not there\nin the current CRAN version. Take this contourplot for example.\n\n<pre>\n## example from help(stat_contour)\nlibrary(reshape2)\nvolcano3d = melt(volcano)\nnames(volcano3d) = c(\"x\", \"y\", \"z\")\nlibrary(ggplot2)\np = ggplot(volcano3d, aes(x, y, z = z))+\n  stat_contour(aes(colour = ..level..))\nprint(p) ## the colors of the contours on the plot are incorrect!\n</pre>\n I don't know how helpful this will be, but a git bisect finds the change to be somewhere between commits a4c85114c33105dd9ca66aec9d5edf679ccfc91a (last good commit) and 6f5295806d2c0cbe076e4b996f42363103dc37fc (first bad commit). Unfortunately, there were many commits in between (about 40) that had to be skipped in the bisect tests because the code wouldn't run at all.\n\nUpdate: Here's the [compare view](https://github.com/hadley/ggplot2/compare/a4c85114c33105dd9ca66aec9d5edf679ccfc91a...6f5295806d2c0cbe076e4b996f42363103dc37fc) of the two commits.\n The git bisect log is here: https://gist.github.com/1712315\n\nTo visualize which commits are good and which are bad, download the raw file, and run `git bisect replay badcontour-bisectlog.txt`. Then you can view with `git bisect visualize` or other git GUI (the changes in question are around May 18).\n  Example:\n\n``` R\nd <- expand.grid(a=1:2, b=3:4, c=c(5:6, 5:6), d=7:8)\nd$value <- rnorm(nrow(d))\nd$x <- 1\nggplot(d, aes(x=x, y=value)) + geom_point() + facet_grid(a + b + c ~ d)\n## throws an error\n## stupid workaround:\nd$bc <- with(d, factor(b):factor(c))\nggplot(d, aes(x=x, y=value)) + geom_point() + facet_grid(a + bc ~ d)\n```\n\nEDIT: \n\nBrianDiggs has a good sugestion below, mine is overcomplicated.\nThere is also the simple workaround of simply doing:\n\n```\nfacet_grid(list(c(\"a\",\"b\",\"c\"), \"d\"))\n```\n\nSuggested solution:\n\nthe problem is the way that `facet_grid` defines the rows and cols simply as \n\n```\n   rows <- as.quoted(facets[[2]])\n```\n\nwhich breaks down for a formula with more than two terms.  \nInstead, I would suggest using a real formula parser to actually find all the terms, i.e. \nuse \n\n```\n    getVars <- function(frm){\n       if(length(as.quoted(frm))==1) {\n           if(as.character(frm)!=\"+\"){\n               return(as.quoted(frm))  \n           } else return(NULL)\n       } else {\n           return(c(getVars(frm[[1]]), getVars(frm[[2]]), as.quoted(frm[[3]])))\n       }    \n    }\n```\n\nand replace lines \n\n```\n    rows <- as.quoted(facets[[2]])\n    cols <- as.quoted(facets[[3]])\n```\n\nin `facet_grid` with\n\n```\n     rows <- getVars(facets[[2]])\n     cols <- getVars(facets[[3]])\n```\n This may be hackish, but splits the difference\n\n```\nfacets_row <- facets\nfacets_row[[3]] <- NULL\nrows <- as.quoted(facets_row)\nfacets_col <- facets\nfacets_col[[2]] <- NULL\ncols <- as.quoted(facets_col)\n```\n\nBasically creates two formulas, one with just the left side and one with just the right, and uses `as.quoted` (specifically `as.quoted.formula`) on each.  Not really tested.\n I'd lean to more hackish because the \"formula\" you create isn't really a formula even though `as.quoted.formula` will handle it fine.\n\nThe setup:\n\n``` r\nfacets <- a + b ~ c + d\n\nfacets_row <- facets\nfacets_row[[3]] <- NULL\nrows <- as.quoted(facets_row)\nfacets_col <- facets\nfacets_col[[2]] <- NULL\ncols <- as.quoted(facets_col)\n\nrows_hw <- as.quoted(structure(facets[[2]], class = \"formula\"))\ncols_hw <- as.quoted(structure(facets[[3]], class = \"formula\"))\n```\n\nComparisons\n\n``` r\n> identical(rows, rows_hw)\n[1] TRUE\n> identical(cols, cols_hw)\n[1] TRUE\n> facets_row\n~a + b\n> facets_col\n~c + d\n> structure(facets[[2]], class = \"formula\")\nError in print(a + b) : object 'a' not found\n> structure(facets[[3]], class = \"formula\")\nError in print(c + d) : object 'd' not found\n```\n\nWhile the two return the same, what is built in your example can not be handled by other functions taking formulas, and is dependent on `as.quoted.formula` being able to handle these not-really-formula objects correctly. This is the sort of fragile assumptions that can easily break later. And be harder to track down.\n > as.quoted(structure(f[[2]], class = \"formula\"))\n> as.quoted(structure(f[[3]], class = \"formula\"))\n\nI think the correct fix will be like this:\n\n``` R\n    # check the length of faces == 3\n    # or, if the length == 2, add \".\" to left hand side.\n\n    rows <- as.quoted(facets[-3])\n    rows <- rows[!sapply(rows, identical, as.name(\".\"))]\n    cols <- as.quoted(facets[-2])\n    cols <- cols[!sapply(cols, identical, as.name(\".\"))]\n```\n\nThis is because `f[[2]]`  cannot be regarded as a valid formula so may be it will induce another bug.\n Oh, I like `facets[-2]`. Saves creating an explicit separate formula and still makes a valid formula object, Also, is is the only one of the 3 that doesn't throw an error if the left hand side of the formula is missing (though it does not give the right answer which may be worse).\n\n``` r\nfacets <-  a + b ~ c + d\n\nrows_bd <- rows_hw <- rows_kt <- NULL\ncols_bd <- cols_hw <- cols_kt <- NULL\n\nfacets_row <- facets\nfacets_row[[3]] <- NULL\nrows_bd <- as.quoted(facets_row)\nfacets_col <- facets\nfacets_col[[2]] <- NULL\ncols_bd <- as.quoted(facets_col)\n\nrows_hw <- as.quoted(structure(facets[[2]], class = \"formula\"))\ncols_hw <- as.quoted(structure(facets[[3]], class = \"formula\"))\n\nrows_kt <- as.quoted(facets[-3])\nrows_kt <- rows_kt[!sapply(rows_kt, identical, as.name(\".\"))]\ncols_kt <- as.quoted(facets[-2])\ncols_kt <- cols_kt[!sapply(cols_kt, identical, as.name(\".\"))]\n\nidentical(rows_bd, rows_hw)\nidentical(cols_bd, cols_hw)\nidentical(rows_hw, rows_kt)\nidentical(cols_hw, cols_kt)\nidentical(rows_bd, rows_kt)\nidentical(cols_bd, cols_kt)\nfacets_row\nfacets_col\nstructure(facets[[2]], class = \"formula\")\nstructure(facets[[3]], class = \"formula\")\nfacets[-3]\nfacets[-2]\n```\n\nFor `facets <- a + b ~ c + d`, all are identical.\nFor `facets <- a ~ c + d`, all are identical.\nFor `facets <- a + b + c ~ d + e + f`, all are identical\nFor `facets <- a ~ d`, all are identical\nFor `facets <- . ~ d`, Kohske's correctly eliminates the `.` (which could be added to the others as a separate step as well); otherwise they agree\nFor `facets <- a ~ .`, Kohske's correctly eliminates the `.` (which could be added to the others as a separate step as well); otherwise they agree\nFor `facets <- ~ d`, mine gives an error (`Error in facets_row[[3]] <- NULL : subscript out of bounds`) when determining rows as does Hadley's (`Error in facets[[3]] : subscript out of bounds`) when determining columns; furthermore, none get the designation right. Hadley's reports the rows as `d`; I report the columns as `~`, and Kohske's makes both mistakes.\n\nIf there isn't a check somewhere that there must be a left-hand side to the formula, all of these solutions will have problems.\n That works.\n  This seems weird to me (`qplot()` can find the object `freq`, but cannot find `m`, so it seems the arguments `x` and `breaks` are evaluated in different environments):\n\n``` r\nlibrary(evaluate)\nf = function() {\n  env = new.env(parent = globalenv())\n  evaluate(\"library(ggplot2)\n           freq <- table(as.integer(runif(1000, 1, 100)))\n           m <- max(freq) + 1\n           qplot(c(freq), breaks=0:m, log='y', xlab='Probe number')\", \n           envir = env)\n}\nstr(f())\n## List of 5\n##  $ :List of 1\n##   ..$ src: chr \"library(ggplot2)\\n\"\n##   ..- attr(*, \"class\")= chr \"source\"\n##  $ :List of 1\n##   ..$ src: chr \"           freq <- table(as.integer(runif(1000, 1, 100)))\\n\"\n##   ..- attr(*, \"class\")= chr \"source\"\n##  $ :List of 1\n##   ..$ src: chr \"           m <- max(freq) + 1\\n\"\n##   ..- attr(*, \"class\")= chr \"source\"\n##  $ :List of 1\n##   ..$ src: chr \"           qplot(c(freq), breaks=0:m, log='y', xlab='Probe number')\"\n##   ..- attr(*, \"class\")= chr \"source\"\n##  $ :List of 2\n##   ..$ message: chr \"object 'm' not found\"\n##   ..$ call   : language eval(expr, envir, enclos)\n##   ..- attr(*, \"class\")= chr [1:3] \"simpleError\" \"error\" \"condition\"\n```\n\nfrom yihui/knitr#111\n But `eval()` does not work either:\n\n``` r\nf = function() {\n  env = new.env(parent = globalenv())\n  eval(parse(text = \"library(ggplot2)\n           freq <- table(as.integer(runif(1000, 1, 100)))\n           m <- max(freq) + 1\n           qplot(c(freq), breaks=0:m, log='y', xlab='Probe number')\"), \n           envir = env)\n}\nf()\n## Error in eval(expr, envir, enclos) : object 'm' not found\n```\n   Wow, fast-forwardable. git is so neat!\n You may already know this, but... If you make a mistake in a commit that you want to revert, you can fix it, commit, and then run `git rebase -i HEAD^` and squash the new commit into the old one. In this case you can still do it (even after adding more commits) by running `git rebase HEAD~4`.\n\nOnce you've rebased it, you need to force a push to github with `git push -f origin mybranch`. If you do this, the github pull request will reflect the new series of commits, instead of the old series. (I know all of this because I'm guilty of rebasing a lot.)\n Thanks. I know the `git push -f origin mybranch` but I don't know how the comments (in particular, line note for source codes) on the old branch are.\nDoes they disappear?\n The line notes stay there, but you can't look at the full file anymore. You can see an example in #369. Hadley made a line note, and then I rebased and pushed. In the first line note (before the rebase), there's no link in the upper right for \"view full changes\" because that commit disappeared after the rebase. In the other notes (after the rebase), the link is still there.\n Thanks again. I got it.\nSo as long as no one pulled the pushed branch, we can remove and re-push without any problem.\n  Please see also https://github.com/hadley/scales/issues/9\n\nAutomatic pretty break is convenient in most cases, but as I mentioned above, at the moment it is somewhat confusion in scales with transformation w.r.t the data space.\n\nUsers may want a pretty breaks on the original data space or on the transformed data space.\nThis choice should be done explicitly.\n\nI would propose one extra option, i.e., users can choose the pretty breaks on the original or transformed data.\nThen, the `continuous_scale` will be:\n\n``` R\ncontinuous_scale(..., breaking = c(\"original\", \"transformed\"))\n```\n\nname should be considered.\n\nIf original, then it has pretty breaks on the original data range.\nIf transformed,  then it has pretty breaks on the transformed data range.\n\nOR, maybe, `breaks` can accept a character specifying the data space.\nI like the former style though.\n\nAlso, major and minor breaks may as well have their own basis.\nThere are many examples of such plot even in the wikipedia:\nhttp://en.wikipedia.org/wiki/Logarithmic_scale\n\nBut the example in the wikipedia is more special...\n OK, I see.\nHere is the example:\n\n``` R\np <- qplot(seq(1, 1e4, len = 10), seq(1, 1e5, len = 10)) + geom_line()\n# on original data space\np + scale_x_log10()\n# on transformed data space\np + scale_x_log10(breaks = trans_breaks(log10_trans()$trans, log10_trans()$inv))\n```\n\nis this what you mean?\n\nMaybe this is somewhat complicated.\nAs the scale_x_log10 already knows the trans/inv, so it should be written like this:\n\n``` R\np + scale_x_log10(breaks = trans_breaks())\n```\n Here is an experimental implementation above.\n\n``` R\np <- qplot(seq(1, 1e4, len = 10), seq(1, 1e5, len = 10)) + geom_line()\np + scale_x_log10()\np + scale_x_log10(breaks = auto_break_trans())\n# identical to\n# p + scale_x_log10(breaks = trans_breaks(log10_trans()$trans, log10_trans()$inv))\n```\n funny, I had completely missed this discussion but ended up asking about the same issue and similar suggestions: http://groups.google.com/group/ggplot2-dev/browse_thread/thread/8133f3f634bff4bb\n  This is an implementation of coord_range. This is the third attempt at resolving the issue raised by #361, and followed out of discussion #364. I decided to start over because it's cleaner this way.\n\nI've done the following:\n- implement coord_range\n- fix coord_map to use `x.range` and `x.proj`, instead of `x.raw` and `x.range`\n- modify abline, hline, and vline to use coord_range\n- add visual tests\n I made the changes. In `geom_vline`, the coordinate transform examples used `last_plot()`, but I got rid of `last_plot()` because it seemed wrong to keep adding more coord transforms on top of previous ones.\n  This bug may be fairly obscure.\n\nIn stat-smooth.r, in `StatSmooth$calculate`, the following block of code decides what smoothing method to use, depending on the size of the data. If one group has <1000 data points and another group has >1000, they will end up being smoothed with two different methods.\n\n``` R\n    # Figure out what type of smoothing to do: loess for small datasets,\n    # gam with a cubic regression basis for large data\n    if (is.character(method) && method == \"auto\") {\n      if (nrow(data) < 1000) {\n        method <- \"loess\"\n      } else {\n        try_require(\"mgcv\")\n        method <- gam\n        formula <- y ~ s(x, bs = \"cs\")\n      }\n    }\n```\n\nHere's an example that illustrates:\n\n``` R\nset.seed(125)\ndat <- data.frame(xvar = runif(1000), yvar = rnorm(1000))\n# Make two copies of the same values, in group A and B\ndat <- rbind(cbind(dat, group='A'), cbind(dat, group='B'))\n# Drop one of the B's, so there are 1000 A's and 999 B's\ndat <- dat[-2000,]\n\n# The smoothing lines should be almost identical since the only difference\n# between A and B is one data point, which you can see near (.5, 0)\nggplot(dat, aes(x=xvar, y=yvar, colour=group)) + geom_point() + geom_smooth()\n# But they're not the same since 1000 is the threshold for loess vs gam smoothing\n```\n\nOne possible way of dealing with this is to move the method-deciding code to `StatSmooth$calculate_groups` and use gam when the _average_ number of data points in each group is >=1000.\n Using max size makes sense.\n\nI think it would also be a good idea to have it print a warning message saying something like \"'method' unspecified, so using loess\", like the warning given by stat_bin when binwidth is unspecified. Until I started digging into this code, I thought that it always used loess. I've actually used it on large data sets and thought it was using loess, when in fact it was using gam.\n Sure, will do in the future.\n  This fixes #365.\n\nI think it now correctly implements the haversine formula: \nhttp://en.wikipedia.org/wiki/Haversine_formula\n\n```\n> dist_central_angle(lat=c(-90,90), lon=c(-45,-45))\n[1] 3.141593\n> dist_central_angle(lat=c(0,0), lon=c(0,180))\n[1] 3.141593\n```\n @hadley Please see the line of code with the comment (I don't know if the comment showed up on this pull request page in a way that makes it easy for you to see.)\n OK, that makes sense. Instead of adding a length check, I just changed it so it indexes into `lat` by using `length(lat)`, instead of `length(lon)`. This shouldn't change functionality, but it will make things less confusing for anyone who looks at the code in the future.\n  This addresses #361. It adds a function to find what a coordinate transforms maps x and y to -- for example, x and y; y and x; or theta and x.\n\nThis makes it possible to have a general method to find the ranges of the x and y, even after transformation.\n- I don't really like the method name I used, `coord_find_varmapping()` but I couldn't think of a better one. I'm open to suggestions.\n- It gets, for example, scale$theta.range by using a string, as in scale[['theta.range']]. I know this isn't the best...\n- I updated abline, hline, and vline to use it. Now these work with coord_flip and coord_polar, with the exception of abline with polar. Actually, it works, but it doesn't wrap around infinitely like it should.\n- I also added visual tests for abline, hline, and vline. No test for abline with coord_polar, for reasons discussed above (and in #361).\n- I haven't yet modified or tested coord_map.\n Finding the range for abline, hline, or vline doesn't work quite right with coord_map, because `x.range` and `y.range` don't refer to quite the same thing as they do in other coord transformations. I think `x.raw` and `y.raw` are what's needed.\n\nThis is what's in the `scales` object with the Italy example in the coord_map help:\n\n```\n$x.raw\n[1] 165.7878 179.1712\n\n$y.raw\n[1] -48.05607 -33.74861\n\n$x.range\n[1] -0.1167924  0.1167924\n\n$y.range\n[1] -1.1128004 -0.6681436\n```\n\nI'm not sure what exactly `x.range` and `y.range` _should_ mean so I'm not sure how to handle this.\n OK, I rebased the changes to use `coord_mapping` instead of `coord_find_varmapping`. (I hope you don't mind all the rebasing - I like having a cleaner commit history.)\n\nI'll look into the range stuff with `coord_map`.\n I'm changed coord-map.r so that x.raw -> x.range and x.range -> x.proj, and I'm now trying to get lines to show up at all with coord_map(). I've come across a section in coord-munch.r that has this code:\n\n```\n  data$x[data$x == -Inf] <- range$x.range[1]\n  data$x[data$x == Inf] <- range$x.range[2]\n  data$y[data$y == -Inf] <- range$y.range[1]\n  data$y[data$y == Inf] <- range$y.range[2]\n```\n\nWill this work properly with the changes to x.range and y.range? I don't know this part well enough to know how to test it.\n In coord-map.r, I modified t x.raw -> x.range and x.range -> x.proj. Here's the current status of the lines with coord_map:\n- geom_vline works.\n- geom_hline doesn't show up. I got it to appear by hacking in a workaround for the dist_central_angle issue, but that's not a real solution. When the distance bug (#365) is fixed, geom_hline should work.\n- geom_abline doesn't work. **Update**: geom_abline _does_ work. I was previously using incorrect values for intercept and slope.\n\nIn short, everything should work when the distance bug is fixed. If you want to test, install my experimental branch (where I've made the present changes and addressed the distance bug) and run through the visual tests.\n\nHere are the examples I've been testing with. They're derived from the coord_map help:\n\n```\nlibrary(maps)\nlibrary(mapproj)\n\nnz <- data.frame(map(\"nz\", plot=FALSE)[c(\"x\",\"y\")])\nnzmap <- qplot(x, y, data=nz, geom=\"path\")\n\nnzmap + geom_hline(yintercept=-45) + coord_map()\nnzmap + geom_vline(xintercept=172) + coord_map()\nnzmap + geom_abline(intercept=130, slope=-1) + coord_map()\n\nnzmap + geom_hline(yintercept=-45) + coord_map(project=\"cylindrical\")\nnzmap + geom_vline(xintercept=172) + coord_map(project=\"cylindrical\")\nnzmap + geom_abline(intercept=130, slope=-1) + coord_map(project=\"cylindrical\")\n\nnzmap + geom_hline(yintercept=-45) + coord_map(project='azequalarea',orientation=c(-36.92,174.6,0))\nnzmap + geom_vline(xintercept=172) + coord_map(project='azequalarea',orientation=c(-36.92,174.6,0))\nnzmap + geom_abline(intercept=130, slope=-1) + coord_map(project='azequalarea',orientation=c(-36.92,174.6,0))\n```\n\nAs I was working on this, I had a major \"duh\" moment when realized that it's New Zealand and not Italy, as I mentioned earlier!\n Abandoning this pull request in favor of #368.\n  Issue: Values are not mapped properly to polygons in geom_map()\n\nExample:\n\n``` R\ncrimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)\ncrimes$testvar <- 1\n# Everything's bigger in Texas!!\ncrimes$testvar[43] <- 20\ncrimes[40:43, ]\n# ...but Ohio lights up.\nggplot(crimes, aes(map_id = state)) + \n     geom_map(aes(fill = testvar), map = states_map) + \n     expand_limits(x = states_map$long, y = states_map$lat)\n```\n  This is based on a post on the mailing list. \n\n`geom_abline` doesn't go all the way across the plotting area. It seems to depend on the y range.\n\n``` R\ndat <- data.frame(x=LETTERS[1:6], y=1:6)\n\n# Almost all the way from bottom to top\nggplot(dat, aes(x=x, y=y)) + geom_bar() +\n  geom_abline(intercept = .8, slope = 0, colour = \"red\") +\n  coord_flip()\n\n# With y=y/6, the line is very short\nggplot(dat, aes(x=x, y=y/6)) + geom_bar() +\n  geom_abline(intercept = .8, slope = 0, colour = \"red\") +\n  coord_flip()\n```\n It looks like this is what's happening: geom_abline uses `scales$x.range` to determine the x limits. In the `scales` object, this always refers to horizontal axis, but when coord_flip is used, `x` refers to the vertical axis in other parts of the code.\n\nI could write code to take care of this case, when `coordinates` is of class flip. Another case would probably required for coord_polar. Any ideas on a more general way to deal with it?\n Well, the case-by-case fix isn't as ugly as I thought it would be. You just have to replace this line in `geom_abline`:\n\n``` R\nxrange <- scales$x.range\n```\n\nwith this:\n\n``` R\nif (inherits(coordinates, \"flip\")) {\n  xrange <- scales$y.range\n} else {\n  xrange <- scales$x.range\n}\n```\n\nDealing with `coord_polar` case is trickier than adding just a conditional like this. The problem with polar coordinates is they wrap around and overlap -- there is in a sense no maximal extent for theta.. In polar coordinates, a sloped line should spiral around and around. But since `scales$theta.range` is reported to be, say, 0-360, the `geom_segment` used to draw the line will always go clockwise, and it will go around the circle at most once. It will also never cross theta=0, so you couldn't draw a line from theta=330 to theta=30. I don't see a simple way to fix this.\n\nAt any rate, should I just make the change for flip?\n For a general solution, I think perhaps `coordinates` should be modified to carry more information about transformations.\n\nThis is what `coordinates` looks like inside of `GeomAbline$draw`:\n\n```\nBrowse[1]> str(coordinates)\nList of 2\n $ limits:List of 2\n  ..$ x: NULL\n  ..$ y: NULL\n $ wise  : logi FALSE\n - attr(*, \"class\")= chr [1:2] \"cartesian\" \"coord\"\n```\n\nThis is what it looks like with `coord_flip`:\n\n```\nBrowse[1]> str(coordinates)\nList of 2\n $ limits:List of 2\n  ..$ x: NULL\n  ..$ y: NULL\n $ wise  : logi FALSE\n - attr(*, \"class\")= chr [1:3] \"flip\" \"cartesian\" \"coord\"\n```\n\nThis is what it looks like with `coord_polar`:\n\n```\nBrowse[1]> str(coordinates)\nList of 5\n $ theta    : chr \"x\"\n $ r        : chr \"y\"\n $ start    : num 0\n $ direction: num 1\n $ expand   : logi FALSE\n - attr(*, \"class\")= chr [1:2] \"polar\" \"coord\"\n```\n\nWith `coord_polar`, it seems to carry information about the mappings to theta and r. If `coordinates` had this information for all cases, I think it would be possible to have a general solution.\n Oh, OK, I suppose if there are coord methods that will give the appropriate information, that would be good too. Basically, what I think is needed is to find out what the incoming `x` get transformed to in the scales: `x`, `y`, or `theta`.\n\nI'm just starting to figure out how the coord stuff works, so let me know if this is on the right or wrong track...\n I think that coord needs to be modified to track what the `x` and `y` in `aes(x=var1, y=var2)` get transformed to. Here are some examples:\n- `coord_cartesian`: x goes to x, and y goes to y.\n- `coord_flip`: x goes to y, and y goes to x\n- `coord_polar`: x goes to theta, and y goes to r\n\nAs far as I can tell, this information isn't recorded in the coord object. `coord_flip`, for example, just swaps x and y in column names. This makes it impossible (I think) to know which range is needed from the scale: `x.range`, `theta.range`, etc.\n Yup, I think that should be sufficient to make abline work with flip, and to make hline and vline work with both flip and polar. I don't know about coord_map, though, since I haven't really played with it.\n  Dot plots are very commonly used in polar coordinates to represent binned orientation angles. E.g. http://www.pigeon.psy.tufts.edu/asc/Phillips/Default_Old_08_21_files/NewPhillipsFig3.JPG\n\ngeom_dotplot() would make creating these graphs very easy in ggplot (I coded those manually before :( ...) except that it currently does not work with polar coords:\n\n```\nd <- data.frame(x=runif(100, 0, 360))\nggplot(d) + geom_dotplot(aes(x=x), binwidth=5, method=\"histodot\", stackdir=\"down\")\nggplot(d) + geom_dotplot(aes(x=x), binwidth=5, method=\"histodot\", stackdir=\"down\") + coord_polar()\n```\n\nThe last one gives\n\n```\nWarning messages:\n1: In max(scales$x.range) :\n  no non-missing arguments to max; returning -Inf\n2: In min(scales$x.range) : no non-missing arguments to min; returning Inf\n```\n\nand the points on the plot are tiny and not stacked.\n if it knew the stacking direction (angle), I imagine the grob could be adapted to work in the general case. Do you mean that ggplot2 cannot provide that information (radial direction) to the grob? (I'm not familiar with coord_polar, whether it is called at a later stage or something)\n Oh I see. So it could only make sense for transformations that don't affect the linearity of the stacking axis (e.g. no log-transformation along that direction, etc.). Is this where \"munching\" comes into play, and a new case would have to be written for this particular type of geom (neither line nor point)?\n I agree that there should be a warning.\n\nThe general problem with geom_dotplot and coordinate transforms is that the dots are stacked visually -- that is, they're stacked in the visual \"space\", and not the data space. This means that the stacking has to be done in the grob, instead of in the geom. Because of this, grob_dotstack would have to modified to work with coord_polar. It would probably require a lot of coding just for that case. \n\nAlso, the algorithm that geom_dotplot is based on is conceptually not well-defined for polar coordinates. For instance:\n- If stacking from zero (at the origin) and going up, you'd only be able to get two stacks of dots, separated by 180 degrees.\n- If stacking from the outer rim and going inward, how should the dots be spaced? If they're spaced so that they touch on the outer rim, then they will overlap when you go inward.\n\n@jiho in the example you linked to, the dots appear to be touching on the second ring of dots (going inward), but I'm not totally sure. Actually, now that I look at it closer, it looks like the dots may have been manually placed on the graph, because the dots aren't all evenly spaced, and the stacks don't always go directly toward the center.\n\nIf someone can describe an algorithm for polar dot plots, that will be helpful for thinking about how to implement it in ggplot2. I suspect it'll be very different from the current geom_dotplot, and implementing it in the same geom might not make sense from a grammar of graphics perspective.\n One more note: because of the technical and conceptual challenges for doing this, it might be better to have a function (maybe in ggextra?) that would make this sort of graph using geom_point.\n  It is possible to do\n\n```\nd <- data.frame(x=runif(10), \n                y=runif(10),\n                a=c(\"foo\", \"bar\", \"foo\", \"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\", \"bar\")\n                )\nggplot() + geom_point(aes(x=d$x, y=d$y))\n```\n\nso one expects to be able to do\n\n```\nggplot() + geom_point(aes(x=d$x, y=d$y)) + facet_wrap(d$a)\n```\n\nwhich is currently impossible because `facet_*` takes a formula as argument and requires the elements of the formula to be fetched from a data set. It would be a nice addition if facetting could take an actual vector of categories as argument (the same way `d*ply` functions can take formulas or actual variables as input to split the data.frame by). Of course this can create hedge cases when the vector specifying the facets is completely different from the data source of the layers. But I guess that, to achieve this:\n\n```\nggplot() + geom_point(aes(x=d$x, y=d$y))\n```\n\nsomewhere, ggplot creates a temporary data set for the point layer. One would just have to add columns with the facetting variables, recycling them as necessary (just as it happens when creating a data.frame).\n OK. I guess forbidding `geom_point(aes(x=d$x))` is hard because you still want to allow getting data from the general environment, not just from the data.frame fed to ggplot, right? I think this is essential indeed, it gives necessary versatility (at the cost of a somewhat un-clean behaviour, admittedly).\n > scalars and functions from outside ggplot2, but not vectors\n\n? I use it with vectors all the time. For example:\n\n```\nd = data.frame(x=runif(10), y=rnorm(10))\nm = lm(y ~ x, data=d)\nggplot(d) + geom_point(aes(x=x, y=y)) + geom_line(aes(x=x, y=m$fitted.values))\n```\n\nWhere `m$fitted.values` is a vector. Is that going away? It is quite handy. Of course I could do\n\n```\nd$fit = m$fitted.values\nggplot(d) + geom_point(aes(x=x, y=y)) + geom_line(aes(x=x, y=fit))\n```\n\nbut this can quickly bloat the initial dataset and become cumbersome when several models are tested.\n PS: actually, at some point I would probably do\n\n```\ndm = fortify(m)\n```\n\nand then plot from there ;)\n  Example:\n\n```\nd <- data.frame(size=c(\"S\", \"M\", \"L\", \"XL\"), value=c(3,6,7,9), stringsAsFactors=FALSE)\nclass(d$size)\nggplot(d) + geom_point(aes(x=size, y=value))\n```\n\nHere the order in the plot is L, M, S, XL: the alphabetical order. I guess ggplot converts `d$size` into a factor even though I forced it to be a character vector.\n\nI think that when categorical data are coded as factors, of course ggplot should use the levels' order.\n\nWhen data is of categorical nature but not explicitely coded as a factor, ggplot should respect the order in the original data because it often has a meaning. It is the expectation of novice users at least and, for those users also, it is often conceptually easier to reorder the original data than to change the order of levels in a factor.\n\nIn practice, when converting the data for the plot, ggplot should do\n\n```\nconverted <- factor(mydata, levels=unique(mydata))\n```\n\nIf you point be towards where the data is initially handled, I might even be able to fix this myself.\n Factors are useful but they serve a specific purpose, which I would summarize as: remember the number and possibly order of levels even on a subset of the data. This is mandatory for many statistical analyses and they are an important aspect of R as a statistical language.\n\nBut R has grown into more than just a \"statistics package\". It is used for all sorts of data-centric tasks, and ggplot in particular can be used to explore any data, not specifically with a statistical point of view (it is used by plenty of physicists in my lab who don't want to hear about stats).\n\nMy argument is that the current behaviour forces people to know and care about factors while one can efficiently use R without them. The existence of default.stringsAsFactors() to avoid having every string automatically converted into a factor comforts me in thinking that factors are not mandatory.\n\nAnother way to look at it is:\n- if you don't care about the order of the categories then either solution is fine\n- if you do care about the order the proposed behaviour allows you to\n  - set it in your data (either sort your dataset before reading it in R, or use sort()/order() in R)\n  - use factors, if you know about them, and set the order of their levels\n  \n  In contrast, the current behaviour forces you to know about factors (and if you don't, appears to be doing something \"magical\" and surprising with your data).\n\nSo I think the proposed behaviour is more versatile and has an easier learning slope than the current one, while maintaining all functionality. The only downside it that ggplot itself won't automatically order strings alphabetically, but you usually get this functionality by letting default.stringsAsFactors() with its default value of TRUE and reading your data/creating a data.frame for plotting in ggplot (i.e. feeding ggplot factors instead of strings).\n\nTo finish up, I would say that I, personally, know and use factors; but even so, I am often bit by strange errors that come from using them. But, mainly, my suggestion comes from trying to teach people new to R/ggplot or non-statisticians and factors are always a difficult step (leading to the inevitable: \"why do I need to care about that when I just want to plot stuff\" ;) ).\n I don't know which is better but in my view I like the current behavior.\n@jiho, what do you think the order of variable should be if each element are duplicated:\n\n```\nd <- data.frame(size=c(\"S\", \"M\", \"L\", \"M\", \"S\"), value=c(3,6,7,9,0), stringsAsFactors=FALSE)\n```\n The order of the first occurrence of each level, i.e. what\n\n```\n unique(c(\"S\", \"M\", \"L\", \"M\", \"S\"))\n```\n\nreturns.\n  Here's a set of modifications for the slowest of the example sets. I couldn't do much with stat_density or geom_bar, but replacing some of the larger data sets by subsets of them or by other data frames in the examples contained herein seemed to improve processing time a fair bit.\n I don't understand what you mean here. Could you elaborate a little, please?\n\n---\n\n From: hadley wickham reply@reply.github.com\nTo: Dennis Murphy djmurphy0420@yahoo.com \nSent: Wednesday, January 18, 2012 6:24 AM\nSubject: Re: [ggplot2] Faster example sets for selected geoms/stats (#356)\n\nAnd could you please not check in the `NAMESPACE` file? Because of a buglet in roxygen it will conflict with my version.\n\n---\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/hadley/ggplot2/pull/356#issuecomment-3546302\n @djmurphy420 In your commit, the `NAMESPACE` file was changed, probably from running `roxygenize`. It sorts the entries differently on different platforms. This can lead to merge conflicts when the file is also changed in another branch.\n\nAnyway, you should be able to revert `NAMESPACE` to the previous version by doing this:\n\n```\ngit checkout HEAD^ NAMESPACE\ngit commit -a \n```\n\nThis will get the version of `NAMESPACE` from the parent of the current commit (that's what `HEAD^` means).\n  This produces a plot with no shape legend:\n\n```\ndat<-data.frame(x=runif(10),y=runif(10),type=sample(1:3,10,replace=TRUE))\nggplot(dat,aes(x,y,shape=type))+geom_point()\n```\n\nThe trouble (of course) is that type isn't a factor.  When we fix that everything works just fine:\n\n```\ndat<-transform(dat,type=factor(type))\nggplot(dat,aes(x,y,shape=type))+geom_point()\n```\n\nI'm not sure if the first block should refuse to produce a plot and print and error, or if it should make a plot and produce a warning.\n  Per Hadley's request on ggplot2-dev:\n\nWhile responding to a question posed by Felipe Carrillo re the use of minor_breaks in a scale_date() call, I replied as follows:\n### DM\n\nThis is what I get with the development versions of ggplot2 and\nscales, both loaded:\n\n> dt + scale_x_date(breaks = date_breaks('1 month'),\n> -                   minor_breaks = date_breaks('1 week'),\n> -                   labels = date_format('%b'))\n>   Error in scale_dimension(scale) :\n>   could not find function \"scale_dimension\"\n\nHadley replied with:\n#### HW:\n\nCould you please file a bug about this?  That sort of error usually\nsuggests a namespace problem, but a quick check verifies that the\nmethods for scale_dimension are exported.\n\nThe traceback:\n\n21: scale_dimension(scale)\n20: NextMethod(\"[\")\n19: `[.Date`(x, x >= range[1] & x <= range[2])\n18: x[x >= range[1] & x <= range[2]]\n17: discard(breaks, scale_dimension(scale))\n16: scale_breaks_minor.continuous(scale)\n15: scale_breaks_minor(scale)\n14: scale_map.date(scale, scale_breaks_minor(scale))\n13: scale_map(scale, scale_breaks_minor(scale))\n12: scale_breaks_minor_positions(scale)\n\nsuggests perhaps that something is going wrong with method dispatch.\n\nKohske followed up with:\n##### KT:\n\ninside scale_breaks_minor.continuous,\n# ok\n\nscale_dimension(scale)\n# error\n\ndiscard(breaks, scale_dimension(scale))\n# ok\n\ndiscard(scale$trans$trans(breaks), scale_dimension(scale))\n# ok\n\ncensor(breaks, scale_dimension(scale))\n\nso maybe this issue is a kind of interaction of NAMESPACE and premise.  [DM: promise??]\n\nHere is a trace log:\n\n> debug(ggplot2:::scale_breaks_minor.continuous)\n> \n> df <- data.frame(date = seq(Sys.Date(), len=100, by=\"1 day\")[sample(100, 50)], price = runif(50))\n> df <- df[order(df$date), ]\n> dt <- qplot(date, price, data=df, geom=\"line\")\n> dt + scale_x_date(breaks = date_breaks(\"month\"), minor_breaks = date_breaks(\"week\"))\n> debugging in: scale_breaks_minor.continuous(scale)\n> debug: {\n>    if (zero_range(as.numeric(limits))) {\n>        return()\n>    }\n>    if (is.null(scale$minor_breaks)) {\n>        b <- b[!is.na(b)]\n>        if (length(b) < 2)\n>            return()\n>        bd <- diff(b)[1]\n>        if (min(limits) < min(b))\n>            b <- c(b[1] - bd, b)\n>        if (max(limits) > max(b))\n>            b <- c(b, b[length(b)] + bd)\n>        breaks <- unique(unlist(mapply(seq, b[-length(b)], b[-1],\n>            length = n + 1, SIMPLIFY = FALSE)))\n>    }\n>    else if (is.function(scale$minor_breaks)) {\n>        breaks <- scale$minor_breaks(scale$trans$inv(limits))\n>    }\n>    else {\n>        breaks <- scale$minor_breaks\n>    }\n>    discard(breaks, scale_dimension(scale))\n> }\n> Browse[2]>\n> debug: if (zero_range(as.numeric(limits))) {\n>    return()\n> }\n> Browse[2]> n\n> debug: NULL\n> Browse[2]> n\n> debug: if (is.null(scale$minor_breaks)) {\n>    b <- b[!is.na(b)]\n>    if (length(b) < 2)\n>        return()\n>    bd <- diff(b)[1]\n>    if (min(limits) < min(b))\n>        b <- c(b[1] - bd, b)\n>    if (max(limits) > max(b))\n>        b <- c(b, b[length(b)] + bd)\n>    breaks <- unique(unlist(mapply(seq, b[-length(b)], b[-1],\n>        length = n + 1, SIMPLIFY = FALSE)))\n> } else if (is.function(scale$minor_breaks)) {\n>    breaks <- scale$minor_breaks(scale$trans$inv(limits))\n> } else {\n>    breaks <- scale$minor_breaks\n> }\n> Browse[2]> n\n> debug: if (is.function(scale$minor_breaks)) {\n>    breaks <- scale$minor_breaks(scale$trans$inv(limits))\n> } else {\n>    breaks <- scale$minor_breaks\n> }\n> Browse[2]> n\n> debug: {\n>    breaks <- scale$minor_breaks(scale$trans$inv(limits))\n> }\n> Browse[2]> n\n> debug: breaks <- scale$minor_breaks(scale$trans$inv(limits))\n> Browse[2]> n\n> debug: discard(breaks, scale_dimension(scale))\n> Browse[2]> scale_dimension(scale)\n> [1] 15344.2 15449.8\n> Browse[2]> discard(breaks, scale_dimension(scale))\n> Error in scale_dimension(scale) :\n>  could not find function \"scale_dimension\"\n> Browse[2]> discard(scale$trans$trans(breaks), scale_dimension(scale))\n>  [1] 15348 15355 15362 15369 15376 15383 15390 15397 15404 15411 15418\n> 15425 15432 15439 15446\n> Browse[2]> censor(breaks, scale_dimension(scale))\n>  [1] 15348 15355 15362 15369 15376 15383 15390 15397 15404 15411 15418\n> 15425 15432 15439 15446\n> Browse[2]>\n> Browse[2]>\n Now I figured out the problem.\n\nin `?NextMethod`\n\n> NextMethod works by creating a special call frame for the next method. If no new arguments are supplied, the arguments will be the same in number, order and name as those to the current method but their values will be promises to evaluate their name in the current method and environment. Any named arguments matched to ... are handled specially: they either replace existing arguments of the same name or are appended to the argument list. They are passed on as the promise that was supplied as an argument to the current environment. (S does this differently!) If they have been evaluated in the current (or a previous environment) they remain evaluated. (This is a complex area, and subject to change: see the draft \u2018R Language Definition\u2019.)\n\nThe definition of `[.Date` is:\n\n``` R\nfunction (x, ..., drop = TRUE) \n{\n    cl <- oldClass(x)\n    class(x) <- NULL\n    val <- NextMethod(\"[\")\n    class(val) <- cl\n    val\n}\n```\n\nThe definition of `discard` is:\n\n``` R\nfunction (x, range = c(0, 1)) \n{\n    x[x >= range[1] & x <= range[2]]\n}\n```\n\nso, if the class of `x` is `Date`\n\n``` R\ndiscard(breaks, scale_dimension(scale))\n```\n\nis dispatched to `[.Date` that calls `NextMethod(\"[\")`.\n\nIn the case of\n\n``` R\ndiscard(scale$trans$trans(breaks), scale_dimension(scale))\n```\n\nthe `scale$trans$trans(breaks)` converts `date` to `numeric` so `[.Date` will not be called.\n Just a note, probably not `force(x)` but `force(range)`.\n  Not sure if this is necessary, but will be useful.\n\n``` R\ndf1 <- data.frame(x = c(1, 1, 2, 2), y = c(1, 2, 1, 2), z = 1:4)\ndf2 <- data.frame(x = 1:3, y = 1, z = 1:3)\ndf3 <- data.frame(y = 1:3, x = 1, z = 1:3)\ndf4 <- data.frame(x = 1:3, y = 1:3, z = 1:3)\n\nf <- function(d) {\n  p <- ggplot(d, aes(x, y, fill = z))\n  print(p + geom_tile(aes(width = 0.1, height = 0.1)) + opts(title = \"tile\") + geom_text(aes(label = z), colour = \"white\"))\n  print(p + geom_raster(aes(width = 0.1, height = 0.1)) + opts(title = \"raster\") + geom_text(aes(label = z), colour = \"white\"))\n}\n\nf(df1)\nf(df2)\nf(df3)\nf(df4)\n```\n I'm not sure... sorry :(\nProbably I meant something like padding, i.e., extra spaces of the raster.\nOr I had misunderstood the `grid.raster`.\n  My fix have introduced another bug.\nIndexing by `drop = TRUE` makes 1xN 2D matrix into 1D vector.\nHere it should be `drop = FALSE`.\n\nexamples:\n\n``` R\ndf1 <- data.frame(x = -3:3, y = -3:3)\ndf2 <- data.frame(x = seq(-2, 2, 0.1), y = 0, z = dnorm(seq(-2, 2, 0.1)))\ndf3 <- rename(df2, c(x = \"y\", y = \"x\"))\n\np <- ggplot(NULL, aes(x, y)) + geom_point(data = df1)\np1 <- p + geom_tile(aes(fill = z), data = df2)\np2 <- p + geom_raster(aes(fill = z), data = df2)\np3 <- p + geom_tile(aes(fill = z), data = df3)\np4 <- p + geom_raster(aes(fill = z), data = df3)\n```\n test code:\n\n``` R\ndf1 <- data.frame(x = c(1, 1, 2, 2), y = c(1, 2, 1, 2), z = 1:4)\ndf2 <- data.frame(x = 1:3, y = 1, z = 1:3)\ndf3 <- data.frame(y = 1:3, x = 1, z = 1:3)\ndf4 <- data.frame(x = 1:3, y = 1:3, z = 1:3)\n\nf <- function(d) {\n  p <- ggplot(d, aes(x, y, fill = z))\n  print(p + geom_tile() + opts(title = \"tile\") + geom_text(aes(label = z), colour = \"white\"))\n  print(p + geom_raster() + opts(title = \"raster\") + geom_text(aes(label = z), colour = \"white\"))\n}\n\nf(df1)\nf(df2)\nf(df3)\nf(df4)\n```\n Finally I rewrote a part of drawing code. Here is a general rule:\n\n1 introducing \"padding\", which is enables to control the size of raster.\n2 by default, padding are calculated by resolution\n3 otherwise, `hpad` and `vpad` can be specified in the unit of data space.\n  Let me know if there are any issues. \n  This fixes #346.\n\nThe first commit adds roxygen info for dotstackGrob, and the second commit adds the resulting changes from `roxygenize()`.\n\nTo be consistent with the other grobs, I also changed the S3 class name from `dotstackgrob` to `dotstackGrob`.\n OK, I started over, put `@S3method` in the appropriate place, and ran roxygenize.\n  I'm sure if I've done all the submit changes to github part correctly. Just let me know if I need fix something.\n Interesting...I'll see what I can do.\n   temporary fix. It will be improved when gtable packages is merged.\n @BrianDiggs Thanks for the comment. I will check.\n Is the `#' @TODO` correct flag? roxygen says\n\n```\nTODO is an unknown key in block plot-render.r:2 \n```\n\nOr could you please roxygenize yourself?\n And I will issue this.\n  Mostly typo fixes. The first example in ggpcp() fails, so it is fixed. A couple of comments re help pages of other geoms that I didn't modify:\n    (i) should one say 'closed path' rather than 'path' in the title of geom_polygon()?\n    (ii) I'm wondering if geom_smooth() always plots a conditional mean. What if you're plotting a quantile function, e.g., the median?\n I was modifying on the basis of the most recent version of the master I pulled from GitHub. Perhaps I should wait a couple of days for the changes to take effect... It is the same as 340, except segregated into its own branch. Re (1), closed and filled sounds good to me. Re (2), I don't know of any others either, but just wanted to point out that geom_smooth() doesn't always plot a conditional mean - just almost always :) If you're content with the current description, I don't have much problem since it is accurate with this one exception.\n\n---\n\n From: hadley wickham reply@reply.github.com\nTo: Dennis Murphy djmurphy0420@yahoo.com \nSent: Monday, January 2, 2012 5:37 AM\nSubject: Re: [ggplot2] Geom docfix (#342)\n\nIs this different to #340? It looks the same to me.\n\nAnswers to questions:\n\n(1) maybe closed and filled?\n\n(2) Off the top of my head, I don't know of any modelling functions that model the median apart from quantreg, which is dealt with in `geom_quantile`\n\n---\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/hadley/ggplot2/pull/342#issuecomment-3329701\n I think so, too. Keeping changes in separate chunks seems to be rather efficient to me, both in terms of organization on my end and your ability to check and respond. Winston suggested that I don't have to have separate branches for everything, which I'm sure is true, but I like the idea of having branches that are self-contained, particularly for documentation. If I were writing code, I might feel a bit differently about it.\n\nDennis\n\n---\n\n From: hadley wickham reply@reply.github.com\nTo: Dennis Murphy djmurphy0420@yahoo.com \nSent: Monday, January 2, 2012 7:24 AM\nSubject: Re: [ggplot2] Geom docfix (#342)\n\nWe need to get you set up with a workflow that works regardless of what I'm doing. I think if you do separate branches you should be ok. I've closed #340 since it was duplicate of this.\n\n---\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/hadley/ggplot2/pull/342#issuecomment-3330503\n @djmurphy420 Oh, I didn't realize that each commit/branch of yours was meant to address a separate problem. If that's the case, it might make sense to have a separate branch for each thing. But then it would make sense for them to each each be branched off of the main branch rather than being a sequence of commits that build on top of another, which is what it looks like now.\n In #415, I took @djmurphy420's commits, rebased the changes on top of master, and fixed conflicts. If that's merged, this pull request can be closed.\n  cleaner custom grob pull request\n  Resending descriptions for ggplot() and qplot() in their own branch.\n HI Hadley:\n\nI'm just glad to finally figure out how this game works. It will make life a lot easier for the documentation projects.\n\nAssuming that my latest install from Github is the current state of the package, I'll make separate branches for the geom, scale and stat help pages and put whatever corrections/amendments in the appropriate branch. When the CRAN version comes out, I can double check against those, commit and push. In the meantime, I can start working on the scales doc and ggplot2 transition doc. \n\nD.\n\n---\n\n From: hadley wickham reply@reply.github.com\nTo: Dennis Murphy djmurphy0420@yahoo.com \nSent: Saturday, December 31, 2011 6:51 AM\nSubject: Re: [ggplot2] Ggqplot (#340)\n\nLooks great - thanks Dennis! Will probably be a few days until I merge it - ggplot2 has been submitted to CRAN and if something goes wrong with that I don't want to get confused about which changes are where.\n\n---\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/hadley/ggplot2/pull/340#issuecomment-3321349\n  This is a test of sorts. I'm using Git Bash now instead of SmartGit and this pull request should be a lot cleaner, I hope. There are six files edited, each with minor typo fixes, and they are all in a separate branch. Let me know how this works out.\n  Indeed, nowhere in the code could I find theme_render(theme, \"plot.background\", ... \n## visual test\n\nqplot(1,1) + opts(plot.background = theme_rect(col=\"red\", fill = \"yellow\"))\n I don't remember ever trying it before, sorry. But wasn't there an example somewhere (book?) with an inset plot that had a black line framing it?\n This works in 0.8.9. And removed in this commit: 56e329cd25705bf06e7cac0f54048dc15fbd7e4d\n Was this fixed for 0.9.0?\n  # Summary\n\nWhen an aesthetic is mapped to a variable in a data.frame which has that variable, but does not have any rows of data, an error is thrown.\n# Reproducible example\n\n``` r\nempty <- data.frame(x=numeric(0), y=numeric(0))\nnotempty <- data.frame(x=1, y=1)\n\nggplot(mtcars, aes(x=mpg, y=wt)) +\n    geom_point() +\n    geom_point(data=empty, mapping=aes(x=x,y=y))\n\nggplot(mtcars, aes(x=mpg, y=wt)) +\n    geom_point() +\n    geom_point(data=notempty, mapping=aes(x=x,y=y))\n\nggplot(mtcars, aes(x=mpg, y=wt)) +\n    geom_point(data=empty, mapping=aes(x=x,y=y))\n\nggplot(mtcars, aes(x=mpg, y=wt)) +\n    geom_point(data=notempty, mapping=aes(x=x,y=y))\n\nggplot()+\n    geom_point(data=empty, mapping=aes(x=x,y=y))\n\nggplot()+\n    geom_point(data=notempty, mapping=aes(x=x,y=y))\n\nggplot(empty, aes(x=x,y=y))+\n    geom_point()\n```\n# Results\n\n``` r\n> empty <- data.frame(x=numeric(0), y=numeric(0))\n> notempty <- data.frame(x=1, y=1)\n> \n> ggplot(mtcars, aes(x=mpg, y=wt)) +\n+     geom_point() +\n+     geom_point(data=empty, mapping=aes(x=x,y=y))\nError in eval(expr, envir, enclos) : object 'x' not found\n> \n> ggplot(mtcars, aes(x=mpg, y=wt)) +\n+     geom_point() +\n+     geom_point(data=notempty, mapping=aes(x=x,y=y))\n> \n> ggplot(mtcars, aes(x=mpg, y=wt)) +\n+     geom_point(data=empty, mapping=aes(x=x,y=y))\nError in eval(expr, envir, enclos) : object 'x' not found\n> \n> ggplot(mtcars, aes(x=mpg, y=wt)) +\n+     geom_point(data=notempty, mapping=aes(x=x,y=y))\n> \n> ggplot()+\n+     geom_point(data=empty, mapping=aes(x=x,y=y))\nError in eval(expr, envir, enclos) : object 'x' not found\n> \n> ggplot()+\n+     geom_point(data=notempty, mapping=aes(x=x,y=y))\n> \n> ggplot(empty, aes(x=x,y=y))+\n+     geom_point()\nError in eval(expr, envir, enclos) : object 'x' not found\n```\n# Expected results\n1. For the first plot, the second `geom_point` should not add anything, and so the plot should be equivalent to `ggplot(mtcars, aes(x=mpg, y=wt))+geom_point()`\n2. The second plot works as expected\n3. The third plot maybe should throw an error, but not that error. `x` is in `empty`, but there is no data to plot.\n4. The fourth works as expected.\n5. The fifth should behave like the third.\n6. The sixth works as expected.\n7. The seventh should also behave like the third.\n# sessionInfo\n\n``` r\n> sessionInfo()\nR version 2.14.0 (2011-10-31)\nPlatform: i386-pc-mingw32/i386 (32-bit)\n\nlocale:\n[1] LC_COLLATE=English_United States.1252 \n[2] LC_CTYPE=English_United States.1252   \n[3] LC_MONETARY=English_United States.1252\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.1252    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_0.9.0 devtools_0.4 \n\nloaded via a namespace (and not attached):\n [1] colorspace_1.1-0   dichromat_1.2-3    digest_0.5.1       grid_2.14.0       \n [5] MASS_7.3-16        memoise_0.1        munsell_0.3        plyr_1.6          \n [9] proto_0.3-9.2      RColorBrewer_1.0-5 RCurl_1.8-0.1      reshape2_1.2      \n[13] scales_0.1.0       stringr_0.6       \n```\n\nThis \"0.9.0\" is commit 16e69f6348.  It is also an error in 0.8.9, although sometimes with different (also non-informative) error messages.\n I don't believe it is a duplicate of #31 because the example there runs and gives a plot, just not as expected.  The problem here is that an error is thrown when plotting saying that the variable can not be found.  They may be related, of course.\n\nAlso, this may be a duplicate of #176, but I wasn't sure because there the `xintercept` part is outside an `aes`.  However running that code gives a similar error (`Error in eval(expr, envir, enclos) : object 'xintercept' not found`) and I seem to recall that `geom_vline` makes a `data.frame` in the background.  So this may be duplicate, or at least broadening, of #176.\n  Added some description and a few examples to qplot() and ggplot() as requested. Let me know what you think and suggestions for improvement if you feel it's necessary.\n\nD.\n  It appears that I've managed to push my repo successfully. Contained are changes to the help files that make it pass check_doc() with no errors. In a few cases, arguments that were in the documentation but not in the list of formal arguments had to be removed to get check_doc to work.\n  Here is an initial implementation. https://github.com/kohske/ggplot2/tree/feature/plot-layout\n\nTwo way of combining:\n1. Size-sensitive combining: arrange plots with panel size adjustment.\n   Currently, using S3 of cbind and rbind.\n2. Simple layout -- like grid.arrange in gridExtra. Not implemented yet.\n\nAny idea and suggestions are welcome.\n latticeExtra defines a c() method for trellis objects; from what I understand however it would not be very suitable for ggplot2. Am I correct in thinking that any such combination of plots should only alter (at most) the plot dimensions, but not deal with removing axes, combining legends, axis labels, titles, etc.? \n\nOne feature that's been requested quite often is a multipage option. I don't know how hard that would be to implement for facetting in general. The grid.arrange() way is quite trivial and will be present in the next version of gridExtra (the basic idea is currently on SO http://stackoverflow.com/a/6687147/471093)\n Here are some features that I think would be useful.\n- Allow combining \"cells\" in the table, so that it's possible to combine graphs A, B, C, and D like this:\n\n```\nAAB\nAAC\nDDD\n```\n- Allow combining graphs with unequal sizes, like this:\n\n```\nAAAB\n```\n\nIt would be nice to be able to specify the sizes as integers, like (3,1), as well as nonintegers, like (1,.33).\n @baptiste @wch @hadley \n\nThanks. \n\nI want to make sure what we need to consider.\nI here call the size sensitive arrange as `table` (new feature), and the simple layout `layout` (inherits the notion of grid.arrange).\n\nThe `layout` is not difficult except for the interface to specify the layout.\nActually, `layout` is no more than a kind of syntax suger for `grid.layout` and `layout.pos.col/row` in `grid`,\nso users can write these function by themselves.\n\nPlease find the visual tests in: https://github.com/kohske/ggplot2/blob/7bf05ba7c25d58d584430e4c7b2f62c6e889f48b/inst/tests/visual-plot-layout.r\nand docs in: https://github.com/kohske/ggplot2/commit/7bf05ba7c25d58d584430e4c7b2f62c6e889f48b#L3R66\n\n`layout` never modify the plots. It only arrange the plots on the layout.\nAlso, it supports nested-cell-like layout, as shown in @wch's comment.\n\nUser can specify dimension (i.e., nrow, ncol, or both).\nhttps://github.com/kohske/ggplot2/blob/7bf05ba7c25d58d584430e4c7b2f62c6e889f48b/inst/tests/visual-plot-layout.r#L9\n\nOr, user can specify the layout itself.\nhttps://github.com/kohske/ggplot2/blob/7bf05ba7c25d58d584430e4c7b2f62c6e889f48b/inst/tests/visual-plot-layout.r#L24\n\nIn addition to layout dimension, users can specify widths/heights of each row/column.\nhttps://github.com/kohske/ggplot2/blob/7bf05ba7c25d58d584430e4c7b2f62c6e889f48b/inst/tests/visual-plot-layout.r#L32\n\nI wonder which is the best interface to set layout.\nHere is the current implementation:\n\n```\nlayout.ggplot(p[[1]], p[[2]], p[[3]], p[[4]], p[[5]], \n  layout = list(row = list(1, 1, 1, 2, 2), col = list(1, 2, 3, 1, 2)))\n```\n\nThis is a wrapper for `layout.pos.col` in `grid`. But obviously this is ugly interface, i think.\n\nDo you have any good idea?\nAnd is there any other features that should be implemented?\n\nAnyway, the importance of `layout` would be less than that of `table`.\n\nI will discuss about `table` later.\nShould I move to ggplot-dev list?\n `table` is more complicated and need to consider bunch of things carefully.\n\nFirst, interface to specify the table layout. This is same issue with `layout`, so it would be better to make the interface consistent between `table` and `layout`\n\nIn addition to the interface, there are two big issue:\n\n1) guides (legends), title, axis, etc. as @baptiste suggested.\n\nIn `table`, the dimension (nrow/ncol) of each col/row must be consistent.\nIf the plots are simple such as `qplot(1:3, 1:3)`, it is easy to combine.\n\nBut sometimes the nrow/ncol are inconsistent.\nFor example, if plot A has left-side legend, and plot B has no legend, the ncol of A is larger than that of B.\nSo A and B cannot be rbinded (cbind is OK).\nSame with title and axis.\nSo, what do you think is the best way to handle them.\n\na) drop guides (legends) and keep other materials.\nAs `guides` can be extracted as a single object, users can combine plots and then put the guides on some place. \nOther materials were kept as is. But a blank cell are added by align-to-larger-plot rule.\nI like this way. \n\nb) Induce an error, and enforce users to appropriate dimension. I also like this way as an initial implementation.\n\nor any other possibility?\n\n2) facet\n`facet` makes `table` much much more complicated.\nMaybe we do not need to support the size-sensitive combining facetted plots.\nSo at least, initial implementation (0.9.1) will not support facet, simply induce an error.\n Here's an idea for how to specify the arrangement for table and layout, in a single unified way. I don't know what the \"normal\" way is to do this is -- this is just what comes to mind. \n\nSuppose you could give it a matrix, like this:\n\n```\nlayout <- matrix(c(1,1,3, 1,1,3, 2,2,2), ncol=3, byrow=TRUE)\n#      [,1] [,2] [,3]\n# [1,]    1    1    3\n# [2,]    1    1    3\n# [3,]    2    2    2\n\nlayout.ggplot(p[[1]], p[[2]], p[[3]], layout=layout) \n```\n\nThis means: use a 3x3 grid, put the first object `p[[1]]` in the upper-left 2x2, put the second object `p[[2]]` in the bottom 1x3, and put the third object `p[[3]]`in the upper-right 2x1. You would have to check that the numbers are all in rectangles.\n\nAnd to specify the relative size of rows and columns, you could add row and column names:\n\n```\nlayout <- matrix(c(1,2, 3,NA), ncol=2, byrow=TRUE, dimnames=list(c(4,1), c(4,1)))\n#   4  1\n# 4 1  2\n# 1 3 NA\n\nlayout.ggplot(p[[1]], p[[2]], p[[3]], layout=layout) \n```\n\nThe NA just means that that cell is empty. The row and column names determine the relative size of the cells. So the upper-left cell is 80% of the width and 80% of the height; the upper-right cell is 20% width, 80% height; and so on. Hopefully you could also use non-integer values.\n\nThis method is also a little syntactically awkward (because using `matrix()` is a little awkward), but there is an advantage: it allows the user to have a nice visual representation of what exactly they are creating.\n another general question is whether one wants to draw directly on the page, or return a grob as an alternative. It could be nice if `layout` played well with other graphical objects (e.g. lattice). \nCertainly compatibility with ggsave is something that would be desirable for the ggplot2 user, and I think multipage as well.\n\ngrid.arrange supports most of these features, only multi-cell spanning isn't implemented as I couldn't find an elegant way of defining the layout.\n @wch \n\nThanks.\nActually that's the way of `layout` in base graphics.\nsee `?layout`\n\nPerhaps, \n\n```\nlayout <- matrix(c(1,2, 3,NA), ncol=2, byrow=TRUE, dimnames=list(c(4,1), c(4,1)))\n```\n\nshould be\n\n```\nlayout <- layout(c(1,2, 3,NA), ncol=2, byrow=TRUE, widths = c(1,4), heights = c(4,1))\n```\n\nThe advantage is of course visual representation and also that some users are familier with this system.\n I pushed a testbed for combining multiple panel.\nI also put visual tests, so any feedback is appreciate.\n\n@baptiste ggarrange now does not support grob-extraction, but will support in future.\nAlso, it may support multi-page options.\n @baptiste I implemented grob-extraction here: https://github.com/kohske/ggplot2/tree/feature/plot-layout\nIs it possible to combine with gridExtra?\nCould you please run the example codes?\n @kohske I just took a quick look at the code. There is a `r` directory and a `R` directory, which doesn't seem right.\n @baptiste oops, fixed. thanks.\n @wch Sorry, I had a mistake about your name. Thanks anyway. I'm happy if you will review the branch.\n @kohske I run the examples; it's great. One thought, have you considered something like a global title, on top of the page (and perhaps one for each side as well, just in case)?\n\nggarrange, from what I can see, could easily work with arbitrary grobs, in which case it would have reproduced the full functionality of grid.arrange (minus the latest addition of multiple pages and ggsave support). That's why I'm not sure what you mean by \"combine with gridExtra\", can you clarify please?\n I have a question, also: as those functions (presumably) become more and more self-contained and independent (moving towards gtable), perhaps it could be good to systemize the naming convention (single \"g\" for \"grid\"? or double \"gg\" for \"grammar of graphics\"). Grid/gridExtra have already defined grid.layout and grid.arrange (I'd be willing to remove the latter when ready), leaving the possibility:\n\ngarrange, glayout, whilst ggtable, however, would remain with ggplot2 (but the name is probably confusing, with the gtable package).\n oh, and another side-remark: I noticed you have an example with inset plot; annotation_custom is probably more flexible for this particular purpose [https://github.com/baptiste/ggplot2/blob/customgrob/R/annotation-custom.r#L29]\n @kohske I tried it out, and I like it! It works very well. A couple of comments:\n\nI like the idea of having insets but the interface seems somewhat awkward. Am I right that it requires using a character matrix like this? It seems kind of inelegant, not that I have a better idea.\n\n```\n> lay <- gglayout(row = list(1, 2, 2, 3, 3:4, 4), col = list(1:3, 1:2, 3, 1, 2:3, 3))\n> lay\n     [,1] [,2] [,3]  \n[1,] \" 1\" \" 1\" \" 1\"  \n[2,] \" 2\" \" 2\" \" 3\"  \n[3,] \" 4\" \" 5\" \" 5\"  \n[4,] \"\"   \" 5\" \" 5 6\"\n\n Widths:   0.3333333 0.3333333 0.3333333 \n Heights:  0.25 0.25 0.25 0.25 \n Respect:  FALSE \n```\n\nIf I wanted to inset a graph and have it set away from the edge, it seems I would have to do something like this:\n\n```\np <- lapply(1:2, function(i) ggplot(mtcars, aes(factor(cyl))) + geom_bar(fill = rainbow(10)[i]) + opts(title = paste(i)))\n\nlay <- gglayout( matrix(\n   c(\"1\", \"1\", \"1\",\n     \"1\", \"1 2\", \"1\",\n     \"1\", \"1\", \"1\"), 3, byrow=TRUE, ),\n   widths = c(3, 2, .5), heights = c(3, 2, .5))\n\nggarrange(plots = p[1:2], layout = lay)\n```\n\nThis seems kind of complicated to me (but again I don't have a better idea right now).\n\nFinally, I would suggest having some code to detect when the numbers aren't laid out in rectangles. In the example below, I think it should give a warning/error, but right now it doesn't:\n\n```\nlay <- gglayout( matrix(\n   c(1, 2,\n     2, 1), 2, byrow=TRUE, ))\n\nggarrange(plots = p[1:2], layout = lay)\n```\n @baptiste @wch thanks you for the comments. Here is point-to-point comments.\n\n---\n\n> ggarrange, from what I can see, could easily work with arbitrary grobs, in which case it would have reproduced the full functionality of grid.arrange (minus the latest addition of multiple pages and ggsave support). That's why I'm not sure what you mean by \"combine with gridExtra\", can you clarify please?\n\n`ggarrange` returns `gtable` object, but `grid.arrange` could not work with `gtable`. But work after `gtable_gTree`. So it will be easy to fix.\n\n``` R\ngg <- ggarrange(qplot(1:3, 1:3), qplot(1:3))\ngrid.arrange(gg, xyplot(1:10~1:10)) # does not work\ngrid.arrange(gtable_gTree(gg), xyplot(1:10~1:10)) # does work\n```\n\n---\n\n>  One thought, have you considered something like a global title, on top of the page (and perhaps one for each side as well, just in case)?\n\n`ggarrange` and `ggtable` will have `main` argument.\n\n---\n\nAs for the naming, `g` means `grid`, `gg` means _a part of ggplot2_. So, `g*` is available outside `ggplot2` while `gg*` only works with ggplot2.\n\nI named `ggtable`, `ggarrange` in correspondence to `ggsave`. Please let me know if do you have better naming.\n\n---\n\n> I noticed you have an example with inset plot; annotation_custom is probably more flexible for this particular purpose [https://github.com/baptiste/ggplot2/blob/customgrob/R/annotation-custom.r#L29]\n\nYes, the inset plot is unplanned feature. After implementation, I found that the inset plot is possible. So probably not well designed.\n\n---\n\n> Am I right that it requires using a character matrix like this?\n\nNo. At the moment, `gglayout` has two way + alpha for setting the layout.\n\n1) layout matrix, which is compatible with `layout` in `graphics` package:\n\n``` R\nm <- matrix(\n  c(1, 1, 1,\n    2, 2, 3,\n    4, 5, 5,\n    6, 5, 5), 4, byrow = T)\nlay <- gglayout(m)\n```\n\n2) the list of row/col spans, which is compatible with `grid.layout` and `layout.pos.row` in `grid` package:\n\n``` R\nlay <- gglayout(row = list(1, 2, 2, 3, 3:4, 4), col = list(1:3, 1:2, 3, 1, 2:3, 1))\n```\n\n3) Plus alpha is a kind of automatic generation of layout matrix by `nrow`, `ncol`, `dim` etc.\n\nThe inset plot is possible only by 2) the list of row/col span.\n\n---\n\n> I would suggest having some code to detect when the numbers aren't laid out in rectangles. In the example below, I think it should give a warning/error\n\nAgreed. I'm looking for the good algorithms for detecting such incorrect layout.\n\n---\n\nNow I'm using `ggarrange` and `ggtable` in my daily work, and found it is so useful.\nFurther commets are welcome.\n\nThanks!!\n On 9 January 2012 15:20, kohske takahashi\nreply@reply.github.com\nwrote:\n\n> @baptiste @wch thanks you for the comments. Here is point-to-point comments.\n> \n> ---\n> \n> > ggarrange, from what I can see, could easily work with arbitrary grobs, in which case it would have reproduced the full functionality of grid.arrange (minus the latest addition of multiple pages and ggsave support). That's why I'm not sure what you mean by \"combine with gridExtra\", can you clarify please?\n> \n> `ggarrange` returns `gtable` object, but `grid.arrange` could not work with `gtable`. But work after `gtable_gTree`. So it will be easy to fix.\n> \n> ``` R\n> gg <- ggarrange(qplot(1:3, 1:3), qplot(1:3))\n> grid.arrange(gg, xyplot(1:10~1:10)) # does not work\n> grid.arrange(gtable_gTree(gg), xyplot(1:10~1:10)) # does work\n> ```\n> \n> ---\n> \n> > \u00a0One thought, have you considered something like a global title, on top of the page (and perhaps one for each side as well, just in case)?\n> \n> `ggarrange` and `ggtable` will have `main` argument.\n> \n> ---\n> \n> As for the naming, `g` means `grid`, `gg` means _a part of ggplot2_. So, `g*` is available outside `ggplot2` while `gg*` only works with ggplot2.\n> \n> I named `ggtable`, `ggarrange` in correspondence to `ggsave`. Please let me know if do you have better naming.\n\nI guess my question is whether ggarrange could also work with other\ngrobs, or should it remain specific to ggplot? I'd be in favor of\nmaking it more general, if only to avoid having two very similar\nfunctions in different packages. You could name it arrangeGrob and I'd\nremove its cousin from gridExtra.\n\nMaking the current arrangeGrob compatible with ggarrange does not help\nif one wants to include, say, a tableGrob next to a ggplot.\n\nCheers,\n\nb.\n\n> ---\n> \n> > I noticed you have an example with inset plot; annotation_custom is probably more flexible for this particular purpose [https://github.com/baptiste/ggplot2/blob/customgrob/R/annotation-custom.r#L29]\n> \n> Yes, the inset plot is unplanned feature. After implementation, I found that the inset plot is possible. So probably not well designed.\n> \n> ---\n> \n> > Am I right that it requires using a character matrix like this?\n> \n> No. At the moment, `gglayout` has two way + alpha for setting the layout.\n> \n> 1) layout matrix, which is compatible with `layout` in `graphics` package:\n> \n> ``` R\n> m <- matrix(\n> \u00a0c(1, 1, 1,\n> \u00a0 \u00a02, 2, 3,\n> \u00a0 \u00a04, 5, 5,\n> \u00a0 \u00a06, 5, 5), 4, byrow = T)\n> lay <- gglayout(m)\n> ```\n> \n> 2) the list of row/col spans, which is compatible with `grid.layout` and `layout.pos.row` in `grid` package:\n> \n> ``` R\n> lay <- gglayout(row = list(1, 2, 2, 3, 3:4, 4), col = list(1:3, 1:2, 3, 1, 2:3, 1))\n> ```\n> \n> 3) Plus alpha is a kind of automatic generation of layout matrix by `nrow`, `ncol`, `dim` etc.\n> \n> The inset plot is possible only by 2) the list of row/col span.\n> \n> ---\n> \n> > I would suggest having some code to detect when the numbers aren't laid out in rectangles. In the example below, I think it should give a warning/error\n> \n> Agreed. I'm looking for the good algorithms for detecting such incorrect layout.\n> \n> ---\n> \n> Now I'm using `ggarrange` and `ggtable` in my daily work, and found it is so useful.\n> Further commets are welcome.\n> \n> Thanks!!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/hadley/ggplot2/issues/326#issuecomment-3406541\n @kohske \n\n> > I would suggest having some code to detect when the numbers aren't laid out in rectangles. In the example below, I think it should give a warning/error\n> \n> Agreed. I'm looking for the good algorithms for detecting such incorrect layout.\n\nI think this should do the trick. It could probably be cleaned up a little, though. \n\n``` R\n\n# Returns TRUE if all the x's in mat are arranged in a rectangle,\n# FALSE otherwise\nis_rect <- function(x, mat, ...) {\n\n  numcol <- ncol(mat)\n  numrow <- nrow(mat)\n\n  # The column and row numbers for each location in the matrix\n  colnums <- matrix( rep(1:numcol, numrow), ncol = numcol, byrow=TRUE)\n  rownums <- matrix( rep(1:numrow, numcol), nrow = numrow, byrow=FALSE)\n\n  # Find matrix locations that contain x\n  xloc <- mat == x\n\n  # Find min and max value of cols and rows with x.\n  # This specifies a rectangle.\n  rowmin <- min(rownums[xloc])\n  rowmax <- max(rownums[xloc])\n  colmin <- min(colnums[xloc])\n  colmax <- max(colnums[xloc])\n\n  # All values of xloc inside the rectangle should be TRUE.\n  # All values of xloc outside the rectangle should be FALSE.\n  # Check this by inverting the rectangle and checking that all == FALSE\n  xloc[rowmin:rowmax, colmin:colmax] <- !xloc[rowmin:rowmax, colmin:colmax]\n\n  if (any(xloc)) return(FALSE)\n  else           return(TRUE)\n\n}\n\n# Returns TRUE if all values in mat are in rectangles, FALSE otherwise\nis_all_rects <- function(mat) {\n\n  # Get all the unique values in mat\n  nums <- unique(as.vector(mat))\n\n  # (Not totally sure this uses vapply correctly...)\n  goodrects <- vapply(nums, is_rect, TRUE, mat)\n\n  if (all(goodrects)) {\n    return(TRUE)\n  } else {\n    stop(paste(\"These numbers are not in rectangles: \",\n           paste(nums[!goodrects], collapse=\", \")))\n    return(FALSE)\n  }  \n\n}\n\n```\n\nThese function names are probably not the best for the ggplot2 namespace. Also, it won't work for all character matrices -- it could fail for cases where there's weird stuff like `\" 5 6\"`.\n\nSome test cases:\n\n``` R\nmat <- matrix(c(\n  1, 1, 2,\n  1, 1, 2,\n  3, 3, 2\n  ), 3, byrow=TRUE)\nis_all_rects(mat)\n# [1] TRUE\n\nmat2 <- matrix(c(\n  1, 1, 2,\n  1, 1, 2,\n  3, 3, 1\n  ), 3, byrow=TRUE)\nis_all_rects(mat2)\n# Error in is_all_rects(mat2) : These numbers are not in rectangles:  1\n\nmat3 <- matrix(c(\n  1, 1, 2,\n  1, 1, 2,\n  1, 3, 3\n  ), 3, byrow=TRUE)\nis_all_rects(mat3)\n# Error in is_all_rects(mat3) : These numbers are not in rectangles:  1\n\nmat4 <- matrix(c(\n  1, 1, 2,\n  1, 1, 3,\n  3, 1, 3\n  ), 3, byrow=TRUE)\nis_all_rects(mat4)\n# Error in is_all_rects(mat4) : These numbers are not in rectangles:  1, 3\n```\n @baptiste \n\n> I guess my question is whether ggarrange could also work with other\n> grobs, or should it remain specific to ggplot? I'd be in favor of\n> making it more general, if only to avoid having two very similar\n> functions in different packages. You could name it arrangeGrob and I'd\n> remove its cousin from gridExtra.\n\nI'm not sure how general `ggarrange` should be. Probably including some grobs is useful like this:\n\n``` R\nggarrange(\n  qplot(iris[,1], iris[,2]), \n  tableGrob(iris[1:6, 1:2], gp=gpar(fontsize=8)))\n```\n\nand output here: https://skitch.com/e-kohske/gadjt/2012-01-09-13.50.38\n\nBut in my view `ggarrange` will not take care of other grid-base graphics such as `lattice`.\nSo I think `arrangeGrob` in `gridExtra` will be still useful as the integrator of grid-based graphics.\n\nHow do you see it, @hadley?\n @wch Thanks.\nI was looking for any general algorithms (i.e., by some basic matrix operations) but could not find.\nI slightly modified your code and will merge it.\n\n``` R\nis_rect <- function(i, mat) {\n    m0 <- array(FALSE, dim(mat))\n    is <- which(mat == i, arr.ind=T)\n    m0[seq(min(is[, 1]), max(is[, 1])), seq(min(is[, 2]), max(is[, 2]))] <- TRUE\n    is <- which(m0)\n    all(mat[is] == i) && all(mat[-is] != i)\n}\n```\n\n>  Also, it won't work for all character matrices -- it could fail for cases where there's weird stuff like \" 5 6\".\n\nThere is no interface to set the character matrices.\nThe char matrices is just for display implemented in `print.gglayout`.\n How about testing for the number of elements against the number of elements for the maximum block?\n\nis_rect <- function(i, mat) {\n   is <- which(mat == i, arr.ind=T)\n   NROW(is) >= prod(diff(apply(is, 2, range)) + c(1,1)) \n}\n @baptiste why `>=`? Shoud this be `==`?\n @kohske yes, `==` sounds right, I didn't think very much last night..\n ... unless you want to use this case to specify \"inset\" plots, that is to say enforce connected blocks (no gap), but not necessarily simply connected (can have holes).\n Yes, I may write after the port to gtable package.\n  Apparently a recent commit broke something for me.  I was taking a look at #270 again, but the code wouldn't run anymore. I'm not sure exactly what the problem is, but `git bisect` tracked it to commit a9f5e0a4016a58d612cf286291efe427f1bf6c9f (regarding test package).\n\n```\ndat <- data.frame(x=1:6, y=1:3)\n\n# OK\nggplot(dat, aes(x=x,y=y)) + geom_boxplot() \n\n# Not OK\nggplot(dat, aes(x=x,y=y)) + geom_boxplot(aes(group=x)) \n# Error in as.environment(where) : \n#   no item called \"package::ggplot2\" on the search list\n# \n# Enter a frame number, or 0 to exit   \n#\n#  1: print(list(data = list(x = 1:6, y = c(1, 2, 3, 1, 2, 3)), layers = list(<en\n#  2: print.ggplot(list(data = list(x = 1:6, y = c(1, 2, 3, 1, 2, 3)), layers = l\n#  3: plot-render.r#164: ggplot_build(x)\n#  4: plot-build.r#39: dlapply(function(d, p) p$compute_aesthetics(d, plot))\n#  5: plot-build.r#26: f(d = data[[i]], p = layers[[i]])\n#  6: plot-build.r#26: p$compute_aesthetics(d, plot)\n#  7: plot-build.r#26: get(x, envir = this, inherits = inh)(this, ...)\n#  8: layer.r#156: scales_add_defaults(plot$scales, data, aesthetics, plot$plot_e\n#  9: scales-.r#85: find_global(scale_name)\n#10: scales-.r#107: exists(name, \"package::ggplot2\")\n```\n  Any progress on this issue?\n Ok, thanks.\nAre you going to change the interface, that is, name of existing function in ggplot2 packages?\n\nI'm thinking of some additional guides that I showed a few months ago, i.e., guide_range, guide_table, etc. and dual-axis guides (e.g, C/F degree). And it will depend strongly on gtable's functionality.\nI'm happy if I can find the interface of new gtable.\n  As requested made a separate branch for the commit.\n\nIf any other changes are needed, I am willing to adapt.\n\nCheers,\n\nWillem\n The documentation actually already included this. I just checked again to be sure, therefore, no updates to the documentation.\n  A few thoughts:\n- It would be nice to have the first part of the filename taken from, say, `context()`, if that function is used here.\n- It would also be nice to derive the filename from the title, with the option to override.\n- If the test results are stored in git, I could see this making the repo grow very large over time. Some output might be more efficiently stored as PNG, while others might be more efficient as PDF. For PDF output, it wouldn't be possible to view in a webpage, though.\n  - For PNG, optipng could be used to shrink file sizes, though it would add an external dependency.\n  - For PDF, it might be good to use `pdf(compress=FALSE)` to get text (not binary) output files, so that git can store line-by-line diffs.\n Another thing to keep in mind: the output PNG files will be platform-dependent. I tried generating the same simple graph on Mac and Linux. I found that the fonts are slightly different, and one of them was 15KB (Mac) while the other was 6KB (Linux).\n\nI think this may be because my Mac uses Quartz and Linux uses Cairo for PNG output. Perhaps they would be the same if cairo was used on both platforms, but I wasn't able to test this. On my Mac, output using `png(type='cairo')` didn't work (there was some error with libpng version), and Linux doesn't support quartz.\n\nAlso, one other thought about where to store the test results -- they could be put in a submodule, to keep them separate from the code. I like the idea of keeping the git repo free of accumulated test files, but I'd definitely understand if others disagree.\n I just learned about Paul Murrel's GraphicsQC package. It seems like it could do many of the things we've discussed.\n\nhttp://www.jstatsoft.org/v30/i01/paper\n  ``` R\n#a nice grid and it works\nlibrary(ggplot2)\nset.seed(12345)\ntmp <- expand.grid(POINT_X = 0:35, POINT_Y = 0:16) \ntmp$Estimate <- runif(nrow(tmp)) \nggplot(tmp, aes(x = POINT_X, y = POINT_Y, z = Estimate)) + stat_contour()\n\n#adding a tiny bit of noise on the coordinates gives problems \ntmp$POINT_X <- tmp$POINT_X + rnorm(nrow(tmp), sd = 0.0001) \ntmp$POINT_Y <- tmp$POINT_Y + rnorm(nrow(tmp), sd = 0.0001) \nggplot(tmp, aes(x = POINT_X, y = POINT_Y, z = Estimate)) + stat_contour()\n```\n Just a note:\n\n```\nset.seed(12345)\ndata <- expand.grid(x = 0:35, y = 0:16) \ndata <- mutate(data,\n  x = x + rnorm(nrow(data), sd = 1e-4),\n  y = y + rnorm(nrow(data), sd = 1e-4),\n  z = runif(nrow(data)))\n\n# code from StatContour$calculate\nx <- sort(unique(data$x))\ny <- sort(unique(data$y))\nz <-  tapply(data$z, data[c(\"x\", \"y\")], identity)\n\n# current implementation returns empty list\ncl <- contourLines(x, y, z)\n\n# other methods draws nothing\nfilled.contour(x, y, z)\ncontour(x, y, z)\n```\n\nSo probably there are two approaches.\n1. If `contourLines` returens 0-length list, show warning message and keep process further.\n2. Use another method for contour. It may be better to provide options like `method = XX` analogues to `stat_smooth`.\nI don't know which algorithms work well with this kind of irregular spatial data.\n   #400 will fixes this issue for breaks, minor_breaks, and labels.\n  space =  free does not seem to work as previous.\nOnly the y space seems to be divided as previously, in 0.8.9 the bars would be of equal width.\n\nTest with following code in 0.8.9 and then in github version:\n\n``` R\nlibrary(ggplot2)\ndata <- data.frame(x = paste(\"Anim\", 1:17, sep = \"\"), y = c(sample(1:10, 15, replace = TRUE), \n        sample(1:2, 2, replace = TRUE)/5), \n    group = rep(c(rep(\"X\", 15), rep (\"Y\", 2))), stringsAsFactors = FALSE) \n\nq <- ggplot(data = data, aes(x = x, y = y)) \nq <- q + geom_bar(stat = \"identity\") \nq <- q + facet_grid(. ~ group, scales = \"free\", space = \"free\") \nprint(q) \n```\n  Two way: directly pass the expression\n\n```\nqplot(1:3, 1:3, col=1:3) + \n  scale_colour_continuous(breaks = 1:3, \n    labels = c(expression(alpha),expression(beta),expression(gamma)))\n```\n\nor, use `parse = TRUE` option like `geom_text`\n\n```\nqplot(1:3, 1:3, col=1:3) + \n  scale_colour_continuous(breaks = 1:3, labels = c(\"alpha\", \"beta\", \"gamma\"), \n    guide = guide_legend(parse = TRUE))\n\n#or\n\nqplot(1:3, 1:3, col=1:3) + \n  scale_colour_continuous(breaks = 1:3, labels = c(\"alpha\", \"beta\", \"gamma\"), parse.label = TRUE)\n```\n\nneed to write tests.\n\nsee also 89e814251ddb3d5382548de799bb5d771e0355a3\n ah, yes. so what we need is to make  `scale_labels(scale)` back to `I(scale_labels(scale))`, right?\n\nhere is some usages:\n\n```\nqplot(1:3, 1:3, col=1:3) + \n  scale_colour_continuous(breaks = 1:3, labels = parse_format()(c(\"alpha\", \"beta\", \"gamma\")))\n\n# or \n\nqplot(1:3, 1:3, col=1:3) + \n  scale_colour_continuous(breaks = 1:3, labels = c(expression(alpha), expression(beta), expression(gamma)))\n\n# discrete case\n\nqplot(1:3, 1:3, col = c(\"alpha\", \"beta\", \"gamma\")) + scale_colour_discrete(labels = parse_format())\n```\n > FYI the easiest way to create the vector of unevaluated calls is .(alpha, beta, gamma)\n\nwow. cool. thanks.\n  e.g.,\n- extract a grob\n- remove grobs\n- remove cols/rows\n- flip cols/rows\n\nsee also #308\n  a quick hack to get a guide grob.\nIf you need a same way with the previous version (i.e., opts(keep = \"legend\"), probably I can do it.\nPlease let me know.\n Possible and not difficult (actually my initial idea) but isn't it time consuming?\nIt requires to build all geoms twice -- one for panel and one for gudies.\n\nAnother approach is like \"removing guides from gtable.\"\nIn this case, no need to buide twice. But maybe somewhat indirect.\n OK. Then I will rewrite it. \n Will you implement some `remove grob` interface for gtable?\n So may I close this pull request?\n  This fix is not merged into master so here is a pull request.\n And also may I close this pull request?\n  This is an implementation of dot plots.\n\nI made this branch off of feature/geom-violin, so it looks like this pull request includes some of those previous commits. Hopefully this isn't a problem. I tested merging everything into the current hadley/master branch, and it seems to work.\n\nSome things are strange because of dots are visually stacked. Notes:\n- When binning along x axis, the y dimensions are arbitrary. This is because the vertical positioning of the the dots is done by the grob. I don't think it's possible to have correct y dimensions with ggplot2. (Something similar happens when binning along y axis, but the width is set so that each cluster will be dodged properly.)\n- For the same reasons, the y axis label and tick labels aren't meaningful.\n- When binning along x axis, pos_stack doesn't work because of the strange y dimensions. Stacking wouldn't be impossible to implement, but it would be a big hack (and it wouldn't use pos_stack).\n- There is a fair bit of complexity. Part of it is because binning can be done on x or y, and part of it is because there are two methods of binning. Instead of adding the \"histodot\" option, I'd prefer to simply use stat_bin, but it doesn't allow binning along the y axis.\n\nI'm going to try to implement the smoothing algorithm from Wilkinson (1999) p. 6, but I find it confusing at the moment.\n\nSome examples here:\nhttps://github.com/wch/ggplot2/wiki/geom_dotplot\n @hadley I have a battery of visual tests for this, and for violin plots. Should I add them?\n\nAlso, what do you think about adding a title to each visual test describing what it's testing and what it should look like? I think that would be helpful.\n Regarding titles on visual tests, how about a wrapper function similar to `testthat`? Instead of `opts(title=\"mytitle\")`, it could be something like `visualtest(\"mytitle\",  { ggplot() + ... } )`. Also, it would be nice if the wrapper did line breaks in the titles automatically. \n If it's an html page, I guess you wouldn't need to put the titles in the graphs themselves; they could go in the web page. Another possibly useful feature would be to have two columns of images: one column with old images (from the last test run) and another with new images. That way it would be easy to inspect for important changes, even when there's a small change that alters the image files, but in a visually trivial way, like a change in border spacing, gridline width, antialiasing, and so on.\n\nIt might also be useful to have another column that indicates whether the image has changed byte-for-byte.\n Do you know this one?\nhttps://github.com/cameronmcefee/Image-Diff-View-Modes\n\ngithub has diff-for-picture mode. I know it just now.\n\nSo a diff commits looks like this: https://github.com/cameronmcefee/Image-Diff-View-Modes/commit/8e95f70c9c47168305970e91021072673d7cdad8\n\ncool.\n @hadley \n\n> I also wonder why the fill is lost in this case\n\nI think it gets lost at the stat-ing stage. It also happens for regular histograms:\n\n``` R\nset.seed(112)\ndat <- data.frame(x=rnorm(20), g=LETTERS[1:2])\n\n# Colors\nggplot(dat, aes(x, fill=g)) + geom_histogram(binwidth=.4)\n\n# Colors gone\nggplot(dat, aes(x, fill=g, group=1)) + geom_histogram(binwidth=.4)\n```\n\nI just tested in 0.8.9, and it happens there too.\n @kohske that is very cool. It seems a little slow, though. And does it need to be viewed through github? I wonder how hard it would be to generate a static webpage with three columns of pictures: Old, New, and Difference.\n  Congrats!!\n  Looks good for the most part. I'd suggest the following minor changes:\n\nFACETS section:\n\"New `facet_null` used when for no facetting.\" How about something like \"The new facet_null() function is applied in the default case of no faceting.\"  [or facetting, if you prefer]\n\nGUIDES section:\nPoint 2:   \"Axis is not yet moved\" might be better phrased as \"Axes are not yet moved...\"\nPoint 5:    usefull -> useful\n\nHope this is helpful.\nDennis\n  When the range of x or y is large, the function round_any returns a number out of range for the lower bound resulting in a shape parameter that is too large.  This then results in a request for an inordinate amount of RAM which causes qplot to fail.\n\nHere is a small reproduce:\n\n```\n> a <- data.frame( x = c( 1351425 , 2865880767 , 1351425 , 2865880767 ) , y = c( 0.0254 , -0.370578048780488 , -0.399846341463415 , 0.613065853658537 ) )\n> b <- qplot( x , y , data = a , geom = \"hex\" )\n> print( b )\nError in vector(\"integer\", length) : vector size specified is too large\n```\n\nThe offending lines of code follow:\n\n```\n> grep -Rn round_any ggplot2/R/stat-binhex.r\n\n61:    round_any(min(x), binwidth[1], floor) - 1e-6,\n62:    round_any(max(x), binwidth[1], ceiling) + 1e-6\n67:    round_any(min(y), binwidth[1], floor) - 1e-6,\n68:    round_any(max(y), binwidth[2], ceiling) + 1e-6\n``\n```\n One other bug here is:\n\n```\nybnds <- c(round_any(min(y), binwidth[1], floor) - 1e-06, round_any(max(y), binwidth[2], ceiling) + 1e-06)\n```\n\nin hexBin should read:\n\n```\nybnds <- c(round_any(min(y), binwidth[2], floor) - 1e-06, round_any(max(y), binwidth[2], ceiling) + 1e-06)\n```\n Fixing the index on binwidth for the lower bound of y should be sufficient to close the bug.\n\nHere is the original shape parameter calculated using the original code:\n\n```\nshape = 91226242 \n```\n\nThis is the original x information:\n\n```\nx = 1351425 2865880767 1351425 2865880767 \nxbins = 31 \nxbnds = -10e-07 2960013653 \nbinwidth[1] = 95484311 \n```\n\nNotice that the lower bound of x goes to zero as the binwidth gets large.  This is not a problem as the difference between ~0 and min( x ) = 1351425 is small when max( x ) = 2865880767.  But it probably should be rectified.\n\nHere is the original y information:\n\n```\ny = 0.0254 -0.370578 -0.3998463 0.6130659 \nybnds = -95484311 0.6415121 \nybins = 2828013499 \nbinwidth[2] =  0.03376374 \n```\n\nNotice that the lower bound on y is calculated incorrectly as it is using the binwidth from x.  This causes the number of ybins to explode and the shape parameter to do likewise.\n\nThe lower bound on y using the wrong binwidth index:\n\n```\nybnds[1] = -95484311 \n```\n\nThe lower bound on y using the right binwidth index:\n\n```\nybnds[1] = -0.4051659 \n```\n\nThe upper bound on y:\n\n   ybnds[2] = 0.6415121 \n\nThe new ybins when using the correct lower bound caclulation:\n\n   ybins = 31.00006 \n\nand the new shape parameter:\n\n```\nshape = 1.000002 \n```\n\nThe code then runs to completion when that one index change was made.\n\nDave H\n  I think this is a bug, or at the very least a problem with documentation. Someone emailed me asking about confidence intervals for loess fits. He was only able to get 68% confidence intervals.\n\nThese look the same:\n\n``` R\nggplot(cars, aes(x=speed, y=dist)) + geom_point() + stat_smooth()\n\nggplot(cars, aes(x=speed, y=dist)) + geom_point() + stat_smooth(level=.2)\n```\n\nAccording to the docs for `predict.loess()`, it doesn't actually support the `level` argument.\n\nIn `stat-smooth-methods.r`, it looks like it's trying to make predictions with the `level` and `interval` arguments, even though they're not supported by `predict.loess`.\n\n``` R\npredictdf.loess <- function(model, xseq, se, level) {\n  pred <- stats::predict(model, newdata = data.frame(x = xseq), se = se,\n    level = level, interval = if(se) \"confidence\" else \"none\")\n...\n```\n\nThe docs for stat_smooth say that you can change the level -- if this isn't actually possible for loess, then it should probably be noted.\n\nAlso, it looks like `predict.loess` isn't exported from `stats`, even though other predict functions are. I wonder if that's a bug.\n\n``` R\n> stats::predict.loess\nError: 'predict.loess' is not an exported object from 'namespace:stats'\n\n> stats::predict.lm\nfunction (object, newdata, se.fit = FALSE, scale = NULL, df = Inf, \n    interval = c(\"none\", \"confidence\", \"prediction\"), level = 0.95, \n...\n...\n```\n Here's a version of `predictdf.loess` implements `level` for confidence intervals. It uses the t distribution to calculate, as suggested in the docs for `predict.loess`.\n\n``` R\npredictdf.loess <- function(model, xseq, se, level) {\n  pred <- stats::predict(model, newdata = data.frame(x = xseq), se = se)\n\n  if (se) {\n    y = pred$fit\n    ci <- pred$se.fit * qt(level / 2 + .5, pred$df)\n    ymin = y - ci\n    ymax = y + ci\n    data.frame(x = xseq, y, ymin, ymax, se = pred$se.fit)\n  } else {\n    data.frame(x = xseq, y = as.vector(pred))\n  }\n}\n```\n\nI'm pretty sure that this is the right way to do it, but I'm not an expert here, so this should probably be vetted by someone who knows this stuff better. I can submit as a pull request if this looks OK.\n Here's a bit more I've found suggesting that it's the t distribution.\n\nFrom the `predict.loess` help page:\ndf: an estimate of the effective degrees of freedom used in estimating the residual scale, intended for use with t-based confidence intervals.\n\nIn Cleveland, Devlin, Grosse 1988, they calculate confidence intervals using t. I've also seen some references to Cleveland and Grosse 1991 mentioning the t-distribution.\n I added just one example to the help for stat_smooth - I hope that's what you meant by documentation. If not, let me know.\n\nAn aside: The help file for `predict.loess` says that it returns a list with `se` containing standard errors, but it's actually `se.fit`. I used the latter, as in `pred$se.fit`, even though `pred$se` actually works OK because of R's weird variable name completion. I don't know if it matters, but the `predictdf.glm` function in stat-smooth-methods.r actually references `pred$se` when it should properly be `pred$se.fit`.\n  Setting `breaks=NA` on a continuous x or y axis results in an error.\n\n``` R\ndat <- data.frame(x=1:3, y=1:3)\n\nggplot(dat, aes(x=x, y=y)) + geom_point() + scale_x_continuous(breaks=NA)\n# Error in if (max(limits) > max(b)) b <- c(b, b[length(b)] + bd) : \n#   missing value where TRUE/FALSE needed\n# In addition: Warning message:\n# In min(b) : no non-missing arguments to min; returning Inf\n```\n\nIt looks like the problem is in the calculation of minor breaks, at line 296 in `scale-.r`.\n\nHere's some skeleton test code for testing that continuous scales in general work with `breaks=NA`. It's skeleton because I don't know exactly what to `expect`. \n\n``` R\ntest_that('Continuous scales work with breaks=NA', {\n  dat <- data.frame(x=1:3, y=1:3)\n\n  px <- ggplot(dat, aes(x=x, y=y)) + geom_point() + scale_x_continuous(breaks=NA)\n  bx <- ggplot_build(px)\n  # Needs to be fleshed out: With p$panel$ranges[[1]], should x.major be NULL or have NA?\n  expect_identical(\"???\", NA)\n\n  py <- ggplot_build(ggplot(dat, aes(x=x, y=y)) + geom_point() + scale_y_continuous(breaks=NA))\n  by <- ggplot_build(py)\n\n  # Other continuous scales\n  pcolour <- ggplot(dat, aes(x=1, y=y, colour=x)) + geom_point() + scale_colour_continuous(breaks=NA)\n  bcolour <- ggplot_build(pcolour)\n  # expect??\n\n  pfill <- ggplot(dat, aes(x=1, y=y, fill=x)) + geom_point(shape=21) + scale_fill_continuous(breaks=NA)\n  bfill <- ggplot_build(pfill)\n\n  palpha <- ggplot(dat, aes(x=1, y=y, alpha=x)) + geom_point() + scale_alpha_continuous(breaks=NA)\n  balpha <- ggplot_build(palpha)\n\n  psize <- ggplot(dat, aes(x=1, y=y, size=x)) + geom_point() + scale_size_continuous(breaks=NA)\n  bsize <- ggplot_build(psize)\n})\n```\n\nIt appears that some of these can't be built with ggplot_build (x and y), some can be built but not rendered (alpha, size), and others build and render fine (colour, fill).\n @wch thank you for this bug report. The commit above 2ae13ad will fix the problem in positional scale. Could you please test again?\n\nThe errors of alpha and size is another problem. While `scale_colour_continuous` and `scale_fill_continuous` have `na.value` as non-NA, they have `na.value` as `NA`. This causes the problem in legend guide. So I will fix it. Thanks.\n so, the test code should be like this:\n\n```\nsc <- scale_x_continuous(breaks=NA)\nscale_train(sc, 1:3)\nexpect_identical(scale_breaks(sc), NA)\nexpect_identical(scale_breaks_minor(sc), NULL)\n```\n @kohske - Thanks for explaining how to do tests on the scales. Running tests on the scales seem to work OK with your fixes. Visual tests don't all work, though. I still get NA legends for fill and colour.\n\nScale tests: (note: I included minor break tests only for x and y - I didn't think they're needed for others, but I could be wrong.)\n\n``` R\n# X\nsxc <- scale_x_continuous(breaks=NA)\nscale_train(sxc, 1:3)\nexpect_identical(scale_breaks(sxc), NA)\nexpect_identical(scale_breaks_minor(sxc), NULL)\n\n# Y\nsyc <- scale_y_continuous(breaks=NA)\nscale_train(syc, 1:3)\nexpect_identical(scale_breaks(syc), NA)\nexpect_identical(scale_breaks_minor(syc), NULL)\n\n# Alpha\nsac <- scale_alpha_continuous(breaks=NA)\nscale_train(sac,1:3)\nexpect_identical(scale_breaks(sac), NA)\n\n# Size\nssc <- scale_size_continuous(breaks=NA)\nscale_train(ssc,1:3)\nexpect_identical(scale_breaks(ssc), NA)\n\n# Fill\nsfc <- scale_fill_continuous(breaks=NA)\nscale_train(sfc,1:3)\nexpect_identical(scale_breaks(sfc), NA)\n\n# Colour\nscc <- scale_colour_continuous(breaks=NA)\nscale_train(scc,1:3)\nexpect_identical(scale_breaks(scc), NA)\n```\n\nVisual tests:\n\n``` R\ndat <- data.frame(x=1:3, y=1:3)\n\n# These are OK\nggplot(dat, aes(x=x, y=y)) + geom_point() + scale_x_continuous(breaks=NA)\nggplot(dat, aes(x=x, y=y)) + geom_point() + scale_y_continuous(breaks=NA)\nggplot(dat, aes(x=1, y=y, alpha=x)) + geom_point() + scale_alpha_continuous(breaks=NA)\nggplot(dat, aes(x=1, y=y, size=x)) + geom_point() + scale_size_continuous(breaks=NA)\n\n# Not OK\nggplot(dat, aes(x=1, y=y, fill=x)) + geom_point(shape=21) + scale_fill_continuous(breaks=NA)\nggplot(dat, aes(x=1, y=y, colour=x)) + geom_point() + scale_colour_continuous(breaks=NA)\n```\n @wch thanks for the test code. Now all problems seem to have been fixed.\n\n@hadley As this branch has conflicts with `fix/guides` in your repository, I merged this branch into the `fix/guides` and pushed it to your repository. Could you please merge it into `master`?\nOr, if pull request is preferable for you, I will push the `fix/guides` to my repository and then send pull request.\n This had been fixed before merging into fix/guides branch (9cd9483e63ff99a67b23055616a965099d316abf) , but now error again.\nI'm now inspecting.\n  Here is the bug report (from boxplot example):\n\n```\n> abc <- adply(matrix(rnorm(100), ncol = 5), 2, quantile, c(0, .25, .5, .75, 1))\n> ggplot(abc, aes(x = X1, ymin = `0%`, lower = `25%`, middle = `50%`, upper = `75%`, ymax = `100%`)) +\n+   geom_boxplot(stat = \"identity\")\nError in eval(expr, envir, enclos) : object '0%' not found\n> ggplot(abc, aes(x = X1, y = `50%`)) + geom_point()\nError in eval(expr, envir, enclos) : object '50%' not found\n> abc\n  X1        0%        25%         50%       75%     100%\n1  1 -1.714925 -0.6468398  0.17065804 0.4393230 1.201247\n2  2 -1.189586 -0.6724862 -0.09751418 0.4884423 1.134490\n3  3 -1.689927 -0.3296100  0.23288596 0.5751145 2.424042\n4  4 -1.504052 -0.8237122 -0.33161341 0.3219800 1.507830\n5  5 -2.463395 -0.7655001 -0.27450750 0.1631618 1.648378\n```\n\nThis is because `transform` in `facet_map_layout.null` changes the column name.\n\n```\n> transform(abc, P=1)\n  X1       X0.       X25.         X50.      X75.    X100. P\n1  1 -2.584666 -0.5943572  0.200944872 0.7742156 2.166626 1\n2  2 -2.115618 -0.4283542  0.004670815 0.3936428 1.808468 1\n3  3 -2.638751 -0.7368470 -0.265173043 0.4781000 1.571617 1\n4  4 -1.476560 -0.3720931  0.182308241 0.8797875 1.924785 1\n5  5 -2.999939 -0.6789793 -0.214186432 1.0083131 1.775713 1\n```\n\nfixed it.\n  Seemingly, there are big changes in ggplot2 v0.9. So, if there is something out of date in  your book (ggplot2  Elegant Graphics for Data Analysis)? Do you plan to update the book? \n Hopefully, all the code and ggplot produced graphics in the book exist in a reproducible (aka, runnable) form.  If so, that source file should be run against the new version and any code that gives errors could be annotated on a wiki page devoted to example updates for version 0.9.\n\nEven if a new edition of the book is made/printed, this would be useful for those of us with the original edition that wouldn't necessarily buy every edition (sorry, Hadley).\n  This adds geom_violin and stat_ydensity. There are also changes to pos_dodge so that it dodges by group instead of by row.\n I've had a few thoughts about the parameters. These probably should be dealt with before merging.\n- I think I need a better name for the `fullwidth` parameter. Presently, setting it to `FALSE` (the default) scales each violin so the max width is the same. Setting it to `TRUE` scales each violin to have the same area (well, same area if tails were included). I also want an option to scale the area proportional to the sample size.\n- Should there be an option to automatically draw the box plot and median dot, or should I make people do that manually? Doing it automatically may be difficult because the data goes through `StatYdensity` before it gets to `GeomViolin`. By the time it gets to the geom, the original data may no longer be accessible, so it can't be sent to `GeomBoxplot`.\n @wch regarding your second point (option to automatically draw box plot), I would say no.  Adding a box plot is but one way to supplement the violin plot and it makes more sense with it being a separate layer.  With the aesthetics set up right in the initial `ggplot` call, it should be as simple as `+ geom_violin() + geom_boxplot()` to get both of them.\n @BrianDiggs Thanks, now that I've sat on it for a bit, I'm inclined to agree.\n Regarding the first point above, I've changed the `fullwidth` parameter to `scalearea`. When set to FALSE (default), it scales so the max width of each violin is the same. When set to TRUE, it scales so that area of each violin is the same.\n\nI've also added an option `scalecount` to scale by sample size. This will work with either value of `scalearea`.\n Let me see if I understand the possible interactions of these two:\n- `scalecount=FALSE` and `scalearea=FALSE`: the widest part of the violin plot is the same width for all violins\n- `scalecount=FALSE` and `scalearea=TRUE`: the area of each violin plot is the same for all violins\n- `scalecount=TRUE` and `scalearea=FALSE`: the ratios of the widest parts of each violin are equal to the ratios of their respective sample sizes\n- `scalecount=TRUE` and `scalearea=TRUE`: the ratios of the areas of each violin are equal to the ratios of their respective sample sizes\n\nIs that right?\n @BrianDiggs yup, that's exactly right. I added some examples on the wiki page to illustrate: https://github.com/wch/ggplot2/wiki/geom_violin\n So one controls what aspect of the violin is being scaled and the other controls by what that element is being scaled. I like the options that gives, but I'm not sure if I like the way the options are named/mapped. \n\nscalearea controls the aspect or element that is scaled. Rather than thinking of the parameter as \"Should I scale based on the area? Yes/No\" where no falls back on scaling by width, why not have an option \"scaledelement\" or \"elementscaled\" or \"aspectscaled\" which can have values \"width\" or \"area\". The default can be width, just as the default of \"scaledarea\" is FALSE. You could either throw a warning, an error, or silently use \"width\" if the value is unrecognized. The advantage of this is that it is more clear that you are picking from two different options regarding the scaling element, not just turning on a feature. Also, if there is anything else to scale by (not that I can think of any other aspects that are available), you just expand the allowable choices rather than have to add another flag variable. \n\nI'm less sure about changing the \"scalecount\" variable likewise (into, say, \"scaleby\" with choices \"count\" or \"equal\"). In one sense, there may be other things to scale by (though again I can't think of what).  It'd be nice to be able to make that an aesthetic, but that doesn't work because it is a group level aesthetic not a individual value one. \n\nOn Dec 13, 2011, at 4:08 PM, \"Winston\" reply@reply.github.com wrote:\n\n> @BrianDiggs yup, that's exactly right. I added some examples on the wiki page to illustrate: https://github.com/wch/ggplot2/wiki/geom_violin\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/hadley/ggplot2/pull/293#issuecomment-3133135\n @BrianDiggs These are good suggestions... I didn't really like that the variables had very similar names but did different things.\n OK, how about:\n- `scaledaspect` = `\"width\"` or `\"area\"`\n- `scaleby` = `\"equal\"` or `\"count\"`\n\nFor some reason I'm finding it really hard to come up with good names for this.\n I like those better, but I agree that settling on a name is hard.  Better to have the struggle now, though, rather than after it gets released.  \n\nOne point I keep going back and forth on is whether the choice for `scaleby` should be `\"equal\"` or `\"none\"` (or maybe `\"nothing\"`).  I like when options, at least approximately, parse as language.  So for `scaledaspect` this works: `scaledaspect=\"width\"` can be read as \"the scaled aspect is the width\".  It is a bit trickier for `scaleby`: `scaleby=\"count\"` becomes \"What it [the scaled aspect] is scaled by is the count\".  For \"equal\" it parses more like \"It [the scaled aspect] is scaled such that they are all equal\"; for \"nothing\" a more parallel construct is possible \"What it [the scaled aspect] is scaled by is nothing.\"  This is not a very strong argument, though.\n\nI'd love to hear others' thoughts/ideas.\n Here's another idea: `scaledaspect` and `scalefactor`. Thoughts?\n @hadley \n\n> I'm not sure I see why you need so many options - to me, the only sensible scalings are area constant, or area proportional to sample size.\n\nI'm inclined to agree that scaling the max width isn't all that useful -- but for whatever reason that does seem to be the standard convention with violin plots. That's why width scaling is in there, and the default. If you're sure, I'm happy to take it out and have only scaling by area.\n OK, I made most of the changes and pushed them. The only things that remain are choosing the scale parameters and documenting them. @hadley, I'll make the changes once you let me know if you're sure that you don't want width scaling at all.\n I removed the width scaling option. Now there's just `scalefactor` which can be `equal` or `count`. I also added docs, and changed pos_dodge to use the method you mentioned. I didn't run roxygenize because of the NAMESPACE issue.\n `\"fixed\"` and `\"free\"` are not a natural parallel, though.  From that, I'm not sure which is which.  I'm guessing `\"fixed\"` would be equal (fixed to the same size, as the facets are fixed to the same scale), and `\"free\"` would be scaled to the count (free to expand to the data's size), but I could probably come up with just as good explanation for the other way around.  I think it is better to go with more descriptive options (`\"equal\"` and `\"count\"`), though calling the parameter just `scale` seems reasonable.\n I have to agree with @BrianDiggs's assessment of fixed and free. It's not obvious which one would mean \"scale areas to be equal\" and which would mean \"scale area by counts\". `scale` does sound reasonable for a parameter name, though.\n OK, changed it to scale, count, and equal.\n OK, I added a NEWS item and some visual tests. A heads up: I just tried merging, and it looks like there will be a small conflict in NEWS.\n OK, it should be good to go.\n  This adds the notch option to geom_boxplot.\n OK, I made the changes to the code, and added documentation to geom_boxplot and stat_boxplot. I didn't commit the resulting changes to the .Rd files after running roxygenize, though. Running roxygenize appears to also change the NAMESPACE file, so I figured I'd just not mess with it. In general, what should I do with roxygen?\n OK, I added the `NEWS` item, a description of how they work, and a reference to a paper. I also added the description of the hinge/quartile calculation for #108.\n  In the master branch, there are stat-aggr2d and stat-aggrhex. These are combination of stat-summary with geom-bin2d/geom-binhex. The stats are renamed.\n hmm, this is same as `stat-bin2d`, `default_aes <- function(.) aes(fill = ..count..)`.\nWith regards to this problem, is there any difference between bin2d and summary2d?\n But I need to write test codes. So could you please leave this pull request for a while?\nI will test.\n Then, do you think the function name `stat-summary-2d` is confusing? Please let me know if you come up with a good alternative for the naming.\n Now I think this feature can be merged, but should I write documents...?\n\nhere is test codes\n\n```\n\nset.seed(1)\n\n# sample data\ndf <- data.frame(a = rnorm(1000), b = rnorm(1000))\ndf <- transform(df, v = exp(-(sqrt(a^2+b^2))) + rnorm(1000))\ndf[sample(1:1000, 50),]$v <- NA\n\n# z is passed to the summary function\nd <- ggplot(df, aes(x = a, y = b, z = v)) \n\n# by default, mean of z\nd + stat_summary2d()\n\n# you can use any summary function\nd + stat_summary2d(fun = function(x) sum(x^2))\n\n# var(x) is NA if length(x)==1\nd + stat_summary2d(drop = TRUE, fun = var)\nd + stat_summary2d(drop = FALSE, fun = var)\n\n# same for hex\nd + stat_summary_hex()\nd + stat_summary_hex(fun = function(x) sum(x^2))\nd + stat_summary_hex(drop = TRUE, fun = var)\nd + stat_summary_hex(drop = FALSE, fun = var)\n```\n Done. Now this branch is fast-forwardable for master.\n  in the master branch, there are stat-aggr2d and stat-aggrhex. These are combination of stat-summary with geom-bin2d/geom-binhex. The stats are renamed.\n Ok. I accidentally work with this branch on local repository, so I will re-send a pull request.\n  With scale_fill_continuous, the legend sometimes shows NA's in the beginning and/or end of the range. I think this happens when the min or max value of data doesn't align with the break increments shown in the legend.\n\n``` R\ndat <- data.frame(x=LETTERS[1:5], y=1, z=(1:5)/4)\ndat\n\n# Bad: Show's NA at high and low end\nggplot(dat, aes(x=x, y=y, fill=z)) + geom_bar()\n\n# Bad: Even with manual limits, shows NA:\nggplot(dat, aes(x=x, y=y, fill=z)) + geom_bar() +\n    scale_fill_continuous(limits=c(0.25,1.25))\n\n# OK: Set the breaks manually to specifically hit the values \nggplot(dat, aes(x=x, y=y, fill=z)) + geom_bar() + \n    scale_fill_continuous(limits=c(0,1.5), breaks=seq(0.25,1.25, .25))\n\n# OK: set the limits at \"nice\" values\nggplot(dat, aes(x=x, y=y, fill=z)) + geom_bar() +\n    scale_fill_continuous(limits=c(0,1.5))\n```\n\nI'd write a test, but I can't find legend information in the output of ggplot_build.\n @wch Thanks for the test code.\nProbably this bug has been fixed in this branch: https://github.com/hadley/ggplot2/tree/fix/guides with some other bugs.\n @kohske, it looks like that branch gets rid of the NA's. However, now the minimum in the legend is 0.4 and the maximum is 1.2, while the minimum of the data is 0.25 and the maximum is 1.25. So the range of the data goes outside the range of the legend. Is this expected behavior? To me it makes more sense for the legend range to go one more step in each direction.\n @wch the behavior is same as the previous version. I'm not sure what is best, but I think the current implementation is reasonable. Automatic expansion will make things very complicated. This is because, say, the value (colour) for 0.25 is undefined, without expanding the limits of the scale (like your last example).\n @kohske, oh right, I forgot that the colors were undefined beyond the range. It's an interesting dis-analogy with the x and y scales, where it is possible to extrapolate the scale to reach the next tick mark; for x, you can just go further left or right.\n @wch Yes, but it is the case only for \"infinite (maybe cartesian-like) space\" and \"(maybe simple) time\". Not sure...\nAnyway, as a cognitive scientist, deeply considering about data visualization is very interesting for me. It tell me how we map perceptual inputs onto the abstract space of data. Thanks.\n @kohske This is interesting to think about... Maybe it's useful to distinguish these two properties: being able to extrapolate the scale, and being able to extrapolate the scale infinitely. You actually could extrapolate the color scale, as long as it stays within the RGB color cube (or Lab space).\n\nA few other thoughts: some properties, like size, are bounded on only one side. Absolute brightness is also bounded on one side, but log(brightness) is infinite in both directions, and also maps better to our perception. There are other possibilities as well; rotation angle is cyclical -- it is finite and unbounded.\n\nAll of this makes me wonder if the upcoming changes to the stacking/dodging code can be made general enough to encompass all continuous scales. It might not be very useful to dodge colors, but thinking about it this way may help to find deep regularities to generalize over.\n  I'm leery about \"random\"; is it going to make reproducible research (al a Sweave or knitr or org.mode) not strictly reproducible?  \n True, if you know about it.  Which you might not until you get it randomly the first time.  Then you can't reproduce it.  I hope it creates fewer questions than it helps solve.\n  If you use points with size=0, they're pretty much invisible if you output to bitmap files like PNG. But when you output to PDF, they show up as large circles that are positioned with their upper-left corner at the specified x and y.\n\nYou generally won't use size 0 points, but that was the only way I could get geom_boxplot to hide the outliers. The reason I wanted to do that was to overlay the box plots on a violin plot, which is a standard thing to do.\n\n``` R\nset.seed(123)\ndat <- data.frame(x=LETTERS[1:3], y=rnorm(60))\n\np <- ggplot(dat, aes(x=x, y=y))\npdf('test.pdf', width=3, height=3)\np + geom_boxplot(outlier.size=0)\np + geom_point(size=0)\ndev.off()\n```\n\nI was able to get them to be effectively invisible by setting outlier.size=.01. Should this workaround be used, or should I add an option to show/hide them, like \"show.outliers\"? Some solution is necessary for box plots to be used with violins.\n I was able to reproduce it with grid graphics.\n\nBut it looks like the problem is probably my PDF viewer. With evince in Linux, the dots are visible, but with Preview and Adobe Reader on Mac, they aren't.\n  When x is a factor, polar coordinate angles aren't evenly spaced. Example:\n\n``` R\ndat <- data.frame(x=LETTERS[1:3], y=4)\n\n# A and C boxes touch - angle AC is smaller than AB and BC\nggplot(dat, aes(x=x, y=y)) + coord_polar() + geom_bar()\n```\n\nTest code:\n\n``` R\ntest_that(\"coord_polar angles are evenly spaced when x is a factor\", {\n  dat <- data.frame(x=LETTERS[1:3], y=4)\n  p <- ggplot_build(ggplot(dat, aes(x=x, y=y)) + coord_polar() + geom_bar() )\n\n  expect_identical(p$panel$ranges[[1]]$theta.range, c(.5, 3.5))\n})\n```\n  I was testing some of the examples from the help page, and noticed that `geom_boxplot` has slightly different output from the `boxplot` function. If you look at these two graphs, you'll notice that `ggplot` has an outlier at 19.2, but `boxplot` doesn't.\n\n``` R\nggplot(mtcars, aes(factor(cyl), mpg)) + geom_boxplot() + ylim(10,35)\n\nboxplot(mpg ~ cyl, mtcars)\n```\n\nThe output of `boxplot` seems to be consistent with `boxplot.stats`, so my guess is that there's something wrong with `stat_boxplot`.\n\n``` R\nboxplot.stats(subset(mtcars, cyl==8)$mpg)\n#$stats\n#[1] 13.3 14.3 15.2 16.4 19.2\n#\n#$n\n#[1] 14\n#\n#$conf\n#[1] 14.31323 16.08677\n#\n#$out\n#[1] 10.4 10.4\n```\n  With a a stacked area graph, it requires an entry at every x for every group. If for a given x value, one group doesn't have an entry in the data frame, then it will behave as though the y value of that group at that x is zero.\n\nThe pictures will illustrate better:\n\n``` R\n\ndat <- data.frame(\n        g=rep(LETTERS[1:3], each=4),\n        x=rep(1:4, 3),\n        y=rep(3:14))\n\n# Remove row with g=B, x=3 \ndat <- dat[-7,] \ndat\n\n# Lines all look straight\nggplot(dat, aes(x=x, y=y, colour=g)) + geom_line()\n\n# With a stacked area graph, there's a dip at x=3 \nggplot(dat, aes(x=x, y=y, fill=g)) + geom_area()\n```\n\nTest code:\n\n``` R\ntest_that(\"Stacked area graph interpolates missing values\", {\n  dat <- data.frame(\n           g=rep(LETTERS[1:3], each=4),\n           x=rep(1:4, 3),\n           y=rep(3:14))\n\n  # Remove row with g=B, x=3 \n  dat <- dat[-7,] \n\n  p <- ggplot_build(ggplot(dat, aes(x=x, y=y, fill=g)) + geom_area())\n\n  topgroup_y <- with(p$data[[1]], y[x==3 & group==3] )\n  expect_equal(topgroup_y, 27)  \n})\n```\n\nI think fixing this one would require doing some interpolation. Perhaps solving this one is better left to the large changes to stacking code in the future?\n Just a note, although this is useful in some cases, I don't think this kind of automatic interpolation is good idea.\nThe purpose of visualization is to visually inspect how the data is.\nBut the automatic interpolation will make users miss the missing values.\nFurthermore, there is no reason to apply liner interpolation. Why not smoothing, why not other filtering?\nSo, in my view, interpolation should be done by users' hand.\nOr, at least, the explicit way, such as stat_interpolate, should be provided. But maybe this is beyond the scope of \"plotting.\"\nAnother way is to simply induce an error or a warning when missing values are detected.\n That makes sense. I think it would be a good idea to have an informative warning message so that people know how to deal with the issue if they encounter it.\n  Context: Last example in coord_trans(), 0.9.0 development version\n\ndf <- data.frame(a = abs(rnorm(26)),letters)\nplot <- ggplot(df,aes(a,letters)) + geom_point()\n# Transforms on 'a' work fine...but\n\nplot + coord_trans(x = \"sqrt\", y = \"reverse\")\nError in -x : invalid argument to unary operator\nIn addition: Warning messages:\n1: In log(x, base) : NaNs produced\n2: In log(x, base) : NaNs produced\n3: In log(x, base) : NaNs produced\n\nstr(df)\n'data.frame':   26 obs. of  2 variables:\n $ a      : num  0.000269 0.507335 0.235652 0.804319 0.223722 ...\n $ letters: Factor w/ 26 levels \"a\",\"b\",\"c\",\"d\",..: 1 2 3 4 5 6 7 8 9 10 ...\n\nDennis\n This is due to the change in `scales` package. I'm not sure if trans should support discrete variable.\n I agree with you on that front, Kohske, but it was one of Hadley's examples in the package, so I thought I'd bring it up for discussion. I could see this type of reversal if the factor variable in question were ordered, but not otherwise.\n\nDennis\n\n---\n\n From: kohske takahashi reply@reply.github.com\nTo: Dennis Murphy djmurphy0420@yahoo.com \nSent: Saturday, December 10, 2011 8:52 PM\nSubject: Re: [ggplot2] reverse scaling with unordered factors (#278)\n\nThis is due to the change in `scales` package. I'm not sure if trans should support discrete variable.\n\n---\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/hadley/ggplot2/issues/278#issuecomment-3095666\n  Some of the examples from the geom_boxplot help don't work. It's not clear to me why this happens.\n\n``` R\nm <- ggplot(movies, aes(y = votes, x = rating, group = round_any(rating, 0.5)))\nm + geom_boxplot()\n# Error: position_dodge requires constant width\n```\n\n``` R\nqplot(year, budget, data = movies, geom = \"boxplot\", group = round_any(year, 10, floor))\n# Error: position_dodge requires constant width\n# In addition: Warning message:\n# Removed 53573 rows containing non-finite values (stat_boxplot). \n```\n Was the default position `identity`?\n\n```\ndf <- data.frame(x = rnorm(1000), y = rnorm(1000))\nggplot(df, aes(x, y, group = round_any(x, 0.5))) + geom_boxplot(position = \"identity\")\n```\n Actually you wrote this:\n\n>  # Add aesthetic mappings \n>  # Note that boxplots are automatically dodged when any aesthetic is \n>  # a factor \n\nin http://had.co.nz/ggplot2/geom_boxplot.html\n This is weird -- It looks like it's a problem with the way `round_any` gets called. I inserted `print(unique(data$x))` in `collide()`, just before it gives that error message.\n\n``` R\n> ggplot(movies, aes(y = votes, x = rating, group = round_any(rating, 0.5))) + geom_boxplot()\n [1] 1.1 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 9.9\nError: position_dodge requires constant width\n```\n\nEven the regular `round` function doesn't work:\n\n``` R\n> ggplot(movies, aes(y = votes, x = rating, group = round(rating))) + geom_boxplot()\n [1] 1.20 2.00 3.00 4.00 5.00 6.00 7.00 8.00 9.00 9.75\nError: position_dodge requires constant width\n```\n\nIf you do the rounding before feeding it to ggplot, it works fine:\n\n``` R\n> moviesrd <- transform(movies, rating = round_any(rating,.5))\n> ggplot(moviesrd, aes(y = votes, x = rating, group = rating)) + geom_boxplot()\n [1]  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0  7.5  8.0\n[16]  8.5  9.0  9.5 10.0\n```\n @wch \nthat is because `x` also changes after `transform`. try this:\n\n```\nmoviesrd <- transform(movies, rating2 = round_any(rating,.5))\nggplot(moviesrd, aes(y = votes, x = rating, group = rating2)) + geom_boxplot()\n```\n is this the same issue?\n\n```\n# this is ok\nqplot(clarity, depth, data = diamonds, geom = 'boxplot', fill = cut)\n\n# this is ok  \nqplot(clarity, depth, data = diamonds, geom = 'boxplot', fill = cut) +\n  coord_flip()\n\n# ??  \nqplot(depth, clarity, data = diamonds, geom = 'boxplot', fill = cut)  \n```\n Yup, it's the same issue.\n  This is only the tip of the iceberg as far as optimizing the drawing commands generated by ggplot2, but this is the first thing that I've found that ggplot can directly control (most of the garbage is grid's fault).\n\nThe set of positions at which minor gridlines are drawn is a superset of the positions at which major gridlines are drawn.  Since the major gridlines are drawn second, this has no effect on the _appearance_ of the plot -- it just adds extra, unnecessary draw operations to vector-device output.  As a blatant example, consider\n\n```\npdf(\"t.pdf\", colormodel=\"gray\")\nqplot(1, 1, geom=\"point\")\ndev.off()\n```\n\nThe generated PDF draw commands include (some unrelated junk trimmed to make the problem clearer):\n\n```\n0.949 G 0.53 w\n27.05 259.13 m 482.40 259.13 l S\n254.72 28.67 m 254.72 489.60 l S\n1.000 G 1.06 w\n27.05 259.13 m 482.40 259.13 l S\n254.72 28.67 m 254.72 489.60 l S\n```\n\nThe first half of that is completely unnecessary.\n\nI think fixing this would be as easy as having guide_grid() filter from x.minor and y.minor all entries that duplicated entries in x.major and y.major respectively.\n I'm not sure which is better:\n\n(1) the both major and minor grids are drawn (current implementation)\n(2) only the major grids are drawn if the minor and major grids are overlapped (@zackw's idea)\n(3) either major or minor grids are drawn depending of the width of grid line.\n\nI prefer the (1), since it will keeps things simple, while the cost of drawing is very low.\nFurthermore, users can do (2) by their hand.\n I really don't think that's the right call.\n\n\"Doing (2) by hand\" involves manually specifying all the grid line positions, whereas guide_grid can do it automatically in two lines:\n\n```\nx.minor <- setdiff(x.minor, x.major)\ny.minor <- setdiff(y.minor, y.major)\n```\n\nabove the `ggname()` call.  \n\nAny unnecessary drawing commands can potentially cause trouble, or at least confusion, if you need to postprocess the graphs manually.  Also, I think you are underestimating the redundancy of grid-generated vector graphics; maybe I shouldn't have trimmed out the \"unrelated junk\".  Anything ggplot can do to reduce the size of the generated PDF is worth doing.\n\n(3), however, would be catering to poor graphic design choices - when on earth would you want your minor lines to be thicker than your major lines?  ggplot has generally not been interested in doing that, so I don't see any need to start now.\n Right, that's what the code is doing now.  The problem is that you\nhave these lines that don't contribute anything to the drawing\n(because they're completely overdrawn by the major grid lines) but\nthey're still there to make extra work for everything downstream, and\nconfuse people when they try to edit the plots by hand.  I'm really\nmore concerned about the extra work; I've been doing plots of _huge_\ndata sets where the only way I can make the drawing time tolerable is\nturning nearly all the non-data ink off, which is not always what one\nwants.\n\nzw\n > I think that's reasonable, so I've flagged it for 0.9 and the change should be done in the next couple of days.\n\nThanks!\n\n> I'd like to hear more about the huge data sets you're plotting\n\nWill send email.\n  This example should include the range -8000 to 8000, but it only goes from about -4000 to 4000. This is enough to include the whiskers but not the outliers.\n\n``` R\ndat <- data.frame(x=1, y=c(-(1:20)^3, (1:20)^3) )\nggplot(dat, aes(x,y)) + geom_boxplot()\n```\n\nTest code:\n\n``` R\ntest_that(\"geom_boxplot range includes all outliers\", {\n  dat <- data.frame(x=1, y=c(-(1:20)^3, (1:20)^3) )\n  p <- ggplot_build(ggplot(dat, aes(x,y)) + geom_boxplot())\n\n  miny <- p$panel$ranges[[1]]$y.range[1]\n  maxy <- p$panel$ranges[[1]]$y.range[2]\n\n  expect_true(miny <= min(dat$y))\n  expect_true(maxy >= max(dat$y))\n})\n```\n As long as I inspected, the problem is that, in the case of `boxplot`, `ymin` and `ymax` indicate the limits of the box, while they indicates the limits of whole plot in the case of other geoms.\n\nI have done a quick fix. I will push the branch but probably there are more general way.\n Kohske, I have an alternative solution using ymin and ymax to represent the bounding box including outliers, and new values whiskermin and whiskermax to represent the ends of the whiskers. The first commit implements this solution.\n\nThere's a second commit, which changes the parameter names in external interface from ymin and ymax, to whiskermin and whiskermax, when users specify the dimensions of the box directly. I did this for consistency, but it might be undesirable because it could break existing user code. If this change is kept, perhaps there should be a note about deprecated variable names?\n\nSHA: a474508bafa150feaa739aac6e928be8708994f2\n @wch , as you mentioned, the backward compatibility is the reason why I put `ymin_final` etc in my fix. But probably your solution is better and more general.\n\nSo now, `{x|y}{min|max}` indicates the bbox of the geom, for any type of geoms.\nThis is very simple and clear rule and worth adopting even if it will lose a subtle backward compatibility.\n It looks like changing the external interface to use `whisker{min|max}` causes some problems with calculating the y range. With that version, I get this error:\n\n``` R\nggplot(NULL, aes(x = 1, whiskermin = 0, lower = 25, middle = 50, upper = 75, whiskermax = 100)) + \n  geom_boxplot(stat=\"identity\")\n#Error in UseMethod(\"scale_dimension\") : \n#  no applicable method for 'scale_dimension' applied to an object of class \"NULL\"\n```\n\nEven after making changes in the `reparameterise()` function to define `y{min|max}` from the `whisker{min|max}` values, I still get that error. Here's what I added to `reparameterise`:\n\n``` R\n    if(is.null(df$ymin))  df$ymin <- df$whiskermin\n    if(is.null(df$ymax))  df$ymax <- df$whiskermax\n```\n\nHowever, adding in `ymin` and `ymax` to the original function call makes it work.\n\n``` R\nggplot(NULL, aes(x = 1, whiskermin = 0, lower = 25, middle = 50, upper = 75, whiskermax = 100, ymin=0, ymax=100)) +\n  geom_boxplot(stat=\"identity\")\n```\n\nI'm not sure how make the y scale calculation work here... But it won't be necessary if the external interface stays with `ymin` and `ymax`.\n @wch that is because scale_y cannot be generated automatically.\nsee `aes_to_scale` in `aes.r`.\nIf one of aes is included in the list, scale for `y` will be generated.\nBut in the above case, there is no aes that is associated with `y`.\n\nSo, quick fix is to change the line:\n`var[var %in% c(\"y\", \"ymin\", \"ymax\", \"yend\", \"yintercept\", \"whiskermin\", \"whiskermax\")] <- \"y\"`\n\nI bet that there is a better way.\nBut to that end, a large part of building plot need to be rewritten.\nProbably that is what @Hadley is going to do in the `layer` package.\n    If possible, I'd like to make a suggestion that the spatial fortify code be modified to not be dependent on gpclib due to license restrictions on that package.  \n\nFor example, if I understand the code correctly, the current `fortify.SpatialPolygonsDataFrame` function requires that gpclib and maptools are loaded before it calls `unionSpatialPolygons` in the maptools package, but I believe the maptools package now supports using either gpclib or rgeos.   \n Yes, I agree and patches are welcome ;)\n  an error messages showed up when try\n\n```\ninstall_github(\"ggplot2\", branch=\"develop\")\n```\n\n```\nError : /private/var/folders/lt/wqxrd2_d4fb8x9jd6yy3g1kh0000gn/T/Rtmp6vFwoX/R.INSTALL10b170156f01/ggplot2/man/annotation_map.Rd: Sections \\title, and \\name must exist and be unique in Rd files\nERROR: installing Rd objects failed for package \u2018ggplot2\u2019\n```\n  When ggsave() writes over an existing file, it doesn't seem to update the timestamp.\n\nI usually am looking at timestamps to see outputs being updated.\n\nIs this R or gg?\n\nAndy\n Thanks for clarifying.\n  I just pulled the recent changes and noticed that there's a new directory named \"r\" in addition to the \"R\" directory. Is this expected? It seems to cause ints\n\nAlso, I tried installing it on my computer which is running R 2.13 (on Ubuntu Linux 11.10), but it says is requires R 2.14. Is 2.14 really necessary? It was working fine under 2.13 with previous versions.\n  In the development version, each label on the x axis seems to be centered relative to the longest label, instead of its own length.\n\nExample:\n\n```\ndat <- data.frame(x=c(\"bar\", \"foo\", \"long label\"), y=1:3)\nggplot(dat, aes(x=x, y=y)) + geom_point()\n```\n\nHere's my attempt at a test case. It looks like there are extra leading spaces added to each short label.\n\n```\nlibrary(testthat)\np <- ggplot_build(ggplot(dat, aes(x=x, y=y)) + geom_point())\nexpect_that(p$panel$ranges[[1]]$x.labels[1], is_identical_to(\"bar\"))\nexpect_that(p$panel$ranges[[1]]$x.labels[2], is_identical_to(\"foo\"))\n```\n\nIf there are better ways to write test cases, please let me know.\n ```\ntest_that(\"x tick labels don't have extra padding\", {\n    require(stringr)\n\n    dat <- data.frame(x=c(\"bar\", \"foo\", \"long label\"), y=1:3)    \n    p <- ggplot_build(ggplot(dat, aes(x=x, y=y)) + geom_point())\n\n    xlabs <- p$panel$ranges[[1]]$x.labels\n    expect_equal(xlabs, str_trim(xlabs))\n\n})\n```\n This should be a `formatC` problem in `scale_labels.discrete`.\nEasy to fix. Should I?\nActually it has been fixed in my local machine.\n  With `scale_colour_manual`, it's not possible to change the order that the `values` are specified. This works in the release version, but it doesn't work in the devel version. This may also be true for other scales, but I haven't tested them.\n\nThese examples are taken from the the help page. The first graph here looks the same in both versions, but the second one has different colors in the release and devel version: \n\n```\np <- qplot(mpg, wt, data = mtcars, colour = factor(cyl))\n\n# Same in both versions\np + scale_colour_manual(values = c(\"red\",\"blue\", \"green\"))\n\n# Different in devel version - labeled elements have no effect\np + scale_colour_manual(values = c(\"8\" = \"red\",\"4\" = \"blue\",\"6\" = \"green\"))\n```\n\nIn the devel version, 4 is red, 6 is blue, and 8 is green.\n\nSide note: It's unclear to me why `labels` are matched to `breaks` by position, but `values` are matched to `breaks` by naming the vector elements. This code reverses the order of the legend. If `values` were matched by position, the points for 8 cylinders, in the upper left, would be red with this code, but they come out green, in both the release and devel version.\n\n```\np + scale_colour_manual(breaks = c(8,6,4), \n                        labels = c(\"Eight\",\"Six\",\"Four\"),\n                        values = c(\"red\",\"blue\",\"green\"))\n\n```\n Sounds good. I'll try to do that for these bugs.\n Test code for named values:\n\n``` R\ntest_that(\"Values can be specified by name with scale_colour_manual\", {\n    p <- qplot(mpg, wt, data = mtcars, colour = factor(cyl))\n\n    p1 <- ggplot_build(p + scale_colour_manual(values = c(\"8\" = \"red\",\"4\" = \"blue\",\"6\" = \"green\")))\n    p1dat <- p1$data[[1]]\n\n    expect_that( all(p1dat$colour[p1dat$group==3] == \"red\"), is_true())\n    expect_that( all(p1dat$colour[p1dat$group==2] == \"green\"), is_true())\n    expect_that( all(p1dat$colour[p1dat$group==1] == \"blue\"), is_true())\n})\n```\n\nThis tests for positional values. Note that it's slightly different from the example in the original post. For consistency, I changed the order of the numbers from (8,6,4) to (8,4,6), to match the other test:\n\n``` R\ntest_that(\"Values can be specified by position with scale_colour_manual\", {\n    p2 <- ggplot_build(p + scale_colour_manual(breaks = c(8,4,6), \n                               labels = c(\"Eight\",\"Four\",\"Six\"),\n                               values = c(\"red\",\"blue\",\"green\")) )\n    p2dat <- p2$data[[1]]\n\n    expect_that( all(p2dat$colour[p2dat$group==3] == \"red\"), is_true())\n    expect_that( all(p2dat$colour[p2dat$group==2] == \"green\"), is_true())\n    expect_that( all(p2dat$colour[p2dat$group==1] == \"blue\"), is_true())\n})\n```\n I have figured out that this bug is very complicated.\n\nPerhaps, this bug comes from `scale_map.discrete`, e.g.,\n\n```\n> s <- scale_colour_manual(values = c(\"8\" = \"red\",\"4\" = \"blue\",\"6\" = \"green\"))\n> scale_train(s, paste(c(4,6,8)))\n> scale_map(s, paste(c(4,6,8)))\n[1] \"red\"   \"blue\"  \"green\"\n```\n\nProbably I can fix, but I'm not sure the specification of `scale_map.discrete`.\nShould `scale_map.discrete` preserve the order of its argument `x`, right?\n @hadley and @koshke - I don't think this issue should be closed. Our testing coverage isn't complete. Consider:\n\n``` r\ntest_that(\"values are matched when scale contains more unique values \n           than are in the data\", {\n    s <- scale_colour_manual(\n           values = c(\"8\"  = \"c\",\n                     \"4\"  = \"a\",\n                     \"22\" = \"d\",\n                     \"6\"  = \"b\"\n                         )\n            )\n     scale_train(s, c(\"4\", \"6\", \"8\"))\n     expect_equal(scale_map(s, c(\"4\", \"6\", \"8\")), c(\"a\", \"b\", \"c\"))\n})\n```\n\nThis test fails. I had [a hunch](https://github.com/hadley/ggplot2/issues/384#issuecomment-3862155) it would (hadley/ggplot2#384). On closer inspection, we can see why:\n\n``` r\ns <- ggplot2:::scale_colour_manual(\n  values = c(\"8\" = \"c\",\n            \"4\" = \"a\",\n            \"22\" = \"d\",\n            \"6\" = \"b\"\n            )\n  )\n(ggplot2:::scale_train(s, c(\"4\", \"6\", \"8\")))\n\n# Should be equal to \"a\" \"b\" \"c\", but it clearly isn't\n(scale_map(s, c(\"4\", \"6\", \"8\")))\n```\n @hadley - I think it works now because [winston said he fixed it](https://github.com/hadley/ggplot2/issues/384#issuecomment-3862879) in wch/scales@5c74062\n\nHe just must not have had a chance to close this issue. Sorry!\n Actually, I think it turned out that the change to scales was unnecessary -- hadley's fix (in ggplot2) took care of the problem.\n  This is an issue with the development branch. In the release version, when you use a log axis, the tick labels will show in powers of base (e.g., e or 10) when you use the appropriate scale. In the development version, the labels show as decimal numbers.\n\nIf you run this with the release version, you'll see that the x axis labels are e^0, e^2, e^4 and so on. But if you run it in the devel version, you'll see decimal values like 0.367, 7.389, and so on.\n\n```\nset.seed(123)\ndat <- data.frame(x=exp(rnorm(100, mean=4, sd=2)), y=rnorm(100))\n\nggplot(dat, aes(x=x, y=y)) + geom_point() + scale_x_continuous(trans=\"log\")\n```\n\nThe same happens for `scale_x_log10`, which is the only specially-named log scale in devel version. It also shows values in decimal (10, 100, 1000, etc.) instead of powers of 10 (10^1, 10^2, 10^3, etc.).\n\n```\nggplot(dat, aes(x=x, y=y)) + geom_point() + scale_x_log10()\n```\n  This is with the development branch. With multi-line legend labels, it appears that the first line of each item is centered relative to the width of _widest_ first line. \n\nExample:\n\n```\ndf <- data.frame(x=1:2, y=1:2, g=c(\"Some\\ntext\",\"More more more\\ntext\"))\n\nggplot(data=df, aes(x,y,fill=g)) + geom_point()\n```\n\nThe problem doesn't seem to happen with the release version.\n  There's a `floor_date` in `ggplot2`, which hides the `floor_date` in `lubridate`, and in an incompatible way:\n\n`> ft.local[1:3]\n[1] \"2008-09-14 08:00:00 GMT+4\" \"2008-09-14 09:00:00 GMT+4\" \"2008-09-14 10:00:00 GMT+4\"\n]> floor_date(ft.local[1:3], \"month\")\n[1] \"2008-09-01\" \"2008-09-01\" \"2008-09-01\"\n]> floor_date(ft.local[1:3], \"day\")\n[1] \"6032-02-05\" \"6041-12-14\" \"6051-10-23\"`\n\nI recommend nuking the `floor_date` (and `ceiling_date`) from `ggplot2`.  Add a dependency on `lubridate` if necessary.\n Aha, great, `floor_date` is now internal?  That should solve the issue, but I'm curious why not depend on `lubridate` when similar functionality is provided there, and better?\n  This might be two bugs.\n\nI was trying to add line segments to a graph with log scales, but instead of putting it at my specified coordinates, it puts them at 10 to the power of the coordinate. For example, if I specify x=1 and xend=3, it draws a line from x=10 to xend=1000.\n\nHere's an example using a dataset from the MASS library:\n\n```\nlibrary(MASS)\n\n# Diagonal line\nggplot(Animals, aes(x=body, y=brain)) +\n    geom_point() +\n    geom_segment(x=1, xend=3, y=1, yend=3) +\n    scale_x_log10() + scale_y_log10()\n```\n\nIt also seems to me that the expected behavior of geom_segment in this case isn't clearly specified: should it be visually straight (useful for annotations), or should it be \"numerically straight\" and thus visually curved?\n\nPotential bug 2: I tried creating my own minimal data set to illustrate the problem, but I can't even get it to draw the line segment! I tried figuring out what the difference is between this data set and the one above, but I made no progress.\n\n```\nset.seed(101)\ndat <- data.frame(x=10^rnorm(20,2,1), y=10^rnorm(20,2,1))\n\n# Works\nggplot(dat, aes(x=x, y=y)) +\n    geom_point() + \n    scale_x_log10() +\n    scale_y_log10() \n\n# Doesn't work after adding segment\nggplot(dat, aes(x=x, y=y)) +\n    geom_point() + \n    geom_segment(x=1, xend=3, y=1, yend=3) +\n    scale_x_log10() +\n    scale_y_log10() \n\n#Error in data.frame(evaled, PANEL = data$PANEL) : \n#  arguments imply differing number of rows: 0, 20\n```\n Oddly, if I put the coordinates in a data frame, give that data frame to geom_segment, and use aes() to get the coordinates, it uses the correct numerical coordinates.\n\nThis is the same as the previous, with the addition of a blue segment that draws from the data frame `myline`.\n\n```\nmyline <- data.frame(x=1, xend=100, y=1, yend=10)\n\nggplot(Animals, aes(x=body, y=brain)) +\n    geom_point() +\n    geom_segment(x=1, xend=3, y=1, yend=3) +\n    geom_segment(data=myline, aes(x=x, xend=xend, y=y, yend=yend), colour=\"blue\") +\n    scale_x_log10() + scale_y_log10()\n```\n\nThe line is straight in visual space, which suits my purposes, but this might be undesirable in some cases.\n  This is with the development branch. I just tried making a stacked area graph with a log y scale, and found that the plotted values were way, way off. It was only after I tried it that I realized that stacking with a log scale either makes no sense, or will be very misleading -- though I personally can't rule out the possibility that _some_ stacked log-scale graph could make sense.\n\nAt any rate, it seems to me that ggplot should (A) give a warning or error when you attempt this, and (B) not make a graph with incorrect values.\n\nIn this example, I have data that grows exponentially. The largest summed value is 4e+10. It shows fine with a linear-scale. When I add the log scale, the growth is a straight line, which is correct, but the y values are wrong -- it shows the largest value is about 1e+40. It looks like the lowest piece of the stack is scaled correctly, then the subsequent pieces are drawn with the same scaling, instead of being scaled properly for their positions in the stack.\n\n```\ndat <- data.frame(group=rep(LETTERS[1:4], each=10),\n                  x=rep(1:10,4),\n                  y=rep(10^(1:10),4))\n\n# Linear scale\nggplot(dat, aes(x=x, y=y, fill=group)) + geom_area()\n\n# Log scale\nggplot(dat, aes(x=x, y=y, fill=group)) + geom_area() + scale_y_log10()\n```\n\nThe same happens with geom_bar:\n\n```\nggplot(dat, aes(x=factor(x), y=y, fill=group)) + geom_bar()\n\nggplot(dat, aes(x=factor(x), y=y, fill=group)) + geom_bar() + scale_y_log10()\n```\n  In the development branch, the median lines don't appear in geom_boxplot when the following are both true:\n- the y range is large\n- coord_flip() is used\n\nThis works:\n\n```\ndat <- data.frame(x=sample(LETTERS[1:4],40,replace=TRUE), y=rnorm(40))\nggplot(dat, aes(x=x, y=y, fill=x)) +\n  geom_boxplot() + coord_flip()\n```\n\nBut if the y values are scaled up by 100, the medians don't appear:\n\n```\ndat$y <- dat$y * 100\nggplot(dat, aes(x=x, y=y, fill=x)) +\n  geom_boxplot() + coord_flip()\n```\n I found where the bug occurs, but at the moment I have no idea how to fix it...\nMaybe coord-flip is too complicated.\n A workaround is redefine\n\n```\nis.linear.flip <- function(coord) TRUE\n```\n\nShould flip be linear coordinate?\n  I'm not totally sure if this is a bug, or if it's expected behavior.\n\nSuppose you define the aes mapping ymin=y+ci, and then add another geom that uses a second data frame which doesn't have a \"ci\" column. Then it fails, even if ymin is not used by that geom. This is shown in the example here:\n\n```\n# Primary data source\nd1 <- data.frame(x=1:10, y=rnorm(10), ci=(1:10)/10)\n\n# Add some secondary data\nd2 <- data.frame(x=2*(1:5), y=rnorm(5))\n\n# This fails\nggplot(d1, aes(x=x, y=y, ymin=y-ci, ymax=y+ci)) + \n    geom_ribbon(fill=\"grey80\") +\n    geom_line() +\n    geom_line(data=d2, colour=\"red\")\n\n# Error in eval(expr, envir, enclos) : object 'ci' not found\n```\n\nA workaround is to move the ymin and ymax inside of geom_ribbon:\n\n```\nggplot(d1, aes(x=x, y=y)) + \n    geom_ribbon(aes(ymin=y-ci, ymax=y+ci), fill=\"grey80\") +\n    geom_line() +\n    geom_line(data=d2, colour=\"red\")\n```\n\nThis isn't that difficult in this example, but in practice it can be kind of tedious and require lots of redundant code. I've made some complicated graphs with a lot of text annotations and I've to specify these mappings over and over.\n  alpha support may be somewhat incoherent.\nalpha does not affect the lines of geom_rect, but it affects the lines of geom_line.\n Ok, I get the principle. So I'will fix this patch. \n  fix for issue #251\n  This is with the development branch. Here's an example:\n\n```\ndat <- data.frame(x=sample(letters[1:3],20,replace=TRUE), y=rnorm(20))\n\nggplot(dat, aes(x=x, y=y)) + geom_boxplot(alpha=.3)\n```\n see #254\n That makes sense to me. I'm not sure if you're responding to my bug report or to Kohske's comments... at the time of this bug report, alpha just didn't work at all.\n  I'm trying to make a Cleveland dot plot, but `geom_linerange` doesn't seem to show up when all of these are true:\n- `ymax` is small, < ~.25\n- the x-axis is a factor\n- `coord_flip` is used\n\nThis is with the development branch.\n\nThese three graphs illustrate the problem.\n\nFactor on x-axis: OK\n\n```\ndat <- data.frame(xval=factor((1:25)/50), yval=(1:25)/50)\nggplot(dat, aes(x=xval, y=yval)) + geom_point() +\n    geom_linerange(aes(ymax=yval), ymin=0)\n```\n\nFactor on x-axis with coord_flip():  not OK. `geom_linerange` doesn't work for less than approximately .25 \n\n```\ndat <- data.frame(xval=factor((1:25)/50), yval=(1:25)/50)\nggplot(dat, aes(x=xval, y=yval)) + geom_point() +\n    geom_linerange(aes(ymax=yval), ymin=0) +\n    coord_flip()\n```\n\nContinuous x-axis with coord_flip(): OK\n\n```\ndat <- data.frame(xval=(1:25)/50, yval=(1:25)/50)\nggplot(dat, aes(x=xval, y=yval)) + geom_point() +\n    geom_linerange(aes(ymax=yval), ymin=0) +\n    coord_flip()\n```\n Also, the same thing happens with  `geom_segment`:\n\n```\ndat <- data.frame(xval=factor((1:25)/50), yval=(1:25)/50)\nggplot(dat, aes(x=xval, xend=xval, y=yval, yend=0)) + geom_point() +\n    geom_segment() +\n    coord_flip()\n```\n\nOddly, it seems to happen only for lines that run parallel to the (horizontal) y axis. Notice that the only missing line in this graph is the perfectly horizontal one:\n\n```\ndat <- data.frame(xval=factor((1:25)/50), yval=(1:25)/50)\nggplot(dat, aes(x=xval, xend=\"0.2\", y=yval, yend=.1)) + geom_point() +\n    geom_segment() +\n    coord_flip()\n```\n One more piece of information: the minimum visible line length seems to be related to the number of items on the x axis. With 50 items, the minimum length is around 0.5.\n\n```\ndat <- data.frame(xval=factor((1:50)/50), yval=(1:50)/50)\nggplot(dat, aes(x=xval, y=yval)) + geom_point() +\n    geom_linerange(aes(ymax=yval), ymin=0) +\n    coord_flip()\n```\n  Arguments of aes are apparently evaluated in global environment (!!!) not local one:\n\n``` R\ndf <- data.frame(a=1:10,b=10:1)\n\nn<-3\n\nn<-3; local({n<-2; ggplot(df) + geom_line(aes(x=a,y=b,group=cut(a,n)))})\n```\n\nHas **_3**_ segments (global value of n), when it should have 2 (local value of n).\n Thank you for your comment.  But the case I described is not like what you\nshow below.\n\nMy ggplot example is:\n\n``` R\nn<-3; local({n<-2; ggplot(df) + geom_line(aes(x=a,y=b,group=cut(a,n)))})\n```\n\nThe following gives the same result:\n\n``` R\nn<-3; local({n<-2; print(ggplot(df) +\ngeom_line(aes(x=a,y=b,group=cut(a,n))))})\n```\n\nIn these cases, ggplot is using the value n=3 (global), not n=2 (local).\nThe equivalent outside of ggplot is something like:\n\n``` R\nn<-3; local({n<-2; print(n)})\n```\n\nor\n\n``` R\ndf <- data.frame(a=1:5,b=(2:6)^3)\nn<- 3; local({n<-2;lm(b~poly(a,n,raw=T),df)})\n```\n\nIn these cases, the local value of n, 2, is used, not the global value, 3.\n              -s\n I don't follow your explanation.  In the following case:\n\nn<-3; local({n<-2; ggplot(df) + geom_line(aes(x=a,y=b,group=cut(a,n)))})\n\nWhy would the 'n' in 'cut(a,n)' look at the global environment?  That is just a violation of the basic concept of scope in R.  Compare the 'lm' case I showed:\n\n```\n n<- 3; local({n<-2;lm(b~poly(a,n,raw=T),df)})\n```\n\nThe ggplot case, like the lm case, should be evaluated in the following nested environments:\n\n  Global environment (where n=3)\n      Local environment (where n=2)\n          df environment (where n is not defined, so the next environment up should be used)\n\nI will be happy to work on a solution for this.  Please don't close it as fixed.\n By default, the evaluation environment is set in https://github.com/hadley/ggplot2/blob/master/R/plot.r#L25\nirrespective of where the plot is defined or called.\nso, if the variable is missing in the data.frame, then the global env is inspected.\n\nIf someone wants to change this behavior, try:\n\n```\nm <- 3\ndf <- data.frame(a=1:10,b=10:1)\nlocal({\n    m <- 2; \n    ggplot(df, environment = new.env()) + geom_line(aes(x=a, y=b, group=cut(a, m)))\n    }\n    )\n```\n\nOf course, it is possible to change the default behavior so that ggplot also inspect the local environment where the plot is defined.\nBut it is not a simple problem which policy is better, since the environment of plot and environment of each layer could be different.\n Or, maybe environment of `aes()` is better.\nConsider this:\n\n```\nm <- -1\nn <- -2\n\nf1 <- function() {\n    m <- 1\n    geom_point(aes(x, y+m), color = \"red\")\n}\n\nf2 <- function() {\n    n <- 2\n    geom_point(aes(x, y+n), color = \"blue\")\n}\n\nlay1 <- f1()\nlay2 <- f2()\n\ndf <- data.frame(x=1:3, y=1:3)\nggplot(df) + lay1 + lay2 # m = -1, n = -2, i.e., global ones.\n```\n  > x <- as.factor(c(1,2,NA,3,4))\n> qplot(x)\n> Error in if (min(r) < min(b)) b <- c(b[1] - bd, b) : \n>   missing value where TRUE/FALSE needed\n  ``` R\ndf<-data.frame(x=factor(sample(letters,1000,replace=TRUE)),y=factor(sample(1:5,1000,replace=TRUE)))\n\n# Factor levels 'a' and '1' are not shown\nggplot(df,aes(x,y))+stat_bin2d()\n\n# This is the correct plot\nggplot(ddply(df,.(x,y),summarize,n=length(x)),aes(x,y,fill=n))+geom_tile()\n\n# Note that stat_bin does the right thing\nggplot(df,aes(x))+stat_bin()\n\n```\n\nPossibly related to issue 178? https://github.com/hadley/ggplot2/issues/178\n  ```\nlibrary(ggplot2)\nset.seed(123456)\ndataset <- expand.grid(A = rnorm(3, sd = 1), B = rnorm(4, mean = 2, sd = 0.5), n = seq_len(20))\ndataset$Value <- with(dataset, rlnorm(nrow(dataset), meanlog = A, sdlog = B))\n\n#works fine\nggplot(dataset, aes(x = LETTERS[factor(A)], y = Value)) + geom_boxplot() + facet_wrap(~B)\n#coord_trans messed up the x axis\nggplot(dataset, aes(x = LETTERS[factor(A)], y = Value)) + geom_boxplot() + facet_wrap(~B) + coord_trans(y = \"log10\")\n#works fine\nggplot(dataset, aes(x = LETTERS[factor(A)], y = Value)) + geom_boxplot() + facet_wrap(~B) + scale_y_log10()\n```\n\nsessionInfo()\nR version 2.13.1 (2011-07-08)\nPlatform: i386-pc-mingw32/i386 (32-bit)\n\nlocale:\n[1] LC_COLLATE=Dutch_Belgium.1252  LC_CTYPE=Dutch_Belgium.1252  \n[3] LC_MONETARY=Dutch_Belgium.1252 LC_NUMERIC=C  \n[5] LC_TIME=Dutch_Belgium.1252    \n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] ggplot2_0.8.9 proto_0.3-9.2 reshape_0.8.4 plyr_1.6      rj_0.5.5-4   \n\nloaded via a namespace (and not attached):\n[1] tools_2.13.1\n Is that the same as #75? \n Yes, the only difference is that the continuous and discrete axes are switched.\n  It would be nice if geom_xxx(), stat_xxx() could support raster images (grid.raster() is in R since 2.11),\nso that if geom_xxx(..., raster = TRUE) the drawing is done on raster image.\nIt would tremendously simplify the creation of size and speed-optimized plots that contains huge amounts of primitives (point plots etc).\n This only matters for `geom_tile`, right?\n Not only. For example, I have geom_point() plots with x*10^6 of points that differ in size and color. Currently I have to rasterize these points in Illustrator to have reasonable size and rendering speed.\n Sounds very interesting, but probably it is not easy to implement. \n\nAn easy workaround is to export the graphics in raster image file such as png, jpeg, bmp, etc. \nBut in this case, axis, guides, labels, and all other elements will be exported as raster image.\n Hmmm, I'd recommend using something other than geom_point for n = 10^6.  There's no easy way to rasterise displays in general in R.\n @hadley But that's what [grid.raster()](http://stat.ethz.ch/R-manual/R-devel/library/grid/html/grid.raster.html) should be about -- to facilitate selective rasterization in R. IIUC\n grid.raster _renders_ rasters.  It doesn't generate them - i.e. there's no way to turn a scatterplot into a raster.  Turning a tile plot into a raster is relatively simple, because tiles are basically equivalent to pixels.\n Oh I see. I just though that 'coercion' of any grid object to raster is already there. So there is no way to implement as.raster() by internally drawing vector objects to some temporary raster surface?\n grid.cap kind of does that, but it's suboptimal in many ways for this purpose. \n R 2.14 has been released recently and it provides the new function dev.capture().\nI wonder if it's easier now to implement the requested functionality.\n  A useful feature would be to stack elements horizontally or vertically, if they share the same x and y values.\n\nHere's the file for it: https://gist.github.com/1217836\n  ## Situation\n\nI want to plot a couple of dates over a timespan of multiple years. For each year only quarters should be shown. While doing so I noticed, that `scale_x_date` misaligns dates.\n## Example Code\n\n```\nx = c(as.Date(ISOdate(2005, 10, 1)), as.Date(ISOdate(2008, 01, 1)), as.Date(ISOdate(2011, 04, 1)))\ny = c(10, 1000, 100)\ndata1 = data.frame(x,y)\np <- ggplot(data1) + aes(x=x, y=y) + geom_line()\n```\n\nUp until now, all is good. There are three points plotted at the correct dates: 4Q/2005, 1Q/2008 and 2Q/2011.\n\n```\np <- p + scale_x_date(major=\"12 months\", minor=\"3 months\", format=\"%Y\")\n```\n\nAfter adding a `scale_x_date` its broken. The diagram show dates at 1Q/2005, 2Q/2007 and 3Q/2010. Looks like it's off 3 quarters each. Any ideas how to fix this?\n Hi\n\nThe majour breaks represent October, since the lower limit of your data is 2005/10/1.\nYou can fix by specifying the limits manually:\n\n```\np <- p + scale_x_date(major=\"12 months\", minor=\"3 months\", format=\"%Y\", limits = as.Date(c(\"2005-1-1\", \"2012-1-1\")))\n```\n This behavior seems to be confusing. Maybe it is better to set, by default, wisely the majour breaks to Jan. 1st of the year, 1st of the month or 0:00AM of the day.\n Setting the limits manually works. But this is only a workaround, because with this you have to know for every plot, what your min and you max data is!\n It is not difficult to automatical-manually set the limits.\n\n```\np <- p + scale_x_date(major=\"12 months\", minor=\"3 months\", format=\"%Y\", \n  limits = c(floor_date(min(data1$x), \"year\"), ceiling_date(max(data1$x), \"year\")))\n```\n\nbut I suggest it is better if this is default behavior.\n Does scale in dev version do any better? Probably need origin parameter in breaks. \n The dev version of scale does not support \n1) minor break specification\n2) interval specification of major and minor breaks in date (and datetime) scale\n\nAs for 1), need to modify scale_breaks_minor function. probably easy.\nAs for 2), conversion from interval (e.g., \"3 months\") to actual value (e.g., \"Aug. 2011\") is necessary at any timing, probably either in `scale_x_date` or in `scale_breaks.continuous`.\n @kohske, as for 2, I thought major breaks intervals were now set with the `breaks` argument like `breaks = date_breaks(\"3 months\")` (see example in https://github.com/hadley/ggplot2/blob/develop/R/scale-date.r#L21).\n @BrianDiggs I got it. thanks.\n This commit will support again the ability to specify minor breaks: https://github.com/kohske/ggplot2/commit/1e2f6ab44d325f862bd8b9fb3d70514ce8e0115e\n\n1) minor breaks can be set by value or function\n2) no minor breaks for discrete scale\n3) no grid lines are drawn when unnecessary\n  If all the values in the input `x` are the same (i.e. if `all(diff(x) == 0))` then percent returns `NaN`.  For example\n\n```\npercent(100)             #\"NaN%\"\npercent(rep.int(1, 3))   #\"NaN%\" \"NaN%\" \"NaN%\"\n```\n\nThe problem seems to be that in this case `precision(x)` returns 0, which then causes `round_any` to calculate `Inf * 0`.\n\nA possible fix is to change the definition of percent to be\n\n```\npercent <- function(x) \n{\n  x <- round_any(x, max(1, precision(x))/10)\n  paste(comma(x * 100), \"%\", sep = \"\")\n}\n```\n  This is to supersede Pull Request #228.  It is an implementation of autoplot which uses proper roxygen documentation.  The code for the functions is the same.  It also includes the roxygenized version of the documentation, and the additions to NAMESPACE and DESCRIPTION.\n Brian, would you mind making those few changes I suggested so I can pull?  Thanks!\n Sorry, was on vacation and working from home for a few days. I don't have a full development environment set up at home, so didn't want to try and make the changes there.  I've added a commit that has the requested changes and another.\n Great - thanks Brian.  Will hopefully pull in the next week or so.\n Tried rebasing the commit and just messed things up more.  Closing this pull request and opening a new one.\n  Which should be a function, defaulting to place a minor break evenly (on the original scale) between major ticks.  Like breaks and labels, should also accept fixed values.\n  ```\nCategory <- as.factor(1:5)\nScore <- runif(5)\nDensity <- runif(5)\ndframe <- data.frame(Category, Score, Density)\nggplot(dframe, aes(Category, Score)) + \n  geom_point(aes(size=1), guide = \"legend\", colour = \"white\") +\n  geom_point(aes(size=Density))\n```\n Probably this is a kind of special case and will not be easy to fix.\nMaybe need reconsideration of overlapping legends for multiple layers.\n\nAlso, could you please look at the comments in guide-legend.r around ll.195-.\nhttps://github.com/hadley/ggplot2/blob/master/R/guide-legend.r#L195\n\nI think it is better to reconstructing than patching for this problem.\nWhat do you think?\n Yes, the red dots should all be the same size in the legend.\n It is really difficult, or maybe impossible, to fix this unless we largely rewrite scale system.\nYou can find some notes here: https://github.com/hadley/ggplot2/blob/master/R/guide-legend.r#L234\n This might be a better example:\n\n``` R\nggplot(mtcars, aes(disp, mpg)) +\n  geom_point(size = 5, guide = \"legend\") + \n  geom_point(aes(colour = factor(cyl), shape = factor(cyl)), size = 3)\n```\n\nit should be possible to force the first layer to appear in the legend even though it doesn't map any variables to values.  Previously, this worked by overriding the default detection for whether or not a layer needed a legend, and then the normal legend creation code just worked.\n Well it does work:\n\n``` R\nggplot(mtcars, aes(disp, mpg)) +\n  geom_point(size = 5, show_guide = TRUE) + \n  geom_point(aes(colour = factor(cyl), shape = factor(cyl)), size = 3)\n```\n  see: \nhttps://github.com/hadley/ggplot2/commit/66a717096734b488ee9b779352992ac07eff99d4#commitcomment-521858\n  ```\nqplot(hwy, reorder(model, hwy), data = mpg) + \n  facet_grid(manufacturer ~ ., scales = \"free\", space = \"free\") + \n  opts(strip.text.y = theme_text())\n```\n `space=\"free\"` is not necessary to create this problem.  Also, the problem is present on the horizontal axis if the labels are rotated:\n\n``` r\nqplot(reorder(model, hwy), hwy, data=mpg) +\n    facet_grid(. ~ manufacturer, scales=\"free\") +\n    opts(axis.text.x = theme_text(angle=90))\n\n```\n\nIt looks like the box for the labels of each facet is being drawn centered in the space which is wide enough for the widest set of labels.  However, each box is only wide enough for its own widest label.  The tick marks are then put just to the right of this box.  Any `hjust` is also being done with respect to this box.  It is especially obvious with\n\n``` r\nqplot(hwy, reorder(model, hwy), data = mpg) + \n  facet_grid(manufacturer ~ ., scales = \"free\", space=\"free\") + \n  opts(axis.text.y = theme_text(hjust=0))\nqplot(hwy, reorder(model, hwy), data = mpg) + \n  facet_grid(manufacturer ~ ., scales = \"free\", space=\"free\") + \n  opts(axis.text.y = theme_text(hjust=1))\n```\n\nIt is only noticeable with `scales=\"free\"` (or the appropriate `\"free_x\"` or `\"free_y\"`) because otherwise all facets have the same widest label (since they all have the same set of labels).\n wow, the patch commit in folk repository is automatically embedded in this issue thread. \n\nAnyway, probably this bug is fixed, which is tentative (but will be included in 0.9). See the commit.\nI'm planning to rewrite guide-axis in more extendable way in the future version.\n  # Description\n\nThe displayed plot can vary depending on the setting of the global option `stringsAsFactors`.\n# Reproducible code\n\n``` r\n(sAF <- getOption(\"stringsAsFactors\"))\n\noptions(stringsAsFactors = FALSE)\ndat1 <- data.frame(x=letters[5:1],y=runif(5))\nggplot(dat1,aes(x=as.character(x),y=y)) + geom_point()\n\noptions(stringsAsFactors = TRUE)\ndat1 <- data.frame(x=letters[5:1],y=runif(5))\nggplot(dat1,aes(x=as.character(x),y=y)) + geom_point()\n\noptions(stringsAsFactors = sAF)\n```\n# Expected results\n\nThe two graphs should be identical.  The `as.character` in the aesthetic should remove any issues whether `x` in `dat1` is a character or factor.\n# Actual results\n\nThe former has the x axis ordered e -> a, the latter a -> e.\n# thattat test code\n\n``` r\ntest_that(\"stringsAsFactors\", {\n\n    sAF <- getOption(\"stringsAsFactors\")\n    dat.character <- data.frame(x=letters[5:1], y=1:5, stringsAsFactors=FALSE)\n    dat.factor <- data.frame(x=letters[5:1], y=1:5, stringsAsFactors=TRUE)\n\n    options(stringsAsFactors = TRUE)\n    p.character.TRUE <- ggplot(dat.character, aes(x=x,y=y)) + geom_point()\n    build.character.TRUE <- ggplot_build(p.character.TRUE)\n    p.factor.TRUE <- ggplot(dat.factor, aes(x=x,y=y)) + geom_point()\n    build.factor.TRUE <- ggplot_build(p.factor.TRUE)\n\n    options(stringsAsFactors = FALSE)\n    p.character.FALSE <- ggplot(dat.character, aes(x=x,y=y)) + geom_point()\n    build.character.FALSE <- ggplot_build(p.character.FALSE)\n    p.factor.FALSE <- ggplot(dat.factor, aes(x=x,y=y)) + geom_point()\n    build.factor.FALSE <- ggplot_build(p.factor.FALSE)\n\n    options(stringsAsFactors = sAF)\n\n    expect_that(p.factor.FALSE, equals(p.factor.FALSE))\n    expect_that(build.factor.FALSE, equals(build.factor.TRUE))\n    expect_that(p.character.FALSE, equals(p.character.FALSE))\n    expect_that(build.character.FALSE, equals(build.character.TRUE))\n})\n```\n\nRunning this on the current development branch gives:\n\n```\nError: Test failure in 'stringsAsFactors'\nbuild.character.FALSE not equal to build.character.TRUE\nComponent 1: Component 1: Component 1: Mean relative difference: 1\nComponent 2: Component 5: Component 1: Component 4: 4 string mismatches\n```\n\nThe first component mismatch is in the x component of the data element.  One set is 1:5, the other is 5:1.  The second component mismatch is in the x axis labels (\"a\" -> \"e\" versus \"e\" -> \"a\").\n# Discussion\n\nThe problem happens in the build process (ggplot_build) only when one of the aesthetics is a character (not a factor).  I believe that this is probably due to a `data.frame` call which has the character vector which is converted to a factor (ordered) or not (stays unordered) based on the global option.  Wherever this internal code is, it should enforce a particular choice.  Traditionally, this choice has been `stringsAsFactors=TRUE`; ggplot has used the generic ordering that is gotten from a simple conversion of a character vector to a factor to determine the displayed order.\n\nNote that the `test_that` code checks both character and factor cases and checks at the ggplot specification and built ggplot level.  One one of these gives an error.  The others guard against regressions.\n# sessionInfo\n\n```\n> sessionInfo()\nR version 2.13.1 (2011-07-08)\nPlatform: x86_64-pc-mingw32/x64 (64-bit)\n\nlocale:\n[1] LC_COLLATE=English_United States.1252 \n[2] LC_CTYPE=English_United States.1252   \n[3] LC_MONETARY=English_United States.1252\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.1252    \n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n [1] testthat_0.5  ggplot2_0.9.0 memoise_0.1   scales_0.1.0  reshape2_1.1 \n [6] plyr_1.6      proto_0.3-9.2 roxygen2_2.0  digest_0.5.0  devtools_0.4 \n\nloaded via a namespace (and not attached):\n [1] brew_1.0-6         codetools_0.2-8    colorspace_1.1-0   dichromat_1.2-3   \n [5] evaluate_0.3       munsell_0.2        mutatr_0.1.2       RColorBrewer_1.0-5\n [9] RCurl_1.6-6.1      stringr_0.5        tools_2.13.1      \n```\n Thanks!  \n\nTiny note.  This is slightly better style because it guarantees you'll get your old options settings back even if the function errors out:\n\n```\n old <- options(stringsAsFactors = FALSE)\n on.exit(options(old))\n```\n But I thought `on.exit` only worked inside of a function, not just a code block:\n\n``` r\n{\non.exit(print(\"exiting\"))\nprint(\"running\")\n}\neval({\non.exit(print(\"exiting\"))\nprint(\"running\")\n})\neval(substitute({\non.exit(print(\"exiting\"))\nprint(\"running\")\n}))\nFUN <- function() {\non.exit(print(\"exiting\"))\nprint(\"running\")\n}\nFUN()\neval(body(FUN))\n```\n\n```\n> {\n+ on.exit(print(\"exiting\"))\n+ print(\"running\")\n+ }\n[1] \"running\"\n> eval({\n+ on.exit(print(\"exiting\"))\n+ print(\"running\")\n+ })\n[1] \"running\"\n[1] \"running\"\n> eval(substitute({\n+ on.exit(print(\"exiting\"))\n+ print(\"running\")\n+ }))\n[1] \"running\"\n[1] \"exiting\"\n> FUN <- function() {\n+ on.exit(print(\"exiting\"))\n+ print(\"running\")\n+ }\n> FUN()\n[1] \"running\"\n[1] \"exiting\"\n> eval(body(FUN))\n[1] \"running\"\n[1] \"exiting\"\n```\n\nLooking into the code of `test_that`, I see that it is closest to the `eval(substitute(...))` case, which does trigger the `on.exit`, but in general, I would not expect or rely on that.  Unless it is documented to work :)\n Oops, yeah, I forgot about that.\n My `testthat` test code had two errors in the 1st and 3rd `expect_that`.  They should be\n\n``` r\n    expect_that(p.factor.FALSE, equals(p.factor.TRUE))\n```\n\nand\n\n``` r\n    expect_that(p.character.FALSE, equals(p.character.TRUE))\n```\n\nrespectively.\n  # Description\n\nIn the develop branch, when calling summary on a ggplot object, it exits with an error when printing the faceting information\n# Reproducible code\n\n``` r\nsummary(ggplot())\n```\n# Actual output\n\n```\n> summary(ggplot())\ndata: [0x0]\nfaceting: Error in summary.ggplot(ggplot()) : attempt to apply non-function\n```\n# Expected output\n\nIn version 0.8.9, the output is\n\n```\n> summary(ggplot())\ndata: [0x0]\nfaceting: facet_grid(. ~ ., FALSE)\n```\n\nThis is not necessarily what it should be, but at least it shouldn't throw an error.\n# Diagnosis\n\nIn `summary.ggplot`, (https://github.com/hadley/ggplot2/blob/develop/R/summary.r#L35), there is the call `object$facet$pprint()`.  git blame shows this line is from the initial import of ggplot to git.  Since the results of a facet are no longer a `proto` object, but a list of class \"facet\", there is no `pprint` function to call.  A `print.facet` (and maybe a `summary.facet`?) function is needed to print out a summary appropriate for this use.\n# sessionInfo\n\n```\n> sessionInfo()\nR version 2.13.1 (2011-07-08)\nPlatform: x86_64-pc-mingw32/x64 (64-bit)\n\nlocale:\n[1] LC_COLLATE=English_United States.1252 \n[2] LC_CTYPE=English_United States.1252   \n[3] LC_MONETARY=English_United States.1252\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.1252    \n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods  \n[8] base     \n\nother attached packages:\n[1] ggplot2_0.9.0 memoise_0.1   scales_0.1.0  reshape2_1.1  plyr_1.6     \n[6] proto_0.3-9.2 roxygen2_2.0  digest_0.5.0  devtools_0.4 \n\nloaded via a namespace (and not attached):\n[1] brew_1.0-6         codetools_0.2-8    colorspace_1.1-0   dichromat_1.2-3   \n[5] munsell_0.2        RColorBrewer_1.0-5 RCurl_1.6-6.1      stringr_0.5       \n[9] tools_2.13.1      \n```\n I think your comment https://github.com/hadley/ggplot2/issues/213#issuecomment-3090750 belongs with issue #214, not here.\n  error occurs in remove_missing if data contains NA. Probably because of unevaled promise or something else.\n  > is.ordered(diamonds$cut)\n> [1] FALSE\n> levels(diamonds$cut)\n> [1] \"Fair\"      \"Good\"      \"Very Good\" \"Premium\"   \"Ideal\"\n Oh really? I was under the impression that they were used in ggplot2 to sort levels in e.g. a bar chart.\n @jeroenooms\n\nordered means something else than the order of the levels.\n\n```\n> diamonds$ocut <- as.ordered(diamonds$cut)\n> head(diamonds$cut)\n[1] Ideal     Premium   Good      Premium   Good      Very Good\nLevels: Fair Good Very Good Premium Ideal\n> head(diamonds$ocut)\n[1] Ideal     Premium   Good      Premium   Good      Very Good\nLevels: Fair < Good < Very Good < Premium < Ideal\n```\n Yes I understand. I had assumed that for unordered factors, ggplot would sort output alphabetically or something, yet for ordered factors it would use the order. E.g.:\n\nvar1 <- factor(c(\"XL\" ,\"XS\", \"M\"));\nvar2 <- factor(c(\"XL\" ,\"XS\", \"M\"), levels=c(\"XS\", \"S\", \"M\", \"L\", \"XL\"), ordered=T);\n\nqplot(var1);\nqplot(var2);\n\nBut I guess it doesn't matter indeed as one can just always rely on the order of the 'levels' attribute, regardless of the class of the factor.\n Actually, in social science it is often important to distinguish factors from ordinal factors. For example to test for independence between two variables, one would/could/should use spearman's rank correlation when they are ordinal, but when they are nominal people often do a chi-square test. So for these kind of purposes it is always good practice to distinguish between the two.\n  While attempting to check the is.zero() man page on RStudio one gets zeroGrob's (assuming ggplot2 is of course loaded).\nI wonder if that alias should be there in the first place.\nLet's call this a small issue.\n  There were a couple of bare percent (%) signs in position_jitter.Rd that were causing warnings during the build.\n  xintercept was added to the x scale (which already had xmin, xmax, and\nxend). Similar for y.  Also added a to the tests (although did not pass\ntests before change).  Fixes #206\n I would appreciate being told how I should have done this to not create a second issue (I wanted it to be part of #206).\n  With this small tweak, the legend name and labels properly appear on the plot when I'm using scale_xxx_manual. \n  on develop branch, ggsave for pdf generates extra blank page before the plot.\n\n```\n> p<-qplot(1:3)\n> ggsave(\"hoge.pdf\", p)\n```\n\nnow I have no time to detect where this is induced, sorry...\n I didn't know that. I'll try to find out the bad commit. thank you. \n does not occur in a different environment.\nPlease report if anyone find the same problem.\n I'm seeing the blank page with fdb86c10228dd4bd8d71b8350d86fe5f08aa848b\n\n> sessionInfo()\n> R version 2.13.1 (2011-07-08)\n> Platform: x86_64-pc-mingw32/x64 (64-bit)\n\nlocale:\n[1] LC_COLLATE=English_United States.1252 \n[2] LC_CTYPE=English_United States.1252  \n[3] LC_MONETARY=English_United States.1252\n[4] LC_NUMERIC=C  \n[5] LC_TIME=English_United States.1252    \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_0.9.0  proto_0.3-9.2  roxygen_0.1-2  digest_0.5.0   RCurl_1.6-6.1 \n[6] bitops_1.0-4.1 devtools_0.4  \n\nloaded via a namespace (and not attached):\n [1] codetools_0.2-8    colorspace_1.1-0   dichromat_1.2-3    grid_2.13.1  \n [5] memoise_0.1        munsell_0.2        plyr_1.5.2         RColorBrewer_1.0-5\n [9] reshape2_1.1       scales_0.1.0       stringr_0.5       \n I tried git bisect, and then I tried it again - and the second time around I zeroed in on a different commit as the culprit.  Let me try again, slowly, and see if I get a consistent answer this time ... OK, having taken more care, I'm pretty sure this is the culprit:\n\n425cad90f8a9a52461eb13de087b56a6dcf83aff is the first bad commit\ncommit 425cad90f8a9a52461eb13de087b56a6dcf83aff\nAuthor: hadley h.wickham@gmail.com\nDate:   Wed Jun 29 07:49:08 2011 -0500\n\n```\nUse ggplot_gtable consistently\n```\n\n:040000 040000 1ea8aac890c644c62901cedd1eb32c68be705e23 d2971f62db5d4aa12760c550d8150734559bf734 M      R\n I saw some odd behavior that I realized later is probably related to this.  When I was running example on some of the documentation (just checking/testing/playing with stuff), I noticed that for each graph displayed, there were 2 prompts to click for next page.  After the first there was nothing; after the second the graph appeared.  Something is happening that is drawing a complete blank plot and then starting again to draw the actual plot.  In PDF, that would give a blank page; on screen with `par(ask=TRUE)`, both plots can be seen.  Maybe this will help track down where the problem lies.\n thanks all. I detected what is wrong.\n fixed in the commit 38a9e96bc51be778700e\n  This is about the infamous value.name parameter in the help command.\nI read here: http://groups.google.com/group/manipulatr/browse_thread/thread/b1ca1304f12d2f03?pli=1 that everything will be sorted out once ggplot2 depends on reshape2 and not reshape.\nHowever as of ggplot2's version 0.8.9 the dependency list still include reshape.\n You still wrangling ggplot2? Or the newest release will be submitted\nto CRAN in the next 48h or so?\n;-)\nI'm just trying to prevent dependencies nightmare on my production\nsystem but I'll give a spin on the latest ggplot2 dev branch.\nIf only you would name your Version field in the DESCRIPTION file as\n0.8.9-x where x is some commit ordinal before you rename it to 0.9....\n\nOn Mon, Jul 11, 2011 at 5:01 PM, hadley\nreply@reply.github.com\nwrote:\n\n> This is fixed in the develop branch.\n Not good. Your latest commit to github is from Dec,2010.\nYour dev tree is not in github, is it?\n\n2011/7/11 Juan Carlos Borr\u00e1s jcborras@gmail.com:\n\n> You still wrangling ggplot2? Or the newest release will be submitted\n> to CRAN in the next 48h or so?\n> ;-)\n> I'm just trying to prevent dependencies nightmare on my production\n> system but I'll give a spin on the latest ggplot2 dev branch.\n> If only you would name your Version field in the DESCRIPTION file as\n> 0.8.9-x where x is some commit ordinal before you rename it to 0.9....\n Roger that.\n  It may be better if users can specify jitter function for position_jitter like this:\n\nmy_jitter <- function(x, factor = 1, amount = NULL) {x + rnorm(1)}\nposition_jitter(fun = my_jitter)\n sounds great!!\n  This doesn't make a pretty plot, but it happens once in a while in autogenerated plots and should not throw an error:\n\nqplot(Sys.time(), 8, geom=\"point\");\n Cool thanks. When will this one be pushed to CRAN? \n  Moved short description above roxygen tags so that it is not part of aliases.\n  Fixed typo in News.  Also, learning how to do pull requests and getting used to how git/github works.\n  One might consider something like what is on [wikipedia's Box_plot entry](http://en.wikipedia.org/wiki/Box_plot)\n\nHere's my stab at it:\n\n<i>Box and whisker plots are uniform in their use of the box: the bottom and top of the box are always the 25th and 75th percentile (the lower and upper quartiles, respectively), and the band near the middle of the box is always the 50th percentile (the median). </i>\n\n<i><b>By default in ggplot2, the ends of the whiskers represents the lowest datum still within 1.5 IQR of the lower quartile, and the highest datum still within 1.5 IQR of the upper quartile.  Data beyond the end of the whiskers are outliers and plotted as points.</b></i>\n\n[Even more simply](http://stattrek.com/ap-statistics-1/boxplot.aspx).\n Thanks aschweig. Your description has been added to the docs. \n   ```\nlibrary(\"ggplot2\")\n\n(p = qplot(0,0))\np + scale_x_continuous(\"Foo\")\np + scale_x_continuous(name=\"Foo\")\n# neither work\np + xlab(\"Foo\")\np + labs(x=\"Foo\")\n# these do\n\n(p = qplot(runif(10),runif(10), colour=runif(10)))\np + scale_colour_gradient(\"Foo\")\n# here this works\np + labs(colour=\"Foo\")\n# and this also\n\n(p = qplot(runif(5),runif(5), colour=factor(runif(5))))\np + scale_colour_hue(\"Foo\")\np + scale_colour_hue(name=\"Foo\")\n# these do not work\np + labs(colour=\"Foo\")\n# and this does, but it creates a longer scale\n# and strangely, even though p is just modified and not saved, it continues to increment the number of scale breaks\np + labs(colour=\"Foo\")\np + labs(colour=\"Foo\")\n\n(p = qplot(runif(5), fill=factor(runif(5))))\np + scale_fill_hue(\"Foo\")\np + scale_fill_hue(name=\"Foo\")\n# these do not work\np + labs(fill=\"Foo\")\n# and this does,and the behaviour is the same as above: the colour scale progressively increases in size\np + labs(colour=\"Foo\")\np + labs(colour=\"Foo\")\n# even stranger is this:\n(p = qplot(runif(5), fill=factor(runif(5))))\np + scale_colour_hue(\"Foo\")\n# I am trying to change the colour scale on a plot where only the fill is mapped, the title of the scale does not change but the number of scale breaks does\n```\n\nI haven't tried more.\n Thanks for all the fixes!\n  ```\nlibrary(ggplot2)\nqplot(0,0)\n```\n\nThe titles of the axes should be alignes with the axis break and it is shifted to the left/bottom. This seems to be because the grob for the axis title is to wide. It should be subtracted the tick size and the axis.text.? grob size.... but I can't find how to do that. It seems to be in `plot_render.r`. Could you point me in the right direction please?\n I tried but I must admit I could not figure it out. If this is going away anyhow, I'll stick with fixing my plots in Inkscape ;)\n Legends are less of a problem. Thanks a lot!\n A simple `qplot(0,0)` shows that the labels are still shifted (left and down) a bit. http://dl.dropbox.com/u/1047321/ggplot/qplot-gtable_render.pdf\n\nThis is with the latest dev version of scales, plyr etc.\n > Fixed. Let me know if you see any others.\n\nFine for me too. I'll continue to test it in the following days.\n On 2011-June-29  , at 14:53 , hadley wrote:\n\n> This branch also reduces plotting time by about 40ms, which is nice.\n\nNice indeed!\n  When the data are small (typically, < 1e-4), ggplot fails to find an appropriate y scale and displays a horizontal line with no y-axis range.\n\n```\nlibrary(ggplot2)\n\nset.seed(123)\nd1 <- d2 <- data.frame(x=seq(0,10, length=1e2),\n                      y=rnorm(1e2, sd=1e-3))\n\nd2$y <- d2$y * 1e-4\n\np1 <-\n ggplot(d1)+\n geom_path(aes(x,y))\n\n# p1 is OK\np1\n\n# p2 is displayed as a horizontal line\np1 %+% d2\n\n# base graphics is OK\nwith(d2, plot(x, y, t=\"l\"))\n\n\nsessionInfo()\nR version 2.13.0 Patched (2011-04-27 r55667)\nPlatform: i386-apple-darwin9.8.0 (32-bit)\n\nlocale:\n[1] en_GB.UTF-8/en_GB.UTF-8/C/C/en_GB.UTF-8/en_GB.UTF-8\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  grid\nmethods   base\n\nother attached packages:\n[1] gridExtra_0.8 ggplot2_0.8.9 proto_0.3-9.1 reshape_0.8.4 plyr_1.5.2\n\nloaded via a namespace (and not attached):\n[1] tools_2.13.0\n\n```\n To add to what works and what doesn't, these both give me a non-horizontal line:\n\n```\np1 %+% d2 + scale_y_continuous(limits=c(-5e-07,5e-07))\n\np1 %+% d2 + coord_cartesian(ylim=c(-5e-07,5e-07))\n```\n\nWhich supports the idea that it is something in the creation of the scale.\n  In theme_bw (file R/theme-defaults.r), the axis.title.x is given a vjust of 1.  This is in contrast with theme_grey, where this vjust is (correctly) 0.5.  Setting it to 1 causes the axis label to be too close to the axis when using the tikzDevice R package.\n Setting axis.title.x's vjust to 0 actually gives even better results with tikzDevice, but I don't know if that is the right thing to do in general.  (It has always seemed to me that tikzDevice spaces things much more narrowly than on-screen graphics devices.)\n This is in pull request: https://github.com/hadley/ggplot2/pull/183\n  Maybe it is fine if xlim and ylim can be specified for each facet separately, at least, for facet_wrap.\nNow, panel contains the information about ranges of each facet, so e.g.,\n\n```\n# lims like this:\n  vs am xmin xmax ymin ymax\n1  0  0    8    8 10.4 19.2\n2  0  1    4    8 15.0 26.0\n3  1  0    4    6 17.8 24.4\n4  1  1    4    4 21.4 33.9\n```\n\nand specify by, e.g.,\n\n```\n+ facet_wrap(~vs+am, limits = lims)\n```\n Hi\n\nActually I meant the limits for coord, but yes, the limits for scale\nalso should be like that.\n\nIn the case of coord, probably we have nothing to worry about.\nJust passing `lims` data drame to `coord_*` is sufficient, and there\nis no problem about the interaction of free scale and limits.\nI will try to implement it.\n\nAs for the limits for scales, as you say, things may be somewhat complicated.\n\n> But how do limit and free scales interact?\n\nI think manual limits should have top-priority.\n\n> And what happens if you specify `facet_wrap(~ vs, limits = lims)`.\n\nJust an error, since the limits are indeterminable.\nOr, with warning, use the first apparence of `vs`.\n\n> Another related idea that I've been thinking about is giving layers the ability not to affect scale limits - this is useful when you are plotting spatial data and want to add a map on top. \u00a0You don't want the map to affect the limits, because it may be much bigger than you data, and using coord to zoom in is a hassle. \u00a0If that idea was implemented, modifying scales on a facet-by-facet basis would amount to using `train_position = F` for all layers, apart from a `geom_blank` which specified the dummy data to expand the scales as needed - which `expand_limits` already does.\n\nTotally the idea sounds good, although I'm not sure if explicit\nnull-geom is necessary.\n\n## \n\nKohske Takahashi takahashi.kohske@gmail.com\n\nResearch Center for Advanced Science and Technology,\nThe University of \u00a0Tokyo, Japan.\nhttp://www.fennel.rcast.u-tokyo.ac.jp/profilee_ktakahashi.html\n\nOn Mon, May 23, 2011 at 10:06 PM, hadley\nreply@reply.github.com\nwrote:\n\n> Yes, I like this idea, and I like that basic syntax. \u00a0But how do limit and free scales interact? \u00a0And what happens if you specify `facet_wrap(~ vs, limits = lims)`.\n> \n> Another related idea that I've been thinking about is giving layers the ability not to affect scale limits - this is useful when you are plotting spatial data and want to add a map on top. \u00a0You don't want the map to affect the limits, because it may be much bigger than you data, and using coord to zoom in is a hassle. \u00a0If that idea was implemented, modifying scales on a facet-by-facet basis would amount to using `train_position = F` for all layers, apart from a `geom_blank` which specified the dummy data to expand the scales as needed - which `expand_limits` already does.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/hadley/ggplot2/issues/187#comment_1221485\n Here is a testbed of manual limits for coord with facet_wrap.\n\nhttps://github.com/kohske/ggplot2/commit/bd715814a7d048aeac9c8c4023b7f64fa689b983\n > Hmmmm, that code just looks too complicated to me. \u00a0It's a lot of extra complexity for not a lot of extra gain. \u00a0I think giving layers the ability to control whether or not they affect position scaling is simpler to implement, more elegant (in terms of playing nicely with existing code for free limits) and allows a number of other interesting techniques that were previously not possibly.\n\nYes, exactly, yes. It may be too complicated and hard to understand.\nProbably the layers will do that, but thus far I could not entirely\nfigure out the power of the layers.\nSo, I will look into the code and consider a implementation.\n\nthanks,\n\nkohske\n I would like to add another, related request. Different panels with different limits may also require fine-tuning of the breaks on a per-panel basis (I do need this, often). Currently the only way I could achieve this was to mask grid.pretty() and play some ugly tricks to have it return different breaks for different data ranges. \nIt sure would be nice to be able to specify manual breaks for each facet, in those few special occasions. I don't expect there will ever be a properly grammatical syntax for this, though. Failing this, perhaps it should simply be part of opts()? I could imagine a new opts() for a ggplot being similar to the way lattice handles these cosmetic details,\n- specify the panel ordering\n- specify the panel widths, and interpanel spacings (allowing visual groupings, e.g. 2 by 2)\n- specify a list of panel limits, with optional recycling\n- specify the panel x and y breaks\n  (- perhaps even more options, such as per-panel background colour, ...)\n It should be possible to specify all these details in terms of the facetting variables as opposed to the panel number; admittedly the syntax becomes more cumbersome. There may be a way to define a new data structure between data.frame and list to handle these options. Below is an illustration of what I have in mind, storing the values in a long format matrix.\n\nmy.panel.details <- function(){\n\n  ## two facetting variables\n  row.var <- rep(letters[1:2], 2)\n  col.var <- rep(LETTERS[1:2], each=2)\n\n  ## corresponding specifications\n  cbind(row.var=row.var, col.var=col.var,\n             limits = c(list(c(0, 10)), # per panel limits\n               list(c(0, Inf)), # Inf means 'use the defaults from the data'\n               list(c(-Inf, Inf)),\n               list(c(-Inf, Inf))),\n             breaks = c(list(seq(0,10)),\n               list(seq(-10,10,by=5)),\n               list(seq(-10,10,by=2)),\n               list(seq(-10,10,by=1))),\n             vspacing = c(5, 5), # vertical spacing between the panels, repeated by technical necessity\n             hspacing = c(0, 0), # horizontal spacing between the panels\n             width = c(1, 2), # using null units?\n             height = c(1, 1), # using null units?\n             background.color = c(\"grey95\"))\n\n}\n\nmy.panel.details()\n\nopts(panel.details = my.panel.details())\n  When ggplot2 is loaded, it loads reshape, which masks some functions from reshape2 and plyr. This has caused some problems for me, in cases where the function definition has changed between the two versions. For example, with `melt`:\n\n```\n> library(reshape2)\n> melt(smiths, id.vars = \"subject\", measure.vars=c(\"time\",\"age\"), variable.name=\"feature\")\n     subject feature value\n1 John Smith    time     1\n2 Mary Smith    time     1\n3 John Smith     age    33\n4 Mary Smith     age    NA\n```\n\nThat worked OK. Now load ggplot2, which masks some functions.\n\n```\n> library(ggplot2)\nLoading required package: reshape\nLoading required package: plyr\n\nAttaching package: 'reshape'\n\nThe following object(s) are masked from 'package:plyr':\n\n    rename, round_any\n\nThe following object(s) are masked from 'package:reshape2':\n\n    colsplit, melt, recast\n\nLoading required package: grid\nLoading required package: proto\n```\n\nTry again (this calls the version of melt from reshape).\n\n```\n> melt(smiths, id.vars = \"subject\", measure.vars=c(\"time\",\"age\"), variable.name=\"feature\")\n     subject variable value\n1 John Smith     time     1\n2 Mary Smith     time     1\n3 John Smith      age    33\n4 Mary Smith      age    NA\n```\n\nNotice that the column that was called \"feature\" is now called \"variable\", because the relevant argument in reshape2 is `variable.name`, but in reshape it is `variable_name`.\n   `ggsave(units=\"cm\")` is indeed confusing since it does nothing. Maybe it would be clearer if it affected the display of the size when width and height are not specified.\n\nI did not know about `cm()`. I still think having an explicit argument is more discoverable.\n What about with these new changes? The code is not clearer but the user interface is consistent, and improved I think.\n\nI understand that this might seem low priority. One get's used to american units after a while, even coming from a country using international standard units. But my students, who have not be confronted to this peculiarity yet, are completely put off by inches.\n Done\n It is now in feature request #285\n  ```\ndf<-data.frame(hour=rep(0:2,100),value=rnorm(3*100))\n\n# Three bins\nggplot(df,aes(hour))+stat_bin(binwidth=1)\n\n# Only two bins on the x-axis\nggplot(df,aes(hour,value))+stat_bin2d(binwidth=c(1,1))\n```\n\nI suspect this is due to the fact that stat_bin2d() doesn't pass pad=TRUE to fullseq() when determining breaks\n\nhttps://github.com/hadley/ggplot2/blob/master/R/stat-bin2d.r#L40\n\nbut stat_bin() does\n\nhttps://github.com/hadley/ggplot2/blob/master/R/stat-bin.r#L23\n  I've suddenly started to have trouble using stat_summary(fun.data=\"mean_cl_boot\").\nI receive the error: \"geom_crossbar requires the following missing aesthetics: ymax\"\n\nAttached is a small example that indicates the problem is in the wrap_hmisc function. The issue seems related to namespaces, as wrap_hmisc works fine when the code is copied into the R prompt.\n\nMy R configuration and example output are attached as well, perhaps it's just a wonky version conflict.\n\n``` R\nlibrary(ggplot2)\n\ndata <- data.frame(x=rep(1:5, 20), y=rnorm(100))\n\nmy.wrap_hmisc <- function (fun) #wrap_hmisc function body copied directly from prompt \n{\n    function(x, ...) {\n        try_require(\"Hmisc\")\n        result <- safe.call(fun, list(x = x, ...))\n        rename(data.frame(t(result)), c(Median = \"y\", Mean = \"y\", \n            Lower = \"ymin\", Upper = \"ymax\"))\n    }\n}\n\nmy.mean_cl_boot <- my.wrap_hmisc(\"smean.cl.boot\")\n\nmean_cl_boot(data$y) #library supplied mean_cl_boot doesn't include ymax (required for geom_crossbar)\n\nmy.mean_cl_boot(data$y) #user supplied my.mean_cl_boot does include ymax, despite using the same source code (in different namespaces though)\n\n############CONFIG##########\n#(R version 2.13.0 (2011-04-13))\n#installed.packages() \n#Hmisc           \"Hmisc\"           \"/Library/Frameworks/R.framework/Versions/2.13/Resources/library\" \"3.8-3\"       NA   \n#ggplot2         \"ggplot2\"         \"/Library/Frameworks/R.framework/Versions/2.13/Resources/library\" \"0.8.9\"       NA     \n#plyr            \"plyr\"            \"/Library/Frameworks/R.framework/Versions/2.13/Resources/library\" \"1.5\"         NA    \n#reshape         \"reshape\"         \"/Library/Frameworks/R.framework/Versions/2.13/Resources/library\" \"0.8.4\"       NA        \n\n##########OUTPUT############\n# > library(ggplot2)\n# Loading required package: reshape\n# Loading required package: plyr\n# \n# Attaching package: 'reshape'\n# \n# The following object(s) are masked from 'package:plyr':\n# \n#     rename, round_any\n# \n# Loading required package: grid\n# Loading required package: proto\n# > \n# > data <- data.frame(x=rep(1:5, 20), y=rnorm(100))\n# > \n# > my.wrap_hmisc <- function (fun) \n# + {\n# +     function(x, ...) {\n# +         try_require(\"Hmisc\")\n# +         result <- safe.call(fun, list(x = x, ...))\n# +         rename(data.frame(t(result)), c(Median = \"y\", Mean = \"y\", \n# +             Lower = \"ymin\", Upper = \"ymax\"))\n# +     }\n# + }\n# > \n# > my.mean_cl_boot <- my.wrap_hmisc(\"smean.cl.boot\")\n# > \n# > mean_cl_boot(data$y)\n#            y          y      ymin\n#1 -0.0234701 -0.2127575 0.1547785\n# > my.mean_cl_boot(data$y)\n#            y       ymin      ymax\n#1 -0.0234701 -0.2178521 0.1527455\n```\n Looking a bit deeper, the problem is caused by an incorrectly namespaced rename function.\n\nModifying the wrap_hmisc source to specify plyr::rename continues to give the incorrect result, but using reshape::rename gives the expected result.  Removing the unused (in this case) Median=\"y\" replacement also gives the expected result.\n\nIs this a library version dependency problem or a bug?\n\nThe title of this issue is probably misleading now, is it safe to change?\n\n``` R\nlibrary(plyr)\nlibrary(reshape)\n\ndata <- data.frame(Mean = -0.000360910369778861, \n                   Lower = -0.800518008047478, \n                   Upper = 0.812116043553483)\n\n\nreshape::rename(data, c(Median = \"y\", Mean = \"y\", Lower = \"ymin\", Upper = \"ymax\"))    \n#OK\n#> y      ymin     ymax\n#1 -0.0003609104 -0.800518 0.812116\n\nplyr::rename(data, c(Median = \"y\", Mean = \"y\", Lower = \"ymin\", Upper = \"ymax\"))    \n#FAIL\n#> y         y     ymin\n#1 -0.0003609104 -0.800518 0.812116\n\nplyr::rename(data, c(Mean = \"y\", Lower = \"ymin\", Upper = \"ymax\"))    \n#OK (removed Median from replacements as it wasn't being used)\n#> y      ymin     ymax\n#1 -0.0003609104 -0.800518 0.812116\n\n```\n Upgrading plyr to 1.5.2 fixed the problem!  I should have checked the plyr issue tracker as it seems the problem was fixed between plyr 1.5 (the version I was running) and 1.5.2.\n\nI had already tried upgrading ggplot2 but it didn't solve the problem, maybe the dependencies need to be updated?\n  ```\nlibrary(ggplot2)\n\nb <- numeric(0)\n\nDF <- data.frame(x = 1:6, y = seq(6) * 10^6)\n\nqplot(x, y, data = DF, geom = \"smooth\")  +\n   geom_vline(xintercept=b, col = \"dark blue\", lty='dashed')\n```\n\nReported by Gabor Grothendieck\n  ```\n> library(ggplot2)\n> qplot(0,0)\nError in range[1] : object of type 'builtin' is not subsettable\n```\n\nI think line 183 in scale-.r in ggplot2 should read:\n\n```\nbreaks <- range(limits)[1]\n```\n\ninstead of just \n\n```\nbreaks <- range[1]\n```\n  Particularly for transformers.\n  ```\nd = data.frame(x=runif(10), y=runif(10),\n        a=rep(1:2, 5), b=rep(3:4, each=5),\n        c=c(5,5,6,6,5,5,6,6,5,5) )\n\n# two facetting variables\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~b)\n# OK\n\n# combination of b and c as faceting lines\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~b+c)\n# OK\n# and we have\ntable(d$a, interaction(d$b,d$c))\n# = there is at least one point in every combination\n\nd$c = c(5,5,6,6,5,5,5,5,5,5)\ntable(d$a, interaction(d$b,d$c))\n# now some combinations do not have points\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~b+c)\n# fails with:\n# Error in .$scales$x[[j]] : subscript out of bounds\n\n# but this\nd$foo = interaction(d$b,d$c)\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~foo)\n# works OK\n```\n Workaround: pad the dataset with rows such that every combination of faceting variables is present, but the padded rows have NA data so that they are dropped from the plot:\n\n``` r\nd <- rbind.fill(d,\n    with(d,expand.grid(a=unique(a), b=unique(b), c=unique(c))))\ntable(d$a, interaction(d$b,d$c))\n# Now has every combination\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~b+c)\n# Plots, but with 8 warning messages about missing values (one for each facet)\n```\n\nThis isn't a fix, but at least gives a workaround.\n  ```\nmpg$cyl2 <- factor(mpg$cyl, levels = c(2, 4, 5, 6, 8, 10))\nqplot(displ, hwy, data = mpg) + facet_wrap(~ cyl2, drop = FALSE)\n```\n I get\n\n```\nError in facet_wrap(~cyl2, drop = FALSE) : \n  unused argument(s) (drop = FALSE)\n```\n\nwith the latest version here. I don't know if this is expected.\n\nA possibly related bug: I cannot get facets for factor levels which do not have data. I think this is what `drop` should be about (`drop=TRUE` : drop levels with no data, `drop=FALSE` : keep all levels, with a default to `FALSE`):\n\n```\nlibrary(ggplot2)\nd=data.frame(x=runif(10), y=runif(10), a=\"foo\")\nd$a=factor(d$a, levels=c(\"foo\", \"bar\"))\n\nggplot(d) + geom_point(aes(x=x, y=y))\n\nggplot(d) + geom_point(aes(x=x, y=y)) + facet_wrap(~a)\n\nggplot(d) + geom_point(aes(x=x, y=y)) + facet_grid(.~a)\nggplot(d) + geom_point(aes(x=x, y=y)) + facet_grid(a~.)\n```\n  I understand it might be a painful change but:\n1. It is _very_ confusing for new users: all other \"basic\" geoms (point, path etc.) don't make any computation\n2. It would differentiate it from geom_histogram\n\nIf a complete switch is not conceivable, it would be natural to use stat=\"identity\" when y is supplied to geom_bar.\n I think the basic problem is that people don't realise that there are two types of bar charts - if I made this change there would be an equal number of people complaining that it now doesn't work as they expect\n I think that with a geom explicitly called geom_histogram, people should find what they need.\n\nTo me the names mean:\n- geom_bar just draws bars of given size, just as geom_point draws points, geom_path draws paths etc.\n- geom_histogram computes and plots an histogram, just as geom_boxplot computes and plot a box plot, geom_density computes and plots the density\n\nMaybe it is a language problem though (a histogram, in french, is only called \"histogramme\", not bar chart).\n\nA way of making it clearer would be to split geoms in two categories (probably only in the documentation):\n1. the basic ones, which are just drawing tools: point, path, bar, polygon, area, rect, segment, text, tile, etc.\n2. the \"statistical\" ones, which compute stuff before plotting: bin2d, boxplot, crossbar, density, hex, histogram, jitter, quantile etc.\n\nAll those that do not use stat_identity would be in the second group.\n The problem is that \"bar\" chart means different things to different people - some people expect it to work like it does with stat=\"identity\" and others like it does with stat=\"bin\".\n\nI totally agree that the current design is confusing because it tangles layers, geoms and stats.  If I was to do it again, I'd probably have `layer_bin`, `layer_smooth`, etc.\n  ```\nf <- function(...) aes(...)\naes(mpg, colour = cyl)\n```\n  # Summary:\n\ncoord_equal() does not make the coordinate systems have an equal aspect ratio when using facet_wrap() in the cases where it is the horizontal axis which must be extended to make the coordinates equal.  coord_equal() will affect the coordinate systems for vertically stretched axes when using facet_wrap(), and in all case when using facet_grid().\n# Reproducible code:\n\n```\np_horiz_stretch <- ggplot(mtcars) +\ngeom_point(aes(x=5*hp, y=disp)) +\ngeom_abline() +\ncoord_equal()\n\np_vert_stretch <- ggplot(mtcars) +\ngeom_point(aes(x=hp, y=5*disp)) +\ngeom_abline() +\ncoord_equal()\n\np_horiz_stretch\np_horiz_stretch + facet_grid(am~.)\np_horiz_stretch + facet_grid(~am)\np_horiz_stretch + facet_wrap(~am)\n\np_vert_stretch\np_vert_stretch + facet_grid(am~.)\np_vert_stretch + facet_grid(~am)\np_vert_stretch + facet_wrap(~am)\n```\n# Expected results:\n\nfacet_grid(~am) and facet_wrap(~am) should give the same figure (at least with respect to coordinate aspect ratios).\n# Actual results:\n\nFor p_horiz_stretch, facet_grid(~am) maintains the aspect ratio while facet_wrap(~am) does not. It appears, rather, to make the plot area square, not make the aspect ratio 1.  That is, it has an effect (plot is different than if coord_equal() was left out completely), but not the right one. For p_vert_stretch, both maintain the aspect ratio.\n# Discussion:\n\np_horiz_stretch is a plot (using mtcars) where the x-axis has to be stretched (or the y-axis has to be contracted, depending on how you look at it) to make the coordinate systems equal.  In addition to the points, a line with slope 1 is also drawn to make it easier to identify if the coordinates are in fact equal. Faceting, via facet_grid(), in either direction, maintains the appropriate ratio. However, wrapping, which for the two values of am should be the same as the immediately previous call with facet_grid, does not preserve the aspect ratio.  By way of comparison, p_vert_stretch is a plot where the y-axis has be stretched (x-axis has to be contracted) which behaves as expected in all four scenarios.\n# Session Info:\n\n```\nR version 2.12.1 (2010-12-16)\nPlatform: i386-pc-mingw32/i386 (32-bit)\n\nlocale:\n[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252   \n[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.1252    \n\nattached base packages:\n[1] grid      stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_0.8.8 proto_0.3-8   reshape_0.8.3 plyr_1.2.1 \n```\n Some updates:\n- This appears to be a duplicate of #130\n- Paul Metzner [reports that](http://groups.google.com/group/ggplot2/browse_thread/thread/86e5ce333d7e5eb9) the threshold for the problem seems to be when the aspect ratio crosses 1\n- The development version has different behavior than 0.8.9.  `facet_grid` and `facet_wrap` are now consistent with each other in their behavior.  Unfortunately, they both exhibit the wrong behavior.\n- For the code to be reproducible in the development version, `facet_grid(~am)` must be changed to `facet_grid(.~am)` (two places)\n    ```\nbase <- ggplot(choro,aes(long,lat,group=group,fill=bin)) + geom_polygon()\n\nbase + scale_x_continuous(\"\") + scale_y_continuous(\"\") +\n  scale_fill_brewer(\"Population\",pal=1,type=\"seq\",na.colour = \"red\",\nlabels=c(\"< 1000\" = \"< 1000\" , \"< 1e4\" = \"< 10,000\", \"< 1e5\" = \"< 100,000\",\n\"< 1e6\" = \"< 1,000,000\", \"< 1e7\" = \"1,000,000+\",\"NA\"=\"Missing\"))\n```\n  outlier.colour from geom_boxplot() does not work with mapping\n\n```\nlibrary(ggplot2)\ndataset <- expand.grid(x = factor(c(\"A\", \"B\")), y = c(rep(1, 50), 10), z = factor(c(\"C\", \"D\")))\ndataset$y <- rnorm(nrow(dataset), mean = with(dataset, y * as.numeric(x)), sd = as.numeric(dataset$z))\nggplot(dataset, aes(x = x, y = y, colour = z)) + geom_boxplot()\nggplot(dataset, aes(x = x, y = y, colour = z)) + geom_boxplot(outlier.colour = \"red\")\nggplot(dataset, aes(x = x, y = y, colour = z)) + geom_boxplot(aes(outlier.colour = z))\n```\n I also have come across the issue of colouring the outliers according to aesthetics.\nI was able to figure out that it could be done with outlier.colour = NULL only by looking at the source code.\n\nIf not supporting outlier.\\* in the aesthetics, it would be nice to have the current behaviour be documented in geom_boxplot() help.\nAlso, maybe NULL should be the default value for outlier.\\* params?\nThe minor note: unlike colour/color, the outlier.color does not work.\n  Here is a suggestion for objects from the confint.glht class (multcomp package)\n\n```\nfortify.confint.glht <- function(CI){\ndata <- as.data.frame(CI$confint)\ndata$.contrast <- rownames(gCI)\ndata\n}\n```\n Could you please provide a small example too?\n Here is an example and a small fix in the code\n    #fixed code\n    fortify.confint.glht <- function(CI){\n        CI <- as.data.frame(CI$confint)\n        CI$.contrast <- rownames(CI)\n        CI\n    }\n\n```\n#working example\nlibrary(multcomp)\nlibrary(ggplot2)\namod <- aov(breaks ~ wool + tension, data = warpbreaks)\nwht <- glht(amod, linfct = mcp(tension = \"Tukey\"))\nCI <- confint(wht)\nggplot(CI, aes(x = .contrast, y = Estimate, ymin = lwr, ymax = upr)) + geom_pointrange()\n```\n  For example: \n\nscale_y_continuous(\"\", formater=\"percent\")  ## No error, but also not formatting\n  As pointed out:\nhttp://groups.google.com/group/ggplot2/browse_thread/thread/d6fe322090aae4bd/0201c67637ab1e9f\nand\nhttp://groups.google.com/group/ggplot2/browse_thread/thread/5e4cb9d6d3b36b2f/31f69c8fc32f2558\n\n<pre>\nqplot(cut, data=diamonds, geom=\"bar\",fill=color)\n</pre>\n\nBars are stacked from D/bottom to J/top, but the legend is stacked from J/bottom to D/top. \n\nAs pointed out in the group, this appears to only affect stacked barplots and can be fixed by setting the breaks manually. I am suggesting that the default legend order for a stacked barplot be a reversal of the stack order. \n\n<pre>\nqplot(cut, data=diamonds, geom=\"bar\",fill=color) + \nscale_fill_discrete(breaks = rev(levels(diamonds$color)))  \n</pre>\n  > p <- ggplot(mtcars, aes(factor(cyl), mpg)) \n> p + geom_boxplot() \n> Error in 1:ncol(strip_widths) : argument of length 0\n> \n> p <- ggplot(diamonds, aes(carat, ..density..)) + geom_histogram(binwidth = 0.2)\n> p + facet_grid(. ~ cut) \n> Error in 1:ncol(strip_widths) : argument of length 0\n\nEtc. \n\nSeems to track back to line 95 in facet-grid-.r\n  ```\nmpg2 <- transform(mpg, \n  cyl = factor(cyl, levels = c(2, 4, 5, 6, 8, 10))\nqplot(displ, hwy, data = mpg, main = \"drop = FALSE\") + \n  facet_wrap(~ cyl2, drop = FALSE)\n# Missing panel for 10\n```\n   Not sure if this should be a new issue or not (pretty new to ggplot).\n\nIf I do the following, everything works\n\n```\n p <- qplot(mpg, wt, data = mtcars, colour = cyl)\n p + labs(colour = \"Cylinders\")\n```\n\nbut not when I do\n\n```\n p <- qplot(mpg, wt, data = mtcars, color = cyl)\n p + labs(color = \"Cylinders\")\n```\n\nEven though the plot works with `color=cyl`, the label is not applied. \n\nCheers \n Ok, then this is an old issue and can just be closed.\n  e.g. `stat_bin2d`\n  This works\n\n```\nlibrary(\"maps\")\nlibrary(\"ggplot2\")\nnz <- map(\"nz\", plot=FALSE)\nnz <- data.frame(lon=nz$x, lat=nz$y)\n\nd <- data.frame(foo=rep(1:5, each=2))\n\nggplot(d) + geom_path(aes(x=lon, y=lat), data=nz)\nggplot(d) + geom_path(aes(x=lon, y=lat), data=nz) + coord_map()\nggplot(d) + geom_path(aes(x=lon, y=lat), data=nz) + coord_map() + facet_wrap(~foo)\n```\n\nThis does not\n\n```\nlibrary(\"ggplot2\")\ncoast <- read.table(\"http://dl.dropbox.com/u/1047321/ggplot/one_tree-reef.csv\", head=T, sep=\",\")\n\nggplot(d) + geom_path(aes(x=lon, y=lat), data=coast) + coord_map()\nggplot(d) + geom_path(aes(x=lon, y=lat), data=coast) + coord_map() + facet_wrap(~foo)\n```\n\nIt only affects facet_wrap, facet_grid is OK:\n\n```\nggplot(d) + geom_path(aes(x=lon, y=lat), data=coast) + coord_map() + facet_grid(.~foo)\nggplot(d) + geom_path(aes(x=lon, y=lat), data=coast) + coord_map() + facet_grid(foo~.)\n```\n\nI am not sure what the difference is: number of points, distance between points?\n See also #153\n  When the X axis labels are text strings, it happens often that they cluster together and they become very difficult to read.\nFor this reason, I usually have to use an option like + opts(axis.text.x=theme_text(angle=60, hjust=1.2, )) in order to draw them horizontally and make them more readable.\n\nConsider making this the default behaviour for when the X axis labels are long strings. One of the strongest points of ggplot2 is that it has very nice default options, so this will improve the readibility of a ggplot2 figure.\n  ```\nlibrary(ggplot2)\n\nmydata <- structure(list(Group = structure(c(\"AA\", \"AA\", \"AA\", \"AA\", \"BB\",\n\"BB\", \"BB\", \"BB\", \"CC\", \"CC\", \"CC\", \"CC\"), .Dim = 12L), Date = structure(c(14072,\n14079, 14086, 14091, 14072, 14079, 14086, 14091, 14072, 14079,\n14086, 14091), class = \"Date\"), Value = structure(c(1.07, 1.05,\n0.98, 0.95, 1.04, 0.99, 1.13, 0.98, 1.3, 1.12, 1.25, 1.12), .Dim = 12L)), .Names = c(\"Group\",\n\"Date\", \"Value\"), row.names = c(NA, -12L), class = \"data.frame\")\n\nqplot(Date, Value, data=mydata, facets = Group ~ .) + \n  geom_hline(yintercept=1.0)\n```\n #also happens with facet_grid...\nlibrary(ggplot2)\nqplot(mpg, wt, data = mtcars) + facet_grid(vs ~ am,margins=T)\n  ```\ndf <- data.frame(x = 1:10, y = 1:10, z = 1)\nqplot(x, y, data = df, shape = z)\n```\n  ```\nx <- runif(100, 1, 80)\ny <- runif(100, 15, 110)\nz <- runif(100, 35, 180)\ndfr <- melt(data.frame(x, y, z))\nggplot(dfr,  aes(variable,  value)) + stat_summary(fun.data=\"mean_cl_boot\")\n```\n\nThis requires adding some kind of position limits reset to plot-build after the statistics have been computed.\n  ```\nlabs <- expression( , NC==17, PG, PG==13, R)\nggplot(data = movies, aes(x = rating, fill = NA)) +\n  geom_density(alpha = I(0.2), aes_string(fill = \"mpaa\")) +\n  scale_fill_discrete(name = \"mpaa\", breaks = levels(movies$mpaa),\n     labels = labs, formatter = parse) +\n  geom_text(x = Inf, y = Inf, label = \"Test\", hjust = 1, vjust = 1)\n\n# Annotation in top-right corner disappears\nggplot(data = movies, aes(x = rating)) +\n  geom_density(alpha = I(0.2), aes_string(fill = \"mpaa\")) +\n  scale_fill_discrete(name = \"mpaa\", breaks = levels(movies$mpaa),\n     labels = labs, formatter = parse) +\n  geom_text(x = Inf, y = Inf, label = \"Test\", hjust = 1, vjust = 1)\n```\n  All labels that are within the plotting window are plotted even if they do not correspond to a plotting area anymore.\n\n```\nd <- data.frame(x=runif(20), y=runif(20), a=rep(c(\"a\",\"b\"),10))\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~.)\nlast_plot() + coord_map()\nlast_plot() + coord_map(ylim=c(0.39,0.59))\n```\n I don't know how to solve this - I basically need to check if the locations on the ticks fall inside the projected bounding box.  It's probably really simple.\n @hadley do you have a simple example of this problem w.r.t. zooming and legends?\n Thanks.\n\nThis may be fixed by improving guides.\nNow I'm improving the guides that are sensitive to the apparence of data like this:\n\n```\nd1 <- data.frame(x = rep(1:5, 2), y = c(1:5, 2:6), g = gl(2, 5, labels = 1:2))\nd2 <- data.frame(x = rep(1:5, 2), y = c(1:5, 2:6)+0.5, g = gl(2, 5, labels = 3:4))\nggplot(d1, aes(x, y, colour = g, size=g)) + geom_line() + geom_point(data = d2)\n```\n\nand the output is like this: https://skitch.com/e-kohske/gxe9d/quartz-2\n\nMy idea is similar than yours.\nFor the discrete scales, unused level will be dropped.\nFor the continuous scales, the out-of-range will be dropped.\nAnd the guides include both positional and non-positional guides.\n\nBut anyway, not easy.\nSo, a quick fix is preferable for the next release.\n here is a quick test code (testthat is preferable).\n\n```\nl(ggplot2, T)\nqplot(displ, hwy, data =mpg, colour = hwy) + coord_cartesian(xlim = c(2.1,4.9), ylim = c(20, 50)) + scale_colour_gradient(breaks = seq(0, 40, by=10))\n\nqplot(displ, hwy, data =mpg, colour = hwy) + coord_cartesian(xlim = c(2.1,4.9), ylim = c(20, 50), wise=T) + scale_colour_gradient(breaks = seq(0, 40, by=10))\n\nqplot(displ*10, hwy, data =mpg, colour = hwy) + coord_map(xlim = c(21,49), ylim = c(20, 50)) + scale_colour_gradient(breaks = seq(0, 40, by=10))\n\n# coord_map does not support wisely zooming\n#qplot(displ*10, hwy, data =mpg, colour = hwy) + coord_map(xlim = c(21,49), ylim = c(20, 50), wise = T) + scale_colour_gradient(breaks = seq(0, 40, by=10))\n\n# coord_polar does not support manual limints\n# qplot(displ, hwy, data =mpg, colour = hwy) + coord_polar() + scale_colour_gradient(breaks = seq(0, 40, by=10))\n\nqplot(displ, hwy, data =mpg, colour = hwy, size = hwy) + scale_colour_gradient(breaks = seq(0, 40, by=10)) + scale_size(breaks = seq(0, 40, by=10))\nqplot(displ, hwy, data =mpg, colour = hwy, size = hwy)\n```\n I want to make clear how the legend should handle `NA`s.\n\nAt the moment, all `break`s outside the data limits will not be drawn, since it doesn't have values.\n\n```\nqplot(1:3, 1:3, col = 1:3) + scale_colour_continuous(breaks = 0:4)\n```\n\nso, drops `0` and `4` from the legend.\n\nHowever, sometimes, `NA` should be drawn. e.g.:\n\n```\nqplot(1:3, 1:3, fill = c(1, NA, 2)) + geom_tile()\n```\n\nThis plot will visualize which data has missing column. In this case, maybe `NA` should be drawn. In this view, all out-of-range but `NA` breaks should be dropped.\n\nHowever, however, if `breaks = NA` is passed to scale, the breaks should not be drawn.\n\nSo, finally, my stragety is like that:\n1. out-of-bounds breaks are dropped even if it is explicitly specified.\n2. if data includes `NA` and `na.value` of the scale is not `NA` (i.e., colour and fill), the `NA` appears in the legend, since it will show where `NA` is in the data.\n3. if `breaks=NA`, then the legend itself is dropped.\n\nDoes this make sense?\n I agree with using `waiver()`. Basically using `NA` for some flags is confusing.\nWill you fix this?\n OK.\nWhat about this https://github.com/hadley/ggplot2/pull/306/files#diff-10 ?\nIt is easy to fix so that `scale_breaks` returns `NULL` when `scale_XXX(breaks = NA)`,\nbut maybe this change will introduce unexpected bugs. Not sure.\n\nIt may be better to fix this with moving `waiver`.\n  reproduce: \n1. grab ggplot2 from cran\n2. do the following \n\nm <- ggplot(movies, aes(x=votes))\nm + geom_histogram() + coord_trans(x=\"log10\")\n\nworks ok. But\n\nm + geom_histogram() + coord_trans(y=\"log10\")\n\ngives \n\nError in if (length(from) == 1 || length(to) == 1 || from[1] == from[2] ||  :\n  missing value where TRUE/FALSE needed\n Needs to give a more informative error message.\n  Maybe something like:\n\n```\ntest_data <- data.frame(\n  x = rnorm(100), \n  y = rnorm(100), \n  cat1 = factor(rep(c(1, 2), times = c(50, 50))), \n  cat2 = rnorm(100))\nggplot(test_data, aes(x, y)) +\n  geom_point(aes(colour = cat1, size = cat2), alpha = 1/2) + \n  scale_size(alpha = 1) + \n  scale_colour(alpha = 1)\n```\n  ```\nlibrary(ggplot2)\n\nDF <- data.frame(\n  time = factor(c(7,21,49,70,7,21,49,70,7,21,49,70,7,21,49,70)),\n  value = c(2,4,6,3,1,5,9,5,1,6,8,2,1,7,8,4))\n\nggplot(DF, aes(time, value)) +\n  geom_boxplot(fill = NA)\n```\n It looks like there are two issues going into this problem:\n- `quantile()` (used by `stat_boxplot`) doesn't do exactly the same thing as `boxplot.stats` (used by `boxplot`).\n- The whisker calculation in `stat_boxplot` is off. For example, if there are 4 data points, it draws the lower whisker to the second-lowest data point, but that data point may be higher than the lower hinge.\n\nHere's an adapted version of the example:\n\n``` R\nlibrary(ggplot2)\nlibrary(plyr)\n\nDF <- data <- read.table(header=TRUE, con <- textConnection('\n time value\n    7     2\n    7     1\n    7     1\n    7     1\n   21     4\n   21     5\n   21     6\n   21     7\n   49     6\n   49     9\n   49     8\n   49     8.2\n   70     3\n   70     5\n   70     2\n   70     4\n '))\nclose(con)\n\nDF$time <- factor(DF$time)\n```\n\nCompare the output from ggplot and boxplot. The hinges for some of the boxes are in different places\n\n``` R\nggplot(DF, aes(time, value)) + geom_boxplot(fill = NA) + geom_point(shape=21, colour=\"red\", position=position_jitter(width=.1, height=0))\n\n\nboxplot(value ~ time, DF)\npoints(jitter(as.numeric(DF$time),.3), DF$value)\n```\n\nWe can look at the data for the third box, and compare the output of `boxplot.stats` to the output of `quantile`, as called by `stat_boxplot`. The middle three numbers should be the same, but they're not. (The first and last numbers aren't necessarily the same between the two methods, because they represent different things.)\n\n``` R\nx <- c(6, 8, 8.2, 9)\n\nboxplot.stats(x)$stats\n# 6.0 7.0 8.1 8.6 9.0\n\nqs <- c(0, 0.25, 0.5, 0.75, 1)\nquantile(x, qs)\n#  0%  25%  50%  75% 100% \n# 6.0  7.5  8.1  8.4  9.0 \n```\n\nHere's what the help file for `boxplot.stats` says:\n\n> The two \u2018hinges\u2019 are versions of the first and third quartile, i.e., close to \u2018quantile(x, c(1,3)/4)\u2019.  The hinges equal the quartiles for odd n (where \u2018n <- length(x)\u2019) and differ for even n.  Whereas the quartiles only equal observations for \u2018n %% 4 == 1\u2019 (n = 1 mod 4), the hinges do so _additionally_ for \u2018n %% 4 == 2\u2019 (n = 2 mod 4), and are in the middle of two observations otherwise.    \n\nA look into the code shows that `boxplot.stats` uses the `fivenum` function to get the box plot summary values. \n\n``` R\nfivenum(x)\n# 6.0 7.0 8.1 8.6 9.0\n```\n\nThis function could also be used in `stat_boxplot`, but I'm not sure how to generalize it to weighted box plots, because it references discrete data points (e.g., every fourth data point, do X). This could be simulated, but only if the weights are all integers.\n Apparently someone has written a replacement for fivenum that can deal with weighted values.\nhttp://www.stat.cmu.edu/~hseltman/files/WeightedBoxplot.R\n\nIt's in the function `wboxplot.stats`. I don't know how it works, though -- and I don't know if effectively it's any different from the method used in `stat_boxplot`.\n I actually don't think it would be horribly difficult. I think this block is effectively a replacement for `fivenum`:\n\n``` R\n    # stats <- stats::fivenum(x, na.rm = TRUE)\n    xw=cbind(x,weights)\n    xw=xw[nna,]\n    if (length(xw)==0) {\n      stats=rep.int(NA, 5)\n    } else {\n      xw=xw[order(xw[,1]),]\n      cs=c(0,cumsum(xw[,2])/sum(xw[,2]))\n      x0=c(xw[1,1],xw[,1])\n      n=length(x0)\n      stats=c(x0[1],NA,NA,NA,x0[n])\n      for (i in 2:4) {\n        pr=c(NA,0.25,0.5,0.75)[i]\n        v1=x0[cs==pr]\n        if (length(v1)==1) {\n          stats[i]=v1\n        } else {\n          n1=max((1:n)[cs<pr])\n          n2=min((1:n)[cs>pr])\n          pr1=cs[n1]; pr2=cs[n2]\n          v1=x0[n1]; v2=x0[n2]\n          stats[i]=v1+(pr-pr1)/(pr2-pr1)*(v2-v1)\n        }\n      }\n    }\n```\n\nSo for unweighted boxplots, you could just use `fivenum`, and for weighted boxplots you could use this code (assuming no licensing issues). This assumes that this code does what you want -- I don't what's supposed to be correct for a weighted boxplot, so I'm not able to make that evaluation...\n I've issued a pull request for a fix of the inverted whiskers. The other problem is still present.\n\nAfter some more investigation, I don't think it's possible to make a function based on weighted quartiles give exactly the same output as `fivenum` (or by extension `boxplot()`). According to the docs for `boxplot.stats`:\n\n>  The hinges equal the quartiles for odd n (where `n <- length(x)`) and differ for even n. Whereas the quartiles only equal observations for `n %% 4 == 1`, the hinges do so _additionally_ for `n %% 4 == 2`\n\nIn other words, quartiles and hinges don't always line up, and it depends on the exact number of observations. This example code illustrates:\n\n``` R\nqs <- c(0, 0.25, 0.5, 0.75, 1)\nx <- c(1, 2, 3)\n\nfivenum(x)\n# [1] 1.0 1.5 2.0 2.5 3.0\nas.numeric(quantile(x, qs))\n# [1] 1.0 1.5 2.0 2.5 3.0\n\nfivenum(c(x, x))\n# [1] 1 1 2 3 3\nas.numeric(quantile(c(x, x), qs))\n# [1] 1.00 1.25 2.00 2.75 3.00\n\nfivenum(c(x, x, x))\n# [1] 1 1 2 3 3\nas.numeric(quantile(c(x, x, x), qs))\n# [1] 1 1 2 3 3\n```\n\nI think there are two options:\n1. Use `fivenum` for unweighted data and cases where the weights have whole number values. For other cases, (where weights are non-integers), use the current quantreg method. Also make a note of it in the documentation.\n2. Always use quartiles.\n\nI'm inclined toward 2, mostly because I haven't been able to find any information saying that the method used in `fivenum` is better than using actual quartiles.\n\nOn top of all that, there apparently exist at least nine different ways out there of computing quartiles, so maybe it's not so important to get results that are consistent with any particular method.\nhttp://www.amstat.org/publications/jse/v14n3/langford.html\n  Allowing access to munch = T or F would allow to plot straight lines in coord_polar or coord_map for example. For coord_map this is already done through the \"fast\" argument. This request is for a similar feature in coord_polar (at least, I cannot see other uses in other coords but you might).\n\nHowever for this to work, issue #105 should be resolved.\n I think we can now do this on a per layer basis by setting segment_length to Inf.  I'll need to think about how to parameterise it though.\n  squares of color for continuous scales are misleading: virtually everyone interprets them as the fact that ggplot is doing n discrete classes of data/color and using only those in the plot (and this is reinforced by the fact that the legend looks exactly like the discrete colour legend). In addition, people are troubled by the fact that the min and max of the scale do not necessarily match the min and max in the data.\n\nI think that a gradient of color with numbers placed on the side (determined by the breaks argument) would be more appropriate. The gradient should go from the actual min to the actual max.\n\nI guess it is impossible to actually make a gradient in grid but 10 or so squares of color would readily give the illusion of a gradient. Anyhow, as long as there are at least one additional square between two breaks, people will understand that the scale is continuous.\n\nFor more complex scales where both size and colour are mapped to a continuous variable, shapes could be superposed to the gradient. Such as in this example:\n\nhttp://dl.dropbox.com/u/1047321/ggplot/scale_gradient_ggplot2.pdf\nhttp://dl.dropbox.com/u/1047321/ggplot/scale_gradient_ggplot2.svg\n\nHere is a bit of code to test this:\n\n```\nD = data.frame(x=runif(10), y=runif(10), z=runif(10))\n\nggplot(D) + geom_point(aes(x=x, y=y, colour=z, size=z))\n```\n I added the behaviour I think would be desirable with unevenly spaced breaks to the PDF example.\n\nCode:\n\n```\nD = data.frame(x=runif(10), y=runif(10), z=runif(10))\nggplot(D) + geom_point(aes(x=x, y=y, colour=z, size=z))\nlast_plot() + scale_colour_gradient(breaks=c(0.1, 0.2, 0.7))\n```\n I think a good visualization of a color scale that is extended by intermediate values is:\nthe color gradient scale, fully interpolated along the whole data range, and then the breaks as tick marks along the scale.\n  Currently scale_area removes negative values:\n\n```\nlibrary(\"ggplot2\")\n\nd <- data.frame(x=runif(10), y=runif(10), z=rnorm(10)*10)\n\nggplot(d) + geom_point(aes(x=x, y=y, size=z))\nggplot(d) + geom_point(aes(x=x, y=y, size=z)) + scale_area()\n# Warning messages:\n#1: In match.fun(get(\".transform\", .))(values) : NaNs produced\n#2: Removed 6 rows containing missing values (geom_point). \n# removes negative values\n```\n\nThis is because it just computes the sqrt of the original values. The side effect of this, by the way, it that the visual difference between scale_size and scale_area depends on the range of the data which square root is being computed, which seems wrong. Indeed, the sqrt transformation here should happen on the radius of the points on the graph, because it is that area we are concerned about (this is tricky, I hope I am being clear).\n\nSo in fact, scale_area should _map_ the original values to the domain defined by the 'to' argument (e.g. 1 to 6) and then compute the sqrt of that. It would solve both problems at once. The patch below transforms the data to be all positive but I don't see a way to define the inverse transformation and therefore get correct legend labels.\n\n```\ndiff --git a/R/trans-.r b/R/trans-.r\nindex f02e163..c180a2d 100644\n--- a/R/trans-.r\n+++ b/R/trans-.r\n@@ -107,6 +107,7 @@ TransLog1p <- Trans$new(\"log1p\", \"log1p\", \"expm1\", function(x) bquote(e^.(x+1)))\n TransPow10 <- Trans$new(\"pow10\",function(x) 10^x, \"log10\", function(x) log10(x))\n TransReverse <- Trans$new(\"reverse\", function(x) -x, function(x) -x, function(x) bquote(.(-x)))\n TransSqrt <- Trans$new(\"sqrt\", \"sqrt\", function(x) x^2, function(x) x^2)\n+TransArea <- Trans$new(\"area\", function(x) sqrt(x+abs(min(x))), function(x) x^2, function(x) x^2)\n\n TransDate <- Trans$new(\"date\", \"as.numeric\", \"to_date\")\n TransDatetime <- Trans$new(\"datetime\", \"as.numeric\", \"to_time\")\ndiff --git a/R/trans-scales.r b/R/trans-scales.r\nindex c918896..0fa79e8 100644\n--- a/R/trans-scales.r\n+++ b/R/trans-scales.r\n@@ -7,7 +7,7 @@ ScaleArea <- proto(\n   doc = FALSE,\n   new = function(., name=NULL, limits=NULL, breaks=NULL, labels=NULL, to = c(1, 6), legend = TRUE) {\n     .super$new(., name = name, limits = limits, breaks = breaks, \n-       labels = labels, trans=\"sqrt\", to = to, legend = legend)\n+       labels = labels, trans=\"area\", to = to, legend = legend)\n   }\n\n )\n```\n  Use case: when plotting the histograms of several variables at once, the user wants some control over the fineness of the breaks but cannot provide breaks of binwidth because the units of the variables are very different.\n\n```\nlibrary(ggplot2)\nd = data.frame(id=1:100, a=runif(100), b=runif(100)*20, c=runif(100)-10)\nd = melt(d, id=\"id\")\nggplot(d) + geom_bar(aes(x=value)) + facet_wrap(~variable, scales=\"free\")\n```\n  E.g.\n\n```\n ggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour=mpg), legend=F)\n```\n\nshould be equivalent to\n\n```\nggplot(mtcars, aes(wt, mpg)) + geom_point(aes(colour=mpg)) + opts(legend.position=\"none\")\n```\n This issue can be closed.\n  ```\nD <- data.frame(x=1:100, y=runif(100))\n ggplot(D) + geom_point(aes(x=x, y=y, fill=y))\n```\n\nfill shows up in the legend but not in the plot.\n Actually, the issue is even more general (hence the change of title): sometimes it is useful to have points with a stroke. For example, when superposing points to compare them:\n    D <- data.frame(x=1:10, y=runif(10), z1=runif(10), z2=runif(10))\n    # Example:\n    # x and y are locations in space, z1 and z2 are the abundances of two species of interest\n    D <- melt(D, id=c(\"x\",\"y\"))\n\n```\n# I want to compare both abundances spatially now I can do:\nggplot(D) + geom_point(aes(x=x, y=y, size=value)) + facet_wrap(~variable)\n# but, while it allows to tell which is abundant where, it makes it difficult to compare the abundances at each point\n\n# To do that, I would rather plot both on the same plot and use transparency\nggplot(D) + geom_point(aes(x=x, y=y, colour=variable, size=value), alpha=0.5)\n# but while this makes points in which z2 is less than z1 conspicuous, it does not show every well how much z1 is inferior to z2 on the others\n# Having a dark stroke on each point would help, but this\nggplot(D) + geom_point(aes(x=x, y=y, fill=variable, size=value), alpha=0.5)\n# works only in the legend, as shown above already\n\n# NB: maybe this\nggplot(D, aes(x=x, y=y, size=value)) + geom_point(data=D[,-3], colour=\"grey40\") +  geom_point() + facet_grid(~variable)\n# is the best solution to this particular problem; but it is a bit more convoluted to explain and does not solve the general issue that a point can have a fill and a stroke.\n```\n For me this looks like a bug, since it works in the legend as expected but not in the plot.\n It works in the plot too if you specify a shape out of c(21,22,23,24,25). Looks like the legend takes a different default shape than the plot.\n This is because geom_point$draw_legend automatically detect if the legend is filled or not.\nhttps://github.com/hadley/ggplot2/blob/master/R/geom-point-.r#L136\n\nThis looks like designed behavior but I'm not sure.\n@Hadley, Do you remember this?\n fixed in https://github.com/hadley/ggplot2/commit/b551d115f23ff964d8f3bc89587cc745c31693a4\n This issue can be closed.\n Good to hear about that. I will do that in future commits.\n @kohske - There are a number of keywords you can put in your commit messages that perform operations on github:\n\n> We support a number of synonyms:\n> \n> `fixes #xxx`\n> `fixed #xxx`\n> `fix #xxx`\n> `closes #xxx`\n> `close #xxx`\n> `closed #xxx`\n\nIf you want to refer to an issue without closing it, you can also use `refs #xxx` in your commit message as well. Github will automatically make the issue number a hyperlink. ([example](https://github.com/briandk/granovaGG/commit/0ae8f524d9e8b6f5e6c66936a80d5381d851dfbd)).\n\n**Source**: https://github.com/blog/831-issues-2-0-the-next-generation\n @briandk Thanks a lot!!\n  Consider this use case, where I plot a series over rectangles which represent a binary response\n\n```\nd <- data.frame(x=1:50, y=runif(50), z=rep(c(T,F,T,T,F), each=10))\nggplot(d) + geom_rect(aes(xmin=x-0.5, xmax=x+0.5, ymin=-Inf, ymax=Inf, fill=z)) + geom_path(aes(x=x, y=y))\n```\n\nRather than the color, I would prefer to have \"something\" when z is TRUE et nothing when z is FALSE (simpler, clearer, etc.). So:\n\n```\nggplot(d) + geom_rect(aes(xmin=x-0.5, xmax=x+0.5, ymin=-Inf, ymax=Inf, alpha=z)) + geom_path(aes(x=x, y=y))\n```\n\nbut then I have no way of knowing which is which because there is no legend... So I did:\n\n```\nggplot(d) + geom_rect(aes(xmin=x-0.5, xmax=x+0.5, ymin=-Inf, ymax=Inf, fill=z, alpha=z)) + geom_path(aes(x=x, y=y))\n```\n\nBut even then, the legend does not reflect the transparency of the FALSE parts.\n This seems related to the fact that there is no scale_alpha_discrete, which is also a problem. Consider that, in the example above, I want the TRUE parts (those that show) to be half transparent so that the grid can still be seen underneath. I would do:\n\n```\nggplot(d) + geom_rect(aes(xmin=x-0.5, xmax=x+0.5, ymin=-Inf, ymax=Inf, alpha=z)) + geom_path(aes(x=x, y=y)) + scale_alpha_continuous(to=c(0,0.5))\n```\n\nBut this results in:\n\n**Error: Non-continuous variable supplied to scale_alpha_alpha_continuous.**\n\nFirst note the two \"alpha\" above. Then I should have been able to use scale_alpha_discrete in this case.\n The ggExtra package provides a scale_alpha_manual, which may be able to do what you want.\n  For the sake of simplicity in the future\n- make gradient behave as gradientn i.e. add a colours argument\n- give a \"deprecated\"  warning when gradient2, gradientn or the options high and low in gradient are used\n- ultimately, keep gradient2 and gradientn active for backward compatibility but do not expose them in the package\n  ```\nd <- data.frame(a=letters[1:2], x=runif(100), y=runif(100))\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~.)\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~.) + geom_vline(xintercept=0.5)\n# OK\n```\n\nNow, if faceting factors have to be recomputed, geom_hline or vline add some factor levels:\n\n```\nd$a <- as.character(d$a) # so that factors have to be recomputed\n\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~.) + geom_vline(xintercept=0.5)\n# -> two extra factor levels\n# try to specify the location completely\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~.) + geom_vline(aes(xintercept=x), data=data.frame(a=\"b\", x=0.5))\n# -> still not working\n\n# faceting direction does not mater\nggplot(d) + geom_point(aes(x,y)) + facet_grid(.~a) + geom_vline(aes(xintercept=x), data=data.frame(a=\"b\", x=0.5))\n# -> still not working\n\n# geom_hline is affected similarly\nggplot(d) + geom_point(aes(x,y)) + facet_grid(.~a) + geom_hline(yintercept=0.5)\nggplot(d) + geom_point(aes(x,y)) + facet_grid(a~.) + geom_hline(yintercept=0.5)\n```\n Could you please elucidate what you mean by not working?\n I get extra factor levels. See: http://dl.dropbox.com/u/1047321/ggplot/geom_vline.pdf for all the plots above.\n Oh, I see it now. Thanks for the bug report!\n  Let's consider this data    \n\n```\nd <- data.frame(x=1:5, y=c(runif(5), runif(5)+5), a=rep(c(\"foo\",\"bar\"), each=5))\n```\n\nThe scale for y should be free. Faceting along the horizontal makes it impossible since there should only be one y scale:\n\n```\nggplot(d) + geom_point(aes(x=x, y=y)) + facet_grid(.~a, scales=\"free_y\")\n```\n\nThis makes sense but a warning would be welcome (\"Warning: The y scale cannot be free in this faceting configuration\")\n\nNow faceting along the vertical or switching the coordinates allows a free scale\n\n```\nggplot(d) + geom_point(aes(x=x, y=y)) + facet_grid(a~., scales=\"free_y\")\nggplot(d) + geom_point(aes(x=y, y=x)) + facet_grid(.~a, scales=\"free_x\")\n```\n\nBut flipping the coordinate system does not, while there are now two different axes for y\n\n```\nggplot(d) + geom_point(aes(x=x, y=y)) + facet_grid(.~a, scales=\"free_y\") + coord_flip()\n```\n\nI would expect this last plot to look just like the previous one.\n Hi,\n\nI've also encountered this problem. I wanted to use free scales so that elements that appear only in one facet won't appear in the axes of another (using a discrete scale). I couldn't use the above workaround, as I wanted to use geom_bar, so I had to use geom_rect instead, and reverse the coordinates manually.\n   Do you need any help in implementing this?\n  ```\ndf <- data.frame(x = c(\"a\", \"b\"), y = 1:2)\n\nbase <- ggplot(df, aes(x, y)) + geom_point()\nbase\nbase + scale_x_discrete(breaks = c(\"b\", \"a\"), \n  labels = c(\"beta\", \"alpha\"))\n```\n  Should be able to specify: number, distance between, range, etc.\n  ```\nrequire(ggplot2)\ndata <- data.frame(x = 1:10, y = exp(0:9))\nggplot(data, aes(x, y)) + geom_point() +\n   geom_hline(yintercept = 9) + geom_vline(xintercept = 2)\nlast_plot() + coord_trans(y = 'log')\n```\n  ```\nlibrary(ggplot2)\np <- qplot(cty, hwy, data = mpg, colour = displ)\n\np + opts(legend.justification = c(\"right\", \"top\"), \n         legend.position = c(1, 1))\n\np + opts(legend.justification = c(\"left\", \"bottom\"), \n        legend.position = c(0, 0))\n```\n\nShould be drawn in panels viewport\n This is difficult to do because viewports need to be defined once and then have stuff put in them.\n  e.g. date and character\n Here here! \n\nFor dates, the workaround is to wrap the Date with as.numeric, ala: geom_vline(xintercept=as.numeric(Sys.Date))\n ``` r\nDF <- data.frame(dt = as.Date(\"2000-01-01\")+0:20, val=0:20)\n\nggplot(DF, aes(x=dt, y=val)) +\n  geom_point() +\n  geom_vline(xintercept=as.Date(\"2000-01-10\"))\n\nggplot(DF, aes(x=dt, y=val)) +\n  geom_point() +\n  geom_vline(xintercept=as.numeric(as.Date(\"2000-01-10\")))\n```\n\nThe first does not have a vertical line; the second does, at the expected location.  This was run with 0.8.9.  This is not up to a testable example, but it is a start.\n\nIf you are going to handle non-numeric scales, then this should work as well\n\n``` r\nggplot(iris, aes(x=Species, y=Sepal.Length)) +\n  geom_point() +\n  geom_vline(xintercept=\"setosa\")\n```\n I know this issue is more than 2 years old but I figured I'd add a comment.\n\nWhen using the following code (DF from above in this case):\n\n``` r\nggplot(DF, aes(x=dt, y=val)) +\n    geom_point() +\n    geom_vline(\n        xintercept = as.numeric(as.Date(\"2001-01-10\")))\n```\n\nOne has to be careful that the values used for the x-axis date-values are formatted using the same standard.\n\nFor instance, if your data-frame `DF` contains dates formatted using `as.POSIXct` instead of `as.Date` your plot will look quite weird. e.g.:\n\n``` R\nDF <- data.frame(dt = as.POSIXct(\"2000-01-01\")+0:20, val=0:20)\n\nggplot(DF, aes(x=dt, y=val)) +\n  geom_point() +\n  geom_vline(xintercept=as.Date(\"2000-01-10\"))\n\nggplot(DF, aes(x=dt, y=val)) +\n  geom_point() +\n  geom_vline(xintercept=as.numeric(as.Date(\"2000-01-10\")))\n```\n\nFor instance, the `as.numeric` values for the date \"2000-01-10\" is the following:\n- `as.POSIXct(\"2000-01-10\")`: 979084800\n- `as.Date(\"2000-01-10\")`: 11332\n\nThis example is trivial since we know that `DF` has been defined with `as.Date` but I've encountered larger codebases where the likes of :\n\n``` R\nformat(as.POSIXct(\"2001-01-10\"), format=\"%Y-%m-%d\")\n```\n\nmade it a lot more annoying to process when generating plots.\n\nIt is a really simple tip however if you are running larger sequential list of intercepts and your dataset is large, your memory will burst in tears straight through the roof.\n  On lattice, many plotting functions accept an option called 'layout' that allows to define in many rows, columns and pages a plot should be drawn.\nFor example, if you give 'layout=c(3,4)' the plots will contain 3x4 facets, and if there are more than 3 or 4 groups the plots will be plotted in a new page, which is particularly useful when you are plotting to a pdf.\nI couldn't find any equivalent in ggplot.. do you plan to introduce this functionality in the future? Thanks\n  geom_bar has as default stat=\"bin\", which is kind of counter intuitive:\n\nAccording to the documentation, geom_histogram is an alias for geom_bar + stat_bin, hence they are the same. Furthermore, geom_bar does not work when both x and y are mapped to a data variable, which is not exactly what you would expect from a bar geom.\n\nI think geom_bar with default stat=\"identity\", and maybe position=\"dodge\" would deliver the most intuitive result.\n\nconsider this super simple example:\n\nyear <- 2001:2010;\ninflation<- runif(10);\nqplot(year, inflation,geom=\"bar\"); #returns error\nqplot(year, inflation,geom=\"bar\",stat=\"identity\"); #makes more sense.\n  if you use geom_smooth and facets on a dataset, and one of the facets would contains too few points to calculate the smoothing, the command fail and I don't get any plot, not even for the other facets that have enough point to calculate it.\n  See e.g. kde2d.weighted:\nhttp://web.mit.edu/piantado/www/blog/nonindep-density.R. \n I am sorry if this I am missing something, I haven't found anything online related. Has this feature been implemented? Thanks very much.\n  e.g.\n\n```\nqplot(mpg, wt, data = mtcars) + \n  opts(axis.line = theme_segment())\n```\n fixed, but somewhat quick way.\nNote for further improvement.\n\nThis is relevant to z-index problem.\nNow, there is no _explicit_ way to specify the order of drawing in a gtable.\nSo, two way to do this:\n1) add the geom in the order that you want to draw. rule: fifo.\n2) change the order of gtable$layout and gtable$geom.\n\nThe 2 maybe sufficient but maybe it is better if gtable as a methods to do this.\n\na) gtable$layout might have \"z-index\" column: the notion is from opengl.\nb) gtable$layout might have \"order\" column. In this case, the difficulty is that a new child is added to the existing gtable in the middle of drawing order.\n  Example:\n\n``` R\nqplot(x, y, data=data.frame(x=1:2, y=1:2), colour=x)+\n  geom_path(size=10, lineend=\"round\") +\n  scale_size_identity()\n```\n\nThe legend grob doesn't use these settings,\n\n  draw_legend <- function(., data, ...) {\n    data$arrow <- NULL\n    data <- aesdefaults(data, .$default_aes(), list(...))\n\n```\nwith(data, \n  ggname(.$my_name(), segmentsGrob(0.1, 0.5, 0.9, 0.5, default.units=\"npc\",\n  gp=gpar(col=alpha(colour, alpha), lwd=size * .pt, \n    lty=linetype, lineend=\"butt\")))\n)\n```\n\n  }\n  ```\ndf <- data.frame(a = abs(rnorm(26)),letters)\nplot <- ggplot(df,aes(a,letters)) + geom_point() \n\nplot + coord_trans(x = \"log10\")\nplot + coord_trans(x = \"sqrt\")\nplot + coord_trans(x = \"sqrt\", y = \"inverse\")\n```\n Need warning message when applying transform to discrete scale, and then just ignore.\n  So you can run it yourself to see what the breaks are.\n  Presumably related to calculating \n\n```\nnber.dates <- structure(list(Start = structure(c(1430, 3683, 4230, 7517, 11413, 13879), class = \"Date\"), End = structure(c(1915, 3864, 4716, 7759, 11656, NA), class = \"Date\")), .Names = c (\"Start\", \"End\"), row.names = 28:33, class = \"data.frame\")\n\n# Doesn't plot\nggplot(aes(date, unemploy), data = economics) + \n  geom_rect(aes(NULL, NULL, xmin = Start, xmax = End, \n    ymin = -Inf, ymax = Inf), data = nber.dates)\n\n# Produces spurious warnings\nlast_plot() + geom_line()\n```\n Second case fixed in 9d77372931dfe634d6c128def51eeb7ae494d532\n This has started to happen again after upgrading to 0.9.0, although now, adding `geom_blank` before `geom_rect` no longer suppresses the warnings.\n  e.g. in my documentation script, and for Indrek Seppo on ubuntu.\n I changed the quietly=TRUE to FALSE in try_require and tracebacked the error. Cant really read anything out of it myself though.\n\n<pre><<code> \n> try_require\nfunction (package)\n{\navailable <- suppressMessages(suppressWarnings(sapply(package,\n  require, quietly = FALSE, character.only = TRUE, warn.conflicts = FALSE)))\n missing <- package[!available]\n if (length(missing) > 0)\n stop(paste(package, collapse = \", \"), \" package required for this functionality.  Please install and try again.\",\n  call. = FALSE)\n}\n> msamp <- movies[sample(nrow(movies), 1000), ]\n> m <- ggplot(msamp, aes(y=rating, x=year)) + geom_point()\n> m + stat_quantile()\nError in do.call(\"layer\", list(mapping = mapping, data = data, geom = geom,  :\n  object 'rq' not found\n> traceback()\n4: do.call(\"layer\", list(mapping = mapping, data = data, geom = geom,\n stat = ., position = position, ...))\n3: get(\"new\", env = StatQuantile, inherits = TRUE)(StatQuantile,\n  ...)\n2: StatQuantile$new(mapping = mapping, data = data, geom = geom,\n position = position, quantiles = quantiles, formula = formula,\n method = method, na.rm = na.rm, ...)\n1: stat_quantile()\n\n</code> </pre>\n\n That's just the can't find package error, so it's not really helpful.\n    ```\nmyd <- data.frame(\n  myvar = c(1,5,10,50,100,500,1000,5000,10000),\n  myvarb = c(1:9)\n)\n\nbase <- ggplot(myd, aes(myvarb, myvar))+\n  geom_point()+\n  geom_abline(intercept = 1, slope = 100)\n\nbase + scale_y_log10()\n```\n I'm not even really sure what it should display - i.e. should it display a curved line? The slope parameter doesn't really have a lot of meaning in log coordinates.  Similarly the default intercept of 0 is not very useful.\n Could `slope` not be interpreted as `x*slope`, thus resulting in the curved line `y~log(slope*x)`\n  Although in principle it should be fairly straightforward.\n Hi Hadley, \n\nI was wondering if you could offer any work-arounds for this issue. I found myself multiple times in this situation.\n\nthanks,\neli\n Currently no work around sorry - it requires a rather large rewrite of the layout system.\n  ```\nggplot(mtcars, aes(mpg, wt)) + \n  geom_point() + \n  geom_rect(xmin = 15, xmax = 20, ymin = 3, ymax = 5)\n```\n\nvs.\n\n```\nggplot() + \n  geom_point(aes(mpg, wt), data = mtcars) + \n  geom_rect(xmin = 15, xmax = 20, ymin = 3, ymax = 5)\n```\n Same underlying issue as #31 - ggplot doesn't know how to work out whether or not there's enough data in the layer for it to display successfully.\n  For example,\n\n```\nqplot(mpg, wt, data = mtcars) + \n  geom_point(data = data.frame(), colour = \"red\")\n```\n\nshould display black points.\n\nThis can occur when subsetting and is annoying.\n   bump?  I would love to have this ... should I try to dig in and write it myself or is it likely to be tricky?\n I'm trying to implent this. However, I cannot figure out why it doesn't render the parsed labels, instead I get expression(...).\nHere's my modified code:\nfacet_strips.wrap <- function(facet, panel, theme) {\n  labeller <- match.fun(facet$labeller)\n\n  labels_df <- panel$layout[names(facet$facets)]\n  labels_df[] <- llply(labels_df, function(df) labeller(names(df), df))\n\n  labels <- apply(labels_df, 1, paste, collapse=\", \")\n\n  list(t = llply(labels, ggstrip, theme = theme))\n}\n\nWhat am I missing?\n   Is there a simple example?\n  Because setting it is confusing.\n Should remove all scales that are just variants on scale continuous with trans set.  `scale_(x|y)_*` should be built by the accessor builders.\n  In this example, points and lines are used for both values.\n\n```\ndf.actual <- data.frame(x = 1:10, y = 1:10)\ndf.approx <- data.frame(x = 1:15, y = 1:15 + rnorm(15, sd = 3))\nggplot(df.actual, aes(x, y)) +\n  geom_point(aes(colour=\"Actual\")) +\n  geom_line(aes(colour=\"Approximate\"), data=df.approx)\n```\n Another example:\n\n```\ntime <- 1:20\nd <- data.frame( \n  t = rep(time,2), \n  type = rep(c(\"sin\",\"cos\"),each = 20),\n  value= c(sin(time * 2*pi/100), cos(time * 2*pi/100)))\nggplot(d, aes(t, value, colour = type)) + \n  geom_line() + \n  geom_line(subset = .(type == \"sin\"), linetype = 3, size = 2)\n```\n And possibly this one too:\n\n```\nset.seed(123)\nx <- paste(\"a\", 1:16, sep=\"\")\ny <- gl(2, 8, labels = c(\"Control\", \"Treat\"))\nz <- runif(16) * 5\ndf <- data.frame(x,y,z)\n\nggplot(df, aes(z, x, color=y)) + \n  geom_point()\nlast_plot() + geom_vline(xintercept = 1)\n```\n And one more:\n\n```\ndat <- structure(list(x = c(1.9999999, 1.9999998, 1.9999997, 1.9999996, \n14.0000001, 14.0000002, 14.0000003, 14.0000004), y = c(567.385, \n569.415, 560.28, 570.43, 501.41, 499.38, 503.44, 504.455)), .Names = c(\"x\", \n\"y\"), row.names = c(NA, -8L), class = \"data.frame\")\n\nggplot(dat, aes(x,y)) + \n  geom_point(aes(colour = \"measurement\")) + \n  stat_smooth(aes(colour =  \"smooth\"), method = lm) + \n  geom_hline(aes(colour = \"mean\", yintercept=480))\n```\n Maybe I will rewrite the legend-layer-scale mapping. see also https://github.com/hadley/ggplot2/issues/225#issuecomment-2995523\nSo this is in my todo list.\n  ```\nqplot(mpg, wt, data = mtcars) + facet_grid(vs ~ am, margins = \"grand_col\")\n```\n This will probably have to wait until I've reworked the data structures for facetting.  reshape::stamp currently doesn't give enough control (or maybe is buggy - is adding all margins when add.missing = T)\n Putting a breadcrumb here in case anyone else is looking at/for this.\n\nFormat is different than listed in the initial issue. Working format is:\n\n``` r\nqplot(mpg, wt, data = mtcars) + facet_grid(vs ~ am, margins = \"am\")\n```\n\n`margins` can be a character vector of variable names across which margins should be made.\n", "text_all_count": 25880, "text_word_token": ["I", "would", "think", "it", "would", "be", "better", "for", "na", "NUMBER", "value", "to", "default", "to", "blank", "that", "be", "miss", "data", "would", "by", "default", "not", "show", "up", "NUMBER", "This", "be", "relate", "to", "Issue", "NUMBER", "and", "Issue", "NUMBER", "There", "the", "specific", "geom", "geom_segment", "was", "modify", "to", "eliminate", "NA", "NUMBER", "Addressing", "this", "at", "the", "scale", "level", "would", "mean", "that", "each", "geom", "would", "not", "have", "to", "be", "change", "NUMBER", "Changes", "here", "should", "be", "then", "see", "if", "the", "change", "in", "NUMBER", "should", "be", "revert", "so", "that", "geom_segment", "can", "represent", "NA", "values", "if", "desired", "NUMBER", "Finally", "the", "change", "need", "to", "appear", "in", "both", "scale_linetype", "and", "scale_linetype_manual", "because", "that", "has", "a", "different", "instantiation", "path", "NUMBER", "I", "don", "t", "know", "if", "scale_linetype_identity", "should", "have", "this", "as", "well", "NUMBER", "Effectively", "the", "problem", "be", "that", "the", "default", "value", "for", "na", "NUMBER", "value", "NA", "be", "not", "a", "valid", "value", "for", "linetypes", "and", "so", "any", "use", "of", "linetype", "must", "have", "a", "different", "default", "NUMBER", "Citation", "for", "NA", "not", "be", "valid", "be", "in", "the", "help", "for", "par", "under", "the", "Line", "Type", "Specification", "section", "NUMBER", "Note", "that", "NA", "be", "not", "a", "valid", "value", "for", "lty", "NUMBER", "I", "see", "that", "I", "m", "not", "typing", "fast", "enough", "because", "a", "commit", "has", "already", "be", "made", "on", "this", "but", "the", "above", "points", "need", "to", "be", "address", "for", "this", "to", "be", "considered", "close", "NUMBER", "wch", "Well", "I", "think", "having", "a", "default", "value", "which", "will", "result", "in", "an", "error", "especially", "as", "cryptic", "an", "error", "as", "this", "gives", "be", "a", "problem", "NUMBER", "Consider", "r", "ggplot", "data", "msleep", "aes", "x", "brainwt", "y", "bodywt", "linetype", "factor", "vore", "group", "vore", "geom_line", "scale_linetype_manual", "values", "c", "solid", "NUMBER", "NUMBER", "NUMBER", "Error", "in", "grid", "NUMBER", "Call", "NUMBER", "graphics", "L_lines", "x", "x", "x", "y", "index", "x", "arrow", "invalid", "hex", "digit", "in", "color", "or", "lty", "In", "addition", "Warning", "message", "Removed", "NUMBER", "rows", "containing", "miss", "values", "geom_path", "NUMBER", "ggplot", "data", "msleep", "aes", "x", "brainwt", "y", "bodywt", "linetype", "factor", "vore", "group", "vore", "geom_line", "scale_linetype_manual", "values", "c", "solid", "NUMBER", "NUMBER", "NUMBER", "na", "NUMBER", "value", "blank", "Warning", "message", "Removed", "NUMBER", "rows", "containing", "miss", "values", "geom_path", "NUMBER", "Identity", "be", "even", "worse", "because", "it", "seems", "na", "NUMBER", "value", "do", "not", "even", "have", "an", "effect", "possibly", "an", "altogether", "different", "bug", "r", "mymsleep", "TAG", "NUMBER", "aes", "strptime", "Time", "H", "M", "log_ret", "plot_cleared", "geom_point", "alpha", "NUMBER", "NUMBER", "xlab", "Time", "ylab", "Log", "return", "scale_y_continuous", "limits", "c", "NUMBER", "NUMBER", "it", "works", "fine", "I", "draw", "several", "graphs", "it", "always", "warns", "that", "some", "rows", "contain", "miss", "values", "as", "in", "the", "subject", "above", "but", "after", "some", "playing", "around", "with", "graphs", "generally", "change", "parameter", "like", "NUMBER", "to", "something", "different", "starts", "to", "produce", "error", "from", "the", "warning", "NUMBER", "It", "seems", "as", "if", "something", "internally", "change", "options", "warnings", "to", "a", "value", "that", "converts", "warnings", "to", "error", "NUMBER", "I", "haven", "t", "be", "able", "to", "check", "it", "because", "it", "hasn", "t", "happened", "since", "I", "came", "up", "with", "this", "explanation", "NUMBER", "The", "data", "didn", "t", "change", "at", "all", "so", "the", "only", "explanation", "be", "ggplot", "NUMBER", "or", "some", "interaction", "between", "data", "NUMBER", "table", "and", "ggplot", "NUMBER", "which", "be", "weird", "because", "data", "NUMBER", "table", "should", "pretend", "to", "be", "data", "NUMBER", "frame", "NUMBER", "The", "error", "doesn", "t", "go", "away", "with", "unloading", "of", "the", "package", "so", "it", "support", "the", "option", "variant", "but", "when", "I", "restart", "the", "r", "session", "it", "be", "fine", "NUMBER", "I", "cannot", "even", "share", "the", "data", "because", "they", "be", "confidential", "NUMBER", "Cleaner", "commit", "of", "pull", "request", "NUMBER", "I", "reordered", "the", "class", "attribute", "of", "element", "objects", "so", "that", "the", "subclass", "be", "listed", "first", "NUMBER", "As", "it", "stands", "now", "an", "S", "NUMBER", "method", "could", "not", "be", "write", "for", "element_blank", "etc", "NUMBER", "Implements", "setting", "of", "only", "one", "limit", "of", "a", "continuous", "scale", "by", "specify", "NA", "for", "the", "limit", "which", "you", "don", "t", "want", "to", "set", "NUMBER", "See", "NUMBER", "I", "had", "to", "use", "NA", "instead", "of", "NULL", "to", "implement", "this", "as", "be", "NUMBER", "null", "be", "not", "vectorized", "a", "vector", "with", "null", "at", "any", "location", "be", "TRUE", "NUMBER", "I", "agree", "with", "all", "of", "your", "comments", "the", "new", "commit", "should", "fix", "them", "NUMBER", "Also", "thanks", "for", "point", "out", "the", "any", "function", "I", "was", "not", "aware", "of", "it", "and", "it", "makes", "the", "code", "much", "clearer", "I", "always", "thought", "the", "sum", "logicals", "idiom", "seem", "hacky", "NUMBER", "Thanks", "for", "the", "comments", "Is", "there", "anything", "else", "you", "need", "from", "this", "pull", "request", "in", "order", "to", "merge", "it", "I", "would", "be", "happy", "to", "make", "any", "change", "needed", "NUMBER", "Hi", "Jim", "at", "the", "moment", "I", "m", "work", "on", "other", "projects", "besides", "ggplot", "NUMBER", "but", "when", "I", "get", "back", "to", "it", "I", "ll", "be", "able", "to", "take", "a", "closer", "look", "at", "the", "pull", "request", "NUMBER", "Offhand", "it", "looks", "fine", "but", "merge", "change", "like", "this", "requires", "some", "careful", "consideration", "to", "make", "sure", "it", "that", "it", "s", "do", "right", "and", "also", "that", "it", "doesn", "t", "introduce", "subtle", "bug", "NUMBER", "I", "reordered", "the", "class", "attribute", "of", "element", "objects", "so", "that", "the", "subclass", "be", "listed", "first", "NUMBER", "As", "it", "stands", "now", "an", "S", "NUMBER", "method", "could", "not", "be", "write", "for", "element_blank", "etc", "NUMBER", "Will", "do", "NUMBER", "I", "m", "sorry", "about", "the", "spurious", "change", "and", "I", "m", "not", "trying", "to", "sound", "like", "a", "dick", "but", "problem", "be", "with", "the", "ggplot", "source", "The", "ggplot", "source", "it", "be", "filled", "with", "trail", "whitespace", "something", "which", "most", "projects", "disallow", "for", "this", "very", "reason", "NUMBER", "Could", "you", "cleanup", "the", "code", "to", "remove", "all", "the", "trail", "whitespace", "Or", "I", "could", "submit", "a", "patch", "that", "do", "it", "NUMBER", "And", "I", "was", "loathe", "to", "mention", "it", "because", "it", "be", "your", "project", "so", "you", "set", "the", "code", "style", "NUMBER", "It", "be", "just", "that", "in", "this", "case", "the", "consensus", "appears", "to", "be", "to", "not", "allow", "them", "R", "internals", "LINK", "project", "NUMBER", "org", "doc", "manuals", "R", "ints", "NUMBER", "html", "Linux", "kernel", "Drupal", "Mozilla", "Keberos", "SO", "LINK", "add", "only", "non", "whitespace", "change", "and", "basically", "any", "code", "convention", "I", "can", "find", "prohibit", "trail", "whitespace", "NUMBER", "Even", "without", "a", "text", "editor", "pre", "commit", "hooks", "can", "be", "add", "to", "git", "to", "strip", "out", "the", "trail", "whitespace", "NUMBER", "Here", "LINK", "trail", "whitespace", "be", "a", "diff", "that", "remove", "all", "the", "trail", "whitespace", "there", "were", "NUMBER", "lines", "in", "the", "r", "file", "NUMBER", "But", "I", "know", "that", "you", "set", "the", "code", "standards", "and", "I", "ll", "adjust", "NUMBER", "And", "I", "know", "that", "it", "be", "frustrating", "from", "you", "end", "to", "have", "extraneous", "lines", "in", "diffs", "but", "it", "be", "also", "frustrating", "from", "the", "submitters", "end", "NUMBER", "I", "have", "a", "couple", "of", "patches", "that", "I", "ve", "sat", "on", "because", "I", "it", "be", "too", "tedious", "to", "add", "back", "in", "trail", "whitespace", "to", "get", "it", "to", "work", "NUMBER", "Is", "Rstudio", "going", "to", "add", "that", "feature", "soon", "Also", "what", "do", "you", "mean", "by", "branch", "from", "hadley", "master", "I", "keep", "jrnold", "master", "in", "sync", "with", "hadley", "master", "and", "then", "make", "a", "new", "branch", "for", "any", "feature", "fix", "NUMBER", "I", "was", "taking", "the", "example", "ESS", "config", "file", "ess", "nuke", "trail", "whitespace", "p", "as", "endorsing", "no", "trail", "whitespace", "NUMBER", "But", "I", "didn", "t", "grep", "it", "so", "apparently", "that", "isn", "t", "followed", "in", "practice", "NUMBER", "Google", "s", "code", "standards", "for", "C", "excludes", "trail", "whitespace", "and", "so", "do", "the", "Linux", "kernell", "LINK", "with", "references", "to", "git", "NUMBER", "I", "still", "think", "it", "be", "better", "to", "require", "no", "trail", "whitespace", "in", "any", "code", "that", "version", "but", "the", "decision", "isn", "t", "mine", "to", "make", "so", "at", "this", "point", "I", "ll", "shut", "up", "and", "make", "sure", "to", "turn", "off", "nuking", "whitespace", "when", "I", "edit", "ggplot", "NUMBER", "I", "ll", "close", "this", "request", "and", "open", "a", "new", "branch", "to", "make", "those", "couple", "of", "change", "without", "all", "the", "extraneous", "line", "diffs", "NUMBER", "I", "would", "like", "to", "print", "some", "explanation", "next", "below", "the", "plot", "NUMBER", "This", "seems", "to", "be", "really", "hard", "LINK", "text", "below", "the", "plot", "generate", "by", "ggplot", "NUMBER", "It", "would", "be", "nice", "if", "ggplot", "would", "have", "a", "call", "like", "p", "TAG", "see", "NUMBER", "NUMBER", "This", "be", "something", "that", "I", "think", "be", "outside", "of", "the", "scope", "of", "ggplot", "NUMBER", "and", "it", "s", "usually", "much", "easier", "to", "do", "outside", "of", "R", "NUMBER", "From", "my", "point", "of", "view", "it", "be", "the", "same", "as", "ggtitle", "NUMBER", "Having", "to", "do", "this", "outside", "of", "R", "would", "mean", "that", "it", "can", "t", "be", "use", "in", "knitr", "NUMBER", "and", "inside", "R", "like", "in", "the", "mention", "stackoverflow", "question", "be", "really", "hard", "NUMBER", "This", "isn", "t", "about", "add", "a", "captions", "like", "in", "latex", "but", "more", "like", "C", "ggplot", "NUMBER", "developers", "Data", "from", "big", "survey", "of", "anything", "TAG", "I", "guess", "he", "was", "wrong", "about", "the", "second", "part", "NUMBER", "Definitely", "yes", "Here", "be", "the", "other", "person", "who", "loves", "the", "NUMBER", "Rpackages", "NUMBER", "But", "okey", "I", "can", "manage", "things", "by", "myself", "NUMBER", "Maybe", "I", "be", "wrong", "I", "always", "think", "if", "the", "aesthetics", "control", "be", "not", "mapped", "to", "variable", "I", "don", "t", "have", "to", "pass", "it", "with", "aes", "NUMBER", "But", "looks", "it", "s", "not", "true", "with", "geom_tile", "NUMBER", "NUMBER", "Here", "be", "an", "example", "Generate", "data", "library", "ggplot", "NUMBER", "pp", "TAG", "sessionInfo", "R", "Under", "development", "unstable", "NUMBER", "NUMBER", "NUMBER", "r", "NUMBER", "Platform", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "gnu", "NUMBER", "bit", "locale", "NUMBER", "LC_CTYPE", "zh_CN", "NUMBER", "UTF", "NUMBER", "LC_NUMERIC", "C", "NUMBER", "LC_TIME", "en_US", "NUMBER", "UTF", "NUMBER", "LC_COLLATE", "en_US", "NUMBER", "UTF", "NUMBER", "NUMBER", "LC_MONETARY", "en_US", "NUMBER", "UTF", "NUMBER", "LC_MESSAGES", "en_US", "NUMBER", "UTF", "NUMBER", "NUMBER", "LC_PAPER", "C", "LC_NAME", "C", "NUMBER", "LC_ADDRESS", "C", "LC_TELEPHONE", "C", "NUMBER", "LC_MEASUREMENT", "en_US", "NUMBER", "UTF", "NUMBER", "LC_IDENTIFICATION", "C", "attached", "base", "package", "NUMBER", "stats", "graphics", "grDevices", "utils", "datasets", "methods", "base", "other", "attached", "package", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "colorspace_", "NUMBER", "NUMBER", "compiler_", "NUMBER", "dichromat_", "NUMBER", "NUMBER", "digest_", "NUMBER", "NUMBER", "grid_", "NUMBER", "labeling_", "NUMBER", "MASS_", "NUMBER", "NUMBER", "memoise_", "NUMBER", "NUMBER", "munsell_", "NUMBER", "plyr_", "NUMBER", "proto_", "NUMBER", "NUMBER", "RColorBrewer_", "NUMBER", "NUMBER", "NUMBER", "reshape", "NUMBER", "_", "NUMBER", "scales_", "NUMBER", "stringr_", "NUMBER", "tools_", "NUMBER", "This", "looks", "like", "an", "issue", "with", "stat_identity", "R", "Width", "works", "with", "bin", "ggplot", "PlantGrowth", "aes", "x", "group", "geom_boxplot", "width", "NUMBER", "stat", "bin", "Width", "doesn", "t", "work", "with", "identity", "pgsub", "TAG", "Those", "function", "be", "in", "the", "scales", "package", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "Is", "there", "a", "reason", "to", "have", "both", "a", "CHANGELOG", "and", "a", "NEWS", "file", "Looks", "like", "the", "former", "hasn", "t", "be", "update", "NUMBER", "No", "reason", "NUMBER", "I", "think", "we", "can", "either", "delete", "CHANGELOG", "or", "move", "it", "into", "NEWS", "I", "find", "myself", "needing", "a", "cumulative", "stat_bin", "function", "for", "some", "graphing", "work", "I", "was", "doing", "similar", "to", "the", "discussion", "here", "LINK", "_GKoGI", "NUMBER", "J", "NUMBER", "Anyway", "as", "this", "be", "my", "first", "foray", "into", "the", "ggplot", "NUMBER", "code", "it", "be", "possible", "there", "be", "a", "better", "way", "solution", "NUMBER", "Still", "I", "hacked", "stat_cbin", "together", "and", "it", "has", "worked", "quite", "well", "for", "my", "needs", "so", "I", "thought", "I", "d", "pass", "it", "on", "in", "case", "be", "useful", "for", "inclusion", "NUMBER", "or", "ggplot", "simple", "aes", "x", "stat_bin", "aes", "y", "cumsum", "NUMBER", "count", "NUMBER", "will", "work", "similarly", "NUMBER", "Thanks", "for", "the", "contribution", "I", "don", "t", "think", "it", "s", "commonly", "enough", "to", "include", "in", "ggplot", "NUMBER", "but", "we", "re", "work", "on", "ways", "to", "make", "it", "easier", "to", "distribute", "additional", "geoms", "stats", "in", "external", "package", "NUMBER", "Changing", "geom_bar", "reparameterise", "to", "R", "reparameterise", "TAG", "unequal", "width", "boxplots", "ds", "TAG", "ok", "because", "x", "NUMBER", "was", "remove", "in", "all", "p", "ds", "scale_x_discrete", "drop", "F", "but", "when", "x", "NUMBER", "be", "keep", "explicitly", "the", "issue", "reappears", "This", "may", "seem", "like", "a", "corner", "issue", "but", "in", "fact", "it", "appears", "quite", "often", "when", "plotting", "datasets", "with", "miss", "cases", "and", "facet_grid", "in", "that", "situation", "most", "combinations", "of", "cases", "be", "keep", "because", "the", "levels", "exist", "in", "at", "least", "one", "the", "facets", "and", "this", "result", "in", "very", "erratic", "looking", "plots", "with", "boxplot", "of", "varying", "width", "across", "all", "facets", "NUMBER", "So", "it", "s", "actually", "pretty", "severe", "NUMBER", "I", "think", "you", "can", "distinguish", "between", "discrete", "and", "continuous", "because", "discrete", "will", "be", "integers", "NUMBER", "Maybe", "resolution", "should", "include", "a", "specific", "check", "for", "that", "Or", "maybe", "we", "should", "have", "ggresolution", "which", "be", "specialised", "for", "this", "feature", "of", "ggplot", "NUMBER", "I", "think", "this", "should", "be", "simple", "fix", "make", "censor", "return", "NA_real_", "instead", "of", "NA", "which", "be", "logical", "and", "hence", "counted", "as", "discrete", "NUMBER", "Even", "better", "you", "should", "return", "an", "NA", "of", "the", "same", "type", "as", "x", "but", "I", "don", "t", "know", "an", "easy", "way", "of", "doing", "that", "NUMBER", "Using", "ggplot", "NUMBER", "stat_vline", "intercept", "NUMBER", "linetype", "dotted", "Error", "in", "get", "x", "envir", "this", "inherits", "inh", "this", "NUMBER", "stat_vline", "now", "uses", "xintercept", "instead", "of", "intercept", "but", "stat_vline", "xintercept", "NUMBER", "linetype", "dotted", "Error", "in", "do", "NUMBER", "call", "layer", "list", "mapping", "mapping", "data", "data", "geom", "geom", "argument", "intercept", "be", "miss", "with", "no", "default", "Using", "geom_vline", "instead", "works", "fine", "NUMBER", "Hi", "I", "didn", "t", "investigate", "if", "it", "s", "Hmisc", "or", "ggplot", "but", "the", "following", "example", "from", "stat_summary", "page", "be", "producing", "mambo", "jambo", "d", "TAG", "This", "discussion", "may", "also", "be", "of", "interest", "LINK", "topic", "ggplot", "NUMBER", "dev", "_gpWsOWrSDk", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "A", "similar", "feature", "request", "nested", "sets", "of", "factors", "levels", "on", "the", "model", "axis", "NUMBER", "LINK", "topic", "ggplot", "NUMBER", "UbSzepDnJ", "NUMBER", "SantiM", "NUMBER", "This", "fix", "NUMBER", "Code", "fix", "was", "provide", "by", "Kohske", "Takahashi", "NUMBER", "Last", "time", "I", "discussed", "justification", "with", "Hadley", "it", "was", "suggested", "to", "write", "a", "function", "that", "embeds", "a", "grob", "in", "a", "gTree", "NUMBER", "Consider", "this", "r", "library", "gtable", "a", "TAG", "With", "this", "method", "a", "gtable", "object", "will", "respect", "the", "vp", "argument", "for", "gtable_gTree", "but", "not", "the", "vp", "argument", "for", "gTree", "NUMBER", "There", "be", "no", "gTree", "object", "before", "calling", "gtable_gTree", "I", "think", "we", "can", "handle", "gtable", "and", "grobs", "for", "children", "of", "gtable", "in", "the", "same", "way", "NUMBER", "The", "problem", "be", "that", "grobWidth", "and", "grobHeight", "don", "t", "seem", "to", "work", "with", "gTree", "objects", "such", "as", "the", "ones", "returned", "by", "gtable_gTree", "NUMBER", "Is", "this", "because", "the", "grobs", "within", "a", "gTree", "can", "be", "in", "different", "viewports", "I", "think", "the", "issue", "be", "that", "widthDetails", "NUMBER", "gTree", "be", "basically", "an", "empty", "default", "NUMBER", "If", "you", "give", "a", "class", "to", "the", "gTree", "you", "can", "then", "define", "your", "own", "method", "to", "calculate", "the", "size", "r", "library", "grid", "g", "NUMBER", "TAG", "since", "a", "gtable", "be", "not", "a", "grob", "NUMBER", "btw", "be", "there", "a", "good", "reason", "that", "it", "isn", "t", "That", "would", "certainly", "simplify", "the", "vocabulary", "e", "NUMBER", "g", "the", "non", "standard", "gtable_gTree", "this", "class", "issue", "etc", "NUMBER", "also", "I", "have", "a", "feeling", "that", "it", "should", "be", "heightDetails", "NUMBER", "xxx", "not", "grobHeight", "NUMBER", "xxx", "though", "it", "be", "very", "difficult", "to", "find", "a", "reason", "why", "the", "former", "be", "preferred", "in", "Paul", "s", "book", "and", "code", "NUMBER", "I", "believe", "it", "has", "something", "to", "do", "with", "on", "the", "fly", "calculations", "when", "you", "resize", "an", "interactive", "device", "NUMBER", "Hi", "First", "of", "all", "I", "m", "really", "impressed", "with", "ggplot", "NUMBER", "I", "m", "trying", "to", "use", "stat_sum", "to", "sum", "data", "Currently", "I", "m", "doing", "something", "like", "dd", "TAG", "I", "think", "the", "problem", "be", "that", "train_cartesian", "be", "memoized", "so", "it", "s", "storing", "the", "result", "of", "the", "first", "call", "to", "scale_break_info", "and", "do", "not", "run", "it", "again", "on", "subsequent", "calls", "to", "ggplot", "NUMBER", "I", "m", "not", "sure", "of", "a", "good", "solution", "the", "ones", "I", "can", "think", "of", "be", "not", "very", "good", "Make", "memoise", "detect", "change", "to", "locale", "change", "NUMBER", "But", "this", "seems", "too", "much", "of", "a", "special", "case", "NUMBER", "Provide", "a", "user", "facing", "function", "to", "clear", "the", "memoization", "cache", "NUMBER", "But", "I", "don", "t", "think", "users", "would", "ever", "figure", "this", "out", "since", "it", "s", "so", "obscure", "NUMBER", "Provide", "an", "easy", "way", "to", "reload", "ggplot", "NUMBER", "which", "will", "create", "new", "environments", "for", "the", "memoization", "NUMBER", "But", "again", "I", "don", "t", "think", "most", "users", "would", "figure", "this", "out", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "R", "dates", "TAG", "Error", "Discrete", "value", "supplied", "to", "continuous", "scale", "While", "add", "scale_x_date", "produces", "a", "chart", "of", "sorts", "the", "X", "range", "be", "way", "off", "instead", "expected", "NUMBER", "NUMBER", "range", "it", "shows", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "as", "seen", "with", "the", "latter", "example", "R", "ggplot", "data", "aes", "x", "Date", "y", "value", "geom_line", "scale_x_date", "ggplot", "data", "aes", "x", "Date", "y", "value", "geom_line", "scale_x_date", "labels", "date_format", "Y", "m", "d", "What", "package", "be", "as", "NUMBER", "yearmon", "in", "oh", "sorry", "I", "was", "sure", "I", "reproduced", "this", "in", "clear", "environment", "NUMBER", "as", "NUMBER", "yearmon", "be", "in", "zoo", "Or", "at", "least", "document", "how", "to", "make", "it", "work", "e", "NUMBER", "g", "NUMBER", "extend", "the", "right", "method", "wch", "Could", "you", "add", "a", "scale_type", "method", "and", "appropriately", "named", "scale", "and", "then", "send", "to", "Dennis", "to", "include", "in", "the", "book", "tko", "I", "don", "t", "think", "this", "be", "use", "commonly", "enough", "to", "be", "include", "in", "ggplot", "NUMBER", "but", "you", "could", "easily", "add", "to", "another", "package", "NUMBER", "Hopefully", "I", "did", "a", "better", "job", "this", "time", "This", "doesn", "t", "address", "everything", "raise", "in", "NUMBER", "which", "seem", "to", "me", "to", "be", "a", "bigger", "project", "NUMBER", "I", "was", "just", "trying", "to", "remedy", "the", "fact", "that", "discrete_scale", "was", "documented", "but", "continuous_scale", "wasn", "t", "along", "with", "a", "handful", "of", "other", "small", "issue", "NUMBER", "koshke", "mentions", "having", "generic", "help", "pages", "for", "coord", "geom", "stat", "etc", "NUMBER", "I", "can", "certainly", "work", "on", "that", "but", "that", "seems", "like", "a", "bigger", "project", "and", "I", "was", "trying", "to", "start", "fairly", "simple", "as", "I", "get", "comfortable", "with", "git", "and", "roxygen", "NUMBER", "This", "be", "my", "first", "attempt", "and", "I", "m", "brand", "new", "at", "GitHub", "so", "apologies", "if", "this", "be", "a", "mess", "NUMBER", "I", "wasn", "t", "sure", "how", "many", "commit", "to", "have", "in", "a", "pull", "request", "and", "if", "you", "have", "any", "advice", "on", "write", "useful", "commit", "note", "I", "m", "all", "ears", "NUMBER", "The", "two", "big", "things", "I", "change", "were", "altering", "aesthetics", "in", "utilities", "help", "NUMBER", "r", "to", "list", "the", "required", "aesthetics", "first", "in", "bold", "and", "giving", "continuous_scale", "a", "mostly", "complete", "argument", "list", "largely", "copying", "from", "discrete_scale", "where", "appropriate", "NUMBER", "The", "rest", "be", "minor", "typo", "link", "to", "relevant", "documentation", "or", "slightly", "clarified", "descriptions", "NUMBER", "I", "was", "indeed", "doing", "the", "first", "but", "not", "the", "second", "two", "except", "perhaps", "by", "chance", "NUMBER", "Do", "I", "need", "to", "redo", "anything", "relating", "to", "this", "pull", "request", "or", "were", "those", "suggestions", "for", "anything", "I", "do", "in", "the", "future", "Thanks", "for", "be", "patient", "with", "me", "NUMBER", "I", "ll", "get", "up", "to", "speed", "quickly", "I", "promise", "After", "change", "the", "default", "theme_grey", "to", "axis", "NUMBER", "line", "theme_segment", "colour", "grey", "NUMBER", "only", "the", "x", "axis", "has", "a", "grey", "line", "NUMBER", "E", "NUMBER", "g", "NUMBER", "qplot", "carat", "price", "data", "diamonds", "I", "be", "use", "proto", "and", "ggplot", "NUMBER", "NUMBER", "I", "looks", "like", "the", "print", "NUMBER", "proto", "method", "in", "ggplot", "NUMBER", "be", "breaking", "proto", "NUMBER", "test_proto", "TAG", "print", "test_proto", "Error", "in", "print", "NUMBER", "proto", "test_proto", "attempt", "to", "apply", "non", "function", "Enter", "a", "frame", "number", "or", "NUMBER", "to", "exit", "NUMBER", "print", "test_proto", "NUMBER", "print", "NUMBER", "proto", "test_proto", "Selection", "NUMBER", "Called", "from", "top", "level", "Browse", "NUMBER", "getAnywhere", "print", "NUMBER", "proto", "A", "single", "object", "matching", "print", "NUMBER", "proto", "was", "find", "It", "was", "find", "in", "the", "following", "places", "registered", "S", "NUMBER", "method", "for", "print", "from", "namespace", "ggplot", "NUMBER", "namespace", "ggplot", "NUMBER", "with", "value", "function", "x", "NUMBER", "x", "pprint", "NUMBER", "TAG", "Uninstalling", "ggplot", "NUMBER", "makes", "the", "problem", "go", "away", "NUMBER", "Error", "in", "loadNamespace", "name", "there", "be", "no", "package", "call", "ggplot", "NUMBER", "library", "proto", "test_proto", "TAG", "test_proto", "TAG", "attr", "class", "NUMBER", "proto", "environment", "Unfortunately", "I", "rely", "heavily", "on", "ggplot", "NUMBER", "and", "I", "be", "developing", "a", "package", "that", "uses", "proto", "NUMBER", "Any", "suggestions", "for", "a", "workaround", "would", "be", "appreciated", "NUMBER", "Instead", "of", "print", "NUMBER", "proto", "we", "should", "either", "call", "it", "explicitly", "or", "give", "all", "proto", "elements", "a", "common", "class", "and", "use", "that", "NUMBER", "We", "could", "just", "create", "ggproto", "to", "wrap", "proto", "and", "add", "the", "correct", "class", "Then", "how", "about", "R", "gg", "TAG", "pretty", "as", "NUMBER", "Date", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "as", "NUMBER", "Date", "pretty", "as", "NUMBER", "numeric", "as", "NUMBER", "Date", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "origin", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "even", "if", "setting", "z", "to", "NUMBER", "we", "will", "not", "get", "pretty", "breaks", "for", "date", "NUMBER", "You", "may", "also", "look", "through", "grDevices", "prettyDate", "to", "see", "how", "things", "be", "complicated", "NUMBER", "extended_breaks", "can", "return", "S", "NUMBER", "function", "NUMBER", "Or", "internal", "dispatch", "may", "be", "sufficient", "here", "r", "extended_breaks", "TAG", "ggplot", "dat", "aes", "x", "NUMBER", "y", "y", "colour", "x", "geom_point", "scale_colour_continuous", "breaks", "NULL", "guide", "colorbar", "Error", "in", "names", "guide", "key", "TAG", "Maybe", "it", "should", "not", "show", "the", "legend", "when", "breaks", "NULL", "I", "agree", "NUMBER", "Do", "you", "think", "there", "be", "a", "situation", "where", "someone", "want", "to", "show", "colorbar", "without", "tick", "lables", "So", "possible", "solution", "for", "break", "NULL", "for", "the", "non", "positional", "scale", "be", "either", "NUMBER", "Surpress", "showing", "guide", "with", "some", "warning", "message", "NUMBER", "NUMBER", "Use", "default", "breaks", "waiver", "instead", "with", "some", "warning", "message", "NUMBER", "The", "warning", "message", "should", "be", "like", "breaks", "NULL", "for", "non", "spatial", "scale", "be", "meaningless", "so", "the", "guide", "be", "not", "display", "NUMBER", "ah", "NUMBER", "if", "the", "branch", "referring", "the", "issue", "be", "merge", "on", "github", "those", "who", "commit", "the", "branch", "will", "close", "the", "issue", "I", "understand", "NUMBER", "A", "bit", "surprising", "because", "I", "was", "sleeping", "at", "that", "time", "NUMBER", "Hi", "today", "I", "discover", "a", "bug", "that", "was", "quite", "hard", "to", "pinpoint", "NUMBER", "Essentially", "I", "be", "use", "geom_point", "in", "combination", "with", "geom_segment", "with", "a", "factor", "on", "the", "y", "axis", "NUMBER", "The", "NUMBER", "geoms", "have", "separate", "data", "NUMBER", "frames", "but", "the", "factor", "has", "the", "same", "levels", "in", "each", "of", "these", "NUMBER", "data", "NUMBER", "frames", "NUMBER", "I", "expect", "that", "the", "y", "axis", "will", "be", "ordered", "from", "bottom", "to", "top", "use", "the", "levels", "of", "the", "factor", "from", "beginning", "to", "end", "NUMBER", "However", "this", "be", "only", "the", "case", "when", "I", "do", "ggplot", "geom_segment", "geom_point", "and", "the", "factor", "levels", "be", "strangely", "not", "respected", "when", "I", "use", "ggplot", "geom_point", "geom_segment", "NUMBER", "The", "current", "workaround", "I", "be", "use", "be", "to", "always", "use", "the", "first", "form", "but", "it", "would", "be", "nice", "to", "have", "these", "NUMBER", "form", "be", "consistent", "NUMBER", "Here", "be", "some", "code", "that", "replicates", "the", "problem", "r", "ggplot", "NUMBER", "weird", "bug", "NUMBER", "library", "grid", "library", "ggplot", "NUMBER", "plotboth", "TAG", "sessionInfo", "R", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Platform", "x", "NUMBER", "_", "NUMBER", "apple", "darwin", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "bit", "locale", "NUMBER", "da_DK", "NUMBER", "UTF", "NUMBER", "da_DK", "NUMBER", "UTF", "NUMBER", "da_DK", "NUMBER", "UTF", "NUMBER", "C", "da_DK", "NUMBER", "UTF", "NUMBER", "da_DK", "NUMBER", "UTF", "NUMBER", "attached", "base", "package", "NUMBER", "grid", "stats", "graphics", "grDevices", "utils", "NUMBER", "datasets", "methods", "base", "other", "attached", "package", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "RColorBrewer_", "NUMBER", "NUMBER", "NUMBER", "plyr_", "NUMBER", "reshape", "NUMBER", "_", "NUMBER", "NUMBER", "Rcpp_", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "Biobase_", "NUMBER", "BiocGenerics_", "NUMBER", "NUMBER", "Biostrings_", "NUMBER", "caret_", "NUMBER", "NUMBER", "NUMBER", "codetools_", "NUMBER", "NUMBER", "colorspace_", "NUMBER", "NUMBER", "NUMBER", "dichromat_", "NUMBER", "NUMBER", "digest_", "NUMBER", "NUMBER", "ggdendro_", "NUMBER", "NUMBER", "IRanges_", "NUMBER", "NUMBER", "labeling_", "NUMBER", "lattice_", "NUMBER", "NUMBER", "NUMBER", "MASS_", "NUMBER", "NUMBER", "memoise_", "NUMBER", "NUMBER", "munsell_", "NUMBER", "mzR_", "NUMBER", "NUMBER", "OutlierD_", "NUMBER", "pcaMethods_", "NUMBER", "NUMBER", "pcaPP_", "NUMBER", "NUMBER", "pepmaps_", "NUMBER", "NUMBER", "NUMBER", "proto_", "NUMBER", "NUMBER", "scales_", "NUMBER", "NUMBER", "stats", "NUMBER", "_", "NUMBER", "stringr_", "NUMBER", "NUMBER", "tools_", "NUMBER", "xcms_", "NUMBER", "edit", "Fixed", "a", "glaring", "error", "in", "my", "test", "code", "Thanks", "Brian", "That", "be", "bizarre", "NUMBER", "But", "I", "can", "confirm", "that", "it", "be", "happening", "with", "the", "adjustment", "of", "the", "data", "names", "in", "the", "qplot", "call", "to", "match", "the", "given", "data", "frames", "NUMBER", "I", "tried", "to", "figure", "out", "what", "was", "wrong", "but", "finally", "get", "completely", "lost", "in", "the", "rabbit", "hole", "NUMBER", "Here", "be", "what", "I", "was", "able", "to", "figure", "out", "so", "that", "someone", "else", "can", "hopefully", "make", "it", "further", "NUMBER", "The", "error", "be", "happening", "in", "locate_grid", "at", "the", "line", "LINK", "locate", "NUMBER", "r", "L", "NUMBER", "r", "values", "TAG", "NUMBER", "NUMBER", "NUMBER", "NULL", "NUMBER", "NUMBER", "eval", "expr", "envir", "enclos", "NUMBER", "NUMBER", "function", "e", "TAG", "At", "this", "point", "I", "was", "completely", "lost", "and", "so", "just", "leave", "this", "information", "for", "someone", "who", "understands", "the", "code", "better", "to", "figure", "out", "NUMBER", "Yeah", "I", "couldn", "t", "understand", "what", "that", "code", "was", "supposed", "to", "be", "doing", "NUMBER", "Typically", "when", "I", "see", "llply", "data", "NUMBER", "in", "ggplot", "code", "data", "be", "a", "list", "of", "data", "NUMBER", "frame", "s", "one", "per", "layer", "NUMBER", "But", "here", "it", "be", "a", "single", "data", "NUMBER", "frame", "so", "the", "loop", "becomes", "over", "the", "columns", "of", "data", "NUMBER", "I", "also", "notice", "that", "splitting", "up", "the", "compact", "and", "llply", "call", "didn", "t", "cause", "the", "error", "NUMBER", "And", "that", "seem", "weird", "too", "NUMBER", "I", "also", "get", "that", "feeling", "that", "there", "be", "some", "bug", "lurking", "somewhere", "deeper", "plyr", "base", "R", "or", "maybe", "quoted_df", "It", "would", "take", "awhile", "to", "make", "a", "minimal", "reproducible", "example", "that", "doesn", "t", "rely", "on", "all", "the", "ggplot", "framework", "NUMBER", "And", "I", "have", "no", "idea", "what", "type", "of", "error", "happen", "when", "a", "numeric", "value", "be", "between", "NUMBER", "and", "NUMBER", "but", "not", "above", "or", "below", "that", "You", "be", "also", "right", "that", "values", "be", "never", "use", "again", "NUMBER", "But", "it", "has", "be", "there", "since", "the", "very", "first", "import", "of", "that", "file", "NUMBER", "LINK", "locate", "NUMBER", "r", "L", "NUMBER", "And", "it", "was", "never", "use", "again", "there", "either", "NUMBER", "As", "you", "noted", "NUMBER", "None", "of", "those", "function", "should", "have", "side", "effect", "so", "my", "recommendation", "would", "be", "to", "delete", "that", "line", "and", "see", "what", "happens", "NUMBER", "Not", "the", "most", "comforting", "bug", "fix", "I", "admit", "NUMBER", "Nice", "sleuthing", "NUMBER", "I", "think", "you", "be", "right", "that", "quoted_df", "should", "make", "sure", "that", "it", "be", "actually", "evaluating", "in", "a", "data", "NUMBER", "frame", "NUMBER", "That", "was", "probably", "the", "assumption", "for", "the", "function", "NUMBER", "Which", "also", "support", "that", "the", "values", "line", "be", "not", "supposed", "to", "be", "in", "the", "code", "anyway", "NUMBER", "There", "be", "a", "small", "typo", "in", "the", "documentation", "for", "geom_boxplot", "the", "first", "and", "third", "quartiles", "the", "NUMBER", "and", "NUMBER", "percentiles", "NUMBER", "Should", "read", "NUMBER", "and", "NUMBER", "NUMBER", "When", "trying", "to", "plot", "celestial", "object", "on", "the", "sky", "basically", "with", "coordinates", "equivalent", "to", "latitude", "longitude", "use", "the", "aitoff", "projection", "of", "the", "coord_map", "function", "the", "grid", "be", "badly", "display", "i", "NUMBER", "e", "NUMBER", "residual", "horizontal", "lines", "be", "still", "display", "for", "latitudes", "non", "equal", "to", "zero", "along", "with", "their", "correct", "projections", "NUMBER", "Here", "be", "the", "code", "to", "reproduce", "this", "bug", "library", "ggplot", "NUMBER", "sky", "NUMBER", "data", "NUMBER", "frame", "RA", "NUMBER", "Dec", "NUMBER", "skyplot", "NUMBER", "TAG", "sessionInfo", "R", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Platform", "x", "NUMBER", "_", "NUMBER", "redhat", "linux", "gnu", "NUMBER", "bit", "locale", "NUMBER", "LC_CTYPE", "en_US", "NUMBER", "UTF", "NUMBER", "LC_NUMERIC", "C", "NUMBER", "LC_TIME", "en_US", "NUMBER", "UTF", "NUMBER", "LC_COLLATE", "en_US", "NUMBER", "UTF", "NUMBER", "NUMBER", "LC_MONETARY", "C", "LC_MESSAGES", "en_US", "NUMBER", "UTF", "NUMBER", "NUMBER", "LC_PAPER", "en_US", "NUMBER", "UTF", "NUMBER", "LC_NAME", "C", "NUMBER", "LC_ADDRESS", "C", "LC_TELEPHONE", "C", "NUMBER", "LC_MEASUREMENT", "en_US", "NUMBER", "UTF", "NUMBER", "LC_IDENTIFICATION", "C", "attached", "base", "package", "NUMBER", "grid", "stats", "graphics", "grDevices", "utils", "datasets", "methods", "NUMBER", "base", "other", "attached", "package", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "proto_", "NUMBER", "NUMBER", "reshape_", "NUMBER", "plyr_", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "coda_", "NUMBER", "NUMBER", "digest_", "NUMBER", "lattice_", "NUMBER", "NUMBER", "rjags_", "NUMBER", "NUMBER", "and", "where", "it", "doesn", "t", "work", "sessionInfo", "R", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Platform", "x", "NUMBER", "_", "NUMBER", "pc", "linux", "gnu", "NUMBER", "bit", "locale", "NUMBER", "LC_CTYPE", "en_US", "NUMBER", "UTF", "NUMBER", "LC_NUMERIC", "C", "NUMBER", "LC_TIME", "en_US", "NUMBER", "UTF", "NUMBER", "LC_COLLATE", "en_US", "NUMBER", "UTF", "NUMBER", "NUMBER", "LC_MONETARY", "en_US", "NUMBER", "UTF", "NUMBER", "LC_MESSAGES", "en_US", "NUMBER", "UTF", "NUMBER", "NUMBER", "LC_PAPER", "C", "LC_NAME", "C", "NUMBER", "LC_ADDRESS", "C", "LC_TELEPHONE", "C", "NUMBER", "LC_MEASUREMENT", "en_US", "NUMBER", "UTF", "NUMBER", "LC_IDENTIFICATION", "C", "attached", "base", "package", "NUMBER", "stats", "graphics", "grDevices", "utils", "datasets", "methods", "base", "other", "attached", "package", "NUMBER", "plyr_", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "colorspace_", "NUMBER", "NUMBER", "dichromat_", "NUMBER", "NUMBER", "digest_", "NUMBER", "grid_", "NUMBER", "NUMBER", "MASS_", "NUMBER", "NUMBER", "memoise_", "NUMBER", "munsell_", "NUMBER", "proto_", "NUMBER", "NUMBER", "NUMBER", "RColorBrewer_", "NUMBER", "NUMBER", "reshape", "NUMBER", "_", "NUMBER", "scales_", "NUMBER", "stringr_", "NUMBER", "NUMBER", "tools_", "NUMBER", "wch", "I", "think", "you", "have", "it", "backward", "I", "don", "t", "know", "if", "the", "solution", "change", "it", "to", "a", "continuous", "scale", "be", "the", "same", "though", "NUMBER", "linetype", "can", "take", "string", "values", "so", "it", "may", "not", "play", "well", "if", "it", "s", "change", "to", "continuous", "NUMBER", "the", "problem", "be", "that", "c", "NUMBER", "NUMBER", "NUMBER", "be", "a", "continuous", "numeric", "vector", "my", "solution", "was", "to", "change", "it", "to", "a", "discrete", "vector", "e", "NUMBER", "g", "NUMBER", "as", "NUMBER", "factor", "NUMBER", "This", "do", "seem", "similar", "to", "issue", "NUMBER", "where", "a", "propose", "solution", "was", "to", "use", "as", "NUMBER", "integer", "although", "it", "appears", "that", "this", "didn", "t", "actually", "work", "NUMBER", "I", "understand", "your", "point", "but", "wouldn", "t", "this", "be", "analogous", "to", "with", "iris", "plot", "Sepal", "NUMBER", "Length", "Species", "lty", "c", "NUMBER", "NUMBER", "NUMBER", "Could", "you", "please", "add", "a", "note", "to", "NEWS", "Updated", "NUMBER", "wch", "Thanks", "fix", "NUMBER", "Sure", "fix", "I", "believe", "this", "will", "fix", "the", "problem", "NUMBER", "This", "pass", "all", "unit", "test", "NUMBER", "May", "I", "write", "visual", "test", "and", "additional", "unit", "test", "code", "Thanks", "that", "s", "right", "NUMBER", "major", "and", "minor", "be", "in", "the", "native", "coords", "while", "_source", "be", "in", "the", "data", "space", "NUMBER", "coord_map", "and", "coord_polor", "requires", "that", "in", "the", "data", "space", "NUMBER", "But", "this", "may", "be", "change", "into", "more", "consistent", "way", "NUMBER", "That", "seems", "to", "be", "an", "issue", "with", "representing", "a", "continuous", "variable", "with", "color", "a", "feature", "that", "has", "be", "available", "for", "long", "time", "NUMBER", "This", "be", "just", "an", "issue", "of", "how", "the", "legend", "guide", "be", "display", "NUMBER", "Now", "even", "a", "continuous", "mapping", "between", "color", "and", "data", "be", "represented", "by", "a", "few", "discrete", "labeled", "values", "NUMBER", "The", "colorbar", "guide", "draws", "the", "whole", "or", "at", "least", "many", "more", "levels", "so", "that", "it", "looks", "continuous", "range", "of", "colors", "and", "labels", "a", "select", "few", "with", "the", "corresponding", "data", "value", "NUMBER", "The", "colors", "that", "would", "be", "use", "on", "the", "graph", "would", "be", "unchanged", "from", "the", "current", "approach", "NUMBER", "That", "said", "it", "would", "be", "interesting", "to", "see", "empirical", "data", "on", "determining", "the", "data", "value", "given", "the", "color", "comparing", "the", "current", "blocked", "legend", "versus", "a", "colorbar", "legend", "NUMBER", "I", "agree", "Hadley", "s", "proposal", "NUMBER", "The", "benefit", "of", "color", "bar", "be", "twofold", "NUMBER", "First", "colorbar", "guide", "itself", "will", "tell", "viewers", "that", "the", "color", "be", "continuous", "scale", "NUMBER", "This", "be", "quite", "important", "NUMBER", "Second", "it", "enable", "viewers", "create", "a", "complicated", "map", "i", "NUMBER", "e", "NUMBER", "function", "between", "value", "and", "color", "NUMBER", "For", "example", "try", "this", "ggplot", "mtcars", "aes", "wt", "mpg", "colour", "disp", "geom_point", "size", "NUMBER", "guide", "colour", "colourbar", "scale_color_continuous", "trans", "log", "NUMBER", "ggplot", "mtcars", "aes", "wt", "mpg", "colour", "disp", "geom_point", "size", "NUMBER", "scale_color_continuous", "trans", "log", "NUMBER", "I", "imagine", "that", "few", "people", "will", "intend", "to", "show", "accurate", "value", "by", "continuous", "scale", "e", "NUMBER", "g", "NUMBER", "few", "people", "will", "be", "interested", "in", "whether", "the", "point", "be", "NUMBER", "NUMBER", "or", "NUMBER", "By", "continuous", "color", "scale", "viewer", "will", "be", "required", "to", "grasp", "the", "relation", "between", "each", "data", "point", "NUMBER", "For", "this", "purpose", "gradient", "in", "the", "colorbar", "would", "be", "useful", "NUMBER", "If", "you", "want", "to", "show", "the", "precise", "value", "for", "continuous", "scale", "you", "d", "better", "to", "use", "other", "way", "e", "NUMBER", "g", "NUMBER", "direct", "label", "NUMBER", "Semi", "unrelated", "issue", "I", "notice", "that", "the", "discrete", "legend", "has", "the", "larger", "values", "on", "top", "while", "the", "continuous", "legend", "has", "smaller", "values", "on", "top", "NUMBER", "Is", "this", "difference", "intended", "Yes", "and", "no", "NUMBER", "When", "I", "write", "the", "colorbar", "I", "followed", "Matlab", "style", "so", "larger", "on", "top", "NUMBER", "Reformat", "stat_ydensity", "to", "look", "more", "like", "stat_density", "NUMBER", "Also", "get", "code", "cues", "from", "stat_boxplot", "NUMBER", "Introduce", "a", "new", "scale", "options", "to", "have", "equal", "width", "useful", "when", "comparing", "observations", "with", "very", "different", "densities", "NUMBER", "Keep", "all", "computed", "densities", "and", "use", "a", "new", "variable", "to", "compute", "the", "density", "actually", "use", "to", "plot", "the", "violin", "NUMBER", "Simple", "use", "case", "compare", "distributions", "with", "very", "different", "sample", "sizes", "d", "TAG", "Are", "there", "any", "plan", "to", "make", "ggplot", "NUMBER", "backward", "compatible", "I", "don", "t", "believe", "that", "there", "be", "NUMBER", "NUMBER", "change", "a", "good", "bit", "of", "how", "things", "worked", "and", "make", "new", "geoms", "and", "stats", "were", "always", "considered", "tinkering", "under", "the", "hood", "and", "were", "never", "guaranteed", "to", "keep", "work", "NUMBER", "That", "said", "more", "change", "over", "time", "be", "intended", "to", "make", "a", "more", "stable", "way", "to", "extend", "geoms", "and", "stats", "NUMBER", "Of", "course", "in", "doing", "so", "it", "will", "almost", "certainly", "break", "all", "the", "exist", "custom", "ones", "NUMBER", "Thanks", "that", "works", "NUMBER", "Do", "you", "have", "suggestion", "for", "the", "move", "away", "from", "proto", "Please", "try", "the", "following", "df", "TAG", "p", "TAG", "with", "ggplot", "NUMBER", "PositionDodge", "debug", "adjust", "debug", "ggplot", "NUMBER", "pos_dodge", "p", "debugging", "in", "get", "x", "envir", "this", "inherits", "inh", "this", "NUMBER", "debug", "if", "empty", "data", "return", "data", "NUMBER", "frame", "check_required_aesthetics", "x", "names", "data", "position_dodge", "collide", "data", "NUMBER", "width", "NUMBER", "my_name", "pos_dodge", "check", "NUMBER", "width", "FALSE", "Browse", "NUMBER", "data", "x", "y", "PANEL", "group", "ymin", "ymax", "xmin", "xmaxrowse", "NUMBER", "c", "debugging", "in", "NUMBER", "fun", "piece", "NUMBER", "debug", "n", "TAG", "df", "x", "y", "PANEL", "group", "ymin", "ymax", "xmin", "xmax", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Browse", "NUMBER", "c", "exiting", "from", "NUMBER", "fun", "piece", "NUMBER", "debugging", "in", "NUMBER", "fun", "piece", "NUMBER", "debug", "n", "TAG", "df", "x", "y", "PANEL", "group", "ymin", "ymax", "xmin", "xmax", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Browse", "NUMBER", "c", "exiting", "from", "NUMBER", "fun", "piece", "NUMBER", "debugging", "in", "NUMBER", "fun", "piece", "NUMBER", "debug", "n", "TAG", "df", "x", "y", "PANEL", "group", "ymin", "ymax", "xmin", "xmax", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Browse", "NUMBER", "c", "exiting", "from", "NUMBER", "fun", "piece", "NUMBER", "exiting", "from", "get", "x", "envir", "this", "inherits", "inh", "this", "NUMBER", "with", "ggplot", "NUMBER", "PositionDodge", "undebug", "adjust", "undebug", "ggplot", "NUMBER", "pos_dodge", "This", "behaviour", "be", "correct", "setting", "an", "aesthetic", "be", "the", "same", "as", "not", "mapping", "NUMBER", "I", "agree", "with", "Brian", "s", "description", "NUMBER", "I", "had", "the", "functionality", "describe", "in", "this", "wiki", "post", "LINK", "a", "legend", "between", "two", "ggplot", "NUMBER", "graphs", "set", "up", "and", "run", "beautifully", "with", "ggplot", "NUMBER", "version", "NUMBER", "After", "our", "system", "underwent", "some", "maintenance", "we", "had", "to", "reinstall", "all", "of", "our", "package", "and", "ggplot", "NUMBER", "NUMBER", "was", "install", "NUMBER", "As", "it", "turns", "out", "this", "broke", "the", "functionality", "of", "opts", "keep", "legend_box", "NUMBER", "Adding", "that", "option", "did", "not", "remove", "plot", "as", "expected", "NUMBER", "After", "reinstalling", "NUMBER", "we", "get", "back", "the", "desired", "behavior", "NUMBER", "Is", "there", "a", "new", "way", "of", "doing", "this", "or", "be", "this", "a", "bug", "If", "the", "former", "be", "the", "case", "could", "the", "above", "wiki", "post", "be", "update", "Thanks", "and", "best", "regards", "Chris", "You", "can", "t", "use", "this", "opts", "anymore", "instead", "you", "need", "to", "extract", "the", "legend", "from", "gtable", "which", "be", "probably", "work", "in", "progress", "gtable", "package", "NUMBER", "I", "ve", "update", "the", "wiki", "page", "with", "a", "way", "to", "do", "it", "manually", "NUMBER", "Great", "thanks", "Thanks", "for", "the", "hard", "work", "NUMBER", "No", "way", "to", "get", "this", "backward", "compatible", "The", "following", "example", "illustrates", "the", "problem", "qplot", "NUMBER", "NUMBER", "opts", "axis", "NUMBER", "line", "theme_segment", "colour", "black", "size", "NUMBER", "The", "bottom", "x", "axis", "be", "above", "the", "plot", "panel", "but", "the", "left", "y", "axis", "be", "below", "NUMBER", "I", "tried", "install_github", "ggplot", "NUMBER", "hadley", "and", "install_github", "ggplot", "NUMBER", "kohske", "neither", "of", "them", "fix", "this", "issue", "NUMBER", "Is", "it", "somewhere", "in", "a", "more", "experimental", "branch", "I", "see", "thanks", "NUMBER", "I", "d", "tried", "fix", "axis", "but", "from", "your", "account", "and", "it", "fail", "to", "fetch", "NUMBER", "This", "fix", "the", "problem", "NUMBER", "geom_point", "doesn", "t", "accept", "integers", "for", "shape", "in", "aes", "NUMBER", "ggplot", "data", "data", "NUMBER", "frame", "x", "c", "NUMBER", "NUMBER", "geom_point", "aes", "x", "x", "y", "x", "shape", "x", "worked", "before", "R", "NUMBER", "and", "now", "error", "out", "with", "Error", "A", "continuous", "variable", "can", "not", "be", "mapped", "to", "shape", "NUMBER", "Even", "converting", "to", "factors", "shape", "factor", "x", "seems", "to", "only", "accept", "NUMBER", "shapes", "in", "the", "aes", "NUMBER", "More", "note", "at", "LINK", "vector", "NUMBER", "com", "blog", "NUMBER", "NUMBER", "how", "to", "remember", "point", "shape", "code", "in", "r", "You", "be", "correct", "sorry", "about", "that", "NUMBER", "This", "be", "definitely", "in", "the", "category", "of", "users", "shouldn", "t", "do", "that", "NUMBER", "but", "here", "we", "be", "NUMBER", "For", "a", "brief", "moment", "I", "forgot", "that", "ggsave", "takes", "the", "width", "and", "height", "argument", "as", "inches", "and", "not", "pixels", "and", "I", "stupidly", "entered", "NUMBER", "for", "the", "width", "and", "height", "of", "my", "plot", "NUMBER", "The", "pdf", "option", "saved", "my", "graphic", "and", "it", "opened", "though", "the", "points", "were", "invisibly", "small", "NUMBER", "The", "NUMBER", "png", "version", "however", "killed", "R", "with", "an", "error", "on", "my", "OS", "X", "NUMBER", "machine", "and", "froze", "R", "as", "Not", "Responding", "on", "my", "OS", "X", "NUMBER", "machine", "NUMBER", "I", "don", "t", "know", "where", "the", "upper", "limit", "be", "on", "size", "handle", "for", "large", "rasters", "but", "if", "one", "be", "know", "it", "might", "be", "nice", "to", "have", "a", "check", "that", "warns", "the", "user", "and", "doesn", "t", "even", "try", "to", "execute", "the", "save", "if", "one", "both", "of", "the", "dimensions", "be", "over", "that", "limit", "NUMBER", "Not", "a", "super", "important", "issue", "but", "I", "did", "just", "trip", "on", "it", "NUMBER", "Hi", "the", "use", "case", "where", "i", "encountered", "this", "bug", "was", "when", "i", "was", "trying", "to", "plot", "county", "borders", "overlay", "ed", "with", "colored", "lines", "of", "specific", "routes", "NUMBER", "I", "tried", "to", "plot", "the", "countries", "with", "geom_map", "NUMBER", "The", "example", "be", "a", "bit", "complicated", "therefore", "a", "small", "example", "that", "produces", "exactly", "the", "same", "traceback", "My", "idea", "was", "to", "use", "the", "NA", "colour", "to", "give", "a", "specific", "colour", "to", "one", "dataset", "the", "country", "borders", "and", "then", "use", "the", "color", "scale", "to", "give", "colours", "to", "the", "other", "dataset", "NUMBER", "So", "one", "dataset", "has", "only", "NA", "NUMBER", "I", "realize", "this", "be", "already", "a", "work", "around", "for", "plotting", "the", "borders", "but", "setting", "the", "colour", "arugment", "for", "geom_map", "did", "not", "seem", "to", "work", "R", "require", "ggplot", "NUMBER", "crimes", "TAG", "a", "TAG", "b", "TAG", "ggplot", "data", "a", "aes", "x", "x", "y", "y", "colour", "col", "geom_point", "geom_point", "data", "b", "scale_colour_gradient", "na", "NUMBER", "value", "red", "Error", "Discrete", "value", "supplied", "to", "continuous", "scale", "traceback", "NUMBER", "stop", "Discrete", "value", "supplied", "to", "continuous", "scale", "call", "NUMBER", "FALSE", "NUMBER", "train_continuous", "x", "range", "NUMBER", "scale", "range", "train", "x", "NUMBER", "scale_train", "NUMBER", "continuous", "scale", "df", "aesthetic", "NUMBER", "scale_train", "scale", "df", "aesthetic", "NUMBER", "FUN", "X", "NUMBER", "L", "NUMBER", "NUMBER", "lapply", "scales", "scales", "scale_train_df", "df", "df", "NUMBER", "FUN", "X", "NUMBER", "L", "NUMBER", "NUMBER", "lapply", "data", "scales_train_df", "scales", "npscales", "NUMBER", "ggplot_build", "x", "NUMBER", "print", "NUMBER", "ggplot", "list", "data", "list", "x", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "col", "NUMBER", "NUMBER", "layers", "list", "TAG", "TAG", "scales", "TAG", "mapping", "list", "x", "x", "y", "y", "colour", "col", "options", "list", "labels", "list", "x", "x", "y", "y", "colour", "col", "coordinates", "list", "limits", "list", "x", "NULL", "y", "NULL", "wise", "FALSE", "facet", "list", "shrink", "TRUE", "plot_env", "TAG", "NUMBER", "print", "list", "data", "list", "x", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "col", "NUMBER", "NUMBER", "layers", "list", "TAG", "TAG", "scales", "TAG", "mapping", "list", "x", "x", "y", "y", "colour", "col", "options", "list", "labels", "list", "x", "x", "y", "y", "colour", "col", "coordinates", "list", "limits", "list", "x", "NULL", "y", "NULL", "wise", "FALSE", "facet", "list", "shrink", "TRUE", "plot_env", "TAG", "But", "it", "seems", "to", "work", "as", "soon", "as", "the", "colour", "column", "of", "the", "b", "dataset", "do", "contain", "one", "non", "na", "value", "R", "a", "TAG", "sessionInfo", "R", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Platform", "x", "NUMBER", "_", "NUMBER", "pc", "linux", "gnu", "NUMBER", "bit", "locale", "NUMBER", "LC_CTYPE", "en_US", "NUMBER", "UTF", "NUMBER", "LC_NUMERIC", "C", "NUMBER", "LC_TIME", "en_US", "NUMBER", "UTF", "NUMBER", "LC_COLLATE", "en_US", "NUMBER", "UTF", "NUMBER", "NUMBER", "LC_MONETARY", "en_US", "NUMBER", "UTF", "NUMBER", "LC_MESSAGES", "en_US", "NUMBER", "UTF", "NUMBER", "NUMBER", "LC_PAPER", "C", "LC_NAME", "C", "NUMBER", "LC_ADDRESS", "C", "LC_TELEPHONE", "C", "NUMBER", "LC_MEASUREMENT", "en_US", "NUMBER", "UTF", "NUMBER", "LC_IDENTIFICATION", "C", "attached", "base", "package", "NUMBER", "stats", "graphics", "grDevices", "utils", "datasets", "methods", "base", "other", "attached", "package", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "colorspace_", "NUMBER", "NUMBER", "dichromat_", "NUMBER", "NUMBER", "digest_", "NUMBER", "grid_", "NUMBER", "NUMBER", "MASS_", "NUMBER", "NUMBER", "memoise_", "NUMBER", "munsell_", "NUMBER", "plyr_", "NUMBER", "NUMBER", "proto_", "NUMBER", "NUMBER", "RColorBrewer_", "NUMBER", "NUMBER", "reshape", "NUMBER", "_", "NUMBER", "scales_", "NUMBER", "NUMBER", "stringr_", "NUMBER", "Thanks", "for", "fix", "and", "the", "hint", "for", "NA_real_", "Thank", "you", "for", "creating", "ggplot", "NUMBER", "It", "looks", "really", "good", "NUMBER", "I", "notice", "that", "the", "ggsave", "function", "do", "not", "handle", "the", "emf", "file", "type", "just", "the", "wmf", "NUMBER", "Can", "I", "suggest", "this", "addition", "to", "the", "save", "NUMBER", "r", "script", "at", "about", "line", "NUMBER", "of", "the", "current", "version", "NUMBER", "emf", "TAG", "head", "crimes", "state", "Murder", "Assault", "UrbanPop", "Rape", "Alabama", "alabama", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Alaska", "alaska", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Arizona", "arizona", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Arkansas", "arkansas", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "California", "california", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Colorado", "colorado", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "but", "states_map", "do", "not", "head", "states_map", "long", "lat", "group", "order", "region", "subregion", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "alabama", "TAG", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "alabama", "TAG", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "alabama", "TAG", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "alabama", "TAG", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "alabama", "TAG", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "alabama", "TAG", "When", "use", "geom_map", "the", "variable", "that", "links", "the", "polygons", "to", "the", "value", "in", "the", "dataset", "be", "ignored", "NUMBER", "In", "stead", "the", "region", "variable", "in", "states_maps", "be", "always", "use", "NUMBER", "In", "this", "example", "above", "this", "be", "expected", "behavior", "NUMBER", "But", "in", "this", "StackOverflow", "question", "this", "present", "a", "problem", "LINK", "map", "all", "subregions", "the", "same", "color", "NUMBER", "NUMBER", "So", "I", "think", "the", "map_id", "variable", "should", "be", "interpreted", "correctly", "and", "not", "ignored", "NUMBER", "I", "edit", "the", "SO", "answer", "I", "write", "to", "reflect", "the", "documentation", "NUMBER", "Thanks", "for", "the", "feedback", "NUMBER", "geom_smooth", "do", "not", "pick", "up", "its", "color", "from", "a", "scale_color_manual", "unless", "color", "be", "explicitly", "add", "to", "the", "aesthetic", "geom_line", "do", "NUMBER", "Perhaps", "this", "be", "best", "explained", "by", "illustration", "foo", "TAG", "NUMBER", "That", "be", "what", "I", "was", "trying", "to", "use", "the", "scale_color_manual", "to", "do", "to", "remove", "all", "the", "color", "from", "the", "plot", "NUMBER", "So", "I", "think", "that", "the", "miss", "piece", "be", "one", "or", "both", "of", "NUMBER", "make", "geom_smooth", "and", "friends", "read", "their", "default", "color", "from", "the", "theme", "instead", "of", "having", "a", "global", "default", "NUMBER", "This", "would", "let", "them", "be", "black", "in", "theme_bw", "but", "blue", "in", "theme_default", "NUMBER", "add", "a", "scale_color_constant", "function", "which", "would", "override", "any", "color", "that", "be", "specified", "by", "an", "aesthetic", "with", "a", "single", "value", "in", "this", "case", "black", "NUMBER", "This", "has", "the", "advantage", "of", "avoiding", "the", "need", "to", "specify", "black", "in", "each", "geom", "that", "makes", "up", "the", "graph", "NUMBER", "That", "turns", "this", "from", "a", "bug", "report", "into", "a", "feature", "request", "I", "suppose", "NUMBER", "I", "ve", "looked", "at", "the", "code", "involved", "and", "while", "I", "wouldn", "t", "say", "that", "I", "have", "wrapped", "my", "head", "around", "all", "its", "object", "orientedness", "I", "could", "take", "a", "crack", "at", "implement", "these", "things", "if", "there", "be", "interest", "in", "them", "NUMBER", "An", "ugly", "turn", "around", "to", "pass", "the", "NUMBER", "argument", "be", "the", "following", "R", "overload", "the", "locfit", "constructor", "locfit", "NUMBER", "smooth", "TAG", "But", "I", "wish", "I", "understood", "this", "better", "in", "general", "i", "NUMBER", "e", "NUMBER", "given", "the", "polar", "coordinates", "transformation", "why", "be", "that", "the", "correct", "distance", "metric", "me", "too", "Address", "Issue", "NUMBER", "request", "for", "news", "entry", "relate", "to", "push", "request", "NUMBER", "qplot", "runif", "NUMBER", "runif", "NUMBER", "opts", "axis", "NUMBER", "line", "theme_line", "Error", "in", "validDetails", "NUMBER", "polyline", "x", "It", "be", "invalid", "to", "specify", "both", "id", "and", "id", "NUMBER", "lengths", "It", "seems", "that", "when", "text", "labels", "be", "use", "dodged", "label", "positions", "get", "mix", "up", "NUMBER", "See", "LINK", "_thread", "thread", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "d", "NUMBER", "for", "the", "discussion", "NUMBER", "set", "NUMBER", "seed", "NUMBER", "df", "data", "NUMBER", "frame", "class", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "val", "round", "runif", "NUMBER", "NUMBER", "group", "c", "group", "NUMBER", "group", "NUMBER", "df", "text_labels", "as", "NUMBER", "character", "sprintf", "NUMBER", "f", "df", "val", "ggplot", "data", "df", "aes", "x", "class", "y", "val", "fill", "group", "geom_bar", "stat", "identity", "position", "position_dodge", "width", "NUMBER", "geom_text", "aes", "label", "text_labels", "y", "val", "NUMBER", "angle", "NUMBER", "alpha", "NUMBER", "position", "position_dodge", "width", "NUMBER", "geom_text", "aes", "label", "val", "y", "val", "NUMBER", "angle", "NUMBER", "colour", "red", "alpha", "NUMBER", "position", "position_dodge", "width", "NUMBER", "Hello", "I", "be", "use", "ggplot", "NUMBER", "and", "be", "having", "trouble", "with", "logic", "that", "worked", "in", "NUMBER", "The", "below", "code", "takes", "a", "list", "which", "I", "named", "sectorlist", "and", "be", "supposed", "to", "insert", "each", "item", "in", "the", "list", "into", "a", "function", "sectorplot", "NUMBER", "The", "function", "contains", "two", "plots", "NUMBER", "The", "problem", "be", "that", "the", "last", "plot", "be", "printed", "twice", "NUMBER", "This", "be", "an", "inconvenience", "NUMBER", "Can", "anyone", "tell", "by", "looking", "at", "this", "logic", "why", "it", "no", "longer", "works", "As", "mention", "the", "same", "code", "worked", "in", "version", "NUMBER", "for", "i", "in", "NUMBER", "length", "sectorlist", "print", "sectorplot", "as", "NUMBER", "character", "sectorlist", "i", "Thanks", "NUMBER", "Yes", "sectorplot", "returns", "a", "ggplot", "NUMBER", "Below", "be", "the", "code", "for", "sectorplot", "NUMBER", "As", "I", "mention", "x", "NUMBER", "df", "data", "NUMBER", "frame", "x", "x", "NUMBER", "sub", "x", "NUMBER", "df", "x", "NUMBER", "df", "VSR", "YES", "qrscore", "x", "NUMBER", "sub", "attach", "qrscore", "drop", "NUMBER", "levels", "TAG", "Loading", "required", "package", "ggplot", "NUMBER", "Loading", "required", "package", "grid", "name", "NUMBER", "label", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "vp", "layout", "label", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "label", "NUMBER", "A", "name", "NUMBER", "label", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "vp", "layout", "label", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "label", "NUMBER", "a", "R", "version", "NUMBER", "RC", "NUMBER", "NUMBER", "NUMBER", "r", "NUMBER", "Platform", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "gnu", "NUMBER", "bit", "locale", "NUMBER", "LC_CTYPE", "de_CH", "NUMBER", "UTF", "NUMBER", "LC_NUMERIC", "C", "LC_TIME", "en_US", "NUMBER", "UTF", "NUMBER", "NUMBER", "LC_COLLATE", "de_CH", "NUMBER", "UTF", "NUMBER", "LC_MONETARY", "en_US", "NUMBER", "UTF", "NUMBER", "LC_MESSAGES", "de_CH", "NUMBER", "UTF", "NUMBER", "NUMBER", "LC_PAPER", "C", "LC_NAME", "C", "LC_ADDRESS", "C", "NUMBER", "LC_TELEPHONE", "C", "LC_MEASUREMENT", "de_CH", "NUMBER", "UTF", "NUMBER", "LC_IDENTIFICATION", "C", "attached", "base", "package", "NUMBER", "grid", "graphics", "grDevices", "datasets", "stats", "utils", "methods", "base", "other", "attached", "package", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "fortunes_", "NUMBER", "NUMBER", "sfsmisc_", "NUMBER", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "colorspace_", "NUMBER", "NUMBER", "dichromat_", "NUMBER", "NUMBER", "digest_", "NUMBER", "MASS_", "NUMBER", "NUMBER", "NUMBER", "memoise_", "NUMBER", "munsell_", "NUMBER", "plyr_", "NUMBER", "proto_", "NUMBER", "NUMBER", "NUMBER", "RColorBrewer_", "NUMBER", "NUMBER", "reshape", "NUMBER", "_", "NUMBER", "scales_", "NUMBER", "stringr_", "NUMBER", "NUMBER", "tools_", "NUMBER", "I", "totally", "agree", "NUMBER", "I", "hope", "this", "feature", "the", "consistent", "naming", "of", "each", "grob", "will", "appear", "in", "the", "future", "version", "NUMBER", "I", "m", "wondering", "could", "we", "replace", "unique", "numbers", "as", "in", "axis", "NUMBER", "ticks", "NUMBER", "x", "NUMBER", "polyline", "NUMBER", "with", "an", "alternative", "that", "be", "more", "reproducible", "This", "last", "number", "as", "far", "as", "I", "can", "tell", "be", "constructed", "internally", "by", "grid", "and", "will", "vary", "from", "user", "to", "user", "and", "even", "from", "plot", "to", "plot", "in", "a", "given", "session", "NUMBER", "It", "makes", "post", "processing", "more", "difficult", "than", "it", "could", "be", "for", "example", "one", "might", "want", "to", "be", "sure", "that", "a", "particular", "grob", "has", "an", "exact", "name", "no", "matter", "what", "the", "drawing", "context", "may", "be", "to", "attach", "a", "SVG", "decoration", "to", "it", "alternatively", "the", "structure", "of", "two", "plots", "could", "be", "compared", "in", "a", "text", "representation", "use", "diff", "tool", "etc", "NUMBER", "BTW", "there", "s", "a", "pdf", "documenting", "the", "lattice", "naming", "convention", "LINK", "forge", "NUMBER", "r", "project", "NUMBER", "org", "Vignettes", "src", "naming", "scheme", "namingScheme", "NUMBER", "pdf", "I", "don", "t", "know", "to", "be", "honest", "it", "might", "be", "worth", "ask", "Paul", "Murrell", "for", "advice", "NUMBER", "I", "imagine", "if", "two", "plots", "be", "on", "the", "same", "device", "display", "list", "the", "low", "level", "grobs", "remain", "children", "of", "their", "unique", "parent", "and", "don", "t", "become", "delocalised", "or", "anything", "NUMBER", "If", "you", "specify", "the", "full", "grob", "path", "starting", "from", "the", "unique", "parent", "id", "it", "should", "find", "only", "one", "instance", "of", "the", "grob", "right", "IIRC", "there", "be", "the", "way", "to", "reset", "index", "in", "grid", "NUMBER", "Resetting", "it", "before", "plot", "will", "make", "thing", "reproducible", "NUMBER", "r", "assign", "index", "NUMBER", "environment", "grid", "grobAutoName", "can", "reset", "the", "index", "but", "I", "don", "t", "recommend", "NUMBER", "As", "hadley", "suggested", "we", "can", "ignore", "the", "suffix", "NUMBER", "I", "ve", "never", "read", "that", "a", "unique", "id", "was", "required", "grobAutoName", "be", "merely", "use", "when", "the", "user", "doesn", "t", "supply", "a", "name", "which", "doesn", "t", "have", "to", "be", "unique", "most", "of", "the", "above", "aren", "t", "if", "you", "push", "two", "identical", "plots", "on", "a", "device", "in", "fact", "my", "guess", "be", "that", "it", "be", "a", "relic", "of", "an", "old", "implementation", "NUMBER", "I", "can", "check", "with", "Paul", "if", "you", "want", "if", "it", "s", "not", "needed", "it", "just", "add", "noise", "to", "an", "otherwise", "very", "clean", "and", "consistent", "naming", "scheme", "NUMBER", "I", "ve", "made", "one", "small", "change", "to", "eliminate", "the", "trail", "unique", "integers", "NUMBER", "But", "we", "need", "to", "a", "think", "a", "bit", "about", "the", "naming", "scheme", "because", "it", "s", "currently", "a", "bit", "inconsistent", "NUMBER", "Should", "we", "use", "NUMBER", "or", "to", "separate", "components", "Should", "all", "names", "containing", "the", "class", "of", "the", "grob", "as", "the", "last", "component", "sorry", "i", "ve", "be", "busy", "and", "haven", "t", "find", "the", "time", "to", "summarise", "Paul", "s", "reply", "here", "Ok", "this", "be", "harder", "than", "I", "thought", "as", "well", "as", "fix", "ggname", "I", "think", "Geom", "draw_groups", "also", "needs", "to", "modify", "to", "rename", "all", "of", "the", "children", "geoms", "NUMBER", "To", "do", "this", "properly", "be", "pretty", "hard", "with", "the", "current", "structure", "of", "geoms", "NUMBER", "We", "ll", "fix", "it", "once", "and", "for", "all", "hopefully", "as", "part", "of", "the", "geom", "stat", "rewrite", "and", "conversion", "to", "s", "NUMBER", "Because", "the", "NUMBER", "be", "not", "the", "first", "argument", "of", "scale_", "function", "further", "argument", "cannot", "be", "abbreviated", "NUMBER", "For", "example", "library", "ggplot", "NUMBER", "set", "NUMBER", "seed", "NUMBER", "d", "TAG", "There", "s", "just", "not", "enough", "segment", "resolution", "near", "the", "center", "NUMBER", "There", "tends", "to", "be", "a", "higher", "information", "density", "near", "the", "center", "than", "at", "the", "edge", "resulting", "in", "tighter", "turns", "that", "require", "more", "segments", "NUMBER", "This", "be", "not", "easy", "to", "improve", "NUMBER", "Maybe", "there", "be", "some", "good", "algorithms", "to", "determine", "the", "breaks", "of", "curve", "NUMBER", "It", "s", "probably", "calculating", "distances", "on", "the", "y", "values", "before", "they", "re", "remapped", "to", "their", "ending", "radial", "position", "NUMBER", "For", "example", "a", "with", "a", "y", "range", "of", "NUMBER", "NUMBER", "a", "y", "value", "of", "NUMBER", "would", "be", "halfway", "from", "the", "center", "to", "the", "edge", "but", "this", "be", "calculating", "the", "number", "of", "segments", "based", "on", "the", "raw", "y", "value", "NUMBER", "This", "be", "demonstrated", "by", "the", "second", "and", "third", "examples", "NUMBER", "This", "be", "very", "easy", "to", "fix", "NUMBER", "stat_bin", "NUMBER", "d", "did", "not", "correctly", "handle", "NA", "s", "in", "the", "data", "NUMBER", "This", "could", "be", "triggered", "by", "setting", "scale", "limits", "which", "did", "not", "include", "the", "entire", "range", "of", "the", "data", "NUMBER", "This", "arose", "from", "a", "discussion", "on", "the", "mailing", "list", "LINK", "Thanks", "Brian", "will", "pull", "next", "time", "I", "m", "work", "on", "ggplot", "NUMBER", "It", "was", "easier", "to", "create", "another", "pull", "request", "with", "the", "update", "to", "NEWS", "NUMBER", "because", "when", "I", "branch", "off", "to", "make", "the", "fix", "NEWS", "didn", "t", "have", "anyplace", "to", "put", "new", "entries", "and", "I", "wanted", "each", "to", "apply", "cleanly", "NUMBER", "And", "I", "can", "t", "rebase", "an", "already", "public", "branch", "NUMBER", "Here", "be", "a", "verbose", "way", "to", "do", "that", "ggplot", "dat", "aes", "x", "y", "geom_bar", "stat", "identity", "geom_params", "list", "width", "NUMBER", "I", "m", "not", "sure", "if", "this", "be", "a", "bug", "but", "to", "fix", "this", "we", "need", "to", "reconsider", "the", "construction", "of", "layer", "especially", "the", "sensitivities", "to", "the", "parameters", "NUMBER", "I", "think", "the", "test", "be", "wrong", "NUMBER", "all", "be", "the", "category", "that", "be", "the", "margin", "NUMBER", "Effectively", "there", "should", "be", "a", "copy", "of", "the", "data", "where", "any", "margined", "value", "be", "replaced", "with", "all", "NUMBER", "I", "think", "that", "the", "test", "should", "be", "expect_that", "nrow", "loc", "equals", "NUMBER", "nrow", "df", "Or", "in", "general", "for", "n", "faceting", "variables", "expect_that", "nrow", "loc", "equals", "NUMBER", "n", "nrow", "df", "The", "all", "rows", "contain", "the", "data", "that", "be", "to", "be", "display", "use", "in", "the", "panels", "that", "be", "the", "marginals", "NUMBER", "I", "don", "t", "know", "what", "the", "bug", "be", "was", "that", "was", "be", "worked", "around", "NUMBER", "It", "was", "introduce", "in", "NUMBER", "fb", "NUMBER", "a", "NUMBER", "c", "NUMBER", "e", "NUMBER", "ea", "NUMBER", "c", "NUMBER", "e", "NUMBER", "de", "NUMBER", "f", "NUMBER", "a", "NUMBER", "by", "Hadley", "NUMBER", "There", "was", "later", "discussion", "of", "this", "bug", "on", "that", "commit", "NUMBER", "This", "bug", "fix", "warrants", "a", "mention", "in", "the", "NEWS", "file", "NUMBER", "It", "fetches", "NUMBER", "colours", "from", "a", "colorbrewer", "palette", "and", "feeds", "them", "to", "gradientn", "NUMBER", "It", "gives", "very", "nice", "results", "even", "if", "the", "palettes", "were", "not", "intended", "for", "that", "use", "originally", "NUMBER", "Ideally", "the", "regular", "brewer", "scale", "should", "be", "able", "to", "deal", "with", "this", "use", "scale_colour", "fill_brewer", "and", "provide", "a", "continuous", "or", "a", "discrete", "scale", "depending", "on", "the", "data", "NUMBER", "but", "this", "may", "run", "again", "into", "the", "problem", "that", "the", "data", "be", "only", "know", "at", "render", "time", "or", "something", "like", "this", "NUMBER", "Anyhow", "I", "couldn", "t", "figure", "out", "how", "to", "do", "that", "with", "the", "current", "state", "of", "the", "code", "so", "a", "created", "new", "function", "NUMBER", "The", "names", "scale_colour", "fill_brewerc", "be", "clearly", "not", "very", "inspired", "so", "I", "be", "completely", "open", "to", "suggestions", "NUMBER", "This", "be", "an", "example", "map", "produced", "with", "the", "Spectral", "palette", "and", "stereographic", "projection", "in", "coord_map", "Yay", "image", "LINK", "b", "NUMBER", "b", "NUMBER", "e", "NUMBER", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "c", "NUMBER", "d", "NUMBER", "png", "For", "those", "who", "want", "to", "know", "this", "be", "the", "average", "temperature", "at", "the", "sea", "surface", "in", "summer", "NUMBER", "What", "about", "scale_", "_distiller", "to", "signify", "that", "it", "goes", "a", "bit", "further", "than", "brewer", "NUMBER", "That", "s", "not", "very", "discoverable", "to", "say", "the", "least", "but", "be", "kinda", "fun", "NUMBER", "Just", "realized", "there", "might", "be", "some", "unintended", "association", "with", "Acrobat", "Distiller", "and", "the", "production", "of", "PDFs", "etc", "NUMBER", "Did", "anyone", "else", "think", "of", "this", "So", "what", "about", "scale_", "_distiller", "Opinions", "anyone", "I", "know", "I", "won", "t", "be", "able", "to", "find", "a", "better", "name", "but", "native", "english", "speakers", "might", "NUMBER", "The", "only", "thing", "I", "can", "think", "of", "would", "require", "overhauling", "all", "the", "color", "fill", "names", "make", "the", "method", "of", "generation", "of", "the", "levels", "a", "suffix", "NUMBER", "So", "this", "would", "be", "scale_", "_continuous_brewer", "and", "the", "current", "scale_", "_brewer", "would", "be", "scale_", "_discrete_brewer", "scale_", "_gradient", "would", "be", "scale_", "_continuous_gradient", "etc", "NUMBER", "However", "I", "be", "not", "sure", "that", "it", "would", "be", "worth", "it", "even", "with", "the", "original", "names", "be", "maintained", "as", "aliases", "for", "backwards", "compatibility", "NUMBER", "It", "s", "always", "seem", "kind", "of", "odd", "to", "me", "that", "Brewer", "palettes", "and", "if", "they", "were", "to", "be", "implement", "those", "of", "dichromat", "would", "have", "their", "own", "special", "syntax", "in", "ggplot", "NUMBER", "Should", "we", "consider", "the", "possibility", "of", "hard", "code", "these", "particular", "colour", "values", "in", "ggplot", "NUMBER", "or", "package", "scales", "presumably", "independently", "of", "the", "original", "package", "and", "make", "a", "more", "consistent", "interface", "to", "all", "these", "special", "cases", "It", "could", "even", "be", "part", "of", "a", "new", "colour", "package", "defining", "a", "general", "structure", "to", "define", "and", "access", "colour", "palettes", "NUMBER", "The", "weird", "contraints", "of", "RColorBrewer", "n", "NUMBER", "for", "Set", "NUMBER", "the", "absence", "of", "continuous", "version", "and", "the", "inconsistent", "naming", "scheme", "be", "somewhat", "confusing", "in", "the", "otherwise", "consistent", "ggplot", "NUMBER", "framework", "NUMBER", "I", "agree", "with", "baptiste", "though", "NUMBER", "I", "think", "there", "should", "be", "two", "colour", "scales", "scale_colour_discrete", "and", "scale_colour_continuous", "and", "the", "palette", "argument", "should", "determine", "which", "colours", "to", "use", "NUMBER", "For", "the", "discrete", "scale", "the", "default", "could", "be", "hue", "and", "that", "would", "be", "the", "current", "behaviour", "or", "the", "appropriate", "palettes", "from", "ColorBrewer", "or", "dichromat", "NUMBER", "But", "that", "would", "probably", "break", "too", "much", "pre", "exist", "code", "to", "be", "viable", "NUMBER", "But", "that", "would", "probably", "break", "too", "much", "pre", "exist", "code", "to", "be", "viable", "NUMBER", "not", "necessarily", "if", "scale_colour_brewer", "became", "merely", "an", "alias", "for", "scale_colour_discrete", "palette", "NUMBER", "the", "more", "general", "function", "would", "not", "have", "to", "break", "anything", "NUMBER", "On", "NUMBER", "Jun", "NUMBER", "at", "NUMBER", "NUMBER", "hadley", "wickham", "write", "I", "don", "t", "particularly", "see", "the", "appeal", "of", "collapsing", "scales", "with", "rather", "different", "argument", "in", "to", "one", "function", "I", "think", "two", "many", "r", "function", "do", "that", "already", "and", "it", "s", "rather", "confusing", "NUMBER", "A", "function", "should", "do", "one", "thing", "well", "NUMBER", "I", "agree", "that", "from", "a", "programming", "point", "of", "view", "a", "function", "should", "be", "as", "elemental", "as", "possible", "and", "do", "one", "thing", "and", "one", "thing", "only", "very", "well", "NUMBER", "From", "a", "User", "Interaction", "standpoint", "however", "you", "want", "an", "interface", "as", "simple", "and", "compact", "as", "possible", "NUMBER", "So", "if", "I", "want", "to", "change", "the", "colour", "of", "my", "geom", "I", "_always_", "use", "scale_colour_discrete", "continuous", "actually", "as", "you", "know", "I", "would", "even", "prefer", "scale_colour", "and", "leave", "the", "rest", "to", "be", "figured", "out", "by", "the", "function", "NUMBER", "This", "function", "should", "have", "a", "nice", "set", "of", "defaults", "that", "work", "well", "enough", "NUMBER", "Now", "once", "I", "be", "more", "familiar", "with", "the", "function", "I", "can", "go", "and", "explore", "a", "bit", "more", "to", "make", "more", "complex", "stuff", "with", "it", "NUMBER", "At", "that", "point", "I", "find", "a", "palette", "argument", "to", "scale_colour_", "more", "discoverable", "than", "several", "separate", "function", "NUMBER", "But", "in", "the", "end", "it", "s", "probably", "a", "matter", "of", "personal", "preference", "NUMBER", "For", "example", "I", "love", "the", "OS", "X", "menu", "UI", "where", "you", "can", "browse", "all", "the", "plain", "and", "simple", "menu", "actions", "and", "when", "you", "press", "Alt", "some", "of", "the", "menu", "items", "change", "and", "provide", "more", "advance", "actions", "NUMBER", "That", "s", "simple", "as", "a", "first", "approach", "and", "there", "be", "a", "consistent", "way", "to", "get", "more", "advance", "stuff", "NUMBER", "Some", "people", "hate", "that", "and", "would", "rather", "have", "everything", "expose", "from", "the", "onset", "or", "access", "toe", "advance", "stuff", "though", "another", "UI", "entirely", "NUMBER", "To", "me", "that", "s", "quite", "akin", "to", "having", "a", "consistent", "function", "as", "the", "main", "UI", "with", "more", "advance", "stuff", "hidden", "away", "into", "argument", "instead", "of", "several", "function", "which", "all", "look", "equally", "important", "NUMBER", "I", "don", "t", "particularly", "see", "the", "appeal", "of", "collapsing", "scales", "with", "rather", "different", "argument", "in", "to", "one", "function", "I", "think", "two", "many", "r", "function", "do", "that", "already", "and", "it", "s", "rather", "confusing", "NUMBER", "A", "function", "should", "do", "one", "thing", "well", "NUMBER", "I", "m", "not", "sure", "if", "a", "grammar", "of", "graphic", "do", "such", "a", "good", "job", "at", "combining", "heaps", "of", "different", "plot", "types", "into", "a", "single", "consistent", "framework", "with", "one", "top", "level", "function", "ggplot", "why", "couldn", "t", "we", "aim", "for", "the", "same", "approach", "with", "scales", "It", "seems", "to", "me", "that", "choosing", "a", "colour", "scale", "be", "conceptually", "similar", "to", "choosing", "a", "type", "of", "plot", "and", "playing", "with", "variations", "from", "a", "user", "s", "perspective", "NUMBER", "Having", "a", "wild", "variety", "of", "different", "colour", "function", "that", "inherit", "their", "name", "from", "the", "particular", "colour", "package", "they", "come", "from", "or", "the", "type", "of", "scale", "that", "they", "represent", "or", "something", "else", "NUMBER", "seems", "more", "confusing", "to", "me", "than", "one", "or", "two", "generic", "function", "with", "good", "defaults", "that", "accept", "one", "consistent", "argument", "for", "fine", "tuning", "the", "appearance", "namely", "the", "palette", "of", "colours", "NUMBER", "It", "s", "quite", "different", "from", "the", "problem", "at", "hand", "but", "while", "we", "be", "on", "the", "topic", "of", "scales", "and", "since", "many", "interested", "parties", "be", "watching", "the", "topic", "here", "be", "another", "suggestion", "issue", "NUMBER", "Edit", "wow", "it", "actually", "get", "automatically", "referenced", "here", "NUMBER", "Nice", "NUMBER", "Thanks", "github", "NUMBER", "Running", "the", "following", "code", "leads", "to", "the", "dotplot", "elements", "be", "centered", "for", "the", "H", "factor", "as", "expected", "but", "leads", "to", "dotplot", "elements", "of", "the", "L", "factor", "to", "be", "slightly", "offset", "to", "the", "left", "NUMBER", "dat", "TAG", "It", "looks", "like", "the", "problem", "may", "be", "with", "the", "dodging", "code", "itself", "NUMBER", "I", "believe", "it", "made", "some", "assumptions", "about", "geoms", "that", "aren", "t", "always", "true", "NUMBER", "I", "write", "a", "preliminary", "fix", "which", "be", "at", "wch", "NUMBER", "e", "NUMBER", "f", "NUMBER", "de", "NUMBER", "e", "NUMBER", "f", "NUMBER", "d", "NUMBER", "fc", "NUMBER", "a", "NUMBER", "c", "NUMBER", "f", "NUMBER", "You", "can", "test", "out", "with", "R", "library", "devtools", "dev_mode", "install_github", "ggplot", "NUMBER", "wch", "fix", "dodge", "library", "ggplot", "NUMBER", "I", "m", "not", "NUMBER", "sure", "yet", "that", "it", "won", "t", "mess", "up", "other", "stuff", "so", "if", "you", "could", "try", "it", "out", "and", "let", "me", "know", "that", "would", "be", "really", "helpful", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "In", "the", "documentation", "for", "facet_grid", "the", "margins", "parameter", "be", "describe", "as", "logical", "value", "should", "marginal", "rows", "and", "columns", "be", "display", "In", "fact", "margins", "can", "also", "take", "on", "a", "vector", "of", "character", "values", "which", "specify", "which", "variables", "margins", "be", "to", "be", "computed", "NUMBER", "This", "functionality", "was", "request", "in", "Issue", "NUMBER", "but", "never", "documented", "NUMBER", "I", "have", "a", "SpatialPolygonsDataFrame", "in", "which", "the", "FIDs", "have", "be", "set", "to", "a", "specific", "column", "in", "the", "data", "NUMBER", "frame", "NUMBER", "fortify", "NUMBER", "SpatialPolygonsDataFrame", "be", "then", "not", "giving", "the", "result", "I", "expected", "it", "seems", "to", "be", "reordering", "the", "features", "and", "giving", "them", "the", "wrong", "label", "the", "id", "column", "of", "the", "resulting", "ggplot", "data", "NUMBER", "frame", "doesn", "t", "match", "the", "region", "id", "of", "the", "original", "sp", "object", "NUMBER", "The", "reordering", "seems", "to", "happen", "in", "the", "split", "or", "invert", "commands", "of", "fortify", "NUMBER", "SpatialPolygonsDataFrame", "NUMBER", "I", "have", "attached", "reproducible", "code", "with", "the", "expected", "spplot", "results", "the", "unexpect", "results", "from", "fortify", "NUMBER", "SpatialPolygonsDataFrame", "and", "how", "I", "fix", "it", "by", "rewriting", "the", "fortify", "to", "be", "more", "like", "fortify", "NUMBER", "SpatialPolygons", "and", "use", "the", "Feature", "IDs", "to", "name", "the", "ids", "and", "merge", "the", "data", "NUMBER", "frame", "attributes", "NUMBER", "It", "be", "entirely", "possible", "that", "I", "be", "use", "the", "region", "parameter", "of", "fortify", "improperly", "I", "don", "t", "know", "NUMBER", "Does", "anyone", "know", "what", "be", "going", "wrong", "with", "fortify", "NUMBER", "SpatialPolygonsDataFrame", "here", "or", "with", "how", "I", "be", "use", "it", "Nicholas", "Nicholas", "Nagle", "Dept", "NUMBER", "of", "Geography", "University", "of", "Tennessee", "NUMBER", "Burchfiel", "Geography", "Bldg", "NUMBER", "Knoxville", "TN", "NUMBER", "R", "download", "NUMBER", "file", "LINK", "_shp", "NUMBER", "Rdata", "boston_shp", "NUMBER", "Rdata", "load", "boston_shp", "NUMBER", "Rdata", "boston_shp", "the", "Harrison", "Rubinfeld", "boston", "data", "attached", "to", "the", "NUMBER", "tract", "boundaries", "from", "the", "National", "Historical", "GIS", "TAG", "The", "Feature", "IDs", "be", "also", "the", "TRACT", "columns", "Desired", "result", "NUMBER", "spplot", "boston_shp", "dis", "Does", "not", "work", "as", "expected", "boston", "NUMBER", "ggdf", "TAG", "NUMBER", "Actually", "breaks", "something", "fail", "when", "something", "be", "outside", "of", "the", "data", "range", "and", "coord_map", "be", "use", "qplot", "runif", "NUMBER", "runif", "NUMBER", "qplot", "runif", "NUMBER", "runif", "NUMBER", "scale_x_continuous", "breaks", "NUMBER", "qplot", "runif", "NUMBER", "runif", "NUMBER", "coord_map", "qplot", "runif", "NUMBER", "runif", "NUMBER", "scale_x_continuous", "breaks", "NUMBER", "coord_map", "qplot", "runif", "NUMBER", "runif", "NUMBER", "scale_x_continuous", "breaks", "NUMBER", "qplot", "runif", "NUMBER", "runif", "NUMBER", "scale_x_continuous", "breaks", "NUMBER", "coord_map", "Just", "a", "note", "here", "be", "a", "workaround", "ggplot", "dat", "aes", "x", "y", "geom_point", "scale_y_continuous", "breaks", "seq", "NUMBER", "NUMBER", "NUMBER", "limits", "c", "NUMBER", "NUMBER", "coord_cartesian", "ylim", "c", "NUMBER", "NUMBER", "So", "this", "be", "a", "general", "problem", "in", "calculating", "the", "ranges", "for", "breaks", "of", "position", "guide", "NUMBER", "Now", "the", "range", "be", "based", "on", "the", "data", "range", "NUMBER", "So", "if", "coord", "be", "wider", "than", "data", "you", "need", "to", "tell", "the", "scales", "the", "range", "of", "coord", "NUMBER", "This", "can", "be", "fix", "NUMBER", "jiho", "could", "you", "please", "change", "the", "title", "of", "issue", "to", "easily", "recall", "the", "problem", "by", "the", "title", "Done", "NUMBER", "Do", "you", "like", "the", "title", "jiho", "thanks", "NUMBER", "One", "may", "want", "to", "group", "objects", "by", "soem", "time", "increment", "when", "use", "scale_z_date", "datetime", "for", "either", "z", "x", "or", "z", "y", "axes", "NUMBER", "Syntax", "such", "as", "the", "following", "would", "allow", "one", "to", "both", "indicate", "you", "want", "to", "group", "by", "time", "and", "by", "what", "time", "interval", "you", "want", "the", "grouping", "to", "occur", "NUMBER", "qplot", "time", "y", "data", "d", "geom", "boxplot", "fill", "z", "group", "time", "scale_x_date", "group", "NUMBER", "day", "The", "above", "would", "say", "that", "in", "data", "set", "d", "you", "want", "boxplots", "for", "each", "day", "and", "those", "boxplots", "should", "be", "split", "by", "the", "levels", "of", "variable", "z", "NUMBER", "This", "would", "be", "a", "nice", "enhancement", "NUMBER", "Could", "you", "please", "provide", "a", "complete", "example", "data", "and", "a", "rough", "picture", "of", "the", "plot", "you", "want", "if", "possible", "Consider", "the", "following", "example", "R", "test", "NUMBER", "df", "TAG", "Error", "in", "initFields", "scales", "scales", "could", "not", "find", "function", "initRefFields", "Calls", "ggplot", "NUMBER", "initialize", "initialize", "TAG", "initFields", "on", "R", "OS", "version", "platform", "x", "NUMBER", "_", "NUMBER", "apple", "darwin", "NUMBER", "arch", "x", "NUMBER", "_", "NUMBER", "os", "darwin", "NUMBER", "system", "x", "NUMBER", "_", "NUMBER", "darwin", "NUMBER", "status", "major", "NUMBER", "minor", "NUMBER", "year", "NUMBER", "month", "NUMBER", "day", "NUMBER", "svn", "rev", "NUMBER", "language", "R", "version", "NUMBER", "ring", "R", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Using", "ggplot", "NUMBER", "NUMBER", "downloaded", "from", "CRAN", "this", "morning", "Package", "ggplot", "NUMBER", "Type", "Package", "Title", "An", "implementation", "of", "the", "Grammar", "of", "Graphics", "Version", "NUMBER", "Author", "Hadley", "Wickham", "h", "NUMBER", "wickham", "gmail", "NUMBER", "com", "Maintainer", "Hadley", "Wickham", "h", "NUMBER", "wickham", "gmail", "NUMBER", "com", "Description", "An", "implementation", "of", "the", "grammar", "of", "graphics", "in", "R", "NUMBER", "It", "combines", "the", "advantages", "of", "both", "base", "and", "lattice", "graphics", "conditioning", "and", "shared", "axes", "be", "handle", "automatically", "and", "you", "can", "still", "build", "up", "a", "plot", "step", "by", "step", "from", "multiple", "data", "sources", "NUMBER", "It", "also", "implement", "a", "sophisticated", "multidimensional", "conditioning", "system", "and", "a", "consistent", "interface", "to", "map", "data", "to", "aesthetic", "attributes", "NUMBER", "See", "the", "ggplot", "NUMBER", "website", "for", "more", "information", "documentation", "and", "examples", "NUMBER", "Depends", "R", "NUMBER", "stats", "methods", "Imports", "plyr", "NUMBER", "digest", "grid", "reshape", "NUMBER", "scales", "memoise", "proto", "MASS", "Suggests", "quantreg", "Hmisc", "mapproj", "maps", "hexbin", "gpclib", "maptools", "multcomp", "nlme", "Extends", "sp", "License", "GPL", "NUMBER", "URL", "LINK", "ggplot", "NUMBER", "NUMBER", "seems", "to", "actually", "require", "R", "NUMBER", "it", "do", "not", "run", "in", "NUMBER", "Upgrade", "to", "NUMBER", "fix", "this", "issue", "NUMBER", "It", "seems", "the", "description", "file", "should", "read", "Depends", "R", "NUMBER", "Unless", "specify", "the", "minor", "version", "to", "subdecimal", "be", "bad", "form", "NUMBER", "Found", "that", "update", "ggplot", "NUMBER", "to", "NUMBER", "and", "R", "to", "v", "NUMBER", "still", "do", "not", "work", "NUMBER", "Any", "hint", "there", "goes", "session", "info", "sessionInfo", "R", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Platform", "x", "NUMBER", "_", "NUMBER", "pc", "mingw", "NUMBER", "x", "NUMBER", "NUMBER", "bit", "attached", "base", "package", "NUMBER", "stats", "graphics", "grDevices", "utils", "datasets", "methods", "base", "other", "attached", "package", "NUMBER", "plyr_", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "colorspace_", "NUMBER", "NUMBER", "dichromat_", "NUMBER", "NUMBER", "digest_", "NUMBER", "grid_", "NUMBER", "MASS_", "NUMBER", "NUMBER", "NUMBER", "memoise_", "NUMBER", "munsell_", "NUMBER", "proto_", "NUMBER", "NUMBER", "RColorBrewer_", "NUMBER", "NUMBER", "reshape", "NUMBER", "_", "NUMBER", "NUMBER", "scales_", "NUMBER", "stringr_", "NUMBER", "tools_", "NUMBER", "Something", "didn", "t", "seem", "to", "work", "with", "your", "upgrade", "the", "base", "package", "be", "still", "at", "NUMBER", "see", "for", "example", "the", "attached", "tool", "package", "NUMBER", "When", "you", "upgrade", "you", "should", "get", "a", "newer", "version", "of", "all", "the", "base", "package", "as", "well", "NUMBER", "I", "m", "not", "sure", "what", "would", "cause", "the", "mismatch", "NUMBER", "A", "standard", "install", "of", "R", "NUMBER", "should", "just", "work", "NUMBER", "This", "happens", "when", "x", "theta", "be", "continuous", "R", "set", "NUMBER", "seed", "NUMBER", "dat", "TAG", "x", "TAG", "x", "x", "Inf", "NUMBER", "NA", "test", "for", "infinity", "in", "coord_munch", "be", "incorrect", "which", "be", "easy", "to", "be", "fix", "NUMBER", "I", "was", "taking", "a", "look", "at", "NUMBER", "and", "experimenting", "with", "coord_trans", "y", "log", "NUMBER", "instead", "of", "use", "scale_y_log", "NUMBER", "NUMBER", "But", "it", "doesn", "t", "seem", "to", "work", "with", "some", "geoms", "and", "some", "transform", "function", "NUMBER", "R", "dat", "TAG", "That", "would", "be", "cool", "do", "you", "have", "anything", "write", "about", "where", "the", "positional", "guide", "system", "be", "going", "Not", "yet", "NUMBER", "I", "will", "upload", "it", "on", "a", "github", "soon", "in", "a", "few", "days", "i", "hope", "NUMBER", "It", "will", "be", "a", "variant", "of", "guide_axis", "or", "guide_axis", "may", "have", "an", "option", "which", "inside", "or", "outside", "the", "ticks", "be", "drawn", "NUMBER", "library", "ggplot", "NUMBER", "d", "TAG", "sc", "TAG", "scale_train", "sc", "c", "NUMBER", "NUMBER", "NUMBER", "scale_limits", "sc", "NUMBER", "NUMBER", "NUMBER", "scale_breaks", "sc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "scale_pretty_limits", "TAG", "scale_pretty_limits", "sc", "NUMBER", "NUMBER", "NUMBER", "scale_breaks", "sc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "scale_break_positions", "sc", "NUMBER", "NA", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "but", "should", "be", "like", "this", "scale_breaks_positions", "sc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Of", "course", "you", "can", "set", "the", "limits", "by", "qplot", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "scale_x_continuous", "limits", "c", "NUMBER", "NUMBER", "But", "I", "like", "this", "be", "default", "behavior", "NUMBER", "What", "do", "you", "think", "good", "idea", "So", "we", "need", "thin", "wrappers", "for", "labeling", "family", "NUMBER", "eg", "NUMBER", "rpretty", "TAG", "interpolate", "FALSE", "TAG", "NUMBER", "Can", "we", "get", "that", "as", "an", "argument", "to", "TAG", "geom_raster", "TAG", "and", "TAG", "annotation_raster", "TAG", "Sure", "I", "have", "a", "version", "of", "TAG", "annotation_raster", "TAG", "in", "ggmap", "not", "export", "which", "do", "the", "job", "until", "it", "can", "get", "into", "ggplot", "NUMBER", "Using", "the", "file", "LINK", "check", "out", "the", "difference", "library", "devtools", "dev_mode", "install_github", "ggmap", "username", "dkahle", "branch", "master", "r", "TAG", "Could", "you", "please", "also", "provide", "a", "non", "visual", "test", "Sounds", "challenging", "NUMBER", "Ok", "I", "will", "try", "Now", "I", "find", "it", "be", "almost", "impossible", "NUMBER", "I", "tried", "to", "use", "the", "return", "value", "of", "ggplot_buide", "but", "the", "return", "value", "be", "OK", "NUMBER", "The", "bug", "be", "in", "the", "conversion", "from", "the", "data", "to", "geom", "NUMBER", "How", "can", "I", "manage", "this", "type", "of", "bug", "in", "a", "non", "visual", "test", "Should", "I", "use", "grid", "NUMBER", "get", "I", "think", "in", "the", "next", "version", "NUMBER", "it", "will", "be", "easier", "to", "do", "these", "test", "NUMBER", "Sounds", "nice", "Given", "this", "continuous", "data", "library", "ggplot", "NUMBER", "set", "NUMBER", "seed", "NUMBER", "d", "TAG", "We", "probably", "need", "a", "little", "documentation", "for", "scale_breaks_minor", "describing", "exactly", "what", "it", "do", "NUMBER", "Who", "be", "going", "to", "We", "also", "need", "someway", "to", "easily", "control", "the", "number", "of", "minor", "breaks", "between", "major", "breaks", "NUMBER", "ggplot", "NUMBER", "may", "have", "its", "own", "number", "unit", "representation", "at", "least", "internally", "NUMBER", "e", "NUMBER", "g", "NUMBER", "minor_breaks", "c", "NUMBER", "NUMBER", "NUMBER", "raw", "numeric", "minor_breaks", "ggunit", "NUMBER", "count", "number", "of", "minor", "breaks", "between", "major", "breaks", "minor_breaks", "ggunit", "NUMBER", "level", "in", "the", "case", "of", "date", "datetime", "if", "major", "breaks", "month", "minor", "week", "NUMBER", "I", "imagine", "this", "function", "would", "be", "useful", "in", "many", "places", "NUMBER", "of", "course", "ggunit", "be", "a", "simple", "function", "like", "this", "ggunit", "TAG", "pro", "data", "NUMBER", "frame", "position", "c", "NUMBER", "NUMBER", "logratio", "rnorm", "NUMBER", "library", "ggplot", "NUMBER", "sc", "scale_fill_manual", "values", "c", "NUMBER", "breakpoint", "ff", "NUMBER", "d", "NUMBER", "d", "normal", "f", "NUMBER", "f", "NUMBER", "bf", "NUMBER", "breakpoints", "a", "NUMBER", "ee", "makeplot", "function", "ann", "ggplot", "geom_rect", "aes", "xmin", "min", "xmax", "max", "fill", "annotation", "ymax", "NUMBER", "ymin", "NUMBER", "data", "ann", "geom_point", "aes", "position", "logratio", "pch", "NUMBER", "colour", "black", "data", "pro", "p", "makeplot", "data", "NUMBER", "frame", "min", "c", "NUMBER", "NUMBER", "NUMBER", "max", "c", "NUMBER", "NUMBER", "NUMBER", "annotation", "c", "NUMBER", "breakpoints", "NUMBER", "breakpoint", "normal", "ok", "p", "sc", "ok", "p", "makeplot", "data", "NUMBER", "frame", "min", "c", "NUMBER", "NUMBER", "NUMBER", "max", "c", "NUMBER", "NUMBER", "NUMBER", "annotation", "c", "NUMBER", "breakpoint", "NUMBER", "breakpoints", "NUMBER", "breakpoints", "ok", "p", "sc", "NUMBER", "breakpoints", "color", "not", "what", "I", "specified", "in", "scale_fill_manual", "TAG", "Very", "strange", "whether", "or", "not", "the", "scale", "works", "seems", "to", "depend", "on", "the", "number", "and", "order", "of", "items", "NUMBER", "R", "A", "data", "frame", "with", "two", "levels", "of", "g", "dat", "NUMBER", "TAG", "NUMBER", "breakpoints", "first", "in", "the", "scale", "NUMBER", "I", "run", "this", "bisection", "script", "LINK", "It", "says", "NUMBER", "bcccb", "NUMBER", "f", "NUMBER", "b", "NUMBER", "ed", "NUMBER", "ebf", "NUMBER", "a", "NUMBER", "cf", "NUMBER", "b", "NUMBER", "af", "NUMBER", "c", "NUMBER", "caf", "NUMBER", "be", "the", "first", "bad", "commit", "and", "that", "s", "the", "commit", "that", "fix", "NUMBER", "The", "output", "of", "the", "script", "can", "be", "viewed", "without", "doing", "all", "the", "git", "bisect", "stuff", "by", "just", "run", "it", "from", "the", "command", "line", "NUMBER", "The", "colors", "of", "the", "bars", "in", "the", "graph", "should", "be", "lightblue", "blue", "blue", "going", "from", "left", "to", "right", "NUMBER", "In", "NUMBER", "they", "re", "in", "that", "order", "NUMBER", "At", "some", "point", "they", "become", "blue", "darkblue", "darkblue", "indicating", "that", "the", "names", "for", "the", "values", "be", "not", "be", "respected", "that", "was", "bug", "NUMBER", "After", "the", "fix", "for", "NUMBER", "the", "colors", "be", "_blank_", "blue", "blue", "NUMBER", "wch", "I", "m", "having", "similar", "issue", "NUMBER", "I", "m", "starting", "to", "develop", "a", "work", "hypothesis", "NUMBER", "Whatever", "be", "cause", "the", "problem", "seems", "to", "behave", "like", "this", "Compute", "the", "number", "of", "unique", "fill", "values", "n", "in", "the", "data", "NUMBER", "In", "your", "example", "above", "n", "NUMBER", "since", "the", "only", "unique", "values", "for", "g", "be", "B", "and", "A", "NUMBER", "Let", "s", "call", "the", "collection", "of", "unique", "data", "values", "dataValues", "NUMBER", "Read", "the", "first", "n", "items", "in", "the", "values", "argument", "to", "scale_fill_manual", "NUMBER", "We", "ll", "call", "those", "first", "n", "items", "scaleValues", "NUMBER", "In", "your", "first", "Not", "OK", "example", "above", "scaleValues", "c", "B", "red", "C", "green", "Match", "any", "values", "in", "dataValues", "with", "those", "in", "scaleValues", "NUMBER", "Note", "that", "in", "your", "examples", "above", "the", "first", "Not", "OK", "one", "be", "where", "the", "definition", "for", "a", "data", "s", "fill", "value", "A", "blue", "be", "the", "third", "element", "of", "values", "NUMBER", "My", "hypothesis", "be", "that", "since", "there", "were", "only", "NUMBER", "unique", "values", "of", "that", "factor", "in", "the", "data", "itself", "the", "scale", "function", "stopped", "reading", "in", "values", "after", "two", "and", "never", "saw", "the", "third", "element", "A", "that", "should", "have", "be", "matched", "for", "blue", "rectangles", "NUMBER", "I", "wondered", "if", "this", "pattern", "would", "extend", "so", "I", "created", "a", "gist", "to", "test", "my", "hypothesis", "LINK", "NUMBER", "Every", "result", "in", "my", "gist", "be", "consistent", "with", "my", "hypothesis", "NUMBER", "For", "any", "n", "unique", "values", "of", "a", "factor", "in", "the", "data", "I", "can", "get", "all", "the", "fill", "colors", "to", "appear", "as", "long", "as", "they", "re", "listed", "within", "the", "first", "n", "elements", "of", "values", "NUMBER", "I", "also", "show", "I", "think", "how", "one", "can", "selectively", "cause", "certain", "values", "not", "to", "appear", "by", "make", "sure", "they", "re", "ordered", "after", "the", "n", "th", "element", "of", "values", "NUMBER", "I", "really", "really", "want", "to", "solve", "this", "problem", "because", "it", "s", "affecting", "my", "package", "too", "NUMBER", "Please", "let", "me", "know", "if", "you", "think", "my", "explanation", "matches", "the", "behavior", "NUMBER", "That", "sounds", "like", "a", "reasonable", "explanation", "NUMBER", "It", "has", "something", "to", "do", "with", "those", "lines", "change", "in", "the", "commit", "so", "it", "shouldn", "t", "be", "too", "hard", "to", "find", "and", "fix", "NUMBER", "OK", "I", "have", "a", "fix", "NUMBER", "It", "also", "required", "modifying", "the", "palette", "function", "in", "the", "scales", "package", "NUMBER", "One", "drawback", "to", "modularization", "of", "package", "be", "that", "it", "makes", "it", "complicated", "to", "synchronize", "and", "reference", "fix", "NUMBER", "The", "problem", "was", "that", "scale", "palette", "n", "can", "only", "take", "a", "number", "when", "it", "sometimes", "needs", "a", "vector", "of", "names", "instead", "NUMBER", "For", "example", "if", "the", "specified", "colors", "be", "c", "B", "red", "C", "blue", "A", "green", "but", "the", "data", "only", "contains", "c", "B", "A", "A", "then", "scale", "palette", "n", "returns", "only", "the", "first", "two", "palette", "items", "for", "B", "and", "C", "NUMBER", "This", "be", "why", "A", "ends", "up", "blank", "NUMBER", "I", "modify", "the", "palette", "function", "to", "optionally", "take", "a", "limits", "parameter", "which", "be", "a", "vector", "of", "names", "NUMBER", "The", "limits", "of", "the", "data", "in", "this", "case", "be", "c", "A", "B", "and", "the", "function", "returns", "the", "appropriate", "named", "palette", "items", "NUMBER", "You", "can", "see", "the", "commit", "in", "scales", "here", "wch", "scales", "NUMBER", "c", "NUMBER", "da", "NUMBER", "ed", "NUMBER", "cf", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "abb", "NUMBER", "c", "To", "try", "it", "out", "you", "can", "either", "fetch", "my", "branch", "of", "scales", "and", "ggplot", "NUMBER", "or", "you", "can", "install", "directly", "NUMBER", "Bear", "in", "mind", "that", "I", "change", "only", "two", "types", "of", "palettes", "I", "think", "the", "others", "will", "also", "need", "to", "be", "change", "NUMBER", "To", "install", "install_github", "wch", "scales", "palette", "limits", "install_github", "wch", "ggplot", "NUMBER", "fix", "manual", "palette", "briandk", "With", "these", "fix", "it", "pass", "your", "new", "test", "in", "NUMBER", "Currently", "the", "out", "of", "bounds", "parameter", "appears", "to", "have", "no", "effect", "and", "perhaps", "a", "bug", "NUMBER", "These", "all", "produce", "the", "same", "graph", "library", "ggplot", "NUMBER", "library", "scales", "qplot", "rep", "NUMBER", "NUMBER", "scale_y_continuous", "limits", "c", "NUMBER", "NUMBER", "oob", "squish", "qplot", "rep", "NUMBER", "NUMBER", "scale_y_continuous", "limits", "c", "NUMBER", "NUMBER", "oob", "censor", "It", "may", "be", "easier", "to", "see", "the", "issue", "with", "this", "R", "dat", "TAG", "example", "from", "help", "stat_contour", "library", "reshape", "NUMBER", "volcano", "NUMBER", "d", "melt", "volcano", "names", "volcano", "NUMBER", "d", "c", "x", "y", "z", "library", "ggplot", "NUMBER", "p", "ggplot", "volcano", "NUMBER", "d", "aes", "x", "y", "z", "z", "stat_contour", "aes", "colour", "NUMBER", "level", "NUMBER", "print", "p", "the", "colors", "of", "the", "contours", "on", "the", "plot", "be", "incorrect", "TAG", "I", "don", "t", "know", "how", "helpful", "this", "will", "be", "but", "a", "git", "bisect", "finds", "the", "change", "to", "be", "somewhere", "between", "commit", "a", "NUMBER", "c", "NUMBER", "c", "NUMBER", "dd", "NUMBER", "ca", "NUMBER", "aec", "NUMBER", "d", "NUMBER", "edf", "NUMBER", "ccfc", "NUMBER", "a", "last", "good", "commit", "and", "NUMBER", "f", "NUMBER", "d", "NUMBER", "c", "NUMBER", "cbe", "NUMBER", "e", "NUMBER", "b", "NUMBER", "f", "NUMBER", "dc", "NUMBER", "fc", "first", "bad", "commit", "NUMBER", "Unfortunately", "there", "were", "many", "commit", "in", "between", "about", "NUMBER", "that", "had", "to", "be", "skipped", "in", "the", "bisect", "test", "because", "the", "code", "wouldn", "t", "run", "at", "all", "NUMBER", "Update", "Here", "s", "the", "compare", "view", "LINK", "of", "the", "two", "commit", "NUMBER", "The", "git", "bisect", "log", "be", "here", "LINK", "To", "visualize", "which", "commit", "be", "good", "and", "which", "be", "bad", "download", "the", "raw", "file", "and", "run", "git", "bisect", "replay", "badcontour", "bisectlog", "NUMBER", "txt", "NUMBER", "Then", "you", "can", "view", "with", "git", "bisect", "visualize", "or", "other", "git", "GUI", "the", "change", "in", "question", "be", "around", "May", "NUMBER", "NUMBER", "Example", "R", "d", "TAG", "identical", "rows", "rows_hw", "NUMBER", "TRUE", "identical", "cols", "cols_hw", "NUMBER", "TRUE", "facets_row", "a", "b", "facets_col", "c", "d", "structure", "facets", "NUMBER", "class", "formula", "Error", "in", "print", "a", "b", "object", "a", "not", "find", "structure", "facets", "NUMBER", "class", "formula", "Error", "in", "print", "c", "d", "object", "d", "not", "find", "While", "the", "two", "return", "the", "same", "what", "be", "build", "in", "your", "example", "can", "not", "be", "handle", "by", "other", "function", "taking", "formulas", "and", "be", "dependent", "on", "as", "NUMBER", "quoted", "NUMBER", "formula", "be", "able", "to", "handle", "these", "not", "really", "formula", "objects", "correctly", "NUMBER", "This", "be", "the", "sort", "of", "fragile", "assumptions", "that", "can", "easily", "break", "later", "NUMBER", "And", "be", "harder", "to", "track", "down", "NUMBER", "as", "NUMBER", "quoted", "structure", "f", "NUMBER", "class", "formula", "as", "NUMBER", "quoted", "structure", "f", "NUMBER", "class", "formula", "I", "think", "the", "correct", "fix", "will", "be", "like", "this", "R", "check", "the", "length", "of", "faces", "NUMBER", "or", "if", "the", "length", "NUMBER", "add", "NUMBER", "to", "left", "hand", "side", "NUMBER", "rows", "TAG", "NUMBER", "they", "will", "end", "up", "be", "smoothed", "with", "two", "different", "methods", "NUMBER", "R", "Figure", "out", "what", "type", "of", "smoothing", "to", "do", "loess", "for", "small", "datasets", "gam", "with", "a", "cubic", "regression", "basis", "for", "large", "data", "if", "be", "NUMBER", "character", "method", "method", "auto", "if", "nrow", "data", "TAG", "NUMBER", "Using", "max", "size", "makes", "sense", "NUMBER", "I", "think", "it", "would", "also", "be", "a", "good", "idea", "to", "have", "it", "print", "a", "warning", "message", "saying", "something", "like", "method", "unspecified", "so", "use", "loess", "like", "the", "warning", "given", "by", "stat_bin", "when", "binwidth", "be", "unspecified", "NUMBER", "Until", "I", "start", "digging", "into", "this", "code", "I", "thought", "that", "it", "always", "use", "loess", "NUMBER", "I", "ve", "actually", "use", "it", "on", "large", "data", "sets", "and", "thought", "it", "was", "use", "loess", "when", "in", "fact", "it", "was", "use", "gam", "NUMBER", "Sure", "will", "do", "in", "the", "future", "NUMBER", "This", "fix", "NUMBER", "I", "think", "it", "now", "correctly", "implement", "the", "haversine", "formula", "LINK", "_formula", "dist_central_angle", "lat", "c", "NUMBER", "NUMBER", "lon", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "dist_central_angle", "lat", "c", "NUMBER", "NUMBER", "lon", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "hadley", "Please", "see", "the", "line", "of", "code", "with", "the", "comment", "I", "don", "t", "know", "if", "the", "comment", "showed", "up", "on", "this", "pull", "request", "page", "in", "a", "way", "that", "makes", "it", "easy", "for", "you", "to", "see", "NUMBER", "OK", "that", "makes", "sense", "NUMBER", "Instead", "of", "add", "a", "length", "check", "I", "just", "change", "it", "so", "it", "indexes", "into", "lat", "by", "use", "length", "lat", "instead", "of", "length", "lon", "NUMBER", "This", "shouldn", "t", "change", "functionality", "but", "it", "will", "make", "things", "less", "confusing", "for", "anyone", "who", "looks", "at", "the", "code", "in", "the", "future", "NUMBER", "This", "address", "NUMBER", "It", "add", "a", "function", "to", "find", "what", "a", "coordinate", "transforms", "maps", "x", "and", "y", "to", "for", "example", "x", "and", "y", "y", "and", "x", "or", "theta", "and", "x", "NUMBER", "This", "makes", "it", "possible", "to", "have", "a", "general", "method", "to", "find", "the", "ranges", "of", "the", "x", "and", "y", "even", "after", "transformation", "NUMBER", "I", "don", "t", "really", "like", "the", "method", "name", "I", "use", "coord_find_varmapping", "but", "I", "couldn", "t", "think", "of", "a", "better", "one", "NUMBER", "I", "m", "open", "to", "suggestions", "NUMBER", "It", "gets", "for", "example", "scale", "theta", "NUMBER", "range", "by", "use", "a", "string", "as", "in", "scale", "theta", "NUMBER", "range", "NUMBER", "I", "know", "this", "isn", "t", "the", "best", "NUMBER", "I", "update", "abline", "hline", "and", "vline", "to", "use", "it", "NUMBER", "Now", "these", "work", "with", "coord_flip", "and", "coord_polar", "with", "the", "exception", "of", "abline", "with", "polar", "NUMBER", "Actually", "it", "works", "but", "it", "doesn", "t", "wrap", "around", "infinitely", "like", "it", "should", "NUMBER", "I", "also", "add", "visual", "test", "for", "abline", "hline", "and", "vline", "NUMBER", "No", "test", "for", "abline", "with", "coord_polar", "for", "reasons", "discussed", "above", "and", "in", "NUMBER", "NUMBER", "I", "haven", "t", "yet", "modify", "or", "test", "coord_map", "NUMBER", "Finding", "the", "range", "for", "abline", "hline", "or", "vline", "doesn", "t", "work", "quite", "right", "with", "coord_map", "because", "x", "NUMBER", "range", "and", "y", "NUMBER", "range", "don", "t", "refer", "to", "quite", "the", "same", "thing", "as", "they", "do", "in", "other", "coord", "transformations", "NUMBER", "I", "think", "x", "NUMBER", "raw", "and", "y", "NUMBER", "raw", "be", "what", "s", "needed", "NUMBER", "This", "be", "what", "s", "in", "the", "scales", "object", "with", "the", "Italy", "example", "in", "the", "coord_map", "help", "x", "NUMBER", "raw", "NUMBER", "NUMBER", "NUMBER", "y", "NUMBER", "raw", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "range", "NUMBER", "NUMBER", "NUMBER", "y", "NUMBER", "range", "NUMBER", "NUMBER", "NUMBER", "I", "m", "not", "sure", "what", "exactly", "x", "NUMBER", "range", "and", "y", "NUMBER", "range", "_should_", "mean", "so", "I", "m", "not", "sure", "how", "to", "handle", "this", "NUMBER", "OK", "I", "rebased", "the", "change", "to", "use", "coord_mapping", "instead", "of", "coord_find_varmapping", "NUMBER", "I", "hope", "you", "don", "t", "mind", "all", "the", "rebasing", "I", "like", "having", "a", "cleaner", "commit", "history", "NUMBER", "I", "ll", "look", "into", "the", "range", "stuff", "with", "coord_map", "NUMBER", "I", "m", "change", "coord", "map", "NUMBER", "r", "so", "that", "x", "NUMBER", "raw", "x", "NUMBER", "range", "and", "x", "NUMBER", "range", "x", "NUMBER", "proj", "and", "I", "m", "now", "trying", "to", "get", "lines", "to", "show", "up", "at", "all", "with", "coord_map", "NUMBER", "I", "ve", "come", "across", "a", "section", "in", "coord", "munch", "NUMBER", "r", "that", "has", "this", "code", "data", "x", "data", "x", "Inf", "TAG", "x", "NUMBER", "range", "and", "x", "NUMBER", "range", "x", "NUMBER", "proj", "NUMBER", "Here", "s", "the", "current", "status", "of", "the", "lines", "with", "coord_map", "geom_vline", "works", "NUMBER", "geom_hline", "doesn", "t", "show", "up", "NUMBER", "I", "get", "it", "to", "appear", "by", "hacking", "in", "a", "workaround", "for", "the", "dist_central_angle", "issue", "but", "that", "s", "not", "a", "real", "solution", "NUMBER", "When", "the", "distance", "bug", "NUMBER", "be", "fix", "geom_hline", "should", "work", "NUMBER", "geom_abline", "doesn", "t", "work", "NUMBER", "Update", "geom_abline", "_does_", "work", "NUMBER", "I", "was", "previously", "use", "incorrect", "values", "for", "intercept", "and", "slope", "NUMBER", "In", "short", "everything", "should", "work", "when", "the", "distance", "bug", "be", "fix", "NUMBER", "If", "you", "want", "to", "test", "install", "my", "experimental", "branch", "where", "I", "ve", "made", "the", "present", "change", "and", "address", "the", "distance", "bug", "and", "run", "through", "the", "visual", "test", "NUMBER", "Here", "be", "the", "examples", "I", "ve", "be", "test", "with", "NUMBER", "They", "re", "derived", "from", "the", "coord_map", "help", "library", "maps", "library", "mapproj", "nz", "TAG", "str", "coordinates", "List", "of", "NUMBER", "limits", "List", "of", "NUMBER", "NUMBER", "x", "NULL", "NUMBER", "y", "NULL", "wise", "logi", "FALSE", "attr", "class", "chr", "NUMBER", "NUMBER", "cartesian", "coord", "This", "be", "what", "it", "looks", "like", "with", "coord_flip", "Browse", "NUMBER", "str", "coordinates", "List", "of", "NUMBER", "limits", "List", "of", "NUMBER", "NUMBER", "x", "NULL", "NUMBER", "y", "NULL", "wise", "logi", "FALSE", "attr", "class", "chr", "NUMBER", "NUMBER", "flip", "cartesian", "coord", "This", "be", "what", "it", "looks", "like", "with", "coord_polar", "Browse", "NUMBER", "str", "coordinates", "List", "of", "NUMBER", "theta", "chr", "x", "r", "chr", "y", "start", "num", "NUMBER", "direction", "num", "NUMBER", "expand", "logi", "FALSE", "attr", "class", "chr", "NUMBER", "NUMBER", "polar", "coord", "With", "coord_polar", "it", "seems", "to", "carry", "information", "about", "the", "mappings", "to", "theta", "and", "r", "NUMBER", "If", "coordinates", "had", "this", "information", "for", "all", "cases", "I", "think", "it", "would", "be", "possible", "to", "have", "a", "general", "solution", "NUMBER", "Oh", "OK", "I", "suppose", "if", "there", "be", "coord", "methods", "that", "will", "give", "the", "appropriate", "information", "that", "would", "be", "good", "too", "NUMBER", "Basically", "what", "I", "think", "be", "needed", "be", "to", "find", "out", "what", "the", "incoming", "x", "get", "transformed", "to", "in", "the", "scales", "x", "y", "or", "theta", "NUMBER", "I", "m", "just", "starting", "to", "figure", "out", "how", "the", "coord", "stuff", "works", "so", "let", "me", "know", "if", "this", "be", "on", "the", "right", "or", "wrong", "track", "NUMBER", "I", "think", "that", "coord", "needs", "to", "be", "modify", "to", "track", "what", "the", "x", "and", "y", "in", "aes", "x", "var", "NUMBER", "y", "var", "NUMBER", "get", "transformed", "to", "NUMBER", "Here", "be", "some", "examples", "coord_cartesian", "x", "goes", "to", "x", "and", "y", "goes", "to", "y", "NUMBER", "coord_flip", "x", "goes", "to", "y", "and", "y", "goes", "to", "x", "coord_polar", "x", "goes", "to", "theta", "and", "y", "goes", "to", "r", "As", "far", "as", "I", "can", "tell", "this", "information", "isn", "t", "recorded", "in", "the", "coord", "object", "NUMBER", "coord_flip", "for", "example", "just", "swaps", "x", "and", "y", "in", "column", "names", "NUMBER", "This", "makes", "it", "impossible", "I", "think", "to", "know", "which", "range", "be", "needed", "from", "the", "scale", "x", "NUMBER", "range", "theta", "NUMBER", "range", "etc", "NUMBER", "Yup", "I", "think", "that", "should", "be", "sufficient", "to", "make", "abline", "work", "with", "flip", "and", "to", "make", "hline", "and", "vline", "work", "with", "both", "flip", "and", "polar", "NUMBER", "I", "don", "t", "know", "about", "coord_map", "though", "since", "I", "haven", "t", "really", "played", "with", "it", "NUMBER", "Dot", "plots", "be", "very", "commonly", "use", "in", "polar", "coordinates", "to", "represent", "binned", "orientation", "angles", "NUMBER", "E", "NUMBER", "g", "NUMBER", "LINK", "_Old_", "NUMBER", "_", "NUMBER", "_files", "NewPhillipsFig", "NUMBER", "JPG", "geom_dotplot", "would", "make", "creating", "these", "graphs", "very", "easy", "in", "ggplot", "I", "code", "those", "manually", "before", "NUMBER", "except", "that", "it", "currently", "do", "not", "work", "with", "polar", "coords", "d", "TAG", "scalars", "and", "function", "from", "outside", "ggplot", "NUMBER", "but", "not", "vectors", "I", "use", "it", "with", "vectors", "all", "the", "time", "NUMBER", "For", "example", "d", "data", "NUMBER", "frame", "x", "runif", "NUMBER", "y", "rnorm", "NUMBER", "m", "lm", "y", "x", "data", "d", "ggplot", "d", "geom_point", "aes", "x", "x", "y", "y", "geom_line", "aes", "x", "x", "y", "m", "fitted", "NUMBER", "values", "Where", "m", "fitted", "NUMBER", "values", "be", "a", "vector", "NUMBER", "Is", "that", "going", "away", "It", "be", "quite", "handy", "NUMBER", "Of", "course", "I", "could", "do", "d", "fit", "m", "fitted", "NUMBER", "values", "ggplot", "d", "geom_point", "aes", "x", "x", "y", "y", "geom_line", "aes", "x", "x", "y", "fit", "but", "this", "can", "quickly", "bloat", "the", "initial", "dataset", "and", "become", "cumbersome", "when", "several", "models", "be", "test", "NUMBER", "PS", "actually", "at", "some", "point", "I", "would", "probably", "do", "dm", "fortify", "m", "and", "then", "plot", "from", "there", "Example", "d", "TAG", "dt", "scale_x_date", "breaks", "date_breaks", "NUMBER", "month", "minor_breaks", "date_breaks", "NUMBER", "week", "labels", "date_format", "b", "Error", "in", "scale_dimension", "scale", "could", "not", "find", "function", "scale_dimension", "Hadley", "replied", "with", "HW", "Could", "you", "please", "file", "a", "bug", "about", "this", "That", "sort", "of", "error", "usually", "suggests", "a", "namespace", "problem", "but", "a", "quick", "check", "verifies", "that", "the", "methods", "for", "scale_dimension", "be", "export", "NUMBER", "The", "traceback", "NUMBER", "scale_dimension", "scale", "NUMBER", "NextMethod", "NUMBER", "NUMBER", "Date", "x", "x", "range", "NUMBER", "x", "TAG", "range", "NUMBER", "x", "TAG", "debug", "ggplot", "NUMBER", "scale_breaks_minor", "NUMBER", "continuous", "df", "TAG", "df", "TAG", "dt", "TAG", "dt", "scale_x_date", "breaks", "date_breaks", "month", "minor_breaks", "date_breaks", "week", "debugging", "in", "scale_breaks_minor", "NUMBER", "continuous", "scale", "debug", "if", "zero_range", "as", "NUMBER", "numeric", "limits", "return", "if", "be", "NUMBER", "null", "scale", "minor_breaks", "b", "TAG", "if", "length", "b", "TAG", "return", "bd", "TAG", "if", "min", "limits", "TAG", "b", "TAG", "if", "max", "limits", "max", "b", "b", "TAG", "breaks", "TAG", "length", "n", "NUMBER", "SIMPLIFY", "FALSE", "else", "if", "be", "NUMBER", "function", "scale", "minor_breaks", "breaks", "TAG", "else", "breaks", "TAG", "discard", "breaks", "scale_dimension", "scale", "Browse", "NUMBER", "debug", "if", "zero_range", "as", "NUMBER", "numeric", "limits", "return", "Browse", "NUMBER", "n", "debug", "NULL", "Browse", "NUMBER", "n", "debug", "if", "be", "NUMBER", "null", "scale", "minor_breaks", "b", "TAG", "if", "length", "b", "TAG", "return", "bd", "TAG", "if", "min", "limits", "TAG", "b", "TAG", "if", "max", "limits", "max", "b", "b", "TAG", "breaks", "TAG", "length", "n", "NUMBER", "SIMPLIFY", "FALSE", "else", "if", "be", "NUMBER", "function", "scale", "minor_breaks", "breaks", "TAG", "else", "breaks", "TAG", "Browse", "NUMBER", "n", "debug", "if", "be", "NUMBER", "function", "scale", "minor_breaks", "breaks", "TAG", "else", "breaks", "TAG", "Browse", "NUMBER", "n", "debug", "breaks", "TAG", "Browse", "NUMBER", "n", "debug", "breaks", "TAG", "Browse", "NUMBER", "n", "debug", "discard", "breaks", "scale_dimension", "scale", "Browse", "NUMBER", "scale_dimension", "scale", "NUMBER", "NUMBER", "NUMBER", "Browse", "NUMBER", "discard", "breaks", "scale_dimension", "scale", "Error", "in", "scale_dimension", "scale", "could", "not", "find", "function", "scale_dimension", "Browse", "NUMBER", "discard", "scale", "trans", "trans", "breaks", "scale_dimension", "scale", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Browse", "NUMBER", "censor", "breaks", "scale_dimension", "scale", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Browse", "NUMBER", "Browse", "NUMBER", "Now", "I", "figured", "out", "the", "problem", "NUMBER", "in", "NextMethod", "NextMethod", "works", "by", "creating", "a", "special", "call", "frame", "for", "the", "next", "method", "NUMBER", "If", "no", "new", "argument", "be", "supplied", "the", "argument", "will", "be", "the", "same", "in", "number", "order", "and", "name", "as", "those", "to", "the", "current", "method", "but", "their", "values", "will", "be", "promises", "to", "evaluate", "their", "name", "in", "the", "current", "method", "and", "environment", "NUMBER", "Any", "named", "argument", "matched", "to", "NUMBER", "be", "handle", "specially", "they", "either", "replace", "exist", "argument", "of", "the", "same", "name", "or", "be", "appended", "to", "the", "argument", "list", "NUMBER", "They", "be", "pass", "on", "as", "the", "promise", "that", "was", "supplied", "as", "an", "argument", "to", "the", "current", "environment", "NUMBER", "S", "do", "this", "differently", "If", "they", "have", "be", "evaluated", "in", "the", "current", "or", "a", "previous", "environment", "they", "remain", "evaluated", "NUMBER", "This", "be", "a", "complex", "area", "and", "subject", "to", "change", "see", "the", "draft", "R", "Language", "Definition", "NUMBER", "The", "definition", "of", "NUMBER", "Date", "be", "R", "function", "x", "NUMBER", "drop", "TRUE", "cl", "TAG", "range", "NUMBER", "x", "TAG", "empty", "TAG", "notempty", "TAG", "ggplot", "mtcars", "aes", "x", "mpg", "y", "wt", "geom_point", "geom_point", "data", "empty", "mapping", "aes", "x", "x", "y", "y", "Error", "in", "eval", "expr", "envir", "enclos", "object", "x", "not", "find", "ggplot", "mtcars", "aes", "x", "mpg", "y", "wt", "geom_point", "geom_point", "data", "notempty", "mapping", "aes", "x", "x", "y", "y", "ggplot", "mtcars", "aes", "x", "mpg", "y", "wt", "geom_point", "data", "empty", "mapping", "aes", "x", "x", "y", "y", "Error", "in", "eval", "expr", "envir", "enclos", "object", "x", "not", "find", "ggplot", "mtcars", "aes", "x", "mpg", "y", "wt", "geom_point", "data", "notempty", "mapping", "aes", "x", "x", "y", "y", "ggplot", "geom_point", "data", "empty", "mapping", "aes", "x", "x", "y", "y", "Error", "in", "eval", "expr", "envir", "enclos", "object", "x", "not", "find", "ggplot", "geom_point", "data", "notempty", "mapping", "aes", "x", "x", "y", "y", "ggplot", "empty", "aes", "x", "x", "y", "y", "geom_point", "Error", "in", "eval", "expr", "envir", "enclos", "object", "x", "not", "find", "Expected", "results", "NUMBER", "For", "the", "first", "plot", "the", "second", "geom_point", "should", "not", "add", "anything", "and", "so", "the", "plot", "should", "be", "equivalent", "to", "ggplot", "mtcars", "aes", "x", "mpg", "y", "wt", "geom_point", "NUMBER", "The", "second", "plot", "works", "as", "expected", "NUMBER", "The", "third", "plot", "maybe", "should", "throw", "an", "error", "but", "not", "that", "error", "NUMBER", "x", "be", "in", "empty", "but", "there", "be", "no", "data", "to", "plot", "NUMBER", "NUMBER", "The", "fourth", "works", "as", "expected", "NUMBER", "NUMBER", "The", "fifth", "should", "behave", "like", "the", "third", "NUMBER", "NUMBER", "The", "sixth", "works", "as", "expected", "NUMBER", "NUMBER", "The", "seventh", "should", "also", "behave", "like", "the", "third", "NUMBER", "sessionInfo", "r", "sessionInfo", "R", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Platform", "i", "NUMBER", "pc", "mingw", "NUMBER", "i", "NUMBER", "NUMBER", "bit", "locale", "NUMBER", "LC_COLLATE", "English_United", "States", "NUMBER", "NUMBER", "LC_CTYPE", "English_United", "States", "NUMBER", "NUMBER", "LC_MONETARY", "English_United", "States", "NUMBER", "NUMBER", "LC_NUMERIC", "C", "NUMBER", "LC_TIME", "English_United", "States", "NUMBER", "attached", "base", "package", "NUMBER", "stats", "graphics", "grDevices", "utils", "datasets", "methods", "base", "other", "attached", "package", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "devtools_", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "colorspace_", "NUMBER", "NUMBER", "dichromat_", "NUMBER", "NUMBER", "digest_", "NUMBER", "grid_", "NUMBER", "NUMBER", "MASS_", "NUMBER", "NUMBER", "memoise_", "NUMBER", "munsell_", "NUMBER", "plyr_", "NUMBER", "NUMBER", "proto_", "NUMBER", "NUMBER", "RColorBrewer_", "NUMBER", "NUMBER", "RCurl_", "NUMBER", "NUMBER", "reshape", "NUMBER", "_", "NUMBER", "NUMBER", "scales_", "NUMBER", "stringr_", "NUMBER", "This", "NUMBER", "be", "commit", "NUMBER", "e", "NUMBER", "f", "NUMBER", "It", "be", "also", "an", "error", "in", "NUMBER", "although", "sometimes", "with", "different", "also", "non", "informative", "error", "message", "NUMBER", "I", "don", "t", "believe", "it", "be", "a", "duplicate", "of", "NUMBER", "because", "the", "example", "there", "runs", "and", "gives", "a", "plot", "just", "not", "as", "expected", "NUMBER", "The", "problem", "here", "be", "that", "an", "error", "be", "throw", "when", "plotting", "saying", "that", "the", "variable", "can", "not", "be", "find", "NUMBER", "They", "may", "be", "relate", "of", "course", "NUMBER", "Also", "this", "may", "be", "a", "duplicate", "of", "NUMBER", "but", "I", "wasn", "t", "sure", "because", "there", "the", "xintercept", "part", "be", "outside", "an", "aes", "NUMBER", "However", "run", "that", "code", "gives", "a", "similar", "error", "Error", "in", "eval", "expr", "envir", "enclos", "object", "xintercept", "not", "find", "and", "I", "seem", "to", "recall", "that", "geom_vline", "makes", "a", "data", "NUMBER", "frame", "in", "the", "background", "NUMBER", "So", "this", "may", "be", "duplicate", "or", "at", "least", "broadening", "of", "NUMBER", "Added", "some", "description", "and", "a", "few", "examples", "to", "qplot", "and", "ggplot", "as", "request", "NUMBER", "Let", "me", "know", "what", "you", "think", "and", "suggestions", "for", "improvement", "if", "you", "feel", "it", "s", "necessary", "NUMBER", "D", "NUMBER", "It", "appears", "that", "I", "ve", "managed", "to", "push", "my", "repo", "successfully", "NUMBER", "Contained", "be", "change", "to", "the", "help", "file", "that", "make", "it", "pass", "check_doc", "with", "no", "error", "NUMBER", "In", "a", "few", "cases", "argument", "that", "were", "in", "the", "documentation", "but", "not", "in", "the", "list", "of", "formal", "argument", "had", "to", "be", "remove", "to", "get", "check_doc", "to", "work", "NUMBER", "Here", "be", "an", "initial", "implementation", "NUMBER", "LINK", "layout", "Two", "way", "of", "combining", "NUMBER", "Size", "sensitive", "combining", "arrange", "plots", "with", "panel", "size", "adjustment", "NUMBER", "Currently", "use", "S", "NUMBER", "of", "cbind", "and", "rbind", "NUMBER", "NUMBER", "Simple", "layout", "like", "grid", "NUMBER", "arrange", "in", "gridExtra", "NUMBER", "Not", "implement", "yet", "NUMBER", "Any", "idea", "and", "suggestions", "be", "welcome", "NUMBER", "latticeExtra", "defines", "a", "c", "method", "for", "trellis", "objects", "from", "what", "I", "understand", "however", "it", "would", "not", "be", "very", "suitable", "for", "ggplot", "NUMBER", "Am", "I", "correct", "in", "thinking", "that", "any", "such", "combination", "of", "plots", "should", "only", "alter", "at", "most", "the", "plot", "dimensions", "but", "not", "deal", "with", "remove", "axes", "combining", "legends", "axis", "labels", "titles", "etc", "NUMBER", "One", "feature", "that", "s", "be", "request", "quite", "often", "be", "a", "multipage", "option", "NUMBER", "I", "don", "t", "know", "how", "hard", "that", "would", "be", "to", "implement", "for", "facetting", "in", "general", "NUMBER", "The", "grid", "NUMBER", "arrange", "way", "be", "quite", "trivial", "and", "will", "be", "present", "in", "the", "next", "version", "of", "gridExtra", "the", "basic", "idea", "be", "currently", "on", "SO", "LINK", "Here", "be", "some", "features", "that", "I", "think", "would", "be", "useful", "NUMBER", "Allow", "combining", "cells", "in", "the", "table", "so", "that", "it", "s", "possible", "to", "combine", "graphs", "A", "B", "C", "and", "D", "like", "this", "AAB", "AAC", "DDD", "Allow", "combining", "graphs", "with", "unequal", "sizes", "like", "this", "AAAB", "It", "would", "be", "nice", "to", "be", "able", "to", "specify", "the", "sizes", "as", "integers", "like", "NUMBER", "NUMBER", "as", "well", "as", "nonintegers", "like", "NUMBER", "NUMBER", "NUMBER", "baptiste", "wch", "hadley", "Thanks", "NUMBER", "I", "want", "to", "make", "sure", "what", "we", "need", "to", "consider", "NUMBER", "I", "here", "call", "the", "size", "sensitive", "arrange", "as", "table", "new", "feature", "and", "the", "simple", "layout", "layout", "inherits", "the", "notion", "of", "grid", "NUMBER", "arrange", "NUMBER", "The", "layout", "be", "not", "difficult", "except", "for", "the", "interface", "to", "specify", "the", "layout", "NUMBER", "Actually", "layout", "be", "no", "more", "than", "a", "kind", "of", "syntax", "suger", "for", "grid", "NUMBER", "layout", "and", "layout", "NUMBER", "pos", "NUMBER", "col", "row", "in", "grid", "so", "users", "can", "write", "these", "function", "by", "themselves", "NUMBER", "Please", "find", "the", "visual", "test", "in", "LINK", "plot", "layout", "NUMBER", "r", "and", "docs", "in", "LINK", "L", "NUMBER", "R", "NUMBER", "layout", "never", "modify", "the", "plots", "NUMBER", "It", "only", "arrange", "the", "plots", "on", "the", "layout", "NUMBER", "Also", "it", "support", "nested", "cell", "like", "layout", "as", "shown", "in", "wch", "s", "comment", "NUMBER", "User", "can", "specify", "dimension", "i", "NUMBER", "e", "NUMBER", "nrow", "ncol", "or", "both", "NUMBER", "LINK", "plot", "layout", "NUMBER", "r", "L", "NUMBER", "Or", "user", "can", "specify", "the", "layout", "itself", "NUMBER", "LINK", "plot", "layout", "NUMBER", "r", "L", "NUMBER", "In", "addition", "to", "layout", "dimension", "users", "can", "specify", "widths", "heights", "of", "each", "row", "column", "NUMBER", "LINK", "plot", "layout", "NUMBER", "r", "L", "NUMBER", "I", "wonder", "which", "be", "the", "best", "interface", "to", "set", "layout", "NUMBER", "Here", "be", "the", "current", "implementation", "layout", "NUMBER", "ggplot", "p", "NUMBER", "p", "NUMBER", "p", "NUMBER", "p", "NUMBER", "p", "NUMBER", "layout", "list", "row", "list", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "col", "list", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "be", "a", "wrapper", "for", "layout", "NUMBER", "pos", "NUMBER", "col", "in", "grid", "NUMBER", "But", "obviously", "this", "be", "ugly", "interface", "i", "think", "NUMBER", "Do", "you", "have", "any", "good", "idea", "And", "be", "there", "any", "other", "features", "that", "should", "be", "implement", "Anyway", "the", "importance", "of", "layout", "would", "be", "less", "than", "that", "of", "table", "NUMBER", "I", "will", "discuss", "about", "table", "later", "NUMBER", "Should", "I", "move", "to", "ggplot", "dev", "list", "table", "be", "more", "complicated", "and", "need", "to", "consider", "bunch", "of", "things", "carefully", "NUMBER", "First", "interface", "to", "specify", "the", "table", "layout", "NUMBER", "This", "be", "same", "issue", "with", "layout", "so", "it", "would", "be", "better", "to", "make", "the", "interface", "consistent", "between", "table", "and", "layout", "In", "addition", "to", "the", "interface", "there", "be", "two", "big", "issue", "NUMBER", "guide", "legends", "title", "axis", "etc", "NUMBER", "as", "baptiste", "suggested", "NUMBER", "In", "table", "the", "dimension", "nrow", "ncol", "of", "each", "col", "row", "must", "be", "consistent", "NUMBER", "If", "the", "plots", "be", "simple", "such", "as", "qplot", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "it", "be", "easy", "to", "combine", "NUMBER", "But", "sometimes", "the", "nrow", "ncol", "be", "inconsistent", "NUMBER", "For", "example", "if", "plot", "A", "has", "left", "side", "legend", "and", "plot", "B", "has", "no", "legend", "the", "ncol", "of", "A", "be", "larger", "than", "that", "of", "B", "NUMBER", "So", "A", "and", "B", "cannot", "be", "rbinded", "cbind", "be", "OK", "NUMBER", "Same", "with", "title", "and", "axis", "NUMBER", "So", "what", "do", "you", "think", "be", "the", "best", "way", "to", "handle", "them", "NUMBER", "a", "drop", "guide", "legends", "and", "keep", "other", "materials", "NUMBER", "As", "guide", "can", "be", "extracted", "as", "a", "single", "object", "users", "can", "combine", "plots", "and", "then", "put", "the", "guide", "on", "some", "place", "NUMBER", "Other", "materials", "were", "keep", "as", "be", "NUMBER", "But", "a", "blank", "cell", "be", "add", "by", "align", "to", "larger", "plot", "rule", "NUMBER", "I", "like", "this", "way", "NUMBER", "b", "Induce", "an", "error", "and", "enforce", "users", "to", "appropriate", "dimension", "NUMBER", "I", "also", "like", "this", "way", "as", "an", "initial", "implementation", "NUMBER", "or", "any", "other", "possibility", "NUMBER", "facet", "facet", "makes", "table", "much", "much", "more", "complicated", "NUMBER", "Maybe", "we", "do", "not", "need", "to", "support", "the", "size", "sensitive", "combining", "facetted", "plots", "NUMBER", "So", "at", "least", "initial", "implementation", "NUMBER", "will", "not", "support", "facet", "simply", "induce", "an", "error", "NUMBER", "Here", "s", "an", "idea", "for", "how", "to", "specify", "the", "arrangement", "for", "table", "and", "layout", "in", "a", "single", "unified", "way", "NUMBER", "I", "don", "t", "know", "what", "the", "normal", "way", "be", "to", "do", "this", "be", "this", "be", "just", "what", "comes", "to", "mind", "NUMBER", "Suppose", "you", "could", "give", "it", "a", "matrix", "like", "this", "layout", "TAG", "lay", "TAG", "lay", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Widths", "NUMBER", "NUMBER", "NUMBER", "Heights", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Respect", "FALSE", "If", "I", "wanted", "to", "inset", "a", "graph", "and", "have", "it", "set", "away", "from", "the", "edge", "it", "seems", "I", "would", "have", "to", "do", "something", "like", "this", "p", "TAG", "ggarrange", "from", "what", "I", "can", "see", "could", "easily", "work", "with", "arbitrary", "grobs", "in", "which", "case", "it", "would", "have", "reproduced", "the", "full", "functionality", "of", "grid", "NUMBER", "arrange", "minus", "the", "latest", "addition", "of", "multiple", "pages", "and", "ggsave", "support", "NUMBER", "That", "s", "why", "I", "m", "not", "sure", "what", "you", "mean", "by", "combine", "with", "gridExtra", "can", "you", "clarify", "please", "ggarrange", "returns", "gtable", "object", "but", "grid", "NUMBER", "arrange", "could", "not", "work", "with", "gtable", "NUMBER", "But", "work", "after", "gtable_gTree", "NUMBER", "So", "it", "will", "be", "easy", "to", "fix", "NUMBER", "R", "gg", "TAG", "One", "thought", "have", "you", "considered", "something", "like", "a", "global", "title", "on", "top", "of", "the", "page", "and", "perhaps", "one", "for", "each", "side", "as", "well", "just", "in", "case", "ggarrange", "and", "ggtable", "will", "have", "main", "argument", "NUMBER", "As", "for", "the", "naming", "g", "means", "grid", "gg", "means", "_a", "part", "of", "ggplot", "NUMBER", "_", "NUMBER", "So", "g", "be", "available", "outside", "ggplot", "NUMBER", "while", "gg", "only", "works", "with", "ggplot", "NUMBER", "I", "named", "ggtable", "ggarrange", "in", "correspondence", "to", "ggsave", "NUMBER", "Please", "let", "me", "know", "if", "do", "you", "have", "better", "naming", "NUMBER", "I", "notice", "you", "have", "an", "example", "with", "inset", "plot", "annotation_custom", "be", "probably", "more", "flexible", "for", "this", "particular", "purpose", "LINK", "custom", "NUMBER", "r", "L", "NUMBER", "Yes", "the", "inset", "plot", "be", "unplanned", "feature", "NUMBER", "After", "implementation", "I", "find", "that", "the", "inset", "plot", "be", "possible", "NUMBER", "So", "probably", "not", "well", "designed", "NUMBER", "Am", "I", "right", "that", "it", "requires", "use", "a", "character", "matrix", "like", "this", "No", "NUMBER", "At", "the", "moment", "gglayout", "has", "two", "way", "alpha", "for", "setting", "the", "layout", "NUMBER", "NUMBER", "layout", "matrix", "which", "be", "compatible", "with", "layout", "in", "graphics", "package", "R", "m", "TAG", "I", "would", "suggest", "having", "some", "code", "to", "detect", "when", "the", "numbers", "aren", "t", "laid", "out", "in", "rectangles", "NUMBER", "In", "the", "example", "below", "I", "think", "it", "should", "give", "a", "warning", "error", "Agreed", "NUMBER", "I", "m", "looking", "for", "the", "good", "algorithms", "for", "detecting", "such", "incorrect", "layout", "NUMBER", "Now", "I", "m", "use", "ggarrange", "and", "ggtable", "in", "my", "daily", "work", "and", "find", "it", "be", "so", "useful", "NUMBER", "Further", "commets", "be", "welcome", "NUMBER", "Thanks", "On", "NUMBER", "January", "NUMBER", "NUMBER", "NUMBER", "kohske", "takahashi", "reply", "reply", "NUMBER", "github", "NUMBER", "com", "write", "baptiste", "wch", "thanks", "you", "for", "the", "comments", "NUMBER", "Here", "be", "point", "to", "point", "comments", "NUMBER", "ggarrange", "from", "what", "I", "can", "see", "could", "easily", "work", "with", "arbitrary", "grobs", "in", "which", "case", "it", "would", "have", "reproduced", "the", "full", "functionality", "of", "grid", "NUMBER", "arrange", "minus", "the", "latest", "addition", "of", "multiple", "pages", "and", "ggsave", "support", "NUMBER", "That", "s", "why", "I", "m", "not", "sure", "what", "you", "mean", "by", "combine", "with", "gridExtra", "can", "you", "clarify", "please", "ggarrange", "returns", "gtable", "object", "but", "grid", "NUMBER", "arrange", "could", "not", "work", "with", "gtable", "NUMBER", "But", "work", "after", "gtable_gTree", "NUMBER", "So", "it", "will", "be", "easy", "to", "fix", "NUMBER", "R", "gg", "TAG", "grid", "NUMBER", "arrange", "gg", "xyplot", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "do", "not", "work", "grid", "NUMBER", "arrange", "gtable_gTree", "gg", "xyplot", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "do", "work", "One", "thought", "have", "you", "considered", "something", "like", "a", "global", "title", "on", "top", "of", "the", "page", "and", "perhaps", "one", "for", "each", "side", "as", "well", "just", "in", "case", "ggarrange", "and", "ggtable", "will", "have", "main", "argument", "NUMBER", "As", "for", "the", "naming", "g", "means", "grid", "gg", "means", "_a", "part", "of", "ggplot", "NUMBER", "_", "NUMBER", "So", "g", "be", "available", "outside", "ggplot", "NUMBER", "while", "gg", "only", "works", "with", "ggplot", "NUMBER", "I", "named", "ggtable", "ggarrange", "in", "correspondence", "to", "ggsave", "NUMBER", "Please", "let", "me", "know", "if", "do", "you", "have", "better", "naming", "NUMBER", "I", "guess", "my", "question", "be", "whether", "ggarrange", "could", "also", "work", "with", "other", "grobs", "or", "should", "it", "remain", "specific", "to", "ggplot", "I", "d", "be", "in", "favor", "of", "make", "it", "more", "general", "if", "only", "to", "avoid", "having", "two", "very", "similar", "function", "in", "different", "package", "NUMBER", "You", "could", "name", "it", "arrangeGrob", "and", "I", "d", "remove", "its", "cousin", "from", "gridExtra", "NUMBER", "Making", "the", "current", "arrangeGrob", "compatible", "with", "ggarrange", "do", "not", "help", "if", "one", "wants", "to", "include", "say", "a", "tableGrob", "next", "to", "a", "ggplot", "NUMBER", "Cheers", "b", "NUMBER", "I", "notice", "you", "have", "an", "example", "with", "inset", "plot", "annotation_custom", "be", "probably", "more", "flexible", "for", "this", "particular", "purpose", "LINK", "custom", "NUMBER", "r", "L", "NUMBER", "Yes", "the", "inset", "plot", "be", "unplanned", "feature", "NUMBER", "After", "implementation", "I", "find", "that", "the", "inset", "plot", "be", "possible", "NUMBER", "So", "probably", "not", "well", "designed", "NUMBER", "Am", "I", "right", "that", "it", "requires", "use", "a", "character", "matrix", "like", "this", "No", "NUMBER", "At", "the", "moment", "gglayout", "has", "two", "way", "alpha", "for", "setting", "the", "layout", "NUMBER", "NUMBER", "layout", "matrix", "which", "be", "compatible", "with", "layout", "in", "graphics", "package", "R", "m", "TAG", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "byrow", "T", "lay", "TAG", "NUMBER", "the", "list", "of", "row", "col", "spans", "which", "be", "compatible", "with", "grid", "NUMBER", "layout", "and", "layout", "NUMBER", "pos", "NUMBER", "row", "in", "grid", "package", "R", "lay", "TAG", "NUMBER", "Plus", "alpha", "be", "a", "kind", "of", "automatic", "generation", "of", "layout", "matrix", "by", "nrow", "ncol", "dim", "etc", "NUMBER", "The", "inset", "plot", "be", "possible", "only", "by", "NUMBER", "the", "list", "of", "row", "col", "span", "NUMBER", "I", "would", "suggest", "having", "some", "code", "to", "detect", "when", "the", "numbers", "aren", "t", "laid", "out", "in", "rectangles", "NUMBER", "In", "the", "example", "below", "I", "think", "it", "should", "give", "a", "warning", "error", "Agreed", "NUMBER", "I", "m", "looking", "for", "the", "good", "algorithms", "for", "detecting", "such", "incorrect", "layout", "NUMBER", "Now", "I", "m", "use", "ggarrange", "and", "ggtable", "in", "my", "daily", "work", "and", "find", "it", "be", "so", "useful", "NUMBER", "Further", "commets", "be", "welcome", "NUMBER", "Thanks", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "kohske", "I", "would", "suggest", "having", "some", "code", "to", "detect", "when", "the", "numbers", "aren", "t", "laid", "out", "in", "rectangles", "NUMBER", "In", "the", "example", "below", "I", "think", "it", "should", "give", "a", "warning", "error", "Agreed", "NUMBER", "I", "m", "looking", "for", "the", "good", "algorithms", "for", "detecting", "such", "incorrect", "layout", "NUMBER", "I", "think", "this", "should", "do", "the", "trick", "NUMBER", "It", "could", "probably", "be", "cleaned", "up", "a", "little", "though", "NUMBER", "R", "Returns", "TRUE", "if", "all", "the", "x", "s", "in", "mat", "be", "arranged", "in", "a", "rectangle", "FALSE", "otherwise", "is_rect", "TAG", "I", "guess", "my", "question", "be", "whether", "ggarrange", "could", "also", "work", "with", "other", "grobs", "or", "should", "it", "remain", "specific", "to", "ggplot", "I", "d", "be", "in", "favor", "of", "make", "it", "more", "general", "if", "only", "to", "avoid", "having", "two", "very", "similar", "function", "in", "different", "package", "NUMBER", "You", "could", "name", "it", "arrangeGrob", "and", "I", "d", "remove", "its", "cousin", "from", "gridExtra", "NUMBER", "I", "m", "not", "sure", "how", "general", "ggarrange", "should", "be", "NUMBER", "Probably", "including", "some", "grobs", "be", "useful", "like", "this", "R", "ggarrange", "qplot", "iris", "NUMBER", "iris", "NUMBER", "tableGrob", "iris", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "gp", "gpar", "fontsize", "NUMBER", "and", "output", "here", "LINK", "kohske", "gadjt", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "But", "in", "my", "view", "ggarrange", "will", "not", "take", "care", "of", "other", "grid", "base", "graphics", "such", "as", "lattice", "NUMBER", "So", "I", "think", "arrangeGrob", "in", "gridExtra", "will", "be", "still", "useful", "as", "the", "integrator", "of", "grid", "based", "graphics", "NUMBER", "How", "do", "you", "see", "it", "hadley", "wch", "Thanks", "NUMBER", "I", "was", "looking", "for", "any", "general", "algorithms", "i", "NUMBER", "e", "NUMBER", "by", "some", "basic", "matrix", "operations", "but", "could", "not", "find", "NUMBER", "I", "slightly", "modify", "your", "code", "and", "will", "merge", "it", "NUMBER", "R", "is_rect", "TAG", "Also", "it", "won", "t", "work", "for", "all", "character", "matrices", "it", "could", "fail", "for", "cases", "where", "there", "s", "weird", "stuff", "like", "NUMBER", "NUMBER", "NUMBER", "There", "be", "no", "interface", "to", "set", "the", "character", "matrices", "NUMBER", "The", "char", "matrices", "be", "just", "for", "display", "implement", "in", "print", "NUMBER", "gglayout", "NUMBER", "How", "about", "test", "for", "the", "number", "of", "elements", "against", "the", "number", "of", "elements", "for", "the", "maximum", "block", "is_rect", "TAG", "prod", "diff", "apply", "be", "NUMBER", "range", "c", "NUMBER", "NUMBER", "baptiste", "why", "Shoud", "this", "be", "kohske", "yes", "sounds", "right", "I", "didn", "t", "think", "very", "much", "last", "night", "NUMBER", "NUMBER", "unless", "you", "want", "to", "use", "this", "case", "to", "specify", "inset", "plots", "that", "be", "to", "say", "enforce", "connected", "blocks", "no", "gap", "but", "not", "necessarily", "simply", "connected", "can", "have", "holes", "NUMBER", "Yes", "I", "may", "write", "after", "the", "port", "to", "gtable", "package", "NUMBER", "Apparently", "a", "recent", "commit", "broke", "something", "for", "me", "NUMBER", "I", "was", "taking", "a", "look", "at", "NUMBER", "again", "but", "the", "code", "wouldn", "t", "run", "anymore", "NUMBER", "I", "m", "not", "sure", "exactly", "what", "the", "problem", "be", "but", "git", "bisect", "tracked", "it", "to", "commit", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "a", "NUMBER", "a", "NUMBER", "d", "NUMBER", "cf", "NUMBER", "efe", "NUMBER", "f", "NUMBER", "bf", "NUMBER", "c", "NUMBER", "f", "regard", "test", "package", "NUMBER", "dat", "TAG", "FYI", "the", "easiest", "way", "to", "create", "the", "vector", "of", "unevaluated", "calls", "be", "NUMBER", "alpha", "beta", "gamma", "wow", "NUMBER", "cool", "NUMBER", "thanks", "NUMBER", "e", "NUMBER", "g", "NUMBER", "extract", "a", "grob", "remove", "grobs", "remove", "cols", "rows", "flip", "cols", "rows", "see", "also", "NUMBER", "a", "quick", "hack", "to", "get", "a", "guide", "grob", "NUMBER", "If", "you", "need", "a", "same", "way", "with", "the", "previous", "version", "i", "NUMBER", "e", "NUMBER", "opts", "keep", "legend", "probably", "I", "can", "do", "it", "NUMBER", "Please", "let", "me", "know", "NUMBER", "Possible", "and", "not", "difficult", "actually", "my", "initial", "idea", "but", "isn", "t", "it", "time", "consuming", "It", "requires", "to", "build", "all", "geoms", "twice", "one", "for", "panel", "and", "one", "for", "gudies", "NUMBER", "Another", "approach", "be", "like", "remove", "guide", "from", "gtable", "NUMBER", "In", "this", "case", "no", "need", "to", "buide", "twice", "NUMBER", "But", "maybe", "somewhat", "indirect", "NUMBER", "OK", "NUMBER", "Then", "I", "will", "rewrite", "it", "NUMBER", "Will", "you", "implement", "some", "remove", "grob", "interface", "for", "gtable", "So", "may", "I", "close", "this", "pull", "request", "This", "fix", "be", "not", "merge", "into", "master", "so", "here", "be", "a", "pull", "request", "NUMBER", "And", "also", "may", "I", "close", "this", "pull", "request", "This", "be", "an", "implementation", "of", "dot", "plots", "NUMBER", "I", "made", "this", "branch", "off", "of", "feature", "geom", "violin", "so", "it", "looks", "like", "this", "pull", "request", "include", "some", "of", "those", "previous", "commit", "NUMBER", "Hopefully", "this", "isn", "t", "a", "problem", "NUMBER", "I", "test", "merge", "everything", "into", "the", "current", "hadley", "master", "branch", "and", "it", "seems", "to", "work", "NUMBER", "Some", "things", "be", "strange", "because", "of", "dots", "be", "visually", "stacked", "NUMBER", "Notes", "When", "binning", "along", "x", "axis", "the", "y", "dimensions", "be", "arbitrary", "NUMBER", "This", "be", "because", "the", "vertical", "positioning", "of", "the", "the", "dots", "be", "do", "by", "the", "grob", "NUMBER", "I", "don", "t", "think", "it", "s", "possible", "to", "have", "correct", "y", "dimensions", "with", "ggplot", "NUMBER", "Something", "similar", "happens", "when", "binning", "along", "y", "axis", "but", "the", "width", "be", "set", "so", "that", "each", "cluster", "will", "be", "dodged", "properly", "NUMBER", "For", "the", "same", "reasons", "the", "y", "axis", "label", "and", "tick", "labels", "aren", "t", "meaningful", "NUMBER", "When", "binning", "along", "x", "axis", "pos_stack", "doesn", "t", "work", "because", "of", "the", "strange", "y", "dimensions", "NUMBER", "Stacking", "wouldn", "t", "be", "impossible", "to", "implement", "but", "it", "would", "be", "a", "big", "hack", "and", "it", "wouldn", "t", "use", "pos_stack", "NUMBER", "There", "be", "a", "fair", "bit", "of", "complexity", "NUMBER", "Part", "of", "it", "be", "because", "binning", "can", "be", "do", "on", "x", "or", "y", "and", "part", "of", "it", "be", "because", "there", "be", "two", "methods", "of", "binning", "NUMBER", "Instead", "of", "add", "the", "histodot", "option", "I", "d", "prefer", "to", "simply", "use", "stat_bin", "but", "it", "doesn", "t", "allow", "binning", "along", "the", "y", "axis", "NUMBER", "I", "m", "going", "to", "try", "to", "implement", "the", "smoothing", "algorithm", "from", "Wilkinson", "NUMBER", "p", "NUMBER", "NUMBER", "but", "I", "find", "it", "confusing", "at", "the", "moment", "NUMBER", "Some", "examples", "here", "LINK", "_dotplot", "hadley", "I", "have", "a", "battery", "of", "visual", "test", "for", "this", "and", "for", "violin", "plots", "NUMBER", "Should", "I", "add", "them", "Also", "what", "do", "you", "think", "about", "add", "a", "title", "to", "each", "visual", "test", "describing", "what", "it", "s", "test", "and", "what", "it", "should", "look", "like", "I", "think", "that", "would", "be", "helpful", "NUMBER", "Regarding", "titles", "on", "visual", "test", "how", "about", "a", "wrapper", "function", "similar", "to", "testthat", "Instead", "of", "opts", "title", "mytitle", "it", "could", "be", "something", "like", "visualtest", "mytitle", "ggplot", "NUMBER", "NUMBER", "Also", "it", "would", "be", "nice", "if", "the", "wrapper", "did", "line", "breaks", "in", "the", "titles", "automatically", "NUMBER", "If", "it", "s", "an", "html", "page", "I", "guess", "you", "wouldn", "t", "need", "to", "put", "the", "titles", "in", "the", "graphs", "themselves", "they", "could", "go", "in", "the", "web", "page", "NUMBER", "Another", "possibly", "useful", "feature", "would", "be", "to", "have", "two", "columns", "of", "images", "one", "column", "with", "old", "images", "from", "the", "last", "test", "run", "and", "another", "with", "new", "images", "NUMBER", "That", "way", "it", "would", "be", "easy", "to", "inspect", "for", "important", "change", "even", "when", "there", "s", "a", "small", "change", "that", "alters", "the", "image", "file", "but", "in", "a", "visually", "trivial", "way", "like", "a", "change", "in", "border", "space", "gridline", "width", "antialiasing", "and", "so", "on", "NUMBER", "It", "might", "also", "be", "useful", "to", "have", "another", "column", "that", "indicates", "whether", "the", "image", "has", "change", "byte", "for", "byte", "NUMBER", "Do", "you", "know", "this", "one", "LINK", "Diff", "View", "Modes", "github", "has", "diff", "for", "picture", "mode", "NUMBER", "I", "know", "it", "just", "now", "NUMBER", "So", "a", "diff", "commit", "looks", "like", "this", "LINK", "Diff", "View", "Modes", "commit", "NUMBER", "e", "NUMBER", "f", "NUMBER", "c", "NUMBER", "c", "NUMBER", "e", "NUMBER", "d", "NUMBER", "cdad", "NUMBER", "cool", "NUMBER", "hadley", "I", "also", "wonder", "why", "the", "fill", "be", "lost", "in", "this", "case", "I", "think", "it", "gets", "lost", "at", "the", "stat", "ing", "stage", "NUMBER", "It", "also", "happens", "for", "regular", "histograms", "R", "set", "NUMBER", "seed", "NUMBER", "dat", "TAG", "useful", "Hope", "this", "be", "helpful", "NUMBER", "Dennis", "When", "the", "range", "of", "x", "or", "y", "be", "large", "the", "function", "round_any", "returns", "a", "number", "out", "of", "range", "for", "the", "lower", "bound", "resulting", "in", "a", "shape", "parameter", "that", "be", "too", "large", "NUMBER", "This", "then", "results", "in", "a", "request", "for", "an", "inordinate", "amount", "of", "RAM", "which", "causes", "qplot", "to", "fail", "NUMBER", "Here", "be", "a", "small", "reproduce", "a", "TAG", "b", "TAG", "print", "b", "Error", "in", "vector", "integer", "length", "vector", "size", "specified", "be", "too", "large", "The", "offending", "lines", "of", "code", "follow", "grep", "Rn", "round_any", "ggplot", "NUMBER", "R", "stat", "binhex", "NUMBER", "r", "NUMBER", "round_any", "min", "x", "binwidth", "NUMBER", "floor", "NUMBER", "e", "NUMBER", "NUMBER", "round_any", "max", "x", "binwidth", "NUMBER", "ceiling", "NUMBER", "e", "NUMBER", "NUMBER", "round_any", "min", "y", "binwidth", "NUMBER", "floor", "NUMBER", "e", "NUMBER", "NUMBER", "round_any", "max", "y", "binwidth", "NUMBER", "ceiling", "NUMBER", "e", "NUMBER", "One", "other", "bug", "here", "be", "ybnds", "TAG", "stats", "predict", "NUMBER", "loess", "Error", "predict", "NUMBER", "loess", "be", "not", "an", "export", "object", "from", "namespace", "stats", "stats", "predict", "NUMBER", "lm", "function", "object", "newdata", "se", "NUMBER", "fit", "FALSE", "scale", "NULL", "df", "Inf", "interval", "c", "none", "confidence", "prediction", "level", "NUMBER", "NUMBER", "NUMBER", "Here", "s", "a", "version", "of", "predictdf", "NUMBER", "loess", "implement", "level", "for", "confidence", "intervals", "NUMBER", "It", "uses", "the", "t", "distribution", "to", "calculate", "as", "suggested", "in", "the", "docs", "for", "predict", "NUMBER", "loess", "NUMBER", "R", "predictdf", "NUMBER", "loess", "TAG", "max", "b", "b", "TAG", "abc", "TAG", "ggplot", "abc", "aes", "x", "X", "NUMBER", "ymin", "NUMBER", "lower", "NUMBER", "middle", "NUMBER", "upper", "NUMBER", "ymax", "NUMBER", "geom_boxplot", "stat", "identity", "Error", "in", "eval", "expr", "envir", "enclos", "object", "NUMBER", "not", "find", "ggplot", "abc", "aes", "x", "X", "NUMBER", "y", "NUMBER", "geom_point", "Error", "in", "eval", "expr", "envir", "enclos", "object", "NUMBER", "not", "find", "abc", "X", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "be", "because", "transform", "in", "facet_map_layout", "NUMBER", "null", "change", "the", "column", "name", "NUMBER", "transform", "abcfix", "it", "NUMBER", "Seemingly", "there", "be", "big", "change", "in", "ggplot", "NUMBER", "v", "NUMBER", "So", "if", "there", "be", "something", "out", "of", "date", "in", "your", "book", "ggplot", "NUMBER", "Elegant", "Graphics", "for", "Data", "Analysis", "Do", "you", "plan", "to", "update", "the", "book", "Hopefully", "all", "the", "code", "and", "ggplot", "produced", "graphics", "in", "the", "book", "exist", "in", "a", "reproducible", "aka", "runnable", "form", "NUMBER", "If", "so", "that", "source", "file", "should", "be", "run", "against", "the", "new", "version", "and", "any", "code", "that", "gives", "error", "could", "be", "annotated", "on", "a", "wiki", "page", "devoted", "to", "example", "update", "for", "version", "NUMBER", "Even", "if", "a", "new", "edition", "of", "the", "book", "be", "made", "printed", "this", "would", "be", "useful", "for", "those", "of", "us", "with", "the", "original", "edition", "that", "wouldn", "t", "necessarily", "buy", "every", "edition", "sorry", "Hadley", "NUMBER", "This", "add", "geom_violin", "and", "stat_ydensity", "NUMBER", "There", "be", "also", "change", "to", "pos_dodge", "so", "that", "it", "dodges", "by", "group", "instead", "of", "by", "row", "NUMBER", "I", "ve", "had", "a", "few", "thoughts", "about", "the", "parameters", "NUMBER", "These", "probably", "should", "be", "dealt", "with", "before", "merge", "NUMBER", "I", "think", "I", "need", "a", "better", "name", "for", "the", "fullwidth", "parameter", "NUMBER", "Presently", "setting", "it", "to", "FALSE", "the", "default", "scales", "each", "violin", "so", "the", "max", "width", "be", "the", "same", "NUMBER", "Setting", "it", "to", "TRUE", "scales", "each", "violin", "to", "have", "the", "same", "area", "well", "same", "area", "if", "tails", "were", "include", "NUMBER", "I", "also", "want", "an", "option", "to", "scale", "the", "area", "proportional", "to", "the", "sample", "size", "NUMBER", "Should", "there", "be", "an", "option", "to", "automatically", "draw", "the", "box", "plot", "and", "median", "dot", "or", "should", "I", "make", "people", "do", "that", "manually", "Doing", "it", "automatically", "may", "be", "difficult", "because", "the", "data", "goes", "through", "StatYdensity", "before", "it", "gets", "to", "GeomViolin", "NUMBER", "By", "the", "time", "it", "gets", "to", "the", "geom", "the", "original", "data", "may", "no", "longer", "be", "accessible", "so", "it", "can", "t", "be", "sent", "to", "GeomBoxplot", "NUMBER", "wch", "regard", "your", "second", "point", "option", "to", "automatically", "draw", "box", "plot", "I", "would", "say", "no", "NUMBER", "Adding", "a", "box", "plot", "be", "but", "one", "way", "to", "supplement", "the", "violin", "plot", "and", "it", "makes", "more", "sense", "with", "it", "be", "a", "separate", "layer", "NUMBER", "With", "the", "aesthetics", "set", "up", "right", "in", "the", "initial", "ggplot", "call", "it", "should", "be", "as", "simple", "as", "geom_violin", "geom_boxplot", "to", "get", "both", "of", "them", "NUMBER", "BrianDiggs", "Thanks", "now", "that", "I", "ve", "sat", "on", "it", "for", "a", "bit", "I", "m", "inclined", "to", "agree", "NUMBER", "Regarding", "the", "first", "point", "above", "I", "ve", "change", "the", "fullwidth", "parameter", "to", "scalearea", "NUMBER", "When", "set", "to", "FALSE", "default", "it", "scales", "so", "the", "max", "width", "of", "each", "violin", "be", "the", "same", "NUMBER", "When", "set", "to", "TRUE", "it", "scales", "so", "that", "area", "of", "each", "violin", "be", "the", "same", "NUMBER", "I", "ve", "also", "add", "an", "option", "scalecount", "to", "scale", "by", "sample", "size", "NUMBER", "This", "will", "work", "with", "either", "value", "of", "scalearea", "NUMBER", "Let", "me", "see", "if", "I", "understand", "the", "possible", "interactions", "of", "these", "two", "scalecount", "FALSE", "and", "scalearea", "FALSE", "the", "widest", "part", "of", "the", "violin", "plot", "be", "the", "same", "width", "for", "all", "violins", "scalecount", "FALSE", "and", "scalearea", "TRUE", "the", "area", "of", "each", "violin", "plot", "be", "the", "same", "for", "all", "violins", "scalecount", "TRUE", "and", "scalearea", "FALSE", "the", "ratios", "of", "the", "widest", "parts", "of", "each", "violin", "be", "equal", "to", "the", "ratios", "of", "their", "respective", "sample", "sizes", "scalecount", "TRUE", "and", "scalearea", "TRUE", "the", "ratios", "of", "the", "areas", "of", "each", "violin", "be", "equal", "to", "the", "ratios", "of", "their", "respective", "sample", "sizes", "Is", "that", "right", "BrianDiggs", "yup", "that", "s", "exactly", "right", "NUMBER", "I", "add", "some", "examples", "on", "the", "wiki", "page", "to", "illustrate", "LINK", "_violin", "So", "one", "controls", "what", "aspect", "of", "the", "violin", "be", "be", "scaled", "and", "the", "other", "controls", "by", "what", "that", "element", "be", "be", "scaled", "NUMBER", "I", "like", "the", "options", "that", "gives", "but", "I", "m", "not", "sure", "if", "I", "like", "the", "way", "the", "options", "be", "named", "mapped", "NUMBER", "scalearea", "controls", "the", "aspect", "or", "element", "that", "be", "scaled", "NUMBER", "Rather", "than", "thinking", "of", "the", "parameter", "as", "Should", "I", "scale", "based", "on", "the", "area", "Yes", "No", "where", "no", "falls", "back", "on", "scaling", "by", "width", "why", "not", "have", "an", "option", "scaledelement", "or", "elementscaled", "or", "aspectscaled", "which", "can", "have", "values", "width", "or", "area", "NUMBER", "The", "default", "can", "be", "width", "just", "as", "the", "default", "of", "scaledarea", "be", "FALSE", "NUMBER", "You", "could", "either", "throw", "a", "warning", "an", "error", "or", "silently", "use", "width", "if", "the", "value", "be", "unrecognized", "NUMBER", "The", "advantage", "of", "this", "be", "that", "it", "be", "more", "clear", "that", "you", "be", "picking", "from", "two", "different", "options", "regard", "the", "scaling", "element", "not", "just", "turning", "on", "a", "feature", "NUMBER", "Also", "if", "there", "be", "anything", "else", "to", "scale", "by", "not", "that", "I", "can", "think", "of", "any", "other", "aspects", "that", "be", "available", "you", "just", "expand", "the", "allowable", "choices", "rather", "than", "have", "to", "add", "another", "flag", "variable", "NUMBER", "I", "m", "less", "sure", "about", "change", "the", "scalecount", "variable", "likewise", "into", "say", "scaleby", "with", "choices", "count", "or", "equal", "NUMBER", "In", "one", "sense", "there", "may", "be", "other", "things", "to", "scale", "by", "though", "again", "I", "can", "t", "think", "of", "what", "NUMBER", "It", "d", "be", "nice", "to", "be", "able", "to", "make", "that", "an", "aesthetic", "but", "that", "doesn", "t", "work", "because", "it", "be", "a", "group", "level", "aesthetic", "not", "a", "individual", "value", "one", "NUMBER", "On", "Dec", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Winston", "reply", "reply", "NUMBER", "github", "NUMBER", "com", "write", "BrianDiggs", "yup", "that", "s", "exactly", "right", "NUMBER", "I", "add", "some", "examples", "on", "the", "wiki", "page", "to", "illustrate", "LINK", "_violin", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "BrianDiggs", "These", "be", "good", "suggestions", "NUMBER", "I", "didn", "t", "really", "like", "that", "the", "variables", "had", "very", "similar", "names", "but", "did", "different", "things", "NUMBER", "OK", "how", "about", "scaledaspect", "width", "or", "area", "scaleby", "equal", "or", "count", "For", "some", "reason", "I", "m", "finding", "it", "really", "hard", "to", "come", "up", "with", "good", "names", "for", "this", "NUMBER", "I", "like", "those", "better", "but", "I", "agree", "that", "settling", "on", "a", "name", "be", "hard", "NUMBER", "Better", "to", "have", "the", "struggle", "now", "though", "rather", "than", "after", "it", "gets", "release", "NUMBER", "One", "point", "I", "keep", "going", "back", "and", "forth", "on", "be", "whether", "the", "choice", "for", "scaleby", "should", "be", "equal", "or", "none", "or", "maybe", "nothing", "NUMBER", "I", "like", "when", "options", "at", "least", "approximately", "parse", "as", "language", "NUMBER", "So", "for", "scaledaspect", "this", "works", "scaledaspect", "width", "can", "be", "read", "as", "the", "scaled", "aspect", "be", "the", "width", "NUMBER", "It", "be", "a", "bit", "trickier", "for", "scaleby", "scaleby", "count", "becomes", "What", "it", "the", "scaled", "aspect", "be", "scaled", "by", "be", "the", "count", "NUMBER", "For", "equal", "it", "parses", "more", "like", "It", "the", "scaled", "aspect", "be", "scaled", "such", "that", "they", "be", "all", "equal", "for", "nothing", "a", "more", "parallel", "construct", "be", "possible", "What", "it", "the", "scaled", "aspect", "be", "scaled", "by", "be", "nothing", "NUMBER", "This", "be", "not", "a", "very", "strong", "argument", "though", "NUMBER", "I", "d", "love", "to", "hear", "others", "thoughts", "ideas", "NUMBER", "Here", "s", "another", "idea", "scaledaspect", "and", "scalefactor", "NUMBER", "Thoughts", "hadley", "I", "m", "not", "sure", "I", "see", "why", "you", "need", "so", "many", "options", "to", "me", "the", "only", "sensible", "scalings", "be", "area", "constant", "or", "area", "proportional", "to", "sample", "size", "NUMBER", "I", "m", "inclined", "to", "agree", "that", "scaling", "the", "max", "width", "isn", "t", "all", "that", "useful", "but", "for", "whatever", "reason", "that", "do", "seem", "to", "be", "the", "standard", "convention", "with", "violin", "plots", "NUMBER", "That", "s", "why", "width", "scaling", "be", "in", "there", "and", "the", "default", "NUMBER", "If", "you", "re", "sure", "I", "m", "happy", "to", "take", "it", "out", "and", "have", "only", "scaling", "by", "area", "NUMBER", "OK", "I", "made", "most", "of", "the", "change", "and", "push", "them", "NUMBER", "The", "only", "things", "that", "remain", "be", "choosing", "the", "scale", "parameters", "and", "documenting", "them", "NUMBER", "hadley", "I", "ll", "make", "the", "change", "once", "you", "let", "me", "know", "if", "you", "re", "sure", "that", "you", "don", "t", "want", "width", "scaling", "at", "all", "NUMBER", "I", "remove", "the", "width", "scaling", "option", "NUMBER", "Now", "there", "s", "just", "scalefactor", "which", "can", "be", "equal", "or", "count", "NUMBER", "I", "also", "add", "docs", "and", "change", "pos_dodge", "to", "use", "the", "method", "you", "mention", "NUMBER", "I", "didn", "t", "run", "roxygenize", "because", "of", "the", "NAMESPACE", "issue", "NUMBER", "fix", "and", "free", "be", "not", "a", "natural", "parallel", "though", "NUMBER", "From", "that", "I", "m", "not", "sure", "which", "be", "which", "NUMBER", "I", "m", "guessing", "fix", "would", "be", "equal", "fix", "to", "the", "same", "size", "as", "the", "facets", "be", "fix", "to", "the", "same", "scale", "and", "free", "would", "be", "scaled", "to", "the", "count", "free", "to", "expand", "to", "the", "data", "s", "size", "but", "I", "could", "probably", "come", "up", "with", "just", "as", "good", "explanation", "for", "the", "other", "way", "around", "NUMBER", "I", "think", "it", "be", "better", "to", "go", "with", "more", "descriptive", "options", "equal", "and", "count", "though", "calling", "the", "parameter", "just", "scale", "seems", "reasonable", "NUMBER", "I", "have", "to", "agree", "with", "BrianDiggs", "s", "assessment", "of", "fix", "and", "free", "NUMBER", "It", "s", "not", "obvious", "which", "one", "would", "mean", "scale", "areas", "to", "be", "equal", "and", "which", "would", "mean", "scale", "area", "by", "counts", "NUMBER", "scale", "do", "sound", "reasonable", "for", "a", "parameter", "name", "though", "NUMBER", "OK", "change", "it", "to", "scale", "count", "and", "equal", "NUMBER", "OK", "I", "add", "a", "NEWS", "item", "and", "some", "visual", "test", "NUMBER", "A", "heads", "up", "I", "just", "tried", "merge", "and", "it", "looks", "like", "there", "will", "be", "a", "small", "conflict", "in", "NEWS", "NUMBER", "OK", "it", "should", "be", "good", "to", "go", "NUMBER", "This", "add", "the", "notch", "option", "to", "geom_boxplot", "NUMBER", "OK", "I", "made", "the", "change", "to", "the", "code", "and", "add", "documentation", "to", "geom_boxplot", "and", "stat_boxplot", "NUMBER", "I", "didn", "t", "commit", "the", "resulting", "change", "to", "the", "NUMBER", "Rd", "file", "after", "run", "roxygenize", "though", "NUMBER", "Running", "roxygenize", "appears", "to", "also", "change", "the", "NAMESPACE", "file", "so", "I", "figured", "I", "d", "just", "not", "mess", "with", "it", "NUMBER", "In", "general", "what", "should", "I", "do", "with", "roxygen", "OK", "I", "add", "the", "NEWS", "item", "a", "description", "of", "how", "they", "work", "and", "a", "reference", "to", "a", "paper", "NUMBER", "I", "also", "add", "the", "description", "of", "the", "hinge", "quartile", "calculation", "for", "NUMBER", "In", "the", "master", "branch", "there", "be", "stat", "aggr", "NUMBER", "d", "and", "stat", "aggrhex", "NUMBER", "These", "be", "combination", "of", "stat", "summary", "with", "geom", "bin", "NUMBER", "d", "geom", "binhex", "NUMBER", "The", "stats", "be", "renamed", "NUMBER", "hmm", "this", "be", "same", "as", "stat", "bin", "NUMBER", "d", "default_aes", "TAG", "Add", "aesthetic", "mappings", "Note", "that", "boxplots", "be", "automatically", "dodged", "when", "any", "aesthetic", "be", "a", "factor", "in", "LINK", "_boxplot", "NUMBER", "html", "This", "be", "weird", "It", "looks", "like", "it", "s", "a", "problem", "with", "the", "way", "round_any", "gets", "call", "NUMBER", "I", "inserted", "print", "unique", "data", "x", "in", "collide", "just", "before", "it", "gives", "that", "error", "message", "NUMBER", "R", "ggplot", "movies", "aes", "y", "votes", "x", "rating", "group", "round_any", "rating", "NUMBER", "geom_boxplot", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Error", "position_dodge", "requires", "constant", "width", "Even", "the", "regular", "round", "function", "doesn", "t", "work", "R", "ggplot", "movies", "aes", "y", "votes", "x", "rating", "group", "round", "rating", "geom_boxplot", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Error", "position_dodge", "requires", "constant", "width", "If", "you", "do", "the", "rounding", "before", "feeding", "it", "to", "ggplot", "it", "works", "fine", "R", "moviesrd", "TAG", "ggplot", "moviesrd", "aes", "y", "votes", "x", "rating", "group", "rating", "geom_boxplot", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "wch", "that", "be", "because", "x", "also", "change", "after", "transform", "NUMBER", "try", "this", "moviesrd", "TAG", "I", "think", "that", "s", "reasonable", "so", "I", "ve", "flagged", "it", "for", "NUMBER", "and", "the", "change", "should", "be", "do", "in", "the", "next", "couple", "of", "days", "NUMBER", "Thanks", "I", "d", "like", "to", "hear", "more", "about", "the", "huge", "data", "sets", "you", "re", "plotting", "Will", "send", "email", "NUMBER", "This", "example", "should", "include", "the", "range", "NUMBER", "to", "NUMBER", "but", "it", "only", "goes", "from", "about", "NUMBER", "to", "NUMBER", "This", "be", "enough", "to", "include", "the", "whiskers", "but", "not", "the", "outliers", "NUMBER", "R", "dat", "TAG", "max", "dat", "y", "As", "long", "as", "I", "inspected", "the", "problem", "be", "that", "in", "the", "case", "of", "boxplot", "ymin", "and", "ymax", "indicate", "the", "limits", "of", "the", "box", "while", "they", "indicates", "the", "limits", "of", "whole", "plot", "in", "the", "case", "of", "other", "geoms", "NUMBER", "I", "have", "do", "a", "quick", "fix", "NUMBER", "I", "will", "push", "the", "branch", "but", "probably", "there", "be", "more", "general", "way", "NUMBER", "Kohske", "I", "have", "an", "alternative", "solution", "use", "ymin", "and", "ymax", "to", "represent", "the", "bounding", "box", "including", "outliers", "and", "new", "values", "whiskermin", "and", "whiskermax", "to", "represent", "the", "ends", "of", "the", "whiskers", "NUMBER", "The", "first", "commit", "implement", "this", "solution", "NUMBER", "There", "s", "a", "second", "commit", "which", "change", "the", "parameter", "names", "in", "external", "interface", "from", "ymin", "and", "ymax", "to", "whiskermin", "and", "whiskermax", "when", "users", "specify", "the", "dimensions", "of", "the", "box", "directly", "NUMBER", "I", "did", "this", "for", "consistency", "but", "it", "might", "be", "undesirable", "because", "it", "could", "break", "exist", "user", "code", "NUMBER", "If", "this", "change", "be", "keep", "perhaps", "there", "should", "be", "a", "note", "about", "deprecate", "variable", "names", "SHA", "a", "NUMBER", "bafa", "NUMBER", "feaa", "NUMBER", "aac", "NUMBER", "e", "NUMBER", "be", "NUMBER", "f", "NUMBER", "wch", "as", "you", "mention", "the", "backward", "compatibility", "be", "the", "reason", "why", "I", "put", "ymin_final", "etc", "in", "my", "fix", "NUMBER", "But", "probably", "your", "solution", "be", "better", "and", "more", "general", "NUMBER", "So", "now", "x", "y", "min", "max", "indicates", "the", "bbox", "of", "the", "geom", "for", "any", "type", "of", "geoms", "NUMBER", "This", "be", "very", "simple", "and", "clear", "rule", "and", "worth", "adopting", "even", "if", "it", "will", "lose", "a", "subtle", "backward", "compatibility", "NUMBER", "It", "looks", "like", "change", "the", "external", "interface", "to", "use", "whisker", "min", "max", "causes", "some", "problem", "with", "calculating", "the", "y", "range", "NUMBER", "With", "that", "version", "I", "get", "this", "error", "R", "ggplot", "NULL", "aes", "x", "NUMBER", "whiskermin", "NUMBER", "lower", "NUMBER", "middle", "NUMBER", "upper", "NUMBER", "whiskermax", "NUMBER", "geom_boxplot", "stat", "identity", "Error", "in", "UseMethod", "scale_dimension", "no", "applicable", "method", "for", "scale_dimension", "applied", "to", "an", "object", "of", "class", "NULL", "Even", "after", "make", "change", "in", "the", "reparameterise", "function", "to", "define", "y", "min", "max", "from", "the", "whisker", "min", "max", "values", "I", "still", "get", "that", "error", "NUMBER", "Here", "s", "what", "I", "add", "to", "reparameterise", "R", "if", "be", "NUMBER", "null", "df", "ymin", "df", "ymin", "TAG", "s", "TAG", "scale_train", "s", "paste", "c", "NUMBER", "NUMBER", "NUMBER", "scale_map", "s", "paste", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "red", "blue", "green", "Probably", "I", "can", "fix", "but", "I", "m", "not", "sure", "the", "specification", "of", "scale_map", "NUMBER", "discrete", "NUMBER", "Should", "scale_map", "NUMBER", "discrete", "preserve", "the", "order", "of", "its", "argument", "x", "right", "hadley", "and", "koshke", "I", "don", "t", "think", "this", "issue", "should", "be", "close", "NUMBER", "Our", "test", "coverage", "isn", "t", "complete", "NUMBER", "Consider", "r", "test_that", "values", "be", "matched", "when", "scale", "contains", "more", "unique", "values", "than", "be", "in", "the", "data", "s", "TAG", "ft", "NUMBER", "local", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "NUMBER", "floor_date", "ft", "NUMBER", "local", "NUMBER", "NUMBER", "month", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "floor_date", "ft", "NUMBER", "local", "NUMBER", "NUMBER", "day", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "recommend", "nuking", "the", "floor_date", "and", "ceiling_date", "from", "ggplot", "NUMBER", "NUMBER", "Add", "a", "dependency", "on", "lubridate", "if", "necessary", "NUMBER", "Aha", "great", "floor_date", "be", "now", "internal", "That", "should", "solve", "the", "issue", "but", "I", "m", "curious", "why", "not", "depend", "on", "lubridate", "when", "similar", "functionality", "be", "provide", "there", "and", "better", "This", "might", "be", "two", "bug", "NUMBER", "I", "was", "trying", "to", "add", "line", "segments", "to", "a", "graph", "with", "log", "scales", "but", "instead", "of", "putting", "it", "at", "my", "specified", "coordinates", "it", "puts", "them", "at", "NUMBER", "to", "the", "power", "of", "the", "coordinate", "NUMBER", "For", "example", "if", "I", "specify", "x", "NUMBER", "and", "xend", "NUMBER", "it", "draws", "a", "line", "from", "x", "NUMBER", "to", "xend", "NUMBER", "Here", "s", "an", "example", "use", "a", "dataset", "from", "the", "MASS", "library", "library", "MASS", "Diagonal", "line", "ggplot", "Animals", "aes", "x", "body", "y", "brain", "geom_point", "geom_segment", "x", "NUMBER", "xend", "NUMBER", "y", "NUMBER", "yend", "NUMBER", "scale_x_log", "NUMBER", "scale_y_log", "NUMBER", "It", "also", "seems", "to", "me", "that", "the", "expected", "behavior", "of", "geom_segment", "in", "this", "case", "isn", "t", "clearly", "specified", "should", "it", "be", "visually", "straight", "useful", "for", "annotations", "or", "should", "it", "be", "numerically", "straight", "and", "thus", "visually", "curved", "Potential", "bug", "NUMBER", "I", "tried", "creating", "my", "own", "minimal", "data", "set", "to", "illustrate", "the", "problem", "but", "I", "can", "t", "even", "get", "it", "to", "draw", "the", "line", "segment", "I", "tried", "figuring", "out", "what", "the", "difference", "be", "between", "this", "data", "set", "and", "the", "one", "above", "but", "I", "made", "no", "progress", "NUMBER", "set", "NUMBER", "seed", "NUMBER", "dat", "TAG", "x", "TAG", "qplot", "x", "Error", "in", "if", "min", "r", "TAG", "miss", "value", "where", "TRUE", "FALSE", "needed", "R", "df", "TAG", "a", "the", "latter", "a", "e", "NUMBER", "thattat", "test", "code", "r", "test_that", "stringsAsFactors", "sAF", "TAG", "e", "versus", "e", "a", "NUMBER", "Discussion", "The", "problem", "happens", "in", "the", "build", "process", "ggplot_build", "only", "when", "one", "of", "the", "aesthetics", "be", "a", "character", "not", "a", "factor", "NUMBER", "I", "believe", "that", "this", "be", "probably", "due", "to", "a", "data", "NUMBER", "frame", "call", "which", "has", "the", "character", "vector", "which", "be", "converted", "to", "a", "factor", "ordered", "or", "not", "stays", "unordered", "based", "on", "the", "global", "option", "NUMBER", "Wherever", "this", "internal", "code", "be", "it", "should", "enforce", "a", "particular", "choice", "NUMBER", "Traditionally", "this", "choice", "has", "be", "stringsAsFactors", "TRUE", "ggplot", "has", "use", "the", "generic", "ordering", "that", "be", "gotten", "from", "a", "simple", "conversion", "of", "a", "character", "vector", "to", "a", "factor", "to", "determine", "the", "display", "order", "NUMBER", "Note", "that", "the", "test_that", "code", "checks", "both", "character", "and", "factor", "cases", "and", "checks", "at", "the", "ggplot", "specification", "and", "build", "ggplot", "level", "NUMBER", "One", "one", "of", "these", "gives", "an", "error", "NUMBER", "The", "others", "guard", "against", "regressions", "NUMBER", "sessionInfo", "sessionInfo", "R", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Platform", "x", "NUMBER", "_", "NUMBER", "pc", "mingw", "NUMBER", "x", "NUMBER", "NUMBER", "bit", "locale", "NUMBER", "LC_COLLATE", "English_United", "States", "NUMBER", "NUMBER", "LC_CTYPE", "English_United", "States", "NUMBER", "NUMBER", "LC_MONETARY", "English_United", "States", "NUMBER", "NUMBER", "LC_NUMERIC", "C", "NUMBER", "LC_TIME", "English_United", "States", "NUMBER", "attached", "base", "package", "NUMBER", "grid", "stats", "graphics", "grDevices", "utils", "datasets", "methods", "NUMBER", "base", "other", "attached", "package", "NUMBER", "testthat_", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "memoise_", "NUMBER", "scales_", "NUMBER", "reshape", "NUMBER", "_", "NUMBER", "NUMBER", "plyr_", "NUMBER", "proto_", "NUMBER", "NUMBER", "roxygen", "NUMBER", "_", "NUMBER", "digest_", "NUMBER", "devtools_", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "brew_", "NUMBER", "NUMBER", "codetools_", "NUMBER", "NUMBER", "colorspace_", "NUMBER", "NUMBER", "dichromat_", "NUMBER", "NUMBER", "NUMBER", "evaluate_", "NUMBER", "munsell_", "NUMBER", "mutatr_", "NUMBER", "RColorBrewer_", "NUMBER", "NUMBER", "NUMBER", "RCurl_", "NUMBER", "NUMBER", "stringr_", "NUMBER", "tools_", "NUMBER", "Thanks", "Tiny", "note", "NUMBER", "This", "be", "slightly", "better", "style", "because", "it", "guarantees", "you", "ll", "get", "your", "old", "options", "settings", "back", "even", "if", "the", "function", "error", "out", "old", "TAG", "on", "NUMBER", "exit", "print", "exiting", "print", "run", "NUMBER", "run", "eval", "on", "NUMBER", "exit", "print", "exiting", "print", "run", "NUMBER", "run", "NUMBER", "run", "eval", "substitute", "on", "NUMBER", "exit", "print", "exiting", "print", "run", "NUMBER", "run", "NUMBER", "exiting", "FUN", "TAG", "FUN", "NUMBER", "run", "NUMBER", "exiting", "eval", "body", "FUN", "NUMBER", "run", "NUMBER", "exiting", "Looking", "into", "the", "code", "of", "test_that", "I", "see", "that", "it", "be", "closest", "to", "the", "eval", "substitute", "NUMBER", "case", "which", "do", "trigger", "the", "on", "NUMBER", "exit", "but", "in", "general", "I", "would", "not", "expect", "or", "rely", "on", "that", "NUMBER", "Unless", "it", "be", "documented", "to", "work", "Oops", "yeah", "I", "forgot", "about", "that", "NUMBER", "My", "testthat", "test", "code", "had", "two", "error", "in", "the", "NUMBER", "and", "NUMBER", "expect_that", "NUMBER", "They", "should", "be", "r", "expect_that", "p", "NUMBER", "factor", "NUMBER", "FALSE", "equals", "p", "NUMBER", "factor", "NUMBER", "TRUE", "and", "r", "expect_that", "p", "NUMBER", "character", "NUMBER", "FALSE", "equals", "p", "NUMBER", "character", "NUMBER", "TRUE", "respectively", "NUMBER", "Description", "In", "the", "develop", "branch", "when", "calling", "summary", "on", "a", "ggplot", "object", "it", "exits", "with", "an", "error", "when", "printing", "the", "faceting", "information", "Reproducible", "code", "r", "summary", "ggplot", "Actual", "output", "summary", "ggplot", "data", "NUMBER", "x", "NUMBER", "faceting", "Error", "in", "summary", "NUMBER", "ggplot", "ggplot", "attempt", "to", "apply", "non", "function", "Expected", "output", "In", "version", "NUMBER", "the", "output", "be", "summary", "ggplot", "data", "NUMBER", "x", "NUMBER", "faceting", "facet_grid", "NUMBER", "NUMBER", "FALSE", "This", "be", "not", "necessarily", "what", "it", "should", "be", "but", "at", "least", "it", "shouldn", "t", "throw", "an", "error", "NUMBER", "Diagnosis", "In", "summary", "NUMBER", "ggplot", "LINK", "L", "NUMBER", "there", "be", "the", "call", "object", "facet", "pprint", "NUMBER", "git", "blame", "shows", "this", "line", "be", "from", "the", "initial", "import", "of", "ggplot", "to", "git", "NUMBER", "Since", "the", "results", "of", "a", "facet", "be", "no", "longer", "a", "proto", "object", "but", "a", "list", "of", "class", "facet", "there", "be", "no", "pprint", "function", "to", "call", "NUMBER", "A", "print", "NUMBER", "facet", "and", "maybe", "a", "summary", "NUMBER", "facet", "function", "be", "needed", "to", "print", "out", "a", "summary", "appropriate", "for", "this", "use", "NUMBER", "sessionInfo", "sessionInfo", "R", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Platform", "x", "NUMBER", "_", "NUMBER", "pc", "mingw", "NUMBER", "x", "NUMBER", "NUMBER", "bit", "locale", "NUMBER", "LC_COLLATE", "English_United", "States", "NUMBER", "NUMBER", "LC_CTYPE", "English_United", "States", "NUMBER", "NUMBER", "LC_MONETARY", "English_United", "States", "NUMBER", "NUMBER", "LC_NUMERIC", "C", "NUMBER", "LC_TIME", "English_United", "States", "NUMBER", "attached", "base", "package", "NUMBER", "grid", "stats", "graphics", "grDevices", "utils", "datasets", "methods", "NUMBER", "base", "other", "attached", "package", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "memoise_", "NUMBER", "scales_", "NUMBER", "reshape", "NUMBER", "_", "NUMBER", "plyr_", "NUMBER", "NUMBER", "proto_", "NUMBER", "NUMBER", "roxygen", "NUMBER", "_", "NUMBER", "digest_", "NUMBER", "devtools_", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "brew_", "NUMBER", "NUMBER", "codetools_", "NUMBER", "NUMBER", "colorspace_", "NUMBER", "NUMBER", "dichromat_", "NUMBER", "NUMBER", "NUMBER", "munsell_", "NUMBER", "RColorBrewer_", "NUMBER", "NUMBER", "RCurl_", "NUMBER", "NUMBER", "stringr_", "NUMBER", "NUMBER", "tools_", "NUMBER", "I", "think", "your", "comment", "LINK", "issuecomment", "NUMBER", "belongs", "with", "issue", "NUMBER", "not", "here", "NUMBER", "error", "occur", "in", "remove_missing", "if", "data", "contains", "NA", "NUMBER", "Probably", "because", "of", "unevaled", "promise", "or", "something", "else", "NUMBER", "be", "NUMBER", "ordered", "diamonds", "cut", "NUMBER", "FALSE", "levels", "diamonds", "cut", "NUMBER", "Fair", "Good", "Very", "Good", "Premium", "Ideal", "Oh", "really", "I", "was", "under", "the", "impression", "that", "they", "were", "use", "in", "ggplot", "NUMBER", "to", "sort", "levels", "in", "e", "NUMBER", "g", "NUMBER", "a", "bar", "chart", "NUMBER", "jeroenooms", "ordered", "means", "something", "else", "than", "the", "order", "of", "the", "levels", "NUMBER", "diamonds", "ocut", "TAG", "head", "diamonds", "cut", "NUMBER", "Ideal", "Premium", "Good", "Premium", "Good", "Very", "Good", "Levels", "Fair", "Good", "Very", "Good", "Premium", "Ideal", "head", "diamonds", "ocut", "NUMBER", "Ideal", "Premium", "Good", "Premium", "Good", "Very", "Good", "Levels", "Fair", "TAG", "p", "TAG", "ggsave", "hoge", "NUMBER", "pdf", "p", "now", "I", "have", "no", "time", "to", "detect", "where", "this", "be", "induced", "sorry", "NUMBER", "I", "didn", "t", "know", "that", "NUMBER", "I", "ll", "try", "to", "find", "out", "the", "bad", "commit", "NUMBER", "thank", "you", "NUMBER", "do", "not", "occur", "in", "a", "different", "environment", "NUMBER", "Please", "report", "if", "anyone", "find", "the", "same", "problem", "NUMBER", "I", "m", "seeing", "the", "blank", "page", "with", "fdb", "NUMBER", "c", "NUMBER", "dd", "NUMBER", "bd", "NUMBER", "d", "NUMBER", "b", "NUMBER", "d", "NUMBER", "fe", "NUMBER", "f", "NUMBER", "aa", "NUMBER", "b", "sessionInfo", "R", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Platform", "x", "NUMBER", "_", "NUMBER", "pc", "mingw", "NUMBER", "x", "NUMBER", "NUMBER", "bit", "locale", "NUMBER", "LC_COLLATE", "English_United", "States", "NUMBER", "NUMBER", "LC_CTYPE", "English_United", "States", "NUMBER", "NUMBER", "LC_MONETARY", "English_United", "States", "NUMBER", "NUMBER", "LC_NUMERIC", "C", "NUMBER", "LC_TIME", "English_United", "States", "NUMBER", "attached", "base", "package", "NUMBER", "stats", "graphics", "grDevices", "utils", "datasets", "methods", "base", "other", "attached", "package", "NUMBER", "ggplot", "NUMBER", "_", "NUMBER", "proto_", "NUMBER", "NUMBER", "roxygen_", "NUMBER", "NUMBER", "digest_", "NUMBER", "RCurl_", "NUMBER", "NUMBER", "NUMBER", "bitops_", "NUMBER", "NUMBER", "devtools_", "NUMBER", "loaded", "via", "a", "namespace", "and", "not", "attached", "NUMBER", "codetools_", "NUMBER", "NUMBER", "colorspace_", "NUMBER", "NUMBER", "dichromat_", "NUMBER", "NUMBER", "grid_", "NUMBER", "NUMBER", "memoise_", "NUMBER", "munsell_", "NUMBER", "plyr_", "NUMBER", "RColorBrewer_", "NUMBER", "NUMBER", "NUMBER", "reshape", "NUMBER", "_", "NUMBER", "scales_", "NUMBER", "stringr_", "NUMBER", "I", "tried", "git", "bisect", "and", "then", "I", "tried", "it", "again", "and", "the", "second", "time", "around", "I", "zeroed", "in", "on", "a", "different", "commit", "as", "the", "culprit", "NUMBER", "Let", "me", "try", "again", "slowly", "and", "see", "if", "I", "get", "a", "consistent", "answer", "this", "time", "NUMBER", "OK", "having", "taken", "more", "care", "I", "m", "pretty", "sure", "this", "be", "the", "culprit", "NUMBER", "cad", "NUMBER", "f", "NUMBER", "a", "NUMBER", "a", "NUMBER", "eb", "NUMBER", "de", "NUMBER", "b", "NUMBER", "a", "NUMBER", "dcf", "NUMBER", "aff", "be", "the", "first", "bad", "commit", "commit", "NUMBER", "cad", "NUMBER", "f", "NUMBER", "a", "NUMBER", "a", "NUMBER", "eb", "NUMBER", "de", "NUMBER", "b", "NUMBER", "a", "NUMBER", "dcf", "NUMBER", "aff", "Author", "hadley", "h", "NUMBER", "wickham", "gmail", "NUMBER", "com", "Date", "Wed", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Use", "ggplot_gtable", "consistently", "NUMBER", "NUMBER", "NUMBER", "ea", "NUMBER", "aac", "NUMBER", "c", "NUMBER", "c", "NUMBER", "cedd", "NUMBER", "eb", "NUMBER", "c", "NUMBER", "be", "NUMBER", "e", "NUMBER", "d", "NUMBER", "f", "NUMBER", "db", "NUMBER", "d", "NUMBER", "aa", "NUMBER", "c", "NUMBER", "d", "NUMBER", "bf", "NUMBER", "M", "R", "I", "saw", "some", "odd", "behavior", "that", "I", "realized", "later", "be", "probably", "relate", "to", "this", "NUMBER", "When", "I", "was", "run", "example", "on", "some", "of", "the", "documentation", "just", "checking", "test", "playing", "with", "stuff", "I", "notice", "that", "for", "each", "graph", "display", "there", "were", "NUMBER", "prompts", "to", "click", "for", "next", "page", "NUMBER", "After", "the", "first", "there", "was", "nothing", "after", "the", "second", "the", "graph", "appeared", "NUMBER", "Something", "be", "happening", "that", "be", "drawing", "a", "complete", "blank", "plot", "and", "then", "starting", "again", "to", "draw", "the", "actual", "plot", "NUMBER", "In", "PDF", "that", "would", "give", "a", "blank", "page", "on", "screen", "with", "par", "ask", "TRUE", "both", "plots", "can", "be", "seen", "NUMBER", "Maybe", "this", "will", "help", "track", "down", "where", "the", "problem", "lies", "NUMBER", "thanks", "all", "NUMBER", "I", "detected", "what", "be", "wrong", "NUMBER", "fix", "in", "the", "commit", "NUMBER", "a", "NUMBER", "e", "NUMBER", "bc", "NUMBER", "be", "NUMBER", "e", "This", "be", "about", "the", "infamous", "value", "NUMBER", "name", "parameter", "in", "the", "help", "command", "NUMBER", "I", "read", "here", "LINK", "_thread", "thread", "b", "NUMBER", "ca", "NUMBER", "f", "NUMBER", "d", "NUMBER", "f", "NUMBER", "pli", "NUMBER", "that", "everything", "will", "be", "sorted", "out", "once", "ggplot", "NUMBER", "depends", "on", "reshape", "NUMBER", "and", "not", "reshape", "NUMBER", "However", "as", "of", "ggplot", "NUMBER", "s", "version", "NUMBER", "the", "dependency", "list", "still", "include", "reshape", "NUMBER", "You", "still", "wrangling", "ggplot", "NUMBER", "Or", "the", "newest", "release", "will", "be", "submitted", "to", "CRAN", "in", "the", "next", "NUMBER", "h", "or", "so", "I", "m", "just", "trying", "to", "prevent", "dependencies", "nightmare", "on", "my", "production", "system", "but", "I", "ll", "give", "a", "spin", "on", "the", "latest", "ggplot", "NUMBER", "dev", "branch", "NUMBER", "If", "only", "you", "would", "name", "your", "Version", "field", "in", "the", "DESCRIPTION", "file", "as", "NUMBER", "x", "where", "x", "be", "some", "commit", "ordinal", "before", "you", "rename", "it", "to", "NUMBER", "On", "Mon", "Jul", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "hadley", "reply", "reply", "NUMBER", "github", "NUMBER", "com", "write", "This", "be", "fix", "in", "the", "develop", "branch", "NUMBER", "Not", "good", "NUMBER", "Your", "latest", "commit", "to", "github", "be", "from", "Dec", "NUMBER", "Your", "dev", "tree", "be", "not", "in", "github", "be", "it", "NUMBER", "NUMBER", "NUMBER", "Juan", "Carlos", "Borr\u00e1s", "jcborras", "gmail", "NUMBER", "com", "You", "still", "wrangling", "ggplot", "NUMBER", "Or", "the", "newest", "release", "will", "be", "submitted", "to", "CRAN", "in", "the", "next", "NUMBER", "h", "or", "so", "I", "m", "just", "trying", "to", "prevent", "dependencies", "nightmare", "on", "my", "production", "system", "but", "I", "ll", "give", "a", "spin", "on", "the", "latest", "ggplot", "NUMBER", "dev", "branch", "NUMBER", "If", "only", "you", "would", "name", "your", "Version", "field", "in", "the", "DESCRIPTION", "file", "as", "NUMBER", "x", "where", "x", "be", "some", "commit", "ordinal", "before", "you", "rename", "it", "to", "NUMBER", "Roger", "that", "NUMBER", "It", "may", "be", "better", "if", "users", "can", "specify", "jitter", "function", "for", "position_jitter", "like", "this", "my_jitter", "TAG", "Box", "and", "whisker", "plots", "be", "uniform", "in", "their", "use", "of", "the", "box", "the", "bottom", "and", "top", "of", "the", "box", "be", "always", "the", "NUMBER", "and", "NUMBER", "percentile", "the", "lower", "and", "upper", "quartiles", "respectively", "and", "the", "band", "near", "the", "middle", "of", "the", "box", "be", "always", "the", "NUMBER", "percentile", "the", "median", "NUMBER", "TAG", "TAG", "TAG", "By", "default", "in", "ggplot", "NUMBER", "the", "ends", "of", "the", "whiskers", "represents", "the", "lowest", "datum", "still", "within", "NUMBER", "IQR", "of", "the", "lower", "quartile", "and", "the", "highest", "datum", "still", "within", "NUMBER", "IQR", "of", "the", "upper", "quartile", "NUMBER", "Data", "beyond", "the", "end", "of", "the", "whiskers", "be", "outliers", "and", "plotted", "as", "points", "NUMBER", "TAG", "TAG", "Even", "more", "simply", "LINK", "statistics", "NUMBER", "boxplot", "NUMBER", "aspx", "NUMBER", "Thanks", "aschweig", "NUMBER", "Your", "description", "has", "be", "add", "to", "the", "docs", "NUMBER", "library", "ggplot", "NUMBER", "p", "qplot", "NUMBER", "NUMBER", "p", "scale_x_continuous", "Foo", "p", "scale_x_continuous", "name", "Foo", "neither", "work", "p", "xlab", "Foo", "p", "labs", "x", "Foo", "these", "do", "p", "qplot", "runif", "NUMBER", "runif", "NUMBER", "colour", "runif", "NUMBER", "p", "scale_colour_gradient", "Foo", "here", "this", "works", "p", "labs", "colour", "Foo", "and", "this", "also", "p", "qplot", "runif", "NUMBER", "runif", "NUMBER", "colour", "factor", "runif", "NUMBER", "p", "scale_colour_hue", "Foo", "p", "scale_colour_hue", "name", "Foo", "these", "do", "not", "work", "p", "labs", "colour", "Foo", "and", "this", "do", "but", "it", "creates", "a", "longer", "scale", "and", "strangely", "even", "though", "p", "be", "just", "modify", "and", "not", "saved", "it", "continues", "to", "increment", "the", "number", "of", "scale", "breaks", "p", "labs", "colour", "Foo", "p", "labs", "colour", "Foo", "p", "qplot", "runif", "NUMBER", "fill", "factor", "runif", "NUMBER", "p", "scale_fill_hue", "Foo", "p", "scale_fill_hue", "name", "Foo", "these", "do", "not", "work", "p", "labs", "fill", "Foo", "and", "this", "do", "and", "the", "behaviour", "be", "the", "same", "as", "above", "the", "colour", "scale", "progressively", "increases", "in", "size", "p", "labs", "colour", "Foo", "p", "labs", "colour", "Foo", "even", "stranger", "be", "this", "p", "qplot", "runif", "NUMBER", "fill", "factor", "runif", "NUMBER", "p", "scale_colour_hue", "Foo", "I", "be", "trying", "to", "change", "the", "colour", "scale", "on", "a", "plot", "where", "only", "the", "fill", "be", "mapped", "the", "title", "of", "the", "scale", "do", "not", "change", "but", "the", "number", "of", "scale", "breaks", "do", "I", "haven", "t", "tried", "more", "NUMBER", "Thanks", "for", "all", "the", "fix", "library", "ggplot", "NUMBER", "qplot", "NUMBER", "NUMBER", "The", "titles", "of", "the", "axes", "should", "be", "alignes", "with", "the", "axis", "break", "and", "it", "be", "shifted", "to", "the", "left", "bottom", "NUMBER", "This", "seems", "to", "be", "because", "the", "grob", "for", "the", "axis", "title", "be", "to", "wide", "NUMBER", "It", "should", "be", "subtracted", "the", "tick", "size", "and", "the", "axis", "NUMBER", "text", "NUMBER", "grob", "size", "NUMBER", "but", "I", "can", "t", "find", "how", "to", "do", "that", "NUMBER", "It", "seems", "to", "be", "in", "plot_render", "NUMBER", "r", "NUMBER", "Could", "you", "point", "me", "in", "the", "right", "direction", "please", "I", "tried", "but", "I", "must", "admit", "I", "could", "not", "figure", "it", "out", "NUMBER", "If", "this", "be", "going", "away", "anyhow", "I", "ll", "stick", "with", "fix", "my", "plots", "in", "Inkscape", "Legends", "be", "less", "of", "a", "problem", "NUMBER", "Thanks", "a", "lot", "A", "simple", "qplot", "NUMBER", "NUMBER", "shows", "that", "the", "labels", "be", "still", "shifted", "left", "and", "down", "a", "bit", "NUMBER", "LINK", "gtable_render", "NUMBER", "pdf", "This", "be", "with", "the", "latest", "dev", "version", "of", "scales", "plyr", "etc", "NUMBER", "Fixed", "NUMBER", "Let", "me", "know", "if", "you", "see", "any", "others", "NUMBER", "Fine", "for", "me", "too", "NUMBER", "I", "ll", "continue", "to", "test", "it", "in", "the", "following", "days", "NUMBER", "On", "NUMBER", "June", "NUMBER", "at", "NUMBER", "NUMBER", "hadley", "write", "This", "branch", "also", "reduces", "plotting", "time", "by", "about", "NUMBER", "ms", "which", "be", "nice", "NUMBER", "Nice", "indeed", "When", "the", "data", "be", "small", "typically", "TAG", "But", "how", "do", "limit", "and", "free", "scales", "interact", "I", "think", "manual", "limits", "should", "have", "top", "priority", "NUMBER", "And", "what", "happens", "if", "you", "specify", "facet_wrap", "vs", "limits", "lims", "NUMBER", "Just", "an", "error", "since", "the", "limits", "be", "indeterminable", "NUMBER", "Or", "with", "warning", "use", "the", "first", "apparence", "of", "vs", "NUMBER", "Another", "relate", "idea", "that", "I", "ve", "be", "thinking", "about", "be", "giving", "layers", "the", "ability", "not", "to", "affect", "scale", "limits", "this", "be", "useful", "when", "you", "be", "plotting", "spatial", "data", "and", "want", "to", "add", "a", "map", "on", "top", "NUMBER", "You", "don", "t", "want", "the", "map", "to", "affect", "the", "limits", "because", "it", "may", "be", "much", "bigger", "than", "you", "data", "and", "use", "coord", "to", "zoom", "in", "be", "a", "hassle", "NUMBER", "If", "that", "idea", "was", "implement", "modifying", "scales", "on", "a", "facet", "by", "facet", "basis", "would", "amount", "to", "use", "train_position", "F", "for", "all", "layers", "apart", "from", "a", "geom_blank", "which", "specified", "the", "dummy", "data", "to", "expand", "the", "scales", "as", "needed", "which", "expand_limits", "already", "do", "NUMBER", "Totally", "the", "idea", "sounds", "good", "although", "I", "m", "not", "sure", "if", "explicit", "null", "geom", "be", "necessary", "NUMBER", "Kohske", "Takahashi", "takahashi", "NUMBER", "kohske", "gmail", "NUMBER", "com", "Research", "Center", "for", "Advanced", "Science", "and", "Technology", "The", "University", "of", "Tokyo", "Japan", "NUMBER", "LINK", "tokyo", "NUMBER", "ac", "NUMBER", "jp", "profilee_ktakahashi", "NUMBER", "html", "On", "Mon", "May", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "hadley", "reply", "reply", "NUMBER", "github", "NUMBER", "com", "write", "Yes", "I", "like", "this", "idea", "and", "I", "like", "that", "basic", "syntax", "NUMBER", "But", "how", "do", "limit", "and", "free", "scales", "interact", "And", "what", "happens", "if", "you", "specify", "facet_wrap", "vs", "limits", "lims", "NUMBER", "Another", "relate", "idea", "that", "I", "ve", "be", "thinking", "about", "be", "giving", "layers", "the", "ability", "not", "to", "affect", "scale", "limits", "this", "be", "useful", "when", "you", "be", "plotting", "spatial", "data", "and", "want", "to", "add", "a", "map", "on", "top", "NUMBER", "You", "don", "t", "want", "the", "map", "to", "affect", "the", "limits", "because", "it", "may", "be", "much", "bigger", "than", "you", "data", "and", "use", "coord", "to", "zoom", "in", "be", "a", "hassle", "NUMBER", "If", "that", "idea", "was", "implement", "modifying", "scales", "on", "a", "facet", "by", "facet", "basis", "would", "amount", "to", "use", "train_position", "F", "for", "all", "layers", "apart", "from", "a", "geom_blank", "which", "specified", "the", "dummy", "data", "to", "expand", "the", "scales", "as", "needed", "which", "expand_limits", "already", "do", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "comment_", "NUMBER", "Here", "be", "a", "testbed", "of", "manual", "limits", "for", "coord", "with", "facet_wrap", "NUMBER", "LINK", "Hmmmm", "that", "code", "just", "looks", "too", "complicated", "to", "me", "NUMBER", "It", "s", "a", "lot", "of", "extra", "complexity", "for", "not", "a", "lot", "of", "extra", "gain", "NUMBER", "I", "think", "giving", "layers", "the", "ability", "to", "control", "whether", "or", "not", "they", "affect", "position", "scaling", "be", "simpler", "to", "implement", "more", "elegant", "in", "terms", "of", "playing", "nicely", "with", "exist", "code", "for", "free", "limits", "and", "allows", "a", "number", "of", "other", "interesting", "techniques", "that", "were", "previously", "not", "possibly", "NUMBER", "Yes", "exactly", "yes", "NUMBER", "It", "may", "be", "too", "complicated", "and", "hard", "to", "understand", "NUMBER", "Probably", "the", "layers", "will", "do", "that", "but", "thus", "far", "I", "could", "not", "entirely", "figure", "out", "the", "power", "of", "the", "layers", "NUMBER", "So", "I", "will", "look", "into", "the", "code", "and", "consider", "a", "implementation", "NUMBER", "thanks", "kohske", "I", "would", "like", "to", "add", "another", "relate", "request", "NUMBER", "Different", "panels", "with", "different", "limits", "may", "also", "require", "fine", "tuning", "of", "the", "breaks", "on", "a", "per", "panel", "basis", "I", "do", "need", "this", "often", "NUMBER", "Currently", "the", "only", "way", "I", "could", "achieve", "this", "was", "to", "mask", "grid", "NUMBER", "pretty", "and", "play", "some", "ugly", "tricks", "to", "have", "it", "return", "different", "breaks", "for", "different", "data", "ranges", "NUMBER", "It", "sure", "would", "be", "nice", "to", "be", "able", "to", "specify", "manual", "breaks", "for", "each", "facet", "in", "those", "few", "special", "occasions", "NUMBER", "I", "don", "t", "expect", "there", "will", "ever", "be", "a", "properly", "grammatical", "syntax", "for", "this", "though", "NUMBER", "Failing", "this", "perhaps", "it", "should", "simply", "be", "part", "of", "opts", "I", "could", "imagine", "a", "new", "opts", "for", "a", "ggplot", "be", "similar", "to", "the", "way", "lattice", "handles", "these", "cosmetic", "details", "specify", "the", "panel", "ordering", "specify", "the", "panel", "widths", "and", "interpanel", "spacings", "allowing", "visual", "groupings", "e", "NUMBER", "g", "NUMBER", "NUMBER", "by", "NUMBER", "specify", "a", "list", "of", "panel", "limits", "with", "optional", "recycling", "specify", "the", "panel", "x", "and", "y", "breaks", "perhaps", "even", "more", "options", "such", "as", "per", "panel", "background", "colour", "NUMBER", "It", "should", "be", "possible", "to", "specify", "all", "these", "details", "in", "terms", "of", "the", "facetting", "variables", "as", "oppose", "to", "the", "panel", "number", "admittedly", "the", "syntax", "becomes", "more", "cumbersome", "NUMBER", "There", "may", "be", "a", "way", "to", "define", "a", "new", "data", "structure", "between", "data", "NUMBER", "frame", "and", "list", "to", "handle", "these", "options", "NUMBER", "Below", "be", "an", "illustration", "of", "what", "I", "have", "in", "mind", "storing", "the", "values", "in", "a", "long", "format", "matrix", "NUMBER", "my", "NUMBER", "panel", "NUMBER", "details", "TAG", "library", "reshape", "NUMBER", "melt", "smiths", "id", "NUMBER", "vars", "subject", "measure", "NUMBER", "vars", "c", "time", "age", "variable", "NUMBER", "name", "feature", "subject", "feature", "value", "NUMBER", "John", "Smith", "time", "NUMBER", "NUMBER", "Mary", "Smith", "time", "NUMBER", "NUMBER", "John", "Smith", "age", "NUMBER", "NUMBER", "Mary", "Smith", "age", "NA", "That", "worked", "OK", "NUMBER", "Now", "load", "ggplot", "NUMBER", "which", "masks", "some", "function", "NUMBER", "library", "ggplot", "NUMBER", "Loading", "required", "package", "reshape", "Loading", "required", "package", "plyr", "Attaching", "package", "reshape", "The", "following", "object", "s", "be", "masked", "from", "package", "plyr", "rename", "round_any", "The", "following", "object", "s", "be", "masked", "from", "package", "reshape", "NUMBER", "colsplit", "melt", "recast", "Loading", "required", "package", "grid", "Loading", "required", "package", "proto", "Try", "again", "this", "calls", "the", "version", "of", "melt", "from", "reshape", "NUMBER", "melt", "smiths", "id", "NUMBER", "vars", "subject", "measure", "NUMBER", "vars", "c", "time", "age", "variable", "NUMBER", "name", "feature", "subject", "variable", "value", "NUMBER", "John", "Smith", "time", "NUMBER", "NUMBER", "Mary", "Smith", "time", "NUMBER", "NUMBER", "John", "Smith", "age", "NUMBER", "NUMBER", "Mary", "Smith", "age", "NA", "Notice", "that", "the", "column", "that", "was", "call", "feature", "be", "now", "call", "variable", "because", "the", "relevant", "argument", "in", "reshape", "NUMBER", "be", "variable", "NUMBER", "name", "but", "in", "reshape", "it", "be", "variable_name", "NUMBER", "ggsave", "units", "cm", "be", "indeed", "confusing", "since", "it", "do", "nothing", "NUMBER", "Maybe", "it", "would", "be", "clearer", "if", "it", "affected", "the", "display", "of", "the", "size", "when", "width", "and", "height", "be", "not", "specified", "NUMBER", "I", "did", "not", "know", "about", "cm", "NUMBER", "I", "still", "think", "having", "an", "explicit", "argument", "be", "more", "discoverable", "NUMBER", "What", "about", "with", "these", "new", "change", "The", "code", "be", "not", "clearer", "but", "the", "user", "interface", "be", "consistent", "and", "improved", "I", "think", "NUMBER", "I", "understand", "that", "this", "might", "seem", "low", "priority", "NUMBER", "One", "get", "s", "use", "to", "american", "units", "after", "a", "while", "even", "come", "from", "a", "country", "use", "international", "standard", "units", "NUMBER", "But", "my", "students", "who", "have", "not", "be", "confronted", "to", "this", "peculiarity", "yet", "be", "completely", "put", "off", "by", "inches", "NUMBER", "Done", "It", "be", "now", "in", "feature", "request", "NUMBER", "df", "TAG", "library", "ggplot", "NUMBER", "Loading", "required", "package", "reshape", "Loading", "required", "package", "plyr", "Attaching", "package", "reshape", "The", "following", "object", "s", "be", "masked", "from", "package", "plyr", "rename", "round_any", "Loading", "required", "package", "grid", "Loading", "required", "package", "proto", "data", "TAG", "my", "NUMBER", "wrap_hmisc", "TAG", "my", "NUMBER", "mean_cl_boot", "TAG", "mean_cl_boot", "data", "y", "y", "y", "ymin", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "my", "NUMBER", "mean_cl_boot", "data", "y", "y", "ymin", "ymax", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Looking", "a", "bit", "deeper", "the", "problem", "be", "cause", "by", "an", "incorrectly", "namespaced", "rename", "function", "NUMBER", "Modifying", "the", "wrap_hmisc", "source", "to", "specify", "plyr", "rename", "continues", "to", "give", "the", "incorrect", "result", "but", "use", "reshape", "rename", "gives", "the", "expected", "result", "NUMBER", "Removing", "the", "unuse", "in", "this", "case", "Median", "y", "replacement", "also", "gives", "the", "expected", "result", "NUMBER", "Is", "this", "a", "library", "version", "dependency", "problem", "or", "a", "bug", "The", "title", "of", "this", "issue", "be", "probably", "misleading", "now", "be", "it", "safe", "to", "change", "R", "library", "plyr", "library", "reshape", "data", "TAG", "y", "ymin", "ymax", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "plyr", "rename", "data", "c", "Median", "y", "Mean", "y", "Lower", "ymin", "Upper", "ymax", "FAIL", "y", "y", "ymin", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "plyr", "rename", "data", "c", "Mean", "y", "Lower", "ymin", "Upper", "ymax", "OK", "remove", "Median", "from", "replacements", "as", "it", "wasn", "t", "be", "use", "y", "ymin", "ymax", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Upgrading", "plyr", "to", "NUMBER", "fix", "the", "problem", "I", "should", "have", "checked", "the", "plyr", "issue", "tracker", "as", "it", "seems", "the", "problem", "was", "fix", "between", "plyr", "NUMBER", "the", "version", "I", "was", "run", "and", "NUMBER", "I", "had", "already", "tried", "upgrading", "ggplot", "NUMBER", "but", "it", "didn", "t", "solve", "the", "problem", "maybe", "the", "dependencies", "need", "to", "be", "update", "library", "ggplot", "NUMBER", "b", "TAG", "library", "ggplot", "NUMBER", "qplot", "NUMBER", "NUMBER", "Error", "in", "range", "NUMBER", "object", "of", "type", "builtin", "be", "not", "subsettable", "I", "think", "line", "NUMBER", "in", "scale", "NUMBER", "r", "in", "ggplot", "NUMBER", "should", "read", "breaks", "TAG", "qplot", "cut", "data", "diamonds", "geom", "bar", "fill", "color", "TAG", "Bars", "be", "stacked", "from", "D", "bottom", "to", "J", "top", "but", "the", "legend", "be", "stacked", "from", "J", "bottom", "to", "D", "top", "NUMBER", "As", "point", "out", "in", "the", "group", "this", "appears", "to", "only", "affect", "stacked", "barplots", "and", "can", "be", "fix", "by", "setting", "the", "breaks", "manually", "NUMBER", "I", "be", "suggesting", "that", "the", "default", "legend", "order", "for", "a", "stacked", "barplot", "be", "a", "reversal", "of", "the", "stack", "order", "NUMBER", "TAG", "qplot", "cut", "data", "diamonds", "geom", "bar", "fill", "color", "scale_fill_discrete", "breaks", "rev", "levels", "diamonds", "color", "TAG", "p", "TAG", "p", "geom_boxplot", "Error", "in", "NUMBER", "ncol", "strip_widths", "argument", "of", "length", "NUMBER", "p", "TAG", "p", "facet_grid", "NUMBER", "cut", "Error", "in", "NUMBER", "ncol", "strip_widths", "argument", "of", "length", "NUMBER", "Etc", "NUMBER", "Seems", "to", "track", "back", "to", "line", "NUMBER", "in", "facet", "grid", "NUMBER", "r", "mpg", "NUMBER", "TAG", "The", "two", "hinges", "be", "version", "of", "the", "first", "and", "third", "quartile", "i", "NUMBER", "e", "NUMBER", "close", "to", "quantile", "x", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "The", "hinges", "equal", "the", "quartiles", "for", "odd", "n", "where", "n", "TAG", "pr", "pr", "NUMBER", "cs", "n", "NUMBER", "pr", "NUMBER", "cs", "n", "NUMBER", "v", "NUMBER", "x", "NUMBER", "n", "NUMBER", "v", "NUMBER", "x", "NUMBER", "n", "NUMBER", "stats", "i", "v", "NUMBER", "pr", "pr", "NUMBER", "pr", "NUMBER", "pr", "NUMBER", "v", "NUMBER", "v", "NUMBER", "So", "for", "unweighted", "boxplots", "you", "could", "just", "use", "fivenum", "and", "for", "weighted", "boxplots", "you", "could", "use", "this", "code", "assuming", "no", "licensing", "issue", "NUMBER", "This", "assumes", "that", "this", "code", "do", "what", "you", "want", "I", "don", "t", "what", "s", "supposed", "to", "be", "correct", "for", "a", "weighted", "boxplot", "so", "I", "m", "not", "able", "to", "make", "that", "evaluation", "NUMBER", "I", "ve", "issue", "a", "pull", "request", "for", "a", "fix", "of", "the", "inverted", "whiskers", "NUMBER", "The", "other", "problem", "be", "still", "present", "NUMBER", "After", "some", "more", "investigation", "I", "don", "t", "think", "it", "s", "possible", "to", "make", "a", "function", "based", "on", "weighted", "quartiles", "give", "exactly", "the", "same", "output", "as", "fivenum", "or", "by", "extension", "boxplot", "NUMBER", "According", "to", "the", "docs", "for", "boxplot", "NUMBER", "ats", "The", "hinges", "equal", "the", "quartiles", "for", "odd", "n", "where", "n", "TAG", "We", "support", "a", "number", "of", "synonyms", "fix", "xxx", "fix", "xxx", "fix", "xxx", "close", "xxx", "close", "xxx", "close", "xxx", "If", "you", "want", "to", "refer", "to", "an", "issue", "without", "closing", "it", "you", "can", "also", "use", "refs", "xxx", "in", "your", "commit", "message", "as", "well", "NUMBER", "Github", "will", "automatically", "make", "the", "issue", "number", "a", "hyperlink", "NUMBER", "example", "LINK", "NUMBER", "Source", "LINK", "issue", "NUMBER", "NUMBER", "the", "next", "generation", "briandk", "Thanks", "a", "lot", "Consider", "this", "use", "case", "where", "I", "plot", "a", "series", "over", "rectangles", "which", "represent", "a", "binary", "response", "d", "TAG", "two", "extra", "factor", "levels", "try", "to", "specify", "the", "location", "completely", "ggplot", "d", "geom_point", "aes", "x", "y", "facet_grid", "a", "NUMBER", "geom_vline", "aes", "xintercept", "x", "data", "data", "NUMBER", "frame", "a", "b", "x", "NUMBER", "still", "not", "work", "faceting", "direction", "do", "not", "mater", "ggplot", "d", "geom_point", "aes", "x", "y", "facet_grid", "NUMBER", "a", "geom_vline", "aes", "xintercept", "x", "data", "data", "NUMBER", "frame", "a", "b", "x", "NUMBER", "still", "not", "work", "geom_hline", "be", "affected", "similarly", "ggplot", "d", "geom_point", "aes", "x", "y", "facet_grid", "NUMBER", "a", "geom_hline", "yintercept", "NUMBER", "ggplot", "d", "geom_point", "aes", "x", "y", "facet_grid", "a", "NUMBER", "geom_hline", "yintercept", "NUMBER", "Could", "you", "please", "elucidate", "what", "you", "mean", "by", "not", "work", "I", "get", "extra", "factor", "levels", "NUMBER", "See", "LINK", "_vline", "NUMBER", "pdf", "for", "all", "the", "plots", "above", "NUMBER", "Oh", "I", "see", "it", "now", "NUMBER", "Thanks", "for", "the", "bug", "report", "Let", "s", "consider", "this", "data", "d", "TAG", "TAG", "try_require", "function", "package", "available", "TAG", "NUMBER", "stop", "paste", "package", "collapse", "package", "required", "for", "this", "functionality", "NUMBER", "Please", "install", "and", "try", "again", "NUMBER", "call", "NUMBER", "FALSE", "msamp", "TAG", "m", "TAG", "m", "stat_quantile", "Error", "in", "do", "NUMBER", "call", "layer", "list", "mapping", "mapping", "data", "data", "geom", "geom", "object", "rq", "not", "find", "traceback", "NUMBER", "do", "NUMBER", "call", "layer", "list", "mapping", "mapping", "data", "data", "geom", "geom", "stat", "NUMBER", "position", "position", "NUMBER", "NUMBER", "get", "new", "env", "StatQuantile", "inherits", "TRUE", "StatQuantile", "NUMBER", "NUMBER", "StatQuantile", "new", "mapping", "mapping", "data", "data", "geom", "geom", "position", "position", "quantiles", "quantiles", "formula", "formula", "method", "method", "na", "NUMBER", "rm", "na", "NUMBER", "rm", "NUMBER", "NUMBER", "stat_quantile", "TAG", "TAG", "That", "s", "just", "the", "can", "t", "find", "package", "error", "so", "it", "s", "not", "really", "helpful", "NUMBER", "myd", "data", "NUMBER", "frame", "myvar", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "myvarb", "c", "NUMBER", "NUMBER", "base", "ggplot", "myd", "aes", "myvarb", "myvar", "geom_point", "geom_abline", "intercept", "NUMBER", "slope", "NUMBER", "base", "scale_y_log", "NUMBER", "I", "m", "not", "even", "really", "sure", "what", "it", "should", "display", "i", "NUMBER", "e", "NUMBER", "should", "it", "display", "a", "curved", "line", "The", "slope", "parameter", "doesn", "t", "really", "have", "a", "lot", "of", "meaning", "in", "log", "coordinates", "NUMBER", "Similarly", "the", "default", "intercept", "of", "NUMBER", "be", "not", "very", "useful", "NUMBER", "Could", "slope", "not", "be", "interpreted", "as", "x", "slope", "thus", "resulting", "in", "the", "curved", "line", "y", "log", "slope", "x", "Although", "in", "principle", "it", "should", "be", "fairly", "straightforward", "NUMBER", "Hi", "Hadley", "I", "was", "wondering", "if", "you", "could", "offer", "any", "work", "arounds", "for", "this", "issue", "NUMBER", "I", "find", "myself", "multiple", "times", "in", "this", "situation", "NUMBER", "thanks", "eli", "Currently", "no", "work", "around", "sorry", "it", "requires", "a", "rather", "large", "rewrite", "of", "the", "layout", "system", "NUMBER", "ggplot", "mtcars", "aes", "mpg", "wt", "geom_point", "geom_rect", "xmin", "NUMBER", "xmax", "NUMBER", "ymin", "NUMBER", "ymax", "NUMBER", "vs", "NUMBER", "ggplot", "geom_point", "aes", "mpg", "wt", "data", "mtcars", "geom_rect", "xmin", "NUMBER", "xmax", "NUMBER", "ymin", "NUMBER", "ymax", "NUMBER", "Same", "underlying", "issue", "as", "NUMBER", "ggplot", "doesn", "t", "know", "how", "to", "work", "out", "whether", "or", "not", "there", "s", "enough", "data", "in", "the", "layer", "for", "it", "to", "display", "successfully", "NUMBER", "For", "example", "qplot", "mpg", "wt", "data", "mtcars", "geom_point", "data", "data", "NUMBER", "frame", "colour", "red", "should", "display", "black", "points", "NUMBER", "This", "can", "occur", "when", "subsetting", "and", "be", "annoying", "NUMBER", "bump", "I", "would", "love", "to", "have", "this", "NUMBER", "should", "I", "try", "to", "dig", "in", "and", "write", "it", "myself", "or", "be", "it", "likely", "to", "be", "tricky", "I", "m", "trying", "to", "implent", "this", "NUMBER", "However", "I", "cannot", "figure", "out", "why", "it", "doesn", "t", "render", "the", "parsed", "labels", "instead", "I", "get", "expression", "NUMBER", "NUMBER", "Here", "s", "my", "modify", "code", "facet_strips", "NUMBER", "wrap", "function", "facet", "panel", "theme", "labeller", "match", "NUMBER", "fun", "facet", "labeller", "labels_df", "panel", "layout", "names", "facet", "facets", "labels_df", "llply", "labels_df", "function", "df", "labeller", "names", "df", "df", "labels", "apply", "labels_df", "NUMBER", "paste", "collapse", "list", "t", "llply", "labels", "ggstrip", "theme", "theme", "What", "be", "I", "miss", "Is", "there", "a", "simple", "example", "Because", "setting", "it", "be", "confusing", "NUMBER", "Should", "remove", "all", "scales", "that", "be", "just", "variants", "on", "scale", "continuous", "with", "trans", "set", "NUMBER", "scale_", "x", "y", "_", "should", "be", "build", "by", "the", "accessor", "builders", "NUMBER", "In", "this", "example", "points", "and", "lines", "be", "use", "for", "both", "values", "NUMBER", "df", "NUMBER", "actual", "data", "NUMBER", "frame", "x", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "df", "NUMBER", "approx", "data", "NUMBER", "frame", "x", "NUMBER", "NUMBER", "y", "NUMBER", "NUMBER", "rnorm", "NUMBER", "sd", "NUMBER", "ggplot", "df", "NUMBER", "actual", "aes", "x", "y", "geom_point", "aes", "colour", "Actual", "geom_line", "aes", "colour", "Approximate", "data", "df", "NUMBER", "approx", "Another", "example", "time", "NUMBER", "NUMBER", "d", "data", "NUMBER", "frame", "t", "rep", "time", "NUMBER", "type", "rep", "c", "sin", "cos", "each", "NUMBER", "value", "c", "sin", "time", "NUMBER", "pi", "NUMBER", "cos", "time", "NUMBER", "pi", "NUMBER", "ggplot", "d", "aes", "t", "value", "colour", "type", "geom_line", "geom_line", "subset", "NUMBER", "type", "sin", "linetype", "NUMBER", "size", "NUMBER", "And", "possibly", "this", "one", "too", "set", "NUMBER", "seed", "NUMBER", "x", "paste", "a", "NUMBER", "NUMBER", "sep", "y", "gl", "NUMBER", "NUMBER", "labels", "c", "Control", "Treat", "z", "runif", "NUMBER", "NUMBER", "df", "data", "NUMBER", "frame", "x", "y", "z", "ggplot", "df", "aes", "z", "x", "color", "y", "geom_point", "last_plot", "geom_vline", "xintercept", "NUMBER", "And", "one", "more", "dat", "structure", "list", "x", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "y", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Names", "c", "x", "y", "row", "NUMBER", "names", "c", "NA", "NUMBER", "L", "class", "data", "NUMBER", "frame", "ggplot", "dat", "aes", "x", "y", "geom_point", "aes", "colour", "measurement", "stat_smooth", "aes", "colour", "smooth", "method", "lm", "geom_hline", "aes", "colour", "mean", "yintercept", "NUMBER", "Maybe", "I", "will", "rewrite", "the", "legend", "layer", "scale", "mapping", "NUMBER", "see", "also", "LINK", "issuecomment", "NUMBER", "So", "this", "be", "in", "my", "todo", "list", "NUMBER", "qplot", "mpg", "wt", "data", "mtcars", "facet_grid", "vs", "be", "margins", "grand_col", "This", "will", "probably", "have", "to", "wait", "until", "I", "ve", "reworked", "the", "data", "structures", "for", "facetting", "NUMBER", "reshape", "stamp", "currently", "doesn", "t", "give", "enough", "control", "or", "maybe", "be", "buggy", "be", "add", "all", "margins", "when", "add", "NUMBER", "miss", "T", "Putting", "a", "breadcrumb", "here", "in", "case", "anyone", "else", "be", "looking", "at", "for", "this", "NUMBER", "Format", "be", "different", "than", "listed", "in", "the", "initial", "issue", "NUMBER", "Working", "format", "be", "r", "qplot", "mpg", "wt", "data", "mtcars", "facet_grid", "vs", "be", "margins", "be", "margins", "can", "be", "a", "character", "vector", "of", "variable", "names", "across", "which", "margins", "should", "be", "made", "NUMBER"], "text_count": [0, 22242, 4399, 1706, 1069, 58, 1250, 4, 145, 2684, 3633, 5812, 3732, 2115, 2696, 935, 0, 0, 0, 0, 6938, 2453, 1459, 841, 1793, 1307, 0, 0, 0, 0, 13329, 7972, 5691, 150, 3340, 893, 0, 0, 0, 0, 18169, 103, 8872, 8843, 4838, 0, 0, 0, 0, 0, 4637, 1905, 1971, 1267, 1814, 765, 1851, 0, 0, 0, 14190, 1564, 10636, 956, 0, 0, 0, 0, 0, 0, 9534, 1257, 6138, 2566, 1783, 0, 0, 0, 0, 0, 17462, 9408, 1305, 6174, 631, 635, 0, 0, 0, 0, 833, 4676, 485, 0, 0, 0, 0, 0, 0, 0, 13686, 2338, 8047, 3319, 0, 0, 0, 0, 0, 0, 26979, 51709, 604, 1979, 604, 825, 0, 0, 0, 0, 73218, 221, 56233, 657, 11558, 14838]}]