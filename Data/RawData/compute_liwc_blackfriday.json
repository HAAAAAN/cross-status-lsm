[{"repo": "blackfriday", "type": "elite", "title": "", "number of text": 35, "text": "  Agreed. I'm reluctant merging this in, since we want to keep alternative outputs separate. @hanguofeng, it would be great if you could set up a separate project for TWiki output. If you do that, please submit a PR with a link in README.\n  @JeffPaine, you might need to `$ go get -u github.com/russross/blackfriday`. Please let us know if it helps.\n  Thanks!\n  Yeah, testing every element is silly, we'll end up having the same list of elements in code and in tests. What we really need is some combinatorial testing of sanitizer with other flags, but that's a whole different story.\n  Nice! Glad to see that this approach is simpler than I feared it would be. I'll examine it more closely in a few days and then merge.\n\nThanks!\n  You're doing everything right, except that you can simplify reading down to this:\n\n``` go\ndata, err := ioutil.ReadFile(\"a.md\")\npage.Content = markdownRender(data)\n```\n\nSo it seems that you have a silly bug somewhere. Try tracing the values in the debugger or inserting print statements.\n  You can also build Latex output to PDF outside of blackfriday.\n\nAs far as I know, nobody has announced to be working on PDF output, so if you're willing to, I will be glad to merge.\n  Thanks for reporting it. I copied it to #11 and will close this one.\n  Thanks a lot! An embarassing omission indeed... But I wonder why didn't the tests catch it if it scratches all table elements, including the ones generated by blackfriday itself.\n\n(I'm leaving this PR open as a place for discussion for now)\n I don't see why the first option could not do as good job avoiding XSS as possible, without providing a strong guarantee. After all, markdown supports inline html, so skipping html is not an option in general case.\n\nAs for the second option, we should stop talking and improve HTML_SKIP_HTML to give the strong guarantee. I am \"about to give it a shot\" for a few months now, but haven't started yet, so if somebody is faster at it, please do.\n\nI'll go look at the tests for this case now and will merge later.\n OK, as suspected, the test for table extension does not specify any other optional flags. This clenches my curiosity for this case, but I'll try switching all tests to use the options from MarkdownCommon(), this way the tests will exercise more realistic scenarios.\n\nThanks, @willnix!\n  I don't think you can do that straightforwardly with existing API. I would try rendering markdown to html and then parsing it back to structured pieces with https://godoc.org/code.google.com/p/go.net/html or select particular pieces with https://godoc.org/code.google.com/p/go-html-transform/css/selector. And when you have those pieces of content, feed them to template.\n  Thanks!\n  Awesome, I'll try to have a look at it tomorrow.\n  What is the infinite loop detection for in commit 0c62e28? It might be just me being slow on Monday evening, but it's not clear from the context of these commits.\n Yes, please revert 0c62e28 and I will then merge. Let's make `block()` more robust as a separate attempt, it's complicated enough as it is.\n Thanks!\n  Merged.\n  Nice work!\n    @lancee, can you resubmit this one, please? It no longer applies as it is.\n Apologize! Missed the notification.\n\n@bertzzie Please do as you wish, thanks~\n  @carbocation, merged, you can switch to the upstream now. And please give the code a hell of a test and get back if you find something.\n  Thanks!\n  Much appreciated!\n  @Timmmm, you seem to be knowledgeable on these matters, can you please take a look at #50?\n Yeah, I know it's not what you recommended, because it sanitizes output, not input. I'd love to sanitize input instead, but couldn't come up with a way to do that from your half-sentence hint. Can you elaborate or point to some code that does what you had in mind?\n Hmm, I don't understand how can this allow having inline html at all. Replacing angle brackets with lt/gt entities will render inline html as readable html in the output.\n s/convenience/functionality ;-)\n\nOK, now I see what you mean and it turns out we're talking about slightly different things. I'm trying to sanitize the output (or input, if possible) _while keeping_ inline html functionality and you propose dropping it. Which makes perfect sense, but I will leave the decision about the defaults to @russross . I'll also update the readme as you suggested, it should certainly not mislead.\n A particular test case reported in #65, copying it here to have all related stuff in one place:\n\n```\n[FUCKLINK][1]\n\n[1]: javascript:alert(window.document.cookie);\n```\n It will still not be completely safe due to different tolerance to deviations from the standard in different browsers. I.e. it will be possible for the attacker to construct a peculiar inline html in a way that will not be recognized as html at all by go.net/html, but will be groked by a real browser and be malicious.\n\nHaving said that, I would certainly be interested in looking at the code, enough talking :-)\n  I've re-written the smart quote logic to handle this and other cases.  It only examines the characters immediately before and immediately after the quote, so some cases are ambiguous, but the one you identified seems pretty clear.\n\nThanks for the bug report!\n  Two of the tests fail.  I strip leading whitespace off the beginning of list items.  The original markdown does this as well, but upskirt does not.\n There was a bug in the expandTab function that caused the test failure you noted, but I checked in a fix for it.\n  I've never used Textile; it appears to similar to markdown but with an incompatible syntax.  How do you envision adding it?\n\nAfter a quick scan of the Wikipedia article, it appears that the parsing functions would mostly be different due to differing syntax, so there may not be a ton of room for code sharing, but most of the rendering backend(s) could be pretty much the same.  We could end up with an API where you select your backend and your parser:\n\n```\n// for either\nrenderer := blackfriday.HtmlRenderer(html_flags)\n\n// for markdown\noutput := blackfriday.Markdown(input, renderer, markdown_options)\n\n// for textile\noutput := blackfriday.Textile(input, renderer, textile_options)\n```\n\nIs that similar to what you had in mind?\n\nI'd love to collaborate on it with you; as you pointed out, there isn't much use in duplicating effort.  I'm currently focusing on writing some unit tests, cleaning up (and in some cases rewriting) the most confusing parts, and optimizing.  If you'd like to start working on Textile support, I'd be happy to merge it and make it even more useful for people.\n", "text_all_count": 1224, "text_word_token": ["Agreed", "NUMBER", "I", "m", "reluctant", "merge", "this", "in", "since", "we", "want", "to", "keep", "alternative", "outputs", "separate", "NUMBER", "hanguofeng", "it", "would", "be", "great", "if", "you", "could", "set", "up", "a", "separate", "project", "for", "TWiki", "output", "NUMBER", "If", "you", "do", "that", "please", "submit", "a", "PR", "with", "a", "link", "in", "README", "NUMBER", "JeffPaine", "you", "might", "need", "to", "go", "get", "u", "github", "NUMBER", "com", "russross", "blackfriday", "NUMBER", "Please", "let", "us", "know", "if", "it", "helps", "NUMBER", "Thanks", "Yeah", "test", "every", "element", "be", "silly", "we", "ll", "end", "up", "having", "the", "same", "list", "of", "elements", "in", "code", "and", "in", "test", "NUMBER", "What", "we", "really", "need", "be", "some", "combinatorial", "test", "of", "sanitizer", "with", "other", "flags", "but", "that", "s", "a", "whole", "different", "story", "NUMBER", "Nice", "Glad", "to", "see", "that", "this", "approach", "be", "simpler", "than", "I", "feared", "it", "would", "be", "NUMBER", "I", "ll", "examine", "it", "more", "closely", "in", "a", "few", "days", "and", "then", "merge", "NUMBER", "Thanks", "You", "re", "doing", "everything", "right", "except", "that", "you", "can", "simplify", "reading", "down", "to", "this", "go", "data", "err", "ioutil", "NUMBER", "ReadFile", "a", "NUMBER", "md", "page", "NUMBER", "Content", "markdownRender", "data", "So", "it", "seems", "that", "you", "have", "a", "silly", "bug", "somewhere", "NUMBER", "Try", "tracing", "the", "values", "in", "the", "debugger", "or", "inserting", "print", "statements", "NUMBER", "You", "can", "also", "build", "Latex", "output", "to", "PDF", "outside", "of", "blackfriday", "NUMBER", "As", "far", "as", "I", "know", "nobody", "has", "announced", "to", "be", "work", "on", "PDF", "output", "so", "if", "you", "re", "willing", "to", "I", "will", "be", "glad", "to", "merge", "NUMBER", "Thanks", "for", "report", "it", "NUMBER", "I", "copied", "it", "to", "NUMBER", "and", "will", "close", "this", "one", "NUMBER", "Thanks", "a", "lot", "An", "embarassing", "omission", "indeed", "NUMBER", "But", "I", "wonder", "why", "didn", "t", "the", "test", "catch", "it", "if", "it", "scratches", "all", "table", "elements", "including", "the", "ones", "generate", "by", "blackfriday", "itself", "NUMBER", "I", "m", "leaving", "this", "PR", "open", "as", "a", "place", "for", "discussion", "for", "now", "I", "don", "t", "see", "why", "the", "first", "option", "could", "not", "do", "as", "good", "job", "avoiding", "XSS", "as", "possible", "without", "provide", "a", "strong", "guarantee", "NUMBER", "After", "all", "markdown", "support", "inline", "html", "so", "skipping", "html", "be", "not", "an", "option", "in", "general", "case", "NUMBER", "As", "for", "the", "second", "option", "we", "should", "stop", "talking", "and", "improve", "HTML_SKIP_HTML", "to", "give", "the", "strong", "guarantee", "NUMBER", "I", "be", "about", "to", "give", "it", "a", "shot", "for", "a", "few", "months", "now", "but", "haven", "t", "start", "yet", "so", "if", "somebody", "be", "faster", "at", "it", "please", "do", "NUMBER", "I", "ll", "go", "look", "at", "the", "test", "for", "this", "case", "now", "and", "will", "merge", "later", "NUMBER", "OK", "as", "suspected", "the", "test", "for", "table", "extension", "do", "not", "specify", "any", "other", "optional", "flags", "NUMBER", "This", "clenches", "my", "curiosity", "for", "this", "case", "but", "I", "ll", "try", "switching", "all", "test", "to", "use", "the", "options", "from", "MarkdownCommon", "this", "way", "the", "test", "will", "exercise", "more", "realistic", "scenarios", "NUMBER", "Thanks", "willnix", "I", "don", "t", "think", "you", "can", "do", "that", "straightforwardly", "with", "exist", "API", "NUMBER", "I", "would", "try", "rendering", "markdown", "to", "html", "and", "then", "parsing", "it", "back", "to", "structured", "pieces", "with", "LINK", "or", "select", "particular", "pieces", "with", "LINK", "html", "transform", "css", "selector", "NUMBER", "And", "when", "you", "have", "those", "pieces", "of", "content", "feed", "them", "to", "template", "NUMBER", "Thanks", "Awesome", "I", "ll", "try", "to", "have", "a", "look", "at", "it", "tomorrow", "NUMBER", "What", "be", "the", "infinite", "loop", "detection", "for", "in", "commit", "NUMBER", "c", "NUMBER", "e", "NUMBER", "It", "might", "be", "just", "me", "be", "slow", "on", "Monday", "evening", "but", "it", "s", "not", "clear", "from", "the", "context", "of", "these", "commit", "NUMBER", "Yes", "please", "revert", "NUMBER", "c", "NUMBER", "e", "NUMBER", "and", "I", "will", "then", "merge", "NUMBER", "Let", "s", "make", "block", "more", "robust", "as", "a", "separate", "attempt", "it", "s", "complicated", "enough", "as", "it", "be", "NUMBER", "Thanks", "Merged", "NUMBER", "Nice", "work", "lancee", "can", "you", "resubmit", "this", "one", "please", "It", "no", "longer", "applies", "as", "it", "be", "NUMBER", "Apologize", "Missed", "the", "notification", "NUMBER", "bertzzie", "Please", "do", "as", "you", "wish", "thanks", "carbocation", "merge", "you", "can", "switch", "to", "the", "upstream", "now", "NUMBER", "And", "please", "give", "the", "code", "a", "hell", "of", "a", "test", "and", "get", "back", "if", "you", "find", "something", "NUMBER", "Thanks", "Much", "appreciated", "Timmmm", "you", "seem", "to", "be", "knowledgeable", "on", "these", "matters", "can", "you", "please", "take", "a", "look", "at", "NUMBER", "Yeah", "I", "know", "it", "s", "not", "what", "you", "recommended", "because", "it", "sanitizes", "output", "not", "input", "NUMBER", "I", "d", "love", "to", "sanitize", "input", "instead", "but", "couldn", "t", "come", "up", "with", "a", "way", "to", "do", "that", "from", "your", "half", "sentence", "hint", "NUMBER", "Can", "you", "elaborate", "or", "point", "to", "some", "code", "that", "do", "what", "you", "had", "in", "mind", "Hmm", "I", "don", "t", "understand", "how", "can", "this", "allow", "having", "inline", "html", "at", "all", "NUMBER", "Replacing", "angle", "brackets", "with", "lt", "gt", "entities", "will", "render", "inline", "html", "as", "readable", "html", "in", "the", "output", "NUMBER", "s", "convenience", "functionality", "OK", "now", "I", "see", "what", "you", "mean", "and", "it", "turns", "out", "we", "re", "talking", "about", "slightly", "different", "things", "NUMBER", "I", "m", "trying", "to", "sanitize", "the", "output", "or", "input", "if", "possible", "_while", "keeping_", "inline", "html", "functionality", "and", "you", "propose", "dropping", "it", "NUMBER", "Which", "makes", "perfect", "sense", "but", "I", "will", "leave", "the", "decision", "about", "the", "defaults", "to", "russross", "NUMBER", "I", "ll", "also", "update", "the", "readme", "as", "you", "suggested", "it", "should", "certainly", "not", "mislead", "NUMBER", "A", "particular", "test", "case", "report", "in", "NUMBER", "copying", "it", "here", "to", "have", "all", "relate", "stuff", "in", "one", "place", "FUCKLINK", "NUMBER", "NUMBER", "javascript", "alert", "window", "NUMBER", "document", "NUMBER", "cookie", "It", "will", "still", "not", "be", "completely", "safe", "due", "to", "different", "tolerance", "to", "deviations", "from", "the", "standard", "in", "different", "browsers", "NUMBER", "I", "NUMBER", "e", "NUMBER", "it", "will", "be", "possible", "for", "the", "attacker", "to", "construct", "a", "peculiar", "inline", "html", "in", "a", "way", "that", "will", "not", "be", "recognized", "as", "html", "at", "all", "by", "go", "NUMBER", "net", "html", "but", "will", "be", "groked", "by", "a", "real", "browser", "and", "be", "malicious", "NUMBER", "Having", "said", "that", "I", "would", "certainly", "be", "interested", "in", "looking", "at", "the", "code", "enough", "talking", "I", "ve", "re", "write", "the", "smart", "quote", "logic", "to", "handle", "this", "and", "other", "cases", "NUMBER", "It", "only", "examines", "the", "characters", "immediately", "before", "and", "immediately", "after", "the", "quote", "so", "some", "cases", "be", "ambiguous", "but", "the", "one", "you", "identified", "seems", "pretty", "clear", "NUMBER", "Thanks", "for", "the", "bug", "report", "Two", "of", "the", "test", "fail", "NUMBER", "I", "strip", "leading", "whitespace", "off", "the", "beginning", "of", "list", "items", "NUMBER", "The", "original", "markdown", "do", "this", "as", "well", "but", "upskirt", "do", "not", "NUMBER", "There", "was", "a", "bug", "in", "the", "expandTab", "function", "that", "cause", "the", "test", "failure", "you", "noted", "but", "I", "checked", "in", "a", "fix", "for", "it", "NUMBER", "I", "ve", "never", "use", "Textile", "it", "appears", "to", "similar", "to", "markdown", "but", "with", "an", "incompatible", "syntax", "NUMBER", "How", "do", "you", "envision", "add", "it", "After", "a", "quick", "scan", "of", "the", "Wikipedia", "article", "it", "appears", "that", "the", "parsing", "function", "would", "mostly", "be", "different", "due", "to", "differing", "syntax", "so", "there", "may", "not", "be", "a", "ton", "of", "room", "for", "code", "sharing", "but", "most", "of", "the", "rendering", "backend", "s", "could", "be", "pretty", "much", "the", "same", "NUMBER", "We", "could", "end", "up", "with", "an", "API", "where", "you", "select", "your", "backend", "and", "your", "parser", "for", "either", "renderer", "blackfriday", "NUMBER", "HtmlRenderer", "html_flags", "for", "markdown", "output", "blackfriday", "NUMBER", "Markdown", "input", "renderer", "markdown_options", "for", "textile", "output", "blackfriday", "NUMBER", "Textile", "input", "renderer", "textile_options", "Is", "that", "similar", "to", "what", "you", "had", "in", "mind", "I", "d", "love", "to", "collaborate", "on", "it", "with", "you", "as", "you", "point", "out", "there", "isn", "t", "much", "use", "in", "duplicating", "effort", "NUMBER", "I", "m", "currently", "focusing", "on", "write", "some", "unit", "test", "cleaning", "up", "and", "in", "some", "cases", "rewriting", "the", "most", "confusing", "parts", "and", "optimizing", "NUMBER", "If", "you", "d", "like", "to", "start", "work", "on", "Textile", "support", "I", "d", "be", "happy", "to", "merge", "it", "and", "make", "it", "even", "more", "useful", "for", "people", "NUMBER"], "text_count": [0, 550, 149, 72, 31, 6, 63, 0, 1, 76, 67, 149, 82, 44, 68, 21, 0, 0, 0, 0, 152, 69, 41, 16, 33, 31, 0, 0, 0, 0, 285, 184, 100, 9, 46, 16, 0, 0, 0, 0, 336, 2, 138, 128, 80, 0, 0, 0, 0, 0, 107, 35, 30, 22, 52, 23, 53, 0, 0, 0, 240, 15, 188, 15, 0, 0, 0, 0, 0, 0, 173, 15, 126, 55, 21, 0, 0, 0, 0, 0, 306, 163, 20, 110, 12, 14, 0, 0, 0, 0, 7, 111, 19, 0, 0, 0, 0, 0, 0, 0, 266, 42, 165, 63, 0, 0, 0, 0, 0, 0, 470, 983, 28, 61, 15, 8, 0, 0, 0, 0, 1275, 4, 982, 21, 203, 248]}, {"repo": "blackfriday", "type": "nonelite", "title": "", "number of text": 67, "text": "  Add TWiki markup support by TWikiRenderer\n Relevant: https://github.com/russross/blackfriday/issues/80#issuecomment-43113206.\n\nYou may want to keep this Renderer in a separate repo, and @russross can link to it in the [Non-HTML output](https://github.com/russross/blackfriday#non-html-output) section of README.md.\n  As near as I can tell, `blackfriday.MarkdownCommon()` renders table elements (if present) and then strips them via the `HTML_SANITIZE_OUTPUT` `HtmlRenderer` flag. Possibly related to #64.\n### Test Case\n\n``` go\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/russross/blackfriday\"\n)\n\nfunc main() {\n    input := `Name    | Age\n--------|------\nBob     | 27\nAlice   | 23\n`\n    output := blackfriday.MarkdownCommon([]byte(input))\n    fmt.Println(string(output))\n}\n```\n#### Expected Output\n\n``` html\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Age</th>\n</tr>\n</thead>\n\n<tbody>\n<tr>\n<td>Bob</td>\n<td>27</td>\n</tr>\n\n<tr>\n<td>Alice</td>\n<td>23</td>\n</tr>\n</tbody>\n</table>\n```\n#### Actual Output\n\n``` html\n\n\n\nName\nAge\n\n\n\n\n\nBob\n27\n\n\n\nAlice\n23\n```\n\nI noticed that if you comment out `htmlFlags |= HTML_SANITIZE_OUTPUT` on [line 239 in markdown.go](https://github.com/russross/blackfriday/blob/master/markdown.go#L239), you get the expected result.\n What version of blackfriday do you have?\n\nI just ran your test case program with the current blackfriday commit bb14a3f92abb117a2e4bba11d3a8f9efa1cd0eeb, and I got the expected output:\n\n``` html\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Age</th>\n</tr>\n</thead>\n\n<tbody>\n<tr>\n<td>Bob</td>\n<td>27</td>\n</tr>\n\n<tr>\n<td>Alice</td>\n<td>23</td>\n</tr>\n</tbody>\n</table>\n```\n Very sorry, I was using an outdated version of blackfriday! Looks like I had pulled down a version prior to the fixes from #64 and hence saw the issues I was having above. Sorry again for wasting folks' time :smile:!\n  Just thought it would be nice for readers to be able to scan for and use :)\n You're most welcome!\n  ... some order.\n Let me know whether you want more tests for the various elements, it seemed a bit silly to add a test for each element to me, but wouldn't be hard to add some more.\n  Use an HTML5 compliant parser that interprets HTML as a browser would to parse\nthe Markdown result and then sanitize based on the result.\nEscape unrecognized and disallowed HTML in the result.\nCurrently works with a hard coded whitelist of safe HTML tags and attributes.\n This fixes issue #11.\n  I have a struct like this:\n\n``` go\ntype Page struct {\n  Content  string\n}\n```\n\nthen I read a markdown file and assign to a variable:\n\n``` go\ndata, err := ioutil.ReadFile(\"a.md\")\nlines = string(data)\npage.Content = markdownRender([]byte(lines))\n```\n\nthe markdown file like this:\n\n```\n##Hello World\n\n###Holo Go\n```\n\nand then I put it into markdown render function and return a string value:\n\n``` go\nfunc markdownRender(content []byte) string {\n  htmlFlags := 0\n  htmlFlags |= blackfriday.HTML_USE_SMARTYPANTS\n  htmlFlags |= blackfriday.HTML_SMARTYPANTS_FRACTIONS\n\n  renderer := blackfriday.HtmlRenderer(htmlFlags, \"\", \"\")\n\n  extensions := 0\n  extensions |= blackfriday.EXTENSION_NO_INTRA_EMPHASIS\n  extensions |= blackfriday.EXTENSION_TABLES\n  extensions |= blackfriday.EXTENSION_FENCED_CODE\n  extensions |= blackfriday.EXTENSION_AUTOLINK\n  extensions |= blackfriday.EXTENSION_STRIKETHROUGH\n  extensions |= blackfriday.EXTENSION_SPACE_HEADERS\n\n  return string(blackfriday.Markdown(content, renderer, extensions))\n}\n```\n\nand finally I call the page.Content in a html template and generate a static html:\n\n```\n{{.Content}}\n```\n\nbut in the generated html it show in the browser(I try it in the chrome and safari) like this(not the source code,It just show in the page):\n\n```\n<p>##Hello World ###Holo Go </p>\n```\n\nbut I want it like this\n\nHello World\n\nHolo Go\n\nSo,how can i do this\n @rtfb Yes,I find my markdown input is not right,I lost the whitespace separating the `##` from the test, thanks for your answer:)\n  Any thoughts on supporting PDF output as well?\n [HTML](http://godoc.org/github.com/russross/blackfriday#Html), [Latex](http://godoc.org/github.com/russross/blackfriday#Latex) support are done by implementing the [`blackfriday.Renderer` interface](http://godoc.org/github.com/russross/blackfriday#Renderer).\n\nYou or anyone else could add PDF support by implementing that interface.\n\nFor example, I've done pretty Markdown rendering by implementing the `blackfriday.Renderer` interface [here](https://github.com/shurcooL/markdownfmt/blob/734c65018e9bbb918c93aa60e01360aa4a448800/markdown/main.go#L16-L255).\n Oh, that's quite helpful, thanks! I'll try that. I'm just starting with Go, so I wasn't quite sure if this was something that was being worked on already.\n Thanks for the tip! I've ended up just keeping the markdown and using pandoc externally.\n\nAnyway though, I'd love to try my hand at it. Can't promise anything in terms of quality or timeliness, but definitely worth a shot, at least for a learning exercise.\n  ```\n    [FUCKLINK][1]\n\n    [1]: javascript:alert(window.document.cookie);\n```\n\nYour markdown link to check if it is not strictly a hypertext link, the bug causing js script can be executed.\n0.0\n  Fixing:\nhttps://github.com/russross/blackfriday/commit/55cd82008e9b35b9a03a80e06d5a4c4601320211\n\nThis commit introduced a html tag whitelist which does not include any table tags (`<td>,<tr>,<thead>`...). Therefore even tables the markdown parser itself generated will be removed.\n Ok. That doesnt do the trick. :-/\nTags with attributes will still be removed.\ne.g.: `<td align=\"center\">`\nThe regex probably needs to be tuned.\n `tagWhitelist = regexp.MustCompile(`^(<\\/?(` + strings.Join(tags, \"|\") + `)\\s*(\\salign=\"[^\"<>]+\")?\\s?>|<(br|hr)\\s?\\/?>)$`)`\nworks but is not very beautiful. I'll try to think of a cleaner solution und issue a new and improved pullrequest afterwards. :-)\n Well, those things happen. :-)\nSomeone should probably look into the tests though...\n\nMy last commit fixed the tables, but I would recommend a completely different approach for the future.\nTrying to make untrusted html \"safe\" is almost bound to fail if you consider all the quirks of modern browsers. \nI would offer the users two basic options: \n- Trust the input and don't filter anything (eg. its supplied by a websites admin user)\n- Don't trust your input and escape all html entities so the output only contains the html tags generated by blackfriday.\n\nEverything in between just leads to a false sense of security.\nBut that's just my 2 cents and in the end it's up to @russross anyway.\n I support those two options. It's simple and safe. Trying to support a safe subset of html will inevitably lead to potential security holes, so it ends up being not safe to begin with.\n  I use the Martini framework,I have some markdown file and I want render it as HTML in tmpl/html template.\n\nThe markdown file like this:\n\n```\ntitle: A Test Demo\n\n---\n##ABC\n> 123\n```\n\nAnd the template file like this:\n\n```\n<head>\n  <title>{{name}}</title>\n</head>\n\n<body>\n  <h2>{{abc}}</h2>\n  <blockquote>\n    <p>{{xyz}}</p>\n  </blockquote>\n</body>\n```\n\nI use the blackfriday parse the markdown and return []byte type,next step I wanna render the markdown file to this template and make each block to the right place,so how can I do this right way? Or use any way to do this better?\n Thanks, I just fix it\n  Still do normalize newlines inside fenced code blocks.\n\n```\n$ go test github.com/shurcooL/blackfriday\nok      github.com/shurcooL/blackfriday 19.893s\n```\n\nFixes #57.\n  Blackfriday currently converts all tabs to spaces (4 or 8, depending on config) as part of the pre-processing step. This irreversibly converts tabs even inside fenced code blocks.\n\nThis is bad for 2 reasons:\n- Primarily, it's frustrating that it changes the code you've pasted into fenced code blocks, making it not identical if you try to copy it from the Markdown output.\n- Additionally, in rare circumstances, it may change the behavior of code. As an example, consider a program that tries to count the number of bytes in a string literal that contains tabs. Additionally, it turns valid diff (.patch) blocks into invalid ones.\n Now that I've become a little more familiar with what exactly happens inside `firstPass()` where all the tabs get expanded, I think there's a good chance for a trivial fix for this.\n\nSince `firstPass()` already keeps track of where all fenced code blocks begin/end, it's straightforward to pass the contents through without tab expansion. The question is whether the second pass will be compatible with that. I'll give it a try in a bit.\n Well, that turned out to be easier than expected.\n\n```\n$ go test github.com/shurcooL/blackfriday\nok      github.com/shurcooL/blackfriday 19.912s\n```\n\nLet me just clean up and verify the code, then a PR is incoming.\n Ok, I found a problem with my initial implementation where I simply copied the entire fenced code block as soon as it was detected. Unfortunately, the tests didn't catch it. But the `firstPass()` is responsible for:\n- expand tabs\n- normalize newlines\n\nExpanding tabs within fenced code blocks does not make sense, but normalizing newlines **does**. My first attempt just copied the entire fenced code block as is, which ended up potentially leaving non-normalized newlines.\n\nI've changed the code to avoid that problem, so now the only difference in behavior is that tabs are not expanded while within fenced code blocks. Newlines are still normalized.\n\nI'm happy with this second attempt, so I'll go ahead with the PR.\n  A solution for #45. \n\nI added the fix to the `firstPass()` because it turned out that later on, within the block-level-parsing it is too late to safely identify whether there is a real fenced code-block right below a paragraph or it is just a coincidence that there was something that looks like a fenced-code block marker.\n\nNote, because the fix involves checking for valid fenced code-blocks within the first pass, ~~the impact on performance is tremendous. e.g. go test, with all its the stress tests, takes whopping 156s on my MBP. So for a quick test go test -short is your friend... ;-)~~ there is a minor impact on overall performace even, when the to be parsed content doesn't include any fenced code blocks.\n @rtfb you know `block(..)` has this `for` loop that loops until data is empty. With every iteration it tries to match various block level elements (headlines, code blocks, html, h-rules, tables, etc..). As a last resort it calls `paragraph(..)` which parses a paragraph until it encounters something that terminates a paragraph (like header prefix, h-rule, code blocks).\n\nWhen I first tried to implement a solution for #45, I added a check to `paragraph(..)` to detect the beginning of fenced code block using `isFencedCode(..)` and therefore end the paragraph. The problem results when there is no matching end-marker for the fenced code block. In that case the   `isFencedCode(..)` caused `paragraph(..)` to stop early and the call to `fencedCode(..)` within `block(..)` did not trigger because of the missing end-marker, there you go, an infinity loop.\n\nIn my opinion the root problem here was that the loop within `block(..)` (e.g. `for len(data) > 0 {...`) doesn't verify whether there is any progress or not. So I added some code to notice when there is no progress 3x times in a row and just stop processing... \n\nAnyway, as the current solution did not changed `paragraph(..)` I'm also fine with reverting 0c62e28, as its not required for the tests to pass.\n np, you're right. just pushed it\n  GitHub Flavored Markdown has a section on [fenced code blocks](https://help.github.com/articles/github-flavored-markdown#fenced-code-blocks), where it says \"Keep in mind that both types of code blocks need to have a blank line before them\".\n\ngithub.com, however, ignores that statement, and renders markdown without such a blank line correctly (i.e. as if the blank line were present). `blackfriday` currently does not follow that behavior (tested with `blackfriday.MarkdownCommon`, and renders such markdown in an odd manner. Should it be changed to match that of GitHub?\n\nThe follow markdown reproduces the issue:\n\n``````\nsome text without a blank line afterwards\n```Go\nsomeCode()\n```\n``````\n\nFor a larger example, see this Markdown source [1], how github.com displays it [2], and how `blackfriday.MarkdownCommon` renders it [3].\n\n[1] - https://raw.github.com/shurcooL/go-goon/8ddcefebec68d2dbcbac5225bf8760fbd4598c47/README.md\n[2] - https://github.com/shurcooL/go-goon/blob/8ddcefebec68d2dbcbac5225bf8760fbd4598c47/README.md\n[3] - http://dl.dropboxusercontent.com/u/8554242/available-for-2-weeks/fenced_code_blocks_blackfriday.html\n I've emailed GitHub about this some time ago, and it seems they've improved their docs to be more accurate. The GitHub Flavored Markdown section on [fenced code blocks](https://help.github.com/articles/github-flavored-markdown#fenced-code-blocks) now says:\n\n> Note that although fenced code blocks don't have to be preceded by a blank line\u2014unlike indented code blocks\u2014we recommend placing a blank line before them to make the raw Markdown easier to read.\n Just pushed my PR #56 for this.\n awesome, thanks a bunch!\n  Related to [issue #20](https://github.com/russross/blackfriday/issues/20). Also see: [Pull Request #23](https://github.com/russross/blackfriday/pull/23)\n   Related to issue [#22](https://github.com/russross/blackfriday/issues/20)\n\nTest added ;)\n Hi,\n\nI get the same issue as this. May I resubmit a pull request with this fix based on @lancee's commit? It looks like s/he is busy...\n @lancee thanks. Just sent a new pull request.\n Now, when https://github.com/russross/blackfriday/pull/32 went in, closing this one.\n   I'm currently using rtfb's fork because of its protection from JS injection. Worth merging, IMHO.\n @rtfb : Thanks, I'm back on the upstream and scripts are blocked now. I'll be throwing as much traffic at it as I can. Will let you know if anything pops up.\n  Java-style comment banners-of-stars don't work with go docs (either in godoc or go.pkgdoc.org).\n  The HTML5 block-level elements were feeling left out. I added them in. I also changed the HTML doctype.\n\nAlso, putting <nav></nav> around the TOC makes it easier to select with CSS.\n  In the interest of \"safety against malicious user input\", shouldn't there be an option to prevent the passthrough of script tags?\n The safety the README file refers to is against crashing the server.  You have a good point, though.  You can disable block HTML with the HTML_SKIP_HTML option, but inline tags are permitted, including script tags and attributes like onload.  It seems like it would take some careful planning to really eliminate any possibility of javascript injection.\n\nI'm curious how other libraries have handled the issue.  Blackfriday was based on upskirt and implements the same feature set.  Sundown (a fork of upskirt) seems to have taken over as the engine of choice in C.  I wonder if they have addressed this?  I'll look into it when I get a chance.  If you have any suggestions or insights, please let me know!\n You know thinking about it a bit more, I'm going to guess that an approach like the one described in the answer to this question http://stackoverflow.com/questions/6659351/removing-all-script-tags-from-html-with-js-regular-expression is going to be better in the long run anyway.  That is, use the browser to parse the resulting html, and remove scripts at that point.\n Yes you should definitely update the readme to clarify that it is safe in the sense that it won't crash, but it is NOT safe in the sense that you'd allow untrusted users to display output from it to the world.\n\nI'd also like to point out that tag blacklisting (i.e. \"we will strip out all script tags\") is absolutely the wrong way to do this input sanitising. It does not and cannot work. Browsers are no-way near well-defined enough. Check out this page: https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n\nThe only secure way to do it is to strip _all_ HTML (i.e. replace all < and >'s with &lt; and &gt;) and then add the features you want as non-HTML extensions (like how the tables are done). This is how major markdown-based sites like reddit and github do it. This should really be the default for this library. Anything else is asking for trouble.\n\nGreat library by the way. I've converted it to javascript using gopherjs and it seems to work fine! (Although I obviously can't use it in anger until it is secure!)\n As an _example_ (i.e. not something that you should just fix and think the problem is solved), this input:\n\n```\n<script><script src=\"http://example.com/exploit.js\"></SCRIPT></script>\n```\n\ngives this output:\n\n```\n<p><script src=\"http://example.com/exploit.js\"></SCRIPT></p>\n```\n\nThat is with the \"common\" options which include HTML_SKIP_SCRIPT. I _strongly_ recommend that you remove HTML_SKIP_SCRIPT for now as it is extremely misleading - people may think that they are protected from script injection when they aren't.\n\nOnce again, this is just _one example_ of why this approach doesn't work and can never work. It is not that there are a few bugs in the code that can be fixed and then it will be secure, rather the entire approach is flawed.\n\nSorry if I'm being a bit forceful here. It's an important issue that many people get wrong and this is otherwise a nice library which I would like to be successful. Keep up the good work!\n I took a look, and unfortunately it kind of does exactly what I said not to do! That is, it tries to fix the HTML parsing to catch as many script injection attacks as possible, rather than just making them _all_ impossible by disallowing all HTML.\n\nIn fact in the test code you can see some attacks which still work (the tests are commented out). Those are only the _known_ attacks which still work - you can be sure there are others that haven't been thought of.\n\nTherefore, I would apply this patch because it is definitely an improvement, and it is very frustrating to see one's work go to waste (and I kind of hate naysayers).\n\n**_However**_, this doesn't actually change the security of blackfriday - it should still be considered vulnerable by anyone sensible and you should probably still update the README to reflect this.\n\nSorry I don't really have the motivation to fix this properly myself at the moment. I am a total hypocrite!\n Well basically replace every < and > in the input with `&gt;` and `&lt;`. That way you can be 99.99% sure that there will be no user-supplied HTML in the output. Then you have to add back the HTML features that you've lost (<video>, <img>, etc.) using safe markdown syntax. E.g. `[!video](http://example.com/foo.mp4)`  and so on. Obviously it's lots more work and less convenient if you _do_ trust the user, so I wouldn't suggest removing the \"HTML allowed\" mode entirely - it would be useful for personal blogs for example - just as long as it isn't the default.\n Yeah exactly. You lose convenience but it is necessary if you want actual\nsecurity.\n\nAlthough having said that, with some care you could whitelist some tags\ne.g. <p>, <b> and so on. Probably not much point though as the most useful\nHTML is the most risky.\nOn 31 Jan 2014 22:42, \"Vytautas \u0160altenis\" notifications@github.com wrote:\n\n> Hmm, I don't understand how can this allow having inline html at all.\n> Replacing angle brackets with lt/gt entities will render inline html as\n> readable html in the output.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/russross/blackfriday/issues/11#issuecomment-33850118\n> .\n I think Timmmm might be right.  That the only way to actually make this secure would be to prevent passthrough of HTML all together.  It seems like there are two modes of use here, involving trusted vs untrusted content. When the content is trusted (e.g. the markdown is generated by the developers/designers/writers of the site itself), protecting against crashes and other undefined behavior is the primary goal.  When the content is untrusted (e.g. submitted by users of the site) that paranoia is in order, and it is reasonable to take an approach that restricts all HTML content.\n You can do that today with `HTML_SKIP_HTML`, it's just not a part of the default set of flags for `MarkdownBasic()` or `MarkdownCommon()`.\n But HTML_SKIP_HTML is not currently secure.\nOn 28 Feb 2014 14:59, \"Vytautas \u0160altenis\" notifications@github.com wrote:\n\n> You can do that today with HTML_SKIP_HTML, it's just not a part of the\n> default set of flags for MarkdownBasic() or MarkdownCommon().\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/russross/blackfriday/issues/11#issuecomment-36358040\n> .\n I think the only possible way to reliably sanitize the result is actually parsing/tokenizing the HTML after it's been created, then whitelisting tags/attributes based on that, and then generating the output from the parsed HTML.\n\nI've poked around a bit using the go.net/html HTML5 parsing library, that seems to be working. It might be slightly slower than regexp based shenanigans, I haven't tested that yet, but it will be safe. I wrote it such that unrecognized HTML gets escaped (&lt;script src=evil&gt; ...), so users can see what's going on.\n\nWould you be interested in a pull request?\n By the way, a possibly more elegant and efficient way would be parsing the entire HTML into a tree or token stream, turning Renderer in a DOM token stream level interface (i.e. send every single opening tag, attribute, etc to it), and then do the sanitization in a special sanitizing renderer.\n\nBut that seems like a pretty invasive change in the code base, I think the HTML5 parser approach is safer and easier.\n Yes, you could have a massively misbehaving user agent - but then you're\nscrewed anyway. All modern browsers follow the html5 parsing algorithm - I\nthink in practice the approach is safe.\n\nOn Sonntag, 27. April 2014 22:12:10, Vytautas \u0160altenis <\nnotifications@github.com> wrote:\n\n> It will still not be completely safe due to different tolerance to\n> deviations from the standard in different browsers. I.e. it will be\n> possible for the attacker to construct a peculiar inline html in a way that\n> will not be recognized as html at all by go.net/html, but will be groked\n> by a real browser and be malicious.\n> \n> Having said that, I would certainly be interested in looking at the code,\n> enough talking :-)\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/russross/blackfriday/issues/11#issuecomment-41507460\n> .\n  \"what what\"! -> \u201cwhat what\u201d!\n\"what what!\" -> \u201cwhat what!\u201c\n Awesome, thanks!\n  integrate tests for markdown 1.0.3 test files by comparing them with reference files rendered with upskirt (no extensions)\n\nThis is a translation of a test I did for my port where I generated reference test files by running upskirt on markdown 1.0.3 test files and compare the output of Go version. I know one can run markdown.pl from 1.0.3 test sources, but I think it's better to have them integrated, because:\n- it's easier to run\n- it's hard to even know about the possibility of running markdown tests, hard to hunt down the files (e.g. there doesn't seem an official place to get them, I tracked them down as part of some random repository which included them) etc. It took me a while to figure out all the pieces.\n- I work mostly on Windows and it's virtually impossible to set them up\n Sorry about that, I did this on Windows, which doesn't support gotest, so I only got as far as compiling the code. Lesson learned.\n\nHave you tested your latest changes with Markdown tests?\n\nI've now ran the tests on mac. Some of the failures are indeed due to stripping whitespace within `<li>` elements, but I'm also seeing other failures e.g.: in Ordered and unordered lists_upskirt_ref.html the expected result for the \"Asteriks tight:\" portion was:\n\n```\n<ul>\n<li>  asterisk 1</li>\n<li>  asterisk 2</li>\n<li>  asterisk 3</li>\n</ul>\n```\n\nAnd what I see is:\n\n```\n<pre><code>asterisk 1\nasterisk 2\nasterisk 3\n</code></pre>\n```\n\nwhich looks like a different class of a problem. \n\nThis failure should also show up with markdown.pl, though, but since I don't have that setup, I don't know if that's the case (and the parsing code is wrong) or if it's a problem with my test code/the way I've generated reference files.\n  Any plans to add textile support or willingness to include one if written by someone else?\n\nIn my project I need textile support so I decided first to port upskirt to Go, to learn how it works, and then implement textile in similar way.\n\nOnly after finishing the go port (https://github.com/kjk/go-markup) I've found your project, which is slightly ahead.\n\nThere's little point in having 2 almost identical codebases but I really want to complete the phase 2 i.e. textile support. I would be happy to drop my port and just contribute that (and possibly other improvements) to blackfriday.\n\nAre you at all interested in extending blackfriday that way?\n Yes, that's pretty much is my thinking: a completely new parser, but using similar structure and techniques as markdown parser, and sharing render(s).\n", "text_all_count": 4383, "text_word_token": ["Add", "TWiki", "markup", "support", "by", "TWikiRenderer", "Relevant", "LINK", "issuecomment", "NUMBER", "You", "may", "want", "to", "keep", "this", "Renderer", "in", "a", "separate", "repo", "and", "russross", "can", "link", "to", "it", "in", "the", "Non", "HTML", "output", "LINK", "non", "html", "output", "section", "of", "README", "NUMBER", "md", "NUMBER", "As", "near", "as", "I", "can", "tell", "blackfriday", "NUMBER", "MarkdownCommon", "renders", "table", "elements", "if", "present", "and", "then", "strips", "them", "via", "the", "HTML_SANITIZE_OUTPUT", "HtmlRenderer", "flag", "NUMBER", "Possibly", "relate", "to", "NUMBER", "Test", "Case", "go", "package", "main", "import", "fmt", "github", "NUMBER", "com", "russross", "blackfriday", "func", "main", "input", "Name", "Age", "Bob", "NUMBER", "Alice", "NUMBER", "output", "blackfriday", "NUMBER", "MarkdownCommon", "byte", "input", "fmt", "NUMBER", "Println", "string", "output", "Expected", "Output", "html", "TAG", "TAG", "TAG", "TAG", "Name", "TAG", "TAG", "Age", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "Bob", "TAG", "TAG", "NUMBER", "TAG", "TAG", "TAG", "TAG", "Alice", "TAG", "TAG", "NUMBER", "TAG", "TAG", "TAG", "TAG", "Actual", "Output", "html", "Name", "Age", "Bob", "NUMBER", "Alice", "NUMBER", "I", "notice", "that", "if", "you", "comment", "out", "htmlFlags", "HTML_SANITIZE_OUTPUT", "on", "line", "NUMBER", "in", "markdown", "NUMBER", "go", "LINK", "L", "NUMBER", "you", "get", "the", "expected", "result", "NUMBER", "What", "version", "of", "blackfriday", "do", "you", "have", "I", "just", "run", "your", "test", "case", "program", "with", "the", "current", "blackfriday", "commit", "bb", "NUMBER", "a", "NUMBER", "f", "NUMBER", "abb", "NUMBER", "a", "NUMBER", "e", "NUMBER", "bba", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "efa", "NUMBER", "cd", "NUMBER", "eeb", "and", "I", "get", "the", "expected", "output", "html", "TAG", "TAG", "TAG", "TAG", "Name", "TAG", "TAG", "Age", "TAG", "TAG", "TAG", "TAG", "TAG", "TAG", "Bob", "TAG", "TAG", "NUMBER", "TAG", "TAG", "TAG", "TAG", "Alice", "TAG", "TAG", "NUMBER", "TAG", "TAG", "TAG", "TAG", "Very", "sorry", "I", "was", "use", "an", "outdate", "version", "of", "blackfriday", "Looks", "like", "I", "had", "pull", "down", "a", "version", "prior", "to", "the", "fix", "from", "NUMBER", "and", "hence", "saw", "the", "issue", "I", "was", "having", "above", "NUMBER", "Sorry", "again", "for", "wasting", "folks", "time", "smile", "Just", "thought", "it", "would", "be", "nice", "for", "readers", "to", "be", "able", "to", "scan", "for", "and", "use", "You", "re", "most", "welcome", "NUMBER", "some", "order", "NUMBER", "Let", "me", "know", "whether", "you", "want", "more", "test", "for", "the", "various", "elements", "it", "seem", "a", "bit", "silly", "to", "add", "a", "test", "for", "each", "element", "to", "me", "but", "wouldn", "t", "be", "hard", "to", "add", "some", "more", "NUMBER", "Use", "an", "HTML", "NUMBER", "compliant", "parser", "that", "interprets", "HTML", "as", "a", "browser", "would", "to", "parse", "the", "Markdown", "result", "and", "then", "sanitize", "based", "on", "the", "result", "NUMBER", "Escape", "unrecognized", "and", "disallowed", "HTML", "in", "the", "result", "NUMBER", "Currently", "works", "with", "a", "hard", "code", "whitelist", "of", "safe", "HTML", "tags", "and", "attributes", "NUMBER", "This", "fix", "issue", "NUMBER", "I", "have", "a", "struct", "like", "this", "go", "type", "Page", "struct", "Content", "string", "then", "I", "read", "a", "markdown", "file", "and", "assign", "to", "a", "variable", "go", "data", "err", "ioutil", "NUMBER", "ReadFile", "a", "NUMBER", "md", "lines", "string", "data", "page", "NUMBER", "Content", "markdownRender", "byte", "lines", "the", "markdown", "file", "like", "this", "Hello", "World", "Holo", "Go", "and", "then", "I", "put", "it", "into", "markdown", "render", "function", "and", "return", "a", "string", "value", "go", "func", "markdownRender", "content", "byte", "string", "htmlFlags", "NUMBER", "htmlFlags", "blackfriday", "NUMBER", "HTML_USE_SMARTYPANTS", "htmlFlags", "blackfriday", "NUMBER", "HTML_SMARTYPANTS_FRACTIONS", "renderer", "blackfriday", "NUMBER", "HtmlRenderer", "htmlFlags", "extensions", "NUMBER", "extensions", "blackfriday", "NUMBER", "EXTENSION_NO_INTRA_EMPHASIS", "extensions", "blackfriday", "NUMBER", "EXTENSION_TABLES", "extensions", "blackfriday", "NUMBER", "EXTENSION_FENCED_CODE", "extensions", "blackfriday", "NUMBER", "EXTENSION_AUTOLINK", "extensions", "blackfriday", "NUMBER", "EXTENSION_STRIKETHROUGH", "extensions", "blackfriday", "NUMBER", "EXTENSION_SPACE_HEADERS", "return", "string", "blackfriday", "NUMBER", "Markdown", "content", "renderer", "extensions", "and", "finally", "I", "call", "the", "page", "NUMBER", "Content", "in", "a", "html", "template", "and", "generate", "a", "static", "html", "NUMBER", "Content", "but", "in", "the", "generate", "html", "it", "show", "in", "the", "browser", "I", "try", "it", "in", "the", "chrome", "and", "safari", "like", "this", "not", "the", "source", "code", "It", "just", "show", "in", "the", "page", "TAG", "Hello", "World", "Holo", "Go", "TAG", "but", "I", "want", "it", "like", "this", "Hello", "World", "Holo", "Go", "So", "how", "can", "i", "do", "this", "rtfb", "Yes", "I", "find", "my", "markdown", "input", "be", "not", "right", "I", "lost", "the", "whitespace", "separating", "the", "from", "the", "test", "thanks", "for", "your", "answer", "Any", "thoughts", "on", "support", "PDF", "output", "as", "well", "HTML", "LINK", "Html", "Latex", "LINK", "Latex", "support", "be", "do", "by", "implement", "the", "blackfriday", "NUMBER", "Renderer", "interface", "LINK", "Renderer", "NUMBER", "You", "or", "anyone", "else", "could", "add", "PDF", "support", "by", "implement", "that", "interface", "NUMBER", "For", "example", "I", "ve", "do", "pretty", "Markdown", "rendering", "by", "implement", "the", "blackfriday", "NUMBER", "Renderer", "interface", "here", "LINK", "L", "NUMBER", "L", "NUMBER", "NUMBER", "Oh", "that", "s", "quite", "helpful", "thanks", "I", "ll", "try", "that", "NUMBER", "I", "m", "just", "starting", "with", "Go", "so", "I", "wasn", "t", "quite", "sure", "if", "this", "was", "something", "that", "was", "be", "worked", "on", "already", "NUMBER", "Thanks", "for", "the", "tip", "I", "ve", "ended", "up", "just", "keep", "the", "markdown", "and", "use", "pandoc", "externally", "NUMBER", "Anyway", "though", "I", "d", "love", "to", "try", "my", "hand", "at", "it", "NUMBER", "Can", "t", "promise", "anything", "in", "terms", "of", "quality", "or", "timeliness", "but", "definitely", "worth", "a", "shot", "at", "least", "for", "a", "learning", "exercise", "NUMBER", "FUCKLINK", "NUMBER", "NUMBER", "javascript", "alert", "window", "NUMBER", "document", "NUMBER", "cookie", "Your", "markdown", "link", "to", "check", "if", "it", "be", "not", "strictly", "a", "hypertext", "link", "the", "bug", "cause", "js", "script", "can", "be", "executed", "NUMBER", "NUMBER", "Fixing", "LINK", "This", "commit", "introduce", "a", "html", "tag", "whitelist", "which", "do", "not", "include", "any", "table", "tags", "TAG", "TAG", "TAG", "NUMBER", "NUMBER", "Therefore", "even", "tables", "the", "markdown", "parser", "itself", "generate", "will", "be", "remove", "NUMBER", "Ok", "NUMBER", "That", "doesnt", "do", "the", "trick", "NUMBER", "Tags", "with", "attributes", "will", "still", "be", "remove", "NUMBER", "e", "NUMBER", "g", "NUMBER", "TAG", "The", "regex", "probably", "needs", "to", "be", "tuned", "NUMBER", "tagWhitelist", "regexp", "NUMBER", "MustCompile", "TAG", "s", "TAG", "works", "but", "be", "not", "very", "beautiful", "NUMBER", "I", "ll", "try", "to", "think", "of", "a", "cleaner", "solution", "und", "issue", "a", "new", "and", "improved", "pullrequest", "afterwards", "NUMBER", "Well", "those", "things", "happen", "NUMBER", "Someone", "should", "probably", "look", "into", "the", "test", "though", "NUMBER", "My", "last", "commit", "fix", "the", "tables", "but", "I", "would", "recommend", "a", "completely", "different", "approach", "for", "the", "future", "NUMBER", "Trying", "to", "make", "untrusted", "html", "safe", "be", "almost", "bound", "to", "fail", "if", "you", "consider", "all", "the", "quirks", "of", "modern", "browsers", "NUMBER", "I", "would", "offer", "the", "users", "two", "basic", "options", "Trust", "the", "input", "and", "don", "t", "filter", "anything", "eg", "NUMBER", "its", "supplied", "by", "a", "websites", "admin", "user", "Don", "t", "trust", "your", "input", "and", "escape", "all", "html", "entities", "so", "the", "output", "only", "contains", "the", "html", "tags", "generate", "by", "blackfriday", "NUMBER", "Everything", "in", "between", "just", "leads", "to", "a", "false", "sense", "of", "security", "NUMBER", "But", "that", "s", "just", "my", "NUMBER", "cents", "and", "in", "the", "end", "it", "s", "up", "to", "russross", "anyway", "NUMBER", "I", "support", "those", "two", "options", "NUMBER", "It", "s", "simple", "and", "safe", "NUMBER", "Trying", "to", "support", "a", "safe", "subset", "of", "html", "will", "inevitably", "lead", "to", "potential", "security", "holes", "so", "it", "ends", "up", "be", "not", "safe", "to", "begin", "with", "NUMBER", "I", "use", "the", "Martini", "framework", "I", "have", "some", "markdown", "file", "and", "I", "want", "render", "it", "as", "HTML", "in", "tmpl", "html", "template", "NUMBER", "The", "markdown", "file", "like", "this", "title", "A", "Test", "Demo", "ABC", "NUMBER", "And", "the", "template", "file", "like", "this", "TAG", "TAG", "name", "TAG", "TAG", "TAG", "TAG", "abc", "TAG", "TAG", "TAG", "xyz", "TAG", "TAG", "TAG", "I", "use", "the", "blackfriday", "parse", "the", "markdown", "and", "return", "byte", "type", "next", "step", "I", "wanna", "render", "the", "markdown", "file", "to", "this", "template", "and", "make", "each", "block", "to", "the", "right", "place", "so", "how", "can", "I", "do", "this", "right", "way", "Or", "use", "any", "way", "to", "do", "this", "better", "Thanks", "I", "just", "fix", "it", "Still", "do", "normalize", "newlines", "inside", "fenced", "code", "blocks", "NUMBER", "go", "test", "github", "NUMBER", "com", "shurcooL", "blackfriday", "ok", "github", "NUMBER", "com", "shurcooL", "blackfriday", "NUMBER", "s", "Fixes", "NUMBER", "Blackfriday", "currently", "converts", "all", "tabs", "to", "spaces", "NUMBER", "or", "NUMBER", "depending", "on", "config", "as", "part", "of", "the", "pre", "processing", "step", "NUMBER", "This", "irreversibly", "converts", "tabs", "even", "inside", "fenced", "code", "blocks", "NUMBER", "This", "be", "bad", "for", "NUMBER", "reasons", "Primarily", "it", "s", "frustrating", "that", "it", "change", "the", "code", "you", "ve", "pasted", "into", "fenced", "code", "blocks", "make", "it", "not", "identical", "if", "you", "try", "to", "copy", "it", "from", "the", "Markdown", "output", "NUMBER", "Additionally", "in", "rare", "circumstances", "it", "may", "change", "the", "behavior", "of", "code", "NUMBER", "As", "an", "example", "consider", "a", "program", "that", "try", "to", "count", "the", "number", "of", "bytes", "in", "a", "string", "literal", "that", "contains", "tabs", "NUMBER", "Additionally", "it", "turns", "valid", "diff", "NUMBER", "patch", "blocks", "into", "invalid", "ones", "NUMBER", "Now", "that", "I", "ve", "become", "a", "little", "more", "familiar", "with", "what", "exactly", "happens", "inside", "firstPass", "where", "all", "the", "tabs", "get", "expanded", "I", "think", "there", "s", "a", "good", "chance", "for", "a", "trivial", "fix", "for", "this", "NUMBER", "Since", "firstPass", "already", "keep", "track", "of", "where", "all", "fenced", "code", "blocks", "begin", "end", "it", "s", "straightforward", "to", "pass", "the", "contents", "through", "without", "tab", "expansion", "NUMBER", "The", "question", "be", "whether", "the", "second", "pass", "will", "be", "compatible", "with", "that", "NUMBER", "I", "ll", "give", "it", "a", "try", "in", "a", "bit", "NUMBER", "Well", "that", "turned", "out", "to", "be", "easier", "than", "expected", "NUMBER", "go", "test", "github", "NUMBER", "com", "shurcooL", "blackfriday", "ok", "github", "NUMBER", "com", "shurcooL", "blackfriday", "NUMBER", "s", "Let", "me", "just", "clean", "up", "and", "verify", "the", "code", "then", "a", "PR", "be", "incoming", "NUMBER", "Ok", "I", "find", "a", "problem", "with", "my", "initial", "implementation", "where", "I", "simply", "copied", "the", "entire", "fenced", "code", "block", "as", "soon", "as", "it", "was", "detected", "NUMBER", "Unfortunately", "the", "test", "didn", "t", "catch", "it", "NUMBER", "But", "the", "firstPass", "be", "responsible", "for", "expand", "tabs", "normalize", "newlines", "Expanding", "tabs", "within", "fenced", "code", "blocks", "do", "not", "make", "sense", "but", "normalizing", "newlines", "do", "NUMBER", "My", "first", "attempt", "just", "copied", "the", "entire", "fenced", "code", "block", "as", "be", "which", "ended", "up", "potentially", "leaving", "non", "normalized", "newlines", "NUMBER", "I", "ve", "change", "the", "code", "to", "avoid", "that", "problem", "so", "now", "the", "only", "difference", "in", "behavior", "be", "that", "tabs", "be", "not", "expanded", "while", "within", "fenced", "code", "blocks", "NUMBER", "Newlines", "be", "still", "normalized", "NUMBER", "I", "m", "happy", "with", "this", "second", "attempt", "so", "I", "ll", "go", "ahead", "with", "the", "PR", "NUMBER", "A", "solution", "for", "NUMBER", "I", "add", "the", "fix", "to", "the", "firstPass", "because", "it", "turned", "out", "that", "later", "on", "within", "the", "block", "level", "parsing", "it", "be", "too", "late", "to", "safely", "identify", "whether", "there", "be", "a", "real", "fenced", "code", "block", "right", "below", "a", "paragraph", "or", "it", "be", "just", "a", "coincidence", "that", "there", "was", "something", "that", "looks", "like", "a", "fenced", "code", "block", "marker", "NUMBER", "Note", "because", "the", "fix", "involves", "checking", "for", "valid", "fenced", "code", "blocks", "within", "the", "first", "pass", "the", "impact", "on", "performance", "be", "tremendous", "NUMBER", "e", "NUMBER", "g", "NUMBER", "go", "test", "with", "all", "its", "the", "stress", "test", "takes", "whopping", "NUMBER", "s", "on", "my", "MBP", "NUMBER", "So", "for", "a", "quick", "test", "go", "test", "short", "be", "your", "friend", "NUMBER", "there", "be", "a", "minor", "impact", "on", "overall", "performace", "even", "when", "the", "to", "be", "parsed", "content", "doesn", "t", "include", "any", "fenced", "code", "blocks", "NUMBER", "rtfb", "you", "know", "block", "NUMBER", "has", "this", "for", "loop", "that", "loops", "until", "data", "be", "empty", "NUMBER", "With", "every", "iteration", "it", "try", "to", "match", "various", "block", "level", "elements", "headlines", "code", "blocks", "html", "h", "rules", "tables", "etc", "NUMBER", "NUMBER", "As", "a", "last", "resort", "it", "calls", "paragraph", "NUMBER", "which", "parses", "a", "paragraph", "until", "it", "encounters", "something", "that", "terminates", "a", "paragraph", "like", "header", "prefix", "h", "rule", "code", "blocks", "NUMBER", "When", "I", "first", "tried", "to", "implement", "a", "solution", "for", "NUMBER", "I", "add", "a", "check", "to", "paragraph", "NUMBER", "to", "detect", "the", "beginning", "of", "fenced", "code", "block", "use", "isFencedCode", "NUMBER", "and", "therefore", "end", "the", "paragraph", "NUMBER", "The", "problem", "results", "when", "there", "be", "no", "matching", "end", "marker", "for", "the", "fenced", "code", "block", "NUMBER", "In", "that", "case", "the", "isFencedCode", "NUMBER", "cause", "paragraph", "NUMBER", "to", "stop", "early", "and", "the", "call", "to", "fencedCode", "NUMBER", "within", "block", "NUMBER", "did", "not", "trigger", "because", "of", "the", "miss", "end", "marker", "there", "you", "go", "an", "infinity", "loop", "NUMBER", "In", "my", "opinion", "the", "root", "problem", "here", "was", "that", "the", "loop", "within", "block", "NUMBER", "e", "NUMBER", "g", "NUMBER", "for", "len", "data", "NUMBER", "NUMBER", "doesn", "t", "verify", "whether", "there", "be", "any", "progress", "or", "not", "NUMBER", "So", "I", "add", "some", "code", "to", "notice", "when", "there", "be", "no", "progress", "NUMBER", "x", "times", "in", "a", "row", "and", "just", "stop", "processing", "NUMBER", "Anyway", "as", "the", "current", "solution", "did", "not", "change", "paragraph", "NUMBER", "I", "m", "also", "fine", "with", "revert", "NUMBER", "c", "NUMBER", "e", "NUMBER", "as", "its", "not", "required", "for", "the", "test", "to", "pass", "NUMBER", "np", "you", "re", "right", "NUMBER", "just", "push", "it", "GitHub", "Flavored", "Markdown", "has", "a", "section", "on", "fenced", "code", "blocks", "LINK", "flavored", "markdown", "fenced", "code", "blocks", "where", "it", "says", "Keep", "in", "mind", "that", "both", "types", "of", "code", "blocks", "need", "to", "have", "a", "blank", "line", "before", "them", "NUMBER", "github", "NUMBER", "com", "however", "ignores", "that", "statement", "and", "renders", "markdown", "without", "such", "a", "blank", "line", "correctly", "i", "NUMBER", "e", "NUMBER", "as", "if", "the", "blank", "line", "were", "present", "NUMBER", "blackfriday", "currently", "do", "not", "follow", "that", "behavior", "test", "with", "blackfriday", "NUMBER", "MarkdownCommon", "and", "renders", "such", "markdown", "in", "an", "odd", "manner", "NUMBER", "Should", "it", "be", "change", "to", "match", "that", "of", "GitHub", "The", "follow", "markdown", "reproduces", "the", "issue", "some", "text", "without", "a", "blank", "line", "afterwards", "Go", "someCode", "For", "a", "larger", "example", "see", "this", "Markdown", "source", "NUMBER", "how", "github", "NUMBER", "com", "displays", "it", "NUMBER", "and", "how", "blackfriday", "NUMBER", "MarkdownCommon", "renders", "it", "NUMBER", "NUMBER", "NUMBER", "LINK", "goon", "NUMBER", "ddcefebec", "NUMBER", "d", "NUMBER", "dbcbac", "NUMBER", "bf", "NUMBER", "fbd", "NUMBER", "c", "NUMBER", "README", "NUMBER", "md", "NUMBER", "LINK", "goon", "blob", "NUMBER", "ddcefebec", "NUMBER", "d", "NUMBER", "dbcbac", "NUMBER", "bf", "NUMBER", "fbd", "NUMBER", "c", "NUMBER", "README", "NUMBER", "md", "NUMBER", "LINK", "for", "NUMBER", "weeks", "fenced_code_blocks_blackfriday", "NUMBER", "html", "I", "ve", "emailed", "GitHub", "about", "this", "some", "time", "ago", "and", "it", "seems", "they", "ve", "improved", "their", "docs", "to", "be", "more", "accurate", "NUMBER", "The", "GitHub", "Flavored", "Markdown", "section", "on", "fenced", "code", "blocks", "LINK", "flavored", "markdown", "fenced", "code", "blocks", "now", "says", "Note", "that", "although", "fenced", "code", "blocks", "don", "t", "have", "to", "be", "preceded", "by", "a", "blank", "line", "unlike", "indented", "code", "blocks", "we", "recommend", "placing", "a", "blank", "line", "before", "them", "to", "make", "the", "raw", "Markdown", "easier", "to", "read", "NUMBER", "Just", "push", "my", "PR", "NUMBER", "for", "this", "NUMBER", "awesome", "thanks", "a", "bunch", "Related", "to", "issue", "NUMBER", "LINK", "NUMBER", "Also", "see", "Pull", "Request", "NUMBER", "LINK", "Related", "to", "issue", "NUMBER", "LINK", "Test", "add", "Hi", "I", "get", "the", "same", "issue", "as", "this", "NUMBER", "May", "I", "resubmit", "a", "pull", "request", "with", "this", "fix", "based", "on", "lancee", "s", "commit", "It", "looks", "like", "s", "he", "be", "busy", "NUMBER", "lancee", "thanks", "NUMBER", "Just", "sent", "a", "new", "pull", "request", "NUMBER", "Now", "when", "LINK", "went", "in", "closing", "this", "one", "NUMBER", "I", "m", "currently", "use", "rtfb", "s", "fork", "because", "of", "its", "protection", "from", "JS", "injection", "NUMBER", "Worth", "merge", "IMHO", "NUMBER", "rtfb", "Thanks", "I", "m", "back", "on", "the", "upstream", "and", "scripts", "be", "blocked", "now", "NUMBER", "I", "ll", "be", "throw", "as", "much", "traffic", "at", "it", "as", "I", "can", "NUMBER", "Will", "let", "you", "know", "if", "anything", "pops", "up", "NUMBER", "Java", "style", "comment", "banners", "of", "stars", "don", "t", "work", "with", "go", "docs", "either", "in", "godoc", "or", "go", "NUMBER", "pkgdoc", "NUMBER", "org", "NUMBER", "The", "HTML", "NUMBER", "block", "level", "elements", "were", "feeling", "left", "out", "NUMBER", "I", "add", "them", "in", "NUMBER", "I", "also", "change", "the", "HTML", "doctype", "NUMBER", "Also", "putting", "TAG", "TAG", "around", "the", "TOC", "makes", "it", "easier", "to", "select", "with", "CSS", "NUMBER", "In", "the", "interest", "of", "safety", "against", "malicious", "user", "input", "shouldn", "t", "there", "be", "an", "option", "to", "prevent", "the", "passthrough", "of", "script", "tags", "The", "safety", "the", "README", "file", "refers", "to", "be", "against", "crash", "the", "server", "NUMBER", "You", "have", "a", "good", "point", "though", "NUMBER", "You", "can", "disable", "block", "HTML", "with", "the", "HTML_SKIP_HTML", "option", "but", "inline", "tags", "be", "permitted", "including", "script", "tags", "and", "attributes", "like", "onload", "NUMBER", "It", "seems", "like", "it", "would", "take", "some", "careful", "planning", "to", "really", "eliminate", "any", "possibility", "of", "javascript", "injection", "NUMBER", "I", "m", "curious", "how", "other", "libraries", "have", "handle", "the", "issue", "NUMBER", "Blackfriday", "was", "based", "on", "upskirt", "and", "implement", "the", "same", "feature", "set", "NUMBER", "Sundown", "a", "fork", "of", "upskirt", "seems", "to", "have", "taken", "over", "as", "the", "engine", "of", "choice", "in", "C", "NUMBER", "I", "wonder", "if", "they", "have", "address", "this", "I", "ll", "look", "into", "it", "when", "I", "get", "a", "chance", "NUMBER", "If", "you", "have", "any", "suggestions", "or", "insights", "please", "let", "me", "know", "You", "know", "thinking", "about", "it", "a", "bit", "more", "I", "m", "going", "to", "guess", "that", "an", "approach", "like", "the", "one", "describe", "in", "the", "answer", "to", "this", "question", "LINK", "all", "script", "tags", "from", "html", "with", "js", "regular", "expression", "be", "going", "to", "be", "better", "in", "the", "long", "run", "anyway", "NUMBER", "That", "be", "use", "the", "browser", "to", "parse", "the", "resulting", "html", "and", "remove", "scripts", "at", "that", "point", "NUMBER", "Yes", "you", "should", "definitely", "update", "the", "readme", "to", "clarify", "that", "it", "be", "safe", "in", "the", "sense", "that", "it", "won", "t", "crash", "but", "it", "be", "NOT", "safe", "in", "the", "sense", "that", "you", "d", "allow", "untrusted", "users", "to", "display", "output", "from", "it", "to", "the", "world", "NUMBER", "I", "d", "also", "like", "to", "point", "out", "that", "tag", "blacklisting", "i", "NUMBER", "e", "NUMBER", "we", "will", "strip", "out", "all", "script", "tags", "be", "absolutely", "the", "wrong", "way", "to", "do", "this", "input", "sanitising", "NUMBER", "It", "do", "not", "and", "cannot", "work", "NUMBER", "Browsers", "be", "no", "way", "near", "well", "defined", "enough", "NUMBER", "Check", "out", "this", "page", "LINK", "_Filter_Evasion_Cheat_Sheet", "The", "only", "secure", "way", "to", "do", "it", "be", "to", "strip", "_all_", "HTML", "i", "NUMBER", "e", "NUMBER", "replace", "all", "TAG", "s", "with", "lt", "and", "gt", "and", "then", "add", "the", "features", "you", "want", "as", "non", "HTML", "extensions", "like", "how", "the", "tables", "be", "do", "NUMBER", "This", "be", "how", "major", "markdown", "based", "sites", "like", "reddit", "and", "github", "do", "it", "NUMBER", "This", "should", "really", "be", "the", "default", "for", "this", "library", "NUMBER", "Anything", "else", "be", "ask", "for", "trouble", "NUMBER", "Great", "library", "by", "the", "way", "NUMBER", "I", "ve", "converted", "it", "to", "javascript", "use", "gopherjs", "and", "it", "seems", "to", "work", "fine", "Although", "I", "obviously", "can", "t", "use", "it", "in", "anger", "until", "it", "be", "secure", "As", "an", "_example_", "i", "NUMBER", "e", "NUMBER", "not", "something", "that", "you", "should", "just", "fix", "and", "think", "the", "problem", "be", "solve", "this", "input", "TAG", "TAG", "TAG", "TAG", "gives", "this", "output", "TAG", "TAG", "TAG", "TAG", "That", "be", "with", "the", "common", "options", "which", "include", "HTML_SKIP_SCRIPT", "NUMBER", "I", "_strongly_", "recommend", "that", "you", "remove", "HTML_SKIP_SCRIPT", "for", "now", "as", "it", "be", "extremely", "misleading", "people", "may", "think", "that", "they", "be", "protected", "from", "script", "injection", "when", "they", "aren", "t", "NUMBER", "Once", "again", "this", "be", "just", "_one", "example_", "of", "why", "this", "approach", "doesn", "t", "work", "and", "can", "never", "work", "NUMBER", "It", "be", "not", "that", "there", "be", "a", "few", "bug", "in", "the", "code", "that", "can", "be", "fix", "and", "then", "it", "will", "be", "secure", "rather", "the", "entire", "approach", "be", "flawed", "NUMBER", "Sorry", "if", "I", "m", "be", "a", "bit", "forceful", "here", "NUMBER", "It", "s", "an", "important", "issue", "that", "many", "people", "get", "wrong", "and", "this", "be", "otherwise", "a", "nice", "library", "which", "I", "would", "like", "to", "be", "successful", "NUMBER", "Keep", "up", "the", "good", "work", "I", "took", "a", "look", "and", "unfortunately", "it", "kind", "of", "do", "exactly", "what", "I", "said", "not", "to", "do", "That", "be", "it", "try", "to", "fix", "the", "HTML", "parsing", "to", "catch", "as", "many", "script", "injection", "attacks", "as", "possible", "rather", "than", "just", "make", "them", "_all_", "impossible", "by", "disallowing", "all", "HTML", "NUMBER", "In", "fact", "in", "the", "test", "code", "you", "can", "see", "some", "attacks", "which", "still", "work", "the", "test", "be", "commented", "out", "NUMBER", "Those", "be", "only", "the", "_known_", "attacks", "which", "still", "work", "you", "can", "be", "sure", "there", "be", "others", "that", "haven", "t", "be", "thought", "of", "NUMBER", "Therefore", "I", "would", "apply", "this", "patch", "because", "it", "be", "definitely", "an", "improvement", "and", "it", "be", "very", "frustrating", "to", "see", "one", "s", "work", "go", "to", "waste", "and", "I", "kind", "of", "hate", "naysayers", "NUMBER", "_However", "_", "this", "doesn", "t", "actually", "change", "the", "security", "of", "blackfriday", "it", "should", "still", "be", "considered", "vulnerable", "by", "anyone", "sensible", "and", "you", "should", "probably", "still", "update", "the", "README", "to", "reflect", "this", "NUMBER", "Sorry", "I", "don", "t", "really", "have", "the", "motivation", "to", "fix", "this", "properly", "myself", "at", "the", "moment", "NUMBER", "I", "be", "a", "total", "hypocrite", "Well", "basically", "replace", "every", "TAG", "in", "the", "input", "with", "gt", "and", "lt", "NUMBER", "That", "way", "you", "can", "be", "NUMBER", "sure", "that", "there", "will", "be", "no", "user", "supplied", "HTML", "in", "the", "output", "NUMBER", "Then", "you", "have", "to", "add", "back", "the", "HTML", "features", "that", "you", "ve", "lost", "TAG", "TAG", "etc", "NUMBER", "use", "safe", "markdown", "syntax", "NUMBER", "E", "NUMBER", "g", "NUMBER", "video", "LINK", "and", "so", "on", "NUMBER", "Obviously", "it", "s", "lots", "more", "work", "and", "less", "convenient", "if", "you", "_do_", "trust", "the", "user", "so", "I", "wouldn", "t", "suggest", "remove", "the", "HTML", "allow", "mode", "entirely", "it", "would", "be", "useful", "for", "personal", "blogs", "for", "example", "just", "as", "long", "as", "it", "isn", "t", "the", "default", "NUMBER", "Yeah", "exactly", "NUMBER", "You", "lose", "convenience", "but", "it", "be", "necessary", "if", "you", "want", "actual", "security", "NUMBER", "Although", "having", "said", "that", "with", "some", "care", "you", "could", "whitelist", "some", "tags", "e", "NUMBER", "g", "NUMBER", "TAG", "TAG", "and", "so", "on", "NUMBER", "Probably", "not", "much", "point", "though", "as", "the", "most", "useful", "HTML", "be", "the", "most", "risky", "NUMBER", "On", "NUMBER", "Jan", "NUMBER", "NUMBER", "NUMBER", "Vytautas", "\u0160altenis", "notifications", "github", "NUMBER", "com", "write", "Hmm", "I", "don", "t", "understand", "how", "can", "this", "allow", "having", "inline", "html", "at", "all", "NUMBER", "Replacing", "angle", "brackets", "with", "lt", "gt", "entities", "will", "render", "inline", "html", "as", "readable", "html", "in", "the", "output", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "I", "think", "Timmmm", "might", "be", "right", "NUMBER", "That", "the", "only", "way", "to", "actually", "make", "this", "secure", "would", "be", "to", "prevent", "passthrough", "of", "HTML", "all", "together", "NUMBER", "It", "seems", "like", "there", "be", "two", "modes", "of", "use", "here", "involving", "trusted", "vs", "untrusted", "content", "NUMBER", "When", "the", "content", "be", "trusted", "e", "NUMBER", "g", "NUMBER", "the", "markdown", "be", "generate", "by", "the", "developers", "designers", "writers", "of", "the", "site", "itself", "protecting", "against", "crashes", "and", "other", "undefined", "behavior", "be", "the", "primary", "goal", "NUMBER", "When", "the", "content", "be", "untrusted", "e", "NUMBER", "g", "NUMBER", "submitted", "by", "users", "of", "the", "site", "that", "paranoia", "be", "in", "order", "and", "it", "be", "reasonable", "to", "take", "an", "approach", "that", "restricts", "all", "HTML", "content", "NUMBER", "You", "can", "do", "that", "today", "with", "HTML_SKIP_HTML", "it", "s", "just", "not", "a", "part", "of", "the", "default", "set", "of", "flags", "for", "MarkdownBasic", "or", "MarkdownCommon", "NUMBER", "But", "HTML_SKIP_HTML", "be", "not", "currently", "secure", "NUMBER", "On", "NUMBER", "Feb", "NUMBER", "NUMBER", "NUMBER", "Vytautas", "\u0160altenis", "notifications", "github", "NUMBER", "com", "write", "You", "can", "do", "that", "today", "with", "HTML_SKIP_HTML", "it", "s", "just", "not", "a", "part", "of", "the", "default", "set", "of", "flags", "for", "MarkdownBasic", "or", "MarkdownCommon", "NUMBER", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "I", "think", "the", "only", "possible", "way", "to", "reliably", "sanitize", "the", "result", "be", "actually", "parsing", "tokenizing", "the", "HTML", "after", "it", "s", "be", "created", "then", "whitelisting", "tags", "attributes", "based", "on", "that", "and", "then", "generating", "the", "output", "from", "the", "parsed", "HTML", "NUMBER", "I", "ve", "poked", "around", "a", "bit", "use", "the", "go", "NUMBER", "net", "html", "HTML", "NUMBER", "parsing", "library", "that", "seems", "to", "be", "work", "NUMBER", "It", "might", "be", "slightly", "slower", "than", "regexp", "based", "shenanigans", "I", "haven", "t", "test", "that", "yet", "but", "it", "will", "be", "safe", "NUMBER", "I", "write", "it", "such", "that", "unrecognized", "HTML", "gets", "escaped", "lt", "script", "src", "evil", "gt", "NUMBER", "so", "users", "can", "see", "what", "s", "going", "on", "NUMBER", "Would", "you", "be", "interested", "in", "a", "pull", "request", "By", "the", "way", "a", "possibly", "more", "elegant", "and", "efficient", "way", "would", "be", "parsing", "the", "entire", "HTML", "into", "a", "tree", "or", "token", "stream", "turning", "Renderer", "in", "a", "DOM", "token", "stream", "level", "interface", "i", "NUMBER", "e", "NUMBER", "send", "every", "single", "open", "tag", "attribute", "etc", "to", "it", "and", "then", "do", "the", "sanitization", "in", "a", "special", "sanitizing", "renderer", "NUMBER", "But", "that", "seems", "like", "a", "pretty", "invasive", "change", "in", "the", "code", "base", "I", "think", "the", "HTML", "NUMBER", "parser", "approach", "be", "safer", "and", "easier", "NUMBER", "Yes", "you", "could", "have", "a", "massively", "misbehaving", "user", "agent", "but", "then", "you", "re", "screwed", "anyway", "NUMBER", "All", "modern", "browsers", "follow", "the", "html", "NUMBER", "parsing", "algorithm", "I", "think", "in", "practice", "the", "approach", "be", "safe", "NUMBER", "On", "Sonntag", "NUMBER", "April", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Vytautas", "\u0160altenis", "TAG", "write", "It", "will", "still", "not", "be", "completely", "safe", "due", "to", "different", "tolerance", "to", "deviations", "from", "the", "standard", "in", "different", "browsers", "NUMBER", "I", "NUMBER", "e", "NUMBER", "it", "will", "be", "possible", "for", "the", "attacker", "to", "construct", "a", "peculiar", "inline", "html", "in", "a", "way", "that", "will", "not", "be", "recognized", "as", "html", "at", "all", "by", "go", "NUMBER", "net", "html", "but", "will", "be", "groked", "by", "a", "real", "browser", "and", "be", "malicious", "NUMBER", "Having", "said", "that", "I", "would", "certainly", "be", "interested", "in", "looking", "at", "the", "code", "enough", "talking", "Reply", "to", "this", "email", "directly", "or", "view", "it", "on", "GitHub", "LINK", "issuecomment", "NUMBER", "NUMBER", "what", "what", "what", "what", "what", "what", "what", "what", "Awesome", "thanks", "integrate", "test", "for", "markdown", "NUMBER", "test", "file", "by", "comparing", "them", "with", "reference", "file", "rendered", "with", "upskirt", "no", "extensions", "This", "be", "a", "translation", "of", "a", "test", "I", "did", "for", "my", "port", "where", "I", "generate", "reference", "test", "file", "by", "run", "upskirt", "on", "markdown", "NUMBER", "test", "file", "and", "compare", "the", "output", "of", "Go", "version", "NUMBER", "I", "know", "one", "can", "run", "markdown", "NUMBER", "pl", "from", "NUMBER", "test", "sources", "but", "I", "think", "it", "s", "better", "to", "have", "them", "integrated", "because", "it", "s", "easier", "to", "run", "it", "s", "hard", "to", "even", "know", "about", "the", "possibility", "of", "run", "markdown", "test", "hard", "to", "hunt", "down", "the", "file", "e", "NUMBER", "g", "NUMBER", "there", "doesn", "t", "seem", "an", "official", "place", "to", "get", "them", "I", "tracked", "them", "down", "as", "part", "of", "some", "random", "repository", "which", "include", "them", "etc", "NUMBER", "It", "took", "me", "a", "while", "to", "figure", "out", "all", "the", "pieces", "NUMBER", "I", "work", "mostly", "on", "Windows", "and", "it", "s", "virtually", "impossible", "to", "set", "them", "up", "Sorry", "about", "that", "I", "did", "this", "on", "Windows", "which", "doesn", "t", "support", "gotest", "so", "I", "only", "get", "as", "far", "as", "compile", "the", "code", "NUMBER", "Lesson", "learned", "NUMBER", "Have", "you", "test", "your", "latest", "change", "with", "Markdown", "test", "I", "ve", "now", "run", "the", "test", "on", "mac", "NUMBER", "Some", "of", "the", "failures", "be", "indeed", "due", "to", "stripping", "whitespace", "within", "TAG", "elements", "but", "I", "m", "also", "seeing", "other", "failures", "e", "NUMBER", "g", "NUMBER", "in", "Ordered", "and", "unordered", "lists_upskirt_ref", "NUMBER", "html", "the", "expected", "result", "for", "the", "Asteriks", "tight", "portion", "was", "TAG", "TAG", "asterisk", "NUMBER", "TAG", "TAG", "asterisk", "NUMBER", "TAG", "TAG", "asterisk", "NUMBER", "TAG", "TAG", "And", "what", "I", "see", "be", "TAG", "TAG", "asterisk", "NUMBER", "asterisk", "NUMBER", "asterisk", "NUMBER", "TAG", "TAG", "which", "looks", "like", "a", "different", "class", "of", "a", "problem", "NUMBER", "This", "failure", "should", "also", "show", "up", "with", "markdown", "NUMBER", "pl", "though", "but", "since", "I", "don", "t", "have", "that", "setup", "I", "don", "t", "know", "if", "that", "s", "the", "case", "and", "the", "parsing", "code", "be", "wrong", "or", "if", "it", "s", "a", "problem", "with", "my", "test", "code", "the", "way", "I", "ve", "generate", "reference", "file", "NUMBER", "Any", "plan", "to", "add", "textile", "support", "or", "willingness", "to", "include", "one", "if", "write", "by", "someone", "else", "In", "my", "project", "I", "need", "textile", "support", "so", "I", "decided", "first", "to", "port", "upskirt", "to", "Go", "to", "learn", "how", "it", "works", "and", "then", "implement", "textile", "in", "similar", "way", "NUMBER", "Only", "after", "finishing", "the", "go", "port", "LINK", "markup", "I", "ve", "find", "your", "project", "which", "be", "slightly", "ahead", "NUMBER", "There", "s", "little", "point", "in", "having", "NUMBER", "almost", "identical", "codebases", "but", "I", "really", "want", "to", "complete", "the", "phase", "NUMBER", "i", "NUMBER", "e", "NUMBER", "textile", "support", "NUMBER", "I", "would", "be", "happy", "to", "drop", "my", "port", "and", "just", "contribute", "that", "and", "possibly", "other", "improvement", "to", "blackfriday", "NUMBER", "Are", "you", "at", "all", "interested", "in", "extending", "blackfriday", "that", "way", "Yes", "that", "s", "pretty", "much", "be", "my", "thinking", "a", "completely", "new", "parser", "but", "use", "similar", "structure", "and", "techniques", "as", "markdown", "parser", "and", "sharing", "render", "s", "NUMBER"], "text_count": [0, 1738, 407, 154, 95, 2, 110, 1, 16, 253, 263, 443, 240, 201, 219, 47, 0, 0, 0, 0, 505, 152, 98, 67, 109, 93, 0, 0, 0, 0, 929, 580, 357, 24, 184, 63, 0, 0, 0, 0, 1093, 11, 440, 389, 338, 0, 0, 0, 0, 0, 322, 130, 170, 65, 143, 64, 124, 0, 0, 0, 876, 44, 733, 55, 0, 0, 0, 0, 0, 0, 646, 62, 439, 214, 103, 0, 0, 0, 0, 0, 1090, 461, 109, 422, 51, 92, 0, 0, 0, 0, 77, 366, 46, 0, 0, 0, 0, 0, 0, 0, 1113, 242, 634, 257, 0, 0, 0, 0, 0, 0, 1674, 3663, 49, 152, 47, 55, 0, 0, 0, 0, 4794, 15, 3647, 62, 849, 1028]}]