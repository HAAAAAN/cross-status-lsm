[{"repo": "firecracker", "type": "elite", "title": "", "number of text": 476, "text": "  Signed-off-by: Alexandru Cihodaru <cihodar@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\nRefactored the code from devices crate such that the utility functions and structures are now in public mods. The changes are necessary so Firecracker could be integrated easier with other projects.\r\n\r\n## Description of Changes\r\n\r\n[devices] expose helper functions as public.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [x] All added/changed functionality is tested.\r\n  ## Reason for This PR\r\n\r\nBootstrap implementation for dirty page tracking in vm-memory - #1997\r\n\r\nThanks @alexandruag for providing insight/PoC on the proxy crate approach.\r\n\r\n## Description of Changes\r\n\r\nCreate a \"proxy\" crate that Firecracker will use as a dependency for all current vm-memory imports. This crate will export local GuestMemoryMmap and GuestRegionMap implementations that will contain dirty page tracking functionality. All other re-exports will be fetched from upstream vm-memory.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [x] All added/changed functionality is tested.\r\n > I may have gotten it backwards - I was thinking that Firecracker will _continue_ consuming `rust-vmm/vm-memory`, but instead of using `rust-vmm/vm-memory::GuestMemoryMmap` all over the place, Firecracker would add its own `struct GuestMemoryMmapWithTracking` (or something) and `impl rust-vmm/vm-memory::GuestMemory for firecracker::GuestMemoryMmapWithTracking` (disregard rustlang blasphemy). That way we don't have to kill the dependency. Did we move away from that? What's the advantage of removing the dependency, other than renaming `GuestMemoryMmap` everywhere?\r\n\r\nThe dependency to vm-memory from upstream is kept in the local proxy crate `vm-memory-proxy` and we override only what is needed with a local implementation. The rest of the FC code depends on the proxy crate which re-exports the upstream stuff. > > > we override only what is needed with a local implementation\r\n> > \r\n> > \r\n> > Why not create a new implementor for `GuestMemory`?\r\n> \r\n> FWIW I also understood the coupling in the way @aghecenco described it above.\r\n\r\nThe goal here is to do as few changes as possible to the interfaces we currently use in Firecracker with the hope that tracking will be available in upstream. The Firecracker code uses both the GuestMemory  interface and also the GuestMemoryMmap backend directly. If we implement a new backend like GuestMemoryMmapTracked we would need to do more changes in Firecracker.\r\n\r\nThe approach in this PR is less invasive and completely transparent to Firecracker as we re-export all the stuff from upstream and we override only what's needed to support our usecase.  The issue is reproducible on Intel/AMD.  Multiple threads concurrently write the log file and the source of the logs is not obvious. If we add the thread id the logs would become more readable. Hey @HQ01! Thank you for your interest in contributing to Firecracker. \r\n\r\nI will try to summarize some next steps to get you started:\r\n- Dive deep the Firecracker `logger` crate  which  provides an implementation for the API abstraction defined by the [log crate](https://crates.io/crates/log)\r\n- Change the code so the log prefix also include thread ids. It should live in `Logger::create_prefix(&self, record: &Record)` \r\n- Would be nice if you find a solution to use the thread names instead of ids like: **vmm, api, vcpu#0, vcpu#1** ..\r\n- Write unit and integration tests\r\n- Publish PR\r\n\r\nIf you get stuck along the way please reach out to us via Slack or this ticket.  ## Describe the bug\r\n\r\nDue to the current design, any failure on the vCPU resume path will cause Firecracker to exit before sending a response.\r\n\r\n## To Reproduce\r\n\r\n1. Create a snapshot that contains a corrupted vCPU state. \r\n2. Load the snapshot.\r\n\r\n## Expected behaviour\r\n\r\nFirecracker should exit after returning API response.\r\n\r\n## Environment\r\n\r\n- Firecracker version: v0.23.\r\n\r\n## Checks\r\n- [x] Have you searched the Firecracker Issues database for similar problems?\r\n- [x] Have you read the existing relevant Firecracker documentation?\r\n- [x] Are you certain the bug being reported is a Firecracker issue?\r\n  This `merge` is broken. I think you need to manually inspect if there are any commits in v0.22.0 branch which are not on master and cherry-pick those. At the very least there should be one such commit: the release one.  > What I see as the most elegant way of doing this is to add a default_members = [src/firecracker] in the root Cargo.toml and modify devtool to only build the jailer only for musl target. (you can use cargo build -p jailer for that).\r\n\r\nI like that! `devtool` does the right thing for both `gnu` and `musl`, while manual building can be done as simple as:\r\n```bash\r\n# for musl:\r\ncargo build             # <-- builds firecracker\r\ncargo build -p jailer   # <-- builds jailer\r\n\r\n# for gnu:\r\ncargo build --target x86_64-unknown-linux-gnu\r\n```  @gc-plp @dianpopa @georgepisaltu comments addressed, please take another look  \r\nAny time we change a `#[derive(Versionize)]` struct we need to bump the snapshot version. Recent experiences have shown that this is not obvious and can easily be missed in both dev and review.\r\n\r\nLet's add a warning comment for each such structure to raise visibility on this subtle requirement. Something like:\r\n\r\n```diff\r\n#[derive(Versionize)]\r\n/// Holds the device states.\r\n+// NOTICE: Any changes to this structure require a snapshot version bump.\r\npub struct DeviceStates {\r\n    /// Block device states.\r\n    pub block_devices: Vec<ConnectedBlockState>,\r\n    /// Net device states.\r\n    pub net_devices: Vec<ConnectedNetState>,\r\n    /// Vsock device state.\r\n    pub vsock_device: Option<ConnectedVsockState>,\r\n}\r\n```  Hi, @jmcconnell26! Thanks for the PR.\r\nCan you please squash all the commits into a single commit? \r\nThe commit must respect the 50/72 commit rule and it must be signed as in `git commit -s --amend`. > @iulianbarbu, thanks for the review!\r\n> I have updated the git history and made the requested change.\r\n> I'm not sure if the form is to put PR requested changes into their own commits or not, please let me know if you would like me to change this.\r\n\r\nPlease put the PR requested changes also in the first commit.  ## Reason for This PR\r\n\r\nupgrade vm-memory version to 0.2.2\r\n\r\n## Description of Changes\r\n\r\nupgrade vm-memory version to 0.2.2\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [x] All added/changed functionality is tested.\r\n > @serban300 there is this [issue](https://github.com/firecracker-microvm/firecracker/issues/1683) which never got resolved cause we still do not use BytedValue from vm-memory (see discussion there). Would you mind doing this change in this PR? (not necessary, just a nice to have, thanks!)\r\n\r\n@dianpopa I would do it in a separate PR, since I'm not sure what it would suppose. \r\n\r\nBut also, from what I understand this is only used by the kernel loader. If we plan to migrate to `linux-loader` later, I don't know if it's worth doing.   Hi @bluejekyll ! Thank you for the contribution !\r\n\r\nCould you also sign-off your commit using `git commit --amend -s` please ?\r\n\r\nAlso I think the commit title is enough. There's no need to detail the changes.  The `fio` part of the test is unreliable with sporadic fails:\r\n\r\n```bash\r\n____________________________ test_5_full_snapshots _____________________________\r\nintegration_tests/functional/test_snapshot_basic.py:278: in test_5_full_snapshots\r\n    test_matrix.run_test(_test_seq_snapshots)\r\nframework/matrix.py:151: in run_test\r\n    self._backtrack(test_fn, [])\r\nframework/matrix.py:126: in _backtrack\r\n    self._backtrack(test_fn, cartesian_product)\r\nframework/matrix.py:126: in _backtrack\r\n    self._backtrack(test_fn, cartesian_product)\r\nframework/matrix.py:126: in _backtrack\r\n    self._backtrack(test_fn, cartesian_product)\r\nframework/matrix.py:115: in _backtrack\r\n    self._run_test_fn(cartesian_product, test_fn)\r\nframework/matrix.py:137: in _run_test_fn\r\n    test_fn(self._context)\r\nintegration_tests/functional/test_snapshot_basic.py:180: in _test_seq_snapshots\r\n    _guest_run_fio_iteration(ssh_connection, i)\r\nintegration_tests/functional/test_snapshot_basic.py:24: in _guest_run_fio_iteration\r\n    assert exit_code == 0\r\nE   assert 255 == 0\r\n``` Fixed by PR #2067  Hi @sumatejit ,\r\n\r\nI am able to reproduce the issue only when I compile using devtool: \r\n```\r\n$ tools/devtool build\r\n``` \r\nand load the resulting binary with `rust-lldb` from outside the docker container that's used for building.\r\n\r\nHowever if I compile with `cargo` directly, it works: \r\n\r\n```\r\n$ cargo build\r\n$ lldb ./firecracker\r\n(lldb) run --api-sock /tmp/firecracker.socket.\r\n...\r\nroot@localhost:~# Process 19873 stopped\r\n* thread #1, name = 'firecracker', stop reason = signal SIGSTOP\r\n    frame #0: 0x0000000000801dd7 firecracker`epoll_pwait + 31\r\nfirecracker`epoll_pwait:\r\n->  0x801dd7 <+31>: cmpl   $-0x26, %eax\r\n    0x801dda <+34>: movl   %eax, %r10d\r\n    0x801ddd <+37>: jne    0x801df1                  ; <+57>\r\n    0x801ddf <+39>: testq  %r8, %r8\r\n(lldb) source list\r\n   32  \tfn main() {\r\n   33  \t    LOGGER\r\n   34  \t        .configure(Some(DEFAULT_INSTANCE_ID.to_string()))\r\n   35  \t        .expect(\"Failed to register logger\");\r\n   36  \t\r\n   37  \t    if let Err(e) = register_signal_handlers() {\r\n   38  \t        error!(\"Failed to register signal handlers: {}\", e);\r\n   39  \t        process::exit(i32::from(vmm::FC_EXIT_CODE_GENERIC_ERROR));\r\n   40  \t    }\r\n   41  \t\r\n```\r\n\r\nCould you try to build the executable using `cargo` and see if it works ? It's nice to hear that it works. I'll close the issue.  I like the idea of having a --test-mode switch with subparams. By itself it's not enough as we want different configs for different tests.\r\n\r\nShall we tackle this as a separate enhancement or do we think we can do it as part of this issue?  > I would use --verbose parameter to --version and only there add info on branches and githash on top of current info.\r\n\r\nThat should work, but it makes it harder to see whether a particular binary is a release or a custom build. `--version` would be the same for both, while `--verbose` would differ only by commit hash so it requires the user to go to the repo and compare hashes to find out if that binary is a release binary or a custom build.\r\n\r\nI'd like it if we could use `git tags` to make that differentiation and do something like: use `--version` which outputs:\r\n - for a release binary (local `HEAD` is at a particular `vX.Y.Z` tag): output is `vX.Y.Z`\r\n - for other builds (local `HEAD` does not match any release tag): output is `vX.Y.Z-branch-commit[-dirty]`\r\n\r\nWDYT?  ## Reason for This PR\r\n\r\n#1571 \r\n\r\n## Description of Changes\r\n\r\nAdded a virtio balloon device that supports statistics.\r\n\r\n**Note:** Because Firecracker uses a private anonymous mapping for freshly booted microVMs and private file-backed mapping for snapshot resumed microVMs, a `madvise` call for releasing memory is not sufficient to work in both cases.\r\nThis PR currently uses a hacky approach: before `madvise`, `mmap` a fresh private anonymous region over the one that we want the kernel to release.\r\n\r\nThere are still some things to be done:\r\n- take a closer look at the error handling\r\n- improve statistics tests\r\n- surface statistics through the metrics\r\n\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [x] All added/changed functionality is tested.\r\n  Is it possible that the Kata agent has hijacked the normal systemd shutdown process? \r\n\r\nhttps://github.com/kata-containers/agent/blob/2e94561eff7461b10def1f1c960a6a4fc5a874a6/kata-agent.service.in#L21\r\n\r\nSo you arrive at a halt via the `systemctl --force poweroff` rather than a `reboot` and firecracker exit?    > Have the same issue on #2041 .\r\n\r\nLooking into it.  Hi @Pennyzct , it is really nice to see this! We were looking forward to this kind of functionality, see #1339 which was being tracked as part of our efforts to match all x86_64 functionality on aarch64 too. I will be helping you in having your PR reviewed and passing the CI testing.\r\n\r\nThanks,\r\nDiana  > nit: you're adding the PATCH drive test in the existing seq snapshot test and then moving it in a separate test in another commit. I would directly add the specific test and not go through altering the existing one\r\n\r\nYes, this was for easier reviewing so we can decide on which option we want, the plan was to squash them eventually but I forgot :see_no_evil:   Hi @damienstanton , thanks for the PR! Looking forward to upgrading firecracker to rust edition 2018. I will be helping you with these changes and the CI testing. Will get in touch with you on our slack channel.\r\n\r\nThanks,\r\nDiana  Decided to rewrite the functionality in Rust.      This will mostly mean saving and restoring the vgic's registers: distributor, redistributor and the state of the cpu interfaces.  In order to obtain the guest registers that are supported for the KVM_GET_ONE_REG/KVM_SET_ONE_REG ioctl, we need to be able to call into KVM_REG_LIST. See https://github.com/rust-vmm/kvm-ioctls/issues/104.  In line 163, how can you know the cause of throttling? I think it's best to have only one metric that incorporates both cases.  I think it depends on what you are trying to achieve,  if it's just to boot a simple image then the following works for me.\r\n\r\n1) Use a firecracker kernel (i.e. the hello-world kernel from the get-started page)\r\n2) Use the `flatcar-container.tar.gz` image\r\n3) Create a rootfs from the container image via `virt-make-fs -t ext4 flatcar-container.tar.gz flatcar.ext4`, or something simliar\r\n4) Use the following config.json:\r\n```\r\n{\r\n  \"boot-source\": {\r\n    \"kernel_image_path\": \"vmlinux\",\r\n    \"boot_args\": \"mount.usrflags=ro BOOT_IMAGE=/flatcar/vmlinuz-a mount.usr=/dev/mapper/usr verity.usr=PARTUUID=7130c94a-213a-4e5a-8e26-6cce9662f132 consoleblank=0 flatcar.first_boot=detected flatcar.randomize_disk_guid=00000000-0000-0000-0000-000000000001 verity.usrhash=2ba8709773c62cf8a4feb3651ca220ce633340ec9de142f80c412d43a7f78253 console=ttyS0 noapic reboot=k panic=1 pci=off keep_bootcon\"\r\n  },\r\n  \"drives\": [\r\n    {\r\n      \"drive_id\": \"rootfs\",\r\n      \"path_on_host\": \"<full_path_to>/flatcar.ext4\",\r\n      \"is_root_device\": true,\r\n      \"is_read_only\": false\r\n    }\r\n  ],\r\n  \"machine-config\": {\r\n    \"vcpu_count\": 1,\r\n    \"mem_size_mib\": 1024,\r\n    \"ht_enabled\": false\r\n  }\r\n}\r\n```\r\nThat gets me as far as the login prompt. \r\n\r\nThe errors you're getting above makes me suspect that the disk images you're attempting to load have UEFI boot partitions,  and I don't know if firecracker supports those. \r\n I'm not sure this will help either (from [your kernel config](https://stable.release.flatcar-linux.net/amd64-usr/current/flatcar_production_image_kernel_config.txt)):\r\n```\r\n CONFIG_VIRTIO_MMIO=m\r\n# CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES is not set\r\n```\r\nPerhaps leading to the following when trying to `modprobe virtio_mmio` in the dracut emergency shell: \r\n```\r\n[  605.120147] virtio_mmio: unknown parameter 'device' ignored\r\n```\r\nMaybe it's not finding the MMIO bus, and hence the block device?   So yeah,  maybe the flatcar kernel would need tweaked in order to work.   > Hello @iulianbarbu and @acatangiu, sorry for the late reply I've been on vacation last days. I'll take care of submitting commits addressing both changes. The support for `--node` attribute and the separator change.\r\n\r\nCool! Let us know if you need any help or feedback. > Hello @iulianbarbu, I've been thinking and making some test regarding changing the separator. I think that probably using `;` as separator could be a bad idea too, as it might be interpreted by bash. \r\n\r\nYes, sure. I think a workaround for this would be to require escaping: `--cgroups \"cpuset.mems=0;cpuset.cpus=1,2,8-10\"`.\r\n\r\n> I think that maybe we could use a different approach, something like:\r\n> \r\n> ```\r\n> jailer ... --cgroup cpuset.mems=0 --cgroup cpuset.cpus=1-3,4 ... \r\n> ```\r\n> \r\n> This way we use different arguments as separator, it seems cleaner to me. I've prepare a commit with a prototype for supporting this into the arg parser: [christian7007@979873f](https://github.com/christian7007/firecracker/commit/979873f36e0e1c9e9a83c92771865b85ecf53cfc)\r\n> \r\n> What do you think about it? If you think this solution is good enough I can open a new PR with the parser changes and work over it.\r\n\r\nThis might work. I do not have a strong preference for one or the other. As @lauralt  pointed, we must make sure we handle properly cases which map to `DuplicateArgumentError`. Such cases can happen for both available alternatives. Other than that, I would gladly appreciate any input from the others reviewers. I am not sure if there is a best way to choose between both alternatives, but I think there are some guidelines which we can use, like:\r\n\r\n* comparing the final user experience for both alternatives in terms of clarity and simplicity.\r\n* arguments combination corner cases handled properly.\r\n* significant performance turnoffs, when we compare the two alternatives, since their on the hot path for starting a microVM.\r\n* overall implementation details.\r\n\r\nI guess we want to give it some thought, and then align on it. Let me have it discussed inside the team. I'll come back with an update soon.\r\n\r\n Hi, @christian7007 !\r\nWe've decided to move forward with the alternative where you have multiple `--cgroup` flags:\r\nE.g `--cgroup \"cpuset.cpus=1, 2\" --cgroup cpuset.mems=0,1 etc.`\r\n\r\nLet us know if we can help with anything. > Hi @iulianbarbu, perfect, I'll prepare a new commit with those changes. Regarding the support for duplicates arguments at the `ArgParser`, should I open a new PR for this or it's ok to submit the changes in this PR?\r\n\r\nII would prefer to review all the changes in the same PR. You can add first the support for multiple args, in a commit, then the support for `--cgroup` flag. I'll take over from there and review all the changes together.  Running `clippy::integer_arithmetic` on micro_http shows many operations that can overflow and have no bounds check in place. Index-out-of-bounds situations should also be checked.  To make this work we need to add support for dirty page tracking to `vm-memory`. Guest pages dirtied by the `firecracker` process (during device emulation for example) are not guaranteed to be caught/reported by KVM's dirty page tracking.  @defunctio do you still want to work on this PR? Any help needed?  ## Reason for This PR\r\n\r\nThis PR removes a potential panic condition caused by the virtio net device expecting to find a vnet header in every frame. In case a malformed shorter frame shows up on the TX path (large enough buffers make sure that it can't happen on RX), error messages are now logged and a dedicated metric is emitted. With this occasion, several unused device error variants have been removed.\r\n\r\n## Description of Changes\r\n\r\n* When processing a TX frame, Firecracker no longer `panic`s if it's missing the vnet header. Instead, it propagates an error and increments a metric.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n PS: coverage on AMD needs updating  ## Reason for This PR\r\n\r\nPartially addresses #1975 and #1976 \r\n\r\n## Description of Changes\r\n\r\nAny number of whitespace characters are accepted after \":\" when parsing HTTP headers.\r\n\r\n- [ ] This functionality can be added in [`micro-http`](https://github.com/firecracker-microvm/firecracker/tree/master/src/micro_http).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n @aghecenco Thanks for your review! I fixed them. > Couple more nits. I'd still prefer if all the commits were squashed into a single one as the changes are small and logically connected.\r\n\r\nThe commit message could be rephrased to something like this: \"Any number of whitespace characters are accepted after \":\" when parsing HTTP headers.\"  Thanks for finding this and providing such detailed steps of reproduction. To me it looks like \"Patch drive\" does not update the path in the block device emulation. The snapshot is created without this update. \r\nWe'll try to prioritize the fix.\r\n  Are there any cgroups version considerations to doing this?  For example, the Fedora (post-31) defaults are podman/cgroups v2.  For me, podman worked ok, but the tests for the jailer failed (I believe it still requires cgroups v1), so I had to revert to docker/cgroups v1.    It was my own incantation.  It was probably just sufficient to run, but nothing more. \r\n\r\nThis is the error that led me to believe rootless podman (which appears to require cgroups v2) might not fly: \r\n```\r\nE   Exception: thread 'main' panicked at 'Jailer error: cpu configurations not found in /proc/mounts', src/jailer/src/main.rs:353:27\r\n```\r\nWhich I interpreted as the the jailer confirming the cgroups v1 structures in /proc/mounts,  which don't appear to be there under Fedora/cgroups v2.  Perhaps this is just a Fedora problem,  or some other cgroups configuration issue though.  This is somewhat covered by the bigger picture of switching to [`linux-loader` from rust-vmm](https://github.com/rust-vmm/linux-loader/) (https://github.com/firecracker-microvm/firecracker/issues/1860).\r\nThere's a [test](https://github.com/rust-vmm/linux-loader/blob/ec930d700f43458f191ee50404810a155accb0ec/src/loader/x86_64/elf/mod.rs#L464) there for this scenario.  Alternatively, this sentence should provide the missing object in the phrase \"expose access to a minimal ???????\"\r\n\r\n## Reason for This PR\r\n\r\n`[This sentence is not grammatically correct]`\r\n\r\n## Description of Changes\r\n\r\n`[Amend sentence to make it grammatically correct]`\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [N/A] All commits in this PR are signed (`git commit -s`).\r\n- [X] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [X] The description of changes is clear and encompassing.\r\n- [X] Any required documentation changes (code and docs) are included in this PR.\r\n- [N/A] Any newly added `unsafe` code is properly documented.\r\n- [N/A] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [N/A] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Also, please edit your commit message to follow the[ 50/72 commit rule](https://www.midori-global.com/blog/2018/04/02/git-50-72-rule). In this particular case, you can actually remove the message and leave only the title, something like: `docs: remove extra article \"the\"`.  Hi, @CalebAlbers! Thanks for the fix; please, sign your commit: `git commit -s --amend`.   Changelog and integration tests for intel and amd would be nice > > Changelog and integration tests for intel and amd would be nice\r\n> \r\n> @dianpopa\r\n> \r\n> For the moment we keep the current soft limitation of 32 vcpus, so we can't add integration tests, since the API won't allow more then 32 vcpus. Also considering this, I don't know if a Changelog entry would make sense. WDYT ?\r\n\r\nNo, it does not, we can merge this as it is.  `SYS_getpid` is getting issued, and it's not whitelisted so it causes a seccomp fault that terminates firecracker. To work around the issue, you can start with seccomp disabled (`--seccomp-level 0` in the command line) but it would be interesting to know where the syscall is coming from. Can you run firecracker under `strace` to find it?\r\nWe also have a bunch of seccomp improvements in mind, one of them being an externally specified whitelist so users don't have to recompile firecracker to allow new syscalls: #1366  I am not sure we need to do this as part of the build system. I would leave the build system just as it is and move the stripping a step further into the release pipeline where the binary is stripped and a copy of the original is kept in cold storage for debugging purposes.\r\n@firecracker-microvm/compute-capsule WDYT ? > I think we should keep `./devtool build` as is. The current logic of `./devtool build` is to pass all the flags directly to `cargo build`. I've personally abused this functionality (and I find it very nice) to do things such as building firecracker with gnu. I personally prefer to have another `build-stripped` command that doesn't pass the flags to cargo build directly.\r\n\r\n+1 on this. Let's just have `devtool build` unchanged. Looks like strip is available in the dev container, why not make it available via `devtool strip`  @kzys please update the coverage target for x86_64.  ## Reason for This PR\r\n\r\n#1848\r\n\r\n## Description of Changes\r\n\r\nAdded metrics that measure the duration of creating a full or diff snapshot and of loading from a snapshot.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n I want to make sure we implement this in such a way that these metrics provide maximum value to the end user and not just for development. Let's sync up offline on this one.  This error has not been seen in a while, seems to have been fixed by ulterior fixes to our CI pipeline. Feel free to reopen if issue happens again.  Hi @Vesnica! Firecracker does not support macvtap yet. What is your exact usecase ? Macvtap simplifies the networking setup, but otherwise you can still use tap + bridge.  The issue here seems to be related to the guest memory size. Basically, trying to resume from a snapshot that was created on a microVM with a memory > 2048MiB will make the guest panic.\r\n\r\nThis was tested with the following kernel images: https://s3.amazonaws.com/spec.ccfc.min/img/minimal/kernel/vmlinux.bin (kernel 4.14.55), https://s3.amazonaws.com/spec.ccfc.min/img/ubuntu/kernel/vmlinux.bin (kernel 4.9.0) and https://s3.amazonaws.com/spec.ccfc.min/img/ubuntu_with_ssh/kernel/vmlinux.bin (kernel 4.9.0+), as well as with other images that were built manually using the kernel config from: `/firecracker/resources/microvm-kernel-x86_64.config`.\r\n\r\nSteps to reproduce:\r\n\r\n- start a new Firecracker process\r\n- configure the microVM with the following relevant resources:\r\n```bash\r\nkernel_path=$(pwd)\"/firecracker/build/img/x86_64/ubuntu_with_ssh/kernel/vmlinux.bin\"\r\ncurl --unix-socket /tmp/firecracker.socket -i \\\r\n        -X PUT 'http://localhost/boot-source'   \\\r\n        -H 'Accept: application/json'           \\\r\n        -H 'Content-Type: application/json'     \\\r\n        -d \"{\r\n              \\\"kernel_image_path\\\": \\\"${kernel_path}\\\",\r\n              \\\"boot_args\\\": \\\"console=ttyS0 reboot=k panic=1 pci=off\\\"\r\n         }\"\r\n\r\nrootfs_path=$(pwd)\"/firecracker/build/img/x86_64/ubuntu_with_ssh/fsfiles/xenial.rootfs.ext4\"\r\n  curl --unix-socket /tmp/firecracker.socket -i \\\r\n    -X PUT 'http://localhost/drives/rootfs' \\\r\n    -H 'Accept: application/json'           \\\r\n    -H 'Content-Type: application/json'     \\\r\n    -d \"{\r\n          \\\"drive_id\\\": \\\"rootfs\\\",\r\n          \\\"path_on_host\\\": \\\"${rootfs_path}\\\",\r\n          \\\"is_root_device\\\": true,\r\n          \\\"is_read_only\\\": false\r\n     }\"\r\n\r\ncurl --unix-socket /tmp/firecracker.socket -i  \\\r\n    -X PUT 'http://localhost/machine-config' \\\r\n    -H 'Accept: application/json'            \\\r\n    -H 'Content-Type: application/json'      \\\r\n    -d '{\r\n        \"vcpu_count\": 2,\r\n        \"mem_size_mib\": 2560,\r\n        \"ht_enabled\": false\r\n    }'\r\n```\r\n- create a full snapshot:\r\n```\r\ncurl --unix-socket /tmp/firecracker.socket -i \\\r\n     -X PATCH \"http://localhost/vm\" \\\r\n     -H  \"accept: application/json\" \\\r\n     -H  \"Content-Type: application/json\" \\\r\n     -d \"{\r\n            \\\"state\\\": \\\"Paused\\\"\r\n        }\"\r\n\r\n\r\ncurl --unix-socket /tmp/firecracker.socket -i \\    \r\n       -X PUT \"http://localhost/snapshot/create\" \\\r\n       -H  \"accept: application/json\" \\ \r\n       -H  \"Content-Type: application/json\" \\  \r\n       -d \"{\r\n             \\\"snapshot_path\\\": \\\"file1\\\",\r\n             \\\"mem_file_path\\\": \\\"file2\\\"\r\n    }\"\r\n```\r\n- kill the current Firecracker process\r\n- start a new Firecracker process\r\n- try to resume from the snapshot:\r\n```bash\r\ncurl --unix-socket /tmp/firecracker.socket -i \\ \r\n   -X PUT \"http://localhost/snapshot/load\" \\  \r\n   -H  \"accept: application/json\" \\\r\n   -H  \"Content-Type: application/json\" \\  \r\n   -d \"{\r\n             \\\"snapshot_path\\\": \\\"file1\\\",\r\n             \\\"mem_file_path\\\": \\\"file2\\\"\r\n    }\"\r\n\r\ncurl --unix-socket /tmp/firecracker.socket -i \\\r\n     -X PATCH \"http://localhost/vm\" \\\r\n     -H  \"accept: application/json\" \\\r\n     -H  \"Content-Type: application/json\" \\\r\n     -d \"{\r\n            \\\"state\\\": \\\"Resumed\\\"\r\n        }\"\r\n```\r\nYou should see that the guest panics after \"successfully\" resuming from snapshot:\r\n\r\n```\r\n2020-06-05T09:16:03.728526312 [anonymous-instance] Received KVM_EXIT_SHUTDOWN signal\r\n2020-06-05T09:16:03.728526400 [anonymous-instance] Received KVM_EXIT_SHUTDOWN signal\r\n2020-06-05T09:16:03.728669109 [anonymous-instance] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-05T09:16:03.728690795 [anonymous-instance] Vmm is stopping.\r\n```\r\nThe guest doesn't get the chance to tell us something.\r\n\r\nA much more user-friendly crash behavior happens when you try to configure the microVM with exactly 2048 or 2049 MiB.\r\n\r\nFor example, if you configure a microVM with the following kernel and 2048MiB, the guest succeeds to resume, but after navigating a bit through directories and sending, for example, a ls command, the guest crashes:\r\n```\r\nroot@7e47bb8f2f0a:/dev# \r\nroot@7e47bb8f2f0a:/dev# ls\r\n[   30.532560] BUG: unable to handle kernel NULL pointer dereference at 0000000000000008\r\n[   30.544539] IP: [<ffffffff81128937>] __pagevec_lru_add_fn+0xf7/0x200\r\n[   30.554283] PGD 0 [   30.556484] \r\n[   30.559014] Oops: 0002 [#1] SMP\r\n[   30.563733] CPU: 1 PID: 987 Comm: bash Not tainted 4.9.0 #21\r\n```\r\nConfiguring the vm with the same resources, but with 2047MiB doesn't cause any (obvious) issues, the vm can be used.\r\n\r\nAnother example: if you configure the microVM with the following kernel and 2049MiB, the guest crashes from the beginning with the following output:\r\n\r\n```\r\n[   14.894149] BUG: unable to handle kernel paging request at 0000000000021740\r\n[   14.897933] IP: [<ffffffff81126cc1>] next_online_pgdat+0x1/0x50\r\n[   14.900347] PGD 0 [   14.900959] \r\n[   14.901658] Oops: 0000 [#1] SMP\r\n[   14.902673] Modules linked in:\r\n[   14.903724] CPU: 1 PID: 245 Comm: kworker/1:1 Not tainted 4.9.0+ #96\r\n```\r\nAgain, configuring the vm with the same resources, but with 2048MiB this time, doesn't cause any (obvious) issues and the vm can be used.\r\n\r\nChanging the rootfs image (or other configurations) doesn't seem to cause a different behavior.\r\n\r\nThese issues are reproducible on various machines, the particular output from here was obtained on my laptop.\r\n\r\nThe first suspect here is the way we save the guest memory (and restore it) when creating (or resuming from) a snapshot.\r\n Fixed by  #1946  Shall I squash the  commits?  Just to tidy things up.....\r\n\r\nAlso, I still not 100% sure I understand why the CI/CD pipeline sometimes fails catastrophically,  as opposed to failing at the right tests..... Hi @gc-plp, \r\n\r\nThanks very much for picking this up!  I've updated the `boot_args` as requested.  Unfortunately,  I'm not seeing the update to the `boottime-rootfs.ext4` file; both old and new files look the same to me: \r\n\r\n```\r\nsha256sum *\r\n635d86bf8b7ffc6859cb75b0ba4764b4e08b664e589c49ff60c82fb568ca021a  boottime-rootfs.ext4\r\n635d86bf8b7ffc6859cb75b0ba4764b4e08b664e589c49ff60c82fb568ca021a  boottime-rootfs_old.ext4\r\n```\r\nAm I looking in the right place?  Or was there a wee s3 push/sync issue? \r\n\r\nI guess that the `aarch64` boottime image and both `initrd.img` files will also need updating if we're taking this approach of specifying a new init file location.  \r\n> Could you delete the `build/` folder and run the build again?\r\n\r\nThanks @gc-plp,  apologies,  I hadn't realised the images were cached.  Hi @gc-plp, \r\n\r\nBooting seems to go a whole lot quicker without `console=ttyS0`.  Are these parameters definitely pathed in somewhere at the moment?\r\n```\r\nconsole=ttyS0 reboot=k panic=1 pci=off\r\n```\r\nWe've not added them in unintentionally?  @gc-plp,  think that's done.  I had to tweak the pylint config to take the expanded argument name, but I think that's ok.  The x86_64 CI run failed for some unknown reason.... Phew!!  Thanks very much @iulianbarbu, @acatangiu, @andreeaflorescu, @lauralt, @gc-plp,  for all your help, reviews and feedback.  Very much appreciated.   @gc-plp @iulianbarbu @raduiliescu This PR looks good and the functionality useful, do we want to merge it? > > @gc-plp @iulianbarbu @raduiliescu This PR looks good and the functionality useful, do we want to merge it?\r\n> \r\n> IMO we should merge it after performance framework/ci changes are done.\r\n\r\nIndeed, that's how I see it. I think we can let it open until we put to rest the two RFCs pending around testing framework ( #2041 and #2051 ), which will provide reproducible runs for this test.  Is the issue fixed by this PR ?  Closing this issue for the moment. Please feel free to reopen it if you have more questions.  > The binary size test failure should be fixed by merging and rebasing #1841.\r\n> \r\n> To address the python styling failure, I created issue #1913\r\n\r\n\r\n\r\nWhere is the increase in size coming from ? Is it just the upgrade of the toolchain ? I am little bit worried about this since we already inflated the binary with versioned serialization support. Hello @timvisee! While we are looking into this problem, could you please squash the two clippy commits together? It would make for a cleaner git log \ud83d\ude04  Hi @timvisee , can you try adding this modification to the other 2 tests in `vmm` crate that create a Tap? They are `builder::test_attach_net_devices` and `persist::test_microvm_state_versionize` That's great! One more nit: could you also reword the commit messages in order to keep the [50/72 rule](https://www.midori-global.com/blog/2018/04/02/git-50-72-rule) ? Hi @timvisee , can you please add the coverage change in the last commit? We don't usually use a separate one just for this. We should still check where the increase in binary size comes from and if we can lower it. > > We should still check where the increase in binary size comes from and if we can lower it.\r\n> \r\n> @ioanachirca Is this something that can be done in a separate issue/PR? This PR didn't introduce significant code changes.\r\n\r\nI would rather reach a conclusion about this now (it is related to the Rust update after all), rather than introduce a (maybe) avoidable change and have to fix it later (or postpone it until it's forgotten). Running `cargo bloat --release -n 15` on current `master` branch:\r\n\r\n```\r\n File  .text      Size       Crate Name\r\n 2.3%   5.2%   67.1KiB  api_server api_server::parsed_request::ParsedRequest::try_from_request\r\n 1.2%   2.7%   34.8KiB         vmm vmm::builder::build_microvm\r\n 0.9%   2.1%   26.5KiB firecracker firecracker::main\r\n 0.8%   1.8%   22.8KiB  micro_http micro_http::server::HttpServer::requests\r\n 0.8%   1.7%   22.1KiB         vmm vmm::persist::create_snapshot\r\n 0.7%   1.5%   19.0KiB         vmm <vmm::vstate::VcpuState as versionize::Versionize>::serialize\r\n 0.6%   1.5%   18.8KiB         vmm vmm::resources::VmResources::from_json\r\n 0.6%   1.3%   17.2KiB  api_server api_server::ApiServer::handle_request\r\n 0.6%   1.3%   16.8KiB         vmm <vmm::persist::MicrovmState as versionize::Versionize>::serialize\r\n 0.5%   1.1%   13.8KiB         vmm vmm::builder::configure_system_for_boot\r\n35.0%  78.9% 1013.2KiB             And 1690 smaller methods. Use -n N to show more.\r\n44.3% 100.0%    1.3MiB             .text section size, the file size is 2.8MiB\r\n```\r\n\r\nRunning `cargo bloat --release -n 15` on this branch:\r\n\r\n```\r\n File  .text    Size        Crate Name\r\n 2.1%   4.7% 64.6KiB   api_server api_server::parsed_request::ParsedRequest::try_from_request\r\n 1.4%   3.0% 41.6KiB          vmm <vmm::vstate::VcpuState as versionize::Versionize>::serialize\r\n 1.1%   2.5% 34.9KiB          vmm vmm::builder::build_microvm\r\n 0.8%   1.8% 24.8KiB  firecracker firecracker::main\r\n 0.8%   1.7% 23.8KiB          vmm vmm::persist::create_snapshot\r\n 0.6%   1.4% 19.1KiB          vmm vmm::resources::VmResources::from_json\r\n 0.6%   1.4% 18.8KiB    [Unknown] _ZN9libunwind10CFI_ParserINS_17LocalAddressSpaceEE17parseInstructionsERS1_mmRKNS2_8CIE_InfoEmRPNS2_20PrologInf...\r\n 0.6%   1.3% 18.4KiB   micro_http micro_http::server::HttpServer::requests\r\n 0.5%   1.1% 15.2KiB      devices devices::virtio::net::device::Net::process_tx\r\n 0.5%   1.0% 14.4KiB          vmm vmm::builder::configure_system_for_boot\r\n 0.5%   1.0% 14.0KiB          vmm <vmm::device_manager::persist::DeviceStates as versionize::Versionize>::serialize\r\n 0.5%   1.0% 13.8KiB firecracker? <firecracker::api_server_adapter::ApiServerAdapter as polly::event_manager::Subscriber>::process\r\n 0.4%   0.9% 13.0KiB      devices <devices::virtio::vsock::unix::muxer::VsockMuxer as devices::virtio::vsock::VsockEpollListener>::notify\r\n 0.4%   0.9% 12.0KiB   api_server api_server::ApiServer::handle_request\r\n 0.4%   0.9% 11.8KiB         mmds mmds::parse_request\r\n33.7%  74.5%  1.0MiB              And 1670 smaller methods. Use -n N to show more.\r\n45.3% 100.0%  1.3MiB              .text section size, the file size is 3.0MiB\r\n```\r\n\r\nWe can see that the binary file size increased from `2.8MiB` to `3.0MiB`, so setting the limit to `3.5MiB` is too high. \r\nA rather big difference comes from `vmm <vmm::vstate::VcpuState as versionize::Versionize>::serialize` which doubled from `19KiB` to `41.6KiB`. \r\nAlso, `_ZN9libunwind10CFI_ParserINS_17LocalAddressSpaceEE17parseInstructionsERS1_mmRKNS2_8CIE_InfoEmRPNS2_20PrologIn...` (`libunwind`) increased from `8.4KiB` to `18.8KiB` > > We can see that the binary file size increased from 2.8MiB to 3.0MiB, so setting the limit to 3.5MiB is too high.\r\n> \r\n> I think the _target_ should be the current size and the _limit_ should be +10% or +15%.\r\n> \r\n> > A rather big difference comes from vmm <vmm::vstate::VcpuState as versionize::Versionize>::serialize which doubled from 19KiB to 41.6KiB.\r\n> \r\n> We should open an issue for this and investigate (but not block this PR).\r\n> \r\n> > _ZN9libunwind10CFI_ParserINS_17LocalAddressSpaceEE17parseInstructionsERS1_mmRKNS2_8CIE_InfoEmRPNS2_20PrologIn... (libunwind) increased from 8.4KiB to 18.8KiB\r\n> \r\n> I believe this will go away altogether with #1841\r\n\r\nSGTM. I'll open an issue. @timvisee , could you update the binary *limit*? > @ioanachirca Sure, what limit(s) should I choose though?\r\n> \r\n> This is what I came up with based on the last CI results:\r\n> \r\n> ```python\r\n> FC_BINARY_SIZE_TARGET = 3124000 if MACHINE == \"x86_64\" else 3349336\r\n> FC_BINARY_SIZE_LIMIT = 3300000 if MACHINE == \"x86_64\" else 3500000\r\n> ```\r\n\r\nSeems fine.  It does say that it is a bash script \ud83d\ude04  I think a solution that keeps compatibility with more shells is to add this line at the beginning of the script: `#!/usr/bin/env bash`, what do you think? > > Hi @Mehigh17,\r\n> > Simplifying the Getting Started guide is a good idea, but I just took a closer look at the [devtool](https://github.com/firecracker-microvm/firecracker/blob/master/tools/devtool) script and it looks like [line 837](https://github.com/firecracker-microvm/firecracker/blob/master/tools/devtool#L837) already contains a compatibility checker.\r\n> > I recommend that you take a look at what devtool implements and if it does not check functionality that the current Getting Started guide contains, you can add it.\r\n> > Eventually, the Getting Started guide should point to the `devtool` script.\r\n> \r\n> Indeed I think it's much better to point to that script to have a more consistent check than having two scripts where one might pass and the other fail. I updated the documentation and removed the separate script I've created before.\r\n\r\nMy two cents: it is not very first-time user friendly to have to download the repository just to check that the system meets the requirements. @acatangiu @aghecenco updated PR with suggested changes. Please take another look.  @ioanachirca @acatangiu @sandreim @aghecenco I addressed your comments, please take another look!  We need to have some baseline numbers for each test per arch and a fast integration test that validates the benchmark against the baseline.  ## Reason for This PR\r\n\r\nThis PR is publishing basic synthetic state serialization benchmarks. As snapshot functionality becomes available we will publish the a full breakdown of microvm save/restore for various configurations:\r\n- state serialization/deserialization\r\n- kvm state save/restore\r\n- device save/restore\r\n- overall save/restore latency.\r\n\r\n## Description of Changes\r\n\r\nIn commit messages.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n > nit: I think the commits could be squashed since the new results are obtained I suppose for the new sample size.\r\n\r\nOne changes code, the other changes docs. I think they need to be reviewed separately. I've addressed the comments, please review again @aghecenco @lauralt   ## Reason for This PR\r\n\r\n#1688\r\n\r\n## Description of Changes\r\n\r\n#1688, with the following additions:\r\n\r\n* documented `--start-time-us` and `--start-time-cpu-us`, fixed `start-time-cpu-us` typo\r\n* one unit test for jailed (#363) to counter imprecise kcov results preventing coverage test to pass\r\n  * the most relevant issue for this behavior I've found is https://github.com/rust-lang/rust/issues/55352\r\n\r\n...and with the exception for:\r\n\r\n>Segregate mandatory and optional arguments properly.\r\n\r\nSee https://github.com/firecracker-microvm/firecracker/issues/1688#issuecomment-623550854.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Any required documentation changes (code and docs) are included in this PR.\r\n- [ ] Any newly added `unsafe` code is properly documented.\r\n- [ ] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n It seems that this got collided with #1861. What a time to be alive!\r\n\r\nI can rebase the missing pieces if needed.\r\n\r\nAlso, it seems that this is getting hit by #1834, because `tools/devtool test -- -k build` works just fine. @ioanachirca should I bump the `COVERAGE_TARGET_PCT`? >Also, please can you squash your commits into a single one? There is no need to have a separate commit for minor changes like the `ArgVals` instantiation update or other small changes that we requested in review.\r\n\r\nSquashed into 184763678f46c5dd6d33e82ea33efad694d84c42.\r\n\r\n> It would be awesome if you could adjust your commit title to follow the [50/72 commit rule](https://www.midori-global.com/blog/2018/04/02/git-50-72-rule).\r\n\r\nApplied 50/72 to 184763678f46c5dd6d33e82ea33efad694d84c42.\r\n\r\nI was initially trying to replicate the convention from `git log`, but that rule wasn't that easy to infer.\r\n\r\nPerhaps the [Contribution Quality Standards](https://github.com/firecracker-microvm/firecracker/blob/master/CONTRIBUTING.md#contribution-quality-standards) can be updated to reflect this practice? > You mean we should add the 50/72 rule explicitly there? It is indeed pretty hidden [here](https://github.com/erlang/otp/wiki/writing-good-commit-messages).\r\n\r\nThanks, totally missed that.\r\n\r\nAlso, the Buildkite runner seems to be stuck on `git clone` stage with the \"permission denied\" error, no matter how many times it gets restarted: https://buildkite.com/firecracker/firecracker-ci-amd/builds/120  Note to self: measure the performance impact, if any, of replacing the embedded `kernel` crate with `linux-loader`. 2nd note to self: investigate impact on binary size  Used benchmark in PR #1878 to determine how the performance degradation scales with the number of new versions added in the version map:\r\n\r\n- 4 versions -  serialize 239.57 us, deserialize 79.859 us\r\n- 100 versions -  serialize 477.26  us, deserialize 315.40  us\r\n- 1000 versions - serialize 2.5948 ms, deserialize 2.4318 ms \r\n\r\n**At least for the next 10 releases it is safe to go ahead with a 1:1 mapping of the Firecracker version to snapshot version.**\r\nClosing the issue and now tracking possible performance optimizations in issue #1879.  Test suite completed by PR #2067.  ## Reason for This PR\r\n\r\nWe've decided  to completely remove `backtrace` dependency because of the following reasons:\r\n- the backtrace wasn't useful for us (Firecracker team) in the debugging process :(,\r\n- requires `musl-gcc` to be installed (`musl-tools`),\r\n- prints the stack only in `--release` mode,\r\n- caused us some troubles; see: #1088 for details -> forces us to whitelist some syscalls, which we are trying to avoid as much as possible.\r\n\r\n\r\nWe are curious if someone from the community was actually helped by our backtrace or if someone has an idea of how can we improve the generated backtrace. Any feedback would be greatly appreciated :blush:.\r\n\r\n\r\nAs an example, for the following panic message:\r\n\r\n```\r\n2020-04-28T14:01:47.106739566 [anonymous-instance:ERROR:src/firecracker/src/main.rs:67] Firecracker panicked at 'Error creating the HTTP server: IOError(Os { code: 98, kind: AddrInUse, message: \"Address in use\" })', src/api_server/src/lib.rs:104:26\r\n```\r\n\r\nThe backtrace stack would be:\r\n\r\n```2020-04-28T14:21:37.051916121 [anonymous-instance:ERROR:src/firecracker/src/main.rs:77]    0: firecracker::main::{{closure}}\r\n   1: std::panicking::rust_panic_with_hook\r\n             at src/libstd/panicking.rs:474\r\n   2: rust_begin_unwind\r\n             at src/libstd/panicking.rs:378\r\n   3: core::panicking::panic_fmt\r\n             at src/libcore/panicking.rs:85\r\n   4: core::option::expect_none_failed\r\n             at src/libcore/option.rs:1211\r\n   5: api_server::ApiServer::bind_and_run\r\n   6: std::sys_common::backtrace::__rust_begin_short_backtrace\r\n   7: core::ops::function::FnOnce::call_once{{vtable.shim}}\r\n   8: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once\r\n             at /rustc/4fb7144ed159f94491249e86d5bbd033b5d60550/src/liballoc/boxed.rs:1017\r\n   9: <alloc::boxed::Box<F> as core::ops::function::FnOnce<A>>::call_once\r\n             at /rustc/4fb7144ed159f94491249e86d5bbd033b5d60550/src/liballoc/boxed.rs:1017\r\n      std::sys_common::thread::start_thread\r\n             at src/libstd/sys_common/thread.rs:13\r\n      std::sys::unix::thread::Thread:\ud83c\udd95:thread_start\r\n             at src/libstd/sys/unix/thread.rs:80\r\n\r\nAborted\r\n```\r\nThe only line that seems to be relevant is:\r\n\r\n`5: api_server::ApiServer::bind_and_run,`\r\n\r\nbut this would be the function that contains the line that is printed in the error message (by `error!`, not `backtrace`), so it's not really helpful.\r\n\r\nFixes: #1088.\r\n\r\n## Description of Changes\r\n\r\nAt this moment, just removed the `backtrace` dependency. Needs some more investigation if we can simplify things in other places.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n My proposal \r\n\r\n> Our current Dockerfile can not be used anymore for building a container image because it uses rust version `1.39` and the latest cargo audit version requires rust `1.40` (see [Requirements](https://github.com/RustSec/cargo-audit#requirements)). I will open an issue for updating to the latest rust version.\r\n\r\nMy proposal here is to unblock this PR by leaving the same version of rust (i.e 1.39) and cargo audit (0.10.0) in the docker and only focusing on removing backtrace. Later, when the update to rust 1.43 is done we can upgrade both of them simultaneously. See my comment in the code for how we can install a specific version of with `cargo install`.  Add metrics tracking for the vsock devive similar to the network virtio\r\ndevice.\r\n\r\nSigned-off-by: Joshua Abraham <sinisterpatrician@gmail.com>\r\n\r\nI'm not sure if you have additional metrics you'd want to capture in the vsock module, or if the CHANGELOG needs to be updated :)\r\n\r\n## Reason for This PR\r\n\r\nCloses #1210.\r\n\r\n## Description of Changes\r\n\r\nThis patch adds metrics tracking for the vsock virtio device TX and RX code paths.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [ ] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Hi, @jabedude! We had some discussions lately on improving/rethinking our metrics system. This would involve at least the removal or change of some of the metrics (not all of them make much sense at this moment). That's why the issue is hanging there for so long even if someone was assigned to it (we should've probably added an update on that issue, sorry for that).\r\nAnyway, we will come back with an answer here once we make a decision. Hello @lauralt! No problem! I'm so sorry, I didn't notice that the issue was assigned to someone else. Let me know if you decide to go a different direction @jabedude we would like to have this code merged no later than next week. Is this feasible for you? If not, would it be ok with you to have us contribute to your PR? @jabedude did you get a chance to resume work on this PR? Any help would be greatly appreciated? Thanks!  Using the Ethernet/IP/TCP stack for sending TCP payloads larger than MSS (Maximum Segment Size) established at connection handshake results in incorrect payload at the receiving endpoint.\r\nAdd support for accounting of TCP payloads larger than MSS, sent with multiple segments.  I think we can get everything working nicely with different `vmm.stop()` implementations for tests and release.\r\n`Vcpu` cleanup can be done like we did in https://github.com/firecracker-microvm/firecracker/pull/1753\r\n\r\n > The integration tests don't compile the #[cfg(test)]-marked code.\r\n\r\nThat's right..\r\n\r\nI wonder if coverage reporting would work fine if we `fork` during tests. We could run the actual test in the child and the parent would only report the status. > Also, there's no way to force the vcpus to exit but leave the process running using just the public facing programmatic api.\r\n\r\nOriginally, `VcpuEvents` also contained an `Exit` command so the `vmm` can request `vcpus` to cleanly exit. We removed it as it wasn't used, but I think we should bring it back. It would be a clean flow. In that case, however this\r\n> We could also whitelist sysprocmask and let the vcpu threads exit cleanly.\r\n\r\nwould also be needed.\r\n\r\n**However**, if we go the `fork` way, then we really don't need anything extra.  > Yeah, that's what I was going for. I think the logic holds, but I'm not certain how future proof it is. I guess it's pretty disposable if the shape of the tests change in any way.\r\n\r\nWe started making efforts in writing rust integration tests, especially for the crates that have long source files or can not be properly tested by unit tests. I think this will be a future direction for our testing system. These tests do not require `#[cfg(test)]` or `mod tests`, so from this point of view, the proposed changes should be ok. Still, I don't think we should rely on the fact that every file that contains a `#[cfg(test)]` will have a `mod tests` defined. I remembered that at some moment we had a `#[cfg(test)]` for some `macro_use` in a file with no unit tests; see the commit here: https://github.com/firecracker-microvm/firecracker/commit/324e3cc690e8575a3cc0ccdf3f9d5e34a8c73903. In that particular situation, later on it was proven to be an alternative for it, but I don't think we should enforce it by this test.\r\nMaybe a better option would be to search for that diff in files that have also a `#[test]` in them, but it's really ugly :disappointed:.  Hi, @ahmedaabouzied. Thanks for the PR!\r\nThe code coverage integration test is now failing. Can you please update the target value in `test_coverage.py`? > I had to amend the commit then force push it to update the value of `COVERAGE_TARGET_PCT` to a suitable value to pass the `test_coverage` integration test without committing twice for the same thing. I don't know if this is the best git approach to do. I'd appreciate if someone proposes a better approach.\r\n\r\nHmm, it looks like now you have a separate commit just for the coverage change. This should be in the same commit with the other changes. Because it's a small change, you can just remove the last commit: `git reset --hard HEAD^`, now the coverage target will have the old value, you can change it to the new one: 84.08, and then run `git commit -a --amend` and this change should be added to your first commit.\r\nAnother option (a nicer one, but in this case takes more time) would be to squash your last two commits, as explained here: https://webkul.com/blog/how-to-squash-multiple-git-commits/. > > I had to amend the commit then force push it to update the value of `COVERAGE_TARGET_PCT` to a suitable value to pass the `test_coverage` integration test without committing twice for the same thing. I don't know if this is the best git approach to do. I'd appreciate if someone proposes a better approach.\r\n> \r\n> Hmm, it looks like now you have a separate commit just for the coverage change. This should be in the same commit with the other changes. Because it's a small change, you can just remove the last commit: `git reset --hard HEAD^`, now the coverage target will have the old value, you can change it to the new one: 84.08, and then run `git commit -a --amend` and this change should be added to your first commit.\r\n> Another option (a nicer one, but in this case takes more time) would be to squash your last two commits, as explained here: https://webkul.com/blog/how-to-squash-multiple-git-commits/.\r\n\r\nOr, as @iulianbarbu pointed out, you can just `git reset HEAD^`, the coverage change will still be around, but not commited; to append it to your first commit, just run `git commit -a --amend` (I'm still learning git myself :D). > That makes sense. I just squashed the commits and force pushed the changes.\r\n\r\nGreat! Now it looks good.\r\nJust a small observation: we don't usually mention in the commit message if the coverage target increased or decreased; this is somehow implied by the actual changes that are brought by the commit. I would leave the commit message as it was before.  > Okay. So should I change the commit message?\r\n\r\nYep, it would be nice and to be super clear you can update it like this:\r\n\r\nFix unit test coverage for the cpuid crate\r\n\r\nSet the unit tests mod as 'tests' instead of 'test' in\r\ncpuid crate, transformer module. > Now the test `test_rx_rate_limiting` fails\r\n> \r\n> ```shell\r\n> =================================== FAILURES ===================================\r\n> ____________________ test_rx_rate_limiting[ubuntu_with_ssh] ____________________\r\n> integration_tests/functional/test_rate_limiter.py:152: in test_rx_rate_limiting\r\n>     _check_rx_rate_limit_patch(test_microvm, guest_ips)\r\n> integration_tests/functional/test_rate_limiter.py:377: in _check_rx_rate_limit_patch\r\n>     _check_rx_bandwidth(test_microvm, guest_ips[1], bandwidth_kb)\r\n> integration_tests/functional/test_rate_limiter.py:426: in _check_rx_bandwidth\r\n>     assert diff_pc < MAX_BYTES_DIFF_PERCENTAGE\r\n> E   assert 10.6796875 < 10\r\n> ```\r\n> \r\n> I'll check it out\r\n\r\nThis is a problem on our side that we're trying to fix: #1809. Just another `push -f` would be appreciated. Sorry for this :(. > > Now the test `test_rx_rate_limiting` fails\r\n> > ```shell\r\n> > =================================== FAILURES ===================================\r\n> > ____________________ test_rx_rate_limiting[ubuntu_with_ssh] ____________________\r\n> > integration_tests/functional/test_rate_limiter.py:152: in test_rx_rate_limiting\r\n> >     _check_rx_rate_limit_patch(test_microvm, guest_ips)\r\n> > integration_tests/functional/test_rate_limiter.py:377: in _check_rx_rate_limit_patch\r\n> >     _check_rx_bandwidth(test_microvm, guest_ips[1], bandwidth_kb)\r\n> > integration_tests/functional/test_rate_limiter.py:426: in _check_rx_bandwidth\r\n> >     assert diff_pc < MAX_BYTES_DIFF_PERCENTAGE\r\n> > E   assert 10.6796875 < 10\r\n> > ```\r\n> > \r\n> > \r\n> > I'll check it out\r\n> \r\n> Have you updated the branch before the push? A tentative fix was put in yesterday.\r\n\r\nIt failed after I updated his branch.  ## Reason for This PR\r\n\r\nFixes: #1822 \r\n\r\n## Description of Changes\r\n\r\ndetailed in the commit message.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n  @aghecenco @sandreim I addressed your suggestions, please give it another look!  ## Reason for This PR\r\n\r\n#1819\r\n\r\n## Description of Changes\r\n\r\nAdd a validation check to enforce MMDS HTTP requests to use only `GET`.\r\nDocumentation about MMDS guest requests failures can be found in #1800 .\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n @sandreim, @andreeaflorescu , @raduiliescu , please take a look again! I've added Method not allow micro-http support and used it in MMDS.  When an application from within the guest want to retrieve metadata from MMDS, the documentation is specific in how this request has to be formed. However, we do not enforce validation on the HTTP method of the request, and we would end up responding to requests which use atypical HTTP methods for retrieving metadata, like `PUT` and `PATCH`.  The vast majority of tests cleanup after themselves using `TempFile`, but there are some cases where `TempFile` cannot be used (like the Vsock UDS or the API UDS).\r\n\r\nFor these cases, a `TempPath` object can be used to cleanup whatever is at inner path when object goes out of scope.\r\n\r\nGrepping for `fs::remove_file` in Firecracker shows many places where this is manually done over and over. This can be done without adding new `TempPath` in `vmm-sys-util` and just (ab)using `TempFile` like so:\r\n\r\n```rust\r\nlet mut temp_uds_path = TempFile::new().unwrap();\r\n// Remove the file so the path can be used by the socket.\r\ntemp_uds_path.remove().unwrap();\r\n\r\n// Crate sock at `temp_uds_path.as_path()`.\r\n// It will be deleted when `temp_uds_path` goes out of scope\r\n// as `.remove()` is called again on `.drop()`.\r\n...\r\n```   Indeed, there is no need AFAICT to (de)serialize either `VcpuEvent` or `VcpuResponse`.      @marcbrooker please also sign your commit: `git commit -s --amend`  If a struct field has a semantic serialization function defined, the whole structure must implement `Clone`. This is inefficient and can also cause trouble when having also a `FamStructWrapper<T>` field defined in that structure.\r\nCalling `clone()` on a `FamStructWrapper<T>` instance will clone only the number of entries and the flexible array members. For example, if we have the following structure:\r\n```rust\r\npub struct kvm_cpuid {\r\n    pub nent: __u32,\r\n    pub padding: __u32,\r\n    pub entries: __IncompleteArrayField<kvm_cpuid_entry>,\r\n}\r\n```\r\nwrapped in a `FamStructWrapper` and we call `clone()` on it, only `nent` and `entries` fields will be kept (`padding` field will take the default u32 value).\r\n\r\nSo, if we want to serialize the following structure:\r\n\r\n```rust\r\n#[derive(Versionize, Clone)]\r\npub struct S {\r\n    some_kvm_cpuid: FamStructWrapper<kvm_cpuid>,\r\n    #[version(start = 2, ser_fn=\"ser_u16\")]\r\n    some_u16: u16,\r\n} \r\n```\r\n`clone()` will be called before we actually serialize the fields and because of this, we will serialize the default value for `padding` field, not the value that we pass when we instantiate `S`.\r\n Issue here: https://github.com/rust-vmm/vmm-sys-util/issues/85.  # Reason for This PR\r\n\r\nMMDS configuration `ipv4_address` field must be a valid link-local IPv4 address.\r\n\r\n## Description of Changes\r\n\r\nAdded a link-local check for the IPv4 address which comes with MMDS configuration, returning an error if the provided IPv4 address is not link-local.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n > Need also to modify the MMDS documentation and mention that The ipv4_address value must be a valid link-local IPv4 address.\r\n\r\nRelated to this aspect, I've opened #1800, with MMDS user guide and MMDS configuration API complete description inside the firecracker swagger file. I guess we can have this PR merged without documentation, and keep track of the MMDS docs in that opened PR. I've opened an issue also for the MMDS docs update (#1801). > > > Need also to modify the MMDS documentation and mention that The ipv4_address value must be a valid link-local IPv4 address.\r\n> > \r\n> > \r\n> > Related to this aspect, I've opened #1800, with MMDS user guide and MMDS configuration API complete description inside the firecracker swagger file. I guess we can have this PR merged without documentation, and keep track of the MMDS docs in that opened PR. I've opened an issue also for the MMDS docs update (#1801).\r\n> \r\n> Any reason why we should merge this PR without the documentation? Adding documentation is one of the PR's check list. Just wondering why we should take an exception for this one.\r\n\r\nThe related docs are offered in minimal amount in this PR. Further detailed docs will be merged in #1800 . I chose to merge the detailed docs through a separate PR to have them reviewed without other distractions, and also to make a single contribution with docs related two three or more PRs with additions to MMDS.  Currently, we do not support versionizing an enum tuple variant with more than one field.\r\n\r\nExample:\r\n\r\n```rust\r\n#[derive(Versionize)]\r\npub enum X {\r\n    One,\r\n    Two(u8, u16),\r\n    #[version(start = 2, default_fn = \"default_state_three\")]\r\n    Three(u32, u64),\r\n}\r\n```\r\nThis will fail with `this pattern has 1 field, but the corresponding tuple variant has 2 fields`. Open until the fix reaches Firecracker.  Currently, we do not support versionizing an enum variant with no fields (also known as unit variant).\r\n\r\nExample:\r\n```rust\r\n#[derive(Versionize)]\r\npub enum X {\r\n    One,\r\n    Two(u8, u16),\r\n    #[version(start = 2, default_fn = \"default_state_three\")]\r\n    Three,\r\n}\r\n```\r\nThis will fail with `expected tuple struct or tuple variant, found unit variant Self::Three`. Fixed by firecracker-microvm/versionize_derive#6  Yup, that's right. We'll close it once the fix is in Firecracker.  Done, the snapshot functionality is merged in master.  Depends on/Continuation of https://github.com/firecracker-microvm/firecracker/issues/1777.\r\n\r\nThe VmResources is only used through the RPC interface, move it in the rpc_interface module.\r\n\r\nThe target is to completely isolate/contain the API/RPC interface so it could be enabled/disabled using features for example. Hello, I would like to work on this yes  With the corresponding changes, `vmm` will not depend anymore on `dumbo`. \r\n\r\nHowever, `devices` and `utils` will still depend on `dumbo`. \r\n\r\nTo me personally, I do not find appropriately to have a `device` dependent on a `network stack` (in our case `Net` device depends on `dumbo::ns`) because of the real world hierarchy (software sits on top of hardware) . I would prefer it the other way around. However, in our case, I do not know for sure if it would work the same, worse, or not at all. If it will work the same, we get rid of the dependency of `devices` on `dumbo`.\r\n\r\nIn terms of `utils` dependency on `dumbo`, I find it unnecessary. `dumbo` is used in `utils` to unit test the `Tap`, as in sending IPv4 packets and ARP frames on the tap, and verifying at the other end if the packet/frames retrieval is successful (not verifying if they are the same). This leads me to the conclusion that it is just enough to send some plain data on the tap, and receive it back with success, and keep the same behavior for the tap unit tests, and for the `Tap` implementation as well. We can remove the dependency on `dumbo` by modifying the current tap unit tests.\r\n\r\nIMO, there are still issues with dependency \"compliance\", in terms of `dumbo`, because it has a dependency on `mmds` crate. The reason is that the specific mmds network stack implementation (`dumbo::ns`) which resides in `dumbo` works very closely with `mmds`, which can not be avoided. To resolve this issue, we can move the specific mmds network stack implementation to `mmds`, and make also generic some bits of code from dumbo's `tcp::handler`, which depends on a method from `mmds`. Now, I think `dumbo`  will be a really self contained crate.\r\n\r\n@firecracker-microvm/compute-capsule , WDYT? > @iulianbarbu this is a sane separation of concerns. Do you want to create issues to describe what needs to be done? Your issue explains it pretty well already.\r\n\r\nI will open separate issues for each mentioned crate.  This is somehow the opposite of https://github.com/firecracker-microvm/firecracker/issues/1768. From a separation of concerns standpoint, both will achieve the separation. However, this separation is similar to the current dependencies present in Firecracker, and might work with less fuss than #1768, which needs a new design, or at least thoughts/discussions about what can be done differently to support it. Mentioned this here to keep these issues close, and have both suggestions at hand when resolving them. > Hmm, why do you say they're opposite?\r\n> \r\n> I think of them as separate issues. This is related to the VirtioNetwork interface and how we make the interface/implementation not depend on Mmds. This issue doesn't really care where the MmdsNetworkStack is defined. It is just about separating the core functionality of the virtio network device from mmds in such a way that mmds can easily become a feature for example.\r\n\r\nI said that their opposite because of the the fact that with pluggable network stack, Firecracker virtio net will still depend on the MMDS network stack, while #1768 suggests to reverse this dependency. However, reading again what you're thinking at, it looks like the changes might be very similar, and separate, as you say, or sequential maybe. I take back what I've said. :D  Is this `performance.md` file gonna be an entry point for data about performance in general related to firecracker? At the moment it contains data only about the network performance, hence I would rename it `network-performance.md`.   > At a first glance, it looks like last_update, processed_capacity and processed_refill_time are not state, but Rate Limiter internal fields used for processing the budget. They should probably not be saved.\r\nTemporarily blocking this PR to see if we can separate the state from the internal rate limiter logic.\r\n\r\nGood catch!\r\n`processed_capacity` and `processed_refill_time` can indeed be re-calculated at deserialization.\r\n`last_update` is part of state that needs saving.  Hey, @cmannett85 ! Thanks for the PR.\r\n\r\nI'll look on the changes in depth soon. A high level comment would be that this PR has to provide descriptive error messages which might help users in solving Firecracker related problems by themselves. Some of these `expect`s from your changes address also debugging messages, useful for developers. These messages contain implementation details which IMO do not bring value to end users. However, this does not mean that we shouldn't have messages which tell users that an error occurred, due to a reason independent to them. We might have to decide upon these.   ## Reason for This PR\r\n\r\nFixes #1702 \r\n\r\nPrerequisite for #1713 \r\n\r\n## Description of Changes\r\n\r\nFollowing the more decoupled design we can now create `block` devices on their configuration path, rather than saving a config and delaying creation to boot-time.\r\n\r\nSuch a model allows user-errors (like invalid resources or permissions) to be reported as part of the configuration step rather than later at attempted boot.\r\n\r\nIt would also remove the time window between configuration and boot where changes to the host system (deleting backing files, changing permissions, etc) would cause microVM boot failures (race condition between validation and commitment of resources).\r\n\r\nSuch a model should also decrease code complexity and should provide better efficiency to the process of configuring and starting a microVM (no more moving configurations around in memory and validating resources both at config time and boot-time).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n It is a step in that direction yes, but we're far from it since the biggest missing piece there is PCI + Hotplug This PR is a prerequisite for #1713  @ioanachirca @aghecenco I've rebased, please take a look.  As vmm-sys-util v0.5.0 is now released, we can use the epoll wrapper from there and remove the one from our repo. Sure.  Define max length for variable length fields and add validations. We need to do this for Vec and String.  I tried some things and played a little to see what this trait approach really involves and to me it doesn't seem like a good fit anymore.\r\nFirst, the duplicate code is indeed a lot and that's because the \"common\" functionality is mostly consisted of the setter functions and, even if their implementations are exactly the same for both `ValueArgument` and `FlagArgument`, they must be implemented by the structs (a default trait method implementation can't change the fields of the trait implementors).\r\nSecondly, the functions that parse and validate the arguments, in most of the validations, have to know the type of the Argument (flag or value argument), which, from what I've tried, also implies some duplicate code. Like Andreea said, for flags, a lot of fields won't make sense anymore and it actually looks like a value argument and a flag argument, even though they are both in fact arguments, don't have that much in common: you can't say that a flag is required or that a flag has a value (or, more precisely, a user value; this would be indeed true; `default_value` field also doesn't make sense; a `value` or `is_present` bool field would be enough: 0 when initializing that argument and 1 when it is passed by user).\r\nAlso, at this moment, in our arg parser implementation we don't allow the user to pass any argument two or more times, but if I think more about this, it should be no problem if the user passes the same flag 2, 3... times (for value arguments it makes sense this type of validation because the user could give, this way, 2 values for the same argument). With the trait approach, it will be pretty ugly to check these particular things that I've just mentioned as they depend a lot on the implementor type.\r\nMaybe the cleanest way to solve this would be to have two separate collections for flags and arguments with values, but I imagine there will still be some duplicate code.  'MacAddr' is Copy so each call to 'write_to_mmds_or_tap()' would create a copy of the underlying buffer.\r\nReferences could be used instead to avoid the copy. That's true, `Option<MacAddr>` is smaller in size than a reference so it's definitely faster to send it by value than by reference (we also avoid dereferencing).\r\n\r\nGood catch, closing this issue!  Kcov reports coverage only for tests defined in the `mod tests` block, so we need to enforce this to avoid bogus coverage results.\r\nhttps://github.com/firecracker-microvm/firecracker/blob/e6436c599756b653931a57d5f5c418f7d22cac40/tests/integration_tests/build/test_coverage.py#L61  Current container `fcuvm:v16` contains `cargo-audit 0.12.0`, which is the latest version.  Hi, @AnishShah and thanks for your interest!\r\nA little bit of context for the issue linked to your PR: If you take a look, for example, in `main.rs`, you can see how we check if a flag is present in the arguments passed by user: \r\n`let api_enabled = !arguments.value_as_bool(\"no-api\").unwrap_or(false);`\r\nWe want to safely replace that `unwrap_or()` with an `unwrap()`. If we do this now, it will panic :( (more precisely `value_as_bool()` will panic). That's because, when we build the `ArgParser` with the possible arguments, all of the arguments (flags and arguments with actual values) have a `None` value. If the user passes some flag, the value set for that one will be `Bool(true)`. But there is no possible scenario when that value can be `Bool(false)`. What we meant by `support default value for bool arguments` was that we should find a way to implicitly \"say\" that the default value for flags is `false`. In my opinion, this logic should be handled in `arg_parser.rs`, there is no need for the user to set a default value for a flag because it would be indeed `false`.\r\nOne way to fix this problem would be to update `value_as_bool()` to never return `None` or to find a way to set also the default value for flags, not only for the ones that take `String` values.\r\nWhat do you think?  @AnishShah the change you propose in this PR feels like throwing a rug over a stain instead of cleaning it up :stuck_out_tongue: \r\n\r\nI think we should change the underlying representation to better suit the usage scenario.\r\n\r\n@lauralt @andreeaflorescu what do you think of this option: https://github.com/firecracker-microvm/firecracker/issues/1685#issuecomment-602632241\r\n\r\nFrom a bird's-eye view it looks like it would naturally fit the scenario. > @AnishShah the change you propose in this PR feels like throwing a rug over a stain instead of cleaning it up \r\n> \r\n> I think we should change the underlying representation to better suit the usage scenario.\r\n> \r\n> @lauralt @andreeaflorescu what do you think of this option: [#1685 (comment)](https://github.com/firecracker-microvm/firecracker/issues/1685#issuecomment-602632241)\r\n> \r\n> From a bird's-eye view it looks like it would naturally fit the scenario.\r\n\r\nThe idea seems good, I didn't have the chance to try anything in this direction. But I think the changes involved in your proposal would be pretty significant. I'm also okay with merging the commit in its current form and then come later with a subsequent PR.\r\n@AnishShah What do you think, do you want to give it a shot with what @acatangiu proposed or do you want to let us try that later?   > > I just added 2 comments for the moment. They are nit-ish. I am not sure about the unit tests. It's a lot of code that has to be added just for testing one small thing. I have to spend some more time thinking about it.\r\n> \r\n> Indeed, there is a pretty big quantity of code for one small thing in the same place. One idea that pops in mind would be to move the code that does the general setup of the vmm (i.e impl Vmm, create_guest_workload, create_device_managers) in a `tests/` folder inside the vmm crate. That way we (hopefully) make this setup code reusable from multiple unit tests. WDYT?\r\n> \r\n> src/vmm/tests/mod.rs ->\r\n> \r\n> ```\r\n> pub fn setup -> Vmm\r\n> ```\r\n> \r\n> src/vmm/src/controller.rs ->\r\n> \r\n> ```\r\n> Vmm = setup()\r\n> let mut vmm_controller =\r\n>             VmmController::new(VmResources::default(), Arc::new(Mutex::new(vmm)));\r\n> ``\r\n> ```\r\n\r\nWe should keep in mind the unit tests from `builder.rs`, which tests building a vmm, but it does not run it. I think it is worth looking at these tests because it might have common pieces. It feels like two pieces of work to me: creating unit tests for kvm dirty bitmap and common* infrastructure for vmm crate unit tests (`builder.rs` and `controller.rs` specific so far).\r\n\r\nOr, we can make this building block functionality for `controller.rs` unit tests in this PR, since this is the only thing relevant to it, and track through an issue the part where we have to investigate if it is the case to use this unit test functionality in `builder.rs` as well. WDYT?  >Segregate mandatory and optional arguments properly.\r\n\r\nI'm not sure how I'd go about this, but perhaps something like `ssh --help`, which, translated to `jailer`, would look like this:\r\n\r\n```\r\n$ jailer\r\nJailer v0.21.0\r\n\r\nusage: jailer [--chroot-base-dir directory path] [--daemonize] --exec-file path [--extra-args args] --gid id --id kek [--netns path] --node id --uid id\r\n\r\n--chroot-base-dir <chroot-base-dir>: The base folder where chroot jails are located. (defaults to \"/srv/jailer\")\r\n--daemonize: Daemonize the jailer before exec, by invoking setsid(), and redirecting the standard I/O file descriptors to /dev/null.\r\n--exec-file <exec-file>: File path to exec into.\r\n--extra-args <extra-args>: Arguments that will be passed verbatim to the exec file.\r\n--gid <gid>: The group identifier the jailer switches to after exec.\r\n--help: Show the help message.\r\n--id <id>: Jail ID.\r\n--netns <netns>: Path to the network namespace this microVM should join.\r\n--node <node>: NUMA node to assign this microVM to.\r\n--uid <uid>: The user identifier the jailer switches to after exec.\r\n\r\n```\r\n\r\nOr like that:\r\n\r\n```\r\n$ jailer --help\r\nJailer v0.21.0\r\n\r\nRequired arguments:\r\n\r\n--exec-file <exec-file>: File path to exec into.\r\n--gid <gid>: The group identifier the jailer switches to after exec.\r\n--id <id>: Jail ID.\r\n--node <node>: NUMA node to assign this microVM to.\r\n--uid <uid>: The user identifier the jailer switches to after exec.\r\n\r\nOptional arguments:\r\n\r\n--chroot-base-dir <chroot-base-dir>: The base folder where chroot jails are located. (defaults to \"/srv/jailer\")\r\n--daemonize: Daemonize the jailer before exec, by invoking setsid(), and redirecting the standard I/O file descriptors to /dev/null.\r\n--extra-args <extra-args>: Arguments that will be passed verbatim to the exec file.\r\n--help: Show the help message.\r\n--netns <netns>: Path to the network namespace this microVM should join.\r\n\r\n```  ## Reason for This PR\r\n\r\nFixes #1639 \r\n\r\n## Description of Changes\r\n\r\n### Device access to guest memory on/after activation\r\n\r\nPassing memory during device activation instead of during construction enables the following story: #1702 #1708 #1709 and finally #1713\r\n\r\nThe changes in this PR are in line with the model currently defined in https://github.com/rust-vmm/vm-virtio.\r\nThey are also compatible with the https://github.com/rust-vmm/vm-virtio/pull/10 proposal where memory is also passed to the device during activation:\r\n\r\n```rust\r\n    /// Associated guest memory\r\n    type M: GuestMemory;\r\n\r\n    ...\r\n\r\n    /// Activates this device for real usage.\r\n    /// The ownership of the VirtioDeviceConfig object moves into the VirtioDevice object if\r\n    /// activate succeeds, otherwise it should return the ownership back.\r\n    fn activate(&mut self, config: VirtioDeviceConfig<M>) -> ActivateResult<VirtioDeviceConfig<M>>;\r\n```\r\n\r\n### Events registration during activate\r\n\r\nPostpone external events registration to device activation time.\r\nThis makes the block and net devices unaware of external events prior to their activation.\r\n\r\nDuring creation register a dedicated activation event which will notify the device when it's time to register the other external events sources.\r\n\r\nThis activation event is unregistered after successful device activation.\r\n\r\nCoverage slightly decreased because untestable EventFd error cases.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Still need to add unit tests for the new code. Tests added, PR is complete. I agree with @alexandruag that the current multi-step configuration process introduces a complexity cost and imposes limitations on the Firecracker design that far outweigh any benefits it brings in a production scenario.\r\n\r\nUnfortunately, like Alex mentioned, removing the multi-step configuration is a breaking change in terms of API and usage patterns and needs research and buy-in from customers/users of Firecracker before we can do it.\r\n\r\nIn the meantime, we should move forward with the changes in this PR as their blast-radius is very small and reverting the way memory is passed to the device can be easily done in the future. By that time we might even have an agreed-upon interface in rust-vmm that we can also adhere to.  One other solution would be:\r\n```\r\n--- a/src/utils/src/arg_parser.rs\r\n+++ b/src/utils/src/arg_parser.rs\r\n@@ -170,7 +170,7 @@ impl<'a> Argument<'a> {\r\n /// the argument takes a value, or `bool` if it's a flag.\r\n #[derive(Clone, Debug, PartialEq)]\r\n pub enum Value {\r\n-    Bool(bool),\r\n+    Bool,\r\n     String(String),\r\n }\r\n \r\n@@ -182,10 +182,10 @@ impl Value {\r\n         }\r\n     }\r\n \r\n-    fn as_bool(&self) -> Option<bool> {\r\n+    fn as_bool(&self) -> bool {\r\n         match self {\r\n-            Value::Bool(b) => Some(*b),\r\n-            _ => None,\r\n+            Value::Bool => true,\r\n+            _ => false,\r\n         }\r\n     }\r\n }\r\n@@ -222,11 +222,10 @@ impl<'a> Arguments<'a> {\r\n             .and_then(|arg_value| arg_value.as_string())\r\n     }\r\n \r\n-    /// Return the value of an argument if the argument exists and has the type\r\n-    /// bool. Otherwise return None.\r\n-    pub fn value_as_bool(&self, arg_name: &'static str) -> Option<bool> {\r\n+    /// Return whether the argument exists and has the type bool.\r\n+    pub fn value_as_bool(&self, arg_name: &'static str) -> bool {\r\n         self.value_of(arg_name)\r\n-            .and_then(|arg_value| arg_value.as_bool())\r\n+            .map_or(false, |arg_value| arg_value.as_bool())\r\n     }\r\n```\r\n\r\nThere's no point in having `Option<Bool(bool)>`. A param is either there, as `Some(Value::Bool)` or it's not. The value would be encoded in the type \ud83d\ude04  Or instead of using a hierarchy of `Option<enum Value>` you could use flatten it in a single enum. Something like:\r\n```rust\r\npub enum ArgValue {\r\n    NotPresent,\r\n    Present,\r\n    PresentWithValue(String),\r\n}\r\n\r\npub struct Argument<'a> {\r\n    name: &'a str,\r\n    required: bool,\r\n    requires: Option<&'a str>,\r\n    takes_value: bool,\r\n    default_value: ArgValue,\r\n    help: Option<&'a str>,\r\n    user_value: ArgValue,\r\n}\r\n```\r\n\r\nWhich also simplifies things and is also _not weird_ like the previous suggestion \ud83d\ude1b  I agree with @andreeaflorescu  that `values_as_bool` should still be able to return `None`, but I was thinking/hoping that we could still support this with the `ArgValue` enum. > Present and NotPresent is the Option<T> in Rust so I don't think we should redefine that.\r\n\r\n`Option` is an enum with two variants, our params have at least three states:\r\n1. not present\r\n2. present, takes no value\r\n3. present, takes value\r\n\r\nYou could even extend it to define the value type at the same level:\r\n```rust\r\nenum ArgState {\r\n   NotPreset,\r\n   NoValue,\r\n   Value(String),\r\n   Value(usize),\r\n   etc\r\n}\r\n```\r\n\r\n`Option<enum X>` means a table of 2 x `sizeof X` states. The problem is some of the states modeled using the `Option<Value>` don't make sense like you rightly discovered and which led to opening this issue.\r\n\r\n> instead of writing --no-api, you write --noapi in the code by mistake\r\n\r\nSolving for this case using the `Option<Value>` is a mess for example \ud83d\ude04  Sounds good to me! \ud83d\udc4d I like the idea too! Still thinking about other name for `ArgumentWithValue`, but no success so far. Maybe `NamedArgument`, but it's not very suggestive though. Yep, but apparently that is a word that is used for arguments that take values :sweat_smile:. But nevermind, it's not suggestive, I don't like it either.  Firecracker now uses `vm-memory = { version = \">=0.2.0\", features = [\"backend-mmap\"] }`.\r\n Uh ok I missed the `BytedValue` part. IMO we need more visibility for it, it kind of got lost in this issue so yes, I think it would be better to open a separate issue for this. Thanks!  @lauralt , I've addressed your comments! PTAL. @lauralt , @acatangiu , PTAL! I've addressed your comments. @acatan, @lauralt , I've addressed your comments! Please, take a look again.  > If I am not wrong, this can be done with an one line fix, in which we remove the line with the log. @firecracker-microvm/compute-capsule , WDYT?\r\n\r\nYes, and also check all other events on all devices for similar log messages, logging is slow and shouldn't happen on hotpaths like this. Like @raduiliescu said, metrics are enough for such cases.\r\n\r\n> Other option would be to implement log ratelimit functionality as in linux kernel - https://elixir.bootlin.com/linux/v4.0/source/include/linux/ratelimit.h#L48.\r\n\r\nWould be great to add this to our logger (not part of this issue though).  Hi @tnotw, thanks for the contribution! Over time we've had a few requests to provide an automated rootfs generation script, so we're excited to see this PR.\r\n\r\nWe'll try to do an in-depth review some time this week. > Hey, @tnotw ! As @serban300 said, having a tool that builds rootfs images brings a lot of value. Closing the PR it was not something that we had in mind. We can still push forward with this PR, but it will need some updates. It has to be linked to an issue which explains the nature of the contribution. A simple \"rootfs build tool proposal\" issue might be enough. What do you think?\r\n\r\nThere are some useful info as far as rootfs creation tool [here](https://github.com/firecracker-microvm/firecracker/issues/1418). > > Hey, @tnotw ! As @serban300 said, having a tool that builds rootfs images brings a lot of value. Closing the PR it was not something that we had in mind. We can still push forward with this PR, but it will need some updates. It has to be linked to an issue which explains the nature of the contribution. A simple \"rootfs build tool proposal\" issue might be enough. What do you think?\r\n> \r\n> There are some useful info as far as rootfs creation tool [here](https://github.com/firecracker-microvm/firecracker/issues/1418).\r\n\r\nI think this PR is a step which precedes the work needed for #1418 . It is related, nevertheless.  Hi @thepwagner ,\r\n\r\nSorry to hear you stumbled upon trouble. I will try to replicate this issue and dig into the problem. I understand the API socket does not appear for the hanging microVM so when you say \"VMM logs\",  are you referring to the dmesg logs? @thepwagner unfortunately I was not able to replicate the behavior. What I did though was go through the commits between 0.20.0 and 0.21.0 and try to spot that/those commits that could trigger the behavior you describe. Could you please test this [branch](https://github.com/dianpopa/firecracker/commits/i1674) I created for you and let me know if the behavior still replicates? The branch mirrors v0.21.0 without commits 3a9a1ac, 776ccda, 646b83b. \r\n\r\nLooking forward to the result!  It is already added to vmm-sys-util (https://github.com/rust-vmm/vmm-sys-util/pull/79), but we must wait for a new release to be able to use it.  ## Reason for This PR\r\n\r\nThis fixes a race during config/pre-boot phase where the VMM thread reads this event_fd before API thread gets the chance to increment it.\r\n\r\n## Description of Changes\r\n\r\n\r\nThe API event_fd is used by the API thread to signal the VMM thread that it has pending messages.\r\n\r\nDuring config/pre-boot phase, this event_fd is used in a simple blocking loop that waits for an API event, then processes the request.\r\nTo keep this scenario simple, make the event_fd a blocking event_fd.\r\n\r\nDuring runtime/post-boot phase the event_fd is registered with polly alongside multiple other events (from multiple sources), and is only read when EPOLLIN is reported on it. Having it as a blocking event_fd is safe.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [ ] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [ ] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [ ] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n  @stefannita01 Please, sign your commit: `git commit -s --amend`. There is a typo in the commit title: `maintaners.md` -> `maintainers.md`.  I do think there are some potential scenarios that vmm/src/lib.rs should get unit tested/ci tested against:\r\n\r\n==Unit tests==\r\n* `get_bus_device( device_type: DeviceType,\r\n        device_id: &str,)` -> isn 't it worth it to test that not registering a (device_type, id) tuple would make this function return `None`? Or also what about making sure that registering a net device with the same id as a block device works correctly?\r\n* `guest_memory` -> why not test that it is actually returns what we configured?\r\n*  `pub fn kvm_vm(&self)` is not used at all\r\n\r\n==CI==\r\n* Are  metrics flushed upon  `pub fn stop(&mut self, exit_code: i32)` ?\r\n* Does `configure_system` fail if there is not enough memory to setup the mptable? > > I do think there are some potential scenarios that vmm/src/lib.rs should get unit tested/ci tested against:\r\n> > ==Unit tests==\r\n> > ```\r\n> > * `get_bus_device( device_type: DeviceType, device_id: &str,)` -> isn 't it worth it to test that not registering a (device_type, id) tuple would make this function return `None`? Or also what about making sure that registering a net device with the same id as a block device works correctly?\r\n> > ```\r\n> \r\n> Testing this unit means testing the `MmioDeviceManager::get_bus_device` (because it is a wrapper which does not have any related logic), which is covered by `device_manager/mmio.rs::test_device_info` unit test. I genuinely do no think it would bring any value to have a unit test for this function.\r\n> \r\n> > ``` \r\n> > * `guest_memory` -> why not test that it is actually returns what we configured?\r\n> > \r\n> > * `pub fn kvm_vm(&self)` is not used at all\r\n> > ```\r\n> \r\n> Unit testing for getters, if they do not have any complex logic, it would require enough effort just for nothing, in my opinion. I've excluded them from the report (#1624) just because they lack any related logic that would bring value for a unit test.\r\n> \r\n> > ==CI==\r\n> > ```\r\n> > * Are  metrics flushed upon  `pub fn stop(&mut self, exit_code: i32)` ?\r\n> > ```\r\n> \r\n> I think this is a scenario that can be tested inside an integration test. I will add an integration test for this.\r\n> \r\n> > ```\r\n> > * Does `configure_system` fail if there is not enough memory to setup the mptable?\r\n> > ```\r\n> \r\n> `vmm/lib.rs::configure_system` is a wrapper over `arch_*::configure_system`, without any related logic to it, besides effective calls to `arch_*::configure_system`. Testing it for `NotEnoughMemory` for mptable means testing `configure_system` from `arch::x86_64`. This is already covered in unit tests.\r\n\r\nI am not on the same page here regarding not making sense to test simple bits of code. Unit tests are not made only for complex units. Testing a getter ensures that the getter stays a getter. Unit tests should also be seen as an extra layer of protection against malicious or unintentional mistakes in PRs.\r\n > > I am not on the same page here regarding not making sense to test simple bits of code. Unit tests are not made only for complex units. Testing a getter ensures that the getter stays a getter. Unit tests should also be seen as an extra layer of protection against malicious or unintentional mistakes in PRs.\r\n> \r\n> I agree with you that you generally want to test even the simple bits of code. In this particular usecase, testing the `Vmm` requires a lot of setup and comes with tests that are hard to maintain. The value added by testing setters and getters tends to fade away when taking into consideration the long time required for maintaining the tests and their setup. I think it makes more sense to invest this time in writing integration tests. WDYT?\r\n\r\nI think we should invest time in writing integration tests regardless of whether we write unit tests for the vmm or not.\r\nAs far as my concern, no exception should be made as far as unit tests. It is a dangerous direction to start being subjective about what you unit test and what you do not. Unit test should exercise exactly a single method from a public API regardless of what it is built upon or what calls it. That is why declaring the `impl vmm` as unit tested is wrong IMO.\r\n\r\nHowever, this PR can go through.  Hi @KarthikNedunchezhiyan, can you describe the changes? The current commit touches different components without a clear purpose or description.\r\n\r\nOn the ratelimiter changes for example I see that you simplified the calculations there but at the expense of higher risk of operation overflows. Please provide some explanations on how are the changes impacting behavior and why/when are they safe (for example, what is the minimum for an overflow with the old code and the new, is it something that is practically impossible or is it likely?)\r\n\r\nOn the partuuid changes I see you removed a block of code but there is nothing that replaces it, was that logic duplicated somewhere? To be honest, I didn't dive deep in the code to understand the implications of this PR - but ideally the commit and PR descriptions should explain things at least at a high level. Please update the commit description as well, the commit description is the real changes history log.  @KarthikNedunchezhiyan are you interested in contributing with a fix to this issue? We can discuss a strategy together if that's the case. Actually, thinking about this more, I think we don't even need such a check. Having a root device or not is an optional use-case-specific choice.\r\n\r\nFor example users of Firecracker which boot unikernels might not want any block device.\r\n\r\nI believe the current Firecracker behavior of not enforcing such requirements is actually the correct one. Closing this. Anyone, feel free to open if needed.  I did experiment these failures myself. The `MuxerTestContext` the one binding to the `uds_path` has `Drop` implemented which deletes this path, so in theory we should never have to deal with these failures. The `LocalListener` (the one that listens on `uds_path_port`) also has a Drop implemented  that deletes the path on which it listened for connections. It would be interesting to see why these test fail even if in theory the paths used across the tests are removed. One other thing I noticed: for me there is one test that fails every time (`test_muxer_killq`).   IMO this will affect debugability by less detailed or useless backtraces, but it should not affect any functionality. I am not sure if it is possible with rust, but if it's done at compile time it can boost performance. Closing this issue as we yet have no indicators of relevant positive gains which would result from stripping the firecracker release binary.\r\n\r\nWe can reopen if needed later.  :+1: Can you, please, update the commit message to not exceed 72 characters/line?  ## Reason for This PR\r\n\r\nFixes #1620 \r\n\r\n## Description of Changes\r\n\r\nSome small changes to the VirtioDevice trait interface:\r\n- The VirtioDevice trait can work with references instead of owned objects for Queues and QueueEvents so no cloning is necessary. Also use slice references instead of owned Vecs.\r\n- For a short while we were also using `activate`/`reset` and `set_device_activated`. This moves all devices and tests to using `activate`/`reset` to activate, respectivelly reset a VirtioDevice.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n > What do you think if we handle the events registration after activation for block and net devices like vsock does? With the vsock pattern of events registration, we do not register the queue/backend/rate limiters events until the activation, but only after. We wouldn't need to have the corresponding checks inside handle_read of net and block devices, and the actual event handling flow will seem more natural, IMO.\r\n\r\nWe could do that (definitely in a separate PR), but it'd require a two-step event registration process (like vsock does):\r\n1. register an `activate` event\r\n2. on receipt of an `activate` event, we register the other events.\r\n\r\nIt'd be formally cleaner, but I don't have any problem with the current flow either.  Hey @nspin. We haven't try running on `qemu-system-aarch64 -machine virt`.\r\nWe will start investigate this most likely on Monday and post our findings here.  @Pennyzct The code coverage integration test is failing right now. Can you please update the target value from `test_coverage.py` with the current value (80.00) because, unfortunately, the newly added lines can not be tested properly :( ? > Hi~ @lauralt @andreeaflorescu\r\n> \r\n> > @Pennyzct can you, please, update test_parse() with a test also for --version argument?\r\n> \r\n> I've already updated `test_parse()` with a new test for `--version` argument. And a little bit more, since we use `clone()` to acquire the arguments, we probably don't need to `build_arg_parser()` every time for each small test union, just the one in the beginning is enough.\r\n> \r\nNice catch! \r\n> > @Pennyzct The code coverage integration test is failing right now. Can you please update the target value from test_coverage.py with the current value (80.00) because, unfortunately, the newly added lines can not be tested properly :( ?\r\n> \r\n> thanks for the debugging. ;). Since we add test for the` --version` arg, the coverage test may not fail?? If it still fails, I'll then edit the value target accordingly.\r\n\r\n @Pennyzct Can you please resolve the conflicts and do another `push -f`?  Solved by patch release #1654.  We should check that we didn't introduce regressions by switching to the new `EventManager` implementation.  [This reddit thread](https://www.reddit.com/r/rust/comments/dnr6fu/are_there_any_guides_on_countermeasures_against/) contains several pointers that `rustc` can pass to LLVM for hardening purposes:\r\n```\r\n--x86-slh-fence-call-and-ret        - Use a full speculation fence to harden both call and ret edges rather than a lighter weight mitigation.\r\n--x86-slh-indirect                  - Harden indirect calls and jumps against using speculatively stored attacker controlled addresses. This is designed to mitigate Spectre v1.2 style attacks.\r\n--x86-slh-ip                        - Harden interprocedurally by passing our state in and out of functions in the high bits of the stack pointer.\r\n--x86-slh-lfence                    - Use LFENCE along each conditional edge to harden against speculative loads rather than conditional movs and poisoned pointers.\r\n--x86-slh-loads                     - Sanitize loads from memory. When disable, no significant security is provided.\r\n--x86-slh-post-load                 - Harden the value loaded *after* it is loaded by flushing the loaded bits to 1. This is hard to do in general but can be done easily for GPRs.\r\n--x86-speculative-load-hardening    - Force enable speculative load hardening\r\n```\r\nThe impact on performance should be evaluated in the hardened binary.   Hey @Zyqsempai. We are not yet decided how we want to implement this and it might require changes to our CI pipelines. Are you interested in contributing to another issue? If you ping me on Slack/email we can find something else.  The test actually correctly passes consistently. But sporadically it can be seen in test output that `Vcpu` threads crash instead of finishing cleanly (which is expected when the main thread goes out of scope at the end of the test).\r\n\r\nWhile the current behavior is not necessarily incorrect, it's ugly. We can make it so all threads finish cleanly.  In Firecracker master we use different exit codes for bad configuration and invalid json. In this merge the error codes are unified and we just use bad configuration.\r\n\r\nI assume it is easier to always exit with bad configuration since `VmResources::from_json` can now exit with error when the json is invalid or when configuring the resources failed. In case this change is intentional, should we also update the changelog to specify that an invalid configuration will cause Firecracker to exit with 151 as opposed to 152? > > It looks like not all the changes from [f546253](https://github.com/firecracker-microvm/firecracker/commit/f5462533a4e6919ecba4480ea62ff76fd8df8d94) ended up in this rebase. Specifically, we are loosing the ability to specify a different seccomp filter for VMM and for the vcpus.\r\n> \r\n> What didn't make it exactly? We should be able to specify different filters for each thread now (we still specify the same cloned filter-set, but the capability for independent sets should be there).\r\n\r\nWe synced on this offline. On the master branch the `Vmm` would allow setting different seccomp filters on the vmm and vcpu threads through its public interface. The functionality was called through the public function `start_microvm` which received as parameters 2 filters (one for vmm and one for the vcpus). Since `start_microvm` no longer exists and the `start_vcpu` function that allows setting up custom seccomp filters is private, setting up different seccomp filters outside of the `Vmm` is not possible. Since there are other interface changes required, we'll do these all at once in a future PR.  Hi @christian7007 .\r\n\r\nWe are currently trying to reach a decision about this issue with the team. \r\nThere are 2 problems that we need to figure out: users of the `--config-file` feature will not be given the chance to tweak any cgroup associated files and we still need to decide if still want to offer this as a feature or we treat this as a bug.\r\n\r\nYour main use case is to be able to assign CPUs but without enforcing memory allocation which numa node is implicitly doing (correct me if I am wrong). I understand you tried to solve this by overriding cpuset.cpu and cpuset.mems and it did not work. Do you know why it did not work?\r\n \r\nLooking forward to your answer. @christian7007 we're hosting a _Community Office Hours_ meeting on Thursday, more details [on our slack channel](https://firecracker-microvm.slack.com/archives/CDL3FUR8B/p1584437268101300).\r\n\r\nIt would be great if you could join that so we discuss this issue live and find a suitable solution. If you can't attend the office hours meeting let us know and maybe we can set up another dedicated call.  Issue was solved by changes in the CI framework.  Should we just remove some of the linters?  This could be a duplicate of #197.\r\n Duplicate of #197   Our setup of cache topology (at least on x86_64) is kinda dummy.\r\n\r\nAt the end of the [Automated Performance TestingFor Virtualization with MMTests](https://fosdem.org/2020/schedule/event/testing_automated_performance_testing_virtualization/attachments/slides/3926/export/events/attachments/testing_automated_performance_testing_virtualization/slides/3926/Automated_Performance_Testing_for_Virtualization_with_MMTests.pdf) there are some slides with performance benchmarks where they show the difference between host, VM with no topology, VM with topology and VM with a tuned topology.\r\n\r\nWe should measure this in Firecracker as well and see if we should also tweak our cache topology.  We are currently investigating frequent failures seen in `test_multiple_microvm_boottime_no_network` and/or `test_multiple_microvm_boottime_with_network`. @gc-plp please post here the results of the invstigation. #1669 fixed most of the failures, but I think there still are some elusive ones.\r\n\r\nClosing this for now, we can reopen when someone sights Bigfoot again.  Update on this. Worked with @iulianbarbu and identified the code paths that are not tested as follows:\r\n- MMIO\r\n- VirtioDevice implementation for Net (some functions)\r\n- BlockDeviceConfig & NetDeviceConfig\r\nThese will be tested in a subsequent PR.\r\n\r\nWe also looked at the builder functions that can be tested in a meaningful way and we agreed on the following:\r\n- create_vcpus_*\r\n- attach_*_devices\r\n\r\nFor the rest we can only have coverage tests and some of them actually come with the disadvantage that it makes it impossible to run the tests in parallel in the future.  @kzys My problem is with how we block the vcpu from exiting by doing a busy loop as follows:\r\n```exited -> pause -> exited -> pause -> ... ``` until the exit from the vmm loop is actually called.\r\n\r\nConceptually it also looks a bit weird that we have a state machine where we run in a loop until `end_state` is true. With the current code `end_state` will never be set to true.\r\n\r\nInstead of calling `exited` -> `pause` in a loop, we should find a better solution for avoid sigprocmask. I noticed that in the issue @acatangiu also mentioned using a barrier as an alternative. Is that something that we could do instead?  Hi @xiekeyang, I think it would be best if you squashed your commits into 1 and updated the description to something a bit more verbose (you can leave the title as \"refactor/update unit test\" but the description should explain a bit what the commit introduces). Remember to keep the title <= 50 characters and the description lines <- 72.  The ubuntu image now boots. How to test this?\r\n* Run `./tools/devtool test `\r\n* Start firecracker\r\n`sudo rm -f /run/firecracker.socket && sudo ./build/cargo_target/aarch64-unknown-linux-musl/debug/firecracker`\r\n* In another terminal:\r\n```\r\n#!/bin/bash\r\n\r\nrootfs_path=`pwd`/build/img/aarch64/ubuntu/fsfiles/xenial.rootfs.ext4\r\nkernel_path=`pwd`/build/img/aarch64/ubuntu/kernel/vmlinux.bin\r\n\r\nsocket=\"/run/firecracker.socket\"\r\n\r\ncurl --unix-socket $socket -i       -X PUT \"http://localhost/boot-source\"      -H \"accept: application/json\"      -H \"Content-Type: application/json\"      -d \"{\r\n\\\"kernel_image_path\\\": \\\"${kernel_path}\\\",\r\n\\\"boot_args\\\": \\\"console=ttyS0 noapic reboot=k panic=1 pci=off nomodules\\\"\r\n        }\"\r\n\r\ncurl --unix-socket $socket -i      -X PUT \"http://localhost/drives/root\"      -H \"accept: application/json\"      -H \"Content-Type: application/json\"      -d \"{\r\n            \\\"drive_id\\\": \\\"root\\\",\r\n            \\\"path_on_host\\\": \\\"${rootfs_path}\\\",\r\n            \\\"is_root_device\\\": true,\r\n            \\\"is_read_only\\\": false\r\n         }\"\r\n\r\ncurl --unix-socket $socket -i      -X PUT \"http://localhost/actions\"      -H  \"accept: application/json\"      -H  \"Content-Type: application/json\"      -d \"{\r\n            \\\"action_type\\\": \\\"InstanceStart\\\"\r\n         }\"\r\n\r\n```\r\n* Notice see that the login prompt shows up\r\n* Use root/root to login into the microVM  Previously prototyped in #1198  Hey @jeromegn, from the host's perspective, once those pages have been moved to the Firecracker process' resident set size (guest dirtied them), they stay there, as there's no way for the guest to tell the host it doesn't need them anymore. The only way it can do that is with the balloon driver. We've done some experimentation with it but Firecracker doesn't officially support it. Another, more invasive, mitigation will be available with snapshot/resume support, as a resurrected guest will only page in the 400-500 MB it actually needs - at the expense of having to kill and resume it.\r\n\r\n> I saw there was some talk/experiment regarding ballooning (#1198, #1203), would that help my case?\r\n\r\nYup. Again, Firecracker doesn't officially support ballooning, but the patches are there, if you want to try out the feature. Your guest will need the `virtio-balloon` driver too.\r\n\r\n> Should I allocate less memory to my container, leading to memory being reclaimed faster?\r\n\r\nMemory won't be reclaimed.\r\n\r\n> I also noticed that, as memory usage reaches closer to 100%, the build gets much slower. I assume because of it trying to allocate the memory in the zero (deleted) space? (See pmap output below).\r\n\r\nDo you mean memory usage on the host (I guess as much because the OOM killer kicked in)? If so, I suspect the build is slowing because the host is frantically flushing caches and paging, trying to accommodate the demand for memory. It can't touch the Firecracker process' resident pages and they're anon RAM, so they stick around unless the OOM killer terminates the microVM. Closing in favor of #1571  Some of the guests `rootfs`s that we use (for example the Alpine one) do not correctly flush guest disks on shut-down leading to sporadic file-system inconsistencies for RW drives.\r\n\r\nWe need to fix/replace them with correct ones.  ## Reason for This PR\r\n\r\naddresses #1400 \r\n\r\n## Description of Changes\r\n\r\nPosting this for early review. \r\n\r\nBefore merging, we have to wait for the `rust-vmm/vm-memory` crate to be published.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] The newly added `unsafe` code is unavoidable and properly documented.\r\n LGTM. Can you please squash the commits that add fixes on top of the first commits? Individual commits are supposed to successfully build.\r\n\r\nP.S. There might be an interface change before publishing vm-memory to crates.io: https://github.com/rust-vmm/vm-memory/pull/68  ## Reason for This PR\r\n\r\nResolves https://github.com/firecracker-microvm/firecracker/issues/1554.\r\n\r\n## Description of Changes\r\n\r\nInitrd issue is resolved, so updating FAQ to match.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] The required doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] no code has been touched\r\n- [x] no API changes are included in this PR\r\n- [x]  the changes in this PR have no user impact\r\n- [x]  no new `unsafe` code has been added @tidux can you please remove the commit that is not signed and rebase your PR so that we can merge it?  Hi @smira,\r\n\r\nThanks for the deep insight and please, accept my apology for such a late answer. Indeed, this issue was fixed by #1497 came as a fix to issue https://github.com/firecracker-microvm/firecracker/issues/1296 which was discovered in a similar situation as this one: \"investigating intermittent block device failures on a custom kernel build\". \r\nHopefully, everything works good now. Feel free to open this issue if other clarifications are needed.  ## Reason for This PR\r\n\r\nAdds a function in `vmm` to fetch the KVM dirty bitmap.\r\n\r\n## Description of Changes\r\n\r\n* the 1st commit cleans up some build warnings on `aarch64`, to make new warnings easier to spot.\r\n* the 2nd commit reverts https://github.com/firecracker-microvm/firecracker/commit/ebc15f2eacaa4c26782a05f8e0cebe4c47512553 and *enables* KVM dirty page tracking by default, so that the dirty bitmap is always available.\r\n* the 3rd commit introduces the actual function, which just calls the corresponding fn in [`kvm-ioctls`](https://github.com/rust-vmm/kvm-ioctls/blob/ee9a81a1241b320b4067b7d9bcf911da438e4db6/src/ioctls/vm.rs#L792) and aggregates the results per memory region.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is  clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] No new `unsafe` code has been added. > Please consider developing this functionality on the `refactoring/epoll_handler` branch.\r\n> \r\n> I'm in the process of rebasing that branch on top of master so that we can merge. Any intermediate work should go to the refactoring branch so that it doesn't create conflicts.\r\n\r\nClosing this in favor of a new PR on the refactoring branch.  Closing this as a duplicate of #1456, we'll have a fix for it soon.  Closing https://github.com/firecracker-microvm/firecracker/issues/208 indicates the FAQ should be updated to confirm that initrds are supported now. https://github.com/firecracker-microvm/firecracker/pull/1561  I'm not sure there exists a good path forward here.\r\n\r\n> either deciding on dropping Arc for all implementors of EpollHandler\r\n\r\nThe current available Firecracker `EventManager` implementation as well as the proposed https://github.com/rust-vmm/vmm-epoll/pull/2 implementation, both enforce `Arc<Mutex>` wrapping of event handlers.\r\n\r\n> or just lock parts of the Vmm in an Arc which are actually needed for handling the read event\r\n\r\nThat would mean splitting off parts of the `Vmm` to another struct which will be `Arc<Mutex>` wrapped inside the `Vmm` struct. These parts would be: `exit_event` and all other members accessed on the `exit_event` path: `vcpus_handles`, `vmm.stop() function` and all `self` members accessed within.\r\n\r\nThat would not avoid the `Mutex` lock, just move it inside Vmm, and I think it would artificially raise the complexity of `Vmm`.\r\n\r\nI suggest we stay with the current design, especially since the Mutex wrapping the Vmm is un-contended.\r\n\r\nIdeally, in the future we'd have an `EventManager` capable of managing both single-threaded and multi-threaded subscribers at the same time. That would provide a clean solution to this issue.\r\n\r\nIn the meantime I suggest closing this issue. @andreeaflorescu what do you think? Closing for now, we can reopen when we have support in a more flexible `EventManager`.    ## Reason for This PR\r\n\r\naddresses #1543 \r\n\r\n## Description of Changes\r\n\r\nWe need this in order to align our interface to the `rust-vmm/vm-memory` interface. \r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n > The PRs on which this one depends are all merged now. You can go ahead and rebase.\r\n\r\nThanks ! Done. Please take a look ! > @serban300 can you also make the corresponding changes so that crates depend on GuestMemory and not GuestMemoryMmap?\r\n\r\n@andreeaflorescu there is a separate [issue](https://github.com/firecracker-microvm/firecracker/issues/1544) for this and I would like to implement it as part of a different PR or even a batch of PRs because it's not a blocker for the migration to `rust-vmm/vm-memory`.\r\n\r\nI plan to do it as soon as possible, but I would prefer to work incrementally here. There will be a lot of changes and I would like these PRs to be as easy to review as possible. > > > @serban300 can you also make the corresponding changes so that crates depend on GuestMemory and not GuestMemoryMmap?\r\n> > \r\n> > \r\n> > @andreeaflorescu there is a separate [issue](https://github.com/firecracker-microvm/firecracker/issues/1544) for this and I would like to implement it as part of a different PR or even a batch of PRs because it's not a blocker for the migration to `rust-vmm/vm-memory`.\r\n> > I plan to do it as soon as possible, but I would prefer to work incrementally here. There will be a lot of changes and I would like these PRs to be as easy to review as possible.\r\n> \r\n> I actually find it harder to review because you miss the bigger picture and there are a lot of PRs that need to pass the tests. We then need to chase away all references of GuestMemoryMmap and replace them with GuestMemory.\r\n\r\nAs I see it, It shouldn't be harder to review the following PRs. The bigger picture is quite simple and hard to miss. We now have a trait `GuestMemory` that has to be used instead of the concrete implementation. It's a best practice in computer science. And we would need to chase away all the references of `GuestMemoryMmap` and replace them with `GuestMemory` anyway, regardless of whether we do it now or later. \r\n\r\nThe only problem is the size of the PRs. Personally I would find it very hard to review a PR containing everything at once. Also if we merge this PR first, we will be able to parallelize some work later. We will be able to continue the work for switching to the `vm-memory` crate, while also working on using to the `GuestMemory` trait in the same time.  I still have to review the tests, aside for some provided comments, PR looks good! @alexandruag @acatangiu @iulianbarbu please take another look. I fixed the conflicts.  ## Firecracker snapshots\r\n\r\nThis PR describes the overall snapshotting proposal.\r\n\r\nFixes #1395  > We did not consider THP yet, but we are not aware of any limitations on kvm dirty page tracking and THP. Do you have any data points on this ?\r\n\r\nkvm_dirty_log (on x86_64 at least) supports only 4K pages.\r\n @NoR8quoh1r we've updated the proposal to allow toggling kvm dirty page counting. The work on this one was continued on #1890. Closing this.  Fixed by #1592   @andrew-d the code you added looks good, but I don't see a clear usecase for it. The idea for the `SendCtrlAltDel` command is for the guest to get the chance to cleanly shut down.\r\n\r\nFrom a use-case point of view, the functionality added by this PR is no different than simply `kill`-ing the firecracker process. As such, I don't see added value in adding and maintaining this proposed new functionality. > I don't know enough about KVM to know if there would be a resource leak or other issue with simply SIGKILLing the main Firecracker process; if doing that is perfectly safe and doesn't leak any KVM resources, then yes, this code is redundant.\r\n\r\nKilling the Firecracker process will not leak any host resources, kvm or otherwise.\r\n\r\nThe problem with `kill`ing the firecracker process is that the guest does not get a chance to do any shutdown operations. IO buffers both in the guest kernel and in the firecracker process don't get flushed so disk drives might end up in dirty states. By using `VcpuEvent::Exit` events to stop the guest we could make sure to flush the firecracker internal buffers before closing the process, but without flushing the guest OS ones as well, it will not solve much - maybe just slightly decrease the probability of dirty disk states.\r\n\r\n> I'm happy to look into the KVM side further, if you have any pointers?\r\n\r\nLooking into KVM further regarding what exactly? > Ignoring Firecracker's buffers for a second: if the guest is using a journaling filesystem, then killing the VM while it's running is the same as a power loss event, and as long as the guest code properly uses fsync() and a journaling filesystem, modern systems should handle this just fine.\r\n\r\nI think the API you propose would help in such a case. Let us think on it for a couple of days. @andrew-d We've had a quick look at the code and our findings are that `kill`-ing the Firecracker process is as safe as this proposed API.\r\n\r\nFor the `net` and `vsock` devices we don't really care about guaranteeing flushing pending data for unresponsive guests. I don't believe that'd bring any value to an actual customer use-case. Please correct me if I'm wrong.\r\n\r\nFor `block` devices (emulated disks), Firecracker doesn't have any intermediary buffers outside of the virtio queues and all `write()`s are blocking writes. Virtio in-flight requests are handled according to the virtio protocol and as long as the guest driver is following that correctly, journalled filesystems will work fine regardless of when Firecracker is `kill`ed. For the guest a `kill -9 fc-pid` should be equivalent to a power loss.\r\n\r\nFor now, the extra API proposed in this PR doesn't bring any value. We should revisit this if/when we start looking at `async-io`.  Add guard pages to mmaped regions in order to prevent read/write ops outside of the regions\r\n\r\nWe should implement this in `rust-vmm/vm-memory` if possible. > @serban300 can you please open an issue in vm-memory as well to check with the maintainers if this is something they want tot do?\r\n\r\nI opened an issue in `rust-vmm/vm-memory`  Previous benchmarks showed low performance when running a 4K random read test with fio.\r\n\r\nWe need to measure current I/O performance with different block sizes on the refactoring/epoll branch, identify possible bottlenecks and  options for improving performance. @sandreim do we already have an issue for improving block performance?  Fixed by #1518     Please reword the commit title for 52da735d31811ff2675a95d2a2a093a3a826d105 to something more specific (e.g. `seccomp: level representation as u8`). Please also update the PR description and specify the changes clearly under `# Description of changes`. You can tick the remaining boxes in the checklist once that's done :slightly_smiling_face:  @KarthikNedunchezhiyan that's fine with me :+1:   @iulianbarbu I've edited this PR to be opened against the `refactoring/epoll_handler` branch, instead of the `master` branch. Overall it looks great! I will make another review pass and dive-deep to verify we're not losing any corner-case functionality.\r\n:+1:   Signed-off-by: Serban Iorga <seriorga@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\npartially addresses #1543 \r\n\r\n## Description of Changes\r\n\r\nRename GuestMemory to GuestMemoryMmap\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Node-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n > @serban300 most of these renames will need to be reverted once we switch to vm-memory because we will want crates to take a dependency on the GuestMemory trait and not the mmap implementation. Crates that take dependency on vm-memory should only be using the trait.\r\n\r\nYes, but I would suggest to migrate like this and then do those changes incrementally as part of another item. > > > @serban300 most of these renames will need to be reverted once we switch to vm-memory because we will want crates to take a dependency on the GuestMemory trait and not the mmap implementation. Crates that take dependency on vm-memory should only be using the trait.\r\n> > \r\n> > \r\n> > Yes, but I would suggest to migrate like this and then do those changes incrementally as part of another item.\r\n> \r\n> What would be the benefit in doing that?\r\n\r\nI don't see any disadvantage. It has to be done anyway, even if we import the `GuestMemory` trait. And we don't need more than this in order to migrate to `vm-memory`. But actually I can try to import the `GuestMemory` trait as part of this issue. Let me see how much work it would imply. > > > > @serban300 most of these renames will need to be reverted once we switch to vm-memory because we will want crates to take a dependency on the GuestMemory trait and not the mmap implementation. Crates that take dependency on vm-memory should only be using the trait.\r\n> > > \r\n> > > \r\n> > > Yes, but I would suggest to migrate like this and then do those changes incrementally as part of another item.\r\n> > \r\n> > \r\n> > What would be the benefit in doing that?\r\n> \r\n> I don't see any disadvantage. It has to be done anyway, even if we import the `GuestMemory` trait. And we don't need more than this in order to migrate to `vm-memory`. But actually I can try to import the `GuestMemory` trait as part of this issue. Let me see how much work it would imply.\r\n\r\n@andreeaflorescu I tried to import the `GuestMemory` trait from `rust-vmm/vm-memory`. Here is the [PR](https://github.com/firecracker-microvm/firecracker/pull/1545) for that. Considering that that PR can't be merged yet since it depends on other PRs, considering that we need to rename the `GuestMemory` struct to `GuestMemoryMmap` anyway in order to be able to import the `GuestMemory` trait and considering that the renaming consists of a lot of small changes that touch a lot of code and that can lead to merge conflicts fairly easily and also making #1545 much more verbose than it has to be, I propose the following strategy:\r\n\r\n1. Merging this PR\r\n2. Waiting for #1495 and #1497 to be merged\r\n3. Merging #1545 \r\n\r\n4. Implementing #1544 in a separate PR since\r\n- it's not a blocker for the migration to `rust-vmm/vm-memory`\r\n- it will contain fairly big changes that will touch a lot of code  On snapshot creation, make sure to flush disks so that any in-flight data in the host OS buffers gets committed to the files backing the disks.  Rescanning a block device can be done through a PATCH /drives API call.\r\nMore details can be found at `docs/api_requests/patch-block.md`.\r\n  @dianpopa \r\n\r\n>  some users might want to modify the location of the api socket when using a jailed Firecracker\r\n\r\nI don't see this as a necessity, not just because nobody asked for it, but because users already kinda have this possibility because they pick the jail's ID, which in turn defines the chroot's path, and the socket will be at a known location (by default) under that path. I think that's a + on usability.\r\n\r\n@andreeaflorescu \r\n\r\n> the chroot lives as long as the firecracker process lives\r\n\r\nOr longer, because Firecracker doesn't clean it up, which means that...\r\n\r\n> In this context, the api socket is not a temporary resource, but rather a permanent one. Hence, placing it by default under a temporary directory (`/tmp`) inside the chroot is misleading when looking at the bigger picture.\r\n\r\n...from the host's point of view, it's not a temporary location, unless the whole chroot root (heh) is temporary, in which case it's so because the user explicitly wanted it to be.\r\n\r\nSo, my suggestion is to remvoe `--api-socket` from the jailer's parameters, and change no defaults, WDYT? > The jailer does not have a `--api-socket` parameter. It hardcodes a [location/name](https://github.com/firecracker-microvm/firecracker/blob/master/src/jailer/src/main.rs#L25) and then it [passes](https://github.com/firecracker-microvm/firecracker/blob/master/src/jailer/src/env.rs#L298) it to Firecracker which has an `--api-socket` parameter. Did I understand correctly your proposal?\r\n\r\nYup, you're right, I had a wrong impression (and didn't check the code :grin:)\r\n I think the direction proposed in this PR is the right one and mostly matches all your comments:\r\n> The `jailer` should not concern itself with the api socket in any way. It should just build the jail and pass any firecracker-relevant parameters directly to firecracker through the use of the newly-ish added `--` mechanism.\r\n\r\nFirecracker behavior will then be consistent with or without a jail:\r\n- if `--api-socket` param is provided it will use it without concerning itself whether it's in a jail or not,\r\n- when no such param is provided, it will just default to some path (currently `/tmp/firecracker.socket`, subject to change in a different PR if there is a case to do so).\r\n\r\nWDYT?\r\n\r\nL.E. This is indeed a breaking change for `jailer` users. You're right that since we are making a breaking change, we should make the **right** and **complete** breaking change :stuck_out_tongue: \r\n\r\n> I also chatted with @dhrgit a bit about this and the default directory we were thinking about is /var/runor /run. This seems to be the generally accepted directory for runtime variables. See some documentation here.\r\n\r\nSounds good to me.  ## Reason for This PR\r\n\r\nImplements #1428\r\n\r\n## Description of Changes\r\n\r\n**Please review the commits one by one if it helps while also keeping in mind that there are some leftovers from first commits that get cleared out in the last one as \"Cosmetic changes\".** \r\n\r\n**While reviewing this you will also find that I temporarly broke the promise of keeping the devices generic (dyn VirtioDevice) in some places like builder and controller. I will address these after we finish refactoring all the devices.**\r\n\r\nThis PR focuses mostly on refactoring the Block device but also touches Net, Vsock, MmioDevice and MmioDeviceManager.\r\n\r\nSummary of changes:\r\n- Merge BlockEpollHandler with Block and implement EventHandler for Block. Add a dummy implementation of EventHandler for Net and Vsock.\r\n- Adds EventManager in VmmController and uses it Builder to register the Block device.\r\n- Adds a temporary second path to register devices in MmioDeviceManager\r\nwith register_block_device() and a generic device resources registration\r\nfn: register_device_resources(). We will remove these once we have all\r\ndevices migrated to EventManager.\r\n- Rename MmioDevice to MmioTransport and comment it's unit tests\r\ntemporarly. \r\n-  Rework some aspects of MmioTransport and relocate resources to VirtioDevice trait\r\nimplementors. Add methods to get queues, interrupts and events in VirtioDevice trait and move it  to a separate file.\r\n- Update Net, Block, Vsock devices with the new VirtioDevice trait fn implementations and create queues and interrupts in their constructors.\r\n- Split the block device into multiple files.\r\n- Cosmetic changes\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue and the reason for this PR is clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] Changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n > I haven't looked at all the code yet, but I think the device implementation code is spread in too many files and that doesn't really help with readability. Can we sync on this offline? I think we should try to keep the structure of the code as close as possible to what the Virtio specification defines as building blocks of a device.\r\n\r\nSure, let's sync offline. Ooops, most of my comments have already been addressed in later commits, I will mark those as resolved, sorry for the spam. There's still work left around unit-tests and some integration tests are failing intermittently, but let's merge this since @sandreim doesn't have bandwidth to continue on this topic.\r\nSomeone else should fix those in a future PR.  @alexandruag #1545 is waiting on this already approved PR, please resolve the conflicts so we can merge it  While trying to cleanup errors, I've realized that our ownership model, while better, was still all over the place and we could do much better in terms of separation of concerns, ergo this PR.\r\n\r\nThis PR builds on top of #1489 \r\n\r\n## Description of Changes\r\n\r\nDecouples the different objects describing the Vmm interface in three layers of separation (bottom-up as follows):\r\n1. The Vmm object programmatic interface with Vmm-specific input and errors.\r\n2. A Vmm RPC API to provide RPC user/external interaction with the Vmm.\r\n3. The Http REST API server.\r\n\r\nIn the first layer the Vmm should not try and care about user-facing errors.\r\nThe Vmm defines its own set of specific errors which will be later encapsulated and appended with extra information by the upper layers.\r\n\r\nThe second layer is a newly added module which exposes vmm user-facing API. It acts as an adapter between the user-facing API and the vmm-as-a-library programmatic API.\r\nThis RPC api middle layer uses dependency injection to get individual commands from the upper layer, validate and translate them and pass them to the lower layer.\r\n\r\nThis allows greater flexibility in changing the Vmm implementation and code-level interface without breaking user-facing API.\r\n\r\nInstead of trying to catch all the possible Vmm configuration combinations and which APIs are allowed when, API Adapter flavors also act as recipes for working with allowed subsets of the user-facing API commands which are only relevant in certain usecases (like preboot and postboot, snapshots and possibly live migration or live update).\r\n\r\n![vmm-components](https://user-images.githubusercontent.com/31917973/71740384-b5355500-2e64-11ea-9770-4f3496dab525.png)\r\n\r\n### No API Controller\r\n\r\nVisual depiction of a Firecracker microVM when running with `--no-api`:\r\n\r\n![no-api](https://user-images.githubusercontent.com/31917973/71742141-7655ce00-2e69-11ea-8547-887a8eac9e91.png)\r\n\r\n### Runtime API Controller\r\n\r\nVisual depiction of a Firecracker microVM in the `running` state (post boot) being controlled by an external `ApiServer`:\r\n\r\n![api-runtime](https://user-images.githubusercontent.com/31917973/71743937-773d2e80-2e6e-11ea-9600-84bb1ba01baf.png)\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license. @sandreim @alexandruag please take another look @alexandruag I've also removed the dependency on `VmResources` from the `builder` module.\r\n\r\nThanks for pointing that out!  ## Description of Changes\r\n\r\nDisclaimer: This is a rather heavy PR/RFC, but benefits should be obvious.\r\n\r\nThe microVM lifetime and how resources are owned and managed is now clearly split in two:\r\n1. There is a pre-boot *vmm-building* loop where pre-boot-supported API requests are handled. These mostly work on the resource collection defining the microVM. At this time, Firecracker acts as a data-store exposing a REST API for managing the data (microVM resources). A successful `StartMicroVm` command (successful boot) will move the microVM into the post-boot state, while failures are recoverable as they do not dirty/mutate the data.\r\n2. There is a post-boot `VmController` which runs a control loop that handles `Vmm` internal events and also handles post-boot-supported API requests.\r\n\r\nThere is a very clear separation of concerns between objects used in each of these consecutive stages.\r\n\r\nAnother clear delimitation which occurred is between:\r\n1. Configuring from API\r\nand\r\n2. Configuring from cmdline JSON\r\n\r\nAnother one is between a microVM with its API enabled or disabled.\r\n\r\nThe `VmController` was further enhanced to provide a generic interface taking an external `trait` object for externally handling control events.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license. > I think there's one high level aspect that should be addressed at this point, namely the Vmm becoming Firecracker-specific again. One of the nicer outcomes of decoupling is having a Vmm agnostic to Firecracker devices, the way we setup memory, etc, which can be used for different use cases based on a generic interface. One example approach is the current state of using `MmioDevice` instead of specific devices when building the Vmm, and something like the [VmmBuilderConfig](https://github.com/firecracker-microvm/firecracker/blob/43d2341e842b85cd77f23c18d2fa087d03ebbf9b/src/vmm/src/lib.rs#L399) (naming aside) struct for the initial configuration.\r\n\r\nFurther incremental PR's should completly decouple the VMM from it's devices. One way of doing that would be to implement a new DeviceManager which would be responsible to own and operate the devices. The VMM would only need to hold a mutable ref to a DeviceManager trait object. As we go further we will need to identify options for building and registering the devices without needing the VMM instance like we do now.\r\n\r\n> \r\n> The newly proposed builder looks tied to a `VmResources` object, which in turn relies on Firecracker specific configuration (I assumed the builder should belong to the generic part of the Vmm logic, since there's no other interface for creating a Vmm). Moreover, I think the `GuestMemory` object passed to the Vmm should be passed to the generic logic from the outside (including loading the kernel image), since there are multiple ways of getting a fully initialized `GuestMemory` object besides the way it happens in Firecracker right now. In particular, when we start using `vm-memory`, the Vmm should be able to work with any guest memory object that implements the `GuestMemory` trait.\r\n\r\nThis is a fair point and I believe we can postpone this up until later when we will look at merging code back to the master branch.\r\n\r\n> \r\n> Otherwise, I think we can move ahead with these changes and postpone discussing other details until we get a better idea about the polly integration (which will probably require additional changes anyway) and we start bringing things into the master branch.\r\n\r\n I've synced up offline with @alexandruag and agreed this PR takes things in the right direction and through iteration we can address any outstanding issues.  Hi @rbrasga, this sounds like a very interesting project! How would that work from Firecracker's perspective? Would it do device passthrough? Would it work with another process instead of the OS filesystem?\r\n\r\nCan you provide more details so we get a better idea on the proposal? Thanks! We'll discuss this with the maintainers and will get back to you. \ud83d\udc4d  Hi, @rbrasga ! We haven't been able to reach a conclusion. We need some more time. I think we will have it by the end of next week.  Yes :+1:   > Take x86_64, on a previous PR 1471 there are 68 passed, 2 skipped, while on this one, there are 50 passed, 20 skipped.\r\n\r\nOn x86_64 it looks the same now (68 + 2) and on aarch64 20 are skipped indeed, but they're skipped with the current CI too. See [a sample log](https://firecracker-pr.s3.amazonaws.com/pr-logs/aarch64/01471/serban300-firecracker-a9f47be.log).\r\n  @aghecenco @andreeaflorescu I addressed all the comments. Please take another look ! @aghecenco @andreeaflorescu please take another look. I addressed all the comments.\r\n\r\nI had to decrease the coverage by 0.1% because I added some lines that can't be tested. For example [here](https://github.com/serban300/firecracker/blob/5b522c91e53e446894d342403833a453e6fec952/src/devices/src/virtio/net.rs#L240) .\r\n\r\n  Let's keep this open to track the Firecracker related work needed once we find the right solution in vmm-sys-util. Currently blocked on https://github.com/rust-vmm/vmm-sys-util/issues/64 Solved by https://github.com/rust-vmm/vmm-sys-util/pull/70. Last piece for this to be complete is merging #1673.  @sipsma this looks like a bug on our side. We should gracefully handle `KVM_EXIT_SHUTDOWN`, thanks for the deep-dive and help on finding the root cause \ud83d\udc4d  `KVM_EXIT_SHUTDOWN` is not something we need to whitelist. It's just a type of [`VcpuExit`](https://github.com/rust-vmm/kvm-ioctls/blob/18bc6b95a86df9feaa44d8a2ad3383a1f0d179eb/src/ioctls/vcpu.rs#L56), and we handle it in the [vcpu's emulation loop](https://github.com/firecracker-microvm/firecracker/blob/0987cdc52b77487431d1c921c2ba98f264ef5e31/src/vmm/src/vstate.rs#L639).\r\n\r\nThe weird thing is this:\r\n\r\n> What's kind of interesting is that I can also see some strace logs for different VMs showing `fc_vcpu0` threads that apparently receive `KVM_EXIT_SHUTDOWN` but then don't call `rt_sigprocmask`, allowing them to exit with 0:\r\n\r\n`rt_sigprocmask` is called by libc, originating in `pthread_exit`. See https://github.com/firecracker-microvm/firecracker/issues/1088#issuecomment-539974241\r\n\r\n> After more digging, looks like the `rt_sigprocmask` is unescapable. It's also called from [`__block_all_sigs`](https://git.musl-libc.org/cgit/musl/tree/src/signal/block.c), which is in turn called by [`pthread_exit`](https://git.musl-libc.org/cgit/musl/tree/src/thread/pthread_create.c#n132). Basically `musl` took every precaution and blocks signals whenever something signal-unsafe is underway. \r\n\r\nSo, when the vcpu threads exit, they should be calling `sigprocmask` and causing a `SIGSYS`. So, do we whitelist `sigprocmask` for `musl` @firecracker-microvm/compute-capsule ? Doesn't look like we did. And there's no way to reconcile `pthread_exit` with our seccomp filter without it ## Background\r\n\r\nOn reboot each vcpu will:\r\n- on `x86_64`:\r\n  - write `CMD_RESET_CPU` to the `i8042` which will generate a `vmm-exit-event`.\r\n- on both `x86_64` and `aarch64`, on more recent host kernels (I need to crawl the linux changelog to see where exactly this was introduced):\r\n  - eventually return from cpu emulation with kvm exit reason `KVM_EXIT_SHUTDOWN` which also generates a `vcpu-exit-event` which is interpreted as a `vmm-exit-event`.\r\n\r\nOn a `vmm-exit-event` the vmm will cleanup some things then exit firecracker with `exit code 0`.\r\n\r\n## Bug root cause\r\n\r\nThe problem described in this issue is that firecracker vcpu threads finish their execution thread shortly after issuing the `vcpu-exit-event`. As part of cleaning up a finished thread `musl` invokes `sigprocmask`.\r\nUsually the vcpu thread cleanup doesn't get that far because the vmm thread quickly captures the `vmm-exit-event` and exits the process cleanly, but on a system with high load, the vmm thread might be scheduled out for a while and this bug in the firecracker code is exposed.\r\n\r\n## Proposed solution\r\n\r\n`Vcpu` main loop should not end after issuing `vcpu-exit-event`, instead it should move to the `Paused` state and wait for further commands from `Vmm`. This will allow the `Vmm` thread full control on what should happen next, and will also fix the incorrect behavior reported in this issue.  The CI AMIs have the kernel module loaded but the first `losetup` fails.\r\nDetailed failure:\r\n```bash\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: initialize context\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: init: ignore ioctls\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: init: loop-control detected \r\n2018: loopdev:      CXT: [0x7fffb3e44280]: find_unused requested\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: using loop-control\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: loop0 name assigned\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: find_unused by loop-control [rc=0]\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: set backing file=/tmp/firecracker_test_session/c917d717-c69c-4cc9-ad05-a08f87ea8\r\n2018: loopdev:    SETUP: [0x7fffb3e44280]: device setup requested\r\n2018: loopdev:    SETUP: [0x7fffb3e44280]: backing file open: OK\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: open /dev/loop0 [rw]: No such file or directory\r\n2018: loopdev:    SETUP: [0x7fffb3e44280]: failed [rc=-2]\r\nlosetup: /tmp/firecracker_test_session/c917d717-c69c-4cc9-ad05-a08f87ea82b1/fsfiles/fs2.ext4: failed to set up loop device: No such file or directory\r\n2018: loopdev:      CXT: [0x7fffb3e44280]: de-initialize\r\n2018: loopdev:     ITER: [0x7fffb3e44438]: de-initialize\r\n```\r\n\r\nThe `losetup --find ...` command issued by the integration test should create a loop device if none are found, but doesn't appear to do so. A `losetup` invocation before running the tests should fix it. The `/dev/loop*` devices aren't created by `losetup` - at least initially. They can be manually created with `mknod` if the `loop` module is loaded. @firecracker-microvm/compute-capsule \r\n\r\nThis can be fixed by `mknod`'ing any missing `/dev/loop*` devices, but I don't like it as it will affect the state of the host outside the container. WDYT? > There are different ways to approach this, but the one I'm inclined towards is to rework our container to use `tini` from a location of our choosing (e.g. `/sbin/tini`), meaning we no longer need to rely on the docker `--init` switch and the conflicting `/dev/init`.\r\n\r\nI'll give that a shot :gun:   Good idea to pull in master branch changes as well so we don't diverge.\r\nRebasing this branch on top of the master branch in a PR like so will not be possible however. (Unless we want to `push -f` to this branch all the time). I don't know what the best approach is here.  @pyrito In order to be able to tick\r\n> Either the changes in this PR have no user impact, or, the changes in\r\nthis PR have user impact and have been added to the CHANGELOG.md file.\r\n\r\nyou should also add an entry in `CHANGELOG.md` under the `Fixed` section where you should describe the change in behaviour as seen by the user.\r\n\r\nAlso don't forget to squash your commits as described in my previous comment :)  When rate limiting is enabled and the guest is receiving a lot of traffic that triggers throttling the emulation thread will use 100% CPU.\r\n\r\nThere are 2 possible approaches here:\r\n- quick fix: keep the current code structure and configure edge triggered epoll for the tap fd.\r\n- proper fix: rework the current state machine and use edge triggered epoll\r\n Hi @pyrito,\r\n\r\nThe issue happens when the net device does not read all the the packets from the TAP device waiting for the limiter to replenish it's budget. When that happens the epoll loop will continuously fire the RX_TAP_EVENT until all packets will be read. There is already some code that unregisters the epoll event when there are no more free RX buffers but that does not cover the case when we stop processing the tap RX due to limiter budget.\r\n\r\n  Currently this invalid PATCH request ( **bytes** instead of **bandwidth**) does not yield an error:\r\n```bash\r\n  sudo curl -X PATCH -i \\\r\n  --unix-socket /tmp/firecracker-andrei.socket \\\r\n  http://localhost/network-interfaces/eth0 \\\r\n  -H  'Accept: application/json'          \\\r\n  -H  'Content-Type: application/json'    \\\r\n  -d '{\r\n    \"iface_id\": \"eth0\",\r\n      \"rx_rate_limiter\": {\r\n      \"bytes\": {\r\n            \"size\": 62500,\r\n            \"refill_time\": 1000\r\n          }\r\n      },\r\n      \"tx_rate_limiter\": {\r\n          \"bytes\": {\r\n            \"size\": 62500,\r\n            \"refill_time\": 1000\r\n          }\r\n      }\r\n  }'\r\n```\r\nThe log shows:\r\n2019-11-27T13:40:54.952166781 [anonymous-instance] The Patch request on \"/network-interfaces/eth0\" with body \"{\\n    \\\"iface_id\\\": \\\"eth0\\\",\\n      \\\"rx_rate_limiter\\\": {\\n      \\\"bytes\\\":\r\n {\\n            \\\"size\\\": 62500,\\n            \\\"refill_time\\\": 1000\\n          }\\n      },\\n      \\\"tx_rate_limiter\\\": {\\n          \\\"bytes\\\": {\\n            \\\"size\\\": 62500,\\n\r\n\\\"refill_time\\\": 1000\\n          }\\n      }\\n  }\" was executed successfully. Status code: 204 No Content.  This is a regression dating back to this PR: https://github.com/firecracker-microvm/firecracker/pull/413.\r\n\r\nIf the TX queue becomes full the guest would not be able to enqueue any TX packets until an RX from the tap device will raise the interrupt and the guest will inspect both RX/TX queue status. \r\nThe issue impacts the workloads where the TX:RX ratio is highly skewed towards TX, for example sending large bursts of traffic without doing much RX. \r\n\r\nBefore merging a fix benchmarking is needed to understand the performance implications of raising additional irqs.\r\n\r\nTODO:\r\n\r\n- Implement irq raising for used descriptors (TX)\r\n- Performance benchmark\r\n- Integration test\r\n   @iulianbarbu if we merge it like this, please add an issue describing the leftover improvements so we can track them.  Thanks for logging this @teawater. We will look into it and update you. @teawater We need more context into the problem as our integration tests pass without requiring the workaround that you implemented.  Can you please provide steps and some more information on the setup that reproduces this issue ? Ideally that would be the most simple scenario that triggers the bug.  > @aghecenco adding the missing syscalls to the `libc` crate would definitely be cleaner, but would that solve the issue? We still need a way to check if a user supplied string is exported as a variable from `libc` and read the value, right?\r\n\r\nYeah, but at least it can be autogenerated if libc exports everything we need :+1:  Hi @mi-yu, @pyrito, I added some thoughts on https://github.com/firecracker-microvm/firecracker/issues/1366#issuecomment-572637218, WDYT?    Firecracker signal.rs code was refactored, do the same in vmm-sys-util to consume the new version from there.  Do you have a quick reference resource you can link that explains why moving the crates under `/src` is tidy while the current state is not? Makes sense. I thought we enable some `Cargo` magic as well (that we were previously missing).  Hello, I would like to work on this. From my understanding, the issue is that the docs should be extended to show how to configure and boot the vm after it is configured?  Signed-off-by: Andrei Sandu <sandreim@amazon.com>\r\n\r\n## Reason for This PR\r\n#1403 \r\n\r\n- Implement Pollable, PollableOps\r\n- Implement EventManager and EventHandler trait.\r\n- Implement channel for sending PollableOps\r\n- Unit tests\r\n\r\n## Description of Changes\r\n\r\nProvided in commit message.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] The required doc changes are included in this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] Either the changes in this PR have no user impact.\r\n- [x] Newly added `unsafe`code is unavoidable and properly documented.\r\n  @firecracker-microvm/compute-capsule I'd like to prioritize this PR so that we unblock https://github.com/firecracker-microvm/firecracker/issues/1386 Blimey! 64 files changed to re-review  Just wanted to mention a couple of very high-level points that might be worth taking into consideration here. I didn't create tasks since I don't have a detailed design.\r\n\r\n### Modularity\r\n\r\nA virtual net device is mostly an intermediary. It forwards Ethernet frames from the host or MMDS to the guest and vice-versa. If we consider its purpose and also take into account special cases where a frame can\u2019t be forwarded because of lack of space or other constraints, a basic net device could contain only frame forwarding, frame buffering and constraints checking (e.g. rate limiting) logic.\r\n\r\nIn the Firecracker net device this basic logic is also coupled with some extra logic. In order to keep the net device as simple as possible it would be nice to decouple this extra logic in different components. At least 3 come to mind:\r\n\r\n* a `FrontEnd` or `GuestEnd` that would contain the logic for reading/writing to virtio queues. It could just implement Read and Write:\r\n\r\n```\r\npub struct GuestEnd {\r\n    queues: Vec<Queue>,\r\n    queue_evts: Vec<EventFd>,\r\n    interrupt_evt: EventFd,\r\n}\r\n\r\nimpl GuestEnd {\r\n    pub fn write(&mut self, frame: &[u8], mem: &GuestMemoryMmap) -> Result<(), Error> {\r\n        ...\r\n    }\r\n\r\n    pub fn read(&mut self, frame: &mut [u8], mem: &GuestMemoryMmap) -> Result<(), Error> {\r\n        ...\r\n    }\r\n\r\n    pub fn interrupt(&self) -> Result<(), Error> {\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n* a `BackEnd` or `HostEnd` that would contain the logic for wrouting to the MMDS or tap. Also It could simply implement Read and Write.\r\n\r\n* a special structure for handling frame buffering\r\n\r\n### Performance\r\n\r\n* it would be nice if we could simplify and improve the frame deferring strategy. Notification suppression would be an option here.   \ud83d\udc4d   Implement epoll wrappers in EventManager crate.  Continue implementation based on the working prototype in this pull request: https://github.com/firecracker-microvm/firecracker/pull/1334 .\r\n\r\nTODO list:\r\n-  Error handling\r\n-  API changes \r\n-  Unit tests\r\n-  Crate documentation\r\n  I contributed with the following PRs so far:\r\n\r\nhttps://github.com/rust-vmm/vm-memory/pull/59\r\nhttps://github.com/rust-vmm/vm-memory/pull/58\r\nhttps://github.com/rust-vmm/vm-memory/pull/57\r\nhttps://github.com/rust-vmm/vm-memory/pull/52 PRs for removing tempfile dependency in `rust-vmm/vm-memory`:\r\n\r\nhttps://github.com/rust-vmm/vmm-sys-util/pull/70\r\nhttps://github.com/rust-vmm/vm-memory/pull/61\r\nhttps://github.com/rust-vmm/vmm-sys-util/pull/71\r\nhttps://github.com/rust-vmm/vmm-sys-util/pull/72 PRs containing documentation improvements:\r\n\r\nhttps://github.com/rust-vmm/vm-memory/pull/69\r\nhttps://github.com/rust-vmm/vm-memory/pull/65  https://github.com/firecracker-microvm/firecracker/pull/1562 makes the switch to `vm-memory`, so it's safe to say the crate has been examined.  We want to be able to accelerate certain snapshot usecases where the Guest Memory is host-file `mmap`ed.\r\n\r\nImplement support for this in the `GuestMemory` crate.\r\nAn alternative option is to use https://github.com/rust-vmm/vm-memory which already provides this support. This was solved by switching to rust-vmm/vm-memory which happened in #1562.  `kvm-bindings` offers us FFI-structs used by the KVM api.\r\nWe need to implement (de)serialization mechanisms for said structs.  `kvm-ioctls` v0.4.0 will contain support for (previously missing):\r\n\r\nVcpu serialization and deserialization:\r\n- KVM_GET_CPUID2\r\n- KVM_GET_MP_STATE\r\n- KVM_SET_MP_STATE\r\n- KVM_GET_VCPU_EVENTS\r\n- KVM_SET_VCPU_EVENTS\r\n- KVM_GET_DEBUGREGS\r\n- KVM_SET_DEBUGREGS\r\n- KVM_GET_XSAVE\r\n- KVM_SET_XSAVE\r\n- KVM_GET_XCRS\r\n- KVM_SET_XCRS\r\n\r\nVm serialization and deserialization:\r\n- KVM_GET_IRQCHIP\r\n- KVM_SET_IRQCHIP\r\n- KVM_GET_PIT2\r\n- KVM_SET_PIT2\r\n- KVM_GET_CLOCK\r\n- KVM_SET_CLOCK\r\n\r\n\r\n\r\n **Currently blocked** on creating a new `kvm-ioctls` release https://github.com/rust-vmm/kvm-ioctls/issues/59 **Also blocked** on https://github.com/firecracker-microvm/firecracker/issues/1346\r\nNew `kvm-ioctls` uses `vmm_sys_util::EventFd` from while firecracker uses `sys_util::EventFd`. > just replace the occurrence of sys_util::EventFd with vmm-sys-util::Eventfd\r\n\r\neasier said than done. It's also throwaway work.\r\n\r\n> make sure we take the time that we need for switching to vmm-sys-util\r\n\r\ndefinitely take the **required** time, but I consider #1346 to now be higher priority because it's blocking using the new `kvm-ioctls`. It's just a matter of prioritization not about quality or rash decisions.   @dhrgit is reworking this area right now and will add clean support for keeping the test session while using `devtool` as part of #1411 (he said he will post a PR soon).\r\n\r\n@marcov I suggest you not spend time to patch the current `devtool` as it will probably be throw-away work. I guess we can keep just the `KEEP_TEST_SESSION` functionality in this PR which will provide enough support in the meantime.  We've discussed live and in cases where all touched code has better or same coverage it is fine to adjust overall coverage if necessary (because of rounding off errors, or because deriving `Debug` or because some covered code has been completely removed and the overall percentage decreases). > > We've discussed live and in cases where all touched code has better or same coverage it is fine to adjust overall coverage if necessary (because of rounding off errors, or because deriving `Debug` or because some covered code has been completely removed and the overall percentage decreases).\r\n> \r\n> What I fear in this case is that if we drop the coverage bar to 84.9, the coverage test will fail on arm because the value there exceeds the threshold. We need to adjust the delta too.\r\n\r\nAFAIK there is no coverage test on `aarch64` as `kcov` is not supported there :disappointed: \r\n\r\nWe can also relax the delta (maybe in a separate PR so we can comment on it).  During our presentation at KVM Forum about Firecracker we got a suggestion for an improvement that we could do to our seccomp filters. Instead of having a static list of syscalls that are allowed, we can let the users of Firecracker to pass a list of syscalls that it wants to allow. This feature can help in two cases:\r\n- If you miss to add a syscall to the allow list, instead of needing to create a new Firecracker binary, you can just update the file containing the syscalls\r\n- If you don't use statically linked binaries (i.e. the musl build of Firecracker), it is hard to have a minimal list of all syscalls because it is highly dependent on the dependencies versions. In this case the Firecracker user can provide the list that is targeted for the workload, platform and other possible dependencies. After giving this issue some more thought, we've come up with a base set of requirements, and some ideas:\r\n\r\n## Key points to address\r\n\r\n1. **Architecture:**\r\n    1. **Whitelist structure:** the whitelist differs between `x86_64` and `aarch64`, as certain syscalls are only called on one of the 2 architectures.\r\n    2. **Syscall numbers**: even where the whitelist is identical, the syscall numbers can differ. This is relevant as it would impede users from specifying syscall numbers in the filter file.\r\n1. **Toolchain:** GNU libc issues different syscalls than musl libc.\r\n1. **Thread:** the whitelist should be specific to the thread on which it\u2019s applied. This is not yet implemented. See https://github.com/firecracker-microvm/firecracker/issues/1178, part of the larger seccomp improvements bundle https://github.com/firecracker-microvm/firecracker/issues/1177.\r\n1. **Security by default:** Firecracker\u2019s default behavior should remain unchanged, i.e. unless the user explicitly relaxes the seccomp filters, the process should run as restricted as possible. Analogous to the current default setting of `seccomp-level=2`, we will need to convert the hardcoded filters into default filter files.\r\n5. **VMM flexibility:** as of https://github.com/firecracker-microvm/firecracker/pull/1474, the filters are built before the VMM is instantiated, and passed to the VMM thread. This functionality needs to stay in place.\r\n6. **User experience:**  We do not want to complicate things for users and should aim for the opposite. The filter file must be clear and concise.\r\n\r\n## Proposal idea\r\n\r\nA new `seccomp-level=file` is introduced, working in tandem with a new command line parameter `filters`. The `filters` parameter does not make sense without `seccomp-level=file` and is ignored in combination with anything else. `seccomp-level=file` requires the `filters` parameter to be specified and exits the Firecracker process if it is not.\r\nThe existing options for `seccomp-level` are kept for usability and backwards compatibility, but can be obsoleted and deprecated later.\r\n\r\nThe `filters` parameter takes a JSON file containing rules. If `seccomp-level=file` is specified and the default rules overridden, the user assumes full responsibility for the correctness of the filters.\r\n\r\nThe currently hardcoded filters need to be converted or autogenerated from the Rust code. The corresponding files will be included in the Firecracker source tree. We can explore the possibility of bundling them in the binary, to simplify deployment UX.\r\n\r\n```bash\r\n--seccomp-level=\r\n    0   # seccomp disabled\r\n    1   # filters loaded from /path/to/basic/filters.json\r\n    2   # filters loaded from /path/to/advanced/filters.json\r\n    file --filters=/path/to/custom.filters.json\r\n```\r\n\r\nRule file format:\r\n\r\n```\r\n{\r\n  thread:\r\n  {\r\n    syscall_name:\r\n    [\r\n      # Rule 0\r\n      [ \r\n        { \"arg_idx\": $idx0, \"arg_type\": $type0, \"op\": $op0, \"val\": $val0 },\r\n        ...\r\n        { \"arg_idx\": $idxN, \"arg_type\": $typeN, \"op\": $opN, \"val\": $valN }\r\n      ],\r\n      ...\r\n      # Rule K\r\n      [ \r\n        { \"arg_idx\": $idx0, \"arg_type\": $type0, \"op\": $op0, \"val\": $val0 },\r\n        ...\r\n        { \"arg_idx\": $idxM, \"arg_type\": $typeM, \"op\": $opM, \"val\": $valM }\r\n      ]\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nRules `0` to `K` are logically `OR`-bound (only one of the rules needs to hold for the filter to match). All the conditions that comprise a rule are logically `AND`-bound (all of a rule\u2019s conditions must be met for the rule to hold).\r\n\r\nNeither the architecture, nor the libc implementation are mentioned in the file.\r\n\r\n`thread` can be one of `api`, `vmm` or `vcpu`.\r\n\r\nSyscalls are specified by name, not by number. The translation needs to be implemented in Firecracker (an autogenerated, toolchain-dependent, hardcoded map `syscall name \u2192 syscall number`). The same applies to named parameters imported from libc, which can also have different values.\r\n\r\n### Simplifying assumptions and restrictions\r\n\r\n* Neither integrity checks, nor validations, nor conflict resolution are performed on rules loaded from user-specified files.\r\n* The filters can only be specified at process startup time, through the command line arguments. There is no API call for seccomp configurations, nor has there been the need for one.\r\n* The filters cannot be updated at runtime.\r\n* The filter is expressed as a map, so the syscalls are not sorted by relevance. Having the most frequently used syscalls earlier in the filter is an optimization heuristic based on the idea that the kernel will have fewer rules to go through for each syscall.\r\n* The JSON file does not make it obvious to the user that rules are `OR`-bound and conditions within a rule are `AND`-bound. The format could be extended with explicit operators (i.e. rules and conditions within a rule could be expressed as dicts `\"OR\": [ <rules> ]` / `\"AND\": [ <conditions> ]`).\r\n\r\nExample\r\n\r\n```json\r\n{\r\n  \"vmm\":\r\n  {\r\n    \"SYS_accept4\": [],\r\n    \"SYS_futex\":\r\n    [\r\n      [\r\n        {\"arg_idx\": 1, \"arg_type\": \"DWORD\", \"op\": \"Eq\", \"val\": \"FUTEX_WAIT_PRIVATE\"}\r\n      ],\r\n      [\r\n        {\"arg_idx\": 1, \"arg_type\": \"DWORD\", \"op\": \"Eq\", \"val\": \"FUTEX_WAKE_PRIVATE\"}\r\n      ]\r\n    ]\r\n  },\r\n  \"vcpu\":\r\n  {\r\n    \"SYS_ioctl\":\r\n    [\r\n      [\r\n        {\"arg_idx\": 1, \"arg_type\": \"DWORD\", \"op\": \"Eq\", \"val\": \"KVM_SET_REGS\"}\r\n      ],\r\n      [\r\n        {\"arg_idx\": 1, \"arg_type\": \"DWORD\", \"op\": \"Eq\", \"val\": \"KVM_SET_SREGS\"}\r\n      ]\r\n    ]\r\n  }\r\n}\r\n```\r\n Good callout! I had that idea at one point but after bouncing it off the team I think it's better to keep things simple and not bring regexes into the matter. We can stick with `vmm`, `vcpu` and `api` categories. I updated the example.  Follow #1364 s example and remove byteorder from aforementioned crates too.  @dianpopa @dhrgit @petreeftime I've updated this PR with the current logger and metrics decoupling implementation. Please, take another look! > A few nits.\r\n> \r\n> Question: I don't think we need the infamous `preinitialized` (or `configured` - the current name) is needed anymore. This was a workaround that we introduced so that we can have logs when starting Firecracker. We can now have logs by configuring Firecracker from the start of the process. Can we remove that workaround? It can be done in another PR to not clutter this one, but I think we should do this before publishing a new version of Firecracker. WDYT?\r\n\r\nFrom what I recall, even with this type of configuration for the logger, `panic::set_hook()` would still be problematic because we can't be sure whether to use `error!` or `println!`.  ## Description of Changes\r\n\r\nAdded chunking capabilities to `micro_http::HttpConnection` and, transitively to `micro_http::HttpServer` and the API server.\r\n\r\nIf a client wants to send a big request, say an MMDS request of 100 MiB, they would most likely do it with the chunked transfer encoding. Furthermore, the HTTP [RFC7230](https://tools.ietf.org/html/rfc7230#section-3.3) states that all servers must support the chunked transfer encoding.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [ ] The required doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [ ] The changes in this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n  What is the error message (code number) returned when it fails?  ## Reason for This PR\r\n\r\nThe VMM has two fields (among others):\r\nVm and guest_mem. The Vm has another guest_mem\r\nfield which is a clone of the one found in the\r\nVMM. Removed it from the VMM and used the one\r\ninside the Vm.\r\nSome error throwing scenarios denoting programming\r\nerrors were transformed into expects.\r\n\r\n## Description of Changes\r\n\r\n- removed `guest_mem` field from VMM since it was a duplicate of vmm.vm.guest_mem\r\n- transformed some error throwing scenarios into expects\r\n- adjusted unit tests\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n  Hey, we moved away from additional restrictions in the firecracker-id. See PR: https://github.com/firecracker-microvm/firecracker/pull/441\r\n\r\nWe don't want to enforce more restrictions as it would make the ID unusable by some of our customers. The workaround I think of is to apply the restrictions in this PR outside of Firecracker. Does this sound okay to you?  Firecracker does not have an `i8042` device on `aarch64`. We could add the same level of emulation we do on `x86_64` that supports:\r\n- the cpu reset event\r\n- emulating Ctrl+Alt+Del keys combo  Hi @mprey! We are now in a state where our code is no longer in massive flux. If you are interested in picking this up, we'd be happy for the contribution.\r\n\r\nLike @andreeaflorescu said, this should be broken down in (at least) two PRs:\r\n- _update block device permissions_ (involves virtio renegociation/reactivation)\r\n- _update rate limiter for block device_ (fairly straightforward)\r\n\r\n> We don't support block device reset in Firecracker right now. We need to discuss whether this is something that we want to support.\r\n\r\nI vote yes here. As long as it doesn't over-complicate our device management (it shouldn't), I believe the benefits outweigh the cost.\r\n\r\n@xibz from a prioritization point of view, which of the two (patch drive permissions/rate-limiters) would help you most? \r\n  Using [this payload](https://github.com/zeMirco/sf-city-lots-json) for the PUT mmds command causes firecracker to terminate because of a blacklisted syscall: mremap.\r\nStack:\r\n```\r\n#0  0x0000000000a0c220 in mremap ()\r\n#1  0x0000000000a0be1d in realloc ()\r\n#2  0x00007ffff7ff1718 in ?? ()\r\n#3  0x0000000000000000 in ?? ()\r\n``` IMO the proposal sounds reasonable. But if we ever need to support huge payloads we could store the MMDS data in a temporary directory/file structure on disk and only use a small buffer in Firecracker to stream the data via the API server. It wouldn't be as fast as an in memory data store, but the memory footprint is reduced. You are correct, streaming implies changes in micro-http.  Docs are one way to address the limitation but I think we should at least look if it is possible to return an error to the user when the payload exceeds 256KiB instead of triggering the mremap call.  Possibly fixed by: #1374. Needs investigation.  Haven't yet looked at the code, but wanted to call-out the need for a better commit (and PR) summary (the first line - the title). It should summarize the intention of the changes along with the area/module they are in.  There was a problem with the CI. I redeliver the webhook, the status of the CI should be updated in the next hour or so.  Since [Bare Metal Arm-Based EC2 Instances](https://aws.amazon.com/blogs/aws/now-available-bare-metal-arm-based-ec2-instances/) are now available, we could try move our aarch64 integration testing there.  Regarding @sandreim's comment:\r\n\r\nI agree, it makes sense. There should be no reason to tie the MMDS to a specific network interface. I'm not sure how your proposal fits in our code-base (how easy it is to make that happen), but it is conceptually a better design.\r\n\r\nOne obvious downside is that when having MMDS enabled, **all** interfaces will take a performance/latency hit as they inspect `dest-ip` of every outgoing packet. And I think that's fine. > What do you think about changing the Firecracker REST API to provide a separate endpoint for configuring the MMDS IPs, while still keeping the allow_mmds_requests flag on the interface configuration ?\r\n\r\nThis sounds like the right solution to me.\r\n\r\nRegarding having a single stack instead of per-interface mmds network stacks, I don't think that it is easy to do. The simple tcp stack that we currently have does not, AFAIK, support multiplexed communication.  There is a solution to this. Checkout `format_code_in_doc_comments` in https://github.com/rust-lang/rustfmt/blob/master/Configurations.md but it is not stable yet. We should poll on that and bring it in Firecracker once stable.  @wkozaczuk this is not implemented in Firecracker because we are not following the virtio 1.0 specification, but the 0.95 one.\r\n\r\nAs I see it now, the likelihood of this particular issue being fixed before we completely switch to a virtio specification >= 1.0 is low. We are working on some improvements on the virtio devices in Firecracker, and we should have some updates in a couple of months.\r\n\r\nIs this issue blocking you in any way? If yes, we can see what steps we can take to address it faster. @andreeaflorescu what do you mean when you say we are not following the virtio 1.0 specification? We do negotiate the [`VIRTIO_F_VERSION_1`](https://elixir.bootlin.com/linux/v4.14.146/source/include/uapi/linux/virtio_config.h#L64). We even have a [link](https://github.com/firecracker-microvm/firecracker/blob/master/devices/src/virtio/net.rs#L39) in our net implementation that points to the v1.0 spec.   ## Description of Changes\r\n\r\nInstance states `Halting` and `Halted` were unused/unsupported. Removed them.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n @petreeftime @aghecenco please take another look.  > @dianpopa @andreeaflorescu It seems the CI could not start? Should we re-kick it?\r\n\r\nYes, indeed, sorry for that, we still have no idea why that happens sometime. Please do a `push -f`.  Closing this PR since the same functionality can be achieved using `--config-file` option and auto-generated clients from the swagger file (See an example here: https://github.com/lauralt/firecracker-go-sdk/commit/83ff4920e8ce7e0cd4188c7d9ed35178caa34a7f).  This behavior started manifesting itself after we switch to the last docker image. It is weird since the only difference is the fact that the last one contains `screen` as a service.\r\nFor me it would be interesting seeing what happened there rather than trying to change this test.  Hi @Unlimited-Witchcraft ,\r\nThanks for logging this.\r\nI need to know what rootfs and kernel are you using for booting the guest? Are you using the ones from the getting-started guide?\r\nAlso what are the specifications of the host you are testing on? @Unlimited-Witchcraft investigating this. Niiice, looking forward to your PR.  Closing in favor of #1309   Patching a block device (i.e. a backing file change) should only fail during boot. More specifically, the short window between machine start and virtio-blk driver initialization. That's why the error is expected during that test (the vm state is artificially set to `Running`, while the device is not yet activated).\r\n\r\nHowever, this behavior should be the same across both versions (0.17.0 and 0.18.0). @sipsma can you please post some more details on the specific use case that leads to this error. The steps to reproduce would be great. I think it makes sense to treat the vsock connect procedure as an async connect (i.e. one where you need to subsequently check the operation status). When connecting from the host to a guest listener which may not yet be there, I suggest having the listener ack the connection via some sort of message, such as the hello you mentioned, but sent from guest to host (i.e. `HELLO host-client`); like a server sending its banner as a greeting. This way, on the host side, after writing `CONNECT <port>`, you can try to read from the socket (or poll it for reading) and:\r\n- if the read is 0-sized, retry, since that means the connect call has failed (the host-side Unix socket connection has been closed);\r\n- if the read yields the ack message (banner, hello, w/e), it means the connection has been established, and therefore the guest has booted up and reached userspace init.  This looks like a Docker / guest userspace specific problem. You don't need to attach multiple interfaces to the vm, just like you wouldn't need multiple network cards on a bare metal host. Whatever network interface Docker creates is fully handled by the guest-side software.\r\n\r\nGoogling the error you are getting will yield some results from people who have run into the same issue with Docker, without Firecracker.  Currently, Firecracker supports emulating only 11 virtio devices on x86_64, since each device gets assigned its own IRQ. This issue will track adding support for sharing a single IRQ across multiple devices, thus removing the limit imposed on the number of emulated devices.  > Hi~ @dianpopa I have already updated. Feel free to take a look~ thanks~ ;)\r\n\r\nCool! I will take a look asap. > > Hi~ @dianpopa I have already updated. Feel free to take a look~ thanks~ ;)\r\n> \r\n> Cool! I will take a look asap.\r\n\r\nUp until then, seems there are some style related tests that are failing your PR. Try running `cargo fmt --all` for each of your commits. There are a few things left to do:\r\n* Update the description of changes (the narrative still describes the old solution)\r\n* You need to rebase and solve conflicts. > I'm not sure about this change. I understand how it simplifies things when building the FDT but personally I don't like the idea of using a Vec instead of a HashMap here and implementing `get_device()` and `remove_device_info()` by iterating over the entire collection. I don't have a better idea right now, but I would look for alternatives before merging this.\r\n> \r\n> I'm curiousif there are any other opinions here. @firecracker-microvm/compute-capsule ?\r\n\r\nThe number of devices a VM can have is already limited by the number of IRQs you have at your disposal, which actually deems the use of a hashmap useless. Iterating over a `137` entries (159-32 in the case of aarch64) stored in a `Vec` is insignificant as far as performance.\r\nAnother observation is that `remove_device_info` is used only in tests. The only operation in dev code is `get_device`.  Fixed by #1265.  ## Reason for This PR\r\n\r\n`Decouple the destination for flushing logs and metrics (currently a FIFO) from the logger crate.`\r\n\r\n## Description of Changes\r\n\r\n* `struct Logger` now can receive any byte oriented sink. It only requires it to implement the `Write` trait.\r\n* If the Logger has not been initialized, no error will be thrown when trying to flush metrics. However, the developer is informed of whether or not the metrics have actually been flushed to disk by looking at the `bool` wrapped inside the `Result` returned.\r\n* The Logger writer (i.e `PipeLogWrite`) was moved to `vmm`.\r\n* Some unit tests improvements for the logger\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR\r\n- [x] The changes in this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n @petreeftime @acatangiu please re-review after \"push -f\".  Running `cargo doc --open` inside the root project opens an empty HTML page. My guess is that it looks inside the `src/main.rs` file where we do not have any doc.  @acatangiu can you please review your requested changes?  If I understand this correctly, you are trying to connect to the guest before it actually had a chance to boot-up and start an AF_VSOCK listener. If that's so, then IMO, terminating the host connection is the correct behavior, since the host is trying to connect to something that isn't there.\r\n\r\nThe VMM is not privy to user space actions, such as starting socket listeners, so IMO, it shouldn't have the responsibility of ensuring proper timing concerning said actions. I'm not sure I understand what timeout that would be. In the use-case I mentioned, there is no timeout involved - the host connection is immediately refused by the guest (since there are no listeners present).\r\n\r\nAlso, I don't really understand how this would work with vhost either. When using vhost, were you issuing an AF_VSOCK connect call right after InstanceStart? I don't see how that could've worked reliably. Unless some AF_VSOCK socket is bound and listened to on the guest, any incoming connection would get immediately refused. Is there something I'm missing? @devimc When you connect to the Firecracker unix socket and write a `CONNECT <port>` command, a vsock connection request packet is queued by Firecracker. That request packet will reach the guest only after the guest vsock driver has had a chance to initialize and make some RX buffers available (the connection request packet is sent to the guest via an RX buffer).\r\n\r\nSo, if you send the `CONNECT <port>` command before the guest is fully booted up, chances are that the connection request packet sent by Firecracker will reach the guest socket layer sometime between vsock driver initialization and the guest userspace app binding/listening to the AF_VSOCK `<port>`. This means your connection will be refused, causing Firecracker to sever the host unix connection, leading to an `EOF` (0-length) read on your connected unix socket.\r\n\r\nI don't fully understand the flow you are describing that leads to `EOT`. I'm guessing this behavior is implemented by some higher level software (above the socket layer).\r\n\r\nIf you want to connect to an uninitialized guest (though I would advise against it), my suggestion is to use a nonblocking socket on the host side and have your guest (listening) agent ack client connections via some kind of message. Then, at the host end, immediately after `connect <port>`, you could poll your socket for read events (EPOLLIN) to check on the success status of your connection (i.e. a 0-length read means your connection was refused, while an ack message from your agent indicates a successful connection).\r\n  @I-m2310 Judging by the error you are getting (\"Invalid request and/or path\"), it looks like the Firecracker binary you are using was built without experimental vsock support. In Firecracker versions prior to 0.18.0, vsock was included as an experimental, compile-time feature that was not enabled by default. In order to use vsock, Firecracker needed to be built with `--feature vsock` (i.e. `devtool build --release -- --feature vsock`).  @marcov it looks like the tests are failing on both x86_64 and aarch64. I think it is because of a rebase: https://github.com/firecracker-microvm/firecracker/blob/695fd7fee535f219e6db618c1302ef2e98b0b48d/vmm/src/lib.rs#L1959. Can you fix the failing tests? You will need 2 reviewers for you PR. I'll try to find someone tomorrow.  Also related to #593.  ## Reason for This PR\r\n\r\nRelease v0.18.0.\r\n\r\n## Description of Changes\r\n\r\n- Fixed some typos left behind in `docs/vsock.md`.\r\n- Updated `CHANGELOG.md` with all user-facing changes since v0.17.0.\r\n- Fixed `CHANGELOG.md` (line length) formatting.\r\n- Updated Firecracker version via `devtool prepare_release`.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n  @andreeaflorescu @iulianbarbu @acatangiu @sandreim \r\nI have updated the PR. Please re-review. Before I forget:\r\n- The highlevel documentation of the crate also needs to be updated (specifically, the documentation in `src/lib.rs`.\r\n- You have two commits with the same description, I think that might be because of a rebase gone wrong. Check commit 1, 2 and 4,5.\r\n I will not have to look at this PR any time soon. Please feel free to get another approval and I will do a post factum review (after the PR is merged) when I have some more time. Close in favor of https://github.com/firecracker-microvm/firecracker/pull/1319  I have experimented around a bit with this issue and it seems the cost of doing this would outweigh the benefits.\r\n\r\nHowever, we can use the parsing logic in `HttpConnection` in dumbo + MMDS, where `Request::try_from` is currently used. This change would mean instantiating an `HttpConnection` and calling `try_read` on the byte slice that was passed in `Request::try_from`, as it satisfies the constraints.  @shakram02 since this PR is affected by #1262, please rebase and solve conflicts so that reviewers read clean code.  > Thanks @bchalios! Could we get a review of this PR from any of the maintainers please?\r\n> cc @dianpopa @andreeaflorescu\r\n> Thanks in advance \ud83d\udc4f!\r\n\r\nYes I will definitely review this. It has been a busy period in terms of PR reviews but I will prioritize this and come back to you asap.  I came around this while looking at this issue: https://github.com/firecracker-microvm/firecracker-go-sdk/issues/109, which was fixed by this PR: https://github.com/firecracker-microvm/firecracker-go-sdk/pull/114.\r\n\r\n@samuelkarp , I am wondering if this issue is still relevant?\r\n\r\nRelated to your previous question:\r\n>  If the MMDS is really holding arbitrary data/arbitrary bytes, can it just return those bytes and let the client deal with it?\r\n\r\nMMDS is not holding arbitrary data/arbitrary bytes, but valid JSON structured bytes.  `allocate_virtio_tokens` is now named `allocate_tokens_for_virtio_device`. Still creates a device handler inside too. Fixed in #1618   Closing this due to inactivity and lack of a clear next step. Feel free to reopen.  @firecracker-microvm/compute-capsule what do you say we update the documentation to explicitly add `bash` and a `unix` OS as requirements?  Fixed by #1255.  There is a PR implementing this. See #1198 and check out the conversation there.  This works as expected, but we need to think about the customer use cases before merging it. Closing it  @muya-zj , vsock support was merged. If you are still interested in merging these changes, please resolve conflicts and rebase. Hi @muya-zj ,\r\nIf you take a look at `read_config` and `write_config` from [net](https://github.com/firecracker-microvm/firecracker/blob/master/devices/src/virtio/net.rs#L815) and [block](https://github.com/firecracker-microvm/firecracker/blob/master/devices/src/virtio/block.rs#L548), they both have specific elements/fields (for example we increment different metrics for each of them). This renders the objective of putting these two functions in the trait implementations, impossible. As a consequence, I am closing this PR.  Fixed in #1319  Closed as a subset of #1176 .  We could start by removing `lazy_static!` usages all across **Firecracker** (right now we have it in *mmds*, *logger* and *net_util*).\r\nFor the *net_util* crate, I think #1238 is a good place for removing the lazily evaluated statics.  Final switch to vm-memory was made in #1562.  #1531 deprecates this issue.  Fixed by #1309   All dependencies targeted by this issue were removed.  [vmm-sys-util](https://crates.io/crates/vmm-sys-util) is now published on crates.io. We can remove the tempfile dependency by using the tempfile implementation from the rust-vmm crate. Should get solved by #1346.  Solved by #1273.   Closed as a subset of #1176 .  Vsock is now stable and the [`untime`](https://github.com/firecracker-microvm/firecracker/pull/1176/commits/b5052635cf2b4a5ade88752742ea1215da90e8f0#diff-ea89e5a5223068896a61a847ef21314eL252) does not apply for vsock anymore.   @mhhajeer `SendCtrlAltDel` works by sending keyboard events (i.e. key presses) to the guest. Keyboard events in the guest are handled by the keyboard driver. That means you need a guest kernel with the `i8042` and `atkbd` drivers. [One such kernel](https://s3.amazonaws.com/spec.ccfc.min/img/x86_64/minimal_with_atkbd/kernel/vmlinux.bin) is used by our integration tests.\r\n\r\nCheck out [the docs section](../blob/master/docs/api_requests/actions.md#sendctrlaltdel) for more details. With the kernel I suggested, `i8042` and `atkbd` are built-in, not as modules. You won't see them showing up in the `lsmod` output.\r\n\r\nIf you `dmesg | egrep -i \"i8042|kbd\"` in the guest, you should see some info from the keyboard driver. If that doesn't show up, the guest kernel is not properly configured, and `SendCtrlAltDel` will not work.  Seems that there is a `Backtrace::new_unresolved` that does not require the `libbacktrace` feature to be on. Downside is we do not have the symbols resolved, but the main advantage is that we get rid of the `cc` dependency. Another possible advantage is that we may also get rid of the hitting the denied syscall (I tried testing it using the replication steps provided but I receive another syscall, I might be doing something wrong).\r\n@aghecenco or @andreeaflorescu can you please test [this](https://github.com/dianpopa/firecracker/tree/backtrace_out) and let me know if you still see the `25` syscall being hit? \r\n @aghecenco as the one investigating this, what is your recommendation?\r\n\r\nMy preference considering the pain that libbacktrace cause so far is to get rid of it. Also, from my understanding unwind does not work if you have dependencies that have the panic mode set to abort. I am not sure if it helps us much, but I would rather improve the logging on the code paths where panics can occur so that we have enough information to debug the problems. But `backtrace` works with `unwind` and does not with `abort` as far as I understand. Right? @aghecenco does anything get displayed when compiling with `unwind` and by using `Backtrace::new_unresolved` (which frees us from the `cc` dependency)? I did not get that from your previous comments, sorry :( If yes, I think it is worth compromising size of binary for a `cc`-free firecracker.  Closing this for now. Will get back to this when I have the time.  Raising priority on this one since more build warnings are now displayed after upgrade to 1.38 for aarch64.  Hi @blitz ,\r\n\r\nOur PR status check has undergone significant improvements. Please take a look and let us know what you think!  I am not able to replicate this with latest Firecracker [release](https://github.com/firecracker-microvm/firecracker/releases/tag/v0.18.0). When activation fails for vsock device, the following occurs now:\r\n```\r\n[    0.000000] Linux version 4.14.55-84.37.amzn2.x86_64 (mockbuild@ip-10-0-1-79) (gcc version 7.3.1 20180303 (Red Hat 7.3.1-5) (GCC)) #1 SMP Wed Jul 25 18:47:15 UTC 2018\r\n[    0.000000] Command line: console=ttyS0 noapic reboot=k panic=1 pci=off nomodules ip=192.168.241.2::192.168.241.1:255.255.255.0::eth0:off root=/dev/vda rw virtio_mmio.device=4K@0xd0000000:5 virtio_mmio.device=4K@0xd0001000:6\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x008: 'MPX bounds registers'\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x010: 'MPX CSR'\r\n[    0.000000] x86/fpu: xstate_offset[2]:  576, xstate_sizes[2]:  256\r\n[    0.000000] x86/fpu: xstate_offset[3]:  832, xstate_sizes[3]:   64\r\n[    0.000000] x86/fpu: xstate_offset[4]:  896, xstate_sizes[4]:   64\r\n[    0.000000] x86/fpu: Enabled xstate features 0x1f, context size is 960 bytes, using 'compacted' format.\r\n[    0.000000] e820: BIOS-provided physical RAM map:\r\n[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009fbff] usable\r\n[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x0000000007ffffff] usable\r\n[    0.000000] NX (Execute Disable) protection: active\r\n[    0.000000] DMI not present or invalid.\r\n[    0.000000] Hypervisor detected: KVM\r\n[    0.000000] tsc: Using PIT calibration value\r\n[    0.000000] e820: last_pfn = 0x8000 max_arch_pfn = 0x400000000\r\n[    0.000000] MTRR: Disabled\r\n[    0.000000] x86/PAT: MTRRs disabled, skipping PAT initialization too.\r\n[    0.000000] CPU MTRRs all blank - virtualized system.\r\n[    0.000000] x86/PAT: Configuration [0-7]: WB  WT  UC- UC  WB  WT  UC- UC  \r\n[    0.000000] found SMP MP-table at [mem 0x0009fc00-0x0009fc0f] mapped at [ffffffffff200c00]\r\n[    0.000000] Scanning 1 areas for low memory corruption\r\n[    0.000000] Using GB pages for direct mapping\r\n[    0.000000] No NUMA configuration found\r\n[    0.000000] Faking a node at [mem 0x0000000000000000-0x0000000007ffffff]\r\n[    0.000000] NODE_DATA(0) allocated [mem 0x07fde000-0x07ffffff]\r\n[    0.000000] kvm-clock: Using msrs 4b564d01 and 4b564d00\r\n[    0.000000] kvm-clock: cpu 0, msr 0:7fdc001, primary cpu clock\r\n[    0.000000] kvm-clock: using sched offset of 13421738945 cycles\r\n[    0.000000] clocksource: kvm-clock: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns\r\n[    0.000000] Zone ranges:\r\n[    0.000000]   DMA      [mem 0x0000000000001000-0x0000000000ffffff]\r\n[    0.000000]   DMA32    [mem 0x0000000001000000-0x0000000007ffffff]\r\n[    0.000000]   Normal   empty\r\n[    0.000000] Movable zone start for each node\r\n[    0.000000] Early memory node ranges\r\n[    0.000000]   node   0: [mem 0x0000000000001000-0x000000000009efff]\r\n[    0.000000]   node   0: [mem 0x0000000000100000-0x0000000007ffffff]\r\n[    0.000000] Initmem setup node 0 [mem 0x0000000000001000-0x0000000007ffffff]\r\n[    0.000000] Intel MultiProcessor Specification v1.4\r\n[    0.000000] MPTABLE: OEM ID: FC      \r\n[    0.000000] MPTABLE: Product ID: 000000000000\r\n[    0.000000] MPTABLE: APIC at: 0xFEE00000\r\n[    0.000000] Processor #0 (Bootup-CPU)\r\n[    0.000000] IOAPIC[0]: apic_id 2, version 17, address 0xfec00000, GSI 0-23\r\n[    0.000000] Processors: 1\r\n[    0.000000] smpboot: Allowing 1 CPUs, 0 hotplug CPUs\r\n[    0.000000] PM: Registered nosave memory: [mem 0x00000000-0x00000fff]\r\n[    0.000000] PM: Registered nosave memory: [mem 0x0009f000-0x000fffff]\r\n[    0.000000] e820: [mem 0x08000000-0xffffffff] available for PCI devices\r\n[    0.000000] Booting paravirtualized kernel on KVM\r\n[    0.000000] clocksource: refined-jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645519600211568 ns\r\n[    0.000000] random: get_random_bytes called from start_kernel+0x94/0x486 with crng_init=0\r\n[    0.000000] setup_percpu: NR_CPUS:128 nr_cpumask_bits:128 nr_cpu_ids:1 nr_node_ids:1\r\n[    0.000000] percpu: Embedded 41 pages/cpu @ffff880007c00000 s128728 r8192 d31016 u2097152\r\n[    0.000000] KVM setup async PF for cpu 0\r\n[    0.000000] kvm-stealtime: cpu 0, msr 7c15040\r\n[    0.000000] PV qspinlock hash table entries: 256 (order: 0, 4096 bytes)\r\n[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 32137\r\n[    0.000000] Policy zone: DMA32\r\n[    0.000000] Kernel command line: console=ttyS0 noapic reboot=k panic=1 pci=off nomodules ip=192.168.241.2::192.168.241.1:255.255.255.0::eth0:off root=/dev/vda rw virtio_mmio.device=4K@0xd0000000:5 virtio_mmio.device=4K@0xd0001000:6\r\n[    0.000000] PID hash table entries: 512 (order: 0, 4096 bytes)\r\n[    0.000000] Memory: 111064K/130680K available (8204K kernel code, 622K rwdata, 1464K rodata, 1268K init, 2820K bss, 19616K reserved, 0K cma-reserved)\r\n[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1\r\n[    0.000000] Kernel/User page tables isolation: enabled\r\n[    0.004000] Hierarchical RCU implementation.\r\n[    0.004000] \tRCU restricting CPUs from NR_CPUS=128 to nr_cpu_ids=1.\r\n[    0.004000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=1\r\n[    0.004000] NR_IRQS: 4352, nr_irqs: 48, preallocated irqs: 16\r\n[    0.004000] Console: colour dummy device 80x25\r\n[    0.004000] console [ttyS0] enabled\r\n[    0.004000] tsc: Detected 3408.000 MHz processor\r\n[    0.004000] Calibrating delay loop (skipped) preset value.. 6816.00 BogoMIPS (lpj=13632000)\r\n[    0.004000] pid_max: default: 32768 minimum: 301\r\n[    0.004000] Security Framework initialized\r\n[    0.004000] SELinux:  Initializing.\r\n[    0.004000] Dentry cache hash table entries: 16384 (order: 5, 131072 bytes)\r\n[    0.004060] Inode-cache hash table entries: 8192 (order: 4, 65536 bytes)\r\n[    0.004947] Mount-cache hash table entries: 512 (order: 0, 4096 bytes)\r\n[    0.005753] Mountpoint-cache hash table entries: 512 (order: 0, 4096 bytes)\r\n[    0.006987] Last level iTLB entries: 4KB 64, 2MB 8, 4MB 8\r\n[    0.007656] Last level dTLB entries: 4KB 64, 2MB 0, 4MB 0, 1GB 4\r\n[    0.008008] Spectre V2 : Mitigation: Full generic retpoline\r\n[    0.009015] Spectre V2 : Spectre v2 mitigation: Filling RSB on context switch\r\n[    0.010495] Spectre V2 : Spectre v2 mitigation: Enabling Indirect Branch Prediction Barrier\r\n[    0.012020] Spectre V2 : Enabling Restricted Speculation for firmware calls\r\n[    0.013924] Speculative Store Bypass: Mitigation: Speculative Store Bypass disabled via prctl and seccomp\r\n[    0.025544] Freeing SMP alternatives memory: 28K\r\n[    0.026915] smpboot: Max logical packages: 1\r\n[    0.027454] Not enabling interrupt remapping due to skipped IO-APIC setup\r\n[    0.028123] smpboot: CPU0: Intel(R) Xeon(R) Processor @ 3.40GHz (family: 0x6, model: 0x5e, stepping: 0x3)\r\n[    0.029342] Performance Events: unsupported p6 CPU model 94 no PMU driver, software events only.\r\n[    0.030442] Hierarchical SRCU implementation.\r\n[    0.031231] smp: Bringing up secondary CPUs ...\r\n[    0.031780] smp: Brought up 1 node, 1 CPU\r\n[    0.032004] smpboot: Total of 1 processors activated (6816.00 BogoMIPS)\r\n[    0.032905] devtmpfs: initialized\r\n[    0.033346] x86/mm: Memory block size: 128MB\r\n[    0.033999] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns\r\n[    0.035185] futex hash table entries: 256 (order: 2, 16384 bytes)\r\n[    0.036081] NET: Registered protocol family 16\r\n[    0.036735] cpuidle: using governor ladder\r\n[    0.037273] cpuidle: using governor menu\r\n[    0.041104] HugeTLB registered 1.00 GiB page size, pre-allocated 0 pages\r\n[    0.042191] HugeTLB registered 2.00 MiB page size, pre-allocated 0 pages\r\n[    0.043487] dmi: Firmware registration failed.\r\n[    0.044298] NetLabel: Initializing\r\n[    0.045056] NetLabel:  domain hash size = 128\r\n[    0.045891] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO\r\n[    0.046967] NetLabel:  unlabeled traffic allowed by default\r\n[    0.048000] clocksource: Switched to clocksource kvm-clock\r\n[    0.048000] VFS: Disk quotas dquot_6.6.0\r\n[    0.048000] VFS: Dquot-cache hash table entries: 512 (order 0, 4096 bytes)\r\n[    0.048080] NET: Registered protocol family 2\r\n[    0.048080] TCP established hash table entries: 1024 (order: 1, 8192 bytes)\r\n[    0.048080] TCP bind hash table entries: 1024 (order: 2, 16384 bytes)\r\n[    0.048080] TCP: Hash tables configured (established 1024 bind 1024)\r\n[    0.048080] UDP hash table entries: 256 (order: 1, 8192 bytes)\r\n[    0.052068] UDP-Lite hash table entries: 256 (order: 1, 8192 bytes)\r\n[    0.052835] NET: Registered protocol family 1\r\n[    0.053928] virtio-mmio: Registering device virtio-mmio.0 at 0xd0000000-0xd0000fff, IRQ 5.\r\n[    0.054936] virtio-mmio: Registering device virtio-mmio.1 at 0xd0001000-0xd0001fff, IRQ 6.\r\n[    0.055936] platform rtc_cmos: registered platform RTC device (no PNP device found)\r\n[    0.057149] Scanning for low memory corruption every 60 seconds\r\n[    0.057974] audit: initializing netlink subsys (disabled)\r\n[    0.058786] Initialise system trusted keyrings\r\n[    0.059330] Key type blacklist registered\r\n[    0.059834] audit: type=2000 audit(1569239692.668:1): state=initialized audit_enabled=0 res=1\r\n[    0.060963] workingset: timestamp_bits=36 max_order=15 bucket_order=0\r\n[    0.062624] squashfs: version 4.0 (2009/01/31) Phillip Lougher\r\n[    0.064906] Key type asymmetric registered\r\n[    0.065415] Asymmetric key parser 'x509' registered\r\n[    0.066014] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254)\r\n[    0.066919] io scheduler noop registered (default)\r\n[    0.067576] io scheduler cfq registered\r\n[    0.068142] virtio-mmio virtio-mmio.0: Failed to enable 64-bit or 32-bit DMA.  Trying to continue, but this might not work.\r\n[    0.069931] virtio-mmio virtio-mmio.1: Failed to enable 64-bit or 32-bit DMA.  Trying to continue, but this might not work.\r\n[    0.071690] Serial: 8250/16550 driver, 1 ports, IRQ sharing disabled\r\n[    0.095183] serial8250: ttyS0 at I/O 0x3f8 (irq = 4, base_baud = 115200) is a U6_16550A\r\n[    0.097670] loop: module loaded\r\n[    0.098489] tun: Universal TUN/TAP device driver, 1.6\r\n[    0.099169] hidraw: raw HID events driver (C) Jiri Kosina\r\n[    0.099870] nf_conntrack version 0.5.0 (1024 buckets, 4096 max)\r\n[    0.100745] ip_tables: (C) 2000-2006 Netfilter Core Team\r\n[    0.101470] Initializing XFRM netlink socket\r\n[    0.102542] NET: Registered protocol family 10\r\n[    0.103714] Segment Routing with IPv6\r\n[    0.104683] NET: Registered protocol family 17\r\n[    0.105590] Bridge firewalling registered\r\n[    0.107149] NET: Registered protocol family 40\r\n2019-09-23T14:54:52.786949091 [anonymous-instance:ERROR:src/main.rs:54] Firecracker panicked at 'Failed to activate device: BadActivate', src/libcore/result.rs:997:5\r\n2019-09-23T14:54:52.793703108 [anonymous-instance:ERROR:src/main.rs:57] stack backtrace:\r\n   0: firecracker::main::{{closure}}::h4beb370db1a7e928 (0x40404e)\r\n   1: rust_panic_with_hook (0x558926)\r\n             at src/libstd/panicking.rs:478\r\n   2: continue_panic_fmt (0x5586be)\r\n             at src/libstd/panicking.rs:381\r\n   3: rust_begin_unwind (0x565656)\r\n   4: panic_fmt (0x5695ec)\r\n             at src/libcore/panicking.rs:85\r\n   5: core::result::unwrap_failed::h1f2bb488396497ab (0x49d2e2)\r\n   6: <devices::virtio::mmio::MmioDevice as devices::bus::BusDevice>::write::hde6ed55f6b570748 (0x49fe3f)\r\n   7: devices::bus::Bus::write::h137b18f4fd19a876 (0x4a3a5d)\r\n   8: std::sys_common::backtrace::__rust_begin_short_backtrace::hcdba08b84faa93ce (0x481fe1)\r\n   9: core::ops::function::FnOnce::call_once{{vtable.shim}}::hba3484d8d597bb0e (0x48a1f2)\r\n  10: call_once<(),FnBox<()>> (0x564d3e)\r\n             at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/liballoc/boxed.rs:702\r\n  11: call_once<(),alloc::boxed::Box<FnBox<()>>> (0x566258)\r\n             at /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/liballoc/boxed.rs:702\r\n      start_thread\r\n             at src/libstd/sys_common/thread.rs:14\r\n      thread_start\r\n             at src/libstd/sys/unix/thread.rs:80\r\n\r\n```\r\nClosing this for now. @xibz  feel free to reopen if issue still replicates for you.  Hi @arun-gupta,\r\nThis issue does not seem to replicate anymore.\r\n![slack-invite](https://user-images.githubusercontent.com/4263668/65425527-da9ed580-de16-11e9-8189-d5d21961cfd8.png)\r\nClosing this. Feel free to reopen with detailed replication steps if it still happens to you.\r\n  Fixed by #922   Solved by #1212.  All checks are done.  Opened https://github.com/rust-vmm/kvm-ioctls/pull/62.  Second issue was cleared up too. Closing this.  Closing this issue since #1361 is merged and now we can configure the logger for Firecracker via command line parameter. At this moment we do not want this option for jailer, but if we change our mind, we'll reopen it.  No need for this anymore. Ideally we should try to move away from using autogenerated code since it adds a lot of mess and not a lot of this autogenerated code is actually used.  See also https://github.com/cloud-hypervisor/cloud-hypervisor/pull/741  See also https://github.com/cloud-hypervisor/cloud-hypervisor/pull/746/commits/24195b01026890696a5902543076ba42617c6ae3  It would be worth investing some research into whether we could also gather [memory leaks related results](https://github.com/firecracker-microvm/firecracker/issues/119) from the fuzzing process.  @cperciva we're tracking this in #1298   Closed by #1176 .  Fixed in #1319  Fixed by #1270.  Hi @cmannett85, we do not have formal requirements for formatting error messages. We do however try to keep them short and clear and also try to reuse the same static strings so that we minimize the binary size.\r\n\r\nFor example most `expect()`s following a `mutex.lock()` use _\"Poisoned lock\"_ as the description with no extra sugarcoating. We rely on the stacktrace to provide the location of the error, and use the description as context.\r\n\r\nThis issue is indeed a case of replacing `unwrap()` calls with `expect()`.  Hi @AnishShah, contributions are welcome! This issue is still accurate, yes.  > We should also look into removing PARTUUID support since this is not strictly required - customers can extract partitions from the disk image.\r\n\r\nThe PARTUUID functionality should be kept at least until we solve the limit of max 10 devices on x86_64. See #1268.   Coverage reported for jailer crate right now: 42.6%. Not closing this issue yet since there is room for improvement, see above.\r\n[cov.zip](https://github.com/firecracker-microvm/firecracker/files/4319390/cov.zip)\r\n  Hi @Lay-ton while this is a valid issue that can be triggered under certain rate-limiter configurations, we've had no complaints from Firecracker customers/users, so this is a low priority issue.\r\n\r\nThe rate-limiter is implemented on a steady-rate-refilling-token-bucket design, where each request consumes tokens from the bucket if there are enough there or is delayed until there are enough.\r\nThe overall rate of consumption is smaller or equal to the constant rate at which the bucket is refilled.\r\n\r\nIn certain configurations where the `bandwidth` bucket size is configured to be smaller than the virtio request size, the rate-limiter _leaks_ by allowing a higher rate than configured. This happens because blocking a request until there are enough tokens in the bucket will block it forever since the bucket itself is smaller than the request size, so we just consume the whole bucket and allow that request, and that results that the actual rate is larger than the limit by `diff = request.size - bucket.size`.\r\n\r\nThere are multiple solutions to this problem with varying degrees of creativity and complexity.\r\n1. Enhance the virtio-block/net/vsock implementations to allow partial processing of virtio requests. This implies some internal buffering in the device emulation of a virtio request that does not have enough budget in its rate-limiter to complete as a whole. [High complexity - multiple components involved]\r\n2. Enhance the rate-limiter implementation, and when identifying this corner-case, instead of consuming everything in the bucket and letting it pass, calculate how many buckets would it take for the request to be properly rate-limited and block it for a proportionate amount of time instead of just blocking for the standard/static duration. [Low complexity - catch-all fix]\r\n3. Propose another approach altogether for the rate-limiter implementation.\r\n4. Etc.\r\n\r\nThe second option seems like a good idea, don't know if that satisfies the required level of complexity/work you were looking for.  Hi @jeromegn. Thanks for bringing this up. I am not sure if this is a regression or a different issue. Can you provide more details about your usecase and reproduction steps ?  @Lay-ton I would need to check if this is still opened. @alexandruag do you have more context?\r\n\r\nIn any case I am not super sure that this is a good first issue. Are you interested in a particular type of issue? I could find something else for you. I've changed the title of this issue to better represent the issue.\r\n\r\nThere is no need to mask signals, we just need to make sure Firecracker can correctly continue execution after being interrupted by non-terminating signals.\r\n\r\nThere are some details in duplicate #1604 as well.", "text_all_count": 37271, "text_word_token": ["Signed", "off", "by", "Alexandru", "Cihodaru", "TAG", "Reason", "for", "This", "PR", "Refactored", "the", "code", "from", "devices", "crate", "such", "that", "the", "utility", "function", "and", "structures", "be", "now", "in", "public", "mods", "NUMBER", "The", "change", "be", "necessary", "so", "Firecracker", "could", "be", "integrated", "easier", "with", "other", "projects", "NUMBER", "Description", "of", "Changes", "devices", "expose", "helper", "function", "as", "public", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "x", "All", "add", "change", "functionality", "be", "test", "NUMBER", "Reason", "for", "This", "PR", "Bootstrap", "implementation", "for", "dirty", "page", "track", "in", "vm", "memory", "NUMBER", "Thanks", "alexandruag", "for", "provide", "insight", "PoC", "on", "the", "proxy", "crate", "approach", "NUMBER", "Description", "of", "Changes", "Create", "a", "proxy", "crate", "that", "Firecracker", "will", "use", "as", "a", "dependency", "for", "all", "current", "vm", "memory", "imports", "NUMBER", "This", "crate", "will", "export", "local", "GuestMemoryMmap", "and", "GuestRegionMap", "implementations", "that", "will", "contain", "dirty", "page", "track", "functionality", "NUMBER", "All", "other", "re", "export", "will", "be", "fetched", "from", "upstream", "vm", "memory", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "x", "All", "add", "change", "functionality", "be", "test", "NUMBER", "I", "may", "have", "gotten", "it", "backwards", "I", "was", "thinking", "that", "Firecracker", "will", "_continue_", "consuming", "rust", "vmm", "vm", "memory", "but", "instead", "of", "use", "rust", "vmm", "vm", "memory", "GuestMemoryMmap", "all", "over", "the", "place", "Firecracker", "would", "add", "its", "own", "struct", "GuestMemoryMmapWithTracking", "or", "something", "and", "impl", "rust", "vmm", "vm", "memory", "GuestMemory", "for", "firecracker", "GuestMemoryMmapWithTracking", "disregard", "rustlang", "blasphemy", "NUMBER", "That", "way", "we", "don", "t", "have", "to", "kill", "the", "dependency", "NUMBER", "Did", "we", "move", "away", "from", "that", "What", "s", "the", "advantage", "of", "remove", "the", "dependency", "other", "than", "renaming", "GuestMemoryMmap", "everywhere", "The", "dependency", "to", "vm", "memory", "from", "upstream", "be", "keep", "in", "the", "local", "proxy", "crate", "vm", "memory", "proxy", "and", "we", "override", "only", "what", "be", "needed", "with", "a", "local", "implementation", "NUMBER", "The", "rest", "of", "the", "FC", "code", "depends", "on", "the", "proxy", "crate", "which", "re", "export", "the", "upstream", "stuff", "NUMBER", "we", "override", "only", "what", "be", "needed", "with", "a", "local", "implementation", "Why", "not", "create", "a", "new", "implementor", "for", "GuestMemory", "FWIW", "I", "also", "understood", "the", "coupling", "in", "the", "way", "aghecenco", "describe", "it", "above", "NUMBER", "The", "goal", "here", "be", "to", "do", "as", "few", "change", "as", "possible", "to", "the", "interfaces", "we", "currently", "use", "in", "Firecracker", "with", "the", "hope", "that", "track", "will", "be", "available", "in", "upstream", "NUMBER", "The", "Firecracker", "code", "uses", "both", "the", "GuestMemory", "interface", "and", "also", "the", "GuestMemoryMmap", "backend", "directly", "NUMBER", "If", "we", "implement", "a", "new", "backend", "like", "GuestMemoryMmapTracked", "we", "would", "need", "to", "do", "more", "change", "in", "Firecracker", "NUMBER", "The", "approach", "in", "this", "PR", "be", "less", "invasive", "and", "completely", "transparent", "to", "Firecracker", "as", "we", "re", "export", "all", "the", "stuff", "from", "upstream", "and", "we", "override", "only", "what", "s", "needed", "to", "support", "our", "usecase", "NUMBER", "The", "issue", "be", "reproducible", "on", "Intel", "AMD", "NUMBER", "Multiple", "threads", "concurrently", "write", "the", "log", "file", "and", "the", "source", "of", "the", "logs", "be", "not", "obvious", "NUMBER", "If", "we", "add", "the", "thread", "id", "the", "logs", "would", "become", "more", "readable", "NUMBER", "Hey", "HQ", "NUMBER", "Thank", "you", "for", "your", "interest", "in", "contribute", "to", "Firecracker", "NUMBER", "I", "will", "try", "to", "summarize", "some", "next", "steps", "to", "get", "you", "start", "Dive", "deep", "the", "Firecracker", "logger", "crate", "which", "provides", "an", "implementation", "for", "the", "API", "abstraction", "defined", "by", "the", "log", "crate", "LINK", "Change", "the", "code", "so", "the", "log", "prefix", "also", "include", "thread", "ids", "NUMBER", "It", "should", "live", "in", "Logger", "create_prefix", "self", "record", "Record", "Would", "be", "nice", "if", "you", "find", "a", "solution", "to", "use", "the", "thread", "names", "instead", "of", "ids", "like", "vmm", "api", "vcpu", "NUMBER", "vcpu", "NUMBER", "NUMBER", "Write", "unit", "and", "integration", "test", "Publish", "PR", "If", "you", "get", "stuck", "along", "the", "way", "please", "reach", "out", "to", "us", "via", "Slack", "or", "this", "ticket", "NUMBER", "Describe", "the", "bug", "Due", "to", "the", "current", "design", "any", "failure", "on", "the", "vCPU", "resume", "path", "will", "cause", "Firecracker", "to", "exit", "before", "sending", "a", "response", "NUMBER", "To", "Reproduce", "NUMBER", "Create", "a", "snapshot", "that", "contains", "a", "corrupted", "vCPU", "state", "NUMBER", "NUMBER", "Load", "the", "snapshot", "NUMBER", "Expected", "behaviour", "Firecracker", "should", "exit", "after", "returning", "API", "response", "NUMBER", "Environment", "Firecracker", "version", "v", "NUMBER", "Checks", "x", "Have", "you", "search", "the", "Firecracker", "Issues", "database", "for", "similar", "problem", "x", "Have", "you", "read", "the", "exist", "relevant", "Firecracker", "documentation", "x", "Are", "you", "certain", "the", "bug", "be", "report", "be", "a", "Firecracker", "issue", "This", "merge", "be", "broken", "NUMBER", "I", "think", "you", "need", "to", "manually", "inspect", "if", "there", "be", "any", "commit", "in", "v", "NUMBER", "branch", "which", "be", "not", "on", "master", "and", "cherry", "pick", "those", "NUMBER", "At", "the", "very", "least", "there", "should", "be", "one", "such", "commit", "the", "release", "one", "NUMBER", "What", "I", "see", "as", "the", "most", "elegant", "way", "of", "doing", "this", "be", "to", "add", "a", "default_members", "src", "firecracker", "in", "the", "root", "Cargo", "NUMBER", "toml", "and", "modify", "devtool", "to", "only", "build", "the", "jailer", "only", "for", "musl", "target", "NUMBER", "you", "can", "use", "cargo", "build", "p", "jailer", "for", "that", "NUMBER", "I", "like", "that", "devtool", "do", "the", "right", "thing", "for", "both", "gnu", "and", "musl", "while", "manual", "build", "can", "be", "do", "as", "simple", "as", "bash", "for", "musl", "cargo", "build", "TAG", "Net", "device", "state", "NUMBER", "pub", "net_devices", "Vec", "TAG", "Vsock", "device", "state", "NUMBER", "pub", "vsock_device", "Option", "TAG", "Hi", "jmcconnell", "NUMBER", "Thanks", "for", "the", "PR", "NUMBER", "Can", "you", "please", "squash", "all", "the", "commit", "into", "a", "single", "commit", "The", "commit", "must", "respect", "the", "NUMBER", "NUMBER", "commit", "rule", "and", "it", "must", "be", "sign", "as", "in", "git", "commit", "s", "amend", "NUMBER", "iulianbarbu", "thanks", "for", "the", "review", "I", "have", "update", "the", "git", "history", "and", "made", "the", "request", "change", "NUMBER", "I", "m", "not", "sure", "if", "the", "form", "be", "to", "put", "PR", "request", "change", "into", "their", "own", "commit", "or", "not", "please", "let", "me", "know", "if", "you", "would", "like", "me", "to", "change", "this", "NUMBER", "Please", "put", "the", "PR", "request", "change", "also", "in", "the", "first", "commit", "NUMBER", "Reason", "for", "This", "PR", "upgrade", "vm", "memory", "version", "to", "NUMBER", "Description", "of", "Changes", "upgrade", "vm", "memory", "version", "to", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "x", "All", "add", "change", "functionality", "be", "test", "NUMBER", "serban", "NUMBER", "there", "be", "this", "issue", "LINK", "microvm", "firecracker", "issue", "NUMBER", "which", "never", "get", "resolve", "cause", "we", "still", "do", "not", "use", "BytedValue", "from", "vm", "memory", "see", "discussion", "there", "NUMBER", "Would", "you", "mind", "doing", "this", "change", "in", "this", "PR", "not", "necessary", "just", "a", "nice", "to", "have", "thanks", "dianpopa", "I", "would", "do", "it", "in", "a", "separate", "PR", "since", "I", "m", "not", "sure", "what", "it", "would", "suppose", "NUMBER", "But", "also", "from", "what", "I", "understand", "this", "be", "only", "use", "by", "the", "kernel", "loader", "NUMBER", "If", "we", "plan", "to", "migrate", "to", "linux", "loader", "later", "I", "don", "t", "know", "if", "it", "s", "worth", "doing", "NUMBER", "Hi", "bluejekyll", "Thank", "you", "for", "the", "contribution", "Could", "you", "also", "sign", "off", "your", "commit", "use", "git", "commit", "amend", "s", "please", "Also", "I", "think", "the", "commit", "title", "be", "enough", "NUMBER", "There", "s", "no", "need", "to", "detail", "the", "change", "NUMBER", "The", "fio", "part", "of", "the", "test", "be", "unreliable", "with", "sporadic", "fail", "bash", "____________________________", "test_", "NUMBER", "_full_snapshots", "_____________________________", "integration_tests", "functional", "test_snapshot_basic", "NUMBER", "py", "NUMBER", "in", "test_", "NUMBER", "_full_snapshots", "test_matrix", "NUMBER", "run_test", "_test_seq_snapshots", "framework", "matrix", "NUMBER", "py", "NUMBER", "in", "run_test", "self", "NUMBER", "_backtrack", "test_fn", "framework", "matrix", "NUMBER", "py", "NUMBER", "in", "_backtrack", "self", "NUMBER", "_backtrack", "test_fn", "cartesian_product", "framework", "matrix", "NUMBER", "py", "NUMBER", "in", "_backtrack", "self", "NUMBER", "_backtrack", "test_fn", "cartesian_product", "framework", "matrix", "NUMBER", "py", "NUMBER", "in", "_backtrack", "self", "NUMBER", "_backtrack", "test_fn", "cartesian_product", "framework", "matrix", "NUMBER", "py", "NUMBER", "in", "_backtrack", "self", "NUMBER", "_run_test_fn", "cartesian_product", "test_fn", "framework", "matrix", "NUMBER", "py", "NUMBER", "in", "_run_test_fn", "test_fn", "self", "NUMBER", "_context", "integration_tests", "functional", "test_snapshot_basic", "NUMBER", "py", "NUMBER", "in", "_test_seq_snapshots", "_guest_run_fio_iteration", "ssh_connection", "i", "integration_tests", "functional", "test_snapshot_basic", "NUMBER", "py", "NUMBER", "in", "_guest_run_fio_iteration", "assert", "exit_code", "NUMBER", "E", "assert", "NUMBER", "NUMBER", "Fixed", "by", "PR", "NUMBER", "Hi", "sumatejit", "I", "be", "able", "to", "reproduce", "the", "issue", "only", "when", "I", "compile", "use", "devtool", "tool", "devtool", "build", "and", "load", "the", "resulting", "binary", "with", "rust", "lldb", "from", "outside", "the", "docker", "container", "that", "s", "use", "for", "build", "NUMBER", "However", "if", "I", "compile", "with", "cargo", "directly", "it", "works", "cargo", "build", "lldb", "NUMBER", "firecracker", "lldb", "run", "api", "sock", "tmp", "firecracker", "NUMBER", "socket", "NUMBER", "NUMBER", "root", "localhost", "Process", "NUMBER", "stopped", "thread", "NUMBER", "name", "firecracker", "stop", "reason", "signal", "SIGSTOP", "frame", "NUMBER", "NUMBER", "x", "NUMBER", "dd", "NUMBER", "firecracker", "epoll_pwait", "NUMBER", "firecracker", "epoll_pwait", "NUMBER", "x", "NUMBER", "dd", "NUMBER", "TAG", "cmpl", "NUMBER", "x", "NUMBER", "eax", "NUMBER", "x", "NUMBER", "dda", "TAG", "movl", "eax", "r", "NUMBER", "d", "NUMBER", "x", "NUMBER", "ddd", "TAG", "jne", "NUMBER", "x", "NUMBER", "df", "NUMBER", "TAG", "NUMBER", "x", "NUMBER", "ddf", "TAG", "testq", "r", "NUMBER", "r", "NUMBER", "lldb", "source", "list", "NUMBER", "fn", "main", "NUMBER", "LOGGER", "NUMBER", "NUMBER", "configure", "Some", "DEFAULT_INSTANCE_ID", "NUMBER", "to_string", "NUMBER", "NUMBER", "expect", "Failed", "to", "register", "logger", "NUMBER", "NUMBER", "if", "let", "Err", "e", "register_signal_handlers", "NUMBER", "error", "Failed", "to", "register", "signal", "handlers", "e", "NUMBER", "process", "exit", "i", "NUMBER", "from", "vmm", "FC_EXIT_CODE_GENERIC_ERROR", "NUMBER", "NUMBER", "Could", "you", "try", "to", "build", "the", "executable", "use", "cargo", "and", "see", "if", "it", "works", "It", "s", "nice", "to", "hear", "that", "it", "works", "NUMBER", "I", "ll", "close", "the", "issue", "NUMBER", "I", "like", "the", "idea", "of", "having", "a", "test", "mode", "switch", "with", "subparams", "NUMBER", "By", "itself", "it", "s", "not", "enough", "as", "we", "want", "different", "configs", "for", "different", "test", "NUMBER", "Shall", "we", "tackle", "this", "as", "a", "separate", "enhancement", "or", "do", "we", "think", "we", "can", "do", "it", "as", "part", "of", "this", "issue", "I", "would", "use", "verbose", "parameter", "to", "version", "and", "only", "there", "add", "info", "on", "branch", "and", "githash", "on", "top", "of", "current", "info", "NUMBER", "That", "should", "work", "but", "it", "makes", "it", "harder", "to", "see", "whether", "a", "particular", "binary", "be", "a", "release", "or", "a", "custom", "build", "NUMBER", "version", "would", "be", "the", "same", "for", "both", "while", "verbose", "would", "differ", "only", "by", "commit", "hash", "so", "it", "requires", "the", "user", "to", "go", "to", "the", "repo", "and", "compare", "hashes", "to", "find", "out", "if", "that", "binary", "be", "a", "release", "binary", "or", "a", "custom", "build", "NUMBER", "I", "d", "like", "it", "if", "we", "could", "use", "git", "tags", "to", "make", "that", "differentiation", "and", "do", "something", "like", "use", "version", "which", "outputs", "for", "a", "release", "binary", "local", "HEAD", "be", "at", "a", "particular", "vX", "NUMBER", "Y", "NUMBER", "Z", "tag", "output", "be", "vX", "NUMBER", "Y", "NUMBER", "Z", "for", "other", "build", "local", "HEAD", "do", "not", "match", "any", "release", "tag", "output", "be", "vX", "NUMBER", "Y", "NUMBER", "Z", "branch", "commit", "dirty", "WDYT", "Reason", "for", "This", "PR", "NUMBER", "Description", "of", "Changes", "Added", "a", "virtio", "balloon", "device", "that", "support", "statistics", "NUMBER", "Note", "Because", "Firecracker", "uses", "a", "private", "anonymous", "mapping", "for", "freshly", "booted", "microVMs", "and", "private", "file", "backed", "mapping", "for", "snapshot", "resumed", "microVMs", "a", "madvise", "call", "for", "release", "memory", "be", "not", "sufficient", "to", "work", "in", "both", "cases", "NUMBER", "This", "PR", "currently", "uses", "a", "hacky", "approach", "before", "madvise", "mmap", "a", "fresh", "private", "anonymous", "region", "over", "the", "one", "that", "we", "want", "the", "kernel", "to", "release", "NUMBER", "There", "be", "still", "some", "things", "to", "be", "do", "take", "a", "closer", "look", "at", "the", "error", "handle", "improve", "statistics", "test", "surface", "statistics", "through", "the", "metrics", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "x", "All", "add", "change", "functionality", "be", "test", "NUMBER", "Is", "it", "possible", "that", "the", "Kata", "agent", "has", "hijacked", "the", "normal", "systemd", "shutdown", "process", "LINK", "container", "agent", "blob", "NUMBER", "e", "NUMBER", "eff", "NUMBER", "b", "NUMBER", "def", "NUMBER", "f", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "fc", "NUMBER", "a", "NUMBER", "a", "NUMBER", "kata", "agent", "NUMBER", "service", "NUMBER", "in", "L", "NUMBER", "So", "you", "arrive", "at", "a", "halt", "via", "the", "systemctl", "force", "poweroff", "rather", "than", "a", "reboot", "and", "firecracker", "exit", "Have", "the", "same", "issue", "on", "NUMBER", "NUMBER", "Looking", "into", "it", "NUMBER", "Hi", "Pennyzct", "it", "be", "really", "nice", "to", "see", "this", "We", "were", "looking", "forward", "to", "this", "kind", "of", "functionality", "see", "NUMBER", "which", "was", "be", "tracked", "as", "part", "of", "our", "efforts", "to", "match", "all", "x", "NUMBER", "_", "NUMBER", "functionality", "on", "aarch", "NUMBER", "too", "NUMBER", "I", "will", "be", "helping", "you", "in", "having", "your", "PR", "review", "and", "passing", "the", "CI", "test", "NUMBER", "Thanks", "Diana", "nit", "you", "re", "add", "the", "PATCH", "drive", "test", "in", "the", "exist", "seq", "snapshot", "test", "and", "then", "moving", "it", "in", "a", "separate", "test", "in", "another", "commit", "NUMBER", "I", "would", "directly", "add", "the", "specific", "test", "and", "not", "go", "through", "altering", "the", "exist", "one", "Yes", "this", "was", "for", "easier", "reviewing", "so", "we", "can", "decide", "on", "which", "option", "we", "want", "the", "plan", "was", "to", "squash", "them", "eventually", "but", "I", "forgot", "see_no_evil", "Hi", "damienstanton", "thanks", "for", "the", "PR", "Looking", "forward", "to", "upgrading", "firecracker", "to", "rust", "edition", "NUMBER", "I", "will", "be", "helping", "you", "with", "these", "change", "and", "the", "CI", "test", "NUMBER", "Will", "get", "in", "touch", "with", "you", "on", "our", "slack", "channel", "NUMBER", "Thanks", "Diana", "Decided", "to", "rewrite", "the", "functionality", "in", "Rust", "NUMBER", "This", "will", "mostly", "mean", "saving", "and", "restoring", "the", "vgic", "s", "registers", "distributor", "redistributor", "and", "the", "state", "of", "the", "cpu", "interfaces", "NUMBER", "In", "order", "to", "obtain", "the", "guest", "registers", "that", "be", "support", "for", "the", "KVM_GET_ONE_REG", "KVM_SET_ONE_REG", "ioctl", "we", "need", "to", "be", "able", "to", "call", "into", "KVM_REG_LIST", "NUMBER", "See", "LINK", "vmm", "kvm", "ioctls", "issue", "NUMBER", "In", "line", "NUMBER", "how", "can", "you", "know", "the", "cause", "of", "throttling", "I", "think", "it", "s", "best", "to", "have", "only", "one", "metric", "that", "incorporates", "both", "cases", "NUMBER", "I", "think", "it", "depends", "on", "what", "you", "be", "trying", "to", "achieve", "if", "it", "s", "just", "to", "boot", "a", "simple", "image", "then", "the", "following", "works", "for", "me", "NUMBER", "NUMBER", "Use", "a", "firecracker", "kernel", "i", "NUMBER", "e", "NUMBER", "the", "hello", "world", "kernel", "from", "the", "get", "start", "page", "NUMBER", "Use", "the", "flatcar", "container", "NUMBER", "tar", "NUMBER", "gz", "image", "NUMBER", "Create", "a", "rootfs", "from", "the", "container", "image", "via", "virt", "make", "fs", "t", "ext", "NUMBER", "flatcar", "container", "NUMBER", "tar", "NUMBER", "gz", "flatcar", "NUMBER", "ext", "NUMBER", "or", "something", "simliar", "NUMBER", "Use", "the", "following", "config", "NUMBER", "json", "boot", "source", "kernel_image_path", "vmlinux", "boot_args", "mount", "NUMBER", "usrflags", "ro", "BOOT_IMAGE", "flatcar", "vmlinuz", "a", "mount", "NUMBER", "usr", "dev", "mapper", "usr", "verity", "NUMBER", "usr", "PARTUUID", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "consoleblank", "NUMBER", "flatcar", "NUMBER", "first_boot", "detected", "flatcar", "NUMBER", "randomize_disk_guid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "verity", "NUMBER", "usrhash", "NUMBER", "ba", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "a", "NUMBER", "feb", "NUMBER", "ca", "NUMBER", "ce", "NUMBER", "ec", "NUMBER", "de", "NUMBER", "f", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "console", "ttyS", "NUMBER", "noapic", "reboot", "k", "panic", "NUMBER", "pci", "off", "keep_bootcon", "drives", "drive_id", "rootfs", "path_on_host", "TAG", "flatcar", "NUMBER", "ext", "NUMBER", "is_root_device", "true", "is_read_only", "false", "machine", "config", "vcpu_count", "NUMBER", "mem_size_mib", "NUMBER", "ht_enabled", "false", "That", "gets", "me", "as", "far", "as", "the", "login", "prompt", "NUMBER", "The", "error", "you", "re", "get", "above", "makes", "me", "suspect", "that", "the", "disk", "images", "you", "re", "attempting", "to", "load", "have", "UEFI", "boot", "partitions", "and", "I", "don", "t", "know", "if", "firecracker", "support", "those", "NUMBER", "I", "m", "not", "sure", "this", "will", "help", "either", "from", "your", "kernel", "config", "LINK", "linux", "NUMBER", "net", "amd", "NUMBER", "usr", "current", "flatcar_production_image_kernel_config", "NUMBER", "txt", "CONFIG_VIRTIO_MMIO", "m", "CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES", "be", "not", "set", "Perhaps", "leading", "to", "the", "following", "when", "trying", "to", "modprobe", "virtio_mmio", "in", "the", "dracut", "emergency", "shell", "NUMBER", "virtio_mmio", "unknown", "parameter", "device", "ignored", "Maybe", "it", "s", "not", "finding", "the", "MMIO", "bus", "and", "hence", "the", "block", "device", "So", "yeah", "maybe", "the", "flatcar", "kernel", "would", "need", "tweaked", "in", "order", "to", "work", "NUMBER", "Hello", "iulianbarbu", "and", "acatangiu", "sorry", "for", "the", "late", "reply", "I", "ve", "be", "on", "vacation", "last", "days", "NUMBER", "I", "ll", "take", "care", "of", "submit", "commit", "addressing", "both", "change", "NUMBER", "The", "support", "for", "node", "attribute", "and", "the", "separator", "change", "NUMBER", "Cool", "Let", "us", "know", "if", "you", "need", "any", "help", "or", "feedback", "NUMBER", "Hello", "iulianbarbu", "I", "ve", "be", "thinking", "and", "make", "some", "test", "regard", "change", "the", "separator", "NUMBER", "I", "think", "that", "probably", "use", "as", "separator", "could", "be", "a", "bad", "idea", "too", "as", "it", "might", "be", "interpreted", "by", "bash", "NUMBER", "Yes", "sure", "NUMBER", "I", "think", "a", "workaround", "for", "this", "would", "be", "to", "require", "escaping", "cgroups", "cpuset", "NUMBER", "mems", "NUMBER", "cpuset", "NUMBER", "cpus", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "I", "think", "that", "maybe", "we", "could", "use", "a", "different", "approach", "something", "like", "jailer", "NUMBER", "cgroup", "cpuset", "NUMBER", "mems", "NUMBER", "cgroup", "cpuset", "NUMBER", "cpus", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "way", "we", "use", "different", "argument", "as", "separator", "it", "seems", "cleaner", "to", "me", "NUMBER", "I", "ve", "prepare", "a", "commit", "with", "a", "prototype", "for", "support", "this", "into", "the", "arg", "parser", "christian", "NUMBER", "NUMBER", "f", "LINK", "What", "do", "you", "think", "about", "it", "If", "you", "think", "this", "solution", "be", "good", "enough", "I", "can", "open", "a", "new", "PR", "with", "the", "parser", "change", "and", "work", "over", "it", "NUMBER", "This", "might", "work", "NUMBER", "I", "do", "not", "have", "a", "strong", "preference", "for", "one", "or", "the", "other", "NUMBER", "As", "lauralt", "point", "we", "must", "make", "sure", "we", "handle", "properly", "cases", "which", "map", "to", "DuplicateArgumentError", "NUMBER", "Such", "cases", "can", "happen", "for", "both", "available", "alternatives", "NUMBER", "Other", "than", "that", "I", "would", "gladly", "appreciate", "any", "input", "from", "the", "others", "reviewer", "NUMBER", "I", "be", "not", "sure", "if", "there", "be", "a", "best", "way", "to", "choose", "between", "both", "alternatives", "but", "I", "think", "there", "be", "some", "guidelines", "which", "we", "can", "use", "like", "comparing", "the", "final", "user", "experience", "for", "both", "alternatives", "in", "terms", "of", "clarity", "and", "simplicity", "NUMBER", "argument", "combination", "corner", "cases", "handle", "properly", "NUMBER", "significant", "performance", "turnoffs", "when", "we", "compare", "the", "two", "alternatives", "since", "their", "on", "the", "hot", "path", "for", "starting", "a", "microVM", "NUMBER", "overall", "implementation", "details", "NUMBER", "I", "guess", "we", "want", "to", "give", "it", "some", "thought", "and", "then", "align", "on", "it", "NUMBER", "Let", "me", "have", "it", "discussed", "inside", "the", "team", "NUMBER", "I", "ll", "come", "back", "with", "an", "update", "soon", "NUMBER", "Hi", "christian", "NUMBER", "We", "ve", "decided", "to", "move", "forward", "with", "the", "alternative", "where", "you", "have", "multiple", "cgroup", "flags", "E", "NUMBER", "g", "cgroup", "cpuset", "NUMBER", "cpus", "NUMBER", "NUMBER", "cgroup", "cpuset", "NUMBER", "mems", "NUMBER", "NUMBER", "etc", "NUMBER", "Let", "us", "know", "if", "we", "can", "help", "with", "anything", "NUMBER", "Hi", "iulianbarbu", "perfect", "I", "ll", "prepare", "a", "new", "commit", "with", "those", "change", "NUMBER", "Regarding", "the", "support", "for", "duplicates", "argument", "at", "the", "ArgParser", "should", "I", "open", "a", "new", "PR", "for", "this", "or", "it", "s", "ok", "to", "submit", "the", "change", "in", "this", "PR", "II", "would", "prefer", "to", "review", "all", "the", "change", "in", "the", "same", "PR", "NUMBER", "You", "can", "add", "first", "the", "support", "for", "multiple", "args", "in", "a", "commit", "then", "the", "support", "for", "cgroup", "flag", "NUMBER", "I", "ll", "take", "over", "from", "there", "and", "review", "all", "the", "change", "together", "NUMBER", "Running", "clippy", "integer_arithmetic", "on", "micro_http", "shows", "many", "operations", "that", "can", "overflow", "and", "have", "no", "bounds", "check", "in", "place", "NUMBER", "Index", "out", "of", "bounds", "situations", "should", "also", "be", "checked", "NUMBER", "To", "make", "this", "work", "we", "need", "to", "add", "support", "for", "dirty", "page", "track", "to", "vm", "memory", "NUMBER", "Guest", "pages", "dirtied", "by", "the", "firecracker", "process", "during", "device", "emulation", "for", "example", "be", "not", "guaranteed", "to", "be", "caught", "report", "by", "KVM", "s", "dirty", "page", "track", "NUMBER", "defunctio", "do", "you", "still", "want", "to", "work", "on", "this", "PR", "Any", "help", "needed", "Reason", "for", "This", "PR", "This", "PR", "remove", "a", "potential", "panic", "condition", "cause", "by", "the", "virtio", "net", "device", "expecting", "to", "find", "a", "vnet", "header", "in", "every", "frame", "NUMBER", "In", "case", "a", "malformed", "shorter", "frame", "shows", "up", "on", "the", "TX", "path", "large", "enough", "buffers", "make", "sure", "that", "it", "can", "t", "happen", "on", "RX", "error", "message", "be", "now", "logged", "and", "a", "dedicated", "metric", "be", "emitted", "NUMBER", "With", "this", "occasion", "several", "unuse", "device", "error", "variants", "have", "be", "remove", "NUMBER", "Description", "of", "Changes", "When", "processing", "a", "TX", "frame", "Firecracker", "no", "longer", "panic", "s", "if", "it", "s", "miss", "the", "vnet", "header", "NUMBER", "Instead", "it", "propagates", "an", "error", "and", "increments", "a", "metric", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "PS", "coverage", "on", "AMD", "needs", "update", "Reason", "for", "This", "PR", "Partially", "address", "NUMBER", "and", "NUMBER", "Description", "of", "Changes", "Any", "number", "of", "whitespace", "characters", "be", "accepted", "after", "when", "parsing", "HTTP", "headers", "NUMBER", "This", "functionality", "can", "be", "add", "in", "micro", "http", "LINK", "microvm", "firecracker", "tree", "master", "src", "micro_http", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "aghecenco", "Thanks", "for", "your", "review", "I", "fix", "them", "NUMBER", "Couple", "more", "nits", "NUMBER", "I", "d", "still", "prefer", "if", "all", "the", "commit", "were", "squashed", "into", "a", "single", "one", "as", "the", "change", "be", "small", "and", "logically", "connected", "NUMBER", "The", "commit", "message", "could", "be", "rephrased", "to", "something", "like", "this", "Any", "number", "of", "whitespace", "characters", "be", "accepted", "after", "when", "parsing", "HTTP", "headers", "NUMBER", "Thanks", "for", "finding", "this", "and", "provide", "such", "detailed", "steps", "of", "reproduction", "NUMBER", "To", "me", "it", "looks", "like", "Patch", "drive", "do", "not", "update", "the", "path", "in", "the", "block", "device", "emulation", "NUMBER", "The", "snapshot", "be", "created", "without", "this", "update", "NUMBER", "We", "ll", "try", "to", "prioritize", "the", "fix", "NUMBER", "Are", "there", "any", "cgroups", "version", "considerations", "to", "doing", "this", "For", "example", "the", "Fedora", "post", "NUMBER", "defaults", "be", "podman", "cgroups", "v", "NUMBER", "For", "me", "podman", "worked", "ok", "but", "the", "test", "for", "the", "jailer", "fail", "I", "believe", "it", "still", "requires", "cgroups", "v", "NUMBER", "so", "I", "had", "to", "revert", "to", "docker", "cgroups", "v", "NUMBER", "It", "was", "my", "own", "incantation", "NUMBER", "It", "was", "probably", "just", "sufficient", "to", "run", "but", "nothing", "more", "NUMBER", "This", "be", "the", "error", "that", "led", "me", "to", "believe", "rootless", "podman", "which", "appears", "to", "require", "cgroups", "v", "NUMBER", "might", "not", "fly", "E", "Exception", "thread", "main", "panicked", "at", "Jailer", "error", "cpu", "configurations", "not", "find", "in", "proc", "mounts", "src", "jailer", "src", "main", "NUMBER", "rs", "NUMBER", "NUMBER", "Which", "I", "interpreted", "as", "the", "the", "jailer", "confirming", "the", "cgroups", "v", "NUMBER", "structures", "in", "proc", "mounts", "which", "don", "t", "appear", "to", "be", "there", "under", "Fedora", "cgroups", "v", "NUMBER", "Perhaps", "this", "be", "just", "a", "Fedora", "problem", "or", "some", "other", "cgroups", "configuration", "issue", "though", "NUMBER", "This", "be", "somewhat", "covered", "by", "the", "bigger", "picture", "of", "switching", "to", "linux", "loader", "from", "rust", "vmm", "LINK", "vmm", "linux", "loader", "LINK", "microvm", "firecracker", "issue", "NUMBER", "NUMBER", "There", "s", "a", "test", "LINK", "vmm", "linux", "loader", "blob", "ec", "NUMBER", "d", "NUMBER", "f", "NUMBER", "f", "NUMBER", "ee", "NUMBER", "a", "NUMBER", "accb", "NUMBER", "ec", "src", "loader", "x", "NUMBER", "_", "NUMBER", "elf", "mod", "NUMBER", "rs", "L", "NUMBER", "there", "for", "this", "scenario", "NUMBER", "Alternatively", "this", "sentence", "should", "provide", "the", "miss", "object", "in", "the", "phrase", "expose", "access", "to", "a", "minimal", "Reason", "for", "This", "PR", "This", "sentence", "be", "not", "grammatically", "correct", "Description", "of", "Changes", "Amend", "sentence", "to", "make", "it", "grammatically", "correct", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "N", "A", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "X", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "X", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "X", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "N", "A", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "N", "A", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "N", "A", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Also", "please", "edit", "your", "commit", "message", "to", "follow", "the", "NUMBER", "NUMBER", "commit", "rule", "LINK", "global", "NUMBER", "com", "blog", "NUMBER", "NUMBER", "NUMBER", "git", "NUMBER", "NUMBER", "rule", "NUMBER", "In", "this", "particular", "case", "you", "can", "actually", "remove", "the", "message", "and", "leave", "only", "the", "title", "something", "like", "docs", "remove", "extra", "article", "the", "NUMBER", "Hi", "CalebAlbers", "Thanks", "for", "the", "fix", "please", "sign", "your", "commit", "git", "commit", "s", "amend", "NUMBER", "Changelog", "and", "integration", "test", "for", "intel", "and", "amd", "would", "be", "nice", "Changelog", "and", "integration", "test", "for", "intel", "and", "amd", "would", "be", "nice", "dianpopa", "For", "the", "moment", "we", "keep", "the", "current", "soft", "limitation", "of", "NUMBER", "vcpus", "so", "we", "can", "t", "add", "integration", "test", "since", "the", "API", "won", "t", "allow", "more", "then", "NUMBER", "vcpus", "NUMBER", "Also", "considering", "this", "I", "don", "t", "know", "if", "a", "Changelog", "entry", "would", "make", "sense", "NUMBER", "WDYT", "No", "it", "do", "not", "we", "can", "merge", "this", "as", "it", "be", "NUMBER", "SYS_getpid", "be", "get", "issue", "and", "it", "s", "not", "whitelisted", "so", "it", "causes", "a", "seccomp", "fault", "that", "terminates", "firecracker", "NUMBER", "To", "work", "around", "the", "issue", "you", "can", "start", "with", "seccomp", "disabled", "seccomp", "level", "NUMBER", "in", "the", "command", "line", "but", "it", "would", "be", "interesting", "to", "know", "where", "the", "syscall", "be", "come", "from", "NUMBER", "Can", "you", "run", "firecracker", "under", "strace", "to", "find", "it", "We", "also", "have", "a", "bunch", "of", "seccomp", "improvement", "in", "mind", "one", "of", "them", "be", "an", "externally", "specified", "whitelist", "so", "users", "don", "t", "have", "to", "recompile", "firecracker", "to", "allow", "new", "syscalls", "NUMBER", "I", "be", "not", "sure", "we", "need", "to", "do", "this", "as", "part", "of", "the", "build", "system", "NUMBER", "I", "would", "leave", "the", "build", "system", "just", "as", "it", "be", "and", "move", "the", "stripping", "a", "step", "further", "into", "the", "release", "pipeline", "where", "the", "binary", "be", "stripped", "and", "a", "copy", "of", "the", "original", "be", "keep", "in", "cold", "storage", "for", "debugging", "purposes", "NUMBER", "firecracker", "microvm", "compute", "capsule", "WDYT", "I", "think", "we", "should", "keep", "NUMBER", "devtool", "build", "as", "be", "NUMBER", "The", "current", "logic", "of", "NUMBER", "devtool", "build", "be", "to", "pass", "all", "the", "flags", "directly", "to", "cargo", "build", "NUMBER", "I", "ve", "personally", "abused", "this", "functionality", "and", "I", "find", "it", "very", "nice", "to", "do", "things", "such", "as", "build", "firecracker", "with", "gnu", "NUMBER", "I", "personally", "prefer", "to", "have", "another", "build", "stripped", "command", "that", "doesn", "t", "pass", "the", "flags", "to", "cargo", "build", "directly", "NUMBER", "NUMBER", "on", "this", "NUMBER", "Let", "s", "just", "have", "devtool", "build", "unchanged", "NUMBER", "Looks", "like", "strip", "be", "available", "in", "the", "dev", "container", "why", "not", "make", "it", "available", "via", "devtool", "strip", "kzys", "please", "update", "the", "coverage", "target", "for", "x", "NUMBER", "_", "NUMBER", "Reason", "for", "This", "PR", "NUMBER", "Description", "of", "Changes", "Added", "metrics", "that", "measure", "the", "duration", "of", "creating", "a", "full", "or", "diff", "snapshot", "and", "of", "loading", "from", "a", "snapshot", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "I", "want", "to", "make", "sure", "we", "implement", "this", "in", "such", "a", "way", "that", "these", "metrics", "provide", "maximum", "value", "to", "the", "end", "user", "and", "not", "just", "for", "development", "NUMBER", "Let", "s", "sync", "up", "offline", "on", "this", "one", "NUMBER", "This", "error", "has", "not", "be", "seen", "in", "a", "while", "seems", "to", "have", "be", "fix", "by", "ulterior", "fix", "to", "our", "CI", "pipeline", "NUMBER", "Feel", "free", "to", "reopen", "if", "issue", "happens", "again", "NUMBER", "Hi", "Vesnica", "Firecracker", "do", "not", "support", "macvtap", "yet", "NUMBER", "What", "be", "your", "exact", "usecase", "Macvtap", "simplifies", "the", "networking", "setup", "but", "otherwise", "you", "can", "still", "use", "tap", "bridge", "NUMBER", "The", "issue", "here", "seems", "to", "be", "relate", "to", "the", "guest", "memory", "size", "NUMBER", "Basically", "trying", "to", "resume", "from", "a", "snapshot", "that", "was", "created", "on", "a", "microVM", "with", "a", "memory", "NUMBER", "MiB", "will", "make", "the", "guest", "panic", "NUMBER", "This", "was", "test", "with", "the", "following", "kernel", "images", "LINK", "kernel", "NUMBER", "LINK", "kernel", "NUMBER", "and", "LINK", "_with_ssh", "kernel", "vmlinux", "NUMBER", "bin", "kernel", "NUMBER", "as", "well", "as", "with", "other", "images", "that", "were", "build", "manually", "use", "the", "kernel", "config", "from", "firecracker", "resources", "microvm", "kernel", "x", "NUMBER", "_", "NUMBER", "config", "NUMBER", "Steps", "to", "reproduce", "start", "a", "new", "Firecracker", "process", "configure", "the", "microVM", "with", "the", "following", "relevant", "resources", "bash", "kernel_path", "pwd", "firecracker", "build", "img", "x", "NUMBER", "_", "NUMBER", "ubuntu_with_ssh", "kernel", "vmlinux", "NUMBER", "bin", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "source", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "kernel_image_path", "kernel_path", "boot_args", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "rootfs_path", "pwd", "firecracker", "build", "img", "x", "NUMBER", "_", "NUMBER", "ubuntu_with_ssh", "fsfiles", "xenial", "NUMBER", "rootfs", "NUMBER", "ext", "NUMBER", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "drive_id", "rootfs", "path_on_host", "rootfs_path", "is_root_device", "true", "is_read_only", "false", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "config", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "vcpu_count", "NUMBER", "mem_size_mib", "NUMBER", "ht_enabled", "false", "create", "a", "full", "snapshot", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PATCH", "LINK", "H", "accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "state", "Paused", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "H", "accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "snapshot_path", "file", "NUMBER", "mem_file_path", "file", "NUMBER", "kill", "the", "current", "Firecracker", "process", "start", "a", "new", "Firecracker", "process", "try", "to", "resume", "from", "the", "snapshot", "bash", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "H", "accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "snapshot_path", "file", "NUMBER", "mem_file_path", "file", "NUMBER", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PATCH", "LINK", "H", "accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "state", "Resumed", "You", "should", "see", "that", "the", "guest", "panics", "after", "successfully", "resuming", "from", "snapshot", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "Received", "KVM_EXIT_SHUTDOWN", "signal", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "Received", "KVM_EXIT_SHUTDOWN", "signal", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "Vmm", "be", "stopping", "NUMBER", "The", "guest", "doesn", "t", "get", "the", "chance", "to", "tell", "us", "something", "NUMBER", "A", "much", "more", "user", "friendly", "crash", "behavior", "happens", "when", "you", "try", "to", "configure", "the", "microVM", "with", "exactly", "NUMBER", "or", "NUMBER", "MiB", "NUMBER", "For", "example", "if", "you", "configure", "a", "microVM", "with", "the", "following", "kernel", "and", "NUMBER", "MiB", "the", "guest", "succeeds", "to", "resume", "but", "after", "navigating", "a", "bit", "through", "directories", "and", "sending", "for", "example", "a", "ls", "command", "the", "guest", "crashes", "root", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "f", "NUMBER", "f", "NUMBER", "a", "dev", "root", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "f", "NUMBER", "f", "NUMBER", "a", "dev", "ls", "NUMBER", "BUG", "unable", "to", "handle", "kernel", "NULL", "pointer", "dereference", "at", "NUMBER", "NUMBER", "IP", "TAG", "__pagevec_lru_add_fn", "NUMBER", "xf", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "PGD", "NUMBER", "NUMBER", "NUMBER", "Oops", "NUMBER", "NUMBER", "SMP", "NUMBER", "CPU", "NUMBER", "PID", "NUMBER", "Comm", "bash", "Not", "tainted", "NUMBER", "NUMBER", "Configuring", "the", "vm", "with", "the", "same", "resources", "but", "with", "NUMBER", "MiB", "doesn", "t", "cause", "any", "obvious", "issue", "the", "vm", "can", "be", "use", "NUMBER", "Another", "example", "if", "you", "configure", "the", "microVM", "with", "the", "following", "kernel", "and", "NUMBER", "MiB", "the", "guest", "crashes", "from", "the", "beginning", "with", "the", "following", "output", "NUMBER", "BUG", "unable", "to", "handle", "kernel", "paging", "request", "at", "NUMBER", "NUMBER", "IP", "TAG", "next_online_pgdat", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "PGD", "NUMBER", "NUMBER", "NUMBER", "Oops", "NUMBER", "NUMBER", "SMP", "NUMBER", "Modules", "linked", "in", "NUMBER", "CPU", "NUMBER", "PID", "NUMBER", "Comm", "kworker", "NUMBER", "NUMBER", "Not", "tainted", "NUMBER", "NUMBER", "Again", "configuring", "the", "vm", "with", "the", "same", "resources", "but", "with", "NUMBER", "MiB", "this", "time", "doesn", "t", "cause", "any", "obvious", "issue", "and", "the", "vm", "can", "be", "use", "NUMBER", "Changing", "the", "rootfs", "image", "or", "other", "configurations", "doesn", "t", "seem", "to", "cause", "a", "different", "behavior", "NUMBER", "These", "issue", "be", "reproducible", "on", "various", "machines", "the", "particular", "output", "from", "here", "was", "obtained", "on", "my", "laptop", "NUMBER", "The", "first", "suspect", "here", "be", "the", "way", "we", "save", "the", "guest", "memory", "and", "restore", "it", "when", "creating", "or", "resuming", "from", "a", "snapshot", "NUMBER", "Fixed", "by", "NUMBER", "Shall", "I", "squash", "the", "commit", "Just", "to", "tidy", "things", "up", "NUMBER", "Also", "I", "still", "not", "NUMBER", "sure", "I", "understand", "why", "the", "CI", "CD", "pipeline", "sometimes", "fail", "catastrophically", "as", "oppose", "to", "fail", "at", "the", "right", "test", "NUMBER", "Hi", "gc", "plp", "Thanks", "very", "much", "for", "picking", "this", "up", "I", "ve", "update", "the", "boot_args", "as", "request", "NUMBER", "Unfortunately", "I", "m", "not", "seeing", "the", "update", "to", "the", "boottime", "rootfs", "NUMBER", "ext", "NUMBER", "file", "both", "old", "and", "new", "file", "look", "the", "same", "to", "me", "sha", "NUMBER", "sum", "NUMBER", "d", "NUMBER", "bf", "NUMBER", "b", "NUMBER", "ffc", "NUMBER", "cb", "NUMBER", "b", "NUMBER", "ba", "NUMBER", "b", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "c", "NUMBER", "ff", "NUMBER", "c", "NUMBER", "fb", "NUMBER", "ca", "NUMBER", "a", "boottime", "rootfs", "NUMBER", "ext", "NUMBER", "NUMBER", "d", "NUMBER", "bf", "NUMBER", "b", "NUMBER", "ffc", "NUMBER", "cb", "NUMBER", "b", "NUMBER", "ba", "NUMBER", "b", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "c", "NUMBER", "ff", "NUMBER", "c", "NUMBER", "fb", "NUMBER", "ca", "NUMBER", "a", "boottime", "rootfs_old", "NUMBER", "ext", "NUMBER", "Am", "I", "looking", "in", "the", "right", "place", "Or", "was", "there", "a", "wee", "s", "NUMBER", "push", "sync", "issue", "I", "guess", "that", "the", "aarch", "NUMBER", "boottime", "image", "and", "both", "initrd", "NUMBER", "img", "file", "will", "also", "need", "update", "if", "we", "re", "taking", "this", "approach", "of", "specify", "a", "new", "init", "file", "location", "NUMBER", "Could", "you", "delete", "the", "build", "folder", "and", "run", "the", "build", "again", "Thanks", "gc", "plp", "apologies", "I", "hadn", "t", "realised", "the", "images", "were", "cached", "NUMBER", "Hi", "gc", "plp", "Booting", "seems", "to", "go", "a", "whole", "lot", "quicker", "without", "console", "ttyS", "NUMBER", "NUMBER", "Are", "these", "parameters", "definitely", "pathed", "in", "somewhere", "at", "the", "moment", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "We", "ve", "not", "add", "them", "in", "unintentionally", "gc", "plp", "think", "that", "s", "do", "NUMBER", "I", "had", "to", "tweak", "the", "pylint", "config", "to", "take", "the", "expanded", "argument", "name", "but", "I", "think", "that", "s", "ok", "NUMBER", "The", "x", "NUMBER", "_", "NUMBER", "CI", "run", "fail", "for", "some", "unknown", "reason", "NUMBER", "Phew", "Thanks", "very", "much", "iulianbarbu", "acatangiu", "andreeaflorescu", "lauralt", "gc", "plp", "for", "all", "your", "help", "reviews", "and", "feedback", "NUMBER", "Very", "much", "appreciated", "NUMBER", "gc", "plp", "iulianbarbu", "raduiliescu", "This", "PR", "looks", "good", "and", "the", "functionality", "useful", "do", "we", "want", "to", "merge", "it", "gc", "plp", "iulianbarbu", "raduiliescu", "This", "PR", "looks", "good", "and", "the", "functionality", "useful", "do", "we", "want", "to", "merge", "it", "IMO", "we", "should", "merge", "it", "after", "performance", "framework", "ci", "change", "be", "do", "NUMBER", "Indeed", "that", "s", "how", "I", "see", "it", "NUMBER", "I", "think", "we", "can", "let", "it", "open", "until", "we", "put", "to", "rest", "the", "two", "RFCs", "pending", "around", "test", "framework", "NUMBER", "and", "NUMBER", "which", "will", "provide", "reproducible", "runs", "for", "this", "test", "NUMBER", "Is", "the", "issue", "fix", "by", "this", "PR", "Closing", "this", "issue", "for", "the", "moment", "NUMBER", "Please", "feel", "free", "to", "reopen", "it", "if", "you", "have", "more", "question", "NUMBER", "The", "binary", "size", "test", "failure", "should", "be", "fix", "by", "merge", "and", "rebasing", "NUMBER", "To", "address", "the", "python", "styling", "failure", "I", "created", "issue", "NUMBER", "Where", "be", "the", "increase", "in", "size", "come", "from", "Is", "it", "just", "the", "upgrade", "of", "the", "toolchain", "I", "be", "little", "bit", "worried", "about", "this", "since", "we", "already", "inflated", "the", "binary", "with", "version", "serialization", "support", "NUMBER", "Hello", "timvisee", "While", "we", "be", "looking", "into", "this", "problem", "could", "you", "please", "squash", "the", "two", "clippy", "commit", "together", "It", "would", "make", "for", "a", "cleaner", "git", "log", "Hi", "timvisee", "can", "you", "try", "add", "this", "modification", "to", "the", "other", "NUMBER", "test", "in", "vmm", "crate", "that", "create", "a", "Tap", "They", "be", "builder", "test_attach_net_devices", "and", "persist", "test_microvm_state_versionize", "That", "s", "great", "One", "more", "nit", "could", "you", "also", "reword", "the", "commit", "message", "in", "order", "to", "keep", "the", "NUMBER", "NUMBER", "rule", "LINK", "global", "NUMBER", "com", "blog", "NUMBER", "NUMBER", "NUMBER", "git", "NUMBER", "NUMBER", "rule", "Hi", "timvisee", "can", "you", "please", "add", "the", "coverage", "change", "in", "the", "last", "commit", "We", "don", "t", "usually", "use", "a", "separate", "one", "just", "for", "this", "NUMBER", "We", "should", "still", "check", "where", "the", "increase", "in", "binary", "size", "comes", "from", "and", "if", "we", "can", "lower", "it", "NUMBER", "We", "should", "still", "check", "where", "the", "increase", "in", "binary", "size", "comes", "from", "and", "if", "we", "can", "lower", "it", "NUMBER", "ioanachirca", "Is", "this", "something", "that", "can", "be", "do", "in", "a", "separate", "issue", "PR", "This", "PR", "didn", "t", "introduce", "significant", "code", "change", "NUMBER", "I", "would", "rather", "reach", "a", "conclusion", "about", "this", "now", "it", "be", "relate", "to", "the", "Rust", "update", "after", "all", "rather", "than", "introduce", "a", "maybe", "avoidable", "change", "and", "have", "to", "fix", "it", "later", "or", "postpone", "it", "until", "it", "s", "forgotten", "NUMBER", "Running", "cargo", "bloat", "release", "n", "NUMBER", "on", "current", "master", "branch", "File", "NUMBER", "text", "Size", "Crate", "Name", "NUMBER", "NUMBER", "NUMBER", "KiB", "api_server", "api_server", "parsed_request", "ParsedRequest", "try_from_request", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "vmm", "builder", "build_microvm", "NUMBER", "NUMBER", "NUMBER", "KiB", "firecracker", "firecracker", "main", "NUMBER", "NUMBER", "NUMBER", "KiB", "micro_http", "micro_http", "server", "HttpServer", "request", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "vmm", "persist", "create_snapshot", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "TAG", "serialize", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "vmm", "resources", "VmResources", "from_json", "NUMBER", "NUMBER", "NUMBER", "KiB", "api_server", "api_server", "ApiServer", "handle_request", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "TAG", "serialize", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "vmm", "builder", "configure_system_for_boot", "NUMBER", "NUMBER", "NUMBER", "KiB", "And", "NUMBER", "smaller", "methods", "NUMBER", "Use", "n", "N", "to", "show", "more", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "MiB", "NUMBER", "text", "section", "size", "the", "file", "size", "be", "NUMBER", "MiB", "Running", "cargo", "bloat", "release", "n", "NUMBER", "on", "this", "branch", "File", "NUMBER", "text", "Size", "Crate", "Name", "NUMBER", "NUMBER", "NUMBER", "KiB", "api_server", "api_server", "parsed_request", "ParsedRequest", "try_from_request", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "TAG", "serialize", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "vmm", "builder", "build_microvm", "NUMBER", "NUMBER", "NUMBER", "KiB", "firecracker", "firecracker", "main", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "vmm", "persist", "create_snapshot", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "vmm", "resources", "VmResources", "from_json", "NUMBER", "NUMBER", "NUMBER", "KiB", "Unknown", "_ZN", "NUMBER", "libunwind", "NUMBER", "CFI_ParserINS_", "NUMBER", "LocalAddressSpaceEE", "NUMBER", "parseInstructionsERS", "NUMBER", "_mmRKNS", "NUMBER", "_", "NUMBER", "CIE_InfoEmRPNS", "NUMBER", "_", "NUMBER", "PrologInf", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "KiB", "micro_http", "micro_http", "server", "HttpServer", "request", "NUMBER", "NUMBER", "NUMBER", "KiB", "devices", "devices", "virtio", "net", "device", "Net", "process_tx", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "vmm", "builder", "configure_system_for_boot", "NUMBER", "NUMBER", "NUMBER", "KiB", "vmm", "TAG", "serialize", "NUMBER", "NUMBER", "NUMBER", "KiB", "firecracker", "TAG", "process", "NUMBER", "NUMBER", "NUMBER", "KiB", "devices", "TAG", "notify", "NUMBER", "NUMBER", "NUMBER", "KiB", "api_server", "api_server", "ApiServer", "handle_request", "NUMBER", "NUMBER", "NUMBER", "KiB", "mmds", "mmds", "parse_request", "NUMBER", "NUMBER", "NUMBER", "MiB", "And", "NUMBER", "smaller", "methods", "NUMBER", "Use", "n", "N", "to", "show", "more", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "MiB", "NUMBER", "text", "section", "size", "the", "file", "size", "be", "NUMBER", "MiB", "We", "can", "see", "that", "the", "binary", "file", "size", "increase", "from", "NUMBER", "MiB", "to", "NUMBER", "MiB", "so", "setting", "the", "limit", "to", "NUMBER", "MiB", "be", "too", "high", "NUMBER", "A", "rather", "big", "difference", "comes", "from", "vmm", "TAG", "serialize", "which", "doubled", "from", "NUMBER", "KiB", "to", "NUMBER", "KiB", "NUMBER", "Also", "_ZN", "NUMBER", "libunwind", "NUMBER", "CFI_ParserINS_", "NUMBER", "LocalAddressSpaceEE", "NUMBER", "parseInstructionsERS", "NUMBER", "_mmRKNS", "NUMBER", "_", "NUMBER", "CIE_InfoEmRPNS", "NUMBER", "_", "NUMBER", "PrologIn", "NUMBER", "libunwind", "increase", "from", "NUMBER", "KiB", "to", "NUMBER", "KiB", "We", "can", "see", "that", "the", "binary", "file", "size", "increase", "from", "NUMBER", "MiB", "to", "NUMBER", "MiB", "so", "setting", "the", "limit", "to", "NUMBER", "MiB", "be", "too", "high", "NUMBER", "I", "think", "the", "_target_", "should", "be", "the", "current", "size", "and", "the", "_limit_", "should", "be", "NUMBER", "or", "NUMBER", "NUMBER", "A", "rather", "big", "difference", "comes", "from", "vmm", "TAG", "serialize", "which", "doubled", "from", "NUMBER", "KiB", "to", "NUMBER", "KiB", "NUMBER", "We", "should", "open", "an", "issue", "for", "this", "and", "investigate", "but", "not", "block", "this", "PR", "NUMBER", "_ZN", "NUMBER", "libunwind", "NUMBER", "CFI_ParserINS_", "NUMBER", "LocalAddressSpaceEE", "NUMBER", "parseInstructionsERS", "NUMBER", "_mmRKNS", "NUMBER", "_", "NUMBER", "CIE_InfoEmRPNS", "NUMBER", "_", "NUMBER", "PrologIn", "NUMBER", "libunwind", "increase", "from", "NUMBER", "KiB", "to", "NUMBER", "KiB", "I", "believe", "this", "will", "go", "away", "altogether", "with", "NUMBER", "SGTM", "NUMBER", "I", "ll", "open", "an", "issue", "NUMBER", "timvisee", "could", "you", "update", "the", "binary", "limit", "ioanachirca", "Sure", "what", "limit", "s", "should", "I", "choose", "though", "This", "be", "what", "I", "came", "up", "with", "based", "on", "the", "last", "CI", "results", "python", "FC_BINARY_SIZE_TARGET", "NUMBER", "if", "MACHINE", "x", "NUMBER", "_", "NUMBER", "else", "NUMBER", "FC_BINARY_SIZE_LIMIT", "NUMBER", "if", "MACHINE", "x", "NUMBER", "_", "NUMBER", "else", "NUMBER", "Seems", "fine", "NUMBER", "It", "do", "say", "that", "it", "be", "a", "bash", "script", "I", "think", "a", "solution", "that", "keep", "compatibility", "with", "more", "shells", "be", "to", "add", "this", "line", "at", "the", "beginning", "of", "the", "script", "usr", "bin", "env", "bash", "what", "do", "you", "think", "Hi", "Mehigh", "NUMBER", "Simplifying", "the", "Getting", "Started", "guide", "be", "a", "good", "idea", "but", "I", "just", "took", "a", "closer", "look", "at", "the", "devtool", "LINK", "microvm", "firecracker", "blob", "master", "tool", "devtool", "script", "and", "it", "looks", "like", "line", "NUMBER", "LINK", "microvm", "firecracker", "blob", "master", "tool", "devtool", "L", "NUMBER", "already", "contains", "a", "compatibility", "checker", "NUMBER", "I", "recommend", "that", "you", "take", "a", "look", "at", "what", "devtool", "implement", "and", "if", "it", "do", "not", "check", "functionality", "that", "the", "current", "Getting", "Started", "guide", "contains", "you", "can", "add", "it", "NUMBER", "Eventually", "the", "Getting", "Started", "guide", "should", "point", "to", "the", "devtool", "script", "NUMBER", "Indeed", "I", "think", "it", "s", "much", "better", "to", "point", "to", "that", "script", "to", "have", "a", "more", "consistent", "check", "than", "having", "two", "scripts", "where", "one", "might", "pass", "and", "the", "other", "fail", "NUMBER", "I", "update", "the", "documentation", "and", "remove", "the", "separate", "script", "I", "ve", "created", "before", "NUMBER", "My", "two", "cents", "it", "be", "not", "very", "first", "time", "user", "friendly", "to", "have", "to", "download", "the", "repository", "just", "to", "check", "that", "the", "system", "meets", "the", "requirements", "NUMBER", "acatangiu", "aghecenco", "update", "PR", "with", "suggested", "change", "NUMBER", "Please", "take", "another", "look", "NUMBER", "ioanachirca", "acatangiu", "sandreim", "aghecenco", "I", "address", "your", "comments", "please", "take", "another", "look", "We", "need", "to", "have", "some", "baseline", "numbers", "for", "each", "test", "per", "arch", "and", "a", "fast", "integration", "test", "that", "validates", "the", "benchmark", "against", "the", "baseline", "NUMBER", "Reason", "for", "This", "PR", "This", "PR", "be", "publishing", "basic", "synthetic", "state", "serialization", "benchmarks", "NUMBER", "As", "snapshot", "functionality", "becomes", "available", "we", "will", "publish", "the", "a", "full", "breakdown", "of", "microvm", "save", "restore", "for", "various", "configurations", "state", "serialization", "deserialization", "kvm", "state", "save", "restore", "device", "save", "restore", "overall", "save", "restore", "latency", "NUMBER", "Description", "of", "Changes", "In", "commit", "message", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "nit", "I", "think", "the", "commit", "could", "be", "squashed", "since", "the", "new", "results", "be", "obtained", "I", "suppose", "for", "the", "new", "sample", "size", "NUMBER", "One", "change", "code", "the", "other", "change", "docs", "NUMBER", "I", "think", "they", "need", "to", "be", "review", "separately", "NUMBER", "I", "ve", "address", "the", "comments", "please", "review", "again", "aghecenco", "lauralt", "Reason", "for", "This", "PR", "NUMBER", "Description", "of", "Changes", "NUMBER", "with", "the", "following", "additions", "documented", "start", "time", "us", "and", "start", "time", "cpu", "us", "fix", "start", "time", "cpu", "us", "typo", "one", "unit", "test", "for", "jailed", "NUMBER", "to", "counter", "imprecise", "kcov", "results", "preventing", "coverage", "test", "to", "pass", "the", "most", "relevant", "issue", "for", "this", "behavior", "I", "ve", "find", "be", "LINK", "lang", "rust", "issue", "NUMBER", "NUMBER", "and", "with", "the", "exception", "for", "Segregate", "mandatory", "and", "optional", "argument", "properly", "NUMBER", "See", "LINK", "microvm", "firecracker", "issue", "NUMBER", "issuecomment", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "It", "seems", "that", "this", "get", "collided", "with", "NUMBER", "What", "a", "time", "to", "be", "alive", "I", "can", "rebase", "the", "miss", "pieces", "if", "needed", "NUMBER", "Also", "it", "seems", "that", "this", "be", "get", "hit", "by", "NUMBER", "because", "tool", "devtool", "test", "k", "build", "works", "just", "fine", "NUMBER", "ioanachirca", "should", "I", "bump", "the", "COVERAGE_TARGET_PCT", "Also", "please", "can", "you", "squash", "your", "commit", "into", "a", "single", "one", "There", "be", "no", "need", "to", "have", "a", "separate", "commit", "for", "minor", "change", "like", "the", "ArgVals", "instantiation", "update", "or", "other", "small", "change", "that", "we", "request", "in", "review", "NUMBER", "Squashed", "into", "NUMBER", "f", "NUMBER", "c", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "e", "NUMBER", "ea", "NUMBER", "efad", "NUMBER", "d", "NUMBER", "c", "NUMBER", "It", "would", "be", "awesome", "if", "you", "could", "adjust", "your", "commit", "title", "to", "follow", "the", "NUMBER", "NUMBER", "commit", "rule", "LINK", "global", "NUMBER", "com", "blog", "NUMBER", "NUMBER", "NUMBER", "git", "NUMBER", "NUMBER", "rule", "NUMBER", "Applied", "NUMBER", "NUMBER", "to", "NUMBER", "f", "NUMBER", "c", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "e", "NUMBER", "ea", "NUMBER", "efad", "NUMBER", "d", "NUMBER", "c", "NUMBER", "I", "was", "initially", "trying", "to", "replicate", "the", "convention", "from", "git", "log", "but", "that", "rule", "wasn", "t", "that", "easy", "to", "infer", "NUMBER", "Perhaps", "the", "Contribution", "Quality", "Standards", "LINK", "microvm", "firecracker", "blob", "master", "CONTRIBUTING", "NUMBER", "md", "contribution", "quality", "standards", "can", "be", "update", "to", "reflect", "this", "practice", "You", "mean", "we", "should", "add", "the", "NUMBER", "NUMBER", "rule", "explicitly", "there", "It", "be", "indeed", "pretty", "hidden", "here", "LINK", "good", "commit", "message", "NUMBER", "Thanks", "totally", "miss", "that", "NUMBER", "Also", "the", "Buildkite", "runner", "seems", "to", "be", "stuck", "on", "git", "clone", "stage", "with", "the", "permission", "denied", "error", "no", "matter", "how", "many", "times", "it", "gets", "restarted", "LINK", "ci", "amd", "build", "NUMBER", "Note", "to", "self", "measure", "the", "performance", "impact", "if", "any", "of", "replacing", "the", "embedded", "kernel", "crate", "with", "linux", "loader", "NUMBER", "NUMBER", "note", "to", "self", "investigate", "impact", "on", "binary", "size", "Used", "benchmark", "in", "PR", "NUMBER", "to", "determine", "how", "the", "performance", "degradation", "scales", "with", "the", "number", "of", "new", "version", "add", "in", "the", "version", "map", "NUMBER", "version", "serialize", "NUMBER", "us", "deserialize", "NUMBER", "us", "NUMBER", "version", "serialize", "NUMBER", "us", "deserialize", "NUMBER", "us", "NUMBER", "version", "serialize", "NUMBER", "ms", "deserialize", "NUMBER", "ms", "At", "least", "for", "the", "next", "NUMBER", "release", "it", "be", "safe", "to", "go", "ahead", "with", "a", "NUMBER", "NUMBER", "mapping", "of", "the", "Firecracker", "version", "to", "snapshot", "version", "NUMBER", "Closing", "the", "issue", "and", "now", "track", "possible", "performance", "optimizations", "in", "issue", "NUMBER", "Test", "suite", "completed", "by", "PR", "NUMBER", "Reason", "for", "This", "PR", "We", "ve", "decided", "to", "completely", "remove", "backtrace", "dependency", "because", "of", "the", "following", "reasons", "the", "backtrace", "wasn", "t", "useful", "for", "us", "Firecracker", "team", "in", "the", "debugging", "process", "requires", "musl", "gcc", "to", "be", "install", "musl", "tool", "prints", "the", "stack", "only", "in", "release", "mode", "cause", "us", "some", "troubles", "see", "NUMBER", "for", "details", "forces", "us", "to", "whitelist", "some", "syscalls", "which", "we", "be", "trying", "to", "avoid", "as", "much", "as", "possible", "NUMBER", "We", "be", "curious", "if", "someone", "from", "the", "community", "was", "actually", "helped", "by", "our", "backtrace", "or", "if", "someone", "has", "an", "idea", "of", "how", "can", "we", "improve", "the", "generate", "backtrace", "NUMBER", "Any", "feedback", "would", "be", "greatly", "appreciated", "blush", "NUMBER", "As", "an", "example", "for", "the", "following", "panic", "message", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "firecracker", "src", "main", "NUMBER", "rs", "NUMBER", "Firecracker", "panicked", "at", "Error", "creating", "the", "HTTP", "server", "IOError", "Os", "code", "NUMBER", "kind", "AddrInUse", "message", "Address", "in", "use", "src", "api_server", "src", "lib", "NUMBER", "rs", "NUMBER", "NUMBER", "The", "backtrace", "stack", "would", "be", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "firecracker", "src", "main", "NUMBER", "rs", "NUMBER", "NUMBER", "firecracker", "main", "closure", "NUMBER", "std", "panicking", "rust_panic_with_hook", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "rust_begin_unwind", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "core", "panicking", "panic_fmt", "at", "src", "libcore", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "core", "option", "expect_none_failed", "at", "src", "libcore", "option", "NUMBER", "rs", "NUMBER", "NUMBER", "api_server", "ApiServer", "bind_and_run", "NUMBER", "std", "sys_common", "backtrace", "__rust_begin_short_backtrace", "NUMBER", "core", "ops", "function", "FnOnce", "call_once", "vtable", "NUMBER", "shim", "NUMBER", "TAG", "as", "core", "ops", "function", "FnOnce", "TAG", "call_once", "at", "rustc", "NUMBER", "fb", "NUMBER", "ed", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "bbd", "NUMBER", "b", "NUMBER", "d", "NUMBER", "src", "liballoc", "boxed", "NUMBER", "rs", "NUMBER", "NUMBER", "TAG", "as", "core", "ops", "function", "FnOnce", "TAG", "call_once", "at", "rustc", "NUMBER", "fb", "NUMBER", "ed", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "bbd", "NUMBER", "b", "NUMBER", "d", "NUMBER", "src", "liballoc", "boxed", "NUMBER", "rs", "NUMBER", "std", "sys_common", "thread", "start_thread", "at", "src", "libstd", "sys_common", "thread", "NUMBER", "rs", "NUMBER", "std", "sys", "unix", "thread", "Thread", "thread_start", "at", "src", "libstd", "sys", "unix", "thread", "NUMBER", "rs", "NUMBER", "Aborted", "The", "only", "line", "that", "seems", "to", "be", "relevant", "be", "NUMBER", "api_server", "ApiServer", "bind_and_run", "but", "this", "would", "be", "the", "function", "that", "contains", "the", "line", "that", "be", "printed", "in", "the", "error", "message", "by", "error", "not", "backtrace", "so", "it", "s", "not", "really", "helpful", "NUMBER", "Fixes", "NUMBER", "Description", "of", "Changes", "At", "this", "moment", "just", "remove", "the", "backtrace", "dependency", "NUMBER", "Needs", "some", "more", "investigation", "if", "we", "can", "simplify", "things", "in", "other", "places", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "My", "proposal", "Our", "current", "Dockerfile", "can", "not", "be", "use", "anymore", "for", "build", "a", "container", "image", "because", "it", "uses", "rust", "version", "NUMBER", "and", "the", "latest", "cargo", "audit", "version", "requires", "rust", "NUMBER", "see", "Requirements", "LINK", "audit", "requirements", "NUMBER", "I", "will", "open", "an", "issue", "for", "update", "to", "the", "latest", "rust", "version", "NUMBER", "My", "proposal", "here", "be", "to", "unblock", "this", "PR", "by", "leaving", "the", "same", "version", "of", "rust", "i", "NUMBER", "e", "NUMBER", "and", "cargo", "audit", "NUMBER", "in", "the", "docker", "and", "only", "focusing", "on", "remove", "backtrace", "NUMBER", "Later", "when", "the", "update", "to", "rust", "NUMBER", "be", "do", "we", "can", "upgrade", "both", "of", "them", "simultaneously", "NUMBER", "See", "my", "comment", "in", "the", "code", "for", "how", "we", "can", "install", "a", "specific", "version", "of", "with", "cargo", "install", "NUMBER", "Add", "metrics", "track", "for", "the", "vsock", "devive", "similar", "to", "the", "network", "virtio", "device", "NUMBER", "Signed", "off", "by", "Joshua", "Abraham", "TAG", "I", "m", "not", "sure", "if", "you", "have", "additional", "metrics", "you", "d", "want", "to", "capture", "in", "the", "vsock", "module", "or", "if", "the", "CHANGELOG", "needs", "to", "be", "update", "Reason", "for", "This", "PR", "Closes", "NUMBER", "Description", "of", "Changes", "This", "patch", "add", "metrics", "track", "for", "the", "vsock", "virtio", "device", "TX", "and", "RX", "code", "paths", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Hi", "jabedude", "We", "had", "some", "discussions", "lately", "on", "improving", "rethinking", "our", "metrics", "system", "NUMBER", "This", "would", "involve", "at", "least", "the", "removal", "or", "change", "of", "some", "of", "the", "metrics", "not", "all", "of", "them", "make", "much", "sense", "at", "this", "moment", "NUMBER", "That", "s", "why", "the", "issue", "be", "hanging", "there", "for", "so", "long", "even", "if", "someone", "was", "assigned", "to", "it", "we", "should", "ve", "probably", "add", "an", "update", "on", "that", "issue", "sorry", "for", "that", "NUMBER", "Anyway", "we", "will", "come", "back", "with", "an", "answer", "here", "once", "we", "make", "a", "decision", "NUMBER", "Hello", "lauralt", "No", "problem", "I", "m", "so", "sorry", "I", "didn", "t", "notice", "that", "the", "issue", "was", "assigned", "to", "someone", "else", "NUMBER", "Let", "me", "know", "if", "you", "decide", "to", "go", "a", "different", "direction", "jabedude", "we", "would", "like", "to", "have", "this", "code", "merge", "no", "later", "than", "next", "week", "NUMBER", "Is", "this", "feasible", "for", "you", "If", "not", "would", "it", "be", "ok", "with", "you", "to", "have", "us", "contribute", "to", "your", "PR", "jabedude", "did", "you", "get", "a", "chance", "to", "resume", "work", "on", "this", "PR", "Any", "help", "would", "be", "greatly", "appreciated", "Thanks", "Using", "the", "Ethernet", "IP", "TCP", "stack", "for", "sending", "TCP", "payloads", "larger", "than", "MSS", "Maximum", "Segment", "Size", "established", "at", "connection", "handshake", "results", "in", "incorrect", "payload", "at", "the", "receiving", "endpoint", "NUMBER", "Add", "support", "for", "accounting", "of", "TCP", "payloads", "larger", "than", "MSS", "sent", "with", "multiple", "segments", "NUMBER", "I", "think", "we", "can", "get", "everything", "work", "nicely", "with", "different", "vmm", "NUMBER", "op", "implementations", "for", "test", "and", "release", "NUMBER", "Vcpu", "cleanup", "can", "be", "do", "like", "we", "did", "in", "LINK", "microvm", "firecracker", "pull", "NUMBER", "The", "integration", "test", "don", "t", "compile", "the", "cfg", "test", "marked", "code", "NUMBER", "That", "s", "right", "NUMBER", "I", "wonder", "if", "coverage", "report", "would", "work", "fine", "if", "we", "fork", "during", "test", "NUMBER", "We", "could", "run", "the", "actual", "test", "in", "the", "child", "and", "the", "parent", "would", "only", "report", "the", "status", "NUMBER", "Also", "there", "s", "no", "way", "to", "force", "the", "vcpus", "to", "exit", "but", "leave", "the", "process", "run", "use", "just", "the", "public", "facing", "programmatic", "api", "NUMBER", "Originally", "VcpuEvents", "also", "contained", "an", "Exit", "command", "so", "the", "vmm", "can", "request", "vcpus", "to", "cleanly", "exit", "NUMBER", "We", "remove", "it", "as", "it", "wasn", "t", "use", "but", "I", "think", "we", "should", "bring", "it", "back", "NUMBER", "It", "would", "be", "a", "clean", "flow", "NUMBER", "In", "that", "case", "however", "this", "We", "could", "also", "whitelist", "sysprocmask", "and", "let", "the", "vcpu", "threads", "exit", "cleanly", "NUMBER", "would", "also", "be", "needed", "NUMBER", "However", "if", "we", "go", "the", "fork", "way", "then", "we", "really", "don", "t", "need", "anything", "extra", "NUMBER", "Yeah", "that", "s", "what", "I", "was", "going", "for", "NUMBER", "I", "think", "the", "logic", "holds", "but", "I", "m", "not", "certain", "how", "future", "proof", "it", "be", "NUMBER", "I", "guess", "it", "s", "pretty", "disposable", "if", "the", "shape", "of", "the", "test", "change", "in", "any", "way", "NUMBER", "We", "start", "make", "efforts", "in", "write", "rust", "integration", "test", "especially", "for", "the", "crates", "that", "have", "long", "source", "file", "or", "can", "not", "be", "properly", "test", "by", "unit", "test", "NUMBER", "I", "think", "this", "will", "be", "a", "future", "direction", "for", "our", "test", "system", "NUMBER", "These", "test", "do", "not", "require", "cfg", "test", "or", "mod", "test", "so", "from", "this", "point", "of", "view", "the", "propose", "change", "should", "be", "ok", "NUMBER", "Still", "I", "don", "t", "think", "we", "should", "rely", "on", "the", "fact", "that", "every", "file", "that", "contains", "a", "cfg", "test", "will", "have", "a", "mod", "test", "defined", "NUMBER", "I", "remembered", "that", "at", "some", "moment", "we", "had", "a", "cfg", "test", "for", "some", "macro_use", "in", "a", "file", "with", "no", "unit", "test", "see", "the", "commit", "here", "LINK", "microvm", "firecracker", "commit", "NUMBER", "e", "NUMBER", "cc", "NUMBER", "e", "NUMBER", "a", "NUMBER", "cc", "NUMBER", "ccdf", "NUMBER", "f", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "NUMBER", "c", "NUMBER", "In", "that", "particular", "situation", "later", "on", "it", "was", "proven", "to", "be", "an", "alternative", "for", "it", "but", "I", "don", "t", "think", "we", "should", "enforce", "it", "by", "this", "test", "NUMBER", "Maybe", "a", "better", "option", "would", "be", "to", "search", "for", "that", "diff", "in", "file", "that", "have", "also", "a", "test", "in", "them", "but", "it", "s", "really", "ugly", "disappointed", "NUMBER", "Hi", "ahmedaabouzied", "NUMBER", "Thanks", "for", "the", "PR", "The", "code", "coverage", "integration", "test", "be", "now", "fail", "NUMBER", "Can", "you", "please", "update", "the", "target", "value", "in", "test_coverage", "NUMBER", "py", "I", "had", "to", "amend", "the", "commit", "then", "force", "push", "it", "to", "update", "the", "value", "of", "COVERAGE_TARGET_PCT", "to", "a", "suitable", "value", "to", "pass", "the", "test_coverage", "integration", "test", "without", "committing", "twice", "for", "the", "same", "thing", "NUMBER", "I", "don", "t", "know", "if", "this", "be", "the", "best", "git", "approach", "to", "do", "NUMBER", "I", "d", "appreciate", "if", "someone", "proposes", "a", "better", "approach", "NUMBER", "Hmm", "it", "looks", "like", "now", "you", "have", "a", "separate", "commit", "just", "for", "the", "coverage", "change", "NUMBER", "This", "should", "be", "in", "the", "same", "commit", "with", "the", "other", "change", "NUMBER", "Because", "it", "s", "a", "small", "change", "you", "can", "just", "remove", "the", "last", "commit", "git", "reset", "hard", "HEAD", "now", "the", "coverage", "target", "will", "have", "the", "old", "value", "you", "can", "change", "it", "to", "the", "new", "one", "NUMBER", "and", "then", "run", "git", "commit", "a", "amend", "and", "this", "change", "should", "be", "add", "to", "your", "first", "commit", "NUMBER", "Another", "option", "a", "nicer", "one", "but", "in", "this", "case", "takes", "more", "time", "would", "be", "to", "squash", "your", "last", "two", "commit", "as", "explained", "here", "LINK", "to", "squash", "multiple", "git", "commit", "NUMBER", "I", "had", "to", "amend", "the", "commit", "then", "force", "push", "it", "to", "update", "the", "value", "of", "COVERAGE_TARGET_PCT", "to", "a", "suitable", "value", "to", "pass", "the", "test_coverage", "integration", "test", "without", "committing", "twice", "for", "the", "same", "thing", "NUMBER", "I", "don", "t", "know", "if", "this", "be", "the", "best", "git", "approach", "to", "do", "NUMBER", "I", "d", "appreciate", "if", "someone", "proposes", "a", "better", "approach", "NUMBER", "Hmm", "it", "looks", "like", "now", "you", "have", "a", "separate", "commit", "just", "for", "the", "coverage", "change", "NUMBER", "This", "should", "be", "in", "the", "same", "commit", "with", "the", "other", "change", "NUMBER", "Because", "it", "s", "a", "small", "change", "you", "can", "just", "remove", "the", "last", "commit", "git", "reset", "hard", "HEAD", "now", "the", "coverage", "target", "will", "have", "the", "old", "value", "you", "can", "change", "it", "to", "the", "new", "one", "NUMBER", "and", "then", "run", "git", "commit", "a", "amend", "and", "this", "change", "should", "be", "add", "to", "your", "first", "commit", "NUMBER", "Another", "option", "a", "nicer", "one", "but", "in", "this", "case", "takes", "more", "time", "would", "be", "to", "squash", "your", "last", "two", "commit", "as", "explained", "here", "LINK", "to", "squash", "multiple", "git", "commit", "NUMBER", "Or", "as", "iulianbarbu", "point", "out", "you", "can", "just", "git", "reset", "HEAD", "the", "coverage", "change", "will", "still", "be", "around", "but", "not", "commit", "to", "append", "it", "to", "your", "first", "commit", "just", "run", "git", "commit", "a", "amend", "I", "m", "still", "learning", "git", "myself", "D", "NUMBER", "That", "makes", "sense", "NUMBER", "I", "just", "squashed", "the", "commit", "and", "force", "push", "the", "change", "NUMBER", "Great", "Now", "it", "looks", "good", "NUMBER", "Just", "a", "small", "observation", "we", "don", "t", "usually", "mention", "in", "the", "commit", "message", "if", "the", "coverage", "target", "increase", "or", "decreased", "this", "be", "somehow", "implied", "by", "the", "actual", "change", "that", "be", "brought", "by", "the", "commit", "NUMBER", "I", "would", "leave", "the", "commit", "message", "as", "it", "was", "before", "NUMBER", "Okay", "NUMBER", "So", "should", "I", "change", "the", "commit", "message", "Yep", "it", "would", "be", "nice", "and", "to", "be", "super", "clear", "you", "can", "update", "it", "like", "this", "Fix", "unit", "test", "coverage", "for", "the", "cpuid", "crate", "Set", "the", "unit", "test", "mod", "as", "test", "instead", "of", "test", "in", "cpuid", "crate", "transformer", "module", "NUMBER", "Now", "the", "test", "test_rx_rate_limiting", "fail", "shell", "FAILURES", "____________________", "test_rx_rate_limiting", "ubuntu_with_ssh", "____________________", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "test_rx_rate_limiting", "_check_rx_rate_limit_patch", "test_microvm", "guest_ips", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_rate_limit_patch", "_check_rx_bandwidth", "test_microvm", "guest_ips", "NUMBER", "bandwidth_kb", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_bandwidth", "assert", "diff_pc", "TAG", "E", "assert", "NUMBER", "TAG", "I", "ll", "check", "it", "out", "This", "be", "a", "problem", "on", "our", "side", "that", "we", "re", "trying", "to", "fix", "NUMBER", "Just", "another", "push", "f", "would", "be", "appreciated", "NUMBER", "Sorry", "for", "this", "NUMBER", "Now", "the", "test", "test_rx_rate_limiting", "fail", "shell", "FAILURES", "____________________", "test_rx_rate_limiting", "ubuntu_with_ssh", "____________________", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "test_rx_rate_limiting", "_check_rx_rate_limit_patch", "test_microvm", "guest_ips", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_rate_limit_patch", "_check_rx_bandwidth", "test_microvm", "guest_ips", "NUMBER", "bandwidth_kb", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_bandwidth", "assert", "diff_pc", "TAG", "E", "assert", "NUMBER", "TAG", "I", "ll", "check", "it", "out", "Have", "you", "update", "the", "branch", "before", "the", "push", "A", "tentative", "fix", "was", "put", "in", "yesterday", "NUMBER", "It", "fail", "after", "I", "update", "his", "branch", "NUMBER", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Description", "of", "Changes", "detailed", "in", "the", "commit", "message", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "aghecenco", "sandreim", "I", "address", "your", "suggestions", "please", "give", "it", "another", "look", "Reason", "for", "This", "PR", "NUMBER", "Description", "of", "Changes", "Add", "a", "validation", "check", "to", "enforce", "MMDS", "HTTP", "request", "to", "use", "only", "GET", "NUMBER", "Documentation", "about", "MMDS", "guest", "request", "failures", "can", "be", "find", "in", "NUMBER", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "sandreim", "andreeaflorescu", "raduiliescu", "please", "take", "a", "look", "again", "I", "ve", "add", "Method", "not", "allow", "micro", "http", "support", "and", "use", "it", "in", "MMDS", "NUMBER", "When", "an", "application", "from", "within", "the", "guest", "want", "to", "retrieve", "metadata", "from", "MMDS", "the", "documentation", "be", "specific", "in", "how", "this", "request", "has", "to", "be", "formed", "NUMBER", "However", "we", "do", "not", "enforce", "validation", "on", "the", "HTTP", "method", "of", "the", "request", "and", "we", "would", "end", "up", "responding", "to", "request", "which", "use", "atypical", "HTTP", "methods", "for", "retrieving", "metadata", "like", "PUT", "and", "PATCH", "NUMBER", "The", "vast", "majority", "of", "test", "cleanup", "after", "themselves", "use", "TempFile", "but", "there", "be", "some", "cases", "where", "TempFile", "cannot", "be", "use", "like", "the", "Vsock", "UDS", "or", "the", "API", "UDS", "NUMBER", "For", "these", "cases", "a", "TempPath", "object", "can", "be", "use", "to", "cleanup", "whatever", "be", "at", "inner", "path", "when", "object", "goes", "out", "of", "scope", "NUMBER", "Grepping", "for", "fs", "remove_file", "in", "Firecracker", "shows", "many", "places", "where", "this", "be", "manually", "do", "over", "and", "over", "NUMBER", "This", "can", "be", "do", "without", "add", "new", "TempPath", "in", "vmm", "sys", "util", "and", "just", "ab", "use", "TempFile", "like", "so", "rust", "let", "mut", "temp_uds_path", "TempFile", "new", "NUMBER", "unwrap", "Remove", "the", "file", "so", "the", "path", "can", "be", "use", "by", "the", "socket", "NUMBER", "temp_uds_path", "NUMBER", "remove", "NUMBER", "unwrap", "Crate", "sock", "at", "temp_uds_path", "NUMBER", "as_path", "NUMBER", "It", "will", "be", "delete", "when", "temp_uds_path", "goes", "out", "of", "scope", "as", "NUMBER", "remove", "be", "call", "again", "on", "NUMBER", "drop", "NUMBER", "NUMBER", "Indeed", "there", "be", "no", "need", "AFAICT", "to", "de", "serialize", "either", "VcpuEvent", "or", "VcpuResponse", "NUMBER", "marcbrooker", "please", "also", "sign", "your", "commit", "git", "commit", "s", "amend", "If", "a", "struct", "field", "has", "a", "semantic", "serialization", "function", "defined", "the", "whole", "structure", "must", "implement", "Clone", "NUMBER", "This", "be", "inefficient", "and", "can", "also", "cause", "trouble", "when", "having", "also", "a", "FamStructWrapper", "TAG", "field", "defined", "in", "that", "structure", "NUMBER", "Calling", "clone", "on", "a", "FamStructWrapper", "TAG", "instance", "will", "clone", "only", "the", "number", "of", "entries", "and", "the", "flexible", "array", "members", "NUMBER", "For", "example", "if", "we", "have", "the", "following", "structure", "rust", "pub", "struct", "kvm_cpuid", "pub", "nent", "__u", "NUMBER", "pub", "padding", "__u", "NUMBER", "pub", "entries", "__IncompleteArrayField", "TAG", "wrapped", "in", "a", "FamStructWrapper", "and", "we", "call", "clone", "on", "it", "only", "nent", "and", "entries", "field", "will", "be", "keep", "padding", "field", "will", "take", "the", "default", "u", "NUMBER", "value", "NUMBER", "So", "if", "we", "want", "to", "serialize", "the", "following", "structure", "rust", "derive", "Versionize", "Clone", "pub", "struct", "S", "some_kvm_cpuid", "FamStructWrapper", "TAG", "version", "start", "NUMBER", "ser_fn", "ser_u", "NUMBER", "some_u", "NUMBER", "u", "NUMBER", "clone", "will", "be", "call", "before", "we", "actually", "serialize", "the", "field", "and", "because", "of", "this", "we", "will", "serialize", "the", "default", "value", "for", "padding", "field", "not", "the", "value", "that", "we", "pass", "when", "we", "instantiate", "S", "NUMBER", "Issue", "here", "LINK", "vmm", "vmm", "sys", "util", "issue", "NUMBER", "Reason", "for", "This", "PR", "MMDS", "configuration", "ipv", "NUMBER", "_address", "field", "must", "be", "a", "valid", "link", "local", "IPv", "NUMBER", "address", "NUMBER", "Description", "of", "Changes", "Added", "a", "link", "local", "check", "for", "the", "IPv", "NUMBER", "address", "which", "comes", "with", "MMDS", "configuration", "returning", "an", "error", "if", "the", "provide", "IPv", "NUMBER", "address", "be", "not", "link", "local", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Need", "also", "to", "modify", "the", "MMDS", "documentation", "and", "mention", "that", "The", "ipv", "NUMBER", "_address", "value", "must", "be", "a", "valid", "link", "local", "IPv", "NUMBER", "address", "NUMBER", "Related", "to", "this", "aspect", "I", "ve", "opened", "NUMBER", "with", "MMDS", "user", "guide", "and", "MMDS", "configuration", "API", "complete", "description", "inside", "the", "firecracker", "swagger", "file", "NUMBER", "I", "guess", "we", "can", "have", "this", "PR", "merge", "without", "documentation", "and", "keep", "track", "of", "the", "MMDS", "docs", "in", "that", "opened", "PR", "NUMBER", "I", "ve", "opened", "an", "issue", "also", "for", "the", "MMDS", "docs", "update", "NUMBER", "NUMBER", "Need", "also", "to", "modify", "the", "MMDS", "documentation", "and", "mention", "that", "The", "ipv", "NUMBER", "_address", "value", "must", "be", "a", "valid", "link", "local", "IPv", "NUMBER", "address", "NUMBER", "Related", "to", "this", "aspect", "I", "ve", "opened", "NUMBER", "with", "MMDS", "user", "guide", "and", "MMDS", "configuration", "API", "complete", "description", "inside", "the", "firecracker", "swagger", "file", "NUMBER", "I", "guess", "we", "can", "have", "this", "PR", "merge", "without", "documentation", "and", "keep", "track", "of", "the", "MMDS", "docs", "in", "that", "opened", "PR", "NUMBER", "I", "ve", "opened", "an", "issue", "also", "for", "the", "MMDS", "docs", "update", "NUMBER", "NUMBER", "Any", "reason", "why", "we", "should", "merge", "this", "PR", "without", "the", "documentation", "Adding", "documentation", "be", "one", "of", "the", "PR", "s", "check", "list", "NUMBER", "Just", "wondering", "why", "we", "should", "take", "an", "exception", "for", "this", "one", "NUMBER", "The", "relate", "docs", "be", "offered", "in", "minimal", "amount", "in", "this", "PR", "NUMBER", "Further", "detailed", "docs", "will", "be", "merge", "in", "NUMBER", "NUMBER", "I", "chose", "to", "merge", "the", "detailed", "docs", "through", "a", "separate", "PR", "to", "have", "them", "review", "without", "other", "distractions", "and", "also", "to", "make", "a", "single", "contribution", "with", "docs", "relate", "two", "three", "or", "more", "PRs", "with", "additions", "to", "MMDS", "NUMBER", "Currently", "we", "do", "not", "support", "versionizing", "an", "enum", "tuple", "variant", "with", "more", "than", "one", "field", "NUMBER", "Example", "rust", "derive", "Versionize", "pub", "enum", "X", "One", "Two", "u", "NUMBER", "u", "NUMBER", "version", "start", "NUMBER", "default_fn", "default_state_three", "Three", "u", "NUMBER", "u", "NUMBER", "This", "will", "fail", "with", "this", "pattern", "has", "NUMBER", "field", "but", "the", "corresponding", "tuple", "variant", "has", "NUMBER", "field", "NUMBER", "Open", "until", "the", "fix", "reaches", "Firecracker", "NUMBER", "Currently", "we", "do", "not", "support", "versionizing", "an", "enum", "variant", "with", "no", "field", "also", "know", "as", "unit", "variant", "NUMBER", "Example", "rust", "derive", "Versionize", "pub", "enum", "X", "One", "Two", "u", "NUMBER", "u", "NUMBER", "version", "start", "NUMBER", "default_fn", "default_state_three", "Three", "This", "will", "fail", "with", "expected", "tuple", "struct", "or", "tuple", "variant", "find", "unit", "variant", "Self", "Three", "NUMBER", "Fixed", "by", "firecracker", "microvm", "versionize_derive", "NUMBER", "Yup", "that", "s", "right", "NUMBER", "We", "ll", "close", "it", "once", "the", "fix", "be", "in", "Firecracker", "NUMBER", "Done", "the", "snapshot", "functionality", "be", "merge", "in", "master", "NUMBER", "Depends", "on", "Continuation", "of", "LINK", "microvm", "firecracker", "issue", "NUMBER", "The", "VmResources", "be", "only", "use", "through", "the", "RPC", "interface", "move", "it", "in", "the", "rpc_interface", "module", "NUMBER", "The", "target", "be", "to", "completely", "isolate", "contain", "the", "API", "RPC", "interface", "so", "it", "could", "be", "enable", "disabled", "use", "features", "for", "example", "NUMBER", "Hello", "I", "would", "like", "to", "work", "on", "this", "yes", "With", "the", "corresponding", "change", "vmm", "will", "not", "depend", "anymore", "on", "dumbo", "NUMBER", "However", "devices", "and", "utils", "will", "still", "depend", "on", "dumbo", "NUMBER", "To", "me", "personally", "I", "do", "not", "find", "appropriately", "to", "have", "a", "device", "dependent", "on", "a", "network", "stack", "in", "our", "case", "Net", "device", "depends", "on", "dumbo", "ns", "because", "of", "the", "real", "world", "hierarchy", "software", "sits", "on", "top", "of", "hardware", "NUMBER", "I", "would", "prefer", "it", "the", "other", "way", "around", "NUMBER", "However", "in", "our", "case", "I", "do", "not", "know", "for", "sure", "if", "it", "would", "work", "the", "same", "worse", "or", "not", "at", "all", "NUMBER", "If", "it", "will", "work", "the", "same", "we", "get", "rid", "of", "the", "dependency", "of", "devices", "on", "dumbo", "NUMBER", "In", "terms", "of", "utils", "dependency", "on", "dumbo", "I", "find", "it", "unnecessary", "NUMBER", "dumbo", "be", "use", "in", "utils", "to", "unit", "test", "the", "Tap", "as", "in", "sending", "IPv", "NUMBER", "packets", "and", "ARP", "frames", "on", "the", "tap", "and", "verifying", "at", "the", "other", "end", "if", "the", "packet", "frames", "retrieval", "be", "successful", "not", "verifying", "if", "they", "be", "the", "same", "NUMBER", "This", "leads", "me", "to", "the", "conclusion", "that", "it", "be", "just", "enough", "to", "send", "some", "plain", "data", "on", "the", "tap", "and", "receive", "it", "back", "with", "success", "and", "keep", "the", "same", "behavior", "for", "the", "tap", "unit", "test", "and", "for", "the", "Tap", "implementation", "as", "well", "NUMBER", "We", "can", "remove", "the", "dependency", "on", "dumbo", "by", "modifying", "the", "current", "tap", "unit", "test", "NUMBER", "IMO", "there", "be", "still", "issue", "with", "dependency", "compliance", "in", "terms", "of", "dumbo", "because", "it", "has", "a", "dependency", "on", "mmds", "crate", "NUMBER", "The", "reason", "be", "that", "the", "specific", "mmds", "network", "stack", "implementation", "dumbo", "ns", "which", "resides", "in", "dumbo", "works", "very", "closely", "with", "mmds", "which", "can", "not", "be", "avoided", "NUMBER", "To", "resolve", "this", "issue", "we", "can", "move", "the", "specific", "mmds", "network", "stack", "implementation", "to", "mmds", "and", "make", "also", "generic", "some", "bits", "of", "code", "from", "dumbo", "s", "tcp", "handler", "which", "depends", "on", "a", "method", "from", "mmds", "NUMBER", "Now", "I", "think", "dumbo", "will", "be", "a", "really", "self", "contained", "crate", "NUMBER", "firecracker", "microvm", "compute", "capsule", "WDYT", "iulianbarbu", "this", "be", "a", "sane", "separation", "of", "concerns", "NUMBER", "Do", "you", "want", "to", "create", "issue", "to", "describe", "what", "needs", "to", "be", "do", "Your", "issue", "explains", "it", "pretty", "well", "already", "NUMBER", "I", "will", "open", "separate", "issue", "for", "each", "mention", "crate", "NUMBER", "This", "be", "somehow", "the", "opposite", "of", "LINK", "microvm", "firecracker", "issue", "NUMBER", "From", "a", "separation", "of", "concerns", "standpoint", "both", "will", "achieve", "the", "separation", "NUMBER", "However", "this", "separation", "be", "similar", "to", "the", "current", "dependencies", "present", "in", "Firecracker", "and", "might", "work", "with", "less", "fuss", "than", "NUMBER", "which", "needs", "a", "new", "design", "or", "at", "least", "thoughts", "discussions", "about", "what", "can", "be", "do", "differently", "to", "support", "it", "NUMBER", "Mentioned", "this", "here", "to", "keep", "these", "issue", "close", "and", "have", "both", "suggestions", "at", "hand", "when", "resolving", "them", "NUMBER", "Hmm", "why", "do", "you", "say", "they", "re", "opposite", "I", "think", "of", "them", "as", "separate", "issue", "NUMBER", "This", "be", "relate", "to", "the", "VirtioNetwork", "interface", "and", "how", "we", "make", "the", "interface", "implementation", "not", "depend", "on", "Mmds", "NUMBER", "This", "issue", "doesn", "t", "really", "care", "where", "the", "MmdsNetworkStack", "be", "defined", "NUMBER", "It", "be", "just", "about", "separating", "the", "core", "functionality", "of", "the", "virtio", "network", "device", "from", "mmds", "in", "such", "a", "way", "that", "mmds", "can", "easily", "become", "a", "feature", "for", "example", "NUMBER", "I", "said", "that", "their", "opposite", "because", "of", "the", "the", "fact", "that", "with", "pluggable", "network", "stack", "Firecracker", "virtio", "net", "will", "still", "depend", "on", "the", "MMDS", "network", "stack", "while", "NUMBER", "suggests", "to", "reverse", "this", "dependency", "NUMBER", "However", "reading", "again", "what", "you", "re", "thinking", "at", "it", "looks", "like", "the", "change", "might", "be", "very", "similar", "and", "separate", "as", "you", "say", "or", "sequential", "maybe", "NUMBER", "I", "take", "back", "what", "I", "ve", "said", "NUMBER", "D", "Is", "this", "performance", "NUMBER", "md", "file", "gonna", "be", "an", "entry", "point", "for", "data", "about", "performance", "in", "general", "relate", "to", "firecracker", "At", "the", "moment", "it", "contains", "data", "only", "about", "the", "network", "performance", "hence", "I", "would", "rename", "it", "network", "performance", "NUMBER", "md", "NUMBER", "At", "a", "first", "glance", "it", "looks", "like", "last_update", "processed_capacity", "and", "processed_refill_time", "be", "not", "state", "but", "Rate", "Limiter", "internal", "field", "use", "for", "processing", "the", "budget", "NUMBER", "They", "should", "probably", "not", "be", "saved", "NUMBER", "Temporarily", "blocking", "this", "PR", "to", "see", "if", "we", "can", "separate", "the", "state", "from", "the", "internal", "rate", "limiter", "logic", "NUMBER", "Good", "catch", "processed_capacity", "and", "processed_refill_time", "can", "indeed", "be", "re", "calculated", "at", "deserialization", "NUMBER", "last_update", "be", "part", "of", "state", "that", "needs", "saving", "NUMBER", "Hey", "cmannett", "NUMBER", "Thanks", "for", "the", "PR", "NUMBER", "I", "ll", "look", "on", "the", "change", "in", "depth", "soon", "NUMBER", "A", "high", "level", "comment", "would", "be", "that", "this", "PR", "has", "to", "provide", "descriptive", "error", "message", "which", "might", "help", "users", "in", "solving", "Firecracker", "relate", "problem", "by", "themselves", "NUMBER", "Some", "of", "these", "expect", "s", "from", "your", "change", "address", "also", "debugging", "message", "useful", "for", "developers", "NUMBER", "These", "message", "contain", "implementation", "details", "which", "IMO", "do", "not", "bring", "value", "to", "end", "users", "NUMBER", "However", "this", "do", "not", "mean", "that", "we", "shouldn", "t", "have", "message", "which", "tell", "users", "that", "an", "error", "occur", "due", "to", "a", "reason", "independent", "to", "them", "NUMBER", "We", "might", "have", "to", "decide", "upon", "these", "NUMBER", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Prerequisite", "for", "NUMBER", "Description", "of", "Changes", "Following", "the", "more", "decoupled", "design", "we", "can", "now", "create", "block", "devices", "on", "their", "configuration", "path", "rather", "than", "saving", "a", "config", "and", "delaying", "creation", "to", "boot", "time", "NUMBER", "Such", "a", "model", "allows", "user", "error", "like", "invalid", "resources", "or", "permissions", "to", "be", "report", "as", "part", "of", "the", "configuration", "step", "rather", "than", "later", "at", "attempted", "boot", "NUMBER", "It", "would", "also", "remove", "the", "time", "window", "between", "configuration", "and", "boot", "where", "change", "to", "the", "host", "system", "deleting", "backing", "file", "change", "permissions", "etc", "would", "cause", "microVM", "boot", "failures", "race", "condition", "between", "validation", "and", "commitment", "of", "resources", "NUMBER", "Such", "a", "model", "should", "also", "decrease", "code", "complexity", "and", "should", "provide", "better", "efficiency", "to", "the", "process", "of", "configuring", "and", "starting", "a", "microVM", "no", "more", "moving", "configurations", "around", "in", "memory", "and", "validating", "resources", "both", "at", "config", "time", "and", "boot", "time", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "It", "be", "a", "step", "in", "that", "direction", "yes", "but", "we", "re", "far", "from", "it", "since", "the", "biggest", "miss", "piece", "there", "be", "PCI", "Hotplug", "This", "PR", "be", "a", "prerequisite", "for", "NUMBER", "ioanachirca", "aghecenco", "I", "ve", "rebased", "please", "take", "a", "look", "NUMBER", "As", "vmm", "sys", "util", "v", "NUMBER", "be", "now", "release", "we", "can", "use", "the", "epoll", "wrapper", "from", "there", "and", "remove", "the", "one", "from", "our", "repo", "NUMBER", "Sure", "NUMBER", "Define", "max", "length", "for", "variable", "length", "field", "and", "add", "validations", "NUMBER", "We", "need", "to", "do", "this", "for", "Vec", "and", "String", "NUMBER", "I", "tried", "some", "things", "and", "played", "a", "little", "to", "see", "what", "this", "trait", "approach", "really", "involves", "and", "to", "me", "it", "doesn", "t", "seem", "like", "a", "good", "fit", "anymore", "NUMBER", "First", "the", "duplicate", "code", "be", "indeed", "a", "lot", "and", "that", "s", "because", "the", "common", "functionality", "be", "mostly", "consisted", "of", "the", "setter", "function", "and", "even", "if", "their", "implementations", "be", "exactly", "the", "same", "for", "both", "ValueArgument", "and", "FlagArgument", "they", "must", "be", "implement", "by", "the", "structs", "a", "default", "trait", "method", "implementation", "can", "t", "change", "the", "field", "of", "the", "trait", "implementors", "NUMBER", "Secondly", "the", "function", "that", "parse", "and", "validate", "the", "argument", "in", "most", "of", "the", "validations", "have", "to", "know", "the", "type", "of", "the", "Argument", "flag", "or", "value", "argument", "which", "from", "what", "I", "ve", "tried", "also", "implies", "some", "duplicate", "code", "NUMBER", "Like", "Andreea", "said", "for", "flags", "a", "lot", "of", "field", "won", "t", "make", "sense", "anymore", "and", "it", "actually", "looks", "like", "a", "value", "argument", "and", "a", "flag", "argument", "even", "though", "they", "be", "both", "in", "fact", "argument", "don", "t", "have", "that", "much", "in", "common", "you", "can", "t", "say", "that", "a", "flag", "be", "required", "or", "that", "a", "flag", "has", "a", "value", "or", "more", "precisely", "a", "user", "value", "this", "would", "be", "indeed", "true", "default_value", "field", "also", "doesn", "t", "make", "sense", "a", "value", "or", "is_present", "bool", "field", "would", "be", "enough", "NUMBER", "when", "initializing", "that", "argument", "and", "NUMBER", "when", "it", "be", "pass", "by", "user", "NUMBER", "Also", "at", "this", "moment", "in", "our", "arg", "parser", "implementation", "we", "don", "t", "allow", "the", "user", "to", "pass", "any", "argument", "two", "or", "more", "times", "but", "if", "I", "think", "more", "about", "this", "it", "should", "be", "no", "problem", "if", "the", "user", "pass", "the", "same", "flag", "NUMBER", "NUMBER", "times", "for", "value", "argument", "it", "makes", "sense", "this", "type", "of", "validation", "because", "the", "user", "could", "give", "this", "way", "NUMBER", "values", "for", "the", "same", "argument", "NUMBER", "With", "the", "trait", "approach", "it", "will", "be", "pretty", "ugly", "to", "check", "these", "particular", "things", "that", "I", "ve", "just", "mention", "as", "they", "depend", "a", "lot", "on", "the", "implementor", "type", "NUMBER", "Maybe", "the", "cleanest", "way", "to", "solve", "this", "would", "be", "to", "have", "two", "separate", "collections", "for", "flags", "and", "argument", "with", "values", "but", "I", "imagine", "there", "will", "still", "be", "some", "duplicate", "code", "NUMBER", "MacAddr", "be", "Copy", "so", "each", "call", "to", "write_to_mmds_or_tap", "would", "create", "a", "copy", "of", "the", "underlying", "buffer", "NUMBER", "References", "could", "be", "use", "instead", "to", "avoid", "the", "copy", "NUMBER", "That", "s", "true", "Option", "TAG", "be", "smaller", "in", "size", "than", "a", "reference", "so", "it", "s", "definitely", "faster", "to", "send", "it", "by", "value", "than", "by", "reference", "we", "also", "avoid", "dereferencing", "NUMBER", "Good", "catch", "closing", "this", "issue", "Kcov", "report", "coverage", "only", "for", "test", "defined", "in", "the", "mod", "test", "block", "so", "we", "need", "to", "enforce", "this", "to", "avoid", "bogus", "coverage", "results", "NUMBER", "LINK", "microvm", "firecracker", "blob", "e", "NUMBER", "c", "NUMBER", "b", "NUMBER", "a", "NUMBER", "d", "NUMBER", "f", "NUMBER", "c", "NUMBER", "f", "NUMBER", "d", "NUMBER", "cac", "NUMBER", "test", "integration_tests", "build", "test_coverage", "NUMBER", "py", "L", "NUMBER", "Current", "container", "fcuvm", "v", "NUMBER", "contains", "cargo", "audit", "NUMBER", "which", "be", "the", "latest", "version", "NUMBER", "Hi", "AnishShah", "and", "thanks", "for", "your", "interest", "A", "little", "bit", "of", "context", "for", "the", "issue", "linked", "to", "your", "PR", "If", "you", "take", "a", "look", "for", "example", "in", "main", "NUMBER", "rs", "you", "can", "see", "how", "we", "check", "if", "a", "flag", "be", "present", "in", "the", "argument", "pass", "by", "user", "let", "api_enabled", "argument", "NUMBER", "value_as_bool", "no", "api", "NUMBER", "unwrap_or", "false", "We", "want", "to", "safely", "replace", "that", "unwrap_or", "with", "an", "unwrap", "NUMBER", "If", "we", "do", "this", "now", "it", "will", "panic", "more", "precisely", "value_as_bool", "will", "panic", "NUMBER", "That", "s", "because", "when", "we", "build", "the", "ArgParser", "with", "the", "possible", "argument", "all", "of", "the", "argument", "flags", "and", "argument", "with", "actual", "values", "have", "a", "None", "value", "NUMBER", "If", "the", "user", "pass", "some", "flag", "the", "value", "set", "for", "that", "one", "will", "be", "Bool", "true", "NUMBER", "But", "there", "be", "no", "possible", "scenario", "when", "that", "value", "can", "be", "Bool", "false", "NUMBER", "What", "we", "meant", "by", "support", "default", "value", "for", "bool", "argument", "was", "that", "we", "should", "find", "a", "way", "to", "implicitly", "say", "that", "the", "default", "value", "for", "flags", "be", "false", "NUMBER", "In", "my", "opinion", "this", "logic", "should", "be", "handle", "in", "arg_parser", "NUMBER", "rs", "there", "be", "no", "need", "for", "the", "user", "to", "set", "a", "default", "value", "for", "a", "flag", "because", "it", "would", "be", "indeed", "false", "NUMBER", "One", "way", "to", "fix", "this", "problem", "would", "be", "to", "update", "value_as_bool", "to", "never", "return", "None", "or", "to", "find", "a", "way", "to", "set", "also", "the", "default", "value", "for", "flags", "not", "only", "for", "the", "ones", "that", "take", "String", "values", "NUMBER", "What", "do", "you", "think", "AnishShah", "the", "change", "you", "propose", "in", "this", "PR", "feels", "like", "throw", "a", "rug", "over", "a", "stain", "instead", "of", "cleaning", "it", "up", "stuck_out_tongue", "I", "think", "we", "should", "change", "the", "underlying", "representation", "to", "better", "suit", "the", "usage", "scenario", "NUMBER", "lauralt", "andreeaflorescu", "what", "do", "you", "think", "of", "this", "option", "LINK", "microvm", "firecracker", "issue", "NUMBER", "issuecomment", "NUMBER", "From", "a", "bird", "s", "eye", "view", "it", "looks", "like", "it", "would", "naturally", "fit", "the", "scenario", "NUMBER", "AnishShah", "the", "change", "you", "propose", "in", "this", "PR", "feels", "like", "throw", "a", "rug", "over", "a", "stain", "instead", "of", "cleaning", "it", "up", "I", "think", "we", "should", "change", "the", "underlying", "representation", "to", "better", "suit", "the", "usage", "scenario", "NUMBER", "lauralt", "andreeaflorescu", "what", "do", "you", "think", "of", "this", "option", "NUMBER", "comment", "LINK", "microvm", "firecracker", "issue", "NUMBER", "issuecomment", "NUMBER", "From", "a", "bird", "s", "eye", "view", "it", "looks", "like", "it", "would", "naturally", "fit", "the", "scenario", "NUMBER", "The", "idea", "seems", "good", "I", "didn", "t", "have", "the", "chance", "to", "try", "anything", "in", "this", "direction", "NUMBER", "But", "I", "think", "the", "change", "involved", "in", "your", "proposal", "would", "be", "pretty", "significant", "NUMBER", "I", "m", "also", "okay", "with", "merge", "the", "commit", "in", "its", "current", "form", "and", "then", "come", "later", "with", "a", "subsequent", "PR", "NUMBER", "AnishShah", "What", "do", "you", "think", "do", "you", "want", "to", "give", "it", "a", "shot", "with", "what", "acatangiu", "propose", "or", "do", "you", "want", "to", "let", "us", "try", "that", "later", "I", "just", "add", "NUMBER", "comments", "for", "the", "moment", "NUMBER", "They", "be", "nit", "ish", "NUMBER", "I", "be", "not", "sure", "about", "the", "unit", "test", "NUMBER", "It", "s", "a", "lot", "of", "code", "that", "has", "to", "be", "add", "just", "for", "test", "one", "small", "thing", "NUMBER", "I", "have", "to", "spend", "some", "more", "time", "thinking", "about", "it", "NUMBER", "Indeed", "there", "be", "a", "pretty", "big", "quantity", "of", "code", "for", "one", "small", "thing", "in", "the", "same", "place", "NUMBER", "One", "idea", "that", "pops", "in", "mind", "would", "be", "to", "move", "the", "code", "that", "do", "the", "general", "setup", "of", "the", "vmm", "i", "NUMBER", "e", "impl", "Vmm", "create_guest_workload", "create_device_managers", "in", "a", "test", "folder", "inside", "the", "vmm", "crate", "NUMBER", "That", "way", "we", "hopefully", "make", "this", "setup", "code", "reusable", "from", "multiple", "unit", "test", "NUMBER", "WDYT", "src", "vmm", "test", "mod", "NUMBER", "rs", "pub", "fn", "setup", "Vmm", "src", "vmm", "src", "controller", "NUMBER", "rs", "Vmm", "setup", "let", "mut", "vmm_controller", "VmmController", "new", "VmResources", "default", "Arc", "new", "Mutex", "new", "vmm", "We", "should", "keep", "in", "mind", "the", "unit", "test", "from", "builder", "NUMBER", "rs", "which", "test", "build", "a", "vmm", "but", "it", "do", "not", "run", "it", "NUMBER", "I", "think", "it", "be", "worth", "looking", "at", "these", "test", "because", "it", "might", "have", "common", "pieces", "NUMBER", "It", "feels", "like", "two", "pieces", "of", "work", "to", "me", "creating", "unit", "test", "for", "kvm", "dirty", "bitmap", "and", "common", "infrastructure", "for", "vmm", "crate", "unit", "test", "builder", "NUMBER", "rs", "and", "controller", "NUMBER", "rs", "specific", "so", "far", "NUMBER", "Or", "we", "can", "make", "this", "build", "block", "functionality", "for", "controller", "NUMBER", "rs", "unit", "test", "in", "this", "PR", "since", "this", "be", "the", "only", "thing", "relevant", "to", "it", "and", "track", "through", "an", "issue", "the", "part", "where", "we", "have", "to", "investigate", "if", "it", "be", "the", "case", "to", "use", "this", "unit", "test", "functionality", "in", "builder", "NUMBER", "rs", "as", "well", "NUMBER", "WDYT", "Segregate", "mandatory", "and", "optional", "argument", "properly", "NUMBER", "I", "m", "not", "sure", "how", "I", "d", "go", "about", "this", "but", "perhaps", "something", "like", "ssh", "help", "which", "translated", "to", "jailer", "would", "look", "like", "this", "jailer", "Jailer", "v", "NUMBER", "usage", "jailer", "chroot", "base", "dir", "directory", "path", "daemonize", "exec", "file", "path", "extra", "args", "args", "gid", "id", "id", "kek", "netns", "path", "node", "id", "uid", "id", "chroot", "base", "dir", "TAG", "The", "base", "folder", "where", "chroot", "jails", "be", "located", "NUMBER", "defaults", "to", "srv", "jailer", "daemonize", "Daemonize", "the", "jailer", "before", "exec", "by", "invoking", "setsid", "and", "redirecting", "the", "standard", "I", "O", "file", "descriptors", "to", "dev", "null", "NUMBER", "exec", "file", "TAG", "File", "path", "to", "exec", "into", "NUMBER", "extra", "args", "TAG", "Arguments", "that", "will", "be", "pass", "verbatim", "to", "the", "exec", "file", "NUMBER", "gid", "TAG", "The", "group", "identifier", "the", "jailer", "switches", "to", "after", "exec", "NUMBER", "help", "Show", "the", "help", "message", "NUMBER", "id", "TAG", "Jail", "ID", "NUMBER", "netns", "TAG", "Path", "to", "the", "network", "namespace", "this", "microVM", "should", "join", "NUMBER", "node", "TAG", "NUMA", "node", "to", "assign", "this", "microVM", "to", "NUMBER", "uid", "TAG", "The", "user", "identifier", "the", "jailer", "switches", "to", "after", "exec", "NUMBER", "Or", "like", "that", "jailer", "help", "Jailer", "v", "NUMBER", "Required", "argument", "exec", "file", "TAG", "File", "path", "to", "exec", "into", "NUMBER", "gid", "TAG", "The", "group", "identifier", "the", "jailer", "switches", "to", "after", "exec", "NUMBER", "id", "TAG", "Jail", "ID", "NUMBER", "node", "TAG", "NUMA", "node", "to", "assign", "this", "microVM", "to", "NUMBER", "uid", "TAG", "The", "user", "identifier", "the", "jailer", "switches", "to", "after", "exec", "NUMBER", "Optional", "argument", "chroot", "base", "dir", "TAG", "The", "base", "folder", "where", "chroot", "jails", "be", "located", "NUMBER", "defaults", "to", "srv", "jailer", "daemonize", "Daemonize", "the", "jailer", "before", "exec", "by", "invoking", "setsid", "and", "redirecting", "the", "standard", "I", "O", "file", "descriptors", "to", "dev", "null", "NUMBER", "extra", "args", "TAG", "Arguments", "that", "will", "be", "pass", "verbatim", "to", "the", "exec", "file", "NUMBER", "help", "Show", "the", "help", "message", "NUMBER", "netns", "TAG", "Path", "to", "the", "network", "namespace", "this", "microVM", "should", "join", "NUMBER", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Description", "of", "Changes", "Device", "access", "to", "guest", "memory", "on", "after", "activation", "Passing", "memory", "during", "device", "activation", "instead", "of", "during", "construction", "enable", "the", "following", "story", "NUMBER", "NUMBER", "NUMBER", "and", "finally", "NUMBER", "The", "change", "in", "this", "PR", "be", "in", "line", "with", "the", "model", "currently", "defined", "in", "LINK", "vmm", "vm", "virtio", "NUMBER", "They", "be", "also", "compatible", "with", "the", "LINK", "vmm", "vm", "virtio", "pull", "NUMBER", "proposal", "where", "memory", "be", "also", "pass", "to", "the", "device", "during", "activation", "rust", "Associated", "guest", "memory", "type", "M", "GuestMemory", "NUMBER", "Activates", "this", "device", "for", "real", "usage", "NUMBER", "The", "ownership", "of", "the", "VirtioDeviceConfig", "object", "moves", "into", "the", "VirtioDevice", "object", "if", "activate", "succeeds", "otherwise", "it", "should", "return", "the", "ownership", "back", "NUMBER", "fn", "activate", "mut", "self", "config", "VirtioDeviceConfig", "TAG", "ActivateResult", "TAG", "Events", "registration", "during", "activate", "Postpone", "external", "events", "registration", "to", "device", "activation", "time", "NUMBER", "This", "makes", "the", "block", "and", "net", "devices", "unaware", "of", "external", "events", "prior", "to", "their", "activation", "NUMBER", "During", "creation", "register", "a", "dedicated", "activation", "event", "which", "will", "notify", "the", "device", "when", "it", "s", "time", "to", "register", "the", "other", "external", "events", "sources", "NUMBER", "This", "activation", "event", "be", "unregistered", "after", "successful", "device", "activation", "NUMBER", "Coverage", "slightly", "decreased", "because", "untestable", "EventFd", "error", "cases", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Still", "need", "to", "add", "unit", "test", "for", "the", "new", "code", "NUMBER", "Tests", "add", "PR", "be", "complete", "NUMBER", "I", "agree", "with", "alexandruag", "that", "the", "current", "multi", "step", "configuration", "process", "introduces", "a", "complexity", "cost", "and", "imposes", "limitations", "on", "the", "Firecracker", "design", "that", "far", "outweigh", "any", "benefits", "it", "brings", "in", "a", "production", "scenario", "NUMBER", "Unfortunately", "like", "Alex", "mention", "remove", "the", "multi", "step", "configuration", "be", "a", "breaking", "change", "in", "terms", "of", "API", "and", "usage", "patterns", "and", "needs", "research", "and", "buy", "in", "from", "customers", "users", "of", "Firecracker", "before", "we", "can", "do", "it", "NUMBER", "In", "the", "meantime", "we", "should", "move", "forward", "with", "the", "change", "in", "this", "PR", "as", "their", "blast", "radius", "be", "very", "small", "and", "revert", "the", "way", "memory", "be", "pass", "to", "the", "device", "can", "be", "easily", "do", "in", "the", "future", "NUMBER", "By", "that", "time", "we", "might", "even", "have", "an", "agreed", "upon", "interface", "in", "rust", "vmm", "that", "we", "can", "also", "adhere", "to", "NUMBER", "One", "other", "solution", "would", "be", "a", "src", "utils", "src", "arg_parser", "NUMBER", "rs", "b", "src", "utils", "src", "arg_parser", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "impl", "TAG", "Argument", "TAG", "the", "argument", "takes", "a", "value", "or", "bool", "if", "it", "s", "a", "flag", "NUMBER", "derive", "Clone", "Debug", "PartialEq", "pub", "enum", "Value", "Bool", "bool", "Bool", "String", "String", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "impl", "Value", "fn", "as_bool", "self", "Option", "TAG", "fn", "as_bool", "self", "bool", "match", "self", "Value", "Bool", "b", "Some", "b", "_", "None", "Value", "Bool", "true", "_", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "impl", "TAG", "Arguments", "TAG", "NUMBER", "and_then", "arg_value", "arg_value", "NUMBER", "as_string", "Return", "the", "value", "of", "an", "argument", "if", "the", "argument", "exists", "and", "has", "the", "type", "bool", "NUMBER", "Otherwise", "return", "None", "NUMBER", "pub", "fn", "value_as_bool", "self", "arg_name", "static", "str", "Option", "TAG", "Return", "whether", "the", "argument", "exists", "and", "has", "the", "type", "bool", "NUMBER", "pub", "fn", "value_as_bool", "self", "arg_name", "static", "str", "bool", "self", "NUMBER", "value_of", "arg_name", "NUMBER", "and_then", "arg_value", "arg_value", "NUMBER", "as_bool", "NUMBER", "map_or", "false", "arg_value", "arg_value", "NUMBER", "as_bool", "There", "s", "no", "point", "in", "having", "Option", "TAG", "NUMBER", "A", "param", "be", "either", "there", "as", "Some", "Value", "Bool", "or", "it", "s", "not", "NUMBER", "The", "value", "would", "be", "encoded", "in", "the", "type", "Or", "instead", "of", "use", "a", "hierarchy", "of", "Option", "TAG", "you", "could", "use", "flatten", "it", "in", "a", "single", "enum", "NUMBER", "Something", "like", "rust", "pub", "enum", "ArgValue", "NotPresent", "Present", "PresentWithValue", "String", "pub", "struct", "Argument", "TAG", "name", "a", "str", "required", "bool", "requires", "Option", "TAG", "takes_value", "bool", "default_value", "ArgValue", "help", "Option", "TAG", "user_value", "ArgValue", "Which", "also", "simplifies", "things", "and", "be", "also", "_not", "weird_", "like", "the", "previous", "suggestion", "I", "agree", "with", "andreeaflorescu", "that", "values_as_bool", "should", "still", "be", "able", "to", "return", "None", "but", "I", "was", "thinking", "hoping", "that", "we", "could", "still", "support", "this", "with", "the", "ArgValue", "enum", "NUMBER", "Present", "and", "NotPresent", "be", "the", "Option", "TAG", "in", "Rust", "so", "I", "don", "t", "think", "we", "should", "redefine", "that", "NUMBER", "Option", "be", "an", "enum", "with", "two", "variants", "our", "params", "have", "at", "least", "three", "state", "NUMBER", "not", "present", "NUMBER", "present", "takes", "no", "value", "NUMBER", "present", "takes", "value", "You", "could", "even", "extend", "it", "to", "define", "the", "value", "type", "at", "the", "same", "level", "rust", "enum", "ArgState", "NotPreset", "NoValue", "Value", "String", "Value", "usize", "etc", "Option", "TAG", "means", "a", "table", "of", "NUMBER", "x", "sizeof", "X", "state", "NUMBER", "The", "problem", "be", "some", "of", "the", "state", "modeled", "use", "the", "Option", "TAG", "don", "t", "make", "sense", "like", "you", "rightly", "discover", "and", "which", "led", "to", "open", "this", "issue", "NUMBER", "instead", "of", "write", "no", "api", "you", "write", "noapi", "in", "the", "code", "by", "mistake", "Solving", "for", "this", "case", "use", "the", "Option", "TAG", "be", "a", "mess", "for", "example", "Sounds", "good", "to", "me", "I", "like", "the", "idea", "too", "Still", "thinking", "about", "other", "name", "for", "ArgumentWithValue", "but", "no", "success", "so", "far", "NUMBER", "Maybe", "NamedArgument", "but", "it", "s", "not", "very", "suggestive", "though", "NUMBER", "Yep", "but", "apparently", "that", "be", "a", "word", "that", "be", "use", "for", "argument", "that", "take", "values", "sweat_smile", "NUMBER", "But", "nevermind", "it", "s", "not", "suggestive", "I", "don", "t", "like", "it", "either", "NUMBER", "Firecracker", "now", "uses", "vm", "memory", "version", "NUMBER", "features", "backend", "mmap", "NUMBER", "Uh", "ok", "I", "miss", "the", "BytedValue", "part", "NUMBER", "IMO", "we", "need", "more", "visibility", "for", "it", "it", "kind", "of", "get", "lost", "in", "this", "issue", "so", "yes", "I", "think", "it", "would", "be", "better", "to", "open", "a", "separate", "issue", "for", "this", "NUMBER", "Thanks", "lauralt", "I", "ve", "address", "your", "comments", "PTAL", "NUMBER", "lauralt", "acatangiu", "PTAL", "I", "ve", "address", "your", "comments", "NUMBER", "acatan", "lauralt", "I", "ve", "address", "your", "comments", "Please", "take", "a", "look", "again", "NUMBER", "If", "I", "be", "not", "wrong", "this", "can", "be", "do", "with", "an", "one", "line", "fix", "in", "which", "we", "remove", "the", "line", "with", "the", "log", "NUMBER", "firecracker", "microvm", "compute", "capsule", "WDYT", "Yes", "and", "also", "check", "all", "other", "events", "on", "all", "devices", "for", "similar", "log", "message", "logging", "be", "slow", "and", "shouldn", "t", "happen", "on", "hotpaths", "like", "this", "NUMBER", "Like", "raduiliescu", "said", "metrics", "be", "enough", "for", "such", "cases", "NUMBER", "Other", "option", "would", "be", "to", "implement", "log", "ratelimit", "functionality", "as", "in", "linux", "kernel", "LINK", "L", "NUMBER", "Would", "be", "great", "to", "add", "this", "to", "our", "logger", "not", "part", "of", "this", "issue", "though", "NUMBER", "Hi", "tnotw", "thanks", "for", "the", "contribution", "Over", "time", "we", "ve", "had", "a", "few", "request", "to", "provide", "an", "automate", "rootfs", "generation", "script", "so", "we", "re", "excited", "to", "see", "this", "PR", "NUMBER", "We", "ll", "try", "to", "do", "an", "in", "depth", "review", "some", "time", "this", "week", "NUMBER", "Hey", "tnotw", "As", "serban", "NUMBER", "said", "having", "a", "tool", "that", "build", "rootfs", "images", "brings", "a", "lot", "of", "value", "NUMBER", "Closing", "the", "PR", "it", "was", "not", "something", "that", "we", "had", "in", "mind", "NUMBER", "We", "can", "still", "push", "forward", "with", "this", "PR", "but", "it", "will", "need", "some", "update", "NUMBER", "It", "has", "to", "be", "linked", "to", "an", "issue", "which", "explains", "the", "nature", "of", "the", "contribution", "NUMBER", "A", "simple", "rootfs", "build", "tool", "proposal", "issue", "might", "be", "enough", "NUMBER", "What", "do", "you", "think", "There", "be", "some", "useful", "info", "as", "far", "as", "rootfs", "creation", "tool", "here", "LINK", "microvm", "firecracker", "issue", "NUMBER", "NUMBER", "Hey", "tnotw", "As", "serban", "NUMBER", "said", "having", "a", "tool", "that", "build", "rootfs", "images", "brings", "a", "lot", "of", "value", "NUMBER", "Closing", "the", "PR", "it", "was", "not", "something", "that", "we", "had", "in", "mind", "NUMBER", "We", "can", "still", "push", "forward", "with", "this", "PR", "but", "it", "will", "need", "some", "update", "NUMBER", "It", "has", "to", "be", "linked", "to", "an", "issue", "which", "explains", "the", "nature", "of", "the", "contribution", "NUMBER", "A", "simple", "rootfs", "build", "tool", "proposal", "issue", "might", "be", "enough", "NUMBER", "What", "do", "you", "think", "There", "be", "some", "useful", "info", "as", "far", "as", "rootfs", "creation", "tool", "here", "LINK", "microvm", "firecracker", "issue", "NUMBER", "NUMBER", "I", "think", "this", "PR", "be", "a", "step", "which", "precedes", "the", "work", "needed", "for", "NUMBER", "NUMBER", "It", "be", "relate", "nevertheless", "NUMBER", "Hi", "thepwagner", "Sorry", "to", "hear", "you", "stumbled", "upon", "trouble", "NUMBER", "I", "will", "try", "to", "replicate", "this", "issue", "and", "dig", "into", "the", "problem", "NUMBER", "I", "understand", "the", "API", "socket", "do", "not", "appear", "for", "the", "hanging", "microVM", "so", "when", "you", "say", "VMM", "logs", "be", "you", "referring", "to", "the", "dmesg", "logs", "thepwagner", "unfortunately", "I", "was", "not", "able", "to", "replicate", "the", "behavior", "NUMBER", "What", "I", "did", "though", "was", "go", "through", "the", "commit", "between", "NUMBER", "and", "NUMBER", "and", "try", "to", "spot", "that", "those", "commit", "that", "could", "trigger", "the", "behavior", "you", "describe", "NUMBER", "Could", "you", "please", "test", "this", "branch", "LINK", "I", "created", "for", "you", "and", "let", "me", "know", "if", "the", "behavior", "still", "replicates", "The", "branch", "mirrors", "v", "NUMBER", "without", "commit", "NUMBER", "a", "NUMBER", "a", "NUMBER", "ac", "NUMBER", "ccda", "NUMBER", "b", "NUMBER", "b", "NUMBER", "Looking", "forward", "to", "the", "result", "It", "be", "already", "add", "to", "vmm", "sys", "util", "LINK", "vmm", "vmm", "sys", "util", "pull", "NUMBER", "but", "we", "must", "wait", "for", "a", "new", "release", "to", "be", "able", "to", "use", "it", "NUMBER", "Reason", "for", "This", "PR", "This", "fix", "a", "race", "during", "config", "pre", "boot", "phase", "where", "the", "VMM", "thread", "reads", "this", "event_fd", "before", "API", "thread", "gets", "the", "chance", "to", "increment", "it", "NUMBER", "Description", "of", "Changes", "The", "API", "event_fd", "be", "use", "by", "the", "API", "thread", "to", "signal", "the", "VMM", "thread", "that", "it", "has", "pending", "message", "NUMBER", "During", "config", "pre", "boot", "phase", "this", "event_fd", "be", "use", "in", "a", "simple", "blocking", "loop", "that", "waits", "for", "an", "API", "event", "then", "processes", "the", "request", "NUMBER", "To", "keep", "this", "scenario", "simple", "make", "the", "event_fd", "a", "blocking", "event_fd", "NUMBER", "During", "runtime", "post", "boot", "phase", "the", "event_fd", "be", "registered", "with", "polly", "alongside", "multiple", "other", "events", "from", "multiple", "sources", "and", "be", "only", "read", "when", "EPOLLIN", "be", "report", "on", "it", "NUMBER", "Having", "it", "as", "a", "blocking", "event_fd", "be", "safe", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "stefannita", "NUMBER", "Please", "sign", "your", "commit", "git", "commit", "s", "amend", "NUMBER", "There", "be", "a", "typo", "in", "the", "commit", "title", "maintaners", "NUMBER", "md", "maintainers", "NUMBER", "md", "NUMBER", "I", "do", "think", "there", "be", "some", "potential", "scenarios", "that", "vmm", "src", "lib", "NUMBER", "rs", "should", "get", "unit", "test", "ci", "test", "against", "Unit", "test", "get_bus_device", "device_type", "DeviceType", "device_id", "str", "isn", "t", "it", "worth", "it", "to", "test", "that", "not", "registering", "a", "device_type", "id", "tuple", "would", "make", "this", "function", "return", "None", "Or", "also", "what", "about", "make", "sure", "that", "registering", "a", "net", "device", "with", "the", "same", "id", "as", "a", "block", "device", "works", "correctly", "guest_memory", "why", "not", "test", "that", "it", "be", "actually", "returns", "what", "we", "configured", "pub", "fn", "kvm_vm", "self", "be", "not", "use", "at", "all", "CI", "Are", "metrics", "flushed", "upon", "pub", "fn", "stop", "mut", "self", "exit_code", "i", "NUMBER", "Does", "configure_system", "fail", "if", "there", "be", "not", "enough", "memory", "to", "setup", "the", "mptable", "I", "do", "think", "there", "be", "some", "potential", "scenarios", "that", "vmm", "src", "lib", "NUMBER", "rs", "should", "get", "unit", "test", "ci", "test", "against", "Unit", "test", "get_bus_device", "device_type", "DeviceType", "device_id", "str", "isn", "t", "it", "worth", "it", "to", "test", "that", "not", "registering", "a", "device_type", "id", "tuple", "would", "make", "this", "function", "return", "None", "Or", "also", "what", "about", "make", "sure", "that", "registering", "a", "net", "device", "with", "the", "same", "id", "as", "a", "block", "device", "works", "correctly", "Testing", "this", "unit", "means", "test", "the", "MmioDeviceManager", "get_bus_device", "because", "it", "be", "a", "wrapper", "which", "do", "not", "have", "any", "relate", "logic", "which", "be", "covered", "by", "device_manager", "mmio", "NUMBER", "rs", "test_device_info", "unit", "test", "NUMBER", "I", "genuinely", "do", "no", "think", "it", "would", "bring", "any", "value", "to", "have", "a", "unit", "test", "for", "this", "function", "NUMBER", "guest_memory", "why", "not", "test", "that", "it", "be", "actually", "returns", "what", "we", "configured", "pub", "fn", "kvm_vm", "self", "be", "not", "use", "at", "all", "Unit", "test", "for", "getters", "if", "they", "do", "not", "have", "any", "complex", "logic", "it", "would", "require", "enough", "effort", "just", "for", "nothing", "in", "my", "opinion", "NUMBER", "I", "ve", "excluded", "them", "from", "the", "report", "NUMBER", "just", "because", "they", "lack", "any", "relate", "logic", "that", "would", "bring", "value", "for", "a", "unit", "test", "NUMBER", "CI", "Are", "metrics", "flushed", "upon", "pub", "fn", "stop", "mut", "self", "exit_code", "i", "NUMBER", "I", "think", "this", "be", "a", "scenario", "that", "can", "be", "test", "inside", "an", "integration", "test", "NUMBER", "I", "will", "add", "an", "integration", "test", "for", "this", "NUMBER", "Does", "configure_system", "fail", "if", "there", "be", "not", "enough", "memory", "to", "setup", "the", "mptable", "vmm", "lib", "NUMBER", "rs", "configure_system", "be", "a", "wrapper", "over", "arch_", "configure_system", "without", "any", "relate", "logic", "to", "it", "besides", "effective", "calls", "to", "arch_", "configure_system", "NUMBER", "Testing", "it", "for", "NotEnoughMemory", "for", "mptable", "means", "test", "configure_system", "from", "arch", "x", "NUMBER", "_", "NUMBER", "NUMBER", "This", "be", "already", "covered", "in", "unit", "test", "NUMBER", "I", "be", "not", "on", "the", "same", "page", "here", "regard", "not", "make", "sense", "to", "test", "simple", "bits", "of", "code", "NUMBER", "Unit", "test", "be", "not", "made", "only", "for", "complex", "units", "NUMBER", "Testing", "a", "getter", "ensures", "that", "the", "getter", "stays", "a", "getter", "NUMBER", "Unit", "test", "should", "also", "be", "seen", "as", "an", "extra", "layer", "of", "protection", "against", "malicious", "or", "unintentional", "mistakes", "in", "PRs", "NUMBER", "I", "be", "not", "on", "the", "same", "page", "here", "regard", "not", "make", "sense", "to", "test", "simple", "bits", "of", "code", "NUMBER", "Unit", "test", "be", "not", "made", "only", "for", "complex", "units", "NUMBER", "Testing", "a", "getter", "ensures", "that", "the", "getter", "stays", "a", "getter", "NUMBER", "Unit", "test", "should", "also", "be", "seen", "as", "an", "extra", "layer", "of", "protection", "against", "malicious", "or", "unintentional", "mistakes", "in", "PRs", "NUMBER", "I", "agree", "with", "you", "that", "you", "generally", "want", "to", "test", "even", "the", "simple", "bits", "of", "code", "NUMBER", "In", "this", "particular", "usecase", "test", "the", "Vmm", "requires", "a", "lot", "of", "setup", "and", "comes", "with", "test", "that", "be", "hard", "to", "maintain", "NUMBER", "The", "value", "add", "by", "test", "setters", "and", "getters", "tends", "to", "fade", "away", "when", "taking", "into", "consideration", "the", "long", "time", "required", "for", "maintaining", "the", "test", "and", "their", "setup", "NUMBER", "I", "think", "it", "makes", "more", "sense", "to", "invest", "this", "time", "in", "write", "integration", "test", "NUMBER", "WDYT", "I", "think", "we", "should", "invest", "time", "in", "write", "integration", "test", "regardless", "of", "whether", "we", "write", "unit", "test", "for", "the", "vmm", "or", "not", "NUMBER", "As", "far", "as", "my", "concern", "no", "exception", "should", "be", "made", "as", "far", "as", "unit", "test", "NUMBER", "It", "be", "a", "dangerous", "direction", "to", "start", "be", "subjective", "about", "what", "you", "unit", "test", "and", "what", "you", "do", "not", "NUMBER", "Unit", "test", "should", "exercise", "exactly", "a", "single", "method", "from", "a", "public", "API", "regardless", "of", "what", "it", "be", "build", "upon", "or", "what", "calls", "it", "NUMBER", "That", "be", "why", "declaring", "the", "impl", "vmm", "as", "unit", "test", "be", "wrong", "IMO", "NUMBER", "However", "this", "PR", "can", "go", "through", "NUMBER", "Hi", "KarthikNedunchezhiyan", "can", "you", "describe", "the", "change", "The", "current", "commit", "touches", "different", "components", "without", "a", "clear", "purpose", "or", "description", "NUMBER", "On", "the", "ratelimiter", "change", "for", "example", "I", "see", "that", "you", "simplified", "the", "calculations", "there", "but", "at", "the", "expense", "of", "higher", "risk", "of", "operation", "overflows", "NUMBER", "Please", "provide", "some", "explanations", "on", "how", "be", "the", "change", "impacting", "behavior", "and", "why", "when", "be", "they", "safe", "for", "example", "what", "be", "the", "minimum", "for", "an", "overflow", "with", "the", "old", "code", "and", "the", "new", "be", "it", "something", "that", "be", "practically", "impossible", "or", "be", "it", "likely", "On", "the", "partuuid", "change", "I", "see", "you", "remove", "a", "block", "of", "code", "but", "there", "be", "nothing", "that", "replaces", "it", "was", "that", "logic", "duplicate", "somewhere", "To", "be", "honest", "I", "didn", "t", "dive", "deep", "in", "the", "code", "to", "understand", "the", "implications", "of", "this", "PR", "but", "ideally", "the", "commit", "and", "PR", "descriptions", "should", "explain", "things", "at", "least", "at", "a", "high", "level", "NUMBER", "Please", "update", "the", "commit", "description", "as", "well", "the", "commit", "description", "be", "the", "real", "change", "history", "log", "NUMBER", "KarthikNedunchezhiyan", "be", "you", "interested", "in", "contribute", "with", "a", "fix", "to", "this", "issue", "We", "can", "discuss", "a", "strategy", "together", "if", "that", "s", "the", "case", "NUMBER", "Actually", "thinking", "about", "this", "more", "I", "think", "we", "don", "t", "even", "need", "such", "a", "check", "NUMBER", "Having", "a", "root", "device", "or", "not", "be", "an", "optional", "use", "case", "specific", "choice", "NUMBER", "For", "example", "users", "of", "Firecracker", "which", "boot", "unikernels", "might", "not", "want", "any", "block", "device", "NUMBER", "I", "believe", "the", "current", "Firecracker", "behavior", "of", "not", "enforcing", "such", "requirements", "be", "actually", "the", "correct", "one", "NUMBER", "Closing", "this", "NUMBER", "Anyone", "feel", "free", "to", "open", "if", "needed", "NUMBER", "I", "did", "experiment", "these", "failures", "myself", "NUMBER", "The", "MuxerTestContext", "the", "one", "binding", "to", "the", "uds_path", "has", "Drop", "implement", "which", "deletes", "this", "path", "so", "in", "theory", "we", "should", "never", "have", "to", "deal", "with", "these", "failures", "NUMBER", "The", "LocalListener", "the", "one", "that", "listens", "on", "uds_path_port", "also", "has", "a", "Drop", "implement", "that", "deletes", "the", "path", "on", "which", "it", "listened", "for", "connections", "NUMBER", "It", "would", "be", "interesting", "to", "see", "why", "these", "test", "fail", "even", "if", "in", "theory", "the", "paths", "use", "across", "the", "test", "be", "remove", "NUMBER", "One", "other", "thing", "I", "notice", "for", "me", "there", "be", "one", "test", "that", "fail", "every", "time", "test_muxer_killq", "NUMBER", "IMO", "this", "will", "affect", "debugability", "by", "less", "detailed", "or", "useless", "backtraces", "but", "it", "should", "not", "affect", "any", "functionality", "NUMBER", "I", "be", "not", "sure", "if", "it", "be", "possible", "with", "rust", "but", "if", "it", "s", "do", "at", "compile", "time", "it", "can", "boost", "performance", "NUMBER", "Closing", "this", "issue", "as", "we", "yet", "have", "no", "indicators", "of", "relevant", "positive", "gains", "which", "would", "result", "from", "stripping", "the", "firecracker", "release", "binary", "NUMBER", "We", "can", "reopen", "if", "needed", "later", "NUMBER", "NUMBER", "Can", "you", "please", "update", "the", "commit", "message", "to", "not", "exceed", "NUMBER", "characters", "line", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Description", "of", "Changes", "Some", "small", "change", "to", "the", "VirtioDevice", "trait", "interface", "The", "VirtioDevice", "trait", "can", "work", "with", "references", "instead", "of", "owned", "objects", "for", "Queues", "and", "QueueEvents", "so", "no", "cloning", "be", "necessary", "NUMBER", "Also", "use", "slice", "references", "instead", "of", "owned", "Vecs", "NUMBER", "For", "a", "short", "while", "we", "were", "also", "use", "activate", "reset", "and", "set_device_activated", "NUMBER", "This", "moves", "all", "devices", "and", "test", "to", "use", "activate", "reset", "to", "activate", "respectivelly", "reset", "a", "VirtioDevice", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "What", "do", "you", "think", "if", "we", "handle", "the", "events", "registration", "after", "activation", "for", "block", "and", "net", "devices", "like", "vsock", "do", "With", "the", "vsock", "pattern", "of", "events", "registration", "we", "do", "not", "register", "the", "queue", "backend", "rate", "limiters", "events", "until", "the", "activation", "but", "only", "after", "NUMBER", "We", "wouldn", "t", "need", "to", "have", "the", "corresponding", "checks", "inside", "handle_read", "of", "net", "and", "block", "devices", "and", "the", "actual", "event", "handle", "flow", "will", "seem", "more", "natural", "IMO", "NUMBER", "We", "could", "do", "that", "definitely", "in", "a", "separate", "PR", "but", "it", "d", "require", "a", "two", "step", "event", "registration", "process", "like", "vsock", "do", "NUMBER", "register", "an", "activate", "event", "NUMBER", "on", "receipt", "of", "an", "activate", "event", "we", "register", "the", "other", "events", "NUMBER", "It", "d", "be", "formally", "cleaner", "but", "I", "don", "t", "have", "any", "problem", "with", "the", "current", "flow", "either", "NUMBER", "Hey", "nspin", "NUMBER", "We", "haven", "t", "try", "run", "on", "qemu", "system", "aarch", "NUMBER", "machine", "virt", "NUMBER", "We", "will", "start", "investigate", "this", "most", "likely", "on", "Monday", "and", "post", "our", "findings", "here", "NUMBER", "Pennyzct", "The", "code", "coverage", "integration", "test", "be", "fail", "right", "now", "NUMBER", "Can", "you", "please", "update", "the", "target", "value", "from", "test_coverage", "NUMBER", "py", "with", "the", "current", "value", "NUMBER", "because", "unfortunately", "the", "newly", "add", "lines", "can", "not", "be", "test", "properly", "Hi", "lauralt", "andreeaflorescu", "Pennyzct", "can", "you", "please", "update", "test_parse", "with", "a", "test", "also", "for", "version", "argument", "I", "ve", "already", "update", "test_parse", "with", "a", "new", "test", "for", "version", "argument", "NUMBER", "And", "a", "little", "bit", "more", "since", "we", "use", "clone", "to", "acquire", "the", "argument", "we", "probably", "don", "t", "need", "to", "build_arg_parser", "every", "time", "for", "each", "small", "test", "union", "just", "the", "one", "in", "the", "beginning", "be", "enough", "NUMBER", "Nice", "catch", "Pennyzct", "The", "code", "coverage", "integration", "test", "be", "fail", "right", "now", "NUMBER", "Can", "you", "please", "update", "the", "target", "value", "from", "test_coverage", "NUMBER", "py", "with", "the", "current", "value", "NUMBER", "because", "unfortunately", "the", "newly", "add", "lines", "can", "not", "be", "test", "properly", "thanks", "for", "the", "debugging", "NUMBER", "NUMBER", "Since", "we", "add", "test", "for", "the", "version", "arg", "the", "coverage", "test", "may", "not", "fail", "If", "it", "still", "fail", "I", "ll", "then", "edit", "the", "value", "target", "accordingly", "NUMBER", "Pennyzct", "Can", "you", "please", "resolve", "the", "conflict", "and", "do", "another", "push", "f", "Solved", "by", "patch", "release", "NUMBER", "We", "should", "check", "that", "we", "didn", "t", "introduce", "regressions", "by", "switching", "to", "the", "new", "EventManager", "implementation", "NUMBER", "This", "reddit", "thread", "LINK", "_there_any_guides_on_countermeasures_against", "contains", "several", "pointers", "that", "rustc", "can", "pass", "to", "LLVM", "for", "hardening", "purposes", "x", "NUMBER", "slh", "fence", "call", "and", "ret", "Use", "a", "full", "speculation", "fence", "to", "harden", "both", "call", "and", "ret", "edges", "rather", "than", "a", "lighter", "weight", "mitigation", "NUMBER", "x", "NUMBER", "slh", "indirect", "Harden", "indirect", "calls", "and", "jumps", "against", "use", "speculatively", "stored", "attacker", "controlled", "address", "NUMBER", "This", "be", "designed", "to", "mitigate", "Spectre", "v", "NUMBER", "style", "attacks", "NUMBER", "x", "NUMBER", "slh", "ip", "Harden", "interprocedurally", "by", "passing", "our", "state", "in", "and", "out", "of", "function", "in", "the", "high", "bits", "of", "the", "stack", "pointer", "NUMBER", "x", "NUMBER", "slh", "lfence", "Use", "LFENCE", "along", "each", "conditional", "edge", "to", "harden", "against", "speculative", "loads", "rather", "than", "conditional", "movs", "and", "poisoned", "pointers", "NUMBER", "x", "NUMBER", "slh", "loads", "Sanitize", "loads", "from", "memory", "NUMBER", "When", "disable", "no", "significant", "security", "be", "provide", "NUMBER", "x", "NUMBER", "slh", "post", "load", "Harden", "the", "value", "loaded", "after", "it", "be", "loaded", "by", "flushing", "the", "loaded", "bits", "to", "NUMBER", "This", "be", "hard", "to", "do", "in", "general", "but", "can", "be", "do", "easily", "for", "GPRs", "NUMBER", "x", "NUMBER", "speculative", "load", "hardening", "Force", "enable", "speculative", "load", "hardening", "The", "impact", "on", "performance", "should", "be", "evaluated", "in", "the", "hardened", "binary", "NUMBER", "Hey", "Zyqsempai", "NUMBER", "We", "be", "not", "yet", "decided", "how", "we", "want", "to", "implement", "this", "and", "it", "might", "require", "change", "to", "our", "CI", "pipelines", "NUMBER", "Are", "you", "interested", "in", "contribute", "to", "another", "issue", "If", "you", "ping", "me", "on", "Slack", "email", "we", "can", "find", "something", "else", "NUMBER", "The", "test", "actually", "correctly", "pass", "consistently", "NUMBER", "But", "sporadically", "it", "can", "be", "seen", "in", "test", "output", "that", "Vcpu", "threads", "crash", "instead", "of", "finishing", "cleanly", "which", "be", "expected", "when", "the", "main", "thread", "goes", "out", "of", "scope", "at", "the", "end", "of", "the", "test", "NUMBER", "While", "the", "current", "behavior", "be", "not", "necessarily", "incorrect", "it", "s", "ugly", "NUMBER", "We", "can", "make", "it", "so", "all", "threads", "finish", "cleanly", "NUMBER", "In", "Firecracker", "master", "we", "use", "different", "exit", "code", "for", "bad", "configuration", "and", "invalid", "json", "NUMBER", "In", "this", "merge", "the", "error", "code", "be", "unified", "and", "we", "just", "use", "bad", "configuration", "NUMBER", "I", "assume", "it", "be", "easier", "to", "always", "exit", "with", "bad", "configuration", "since", "VmResources", "from_json", "can", "now", "exit", "with", "error", "when", "the", "json", "be", "invalid", "or", "when", "configuring", "the", "resources", "fail", "NUMBER", "In", "case", "this", "change", "be", "intentional", "should", "we", "also", "update", "the", "changelog", "to", "specify", "that", "an", "invalid", "configuration", "will", "cause", "Firecracker", "to", "exit", "with", "NUMBER", "as", "oppose", "to", "NUMBER", "It", "looks", "like", "not", "all", "the", "change", "from", "f", "NUMBER", "LINK", "microvm", "firecracker", "commit", "f", "NUMBER", "a", "NUMBER", "e", "NUMBER", "ecba", "NUMBER", "ea", "NUMBER", "ff", "NUMBER", "fd", "NUMBER", "df", "NUMBER", "d", "NUMBER", "ended", "up", "in", "this", "rebase", "NUMBER", "Specifically", "we", "be", "loosing", "the", "ability", "to", "specify", "a", "different", "seccomp", "filter", "for", "VMM", "and", "for", "the", "vcpus", "NUMBER", "What", "didn", "t", "make", "it", "exactly", "We", "should", "be", "able", "to", "specify", "different", "filters", "for", "each", "thread", "now", "we", "still", "specify", "the", "same", "cloned", "filter", "set", "but", "the", "capability", "for", "independent", "sets", "should", "be", "there", "NUMBER", "We", "synced", "on", "this", "offline", "NUMBER", "On", "the", "master", "branch", "the", "Vmm", "would", "allow", "setting", "different", "seccomp", "filters", "on", "the", "vmm", "and", "vcpu", "threads", "through", "its", "public", "interface", "NUMBER", "The", "functionality", "was", "call", "through", "the", "public", "function", "start_microvm", "which", "received", "as", "parameters", "NUMBER", "filters", "one", "for", "vmm", "and", "one", "for", "the", "vcpus", "NUMBER", "Since", "start_microvm", "no", "longer", "exists", "and", "the", "start_vcpu", "function", "that", "allows", "setting", "up", "custom", "seccomp", "filters", "be", "private", "setting", "up", "different", "seccomp", "filters", "outside", "of", "the", "Vmm", "be", "not", "possible", "NUMBER", "Since", "there", "be", "other", "interface", "change", "required", "we", "ll", "do", "these", "all", "at", "once", "in", "a", "future", "PR", "NUMBER", "Hi", "christian", "NUMBER", "NUMBER", "We", "be", "currently", "trying", "to", "reach", "a", "decision", "about", "this", "issue", "with", "the", "team", "NUMBER", "There", "be", "NUMBER", "problem", "that", "we", "need", "to", "figure", "out", "users", "of", "the", "config", "file", "feature", "will", "not", "be", "given", "the", "chance", "to", "tweak", "any", "cgroup", "associated", "file", "and", "we", "still", "need", "to", "decide", "if", "still", "want", "to", "offer", "this", "as", "a", "feature", "or", "we", "treat", "this", "as", "a", "bug", "NUMBER", "Your", "main", "use", "case", "be", "to", "be", "able", "to", "assign", "CPUs", "but", "without", "enforcing", "memory", "allocation", "which", "numa", "node", "be", "implicitly", "doing", "correct", "me", "if", "I", "be", "wrong", "NUMBER", "I", "understand", "you", "tried", "to", "solve", "this", "by", "overriding", "cpuset", "NUMBER", "cpu", "and", "cpuset", "NUMBER", "mems", "and", "it", "did", "not", "work", "NUMBER", "Do", "you", "know", "why", "it", "did", "not", "work", "Looking", "forward", "to", "your", "answer", "NUMBER", "christian", "NUMBER", "we", "re", "hosting", "a", "_Community", "Office", "Hours_", "meeting", "on", "Thursday", "more", "details", "on", "our", "slack", "channel", "LINK", "microvm", "NUMBER", "slack", "NUMBER", "com", "archives", "CDL", "NUMBER", "FUR", "NUMBER", "B", "p", "NUMBER", "NUMBER", "It", "would", "be", "great", "if", "you", "could", "join", "that", "so", "we", "discuss", "this", "issue", "live", "and", "find", "a", "suitable", "solution", "NUMBER", "If", "you", "can", "t", "attend", "the", "office", "hours", "meeting", "let", "us", "know", "and", "maybe", "we", "can", "set", "up", "another", "dedicated", "call", "NUMBER", "Issue", "was", "solve", "by", "change", "in", "the", "CI", "framework", "NUMBER", "Should", "we", "just", "remove", "some", "of", "the", "linters", "This", "could", "be", "a", "duplicate", "of", "NUMBER", "Duplicate", "of", "NUMBER", "Our", "setup", "of", "cache", "topology", "at", "least", "on", "x", "NUMBER", "_", "NUMBER", "be", "kinda", "dummy", "NUMBER", "At", "the", "end", "of", "the", "Automated", "Performance", "TestingFor", "Virtualization", "with", "MMTests", "LINK", "_automated_performance_testing_virtualization", "attachments", "slides", "NUMBER", "export", "events", "attachments", "testing_automated_performance_testing_virtualization", "slides", "NUMBER", "Automated_Performance_Testing_for_Virtualization_with_MMTests", "NUMBER", "pdf", "there", "be", "some", "slides", "with", "performance", "benchmarks", "where", "they", "show", "the", "difference", "between", "host", "VM", "with", "no", "topology", "VM", "with", "topology", "and", "VM", "with", "a", "tuned", "topology", "NUMBER", "We", "should", "measure", "this", "in", "Firecracker", "as", "well", "and", "see", "if", "we", "should", "also", "tweak", "our", "cache", "topology", "NUMBER", "We", "be", "currently", "investigating", "frequent", "failures", "seen", "in", "test_multiple_microvm_boottime_no_network", "and", "or", "test_multiple_microvm_boottime_with_network", "NUMBER", "gc", "plp", "please", "post", "here", "the", "results", "of", "the", "invstigation", "NUMBER", "NUMBER", "fix", "most", "of", "the", "failures", "but", "I", "think", "there", "still", "be", "some", "elusive", "ones", "NUMBER", "Closing", "this", "for", "now", "we", "can", "reopen", "when", "someone", "sights", "Bigfoot", "again", "NUMBER", "Update", "on", "this", "NUMBER", "Worked", "with", "iulianbarbu", "and", "identified", "the", "code", "paths", "that", "be", "not", "test", "as", "follows", "MMIO", "VirtioDevice", "implementation", "for", "Net", "some", "function", "BlockDeviceConfig", "NetDeviceConfig", "These", "will", "be", "test", "in", "a", "subsequent", "PR", "NUMBER", "We", "also", "looked", "at", "the", "builder", "function", "that", "can", "be", "test", "in", "a", "meaningful", "way", "and", "we", "agreed", "on", "the", "following", "create_vcpus_", "attach_", "_devices", "For", "the", "rest", "we", "can", "only", "have", "coverage", "test", "and", "some", "of", "them", "actually", "come", "with", "the", "disadvantage", "that", "it", "makes", "it", "impossible", "to", "run", "the", "test", "in", "parallel", "in", "the", "future", "NUMBER", "kzys", "My", "problem", "be", "with", "how", "we", "block", "the", "vcpu", "from", "exiting", "by", "doing", "a", "busy", "loop", "as", "follows", "exited", "pause", "exited", "pause", "NUMBER", "until", "the", "exit", "from", "the", "vmm", "loop", "be", "actually", "call", "NUMBER", "Conceptually", "it", "also", "looks", "a", "bit", "weird", "that", "we", "have", "a", "state", "machine", "where", "we", "run", "in", "a", "loop", "until", "end_state", "be", "true", "NUMBER", "With", "the", "current", "code", "end_state", "will", "never", "be", "set", "to", "true", "NUMBER", "Instead", "of", "calling", "exited", "pause", "in", "a", "loop", "we", "should", "find", "a", "better", "solution", "for", "avoid", "sigprocmask", "NUMBER", "I", "notice", "that", "in", "the", "issue", "acatangiu", "also", "mention", "use", "a", "barrier", "as", "an", "alternative", "NUMBER", "Is", "that", "something", "that", "we", "could", "do", "instead", "Hi", "xiekeyang", "I", "think", "it", "would", "be", "best", "if", "you", "squashed", "your", "commit", "into", "NUMBER", "and", "update", "the", "description", "to", "something", "a", "bit", "more", "verbose", "you", "can", "leave", "the", "title", "as", "refactor", "update", "unit", "test", "but", "the", "description", "should", "explain", "a", "bit", "what", "the", "commit", "introduces", "NUMBER", "Remember", "to", "keep", "the", "title", "TAG", "I", "saw", "there", "was", "some", "talk", "experiment", "regard", "ballooning", "NUMBER", "NUMBER", "would", "that", "help", "my", "case", "Yup", "NUMBER", "Again", "Firecracker", "doesn", "t", "officially", "support", "ballooning", "but", "the", "patches", "be", "there", "if", "you", "want", "to", "try", "out", "the", "feature", "NUMBER", "Your", "guest", "will", "need", "the", "virtio", "balloon", "driver", "too", "NUMBER", "Should", "I", "allocate", "less", "memory", "to", "my", "container", "leading", "to", "memory", "be", "reclaimed", "faster", "Memory", "won", "t", "be", "reclaimed", "NUMBER", "I", "also", "notice", "that", "as", "memory", "usage", "reaches", "closer", "to", "NUMBER", "the", "build", "gets", "much", "slower", "NUMBER", "I", "assume", "because", "of", "it", "trying", "to", "allocate", "the", "memory", "in", "the", "zero", "delete", "space", "See", "pmap", "output", "below", "NUMBER", "Do", "you", "mean", "memory", "usage", "on", "the", "host", "I", "guess", "as", "much", "because", "the", "OOM", "killer", "kicked", "in", "If", "so", "I", "suspect", "the", "build", "be", "slowing", "because", "the", "host", "be", "frantically", "flushing", "caches", "and", "paging", "trying", "to", "accommodate", "the", "demand", "for", "memory", "NUMBER", "It", "can", "t", "touch", "the", "Firecracker", "process", "resident", "pages", "and", "they", "re", "anon", "RAM", "so", "they", "stick", "around", "unless", "the", "OOM", "killer", "terminates", "the", "microVM", "NUMBER", "Closing", "in", "favor", "of", "NUMBER", "Some", "of", "the", "guests", "rootfs", "s", "that", "we", "use", "for", "example", "the", "Alpine", "one", "do", "not", "correctly", "flush", "guest", "disks", "on", "shut", "down", "leading", "to", "sporadic", "file", "system", "inconsistencies", "for", "RW", "drives", "NUMBER", "We", "need", "to", "fix", "replace", "them", "with", "correct", "ones", "NUMBER", "Reason", "for", "This", "PR", "address", "NUMBER", "Description", "of", "Changes", "Posting", "this", "for", "early", "review", "NUMBER", "Before", "merge", "we", "have", "to", "wait", "for", "the", "rust", "vmm", "vm", "memory", "crate", "to", "be", "publish", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "The", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "LGTM", "NUMBER", "Can", "you", "please", "squash", "the", "commit", "that", "add", "fix", "on", "top", "of", "the", "first", "commit", "Individual", "commit", "be", "supposed", "to", "successfully", "build", "NUMBER", "P", "NUMBER", "S", "NUMBER", "There", "might", "be", "an", "interface", "change", "before", "publishing", "vm", "memory", "to", "crates", "NUMBER", "io", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "Reason", "for", "This", "PR", "Resolves", "LINK", "microvm", "firecracker", "issue", "NUMBER", "Description", "of", "Changes", "Initrd", "issue", "be", "resolve", "so", "update", "FAQ", "to", "match", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "The", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "no", "code", "has", "be", "touched", "x", "no", "API", "change", "be", "include", "in", "this", "PR", "x", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "x", "no", "new", "unsafe", "code", "has", "be", "add", "tidux", "can", "you", "please", "remove", "the", "commit", "that", "be", "not", "sign", "and", "rebase", "your", "PR", "so", "that", "we", "can", "merge", "it", "Hi", "smira", "Thanks", "for", "the", "deep", "insight", "and", "please", "accept", "my", "apology", "for", "such", "a", "late", "answer", "NUMBER", "Indeed", "this", "issue", "was", "fix", "by", "NUMBER", "came", "as", "a", "fix", "to", "issue", "LINK", "microvm", "firecracker", "issue", "NUMBER", "which", "was", "discover", "in", "a", "similar", "situation", "as", "this", "one", "investigating", "intermittent", "block", "device", "failures", "on", "a", "custom", "kernel", "build", "NUMBER", "Hopefully", "everything", "works", "good", "now", "NUMBER", "Feel", "free", "to", "open", "this", "issue", "if", "other", "clarifications", "be", "needed", "NUMBER", "Reason", "for", "This", "PR", "Adds", "a", "function", "in", "vmm", "to", "fetch", "the", "KVM", "dirty", "bitmap", "NUMBER", "Description", "of", "Changes", "the", "NUMBER", "commit", "cleans", "up", "some", "build", "warnings", "on", "aarch", "NUMBER", "to", "make", "new", "warnings", "easier", "to", "spot", "NUMBER", "the", "NUMBER", "commit", "revert", "LINK", "microvm", "firecracker", "commit", "ebc", "NUMBER", "f", "NUMBER", "eacaa", "NUMBER", "c", "NUMBER", "a", "NUMBER", "f", "NUMBER", "e", "NUMBER", "cebe", "NUMBER", "c", "NUMBER", "and", "enable", "KVM", "dirty", "page", "track", "by", "default", "so", "that", "the", "dirty", "bitmap", "be", "always", "available", "NUMBER", "the", "NUMBER", "commit", "introduces", "the", "actual", "function", "which", "just", "calls", "the", "corresponding", "fn", "in", "kvm", "ioctls", "LINK", "vmm", "kvm", "ioctls", "blob", "ee", "NUMBER", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "b", "NUMBER", "b", "NUMBER", "d", "NUMBER", "bcf", "NUMBER", "da", "NUMBER", "e", "NUMBER", "db", "NUMBER", "src", "ioctls", "vm", "NUMBER", "rs", "L", "NUMBER", "and", "aggregates", "the", "results", "per", "memory", "region", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "Please", "consider", "developing", "this", "functionality", "on", "the", "refactoring", "epoll_handler", "branch", "NUMBER", "I", "m", "in", "the", "process", "of", "rebasing", "that", "branch", "on", "top", "of", "master", "so", "that", "we", "can", "merge", "NUMBER", "Any", "intermediate", "work", "should", "go", "to", "the", "refactoring", "branch", "so", "that", "it", "doesn", "t", "create", "conflict", "NUMBER", "Closing", "this", "in", "favor", "of", "a", "new", "PR", "on", "the", "refactoring", "branch", "NUMBER", "Closing", "this", "as", "a", "duplicate", "of", "NUMBER", "we", "ll", "have", "a", "fix", "for", "it", "soon", "NUMBER", "Closing", "LINK", "microvm", "firecracker", "issue", "NUMBER", "indicates", "the", "FAQ", "should", "be", "update", "to", "confirm", "that", "initrds", "be", "support", "now", "NUMBER", "LINK", "microvm", "firecracker", "pull", "NUMBER", "I", "m", "not", "sure", "there", "exists", "a", "good", "path", "forward", "here", "NUMBER", "either", "deciding", "on", "dropping", "Arc", "for", "all", "implementors", "of", "EpollHandler", "The", "current", "available", "Firecracker", "EventManager", "implementation", "as", "well", "as", "the", "propose", "LINK", "vmm", "vmm", "epoll", "pull", "NUMBER", "implementation", "both", "enforce", "Arc", "TAG", "wrapping", "of", "event", "handlers", "NUMBER", "or", "just", "lock", "parts", "of", "the", "Vmm", "in", "an", "Arc", "which", "be", "actually", "needed", "for", "handle", "the", "read", "event", "That", "would", "mean", "splitting", "off", "parts", "of", "the", "Vmm", "to", "another", "struct", "which", "will", "be", "Arc", "TAG", "wrapped", "inside", "the", "Vmm", "struct", "NUMBER", "These", "parts", "would", "be", "exit_event", "and", "all", "other", "members", "accessed", "on", "the", "exit_event", "path", "vcpus_handles", "vmm", "NUMBER", "op", "function", "and", "all", "self", "members", "accessed", "within", "NUMBER", "That", "would", "not", "avoid", "the", "Mutex", "lock", "just", "move", "it", "inside", "Vmm", "and", "I", "think", "it", "would", "artificially", "raise", "the", "complexity", "of", "Vmm", "NUMBER", "I", "suggest", "we", "stay", "with", "the", "current", "design", "especially", "since", "the", "Mutex", "wrapping", "the", "Vmm", "be", "un", "contended", "NUMBER", "Ideally", "in", "the", "future", "we", "d", "have", "an", "EventManager", "capable", "of", "managing", "both", "single", "threaded", "and", "multi", "threaded", "subscribers", "at", "the", "same", "time", "NUMBER", "That", "would", "provide", "a", "clean", "solution", "to", "this", "issue", "NUMBER", "In", "the", "meantime", "I", "suggest", "closing", "this", "issue", "NUMBER", "andreeaflorescu", "what", "do", "you", "think", "Closing", "for", "now", "we", "can", "reopen", "when", "we", "have", "support", "in", "a", "more", "flexible", "EventManager", "NUMBER", "Reason", "for", "This", "PR", "address", "NUMBER", "Description", "of", "Changes", "We", "need", "this", "in", "order", "to", "align", "our", "interface", "to", "the", "rust", "vmm", "vm", "memory", "interface", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "The", "PRs", "on", "which", "this", "one", "depends", "be", "all", "merge", "now", "NUMBER", "You", "can", "go", "ahead", "and", "rebase", "NUMBER", "Thanks", "Done", "NUMBER", "Please", "take", "a", "look", "serban", "NUMBER", "can", "you", "also", "make", "the", "corresponding", "change", "so", "that", "crates", "depend", "on", "GuestMemory", "and", "not", "GuestMemoryMmap", "andreeaflorescu", "there", "be", "a", "separate", "issue", "LINK", "microvm", "firecracker", "issue", "NUMBER", "for", "this", "and", "I", "would", "like", "to", "implement", "it", "as", "part", "of", "a", "different", "PR", "or", "even", "a", "batch", "of", "PRs", "because", "it", "s", "not", "a", "blocker", "for", "the", "migration", "to", "rust", "vmm", "vm", "memory", "NUMBER", "I", "plan", "to", "do", "it", "as", "soon", "as", "possible", "but", "I", "would", "prefer", "to", "work", "incrementally", "here", "NUMBER", "There", "will", "be", "a", "lot", "of", "change", "and", "I", "would", "like", "these", "PRs", "to", "be", "as", "easy", "to", "review", "as", "possible", "NUMBER", "serban", "NUMBER", "can", "you", "also", "make", "the", "corresponding", "change", "so", "that", "crates", "depend", "on", "GuestMemory", "and", "not", "GuestMemoryMmap", "andreeaflorescu", "there", "be", "a", "separate", "issue", "LINK", "microvm", "firecracker", "issue", "NUMBER", "for", "this", "and", "I", "would", "like", "to", "implement", "it", "as", "part", "of", "a", "different", "PR", "or", "even", "a", "batch", "of", "PRs", "because", "it", "s", "not", "a", "blocker", "for", "the", "migration", "to", "rust", "vmm", "vm", "memory", "NUMBER", "I", "plan", "to", "do", "it", "as", "soon", "as", "possible", "but", "I", "would", "prefer", "to", "work", "incrementally", "here", "NUMBER", "There", "will", "be", "a", "lot", "of", "change", "and", "I", "would", "like", "these", "PRs", "to", "be", "as", "easy", "to", "review", "as", "possible", "NUMBER", "I", "actually", "find", "it", "harder", "to", "review", "because", "you", "miss", "the", "bigger", "picture", "and", "there", "be", "a", "lot", "of", "PRs", "that", "need", "to", "pass", "the", "test", "NUMBER", "We", "then", "need", "to", "chase", "away", "all", "references", "of", "GuestMemoryMmap", "and", "replace", "them", "with", "GuestMemory", "NUMBER", "As", "I", "see", "it", "It", "shouldn", "t", "be", "harder", "to", "review", "the", "following", "PRs", "NUMBER", "The", "bigger", "picture", "be", "quite", "simple", "and", "hard", "to", "miss", "NUMBER", "We", "now", "have", "a", "trait", "GuestMemory", "that", "has", "to", "be", "use", "instead", "of", "the", "concrete", "implementation", "NUMBER", "It", "s", "a", "best", "practice", "in", "computer", "science", "NUMBER", "And", "we", "would", "need", "to", "chase", "away", "all", "the", "references", "of", "GuestMemoryMmap", "and", "replace", "them", "with", "GuestMemory", "anyway", "regardless", "of", "whether", "we", "do", "it", "now", "or", "later", "NUMBER", "The", "only", "problem", "be", "the", "size", "of", "the", "PRs", "NUMBER", "Personally", "I", "would", "find", "it", "very", "hard", "to", "review", "a", "PR", "containing", "everything", "at", "once", "NUMBER", "Also", "if", "we", "merge", "this", "PR", "first", "we", "will", "be", "able", "to", "parallelize", "some", "work", "later", "NUMBER", "We", "will", "be", "able", "to", "continue", "the", "work", "for", "switching", "to", "the", "vm", "memory", "crate", "while", "also", "work", "on", "use", "to", "the", "GuestMemory", "trait", "in", "the", "same", "time", "NUMBER", "I", "still", "have", "to", "review", "the", "test", "aside", "for", "some", "provide", "comments", "PR", "looks", "good", "alexandruag", "acatangiu", "iulianbarbu", "please", "take", "another", "look", "NUMBER", "I", "fix", "the", "conflict", "NUMBER", "Firecracker", "snapshot", "This", "PR", "describes", "the", "overall", "snapshotting", "proposal", "NUMBER", "Fixes", "NUMBER", "We", "did", "not", "consider", "THP", "yet", "but", "we", "be", "not", "aware", "of", "any", "limitations", "on", "kvm", "dirty", "page", "track", "and", "THP", "NUMBER", "Do", "you", "have", "any", "data", "points", "on", "this", "kvm_dirty_log", "on", "x", "NUMBER", "_", "NUMBER", "at", "least", "support", "only", "NUMBER", "K", "pages", "NUMBER", "NoR", "NUMBER", "quoh", "NUMBER", "r", "we", "ve", "update", "the", "proposal", "to", "allow", "toggling", "kvm", "dirty", "page", "counting", "NUMBER", "The", "work", "on", "this", "one", "was", "continued", "on", "NUMBER", "Closing", "this", "NUMBER", "Fixed", "by", "NUMBER", "andrew", "d", "the", "code", "you", "add", "looks", "good", "but", "I", "don", "t", "see", "a", "clear", "usecase", "for", "it", "NUMBER", "The", "idea", "for", "the", "SendCtrlAltDel", "command", "be", "for", "the", "guest", "to", "get", "the", "chance", "to", "cleanly", "shut", "down", "NUMBER", "From", "a", "use", "case", "point", "of", "view", "the", "functionality", "add", "by", "this", "PR", "be", "no", "different", "than", "simply", "kill", "ing", "the", "firecracker", "process", "NUMBER", "As", "such", "I", "don", "t", "see", "add", "value", "in", "add", "and", "maintaining", "this", "propose", "new", "functionality", "NUMBER", "I", "don", "t", "know", "enough", "about", "KVM", "to", "know", "if", "there", "would", "be", "a", "resource", "leak", "or", "other", "issue", "with", "simply", "SIGKILLing", "the", "main", "Firecracker", "process", "if", "doing", "that", "be", "perfectly", "safe", "and", "doesn", "t", "leak", "any", "KVM", "resources", "then", "yes", "this", "code", "be", "redundant", "NUMBER", "Killing", "the", "Firecracker", "process", "will", "not", "leak", "any", "host", "resources", "kvm", "or", "otherwise", "NUMBER", "The", "problem", "with", "kill", "ing", "the", "firecracker", "process", "be", "that", "the", "guest", "do", "not", "get", "a", "chance", "to", "do", "any", "shutdown", "operations", "NUMBER", "IO", "buffers", "both", "in", "the", "guest", "kernel", "and", "in", "the", "firecracker", "process", "don", "t", "get", "flushed", "so", "disk", "drives", "might", "end", "up", "in", "dirty", "state", "NUMBER", "By", "use", "VcpuEvent", "Exit", "events", "to", "stop", "the", "guest", "we", "could", "make", "sure", "to", "flush", "the", "firecracker", "internal", "buffers", "before", "closing", "the", "process", "but", "without", "flushing", "the", "guest", "OS", "ones", "as", "well", "it", "will", "not", "solve", "much", "maybe", "just", "slightly", "decrease", "the", "probability", "of", "dirty", "disk", "state", "NUMBER", "I", "m", "happy", "to", "look", "into", "the", "KVM", "side", "further", "if", "you", "have", "any", "pointers", "Looking", "into", "KVM", "further", "regard", "what", "exactly", "Ignoring", "Firecracker", "s", "buffers", "for", "a", "second", "if", "the", "guest", "be", "use", "a", "journaling", "filesystem", "then", "killing", "the", "VM", "while", "it", "s", "run", "be", "the", "same", "as", "a", "power", "loss", "event", "and", "as", "long", "as", "the", "guest", "code", "properly", "uses", "fsync", "and", "a", "journaling", "filesystem", "modern", "systems", "should", "handle", "this", "just", "fine", "NUMBER", "I", "think", "the", "API", "you", "propose", "would", "help", "in", "such", "a", "case", "NUMBER", "Let", "us", "think", "on", "it", "for", "a", "couple", "of", "days", "NUMBER", "andrew", "d", "We", "ve", "had", "a", "quick", "look", "at", "the", "code", "and", "our", "findings", "be", "that", "kill", "ing", "the", "Firecracker", "process", "be", "as", "safe", "as", "this", "propose", "API", "NUMBER", "For", "the", "net", "and", "vsock", "devices", "we", "don", "t", "really", "care", "about", "guaranteeing", "flushing", "pending", "data", "for", "unresponsive", "guests", "NUMBER", "I", "don", "t", "believe", "that", "d", "bring", "any", "value", "to", "an", "actual", "customer", "use", "case", "NUMBER", "Please", "correct", "me", "if", "I", "m", "wrong", "NUMBER", "For", "block", "devices", "emulated", "disks", "Firecracker", "doesn", "t", "have", "any", "intermediary", "buffers", "outside", "of", "the", "virtio", "queues", "and", "all", "write", "s", "be", "blocking", "writes", "NUMBER", "Virtio", "in", "flight", "request", "be", "handle", "according", "to", "the", "virtio", "protocol", "and", "as", "long", "as", "the", "guest", "driver", "be", "following", "that", "correctly", "journalled", "filesystems", "will", "work", "fine", "regardless", "of", "when", "Firecracker", "be", "kill", "ed", "NUMBER", "For", "the", "guest", "a", "kill", "NUMBER", "fc", "pid", "should", "be", "equivalent", "to", "a", "power", "loss", "NUMBER", "For", "now", "the", "extra", "API", "propose", "in", "this", "PR", "doesn", "t", "bring", "any", "value", "NUMBER", "We", "should", "revisit", "this", "if", "when", "we", "start", "looking", "at", "async", "io", "NUMBER", "Add", "guard", "pages", "to", "mmaped", "regions", "in", "order", "to", "prevent", "read", "write", "ops", "outside", "of", "the", "regions", "We", "should", "implement", "this", "in", "rust", "vmm", "vm", "memory", "if", "possible", "NUMBER", "serban", "NUMBER", "can", "you", "please", "open", "an", "issue", "in", "vm", "memory", "as", "well", "to", "check", "with", "the", "maintainers", "if", "this", "be", "something", "they", "want", "tot", "do", "I", "opened", "an", "issue", "in", "rust", "vmm", "vm", "memory", "Previous", "benchmarks", "showed", "low", "performance", "when", "run", "a", "NUMBER", "K", "random", "read", "test", "with", "fio", "NUMBER", "We", "need", "to", "measure", "current", "I", "O", "performance", "with", "different", "block", "sizes", "on", "the", "refactoring", "epoll", "branch", "identify", "possible", "bottlenecks", "and", "options", "for", "improving", "performance", "NUMBER", "sandreim", "do", "we", "already", "have", "an", "issue", "for", "improving", "block", "performance", "Fixed", "by", "NUMBER", "Please", "reword", "the", "commit", "title", "for", "NUMBER", "da", "NUMBER", "d", "NUMBER", "ff", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "d", "NUMBER", "to", "something", "more", "specific", "e", "NUMBER", "g", "NUMBER", "seccomp", "level", "representation", "as", "u", "NUMBER", "NUMBER", "Please", "also", "update", "the", "PR", "description", "and", "specify", "the", "change", "clearly", "under", "Description", "of", "change", "NUMBER", "You", "can", "tick", "the", "remaining", "boxes", "in", "the", "checklist", "once", "that", "s", "do", "slightly_smiling_face", "KarthikNedunchezhiyan", "that", "s", "fine", "with", "me", "NUMBER", "iulianbarbu", "I", "ve", "edit", "this", "PR", "to", "be", "opened", "against", "the", "refactoring", "epoll_handler", "branch", "instead", "of", "the", "master", "branch", "NUMBER", "Overall", "it", "looks", "great", "I", "will", "make", "another", "review", "pass", "and", "dive", "deep", "to", "verify", "we", "re", "not", "losing", "any", "corner", "case", "functionality", "NUMBER", "NUMBER", "Signed", "off", "by", "Serban", "Iorga", "TAG", "Reason", "for", "This", "PR", "partially", "address", "NUMBER", "Description", "of", "Changes", "Rename", "GuestMemory", "to", "GuestMemoryMmap", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Node", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "serban", "NUMBER", "most", "of", "these", "renames", "will", "need", "to", "be", "revert", "once", "we", "switch", "to", "vm", "memory", "because", "we", "will", "want", "crates", "to", "take", "a", "dependency", "on", "the", "GuestMemory", "trait", "and", "not", "the", "mmap", "implementation", "NUMBER", "Crates", "that", "take", "dependency", "on", "vm", "memory", "should", "only", "be", "use", "the", "trait", "NUMBER", "Yes", "but", "I", "would", "suggest", "to", "migrate", "like", "this", "and", "then", "do", "those", "change", "incrementally", "as", "part", "of", "another", "item", "NUMBER", "serban", "NUMBER", "most", "of", "these", "renames", "will", "need", "to", "be", "revert", "once", "we", "switch", "to", "vm", "memory", "because", "we", "will", "want", "crates", "to", "take", "a", "dependency", "on", "the", "GuestMemory", "trait", "and", "not", "the", "mmap", "implementation", "NUMBER", "Crates", "that", "take", "dependency", "on", "vm", "memory", "should", "only", "be", "use", "the", "trait", "NUMBER", "Yes", "but", "I", "would", "suggest", "to", "migrate", "like", "this", "and", "then", "do", "those", "change", "incrementally", "as", "part", "of", "another", "item", "NUMBER", "What", "would", "be", "the", "benefit", "in", "doing", "that", "I", "don", "t", "see", "any", "disadvantage", "NUMBER", "It", "has", "to", "be", "do", "anyway", "even", "if", "we", "import", "the", "GuestMemory", "trait", "NUMBER", "And", "we", "don", "t", "need", "more", "than", "this", "in", "order", "to", "migrate", "to", "vm", "memory", "NUMBER", "But", "actually", "I", "can", "try", "to", "import", "the", "GuestMemory", "trait", "as", "part", "of", "this", "issue", "NUMBER", "Let", "me", "see", "how", "much", "work", "it", "would", "imply", "NUMBER", "serban", "NUMBER", "most", "of", "these", "renames", "will", "need", "to", "be", "revert", "once", "we", "switch", "to", "vm", "memory", "because", "we", "will", "want", "crates", "to", "take", "a", "dependency", "on", "the", "GuestMemory", "trait", "and", "not", "the", "mmap", "implementation", "NUMBER", "Crates", "that", "take", "dependency", "on", "vm", "memory", "should", "only", "be", "use", "the", "trait", "NUMBER", "Yes", "but", "I", "would", "suggest", "to", "migrate", "like", "this", "and", "then", "do", "those", "change", "incrementally", "as", "part", "of", "another", "item", "NUMBER", "What", "would", "be", "the", "benefit", "in", "doing", "that", "I", "don", "t", "see", "any", "disadvantage", "NUMBER", "It", "has", "to", "be", "do", "anyway", "even", "if", "we", "import", "the", "GuestMemory", "trait", "NUMBER", "And", "we", "don", "t", "need", "more", "than", "this", "in", "order", "to", "migrate", "to", "vm", "memory", "NUMBER", "But", "actually", "I", "can", "try", "to", "import", "the", "GuestMemory", "trait", "as", "part", "of", "this", "issue", "NUMBER", "Let", "me", "see", "how", "much", "work", "it", "would", "imply", "NUMBER", "andreeaflorescu", "I", "tried", "to", "import", "the", "GuestMemory", "trait", "from", "rust", "vmm", "vm", "memory", "NUMBER", "Here", "be", "the", "PR", "LINK", "microvm", "firecracker", "pull", "NUMBER", "for", "that", "NUMBER", "Considering", "that", "that", "PR", "can", "t", "be", "merge", "yet", "since", "it", "depends", "on", "other", "PRs", "considering", "that", "we", "need", "to", "rename", "the", "GuestMemory", "struct", "to", "GuestMemoryMmap", "anyway", "in", "order", "to", "be", "able", "to", "import", "the", "GuestMemory", "trait", "and", "considering", "that", "the", "renaming", "consists", "of", "a", "lot", "of", "small", "change", "that", "touch", "a", "lot", "of", "code", "and", "that", "can", "lead", "to", "merge", "conflict", "fairly", "easily", "and", "also", "make", "NUMBER", "much", "more", "verbose", "than", "it", "has", "to", "be", "I", "propose", "the", "following", "strategy", "NUMBER", "Merging", "this", "PR", "NUMBER", "Waiting", "for", "NUMBER", "and", "NUMBER", "to", "be", "merge", "NUMBER", "Merging", "NUMBER", "NUMBER", "Implementing", "NUMBER", "in", "a", "separate", "PR", "since", "it", "s", "not", "a", "blocker", "for", "the", "migration", "to", "rust", "vmm", "vm", "memory", "it", "will", "contain", "fairly", "big", "change", "that", "will", "touch", "a", "lot", "of", "code", "On", "snapshot", "creation", "make", "sure", "to", "flush", "disks", "so", "that", "any", "in", "flight", "data", "in", "the", "host", "OS", "buffers", "gets", "commit", "to", "the", "file", "backing", "the", "disks", "NUMBER", "Rescanning", "a", "block", "device", "can", "be", "do", "through", "a", "PATCH", "drives", "API", "call", "NUMBER", "More", "details", "can", "be", "find", "at", "docs", "api_requests", "patch", "block", "NUMBER", "md", "NUMBER", "dianpopa", "some", "users", "might", "want", "to", "modify", "the", "location", "of", "the", "api", "socket", "when", "use", "a", "jailed", "Firecracker", "I", "don", "t", "see", "this", "as", "a", "necessity", "not", "just", "because", "nobody", "asked", "for", "it", "but", "because", "users", "already", "kinda", "have", "this", "possibility", "because", "they", "pick", "the", "jail", "s", "ID", "which", "in", "turn", "defines", "the", "chroot", "s", "path", "and", "the", "socket", "will", "be", "at", "a", "know", "location", "by", "default", "under", "that", "path", "NUMBER", "I", "think", "that", "s", "a", "on", "usability", "NUMBER", "andreeaflorescu", "the", "chroot", "lives", "as", "long", "as", "the", "firecracker", "process", "lives", "Or", "longer", "because", "Firecracker", "doesn", "t", "clean", "it", "up", "which", "means", "that", "NUMBER", "In", "this", "context", "the", "api", "socket", "be", "not", "a", "temporary", "resource", "but", "rather", "a", "permanent", "one", "NUMBER", "Hence", "placing", "it", "by", "default", "under", "a", "temporary", "directory", "tmp", "inside", "the", "chroot", "be", "misleading", "when", "looking", "at", "the", "bigger", "picture", "NUMBER", "NUMBER", "from", "the", "host", "s", "point", "of", "view", "it", "s", "not", "a", "temporary", "location", "unless", "the", "whole", "chroot", "root", "heh", "be", "temporary", "in", "which", "case", "it", "s", "so", "because", "the", "user", "explicitly", "wanted", "it", "to", "be", "NUMBER", "So", "my", "suggestion", "be", "to", "remvoe", "api", "socket", "from", "the", "jailer", "s", "parameters", "and", "change", "no", "defaults", "WDYT", "The", "jailer", "do", "not", "have", "a", "api", "socket", "parameter", "NUMBER", "It", "hardcodes", "a", "location", "name", "LINK", "microvm", "firecracker", "blob", "master", "src", "jailer", "src", "main", "NUMBER", "rs", "L", "NUMBER", "and", "then", "it", "pass", "LINK", "microvm", "firecracker", "blob", "master", "src", "jailer", "src", "env", "NUMBER", "rs", "L", "NUMBER", "it", "to", "Firecracker", "which", "has", "an", "api", "socket", "parameter", "NUMBER", "Did", "I", "understand", "correctly", "your", "proposal", "Yup", "you", "re", "right", "I", "had", "a", "wrong", "impression", "and", "didn", "t", "check", "the", "code", "grin", "I", "think", "the", "direction", "propose", "in", "this", "PR", "be", "the", "right", "one", "and", "mostly", "matches", "all", "your", "comments", "The", "jailer", "should", "not", "concern", "itself", "with", "the", "api", "socket", "in", "any", "way", "NUMBER", "It", "should", "just", "build", "the", "jail", "and", "pass", "any", "firecracker", "relevant", "parameters", "directly", "to", "firecracker", "through", "the", "use", "of", "the", "newly", "ish", "add", "mechanism", "NUMBER", "Firecracker", "behavior", "will", "then", "be", "consistent", "with", "or", "without", "a", "jail", "if", "api", "socket", "param", "be", "provide", "it", "will", "use", "it", "without", "concerning", "itself", "whether", "it", "s", "in", "a", "jail", "or", "not", "when", "no", "such", "param", "be", "provide", "it", "will", "just", "default", "to", "some", "path", "currently", "tmp", "firecracker", "NUMBER", "socket", "subject", "to", "change", "in", "a", "different", "PR", "if", "there", "be", "a", "case", "to", "do", "so", "NUMBER", "WDYT", "L", "NUMBER", "E", "NUMBER", "This", "be", "indeed", "a", "breaking", "change", "for", "jailer", "users", "NUMBER", "You", "re", "right", "that", "since", "we", "be", "make", "a", "breaking", "change", "we", "should", "make", "the", "right", "and", "complete", "breaking", "change", "stuck_out_tongue", "I", "also", "chatted", "with", "dhrgit", "a", "bit", "about", "this", "and", "the", "default", "directory", "we", "were", "thinking", "about", "be", "var", "runor", "run", "NUMBER", "This", "seems", "to", "be", "the", "generally", "accepted", "directory", "for", "runtime", "variables", "NUMBER", "See", "some", "documentation", "here", "NUMBER", "Sounds", "good", "to", "me", "NUMBER", "Reason", "for", "This", "PR", "Implements", "NUMBER", "Description", "of", "Changes", "Please", "review", "the", "commit", "one", "by", "one", "if", "it", "helps", "while", "also", "keep", "in", "mind", "that", "there", "be", "some", "leftovers", "from", "first", "commit", "that", "get", "cleared", "out", "in", "the", "last", "one", "as", "Cosmetic", "change", "NUMBER", "While", "reviewing", "this", "you", "will", "also", "find", "that", "I", "temporarly", "broke", "the", "promise", "of", "keep", "the", "devices", "generic", "dyn", "VirtioDevice", "in", "some", "places", "like", "builder", "and", "controller", "NUMBER", "I", "will", "address", "these", "after", "we", "finish", "refactoring", "all", "the", "devices", "NUMBER", "This", "PR", "focuses", "mostly", "on", "refactoring", "the", "Block", "device", "but", "also", "touches", "Net", "Vsock", "MmioDevice", "and", "MmioDeviceManager", "NUMBER", "Summary", "of", "change", "Merge", "BlockEpollHandler", "with", "Block", "and", "implement", "EventHandler", "for", "Block", "NUMBER", "Add", "a", "dummy", "implementation", "of", "EventHandler", "for", "Net", "and", "Vsock", "NUMBER", "Adds", "EventManager", "in", "VmmController", "and", "uses", "it", "Builder", "to", "register", "the", "Block", "device", "NUMBER", "Adds", "a", "temporary", "second", "path", "to", "register", "devices", "in", "MmioDeviceManager", "with", "register_block_device", "and", "a", "generic", "device", "resources", "registration", "fn", "register_device_resources", "NUMBER", "We", "will", "remove", "these", "once", "we", "have", "all", "devices", "migrated", "to", "EventManager", "NUMBER", "Rename", "MmioDevice", "to", "MmioTransport", "and", "comment", "it", "s", "unit", "test", "temporarly", "NUMBER", "Rework", "some", "aspects", "of", "MmioTransport", "and", "relocate", "resources", "to", "VirtioDevice", "trait", "implementors", "NUMBER", "Add", "methods", "to", "get", "queues", "interrupts", "and", "events", "in", "VirtioDevice", "trait", "and", "move", "it", "to", "a", "separate", "file", "NUMBER", "Update", "Net", "Block", "Vsock", "devices", "with", "the", "new", "VirtioDevice", "trait", "fn", "implementations", "and", "create", "queues", "and", "interrupts", "in", "their", "constructors", "NUMBER", "Split", "the", "block", "device", "into", "multiple", "file", "NUMBER", "Cosmetic", "change", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "and", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "Changes", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "I", "haven", "t", "looked", "at", "all", "the", "code", "yet", "but", "I", "think", "the", "device", "implementation", "code", "be", "spread", "in", "too", "many", "file", "and", "that", "doesn", "t", "really", "help", "with", "readability", "NUMBER", "Can", "we", "sync", "on", "this", "offline", "I", "think", "we", "should", "try", "to", "keep", "the", "structure", "of", "the", "code", "as", "close", "as", "possible", "to", "what", "the", "Virtio", "specification", "defines", "as", "build", "blocks", "of", "a", "device", "NUMBER", "Sure", "let", "s", "sync", "offline", "NUMBER", "Ooops", "most", "of", "my", "comments", "have", "already", "be", "address", "in", "later", "commit", "I", "will", "mark", "those", "as", "resolve", "sorry", "for", "the", "spam", "NUMBER", "There", "s", "still", "work", "left", "around", "unit", "test", "and", "some", "integration", "test", "be", "fail", "intermittently", "but", "let", "s", "merge", "this", "since", "sandreim", "doesn", "t", "have", "bandwidth", "to", "continue", "on", "this", "topic", "NUMBER", "Someone", "else", "should", "fix", "those", "in", "a", "future", "PR", "NUMBER", "alexandruag", "NUMBER", "be", "waiting", "on", "this", "already", "approved", "PR", "please", "resolve", "the", "conflict", "so", "we", "can", "merge", "it", "While", "trying", "to", "cleanup", "error", "I", "ve", "realized", "that", "our", "ownership", "model", "while", "better", "was", "still", "all", "over", "the", "place", "and", "we", "could", "do", "much", "better", "in", "terms", "of", "separation", "of", "concerns", "ergo", "this", "PR", "NUMBER", "This", "PR", "build", "on", "top", "of", "NUMBER", "Description", "of", "Changes", "Decouples", "the", "different", "objects", "describing", "the", "Vmm", "interface", "in", "three", "layers", "of", "separation", "bottom", "up", "as", "follows", "NUMBER", "The", "Vmm", "object", "programmatic", "interface", "with", "Vmm", "specific", "input", "and", "error", "NUMBER", "NUMBER", "A", "Vmm", "RPC", "API", "to", "provide", "RPC", "user", "external", "interaction", "with", "the", "Vmm", "NUMBER", "NUMBER", "The", "Http", "REST", "API", "server", "NUMBER", "In", "the", "first", "layer", "the", "Vmm", "should", "not", "try", "and", "care", "about", "user", "facing", "error", "NUMBER", "The", "Vmm", "defines", "its", "own", "set", "of", "specific", "error", "which", "will", "be", "later", "encapsulated", "and", "appended", "with", "extra", "information", "by", "the", "upper", "layers", "NUMBER", "The", "second", "layer", "be", "a", "newly", "add", "module", "which", "exposes", "vmm", "user", "facing", "API", "NUMBER", "It", "acts", "as", "an", "adapter", "between", "the", "user", "facing", "API", "and", "the", "vmm", "as", "a", "library", "programmatic", "API", "NUMBER", "This", "RPC", "api", "middle", "layer", "uses", "dependency", "injection", "to", "get", "individual", "commands", "from", "the", "upper", "layer", "validate", "and", "translate", "them", "and", "pass", "them", "to", "the", "lower", "layer", "NUMBER", "This", "allows", "greater", "flexibility", "in", "change", "the", "Vmm", "implementation", "and", "code", "level", "interface", "without", "breaking", "user", "facing", "API", "NUMBER", "Instead", "of", "trying", "to", "catch", "all", "the", "possible", "Vmm", "configuration", "combinations", "and", "which", "APIs", "be", "allow", "when", "API", "Adapter", "flavors", "also", "act", "as", "recipes", "for", "work", "with", "allow", "subsets", "of", "the", "user", "facing", "API", "commands", "which", "be", "only", "relevant", "in", "certain", "usecases", "like", "preboot", "and", "postboot", "snapshot", "and", "possibly", "live", "migration", "or", "live", "update", "NUMBER", "vmm", "components", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "b", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "ea", "NUMBER", "NUMBER", "f", "NUMBER", "dab", "NUMBER", "png", "No", "API", "Controller", "Visual", "depiction", "of", "a", "Firecracker", "microVM", "when", "run", "with", "no", "api", "no", "api", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "ce", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "ea", "NUMBER", "NUMBER", "a", "NUMBER", "eac", "NUMBER", "e", "NUMBER", "png", "Runtime", "API", "Controller", "Visual", "depiction", "of", "a", "Firecracker", "microVM", "in", "the", "run", "state", "post", "boot", "be", "controlled", "by", "an", "external", "ApiServer", "api", "runtime", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "e", "NUMBER", "e", "NUMBER", "ea", "NUMBER", "NUMBER", "bb", "NUMBER", "ba", "NUMBER", "baf", "NUMBER", "png", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "sandreim", "alexandruag", "please", "take", "another", "look", "alexandruag", "I", "ve", "also", "remove", "the", "dependency", "on", "VmResources", "from", "the", "builder", "module", "NUMBER", "Thanks", "for", "point", "that", "out", "Description", "of", "Changes", "Disclaimer", "This", "be", "a", "rather", "heavy", "PR", "RFC", "but", "benefits", "should", "be", "obvious", "NUMBER", "The", "microVM", "lifetime", "and", "how", "resources", "be", "owned", "and", "managed", "be", "now", "clearly", "split", "in", "two", "NUMBER", "There", "be", "a", "pre", "boot", "vmm", "build", "loop", "where", "pre", "boot", "support", "API", "request", "be", "handle", "NUMBER", "These", "mostly", "work", "on", "the", "resource", "collection", "defining", "the", "microVM", "NUMBER", "At", "this", "time", "Firecracker", "acts", "as", "a", "data", "store", "exposing", "a", "REST", "API", "for", "managing", "the", "data", "microVM", "resources", "NUMBER", "A", "successful", "StartMicroVm", "command", "successful", "boot", "will", "move", "the", "microVM", "into", "the", "post", "boot", "state", "while", "failures", "be", "recoverable", "as", "they", "do", "not", "dirty", "mutate", "the", "data", "NUMBER", "NUMBER", "There", "be", "a", "post", "boot", "VmController", "which", "runs", "a", "control", "loop", "that", "handles", "Vmm", "internal", "events", "and", "also", "handles", "post", "boot", "support", "API", "request", "NUMBER", "There", "be", "a", "very", "clear", "separation", "of", "concerns", "between", "objects", "use", "in", "each", "of", "these", "consecutive", "stages", "NUMBER", "Another", "clear", "delimitation", "which", "occur", "be", "between", "NUMBER", "Configuring", "from", "API", "and", "NUMBER", "Configuring", "from", "cmdline", "JSON", "Another", "one", "be", "between", "a", "microVM", "with", "its", "API", "enable", "or", "disabled", "NUMBER", "The", "VmController", "was", "further", "enhanced", "to", "provide", "a", "generic", "interface", "taking", "an", "external", "trait", "object", "for", "externally", "handle", "control", "events", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "I", "think", "there", "s", "one", "high", "level", "aspect", "that", "should", "be", "address", "at", "this", "point", "namely", "the", "Vmm", "becoming", "Firecracker", "specific", "again", "NUMBER", "One", "of", "the", "nicer", "outcomes", "of", "decoupling", "be", "having", "a", "Vmm", "agnostic", "to", "Firecracker", "devices", "the", "way", "we", "setup", "memory", "etc", "which", "can", "be", "use", "for", "different", "use", "cases", "based", "on", "a", "generic", "interface", "NUMBER", "One", "example", "approach", "be", "the", "current", "state", "of", "use", "MmioDevice", "instead", "of", "specific", "devices", "when", "build", "the", "Vmm", "and", "something", "like", "the", "VmmBuilderConfig", "LINK", "microvm", "firecracker", "blob", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "cd", "NUMBER", "f", "NUMBER", "c", "NUMBER", "d", "NUMBER", "fa", "NUMBER", "d", "NUMBER", "ebbf", "NUMBER", "b", "src", "vmm", "src", "lib", "NUMBER", "rs", "L", "NUMBER", "naming", "aside", "struct", "for", "the", "initial", "configuration", "NUMBER", "Further", "incremental", "PR", "s", "should", "completly", "decouple", "the", "VMM", "from", "it", "s", "devices", "NUMBER", "One", "way", "of", "doing", "that", "would", "be", "to", "implement", "a", "new", "DeviceManager", "which", "would", "be", "responsible", "to", "own", "and", "operate", "the", "devices", "NUMBER", "The", "VMM", "would", "only", "need", "to", "hold", "a", "mutable", "ref", "to", "a", "DeviceManager", "trait", "object", "NUMBER", "As", "we", "go", "further", "we", "will", "need", "to", "identify", "options", "for", "build", "and", "registering", "the", "devices", "without", "needing", "the", "VMM", "instance", "like", "we", "do", "now", "NUMBER", "The", "newly", "propose", "builder", "looks", "tied", "to", "a", "VmResources", "object", "which", "in", "turn", "relies", "on", "Firecracker", "specific", "configuration", "I", "assumed", "the", "builder", "should", "belong", "to", "the", "generic", "part", "of", "the", "Vmm", "logic", "since", "there", "s", "no", "other", "interface", "for", "creating", "a", "Vmm", "NUMBER", "Moreover", "I", "think", "the", "GuestMemory", "object", "pass", "to", "the", "Vmm", "should", "be", "pass", "to", "the", "generic", "logic", "from", "the", "outside", "including", "loading", "the", "kernel", "image", "since", "there", "be", "multiple", "ways", "of", "get", "a", "fully", "initialized", "GuestMemory", "object", "besides", "the", "way", "it", "happens", "in", "Firecracker", "right", "now", "NUMBER", "In", "particular", "when", "we", "start", "use", "vm", "memory", "the", "Vmm", "should", "be", "able", "to", "work", "with", "any", "guest", "memory", "object", "that", "implement", "the", "GuestMemory", "trait", "NUMBER", "This", "be", "a", "fair", "point", "and", "I", "believe", "we", "can", "postpone", "this", "up", "until", "later", "when", "we", "will", "look", "at", "merge", "code", "back", "to", "the", "master", "branch", "NUMBER", "Otherwise", "I", "think", "we", "can", "move", "ahead", "with", "these", "change", "and", "postpone", "discussing", "other", "details", "until", "we", "get", "a", "better", "idea", "about", "the", "polly", "integration", "which", "will", "probably", "require", "additional", "change", "anyway", "and", "we", "start", "bringing", "things", "into", "the", "master", "branch", "NUMBER", "I", "ve", "synced", "up", "offline", "with", "alexandruag", "and", "agreed", "this", "PR", "takes", "things", "in", "the", "right", "direction", "and", "through", "iteration", "we", "can", "address", "any", "outstanding", "issue", "NUMBER", "Hi", "rbrasga", "this", "sounds", "like", "a", "very", "interesting", "project", "How", "would", "that", "work", "from", "Firecracker", "s", "perspective", "Would", "it", "do", "device", "passthrough", "Would", "it", "work", "with", "another", "process", "instead", "of", "the", "OS", "filesystem", "Can", "you", "provide", "more", "details", "so", "we", "get", "a", "better", "idea", "on", "the", "proposal", "Thanks", "We", "ll", "discuss", "this", "with", "the", "maintainers", "and", "will", "get", "back", "to", "you", "NUMBER", "Hi", "rbrasga", "We", "haven", "t", "be", "able", "to", "reach", "a", "conclusion", "NUMBER", "We", "need", "some", "more", "time", "NUMBER", "I", "think", "we", "will", "have", "it", "by", "the", "end", "of", "next", "week", "NUMBER", "Yes", "NUMBER", "Take", "x", "NUMBER", "_", "NUMBER", "on", "a", "previous", "PR", "NUMBER", "there", "be", "NUMBER", "pass", "NUMBER", "skipped", "while", "on", "this", "one", "there", "be", "NUMBER", "pass", "NUMBER", "skipped", "NUMBER", "On", "x", "NUMBER", "_", "NUMBER", "it", "looks", "the", "same", "now", "NUMBER", "NUMBER", "and", "on", "aarch", "NUMBER", "NUMBER", "be", "skipped", "indeed", "but", "they", "re", "skipped", "with", "the", "current", "CI", "too", "NUMBER", "See", "a", "sample", "log", "LINK", "pr", "NUMBER", "s", "NUMBER", "amazonaws", "NUMBER", "com", "pr", "logs", "aarch", "NUMBER", "NUMBER", "serban", "NUMBER", "firecracker", "a", "NUMBER", "f", "NUMBER", "be", "NUMBER", "log", "NUMBER", "aghecenco", "andreeaflorescu", "I", "address", "all", "the", "comments", "NUMBER", "Please", "take", "another", "look", "aghecenco", "andreeaflorescu", "please", "take", "another", "look", "NUMBER", "I", "address", "all", "the", "comments", "NUMBER", "I", "had", "to", "decrease", "the", "coverage", "by", "NUMBER", "because", "I", "add", "some", "lines", "that", "can", "t", "be", "test", "NUMBER", "For", "example", "here", "LINK", "L", "NUMBER", "NUMBER", "Let", "s", "keep", "this", "open", "to", "track", "the", "Firecracker", "relate", "work", "needed", "once", "we", "find", "the", "right", "solution", "in", "vmm", "sys", "util", "NUMBER", "Currently", "blocked", "on", "LINK", "vmm", "vmm", "sys", "util", "issue", "NUMBER", "Solved", "by", "LINK", "vmm", "vmm", "sys", "util", "pull", "NUMBER", "Last", "piece", "for", "this", "to", "be", "complete", "be", "merge", "NUMBER", "sipsma", "this", "looks", "like", "a", "bug", "on", "our", "side", "NUMBER", "We", "should", "gracefully", "handle", "KVM_EXIT_SHUTDOWN", "thanks", "for", "the", "deep", "dive", "and", "help", "on", "finding", "the", "root", "cause", "KVM_EXIT_SHUTDOWN", "be", "not", "something", "we", "need", "to", "whitelist", "NUMBER", "It", "s", "just", "a", "type", "of", "VcpuExit", "LINK", "vmm", "kvm", "ioctls", "blob", "NUMBER", "bc", "NUMBER", "b", "NUMBER", "a", "NUMBER", "df", "NUMBER", "feaa", "NUMBER", "d", "NUMBER", "a", "NUMBER", "ad", "NUMBER", "a", "NUMBER", "f", "NUMBER", "d", "NUMBER", "eb", "src", "ioctls", "vcpu", "NUMBER", "rs", "L", "NUMBER", "and", "we", "handle", "it", "in", "the", "vcpu", "s", "emulation", "loop", "LINK", "microvm", "firecracker", "blob", "NUMBER", "cdc", "NUMBER", "b", "NUMBER", "d", "NUMBER", "c", "NUMBER", "c", "NUMBER", "ba", "NUMBER", "f", "NUMBER", "ef", "NUMBER", "e", "NUMBER", "src", "vmm", "src", "vstate", "NUMBER", "rs", "L", "NUMBER", "NUMBER", "The", "weird", "thing", "be", "this", "What", "s", "kind", "of", "interesting", "be", "that", "I", "can", "also", "see", "some", "strace", "logs", "for", "different", "VMs", "showing", "fc_vcpu", "NUMBER", "threads", "that", "apparently", "receive", "KVM_EXIT_SHUTDOWN", "but", "then", "don", "t", "call", "rt_sigprocmask", "allowing", "them", "to", "exit", "with", "NUMBER", "rt_sigprocmask", "be", "call", "by", "libc", "originating", "in", "pthread_exit", "NUMBER", "See", "LINK", "microvm", "firecracker", "issue", "NUMBER", "issuecomment", "NUMBER", "After", "more", "digging", "looks", "like", "the", "rt_sigprocmask", "be", "unescapable", "NUMBER", "It", "s", "also", "call", "from", "__block_all_sigs", "LINK", "libc", "NUMBER", "org", "cgit", "musl", "tree", "src", "signal", "block", "NUMBER", "c", "which", "be", "in", "turn", "call", "by", "pthread_exit", "LINK", "libc", "NUMBER", "org", "cgit", "musl", "tree", "src", "thread", "pthread_create", "NUMBER", "c", "n", "NUMBER", "NUMBER", "Basically", "musl", "took", "every", "precaution", "and", "blocks", "signals", "whenever", "something", "signal", "unsafe", "be", "underway", "NUMBER", "So", "when", "the", "vcpu", "threads", "exit", "they", "should", "be", "calling", "sigprocmask", "and", "cause", "a", "SIGSYS", "NUMBER", "So", "do", "we", "whitelist", "sigprocmask", "for", "musl", "firecracker", "microvm", "compute", "capsule", "Doesn", "t", "look", "like", "we", "did", "NUMBER", "And", "there", "s", "no", "way", "to", "reconcile", "pthread_exit", "with", "our", "seccomp", "filter", "without", "it", "Background", "On", "reboot", "each", "vcpu", "will", "on", "x", "NUMBER", "_", "NUMBER", "write", "CMD_RESET_CPU", "to", "the", "i", "NUMBER", "which", "will", "generate", "a", "vmm", "exit", "event", "NUMBER", "on", "both", "x", "NUMBER", "_", "NUMBER", "and", "aarch", "NUMBER", "on", "more", "recent", "host", "kernels", "I", "need", "to", "crawl", "the", "linux", "changelog", "to", "see", "where", "exactly", "this", "was", "introduce", "eventually", "return", "from", "cpu", "emulation", "with", "kvm", "exit", "reason", "KVM_EXIT_SHUTDOWN", "which", "also", "generates", "a", "vcpu", "exit", "event", "which", "be", "interpreted", "as", "a", "vmm", "exit", "event", "NUMBER", "On", "a", "vmm", "exit", "event", "the", "vmm", "will", "cleanup", "some", "things", "then", "exit", "firecracker", "with", "exit", "code", "NUMBER", "NUMBER", "Bug", "root", "cause", "The", "problem", "describe", "in", "this", "issue", "be", "that", "firecracker", "vcpu", "threads", "finish", "their", "execution", "thread", "shortly", "after", "issue", "the", "vcpu", "exit", "event", "NUMBER", "As", "part", "of", "cleaning", "up", "a", "finished", "thread", "musl", "invokes", "sigprocmask", "NUMBER", "Usually", "the", "vcpu", "thread", "cleanup", "doesn", "t", "get", "that", "far", "because", "the", "vmm", "thread", "quickly", "captures", "the", "vmm", "exit", "event", "and", "exits", "the", "process", "cleanly", "but", "on", "a", "system", "with", "high", "load", "the", "vmm", "thread", "might", "be", "scheduled", "out", "for", "a", "while", "and", "this", "bug", "in", "the", "firecracker", "code", "be", "expose", "NUMBER", "Proposed", "solution", "Vcpu", "main", "loop", "should", "not", "end", "after", "issue", "vcpu", "exit", "event", "instead", "it", "should", "move", "to", "the", "Paused", "state", "and", "wait", "for", "further", "commands", "from", "Vmm", "NUMBER", "This", "will", "allow", "the", "Vmm", "thread", "full", "control", "on", "what", "should", "happen", "next", "and", "will", "also", "fix", "the", "incorrect", "behavior", "report", "in", "this", "issue", "NUMBER", "The", "CI", "AMIs", "have", "the", "kernel", "module", "loaded", "but", "the", "first", "losetup", "fail", "NUMBER", "Detailed", "failure", "bash", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "initialize", "context", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "init", "ignore", "ioctls", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "init", "loop", "control", "detected", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "find_unused", "request", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "use", "loop", "control", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "loop", "NUMBER", "name", "assigned", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "find_unused", "by", "loop", "control", "rc", "NUMBER", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "set", "backing", "file", "tmp", "firecracker_test_session", "c", "NUMBER", "d", "NUMBER", "c", "NUMBER", "c", "NUMBER", "cc", "NUMBER", "ad", "NUMBER", "a", "NUMBER", "f", "NUMBER", "ea", "NUMBER", "NUMBER", "loopdev", "SETUP", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "device", "setup", "request", "NUMBER", "loopdev", "SETUP", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "backing", "file", "open", "OK", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "open", "dev", "loop", "NUMBER", "rw", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "SETUP", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "fail", "rc", "NUMBER", "losetup", "tmp", "firecracker_test_session", "c", "NUMBER", "d", "NUMBER", "c", "NUMBER", "c", "NUMBER", "cc", "NUMBER", "ad", "NUMBER", "a", "NUMBER", "f", "NUMBER", "ea", "NUMBER", "b", "NUMBER", "fsfiles", "fs", "NUMBER", "ext", "NUMBER", "fail", "to", "set", "up", "loop", "device", "No", "such", "file", "or", "directory", "NUMBER", "loopdev", "CXT", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "de", "initialize", "NUMBER", "loopdev", "ITER", "NUMBER", "x", "NUMBER", "fffb", "NUMBER", "e", "NUMBER", "de", "initialize", "The", "losetup", "find", "NUMBER", "command", "issue", "by", "the", "integration", "test", "should", "create", "a", "loop", "device", "if", "none", "be", "find", "but", "doesn", "t", "appear", "to", "do", "so", "NUMBER", "A", "losetup", "invocation", "before", "run", "the", "test", "should", "fix", "it", "NUMBER", "The", "dev", "loop", "devices", "aren", "t", "created", "by", "losetup", "at", "least", "initially", "NUMBER", "They", "can", "be", "manually", "created", "with", "mknod", "if", "the", "loop", "module", "be", "loaded", "NUMBER", "firecracker", "microvm", "compute", "capsule", "This", "can", "be", "fix", "by", "mknod", "ing", "any", "miss", "dev", "loop", "devices", "but", "I", "don", "t", "like", "it", "as", "it", "will", "affect", "the", "state", "of", "the", "host", "outside", "the", "container", "NUMBER", "WDYT", "There", "be", "different", "ways", "to", "approach", "this", "but", "the", "one", "I", "m", "inclined", "towards", "be", "to", "rework", "our", "container", "to", "use", "tini", "from", "a", "location", "of", "our", "choosing", "e", "NUMBER", "g", "NUMBER", "sbin", "tini", "meaning", "we", "no", "longer", "need", "to", "rely", "on", "the", "docker", "init", "switch", "and", "the", "conflicting", "dev", "init", "NUMBER", "I", "ll", "give", "that", "a", "shot", "gun", "Good", "idea", "to", "pull", "in", "master", "branch", "change", "as", "well", "so", "we", "don", "t", "diverge", "NUMBER", "Rebasing", "this", "branch", "on", "top", "of", "the", "master", "branch", "in", "a", "PR", "like", "so", "will", "not", "be", "possible", "however", "NUMBER", "Unless", "we", "want", "to", "push", "f", "to", "this", "branch", "all", "the", "time", "NUMBER", "I", "don", "t", "know", "what", "the", "best", "approach", "be", "here", "NUMBER", "pyrito", "In", "order", "to", "be", "able", "to", "tick", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "you", "should", "also", "add", "an", "entry", "in", "CHANGELOG", "NUMBER", "md", "under", "the", "Fixed", "section", "where", "you", "should", "describe", "the", "change", "in", "behaviour", "as", "seen", "by", "the", "user", "NUMBER", "Also", "don", "t", "forget", "to", "squash", "your", "commit", "as", "describe", "in", "my", "previous", "comment", "When", "rate", "limiting", "be", "enable", "and", "the", "guest", "be", "receiving", "a", "lot", "of", "traffic", "that", "triggers", "throttling", "the", "emulation", "thread", "will", "use", "NUMBER", "CPU", "NUMBER", "There", "be", "NUMBER", "possible", "approaches", "here", "quick", "fix", "keep", "the", "current", "code", "structure", "and", "configure", "edge", "triggered", "epoll", "for", "the", "tap", "fd", "NUMBER", "proper", "fix", "rework", "the", "current", "state", "machine", "and", "use", "edge", "triggered", "epoll", "Hi", "pyrito", "The", "issue", "happens", "when", "the", "net", "device", "do", "not", "read", "all", "the", "the", "packets", "from", "the", "TAP", "device", "waiting", "for", "the", "limiter", "to", "replenish", "it", "s", "budget", "NUMBER", "When", "that", "happens", "the", "epoll", "loop", "will", "continuously", "fire", "the", "RX_TAP_EVENT", "until", "all", "packets", "will", "be", "read", "NUMBER", "There", "be", "already", "some", "code", "that", "unregisters", "the", "epoll", "event", "when", "there", "be", "no", "more", "free", "RX", "buffers", "but", "that", "do", "not", "cover", "the", "case", "when", "we", "stop", "processing", "the", "tap", "RX", "due", "to", "limiter", "budget", "NUMBER", "Currently", "this", "invalid", "PATCH", "request", "bytes", "instead", "of", "bandwidth", "do", "not", "yield", "an", "error", "bash", "sudo", "curl", "X", "PATCH", "i", "unix", "socket", "tmp", "firecracker", "andrei", "NUMBER", "socket", "LINK", "interfaces", "eth", "NUMBER", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "iface_id", "eth", "NUMBER", "rx_rate_limiter", "bytes", "size", "NUMBER", "refill_time", "NUMBER", "tx_rate_limiter", "bytes", "size", "NUMBER", "refill_time", "NUMBER", "The", "log", "shows", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "The", "Patch", "request", "on", "network", "interfaces", "eth", "NUMBER", "with", "body", "n", "iface_id", "eth", "NUMBER", "n", "rx_rate_limiter", "n", "bytes", "n", "size", "NUMBER", "n", "refill_time", "NUMBER", "n", "n", "n", "tx_rate_limiter", "n", "bytes", "n", "size", "NUMBER", "n", "refill_time", "NUMBER", "n", "n", "n", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "This", "be", "a", "regression", "dating", "back", "to", "this", "PR", "LINK", "microvm", "firecracker", "pull", "NUMBER", "If", "the", "TX", "queue", "becomes", "full", "the", "guest", "would", "not", "be", "able", "to", "enqueue", "any", "TX", "packets", "until", "an", "RX", "from", "the", "tap", "device", "will", "raise", "the", "interrupt", "and", "the", "guest", "will", "inspect", "both", "RX", "TX", "queue", "status", "NUMBER", "The", "issue", "impacts", "the", "workloads", "where", "the", "TX", "RX", "ratio", "be", "highly", "skewed", "towards", "TX", "for", "example", "sending", "large", "bursts", "of", "traffic", "without", "doing", "much", "RX", "NUMBER", "Before", "merge", "a", "fix", "benchmarking", "be", "needed", "to", "understand", "the", "performance", "implications", "of", "raising", "additional", "irqs", "NUMBER", "TODO", "Implement", "irq", "raising", "for", "use", "descriptors", "TX", "Performance", "benchmark", "Integration", "test", "iulianbarbu", "if", "we", "merge", "it", "like", "this", "please", "add", "an", "issue", "describing", "the", "leftover", "improvement", "so", "we", "can", "track", "them", "NUMBER", "Thanks", "for", "logging", "this", "teawater", "NUMBER", "We", "will", "look", "into", "it", "and", "update", "you", "NUMBER", "teawater", "We", "need", "more", "context", "into", "the", "problem", "as", "our", "integration", "test", "pass", "without", "requiring", "the", "workaround", "that", "you", "implement", "NUMBER", "Can", "you", "please", "provide", "steps", "and", "some", "more", "information", "on", "the", "setup", "that", "reproduces", "this", "issue", "Ideally", "that", "would", "be", "the", "most", "simple", "scenario", "that", "triggers", "the", "bug", "NUMBER", "aghecenco", "add", "the", "miss", "syscalls", "to", "the", "libc", "crate", "would", "definitely", "be", "cleaner", "but", "would", "that", "solve", "the", "issue", "We", "still", "need", "a", "way", "to", "check", "if", "a", "user", "supplied", "string", "be", "export", "as", "a", "variable", "from", "libc", "and", "read", "the", "value", "right", "Yeah", "but", "at", "least", "it", "can", "be", "autogenerated", "if", "libc", "export", "everything", "we", "need", "NUMBER", "Hi", "mi", "yu", "pyrito", "I", "add", "some", "thoughts", "on", "LINK", "microvm", "firecracker", "issue", "NUMBER", "issuecomment", "NUMBER", "WDYT", "Firecracker", "signal", "NUMBER", "rs", "code", "was", "refactored", "do", "the", "same", "in", "vmm", "sys", "util", "to", "consume", "the", "new", "version", "from", "there", "NUMBER", "Do", "you", "have", "a", "quick", "reference", "resource", "you", "can", "link", "that", "explains", "why", "moving", "the", "crates", "under", "src", "be", "tidy", "while", "the", "current", "state", "be", "not", "Makes", "sense", "NUMBER", "I", "thought", "we", "enable", "some", "Cargo", "magic", "as", "well", "that", "we", "were", "previously", "miss", "NUMBER", "Hello", "I", "would", "like", "to", "work", "on", "this", "NUMBER", "From", "my", "understanding", "the", "issue", "be", "that", "the", "docs", "should", "be", "extend", "to", "show", "how", "to", "configure", "and", "boot", "the", "vm", "after", "it", "be", "configured", "Signed", "off", "by", "Andrei", "Sandu", "TAG", "Reason", "for", "This", "PR", "NUMBER", "Implement", "Pollable", "PollableOps", "Implement", "EventManager", "and", "EventHandler", "trait", "NUMBER", "Implement", "channel", "for", "sending", "PollableOps", "Unit", "test", "Description", "of", "Changes", "Provided", "in", "commit", "message", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "The", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "Newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "firecracker", "microvm", "compute", "capsule", "I", "d", "like", "to", "prioritize", "this", "PR", "so", "that", "we", "unblock", "LINK", "microvm", "firecracker", "issue", "NUMBER", "Blimey", "NUMBER", "file", "change", "to", "re", "review", "Just", "wanted", "to", "mention", "a", "couple", "of", "very", "high", "level", "points", "that", "might", "be", "worth", "taking", "into", "consideration", "here", "NUMBER", "I", "didn", "t", "create", "tasks", "since", "I", "don", "t", "have", "a", "detailed", "design", "NUMBER", "Modularity", "A", "virtual", "net", "device", "be", "mostly", "an", "intermediary", "NUMBER", "It", "forwards", "Ethernet", "frames", "from", "the", "host", "or", "MMDS", "to", "the", "guest", "and", "vice", "versa", "NUMBER", "If", "we", "consider", "its", "purpose", "and", "also", "take", "into", "account", "special", "cases", "where", "a", "frame", "can", "t", "be", "forwarded", "because", "of", "lack", "of", "space", "or", "other", "constraints", "a", "basic", "net", "device", "could", "contain", "only", "frame", "forwarding", "frame", "buffering", "and", "constraints", "checking", "e", "NUMBER", "g", "NUMBER", "rate", "limiting", "logic", "NUMBER", "In", "the", "Firecracker", "net", "device", "this", "basic", "logic", "be", "also", "coupled", "with", "some", "extra", "logic", "NUMBER", "In", "order", "to", "keep", "the", "net", "device", "as", "simple", "as", "possible", "it", "would", "be", "nice", "to", "decouple", "this", "extra", "logic", "in", "different", "components", "NUMBER", "At", "least", "NUMBER", "come", "to", "mind", "a", "FrontEnd", "or", "GuestEnd", "that", "would", "contain", "the", "logic", "for", "reading", "write", "to", "virtio", "queues", "NUMBER", "It", "could", "just", "implement", "Read", "and", "Write", "pub", "struct", "GuestEnd", "queues", "Vec", "TAG", "queue_evts", "Vec", "TAG", "interrupt_evt", "EventFd", "impl", "GuestEnd", "pub", "fn", "write", "mut", "self", "frame", "u", "NUMBER", "mem", "GuestMemoryMmap", "Result", "TAG", "NUMBER", "pub", "fn", "read", "mut", "self", "frame", "mut", "u", "NUMBER", "mem", "GuestMemoryMmap", "Result", "TAG", "NUMBER", "pub", "fn", "interrupt", "self", "Result", "TAG", "NUMBER", "a", "BackEnd", "or", "HostEnd", "that", "would", "contain", "the", "logic", "for", "wrouting", "to", "the", "MMDS", "or", "tap", "NUMBER", "Also", "It", "could", "simply", "implement", "Read", "and", "Write", "NUMBER", "a", "special", "structure", "for", "handle", "frame", "buffering", "Performance", "it", "would", "be", "nice", "if", "we", "could", "simplify", "and", "improve", "the", "frame", "deferring", "strategy", "NUMBER", "Notification", "suppression", "would", "be", "an", "option", "here", "NUMBER", "Implement", "epoll", "wrappers", "in", "EventManager", "crate", "NUMBER", "Continue", "implementation", "based", "on", "the", "work", "prototype", "in", "this", "pull", "request", "LINK", "microvm", "firecracker", "pull", "NUMBER", "NUMBER", "TODO", "list", "Error", "handle", "API", "change", "Unit", "test", "Crate", "documentation", "I", "contributed", "with", "the", "following", "PRs", "so", "far", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "PRs", "for", "remove", "tempfile", "dependency", "in", "rust", "vmm", "vm", "memory", "LINK", "vmm", "vmm", "sys", "util", "pull", "NUMBER", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "LINK", "vmm", "vmm", "sys", "util", "pull", "NUMBER", "LINK", "vmm", "vmm", "sys", "util", "pull", "NUMBER", "PRs", "containing", "documentation", "improvement", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "LINK", "microvm", "firecracker", "pull", "NUMBER", "makes", "the", "switch", "to", "vm", "memory", "so", "it", "s", "safe", "to", "say", "the", "crate", "has", "be", "examined", "NUMBER", "We", "want", "to", "be", "able", "to", "accelerate", "certain", "snapshot", "usecases", "where", "the", "Guest", "Memory", "be", "host", "file", "mmap", "ed", "NUMBER", "Implement", "support", "for", "this", "in", "the", "GuestMemory", "crate", "NUMBER", "An", "alternative", "option", "be", "to", "use", "LINK", "vmm", "vm", "memory", "which", "already", "provides", "this", "support", "NUMBER", "This", "was", "solve", "by", "switching", "to", "rust", "vmm", "vm", "memory", "which", "happened", "in", "NUMBER", "kvm", "bindings", "offers", "us", "FFI", "structs", "use", "by", "the", "KVM", "api", "NUMBER", "We", "need", "to", "implement", "de", "serialization", "mechanisms", "for", "said", "structs", "NUMBER", "kvm", "ioctls", "v", "NUMBER", "will", "contain", "support", "for", "previously", "miss", "Vcpu", "serialization", "and", "deserialization", "KVM_GET_CPUID", "NUMBER", "KVM_GET_MP_STATE", "KVM_SET_MP_STATE", "KVM_GET_VCPU_EVENTS", "KVM_SET_VCPU_EVENTS", "KVM_GET_DEBUGREGS", "KVM_SET_DEBUGREGS", "KVM_GET_XSAVE", "KVM_SET_XSAVE", "KVM_GET_XCRS", "KVM_SET_XCRS", "Vm", "serialization", "and", "deserialization", "KVM_GET_IRQCHIP", "KVM_SET_IRQCHIP", "KVM_GET_PIT", "NUMBER", "KVM_SET_PIT", "NUMBER", "KVM_GET_CLOCK", "KVM_SET_CLOCK", "Currently", "blocked", "on", "creating", "a", "new", "kvm", "ioctls", "release", "LINK", "vmm", "kvm", "ioctls", "issue", "NUMBER", "Also", "blocked", "on", "LINK", "microvm", "firecracker", "issue", "NUMBER", "New", "kvm", "ioctls", "uses", "vmm_sys_util", "EventFd", "from", "while", "firecracker", "uses", "sys_util", "EventFd", "NUMBER", "just", "replace", "the", "occurrence", "of", "sys_util", "EventFd", "with", "vmm", "sys", "util", "Eventfd", "easier", "said", "than", "do", "NUMBER", "It", "s", "also", "throwaway", "work", "NUMBER", "make", "sure", "we", "take", "the", "time", "that", "we", "need", "for", "switching", "to", "vmm", "sys", "util", "definitely", "take", "the", "required", "time", "but", "I", "consider", "NUMBER", "to", "now", "be", "higher", "priority", "because", "it", "s", "blocking", "use", "the", "new", "kvm", "ioctls", "NUMBER", "It", "s", "just", "a", "matter", "of", "prioritization", "not", "about", "quality", "or", "rash", "decisions", "NUMBER", "dhrgit", "be", "reworking", "this", "area", "right", "now", "and", "will", "add", "clean", "support", "for", "keep", "the", "test", "session", "while", "use", "devtool", "as", "part", "of", "NUMBER", "he", "said", "he", "will", "post", "a", "PR", "soon", "NUMBER", "marcov", "I", "suggest", "you", "not", "spend", "time", "to", "patch", "the", "current", "devtool", "as", "it", "will", "probably", "be", "throw", "away", "work", "NUMBER", "I", "guess", "we", "can", "keep", "just", "the", "KEEP_TEST_SESSION", "functionality", "in", "this", "PR", "which", "will", "provide", "enough", "support", "in", "the", "meantime", "NUMBER", "We", "ve", "discussed", "live", "and", "in", "cases", "where", "all", "touched", "code", "has", "better", "or", "same", "coverage", "it", "be", "fine", "to", "adjust", "overall", "coverage", "if", "necessary", "because", "of", "rounding", "off", "error", "or", "because", "deriving", "Debug", "or", "because", "some", "covered", "code", "has", "be", "completely", "remove", "and", "the", "overall", "percentage", "decreases", "NUMBER", "We", "ve", "discussed", "live", "and", "in", "cases", "where", "all", "touched", "code", "has", "better", "or", "same", "coverage", "it", "be", "fine", "to", "adjust", "overall", "coverage", "if", "necessary", "because", "of", "rounding", "off", "error", "or", "because", "deriving", "Debug", "or", "because", "some", "covered", "code", "has", "be", "completely", "remove", "and", "the", "overall", "percentage", "decreases", "NUMBER", "What", "I", "fear", "in", "this", "case", "be", "that", "if", "we", "drop", "the", "coverage", "bar", "to", "NUMBER", "the", "coverage", "test", "will", "fail", "on", "arm", "because", "the", "value", "there", "exceeds", "the", "threshold", "NUMBER", "We", "need", "to", "adjust", "the", "delta", "too", "NUMBER", "AFAIK", "there", "be", "no", "coverage", "test", "on", "aarch", "NUMBER", "as", "kcov", "be", "not", "support", "there", "disappointed", "We", "can", "also", "relax", "the", "delta", "maybe", "in", "a", "separate", "PR", "so", "we", "can", "comment", "on", "it", "NUMBER", "During", "our", "presentation", "at", "KVM", "Forum", "about", "Firecracker", "we", "get", "a", "suggestion", "for", "an", "improvement", "that", "we", "could", "do", "to", "our", "seccomp", "filters", "NUMBER", "Instead", "of", "having", "a", "static", "list", "of", "syscalls", "that", "be", "allow", "we", "can", "let", "the", "users", "of", "Firecracker", "to", "pass", "a", "list", "of", "syscalls", "that", "it", "wants", "to", "allow", "NUMBER", "This", "feature", "can", "help", "in", "two", "cases", "If", "you", "miss", "to", "add", "a", "syscall", "to", "the", "allow", "list", "instead", "of", "needing", "to", "create", "a", "new", "Firecracker", "binary", "you", "can", "just", "update", "the", "file", "containing", "the", "syscalls", "If", "you", "don", "t", "use", "statically", "linked", "binaries", "i", "NUMBER", "e", "NUMBER", "the", "musl", "build", "of", "Firecracker", "it", "be", "hard", "to", "have", "a", "minimal", "list", "of", "all", "syscalls", "because", "it", "be", "highly", "dependent", "on", "the", "dependencies", "version", "NUMBER", "In", "this", "case", "the", "Firecracker", "user", "can", "provide", "the", "list", "that", "be", "targeted", "for", "the", "workload", "platform", "and", "other", "possible", "dependencies", "NUMBER", "After", "giving", "this", "issue", "some", "more", "thought", "we", "ve", "come", "up", "with", "a", "base", "set", "of", "requirements", "and", "some", "ideas", "Key", "points", "to", "address", "NUMBER", "Architecture", "NUMBER", "Whitelist", "structure", "the", "whitelist", "differs", "between", "x", "NUMBER", "_", "NUMBER", "and", "aarch", "NUMBER", "as", "certain", "syscalls", "be", "only", "call", "on", "one", "of", "the", "NUMBER", "architectures", "NUMBER", "NUMBER", "Syscall", "numbers", "even", "where", "the", "whitelist", "be", "identical", "the", "syscall", "numbers", "can", "differ", "NUMBER", "This", "be", "relevant", "as", "it", "would", "impede", "users", "from", "specify", "syscall", "numbers", "in", "the", "filter", "file", "NUMBER", "NUMBER", "Toolchain", "GNU", "libc", "issue", "different", "syscalls", "than", "musl", "libc", "NUMBER", "NUMBER", "Thread", "the", "whitelist", "should", "be", "specific", "to", "the", "thread", "on", "which", "it", "s", "applied", "NUMBER", "This", "be", "not", "yet", "implement", "NUMBER", "See", "LINK", "microvm", "firecracker", "issue", "NUMBER", "part", "of", "the", "larger", "seccomp", "improvement", "bundle", "LINK", "microvm", "firecracker", "issue", "NUMBER", "NUMBER", "Security", "by", "default", "Firecracker", "s", "default", "behavior", "should", "remain", "unchanged", "i", "NUMBER", "e", "NUMBER", "unless", "the", "user", "explicitly", "relaxes", "the", "seccomp", "filters", "the", "process", "should", "run", "as", "restricted", "as", "possible", "NUMBER", "Analogous", "to", "the", "current", "default", "setting", "of", "seccomp", "level", "NUMBER", "we", "will", "need", "to", "convert", "the", "hardcoded", "filters", "into", "default", "filter", "file", "NUMBER", "NUMBER", "VMM", "flexibility", "as", "of", "LINK", "microvm", "firecracker", "pull", "NUMBER", "the", "filters", "be", "build", "before", "the", "VMM", "be", "instantiated", "and", "pass", "to", "the", "VMM", "thread", "NUMBER", "This", "functionality", "needs", "to", "stay", "in", "place", "NUMBER", "NUMBER", "User", "experience", "We", "do", "not", "want", "to", "complicate", "things", "for", "users", "and", "should", "aim", "for", "the", "opposite", "NUMBER", "The", "filter", "file", "must", "be", "clear", "and", "concise", "NUMBER", "Proposal", "idea", "A", "new", "seccomp", "level", "file", "be", "introduce", "work", "in", "tandem", "with", "a", "new", "command", "line", "parameter", "filters", "NUMBER", "The", "filters", "parameter", "do", "not", "make", "sense", "without", "seccomp", "level", "file", "and", "be", "ignored", "in", "combination", "with", "anything", "else", "NUMBER", "seccomp", "level", "file", "requires", "the", "filters", "parameter", "to", "be", "specified", "and", "exits", "the", "Firecracker", "process", "if", "it", "be", "not", "NUMBER", "The", "exist", "options", "for", "seccomp", "level", "be", "keep", "for", "usability", "and", "backwards", "compatibility", "but", "can", "be", "obsoleted", "and", "deprecate", "later", "NUMBER", "The", "filters", "parameter", "takes", "a", "JSON", "file", "containing", "rules", "NUMBER", "If", "seccomp", "level", "file", "be", "specified", "and", "the", "default", "rules", "overridden", "the", "user", "assumes", "full", "responsibility", "for", "the", "correctness", "of", "the", "filters", "NUMBER", "The", "currently", "hardcoded", "filters", "need", "to", "be", "converted", "or", "autogenerated", "from", "the", "Rust", "code", "NUMBER", "The", "corresponding", "file", "will", "be", "include", "in", "the", "Firecracker", "source", "tree", "NUMBER", "We", "can", "explore", "the", "possibility", "of", "bundling", "them", "in", "the", "binary", "to", "simplify", "deployment", "UX", "NUMBER", "bash", "seccomp", "level", "NUMBER", "seccomp", "disabled", "NUMBER", "filters", "loaded", "from", "path", "to", "basic", "filters", "NUMBER", "json", "NUMBER", "filters", "loaded", "from", "path", "to", "advance", "filters", "NUMBER", "json", "file", "filters", "path", "to", "custom", "NUMBER", "filters", "NUMBER", "json", "Rule", "file", "format", "thread", "syscall_name", "Rule", "NUMBER", "arg_idx", "idx", "NUMBER", "arg_type", "type", "NUMBER", "op", "op", "NUMBER", "val", "val", "NUMBER", "NUMBER", "arg_idx", "idxN", "arg_type", "typeN", "op", "opN", "val", "valN", "NUMBER", "Rule", "K", "arg_idx", "idx", "NUMBER", "arg_type", "type", "NUMBER", "op", "op", "NUMBER", "val", "val", "NUMBER", "NUMBER", "arg_idx", "idxM", "arg_type", "typeM", "op", "opM", "val", "valM", "Rules", "NUMBER", "to", "K", "be", "logically", "OR", "bound", "only", "one", "of", "the", "rules", "needs", "to", "hold", "for", "the", "filter", "to", "match", "NUMBER", "All", "the", "conditions", "that", "comprise", "a", "rule", "be", "logically", "AND", "bound", "all", "of", "a", "rule", "s", "conditions", "must", "be", "met", "for", "the", "rule", "to", "hold", "NUMBER", "Neither", "the", "architecture", "nor", "the", "libc", "implementation", "be", "mention", "in", "the", "file", "NUMBER", "thread", "can", "be", "one", "of", "api", "vmm", "or", "vcpu", "NUMBER", "Syscalls", "be", "specified", "by", "name", "not", "by", "number", "NUMBER", "The", "translation", "needs", "to", "be", "implement", "in", "Firecracker", "an", "autogenerated", "toolchain", "dependent", "hardcoded", "map", "syscall", "name", "syscall", "number", "NUMBER", "The", "same", "applies", "to", "named", "parameters", "imported", "from", "libc", "which", "can", "also", "have", "different", "values", "NUMBER", "Simplifying", "assumptions", "and", "restrictions", "Neither", "integrity", "checks", "nor", "validations", "nor", "conflict", "resolution", "be", "performed", "on", "rules", "loaded", "from", "user", "specified", "file", "NUMBER", "The", "filters", "can", "only", "be", "specified", "at", "process", "startup", "time", "through", "the", "command", "line", "argument", "NUMBER", "There", "be", "no", "API", "call", "for", "seccomp", "configurations", "nor", "has", "there", "be", "the", "need", "for", "one", "NUMBER", "The", "filters", "cannot", "be", "update", "at", "runtime", "NUMBER", "The", "filter", "be", "expressed", "as", "a", "map", "so", "the", "syscalls", "be", "not", "sorted", "by", "relevance", "NUMBER", "Having", "the", "most", "frequently", "use", "syscalls", "earlier", "in", "the", "filter", "be", "an", "optimization", "heuristic", "based", "on", "the", "idea", "that", "the", "kernel", "will", "have", "fewer", "rules", "to", "go", "through", "for", "each", "syscall", "NUMBER", "The", "JSON", "file", "do", "not", "make", "it", "obvious", "to", "the", "user", "that", "rules", "be", "OR", "bound", "and", "conditions", "within", "a", "rule", "be", "AND", "bound", "NUMBER", "The", "format", "could", "be", "extend", "with", "explicit", "operators", "i", "NUMBER", "e", "NUMBER", "rules", "and", "conditions", "within", "a", "rule", "could", "be", "expressed", "as", "dicts", "OR", "TAG", "AND", "TAG", "NUMBER", "Example", "json", "vmm", "SYS_accept", "NUMBER", "SYS_futex", "arg_idx", "NUMBER", "arg_type", "DWORD", "op", "Eq", "val", "FUTEX_WAIT_PRIVATE", "arg_idx", "NUMBER", "arg_type", "DWORD", "op", "Eq", "val", "FUTEX_WAKE_PRIVATE", "vcpu", "SYS_ioctl", "arg_idx", "NUMBER", "arg_type", "DWORD", "op", "Eq", "val", "KVM_SET_REGS", "arg_idx", "NUMBER", "arg_type", "DWORD", "op", "Eq", "val", "KVM_SET_SREGS", "Good", "callout", "I", "had", "that", "idea", "at", "one", "point", "but", "after", "bouncing", "it", "off", "the", "team", "I", "think", "it", "s", "better", "to", "keep", "things", "simple", "and", "not", "bring", "regexes", "into", "the", "matter", "NUMBER", "We", "can", "stick", "with", "vmm", "vcpu", "and", "api", "categories", "NUMBER", "I", "update", "the", "example", "NUMBER", "Follow", "NUMBER", "s", "example", "and", "remove", "byteorder", "from", "aforementioned", "crates", "too", "NUMBER", "dianpopa", "dhrgit", "petreeftime", "I", "ve", "update", "this", "PR", "with", "the", "current", "logger", "and", "metrics", "decoupling", "implementation", "NUMBER", "Please", "take", "another", "look", "A", "few", "nits", "NUMBER", "Question", "I", "don", "t", "think", "we", "need", "the", "infamous", "preinitialized", "or", "configured", "the", "current", "name", "be", "needed", "anymore", "NUMBER", "This", "was", "a", "workaround", "that", "we", "introduce", "so", "that", "we", "can", "have", "logs", "when", "starting", "Firecracker", "NUMBER", "We", "can", "now", "have", "logs", "by", "configuring", "Firecracker", "from", "the", "start", "of", "the", "process", "NUMBER", "Can", "we", "remove", "that", "workaround", "It", "can", "be", "do", "in", "another", "PR", "to", "not", "clutter", "this", "one", "but", "I", "think", "we", "should", "do", "this", "before", "publishing", "a", "new", "version", "of", "Firecracker", "NUMBER", "WDYT", "From", "what", "I", "recall", "even", "with", "this", "type", "of", "configuration", "for", "the", "logger", "panic", "set_hook", "would", "still", "be", "problematic", "because", "we", "can", "t", "be", "sure", "whether", "to", "use", "error", "or", "println", "NUMBER", "Description", "of", "Changes", "Added", "chunking", "capabilities", "to", "micro_http", "HttpConnection", "and", "transitively", "to", "micro_http", "HttpServer", "and", "the", "API", "server", "NUMBER", "If", "a", "client", "wants", "to", "send", "a", "big", "request", "say", "an", "MMDS", "request", "of", "NUMBER", "MiB", "they", "would", "most", "likely", "do", "it", "with", "the", "chunked", "transfer", "encoding", "NUMBER", "Furthermore", "the", "HTTP", "RFC", "NUMBER", "LINK", "section", "NUMBER", "state", "that", "all", "servers", "must", "support", "the", "chunked", "transfer", "encoding", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "The", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "The", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "What", "be", "the", "error", "message", "code", "number", "returned", "when", "it", "fail", "Reason", "for", "This", "PR", "The", "VMM", "has", "two", "field", "among", "others", "Vm", "and", "guest_mem", "NUMBER", "The", "Vm", "has", "another", "guest_mem", "field", "which", "be", "a", "clone", "of", "the", "one", "find", "in", "the", "VMM", "NUMBER", "Removed", "it", "from", "the", "VMM", "and", "use", "the", "one", "inside", "the", "Vm", "NUMBER", "Some", "error", "throw", "scenarios", "denoting", "programming", "error", "were", "transformed", "into", "expects", "NUMBER", "Description", "of", "Changes", "remove", "guest_mem", "field", "from", "VMM", "since", "it", "was", "a", "duplicate", "of", "vmm", "NUMBER", "vm", "NUMBER", "guest_mem", "transformed", "some", "error", "throw", "scenarios", "into", "expects", "adjusted", "unit", "test", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Hey", "we", "moved", "away", "from", "additional", "restrictions", "in", "the", "firecracker", "id", "NUMBER", "See", "PR", "LINK", "microvm", "firecracker", "pull", "NUMBER", "We", "don", "t", "want", "to", "enforce", "more", "restrictions", "as", "it", "would", "make", "the", "ID", "unusable", "by", "some", "of", "our", "customers", "NUMBER", "The", "workaround", "I", "think", "of", "be", "to", "apply", "the", "restrictions", "in", "this", "PR", "outside", "of", "Firecracker", "NUMBER", "Does", "this", "sound", "okay", "to", "you", "Firecracker", "do", "not", "have", "an", "i", "NUMBER", "device", "on", "aarch", "NUMBER", "NUMBER", "We", "could", "add", "the", "same", "level", "of", "emulation", "we", "do", "on", "x", "NUMBER", "_", "NUMBER", "that", "support", "the", "cpu", "reset", "event", "emulating", "Ctrl", "Alt", "Del", "keys", "combo", "Hi", "mprey", "We", "be", "now", "in", "a", "state", "where", "our", "code", "be", "no", "longer", "in", "massive", "flux", "NUMBER", "If", "you", "be", "interested", "in", "picking", "this", "up", "we", "d", "be", "happy", "for", "the", "contribution", "NUMBER", "Like", "andreeaflorescu", "said", "this", "should", "be", "broken", "down", "in", "at", "least", "two", "PRs", "_update", "block", "device", "permissions_", "involves", "virtio", "renegociation", "reactivation", "_update", "rate", "limiter", "for", "block", "device_", "fairly", "straightforward", "We", "don", "t", "support", "block", "device", "reset", "in", "Firecracker", "right", "now", "NUMBER", "We", "need", "to", "discuss", "whether", "this", "be", "something", "that", "we", "want", "to", "support", "NUMBER", "I", "vote", "yes", "here", "NUMBER", "As", "long", "as", "it", "doesn", "t", "over", "complicate", "our", "device", "management", "it", "shouldn", "t", "I", "believe", "the", "benefits", "outweigh", "the", "cost", "NUMBER", "xibz", "from", "a", "prioritization", "point", "of", "view", "which", "of", "the", "two", "patch", "drive", "permissions", "rate", "limiters", "would", "help", "you", "most", "Using", "this", "payload", "LINK", "city", "lots", "json", "for", "the", "PUT", "mmds", "command", "causes", "firecracker", "to", "terminate", "because", "of", "a", "blacklisted", "syscall", "mremap", "NUMBER", "Stack", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "c", "NUMBER", "in", "mremap", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "be", "NUMBER", "d", "in", "realloc", "NUMBER", "NUMBER", "x", "NUMBER", "ffff", "NUMBER", "ff", "NUMBER", "in", "NUMBER", "NUMBER", "x", "NUMBER", "in", "IMO", "the", "proposal", "sounds", "reasonable", "NUMBER", "But", "if", "we", "ever", "need", "to", "support", "huge", "payloads", "we", "could", "store", "the", "MMDS", "data", "in", "a", "temporary", "directory", "file", "structure", "on", "disk", "and", "only", "use", "a", "small", "buffer", "in", "Firecracker", "to", "stream", "the", "data", "via", "the", "API", "server", "NUMBER", "It", "wouldn", "t", "be", "as", "fast", "as", "an", "in", "memory", "data", "store", "but", "the", "memory", "footprint", "be", "reduced", "NUMBER", "You", "be", "correct", "streaming", "implies", "change", "in", "micro", "http", "NUMBER", "Docs", "be", "one", "way", "to", "address", "the", "limitation", "but", "I", "think", "we", "should", "at", "least", "look", "if", "it", "be", "possible", "to", "return", "an", "error", "to", "the", "user", "when", "the", "payload", "exceeds", "NUMBER", "KiB", "instead", "of", "triggering", "the", "mremap", "call", "NUMBER", "Possibly", "fix", "by", "NUMBER", "Needs", "investigation", "NUMBER", "Haven", "t", "yet", "looked", "at", "the", "code", "but", "wanted", "to", "call", "out", "the", "need", "for", "a", "better", "commit", "and", "PR", "summary", "the", "first", "line", "the", "title", "NUMBER", "It", "should", "summarize", "the", "intention", "of", "the", "change", "along", "with", "the", "area", "module", "they", "be", "in", "NUMBER", "There", "was", "a", "problem", "with", "the", "CI", "NUMBER", "I", "redeliver", "the", "webhook", "the", "status", "of", "the", "CI", "should", "be", "update", "in", "the", "next", "hour", "or", "so", "NUMBER", "Since", "Bare", "Metal", "Arm", "Based", "EC", "NUMBER", "Instances", "LINK", "available", "bare", "metal", "arm", "based", "ec", "NUMBER", "instances", "be", "now", "available", "we", "could", "try", "move", "our", "aarch", "NUMBER", "integration", "test", "there", "NUMBER", "Regarding", "sandreim", "s", "comment", "I", "agree", "it", "makes", "sense", "NUMBER", "There", "should", "be", "no", "reason", "to", "tie", "the", "MMDS", "to", "a", "specific", "network", "interface", "NUMBER", "I", "m", "not", "sure", "how", "your", "proposal", "fits", "in", "our", "code", "base", "how", "easy", "it", "be", "to", "make", "that", "happen", "but", "it", "be", "conceptually", "a", "better", "design", "NUMBER", "One", "obvious", "downside", "be", "that", "when", "having", "MMDS", "enable", "all", "interfaces", "will", "take", "a", "performance", "latency", "hit", "as", "they", "inspect", "dest", "ip", "of", "every", "outgoing", "packet", "NUMBER", "And", "I", "think", "that", "s", "fine", "NUMBER", "What", "do", "you", "think", "about", "change", "the", "Firecracker", "REST", "API", "to", "provide", "a", "separate", "endpoint", "for", "configuring", "the", "MMDS", "IPs", "while", "still", "keep", "the", "allow_mmds_requests", "flag", "on", "the", "interface", "configuration", "This", "sounds", "like", "the", "right", "solution", "to", "me", "NUMBER", "Regarding", "having", "a", "single", "stack", "instead", "of", "per", "interface", "mmds", "network", "stacks", "I", "don", "t", "think", "that", "it", "be", "easy", "to", "do", "NUMBER", "The", "simple", "tcp", "stack", "that", "we", "currently", "have", "do", "not", "AFAIK", "support", "multiplexed", "communication", "NUMBER", "There", "be", "a", "solution", "to", "this", "NUMBER", "Checkout", "format_code_in_doc_comments", "in", "LINK", "lang", "rustfmt", "blob", "master", "Configurations", "NUMBER", "md", "but", "it", "be", "not", "stable", "yet", "NUMBER", "We", "should", "poll", "on", "that", "and", "bring", "it", "in", "Firecracker", "once", "stable", "NUMBER", "wkozaczuk", "this", "be", "not", "implement", "in", "Firecracker", "because", "we", "be", "not", "following", "the", "virtio", "NUMBER", "specification", "but", "the", "NUMBER", "one", "NUMBER", "As", "I", "see", "it", "now", "the", "likelihood", "of", "this", "particular", "issue", "be", "fix", "before", "we", "completely", "switch", "to", "a", "virtio", "specification", "NUMBER", "be", "low", "NUMBER", "We", "be", "work", "on", "some", "improvement", "on", "the", "virtio", "devices", "in", "Firecracker", "and", "we", "should", "have", "some", "update", "in", "a", "couple", "of", "months", "NUMBER", "Is", "this", "issue", "blocking", "you", "in", "any", "way", "If", "yes", "we", "can", "see", "what", "steps", "we", "can", "take", "to", "address", "it", "faster", "NUMBER", "andreeaflorescu", "what", "do", "you", "mean", "when", "you", "say", "we", "be", "not", "following", "the", "virtio", "NUMBER", "specification", "We", "do", "negotiate", "the", "VIRTIO_F_VERSION_", "NUMBER", "LINK", "_config", "NUMBER", "h", "L", "NUMBER", "NUMBER", "We", "even", "have", "a", "link", "LINK", "microvm", "firecracker", "blob", "master", "devices", "src", "virtio", "net", "NUMBER", "rs", "L", "NUMBER", "in", "our", "net", "implementation", "that", "points", "to", "the", "v", "NUMBER", "spec", "NUMBER", "Description", "of", "Changes", "Instance", "state", "Halting", "and", "Halted", "were", "unuse", "unsupported", "NUMBER", "Removed", "them", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "petreeftime", "aghecenco", "please", "take", "another", "look", "NUMBER", "dianpopa", "andreeaflorescu", "It", "seems", "the", "CI", "could", "not", "start", "Should", "we", "re", "kick", "it", "Yes", "indeed", "sorry", "for", "that", "we", "still", "have", "no", "idea", "why", "that", "happens", "sometime", "NUMBER", "Please", "do", "a", "push", "f", "NUMBER", "Closing", "this", "PR", "since", "the", "same", "functionality", "can", "be", "achieved", "use", "config", "file", "option", "and", "auto", "generate", "clients", "from", "the", "swagger", "file", "See", "an", "example", "here", "LINK", "go", "sdk", "commit", "NUMBER", "ff", "NUMBER", "e", "NUMBER", "ce", "NUMBER", "e", "NUMBER", "cd", "NUMBER", "c", "NUMBER", "d", "NUMBER", "ed", "NUMBER", "caa", "NUMBER", "a", "NUMBER", "f", "NUMBER", "This", "behavior", "start", "manifesting", "itself", "after", "we", "switch", "to", "the", "last", "docker", "image", "NUMBER", "It", "be", "weird", "since", "the", "only", "difference", "be", "the", "fact", "that", "the", "last", "one", "contains", "screen", "as", "a", "service", "NUMBER", "For", "me", "it", "would", "be", "interesting", "seeing", "what", "happened", "there", "rather", "than", "trying", "to", "change", "this", "test", "NUMBER", "Hi", "Unlimited", "Witchcraft", "Thanks", "for", "logging", "this", "NUMBER", "I", "need", "to", "know", "what", "rootfs", "and", "kernel", "be", "you", "use", "for", "booting", "the", "guest", "Are", "you", "use", "the", "ones", "from", "the", "get", "start", "guide", "Also", "what", "be", "the", "specifications", "of", "the", "host", "you", "be", "test", "on", "Unlimited", "Witchcraft", "investigating", "this", "NUMBER", "Niiice", "looking", "forward", "to", "your", "PR", "NUMBER", "Closing", "in", "favor", "of", "NUMBER", "Patching", "a", "block", "device", "i", "NUMBER", "e", "NUMBER", "a", "backing", "file", "change", "should", "only", "fail", "during", "boot", "NUMBER", "More", "specifically", "the", "short", "window", "between", "machine", "start", "and", "virtio", "blk", "driver", "initialization", "NUMBER", "That", "s", "why", "the", "error", "be", "expected", "during", "that", "test", "the", "vm", "state", "be", "artificially", "set", "to", "Running", "while", "the", "device", "be", "not", "yet", "activated", "NUMBER", "However", "this", "behavior", "should", "be", "the", "same", "across", "both", "version", "NUMBER", "and", "NUMBER", "NUMBER", "sipsma", "can", "you", "please", "post", "some", "more", "details", "on", "the", "specific", "use", "case", "that", "leads", "to", "this", "error", "NUMBER", "The", "steps", "to", "reproduce", "would", "be", "great", "NUMBER", "I", "think", "it", "makes", "sense", "to", "treat", "the", "vsock", "connect", "procedure", "as", "an", "async", "connect", "i", "NUMBER", "e", "NUMBER", "one", "where", "you", "need", "to", "subsequently", "check", "the", "operation", "status", "NUMBER", "When", "connecting", "from", "the", "host", "to", "a", "guest", "listener", "which", "may", "not", "yet", "be", "there", "I", "suggest", "having", "the", "listener", "ack", "the", "connection", "via", "some", "sort", "of", "message", "such", "as", "the", "hello", "you", "mention", "but", "sent", "from", "guest", "to", "host", "i", "NUMBER", "e", "NUMBER", "HELLO", "host", "client", "like", "a", "server", "sending", "its", "banner", "as", "a", "greeting", "NUMBER", "This", "way", "on", "the", "host", "side", "after", "write", "CONNECT", "TAG", "you", "can", "try", "to", "read", "from", "the", "socket", "or", "poll", "it", "for", "reading", "and", "if", "the", "read", "be", "NUMBER", "sized", "retry", "since", "that", "means", "the", "connect", "call", "has", "fail", "the", "host", "side", "Unix", "socket", "connection", "has", "be", "close", "if", "the", "read", "yields", "the", "ack", "message", "banner", "hello", "w", "e", "it", "means", "the", "connection", "has", "be", "established", "and", "therefore", "the", "guest", "has", "booted", "up", "and", "reached", "userspace", "init", "NUMBER", "This", "looks", "like", "a", "Docker", "guest", "userspace", "specific", "problem", "NUMBER", "You", "don", "t", "need", "to", "attach", "multiple", "interfaces", "to", "the", "vm", "just", "like", "you", "wouldn", "t", "need", "multiple", "network", "cards", "on", "a", "bare", "metal", "host", "NUMBER", "Whatever", "network", "interface", "Docker", "creates", "be", "fully", "handle", "by", "the", "guest", "side", "software", "NUMBER", "Googling", "the", "error", "you", "be", "get", "will", "yield", "some", "results", "from", "people", "who", "have", "run", "into", "the", "same", "issue", "with", "Docker", "without", "Firecracker", "NUMBER", "Currently", "Firecracker", "support", "emulating", "only", "NUMBER", "virtio", "devices", "on", "x", "NUMBER", "_", "NUMBER", "since", "each", "device", "gets", "assigned", "its", "own", "IRQ", "NUMBER", "This", "issue", "will", "track", "add", "support", "for", "sharing", "a", "single", "IRQ", "across", "multiple", "devices", "thus", "remove", "the", "limit", "imposed", "on", "the", "number", "of", "emulated", "devices", "NUMBER", "Hi", "dianpopa", "I", "have", "already", "update", "NUMBER", "Feel", "free", "to", "take", "a", "look", "thanks", "Cool", "I", "will", "take", "a", "look", "asap", "NUMBER", "Hi", "dianpopa", "I", "have", "already", "update", "NUMBER", "Feel", "free", "to", "take", "a", "look", "thanks", "Cool", "I", "will", "take", "a", "look", "asap", "NUMBER", "Up", "until", "then", "seems", "there", "be", "some", "style", "relate", "test", "that", "be", "fail", "your", "PR", "NUMBER", "Try", "run", "cargo", "fmt", "all", "for", "each", "of", "your", "commit", "NUMBER", "There", "be", "a", "few", "things", "left", "to", "do", "Update", "the", "description", "of", "change", "the", "narrative", "still", "describes", "the", "old", "solution", "You", "need", "to", "rebase", "and", "solve", "conflict", "NUMBER", "I", "m", "not", "sure", "about", "this", "change", "NUMBER", "I", "understand", "how", "it", "simplifies", "things", "when", "build", "the", "FDT", "but", "personally", "I", "don", "t", "like", "the", "idea", "of", "use", "a", "Vec", "instead", "of", "a", "HashMap", "here", "and", "implement", "get_device", "and", "remove_device_info", "by", "iterating", "over", "the", "entire", "collection", "NUMBER", "I", "don", "t", "have", "a", "better", "idea", "right", "now", "but", "I", "would", "look", "for", "alternatives", "before", "merge", "this", "NUMBER", "I", "m", "curiousif", "there", "be", "any", "other", "opinions", "here", "NUMBER", "firecracker", "microvm", "compute", "capsule", "The", "number", "of", "devices", "a", "VM", "can", "have", "be", "already", "limited", "by", "the", "number", "of", "IRQs", "you", "have", "at", "your", "disposal", "which", "actually", "deems", "the", "use", "of", "a", "hashmap", "useless", "NUMBER", "Iterating", "over", "a", "NUMBER", "entries", "NUMBER", "NUMBER", "in", "the", "case", "of", "aarch", "NUMBER", "stored", "in", "a", "Vec", "be", "insignificant", "as", "far", "as", "performance", "NUMBER", "Another", "observation", "be", "that", "remove_device_info", "be", "use", "only", "in", "test", "NUMBER", "The", "only", "operation", "in", "dev", "code", "be", "get_device", "NUMBER", "Fixed", "by", "NUMBER", "Reason", "for", "This", "PR", "Decouple", "the", "destination", "for", "flushing", "logs", "and", "metrics", "currently", "a", "FIFO", "from", "the", "logger", "crate", "NUMBER", "Description", "of", "Changes", "struct", "Logger", "now", "can", "receive", "any", "byte", "oriented", "sink", "NUMBER", "It", "only", "requires", "it", "to", "implement", "the", "Write", "trait", "NUMBER", "If", "the", "Logger", "has", "not", "be", "initialized", "no", "error", "will", "be", "throw", "when", "trying", "to", "flush", "metrics", "NUMBER", "However", "the", "developer", "be", "informed", "of", "whether", "or", "not", "the", "metrics", "have", "actually", "be", "flushed", "to", "disk", "by", "looking", "at", "the", "bool", "wrapped", "inside", "the", "Result", "returned", "NUMBER", "The", "Logger", "writer", "i", "NUMBER", "e", "PipeLogWrite", "was", "moved", "to", "vmm", "NUMBER", "Some", "unit", "test", "improvement", "for", "the", "logger", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "x", "The", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "petreeftime", "acatangiu", "please", "re", "review", "after", "push", "f", "NUMBER", "Running", "cargo", "doc", "open", "inside", "the", "root", "project", "opens", "an", "empty", "HTML", "page", "NUMBER", "My", "guess", "be", "that", "it", "looks", "inside", "the", "src", "main", "NUMBER", "rs", "file", "where", "we", "do", "not", "have", "any", "doc", "NUMBER", "acatangiu", "can", "you", "please", "review", "your", "request", "change", "If", "I", "understand", "this", "correctly", "you", "be", "trying", "to", "connect", "to", "the", "guest", "before", "it", "actually", "had", "a", "chance", "to", "boot", "up", "and", "start", "an", "AF_VSOCK", "listener", "NUMBER", "If", "that", "s", "so", "then", "IMO", "terminating", "the", "host", "connection", "be", "the", "correct", "behavior", "since", "the", "host", "be", "trying", "to", "connect", "to", "something", "that", "isn", "t", "there", "NUMBER", "The", "VMM", "be", "not", "privy", "to", "user", "space", "actions", "such", "as", "starting", "socket", "listeners", "so", "IMO", "it", "shouldn", "t", "have", "the", "responsibility", "of", "ensuring", "proper", "timing", "concerning", "said", "actions", "NUMBER", "I", "m", "not", "sure", "I", "understand", "what", "timeout", "that", "would", "be", "NUMBER", "In", "the", "use", "case", "I", "mention", "there", "be", "no", "timeout", "involved", "the", "host", "connection", "be", "immediately", "refused", "by", "the", "guest", "since", "there", "be", "no", "listeners", "present", "NUMBER", "Also", "I", "don", "t", "really", "understand", "how", "this", "would", "work", "with", "vhost", "either", "NUMBER", "When", "use", "vhost", "were", "you", "issue", "an", "AF_VSOCK", "connect", "call", "right", "after", "InstanceStart", "I", "don", "t", "see", "how", "that", "could", "ve", "worked", "reliably", "NUMBER", "Unless", "some", "AF_VSOCK", "socket", "be", "bound", "and", "listened", "to", "on", "the", "guest", "any", "incoming", "connection", "would", "get", "immediately", "refused", "NUMBER", "Is", "there", "something", "I", "m", "miss", "devimc", "When", "you", "connect", "to", "the", "Firecracker", "unix", "socket", "and", "write", "a", "CONNECT", "TAG", "command", "a", "vsock", "connection", "request", "packet", "be", "queued", "by", "Firecracker", "NUMBER", "That", "request", "packet", "will", "reach", "the", "guest", "only", "after", "the", "guest", "vsock", "driver", "has", "had", "a", "chance", "to", "initialize", "and", "make", "some", "RX", "buffers", "available", "the", "connection", "request", "packet", "be", "sent", "to", "the", "guest", "via", "an", "RX", "buffer", "NUMBER", "So", "if", "you", "send", "the", "CONNECT", "TAG", "command", "before", "the", "guest", "be", "fully", "booted", "up", "chances", "be", "that", "the", "connection", "request", "packet", "sent", "by", "Firecracker", "will", "reach", "the", "guest", "socket", "layer", "sometime", "between", "vsock", "driver", "initialization", "and", "the", "guest", "userspace", "app", "binding", "listening", "to", "the", "AF_VSOCK", "TAG", "NUMBER", "This", "means", "your", "connection", "will", "be", "refused", "cause", "Firecracker", "to", "sever", "the", "host", "unix", "connection", "leading", "to", "an", "EOF", "NUMBER", "length", "read", "on", "your", "connected", "unix", "socket", "NUMBER", "I", "don", "t", "fully", "understand", "the", "flow", "you", "be", "describing", "that", "leads", "to", "EOT", "NUMBER", "I", "m", "guessing", "this", "behavior", "be", "implement", "by", "some", "higher", "level", "software", "above", "the", "socket", "layer", "NUMBER", "If", "you", "want", "to", "connect", "to", "an", "uninitialized", "guest", "though", "I", "would", "advise", "against", "it", "my", "suggestion", "be", "to", "use", "a", "nonblocking", "socket", "on", "the", "host", "side", "and", "have", "your", "guest", "listening", "agent", "ack", "client", "connections", "via", "some", "kind", "of", "message", "NUMBER", "Then", "at", "the", "host", "end", "immediately", "after", "connect", "TAG", "you", "could", "poll", "your", "socket", "for", "read", "events", "EPOLLIN", "to", "check", "on", "the", "success", "status", "of", "your", "connection", "i", "NUMBER", "e", "NUMBER", "a", "NUMBER", "length", "read", "means", "your", "connection", "was", "refused", "while", "an", "ack", "message", "from", "your", "agent", "indicates", "a", "successful", "connection", "NUMBER", "I", "m", "NUMBER", "Judging", "by", "the", "error", "you", "be", "get", "Invalid", "request", "and", "or", "path", "it", "looks", "like", "the", "Firecracker", "binary", "you", "be", "use", "was", "build", "without", "experimental", "vsock", "support", "NUMBER", "In", "Firecracker", "version", "prior", "to", "NUMBER", "vsock", "was", "include", "as", "an", "experimental", "compile", "time", "feature", "that", "was", "not", "enable", "by", "default", "NUMBER", "In", "order", "to", "use", "vsock", "Firecracker", "needed", "to", "be", "build", "with", "feature", "vsock", "i", "NUMBER", "e", "NUMBER", "devtool", "build", "release", "feature", "vsock", "NUMBER", "marcov", "it", "looks", "like", "the", "test", "be", "fail", "on", "both", "x", "NUMBER", "_", "NUMBER", "and", "aarch", "NUMBER", "I", "think", "it", "be", "because", "of", "a", "rebase", "LINK", "microvm", "firecracker", "blob", "NUMBER", "fd", "NUMBER", "fee", "NUMBER", "f", "NUMBER", "e", "NUMBER", "db", "NUMBER", "c", "NUMBER", "ef", "NUMBER", "e", "NUMBER", "b", "NUMBER", "b", "NUMBER", "d", "vmm", "src", "lib", "NUMBER", "rs", "L", "NUMBER", "Can", "you", "fix", "the", "fail", "test", "You", "will", "need", "NUMBER", "reviewer", "for", "you", "PR", "NUMBER", "I", "ll", "try", "to", "find", "someone", "tomorrow", "NUMBER", "Also", "relate", "to", "NUMBER", "Reason", "for", "This", "PR", "Release", "v", "NUMBER", "Description", "of", "Changes", "Fixed", "some", "typo", "left", "behind", "in", "docs", "vsock", "NUMBER", "md", "NUMBER", "Updated", "CHANGELOG", "NUMBER", "md", "with", "all", "user", "facing", "change", "since", "v", "NUMBER", "Fixed", "CHANGELOG", "NUMBER", "md", "line", "length", "format", "NUMBER", "Updated", "Firecracker", "version", "via", "devtool", "prepare_release", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "andreeaflorescu", "iulianbarbu", "acatangiu", "sandreim", "I", "have", "update", "the", "PR", "NUMBER", "Please", "re", "review", "NUMBER", "Before", "I", "forget", "The", "highlevel", "documentation", "of", "the", "crate", "also", "needs", "to", "be", "update", "specifically", "the", "documentation", "in", "src", "lib", "NUMBER", "rs", "NUMBER", "You", "have", "two", "commit", "with", "the", "same", "description", "I", "think", "that", "might", "be", "because", "of", "a", "rebase", "gone", "wrong", "NUMBER", "Check", "commit", "NUMBER", "NUMBER", "and", "NUMBER", "NUMBER", "I", "will", "not", "have", "to", "look", "at", "this", "PR", "any", "time", "soon", "NUMBER", "Please", "feel", "free", "to", "get", "another", "approval", "and", "I", "will", "do", "a", "post", "factum", "review", "after", "the", "PR", "be", "merge", "when", "I", "have", "some", "more", "time", "NUMBER", "Close", "in", "favor", "of", "LINK", "microvm", "firecracker", "pull", "NUMBER", "I", "have", "experimented", "around", "a", "bit", "with", "this", "issue", "and", "it", "seems", "the", "cost", "of", "doing", "this", "would", "outweigh", "the", "benefits", "NUMBER", "However", "we", "can", "use", "the", "parsing", "logic", "in", "HttpConnection", "in", "dumbo", "MMDS", "where", "Request", "try_from", "be", "currently", "use", "NUMBER", "This", "change", "would", "mean", "instantiating", "an", "HttpConnection", "and", "calling", "try_read", "on", "the", "byte", "slice", "that", "was", "pass", "in", "Request", "try_from", "as", "it", "satisfies", "the", "constraints", "NUMBER", "shakram", "NUMBER", "since", "this", "PR", "be", "affected", "by", "NUMBER", "please", "rebase", "and", "solve", "conflict", "so", "that", "reviewer", "read", "clean", "code", "NUMBER", "Thanks", "bchalios", "Could", "we", "get", "a", "review", "of", "this", "PR", "from", "any", "of", "the", "maintainers", "please", "cc", "dianpopa", "andreeaflorescu", "Thanks", "in", "advance", "Yes", "I", "will", "definitely", "review", "this", "NUMBER", "It", "has", "be", "a", "busy", "period", "in", "terms", "of", "PR", "reviews", "but", "I", "will", "prioritize", "this", "and", "come", "back", "to", "you", "asap", "NUMBER", "I", "came", "around", "this", "while", "looking", "at", "this", "issue", "LINK", "microvm", "firecracker", "go", "sdk", "issue", "NUMBER", "which", "was", "fix", "by", "this", "PR", "LINK", "microvm", "firecracker", "go", "sdk", "pull", "NUMBER", "samuelkarp", "I", "be", "wondering", "if", "this", "issue", "be", "still", "relevant", "Related", "to", "your", "previous", "question", "If", "the", "MMDS", "be", "really", "holding", "arbitrary", "data", "arbitrary", "bytes", "can", "it", "just", "return", "those", "bytes", "and", "let", "the", "client", "deal", "with", "it", "MMDS", "be", "not", "holding", "arbitrary", "data", "arbitrary", "bytes", "but", "valid", "JSON", "structured", "bytes", "NUMBER", "allocate_virtio_tokens", "be", "now", "named", "allocate_tokens_for_virtio_device", "NUMBER", "Still", "creates", "a", "device", "handler", "inside", "too", "NUMBER", "Fixed", "in", "NUMBER", "Closing", "this", "due", "to", "inactivity", "and", "lack", "of", "a", "clear", "next", "step", "NUMBER", "Feel", "free", "to", "reopen", "NUMBER", "firecracker", "microvm", "compute", "capsule", "what", "do", "you", "say", "we", "update", "the", "documentation", "to", "explicitly", "add", "bash", "and", "a", "unix", "OS", "as", "requirements", "Fixed", "by", "NUMBER", "There", "be", "a", "PR", "implement", "this", "NUMBER", "See", "NUMBER", "and", "check", "out", "the", "conversation", "there", "NUMBER", "This", "works", "as", "expected", "but", "we", "need", "to", "think", "about", "the", "customer", "use", "cases", "before", "merge", "it", "NUMBER", "Closing", "it", "muya", "zj", "vsock", "support", "was", "merge", "NUMBER", "If", "you", "be", "still", "interested", "in", "merge", "these", "change", "please", "resolve", "conflict", "and", "rebase", "NUMBER", "Hi", "muya", "zj", "If", "you", "take", "a", "look", "at", "read_config", "and", "write_config", "from", "net", "LINK", "microvm", "firecracker", "blob", "master", "devices", "src", "virtio", "net", "NUMBER", "rs", "L", "NUMBER", "and", "block", "LINK", "microvm", "firecracker", "blob", "master", "devices", "src", "virtio", "block", "NUMBER", "rs", "L", "NUMBER", "they", "both", "have", "specific", "elements", "field", "for", "example", "we", "increment", "different", "metrics", "for", "each", "of", "them", "NUMBER", "This", "renders", "the", "objective", "of", "putting", "these", "two", "function", "in", "the", "trait", "implementations", "impossible", "NUMBER", "As", "a", "consequence", "I", "be", "closing", "this", "PR", "NUMBER", "Fixed", "in", "NUMBER", "Closed", "as", "a", "subset", "of", "NUMBER", "NUMBER", "We", "could", "start", "by", "remove", "lazy_static", "usages", "all", "across", "Firecracker", "right", "now", "we", "have", "it", "in", "mmds", "logger", "and", "net_util", "NUMBER", "For", "the", "net_util", "crate", "I", "think", "NUMBER", "be", "a", "good", "place", "for", "remove", "the", "lazily", "evaluated", "statics", "NUMBER", "Final", "switch", "to", "vm", "memory", "was", "made", "in", "NUMBER", "NUMBER", "deprecates", "this", "issue", "NUMBER", "Fixed", "by", "NUMBER", "All", "dependencies", "targeted", "by", "this", "issue", "were", "remove", "NUMBER", "vmm", "sys", "util", "LINK", "sys", "util", "be", "now", "publish", "on", "crates", "NUMBER", "io", "NUMBER", "We", "can", "remove", "the", "tempfile", "dependency", "by", "use", "the", "tempfile", "implementation", "from", "the", "rust", "vmm", "crate", "NUMBER", "Should", "get", "solve", "by", "NUMBER", "Solved", "by", "NUMBER", "Closed", "as", "a", "subset", "of", "NUMBER", "NUMBER", "Vsock", "be", "now", "stable", "and", "the", "untime", "LINK", "microvm", "firecracker", "pull", "NUMBER", "commit", "b", "NUMBER", "cf", "NUMBER", "b", "NUMBER", "a", "NUMBER", "ade", "NUMBER", "ea", "NUMBER", "da", "NUMBER", "e", "NUMBER", "f", "NUMBER", "diff", "ea", "NUMBER", "e", "NUMBER", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "ef", "NUMBER", "eL", "NUMBER", "do", "not", "apply", "for", "vsock", "anymore", "NUMBER", "mhhajeer", "SendCtrlAltDel", "works", "by", "sending", "keyboard", "events", "i", "NUMBER", "e", "NUMBER", "key", "presses", "to", "the", "guest", "NUMBER", "Keyboard", "events", "in", "the", "guest", "be", "handle", "by", "the", "keyboard", "driver", "NUMBER", "That", "means", "you", "need", "a", "guest", "kernel", "with", "the", "i", "NUMBER", "and", "atkbd", "drivers", "NUMBER", "One", "such", "kernel", "LINK", "_", "NUMBER", "minimal_with_atkbd", "kernel", "vmlinux", "NUMBER", "bin", "be", "use", "by", "our", "integration", "test", "NUMBER", "Check", "out", "the", "docs", "section", "NUMBER", "blob", "master", "docs", "api_requests", "actions", "NUMBER", "md", "sendctrlaltdel", "for", "more", "details", "NUMBER", "With", "the", "kernel", "I", "suggested", "i", "NUMBER", "and", "atkbd", "be", "build", "in", "not", "as", "modules", "NUMBER", "You", "won", "t", "see", "them", "showing", "up", "in", "the", "lsmod", "output", "NUMBER", "If", "you", "dmesg", "egrep", "i", "i", "NUMBER", "kbd", "in", "the", "guest", "you", "should", "see", "some", "info", "from", "the", "keyboard", "driver", "NUMBER", "If", "that", "doesn", "t", "show", "up", "the", "guest", "kernel", "be", "not", "properly", "configured", "and", "SendCtrlAltDel", "will", "not", "work", "NUMBER", "Seems", "that", "there", "be", "a", "Backtrace", "new_unresolved", "that", "do", "not", "require", "the", "libbacktrace", "feature", "to", "be", "on", "NUMBER", "Downside", "be", "we", "do", "not", "have", "the", "symbols", "resolve", "but", "the", "main", "advantage", "be", "that", "we", "get", "rid", "of", "the", "cc", "dependency", "NUMBER", "Another", "possible", "advantage", "be", "that", "we", "may", "also", "get", "rid", "of", "the", "hitting", "the", "denied", "syscall", "I", "tried", "test", "it", "use", "the", "replication", "steps", "provide", "but", "I", "receive", "another", "syscall", "I", "might", "be", "doing", "something", "wrong", "NUMBER", "aghecenco", "or", "andreeaflorescu", "can", "you", "please", "test", "this", "LINK", "_out", "and", "let", "me", "know", "if", "you", "still", "see", "the", "NUMBER", "syscall", "be", "hit", "aghecenco", "as", "the", "one", "investigating", "this", "what", "be", "your", "recommendation", "My", "preference", "considering", "the", "pain", "that", "libbacktrace", "cause", "so", "far", "be", "to", "get", "rid", "of", "it", "NUMBER", "Also", "from", "my", "understanding", "unwind", "do", "not", "work", "if", "you", "have", "dependencies", "that", "have", "the", "panic", "mode", "set", "to", "abort", "NUMBER", "I", "be", "not", "sure", "if", "it", "helps", "us", "much", "but", "I", "would", "rather", "improve", "the", "logging", "on", "the", "code", "paths", "where", "panics", "can", "occur", "so", "that", "we", "have", "enough", "information", "to", "debug", "the", "problem", "NUMBER", "But", "backtrace", "works", "with", "unwind", "and", "do", "not", "with", "abort", "as", "far", "as", "I", "understand", "NUMBER", "Right", "aghecenco", "do", "anything", "get", "display", "when", "compile", "with", "unwind", "and", "by", "use", "Backtrace", "new_unresolved", "which", "frees", "us", "from", "the", "cc", "dependency", "I", "did", "not", "get", "that", "from", "your", "previous", "comments", "sorry", "If", "yes", "I", "think", "it", "be", "worth", "compromising", "size", "of", "binary", "for", "a", "cc", "free", "firecracker", "NUMBER", "Closing", "this", "for", "now", "NUMBER", "Will", "get", "back", "to", "this", "when", "I", "have", "the", "time", "NUMBER", "Raising", "priority", "on", "this", "one", "since", "more", "build", "warnings", "be", "now", "display", "after", "upgrade", "to", "NUMBER", "for", "aarch", "NUMBER", "Hi", "blitz", "Our", "PR", "status", "check", "has", "undergone", "significant", "improvement", "NUMBER", "Please", "take", "a", "look", "and", "let", "us", "know", "what", "you", "think", "I", "be", "not", "able", "to", "replicate", "this", "with", "latest", "Firecracker", "release", "LINK", "microvm", "firecracker", "release", "tag", "v", "NUMBER", "NUMBER", "When", "activation", "fail", "for", "vsock", "device", "the", "following", "occur", "now", "NUMBER", "Linux", "version", "NUMBER", "NUMBER", "amzn", "NUMBER", "x", "NUMBER", "_", "NUMBER", "mockbuild", "ip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "gcc", "version", "NUMBER", "NUMBER", "Red", "Hat", "NUMBER", "NUMBER", "GCC", "NUMBER", "SMP", "Wed", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "NUMBER", "NUMBER", "Command", "line", "console", "ttyS", "NUMBER", "noapic", "reboot", "k", "panic", "NUMBER", "pci", "off", "nomodules", "ip", "NUMBER", "NUMBER", "NUMBER", "eth", "NUMBER", "off", "root", "dev", "vda", "rw", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "x", "NUMBER", "floating", "point", "registers", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "SSE", "registers", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "AVX", "registers", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "MPX", "bounds", "registers", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "MPX", "CSR", "NUMBER", "x", "NUMBER", "fpu", "xstate_offset", "NUMBER", "NUMBER", "xstate_sizes", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fpu", "xstate_offset", "NUMBER", "NUMBER", "xstate_sizes", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fpu", "xstate_offset", "NUMBER", "NUMBER", "xstate_sizes", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fpu", "Enabled", "xstate", "features", "NUMBER", "x", "NUMBER", "f", "context", "size", "be", "NUMBER", "bytes", "use", "compacted", "format", "NUMBER", "NUMBER", "e", "NUMBER", "BIOS", "provide", "physical", "RAM", "map", "NUMBER", "BIOS", "e", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fbff", "usable", "NUMBER", "BIOS", "e", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ffffff", "usable", "NUMBER", "NX", "Execute", "Disable", "protection", "active", "NUMBER", "DMI", "not", "present", "or", "invalid", "NUMBER", "NUMBER", "Hypervisor", "detected", "KVM", "NUMBER", "tsc", "Using", "PIT", "calibration", "value", "NUMBER", "e", "NUMBER", "last_pfn", "NUMBER", "x", "NUMBER", "max_arch_pfn", "NUMBER", "x", "NUMBER", "NUMBER", "MTRR", "Disabled", "NUMBER", "x", "NUMBER", "PAT", "MTRRs", "disabled", "skipping", "PAT", "initialization", "too", "NUMBER", "NUMBER", "CPU", "MTRRs", "all", "blank", "virtualized", "system", "NUMBER", "NUMBER", "x", "NUMBER", "PAT", "Configuration", "NUMBER", "NUMBER", "WB", "WT", "UC", "UC", "WB", "WT", "UC", "UC", "NUMBER", "find", "SMP", "MP", "table", "at", "mem", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "f", "mapped", "at", "ffffffffff", "NUMBER", "c", "NUMBER", "NUMBER", "Scanning", "NUMBER", "areas", "for", "low", "memory", "corruption", "NUMBER", "Using", "GB", "pages", "for", "direct", "mapping", "NUMBER", "No", "NUMA", "configuration", "find", "NUMBER", "Faking", "a", "node", "at", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ffffff", "NUMBER", "NODE_DATA", "NUMBER", "allocated", "mem", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "NUMBER", "x", "NUMBER", "ffffff", "NUMBER", "kvm", "clock", "Using", "msrs", "NUMBER", "b", "NUMBER", "d", "NUMBER", "and", "NUMBER", "b", "NUMBER", "d", "NUMBER", "NUMBER", "kvm", "clock", "cpu", "NUMBER", "msr", "NUMBER", "NUMBER", "fdc", "NUMBER", "primary", "cpu", "clock", "NUMBER", "kvm", "clock", "use", "sched", "offset", "of", "NUMBER", "cycles", "NUMBER", "clocksource", "kvm", "clock", "mask", "NUMBER", "xffffffffffffffff", "max_cycles", "NUMBER", "x", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "dffb", "max_idle_ns", "NUMBER", "ns", "NUMBER", "Zone", "ranges", "NUMBER", "DMA", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ffffff", "NUMBER", "DMA", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ffffff", "NUMBER", "Normal", "empty", "NUMBER", "Movable", "zone", "start", "for", "each", "node", "NUMBER", "Early", "memory", "node", "ranges", "NUMBER", "node", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "efff", "NUMBER", "node", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ffffff", "NUMBER", "Initmem", "setup", "node", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ffffff", "NUMBER", "Intel", "MultiProcessor", "Specification", "v", "NUMBER", "NUMBER", "MPTABLE", "OEM", "ID", "FC", "NUMBER", "MPTABLE", "Product", "ID", "NUMBER", "NUMBER", "MPTABLE", "APIC", "at", "NUMBER", "xFEE", "NUMBER", "NUMBER", "Processor", "NUMBER", "Bootup", "CPU", "NUMBER", "IOAPIC", "NUMBER", "apic_id", "NUMBER", "version", "NUMBER", "address", "NUMBER", "xfec", "NUMBER", "GSI", "NUMBER", "NUMBER", "NUMBER", "Processors", "NUMBER", "NUMBER", "smpboot", "Allowing", "NUMBER", "CPUs", "NUMBER", "hotplug", "CPUs", "NUMBER", "PM", "Registered", "nosave", "memory", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "PM", "Registered", "nosave", "memory", "mem", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "fffff", "NUMBER", "e", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "xffffffff", "available", "for", "PCI", "devices", "NUMBER", "Booting", "paravirtualized", "kernel", "on", "KVM", "NUMBER", "clocksource", "refined", "jiffies", "mask", "NUMBER", "xffffffff", "max_cycles", "NUMBER", "xffffffff", "max_idle_ns", "NUMBER", "ns", "NUMBER", "random", "get_random_bytes", "call", "from", "start_kernel", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "with", "crng_init", "NUMBER", "NUMBER", "setup_percpu", "NR_CPUS", "NUMBER", "nr_cpumask_bits", "NUMBER", "nr_cpu_ids", "NUMBER", "nr_node_ids", "NUMBER", "NUMBER", "percpu", "Embedded", "NUMBER", "pages", "cpu", "ffff", "NUMBER", "c", "NUMBER", "s", "NUMBER", "r", "NUMBER", "d", "NUMBER", "u", "NUMBER", "NUMBER", "KVM", "setup", "async", "PF", "for", "cpu", "NUMBER", "NUMBER", "kvm", "stealtime", "cpu", "NUMBER", "msr", "NUMBER", "c", "NUMBER", "NUMBER", "PV", "qspinlock", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Built", "NUMBER", "zonelists", "mobility", "grouping", "on", "NUMBER", "Total", "pages", "NUMBER", "NUMBER", "Policy", "zone", "DMA", "NUMBER", "NUMBER", "Kernel", "command", "line", "console", "ttyS", "NUMBER", "noapic", "reboot", "k", "panic", "NUMBER", "pci", "off", "nomodules", "ip", "NUMBER", "NUMBER", "NUMBER", "eth", "NUMBER", "off", "root", "dev", "vda", "rw", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "PID", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Memory", "NUMBER", "K", "NUMBER", "K", "available", "NUMBER", "K", "kernel", "code", "NUMBER", "K", "rwdata", "NUMBER", "K", "rodata", "NUMBER", "K", "init", "NUMBER", "K", "bss", "NUMBER", "K", "reserved", "NUMBER", "K", "cma", "reserved", "NUMBER", "SLUB", "HWalign", "NUMBER", "Order", "NUMBER", "NUMBER", "MinObjects", "NUMBER", "CPUs", "NUMBER", "Nodes", "NUMBER", "NUMBER", "Kernel", "User", "page", "tables", "isolation", "enable", "NUMBER", "Hierarchical", "RCU", "implementation", "NUMBER", "NUMBER", "RCU", "restricting", "CPUs", "from", "NR_CPUS", "NUMBER", "to", "nr_cpu_ids", "NUMBER", "NUMBER", "RCU", "Adjusting", "geometry", "for", "rcu_fanout_leaf", "NUMBER", "nr_cpu_ids", "NUMBER", "NUMBER", "NR_IRQS", "NUMBER", "nr_irqs", "NUMBER", "preallocated", "irqs", "NUMBER", "NUMBER", "Console", "colour", "dummy", "device", "NUMBER", "x", "NUMBER", "NUMBER", "console", "ttyS", "NUMBER", "enable", "NUMBER", "tsc", "Detected", "NUMBER", "MHz", "processor", "NUMBER", "Calibrating", "delay", "loop", "skipped", "preset", "value", "NUMBER", "NUMBER", "BogoMIPS", "lpj", "NUMBER", "NUMBER", "pid_max", "default", "NUMBER", "minimum", "NUMBER", "NUMBER", "Security", "Framework", "initialized", "NUMBER", "SELinux", "Initializing", "NUMBER", "NUMBER", "Dentry", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Inode", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Mount", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Mountpoint", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Last", "level", "iTLB", "entries", "NUMBER", "KB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "Last", "level", "dTLB", "entries", "NUMBER", "KB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "GB", "NUMBER", "NUMBER", "Spectre", "V", "NUMBER", "Mitigation", "Full", "generic", "retpoline", "NUMBER", "Spectre", "V", "NUMBER", "Spectre", "v", "NUMBER", "mitigation", "Filling", "RSB", "on", "context", "switch", "NUMBER", "Spectre", "V", "NUMBER", "Spectre", "v", "NUMBER", "mitigation", "Enabling", "Indirect", "Branch", "Prediction", "Barrier", "NUMBER", "Spectre", "V", "NUMBER", "Enabling", "Restricted", "Speculation", "for", "firmware", "calls", "NUMBER", "Speculative", "Store", "Bypass", "Mitigation", "Speculative", "Store", "Bypass", "disabled", "via", "prctl", "and", "seccomp", "NUMBER", "Freeing", "SMP", "alternatives", "memory", "NUMBER", "K", "NUMBER", "smpboot", "Max", "logical", "package", "NUMBER", "NUMBER", "Not", "enabling", "interrupt", "remapping", "due", "to", "skipped", "IO", "APIC", "setup", "NUMBER", "smpboot", "CPU", "NUMBER", "Intel", "R", "Xeon", "R", "Processor", "NUMBER", "GHz", "family", "NUMBER", "x", "NUMBER", "model", "NUMBER", "x", "NUMBER", "e", "stepping", "NUMBER", "x", "NUMBER", "NUMBER", "Performance", "Events", "unsupported", "p", "NUMBER", "CPU", "model", "NUMBER", "no", "PMU", "driver", "software", "events", "only", "NUMBER", "NUMBER", "Hierarchical", "SRCU", "implementation", "NUMBER", "NUMBER", "smp", "Bringing", "up", "secondary", "CPUs", "NUMBER", "NUMBER", "smp", "Brought", "up", "NUMBER", "node", "NUMBER", "CPU", "NUMBER", "smpboot", "Total", "of", "NUMBER", "processors", "activated", "NUMBER", "BogoMIPS", "NUMBER", "devtmpfs", "initialized", "NUMBER", "x", "NUMBER", "mm", "Memory", "block", "size", "NUMBER", "MB", "NUMBER", "clocksource", "jiffies", "mask", "NUMBER", "xffffffff", "max_cycles", "NUMBER", "xffffffff", "max_idle_ns", "NUMBER", "ns", "NUMBER", "futex", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "cpuidle", "use", "governor", "ladder", "NUMBER", "cpuidle", "use", "governor", "menu", "NUMBER", "HugeTLB", "registered", "NUMBER", "GiB", "page", "size", "pre", "allocated", "NUMBER", "pages", "NUMBER", "HugeTLB", "registered", "NUMBER", "MiB", "page", "size", "pre", "allocated", "NUMBER", "pages", "NUMBER", "dmi", "Firmware", "registration", "fail", "NUMBER", "NUMBER", "NetLabel", "Initializing", "NUMBER", "NetLabel", "domain", "hash", "size", "NUMBER", "NUMBER", "NetLabel", "protocols", "UNLABELED", "CIPSOv", "NUMBER", "CALIPSO", "NUMBER", "NetLabel", "unlabeled", "traffic", "allow", "by", "default", "NUMBER", "clocksource", "Switched", "to", "clocksource", "kvm", "clock", "NUMBER", "VFS", "Disk", "quotas", "dquot_", "NUMBER", "NUMBER", "VFS", "Dquot", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "TCP", "established", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "TCP", "bind", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "TCP", "Hash", "tables", "configured", "established", "NUMBER", "bind", "NUMBER", "NUMBER", "UDP", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "UDP", "Lite", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "virtio", "mmio", "Registering", "device", "virtio", "mmio", "NUMBER", "at", "NUMBER", "xd", "NUMBER", "NUMBER", "xd", "NUMBER", "fff", "IRQ", "NUMBER", "NUMBER", "virtio", "mmio", "Registering", "device", "virtio", "mmio", "NUMBER", "at", "NUMBER", "xd", "NUMBER", "NUMBER", "xd", "NUMBER", "fff", "IRQ", "NUMBER", "NUMBER", "platform", "rtc_cmos", "registered", "platform", "RTC", "device", "no", "PNP", "device", "find", "NUMBER", "Scanning", "for", "low", "memory", "corruption", "every", "NUMBER", "seconds", "NUMBER", "audit", "initializing", "netlink", "subsys", "disabled", "NUMBER", "Initialise", "system", "trusted", "keyrings", "NUMBER", "Key", "type", "blacklist", "registered", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "state", "initialized", "audit_enabled", "NUMBER", "res", "NUMBER", "NUMBER", "workingset", "timestamp_bits", "NUMBER", "max_order", "NUMBER", "bucket_order", "NUMBER", "NUMBER", "squashfs", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Phillip", "Lougher", "NUMBER", "Key", "type", "asymmetric", "registered", "NUMBER", "Asymmetric", "key", "parser", "x", "NUMBER", "registered", "NUMBER", "Block", "layer", "SCSI", "generic", "bsg", "driver", "version", "NUMBER", "loaded", "major", "NUMBER", "NUMBER", "io", "scheduler", "noop", "registered", "default", "NUMBER", "io", "scheduler", "cfq", "registered", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "Failed", "to", "enable", "NUMBER", "bit", "or", "NUMBER", "bit", "DMA", "NUMBER", "Trying", "to", "continue", "but", "this", "might", "not", "work", "NUMBER", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "Failed", "to", "enable", "NUMBER", "bit", "or", "NUMBER", "bit", "DMA", "NUMBER", "Trying", "to", "continue", "but", "this", "might", "not", "work", "NUMBER", "NUMBER", "Serial", "NUMBER", "NUMBER", "driver", "NUMBER", "ports", "IRQ", "sharing", "disabled", "NUMBER", "serial", "NUMBER", "ttyS", "NUMBER", "at", "I", "O", "NUMBER", "x", "NUMBER", "f", "NUMBER", "irq", "NUMBER", "base_baud", "NUMBER", "be", "a", "U", "NUMBER", "_", "NUMBER", "A", "NUMBER", "loop", "module", "loaded", "NUMBER", "tun", "Universal", "TUN", "TAP", "device", "driver", "NUMBER", "NUMBER", "hidraw", "raw", "HID", "events", "driver", "C", "Jiri", "Kosina", "NUMBER", "nf_conntrack", "version", "NUMBER", "NUMBER", "buckets", "NUMBER", "max", "NUMBER", "ip_tables", "C", "NUMBER", "NUMBER", "Netfilter", "Core", "Team", "NUMBER", "Initializing", "XFRM", "netlink", "socket", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "Segment", "Routing", "with", "IPv", "NUMBER", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "Bridge", "firewalling", "registered", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "main", "NUMBER", "rs", "NUMBER", "Firecracker", "panicked", "at", "Failed", "to", "activate", "device", "BadActivate", "src", "libcore", "result", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "main", "NUMBER", "rs", "NUMBER", "stack", "backtrace", "NUMBER", "firecracker", "main", "closure", "h", "NUMBER", "beb", "NUMBER", "db", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "rust_panic_with_hook", "NUMBER", "x", "NUMBER", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "continue_panic_fmt", "NUMBER", "x", "NUMBER", "be", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "rust_begin_unwind", "NUMBER", "x", "NUMBER", "NUMBER", "panic_fmt", "NUMBER", "x", "NUMBER", "ec", "at", "src", "libcore", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "core", "result", "unwrap_failed", "h", "NUMBER", "f", "NUMBER", "bb", "NUMBER", "ab", "NUMBER", "x", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "TAG", "write", "hde", "NUMBER", "ed", "NUMBER", "f", "NUMBER", "b", "NUMBER", "NUMBER", "x", "NUMBER", "fe", "NUMBER", "f", "NUMBER", "devices", "bus", "Bus", "write", "h", "NUMBER", "b", "NUMBER", "f", "NUMBER", "fd", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "a", "NUMBER", "d", "NUMBER", "std", "sys_common", "backtrace", "__rust_begin_short_backtrace", "hcdba", "NUMBER", "b", "NUMBER", "faa", "NUMBER", "ce", "NUMBER", "x", "NUMBER", "fe", "NUMBER", "NUMBER", "core", "ops", "function", "FnOnce", "call_once", "vtable", "NUMBER", "shim", "hba", "NUMBER", "d", "NUMBER", "d", "NUMBER", "bb", "NUMBER", "e", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "NUMBER", "call_once", "TAG", "NUMBER", "x", "NUMBER", "d", "NUMBER", "e", "at", "rustc", "NUMBER", "c", "NUMBER", "d", "NUMBER", "dfe", "NUMBER", "c", "NUMBER", "eeed", "NUMBER", "efad", "NUMBER", "d", "NUMBER", "f", "NUMBER", "e", "src", "liballoc", "boxed", "NUMBER", "rs", "NUMBER", "NUMBER", "call_once", "TAG", "NUMBER", "x", "NUMBER", "at", "rustc", "NUMBER", "c", "NUMBER", "d", "NUMBER", "dfe", "NUMBER", "c", "NUMBER", "eeed", "NUMBER", "efad", "NUMBER", "d", "NUMBER", "f", "NUMBER", "e", "src", "liballoc", "boxed", "NUMBER", "rs", "NUMBER", "start_thread", "at", "src", "libstd", "sys_common", "thread", "NUMBER", "rs", "NUMBER", "thread_start", "at", "src", "libstd", "sys", "unix", "thread", "NUMBER", "rs", "NUMBER", "Closing", "this", "for", "now", "NUMBER", "xibz", "feel", "free", "to", "reopen", "if", "issue", "still", "replicates", "for", "you", "NUMBER", "Hi", "arun", "gupta", "This", "issue", "do", "not", "seem", "to", "replicate", "anymore", "NUMBER", "slack", "invite", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "da", "NUMBER", "ed", "NUMBER", "de", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "d", "NUMBER", "cfd", "NUMBER", "png", "Closing", "this", "NUMBER", "Feel", "free", "to", "reopen", "with", "detailed", "replication", "steps", "if", "it", "still", "happens", "to", "you", "NUMBER", "Fixed", "by", "NUMBER", "Solved", "by", "NUMBER", "All", "checks", "be", "do", "NUMBER", "Opened", "LINK", "vmm", "kvm", "ioctls", "pull", "NUMBER", "Second", "issue", "was", "cleared", "up", "too", "NUMBER", "Closing", "this", "NUMBER", "Closing", "this", "issue", "since", "NUMBER", "be", "merge", "and", "now", "we", "can", "configure", "the", "logger", "for", "Firecracker", "via", "command", "line", "parameter", "NUMBER", "At", "this", "moment", "we", "do", "not", "want", "this", "option", "for", "jailer", "but", "if", "we", "change", "our", "mind", "we", "ll", "reopen", "it", "NUMBER", "No", "need", "for", "this", "anymore", "NUMBER", "Ideally", "we", "should", "try", "to", "move", "away", "from", "use", "autogenerated", "code", "since", "it", "add", "a", "lot", "of", "mess", "and", "not", "a", "lot", "of", "this", "autogenerated", "code", "be", "actually", "use", "NUMBER", "See", "also", "LINK", "hypervisor", "cloud", "hypervisor", "pull", "NUMBER", "See", "also", "LINK", "hypervisor", "cloud", "hypervisor", "pull", "NUMBER", "commit", "NUMBER", "b", "NUMBER", "a", "NUMBER", "ba", "NUMBER", "c", "NUMBER", "ae", "NUMBER", "It", "would", "be", "worth", "investing", "some", "research", "into", "whether", "we", "could", "also", "gather", "memory", "leaks", "relate", "results", "LINK", "microvm", "firecracker", "issue", "NUMBER", "from", "the", "fuzzing", "process", "NUMBER", "cperciva", "we", "re", "track", "this", "in", "NUMBER", "Closed", "by", "NUMBER", "NUMBER", "Fixed", "in", "NUMBER", "Fixed", "by", "NUMBER", "Hi", "cmannett", "NUMBER", "we", "do", "not", "have", "formal", "requirements", "for", "format", "error", "message", "NUMBER", "We", "do", "however", "try", "to", "keep", "them", "short", "and", "clear", "and", "also", "try", "to", "reuse", "the", "same", "static", "strings", "so", "that", "we", "minimize", "the", "binary", "size", "NUMBER", "For", "example", "most", "expect", "s", "following", "a", "mutex", "NUMBER", "lock", "use", "_", "Poisoned", "lock", "_", "as", "the", "description", "with", "no", "extra", "sugarcoating", "NUMBER", "We", "rely", "on", "the", "stacktrace", "to", "provide", "the", "location", "of", "the", "error", "and", "use", "the", "description", "as", "context", "NUMBER", "This", "issue", "be", "indeed", "a", "case", "of", "replacing", "unwrap", "calls", "with", "expect", "NUMBER", "Hi", "AnishShah", "contributions", "be", "welcome", "This", "issue", "be", "still", "accurate", "yes", "NUMBER", "We", "should", "also", "look", "into", "remove", "PARTUUID", "support", "since", "this", "be", "not", "strictly", "required", "customers", "can", "extract", "partitions", "from", "the", "disk", "image", "NUMBER", "The", "PARTUUID", "functionality", "should", "be", "keep", "at", "least", "until", "we", "solve", "the", "limit", "of", "max", "NUMBER", "devices", "on", "x", "NUMBER", "_", "NUMBER", "See", "NUMBER", "Coverage", "report", "for", "jailer", "crate", "right", "now", "NUMBER", "NUMBER", "Not", "closing", "this", "issue", "yet", "since", "there", "be", "room", "for", "improvement", "see", "above", "NUMBER", "cov", "NUMBER", "zip", "LINK", "microvm", "firecracker", "file", "NUMBER", "cov", "NUMBER", "zip", "Hi", "Lay", "ton", "while", "this", "be", "a", "valid", "issue", "that", "can", "be", "triggered", "under", "certain", "rate", "limiter", "configurations", "we", "ve", "had", "no", "complaints", "from", "Firecracker", "customers", "users", "so", "this", "be", "a", "low", "priority", "issue", "NUMBER", "The", "rate", "limiter", "be", "implement", "on", "a", "steady", "rate", "refilling", "token", "bucket", "design", "where", "each", "request", "consumes", "tokens", "from", "the", "bucket", "if", "there", "be", "enough", "there", "or", "be", "delayed", "until", "there", "be", "enough", "NUMBER", "The", "overall", "rate", "of", "consumption", "be", "smaller", "or", "equal", "to", "the", "constant", "rate", "at", "which", "the", "bucket", "be", "refilled", "NUMBER", "In", "certain", "configurations", "where", "the", "bandwidth", "bucket", "size", "be", "configured", "to", "be", "smaller", "than", "the", "virtio", "request", "size", "the", "rate", "limiter", "_leaks_", "by", "allowing", "a", "higher", "rate", "than", "configured", "NUMBER", "This", "happens", "because", "blocking", "a", "request", "until", "there", "be", "enough", "tokens", "in", "the", "bucket", "will", "block", "it", "forever", "since", "the", "bucket", "itself", "be", "smaller", "than", "the", "request", "size", "so", "we", "just", "consume", "the", "whole", "bucket", "and", "allow", "that", "request", "and", "that", "results", "that", "the", "actual", "rate", "be", "larger", "than", "the", "limit", "by", "diff", "request", "NUMBER", "size", "bucket", "NUMBER", "size", "NUMBER", "There", "be", "multiple", "solutions", "to", "this", "problem", "with", "varying", "degrees", "of", "creativity", "and", "complexity", "NUMBER", "NUMBER", "Enhance", "the", "virtio", "block", "net", "vsock", "implementations", "to", "allow", "partial", "processing", "of", "virtio", "request", "NUMBER", "This", "implies", "some", "internal", "buffering", "in", "the", "device", "emulation", "of", "a", "virtio", "request", "that", "do", "not", "have", "enough", "budget", "in", "its", "rate", "limiter", "to", "complete", "as", "a", "whole", "NUMBER", "High", "complexity", "multiple", "components", "involved", "NUMBER", "Enhance", "the", "rate", "limiter", "implementation", "and", "when", "identifying", "this", "corner", "case", "instead", "of", "consuming", "everything", "in", "the", "bucket", "and", "letting", "it", "pass", "calculate", "how", "many", "buckets", "would", "it", "take", "for", "the", "request", "to", "be", "properly", "rate", "limited", "and", "block", "it", "for", "a", "proportionate", "amount", "of", "time", "instead", "of", "just", "blocking", "for", "the", "standard", "static", "duration", "NUMBER", "Low", "complexity", "catch", "all", "fix", "NUMBER", "Propose", "another", "approach", "altogether", "for", "the", "rate", "limiter", "implementation", "NUMBER", "NUMBER", "Etc", "NUMBER", "The", "second", "option", "seems", "like", "a", "good", "idea", "don", "t", "know", "if", "that", "satisfies", "the", "required", "level", "of", "complexity", "work", "you", "were", "looking", "for", "NUMBER", "Hi", "jeromegn", "NUMBER", "Thanks", "for", "bringing", "this", "up", "NUMBER", "I", "be", "not", "sure", "if", "this", "be", "a", "regression", "or", "a", "different", "issue", "NUMBER", "Can", "you", "provide", "more", "details", "about", "your", "usecase", "and", "reproduction", "steps", "Lay", "ton", "I", "would", "need", "to", "check", "if", "this", "be", "still", "opened", "NUMBER", "alexandruag", "do", "you", "have", "more", "context", "In", "any", "case", "I", "be", "not", "super", "sure", "that", "this", "be", "a", "good", "first", "issue", "NUMBER", "Are", "you", "interested", "in", "a", "particular", "type", "of", "issue", "I", "could", "find", "something", "else", "for", "you", "NUMBER", "I", "ve", "change", "the", "title", "of", "this", "issue", "to", "better", "represent", "the", "issue", "NUMBER", "There", "be", "no", "need", "to", "mask", "signals", "we", "just", "need", "to", "make", "sure", "Firecracker", "can", "correctly", "continue", "execution", "after", "be", "interrupted", "by", "non", "terminating", "signals", "NUMBER", "There", "be", "some", "details", "in", "duplicate", "NUMBER", "as", "well", "NUMBER"], "text_count": [0, 13803, 3192, 1488, 809, 347, 958, 3, 61, 1702, 2086, 3541, 2242, 1146, 1495, 589, 0, 0, 0, 0, 4060, 1263, 689, 378, 822, 662, 0, 0, 0, 0, 8035, 5062, 3282, 160, 1793, 488, 0, 0, 0, 0, 9782, 27, 3909, 3334, 3129, 0, 0, 0, 0, 0, 2796, 1107, 1508, 695, 882, 610, 980, 0, 0, 0, 7581, 490, 6177, 513, 0, 0, 0, 0, 0, 0, 5349, 643, 3821, 1809, 714, 0, 0, 0, 0, 0, 10586, 5080, 771, 4355, 491, 435, 0, 0, 0, 0, 648, 2999, 239, 0, 0, 0, 0, 0, 0, 0, 8040, 2003, 4752, 1452, 0, 0, 0, 0, 0, 0, 16765, 31309, 462, 1251, 482, 481, 0, 0, 0, 0, 41093, 166, 29669, 1094, 7194, 9511]}, {"repo": "firecracker", "type": "nonelite", "title": "", "number of text": 1139, "text": "  Alex, can you please put a better title and change description. You can describe why you needed the refactoring.  I may have gotten it backwards - I was thinking that Firecracker will *continue* consuming `rust-vmm/vm-memory`, but instead of using `rust-vmm/vm-memory::GuestMemoryMmap` all over the place, Firecracker would add its own `struct GuestMemoryMmapWithTracking` (or something) and `impl rust-vmm/vm-memory::GuestMemory for firecracker::GuestMemoryMmapWithTracking` (disregard rustlang blasphemy). That way we don't have to kill the dependency. Did we move away from that? What's the advantage of removing the dependency, other than renaming `GuestMemoryMmap` everywhere? > we override only what is needed with a local implementation\r\n\r\nWhy not create a new implementor for `GuestMemory`?\r\n\r\n > > we override only what is needed with a local implementation\r\n> \r\n> Why not create a new implementor for `GuestMemory`?\r\n\r\nFWIW I also understood the coupling in the way @aghecenco described it above.  The snapshot restore operation is slower on AMD than on Intel. \r\n\r\nWe should investigate why and either fix the root cause or change the `test_snapshot_resume_latency` test in order to check different values for AMD and Intel. This is not related to AMD. It seems to be related to the host kernel version. On `5.4` I'm getting restore times that revolve around 30ms. On `4.19` I'm getting restore times that revolve around 4 ms. I'm getting similar results both on AMD and Intel. On host kernel `5.4` looks like the difference between 4ms and 30ms is caused by the jailer. On host kernel `5.4` the problem seems to be caused by the cgroups. When I start jailer without applying the cgroups the overhead disappears. The entire overhead comes from the `KVM_CREATE_VM` ioctl:\r\n\r\nWhen running within the jailer cgroup: \r\n```\r\nioctl(12, KVM_CREATE_VM, 0)             = 14 <0.027335>\r\n```\r\n\r\nWhen running without cgroups:\r\n```\r\nioctl(12, KVM_CREATE_VM, 0)             = 14 <0.000352>\r\n```\r\n\r\nThe difference is about `27ms`. For the moment I traced the overhead to the `kvm_arch_post_init_vm()` function in the host kernel. I will dig deeper. Tracing the overhead further down the host kernel call stack:\r\n\r\n```\r\nkvm_arch_post_init_vm()\r\n-> kvm_mmu_post_init_vm()\r\n-> kvm_vm_create_worker_thread()\r\n-> kvm_vm_worker_thread()\r\n-> cgroup_attach_task_all()\r\n-> cgroup_attach_task()\r\n-> cgroup_migrate()\r\n-> cgroup_migrate_execute()\r\n-> cpuset_can_attach()\r\n-> percpu_down_write(&cpuset_rwsem)\r\n``` Looks like the overhead was introduced by [this](https://lore.kernel.org/lkml/20190719140000.31694-9-juri.lelli@redhat.com/) kernel patch.\r\n\r\nMore specifically these 2 commits:\r\n\r\n[sched/core: Prevent race condition between cpuset and __sched_setscheduler()](https://github.com/torvalds/linux/commit/710da3c8ea7dfbd327920afd3831d8c82c42789d)\r\n[cgroup/cpuset: Convert cpuset_mutex to percpu_rwsem](https://github.com/torvalds/linux/commit/1243dc518c9da467da6635313a2dbb41b8ffc275) Actually, to be even more specific, looks like the overhead was introduced only by the following commit:\r\n[cgroup/cpuset: Convert cpuset_mutex to percpu_rwsem](https://github.com/torvalds/linux/commit/1243dc518c9da467da6635313a2dbb41b8ffc275)\r\n\r\nI tried to use `cpuset_mutex` instead of `percpu_rwsem` and the overhead disappears.\r\n Just a quick update. I stumbled upon some documentation. Looks like this is how a `percpu_rwsem` is supposed to work. Quoting from https://github.com/torvalds/linux/blob/master/Documentation/locking/percpu-rw-semaphore.rst\r\n\r\n> Locking for reading is very fast, it uses RCU and it avoids any atomic instruction in the lock and unlock path. On the other hand, locking for writing is very expensive, it calls synchronize_rcu() that can take hundreds of milliseconds.\r\n I managed to reproduce the issue with this simple rust executable:\r\n\r\n```\r\nuse kvm_ioctls::Kvm;\r\nuse std::time::{Instant, Duration};\r\nuse std::thread;\r\n\r\nfn main() {\r\n    thread::sleep(Duration::from_millis(500));\r\n\r\n    let kvm = Kvm::new().unwrap();\r\n    let start = Instant::now();\r\n    kvm.create_vm().unwrap();\r\n    let elapsed = start.elapsed();\r\n    println!(\"Elapsed: {:.2?}\", elapsed);\r\n}\r\n```\r\n\r\nand this small script that emulates what jailer does:\r\n\r\n```\r\n#!/bin/bash\r\n\r\ncgcreate -g cpuset:/firecracker\r\necho 0-15 >> /sys/fs/cgroup/cpuset/firecracker/cpuset.cpus\r\necho 0 >> /sys/fs/cgroup/cpuset/firecracker/cpuset.mems\r\n\r\necho $$ > /sys/fs/cgroup/cpuset/firecracker/tasks && ./test\r\n```\r\n\r\nNote that if we don't add the extra sleep:\r\n```\r\n    thread::sleep(Duration::from_millis(500));\r\n```\r\nThe issue doesn't reproduce. When a writer requests access to some shared data, the RCU schedules it on a queue and then waits for at least one so-called \"grace-period\" to pass. A grace period is a period in witch the RCU waits for all the previously acquired read locks to be released. A grace period ends after all the CPUs go through a quiescent state. Grace periods can be quite long.\r\n\r\nWhen we start the process (`echo $$ > /sys/fs/cgroup/cpuset/firecracker/tasks && ./test`) a write lock request is being performed and a grace period starts. If we don't add the extra `thread::sleep(Duration::from_millis(500));`, when we get to `kvm.create_vm().unwrap();`, the previous grace period is already in progress, so AFAIU the RCU does an optimization where the new lock request is \"merged\" in the same grace-period  with the previous one. So we don't have to wait for a new grace period. \r\n\r\nOtherwise, if we do `thread::sleep(Duration::from_millis(500));`, the grace period generated by the first lock request ends, and `kvm.create_vm().unwrap();` asks for a new grace period, ending up waiting 20-30ms.\r\n\r\nThis is the desired RCU behavior. And it looks like the `cgroup_init()` code has a related [optimization](https://github.com/torvalds/linux/blob/7575fdda569b2a2e8be32c1a64ecb05d6f96a500/kernel/cgroup/cgroup.c#L5687) to drive down the boot time. Unfortunately this only works before the first use of the `rcu_sync`.\r\n\r\nI don't think there's any easy way around this issue.   interested to help out! Hi @sandreim, thanks for the information! To provide you with more context, we are 4 students in UT Austin's virtualization class, and look forward to contributing to an open-source project as part of our coursework -- Firecracker really attracts us as an exciting project to work on :) We will start from relatively simple issues, but hopefully we can fix them all one by one. Will keep you posted as we start working on them!   ## Reason for This PR\r\n\r\nMerge v0.22 to master\r\n\r\n## Description of Changes\r\n\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Any required documentation changes (code and docs) are included in this PR.\r\n- [ ] Any newly added `unsafe` code is properly documented.\r\n- [ ] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [ ] All added/changed functionality is tested.\r\n  Currently, the jailer can be used only when Firecracker is linked with static musl, not with dynamic glibc.\r\n\r\nThe fact that the build command successfully builds the jailer with glibc is misleading and outputs jailer binaries that do not work with the corresponding Firecracker binary.\r\n\r\nWe should make sure that when we compile the source code, we only build the jailer if the specified toolchain is musl.\n\r\nOne way of doing this would be to modify `devtool`. However, we should first investigate for any options we could add in the `Cargo.toml` files to restrict compilation based on toolchain.\r\n\r\n Hi, after spending few hours on the analysis. Following options can possibly be ruled out:\n\n- a 'build-only-for-target-abi=musl' like flag in Cargo.toml at crate level is not available.\n- a custom build.rs at project level which can dynamically modify workspace dependencies is not available.\n- Have also checked if we can place a build.rs at the root of jailer crate level that can skip building itself if not matching specified ABI. This is not available too.\n\nWould like to explore more if there are any pointers. Otherwise, devtool modification seems to be the only option.\n\nThanks,\nKrishna Kumar. Hello. Thank you for the interest in this issue and for taking the time to investigate.\r\n\r\nIn regards to the last point you made, about the `build.rs` file for jailer, I think there may be an option. According to the [docs](https://doc.rust-lang.org/cargo/reference/build-scripts.html#life-cycle-of-a-build-script), if the build script returns an error code, the build process is halted.\r\n\r\nWe currently have a build script that is run for both the jailer and the firecracker binaries. We could update the script to check the targeted libc abi, before building the jailer. We have two options here: either displaying a warning or exiting with an error code.\r\n\r\nLet me discuss this with the team and I will get back to you when we reach a conclusion.\r\n\r\n\r\n Seems that there is no way of [specifying workspace members](https://github.com/rust-lang/cargo/issues/5220) based on platform.\r\nWhat I see as the most elegant way of doing this is to add a `default_members = [src/firecracker]` in the root `Cargo.toml` and modify `devtool` to only build the jailer only for musl target. (you can use `cargo build -p jailer` for that). After extensive discussions in the team, we decided to go for the option mentioned above by @dianpopa and @acatangiu.\r\nThat is, adding the firecracker binary crate as the only default member of the workspace and modifying devtool to run the two build commands, in order to build both binaries, only for musl (`cargo build` and `cargo build --release`).\r\nThis would also imply an update in the `CHANGELOG.md`.\r\n\r\n@krishnakumar4a4 are you interested in contributing a fix for this issue? If so, please tell us and get in touch if you need any guidance. Sure @alindima , would work on it and come up with a PR on this. Will let you know in case I need help. Thanks. Fixed by https://github.com/firecracker-microvm/firecracker/pull/2125  ## Reason for This PR\r\n\r\nVsock device did not restore properly after loading a microvm from snapshot.\r\n\r\n## Description of Changes\r\n\r\nFixed vsock restore and updated snapshot integration tests to use a vsock device.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Any required documentation changes (code and docs) are included in this PR.\r\n- [ ] Any newly added `unsafe` code is properly documented.\r\n- [ ] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [ ] All added/changed functionality is tested.\r\n > nit: I guess it would be nice to also adda an changelog entry\r\n\r\nChangelog updated. `utils_vsock.py` should be located in `tests/framework/utils_vsock.py` as it does not contain any tests. @dianpopa @gc-plp @georgepisaltu please review the latest changes > Changes look good, but the commits are a bit weird. I suggest either:\r\n> \r\n>     * a single commit with all changes\r\n>       or,\r\n> \r\n>     * (preferred) two commits one with the firecracker code changes (fix) and one with the tests changes (regression test + vsock refactoring)\r\n\r\nDone  \ud83d\udc4d \r\n\r\nThe integration tests in PR #2067 will fail if unversioned/badly versioned state changes happen. But still, there are corner cases when the deserialization could be successful and garbage state would be loaded. However, I believe this is highly unlikely to happen. Interested to help out!  ## Reason for This PR\r\n\r\nMove MacAddr from dumbo crate to net\r\nFixes #1765.\r\n\r\n## Description of Changes\r\n\r\nMove MacAddr from dumbo crate to net. Update references to reflect change. Remove now unneeded dependency on dumbo from devices.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [X] All commits in this PR are signed (`git commit -s`).\r\n- [X] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [X] The description of changes is clear and encompassing.\r\n- [X] Any required documentation changes (code and docs) are included in this PR.\r\n- [X] Any newly added `unsafe` code is properly documented.\r\n- [X] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [X] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [X] All added/changed functionality is tested.\r\n @iulianbarbu, thanks for the review!\r\nI have updated the git history and made the requested change.\r\nI'm not sure if the form is to put PR requested changes into their own commits or not, please let me know if you would like me to change this. * This line can also be removed now: https://github.com/jmcconnell26/firecracker/blob/ISSUE-1765-MoveMacAddrToUtils/src/vmm/Cargo.toml#L20.\r\n\r\n* I suggest modifying the commit title to: \"dumbo: move mac module to utils\"\r\nAt the end of the  commit body you can write: \"Fixes #1765\" which will trigger the closing of the issue once the PR is merged.\r\n  @iulianbarbu, @dianpopa, thanks both for taking the time to review!\r\nI have removed the dependency on dumbo, as well as updating the commit message.\r\nIf there are are any more changes you would like me to make, please let me know.  @serban300 there is this [issue](https://github.com/firecracker-microvm/firecracker/issues/1683) which never got resolved cause we still do not use BytedValue from vm-memory (see discussion there). Would you mind doing this change in this PR? (not necessary, just a nice to have, thanks!)  `Is is` -> `It is`. Also changed `else` to `otherwise` for sentence clarity\r\n\r\n## Reason for This PR\r\n\r\nFixing minor typo in docs\r\n\r\n## Description of Changes\r\n\r\n`Is is` -> `It is`. Also changed `else` to `otherwise` for sentence clarity\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Any required documentation changes (code and docs) are included in this PR.\r\n- [ ] Any newly added `unsafe` code is properly documented.\r\n- [ ] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [ ] All added/changed functionality is tested.\r\n Thanks, I will do that once I have a moment to do so. ok, I amended the commit and rebased, @serban300, thanks for your patience.  CI failed on a PR that does not impact failing test. See https://firecracker-pr.s3.amazonaws.com/pr-logs/x86_64/02074/dianpopa-firecracker-4413f28.log.html  ~Another unrelated fail was noticed here: https://firecracker-pr.s3.amazonaws.com/pr-logs/x86_64/02070/dianpopa-firecracker-bcfbb2a.log.html.~ <-> Moved to its own issue: https://github.com/firecracker-microvm/firecracker/issues/2077  After built the source code and use the Rust-lldb debugs Firecracker binary on ``` debug ``` path. The absolutes path is ``` firecracker/build/cargo_target/x86_64-unknown-linux-gnu/debug```.  I  execute command line below.\r\n\r\n``` $lldb ./firecracker ```\r\n``` $(lldb)run --api-sock /tmp/firecracker.socket. ```\r\n\r\nStart guest machine with cURL command line calls to the micro api-server on Firecracker. Firecracker can run normal status to prompt waits received command line from user. If we want to list source specified break point to the line of codes, How can list source code for setting debug point? The command line below not show any source during try to debug the Firecracker. \r\n\r\n``` $(lldb)source list ```\r\n\r\n\r\n > Hi @sumatejit ,\r\n> \r\n> I am able to reproduce the issue only when I compile using devtool:\r\n> \r\n> ```\r\n> $ tools/devtool build\r\n> ```\r\n> \r\n> and load the resulting binary with `rust-lldb` from outside the docker container that's used for building.\r\n> \r\n> However if I compile with `cargo` directly, it works:\r\n> \r\n> ```\r\n> $ cargo build\r\n> $ lldb ./firecracker\r\n> (lldb) run --api-sock /tmp/firecracker.socket.\r\n> ...\r\n> root@localhost:~# Process 19873 stopped\r\n> * thread #1, name = 'firecracker', stop reason = signal SIGSTOP\r\n>     frame #0: 0x0000000000801dd7 firecracker`epoll_pwait + 31\r\n> firecracker`epoll_pwait:\r\n> ->  0x801dd7 <+31>: cmpl   $-0x26, %eax\r\n>     0x801dda <+34>: movl   %eax, %r10d\r\n>     0x801ddd <+37>: jne    0x801df1                  ; <+57>\r\n>     0x801ddf <+39>: testq  %r8, %r8\r\n> (lldb) source list\r\n>    32  \tfn main() {\r\n>    33  \t    LOGGER\r\n>    34  \t        .configure(Some(DEFAULT_INSTANCE_ID.to_string()))\r\n>    35  \t        .expect(\"Failed to register logger\");\r\n>    36  \t\r\n>    37  \t    if let Err(e) = register_signal_handlers() {\r\n>    38  \t        error!(\"Failed to register signal handlers: {}\", e);\r\n>    39  \t        process::exit(i32::from(vmm::FC_EXIT_CODE_GENERIC_ERROR));\r\n>    40  \t    }\r\n>    41  \t\r\n> ```\r\n> \r\n> Could you try to build the executable using `cargo` and see if it works ?\r\n\r\nNote for new user cannot run with cargo default toolchain such ```x86_64-unknown-linux-gnu ```.  You can add new toolchain for compile the Firecracker with command line below.\r\n```\r\n$rustup target add x86_64-unknown-linux-musl \r\n```\r\nAfter this we can compile source code with new toolchain add to Rustup by use command line.\r\n```\r\n$cargo build --target x86_64-unknown-linux-musl --verbose\r\n```\r\nYou can see the binary file at target toolchain like ```x86_64-unknown-linux-musl/debug```.  This path contains binary file for running on debug mode by show a source code. \r\n\r\n```\r\n(lldb) run --api-sock /tmp/firecracker.socket\r\nProcess 9986 launched: '/home/vagrant/workspacerust/firecracker/build/cargo_target/x86_64-unknown-linux-musl/debug/firecracker' (x86_64)\r\n\r\nProcess 9986 stopped\r\n* thread #1, name = 'firecracker', stop reason = signal SIGSTOP\r\n    frame #0: 0x00000000007cee56 firecracker`__syscall + 25\r\nfirecracker`__syscall:\r\n->  0x7cee56 <+25>: retq   \r\n\r\nfirecracker`stub_dlsym:\r\n    0x7cee57 <+0>:  leaq   0x30fca(%rip), %rdi\r\n    0x7cee5e <+7>:  subq   $0x8, %rsp\r\n    0x7cee62 <+11>: xorl   %eax, %eax\r\n(lldb) source list\r\n   32  \tfn main() {\r\n   33  \t    LOGGER\r\n   34  \t        .configure(Some(DEFAULT_INSTANCE_ID.to_string()))\r\n   35  \t        .expect(\"Failed to register logger\");\r\n   36  \t\r\n   37  \t    if let Err(e) = register_signal_handlers() {\r\n   38  \t        error!(\"Failed to register signal handlers: {}\", e);\r\n   39  \t        process::exit(i32::from(vmm::FC_EXIT_CODE_GENERIC_ERROR));\r\n   40  \t    }\r\n   41  \t\r\n```\r\n\r\nFor my opinion we can close this issue.  The boot timer device supports logging the boot time of the guest since InstanceStart command. In the past, this was handled using PIO for x86_64 and MMIO for aarch64. In order to unify the code in a generic mechanism, we came up with a MMIO boot timer 'device'. The implementation for x86_64 involved changing PIO writes to 0x03f0 to MMIO writes to 0xd0000000. For aarch64 the mechanism did not change.\r\n\r\nThis boot time functionality is used only during testing, therefore we decided to load the device only when specified, instead of activating it by default. A dedicated **--boot-timer** parameter would be added to the cmdline options in order to request the boot timer feature.\r\n There is also the option of adding a --test-mode parameter which has the right semantics about not using this in production \ud83e\udd14  Fixed by #2078.  ## Reason for This PR\r\n\r\nFix for #745 \r\n\r\nImproving version output to include number of commits over latest tag, commit hash and dirty flag.\r\n\r\n## Description of Changes\r\n\r\nAdded a build script that, on every `devtool build` sets the FIRECRACKER_VERSION environment variable to the output of \"git describe --dirty\" command.\r\n\r\nThis is a special environment variable which is embedded in the executable code.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [x] All added/changed functionality is tested.\r\n > \r\n> \r\n> I like the idea and the approach, but in its current form this PR would make our release binaries also report commit hash instead of plain version numbers:\r\n> \r\n> `0.21.0-442-gd006277` instead of `v0.21.0` as it used to be.\r\n> \r\n> Do we want to change our release version numbering policy like so, or should add functionality to this PR to treat releases differently?\r\n\r\nI would use --verbose parameter to --version and only there add info on branches and githash on top of current info. Thank you for your feedback.\r\nI agree with you, maybe it would be best if the release binary would show only the simplified version number from `Cargo.toml`.\r\n\r\nI also agree with @raduiliescu that it would be useful to have a verbose parameter for the version, just in case somebody needs it.\r\n\r\nAre there any concerns regarding this approach? > > I would use --verbose parameter to --version and only there add info on branches and githash on top of current info.\r\n> \r\n> That should work, but it makes it harder to see whether a particular binary is a release or a custom build. `--version` would be the same for both, while `--verbose` would differ only by commit hash so it requires the user to go to the repo and compare hashes to find out if that binary is a release binary or a custom build.\r\n> \r\n> I'd like it if we could use `git tags` to make that differentiation and do something like: use `--version` which outputs:\r\n> \r\n> * for a release binary (local `HEAD` is at a particular `vX.Y.Z` tag): output is `vX.Y.Z`\r\n> * for other builds (local `HEAD` does not match any release tag): output is `vX.Y.Z-branch-commit[-dirty]`\r\n> \r\n> WDYT?\r\n\r\nWell, actually, the behaviour that is currently implemented in this PR is the one you mentioned.\r\n\r\nThe `git describe --dirty` command outputs just vX.Y.Z if `HEAD` matches a tag.\r\nThe command only appends the commit and dirty flags if it does not match a tag.\r\n I have found that there might be something fundamentally flawed about the approach.\r\n\r\nThe `build.rs` script that I have introduced is per-package. That means that it runs when cargo detects that a change has occurred in that package. The package in this case is `firecracker`.\r\n\r\nHowever, there are changes that should trigger the re-run even if they didn't happen inside the firecracker crate. For example, an update in the `jailer` crate should also potentially be reflected in the version number of the firecracker crate.\r\n\r\nOne way of fixing this is by using in the `build.rs` script an instruction like `cargo:rerun-if-changed=PATH`. Still, this is not enough because it only does a shallow check (according to the [docs](https://doc.rust-lang.org/cargo/reference/build-scripts.html#cargorerun-if-changedpath)). Therefore, if a file from a nested folder is changed, this wouldn't be reflected in the version number. This could be mitigated by making the script loop through all the files and folders recursively, adding each of them to a separate `cargo:rerun-if-changed=PATH` instruction, while also checking the .gitignore file. (This could also be a build-time performance impact and seems like a great overkill).\r\n\r\nThis could be fixed if there were a single top-level crate. We could then define the build.rs script to watch for changes in the entire package. Currently, since the top-level `Cargo.toml` only defines two separate workspaces, this isn't possible.\r\n\r\nA very hacky way of solving this would be to perform a simple operation like `touch src/firecracker/main.rs` to artificially trigger the re-run of the build script, getting the up-to-date `git describe` result\r\n\r\nThis problem is rooted in the fact that the firecracker crate version and the firecracker repository version are not the same thing, since the repo also includes other crates, like the jailer for example.\r\n\r\nSome help and feedback on this would be greatly appreciated. The team and I synced offline on this issue.\r\n\r\nThe behaviour of \"git describe --dirty\" is actually the behaviour we expect; that is, when a binary is build from a release tag, the output returned by the command is just the tag (`vX.Y.Z`) and only when a binary is build from a repo that has some commits over a release tag or some dirty (modified and uncommitted) files does this command output the long version (`vX.Y.Z-nr-hash-[dirty]`). This is actually what we want.\r\n\r\nIn regards to the implementation, the concerns outlined in the previous comment still remain.\r\n\r\nI have explored on the latest commit an option that does a `touch` command on the `build.rs` file as the last step of the build script. This artificially updates the time when the build script was modified and automatically triggers a re-run on every build.\r\n\r\nThis approach seems to work and has minimal impact.\r\n\r\nWDYT?\r\n > The team and I synced offline on this issue.\r\n> \r\n> The behaviour of \"git describe --dirty\" is actually the behaviour we expect; that is, when a binary is build from a release tag, the output returned by the command is just the tag (`vX.Y.Z`) and only when a binary is build from a repo that has some commits over a release tag or some dirty (modified and uncommitted) files does this command output the long version (`vX.Y.Z-nr-hash-[dirty]`). This is actually what we want.\r\n> \r\n> In regards to the implementation, the concerns outlined in the previous comment still remain.\r\n> \r\n> I have explored on the latest commit an option that does a `touch` command on the `build.rs` file as the last step of the build script. This artificially updates the time when the build script was modified and automatically triggers a re-run on every build.\r\n> \r\n> This approach seems to work and has minimal impact.\r\n> \r\n> WDYT?\r\n\r\nThis is clearly an improvement. I have no other concerns to add.\r\n Putting this on hold while we discuss a testing strategy After syncing with the team, we decided for now, to remove the integration test for the `--version` flag Does this change have any impact on reproducible builds? > Does this change have any impact on reproducible builds?\r\n\r\nAs long as the folder containing the sources has the git directory and information, reproducible builds should not be affected I have yet to investigate for a git command in order to also set the dirty flag when there are any new, unstaged and uncommited files added.\r\n\r\nThe `git describe --dirty` command does not report this as dirty.\r\n\r\nWDYT? Is this what we want? > I have yet to investigate for a git command in order to also set the dirty flag when there are any new, unstaged and uncommited files added.\r\n> \r\n> The `git describe --dirty` command does not report this as dirty.\r\n> \r\n> WDYT? Is this what we want?\r\n\r\nI have added in the latest commit a bash command that has the desired behaviour. What do you think?  Closing this in favor of #2079.  Hi guys\r\n\r\n**_I'm curious that When we use SendCtrlAltDel API to shutdown microvm, exactly which service routine we will trigger in guest os?_** \ud83d\ude35\r\nSince my guest os stuck on `SendCtrlAltDel`, `reboot: System halted`\r\n```\r\nbash-4.2# [  296.418389] systemd[1]: Received SIGINT.\r\n[  296.419056] systemd[1]: Cannot add dependency job for unit systemd-update-utmp-runlevel.service, ignoring: Unit not found.\r\n[  296.420104] systemd[1]: Starting Update UTMP about System Runlevel Changes...\r\n         Starting Update UTMP about System Runlevel Changes...\r\n[  296.421124] systemd[1]: Stopped target Kata Containers Agent Target.\r\n[  OK  ] Stopped target Kata Containers Agent Target.\r\n[  296.422144] systemd[1]: Stopping Kata Containers debug console...\r\n         Stopping Kata Containers debug console...\r\n[  296.423149] systemd[1]: Stopping Kata Containers Agent...\r\n         Stopping Kata Containers Agent...\r\n[  296.423882] systemd[1]: Stopped target Timers.\r\n[  OK  ] Stopped target Timers.\r\n[  296.426320] systemd[1]: Stopped Daily Cleanup of Temporary Directories.\r\n[  OK  ] Stopped Daily Cleanup of Temporary Directories.\r\n[  296.429883] systemd[1]: Started Update UTMP about System Runlevel Changes.\r\n[  OK  ] Started Update UTMP about System Runlevel Changes.\r\n[  296.433040] systemd[1]: Shutting down.\r\n[  296.456853] printk: systemd-shutdow: 39 output lines suppressed due to ratelimiting\r\n[  296.458473] systemd-shutdown[1]: Syncing filesystems and block devices.\r\n[  296.459072] systemd-shutdown[1]: Sending SIGTERM to remaining processes...\r\n[  296.460879] systemd-shutdown[1]: Sending SIGKILL to remaining processes...\r\n[  296.462191] systemd-shutdown[1]: Unmounting file systems.\r\n[  296.462809] systemd-shutdown[73]: Remounting '/tmp' read-only in with options ''.\r\n[  296.463663] systemd-shutdown[74]: Unmounting '/tmp'.\r\n[  296.464220] systemd-shutdown[75]: Remounting '/' read-only in with options 'errors=remount-ro,data=ordered'.\r\n[  296.465203] EXT4-fs (vda1): re-mounted. Opts: errors=remount-ro,data=ordered\r\n[  296.465913] systemd-shutdown[76]: Remounting '/' read-only in with options 'errors=remount-ro,data=ordered'.\r\n[  296.466806] EXT4-fs (vda1): re-mounted. Opts: errors=remount-ro,data=ordered\r\n[  296.467435] systemd-shutdown[1]: All filesystems unmounted.\r\n[  296.467904] systemd-shutdown[1]: Deactivating swaps.\r\n[  296.468840] atkbd serio0: shutdown\r\n[  296.469142] i8042 i8042: shutdown\r\n[  296.469459] serial8250 serial8250: shutdown\r\n[  296.469812] virtio-mmio virtio-mmio.8: shutdown\r\n[  296.470196] virtio-mmio virtio-mmio.7: shutdown\r\n[  296.470580] virtio-mmio virtio-mmio.6: shutdown\r\n[  296.470963] virtio-mmio virtio-mmio.5: shutdown\r\n[  296.471352] virtio-mmio virtio-mmio.4: shutdown\r\n[  296.471737] virtio-mmio virtio-mmio.3: shutdown\r\n[  296.472130] virtio-mmio virtio-mmio.2: shutdown\r\n[  296.472518] virtio-mmio virtio-mmio.1: shutdown\r\n[  296.472904] virtio-mmio virtio-mmio.0: shutdown\r\n[  296.473290] PM: Calling i8259A_shutdown+0x0/0x10\r\n[  296.473686] reboot: System halted\r\n```\r\nPreviously, I wondered that maybe in systemd, the `CTRL-ALT-DEL` key sequence triggers the `ctrl-alt-del.target` (which by default lives in the system path, `/lib/systemd/system/ctrl-alt-del.target` on Ubuntu) and then it starts the `systemd-reboot.service`. Eventually, it will call\r\n`ExecStart=/usr/bin/systemctl --force reboot`\r\n```\r\nbash-4.2# cat /lib/systemd/system/systemd-reboot.service\r\n#  This file is part of systemd.\r\n#\r\n#  systemd is free software; you can redistribute it and/or modify it\r\n#  under the terms of the GNU Lesser General Public License as published by\r\n#  the Free Software Foundation; either version 2.1 of the License, or\r\n#  (at your option) any later version.\r\n\r\n[Unit]\r\nDescription=Reboot\r\nDocumentation=man:systemd-halt.service(8)\r\nDefaultDependencies=no\r\nRequires=shutdown.target umount.target final.target\r\nAfter=shutdown.target umount.target final.target\r\n\r\n[Service]\r\nType=oneshot\r\nExecStart=/usr/bin/systemctl --force reboot\r\n```\r\n**_However, if I manually run `ExecStart=/usr/bin/systemctl --force reboot`, the guest os could exit normally._**\r\n```\r\nbash-4.2# /usr/bin/systemctl --force reboot\r\n[   34.653313] systemd[1]: Shutting down.\r\nbash-4.2# [   34.671309] printk: systemd-shutdow: 39 output lines suppressed due to ratelimiting\r\n[   34.672675] systemd-shutdown[1]: Syncing filesystems and block devices.\r\n[   34.673155] systemd-shutdown[1]: Sending SIGTERM to remaining processes...\r\n[   34.674481] systemd-shutdown[1]: Sending SIGKILL to remaining processes...\r\n[   34.675438] systemd-shutdown[1]: Unmounting file systems.\r\n[   34.675905] systemd-shutdown[67]: Remounting '/tmp' read-only in with options ''.\r\n[   34.676498] systemd-shutdown[68]: Unmounting '/tmp'.\r\n[   34.676917] systemd-shutdown[69]: Remounting '/' read-only in with options 'errors=remount-ro,data=ordered'.\r\n[   34.677656] EXT4-fs (vda1): re-mounted. Opts: errors=remount-ro,data=ordered\r\n[   34.678193] systemd-shutdown[70]: Remounting '/' read-only in with options 'errors=remount-ro,data=ordered'.\r\n[   34.678855] EXT4-fs (vda1): re-mounted. Opts: errors=remount-ro,data=ordered\r\n[   34.679331] systemd-shutdown[1]: All filesystems unmounted.\r\n[   34.679687] systemd-shutdown[1]: Deactivating swaps.\r\n[   34.680416] Unregister pv shared memory for cpu 0\r\n[   34.680723] atkbd serio0: shutdown\r\n[   34.680936] i8042 i8042: shutdown\r\n[   34.681165] serial8250 serial8250: shutdown\r\n[   34.681430] virtio-mmio virtio-mmio.8: shutdown\r\n[   34.681711] virtio-mmio virtio-mmio.7: shutdown\r\n[   34.681985] virtio-mmio virtio-mmio.6: shutdown\r\n[   34.682274] virtio-mmio virtio-mmio.5: shutdown\r\n[   34.682550] virtio-mmio virtio-mmio.4: shutdown\r\n[   34.682829] virtio-mmio virtio-mmio.3: shutdown\r\n[   34.683110] virtio-mmio virtio-mmio.2: shutdown\r\n[   34.683387] virtio-mmio virtio-mmio.1: shutdown\r\n[   34.683664] virtio-mmio virtio-mmio.0: shutdown\r\n[   34.683954] PM: Calling i8259A_shutdown+0x0/0x10\r\n[   34.684242] reboot: Restarting system\r\n[   34.684460] reboot: machine restart\r\n```  ## Reason for This PR\r\n\r\nNow that the project has been successfully migrated to 2018 edition, usage of `extern crate` is no longer required. In addition, clippy reports a few instances of unused imports, uneeded `Box`ing, and unneeded clones, and out of date doctest implementations.\r\n\r\n## Description of Changes\r\n\r\n- Remove all declarations of `extern crate`\r\n- Refactor doctests per clippy to remove `fn main()` and correct imports\r\n- Refactor unneeded imports, and broken macro imports \r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [x] All added/changed functionality is tested.\r\n I'm a bit confused. How did the previous \"switch to Rust 2018\" PR pass clippy test if clippy was reporting issues? \ud83d\ude04  > I'm a bit confused. How did the previous \"switch to Rust 2018\" PR pass clippy test if clippy was reporting issues? \ud83d\ude04\r\n\r\nGood question! It looks like the additional clippy warnings only appeared after removing the `extern crate` and `#[macro_use]` declarations, which is interesting. I will have some more time tomorrow to look into the current `aarch64` build failure. It appears to be a networking error or timeout, some details from the log:\r\n```console\r\n[15981] Command:\r\n['ssh', '-q', '-o', 'ConnectTimeout=1', '-o', 'StrictHostKeyChecking=no', '-o', 'UserKnownHostsFile=/dev/null', '-i', '/tmp/fctest-34yl2q4s/70bdd7e0-2de1-4655-ac1a-4984f8f789b0/fsfiles/xenial.rootfs.id_rsa', 'root@192.168.0.166', 'workers=\"\";for i in $(seq 1 50); do  (hash=$(cat /tmp/vsock/test.blob | vsock_helper echo 2 5252 | md5sum | cut -f1 -d\\\\ ) && [[ \"$hash\" = \"d121eddd4e9369f696ea0831fabdb6e2\" ]])&   workers=\"$workers $!\";done;for w in $workers; do wait $w || exit -1; done']\r\n[15981] stderr:\r\nsocket(): Address family not supported by protocol\r\n``` Have the same issue on #2041 .   Hi guys\r\n\r\nGot requirement from kata-containers, we want a graceful way to power off the VM from external on aarch64, since it's brutal to use `kill -9` at the first place and may leave stale resource behind.\r\n\r\nSince x86_64 has provided API action `SendCtrlAltDel` to gracefully shutdown the microvm from external. I'd like to have the same functionality on AArch64.\r\n\r\n  ## Draft status\r\n\r\nNeeds regression test before upgrading to mergeable PR.\r\n\r\n## Reason for This PR\r\n\r\nFixes #1974 \r\n\r\n## Description of Changes\r\n\r\nWhen doing a Block device backing file update we have to update multiple properties built from the backing file.\r\n\r\nThe actual backing file path was not being updated so snapshots would use the old path and snapshot restores would malfunction.\r\n\r\nCreated `DiskProperties` helper object for setting up all `Block` fields derived from the backing file. The object can be used in both construction and update paths for the `Block` device.\r\nIt provides functionality for setting up all backing file related fields so that all related logic is contained.\r\n\r\nThis commit fixes snapshots of uVMs with PATCHed block devices.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [x] All added/changed functionality is tested.\r\n  ## Reason for This PR\r\n\r\nResolves #839 \r\n\r\n## Description of Changes\r\n\r\nThis PR updates all crates in `firecracker` to `edition=\"2018\"`. The goal of the PR is to change a _minimal_ surface area of the project to make it 2018-edition idiomatic.\r\n\r\nGeneral notes:\r\n\r\n- Non-compilation adjustments were made in addition to import statements and idiom fixes based on compiler and clippy suggestions. ~All instances of `extern crate` have been removed~ (this change will come later), `fn main()` decls were removed from doctests, remove unnecessary boxing & cloning, etc.\r\n- I've not tried to standardize code _style_ outside of what passes the `rustfmt` integration tests. Since different authors have worked on different crates, I attempted to stick to whichever style they appeared to use (especially in regards to import organization)\r\n\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [x] All added/changed functionality is tested.\r\n This is currently passing 2 out of the 3 checks, but I am having some trouble drilling down the error in the `aarch64` build. For some reason, on that arch alone the `vmm` crate has an import resolution failure at L14 of `rpc_interface.rs`, specifically:\r\n```rust\r\nuse crate::builder::{self, StartMicrovmError};\r\n```\r\nThis does not occur in the integration suite test nor in the `x86_64` build. The `#[cfg(target_arch)]` compiler directives are unchanged from the master branch in that file, so I'm not sure why exactly this is occurring.  ## Reason for This PR\r\n\r\nWhen running performance tests, one might want to run them in a shielded and isolated environment, where there is as little as possible system tasks interference. It can be done with external tools, but this would imply adding specific dependencies on the host. To avoid this, but to also offer the bare minimum for setting up a shielded and isolated environment, `devtool` was augmented with the needed support.\r\n\r\n## Description of Changes\r\n\r\nAdded `devtool test` flag: -s|--shield {NUMA_NODE_ID};{CPUS_COUNT}\r\n\r\nThe flag computes the available CPUs and memory specified through the pattern. It will bind the tests docker container\r\nto those. It also isolates the docker container from outside tasks interference, by trying to move all exisiting running tasks\r\nto a separate cpuset, which will use other resources compared to the shield. However, if there is only a single NUMA node online on the platform, the system cpuset can not be created and the tests will run as if there is no shield present.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n~~[] Any newly added `unsafe` code is properly documented.~~\r\n~~[] Any API changes are reflected in `firecracker/swagger.yaml`.~~\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n~~[] All added/changed functionality is tested.~~\r\n Closing this in favor of #2126 .  Once you get this working you can enable the snapshot integration tests for ARM and publish kernel and rootfs images in the S3 artifact repository.     Feature was merged in rust-vmm. I still need to merge this into `https://github.com/firecracker-microvm/kvm-ioctls`. Fixed by https://github.com/firecracker-microvm/kvm-ioctls/pull/7.  There are now two new metrics for throttled events in the block\r\ndevice: `ops_rate_limiter_throttled` and\r\n`transfer_rate_limiter_throttled`.\r\n\r\nSigned-off-by: George Pisaltu <gpl@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\n#1987 \r\n\r\n## Description of Changes\r\n\r\nAdded `ops_rate_limiter_throttled` and `transfer_rate_limiter_throttled` metrics for a block device.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Any required documentation changes (code and docs) are included in this PR.\r\n- [ ] Any newly added `unsafe` code is properly documented.\r\n- [ ] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n- [ ] All added/changed functionality is tested.\r\n  I'm running the following command:\r\n\r\n```sh\r\nsudo ./firectl --firecracker-binary=$HOME/firecracker --kernel=$HOME/vmlinux --root-drive=$HOME/flatcar_production_image.bin --root-partition=\"cf6a426f-c175-42b9-a165-fd3bab6a652c\" --kernel-opts=\"rootflags=rw mount.usrflags=ro BOOT_IMAGE=/flatcar/vmlinuz-a mount.usr=/dev/mapper/usr verity.usr=PARTUUID=7130c94a-213a-4e5a-8e26-6cce9662f132 consoleblank=0 flatcar.first_boot=detected flatcar.randomize_disk_guid=00000000-0000-0000-0000-000000000001 verity.usrhash=2ba8709773c62cf8a4feb3651ca220ce633340ec9de142f80c412d43a7f78253 console=ttyS0 reboot=k panic=1 pci=off\" --cpu-template=T2 --memory=1024\r\n```\r\n\r\nDespite I get this:\r\n\r\n```\r\nINFO[0000] Attaching drive /home/salvo/flatcar_production_image.bin, slot 1, root true.\r\nINFO[0000] Attached drive /home/salvo/flatcar_production_image.bin: [PUT /drives/{drive_id}][204] putGuestDriveByIdNoContent\r\n```\r\n\r\nI do not see any device mounted in my host machine in fact it does not boot up correctly returning \r\n```\r\nWarning: /dev/disk/by-partuuid/cf6a426f-c175-42b9-a165-fd3bab6a652c does not exist\r\n```\r\n\r\nI would not mind improving the mounting of the device wiring a PR in case there is an issue. However, at the moment, I'm stuck to debug further the following issue.   Hi @mazzy89,\r\n\r\nI think that this issue may be related to the [firectl](https://github.com/firecracker-microvm/firectl) project.\r\n\r\nIf you want to try the kernel and root filesystem that you're using with Firecracker, you can follow the [Getting Started](https://github.com/firecracker-microvm/firecracker/blob/master/docs/getting-started.md) document.\r\n\r\nThanks! Hi @gc-plp \r\n\r\nthank you for the reaction.\r\n\r\nI think the issue belongs here \ud83d\ude09\r\n\r\nI've tested also without using `firectl` and I get the same result. It is not a problem of `firectl` for sure.\r\n\r\nYou can replicate this simply:\r\n\r\n```json\r\n{\r\n  \"boot-source\": {\r\n    \"kernel_image_path\": \"vmlinux\",\r\n    \"boot_args\": \"rootflags=rw mount.usrflags=ro BOOT_IMAGE=/flatcar/vmlinuz-a mount.usr=/dev/mapper/usr verity.usr=PARTUUID=7130c94a-213a-4e5a-8e26-6cce9662f132 consoleblank=0 flatcar.first_boot=detected flatcar.randomize_disk_guid=00000000-0000-0000-0000-000000000001 verity.usrhash=2ba8709773c62cf8a4feb3651ca220ce633340ec9de142f80c412d43a7f78253 console=ttyS0 noapic reboot=k panic=1 pci=off\"\r\n  },\r\n  \"drives\": [\r\n    {\r\n      \"drive_id\": \"1\",\r\n      \"path_on_host\": \"flatcar_production_image.bin\",\r\n      \"is_root_device\": true,\r\n      \"is_read_only\": false,\r\n      \"partuuid\": \"cf6a426f-c175-42b9-a165-fd3bab6a652c\"\r\n    }\r\n  ],\r\n  \"machine-config\": {\r\n    \"vcpu_count\": 1,\r\n    \"mem_size_mib\": 1024,\r\n    \"ht_enabled\": false\r\n  }\r\n}\r\n```\r\n\r\n```sh\r\nsudo firecracker --api-sock /tmp/firecracker --config-file config.json\r\n```\r\n In order to debug what Firecracker is doing under the hood, you can enable the logging module as described [here](https://github.com/firecracker-microvm/firecracker/blob/master/docs/logger.md).\r\n\r\n>it does not boot up correctly\r\n\r\nCould you give us more details on what you are referring to by not booting up correctly? Does the kernel boot? If yes, does it work with a different rootfs? Thank you @gc-plp \r\n\r\nI'll try to turn on the logging module.\r\n\r\nMeanwhile trying to reply to your question\r\n\r\nYes the kernel boot.\r\n\r\nI have tried with different rootfs and it does not work.\r\n\r\nMy gut feeling is that the kernel I'm using with this config https://stable.release.flatcar-linux.net/amd64-usr/current/flatcar_production_image_kernel_config.txt has not loaded the `virtio` modules.\r\n\r\nI'm trying to load them at the startup. built the latest unreleased `firecracker` version so to have logging flags available. here what I get using the flags\r\n\r\n```\r\n--log-path ./firecracker-vmm.log --level Error --show-level --show-log-origin\r\n```\r\n\r\n```\r\nRunning Firecracker v0.21.0\r\n```\r\n\r\nnot much \r\n\r\n bootstrap output\r\n\r\n```\r\n[    0.000000] Linux version 4.19.128-flatcar (jenkins@jenkins-worker-3) (gcc version 8.3.0 (Gentoo Hardened 8.3.0-r1 p1.1)) #1 SMP Tue Jun 16 10:17:17 -00 2020\r\n[    0.000000] Command line: rootflags=rw mount.usrflags=ro BOOT_IMAGE=/flatcar/vmlinuz-a mount.usr=/dev/mapper/usr verity.usr=PARTUUID=7130c94a-213a-4e5a-8e26-6cce9662f132 consoleblank=0 flatcar.first_boot=detected flatcar.randomize_disk_guid=00000000-0000-0000-0000-000000000001 verity.usrhash=2ba8709773c62cf8a4feb3651ca220ce633340ec9de142f80c412d43a7f78253 console=ttyS0 reboot=k panic=1 pci=off root=PARTUUID=cf6a426f-c175-42b9-a165-fd3bab6a652c ro virtio_mmio.device=4K@0xd0000000:5\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'\r\n[    0.000000] x86/fpu: xstate_offset[2]:  576, xstate_sizes[2]:  256\r\n[    0.000000] x86/fpu: Enabled xstate features 0x7, context size is 832 bytes, using 'standard' format.\r\n[    0.000000] BIOS-provided physical RAM map:\r\n[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009fbff] usable\r\n[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x000000007fffffff] usable\r\n[    0.000000] NX (Execute Disable) protection: active\r\n[    0.000000] DMI not present or invalid.\r\n[    0.000000] Hypervisor detected: KVM\r\n[    0.000000] kvm-clock: Using msrs 4b564d01 and 4b564d00\r\n[    0.000000] kvm-clock: cpu 0, msr 5266001, primary cpu clock\r\n[    0.000000] kvm-clock: using sched offset of 14829022 cycles\r\n[    0.000041] clocksource: kvm-clock: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns\r\n[    0.000072] tsc: Detected 2194.848 MHz processor\r\n[    0.000692] last_pfn = 0x80000 max_arch_pfn = 0x400000000\r\n[    0.000957] Disabled\r\n[    0.000989] x86/PAT: MTRRs disabled, skipping PAT initialization too.\r\n[    0.001024] CPU MTRRs all blank - virtualized system.\r\n[    0.001062] x86/PAT: Configuration [0-7]: WB  WT  UC- UC  WB  WT  UC- UC\r\n[    0.001898] ACPI: Early table checksum verification disabled\r\n[    0.002059] ACPI BIOS Error (bug): A valid RSDP was not found (20180810/tbxfroot-210)\r\n[    0.002431] No NUMA configuration found\r\n[    0.002433] Faking a node at [mem 0x0000000000000000-0x000000007fffffff]\r\n[    0.002448] NODE_DATA(0) allocated [mem 0x7fffa000-0x7fffffff]\r\n[    0.002964] Zone ranges:\r\n[    0.003002]   DMA      [mem 0x0000000000001000-0x0000000000ffffff]\r\n[    0.003004]   DMA32    [mem 0x0000000001000000-0x000000007fffffff]\r\n[    0.003005]   Normal   empty\r\n[    0.003007] Movable zone start for each node\r\n[    0.003008] Early memory node ranges\r\n[    0.003009]   node   0: [mem 0x0000000000001000-0x000000000009efff]\r\n[    0.003010]   node   0: [mem 0x0000000000100000-0x000000007fffffff]\r\n[    0.003048] Zeroed struct page in unavailable ranges: 98 pages\r\n[    0.003049] Initmem setup node 0 [mem 0x0000000000001000-0x000000007fffffff]\r\n[    0.094834] smpboot: Boot CPU (id 0) not listed by BIOS\r\n[    0.094859] smpboot: Allowing 1 CPUs, 0 hotplug CPUs\r\n[    0.095026] [mem 0x80000000-0xffffffff] available for PCI devices\r\n[    0.095037] Booting paravirtualized kernel on KVM\r\n[    0.095051] clocksource: refined-jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1910969940391419 ns\r\n[    0.187793] random: get_random_bytes called from start_kernel+0x93/0x525 with crng_init=0\r\n[    0.187831] setup_percpu: NR_CPUS:512 nr_cpumask_bits:512 nr_cpu_ids:1 nr_node_ids:1\r\n[    0.193428] percpu: Embedded 44 pages/cpu s143192 r8192 d28840 u2097152\r\n[    0.193533] KVM setup async PF for cpu 0\r\n[    0.193549] kvm-stealtime: cpu 0, msr 7da161c0\r\n[    0.193584] Built 1 zonelists, mobility grouping on.  Total pages: 515977\r\n[    0.193586] Policy zone: DMA32\r\n[    0.193599] Kernel command line: rootflags=rw mount.usrflags=ro rootflags=rw mount.usrflags=ro BOOT_IMAGE=/flatcar/vmlinuz-a mount.usr=/dev/mapper/usr verity.usr=PARTUUID=7130c94a-213a-4e5a-8e26-6cce9662f132 consoleblank=0 flatcar.first_boot=detected flatcar.randomize_disk_guid=00000000-0000-0000-0000-000000000001 verity.usrhash=2ba8709773c62cf8a4feb3651ca220ce633340ec9de142f80c412d43a7f78253 console=ttyS0 reboot=k panic=1 pci=off root=PARTUUID=cf6a426f-c175-42b9-a165-fd3bab6a652c ro virtio_mmio.device=4K@0xd0000000:5\r\n[    0.199039] Memory: 1993932K/2096760K available (10252K kernel code, 1217K rwdata, 6032K rodata, 45380K init, 1768K bss, 102828K reserved, 0K cma-reserved)\r\n[    0.199748] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1\r\n[    0.199782] ftrace: allocating 29240 entries in 115 pages\r\n[    0.226923] rcu: Hierarchical RCU implementation.\r\n[    0.226925] rcu: \tRCU event tracing is enabled.\r\n[    0.226937] rcu: \tRCU restricting CPUs from NR_CPUS=512 to nr_cpu_ids=1.\r\n[    0.226950] rcu: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=1\r\n[    0.231669] NR_IRQS: 33024, nr_irqs: 32, preallocated irqs: 16\r\n[    0.232204] Console: colour dummy device 80x25\r\n[    0.366262] console [ttyS0] enabled\r\n[    0.367308] APIC: ACPI MADT or MP tables are not detected\r\n[    0.368910] APIC: Switch to virtual wire mode setup with no configuration\r\n[    0.370850] Not enabling interrupt remapping due to skipped IO-APIC setup\r\n[    0.372810] KVM setup pv IPIs\r\n[    0.373920] clocksource: tsc-early: mask: 0xffffffffffffffff max_cycles: 0x1fa33006d59, max_idle_ns: 440795304862 ns\r\n[    0.376959] Calibrating delay loop (skipped) preset value.. 4389.69 BogoMIPS (lpj=2194848)\r\n[    0.378951] pid_max: default: 32768 minimum: 301\r\n[    0.379991] Security Framework initialized\r\n[    0.380969] SELinux:  Initializing.\r\n[    0.388284] Dentry cache hash table entries: 262144 (order: 9, 2097152 bytes)\r\n[    0.393687] Inode-cache hash table entries: 131072 (order: 8, 1048576 bytes)\r\n[    0.395974] Mount-cache hash table entries: 4096 (order: 3, 32768 bytes)\r\n[    0.397962] Mountpoint-cache hash table entries: 4096 (order: 3, 32768 bytes)\r\n[    0.401034] x86/cpu: Activated the Intel User Mode Instruction Prevention (UMIP) CPU feature\r\n[    0.404101] Last level iTLB entries: 4KB 64, 2MB 8, 4MB 8\r\n[    0.404950] Last level dTLB entries: 4KB 64, 2MB 0, 4MB 0, 1GB 4\r\n[    0.406959] Spectre V1 : Mitigation: usercopy/swapgs barriers and __user pointer sanitization\r\n[    0.408968] Spectre V2 : Mitigation: Enhanced IBRS\r\n[    0.409951] Spectre V2 : Spectre v2 / SpectreRSB mitigation: Filling RSB on context switch\r\n[    0.411960] Spectre V2 : mitigation: Enabling conditional Indirect Branch Prediction Barrier\r\n[    0.413952] Speculative Store Bypass: Mitigation: Speculative Store Bypass disabled via prctl and seccomp\r\n[    0.429024] Freeing SMP alternatives memory: 28K\r\n[    0.433318] smpboot: SMP disabled\r\n[    0.434979] Performance Events: unsupported p6 CPU model 85 no PMU driver, software events only.\r\n[    0.438130] rcu: Hierarchical SRCU implementation.\r\n[    0.441239] NMI watchdog: Perf NMI watchdog permanently disabled\r\n[    0.443143] smp: Bringing up secondary CPUs ...\r\n[    0.443951] smp: Brought up 1 node, 1 CPU\r\n[    0.445951] smpboot: Max logical packages: 1\r\n[    0.446951] smpboot: Total of 1 processors activated (4389.69 BogoMIPS)\r\n[    0.450159] devtmpfs: initialized\r\n[    0.451047] x86/mm: Memory block size: 128MB\r\n[    0.453613] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 1911260446275000 ns\r\n[    0.454954] futex hash table entries: 256 (order: 2, 16384 bytes)\r\n[    0.457063] pinctrl core: initialized pinctrl subsystem\r\n[    0.459345] NET: Registered protocol family 16\r\n[    0.461105] audit: initializing netlink subsys (disabled)\r\n[    0.463229] cpuidle: using governor menu\r\n[    0.464087] KVM setup pv remote TLB flush\r\n[    0.466151] dca service started, version 1.12.1\r\n[    0.467958] PCI: Fatal: No config space access function found\r\n[    0.471154] audit: type=2000 audit(1594654956.227:1): state=initialized audit_enabled=0 res=1\r\n[    0.474422] HugeTLB registered 2.00 MiB page size, pre-allocated 0 pages\r\n[    0.477239] ACPI: Interpreter disabled.\r\n[    0.478060] vgaarb: loaded\r\n[    0.478977] pps_core: LinuxPPS API ver. 1 registered\r\n[    0.480950] pps_core: Software ver. 5.3.6 - Copyright 2005-2007 Rodolfo Giometti <giometti@linux.it>\r\n[    0.482953] PTP clock support registered\r\n[    0.483959] PCI: System does not support PCI\r\n[    0.486443] clocksource: Switched to clocksource kvm-clock\r\n[    0.517862] VFS: Disk quotas dquot_6.6.0\r\n[    0.519165] VFS: Dquot-cache hash table entries: 512 (order 0, 4096 bytes)\r\n[    0.521431] pnp: PnP ACPI: disabled\r\n[    0.524735] NET: Registered protocol family 2\r\n[    0.526662] tcp_listen_portaddr_hash hash table entries: 1024 (order: 2, 16384 bytes)\r\n[    0.529139] TCP established hash table entries: 16384 (order: 5, 131072 bytes)\r\n[    0.531737] TCP bind hash table entries: 16384 (order: 6, 262144 bytes)\r\n[    0.534589] TCP: Hash tables configured (established 16384 bind 16384)\r\n[    0.537117] UDP hash table entries: 1024 (order: 3, 32768 bytes)\r\n[    0.539146] UDP-Lite hash table entries: 1024 (order: 3, 32768 bytes)\r\n[    0.541273] NET: Registered protocol family 1\r\n[    0.542666] NET: Registered protocol family 44\r\n[    0.636014] random: fast init done\r\n[    1.752946] clocksource: tsc: mask: 0xffffffffffffffff max_cycles: 0x1fa33006d59, max_idle_ns: 440795304862 ns\r\n[    1.758031] platform rtc_cmos: registered platform RTC device (no PNP device found)\r\n[    1.761806] Initialise system trusted keyrings\r\n[    1.763400] workingset: timestamp_bits=39 max_order=19 bucket_order=0\r\n[    2.017765] Key type asymmetric registered\r\n[    2.019900] Asymmetric key parser 'x509' registered\r\n[    2.022296] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 249)\r\n[    2.026017] io scheduler noop registered\r\n[    2.027997] io scheduler deadline registered\r\n[    2.030176] io scheduler cfq registered (default)\r\n[    2.032124] io scheduler mq-deadline registered\r\n[    2.033667] io scheduler kyber registered\r\n[    2.035014] io scheduler bfq registered\r\n[    2.036616] ioatdma: Intel(R) QuickData Technology Driver 4.00\r\n[    2.038596] Serial: 8250/16550 driver, 4 ports, IRQ sharing enabled\r\n[    2.065623] serial8250: ttyS0 at I/O 0x3f8 (irq = 4, base_baud = 115200) is a U6_16550A\r\n[    2.093409] serial8250: ttyS1 at I/O 0x2f8 (irq = 3, base_baud = 115200) is a U6_16550A\r\n[    2.121051] serial8250: ttyS2 at I/O 0x3e8 (irq = 4, base_baud = 115200) is a U6_16550A\r\n[    2.124232] i8042: PNP: No PS/2 controller found.\r\n[    2.125818] i8042: Probing ports directly.\r\n[    2.138055] i8042: Failed to disable AUX port, but continuing anyway... Is this a SiS?\r\n[    2.140585] i8042: If AUX port is really absent please use the 'i8042.noaux' option\r\n[    2.394269] serio: i8042 KBD port at 0x60,0x64 irq 1\r\n[    2.396277] rtc_cmos rtc_cmos: only 24-hr supported\r\n[    2.398270] NET: Registered protocol family 10\r\n[    2.400246] Segment Routing with IPv6\r\n[    2.401464] NET: Registered protocol family 17\r\n[    2.402942] Key type dns_resolver registered\r\n[    2.404596] mce: Using 32 MCE banks\r\n[    2.405765] sched_clock: Marking stable (2267872409, 137859657)->(2411612930, -5880864)\r\n[    2.408474] registered taskstats version 1\r\n[    2.409843] Loading compiled-in X.509 certificates\r\n[    2.444867] Loaded X.509 cert 'Kinvolk GmbH: Module signing key for 4.19.128-flatcar: 9cffd6cc9ffc8fb271bb8740d6aa5663d6b12864'\r\n[    2.448530] ima: No TPM chip found, activating TPM-bypass!\r\n[    2.450282] ima: Allocated hash algorithm: sha1\r\n[    2.452028] hctosys: unable to open rtc device (rtc0)\r\n[    2.461410] Freeing unused kernel image memory: 45380K\r\n[    2.465042] Write protecting the kernel read-only data: 18432k\r\n[    2.474456] Freeing unused kernel image memory: 2016K\r\n[    2.476445] Freeing unused kernel image memory: 112K\r\n[    2.478007] Run /init as init process\r\n[    2.485597] systemd[1]: systemd 241-53-gbe3cc54+ running in system mode. (+PAM +AUDIT +SELINUX +IMA -APPARMOR +SMACK -SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT -GNUTLS -ACL +XZ +LZ4 +SECCOMP +BLKID -ELFUTILS +KMOD +IDN2 -IDN +PCRE2 default-hierarchy=legacy)\r\n[    2.492636] systemd[1]: Detected virtualization kvm.\r\n[    2.494259] systemd[1]: Detected architecture x86-64.\r\n[    2.495854] systemd[1]: Running in initial RAM disk.\r\n\r\nWelcome to dracut-049 (Initramfs)!\r\n\r\n[    2.501525] systemd[1]: No hostname configured.\r\n[    2.502999] systemd[1]: Set hostname to <localhost>.\r\n[    2.504619] systemd[1]: Initializing machine ID from random generator.\r\n[    2.506896] systemd[1]: Failed to bump fs.file-max, ignoring: Invalid argument\r\n[    2.620630] systemd[1]: File /usr/lib/systemd/system/systemd-journald.service:12 configures an IP firewall (IPAddressDeny=any), but the local system does not support BPF/cgroup based firewalling.\r\n[    2.626100] systemd[1]: Proceeding WITHOUT firewalling in effect! (This warning is only shown for the first loaded unit using IP firewalling.)\r\n[  OK  ] Listening on udev Kernel Socket.\r\n[  OK  ] Created slice system-systemd\\x2dfsck.slice.\r\n[  OK  ] Created slice system-disk\\x2duuid.slice.\r\n[  OK  ] Listening on udev Control Socket.\r\n[  OK  ] Listening on Journal Audit Socket.\r\n[  OK  ] Listening on Journal Socket.\r\n         Starting Create list of re\u2026odes for the current kernel...\r\n         Starting Apply Kernel Variables...\r\n[  OK  ] Reached target Swap.\r\n         Starting Setup Virtual Console...\r\n[  OK  ] Started Dispatch Password \u2026ts to Console Directory Watch.\r\n[  OK  ] Reached target Local Encrypted Volumes.\r\n[  OK  ] Reached target Timers.\r\n[  OK  ] Reached target Slices.\r\n[  OK  ] Listening on Journal Socket (/dev/log).\r\n         Starting Journal Service...\r\n[  OK  ] Reached target Sockets.\r\n[  OK  ] Reached target Paths.\r\n[  OK  ] Started Create list of req\u2026 nodes for the current kernel.\r\n[  OK  ] Started Apply Kernel Variables.\r\n[  OK  ] Started Setup Virtual Console.\r\n         Starting dracut cmdline hook...\r\n         Starting Create Static Device Nodes in /dev...\r\n[  OK  ] Started Create Static Device Nodes in /dev.\r\n[  OK  ] Started dracut cmdline hook.\r\n         Starting dracut pre-udev hook...\r\n[    2.898778] input: AT Raw Set 2 keyboard as /devices/platform/i8042/serio0/input/input0\r\n[    2.905380] device-mapper: uevent: version 1.0.3\r\n[    2.912091] device-mapper: ioctl: 4.39.0-ioctl (2018-04-03) initialised: dm-devel@redhat.com\r\n[  OK  ] Started dracut pre-udev hook.\r\n         Starting udev Kernel Device Manager...\r\n[  OK  ] Started Journal Service.\r\n[    3.252810] audit: type=1130 audit(1594654959.016:2): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=systemd-journald comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n[    3.122312] systemd-sysctl[148]: Couldn't write 'fq_codel' to 'net/core/default_qdisc', ignoring: No such file or directory\r\n[    3.129716] systemd-vconsole-setup[152]: KD_FONT_OP_GET failed while trying to get the font metadata: Function not implemented\r\n[    3.137664] systemd-vconsole-setup[152]: Fonts will not be copied to remaining consoles\r\n[    3.140872] dracut-cmdline[156]: dracut-dracut-049\r\n[    3.147232] dracut-cmdline[156]: Using kernel command line parameters: rootflags=rw mount.usrflags=ro rootflags=rw mount.usrflags=ro BOOT_IMAGE=/flatcar/vmlinuz-a mount.usr=/dev/mapper/usr verity.usr=PARTUUID=7130c94a-213a-4e5a-8e26-6cce9662f132 consoleblank=0 flatcar.first_boot=detected flatcar.randomize_disk_guid=00000000-0000-0000-0000-000000000001 verity.usrhash=2ba8709773c62cf8a4feb3651ca220ce633340ec9de142f80c412d43a7f78253 console=ttyS0 reboot=k panic=1 pci=off root=PARTUUID=cf6a426f-c175-42b9-a165-fd3bab6a652c ro virtio_mmio.device=4K@0xd0000000:5\r\n[    3.248446] systemd-udevd[247]: Specified group 'render' unknown\r\n[  OK  ] Started udev Kernel Device Manager.[    3.254684] systemd[1]: Started udev Kernel Device Manager.\r\n[    3.394803] audit: type=1130 audit(1594654959.158:3): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=systemd-udevd comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n         Starting dracut pre-trigger hook...\r\n[    3.265626] systemd[1]: Starting dracut pre-trigger hook...\r\n\r\n[    3.274759] systemd[1]: Starting Network Service...Starting Network Service...\r\n\r\n[    3.305288] dracut-pre-trigger[248]: rd.md=0: removing MD RAID activation\r\n[  OK  ] Started dracut pre-trigger hook.[    3.381519] systemd[1]: Started dracut pre-trigger hook.\r\n\r\n[    3.521942] audit: type=1130 audit(1594654959.285:4): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=dracut-pre-trigger comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n[    3.391009] systemd[1]: Starting udev Coldplug all Devices...         Starting udev Coldplug all Devices...\r\n\r\n[    3.412491] systemd-udevd[247]: Specified group 'render' unknown\r\n[  OK  ] Started udev Coldplug all Devices.[    3.462722] systemd[1]: Started udev Coldplug all Devices.\r\n\r\n[    3.603160] audit: type=1130 audit(1594654959.367:5): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=systemd-udev-trigger comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n[    3.472438] systemd[1]: Starting dracut initqueue hook...         Starting dracut initqueue hook...\r\n\r\n[    3.699731] cryptd: max_cpu_qlen set to 1000\r\n[    3.571741] systemd-udevd[294]: link_config: autonegotiation is unset or enabled, the speed and duplex are not writable.\r\n[    3.769692] AVX2 version of gcm_enc/dec engaged.\r\n[    3.771259] AES CTR mode by8 optimization enabled\r\n[    3.655442] systemd-vconsole-setup[309]: KD_FONT_OP_GET failed while trying to get the font metadata: Function not implemented\r\n[    3.659500] systemd-vconsole-setup[309]: Fonts will not be copied to remaining consoles\r\n[    3.800600] systemd-networkd[254]: Enumeration completed\r\n[  OK  ] Started Network Service.\r\n[    3.943178] audit: type=1130 audit(1594654959.707:6): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=systemd-networkd comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n[    3.812298] systemd[1]:          Starting Network Name Resolution...Started Network Service.\r\n[    3.815906]\r\nsystemd[1]: Starting Network Name Resolution...\r\n[    3.824523] systemd-networkd[254]: lo: Configured\r\n[    4.071296] systemd-resolved[354]: Positive Trust Anchors:\r\n[    4.073581] systemd-resolved[354]: . IN DS 19036 8 2 49aac11d7b6f6446702e54a1607371607a1a41855200fd2ce1cdde32f24e8fb5\r\n[    4.078607] systemd-resolved[  OK  ] Started Network Name Resolution.\r\n[    4.220440] audit: type=1130 audit(1594654959.984:7): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=systemd-resolved comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n[  OK  ] Reached target Host and Network Name Lookups.[354]: . IN DS 20326 8 2 e06d44b80b8f1d39a95c0b0d7c65d08458e880409bbc683457104237c7f8ec8d\r\n[  OK  ] Reached target Network.\r\n[    4.096175] systemd-resolved\r\n[354]: Negative trust anchors: 10.in-addr.arpa 16.172.in-addr.arpa 17.172.in-addr.arpa 18.172.in-addr.arpa 19.172.in-addr.arpa 20.172.in-addr.arpa 21.172.in-addr.arpa 22.172.in-addr.arpa 23.172.in-addr.arpa 24.172.in-addr.arpa 25.172.in-addr.arpa 26.172.in-addr.arpa 27.172.in-addr.arpa 28.172.in-addr.arpa 29.172.in-addr.arpa 30.172.in-addr.arpa 31.172.in-addr.arpa 168.192.in-addr.arpa d.f.ip6.arpa corp home internal intranet lan local private test\r\n[    4.107073] systemd-resolved[354]: Defaulting to hostname 'linux'.\r\n[    4.109499] systemd[1]: Started Network Name Resolution.\r\n[    4.111700] systemd[1]: Reached target Host and Network Name Lookups.\r\n[    4.114082] systemd[1]: Reached target Network.\r\n[   30.112042] random: crng init done\r\n[ TIME ] Timed out waiting for device /dev/disk/by-label/OEM.\r\n[   92.542705] systemd[1]: dev-disk-by\\x2dlabel-OEM.device: Job dev-disk-by\\x2dlabel-OEM.device/start timed out.[DEPEND\r\n] Dependency failed for Ignition (setup).\r\n[DEPEND[   92.553242] systemd[1]: Timed out waiting for device /dev/disk/by-label/OEM.] Dependency failed for Ignition (files).\r\n[DEPEND\r\n[   92.561981] systemd[1]: Dependency failed for Ignition (setup).] Dependency failed for Popu\u2026orcx store to satisfy profile.\r\n[DEPEND\r\n[   92.572190] systemd[1]: Dependency failed for Ignition (files).] Dependency failed for Initrd Default Target.\r\n[DEPEND\r\n[   92.581574] systemd[1]: Dependency failed for Populate torcx store to satisfy profile.] Dependency failed for Ignition (disks).\r\n[\r\n[   92.590719] systemd[1]: Dependency failed for Initrd Default Target. TIME ] Timed out waiting for device .\r\n[DEPEND\r\n[   92.602527] systemd[1]: initrd.target: Job initrd.target/start failed with result 'dependency'.] Dependency failed for Gene\u20260-0000-0000-0000-000000000001.\r\n[ TIME\r\n[   92.614652] systemd[1]: initrd.target: Triggering OnFailure= dependencies.] Timed out waiting for device -213a-4e5a-8e26-6cce9662f132.\r\n[DEPEND\r\n[   92.625421] systemd[1]: torcx-profile-populate.service: Job torcx-profile-populate.service/start failed with result 'dependency'.] Dependency failed for Verity Setup for /dev/mapper/usr.\r\n[DEPEND\r\n[   92.638930] ] Dependency failed for /dev/mapper/usr.systemd[1]: ignition-files.service: Job ignition-files.service/start failed with result 'dependency'.\r\n[   92.642939] systemd[1]: Dependency failed for Ignition (disks).\r\n[   92.642987] systemd[1]: ignition-disks.service: Job ignition-disks.service/start failed with result 'dependency'.\r\n[   92.643023] systemd[1]: ignition-setup.service: Job ignition-setup.service/start failed with result 'dependency'.\r\n[   92.643058] systemd[1]: dev-disk-by\\x2dlabel-OEM.device: Job dev-disk-by\\x2dlabel-OEM.device/start failed with result 'timeout'.\r\n\r\n[DEPEND] Dependency failed for File\u2026stem Check on /dev/mapper/usr.\r\n[DEPEND] Dependency failed for /sysroot/usr.\r\n[DEPEND] Dependency failed for Root filesystem setup.\r\n[DEPEND] Dependency failed for Initrd File Systems.[   92.643180] systemd[1]: Unnecessary job for /dev/disk/by-label/EFI-SYSTEM was removed.\r\n[   92.665874]\r\n[  OK  ] Reached target Local File Systems (Pre).systemd[1]: dev-disk-by\\x2ddiskuuid-00000000\\x2d0000\\x2d0000\\x2d0000\\x2d000000000001.device: Job dev-disk-by\\x2ddiskuuid-00000000\\x2d0000\\x2d0000\\x2d0000\\x2d000000000001.device/start timed out.\r\n\r\n[   92.674023] systemd[1]: Timed out waiting for device /dev/disk/by-diskuuid/00000000-0000-0000-0000-000000000001.\r\n[   92.677408] systemd[  OK  ] Stopped Dispatch Password \u2026ts to Console Directory Watch.\r\n         [1]: Dependency failed for Generate new UUID for disk GPT dev/disk/by-diskuuid/00000000-0000-0000-0000-000000000001.Starting Setup Virtual Console...\r\n\r\n[[   92.691426] systemd  OK  [1]: disk-uuid@dev-disk-by\\x2ddiskuuid-00000000\\x2d0000\\x2d0000\\x2d0000\\x2d000000000001.service: Job disk-uuid@dev-disk-by\\x2ddiskuuid-00000000\\x2d0000\\x2d0000\\x2d0000\\x2d000000000001.service/start failed with result 'dependency'.] Stopped dracut initqueue hook.\r\n[   92.838288] audit: type=1130 audit(1594655048.602:8): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=dracut-initqueue comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n[  OK\r\n[   92.708060] ] Started Setup Virtual Console.systemd[1]: dev-disk-by\\x2ddiskuuid-00000000\\x2d0000\\x2d0000\\x2d0000\\x2d000000000001.device: Job dev-disk-by\\x2ddiskuuid-00000000\\x2d0000\\x2d0000\\x2d0000\\x2d000000000001.device/start failed with result 'timeout'.\r\n[\r\n[   92.719636] systemd  OK  ] [   92.859068] audit: type=1131 audit(1594655048.608:9): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=dracut-initqueue comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\nStarted Emergency Shell.[1]: dev-disk-by\\x2dpartuuid-7130c94a\\x2d213a\\x2d4e5a\\x2d8e26\\x2d6cce9662f132.device: Job dev-disk-by\\x2dpartuuid-7130c94a\\x2d213a\\x2d4e5a\\x2d8e26\\x2d6cce9662f132.device/start timed out.\r\n[  OK  ] Reached target Emergency Mode.\r\n[   92.735306] systemd[1]:\r\n[  OK  Timed out waiting for device /dev/disk/by-partuuid/7130c94a-213a-4e5a-8e26-6cce9662f132.] Reached target Remote File Systems (Pre).\r\n[  OK  ] Reached target Remote File Systems.\r\n[   92.743544] systemd[1]: Dependency failed for Verity Setup for /dev/mapper/usr.\r\n[   92.884024] audit: type=1130 audit(1594655048.620:10): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=systemd-vconsole-setup comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n[   92.752522] systemd\r\n[  OK  [1]: Dependency failed for /dev/mapper/usr.] Stopped dracut pre-trigger hook.\r\n\r\n[  OK  [   92.758266] systemd[1]: ] Stopped dracut pre-udev hook.Dependency failed for File System Check on /dev/mapper/usr.\r\n[   92.762250] systemd[1]:\r\n[  OK  ] Stopped dracut cmdline hook.Dependency failed for /sysroot/usr.\r\n\r\n[   92.767268] systemd[1]: [   92.906275] audit: type=1131 audit(1594655048.620:11): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=systemd-vconsole-setup comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\nDependency failed for Root filesystem setup.\r\n[   92.776004] systemd[1]: initrd-setup-root.service: Job initrd-setup-root.service/start failed with result 'dependency'.\r\n[   92.779804] systemd[1]: Dependency failed for Initrd File Systems.\r\n[   92.782221] systemd[1]: initrd-fs.target: Job initrd-fs.target/start failed with result 'dependency'.[   92.922915] audit: type=1130 audit(1594655048.634:12): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=emergency comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n\r\n[   92.791349] systemd[1]: initrd-fs.target: Triggering OnFailure= dependencies.\r\n[   92.793970] systemd[1]: sysroot-usr.mount: Job sysroot-usr.mount/start failed with result 'dependency'.\r\n[   92.797103] systemd[1]: [   92.936076] audit: type=1131 audit(1594655048.659:13): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=dracut-pre-trigger comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\nsystemd-fsck@dev-mapper-usr.service: Job systemd-fsck@dev-mapper-usr.service/start failed with result 'dependency'.\r\n[   92.807301] systemd[1]: dev-mapper-usr.device: Job dev-mapper-usr.device/start failed with result 'dependency'.\r\n[   92.810671] systemd[1]: verity-setup.service: Job verity-setup.service/start failed with result 'dependency'.\r\n[   92.813998] systemd[1]: dev-disk-by\\x2dpartuuid-7130c94a\\x2d213a\\x2d4e5a\\x2d8e26\\x2d6cce9662f132.device: Job dev-disk-by\\x2dpartuuid-7130c94a\\x2d213a\\x2d4e5a\\x2d8e26\\x2d6cce9662f132.device/start failed with result 'timeout'.[   92.957124] audit: type=1131 audit(1594655048.665:14): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=dracut-pre-udev comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n\r\n[   92.825662] systemd[1]: Reached target Local File Systems (Pre).\r\n[   92.827999] systemd[1]: systemd-ask-password-console.path: Succeeded.\r\n[   92.830517] systemd[1]: Stopped Dispatch Password Requests to Console Directory Watch.[   92.970800] audit: type=1131 audit(1594655048.668:15): pid=1 uid=0 auid=4294967295 ses=4294967295 subj=kernel msg='unit=dracut-cmdline comm=\"systemd\" exe=\"/usr/lib64/systemd/systemd\" hostname=? addr=? terminal=? res=success'\r\n\r\n[   92.839751] systemd[1]: Starting Setup Virtual Console...\r\n[   92.843522] systemd[1]: dracut-initqueue.service: Main process exited, code=killed, status=1/HUP\r\n[   92.848490] systemd[1]: dracut-initqueue.service: Succeeded.\r\n[   92.850975] systemd[1]: Stopped dracut initqueue hook.\r\n[   92.853308] systemd-vconsole-setup[1369]: KD_FONT_OP_GET failed while trying to get the font metadata: Function not implemented\r\n[   92.857064] systemd-vconsole-setup[1369]: Fonts will not be copied to remaining consoles\r\n[   92.859917] systemd[1]: systemd-vconsole-setup.service: Succeeded.\r\n[   92.862312] systemd[1]: Started Setup Virtual Console.\r\n[   92.864443] systemd[1]: Started Emergency Shell.\r\n[   92.866480] systemd[1]: Reached target Emergency Mode.\r\n[   92.868666] systemd[1]: Reached target Remote File Systems (Pre).\r\n[   92.870980] systemd[1]: Reached target Remote File Systems.\r\n[   92.873310] systemd[1]: dracut-pre-trigger.service: Succeeded.\r\n[   92.875571] systemd[1]: Stopped dracut pre-trigger hook.\r\n[   92.877714] systemd[1]: dracut-pre-udev.service: Succeeded.\r\n[   92.880067] systemd[1]: Stopped dracut pre-udev hook.\r\n[   92.882268] systemd[1]: dracut-cmdline.service: Succeeded.\r\n[   92.884417] systemd[1]: Stopped dracut cmdline hook.\r\nWarning: /dev/disk/by-partuuid/cf6a426f-c175-42b9-a165-fd3bab6a652c does not exist\r\n``` Changing the log-level to `Debug` I got in the log\r\n\r\n```\r\n2020-07-13T15:56:28.807267350 [anonymous-instance:WARN:src/devices/src/legacy/i8042.rs:126] Failed to trigger i8042 kbd interrupt (disabled by guest OS)\r\n2020-07-13T15:56:28.822760589 [anonymous-instance:WARN:src/devices/src/legacy/i8042.rs:126] Failed to trigger i8042 kbd interrupt (disabled by guest OS)\r\n``` I noticed that adding the kernel flags\r\n\r\n```\r\ni8042.noaux i8042.nomux i8042.nopnp i8042.dumbkbd\r\n```\r\n\r\nmuted the above warning. but still no luck. Seems that `virtio` module is actually loaded (or maybe not)\r\n\r\n```\r\nWarning: /dev/disk/by-partuuid/cf6a426f-c175-42b9-a165-fd3bab6a652c does not exist\r\nPress Enter for emergency shell or wait 5 minutes for reboot.\r\n\r\nGenerating \"/run/initramfs/rdsosreport.txt\"\r\n\r\n\r\nEntering emergency mode. Exit the shell to continue.\r\nType \"journalctl\" to view system logs.\r\nYou might want to save \"/run/initramfs/rdsosreport.txt\" to a USB stick or /boot\r\nafter mounting them and attach it to a bug report.\r\n\r\n\r\n:/# insmod /usr/lib64/modules/4.19.128-flatcar/kernel/drivers/block/\r\naoe/             loop.ko          rbd.ko           zram/\r\nbrd.ko           mtip32xx/        virtio_blk.ko\r\ndrbd/            nbd.ko           xen-blkfront.ko\r\n```\r\n\r\n```\r\ninsmod: ERROR: could not insert module /usr/lib64/modules/4.19.128-flatcar/kernel/drivers/block/virtio_blk.ko: File exists\r\n``` @tnotw thank you to reply on this. \r\n\r\nI haven't tried yet your approach and definitely I will. \r\n\r\nWhat I'm trying to achieve is the following. Flatcar as Fedora or similar has a special way to be bootstrap using Ignition https://docs.flatcar-linux.org/ignition/what-is-ignition/\r\n\r\nBy using the image having the partitions would have been possible to install in a specific partition usually labeled as `OEM` https://github.com/flatcar-linux/init/blob/flatcar-master/bin/flatcar-install#L550 the ignition file and at the boot, the instance would be automatically provisioned.\r\n\r\nHowever at this point I was not able to do that. maybe as you say the problem is that the the distro has EFI partitions as showed in here \r\n\r\n```\r\nlsblk  -o NAME,PARTUUID,LABEL\r\nNAME    PARTUUID                             LABEL\r\nsda\r\n|-sda1  6b95f918-8e69-47aa-8018-99849714e3f3 EFI-SYSTEM\r\n|-sda2  0574adf0-ecbb-4146-95b5-ee2d462ec27e\r\n|-sda3  7130c94a-213a-4e5a-8e26-6cce9662f132\r\n| `-usr\r\n|-sda4  e03dd35c-7c2d-4a47-b3fe-27f15780a57c\r\n|-sda6  a0d1abf1-c361-4525-b18d-1fa9e91a960c OEM\r\n|-sda7  5236fd2f-b3d7-4eae-ad21-54b299e04e8c\r\n`-sda9  cf6a426f-c175-42b9-a165-fd3bab6a652c ROOT\r\n```\r\n\r\nand perhaps Firecracker does not support that. I've just tried your approach @tnotw and seems true that it boots but it fails for instance in here\r\n\r\n```\r\n[ TIME ] Timed out waiting for device /dev/disk/by-label/OEM.\r\n```\r\n\r\nbut overall I get to the login.\r\n\r\nSo seems that \r\n\r\n1. UEFI partitions are not supported - seeking official confirmation. Maybe we could improve introducing a patch\r\n2. Firecracker for the moment expects kernel cooked in a certain way. Passing in the kernel like https://stable.release.flatcar-linux.net/amd64-usr/current/flatcar_production_image.vmlinuz does not work. > UEFI partitions are not supported - seeking official confirmation. Maybe we could improve introducing a patch\r\n\r\nThat is correct. Firecracker does not use a boot-loader. It sets up the emulated HW to run straight into kernel code from the provided kernel image.\r\nSince we have no use for boot-loaders, there's no need for EFI system partitions support.\r\n\r\n> Firecracker for the moment expects kernel cooked in a certain way. Passing in the kernel like https://stable.release.flatcar-linux.net/amd64-usr/current/flatcar_production_image.vmlinuz does not work.\r\n\r\nFirecracker doesn't support compressed kernel format. Just use the uncompressed image from the same linux build/cook.\r\nThere was this https://github.com/firecracker-microvm/firecracker/pull/670 attempt to add compressed kernel support but it didn't make it in.\r\n\r\nYou can also decompress the `vmlinuz` image you mentioned. Example here https://github.com/firecracker-microvm/firecracker/pull/670#issuecomment-454552113. Thank you @acatangiu for the reply here.\r\n\r\nI've tried to use this https://stable.release.flatcar-linux.net/amd64-usr/current/flatcar_production_image.vmlinuz\r\n\r\nI have decompressed it before passing to Firecracker. It boots but then I get to the point that I cannot load the block device.\r\n\r\nI have linked an output here https://github.com/firecracker-microvm/firecracker/issues/2021#issuecomment-657639650\r\n\r\nI believe that it does not work because the the kernel image is not ready for this kind of scenario. @tnotw your hint is gold. It must be that the reason. From the doc\r\n\r\n> Allow virtio-mmio devices instantiation via the kernel command line or module parameters. Be aware that using incorrect parameters (base address in particular) can crash your system - you have been warned. See Documentation/admin-guide/kernel-parameters.rst for details.\r\n\r\nand `CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES` is not set in the Flatcar kernel At the end @tnotw enable `CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES` in the kernel made the job done. We can close this. Thanks a lot  ## Reason for This PR\r\n\r\nIncrease cgroups integration flexibility for the Jailer. \r\nFixes #1937\r\nFixes #1617\r\n\r\n## Description of Changes\r\n\r\nNew `--cgroups` argument have been added to the Jailer. This argument takes care of setting the passed cgroups generically and check that the expected value is correctly written.\r\n\r\nThe `Cgroup` type have been modified in order to represent each of the cgroups passed by `--cgroups` command line argument.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Any required documentation changes (code and docs) are included in this PR.\r\n- [ ] Any newly added `unsafe` code is properly documented.\r\n- [ ] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Hi, @christian7007! Thanks for the PR, we will take a closer look at it soon. Thanks for the feedback @ioanachirca. I've added all the changes. Hi @christian7007 we're not sure if we should downright remove the `--node` support or follow some deprecation mechanism.\r\n\r\nI am currently reaching out to some of our users to get some customer feedback and we will come back with a decision. Hello @acatangiu,\r\n\r\nNo problem, if you need to proceed in a different way with the `--node` argument deprecation I can upgrade the PR and make it fits with the new Cgroups interface until it can be removed. > Hello @acatangiu,\r\n> \r\n> No problem, if you need to proceed in a different way with the `--node` argument deprecation I can upgrade the PR and make it fits with the new Cgroups interface until it can be removed.\r\n\r\nWe decided to go with a deprecation mechanism here. For the purpose of this PR it is enough to keep both `--node` and `--cgroup` parameters functional, and we will add a deprecation mechanism for `--node` on top of that. Hello @iulianbarbu and @acatangiu, sorry for the late reply I've been on vacation last days. I'll take care of submitting commits addressing both changes. The support for `--node` attribute and the separator change. Hello @iulianbarbu, I've been thinking and making some test regarding changing the separator. I think that probably using `;` as separator could be a bad idea too, as it might be interpreted by bash. I think that maybe we could use a different approach, something like:\r\n\r\n```\r\njailer ... --cgroup cpuset.mems=0 --cgroup cpuset.cpus=1-3,4 ... \r\n```\r\n\r\nThis way we use different arguments as separator, it seems cleaner to me. I've prepare a commit with a prototype for supporting this into the arg parser: https://github.com/christian7007/firecracker/commit/979873f36e0e1c9e9a83c92771865b85ecf53cfc\r\n\r\nWhat do you think about it? If you think this solution is good enough I can open a new PR with the parser changes and work over it. > Hello @iulianbarbu, I've been thinking and making some test regarding changing the separator. I think that probably using `;` as separator could be a bad idea too, as it might be interpreted by bash. I think that maybe we could use a different approach, something like:\r\n> \r\n> ```\r\n> jailer ... --cgroup cpuset.mems=0 --cgroup cpuset.cpus=1-3,4 ... \r\n> ```\r\n> \r\n> This way we use different arguments as separator, it seems cleaner to me. I've prepare a commit with a prototype for supporting this into the arg parser: [christian7007@979873f](https://github.com/christian7007/firecracker/commit/979873f36e0e1c9e9a83c92771865b85ecf53cfc)\r\n> \r\n> What do you think about it? If you think this solution is good enough I can open a new PR with the parser changes and work over it.\r\n\r\nHi, @christian7007. I just took a look at this thread, but I might still be missing some context sorry :D. Anyway, regarding the parser changes, I do not quite like being able to set multiple values for an argument by repeating that argument (but it is indeed a pretty subjective opinion). It would become confusing to allow both arguments with just a value (we do not overwrite, but return a `DuplicateArgument` error if we repeat such argument, e.g. `--secomp-level 1 --secomp-level 2`) and arguments with more values, in this form: `--cgroup pair1 --cgroup pair2`.\r\n\r\nBasically, you want to pass a list as value to the `--cgroups` parameter, I think it would look better like this `--cgroups pair1 pair2`or `--cgroups pair1<some_delimiter>pair2` (I prefer the first option).\r\nAlso, since it seems the `cgroups` argument can take many key=value pairs, another idea that would simplify the parsing would be to store these pairs in a file (`--cgroups-file some_file`). Hello @lauralt, I agree that the best solution would be to use a separator, the problem here is that common used separator might interfere with the functionality (e.g it can be used by cgroups for something else or be interpreted by bash). That's why I'm trying to find a different approach.\r\n\r\n> Yes, sure. I think a workaround for this would be to require escaping: --cgroups \"cpuset.mems=0;cpuset.cpus=1,2,8-10\".\r\n\r\nYou're right @iulianbarbu, but IMHO it doesn't look too clean, also these escapes could be a bit annoying when the command generation/execution is automated.\r\n\r\nI agree with the guidelines and with giving a thought to make sure that the interface we are defining is good enough to avoid future breaking changes. So, just let me know when you and the team have an update and I'll keep working on this. > Hello @lauralt, I agree that the best solution would be to use a separator, the problem here is that common used separator might interfere with the functionality (e.g it can be used by cgroups for something else or be interpreted by bash). That's why I'm trying to find a different approach.\r\n\r\nHmm, could a \" \" separator be used by cgroups for something else? I would expect to not have spaces inside a key, value pair.\r\nAlso, in case we accept that the value, for example, can contain spaces, wouldn't this be a problem in the `--cgroup pair1 --cgroup pair2` solution that you proposed too, i.e. you would keep only the first part of the value?\r\n\r\n\r\n I'm not sure if the \" \" is used for something else by cgroups (probably not, but I can try to find out). Anyway, in case we need to support that specific case we can try to find a workaround like:\r\n\r\n```\r\n--cgroups \"cpuset.cpus=1 2<delimiter>cpuset.mems=0\"\r\n```\r\n\r\nor like:\r\n\r\n```\r\n--cgroup \"cpuset.cpus=1, 2\" --cgroup cpuset.mems=0\r\n```\r\n\r\nAnd I guess that once we have read the entire string that shouldn't be a problem any more, as it will fit to the format `<cgroup_controller>.<cgroup_property>=<value>` being `<value>` every character after the `=` including white spaces. Hello @acatangiu, I've just pushed the commit restoring `--node` functionality (https://github.com/firecracker-microvm/firecracker/pull/2012/commits/47ea8c1af87d5d0a035df15f439f64969c69aba3). It takes care of creating the corresponding cgroups to isolate the process in the specified node. I'd like to mention that previously, the jailer, apart from isolating the proces in the NUMA node, it also register the PID for some cgroups controllers (`cpu`, `cpuset` and `pids`) so people can modified the cgroups after the jailer was executed, From the jailer docs:\r\n\r\n```\r\nThe jailer then writes the current pid to /sys/fs/cgroup/cpu/firecracker/551e7604-e35c-42b3-b825-416853441234/tasks, /sys/fs/cgroup/cpuset/firecracker/551e7604-e35c-42b3-b825-416853441234/tasks, and /sys/fs/cgroup/pids/firecracker/551e7604-e35c-42b3-b825-416853441234/tasks\r\n```\r\n\r\nWith my current changes this is only done when a cgroup is set for a specific controller, so if only `--node` is used the PID will be only registered for `cpuset` controller (which is the one used for the NUMA node isolation).\r\n\r\nI don't know if we should take care of it too, and follow some deprecation mode for this specific behavior too.\r\n\r\nRegarding the CI tests, I'm not sure if the `Internal CI error` of `aarch64` is related with my changes (it doesn't show any error related information). For the `x86_64` error, it's related with using `,` as separator, so it should be fixed once we decide how to proceed on this issue. Hi @iulianbarbu, perfect, I'll prepare a new commit with those changes. Regarding the support for duplicates arguments at the `ArgParser`, should I open a new PR for this or it's ok to submit the changes in this PR? > II would prefer to review all the changes in the same PR. You can add first the support for multiple args, in a commit, then the support for `--cgroup` flag. I'll take over from there and review all the changes together.\r\n\r\nOk, perfect. I've just pushed both commits. Let me know if you want me to change/improve anything. > Please squash the commits which add support for multiple args in a commit and all the other commits that add --cgroup flag in another commit.\r\n\r\nI guess you want to have just two commits in the PR (one for adding duplicate arguments support and one for cgroups support). If it's ok for you, I'll squash the commits after adding all the requested changes. Hello @iulianbarbu, I've pushed a commit (https://github.com/firecracker-microvm/firecracker/pull/2012/commits/5c5809c1f04057c2b105a7d42a1e60a6e6af4e91) with the requested changes. Please take a look at it when you have some time, if the changes looks good to you I'll squash all the commits in two. Perfect! Thanks for the feedback. I'm running the tests locally after changing this: https://github.com/firecracker-microvm/firecracker/pull/2012#discussion_r478955488 to make sure I haven't break anything (nice catch btw). I'll update the PR as soon as tests are OK. > Please explicitly sign each commit:\r\n> `git commit -s --amend`.\r\n\r\nDone! @christian7007 looks like the PR is ready for merging. There's only a problem of solving a `test_coverage.py` conflict.\r\nWe could do that ourselves if that's fine with you. > @christian7007 looks like the PR is ready for merging. There's only a problem of solving a `test_coverage.py` conflict.\r\n> We could do that ourselves if that's fine with you.\r\n\r\nSure, feel free to fix it. Reworded the commit since it mentioned ARM instead of AMD.  #1998 + #1985   Steps to reproduce (1 snapshot):\r\n- Start fresh microvm\r\n- Pause microvm\r\n- Create diff snapshot\r\n- Kill microvm\r\n- Start fresh Firecracker\r\n- Load previous snapshot\r\n- Resume guest.\r\n\r\nGuest crashes on resume:\r\n```\r\n[    1.979938] BUG: stack guard page was hit at ffffc90000dfbff8 (stack is ffffc90000dfc000..ffffc90000dfffff)\r\n[    1.980796] kernel stack overflow (double-fault): 0000 [#1] SMP PTI\r\n[    1.981294] PANIC: double fault, error_code: 0x0\r\n[    1.981665] CPU: 0 PID: 770 Comm: (agetty) Not tainted 4.14.55-84.37.amzn2.x86_64 #1\r\n[    1.982324] task: ffff8801298c0e40 task.stack: ffffc90000dfc000\r\n[    1.982351] RIP: 0010:+0x4/0x30\r\n[    1.982352] RSP: 0018:fffffe0000007000 EFLAGS: 00010093\r\n[    1.982353] RAX: 0000000000000000 RBX: 0000000000000001 RCX: ffffffff81600a27\r\n[    1.982353] RDX: 0000000000000002 RSI: 0000000000000002 RDI: fffffe0000007028\r\n[    1.982354] RBP: fffffe0000007000 R08: 0000000000000000 R09: 0000000000000000\r\n[    1.982359] R10: 0000000000000000 R11: 0000000000000000 R12: 0000000000000000\r\n[    1.982360] R13: 0000000000000000 R14: 0000000000000000 R15: 0000000000000000\r\n[    1.982360] FS:  00007f7b7dbc4e00(0000) GS:ffff88012fc00000(0000) knlGS:0000000000000000\r\n[    1.982361] CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033\r\n[    1.982361] CR2: fffffe0000006ff8 CR3: 0000000129a84006 CR4: 00000000003606b0\r\n[    1.982369] DR0: 0000000000000000 DR1: 0000000000000000 DR2: 0000000000000000\r\n[    1.982369] DR3: 0000000000000000 DR6: 00000000fffe0ff0 DR7: 0000000000000400\r\n[    1.982370] Call Trace:\r\n[    1.982372] Code: f2 ff ff e9 f2 fc ff ff 48 8d 4d cc 41 89 c0 4c 89 e2 48 89 de 4c 89 ef e8 1a fa ff ff e9 d8 fc ff ff e8 a0 eb 00 00 55 48 89 e5 <41> 54 49 89 fc 53 48 89 f3 0f 20 d0 0f 1f 40 00 48 89 de 4c 89\r\n[    1.982401] Kernel panic - not syncing: Machine halted.\r\n[    1.982439] Kernel Offset: disabled\r\n[    1.990742] Rebooting in 1 seconds..\r\n```\r\n\r\nSteps to reproduce (2 snapshot: base + 1 diff):\r\n- Start fresh Firecracker\r\n- Load a full snapshot\r\n- Resume\r\n- Run some commands in guest\r\n- Pause microvm\r\n- Create diff snapshot\r\n- Kill microvm\r\n- Start fresh Firecracker\r\n- Merge base + diff\r\n- Load merged snapshot\r\n- Resume guest.\r\n- Try to run fio in guest\r\n\r\nFio crashes:\r\n```\r\nroot@7e47bb8f2f0a:~# fio fio4k.cfg\r\nrand-read-4k-1: (g=0): rw=randread, bs=(R) 4096B-4096B, (W) 4096B-4096B, (T) 4096B-4096B, ioengine=libaio, iodepth=32\r\nfio-3.1\r\nSegmentation fault\r\n```\r\n\r\ndmesg: `[   89.934644] fio[993]: segfault at 0 ip 0000557f655bd670 sp 00007fff4b31bd48 error 6 in fio[557f6559f000+b8000]`\r\n I have a hunch this is because the pages dirtied by the virtio device (`fio` must mean the microvm has at least a block device) are missing from the snapshot, because they're missing in turn from the KVM dirty log  ## Reason for This PR\r\nResolves #1734\r\n\r\n## Description of Changes\r\n* Updates vmm-sys-util to current latest (0.6.1)\r\n* Replaces `src/utils/epoll` with vmm-sys-utils epoll implementation\r\n* Removes dead code and unnecessary dependencies\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Hi, @defunctio!\r\nThanks for your PR, I will take a closer look at it on Monday. Meanwhile, it seems some tests are failing, i.e. the style one (please run `cargo fmt`) and a doc example from `server.rs`. It would be great if you could fix them in the meantime, thanks!\r\nAlso, please sign your commit: `git commit -s --amend`. thanks @lauralt! will do and enjoy your weekend! :slightly_smiling_face:  > @defunctio do you still want to work on this PR? Any help needed?\r\n@dianpopa \r\n\r\nYeah still interest, no help needed. Apologies, it's been a busy few weeks and just haven't had the time to revisit. :) @defunctio the coverage test seemed to fail at the previous push. Can you please update in `tests/integration_tests/build/test_coverage.py` the Intel target value with 84.22? No need to have a separate commit for it, you can do the change in the last commit too.  @ioanachirca rebased, please re-approve. Thanks!  One more change needed: looks like your PR increases the coverage on AMD (nice!), please update the expected coverage here: https://github.com/firecracker-microvm/firecracker/blob/master/tests/integration_tests/build/test_coverage.py#L26\r\n```diff\r\ndiff --git a/tests/integration_tests/build/test_coverage.py b/tests/integration_tests/build/test_coverage.py\r\nindex 87ad0e5..6330bc2 100644\r\n--- a/tests/integration_tests/build/test_coverage.py\r\n+++ b/tests/integration_tests/build/test_coverage.py\r\n@@ -23,7 +23,7 @@ import host_tools.proc as proc\r\n # this contains the frequency while on AMD it does not.\r\n # Checkout the cpuid crate. In the future other\r\n # differences may appear.\r\n-COVERAGE_DICT = {\"Intel\": 84.37, \"AMD\": 84.32}\r\n+COVERAGE_DICT = {\"Intel\": 84.37, \"AMD\": 84.38}\r\n PROC_MODEL = proc.proc_type()\r\n \r\n COVERAGE_MAX_DELTA = 0.05\r\n``` @aghecenco @lauralt thank you for your help!!  Hi, we started developing support for snapshot `pause/resume/create/load` inside our fork of firecracker-containerd (we can make the code public). While we had no problem with supporting `pause/resume/create-snapshot` methods we ran into an error inside Firecracker's virtio-block module with `load-snapshot->resume`.\r\n\r\nThe workflow is startVM(boot) -> Pause -> Create-Snap -> Offload (kill the VM with SIGTERM) -> SnapshotLoad -> Resume\r\n\r\nThe problem we face is at the Resume point where we get the following error from firecracker's log:\r\n```\r\n2020-06-25T07:21:10.652265445 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:124] The API server received a Put request on \"/snapshot/load\" with body \"{\\\"mem_file_path\\\":\\\"/tmp/mem_file\\\",\\\"snapshot_path\\\":\\\"/tmp/snapshot_file\\\"}\".\r\n2020-06-25T07:21:10.664695532 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:89] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:21:10.665787599 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:124] The API server received a Patch request on \"/vm\" with body \"{\\\"state\\\":\\\"Resumed\\\"}\".\r\n2020-06-25T07:21:10.665908820 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:89] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:21:14.799994834 [anonymous-instance:ERROR:src/devices/src/virtio/block/device.rs:226] Failed to execute request: BadRequest(InvalidOffset)\r\n2020-06-25T07:21:14.802628426 [anonymous-instance:ERROR:src/devices/src/virtio/block/device.rs:226] Failed to execute request: BadRequest(InvalidOffset)\r\n```\r\n\r\nWe tend to think that this can be related to the way firecracker-containerd manages block devices.  The VM mounts block devices in 2 phases. First, the VM boots from a generic rootfs (with the containerd agent):\r\n```\r\nThe API server received a Put request on \"/drives/root_drive\" with body \"The API server received a Put request on \"/drives/root_drive\" with body \"{\\\"drive_id\\\":\\\"root_drive\\\",\\\"is_read_only\\\":true,\\\"is_root_device\\\":true,\\\"path_on_host\\\":\\\"/var/lib/firecracker-containerd/runtime/default-rootfs.img\\\"}\\n\".\r\n```\r\nThen the agent needs to mount a second block device that contains the container-specific data. To do so, containerd attaches another drive and patches the path to the drive twice:\r\n```\r\nThe API server received a Put request on \"/drives/MN2HE43UOVRDA\" with body \"{\\\"drive_id\\\":\\\"MN2HE43UOVRDA\\\",\\\"is_read_only\\\":false,\\\"is_root_device\\\":false,\\\"path_on_host\\\":\\\"/var/lib/firecracker-containerd/shim-base/firecracker-containerd/505/ctrstub0\\\"}\\n\".\r\n<<..>>\r\nThe API server received a Put request on \"/actions\" with body \"{\\\"action_type\\\":\\\"InstanceStart\\\"}\\n\".\r\nThe request was executed successfully. Status code: 204 No Content.\r\nThe API server received a Patch request on \"/drives/MN2HE43UOVRDA\" with body \"{\\\"drive_id\\\":\\\"MN2HE43UOVRDA\\\",\\\"path_on_host\\\":\\\"/dev/mapper/fc-dev-thinpool-snap-9\\\"}\\n\".\r\n```\r\n\r\nCan the issue be connected to the way [PATCH drive works](https://github.com/firecracker-microvm/firecracker/blob/master/docs/api_requests/patch-block.md)? This drive is supposed to remain mounted into the restored guest.\r\n\r\nWe would greatly appreciate comments and ideas on what could be the root cause from Firecracker and firecracker-containerd maintainers: for example, @acatangiu @kzys . Once we fix the issue, we would be happy to contribute our changes to firecracker-containerd upstream.\r\n\r\nFull workflow log (Firecracker's log):\r\n```\r\nRunning Firecracker v0.21.0\r\n2020-06-25T07:20:17.287742839 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:20:17.288144594 [anonymous-instance:INFO] The API server received a Put request on \"/machine-config\" with body \"{\\\"cpu_template\\\":\\\"T2\\\",\\\"ht_enabled\\\":false,\\\"mem_size_mib\\\":512,\\\"vcpu_count\\\":1}\\n\".\r\n2020-06-25T07:20:17.288291418 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:20:17.288521865 [anonymous-instance:INFO] The API server received a Get request on \"/machine-config\".\r\n2020-06-25T07:20:17.288625819 [anonymous-instance:INFO] The request was executed successfully. Status code: 200 OK.\r\n2020-06-25T07:20:17.288971127 [anonymous-instance:INFO] The API server received a Put request on \"/boot-source\" with body \"{\\\"boot_args\\\":\\\"8250.nr_uarts=0 ip=190.128.0.2::190.128.0.1:255.192.0.0:::off::: systemd.log_color=false init=/sbin/overlay-init systemd.unit=firecracker.target quiet noapic nomodules ipv6.disable=1 ro panic=1 tsc=reliable reboot=k pci=off\\\",\\\"kernel_image_path\\\":\\\"/var/lib/firecracker-containerd/runtime/hello-vmlinux.bin\\\"}\\n\".\r\n2020-06-25T07:20:17.289115444 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:20:17.289571124 [anonymous-instance:INFO] The API server received a Put request on \"/drives/root_drive\" with body \"{\\\"drive_id\\\":\\\"root_drive\\\",\\\"is_read_only\\\":true,\\\"is_root_device\\\":true,\\\"path_on_host\\\":\\\"/var/lib/firecracker-containerd/runtime/default-rootfs.img\\\"}\\n\".\r\n2020-06-25T07:20:17.289732138 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:20:17.290046499 [anonymous-instance:INFO] The API server received a Put request on \"/drives/MN2HE43UOVRDA\" with body \"{\\\"drive_id\\\":\\\"MN2HE43UOVRDA\\\",\\\"is_read_only\\\":false,\\\"is_root_device\\\":false,\\\"path_on_host\\\":\\\"/var/lib/firecracker-containerd/shim-base/firecracker-containerd/505/ctrstub0\\\"}\\n\".\r\n2020-06-25T07:20:17.290151860 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:20:17.290522553 [anonymous-instance:INFO] The API server received a Put request on \"/network-interfaces/1\" with body \"{\\\"guest_mac\\\":\\\"02:FC:00:00:00:00\\\",\\\"host_dev_name\\\":\\\"fc-0-tap0\\\",\\\"iface_id\\\":\\\"1\\\"}\\n\".\r\n2020-06-25T07:20:17.292898333 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:20:17.293236487 [anonymous-instance:INFO] The API server received a Put request on \"/vsock\" with body \"{\\\"guest_cid\\\":0,\\\"uds_path\\\":\\\"firecracker.vsock\\\",\\\"vsock_id\\\":\\\"agent_api\\\"}\\n\".\r\n2020-06-25T07:20:17.293472939 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:20:17.293754191 [anonymous-instance:INFO] The API server received a Put request on \"/actions\" with body \"{\\\"action_type\\\":\\\"InstanceStart\\\"}\\n\".\r\n2020-06-25T07:20:17.305625745 [anonymous-instance:WARN] Could not add serial input event to epoll: Error during epoll call: Operation not permitted (os error 1)\r\n2020-06-25T07:20:17.306309907 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:20:19.177877690 [anonymous-instance:INFO] The API server received a Patch request on \"/drives/MN2HE43UOVRDA\" with body \"{\\\"drive_id\\\":\\\"MN2HE43UOVRDA\\\",\\\"path_on_host\\\":\\\"/dev/mapper/fc-dev-thinpool-snap-9\\\"}\\n\".\r\n2020-06-25T07:20:19.178152684 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:20:20.104482947 [anonymous-instance:INFO] The API server received a Patch request on \"/vm\" with body \"{\\\"state\\\":\\\"Paused\\\"}\".\r\n2020-06-25T07:20:20.104702379 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-25T07:20:20.106119166 [anonymous-instance:INFO] The API server received a Put request on \"/snapshot/create\" with body \"{\\\"mem_file_path\\\":\\\"/tmp/mem_file\\\",\\\"snapshot_path\\\":\\\"/tmp/snapshot_file\\\",\\\"snapshot_type\\\":\\\"Full\\\"}\".\r\n2020-06-25T07:20:20.649402863 [anonymous-instance:INFO] The request was executed successfully. Status code: 204 No Content.\r\n\r\n```\r\n\r\nAnd the corresponding log from firecracker-containerd (containerd's log)\r\n```\r\nINFO[2020-06-25T07:20:17.275031352-04:00] creating new VM                               runtime=aws.firecracker vmID=505\r\nERRO[2020-06-25T07:20:17.275464729-04:00] time=\"2020-06-25T07:20:17-04:00\" level=info msg=\"Called startVMM(), setting up a VMM on firecracker.sock\"  shim_stream=stderr vmID=505\r\nsetupLogging\r\nsetupMetrics\r\nERRO[2020-06-25T07:20:17.288041835-04:00] time=\"2020-06-25T07:20:17-04:00\" level=info msg=\"VMM metrics disabled.\"  shim_stream=stderr vmID=505\r\nERRO[2020-06-25T07:20:17.288909406-04:00] time=\"2020-06-25T07:20:17-04:00\" level=info msg=\"refreshMachineConfiguration: [GET /machine-config][200] getMachineConfigurationOK  &{CPUTemplate:T2 HtEnabled:0xc000582f43 MemSizeMib:0xc000582f38 VcpuCount:0xc000582f30}\"  shim_stream=stderr vmID=505\r\nERRO[2020-06-25T07:20:17.289306935-04:00] time=\"2020-06-25T07:20:17-04:00\" level=info msg=\"PutGuestBootSource: [PUT /boot-source][204] putGuestBootSourceNoContent \"  shim_stream=stderr vmID=505\r\nERRO[2020-06-25T07:20:17.289343891-04:00] time=\"2020-06-25T07:20:17-04:00\" level=info msg=\"Attaching drive /var/lib/firecracker-containerd/runtime/default-rootfs.img, slot root_drive, root true.\"  shim_stream=stderr vmID=505\r\nERRO[2020-06-25T07:20:17.289933498-04:00] time=\"2020-06-25T07:20:17-04:00\" level=info msg=\"Attached drive /var/lib/firecracker-containerd/runtime/default-rootfs.img: [PUT /drives/{drive_id}][204] putGuestDriveByIdNoContent \"  shim_stream=stderr vmID=505\r\nERRO[2020-06-25T07:20:17.289952823-04:00] time=\"2020-06-25T07:20:17-04:00\" level=info msg=\"Attaching drive /var/lib/firecracker-containerd/shim-base/firecracker-containerd/505/ctrstub0, slot MN2HE43UOVRDA, root false.\"  shim_stream=stderr vmID=505\r\nERRO[2020-06-25T07:20:17.290347821-04:00] time=\"2020-06-25T07:20:17-04:00\" level=info msg=\"Attached drive /var/lib/firecracker-containerd/shim-base/firecracker-containerd/505/ctrstub0: [PUT /drives/{drive_id}][204] putGuestDriveByIdNoContent \"  shim_stream=stderr vmID=505\r\nERRO[2020-06-25T07:20:17.290377745-04:00] time=\"2020-06-25T07:20:17-04:00\" level=info msg=\"Attaching NIC fc-0-tap0 (hwaddr 02:FC:00:00:00:00) at index 1\"  shim_stream=stderr vmID=505\r\nINFO[2020-06-25T07:20:17.306497334-04:00] calling agent                                 runtime=aws.firecracker vmID=505\r\nERRO[2020-06-25T07:20:17.306529875-04:00] time=\"2020-06-25T07:20:17-04:00\" level=info msg=\"startInstance successful: [PUT /actions][204] createSyncActionNoContent \"  shim_stream=stderr vmID=505\r\nDEBU[2020-06-25T07:20:18.004394761-04:00] garbage collected                             d=10.79516ms\r\nINFO[2020-06-25T07:20:18.410674791-04:00] successfully started the VM                   runtime=aws.firecracker vmID=505\r\nDEBU[2020-06-25T07:20:18.411052023-04:00] event forwarded                               ns=firecracker-containerd topic=/firecracker-vm/start type=VMStart\r\nDEBU[2020-06-25T07:20:18.440217583-04:00] prepare snapshot                              key=505 parent=\"sha256:0065b13862ce3af1bf002db326cc2c0a1245165cf6ae7f22abaceae55e09f6fc\"\r\nDEBU[2020-06-25T07:20:18.440347865-04:00] prepare                                       key=firecracker-containerd/17/505 parent=\"firecracker-containerd/16/sha256:0065b13862ce3af1bf002db326cc2c0a1245165cf6ae7f22abaceae55e09f6fc\"\r\nDEBU[2020-06-25T07:20:18.440504004-04:00] creating snapshot device 'fc-dev-thinpool-snap-9' from 'fc-dev-thinpool-snap-8' \r\nDEBU[2020-06-25T07:20:18.795683399-04:00] event published                               ns=firecracker-containerd topic=/snapshot/prepare type=containerd.events.SnapshotPrepare\r\nDEBU[2020-06-25T07:20:18.800390309-04:00] get snapshot mounts                           key=505\r\nDEBU[2020-06-25T07:20:18.800469759-04:00] mounts                                        key=firecracker-containerd/17/505\r\nDEBU[2020-06-25T07:20:19.120516743-04:00] event published                               ns=firecracker-containerd topic=/containers/create type=containerd.events.ContainerCreate\r\nDEBU[2020-06-25T07:20:19.138167895-04:00] get snapshot mounts                           key=505\r\nDEBU[2020-06-25T07:20:19.138206395-04:00] mounts                                        key=firecracker-containerd/17/505\r\ntime=\"2020-06-25T07:20:19.174115148-04:00\" level=debug msg=StartShim runtime=aws.firecracker task_id=505\r\nDEBU[2020-06-25T07:20:19.175656280-04:00] create VM request: VMID:\"505\"                \r\nDEBU[2020-06-25T07:20:19.175707632-04:00] using namespace: firecracker-containerd      \r\ntime=\"2020-06-25T07:20:19.176188684-04:00\" level=info msg=\"successfully started shim (git commit: 22b7cfceb4901b91c998a380df74d9b825614967).\" runtime=aws.firecracker task_id=505 vmID=505\r\nERRO[2020-06-25T07:20:19.178386061-04:00] time=\"2020-06-25T07:20:19-04:00\" level=info msg=\"PatchGuestDrive successful\"  shim_stream=stderr vmID=505\r\nINFO[2020-06-25T07:20:19.330752483-04:00] successfully created task                     ExecID= TaskID=505 pid_in_vm=727 runtime=aws.firecracker vmID=505\r\nDEBU[2020-06-25T07:20:19.331251986-04:00] event forwarded                               ns=firecracker-containerd topic=/tasks/create type=containerd.events.TaskCreate\r\nDEBU[2020-06-25T07:20:19.337046160-04:00] garbage collected                             d=12.841932ms\r\nDEBU[2020-06-25T07:20:19.339260338-04:00] event forwarded                               ns=firecracker-containerd topic=/tasks/start type=containerd.events.TaskStart\r\nDEBU[2020-06-25T07:20:20.103637583-04:00] pause VM request: VMID:\"505\"                 \r\nDEBU[2020-06-25T07:20:20.105566980-04:00] make snapshot request: VMID:\"505\" SnapshotFilePath:\"/tmp/snapshot_file\" MemFilePath:\"/tmp/mem_file\"  \r\nDEBU[2020-06-25T07:20:20.650066779-04:00] offload original request: VMID:\"505\"         \r\nERRO[2020-06-25T07:20:25.892253044-04:00] error waiting for exit                        ExecID= TaskID=505 error=\"ttrpc: closed\" runtime=aws.firecracker vmID=505\r\nERRO[2020-06-25T07:20:25.892257191-04:00] error while forwarding events from VM agent   error=\"ttrpc: closed\" runtime=aws.firecracker vmID=505\r\nERRO[2020-06-25T07:20:25.892484333-04:00] error copying io                              ExecID= TaskID=505 error=\"reading from a closed fifo\" runtime=aws.firecracker stream=stdin vmID=505\r\nERRO[2020-06-25T07:20:25.892580185-04:00] error closing io stream                       ExecID= TaskID=505 error=\"1 error occurred:\\n\\t* close unix @->firecracker.vsock: use of closed network connection\\n\\n\" runtime=aws.firecracker stream=stdin vmID=505\r\nERRO[2020-06-25T07:20:25.923729272-04:00] time=\"2020-06-25T07:20:25-04:00\" level=warning msg=\"firecracker exited: signal: killed\"  shim_stream=stderr vmID=505\r\nERRO[2020-06-25T07:20:30.892486598-04:00] error closing io stream                       ExecID= TaskID=505 error=\"1 error occurred:\\n\\t* close unix @->firecracker.vsock: use of closed network connection\\n\\n\" runtime=aws.firecracker stream=stderr vmID=505\r\nERRO[2020-06-25T07:20:30.892525517-04:00] error closing io stream                       ExecID= TaskID=505 error=\"1 error occurred:\\n\\t* close unix @->firecracker.vsock: use of closed network connection\\n\\n\" runtime=aws.firecracker stream=stdout vmID=505\r\nDEBU[2020-06-25T07:21:10.651353555-04:00] load snapshot request: VMID:\"505\" SnapshotFilePath:\"/tmp/snapshot_file\" MemFilePath:\"/tmp/mem_file\"  \r\nDEBU[2020-06-25T07:21:10.665366928-04:00] resume VM request: VMID:\"505\" \r\n```\r\n\r\nPlatform: Host: Ubuntu 18, v4.15. Guest: containerd's default kernel and rootfs Hello, we were able to get around the `InvalidOffset` error by issuing a Patch Drive request between SnapshotLoad and Resume as follows:\r\n```\r\ncurl --unix-socket /var/lib/firecracker-containerd/shim-base/firecracker-containerd/505/firecracker.sock -i \\\r\n     -X PATCH 'http://localhost/drives/MN2HE43UOVRDA' \\\r\n     -H 'accept: application/json' \\\r\n     -H 'Content-Type: application/json' \\\r\n     -d '{\r\n            \"drive_id\": \"MN2HE43UOVRDA\",\r\n            \"path_on_host\": \"/dev/mapper/fc-dev-thinpool-snap-9\"\r\n         }'\r\n```\r\nHowever, we are not sure why this happens. Any ideas are greatly appreciated. I'm working on a fix for this. Hi all, sorry for the delay here, I got sidetracked with other tasks.\r\n\r\n> Hello, we were able to get around the InvalidOffset error by issuing a Patch Drive request between SnapshotLoad and Resume\r\n\r\nIndeed, that is a valid workaround. The updated path does not make it to the snapshot, so after loading the snapshot you can do a PATCH to _manually_ update that disk path to its right value.\r\n\r\n------------\r\n\r\nA full fix is currently pending review in https://github.com/firecracker-microvm/firecracker/pull/2045.  We don't have Docker. We likely won't ever.  Docker only support can be worked around, but it would be nicer to have `devtool/build` not care.\r\n\r\nIn our experience so far the tools are interchangeable so there should be no additional maintenance burden.\r\n\r\nWould adding Podman support to `devtool/build` be acceptable? TL;DR: No not for these changes. I think ;)\r\n\r\n> For me, podman worked ok\r\n\r\nInteresting? Was that as parameterized and configured in `devtool`, or using your own incantation?\r\n\r\nAs rootless it should have broken on the `--tty` with the device trees shared.\r\n\r\nMy understanding is the cgroup v1 vs v2 is about what engine you can run, or vice versa, the engine you run (currently) sets the cgroup ver you use.\r\n\r\nWhen we turn to determining the actual/minimal capabilities each contain is granted then the v1 vs v2 issue will loom. This change doesn't address that.\r\n\r\nFrankly - I hope that shortly we can dump these containers and have Firecracker uVM build Firecracker.\r\nIn fact I'd suggest the time investigating the \"least permissions required\" for these containers could be better spent on porting the build to a couple of uVM's.\r\n\r\nOr is there some benefit from the container setup that I am missing?  Thanks for the additional info. +1 for uVM builds. > I hope that shortly we can dump these containers and have Firecracker uVM build Firecracker.\r\nOr is there some benefit from the container setup that I am missing?\r\n\r\nOne problem to using uVM builds is the need for virtualization support in dev machines.\r\nAny dev environment running on a VM without nested virtualization support would be unusable.\r\n\r\nContainers are a familiar and accepted way for deploying a build environment (our particular case) and they come with services and tools that make building and distribution easy. I don't personally see value in opening a uVM images store/hub :) for example.\r\n\r\nHaving said that, I do agree that we can _improve_ our container setup. The issue of running the fcuvm/dev container as root with elevated privileges is thorny. We likely can never run (at least) some parts of the test suite without elevated privileges, doing all the testing and analysis to work out which test items require which capabilities is a substantial effort and (in our opinion) likely not the best use of dev cycles right now.\r\nExample: a higher priority is writing, documenting and working out the equivalent jailer details.\r\n\r\nThere are two workarounds readily available to anyone who comes along this path and wants to run the test suite, in order of ease:\r\n\r\nWorkaround 1:\r\nOnly run the test suite on external CI/CD providers. These generally run as root, and your systems aren't touched by any libraries the test suite pulls in and runs.\r\n\r\nWorkaround 2:\r\nOnly run the test suite as rootless, either Docker (hard to configure) or Podman (no setup required).\r\nThe Podman path is provided by PR #1973 and the instructions therein.\r\n\r\nClosing as fixed for us, and for anyone else there are two workarounds at hand.  Nit picking but I noticed there is no test case for the scenario: Invalid ELF magic number.\r\n\r\n~~Hmm, even the following is rejected~~ (bitrot?) \r\n\r\nSeems the file is OK once re-extracted.\r\nI'm leaving the following as examples to add to the getting started (Troubleshooting section?) to show the variation in output a user can expect to see from a valid kernel.\r\n\r\n```bash\r\n$ file vmlinux \r\nvmlinux: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=47ba3aa09eb7819f064f0ecdced\r\nfe48f020f5d26, stripped\r\n```\r\n\r\nSo what is legal?\r\n\r\nFrom the getting started links (AMD64):\r\n\r\n```bash\r\n$ file hello-vmlinux.bin \r\nhello-vmlinux.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, BuildID[sha1]=8647c7e2e72433a17\r\nadcc6f485c42764f187d2ff, not stripped\r\n```\r\n \r\nFrom the [ firecracker/src/vmm/tests/mock_resources/test_elf.bin](https://github.com/firecracker-microvm/firecracker/raw/108aaf8725a386bab9a1a203dba99a1ffc169b82/src/vmm/tests/mock_resources/test_elf.bin)\r\n\r\n```bash\r\n$ file test_elf.bin\r\ntest_elf.bin: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped\r\n```\r\n\r\n~~So the difference does not appear to be a stripped/not stripped.~~\r\n~~Any hints or tips?~~\r\n  Hi, @bertdeb ! Thanks for your PR. \r\nPlease explicitly sign-off your commit by using : `git commit -s --amend`. Replaced by #1990.  Minor spelling fix\r\n\r\n## Reason for This PR\r\n\r\nThe word `average` was misspelled in the specification document.\r\n\r\n## Description of Changes\r\n\r\nI changed the spelling of the word `averadge` to `average`.\r\n\r\n- [x] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Any required documentation changes (code and docs) are included in this PR.\r\n- [ ] Any newly added `unsafe` code is properly documented.\r\n- [ ] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Whoops, sorry about that @lauralt - it should be signed now. Thanks!  ## Reason for This PR\r\n\r\nPartially addresses #1640 .\r\n\r\n## Description of Changes\r\n\r\nThis PR contains a couple of fixes that would enable Firecracker to support up to 128 vCPUs with HyperThreading enabled and up to 64 vCPUS with HyperThreading disabled.\r\n\r\nWe still miss topology-related optimizations so we keep the soft limit of 32 vCPUs.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n > Changelog and integration tests for intel and amd would be nice\r\n\r\n@dianpopa \r\n\r\nFor the moment we keep the current soft limitation of 32 vcpus, so we can't add integration tests, since the API won't allow more then 32 vcpus. Also considering this, I don't know if a Changelog entry would make sense. WDYT ?  I tried to build Firecracker with libc, instead of musl, and observed that Firecracker raises the following error with the latest firecracker code (57f4c7ca14a31c5536f188cacb669d2cad32b9ca).\r\n\r\n```\r\nERROR:src/vmm/src/signal_handler.rs:37] Shutting down VM after intercepting a bad syscall (39).\r\n```\r\nGuest:\r\n* hello-linux.bin kernel\r\n* rootfs build according to docs (Alpine), build from the following docker image `ustiugov/helloworld:runner_workload`\r\n\r\nHost:\r\n* Ubuntu 18.04: 4.15.0-76-generic\r\n\r\nA complete log:\r\n```\r\nRunning Firecracker v0.21.0\r\n2020-06-16T13:31:24.898331416 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:124] The API server received a Put request on \"/boot-source\" with body \"{n \"kernel_image_path\": \"/home/ustiugov/rootfs_all/hello-vmlinux.bin\",n \"boot_args\": \"console=ttyS0 reboot=k panic=1 pci=off\"n }\".\r\n2020-06-16T13:31:24.898602853 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:89] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-16T13:31:24.910903560 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:124] The API server received a Put request on \"/drives/rootfs\" with body \"{n \"drive_id\": \"rootfs\",n \"path_on_host\": \"/home/ustiugov/rootfs_all/rootfs.ext4\",n \"is_root_device\": true,n \"is_read_only\": falsen }\".\r\n2020-06-16T13:31:24.911165063 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:89] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-16T13:31:24.921777311 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:124] The API server received a Put request on \"/network-interfaces/eth0\" with body \"{n \"iface_id\": \"eth0\",n \"guest_mac\": \"AA:FC:00:00:00:01\",n \"host_dev_name\": \"tap0\"n }\".\r\n2020-06-16T13:31:24.923636799 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:89] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-16T13:31:24.934104250 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:124] The API server received a Put request on \"/machine-config\" with body \"{n \"vcpu_count\": 1,n \"mem_size_mib\": 512,n \"ht_enabled\": falsen }\".\r\n2020-06-16T13:31:24.934236010 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:89] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-16T13:31:24.944399963 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:124] The API server received a Put request on \"/metrics\" with body \"{n \"metrics_path\": \"/tmp/metrics.fifo\"n }\".\r\n2020-06-16T13:31:24.944527673 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:89] The request was executed successfully. Status code: 204 No Content.\r\n2020-06-16T13:31:24.954896116 [anonymous-instance:INFO:src/api_server/src/parsed_request.rs:124] The API server received a Put request on \"/actions\" with body \"{n \"action_type\": \"InstanceStart\"n }\".\r\n2020-06-16T13:31:24.969572427 [anonymous-instance:ERROR:src/vmm/src/signal_handler.rs:37] Shutting down VM after intercepting a bad syscall (39).\r\n\r\n```\r\n @aghecenco Thank you, the workaround seems to be a plausible option for now (I intend to go back to musl later).\r\n\r\nThe tail of the strace log\r\n```\r\nioctl(26, KVM_CREATE_VCPU, 0)           = 28\r\nmmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_SHARED, 28, 0) = 0x7fde2fc11000\r\neventfd2(0, EFD_NONBLOCK)               = 29\r\nepoll_ctl(6, EPOLL_CTL_ADD, 0, {EPOLLIN, {u32=0, u64=0}}) = 0\r\ndup(25)                                 = 30\r\ndup(29)                                 = 31\r\neventfd2(0, EFD_NONBLOCK)               = 32\r\neventfd2(0, EFD_NONBLOCK)               = 33\r\ndup(33)                                 = 34\r\ndup(32)                                 = 35\r\ndup(31)                                 = 36\r\ndup(32)                                 = 37\r\nioctl(26, KVM_IRQFD, 0x7fff66bbd700)    = 0\r\nioctl(26, KVM_IRQFD, 0x7fff66bbd700)    = 0\r\nioctl(26, KVM_IRQFD, 0x7fff66bbd700)    = 0\r\nepoll_ctl(6, EPOLL_CTL_ADD, 16, {EPOLLIN, {u32=16, u64=16}}) = 0\r\nioctl(26, KVM_IOEVENTFD, 0x7fff66bbe558) = 0\r\nioctl(26, KVM_IRQFD, 0x7fff66bbe5d0)    = 0\r\nepoll_ctl(6, EPOLL_CTL_ADD, 23, {EPOLLIN, {u32=23, u64=23}}) = 0\r\nioctl(26, KVM_IOEVENTFD, 0x7fff66bbe718) = 0\r\nioctl(26, KVM_IOEVENTFD, 0x7fff66bbe718) = 0\r\nioctl(26, KVM_IRQFD, 0x7fff66bbe790)    = 0\r\nioctl(28, KVM_SET_CPUID2, 0x55dcb4d747d0) = 0\r\nioctl(28, KVM_SET_MSRS, 0x55dcb4d74d10) = 10\r\nioctl(28, KVM_SET_REGS, {rax=0, ..., rsp=0x8ff0, rbp=0x8ff0, ..., rip=0x1000000, rflags=0x2}) = 0\r\nioctl(28, KVM_SET_FPU, 0x7fff66bbdec0)  = 0\r\nioctl(28, KVM_GET_SREGS, {cs={base=0xffff0000, limit=65535, selector=61440, type=11, present=1, dpl=0, db=0, s=1, l=0, g=0, avl=0}, ...}) = 0\r\nioctl(28, KVM_SET_SREGS, {cs={base=0, limit=1048575, selector=8, type=11, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, ...}) = 0\r\nioctl(28, KVM_GET_LAPIC, 0x7fff66bbc578) = 0\r\nioctl(28, KVM_SET_LAPIC, 0x7fff66bbcdd8) = 0\r\nioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0\r\nioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0\r\nioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0\r\nioctl(0, SNDCTL_TMR_START or TCSETS, {B38400 opost -isig -icanon -echo ...}) = 0\r\nioctl(0, TCGETS, {B38400 opost -isig -icanon -echo ...}) = 0\r\nrt_sigaction(SIGRT_2, {sa_handler=0x55dcb32ae390, sa_mask=~[RTMIN RT_1], sa_flags=SA_RESTORER|SA_SIGINFO, sa_restorer=0x7fde2f404890}, NULL, 8) = 0\r\nmmap(NULL, 2101248, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7fde2e9e7000\r\nmprotect(0x7fde2e9e8000, 2097152, PROT_READ|PROT_WRITE) = 0\r\nclone(child_stack=0x7fde2ebe6eb0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7fde2ebe79d0, tls=0x7fde2ebe7700, child_tidptr=0x7fde2ebe79d0) = 1625301\r\nprctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0)  = 0\r\nprctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, {len=459, filter=0x55dcb4d76a60}) = 0\r\nfutex(0x7fde280025a8, FUTEX_WAKE_PRIVATE, 1) = 1\r\ngetpid()                                = 39\r\n--- SIGSYS {si_signo=SIGSYS, si_code=SYS_SECCOMP, si_call_addr=0x7fde2eece8e7, si_syscall=__NR_getpid, si_arch=AUDIT_ARCH_X86_64} ---\r\nwrite(3, \"2020-06-16T15:02:23.827850251 [a\"..., 146) = 146\r\nwrite(24, \"{\\\"utc_timestamp_ms\\\":3648140888,\\\"\"..., 2596) = 2596\r\nexit_group(148)                         = ?\r\n+++ exited with 148 +++\r\n\r\n``` I have started to investigate on this issue.\r\n\r\nAfter reproducing it, I managed to get the stack trace that lead to the error:\r\n\r\n    #0  0x00007ffff72ac300 in getpid () from /lib64/libc.so.6\r\n    #1  0x00007ffff77bd744 in pthread_kill () from /lib64/libpthread.so.0\r\n    #2  0x00005555557940bb in vmm_sys_util::unix::signal::Killable::kill (self=0x555555c87940, num=34) at /home/ec2-user/.cargo/registry/src/github.com-1ecc6299db9ec823/vmm-sys-util-0.4.0/src/unix/signal.rs:430\r\n    #3  0x000055555577e863 in vmm::vstate::VcpuHandle::send_event (self=0x555555c87920, event=...) at src/vmm/src/vstate.rs:1394\r\n    #4  0x00005555556b0f24 in vmm::Vmm::resume_vcpus (self=0x7fffffff9940) at src/vmm/src/lib.rs:301\r\n    #5  0x0000555555625073 in vmm::builder::build_microvm_for_boot (vm_resources=0x7fffffffb7c0, event_manager=0x7fffffffbf30, seccomp_filter=...) at src/vmm/src/builder.rs:351\r\n    #6  0x000055555573a50d in vmm::rpc_interface::PrebootApiController::handle_preboot_request (self=0x7fffffffb868, request=...) at src/vmm/src/rpc_interface.rs:300\r\n    #7  0x00005555555dcd4a in vmm::rpc_interface::PrebootApiController::build_microvm_from_requests (seccomp_filter=..., event_manager=0x7fffffffbf30, instance_info=..., recv_req=..., respond=...)\r\n        at /home/ec2-user/code/firecracker/src/vmm/src/rpc_interface.rs:237\r\n    #8  0x00005555555ec68d in firecracker::api_server_adapter::run_with_api (seccomp_filter=..., config_json=..., bind_path=..., instance_info=..., start_time_us=..., start_time_cpu_us=...) at src/firecracker/src/api_server_adapter.rs:166\r\n    #9  0x00005555555e80c7 in firecracker::main () at src/firecracker/src/main.rs:245\r\n\r\nApparently, the `pthread_kill` function from the glibc implementation is calling the `getpid()` syscall, which violates current seccomp rules.\r\n\r\nAfter searching through the source code of glibc, this is indeed the case, as you can see [here](https://gitlab.com/LinkiTools/glibc/-/blob/glibc-2.26/sysdeps/unix/sysv/linux/pthread_kill.c#L53).\r\n\r\nThe standard musl `pthread_kill` implementation, which can be found [here](https://git.musl-libc.org/cgit/musl/tree/src/thread/pthread_kill.c), is not calling `getpid`, therefore is not violating any seccomp rules, and that's why this is only reproducible when building with dynamic glibc. \r\n\r\nThis difference is rooted in the syscall each implementation chooses to use in order to kill the thread (`tkill` vs `tgkill`).\r\n`tgkill` requires the thread group id, which is retrieved via the `getpid` syscall.\r\n\r\nI will look into this to find a fix. This issue is now fixed by this [commit](https://github.com/firecracker-microvm/firecracker/commit/fa24d94175bf9411b26878f67c536792b4deeb5c) and will be available in the next release.  ## Reason for This PR\r\n\r\nCargo adds by default DWARF sections to release binaries. It is recommended to strip release binaries out of debug information because of security concerns, but also because this information is not relevant in a production environment.\r\n\r\n#1652\r\n\r\n## Description of Changes\r\n\r\nThe provided solution adds a devtool command (`devtool strip [--target-libc (musl|gnu)]`) which strips release binaries out of debug information (DWARF sections). This solution is based on `GNU strip` tool, which strips away only debug information (using --strip-debug).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n > I am not sure we need to do this as part of the build system. I would leave the build system just as it is and move the stripping a step further into the release pipeline where the binary is stripped and a copy of the original is kept in cold storage for debugging purposes.\r\n> @firecracker-microvm/compute-capsule WDYT ?\r\n\r\n+1 on this.\r\n\r\nI was imagining this being implemented such that we have a devtool command that does building release binaries + stripping them at once (or as separate commands), without impacting in any way `cargo build` or `./tool/devtool build`.\r\n\r\nWith that in mind, I wouldn't like us to modify `./cargo/config`. Can this be done at the `./tools/devtool ` level only? Maybe with overriding `RUSTFLAGS` and exposing a new devtool command such as `build-release-stripped` (or some other better name). This command can then be used by an automated release process to create & upload the release artifacts. > I am not sure we need to do this as part of the build system. I would leave the build system just as it is and move the stripping a step further into the release pipeline where the binary is stripped \r\n\r\nWhy to separate the stripping of debug symbols (embedded into the release binaries at build time) in a separate step, inside the release pipeline? My understanding is that these debug symbols can be added or not when we build the executable files, so to me it seems that this is the step were we should provide optional build flags which can be used for building the binaries with our without debug info. Let me know what you think.\r\n\r\n> and a copy of the original is kept in cold storage for debugging purposes.\r\n\r\nWe wouldn't need to store binaries with debug symbols. We can get these binaries if we checkout on the release tag and build it. > +1 on this.\r\n> \r\n> I was imagining this being implemented such that we have a devtool command that does building release binaries + stripping them at once (or as separate commands), without impacting in any way `cargo build` or `./tool/devtool build`. With that in mind, I wouldn't like us to modify `./cargo/config`. \r\n\r\nRight, this makes sense. However, having something inside the devtool for building and stripping at once was not the suggestion of @sandreim , as far as I can tell. I will keep the .cargo/config, to not impact `cargo build`.\r\n \r\n> Can this be done at the `./tools/devtool ` level only? Maybe with overriding `RUSTFLAGS` and exposing a new devtool command such as `build-release-stripped` (or some other better name). This command can then be used by an automated release process to create & upload the release artifacts.\r\n\r\nWe can expose support for binaries stripping with a `devtool/build` flag, not necessary another build & strip command. What do you think? > Right, this makes sense. However, having something inside the devtool for building and stripping at once was not the suggestion of @sandreim , as far as I can tell. I will keep the .cargo/config, to not impact `cargo build`.\r\n> \r\nI probably misunderstood then, sorry.\r\n\r\n> > Can this be done at the `./tools/devtool ` level only? Maybe with overriding `RUSTFLAGS` and exposing a new devtool command such as `build-release-stripped` (or some other better name). This command can then be used by an automated release process to create & upload the release artifacts.\r\n> \r\n> We can expose support for binaries stripping with a `devtool/build` flag, not necessary another build & strip command. What do you think?\r\n\r\nI think we should keep `./devtool build` as is. The current logic of `./devtool build` is to pass all the flags directly to `cargo build`. I've personally abused this functionality (and I find it very nice) to do things such as building firecracker with gnu. I personally prefer to have another `build-stripped` command that doesn't pass the flags to cargo build directly.\r\n\r\n > > I think we should keep `./devtool build` as is. The current logic of `./devtool build` is to pass all the flags directly to `cargo build`. I've personally abused this functionality (and I find it very nice) to do things such as building firecracker with gnu. I personally prefer to have another `build-stripped` command that doesn't pass the flags to cargo build directly.\r\n> \r\n> +1 on this. Let's just have `devtool build` unchanged. Looks like strip is available in the dev container, why not make it available via `devtool strip`\r\n\r\nCorrect. Looked within the container with `tools/devtool shell -p` and strip seems to be present in the container. I looked on the Dockerfile and couldn't see where it is pulled from. However, I guess it is shipped with `FROM ubuntu:18.04`. I'll incorporate your suggestions. Thanks. > I think you should also shrink the binary size limits in the associated integ test, the new binaries should be smaller.\r\n\r\n@aghecenco , adding stripping support for devtool does not interfere with building firecracker binaries inside integration tests. Do you suggest to strip the binaries in the integration tests as well and then update the binaries sizes in the corresponding test? > > I think you should also shrink the binary size limits in the associated integ test, the new binaries should be smaller.\r\n> \r\n> @aghecenco , adding stripping support for devtool does not interfere with building firecracker binaries inside integration tests. Do you suggest to strip the binaries in the integration tests as well and then update the binaries sizes in the corresponding test?\r\n\r\nThe integration tests should be run with the binary that ends up being used by our customers. > > > I think you should also shrink the binary size limits in the associated integ test, the new binaries should be smaller.\r\n> > \r\n> > \r\n> > @aghecenco , adding stripping support for devtool does not interfere with building firecracker binaries inside integration tests. Do you suggest to strip the binaries in the integration tests as well and then update the binaries sizes in the corresponding test?\r\n> \r\n> The integration tests should be run with the binary that ends up being used by our customers.\r\n\r\nI've stripped away debug_info, after integration tests build step and updated the `test_binary_size.py` test. There were similar suggestions to have this in our integration tests as well, from @dpopa and @aghecenco as well. PTAL! @dianpopa, @gc-plp , I've addressed your feedback! PTAL. > @dpopa, @gc-plp , I've addressed your feedback! PTAL.\r\n\r\nnit: @dianpopa :D\r\nI will take a look!   ## Reason for This PR\r\n\r\ndevices::virtio::net::Error::TapOpen contains '\"' in the string representation, which results an invalid JSON like below.\r\n\r\n```\r\n{\r\n  \"fault_message\": \"Could not create Network Device: TapOpen(CreateTap(Os { code\r\n: 1, kind: PermissionDenied, message: \"Operation not permitted\" }))\"\r\n}\r\n```\r\n\r\nIt is safer to use serde_json rather than format!().\r\n\r\n## Description of Changes\r\n\r\n- Use serde_json instead of using format!() to create a JSON object.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented: N/A No unsafe\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`: N/A No API changes\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`: N/A No user-facing changes\r\n > Change looks good.\r\n> \r\n> I think you should also make the same change to:\r\n> \r\n> ```rust\r\n> impl Into<Response> for Error {}\r\n> ```\r\n> \r\n> in `src/api_server/src/parsed_request.rs`\r\n\r\nThis one?\r\n\r\nhttps://github.com/firecracker-microvm/firecracker/blob/master/src/api_server/src/parsed_request.rs#L207-L213\r\n\r\nIt should be safe. `format!()` is used to convert the error to a new string, and json::fault_message is now can escape meta-characters correctly.  @acatangiu I had to rebase the coverage file, please re-approve/take another look, thanks! @sandreim @acatangiu I rebased again :(, please re-approve, thanks! > @sandreim @acatangiu I rebased again :(, please re-approve, thanks!\r\n\r\nLooks like you still need to rebase again :)  ```\r\n____________ test_run_concurrency[ubuntu_with_ssh, 20 instance(s)] _____________\r\nintegration_tests/functional/test_concurrency.py:20: in test_run_concurrency\r\n    \"config\": network_config, \"iface_id\": str(i)\r\nintegration_tests/functional/test_concurrency.py:29: in _configure_and_run\r\n    microvm.spawn()\r\nframework/microvm.py:324: in spawn\r\n    self.create_jailed_resource(log_fifo.path, create_jail=True)\r\nframework/microvm.py:265: in create_jailed_resource\r\n    create_jail=create_jail)\r\nframework/jailer.py:150: in jailed_path\r\n    utils.run_cmd(cmd)\r\nframework/utils.py:176: in run_cmd\r\n    asyncio.set_event_loop(loop)\r\n/usr/lib/python3.6/asyncio/events.py:699: in set_event_loop\r\n    get_event_loop_policy().set_event_loop(loop)\r\n/usr/lib/python3.6/asyncio/unix_events.py:1060: in set_event_loop\r\n    self._watcher.attach_loop(loop)\r\n/usr/lib/python3.6/asyncio/unix_events.py:807: in attach_loop\r\n    self._loop.remove_signal_handler(signal.SIGCHLD)\r\n/usr/lib/python3.6/asyncio/unix_events.py:155: in remove_signal_handler\r\n    signal.signal(sig, handler)\r\n/usr/lib/python3.6/signal.py:48: in signal\r\n    return _int_to_enum(handler, Handlers)\r\nE   TypeError: 'int' object is not callable\r\n``` Somehow related to #1932.  I'm following the getting started guide, and trying to bind a macvtap to guest, which always give me this:\r\n```\r\n2020-05-28T14:03:41.904918179 [anonymous-instance:ERROR:src/api_server/src/parsed_request.rs:90] Received Error. Status code: 400 Bad Request. Message: Cannot open TAP device. Invalid name/permissions. CreateTap(Os { code: 22, kind: InvalidInput, message: Invalid argument })\r\n```\r\nI use following command to create macvtap and try to setup network for guest:\r\n```\r\nsudo ip link add link eno1 name macvtap0 type macvtap mode bridge\r\ncurl --unix-socket /tmp/firecracker.socket -i \\\r\n         -X PUT 'http://localhost/network-interfaces/eth0' \\\r\n         -H 'Accept: application/json'           \\\r\n         -H 'Content-Type: application/json'     \\\r\n         -d \"{\r\n                \\\"iface_id\\\": \\\"eth0\\\",\r\n                \\\"host_dev_name\\\": \\\"macvtap0\\\"\r\n            }\"\r\n```\r\nfirecracker version: `0.21.1` @sandreim Using a bridge requires me to reconfig my network (move ip to bridge etc), using macvtap can avoid these troubles. \r\n\r\nI'm looking forward to this feature. To accepting macvtap devices you can either require them to be in the format `/dev/tapXY` and then opening here https://github.com/firecracker-microvm/firecracker/blob/49003d0f2f8573f6e1af6d22232c0917a0253189/src/devices/src/virtio/net/tap.rs#L113 and skipping that step https://github.com/firecracker-microvm/firecracker/blob/49003d0f2f8573f6e1af6d22232c0917a0253189/src/devices/src/virtio/net/tap.rs#L123\r\nActually it would be nicer if the `XY` number for `/dev/tapXY` is detected from its interface name via something like `let mut ifreq = ifreq_for(name);; ifreq_ioctl(socketfd, &mut ifreq, SIOCGIFINDEX).map(|ifindex| ifindex as usize);` Here is a small helper script for testing during development. It uses the passthru mode to forward the current default NIC to the VM (temporarily blocking access of the kernel network stack). This also works when on a WiFi (but not for too long since wpa_supplicant can't renew the authentification while the VM uses the NIC).\r\n\r\n```\r\n#!/bin/bash\r\nset -euo pipefail\r\n\r\nif [ $# = 1 ]; then\r\n  IFN=\"$1\"\r\nelse\r\n  IFN=\"$(ip route get 1 | grep -o 'dev.*' | cut -d ' ' -f 2)\"\r\n  echo \"Detected $IFN based on default route\"\r\nfi\r\nTAP=\"$IFN\"pass\r\necho \"Creating macvtap is passthru mode for $IFN (normal kernel network access will be blocked)\"\r\necho \"When done using it, delete with:\"\r\necho \"  sudo ip link delete $TAP\"\r\nsudo ip link add link \"$IFN\" name \"$TAP\" type macvtap mode passthru\r\nMAC=\"$(cat \"/sys/class/net/$IFN/address\")\"\r\nsudo ip link set \"$TAP\" address \"$MAC\" up\r\nDEV=\"/dev/tap$(cat \"/sys/class/net/$TAP/ifindex\")\"\r\nsudo chown \"$USER:$USER\" \"$DEV\"\r\necho \"Ready! MAC: $MAC DEV: $DEV IFACE: $TAP\"\r\n\r\n```  If we try to use a microVM that is loaded from a snapshot which was created on a vm with kernel version 4.9, it crashes with the following output:\r\n```\r\nlocalhost:~# time\r\n[   30.827247] BUG: unable to handle kernel NULL pointer dereference at 0000000000000008\r\n[   30.841514] IP: [<ffffffff81128937>] __pagevec_lru_add_fn+0xf7/0x200\r\n[   30.887894] PGD 0 [   30.894683] \r\n...\r\n```\r\n\r\nThe images from `/build/img/x86_64/ubuntu` can be used to reproduce the issue.\r\n Not sure if that's the problem, but 4.9 doesn't have the required features for snapshotting (such as KVM_IMMEDIATE_EXIT). From what I understood from @sandreim, this requirement applies only on the host side. Summary of the current findings on this issue:\r\n\r\nFrom what I investigated, it looks like the problem is not the kernel version used for the snapshotted microVM, but the particular kernel image from `/build/img/x86_64/ubuntu/kernel` (kernel version 4.9.0).\r\n\r\nSo, creating a snapshot on a microVM that was configured with the following relevant resources:\r\n\r\n```\r\nkernel_path=$(pwd)\"/firecracker/build/img/x86_64/ubuntu/kernel/vmlinux.bin\"\r\ncurl --unix-socket /tmp/firecracker.socket -i \\\r\n        -X PUT 'http://localhost/boot-source'   \\\r\n        -H 'Accept: application/json'           \\\r\n        -H 'Content-Type: application/json'     \\\r\n        -d \"{\r\n              \\\"kernel_image_path\\\": \\\"${kernel_path}\\\",\r\n              \\\"boot_args\\\": \\\"console=ttyS0 reboot=k panic=1 pci=off\\\"\r\n         }\"\r\n\r\nrootfs_path=$(pwd)\"/firecracker/build/img/x86_64/ubuntu_with_ssh/fsfiles/xenial.rootfs.ext4\"\r\n  curl --unix-socket /tmp/firecracker.socket -i \\\r\n    -X PUT 'http://localhost/drives/rootfs' \\\r\n    -H 'Accept: application/json'           \\\r\n    -H 'Content-Type: application/json'     \\\r\n    -d \"{\r\n          \\\"drive_id\\\": \\\"rootfs\\\",\r\n          \\\"path_on_host\\\": \\\"${rootfs_path}\\\",\r\n          \\\"is_root_device\\\": true,\r\n          \\\"is_read_only\\\": false\r\n     }\"\r\n\r\n\r\ncurl --unix-socket /tmp/firecracker.socket -i  \\\r\n    -X PUT 'http://localhost/machine-config' \\\r\n    -H 'Accept: application/json'            \\\r\n    -H 'content-tyfpe: application/json'      \\\r\n    -d '{\r\n        \"vcpu_count\": 2,\r\n        \"mem_size_mib\": 2048,\r\n        \"ht_enabled\": false\r\n    }'\r\n```\r\n\r\nand then restoring it, leads to the following output:\r\n\r\n```\r\nroot@7e47bb8f2f0a:/dev# \r\nroot@7e47bb8f2f0a:/dev# ls\r\n[   30.532560] BUG: unable to handle kernel NULL pointer dereference at 0000000000000008\r\n[   30.544539] IP: [<ffffffff81128937>] __pagevec_lru_add_fn+0xf7/0x200\r\n[   30.554283] PGD 0 [   30.556484] \r\n[   30.559014] Oops: 0002 [#1] SMP\r\n[   30.563733] CPU: 1 PID: 987 Comm: bash Not tainted 4.9.0 #21\r\n```\r\n\r\nWe are able to maybe navigate through directories a bit, but then it crashes; also, sending any command like `ls`, `time` results in crashing with the aforementioned output.\r\n\r\nIt is interesting that, if the snapshot was created during the execution of the following loop inside the vm:\r\n\r\n```bash\r\n#!/bin/bash\r\nfor i in {1..10000}\r\ndo\r\n   echo \"Hello $i\"\r\ndone\r\n```\r\n\r\nloading and resuming the microVM works (the vm continues to execute the loop), but again if we try to use it, it crashes with the same output.\r\n\r\nUsing the following kernel image: `kernel_path=\"/firecracker/build/img/x86_64/ubuntu_with_ssh/kernel/vmlinux.bin\"` which has the kernel version 4.9.0+ (where the \"+\" comes, I suspect, from an image that was built from a modified 4.9.0 release), the issue doesn't reproduce.\r\n\r\nAlso, I didn't manage to reproduce the issue using the kernel config file from `/resources/microvm-kernel-x86_64.config` and building it with Kernel version 4.9.0 (which required also this little [patch]( https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=474c90156c8dcc2fa815e6716cc9394d7930cb9c) on top of it in order to successfully generate a kernel image).\r\n\r\nThe config kernel file used for `/build/img/x86_64/ubuntu/kernel/vmlinux.bin` doesn't have `CONFIG_IKCONFIG` flag set, so the config can't be extracted from it.\r\n\r\nAlso, with the other kernel images from `img`, the issue couldn't be replicated. The rootfs image doesn't seem to matter either.\r\n  Proposed solution to #1865 \r\n\r\nStill work in progress and untested, but at a high-level is this going in the right direction?\r\n\r\nWhere I've: \r\n\r\n1. Added a new pseudo `BootTimer` device \r\n2. Added it to the first slot on the MMIO bus\r\n3. Removed the boot signal handling and timestamping from Vcpu (AFAICT,  the timestamp was only used for the boot log time)\r\n4. Removed the logging statement to the BootTimer device.  \r\n\r\nStill got to: \r\n\r\n- Write an `/sbin/init` wrapper for x86_64 in order to generate the signal at the correct address.\r\n- Complete the \"logic\" of the device.\r\n- Test.\r\n- Add missing tests. \r\n\r\nHope that makes sense.\r\n\r\n## Reason for This PR\r\n\r\n`[Author TODO: add issue # or explain reasoning.]`\r\n\r\n## Description of Changes\r\n\r\nAdd a device to improve kernel boot time logging. \r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Hey, @tnotw ! Thanks for your PR. To me looks promising.\r\nWhile we're looking at it, please let us know if you need any help with it. Hi @iulianbarbu,  thanks very much for taking a look!\r\n\r\nI think I have a snapshot test failure of some sort to go and investigate.  I assume that adding a device has had some impact I've not thought about when taking snapshots.  To be honest, I've not really been following the snapshot work. \r\n\r\nAlso,  I think using a slot on the bus consumes an IRQ,  which will be unused (?).  I've got a vague suspicion this might be a bit wasteful on `x86_64`, where IRQ numbers seem limited, and was wondering if I should code round this somehow?  Thanks @acatangiu for your review and feedback.   \r\n\r\nI've attempted to address your points above and have added an `init` implementation.  I did have a `build.rs` script to compile it,  but when I updated the container recently `musl-tools` (and hence `musl-gcc`) had been removed, which scuppered that idea.  Not sure how sensible it was anyway. \r\n\r\nStill working on the `persist` part....   > Thanks @acatangiu for your review and feedback.\r\n> \r\n> I've attempted to address your points above and have added an `init` implementation. I did have a `build.rs` script to compile it, but when I updated the container recently `musl-tools` (and hence `musl-gcc`) had been removed, which scuppered that idea. Not sure how sensible it was anyway.\r\n> \r\n> Still working on the `persist` part....\r\n\r\nWhy do you need `musl-tools`? That was used to compile C code using `musl`.\r\n\r\nIf you use rust, the container should have everything you need for both `rust musl` binaries and `rust glibc` binaries.\r\nYou can also write the `init` binary in C using glibc. There should be everything you need for it in the container. > \r\n> Why do you need `musl-tools`? That was used to compile C code using `musl`.\r\n> \r\n> If you use rust, the container should have everything you need for both `rust musl` binaries and `rust glibc` binaries.\r\n> You can also write the `init` binary in C using glibc. There should be everything you need for it in the container.\r\n\r\nRight, sorry, I though maybe there was some reason for it to be in C and that `muscl-gcc' was required compiled to it.  Maybe wrong on both counts.  Want me to redo it in rust? > Right, sorry, I though maybe there was some reason for it to be in C and that `muscl-gcc' was required compiled to it. Maybe wrong on both counts. Want me to redo it in rust?\r\n\r\nEither works. Like I said, a small C program compiled against glibc (using default `gcc`) should work nicely. Ok,  well it was contained in that last push at `./src/device/src/pseudo/init.c`,  if you did want to take a peek.  I appreciate that none of this stuff is a priority. \r\n\r\nThe reason I believed 'musl-gcc' was required was because a gcc built object wouldn't run on the musl-based Alpine image.  It couldn't find the correct library somehow.  The `musl-gcc' built object could.  Probably some lack of understanding on my part.  I will investigate further. > Shall I squash the commits? Just to tidy things up.....\r\n> \r\n> Also, I still not 100% sure I understand why the CI/CD pipeline sometimes fails catastrophically, as opposed to failing at the right tests.....\r\n\r\nSquashing the commits would be great, thanks. Regarding the CI pipeline, we will take a look at it soon, sorry for that! Hi @tnotw!\r\n\r\nI've updated the root filesystem used for measuring boot time, but you will need to update the boot time tests by specifying a custom init path:\r\n\r\n[Here](https://github.com/firecracker-microvm/firecracker/blob/master/tests/integration_tests/performance/test_boottime.py#L76), you should add `'boot_args': 'init=/sbin/boottime_init console=ttyS0 reboot=k panic=1 pci=off'`.\r\n\r\nOnce you do that we should be able to run the CI cycle again and check if anything else needs to be done.\r\n\r\nThanks!  @tnotw the rootfs files should be different:\r\n\r\n```\r\nsha256sum build/img/x86_64/minimal/fsfiles/boottime-rootfs*\r\n639e376bcb6464b2e794cda531ad173a4b0428ffcf4d4afad9357980a7ae36d5  build/img/x86_64/minimal/fsfiles/boottime-rootfs.ext4\r\n635d86bf8b7ffc6859cb75b0ba4764b4e08b664e589c49ff60c82fb568ca021a  build/img/x86_64/minimal/fsfiles/boottime-rootfs_old.ext4\r\n\r\n```\r\n\r\n`boottime-rootfs_old.ext4` is the original rootfs, while `boottime-rootfs.ext4` is the updated one.\r\n\r\nCould you delete the `build/` folder and run the build again? \r\nThis folder is used for file caching. A file is downloaded only if the test system realizes that it's missing, so if it's updated upstream, it won't be downloaded again.\r\n\r\nIndeed, the `initrd` will probably also have to be updated. I'll do that once the non-initrd tests pass and retrigger the build from our end. @tnotw good catch on the `console=ttyS0` parameter. That was the problem, sorry for the confusion :)\r\n\r\nI'll update the initrd and `aarch64` images. The PR seems to work with the updated images, but if we keep the updated images in the S3 bucket, other PRs will fail.\r\n\r\nI switched the images back to the old ones.\r\n\r\n~~Let me know when this is ready to be merged so that I can switch back to the new images and retrigger the tests. Once the tests pass, we can merge this immediately.~~\r\n\r\nActually, I think that we need to sync on what the next steps should be here. If we replace the current `init` with the one in this PR and update the images, we will introduce a breaking change in testing releases and generally commits that happened before this one.\r\n\r\nThere are a few paths that we can follow:\r\n\r\n1. This PR should use different fixture names, so that the tests pull images from a different folder. The disadvantage of this method is that the size of the S3 bucket will increase because we need to keep old images there.\r\n2. The init should trigger both the new boot time method and the old one. The disadvantage is that we remove code that handles the old boot time trigger method.\r\n3. We go back to using a separate init and check if we can achieve an under 160ms boot time with a custom init.\r\n\r\nI think that we can make (3) work, but I suspect that the `rdinit=` kernel parameter should have been added too. \r\n\r\nWhat do you think?  > There are a few paths that we can follow:\r\n    1. This PR should use different fixture names, so that the tests pull images from a different folder. The disadvantage of this method is that the size of the S3 bucket will increase because we need to keep old images there.\r\n    2. The init should trigger both the new boot time method and the old one. The disadvantage is that we remove code that handles the old boot time trigger method.\r\n    3. We go back to using a separate init and check if we can achieve an under 160ms boot time with a custom init.\r\n\r\nI like option 1. It keeps things clean, each version with its own independent mechanism. S3 bucket increase is irrelevant IMHO.\r\n > \r\n> \r\n> > There are a few paths that we can follow:\r\n> > 1. This PR should use different fixture names, so that the tests pull images from a different folder. The disadvantage of this method is that the size of the S3 bucket will increase because we need to keep old images there.\r\n> > 2. The init should trigger both the new boot time method and the old one. The disadvantage is that we remove code that handles the old boot time trigger method.\r\n> > 3. We go back to using a separate init and check if we can achieve an under 160ms boot time with a custom init.\r\n> \r\n> I like option 1. It keeps things clean, each version with its own independent mechanism. S3 bucket increase is irrelevant IMHO.\r\n\r\nI'd also go with option 1. On long term would be nice to version our images and have ways to replicate them. By popular demand, option (1) has been implemented for x86_64 :+1: \r\n\r\n@tnotw, we are once again asking for your support in changing the boottime test. You basically need to update the fixtures that are passed as test parameters:\r\n\r\n```diff\r\ndiff --git a/tests/integration_tests/performance/test_boottime.py b/tests/integration_tests/performance/test_boottime.py\r\nindex 9a90e25b..30abf388 100644\r\n--- a/tests/integration_tests/performance/test_boottime.py\r\n+++ b/tests/integration_tests/performance/test_boottime.py\r\n@@ -22,34 +22,34 @@ INITRD_BOOT_TIME_US = 160000 if platform.machine() == \"x86_64\" else 500000\r\n TIMESTAMP_LOG_REGEX = r'Guest-boot-time\\s+\\=\\s+(\\d+)\\s+us'\r\n\r\n\r\n-def test_boottime_no_network(test_microvm_with_boottime):\r\n+def test_boottime_no_network(test_microvm_with_boottime_timer):\r\n     \"\"\"Check guest boottime of microvm without network.\"\"\"\r\n-    _ = _configure_vm(test_microvm_with_boottime)\r\n+    _ = _configure_vm(test_microvm_with_boottime_timer)\r\n     time.sleep(0.4)\r\n-    boottime_us = _test_microvm_boottime(test_microvm_with_boottime.log_data)\r\n+    boottime_us = _test_microvm_boottime(test_microvm_with_boottime_timer.log_data)\r\n     print(\"Boot time with no network is: \" + str(boottime_us) + \" us\")\r\n\r\n\r\n def test_boottime_with_network(\r\n-        test_microvm_with_boottime,\r\n+        test_microvm_with_boottime_timer,\r\n         network_config\r\n ):\r\n     \"\"\"Check guest boottime of microvm with network.\"\"\"\r\n-    _tap = _configure_vm(test_microvm_with_boottime, {\r\n+    _tap = _configure_vm(test_microvm_with_boottime_timer, {\r\n         \"config\": network_config, \"iface_id\": \"1\"\r\n     })\r\n     time.sleep(0.4)\r\n-    boottime_us = _test_microvm_boottime(test_microvm_with_boottime.log_data)\r\n+    boottime_us = _test_microvm_boottime(test_microvm_with_boottime_timer.log_data)\r\n     print(\"Boot time with network configured is: \" + str(boottime_us) + \" us\")\r\n\r\n\r\n def test_initrd_boottime(\r\n-        test_microvm_with_initrd):\r\n+        test_microvm_with_initrd_timer):\r\n     \"\"\"Check guest boottime of microvm with initrd.\"\"\"\r\n-    _tap = _configure_vm(test_microvm_with_initrd, initrd=True)\r\n+    _tap = _configure_vm(test_microvm_with_initrd_timer, initrd=True)\r\n     time.sleep(0.8)\r\n     boottime_us = _test_microvm_boottime(\r\n-        test_microvm_with_initrd.log_data, max_time_us=INITRD_BOOT_TIME_US)\r\n+        test_microvm_with_initrd_timer.log_data, max_time_us=INITRD_BOOT_TIME_US)\r\n     print(\"Boot time with initrd is: \" + str(boottime_us) + \" us\")\r\n``` @tnotw everything is passed now. \r\nThank you for this awesome contribution!  Signed-off-by: Andrei Gorneanu <gorneanu@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\nRelated to #1808 \r\n\r\n## Description of Changes\r\n\r\nThis tests the latency of a Firecracker microvm by pinging the host. \r\n\r\n- added a goldfile which defines how the assertion should be done. It contains a mean value and a possible deviation from it.\r\n- the ping command sends 500 requests with an interval of 0.2 seconds between them.\r\n\r\nThe tests won't work without a specialized rootfs which has iputils-ping installed for both x86 and aarch64.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n > @gc-plp @iulianbarbu @raduiliescu This PR looks good and the functionality useful, do we want to merge it?\r\n\r\nIMO we should merge it after performance framework/ci changes are done. Close in favor of #2051 .    ## Reason for This PR\r\n\r\nAddresses #1751 \r\n\r\n## Description of Changes\r\n\r\nThis PR changes some of the internal mechanisms in the vsock device, that were causing the problems described in #1751.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n > Is the issue fixed by this PR ?\r\n\r\nHi Andrei. I added more details in the comment [here](https://github.com/firecracker-microvm/firecracker/issues/1751#issuecomment-630281988) Since this looks like a corner case that wasn't handle, should we add a regression test here as well? Yes, we want to have regression tests, but I was thinking that we could add them in a separate PR.\r\n\r\nEdit: opened #1953  Regression tests are typically merged in the same PR and the reviewers should check that the regression test fails before the fix and passes after the fix. @andreeaflorescu, unit tests added, please review.  After reading the documentation, the following wasn't quite clear to me:\r\n\r\nIs it possible to set up a block of shared memory between the host and a guest, or between two guests? I've read that the virtio implementation uses MMIO, but don't see a way to use MMIO myself.\r\n\r\nIf this isn't possible, is this something Firecracker could support in the future?\r\n\r\nI'd like to resort to shared memory for 1Gbps+ communication between environments, where networking might not be fast enough. @timvisee \r\n\r\nThere is no API for doing this, but it can probably be done from the code. Firecracker uses the `rust-vmm/vm-memory` crate. You can translate a guest address into a host address using [get_host_address()](https://github.com/rust-vmm/vm-memory/blob/257d7c76ec4072e7cc6d73fce2c4ef38b8975bf3/src/guest_memory.rs#L600). You can take a block of memory, find out the guest address and the host address, and use it as shared memory. Or you can create an additional memory region that will be shared between host and guest (you can take a look on the [from_regions()](https://github.com/rust-vmm/vm-memory/blob/257d7c76ec4072e7cc6d73fce2c4ef38b8975bf3/src/mmap.rs#L445) method).\r\n\r\nIt might also be worth it to take a look on:\r\n[set_kvm_memory_regions()](https://github.com/firecracker-microvm/firecracker/blob/be8b2bae3e6213a020047ad3d2c9ff69eced0e36/src/vmm/src/vstate.rs#L542)\r\n[MmapRegion::build()](https://github.com/rust-vmm/vm-memory/blob/257d7c76ec4072e7cc6d73fce2c4ef38b8975bf3/src/mmap_unix.rs#L130)  ## Reason for This PR\r\n\r\nThe latest cargo-audit used in the Docker images requires Rust >=1.40. The current image still uses Rust 1.39.\r\n\r\nBlocked by #1913\r\n\r\nFixes #1904\r\n\r\n## Description of Changes\r\n\r\nThe Dockerfiles have been changed to use Rust 1.43.1, the latest stable Rust version.\r\n\r\n- [x] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Hi, @timvisee! In order to use Rust 1.43 in the container, the change that you've done is unfortunately not enough, we will still use the old container image this way. For fixing the issue, we need to also publish a new container version (`fcuvm/dev:v15`), if you take a look in `/tools/devtool` you can see that the current version is `fcuvm/dev:v14`. Publishing a new container version requires: building the image and pushing it to Docker Hub for both `x86_64` and `aarch64` (you can see a nice guide example here at[ Publishing a New Version](https://github.com/rust-vmm/rust-vmm-container) section). The pushing part must be done by somebody from our team.\r\n\r\nAlso, after publishing the container image, there will be some `clippy` fixes in our codebase that will need to be done because of the new rust version (and probably some other fixes), so this issue will probably require some time and effort (also, sorry for not being clearer in the issue description, will update it).\r\n\r\nDo you still want to help on this (we can help you with it, but there is absolutely no problem if you don't want as it is not an easy item at all) or on other issue? Generally, the issues that are a good starting point for first-time contributions are marked with: `Contribute: Good First Issue`. Thanks for the explanation. I definitely thought the actual upgrade would be much simpler.\r\n\r\nI'd like to give this a try later today. I only have limited time available for this though. If I can't get it to work I'll leave it open for someone else. @lauralt I've resolved all clippy suggestions and reformatted for Rust 1.43.1 in 234a8f830837d9ed13874105f7ff1b12e5be07d0.\r\n\r\nI think that's all I can do for now. Someone on the Firecracker team needs to publish an updated image before I can continue. I'll update the devtool script afterwards.\r\n\r\nPlease let me know if there's anything else I can do. Thanks, @timvisee! We'll be working today to publish a new container image and then come back here with an update.\r\n\r\nI would like to also remove `musl-tools` from the Dockerfiles, that was needed before for the `backtrace` crate, but we've decided to not use it anymore (see #1841). We'll try to merge #1841 as soon as possible to unblock this PR. Hi @timvisee. I've experimented a bit with the container images that use the `1.43.1` and `1.39.0` rust toolchain versions in order to outline a scenario where we avoid possible CI failures on other PRs that don't have anything to do with updating the rust toolchain.\r\n\r\nAfter running the test suite on both this PR and #1841, it seems that we need to go through a few iterations before merging, mainly due to a few test failures - we should see them once the `v15` container image is used in tests.\r\n\r\nI pushed a new container tag to Docker Hub, that uses rust toolchain `1.43.1`. \r\nYou should find it tagged as `fcuvm/dev:v15`, meaning that in order to run have the CI run the test suite with the updated container image, you only need to update:\r\n```diff\r\ndiff --git a/tools/devtool b/tools/devtool\r\nindex 7a53a267..6297337d 100755\r\n--- a/tools/devtool\r\n+++ b/tools/devtool\r\n@@ -73,7 +73,7 @@\r\n # Development container image (name:tag)\r\n # This should be updated whenever we upgrade the development container.\r\n # (Yet another step on our way to reproducible builds.)\r\n-DEVCTR_IMAGE=\"fcuvm/dev:v14\"\r\n+DEVCTR_IMAGE=\"fcuvm/dev:v15\"\r\n \r\n # Naming things is hard\r\n MY_NAME=\"Firecracker $(basename \"$0\")\"\r\n```\r\n\r\n The binary size test failure should be fixed by merging and rebasing #1841.  \r\n\r\nTo address the python styling failure, I created issue #1913 > The binary size test failure should be fixed by merging and rebasing #1841.\r\n\r\nI've increased the binary size limit for now, based on the reasoning here https://github.com/firecracker-microvm/firecracker/pull/1841#issuecomment-631325379.\r\n\r\nThis PR is now blocked by #1913 It seems there's one issue left to be fixed, judging by the CI status.\r\n\r\nIt shows 'Device/resource busy' on x86_64. I'm not sure what is causing this, and don't believe this showed up when I started working on this PR.\r\n\r\n```log\r\n---- device_manager::persist::tests::test_device_manager_persistence stdout ----\r\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Net(CreateNet(TapOpen(CreateTap(Os { code: 16, kind: Other, message: \"Device or resource busy\" }))))', src/vmm/src/device_manager/persist.rs:450:13\r\n```\r\n\r\nAnyway, I'm not sure how to go about this right now. Does anybody have an idea? Hi @timvisee. \r\nIt looks like one of the unit tests is failing. I'm not sure if it's related to the 1.43.1 upgrade or not, but we will look into this as soon as possible. Also, the buildkite CI [build](https://buildkite.com/firecracker/firecracker-ci-amd/builds/24) for this seems to be stuck. It looks like it's still running. Maybe someone should cancel it to prevent high cost for nothing, I can't do this myself. Great! Will do. @timvisee Can you try to modify, in the test that fails, `host_dev_name: String::from(\"hostname\"),` with this: https://github.com/firecracker-microvm/firecracker/pull/1648/files#diff-c85556c0f0cb1779b6c078834550a61cR316-R322? This error occurred also in that PR because there were more tests that were trying to use the same tap and one of them didn't get the chance to close that tap in time.\r\n\r\nAlso, would be super nice to update with that fix in the entire `vmm` crate in the test modules to avoid possible future problems like this :(.\r\n\r\nIt's interesting though to check why with the previous rust version, that test didn't fail.\r\n\r\n @lauralt It seems it didn't solve the error: https://firecracker-pr.s3.amazonaws.com/pr-logs/x86_64/01908/timvisee-firecracker-e006a37.log.html @ioanachirca No difference, sadly. > @lauralt It seems it didn't solve the error: https://firecracker-pr.s3.amazonaws.com/pr-logs/x86_64/01908/timvisee-firecracker-e006a37.log.html\r\n\r\nThe CI doesn't trigger anymore at `push -f` (probably because of something that we've done), the log that you sent is an older one. I retriggered manually the CI for `x86_64`for your PR but it looks like is still hanging. For #1907 the CI is working, we'll come with an update here. > The CI doesn't trigger anymore at `push -f` (probably because of something that we've done), the log that you sent is an older one. I retriggered manually the CI for `x86_64`for your PR but it looks like is still hanging. For #1907 the CI is working, we'll come with an update here.\r\n\r\nPerfect. Let me know if I should remove the last commit (https://github.com/firecracker-microvm/firecracker/pull/1908/commits/1cfc7be7a2e9ce69af6e89092210dcf09d7cd1db) from this PR, as this might make it obsolete. The `x86_64` job now succeeds. I've rebased on the latest master, and cleaned up the commits. > That's great! One more nit: could you also reword the commit messages in order to keep the [50/72 rule](https://www.midori-global.com/blog/2018/04/02/git-50-72-rule) ?\r\n\r\nDone. And now it starts failing again. Interesting. Wondering whether this is due to a force push, ~or due to an incorrect squash~.\r\n\r\n~Could a maintainer force a rebuild to confirm it succeeds?~ Just a wild guess, but it seems that now the error is:\r\n\r\n> VsockUnixBackend(UnixBind(Os { code: 98, kind: AddrInUse, message: \"Address already in use\" }))\r\n\r\nIt means that the host unix domain socket is still opened inside the test, while the device manager tries to restore the expected device manager, using the same uds path, which lies opened inside original device manager (which in its turn holds a reference to the vsock device, represented by the already opened uds). Let me know if it makes sense. That does make sense. I added [this](https://github.com/firecracker-microvm/firecracker/pull/1908#issuecomment-633515360) suggestion again in a1bdca25623117d530b00c4294faa79bcc5731a7 for now.\r\n\r\nEdit: Still fails. I don't understand. It succeeded an hour ago with the same codebase. I think it is more to this, than it seems. That workaround wouldn't work anymore. Even if the uds file is apparently removed from the filesystem, it still lies in the filesystem because of the opened file descriptor from the original device manager vsock device. Another wild guess, but to make it work, I think we would have to close the vsock uds (breaking the device, which is not really a problem, because it is not used) and then do the restore. What do you think? @iulianbarbu My understanding on this topic is lacking. Someone else should take a look at it. Just one more nit. Please sign-off every commit: `git commit --amend -s`.\r\nAll seems good. I'll approve once you integrate this feedback. Please also update coverage on AMD. I've lowered it by the same amount, see: https://github.com/firecracker-microvm/firecracker/pull/1908/commits/fcb38bd245eab4d9159daaa24652cdeae59937b1#diff-49bb55812e565341f0e92d70ff51b302R20-R27 > We should still check where the increase in binary size comes from and if we can lower it.\r\n\r\nOh, right. I think it would help if we would compare the dependencies of the project now, with the previous rust version. To do this, we can use [cargo-bloat](https://docs.rs/crate/cargo-bloat/0.5.0). > We should still check where the increase in binary size comes from and if we can lower it.\r\n\r\n@ioanachirca Is this something that can be done in a separate issue/PR? This PR didn't introduce significant code changes. > We can see that the binary file size increased from 2.8MiB to 3.0MiB, so setting the limit to 3.5MiB is too high.\r\n\r\nI think the _target_ should be the current size and the _limit_ should be +10% or +15%.\r\n\r\n> A rather big difference comes from vmm <vmm::vstate::VcpuState as versionize::Versionize>::serialize which doubled from 19KiB to 41.6KiB.\r\n\r\nWe should open an issue for this and investigate (but not block this PR).\r\n\r\n> _ZN9libunwind10CFI_ParserINS_17LocalAddressSpaceEE17parseInstructionsERS1_mmRKNS2_8CIE_InfoEmRPNS2_20PrologIn... (libunwind) increased from 8.4KiB to 18.8KiB\r\n\r\nI believe this will go away altogether with #1841  @ioanachirca Sure, what limit(s) should I choose though?\r\n\r\nThis is what I came up with based on the last CI results:\r\n\r\n```python\r\nFC_BINARY_SIZE_TARGET = 3124000 if MACHINE == \"x86_64\" else 3349336\r\nFC_BINARY_SIZE_LIMIT = 3300000 if MACHINE == \"x86_64\" else 3500000\r\n``` @ioanachirca I've just pushed these new limits. This should be all then. It looks like this AMD branch isn't working:\r\n\r\n```python\r\nif \"AMD\" in platform.processor():\r\n    COVERAGE_TARGET_PCT = 84.35\r\n```\r\n\r\nhttps://github.com/firecracker-microvm/firecracker/pull/1908/commits/2da434bda0a19418ec7fca33cb177d199d952008#diff-49bb55812e565341f0e92d70ff51b302R26-R27\r\n\r\nThe `.platform()` function seems flaky for CPU vendor detection: https://stackoverflow.com/a/4842467/1000145  ## Reason for This PR\r\n\r\nThe script in the getting started guide supposed to let to know the user whether firecracker would run on their machine or not, is broken when checking the kernel version when using Zsh.\r\n\r\n## Description of Changes\r\n\r\nFixed the arithmetic and evaluation expression.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [X] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [X] The description of changes is clear and encompassing.\r\n- [X] Any required documentation changes (code and docs) are included in this PR.\r\n- [X] Any newly added `unsafe` code is properly documented.\r\n- [X] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [X] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n > It does say that it is a bash script  I think a solution that keeps compatibility with more shells is to add this line at the beginning of the script: `#!/usr/bin/env bash`, what do you think?\r\n\r\nIt will most likely solve the issue but, I think it would make the script get bigger and hardly readable. I put the script into a separate file _(inside /tools/)_ and just execute it by pulling it with curl and passing it to bash. Hi @Mehigh17,\r\n\r\nSimplifying the Getting Started guide is a good idea, but I just took a closer look at the [devtool](https://github.com/firecracker-microvm/firecracker/blob/master/tools/devtool) script and it looks like [line 837](https://github.com/firecracker-microvm/firecracker/blob/master/tools/devtool#L837) already contains a compatibility checker.\r\n\r\nI recommend that you take a look at what devtool implements and if it does not check functionality that the current Getting Started guide contains, you can add it.\r\n\r\nEventually, the Getting Started guide should point to the `devtool` script. > Hi @Mehigh17,\r\n> \r\n> Simplifying the Getting Started guide is a good idea, but I just took a closer look at the [devtool](https://github.com/firecracker-microvm/firecracker/blob/master/tools/devtool) script and it looks like [line 837](https://github.com/firecracker-microvm/firecracker/blob/master/tools/devtool#L837) already contains a compatibility checker.\r\n> \r\n> I recommend that you take a look at what devtool implements and if it does not check functionality that the current Getting Started guide contains, you can add it.\r\n> \r\n> Eventually, the Getting Started guide should point to the `devtool` script.\r\n\r\nIndeed I think it's much better to point to that script to have a more consistent check than having two scripts where one might pass and the other fail. I updated the documentation and removed the separate script I've created before.  ## Reason for This PR\r\n\r\nFixes #1852 \r\n\r\n## Description of Changes\r\n\r\nAdded a high level documentation for the snapshotting\r\nfunctionality that mostly focuses on the API.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n   > > nit: I think the commits could be squashed since the new results are obtained I suppose for the new sample size.\r\n> \r\n> One changes code, the other changes docs. I think they need to be reviewed separately.\r\n\r\nThen that code change should be somehow documented (i.e. explain a bit in the commit message why you did the sample size change, even if for us it may seem obvious).  I'm sorry for the collision. I really liked your idea about using BTreeMap so I incorporated it in my commit. It made my code much simpler.\r\nhttps://github.com/firecracker-microvm/firecracker/pull/1861/commits/8324838b267ea320d6a5c1299a3c8483b139cf9f Hi, @edigaryev! The coverage should be indeed updated with the new values, I suggest you to wait for the CI to finish in order to see also the coverage value for AMD.\r\nAlso, please can you squash your commits into a single one? There is no need to have a separate commit for minor changes like the `ArgVals` instantiation update or other small changes that we requested in review.\r\nIt would be awesome if you could adjust your commit title to follow the [50/72 commit rule](https://www.midori-global.com/blog/2018/04/02/git-50-72-rule). > > Also, please can you squash your commits into a single one? There is no need to have a separate commit for minor changes like the `ArgVals` instantiation update or other small changes that we requested in review.\r\n> \r\n> Squashed into [1847636](https://github.com/firecracker-microvm/firecracker/commit/184763678f46c5dd6d33e82ea33efad694d84c42).\r\n> \r\n> > It would be awesome if you could adjust your commit title to follow the [50/72 commit rule](https://www.midori-global.com/blog/2018/04/02/git-50-72-rule).\r\n> \r\n> Applied 50/72 to [1847636](https://github.com/firecracker-microvm/firecracker/commit/184763678f46c5dd6d33e82ea33efad694d84c42).\r\n> \r\n> I was initially trying to replicate the convention from `git log`, but that rule wasn't that easy to infer.\r\n> \r\n> Perhaps the [Contribution Quality Standards](https://github.com/firecracker-microvm/firecracker/blob/master/CONTRIBUTING.md#contribution-quality-standards) can be updated to reflect this practice?\r\n\r\nYou mean we should add the 50/72 rule explicitly there? It is indeed pretty hidden [here](https://github.com/erlang/otp/wiki/writing-good-commit-messages). > > You mean we should add the 50/72 rule explicitly there? It is indeed pretty hidden [here](https://github.com/erlang/otp/wiki/writing-good-commit-messages).\r\n> \r\n> Thanks, totally missed that.\r\n> \r\n> Also, the Buildkite runner seems to be stuck on `git clone` stage with the \"permission denied\" error, no matter how many times it gets restarted: https://buildkite.com/firecracker/firecracker-ci-amd/builds/120\r\n\r\nWill fix it soon. @edigaryev Can you please update AMD coverage too and we will re-approve after that?  Once there's a release of https://github.com/rust-vmm/linux-loader/ on crates.io, replace the `kernel` crate with it. Some bits of the `arch` crate will also be replace-able. Blocked by https://github.com/rust-vmm/linux-loader/issues/18     Two new tests needed to close this issue:\r\n- Restore snapshot artifacts\r\n- Create snapshots with binary firecracker artifact and restore with current Firecracker build\r\n  LGTM :+1:  Awesome! It should come with an update of the container as well in which we do not install musl-tools any more. > Awesome! It should come with an update of the container as well in which we do not install musl-tools any more.\r\n\r\nYup, I'll come with an update soon. We still need to update the container I think. Our current Dockerfile can not be used anymore for building a container image because it uses rust version `1.39` and the latest cargo audit version requires rust `1.40` (see [Requirements](https://github.com/RustSec/cargo-audit#requirements)). I will open an issue for updating to the latest rust version. Will merge this into #1908  > Will merge this into #1908\r\n\r\n@lauralt Before I do, I noticed you have a `backtrace_remove` and `backtrace_remove_2` branch. Can I merge either of the two into #1908 to resolve https://github.com/firecracker-microvm/firecracker/pull/1908#issuecomment-631146271? @timvisee the second one was used for some experiments, but contains pretty much the same changes. Anyway, if you want to try some things with this branch I suggest you make a separate branch, but wait a bit, I'll try to explain as clear as possible the whole situation, sorry in advance if I won't succeed :(.\r\n\r\nThe `backtrace` dependency required `musl-tools` to be installed and that's why it appears in the Dockerfile. This PR doesn't necessary require `musl-tools` dependency to be removed, but as long as it won't be used for anything, it would've been nice to have a new container image without it.\r\nThe `Rust update` issue was noticed when I tried to build this image. I also noticed that without removing `musl-tools` that Dockerfile isn't working anymore and the reason behind that is the one mentioned in the issue (current rust version requirement for cargo audit).\r\n\r\nYesterday, I was thinking that, to kill 2 birds with one stone, we could merge this backtrace PR first (without the container update) and then in your PR, update the Dockerfile with both rust update and `musl-tools` removal. But thinking more about this, the right way to do things would be to keep these PRs completely separate, i.e.: merge your PR with just the rust update and `v15` container image, and then this PR with a new container image (`v16` let's say) that doesn't contain `musl-tools`.\r\n\r\nThe fact that the binary size test is failing in your PR doesn't have anything to do with #1841. From what I know, it is expected the binary size to increase with a rust update and there were also some snapshotting related PRs merged lately which also increased the binary (#1907 also updates the binary size limit, if you take a look). Yesterday, I cherry-picked your `clippy` commit on top of this branch and with a container image that uses `Rust 1.43` and the binary size test didn't fail, probably because `backtrace` is a \"big\" dependency.\r\nAnyway, it's totally fine if you update the binary size limit in your PR (and hopefully, when I'll update this PR, the binary size will decrease).\r\n\r\nPlease, let me know if something is not clear.\r\n I understand, keeping it separate seems like a good idea. I'll update the binary size limit then. It may be wise to open an issue to revert this (if needed) so we won't forget. > My proposal\r\n> \r\n> > Our current Dockerfile can not be used anymore for building a container image because it uses rust version `1.39` and the latest cargo audit version requires rust `1.40` (see [Requirements](https://github.com/RustSec/cargo-audit#requirements)). I will open an issue for updating to the latest rust version.\r\n> \r\n> My proposal here is to unblock this PR by leaving the same version of rust (i.e 1.39) and cargo audit (0.10.0) in the docker and only focusing on removing backtrace. Later, when the update to rust 1.43 is done we can upgrade both of them simultaneously. See my comment in the code for how we can install a specific version of with `cargo install`.\r\n\r\nI don't personally like this approach as it looks like a workaround :( and I'd like to keep the dependencies at the latest stable version when updating the container image. The fact that we're using such old rust version should be somehow of a priority now, especially since we're exposing at this moment an invalid Dockerfile in our repo.\r\nI think the right flow here would be the rust update first and then this PR, but again it's just my opinion. @lauralt I also like the approach your mentioning. There is one tiny disadvantages which is we will have to publish 2 container versions: one for updating rust and one for removing musl-tools. Nevertheless, I think the advantages outweigh the disadvantages. @aghecenco, @andreeaflorescu, @dianpopa I updated with a new container image, please take another look!  Hi @jabedude,\r\n\r\nIt's great if you intend on implementing this feature :)\r\nOne requirement would be that all the declared metrics that you've added in `metrics.rs` should be implemented.\r\n\r\nThanks! Sounds good! I'll work on the reviews over the next week :) Of course you can, please feel free to contribute to the PR!   Fixed by #1837.  The integration tests that exercise full VMM functionalities introduced by #1791 issue a `vmm.stop(0)` to gracefully stop the vcpu loops. This exits the integration test process with a success code and interferes with `cargo kcov` and `cargo test` normal functioning. This is why new tests that do this do not account for test coverage.\r\n\r\nThe `vmm.stop()` can be removed because the process exits anyway **but**\r\n1. the vcpu threads will not exit gracefully\r\n1. this plus the CPU pinning `kcov` does to serialize instructions for coverage computation breaks the VMM seccomp integration test.\r\n\r\nWe should:\r\n1. remove the `vmm.stop()` in the Rust VMM integ tests; let the test harness (`cargo`) control how the test process exits\r\n1. figure out how to gracefully stop the vcpu threads before letting `cargo` force-end the test process, bringing them down or panicking them;. the cleanest way is to have the test guest kernel exit and let them go through the `exited` state\r\n1. figure out why the `seccomp` integ test doesn't work The integration tests don't compile the `#[cfg(test)]`-marked code. The VMM crate it uses is exactly the same as for release. We could also whitelist sysprocmask and let the vcpu threads exit cleanly. This isn't a seccomp issue in the unit tests. The problem with the vmm exiting is that it takes down the integration test process with it. Also, there's no way to force the vcpus to exit but leave the process running using just the public facing programmatic api. Another fun thing I discovered is that the seccomp test I added in the new integration tests is broken. The signal handler never gets called in the Rust integ tests when running under kcov.\r\n* `cargo test` -> integ tests are run, signal handler is called, seccomp test works\r\n* `cargo kcov` -> integ tests are run, signal handler **not** called, seccomp test broken\r\n We've hit the kcov+signal thing before with the unit tests, which is why the unit tests don't assert on the signal handler having been called when running under kcov. https://github.com/firecracker-microvm/firecracker/blob/15b3fe3496ad95d6ee59943622bf01517068fa9a/src/vmm/src/signal_handler.rs#L201\r\n\r\nI will let the signal + kcov issue go for now and focus on the other 2. As for the corresponding rust integ test, I'll try to tweak it same as the unit test above, and if it doesn't work I'll remove it (we already have coverage on seccomp).\r\n\r\nAs for the other issues: instead of `vmm.stop()`, we can `sleep` a bit to give the guest kernel(s) a chance to run and and exit. The elf we use to test right now says hello world then exits. We can sleep a bit in the integ test, give the vcpu threads their chance to run the state machine, then end the test. It won't always do the trick and sometimes the test (and hence the vmm thread) will end first, potentially causing the vcpu threads to panic. But as long as `cargo test` and `cargo kcov` aren't affected, we shouldn't care.\r\n\r\nThe elf I built to test the dirty bitmap runs forever and keeps dirtying. I'll rebuild it so that it dies after an adequate amount of time.\r\n\r\n > Originally, `VcpuEvents` also contained an `Exit` command so the `vmm` can request `vcpus` to cleanly exit. We removed it as it wasn't used, but I think we should bring it back. It would be a clean flow. In that case, however this\r\n> \r\n> > We could also whitelist sysprocmask and let the vcpu threads exit cleanly.\r\n> \r\n> would also be needed.\r\n\r\nThat's what I was basically proposing, Adi put in better words :)) I like this approach better than what I suggested (relying on empirical `sleep`s here and there). I'll\r\n1. revive the `VcpuEvents::Exit` enum variant and adjust filters accordingly\r\n1. port the seccomp/kcov workaround from the unit tests to the integration tests as it manifests the same way\r\n1. dig some more into kcov and why it hates signal handlers so much  Proposed mechanism to address #1704.  Add a new test to ensure that every rust source file that contains the rust test attribute,  also contains the string \"mod tests {\".  \r\n\r\nTest should break the CI run until after #1832 is merged up,  where the failure error should list the non-conforming files. \r\n\r\n## Reason for This PR\r\n\r\n`[Author TODO: add issue # or explain reasoning.]`\r\n\r\n## Description of Changes\r\n\r\n`[Author TODO: add description of changes.]`\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n What will happen with this test for source files that have `cfg[test]` in it but do not have any unit test (i.e no test module) declared inside that source file? I think it would still fail, and flag the file.  Wouldn't that be ok because any tests not in a module called \"mod tests\" would break the kcov coverage report anyway?  So you might want that to be flagged?  \r\n\r\nBut yes, this test is very specific to how the current codebase looks to me,  rather than accommodating any possible coding variations.  Appreciate that that might not be the requirement. > I think it would still fail, and flag the file. Wouldn't that be ok because any tests not in a module called \"mod tests\" would break the kcov coverage report anyway? So you might want that to be flagged?\r\n> \r\n> But yes, this test is very specific to how the current codebase looks to me, rather than accommodating any possible coding variations. Appreciate that that might not be the requirement.\r\n\r\nOk, so this PR is tying the presence of a `cfg[test]` anywhere in the source file with the presence of a test module inside the same file. As far as my concern, this seems like a logical dependency. One would not bother to put `cfg[test]` in a source file unless one were trying to write unit tests for that code, right?\r\nThe PR looks good to me otherwise! Waiting for #1832 to get merged. Yeah,  that's what I was going for.  I think the logic holds, but I'm not certain how future proof it is.   I guess it's pretty disposable if the shape of the tests change in any way.  Ok,  so if this proposed test had been run against the commit you mention,  it would have flagged up the file containing `#[cfg(test)]` without the corresponding `mod tests {`. But might that be correct from a kcov perspective?  i.e. code flagged `#[cfg(test)]` in the codebase that isn't being excluded from the kcov report?  Appreciate it's not desirable from a code perspective. \r\n\r\nIf it did flag, adjusting the `--exclude-region` option in [kcov](https://manpages.debian.org/unstable/kcov/kcov.1.en.html) to include regions marked `#[cfg(test)]` might be possible?   Something like: \r\n```\r\n--exclude-region 'mod tests {', #[cfg(test)]:#[cfg(not(test))]\r\n```\r\nThen adjusting the proposed test here to accommodate both scenarios,  i.e. all files containing `#[cfg(test)]` would have to either contain a `mod test {`  string or a closing `#[cfg(not(test))]` \r\n\r\nOr maybe having the exclusion tied to `mod tests {` is actually imprecise and really the problem.  Should it really be getting tied to `#[cfg(test)]` exclusively?  Then we don't care about module name typos like `mod test {`.   Not sure really, I guess it is like this for a reason.\r\n\r\nBut yeah, back to the drawing board, I think. \r\n   > Ok, so if this proposed test had been run against the commit you mention, it would have flagged up the file containing `#[cfg(test)]` without the corresponding `mod tests {`. But might that be correct from a kcov perspective? i.e. code flagged `#[cfg(test)]` in the codebase that isn't being excluded from the kcov report? Appreciate it's not desirable from a code perspective.\r\n> \r\nFor the aforementioned situation, no because kcov excludes in its report the imports and `use`s region (This is what I was talking about: https://github.com/lauralt/firecracker/blob/f13717a4e3d928a64d313263e7bca2e9fc77a218/src/logger/src/lib.rs#L8). But your point is valid when it comes to functions that are marked with `#[cfg(test)]` and are not defined in `mod tests`. We are trying to avoid these situations, but sometimes people prefer to define them there because it probably seems easier/nicer to import them from there than from a tests module. I took a look in our codebase and it seems like we have a few places with test functions that are not defined in a test module and can be easily moved, I'll open an issue for that.\r\n\r\n> If it did flag, adjusting the `--exclude-region` option in [kcov](https://manpages.debian.org/unstable/kcov/kcov.1.en.html) to include regions marked `#[cfg(test)]` might be possible? Something like:\r\n> \r\n> ```\r\n> --exclude-region 'mod tests {', #[cfg(test)]:#[cfg(not(test))]\r\n> ```\r\n> \r\n> Then adjusting the proposed test here to accommodate both scenarios, i.e. all files containing `#[cfg(test)]` would have to either contain a `mod test {` string or a closing `#[cfg(not(test))]`\r\n> \r\nIt would be really nice to do that but unfortunately we don't usually mark the end of a `#[cfg(test)]` section with a `#[cfg(not(test))]`. As suggested here: https://stackoverflow.com/questions/42440192/how-do-i-exclude-test-functions-from-code-coverage-when-using-kcov, we could enforce people to only add this kind of functions at the end of the non test module. But we can also have `#[cfg(test)]` for some statements or fields, and again, `#[cfg(not(test))]` wouldn't be required. So it looks like we can't add this kind of restriction.\r\n\r\n> Or maybe having the exclusion tied to `mod tests {` is actually imprecise and really the problem. Should it really be getting tied to `#[cfg(test)]` exclusively? Then we don't care about module name typos like `mod test {`. Not sure really, I guess it is like this for a reason.\r\n> \r\nWe could name test modules whatever we want, but then we would lose consistency and it would be pretty weird I guess to have tests in all sorts of modules (also would be hard to tell kcov which sections to exclude).\r\n\r\n> But yeah, back to the drawing board, I think.\r\n\r\nI gave some more thought to this and, at this moment, the cleanest solution seems to be the following:\r\n- search for `mod tests {` only in the files that contain a `#[test]` in them because in the end this is a clear sign that we have tests in that file (as opposed to `#[cfg(test)]`).\r\n- make sure to do this search only in the `src` dirs of crates, not in the `tests` ones because the last ones contain integration tests (which are also marked with `#[test]` attribute) and we shouldn't care about them for the scope of this PR (also kcov excludes these dirs in its report).\r\n\r\nWhat do you think?\r\n Hi @lauralt,  sounds good to me, thank you very much for the clarification and explanation.  \r\n\r\nSo I've amended as follows:  \r\n\r\n```\r\n@ -49,11 +51,13 @@ def test_ensure_mod_tests():\r\n         '<(grep --extended-regexp '\r\n         '--files-with-matches '\r\n         '--recursive '\r\n-        '\\'^#\\\\[cfg\\\\(test\\\\)\\\\]$\\' ../src) '\r\n+        '--exclude-dir=src/*_gen/* ' \r\n+        '\\'#\\\\[test\\\\]\\' ../src/*/src) '\r\n         '<(grep '\r\n         '--files-with-matches '\r\n         '--recursive '\r\n-        '\\'mod tests {\\' ../src)\"'\r\n+        '--exclude-dir=src/*_gen/* '\r\n+        '\\'mod tests {\\' ../src/*/src)\"'\r\n```\r\nWith the additional step of excluding the generated files,  which I assume we don't want flagged.\r\n\r\nThe only file that is being flagged after these changes is this one:  `src/devices/src/virtio/vsock/mod.rs` which appears to have a \"mod tests {\" but no tests defined.  I'm guessing we shouldn't really be flagging this, and can probably remove it by anchoring the 'mod tests {' pattern to the start of line.  But it's beyond my rust skills to say definitively.    \r\n > Hi @lauralt, sounds good to me, thank you very much for the clarification and explanation.\r\n> \r\n> So I've amended as follows:\r\n> \r\n> ```\r\n> @ -49,11 +51,13 @@ def test_ensure_mod_tests():\r\n>          '<(grep --extended-regexp '\r\n>          '--files-with-matches '\r\n>          '--recursive '\r\n> -        '\\'^#\\\\[cfg\\\\(test\\\\)\\\\]$\\' ../src) '\r\n> +        '--exclude-dir=src/*_gen/* ' \r\n> +        '\\'#\\\\[test\\\\]\\' ../src/*/src) '\r\n>          '<(grep '\r\n>          '--files-with-matches '\r\n>          '--recursive '\r\n> -        '\\'mod tests {\\' ../src)\"'\r\n> +        '--exclude-dir=src/*_gen/* '\r\n> +        '\\'mod tests {\\' ../src/*/src)\"'\r\n> ```\r\n> \r\n> With the additional step of excluding the generated files, which I assume we don't want flagged.\r\n> \r\n> The only file that is being flagged after these changes is this one: `src/devices/src/virtio/vsock/mod.rs` which appears to have a \"mod tests {\" but no tests defined. I'm guessing we shouldn't really be flagging this, and can probably remove it by anchoring the 'mod tests {' pattern to the start of line. But it's beyond my rust skills to say definitively.\r\n\r\nHmm, I kind of hoped that we won't / don't have `mod tests {` without unit tests :( :(. But we should allow that kind of \"special\" test modules, i.e. helpers for the modules that actually contain tests. If you're asking me, that module could be renamed to `test_helper` or something like that without any big concern (except the fact that kcov won't exclude it, but it will be an isolated case anyway).\r\nThat's why I proposed to search for `mod tests {` only in the files where `#[test]` is present; this way you won't even care about the file that you mentioned. I think this PR should stick to just one purpose: check that unit tests are in a `mod tests {`, don't check also that a `mod tests {` has at least one unit test. From the `kcov` perspective I agree it's not the best thing to have a `mod <name_different_than_tests> {` marked with `#[cfg(test)]` and which doesn't contain any test, not excluded from the report, but I assume the number of this kind of modules will be very very small).\r\nThe solution that you propose is indeed elegant, but it kind of does 2 things at a time. I would like the test in the end to tell me something like this if it fails: `you have unit test(s) in a module that is not called tests. Please check blah blah file.`. Apologies, a few, ahem, reading and comprehension challenges at my end.  :-)\r\n\r\nI've had another shot, hopefully it's closer to what you had in mind.   Thanks very much @lauralt for your help, time and patience,  much appreciated.   ## Reason for This PR\r\nSolve issue #1705 \r\n\r\n## Description of Changes\r\nSet the mod block to `mod tests` instead of `mod test` in the `cpuid` crate. This will make the test code in `cpuid` crate get excluded by kcov. If it's not excluded kcov counts the test code as code and then the test coverage result gets messed up.\r\n\r\n- [x] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n @lauralt, Sure. I'll do that shortly. I had to amend the commit then force push it to update the value of `COVERAGE_TARGET_PCT` to a suitable value to pass the `test_coverage` integration test without committing twice for the same thing. I don't know if this is the best git approach to do. I'd appreciate if someone proposes a better approach. the `test_coverage` now passes locally, at least I can now hope it passes on the CI test\r\n```bash\r\n===================================================================================== test session starts ====================================================================================$\r\nplatform linux -- Python 3.6.9, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\ncachedir: ../build/pytest_cache\r\nrootdir: /firecracker/tests, inifile: pytest.ini\r\nplugins: timeout-1.3.4\r\ntimeout: 300.0s\r\ntimeout method: signal\r\ntimeout func_only: False\r\ncollected 1 item\r\n\r\n[ unsafe | 1 tests | 1 worker(s) ]\r\n\r\n\r\n  PASSED    integration_tests/build/test_coverage.py::test_coverage\r\n\r\n================================================================================ 1 passed in 135.26s (0:02:15) ===============================================================================$\r\n\r\n``` That makes sense. I just squashed the commits and force pushed the changes. Okay. So should I change the commit message to omit the part about the coverage target value being decreased? Now the test `test_rx_rate_limiting` fails\r\n```bash\r\n=================================== FAILURES ===================================\r\n____________________ test_rx_rate_limiting[ubuntu_with_ssh] ____________________\r\nintegration_tests/functional/test_rate_limiter.py:152: in test_rx_rate_limiting\r\n    _check_rx_rate_limit_patch(test_microvm, guest_ips)\r\nintegration_tests/functional/test_rate_limiter.py:377: in _check_rx_rate_limit_patch\r\n    _check_rx_bandwidth(test_microvm, guest_ips[1], bandwidth_kb)\r\nintegration_tests/functional/test_rate_limiter.py:426: in _check_rx_bandwidth\r\n    assert diff_pc < MAX_BYTES_DIFF_PERCENTAGE\r\nE   assert 10.6796875 < 10\r\n```\r\nI'll check it out > \r\n> \r\n> Now the test `test_rx_rate_limiting` fails\r\n> \r\n> ```shell\r\n> =================================== FAILURES ===================================\r\n> ____________________ test_rx_rate_limiting[ubuntu_with_ssh] ____________________\r\n> integration_tests/functional/test_rate_limiter.py:152: in test_rx_rate_limiting\r\n>     _check_rx_rate_limit_patch(test_microvm, guest_ips)\r\n> integration_tests/functional/test_rate_limiter.py:377: in _check_rx_rate_limit_patch\r\n>     _check_rx_bandwidth(test_microvm, guest_ips[1], bandwidth_kb)\r\n> integration_tests/functional/test_rate_limiter.py:426: in _check_rx_bandwidth\r\n>     assert diff_pc < MAX_BYTES_DIFF_PERCENTAGE\r\n> E   assert 10.6796875 < 10\r\n> ```\r\n> \r\n> I'll check it out\r\n\r\nHave you updated the branch before the push? A tentative fix was put in yesterday.  Closing this since we decided to allow partial writes for MMIO devices config space.  ## Reason for This PR\r\n\r\nThe current PR refactors arch/aarch64/src/regs.rs and adds changes for a smoother path towards saving and restoring vcpus on aarch64.\r\n\r\n## Description of Changes\r\n\r\nSee #1826\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n  @raduiliescu , sorry, had some rust clippy issues. Had to force push again. @sandreim , please take a look again. Fixes #1819.  Fixed by #1820 .  Not completely done yet.\r\n\r\nFor example:\r\n\r\n-  `src/api_server/src/lib.rs::test_bind_and_run()`\r\n- `src/vmm/src/vmm_config/vsock.rs::TempSockFile` - this can be reworked to the same simple model. Hi @shioyama18, I've reopened this as your PR didn't address all occurrences where we can apply this model. Let us know if you want to continue with these improvements. Hi @acatangiu , I would like to keep working on this issue, but I have two questions:\r\n1. Should I update doc tests too? (https://github.com/firecracker-microvm/firecracker/blob/master/src/micro_http/src/server.rs#L219-L220)\r\nIn my opinion, `TempFile` should not be used in usage example so I was going to leave it as it is.\r\n\r\n2. For `src/api_server/src/lib.rs::test_bind_and_run()`, current test works because `&'static str` implements `Copy` trait. When I replace the `path_to_socket` with `TempFile`, `path_to_socket` is moved to closure but it is referred later by current thread to read and write to socket.\r\n  - moved: https://github.com/firecracker-microvm/firecracker/blob/master/src/api_server/src/lib.rs#L591\r\n  - referenced: https://github.com/firecracker-microvm/firecracker/blob/master/src/api_server/src/lib.rs#L602\r\nDo you have good idea to work around this issue? > Should I update doc tests too?\r\n\r\nIt'd be useful so doc tests don't leave the unix-sock hanging around when they're done.\r\nOn the other hand, adding `TempFile` logic in doc examples will hurt readability, so I think we can stick with the current doc examples.\r\n\r\n> When I replace the path_to_socket with TempFile, path_to_socket is moved to closure but it is referred later by current thread to read and write to socket.\r\n\r\nIndeed, you need to have each thread owns its object. You can do so by working with owned `String`s instead of `&str` references. Something like:\r\n\r\n```rust\r\nlet mut tmp_socket = TempFile::new().unwrap();\r\ntmp_socket.remove().unwrap();\r\nlet path_to_socket = tmp_socket.as_path().to_str().unwrap().to_owned();\r\nlet api_thread_path_to_socket = path_to_socket.clone();\r\n``` > It'd be useful so doc tests don't leave the unix-sock hanging around when they're done.\r\n> On the other hand, adding TempFile logic in doc examples will hurt readability, so I think we can > stick with the current doc examples.\r\n\r\nOkay\r\n\r\n> ```rust\r\n> let mut tmp_socket = TempFile::new().unwrap();\r\n> tmp_socket.remove().unwrap();\r\n> let path_to_socket = tmp_socket.as_path().to_str().unwrap().to_owned();\r\n>let api_thread_path_to_socket = path_to_socket.clone();\r\n> ```\r\n\r\nThanks for the example. I'll create another PR after I update `src/vmm/src/vmm_config/vsock.rs::TempSockFile`. Ideally do all of them in a single PR - different commits. Multiple PRs just adds extra load on reviewers, CI, and the merging process. > Ideally do all of them in a single PR - different commits. Multiple PRs just adds extra load on\r\n> reviewers, CI, and the merging process.\r\n\r\nSorry about that. I'll create single PR from next fix.  Why do we need to serialize `VcpuResponse`?  Fixed by #1821.  Fixed by #1873.  ## Reason for This PR\r\n\r\nMake the network setup example documentation a little bit more useful, by adding instructions for using a config file, and supporting DNS.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n  We should definitely check if we can relax the restrictions on the `Versionize` interface so that clone is not needed.\r\n\r\nAt the same time, having `FamStruct` clone implemented in such a way that it is only \"cloning\" the number of entries and the actual entries doesn't seem correct to me. Can you also open an issue in vmm-sys-util so that we can fix it (or remove the autogenerated clone)?    Need also to modify the MMDS documentation and mention that The ipv4_address value must be a valid link-local IPv4 address. > \r\n> \r\n> > Need also to modify the MMDS documentation and mention that The ipv4_address value must be a valid link-local IPv4 address.\r\n> \r\n> Related to this aspect, I've opened #1800, with MMDS user guide and MMDS configuration API complete description inside the firecracker swagger file. I guess we can have this PR merged without documentation, and keep track of the MMDS docs in that opened PR. I've opened an issue also for the MMDS docs update (#1801).\r\n\r\nOk. Is fine like that. > > Need also to modify the MMDS documentation and mention that The ipv4_address value must be a valid link-local IPv4 address.\r\n> \r\n> Related to this aspect, I've opened #1800, with MMDS user guide and MMDS configuration API complete description inside the firecracker swagger file. I guess we can have this PR merged without documentation, and keep track of the MMDS docs in that opened PR. I've opened an issue also for the MMDS docs update (#1801).\r\n\r\nAny reason why we should merge this PR without the documentation? Adding documentation is one of the PR's check list. Just wondering why we should take an exception for this one.   Ideally we should close `firecracker` issues when the fixed code reaches `firecracker`. For this fix to go in I believe we still need to publish a new version of https://github.com/firecracker-microvm/versionize_derive, right?  Make sure all the structures used for saving/restoring state are versionized. This is a prerequisite for #1779   Hi @alicelambda ! This issue is available. Should I assign you to it ?  `MacAddr` is a simple wrapper and a utility used by multiple crates. Right now this is in `dumbo` and `dumbo` is used in a dependency in the following crates:\r\n- vmm for `MacAddr`\r\n- devices for `MacAddr` and for the MMDS network stack\r\n- utils for `MacAddr`\r\n\r\nBy moving `MacAddr` to `utils`, we make `utils` a tinier crate. We can also push this code to rust-vmm/vmm-sy-util. @iulianbarbu this is a sane separation of concerns. Do you want to create issues to describe what needs to be done? Your issue explains it pretty well already. I had an attempt at this as a first issue here.\r\nhttps://github.com/firecracker-microvm/firecracker/pull/2083\r\n@iulianbarbu, if the issues you mention above are still open, I would be interested to have an attempt at them.\r\n  Right now the MMDS functionality is backed into the virtio net implementation. We should find a way of separating this or making it pluggable so that we can consume Virtio Network from rust-vmm when it is going to be available. Hmm, why do you say they're opposite?\r\n\r\nI think of them as separate issues. This is related to the VirtioNetwork interface and how we make the interface/implementation not depend on Mmds. This issue doesn't really care where the MmdsNetworkStack is defined. It is just about separating the core functionality of the virtio network device from mmds in such a way that mmds can easily become a feature for example.  ## Reason for This PR\r\n\r\nFor the moment there is no information about Firecracker network performance, like what is the throughput that the emulation layer is able to achieve or how much latency it adds.\r\n\r\n## Description of Changes\r\n\r\nAdd a page with info about Firecracker network performance.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [ ] Any newly added `unsafe` code is properly documented.\r\n- [ ] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n > \r\n> \r\n> Is this `performance.md` file gonna be an entry point for data about performance in general related to firecracker? At the moment it contains data only about the network performance, hence I would rename it `network-performance.md`.\r\n\r\nMy intention was to make it generic to all firecracker performance items, bootup time, network, block device. But indeed the first phrase in the doc is misleading.  > > Is this `performance.md` file gonna be an entry point for data about performance in general related to firecracker? At the moment it contains data only about the network performance, hence I would rename it `network-performance.md`.\r\n> \r\n> My intention was to make it generic to all firecracker performance items, bootup time, network, block device. But indeed the first phrase in the doc is misleading.\r\n\r\nSome of that is also present in [SPECIFICATION.md](https://github.com/firecracker-microvm/firecracker/blob/master/SPECIFICATION.md). Does it make sense to improve that file instead of creating a new one? > \r\n> \r\n> > > Is this `performance.md` file gonna be an entry point for data about performance in general related to firecracker? At the moment it contains data only about the network performance, hence I would rename it `network-performance.md`.\r\n> > \r\n> > \r\n> > My intention was to make it generic to all firecracker performance items, bootup time, network, block device. But indeed the first phrase in the doc is misleading.\r\n> \r\n> Some of that is also present in [SPECIFICATION.md](https://github.com/firecracker-microvm/firecracker/blob/master/SPECIFICATION.md). Does it make sense to improve that file instead of creating a new one?\r\n\r\nThanks for the suggestion! I will update that file with a summary. \r\n\r\nFor performance tests is important to mention the environment and conditions where that numbers were taken. This way customers can build their own benchmarks and replicate. Not sure SPECIFICATION.md if that is the place to mention it. \r\nI suggest to add in SPECIFICATION.md something like _25Gbps when using 100% emulation thread cpu and 0.06ms of added latency_ and a link to this file with more details which I will rename as network performance.\r\nHow does this sounds? > > Some of that is also present in [SPECIFICATION.md](https://github.com/firecracker-microvm/firecracker/blob/master/SPECIFICATION.md). Does it make sense to improve that file instead of creating a new one?\r\n> \r\n> Thanks for the suggestion! I will update that file with a summary.\r\n> \r\n> For performance tests is important to mention the environment and conditions where that numbers were taken. This way customers can build their own benchmarks and replicate. Not sure SPECIFICATION.md if that is the place to mention it.\r\n> I suggest to add in SPECIFICATION.md something like _25Gbps when using 100% emulation thread cpu and 0.06ms of added latency_ and a link to this file with more details which I will rename as network performance.\r\n> How does this sounds?\r\n\r\nSounds good!\r\n\r\nRegarding the statement above: can we reach 100% emulation thread CPU usage even with small VMs (1-2 cores)? Note that since we advise all users to disable hyperthreading in production, we should maintain the same frame of reference in our performance testing/reporting. > \r\n> \r\n> > > Some of that is also present in [SPECIFICATION.md](https://github.com/firecracker-microvm/firecracker/blob/master/SPECIFICATION.md). Does it make sense to improve that file instead of creating a new one?\r\n> > \r\n> > \r\n> > Thanks for the suggestion! I will update that file with a summary.\r\n> > For performance tests is important to mention the environment and conditions where that numbers were taken. This way customers can build their own benchmarks and replicate. Not sure SPECIFICATION.md if that is the place to mention it.\r\n> > I suggest to add in SPECIFICATION.md something like _25Gbps when using 100% emulation thread cpu and 0.06ms of added latency_ and a link to this file with more details which I will rename as network performance.\r\n> > How does this sounds?\r\n> \r\n> Sounds good!\r\n> \r\n> Regarding the statement above: can we reach 100% emulation thread CPU usage even with small VMs (1-2 cores)? Note that since we advise all users to disable hyperthreading in production, we should maintain the same frame of reference in our performance testing/reporting.\r\n\r\nWe can't get 100% utilization of emulation thread using 2 cores. You need at least 4 cores to get 100% utilization.  Signed-off-by: Ioana Chirca <chioana@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\nBeing able to serialize the RateLimiter is a requirement for serializing the Block (#1424) and Net (#1425) devices.\r\n\r\n## Description of Changes\r\n\r\nImplemented the Persist trait for the RateLimiter and the TokenBucket structs and derived the Versionize trait for them.\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Np new added `unsafe` code.\r\n- [x] No API changes.\r\n- [x] No user-facing changes.\r\n @aghecenco, @acatangiu I've addressed your comments, PTAL! Right. `last_update` needs to be renamed a bit though because it will tell us the time elapsed.  ## Reason for This PR\r\n#593 \r\n\r\n## Description of Changes\r\nAdded these new strings to the codebase:\r\n- \"Cannot start HTTP server\"\r\n- \"Cannot update send VMM fd\"\r\n- \"VMM disconnected\"\r\n- \"Cannot convert from UTF-8\"\r\n- \"No field key\"\r\n- \"Field value not a string\"\r\n- \"Time conversion overflow\"\r\n- \"Failed to clone API event FD\"\r\n- \"EventManager exiting\"\r\n- \"Poisoned subscriber lock\"\r\n- \"Poisoned VMM lock\"\r\n- \"Unexpected VirtioDevice type\"\r\n- \"IRQ chip not set\"\r\n- \"vCPU already started\"\r\n- \"Poisoned legacy serial lock\"\r\n- \"Failed to parse version\"\r\n- \"Failed to parse ident\"\r\n- \"Failed to parse array length\"\r\n\r\nI did not update `unwrap()`s in tests or example code, change existing `expect()`s, or update `unwrap()`s where the comments/context stated it was safe.  If this _is_ desirable, please say!\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\n## License Acceptance\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n @iulianbarbu that's fine, I'm new to Firecracker so I picked up this issue as it forces me to look around a nice varied selection of the code base, but that obviously means that I don't understand some of the context surrounding the `expect()`s - I'm happy to change any of it as it's a great way to learn. In aarch64 it is failing due to this:\r\n```\r\nerror[E0716]: temporary value dropped while borrowed\r\n   --> src/vmm/src/device_manager/mmio.rs:174:24\r\n    |\r\n174 |           let int_evt = &serial\r\n    |  ________________________^\r\n175 | |             .lock()\r\n176 | |             .expect(\"Poisoned legacy serial lock\")\r\n    | |__________________________________________________^ creates a temporary which is freed while still in use\r\n177 |               .interrupt_evt();\r\n    |                               - temporary value is freed at the end of this statement\r\n178 |           vm.register_irqfd(int_evt, self.irq)\r\n    |                             ------- borrow later used here\r\n    |\r\n    = note: consider using a `let` binding to create a longer lived value\r\n\r\nerror: aborting due to previous error\r\n```\r\nIt's simple to change, but does anyone know why this works on x86_64?  This is a lifetime issue so I would have thought not architecture-dependent?  Or are optimisers in the different compiler backends re-ordering the code differently? \r\n\r\n\r\n\r\n> In aarch64 it is failing due to this:\r\n> \r\n> ```\r\n> error[E0716]: temporary value dropped while borrowed\r\n>    --> src/vmm/src/device_manager/mmio.rs:174:24\r\n>     |\r\n> 174 |           let int_evt = &serial\r\n>     |  ________________________^\r\n> 175 | |             .lock()\r\n> 176 | |             .expect(\"Poisoned legacy serial lock\")\r\n>     | |__________________________________________________^ creates a temporary which is freed while still in use\r\n> 177 |               .interrupt_evt();\r\n>     |                               - temporary value is freed at the end of this statement\r\n> 178 |           vm.register_irqfd(int_evt, self.irq)\r\n>     |                             ------- borrow later used here\r\n>     |\r\n>     = note: consider using a `let` binding to create a longer lived value\r\n> \r\n> error: aborting due to previous error\r\n> ```\r\n> \r\n> It's simple to change, but does anyone know why this works on x86_64? This is a lifetime issue so I would have thought not architecture-dependent? Or are optimisers in the different compiler backends re-ordering the code differently?\r\n\r\nThe function where the error takes place ( i.e. `register_mmio_serial`) is aarch64 labeled, it is not compiled on x86_64. Technically these constitute user-facing changes, but they don't change the API, so should there be an entry in `CHANGELOG.md`? The x86_64 CI tests are failing with this:\r\n```\r\nFAILED    integration_tests/functional/test_rate_limiter.py::test_rx_rate_limiting[ubuntu_with_ssh]\r\n...\r\n=================================== FAILURES ===================================\r\n____________________ test_rx_rate_limiting[ubuntu_with_ssh] ____________________\r\nintegration_tests/functional/test_rate_limiter.py:152: in test_rx_rate_limiting\r\n    _check_rx_rate_limit_patch(test_microvm, guest_ips)\r\nintegration_tests/functional/test_rate_limiter.py:377: in _check_rx_rate_limit_patch\r\n    _check_rx_bandwidth(test_microvm, guest_ips[1], bandwidth_kb)\r\nintegration_tests/functional/test_rate_limiter.py:426: in _check_rx_bandwidth\r\n    assert diff_pc < MAX_BYTES_DIFF_PERCENTAGE\r\nE   assert 10.228515625 < 10\r\n```\r\nBut it is passing on my machine (and aarch64):\r\n```\r\n$ ./tools/devtool test -- integration_tests/functional/test_rate_limiter.py::test_rx_rate_limiting\r\n[Firecracker devtool] 2020-05-06 23:03:15 UTC\r\n[Firecracker devtool] Starting test run ...\r\n================================================================================== test session starts ==================================================================================\r\nplatform linux -- Python 3.6.9, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\ncachedir: ../build/pytest_cache\r\nrootdir: /firecracker/tests, inifile: pytest.ini\r\nplugins: timeout-1.3.4\r\ntimeout: 300.0s\r\ntimeout method: signal\r\ntimeout func_only: False\r\ncollected 1 item                                                                                                                                                                        \r\n\r\n[ unsafe | 1 tests | 1 worker(s) ]\r\n  PASSED    integration_tests/functional/test_rate_limiter.py::test_rx_rate_limiting[ubuntu_with_ssh]\r\n\r\n================================================================================== 1 passed in 24.85s ===================================================================================\r\n```\r\nI can't see how my changes could have affected this so does anyone have any clues on how to fix it? > The x86_64 CI tests are failing with this:\r\n> \r\n> ```\r\n> FAILED    integration_tests/functional/test_rate_limiter.py::test_rx_rate_limiting[ubuntu_with_ssh]\r\n> ...\r\n> =================================== FAILURES ===================================\r\n> ____________________ test_rx_rate_limiting[ubuntu_with_ssh] ____________________\r\n> integration_tests/functional/test_rate_limiter.py:152: in test_rx_rate_limiting\r\n>     _check_rx_rate_limit_patch(test_microvm, guest_ips)\r\n> integration_tests/functional/test_rate_limiter.py:377: in _check_rx_rate_limit_patch\r\n>     _check_rx_bandwidth(test_microvm, guest_ips[1], bandwidth_kb)\r\n> integration_tests/functional/test_rate_limiter.py:426: in _check_rx_bandwidth\r\n>     assert diff_pc < MAX_BYTES_DIFF_PERCENTAGE\r\n> E   assert 10.228515625 < 10\r\n> ```\r\n> \r\n> But it is passing on my machine (and aarch64):\r\n> \r\n> ```\r\n> $ ./tools/devtool test -- integration_tests/functional/test_rate_limiter.py::test_rx_rate_limiting\r\n> [Firecracker devtool] 2020-05-06 23:03:15 UTC\r\n> [Firecracker devtool] Starting test run ...\r\n> ================================================================================== test session starts ==================================================================================\r\n> platform linux -- Python 3.6.9, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\n> cachedir: ../build/pytest_cache\r\n> rootdir: /firecracker/tests, inifile: pytest.ini\r\n> plugins: timeout-1.3.4\r\n> timeout: 300.0s\r\n> timeout method: signal\r\n> timeout func_only: False\r\n> collected 1 item                                                                                                                                                                        \r\n> \r\n> [ unsafe | 1 tests | 1 worker(s) ]\r\n>   PASSED    integration_tests/functional/test_rate_limiter.py::test_rx_rate_limiting[ubuntu_with_ssh]\r\n> \r\n> ================================================================================== 1 passed in 24.85s ===================================================================================\r\n> ```\r\n> \r\n> I can't see how my changes could have affected this so does anyone have any clues on how to fix it?\r\n\r\nIt is a bug on our side: #1809, sorry for that. > Changes look good, please sign your commit: `git commit -s --amend` and update the commit message to follow the [git 50/72 rule](https://preslav.me/2015/02/21/what-s-with-the-50-72-rule/).\r\n\r\nDone. Great! Please also rebase on top of latest master `git pull upstream master --rebase` and solve conflicts.  Will this help in being able to attach block devices to a running Firecracker?  I am trying to post a new version of vmm-sys-util soon-ish (in a couple of days) because there are some derives needed by vmm-epoll (see PR: https://github.com/rust-vmm/vmm-sys-util/pull/83). Can we hold off to this switch before the new version is published?   Signed-off-by: Anish Shah <shah.anish07@gmail.com>\r\n\r\n## Reason for This PR\r\n\r\nFixes #1685\r\n\r\n## Description of Changes\r\n\r\nIntroduced two static method to Argument struct - \r\n1. `value_argument` - returns an argument that can take user value \r\n2.  `flag_argument` -  returns a flag.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Thanks @lauralt for trying out. I had all these same thoughts when I tried the trait approach. I think to do this correctly we have to rethink designing arg_parse.rs. I don't feel this is a good first issue for me. I will try to take up some other issue. Sorry for abandoning this. :(  @AnishShah no problem at all. Let us know if you need help in selecting the next issue. I was a bit rushing when I added the label \"Good First Issue\" on this one and I should've double check. Sorry.  `MacAddr` is just 6 bytes and should qualify as a small structure. For small structures copy vs reference becomes a discussion on code readability rather than performance. In some synthetic benchmarks pass-by-copy outperforms pass-by-reference. When you use a reference, you use 8 bytes irrespective of the size of the structure, and since this one only has 6 bytes, copy is actually saving more space. I don't think this change is necessary.\r\n\r\nBenchmarks available here: https://www.forrestthewoods.com/blog/should-small-rust-structs-be-passed-by-copy-or-by-borrow/  Just a tiny clarification: kcov reports the coverage for all the tests, but the problem is that the report that calculates the coverage is wrong without having the test section excluded because it is counting the test line as code lines as well. Would this work?  An additional test in the test_coverage module that diffs the list of files containing the \"#[cfg(test)]\" attribute with the list of files containing the string \"mod tests {\".   \r\n```\r\n+def test_ensure_mod_tests():\r\n+    \"\"\"Fail if mod_tests hasn't been defined as the test module name.\"\"\"\r\n+    # List all source files containing rust test attribute.\r\n+    # List all files containing string \"mod tests {\".\r\n+    # Diff the two lists.\r\n+    # Diff returns zero if file lists match, non-zero if different.\r\n+    # Redirect file diff list to stderr.\r\n+    cmd = (\r\n+        '/bin/bash '\r\n+        '-c '\r\n+        '\"diff '\r\n+        '<(grep --extended-regexp '\r\n+        '--files-with-matches '\r\n+        '--recursive '\r\n+        '\\'^#\\\\[cfg\\\\(test\\\\)\\\\]$\\' ../src) '\r\n+        '<(grep '\r\n+        '--files-with-matches '\r\n+        '--recursive '\r\n+        '\\'mod tests {\\' ../src)\" 1>&2'\r\n+    )\r\n```\r\nGiving: \r\n```[ unsafe | 1 tests | 1 worker(s) ]\r\n  FAILED    integration_tests/build/test_coverage.py::test_ensure_mod_tests\r\n\r\n========================================================================================== FAILURES ===========================================================================================\r\n____________________________________________________________________________________ test_ensure_mod_tests ____________________________________________________________________________________\r\nintegration_tests/build/test_coverage.py:67: in test_ensure_mod_tests\r\n    stdout=PIPE\r\n/usr/lib/python3.6/subprocess.py:438: in run\r\n    output=stdout, stderr=stderr)\r\nE   subprocess.CalledProcessError: Command '/bin/bash -c \"diff <(grep --extended-regexp --files-with-matches --recursive '^#\\[cfg\\(test\\)\\]$' ../src) <(grep --files-with-matches --recursive 'mod tests {' ../src)\" 1>&2' returned non-zero exit status 1.\r\n------------------------------------------------------------------------------------ Captured stderr call -------------------------------------------------------------------------------------\r\n26,29d25\r\n< ../src/cpuid/src/transformer/amd.rs\r\n< ../src/cpuid/src/transformer/common.rs\r\n< ../src/cpuid/src/transformer/intel.rs\r\n< ../src/cpuid/src/transformer/mod.rs\r\n```\r\nIt might be a bit leaky,  but if this is essentially just to catch \"mod test\" typos, would it be sufficient?  Fixed by #1833.  We are using an old version of cargo audit (from October 2019) in the integration tests. The container running the tests has not been updated for a long time.  Signed-off-by: Anish Shah <shah.anish07@gmail.com>\r\n\r\n## Reason for This PR\r\n\r\nFixes #1685 \r\n\r\n## Description of Changes\r\n\r\nChanges in arg_parse.rs to support default value for boolean arguments \r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Hey @AnishShah. The issue description was a bit fuzzy, sorry for that. I will shortly update it so that it makes more sense and it gives some hints about how this can be implemented.\r\n\r\nAs @lauralt said, it doesn't make a lot of sense to allow to specify a default (other than false) for the arguments that don't take a value because if the default value is true, there is no way for users to change that default. The presence of a flag means that its value is true, the absence of the flag should mean that its value is false. How this can actually be implemented is a bit more complicated than I initially anticipated. We need to think about a better way to have defaults as false. I will also sync with @lauralt and we will think about a solution. Please let us know if you have any other ideas about how to map this in the arg parser. Issue updated with some options: https://github.com/firecracker-microvm/firecracker/issues/1685 Thanks for the quick reply on this PR - @lauralt, @andreeaflorescu and @acatangiu. I have made some changes to `value_as_bool` fn. Let me know what do you think. Thanks @lauralt. I can wait till we finalize a design.  Closing this in favor of a new PR.  ## Reason for This PR\r\n\r\nAdded a new `pub fn` in the VMM runtime controller that retrieves the KVM dirty bitmap.\r\n\r\n## Description of Changes\r\n\r\n1. dirty bitmap fetching functionality in the `vmm`\r\n1. support for enabling/disabling dirty page tracking at runtime in the `vmm`\r\n1. rustacean `vmm` integration tests with a noisy guest\r\n\r\n- [ ] This functionality can be added in [`rust-vmm`](https://github.com/rust-vmm).\r\n\r\nThe core component is already present in `kvm-ioctls`, and the rest is glue.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n > I just added 2 comments for the moment. They are nit-ish. I am not sure about the unit tests. It's a lot of code that has to be added just for testing one small thing. I have to spend some more time thinking about it.\r\n\r\nIndeed, there is a pretty big quantity of code for one small thing in the same place. One idea that pops in mind would be to move the code that does the general setup of the vmm (i.e impl Vmm, create_guest_workload, create_device_managers) in a `tests/` folder inside the vmm crate. That way we (hopefully) make this setup code reusable from multiple unit tests. WDYT?\r\n\r\nsrc/vmm/tests/mod.rs -> \r\n```\r\npub fn setup -> Vmm\r\n```\r\n\r\nsrc/vmm/src/controller.rs -> \r\n```\r\nVmm = setup()\r\nlet mut vmm_controller =\r\n            VmmController::new(VmResources::default(), Arc::new(Mutex::new(vmm)));\r\n`` We discussed offline and agreed that this functionality (and others like it) are better tested through Rust integ tests. This PR is therefore blocked on creating adequate tests. #1764 Will rebase on top of #1791 Blocked by https://github.com/firecracker-microvm/firecracker/issues/1834 @iulianbarbu @ioanachirca feedback addressed, approves lost, please take another look  I think we can improve the following in `--help` content\r\n\r\n- Display `default values` along with the description (It will be a single line change in `format_help` in arg parser).\r\n- Segregate mandatory and optional arguments properly.\r\n- Display sorted list, in the current implementation each time I executed a help command list will be in a different order (This is because we are using `hashmap` in arg parser).\r\n- Constant alignment.\r\n\r\n```\r\nJailer v0.21.1\r\n\r\n--exec-file <exec-file>: File path to exec into.\r\n--extra-args <extra-args>: Arguments that will be passed verbatim to the exec file.\r\n--id <id>: Jail ID.\r\n--daemonize: Daemonize the jailer before exec, by invoking setsid(), and redirecting the standard I/O file descriptors to /dev/null.\r\n--uid <uid>: The user identifier the jailer switches to after exec.\r\n--gid <gid>: The group identifier the jailer switches to after exec.\r\n--chroot-base-dir <chroot-base-dir>: The base folder where chroot jails are located.\r\n--netns <netns>: Path to the network namespace this microVM should join.\r\n--node <node>: NUMA node to assign this microVM to.\r\n--help: Show the help message.\r\n```\r\n\r\n```\r\nFirecracker v0.21.1\r\n\r\n--start-time-us <start-time-us>\r\n--id <id>: MicroVM unique identifier.\r\n--seccomp-level <seccomp-level>: Level of seccomp filtering that will be passed to executed path as argument.\r\n\r\n                        - Level 0: No filtering.\r\n\r\n                        - Level 1: Seccomp filtering by syscall number.\r\n\r\n                        - Level 2: Seccomp filtering by syscall number and argument values.\r\n\r\n                    \r\n--start-time-cpu-us <start-time-cpu-us>\r\n--no-api: Optional parameter which allows starting and using a microVM without an active API socket.\r\n--api-sock <api-sock>: Path to unix domain socket used by the API.\r\n--help: Show the help message.\r\n--config-file <config-file>: Path to a file that contains the microVM configuration in JSON format.\r\n```  Hi everyone! Taking a step back, it seems a lot complexity stems from the multi-step Firecracker configuration process. Is there any reason for devices, memory, mmds, etc. to be configured via separate API calls at this point? If the API only allowed the \"one call\" configuration we talked about a while ago (or, to push things even further, Firecracker is always started using a config file and only keeps the API for runtime PATCHes, etc), quite a lot of logic gets eliminated and we get configuration information upfront. This is a breaking change, but it seems worthwhile to seriously consider sooner rather than later.\r\n\r\nAlso wanted to mention the `VirtioDevice` interface from rust-vmm is still mostly based on the old crosvm/Firecracker code, so unfortunately it's unclear at this point how it will end up looking like. FWIW, not immediately going back to tying device memory configuration to activation might be better in terms of keeping options open.  Right now the arg_parser only supports custom default values for `String` values. Specifying a custom default values for bool arguments (also called flags) doesn't make a lot of sense because when the flag is not passed as an argument it means that its value is false, and when the flag is passed as an argument its value is true. Even though custom default values don't make a lot of sense for `Value::bool` we should nevertheless have a default value for these types of arguments, and that default value should always be false.\r\n\r\nI couldn't really find a clean way for implementing this, so ideas are welcomed.\r\n\r\nOne option that I was thinking about is to specify in the constructor of `Argument` the default value. Right now the constructor of `Argument` assumes that the type of the argument is flag (because it specifies that takes_value = false):\r\n```rust\r\n        Argument {\r\n            name,\r\n            required: false,\r\n            requires: None,\r\n            takes_value: false,\r\n            default_value: None,\r\n            help: None,\r\n            user_value: None,\r\n        }\r\n```\r\n\r\nSince this is the case, we could also set the default_value to Some(false).\r\nWhen the `takes_value` function is called with `true`, we can reset the `default_value` to None in case that value was Some(false). This is a bit a not very nice workaround and is also a bit weird because the order in which you call `takes_value` and `default_value` matters.\r\n\r\nAnother option is to implement `default_value` for both `Value::String` and `Value::bool`, but for `Value::bool` only allow the default to be false.\r\n\r\nFrom these two options, I think I prefer the second one because it is a less weird workaround :))\r\n\r\nAs I said both options are pretty meh. Other suggestions are welcomed. I would like to take a stab at this. I really like the approach @acatangiu proposed.\r\n\r\nI wouldn't change the enum variant from `Value::Bool(bool)` to `Value::Bool` even though it makes the code a bit simpler because it is also making it is a bit weird. We would end up with a `Value` type with no actual value. `Present` and `NotPresent` is the `Option<T>` in Rust so I don't think we should redefine that. I would stick with Option<T>. I also think that is makes sense for `value_as_bool` to still return an `None` for the case where the argument is invalid. \r\nHere is an use case where returning None for invalid flags makes sense:\r\n- you want to see if the flag `--no-api` was passed.\r\n- instead of writing `--no-api`, you write `--noapi` in the code by mistake.\r\n- the behaviour I would expect is for the program to crash because I have a programming error in my code and I wrote `--noapi` instead of `--no-api`, but instead `value_as_bool` returns false. This wrong behaviour is not easy catch. Instead of my buggy program to crash fast, it misbehaves.\r\n\r\n`Value::as_bool` can return just a bool because I don't think there is a better option to map the default value being false. @acatangiu I don't see how using `ArgState` or `ArgValue` in `Argument` struct is useful here. `default_value` will be `PresentWithValue`, `Present` or `NotPresent` depedending on `takes_value` field. This is a problem similar to what @andreeaflorescu mentioned in the [comment above](https://github.com/firecracker-microvm/firecracker/issues/1685#issue-584570240). It is weird because the order in which `takes_value` or `default_value` is called will matter.\r\n\r\nI have another suggestion that is to explicitly differentiate between an Argument and a Flag - \r\n\r\n```\r\ntrait builder {\r\n   fn default_value(.....) ....\r\n   fn user_value(....) ...\r\n   fn help( ...) ....\r\n   fn required( ...) ....\r\n   fn requires( ...) ....\r\n}\r\n\r\nimpl builder for Argument {\r\n}\r\n\r\nimpl builder for Flag {\r\n}\r\n````\r\n\r\nBasically, we won't have to expose `takes_value` fn. @AnishShah would you then have initialize the `ArgParser` like this?\r\n\r\n```rust\r\n        ArgParser::new()\r\n            .arg(\r\n                Argument::new(\"exec-file\")\r\n                    .required(true)\r\n                    .help(\"'exec-file' info.\"),\r\n            )\r\n            .arg(\r\n                Flag::new(\"no-api\")\r\n                    .requires(\"config-file\")\r\n                    .help(\"'no-api' info.\"),\r\n            )\r\n```\r\n\r\nThat'd be pretty neat! Yes. Should I go ahead and try implementing this design?  I am super onboard and excited about this solution :laughing:. Let's see what @lauralt and @acatangiu say.\r\n\r\nWe probably need to do some renaming though. `Builder` is not saying a lot about the interface. We can't name it `Argument` because the implementation is `Argument`. Or we can name it `Argument` and then we can name the `Argument` implementation that takes values `ArgumentWithValue` and name the flags `Flag`? Other ideas are more than welcome. `NamedArgument` speaks more that the argument has a name, not that it has a value :)). Naming is hard. What do you think about naming the trait `Argument` and the 2 structs`ValueArgument` and `FlagArgument`? This might make the distinction between them clearer. Thanks for the feedback. I'll send a new PR in few days since this involves a lot of changes. Hi guys. When I implemented the above design, I realized it is not a good one because there was a lot of similar code in ValueArgument and FlagArgument struct impl. Instead I added two static methods - `value_argument` and `flag_argument` to Argument method in the new PR. Let me know your thoughts.   - [x] Simplify the vsock code. More details here: https://github.com/firecracker-microvm/firecracker/pull/1562/files#r381161195\r\n- [x] Replace struct_util with `BytedValue`. For an example, you can check the PR that introduced this change: https://github.com/rust-vmm/vm-memory/pull/83/files @dianpopa we still need to do the replacement of BytedValue. We can also open a new issue with that if you think ti makes more sense. What do you say? Interested to help out!  ## Reason for This PR\r\n\r\nFixes #1228 \r\n\r\n## Description of Changes\r\n\r\nThis PR is a proposal for supporting custom IPv4 address configuration for our MicroVM Metadata Service. It comprises a new API for configuring the MMDS IPv4 address and some changes/refactoring in our current MMDS logic, for cleansing. \r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Any required documentation changes (code and docs) are included in this PR.\r\n- [x] Any newly added `unsafe` code is properly documented.\r\n- [x] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n @acatangiu , I've done some significant changes to this PR. Please, take a look again. @alexandruag , @acatangiu , @andreeaflorescu , this PR is ready for functional/code review. Can you please take a look?  I'm seeing lots of print out in VM with the following text:\r\n\r\nanonymous-instance:ERROR:src/devices/src/virtio/net/device.rs:546] The RX queue is empty, there is no available buffer.\r\n\r\nThe exact case might be hard to reproduce. I'm running GPU virtualization using https://github.com/utcs-scea/ava with TensorFlow inference workload. The GPU virtualization software is forwarding apis which creates lots of network traffic. The guest os is Linux.  Hi, @photoszzt ,\r\n\r\nThis is a log which I've introduced in [Drive net device with polly PR](https://github.com/firecracker-microvm/firecracker/pull/1518/commits/6aa68d5b84fb72fb57dd0ac621b4a846dd024ab8#diff-640134827a9fab72994cb080c1686fefR561). Before this change, instead of logging an error for `NoAvailBuffer`, we were throwing an error, which was not handled by any means, so it was a noop catch for it. If I am not mistaken, I think that the log is not really necessary, or at least it shouldn't be considered an error. As far as I understand, the reason behind this log is that the network device RX queue does not have any available descriptors for incoming data, when the event for incoming data happens. This can happen, as you said, for heavy network traffic applications. If I am not wrong, this can be done with an one line fix, in which we remove the line with the log. @firecracker-microvm/compute-capsule , WDYT? Other option would be to implement log ratelimit functionality as in linux kernel - https://elixir.bootlin.com/linux/v4.0/source/include/linux/ratelimit.h#L48. Also this sounds more like a condition where a metric is enough, we don't need a log.  ## Reason for This PR\r\n\r\n#1732 Outlines one possible approach to building rootfs filesystems.  \r\n\r\n## Description of Changes\r\n\r\nAdds the \"rfstool\" and associated Dockerfile for building a container image with wget and libguestfs-tools installed.   The tool is currently restricted to build just the minimal test rootfs.  It will fetch a minifs image from the Alpine repos, extract it, then customise the OS in order to make it suitable for running on Firecracker.\r\n\r\nTo test:\r\n\r\n1. Build Docker image from the Dockerfile in the commit\r\n2. Amend the line `RFSCTR_IMAGE=` in the rfstool script to point to your new docker image\r\n3. Run `./tools/rfstool build` \r\n\r\nExpected output: \r\n```\r\n$ ./tools/rfstool build\r\n[Firecracker rfstool] Starting rootfs minimal build ...\r\n[   0.0] Examining the guest ...\r\n[  40.4] Setting a random seed\r\nvirt-customize: warning: random seed could not be set for this type of \r\nguest\r\n[  40.9] Installing packages: ca-certificates\r\n[  50.6] Installing packages: curl\r\n[  62.1] Installing packages: iperf3\r\n[  73.1] Installing packages: iproute2\r\n[  87.4] Installing packages: iptables\r\n[  99.4] Installing packages: openrc\r\n[ 112.3] Installing packages: openssh-server\r\n[ 125.7] Installing packages: util-linux\r\n[ 148.8] Linking: /etc/init.d/agetty.ttyS0 -> agetty\r\n[ 148.9] Running: echo ttyS0 >/etc/securetty\r\n[ 149.9] Running: rc-update add agetty.ttyS0 default\r\n[ 151.0] Running: rc-update add devfs boot\r\n[ 152.2] Running: rc-update add procfs boot\r\n[ 153.4] Running: rc-update add sysfs boot\r\n[ 154.6] Running: rc-update add local default\r\n[ 156.0] Writing: /etc/local.d/umount.stop\r\n[ 156.1] Changing permissions of /etc/local.d/umount.stop to 0700\r\n[ 156.3] Setting passwords\r\n[ 170.1] Finishing off\r\n[Firecracker rfstool] Minimal rootfs built and available at: ./firecracker/build/img/local/x86_64/minimal/fsfiles/boottime-rootfs.ext4\r\n```\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] The reason for this PR is clearly provided (issue no. or explanation).\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Any required documentation changes (code and docs) are included in this PR.\r\n- [ ] Any newly added `unsafe` code is properly documented.\r\n- [ ] Any API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] Any user-facing changes are mentioned in `CHANGELOG.md`.\r\n Hi @iggy thanks for your comments - I'll review the Alpine docs.  Perhaps this isn't quite working as I think......  I'll park making any amendments to your other comments until after project feedback.   Something along these lines perhaps?  A clone and cut down of the devtool with `virt-make-fs` and `virt-customize` being run in the container.  There is a `tnotw/img:v01` container available in Docker should anyone wish to give it a spin, or the Dockerfile is in the commit.  Only an x86_64 container currently.  Hi @serban300 \r\n\r\nThank you for your review and feedback.\r\nApologies, this hasn't been a very coherent attempt at contributing on my part.\r\n\r\nThe fix I was proposing to address #1564 is the addition of these commands to the Alpine rootfs images: \r\n\r\n```\r\nrc-update add local default\r\necho \"umount /\" >/etc/local.d/umount.stop\r\nchmod 700 /etc/local.d/umount.stop\r\n```\r\n\r\nWhere the intention is that when the \"local\" daemon runs on shutdown it unmounts and hence syncs the root disk, hopefully eradicating the corruption mentioned in the ticket.  I'm not really sure if that fixes the issue but anyway......  I had nowhere to add that in the codebase and no way of modifying the rootfs images,  so the code in this branch is really a misguided attempt at \"sharing\" a solution,  i.e. a rootfs build with the changes applied.  In retrospect, I should have just outlined the above on the ticket and asked if that sounded sensible.  Apologies again. \r\n\r\nThanks very much for your code review - agree with all the points.  \r\n Hey, @tnotw ! As @serban300 said, having a tool that builds rootfs images brings a lot of value. Closing the PR it was not something that we had in mind. We can still push forward with this PR, but it will need some updates. It has to be linked to an issue which explains the nature of the contribution. A simple \"rootfs build tool proposal\" issue might be enough. What do you think? Ok, apologies, I wasn't completely convinced this wasn't just noise for you,  but I'll have another go at it... Hi @iulianbarbu,  Sure.  I've pushed what I have so far,  I can see about adding something to address #1418  So for a 100G, ext2 filesystem, Alpine image, with the Stream binary installed say, you would do something like this: \r\n```\r\n+# \"ext2_100G_stream\" profile details\r\n+declare -A RFS_STREAM=(\r\n+    [NAME]=\"stream.rootfs.ext2\"\r\n+    [SIZE]=\"100G\"\r\n+    [FS]=\"ext2\"\r\n+    [CUST]=\"--install openrc \\\r\n+           --copy-in /firecracker/stream:/bin/ \\\r\n+           --chmod 0755:/bin/stream \\\r\n+           --link agetty:/etc/init.d/agetty.ttyS0 \\\r\n+           --run-command 'echo ttyS0 >/etc/securetty' \\\r\n+           --run-command 'rc-update add agetty.ttyS0 default'\"\r\n+)\r\n+\r\n+\r\n # Global options received by $0\r\n # These options are not command-specific, so we store them as global vars\r\n OPT_UNATTENDED=false\r\n@@ -224,6 +238,7 @@ cmd_build() {\r\n         case \"$1\" in\r\n             \"-h\"|\"--help\")      { cmd_help; exit 1;  } ;;\r\n             \"minimal\")          { profile=\"minimal\"; } ;;\r\n+            \"stream\")           { profile=\"stream\"; } ;;\r\n             \"ubuntu\")           { profile=\"ubuntu\";  } ;;\r\n             \"ubuntu_with_ssh\")  { profile=\"ubuntu_with_ssh\";  } ;;\r\n             *)\r\n@@ -249,6 +264,7 @@ cmd_build() {\r\n     # The rootfs build is a combination of OS + profile\r\n     case \"${profile}\" in\r\n         \"minimal\")          { build_rootfs minimal alpine; } ;;\r\n+        \"stream\")           { build_rootfs stream alpine; } ;;\r\n         \"ubuntu\")           { build_rootfs ubuntu ubuntu_bionic; } ;;\r\n         \"ubuntu_with_ssh\")  { build_rootfs ubuntu_with_ssh ubuntu_bionic; } ;;\r\n         *)\r\n```\r\nSo it is sortof data driven,  and there is sortof a separation between the base OS install and customization steps.  So all you essentially do is add a profile to the alpine base install.  But it's obviously not separated out into json, it's a bit clunky, and as you say, there are lots of limitations you hit fairly quickly.\r\n\r\nSo yeah, postpone or just bin.   We're running `0.20` builds of firecracker+jailer, using the API server via https://github.com/firecracker-microvm/firecracker-go-sdk.\r\n\r\nWhile evaluating the `0.21.0` and `0.21.1` releases, we found occasionally (~1/1000 VMs) firecracker will block with 100% CPU usage, and not actually boot the guest.\r\n\r\nVMM logs of hung boots were identical to VMs that booted without issue.\r\n`gdb` did not seem productive: two threads in `epoll_wait` and the vmm_cpu thread in `ioctl`.\r\nIs there any other debugging context I can provide?\r\n\r\nThis isn't an issue with `0.20` and I couldn't reproduce it with a `devtool build` from `master`. \r\nThis may be a wontfix/wait for `0.22`. :wave: @dianpopa \r\n\r\nThe API socket appears: the client is able to connect, configure and \"start\" the machine.\r\nBut the machine doesn't produce any output (e.g. the guest kernel booting) - it just sits at 100% CPU until killed.\r\n\r\nBy VMM logs I mean https://github.com/firecracker-microvm/firecracker-go-sdk/blob/e6eaff81c885f51574fd7c1f7163c05e03c2ca52/machine.go#L609 / https://github.com/firecracker-microvm/firecracker/blob/v0.21.1/src/api_server/src/request/logger.rs#L9 \r\n\r\nI hadn't checked `dmesg`; will do! Logs from a hanging process:\r\n```\r\nRunning Firecracker v0.21.1\r\n2020-03-13T18:12:39.559859029 [534:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-03-13T18:12:39.563777938 [534:INFO] The API server received a Put request on \"/machine-config\" with body \"{\\\"cpu_template\\\":\\\"T2\\\",\\\"ht_enabled\\\":false,\\\"mem_size_mib\\\":512,\\\"vcpu_count\\\":1}\\n\".\r\n2020-03-13T18:12:39.563821260 [534:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-03-13T18:12:39.564676967 [534:INFO] The API server received a Get request on \"/machine-config\".\r\n2020-03-13T18:12:39.564712129 [534:INFO] The request was executed successfully. Status code: 200 OK.\r\n2020-03-13T18:12:39.568337264 [534:INFO] The API server received a Put request on \"/boot-source\" with body \"{\\\"boot_args\\\":\\\"pci=off nomodules quiet ro noapic reboot=k panic=1\\\",\\\"kernel_image_path\\\":\\\"44ed6229557ca6efd1846d2236aa2742bddcf143ecc3434e94239465ee632788\\\"}\\n\".\r\n2020-03-13T18:12:39.568412102 [534:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-03-13T18:12:39.575779725 [534:INFO] The API server received a Put request on \"/drives/0\" with body \"{\\\"drive_id\\\":\\\"0\\\",\\\"is_read_only\\\":true,\\\"is_root_device\\\":false,\\\"path_on_host\\\":\\\"config-984051412.ext4\\\"}\\n\".\r\n2020-03-13T18:12:39.575848161 [534:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-03-13T18:12:39.583783595 [534:INFO] The API server received a Put request on \"/drives/1\" with body \"{\\\"drive_id\\\":\\\"1\\\",\\\"is_read_only\\\":true,\\\"is_root_device\\\":false,\\\"path_on_host\\\":\\\"2c5bd5c597790e612b02b0004609f13cd4c60c83.ext4\\\"}\\n\".\r\n2020-03-13T18:12:39.583849788 [534:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-03-13T18:12:39.595783739 [534:INFO] The API server received a Put request on \"/drives/2\" with body \"{\\\"drive_id\\\":\\\"2\\\",\\\"is_read_only\\\":false,\\\"is_root_device\\\":false,\\\"path_on_host\\\":\\\"tmp-681462054\\\"}\\n\".\r\n2020-03-13T18:12:39.595855841 [534:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-03-13T18:12:39.601608827 [534:INFO] The API server received a Put request on \"/drives/root_drive\" with body \"{\\\"drive_id\\\":\\\"root_drive\\\",\\\"is_read_only\\\":false,\\\"is_root_device\\\":true,\\\"path_on_host\\\":\\\"tmp-680929799\\\"}\\n\".\r\n2020-03-13T18:12:39.601671491 [534:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-03-13T18:12:39.606535827 [534:INFO] The API server received a Put request on \"/network-interfaces/1\" with body \"{\\\"guest_mac\\\":\\\"00:03:ff:a7:4e:3d\\\",\\\"host_dev_name\\\":\\\"tap0\\\",\\\"iface_id\\\":\\\"1\\\"}\\n\".\r\n2020-03-13T18:12:39.606898110 [534:INFO] The request was executed successfully. Status code: 204 No Content.\r\n2020-03-13T18:12:39.607276037 [534:INFO] The API server received a Put request on \"/actions\" with body \"{\\\"action_type\\\":\\\"InstanceStart\\\"}\\n\".\r\n2020-03-13T18:12:39.607314544 [534:INFO] VMM received instance start command\r\n2020-03-13T18:12:39.607337972 [534:INFO] Guest memory starts at 0x7f463b0fb000\r\n2020-03-13T18:12:39.658529747 [534:INFO] The request was executed successfully. Status code: 204 No Content.\r\n```\r\n\r\nBurning CPU:\r\n```\r\n$ for i in `seq 10`; do ps aux | grep \"firecracker --id 534\" | grep -v grep | sed 's/^[^ ]* /USER /g'; sleep 1; done\r\nUSER 63399 98.9  0.0 530232 33784 ?        Sl   18:12   7:14 /firecracker --id 534 --start-time-us 491973889 --start-time-cpu-us 644 --seccomp-level 2\r\nUSER 63399 98.9  0.0 530232 33784 ?        Sl   18:12   7:15 /firecracker --id 534 --start-time-us 491973889 --start-time-cpu-us 644 --seccomp-level 2\r\nUSER 63399 98.9  0.0 530232 33784 ?        Sl   18:12   7:16 /firecracker --id 534 --start-time-us 491973889 --start-time-cpu-us 644 --seccomp-level 2\r\nUSER 63399 99.0  0.0 530232 33784 ?        Sl   18:12   7:17 /firecracker --id 534 --start-time-us 491973889 --start-time-cpu-us 644 --seccomp-level 2\r\nUSER 63399 99.0  0.0 530232 33784 ?        Sl   18:12   7:18 /firecracker --id 534 --start-time-us 491973889 --start-time-cpu-us 644 --seccomp-level 2\r\nUSER 63399 99.0  0.0 530232 33784 ?        Sl   18:12   7:19 /firecracker --id 534 --start-time-us 491973889 --start-time-cpu-us 644 --seccomp-level 2\r\nUSER 63399 99.0  0.0 530232 33784 ?        Sl   18:12   7:20 /firecracker --id 534 --start-time-us 491973889 --start-time-cpu-us 644 --seccomp-level 2\r\nUSER 63399 99.0  0.0 530232 33784 ?        Sl   18:12   7:21 /firecracker --id 534 --start-time-us 491973889 --start-time-cpu-us 644 --seccomp-level 2\r\nUSER 63399 98.8  0.0 530232 33784 ?        Sl   18:12   7:23 /firecracker --id 534 --start-time-us 491973889 --start-time-cpu-us 644 --seccomp-level 2\r\nUSER 63399 98.9  0.0 530232 33784 ?        Sl   18:12   7:24 /firecracker --id 534 --start-time-us 491973889 --start-time-cpu-us 644 --seccomp-level 2\r\n```\r\n\r\n```\r\n$ rust-gdb -p 63399\r\nGNU gdb (Debian 8.2.1-2+b3) 8.2.1\r\n...\r\nAttaching to process 63399\r\n[New LWP 63507]\r\n[New LWP 63603]\r\n0x000000000050f0a7 in epoll_pwait ()\r\n(gdb) info threads\r\n  Id   Target Id               Frame \r\n* 1    LWP 63399 \"firecracker\" 0x000000000050f0a7 in epoll_pwait ()\r\n  2    LWP 63507 \"fc_api\"      0x000000000050f0a7 in epoll_pwait ()\r\n  3    LWP 63603 \"fc_vcpu 0\"   0x0000000000510690 in ioctl ()\r\n```\r\n\r\nDmesg seems uninteresting - unrelated messages from a nearby `containerd`:\r\n```\r\n$ dmesg | wc -l\r\n234\r\n$ dmesg | grep \"tap0: link becomes ready\" | wc -l\r\n191\r\n$ dmesg | grep \"overlayfs\" | wc -l\r\n43\r\n```\r\n\r\nOur test suite queues 5000 VMs that sleep 5-10 seconds before self-terminating.\r\nThe runner is restricted to 200 concurrent guest VMs, but there is no rate limiting.\r\nFrom this pass, 2 of the 5000 jobs ended up in this state. @dianpopa thanks for the pointers!\r\nI had to fixup `src/vmm/src/vstate.rs:1084` but otherwise tested that branch - I still ended up with 1 of 1000 VMs spinning as previously described.\r\n\r\nI built `firecracker`+`jailer` from 6a4bb667313956b353283681fd6fc02f95d55cdc (`master`), re-ran without changes to our client and repeated with 0 of 5000 VMs stuck.\r\nAs things behave fine on `master`, I'm not concerned so will close this issue.\r\n\r\nI kept back testing and ended up reproducing this all the way back to `0.17.0`; it may be caused by something else in our environment changing around the same time as we attempted the `0.21.0` upgrade.\r\nAll my testing was on `4.19.0-8-cloud-amd64 #1 SMP Debian 4.19.98-1 (2020-01-26)` / debian-buster (`ami-04d70e069399af2e9` on us-east-1).\r\n\r\nThanks for taking a look, sorry for the red herring.  We have a few PRs touching the micro-http code that were merged to Firecracker. We should first port those PRs and then use it as a crate from firecracker-microvm/micro-http.\r\n\r\nTo avoid breaking the build, we should either use a specific commit from the micro-http repository, or create a tag and use that. After we publish it to crates.io we will not have that problem any more. We need to add epoll to vmm-sys-util before the switch. > We need to add epoll to vmm-sys-util before the switch.\r\n\r\nIs there an issue to track this? Yap, we need a release of vmm-sys-util. Coming up. `vmm-sys-util` v0.5.0 is released and available on crates.io.  Just started having this issue and this fixed it. Thanks!  ## Reason for This PR\r\n\r\nThere was a typo in Serban Iorga's email.\r\n\r\n## Description of Changes\r\n\r\nI have fixed the typo in Serban Iorga's email.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n > @stefannita01 Please, sign your commit: `git commit -s --amend`.\r\n\r\nHello Laura, \r\n\r\nI believe my commit is in fact signed. There's a green \"Verified\" card next to it, which on hover informs me that it has been signed with GPG key 4AEE18F83AFDEB23. I didn't tick the checkbox in the Pull Request comment because I wasn't sure at the time. Let me know if further steps need to be taken. Thanks for the fix. The commit is indeed signed, but you also need to add a signout line in the commit message. You can do this using the command that Laura provided: `git commit -s --amend`. Hi @stefannita01 . Could you sign out your commit so we can merge this PR ? Thanks ! > Hi @stefannita01 . Could you sign out your commit so we can merge this PR ? Thanks !\r\n\r\nSorry it took forever. I believe it's good to go now. Thanks. @stefannita01 yes, now it's signed out. Thanks !\r\n\r\nSorry, could you also squash your commits into one please ? Right now there are 4. And Also could you move the sign out line after the commit description? \r\n\r\nRight now it's \r\n```\r\nSigned-off-by: Stefan Nita <stefannita01@gmail.com>\r\n\r\nFixed typo in Serban Iorga's email\r\n```\r\n\r\nPlease change it to\r\n```\r\nFixed typo in Serban Iorga's email\r\n\r\nSigned-off-by: Stefan Nita <stefannita01@gmail.com>\r\n``` I'm not sure what happened but I see that there are 8 commits now :)\r\n\r\nYou can squash them by doing `git rebse -i upstream/master` and then marking all but the first commit with `fixup`. Then do a `git push -f`.\r\n\r\n@stefannita01 will you do that please ? If not I can try to do it and force push into your branch. Let me know if you need any help with this. > I'm not sure what happened but I see that there are 8 commits now :)\r\n> \r\n> You can squash them by doing `git rebse -i upstream/master` and then marking all but the first commit with `fixup`. Then do a `git push -f`.\r\n> \r\n> @stefannita01 will you do that please ? If not I can try to do it and force push into your branch. Let me know if you need any help with this.\r\n\r\nYes, I had some issues figuring out how to squash the commits last night and I couldn't get to my PC or laptop today until now. I see you guys did that already. Sorry for the headaches for such a simple commit.\r\n\r\nAlso, poetic how there's now a typo in the commit title. While I am somewhat of a specialist in fixing typos, I am clearly nowhere near as well-versed in the subtleties of git, so I think it's best I don't get involved there...  ## Reason for This PR\r\n\r\n#1624\r\n\r\n## Description of Changes\r\n\r\nUpdated `test_shut_down.py` to assert the flushing of metrics when a reboot is issued from within the booted microVM.\r\n\r\n`mod tests` from vmm/lib.rs is not neccessary for this file, since the units testing fit better for integration tests, which are already covered by our current integration tests.\r\n\r\nModified the API for creation and flags manipulation of a `logging::Fifo`. These changes offer flexibility in choosing if the opened pipe is blocking or non blocking and support for changing file descriptor flags for the opened fifo.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Bo docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n > I do think there are some potential scenarios that vmm/src/lib.rs should get unit tested/ci tested against:\r\n> \r\n> ==Unit tests==\r\n> \r\n>     * `get_bus_device( device_type: DeviceType, device_id: &str,)` -> isn 't it worth it to test that not registering a (device_type, id) tuple would make this function return `None`? Or also what about making sure that registering a net device with the same id as a block device works correctly?\r\n\r\nTesting this unit means testing the `MmioDeviceManager::get_bus_device` (because it is a wrapper which does not have any related logic), which is covered by `device_manager/mmio.rs::test_device_info` unit test. I genuinely do no think it would bring any value to have a unit test for this function.\r\n\r\n> \r\n>     * `guest_memory` -> why not test that it is actually returns what we configured?\r\n> \r\n>     * `pub fn kvm_vm(&self)` is not used at all\r\n\r\nUnit testing for getters, if they do not have any complex logic, it would require enough effort just for nothing, in my opinion. I've excluded them from the report (#1624) just because they lack any related logic that would bring value for a unit test.\r\n \r\n> \r\n> ==CI==\r\n> \r\n>     * Are  metrics flushed upon  `pub fn stop(&mut self, exit_code: i32)` ?\r\n\r\nI think this is a scenario that can be tested inside an integration test. I will add an integration test for this. \r\n\r\n>     * Does `configure_system` fail if there is not enough memory to setup the mptable?\r\n\r\n`vmm/lib.rs::configure_system` is a wrapper over `arch_*::configure_system`, without any related logic to it, besides effective calls to `arch_*::configure_system`. Testing it for `NotEnoughMemory` for mptable means testing `configure_system` from `arch::x86_64`. This is already covered in unit tests. > I am not on the same page here regarding not making sense to test simple bits of code. Unit tests are not made only for complex units. Testing a getter ensures that the getter stays a getter. Unit tests should also be seen as an extra layer of protection against malicious or unintentional mistakes in PRs.\r\n\r\nI agree with you that you generally want to test even the simple bits of code. In this particular usecase, testing the `Vmm` requires a lot of setup and comes with tests that are hard to maintain. The value added by testing setters and getters tends to fade away when taking into consideration the long time required for maintaining the tests and their setup. I think it makes more sense to invest this time in writing integration tests. WDYT? Re: the unit testing of small bits of code: I agree with @dianpopa that we should test everything, even if it's already covered. I've seen way too many getters that were sneaking in a bit of logic on the side before returning a value. I believe that code that isn't thoroughly tested has a better chance of not aging well. @dianpopa , @acatangiu , @aghecenco , I think I've managed your concerns. Please take a look again.  Signed-off-by: karthik nedunchezhiyan <karthik.n@zohocorp.com>\r\n\r\n## Description of Changes\r\n \r\nThis PR has the following changes:\r\n* block-device: replaced hardcoded value with `CONFIG_SPACE_SIZE`.\r\n* virtio: removed redundant import statements.\r\n* rate-limiter (nit): previously gcd took for `complete_refill_time_ms` and `NANOSEC_IN_ONE_MILLISEC` separately. current implementation provides the same result but this time with lesser code. I hope `complete_refill_time_ms * NANOSEC_IN_ONE_MILLISEC` should not cause overflow issue as it is `unsigned 64`. Overflow issues will happen if user provides a huge `complete_refill_time_ms` value for more than 580 years (I hope fc users will not have such use-case). \r\n* vmm-builder (nit): previously single logic is split into two parts (some outside the for loop and some inside the for loop), as a reader, I thought it will be better if we merge into one (just to make better readability).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [ ] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [ ] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n @acatangiu nice suggestion, will add the description for changes shortly \ud83d\ude42 @acatangiu @lauralt changes done as like you suggested. kindly take another look \ud83d\ude42 @acatangiu added git description \ud83d\udc4d  @acatangiu I guess commit description aligned as you expect \ud83d\ude42. @lauralt changed commit description as like you suggested, kindly take a look \ud83d\ude42.  In the firecracker, we need to check whether the user has supplied at least one root block device and throw an appropriate error message if not provided.\r\n\r\nIn current flow, if the user has not supplied any root block device he will end up in kernel panic like below.\r\n\r\n> [    0.145223] VFS: Cannot open root device \"(null)\" or unknown-block(0,0): error -6\r\n> [    0.146475] Please append a correct \"root=\" boot option; here are the available partitions:\r\n> [    0.147855] fe00           30720 vda \r\n> [    0.147857]  driver: virtio_blk\r\n> [    0.149050] Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)\r\n\r\nBut recent versions of firecracker support initrd. Users may handle rootfs mounting logic there \ud83d\ude15. Need to find a way to handle this elegantly.  ## Reason for This PR\r\n\r\nOccasionally, the vsock tests fail because the created file descriptors already exist. This PR tries to avoid that situation by trying multiple file names.\r\nThis can also happen when concurrent firecracker test runs are executed from the same path.\r\n\r\n## Description of Changes\r\n\r\nWhen a file is created, first, check if it exists. If it does, try to append a number to the file name.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] no docs need to be updated as part of this PR\r\n- [x] code-level documentation for touched code is included in this PR.\r\n- [x] no API changes are included in this PR\r\n- [x] the changes in this PR have no user impact\r\n- [x] Either no new `unsafe` code has been added\r\n  Looks like simply calling `strip` on the firecracker release binary reduces the size from 2.5 MB to 1.4 MB. Investigate if this affects in any way the functionality. Yeah, according to the `strip` command's description, the ability to interpret back/stack traces is affected. But, what do we gain? Does the binary size reduction also result in memory usage reduction? If not, does the binary size reduction help in any other way? Probably `strip --strip-debug --discard-locals` is a better option than what `strip` does by default for production builds. You can still get some useful information from stack traces that way. @raduweiss in this case the binary size reduction doesn't result in a memory usage reduction. It's only a disk size optimization. Does this bring any value ? If not, we can close the issue. Reopening this. The PR was merged.  Removed `VmmController::stop()` method, which was not used anywhere in the codebase.\r\nReturned `DeviceIdNotFound` if rate limiter patch fails due to not finding the\r\nnet device with a specific `net_iface_id`, attached to the bus.\r\n\r\nSigned-off-by: iulianbarbu <iul@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\nInitial reason for this PR was adding unit tests for vmm::controller.rs (#1623).\r\nFound that there is a corresponding integration test for every uncovered unit from `vmm::controller.rs`.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n @lauralt , I've updated the commit message. Please take a look again!   > > What do you think if we handle the events registration after activation for block and net devices like vsock does? With the vsock pattern of events registration, we do not register the queue/backend/rate limiters events until the activation, but only after. We wouldn't need to have the corresponding checks inside handle_read of net and block devices, and the actual event handling flow will seem more natural, IMO.\r\n> \r\n> We could do that (definitely in a separate PR), but it'd require a two-step event registration process (like vsock does):\r\n> \r\n>     1. register an `activate` event\r\n> \r\n>     2. on receipt of an `activate` event, we register the other events.\r\n> \r\n> \r\n> It'd be formally cleaner, but I don't have any problem with the current flow either.\r\n\r\nWe can do it in another PR. Basically, what we would gain choosing the `vsock` way of events registration is proper handling of device events after device activation. We will still need the `set_device_activated` and `is_activated` interface, for logic related to device `reset`. I've opened an issue to track this alignment for all the devices:  #1639 . > > > What do you think if we handle the events registration after activation for block and net devices like vsock does? With the vsock pattern of events registration, we do not register the queue/backend/rate limiters events until the activation, but only after. We wouldn't need to have the corresponding checks inside handle_read of net and block devices, and the actual event handling flow will seem more natural, IMO.\r\n> > \r\n> > \r\n> > We could do that (definitely in a separate PR), but it'd require a two-step event registration process (like vsock does):\r\n> > ```\r\n> > 1. register an `activate` event\r\n> > \r\n> > 2. on receipt of an `activate` event, we register the other events.\r\n> > ```\r\n> > \r\n> > \r\n> > It'd be formally cleaner, but I don't have any problem with the current flow either.\r\n> \r\n> We can do it in another PR. Basically, what we would gain choosing the `vsock` way of events registration is proper handling of device events after device activation. We will still need the `set_device_activated` and `is_activated` interface, for logic related to device `reset`. I've opened an issue to track this alignment for all the devices: #1639 .\r\n\r\nSynced offline. We do not need `set_device_activated`. Also, the PR LGTM.   For certain platforms and host kernel configurations on aarch64, the guest kernel hangs during [`arch_timer_of_init`](https://elixir.bootlin.com/linux/v5.6-rc3/source/drivers/clocksource/arm_arch_timer.c#L1246). I encountered this issue using the pre-built Firecracker 0.21.0 binary distributed from this repository.\r\n\r\nHere is an example log: [log.txt](https://github.com/firecracker-microvm/firecracker/files/4258703/log.txt). That includes both Firecracker log output with `\"level\": \"Debug\"` and guest kernel output with `loglevel=8`. Using GDB, I've determined that the guest kernel hangs during `arch_timer_of_init`, but I haven't figured out why. The point during that function at which the guest kernel hangs varies, and seems to depend on the timing of some asynchronous event.\r\n\r\nI've encountered this issue with a variety of platform/host kernel configuration pairs, all resulting in a log similar to the above. First, on `qemu-system-aarch64 -machine virt` with host Linux at `5.6.0-rc3` built with `defconfig`, and then on a Raspberry Pi 4 with host Linux at `rpi-5.6.y` built with `bcm2711_defconfig` (augmented with some KVM-related options). After hearing that Firecracker works on aarch64 on Ubuntu 19.10 for the Raspberry Pi 4, I built a host kernel similar to that which ships with Ubuntu 19.10 for the Raspberry Pi 4. The guest did not hang under this host. I then built a very similar kernel to run on `qemu-system-aarch64 -machine virt` (only adding some virtio-related options, and building the same version from mainline instead of the Raspberry Pi tree). A guest running under this host on `qemu-system-aarch64 -machine virt` hung during `arch_timer_of_init` just as before.\r\n\r\nFor guest kernels, I've tried both `5.6.0-rc3` built with `defconfig` and `4.14.0` built with the recommended configuration provided by this repository.\r\n\r\nThe details of the conditions of these failures can be found in this repository: [nspin/firecracker-repro](https://github.com/nspin/firecracker-repro). It includes all kernel versions and configurations, along with QEMU invocations, Firecracker invocations, and userlands.\r\n\r\nI can spend more time in GDB to narrow in on the issue here. Does anyone more familiar with the Firecracker on aarch64 effort so far have ideas on what might be the cause? Has anyone successfully booted a microvm with `qemu-system-aarch64 -machine virt` as the host platform? Thanks @andreeaflorescu! I'll be available on Slack to take part in the investigation. Hey @nspin, thanks for the extensive info! Just to clarify - are you encountering the error when:\r\na) trying to run nested (firecracker guest over qemu guest over metal) or\r\nb) comparing a firecracker guest with a qemu guest? Hi @aghecenco, I'm encountering this issue in case (a) (firecracker host + guest running in an virtual machine emulated by `qemu-system-aarch64 -machine virt` on an x86 host). I'm also encountering this same issue directly on the Raspberry Pi 4 (no QEMU) with certain host kernel configurations. For the nested use case, we don't officially support running nested - it's been attempted several times and successful on a few platforms, but Firecracker is only qualified on baremetal. On the RPi, do you mean you see this issue when the host boots or when the Firecracker guest on the metal RPi boots? It sounds like a kernel issue nonetheless; could you please post detailed repro steps for this use case?\r\n* host kernel config\r\n* guest kernel config\r\n* rootfs resources, if available\r\n* build steps starting from the nix scripts I observed this issue while the Firecracker guest was booting.\r\n\r\nI've messed around a bit more and found that Firecracker works fine on the Raspberry Pi 4 with _mainline_ `5.6.0-rc3` and `defconfig`. Furthermore, I'm having trouble reproducing this issue on the Raspberry Pi 4 at all. It's possible that the time I observed this issue on the Raspberry Pi 4 was under some mistaken conditions not recorded in my repository, such as a kernel/Kconfig mismatch. My focus was on QEMU and I was more treating the Raspberry Pi 4 more as a baseline.\r\n\r\nThe issue under QEMU remains, but it seems that's out of scope. I may investigate further anyways, and will report back if I find anything interesting. Also, I'll try a bit more to figure out under what conditions I observed this issue on the Raspberry Pi 4.\r\n\r\nSorry for the bother! Thanks @nspin! We'll close this for now as there's nothing needed from our side - if you find anything that we can help with, please feel free to reopen this issue. And if you come across something interesting in your investigation, it would be great if you'd consider a PR to update one of the docs [[1]](https://github.com/firecracker-microvm/firecracker/blob/master/docs/getting-started.md), [[2]](https://github.com/firecracker-microvm/firecracker/blob/master/FAQ.md) :beer:   ## Reason for This PR\r\n#1632 \r\n\r\n## Description of Changes\r\nIn new release Firecracker `v0.21.0`, the command line arg `--version` is missing.\r\n```\r\n$ ./firecracker-v0.21.0-x86_64 --version\r\n2020-02-26T03:15:13.135125190 [anonymous-instance:ERROR:src/firecracker/src/main.rs:132] Arguments parsing error: Found argument 'version' which wasn't expected, or isn't valid in this context.\r\n```\r\nAnd the `--version` is quite an universal command line arg to print application version number.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [ ] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [ ] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [ ] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n @Pennyzct how will this combine with jailer (for jailer users). I think there will be some inconsistency if we handled version param only in firecracker without jailer \ud83d\ude42 WDYT? Hi @KarthikNedunchezhiyan \r\nthanks for notice. \ud83d\ude0a\r\njailer is also using the new args parser(PR #1360) and `--version` is also missing for jailer binary. \r\n```\r\n$ ./jailer-v0.21.0-x86_64 --version\r\nArguments parsing error: Found argument 'version' which wasn't expected, or isn't valid in this context.\r\n\r\n```\r\nAnd for jailer user wants to print firecracker version number, this flag should be specified after `--` (end of command options) in order to be forwarded to firecracker process. ;)\r\n > for jailer user wants to print firecracker version number, this flag should be specified after -- (end of command options) in order to be forwarded to firecracker process. ;)\r\n\r\n@Pennyzct Yes we can do like this but we need to provide all arguments with valid values to jailer. also, the jailer will create the root folder and cgroups just to know the version of firecracker \ud83d\ude42. Hello @Pennyzct, thanks for the PR, we didn't, indeed, add support for `--version` flag in the new arg parser implementation. I took a look at your commit and I think `--version` argument should be treated like `--help`, i.e. check directly for this argument in `arg_parser.rs` in `parse()` function and not insert it when creating the ArgParser object in main. As for the jailer, we should also add support for this flag because jailer can be seen as another application and user may want to see the version for it too (`jailer 0.21.0` for example). So basically, just add a check for this argument in `main()` function from `jailer`. What do you think?\r\nPlease, ping me if you need any help with the PR or if something is not clear. Hi~ @lauralt thanks. ;)\r\nYou're right~~~It should be treated like `--help`, then it will also fix what @KarthikNedunchezhiyan worried~~~\r\nI'll update asap for you guys to review~~~ @lauralt personally I will not suggest keeping jailer version (`jailer 0.21.0`) as separate from the firecracker version (`firecracker 0.21.0`). It will lead to introducing a compatibility table between firecracker and jailer (just my opinion) \ud83d\ude42. WDYT? Hi~ @lauralt \r\nupdated~~~ plz take a review. ;). and do you think it should be back-ported to `v0.21.0`?  > @lauralt personally I will not suggest keeping jailer version (`jailer 0.21.0`) as separate from the firecracker version (`firecracker 0.21.0`). It will lead to introducing a compatibility table between firecracker and jailer (just my opinion) . WDYT?\r\n\r\nIn my opinion, it makes sense to introduce this flag also for the jailer as it is another binary and the version for it is taken from a different `Cargo.toml` file. > @lauralt personally I will not suggest keeping jailer version (`jailer 0.21.0`) as separate from the firecracker version (`firecracker 0.21.0`). It will lead to introducing a compatibility table between firecracker and jailer (just my opinion) . WDYT?\r\n\r\n@KarthikNedunchezhiyan , `jailer` and `firecracker` are considered crates in our project repository. Every crate has a specific package version, which is updated before a release of the crate. In our specific case, we have multiple crates, with dependencies between them, and a `workspace`, which manages these crates, as to what binaries to extract from this multiple crate project. A new release version of firecracker comes with two artifacts, namely the `firecracker` and `jailer` binaries, which correspond to `firecracker` and `jailer` crates. With this in mind, this means that the binaries are related to the crates versions, which can diverge, presumably, but not really in our case. Because they can diverge, it makes sense to keep `firecracker` version and `jailer` version separated. @lauralt @iulianbarbu ok \ud83d\udc4d  > Hi~ @lauralt\r\n> updated~~~ plz take a review. ;). and do you think it should be back-ported to `v0.21.0`?\r\n\r\nI will, thanks. No, I don't think it should be backported as it is not actually a bug.  @Pennyzct Changes look good. I would rephrase a little bit the commit message, something like: \r\nThe `--version` flag is quite an universal command line argument for\r\nprinting the application version number.\r\nTherefore added flag `--version` to both firecracker and jailer. Hi~ @lauralt thanks!\r\ncode and commit updated. plz take a review. ;)\r\n\r\n> No, I don't think it should be backported as it is not actually a bug.\r\n\r\nFYI, I've raised this request because of that in some app(e.g. kata-containers) which are using firecracker may use `--version` to acquire version info for pre-run compatibility check.  Hi~ @lauralt @andreeaflorescu \r\n\r\n> @Pennyzct can you, please, update test_parse() with a test also for --version argument?\r\n\r\nI've already updated `test_parse()` with a new test for `--version` argument. And a little bit more, since we use `clone()` to acquire the arguments, we probably don't need to `build_arg_parser()` every time for each small test union, just the one in the beginning is enough.\r\n\r\n> @Pennyzct The code coverage integration test is failing right now. Can you please update the target value from test_coverage.py with the current value (80.00) because, unfortunately, the newly added lines can not be tested properly :( ?\r\n\r\nthanks for the debugging. ;). Since we add test for the` --version` arg, the coverage test may not fail?? If it still fails, I'll then edit the value target accordingly.  Hi~ @lauralt @andreeaflorescu \r\nIf you're now all fine with the back-porting to `v0.21.0`, I added an new `FIXED` entry in `CHANGELOG` under v0.21.0. plz take a review~~~ ;) sorry. will re-base asap. ;) I created a release branch for v0.21.1: https://github.com/firecracker-microvm/firecracker/tree/release_v0.21.1\r\n\r\nYou should be able to create a PR against that branch and then we can do a patch release.  Hi guys\r\nI've found that in new release Firecracker `v0.21.0`, the command line arg `--version/-V` is missing.\r\n```\r\n$ ./firecracker-v0.21.0-x86_64 --version\r\n2020-02-26T03:15:13.135125190 [anonymous-instance:ERROR:src/firecracker/src/main.rs:132] Arguments parsing error: Found argument 'version' which wasn't expected, or isn't valid in this context.\r\n```\r\nChecking out the existing flags through `--help`, see `--version/-V` is also not there. But `--help` will \r\ndisplay the version info in the first line. \r\n```\r\nFirecracker v0.21.0\r\n\r\n--api-sock <api-sock>: Path to unix domain socket used by the API.\r\n--id <id>: MicroVM unique identifier.\r\n--help: Show the help message.\r\n--no-api: Optional parameter which allows starting and using a microVM without an active API socket.\r\n--start-time-us <start-time-us>\r\n--seccomp-level <seccomp-level>: Level of seccomp filtering that will be passed to executed path as argument.\r\n\r\n                        - Level 0: No filtering.\r\n\r\n                        - Level 1: Seccomp filtering by syscall number.\r\n\r\n                        - Level 2: Seccomp filtering by syscall number and argument values.\r\n\r\n```\r\nSo `--version/-V` has already been deprecated in the new release?? \r\n I've found that in PR https://github.com/firecracker-microvm/firecracker/pull/1360, we've replaced clap with our own args parser, and maybe forgot to add the dealing with `--version/-V`? ;)\r\n\r\n  PR for switching to the new implementation : #1618  First commit before decoupling : 8d48e730f2ea8fe524002643912049486e07528c\r\nLast decoupling commit : 3eb926ccf47251bb6d90f341577407d65d6aed0d\r\n\r\n Hi,\r\n\r\nI have just finished the performance testing on block&net devices and you can find the result attached bellow. I ran each test(net,block) twice, 30 minutes each. \r\n[decoupling.zip](https://github.com/firecracker-microvm/firecracker/files/4316812/decoupling.zip)\r\n Adding some plots on the results posted above. Also here are some details about the testing methodology:\r\n- the network performance was tested using iperf3, while the block device was tested using Fio. The parameters and test-cases can be seen in the results.\r\n- the tests were ran on an i3.metal instance used only by me, so there should be no additional noise.\r\n- the tests were ran one by one, so each one took advantage of full capabilities on the machine.\r\n- I used the already implemented testing framework(running Firecracker on a local docker image, spawning guest machines inside it etc), so the test environment should be identical to a CI one.\r\n- tests used : #1409 \r\n[decoupling_plots.zip](https://github.com/firecracker-microvm/firecracker/files/4318880/decoupling_plots.zip)\r\n Added a legend for the test case name and labels for block tests features.\r\n[decoupling_plots.zip](https://github.com/firecracker-microvm/firecracker/files/4323439/decoupling_plots.zip)\r\n Adding some updates & notes on the issue : \r\n- the network performance tests results don't show a high variation, so I think we can use them as a reference. It seems like there is a small degradation on the udp-g2h(UDP protocol, host to guest transmission).\r\n- on the other hand, the block performance tests present big variations in some of the following test cases:512-randread, 512-read, 1024-readwrite, 4096-randread, 4096-read, 4096-readwrite(to be noticed that all of them are testing read or both read&write). The variations may be causes by I/O latencies of the normal disk. I am going to perform some more testing, but this time using a ramdisk which should provide more stable results. \r\n\r\nI will update this issue with the new results as soon as possible. Test results for block device with ramdisk. They were ran on the same environment as mentioned before : \r\n[blk_ramdisk.zip](https://github.com/firecracker-microvm/firecracker/files/4344519/blk_ramdisk.zip)\r\n I've done multiple tests for assessing network device performance, for the inconclusive data pertaining UDP guest to host traffic, after decoupling. The resulted data does not indicate any regression for this case. My conclusion is that we do not have any network device performance degradation. However, we must investigate further the guest CPU performance, to understand why we have these variations. I've attached plots with network throughput for the udp-g2h-10000mbit/s use case (every iteration has 0 loss).\r\n\r\n![udp-g2h-10000-plot](https://user-images.githubusercontent.com/14218860/77305087-1a7b4280-6cfe-11ea-99d6-84a6537ee56f.png)\r\n![udp-g2h-10000-plot2](https://user-images.githubusercontent.com/14218860/77305099-2109ba00-6cfe-11ea-8465-045852b13511.png)\r\n![udp-g2h-10000-30_iter-1_vcpu-plot](https://user-images.githubusercontent.com/14218860/77305113-26ff9b00-6cfe-11ea-879d-d4e0913e3535.png)\r\n I've attached a comparison of the block device performance, before and after decoupling using the same commits referenced here: https://github.com/firecracker-microvm/firecracker/issues/1631#issuecomment-596434252\r\n\r\n##### Testing methodology\r\n1. For each test type added in PR #1409, a 10 minute test was executed, on a commit before decoupling and on another commit after decoupling.\r\n2. FIO was configured to output the bandwidth, iops and latency status every 1 second.\r\n3. In parallel to the FIO process, every one second the guest CPU load was sampled.\r\n4. The raw outputted data was parsed and grouped into a CSV. \r\n5. For each generated CSV, a graph has been created.\r\n\r\n##### Result format \r\nEach graph is actually rendered as a HTML file and it contains all the generated measurements for each test. Since it's an interactive HTML, individual lines can be enabled or disabled in order to have a proper scale of the data.\r\n\r\n[blk_compare.zip](https://github.com/firecracker-microvm/firecracker/files/4396318/blk_compare.zip) We decided that for large block sizes there is a performance degradation of 6%. \r\nFor all other cases there are situation where code after decoupling performs better and there are situation where the code before decoupling performs better. All within 3% range.\r\nWe can close this issue.   Hey, I would love to try to work on this one, can you provide some more details? @andreeaflorescu Got it, thanks, i will try to find something in issues.  Because the `Vcpu` thread is left in the `Running` state at the end of the test, it sometimes panics on sending its exit reason to the now dead `Vmm` object once the tests completes.\r\n\r\nAll tests with a separate **running** vcpu thread have the same problem. The fix is to make sure vcpus are in the `Paused` state at the end of test(s).  ## Reason for This PR\r\n\r\nBrings all the decoupling work related to `Firecracker v1.0` to the master branch.\r\n\r\nFixes #1427 \r\nFixes #1428 \r\nFixes #1429 \r\nFixes #1430 \r\nFixes #1525 \r\nFixes #1538 \r\nFixes #1563 \r\nFixes #1225\r\n\r\n## Description of Changes\r\n\r\n### Merge method used\r\n\r\nRebased the `refactoring/epoll_handler` branch on top of `master`, this PR will do a clean merge back into `master`.\r\n\r\n### High-level summary\r\n\r\n#1417 Implement an I/O EventManager (\"polly\" crate).\r\n#1489 MicroVM lifetime clearly split between pre-boot and post-boot.\r\n#1490 Vmm interface organized in stacked layers each with its own concern.\r\n#1494 Metrics driver and Serial device driven by EventManager (polly).\r\n#1499 Block device driven by EventManager (polly).\r\n#1518 Net device driven by EventManager (polly).\r\n#1550 Vmm-Exit event and Api events driven by EventManager (polly).\r\n#1575 Vsock device driven by EventManager (polly).\r\n\r\n### High-level microVm interface\r\n\r\n![vmm-components](https://user-images.githubusercontent.com/31917973/71740384-b5355500-2e64-11ea-9770-4f3496dab525.png)\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n > It looks like not all the changes from f546253 ended up in this rebase. Specifically, we are loosing the ability to specify a different seccomp filter for VMM and for the vcpus.\r\n\r\nWhat didn't make it exactly? We should be able to specify different filters for each thread now (we still specify the same cloned filter-set, but the capability for independent sets should be there). @aghecenco @andreeaflorescu @iulianbarbu I've addressed all your comments, please take a look. > We synced on this offline. On the master branch the Vmm would allow setting different seccomp filters on the vmm and vcpu threads through its public interface. The functionality was called through the public function start_microvm which received as parameters 2 filters (one for vmm and one for the vcpus). Since start_microvm no longer exists and the start_vcpu function that allows setting up custom seccomp filters is private, setting up different seccomp filters outside of the Vmm is not possible. Since there are other interface changes required, we'll do these all at once in a future PR.\r\n\r\nI've added a commit to make the Vmm programmatic interface `public`. > Last part of the review. Sorry for the delay. It looks like we are missing one commit (the one that removes block device rescan).\r\n\r\nWe're not missing the commit, there was just a leftover action definition which I've now removed. Good catch! Fixed.  Jailer requires a NUMA node for deploying a microVM, this NUMA node is used to pin the new microVM to the cores (all of them) and memory of node by writing cpuset.cpus and cpuset.mems cgroup files.\r\n\r\nIt would be useful to be able to not only isolate the process in a NUMA node but being able to isolate it in a specific CPU (or CPU set). This is needed to mitigate recent micro-architecture CPU vulnerabilities (Spectre, Meltdown and friends). The idea is not to share threads of the same core across micro-VMs.\r\n\r\nAs mentioned before, jailer not only pins the process to the node CPUs it also pins the memory to the same NUMA node. It would be useful also to select the memory node independently. Note that some architectures allows NUMA nodes without memory associated (https://github.com/OpenNebula/one/issues/3256#issuecomment-491702104) and jailer will not run in such machines.\r\n\r\nIf it's interesting for the project I can prepare an RFC PR for this. @christian7007 It is possible to override cgroup (which was created by jailer) before booting firecracker right? In our use case, we start the microVMs with `--config-file` option, so as soon as we start the jailer, it starts the firecracker process and the VM starts automatically.\r\n\r\nWe've done some tests and if we overwrite `cpuset.cpus` content it seems that the process is migrated to the new CPU(s). This does not works for memory (`cpuset.mems`).\r\n\r\nAlso, we don't like the idea of starting the VM in a CPU and later switching it to another one. The most required use case for isolating a process in a single core use to be increasing security, as explained in the description, and this kind of break it.\r\n\r\nWe think this can be useful to more people and it would be nice to have this options available at the jailer. Hi @christian7007 ,\r\n\r\nThe production setup recommendation [docs](https://github.com/firecracker-microvm/firecracker/blob/master/docs/prod-host-setup.md) provide a couple of ways to mitigate micro-architecture CPU vulnerabilities at the host level. These should provide the protection you are looking for. Are there any other reasons you want to pin the VMs to specific CPUs on top of that ?\r\n\r\nAlso, we need some time to dive deep on cpu pinning and it's implications. We will get back to you next week.\r\n Hello @sandreim,\r\n\r\nLet me give you some info about our use case. I'm working on integrating Firecracker with [OpenNebula](https://github.com/OpenNebula/one). The CPU pinning feature was a really useful feature for our users and we would like to be able to have it totally integrated with Firecracker.\r\n\r\nApart from security reasons we think that adding this as an optional configuration will add more flexibility for managing the available resources at different scenarios. \r\nFor example, it will allow to reduce the noisy neighbor effect although this could, to some extent, go against the resource sharing approach adopted by Firecracker it can be useful in some specific cases. Also it will allows to select the memory node for NUMA architectures using nodes without memory.\r\n\r\nThanks for the interest, I'll be waiting to know your thoughts about it. Hello @dianpopa,\r\n\r\nYes, that's one of our use cases, our idea is to be able to select different NUMA nodes for CPU and memory but also we'd like to be able to pin a MicroVM to a specific core (not to the entire NUMA node) if needed. Our idea is to add more flexibility to  jailer to accommodate these use cases while preserving its current NUMA behavior.\r\n\r\nI did try to override the cgroups and it works for CPU. And for memory if `cpuset.memory_migrate` is enabled. However memory_migrate produces unnecessary trashing of memory pages with the associated cross noise for the other micro-vms. Moreover, for machines with no-memory nodes we could not test it directly in a system with a NUMA node without memory, but it most probably fail the allocation. Hello @acatangiu, sure I'll be there.\r\n\r\nThanks for the interest!  There is a high number of CI failures with following error - currently from 13 PR 4 are affected by this.\r\n_[Firecracker devtool] Error accessing Docker. Please make sure the Docker daemon is running and that you are part of the docker group. For more information, see https://docs.docker.com/install/linux/linux-postinstall/_\r\n\r\nHappens mostly on X86  ## Reason for This PR\r\n\r\nThe Python style check test was doing all the operations by serializing commands, which took a lot of time.\r\n\r\nThis PR runs all commands using the async module, reducing execution time from 40s to 20s on a typical desktop.\r\n\r\n## Description of Changes\r\n\r\nRun all commands asynchronously and take into account all executed commands including their stdout, stderr and return code.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR\r\n- [x] The changes in this PR have no user impact\r\n- [x] No new `unsafe` code has been added\r\n We could, but we need to make sure that we don't lose the current things that we check for. \nAs far as I've seen, we actually need to check for more things, such as alphabetically sorted imports, which can be done by adding flake8.\n\nEither way, it's something that needs to be looked into, but it should be done in a different PR.\n\nThe point of this PR is to reduce test duration and add more clarity to commands executed in separate shells.   Send any signal to a running Firecracker and it will crash with epoll interrupted error.\r\nEpoll can be interrupted by signals and returns -EINTR. This should be not treated as error.\r\n\r\nOne related issue is that you are unable to do gdb attach.   Occasionally we see that the PR tests fail due to reasons that are not related to the changed code itself.\r\n\r\nWe should investigate and fix this.  ## Reason for This PR\r\n\r\n#1578 \r\n\r\n## Description of Changes\r\n\r\nRaised the coverage for `builder.rs`.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n > Update on this. Worked with @iulianbarbu and identified the code paths that are not tested as follows:\r\n> \r\n>     * MMIO\r\n> \r\n>     * VirtioDevice implementation for Net (some functions)\r\n> \r\n>     * BlockDeviceConfig & NetDeviceConfig\r\n>       These will be tested in a subsequent PR.\r\n> \r\n> \r\n> We also looked at the builder functions that can be tested in a meaningful way and we agreed on the following:\r\n> \r\n>     * create_vcpus_*\r\n> \r\n>     * attach_*_devices\r\n> \r\n> \r\n> For the rest we can only have coverage tests and some of them actually come with the disadvantage that it makes it impossible to run the tests in parallel in the future.\r\n\r\nI somewhat disagree here. The idea of unit-testing is to test each individual unit. Start from the smallest unit and test other units above with the assumptions that the units below are also tested and function correctly.\r\nTherefore I believe testing the individual functions and that they return `Ok()` when that's expected is fine and is not false coverage - **as long as we also independently test the underlying units**. I think I've addressed your feedback! @lauralt , @acatangiu , @andreeaflorescu, please take a look again.  ## Reason for This PR\r\n\r\n#1456 - musl calls sigprocmask from pthread_exit(), but we don't want to whitelist the syscall.\r\n\r\nThis change is currently blocking firecracker-containerd to use Firecracker 0.20.0. While the issue did exist in 0.19.0, we are seeing this seccomp violation more than before somehow. See https://buildkite.com/firecracker-microvm/firecracker-containerd/builds/1508 for the actual test failure.\r\n\r\n## Description of Changes\r\n\r\nBasically follows what @acatangiu has proposed on #1456 - keep vCPU threads running to avoid calling pthread_exit().\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n [The x86 build](https://firecracker-pr.s3.amazonaws.com/pr-logs/x86_64/01586/kzys-firecracker-41df597.log) is failing, but it seems like not related to the changes.\r\n\r\n> [Firecracker devtool] Error accessing Docker. Please make sure the Docker daemon is running and that you are part of the docker group. For more information, see https://docs.docker.com/install/linux/linux-postinstall/ @andreeaflorescu That is true. `for _i in 0..10 {` is pretty arbitrary. How about changing that to `loop {`? pytest will kill the test if it takes forever. @andreeaflorescu I think we could. In production, the transition to `exit` calls `Barrier#wait()` to block indefinitely. In tests, the test code calls `Barrier#wait()` to unblock the thread, then reads exit_evt. It looks much better! Thanks for the suggestion. [The aarch64 build](https://firecracker-pr.s3.amazonaws.com/pr-logs/aarch64/01586/kzys-firecracker-579b1a9.log) is failing, but it seems unrelated to the changes I'm making.\r\n\r\nI didn't squash the last commit (579b1a939ce1c3d43feeb5c94666a8dd5b90b954) into the first one (8ee01ae78c8935b6c29b4a9d67fe815024a68bc2) for making code review easier, but would do after review.\r\n @serban300 Hmm, how did you reproduce the issue on your end? Just starting multiple Firecrackers to simulate heavy load?\r\n\r\nSplitting the PR makes sense. Here is the one without KVM_EXIT_SHUTDOWN fix: #1598. > @serban300 Hmm, how did you reproduce the issue on your end? Just starting multiple Firecrackers to simulate heavy load?\r\n> \r\n> Splitting the PR makes sense. Here is the one without KVM_EXIT_SHUTDOWN fix: #1598.\r\n\r\n@kzys Thanks for splitting the PR.\r\n\r\nFor reproducing the issue I just started a VM with 32 vCPUs and then issued a reboot command. I tried this a couple of times (max 5 times) and the issue reproduced once. I made sure that I was on your branch. > > @serban300 Hmm, how did you reproduce the issue on your end? Just starting multiple Firecrackers to simulate heavy load?\r\n> > Splitting the PR makes sense. Here is the one without KVM_EXIT_SHUTDOWN fix: #1598.\r\n> \r\n> @kzys Thanks for splitting the PR.\r\n> \r\n> For reproducing the issue I just started a VM with 32 vCPUs and then issued a reboot command. I tried this a couple of times (max 5 times) and the issue reproduced once. I made sure that I was on your branch.\r\n\r\nSorry @kzys I did the tests on an old binary. I can't reproduce the issue with your fix. But I would like to analyze the solution a bit. @serban300 Good to hear :) Let me know if anything I can help. Currently this issue is blocking us to use Firecracker post-0.20.0 on firecracker-containerd.\r\n\r\nBTW, I'm going to squash the commits. @kzys I investigated the problem. I think we should change the way we handle the `VcpuExit::Shutdown` signal that we get from KVM. Right now we treat it as an [`VcpuUnhandledKvmExit` error](https://github.com/firecracker-microvm/firecracker/blob/c9e900c181554b65b929d89ad576ecfee6ab1db6/src/vmm/src/vstate.rs#L641), in which case we end up [sending a signal to the VMM thread to exit with status 1](https://github.com/firecracker-microvm/firecracker/blob/c9e900c181554b65b929d89ad576ecfee6ab1db6/src/vmm/src/vstate.rs#L790). This is usually an error code, and doesn't seem fit for this use case.\r\n\r\nPersonally I would probably send a success code instead, pause the vCPU thread and wait for the VMM thread to kill the process. The barrier is also an option, but I wouldn't send an error status code anyway.\r\n\r\n@firecracker-microvm/compute-capsule what do you think ? @serban300 I don't have strong opinion on that. Regarding the exit code, doesn't it send `FC_EXIT_CODE_OK`?\r\n\r\nhttps://github.com/firecracker-microvm/firecracker/blob/7fb2e4658a6763760161909f6526aed2f02a6c9b/src/vmm/src/lib.rs#L1270 I guess the cleanest solution here is to drop the `exited` state and just keep `running` and `paused`. This also keeps our logic simple and clear.\r\n\r\nOn errors or valid exit commands the `Vcpu`s will write to the `exit_evfd` to notify the `Vmm` then move to the `paused` state. The responsibility and control is thus passed to the `Vmm` thread. @acatangiu \r\n\r\nCalling `StateMachine::finish(Self::paused)` instead of `StateMachine::finish(Self::exited)` is possible. We have some error cases that transition the state machine to `exited`. Do you want to change all of them to use `paused`?\r\n\r\nWhat do you think about `Error::VcpuUnhandledKvmExit`? I agree it is not \"unhandled\", but technically all of the error cases are not \"unhandled\". So I don't have strong opinion on that and want to see on @firecracker-microvm/compute-capsule team's agreement regarding the approach first.\r\n\r\n @kzys you're right, it exits with `FC_EXIT_CODE_OK`. I thought that it exits with the value that has been written in `exit_evt`. This still looks like a problem to me, because it means that Firecracker also exits with `FC_EXIT_CODE_OK` in case a vCPU receives a `KVM_EXIT_INTERNAL_ERROR` for example.\r\n\r\n > I guess the cleanest solution here is to drop the exited state and just keep running and paused. This also keeps our logic simple and clear.\r\n\r\nI jumped the gun a bit here. It seems the `exited` state does have value. I propose the following mechanism:\r\n\r\n`running` state --- encounters exit reason X (where X could be an exit command, an error, etc) ---> `return StateMachine::next(Self::exited)` ---> `exited` state.\r\n\r\n`exited` state:\r\n1. `vcpu.exit_evfd.write(1)`\r\n2. use the existing communication channels to send to Vmm the exit reason: `VcpuResponse::Exited(X)`\r\n3. block on waiting for another command from Vmm: `vcpu.event_receiver.recv()`\r\n4. another command should never come, but even if it does, this state should return next state as `StateMachine::finish(Self::exited)` which will just stop the state machine.\r\n\r\nThis flow should solve all our requirements. > > I guess the cleanest solution here is to drop the exited state and just keep running and paused. This also keeps our logic simple and clear.\r\n> \r\n> I jumped the gun a bit here. It seems the `exited` state does have value. I propose the following mechanism:\r\n> \r\n> `running` state --- encounters exit reason X (where X could be an exit command, an error, etc) ---> `return StateMachine::next(Self::exited)` ---> `exited` state.\r\n> \r\n> `exited` state:\r\n> \r\n>     1. `vcpu.exit_evfd.write(1)`\r\n> \r\n>     2. use the existing communication channels to send to Vmm the exit reason: `VcpuResponse::Exited(X)`\r\n> \r\n>     3. block on waiting for another command from Vmm: `vcpu.event_receiver.recv()`\r\n> \r\n>     4. another command should never come, but even if it does, this state should return next state as `StateMachine::finish(Self::exited)` which will just stop the state machine.\r\n> \r\n> \r\n> This flow should solve all our requirements.\r\n\r\nThis could work. > > > I guess the cleanest solution here is to drop the exited state and just keep running and paused. This also keeps our logic simple and clear.\r\n> > \r\n> > \r\n> > I jumped the gun a bit here. It seems the `exited` state does have value. I propose the following mechanism:\r\n> > `running` state --- encounters exit reason X (where X could be an exit command, an error, etc) ---> `return StateMachine::next(Self::exited)` ---> `exited` state.\r\n> > `exited` state:\r\n> > ```\r\n> > 1. `vcpu.exit_evfd.write(1)`\r\n> > \r\n> > 2. use the existing communication channels to send to Vmm the exit reason: `VcpuResponse::Exited(X)`\r\n> > \r\n> > 3. block on waiting for another command from Vmm: `vcpu.event_receiver.recv()`\r\n> > \r\n> > 4. another command should never come, but even if it does, this state should return next state as `StateMachine::finish(Self::exited)` which will just stop the state machine.\r\n> > ```\r\n> > \r\n> > \r\n> > This flow should solve all our requirements.\r\n> \r\n> This could work.\r\n\r\nAlthough it might be easier to have separate eventfds for exit: one for `i8042` and one for all the vCPUs. When we receive data on `i8042_evt`, we exit with success. When we receive data on `vcpus_exit_evt` we read the exit code from it. \r\n\r\nOtherwise we have to query all the vCPUs for `VcpuResponse::Exited(X)` since we don't know which one issued the exit command.  I wouldn't use separate events for `i8042` and vcpu exits for a few reasons:\r\n\r\n- on an `exit event` the `Vmm` needs to query all `Vcpu`s for the reason, but that query needs to be a `recv_timeout()` (a dozen ms or so) since not all `Vcpu`s might have exited. If none report any error exit reason, then process can end with `retcode 0`. This works nicely for the `i8042` path as well as the error path and kvm-exit-shutdown path.\r\n- further down the line I'd like us to investigate why on newer kernels we get `KVM_EXIT_SHUTDOWN` from kvm while on older ones we don't. If we can make that work on all versions we can simply drop the `i8042` mechanism. > I wouldn't use separate events for `i8042` and vcpu exits for a few reasons:\r\n> \r\n>     * on an `exit event` the `Vmm` needs to query all `Vcpu`s for the reason, but that query needs to be a `recv_timeout()` (a dozen ms or so) since not all `Vcpu`s might have exited. If none report any error exit reason, then process can end with `retcode 0`. This works nicely for the `i8042` path as well as the error path and kvm-exit-shutdown path.\r\n> \r\n>     * further down the line I'd like us to investigate why on newer kernels we get `KVM_EXIT_SHUTDOWN` from kvm while on older ones we don't. If we can make that work on all versions we can simply drop the `i8042` mechanism.\r\n\r\nOk, looks good to me. I think it's ok to use the same eventf for `i8042` and for the vCPUs exit signal.\r\n\r\nI have only one comment. I wouldn't block on `vcpu.event_receiver.recv()` in the exited state. I wouldn't want to risk receiving another command. Who knows. I would do an infinite wait with something like:\r\n\r\n```\r\n        let barrier = Barrier::new(2);\r\n        barrier.wait();\r\n``` Infinite wait should work fine.\r\n\r\n> I wouldn't want to risk receiving another command. Who knows.\r\n\r\nEven if another command is received, `exited` state should `return StateMachine::finish(Self::exited)` which will end the thread loop.\r\n\r\nWhether we block forever or wait for a message which should never arrive is fine with me. The second option allows a bit more flexibility in case we ever want to actually join the thread (we control when it finishes and can be joined), but practically we should never need that so again, either option works for me. @kzys @acatangiu @andreeaflorescu I created a [draft](https://github.com/firecracker-microvm/firecracker/pull/1603) with a possible implementation of the solutions that we discussed. Please take a look ! @serban300 Thanks! I've tested the draft PR on firecracker-containerd and seems it's working!\r\n\r\nLet me close this pull request. Closed in favor of #1603   ## Reason for This PR\r\nThis updates unit test:\r\n \r\n1. Add test cases for sub-domain url and `ip:port`;\r\n\r\n2. Re-organize test cases by vector of tuple to identify original input and exp value. I assume this make test code flexible. \r\n\r\n## Description of Changes\r\n\r\nrefactor `test_uri()`  in `request.rs`\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n @aghecenco Thanks for your comment. I'd been done.  PTAL.  The associated image for the `test_microvm_with_api` (i.e ubuntu folder) does not lead to successful boot on aarch64. We did not detect this up until now because we only test that API are successful but we might need it to boot in the future.  Adding support for a memory balloon device will allow Firecracker users to reclaim memory unused by their guests.\r\n\r\nWe should emulate a `virtio-balloon` device as described in the `VIRTIO` spec.\r\n\r\nMore details on memory ballooning concept [here](https://en.wikipedia.org/wiki/Memory_ballooning).\r\n\r\nRelated issues: #1570   I'm running a buildkite agent inside a firecracker microVM (which in turn runs a docker daemon). I noticed memory is not being reclaimed after a large build.\r\n\r\nMy VM has 4 vCPUs and 8GB of memory allocated. It also uses a vsock for controlling a few things from the host.\r\n\r\nDuring a build, memory usage sore inside the VM and then quickly dropped back to ~400-500MB after the build. From the host, RSS and shared memory remained at ~4.5GB.\r\n\r\nI saw there was some talk/experiment regarding ballooning (#1198, #1203), would that help my case?\r\n\r\nShould I allocate less memory to my container, leading to memory being reclaimed faster? The host had to OOM kill the VM when it reached 90-95% of its allocated 8GB. That host was a bit loaded at the time, but given that this memory wasn't _really_ being used, I was hoping it would get reclaimed faster.\r\n\r\nEdit: I also noticed that, as memory usage reaches closer to 100%, the build gets much slower. I assume because of it trying to allocate the memory in the `zero (deleted)` space? (See `pmap` output below).\r\n\r\nEdit 2: Using firecracker 0.20.0, kernel 4.19.41 in the VM, kernel 4.15 on the host.\r\n\r\nHere is some data I collected after the build:\r\n\r\n<details><summary>Host <code>pmap -x</code> for the firecracker process</summary>\r\n\r\n```\r\n$ pmap -x 13600\r\n13600:   /firecracker --id=350d85c3 --seccomp-level=2 --start-time-us=6492836508670 --start-time-cpu-us=899 --api-sock=/api.socket\r\nAddress           Kbytes     RSS   Dirty Mode  Mapping\r\n0000000000400000    1724    1664       0 r-x-- firecracker\r\n0000000000400000       0       0       0 r-x-- firecracker\r\n00000000007af000      56      28       4 rw--- firecracker\r\n00000000007af000       0       0       0 rw--- firecracker\r\n00000000007bd000       8       8       8 rw---   [ anon ]\r\n00000000007bd000       0       0       0 rw---   [ anon ]\r\n0000000001fd6000     608     236     236 rw---   [ anon ]\r\n0000000001fd6000       0       0       0 rw---   [ anon ]\r\n00007f179200e000      16       0       0 rw---   [ anon ]\r\n00007f179200e000       0       0       0 rw---   [ anon ]\r\n00007f1792012000       8       0       0 -----   [ anon ]\r\n00007f1792012000       0       0       0 -----   [ anon ]\r\n00007f1792014000    2060     264     264 rw---   [ anon ]\r\n00007f1792014000       0       0       0 rw---   [ anon ]\r\n00007f1792217000       8       0       0 -----   [ anon ]\r\n00007f1792217000       0       0       0 -----   [ anon ]\r\n00007f1792219000    2052       8       8 rw---   [ anon ]\r\n00007f1792219000       0       0       0 rw---   [ anon ]\r\n00007f179241a000       8       0       0 -----   [ anon ]\r\n00007f179241a000       0       0       0 -----   [ anon ]\r\n00007f179241c000    2060       8       8 rw---   [ anon ]\r\n00007f179241c000       0       0       0 rw---   [ anon ]\r\n00007f179261f000       8       0       0 -----   [ anon ]\r\n00007f179261f000       0       0       0 -----   [ anon ]\r\n00007f1792621000    2052       8       8 rw---   [ anon ]\r\n00007f1792621000       0       0       0 rw---   [ anon ]\r\n00007f1792822000      12       8       8 rw-s-   [ anon ]\r\n00007f1792822000       0       0       0 rw-s-   [ anon ]\r\n00007f1792825000      12       8       8 rw-s-   [ anon ]\r\n00007f1792825000       0       0       0 rw-s-   [ anon ]\r\n00007f1792828000      12       8       8 rw-s-   [ anon ]\r\n00007f1792828000       0       0       0 rw-s-   [ anon ]\r\n00007f179282b000      12       8       8 rw-s-   [ anon ]\r\n00007f179282b000       0       0       0 rw-s-   [ anon ]\r\n00007f179282e000       4       4       4 rw-s- zero (deleted)\r\n00007f179282e000       0       0       0 rw-s- zero (deleted)\r\n00007f179282f000       4       4       4 rw-s- zero (deleted)\r\n00007f179282f000       0       0       0 rw-s- zero (deleted)\r\n00007f1792830000     228      12      12 rw---   [ anon ]\r\n00007f1792830000       0       0       0 rw---   [ anon ]\r\n00007f1792869000      12      12      12 rw-s- zero (deleted)\r\n00007f1792869000       0       0       0 rw-s- zero (deleted)\r\n00007f179286c000 4980736 4557596 4557596 rw-s- zero (deleted)\r\n00007f179286c000       0       0       0 rw-s- zero (deleted)\r\n00007f18c286c000 3407872   88472   88472 rw-s- zero (deleted)\r\n00007f18c286c000       0       0       0 rw-s- zero (deleted)\r\n00007f199286c000       8       0       0 rw---   [ anon ]\r\n00007f199286c000       0       0       0 rw---   [ anon ]\r\n00007f199286e000       8       0       0 -----   [ anon ]\r\n00007f199286e000       0       0       0 -----   [ anon ]\r\n00007f1992870000    2064      12      12 rw---   [ anon ]\r\n00007f1992870000       0       0       0 rw---   [ anon ]\r\n00007ffdebe34000     132      28      28 rw---   [ stack ]\r\n00007ffdebe34000       0       0       0 rw---   [ stack ]\r\n00007ffdebf97000      12       0       0 r----   [ anon ]\r\n00007ffdebf97000       0       0       0 r----   [ anon ]\r\n00007ffdebf9a000       8       4       0 r-x--   [ anon ]\r\n00007ffdebf9a000       0       0       0 r-x--   [ anon ]\r\nffffffffff600000       4       0       0 r-x--   [ anon ]\r\nffffffffff600000       0       0       0 r-x--   [ anon ]\r\n---------------- ------- ------- -------\r\ntotal kB         8401808 4648400 4646708\r\n```\r\n\r\n</details>\r\n\r\n<details><summary>Guest <code>free</code></summary>\r\n\r\n```\r\n              total        used        free      shared  buff/cache   available\r\nMem:        8173548      108572     7934896          16      130080     7867080\r\nSwap:             0           0           0\r\n```\r\n\r\n</details>\r\n  Hi, @edengarza, @amaniduncker, and I are students at UT and are looking to contribute to an open source project for our virtualization class. We were wondering if we could get assigned to this issue.\r\n\r\nThanks! Hi ! Sure, I assigned you to the issue. Please let us know if you need any help here.  > LGTM. Can you please squash the commits that add fixes on top of the first commits? Individual commits are supposed to successfully build.\r\n> \r\n> P.S. There might be an interface change before publishing vm-memory to crates.io: [rust-vmm/vm-memory#68](https://github.com/rust-vmm/vm-memory/pull/68)\r\n\r\nI squashed the commits that add fixes as you suggested.\r\n\r\nThanks for the heads-up regarding the interface change. Doesn't look very big. I will adapt this PR after that change is merged into mainline. Thanks very much to everyone involved! It's a great validation for rust-vmm/vm-memory.  It looks like the aarch64 build failed because of an API timeout in `integration_tests/functional/test_shut_down.py::test_reboot[ubuntu_with_ssh]` unrelated to my changes.  Can we re-drive this or do I need to push a dummy commit?  This issue appears to be fixed in `master` branch with PR #1497, not sure if that was intentional (bug not mentioned) or just happened by coincidence. But as this bug existed as of yesterday and in the current release, I thought I should share the details.\r\n\r\nIn VM logs, this bug looks like the following:\r\n\r\n```\r\ninstance:ERROR:src/devices/src/virtio/block.rs:374] Failed to parse available descriptor chain: DescriptorChainTooShort\r\n```\r\n\r\ntl;dr is that `checked_range_offset` function has off-by-one comparison bug which discards valid buffers and drops some read (or) write requests which eventually leads to filesystem corruption (if write requests are dropped).\r\n\r\nLong version:\r\n\r\nThere are three places in `parse` function which might return `DescriptorChainTooShort` error, I found out it was returned from:\r\n\r\n```rust\r\n        let data_desc;\r\n        let status_desc;\r\n        let desc = avail_desc\r\n            .next_descriptor()\r\n            .ok_or(Error::DescriptorChainTooShort)\r\n```\r\n\r\nSo the next buffer after the header doesn't have next. \r\n\r\nFunction `next_descriptor` depends on `has_next()`:\r\n\r\n```rust\r\n    /// Gets if this descriptor chain has another descriptor chain linked after it.\r\n    pub fn has_next(&self) -> bool {\r\n        self.flags & VIRTQ_DESC_F_NEXT != 0 && self.ttl > 1\r\n    }\r\n```\r\n\r\nBut this descriptor has next flag set and ttl was always pretty high.\r\n\r\nNext thing `next_descriptor()` depends on is `chained_new()` which itself returns `None` is built descriptor chain is `!is_valid()`.\r\n\r\n`is_valid()` was defined as:\r\n\r\n```rust\r\n    fn is_valid(&self) -> bool {\r\n        !(self\r\n            .mem\r\n            .checked_range_offset(self.addr, self.len as usize)\r\n            .is_none()\r\n            || (self.has_next() && self.next >= self.queue_size))\r\n    }\r\n```\r\n\r\nCondition `(self.has_next() && self.next >= self.queue_size)` was fine, so looked like `checked_range_offset(self.addr, self.len as usize)` returned `None.\r\n\r\nI inspected the actual buffer address and length and noticed that all of the problematic buffers laid exactly at the guest address space boundary (1536MB or 0x60000000):\r\n\r\nE.g.:\r\n\r\n```python\r\n>>> hex(1609826304 + 786432)\r\n'0x60000000'\r\n```\r\n\r\nFunction `checked_range_offset` had following source code:\r\n\r\n```rust\r\n    /// Returns the address plus the offset if base and the result belong to the same memory\r\n    /// region (Firecracker currently does not use adjacent memory regions, so distinct regions\r\n    /// always have a gap in-between).\r\n    pub fn checked_range_offset(&self, base: GuestAddress, offset: usize) -> Option<GuestAddress> {\r\n        if let Some(addr) = base.checked_add(offset as u64) {\r\n            for region in self.regions.iter() {\r\n                let last_addr = region.last_addr();\r\n                if base >= region.guest_base\r\n                    && base <= last_addr\r\n                    && addr >= region.guest_base\r\n                    && addr <= last_addr\r\n                {\r\n                    return Some(addr);\r\n                }\r\n            }\r\n        }\r\n        None\r\n    }\r\n```\r\n\r\nCode looks fine at the first glance, but if you look how `region.last_addr()` is defined:\r\n\r\n```rust\r\n    fn last_addr(&self) -> GuestAddress {\r\n        // unchecked_add is safe as the region bounds were checked when it was created.\r\n        self.guest_base\r\n            .unchecked_add((self.mapping.size() - 1) as u64)\r\n    }\r\n```\r\n\r\nIt returns address of the last bye of the region, which is off by one with `start + offset`. So check `addr <= last_addr` discarded perfectly valid buffers, as `addr == start + size`, while `last_addr = start + size - 1` basically.\r\n\r\nIn our case, this error leads to xfs data corruption during periods of high I/O.  Please consider developing this functionality on the `refactoring/epoll_handler` branch.\r\n\r\nI'm in the process of rebasing that branch on top of master so that we can merge. Any intermediate work should go to the refactoring branch so that it doesn't create conflicts.  Hi! When I'm running Firecracker v0.20.0 on my RPi 4 2GB (I have Ignite running too, woot!), it always exits with a non-zero code for some reason.\r\n\r\nI'm running the default getting started guide, and using the pre-provided guest & rootfs kernels.\r\nThis is the configuration:\r\n\r\n```json\r\n{\r\n  \"boot-source\": {\r\n    \"kernel_image_path\": \"/home/pi/fc-test/hello-vmlinux.bin\",\r\n    \"boot_args\": \"keep_bootcon console=ttyS0 reboot=k panic=1 pci=off\"\r\n  },\r\n  \"drives\": [\r\n    {\r\n      \"drive_id\": \"rootfs\",\r\n      \"path_on_host\": \"/home/pi/fc-test/hello-rootfs.ext4\",\r\n      \"is_root_device\": true,\r\n      \"is_read_only\": false\r\n    }\r\n  ],\r\n  \"machine-config\": {\r\n    \"vcpu_count\": 1,\r\n    \"mem_size_mib\": 512,\r\n    \"ht_enabled\": false\r\n  }\r\n}\r\n```\r\n\r\nHost kernel (config here: https://github.com/sakaki-/bcm2711-kernel-bis/blob/master/config):\r\n\r\n```\r\n# uname -a\r\nLinux rpi-commander 4.19.97-v8-c8fbe9c63ce7-p4-bis+ #2 SMP PREEMPT Tue Jan 21 14:01:59 GMT 2020 aarch64 GNU/Linux\r\n```\r\n\r\n```console\r\n$ rm -r /tmp/firecracker.socket && ./firecracker --api-sock /tmp/firecracker.socket --config-file config.json\r\n[boot process]\r\n$ # Connected to the guest now, kernel is default 4.14.x\r\n$ reboot\r\n[reboot process]\r\n         Starting Reboot...\r\n[   22.810582] reboot: Restarting system\r\n[   22.810582] reboot: Restarting system\r\n2020-01-28T22:15:19.318867294 [anonymous-instance:ERROR:src/vmm/src/vstate.rs:659] Unexpected exit reason on vcpu run: SystemEvent\r\n2020-01-28T22:15:19.319116216 [anonymous-instance:ERROR:src/vmm/src/signal_handler.rs:37] Shutting down VM after intercepting a bad syscall (135).\r\n```\r\n\r\nWhat do you think might be the issue? I've tried many different configurations, but it always (regardless of clean/panic guest exit) returns `Unexpected exit reason on vcpu run: SystemEvent`\r\n\r\nHelp would be very appreciated, thank you!\r\n\r\ncc @dianpopa @andreeaflorescu   Thanks @tidux for the issue! Indeed [this part of the FAQ](https://github.com/firecracker-microvm/firecracker/blob/master/FAQ.md#i-tried-using-an-initrd-for-boot-but-it-doesnt-seem-to-be-used-is-initrd-supported) is outdated.  With PR #1550 the `Vmm` object is wrapped in an Arc<Mutex> as it needs to implement the `EpollHandler` trait for the exit event.\r\n\r\nWe can change this in a future PR by either deciding on dropping Arc for all implementors of EpollHandler or just lock parts of the Vmm in an Arc which are actually needed for handling the read event. Sure, we can close this issue.  Done in #1550  The PRs on which this one depends are all merged now. You can go ahead and rebase. @serban300 can you also make the corresponding changes so that crates depend on GuestMemory and not GuestMemoryMmap? > > @serban300 can you also make the corresponding changes so that crates depend on GuestMemory and not GuestMemoryMmap?\r\n> \r\n> @andreeaflorescu there is a separate [issue](https://github.com/firecracker-microvm/firecracker/issues/1544) for this and I would like to implement it as part of a different PR or even a batch of PRs because it's not a blocker for the migration to `rust-vmm/vm-memory`.\r\n> \r\n> I plan to do it as soon as possible, but I would prefer to work incrementally here. There will be a lot of changes and I would like these PRs to be as easy to review as possible.\r\n\r\nI actually find it harder to review because you miss the bigger picture and there are a lot of PRs that need to pass the tests. We then need to chase away all references of GuestMemoryMmap and replace them with GuestMemory.  ## Reason for This PR\r\n\r\nSimplified the interface of EventManager:\r\n- Removed the pollable.rs abstractions.\r\n- Removed the wrapper over the HashMap of (fd, callback). We now use just insert, contains_key and get. Get does not create a clone of the entry anymore as it is no longer needed.\r\n- Removed EventHandlerData. The EventManager only keeps track of pollable fds and their corresponding callback.\r\n- Removed the implementation of cascaded epoll as it is not needed.\r\n- Removed the PollableOp builder. For registering events, the subscriber returns the epoll_events in a vector. The other usecase for PollableOp are now covered by calling the corresponding operations directly on the `event_manager` mutable reference.\r\n    \r\nThe EventHandler (now called Subscriber) trait now only has 2 methods:\r\n - interest_list: returns a list of events that the subscriber is interested in. These are added to epoll as soon as add_subscriber() is called.\r\n- process: handles the processing of the event. This is replacing `handle_*` functions from the previous interface in an attempt to give some more flexibility to the subscriber in terms of order in which events are processed, but also handling of errors which are now passed to the Subscriber implementation. We also pass a mutable reference to the event_manager when processing events so that the subscriber can call ADD/REMOVE/MODIFY directly.\r\n\r\n\r\n## Description of Changes\r\n\r\nDetails above.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [ ] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [ ] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [ ] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n @alexandruag @sandreim @acatangiu @iulianbarbu I think I've addressed all your comments. Please take another look.  When is dirty logging enabled? When/How is it disabled?\r\nDirty logging being enabled implies that (transparent) hugepages are not used which has performance implications. (Firecracker currently supports transparent hugepages, depending on the system configuration, correct?)\r\nWhat use cases/checkpointing interval lengths/downtimes do you want to support? > When is dirty logging enabled? When/How is it disabled?\r\n\r\nThe current design keeps dirty logging always enabled without any option of disabling it. The reasoning for this was to simplify the API and the UX.\r\n\r\n> Dirty logging being enabled implies that (transparent) hugepages are not used which has performance implications. (Firecracker currently supports transparent hugepages, depending on the system configuration, correct?)\r\n\r\nWe did not consider THP yet, but we are not aware of any limitations on kvm dirty page tracking and THP. Do you have any data points on this ?\r\n\r\n> What use cases/checkpointing interval lengths/downtimes do you want to support?\r\n\r\nWe are supporting both full and incremental snapshots. There are no constraints on checkpointing\r\nfrequency or interval. The snapshot/restore latency is very much dependent on the configuration of the microVM (vcpu count, devices, memory). The current design focuses on minimizing the snapshot size to enable very fast restore times (< 10ms). Creating snapshots will take longer than restoring them as it is directly correlated to the amount of I/O required to dump the kvm/vcpu/device states and dirty pages. > > We did not consider THP yet, but we are not aware of any limitations on kvm dirty page tracking and THP. Do you have any data points on this ?\r\n> \r\n> kvm_dirty_log (on x86_64 at least) supports only 4K pages.\r\n\r\nYes, specifically it means that the dirty bitmap will have the same size as for 4k pages instead of being 512x smaller, but I think it should not have affect the performance of the running microVM. > > > We did not consider THP yet, but we are not aware of any limitations on kvm dirty page tracking and THP. Do you have any data points on this ?\r\n> > \r\n> > \r\n> > kvm_dirty_log (on x86_64 at least) supports only 4K pages.\r\n> \r\n> Yes, specifically it means that the dirty bitmap will have the same size as for 4k pages instead of being 512x smaller, but I think it should not have affect the performance of the running microVM.\r\n\r\nIf dirty logging is enabled for a slot, only 4k PTE will be used for that slot. When you enable dirty logging and use PML for dirty logging large pages are zapped, if you are using write protection large pages are write protected. Subsequently, in both cases, pages faults will fault in 4k pages. As a consequence you are not getting the benefits of large pages. How much you are missing out on will, of course, depend on the benchmark and setup.\r\n[https://linux-mm.org/TransparentHugepage?action=AttachFile&do=get&target=transparent-hugepage.pdf](url) has a graph. For a kernel compile in a VM with a couple GB memory I recall a difference of about 10%. So now you need to figure out how big the difference is in the use cases you care about and if the simplicity of having dirty logging always enabled is worth whatever the impact is, even if you are not using snapshotting at all.\r\n\r\n> > What use cases/checkpointing interval lengths/downtimes do you want to support?\r\n> \r\n> We are supporting both full and incremental snapshots. There are no constraints on checkpointing\r\n> frequency or interval. The snapshot/restore latency is very much dependent on the configuration of the microVM (vcpu count, devices, memory). The current design focuses on minimizing the snapshot size to enable very fast restore times (< 10ms). Creating snapshots will take longer than restoring them as it is directly correlated to the amount of I/O required to dump the kvm/vcpu/device states and dirty pages.\r\n\r\nWhat I am wondering is, what trade-off between performance and complexity you want to make? Whatever the checkpointing technique, at some frequency the checkpointing overhead becomes prohibitive. Or suppose you want to be able to snapshot a VM without network connections timing out, for some (large) amount of memory that will not be possible. If you stop the VM and copy all memory that point will come earlier than if you use, say, pre-copy as in live migration.\r\nIf you want to evolve the snapshotting implementation, you might want to consider the implications for the API. For pre-copy that seems straight forward, you would add a create-diff-mem operation that can be called while the VM is running. Alternatively, you might decide to do post-copy via userfaultfd, in which case, I am guessing, you would add an option to do post copy to the existing snapshot operations and add some way to inform the user when the snapshot is done. > If dirty logging is enabled for a slot, only 4k PTE will be used for that slot. When you enable dirty logging and use PML for dirty logging large pages are zapped, if you are using write protection large pages are write protected. Subsequently, in both cases, pages faults will fault in 4k pages. As a consequence you are not getting the benefits of large pages. How much you are missing out on will, of course, depend on the benchmark and setup.\r\n> [https://linux-mm.org/TransparentHugepage?action=AttachFile&do=get&target=transparent-hugepage.pdf](url) has a graph. For a kernel compile in a VM with a couple GB memory I recall a difference of about 10%. So now you need to figure out how big the difference is in the use cases you care about and if the simplicity of having dirty logging always enabled is worth whatever the impact is, even if you are not using snapshotting at all.\r\n\r\nThanks for the deep and helpful comments, I was not aware of these limitations. We will discuss about huge pages support, use cases and see if/when we need to support them.\r\n\r\n> What I am wondering is, what trade-off between performance and complexity you want to make? Whatever the checkpointing technique, at some frequency the checkpointing overhead becomes prohibitive. Or suppose you want to be able to snapshot a VM without network connections timing out, for some (large) amount of memory that will not be possible. If you stop the VM and copy all memory that point will come earlier than if you use, say, pre-copy as in live migration.\r\n\r\nThe current design is not fine tuned for high frequency checkpointing and it focuses more on the ease of use. You are right about the network connectivity issue, the current design kind of assumes the potential loss of connectivity for microVMs with a large amount memory. \r\n\r\n> If you want to evolve the snapshotting implementation, you might want to consider the implications for the API. For pre-copy that seems straight forward, you would add a create-diff-mem operation that can be called while the VM is running. Alternatively, you might decide to do post-copy via userfaultfd, in which case, I am guessing, you would add an option to do post copy to the existing snapshot operations and add some way to inform the user when the snapshot is done.\r\n\r\nI think these are very good suggestions and look very promising as optimizations but it's a bit to early to do that now. Also maybe it is not a good approach to offer an async UX. We will do a deep dive of these subjects. Thanks for this valuable feedback.  We need to implement Drop for EventManager so that when the event manager object is destroyed the epoll fd is closed. We might also want to call unregister on all events.\r\n\r\nThis issue refers to the refactoring/epoll_handler branch.  ## Reason for This PR\r\n\r\nIn the case that the guest kernel is either non-cooperative (i.e. does not shut down when Ctrl-Alt-Delete is sent), or hangs and does not respond, it's convenient to be able to forcefully stop a microVM.\r\n\r\n## Description of Changes\r\n\r\nBuilding off the work done in #1414, I simply wired through use of `VcpuEvent::Exit`.\r\n\r\nFeedback is appreciated - this is my first time contributing to Firecracker!\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n It looks like the integration tests are failing with a code coverage error:\r\n```\r\nintegration_tests/build/test_coverage.py:94: in test_coverage\r\n    assert coverage >= min_coverage, coverage_low_msg\r\nE   AssertionError: Current code coverage (84.70%) is below the target (84.9%).\r\nE   assert 84.7033661893249 >= 84.85000000000001\r\n```\r\n\r\nI would appreciate advice on how to test the new code - do the python-based integration tests not count towards code coverage? @acatangiu - Hello, and thank you for taking a look!  I asked #1370 a while back about how to force-stop a Firecracker VM, and was told that `SIGKILL`ing the Firecracker process was the recommended method, but that \"the Firecracker process is killed, there is no guarantee of immediate cleanup\". I don't know enough about KVM to know if there would be a resource leak or other issue with simply `SIGKILL`ing the main Firecracker process; if doing that is perfectly safe and doesn't leak any KVM resources, then yes, this code is redundant.\r\n\r\nI'm happy to look into the KVM side further, if you have any pointers?\r\n\r\nThe other minor use-case is that it's possible to grant access to an unprivileged client to call `InstanceForceStop` via the control socket.  AFAIK, allowing someone to send `SIGKILL` to the Firecracker process would require that either they're (a) running as the same uid, which means that that uid also has direct access to `/dev/kvm` since Firecracker needs it, or (b) are running as root. > Killing the Firecracker process will not leak any host resources, kvm or otherwise.\r\n\r\nGood to know - thank you!\r\n\r\n> IO buffers both in the guest kernel and in the firecracker process don't get flushed so disk drives might end up in dirty states.\r\n\r\nYep, I would expect this to be true if I ever had to kill a Firecracker VM.\r\n\r\n> We could make sure to flush the firecracker internal buffers before closing the process, but without flushing the guest OS ones as well, it will not solve much - maybe just slightly decrease the probability of dirty disk states.\r\n\r\nDoes Firecracker guarantee that buffers are written to disk in the same order as the guest submits them?  Ignoring Firecracker's buffers for a second: if the guest is using a journaling filesystem, then killing the VM while it's running is the same as a power loss event, and as long as the guest code properly uses `fsync()` and a journaling filesystem, modern systems should handle this just fine.\r\n\r\nHowever, if Firecracker does not guarantee that it writes its' internal buffers to disk in order, then using `InstanceForceStop` becomes important, since that could break many filesystems' assumptions about how the disk works.\r\n\r\n> > I'm happy to look into the KVM side further, if you have any pointers?\r\n> \r\n> Looking into KVM further regarding what exactly?\r\n\r\nAh, sorry - I meant \"if you didn't know off the top of your head whether there'd be a leak\".\r\n\r\n Thank you very much for investigating this - it's greatly appreciated! Given the results, agreed that this change is unnecessary; thank you for your time.  @serban300 can you please open an issue in vm-memory as well to check with the maintainers if this is something they want tot do? I created a draft PR in `rust-vmm/vm-memory` : https://github.com/rust-vmm/vm-memory/pull/77  We should keep in mind that these tests also need to be exercised on aarch64. There are multiple issues which bring down the overall performance of our block device emulation. I am listing them below sorted by their impact (from high to low):\r\n- Serial block file I/O\r\n- Guest interrupt rate\r\n- Double processing of virtio descriptors (in parse() and execute())\r\n\r\nSerializing the block file I/O also serializes the latencies of each IO request resulting in very low throughput (4-5k IOPS) on nvme SSDs. This also temporarly blocks our emulation thread, meaning increased latency in all other emulated devices. Possible solutions:\r\n- Implement AIO (io_submit) which is available since Linux 2.5.x\r\n- Implement io_uring (Linux 5.1+) - https://lwn.net/Articles/776703/\r\n\r\nAn increased guest interrupt rate adds significant overhead in the guest due to frequent context switches. Possible solutions: driver and device event suppression / Interrupt mitigation\r\n @andreeaflorescu Yes we do have #1600.    Done in #1550  ## Description of Changes\r\n\r\nThis PR includes:\r\n\r\n- Changed level representation of seccomp from u32 to u8.\r\n- Some code and docs adjustments.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n @aghecenco I have also changed some other codes in [52da735](https://github.com/firecracker-microvm/firecracker/commit/52da735d31811ff2675a95d2a2a093a3a826d105) other than modifying of level representation. it that ok \ud83d\ude42? @aghecenco applied changes as like you suggested \ud83d\ude42. @aghecenco please take a another look \ud83d\ude42.  ## Reason for This PR\r\n\r\nRefactor net device and drive it with polly #1526 .\r\n\r\n## Description of Changes\r\n\r\nIn this PR the net device is ported on polly IO event manager.\r\nThe changes contained by this PR are as follows:\r\n- added edge triggered event type to polly\r\n- aggregated the information from `NetEpollHandler`, `RxVirtio`, `TxVirtio`, `Net` into one single struct `Net`.\r\n- implemented `handle_read` for `Net` device, which is now also a polly `EventHandler`, and can\r\nhandle events related to Net device (queue events, tap events, rate limiter events).\r\n- provided a single execution path which registers the `Net` device and also handles the `PATCH` rate limiters request from microvm runtime.\r\n- separated the Net device into specific and self contained components, which resembles the `Block` refactoring, which will help us to draw a more generic view of devices.\r\n- ported net unit tests on polly.\r\n\r\nNote: the commits are reflecting incremental changes in the refactoring (which might present changes to changes), but the overall changes are reflected in the commit description, so keep this in mind when reviewing.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [ ] Docs have been provided.\r\n- [ ] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n  @serban300 most of these renames will need to be reverted once we switch to vm-memory because we will want crates to take a dependency on the GuestMemory trait and not the mmap implementation. Crates that take dependency on vm-memory should only be using the trait. > > @serban300 most of these renames will need to be reverted once we switch to vm-memory because we will want crates to take a dependency on the GuestMemory trait and not the mmap implementation. Crates that take dependency on vm-memory should only be using the trait.\r\n> \r\n> Yes, but I would suggest to migrate like this and then do those changes incrementally as part of another item.\r\n\r\nWhat would be the benefit in doing that?\r\n\r\n   The `rescan_block_device` function (which can only be triggered after the guest has booted up) does not update `disk_nsectors` field. This field is used in the `process_queue` so it is vital to the good functioning of the block's transport requests.\r\nThe change fixing this bug should also make sure this duplicated warning ([here](https://github.com/firecracker-microvm/firecracker/blob/refactoring/epoll_handler/src/devices/src/virtio/block.rs#L509) and [here](https://github.com/firecracker-microvm/firecracker/blob/refactoring/epoll_handler/src/vmm/src/controller.rs#L88)) gets deduplicated and is used both when `Block::new` is created and also at `rescan_block_device`.  Signed-off-by: karthik nedunchezhiyan <karthik1705.n@gmail.com>\r\n\r\n## Reason for This PR\r\n\r\n`--api-sock` value was constant in jailer and not allowed to modify by the user.\r\n\r\n## Description of Changes\r\n\r\nRemoved constant `--api-sock` from the jailer. Now user can pass `--api-sock` value as an extra argument (after --) to the jailer.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [ ] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [ ] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [ ] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n > I would like to understand why this change is needed.\r\n> \r\n> From the usability point of view, it is easier for users of Firecracker to have the api socket created for them inside the jail at a know location (`/root/api.socket`). Changing this is breaking backwards compatibility, and I don't see any obvious benefit for doing it.\r\n> \r\n> If there is no good reason to change the existing behavior, I find it more clear as it is right now.\r\n> \r\n> Could you explain a bit the reasoning behind the PR?\r\n\r\n@andreeaflorescu apart from the obvious reason that some users might want to modify the location of the api socket when using a jailed Firecracker, this PR solves an inconsistency also: when FIrecracker is jailed, the default location is `{chroot}/api.socket` while with a non-jailed Firecracker, the default location is `/tmp/firecracker.socket`.  To me, it does not look nice :) \r\nAdditionally, there is also the scenario when the user wants to make use of the extra-args feature (i.e `--`) and pass another api socket through the jailer and notice that nothing happens, isn t it weird?\r\nI totally agree that from a usability point of view, it is easier for users of Firecracker to have the api socket created for them. But this still happens with this PR, right? The breaking of compatibility lies in the fact that when jailed, the location of the socket will be `{chroot}/tmp/firecracker.socket`. I propose we have a good discussion with the team and conclude whether or not backwards compatibility is reason enough to compromise consistency and flexibility. > Additionally, there is also the scenario when the user wants to make use of the extra-args feature (i.e `--`) and pass another api socket through the jailer and notice that nothing happens, isn t it weird?\r\n\r\nThis is a really good point that I've missed. I think the miss on our part is that we created the jailer after we defined the UX for Firecracker and never got back to it to see if it still makes sense in that context. Our internal customers use Firecracker exclusively with the jailer which was also why we ignored the inconsistent behavior and the fact that whatever we pass to `--api-socket` is discarded. How about we open an issue regarding this?\r\n\r\nSince we want to make progress on Firecracker UX this year and offer a better usage pattern, I think we should think a bit more about how we want to fix the inconsistency that you're mentioning. I don't think the solution here is obvious, nor straightforward.\r\n\r\nFor example, having the api socket under `/tmp/firecracker.socket` by default inside the chroot is not an obvious choice to me. My thinking is that the chroot lives as long as the firecracker process lives. In this context, the api socket is not a temporary resource, but rather a permanent one. Hence, placing it by default under a temporary directory (`/tmp`) inside the chroot is misleading when looking at the bigger picture. > @dianpopa\r\n> \r\n> > some users might want to modify the location of the api socket when using a jailed Firecracker\r\n> \r\n> I don't see this as a necessity, not just because nobody asked for it, but because users already kinda have this possibility because they pick the jail's ID, which in turn defines the chroot's path, and the socket will be at a known location (by default) under that path. I think that's a + on usability.\r\n> \r\n> @andreeaflorescu\r\n> \r\n> > the chroot lives as long as the firecracker process lives\r\n> \r\n> Or longer, because Firecracker doesn't clean it up, which means that...\r\n> \r\n> > In this context, the api socket is not a temporary resource, but rather a permanent one. Hence, placing it by default under a temporary directory (`/tmp`) inside the chroot is misleading when looking at the bigger picture.\r\n> \r\n> ...from the host's point of view, it's not a temporary location, unless the whole chroot root (heh) is temporary, in which case it's so because the user explicitly wanted it to be.\r\n> \r\n> So, my suggestion is to remvoe `--api-socket` from the jailer's parameters, and change no defaults, WDYT?\r\n\r\nThe jailer does not have a `--api-socket` parameter. It hardcodes a [location/name](https://github.com/firecracker-microvm/firecracker/blob/master/src/jailer/src/main.rs#L25) and then it [passes](https://github.com/firecracker-microvm/firecracker/blob/master/src/jailer/src/env.rs#L298) it  to Firecracker which has an `--api-socket` parameter. Did I understand correctly your proposal? > I think the direction proposed in this PR is the right one and mostly matches all your comments:\r\n> \r\n> > The `jailer` should not concern itself with the api socket in any way. It should just build the jail and pass any firecracker-relevant parameters directly to firecracker through the use of the newly-ish added `--` mechanism.\r\n\r\nThis sounds sane to me. Just to re-iterate, we remove the `--api-sock` parameter from the jailer. To specify a non-default api socket path, you will use the firecracker parameter `--api-sock` which can be provided to the jailer via the extra arguments which are sent without change from the jailer to the firecracker binary.  \r\n\r\n>  * when no such param is provided, it will just default to some path (currently `/tmp/firecracker.socket`, subject to change in a different PR if there is a case to do so).\r\n\r\nI would like to re-iterate this part. Placing the api socket inside `/tmp` is not a sane default. The api socket is not a temporary resource. Since we are fixing a broken behavior and changing the default path of the api socket inside the chroot (when using the jailer), we should also make sure that this new default is the appropriate one. I strongly believe that changing the default directory should not happen in a separate PR. My reasoning is as follows:\r\n- /tmp is not the appropriate directory\r\n- we are making a breaking change by placing it inside the chroot under /tmp. There is no need to have another PR to break that compatibility again just to fix a problem that we didn't have when running with the jailer.\r\n\r\nI also chatted with @dhrgit a bit about this and the default directory we were thinking about is `/var/run`or `/run`. This seems to be the generally accepted directory for runtime variables. See some documentation [here](https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch03s15.html).\r\n\r\n > I also chatted with @dhrgit a bit about this and the default directory we were thinking about is /var/run or /run. This seems to be the generally accepted directory for runtime variables. See some documentation here.\r\n\r\nNice suggestion @andreeaflorescu , we can prefer `/run` over `/var/run`, the reason why `/run` introduced and preferred is explained [here](https://lwn.net/Articles/436012/), just my opinion \ud83d\ude42 > > I think the direction proposed in this PR is the right one and mostly matches all your comments:\r\n> > > The `jailer` should not concern itself with the api socket in any way. It should just build the jail and pass any firecracker-relevant parameters directly to firecracker through the use of the newly-ish added `--` mechanism.\r\n> \r\n> This sounds sane to me. Just to re-iterate, we remove the `--api-sock` parameter from the jailer. To specify a non-default api socket path, you will use the firecracker parameter `--api-sock` which can be provided to the jailer via the extra arguments which are sent without change from the jailer to the firecracker binary.\r\n> \r\n> > * when no such param is provided, it will just default to some path (currently `/tmp/firecracker.socket`, subject to change in a different PR if there is a case to do so).\r\n> \r\n> I would like to re-iterate this part. Placing the api socket inside `/tmp` is not a sane default. The api socket is not a temporary resource. Since we are fixing a broken behavior and changing the default path of the api socket inside the chroot (when using the jailer), we should also make sure that this new default is the appropriate one. I strongly believe that changing the default directory should not happen in a separate PR. My reasoning is as follows:\r\n> \r\n> * /tmp is not the appropriate directory\r\n> * we are making a breaking change by placing it inside the chroot under /tmp. There is no need to have another PR to break that compatibility again just to fix a problem that we didn't have when running with the jailer.\r\n> \r\n> I also chatted with @dhrgit a bit about this and the default directory we were thinking about is `/var/run`or `/run`. This seems to be the generally accepted directory for runtime variables. See some documentation [here](https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch03s15.html).\r\n\r\nSounds good to me too! Only one little litle obs, the jailer does not have a `--api-sock` parameter. @KarthikNedunchezhiyan could you please rename the PR/adjust the commit to something more accurate? Something like:\r\n`jailer: remove hardcoded api socket location`? Your first commit mentions a change that is done in the second commit. A solution would be to simply change the order of the commits. You can do that with `git rebase -i`.  Reviewing, please do not merge. Thanks!  ## Reason for This PR\r\n\r\nIt's been decided we're not going to upstream the `checked_range_offset`\r\nand the modified version of `get_host_address` to `vm-memory`, and these\r\nchanges bring things in line with the future `vm-memory` integration.\r\n\r\n`checked_range_offset` has been removed entirely, together with the\r\nassociated check in `DescriptorChain::is_valid`. The validity of memory\r\naccesses is checked at the time of read/write when the device model\r\ncalls `GuestMemory` methods. Vsock devices are currently an exception,\r\nbut they do enforce their own validations via `get_host_address` (the\r\ntwo parameter version, that won't get upstreamed). On that\r\nfront, we revert `GuestMemory::get_host_address` to the original, single\r\nparameter version, and add a new one local to `vsock/packet.rs` that\r\nimplements the two-parameter behavior, to keep current validation\r\nfunctionality. As we transition to `vm-memory`, we'll decide what\r\nprimitive we'll base the check on (seems like `GuestMemory::do_in_region`\r\nwill not be available anymore). Also, in the longer term we plan to\r\nswitch the Vsock implementation to do all accesses via a `GuestMemory`\r\nabstraction, but that's still incipient at this point.\r\nFixes #1296.\r\n\r\nSigned-off-by: Alexandru Agache <aagch@amazon.com>\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is\r\n      clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n Rebased, please take one more look.  Fixes #1296   Reviewing, please don't merge yet. Just finished having a look at the latest changes and I don't think there are any immediate concerns, besides just reiterating that we'll have to add a bit more work towards having a generic (in terms of devices and memory for example) way of building and running a Vmm. Atm, looks like it's best to add this and other potential finishing touches after the ongoing device & polly efforts.  Reviewing, please don't merge yet.  Kioxia is experimenting to bring Native Flash access via API to Cloud Applications, Firecracker is one of the cloud applications I am porting to use this API. I was curious if there's interest in pursuing something like this.\r\n\r\nFirecracker can use flash more efficiently by managing the flash (NAND) directly, rather than letting the SSD control where the data is written, or when certain things like garbage collection occur. I thought this may be useful for microVMs that compete for storage resources on the same storage devices.\r\n\r\nThe benefit would be an SSD that last many times longer and speeds up reads/writes by allowing control of the SSD's internal garbage collection (among other things), which is known to stall critical reads/writes in traditional SSDs.\r\n\r\n@andreeaflorescu - as you requested that I file an issue for easier tracking Hi @acatangiu, thanks for your response.\r\n\r\nTo answer your questions:\r\n- Would it work with another process instead of the OS filesystem?\r\n    - Correct, it does not use the OS filesystem.\r\n- Would it do device passthrough?\r\n    - Similar in concept, but it goes a level further: Flash Passthrough.\r\n- How would that work from Firecracker's perspective?\r\n   - Firecracker would use the new API to directly access Flash from the microVMs\r\n   - A sample FTL is part of the SDK that puts the host in control of garbage collection, wear leveling and over-provisioning to maintain control on latency and data placement (this FTL can be replaced with one of your own internal design).\r\n\r\nWe can can organize a call to get you more details about the project if you would like to learn more? \r\n Hi @acatangiu , just checking in. Let me know how the discussions go, I'm looking forward to your response. Hi @acatangiu , @iulianbarbu ,\r\n\r\nThank you again for your questions and considering this feature.\r\n\r\nI want to let you know that our public announcement about Software-Enabled Flash\u2122 Technology has been released: [KIOXIA Redefines Hyperscale Digital Storage](https://www.businesswire.com/news/home/20200428005232/en/KIOXIA-Redefines-Hyperscale-Digital-Storage-Software-Enabled-Flash).\r\n\r\nIn addition to the public announcement, there will be a presentation at the virtualOCP summit with material similar to the introduction we have given you a few weeks ago.  The presentation will be given on Wednesday May 13th at 10:30 am: [Link to OCP Summit Virtual Meeting](https://2020ocpvirtualsummit.sched.com/event/bXaR/why-are-you-still-using-flash-like-a-drive-presented-by-kioxia).\r\n\r\nThe good news:  virtualOCP [Registration](https://www.opencompute.org/summit/global-summit/registration) is free for all attendees. \r\nPlease join us online at the summit to learn more about this exciting technology.\r\n\r\nRegards,\r\n-Remington\r\n  Should we remove testrun.sh? It doesn't look like we keep it up to date and the preferred way of running the tests is with the `devtool`.\r\n\r\nCC: @firecracker-microvm/compute-capsule   ## Reason for This PR\r\n\r\n- Closes #1411 \r\n- Closes #1454 \r\n- integration test suite run time down from ~7min to ~3min (on m5d.metal);\r\n- single test rerun overhead eliminated (used to be ~1min, i.e. release binary build time).\r\n\r\n## Description of Changes\r\n\r\n- Added a pytest plugin and the necessary plumbing to enable running the\r\n  integration tests concurrently. This plugin adds a new command line\r\n  option to pytest - `--concurrency`, allowing the user to choose the\r\n  max number of worker processes that may be spawned during an integration\r\n  test run.\r\n- Made the test session root dir truely session-unique, so that\r\n  multiple test sessions can run concurrently;\r\n- Removed the option to keep the test session root dir alive across test\r\n  sessions, since it is no longer useful;\r\n- Updated the process startup time test to use different thresholds for\r\n  x86_64 and aarch64, since m5d.metal and a1.metal instances perform\r\n  quite differently.\r\n- Improved code coverage computation precision to 0.01%. Also relaxed\r\n  the coverage test threshold to 0.05%.\r\n- Fixed a bug in the integration testing framework, that would cause the\r\n  jailer context cleanup code to unlink more than just its own jail\r\n  directory.\r\n- Switched to running unit tests in release mode.\r\n- Removed the standalone build tests, all builds are covered by running\r\n  unit tests and the coverage test.\r\n- Reuse the release binaries for integration testing.\r\n  Instead of building the Firecracker binaries from scratch with\r\n  each test run, the integration tests now perform a `cargo build\r\n  --release` and use the binaries placed in the workspace target dir. The\r\n  build command is issued with each testrun, thus ensuring all source\r\n  changes are picked up, but also makes use of the rust/cargo build cache\r\n  to elide unnecessary rebuilds.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is (loosely) linked to an issue, and the reasons are clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [ ] No docs need to be updated.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no use impact.\r\n- [x] No new `unsafe` code has been added.\r\n After this change there seems to be a difference in number of integration tests skipped.\r\nTake x86_64, on a previous PR 1471 there are 68 passed, 2 skipped, while on this one, there are 50 passed, 20 skipped. \r\n > > Take x86_64, on a previous PR 1471 there are 68 passed, 2 skipped, while on this one, there are 50 passed, 20 skipped.\r\n> \r\n> On x86_64 it looks the same now (68 + 2) and on aarch64 20 are skipped indeed, but they're skipped with the current CI too. See [a sample log](https://firecracker-pr.s3.amazonaws.com/pr-logs/aarch64/01471/serban300-firecracker-a9f47be.log).\r\n\r\nI looked again and seems fine. Maybe I mixed the outputs. \r\nPlease consider this resolved.  ## Reason for This PR\r\n\r\nimplements #1470 \r\n\r\n## Description of Changes\r\n\r\nProvided in the commits description.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n > Had some pending nits before the `push -f` smile The `memory_model` functions that have been migrated to the `Bytes` trait should still be documented with usage examples, they show up in the generated documentation. Besides, we already have the comments, they just need to be adapted.\r\n\r\nGood point. Done. > For example here .\r\n\r\nThat line should be covered by\r\n\r\n    // We make the prev desc write_only (with no other flag) to get a chain which is\r\n    // writable, but too short.\r\n\r\nPerhaps you're thinking of the tx PartialBuffer case, which is indeed not covered (you probably could test it by creating a descriptor that ends after the end of memory).  There are two ways of approaching a better implementation for achieving with ease temporary file/directory creation/management:\r\n\r\n1. We consume `rust-vmm/vmm-sys-util` crate TempFile and TempDir structs inside Firecracker. These structs miss file operations implementations, like read, write and seek. We need this support from within `rust-vmm/vmm-sys-util` crate, and consume it like that in Firecracker, because otherwise it would mean to add wrappers inside Firecracker. It is worth mentioning that while we would implement these file operations, we should take into account that when we read and write to files, we have to open files with specific file permissions. So we might want to add support for file permissions too.\r\n\r\n2. There is another suggestion that says that when creating a temporary file/directory, we should unlink it immediately, then return a `File` that represent the handle for that unliked file/directory, that we're gonna operate with, and leave altogether the `TempFile`/`TempDir` structs as builders for these temporary files. This would simplify a lot the implementation, and wouldn't need any support for file operation, as the current implementation needs. Should we add this issue in rust-vmm/vmm-sys-util instead so more people can chime in? Option 2 is not an alternative to option 1 - option 1 assumes that we change nothing in rust-vmm and implement the missing functionality in Firecracker. I don't like that; tempfile I/O is unrelated to the consumer of the tempfiles, and I find the I/O functionality basic enough to make sense in the standalone vmm-sys-util crate.\r\n\r\nIf we all agree that this makes sense, we should move the implementation discussion to rust-vmm. > Option 2 is not an alternative to option 1 - option 1 assumes that we change nothing in rust-vmm and implement the missing functionality in Firecracker. I don't like that; tempfile I/O is unrelated to the consumer of the tempfiles, and I find the I/O functionality basic enough to make sense in the standalone vmm-sys-util crate.\r\n> \r\n> If we all agree that this makes sense, we should move the implementation discussion to rust-vmm.\r\n\r\nWe are on the same page here, tempfile I/O should be included in standalone vmm-sys-util crate and I will open an issue there.\r\n\r\nTo be clear, in Option 1 I was referring to the addition of file operations functionality inside `rust-vmm/vmm-sys-util` crate. Can you tell me what led you to the opposite conclusion? > To be clear, in Option 1 I was referring to the addition of file operations functionality inside `rust-vmm/vmm-sys-util` crate. Can you tell me what led you to the opposite conclusion?\r\n\r\nI guess I got stuck on `otherwise it would mean to add wrappers inside Firecracker` and got the wrong idea, thanks for clarifying :+1:  > > To be clear, in Option 1 I was referring to the addition of file operations functionality inside `rust-vmm/vmm-sys-util` crate. Can you tell me what led you to the opposite conclusion?\r\n> \r\n> I guess I got stuck on `otherwise it would mean to add wrappers inside Firecracker` and got the wrong idea, thanks for clarifying \ud83d\udc4d\r\n\r\nYep, sure. \ud83d\udc4d \r\nOpened https://github.com/rust-vmm/vmm-sys-util/pull/60.\r\n\r\n  Firecracker-containerd recently updated a test case that previously ran 5 VMs to now run 100 and started seeing the following errors occur in ~0-3 VMs per test case ([issue](https://github.com/firecracker-microvm/firecracker-containerd/issues/358)).\r\n\r\nAs part of terminating VMs, we tell systemd in the guest to reboot the system. Most of the time this works fine, we see `reboot: machine restart` in the systemd logs and the VMM exits with 0 as expected right after.\r\n\r\nOccasionally though, the guest reaches that `reboot: machine restart` line and then we see a few logs lines from Firecracker like:\r\n```\r\n2019-12-06T20:29:30.007995741 [anonymous-instance:INFO] Received KVM_EXIT_SHUTDOWN signal\r\n2019-12-06T20:29:30.008087608 [anonymous-instance:ERROR] Shutting down VM after intercepting a bad syscall (14).\r\n```\r\nFollowed by the VMM exiting with code 148. The [KVM_EXIT_SHUTDOWN case](https://github.com/firecracker-microvm/firecracker/blob/b359722c23ec69a27b74fbfe2de434a7caa1a4b5/src/vmm/src/vstate.rs#L586) and bad syscall (which appears to be rt_sigprocmask) ~seem to only ever occur together (never just one or the other)~ and only right after the reboot call should be occurring. \r\n  * EDIT: I've now very rarely seen `KVM_EXIT_SHUTDOWN` occur without an accompanying `rt_sigprocmask` call that results in the seccomp violation. When `KVM_EXIT_SHUTDOWN` occurs by itself, the VMM exits with 0 with no apparent issues.\r\n\r\nAdditionally, I don't see this for every VM that exits like that, but am occasionally getting a line like this in dmesg after a run of the test case where failures occur:\r\n```\r\n[10548769.845897] traps: fc_vcpu0[52462] trap invalid opcode ip:527d36 sp:7f7ee67f0590 error:0 in firecracker[400000+1ab000]\r\n```\r\nNo idea if it's related or, if it is, why it wouldn't be written every time a VM exits with KVM_EXIT_SHUTDOWN+the bad syscall, but figured it was worth mentioning.\r\n\r\nThis same behavior occurs in both 0.19 (w/ rust1.35+musl) and a 0.20 binary I built from [here](https://github.com/serban300/firecracker/tree/release) (w/ rust1.38+musl).\r\n\r\nLet us know what, if anything, would be helpful for further reproducing or debugging as it seems to be a pretty rare issue. We can run our 100 VM test case with debugging binaries and/or see if it's possible to make docker container reproducer for you to use or something like that. Hey @sipsma, last time we saw `sigprocmask`  causing trouble, it originated in Firecracker aborting. See https://github.com/firecracker-microvm/firecracker/issues/1088#issuecomment-539919561.\r\n\r\nDo you collect metrics for the running vms? If so, do any of them emit `vmm.panic_count = 1`? @aghecenco I updated the test to flush the metrics fifo to our logs, but it doesn't look like `panic_count` ever goes above 0.\r\n\r\nIt's a bit hard to read at the moment, but these are some example firecracker-containerd logs showing systemd reaching the reboot stage, a final metrics flush showing `seccomp.num_faults` increasing to 1, `panic_count` staying at 0 and then the `KVM_EXIT_SHUTDOWN`:\r\n```\r\ntime=\"2019-12-11T00:53:04.456768154Z\" level=debug msg=\"[   82.599987] reboot: machine restart\" jailer=noop runtime=aws.firecracker vmID=24 vmm_stream=stdout\r\ntime=\"2019-12-11T00:53:04.458145569Z\" level=info msg=\"{\\\"utc_timestamp_ms\\\":17034742,\\\"api_server\\\":{\\\"process_startup_time_us\\\":0,\\\"process_startup_time_cpu_us\\\":0,\\\"sync_response_fails\\\":0,\\\"sync_vmm_send_timeout_count\\\":0},\\\"block\\\":{\\\"activate_fails\\\":0,\\\"cfg_fails\\\":0,\\\"event_fails\\\":0,\\\"execute_fails\\\":0,\\\"invalid_reqs_count\\\":0,\\\"flush_count\\\":0,\\\"queue_event_count\\\":87,\\\"rate_limiter_event_count\\\":0,\\\"update_count\\\":0,\\\"update_fails\\\":0,\\\"read_bytes\\\":1884160,\\\"write_bytes\\\":0,\\\"read_count\\\":1840,\\\"write_count\\\":0},\\\"get_api_requests\\\":{\\\"instance_info_count\\\":0,\\\"instance_info_fails\\\":0,\\\"machine_cfg_count\\\":0,\\\"machine_cfg_fails\\\":0},\\\"i8042\\\":{\\\"error_count\\\":0,\\\"missed_read_count\\\":0,\\\"missed_write_count\\\":0,\\\"read_count\\\":10,\\\"reset_count\\\":10,\\\"write_count\\\":10},\\\"logger\\\":{\\\"missed_metrics_count\\\":0,\\\"metrics_fails\\\":0,\\\"missed_log_count\\\":0,\\\"log_fails\\\":0},\\\"mmds\\\":{\\\"rx_accepted\\\":0,\\\"rx_accepted_err\\\":0,\\\"rx_accepted_unusual\\\":0,\\\"rx_bad_eth\\\":0,\\\"rx_count\\\":0,\\\"tx_bytes\\\":0,\\\"tx_count\\\":0,\\\"tx_errors\\\":0,\\\"tx_frames\\\":0,\\\"connections_created\\\":0,\\\"connections_destroyed\\\":0},\\\"net\\\":{\\\"activate_fails\\\":0,\\\"cfg_fails\\\":0,\\\"event_fails\\\":0,\\\"rx_queue_event_count\\\":0,\\\"rx_event_rate_limiter_count\\\":0,\\\"rx_tap_event_count\\\":0,\\\"rx_bytes_count\\\":0,\\\"rx_packets_count\\\":0,\\\"rx_fails\\\":0,\\\"rx_count\\\":0,\\\"tx_bytes_count\\\":0,\\\"tx_fails\\\":0,\\\"tx_count\\\":0,\\\"tx_packets_count\\\":0,\\\"tx_queue_event_count\\\":0,\\\"tx_rate_limiter_event_count\\\":0,\\\"tx_spoofed_mac_count\\\":0},\\\"patch_api_requests\\\":{\\\"drive_count\\\":0,\\\"drive_fails\\\":0,\\\"network_count\\\":0,\\\"network_fails\\\":0,\\\"machine_cfg_count\\\":0,\\\"machine_cfg_fails\\\":0},\\\"put_api_requests\\\":{\\\"actions_count\\\":0,\\\"actions_fails\\\":0,\\\"boot_source_count\\\":0,\\\"boot_source_fails\\\":0,\\\"drive_count\\\":0,\\\"drive_fails\\\":0,\\\"logger_count\\\":0,\\\"logger_fails\\\":0,\\\"machine_cfg_count\\\":0,\\\"machine_cfg_fails\\\":0,\\\"network_count\\\":0,\\\"network_fails\\\":0},\\\"rtc\\\":{\\\"error_count\\\":0,\\\"missed_read_count\\\":0,\\\"missed_write_count\\\":0},\\\"seccomp\\\":{\\\"num_faults\\\":1},\\\"vcpu\\\":{\\\"exit_io_in\\\":2386,\\\"exit_io_out\\\":4013,\\\"exit_mmio_read\\\":67,\\\"exit_mmio_write\\\":67,\\\"failures\\\":0,\\\"filter_cpuid\\\":0},\\\"vmm\\\":{\\\"device_events\\\":87,\\\"panic_count\\\":0},\\\"uart\\\":{\\\"error_count\\\":0,\\\"flush_count\\\":3125,\\\"missed_read_count\\\":0,\\\"missed_write_count\\\":0,\\\"read_count\\\":0,\\\"write_count\\\":3125},\\\"memory\\\":{\\\"dirty_pages\\\":0},\\\"signals\\\":{\\\"sigbus\\\":0,\\\"sigsegv\\\":0}}\" runtime=aws.firecracker vmID=24\r\ntime=\"2019-12-11T00:53:04.458245752Z\" level=info msg=\"2019-12-11T00:53:04.457914317 [anonymous-instance:INFO] Received KVM_EXIT_SHUTDOWN signal\" runtime=aws.firecracker vmID=24\r\ntime=\"2019-12-11T00:53:04.458262721Z\" level=info msg=\"2019-12-11T00:53:04.457987795 [anonymous-instance:ERROR] Shutting down VM after intercepting a bad syscall (14).\" runtime=aws.firecracker vmID=24\r\ntime=\"2019-12-11T00:53:04.519096648Z\" level=warning msg=\"firecracker exited: exit status 148\" runtime=aws.firecracker vmID=24\r\n```\r\n\r\nThe pretty-printed metrics json, in case it's helpful:\r\n```\r\n{\r\n  \"utc_timestamp_ms\": 17034742,\r\n  \"api_server\": {\r\n    \"process_startup_time_us\": 0,\r\n    \"process_startup_time_cpu_us\": 0,\r\n    \"sync_response_fails\": 0,\r\n    \"sync_vmm_send_timeout_count\": 0\r\n  },\r\n  \"block\": {\r\n    \"activate_fails\": 0,\r\n    \"cfg_fails\": 0,\r\n    \"event_fails\": 0,\r\n    \"execute_fails\": 0,\r\n    \"invalid_reqs_count\": 0,\r\n    \"flush_count\": 0,\r\n    \"queue_event_count\": 87,\r\n    \"rate_limiter_event_count\": 0,\r\n    \"update_count\": 0,\r\n    \"update_fails\": 0,\r\n    \"read_bytes\": 1884160,\r\n    \"write_bytes\": 0,\r\n    \"read_count\": 1840,\r\n    \"write_count\": 0\r\n  },\r\n  \"get_api_requests\": {\r\n    \"instance_info_count\": 0,\r\n    \"instance_info_fails\": 0,\r\n    \"machine_cfg_count\": 0,\r\n    \"machine_cfg_fails\": 0\r\n  },\r\n  \"i8042\": {\r\n    \"error_count\": 0,\r\n    \"missed_read_count\": 0,\r\n    \"missed_write_count\": 0,\r\n    \"read_count\": 10,\r\n    \"reset_count\": 10,\r\n    \"write_count\": 10\r\n  },\r\n  \"logger\": {\r\n    \"missed_metrics_count\": 0,\r\n    \"metrics_fails\": 0,\r\n    \"missed_log_count\": 0,\r\n    \"log_fails\": 0\r\n  },\r\n  \"mmds\": {\r\n    \"rx_accepted\": 0,\r\n    \"rx_accepted_err\": 0,\r\n    \"rx_accepted_unusual\": 0,\r\n    \"rx_bad_eth\": 0,\r\n    \"rx_count\": 0,\r\n    \"tx_bytes\": 0,\r\n    \"tx_count\": 0,\r\n    \"tx_errors\": 0,\r\n    \"tx_frames\": 0,\r\n    \"connections_created\": 0,\r\n    \"connections_destroyed\": 0\r\n  },\r\n  \"net\": {\r\n    \"activate_fails\": 0,\r\n    \"cfg_fails\": 0,\r\n    \"event_fails\": 0,\r\n    \"rx_queue_event_count\": 0,\r\n    \"rx_event_rate_limiter_count\": 0,\r\n    \"rx_tap_event_count\": 0,\r\n    \"rx_bytes_count\": 0,\r\n    \"rx_packets_count\": 0,\r\n    \"rx_fails\": 0,\r\n    \"rx_count\": 0,\r\n    \"tx_bytes_count\": 0,\r\n    \"tx_fails\": 0,\r\n    \"tx_count\": 0,\r\n    \"tx_packets_count\": 0,\r\n    \"tx_queue_event_count\": 0,\r\n    \"tx_rate_limiter_event_count\": 0,\r\n    \"tx_spoofed_mac_count\": 0\r\n  },\r\n  \"patch_api_requests\": {\r\n    \"drive_count\": 0,\r\n    \"drive_fails\": 0,\r\n    \"network_count\": 0,\r\n    \"network_fails\": 0,\r\n    \"machine_cfg_count\": 0,\r\n    \"machine_cfg_fails\": 0\r\n  },\r\n  \"put_api_requests\": {\r\n    \"actions_count\": 0,\r\n    \"actions_fails\": 0,\r\n    \"boot_source_count\": 0,\r\n    \"boot_source_fails\": 0,\r\n    \"drive_count\": 0,\r\n    \"drive_fails\": 0,\r\n    \"logger_count\": 0,\r\n    \"logger_fails\": 0,\r\n    \"machine_cfg_count\": 0,\r\n    \"machine_cfg_fails\": 0,\r\n    \"network_count\": 0,\r\n    \"network_fails\": 0\r\n  },\r\n  \"rtc\": {\r\n    \"error_count\": 0,\r\n    \"missed_read_count\": 0,\r\n    \"missed_write_count\": 0\r\n  },\r\n  \"seccomp\": {\r\n    \"num_faults\": 1\r\n  },\r\n  \"vcpu\": {\r\n    \"exit_io_in\": 2386,\r\n    \"exit_io_out\": 4013,\r\n    \"exit_mmio_read\": 67,\r\n    \"exit_mmio_write\": 67,\r\n    \"failures\": 0,\r\n    \"filter_cpuid\": 0\r\n  },\r\n  \"vmm\": {\r\n    \"device_events\": 87,\r\n    \"panic_count\": 0\r\n  },\r\n  \"uart\": {\r\n    \"error_count\": 0,\r\n    \"flush_count\": 3125,\r\n    \"missed_read_count\": 0,\r\n    \"missed_write_count\": 0,\r\n    \"read_count\": 0,\r\n    \"write_count\": 3125\r\n  },\r\n  \"memory\": {\r\n    \"dirty_pages\": 0\r\n  },\r\n  \"signals\": {\r\n    \"sigbus\": 0,\r\n    \"sigsegv\": 0\r\n  }\r\n}\r\n```\r\n\r\nI'm consistently seeing `panic_count` stay at 0, like above, across multiple reproductions of the error. Anything else worth trying? I'm not sure if it's helpful, but I ran the test case with strace attached to all firecracker processes, the occurrence of the error w/ full rt_sigprocmask args looks like:\r\n```\r\nioctl(56, KVM_RUN, 0)                   = 0\r\nioctl(56, KVM_RUN, 0)                   = 0\r\nioctl(56, KVM_RUN, 0)                   = 0\r\nwrite(22, \"2019-12-11T01:34:59.969149820 [anonymous-instance:INFO] Received KVM_EXIT_SHUTDOWN signal\\n\", 90) = 90\r\nwrite(58, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8)        = 8\r\nclose(58)                               = 0\r\nclose(56)                               = 0\r\nmunmap(0x7f5032e45000, 12288)           = 0\r\nsigaltstack({ss_sp=NULL, ss_flags=SS_DISABLE, ss_size=8192}, NULL) = 0\r\nmunmap(0x7f5032c41000, 8192)            = 0\r\nrt_sigprocmask(SIG_BLOCK, ~[], [QUIT ILL BUS FPE KILL USR2 PIPE TERM CHLD CONT STOP TSTP TTIN TTOU URG], 8) = 14\r\n--- SIGSYS {si_signo=SIGSYS, si_code=SYS_SECCOMP, si_call_addr=0x59dff0, si_syscall=__NR_rt_sigprocmask, si_arch=AUDIT_ARCH_X86_64} ---\r\nwrite(22, \"2019-12-11T01:34:59.969586223 [anonymous-instance:ERROR] Shutting down VM after intercepting a bad syscall (14).\\n\", 113) = 113\r\nwrite(24, \"{\\\"utc_timestamp_ms\\\":19550254,\\\"api_server\\\":{\\\"process_startup_time_us\\\":0,\\\"process_startup_time_cpu_us\\\":0,\\\"sync_response_fails\\\":0,\\\"sync_vmm_send_timeout_count\\\":0},\\\"block\\\":{\\\"activate_fails\\\":0,\\\"cfg_fails\\\":0,\\\"event_fails\\\":0,\\\"execute_fails\\\":0,\\\"invalid_reqs_count\\\":0,\\\"flush_count\\\":0,\\\"queue_event_count\\\":0,\\\"rate_limiter_event_count\\\":0,\\\"update_count\\\":0,\\\"update_fails\\\":0,\\\"read_bytes\\\":0,\\\"write_bytes\\\":0,\\\"read_count\\\":0,\\\"write_count\\\":0},\\\"get_api_requests\\\":{\\\"instance_info_count\\\":0,\\\"instance_info_fails\\\":0,\\\"machine_cfg_count\\\":0,\\\"machine_cfg_fails\\\":0},\\\"i8042\\\":{\\\"error_count\\\":0,\\\"missed_read_count\\\":0,\\\"missed_write_count\\\":0,\\\"read_count\\\":10,\\\"reset_count\\\":10,\\\"write_count\\\":10},\\\"logger\\\":{\\\"missed_metrics_count\\\":0,\\\"metrics_fails\\\":0,\\\"missed_log_count\\\":0,\\\"log_fails\\\":0},\\\"mmds\\\":{\\\"rx_accepted\\\":0,\\\"rx_accepted_err\\\":0,\\\"rx_accepted_unusual\\\":0,\\\"rx_bad_eth\\\":0,\\\"rx_count\\\":0,\\\"tx_bytes\\\":0,\\\"tx_count\\\":0,\\\"tx_errors\\\":0,\\\"tx_frames\\\":0,\\\"connections_created\\\":0,\\\"connections_destroyed\\\":0},\\\"net\\\":{\\\"activate_fails\\\":0,\\\"cfg_fails\\\":0,\\\"event_fails\\\":0,\\\"rx_queue_event_count\\\":0,\\\"rx_event_rate_limiter_count\\\":0,\\\"rx_tap_event_count\\\":0,\\\"rx_bytes_count\\\":0,\\\"rx_packets_count\\\":0,\\\"rx_fails\\\":0,\\\"rx_count\\\":0,\\\"tx_bytes_count\\\":0,\\\"tx_fails\\\":0,\\\"tx_count\\\":0,\\\"tx_packets_count\\\":0,\\\"tx_queue_event_count\\\":0,\\\"tx_rate_limiter_event_count\\\":0,\\\"tx_spoofed_mac_count\\\":0},\\\"patch_api_requests\\\":{\\\"drive_count\\\":0,\\\"drive_fails\\\":0,\\\"network_count\\\":0,\\\"network_fails\\\":0,\\\"machine_cfg_count\\\":0,\\\"machine_cfg_fails\\\":0},\\\"put_api_requests\\\":{\\\"actions_count\\\":0,\\\"actions_fails\\\":0,\\\"boot_source_count\\\":0,\\\"boot_source_fails\\\":0,\\\"drive_count\\\":0,\\\"drive_fails\\\":0,\\\"logger_count\\\":0,\\\"logger_fails\\\":0,\\\"machine_cfg_count\\\":0,\\\"machine_cfg_fails\\\":0,\\\"network_count\\\":0,\\\"network_fails\\\":0},\\\"rtc\\\":{\\\"error_count\\\":0,\\\"missed_read_count\\\":0,\\\"missed_write_count\\\":0},\\\"seccomp\\\":{\\\"num_faults\\\":1},\\\"vcpu\\\":{\\\"exit_io_in\\\":65,\\\"exit_io_out\\\":67,\\\"exit_mmio_read\\\":0,\\\"exit_mmio_write\\\":0,\\\"failures\\\":0,\\\"filter_cpuid\\\":0},\\\"vmm\\\":{\\\"device_events\\\":0,\\\"panic_count\\\":0},\\\"uart\\\":{\\\"error_count\\\":0,\\\"flush_count\\\":52,\\\"missed_read_count\\\":0,\\\"missed_write_count\\\":0,\\\"read_count\\\":0,\\\"write_count\\\":52},\\\"memory\\\":{\\\"dirty_pages\\\":0},\\\"signals\\\":{\\\"sigbus\\\":0,\\\"sigsegv\\\":0}}\\n\", 2111) = 2111\r\nexit_group(148)                         = ?\r\n+++ exited with 148 +++\r\n```\r\n\r\nWhat's kind of interesting is that I can also see some strace logs for different VMs showing `fc_vcpu0` threads that apparently receive `KVM_EXIT_SHUTDOWN` but then don't call `rt_sigprocmask`, allowing them to exit with 0:\r\n```\r\nioctl(56, KVM_RUN, 0)                   = 0\r\nioctl(56, KVM_RUN, 0)                   = 0\r\nioctl(56, KVM_RUN, 0)                   = 0\r\nfutex(0xb56184, FUTEX_WAIT_PRIVATE, 2147483664, NULL) = 0\r\nwrite(22, \"2019-12-11T01:35:00.658604112 [anonymous-instance:INFO] Received KVM_EXIT_SHUTDOWN signal\\n\", 90) = 90\r\nwrite(58, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8)        = 8\r\nclose(58)                               = 0\r\nclose(56)                               = 0\r\n+++ exited with 0 +++\r\n```\r\n\r\nso I think my previous statement that `KVM_EXIT_SHUTDOWN` and the seccomp violation always occur together actually isn't true, very rarely `KVM_EXIT_SHUTDOWN` will happen without the bad syscall. Looks like you found the root cause of the problem. We do not whitelist `KVM_EXIT_SHUTDOWN`. Now the interesting question is why does the guest initialize a reboot? @andreeaflorescu We are purposely telling the guest to do a reboot as part of our attempts to \"gracefully\" shut down VMs (as opposed to an \"ungraceful\" shutdown of just sending SIGTERM to the VMM process).\r\n\r\nThis is far out of my area of expertise, but I'm curious why this would only happen rarely (maybe 1/50 times). Most of the time guests reboot there isn't any `KVM_EXIT_SHUTDOWN` sent to the VMM process at all. For example, most of the strace outputs for `fc_vcpu` threads I got end like this:\r\n```\r\nioctl(56, KVM_RUN, 0)                   = 0\r\nioctl(56, KVM_RUN, 0)                   = 0\r\nwrite(15, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8)        = 8\r\nioctl(56, KVM_RUN <unfinished ...>)     = ?\r\n+++ exited with 0 +++\r\n``` > @andreeaflorescu We are purposely telling the guest to do a reboot as part of our attempts to \"gracefully\" shut down VMs (as opposed to an \"ungraceful\" shutdown of just sending SIGTERM to the VMM process).\r\n\r\nDo you need to send that command from the guest? Why not use the CTR+ALT+DEL functionality instead?\r\n\r\n> This is far out of my area of expertise, but I'm curious why this would only happen rarely (maybe 1/50 times). Most of the time guests reboot there isn't any `KVM_EXIT_SHUTDOWN` sent to the VMM process at all. For example, most of the strace outputs for `fc_vcpu` threads I got end like this:\r\n> \r\n> ```\r\n> ioctl(56, KVM_RUN, 0)                   = 0\r\n> ioctl(56, KVM_RUN, 0)                   = 0\r\n> write(15, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8)        = 8\r\n> ioctl(56, KVM_RUN <unfinished ...>)     = ?\r\n> +++ exited with 0 +++\r\n> ```\r\n\r\nI would need to investigate this before giving a good answer. I will assume that most of the cases the Firecracker process dies before `KVM_EXIT_SHUTDOWN` is called, but I'll need to look a bit at the code to understand what's happening there.\r\n > Do you need to send that command from the guest? Why not use the CTR+ALT+DEL functionality instead?\r\n\r\nWe decided to go with just having the guest init system do a reboot because [ctrl-alt-del doesn't work on all kernels and isn't supported on aarch64 (which we'd like to support someday)](https://github.com/firecracker-microvm/firecracker-containerd/pull/324#discussion_r343850841), so avoiding it keeps our dependencies to a minimum. @sipsma do you want to submit a PR with the fix? @aghecenco I thought we already whitelisted it. If there's no way around it, we can whitelist it I guess. @gc-plp Are you going to work on this issue soon-ish?\r\n\r\nI've just made a one-line fix while working on https://github.com/firecracker-microvm/firecracker-containerd/pull/383 since it impacts firecracker-containerd and seems my fix is working.\r\n\r\nSo, I'm going to send a PR if you are not actively working on.\r\n Updated proposal:\r\n1. Use the `vmm.exit_evt` on `aarch64` as well as `x86_64` - currently we don't have a clean exit mechanism on `aarch64` and this would address that as well. On `aarch64` the `exit_evt` will simply be populated with a `EventFd::new()` instead of using the `i8042::reset_evt`.\r\n2. Currently, when `vcpu`s move to their `exited` state, they write 1 to the `exit_evt` and then exit their main loop leading to the thread cleanup which hits the blacklisted syscall. Instead of directly finishing their main loop, the `vcpu` could write 1 to `exit_evt` (like before) then either:\r\n    - block on a `std::sync::Barrier` waiting for the `vmm` thread to unblock them,\r\nor,\r\n    - move to their `paused` state and, through the current code in the paused state, block on waiting for a new command from the `vmm` thread.  Looking at logs for various PRs, it seems our CI skips `test_rescan_dev` from `integration_tests/functional/test_drives.py` on `x86_64` for no apparent reason. The test is not skipped when running on a local dev machine. \r\n\r\nThe relevant part in the CI log is something like:\r\n\r\n```\r\nintegration_tests/functional/test_drives.py resize2fs 1.44.1 (24-Mar-2018)\r\nResizing the filesystem on /tmp/firecracker_test_session/17f55cd2-26ee-4ebb-be10-a2cae034e07e/fsfiles/scratch.ext4 to 524288 (1k) blocks.\r\nThe filesystem on /tmp/firecracker_test_session/17f55cd2-26ee-4ebb-be10-a2cae034e07e/fsfiles/scratch.ext4 is now 524288 (1k) blocks long.\r\n\r\n.s....\r\n``` This is skipped when you cannot create a loopback device on the host. Actual code here: https://github.com/firecracker-microvm/firecracker/blob/abfa7a517e20247dda450e884e4cb156280d9bbd/tests/integration_tests/functional/test_drives.py#L100\r\n\r\nPR that introduced the test: https://github.com/firecracker-microvm/firecracker/pull/1371 Yes. losetup somehow didn't work on the CI host. \r\n\r\nhttps://firecracker-pr.s3.amazonaws.com/pr-logs/01371/kzys-firecracker-2d8dd18.log\r\n\r\n> losetup: /dev/loop8: failed to set up loop device: No such file or directory\r\n\r\nand @aghecenco recommended to comment out the test for a moment and log an issue on GitHub. I did the former but forgot the latter. We seem to have hit a mix of a few issues that lead to `losetup` not working correctly inside our dev container:\r\n\r\n- the host kernel doesn't have the `loop` module loaded;\r\n- consequently, `/dev/loopX` block devices aren't present at container start time;\r\n- the container `/dev` space is set only once, at container start;\r\n- `losetup` causes the `loop` module to be loaded, after container started, so `/dev/loopX` show up on the host, but not inside the container; therefore, `losetup` fails inside the container;\r\n- a possible workaround could be to bind-mount `/dev`; however, this doesn't work because we also launch the container with a default `init` process (`docker run --init`), and older versions of docker used `/dev/init` as the fixed location for its init process ([tini](https://github.com/krallin/tini))\r\n\r\nThere are different ways to approach this, but the one I'm inclined towards is to rework our container to use `tini` from a location of our choosing (e.g. `/sbin/tini`), meaning we no longer need to rely on the docker `--init` switch and the conflicting `/dev/init`.  ## Reason for This PR\r\n\r\nJust a tiny cleanup. I had some outstanding comments on the polly PR, but it was merged before I got a chance to look at it again. Since they're tiny changes, I just fixed them in this PR.\r\n\r\n## Description of Changes\r\n\r\nSee above.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [ ] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [ ] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [ ] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n > Good idea to pull in master branch changes as well so we don't diverge.\r\n> Rebasing this branch on top of the master branch in a PR like so will not be possible however. (Unless we want to `push -f` to this branch all the time). I don't know what the best approach is here.\r\n\r\nI've removed the rebased commits as we would need to push force :(  ## Reason for This PR\r\n\r\nInvalid fields in PATCH requests should be failing properly with an error message, not silently. See #1437 for more information.\r\n\r\n## Description of Changes\r\n\r\nAdded serde macro to the RateLimiterConfig.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`\r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided.\r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n @acatangiu \r\nI have done as you said: updated the commit message, signed the commit, and added a test case.  @acatangiu will get it done soon. I am having some issues just figuring out how to squash the commits because I seemed to have pulled master recently...should have it figured out either today or tomorrow. Thanks @dianpopa ! @acatangiu everything should be done and ready to merge now!  Hi @sandreim could you give some more context to this problem?  Hi @sandreim , I think @mi-yu and I can help take a stab at this problem. Just for reference, we're two students at UT Austin who are looking to make a couple of open-source contributions for our final Virtualization project. Hi @sandreim \r\n\r\nI was wondering if you could explain what you meant by two of your suggested fixes?\r\n\r\n- \"configure edge triggered epoll for the tap fd\", we looked through the code and found the part of the code that does not unregister the epoll event when the tap RX is being blocked due to reaching its budget. Could you clarify what you meant by configuring the edge triggered epoll?\r\n\r\n- \"rework the current state machine and use edge triggered epoll\" could you give some general context towards how to make this \"proper\" fix.\r\n\r\nThank you for your time! Hey @pyrito. @sandreim already has a fix for this and he will probably post it early next week. Do you need help in finding another issue? @andreeaflorescu , yes that would be greatly appreciated! If there are any issues of easy difficulty that we could tackle within a week or so (with a proof of concept) that would be much appreciated. Thanks!  Not sure if someone is working on this but @mi-yu and I worked on a fix for this?  Hi @pyrito, unfortunately this issue is already assgined and @andrei-cosmin is already working on it. As a tip for finding a good issue please look at those with the `Contribute: help wanted` and `Contribute: good first issue` labels. \r\n\r\nFor example: https://github.com/firecracker-microvm/firecracker/issues/745 Fixed by #1441   Fixed in PR #1444   Signed-off-by: Iulian Barbu <iul@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\nFixes #1125 \r\n\r\n## Description of Changes\r\n\r\nSome of Firecracker crates have dev-dependency on `tempfile` crate from crates.io. This crate has other dependencies on its own that are brought into Firecracker as well.\r\n\r\nRemoved `tempfile` crate dev-dependency and used instead `vmm-sys-util` `tempfile module`, which basically replaces `tempfile` crate with a simpler implementation for temporary files & temporary directories, without additional dependencies.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n I've included the received feedback. Please, take a look at https://github.com/firecracker-microvm/firecracker/commit/239923316abc5cfea1e8759e5929652287e3656a. Will continue work here only after https://github.com/rust-vmm/vmm-sys-util/pull/54 has been merged. > @iulianbarbu if we merge it like this, please add an issue describing the leftover improvements so we can track them.\r\n\r\nI've added the following issue: https://github.com/firecracker-microvm/firecracker/issues/1466.    We meet the issue with firecracker in https://github.com/kata-containers/kata-containers/issues/79.\r\nAnd I found that hybrid vsock will drop or truncate the first package and qemu doesn't have this issue.\r\nI add code that send an empty package and wait the first package arrive from client to handle this issue in https://github.com/alipay/grpc/commit/811660d28e3771a162cd5ece0d1e950168476ac8. @sandreim Thanks for your comments.\r\nI found that this is an issue of kata.  I just post a PR to fix this issue in https://github.com/kata-containers/agent/pull/696  ## Reason for This PR\r\n\r\nAllow users to run Firecracker with a configurable custom whitelist of syscalls to avoid the need to recompile a new binary. See #1366 for more details.\r\n\r\n## Description of Changes\r\n\r\n- Added a new optional configuration field (to be documented), `syscall-whitelist`. An example of configuration is below:\r\n\r\n```\r\n{\r\n    // other config options\r\n\r\n    \"syscall-whitelist\": [\r\n        {\r\n            \"arch\": \"x86_64\",\r\n            \"toolchain\": \"musl\",\r\n            \"syscalls\": [\r\n                39\r\n            ]\r\n        },\r\n        {\r\n            \"arch\": \"aarch64\",\r\n            \"toolchain\": \"musl\",\r\n            \"syscalls\": [\r\n                8,\r\n                12,\r\n                15\r\n            ]\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n- Whitelists are configured per architecture and per toolchain and represented by a list of syscall numbers. Currently, there is no syscall number validation it is up to the user to provide valid syscall numbers. Additionally, whitelisted syscalls are all added to the seccomp filter with the `Allow` action, conditionals/argument-based filters not implemented.\r\n\r\n- Whitelisted syscalls are merged with default syscalls (as specified by the `seccomp-level` option)\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [ ] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [ ] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n I'm working on cleaning up commit messages and docs, but in the meantime are there any suggestions/concerns about the structure of the changes? Hi @acatangiu, thanks for the followup! No worries about the timeline. In response to your points:\r\n\r\n- My initial implementation first applied the default syscalls, then tried to apply the custom whitelist, but it seemed to crash the process. If I understand correctly, this is because the syscall to update the filters is not whitelisted. Is this actually the case? If so, would the API endpoint be readonly and just return the list of whitelisted syscalls?\r\n- I have an implementation of per-thread filtering (addressing #1178), but haven't pushed it to my fork yet. It builds off of the changes in this PR, and I wanted to get the changes in this PR reviewed first.\r\n- Ideally we allow users to pass in syscalls by name rather than by number for better UX, but I didn't find an easy way to map from syscall name to number. I was looking for something that lets me check whether or not a variable is exported from the `libc` crate, is that possible in Rust? Hi @mi-yu, I'm going to jump in and work with you on the design and UX here :beer: \r\n\r\nIn the meantime, quick answers:\r\n\r\n> this is because the syscall to update the filters is not whitelisted. Is this actually the case? \r\n\r\nThat's right, `prctl` is not whitelisted (nor should it be). We have to think a lot about what to apply and in which order. We'll iterate on this in the design phase.\r\n\r\n> Ideally we allow users to pass in syscalls by name rather than by number for better UX\r\n\r\nAgreed.\r\n\r\n> I didn't find an easy way to map from syscall name to number. I was looking for something that lets me check whether or not a variable is exported from the libc crate, is that possible in Rust?\r\n\r\nNot that I know of; what's more, `libc` doesn't export all of them, so we shouldn't count on it. Off the top of my head it looks like we should hardcode the mappings somewhere. @aghecenco thanks for the clarifications! Just curious, is there a reason why `libc` doesn't export all syscalls?\r\n\r\nSince it doesn't seem like there isn't a simple alternative, I can add a hardcoded list of syscalls to the code. @mi-yu I don't know, maybe some just got omitted. @dianpopa found one a while back, see https://github.com/rust-lang/libc/issues/1348. On second thought, maybe it would be better - and it would definitely be cleaner - to do what she did and add any new missing ones to `libc`, then consume them from there instead. That way you'd enrich one codebase while not unnecessarily complicating Firecracker. This PR changes the interface for installing seccomp filters slightly so it might impact your PR: https://github.com/firecracker-microvm/firecracker/pull/1474.  @petreeftime thanks for the heads up!\r\n\r\n@aghecenco adding the missing syscalls to the `libc` crate would definitely be cleaner, but would that solve the issue? We still need a way to check if a user supplied string is exported as a variable from `libc` and read the value, right? Closing in favor of making new PR with cleaner git history  With a Vmm controller/builder in place, the road to freeing the seccomp filter of the `timerfd_create` syscall seems a lot simpler  since the Vmm Builder could simply just allocate the needed timerfds before starting the microVm. If we aim for a more forward looking solution we could try implementing a resource pooling approach like the one displayed in #1281.  Fixed with this PR: https://github.com/rust-vmm/vmm-sys-util/pull/54 and contained by 0.3.1 version, used currently in Firecracker (#1413).  ## Reason for This PR\r\n\r\nTidy is good, tidy is love.\r\n\r\n## Description of Changes\r\n\r\n- workspace: all sources are now placed in their respective crates, under `/src/<crate>`;\r\n- workspace: unified the jailer source under a single bin crate `/src/jailer`; removed jailer dependency from the firecracker crate;\r\n- workspace: configured the build artifacts dir via `.cargo/config`;\r\n- devctr: removed env variable used to override the cargo build dir; updated to Rust toolchain 1.39;\r\n- clippy: added safety doc comments;\r\n- vsock: switched to using zeroed memory for the TX buffer, instead of `mem::uninitialized`, since the latter is both unsafe and deprecated by Rust 1.39;\r\n- also fixed up some whitespace errors.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [ ] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [ ] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [ ] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n Changes LGTM. I'll approve this once the arm build is fixed as well. My personal take on this is I that it makes more sense as the source code is clearly separated from the documentation and other utilities. It is much easier to navigate through misc docs and tools as they don't mingle with rust code as well. > Do you have a quick reference resource you can link that explains why moving the crates under `/src` is tidy while the current state is not?\r\n\r\nI don't have one handy. However, you can look at it like this: just as a crate is structured using a `src` dir for the sources, a `target` dir for the build artifacts, and the root for support files (such as `Cargo.toml`), so should a workspace be. I.e. sources go under `src`, integration tests go under `tests`, documentation goes under `docs`, and so on.\r\n\r\nAlso, in this particular case, it's more tidy because this arrangement enables decoupling the firecracker and jailer crates. In the previous layout, the jailer `main` was part of the firecracker crate, while the jailer core lived in its own crate. Now, they are two independent bin (executable) crates. My _esthetics only_ opinion is \"+100\".  The docs that let you know [how to build a custom rootfs and vmlinux](https://github.com/firecracker-microvm/firecracker/blob/master/docs/rootfs-and-kernel-setup.md) are not complete in the idea that they do not show how to configure the VM after building both rootfs and vmlinux, and log in successfully inside the VM.\r\n\r\nIt would be nice to provide configuration for simple use cases like using a rootfs with ssh and a kernel built from linux git, and the setup that is needed in order to ssh into the VM with root user.\r\n\r\nThere is an issue on firecracker-demo repo, [#27](https://github.com/firecracker-microvm/firecracker-demo/issues/27#issue-525772440), which proves that the docs are not clear enough in the environment restrictions and common use cases for those who want to use Firecracker with rootfs & kernel built from zero. [This](https://github.com/marcov/firecracker-initrd) could be a great starting point. Actually that is the script that was used to create the initrd image for aarch64. The image is an alpine one with all packages needed. Maybe we can tweak it a little bit and be able to specify if the resulting image will contain an initrd or not. Ignite has some docs on how to do it too, e.g. in:\r\n - https://github.com/weaveworks/ignite/tree/master/images/kernel\r\n - https://github.com/luxas/ignite/tree/luxas/add_arm64/images/kernel (my temp. fork updated for arm64)\r\n - https://github.com/weaveworks/ignite/tree/master/images (for other OSes)\r\n\r\nmight be of interest :) Hi @alicelambda ! I talked with @iulianbarbu . This issue was more related to also configuring a ssh server in the example rootfs. But, on another thought, this is use-case specific and I don't know if it makes sense to include this in the Firecracker documentation. Closing for now.  I've updated the PR based on the received feedback. Please take a look. I might need to up the coverage a little bit but I need to get more feedback first.  In this commit `net_util`, `sys_util` & `fc_util` crates were combined\r\ninto a single crate named `utils`. Also, `utils` crate is a wrapper\r\nover vmm-sys-util, which is now consumed in Firecracker, replacing `sys_util`.\r\n\r\nSigned-off-by: Iulian Barbu <iul@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\n#1346 \r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n > Blimey! 64 files changed to re-review\r\n\r\nIs the same thing, basically, but spread out on multiple commits. :D It should be faster to re-review.  Redesign virtio devices in Firecracker.\r\n\r\nThe plan is to consume virtio devices building blocks from rust-vmm. For this goal, we need to make sure that:\r\n- MMIO transport can be easily replaced with PCI\r\n- Rate Limiter is not tightly coupled to the emulation of virtio\r\n- Metrics are opt-in\r\n- Logging is done via the default Rust logger implementation\r\n- others?\r\n\r\nThe output of this issue is a design doc for virtio devices that takes in consideration the aforementioned constraints.  re:others:\r\n* device identification is split into device type (currently exposed by the `VirtioDevice` trait) + user-facing device ID. See https://github.com/firecracker-microvm/firecracker/pull/1737#discussion_r405509819 @aghecenco how about we created a separate issue for the device identification? This issue was created before the decoupling work was started and I assume that now we have a few more things that need to be done. We can link the separate issues in this one. Task Breakdown:\r\n- [ ]  https://github.com/firecracker-microvm/firecracker/issues/1761\r\n- [ ] https://github.com/firecracker-microvm/firecracker/issues/1760\r\n- [ ] https://github.com/firecracker-microvm/firecracker/issues/1762\r\n- [ ] #1759 \r\n- [ ] #1758\r\n- [ ] #1763 Done & added #1763 to the list above  ## Reason for This PR\r\n\r\nRemove superfluous vcpu count variable.\r\n\r\n## Description of Changes\r\n\r\nWe can use the length of the vcpus variable\r\nto get the count of vcpus. This way we also\r\ndiscarding unused variables for x86_64.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n- [x] No new `unsafe` code has been added.\r\n  Fixed by #1539.  Closed by PR #1417.    We have to check the following:\r\n\r\n- the overall architecture is ok\r\n- the crate is safe to use\r\n- there are no methods that can generate undefined behavior\r\n- all the unsafe blocks are absolutely necessary\r\n- all the unsafe methods and traits are marked as unsafe\r\n  This is already done in `rust-vmm/vm-memory`. We should switch to that crate very soon. Progress tracked in #1400   Since `kvm-bindings` is consumed by multiple projects, I touched base with the rust-vmm community on this topic in today's syncup. I will follow up with a doc proposal in the `kvm-bindings` repo (as a PR so folks can comment). Fixed in https://github.com/firecracker-microvm/kvm-bindings/pull/2 @acatangiu how about we keep this open to track the work for merging it upstream? It looks like it is done in firecracker-microvm/kvm-bindings. > track the work for merging it upstream\r\n\r\nI agree, but is `https://github.com/firecracker-microvm/firecracker` the right repo to track that?\r\n\r\nI think both https://github.com/firecracker-microvm/kvm-bindings and https://github.com/rust-vmm/kvm-bindings are better locations to keep a tracking issue. WDYT? Hmm, it looks like the action item is on Firecracker side, not on rust-vmm. I would prefer to track this on the Firecracker side until we switch back to using the upstream version. We can also track this in firecracker-microvm/kvm-bindings. My impression was this is a temporary state, and we want to still consume kvm-ioctls from upstream.  @acatangiu can you please expand on why is this work blocked on #1346?\r\nMy understanding was that you can still use the newer version of kvm-ioctls and just replace the occurrence of sys_util::EventFd with vmm-sys-util::Eventfd. With this approach we can unblock the work on this issue and at the same time make sure we take the time that we need for switching to vmm-sys-util.  \r\n## Reason for This PR\r\n\r\nAdd the env variable KEEP_TEST_SESSION to keep the created test session\r\nfiles tree at the end of a test. This allow re-launching tests on a\r\nprevious test session without rebuilding all binaries.\r\n## Description of Changes\r\n\r\nconftest.py and integration tests README.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [x] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n @dianpopa: this is the followup of: https://github.com/firecracker-microvm/firecracker/pull/1246#discussion_r343071220 Hey @marcov, thanks for this PR! At a first glance it looks like the new env var has effect when running the tests directly via `pytest` - could you extend it to work with the container too? The recommended way to run integ tests is `tools/devtool test` - this spins up a Docker container and runs `pytest` inside it. I think the `devtool` script should pick up the env var and propagate it to the container. Thank you @aghecenco, done, and sorry for taking some time. I bumped into an error caused by the default jail root [`/srv/jailer/`](https://github.com/firecracker-microvm/firecracker/blob/9bf9333ad4a3f90a1d759e38eef7057af3462af8/jailer/src/lib.rs#L266) being on a different partition than the default test directory root `/tmp/firecracker_test_session`. The test suite can't hardlink the chroots to the test session dir in this case. You could either:\r\n* check that the test session dir is on the same partition as `/srv/jailer` as the test suite doesn't overwrite it anywhere (risky and unrecommended);\r\n* not persist the jails; persist just the build artefacts. Ok, rolled back to the initial version and clarified about the need to be used inside a container. Thanks for the in depth review\r\n\r\n> What's with the new TR_TMPDIR env var? \r\n\r\n@aghecenco apparently you can override the default `/tmp/firecracker_test_session`, see conftest.py  Change logger options type from Value to Vec<LogOption> for\r\nstrictly type checking, which would prevent potential unwrap\r\non None panics.\r\n\r\nSigned-off-by: lifupan <lifupan@gmail.com>\r\n\r\n## Reason for This PR\r\n\r\nFix: #1375 \r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [ ] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [ ] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n- [ ] Either no new `unsafe` code has been added, or, the newly added `unsafe`\r\n      code is unavoidable and properly documented.\r\n Hey @lifupan, the PR description is missing the checklist, did you accidentally remove it? > Hey @lifupan, the PR description is missing the checklist, did you accidentally remove it?\r\n\r\nYeah, I removed them by accident, and I restored them now.  @lifupan please also update `CHANGELOG.md` as this fixes a panic condition. Add a new line in the `## Fixed` section, something in the lines of `- Fixed an issue in logger configuration that could crash the Firecracker process on invalid input. Issue: #1375`. Remember to adhere to formatting. > @lifupan please also update `CHANGELOG.md` as this fixes a panic condition. Add a new line \r\n\r\nHi @aghecenco , Updated!\r\n > Hey @lifupan, @andreeaflorescu pointed out that problem is bigger than this fix. Any option passed to `options`, other than an array, will lead to a panic. The right thing to do would be to add a `deserialize_with` for this member. See an example here:\r\n> https://github.com/firecracker-microvm/firecracker/blob/caddf190914b383bb6a35bd93015db91b7568842/vmm/src/vmm_config/machine_config.rs#L49\r\n> \r\n> \r\n> The `deserialize_with` function should:\r\n> * skip `Option::None`s\r\n> * accept nothing other than arrays of `LogOption`s\r\n\r\nHi @aghecenco @andreeaflorescu \r\n\r\nUpdated! Hi @aghecenco \r\n\r\nThe default CI failed with test_coverage as below:\r\n\r\nintegration_tests/build/test_coverage.py:96: in test_coverage\r\n    assert coverage >= COVERAGE_TARGET_PCT, coverage_low_msg\r\nE   AssertionError: Current code coverage (84.9%) is below the target (85.0%).\r\nE   assert 84.9 >= 85.0\r\n\r\nHow can I fix this issue?  > Hi @aghecenco\r\n> \r\n> The default CI failed with test_coverage as below:\r\n> \r\n> integration_tests/build/test_coverage.py:96: in test_coverage\r\n> assert coverage >= COVERAGE_TARGET_PCT, coverage_low_msg\r\n> E AssertionError: Current code coverage (84.9%) is below the target (85.0%).\r\n> E assert 84.9 >= 85.0\r\n> \r\n> How can I fix this issue?\r\n\r\nLet's see if it passes with the latest changes addressed; the coverage delta looks small indeed. You can also run the tests locally\r\n\r\n```bash\r\nsudo env PATH=$PATH cargo kcov --all\r\n```\r\n\r\nand visually inspect the files you modified in `target/cov/index.html`. If any of your modifications aren't covered, you need to add unit tests that cover them; let us know if that's not the case. Hi @aghecenco \r\n\r\nUnfortunately the code coverage is still failed, even though I got a 88.2% in my local tests.\r\n   @lifupan I checked the coverage test too and none of your code is uncovered. On my dev machine too, the coverage score is 85%, but on the test instance it must be below that with a really small delta (different machines might get different coverage scores).\r\n\r\n> Unfortunately the code coverage is still failed, even though I got a 88.2% in my local tests.\r\n\r\nMy bad, I didn't give you the full command - the coverage test excludes some code from the calculation (autogenerated stuff, tests) and the actual value is currently ~85%.\r\nFull command:\r\n\r\n```bash\r\ncargo kcov --all -- --exclude-pattern=${CARGO_HOME:-$HOME/.cargo/},build/,tests/,usr/lib/gcc,lib/x86_64-linux-gnu/,bootparam.rs,elf.rs,mpspec.rs,msr_index.rs,_gen --exclude-region='mod tests {' --verify\r\n```\r\n\r\n@firecracker-microvm/compute-capsule the `aarch64` CI machine passes coverage but the `x86_64` one doesn't - if we drop the target on `x86_64` we'll get the reverse effect. I propose we relax the coverage delta from `0.01` to `0.1` and see how that goes. Thoughts? > @lifupan I checked the coverage test too and none of your code is uncovered. On my dev machine too, the coverage score is 85%, but on the test instance it must be below that with a really small delta (different machines might get different coverage scores).\r\n> \r\n> > Unfortunately the code coverage is still failed, even though I got a 88.2% in my local tests.\r\n> \r\n> My bad, I didn't give you the full command - the coverage test excludes some code from the calculation (autogenerated stuff, tests) and the actual value is currently ~85%.\r\n> Full command:\r\n> \r\n> ```shell\r\n> cargo kcov --all -- --exclude-pattern=${CARGO_HOME:-$HOME/.cargo/},build/,tests/,usr/lib/gcc,lib/x86_64-linux-gnu/,bootparam.rs,elf.rs,mpspec.rs,msr_index.rs,_gen --exclude-region='mod tests {' --verify\r\n> ```\r\n> \r\n> @firecracker-microvm/compute-capsule the `aarch64` CI machine passes coverage but the `x86_64` one doesn't - if we drop the target on `x86_64` we'll get the reverse effect. I propose we relax the coverage delta from `0.01` to `0.1` and see how that goes. Thoughts?\r\n\r\nWe do not yet collect coverage results for aarch64 (kcov does not have support for it yet) so we should be okay with whichever solution. I personally vote for the \"0.01 -> 0.1\" one since it will hopefully free us of the annoyance that comes with having to drop it much more often. @dianpopa  #1371 is suffering from the same issue now (coverage test passed on both platforms, I merged latest upstream changes and now it fails on `x86_64`). @firecracker-microvm/compute-capsule does anyone have anything against lowering the coverage delta? > We've discussed live and in cases where all touched code has better or same coverage it is fine to adjust overall coverage if necessary (because of rounding off errors, or because deriving `Debug` or because some covered code has been completely removed and the overall percentage decreases).\r\n\r\nWhat I fear in this case is that if we drop the coverage bar to 84.9, the coverage test will fail on arm because the value there exceeds the threshold. We need to adjust the delta too. > AFAIK there is no coverage test on `aarch64` as `kcov` is not supported there\r\n\r\nYou're right, I'm worried about nothing.\r\n \r\n> We can also relax the delta (maybe in a separate PR so we can comment on it).\r\n\r\nYup. Meanwhile @lifupan don't worry about the coverage; we'll review your changes disregarding the failing test and fix that separately.\r\n\r\n > Yup. Meanwhile @lifupan don't worry about the coverage; we'll review your changes disregarding the failing test and fix that separately.\r\n\r\nThat sounds great, thanks.\r\n\r\n Hi @aghecenco \r\nThe CI happy now.   Hi, I'm at student at UT Austin and am looking to contribute to container-related project as part of my virtualization course. I'm interested in picking this issue up for our project. @mi-yu is also part of my group.  Hey @pyrito, @mi-yu, thanks for the interest! Some pointers to get you started:\r\n- syscalls are dependent on: architecture (`x86_64` + `aarch64`) and build toolchain (`musl` + `gnu`). You should need to take this into consideration; we don't want to whitelist any more than strictly necessary (i.e. don't whitelist in the `musl` build a syscall that only glibc emits).\r\n- the recommended way to run Firecracker is [jailed](https://github.com/firecracker-microvm/firecracker/blob/master/docs/prod-host-setup.md) so make sure the paths are relative to the chroot'ed root.\r\n- also side effect of the jailer - the command line parameters need to be passed to the jailer first and propagated to Firecracker, where the filters are actually installed.\r\n- the filters are installed in the last moment before starting to execute guest code (right before the vCPUs start running); if you move the filter installation to any moment prior to that, you'll need to whitelist more syscalls, including some potentially dangerous ones (think: `SYS_clone`)\r\n- I think this feature can go nicely with #1178 - it'd be nice to see a separation between syscalls that come from the API thread, the emulation thread and the vCPUs.\r\n\r\nReach out any time if you need more pointers :slightly_smiling_face: Looking forward to the PRs :+1:  Thanks @aghecenco ! I have a few questions:\r\n\r\n- How is the whitelist going to be inputted ideally? Are we looking at something that will be defined in a config file or will it be a list of arguments passed through by the user?\r\n\r\n- Do you have any recommendations on how we can test quickly to see how our changes are affecting the build?\r\n\r\nThanks! To follow up a Slack conversation with @aghecenco, we are looking for more input on how exactly users should specify syscalls to whitelist. For example, would they configure a custom whitelist as part of the config file:\r\n\r\n```\r\n{\r\n  ...\r\n\r\n  \"syscall_whitelist\": [\"connect\", \"read\", etc...]\r\n}\r\n```\r\n\r\nAnd do we want to support allowing users to configure each individual syscall in terms of allowed arguments and conditionals?\r\n\r\nFinally, how should we approach configuration options for different architectures? Would it be better to have something like this:\r\n\r\n```\r\n{\r\n  ...\r\n\r\n  \"syscall_whitelist\": {\r\n    \"x86\": [ <list of syscalls for x86> ],\r\n    \"aarch64\": [ <list of syscalls for aarch64> ]\r\n  }\r\n}\r\n```\r\n\r\nas opposed to the first code snippet. The first option seems easier for the user, but would complicate the parsing logic quite a bit. Not sure what a good tradeoff is. This all looks very reasonable to me! Just one point:\r\n\r\nIs the idea for the `thread` property to act as a regex-like string? The proposal mentions `thread` should be one of `vmm, vcpu, api`, but in the example config file, I see `fc_vcpu*` as one of the thread names. Do we want to support different filters for different `vcpu` threads? It seems to make more sense to have the same filters for all `vcpu` threads.\r\n\r\n  My partner and I will be working on this issue  Signed-off-by: Laura Loghin <lauralg@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\nLet users configure the logger via command line parameter and not only using the API socket.\r\nPartially addresses #828.\r\n\r\n## Description of Changes\r\n\r\nRenamed `log_fifo` to `log_path` and `metrics_fifo` to `metrics_path`.\r\nAdded `--log-path`, `--level`, `--show-level`, `--show-log-origin` parameters to `firecracker` for recording the logs immediately after starting a Firecracker process and without needing to configure the logger via an API call. The value for the `--log-path` parameter must be the path to the resource (fifo or file) that will be used for logging.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to an issue. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n @dhrgit, @dianpopa I addressed all of your comments. Please take another look. > @dhrgit, @dianpopa I addressed all of your comments. Please take another look.\r\n\r\nWill do. @lauralt I created a commit (https://github.com/dianpopa/firecracker/commits/laura_logs) on top of your PR which reflects my thoughts on how this functionality could be achieved in the cleanest way I could think of.\r\nYou can see there that the `src/firecracker` is freed of the two dependencies introduced by this PR (`serde_json` and `vmm-sys-util`) since I think that making firecracker depend on `serde_json` is not good as far as our desires of separation of concerns.\r\nAlso, as far as having firecracker create the path for the user: I understand the flexibility argument however, we expose ourselves to inconsistent behavior since we are not offering the same flexibility when initializing the logger through the API and so, we are running the risk of users getting confused. Firecracker should be creating only the paths that are vital to its proper functioning.  Log destinations together with kernel files, disk images are external resources that should be created by the user. Moreover, I myself am very skeptical to creating paths for the user since this is an expensive operation and if not careful about it, we may be heading to process startup time penalties. > @lauralt I created a commit (https://github.com/dianpopa/firecracker/commits/laura_logs) on top of your PR which reflects my thoughts on how this functionality could be achieved in the cleanest way I could think of.\r\n> You can see there that the `src/firecracker` is freed of the two dependencies introduced by this PR (`serde_json` and `vmm-sys-util`) since I think that making firecracker depend on `serde_json` is not good as far as our desires of separation of concerns.\r\n> Also, as far as having firecracker create the path for the user: I understand the flexibility argument however, we expose ourselves to inconsistent behavior since we are not offering the same flexibility when initializing the logger through the API and so, we are running the risk of users getting confused. Firecracker should be creating only the paths that are vital to its proper functioning. Log destinations together with kernel files, disk images are external resources that should be created by the user. Moreover, I myself am very skeptical to creating paths for the user since this is an expensive operation and if not careful about it, we may be heading to process startup time penalties.\r\n\r\nNice suggestions! I agree we should offer the same flexibility when configuring logger via command line parameter and via logger. I've included your changes in the current commit, please take another look! > > @lauralt I created a commit (https://github.com/dianpopa/firecracker/commits/laura_logs) on top of your PR which reflects my thoughts on how this functionality could be achieved in the cleanest way I could think of.\r\n> > You can see there that the `src/firecracker` is freed of the two dependencies introduced by this PR (`serde_json` and `vmm-sys-util`) since I think that making firecracker depend on `serde_json` is not good as far as our desires of separation of concerns.\r\n> > Also, as far as having firecracker create the path for the user: I understand the flexibility argument however, we expose ourselves to inconsistent behavior since we are not offering the same flexibility when initializing the logger through the API and so, we are running the risk of users getting confused. Firecracker should be creating only the paths that are vital to its proper functioning. Log destinations together with kernel files, disk images are external resources that should be created by the user. Moreover, I myself am very skeptical to creating paths for the user since this is an expensive operation and if not careful about it, we may be heading to process startup time penalties.\r\n> \r\n> Nice suggestions! I agree we should offer the same flexibility when configuring logger via command line parameter and via logger. I've included your changes in the current commit, please take another look!\r\n\r\nCool, I will take another look asap! Thanks! From the looks of it, this enables the user to provide both a `--log` arg, and a log via `--config-file`. This conflict doesn't appear to be resolved anywhere, and to lead to a startup failure due to logger double initialization. I this correct? > From the looks of it, this enables the user to provide both a `--log` arg, and a log via `--config-file`. This conflict doesn't appear to be resolved anywhere, and to lead to a startup failure due to logger double initialization. I this correct?\r\n\r\nYep, it will fail with `Reinitialization of logger not allowed.`, but this will happen also if, after configuring the logger via cmd line parameter, the user sends a PUT api request for logger. I think it should be up to the user to be careful and use only one method for the configuration, what do you think? > > Question: I don't think we need the infamous `preinitialized` (or `configured` - the current name) is needed anymore. This was a workaround that we introduced so that we can have logs when starting Firecracker. We can now have logs by configuring Firecracker from the start of the process. Can we remove that workaround? It can be done in another PR to not clutter this one, but I think we should do this before publishing a new version of Firecracker. WDYT?\r\n> \r\n> From what I recall, even with this type of configuration for the logger, `panic::set_hook()` would still be problematic because we can't be sure whether to use `error!` or `println!`.\r\n\r\nDamn... I always forget about that one. I still think we can work around it. I'll open an issue about that one as well.\r\n  Closing this for now as no urgent need for this functionality has been identified. Feel free to reopen if otherwise.\r\n  The failure occurs here:\r\n\r\n```\r\nregister_irqfd_evt!(com_evt_1_3, 4);\r\n``` I think the failure is caused by [this](https://lore.kernel.org/patchwork/patch/1082018/) patch. > What is the error message (code number) returned when it fails?\r\n\r\n22 (EINVAL)  @sandreim @serban300 I did a rebase and decreased the coverage **after** making sure all the code I added/removed is covered by unit tests. Please take a look and re-review!  Currently instance id has little limitation. Here introduces some Regex to\r\nlimit it more strict.\r\n\r\nIt allows only alphanumeric and `-`, starting with alphanumeric and max\r\nlength of 64.\r\n\r\nSigned-off-by: xiekeyang <keyang.xie@gmail.com>\r\n\r\n## Reason for This PR\r\n\r\nLimit instance id strictly;\r\n\r\nRemove previous error enum items for this has more causes to fail and should depend on regexp.\r\n\r\nThis seems less strong, but it can bring more flexible improvement via fixing the regex pattern.\r\n\r\n## Description of Changes\r\n\r\nThe commit says it all.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n Hi @andreeaflorescu thanks for your explain. It sounds ok, I'll close this PR.  Hi, can @mi-yu and I go ahead and get assigned to this issue? To follow up, do you have more specifics on how to go about the emulation for `aarch64`? I'm looking at the code here: https://github.com/firecracker-microvm/firecracker/blob/master/devices/src/legacy/i8042.rs but I'm not sure what is `x64` specific.  Hi @mi-yu ,\r\nThe i8042 is a keyboard driver that is x86 specific (you cannot enable it for a arm64 kernel config). You can try do a `make menuconfig` inside a linux kernel on an arm64 and x86_64 machine in parallel. If you go to \"Device drivers -> input device support -> hardware i/o ports\" you will see that on the x86_64 you get the \"i8042 PC keyboard controller\" option while on the arm64 machine you do not.\r\nWhat we could do for arm64 in this scenario is to implement an GPIO controller which is \t\t\tused in virtualized ARM systems to provide injection of keycodes through the linux gpio-keys driver without the need for a more complex device (i.e. a keyboard controller). \r\nWe could use the gpio device to send a combination of CTRL+ALT+DELETE, just like we do on x86_64 by implementing the i8042.\r\nFortunately enough, the linux kernel offers support for the ARM PrimeCell GPIO (PL061) which is a AMBA (Advanced Microcontroller Bus Architecture) compliant device. In Firecracker we already have the RTC which is also an AMBA device implementing the PL031 specification. \r\nSo the next step here as far as introducing ctrl-alt-del functionality on aarch64 would be to try to implement the pl061 [specification](http://infocenter.arm.com/help/topic/com.arm.doc.ddi0190b/DDI0190.pdf). Take a look at the RTC implementation (devices->src->legacy) for a little bit of inspiration.\r\n @mi-yu @pyrito are you still interested in contributing here? @acatangiu apologies for the late response. I don't think I will have the time to contribute to this issue in the near future. I'll unassign myself. Thanks!   We currently have a use case where we need to dynamically attach drives, we do this by creating stub drives and later using patch to replace the stub drive with an actual drive. However, we've found that we want to give the option to our users to allow them to specify the rate limiter and write permissions during patching. We can work around this by doing it all in the beginning when we create the initial drives. However, this requires our users to know upfront what rate limiting and write permissions they need. While implementing this work around isn't too much work, having the ability to specify the rate limiters and write permissions during patch would really simplify things. Hello, I am interested in working on this issue. Do you have any tips for getting started? Hey @mprey. This issue has two parts. We need to provide two actions:\r\n- update block device permissions  \r\n- update rate limiter for block device\r\n\r\nThe block device permission is set when doing the device feature negotiation. Once the device is live, you can only update the block device permission only if you are reseting the device. You can take a look at the specification, section 2.2: http://docs.oasis-open.org/virtio/virtio/v1.0/cs04/virtio-v1.0-cs04.html#x1-490001. We don't support block device reset in Firecracker right now. We need to discuss whether this is something that we want to support.\r\n\r\nFor patching the rate limiter, we already have a patch on Rate Limiter for network devices. The work should be similar. You can take a look at this PR that introduced the patch as an example: https://github.com/firecracker-microvm/firecracker/pull/928\r\n\r\nWe are currently re-working the devices in Firecracker so the code that is handling devices might change quite a lot. CC: @firecracker-microvm/compute-capsule do you think it makes sense to add this feature now or should we wait for the rework of devices to get merged? Ok, well let me know if you decide to pursue this feature now. I can start working on this issue. @acatangiu - Both are probably equally as important, but if I had to choose one, probably drive permissions.  `mremap` gets issued at ~256 K:\r\n```\r\nused_capacity=262144, needed_extra_capacity=8192\r\n```\r\n\r\n```\r\nThread 2 \"fc_api\" hit Breakpoint 1, 0x0000000000a14500 in mremap ()\r\n(gdb) bt\r\n#0  0x0000000000a14500 in mremap ()\r\n#1  0x0000000000a140ec in realloc ()\r\n#2  0x0000000000000001 in ?? ()\r\n#3  0x00000000007a7d37 in core::result::Result$LT$T$C$E$GT$::map::h4d514b87a033aa50 (self=..., op=...) at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libcore/result.rs:512\r\n#4  0x00000000007a961b in alloc::raw_vec::RawVec$LT$T$C$A$GT$::current_layout::h2708694030474dc4 (self=0x7ffff7db1020) at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/liballoc/raw_vec.rs:234\r\n#5  0x00000000007a9c7d in alloc::raw_vec::RawVec$LT$T$C$A$GT$::reserve_internal::h7aaccf883ef4120e (self=0x7ffff7ff1df8, used_capacity=262144, needed_extra_capacity=8192, fallibility=Infallible, \r\n    strategy=Amortized) at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/liballoc/raw_vec.rs:670\r\n#6  0x00000000007a9f82 in alloc::raw_vec::RawVec$LT$T$C$A$GT$::reserve::h4ebc42e09489fd07 (self=0x7ffff7ff1df8, used_capacity=262144, needed_extra_capacity=8192)\r\n    at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/liballoc/raw_vec.rs:495\r\n``` If I understand correctly, if we are not whitelisting `mremap`, firecracker will panic when it tries to process requests with payload greater than 256 Kilobytes. A workaround for this is to use multiple PATCH requests, which implement JSON Merge PATCH functionality, per MMDS docs:\r\n\r\n> The MMDS contents can be updated either via a subsequent PUT (that replaces them entirely), or using PATCH requests, which feed the JSON body into the JSON Merge Patch functionality, based on RFC 7396. \r\n\r\nWould this be considered a limitation? What would be the conclusion for this issue?\r\nMy thoughts are that we can address this issue by documenting this aspect of MMDS requests, then close it.\r\n\r\n@firecracker-microvm/compute-capsule , WDYT? Your proposal sounds reasonable. MMDS was not designed with huge payloads in mind and 256 KiB sounds like a good enough size. > IMO the proposal sounds reasonable. But if we ever need to support huge payloads we could store the MMDS data in a temporary directory/file structure on disk and only use a small buffer in Firecracker to stream the data via the API server. It wouldn't be as fast as an in memory data store, but the memory footprint is reduced.\r\n\r\nIs this filesystem approach going to work around the fact that the `mremap` syscall is called when we process huge payloads? I guess we will hit this syscall either way. This limitation comes from the fact that the `micro-http` lib is retrieving the body of a HTTP request in memory, instead of streaming it. I guess, we would need to provide changes to `micro-http` lib as well, to get around `mremap`. > Your proposal sounds reasonable. MMDS was not designed with huge payloads in mind and 256 KiB sounds like a good enough size.\r\n\r\nYep, I think we have to firmly differentiate the recommended MMDS usages. I think it is best to assume that the intended and the recommended MMDS usage implies small payloads in size, at maximum 256 KiB. I will open a PR with this update. Iulian, please also check with customers. I don't remember the whole stack when I initially repro'd this but please re-repro and pinpoint where that 256 K comes from. I vaguely remember that it wasn't a fixed limit but the details are lost :( > Docs are one way to address the limitation but I think we should at least look if it is possible to return an error to the user when the payload exceeds 256KiB instead of triggering the mremap call.\r\n\r\nFirecracker can enforce a custom limit too by forcing the `vec` to a maximum capacity we decide. If the initial allocation fails, Firecracker won't be able to process the `PUT` anyway. If the payload exceeds the maximum capacity, Firecracker can reject it. > > Docs are one way to address the limitation but I think we should at least look if it is possible to return an error to the user when the payload exceeds 256KiB instead of triggering the mremap call.\r\n> \r\n> Firecracker can enforce a custom limit too by forcing the `vec` to a maximum capacity we decide. If the initial allocation fails, Firecracker won't be able to process the `PUT` anyway. If the payload exceeds the maximum capacity, Firecracker can reject it.\r\n\r\nYep, totally agree. I'll look into reproducing the issue, and then, try to understand what solution fits best. I confirm that this is fixed by #1374. Because we whitelist `mremap`, we can send payloads greater than 256KiB. When we are not whitelisting `mremp`, sending a payload bigger than 256KiB induce a panic, with an error related to (25) syscall - `mremap`.  This PR get rid of some discovered incorrect usages of `checked_offset` and `checked_range_offset` from memory_model crate. It also renames memory model\r\nfunctions like `region_end` and `end_addr` which with their naming bring ambiguity\r\nin how their usage should be.\r\n\r\nSigned-off-by: Iulian Barbu <iul@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\n#1296 \r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [ ] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [ ] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [ ] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n > Haven't yet looked at the code, but wanted to call-out the need for a better commit (and PR) summary (the first line - the title). It should summarize the intention of the changes along with the area/module they are in.\r\n\r\nI've updated accordingly. Please take a look at the commit title again. I've added the modules where the changes reside in the commit description, because of the 50 chars length rule for the commit title. In your last push the queue unit test is failing- test virtio::queue::tests::test_checked_new_descriptor_chain ... FAILED\r\nEvent though is WIP at least unit tests should be clean at every push. > In your last push the queue unit test is failing- test virtio::queue::tests::test_checked_new_descriptor_chain ... FAILED\r\n> Event though is WIP at least unit tests should be clean at every push.\r\n\r\nYes, I get your point. I was thinking more on actual backing up my latest changes. I can also keep a mirror branch, to push to it, which is not linked in any way to the PR branch, but it is not that straight forward. I guess it is not so impactful if we force push changes that are on their way to be fixed, or is it? > In your last push the queue unit test is failing- test virtio::queue::tests::test_checked_new_descriptor_chain ... FAILED\r\n> Event though is WIP at least unit tests should be clean at every push.\r\n\r\nAs long as it doesn't create unnecessary work for other people, why would this be an issue? > > In your last push the queue unit test is failing- test virtio::queue::tests::test_checked_new_descriptor_chain ... FAILED\r\n> > Event though is WIP at least unit tests should be clean at every push.\r\n> \r\n> Yes, I get your point. I was thinking more on actual backing up my latest changes. I can also keep a mirror branch, to push to it, which is not linked in any way to the PR branch, but it is not that straight forward. I guess it is not so impactful if we force push changes that are on their way to be fixed, or is it?\r\n\r\nTo me looked like the failure wasn't noticed and the unit test was pretty simple to fix. If that is not the case than I'm fine with the way it is.  \r\n\r\n## Reason for This PR\r\n\r\nThere's a typo in the README: `unkown` instead of  `unknown`\r\n\r\n## Description of Changes\r\n\r\ntypo fixed in the README\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n  Done, the only two required checks are now `aarch64` (which runs on a1.metal) and `x86_64`.  ## Reason for This PR\r\n\r\nIssue #1228 \r\n\r\n## Description of Changes\r\n\r\nThis PR adds support for a configurable MMDS IP address. Previously, the MMDS IP was hardcoded to `169.254.169.254`. Following this PR, the user can choose the MMDS IP when configuring the microvm network interfaces (via `PUT /network-interfaces/<id>`). To that end, the `NetworkInterfaceConfig` struct now holds a new field named `mmds_ip`.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] This PR closes #1228 \r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] The required doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Code-level documentation for touched code is included in this PR.\r\n- [ ] The API changes are reflected in `firecracker/swagger.yaml`.\r\n- [ ] The changes in this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n > Regarding @sandreim's comment:\r\n> \r\n> I agree, it makes sense. There should be no reason to tie the MMDS to a specific network interface. I'm not sure how your proposal fits in our code-base (how easy it is to make that happen), but it is conceptually a better design.\r\n> \r\n> One obvious downside is that when having MMDS enabled, **all** interfaces will take a performance/latency hit as they inspect `dest-ip` of every outgoing packet. And I think that's fine.\r\n\r\nThis also would create a breaking API change, but we could handle that by still supporting and deprecating the per net device configuration and applying it globally. Eventually we will remove the old configuration method.\r\n\r\nAs you said, probably this would require significant effort to fit it to the current code-base. Maybe someone with more context can estimate this effort so we can plan to do it later when we want refactor the device model / MMDS service.\r\n\r\n I think it is useful to have per-interface mmds configurability. We can run multiple apps with different networking requirements within a microvm, so we wouldn't want to be limited by an \"all or nothing\" switch. For example, if I am running a container from which I want to hide metadata, and you make mmds config global, then there is nothing I can do to prevent that container from accessing mmds. I could add blackhole routes or iptables rules to filter out traffic, but (a) that is visible to the container, (b) privileged containers can remove thouse routes/filters.\r\n\r\nAlso, addresses in the 169.254.0.0/16 block are link-local. By definition they are valid only for the specific network interface(s) connected to that link. Because firecracker can't know which link a given interface is connected to, it can't define a 169.254.x.y address as a global endpoint.\r\n\r\nAlso suggest renaming mmds_ip to mmds_ipv4_addr(ess). > I think it is useful to have per-interface mmds configurability. We can run multiple apps with different networking requirements within a microvm, so we wouldn't want to be limited by an \"all or nothing\" switch. For example, if I am running a container from which I want to hide metadata, and you make mmds config global, then there is nothing I can do to prevent that container from accessing mmds. I could add blackhole routes or iptables rules to filter out traffic, but (a) that is visible to the container, (b) privileged containers can remove thouse routes/filters.\r\n\r\nThank you Onur for providing this use case, at least I was not aware of it. What do you think about changing the Firecracker REST API to provide a separate endpoint for configuring the MMDS IPs, while still keeping the allow_mmds_requests flag on the interface configuration ?\r\n\r\nIMO this would decouple the configuration of MMDS completely from the network interface while still supporting the use case you described. > What do you think about changing the Firecracker REST API to provide a separate endpoint for configuring the MMDS IPs, while still keeping the allow_mmds_requests flag on the interface configuration ?\r\n\r\nYes, I think that would be sufficient for our purposes. From the previous conversations I think we can extract two approaches for supporting custom MMDS IP addresses, which can fit also requirements in terms of MMDS visibility per network interface. \r\n\r\n1. **MMDS configurable IP address list**\r\n\r\nThis solution provides MMDS custom IP addresses support through a dedicated REST API, which permits setting up custom MMDS IP addresses. This MMDS IP address list will be bound to a `MmdsNetworkStack` of every net device, and it will default to a list comprised from the default `169.254.169.254`. Every network device can be configured to allow MMDS requests. The default is to not allow MMDS requests.\r\n\r\n_Advantages_:\r\n* Clear separation between `MmdsNetworkStack` and `Net` device resources.\r\n\r\n_Disadvantages_:\r\n* We will have a performance hit. Every time we want to transmit or receive a packet, we will have to confront its src IP address or dst IP address with the custom MMDS IP addresses list. The IP address check can be optimized, and depends mostly on the number of  configured MMDS IP addresses (access time for elements from the list) and their subnet(s) (validation of an IP address before the list access).\r\n\r\n@ofiliz , @firecracker-microvm/compute-capsule, what do you think? Do you have any concerns related to the performance hit that we'll have with this approach? Do you think it is a real concern for the discussed use cases?\r\n\r\n2. **MMDS configurable IP address per network interface**\r\n\r\nThis solution provides MMDS custom IP addresses support through the network device configuration REST API and it is mostly covered by this PR. The `Net` device will process a packet and will detect it as a MMDS packet if the src IP address or dst IP address of the packet is equal to the IP address configured for that network device. If no MMDS custom IP address is specified at `Net` device configuration time, the MMDS IP address for that specific `Net` device will default to `169.254.169.254`. The `Net` device can be configured to allow MMDS requests.\r\n\r\n_Advantages_:\r\n* We will not have any performance hit, and the current execution flow for MMDS packet detection and transmission will remain the same.\r\n\r\n_Disadvantages_:\r\n* Separation of `MmdsNetworkStack` and `Net` resources is not achieved. We would end up with a  MMDS IP address bound to a `Net` device. A global `MmdsNetworkStack` is responsible for processing MMDS requests, and it will depend on resources bound to the `Net` device.\r\n\r\n@ofiliz , @firecracker-microvm/compute-capsule , what do yo think? Can we compromise this rather aesthetic concern for the benefits that it will bring? At the moment, closing this in favour of #1680 . This PR is another solution for the same thing, which was less preferred because the lack of MMDS/Net device resource separation.  [Issue from upstream](https://github.com/rust-lang/rustfmt/issues/3348) tracking this.  Per comment: https://github.com/firecracker-microvm/firecracker/blob/99a026756c406d1c7f60c5c9f6685adcab1229e7/devices/src/virtio/net.rs#L153-L154 virtio-net implementation in firecracker does not support VIRTIO_NET_F_MRG_RXBUF. The VIRTIO_NET_F_MRG_RXBUF allows for much finer memory management that the existing one that relies on humongous 68K (17 pages) buffers on guest side. As I understand the 68K buffers also have to be contigous in physical memory and may come hard to achieve under memory shortage pressure. \r\n\r\nPlease see relevant snipper from virtio spec:\r\n\"5.1.6.3.1 Driver Requirements: Setting Up Receive Buffers\r\nIf VIRTIO_NET_F_MRG_RXBUF is not negotiated:\r\nIf VIRTIO_NET_F_GUEST_TSO4, VIRTIO_NET_F_GUEST_TSO6 or VIRTIO_NET_F_GUEST_UFO are negotiated, the driver SHOULD populate the receive queue(s) with buffers of at least 65562 bytes.\r\nOtherwise, the driver SHOULD populate the receive queue(s) with buffers of at least 1526 bytes.\r\nIf VIRTIO_NET_F_MRG_RXBUF is negotiated, each buffer MUST be at greater than the size of the struct virtio_net_hdr.\" Hi @wkozaczuk, thank you for reporting this and for the thorough investigation! Looks like this is a pre-existing functionality gap that we haven't stumbled across since now. We will look into it as soon as we have bandwidth - in the meantime, if you have a fix ready, PRs are welcome! I cannot speak to whether virtio spec mandates this feature or not. I am also not sure how it affects memory utilization in Linux guest which clearly handles that but I wonder at what cost. \r\n\r\nOn OSv side, for now, I came up with a patch that makes it use large (68K) sg buffers for RX ring if VIRTIO_NET_F_MRG_RXBUF is not negotiated. This, unfortunately, leads to much higher memory utilization - 17MiB vs 1MiB (256 68K buffers vs 256 4K buffers) - but at least it works. As I understand each packet whether small (<4K) or large needs single 68K which obviously is not very efficient.\r\n\r\nSo I must say this shortcoming is not that urgent to me to fix but I would love to have it addressed eventually (QEMU supports it by default).  The change does have user impact, as the swagger spec has been modified, so I think the changelog should be updated.  ## Reason for This PR\r\n\r\nAs we're starting to use the `micro_http` crate from the cloud-hypervisor project, we have a few very minor fixes/improvements. This is an upstream submission tentative.\r\n\r\n## Description of Changes\r\n\r\n* Export the `Method` enum\r\n* Clippy fix\r\n* Allow for setting the HTTP response header `Server` field as there might be other consumer of the micro_http crate than Firecracker.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [ ] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [ ] The description of changes is clear and encompassing.\r\n- [ ] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [ ] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [ ] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [ ] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n @andreeaflorescu @georgepisaltu I added a unit test for the server setter, as without it the coverage was below the expected threshold. Now it's happier. @dianpopa @andreeaflorescu It seems the CI could not start? Should we re-kick it? > > @dianpopa @andreeaflorescu It seems the CI could not start? Should we re-kick it?\r\n> \r\n> Yes, indeed, sorry for that, we still have no idea why that happens sometime. Please do a `push -f`.\r\n\r\nNo worries. I just rebased and pushed force.  Signed-off-by: Laura Loghin <lauralg@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\nWe want to allow the user to configure and start a microVM by sending only one PUT request to the API server.\r\n\r\n## Description of Changes\r\n\r\nAdded a new type of PUT request `/vm-config` for configuring a microVM. The JSON body of this request will contain the whole configuration for the vm. Sending this type of request will also start the microVM.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] The required doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] The API changes are reflected in `firecracker/swagger.yaml`.\r\n- [x] The changes in this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n  Signed-off-by: Laura Loghin <lauralg@amazon.com>\r\n\r\n## Reason for This PR\r\n\r\nOn some machines, `test_sec_audit.py` fails because the output of `cargo audit` command contains some random characters between \"Success\" and \"No vulnerable packages found\". We can avoid that by checking the exit code of the command instead.\r\n\r\n## Description of Changes\r\n\r\nChanged test to check exit code of `cargo audit`.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] The reason for this PR is clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n My guess is that the particular output string changed slightly. Checking return code will always be more robust than parsing output. Recent versions of cargo audit (e.g. v0.8.1, the one from fcuvm-v10 docker image) feeds those characters into stdout if the terminal emulator supports colors. \r\n\r\nSo those characters (https://en.wikipedia.org/wiki/ANSI_escape_code) are a way to colorize stdout, and the terminal emulator is able to interpret it. In the previous docker image, fcuvm-v9, the version of cargo audit is v0.6.1, which apparently, does not feed those escape characters into stdout.   When start a VM in AARCH64 with more than 16 vcpus, the VM can start but only 16 vcpus can be online in VM.\r\nFor example, I started a VM with 32 vcpus.\r\n```\r\n[    0.022545] psci: failed to boot CPU16 (-22)\r\n[    0.047729] CPU16: failed to boot: -22\r\n[    0.048078] CPU16: failed in unknown state : 0x0\r\n[    0.048723] psci: failed to boot CPU17 (-22)\r\n[    0.049122] CPU17: failed to boot: -22\r\n[    0.049473] CPU17: failed in unknown state : 0x0\r\n[    0.050170] psci: failed to boot CPU18 (-22)\r\n[    0.050564] CPU18: failed to boot: -22\r\n[    0.050902] CPU18: failed in unknown state : 0x0\r\n[    0.051534] psci: failed to boot CPU19 (-22)\r\n[    0.051943] CPU19: failed to boot: -22\r\n[    0.052297] CPU19: failed in unknown state : 0x0\r\n[    0.052943] psci: failed to boot CPU20 (-22)\r\n[    0.053340] CPU20: failed to boot: -22\r\n[    0.053691] CPU20: failed in unknown state : 0x0\r\n[    0.054364] psci: failed to boot CPU21 (-22)\r\n[    0.054767] CPU21: failed to boot: -22\r\n[    0.055119] CPU21: failed in unknown state : 0x0\r\n[    0.055809] psci: failed to boot CPU22 (-22)\r\n[    0.056203] CPU22: failed to boot: -22\r\n[    0.056543] CPU22: failed in unknown state : 0x0\r\n[    0.057169] psci: failed to boot CPU23 (-22)\r\n[    0.057570] CPU23: failed to boot: -22\r\n[    0.057936] CPU23: failed in unknown state : 0x0\r\n[    0.058605] psci: failed to boot CPU24 (-22)\r\n[    0.059021] CPU24: failed to boot: -22\r\n[    0.059381] CPU24: failed in unknown state : 0x0\r\n[    0.060052] psci: failed to boot CPU25 (-22)\r\n[    0.060463] CPU25: failed to boot: -22\r\n[    0.060811] CPU25: failed in unknown state : 0x0\r\n[    0.061419] psci: failed to boot CPU26 (-22)\r\n[    0.061819] CPU26: failed to boot: -22\r\n[    0.062170] CPU26: failed in unknown state : 0x0\r\n[    0.062840] psci: failed to boot CPU27 (-22)\r\n[    0.063241] CPU27: failed to boot: -22\r\n[    0.063586] CPU27: failed in unknown state : 0x0\r\n[    0.064254] psci: failed to boot CPU28 (-22)\r\n[    0.064650] CPU28: failed to boot: -22\r\n[    0.064985] CPU28: failed in unknown state : 0x0\r\n[    0.065605] psci: failed to boot CPU29 (-22)\r\n[    0.066021] CPU29: failed to boot: -22\r\n[    0.066358] CPU29: failed in unknown state : 0x0\r\n[    0.066995] psci: failed to boot CPU30 (-22)\r\n[    0.067396] CPU30: failed to boot: -22\r\n[    0.067753] CPU30: failed in unknown state : 0x0\r\n[    0.068415] psci: failed to boot CPU31 (-22)\r\n[    0.068816] CPU31: failed to boot: -22\r\n[    0.069169] CPU31: failed in unknown state : 0x0\r\n\r\n```\r\nAfter boot into VM,  use `lscpu`. The vcpu 0-15 is online and 16-31 is offline. BTW,  I can't make them offline. Hello @dianpopa ,\r\nThanks for answering.\r\nI used the vmlinux.bin and xenial.rootfs.ext4 in getting-started guide. \r\n```\r\n#!/bin/bash\r\narch=`uname -m`\r\nkernel_path=\"/root/image_source/vmlinux.bin\"\r\nif [ ${arch} = \"x86_64\" ]; then\r\n    curl --unix-socket /tmp/firecracker.socket -i \\\r\n        -X PUT 'http://localhost/boot-source'   \\\r\n        -H 'Accept: application/json'           \\\r\n        -H 'Content-Type: application/json'     \\\r\n        -d \"{\r\n              \\\"kernel_image_path\\\": \\\"${kernel_path}\\\",\r\n              \\\"boot_args\\\": \\\"console=ttyS0 reboot=k panic=1 pci=off\\\"\r\n         }\"\r\nelif [ ${arch} = \"aarch64\" ]; then\r\n    curl --unix-socket /tmp/firecracker.socket -i \\\r\n        -X PUT 'http://localhost/boot-source'   \\\r\n        -H 'Accept: application/json'           \\\r\n        -H 'Content-Type: application/json'     \\\r\n        -d \"{\r\n              \\\"kernel_image_path\\\": \\\"${kernel_path}\\\",\r\n              \\\"boot_args\\\": \\\"keep_bootcon console=ttyS0 reboot=k panic=1 pci=off maxcpus=127\\\"\r\n         }\"\r\nelse\r\n    echo \"Cannot run firecracker on $arch architecture!\"\r\n    exit 1\r\nfi\r\nrootfs_path=\"/root/image_source/xenial.rootfs.ext4\"\r\ncurl --unix-socket /tmp/firecracker.socket -i \\\r\n    -X PUT 'http://localhost/drives/rootfs' \\\r\n    -H 'Accept: application/json'           \\\r\n    -H 'Content-Type: application/json'     \\\r\n    -d \"{\r\n          \\\"drive_id\\\": \\\"rootfs\\\",\r\n          \\\"path_on_host\\\": \\\"${rootfs_path}\\\",\r\n          \\\"is_root_device\\\": true,\r\n          \\\"is_read_only\\\": false\r\n     }\"\r\ncurl --unix-socket /tmp/firecracker.socket -i  \\\r\n    -X PUT 'http://localhost/machine-config' \\\r\n    -H 'Accept: application/json'            \\\r\n    -H 'Content-Type: application/json'      \\\r\n    -d '{\r\n        \"vcpu_count\": 32,\r\n        \"mem_size_mib\": 1024,\r\n        \"ht_enabled\": false\r\n    }'\r\ncurl --unix-socket /tmp/firecracker.socket -i \\\r\n    -X PUT \"http://localhost/logger\" \\\r\n    -H \"accept: application/json\" \\\r\n    -H \"Content-Type: application/json\" \\\r\n    -d \"{\r\n             \\\"log_fifo\\\": \\\"logs.fifo\\\",\r\n             \\\"metrics_fifo\\\": \\\"metrics.fifo\\\"\r\n    }\"\r\ncurl --unix-socket /tmp/firecracker.socket -i \\\r\n    -X PUT 'http://localhost/actions'       \\\r\n    -H  'Accept: application/json'          \\\r\n    -H  'Content-Type: application/json'    \\\r\n    -d '{\r\n        \"action_type\": \"InstanceStart\"\r\n     }'\r\n```\r\nMy host is linux-version-4.19.36-aarch64 environment with 96 cpus and 2T memory. > @Unlimited-Witchcraft investigating this.\r\n\r\nI got it this afternoon. I will contribute it in next days. Hi @Unlimited-Witchcraft,\r\n\r\nDo you have any updates on the fix or need help with the PR ? I have prepared a PR but it depends on this one here: https://github.com/rust-vmm/kvm-ioctls/pull/65 > Hi @Unlimited-Witchcraft,\r\n> \r\n> Do you have any updates on the fix or need help with the PR ?\r\n\r\nWith the next few days so busy. Your PR is great!   ## Reason for This PR\r\n\r\nTesting coverage implicitly tests all unit tests (but not doc tests). This makes re-testing unit tests redundant. This redundancy should be removed.\r\n\r\n## Description of Changes\r\n\r\nThis PR makes unit tests not be run on x86 (since, on this platform, coverage tests implicitly test them). It also explicitly tests doc tests in `test_doctests.py`, on x86 , since coverage tests do not implicitly test these tests. It does not effect testing behaviour on aarch64.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n  Hello, firecracker-containerd has begun working on the upgrade from Firecracker v0.17.0 to v0.18.0. The vsock-related updates have gone well so far, but there appears to be an unrelated regression related to patching drives after VM startup.\r\n\r\nWhenever firecracker-containerd issues a PatchGuestDrive request, it now gets this error message: \r\n```\r\n[PATCH /drives/{drive_id}][400] patchGuestDriveByIdBadRequest  &{FaultMessage:Error retrieving device epoll handler!}\r\n```\r\n\r\nI can see in the logs that the calls prior to this error that attach the drives were successful and it doesn't look like there were any drive-related API changes from 0.17->0.18, so I think we are still using the API correctly.\r\n\r\nI'm not at all familiar with the Firecracker codebase so I easily may be misinterpreting this, but I did notice there was a test added between 0.17 and 0.18 that seems to actually assert that getting this error response is the expected behavior: https://github.com/firecracker-microvm/firecracker/blob/1e1cb6f8f8003e0bdce11d265f0feb23249a03f6/vmm/src/lib.rs#L2814-L2825\r\n\r\nWas there any expected change in behavior related to patching drives between 0.17 and 0.18? If on the other hand this is suspected to be a bug, let me know if I can provide more information or try reproducing on different Firecracker commits to help track down the cause. @dhrgit Thanks for the clarification, that makes much more sense. Based on your explanation, I tried adding an artificial 1 second sleep before the drive PATCH call to see if it was just happening too early in the boot cycle; it did indeed fix the issue and allowed the PATCH to complete successfully.\r\n\r\nI'm now suspecting this is actually indirectly related to the vsock updates. I believe what's happening is:\r\n1. We start the VM and then, from the host, try to connect to the Agent process we run inside the VM, which listens on a vsock port.\r\n2. The first connect attempt fails because the VM is still booting and the Agent is not yet running/listening. This results (as the firecracker vsock docs state) in the socket getting closed after the host-side writes `CONNECT <port>`.\r\n3. However, the code I wrote didn't check whether the socket was closed; it assumed after the successful write of `CONNECT <port>` that the socket was ready and passed it off to be used. This resulted in the connect \"succeeding\" much earlier than it should have and thus the PATCH drives to occur much earlier than it should have (resulting in the error we saw).\r\n\r\nThis is thus user error, but I do have a follow-up question. Do you have any recommendation on ways to check that the socket was not closed after writing `CONNECT <port>`? Ways I can think of:\r\n1. Have the host-side socket attempt to write something after `CONNECT <port>`, i.e. write `HELLO\\n`, which should only succeed if the socket is not closed. Then have the VM guest-side socket be sure to read that message before passing the socket off to be used by anything else (so there aren't unexpected stray bytes sitting on the socket).\r\n1. I tried doing a zero-byte write to the socket from the host-side, but that appears to succeed even if the socket was not actually connected successfully (I can't find any definitive docs on what the expected behavior is for zero-byte writes to closed sockets, so maybe it's undefined?)\r\n\r\nI suspect 1. above works, but it does seem to introduce a fair bit of extra complication and more error cases to handle, so I want to make sure there's not an obviously better way of handling this that I'm missing. @dhrgit Makes sense, will give that a try and open a separate issue if I run into anything else. Closing this one, thanks for your help!  Hi,\r\n\r\nI have a setup where I need to deploy multiple containers on different VMs and I am using firecracker VMs to measure these workloads(https://github.com/parsa-epfl/cloudsuite). I am trying to setup an overlay network, the setup runs fine with normal host machines but I am not able to get it working on firecracker VMs, when I do` docker service create ` to launch a container on one of the microVMs it fails with `1/1: network sandbox join failed: subnet sandbox join failed for \"10.0.0.0/24\":\u2026 `. I have checked firecracker networking and its able to ping properly. I am not sure if this is related to firecrakcer specifically or docker. Docker creates a new network interface and I am not sure if firecracker will automatically connect to this interface through docker CLI  or whether I can even attach two network interfaces to the microVM . If someone has run into this issue or give me some direction on how to debug this please let me know. I would really appreciate any help.\r\n\r\nThanks,\r\nAnjali  My partner and I will be working on this issue Hi @dhrgit,\r\n\r\nHope all is well. Just checking, did you get our email asking for more direction on this issue? @iabestever The next step here was to test the performance impact of IRQ sharing, in order to determine if a round-robin assignment was good enough.\r\n\r\nIRQ sharing may cause extra VM exists upon interrupt delivery, since multiple drivers may end up querying their respective devices for their interrupt status. These queries are done via MMIO reads, and every read incurs a VM exit.\r\n\r\nFor instance, if multiple high-throughput virtio-net devices would share an interrupt, every IRQ delivery would incur some extra VM exists, which might have some impact on performance (i.e. throughput, frames per second). No idea on the magnitude of that impact, though, so this scenario should be tested.\r\n\r\nSo, as a first step, a straight forward approach would be to iperf a few virtio-net devices, under two different scenarios: 1) each device gets its own IRQ, and 2) all devices share an IRQ, and see when / if throughput decays. Thank you @dhrgit, we'll get right on it ![deviceOnIrq](https://user-images.githubusercontent.com/5136247/69923928-d671e280-146d-11ea-8f57-da53db7d5e3a.png)\r\n@dhrgit so we ran iperf3 tests to see the throughput of virtio net devices. As we increased the number of virtio net devices, we ensured they were all assigned to the same IRQ. As you can see, as the numbers of devices on an IRQ increases the throughput gradually decreases. We did this be making x TAP interfaces and then attaching them to a microVM as described in #711. In addition, we tested only one device of all the devices on one IRQ receiving network packets, and then we took the average to get the data points seen in the graph.\r\n\r\nTo combat this decrease in throughput, should we devise an irq affinity scheme that ensures network interfaces actively avoid sharing IRQs with other network interfaces? Or alternatively, is there a way to see which interfaces are high-load and which interfaces are low-load over the lifecycle of a microVM and then should we reassign IRQs based on that information?   If I'm reading this correctly, your tests show the throughput maxing out at about 6Gbps. This sounds a bit low. Can you please post the full test setup (i.e. vm configs, hardware used, kernel versions, etc)?\r\n\r\nAlso, it looks like there's a higher throughput for two devices vs one. That sounds a bit counter-intuitive. Can you please post your data samples? Thanks! [hardware.txt](https://github.com/firecracker-microvm/firecracker/files/3915541/hardware.txt)\r\n^This file is my hardware information.\r\n[runscript.txt](https://github.com/firecracker-microvm/firecracker/files/3915543/runscript.txt)\r\n^This file has the API commands we used to attach the virtio network devices to the microVM.\r\n\r\nHere is the kernel I am using: Linux iabestever-Inspiron-N5110 5.0.0-36-generic #39~18.04.1-Ubuntu SMP Tue Nov 12 11:09:50 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux \r\n\r\nHere is the qemu version I have: QEMU emulator version 2.11.1(Debian 1:2.11+dfsg-1ubuntu7.20)\r\n\r\nI think the higher throughput for two devices vs one may have been an outlier/an expression of the limitation of my hardware. I also only ran once for one device, so maybe more samples for one and two devices may yield better, more intuitive results. Here is the data sample list for your reference:\r\n[data.xlsx](https://github.com/firecracker-microvm/firecracker/files/3915644/data.xlsx)\r\n\r\n\r\n Thanks for the detailed information! Quick question, thought: for what are you using qemu in these tests?\r\n\r\nAlso, with Firecracker, please keep in mind that all emulation runs on a single thread. So, even without IRQ sharing, throughput is likely to drop with the number of net devices being emulated. What we're looking for is the difference in throughput drop for the two difference scenarios: sharing vs dedicated IRQs. In the experiments I performed, only one device was being emulated at any given time. So I would attach x amount of network interfaces to a microVM and then inside the microVM I would set each of them to be listening on a unique IP address. However, from outside the microVM, when doing the tests, at any given time, only network packets were being sent to only one IP address. I believe that should only be testing having network devices on a dedicated IRQ and the throughout decrease due to the increased VM exits as devices increase. Please correct me if I am wrong. \r\n\r\nSo the first IRQ is taken up by the root block device - IRQ 5 in Intel. Then I devised a test such that there was one network device to one IRQ. Since there are 10 IRQs available, I ran this experiment 10 times. In essence, I did throughput testing with one network device to one IRQ. Then I did another test where I had two network devices, each with their own dedicated IRQ. I tested the throughput of both devices individually - i.e. the throughput of network device one indpendently of the throughput of network device two.  Then I did repeated this test with three network devices, each with their own dedicated IRQs. I repeated this for 10 network devices as we only have 10 IRQs. At each point, I found the throughput to remain practically constant (only minor variations). And this number is ~5.6Gbps. So, with 10 network interfaces with dedicated IRQs the throughput for each interface is ~5.6Gbps. However, if 10 network interfaces all shared one IRQ, then the throughput for each interface is ~3.519Gbps.     \r\n\r\nI hope this helps. Please let me know if my understanding is unclear. It makes sense for the throughput to drop even if only one device is under load, since every interrupt will incur a VM exit for each attached device, regardless of the device being idle or not. Hence the drop from 5.6Gbps to 3.6Gbps you observed.\r\n\r\nWhile the above is a very interesting result, it would also be helpful to have the devices loaded concurrently and see the difference in the compound throughput, though. I.e. compare these two scenarios: 1) N devices sharing an IRQ are loaded with traffic at the same time, and 2) N devices, each with their own dedicated IRQ, are loaded with traffic at the same time.\r\n\r\nAlso, since there appears to be a considerable throughput drop, it would be interesting to know if the overall performance is more impacted by pairing similar or different devices on a single IRQ. I.e. if multiple net devices share an IRQ, there's a throughput drop; but, if a net and a block device share an IRQ, how would that impact their compound performance (throughput for net, IOPS + throughput for block).\r\n\r\nTo sum it up: we have three types of virtio deivces: block, net, and vsock. If two devices need to share an IRQ, we are interested in seeing which pairing options (e.g. net + block on one IRQ, or block + vsock on one IRQ, etc) have the least impact on the overall performance, when the devices that are sharing an IRQ are driven to high load. Sounds good. I will have performance results for the different device type matchups to you by Friday. \r\n\r\nhttps://www.thegeekdiary.com/how-to-create-virtual-block-device-loop-device-filesystem-in-linux/ Does this website accurately define how to create a virtual block device? I was following these steps and just want to confirm if this is indeed the correct way. \r\n\r\nAlso, I realise Firecracker only has the option to attach devices before boot. May I ask why is that? Additionally will it be possible to reassign IRQs based on measuring load? Say further down the line we have arrived at the conclusion that pairing a network device and a vsock on one IRQ yields the least amount of of overall impact on performance. However, during runtime we see that we have paired a high load network device and a high load vsock. Say another IRQ has a low load vsock and a low load network device. In that scenario, can we, during runtime, reassign IRQs such that a high load network device is paired with a low load vsock? Firecracker doesn't currently support any hotplug mechanism (e.g. PCI). All device configuration, including the assigned IRQ, is passed to the kernel at boot time only, via the kernel command line. This is why it isn't possible to reassign IRQs, nor attach new devices at runtime.  ## Reason for This PR\r\n\r\n#1264\r\n\r\n## Description of Changes\r\n\r\nWhen we insert virtio mmio devices into fdt, we should add it in order, from low to high.\r\nFor now, they were iterated and inserted in agnostic order.\r\nTo avoid that, we re-store them in Vec for sorting out lately in right\r\norder.\r\n\r\nSigned-off-by: Penny Zheng <penny.zheng@arm.com>\r\nSigned-off-by: Haibo Xu <haibo.xu@arm.com>\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n- [x]  All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n @dianpopa  thanks for the detailed comments. ;). \r\nyou're right, if we use `Vec` instead, the insertion order will be what we need, from low to high and the sorting part will be in no need. \ud83e\udd17\r\nI will update asap~ Hi~ @dianpopa I have already updated. Feel free to take a look~ thanks~ ;) Hi~ @dianpopa Sorry for all \"clippy\" error, (actually unfamiliar with the grammar\ud83d\ude22), will be more careful. ;).\r\nAnd already re-based and updated~ ptal.\r\n > > I'm not sure about this change. I understand how it simplifies things when building the FDT but personally I don't like the idea of using a Vec instead of a HashMap here and implementing `get_device()` and `remove_device_info()` by iterating over the entire collection. I don't have a better idea right now, but I would look for alternatives before merging this.\r\n> > I'm curiousif there are any other opinions here. @firecracker-microvm/compute-capsule ?\r\n> \r\n> The number of devices a VM can have is already limited by the number of IRQs you have at your disposal, which actually deems the use of a hashmap useless. Iterating over a `137` entries (159-32 in the case of aarch64) stored in a `Vec` is insignificant as far as performance.\r\n> Another observation is that `remove_device_info` is used only in tests. The only operation in dev code is `get_device`.\r\n\r\nI'm also worried about readability and ease of use. Since each device has a key and some data, the natural option here seems to hold them in a hashmap. \r\n\r\nIf performance is not a problem then you can build a Vec starting from the initial hashmap and sort it. Hi~ guys @dianpopa @serban300 @acatangiu \r\nSo sorry for the delayed response. Just got back from holiday. ;).\r\nI will update the commits as you all suggest asap and immediately inform you guys when it's done. thanks. ;)    Hi~\r\nCombined with suggestion from @serban300 and @acatangiu , maybe we should choose the Option 2:\r\nwhen building the FDT copy the elements in the HashMap in a temp Vec then sort then insert in FDT.\r\nCode is updated. Plz feel free to review. ;). Hi @acatangiu Sorry for the delayed response, got side-tracked for a while.\r\nYou're right, should take reference, not copy, I've changed all three functions, `create_virtio_node()`, `create_serial_node()`, and `create_rtc_node()`. it's not too much work, since it's all defined and called in this only file.\r\nFeel free to review ;).  Hi~ guys\r\nI, and my colleague @xiaobo55x are working on enabling firecracker with Kata Containers. \r\nFor now, the launching error is as follows:\r\n```\r\ntime=\"2019-09-11T17:52:11.579833941+08:00\" level=error msg=\"rpc error: code = Internal \r\ndesc = Could not mount /dev/vdb to /run/kata-containers/shared/containers/99bd85d0e97b41b617c721958a7a6ee4f54f72eb1a848a53de6327f902310935: input/output error\" \r\narch=arm64 command=create container=99bd85d0e97b417c721958a7a6ee4f54f72eb1a848a53de6327f902310935 name=kata-runtime pid=72762 source=runtime\r\n```\r\nIt is because that Before launching the VM, kata will create 9 block devices as Device Pool. It creates a empty, temporary file as a placeholder backend for the drive at the beginning, and using the `patch` command to modify the host-backend at runtime. This is how they convey the container rootfs. \r\nOn aarch64, we use HashMap to store all 9 virtio-mmio device nodes. But when we iterate whole HashMap to insert device nodes into fdt, it can't be guaranteed that the sequence in fdt is the same order in which we inserted the nodes into the HashMap. \r\nThat's because that HashMap is iterated in an agnostic way.\r\nYou could see that all device nodes are in random order.\r\n```\r\nroot@penny:/# ls /sys/bus/platform/devices/40001000.virtio_mmio\r\ndriver  driver_override  modalias  of_node  power  subsystem  uevent  virtio0\r\nroot@penny:/# ls /sys/bus/platform/devices/40002000.virtio_mmio\r\ndriver  driver_override  modalias  of_node  power  subsystem  uevent  virtio3\r\nroot@penny:/# ls /sys/bus/platform/devices/40003000.virtio_mmio\r\ndriver  driver_override  modalias  of_node  power  subsystem  uevent  virtio5\r\nroot@penny:/# ls /sys/bus/platform/devices/40004000.virtio_mmio\r\ndriver  driver_override  modalias  of_node  power  subsystem  uevent  virtio2\r\n\r\n```\r\nThe fixed PR is on the way. ;)   LGTM!   ## Reason for This PR\r\n\r\nRemove Duplicated Device-Feature detection function #1209\r\n\r\n## Description of Changes\r\n\r\nMethods **features** and **ack_features**, implemented in every virtio device that provide an implementation for VirtioDevice trait (e.g block, net, vsock), contain identical body, which is not device specific.\r\n\r\nThis PR removes code duplication, and move the aforementioned methods in the VirtioDevice trait, with an implementation for each method, which will be common to every virtio device.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n Also your PR checklist has nothing ticked on it \ud83d\ude04  Squashed into a single commit. \r\nTicked the items of the checklist. \r\nAlso, added some documentation comments for the newly introduced methods from VirtioDevice trait. Please also update the commit message to capture all the changes, right now the information from the squashed commit messages is lost.  # Description of problem\r\n\r\nfirecracker terminates the host connection before starting the init process (systemd or kata-agent)  in the guest OS. This issue happens when the `CONNECT <port>` command is sent immediately after `InstanceStart`. To mitigate this issue in kata containers the runtime (host) tries to connect with the agent (guest) several times until the connection succeed, we see this approach more like a workaround than a real solution, since we consider this is prone to failures in slow systems where the number of tries can be bigger.\r\n\r\n# Proposal 1\r\n\r\nFirecracker should never terminate the host connection (like virtio-vsocks implementation.. ?)\r\n\r\n# Proposal 2\r\n\r\nAdd a timeout parameter in the json request that creates the vsock\r\n\r\n`{\"vsock_id\": \"root\",\"guest_cid\": 3,\"uds_path\": \"/vsock\",\"timeout\": 120}`\r\n\r\nwhere `timeout` is in seconds\r\n\r\n---\r\n\r\ncc @sboeuf @sandreim @dhrgit  @stefanha\r\n\r\n @dhrgit thanks for answering. \r\n\r\n>  terminating the host connection is the correct behavior, since the host is trying to connect to something that isn't there.\r\n\r\nok, that make sense, can the timeout be configurable?  On Thu, Sep 12, 2019 at 4:20 PM Dan Horobeanu <notifications@github.com>\nwrote:\n\n> I'm not sure I understand what timeout that would be. In the use-case I\n> mentioned, there is no timeout involved - the host connection is\n> immediately refused by the guest (since there are no listeners present).\n>\n> Also, I don't really understand how this would work with vhost either.\n> When using vhost, were you issuing an AF_VSOCK connect call right after\n> InstanceStart? I don't see how that could've worked reliably. Unless some\n> AF_VSOCK socket is bound and listened to on the guest, any incoming\n> connection would get immediately refused. Is there something I'm missing?\n>\n>\n> I think so too.  If a client tries to connect to a server that may not yet\nbe running, it must handle the failed connection and try again.  If there\nis a message bus or service registry then maybe the client can get notified\nwhen the server comes online.  Otherwise the client needs to sleep and\nretry - it's ugly but you do the same thing with TCP/IP services too.\n @dhrgit @stefanha \r\nYour explanation seems logical, but I am still not clear about why this fix was not needed for Kata till now.\r\nFrom what I understand, when the `vhost-vsock` backend is used, this means the host kernel receives the connection from the application. And I think in this case, no matter if someone is listening inside the guest, the connection succeed. My guess is, it does succeed since the VMM initialized the `vhost-vsock` backend with a specific `CID:PORT`. When the kernel receives the connection, it simply accept it since it knows the incoming `CID:PORT`. Later when the guest application start listening onto this AF_VSOCK socket, the communication can really happen.\r\n\r\nIf, and only if my theory is correct, this means the hybrid version from Firecracker behaves differently. And if that's the case, we need to discuss if we want to handle buffering from a VMM perspective, until the guest application starts listening. I think I found the main issue. I did the next experiment in both QEMU and Firecracker:\r\n\r\n1. Add `boot_delay=6000` in the guest kernel command line\r\n2. Connect to the unix/vsock address from the host\r\n   * Use [net.Dial](https://golang.org/pkg/net/#Dial) to connect to the unix address (Firecracker)\r\n   * Use [vsock.Dial](https://github.com/mdlayher/vsock) to connect to the vsock address (QEMU)\r\n\r\nIn the QEMU case, `vsock.Dial` returns the same error (`dial vsock vm(3094744204):1024: connection reset by peer`) until the kernel continues with its execution and creates the vsock connection in the guest. \r\nBut in the Firecracker case, `net.Dial` returns no error even if the kernel has not started or it has failed, so when the runtime tries to send a request, it fails because of it expects the connection is ready once `net.Dial` returns (like the QEMU/vsocks case). so, I guess the runtime has to sleep and retry until the agent reads the message. :worried: \r\n @dhrgit after doing some testing, I found something interesting: If the unix socket is read after having written `CONNECT <port>`, `EOF` error is returned if the vsock is not ready, but when the vsock is ready in the guest, and the socket is read again, no error is returned and the buffer used to read the message contains 0x04 (EOT (end of transmission)). is this an expected behaviour?, If so,  I guess we can use it to know when the agent is ready. \r\n\r\nWhat is the answer of Firecracker when the `CONNECT <port>` command is sent ?   @dhrgit thanks for explaining.\r\nClosing issue since we found a solution that may work for kata, thanks again. :+1:   Kata containers and Qemu run on the same cluster without problem, but not firecracker.\r\n\r\n```\r\nVersions --->\r\nUbuntu server 18.04.3 LTS\r\nkernel 4.15.0-60-generic\r\nkubernetes: 1.15.3\r\nfirecracker 0.18.0\r\ncri-containerd : 1.2.9\r\nkata-runtime  : 1.9.0-alpha0\r\n   commit   : <<unknown>>\r\n   OCI specs: 1.0.1-dev\r\n```\r\n\r\n\r\nThe config file ->\r\n```\r\ncat /etc/kata-containers/configuration.toml\r\n[hypervisor.firecracker]\r\npath = \"/usr/bin/firecracker\"\r\nkernel = \"/usr/share/kata-containers/vmlinuz.container\"\r\nimage = \"/usr/share/kata-containers/kata-containers.img\"\r\nblock_device_driver = \"virtio-mmio\"\r\nenable_debug = true\r\nuse_vsock = true\r\nkernel_params = \"\"\r\nfirmware = \"\"\r\ndefault_vcpus = 1\r\ndefault_maxvcpus = 0\r\ndefault_bridges = 1\r\ndefault_memory = 4096\r\ndisable_block_device_use = false\r\n\r\n[factory]\r\n\r\n[proxy.kata]\r\npath = \"/usr/libexec/kata-containers/kata-proxy\"\r\n\r\n[shim.kata]\r\npath = \"/usr/libexec/kata-containers/kata-shim\"\r\n\r\n[agent.kata]\r\n\r\n[netmon]\r\npath = \"/usr/libexec/kata-containers/kata-netmon\"\r\n\r\n[runtime]\r\ninternetworking_model=\"tcfilter\"\r\ndisable_guest_seccomp=true\r\n```\r\n\r\n\r\nThe firecracker pod has been stuck at the \"ContainerCreating\" status. It returns the following error: \r\n\r\n`Failed create pod sandbox: rpc error: code = Unknown desc = failed to create containerd task: [PUT /vsocks/{id}][400] putGuestVsockByIdBadRequest  &{FaultMessage:unknown field `id`, expected one of `vsock_id`, `guest_cid`, `uds_path` at line 1 column 28}: unknown`\r\n\r\n Are you using the latest Firecracker version? We changed the vsock implementation and there are some changes required on Kata side as well. Thank you for the quick response.\r\n \r\nThat's right, I was using the latest version, 0.18.0.\r\n\r\nI downgraded to firecracker 0.17.0 and I overcame this error but now I got a new one.\r\n\r\nThe new error -> \r\n`Failed create pod sandbox: rpc error: code = Unknown desc = failed to create containerd task: [PUT /vsocks/{id}][400] putGuestVsockByIdBadRequest  &{FaultMessage:Invalid request method and/or path: PUT /vsocks/root}: unknown` \r\n\r\n\r\nKernel modules ->\r\n```\r\n\r\nalias char_major_10_238 vhost_net\r\nalias char_major_10_241 vhost_vsock\r\nalias devname:vhost_net vhost_net\r\nalias devname:vhost_vsock vhost_vsock\r\nalias tcm_vhost vhost_scsi\r\nalias symbol:vhost_add_used vhost\r\nalias symbol:vhost_add_used_and_signal vhost\r\nalias symbol:vhost_add_used_and_signal_n vhost\r\nalias symbol:vhost_add_used_n vhost\r\n.....\r\n\r\n```\r\nAnd \r\n```\r\n  QEMU: Checking for hardware virtualization                                 : PASS\r\n  QEMU: Checking if device /dev/kvm exists                                   : PASS\r\n  QEMU: Checking if device /dev/kvm is accessible                            : PASS\r\n  QEMU: Checking if device /dev/vhost-net exists                             : PASS\r\n  QEMU: Checking if device /dev/net/tun exists                               : PASS\r\n..... \r\n\r\n```\r\n\r\n\r\n Thank you ! \r\nBuilding firecracker with `--feature vsock`, fixed the error.   ## Reason for This PR\r\n\r\nThe [2020 Roadmap](https://github.com/firecracker-microvm/firecracker/issues/1104) welcomes contributions that adds initrd support. A previous PR was opened to add it (#670), but cannot be reused as is, because it also added support for loading a compressed kernel.\r\n\r\nHence #670 was reworked and rebased to only include initrd support.\r\nFixes #208 .\r\n\r\n## Description of Changes\r\n\r\n- Add `initrd_path` property to the `boot-source` API.\r\n- Pass `ramdisk_image` (memory offset) and `ramdisk_size` to the guest bootparams table.\r\n- Implement the `load_initrd` loader function, to load the initrd file content into the guest memory ~~at a (for the moment) fixed address~~ at then end of the available low memory (for x86_64).\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n Disclaimer: I am complete rust n00b!\r\n\r\nMissing things:\r\n- [x] aarch64 support\r\n- [x] tests (#670 had dedicated commits for tests that can be ported too). For x86_64 I am now loading the initrd at the end of the available low memory, instead of using a fixed address. Hi, x86_64 is now ready for review. I just need a new fixture added to S3 for initrd testing.\r\n\r\nDo you expect aarch64 be supported too, or can it be postponed in a later PR? I would suggest merging and postponing aarch64, so that x86_64 people can test sooner (more easily). Spent some more hours and added `aarch64` support. But I don't have any `aarch64` hardware with KVM hypervisor mode to be able to test it. Update: aarch64 is functional. \r\nAlso, almost all tests are passing, just waiting for a initrd update on S3 to align the ramdisk images with the tests. All tests are now passing apart `test_microvm_initrd_with_serial` on aarch64\r\nIt needs a kernel update on S3, since the current kernel does not support booting with initrd:\r\n```\r\n# grep initrd /proc/kallsyms\r\n#\r\n``` @andreeaflorescu, kind ping :-)\r\n\r\nLet me know if you are waiting for any action from my side to finalize this PR. I tried to replicate the failure on aarch64 for the `test_microvm_initrd_with_serial` and indeed the kernel panics with message:\r\n`\r\n[    0.204197] VFS: Cannot open root device \"(null)\" or unknown-block(0,0): error -6\r\n[    0.206833] Please append a correct \"root=\" boot option; here are the available partitions:\r\n[    0.209752] Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(0,0)\r\n[    0.212721] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 4.14.138 #1\r\n[    0.214940] Hardware name: linux,dummy-virt (DT)\r\n\r\n`\r\nAs far as my previous knowledge, this could also mean that the `initrd.img` is not correctly formatted.\r\nHow exactly were the `initrd.img`created for both x86_64 and aarch64? @dianpopa: the initrd is built using https://github.com/marcov/firecracker-initrd\r\n\r\n*If I recall correctly*, I did test the same initrd with a different aarch64 kernel image and it was working.\r\n\r\n > @dianpopa: the initrd is built using https://github.com/marcov/firecracker-initrd\r\n> \r\n> _If I recall correctly_, I did test the same initrd with a different aarch64 kernel image and it was working.\r\n\r\nThanks, I will try create an initrd for aarch64 myself and build a kernel with initrd. I will let you know the results. If I am successful I will also update the `minimal_with_initrd` folder from S3. > @marcov please solve the conflicts that github is complaining about so that I can continue reviewing the latest code changes.\r\n> \r\n> * I uploaded a new kernel to S3 for aarch64 that should pass the tests for aarch64 too\r\n\r\nThank you @dianpopa, aarch64 kernel is now OK.\r\n\r\n> * I want us to upload the kernel configs used for building kernels with initrd support in the \"resources\" folder of the codebase. I already have them, so if it is ok with you I can make a different commit on top of your commits after you solve conflicts. let me know.\r\n\r\nSure, conflicts are now solved.\r\n Also, I'd like to see this reviewed soon, rebasing on master was harder than expected because of the many changes. Thank you! > Also, I'd like to see this reviewed soon, rebasing on master was harder than expected because of the many changes. Thank you!\r\n\r\nWe will do our best to review this asap! Thanks for the quick review @dianpopa. I'll update based on your feedbacks. Pushed a new version with changes based on reviews. > Pushed a new version with changes based on reviews.\r\n\r\nCool, Ill review your latest changes while also trying to see why the aarch64 test fail. About the aarch64 failure, the reason is that in test_boottime the `Guest-boot-time` line takes a while before being printed, and the `time.sleep()` call may not wait enough. \r\nA way to avoid that is to keep reading the log with a timeout, until the line the line is found. > About the aarch64 failure, the reason is that in test_boottime the `Guest-boot-time` line takes a while before being printed, and the `time.sleep()` call may not wait enough.\r\n> A way to avoid that is to keep reading the log with a timeout, until the line the line is found.\r\n\r\nAfter a little bit of debugging, I noticed the the \"Guest-boot-time\" message is not outputted at all. Seems that this [mmap](https://github.com/marcov/firecracker-initrd/blob/master/guest/boot_done.c#L18) fails :(. @marcov , as far as I remember the tests were passing after I uploaded a new kernel to S3 but I cannot recall whether or not you did have the initrd boottime test back then. I am asking this because I am trying to figure out what changed in the meantime. The boot time performance tests were enabled just recently for aarch64, so maybe that's a reason why we did not see the failure before?\r\n\r\nAnyway, when testing the initrd kernel with a rootfs the boot-time log is generated, so there's likely something wrong in the inirtd init launcher.\r\n\r\nIn addition, I also tried to create a custom initrd by using as init with the `/bin/busybox`  found in a rootfs image. When running it, I am getting: `Can't map memory: Bad file descriptor` \ud83e\udd14  > The boot time performance tests were enabled just recently for aarch64, so maybe that's a reason why we did not see the failure before?\r\n> \r\n> Anyway, when testing the initrd kernel with a rootfs the boot-time log is generated, so there's likely something wrong in the inirtd init launcher.\r\n> \r\n> In addition, I also tried to create a custom initrd by using as init with the `/bin/busybox` found in a rootfs image. When running it, I am getting: `Can't map memory: Bad file descriptor`\r\n\r\nI am able to replicate the failure (meaning I do not receive the log message) by using the `./firecracker/build/img/aarch64/minimal_with_initrd/kernel/vmlinux.bin` as kernel path and the `./firecracker/build/img/aarch64/minimal_with_initrd/fsfiles/initrd.img` as initrd_path which is what the [failing test](https://github.com/firecracker-microvm/firecracker/pull/1246/files#diff-5996dacca5f8a1a7eed702c084674b73R101) is actually using and leaving behind. But as far as I understand, you are able to see a boot-time log when you do the same, right?\r\nI also tried using the `./firecracker/build/img/aarch64/minimal/fsfiles/boottime-rootfs.ext4` to create an initrd but the kernel complains that it cannot unpack it and I have no idea why. >  But as far as I understand, you are able to see a boot-time log when you do the same, right?\r\n\r\nSorry, no, I can also reproduce the problem locally for aarch64.\r\n\r\nBasically, the mmio write is not working as expected. \r\n\r\n> I also tried using the `./firecracker/build/img/aarch64/minimal/fsfiles/boottime-rootfs.ext4` to create an initrd but the kernel complains that it cannot unpack it and I have no idea why.\r\n\r\ninitrd should be be an ASCII cpio archive. \r\n\r\nAnother test worth doing is to create a custom rootfs with [this init](https://github.com/marcov/firecracker-initrd/blob/master/guest/boot_done.c) and see if the boot message log is generated.\r\n\r\n**Update**: just done the above test, the mmio write is working well. So this is definitely some other problem related to changes introduced in this PR \ud83d\ude22 \r\n\r\nI added a `perror` [here](https://github.com/marcov/firecracker-initrd/blob/90cd6572e13748a1d7205b672b98cd2ba1d0f233/guest/boot_done.c#L27), and it returns MAP_FAILED with `Bad file descriptor`. Wondering why... Ok, I think I found an explanation. \r\nThe mmap fails because the fd for `/dev/mem` is bad (I should have checked that on open(), my fault), and that's because the `/dev/` mount point is not yet set up when the `open()` is done.\r\n > Ok, I think I found an explanation.\r\n> The mmap fails because the fd for `/dev/mem` is bad (I should have checked that on open(), my fault), and that's because the `/dev/` mount point is not yet set up when the `open()` is done.\r\n\r\nCool! I was also suspecting that it might be something wrong with `dev/mem` especially because if you do a `ls -al /dev/` after booting the alpine image with an initrd the devices have wrong dates (some even have the classic 1 JAN 1970). Maybe our problem  might be related to that. Hi @dianpopa, I pushed a initrd fix for the issue https://github.com/marcov/firecracker-initrd/commit/d2641e3cb88c797a1ecbefee5094f1fd4b0a6360 (I can finally get the boot done log with that!)\r\nThough I am not sure if the performance test is going to stay within the maximum boot time...\r\n\r\nWhen you have some time, can you please rebuild the initrd and put it on S3?\r\n > Hi @dianpopa, I pushed a initrd fix for the issue [marcov/firecracker-initrd@d2641e3](https://github.com/marcov/firecracker-initrd/commit/d2641e3cb88c797a1ecbefee5094f1fd4b0a6360) (I can finally get the boot done log with that!)\r\n> Though I am not sure if the performance test is going to stay within the maximum boot time...\r\n> \r\n> When you have some time, can you please rebuild the initrd and put it on S3?\r\n\r\nOh, nice! Thanks for the fix, I will upload it in S3 soon enough. @marcov do you need help in addressing the outstanding review comments? Thank you for the ping @andreeaflorescu, pushed some updates now. @marcov I created a prototype on my branch on top of your commits: https://github.com/andreeaflorescu/firecracker/commit/994b23d43d2b7fd52cb8e3f9641b2c16f4a5b689.\r\n\r\nThe `initrd_load_addr` function doesn't need to live in arch. It is more of a utility function for loading the initrd image into guest memory. I moved it to the kernel crate along with `load_initrd` function. To break the dependency between the arch crate and the `kernel` crate, we can send the page size as a parameter to `load_initrd`. This is still not an ideal state because now arch depends on `kernel` which is not something that we want. This dependency can further be broke by refactoring the fdt implementation in arch, but this is out of scope of this PR.\r\n\r\nTo give you more context, it is important to have the loading of initrd in the `kernel` crate  because we are working towards consuming the `linux-loader` crate from rust-vmm. Once we make sure that loading the initrd works as expected, we should also send a PR with the code here: https://github.com/rust-vmm/linux-loader. If you don't want to also send a PR in rust-vmm, one of the Firecracker maintainers can take care of that. Loading an initrd image is quite a common feature that we would like to have in linux-loader as well. Having that functionality in the vmm crate makes it impossible to share the common code with the other VMMs written in Rust (for example with Cloud Hypervisor). Besides this, there is an ongoing effort to minimize the code in vmm. > @marcov I created a prototype on my branch on top of your commits: [andreeaflorescu@994b23d](https://github.com/andreeaflorescu/firecracker/commit/994b23d43d2b7fd52cb8e3f9641b2c16f4a5b689).\r\n> \r\n> The `initrd_load_addr` function doesn't need to live in arch. It is more of a utility function for loading the initrd image into guest memory. I moved it to the kernel crate along with `load_initrd` function. To break the dependency between the arch crate and the `kernel` crate, we can send the page size as a parameter to `load_initrd`. This is still not an ideal state because now arch depends on `kernel` which is not something that we want. This dependency can further be broke by refactoring the fdt implementation in arch, but this is out of scope of this PR.\r\n> \r\n> To give you more context, it is important to have the loading of initrd in the `kernel` crate because we are working towards consuming the `linux-loader` crate from rust-vmm. Once we make sure that loading the initrd works as expected, we should also send a PR with the code here: https://github.com/rust-vmm/linux-loader. If you don't want to also send a PR in rust-vmm, one of the Firecracker maintainers can take care of that. Loading an initrd image is quite a common feature that we would like to have in linux-loader as well. Having that functionality in the vmm crate makes it impossible to share the common code with the other VMMs written in Rust (for example with Cloud Hypervisor). Besides this, there is an ongoing effort to minimize the code in vmm.\r\n\r\nThe `initrd_load_addr` **does need** to live in arch -> or at least this is how we achieve consistency with the way the kernel deals with initrd. Please take a look at how things work for x86_64 (starting here https://elixir.free-electrons.com/linux/v4.14.158/source/arch/x86/kernel/setup.c#L304) -> the first interaction of the kernel with the initrd config data is in the [setup_arch](https://elixir.free-electrons.com/linux/v4.14.158/source/arch/x86/kernel/setup.c#L850)  function which contains the [architecture-specific boot-time initializations](https://elixir.free-electrons.com/linux/v4.14.158/source/arch/x86/kernel/setup.c#L845) which is kind of the equivalent of our `configure_system` function. You can see there that the two essential things that the kernel needs are [the address](https://elixir.free-electrons.com/linux/v4.14.158/source/arch/x86/kernel/setup.c#L370) where the initrd is loaded and the [size](https://elixir.free-electrons.com/linux/v4.14.158/source/arch/x86/kernel/setup.c#L371) of it. \r\n* For the first one (i.e the address) you need to be aware of the memory layout for a specific platform (which we are defining in arch). The one function that does the job for that is `initrd_load_address` from arch. If we were to move this in the kernel crate (as it is the case with your model):\r\n```\r\n    let lowmem_size: usize = guest_mem.region_size(0).map_err(|_| Error::InitrdAddress)?;\r\n```\r\nwe would make the kernel crate dependent on memory layout representation for a specific platform. Does not that break the separation of concerns we strive for?\r\n* As far as the size, a fseek is sufficient. This functionality is achieved in the current implementation by the `load_initrd` function from the vmm.\r\nAfter address and size is obtained, the image is written to memory. If we want to avoid passing around the guest memory (which is what we should be striving for in our decoupling goals), this should also stay in vmm.\r\n Taking `load_kernel` as example, I can keep part of `load_initrd` in `vmm` to retrieve the initrd address and size, and have a `load_initrd` in `kernel` to write data into the guest memory. The `kernel` function would only be a one liner though.\r\n\r\n @marcov that was my initial thought as well and noticed the same problem as you. Let's keep it as is for now and we will find a better place for it in a future iteration.\r\n\r\nI am still a bit concerned regarding the rather large boot time on aarch64. I was thinking about doing some comparison with  Qemu boot times (if they have something similar we can compare against). I can check that tomorrow. @andreeaflorescu using a non-gzipped initrd will shave off around 100ms, but even doing that we are still far aways from the max time of 160ms. \r\nChecking the boot log timestamp, most of the time is spent by the kernel unpacking the initramfs, and that time depends on the size of the initrd file. This is with a 25MB initrd:\r\n```\r\n[    0.110152] UDP-Lite hash table entries: 256 (order: 1, 8192 bytes)\r\n[    0.112462] NET: Registered protocol family 1\r\n[    0.114731] Unpacking initramfs...\r\n[    0.353062] Freeing initrd memory: 24712K\r\n``` > @andreeaflorescu using a non-gzipped initrd will shave off around 100ms, but even doing that we are still far aways from the max time of 160ms.\r\n> Checking the boot log timestamp, most of the time is spent by the kernel unpacking the initramfs, and that time depends on the size of the initrd file. This is with a 25MB initrd:\r\n> \r\n> ```\r\n> [    0.110152] UDP-Lite hash table entries: 256 (order: 1, 8192 bytes)\r\n> [    0.112462] NET: Registered protocol family 1\r\n> [    0.114731] Unpacking initramfs...\r\n> [    0.353062] Freeing initrd memory: 24712K\r\n> ```\r\n\r\nOn the a1.metal aarch64 machine (9 MB initrd), things look like this:\r\n```\r\n[    0.114070] Unpacking initramfs...\r\n[    0.468239] Freeing initrd memory: 9420K\r\n[    0.470117] audit: initializing netlink subsys (disabled)\r\n[    0.472665] Initialise system trusted keyrings\r\n```\r\n\r\n @dianpopa  try to `gzip -d` the `initrd.img`, you should gain around 100ms. If it is expected for the boot time to be so large with the provided initrd image, we can merge the PR as is. I didn't really have time to investigate this, and I don't want to block the PR. Feel free to update the time for aarch64 to a value that you're confident with. > @dianpopa try to `gzip -d` the `initrd.img`, you should gain around 100ms.\r\n\r\nI tried with the initrd.img that the CI leaves behind. @marcov, are you implying that it would be a good idea to reupload in S3 the decompressed version? @dianpopa: right! An `ASCII cpio archive` should be faster.\r\n\r\nI'm going to do a final squash and set a reasonable boot time for aarch64, checking for `platform.machine()` Happy to see this merged! \r\nThanks for the help @dianpopa @andreeaflorescu , and happy holidays :-) Thanks for the effort and responsiveness @marcov ! Happy holidays!  ## Reason for This PR\r\n\r\nImplement Debug & Display for Errors that can generate panics #856\r\n\r\n## Description of Changes\r\n\r\nI've added mostly Display traits to describe friendlier user-facing errors from api_server, which inherits errors from vmm, devices, arch etc.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n Close this PR since it needs to be divided in two to be easy reviewed.  Also rebase on top of master since you're changing files anyway (save some CI time).  `HttpServer` is a struct that leverages `HttpConnection` for exchanging data with a client and `epoll` to be able to run on the same thread as the rest of the code.\r\n\r\nExample usage\r\n```\r\nuse micro_http::{HttpServer, Response, StatusCode};\r\n\r\nlet mut server = HttpServer::new(path_to_socket).unwrap();\r\nserver.start_server().unwrap();\r\nloop {\r\n    for request in server.incoming().unwrap() {\r\n        let response = request.process(|request| {\r\n            // Your code here. This should return a http `Response`.\r\n        });\r\n        server.respond(response);\r\n    }\r\n}\r\n ```\r\n\r\nFixes: #1193 \r\n\r\nSigned-off-by: George Pisaltu <gpl@amazon.com>\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] This PR is linked to issue #1193. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] No docs need to be updated as part of this PR.\r\n- [x] Code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] No API changes are included in this PR.\r\n- [x] The changes in this PR have no user impact.\r\n  The HttpConnection class contains Request Parsing logic. It would be better to decouple this logic from HttpConnection and move it in a separate class `RequestParser`.\r\n\r\nSee [this](https://github.com/firecracker-microvm/firecracker/pull/1211#issuecomment-524203275) comment. Probably it's not worth doing this. I will close this issue.  ## Reason for This PR\r\n\r\nFixes #612 \r\n\r\n## Description of Changes\r\n\r\n1. parse UDP datagrams\r\n2. replace pnet::packet with dumbo's sutff\r\n3. move MacAddr from `net_util` to dumbo\r\n4. use UdpSocket in `test_write`, `test_read` in `tap.rs` ARP reply construction was needed to make this work\r\n5. Use host-IPs instead of hardcoded ones since the packets will be routed\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [ ] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n Hi @shakram02, is this PR complete? Hey Adrian, it's almost complete, I just have one small discussion about the correct  IP to assigned to the TAP, but it passes all the tests already except the percentage of code coverage, the required  percentage is 85% and now the code is at 84.9%. Plus, I'm refactoring the code in the tests now @acatangiu , so this is the almost finalized code, I'll tell you if I do any significant changes (in case you want to review the code) @shakram02 would you mind cleaning up (reorder/squash/etc) your commits a bit before review?\r\nI see that some commits are fixes to other commits and so on. @acatangiu done Hi everyone. I'd love to have a look at this PR as well, please give me a couple more days :-s okay, done  ## Reason for This PR\r\n\r\nThis PR is meant to address #1196 for supporting GICv2 devices on aarch64 architecture.\r\n\r\n## Description of Changes\r\n\r\nThis makes the GIC-related code more flexible and implements a GICv2 device. It introduces a `GICDevice` Trait which needs to be implement by GIC device implementations. We implement the Trait for GICv3 and GICv2 devices. When creating the GIC device for the microVM we initially try to create a v3 device and if that fails, we fall back to creating a v2 device.\r\n\r\nI have tried this on a Hikey970 board and it works, so far. I 'm trying this out on a RPi4 as well to double check everything is working. In any case, I'm not greatly familiar with the GIC architecture (I did some research for this PR), so any comments on what I 've done so far is more that welcome.\r\n\r\n## License Acceptance\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under\r\nthe terms of the Apache 2.0 license.\r\n\r\n## PR Checklist\r\n\r\n`[Author TODO: Meet these criteria. Where there are two options, keep one.]`  \r\n`[Reviewer TODO: Verify that these criteria are met. Request changes if not]`\r\n\r\n- [x] All commits in this PR are signed (`git commit -s`).\r\n- [x] Either this PR is linked to an issue, or, the reason for this PR is\r\n      clearly provided. \r\n- [x] The description of changes is clear and encompassing.\r\n- [x] Either no docs need to be updated as part of this PR, or, the required\r\n      doc changes are included in this PR. Docs in scope are all `*.md` files\r\n      located either in the repository root, or in the `docs/` directory.\r\n- [x] Either no code has been touched, or, code-level documentation for touched\r\n      code is included in this PR.\r\n- [x] Either no API changes are included in this PR, or, the API changes are\r\n      reflected in `firecracker/swagger.yaml`.\r\n- [x] Either the changes in this PR have no user impact, or, the changes in\r\n      this PR have user impact and have been added to the `CHANGELOG.md` file.\r\n Ok, I did a re-write of the PR which tries to do what was discussed in the issue comments, i.e. the GIC-related code tries to setup a GIC-v3 device and if it doesn't succeed it fails back to create a GIC-v2 device.\r\n\r\nMoreover, the GIC code returns the version of the GIC chip that was created and that info is used in order to create the correct FDT later on.\r\n\r\nMoreover, I tried to update the relevant tests to take these changes into account.\r\n\r\nDisclaimer: my rust knowledge is very limited, so comments are more than welcome :) Thanks @bchalios! Could we get a review of this PR from any of the maintainers please?\r\ncc @dianpopa @andreeaflorescu \r\nThanks in advance :clap:! > I didn't have time to take a detailed look on this, and I don't know this area of our code very well, but at first sight I would prefer a more extensible and object oriented design.\r\n> \r\n> I think it would make sense to have a class for GicV2 that contains all the gicv2 specific logic and a different class for GicV3 that contains all the gicv3 specific logic. Also they can implement a common trait. This way it would be easier to add support for gicv4 in the future for example. Also the code would probably be more readable.\r\n\r\nThanks for your review @serban300!\r\n\r\nI 've tried to refactor the PR to implement the feature in the way you suggested. Please, take a look and let me know if the changes make sense to you.\r\n\r\nEssentially, I am using this PR as a way to, as well, practice Rust (I 've never written anything before in Rust), so please let me know if something strikes badly to you. > > I didn't have time to take a detailed look on this, and I don't know this area of our code very well, but at first sight I would prefer a more extensible and object oriented design.\r\n> > I think it would make sense to have a class for GicV2 that contains all the gicv2 specific logic and a different class for GicV3 that contains all the gicv3 specific logic. Also they can implement a common trait. This way it would be easier to add support for gicv4 in the future for example. Also the code would probably be more readable.\r\n> \r\n> Thanks for your review @serban300!\r\n> \r\n> I 've tried to refactor the PR to implement the feature in the way you suggested. Please, take a look and let me know if the changes make sense to you.\r\n> \r\n> Essentially, I am using this PR as a way to, as well, practice Rust (I 've never written anything before in Rust), so please let me know if something strikes badly to you.\r\n\r\nThanks for addressing the comments. I will try to take a look on the code as soon as possible. Worst case scenario I will do this at the beginning of the next week. I am super busy right now. @acatangiu I pushed a commit that tries to apply the requested changes. The new functionality is implemented through static functions, as I could not figure out a clean way to incorporate it in the common Trait. If you see any alternative, let me know!\n\nCheers,\nBabis Ok, I think that I've addressed the requested changes. Please, take a look and let me know if the changes make sense Ok, could you take a look now? I don't think we can avoid the problem with multiple arguments per version, since the external code creating the device cannot know what device is supported. Ok, done with the last comments, as well > Everything looks ok. It's as good as approved on my side, but please sign your commits using `git commit --ammend -s`. Also I think it would make sense to reduce the number of commits. You can fixup everything in one commit.\r\n\r\nHmmm, I thought the commits were signed already. GitHub marks them as verified. Am I missing something? > > Everything looks ok. It's as good as approved on my side, but please sign your commits using `git commit --ammend -s`. Also I think it would make sense to reduce the number of commits. You can fixup everything in one commit.\r\n> \r\n> Hmmm, I thought the commits were signed already. GitHub marks them as verified. Am I missing something?\r\n\r\nI am not sure why github marks them as verified, maybe that's something else. But there should be a sign-off message at the end of each commit. Something like:\r\n```\r\nSigned-off-by: Serban Iorga <seriorga@amazon.com>\r\n```\r\nand `git commit --ammend -s` will add it automatically. > > > Everything looks ok. It's as good as approved on my side, but please sign your commits using `git commit --ammend -s`. Also I think it would make sense to reduce the number of commits. You can fixup everything in one commit.\r\n> > \r\n> > \r\n> > Hmmm, I thought the commits were signed already. GitHub marks them as verified. Am I missing something?\r\n> \r\n> I am not sure why github marks them as verified, maybe that's something else. But there should be a sign-off message at the end of each commit. Something like:\r\n> \r\n> ```\r\n> Signed-off-by: Serban Iorga <seriorga@amazon.com>\r\n> ```\r\n> \r\n> and `git commit --ammend -s` will add it automatically.\r\n\r\nOk, I 'm generally using `git commit -S`, which actually signs the commit with GPG but doesn't add the \"Signed-off-by\" bit in the commit message.  Thanks @bchalios @serban300 @acatangiu :tada:!  Hello!\r\n\r\nCurrently the MMDS `get` operation is defined as follows:\r\n\r\n```yaml\r\n  /mmds:\r\n    #  ...snip...\r\n    get:\r\n      summary: Get the MMDS data store.\r\n      responses:\r\n        200:\r\n          description: The MMDS data store JSON.\r\n          schema:\r\n            type: object\r\n        400:\r\n          description: Cannot get the MMDS data store due to bad input.\r\n          schema:\r\n            $ref: \"#/definitions/Error\"\r\n        default:\r\n          description: Internal server error\r\n          schema:\r\n            $ref: \"#/definitions/Error\"\r\n```\r\n\r\nThe `schema` is defined as `object`, which is parallel to the schema of the `put` and `patch` operations as well.  In the [Firecracker SDK for Go](https://github.com/firecracker-microvm/firecracker-go-sdk), we've received a [pull request](https://github.com/firecracker-microvm/firecracker-go-sdk/pull/114) to add a `GetMetadata` method to retrieve the metadata from the MMDS.  However, the definition of the schema as `object` (and the way that [go-openapi](https://github.com/go-openapi) generates a client) makes that difficult to work with.\r\n\r\nWhen `object` is defined, our Swagger client generator gives us an `interface{}`, which is Go's equivalent of a void pointer; we then need figure out some way of converting that to a useful value.  One mechanism is to implement dynamic type discovery, which is a lot of boilerplate and error-prone code.  Another is to send this back through another serialization-deserialization round-trip to use Go's built-in JSON decoding, but that will be inefficient especially for large objects.  Or there are other approaches that involve digging beneath the Swagger client library's abstractions.\r\n\r\nWould you be willing to change this to a `string` (and `format: binary`) instead of `object`?  If this were defined as a `string`, we would get the serialized data back and can deserialize it ourselves instead of needing these workarounds.\r\n\r\nIf this isn't a change you'd be willing to make, we do have some options:\r\n\r\n1. Dynamic type discovery\r\n2. Reserialize-deserialize round-trip\r\n3. Patch the swagger spec ourselves\r\n4. Implement a separate `Client` with a separate `runtime.ClientResponseReader` just for this operation\r\n\r\nBut these approaches are all more complicated, and (though I haven't looked) I suspect that other Swagger client generators in other programming languages will have similar challenges with a returned `object`.\r\n\r\nThanks,\r\nSam @samuelkarp We are using type object on all requests, not just MMDS. The code that parses requests from client into json is generic and the same for all requests. Changing only one of the request would introduce messy code in the api_server (which we also work on changing any way). \r\n\r\nConsidering this, I would like us to avoid changing the request type at least until we replace the api_server with our custom implementation. I do find it a bit weird that it's so hard to get a JSON from type object because reading through the Swagger documentation this is the only way I can find to represent a [JSON object](https://swagger.io/docs/specification/data-models/dictionaries/). Isn't this a miss of the Go SDK? > We are using type object on all requests, not just MMDS.\r\n\r\nAs far as I can tell, `/mmds` is the only API that directly uses `type: object`.  All other usage of `type: object` is in defining the structure of a specific object in the `definitions` section.\r\n\r\n> I do find it a bit weird that it's so hard to get a JSON from type object because reading through the Swagger documentation this is the only way I can find to represent a JSON object.\r\n\r\nDoes MMDS depend on it specifically being JSON?  My understanding is that MMDS is accepting and serving arbitrary data.\r\n\r\n> Isn't this a miss of the Go SDK?\r\n\r\nIt's specifically an implementation detail of the [go-openapi](https://github.com/go-openapi)/[go-swagger](https://github.com/go-swagger/go-swagger) client generator.  The Firecracker Go SDK is an additional library on top of the generated client.\r\n\r\nHowever, I suspect that other Swagger client generators (in other languages) are going to have similar issues. > I do find it a bit weird that it's so hard to get a JSON from type object because reading through the Swagger documentation this is the only way I can find to represent a JSON object.\r\n\r\nFor the other `type: object` types that are specified in the spec, the client generator is able to generate real types and deserialize the JSON into objects of those types.  However, when we look at the MMDS, the lack of defined fields for the `type: object` return value means that the client generator can't generate types and instead we get an `interface{}`, which is not usable without additional work.\r\n\r\nYes, we can handle this in the Firecracker Go SDK through one of the workarounds I listed above.  But we suspect that other clients in other languages will need similar workarounds, and we'd prefer to not use them.  If the MMDS is really holding arbitrary data/arbitrary bytes, can it just return those bytes and let the client deal with it?  The function name ```allocate_virtio_tokens``` is misleading, since this function also has as a side effects. The name implies that it only allocates tokens, whereas it also creates a device handler. We should either rename this function, or refactor it out somehow. Issue won't apply anymore once #1404 is done.  https://buildkite.com/firecracker/firecracker-ci-aarch64/builds/405#bd3e4c7f-a0f5-421a-8007-47af1faf05b8\r\n```\r\nwarning: function is never used: `default_log_options`\r\n  --> vmm/src/vmm_config/logger.rs:53:1\r\n   |\r\n53 | fn default_log_options() -> Value {\r\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n   |\r\n   = note: #[warn(dead_code)] on by default\r\n```\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.\r\n @serban300 do you see the build fail relating to my update ion warning?\r\n\r\nhttp://jenkins.katacontainers.io/job/kata-containers-firecracker-PR/259/console Hi @gliptak,\r\n\r\nThese warning errors are related to support for gathering dirty pages from kvm which is missing on aarch64. We are planning on starting work on adding that in the near future. See #866. \r\nSo, my opinion is that it isn t worth investing effort into making a temporary fix like this one. What do you think? > @serban300 do you see the build fail relating to my update ion warning?\r\n> \r\n> http://jenkins.katacontainers.io/job/kata-containers-firecracker-PR/259/console\r\n\r\nYou do not need to worry about the kata-containers-CI failing. It is not related to this particular PR. I already let them know about this issue and they are handling it. @dianpopa the reason I was working these warnings, because after cleaning them up, you can configure ```rustc``` failing on these as errors, offering tighter validation. If this is of limited/no value, I will close this PR > @dianpopa the reason I was working these warnings, because after cleaning them up, you can configure `rustc` failing on these as errors, offering tighter validation. If this is of limited/no value, I will close this PR\r\n\r\nAre you referring to the **-D** flag that turns errors into warnings? I agree with this approach, moreover we use that flag in the integration test doing clippy validation and we are planning to add clippy enforcement for aarch64 too. See #1007. What I am saying is that we would prefer to do them sequentially (#866 and then #1007) so that we do not add and then remove the same code.\r\n  The build instruction/requirement in the README is somewhat vague and maybe too broad.\r\n\r\n_\r\n\r\n> You can build Firecracker on any system that has Docker running\r\n\r\n_\r\n\r\nLooks like one needs at least Bash or a UNIX/Linux system because the build script uses Bash. I was able to build Firecracker using Ubuntu as host. But with Windows 10 Pro (and Docker installed) I don't know how to do it because the build script requires Bash. Maybe we can make it build from Windows 10 with Docker if we create a build script for it. I tried also using GitBash for Windows but got an error message there too.  Indeed, `bash` is a requirement for Windows too, but it's not enough. There's an error in the container invocation [here](https://github.com/firecracker-microvm/firecracker/blob/9945928e284ff760968ccc456de8bdd029216fc1/tools/devtool#L358):\r\n\r\nhttps://github.com/firecracker-microvm/firecracker/blob/9945928e284ff760968ccc456de8bdd029216fc1/tools/devtool#L358\r\n\r\n`/dev` can't be bind-mounted as-is on a Windows host because it's not there by default. I don't know at the moment if creating a placeholder would help; more deep dive is required to find out what the build container needs from `/dev` and if it can be made to work with replacements on Windows, or if we should update the build instructions, restricting them to unix systems.  `features` and `ack_features` functions from the `VirtioDevice` trait have the same implementation in net, block and (soon enough) vsock device. Provide an in-trait implementation instead of duplicating implementation for each device.  `virtio-balloon` can be useful in the snapshotting scenario #1184 to cut down on snapshot size by reclaiming unused guest memory before snapshotting.  This pull request adds support for a memory balloon device.\r\n\r\nDescription of changes: Added a memory balloon device to `devices/src/virtio`; also, added support for this device in the `api_server`. To do this, new metrics were needed, and also a way to remove memory in the memory model.\r\n\r\nTODO: \r\n- [ ] ~~add support for GET's on the balloon~~\r\n- [x] add integration tests.\r\n\r\nFixes: #1203\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.\r\n One observation I raised verbally and will likely forget about unless I write it down - if it's possible to add multiple `virtio-balloon` devices, then the RESTful resource to operate in is not `/balloon`, but rather `/balloon/${balloon_id}`. So if this is a feasible use case, the API needs a bit of refactoring.  Issue #, if available:\r\n\r\nDescription of changes: use this patch, we will put all the virtio device into a base class.\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.\r\n Hi @muya-zj ,\r\n\r\nPR #1106 removes support for vhost-based vsock devices and brings changes to the code that you are modifying here. I would suggest to take a look at the code in question (I guess https://github.com/firecracker-microvm/firecracker/pull/1106/files#diff-12ea6371c86a2692e710de7037e3b202R118) and in case your changes still hold, work with @dhrgit to integrate them there.\r\n\r\nThanks,\r\nDiana\r\n  We need to use the changes in `micro_http` to replace hyper and get rid of its dependencies.  Issue #, if available: #650 \r\n\r\n**Description of changes**\r\n\r\nThis PR adds a vsock connection state machine, that will later be used by the Unix Domain Sockets backend. This machine, residing under `devices::virtio::vsock::csm`, implements the bulk of the vsock communication protocol, and is designed to work, not necessarily with a backing Unix socket, but with any implementor of `Read + Write + AsRawFd`.\r\n\r\n**Note**: this PR is built on top of #1106, so not all commits in this branch are in its scope.\r\n\r\n--------\r\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.\r\n  A pain point with global state is that we cannot run unit tests in parallel (aka we run unit tests with RUST_TEST_THREADS=1) which also adds problems like we are out of memory because the state is not clean (also check #1138).\r\n\r\nWe should discuss if we should refactor Firecracker such that we don't have global state (METRICS, LOGGER, others?). This would also help in creating mock objects in tests.  Switch to using [vm-memory](https://github.com/rust-vmm/vm-memory) instead of the `memory_model` Firecracker crate.\r\n\r\nThe next steps are merging [this PR](https://github.com/rust-vmm/vm-memory/pull/29) and  going through the code one more time. After any potential changes are handled, we'll start experimenting with the actual integration. P.S. let's first publish a v0.1.0 of vm-memory on crates.io. I would rather not consume crates from GitHub. To publish it on crates.io there might be some other things that need to be addressed. Can you also open an issue on vm-memory with \"publish to crates.io\" so we can track the progress there? Submitted https://github.com/rust-vmm/vm-memory/issues/31. Copied my comment from the other issue for visibility:\r\n\r\nThis task is currently blocked by vm-memory not being published on crates.io.\r\nCheck the repository here: https://github.com/rust-vmm/vm-memory\r\n\r\n@bonzini did the switch in his [fork](https://github.com/bonzini/firecracker/commit/5e84f75d599995462fcc1765ed511846f36fedc0), but it's not ready for merging in Firecracker as per his [comment](https://github.com/rust-vmm/vm-memory/pull/9#issuecomment-480050928).  CC: @firecracker-microvm/compute-capsule \r\n\r\nHere is my strategy for adopting the rust-vmm/vm-memory crate:\r\n\r\nIn the first phase we will work in parallel on the following 2 directions:\r\n\r\n1. Examining the rust-vmm/vm-memory crate. Here we have to check the following:\r\n- the overall architecture is ok\r\n- the crate is safe to use\r\n- there are no methods that can generate undefined behavior\r\n- all the unsafe blocks are absolutely necessary\r\n- all the unsafe methods and traits are marked as unsafe\r\n\r\nWe will submit PRs to rust-vmm/vm-memory in order to fix problems as we discover them.\r\n\r\nOwners: @alexandruag @serban300 \r\n\r\n2. Aligning firecracker/memory_model namings with rust-vmm/vm-memory without changing the functionality.\r\n\r\n- We will change the GuestAddress inner value type from usize to u64.\r\n- We will perform roughly the following steps for each of the memory model components (GuestAddress, DataInit/BytedValue, GuestMemory):\r\n  - Check vm-memory naming and functionality in detail. Submit PR proposing changes if necessary.\r\n  - Align firecracker/memory_model naming to rust-vmm/vm-memory naming.\r\n  - Import the rust-vmm/vm-memory traits where applicable.\r\n  - Add unit tests and documentation where necessary.\r\n  - Submit a PR to rust-vmm/vm-memory with all the added unit tests and documentation.\r\n\r\nIt's true that direction 1. might affect the rust-vmm/vm-memory naming, but I don't expect it to have a significant impact here.\r\n\r\nOwners: @serban300 \r\n\r\nIn the second phase we will have to do the following:\r\n- test firecracker with vm-memory on a local branch. Fix any problem that might occur.\r\n- contribute with unit tests and documentation to rust-vmm/vm-memory where still needed\r\n- work with the rust-vmm/vm-memory gatekeepers in order to publish the rust-vmm/vm-memory to crates.io\r\n- make the switch to rust-vmm/vm-memory\r\n\r\nOwners: @serban300  Work breakdown:\r\n\r\n- [x] [Examine the rust-vmm/vm-memory crate](https://github.com/firecracker-microvm/firecracker/issues/1399)\r\n\r\n- [x] [[GuestAddress] use u64 instead of usize as inner type](https://github.com/firecracker-microvm/firecracker/issues/1397)\r\n- [x] [[memory_model] rename DataInit trait to ByteValued ](https://github.com/firecracker-microvm/firecracker/issues/1396)\r\n- [x] [[GuestMemory] use rust-vmm/vm-memory method names](https://github.com/firecracker-microvm/firecracker/issues/1398)\r\n\r\n- [x] [make final adjustments for switching to rust-vmm/vm-memory](https://github.com/firecracker-microvm/firecracker/issues/1400)\r\n- [x] [contribute with unit tests and documentation to rust-vmm/vm-memory where still needed](https://github.com/firecracker-microvm/firecracker/issues/1401)\r\n- [x] [publish the rust-vmm/vm-memory to crates.io](https://github.com/firecracker-microvm/firecracker/issues/1402)  It looks like `KVM_CAP_MANUAL_DIRTY_LOG_PROTECT` was introduced in the Linux Kernel version 5.0. In Firecracker we currently use `KVM_GET_DIRTY_LOG` which has two problems as described in the [patch](https://lkml.org/lkml/2018/11/28/738) that introduces manual dirty log:\r\n- it can report false positives\r\n- it has a performance impact\r\n\r\nFor kernel versions > 5.0 we should use `KVM_CAP_MANUAL_DIRTY_LOG_PROTECT` instead. From my understanding, `KVM_GET_DIRTY_LOG` will no longer reset the dirty bitmap with this cap enabled, but we'd need to manually call the newly introduced `KVM_CLEAR_DIRTY_LOG`. I don't understand the benefit this would bring...? We'd need a new ioctl to solve a problem I'm not sure we have:\r\n```\r\nSecond, in some cases a large amount of time can pass between a call to\r\nKVM_GET_DIRTY_LOG and userspace actually using the data in the page.\r\n```\r\nThis doesn't affect Firecracker, we only retrieve the dirty log to count the dirtied pages and don't care about the contents.\r\n\r\n*(Also, we'd need to check how a Firecracker built on kernel 5.0+ handles capabilities not present in kernels <5.0 at runtime - I expect the iotctl will fail, should check it out).* @aghecenco as you pointed out we will need to do a manual reset. From my understanding the problem we do have is the false positives (aka the report of the dirty bits is not necessarily accurate). The scenario in which this happens is detailed in the patch as well:\r\n```\r\n  1. KVM_GET_DIRTY_LOG returns a set of dirty pages and write protects\r\n     them.\r\n  2. The guest modifies the pages, causing them to be marked ditry.\r\n  3. Userspace actually copies the pages.\r\n  4. KVM_GET_DIRTY_LOG returns those pages as dirty again, even though\r\n     they were not written to since (3).\r\n```\r\n\r\nThere are also reports that kvm_get_dirty_log has a significant performance impact, so we should at least check if this new approach is more efficient. I couldn't find numbers for kvm guest with vs without dirty log enabled and probably we need to have our own numbers before we decide if this is an optimization we want to have. There are some numbers for dirty log with write protection vs with PML: https://www.spinics.net/lists/kvm/msg112904.html and https://os.itec.kit.edu/downloads/ba_2016_sch%c3%b6tterl-glausch_PML_for_Lightweight_Continuous_Checkpointing.pdf\r\n\r\nA bit more context: I started looking into this because we actually used `KVM_GET_DIRTY_LOG` as we didn't find a better mechanism to measure the working set of a VM as per this PR description: https://github.com/firecracker-microvm/firecracker/pull/541.\r\n\r\nFor these reasons I think this is something worth investigating. After the investigation we can decide if we want to switch to it or not. Firecracker doesn't adhere to that scenario because it doesn't do `3.`. The pages aren't touched by userspace (clarification for posterity, in the patch description, `userspace` refers to *host* userspace, while the guest is referred to as `guest`). So false positives because of userspace tampering don't happen.\r\n\r\nI agree on the second point, we should compare performance numbers for \"vanilla\" `KVM_GET_DIRTY_LOG` vs `KVM_CAP_MANUAL_DIRTY_LOG_PROTECT + KVM_GET_DIRTY_LOG + KVM_CLEAR_DIRTY_LOG` and pick the winner. I'd say it's low priority because the metric isn't used all that much afaik.  The build takes several minutes and there is no need to check both the release and the debug builds. The debug build can be removed for all platforms.\r\n\r\n- update tests/host_tools/cargo_build to run cargo build with --release by default.\r\n- remove `BUILD_TYPES` from tests/integration_tests/build/\r\n- remove `build_type` from `test_build` parameters\r\n\r\nThere might be other updates needed as well. This needs to be better scoped. Hi, Apologizes for the mistake of a pull request I am trying to learn how open source contributions work! \r\n\r\nI have completed the required work for this issue over on my fork however do not know how to run the integration tests to ensure that it works as expected. When I made the pull request I know it ran some tests. However I am wondering how I can do it without making the pull request!\r\n\r\nThank you! @McRaeAlex you should be able to run the build tests locally on any Linux machine using the container. For functional tests you will need a machine with `/dev/kvm`. To run the build test you need a machine with Docker and then you can run the following command:\r\n```bash\r\ncd tests\r\n../tools/devtool test -- integration_tests/build/test_build.py \r\n```  Currently identified the following:\r\n- [x] #1259 \r\n- [x] #1125 \r\n- [x] #1123 \r\n- [x] #1122 \r\n- [ ] #884 \r\n- [x] #612  #1151 closes #1122 \r\n#1174 closes #1123   The `tempfile` crate adds 17 dependencies and it is only used in tests. Instead of using `tempfile` we can create a tiny helper that handles creating files and deleting them when the object gets out of scope.\r\n\r\nFunctionality needed by Firecracker:\r\n- create directories\r\n- create files I'd like to take on this issue unless anyone else isn't working on it.\r\n\r\nMight take me some time though as I'm still quite a beginner on Rust but I've looked at how `tempfile` itself works and how it's used in Firecracker and I think I understand what needs doing. Hey @forbesmyester you can take the issue.\r\n\r\nWhen creating a `tempfile` replacement please keep in mind that we don't want to use any other external dependencies. You will need to get a random file/directory name using other methods. There is already a mechanism implemented in Firecracker for getting random numbers without using the `rand` crate. @alexandruag has more details on this one. Thanks\r\n\r\nSure I get the whole point of this is to remove dependencies :-)\r\n\r\nThe plan is to replicate the methods used in `tempfile` for the functions firecracker is using as it would seem Firecracker is happy with the functionality, but do sensible substitutions like the `rand` issue you mention ( which I think is visible in 7fba4f0b3c2bee9dd894559c522a2b33c5f5111f ). @forbesmyester awesome research! Let us know if you need help with anything. @forbesmyester are you still working on this issue?\r\n\r\nWe will use rust-vmm components after they're published to crates.io. In the [vmm-sys-utils](https://github.com/rust-vmm/vmm-sys-util) crate there is already an implementation for [tempdir](https://github.com/rust-vmm/vmm-sys-util/blob/master/src/tempdir.rs) and I think it's better to add the missing functionality there as well as more projects can benefit from this. Hi @andreeaflorescu \r\n\r\nYes I am. I think I'm practically done but I need to:\r\n\r\n * sort out my commits (squash etc)\r\n * I have questions about how much of the documentation from tempfile to bring through.\r\n * how much of the API which is not currently used to bring over too.\r\n * I need to look at the `.with_err_path(|| path.clone())` and figure out if that's required and how to bring it over and test if I do.\r\n * Integrate it, should be easy as I intend to mirror the API.\r\n\r\nMy commits are currently a mess ( I'll need to squash etc) and there's the above issues but I think what I've got is actually pretty good.\r\n\r\nCurrently code located in https://github.com/forbesmyester/firecracker/blob/master/fc_util/src/fs.rs . I've not started any integration yet so if we want to move it now's a good time. I'll say to submit a PR directly in vmm-sys-utils.\r\n\r\nCC: @firecracker-microvm/compute-capsule anyone against this? Hi All,\r\n\r\nLooking at vmm_sys_util it seems they already have a [tempdir](https://github.com/rust-vmm/vmm-sys-util/blob/master/src/tempdir.rs) and it uses the libc function `mkdtemp`, which I didn't know about, but probably should have.\r\n\r\nAs to our usage of tempfile.\r\n\r\nWe're using [`tempdir_in`](https://github.com/firecracker-microvm/firecracker/blob/bef292499e2ad15ffd3229f7369564605a336b2c/jailer/src/cgroup.rs#L243) once, which we'd probably want to port to afforementioned `vmm-sys-util/tempdir.rs`... They're remarkably similar, though `tempdir` supports more OS's they resolve to practically the same thing on Linux.\r\n\r\nIn `tempfile` any creation of a temporary directory just loops back around to `tempdir_in` using `&env::temp_dir()` as the location and ends up creating a `TempDir`. All the directory functions in `tempfile` and `vmm_sys_util` clean up on drop, as apposed to having the OS do it, so there's no difference there either.\r\n\r\nTherefore any usage for creating temporary directories already seems to be covered by `vmm_sys_util`.\r\n\r\nLooking at the file front. `tempfile` has two ways.\r\n\r\n 1) One is the struct `NamedTempFile` which will create a file and returns a struct . Like `TempDir` it will clean up on the drop.\r\n 2) The other is `create_unlinked` which creates a file which is immediately deleted. It returns a `File` but to this deleted file (which is fine).\r\n\r\nI think we ought to propose a patch to vmm_sys_util which uses the [libc function mkstemp](http://man7.org/linux/man-pages/man3/mkstemp.3.html) and is the mirror of their `TempDir`. This covers of the first construct.\r\n\r\nFor the second it would seem we should just wrap the first? But do you think we should do the wrapping here or there?\r\n\r\nWhat are your thoughts? @forbesmyester as far as I remember we only needed a NamedTempFile because there was no way to get the path of a TempFile which was needed for some tests. If we can have a way to get the path of the file, I think we can leave with only one type of temporary file.\r\n\r\nTempfile and tempdir are used in tests in other rust-vmm components so I think we should add this functionality to rust-vmm so we can remove the dependency on tempfile. See this issue: https://github.com/rust-vmm/vm-memory/issues/23\r\n\r\nI wouldn't stress too much on creating an API for tempfile and tempdir that matches exactly the ones that we are using from the `tempfile` crate. I think it's more of a nice to have, but it shouldn't be mandatory. @andreeaflorescu as it stands, you can get the path out of `vmm_sys_util`'s `TempDir` so it does meet those requirements.\r\n\r\nTherefore I think my actions (and seperate PR's) would be:\r\n\r\n 1) Add a `TempFile` to `vmm_sys_util` in a way that looks __really__ like `TempDir` except that the libc call is different.\r\n 2) Try to add an unnamed `tempfile()` function to the `vmm_sys_util` which wraps the `TempFile`, if they authors of `vmm_sys_util` don't think it's appropriate, I'll add it here instead.\r\n 3) Create a layer here which keeps API compatibility with `tempfile`.\r\n\r\nReasonable? Can someone take a look at https://github.com/rust-vmm/vmm-sys-util/pull/32 please? The maintainers for rust-vmm are different from the Firecracker ones. I'll find two reviewers for you. @iulianbarbu will make this transition.  This patch adds new firecracker executable that creates and starts new VM based on command line parameters passed to it. The new executable bypasses opening API domain socket. \r\n\r\nThe motivation is to simplify and speed up starting VMs.\r\n\r\nSigned-off-by: Waldemar Kozaczuk <jwkozaczuk@gmail.com>\r\n\r\nIssue #923 :\r\n\r\nDescription of changes:\r\n- added new public function **start_vmm_without_api** to vmm module that creates and starts VMs based on passes in parameters\r\n- added **firecracker_cmd** that implements basic functionality of new executable that accepts parameters from command line (in the future it could accept new parameter specifying config file) \r\n\r\nAn example to start a VM using new executable:\r\n\r\n```\r\n./build/release/firecracker_cmd \\\r\n  --kernel-image-path ./hello-vmlinux.bin \\\r\n  --block-device-path ./hello-rootfs.ext4 \\\r\n --kernel-cmdline='console=ttyS0 reboot=k panic=1 pci=off'\r\n```\r\n\r\nPlease note is is an RFC and it is missing appropriate unit tests.\r\n\r\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.\r\n @wkozaczuk I think this functionality should be part of the same Firecracker binary (in main.rs).\r\nThere are a few problems with having firecracker_cmd as a separate binary:\r\n- Testing becomes more difficult because you'll have to test basic Firecracker functionality with both binaries.\r\n-  There is no way to apply actions on the VMM after it was started (like for example BlockDeviceRespan).\r\n- We end up with a lot of duplicated code:  logger initialization, panic hook, parsing arguments. This will make the code hard to maintain as we will need to modify these things in two places.\r\n\r\nI noticed that you pass the individual configuration(like number of cpus, memory size and others) as command line arguments. The plan was to have a configuration file instead. The main reason why a configuration file is more appropriate is that it adds flexibility and you don't end up with an ever increasing number of command line parameters thus making it more usable and maintainable. By flexibility here I mean that you can start prototyping with one configurable component (say for example machine_config) and then add more and more components configurable through the file.\r\n\r\nYou can also take a look at this PR that started on the path with the configuration file: https://github.com/firecracker-microvm/firecracker/pull/704. Some additional things to think about are already in the conversation there. One thing though: I don't think you need the configuration through the API, but both firecracker and jailer should be able to take the configuration file as a parameter.\r\n\r\n @andreeaflorescu I appreciate your points and I think they are very valid. \r\n\r\nBut before I go into arguing my case let me list 3 scenarios I think users would be able to use firecracker in:\r\n1. Start firecracker, configure it and start the VM and at some point stop it using REST API endpoint.\r\n2. Start firecracker and implicitly the VM with some initial configuration _without using REST API_ and then at some point change some configuration (for example rate limiter) and eventually stop it using REST API.\r\n3.  Start firecracracker and implicitly the VM with configuration, let it run and eventually stop itself and firecracker. No REST endpoint is used.\r\n\r\nRight now only 1st scenario is supported by firecracker executable. The 3st scenario is very desirable from my perspective as it allows for fastest startup, least overhead and removes one more entry point - REST API - from security perspective.\r\n\r\nNow we can definitely have single executable handle all 3 scenarios and it would have benefits as you point out but would also have following drawbacks:\r\n-  more complex and more combinations to unit test\r\n- inherently less secure from 3rd scenario perspective as REST API code is embedded in it and available\r\n- probably start the VM slower\r\n- bigger executable (the firecracker_cmd executable is 1.5MB only after stripping)\r\n\r\nNow regardless if we have one or two executables I think users should be able to pass VM configuration in following ways:\r\n- REST API (currently supported); there should be ability to turn REST API off if one executable\r\n- through a file\r\n- through command line parameters\r\n\r\nNow without option to pass configuration as command line parameter users would need to construct a file for every combination which sometimes would be tedious and impractical - imagine starting 1000 VMs where each has different command line, TAP device id, etc - 1000 files? I think ideally we should allow specifying configuration file (for common values) and command line parameters for only certain things that typically are unique per VM (command line, TAP id, block device file path) and override the values from file. \r\n\r\nWhat do you think?\r\n\r\nLastly in the comments I added to #923 I am reporting that I was able start firecracker and a VM, run it and stop it in 50-60ms. Per strace it actually takes only ~20 ms from the start of the firecracker process until exit_group() system call. But then it takes another 30-40 ms until process exits. Would you have any idea why? I am speculating that possibly VCPU thread takes long time to terminate but why? Is something wrong in this code - https://github.com/wkozaczuk/firecracker/blob/sockless_rfc/vmm/src/lib.rs#L2145-L2224 ? Thanks @wkozaczuk, it looks like the time of starting Firecracker without lots of API commands has come. \ud83d\ude04\r\n\r\nHere's a few more data points in this discussion (in addition to the arguments already made):\r\n- Working backwards from all the FaaS/Fargate/Kata Containers/Kubernetes/Lambda use cases, I think that we want to optimize for situations where there are many microVMs on a host, with more being killed and started all the time (but with an average microVM lifetime measured at least in minutes, not milliseconds). And, there may be more hosts like this in a larger system. Most systems behaving like that will likely prefer to keep *all* configuration in config files rather than have some of it present in start-up script command line parameters.\r\n- For development/prototyping/proof of concepts, command line params are great, but I think that can be handled via `firectl` (e.g., `firectl --config-file my_config --extra-param param`).\r\n- Firecracker's current API implementation uses hyper, which is great but may be much bigger than an API endpoint needs to be for something that gets 5-20 requests over its entire lifetime. So yes, it may add extra cost in both memory and time, but the first optimization there might be to have a light API server rather than none at all (since there's a clear need for post-start commands).\r\n- We trust the host (in most cases, it will have access to memory anyway), and the API is endpoint is only exposed there. Indeed, the extra code is built in the binary, which adds _some_ additional risk, but we don't consider the API endpoint its self an attack surface.\r\n\r\nFinally, @wkozaczuk , as you mentioned, there is one situation under which a separate binary with no API makes sense: if your VM is supposed to live and die within a few milliseconds, and you start a new one for whatever you want to compute. That's an interesting scenario, but I think we should handle that as a separate feature request (since it may imply other things), and not as an improvement to the existing start-up/control plane interface. @wkozaczuk When we first started Firecracker we had both an API server and the command line arguments. We had a rather long discussion about this and we decided to not keep the command line arguments. Unfortunately it doesn't look like we have any written conclusions, but from what I remember it was a burden to maintain them both and we had some bugs where configuring something through the API worked, but the same thing didn't work from the command line. Some issues and PRs that are relevant to this discussions:\r\n- PR that removed the command line: https://github.com/firecracker-microvm/firecracker/pull/279\r\n- issues about removing the non-api interface: https://github.com/firecracker-microvm/firecracker/issues/240, https://github.com/firecracker-microvm/firecracker/issues/192, https://github.com/firecracker-microvm/firecracker/issues/191\r\n\r\nIn any case, we can revisit that decision, but we should get more people involved in the conversation. Pinging @firecracker-microvm/compute-capsule.\r\n\r\nMy personal preference is still to have one Firecracker binary with configurable options. You mentioned one usecase where you don't want the API at all. In this case you can also just add a command line parameter ```--no-api``` and not initialize the API server. You would get the same outcome as with the separate binary approach. This would not require changes to our integration tests because you are building the same firecracker code and testing the same binary: firecracker. But when running integration tests you might want to test it with and without the API, with and without an initial configuration file. We will need to add new integration tests only for these scenarios as oppose to have integration tests for a new binary (which I would expect to add more overhead as you have to test **all** configurations twice: once with api and once without).\r\n\r\nI'll provide some more input on this by replying to your comment inline (soonish). Hey @wkozaczuk, I forgot to send my inline replies. Here they are:\r\n \r\n> Now we can definitely have single executable handle all 3 scenarios and it would have benefits as you point out but would also have following drawbacks:\r\n> \r\n>     * more complex and more combinations to unit test\r\n\r\n\r\nWhy do you say it is more complex to test and it has more combinations? For me it sounds like it should be exactly the same as for a separated binary. Moreover, with a separate binary you need to run most of the integration tests we currently have again. Another thing to keep in mind is that most of the \"hard-core\" functionality is tested with integration tests rather than unit tests.\r\n\r\n \r\n>     * inherently less secure from 3rd scenario perspective as REST API code is embedded in it and available\r\n\r\n\r\nThis doesn't necessarily need to happen. You can compile out the REST API by using features. For example we can have \"http-api\" as a default Firecracker feature and if you do not want to run with the API then you can build firecracker using `cargo build --release --no-default-features`.\r\n\r\n \r\n>     * probably start the VM slower\r\n\r\nIf you compile out the API server the boot time should be the same as when having a separate binary. Am I missing something else here?\r\n\r\n>     * bigger executable (the firecracker_cmd executable is 1.5MB only after stripping)\r\n\r\nIf we use \"http_api\" as a feature this shouldn't be a problem any more. We also want to work on optimizing the API server itself in the future by replacing hyper and tokio with an in-house developed API. This should also help in reducing the binary size even when using the API.\r\n\r\n> Now regardless if we have one or two executables I think users should be able to pass VM configuration in following ways:\r\n> \r\n>     * REST API (currently supported); there should be ability to turn REST API off if one executable\r\n> \r\n>     * through a file\r\n> \r\n>     * through command line parameters\r\n\r\nI honestly dislike the command line parameters as it was so tedious to maintain in the past. But again we can get more input from other people in the team.\r\n\r\n> Now without option to pass configuration as command line parameter users would need to construct a file for every combination which sometimes would be tedious and impractical - imagine starting 1000 VMs where each has different command line, TAP device id, etc - 1000 files? I think ideally we should allow specifying configuration file (for common values) and command line parameters for only certain things that typically are unique per VM (command line, TAP id, block device file path) and override the values from file.\r\n\r\nWhat do you mean by \"a file for every combination\"? The way I was seeing this being implementing is by passing a json file that is serialized into vmm_config structures. There are a few structures that are mandatory like the kernel config and the root file system. Everything else is optional and the order of these should not matter. The `start_microvm()` function will be responsible for stopping the execution when one of the required configurations is not present.\r\n\r\n> Lastly in the comments I added to #923 I am reporting that I was able start firecracker and a VM, run it and stop it in 50-60ms. Per strace it actually takes only ~20 ms from the start of the firecracker process until exit_group() system call. But then it takes another 30-40 ms until process exits. Would you have any idea why? I am speculating that possibly VCPU thread takes long time to terminate but why? Is something wrong in this code - https://github.com/wkozaczuk/firecracker/blob/sockless_rfc/vmm/src/lib.rs#L2145-L2224 ?\r\n\r\nI noticed that @blitz responded for this one on the issue. Did the suggestions he was mentioning work?\r\n\r\nLastly I would like to add that this is a rather complex issue. If you think it makes sense I would propose to setup a call to discuss about the design and the next steps for this issue. What do you say? @raduweiss @andreeaflorescu Thanks for your detailed responses. A lot of good points.\r\n\r\nI agree that it might be best to setup a call to discuss all this. I am fairly open and available this and next week. I live in US East time zone.\r\n\r\nRegarding @blitz'es advice, indeed it has helped somewhat (I managed to shave off 10ms). I will be updating the original issue comments with more details soon-ish.  @wkozaczuk should we setup a call for the end of this week to discuss about the design? What about this Thursday or Friday between 7:30-8:30 AM EST?\n\nOn Tue, Jun 18, 2019 at 8:57 AM Andreea Florescu <notifications@github.com>\nwrote:\n\n> @wkozaczuk <https://github.com/wkozaczuk> should we setup a call for the\n> end of this week to discuss about the design?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/firecracker-microvm/firecracker/pull/1115?email_source=notifications&email_token=ABINEIIHS3DTWHMLHOCQPPLP3DLULA5CNFSM4HRFCA32YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODX6QFOA#issuecomment-503120568>,\n> or mute the thread\n> <https://github.com/notifications/unsubscribe-auth/ABINEII4UY3GWRW4H7537ULP3DLULANCNFSM4HRFCA3Q>\n> .\n>\n Friday 7:30-8:30 AM EST sounds good. Can you send me an email (fandree@amazon.com) so I can setup the meeting? @wkozaczuk any update on this PR?  @andreeaflorescu Based on the email you sent after the design meeting, the first action was supposed to be \"writing up a detailed design on this issue\" from your side. I still owe opening new issue regarding the shutdown overhead. The PR itself can be closed at this moment as it does apply given design is in flux.  @wkozaczuk I took a look at the comments on this PR and it looks like most of the things we discussed in the meeting are in this PR comments already. I will take all points and write them in the issue as well. Thanks!  Issue: #650 \r\n\r\n**Description of changes**\r\n- Removed experimental vhost-based vsock support;\r\n- Added a vhost-less vsock device;\r\n- Added a generic vsock backend trait;\r\n- Implemented the vsock packet assembly.\r\n\r\n**Note**: the vsock series is now split across this PR, together with #1175 and #1176, for a leaner review process. Considering that the experimental, vhost-based, vsock functionality gets removed here, the entire series should get merged as closely as possible.\r\n\r\n-------- \r\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.\r\n  As of #1091, API requests are no longer timed in vsock-enabled Firecracker builds (the test itself will time out if an API takes more than the default timeout value though). This can make it harder to detect regressions with vsock. Once vsock is stable, API requests should be timed again.  I'm found an issues after use command call API `SendCtrAltDel` on server. Currently instance use Linux version.\r\n\r\n> Linux firework-vm01 4.9.0-9-amd64 #1 SMP Debian 4.9.168-1 (2019-04-12) x86_64 GNU/Linux \r\n\r\nLinux run under the VMWare ESXi version 6.5. This is log from console.  \r\n\r\n``` \r\n$sudo curl --unix-socket /tmp/firecracker.socket -i \\\r\n>     -X PUT \"http://localhost/actions\" \\\r\n>     -H  \"accept: application/json\" \\\r\n>     -H  \"Content-Type: application/json\" \\\r\n>     -d \"{\r\n>              \\\"action_type\\\": \\\"SendCtrlAltDel\\\"\r\n>     }\"\r\nHTTP/1.1 204 No Content\r\nDate: Tue, 14 May 2019 12:16:55 GMT\r\n```\r\nConsole prints result as below.\r\n\r\n``` 2019-05-14T05:16:55.790607760 [anonymous-instance:WARN:devices/src/legacy/i8042.rs:146] Failed to trigger i8042 kbd interrupt (disabled by guest OS) ``` @rchatsiri Do you have `i8042` and `atkbd` support enabled in the guest kernel? We have [this doc](https://github.com/firecracker-microvm/firecracker/blob/master/docs/api_requests/actions.md#sendctrlaltdel), describing the requirements for using `SendCtrlAltDel`. I'm not found destination link from you reference. Grub changed configuration by use i8042 and atkbd parameter add to ``` /etc/default/grub ```. It didn't help to receive shutdown signal from firecracker api caller.\r\n\r\n```\r\nGRUB_CMDLINE_LINUX_DEFAULT=\"i8042.reset atkbd.reset i8042.nomux quiet\"\r\n```\r\nThe message show an error when we send action type is  ``` SendCtrlAltDel ```.\r\n```\r\nlocalhost login: 2019-05-20T08:29:24.859348473 [anonymous-instance:WARN:devices/src/legacy/i8042.rs:146] Failed to trigger i8042 kbd interrupt (disabled by guest OS)\r\n```\r\nResult of device message which command line filter type name i8042\r\n```\r\n$ sudo dmesg | grep i8042\r\n[    1.317427] i8042: PNP: PS/2 Controller [PNP0303:KBC,PNP0f13:MOUS] at 0x60,0x64 irq 1,12\r\n[    1.318148] serio: i8042 KBD port at 0x60,0x64 irq 1\r\n[    1.318164] serio: i8042 AUX port at 0x60,0x64 irq 12\r\n[    1.441112] input: AT Translated Set 2 keyboard as /devices/platform/i8042/serio0/input/input0\r\n[    1.642766] input: VirtualPS/2 VMware VMMouse as /devices/platform/i8042/serio1/input/input3\r\n[    1.644114] input: VirtualPS/2 VMware VMMouse as /devices/platform/i8042/serio1/input/input2\r\n``` @rchatsiri Apologies, [this is the API doc](https://github.com/firecracker-microvm/firecracker/blob/master/docs/api_requests/actions.md#sendctrlaltdel). As per that doc, please try to add this to the guest kernel command line:\r\n\r\n```\r\ni8042.noaux i8042.nomux i8042.nopnp i8042.dumbkbd\r\n```\r\n @rchatsiri I use this command, it works in my system.\r\ncurl --unix-socket /tmp/firecracker.socket -i \\\r\n    -X PUT 'http://localhost/boot-source'   \\\r\n    -H 'Accept: application/json'           \\\r\n    -H 'Content-Type: application/json'     \\\r\n    -d '{\"kernel_image_path\": \"./vmlinux\", \"boot_args\": \"console=ttyS0 reboot=k panic=1 pci=off i8042.noaux i8042.nomux i8042.nopnp i8042.dumbkbd\"}' Closing for now since we've not heard back from @rchatsiri. Feel free to reopen if need be. This is not working, I am having the same issue even after adding the command lines.\r\n\r\nin my guest OS I see that it was added successfully \r\n\r\nlocalhost:~# cat /proc/cmdline\r\nconsole=ttyS0 reboot=k panic=1 pci=off i8042.noaux i8042.nomux i8042.nopnp i8042.dumbkbd root=/dev/vda rw virtio_mmio.device=4K@0xd0000000:5\r\n\r\nit worth maybe to note that while booting the kernel and rootfs I downloaded from https://s3.amazonaws.com/spec.ccfc.min/img/hello/kernel/hello-vmlinux.bin & hello-rootfs.ext4\r\n\r\nI see these modprobe failures as well \r\nmodprobe: can't change directory to '/lib/modules': No such file or directory\r\nmodprobe: can't change directory to '/lib/modules': No such file or directory\r\n\r\n\r\n\r\n \r\n\r\n I used the kernel provided by you in the comment. still didn't work. I will try building my own kernel with these options and will let you know what happens. \r\nI think the image \"xenial.rootfs.ext4\" provided in [readme](https://github.com/firecracker-microvm/firecracker/blob/master/docs/getting-started.md#running-the-integration-test-suite) itself is missing the modules. \r\n\r\n new Build of kernel with required drivers still have the same issue. Note that lsmod list no drivers loaded at all \r\nlocalhost:~# lsmod\r\nModule                  Size  Used by    Not tainted\r\n\r\nwhen issuing the halt action I still see this : \r\nlocalhost:~# 2019-09-26T12:34:56.291512200 [anonymous-instance:WARN:devices/src/legacy/i8042.rs:146] Failed to trigger i8042 kbd interrupt (disabled by guest OS)\r\n2019-09-26T12:34:56.291644247 [anonymous-instance:WARN:devices/src/legacy/i8042.rs:146] Failed to trigger i8042 kbd interrupt (disabled by guest OS)\r\n2019-09-26T12:34:56.291678715 [anonymous-instance:WARN:devices/src/legacy/i8042.rs:146] Failed to trigger i8042 kbd interrupt (disabled by guest OS)\r\n your Kernel shows \r\nlocalhost:~# dmesg | egrep -i \"i8042|kbd\"\r\n[    0.000000] Command line: console=ttyS0 reboot=k panic=1 pci=off i8042.noaux i8042.nomux i8042.reset i8042.nopnp i8042.dumbkbd root=/dev/vda rw virtio_mmio.device=4K@0xd0000000:5\r\n[    0.000000] Kernel command line: console=ttyS0 reboot=k panic=1 pci=off i8042.noaux i8042.nomux i8042.reset i8042.nopnp i8042.dumbkbd root=/dev/vda rw virtio_mmio.device=4K@0xd0000000:5\r\n[    0.617115] i8042: i8042 controller selftest timeout\r\n @mhhajeer Can you please provide the steps to reproduce this behaviour? I.e. Firecracker arguments, API calls, kernel binary, rootfs image, etc. I haven't been able to hit this issue on my own. ### **I followed the wiki link on git for getting started. so I used these commands** \r\n\r\n./firecracker --api-sock /tmp/firecracker.socket\r\n\r\n### **then cloned the kernel and root fs from you and I also tried those commands below.** \r\n\r\n`arch=`uname -m`\r\n  dest_kernel=\"hello-vmlinux.bin\"\r\n  dest_rootfs=\"hello-rootfs.ext4\"\r\n  image_bucket_url=\"https://s3.amazonaws.com/spec.ccfc.min/img\"\r\n\r\n  if [ ${arch} = \"x86_64\" ]; then\r\n          kernel=\"${image_bucket_url}/hello/kernel/hello-vmlinux.bin\"\r\n          rootfs=\"${image_bucket_url}/hello/fsfiles/hello-rootfs.ext4\"\r\n  elif [ ${arch} = \"aarch64\" ]; then\r\n          kernel=\"${image_bucket_url}/aarch64/ubuntu_with_ssh/kernel/vmlinux.bin\"\r\n          rootfs=\"${image_bucket_url}/aarch64/ubuntu_with_ssh/fsfiles/xenial.rootfs.ext4\"\r\n  else\r\n          echo \"Cannot run firecracker on $arch architecture!\"\r\n          exit 1\r\n  fi\r\n\r\n  echo \"Downloading $kernel...\"\r\n  curl -fsSL -o $dest_kernel $kernel\r\n\r\n  echo \"Downloading $rootfs...\"\r\n  curl -fsSL -o $dest_rootfs $rootfs\r\n\r\n  echo \"Saved kernel file to $dest_kernel and root block device to $dest_rootfs.\"`\r\n\r\n**### then I Set the kernel and rootfs . note that with default param and with the params you mentioned , both gave the same results \"kernel params\"** \r\n\r\n`arch=`uname -m`\r\n  kernel_path=\"hello-vmlinux.bin\"\r\n\r\n  if [ ${arch} = \"x86_64\" ]; then\r\n    curl --unix-socket /tmp/firecracker.socket -i \\\r\n        -X PUT 'http://localhost/boot-source'   \\\r\n        -H 'Accept: application/json'           \\\r\n        -H 'Content-Type: application/json'     \\\r\n        -d \"{\r\n              \\\"kernel_image_path\\\": \\\"${kernel_path}\\\",\r\n              \\\"boot_args\\\": \\\"console=ttyS0 reboot=k panic=1 pci=off\\\"\r\n         }\"\r\n  elif [ ${arch} = \"aarch64\" ]; then\r\n      curl --unix-socket /tmp/firecracker.socket -i \\\r\n        -X PUT 'http://localhost/boot-source'   \\\r\n        -H 'Accept: application/json'           \\\r\n        -H 'Content-Type: application/json'     \\\r\n        -d \"{\r\n              \\\"kernel_image_path\\\": \\\"${kernel_path}\\\",\r\n              \\\"boot_args\\\": \\\"console=ttyS0 reboot=k panic=1 pci=off i8042.noaux i8042.nomux i8042.reset i8042.nopnp i8042.dumbkbd\\\"\r\n         }\"\r\n  else\r\n      echo \"Cannot run firecracker on $arch architecture!\"\r\n      exit 1\r\n  fi\r\n\r\n\r\nrootfs_path=\"hello-rootfs.ext4\"\r\n  curl --unix-socket /tmp/firecracker.socket -i \\\r\n    -X PUT 'http://localhost/drives/rootfs' \\\r\n    -H 'Accept: application/json'           \\\r\n    -H 'Content-Type: application/json'     \\\r\n    -d \"{\r\n          \\\"drive_id\\\": \\\"rootfs\\\",\r\n          \\\"path_on_host\\\": \\\"${rootfs_path}\\\",\r\n          \\\"is_root_device\\\": true,\r\n          \\\"is_read_only\\\": false\r\n     }\"\r\n`\r\n**### then I started the VM** \r\n\r\n`curl --unix-socket /tmp/firecracker.socket -i \\\r\n    -X PUT 'http://localhost/actions'       \\\r\n    -H  'Accept: application/json'          \\\r\n    -H  'Content-Type: application/json'    \\\r\n    -d '{\r\n        \"action_type\": \"InstanceStart\"\r\n     }'`\r\n\r\n @mhhajeer If I understand this correctly, you are still using the `hello-vmlinux.bin` kernel, which as no i8042/atkbd support. I can replicate the problem with that kenel, which is to be expected.\r\n\r\nThe kernel I was suggesting is the one we use for testing `SendCtrlAltDel`, and which has i8042 and atkbd compiled in. This one: https://s3.amazonaws.com/spec.ccfc.min/img/x86_64/minimal_with_atkbd/kernel/vmlinux.bin .\r\n @dhrgit I did in one experiment. however, this is not the only one I tried:\r\n1. hello-vmlinux.bin \r\n2.  https://s3.amazonaws.com/spec.ccfc.min/img/x86_64/minimal_with_atkbd/kernel/vmlinux.bin \r\n3. compiled my own with CONFIG_SERIO_I8042 and CONFIG_KEYBOARD_ATKBD. \r\n\r\nall three experiments resulted in same outcomes.\r\n\r\nyour Kernel shows (exp 2) showed \r\nlocalhost:~# dmesg | egrep -i \"i8042|kbd\"\r\n[ 0.000000] Command line: console=ttyS0 reboot=k panic=1 pci=off i8042.noaux i8042.nomux i8042.reset i8042.nopnp i8042.dumbkbd root=/dev/vda rw virtio_mmio.device=4K@0xd0000000:5\r\n[ 0.000000] Kernel command line: console=ttyS0 reboot=k panic=1 pci=off i8042.noaux i8042.nomux i8042.reset i8042.nopnp i8042.dumbkbd root=/dev/vda rw virtio_mmio.device=4K@0xd0000000:5\r\n[ 0.617115] i8042: i8042 controller selftest timeout\r\n @mhhajeer Unfortunately, I still can't reproduce the problem. Can you please try running our `SendCtrlAltDel` integration test on your machine and let me know if it passes?\r\n\r\nI.e. - with Docker and git installed:\r\n```bash\r\ngit clone https://github.com/firecracker-microvm/firecracker.git\r\nfirecracker/tools/devtool test -- integration_tests/functional/test_api.py::test_send_ctrl_alt_del\r\n```\r\n\r\nIf the test passes, it will download:\r\n- an atkbd-enable kernel to `firecracker/build/img/x86_64/minimal_with_atkbd/kernel/vmlinux.bin`; and\r\n- a test rootfs to `firecracker/build/img/x86_64/minimal_with_atkbd/fsfiles/atkbd-rootfs.ext4`.\r\n\r\nIf the test passes, can you please try starting Firecracker with that kernel and that rootfs? Note that, in the example you provided, you were setting the kernel command line for aarch64, not for x86_64. Great, this one is working. test passed and I copied the kernel and it worked :) big thanks. I am going to try again and compile my own kernel \r\nhttps://github.com/firecracker-microvm/firecracker/blob/master/docs/rootfs-and-kernel-setup.md\r\n\r\nI will be using the .config provided here https://github.com/firecracker-microvm/firecracker/blob/master/resources/microvm-kernel-config \r\n\r\nis there a way to get the .config used to build the test kernel that passed somewhere ? I want to compare it with the one in the link above \r\n\r\nI will let you know if it works. by the way, no kernel param used this time other than keep_bootcon console=ttyS0 reboot=k panic=1 pci=off , and it worked @mhhajeer If you start from our reference config for kernel v4.14.72, and add:\r\n\r\n```\r\nCONFIG_SERIO_I8042=y\r\nCONFIG_KEYBOARD_ATKBD=y\r\n```\r\n\r\nthen run `make vmlinux`, the kernel build system will guide you through adding the dependent options (like `CONFIG_SERIO=y`, since that's needed by `CONFIG_SERIO_I8042=y`).\r\n\r\nThe minimal diff that I got was:\r\n\r\n```\r\nCONFIG_INPUT_KEYBOARD=y\r\nCONFIG_KEYBOARD_ATKBD=y\r\nCONFIG_SERIO=y\r\nCONFIG_SERIO_I8042=y\r\nCONFIG_SERIO_LIBPS2=y\r\n```\r\n\r\nAs for the additional kernel command line args, we are suggesting those just for a shorter boot time. `SendCtrlAltDel` will work just fine without them, but booting the microvm will take longer, if the kernel has to probe the i8042 during boot. Those args tell the kernel to skip that probing process. Closing as not reproducible. Please reopen if necessary.  Thanks @serban300 for pointing this out.\r\n\r\nWhen Firecracker `panic!`s, it emits a blacklisted `SYS_mremap` which breaks the seccomp filter.\r\nTo repro, I added a dummy `panic!` in the `api_server` thread just after installing the seccomp filters:\r\n```diff\r\ndiff --git a/api_server/src/lib.rs b/api_server/src/lib.rs\r\nindex afb8f42..5b43c7c 100644\r\n--- a/api_server/src/lib.rs\r\n+++ b/api_server/src/lib.rs\r\n@@ -149,6 +149,8 @@ impl ApiServer {\r\n             );\r\n         }\r\n \r\n+        panic!(\"Terminating\");\r\n+\r\n         // This runs forever, unless an error is returned somewhere within f (but nothing happens\r\n```\r\n```bash\r\ntarget/x86_64-unknown-linux-musl/debug/firecracker --api-sock /tmp/a.sock\r\n\r\n2019-05-10T11:13:12.182703303 [anonymous-instance:ERROR:src/main.rs:55] Firecracker panicked at 'Terminating', api_server/src/lib.rs:152:9\r\n2019-05-10T11:13:12.307724144 [anonymous-instance:ERROR:vmm/src/sigsys_handler.rs:69] Shutting down VM after intercepting a bad syscall (25).\r\n2019-05-10T11:13:12.307818289 [anonymous-instance:ERROR:vmm/src/sigsys_handler.rs:75] Failed to log metrics while stopping: Logger was not initialized.\r\n```\r\n\r\nThe `mremap` originates in `libbacktrace`:\r\n\r\n```rust\r\n#0  __mremap (old_addr=0x7ffff7db9000, old_len=233472, new_len=new_len@entry=237568, flags=flags@entry=1) at src/mman/mremap.c:14\r\n#1  0x0000000000a2784c in realloc (p=0x7ffff7db9020, n=234656) at src/malloc/malloc.c:397\r\n#2  0x00000000009dca63 in __rbt_backtrace_vector_grow ()\r\n#3  0x00000000009dddab in add_unit_addr ()\r\n#4  0x00000000009de931 in add_unit_ranges ()\r\n#5  0x00000000009decb6 in find_address_ranges ()\r\n#6  0x00000000009df23d in build_address_map ()\r\n#7  0x00000000009e2309 in build_dwarf_data ()\r\n#8  0x00000000009e24da in __rbt_backtrace_dwarf_add ()\r\n#9  0x00000000009dc3bf in elf_add ()\r\n#10 0x00000000009dc7e5 in __rbt_backtrace_initialize ()\r\n#11 0x00000000009d708a in fileline_initialize ()\r\n#12 0x00000000009d7135 in __rbt_backtrace_pcinfo ()\r\n#13 0x00000000009d56ce in backtrace::symbolize::libbacktrace::resolve::h746412056539717c (symaddr=0x9d23ac <backtrace::backtrace::trace_unsynchronized::h2c34a021aa0e95d7+44>, cb=...)\r\n    at $HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.15/src/symbolize/libbacktrace.rs:171\r\n#14 0x00000000009cd498 in backtrace::symbolize::resolve_unsynchronized::hb7eccc81fdd0039a (addr=0x9d23ac <backtrace::backtrace::trace_unsynchronized::h2c34a021aa0e95d7+44>, cb=...)\r\n    at $HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.15/src/symbolize/mod.rs:62\r\n#15 0x00000000009cd460 in backtrace::symbolize::resolve::h53981fa6789bc746 (addr=0x9d23ac <backtrace::backtrace::trace_unsynchronized::h2c34a021aa0e95d7+44>, cb=...)\r\n    at $HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.15/src/symbolize/mod.rs:51\r\n#16 0x00000000009c84de in backtrace::capture::Backtrace::resolve::h748b5356e9e44001 (self=0x7fffffff7db8)\r\n    at $HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.15/src/capture.rs:146\r\n#17 0x00000000009c8050 in backtrace::capture::Backtrace::new::h622dc69a5dec5128 ()\r\n    at $HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.15/src/capture.rs:72\r\n#18 0x0000000000400f84 in firecracker::main::_$u7b$$u7b$closure$u7d$$u7d$::hdc43da8746fa8ee1 (info=0x7fffffff80a8) at src/main.rs:59\r\n#19 0x0000000000a135ea in std::panicking::rust_panic_with_hook::h28b9ce6fa7a5033b () at src/libstd/panicking.rs:495\r\n#20 0x00000000006132b8 in std::panicking::begin_panic::hc75a354ae6cfa9ae (msg=..., file_line_col=0xd21b18) at /rustc/9fda7c2237db910e41d6a712e9a2139b352e558b/src/libstd/panicking.rs:425\r\n#21 0x00000000004068d4 in api_server::ApiServer::bind_and_run::h4ab39ac0c86ac506 (self=0x7fffffffd8e0, path=..., start_time_us=..., start_time_cpu_us=..., seccomp_level=2)\r\n    at api_server/src/lib.rs:152\r\n#22 0x0000000000403e5f in firecracker::main::h28360df3fa9d0378 () at src/main.rs:168\r\n#23 0x0000000000402a10 in std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h3e2f7377df0eeb37 () at /rustc/9fda7c2237db910e41d6a712e9a2139b352e558b/src/libstd/rt.rs:74\r\n#24 0x0000000000a12f13 in std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::hbd394198e0f45efb () at src/libstd/rt.rs:59\r\n#25 std::panicking::try::do_call::hf93a787b72e1d226 () at src/libstd/panicking.rs:310\r\n#26 0x0000000000a1e059 in __rust_maybe_catch_panic () at src/libpanic_abort/lib.rs:39\r\n#27 0x0000000000a138da in std::panicking::try::h9b83fe1076812e50 () at src/libstd/panicking.rs:289\r\n#28 std::panic::catch_unwind::h8a94b67bdbd8163d () at src/libstd/panic.rs:398\r\n#29 std::rt::lang_start_internal::h7b3bd8c78881c37d () at src/libstd/rt.rs:58\r\n#30 0x00000000004029e9 in std::rt::lang_start::h0fdb6015f3270167 (main=0x4031e0 <firecracker::main::h28360df3fa9d0378>, argc=3, argv=0x7fffffffdd28)\r\n    at /rustc/9fda7c2237db910e41d6a712e9a2139b352e558b/src/libstd/rt.rs:74\r\n#31 0x00000000004042ca in main ()\r\n```\r\n\r\nThe `panic!` terminates the process anyway, but the backtrace is lost because of the seccomp issue/ New problem: even with `mremap` whitelisted, we get *another* violation, this time caused by `rt_sigprocmask`.\r\n\r\nFirecracker has `panic = \"abort\"` configured - https://github.com/firecracker-microvm/firecracker/blob/ffd5e8e930f122d8fd29dd53a62d4925a6622364/Cargo.toml#L29\r\nin which case Rust `panic`s by [deferring the `abort` to `libc`](https://github.com/rust-lang/rust/blob/9fda7c2237db910e41d6a712e9a2139b352e558b/src/libpanic_abort/lib.rs#L60), which, in the `musl` implementation, literally [raises `SIGABRT`](https://git.musl-libc.org/cgit/musl/tree/src/exit/abort.c#n13).\r\n\r\n`musl` is also careful to [block other signals](https://git.musl-libc.org/cgit/musl/tree/src/signal/raise.c#n9) while it's raising said `SIGABRT`, and [uses `sigprocmask` to do so](https://git.musl-libc.org/cgit/musl/tree/src/signal/block.c#n36).\r\n\r\nStack:\r\n```rust\r\n#0  __block_app_sigs (set=set@entry=0x7fffffff7ef0) at src/signal/block.c:37\r\n#1  0x0000000000a2a4ae in raise (sig=sig@entry=6) at src/signal/raise.c:9\r\n#2  0x0000000000a2875e in abort () at src/exit/abort.c:14\r\n#3  0x0000000000a20617 in panic_abort::__rust_start_panic::abort::h79f75bf89c599121 () at src/libpanic_abort/lib.rs:60\r\n```\r\n Ah and the `raise` needs `SYS_tkill` whitelisted too. :slightly_smiling_face:  Is there another problem associated with this behavior other than not having the backtrace?  Not unless we randomly choose to `raise` signals ourselves. Not that I can think of, anyway. But the backtrace is the only debug info we have in case of unexpected exits. Not `25` but `rt_sigprocmask` = `14` is hit instead:\r\n\r\n```\r\nrt_sigprocmask(SIG_BLOCK, ~[RTMIN RT_1 RT_2], [BUS KILL SEGV ALRM TERM STKFLT CHLD TTIN URG PROF WINCH PWR RT_2 RT_3 RT_6 RT_7 RT_8 RT_9 RT_10 RT_11 RT_12 RT_13 RT_14 RT_15], 8) = 14\r\n```\r\n\r\nFrom the looks of it, it's the same `rt_sigprocmask` I identified when I first looked into this issue.\r\n\r\n```rust\r\nThread 2 \"fc_api\" received signal SIGSYS, Bad system call.\r\n[Switching to LWP 21880]\r\n0x0000000000908f9a in __block_app_sigs ()\r\n(gdb) bt\r\n#0  0x0000000000908f9a in __block_app_sigs ()\r\n#1  0x0000000000908fcb in raise ()\r\n```\r\n\r\n> `musl` is also careful to [block other signals](https://git.musl-libc.org/cgit/musl/tree/src/signal/raise.c#n9) while it's raising said `SIGABRT`, and [uses `sigprocmask` to do so](https://git.musl-libc.org/cgit/musl/tree/src/signal/block.c#n36).\r\n\r\n\r\nThis `rt_sigprocmask` is unavoidable as it originates (albeit after a convoluted way) in the `panic=abort` configuration. Since the Firecracker process dies anyway, and is irrecoverable at this point, I don't think it's that big of a problem if it dies with `SIGSYS` instead of  `SIGABRT`. @firecracker-microvm/compute-capsule thoughts?\r\n The executable is bigger (~ 200 KB) when compiled with `panic=unwind`:\r\n\r\n```bash\r\nls -l build/cargo_target/x86_64-unknown-linux-musl/release/firecracker*\r\n-rwxr-xr-x 2 aghecen domain^users 2416280 Oct  9 12:49 build/cargo_target/x86_64-unknown-linux-musl/release/firecracker\r\n-rwxr-xr-x 2 aghecen domain^users 2712752 Oct  9 12:48 build/cargo_target/x86_64-unknown-linux-musl/release/firecracker_unwind\r\n``` After more digging, looks like the `rt_sigprocmask` is unescapable. It's also called from [`__block_all_sigs`](https://git.musl-libc.org/cgit/musl/tree/src/signal/block.c), which is in turn called by [`pthread_exit`](https://git.musl-libc.org/cgit/musl/tree/src/thread/pthread_create.c#n132). Basically `musl` took every precaution and blocks signals whenever something signal-unsafe is underway. Nice.\r\n\r\nSignal handling, however, appears to overwrite the stack, so the backtrace we get when `panic=abort` is empty, and useless.\r\n\r\nIn case of `panic`, we need:\r\n- the full backtrace\r\n- the process to exit\r\n\r\nThat leaves us with 2 options IMO -\r\n\r\n1.  `panic=unwind` + `libbacktrace` (with the `cc` dependency, sorry) + `libc::exit` in the panic handler: gets the backtrace and cleanly exists, at the expense of a bigger binary and a complicated dependency we can't shake\r\n1. `panic=abort` - `libbacktrace`: adios backtrace, but we also get rid of `libbacktrace`, `cc`, shrink the binary, and the process does eventually die by `SIGSYS`.\r\n\r\n@firecracker-microvm/compute-capsule WDYT?\r\n How about dropping libbacktrace, together with the concept of logging a stack trace on panic? We could then just use a simple core dump, and rely on the user to configure `/proc/<PID>/coredump_filter`. > But `backtrace` works with `unwind` and does not with `abort` as far as I understand. Right?\r\n\r\nYes.\r\n***\r\n> How about dropping libbacktrace, together with the concept of logging a stack trace on panic? We could then just use a simple core dump, and rely on the user to configure `/proc/<PID>/coredump_filter`.\r\n\r\nCore dumps are a bigger discussion. Recommending core dumps as-is + high density makes me wary. Moreover, we can't just do simple core dumps as-is - at the very least we'd need to exclude the guest memory from them. Maybe more.\r\n***\r\n>  Also, from my understanding unwind does not work if you have dependencies that have the panic mode set to abort.\r\n\r\nI tried this out and it looks like dependency panic mode is overridden (the whole `[profile]` section is).\r\n\r\n```bash\r\nwarning: profiles for the non root package will be ignored, specify profiles at the workspace root:\r\npackage:   /firecracker/fc_util/Cargo.toml\r\nworkspace: /firecracker/Cargo.toml\r\n```\r\n***\r\n> @aghecenco does anything get displayed when compiling with `unwind` and by using `Backtrace::new_unresolved` (which frees us from the `cc` dependency)? \r\n\r\n```rust\r\n2019-10-09T16:28:13.517710459 [anonymous-instance:ERROR:src/main.rs:61] Firecracker panicked at 'Terminating', vmm/src/vstate.rs:365:21\r\n2019-10-09T16:28:13.518338905 [anonymous-instance:ERROR:src/main.rs:71] stack backtrace:\r\n   0: <unresolved> (0x59c2da)\r\n   1: <unresolved> (0x579195)\r\n   2: <unresolved> (0x4a4f34)\r\n   3: <unresolved> (0x49a4ea)\r\n   4: <unresolved> (0x49f106)\r\n   5: <unresolved> (0x585a0f)\r\n   6: <unresolved> (0x5879cc)\r\n2019-10-09T16:28:13.518355952 [anonymous-instance:ERROR:src/main.rs:78] done printing backtrace\r\n```\r\n\r\nThis is pretty useless on its own, but we can use the addresses, `/proc/<pid>/maps` and `addr2line` to do a post mortem. We'd need to save the memory maps in the panic handler.\r\n\r\n***\r\n> @aghecenco as the one investigating this, what is your recommendation?\r\n\r\nSomething new :smile: \r\n\r\n* @dianpopa's `Backtrace::new_unresolved` which frees us from `cc` and gets us a partial stack strace +\r\n* `/proc/<pid>/maps` (dumped in the log? It's a lot of output but I have no better idea) +\r\n* `addr2line` + memory maps (for offset magic) + original binary for post-mortem\r\n\r\nI haven't actually tested this yet, if it turns out to be a dud, I'd keep `libbacktrace` even with all the pain. > Core dumps are a bigger discussion. Recommending core dumps as-is + high density makes me wary. Moreover, we can't just do simple core dumps as-is - at the very least we'd need to exclude the guest memory from them. Maybe more.\r\n\r\nNot as-is, but filtered via `/proc/self/coredump_filter`. Actually, we could set that up to initially include only the stack (i.e. filter=0). From `man core`:\r\n\r\n>       Since kernel 2.6.23, the Linux-specific /proc/[pid]/coredump_filter\r\n>       file can be used to control which memory segments are written to the\r\n>       core dump file in the event that a core dump is performed for the\r\n>       process with the corresponding process ID.\r\n>\r\n>       The value in the file is a bit mask of memory mapping types (see\r\n>       mmap(2)).  If a bit is set in the mask, then memory mappings of the\r\n>       corresponding type are dumped; otherwise they are not dumped.  The\r\n>       bits in this file have the following meanings:\r\n>\r\n>           bit 0  Dump anonymous private mappings.\r\n>           bit 1  Dump anonymous shared mappings.\r\n>           bit 2  Dump file-backed private mappings.\r\n>           bit 3  Dump file-backed shared mappings.\r\n>           bit 4 (since Linux 2.6.24)\r\n>                  Dump ELF headers.\r\n>           bit 5 (since Linux 2.6.28)\r\n>                  Dump private huge pages.\r\n>           bit 6 (since Linux 2.6.28)\r\n>                  Dump shared huge pages.\r\n>           bit 7 (since Linux 4.4)\r\n>                  Dump private DAX pages.\r\n>           bit 8 (since Linux 4.4)\r\n>                  Dump shared DAX pages. I like the idea, but it introduces a new artefact for users to collect. Firecracker already has 2 output channels in the logs and metrics destinations, and `libbacktrace` allowed us to leverage one. While stack traces currently don't work at all, getting them to work with this quirk of an extra requirement might not be desirable for all users - especially since they expect the stack trace to come through the logging channel.\r\n\r\nIf we take a step back and look at the problem, our pain is with `backtrace-rs` which swallows a bunch of C sources and pulls in the extra dependency on `cc` to compile them. Last time we had this problem, it was with `libseccomp` and we considered doing exactly that - gulp up the C sources, compile them and present them as a Rust crate. We ended up not doing that and instead rewriting in native Rust only what we needed from `libseccomp`. I think the best thing to do here is to repeat that - take what we need from `libbacktrace`, rewrite it, and profit :beer:  # It's back!\r\n\r\n`backtrace` introduced a change in 0.3.36 https://github.com/rust-lang/backtrace-rs/commit/1059402b3d686be9b7c2c13da5656cc05102cad0 that strips the `cwd` from the path to pretty-print the stack trace. This in turn calls `SYS_getcwd`, it's blacklisted, seccomp violation. Firecracker requires `>=0.3.35` so we could either\r\na) Lock `backtrace` to `0.3.35`\r\nb) Whitelist `SYS_getcwd`\r\nc) Remove `backtrace` as it doesn't appear to be of much use - this is what it logs for a sample repro on my machine\r\n\r\n```rust\r\n2020-04-24T11:56:34.647617741 [anonymous-instance]    0: backtrace::backtrace::libunwind::trace\r\n             at $HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/libunwind.rs:86\r\n      backtrace::backtrace::trace_unsynchronized\r\n             at $HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:66\r\n   1: backtrace::backtrace::trace\r\n             at $HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/backtrace/mod.rs:53\r\n```\r\n\r\nStack:\r\n\r\n```rust\r\n#0  0x00000000007adc8a in getcwd ()\r\n#1  0x00000000007840a8 in std::sys::unix::os::getcwd::hba0235bebb246bce () at src/libstd/sys/unix/os.rs:125\r\n#2  std::env::current_dir::h405b16efd53b51d6 () at src/libstd/env.rs:50\r\n#3  0x0000000000423f19 in _$LT$backtrace..capture..Backtrace$u20$as$u20$core..fmt..Debug$GT$::fmt::h6e113badea3c1c89 (self=0x7fffefde7bc0, fmt=0x7fffefde7468)\r\n    at $HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.46/src/capture.rs:340\r\n#4  0x00000000007b7c5c in core::fmt::write::h6412e51ee7d5337d () at src/libcore/fmt/mod.rs:1030\r\n#5  0x00000000007b7901 in _$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$::fmt::h5ea16bbc662972ee () at src/libcore/fmt/mod.rs:417\r\n#6  _$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Debug$GT$::fmt::he623cec07b9019fb () at src/libcore/fmt/mod.rs:410\r\n#7  0x000000000075b8a1 in _$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$::fmt::h7fea3b77c248ec22 (self=0x7fffefde77d0, f=0x7fffefde7568)\r\n    at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/fmt/mod.rs:1928\r\n#8  0x00000000007b7c5c in core::fmt::write::h6412e51ee7d5337d () at src/libcore/fmt/mod.rs:1030\r\n#9  0x00000000007b0183 in core::fmt::Write::write_fmt::h327ec2e3e9b3b9c6 () at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/fmt/mod.rs:195\r\n#10 alloc::fmt::format::h90ef73e9a117a8b9 () at src/liballoc/fmt.rs:564\r\n#11 0x000000000070ee1c in _$LT$logger..logger..Logger$u20$as$u20$log..Log$GT$::log::hbea843fb284d6007 (\r\n    self=0xa89870 <_$LT$logger..logger.._LOGGER_INNER$u20$as$u20$core..ops..deref..Deref$GT$::deref::__stability::LAZY::ha6c755566dd29a6e>, record=0x7fffefde78c0)\r\n    at src/logger/src/logger.rs:487\r\n#12 0x0000000000743fe2 in log::__private_api_log::h358e73b06dbcea8c (args=..., level=Error)\r\n    at $HOME/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.4.8/src/lib.rs:1393\r\n#13 0x000000000040e69b in firecracker::main::_$u7b$$u7b$closure$u7d$$u7d$::h2132887d66eacef3 (info=0x7fffefde7d98) at src/firecracker/src/main.rs:77\r\n#14 0x000000000078e3bc in std::panicking::rust_panic_with_hook::h00181808d6f69bb1 () at src/libstd/panicking.rs:477\r\n#15 0x000000000078de72 in std::panicking::continue_panic_fmt::hd4650be798eb9cfd () at src/libstd/panicking.rs:380\r\n#16 0x000000000078dd66 in rust_begin_unwind () at src/libstd/panicking.rs:307\r\n```  Includes snapcraft.yaml to build snap.\r\n\r\nIssue #, if available:\r\nhttps://github.com/firecracker-microvm/firecracker/issues/723\r\nDescription of changes:\r\nAdded snapcraft.yaml to build snap.\r\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.\r\n Thanks for getting this started. We don't have much experience with snaps yet, but we'll take a look.\r\n\r\nFor anyone else looking at this, any info on how you would use such a snap will help :) @mikeroyal are you still interested in driving this PR? Hi @dianpopa, I'm getting back to work on it this week. Thank you for the reminder. :) I found two other problems that we need to solve:\r\n* The jailer is not installed when doing `snap install`.\r\n* The firecracker binary obtained as part of the built process is built with the gnu target. We want to publish the musl built binary. Hi @dianpopa, I'll look into adding jailer and musl built binary for the snap. > Hi @dianpopa, I'll look into adding jailer and musl built binary for the snap.\r\n\r\nUnfortunately seems that the 'gnu' target is hardcoded inside the [sources](https://github.com/snapcore/snapcraft/blob/master/snapcraft/plugins/rust.py).\r\nI will open an issue to get their opinion on changing this. > > Hi @dianpopa, I'll look into adding jailer and musl built binary for the snap.\r\n> \r\n> Unfortunately seems that the 'gnu' target is hardcoded inside the [sources](https://github.com/snapcore/snapcraft/blob/master/snapcraft/plugins/rust.py).\r\n> I will open an issue to get their opinion on changing this.\r\n\r\nSeems that there was an [effort](https://github.com/snapcore/snapcraft/pull/1382) sometime to add support for musl enabled builds for the Rust plugin but exceeded performance limitations for them. Received [response](https://forum.snapcraft.io/t/supoort-for-various-build-targets-for-the-rust-plugin/12474/2) from Snap Team.   I cannot install clippy on aarch64. Apparently it didn't land in stable yet: https://github.com/rust-lang/rust-clippy/issues/3682 Seems like we can use `cargo clippy --target aarch64-unknown-linux-musl` on x86_64.   When the status check for a pull request fails, it's hard to decipher from the thousands of lines of log output what is actually the problem.\r\n\r\nOne solution would be to have multiple individual status checks for unit tests, integration tests, rust formatting, python formatting.. The user could then click on the red X and get the report for the one check that failed. That's definitely something we need to do (along with running said individual checks run in parallel, since the total time is too long now).\r\n\r\nIt's something we have in the backlog and will probably prioritize with the next couple of months.\r\n\r\nActually, we're also thinking about making our medium-term plans more transparent, and this might be a good catalyst \ud83d\ude42; stay tuned. Added to the roadmap as part of #1181. @dianpopa Indeed. Looks far nicer now. Thanks!  Using firecracker v0.12.0 and I noticed that if there is a vsock error, firecracker still behaves as if there was no error and continues to run. The desired behavior would be for the firecracker process to panic and exit with a non-zero exit code if an error was to occur.\r\n\r\n<details>\r\n<pre>\r\n[    0.000000] Linux version 4.14.55-84.37.amzn2.x86_64 (mockbuild@ip-10-0-1-79) (gcc version 7.3.1 20180303 (Red Hat 7.3.1-5) (GCC)) #1 SMP Wed Jul 25 18:47:15 UTC 2018\r\n[    0.000000] Command line: console=ttyS0 noapic reboot=k panic=1 pci=off nomodules rw  root=/dev/vda virtio_mmio.device=4K@0xd0000000:5 virtio_mmio.device=4K@0xd0001000:6 virtio_mmio.device=4K@0xd0002000:7\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x001: 'x87 floating point registers'\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x002: 'SSE registers'\r\n[    0.000000] x86/fpu: Supporting XSAVE feature 0x004: 'AVX registers'\r\n[    0.000000] x86/fpu: xstate_offset[2]:  576, xstate_sizes[2]:  256\r\n[    0.000000] x86/fpu: Enabled xstate features 0x7, context size is 832 bytes, using 'standard' format.\r\n[    0.000000] e820: BIOS-provided physical RAM map:\r\n[    0.000000] BIOS-e820: [mem 0x0000000000000000-0x000000000009fbff] usable\r\n[    0.000000] BIOS-e820: [mem 0x0000000000100000-0x000000000fffffff] usable\r\n[    0.000000] NX (Execute Disable) protection: active\r\n[    0.000000] DMI not present or invalid.\r\n[    0.000000] Hypervisor detected: KVM\r\n[    0.000000] tsc: Fast TSC calibration using PIT\r\n[    0.000000] e820: last_pfn = 0x10000 max_arch_pfn = 0x400000000\r\n[    0.000000] MTRR: Disabled\r\n[    0.000000] x86/PAT: MTRRs disabled, skipping PAT initialization too.\r\n[    0.000000] CPU MTRRs all blank - virtualized system.\r\n[    0.000000] x86/PAT: Configuration [0-7]: WB  WT  UC- UC  WB  WT  UC- UC  \r\n[    0.000000] found SMP MP-table at [mem 0x0009fc00-0x0009fc0f] mapped at [ffffffffff200c00]\r\n[    0.000000] Scanning 1 areas for low memory corruption\r\n[    0.000000] No NUMA configuration found\r\n[    0.000000] Faking a node at [mem 0x0000000000000000-0x000000000fffffff]\r\n[    0.000000] NODE_DATA(0) allocated [mem 0x0ffde000-0x0fffffff]\r\n[    0.000000] kvm-clock: Using msrs 4b564d01 and 4b564d00\r\n[    0.000000] kvm-clock: cpu 0, msr 0:ffdc001, primary cpu clock\r\n[    0.000000] kvm-clock: using sched offset of 74352171 cycles\r\n[    0.000000] clocksource: kvm-clock: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns\r\n[    0.000000] Zone ranges:\r\n[    0.000000]   DMA      [mem 0x0000000000001000-0x0000000000ffffff]\r\n[    0.000000]   DMA32    [mem 0x0000000001000000-0x000000000fffffff]\r\n[    0.000000]   Normal   empty\r\n[    0.000000] Movable zone start for each node\r\n[    0.000000] Early memory node ranges\r\n[    0.000000]   node   0: [mem 0x0000000000001000-0x000000000009efff]\r\n[    0.000000]   node   0: [mem 0x0000000000100000-0x000000000fffffff]\r\n[    0.000000] Initmem setup node 0 [mem 0x0000000000001000-0x000000000fffffff]\r\n[    0.000000] Intel MultiProcessor Specification v1.4\r\n[    0.000000] MPTABLE: OEM ID: FC      \r\n[    0.000000] MPTABLE: Product ID: 000000000000\r\n[    0.000000] MPTABLE: APIC at: 0xFEE00000\r\n[    0.000000] Processor #0 (Bootup-CPU)\r\n[    0.000000] IOAPIC[0]: apic_id 2, version 17, address 0xfec00000, GSI 0-23\r\n[    0.000000] Processors: 1\r\n[    0.000000] smpboot: Allowing 1 CPUs, 0 hotplug CPUs\r\n[    0.000000] PM: Registered nosave memory: [mem 0x00000000-0x00000fff]\r\n[    0.000000] PM: Registered nosave memory: [mem 0x0009f000-0x000fffff]\r\n[    0.000000] e820: [mem 0x10000000-0xffffffff] available for PCI devices\r\n[    0.000000] Booting paravirtualized kernel on KVM\r\n[    0.000000] clocksource: refined-jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645519600211568 ns\r\n[    0.000000] random: get_random_bytes called from start_kernel+0x94/0x486 with crng_init=0\r\n[    0.000000] setup_percpu: NR_CPUS:128 nr_cpumask_bits:128 nr_cpu_ids:1 nr_node_ids:1\r\n[    0.000000] percpu: Embedded 41 pages/cpu @ffff88000fc00000 s128728 r8192 d31016 u2097152\r\n[    0.000000] KVM setup async PF for cpu 0\r\n[    0.000000] kvm-stealtime: cpu 0, msr fc15040\r\n[    0.000000] PV qspinlock hash table entries: 256 (order: 0, 4096 bytes)\r\n[    0.000000] Built 1 zonelists, mobility grouping on.  Total pages: 64393\r\n[    0.000000] Policy zone: DMA32\r\n[    0.000000] Kernel command line: console=ttyS0 noapic reboot=k panic=1 pci=off nomodules rw  root=/dev/vda virtio_mmio.device=4K@0xd0000000:5 virtio_mmio.device=4K@0xd0001000:6 virtio_mmio.device=4K@0xd0002000:7\r\n[    0.000000] PID hash table entries: 1024 (order: 1, 8192 bytes)\r\n[    0.000000] Memory: 240080K/261752K available (8204K kernel code, 622K rwdata, 1464K rodata, 1268K init, 2820K bss, 21672K reserved, 0K cma-reserved)\r\n[    0.000000] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1\r\n[    0.000000] Kernel/User page tables isolation: enabled\r\n[    0.004000] Hierarchical RCU implementation.\r\n[    0.004000] \tRCU restricting CPUs from NR_CPUS=128 to nr_cpu_ids=1.\r\n[    0.004000] RCU: Adjusting geometry for rcu_fanout_leaf=16, nr_cpu_ids=1\r\n[    0.004000] NR_IRQS: 4352, nr_irqs: 48, preallocated irqs: 16\r\n[    0.004000] Console: colour dummy device 80x25\r\n[    0.004000] console [ttyS0] enabled\r\n[    0.004000] tsc: Detected 3591.682 MHz processor\r\n[    0.004000] Calibrating delay loop (skipped) preset value.. 7183.36 BogoMIPS (lpj=14366728)\r\n[    0.004000] pid_max: default: 32768 minimum: 301\r\n[    0.004000] Security Framework initialized\r\n[    0.004000] SELinux:  Initializing.\r\n[    0.004000] Dentry cache hash table entries: 32768 (order: 6, 262144 bytes)\r\n[    0.004000] Inode-cache hash table entries: 16384 (order: 5, 131072 bytes)\r\n[    0.004000] Mount-cache hash table entries: 512 (order: 0, 4096 bytes)\r\n[    0.004011] Mountpoint-cache hash table entries: 512 (order: 0, 4096 bytes)\r\n[    0.004860] Last level iTLB entries: 4KB 1024, 2MB 1024, 4MB 1024\r\n[    0.005346] Last level dTLB entries: 4KB 1024, 2MB 1024, 4MB 1024, 1GB 4\r\n[    0.005906] Spectre V2 : Mitigation: Full generic retpoline\r\n[    0.006355] Spectre V2 : Spectre v2 mitigation: Enabling Indirect Branch Prediction Barrier\r\n[    0.007016] Spectre V2 : Enabling Restricted Speculation for firmware calls\r\n[    0.007568] Speculative Store Bypass: Mitigation: Speculative Store Bypass disabled via prctl and seccomp\r\n[    0.017853] Freeing SMP alternatives memory: 28K\r\n[    0.019070] smpboot: Max logical packages: 1\r\n[    0.019423] Not enabling interrupt remapping due to skipped IO-APIC setup\r\n[    0.020057] smpboot: CPU0: Intel(R) Xeon(R) Processor @ 3.60GHz (family: 0x6, model: 0x3f, stepping: 0x2)\r\n[    0.020933] Performance Events: unsupported p6 CPU model 63 no PMU driver, software events only.\r\n[    0.021698] Hierarchical SRCU implementation.\r\n[    0.022321] smp: Bringing up secondary CPUs ...\r\n[    0.022693] smp: Brought up 1 node, 1 CPU\r\n[    0.023019] smpboot: Total of 1 processors activated (7183.36 BogoMIPS)\r\n[    0.023634] devtmpfs: initialized\r\n[    0.023949] x86/mm: Memory block size: 128MB\r\n[    0.024156] clocksource: jiffies: mask: 0xffffffff max_cycles: 0xffffffff, max_idle_ns: 7645041785100000 ns\r\n[    0.024931] futex hash table entries: 256 (order: 2, 16384 bytes)\r\n[    0.025584] NET: Registered protocol family 16\r\n[    0.026049] cpuidle: using governor ladder\r\n[    0.026388] cpuidle: using governor menu\r\n[    0.029318] HugeTLB registered 2.00 MiB page size, pre-allocated 0 pages\r\n[    0.030098] dmi: Firmware registration failed.\r\n[    0.030546] NetLabel: Initializing\r\n[    0.030851] NetLabel:  domain hash size = 128\r\n[    0.031228] NetLabel:  protocols = UNLABELED CIPSOv4 CALIPSO\r\n[    0.031697] NetLabel:  unlabeled traffic allowed by default\r\n[    0.032095] clocksource: Switched to clocksource kvm-clock\r\n[    0.032554] VFS: Disk quotas dquot_6.6.0\r\n[    0.032882] VFS: Dquot-cache hash table entries: 512 (order 0, 4096 bytes)\r\n[    0.035088] NET: Registered protocol family 2\r\n[    0.035555] TCP established hash table entries: 2048 (order: 2, 16384 bytes)\r\n[    0.036112] TCP bind hash table entries: 2048 (order: 3, 32768 bytes)\r\n[    0.036641] TCP: Hash tables configured (established 2048 bind 2048)\r\n[    0.037210] UDP hash table entries: 256 (order: 1, 8192 bytes)\r\n[    0.037697] UDP-Lite hash table entries: 256 (order: 1, 8192 bytes)\r\n[    0.038229] NET: Registered protocol family 1\r\n[    0.039226] virtio-mmio: Registering device virtio-mmio.0 at 0xd0000000-0xd0000fff, IRQ 5.\r\n[    0.039910] virtio-mmio: Registering device virtio-mmio.1 at 0xd0001000-0xd0001fff, IRQ 6.\r\n[    0.040681] virtio-mmio: Registering device virtio-mmio.2 at 0xd0002000-0xd0002fff, IRQ 7.\r\n[    0.041404] platform rtc_cmos: registered platform RTC device (no PNP device found)\r\n[    0.042325] Scanning for low memory corruption every 60 seconds\r\n[    0.042938] audit: initializing netlink subsys (disabled)\r\n[    0.043549] Initialise system trusted keyrings\r\n[    0.043944] Key type blacklist registered\r\n[    0.044418] audit: type=2000 audit(1550601303.232:1): state=initialized audit_enabled=0 res=1\r\n[    0.045135] workingset: timestamp_bits=36 max_order=16 bucket_order=0\r\n[    0.046558] squashfs: version 4.0 (2009/01/31) Phillip Lougher\r\n[    0.048747] Key type asymmetric registered\r\n[    0.049097] Asymmetric key parser 'x509' registered\r\n[    0.049539] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254)\r\n[    0.050192] io scheduler noop registered (default)\r\n[    0.050630] io scheduler cfq registered\r\n[    0.051040] virtio-mmio virtio-mmio.0: Failed to enable 64-bit or 32-bit DMA.  Trying to continue, but this might not work.\r\n[    0.052110] virtio-mmio virtio-mmio.1: Failed to enable 64-bit or 32-bit DMA.  Trying to continue, but this might not work.\r\n[    0.053060] virtio-mmio virtio-mmio.2: Failed to enable 64-bit or 32-bit DMA.  Trying to continue, but this might not work.\r\n[    0.054143] Serial: 8250/16550 driver, 1 ports, IRQ sharing disabled\r\n[    0.075870] serial8250: ttyS0 at I/O 0x3f8 (irq = 4, base_baud = 115200) is a U6_16550A\r\n[    0.077951] loop: module loaded\r\n[    0.078963] tun: Universal TUN/TAP device driver, 1.6\r\n[    0.079446] hidraw: raw HID events driver (C) Jiri Kosina\r\n[    0.079935] nf_conntrack version 0.5.0 (2048 buckets, 8192 max)\r\n[    0.080542] ip_tables: (C) 2000-2006 Netfilter Core Team\r\n[    0.081021] Initializing XFRM netlink socket\r\n[    0.081473] NET: Registered protocol family 10\r\n[    0.082197] Segment Routing with IPv6\r\n[    0.082507] NET: Registered protocol family 17\r\n[    0.082872] Bridge firewalling registered\r\n[    0.083421] NET: Registered protocol family 40\r\n2019-02-19T10:35:03.345723036 [anonymous-instance:ERROR:src/main.rs:49] Panic occurred: PanicInfo { payload: Any, message: Some(Failed to activate device: BadVhostActivate(VhostVsockSetCid(IoctlError(Os { code: 98, kind: AddrInUse, message: \"Address in use\" })))), location: Location { file: \"src/libcore/result.rs\", line: 1009, col: 5 } }\r\n2019-02-19T10:35:03.353877878 [anonymous-instance:ERROR:src/main.rs:53] stack backtrace:\r\n   0:           0x55df9d - backtrace::backtrace::trace::h669c73b43cac085a\r\n   1:           0x588288 - firecracker::main::{{closure}}::hd933f1dec0b02f46\r\n   2:           0x560e92 - std::panicking::rust_panic_with_hook::h28b9ce6fa7a5033b\r\n                        at src/libstd/panicking.rs:495\r\n   3:           0x560c1d - std::panicking::continue_panic_fmt::h4c221b9431554bc2\r\n                        at src/libstd/panicking.rs:398\r\n   4:           0x56e445 - rust_begin_unwind\r\n                        at src/libstd/panicking.rs:325\r\n   5:           0x5709db - core::panicking::panic_fmt::h4d67173bc68f6d5a\r\n                        at src/libcore/panicking.rs:95\r\n   6:           0x46c85d - core::result::unwrap_failed::h9e884a20ae090d0d\r\n   7:           0x477e78 - <devices::virtio::mmio::MmioDevice as devices::bus::BusDevice>::write::ha8412f125ebfd81d\r\n   8:           0x472897 - devices::bus::Bus::write::h5174aba9064356b2\r\n   9:           0x45b3f9 - std::sys_common::backtrace::__rust_begin_short_backtrace::hd185ab1a6224be29\r\n  10:           0x458180 - <F as alloc::boxed::FnBox<A>>::call_box::hf908fa6d54f73f34\r\n  11:           0x56f004 - <alloc::boxed::Box<(dyn alloc::boxed::FnBox<A, Out * Remounting devtmpfs on /dev\r\n<br>\r\nWelcome to Alpine Linux 3.8\r\nKernel 4.14.55-84.37.amzn2.x86_64 on an x86_64 (ttyS0)\r\n</pre>\r\n</details> Made obsolete by #650. @raduweiss this is not directly related to vsock. This looks like a bug in our VMM loop that was discovered through a vsock failure. We still need to fix it.  I tried signing up for firecracker slack channel. The invitation email does not include the workspace URL. This is particularly true if the registered user is already subscribed to it. \r\n\r\nHere is a image capture from the email:\r\n\r\n<img width=\"631\" alt=\"screen shot 2019-02-15 at 2 47 51 pm\" src=\"https://user-images.githubusercontent.com/113947/52889099-545d3b00-3133-11e9-934d-cb30444967fd.png\">\r\n  `git grep too_many_arguments` for affected code blocks.\r\nWe can group arguments to fix this.\r\n\r\nRef: #922 \r\nhttps://rust-lang.github.io/rust-clippy/master/#too_many_arguments  At the moment, Firecracker is configured by sending API requests via a `AF_LOCAL` socket that Firecracker creates. This means that a user of Firecracker has to:\r\n\r\n- start Firecracker\r\n- poll some directory to figure out when the API endpoint appears\r\n- send multiple requests to configure a VM\r\n\r\nThis is unfortunate, because it requires quite a bit of code and a lot of synchronous and stateful interaction just to get a basic VM going. As an alternative, I would propose handing in the static configuration of a VM (vCPU configuration, disks, network devices, ...) as a JSON file that is provided to Firecracker when it is started (via a file or via stdin or if it's small via the command line). Firecracker then requires no additional interaction from starting the process to running guest code.\r\n\r\nThis relates to #343. Or to put it differently:\r\n\r\n\u201cSimple things should be simple, complex things should be possible.\u201d \u2015 Alan Kay \r\n I like the idea of using a JSON file as its format can be largely the same as the REST API. I understand why the REST API is there, but for development it seems that everyone has some scripts around to start firecracker with curl invocations. I probably have three variations. > I understand why the REST API is there\r\n\r\nI would be really interested in the rationale for why the initial VM configuration is designed this way. From my current understanding, I think this adds lots of complexity on both the user and Firecracker's side of things. I did some crude measurements and from starting firecracker to actually running the VM (i.e. getting a response to the InstanceStart request), it takes more than 30ms. 2ms are waiting for the API socket to appear and the rest is for the 5 requests via the `AF_LOCAL` socket.  I'd assume that most of this would go away when just using a config file. Hi, \r\n\r\nI have just submitted an RFC pull request that provides a rough proposal implementation that works. I have experimented with it a bit and on my 5-years old MacBook I am able to start and complete new VM within 20ms. However for some reason exiting new executable process takes additional 30-40ms. Please see output of strace:\r\n\r\n```\r\n2019-05-30T09:37:08.955724737 [anonymous-instance:ERROR:vmm/src/lib.rs:2209] init_logger() failed!\r\n2019-05-30T09:37:08.955781053 [anonymous-instance:INFO:vmm/src/lib.rs:1388] VMM received instance start command\r\n2019-05-30T09:37:08.955887905 [anonymous-instance:INFO:vmm/src/vstate.rs:140] Guest memory starts at 7fc083b8f000\r\nOSv v0.53.0-29-ge37d8edb\r\n2019-05-30T09:37:08.970544264 [anonymous-instance:INFO:vmm/src/lib.rs:2051] Guest-boot-time =  14725 us 14 ms,  13236 CPU us 13 CPU ms\r\nBooted up in 7.49 ms\r\nHello from C code\r\n2019-05-30T09:37:08.973855390 [anonymous-instance:INFO:vmm/src/lib.rs:1471] Vmm is stopping.\r\n2019-05-30T09:37:08.974020041 [anonymous-instance:ERROR:vmm/src/lib.rs:1488] Failed to log metrics while stopping: Logger was not initialized.\r\n2019-05-30T09:37:08.974056780 [anonymous-instance:INFO:vmm/src/lib.rs:1493] Vmm is REALLY about to stop.\r\nINFO, sa_restorer=0x53fc77}, NULL, 8) = 0\r\n09:37:08.951057 rt_sigaction(SIGBUS, {sa_handler=0x517460, sa_mask=[], sa_flags=SA_RESTORER|SA_ONSTACK|SA_SIGINFO, sa_restorer=0x53fc77}, NULL, 8) = 0\r\n09:37:08.951109 sigaltstack(NULL, {ss_sp=NULL, ss_flags=SS_DISABLE, ss_size=0}) = 0\r\n09:37:08.951161 mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fc087b90000\r\n09:37:08.951213 sigaltstack({ss_sp=0x7fc087b90000, ss_flags=0, ss_size=8192}, NULL) = 0\r\n09:37:08.951263 brk(NULL)               = 0xa02000\r\n09:37:08.951310 brk(0xa03000)           = 0xa03000\r\n09:37:08.951421 open(\"/etc/localtime\", O_RDONLY|O_NONBLOCK|O_CLOEXEC) = 3\r\n09:37:08.951491 fstat(3, {st_mode=S_IFREG|0644, st_size=3536, ...}) = 0\r\n09:37:08.951549 mmap(NULL, 3536, PROT_READ, MAP_SHARED, 3, 0) = 0x7fc087b8f000\r\n09:37:08.951602 close(3)                = 0\r\n09:37:08.951716 write(2, \"2019-05-30T09:37:08.951409599 [a\"..., 972019-05-30T09:37:08.951409599 [anonymous-instance:ERROR:src/bin/firecracker_cmd.rs:41] Main START) = 97\r\n09:37:08.951791 write(2, \"\\n\", 1\r\n)       = 1\r\n09:37:08.951851 rt_sigaction(SIGSYS, {sa_handler=0x424000, sa_mask=~[RTMIN RT_1 RT_2], sa_flags=SA_RESTORER|SA_SIGINFO, sa_restorer=0x53fc77}, NULL, 8) = 0\r\n09:37:08.951908 rt_sigaction(SIGBUS, {sa_handler=0x424310, sa_mask=~[RTMIN RT_1 RT_2], sa_flags=SA_RESTORER|SA_SIGINFO, sa_restorer=0x53fc77}, NULL, 8) = 0\r\n09:37:08.951963 rt_sigaction(SIGSEGV, {sa_handler=0x424310, sa_mask=~[RTMIN RT_1 RT_2], sa_flags=SA_RESTORER|SA_SIGINFO, sa_restorer=0x53fc77}, NULL, 8) = 0\r\n09:37:08.952023 brk(0xa04000)           = 0xa04000\r\n09:37:08.952090 getrandom(\"\\xfa\\x84\\x22\\x4b\\xb2\\xfc\\x62\\x72\\x79\\x0f\\xe1\\x02\\x2c\\xcb\\x20\\x57\", 16, GRND_NONBLOCK) = 16\r\n09:37:08.952334 brk(0xa05000)           = 0xa05000\r\n09:37:08.952533 eventfd2(0, EFD_NONBLOCK) = 3\r\n09:37:08.952646 epoll_create1(EPOLL_CLOEXEC) = 4\r\n09:37:08.952727 epoll_ctl(4, EPOLL_CTL_ADD, 3, {EPOLLIN, {u32=1, u64=1}}) = 0\r\n09:37:08.952808 timerfd_create(CLOCK_MONOTONIC, TFD_CLOEXEC|TFD_NONBLOCK) = 5\r\n09:37:08.952871 epoll_ctl(4, EPOLL_CTL_ADD, 5, {EPOLLIN, {u32=2, u64=2}}) = 0\r\n09:37:08.952936 open(\"/dev/kvm\", O_RDWR|O_CLOEXEC) = 6\r\n09:37:08.953016 fcntl(6, F_SETFD, FD_CLOEXEC) = 0\r\n09:37:08.953074 ioctl(6, KVM_GET_API_VERSION, 0) = 12\r\n09:37:08.953132 ioctl(6, KVM_CHECK_EXTENSION, KVM_CAP_IRQCHIP) = 1\r\n09:37:08.953192 ioctl(6, KVM_CHECK_EXTENSION, KVM_CAP_IOEVENTFD) = 1\r\n09:37:08.953249 ioctl(6, KVM_CHECK_EXTENSION, KVM_CAP_IRQFD) = 1\r\n09:37:08.953304 ioctl(6, KVM_CHECK_EXTENSION, KVM_CAP_SET_TSS_ADDR) = 1\r\n09:37:08.953359 ioctl(6, KVM_CHECK_EXTENSION, KVM_CAP_USER_MEMORY) = 1\r\n09:37:08.953414 ioctl(6, KVM_CHECK_EXTENSION, KVM_CAP_NR_MEMSLOTS) = 509\r\n09:37:08.953470 ioctl(6, KVM_CREATE_VM, 0) = 7\r\n09:37:08.954319 ioctl(6, KVM_GET_VCPU_MMAP_SIZE, 0) = 12288\r\n09:37:08.954429 brk(0xa06000)           = 0xa06000\r\n09:37:08.954528 ioctl(6, KVM_GET_SUPPORTED_CPUID, {nent=34, entries=[...]}) = 0\r\n09:37:08.954690 eventfd2(0, EFD_NONBLOCK) = 8\r\n09:37:08.954754 eventfd2(0, EFD_NONBLOCK) = 9\r\n09:37:08.954812 eventfd2(0, EFD_NONBLOCK) = 10\r\n09:37:08.954871 dup(8)                  = 11\r\n09:37:08.954930 eventfd2(0, EFD_NONBLOCK) = 12\r\n09:37:08.954987 dup(10)                 = 13\r\n09:37:08.955043 brk(0xa09000)           = 0xa09000\r\n09:37:08.955118 open(\"/home/wkozaczuk/projects/osv/build/release/loader-stripped.elf\", O_RDONLY|O_CLOEXEC) = 14\r\n09:37:08.955214 fcntl(14, F_SETFD, FD_CLOEXEC) = 0\r\n09:37:08.955277 fcntl(14, F_GETFD)      = 0x1 (flags FD_CLOEXEC)\r\n09:37:08.955339 brk(0xa1a000)           = 0xa1a000\r\n09:37:08.955421 stat(\"/home/wkozaczuk/projects/osv/build/release/usr.raw\", {st_mode=S_IFREG|0644, st_size=6457344, ...}) = 0\r\n09:37:08.955508 open(\"/tmp/fc.log\", O_RDWR|O_NONBLOCK|O_CLOEXEC) = -1 ENOENT (No such file or directory)\r\n09:37:08.955740 write(1, \"2019-05-30T09:37:08.955724737 [a\"..., 99) = 99\r\n09:37:08.955793 write(1, \"2019-05-30T09:37:08.955781053 [a\"..., 112) = 112\r\n09:37:08.955824 clock_gettime(CLOCK_PROCESS_CPUTIME_ID, {tv_sec=0, tv_nsec=3034748}) = 0\r\n09:37:08.955853 mmap(NULL, 67108864, PROT_READ|PROT_WRITE, MAP_SHARED|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fc083b8f000\r\n09:37:08.955899 write(1, \"2019-05-30T09:37:08.955887905 [a\"..., 114) = 114\r\n09:37:08.955941 ioctl(7, KVM_SET_USER_MEMORY_REGION, {slot=0, flags=0, guest_phys_addr=0, memory_size=67108864, userspace_addr=0x7fc083b8f000}) = 0\r\n09:37:08.956024 ioctl(7, KVM_SET_TSS_ADDR, 0xfffbd000) = 0\r\n09:37:08.956062 ioctl(7, KVM_CREATE_IRQCHIP, 0) = 0\r\n09:37:08.956116 ioctl(7, KVM_CREATE_PIT2, 0x7ffcefc95670) = 0\r\n09:37:08.956220 open(\"/home/wkozaczuk/projects/osv/build/release/usr.raw\", O_RDWR|O_CLOEXEC) = 15\r\n09:37:08.956267 fcntl(15, F_SETFD, FD_CLOEXEC) = 0\r\n09:37:08.956307 lseek(15, 0, SEEK_END)  = 6457344\r\n09:37:08.956342 eventfd2(0, EFD_NONBLOCK) = 16\r\n09:37:08.956376 eventfd2(0, EFD_NONBLOCK) = 17\r\n09:37:08.956412 ioctl(7, KVM_IOEVENTFD, 0x7ffcefc94fc0) = 0\r\n09:37:08.956451 ioctl(7, KVM_IRQFD, 0x7ffcefc95040) = 0\r\n09:37:08.956503 dup(9)                  = 18\r\n09:37:08.956716 dup(8)                  = 19\r\n09:37:08.956775 dup(9)                  = 20\r\n09:37:08.956854 ioctl(0, TIOCGWINSZ, {ws_row=35, ws_col=110, ws_xpixel=0, ws_ypixel=0}) = 0\r\n09:37:08.957107 ioctl(0, TCGETS, {B38400 opost isig icanon echo ...}) = 0\r\n09:37:08.957172 ioctl(0, SNDCTL_TMR_START or TCSETS, {B38400 opost -isig -icanon -echo ...}) = 0\r\n09:37:08.957213 ioctl(7, KVM_IRQFD, 0x7ffcefc95670) = 0\r\n09:37:08.957268 ioctl(7, KVM_IRQFD, 0x7ffcefc95670) = 0\r\n09:37:08.957318 ioctl(7, KVM_IRQFD, 0x7ffcefc95670) = 0\r\n09:37:08.957343 lseek(14, 0, SEEK_SET)  = 0\r\n09:37:08.957365 read(14, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\2\\0>\\0\\1\\0\\0\\0*\\241;\\0\\0\\0\\0\\0\"..., 64) = 64\r\n09:37:08.957394 lseek(14, 64, SEEK_SET) = 64\r\n09:37:08.957418 read(14, \"\\1\\0\\0\\0\\7\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0 \\0\\0\\0\\0\\0\\0\\0 \\0\\0\\0\\0\\0\"..., 280) = 280\r\n09:37:08.957441 lseek(14, 0, SEEK_SET)  = 0\r\n09:37:08.957463 read(14, \"\\177ELF\\2\\1\\1\\3\\0\\0\\0\\0\\0\\0\\0\\0\\2\\0>\\0\\1\\0\\0\\0*\\241;\\0\\0\\0\\0\\0\"..., 6967428) = 6967428\r\n09:37:08.961384 lseek(14, 6967424, SEEK_SET) = 6967424\r\n09:37:08.961430 read(14, \"\\1\\0\\0\\0\", 4) = 4\r\n09:37:08.961472 ioctl(7, KVM_CREATE_VCPU, 0) = 21\r\n09:37:08.961833 mmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_SHARED, 21, 0) = 0x7fc083b8b000\r\n09:37:08.961874 ioctl(21, KVM_SET_CPUID2, {nent=34, entries=[...]}) = 0\r\n09:37:08.961907 ioctl(21, KVM_SET_MSRS, 0xa19200) = 10\r\n09:37:08.961933 ioctl(21, KVM_SET_REGS, {rax=0, ..., rsp=0x8ff0, rbp=0x8ff0, ..., rip=0x3ba12a, rflags=0x2}) = 0\r\n09:37:08.961960 ioctl(21, KVM_SET_FPU, 0x7ffcefc95670) = 0\r\n9:37:08.961983 ioctl(21, KVM_GET_SREGS, {cs={base=0xffff0000, limit=65535, selector=61440, type=11, present=1, dpl=0, db=0, s=1, l=0, g=0, avl=0}, ...}) = 0\r\n09:37:08.962033 ioctl(21, KVM_SET_SREGS, {cs={base=0, limit=1048575, selector=8, type=11, present=1, dpl=0, db=0, s=1, l=1, g=1, avl=0}, ...}) = 0\r\n09:37:08.962067 ioctl(21, KVM_GET_LAPIC, 0x7ffcefc95670) = 0\r\n09:37:08.962097 ioctl(21, KVM_SET_LAPIC, 0x7ffcefc96670) = 0\r\n09:37:08.962132 dup(12)                 = 22\r\n09:37:08.962155 epoll_ctl(4, EPOLL_CTL_ADD, 22, {EPOLLIN, {u32=6, u64=6}}) = 0\r\n09:37:08.962181 epoll_ctl(4, EPOLL_CTL_ADD, 0, {EPOLLIN, {u32=0, u64=0}}) = 0\r\n09:37:08.962207 dup(12)                 = 23\r\n09:37:08.962236 rt_sigprocmask(SIG_UNBLOCK, [RT_1 RT_2], NULL, 8) = 0\r\n09:37:08.962261 mmap(NULL, 2105344, PROT_NONE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fc083989000\r\n09:37:08.962285 mprotect(0x7fc08398a000, 2101248, PROT_READ|PROT_WRITE) = 0\r\n09:37:08.962328 clone(child_stack=0x7fc083b8a9d8, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID|0x400000, parent_tidptr=0x7fc083b8ab38, tls=0x7fc083b8ab00, child_tidptr=0x7fc083b8ab40) = 6160\r\n09:37:08.962464 brk(0xa1b000)           = 0xa1b000\r\n09:37:08.962499 futex(0x7773a0, FUTEX_WAKE_PRIVATE, 1) = 1\r\n09:37:08.962536 futex(0x7773a0, FUTEX_WAIT_PRIVATE, 1, NULL) = -1 EAGAIN (Resource temporarily unavailable)\r\n09:37:08.962568 brk(0xa1e000)           = 0xa1e000\r\n09:37:08.962596 futex(0x7773a0, FUTEX_WAKE_PRIVATE, 1) = 1\r\n09:37:08.962718 prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) = 0\r\n09:37:08.962750 prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, {len=393, filter=0xa1ddc0}) = 0\r\n09:37:08.962926 futex(0x7fc083b8a574, FUTEX_WAKE_PRIVATE, 1) = 1\r\n09:37:08.962955 futex(0xa19124, FUTEX_WAKE_PRIVATE, 1) = 1\r\n09:37:08.962985 timerfd_settime(5, 0, {it_interval={tv_sec=60, tv_nsec=0}, it_value={tv_sec=60, tv_nsec=0}}, {it_interval={tv_sec=0, tv_nsec=0}, it_value={tv_sec=0, tv_nsec=0}}) = 0\r\n09:37:08.963025 epoll_pwait(4, [{EPOLLIN, {u32=3, u64=3}}], 100, -1, NULL, 8) = 1\r\n09:37:08.969749 read(16, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.969801 lseek(15, 0, SEEK_SET)  = 0\r\n09:37:08.969834 read(15, \"\\352^|\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\177\\0\\20\\0@\\0\\0\\0\\0\\200\\200\\0\\0\\0\\0\\0\"..., 512) = 512\r\n09:37:08.969875 write(24, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.969907 epoll_pwait(4, [{EPOLLIN, {u32=3, u64=3}}], 100, -1, NULL, 8) = 1\r\n09:37:08.970058 read(16, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.970085 lseek(15, 6291456, SEEK_SET) = 6291456\r\n09:37:08.970109 read(15, \"\\255\\276\\255\\336\\0\\0\\0\\0\\1\\0\\0\\0\\0\\0\\0\\0\\0\\2\\0\\0\\0\\0\\0\\0B\\1\\0\\0\\0\\0\\0\\0\"..., 512) = 512\r\n09:37:08.970136 write(24, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.970162 epoll_pwait(4, [{EPOLLIN, {u32=3, u64=3}}], 100, -1, NULL, 8) = 1\r\n09:37:08.970205 read(16, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.970232 lseek(15, 6456320, SEEK_SET) = 6456320\r\n09:37:08.970256 read(15, \"\\7\\0\\0\\0\\0\\0\\0\\0\\6\\0mnttab\\10\\0\\0\\0\\0\\0\\0\\0\\5\\0fstab\\t\"..., 1024) = 1024\r\n09:37:08.970282 write(24, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.970308 epoll_pwait(4, [{EPOLLIN, {u32=3, u64=3}}], 100, -1, NULL, 8) = 1\r\n09:37:08.970364 read(16, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.970391 lseek(15, 6305792, SEEK_SET) = 6305792\r\n09:37:08.970415 read(15, \"/dev/vblk0.1 /          rofs    \"..., 512) = 512\r\n09:37:08.970442 write(24, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.970468 epoll_pwait(4, [{EPOLLIN, {u32=3, u64=3}}], 100, -1, NULL, 8) = 1\r\n09:37:08.970900 read(16, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.970957 lseek(15, 6291968, SEEK_SET) = 6291968\r\n09:37:08.970990 read(15, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0@\\20\\0\\0\\0\\0\\0\\0\"..., 13824) = 13824\r\n09:37:08.971060 write(24, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.971107 epoll_pwait(4, [{EPOLLIN, {u32=3, u64=3}}], 100, -1, NULL, 8) = 1\r\n09:37:08.971200 read(16, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.971234 lseek(15, 6425088, SEEK_SET) = 6425088\r\n09:37:08.971257 read(15, \"\\177ELF\\2\\1\\1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\3\\0>\\0\\1\\0\\0\\0P\\20\\0\\0\\0\\0\\0\\0\"..., 16896) = 16896\r\n09:37:08.971321 write(24, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.971353 epoll_pwait(4, [{EPOLLIN, {u32=6, u64=6}}], 100, -1, NULL, 8) = 1\r\n09:37:08.973828 read(22, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n09:37:08.973872 write(1, \"2019-05-30T09:37:08.973855390 [a\"..., 93) = 93\r\n09:37:08.973906 epoll_ctl(4, EPOLL_CTL_DEL, 0, 0x7ffcefc99430) = 0\r\n09:37:08.973934 ioctl(0, TIOCGWINSZ, {ws_row=35, ws_col=110, ws_xpixel=0, ws_ypixel=0}) = 0\r\n09:37:08.973964 ioctl(0, TCGETS, {B38400 opost -isig -icanon -echo ...}) = 0\r\n09:37:08.973994 ioctl(0, SNDCTL_TMR_START or TCSETS, {B38400 opost isig icanon echo ...}) = 0\r\n09:37:08.974031 write(1, \"2019-05-30T09:37:08.974020041 [a\"..., 143) = 143\r\n09:37:08.974079 write(1, \"2019-05-30T09:37:08.974056780 [a\"..., 105) = 105\r\n09:37:08.974119 exit_group(0)           = ?\r\n09:37:09.011016 +++ exited with 0 +++\r\n```\r\n\r\nAs you can see it started at 09:37:08.951057 and exit_group() was called at 09:37:08.974119 (23 milliseconds in this case) but per last line ```09:37:09.011016 +++ exited with 0 +++``` the process did not die for another 35 milliseconds. \r\n\r\nWhat could be a cause of it? As far as I understand exit_group() terminates all threads and in this case there is one vCPU thread apart from the main one. But I do not understand why it would take so long for this thread to terminate. Any ideas? Where is a flaw in my implementation? @wkozaczuk Very nice! One comment: strace is usually not a good way to measure time, because the system call tracing it uses is very inefficient. So likely the performance is better than what you measured above! For measurements like these, it's better to have the application itself generate timestamps and log them.\r\n\r\n> the process did not die for another 35 milliseconds. What could be a cause of it? \r\n\r\nWild guess: Maybe it only counts as fully destroyed once the parent process fetches the exit status via `wait()`. Since my last comments I have made more improvements to my \"command-line\" prototype of firecracker with aim to improve startup and shutdown time. The shutdown part is really where I think the crux of the problem lies. I ended up creating another branch (for those interested - https://github.com/wkozaczuk/firecracker/tree/sockless_optimize, please see the diff between this and older sockless branch). I mostly followed @blitz's advice to make vcpu thread (child thread) end orderly and main parent thread join it instead of calling exit() on guest shutdown request. \r\n\r\nIn general I managed to shave off around 10ms but there is still 20ms wasted somehow after the process terminates as reported per time.\r\n\r\nHere are the average times from the 25-times run of firecracker launching simple OSv hello world example with single vCPU back-to-back:\r\n```\r\n# 25 timestamp from the start to the point main thread joins with vCPU thread after guest exits\r\n2019-06-17T13:49:12.640563968 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  21322 us 21 ms,  21223 CPU us 21 CPU ms\r\n2019-06-17T13:49:12.682214105 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  18836 us 18 ms,  18594 CPU us 18 CPU ms\r\n2019-06-17T13:49:12.730072139 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  18434 us 18 ms,  18361 CPU us 18 CPU ms\r\n2019-06-17T13:49:12.775873532 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  20468 us 20 ms,  20379 CPU us 20 CPU ms\r\n2019-06-17T13:49:12.820857486 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  21327 us 21 ms,  21293 CPU us 21 CPU ms\r\n2019-06-17T13:49:12.866860434 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  23101 us 23 ms,  22889 CPU us 22 CPU ms\r\n2019-06-17T13:49:12.909018552 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  17343 us 17 ms,  17037 CPU us 17 CPU ms\r\n2019-06-17T13:49:12.949402089 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  18104 us 18 ms,  17914 CPU us 17 CPU ms\r\n2019-06-17T13:49:12.994497962 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  19124 us 19 ms,  18996 CPU us 18 CPU ms\r\n2019-06-17T13:49:13.047007523 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  18947 us 18 ms,  19130 CPU us 19 CPU ms\r\n2019-06-17T13:49:13.092817255 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  17294 us 17 ms,  17246 CPU us 17 CPU ms\r\n2019-06-17T13:49:13.135817648 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  16739 us 16 ms,  16446 CPU us 16 CPU ms\r\n2019-06-17T13:49:13.177466580 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  17724 us 17 ms,  17634 CPU us 17 CPU ms\r\n2019-06-17T13:49:13.225039463 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  17527 us 17 ms,  17728 CPU us 17 CPU ms\r\n2019-06-17T13:49:13.266592089 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  19303 us 19 ms,  19168 CPU us 19 CPU ms\r\n2019-06-17T13:49:13.318211946 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  23030 us 23 ms,  23048 CPU us 23 CPU ms\r\n2019-06-17T13:49:13.363688065 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  20529 us 20 ms,  20286 CPU us 20 CPU ms\r\n2019-06-17T13:49:13.406490452 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  19238 us 19 ms,  19122 CPU us 19 CPU ms\r\n2019-06-17T13:49:13.457479297 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  17869 us 17 ms,  17884 CPU us 17 CPU ms\r\n2019-06-17T13:49:13.502832220 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  19518 us 19 ms,  19333 CPU us 19 CPU ms\r\n2019-06-17T13:49:13.557177521 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  21434 us 21 ms,  21575 CPU us 21 CPU ms\r\n2019-06-17T13:49:13.597015436 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  17657 us 17 ms,  17285 CPU us 17 CPU ms\r\n2019-06-17T13:49:13.649213336 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  21849 us 21 ms,  21942 CPU us 21 CPU ms\r\n2019-06-17T13:49:13.696826433 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  21320 us 21 ms,  21375 CPU us 21 CPU ms\r\n#  \r\n# Complete-time average = 18.28 ms (total 457 ms)\r\n#\r\n# 25 timestamp from the start to the last statement in the main thread before the process gracefully terminates\r\n2019-06-17T13:49:12.648992634 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  30299 us 30 ms\r\n2019-06-17T13:49:12.692673905 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  29789 us 29 ms\r\n2019-06-17T13:49:12.740738937 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  29698 us 29 ms\r\n2019-06-17T13:49:12.784871116 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  30045 us 30 ms\r\n2019-06-17T13:49:12.828920584 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  29935 us 29 ms\r\n2019-06-17T13:49:12.877089259 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  33938 us 33 ms\r\n2019-06-17T13:49:12.916101376 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  25037 us 25 ms\r\n2019-06-17T13:49:12.960673183 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  29906 us 29 ms\r\n2019-06-17T13:49:13.009732058 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  34972 us 34 ms\r\n2019-06-17T13:49:13.056692283 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  29389 us 29 ms\r\n2019-06-17T13:49:13.100850529 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  25972 us 25 ms\r\n2019-06-17T13:49:13.144763049 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  26165 us 26 ms\r\n2019-06-17T13:49:13.185151758 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  26083 us 26 ms\r\n2019-06-17T13:49:13.232242773 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  25286 us 25 ms\r\n2019-06-17T13:49:13.276543838 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  29784 us 29 ms\r\n2019-06-17T13:49:13.328460388 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  33780 us 33 ms\r\n2019-06-17T13:49:13.372791351 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  30171 us 30 ms\r\n2019-06-17T13:49:13.417434986 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  30694 us 30 ms\r\n2019-06-17T13:49:13.468387611 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  29453 us 29 ms\r\n2019-06-17T13:49:13.513398517 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  30631 us 30 ms\r\n2019-06-17T13:49:13.564446818 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  29488 us 29 ms\r\n2019-06-17T13:49:13.609289232 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  30427 us 30 ms\r\n2019-06-17T13:49:13.657701352 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  30879 us 30 ms\r\n2019-06-17T13:49:13.704409707 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  29505 us 29 ms\r\n#  \r\n# Main-complete-time average = 27.92 ms (total 692 ms)\r\n#\r\nreal\t0m1.153s\r\nuser\t0m0.140s\r\nsys\t0m0.489s\r\n# The average run per time is 46.12 ms\r\n```  \r\n\r\nAs you can see on average it took:\r\n* 46.12 ms to execute firecracker_cmd per time\r\n* 27.92 ms to execute firecracker_cmd main thread\r\n* 18.28 ms from start until vCPU thread termination\r\n* 14.68 ms from start until guest booted (not part of the logs shown above)\r\n* 8.11 ms for OSv to boot (reported each time by OSv, also not part of the logs shown above) \r\n\r\nSo there are 2 questions outstanding:\r\n1. What is the time spent on between the point vCPU loop terminates and the point the main thread completes?\r\n2. What is the time spent on between the point the main thread completes and the point Linux considers the process really terminated per time utility? \r\n\r\nRegarding 1) it might be useful to look at this fragment of strace output:\r\n```\r\n.....\r\n2019-06-17T14:43:16.884706949 [anonymous-instance:ERROR:vmm/src/vstate.rs:441] run_emulation() loop broke!\r\n14:43:16.884730 read(22, \"\\1\\0\\0\\0\\0\\0\\0\\0\", 8) = 8\r\n14:43:16.884775 write(1, \"2019-06-17T14:43:16.884758950 [a\"..., 1062019-06-17T14:43:16.884758950 [anonymous-instance:ERROR:vmm/src/lib.rs:1559] Stopping from EpollDispatch!\r\n) = 106\r\n14:43:16.884829 write(1, \"2019-06-17T14:43:16.884807772 [a\"..., 1162019-06-17T14:43:16.884807772 [anonymous-instance:ERROR:vmm/src/lib.rs:2258] Gracefully terminated VMM control loop\r\n) = 116\r\n14:43:16.884913 write(1, \"2019-06-17T14:43:16.884897515 [a\"..., 932019-06-17T14:43:16.884897515 [anonymous-instance:INFO:vmm/src/lib.rs:1491] Vmm is stopping.\r\n) = 93\r\n14:43:16.884948 epoll_ctl(4, EPOLL_CTL_DEL, 0, 0x7ffd3ff6b1c0) = 0\r\n14:43:16.884980 ioctl(0, TIOCGWINSZ, {ws_row=46, ws_col=225, ws_xpixel=1575, ws_ypixel=736}) = 0\r\n14:43:16.885009 ioctl(0, TCGETS, {B9600 opost -isig -icanon -echo ...}) = 0\r\n14:43:16.885037 ioctl(0, SNDCTL_TMR_START or TCSETS, {B9600 opost isig icanon echo ...}) = 0\r\n14:43:16.885093 clock_gettime(CLOCK_PROCESS_CPUTIME_ID, {tv_sec=0, tv_nsec=18464886}) = 0\r\n14:43:16.885133 write(1, \"2019-06-17T14:43:16.885120335 [a\"..., 1332019-06-17T14:43:16.885120335 [anonymous-instance:INFO:vmm/src/lib.rs:2092] Complete-time =  17088 us 17 ms,  15458 CPU us 15 CPU ms\r\n) = 133\r\n14:43:16.885179 munmap(0x7f98e4d20000, 2105344) = 0\r\n14:43:16.885234 write(1, \"2019-06-17T14:43:16.885223404 [a\"..., 1142019-06-17T14:43:16.885223404 [anonymous-instance:INFO:vmm/src/lib.rs:1516] Vmm is REALLY about to stop .. again.\r\n) = 114\r\n14:43:16.885269 close(6)                = 0\r\n14:43:16.885302 close(14)               = 0\r\n14:43:16.885343 close(22)               = 0\r\n14:43:16.885368 close(7)                = 0\r\n14:43:16.893616 close(17)               = 0\r\n14:43:16.893658 close(20)               = 0\r\n14:43:16.893690 close(18)               = 0\r\n14:43:16.893720 close(19)               = 0\r\n14:43:16.893762 close(11)               = 0\r\n14:43:16.893795 close(12)               = 0\r\n14:43:16.893826 close(13)               = 0\r\n14:43:16.893857 close(8)                = 0\r\n14:43:16.893887 close(9)                = 0\r\n14:43:16.893950 close(10)               = 0\r\n14:43:16.893983 close(4)                = 0\r\n14:43:16.894034 munmap(0x7f98e4f26000, 67108864) = 0\r\n14:43:16.896906 close(15)               = 0\r\n14:43:16.896944 close(24)               = 0\r\n14:43:16.896977 close(16)               = 0\r\n14:43:16.897005 close(25)               = 0\r\n14:43:16.897036 close(3)                = 0\r\n14:43:16.897080 close(5)                = 0\r\n14:43:16.897150 write(1, \"2019-06-17T14:43:16.897106867 [a\"..., 1242019-06-17T14:43:16.897106867 [anonymous-instance:INFO:src/bin/firecracker_cmd.rs:216] Main-complete-time =  33134 us 33 ms\r\n) = 124\r\n14:43:16.897210 sigaltstack({ss_sp=NULL, ss_flags=SS_DISABLE, ss_size=8192}, NULL) = 0\r\n14:43:16.897259 munmap(0x7f98e8f27000, 8192) = 0\r\n14:43:16.897317 exit_group(0)           = ?\r\n14:43:16.914219 +++ exited with 0 +++\r\n\r\nreal\t0m0.059s\r\nuser\t0m0.004s\r\nsys\t0m0.032s\r\n```\r\n\r\nThese I think are \"new\" (comparing to the output I reported 2 weeks ago) system call that come of firecracker_cmd orderly closing all (?) file descriptors. I am new to Rust nor I understand firecracker code well, but I think it comes from one one of the drop() method (destructors) possibly triggered by destruction of the Vmm object? EpollContext? \r\nThe bottom line is that (at least in this example) it takes ~ 10 ms to close around 15 file descriptors (one of them for /dev/kvm ?).\r\n\r\nAs far as the 2) question goes I have no idea what happens there. There must be some other resources Linux needs to close when handling implicit exit(). Any other ideas of what these could be?\r\n\r\nSome wild guess - is it because of seccomp?\r\n A few weeks ago we had a design discussion about passing a configuration file instead of using API calls to configure the initial state of the microVM.\r\n\r\n## Passing the configuration\r\n\r\nFor passing the initial configuration we have a few options as follows:\r\n\r\n1. **Command line parameters**. At the moment we don't consider this to be the right way of implementing an alternative to the API server. When we first started Firecracker we used command line parameters for configuring resources such as network, boot source, drives and others. While the API server was under development we choose to keep both configuration options available. As time passed we had a few bugs due to the fact that the API server and the command line parameters were getting out of sync. As it was hard to maintain them both with only the API server being used in production, we decided to drop the command line parameters and today we still stand by this choice.  For prototyping with Firecracker, people can use [firectl](https://github.com/firecracker-microvm/firectl), a command line tool which allows you to configure and run microVMs without interacting with the API server.\r\n2. **Configuration file**. The configuration file should be in the JSON format so that it can be easily deserialized into existing VMM structures using serde. In the meeting we identified some disadvantages to using files. For the usecases where the files need to be created on the fly, it adds overhead for writing the files on the customer side. There will also be overhead on the Firecracker side when reading the configuration file.\r\n3. **Configuration via STDIN**. This is currently the preferred mechanism for providing the initial configuration because it removes the overhead of creating files. If Firecracker users want to use files instead of STDIN, this can be easily achieved by redirecting the file contents to STDIN. The configuration should be in JSON format and map to existing VMM structures.\r\n\r\n## Running Firecracker without the API\r\nRunning Firecracker without the API should be possible, but the default will still be having the API server. We have two options here:\r\n1. **Conditional compilation** (with Rust features) for compiling out the API server. This should be a default Firecracker feature that can be disable by using: ```cargo build --release --no-default-features```. The advantages of this solution are faster build time (as you don't need to download all the hyper and tokio dependencies) and smaller binary. It might make the code hard to read and add multiple cfgs if we have multiple usages of the `api_server`. I believe this isn't the case and this would be my favourite option. With this solution we don't need to pass a ```--no-api``` flag to Firecracker because we can use the cfg macro and the API code will be dropped hence not executed.\r\n2. **No changes**. We can compile the API server code, just not use it. We would also not initialize the API server (start a thread for it). The advantages/disadvantages are reversed from the conditional compilation option.\r\n\r\n## Some other requirements\r\n- Configuration via STDIN should be optional so that the change is backwards compatible.\r\n- Configuration via STDIN should be possible when running **with** the API server as well.\r\n\r\n## Deserializing the configuration\r\n\r\nFor deserializing the configuration my proposal would be to define a `VmmConfig` structure that derives Serde deserialize. The fields of this struct are [`vmm_config`](https://github.com/firecracker-microvm/firecracker/tree/master/vmm/src/vmm_config) structures which also should implement serde deserialize. For this to work, the Firecracker code should be refactored such that the `..Config` structures are static in the sense that they do not contain live objects like files, eventfds or other similar objects. We should also discuss about having separate API and VMM structures where API structures are static and use serde serialize/deserialize and the VMM structures can have live objects and probably shouldn't have the standard serialize/deserialize functionality derived from serde.\r\n\r\n```rust\r\nuse serde::Deserialize;\r\n\r\n#[derive(Deserialize)]\r\n#[serde(deny_unknown_fields)]\r\nstruct VmmConfig {\r\n    boot_source: BootSourceConfig,\r\n    block_devices: BlockDeviceConfigs,\r\n    network_devices: NetwordDeviceConfigs,\r\n    ...\r\n}\r\n```\r\nThe current configuration files do not derive Serde deserialize at the moment, so this also needs to be changed.\r\n\r\nCC: @firecracker-microvm/compute-capsule please let me know if you have any feedback/other comments.\r\n Hi! I like the **STDIN** configuration best. We can add a new parameter which represents that configuration data should be read from stdin. I guess we'll have to extend this over to the jailer as well.\r\n\r\nRegarding **Running Firecracker without the API** I'd go with the second option for now. It looks difficult to cleanly separate the API server from the `Vmm` struct via conditional compilation until we do some pretty significant refactoring.\r\n\r\nI like the bit about having separate API and VMM structures (at least where they wouldn't overlap perfectly), and it's something we should pursue. However, for the time being, is there anything wrong with using a composition of the current API structures? > Hi! I like the **STDIN** configuration best. We can add a new parameter which represents that configuration data should be read from stdin. I guess we'll have to extend this over to the jailer as well.\r\n> \r\n\r\nDo you mean that we should only read the configuration from stdin when that flag is present? Or that we should support both file and stdin? I don't want to have them both honestly as it complicates the code for no good reason. I think we should stick to one (either file or stdin).\r\n\r\n> Regarding **Running Firecracker without the API** I'd go with the second option for now. It looks difficult to cleanly separate the API server from the `Vmm` struct via conditional compilation until we do some pretty significant refactoring.\r\n> \r\n\r\nWhy do you say that? `vmm` does not depend on `api_server`.\r\n\r\n> I like the bit about having separate API and VMM structures (at least where they wouldn't overlap perfectly), and it's something we should pursue. However, for the time being, is there anything wrong with using a composition of the current API structures?\r\n\r\nI think the problem is adding more technical dept, which I would very much like to avoid. To workaround this issue I think we can prioritize the aforementioned refactoring and block this issue till that is done. @andreeaflorescu Thanks for the very nice write-up. It really helps.\r\n\r\nI am definitely in favor of \"Configuration via STDIN\" - most elegant and flexible. As far as \"Running Firecracker without API\", I am in favor of \"Conditional compilation\", mostly because of the smaller executable and fewer dependencies.\r\n\r\nAlso, it feels to me that somehow \"Passing the configuration\" and \"Running Firecracker without API\" deserve to be separate issues (though very related), no? \r\n\r\nAlso, I was wondering if the potential implementation should be part of a single PR or many smaller ones? If many, in what order/way we should divide it to allow for best coding and reviewing experience?  @wkozaczuk I agree with you and running Firecracker without the API should be a separate issue. We can create a few more issues related to this one and \"convert\" this one to a story (aka we can track the progress of all other issues in this one).\r\n\r\nIf we have multiple PRs is far more easier to review and the chance of getting them merged fast is higher. I will think about a split that actually makes sense. But before that we should decide if we want to include the refactoring related to separate structures for VMM and API. I am inclined to say yes as I am afraid that otherwise the code will be a bit spaghetti and parts of it will be thrown away later.\r\n\r\nCC: @firecracker-microvm/compute-capsule please take a look at the suggestions. Configuration via STDIN (using same structs/api as when configuring through unix-socket) is my preferred choice as well.\r\n\r\nRegarding the api-server when running with stdin input I am leaning towards option 2 of simply not initializing/starting the api thread. Conditional compilation brings in extra complexity on the testing side and less versatility for customers. I don't see the argument of smaller attack surface as particularly strong in this case.\r\n\r\nAs for separating resources structs into descriptor structs and functional structs, it would be an improvement, but I don't believe it necessary. Would be great if the person tackling this story would also tackle this particular topic, but I wouldn't make it a requirement. * API-less Firecracker: I don't find much value either in shrinking the binary size at the expense of `#[cfg]`s. In any case, if we have a solid use case for API-less Firecracker we should track that separately\r\n* `stdin` vs file: `stdin`. I'm thinking `./firecracker --stdin` (or something), to tell Firecracker that it needs to listen to `stdin`. Otherwise, why listen needlessly and try to parse incoming data as json\r\n* I'd like to have shared data structures between VMM and API (which is what mostly we have now anyway) It looks like we have an agreement regarding file vs stdin and we want to move forward with stdin. As this is not necessarily related to the other issues, I propose tracking them in separate issues and resolving them in separate PRs.\r\n\r\nFor this purpose I've opened two issues:\r\n- Running Firecracker with no API: https://github.com/firecracker-microvm/firecracker/issues/1165\r\n- Split structures into configuration structures that are exported via the VMM interface and internal VMM structures that should not be exported: https://github.com/firecracker-microvm/firecracker/issues/1167\r\n\r\nI think we should postpone the decision of using conditional compilation vs soft disable for now. Our API server is currently rather complex and brings in a lot of dependencies (last time I checked there were ~70 transient dependencies). It would be interesting to know how does the complexity of the api_server translates into memory and build time overhead. But, since we are trying to implement our custom api_server and thus removing hyper and tokio, I would say to take a decision after we start working on  #615. My concern about the STDIN variant is that parsing JSON out of a stream is generally error-prone: if the document is badly formatted you might not be able to tell easily (eg. missing `\"` or `}`).\r\n\r\nAlso, from a usability standpoint:\r\n* JSON is not very human-friendly\r\n* in case you want to pre-generate some configurations you need the parent process of firecracker to always open the config files, to pass the filedescript as the STDIN of firecracker, instead of just passing an argument.\r\n\r\nIs there are any reason not to support both files and STDIN? This shouldn't be very complex to implement. Hi everyone! In light of @petreeftime's comment, and thinking a bit more about the different implications of STDIN vs other ways of passing parameters, how about actually using a single command line parameter to pass the entire JSON content (for example `./firecracker --startup-config 'ACTUAL_JSON_BODY'`). It seems easy to support having the actual JSON config in a file with this approach as well.\r\n\r\nWe mentioned using command line parameters for configuration passing, but I think we were still reminiscing about the old way of having different parameters for different VM configuration options (such as vCPU number, memory size, etc.), and not simply using the value of a single parameter to hold the entire JSON config. Also, one problem of the STDIN approach that I totally forgot about initially is that the Firecracker process created by the jailer has STDIN bound to `/dev/null` whenever the `--daemonize` flag is present, and we'd have to go around that somehow.  - [x] Build specific tests pass\r\n- [x] Functional specific tests pass\r\n- [x] Performance specific tests pass\r\n- [x] Security specific tests pass\r\n- [x] Remove all aarch64 warnings\r\n- [x] Add clippy test for aarch64 specific regions\r\n- [x] Create dockerfile for x86_64 and aarch64\r\n- [x] Create docker image for x86_64 and aarch64\r\n- [x] Update our CI so that  it runs against aarch64 instances\r\n- [x] Add CI specific tests for aarch64 (if needed).\r\n- [x] Remove cross compilation related code This looks more like \"Adding integration tests for ARM\". We should probably also add an issue for updating our CI so that we can spawn ARM instances and run our integration tests there. What do you say?  Hi @dianpopa @andreeaflorescu,\r\n\r\nAre there any user manual to boot a microVM on arm64 machine. It seems that the provided manual is for x86 machine.\r\n\r\nRegards,\r\n\r\nHaibo hi! We do not yet have documentation for booting a microVM on arm64 machine even though firecracker now has support for that. I am currently working on PRs that fix issues #867 and #1066. Once those are merged, I will start working on setting up the CI, writing documentation and assess performance.  For the moment the ioctl for getting dirty pages used for firecracker is available only for x86 and x86_64. We need to implement the equivalent for arm64. See `get_and_reset_dirty_page_bitmap` function inside kvm/src/lib.rs Is there an ioctl on ARM supported by KVM that will give you the dirty pages? I failed to find something and I was considering disabling the LogDirtyPages functionality for ARM for now. Nope. The [KVM API](https://www.kernel.org/doc/Documentation/virtual/kvm/api.txt) marks the `KVM_GET_DIRTY_LOG` ioctl as x86 specific. There seems to have been [an attempt](http://lists.infradead.org/pipermail/linux-arm-kernel/2014-November/300463.html) to add ARM support but I can't find any evidence of it having been merged, we need to ask around. FYI I made the LogDirtyPages options available only on x86 in this PR: https://github.com/firecracker-microvm/firecracker/pull/948 Hi @dianpopa &@andreeaflorescu, KVM_GET_DIRTY_LOG api is not supported on arm64 platform, it's a feature currently specific to x86 architecture.  > Hi @dianpopa &@andreeaflorescu, KVM_GET_DIRTY_LOG api is not supported on arm64 platform, it's a feature currently specific to x86 architecture.\r\n\r\nIt is supported on all major architectures, x86, arm64, mips, powerpc, s390x. The Documentation is outdated. What am I missing ? @suzukikp you are right. We were looking at the documentation though so that's where the confusion was from I believe. Support for getting dirty pages on aarch64 was added in kvm-ioctls.  Since we are planning on removing the metric that relies on that capability, no more work is needed in Firecracker.  - [x] Add support for VIRTIO_BLK_T_FLUSH. Flush requests are currently:\r\n  - not advertised during feature negotiation (VIRTIO_BLK_F_FLUSH)\r\n  - incorrectly handled; i.e. the driver is (incorrectly) expected to pass a data descriptor, so the request fails with DescriptorChainTooShort, instead of Unsupported (see #857).\r\n- [x] Look into request parsing: currently, exactly three descriptors are expected with each request: a request \"header\" descriptor, a data descriptor, and a status descriptor; the virtio spec doesn't appear to force this exact layout on the driver (what if the driver splits the data across multiple descriptors?).  There are a couple of issues related to the state of Firecracker logging right now:\r\n- The jailer logs all of its messages to stdout/err, which is not really compatible with running daemonized. \r\n- We should encourage customers to make an explicit choice regarding the destination of logs/metrics, as opposed to having them off (or sent to `/dev/null`) by default.\r\nOne solution is to ensure the user specifies destinations for logs and metrics via Jailer parameters. These can be passed on to Firecracker either as file descriptors, or by name. This would benefit us a lot. For now, we're going to have to run this through a different process to redirect stdout and stderr where we want them. I've picked this up. I'm still getting it in the latest version\r\n\r\nFor a temporary fix, I used `--vmm-log-level=fatal` option with firectl  The bindgened files needed for doing x86_64 specific configuration (`bootparam.rs`, `mpspec.rs`, `msr_index.rs`) are autogenerated from committ `806276b7f07a39a1cc3f38bb1ef5c573d4594a38` of the linux kernel. That corresponds to 4.11. We should auto generate them from the 4.14 release. Make sure we also add `PartialEq` as a trait. When making this crate public, this issue will/should be solved.  If firecracker is passed a multiqueue tap device created using\r\n\r\n```\r\nip tuntap add name tap0 mode tap multi_queue\r\n```\r\n\r\nIt reports an error\r\n\r\n```\r\n[PUT /network-interfaces/{iface_id}][400] putGuestNetworkInterfaceByIdBadRequest  &{FaultMessage:Cannot open TAP device. Invalid name/permissions. CreateTap(\r\nOs { code: 22, kind: InvalidInput, message: Invalid argument })}\r\n```\r\n\r\nDoes firecracker not support multi-queue tap devices?\r\n /cc @nmeyerhans @egernst Hello, you are right, we do not currently support multi-queue TAP devices. We might at some point, because it's a relatively low hanging fruit, but there are no clear plans right now. Hey @alexandruag - pardon me if I'm missing; is it feasible to return an error here so it is clear?  In our case, we determined there's an error because we noticed firecracker was creating its own tap instead of utilizing ours.  Being more explicit may be helpful?\r\n On multi-queue tap devices, I've just read a bit of the docs to understand what they do. Now I'm wondering what the use case for them is. @egernst , what is Kata using it for? @raduweiss \r\n\r\n> On multi-queue tap devices, I've just read a bit of the docs to understand what they do. Now I'm wondering what the use case for them is. @egernst , what is Kata using it for?\r\n\r\nWe use multiqueue to achieve higher throughput. We scale up the number of queues based on the number of vCPUs till we reach the point of diminished returns. Inside Kata we enable multiple queues also on the interface.\r\n\r\nThis helps when guest is active on many connections at the same time, with traffic running between guests, guest to host, or guest to an external system. \r\n\r\n[This helps when guest is active on many connections at the same time, with traffic running between guests, guest to host, or guest to an external system. ](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_tuning_and_optimization_guide/sect-virtualization_tuning_optimization_guide-networking-techniques)\r\n > Hey @alexandruag - pardon me if I'm missing; is it feasible to return an error here so it is clear? In our case, we determined there's an error because we noticed firecracker was creating its own tap instead of utilizing ours. Being more explicit may be helpful?\r\n\r\nYea, providing friendlier, non-misleading error messages is definitely something we'll iterate through (PRs welcome :D). The part where Firecracker starts creating interfaces by itself when run with the appropriate capabilities is tricker to get rid of, due to how open/create works for TAP interfaces. We could check for the existence of the specified interface beforehand, but that's kinda awkward and adds overhead. Btw, why are you running Firecracker with elevated privileges? Vsock, I guess?\r\n\r\n > Yea, providing friendlier, non-misleading error messages is definitely something we'll iterate through (PRs welcome :D). The part where Firecracker starts creating interfaces by itself when run with the appropriate capabilities is tricker to get rid of, due to how open/create works for TAP interfaces. We could check for the existence of the specified interface beforehand, but that's kinda awkward and adds overhead. Btw, why are you running Firecracker with elevated privileges? Vsock, I guess?\r\n\r\n@alexandruag we pre-create the network interface and send it into firecracker. Yes we need vsock today as we need a method to setup a communication channel between the host and the agent we run within the VM. We are open to alternate mechanisms too. Currently we found the vsock is the one that is easiest for us to use with firecracker as kata already has support for the same. We also support virtio-serial, but firecracker currently does not have support for it.\r\n\r\n The current (experimental) `vsock` support makes use of `vhost`, and elevated privileges are required for the initial setup phase. The final `vsock` implementation will not be `vhost`-based, so you'll be able to run Firecracker as a regular process. We're also interested by this. For now we're just setting a bigger TX queue on our tap interfaces.  `firecracker` built from HEAD of master (commit `497b4fe358c5`) shows:\r\n```\r\n% ./firecracker --version\r\nfirecracker 0.11.0\r\n```\r\nThis is clearly a few commits ahead of the 0.11.0 release.\r\n\r\nIt would be better if it reports something like `0.11.0+ <git hash>` to easier identify the version (note the `+`), or just the commit hash for none releases . If `firecracker` was build from a dirty repository (ie local, un-committed changes) indicating this with `dirty` would also help. Would the output of `git describe` do the trick?\r\n\r\nRelease commit 3ad0b7b6284853f3b38d1ec7c2d81e1fccfcddfd :\r\n```bash\r\ngit describe 3ad0b7b6284853f3b38d1ec7c2d81e1fccfcddfd\r\nv0.12.0\r\n```\r\n\r\nFollowing commit d9c0086bda99e5ec183eb80feccee2f158647fea :\r\n```bash\r\ngit describe d9c0086bda99e5ec183eb80feccee2f158647fea\r\nv0.12.0-1-gd9c0086\r\n``` yeah, that looks good. I would maybe also add a `-dirty` if build from a repository which does not have uncommitted changes. The reliable way to get this is with something like this:\r\n```\r\ngit update-index -q --refresh && git diff-index --quiet HEAD -- . || echo \"-dirty\"\r\n```\r\n[the `update-index` is necessary in case the timestamp (but no the content) of a local file changed] Within another code base, I use the following for generating a short description for version reporting:\r\n\r\n`GIT_VERSION:= $(shell git --no-pager describe --tags --always --dirty)`\r\n\r\nFor a current checkout, it reports the version as:\r\n\r\n`v0.12.0-26-g608aa56` @rn I'm confused, are repos **without** uncommitted changes dirty? I was thinking the opposite. @aghecenco - You are correct in your understanding (in that \"dirty\" implies the presence of uncommitted changes). This model is supported by the version string generated by git itself in the example I have provided.  There is a library which does exactly that: https://docs.rs/git-version/0.3.2/git_version/index.html\r\nHowever, quickly pulling it into Firecracker gives me a `No such file or directory` error inside the macro. Should I investigate this error further or is this the wrong way to go anyways because this adds a new dependency? May be https://docs.rs/built/0.4.2/built/ cab help ? Issue was fixed by PR #2061   Constantly run a fuzzer against guest facing attack surfaces, including the entire device model as well as the MMDS interface. The [Rust Fuzzing Authority](https://github.com/rust-fuzz) has a lot of resources that can help us get started with this. What is the timeline for this? I am new to rust but would like to try this fuzz testing. There's nobody working on this right now, so no timeline either. If you want to give it a shot, it's all yours. We do have some previous work here for `virtio` fuzzing (which we also plan to add to the repo), but in the fuzzing world, the more the merrier.\r\n\r\nA good first step might be to figure out how to run 1 fuzzing session against one category of attack surface, and then leave the continuous integration part for another step. >We do have some previous work here for virtio fuzzing\r\n\r\nIs that code somewhere available to grok? @konradwilk , not at this time. Updating title/description to better reflect the path we're taking here.  The how to contribute part of the website links directly to the slack cahnnel rather than the invite flow to join it. \r\n\r\nI think this can be fixed with an easy change from https://firecracker-microvm.slack.com/ to https://tinyurl.com/firecracker-microvm\r\n\r\n![screenshot_20181127-214938](https://user-images.githubusercontent.com/2242/49083031-b9b93280-f28e-11e8-806f-a1c63bac4663.png)\r\n\r\n Should be fixed. Please verify (probably refresh your browser cache) and close the issue if things look good. @raduweiss fast turn around! Just verified. So excited about this project. The feedback loop is impressive :) FYI Slack is now saying\r\n\r\n```\r\nThis invite link is no longer active.\r\nPlease check with the person who shared it with you to see if there's a new link available.\r\n```\r\n\r\nwhen I follow the link (https://tinyurl.com/firecracker-microvm) on the website.  We want to have vsock support to enable container integration, but we don't want to use vhost since that would be another attack surface to directly exposes the host kernel. Instead, we'll write another back-end for vsock. See #194.\r\n\r\nCurrenty, virtio vsock exists in the codebase as an experimental development-only rust feature, with the vhost implementation. Updating this issue with the current state of affairs, as discussed internally.\r\n\r\nThe main focus is on maintaining the Firecracker security barrier. I.e. Firecracker must control all data exchanged between the guest and the host. Using the stock vsock-via-vhost mechanism would bypass this barrier, allowing a malicious guest to pass data directly to the host kernel.\r\n\r\nCurrently I see two possible approaches to have both vsock and our security barrier:\r\n1. Emulate a vsock device via a different back-end on the host (e.g. a unix socket). That would mean the guest end would use AF_VSOCK, while the host end AF_UNIX.\r\n   - pro: vhost is not used at all, so no new attack surface is added\r\n   - con: added complexity to making AF_UNIX and AF_VSOCK work together\r\n   - con: non-standard vsock use; requires the user to write more Firecracker-specific code\r\n2. Use vhost as back-end for an emulated vsock device, with a twist. I.e. implement both device-specific and driver-specific behavior in Firecracker, such that both the guest and vhost think they're taking to each other, while they're actually talking to Firecracker. This might work, since vhost doesn't depend on KVM, but needs further investigating / testing.\r\n   - pro: standard AF_VSOCK functionality on both ends; no Firecracker-specific code required from the user\r\n   - con: still using vhost code (new attack surface); all data fed into vhost is strictly controlled by Firecracker, though\r\n\r\nI'm inclined towards the latter and I'll need to test it, since it's just a hypothesis, at the moment. Will update here in a couple of weeks. An example of option 1 can be found in https://github.com/moby/hyperkit/blob/master/src/lib/pci_virtio_sock.c Update: internal discussion has settled on approach no 1. The guest end would be an emulated AF_VSOCK socket, while the host end would be provided via an AF_LOCAL / AF_UNIX socket.\r\n\r\nThis will require establishing some convention to support vsock ports, such as appending the port number to the host-end unix socket file path (e.g. `/path/to/host_socket.sock:52`).\r\n\r\nAlso, from the host end, this will require at least one listener (one socket) per guest, since each Firecracker VMM is designed to be isolated and independent.\r\n\r\nIf anybody tracking this issue has any input, please feel free to chime in. There are details not decided upon yet, so we'd appreciate any input into making this feature easier to integrate for Firecracker users. @dhrgit \r\nTrying to make sure I understand the proposal here. With the chosen approach no.1, you will basically implement some sort of translation/abstraction layer in Firecracker, from AF_UNIX to AF_VSOCK.\r\nBy AF_VSOCK emulation in the guest, I guess you mean you are thinking about writing a virtio driver that would communicate with the Firecracker backend, and that would expose an AF_VSOCK socket from the guest perspective, is that right?\r\n\r\nI don't have a good grasp on potential performance issues related to this approach, but it'd be nice to include @stefanha in this discussion since he's vsock maintainer, and I'm sure he could give some valuable input here. Approach #1 is comparable to port forwarding.  It's fine if you control all applications and the protocols they speak.  If you wish to support existing applications then you may be forced to make invasive changes to those applications:\r\n\r\nWhen communication involves exchanging network address information over an existing connection, the host application receiving AF_VSOCK address information would be confused because that address isn't directly usable with AF_LOCAL.\r\n\r\nAlso, managing port forwarding complicates things if you wish to allow users to add their own applications but is easy with a fixed set of applications that you control. @sboeuf \r\nThere shouldn't be a need for any vsock driver changes. I meant Firecracker would emulate a vsock device, that works with the guest vsock driver. So, nothing changes on the guest/driver end.\r\n\r\nOn the host side, though, the only way to support AF_VSOCK would be via vhost. Since the dominant opinion is to avoid adding vhost as a new dependency (and attack surface), we need to find another solution. The proposed approach (to use an AF_UNIX socket) is what [hyperkit](https://github.com/moby/hyperkit) does and is linked to above by @rn.\r\n\r\nThis does impose some limitations, since there's no perfect translation between AF_VSOCK and AF_UNIX. Both the host apps and the guest apps will need to be aware of these limitations, in order to establish a communication channel.\r\n\r\nThe implementation details are not yet set, so my proposal is to use this issue here to discuss them and come up with a solution that makes sense to everyone. Is it one AF_UNIX socket per guest, or one AF_UNIX socket per AF_VSOCK port?  I think either would work for firecracker-containerd, but we expect to use multiple ports and would need to handle multiplexing if there's only a single AF_UNIX socket per guest. @dhrgit @samuelkarp \r\n\r\n@mcastelino and I talked about the approach you're about to take. From a Kata Containers perspective, it should be fine as we can tweak the application, `kata-runtime` and `kata-shim` in this case to handle the AF_UNIX socket instead of the regular AF_VSOCK one.\r\n\r\nNow, from an implementation perspective, we were discussing how there were two distincts use cases that you need to handle depending if the application running inside the VM runs as:\r\n- __Server__: the `virtio_vsock` device will be the one running the server exposing an AF_UNIX socket to the host. The core logic will retrieve the vsock frames through the virtqueues, and will run one AF_UNIX socket server per vsock port used in the VM. I can imagine the user of Firecracker specifying the guest CID and a root directory path where to create the sockets. You will need some sort of convention so that the user knows how to find the created socket name inside this directory where you could have several sockets, all related to a specific port. Another approach might be to let the user create a `virtio_vsock` device per `CID:port` pair, in which case the socket path could be also fully provided by the user.\r\n- __Client__: This case means we expect to run the server on the host side. The user will have to provide a full socket path where it expects to listen from, and this will expose to the guest a single port.\r\n\r\nGlobally, you will proxy everything through the `virtio_vsock` device.\r\n\r\nLet me know if I'm missing something or if I actually misunderstood parts of the design. @dhrgit @samuelkarp @rn \r\n\r\n@mcastelino and I thought about a slightly different approach that would not require the wrapper translation between `AF_UNIX` and `AF_VSOCK`.\r\nThe idea would be to create a new `AF_VSOCK` implementation in kernel (we need a brand new kernel module for this purpose, something like `vsock_user.ko`), getting rid of all the `vhost` part. Bottom line, the kernel executes socket callbacks on behalf of the application on the host requesting some interactions with the socket, but instead of having `vhost_vsock.ko` interacting with the guest memory (virtqueues) directly, it would copy data frames coming from the app to the firecracker `virtio-vsock` device.\r\nWe could have `virtio-vsock` setting things up with the kernel by registering a `CID` associated to a file descriptor. When the kernel receives some socket connection matching the same `CID`, it would dump the data to the file descriptor previously registered. It would remain `virtio-vsock` responsibility to write those data to the guest memory.\r\n\r\nThis approach is very similar to the one you proposed since it prevents the kernel from interacting directly with the virtqueues. It is also similar in the way that the kernel would still be the one passing data from the application in userspace to the `virtio-vsock` device also in userspace.\r\n\r\nThe __main__ benefit of this approach is that you could run unmodified applications, since they would still talk to an `AF_VSOCK` socket. The __second__ benefit is that `virtio-vsock` device will not have to figure out a non standard way to translate `AF_UNIX` connections into `AF_VSOCK` ones.\r\n\r\nThe __main__ drawback of this approach is that we would need to introduce a new kernel module, but long term, this could be reused by a bunch of applications that would simply encapsulate the data that could be shared across a cluster of VMs for instance. Basically, this would make vsock more portable.\r\n\r\nAnyway, let me know what you think about this approach!\r\n\r\n/cc @stefanha  @sboeuf A vhost_user transport is technically not necessary since vhost_vsock already provides the same functionality to any userspace process.  While it might not be obvious at first glance, vhost_vsock is not tied to virtualization.  You don't need to expose vhost_vsock to a guest.  vhost_vsock is just a way of claiming a CID and transferring vsock messages to/from userspace.\r\n\r\nThe main difference between reusing vhost_vsock and implementing vhost_user is the userspace API: vhost ioctls + eventfd vs a tap-like file descriptor.\r\n\r\nBoth of these drivers still have to parse vsock messages in order to hand them to net/vmw_vsock/af_vsock.c (there are control messages, not just payloads).  The security argument becomes whether you believe parsing an equivalent header from a tap-like file descriptor is more secure than parsing the header from the vring.\r\n\r\nIn other words, the vsock_user code could also have bugs that lead to a host kernel compromise.  If you are willing to accept that risk, then I think it makes more sense to reuse vhost_vsock.ko without exposing it to the guest.  This will save you a lot of time now and maintenance in the future. @stefanha \r\n>While it might not be obvious at first glance, vhost_vsock is not tied to virtualization.\r\n\r\nI can see that, since the memory regions given to `vhost_vsock` don't have to be guest memory, they could be any process memory on the host.\r\n\r\n>The main difference between reusing vhost_vsock and implementing vhost_user is the userspace API: vhost ioctls + eventfd vs a tap-like file descriptor.\r\n\r\nHow would I register a CID to the driver from the `virtio-vsock` in userspace if the only interface is a file descriptor?\r\n\r\n>Both of these drivers still have to parse vsock messages in order to hand them to net/vmw_vsock/af_vsock.c (there are control messages, not just payloads). The security argument becomes whether you believe parsing an equivalent header from a tap-like file descriptor is more secure than parsing the header from the vring.\r\n\r\nWell I thought the point was that because you receive a vsock frame through the vring, and because the data has to be retrieved based on what is provided by the vring, it'd be better to make this happen from userspace. The virtio code in the VMM itself would reach out the virtqueue buffer pointed by the descriptor table, and in case of a malicious guest (putting wrong addresses in the descriptor table), it would not be able to access some random memory on the host.\r\nInstead, by having the vrings processed by vhost in kernel, you leave the possibility to a malicious guest to access any address on the host.\r\nI might be missing something, but I thought that was the main security concern here.\r\nThe parsing of each frame can subsequently happen in kernel, but at least we ensure the data being parsed is not coming from somewhere else than the guest memory. > @stefanha\r\n> > The main difference between reusing vhost_vsock and implementing vhost_user is the userspace API: vhost ioctls + eventfd vs a tap-like file descriptor.\r\n> \r\n> How would I register a CID to the driver from the `virtio-vsock` in userspace if the only interface is a file descriptor?\r\n\r\nThe tun/tap driver uses an ioctl to register the interface.  Something similar could be done for the vhost_user fd.  But we should first discuss whether vhost_user is necessary.\r\n\r\n> > Both of these drivers still have to parse vsock messages in order to hand them to net/vmw_vsock/af_vsock.c (there are control messages, not just payloads). The security argument becomes whether you believe parsing an equivalent header from a tap-like file descriptor is more secure than parsing the header from the vring.\r\n> \r\n> Well I thought the point was that because you receive a vsock frame through the vring, and because the data has to be retrieved based on what is provided by the vring, it'd be better to make this happen from userspace. The virtio code in the VMM itself would reach out the virtqueue buffer pointed by the descriptor table, and in case of a malicious guest (putting wrong addresses in the descriptor table), it would not be able to access some random memory on the host.\r\n> Instead, by having the vrings processed by vhost in kernel, you leave the possibility to a malicious guest to access any address on the host.\r\n\r\nHere is the vhost_vsock solution that is not exposed to the guest:\r\n\r\nThe VMM opens /dev/vhost-vsock and issues ioctls to set the guest's CID and a userspace memory region where messages will be placed.\r\n\r\nThe VMM emulates the virtio-vsock device.  Virtqueue processing is done by the VMM.  It takes messages from the virtqueue and sanity-checks them.  It may also copy data buffers to/from guest memory if the goal is never to expose guest RAM to the host kernel.\r\n\r\nThe virtio-vsock device constructs new virtio-vsock messages in the userspace memory region registered with vhost-vsock and signals the kick eventfd.  The host kernel vhost_vsock module then processes those messages and communicates with AF_VSOCK sockets on the host.\r\n\r\nReplies from host AF_VSOCK sockets come back in the reverse direction.  vhost_vsock signals the notify eventfd which the VMM is monitoring.  The virtio-vsock device emulation code takes reply messages from the userspace memory region and places them into the vring in guest RAM and notifies the guest.\r\n\r\nThis way the guest never directly interacts with vhost_vsock.  vhost_vsock serves only as the API for communicating with the host kernel network stack.\r\n\r\nIn this solution the guest vrings are processed by the VMM, not by vhost_vsock.  vhost_vsock plays the same role as vhost_user, it never touches the guest's vrings.\r\n\r\n> I might be missing something, but I thought that was the main security concern here.\r\n\r\nWe need input from folks who originally said they cannot use vhost_vsock for security reasons.  There is a spectrum here from \"I don't want the host kernel network stack involved at all, it's too risky and I only trust AF_UNIX\" to \"I just don't want the host kernel to process guest vrings\".  I'm not sure what the consensus on this is in the Firecracker community. > This way the guest never directly interacts with vhost_vsock. vhost_vsock serves only as the API for communicating with the host kernel network stack.\r\n\r\nThis is quite an accurate description of the solution I've been advocating. I.e. reconstruct (and possibly sanitize) the virtio-vsock frames in the VMM userspace, and only have the VMM interact with vhost.\r\n\r\nThe main arguments against it, as I understood them, were a) vhost would be an extra dependency on the host, and b) sanitization code would be too complex. Perhaps @rn would be better suited to go into more details on those arguments.\r\n @stefanha \r\n> But we should first discuss whether vhost_user is necessary.\r\n\r\nOf course, agreed here.\r\n\r\n>This way the guest never directly interacts with vhost_vsock. vhost_vsock serves only as the API for communicating with the host kernel network stack.\r\nIn this solution the guest vrings are processed by the VMM, not by vhost_vsock. vhost_vsock plays the same role as vhost_user, it never touches the guest's vrings.\r\n\r\nNow I get it :)\r\nYou're still proxying things from the VMM, but vhost_vsock interacts with another memory region that has been provided by the VMM, not the vring buffers.\r\nAnd your description of the whole solution is very accurate and makes sense to me. Based on this, I now understand why it does not make too much sense to introduce a new vsock_user driver.\r\n\r\n@dhrgit \r\n>vhost would be an extra dependency on the host\r\n\r\nWhy does that matter since it's on the host?\r\n\r\n>sanitization code would be too complex\r\n\r\nEven with the AF_UNIX to AF_VSOCK solution, wouldn't you be sanitizing frames received from vrings before to inject them into the kernel through the socket?\r\n\r\nLooking forward to @rn feedback :)\r\n\r\n @rn \r\nAny feedback? Apologies for the long delay in replying. I had a hectic schedule.\r\n\r\nOur main concern with using vhost is that there would be direct interaction of the guest with a complex, in kernel component (beyond MMIO). So the guest could provide arbitrary inputs and can try to exploit flaws in the in kernel implementation. Hence the proposal of implementing the virtio vsock \"backend\" in firecracker, a process which can be jailed. In my opinion, this is a very important property.\r\n\r\nNow, once we do that, the next question is, how to we expose the vsocks to other processes? We could have the firecracker vsock backend basically proxy vsock in to the kernel. For that there seem to be two options, either feeding stuff into rings directly (after sanitizing) or proxy at a higher level, like a byte streams. I think the sanitizing is tricky to get right and you still risk the guest being able to more or less directly control the inputs into the kernel. If you proxy at a higher level (like byte streams) you basically terminate and re-originate vsock connections and this is not much different to proxying to a AF_UNIX socket. I would think that AF_UNIX is better understood and tested/hardened and does not require the host kernel to be configured to include vsock support (less code). Hence the suggestion to go with AF_UNIX.\r\n Thanks for the feedback @rn \r\n\r\n>I would think that AF_UNIX is better understood and tested/hardened and does not require the host kernel to be configured to include vsock support (less code).\r\n\r\nI agree this looks a bit more secure, but the price to pay is the introduction of some kind of hybrid protocol that will need to be handled by the application on the host. This means the application will not be compatible with other hypervisors unless specific modifications.\r\n\r\nAlso, bypassing the vsock kernel code like this, we are definitely not contributing for making it better long term.\r\n\r\n>I think the sanitizing is tricky to get right\r\n\r\nWhat about the complexity of translating `AF_VSOCK` into `AF_UNIX`? > > I would think that AF_UNIX is better understood and tested/hardened and does not require the host kernel to be configured to include vsock support (less code).\r\n> \r\n> I agree this looks a bit more secure, but the price to pay is the introduction of some kind of hybrid protocol that will need to be handled by the application on the host. This means the application will not be compatible with other hypervisors unless specific modifications.\r\n\r\nAs mentioned in a previous comment, one way to consider this trade-off is whether you have a small, fixed number of vsock services you wish to run (then the AF_UNIX approach is fine) or whether vsock should be generally usable for user-defined purposes (then the AF_UNIX approach is impractical because it requires extensive modifications to Sockets API applications and some protocols may be unportable).\r\n\r\nWhich use case do you have in mind? > Which use case do you have in mind?\r\n\r\nI believe we are looking at the first use case. I.e. we are adding vsock, in order to enable container orchestrators to deploy and communicate with their agents inside the virtualized container / microvm.\r\n\r\nWe haven't explored, in depth, the idea of enabling generic applications over vsock. Is there demand for that? @stefanha your question is spot on and probably something we should have made more clear initially. \r\n\r\nIndeed, we just want to support whatever minimum set of functionality works for container orchestrators (we've arrived here by taking in requirements from `firecracker-contaierd` and `Kata Containers`).\r\n\r\nI think a good next step will be to detail the actual proposal and get feedback from container folks that want to use Firecracker as a microVM runtime. By the way, if there's demand for the `vhost/vsock` solution, I'm actually very much inclined to work towards a place where this `vsock/unix_socket` and the full `vsock/vhost` (if there's demand for it) are optional Firecracker features (in the Rust sense) that live in separate [rust-vmm](https://github.com/rust-vmm) crates. Such work would probably happen after the initial implementation we'll do now. @raduweiss \r\n>a place where this vsock/unix_socket and the full vsock/vhost (if there's demand for it) are optional Firecracker features (in the Rust sense) that live in separate rust-vmm crates.\r\n\r\nThat's definitely what the end goal should be IMO.\r\nAs per the previous discussions, `vsock/AF_UNIX` sounds like a bit more secure approach but has a very limited scope (running an agent inside the VM as the server side of the connection). This scope is fine for specific use cases, but if someone tries to use Firecracker for more general purpose (without the container use case in mind), we might want a full `vsock/AF_VSOCK` support there.\r\nI'm glad to see you're considering this as a viable option for Firecracker.\r\n\r\n>Such work would probably happen after the initial implementation we'll do now.\r\n\r\nAgreed, as part of this work will be reused/shared with `vsock/AF_VSOCK` (accessing the queues), while the backend/proxying should be different. > That's definitely what the end goal should be IMO.\r\n\r\nAnd I think this is the path we're on now: Firecracker keeps developing as a very narrow, focused, and optimized building block (as per our charter statement _\"Our mission is to enable secure, multi-tenant, minimal-overhead execution of container and function workloads.\"_ ... and _nothing_ more), while rust-vmm grows into a community project where the various crates provide really top-quality VMM functionality (and there's no problem if there more than one way to do things)\r\n\r\nSo, if Firecracker users end up wanting the full `vsock/AF_VSOCK` stack down the line, then we'll take it from rust-vmm and have it as a feature. If not, it will still be available in rust-vmm for use cases other than Firecracker.\r\n\r\nI guess a discussion for the near future, once @dhrgit comes up with his `vsock/AF_UNIX` proposal, is if `vsock/AF_UNIX` is wanted in rust-vmm (@sboeuf, @stefanha, @andreeaflorescu). @raduweiss \r\n>I guess a discussion for the near future, once @dhrgit comes up with his `vsock/AF_UNIX` proposal, is if `vsock/AF_UNIX` is wanted in rust-vmm\r\n\r\nAs long as the scope is clear for potential users, I can see how other VMM could benefit from it, hence no reason not to have this in `rust-vmm`. Hey everyone - I've posted #1044 as an RFC on the proposed vsock design. We'll be happy to hear everyone's feedback & comments! The chosen solution has a great property which has no dependency on the host kernel version. Update for visibility:\r\n- [x] old vhost-based code removed,\r\n- [x] new vsock device added\r\n- [x] new vsock components and data path: device / virtq <-> epoll handler <-> muxer <-> connection <-> unix socket\r\n- [x] nested epoll dispatch mechanism for the vsock muxer\r\n- [x] (PoC-level) guest-initiated connection multiplexing and data exchange\r\n- [x] improve packet assembly logic to use properly aligned data\r\n- [x] add traits and logic for generalizing the vsock backend (i.e. unix sockets should be only one instance / implementation)\r\n- [x] handle graceful connection shutdown\r\n- [x] add flow control\r\n- [x] handle incoming connections (host-initiated)\r\n- [x] add connection shutdown kill timers\r\n- [x] major code cleanup\r\n- [x] improve throughput (currently really low, ~300mbps)\r\n- [ ] add metrics and tests\r\n\r\nCurrent code available in my WiP branch: https://github.com/dhrgit/firecracker/tree/vsock-wip \r\n The PR is up: #1106  Enhance the micro_http in order to replace hyper with it. The reason for doing this is to get rid of the multiple transient dependencies that come with hyper and tokio.\r\n\r\n- [x] enhance micro_http implementation: #1191 \r\n- [x] implement HTTP Connection: #1192\r\n- [x] implement HTTP Server: #1193\r\n- [x] plumbing to get rid of hyper dependency: #1194  - [x] Move the code from kvm_sys/src/lib.rs to the kvm code because that code is not autogenerated.\r\n- [x] Same for net_gen.   There are remaining `unwrap()`s in the code that cannot be avoided, which lead to a not-so-user-friendly error message being printed. All such failure cases should print a descriptive message along with the panic location. Lowering priority since this is not very impactful in practice. Is this just a case of replacing the `unwrap()` calls with `expect()`?  Is there a documented requirement for the formatting of the error message? I've made the changes I think are required, but I've hit across an unexpected issue.  Because I've added an error string, this has pushed some lines over the column limit for the rust style, so `cargo fmt` has split them over multiple lines.  Unfortunately this has pushed the code coverage percentage below the minimum:\r\n\r\n```\r\n=============================================== FAILURES ================================================\r\n_____________________________________________ test_coverage _____________________________________________\r\nintegration_tests/build/test_coverage.py:94: in test_coverage\r\n    assert coverage >= min_coverage, coverage_low_msg\r\nE   AssertionError: Current code coverage (82.32%) is below the target (82.46%).\r\nE   assert 82.32124920098622 >= 82.41\r\n```\r\nWhat do I do?  I haven't made any changes that warrant new unit tests.  - [ ] Metrics:\r\n    - [x] PUT /mmds\r\n    - [x] PATCH /mmds\r\n    - [x] GET /mmds\r\n- [ ] Logging \r\n    - [x] PUT /mmds\r\n    - [x] PATCH /mmds\r\n    - [x] GET /mmds\r\n    - [ ] Others - To Be Defined  Metrics have been added. Logging still to come. We still need to add metrics for API requests. We only have metrics for internal MMDS logic. I will update the description. This issue is really old. But I wanted to know if this is still needed and can I work on it?  @andreeaflorescu  Can you provide some example of metrics ?  Also can you please add some more details. @vbmade2000 we need to add API metrics that are incremented when PUT/PATCH/GET on /mmds are called.\r\nFirst, they need to be defined in the appropriate structure. We need to use [PutRequestsMetrics](https://github.com/andreeaflorescu/firecracker/blob/803c8fae14b1194ba103cf7f0ce817376bf9dfc4/src/logger/src/metrics.rs#L121), [Patch](https://github.com/andreeaflorescu/firecracker/blob/803c8fae14b1194ba103cf7f0ce817376bf9dfc4/src/logger/src/metrics.rs#L150), and [GetRequestsMetrics](https://github.com/andreeaflorescu/firecracker/blob/803c8fae14b1194ba103cf7f0ce817376bf9dfc4/src/logger/src/metrics.rs#L108) structures.\r\n\r\nAfter defining the metrics in those structures, we should increment them when the appropriate request is handled. The entry point in the api_server that we're interested in is [here](https://github.com/andreeaflorescu/firecracker/blob/803c8fae14b1194ba103cf7f0ce817376bf9dfc4/src/api_server/src/parsed_request.rs#L44).\r\n\r\nYou can look at other API metrics examples in the [machine_configuration](https://github.com/andreeaflorescu/firecracker/blob/master/src/api_server/src/request/machine_configuration.rs) module as this one has all metrics we're interested in (put, patch, get).  Sure. I'll take a look. Thanks for details @andreeaflorescu . @andreeaflorescu Referring to [machine_configuration](https://github.com/andreeaflorescu/firecracker/blob/master/src/api_server/src/request/machine_configuration.rs), **parse_get_machine_config** calls **METRICS.get_api_requests.machine_cfg_count.inc();**. Should /mmds GET use same ? @vbmade2000 you should define new entries for `MMDS` if they do not exist yet. `machine_cfg_*` metrics refer to `/machine-config`. So we would need ones under `METRICS.get_api_requests` for MMDS as well. I understand that. I think I asked wrong question. Anyways I found **MmdsMetrics** struct at https://github.com/andreeaflorescu/firecracker/blob/master/src/logger/src/metrics.rs#L230.  Can it be used ?\r\n\r\nMy assumption is it can't be used as by names it seems they are not defined to count number of GET requests etc. > I understand that. I think I asked wrong question. Anyways I found **MmdsMetrics** struct at https://github.com/andreeaflorescu/firecracker/blob/master/src/logger/src/metrics.rs#L230. Can it be used ?\r\n> \r\n\r\nNo, that is not the right structure. The `MmdsMetrics` structure that you found contains metrics related to the internal functionality of the MMDS device, and not related to the API.\r\n\r\nThe type of `METRICS.get_api_requests` is `GetRequestsMetrics`. If you look at the [definition](https://github.com/andreeaflorescu/firecracker/blob/803c8fae14b1194ba103cf7f0ce817376bf9dfc4/src/logger/src/metrics.rs#L108) you will see that there is one metric for each GET request. You need to add a `mmds_count` field there. There are corresponding structures for PUT & PATCH API requests as well.\r\n\r\nDoes that make sense?\r\n\r\n Indeed it does. I will go in that direction.\r\n\r\n  We merged PARTUUID support, but we currently supply no documentation/example which describes the changes required from the user. It's important to mention that, in order to use this feature, the customer has to provide a disk image, rather than a partition image, which must be configured in a certain way. We should also look into removing PARTUUID support since this is not strictly required - customers can extract partitions from the disk image.  Kcov reports 0% coverage for all the files that are jailer related. Interested in working on this to ramp up on Firecracker! (Just some context - I am a graduate student at UT trying to know more about Firecracker and will be working with Xiang Gu).\r\n\r\nDoes commenting here implicitly mean this issue gets assigned to me?  Rate limiting currently works by allowing or temporarily blocking virtio virtqueue requests based on the request size and the ratelimiter token bucket remaining budget.\r\nWe can easily reproduce scenarios where a virtio request can exceed the token bucket size, in such scenarios traffic is forever blocked since there will never be enough budget to serve that request.\r\n\r\nSolutions:\r\n1. Augment the design and implementation to be able to do partial processing of virtio requests. This means we need to do extra internal accounting of queue processing.\r\n2. Enforce limits and validations in rate limiter configurations to disallow such scenarios. Hi, @acatangiu I am a student in UT Austin's virtualization class. We are a group of 3 and were wondering if this was still an open issue. If so could we get a little more information on what needs to be done? @georgepisaltu accidentally stumbled upon a TODO that still needs be removed: https://github.com/firecracker-microvm/firecracker/blob/89a131d8e359e7c00361c79a30a1d678c8d9278e/src/rate_limiter/src/lib.rs#L151  When booting Linux you get the following warning: \"[Firmware Bug]: CPU1: APIC id mismatch\".\r\nThe cause is that we don't set the APIC ID in the extended topology with CPUID.\r\n\r\n We're still seeing this in our setup. Running a pretty recent firecracker version. Not sure why. I think it cropped up when we upgraded the kernel of our microvms. It seems to only happen on our AMD servers. Specifically these models:\r\n- AMD EPYC 7502P 32-Core\r\n- AMD EPYC 7402P 24-Core\r\n\r\nBelow, the details of one occurrence of the issue.\r\n\r\n```\r\n[    0.339347] smpboot: CPU0: AMD EPYC (family: 0x17, model: 0x31, stepping: 0x0)\r\n[    0.339552] Performance Events: Fam17h core perfctr, AMD PMU driver.\r\n[    0.339570] ... version:                0\r\n[    0.339571] ... bit width:              48\r\n[    0.339571] ... generic registers:      6\r\n[    0.339572] ... value mask:             0000ffffffffffff\r\n[    0.339572] ... max period:             00007fffffffffff\r\n[    0.339572] ... fixed-purpose events:   0\r\n[    0.339573] ... event mask:             000000000000003f\r\n[    0.339646] rcu: Hierarchical SRCU implementation.\r\n[    0.340065] random: crng done (trusting CPU's manufacturer)\r\n[    0.340212] smp: Bringing up secondary CPUs ...\r\n[    0.340357] x86: Booting SMP configuration:\r\n[    0.340358] .... node  #0, CPUs:      #1\r\n[    0.005221] kvm-clock: cpu 1, msr 2401041, secondary cpu clock\r\n[    0.005221] x86/cpu: Activated the Intel User Mode Instruction Prevention (UMIP) CPU feature\r\n[    0.005221] [Firmware Bug]: CPU1: APIC id mismatch. Firmware: 1 APIC: 16\r\n[    0.341428] KVM setup async PF for cpu 1\r\n[    0.341428] kvm-stealtime: cpu 1, msr 12baa0040\r\n[    0.341428]  #2\r\n[    0.005221] kvm-clock: cpu 2, msr 2401081, secondary cpu clock\r\n[    0.005221] x86/cpu: Activated the Intel User Mode Instruction Prevention (UMIP) CPU feature\r\n[    0.005221] [Firmware Bug]: CPU2: APIC id mismatch. Firmware: 2 APIC: 16\r\n[    0.341428] KVM setup async PF for cpu 2\r\n[    0.341428] kvm-stealtime: cpu 2, msr 12bb20040\r\n[    0.341428]  #3\r\n[    0.005221] kvm-clock: cpu 3, msr 24010c1, secondary cpu clock\r\n[    0.005221] x86/cpu: Activated the Intel User Mode Instruction Prevention (UMIP) CPU feature\r\n[    0.005221] [Firmware Bug]: CPU3: APIC id mismatch. Firmware: 3 APIC: 16\r\n[    0.343429] KVM setup async PF for cpu 3\r\n[    0.343429] kvm-stealtime: cpu 3, msr 12bba0040\r\n[    0.343429] smp: Brought up 1 node, 4 CPUs\r\n[    0.343429] smpboot: Max logical packages: 1\r\n[    0.343429] smpboot: Total of 4 processors activated (19962.49 BogoMIPS)\r\n```\r\n\r\n```\r\nroot@85595acf:/app# cat /proc/cmdline\r\ninit=/fly/init cgroup_enable=memory swapaccount=1 i8042.dumbkbd reboot=k panic=1 quiet random.trust_cpu=on i8042.noaux i8042.nomux i8042.nopnp console=ttyS0 pci=off root=/dev/vda rw virtio_mmio.device=4K@0xd0000000:5 virtio_mmio.device=4K@0xd0001000:6 virtio_mmio.device=4K@0xd0002000:7\r\n```\r\n\r\n**Guest CPU**:\r\n\r\n```\r\nroot@85595acf:/app# lscpu\r\nArchitecture:          x86_64\r\nCPU op-mode(s):        32-bit, 64-bit\r\nByte Order:            Little Endian\r\nCPU(s):                4\r\nOn-line CPU(s) list:   0-3\r\nThread(s) per core:    4\r\nCore(s) per socket:    1\r\nSocket(s):             1\r\nNUMA node(s):          1\r\nVendor ID:             AuthenticAMD\r\nCPU family:            23\r\nModel:                 49\r\nModel name:            AMD EPYC\r\nStepping:              0\r\nCPU MHz:               2495.312\r\nBogoMIPS:              4990.62\r\nVirtualization:        AMD-V\r\nHypervisor vendor:     KVM\r\nVirtualization type:   full\r\nL1d cache:             32K\r\nL1i cache:             32K\r\nL2 cache:              512K\r\nL3 cache:              16384K\r\nNUMA node0 CPU(s):     0-3\r\nFlags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl xtopology nonstop_tsc cpuid tsc_known_freq pni pclmulqdq ssse3 fma cx16 sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand hypervisor lahf_lm cmp_legacy svm cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw topoext perfctr_core ssbd ibrs ibpb stibp vmmcall fsgsbase tsc_adjust bmi1 avx2 smep bmi2 rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves clzero xsaveerptr arat npt nrip_save umip rdpid\r\n```\r\n\r\n**Host CPU**:\r\n\r\n```\r\nArchitecture:        x86_64\r\nCPU op-mode(s):      32-bit, 64-bit\r\nByte Order:          Little Endian\r\nCPU(s):              64\r\nOn-line CPU(s) list: 0-63\r\nThread(s) per core:  2\r\nCore(s) per socket:  32\r\nSocket(s):           1\r\nNUMA node(s):        1\r\nVendor ID:           AuthenticAMD\r\nCPU family:          23\r\nModel:               49\r\nModel name:          AMD EPYC 7502P 32-Core Processor\r\nStepping:            0\r\nCPU MHz:             3337.168\r\nBogoMIPS:            4991.05\r\nVirtualization:      AMD-V\r\nL1d cache:           32K\r\nL1i cache:           32K\r\nL2 cache:            512K\r\nL3 cache:            16384K\r\nNUMA node0 CPU(s):   0-63\r\nFlags:               fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm constant_tsc rep_good nopl nonstop_tsc cpuid extd_apicid aperfmperf pni pclmulqdq monitor ssse3 fma cx16 sse4_1 sse4_2 x2apic movbe popcnt aes xsave avx f16c rdrand lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt tce topoext perfctr_core perfctr_nb bpext perfctr_llc mwaitx cpb cat_l3 cdp_l3 hw_pstate sme ssbd mba sev ibrs ibpb stibp vmmcall fsgsbase bmi1 avx2 smep bmi2 cqm rdt_a rdseed adx smap clflushopt clwb sha_ni xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local clzero irperf xsaveerptr rdpru wbnoinvd arat npt lbrv svm_lock nrip_save tsc_scale vmcb_clean flushbyasid decodeassists pausefilter pfthreshold avic v_vmsave_vmload vgif umip rdpid overflow_recov succor smca\r\n```\r\n\r\n**Firecracker version**: v0.21.2 @jeromegn could you also specify what version of linux kernel are you using ? Both on the guest and on the host ? Thanks ! On this particular host: `5.6.0-050600-generic`, the guest is `4.19.129` built with a default config with these changes: \r\n\r\n```\r\n# Enable dummy network interfaces\r\nCONFIG_DUMMY=y\r\n# Enable VXLAN support as a module\r\nCONFIG_VXLAN=m\r\n# Enable wireguard on newer kernels\r\nCONFIG_WIREGUARD=y\r\n\r\n# IPv6 fun\r\nCONFIG_IP6_NF_NAT=y\r\nCONFIG_IP6_NF_TARGET_MASQUERADE=y\r\nCONFIG_NF_NAT_IPV6=y\r\nCONFIG_IP6_NF_IPTABLES=y\r\n\r\n# Enable support for soft shutdown of amd64 VMs\r\n# See https://github.com/firecracker-microvm/firecracker/blob/master/docs/api_requests/actions.md#sendctrlaltdel\r\nCONFIG_KEYBOARD_ATKBD=y\r\nCONFIG_SERIO=y\r\nCONFIG_SERIO_I8042=y\r\nCONFIG_SERIO_LIBPS2=y\r\n\r\n# Make the guest's wall clock not drift\r\n# https://github.com/firecracker-microvm/firecracker/blob/master/FAQ.md#my-guest-wall-clock-is-drifting-how-can-i-fix-it\r\nCONFIG_PTP_1588_CLOCK=y\r\nCONFIG_PTP_1588_CLOCK_KVM=y\r\n\r\n# Some patches for keeping network functionalities that Kubernetes needs/might need\r\nCONFIG_IPVLAN=y\r\nCONFIG_IPVTAP=y\r\nCONFIG_TAP=y\r\nCONFIG_IP_VS_MH=m\r\n\r\n# Enable /proc/config inside of the VM\r\n# https://superuser.com/questions/287371/obtain-kernel-config-from-currently-running-linux-system\r\nCONFIG_IKCONFIG=y\r\nCONFIG_IKCONFIG_PROC=y\r\n\r\n# Misc\r\nCONFIG_ZBUD=y\r\n``` It looks like `KVM_GET_SUPPORTED_CPUID` returns a cpuid that contains the `0xb` leaf on AMD, even though this is an Intel-specific leaf. It looks like a kernel bug, but I am not sure. I have to do some more research. \r\n\r\n@jeromegn Would it be acceptable for you to use a different host or guest kernel version ? I am not sure which one is the first release that fixes the issue. Also could you try [this](https://github.com/serban300/firecracker/commit/5023844bffbaaf7ec9f128ea1245a9a765417e6f) firecracker patch please and let us know if it mitigates the problem ? I upgraded the guest kernel to 4.19.146 and the Firmware bug is gone. I'm not entirely sure which version fixes it though.  For example:\r\n\r\nCatch the EINTR error when running the epoll loop.\r\nError:\r\nthread '<unnamed>' panicked at 'VMM thread fail: Poll(Error { repr: Os { code: 4, message: \"Interrupted system call\" } })', /checkout/src/libcore/result.rs:906:4\r\n\r\nI ran into this issue when my laptop went to sleep. I guess the firecracker process got a EINTR signal that we don't handle properly in the epoll loop in run_control.  Solved by #196  Umm.. this looks wrong, https://github.com/aws/PRIVATE-firecracker/pull/196 doesn't touch VMM code. Yap, i closed the wrong issue. The particular issue described in the initial message is fixed as part of #304. Waiting for the PR to be merged before closing this.\r\n\r\nWe currently aren't blocking/masking any signals within Firecracker, and we don't expect to receive any during normal operation. Without a handler installed, most signals will kill the process anyway, which immediately indicates abnormal host behavior. \r\n\r\nOne potential issue with this approach is related to signals whose default disposition is to core dump, as we might inadvertently leak (potentially) sensitive data. If the Firecracker process is already deprivileged as the core dump attempts to write its data, nothing will happen because of insufficient permissions. However, Linux allows this behavior to be changed to pipe the core dump data to a program which is executed, rather than write it directly to a file. This is unlikely to leak something (because it has to be configured in a pretty specific way, taking into consideration the jailing and all), but does not eliminate the risk altogether.\r\n\r\nThere are a couple of ways around this:\r\n* Add handlers for all signals with core disposition, and bring down the process ourselves.\r\n* Use `madvise` with `MADV_DONTDUMP`, but this seems to be the most awkward solution :-s\r\n* Write all zeros to `/proc/PID/coredump_filter` as part of jailing (or better, to the parent process/shell that spawns all Firecrackers, since this is inherited). I think this prevents dumping unwanted data (things might get a bit complicated if there is some data which we DO want to dump), but we'll have to double check. The PR #304 was not merge as it requires a host kernel version > 4.14. Hi, @andreeaflorescu I am a student in UT Austin's virtualization class. We are a group of 3 and were wondering if this was still an open issue. If so could we get a little more information on what needs to be done?", "text_all_count": 123370, "text_word_token": ["Alex", "can", "you", "please", "put", "a", "better", "title", "and", "change", "description", "NUMBER", "You", "can", "describe", "why", "you", "needed", "the", "refactoring", "NUMBER", "I", "may", "have", "gotten", "it", "backwards", "I", "was", "thinking", "that", "Firecracker", "will", "continue", "consuming", "rust", "vmm", "vm", "memory", "but", "instead", "of", "use", "rust", "vmm", "vm", "memory", "GuestMemoryMmap", "all", "over", "the", "place", "Firecracker", "would", "add", "its", "own", "struct", "GuestMemoryMmapWithTracking", "or", "something", "and", "impl", "rust", "vmm", "vm", "memory", "GuestMemory", "for", "firecracker", "GuestMemoryMmapWithTracking", "disregard", "rustlang", "blasphemy", "NUMBER", "That", "way", "we", "don", "t", "have", "to", "kill", "the", "dependency", "NUMBER", "Did", "we", "move", "away", "from", "that", "What", "s", "the", "advantage", "of", "remove", "the", "dependency", "other", "than", "renaming", "GuestMemoryMmap", "everywhere", "we", "override", "only", "what", "be", "needed", "with", "a", "local", "implementation", "Why", "not", "create", "a", "new", "implementor", "for", "GuestMemory", "we", "override", "only", "what", "be", "needed", "with", "a", "local", "implementation", "Why", "not", "create", "a", "new", "implementor", "for", "GuestMemory", "FWIW", "I", "also", "understood", "the", "coupling", "in", "the", "way", "aghecenco", "describe", "it", "above", "NUMBER", "The", "snapshot", "restore", "operation", "be", "slower", "on", "AMD", "than", "on", "Intel", "NUMBER", "We", "should", "investigate", "why", "and", "either", "fix", "the", "root", "cause", "or", "change", "the", "test_snapshot_resume_latency", "test", "in", "order", "to", "check", "different", "values", "for", "AMD", "and", "Intel", "NUMBER", "This", "be", "not", "relate", "to", "AMD", "NUMBER", "It", "seems", "to", "be", "relate", "to", "the", "host", "kernel", "version", "NUMBER", "On", "NUMBER", "I", "m", "get", "restore", "times", "that", "revolve", "around", "NUMBER", "ms", "NUMBER", "On", "NUMBER", "I", "m", "get", "restore", "times", "that", "revolve", "around", "NUMBER", "ms", "NUMBER", "I", "m", "get", "similar", "results", "both", "on", "AMD", "and", "Intel", "NUMBER", "On", "host", "kernel", "NUMBER", "looks", "like", "the", "difference", "between", "NUMBER", "ms", "and", "NUMBER", "ms", "be", "cause", "by", "the", "jailer", "NUMBER", "On", "host", "kernel", "NUMBER", "the", "problem", "seems", "to", "be", "cause", "by", "the", "cgroups", "NUMBER", "When", "I", "start", "jailer", "without", "applying", "the", "cgroups", "the", "overhead", "disappears", "NUMBER", "The", "entire", "overhead", "comes", "from", "the", "KVM_CREATE_VM", "ioctl", "When", "run", "within", "the", "jailer", "cgroup", "ioctl", "NUMBER", "KVM_CREATE_VM", "NUMBER", "NUMBER", "TAG", "When", "run", "without", "cgroups", "ioctl", "NUMBER", "KVM_CREATE_VM", "NUMBER", "NUMBER", "TAG", "The", "difference", "be", "about", "NUMBER", "ms", "NUMBER", "For", "the", "moment", "I", "traced", "the", "overhead", "to", "the", "kvm_arch_post_init_vm", "function", "in", "the", "host", "kernel", "NUMBER", "I", "will", "dig", "deeper", "NUMBER", "Tracing", "the", "overhead", "further", "down", "the", "host", "kernel", "call", "stack", "kvm_arch_post_init_vm", "kvm_mmu_post_init_vm", "kvm_vm_create_worker_thread", "kvm_vm_worker_thread", "cgroup_attach_task_all", "cgroup_attach_task", "cgroup_migrate", "cgroup_migrate_execute", "cpuset_can_attach", "percpu_down_write", "cpuset_rwsem", "Looks", "like", "the", "overhead", "was", "introduce", "by", "this", "LINK", "NUMBER", "juri", "NUMBER", "lelli", "redhat", "NUMBER", "com", "kernel", "patch", "NUMBER", "More", "specifically", "these", "NUMBER", "commit", "sched", "core", "Prevent", "race", "condition", "between", "cpuset", "and", "__sched_setscheduler", "LINK", "cgroup", "cpuset", "Convert", "cpuset_mutex", "to", "percpu_rwsem", "LINK", "Actually", "to", "be", "even", "more", "specific", "looks", "like", "the", "overhead", "was", "introduce", "only", "by", "the", "following", "commit", "cgroup", "cpuset", "Convert", "cpuset_mutex", "to", "percpu_rwsem", "LINK", "I", "tried", "to", "use", "cpuset_mutex", "instead", "of", "percpu_rwsem", "and", "the", "overhead", "disappears", "NUMBER", "Just", "a", "quick", "update", "NUMBER", "I", "stumbled", "upon", "some", "documentation", "NUMBER", "Looks", "like", "this", "be", "how", "a", "percpu_rwsem", "be", "supposed", "to", "work", "NUMBER", "Quoting", "from", "LINK", "rw", "semaphore", "NUMBER", "rst", "Locking", "for", "reading", "be", "very", "fast", "it", "uses", "RCU", "and", "it", "avoids", "any", "atomic", "instruction", "in", "the", "lock", "and", "unlock", "path", "NUMBER", "On", "the", "other", "hand", "locking", "for", "write", "be", "very", "expensive", "it", "calls", "synchronize_rcu", "that", "can", "take", "hundreds", "of", "milliseconds", "NUMBER", "I", "managed", "to", "reproduce", "the", "issue", "with", "this", "simple", "rust", "executable", "use", "kvm_ioctls", "Kvm", "use", "std", "time", "Instant", "Duration", "use", "std", "thread", "fn", "main", "thread", "sleep", "Duration", "from_millis", "NUMBER", "let", "kvm", "Kvm", "new", "NUMBER", "unwrap", "let", "start", "Instant", "now", "kvm", "NUMBER", "create_vm", "NUMBER", "unwrap", "let", "elapse", "start", "NUMBER", "elapse", "println", "Elapsed", "NUMBER", "elapse", "and", "this", "small", "script", "that", "emulates", "what", "jailer", "do", "bin", "bash", "cgcreate", "g", "cpuset", "firecracker", "echo", "NUMBER", "NUMBER", "sys", "fs", "cgroup", "cpuset", "firecracker", "cpuset", "NUMBER", "cpus", "echo", "NUMBER", "sys", "fs", "cgroup", "cpuset", "firecracker", "cpuset", "NUMBER", "mems", "echo", "sys", "fs", "cgroup", "cpuset", "firecracker", "tasks", "NUMBER", "test", "Note", "that", "if", "we", "don", "t", "add", "the", "extra", "sleep", "thread", "sleep", "Duration", "from_millis", "NUMBER", "The", "issue", "doesn", "t", "reproduce", "NUMBER", "When", "a", "writer", "request", "access", "to", "some", "shared", "data", "the", "RCU", "schedules", "it", "on", "a", "queue", "and", "then", "waits", "for", "at", "least", "one", "so", "call", "grace", "period", "to", "pass", "NUMBER", "A", "grace", "period", "be", "a", "period", "in", "witch", "the", "RCU", "waits", "for", "all", "the", "previously", "acquired", "read", "locks", "to", "be", "release", "NUMBER", "A", "grace", "period", "ends", "after", "all", "the", "CPUs", "go", "through", "a", "quiescent", "state", "NUMBER", "Grace", "periods", "can", "be", "quite", "long", "NUMBER", "When", "we", "start", "the", "process", "echo", "sys", "fs", "cgroup", "cpuset", "firecracker", "tasks", "NUMBER", "test", "a", "write", "lock", "request", "be", "be", "performed", "and", "a", "grace", "period", "starts", "NUMBER", "If", "we", "don", "t", "add", "the", "extra", "thread", "sleep", "Duration", "from_millis", "NUMBER", "when", "we", "get", "to", "kvm", "NUMBER", "create_vm", "NUMBER", "unwrap", "the", "previous", "grace", "period", "be", "already", "in", "progress", "so", "AFAIU", "the", "RCU", "do", "an", "optimization", "where", "the", "new", "lock", "request", "be", "merge", "in", "the", "same", "grace", "period", "with", "the", "previous", "one", "NUMBER", "So", "we", "don", "t", "have", "to", "wait", "for", "a", "new", "grace", "period", "NUMBER", "Otherwise", "if", "we", "do", "thread", "sleep", "Duration", "from_millis", "NUMBER", "the", "grace", "period", "generate", "by", "the", "first", "lock", "request", "ends", "and", "kvm", "NUMBER", "create_vm", "NUMBER", "unwrap", "asks", "for", "a", "new", "grace", "period", "ending", "up", "waiting", "NUMBER", "NUMBER", "ms", "NUMBER", "This", "be", "the", "desired", "RCU", "behavior", "NUMBER", "And", "it", "looks", "like", "the", "cgroup_init", "code", "has", "a", "relate", "optimization", "LINK", "L", "NUMBER", "to", "drive", "down", "the", "boot", "time", "NUMBER", "Unfortunately", "this", "only", "works", "before", "the", "first", "use", "of", "the", "rcu_sync", "NUMBER", "I", "don", "t", "think", "there", "s", "any", "easy", "way", "around", "this", "issue", "NUMBER", "interested", "to", "help", "out", "Hi", "sandreim", "thanks", "for", "the", "information", "To", "provide", "you", "with", "more", "context", "we", "be", "NUMBER", "students", "in", "UT", "Austin", "s", "virtualization", "class", "and", "look", "forward", "to", "contribute", "to", "an", "open", "source", "project", "as", "part", "of", "our", "coursework", "Firecracker", "really", "attracts", "us", "as", "an", "exciting", "project", "to", "work", "on", "We", "will", "start", "from", "relatively", "simple", "issue", "but", "hopefully", "we", "can", "fix", "them", "all", "one", "by", "one", "NUMBER", "Will", "keep", "you", "posted", "as", "we", "start", "work", "on", "them", "Reason", "for", "This", "PR", "Merge", "v", "NUMBER", "to", "master", "Description", "of", "Changes", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "All", "add", "change", "functionality", "be", "test", "NUMBER", "Currently", "the", "jailer", "can", "be", "use", "only", "when", "Firecracker", "be", "linked", "with", "static", "musl", "not", "with", "dynamic", "glibc", "NUMBER", "The", "fact", "that", "the", "build", "command", "successfully", "build", "the", "jailer", "with", "glibc", "be", "misleading", "and", "outputs", "jailer", "binaries", "that", "do", "not", "work", "with", "the", "corresponding", "Firecracker", "binary", "NUMBER", "We", "should", "make", "sure", "that", "when", "we", "compile", "the", "source", "code", "we", "only", "build", "the", "jailer", "if", "the", "specified", "toolchain", "be", "musl", "NUMBER", "One", "way", "of", "doing", "this", "would", "be", "to", "modify", "devtool", "NUMBER", "However", "we", "should", "first", "investigate", "for", "any", "options", "we", "could", "add", "in", "the", "Cargo", "NUMBER", "toml", "file", "to", "restrict", "compilation", "based", "on", "toolchain", "NUMBER", "Hi", "after", "spending", "few", "hours", "on", "the", "analysis", "NUMBER", "Following", "options", "can", "possibly", "be", "ruled", "out", "a", "build", "only", "for", "target", "abi", "musl", "like", "flag", "in", "Cargo", "NUMBER", "toml", "at", "crate", "level", "be", "not", "available", "NUMBER", "a", "custom", "build", "NUMBER", "rs", "at", "project", "level", "which", "can", "dynamically", "modify", "workspace", "dependencies", "be", "not", "available", "NUMBER", "Have", "also", "checked", "if", "we", "can", "place", "a", "build", "NUMBER", "rs", "at", "the", "root", "of", "jailer", "crate", "level", "that", "can", "skip", "build", "itself", "if", "not", "matching", "specified", "ABI", "NUMBER", "This", "be", "not", "available", "too", "NUMBER", "Would", "like", "to", "explore", "more", "if", "there", "be", "any", "pointers", "NUMBER", "Otherwise", "devtool", "modification", "seems", "to", "be", "the", "only", "option", "NUMBER", "Thanks", "Krishna", "Kumar", "NUMBER", "Hello", "NUMBER", "Thank", "you", "for", "the", "interest", "in", "this", "issue", "and", "for", "taking", "the", "time", "to", "investigate", "NUMBER", "In", "regards", "to", "the", "last", "point", "you", "made", "about", "the", "build", "NUMBER", "rs", "file", "for", "jailer", "I", "think", "there", "may", "be", "an", "option", "NUMBER", "According", "to", "the", "docs", "LINK", "lang", "NUMBER", "org", "cargo", "reference", "build", "scripts", "NUMBER", "html", "life", "cycle", "of", "a", "build", "script", "if", "the", "build", "script", "returns", "an", "error", "code", "the", "build", "process", "be", "halted", "NUMBER", "We", "currently", "have", "a", "build", "script", "that", "be", "run", "for", "both", "the", "jailer", "and", "the", "firecracker", "binaries", "NUMBER", "We", "could", "update", "the", "script", "to", "check", "the", "targeted", "libc", "abi", "before", "build", "the", "jailer", "NUMBER", "We", "have", "two", "options", "here", "either", "display", "a", "warning", "or", "exiting", "with", "an", "error", "code", "NUMBER", "Let", "me", "discuss", "this", "with", "the", "team", "and", "I", "will", "get", "back", "to", "you", "when", "we", "reach", "a", "conclusion", "NUMBER", "Seems", "that", "there", "be", "no", "way", "of", "specify", "workspace", "members", "LINK", "lang", "cargo", "issue", "NUMBER", "based", "on", "platform", "NUMBER", "What", "I", "see", "as", "the", "most", "elegant", "way", "of", "doing", "this", "be", "to", "add", "a", "default_members", "src", "firecracker", "in", "the", "root", "Cargo", "NUMBER", "toml", "and", "modify", "devtool", "to", "only", "build", "the", "jailer", "only", "for", "musl", "target", "NUMBER", "you", "can", "use", "cargo", "build", "p", "jailer", "for", "that", "NUMBER", "After", "extensive", "discussions", "in", "the", "team", "we", "decided", "to", "go", "for", "the", "option", "mention", "above", "by", "dianpopa", "and", "acatangiu", "NUMBER", "That", "be", "add", "the", "firecracker", "binary", "crate", "as", "the", "only", "default", "member", "of", "the", "workspace", "and", "modifying", "devtool", "to", "run", "the", "two", "build", "commands", "in", "order", "to", "build", "both", "binaries", "only", "for", "musl", "cargo", "build", "and", "cargo", "build", "release", "NUMBER", "This", "would", "also", "imply", "an", "update", "in", "the", "CHANGELOG", "NUMBER", "md", "NUMBER", "krishnakumar", "NUMBER", "a", "NUMBER", "be", "you", "interested", "in", "contribute", "a", "fix", "for", "this", "issue", "If", "so", "please", "tell", "us", "and", "get", "in", "touch", "if", "you", "need", "any", "guidance", "NUMBER", "Sure", "alindima", "would", "work", "on", "it", "and", "come", "up", "with", "a", "PR", "on", "this", "NUMBER", "Will", "let", "you", "know", "in", "case", "I", "need", "help", "NUMBER", "Thanks", "NUMBER", "Fixed", "by", "LINK", "microvm", "firecracker", "pull", "NUMBER", "Reason", "for", "This", "PR", "Vsock", "device", "did", "not", "restore", "properly", "after", "loading", "a", "microvm", "from", "snapshot", "NUMBER", "Description", "of", "Changes", "Fixed", "vsock", "restore", "and", "update", "snapshot", "integration", "test", "to", "use", "a", "vsock", "device", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "All", "add", "change", "functionality", "be", "test", "NUMBER", "nit", "I", "guess", "it", "would", "be", "nice", "to", "also", "adda", "an", "changelog", "entry", "Changelog", "update", "NUMBER", "utils_vsock", "NUMBER", "py", "should", "be", "located", "in", "test", "framework", "utils_vsock", "NUMBER", "py", "as", "it", "do", "not", "contain", "any", "test", "NUMBER", "dianpopa", "gc", "plp", "georgepisaltu", "please", "review", "the", "latest", "change", "Changes", "look", "good", "but", "the", "commit", "be", "a", "bit", "weird", "NUMBER", "I", "suggest", "either", "a", "single", "commit", "with", "all", "change", "or", "preferred", "two", "commit", "one", "with", "the", "firecracker", "code", "change", "fix", "and", "one", "with", "the", "test", "change", "regression", "test", "vsock", "refactoring", "Done", "The", "integration", "test", "in", "PR", "NUMBER", "will", "fail", "if", "unversioned", "badly", "version", "state", "change", "happen", "NUMBER", "But", "still", "there", "be", "corner", "cases", "when", "the", "deserialization", "could", "be", "successful", "and", "garbage", "state", "would", "be", "loaded", "NUMBER", "However", "I", "believe", "this", "be", "highly", "unlikely", "to", "happen", "NUMBER", "Interested", "to", "help", "out", "Reason", "for", "This", "PR", "Move", "MacAddr", "from", "dumbo", "crate", "to", "net", "Fixes", "NUMBER", "Description", "of", "Changes", "Move", "MacAddr", "from", "dumbo", "crate", "to", "net", "NUMBER", "Update", "references", "to", "reflect", "change", "NUMBER", "Remove", "now", "unneed", "dependency", "on", "dumbo", "from", "devices", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "X", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "X", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "X", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "X", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "X", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "X", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "X", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "X", "All", "add", "change", "functionality", "be", "test", "NUMBER", "iulianbarbu", "thanks", "for", "the", "review", "I", "have", "update", "the", "git", "history", "and", "made", "the", "request", "change", "NUMBER", "I", "m", "not", "sure", "if", "the", "form", "be", "to", "put", "PR", "request", "change", "into", "their", "own", "commit", "or", "not", "please", "let", "me", "know", "if", "you", "would", "like", "me", "to", "change", "this", "NUMBER", "This", "line", "can", "also", "be", "remove", "now", "LINK", "NUMBER", "MoveMacAddrToUtils", "src", "vmm", "Cargo", "NUMBER", "toml", "L", "NUMBER", "I", "suggest", "modifying", "the", "commit", "title", "to", "dumbo", "move", "mac", "module", "to", "utils", "At", "the", "end", "of", "the", "commit", "body", "you", "can", "write", "Fixes", "NUMBER", "which", "will", "trigger", "the", "closing", "of", "the", "issue", "once", "the", "PR", "be", "merge", "NUMBER", "iulianbarbu", "dianpopa", "thanks", "both", "for", "taking", "the", "time", "to", "review", "I", "have", "remove", "the", "dependency", "on", "dumbo", "as", "well", "as", "update", "the", "commit", "message", "NUMBER", "If", "there", "be", "be", "any", "more", "change", "you", "would", "like", "me", "to", "make", "please", "let", "me", "know", "NUMBER", "serban", "NUMBER", "there", "be", "this", "issue", "LINK", "microvm", "firecracker", "issue", "NUMBER", "which", "never", "get", "resolve", "cause", "we", "still", "do", "not", "use", "BytedValue", "from", "vm", "memory", "see", "discussion", "there", "NUMBER", "Would", "you", "mind", "doing", "this", "change", "in", "this", "PR", "not", "necessary", "just", "a", "nice", "to", "have", "thanks", "Is", "be", "It", "be", "NUMBER", "Also", "change", "else", "to", "otherwise", "for", "sentence", "clarity", "Reason", "for", "This", "PR", "Fixing", "minor", "typo", "in", "docs", "Description", "of", "Changes", "Is", "be", "It", "be", "NUMBER", "Also", "change", "else", "to", "otherwise", "for", "sentence", "clarity", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "All", "add", "change", "functionality", "be", "test", "NUMBER", "Thanks", "I", "will", "do", "that", "once", "I", "have", "a", "moment", "to", "do", "so", "NUMBER", "ok", "I", "amended", "the", "commit", "and", "rebased", "serban", "NUMBER", "thanks", "for", "your", "patience", "NUMBER", "CI", "fail", "on", "a", "PR", "that", "do", "not", "impact", "fail", "test", "NUMBER", "See", "LINK", "pr", "NUMBER", "s", "NUMBER", "amazonaws", "NUMBER", "com", "pr", "logs", "x", "NUMBER", "_", "NUMBER", "NUMBER", "dianpopa", "firecracker", "NUMBER", "f", "NUMBER", "log", "NUMBER", "html", "Another", "unrelated", "fail", "was", "notice", "here", "LINK", "pr", "NUMBER", "s", "NUMBER", "amazonaws", "NUMBER", "com", "pr", "logs", "x", "NUMBER", "_", "NUMBER", "NUMBER", "dianpopa", "firecracker", "bcfbb", "NUMBER", "a", "NUMBER", "log", "NUMBER", "html", "NUMBER", "TAG", "Moved", "to", "its", "own", "issue", "LINK", "microvm", "firecracker", "issue", "NUMBER", "After", "build", "the", "source", "code", "and", "use", "the", "Rust", "lldb", "debugs", "Firecracker", "binary", "on", "debug", "path", "NUMBER", "The", "absolutes", "path", "be", "firecracker", "build", "cargo_target", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "gnu", "debug", "NUMBER", "I", "execute", "command", "line", "below", "NUMBER", "lldb", "NUMBER", "firecracker", "lldb", "run", "api", "sock", "tmp", "firecracker", "NUMBER", "socket", "NUMBER", "Start", "guest", "machine", "with", "cURL", "command", "line", "calls", "to", "the", "micro", "api", "server", "on", "Firecracker", "NUMBER", "Firecracker", "can", "run", "normal", "status", "to", "prompt", "waits", "received", "command", "line", "from", "user", "NUMBER", "If", "we", "want", "to", "list", "source", "specified", "break", "point", "to", "the", "line", "of", "code", "How", "can", "list", "source", "code", "for", "setting", "debug", "point", "The", "command", "line", "below", "not", "show", "any", "source", "during", "try", "to", "debug", "the", "Firecracker", "NUMBER", "lldb", "source", "list", "Hi", "sumatejit", "I", "be", "able", "to", "reproduce", "the", "issue", "only", "when", "I", "compile", "use", "devtool", "tool", "devtool", "build", "and", "load", "the", "resulting", "binary", "with", "rust", "lldb", "from", "outside", "the", "docker", "container", "that", "s", "use", "for", "build", "NUMBER", "However", "if", "I", "compile", "with", "cargo", "directly", "it", "works", "cargo", "build", "lldb", "NUMBER", "firecracker", "lldb", "run", "api", "sock", "tmp", "firecracker", "NUMBER", "socket", "NUMBER", "NUMBER", "root", "localhost", "Process", "NUMBER", "stopped", "thread", "NUMBER", "name", "firecracker", "stop", "reason", "signal", "SIGSTOP", "frame", "NUMBER", "NUMBER", "x", "NUMBER", "dd", "NUMBER", "firecracker", "epoll_pwait", "NUMBER", "firecracker", "epoll_pwait", "NUMBER", "x", "NUMBER", "dd", "NUMBER", "TAG", "cmpl", "NUMBER", "x", "NUMBER", "eax", "NUMBER", "x", "NUMBER", "dda", "TAG", "movl", "eax", "r", "NUMBER", "d", "NUMBER", "x", "NUMBER", "ddd", "TAG", "jne", "NUMBER", "x", "NUMBER", "df", "NUMBER", "TAG", "NUMBER", "x", "NUMBER", "ddf", "TAG", "testq", "r", "NUMBER", "r", "NUMBER", "lldb", "source", "list", "NUMBER", "fn", "main", "NUMBER", "LOGGER", "NUMBER", "NUMBER", "configure", "Some", "DEFAULT_INSTANCE_ID", "NUMBER", "to_string", "NUMBER", "NUMBER", "expect", "Failed", "to", "register", "logger", "NUMBER", "NUMBER", "if", "let", "Err", "e", "register_signal_handlers", "NUMBER", "error", "Failed", "to", "register", "signal", "handlers", "e", "NUMBER", "process", "exit", "i", "NUMBER", "from", "vmm", "FC_EXIT_CODE_GENERIC_ERROR", "NUMBER", "NUMBER", "Could", "you", "try", "to", "build", "the", "executable", "use", "cargo", "and", "see", "if", "it", "works", "Note", "for", "new", "user", "cannot", "run", "with", "cargo", "default", "toolchain", "such", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "gnu", "NUMBER", "You", "can", "add", "new", "toolchain", "for", "compile", "the", "Firecracker", "with", "command", "line", "below", "NUMBER", "rustup", "target", "add", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "musl", "After", "this", "we", "can", "compile", "source", "code", "with", "new", "toolchain", "add", "to", "Rustup", "by", "use", "command", "line", "NUMBER", "cargo", "build", "target", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "musl", "verbose", "You", "can", "see", "the", "binary", "file", "at", "target", "toolchain", "like", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "musl", "debug", "NUMBER", "This", "path", "contains", "binary", "file", "for", "run", "on", "debug", "mode", "by", "show", "a", "source", "code", "NUMBER", "lldb", "run", "api", "sock", "tmp", "firecracker", "NUMBER", "socket", "Process", "NUMBER", "launched", "home", "vagrant", "workspacerust", "firecracker", "build", "cargo_target", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "musl", "debug", "firecracker", "x", "NUMBER", "_", "NUMBER", "Process", "NUMBER", "stopped", "thread", "NUMBER", "name", "firecracker", "stop", "reason", "signal", "SIGSTOP", "frame", "NUMBER", "NUMBER", "x", "NUMBER", "cee", "NUMBER", "firecracker", "__syscall", "NUMBER", "firecracker", "__syscall", "NUMBER", "x", "NUMBER", "cee", "NUMBER", "TAG", "retq", "firecracker", "stub_dlsym", "NUMBER", "x", "NUMBER", "cee", "NUMBER", "TAG", "leaq", "NUMBER", "x", "NUMBER", "fca", "rip", "rdi", "NUMBER", "x", "NUMBER", "cee", "NUMBER", "e", "TAG", "subq", "NUMBER", "x", "NUMBER", "rsp", "NUMBER", "x", "NUMBER", "cee", "NUMBER", "TAG", "xorl", "eax", "eax", "lldb", "source", "list", "NUMBER", "fn", "main", "NUMBER", "LOGGER", "NUMBER", "NUMBER", "configure", "Some", "DEFAULT_INSTANCE_ID", "NUMBER", "to_string", "NUMBER", "NUMBER", "expect", "Failed", "to", "register", "logger", "NUMBER", "NUMBER", "if", "let", "Err", "e", "register_signal_handlers", "NUMBER", "error", "Failed", "to", "register", "signal", "handlers", "e", "NUMBER", "process", "exit", "i", "NUMBER", "from", "vmm", "FC_EXIT_CODE_GENERIC_ERROR", "NUMBER", "NUMBER", "For", "my", "opinion", "we", "can", "close", "this", "issue", "NUMBER", "The", "boot", "timer", "device", "support", "logging", "the", "boot", "time", "of", "the", "guest", "since", "InstanceStart", "command", "NUMBER", "In", "the", "past", "this", "was", "handle", "use", "PIO", "for", "x", "NUMBER", "_", "NUMBER", "and", "MMIO", "for", "aarch", "NUMBER", "In", "order", "to", "unify", "the", "code", "in", "a", "generic", "mechanism", "we", "came", "up", "with", "a", "MMIO", "boot", "timer", "device", "NUMBER", "The", "implementation", "for", "x", "NUMBER", "_", "NUMBER", "involved", "change", "PIO", "writes", "to", "NUMBER", "x", "NUMBER", "f", "NUMBER", "to", "MMIO", "writes", "to", "NUMBER", "xd", "NUMBER", "For", "aarch", "NUMBER", "the", "mechanism", "did", "not", "change", "NUMBER", "This", "boot", "time", "functionality", "be", "use", "only", "during", "test", "therefore", "we", "decided", "to", "load", "the", "device", "only", "when", "specified", "instead", "of", "activating", "it", "by", "default", "NUMBER", "A", "dedicated", "boot", "timer", "parameter", "would", "be", "add", "to", "the", "cmdline", "options", "in", "order", "to", "request", "the", "boot", "timer", "feature", "NUMBER", "There", "be", "also", "the", "option", "of", "add", "a", "test", "mode", "parameter", "which", "has", "the", "right", "semantics", "about", "not", "use", "this", "in", "production", "Fixed", "by", "NUMBER", "Reason", "for", "This", "PR", "Fix", "for", "NUMBER", "Improving", "version", "output", "to", "include", "number", "of", "commit", "over", "latest", "tag", "commit", "hash", "and", "dirty", "flag", "NUMBER", "Description", "of", "Changes", "Added", "a", "build", "script", "that", "on", "every", "devtool", "build", "sets", "the", "FIRECRACKER_VERSION", "environment", "variable", "to", "the", "output", "of", "git", "describe", "dirty", "command", "NUMBER", "This", "be", "a", "special", "environment", "variable", "which", "be", "embedded", "in", "the", "executable", "code", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "x", "All", "add", "change", "functionality", "be", "test", "NUMBER", "I", "like", "the", "idea", "and", "the", "approach", "but", "in", "its", "current", "form", "this", "PR", "would", "make", "our", "release", "binaries", "also", "report", "commit", "hash", "instead", "of", "plain", "version", "numbers", "NUMBER", "NUMBER", "gd", "NUMBER", "instead", "of", "v", "NUMBER", "as", "it", "use", "to", "be", "NUMBER", "Do", "we", "want", "to", "change", "our", "release", "version", "numbering", "policy", "like", "so", "or", "should", "add", "functionality", "to", "this", "PR", "to", "treat", "release", "differently", "I", "would", "use", "verbose", "parameter", "to", "version", "and", "only", "there", "add", "info", "on", "branch", "and", "githash", "on", "top", "of", "current", "info", "NUMBER", "Thank", "you", "for", "your", "feedback", "NUMBER", "I", "agree", "with", "you", "maybe", "it", "would", "be", "best", "if", "the", "release", "binary", "would", "show", "only", "the", "simplified", "version", "number", "from", "Cargo", "NUMBER", "toml", "NUMBER", "I", "also", "agree", "with", "raduiliescu", "that", "it", "would", "be", "useful", "to", "have", "a", "verbose", "parameter", "for", "the", "version", "just", "in", "case", "somebody", "needs", "it", "NUMBER", "Are", "there", "any", "concerns", "regard", "this", "approach", "I", "would", "use", "verbose", "parameter", "to", "version", "and", "only", "there", "add", "info", "on", "branch", "and", "githash", "on", "top", "of", "current", "info", "NUMBER", "That", "should", "work", "but", "it", "makes", "it", "harder", "to", "see", "whether", "a", "particular", "binary", "be", "a", "release", "or", "a", "custom", "build", "NUMBER", "version", "would", "be", "the", "same", "for", "both", "while", "verbose", "would", "differ", "only", "by", "commit", "hash", "so", "it", "requires", "the", "user", "to", "go", "to", "the", "repo", "and", "compare", "hashes", "to", "find", "out", "if", "that", "binary", "be", "a", "release", "binary", "or", "a", "custom", "build", "NUMBER", "I", "d", "like", "it", "if", "we", "could", "use", "git", "tags", "to", "make", "that", "differentiation", "and", "do", "something", "like", "use", "version", "which", "outputs", "for", "a", "release", "binary", "local", "HEAD", "be", "at", "a", "particular", "vX", "NUMBER", "Y", "NUMBER", "Z", "tag", "output", "be", "vX", "NUMBER", "Y", "NUMBER", "Z", "for", "other", "build", "local", "HEAD", "do", "not", "match", "any", "release", "tag", "output", "be", "vX", "NUMBER", "Y", "NUMBER", "Z", "branch", "commit", "dirty", "WDYT", "Well", "actually", "the", "behaviour", "that", "be", "currently", "implement", "in", "this", "PR", "be", "the", "one", "you", "mention", "NUMBER", "The", "git", "describe", "dirty", "command", "outputs", "just", "vX", "NUMBER", "Y", "NUMBER", "Z", "if", "HEAD", "matches", "a", "tag", "NUMBER", "The", "command", "only", "appends", "the", "commit", "and", "dirty", "flags", "if", "it", "do", "not", "match", "a", "tag", "NUMBER", "I", "have", "find", "that", "there", "might", "be", "something", "fundamentally", "flawed", "about", "the", "approach", "NUMBER", "The", "build", "NUMBER", "rs", "script", "that", "I", "have", "introduce", "be", "per", "package", "NUMBER", "That", "means", "that", "it", "runs", "when", "cargo", "detects", "that", "a", "change", "has", "occur", "in", "that", "package", "NUMBER", "The", "package", "in", "this", "case", "be", "firecracker", "NUMBER", "However", "there", "be", "change", "that", "should", "trigger", "the", "re", "run", "even", "if", "they", "didn", "t", "happen", "inside", "the", "firecracker", "crate", "NUMBER", "For", "example", "an", "update", "in", "the", "jailer", "crate", "should", "also", "potentially", "be", "reflected", "in", "the", "version", "number", "of", "the", "firecracker", "crate", "NUMBER", "One", "way", "of", "fix", "this", "be", "by", "use", "in", "the", "build", "NUMBER", "rs", "script", "an", "instruction", "like", "cargo", "rerun", "if", "change", "PATH", "NUMBER", "Still", "this", "be", "not", "enough", "because", "it", "only", "do", "a", "shallow", "check", "according", "to", "the", "docs", "LINK", "lang", "NUMBER", "org", "cargo", "reference", "build", "scripts", "NUMBER", "html", "cargorerun", "if", "changedpath", "NUMBER", "Therefore", "if", "a", "file", "from", "a", "nested", "folder", "be", "change", "this", "wouldn", "t", "be", "reflected", "in", "the", "version", "number", "NUMBER", "This", "could", "be", "mitigated", "by", "make", "the", "script", "loop", "through", "all", "the", "file", "and", "folders", "recursively", "add", "each", "of", "them", "to", "a", "separate", "cargo", "rerun", "if", "change", "PATH", "instruction", "while", "also", "checking", "the", "NUMBER", "gitignore", "file", "NUMBER", "This", "could", "also", "be", "a", "build", "time", "performance", "impact", "and", "seems", "like", "a", "great", "overkill", "NUMBER", "This", "could", "be", "fix", "if", "there", "were", "a", "single", "top", "level", "crate", "NUMBER", "We", "could", "then", "define", "the", "build", "NUMBER", "rs", "script", "to", "watch", "for", "change", "in", "the", "entire", "package", "NUMBER", "Currently", "since", "the", "top", "level", "Cargo", "NUMBER", "toml", "only", "defines", "two", "separate", "workspaces", "this", "isn", "t", "possible", "NUMBER", "A", "very", "hacky", "way", "of", "solving", "this", "would", "be", "to", "perform", "a", "simple", "operation", "like", "touch", "src", "firecracker", "main", "NUMBER", "rs", "to", "artificially", "trigger", "the", "re", "run", "of", "the", "build", "script", "get", "the", "up", "to", "date", "git", "describe", "result", "This", "problem", "be", "rooted", "in", "the", "fact", "that", "the", "firecracker", "crate", "version", "and", "the", "firecracker", "repository", "version", "be", "not", "the", "same", "thing", "since", "the", "repo", "also", "include", "other", "crates", "like", "the", "jailer", "for", "example", "NUMBER", "Some", "help", "and", "feedback", "on", "this", "would", "be", "greatly", "appreciated", "NUMBER", "The", "team", "and", "I", "synced", "offline", "on", "this", "issue", "NUMBER", "The", "behaviour", "of", "git", "describe", "dirty", "be", "actually", "the", "behaviour", "we", "expect", "that", "be", "when", "a", "binary", "be", "build", "from", "a", "release", "tag", "the", "output", "returned", "by", "the", "command", "be", "just", "the", "tag", "vX", "NUMBER", "Y", "NUMBER", "Z", "and", "only", "when", "a", "binary", "be", "build", "from", "a", "repo", "that", "has", "some", "commit", "over", "a", "release", "tag", "or", "some", "dirty", "modify", "and", "uncommitted", "file", "do", "this", "command", "output", "the", "long", "version", "vX", "NUMBER", "Y", "NUMBER", "Z", "nr", "hash", "dirty", "NUMBER", "This", "be", "actually", "what", "we", "want", "NUMBER", "In", "regards", "to", "the", "implementation", "the", "concerns", "outlined", "in", "the", "previous", "comment", "still", "remain", "NUMBER", "I", "have", "explored", "on", "the", "latest", "commit", "an", "option", "that", "do", "a", "touch", "command", "on", "the", "build", "NUMBER", "rs", "file", "as", "the", "last", "step", "of", "the", "build", "script", "NUMBER", "This", "artificially", "update", "the", "time", "when", "the", "build", "script", "was", "modify", "and", "automatically", "triggers", "a", "re", "run", "on", "every", "build", "NUMBER", "This", "approach", "seems", "to", "work", "and", "has", "minimal", "impact", "NUMBER", "WDYT", "The", "team", "and", "I", "synced", "offline", "on", "this", "issue", "NUMBER", "The", "behaviour", "of", "git", "describe", "dirty", "be", "actually", "the", "behaviour", "we", "expect", "that", "be", "when", "a", "binary", "be", "build", "from", "a", "release", "tag", "the", "output", "returned", "by", "the", "command", "be", "just", "the", "tag", "vX", "NUMBER", "Y", "NUMBER", "Z", "and", "only", "when", "a", "binary", "be", "build", "from", "a", "repo", "that", "has", "some", "commit", "over", "a", "release", "tag", "or", "some", "dirty", "modify", "and", "uncommitted", "file", "do", "this", "command", "output", "the", "long", "version", "vX", "NUMBER", "Y", "NUMBER", "Z", "nr", "hash", "dirty", "NUMBER", "This", "be", "actually", "what", "we", "want", "NUMBER", "In", "regards", "to", "the", "implementation", "the", "concerns", "outlined", "in", "the", "previous", "comment", "still", "remain", "NUMBER", "I", "have", "explored", "on", "the", "latest", "commit", "an", "option", "that", "do", "a", "touch", "command", "on", "the", "build", "NUMBER", "rs", "file", "as", "the", "last", "step", "of", "the", "build", "script", "NUMBER", "This", "artificially", "update", "the", "time", "when", "the", "build", "script", "was", "modify", "and", "automatically", "triggers", "a", "re", "run", "on", "every", "build", "NUMBER", "This", "approach", "seems", "to", "work", "and", "has", "minimal", "impact", "NUMBER", "WDYT", "This", "be", "clearly", "an", "improvement", "NUMBER", "I", "have", "no", "other", "concerns", "to", "add", "NUMBER", "Putting", "this", "on", "hold", "while", "we", "discuss", "a", "test", "strategy", "After", "syncing", "with", "the", "team", "we", "decided", "for", "now", "to", "remove", "the", "integration", "test", "for", "the", "version", "flag", "Does", "this", "change", "have", "any", "impact", "on", "reproducible", "build", "Does", "this", "change", "have", "any", "impact", "on", "reproducible", "build", "As", "long", "as", "the", "folder", "containing", "the", "sources", "has", "the", "git", "directory", "and", "information", "reproducible", "build", "should", "not", "be", "affected", "I", "have", "yet", "to", "investigate", "for", "a", "git", "command", "in", "order", "to", "also", "set", "the", "dirty", "flag", "when", "there", "be", "any", "new", "unstaged", "and", "uncommited", "file", "add", "NUMBER", "The", "git", "describe", "dirty", "command", "do", "not", "report", "this", "as", "dirty", "NUMBER", "WDYT", "Is", "this", "what", "we", "want", "I", "have", "yet", "to", "investigate", "for", "a", "git", "command", "in", "order", "to", "also", "set", "the", "dirty", "flag", "when", "there", "be", "any", "new", "unstaged", "and", "uncommited", "file", "add", "NUMBER", "The", "git", "describe", "dirty", "command", "do", "not", "report", "this", "as", "dirty", "NUMBER", "WDYT", "Is", "this", "what", "we", "want", "I", "have", "add", "in", "the", "latest", "commit", "a", "bash", "command", "that", "has", "the", "desired", "behaviour", "NUMBER", "What", "do", "you", "think", "Closing", "this", "in", "favor", "of", "NUMBER", "Hi", "guys", "_I", "m", "curious", "that", "When", "we", "use", "SendCtrlAltDel", "API", "to", "shutdown", "microvm", "exactly", "which", "service", "routine", "we", "will", "trigger", "in", "guest", "os", "_", "Since", "my", "guest", "os", "stuck", "on", "SendCtrlAltDel", "reboot", "System", "halted", "bash", "NUMBER", "NUMBER", "systemd", "NUMBER", "Received", "SIGINT", "NUMBER", "NUMBER", "systemd", "NUMBER", "Cannot", "add", "dependency", "job", "for", "unit", "systemd", "update", "utmp", "runlevel", "NUMBER", "service", "ignoring", "Unit", "not", "find", "NUMBER", "NUMBER", "systemd", "NUMBER", "Starting", "Update", "UTMP", "about", "System", "Runlevel", "Changes", "NUMBER", "Starting", "Update", "UTMP", "about", "System", "Runlevel", "Changes", "NUMBER", "NUMBER", "systemd", "NUMBER", "Stopped", "target", "Kata", "Containers", "Agent", "Target", "NUMBER", "OK", "Stopped", "target", "Kata", "Containers", "Agent", "Target", "NUMBER", "NUMBER", "systemd", "NUMBER", "Stopping", "Kata", "Containers", "debug", "console", "NUMBER", "Stopping", "Kata", "Containers", "debug", "console", "NUMBER", "NUMBER", "systemd", "NUMBER", "Stopping", "Kata", "Containers", "Agent", "NUMBER", "Stopping", "Kata", "Containers", "Agent", "NUMBER", "NUMBER", "systemd", "NUMBER", "Stopped", "target", "Timers", "NUMBER", "OK", "Stopped", "target", "Timers", "NUMBER", "NUMBER", "systemd", "NUMBER", "Stopped", "Daily", "Cleanup", "of", "Temporary", "Directories", "NUMBER", "OK", "Stopped", "Daily", "Cleanup", "of", "Temporary", "Directories", "NUMBER", "NUMBER", "systemd", "NUMBER", "Started", "Update", "UTMP", "about", "System", "Runlevel", "Changes", "NUMBER", "OK", "Started", "Update", "UTMP", "about", "System", "Runlevel", "Changes", "NUMBER", "NUMBER", "systemd", "NUMBER", "Shutting", "down", "NUMBER", "NUMBER", "printk", "systemd", "shutdow", "NUMBER", "output", "lines", "suppressed", "due", "to", "ratelimiting", "NUMBER", "systemd", "shutdown", "NUMBER", "Syncing", "filesystems", "and", "block", "devices", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Sending", "SIGTERM", "to", "remaining", "processes", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Sending", "SIGKILL", "to", "remaining", "processes", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Unmounting", "file", "systems", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Remounting", "tmp", "read", "only", "in", "with", "options", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Unmounting", "tmp", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Remounting", "read", "only", "in", "with", "options", "error", "remount", "ro", "data", "ordered", "NUMBER", "NUMBER", "EXT", "NUMBER", "fs", "vda", "NUMBER", "re", "mounted", "NUMBER", "Opts", "error", "remount", "ro", "data", "ordered", "NUMBER", "systemd", "shutdown", "NUMBER", "Remounting", "read", "only", "in", "with", "options", "error", "remount", "ro", "data", "ordered", "NUMBER", "NUMBER", "EXT", "NUMBER", "fs", "vda", "NUMBER", "re", "mounted", "NUMBER", "Opts", "error", "remount", "ro", "data", "ordered", "NUMBER", "systemd", "shutdown", "NUMBER", "All", "filesystems", "unmounted", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Deactivating", "swaps", "NUMBER", "NUMBER", "atkbd", "serio", "NUMBER", "shutdown", "NUMBER", "i", "NUMBER", "i", "NUMBER", "shutdown", "NUMBER", "serial", "NUMBER", "serial", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "PM", "Calling", "i", "NUMBER", "A_shutdown", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "reboot", "System", "halted", "Previously", "I", "wondered", "that", "maybe", "in", "systemd", "the", "CTRL", "ALT", "DEL", "key", "sequence", "triggers", "the", "ctrl", "alt", "del", "NUMBER", "target", "which", "by", "default", "lives", "in", "the", "system", "path", "lib", "systemd", "system", "ctrl", "alt", "del", "NUMBER", "target", "on", "Ubuntu", "and", "then", "it", "starts", "the", "systemd", "reboot", "NUMBER", "service", "NUMBER", "Eventually", "it", "will", "call", "ExecStart", "usr", "bin", "systemctl", "force", "reboot", "bash", "NUMBER", "cat", "lib", "systemd", "system", "systemd", "reboot", "NUMBER", "service", "This", "file", "be", "part", "of", "systemd", "NUMBER", "systemd", "be", "free", "software", "you", "can", "redistribute", "it", "and", "or", "modify", "it", "under", "the", "terms", "of", "the", "GNU", "Lesser", "General", "Public", "License", "as", "publish", "by", "the", "Free", "Software", "Foundation", "either", "version", "NUMBER", "of", "the", "License", "or", "at", "your", "option", "any", "later", "version", "NUMBER", "Unit", "Description", "Reboot", "Documentation", "man", "systemd", "halt", "NUMBER", "service", "NUMBER", "DefaultDependencies", "no", "Requires", "shutdown", "NUMBER", "target", "umount", "NUMBER", "target", "final", "NUMBER", "target", "After", "shutdown", "NUMBER", "target", "umount", "NUMBER", "target", "final", "NUMBER", "target", "Service", "Type", "oneshot", "ExecStart", "usr", "bin", "systemctl", "force", "reboot", "_However", "if", "I", "manually", "run", "ExecStart", "usr", "bin", "systemctl", "force", "reboot", "the", "guest", "os", "could", "exit", "normally", "NUMBER", "_", "bash", "NUMBER", "usr", "bin", "systemctl", "force", "reboot", "NUMBER", "systemd", "NUMBER", "Shutting", "down", "NUMBER", "bash", "NUMBER", "NUMBER", "printk", "systemd", "shutdow", "NUMBER", "output", "lines", "suppressed", "due", "to", "ratelimiting", "NUMBER", "systemd", "shutdown", "NUMBER", "Syncing", "filesystems", "and", "block", "devices", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Sending", "SIGTERM", "to", "remaining", "processes", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Sending", "SIGKILL", "to", "remaining", "processes", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Unmounting", "file", "systems", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Remounting", "tmp", "read", "only", "in", "with", "options", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Unmounting", "tmp", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Remounting", "read", "only", "in", "with", "options", "error", "remount", "ro", "data", "ordered", "NUMBER", "NUMBER", "EXT", "NUMBER", "fs", "vda", "NUMBER", "re", "mounted", "NUMBER", "Opts", "error", "remount", "ro", "data", "ordered", "NUMBER", "systemd", "shutdown", "NUMBER", "Remounting", "read", "only", "in", "with", "options", "error", "remount", "ro", "data", "ordered", "NUMBER", "NUMBER", "EXT", "NUMBER", "fs", "vda", "NUMBER", "re", "mounted", "NUMBER", "Opts", "error", "remount", "ro", "data", "ordered", "NUMBER", "systemd", "shutdown", "NUMBER", "All", "filesystems", "unmounted", "NUMBER", "NUMBER", "systemd", "shutdown", "NUMBER", "Deactivating", "swaps", "NUMBER", "NUMBER", "Unregister", "pv", "shared", "memory", "for", "cpu", "NUMBER", "NUMBER", "atkbd", "serio", "NUMBER", "shutdown", "NUMBER", "i", "NUMBER", "i", "NUMBER", "shutdown", "NUMBER", "serial", "NUMBER", "serial", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "shutdown", "NUMBER", "PM", "Calling", "i", "NUMBER", "A_shutdown", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "reboot", "Restarting", "system", "NUMBER", "reboot", "machine", "restart", "Reason", "for", "This", "PR", "Now", "that", "the", "project", "has", "be", "successfully", "migrated", "to", "NUMBER", "edition", "usage", "of", "extern", "crate", "be", "no", "longer", "required", "NUMBER", "In", "addition", "clippy", "report", "a", "few", "instances", "of", "unuse", "imports", "uneeded", "Box", "ing", "and", "unneed", "clones", "and", "out", "of", "date", "doctest", "implementations", "NUMBER", "Description", "of", "Changes", "Remove", "all", "declarations", "of", "extern", "crate", "Refactor", "doctests", "per", "clippy", "to", "remove", "fn", "main", "and", "correct", "imports", "Refactor", "unneed", "imports", "and", "broken", "macro", "imports", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "x", "All", "add", "change", "functionality", "be", "test", "NUMBER", "I", "m", "a", "bit", "confused", "NUMBER", "How", "did", "the", "previous", "switch", "to", "Rust", "NUMBER", "PR", "pass", "clippy", "test", "if", "clippy", "was", "report", "issue", "I", "m", "a", "bit", "confused", "NUMBER", "How", "did", "the", "previous", "switch", "to", "Rust", "NUMBER", "PR", "pass", "clippy", "test", "if", "clippy", "was", "report", "issue", "Good", "question", "It", "looks", "like", "the", "additional", "clippy", "warnings", "only", "appeared", "after", "remove", "the", "extern", "crate", "and", "macro_use", "declarations", "which", "be", "interesting", "NUMBER", "I", "will", "have", "some", "more", "time", "tomorrow", "to", "look", "into", "the", "current", "aarch", "NUMBER", "build", "failure", "NUMBER", "It", "appears", "to", "be", "a", "networking", "error", "or", "timeout", "some", "details", "from", "the", "log", "console", "NUMBER", "Command", "ssh", "q", "o", "ConnectTimeout", "NUMBER", "o", "StrictHostKeyChecking", "no", "o", "UserKnownHostsFile", "dev", "null", "i", "tmp", "fctest", "NUMBER", "yl", "NUMBER", "q", "NUMBER", "s", "NUMBER", "bdd", "NUMBER", "e", "NUMBER", "NUMBER", "de", "NUMBER", "NUMBER", "ac", "NUMBER", "a", "NUMBER", "f", "NUMBER", "f", "NUMBER", "b", "NUMBER", "fsfiles", "xenial", "NUMBER", "rootfs", "NUMBER", "id_rsa", "root", "NUMBER", "workers", "for", "i", "in", "seq", "NUMBER", "NUMBER", "do", "hash", "cat", "tmp", "vsock", "test", "NUMBER", "blob", "vsock_helper", "echo", "NUMBER", "NUMBER", "md", "NUMBER", "sum", "cut", "f", "NUMBER", "d", "hash", "d", "NUMBER", "eddd", "NUMBER", "e", "NUMBER", "f", "NUMBER", "ea", "NUMBER", "fabdb", "NUMBER", "e", "NUMBER", "workers", "workers", "do", "for", "w", "in", "workers", "do", "wait", "w", "exit", "NUMBER", "do", "NUMBER", "stderr", "socket", "Address", "family", "not", "support", "by", "protocol", "Have", "the", "same", "issue", "on", "NUMBER", "NUMBER", "Hi", "guys", "Got", "requirement", "from", "kata", "container", "we", "want", "a", "graceful", "way", "to", "power", "off", "the", "VM", "from", "external", "on", "aarch", "NUMBER", "since", "it", "s", "brutal", "to", "use", "kill", "NUMBER", "at", "the", "first", "place", "and", "may", "leave", "stale", "resource", "behind", "NUMBER", "Since", "x", "NUMBER", "_", "NUMBER", "has", "provide", "API", "action", "SendCtrlAltDel", "to", "gracefully", "shutdown", "the", "microvm", "from", "external", "NUMBER", "I", "d", "like", "to", "have", "the", "same", "functionality", "on", "AArch", "NUMBER", "Draft", "status", "Needs", "regression", "test", "before", "upgrading", "to", "mergeable", "PR", "NUMBER", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Description", "of", "Changes", "When", "doing", "a", "Block", "device", "backing", "file", "update", "we", "have", "to", "update", "multiple", "properties", "build", "from", "the", "backing", "file", "NUMBER", "The", "actual", "backing", "file", "path", "was", "not", "be", "update", "so", "snapshot", "would", "use", "the", "old", "path", "and", "snapshot", "restores", "would", "malfunction", "NUMBER", "Created", "DiskProperties", "helper", "object", "for", "setting", "up", "all", "Block", "field", "derived", "from", "the", "backing", "file", "NUMBER", "The", "object", "can", "be", "use", "in", "both", "construction", "and", "update", "paths", "for", "the", "Block", "device", "NUMBER", "It", "provides", "functionality", "for", "setting", "up", "all", "backing", "file", "relate", "field", "so", "that", "all", "relate", "logic", "be", "contained", "NUMBER", "This", "commit", "fix", "snapshot", "of", "uVMs", "with", "PATCHed", "block", "devices", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "x", "All", "add", "change", "functionality", "be", "test", "NUMBER", "Reason", "for", "This", "PR", "Resolves", "NUMBER", "Description", "of", "Changes", "This", "PR", "update", "all", "crates", "in", "firecracker", "to", "edition", "NUMBER", "NUMBER", "The", "goal", "of", "the", "PR", "be", "to", "change", "a", "_minimal_", "surface", "area", "of", "the", "project", "to", "make", "it", "NUMBER", "edition", "idiomatic", "NUMBER", "General", "note", "Non", "compilation", "adjustments", "were", "made", "in", "addition", "to", "import", "statements", "and", "idiom", "fix", "based", "on", "compiler", "and", "clippy", "suggestions", "NUMBER", "All", "instances", "of", "extern", "crate", "have", "be", "remove", "this", "change", "will", "come", "later", "fn", "main", "decls", "were", "remove", "from", "doctests", "remove", "unnecessary", "boxing", "cloning", "etc", "NUMBER", "I", "ve", "not", "tried", "to", "standardize", "code", "_style_", "outside", "of", "what", "pass", "the", "rustfmt", "integration", "test", "NUMBER", "Since", "different", "authors", "have", "worked", "on", "different", "crates", "I", "attempted", "to", "stick", "to", "whichever", "style", "they", "appeared", "to", "use", "especially", "in", "regards", "to", "import", "organization", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "x", "All", "add", "change", "functionality", "be", "test", "NUMBER", "This", "be", "currently", "passing", "NUMBER", "out", "of", "the", "NUMBER", "checks", "but", "I", "be", "having", "some", "trouble", "drilling", "down", "the", "error", "in", "the", "aarch", "NUMBER", "build", "NUMBER", "For", "some", "reason", "on", "that", "arch", "alone", "the", "vmm", "crate", "has", "an", "import", "resolution", "failure", "at", "L", "NUMBER", "of", "rpc_interface", "NUMBER", "rs", "specifically", "rust", "use", "crate", "builder", "self", "StartMicrovmError", "This", "do", "not", "occur", "in", "the", "integration", "suite", "test", "nor", "in", "the", "x", "NUMBER", "_", "NUMBER", "build", "NUMBER", "The", "cfg", "target_arch", "compiler", "directives", "be", "unchanged", "from", "the", "master", "branch", "in", "that", "file", "so", "I", "m", "not", "sure", "why", "exactly", "this", "be", "occurring", "NUMBER", "Reason", "for", "This", "PR", "When", "run", "performance", "test", "one", "might", "want", "to", "run", "them", "in", "a", "shielded", "and", "isolated", "environment", "where", "there", "be", "as", "little", "as", "possible", "system", "tasks", "interference", "NUMBER", "It", "can", "be", "do", "with", "external", "tool", "but", "this", "would", "imply", "add", "specific", "dependencies", "on", "the", "host", "NUMBER", "To", "avoid", "this", "but", "to", "also", "offer", "the", "bare", "minimum", "for", "setting", "up", "a", "shielded", "and", "isolated", "environment", "devtool", "was", "augmented", "with", "the", "needed", "support", "NUMBER", "Description", "of", "Changes", "Added", "devtool", "test", "flag", "s", "shield", "NUMA_NODE_ID", "CPUS_COUNT", "The", "flag", "computes", "the", "available", "CPUs", "and", "memory", "specified", "through", "the", "pattern", "NUMBER", "It", "will", "bind", "the", "test", "docker", "container", "to", "those", "NUMBER", "It", "also", "isolates", "the", "docker", "container", "from", "outside", "tasks", "interference", "by", "trying", "to", "move", "all", "exisiting", "run", "tasks", "to", "a", "separate", "cpuset", "which", "will", "use", "other", "resources", "compared", "to", "the", "shield", "NUMBER", "However", "if", "there", "be", "only", "a", "single", "NUMA", "node", "online", "on", "the", "platform", "the", "system", "cpuset", "can", "not", "be", "created", "and", "the", "test", "will", "run", "as", "if", "there", "be", "no", "shield", "present", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "All", "add", "change", "functionality", "be", "test", "NUMBER", "Closing", "this", "in", "favor", "of", "NUMBER", "NUMBER", "Once", "you", "get", "this", "work", "you", "can", "enable", "the", "snapshot", "integration", "test", "for", "ARM", "and", "publish", "kernel", "and", "rootfs", "images", "in", "the", "S", "NUMBER", "artifact", "repository", "NUMBER", "Feature", "was", "merge", "in", "rust", "vmm", "NUMBER", "I", "still", "need", "to", "merge", "this", "into", "LINK", "microvm", "kvm", "ioctls", "NUMBER", "Fixed", "by", "LINK", "microvm", "kvm", "ioctls", "pull", "NUMBER", "There", "be", "now", "two", "new", "metrics", "for", "throttled", "events", "in", "the", "block", "device", "ops_rate_limiter_throttled", "and", "transfer_rate_limiter_throttled", "NUMBER", "Signed", "off", "by", "George", "Pisaltu", "TAG", "Reason", "for", "This", "PR", "NUMBER", "Description", "of", "Changes", "Added", "ops_rate_limiter_throttled", "and", "transfer_rate_limiter_throttled", "metrics", "for", "a", "block", "device", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "All", "add", "change", "functionality", "be", "test", "NUMBER", "I", "m", "run", "the", "following", "command", "sh", "sudo", "NUMBER", "firectl", "firecracker", "binary", "HOME", "firecracker", "kernel", "HOME", "vmlinux", "root", "drive", "HOME", "flatcar_production_image", "NUMBER", "bin", "root", "partition", "cf", "NUMBER", "a", "NUMBER", "f", "c", "NUMBER", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "bab", "NUMBER", "a", "NUMBER", "c", "kernel", "opts", "rootflags", "rw", "mount", "NUMBER", "usrflags", "ro", "BOOT_IMAGE", "flatcar", "vmlinuz", "a", "mount", "NUMBER", "usr", "dev", "mapper", "usr", "verity", "NUMBER", "usr", "PARTUUID", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "consoleblank", "NUMBER", "flatcar", "NUMBER", "first_boot", "detected", "flatcar", "NUMBER", "randomize_disk_guid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "verity", "NUMBER", "usrhash", "NUMBER", "ba", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "a", "NUMBER", "feb", "NUMBER", "ca", "NUMBER", "ce", "NUMBER", "ec", "NUMBER", "de", "NUMBER", "f", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "cpu", "template", "T", "NUMBER", "memory", "NUMBER", "Despite", "I", "get", "this", "INFO", "NUMBER", "Attaching", "drive", "home", "salvo", "flatcar_production_image", "NUMBER", "bin", "slot", "NUMBER", "root", "true", "NUMBER", "INFO", "NUMBER", "Attached", "drive", "home", "salvo", "flatcar_production_image", "NUMBER", "bin", "PUT", "drives", "drive_id", "NUMBER", "putGuestDriveByIdNoContent", "I", "do", "not", "see", "any", "device", "mounted", "in", "my", "host", "machine", "in", "fact", "it", "do", "not", "boot", "up", "correctly", "returning", "Warning", "dev", "disk", "by", "partuuid", "cf", "NUMBER", "a", "NUMBER", "f", "c", "NUMBER", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "bab", "NUMBER", "a", "NUMBER", "c", "do", "not", "exist", "I", "would", "not", "mind", "improving", "the", "mounting", "of", "the", "device", "wiring", "a", "PR", "in", "case", "there", "be", "an", "issue", "NUMBER", "However", "at", "the", "moment", "I", "m", "stuck", "to", "debug", "further", "the", "following", "issue", "NUMBER", "Hi", "mazzy", "NUMBER", "I", "think", "that", "this", "issue", "may", "be", "relate", "to", "the", "firectl", "LINK", "microvm", "firectl", "project", "NUMBER", "If", "you", "want", "to", "try", "the", "kernel", "and", "root", "filesystem", "that", "you", "re", "use", "with", "Firecracker", "you", "can", "follow", "the", "Getting", "Started", "LINK", "microvm", "firecracker", "blob", "master", "docs", "get", "start", "NUMBER", "md", "document", "NUMBER", "Thanks", "Hi", "gc", "plp", "thank", "you", "for", "the", "reaction", "NUMBER", "I", "think", "the", "issue", "belongs", "here", "I", "ve", "test", "also", "without", "use", "firectl", "and", "I", "get", "the", "same", "result", "NUMBER", "It", "be", "not", "a", "problem", "of", "firectl", "for", "sure", "NUMBER", "You", "can", "replicate", "this", "simply", "json", "boot", "source", "kernel_image_path", "vmlinux", "boot_args", "rootflags", "rw", "mount", "NUMBER", "usrflags", "ro", "BOOT_IMAGE", "flatcar", "vmlinuz", "a", "mount", "NUMBER", "usr", "dev", "mapper", "usr", "verity", "NUMBER", "usr", "PARTUUID", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "consoleblank", "NUMBER", "flatcar", "NUMBER", "first_boot", "detected", "flatcar", "NUMBER", "randomize_disk_guid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "verity", "NUMBER", "usrhash", "NUMBER", "ba", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "a", "NUMBER", "feb", "NUMBER", "ca", "NUMBER", "ce", "NUMBER", "ec", "NUMBER", "de", "NUMBER", "f", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "console", "ttyS", "NUMBER", "noapic", "reboot", "k", "panic", "NUMBER", "pci", "off", "drives", "drive_id", "NUMBER", "path_on_host", "flatcar_production_image", "NUMBER", "bin", "is_root_device", "true", "is_read_only", "false", "partuuid", "cf", "NUMBER", "a", "NUMBER", "f", "c", "NUMBER", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "bab", "NUMBER", "a", "NUMBER", "c", "machine", "config", "vcpu_count", "NUMBER", "mem_size_mib", "NUMBER", "ht_enabled", "false", "sh", "sudo", "firecracker", "api", "sock", "tmp", "firecracker", "config", "file", "config", "NUMBER", "json", "In", "order", "to", "debug", "what", "Firecracker", "be", "doing", "under", "the", "hood", "you", "can", "enable", "the", "logging", "module", "as", "describe", "here", "LINK", "microvm", "firecracker", "blob", "master", "docs", "logger", "NUMBER", "md", "NUMBER", "it", "do", "not", "boot", "up", "correctly", "Could", "you", "give", "us", "more", "details", "on", "what", "you", "be", "referring", "to", "by", "not", "booting", "up", "correctly", "Does", "the", "kernel", "boot", "If", "yes", "do", "it", "work", "with", "a", "different", "rootfs", "Thank", "you", "gc", "plp", "I", "ll", "try", "to", "turn", "on", "the", "logging", "module", "NUMBER", "Meanwhile", "trying", "to", "reply", "to", "your", "question", "Yes", "the", "kernel", "boot", "NUMBER", "I", "have", "tried", "with", "different", "rootfs", "and", "it", "do", "not", "work", "NUMBER", "My", "gut", "feeling", "be", "that", "the", "kernel", "I", "m", "use", "with", "this", "config", "LINK", "linux", "NUMBER", "net", "amd", "NUMBER", "usr", "current", "flatcar_production_image_kernel_config", "NUMBER", "txt", "has", "not", "loaded", "the", "virtio", "modules", "NUMBER", "I", "m", "trying", "to", "load", "them", "at", "the", "startup", "NUMBER", "build", "the", "latest", "unreleased", "firecracker", "version", "so", "to", "have", "logging", "flags", "available", "NUMBER", "here", "what", "I", "get", "use", "the", "flags", "log", "path", "NUMBER", "firecracker", "vmm", "NUMBER", "log", "level", "Error", "show", "level", "show", "log", "origin", "Running", "Firecracker", "v", "NUMBER", "not", "much", "bootstrap", "output", "NUMBER", "Linux", "version", "NUMBER", "flatcar", "jenkins", "jenkins", "worker", "NUMBER", "gcc", "version", "NUMBER", "Gentoo", "Hardened", "NUMBER", "r", "NUMBER", "p", "NUMBER", "NUMBER", "SMP", "Tue", "Jun", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Command", "line", "rootflags", "rw", "mount", "NUMBER", "usrflags", "ro", "BOOT_IMAGE", "flatcar", "vmlinuz", "a", "mount", "NUMBER", "usr", "dev", "mapper", "usr", "verity", "NUMBER", "usr", "PARTUUID", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "consoleblank", "NUMBER", "flatcar", "NUMBER", "first_boot", "detected", "flatcar", "NUMBER", "randomize_disk_guid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "verity", "NUMBER", "usrhash", "NUMBER", "ba", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "a", "NUMBER", "feb", "NUMBER", "ca", "NUMBER", "ce", "NUMBER", "ec", "NUMBER", "de", "NUMBER", "f", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "root", "PARTUUID", "cf", "NUMBER", "a", "NUMBER", "f", "c", "NUMBER", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "bab", "NUMBER", "a", "NUMBER", "c", "ro", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "x", "NUMBER", "floating", "point", "registers", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "SSE", "registers", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "AVX", "registers", "NUMBER", "x", "NUMBER", "fpu", "xstate_offset", "NUMBER", "NUMBER", "xstate_sizes", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fpu", "Enabled", "xstate", "features", "NUMBER", "x", "NUMBER", "context", "size", "be", "NUMBER", "bytes", "use", "standard", "format", "NUMBER", "NUMBER", "BIOS", "provide", "physical", "RAM", "map", "NUMBER", "BIOS", "e", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fbff", "usable", "NUMBER", "BIOS", "e", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "usable", "NUMBER", "NX", "Execute", "Disable", "protection", "active", "NUMBER", "DMI", "not", "present", "or", "invalid", "NUMBER", "NUMBER", "Hypervisor", "detected", "KVM", "NUMBER", "kvm", "clock", "Using", "msrs", "NUMBER", "b", "NUMBER", "d", "NUMBER", "and", "NUMBER", "b", "NUMBER", "d", "NUMBER", "NUMBER", "kvm", "clock", "cpu", "NUMBER", "msr", "NUMBER", "primary", "cpu", "clock", "NUMBER", "kvm", "clock", "use", "sched", "offset", "of", "NUMBER", "cycles", "NUMBER", "clocksource", "kvm", "clock", "mask", "NUMBER", "xffffffffffffffff", "max_cycles", "NUMBER", "x", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "dffb", "max_idle_ns", "NUMBER", "ns", "NUMBER", "tsc", "Detected", "NUMBER", "MHz", "processor", "NUMBER", "last_pfn", "NUMBER", "x", "NUMBER", "max_arch_pfn", "NUMBER", "x", "NUMBER", "NUMBER", "Disabled", "NUMBER", "x", "NUMBER", "PAT", "MTRRs", "disabled", "skipping", "PAT", "initialization", "too", "NUMBER", "NUMBER", "CPU", "MTRRs", "all", "blank", "virtualized", "system", "NUMBER", "NUMBER", "x", "NUMBER", "PAT", "Configuration", "NUMBER", "NUMBER", "WB", "WT", "UC", "UC", "WB", "WT", "UC", "UC", "NUMBER", "ACPI", "Early", "table", "checksum", "verification", "disabled", "NUMBER", "ACPI", "BIOS", "Error", "bug", "A", "valid", "RSDP", "was", "not", "find", "NUMBER", "tbxfroot", "NUMBER", "NUMBER", "No", "NUMA", "configuration", "find", "NUMBER", "Faking", "a", "node", "at", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "NODE_DATA", "NUMBER", "allocated", "mem", "NUMBER", "x", "NUMBER", "fffa", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "Zone", "ranges", "NUMBER", "DMA", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ffffff", "NUMBER", "DMA", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "Normal", "empty", "NUMBER", "Movable", "zone", "start", "for", "each", "node", "NUMBER", "Early", "memory", "node", "ranges", "NUMBER", "node", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "efff", "NUMBER", "node", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "Zeroed", "struct", "page", "in", "unavailable", "ranges", "NUMBER", "pages", "NUMBER", "Initmem", "setup", "node", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "smpboot", "Boot", "CPU", "id", "NUMBER", "not", "listed", "by", "BIOS", "NUMBER", "smpboot", "Allowing", "NUMBER", "CPUs", "NUMBER", "hotplug", "CPUs", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "xffffffff", "available", "for", "PCI", "devices", "NUMBER", "Booting", "paravirtualized", "kernel", "on", "KVM", "NUMBER", "clocksource", "refined", "jiffies", "mask", "NUMBER", "xffffffff", "max_cycles", "NUMBER", "xffffffff", "max_idle_ns", "NUMBER", "ns", "NUMBER", "random", "get_random_bytes", "call", "from", "start_kernel", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "with", "crng_init", "NUMBER", "NUMBER", "setup_percpu", "NR_CPUS", "NUMBER", "nr_cpumask_bits", "NUMBER", "nr_cpu_ids", "NUMBER", "nr_node_ids", "NUMBER", "NUMBER", "percpu", "Embedded", "NUMBER", "pages", "cpu", "s", "NUMBER", "r", "NUMBER", "d", "NUMBER", "u", "NUMBER", "NUMBER", "KVM", "setup", "async", "PF", "for", "cpu", "NUMBER", "NUMBER", "kvm", "stealtime", "cpu", "NUMBER", "msr", "NUMBER", "da", "NUMBER", "c", "NUMBER", "NUMBER", "Built", "NUMBER", "zonelists", "mobility", "grouping", "on", "NUMBER", "Total", "pages", "NUMBER", "NUMBER", "Policy", "zone", "DMA", "NUMBER", "NUMBER", "Kernel", "command", "line", "rootflags", "rw", "mount", "NUMBER", "usrflags", "ro", "rootflags", "rw", "mount", "NUMBER", "usrflags", "ro", "BOOT_IMAGE", "flatcar", "vmlinuz", "a", "mount", "NUMBER", "usr", "dev", "mapper", "usr", "verity", "NUMBER", "usr", "PARTUUID", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "consoleblank", "NUMBER", "flatcar", "NUMBER", "first_boot", "detected", "flatcar", "NUMBER", "randomize_disk_guid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "verity", "NUMBER", "usrhash", "NUMBER", "ba", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "a", "NUMBER", "feb", "NUMBER", "ca", "NUMBER", "ce", "NUMBER", "ec", "NUMBER", "de", "NUMBER", "f", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "root", "PARTUUID", "cf", "NUMBER", "a", "NUMBER", "f", "c", "NUMBER", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "bab", "NUMBER", "a", "NUMBER", "c", "ro", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "Memory", "NUMBER", "K", "NUMBER", "K", "available", "NUMBER", "K", "kernel", "code", "NUMBER", "K", "rwdata", "NUMBER", "K", "rodata", "NUMBER", "K", "init", "NUMBER", "K", "bss", "NUMBER", "K", "reserved", "NUMBER", "K", "cma", "reserved", "NUMBER", "SLUB", "HWalign", "NUMBER", "Order", "NUMBER", "NUMBER", "MinObjects", "NUMBER", "CPUs", "NUMBER", "Nodes", "NUMBER", "NUMBER", "ftrace", "allocating", "NUMBER", "entries", "in", "NUMBER", "pages", "NUMBER", "rcu", "Hierarchical", "RCU", "implementation", "NUMBER", "NUMBER", "rcu", "RCU", "event", "tracing", "be", "enable", "NUMBER", "NUMBER", "rcu", "RCU", "restricting", "CPUs", "from", "NR_CPUS", "NUMBER", "to", "nr_cpu_ids", "NUMBER", "NUMBER", "rcu", "Adjusting", "geometry", "for", "rcu_fanout_leaf", "NUMBER", "nr_cpu_ids", "NUMBER", "NUMBER", "NR_IRQS", "NUMBER", "nr_irqs", "NUMBER", "preallocated", "irqs", "NUMBER", "NUMBER", "Console", "colour", "dummy", "device", "NUMBER", "x", "NUMBER", "NUMBER", "console", "ttyS", "NUMBER", "enable", "NUMBER", "APIC", "ACPI", "MADT", "or", "MP", "tables", "be", "not", "detected", "NUMBER", "APIC", "Switch", "to", "virtual", "wire", "mode", "setup", "with", "no", "configuration", "NUMBER", "Not", "enabling", "interrupt", "remapping", "due", "to", "skipped", "IO", "APIC", "setup", "NUMBER", "KVM", "setup", "pv", "IPIs", "NUMBER", "clocksource", "tsc", "early", "mask", "NUMBER", "xffffffffffffffff", "max_cycles", "NUMBER", "x", "NUMBER", "fa", "NUMBER", "d", "NUMBER", "max_idle_ns", "NUMBER", "ns", "NUMBER", "Calibrating", "delay", "loop", "skipped", "preset", "value", "NUMBER", "NUMBER", "BogoMIPS", "lpj", "NUMBER", "NUMBER", "pid_max", "default", "NUMBER", "minimum", "NUMBER", "NUMBER", "Security", "Framework", "initialized", "NUMBER", "SELinux", "Initializing", "NUMBER", "NUMBER", "Dentry", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Inode", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Mount", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Mountpoint", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "x", "NUMBER", "cpu", "Activated", "the", "Intel", "User", "Mode", "Instruction", "Prevention", "UMIP", "CPU", "feature", "NUMBER", "Last", "level", "iTLB", "entries", "NUMBER", "KB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "Last", "level", "dTLB", "entries", "NUMBER", "KB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "GB", "NUMBER", "NUMBER", "Spectre", "V", "NUMBER", "Mitigation", "usercopy", "swapgs", "barriers", "and", "__user", "pointer", "sanitization", "NUMBER", "Spectre", "V", "NUMBER", "Mitigation", "Enhanced", "IBRS", "NUMBER", "Spectre", "V", "NUMBER", "Spectre", "v", "NUMBER", "SpectreRSB", "mitigation", "Filling", "RSB", "on", "context", "switch", "NUMBER", "Spectre", "V", "NUMBER", "mitigation", "Enabling", "conditional", "Indirect", "Branch", "Prediction", "Barrier", "NUMBER", "Speculative", "Store", "Bypass", "Mitigation", "Speculative", "Store", "Bypass", "disabled", "via", "prctl", "and", "seccomp", "NUMBER", "Freeing", "SMP", "alternatives", "memory", "NUMBER", "K", "NUMBER", "smpboot", "SMP", "disabled", "NUMBER", "Performance", "Events", "unsupported", "p", "NUMBER", "CPU", "model", "NUMBER", "no", "PMU", "driver", "software", "events", "only", "NUMBER", "NUMBER", "rcu", "Hierarchical", "SRCU", "implementation", "NUMBER", "NUMBER", "NMI", "watchdog", "Perf", "NMI", "watchdog", "permanently", "disabled", "NUMBER", "smp", "Bringing", "up", "secondary", "CPUs", "NUMBER", "NUMBER", "smp", "Brought", "up", "NUMBER", "node", "NUMBER", "CPU", "NUMBER", "smpboot", "Max", "logical", "package", "NUMBER", "NUMBER", "smpboot", "Total", "of", "NUMBER", "processors", "activated", "NUMBER", "BogoMIPS", "NUMBER", "devtmpfs", "initialized", "NUMBER", "x", "NUMBER", "mm", "Memory", "block", "size", "NUMBER", "MB", "NUMBER", "clocksource", "jiffies", "mask", "NUMBER", "xffffffff", "max_cycles", "NUMBER", "xffffffff", "max_idle_ns", "NUMBER", "ns", "NUMBER", "futex", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "pinctrl", "core", "initialized", "pinctrl", "subsystem", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "audit", "initializing", "netlink", "subsys", "disabled", "NUMBER", "cpuidle", "use", "governor", "menu", "NUMBER", "KVM", "setup", "pv", "remote", "TLB", "flush", "NUMBER", "dca", "service", "start", "version", "NUMBER", "NUMBER", "PCI", "Fatal", "No", "config", "space", "access", "function", "find", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "state", "initialized", "audit_enabled", "NUMBER", "res", "NUMBER", "NUMBER", "HugeTLB", "registered", "NUMBER", "MiB", "page", "size", "pre", "allocated", "NUMBER", "pages", "NUMBER", "ACPI", "Interpreter", "disabled", "NUMBER", "NUMBER", "vgaarb", "loaded", "NUMBER", "pps_core", "LinuxPPS", "API", "ver", "NUMBER", "NUMBER", "registered", "NUMBER", "pps_core", "Software", "ver", "NUMBER", "NUMBER", "Copyright", "NUMBER", "NUMBER", "Rodolfo", "Giometti", "TAG", "NUMBER", "PTP", "clock", "support", "registered", "NUMBER", "PCI", "System", "do", "not", "support", "PCI", "NUMBER", "clocksource", "Switched", "to", "clocksource", "kvm", "clock", "NUMBER", "VFS", "Disk", "quotas", "dquot_", "NUMBER", "NUMBER", "VFS", "Dquot", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "pnp", "PnP", "ACPI", "disabled", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "tcp_listen_portaddr_hash", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "TCP", "established", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "TCP", "bind", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "TCP", "Hash", "tables", "configured", "established", "NUMBER", "bind", "NUMBER", "NUMBER", "UDP", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "UDP", "Lite", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "random", "fast", "init", "do", "NUMBER", "clocksource", "tsc", "mask", "NUMBER", "xffffffffffffffff", "max_cycles", "NUMBER", "x", "NUMBER", "fa", "NUMBER", "d", "NUMBER", "max_idle_ns", "NUMBER", "ns", "NUMBER", "platform", "rtc_cmos", "registered", "platform", "RTC", "device", "no", "PNP", "device", "find", "NUMBER", "Initialise", "system", "trusted", "keyrings", "NUMBER", "workingset", "timestamp_bits", "NUMBER", "max_order", "NUMBER", "bucket_order", "NUMBER", "NUMBER", "Key", "type", "asymmetric", "registered", "NUMBER", "Asymmetric", "key", "parser", "x", "NUMBER", "registered", "NUMBER", "Block", "layer", "SCSI", "generic", "bsg", "driver", "version", "NUMBER", "loaded", "major", "NUMBER", "NUMBER", "io", "scheduler", "noop", "registered", "NUMBER", "io", "scheduler", "deadline", "registered", "NUMBER", "io", "scheduler", "cfq", "registered", "default", "NUMBER", "io", "scheduler", "mq", "deadline", "registered", "NUMBER", "io", "scheduler", "kyber", "registered", "NUMBER", "io", "scheduler", "bfq", "registered", "NUMBER", "ioatdma", "Intel", "R", "QuickData", "Technology", "Driver", "NUMBER", "NUMBER", "Serial", "NUMBER", "NUMBER", "driver", "NUMBER", "ports", "IRQ", "sharing", "enable", "NUMBER", "serial", "NUMBER", "ttyS", "NUMBER", "at", "I", "O", "NUMBER", "x", "NUMBER", "f", "NUMBER", "irq", "NUMBER", "base_baud", "NUMBER", "be", "a", "U", "NUMBER", "_", "NUMBER", "A", "NUMBER", "serial", "NUMBER", "ttyS", "NUMBER", "at", "I", "O", "NUMBER", "x", "NUMBER", "f", "NUMBER", "irq", "NUMBER", "base_baud", "NUMBER", "be", "a", "U", "NUMBER", "_", "NUMBER", "A", "NUMBER", "serial", "NUMBER", "ttyS", "NUMBER", "at", "I", "O", "NUMBER", "x", "NUMBER", "e", "NUMBER", "irq", "NUMBER", "base_baud", "NUMBER", "be", "a", "U", "NUMBER", "_", "NUMBER", "A", "NUMBER", "i", "NUMBER", "PNP", "No", "PS", "NUMBER", "controller", "find", "NUMBER", "NUMBER", "i", "NUMBER", "Probing", "ports", "directly", "NUMBER", "NUMBER", "i", "NUMBER", "Failed", "to", "disable", "AUX", "port", "but", "continuing", "anyway", "NUMBER", "Is", "this", "a", "SiS", "NUMBER", "i", "NUMBER", "If", "AUX", "port", "be", "really", "absent", "please", "use", "the", "i", "NUMBER", "noaux", "option", "NUMBER", "serio", "i", "NUMBER", "KBD", "port", "at", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "irq", "NUMBER", "NUMBER", "rtc_cmos", "rtc_cmos", "only", "NUMBER", "hr", "support", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "Segment", "Routing", "with", "IPv", "NUMBER", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "Key", "type", "dns_resolver", "registered", "NUMBER", "mce", "Using", "NUMBER", "MCE", "banks", "NUMBER", "sched_clock", "Marking", "stable", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "registered", "taskstats", "version", "NUMBER", "NUMBER", "Loading", "compiled", "in", "X", "NUMBER", "certificates", "NUMBER", "Loaded", "X", "NUMBER", "cert", "Kinvolk", "GmbH", "Module", "signing", "key", "for", "NUMBER", "flatcar", "NUMBER", "cffd", "NUMBER", "cc", "NUMBER", "ffc", "NUMBER", "fb", "NUMBER", "bb", "NUMBER", "d", "NUMBER", "aa", "NUMBER", "d", "NUMBER", "b", "NUMBER", "NUMBER", "ima", "No", "TPM", "chip", "find", "activating", "TPM", "bypass", "NUMBER", "ima", "Allocated", "hash", "algorithm", "sha", "NUMBER", "NUMBER", "hctosys", "unable", "to", "open", "rtc", "device", "rtc", "NUMBER", "NUMBER", "Freeing", "unuse", "kernel", "image", "memory", "NUMBER", "K", "NUMBER", "Write", "protecting", "the", "kernel", "read", "only", "data", "NUMBER", "k", "NUMBER", "Freeing", "unuse", "kernel", "image", "memory", "NUMBER", "K", "NUMBER", "Freeing", "unuse", "kernel", "image", "memory", "NUMBER", "K", "NUMBER", "Run", "init", "as", "init", "process", "NUMBER", "systemd", "NUMBER", "systemd", "NUMBER", "NUMBER", "gbe", "NUMBER", "cc", "NUMBER", "run", "in", "system", "mode", "NUMBER", "PAM", "AUDIT", "SELINUX", "IMA", "APPARMOR", "SMACK", "SYSVINIT", "UTMP", "LIBCRYPTSETUP", "GCRYPT", "GNUTLS", "ACL", "XZ", "LZ", "NUMBER", "SECCOMP", "BLKID", "ELFUTILS", "KMOD", "IDN", "NUMBER", "IDN", "PCRE", "NUMBER", "default", "hierarchy", "legacy", "NUMBER", "systemd", "NUMBER", "Detected", "virtualization", "kvm", "NUMBER", "NUMBER", "systemd", "NUMBER", "Detected", "architecture", "x", "NUMBER", "NUMBER", "NUMBER", "systemd", "NUMBER", "Running", "in", "initial", "RAM", "disk", "NUMBER", "Welcome", "to", "dracut", "NUMBER", "Initramfs", "NUMBER", "systemd", "NUMBER", "No", "hostname", "configured", "NUMBER", "NUMBER", "systemd", "NUMBER", "Set", "hostname", "to", "TAG", "NUMBER", "NUMBER", "systemd", "NUMBER", "Initializing", "machine", "ID", "from", "random", "generator", "NUMBER", "NUMBER", "systemd", "NUMBER", "Failed", "to", "bump", "fs", "NUMBER", "file", "max", "ignoring", "Invalid", "argument", "NUMBER", "systemd", "NUMBER", "File", "usr", "lib", "systemd", "system", "systemd", "journald", "NUMBER", "service", "NUMBER", "configures", "an", "IP", "firewall", "IPAddressDeny", "any", "but", "the", "local", "system", "do", "not", "support", "BPF", "cgroup", "based", "firewalling", "NUMBER", "NUMBER", "systemd", "NUMBER", "Proceeding", "WITHOUT", "firewalling", "in", "effect", "This", "warning", "be", "only", "shown", "for", "the", "first", "loaded", "unit", "use", "IP", "firewalling", "NUMBER", "OK", "Listening", "on", "udev", "Kernel", "Socket", "NUMBER", "OK", "Created", "slice", "system", "systemd", "x", "NUMBER", "dfsck", "NUMBER", "slice", "NUMBER", "OK", "Created", "slice", "system", "disk", "x", "NUMBER", "duuid", "NUMBER", "slice", "NUMBER", "OK", "Listening", "on", "udev", "Control", "Socket", "NUMBER", "OK", "Listening", "on", "Journal", "Audit", "Socket", "NUMBER", "OK", "Listening", "on", "Journal", "Socket", "NUMBER", "Starting", "Create", "list", "of", "re", "odes", "for", "the", "current", "kernel", "NUMBER", "Starting", "Apply", "Kernel", "Variables", "NUMBER", "OK", "Reached", "target", "Swap", "NUMBER", "Starting", "Setup", "Virtual", "Console", "NUMBER", "OK", "Started", "Dispatch", "Password", "ts", "to", "Console", "Directory", "Watch", "NUMBER", "OK", "Reached", "target", "Local", "Encrypted", "Volumes", "NUMBER", "OK", "Reached", "target", "Timers", "NUMBER", "OK", "Reached", "target", "Slices", "NUMBER", "OK", "Listening", "on", "Journal", "Socket", "dev", "log", "NUMBER", "Starting", "Journal", "Service", "NUMBER", "OK", "Reached", "target", "Sockets", "NUMBER", "OK", "Reached", "target", "Paths", "NUMBER", "OK", "Started", "Create", "list", "of", "req", "nodes", "for", "the", "current", "kernel", "NUMBER", "OK", "Started", "Apply", "Kernel", "Variables", "NUMBER", "OK", "Started", "Setup", "Virtual", "Console", "NUMBER", "Starting", "dracut", "cmdline", "hook", "NUMBER", "Starting", "Create", "Static", "Device", "Nodes", "in", "dev", "NUMBER", "OK", "Started", "Create", "Static", "Device", "Nodes", "in", "dev", "NUMBER", "OK", "Started", "dracut", "cmdline", "hook", "NUMBER", "Starting", "dracut", "pre", "udev", "hook", "NUMBER", "NUMBER", "input", "AT", "Raw", "Set", "NUMBER", "keyboard", "as", "devices", "platform", "i", "NUMBER", "serio", "NUMBER", "input", "input", "NUMBER", "NUMBER", "device", "mapper", "uevent", "version", "NUMBER", "NUMBER", "device", "mapper", "ioctl", "NUMBER", "ioctl", "NUMBER", "NUMBER", "NUMBER", "initialised", "dm", "devel", "redhat", "NUMBER", "com", "OK", "Started", "dracut", "pre", "udev", "hook", "NUMBER", "Starting", "udev", "Kernel", "Device", "Manager", "NUMBER", "OK", "Started", "Journal", "Service", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "systemd", "journald", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "NUMBER", "systemd", "sysctl", "NUMBER", "Couldn", "t", "write", "fq_codel", "to", "net", "core", "default_qdisc", "ignoring", "No", "such", "file", "or", "directory", "NUMBER", "systemd", "vconsole", "setup", "NUMBER", "KD_FONT_OP_GET", "fail", "while", "trying", "to", "get", "the", "font", "metadata", "Function", "not", "implement", "NUMBER", "systemd", "vconsole", "setup", "NUMBER", "Fonts", "will", "not", "be", "copied", "to", "remaining", "consoles", "NUMBER", "dracut", "cmdline", "NUMBER", "dracut", "dracut", "NUMBER", "NUMBER", "dracut", "cmdline", "NUMBER", "Using", "kernel", "command", "line", "parameters", "rootflags", "rw", "mount", "NUMBER", "usrflags", "ro", "rootflags", "rw", "mount", "NUMBER", "usrflags", "ro", "BOOT_IMAGE", "flatcar", "vmlinuz", "a", "mount", "NUMBER", "usr", "dev", "mapper", "usr", "verity", "NUMBER", "usr", "PARTUUID", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "consoleblank", "NUMBER", "flatcar", "NUMBER", "first_boot", "detected", "flatcar", "NUMBER", "randomize_disk_guid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "verity", "NUMBER", "usrhash", "NUMBER", "ba", "NUMBER", "c", "NUMBER", "cf", "NUMBER", "a", "NUMBER", "feb", "NUMBER", "ca", "NUMBER", "ce", "NUMBER", "ec", "NUMBER", "de", "NUMBER", "f", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "f", "NUMBER", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "root", "PARTUUID", "cf", "NUMBER", "a", "NUMBER", "f", "c", "NUMBER", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "bab", "NUMBER", "a", "NUMBER", "c", "ro", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "systemd", "udevd", "NUMBER", "Specified", "group", "render", "unknown", "OK", "Started", "udev", "Kernel", "Device", "Manager", "NUMBER", "NUMBER", "systemd", "NUMBER", "Started", "udev", "Kernel", "Device", "Manager", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "systemd", "udevd", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "Starting", "dracut", "pre", "trigger", "hook", "NUMBER", "NUMBER", "systemd", "NUMBER", "Starting", "dracut", "pre", "trigger", "hook", "NUMBER", "NUMBER", "systemd", "NUMBER", "Starting", "Network", "Service", "NUMBER", "Starting", "Network", "Service", "NUMBER", "NUMBER", "dracut", "pre", "trigger", "NUMBER", "rd", "NUMBER", "md", "NUMBER", "remove", "MD", "RAID", "activation", "OK", "Started", "dracut", "pre", "trigger", "hook", "NUMBER", "NUMBER", "systemd", "NUMBER", "Started", "dracut", "pre", "trigger", "hook", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "dracut", "pre", "trigger", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "NUMBER", "systemd", "NUMBER", "Starting", "udev", "Coldplug", "all", "Devices", "NUMBER", "Starting", "udev", "Coldplug", "all", "Devices", "NUMBER", "NUMBER", "systemd", "udevd", "NUMBER", "Specified", "group", "render", "unknown", "OK", "Started", "udev", "Coldplug", "all", "Devices", "NUMBER", "NUMBER", "systemd", "NUMBER", "Started", "udev", "Coldplug", "all", "Devices", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "systemd", "udev", "trigger", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "NUMBER", "systemd", "NUMBER", "Starting", "dracut", "initqueue", "hook", "NUMBER", "Starting", "dracut", "initqueue", "hook", "NUMBER", "NUMBER", "cryptd", "max_cpu_qlen", "set", "to", "NUMBER", "NUMBER", "systemd", "udevd", "NUMBER", "link_config", "autonegotiation", "be", "unset", "or", "enable", "the", "speed", "and", "duplex", "be", "not", "writable", "NUMBER", "NUMBER", "AVX", "NUMBER", "version", "of", "gcm_enc", "dec", "engaged", "NUMBER", "NUMBER", "AES", "CTR", "mode", "by", "NUMBER", "optimization", "enable", "NUMBER", "systemd", "vconsole", "setup", "NUMBER", "KD_FONT_OP_GET", "fail", "while", "trying", "to", "get", "the", "font", "metadata", "Function", "not", "implement", "NUMBER", "systemd", "vconsole", "setup", "NUMBER", "Fonts", "will", "not", "be", "copied", "to", "remaining", "consoles", "NUMBER", "systemd", "networkd", "NUMBER", "Enumeration", "completed", "OK", "Started", "Network", "Service", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "systemd", "networkd", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "NUMBER", "systemd", "NUMBER", "Starting", "Network", "Name", "Resolution", "NUMBER", "Started", "Network", "Service", "NUMBER", "NUMBER", "systemd", "NUMBER", "Starting", "Network", "Name", "Resolution", "NUMBER", "NUMBER", "systemd", "networkd", "NUMBER", "lo", "Configured", "NUMBER", "systemd", "resolve", "NUMBER", "Positive", "Trust", "Anchors", "NUMBER", "systemd", "resolve", "NUMBER", "NUMBER", "IN", "DS", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "aac", "NUMBER", "d", "NUMBER", "b", "NUMBER", "f", "NUMBER", "e", "NUMBER", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "ce", "NUMBER", "cdde", "NUMBER", "f", "NUMBER", "e", "NUMBER", "fb", "NUMBER", "NUMBER", "systemd", "resolve", "OK", "Started", "Network", "Name", "Resolution", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "systemd", "resolve", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "OK", "Reached", "target", "Host", "and", "Network", "Name", "Lookups", "NUMBER", "NUMBER", "NUMBER", "IN", "DS", "NUMBER", "NUMBER", "NUMBER", "e", "NUMBER", "d", "NUMBER", "b", "NUMBER", "b", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "d", "NUMBER", "c", "NUMBER", "d", "NUMBER", "e", "NUMBER", "bbc", "NUMBER", "c", "NUMBER", "f", "NUMBER", "ec", "NUMBER", "d", "OK", "Reached", "target", "Network", "NUMBER", "NUMBER", "systemd", "resolve", "NUMBER", "Negative", "trust", "anchors", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "NUMBER", "in", "addr", "NUMBER", "arpa", "d", "NUMBER", "f", "NUMBER", "ip", "NUMBER", "arpa", "corp", "home", "internal", "intranet", "lan", "local", "private", "test", "NUMBER", "systemd", "resolve", "NUMBER", "Defaulting", "to", "hostname", "linux", "NUMBER", "NUMBER", "systemd", "NUMBER", "Started", "Network", "Name", "Resolution", "NUMBER", "NUMBER", "systemd", "NUMBER", "Reached", "target", "Host", "and", "Network", "Name", "Lookups", "NUMBER", "NUMBER", "systemd", "NUMBER", "Reached", "target", "Network", "NUMBER", "NUMBER", "random", "crng", "init", "do", "TIME", "Timed", "out", "waiting", "for", "device", "dev", "disk", "by", "label", "OEM", "NUMBER", "NUMBER", "systemd", "NUMBER", "dev", "disk", "by", "x", "NUMBER", "dlabel", "OEM", "NUMBER", "device", "Job", "dev", "disk", "by", "x", "NUMBER", "dlabel", "OEM", "NUMBER", "device", "start", "timed", "out", "NUMBER", "DEPEND", "Dependency", "fail", "for", "Ignition", "setup", "NUMBER", "DEPEND", "NUMBER", "systemd", "NUMBER", "Timed", "out", "waiting", "for", "device", "dev", "disk", "by", "label", "OEM", "NUMBER", "Dependency", "fail", "for", "Ignition", "file", "NUMBER", "DEPEND", "NUMBER", "systemd", "NUMBER", "Dependency", "fail", "for", "Ignition", "setup", "NUMBER", "Dependency", "fail", "for", "Popu", "orcx", "store", "to", "satisfy", "profile", "NUMBER", "DEPEND", "NUMBER", "systemd", "NUMBER", "Dependency", "fail", "for", "Ignition", "file", "NUMBER", "Dependency", "fail", "for", "Initrd", "Default", "Target", "NUMBER", "DEPEND", "NUMBER", "systemd", "NUMBER", "Dependency", "fail", "for", "Populate", "torcx", "store", "to", "satisfy", "profile", "NUMBER", "Dependency", "fail", "for", "Ignition", "disks", "NUMBER", "NUMBER", "systemd", "NUMBER", "Dependency", "fail", "for", "Initrd", "Default", "Target", "NUMBER", "TIME", "Timed", "out", "waiting", "for", "device", "NUMBER", "DEPEND", "NUMBER", "systemd", "NUMBER", "initrd", "NUMBER", "target", "Job", "initrd", "NUMBER", "target", "start", "fail", "with", "result", "dependency", "NUMBER", "Dependency", "fail", "for", "Gene", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "TIME", "NUMBER", "systemd", "NUMBER", "initrd", "NUMBER", "target", "Triggering", "OnFailure", "dependencies", "NUMBER", "Timed", "out", "waiting", "for", "device", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "DEPEND", "NUMBER", "systemd", "NUMBER", "torcx", "profile", "populate", "NUMBER", "service", "Job", "torcx", "profile", "populate", "NUMBER", "service", "start", "fail", "with", "result", "dependency", "NUMBER", "Dependency", "fail", "for", "Verity", "Setup", "for", "dev", "mapper", "usr", "NUMBER", "DEPEND", "NUMBER", "Dependency", "fail", "for", "dev", "mapper", "usr", "NUMBER", "systemd", "NUMBER", "ignition", "file", "NUMBER", "service", "Job", "ignition", "file", "NUMBER", "service", "start", "fail", "with", "result", "dependency", "NUMBER", "NUMBER", "systemd", "NUMBER", "Dependency", "fail", "for", "Ignition", "disks", "NUMBER", "NUMBER", "systemd", "NUMBER", "ignition", "disks", "NUMBER", "service", "Job", "ignition", "disks", "NUMBER", "service", "start", "fail", "with", "result", "dependency", "NUMBER", "NUMBER", "systemd", "NUMBER", "ignition", "setup", "NUMBER", "service", "Job", "ignition", "setup", "NUMBER", "service", "start", "fail", "with", "result", "dependency", "NUMBER", "NUMBER", "systemd", "NUMBER", "dev", "disk", "by", "x", "NUMBER", "dlabel", "OEM", "NUMBER", "device", "Job", "dev", "disk", "by", "x", "NUMBER", "dlabel", "OEM", "NUMBER", "device", "start", "fail", "with", "result", "timeout", "NUMBER", "DEPEND", "Dependency", "fail", "for", "File", "stem", "Check", "on", "dev", "mapper", "usr", "NUMBER", "DEPEND", "Dependency", "fail", "for", "sysroot", "usr", "NUMBER", "DEPEND", "Dependency", "fail", "for", "Root", "filesystem", "setup", "NUMBER", "DEPEND", "Dependency", "fail", "for", "Initrd", "File", "Systems", "NUMBER", "NUMBER", "systemd", "NUMBER", "Unnecessary", "job", "for", "dev", "disk", "by", "label", "EFI", "SYSTEM", "was", "remove", "NUMBER", "NUMBER", "OK", "Reached", "target", "Local", "File", "Systems", "Pre", "NUMBER", "systemd", "NUMBER", "dev", "disk", "by", "x", "NUMBER", "ddiskuuid", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "device", "Job", "dev", "disk", "by", "x", "NUMBER", "ddiskuuid", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "device", "start", "timed", "out", "NUMBER", "NUMBER", "systemd", "NUMBER", "Timed", "out", "waiting", "for", "device", "dev", "disk", "by", "diskuuid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "systemd", "OK", "Stopped", "Dispatch", "Password", "ts", "to", "Console", "Directory", "Watch", "NUMBER", "NUMBER", "Dependency", "fail", "for", "Generate", "new", "UUID", "for", "disk", "GPT", "dev", "disk", "by", "diskuuid", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Starting", "Setup", "Virtual", "Console", "NUMBER", "NUMBER", "systemd", "OK", "NUMBER", "disk", "uuid", "dev", "disk", "by", "x", "NUMBER", "ddiskuuid", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "service", "Job", "disk", "uuid", "dev", "disk", "by", "x", "NUMBER", "ddiskuuid", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "service", "start", "fail", "with", "result", "dependency", "NUMBER", "Stopped", "dracut", "initqueue", "hook", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "dracut", "initqueue", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "OK", "NUMBER", "Started", "Setup", "Virtual", "Console", "NUMBER", "systemd", "NUMBER", "dev", "disk", "by", "x", "NUMBER", "ddiskuuid", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "device", "Job", "dev", "disk", "by", "x", "NUMBER", "ddiskuuid", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "x", "NUMBER", "d", "NUMBER", "device", "start", "fail", "with", "result", "timeout", "NUMBER", "NUMBER", "systemd", "OK", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "dracut", "initqueue", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "Started", "Emergency", "Shell", "NUMBER", "NUMBER", "dev", "disk", "by", "x", "NUMBER", "dpartuuid", "NUMBER", "c", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "e", "NUMBER", "x", "NUMBER", "d", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "device", "Job", "dev", "disk", "by", "x", "NUMBER", "dpartuuid", "NUMBER", "c", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "e", "NUMBER", "x", "NUMBER", "d", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "device", "start", "timed", "out", "NUMBER", "OK", "Reached", "target", "Emergency", "Mode", "NUMBER", "NUMBER", "systemd", "NUMBER", "OK", "Timed", "out", "waiting", "for", "device", "dev", "disk", "by", "partuuid", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "Reached", "target", "Remote", "File", "Systems", "Pre", "NUMBER", "OK", "Reached", "target", "Remote", "File", "Systems", "NUMBER", "NUMBER", "systemd", "NUMBER", "Dependency", "fail", "for", "Verity", "Setup", "for", "dev", "mapper", "usr", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "systemd", "vconsole", "setup", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "NUMBER", "systemd", "OK", "NUMBER", "Dependency", "fail", "for", "dev", "mapper", "usr", "NUMBER", "Stopped", "dracut", "pre", "trigger", "hook", "NUMBER", "OK", "NUMBER", "systemd", "NUMBER", "Stopped", "dracut", "pre", "udev", "hook", "NUMBER", "Dependency", "fail", "for", "File", "System", "Check", "on", "dev", "mapper", "usr", "NUMBER", "NUMBER", "systemd", "NUMBER", "OK", "Stopped", "dracut", "cmdline", "hook", "NUMBER", "Dependency", "fail", "for", "sysroot", "usr", "NUMBER", "NUMBER", "systemd", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "systemd", "vconsole", "setup", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "Dependency", "fail", "for", "Root", "filesystem", "setup", "NUMBER", "NUMBER", "systemd", "NUMBER", "initrd", "setup", "root", "NUMBER", "service", "Job", "initrd", "setup", "root", "NUMBER", "service", "start", "fail", "with", "result", "dependency", "NUMBER", "NUMBER", "systemd", "NUMBER", "Dependency", "fail", "for", "Initrd", "File", "Systems", "NUMBER", "NUMBER", "systemd", "NUMBER", "initrd", "fs", "NUMBER", "target", "Job", "initrd", "fs", "NUMBER", "target", "start", "fail", "with", "result", "dependency", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "emergency", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "NUMBER", "systemd", "NUMBER", "initrd", "fs", "NUMBER", "target", "Triggering", "OnFailure", "dependencies", "NUMBER", "NUMBER", "systemd", "NUMBER", "sysroot", "usr", "NUMBER", "mount", "Job", "sysroot", "usr", "NUMBER", "mount", "start", "fail", "with", "result", "dependency", "NUMBER", "NUMBER", "systemd", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "dracut", "pre", "trigger", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "systemd", "fsck", "dev", "mapper", "usr", "NUMBER", "service", "Job", "systemd", "fsck", "dev", "mapper", "usr", "NUMBER", "service", "start", "fail", "with", "result", "dependency", "NUMBER", "NUMBER", "systemd", "NUMBER", "dev", "mapper", "usr", "NUMBER", "device", "Job", "dev", "mapper", "usr", "NUMBER", "device", "start", "fail", "with", "result", "dependency", "NUMBER", "NUMBER", "systemd", "NUMBER", "verity", "setup", "NUMBER", "service", "Job", "verity", "setup", "NUMBER", "service", "start", "fail", "with", "result", "dependency", "NUMBER", "NUMBER", "systemd", "NUMBER", "dev", "disk", "by", "x", "NUMBER", "dpartuuid", "NUMBER", "c", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "e", "NUMBER", "x", "NUMBER", "d", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "device", "Job", "dev", "disk", "by", "x", "NUMBER", "dpartuuid", "NUMBER", "c", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "x", "NUMBER", "d", "NUMBER", "e", "NUMBER", "x", "NUMBER", "d", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "device", "start", "fail", "with", "result", "timeout", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "dracut", "pre", "udev", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "NUMBER", "systemd", "NUMBER", "Reached", "target", "Local", "File", "Systems", "Pre", "NUMBER", "NUMBER", "systemd", "NUMBER", "systemd", "ask", "password", "console", "NUMBER", "path", "Succeeded", "NUMBER", "NUMBER", "systemd", "NUMBER", "Stopped", "Dispatch", "Password", "Requests", "to", "Console", "Directory", "Watch", "NUMBER", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "pid", "NUMBER", "uid", "NUMBER", "auid", "NUMBER", "ses", "NUMBER", "subj", "kernel", "msg", "unit", "dracut", "cmdline", "comm", "systemd", "exe", "usr", "lib", "NUMBER", "systemd", "systemd", "hostname", "addr", "terminal", "res", "success", "NUMBER", "systemd", "NUMBER", "Starting", "Setup", "Virtual", "Console", "NUMBER", "NUMBER", "systemd", "NUMBER", "dracut", "initqueue", "NUMBER", "service", "Main", "process", "exited", "code", "killed", "status", "NUMBER", "HUP", "NUMBER", "systemd", "NUMBER", "dracut", "initqueue", "NUMBER", "service", "Succeeded", "NUMBER", "NUMBER", "systemd", "NUMBER", "Stopped", "dracut", "initqueue", "hook", "NUMBER", "NUMBER", "systemd", "vconsole", "setup", "NUMBER", "KD_FONT_OP_GET", "fail", "while", "trying", "to", "get", "the", "font", "metadata", "Function", "not", "implement", "NUMBER", "systemd", "vconsole", "setup", "NUMBER", "Fonts", "will", "not", "be", "copied", "to", "remaining", "consoles", "NUMBER", "systemd", "NUMBER", "systemd", "vconsole", "setup", "NUMBER", "service", "Succeeded", "NUMBER", "NUMBER", "systemd", "NUMBER", "Started", "Setup", "Virtual", "Console", "NUMBER", "NUMBER", "systemd", "NUMBER", "Started", "Emergency", "Shell", "NUMBER", "NUMBER", "systemd", "NUMBER", "Reached", "target", "Emergency", "Mode", "NUMBER", "NUMBER", "systemd", "NUMBER", "Reached", "target", "Remote", "File", "Systems", "Pre", "NUMBER", "NUMBER", "systemd", "NUMBER", "Reached", "target", "Remote", "File", "Systems", "NUMBER", "NUMBER", "systemd", "NUMBER", "dracut", "pre", "trigger", "NUMBER", "service", "Succeeded", "NUMBER", "NUMBER", "systemd", "NUMBER", "Stopped", "dracut", "pre", "trigger", "hook", "NUMBER", "NUMBER", "systemd", "NUMBER", "dracut", "pre", "udev", "NUMBER", "service", "Succeeded", "NUMBER", "NUMBER", "systemd", "NUMBER", "Stopped", "dracut", "pre", "udev", "hook", "NUMBER", "NUMBER", "systemd", "NUMBER", "dracut", "cmdline", "NUMBER", "service", "Succeeded", "NUMBER", "NUMBER", "systemd", "NUMBER", "Stopped", "dracut", "cmdline", "hook", "NUMBER", "Warning", "dev", "disk", "by", "partuuid", "cf", "NUMBER", "a", "NUMBER", "f", "c", "NUMBER", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "bab", "NUMBER", "a", "NUMBER", "c", "do", "not", "exist", "Changing", "the", "log", "level", "to", "Debug", "I", "get", "in", "the", "log", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "WARN", "src", "devices", "src", "legacy", "i", "NUMBER", "rs", "NUMBER", "Failed", "to", "trigger", "i", "NUMBER", "kbd", "interrupt", "disabled", "by", "guest", "OS", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "WARN", "src", "devices", "src", "legacy", "i", "NUMBER", "rs", "NUMBER", "Failed", "to", "trigger", "i", "NUMBER", "kbd", "interrupt", "disabled", "by", "guest", "OS", "I", "notice", "that", "add", "the", "kernel", "flags", "i", "NUMBER", "noaux", "i", "NUMBER", "nomux", "i", "NUMBER", "nopnp", "i", "NUMBER", "dumbkbd", "muted", "the", "above", "warning", "NUMBER", "but", "still", "no", "luck", "NUMBER", "Seems", "that", "virtio", "module", "be", "actually", "loaded", "or", "maybe", "not", "Warning", "dev", "disk", "by", "partuuid", "cf", "NUMBER", "a", "NUMBER", "f", "c", "NUMBER", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "bab", "NUMBER", "a", "NUMBER", "c", "do", "not", "exist", "Press", "Enter", "for", "emergency", "shell", "or", "wait", "NUMBER", "minutes", "for", "reboot", "NUMBER", "Generating", "run", "initramfs", "rdsosreport", "NUMBER", "txt", "Entering", "emergency", "mode", "NUMBER", "Exit", "the", "shell", "to", "continue", "NUMBER", "Type", "journalctl", "to", "view", "system", "logs", "NUMBER", "You", "might", "want", "to", "save", "run", "initramfs", "rdsosreport", "NUMBER", "txt", "to", "a", "USB", "stick", "or", "boot", "after", "mounting", "them", "and", "attach", "it", "to", "a", "bug", "report", "NUMBER", "insmod", "usr", "lib", "NUMBER", "modules", "NUMBER", "flatcar", "kernel", "drivers", "block", "aoe", "loop", "NUMBER", "ko", "rbd", "NUMBER", "ko", "zram", "brd", "NUMBER", "ko", "mtip", "NUMBER", "xx", "virtio_blk", "NUMBER", "ko", "drbd", "nbd", "NUMBER", "ko", "xen", "blkfront", "NUMBER", "ko", "insmod", "ERROR", "could", "not", "insert", "module", "usr", "lib", "NUMBER", "modules", "NUMBER", "flatcar", "kernel", "drivers", "block", "virtio_blk", "NUMBER", "ko", "File", "exists", "tnotw", "thank", "you", "to", "reply", "on", "this", "NUMBER", "I", "haven", "t", "tried", "yet", "your", "approach", "and", "definitely", "I", "will", "NUMBER", "What", "I", "m", "trying", "to", "achieve", "be", "the", "following", "NUMBER", "Flatcar", "as", "Fedora", "or", "similar", "has", "a", "special", "way", "to", "be", "bootstrap", "use", "Ignition", "LINK", "linux", "NUMBER", "org", "ignition", "what", "be", "ignition", "By", "use", "the", "image", "having", "the", "partitions", "would", "have", "be", "possible", "to", "install", "in", "a", "specific", "partition", "usually", "labeled", "as", "OEM", "LINK", "linux", "init", "blob", "flatcar", "master", "bin", "flatcar", "install", "L", "NUMBER", "the", "ignition", "file", "and", "at", "the", "boot", "the", "instance", "would", "be", "automatically", "provisioned", "NUMBER", "However", "at", "this", "point", "I", "was", "not", "able", "to", "do", "that", "NUMBER", "maybe", "as", "you", "say", "the", "problem", "be", "that", "the", "the", "distro", "has", "EFI", "partitions", "as", "showed", "in", "here", "lsblk", "o", "NAME", "PARTUUID", "LABEL", "NAME", "PARTUUID", "LABEL", "sda", "sda", "NUMBER", "NUMBER", "b", "NUMBER", "f", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "aa", "NUMBER", "NUMBER", "e", "NUMBER", "f", "NUMBER", "EFI", "SYSTEM", "sda", "NUMBER", "NUMBER", "adf", "NUMBER", "ecbb", "NUMBER", "NUMBER", "b", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "ec", "NUMBER", "e", "sda", "NUMBER", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "NUMBER", "cce", "NUMBER", "f", "NUMBER", "usr", "sda", "NUMBER", "e", "NUMBER", "dd", "NUMBER", "c", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "b", "NUMBER", "fe", "NUMBER", "f", "NUMBER", "a", "NUMBER", "c", "sda", "NUMBER", "a", "NUMBER", "d", "NUMBER", "abf", "NUMBER", "c", "NUMBER", "NUMBER", "b", "NUMBER", "d", "NUMBER", "fa", "NUMBER", "e", "NUMBER", "a", "NUMBER", "c", "OEM", "sda", "NUMBER", "NUMBER", "fd", "NUMBER", "f", "b", "NUMBER", "d", "NUMBER", "NUMBER", "eae", "ad", "NUMBER", "NUMBER", "b", "NUMBER", "e", "NUMBER", "e", "NUMBER", "c", "sda", "NUMBER", "cf", "NUMBER", "a", "NUMBER", "f", "c", "NUMBER", "NUMBER", "b", "NUMBER", "a", "NUMBER", "fd", "NUMBER", "bab", "NUMBER", "a", "NUMBER", "c", "ROOT", "and", "perhaps", "Firecracker", "do", "not", "support", "that", "NUMBER", "I", "ve", "just", "tried", "your", "approach", "tnotw", "and", "seems", "true", "that", "it", "boots", "but", "it", "fail", "for", "instance", "in", "here", "TIME", "Timed", "out", "waiting", "for", "device", "dev", "disk", "by", "label", "OEM", "NUMBER", "but", "overall", "I", "get", "to", "the", "login", "NUMBER", "So", "seems", "that", "NUMBER", "UEFI", "partitions", "be", "not", "support", "seeking", "official", "confirmation", "NUMBER", "Maybe", "we", "could", "improve", "introduce", "a", "patch", "NUMBER", "Firecracker", "for", "the", "moment", "expects", "kernel", "cooked", "in", "a", "certain", "way", "NUMBER", "Passing", "in", "the", "kernel", "like", "LINK", "linux", "NUMBER", "net", "amd", "NUMBER", "usr", "current", "flatcar_production_image", "NUMBER", "vmlinuz", "do", "not", "work", "NUMBER", "UEFI", "partitions", "be", "not", "support", "seeking", "official", "confirmation", "NUMBER", "Maybe", "we", "could", "improve", "introduce", "a", "patch", "That", "be", "correct", "NUMBER", "Firecracker", "do", "not", "use", "a", "boot", "loader", "NUMBER", "It", "sets", "up", "the", "emulated", "HW", "to", "run", "straight", "into", "kernel", "code", "from", "the", "provide", "kernel", "image", "NUMBER", "Since", "we", "have", "no", "use", "for", "boot", "loaders", "there", "s", "no", "need", "for", "EFI", "system", "partitions", "support", "NUMBER", "Firecracker", "for", "the", "moment", "expects", "kernel", "cooked", "in", "a", "certain", "way", "NUMBER", "Passing", "in", "the", "kernel", "like", "LINK", "linux", "NUMBER", "net", "amd", "NUMBER", "usr", "current", "flatcar_production_image", "NUMBER", "vmlinuz", "do", "not", "work", "NUMBER", "Firecracker", "doesn", "t", "support", "compressed", "kernel", "format", "NUMBER", "Just", "use", "the", "uncompressed", "image", "from", "the", "same", "linux", "build", "cook", "NUMBER", "There", "was", "this", "LINK", "microvm", "firecracker", "pull", "NUMBER", "attempt", "to", "add", "compressed", "kernel", "support", "but", "it", "didn", "t", "make", "it", "in", "NUMBER", "You", "can", "also", "decompress", "the", "vmlinuz", "image", "you", "mention", "NUMBER", "Example", "here", "LINK", "microvm", "firecracker", "pull", "NUMBER", "issuecomment", "NUMBER", "Thank", "you", "acatangiu", "for", "the", "reply", "here", "NUMBER", "I", "ve", "tried", "to", "use", "this", "LINK", "linux", "NUMBER", "net", "amd", "NUMBER", "usr", "current", "flatcar_production_image", "NUMBER", "vmlinuz", "I", "have", "decompressed", "it", "before", "passing", "to", "Firecracker", "NUMBER", "It", "boots", "but", "then", "I", "get", "to", "the", "point", "that", "I", "cannot", "load", "the", "block", "device", "NUMBER", "I", "have", "linked", "an", "output", "here", "LINK", "microvm", "firecracker", "issue", "NUMBER", "issuecomment", "NUMBER", "I", "believe", "that", "it", "do", "not", "work", "because", "the", "the", "kernel", "image", "be", "not", "ready", "for", "this", "kind", "of", "scenario", "NUMBER", "tnotw", "your", "hint", "be", "gold", "NUMBER", "It", "must", "be", "that", "the", "reason", "NUMBER", "From", "the", "doc", "Allow", "virtio", "mmio", "devices", "instantiation", "via", "the", "kernel", "command", "line", "or", "module", "parameters", "NUMBER", "Be", "aware", "that", "use", "incorrect", "parameters", "base", "address", "in", "particular", "can", "crash", "your", "system", "you", "have", "be", "warned", "NUMBER", "See", "Documentation", "admin", "guide", "kernel", "parameters", "NUMBER", "rst", "for", "details", "NUMBER", "and", "CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES", "be", "not", "set", "in", "the", "Flatcar", "kernel", "At", "the", "end", "tnotw", "enable", "CONFIG_VIRTIO_MMIO_CMDLINE_DEVICES", "in", "the", "kernel", "made", "the", "job", "do", "NUMBER", "We", "can", "close", "this", "NUMBER", "Thanks", "a", "lot", "Reason", "for", "This", "PR", "Increase", "cgroups", "integration", "flexibility", "for", "the", "Jailer", "NUMBER", "Fixes", "NUMBER", "Fixes", "NUMBER", "Description", "of", "Changes", "New", "cgroups", "argument", "have", "be", "add", "to", "the", "Jailer", "NUMBER", "This", "argument", "takes", "care", "of", "setting", "the", "pass", "cgroups", "generically", "and", "check", "that", "the", "expected", "value", "be", "correctly", "write", "NUMBER", "The", "Cgroup", "type", "have", "be", "modify", "in", "order", "to", "represent", "each", "of", "the", "cgroups", "pass", "by", "cgroups", "command", "line", "argument", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Hi", "christian", "NUMBER", "Thanks", "for", "the", "PR", "we", "will", "take", "a", "closer", "look", "at", "it", "soon", "NUMBER", "Thanks", "for", "the", "feedback", "ioanachirca", "NUMBER", "I", "ve", "add", "all", "the", "change", "NUMBER", "Hi", "christian", "NUMBER", "we", "re", "not", "sure", "if", "we", "should", "downright", "remove", "the", "node", "support", "or", "follow", "some", "deprecation", "mechanism", "NUMBER", "I", "be", "currently", "reaching", "out", "to", "some", "of", "our", "users", "to", "get", "some", "customer", "feedback", "and", "we", "will", "come", "back", "with", "a", "decision", "NUMBER", "Hello", "acatangiu", "No", "problem", "if", "you", "need", "to", "proceed", "in", "a", "different", "way", "with", "the", "node", "argument", "deprecation", "I", "can", "upgrade", "the", "PR", "and", "make", "it", "fits", "with", "the", "new", "Cgroups", "interface", "until", "it", "can", "be", "remove", "NUMBER", "Hello", "acatangiu", "No", "problem", "if", "you", "need", "to", "proceed", "in", "a", "different", "way", "with", "the", "node", "argument", "deprecation", "I", "can", "upgrade", "the", "PR", "and", "make", "it", "fits", "with", "the", "new", "Cgroups", "interface", "until", "it", "can", "be", "remove", "NUMBER", "We", "decided", "to", "go", "with", "a", "deprecation", "mechanism", "here", "NUMBER", "For", "the", "purpose", "of", "this", "PR", "it", "be", "enough", "to", "keep", "both", "node", "and", "cgroup", "parameters", "functional", "and", "we", "will", "add", "a", "deprecation", "mechanism", "for", "node", "on", "top", "of", "that", "NUMBER", "Hello", "iulianbarbu", "and", "acatangiu", "sorry", "for", "the", "late", "reply", "I", "ve", "be", "on", "vacation", "last", "days", "NUMBER", "I", "ll", "take", "care", "of", "submit", "commit", "addressing", "both", "change", "NUMBER", "The", "support", "for", "node", "attribute", "and", "the", "separator", "change", "NUMBER", "Hello", "iulianbarbu", "I", "ve", "be", "thinking", "and", "make", "some", "test", "regard", "change", "the", "separator", "NUMBER", "I", "think", "that", "probably", "use", "as", "separator", "could", "be", "a", "bad", "idea", "too", "as", "it", "might", "be", "interpreted", "by", "bash", "NUMBER", "I", "think", "that", "maybe", "we", "could", "use", "a", "different", "approach", "something", "like", "jailer", "NUMBER", "cgroup", "cpuset", "NUMBER", "mems", "NUMBER", "cgroup", "cpuset", "NUMBER", "cpus", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "way", "we", "use", "different", "argument", "as", "separator", "it", "seems", "cleaner", "to", "me", "NUMBER", "I", "ve", "prepare", "a", "commit", "with", "a", "prototype", "for", "support", "this", "into", "the", "arg", "parser", "LINK", "What", "do", "you", "think", "about", "it", "If", "you", "think", "this", "solution", "be", "good", "enough", "I", "can", "open", "a", "new", "PR", "with", "the", "parser", "change", "and", "work", "over", "it", "NUMBER", "Hello", "iulianbarbu", "I", "ve", "be", "thinking", "and", "make", "some", "test", "regard", "change", "the", "separator", "NUMBER", "I", "think", "that", "probably", "use", "as", "separator", "could", "be", "a", "bad", "idea", "too", "as", "it", "might", "be", "interpreted", "by", "bash", "NUMBER", "I", "think", "that", "maybe", "we", "could", "use", "a", "different", "approach", "something", "like", "jailer", "NUMBER", "cgroup", "cpuset", "NUMBER", "mems", "NUMBER", "cgroup", "cpuset", "NUMBER", "cpus", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "This", "way", "we", "use", "different", "argument", "as", "separator", "it", "seems", "cleaner", "to", "me", "NUMBER", "I", "ve", "prepare", "a", "commit", "with", "a", "prototype", "for", "support", "this", "into", "the", "arg", "parser", "christian", "NUMBER", "NUMBER", "f", "LINK", "What", "do", "you", "think", "about", "it", "If", "you", "think", "this", "solution", "be", "good", "enough", "I", "can", "open", "a", "new", "PR", "with", "the", "parser", "change", "and", "work", "over", "it", "NUMBER", "Hi", "christian", "NUMBER", "I", "just", "took", "a", "look", "at", "this", "thread", "but", "I", "might", "still", "be", "miss", "some", "context", "sorry", "D", "NUMBER", "Anyway", "regard", "the", "parser", "change", "I", "do", "not", "quite", "like", "be", "able", "to", "set", "multiple", "values", "for", "an", "argument", "by", "repeating", "that", "argument", "but", "it", "be", "indeed", "a", "pretty", "subjective", "opinion", "NUMBER", "It", "would", "become", "confusing", "to", "allow", "both", "argument", "with", "just", "a", "value", "we", "do", "not", "overwrite", "but", "return", "a", "DuplicateArgument", "error", "if", "we", "repeat", "such", "argument", "e", "NUMBER", "g", "NUMBER", "secomp", "level", "NUMBER", "secomp", "level", "NUMBER", "and", "argument", "with", "more", "values", "in", "this", "form", "cgroup", "pair", "NUMBER", "cgroup", "pair", "NUMBER", "NUMBER", "Basically", "you", "want", "to", "pass", "a", "list", "as", "value", "to", "the", "cgroups", "parameter", "I", "think", "it", "would", "look", "better", "like", "this", "cgroups", "pair", "NUMBER", "pair", "NUMBER", "or", "cgroups", "pair", "NUMBER", "TAG", "pair", "NUMBER", "I", "prefer", "the", "first", "option", "NUMBER", "Also", "since", "it", "seems", "the", "cgroups", "argument", "can", "take", "many", "key", "value", "pairs", "another", "idea", "that", "would", "simplify", "the", "parsing", "would", "be", "to", "store", "these", "pairs", "in", "a", "file", "cgroups", "file", "some_file", "NUMBER", "Hello", "lauralt", "I", "agree", "that", "the", "best", "solution", "would", "be", "to", "use", "a", "separator", "the", "problem", "here", "be", "that", "common", "use", "separator", "might", "interfere", "with", "the", "functionality", "e", "NUMBER", "g", "it", "can", "be", "use", "by", "cgroups", "for", "something", "else", "or", "be", "interpreted", "by", "bash", "NUMBER", "That", "s", "why", "I", "m", "trying", "to", "find", "a", "different", "approach", "NUMBER", "Yes", "sure", "NUMBER", "I", "think", "a", "workaround", "for", "this", "would", "be", "to", "require", "escaping", "cgroups", "cpuset", "NUMBER", "mems", "NUMBER", "cpuset", "NUMBER", "cpus", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "You", "re", "right", "iulianbarbu", "but", "IMHO", "it", "doesn", "t", "look", "too", "clean", "also", "these", "escapes", "could", "be", "a", "bit", "annoying", "when", "the", "command", "generation", "execution", "be", "automate", "NUMBER", "I", "agree", "with", "the", "guidelines", "and", "with", "giving", "a", "thought", "to", "make", "sure", "that", "the", "interface", "we", "be", "defining", "be", "good", "enough", "to", "avoid", "future", "breaking", "change", "NUMBER", "So", "just", "let", "me", "know", "when", "you", "and", "the", "team", "have", "an", "update", "and", "I", "ll", "keep", "work", "on", "this", "NUMBER", "Hello", "lauralt", "I", "agree", "that", "the", "best", "solution", "would", "be", "to", "use", "a", "separator", "the", "problem", "here", "be", "that", "common", "use", "separator", "might", "interfere", "with", "the", "functionality", "e", "NUMBER", "g", "it", "can", "be", "use", "by", "cgroups", "for", "something", "else", "or", "be", "interpreted", "by", "bash", "NUMBER", "That", "s", "why", "I", "m", "trying", "to", "find", "a", "different", "approach", "NUMBER", "Hmm", "could", "a", "separator", "be", "use", "by", "cgroups", "for", "something", "else", "I", "would", "expect", "to", "not", "have", "spaces", "inside", "a", "key", "value", "pair", "NUMBER", "Also", "in", "case", "we", "accept", "that", "the", "value", "for", "example", "can", "contain", "spaces", "wouldn", "t", "this", "be", "a", "problem", "in", "the", "cgroup", "pair", "NUMBER", "cgroup", "pair", "NUMBER", "solution", "that", "you", "propose", "too", "i", "NUMBER", "e", "NUMBER", "you", "would", "keep", "only", "the", "first", "part", "of", "the", "value", "I", "m", "not", "sure", "if", "the", "be", "use", "for", "something", "else", "by", "cgroups", "probably", "not", "but", "I", "can", "try", "to", "find", "out", "NUMBER", "Anyway", "in", "case", "we", "need", "to", "support", "that", "specific", "case", "we", "can", "try", "to", "find", "a", "workaround", "like", "cgroups", "cpuset", "NUMBER", "cpus", "NUMBER", "NUMBER", "TAG", "cpuset", "NUMBER", "mems", "NUMBER", "or", "like", "cgroup", "cpuset", "NUMBER", "cpus", "NUMBER", "NUMBER", "cgroup", "cpuset", "NUMBER", "mems", "NUMBER", "And", "I", "guess", "that", "once", "we", "have", "read", "the", "entire", "string", "that", "shouldn", "t", "be", "a", "problem", "any", "more", "as", "it", "will", "fit", "to", "the", "format", "TAG", "NUMBER", "TAG", "TAG", "be", "TAG", "every", "character", "after", "the", "including", "white", "spaces", "NUMBER", "Hello", "acatangiu", "I", "ve", "just", "push", "the", "commit", "restoring", "node", "functionality", "LINK", "microvm", "firecracker", "pull", "NUMBER", "commit", "NUMBER", "ea", "NUMBER", "c", "NUMBER", "af", "NUMBER", "d", "NUMBER", "d", "NUMBER", "a", "NUMBER", "df", "NUMBER", "f", "NUMBER", "f", "NUMBER", "c", "NUMBER", "aba", "NUMBER", "NUMBER", "It", "takes", "care", "of", "creating", "the", "corresponding", "cgroups", "to", "isolate", "the", "process", "in", "the", "specified", "node", "NUMBER", "I", "d", "like", "to", "mention", "that", "previously", "the", "jailer", "apart", "from", "isolating", "the", "proces", "in", "the", "NUMA", "node", "it", "also", "register", "the", "PID", "for", "some", "cgroups", "controllers", "cpu", "cpuset", "and", "pids", "so", "people", "can", "modify", "the", "cgroups", "after", "the", "jailer", "was", "executed", "From", "the", "jailer", "docs", "The", "jailer", "then", "writes", "the", "current", "pid", "to", "sys", "fs", "cgroup", "cpu", "firecracker", "NUMBER", "e", "NUMBER", "e", "NUMBER", "c", "NUMBER", "b", "NUMBER", "b", "NUMBER", "NUMBER", "tasks", "sys", "fs", "cgroup", "cpuset", "firecracker", "NUMBER", "e", "NUMBER", "e", "NUMBER", "c", "NUMBER", "b", "NUMBER", "b", "NUMBER", "NUMBER", "tasks", "and", "sys", "fs", "cgroup", "pids", "firecracker", "NUMBER", "e", "NUMBER", "e", "NUMBER", "c", "NUMBER", "b", "NUMBER", "b", "NUMBER", "NUMBER", "tasks", "With", "my", "current", "change", "this", "be", "only", "do", "when", "a", "cgroup", "be", "set", "for", "a", "specific", "controller", "so", "if", "only", "node", "be", "use", "the", "PID", "will", "be", "only", "registered", "for", "cpuset", "controller", "which", "be", "the", "one", "use", "for", "the", "NUMA", "node", "isolation", "NUMBER", "I", "don", "t", "know", "if", "we", "should", "take", "care", "of", "it", "too", "and", "follow", "some", "deprecation", "mode", "for", "this", "specific", "behavior", "too", "NUMBER", "Regarding", "the", "CI", "test", "I", "m", "not", "sure", "if", "the", "Internal", "CI", "error", "of", "aarch", "NUMBER", "be", "relate", "with", "my", "change", "it", "doesn", "t", "show", "any", "error", "relate", "information", "NUMBER", "For", "the", "x", "NUMBER", "_", "NUMBER", "error", "it", "s", "relate", "with", "use", "as", "separator", "so", "it", "should", "be", "fix", "once", "we", "decide", "how", "to", "proceed", "on", "this", "issue", "NUMBER", "Hi", "iulianbarbu", "perfect", "I", "ll", "prepare", "a", "new", "commit", "with", "those", "change", "NUMBER", "Regarding", "the", "support", "for", "duplicates", "argument", "at", "the", "ArgParser", "should", "I", "open", "a", "new", "PR", "for", "this", "or", "it", "s", "ok", "to", "submit", "the", "change", "in", "this", "PR", "II", "would", "prefer", "to", "review", "all", "the", "change", "in", "the", "same", "PR", "NUMBER", "You", "can", "add", "first", "the", "support", "for", "multiple", "args", "in", "a", "commit", "then", "the", "support", "for", "cgroup", "flag", "NUMBER", "I", "ll", "take", "over", "from", "there", "and", "review", "all", "the", "change", "together", "NUMBER", "Ok", "perfect", "NUMBER", "I", "ve", "just", "push", "both", "commit", "NUMBER", "Let", "me", "know", "if", "you", "want", "me", "to", "change", "improve", "anything", "NUMBER", "Please", "squash", "the", "commit", "which", "add", "support", "for", "multiple", "args", "in", "a", "commit", "and", "all", "the", "other", "commit", "that", "add", "cgroup", "flag", "in", "another", "commit", "NUMBER", "I", "guess", "you", "want", "to", "have", "just", "two", "commit", "in", "the", "PR", "one", "for", "add", "duplicate", "argument", "support", "and", "one", "for", "cgroups", "support", "NUMBER", "If", "it", "s", "ok", "for", "you", "I", "ll", "squash", "the", "commit", "after", "add", "all", "the", "request", "change", "NUMBER", "Hello", "iulianbarbu", "I", "ve", "push", "a", "commit", "LINK", "microvm", "firecracker", "pull", "NUMBER", "commit", "NUMBER", "c", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "b", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "e", "NUMBER", "af", "NUMBER", "e", "NUMBER", "with", "the", "request", "change", "NUMBER", "Please", "take", "a", "look", "at", "it", "when", "you", "have", "some", "time", "if", "the", "change", "looks", "good", "to", "you", "I", "ll", "squash", "all", "the", "commit", "in", "two", "NUMBER", "Perfect", "Thanks", "for", "the", "feedback", "NUMBER", "I", "m", "run", "the", "test", "locally", "after", "change", "this", "LINK", "microvm", "firecracker", "pull", "NUMBER", "discussion_r", "NUMBER", "to", "make", "sure", "I", "haven", "t", "break", "anything", "nice", "catch", "btw", "NUMBER", "I", "ll", "update", "the", "PR", "as", "soon", "as", "test", "be", "OK", "NUMBER", "Please", "explicitly", "sign", "each", "commit", "git", "commit", "s", "amend", "NUMBER", "Done", "christian", "NUMBER", "looks", "like", "the", "PR", "be", "ready", "for", "merge", "NUMBER", "There", "s", "only", "a", "problem", "of", "solving", "a", "test_coverage", "NUMBER", "py", "conflict", "NUMBER", "We", "could", "do", "that", "ourselves", "if", "that", "s", "fine", "with", "you", "NUMBER", "christian", "NUMBER", "looks", "like", "the", "PR", "be", "ready", "for", "merge", "NUMBER", "There", "s", "only", "a", "problem", "of", "solving", "a", "test_coverage", "NUMBER", "py", "conflict", "NUMBER", "We", "could", "do", "that", "ourselves", "if", "that", "s", "fine", "with", "you", "NUMBER", "Sure", "feel", "free", "to", "fix", "it", "NUMBER", "Reworded", "the", "commit", "since", "it", "mention", "ARM", "instead", "of", "AMD", "NUMBER", "NUMBER", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "snapshot", "Start", "fresh", "microvm", "Pause", "microvm", "Create", "diff", "snapshot", "Kill", "microvm", "Start", "fresh", "Firecracker", "Load", "previous", "snapshot", "Resume", "guest", "NUMBER", "Guest", "crashes", "on", "resume", "NUMBER", "BUG", "stack", "guard", "page", "was", "hit", "at", "ffffc", "NUMBER", "dfbff", "NUMBER", "stack", "be", "ffffc", "NUMBER", "dfc", "NUMBER", "ffffc", "NUMBER", "dfffff", "NUMBER", "kernel", "stack", "overflow", "double", "fault", "NUMBER", "NUMBER", "SMP", "PTI", "NUMBER", "PANIC", "double", "fault", "error_code", "NUMBER", "x", "NUMBER", "NUMBER", "CPU", "NUMBER", "PID", "NUMBER", "Comm", "agetty", "Not", "tainted", "NUMBER", "NUMBER", "amzn", "NUMBER", "x", "NUMBER", "_", "NUMBER", "NUMBER", "NUMBER", "task", "ffff", "NUMBER", "c", "NUMBER", "e", "NUMBER", "task", "NUMBER", "ack", "ffffc", "NUMBER", "dfc", "NUMBER", "NUMBER", "RIP", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "RSP", "NUMBER", "fffffe", "NUMBER", "EFLAGS", "NUMBER", "NUMBER", "RAX", "NUMBER", "RBX", "NUMBER", "RCX", "ffffffff", "NUMBER", "a", "NUMBER", "NUMBER", "RDX", "NUMBER", "RSI", "NUMBER", "RDI", "fffffe", "NUMBER", "NUMBER", "RBP", "fffffe", "NUMBER", "R", "NUMBER", "NUMBER", "R", "NUMBER", "NUMBER", "NUMBER", "R", "NUMBER", "NUMBER", "R", "NUMBER", "NUMBER", "R", "NUMBER", "NUMBER", "NUMBER", "R", "NUMBER", "NUMBER", "R", "NUMBER", "NUMBER", "R", "NUMBER", "NUMBER", "NUMBER", "FS", "NUMBER", "f", "NUMBER", "b", "NUMBER", "dbc", "NUMBER", "e", "NUMBER", "NUMBER", "GS", "ffff", "NUMBER", "fc", "NUMBER", "NUMBER", "knlGS", "NUMBER", "NUMBER", "CS", "NUMBER", "DS", "NUMBER", "ES", "NUMBER", "CR", "NUMBER", "NUMBER", "NUMBER", "CR", "NUMBER", "fffffe", "NUMBER", "ff", "NUMBER", "CR", "NUMBER", "NUMBER", "a", "NUMBER", "CR", "NUMBER", "NUMBER", "b", "NUMBER", "NUMBER", "DR", "NUMBER", "NUMBER", "DR", "NUMBER", "NUMBER", "DR", "NUMBER", "NUMBER", "NUMBER", "DR", "NUMBER", "NUMBER", "DR", "NUMBER", "NUMBER", "fffe", "NUMBER", "ff", "NUMBER", "DR", "NUMBER", "NUMBER", "NUMBER", "Call", "Trace", "NUMBER", "Code", "f", "NUMBER", "ff", "ff", "e", "NUMBER", "f", "NUMBER", "fc", "ff", "ff", "NUMBER", "NUMBER", "d", "NUMBER", "d", "cc", "NUMBER", "NUMBER", "c", "NUMBER", "NUMBER", "c", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "de", "NUMBER", "c", "NUMBER", "ef", "e", "NUMBER", "NUMBER", "a", "fa", "ff", "ff", "e", "NUMBER", "d", "NUMBER", "fc", "ff", "ff", "e", "NUMBER", "a", "NUMBER", "eb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "e", "NUMBER", "TAG", "NUMBER", "NUMBER", "NUMBER", "fc", "NUMBER", "NUMBER", "NUMBER", "f", "NUMBER", "NUMBER", "f", "NUMBER", "d", "NUMBER", "NUMBER", "f", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "de", "NUMBER", "c", "NUMBER", "NUMBER", "Kernel", "panic", "not", "syncing", "Machine", "halted", "NUMBER", "NUMBER", "Kernel", "Offset", "disabled", "NUMBER", "Rebooting", "in", "NUMBER", "seconds", "NUMBER", "Steps", "to", "reproduce", "NUMBER", "snapshot", "base", "NUMBER", "diff", "Start", "fresh", "Firecracker", "Load", "a", "full", "snapshot", "Resume", "Run", "some", "commands", "in", "guest", "Pause", "microvm", "Create", "diff", "snapshot", "Kill", "microvm", "Start", "fresh", "Firecracker", "Merge", "base", "diff", "Load", "merge", "snapshot", "Resume", "guest", "NUMBER", "Try", "to", "run", "fio", "in", "guest", "Fio", "crashes", "root", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "f", "NUMBER", "f", "NUMBER", "a", "fio", "fio", "NUMBER", "k", "NUMBER", "cfg", "rand", "read", "NUMBER", "k", "NUMBER", "g", "NUMBER", "rw", "randread", "bs", "R", "NUMBER", "B", "NUMBER", "B", "W", "NUMBER", "B", "NUMBER", "B", "T", "NUMBER", "B", "NUMBER", "B", "ioengine", "libaio", "iodepth", "NUMBER", "fio", "NUMBER", "Segmentation", "fault", "dmesg", "NUMBER", "fio", "NUMBER", "segfault", "at", "NUMBER", "ip", "NUMBER", "f", "NUMBER", "bd", "NUMBER", "sp", "NUMBER", "fff", "NUMBER", "b", "NUMBER", "bd", "NUMBER", "error", "NUMBER", "in", "fio", "NUMBER", "f", "NUMBER", "f", "NUMBER", "b", "NUMBER", "I", "have", "a", "hunch", "this", "be", "because", "the", "pages", "dirtied", "by", "the", "virtio", "device", "fio", "must", "mean", "the", "microvm", "has", "at", "least", "a", "block", "device", "be", "miss", "from", "the", "snapshot", "because", "they", "re", "miss", "in", "turn", "from", "the", "KVM", "dirty", "log", "Reason", "for", "This", "PR", "Resolves", "NUMBER", "Description", "of", "Changes", "Updates", "vmm", "sys", "util", "to", "current", "latest", "NUMBER", "Replaces", "src", "utils", "epoll", "with", "vmm", "sys", "utils", "epoll", "implementation", "Removes", "dead", "code", "and", "unnecessary", "dependencies", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Hi", "defunctio", "Thanks", "for", "your", "PR", "I", "will", "take", "a", "closer", "look", "at", "it", "on", "Monday", "NUMBER", "Meanwhile", "it", "seems", "some", "test", "be", "fail", "i", "NUMBER", "e", "NUMBER", "the", "style", "one", "please", "run", "cargo", "fmt", "and", "a", "doc", "example", "from", "server", "NUMBER", "rs", "NUMBER", "It", "would", "be", "great", "if", "you", "could", "fix", "them", "in", "the", "meantime", "thanks", "Also", "please", "sign", "your", "commit", "git", "commit", "s", "amend", "NUMBER", "thanks", "lauralt", "will", "do", "and", "enjoy", "your", "weekend", "slightly_smiling_face", "defunctio", "do", "you", "still", "want", "to", "work", "on", "this", "PR", "Any", "help", "needed", "dianpopa", "Yeah", "still", "interest", "no", "help", "needed", "NUMBER", "Apologies", "it", "s", "be", "a", "busy", "few", "weeks", "and", "just", "haven", "t", "had", "the", "time", "to", "revisit", "NUMBER", "defunctio", "the", "coverage", "test", "seem", "to", "fail", "at", "the", "previous", "push", "NUMBER", "Can", "you", "please", "update", "in", "test", "integration_tests", "build", "test_coverage", "NUMBER", "py", "the", "Intel", "target", "value", "with", "NUMBER", "No", "need", "to", "have", "a", "separate", "commit", "for", "it", "you", "can", "do", "the", "change", "in", "the", "last", "commit", "too", "NUMBER", "ioanachirca", "rebased", "please", "re", "approve", "NUMBER", "Thanks", "One", "more", "change", "needed", "looks", "like", "your", "PR", "increases", "the", "coverage", "on", "AMD", "nice", "please", "update", "the", "expected", "coverage", "here", "LINK", "microvm", "firecracker", "blob", "master", "test", "integration_tests", "build", "test_coverage", "NUMBER", "py", "L", "NUMBER", "diff", "diff", "git", "a", "test", "integration_tests", "build", "test_coverage", "NUMBER", "py", "b", "test", "integration_tests", "build", "test_coverage", "NUMBER", "py", "index", "NUMBER", "ad", "NUMBER", "e", "NUMBER", "bc", "NUMBER", "NUMBER", "a", "test", "integration_tests", "build", "test_coverage", "NUMBER", "py", "b", "test", "integration_tests", "build", "test_coverage", "NUMBER", "py", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "import", "host_tools", "NUMBER", "proc", "as", "proc", "this", "contains", "the", "frequency", "while", "on", "AMD", "it", "do", "not", "NUMBER", "Checkout", "the", "cpuid", "crate", "NUMBER", "In", "the", "future", "other", "differences", "may", "appear", "NUMBER", "COVERAGE_DICT", "Intel", "NUMBER", "AMD", "NUMBER", "COVERAGE_DICT", "Intel", "NUMBER", "AMD", "NUMBER", "PROC_MODEL", "proc", "NUMBER", "proc_type", "COVERAGE_MAX_DELTA", "NUMBER", "aghecenco", "lauralt", "thank", "you", "for", "your", "help", "Hi", "we", "start", "developing", "support", "for", "snapshot", "pause", "resume", "create", "load", "inside", "our", "fork", "of", "firecracker", "containerd", "we", "can", "make", "the", "code", "public", "NUMBER", "While", "we", "had", "no", "problem", "with", "support", "pause", "resume", "create", "snapshot", "methods", "we", "run", "into", "an", "error", "inside", "Firecracker", "s", "virtio", "block", "module", "with", "load", "snapshot", "resume", "NUMBER", "The", "workflow", "be", "startVM", "boot", "Pause", "Create", "Snap", "Offload", "kill", "the", "VM", "with", "SIGTERM", "SnapshotLoad", "Resume", "The", "problem", "we", "face", "be", "at", "the", "Resume", "point", "where", "we", "get", "the", "following", "error", "from", "firecracker", "s", "log", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "API", "server", "received", "a", "Put", "request", "on", "snapshot", "load", "with", "body", "mem_file_path", "tmp", "mem_file", "snapshot_path", "tmp", "snapshot_file", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "API", "server", "received", "a", "Patch", "request", "on", "vm", "with", "body", "state", "Resumed", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "devices", "src", "virtio", "block", "device", "NUMBER", "rs", "NUMBER", "Failed", "to", "execute", "request", "BadRequest", "InvalidOffset", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "devices", "src", "virtio", "block", "device", "NUMBER", "rs", "NUMBER", "Failed", "to", "execute", "request", "BadRequest", "InvalidOffset", "We", "tend", "to", "think", "that", "this", "can", "be", "relate", "to", "the", "way", "firecracker", "containerd", "manages", "block", "devices", "NUMBER", "The", "VM", "mounts", "block", "devices", "in", "NUMBER", "phases", "NUMBER", "First", "the", "VM", "boots", "from", "a", "generic", "rootfs", "with", "the", "containerd", "agent", "The", "API", "server", "received", "a", "Put", "request", "on", "drives", "root_drive", "with", "body", "The", "API", "server", "received", "a", "Put", "request", "on", "drives", "root_drive", "with", "body", "drive_id", "root_drive", "is_read_only", "true", "is_root_device", "true", "path_on_host", "var", "lib", "firecracker", "containerd", "runtime", "default", "rootfs", "NUMBER", "img", "n", "NUMBER", "Then", "the", "agent", "needs", "to", "mount", "a", "second", "block", "device", "that", "contains", "the", "container", "specific", "data", "NUMBER", "To", "do", "so", "containerd", "attaches", "another", "drive", "and", "patches", "the", "path", "to", "the", "drive", "twice", "The", "API", "server", "received", "a", "Put", "request", "on", "drives", "MN", "NUMBER", "HE", "NUMBER", "UOVRDA", "with", "body", "drive_id", "MN", "NUMBER", "HE", "NUMBER", "UOVRDA", "is_read_only", "false", "is_root_device", "false", "path_on_host", "var", "lib", "firecracker", "containerd", "shim", "base", "firecracker", "containerd", "NUMBER", "ctrstub", "NUMBER", "n", "NUMBER", "TAG", "The", "API", "server", "received", "a", "Put", "request", "on", "actions", "with", "body", "action_type", "InstanceStart", "n", "NUMBER", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "The", "API", "server", "received", "a", "Patch", "request", "on", "drives", "MN", "NUMBER", "HE", "NUMBER", "UOVRDA", "with", "body", "drive_id", "MN", "NUMBER", "HE", "NUMBER", "UOVRDA", "path_on_host", "dev", "mapper", "fc", "dev", "thinpool", "snap", "NUMBER", "n", "NUMBER", "Can", "the", "issue", "be", "connected", "to", "the", "way", "PATCH", "drive", "works", "LINK", "microvm", "firecracker", "blob", "master", "docs", "api_requests", "patch", "block", "NUMBER", "md", "This", "drive", "be", "supposed", "to", "remain", "mounted", "into", "the", "restored", "guest", "NUMBER", "We", "would", "greatly", "appreciate", "comments", "and", "ideas", "on", "what", "could", "be", "the", "root", "cause", "from", "Firecracker", "and", "firecracker", "containerd", "maintainers", "for", "example", "acatangiu", "kzys", "NUMBER", "Once", "we", "fix", "the", "issue", "we", "would", "be", "happy", "to", "contribute", "our", "change", "to", "firecracker", "containerd", "upstream", "NUMBER", "Full", "workflow", "log", "Firecracker", "s", "log", "Running", "Firecracker", "v", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "machine", "config", "with", "body", "cpu_template", "T", "NUMBER", "ht_enabled", "false", "mem_size_mib", "NUMBER", "vcpu_count", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Get", "request", "on", "machine", "config", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "OK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "boot", "source", "with", "body", "boot_args", "NUMBER", "nr_uarts", "NUMBER", "ip", "NUMBER", "NUMBER", "NUMBER", "off", "systemd", "NUMBER", "log_color", "false", "init", "sbin", "overlay", "init", "systemd", "NUMBER", "unit", "firecracker", "NUMBER", "target", "quiet", "noapic", "nomodules", "ipv", "NUMBER", "disable", "NUMBER", "ro", "panic", "NUMBER", "tsc", "reliable", "reboot", "k", "pci", "off", "kernel_image_path", "var", "lib", "firecracker", "containerd", "runtime", "hello", "vmlinux", "NUMBER", "bin", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "drives", "root_drive", "with", "body", "drive_id", "root_drive", "is_read_only", "true", "is_root_device", "true", "path_on_host", "var", "lib", "firecracker", "containerd", "runtime", "default", "rootfs", "NUMBER", "img", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "drives", "MN", "NUMBER", "HE", "NUMBER", "UOVRDA", "with", "body", "drive_id", "MN", "NUMBER", "HE", "NUMBER", "UOVRDA", "is_read_only", "false", "is_root_device", "false", "path_on_host", "var", "lib", "firecracker", "containerd", "shim", "base", "firecracker", "containerd", "NUMBER", "ctrstub", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "network", "interfaces", "NUMBER", "with", "body", "guest_mac", "NUMBER", "FC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "host_dev_name", "fc", "NUMBER", "tap", "NUMBER", "iface_id", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "vsock", "with", "body", "guest_cid", "NUMBER", "uds_path", "firecracker", "NUMBER", "vsock", "vsock_id", "agent_api", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "actions", "with", "body", "action_type", "InstanceStart", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "WARN", "Could", "not", "add", "serial", "input", "event", "to", "epoll", "Error", "during", "epoll", "call", "Operation", "not", "permitted", "os", "error", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Patch", "request", "on", "drives", "MN", "NUMBER", "HE", "NUMBER", "UOVRDA", "with", "body", "drive_id", "MN", "NUMBER", "HE", "NUMBER", "UOVRDA", "path_on_host", "dev", "mapper", "fc", "dev", "thinpool", "snap", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Patch", "request", "on", "vm", "with", "body", "state", "Paused", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "snapshot", "create", "with", "body", "mem_file_path", "tmp", "mem_file", "snapshot_path", "tmp", "snapshot_file", "snapshot_type", "Full", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "And", "the", "corresponding", "log", "from", "firecracker", "containerd", "containerd", "s", "log", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "new", "VM", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "Called", "startVMM", "setting", "up", "a", "VMM", "on", "firecracker", "NUMBER", "sock", "shim_stream", "stderr", "vmID", "NUMBER", "setupLogging", "setupMetrics", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "VMM", "metrics", "disabled", "NUMBER", "shim_stream", "stderr", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "refreshMachineConfiguration", "GET", "machine", "config", "NUMBER", "getMachineConfigurationOK", "CPUTemplate", "T", "NUMBER", "HtEnabled", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "MemSizeMib", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "VcpuCount", "NUMBER", "xc", "NUMBER", "f", "NUMBER", "shim_stream", "stderr", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "PutGuestBootSource", "PUT", "boot", "source", "NUMBER", "putGuestBootSourceNoContent", "shim_stream", "stderr", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "Attaching", "drive", "var", "lib", "firecracker", "containerd", "runtime", "default", "rootfs", "NUMBER", "img", "slot", "root_drive", "root", "true", "NUMBER", "shim_stream", "stderr", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "Attached", "drive", "var", "lib", "firecracker", "containerd", "runtime", "default", "rootfs", "NUMBER", "img", "PUT", "drives", "drive_id", "NUMBER", "putGuestDriveByIdNoContent", "shim_stream", "stderr", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "Attaching", "drive", "var", "lib", "firecracker", "containerd", "shim", "base", "firecracker", "containerd", "NUMBER", "ctrstub", "NUMBER", "slot", "MN", "NUMBER", "HE", "NUMBER", "UOVRDA", "root", "false", "NUMBER", "shim_stream", "stderr", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "Attached", "drive", "var", "lib", "firecracker", "containerd", "shim", "base", "firecracker", "containerd", "NUMBER", "ctrstub", "NUMBER", "PUT", "drives", "drive_id", "NUMBER", "putGuestDriveByIdNoContent", "shim_stream", "stderr", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "Attaching", "NIC", "fc", "NUMBER", "tap", "NUMBER", "hwaddr", "NUMBER", "FC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "at", "index", "NUMBER", "shim_stream", "stderr", "vmID", "NUMBER", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "calling", "agent", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "startInstance", "successful", "PUT", "actions", "NUMBER", "createSyncActionNoContent", "shim_stream", "stderr", "vmID", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "garbage", "collected", "d", "NUMBER", "ms", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "successfully", "start", "the", "VM", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "event", "forwarded", "ns", "firecracker", "containerd", "topic", "firecracker", "vm", "start", "type", "VMStart", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "prepare", "snapshot", "key", "NUMBER", "parent", "sha", "NUMBER", "NUMBER", "b", "NUMBER", "ce", "NUMBER", "af", "NUMBER", "bf", "NUMBER", "db", "NUMBER", "cc", "NUMBER", "c", "NUMBER", "a", "NUMBER", "cf", "NUMBER", "ae", "NUMBER", "f", "NUMBER", "abaceae", "NUMBER", "e", "NUMBER", "f", "NUMBER", "fc", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "prepare", "key", "firecracker", "containerd", "NUMBER", "NUMBER", "parent", "firecracker", "containerd", "NUMBER", "sha", "NUMBER", "NUMBER", "b", "NUMBER", "ce", "NUMBER", "af", "NUMBER", "bf", "NUMBER", "db", "NUMBER", "cc", "NUMBER", "c", "NUMBER", "a", "NUMBER", "cf", "NUMBER", "ae", "NUMBER", "f", "NUMBER", "abaceae", "NUMBER", "e", "NUMBER", "f", "NUMBER", "fc", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "creating", "snapshot", "device", "fc", "dev", "thinpool", "snap", "NUMBER", "from", "fc", "dev", "thinpool", "snap", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "event", "publish", "ns", "firecracker", "containerd", "topic", "snapshot", "prepare", "type", "containerd", "NUMBER", "events", "NUMBER", "SnapshotPrepare", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "get", "snapshot", "mounts", "key", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mounts", "key", "firecracker", "containerd", "NUMBER", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "event", "publish", "ns", "firecracker", "containerd", "topic", "container", "create", "type", "containerd", "NUMBER", "events", "NUMBER", "ContainerCreate", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "get", "snapshot", "mounts", "key", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mounts", "key", "firecracker", "containerd", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "debug", "msg", "StartShim", "runtime", "aws", "NUMBER", "firecracker", "task_id", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "create", "VM", "request", "VMID", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "use", "namespace", "firecracker", "containerd", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "successfully", "start", "shim", "git", "commit", "NUMBER", "b", "NUMBER", "cfceb", "NUMBER", "b", "NUMBER", "c", "NUMBER", "a", "NUMBER", "df", "NUMBER", "d", "NUMBER", "b", "NUMBER", "NUMBER", "runtime", "aws", "NUMBER", "firecracker", "task_id", "NUMBER", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "info", "msg", "PatchGuestDrive", "successful", "shim_stream", "stderr", "vmID", "NUMBER", "INFO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "successfully", "created", "task", "ExecID", "TaskID", "NUMBER", "pid_in_vm", "NUMBER", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "event", "forwarded", "ns", "firecracker", "containerd", "topic", "tasks", "create", "type", "containerd", "NUMBER", "events", "NUMBER", "TaskCreate", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "garbage", "collected", "d", "NUMBER", "ms", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "event", "forwarded", "ns", "firecracker", "containerd", "topic", "tasks", "start", "type", "containerd", "NUMBER", "events", "NUMBER", "TaskStart", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "pause", "VM", "request", "VMID", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "make", "snapshot", "request", "VMID", "NUMBER", "SnapshotFilePath", "tmp", "snapshot_file", "MemFilePath", "tmp", "mem_file", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "offload", "original", "request", "VMID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "waiting", "for", "exit", "ExecID", "TaskID", "NUMBER", "error", "ttrpc", "close", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "while", "forwarding", "events", "from", "VM", "agent", "error", "ttrpc", "close", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "copying", "io", "ExecID", "TaskID", "NUMBER", "error", "reading", "from", "a", "close", "fifo", "runtime", "aws", "NUMBER", "firecracker", "stream", "stdin", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "closing", "io", "stream", "ExecID", "TaskID", "NUMBER", "error", "NUMBER", "error", "occur", "n", "t", "close", "unix", "firecracker", "NUMBER", "vsock", "use", "of", "close", "network", "connection", "n", "n", "runtime", "aws", "NUMBER", "firecracker", "stream", "stdin", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "warning", "msg", "firecracker", "exited", "signal", "killed", "shim_stream", "stderr", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "closing", "io", "stream", "ExecID", "TaskID", "NUMBER", "error", "NUMBER", "error", "occur", "n", "t", "close", "unix", "firecracker", "NUMBER", "vsock", "use", "of", "close", "network", "connection", "n", "n", "runtime", "aws", "NUMBER", "firecracker", "stream", "stderr", "vmID", "NUMBER", "ERRO", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "error", "closing", "io", "stream", "ExecID", "TaskID", "NUMBER", "error", "NUMBER", "error", "occur", "n", "t", "close", "unix", "firecracker", "NUMBER", "vsock", "use", "of", "close", "network", "connection", "n", "n", "runtime", "aws", "NUMBER", "firecracker", "stream", "stdout", "vmID", "NUMBER", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "load", "snapshot", "request", "VMID", "NUMBER", "SnapshotFilePath", "tmp", "snapshot_file", "MemFilePath", "tmp", "mem_file", "DEBU", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "resume", "VM", "request", "VMID", "NUMBER", "Platform", "Host", "Ubuntu", "NUMBER", "v", "NUMBER", "Guest", "containerd", "s", "default", "kernel", "and", "rootfs", "Hello", "we", "were", "able", "to", "get", "around", "the", "InvalidOffset", "error", "by", "issue", "a", "Patch", "Drive", "request", "between", "SnapshotLoad", "and", "Resume", "as", "follows", "curl", "unix", "socket", "var", "lib", "firecracker", "containerd", "shim", "base", "firecracker", "containerd", "NUMBER", "firecracker", "NUMBER", "sock", "i", "X", "PATCH", "LINK", "H", "accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "drive_id", "MN", "NUMBER", "HE", "NUMBER", "UOVRDA", "path_on_host", "dev", "mapper", "fc", "dev", "thinpool", "snap", "NUMBER", "However", "we", "be", "not", "sure", "why", "this", "happens", "NUMBER", "Any", "ideas", "be", "greatly", "appreciated", "NUMBER", "I", "m", "work", "on", "a", "fix", "for", "this", "NUMBER", "Hi", "all", "sorry", "for", "the", "delay", "here", "I", "get", "sidetracked", "with", "other", "tasks", "NUMBER", "Hello", "we", "were", "able", "to", "get", "around", "the", "InvalidOffset", "error", "by", "issue", "a", "Patch", "Drive", "request", "between", "SnapshotLoad", "and", "Resume", "Indeed", "that", "be", "a", "valid", "workaround", "NUMBER", "The", "update", "path", "do", "not", "make", "it", "to", "the", "snapshot", "so", "after", "loading", "the", "snapshot", "you", "can", "do", "a", "PATCH", "to", "_manually_", "update", "that", "disk", "path", "to", "its", "right", "value", "NUMBER", "A", "full", "fix", "be", "currently", "pending", "review", "in", "LINK", "microvm", "firecracker", "pull", "NUMBER", "We", "don", "t", "have", "Docker", "NUMBER", "We", "likely", "won", "t", "ever", "NUMBER", "Docker", "only", "support", "can", "be", "worked", "around", "but", "it", "would", "be", "nicer", "to", "have", "devtool", "build", "not", "care", "NUMBER", "In", "our", "experience", "so", "far", "the", "tool", "be", "interchangeable", "so", "there", "should", "be", "no", "additional", "maintenance", "burden", "NUMBER", "Would", "add", "Podman", "support", "to", "devtool", "build", "be", "acceptable", "TL", "DR", "No", "not", "for", "these", "change", "NUMBER", "I", "think", "For", "me", "podman", "worked", "ok", "Interesting", "Was", "that", "as", "parameterized", "and", "configured", "in", "devtool", "or", "use", "your", "own", "incantation", "As", "rootless", "it", "should", "have", "broken", "on", "the", "tty", "with", "the", "device", "trees", "shared", "NUMBER", "My", "understanding", "be", "the", "cgroup", "v", "NUMBER", "vs", "v", "NUMBER", "be", "about", "what", "engine", "you", "can", "run", "or", "vice", "versa", "the", "engine", "you", "run", "currently", "sets", "the", "cgroup", "ver", "you", "use", "NUMBER", "When", "we", "turn", "to", "determining", "the", "actual", "minimal", "capabilities", "each", "contain", "be", "granted", "then", "the", "v", "NUMBER", "vs", "v", "NUMBER", "issue", "will", "loom", "NUMBER", "This", "change", "doesn", "t", "address", "that", "NUMBER", "Frankly", "I", "hope", "that", "shortly", "we", "can", "dump", "these", "container", "and", "have", "Firecracker", "uVM", "build", "Firecracker", "NUMBER", "In", "fact", "I", "d", "suggest", "the", "time", "investigating", "the", "least", "permissions", "required", "for", "these", "container", "could", "be", "better", "spent", "on", "porting", "the", "build", "to", "a", "couple", "of", "uVM", "s", "NUMBER", "Or", "be", "there", "some", "benefit", "from", "the", "container", "setup", "that", "I", "be", "miss", "Thanks", "for", "the", "additional", "info", "NUMBER", "NUMBER", "for", "uVM", "build", "NUMBER", "I", "hope", "that", "shortly", "we", "can", "dump", "these", "container", "and", "have", "Firecracker", "uVM", "build", "Firecracker", "NUMBER", "Or", "be", "there", "some", "benefit", "from", "the", "container", "setup", "that", "I", "be", "miss", "One", "problem", "to", "use", "uVM", "build", "be", "the", "need", "for", "virtualization", "support", "in", "dev", "machines", "NUMBER", "Any", "dev", "environment", "run", "on", "a", "VM", "without", "nested", "virtualization", "support", "would", "be", "unusable", "NUMBER", "Containers", "be", "a", "familiar", "and", "accepted", "way", "for", "deploying", "a", "build", "environment", "our", "particular", "case", "and", "they", "come", "with", "services", "and", "tool", "that", "make", "build", "and", "distribution", "easy", "NUMBER", "I", "don", "t", "personally", "see", "value", "in", "open", "a", "uVM", "images", "store", "hub", "for", "example", "NUMBER", "Having", "said", "that", "I", "do", "agree", "that", "we", "can", "_improve_", "our", "container", "setup", "NUMBER", "The", "issue", "of", "run", "the", "fcuvm", "dev", "container", "as", "root", "with", "elevated", "privileges", "be", "thorny", "NUMBER", "We", "likely", "can", "never", "run", "at", "least", "some", "parts", "of", "the", "test", "suite", "without", "elevated", "privileges", "doing", "all", "the", "test", "and", "analysis", "to", "work", "out", "which", "test", "items", "require", "which", "capabilities", "be", "a", "substantial", "effort", "and", "in", "our", "opinion", "likely", "not", "the", "best", "use", "of", "dev", "cycles", "right", "now", "NUMBER", "Example", "a", "higher", "priority", "be", "write", "documenting", "and", "work", "out", "the", "equivalent", "jailer", "details", "NUMBER", "There", "be", "two", "workarounds", "readily", "available", "to", "anyone", "who", "comes", "along", "this", "path", "and", "wants", "to", "run", "the", "test", "suite", "in", "order", "of", "ease", "Workaround", "NUMBER", "Only", "run", "the", "test", "suite", "on", "external", "CI", "CD", "providers", "NUMBER", "These", "generally", "run", "as", "root", "and", "your", "systems", "aren", "t", "touched", "by", "any", "libraries", "the", "test", "suite", "pulls", "in", "and", "runs", "NUMBER", "Workaround", "NUMBER", "Only", "run", "the", "test", "suite", "as", "rootless", "either", "Docker", "hard", "to", "configure", "or", "Podman", "no", "setup", "required", "NUMBER", "The", "Podman", "path", "be", "provide", "by", "PR", "NUMBER", "and", "the", "instructions", "therein", "NUMBER", "Closing", "as", "fix", "for", "us", "and", "for", "anyone", "else", "there", "be", "two", "workarounds", "at", "hand", "NUMBER", "Nit", "picking", "but", "I", "notice", "there", "be", "no", "test", "case", "for", "the", "scenario", "Invalid", "ELF", "magic", "number", "NUMBER", "Hmm", "even", "the", "following", "be", "rejected", "bitrot", "Seems", "the", "file", "be", "OK", "once", "re", "extracted", "NUMBER", "I", "m", "leaving", "the", "following", "as", "examples", "to", "add", "to", "the", "get", "start", "Troubleshooting", "section", "to", "show", "the", "variation", "in", "output", "a", "user", "can", "expect", "to", "see", "from", "a", "valid", "kernel", "NUMBER", "bash", "file", "vmlinux", "vmlinux", "ELF", "NUMBER", "bit", "LSB", "executable", "x", "NUMBER", "NUMBER", "version", "NUMBER", "SYSV", "statically", "linked", "BuildID", "sha", "NUMBER", "NUMBER", "ba", "NUMBER", "aa", "NUMBER", "eb", "NUMBER", "f", "NUMBER", "f", "NUMBER", "ecdced", "fe", "NUMBER", "f", "NUMBER", "f", "NUMBER", "d", "NUMBER", "stripped", "So", "what", "be", "legal", "From", "the", "get", "start", "links", "AMD", "NUMBER", "bash", "file", "hello", "vmlinux", "NUMBER", "bin", "hello", "vmlinux", "NUMBER", "bin", "ELF", "NUMBER", "bit", "LSB", "executable", "x", "NUMBER", "NUMBER", "version", "NUMBER", "SYSV", "statically", "linked", "BuildID", "sha", "NUMBER", "NUMBER", "c", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "adcc", "NUMBER", "f", "NUMBER", "c", "NUMBER", "f", "NUMBER", "d", "NUMBER", "ff", "not", "stripped", "From", "the", "firecracker", "src", "vmm", "test", "mock_resources", "test_elf", "NUMBER", "bin", "LINK", "microvm", "firecracker", "raw", "NUMBER", "aaf", "NUMBER", "a", "NUMBER", "bab", "NUMBER", "a", "NUMBER", "a", "NUMBER", "dba", "NUMBER", "a", "NUMBER", "ffc", "NUMBER", "b", "NUMBER", "src", "vmm", "test", "mock_resources", "test_elf", "NUMBER", "bin", "bash", "file", "test_elf", "NUMBER", "bin", "test_elf", "NUMBER", "bin", "ELF", "NUMBER", "bit", "LSB", "executable", "x", "NUMBER", "NUMBER", "version", "NUMBER", "SYSV", "statically", "linked", "stripped", "So", "the", "difference", "do", "not", "appear", "to", "be", "a", "stripped", "not", "stripped", "NUMBER", "Any", "hints", "or", "tips", "Hi", "bertdeb", "Thanks", "for", "your", "PR", "NUMBER", "Please", "explicitly", "sign", "off", "your", "commit", "by", "use", "git", "commit", "s", "amend", "NUMBER", "Replaced", "by", "NUMBER", "Minor", "spelling", "fix", "Reason", "for", "This", "PR", "The", "word", "average", "was", "misspelled", "in", "the", "specification", "document", "NUMBER", "Description", "of", "Changes", "I", "change", "the", "spelling", "of", "the", "word", "averadge", "to", "average", "NUMBER", "x", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Whoops", "sorry", "about", "that", "lauralt", "it", "should", "be", "sign", "now", "NUMBER", "Thanks", "Reason", "for", "This", "PR", "Partially", "address", "NUMBER", "NUMBER", "Description", "of", "Changes", "This", "PR", "contains", "a", "couple", "of", "fix", "that", "would", "enable", "Firecracker", "to", "support", "up", "to", "NUMBER", "vCPUs", "with", "HyperThreading", "enable", "and", "up", "to", "NUMBER", "vCPUS", "with", "HyperThreading", "disabled", "NUMBER", "We", "still", "miss", "topology", "relate", "optimizations", "so", "we", "keep", "the", "soft", "limit", "of", "NUMBER", "vCPUs", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Changelog", "and", "integration", "test", "for", "intel", "and", "amd", "would", "be", "nice", "dianpopa", "For", "the", "moment", "we", "keep", "the", "current", "soft", "limitation", "of", "NUMBER", "vcpus", "so", "we", "can", "t", "add", "integration", "test", "since", "the", "API", "won", "t", "allow", "more", "then", "NUMBER", "vcpus", "NUMBER", "Also", "considering", "this", "I", "don", "t", "know", "if", "a", "Changelog", "entry", "would", "make", "sense", "NUMBER", "WDYT", "I", "tried", "to", "build", "Firecracker", "with", "libc", "instead", "of", "musl", "and", "observed", "that", "Firecracker", "raises", "the", "following", "error", "with", "the", "latest", "firecracker", "code", "NUMBER", "f", "NUMBER", "c", "NUMBER", "ca", "NUMBER", "a", "NUMBER", "c", "NUMBER", "f", "NUMBER", "cacb", "NUMBER", "d", "NUMBER", "cad", "NUMBER", "b", "NUMBER", "ca", "NUMBER", "ERROR", "src", "vmm", "src", "signal_handler", "NUMBER", "rs", "NUMBER", "Shutting", "down", "VM", "after", "intercepting", "a", "bad", "syscall", "NUMBER", "NUMBER", "Guest", "hello", "linux", "NUMBER", "bin", "kernel", "rootfs", "build", "according", "to", "docs", "Alpine", "build", "from", "the", "following", "docker", "image", "ustiugov", "helloworld", "runner_workload", "Host", "Ubuntu", "NUMBER", "NUMBER", "NUMBER", "generic", "A", "complete", "log", "Running", "Firecracker", "v", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "API", "server", "received", "a", "Put", "request", "on", "boot", "source", "with", "body", "n", "kernel_image_path", "home", "ustiugov", "rootfs_all", "hello", "vmlinux", "NUMBER", "bin", "n", "boot_args", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "API", "server", "received", "a", "Put", "request", "on", "drives", "rootfs", "with", "body", "n", "drive_id", "rootfs", "n", "path_on_host", "home", "ustiugov", "rootfs_all", "rootfs", "NUMBER", "ext", "NUMBER", "n", "is_root_device", "true", "n", "is_read_only", "falsen", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "API", "server", "received", "a", "Put", "request", "on", "network", "interfaces", "eth", "NUMBER", "with", "body", "n", "iface_id", "eth", "NUMBER", "n", "guest_mac", "AA", "FC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "n", "host_dev_name", "tap", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "API", "server", "received", "a", "Put", "request", "on", "machine", "config", "with", "body", "n", "vcpu_count", "NUMBER", "n", "mem_size_mib", "NUMBER", "n", "ht_enabled", "falsen", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "API", "server", "received", "a", "Put", "request", "on", "metrics", "with", "body", "n", "metrics_path", "tmp", "metrics", "NUMBER", "fifo", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "The", "API", "server", "received", "a", "Put", "request", "on", "actions", "with", "body", "n", "action_type", "InstanceStart", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "vmm", "src", "signal_handler", "NUMBER", "rs", "NUMBER", "Shutting", "down", "VM", "after", "intercepting", "a", "bad", "syscall", "NUMBER", "NUMBER", "aghecenco", "Thank", "you", "the", "workaround", "seems", "to", "be", "a", "plausible", "option", "for", "now", "I", "intend", "to", "go", "back", "to", "musl", "later", "NUMBER", "The", "tail", "of", "the", "strace", "log", "ioctl", "NUMBER", "KVM_CREATE_VCPU", "NUMBER", "NUMBER", "mmap", "NULL", "NUMBER", "PROT_READ", "PROT_WRITE", "MAP_SHARED", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "fc", "NUMBER", "eventfd", "NUMBER", "NUMBER", "EFD_NONBLOCK", "NUMBER", "epoll_ctl", "NUMBER", "EPOLL_CTL_ADD", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "eventfd", "NUMBER", "NUMBER", "EFD_NONBLOCK", "NUMBER", "eventfd", "NUMBER", "NUMBER", "EFD_NONBLOCK", "NUMBER", "dup", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IRQFD", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbd", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IRQFD", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbd", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IRQFD", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbd", "NUMBER", "NUMBER", "epoll_ctl", "NUMBER", "EPOLL_CTL_ADD", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IOEVENTFD", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbe", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IRQFD", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbe", "NUMBER", "d", "NUMBER", "NUMBER", "epoll_ctl", "NUMBER", "EPOLL_CTL_ADD", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IOEVENTFD", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbe", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IOEVENTFD", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbe", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IRQFD", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbe", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_CPUID", "NUMBER", "NUMBER", "x", "NUMBER", "dcb", "NUMBER", "d", "NUMBER", "d", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_MSRS", "NUMBER", "x", "NUMBER", "dcb", "NUMBER", "d", "NUMBER", "d", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_REGS", "rax", "NUMBER", "NUMBER", "rsp", "NUMBER", "x", "NUMBER", "ff", "NUMBER", "rbp", "NUMBER", "x", "NUMBER", "ff", "NUMBER", "NUMBER", "rip", "NUMBER", "x", "NUMBER", "rflags", "NUMBER", "x", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_FPU", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbdec", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_GET_SREGS", "cs", "base", "NUMBER", "xffff", "NUMBER", "limit", "NUMBER", "selector", "NUMBER", "type", "NUMBER", "present", "NUMBER", "dpl", "NUMBER", "db", "NUMBER", "s", "NUMBER", "l", "NUMBER", "g", "NUMBER", "avl", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_SREGS", "cs", "base", "NUMBER", "limit", "NUMBER", "selector", "NUMBER", "type", "NUMBER", "present", "NUMBER", "dpl", "NUMBER", "db", "NUMBER", "s", "NUMBER", "l", "NUMBER", "g", "NUMBER", "avl", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_GET_LAPIC", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbc", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_LAPIC", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "bbcdd", "NUMBER", "NUMBER", "ioctl", "NUMBER", "TCGETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "ioctl", "NUMBER", "TCGETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "ioctl", "NUMBER", "TCGETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "ioctl", "NUMBER", "SNDCTL_TMR_START", "or", "TCSETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "ioctl", "NUMBER", "TCGETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "rt_sigaction", "SIGRT_", "NUMBER", "sa_handler", "NUMBER", "x", "NUMBER", "dcb", "NUMBER", "ae", "NUMBER", "sa_mask", "RTMIN", "RT_", "NUMBER", "sa_flags", "SA_RESTORER", "SA_SIGINFO", "sa_restorer", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "f", "NUMBER", "NULL", "NUMBER", "NUMBER", "mmap", "NULL", "NUMBER", "PROT_NONE", "MAP_PRIVATE", "MAP_ANONYMOUS", "MAP_STACK", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "e", "NUMBER", "e", "NUMBER", "mprotect", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "e", "NUMBER", "e", "NUMBER", "NUMBER", "PROT_READ", "PROT_WRITE", "NUMBER", "clone", "child_stack", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "ebe", "NUMBER", "eb", "NUMBER", "flags", "CLONE_VM", "CLONE_FS", "CLONE_FILES", "CLONE_SIGHAND", "CLONE_THREAD", "CLONE_SYSVSEM", "CLONE_SETTLS", "CLONE_PARENT_SETTID", "CLONE_CHILD_CLEARTID", "parent_tidptr", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "ebe", "NUMBER", "d", "NUMBER", "tls", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "ebe", "NUMBER", "child_tidptr", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "ebe", "NUMBER", "d", "NUMBER", "NUMBER", "prctl", "PR_SET_NO_NEW_PRIVS", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "prctl", "PR_SET_SECCOMP", "SECCOMP_MODE_FILTER", "len", "NUMBER", "filter", "NUMBER", "x", "NUMBER", "dcb", "NUMBER", "d", "NUMBER", "a", "NUMBER", "NUMBER", "futex", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "a", "NUMBER", "FUTEX_WAKE_PRIVATE", "NUMBER", "NUMBER", "getpid", "NUMBER", "SIGSYS", "si_signo", "SIGSYS", "si_code", "SYS_SECCOMP", "si_call_addr", "NUMBER", "x", "NUMBER", "fde", "NUMBER", "eece", "NUMBER", "e", "NUMBER", "si_syscall", "__NR_getpid", "si_arch", "AUDIT_ARCH_X", "NUMBER", "_", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "utc_timestamp_ms", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "exit_group", "NUMBER", "exited", "with", "NUMBER", "I", "have", "start", "to", "investigate", "on", "this", "issue", "NUMBER", "After", "reproducing", "it", "I", "managed", "to", "get", "the", "stack", "trace", "that", "lead", "to", "the", "error", "NUMBER", "NUMBER", "x", "NUMBER", "ffff", "NUMBER", "ac", "NUMBER", "in", "getpid", "from", "lib", "NUMBER", "libc", "NUMBER", "so", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "ffff", "NUMBER", "bd", "NUMBER", "in", "pthread_kill", "from", "lib", "NUMBER", "libpthread", "NUMBER", "so", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "bb", "in", "vmm_sys_util", "unix", "signal", "Killable", "kill", "self", "NUMBER", "x", "NUMBER", "c", "NUMBER", "num", "NUMBER", "at", "home", "ec", "NUMBER", "user", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "vmm", "sys", "util", "NUMBER", "src", "unix", "signal", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "in", "vmm", "vstate", "VcpuHandle", "send_event", "self", "NUMBER", "x", "NUMBER", "c", "NUMBER", "event", "NUMBER", "at", "src", "vmm", "src", "vstate", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "f", "NUMBER", "in", "vmm", "Vmm", "resume_vcpus", "self", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "at", "src", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "in", "vmm", "builder", "build_microvm_for_boot", "vm_resources", "NUMBER", "x", "NUMBER", "fffffffb", "NUMBER", "c", "NUMBER", "event_manager", "NUMBER", "x", "NUMBER", "fffffffbf", "NUMBER", "seccomp_filter", "NUMBER", "at", "src", "vmm", "src", "builder", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "d", "in", "vmm", "rpc_interface", "PrebootApiController", "handle_preboot_request", "self", "NUMBER", "x", "NUMBER", "fffffffb", "NUMBER", "request", "NUMBER", "at", "src", "vmm", "src", "rpc_interface", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "dcd", "NUMBER", "a", "in", "vmm", "rpc_interface", "PrebootApiController", "build_microvm_from_requests", "seccomp_filter", "NUMBER", "event_manager", "NUMBER", "x", "NUMBER", "fffffffbf", "NUMBER", "instance_info", "NUMBER", "recv_req", "NUMBER", "respond", "NUMBER", "at", "home", "ec", "NUMBER", "user", "code", "firecracker", "src", "vmm", "src", "rpc_interface", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "ec", "NUMBER", "d", "in", "firecracker", "api_server_adapter", "run_with_api", "seccomp_filter", "NUMBER", "config_json", "NUMBER", "bind_path", "NUMBER", "instance_info", "NUMBER", "start_time_us", "NUMBER", "start_time_cpu_us", "NUMBER", "at", "src", "firecracker", "src", "api_server_adapter", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "c", "NUMBER", "in", "firecracker", "main", "at", "src", "firecracker", "src", "main", "NUMBER", "rs", "NUMBER", "Apparently", "the", "pthread_kill", "function", "from", "the", "glibc", "implementation", "be", "calling", "the", "getpid", "syscall", "which", "violates", "current", "seccomp", "rules", "NUMBER", "After", "searching", "through", "the", "source", "code", "of", "glibc", "this", "be", "indeed", "the", "case", "as", "you", "can", "see", "here", "LINK", "blob", "glibc", "NUMBER", "sysdeps", "unix", "sysv", "linux", "pthread_kill", "NUMBER", "c", "L", "NUMBER", "NUMBER", "The", "standard", "musl", "pthread_kill", "implementation", "which", "can", "be", "find", "here", "LINK", "libc", "NUMBER", "org", "cgit", "musl", "tree", "src", "thread", "pthread_kill", "NUMBER", "c", "be", "not", "calling", "getpid", "therefore", "be", "not", "violating", "any", "seccomp", "rules", "and", "that", "s", "why", "this", "be", "only", "reproducible", "when", "build", "with", "dynamic", "glibc", "NUMBER", "This", "difference", "be", "rooted", "in", "the", "syscall", "each", "implementation", "chooses", "to", "use", "in", "order", "to", "kill", "the", "thread", "tkill", "vs", "tgkill", "NUMBER", "tgkill", "requires", "the", "thread", "group", "id", "which", "be", "retrieved", "via", "the", "getpid", "syscall", "NUMBER", "I", "will", "look", "into", "this", "to", "find", "a", "fix", "NUMBER", "This", "issue", "be", "now", "fix", "by", "this", "commit", "LINK", "microvm", "firecracker", "commit", "fa", "NUMBER", "d", "NUMBER", "bf", "NUMBER", "b", "NUMBER", "f", "NUMBER", "c", "NUMBER", "b", "NUMBER", "deeb", "NUMBER", "c", "and", "will", "be", "available", "in", "the", "next", "release", "NUMBER", "Reason", "for", "This", "PR", "Cargo", "add", "by", "default", "DWARF", "sections", "to", "release", "binaries", "NUMBER", "It", "be", "recommended", "to", "strip", "release", "binaries", "out", "of", "debug", "information", "because", "of", "security", "concerns", "but", "also", "because", "this", "information", "be", "not", "relevant", "in", "a", "production", "environment", "NUMBER", "NUMBER", "Description", "of", "Changes", "The", "provide", "solution", "add", "a", "devtool", "command", "devtool", "strip", "target", "libc", "musl", "gnu", "which", "strips", "release", "binaries", "out", "of", "debug", "information", "DWARF", "sections", "NUMBER", "This", "solution", "be", "based", "on", "GNU", "strip", "tool", "which", "strips", "away", "only", "debug", "information", "use", "strip", "debug", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "I", "be", "not", "sure", "we", "need", "to", "do", "this", "as", "part", "of", "the", "build", "system", "NUMBER", "I", "would", "leave", "the", "build", "system", "just", "as", "it", "be", "and", "move", "the", "stripping", "a", "step", "further", "into", "the", "release", "pipeline", "where", "the", "binary", "be", "stripped", "and", "a", "copy", "of", "the", "original", "be", "keep", "in", "cold", "storage", "for", "debugging", "purposes", "NUMBER", "firecracker", "microvm", "compute", "capsule", "WDYT", "NUMBER", "on", "this", "NUMBER", "I", "was", "imagining", "this", "be", "implement", "such", "that", "we", "have", "a", "devtool", "command", "that", "do", "build", "release", "binaries", "stripping", "them", "at", "once", "or", "as", "separate", "commands", "without", "impacting", "in", "any", "way", "cargo", "build", "or", "NUMBER", "tool", "devtool", "build", "NUMBER", "With", "that", "in", "mind", "I", "wouldn", "t", "like", "us", "to", "modify", "NUMBER", "cargo", "config", "NUMBER", "Can", "this", "be", "do", "at", "the", "NUMBER", "tool", "devtool", "level", "only", "Maybe", "with", "overriding", "RUSTFLAGS", "and", "exposing", "a", "new", "devtool", "command", "such", "as", "build", "release", "stripped", "or", "some", "other", "better", "name", "NUMBER", "This", "command", "can", "then", "be", "use", "by", "an", "automate", "release", "process", "to", "create", "upload", "the", "release", "artifacts", "NUMBER", "I", "be", "not", "sure", "we", "need", "to", "do", "this", "as", "part", "of", "the", "build", "system", "NUMBER", "I", "would", "leave", "the", "build", "system", "just", "as", "it", "be", "and", "move", "the", "stripping", "a", "step", "further", "into", "the", "release", "pipeline", "where", "the", "binary", "be", "stripped", "Why", "to", "separate", "the", "stripping", "of", "debug", "symbols", "embedded", "into", "the", "release", "binaries", "at", "build", "time", "in", "a", "separate", "step", "inside", "the", "release", "pipeline", "My", "understanding", "be", "that", "these", "debug", "symbols", "can", "be", "add", "or", "not", "when", "we", "build", "the", "executable", "file", "so", "to", "me", "it", "seems", "that", "this", "be", "the", "step", "were", "we", "should", "provide", "optional", "build", "flags", "which", "can", "be", "use", "for", "build", "the", "binaries", "with", "our", "without", "debug", "info", "NUMBER", "Let", "me", "know", "what", "you", "think", "NUMBER", "and", "a", "copy", "of", "the", "original", "be", "keep", "in", "cold", "storage", "for", "debugging", "purposes", "NUMBER", "We", "wouldn", "t", "need", "to", "store", "binaries", "with", "debug", "symbols", "NUMBER", "We", "can", "get", "these", "binaries", "if", "we", "checkout", "on", "the", "release", "tag", "and", "build", "it", "NUMBER", "NUMBER", "on", "this", "NUMBER", "I", "was", "imagining", "this", "be", "implement", "such", "that", "we", "have", "a", "devtool", "command", "that", "do", "build", "release", "binaries", "stripping", "them", "at", "once", "or", "as", "separate", "commands", "without", "impacting", "in", "any", "way", "cargo", "build", "or", "NUMBER", "tool", "devtool", "build", "NUMBER", "With", "that", "in", "mind", "I", "wouldn", "t", "like", "us", "to", "modify", "NUMBER", "cargo", "config", "NUMBER", "Right", "this", "makes", "sense", "NUMBER", "However", "having", "something", "inside", "the", "devtool", "for", "build", "and", "stripping", "at", "once", "was", "not", "the", "suggestion", "of", "sandreim", "as", "far", "as", "I", "can", "tell", "NUMBER", "I", "will", "keep", "the", "NUMBER", "cargo", "config", "to", "not", "impact", "cargo", "build", "NUMBER", "Can", "this", "be", "do", "at", "the", "NUMBER", "tool", "devtool", "level", "only", "Maybe", "with", "overriding", "RUSTFLAGS", "and", "exposing", "a", "new", "devtool", "command", "such", "as", "build", "release", "stripped", "or", "some", "other", "better", "name", "NUMBER", "This", "command", "can", "then", "be", "use", "by", "an", "automate", "release", "process", "to", "create", "upload", "the", "release", "artifacts", "NUMBER", "We", "can", "expose", "support", "for", "binaries", "stripping", "with", "a", "devtool", "build", "flag", "not", "necessary", "another", "build", "strip", "command", "NUMBER", "What", "do", "you", "think", "Right", "this", "makes", "sense", "NUMBER", "However", "having", "something", "inside", "the", "devtool", "for", "build", "and", "stripping", "at", "once", "was", "not", "the", "suggestion", "of", "sandreim", "as", "far", "as", "I", "can", "tell", "NUMBER", "I", "will", "keep", "the", "NUMBER", "cargo", "config", "to", "not", "impact", "cargo", "build", "NUMBER", "I", "probably", "misunderstood", "then", "sorry", "NUMBER", "Can", "this", "be", "do", "at", "the", "NUMBER", "tool", "devtool", "level", "only", "Maybe", "with", "overriding", "RUSTFLAGS", "and", "exposing", "a", "new", "devtool", "command", "such", "as", "build", "release", "stripped", "or", "some", "other", "better", "name", "NUMBER", "This", "command", "can", "then", "be", "use", "by", "an", "automate", "release", "process", "to", "create", "upload", "the", "release", "artifacts", "NUMBER", "We", "can", "expose", "support", "for", "binaries", "stripping", "with", "a", "devtool", "build", "flag", "not", "necessary", "another", "build", "strip", "command", "NUMBER", "What", "do", "you", "think", "I", "think", "we", "should", "keep", "NUMBER", "devtool", "build", "as", "be", "NUMBER", "The", "current", "logic", "of", "NUMBER", "devtool", "build", "be", "to", "pass", "all", "the", "flags", "directly", "to", "cargo", "build", "NUMBER", "I", "ve", "personally", "abused", "this", "functionality", "and", "I", "find", "it", "very", "nice", "to", "do", "things", "such", "as", "build", "firecracker", "with", "gnu", "NUMBER", "I", "personally", "prefer", "to", "have", "another", "build", "stripped", "command", "that", "doesn", "t", "pass", "the", "flags", "to", "cargo", "build", "directly", "NUMBER", "I", "think", "we", "should", "keep", "NUMBER", "devtool", "build", "as", "be", "NUMBER", "The", "current", "logic", "of", "NUMBER", "devtool", "build", "be", "to", "pass", "all", "the", "flags", "directly", "to", "cargo", "build", "NUMBER", "I", "ve", "personally", "abused", "this", "functionality", "and", "I", "find", "it", "very", "nice", "to", "do", "things", "such", "as", "build", "firecracker", "with", "gnu", "NUMBER", "I", "personally", "prefer", "to", "have", "another", "build", "stripped", "command", "that", "doesn", "t", "pass", "the", "flags", "to", "cargo", "build", "directly", "NUMBER", "NUMBER", "on", "this", "NUMBER", "Let", "s", "just", "have", "devtool", "build", "unchanged", "NUMBER", "Looks", "like", "strip", "be", "available", "in", "the", "dev", "container", "why", "not", "make", "it", "available", "via", "devtool", "strip", "Correct", "NUMBER", "Looked", "within", "the", "container", "with", "tool", "devtool", "shell", "p", "and", "strip", "seems", "to", "be", "present", "in", "the", "container", "NUMBER", "I", "looked", "on", "the", "Dockerfile", "and", "couldn", "t", "see", "where", "it", "be", "pull", "from", "NUMBER", "However", "I", "guess", "it", "be", "shipped", "with", "FROM", "ubuntu", "NUMBER", "NUMBER", "I", "ll", "incorporate", "your", "suggestions", "NUMBER", "Thanks", "NUMBER", "I", "think", "you", "should", "also", "shrink", "the", "binary", "size", "limits", "in", "the", "associated", "integ", "test", "the", "new", "binaries", "should", "be", "smaller", "NUMBER", "aghecenco", "add", "stripping", "support", "for", "devtool", "do", "not", "interfere", "with", "build", "firecracker", "binaries", "inside", "integration", "test", "NUMBER", "Do", "you", "suggest", "to", "strip", "the", "binaries", "in", "the", "integration", "test", "as", "well", "and", "then", "update", "the", "binaries", "sizes", "in", "the", "corresponding", "test", "I", "think", "you", "should", "also", "shrink", "the", "binary", "size", "limits", "in", "the", "associated", "integ", "test", "the", "new", "binaries", "should", "be", "smaller", "NUMBER", "aghecenco", "add", "stripping", "support", "for", "devtool", "do", "not", "interfere", "with", "build", "firecracker", "binaries", "inside", "integration", "test", "NUMBER", "Do", "you", "suggest", "to", "strip", "the", "binaries", "in", "the", "integration", "test", "as", "well", "and", "then", "update", "the", "binaries", "sizes", "in", "the", "corresponding", "test", "The", "integration", "test", "should", "be", "run", "with", "the", "binary", "that", "ends", "up", "be", "use", "by", "our", "customers", "NUMBER", "I", "think", "you", "should", "also", "shrink", "the", "binary", "size", "limits", "in", "the", "associated", "integ", "test", "the", "new", "binaries", "should", "be", "smaller", "NUMBER", "aghecenco", "add", "stripping", "support", "for", "devtool", "do", "not", "interfere", "with", "build", "firecracker", "binaries", "inside", "integration", "test", "NUMBER", "Do", "you", "suggest", "to", "strip", "the", "binaries", "in", "the", "integration", "test", "as", "well", "and", "then", "update", "the", "binaries", "sizes", "in", "the", "corresponding", "test", "The", "integration", "test", "should", "be", "run", "with", "the", "binary", "that", "ends", "up", "be", "use", "by", "our", "customers", "NUMBER", "I", "ve", "stripped", "away", "debug_info", "after", "integration", "test", "build", "step", "and", "update", "the", "test_binary_size", "NUMBER", "py", "test", "NUMBER", "There", "were", "similar", "suggestions", "to", "have", "this", "in", "our", "integration", "test", "as", "well", "from", "dpopa", "and", "aghecenco", "as", "well", "NUMBER", "PTAL", "dianpopa", "gc", "plp", "I", "ve", "address", "your", "feedback", "PTAL", "NUMBER", "dpopa", "gc", "plp", "I", "ve", "address", "your", "feedback", "PTAL", "NUMBER", "nit", "dianpopa", "D", "I", "will", "take", "a", "look", "Reason", "for", "This", "PR", "devices", "virtio", "net", "Error", "TapOpen", "contains", "in", "the", "string", "representation", "which", "results", "an", "invalid", "JSON", "like", "below", "NUMBER", "fault_message", "Could", "not", "create", "Network", "Device", "TapOpen", "CreateTap", "Os", "code", "NUMBER", "kind", "PermissionDenied", "message", "Operation", "not", "permitted", "It", "be", "safer", "to", "use", "serde_json", "rather", "than", "format", "NUMBER", "Description", "of", "Changes", "Use", "serde_json", "instead", "of", "use", "format", "to", "create", "a", "JSON", "object", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "N", "A", "No", "unsafe", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "N", "A", "No", "API", "change", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "N", "A", "No", "user", "facing", "change", "Change", "looks", "good", "NUMBER", "I", "think", "you", "should", "also", "make", "the", "same", "change", "to", "rust", "impl", "Into", "TAG", "for", "Error", "in", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "This", "one", "LINK", "microvm", "firecracker", "blob", "master", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "L", "NUMBER", "L", "NUMBER", "It", "should", "be", "safe", "NUMBER", "format", "be", "use", "to", "convert", "the", "error", "to", "a", "new", "string", "and", "json", "fault_message", "be", "now", "can", "escape", "meta", "characters", "correctly", "NUMBER", "acatangiu", "I", "had", "to", "rebase", "the", "coverage", "file", "please", "re", "approve", "take", "another", "look", "thanks", "sandreim", "acatangiu", "I", "rebased", "again", "please", "re", "approve", "thanks", "sandreim", "acatangiu", "I", "rebased", "again", "please", "re", "approve", "thanks", "Looks", "like", "you", "still", "need", "to", "rebase", "again", "____________", "test_run_concurrency", "ubuntu_with_ssh", "NUMBER", "instance", "s", "_____________", "integration_tests", "functional", "test_concurrency", "NUMBER", "py", "NUMBER", "in", "test_run_concurrency", "config", "network_config", "iface_id", "str", "i", "integration_tests", "functional", "test_concurrency", "NUMBER", "py", "NUMBER", "in", "_configure_and_run", "microvm", "NUMBER", "spawn", "framework", "microvm", "NUMBER", "py", "NUMBER", "in", "spawn", "self", "NUMBER", "create_jailed_resource", "log_fifo", "NUMBER", "path", "create_jail", "True", "framework", "microvm", "NUMBER", "py", "NUMBER", "in", "create_jailed_resource", "create_jail", "create_jail", "framework", "jailer", "NUMBER", "py", "NUMBER", "in", "jailed_path", "utils", "NUMBER", "run_cmd", "cmd", "framework", "utils", "NUMBER", "py", "NUMBER", "in", "run_cmd", "asyncio", "NUMBER", "set_event_loop", "loop", "usr", "lib", "python", "NUMBER", "asyncio", "events", "NUMBER", "py", "NUMBER", "in", "set_event_loop", "get_event_loop_policy", "NUMBER", "set_event_loop", "loop", "usr", "lib", "python", "NUMBER", "asyncio", "unix_events", "NUMBER", "py", "NUMBER", "in", "set_event_loop", "self", "NUMBER", "_watcher", "NUMBER", "attach_loop", "loop", "usr", "lib", "python", "NUMBER", "asyncio", "unix_events", "NUMBER", "py", "NUMBER", "in", "attach_loop", "self", "NUMBER", "_loop", "NUMBER", "remove_signal_handler", "signal", "NUMBER", "SIGCHLD", "usr", "lib", "python", "NUMBER", "asyncio", "unix_events", "NUMBER", "py", "NUMBER", "in", "remove_signal_handler", "signal", "NUMBER", "signal", "sig", "handler", "usr", "lib", "python", "NUMBER", "signal", "NUMBER", "py", "NUMBER", "in", "signal", "return", "_int_to_enum", "handler", "Handlers", "E", "TypeError", "int", "object", "be", "not", "callable", "Somehow", "relate", "to", "NUMBER", "I", "m", "following", "the", "get", "start", "guide", "and", "trying", "to", "bind", "a", "macvtap", "to", "guest", "which", "always", "give", "me", "this", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "api_server", "src", "parsed_request", "NUMBER", "rs", "NUMBER", "Received", "Error", "NUMBER", "Status", "code", "NUMBER", "Bad", "Request", "NUMBER", "Message", "Cannot", "open", "TAP", "device", "NUMBER", "Invalid", "name", "permissions", "NUMBER", "CreateTap", "Os", "code", "NUMBER", "kind", "InvalidInput", "message", "Invalid", "argument", "I", "use", "following", "command", "to", "create", "macvtap", "and", "try", "to", "setup", "network", "for", "guest", "sudo", "ip", "link", "add", "link", "eno", "NUMBER", "name", "macvtap", "NUMBER", "type", "macvtap", "mode", "bridge", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "interfaces", "eth", "NUMBER", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "iface_id", "eth", "NUMBER", "host_dev_name", "macvtap", "NUMBER", "firecracker", "version", "NUMBER", "sandreim", "Using", "a", "bridge", "requires", "me", "to", "reconfig", "my", "network", "move", "ip", "to", "bridge", "etc", "use", "macvtap", "can", "avoid", "these", "troubles", "NUMBER", "I", "m", "looking", "forward", "to", "this", "feature", "NUMBER", "To", "accepting", "macvtap", "devices", "you", "can", "either", "require", "them", "to", "be", "in", "the", "format", "dev", "tapXY", "and", "then", "open", "here", "LINK", "microvm", "firecracker", "blob", "NUMBER", "d", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "e", "NUMBER", "af", "NUMBER", "d", "NUMBER", "c", "NUMBER", "a", "NUMBER", "src", "devices", "src", "virtio", "net", "tap", "NUMBER", "rs", "L", "NUMBER", "and", "skipping", "that", "step", "LINK", "microvm", "firecracker", "blob", "NUMBER", "d", "NUMBER", "f", "NUMBER", "f", "NUMBER", "f", "NUMBER", "e", "NUMBER", "af", "NUMBER", "d", "NUMBER", "c", "NUMBER", "a", "NUMBER", "src", "devices", "src", "virtio", "net", "tap", "NUMBER", "rs", "L", "NUMBER", "Actually", "it", "would", "be", "nicer", "if", "the", "XY", "number", "for", "dev", "tapXY", "be", "detected", "from", "its", "interface", "name", "via", "something", "like", "let", "mut", "ifreq", "ifreq_for", "name", "ifreq_ioctl", "socketfd", "mut", "ifreq", "SIOCGIFINDEX", "NUMBER", "map", "ifindex", "ifindex", "as", "usize", "Here", "be", "a", "small", "helper", "script", "for", "test", "during", "development", "NUMBER", "It", "uses", "the", "passthru", "mode", "to", "forward", "the", "current", "default", "NIC", "to", "the", "VM", "temporarily", "blocking", "access", "of", "the", "kernel", "network", "stack", "NUMBER", "This", "also", "works", "when", "on", "a", "WiFi", "but", "not", "for", "too", "long", "since", "wpa_supplicant", "can", "t", "renew", "the", "authentification", "while", "the", "VM", "uses", "the", "NIC", "NUMBER", "bin", "bash", "set", "euo", "pipefail", "if", "NUMBER", "then", "IFN", "NUMBER", "else", "IFN", "ip", "route", "get", "NUMBER", "grep", "o", "dev", "NUMBER", "cut", "d", "f", "NUMBER", "echo", "Detected", "IFN", "based", "on", "default", "route", "fi", "TAP", "IFN", "pass", "echo", "Creating", "macvtap", "be", "passthru", "mode", "for", "IFN", "normal", "kernel", "network", "access", "will", "be", "blocked", "echo", "When", "do", "use", "it", "delete", "with", "echo", "sudo", "ip", "link", "delete", "TAP", "sudo", "ip", "link", "add", "link", "IFN", "name", "TAP", "type", "macvtap", "mode", "passthru", "MAC", "cat", "sys", "class", "net", "IFN", "address", "sudo", "ip", "link", "set", "TAP", "address", "MAC", "up", "DEV", "dev", "tap", "cat", "sys", "class", "net", "TAP", "ifindex", "sudo", "chown", "USER", "USER", "DEV", "echo", "Ready", "MAC", "MAC", "DEV", "DEV", "IFACE", "TAP", "If", "we", "try", "to", "use", "a", "microVM", "that", "be", "loaded", "from", "a", "snapshot", "which", "was", "created", "on", "a", "vm", "with", "kernel", "version", "NUMBER", "it", "crashes", "with", "the", "following", "output", "localhost", "time", "NUMBER", "BUG", "unable", "to", "handle", "kernel", "NULL", "pointer", "dereference", "at", "NUMBER", "NUMBER", "IP", "TAG", "__pagevec_lru_add_fn", "NUMBER", "xf", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "PGD", "NUMBER", "NUMBER", "NUMBER", "The", "images", "from", "build", "img", "x", "NUMBER", "_", "NUMBER", "ubuntu", "can", "be", "use", "to", "reproduce", "the", "issue", "NUMBER", "Not", "sure", "if", "that", "s", "the", "problem", "but", "NUMBER", "doesn", "t", "have", "the", "required", "features", "for", "snapshotting", "such", "as", "KVM_IMMEDIATE_EXIT", "NUMBER", "From", "what", "I", "understood", "from", "sandreim", "this", "requirement", "applies", "only", "on", "the", "host", "side", "NUMBER", "Summary", "of", "the", "current", "findings", "on", "this", "issue", "From", "what", "I", "investigated", "it", "looks", "like", "the", "problem", "be", "not", "the", "kernel", "version", "use", "for", "the", "snapshotted", "microVM", "but", "the", "particular", "kernel", "image", "from", "build", "img", "x", "NUMBER", "_", "NUMBER", "ubuntu", "kernel", "kernel", "version", "NUMBER", "NUMBER", "So", "creating", "a", "snapshot", "on", "a", "microVM", "that", "was", "configured", "with", "the", "following", "relevant", "resources", "kernel_path", "pwd", "firecracker", "build", "img", "x", "NUMBER", "_", "NUMBER", "ubuntu", "kernel", "vmlinux", "NUMBER", "bin", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "source", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "kernel_image_path", "kernel_path", "boot_args", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "rootfs_path", "pwd", "firecracker", "build", "img", "x", "NUMBER", "_", "NUMBER", "ubuntu_with_ssh", "fsfiles", "xenial", "NUMBER", "rootfs", "NUMBER", "ext", "NUMBER", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "drive_id", "rootfs", "path_on_host", "rootfs_path", "is_root_device", "true", "is_read_only", "false", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "config", "H", "Accept", "application", "json", "H", "content", "tyfpe", "application", "json", "d", "vcpu_count", "NUMBER", "mem_size_mib", "NUMBER", "ht_enabled", "false", "and", "then", "restoring", "it", "leads", "to", "the", "following", "output", "root", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "f", "NUMBER", "f", "NUMBER", "a", "dev", "root", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "f", "NUMBER", "f", "NUMBER", "a", "dev", "ls", "NUMBER", "BUG", "unable", "to", "handle", "kernel", "NULL", "pointer", "dereference", "at", "NUMBER", "NUMBER", "IP", "TAG", "__pagevec_lru_add_fn", "NUMBER", "xf", "NUMBER", "NUMBER", "x", "NUMBER", "NUMBER", "PGD", "NUMBER", "NUMBER", "NUMBER", "Oops", "NUMBER", "NUMBER", "SMP", "NUMBER", "CPU", "NUMBER", "PID", "NUMBER", "Comm", "bash", "Not", "tainted", "NUMBER", "NUMBER", "We", "be", "able", "to", "maybe", "navigate", "through", "directories", "a", "bit", "but", "then", "it", "crashes", "also", "sending", "any", "command", "like", "ls", "time", "results", "in", "crash", "with", "the", "aforementioned", "output", "NUMBER", "It", "be", "interesting", "that", "if", "the", "snapshot", "was", "created", "during", "the", "execution", "of", "the", "following", "loop", "inside", "the", "vm", "bash", "bin", "bash", "for", "i", "in", "NUMBER", "do", "echo", "Hello", "i", "do", "loading", "and", "resuming", "the", "microVM", "works", "the", "vm", "continues", "to", "execute", "the", "loop", "but", "again", "if", "we", "try", "to", "use", "it", "it", "crashes", "with", "the", "same", "output", "NUMBER", "Using", "the", "following", "kernel", "image", "kernel_path", "firecracker", "build", "img", "x", "NUMBER", "_", "NUMBER", "ubuntu_with_ssh", "kernel", "vmlinux", "NUMBER", "bin", "which", "has", "the", "kernel", "version", "NUMBER", "where", "the", "comes", "I", "suspect", "from", "an", "image", "that", "was", "build", "from", "a", "modify", "NUMBER", "release", "the", "issue", "doesn", "t", "reproduce", "NUMBER", "Also", "I", "didn", "t", "manage", "to", "reproduce", "the", "issue", "use", "the", "kernel", "config", "file", "from", "resources", "microvm", "kernel", "x", "NUMBER", "_", "NUMBER", "config", "and", "build", "it", "with", "Kernel", "version", "NUMBER", "which", "required", "also", "this", "little", "patch", "LINK", "NUMBER", "c", "NUMBER", "c", "NUMBER", "dcc", "NUMBER", "fa", "NUMBER", "e", "NUMBER", "cc", "NUMBER", "d", "NUMBER", "cb", "NUMBER", "c", "on", "top", "of", "it", "in", "order", "to", "successfully", "generate", "a", "kernel", "image", "NUMBER", "The", "config", "kernel", "file", "use", "for", "build", "img", "x", "NUMBER", "_", "NUMBER", "ubuntu", "kernel", "vmlinux", "NUMBER", "bin", "doesn", "t", "have", "CONFIG_IKCONFIG", "flag", "set", "so", "the", "config", "can", "t", "be", "extracted", "from", "it", "NUMBER", "Also", "with", "the", "other", "kernel", "images", "from", "img", "the", "issue", "couldn", "t", "be", "replicated", "NUMBER", "The", "rootfs", "image", "doesn", "t", "seem", "to", "matter", "either", "NUMBER", "Proposed", "solution", "to", "NUMBER", "Still", "work", "in", "progress", "and", "untested", "but", "at", "a", "high", "level", "be", "this", "going", "in", "the", "right", "direction", "Where", "I", "ve", "NUMBER", "Added", "a", "new", "pseudo", "BootTimer", "device", "NUMBER", "Added", "it", "to", "the", "first", "slot", "on", "the", "MMIO", "bus", "NUMBER", "Removed", "the", "boot", "signal", "handle", "and", "timestamping", "from", "Vcpu", "AFAICT", "the", "timestamp", "was", "only", "use", "for", "the", "boot", "log", "time", "NUMBER", "Removed", "the", "logging", "statement", "to", "the", "BootTimer", "device", "NUMBER", "Still", "get", "to", "Write", "an", "sbin", "init", "wrapper", "for", "x", "NUMBER", "_", "NUMBER", "in", "order", "to", "generate", "the", "signal", "at", "the", "correct", "address", "NUMBER", "Complete", "the", "logic", "of", "the", "device", "NUMBER", "Test", "NUMBER", "Add", "miss", "test", "NUMBER", "Hope", "that", "makes", "sense", "NUMBER", "Reason", "for", "This", "PR", "Author", "TODO", "add", "issue", "or", "explain", "reasoning", "NUMBER", "Description", "of", "Changes", "Add", "a", "device", "to", "improve", "kernel", "boot", "time", "logging", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Hey", "tnotw", "Thanks", "for", "your", "PR", "NUMBER", "To", "me", "looks", "promising", "NUMBER", "While", "we", "re", "looking", "at", "it", "please", "let", "us", "know", "if", "you", "need", "any", "help", "with", "it", "NUMBER", "Hi", "iulianbarbu", "thanks", "very", "much", "for", "taking", "a", "look", "I", "think", "I", "have", "a", "snapshot", "test", "failure", "of", "some", "sort", "to", "go", "and", "investigate", "NUMBER", "I", "assume", "that", "add", "a", "device", "has", "had", "some", "impact", "I", "ve", "not", "thought", "about", "when", "taking", "snapshot", "NUMBER", "To", "be", "honest", "I", "ve", "not", "really", "be", "following", "the", "snapshot", "work", "NUMBER", "Also", "I", "think", "use", "a", "slot", "on", "the", "bus", "consumes", "an", "IRQ", "which", "will", "be", "unuse", "NUMBER", "I", "ve", "get", "a", "vague", "suspicion", "this", "might", "be", "a", "bit", "wasteful", "on", "x", "NUMBER", "_", "NUMBER", "where", "IRQ", "numbers", "seem", "limited", "and", "was", "wondering", "if", "I", "should", "code", "round", "this", "somehow", "Thanks", "acatangiu", "for", "your", "review", "and", "feedback", "NUMBER", "I", "ve", "attempted", "to", "address", "your", "points", "above", "and", "have", "add", "an", "init", "implementation", "NUMBER", "I", "did", "have", "a", "build", "NUMBER", "rs", "script", "to", "compile", "it", "but", "when", "I", "update", "the", "container", "recently", "musl", "tool", "and", "hence", "musl", "gcc", "had", "be", "remove", "which", "scuppered", "that", "idea", "NUMBER", "Not", "sure", "how", "sensible", "it", "was", "anyway", "NUMBER", "Still", "work", "on", "the", "persist", "part", "NUMBER", "Thanks", "acatangiu", "for", "your", "review", "and", "feedback", "NUMBER", "I", "ve", "attempted", "to", "address", "your", "points", "above", "and", "have", "add", "an", "init", "implementation", "NUMBER", "I", "did", "have", "a", "build", "NUMBER", "rs", "script", "to", "compile", "it", "but", "when", "I", "update", "the", "container", "recently", "musl", "tool", "and", "hence", "musl", "gcc", "had", "be", "remove", "which", "scuppered", "that", "idea", "NUMBER", "Not", "sure", "how", "sensible", "it", "was", "anyway", "NUMBER", "Still", "work", "on", "the", "persist", "part", "NUMBER", "Why", "do", "you", "need", "musl", "tool", "That", "was", "use", "to", "compile", "C", "code", "use", "musl", "NUMBER", "If", "you", "use", "rust", "the", "container", "should", "have", "everything", "you", "need", "for", "both", "rust", "musl", "binaries", "and", "rust", "glibc", "binaries", "NUMBER", "You", "can", "also", "write", "the", "init", "binary", "in", "C", "use", "glibc", "NUMBER", "There", "should", "be", "everything", "you", "need", "for", "it", "in", "the", "container", "NUMBER", "Why", "do", "you", "need", "musl", "tool", "That", "was", "use", "to", "compile", "C", "code", "use", "musl", "NUMBER", "If", "you", "use", "rust", "the", "container", "should", "have", "everything", "you", "need", "for", "both", "rust", "musl", "binaries", "and", "rust", "glibc", "binaries", "NUMBER", "You", "can", "also", "write", "the", "init", "binary", "in", "C", "use", "glibc", "NUMBER", "There", "should", "be", "everything", "you", "need", "for", "it", "in", "the", "container", "NUMBER", "Right", "sorry", "I", "though", "maybe", "there", "was", "some", "reason", "for", "it", "to", "be", "in", "C", "and", "that", "muscl", "gcc", "was", "required", "compiled", "to", "it", "NUMBER", "Maybe", "wrong", "on", "both", "counts", "NUMBER", "Want", "me", "to", "redo", "it", "in", "rust", "Right", "sorry", "I", "though", "maybe", "there", "was", "some", "reason", "for", "it", "to", "be", "in", "C", "and", "that", "muscl", "gcc", "was", "required", "compiled", "to", "it", "NUMBER", "Maybe", "wrong", "on", "both", "counts", "NUMBER", "Want", "me", "to", "redo", "it", "in", "rust", "Either", "works", "NUMBER", "Like", "I", "said", "a", "small", "C", "program", "compiled", "against", "glibc", "use", "default", "gcc", "should", "work", "nicely", "NUMBER", "Ok", "well", "it", "was", "contained", "in", "that", "last", "push", "at", "NUMBER", "src", "device", "src", "pseudo", "init", "NUMBER", "c", "if", "you", "did", "want", "to", "take", "a", "peek", "NUMBER", "I", "appreciate", "that", "none", "of", "this", "stuff", "be", "a", "priority", "NUMBER", "The", "reason", "I", "believed", "musl", "gcc", "was", "required", "was", "because", "a", "gcc", "build", "object", "wouldn", "t", "run", "on", "the", "musl", "based", "Alpine", "image", "NUMBER", "It", "couldn", "t", "find", "the", "correct", "library", "somehow", "NUMBER", "The", "musl", "gcc", "build", "object", "could", "NUMBER", "Probably", "some", "lack", "of", "understanding", "on", "my", "part", "NUMBER", "I", "will", "investigate", "further", "NUMBER", "Shall", "I", "squash", "the", "commit", "Just", "to", "tidy", "things", "up", "NUMBER", "Also", "I", "still", "not", "NUMBER", "sure", "I", "understand", "why", "the", "CI", "CD", "pipeline", "sometimes", "fail", "catastrophically", "as", "oppose", "to", "fail", "at", "the", "right", "test", "NUMBER", "Squashing", "the", "commit", "would", "be", "great", "thanks", "NUMBER", "Regarding", "the", "CI", "pipeline", "we", "will", "take", "a", "look", "at", "it", "soon", "sorry", "for", "that", "Hi", "tnotw", "I", "ve", "update", "the", "root", "filesystem", "use", "for", "measuring", "boot", "time", "but", "you", "will", "need", "to", "update", "the", "boot", "time", "test", "by", "specify", "a", "custom", "init", "path", "Here", "LINK", "microvm", "firecracker", "blob", "master", "test", "integration_tests", "performance", "test_boottime", "NUMBER", "py", "L", "NUMBER", "you", "should", "add", "boot_args", "init", "sbin", "boottime_init", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "NUMBER", "Once", "you", "do", "that", "we", "should", "be", "able", "to", "run", "the", "CI", "cycle", "again", "and", "check", "if", "anything", "else", "needs", "to", "be", "do", "NUMBER", "Thanks", "tnotw", "the", "rootfs", "file", "should", "be", "different", "sha", "NUMBER", "sum", "build", "img", "x", "NUMBER", "_", "NUMBER", "minimal", "fsfiles", "boottime", "rootfs", "NUMBER", "e", "NUMBER", "bcb", "NUMBER", "b", "NUMBER", "e", "NUMBER", "cda", "NUMBER", "ad", "NUMBER", "a", "NUMBER", "b", "NUMBER", "ffcf", "NUMBER", "d", "NUMBER", "afad", "NUMBER", "a", "NUMBER", "ae", "NUMBER", "d", "NUMBER", "build", "img", "x", "NUMBER", "_", "NUMBER", "minimal", "fsfiles", "boottime", "rootfs", "NUMBER", "ext", "NUMBER", "NUMBER", "d", "NUMBER", "bf", "NUMBER", "b", "NUMBER", "ffc", "NUMBER", "cb", "NUMBER", "b", "NUMBER", "ba", "NUMBER", "b", "NUMBER", "e", "NUMBER", "b", "NUMBER", "e", "NUMBER", "c", "NUMBER", "ff", "NUMBER", "c", "NUMBER", "fb", "NUMBER", "ca", "NUMBER", "a", "build", "img", "x", "NUMBER", "_", "NUMBER", "minimal", "fsfiles", "boottime", "rootfs_old", "NUMBER", "ext", "NUMBER", "boottime", "rootfs_old", "NUMBER", "ext", "NUMBER", "be", "the", "original", "rootfs", "while", "boottime", "rootfs", "NUMBER", "ext", "NUMBER", "be", "the", "update", "one", "NUMBER", "Could", "you", "delete", "the", "build", "folder", "and", "run", "the", "build", "again", "This", "folder", "be", "use", "for", "file", "caching", "NUMBER", "A", "file", "be", "downloaded", "only", "if", "the", "test", "system", "realizes", "that", "it", "s", "miss", "so", "if", "it", "s", "update", "upstream", "it", "won", "t", "be", "downloaded", "again", "NUMBER", "Indeed", "the", "initrd", "will", "probably", "also", "have", "to", "be", "update", "NUMBER", "I", "ll", "do", "that", "once", "the", "non", "initrd", "test", "pass", "and", "retrigger", "the", "build", "from", "our", "end", "NUMBER", "tnotw", "good", "catch", "on", "the", "console", "ttyS", "NUMBER", "parameter", "NUMBER", "That", "was", "the", "problem", "sorry", "for", "the", "confusion", "I", "ll", "update", "the", "initrd", "and", "aarch", "NUMBER", "images", "NUMBER", "The", "PR", "seems", "to", "work", "with", "the", "update", "images", "but", "if", "we", "keep", "the", "update", "images", "in", "the", "S", "NUMBER", "bucket", "other", "PRs", "will", "fail", "NUMBER", "I", "switched", "the", "images", "back", "to", "the", "old", "ones", "NUMBER", "Let", "me", "know", "when", "this", "be", "ready", "to", "be", "merge", "so", "that", "I", "can", "switch", "back", "to", "the", "new", "images", "and", "retrigger", "the", "test", "NUMBER", "Once", "the", "test", "pass", "we", "can", "merge", "this", "immediately", "NUMBER", "Actually", "I", "think", "that", "we", "need", "to", "sync", "on", "what", "the", "next", "steps", "should", "be", "here", "NUMBER", "If", "we", "replace", "the", "current", "init", "with", "the", "one", "in", "this", "PR", "and", "update", "the", "images", "we", "will", "introduce", "a", "breaking", "change", "in", "test", "release", "and", "generally", "commit", "that", "happened", "before", "this", "one", "NUMBER", "There", "be", "a", "few", "paths", "that", "we", "can", "follow", "NUMBER", "This", "PR", "should", "use", "different", "fixture", "names", "so", "that", "the", "test", "pull", "images", "from", "a", "different", "folder", "NUMBER", "The", "disadvantage", "of", "this", "method", "be", "that", "the", "size", "of", "the", "S", "NUMBER", "bucket", "will", "increase", "because", "we", "need", "to", "keep", "old", "images", "there", "NUMBER", "NUMBER", "The", "init", "should", "trigger", "both", "the", "new", "boot", "time", "method", "and", "the", "old", "one", "NUMBER", "The", "disadvantage", "be", "that", "we", "remove", "code", "that", "handles", "the", "old", "boot", "time", "trigger", "method", "NUMBER", "NUMBER", "We", "go", "back", "to", "use", "a", "separate", "init", "and", "check", "if", "we", "can", "achieve", "an", "under", "NUMBER", "ms", "boot", "time", "with", "a", "custom", "init", "NUMBER", "I", "think", "that", "we", "can", "make", "NUMBER", "work", "but", "I", "suspect", "that", "the", "rdinit", "kernel", "parameter", "should", "have", "be", "add", "too", "NUMBER", "What", "do", "you", "think", "There", "be", "a", "few", "paths", "that", "we", "can", "follow", "NUMBER", "This", "PR", "should", "use", "different", "fixture", "names", "so", "that", "the", "test", "pull", "images", "from", "a", "different", "folder", "NUMBER", "The", "disadvantage", "of", "this", "method", "be", "that", "the", "size", "of", "the", "S", "NUMBER", "bucket", "will", "increase", "because", "we", "need", "to", "keep", "old", "images", "there", "NUMBER", "NUMBER", "The", "init", "should", "trigger", "both", "the", "new", "boot", "time", "method", "and", "the", "old", "one", "NUMBER", "The", "disadvantage", "be", "that", "we", "remove", "code", "that", "handles", "the", "old", "boot", "time", "trigger", "method", "NUMBER", "NUMBER", "We", "go", "back", "to", "use", "a", "separate", "init", "and", "check", "if", "we", "can", "achieve", "an", "under", "NUMBER", "ms", "boot", "time", "with", "a", "custom", "init", "NUMBER", "I", "like", "option", "NUMBER", "It", "keep", "things", "clean", "each", "version", "with", "its", "own", "independent", "mechanism", "NUMBER", "S", "NUMBER", "bucket", "increase", "be", "irrelevant", "IMHO", "NUMBER", "There", "be", "a", "few", "paths", "that", "we", "can", "follow", "NUMBER", "This", "PR", "should", "use", "different", "fixture", "names", "so", "that", "the", "test", "pull", "images", "from", "a", "different", "folder", "NUMBER", "The", "disadvantage", "of", "this", "method", "be", "that", "the", "size", "of", "the", "S", "NUMBER", "bucket", "will", "increase", "because", "we", "need", "to", "keep", "old", "images", "there", "NUMBER", "NUMBER", "The", "init", "should", "trigger", "both", "the", "new", "boot", "time", "method", "and", "the", "old", "one", "NUMBER", "The", "disadvantage", "be", "that", "we", "remove", "code", "that", "handles", "the", "old", "boot", "time", "trigger", "method", "NUMBER", "NUMBER", "We", "go", "back", "to", "use", "a", "separate", "init", "and", "check", "if", "we", "can", "achieve", "an", "under", "NUMBER", "ms", "boot", "time", "with", "a", "custom", "init", "NUMBER", "I", "like", "option", "NUMBER", "It", "keep", "things", "clean", "each", "version", "with", "its", "own", "independent", "mechanism", "NUMBER", "S", "NUMBER", "bucket", "increase", "be", "irrelevant", "IMHO", "NUMBER", "I", "d", "also", "go", "with", "option", "NUMBER", "On", "long", "term", "would", "be", "nice", "to", "version", "our", "images", "and", "have", "ways", "to", "replicate", "them", "NUMBER", "By", "popular", "demand", "option", "NUMBER", "has", "be", "implement", "for", "x", "NUMBER", "_", "NUMBER", "NUMBER", "tnotw", "we", "be", "once", "again", "ask", "for", "your", "support", "in", "change", "the", "boottime", "test", "NUMBER", "You", "basically", "need", "to", "update", "the", "fixture", "that", "be", "pass", "as", "test", "parameters", "diff", "diff", "git", "a", "test", "integration_tests", "performance", "test_boottime", "NUMBER", "py", "b", "test", "integration_tests", "performance", "test_boottime", "NUMBER", "py", "index", "NUMBER", "a", "NUMBER", "e", "NUMBER", "b", "NUMBER", "abf", "NUMBER", "NUMBER", "a", "test", "integration_tests", "performance", "test_boottime", "NUMBER", "py", "b", "test", "integration_tests", "performance", "test_boottime", "NUMBER", "py", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INITRD_BOOT_TIME_US", "NUMBER", "if", "platform", "NUMBER", "machine", "x", "NUMBER", "_", "NUMBER", "else", "NUMBER", "TIMESTAMP_LOG_REGEX", "r", "Guest", "boot", "time", "s", "s", "d", "s", "us", "def", "test_boottime_no_network", "test_microvm_with_boottime", "def", "test_boottime_no_network", "test_microvm_with_boottime_timer", "Check", "guest", "boottime", "of", "microvm", "without", "network", "NUMBER", "_", "_configure_vm", "test_microvm_with_boottime", "_", "_configure_vm", "test_microvm_with_boottime_timer", "time", "NUMBER", "sleep", "NUMBER", "boottime_us", "_test_microvm_boottime", "test_microvm_with_boottime", "NUMBER", "log_data", "boottime_us", "_test_microvm_boottime", "test_microvm_with_boottime_timer", "NUMBER", "log_data", "print", "Boot", "time", "with", "no", "network", "be", "str", "boottime_us", "us", "def", "test_boottime_with_network", "test_microvm_with_boottime", "test_microvm_with_boottime_timer", "network_config", "Check", "guest", "boottime", "of", "microvm", "with", "network", "NUMBER", "_tap", "_configure_vm", "test_microvm_with_boottime", "_tap", "_configure_vm", "test_microvm_with_boottime_timer", "config", "network_config", "iface_id", "NUMBER", "time", "NUMBER", "sleep", "NUMBER", "boottime_us", "_test_microvm_boottime", "test_microvm_with_boottime", "NUMBER", "log_data", "boottime_us", "_test_microvm_boottime", "test_microvm_with_boottime_timer", "NUMBER", "log_data", "print", "Boot", "time", "with", "network", "configured", "be", "str", "boottime_us", "us", "def", "test_initrd_boottime", "test_microvm_with_initrd", "test_microvm_with_initrd_timer", "Check", "guest", "boottime", "of", "microvm", "with", "initrd", "NUMBER", "_tap", "_configure_vm", "test_microvm_with_initrd", "initrd", "True", "_tap", "_configure_vm", "test_microvm_with_initrd_timer", "initrd", "True", "time", "NUMBER", "sleep", "NUMBER", "boottime_us", "_test_microvm_boottime", "test_microvm_with_initrd", "NUMBER", "log_data", "max_time_us", "INITRD_BOOT_TIME_US", "test_microvm_with_initrd_timer", "NUMBER", "log_data", "max_time_us", "INITRD_BOOT_TIME_US", "print", "Boot", "time", "with", "initrd", "be", "str", "boottime_us", "us", "tnotw", "everything", "be", "pass", "now", "NUMBER", "Thank", "you", "for", "this", "awesome", "contribution", "Signed", "off", "by", "Andrei", "Gorneanu", "TAG", "Reason", "for", "This", "PR", "Related", "to", "NUMBER", "Description", "of", "Changes", "This", "test", "the", "latency", "of", "a", "Firecracker", "microvm", "by", "pinging", "the", "host", "NUMBER", "add", "a", "goldfile", "which", "defines", "how", "the", "assertion", "should", "be", "do", "NUMBER", "It", "contains", "a", "mean", "value", "and", "a", "possible", "deviation", "from", "it", "NUMBER", "the", "ping", "command", "sends", "NUMBER", "request", "with", "an", "interval", "of", "NUMBER", "seconds", "between", "them", "NUMBER", "The", "test", "won", "t", "work", "without", "a", "specialized", "rootfs", "which", "has", "iputils", "ping", "install", "for", "both", "x", "NUMBER", "and", "aarch", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "gc", "plp", "iulianbarbu", "raduiliescu", "This", "PR", "looks", "good", "and", "the", "functionality", "useful", "do", "we", "want", "to", "merge", "it", "IMO", "we", "should", "merge", "it", "after", "performance", "framework", "ci", "change", "be", "do", "NUMBER", "Close", "in", "favor", "of", "NUMBER", "NUMBER", "Reason", "for", "This", "PR", "Addresses", "NUMBER", "Description", "of", "Changes", "This", "PR", "change", "some", "of", "the", "internal", "mechanisms", "in", "the", "vsock", "device", "that", "were", "cause", "the", "problem", "describe", "in", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Is", "the", "issue", "fix", "by", "this", "PR", "Hi", "Andrei", "NUMBER", "I", "add", "more", "details", "in", "the", "comment", "here", "LINK", "microvm", "firecracker", "issue", "NUMBER", "issuecomment", "NUMBER", "Since", "this", "looks", "like", "a", "corner", "case", "that", "wasn", "t", "handle", "should", "we", "add", "a", "regression", "test", "here", "as", "well", "Yes", "we", "want", "to", "have", "regression", "test", "but", "I", "was", "thinking", "that", "we", "could", "add", "them", "in", "a", "separate", "PR", "NUMBER", "Edit", "opened", "NUMBER", "Regression", "test", "be", "typically", "merge", "in", "the", "same", "PR", "and", "the", "reviewer", "should", "check", "that", "the", "regression", "test", "fail", "before", "the", "fix", "and", "pass", "after", "the", "fix", "NUMBER", "andreeaflorescu", "unit", "test", "add", "please", "review", "NUMBER", "After", "reading", "the", "documentation", "the", "following", "wasn", "t", "quite", "clear", "to", "me", "Is", "it", "possible", "to", "set", "up", "a", "block", "of", "shared", "memory", "between", "the", "host", "and", "a", "guest", "or", "between", "two", "guests", "I", "ve", "read", "that", "the", "virtio", "implementation", "uses", "MMIO", "but", "don", "t", "see", "a", "way", "to", "use", "MMIO", "myself", "NUMBER", "If", "this", "isn", "t", "possible", "be", "this", "something", "Firecracker", "could", "support", "in", "the", "future", "I", "d", "like", "to", "resort", "to", "shared", "memory", "for", "NUMBER", "Gbps", "communication", "between", "environments", "where", "networking", "might", "not", "be", "fast", "enough", "NUMBER", "timvisee", "There", "be", "no", "API", "for", "doing", "this", "but", "it", "can", "probably", "be", "do", "from", "the", "code", "NUMBER", "Firecracker", "uses", "the", "rust", "vmm", "vm", "memory", "crate", "NUMBER", "You", "can", "translate", "a", "guest", "address", "into", "a", "host", "address", "use", "get_host_address", "LINK", "vmm", "vm", "memory", "blob", "NUMBER", "d", "NUMBER", "c", "NUMBER", "ec", "NUMBER", "e", "NUMBER", "cc", "NUMBER", "d", "NUMBER", "fce", "NUMBER", "c", "NUMBER", "ef", "NUMBER", "b", "NUMBER", "bf", "NUMBER", "src", "guest_memory", "NUMBER", "rs", "L", "NUMBER", "NUMBER", "You", "can", "take", "a", "block", "of", "memory", "find", "out", "the", "guest", "address", "and", "the", "host", "address", "and", "use", "it", "as", "shared", "memory", "NUMBER", "Or", "you", "can", "create", "an", "additional", "memory", "region", "that", "will", "be", "shared", "between", "host", "and", "guest", "you", "can", "take", "a", "look", "on", "the", "from_regions", "LINK", "vmm", "vm", "memory", "blob", "NUMBER", "d", "NUMBER", "c", "NUMBER", "ec", "NUMBER", "e", "NUMBER", "cc", "NUMBER", "d", "NUMBER", "fce", "NUMBER", "c", "NUMBER", "ef", "NUMBER", "b", "NUMBER", "bf", "NUMBER", "src", "mmap", "NUMBER", "rs", "L", "NUMBER", "method", "NUMBER", "It", "might", "also", "be", "worth", "it", "to", "take", "a", "look", "on", "set_kvm_memory_regions", "LINK", "microvm", "firecracker", "blob", "be", "NUMBER", "b", "NUMBER", "bae", "NUMBER", "e", "NUMBER", "a", "NUMBER", "ad", "NUMBER", "d", "NUMBER", "c", "NUMBER", "ff", "NUMBER", "eced", "NUMBER", "e", "NUMBER", "src", "vmm", "src", "vstate", "NUMBER", "rs", "L", "NUMBER", "MmapRegion", "build", "LINK", "vmm", "vm", "memory", "blob", "NUMBER", "d", "NUMBER", "c", "NUMBER", "ec", "NUMBER", "e", "NUMBER", "cc", "NUMBER", "d", "NUMBER", "fce", "NUMBER", "c", "NUMBER", "ef", "NUMBER", "b", "NUMBER", "bf", "NUMBER", "src", "mmap_unix", "NUMBER", "rs", "L", "NUMBER", "Reason", "for", "This", "PR", "The", "latest", "cargo", "audit", "use", "in", "the", "Docker", "images", "requires", "Rust", "NUMBER", "The", "current", "image", "still", "uses", "Rust", "NUMBER", "Blocked", "by", "NUMBER", "Fixes", "NUMBER", "Description", "of", "Changes", "The", "Dockerfiles", "have", "be", "change", "to", "use", "Rust", "NUMBER", "the", "latest", "stable", "Rust", "version", "NUMBER", "x", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Hi", "timvisee", "In", "order", "to", "use", "Rust", "NUMBER", "in", "the", "container", "the", "change", "that", "you", "ve", "do", "be", "unfortunately", "not", "enough", "we", "will", "still", "use", "the", "old", "container", "image", "this", "way", "NUMBER", "For", "fix", "the", "issue", "we", "need", "to", "also", "publish", "a", "new", "container", "version", "fcuvm", "dev", "v", "NUMBER", "if", "you", "take", "a", "look", "in", "tool", "devtool", "you", "can", "see", "that", "the", "current", "version", "be", "fcuvm", "dev", "v", "NUMBER", "NUMBER", "Publishing", "a", "new", "container", "version", "requires", "build", "the", "image", "and", "push", "it", "to", "Docker", "Hub", "for", "both", "x", "NUMBER", "_", "NUMBER", "and", "aarch", "NUMBER", "you", "can", "see", "a", "nice", "guide", "example", "here", "at", "Publishing", "a", "New", "Version", "LINK", "vmm", "rust", "vmm", "container", "section", "NUMBER", "The", "push", "part", "must", "be", "do", "by", "somebody", "from", "our", "team", "NUMBER", "Also", "after", "publishing", "the", "container", "image", "there", "will", "be", "some", "clippy", "fix", "in", "our", "codebase", "that", "will", "need", "to", "be", "do", "because", "of", "the", "new", "rust", "version", "and", "probably", "some", "other", "fix", "so", "this", "issue", "will", "probably", "require", "some", "time", "and", "effort", "also", "sorry", "for", "not", "be", "clearer", "in", "the", "issue", "description", "will", "update", "it", "NUMBER", "Do", "you", "still", "want", "to", "help", "on", "this", "we", "can", "help", "you", "with", "it", "but", "there", "be", "absolutely", "no", "problem", "if", "you", "don", "t", "want", "as", "it", "be", "not", "an", "easy", "item", "at", "all", "or", "on", "other", "issue", "Generally", "the", "issue", "that", "be", "a", "good", "starting", "point", "for", "first", "time", "contributions", "be", "marked", "with", "Contribute", "Good", "First", "Issue", "NUMBER", "Thanks", "for", "the", "explanation", "NUMBER", "I", "definitely", "thought", "the", "actual", "upgrade", "would", "be", "much", "simpler", "NUMBER", "I", "d", "like", "to", "give", "this", "a", "try", "later", "today", "NUMBER", "I", "only", "have", "limited", "time", "available", "for", "this", "though", "NUMBER", "If", "I", "can", "t", "get", "it", "to", "work", "I", "ll", "leave", "it", "open", "for", "someone", "else", "NUMBER", "lauralt", "I", "ve", "resolve", "all", "clippy", "suggestions", "and", "reformatted", "for", "Rust", "NUMBER", "in", "NUMBER", "a", "NUMBER", "f", "NUMBER", "d", "NUMBER", "ed", "NUMBER", "f", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "e", "NUMBER", "be", "NUMBER", "d", "NUMBER", "I", "think", "that", "s", "all", "I", "can", "do", "for", "now", "NUMBER", "Someone", "on", "the", "Firecracker", "team", "needs", "to", "publish", "an", "update", "image", "before", "I", "can", "continue", "NUMBER", "I", "ll", "update", "the", "devtool", "script", "afterwards", "NUMBER", "Please", "let", "me", "know", "if", "there", "s", "anything", "else", "I", "can", "do", "NUMBER", "Thanks", "timvisee", "We", "ll", "be", "work", "today", "to", "publish", "a", "new", "container", "image", "and", "then", "come", "back", "here", "with", "an", "update", "NUMBER", "I", "would", "like", "to", "also", "remove", "musl", "tool", "from", "the", "Dockerfiles", "that", "was", "needed", "before", "for", "the", "backtrace", "crate", "but", "we", "ve", "decided", "to", "not", "use", "it", "anymore", "see", "NUMBER", "NUMBER", "We", "ll", "try", "to", "merge", "NUMBER", "as", "soon", "as", "possible", "to", "unblock", "this", "PR", "NUMBER", "Hi", "timvisee", "NUMBER", "I", "ve", "experimented", "a", "bit", "with", "the", "container", "images", "that", "use", "the", "NUMBER", "and", "NUMBER", "rust", "toolchain", "version", "in", "order", "to", "outline", "a", "scenario", "where", "we", "avoid", "possible", "CI", "failures", "on", "other", "PRs", "that", "don", "t", "have", "anything", "to", "do", "with", "update", "the", "rust", "toolchain", "NUMBER", "After", "run", "the", "test", "suite", "on", "both", "this", "PR", "and", "NUMBER", "it", "seems", "that", "we", "need", "to", "go", "through", "a", "few", "iterations", "before", "merge", "mainly", "due", "to", "a", "few", "test", "failures", "we", "should", "see", "them", "once", "the", "v", "NUMBER", "container", "image", "be", "use", "in", "test", "NUMBER", "I", "push", "a", "new", "container", "tag", "to", "Docker", "Hub", "that", "uses", "rust", "toolchain", "NUMBER", "NUMBER", "You", "should", "find", "it", "tag", "as", "fcuvm", "dev", "v", "NUMBER", "meaning", "that", "in", "order", "to", "run", "have", "the", "CI", "run", "the", "test", "suite", "with", "the", "update", "container", "image", "you", "only", "need", "to", "update", "diff", "diff", "git", "a", "tool", "devtool", "b", "tool", "devtool", "index", "NUMBER", "a", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "tool", "devtool", "b", "tool", "devtool", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Development", "container", "image", "name", "tag", "This", "should", "be", "update", "whenever", "we", "upgrade", "the", "development", "container", "NUMBER", "Yet", "another", "step", "on", "our", "way", "to", "reproducible", "build", "NUMBER", "DEVCTR_IMAGE", "fcuvm", "dev", "v", "NUMBER", "DEVCTR_IMAGE", "fcuvm", "dev", "v", "NUMBER", "Naming", "things", "be", "hard", "MY_NAME", "Firecracker", "basename", "NUMBER", "The", "binary", "size", "test", "failure", "should", "be", "fix", "by", "merge", "and", "rebasing", "NUMBER", "To", "address", "the", "python", "styling", "failure", "I", "created", "issue", "NUMBER", "The", "binary", "size", "test", "failure", "should", "be", "fix", "by", "merge", "and", "rebasing", "NUMBER", "I", "ve", "increase", "the", "binary", "size", "limit", "for", "now", "based", "on", "the", "reasoning", "here", "LINK", "microvm", "firecracker", "pull", "NUMBER", "issuecomment", "NUMBER", "This", "PR", "be", "now", "blocked", "by", "NUMBER", "It", "seems", "there", "s", "one", "issue", "left", "to", "be", "fix", "judging", "by", "the", "CI", "status", "NUMBER", "It", "shows", "Device", "resource", "busy", "on", "x", "NUMBER", "_", "NUMBER", "I", "m", "not", "sure", "what", "be", "cause", "this", "and", "don", "t", "believe", "this", "showed", "up", "when", "I", "start", "work", "on", "this", "PR", "NUMBER", "log", "device_manager", "persist", "test", "test_device_manager_persistence", "stdout", "thread", "main", "panicked", "at", "call", "Result", "unwrap", "on", "an", "Err", "value", "Net", "CreateNet", "TapOpen", "CreateTap", "Os", "code", "NUMBER", "kind", "Other", "message", "Device", "or", "resource", "busy", "src", "vmm", "src", "device_manager", "persist", "NUMBER", "rs", "NUMBER", "NUMBER", "Anyway", "I", "m", "not", "sure", "how", "to", "go", "about", "this", "right", "now", "NUMBER", "Does", "anybody", "have", "an", "idea", "Hi", "timvisee", "NUMBER", "It", "looks", "like", "one", "of", "the", "unit", "test", "be", "fail", "NUMBER", "I", "m", "not", "sure", "if", "it", "s", "relate", "to", "the", "NUMBER", "upgrade", "or", "not", "but", "we", "will", "look", "into", "this", "as", "soon", "as", "possible", "NUMBER", "Also", "the", "buildkite", "CI", "build", "LINK", "ci", "amd", "build", "NUMBER", "for", "this", "seems", "to", "be", "stuck", "NUMBER", "It", "looks", "like", "it", "s", "still", "run", "NUMBER", "Maybe", "someone", "should", "cancel", "it", "to", "prevent", "high", "cost", "for", "nothing", "I", "can", "t", "do", "this", "myself", "NUMBER", "Great", "Will", "do", "NUMBER", "timvisee", "Can", "you", "try", "to", "modify", "in", "the", "test", "that", "fail", "host_dev_name", "String", "from", "hostname", "with", "this", "LINK", "microvm", "firecracker", "pull", "NUMBER", "file", "diff", "c", "NUMBER", "c", "NUMBER", "f", "NUMBER", "cb", "NUMBER", "b", "NUMBER", "c", "NUMBER", "a", "NUMBER", "cR", "NUMBER", "R", "NUMBER", "This", "error", "occur", "also", "in", "that", "PR", "because", "there", "were", "more", "test", "that", "were", "trying", "to", "use", "the", "same", "tap", "and", "one", "of", "them", "didn", "t", "get", "the", "chance", "to", "close", "that", "tap", "in", "time", "NUMBER", "Also", "would", "be", "super", "nice", "to", "update", "with", "that", "fix", "in", "the", "entire", "vmm", "crate", "in", "the", "test", "modules", "to", "avoid", "possible", "future", "problem", "like", "this", "NUMBER", "It", "s", "interesting", "though", "to", "check", "why", "with", "the", "previous", "rust", "version", "that", "test", "didn", "t", "fail", "NUMBER", "lauralt", "It", "seems", "it", "didn", "t", "solve", "the", "error", "LINK", "pr", "NUMBER", "s", "NUMBER", "amazonaws", "NUMBER", "com", "pr", "logs", "x", "NUMBER", "_", "NUMBER", "NUMBER", "timvisee", "firecracker", "e", "NUMBER", "a", "NUMBER", "log", "NUMBER", "html", "ioanachirca", "No", "difference", "sadly", "NUMBER", "lauralt", "It", "seems", "it", "didn", "t", "solve", "the", "error", "LINK", "pr", "NUMBER", "s", "NUMBER", "amazonaws", "NUMBER", "com", "pr", "logs", "x", "NUMBER", "_", "NUMBER", "NUMBER", "timvisee", "firecracker", "e", "NUMBER", "a", "NUMBER", "log", "NUMBER", "html", "The", "CI", "doesn", "t", "trigger", "anymore", "at", "push", "f", "probably", "because", "of", "something", "that", "we", "ve", "do", "the", "log", "that", "you", "sent", "be", "an", "older", "one", "NUMBER", "I", "retriggered", "manually", "the", "CI", "for", "x", "NUMBER", "_", "NUMBER", "for", "your", "PR", "but", "it", "looks", "like", "be", "still", "hanging", "NUMBER", "For", "NUMBER", "the", "CI", "be", "work", "we", "ll", "come", "with", "an", "update", "here", "NUMBER", "The", "CI", "doesn", "t", "trigger", "anymore", "at", "push", "f", "probably", "because", "of", "something", "that", "we", "ve", "do", "the", "log", "that", "you", "sent", "be", "an", "older", "one", "NUMBER", "I", "retriggered", "manually", "the", "CI", "for", "x", "NUMBER", "_", "NUMBER", "for", "your", "PR", "but", "it", "looks", "like", "be", "still", "hanging", "NUMBER", "For", "NUMBER", "the", "CI", "be", "work", "we", "ll", "come", "with", "an", "update", "here", "NUMBER", "Perfect", "NUMBER", "Let", "me", "know", "if", "I", "should", "remove", "the", "last", "commit", "LINK", "microvm", "firecracker", "pull", "NUMBER", "commit", "NUMBER", "cfc", "NUMBER", "be", "NUMBER", "a", "NUMBER", "e", "NUMBER", "ce", "NUMBER", "af", "NUMBER", "e", "NUMBER", "dcf", "NUMBER", "d", "NUMBER", "cd", "NUMBER", "db", "from", "this", "PR", "as", "this", "might", "make", "it", "obsolete", "NUMBER", "The", "x", "NUMBER", "_", "NUMBER", "job", "now", "succeeds", "NUMBER", "I", "ve", "rebased", "on", "the", "latest", "master", "and", "cleaned", "up", "the", "commit", "NUMBER", "That", "s", "great", "One", "more", "nit", "could", "you", "also", "reword", "the", "commit", "message", "in", "order", "to", "keep", "the", "NUMBER", "NUMBER", "rule", "LINK", "global", "NUMBER", "com", "blog", "NUMBER", "NUMBER", "NUMBER", "git", "NUMBER", "NUMBER", "rule", "Done", "NUMBER", "And", "now", "it", "starts", "fail", "again", "NUMBER", "Interesting", "NUMBER", "Wondering", "whether", "this", "be", "due", "to", "a", "force", "push", "or", "due", "to", "an", "incorrect", "squash", "NUMBER", "Could", "a", "maintainer", "force", "a", "rebuild", "to", "confirm", "it", "succeeds", "Just", "a", "wild", "guess", "but", "it", "seems", "that", "now", "the", "error", "be", "VsockUnixBackend", "UnixBind", "Os", "code", "NUMBER", "kind", "AddrInUse", "message", "Address", "already", "in", "use", "It", "means", "that", "the", "host", "unix", "domain", "socket", "be", "still", "opened", "inside", "the", "test", "while", "the", "device", "manager", "try", "to", "restore", "the", "expected", "device", "manager", "use", "the", "same", "uds", "path", "which", "lies", "opened", "inside", "original", "device", "manager", "which", "in", "its", "turn", "holds", "a", "reference", "to", "the", "vsock", "device", "represented", "by", "the", "already", "opened", "uds", "NUMBER", "Let", "me", "know", "if", "it", "makes", "sense", "NUMBER", "That", "do", "make", "sense", "NUMBER", "I", "add", "this", "LINK", "microvm", "firecracker", "pull", "NUMBER", "issuecomment", "NUMBER", "suggestion", "again", "in", "a", "NUMBER", "bdca", "NUMBER", "d", "NUMBER", "b", "NUMBER", "c", "NUMBER", "faa", "NUMBER", "bcc", "NUMBER", "a", "NUMBER", "for", "now", "NUMBER", "Edit", "Still", "fail", "NUMBER", "I", "don", "t", "understand", "NUMBER", "It", "succeeded", "an", "hour", "ago", "with", "the", "same", "codebase", "NUMBER", "I", "think", "it", "be", "more", "to", "this", "than", "it", "seems", "NUMBER", "That", "workaround", "wouldn", "t", "work", "anymore", "NUMBER", "Even", "if", "the", "uds", "file", "be", "apparently", "remove", "from", "the", "filesystem", "it", "still", "lies", "in", "the", "filesystem", "because", "of", "the", "opened", "file", "descriptor", "from", "the", "original", "device", "manager", "vsock", "device", "NUMBER", "Another", "wild", "guess", "but", "to", "make", "it", "work", "I", "think", "we", "would", "have", "to", "close", "the", "vsock", "uds", "breaking", "the", "device", "which", "be", "not", "really", "a", "problem", "because", "it", "be", "not", "use", "and", "then", "do", "the", "restore", "NUMBER", "What", "do", "you", "think", "iulianbarbu", "My", "understanding", "on", "this", "topic", "be", "lacking", "NUMBER", "Someone", "else", "should", "take", "a", "look", "at", "it", "NUMBER", "Just", "one", "more", "nit", "NUMBER", "Please", "sign", "off", "every", "commit", "git", "commit", "amend", "s", "NUMBER", "All", "seems", "good", "NUMBER", "I", "ll", "approve", "once", "you", "integrate", "this", "feedback", "NUMBER", "Please", "also", "update", "coverage", "on", "AMD", "NUMBER", "I", "ve", "lowered", "it", "by", "the", "same", "amount", "see", "LINK", "microvm", "firecracker", "pull", "NUMBER", "commit", "fcb", "NUMBER", "bd", "NUMBER", "eab", "NUMBER", "d", "NUMBER", "daaa", "NUMBER", "cdeae", "NUMBER", "b", "NUMBER", "diff", "NUMBER", "bb", "NUMBER", "e", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "R", "NUMBER", "R", "NUMBER", "We", "should", "still", "check", "where", "the", "increase", "in", "binary", "size", "comes", "from", "and", "if", "we", "can", "lower", "it", "NUMBER", "Oh", "right", "NUMBER", "I", "think", "it", "would", "help", "if", "we", "would", "compare", "the", "dependencies", "of", "the", "project", "now", "with", "the", "previous", "rust", "version", "NUMBER", "To", "do", "this", "we", "can", "use", "cargo", "bloat", "LINK", "bloat", "NUMBER", "NUMBER", "We", "should", "still", "check", "where", "the", "increase", "in", "binary", "size", "comes", "from", "and", "if", "we", "can", "lower", "it", "NUMBER", "ioanachirca", "Is", "this", "something", "that", "can", "be", "do", "in", "a", "separate", "issue", "PR", "This", "PR", "didn", "t", "introduce", "significant", "code", "change", "NUMBER", "We", "can", "see", "that", "the", "binary", "file", "size", "increase", "from", "NUMBER", "MiB", "to", "NUMBER", "MiB", "so", "setting", "the", "limit", "to", "NUMBER", "MiB", "be", "too", "high", "NUMBER", "I", "think", "the", "_target_", "should", "be", "the", "current", "size", "and", "the", "_limit_", "should", "be", "NUMBER", "or", "NUMBER", "NUMBER", "A", "rather", "big", "difference", "comes", "from", "vmm", "TAG", "serialize", "which", "doubled", "from", "NUMBER", "KiB", "to", "NUMBER", "KiB", "NUMBER", "We", "should", "open", "an", "issue", "for", "this", "and", "investigate", "but", "not", "block", "this", "PR", "NUMBER", "_ZN", "NUMBER", "libunwind", "NUMBER", "CFI_ParserINS_", "NUMBER", "LocalAddressSpaceEE", "NUMBER", "parseInstructionsERS", "NUMBER", "_mmRKNS", "NUMBER", "_", "NUMBER", "CIE_InfoEmRPNS", "NUMBER", "_", "NUMBER", "PrologIn", "NUMBER", "libunwind", "increase", "from", "NUMBER", "KiB", "to", "NUMBER", "KiB", "I", "believe", "this", "will", "go", "away", "altogether", "with", "NUMBER", "ioanachirca", "Sure", "what", "limit", "s", "should", "I", "choose", "though", "This", "be", "what", "I", "came", "up", "with", "based", "on", "the", "last", "CI", "results", "python", "FC_BINARY_SIZE_TARGET", "NUMBER", "if", "MACHINE", "x", "NUMBER", "_", "NUMBER", "else", "NUMBER", "FC_BINARY_SIZE_LIMIT", "NUMBER", "if", "MACHINE", "x", "NUMBER", "_", "NUMBER", "else", "NUMBER", "ioanachirca", "I", "ve", "just", "push", "these", "new", "limits", "NUMBER", "This", "should", "be", "all", "then", "NUMBER", "It", "looks", "like", "this", "AMD", "branch", "isn", "t", "work", "python", "if", "AMD", "in", "platform", "NUMBER", "processor", "COVERAGE_TARGET_PCT", "NUMBER", "LINK", "microvm", "firecracker", "pull", "NUMBER", "commit", "NUMBER", "da", "NUMBER", "bda", "NUMBER", "a", "NUMBER", "ec", "NUMBER", "fca", "NUMBER", "cb", "NUMBER", "d", "NUMBER", "d", "NUMBER", "diff", "NUMBER", "bb", "NUMBER", "e", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "R", "NUMBER", "R", "NUMBER", "The", "NUMBER", "platform", "function", "seems", "flaky", "for", "CPU", "vendor", "detection", "LINK", "Reason", "for", "This", "PR", "The", "script", "in", "the", "get", "start", "guide", "supposed", "to", "let", "to", "know", "the", "user", "whether", "firecracker", "would", "run", "on", "their", "machine", "or", "not", "be", "broken", "when", "checking", "the", "kernel", "version", "when", "use", "Zsh", "NUMBER", "Description", "of", "Changes", "Fixed", "the", "arithmetic", "and", "evaluation", "expression", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "X", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "X", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "X", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "X", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "X", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "X", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "It", "do", "say", "that", "it", "be", "a", "bash", "script", "I", "think", "a", "solution", "that", "keep", "compatibility", "with", "more", "shells", "be", "to", "add", "this", "line", "at", "the", "beginning", "of", "the", "script", "usr", "bin", "env", "bash", "what", "do", "you", "think", "It", "will", "most", "likely", "solve", "the", "issue", "but", "I", "think", "it", "would", "make", "the", "script", "get", "bigger", "and", "hardly", "readable", "NUMBER", "I", "put", "the", "script", "into", "a", "separate", "file", "_", "inside", "tool", "_", "and", "just", "execute", "it", "by", "pulling", "it", "with", "curl", "and", "passing", "it", "to", "bash", "NUMBER", "Hi", "Mehigh", "NUMBER", "Simplifying", "the", "Getting", "Started", "guide", "be", "a", "good", "idea", "but", "I", "just", "took", "a", "closer", "look", "at", "the", "devtool", "LINK", "microvm", "firecracker", "blob", "master", "tool", "devtool", "script", "and", "it", "looks", "like", "line", "NUMBER", "LINK", "microvm", "firecracker", "blob", "master", "tool", "devtool", "L", "NUMBER", "already", "contains", "a", "compatibility", "checker", "NUMBER", "I", "recommend", "that", "you", "take", "a", "look", "at", "what", "devtool", "implement", "and", "if", "it", "do", "not", "check", "functionality", "that", "the", "current", "Getting", "Started", "guide", "contains", "you", "can", "add", "it", "NUMBER", "Eventually", "the", "Getting", "Started", "guide", "should", "point", "to", "the", "devtool", "script", "NUMBER", "Hi", "Mehigh", "NUMBER", "Simplifying", "the", "Getting", "Started", "guide", "be", "a", "good", "idea", "but", "I", "just", "took", "a", "closer", "look", "at", "the", "devtool", "LINK", "microvm", "firecracker", "blob", "master", "tool", "devtool", "script", "and", "it", "looks", "like", "line", "NUMBER", "LINK", "microvm", "firecracker", "blob", "master", "tool", "devtool", "L", "NUMBER", "already", "contains", "a", "compatibility", "checker", "NUMBER", "I", "recommend", "that", "you", "take", "a", "look", "at", "what", "devtool", "implement", "and", "if", "it", "do", "not", "check", "functionality", "that", "the", "current", "Getting", "Started", "guide", "contains", "you", "can", "add", "it", "NUMBER", "Eventually", "the", "Getting", "Started", "guide", "should", "point", "to", "the", "devtool", "script", "NUMBER", "Indeed", "I", "think", "it", "s", "much", "better", "to", "point", "to", "that", "script", "to", "have", "a", "more", "consistent", "check", "than", "having", "two", "scripts", "where", "one", "might", "pass", "and", "the", "other", "fail", "NUMBER", "I", "update", "the", "documentation", "and", "remove", "the", "separate", "script", "I", "ve", "created", "before", "NUMBER", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Description", "of", "Changes", "Added", "a", "high", "level", "documentation", "for", "the", "snapshotting", "functionality", "that", "mostly", "focuses", "on", "the", "API", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "nit", "I", "think", "the", "commit", "could", "be", "squashed", "since", "the", "new", "results", "be", "obtained", "I", "suppose", "for", "the", "new", "sample", "size", "NUMBER", "One", "change", "code", "the", "other", "change", "docs", "NUMBER", "I", "think", "they", "need", "to", "be", "review", "separately", "NUMBER", "Then", "that", "code", "change", "should", "be", "somehow", "documented", "i", "NUMBER", "e", "NUMBER", "explain", "a", "bit", "in", "the", "commit", "message", "why", "you", "did", "the", "sample", "size", "change", "even", "if", "for", "us", "it", "may", "seem", "obvious", "NUMBER", "I", "m", "sorry", "for", "the", "collision", "NUMBER", "I", "really", "liked", "your", "idea", "about", "use", "BTreeMap", "so", "I", "incorporated", "it", "in", "my", "commit", "NUMBER", "It", "made", "my", "code", "much", "simpler", "NUMBER", "LINK", "microvm", "firecracker", "pull", "NUMBER", "commit", "NUMBER", "b", "NUMBER", "ea", "NUMBER", "d", "NUMBER", "a", "NUMBER", "c", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "NUMBER", "cf", "NUMBER", "f", "Hi", "edigaryev", "The", "coverage", "should", "be", "indeed", "update", "with", "the", "new", "values", "I", "suggest", "you", "to", "wait", "for", "the", "CI", "to", "finish", "in", "order", "to", "see", "also", "the", "coverage", "value", "for", "AMD", "NUMBER", "Also", "please", "can", "you", "squash", "your", "commit", "into", "a", "single", "one", "There", "be", "no", "need", "to", "have", "a", "separate", "commit", "for", "minor", "change", "like", "the", "ArgVals", "instantiation", "update", "or", "other", "small", "change", "that", "we", "request", "in", "review", "NUMBER", "It", "would", "be", "awesome", "if", "you", "could", "adjust", "your", "commit", "title", "to", "follow", "the", "NUMBER", "NUMBER", "commit", "rule", "LINK", "global", "NUMBER", "com", "blog", "NUMBER", "NUMBER", "NUMBER", "git", "NUMBER", "NUMBER", "rule", "NUMBER", "Also", "please", "can", "you", "squash", "your", "commit", "into", "a", "single", "one", "There", "be", "no", "need", "to", "have", "a", "separate", "commit", "for", "minor", "change", "like", "the", "ArgVals", "instantiation", "update", "or", "other", "small", "change", "that", "we", "request", "in", "review", "NUMBER", "Squashed", "into", "NUMBER", "LINK", "microvm", "firecracker", "commit", "NUMBER", "f", "NUMBER", "c", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "e", "NUMBER", "ea", "NUMBER", "efad", "NUMBER", "d", "NUMBER", "c", "NUMBER", "NUMBER", "It", "would", "be", "awesome", "if", "you", "could", "adjust", "your", "commit", "title", "to", "follow", "the", "NUMBER", "NUMBER", "commit", "rule", "LINK", "global", "NUMBER", "com", "blog", "NUMBER", "NUMBER", "NUMBER", "git", "NUMBER", "NUMBER", "rule", "NUMBER", "Applied", "NUMBER", "NUMBER", "to", "NUMBER", "LINK", "microvm", "firecracker", "commit", "NUMBER", "f", "NUMBER", "c", "NUMBER", "dd", "NUMBER", "d", "NUMBER", "e", "NUMBER", "ea", "NUMBER", "efad", "NUMBER", "d", "NUMBER", "c", "NUMBER", "NUMBER", "I", "was", "initially", "trying", "to", "replicate", "the", "convention", "from", "git", "log", "but", "that", "rule", "wasn", "t", "that", "easy", "to", "infer", "NUMBER", "Perhaps", "the", "Contribution", "Quality", "Standards", "LINK", "microvm", "firecracker", "blob", "master", "CONTRIBUTING", "NUMBER", "md", "contribution", "quality", "standards", "can", "be", "update", "to", "reflect", "this", "practice", "You", "mean", "we", "should", "add", "the", "NUMBER", "NUMBER", "rule", "explicitly", "there", "It", "be", "indeed", "pretty", "hidden", "here", "LINK", "good", "commit", "message", "NUMBER", "You", "mean", "we", "should", "add", "the", "NUMBER", "NUMBER", "rule", "explicitly", "there", "It", "be", "indeed", "pretty", "hidden", "here", "LINK", "good", "commit", "message", "NUMBER", "Thanks", "totally", "miss", "that", "NUMBER", "Also", "the", "Buildkite", "runner", "seems", "to", "be", "stuck", "on", "git", "clone", "stage", "with", "the", "permission", "denied", "error", "no", "matter", "how", "many", "times", "it", "gets", "restarted", "LINK", "ci", "amd", "build", "NUMBER", "Will", "fix", "it", "soon", "NUMBER", "edigaryev", "Can", "you", "please", "update", "AMD", "coverage", "too", "and", "we", "will", "re", "approve", "after", "that", "Once", "there", "s", "a", "release", "of", "LINK", "vmm", "linux", "loader", "on", "crates", "NUMBER", "io", "replace", "the", "kernel", "crate", "with", "it", "NUMBER", "Some", "bits", "of", "the", "arch", "crate", "will", "also", "be", "replace", "able", "NUMBER", "Blocked", "by", "LINK", "vmm", "linux", "loader", "issue", "NUMBER", "Two", "new", "test", "needed", "to", "close", "this", "issue", "Restore", "snapshot", "artifacts", "Create", "snapshot", "with", "binary", "firecracker", "artifact", "and", "restore", "with", "current", "Firecracker", "build", "LGTM", "NUMBER", "Awesome", "It", "should", "come", "with", "an", "update", "of", "the", "container", "as", "well", "in", "which", "we", "do", "not", "install", "musl", "tool", "any", "more", "NUMBER", "Awesome", "It", "should", "come", "with", "an", "update", "of", "the", "container", "as", "well", "in", "which", "we", "do", "not", "install", "musl", "tool", "any", "more", "NUMBER", "Yup", "I", "ll", "come", "with", "an", "update", "soon", "NUMBER", "We", "still", "need", "to", "update", "the", "container", "I", "think", "NUMBER", "Our", "current", "Dockerfile", "can", "not", "be", "use", "anymore", "for", "build", "a", "container", "image", "because", "it", "uses", "rust", "version", "NUMBER", "and", "the", "latest", "cargo", "audit", "version", "requires", "rust", "NUMBER", "see", "Requirements", "LINK", "audit", "requirements", "NUMBER", "I", "will", "open", "an", "issue", "for", "update", "to", "the", "latest", "rust", "version", "NUMBER", "Will", "merge", "this", "into", "NUMBER", "Will", "merge", "this", "into", "NUMBER", "lauralt", "Before", "I", "do", "I", "notice", "you", "have", "a", "backtrace_remove", "and", "backtrace_remove_", "NUMBER", "branch", "NUMBER", "Can", "I", "merge", "either", "of", "the", "two", "into", "NUMBER", "to", "resolve", "LINK", "microvm", "firecracker", "pull", "NUMBER", "issuecomment", "NUMBER", "timvisee", "the", "second", "one", "was", "use", "for", "some", "experiments", "but", "contains", "pretty", "much", "the", "same", "change", "NUMBER", "Anyway", "if", "you", "want", "to", "try", "some", "things", "with", "this", "branch", "I", "suggest", "you", "make", "a", "separate", "branch", "but", "wait", "a", "bit", "I", "ll", "try", "to", "explain", "as", "clear", "as", "possible", "the", "whole", "situation", "sorry", "in", "advance", "if", "I", "won", "t", "succeed", "NUMBER", "The", "backtrace", "dependency", "required", "musl", "tool", "to", "be", "install", "and", "that", "s", "why", "it", "appears", "in", "the", "Dockerfile", "NUMBER", "This", "PR", "doesn", "t", "necessary", "require", "musl", "tool", "dependency", "to", "be", "remove", "but", "as", "long", "as", "it", "won", "t", "be", "use", "for", "anything", "it", "would", "ve", "be", "nice", "to", "have", "a", "new", "container", "image", "without", "it", "NUMBER", "The", "Rust", "update", "issue", "was", "notice", "when", "I", "tried", "to", "build", "this", "image", "NUMBER", "I", "also", "notice", "that", "without", "remove", "musl", "tool", "that", "Dockerfile", "isn", "t", "work", "anymore", "and", "the", "reason", "behind", "that", "be", "the", "one", "mention", "in", "the", "issue", "current", "rust", "version", "requirement", "for", "cargo", "audit", "NUMBER", "Yesterday", "I", "was", "thinking", "that", "to", "kill", "NUMBER", "birds", "with", "one", "stone", "we", "could", "merge", "this", "backtrace", "PR", "first", "without", "the", "container", "update", "and", "then", "in", "your", "PR", "update", "the", "Dockerfile", "with", "both", "rust", "update", "and", "musl", "tool", "removal", "NUMBER", "But", "thinking", "more", "about", "this", "the", "right", "way", "to", "do", "things", "would", "be", "to", "keep", "these", "PRs", "completely", "separate", "i", "NUMBER", "e", "NUMBER", "merge", "your", "PR", "with", "just", "the", "rust", "update", "and", "v", "NUMBER", "container", "image", "and", "then", "this", "PR", "with", "a", "new", "container", "image", "v", "NUMBER", "let", "s", "say", "that", "doesn", "t", "contain", "musl", "tool", "NUMBER", "The", "fact", "that", "the", "binary", "size", "test", "be", "fail", "in", "your", "PR", "doesn", "t", "have", "anything", "to", "do", "with", "NUMBER", "From", "what", "I", "know", "it", "be", "expected", "the", "binary", "size", "to", "increase", "with", "a", "rust", "update", "and", "there", "were", "also", "some", "snapshotting", "relate", "PRs", "merge", "lately", "which", "also", "increase", "the", "binary", "NUMBER", "also", "update", "the", "binary", "size", "limit", "if", "you", "take", "a", "look", "NUMBER", "Yesterday", "I", "cherry", "pick", "your", "clippy", "commit", "on", "top", "of", "this", "branch", "and", "with", "a", "container", "image", "that", "uses", "Rust", "NUMBER", "and", "the", "binary", "size", "test", "didn", "t", "fail", "probably", "because", "backtrace", "be", "a", "big", "dependency", "NUMBER", "Anyway", "it", "s", "totally", "fine", "if", "you", "update", "the", "binary", "size", "limit", "in", "your", "PR", "and", "hopefully", "when", "I", "ll", "update", "this", "PR", "the", "binary", "size", "will", "decrease", "NUMBER", "Please", "let", "me", "know", "if", "something", "be", "not", "clear", "NUMBER", "I", "understand", "keep", "it", "separate", "seems", "like", "a", "good", "idea", "NUMBER", "I", "ll", "update", "the", "binary", "size", "limit", "then", "NUMBER", "It", "may", "be", "wise", "to", "open", "an", "issue", "to", "revert", "this", "if", "needed", "so", "we", "won", "t", "forget", "NUMBER", "My", "proposal", "Our", "current", "Dockerfile", "can", "not", "be", "use", "anymore", "for", "build", "a", "container", "image", "because", "it", "uses", "rust", "version", "NUMBER", "and", "the", "latest", "cargo", "audit", "version", "requires", "rust", "NUMBER", "see", "Requirements", "LINK", "audit", "requirements", "NUMBER", "I", "will", "open", "an", "issue", "for", "update", "to", "the", "latest", "rust", "version", "NUMBER", "My", "proposal", "here", "be", "to", "unblock", "this", "PR", "by", "leaving", "the", "same", "version", "of", "rust", "i", "NUMBER", "e", "NUMBER", "and", "cargo", "audit", "NUMBER", "in", "the", "docker", "and", "only", "focusing", "on", "remove", "backtrace", "NUMBER", "Later", "when", "the", "update", "to", "rust", "NUMBER", "be", "do", "we", "can", "upgrade", "both", "of", "them", "simultaneously", "NUMBER", "See", "my", "comment", "in", "the", "code", "for", "how", "we", "can", "install", "a", "specific", "version", "of", "with", "cargo", "install", "NUMBER", "I", "don", "t", "personally", "like", "this", "approach", "as", "it", "looks", "like", "a", "workaround", "and", "I", "d", "like", "to", "keep", "the", "dependencies", "at", "the", "latest", "stable", "version", "when", "update", "the", "container", "image", "NUMBER", "The", "fact", "that", "we", "re", "use", "such", "old", "rust", "version", "should", "be", "somehow", "of", "a", "priority", "now", "especially", "since", "we", "re", "exposing", "at", "this", "moment", "an", "invalid", "Dockerfile", "in", "our", "repo", "NUMBER", "I", "think", "the", "right", "flow", "here", "would", "be", "the", "rust", "update", "first", "and", "then", "this", "PR", "but", "again", "it", "s", "just", "my", "opinion", "NUMBER", "lauralt", "I", "also", "like", "the", "approach", "your", "mentioning", "NUMBER", "There", "be", "one", "tiny", "disadvantages", "which", "be", "we", "will", "have", "to", "publish", "NUMBER", "container", "version", "one", "for", "update", "rust", "and", "one", "for", "remove", "musl", "tool", "NUMBER", "Nevertheless", "I", "think", "the", "advantages", "outweigh", "the", "disadvantages", "NUMBER", "aghecenco", "andreeaflorescu", "dianpopa", "I", "update", "with", "a", "new", "container", "image", "please", "take", "another", "look", "Hi", "jabedude", "It", "s", "great", "if", "you", "intend", "on", "implement", "this", "feature", "One", "requirement", "would", "be", "that", "all", "the", "declared", "metrics", "that", "you", "ve", "add", "in", "metrics", "NUMBER", "rs", "should", "be", "implement", "NUMBER", "Thanks", "Sounds", "good", "I", "ll", "work", "on", "the", "reviews", "over", "the", "next", "week", "Of", "course", "you", "can", "please", "feel", "free", "to", "contribute", "to", "the", "PR", "Fixed", "by", "NUMBER", "The", "integration", "test", "that", "exercise", "full", "VMM", "functionalities", "introduce", "by", "NUMBER", "issue", "a", "vmm", "NUMBER", "op", "NUMBER", "to", "gracefully", "stop", "the", "vcpu", "loops", "NUMBER", "This", "exits", "the", "integration", "test", "process", "with", "a", "success", "code", "and", "interferes", "with", "cargo", "kcov", "and", "cargo", "test", "normal", "function", "NUMBER", "This", "be", "why", "new", "test", "that", "do", "this", "do", "not", "account", "for", "test", "coverage", "NUMBER", "The", "vmm", "NUMBER", "op", "can", "be", "remove", "because", "the", "process", "exits", "anyway", "but", "NUMBER", "the", "vcpu", "threads", "will", "not", "exit", "gracefully", "NUMBER", "this", "plus", "the", "CPU", "pinning", "kcov", "do", "to", "serialize", "instructions", "for", "coverage", "computation", "breaks", "the", "VMM", "seccomp", "integration", "test", "NUMBER", "We", "should", "NUMBER", "remove", "the", "vmm", "NUMBER", "op", "in", "the", "Rust", "VMM", "integ", "test", "let", "the", "test", "harness", "cargo", "control", "how", "the", "test", "process", "exits", "NUMBER", "figure", "out", "how", "to", "gracefully", "stop", "the", "vcpu", "threads", "before", "letting", "cargo", "force", "end", "the", "test", "process", "bringing", "them", "down", "or", "panicking", "them", "NUMBER", "the", "cleanest", "way", "be", "to", "have", "the", "test", "guest", "kernel", "exit", "and", "let", "them", "go", "through", "the", "exited", "state", "NUMBER", "figure", "out", "why", "the", "seccomp", "integ", "test", "doesn", "t", "work", "The", "integration", "test", "don", "t", "compile", "the", "cfg", "test", "marked", "code", "NUMBER", "The", "VMM", "crate", "it", "uses", "be", "exactly", "the", "same", "as", "for", "release", "NUMBER", "We", "could", "also", "whitelist", "sysprocmask", "and", "let", "the", "vcpu", "threads", "exit", "cleanly", "NUMBER", "This", "isn", "t", "a", "seccomp", "issue", "in", "the", "unit", "test", "NUMBER", "The", "problem", "with", "the", "vmm", "exiting", "be", "that", "it", "takes", "down", "the", "integration", "test", "process", "with", "it", "NUMBER", "Also", "there", "s", "no", "way", "to", "force", "the", "vcpus", "to", "exit", "but", "leave", "the", "process", "run", "use", "just", "the", "public", "facing", "programmatic", "api", "NUMBER", "Another", "fun", "thing", "I", "discover", "be", "that", "the", "seccomp", "test", "I", "add", "in", "the", "new", "integration", "test", "be", "broken", "NUMBER", "The", "signal", "handler", "never", "gets", "call", "in", "the", "Rust", "integ", "test", "when", "run", "under", "kcov", "NUMBER", "cargo", "test", "integ", "test", "be", "run", "signal", "handler", "be", "call", "seccomp", "test", "works", "cargo", "kcov", "integ", "test", "be", "run", "signal", "handler", "not", "call", "seccomp", "test", "broken", "We", "ve", "hit", "the", "kcov", "signal", "thing", "before", "with", "the", "unit", "test", "which", "be", "why", "the", "unit", "test", "don", "t", "assert", "on", "the", "signal", "handler", "having", "be", "call", "when", "run", "under", "kcov", "NUMBER", "LINK", "microvm", "firecracker", "blob", "NUMBER", "b", "NUMBER", "fe", "NUMBER", "ad", "NUMBER", "d", "NUMBER", "ee", "NUMBER", "bf", "NUMBER", "fa", "NUMBER", "a", "src", "vmm", "src", "signal_handler", "NUMBER", "rs", "L", "NUMBER", "I", "will", "let", "the", "signal", "kcov", "issue", "go", "for", "now", "and", "focus", "on", "the", "other", "NUMBER", "As", "for", "the", "corresponding", "rust", "integ", "test", "I", "ll", "try", "to", "tweak", "it", "same", "as", "the", "unit", "test", "above", "and", "if", "it", "doesn", "t", "work", "I", "ll", "remove", "it", "we", "already", "have", "coverage", "on", "seccomp", "NUMBER", "As", "for", "the", "other", "issue", "instead", "of", "vmm", "NUMBER", "op", "we", "can", "sleep", "a", "bit", "to", "give", "the", "guest", "kernel", "s", "a", "chance", "to", "run", "and", "and", "exit", "NUMBER", "The", "elf", "we", "use", "to", "test", "right", "now", "says", "hello", "world", "then", "exits", "NUMBER", "We", "can", "sleep", "a", "bit", "in", "the", "integ", "test", "give", "the", "vcpu", "threads", "their", "chance", "to", "run", "the", "state", "machine", "then", "end", "the", "test", "NUMBER", "It", "won", "t", "always", "do", "the", "trick", "and", "sometimes", "the", "test", "and", "hence", "the", "vmm", "thread", "will", "end", "first", "potentially", "cause", "the", "vcpu", "threads", "to", "panic", "NUMBER", "But", "as", "long", "as", "cargo", "test", "and", "cargo", "kcov", "aren", "t", "affected", "we", "shouldn", "t", "care", "NUMBER", "The", "elf", "I", "build", "to", "test", "the", "dirty", "bitmap", "runs", "forever", "and", "keep", "dirtying", "NUMBER", "I", "ll", "rebuild", "it", "so", "that", "it", "dies", "after", "an", "adequate", "amount", "of", "time", "NUMBER", "Originally", "VcpuEvents", "also", "contained", "an", "Exit", "command", "so", "the", "vmm", "can", "request", "vcpus", "to", "cleanly", "exit", "NUMBER", "We", "remove", "it", "as", "it", "wasn", "t", "use", "but", "I", "think", "we", "should", "bring", "it", "back", "NUMBER", "It", "would", "be", "a", "clean", "flow", "NUMBER", "In", "that", "case", "however", "this", "We", "could", "also", "whitelist", "sysprocmask", "and", "let", "the", "vcpu", "threads", "exit", "cleanly", "NUMBER", "would", "also", "be", "needed", "NUMBER", "That", "s", "what", "I", "was", "basically", "proposing", "Adi", "put", "in", "better", "words", "I", "like", "this", "approach", "better", "than", "what", "I", "suggested", "relying", "on", "empirical", "sleep", "s", "here", "and", "there", "NUMBER", "I", "ll", "NUMBER", "revive", "the", "VcpuEvents", "Exit", "enum", "variant", "and", "adjust", "filters", "accordingly", "NUMBER", "port", "the", "seccomp", "kcov", "workaround", "from", "the", "unit", "test", "to", "the", "integration", "test", "as", "it", "manifests", "the", "same", "way", "NUMBER", "dig", "some", "more", "into", "kcov", "and", "why", "it", "hates", "signal", "handlers", "so", "much", "Proposed", "mechanism", "to", "address", "NUMBER", "Add", "a", "new", "test", "to", "ensure", "that", "every", "rust", "source", "file", "that", "contains", "the", "rust", "test", "attribute", "also", "contains", "the", "string", "mod", "test", "NUMBER", "Test", "should", "break", "the", "CI", "run", "until", "after", "NUMBER", "be", "merge", "up", "where", "the", "failure", "error", "should", "list", "the", "non", "conforming", "file", "NUMBER", "Reason", "for", "This", "PR", "Author", "TODO", "add", "issue", "or", "explain", "reasoning", "NUMBER", "Description", "of", "Changes", "Author", "TODO", "add", "description", "of", "change", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "What", "will", "happen", "with", "this", "test", "for", "source", "file", "that", "have", "cfg", "test", "in", "it", "but", "do", "not", "have", "any", "unit", "test", "i", "NUMBER", "e", "no", "test", "module", "declared", "inside", "that", "source", "file", "I", "think", "it", "would", "still", "fail", "and", "flag", "the", "file", "NUMBER", "Wouldn", "t", "that", "be", "ok", "because", "any", "test", "not", "in", "a", "module", "call", "mod", "test", "would", "break", "the", "kcov", "coverage", "report", "anyway", "So", "you", "might", "want", "that", "to", "be", "flagged", "But", "yes", "this", "test", "be", "very", "specific", "to", "how", "the", "current", "codebase", "looks", "to", "me", "rather", "than", "accommodating", "any", "possible", "code", "variations", "NUMBER", "Appreciate", "that", "that", "might", "not", "be", "the", "requirement", "NUMBER", "I", "think", "it", "would", "still", "fail", "and", "flag", "the", "file", "NUMBER", "Wouldn", "t", "that", "be", "ok", "because", "any", "test", "not", "in", "a", "module", "call", "mod", "test", "would", "break", "the", "kcov", "coverage", "report", "anyway", "So", "you", "might", "want", "that", "to", "be", "flagged", "But", "yes", "this", "test", "be", "very", "specific", "to", "how", "the", "current", "codebase", "looks", "to", "me", "rather", "than", "accommodating", "any", "possible", "code", "variations", "NUMBER", "Appreciate", "that", "that", "might", "not", "be", "the", "requirement", "NUMBER", "Ok", "so", "this", "PR", "be", "tying", "the", "presence", "of", "a", "cfg", "test", "anywhere", "in", "the", "source", "file", "with", "the", "presence", "of", "a", "test", "module", "inside", "the", "same", "file", "NUMBER", "As", "far", "as", "my", "concern", "this", "seems", "like", "a", "logical", "dependency", "NUMBER", "One", "would", "not", "bother", "to", "put", "cfg", "test", "in", "a", "source", "file", "unless", "one", "were", "trying", "to", "write", "unit", "test", "for", "that", "code", "right", "The", "PR", "looks", "good", "to", "me", "otherwise", "Waiting", "for", "NUMBER", "to", "get", "merge", "NUMBER", "Yeah", "that", "s", "what", "I", "was", "going", "for", "NUMBER", "I", "think", "the", "logic", "holds", "but", "I", "m", "not", "certain", "how", "future", "proof", "it", "be", "NUMBER", "I", "guess", "it", "s", "pretty", "disposable", "if", "the", "shape", "of", "the", "test", "change", "in", "any", "way", "NUMBER", "Ok", "so", "if", "this", "propose", "test", "had", "be", "run", "against", "the", "commit", "you", "mention", "it", "would", "have", "flagged", "up", "the", "file", "containing", "cfg", "test", "without", "the", "corresponding", "mod", "test", "NUMBER", "But", "might", "that", "be", "correct", "from", "a", "kcov", "perspective", "i", "NUMBER", "e", "NUMBER", "code", "flagged", "cfg", "test", "in", "the", "codebase", "that", "isn", "t", "be", "excluded", "from", "the", "kcov", "report", "Appreciate", "it", "s", "not", "desirable", "from", "a", "code", "perspective", "NUMBER", "If", "it", "did", "flag", "adjusting", "the", "exclude", "region", "option", "in", "kcov", "LINK", "to", "include", "regions", "marked", "cfg", "test", "might", "be", "possible", "Something", "like", "exclude", "region", "mod", "test", "cfg", "test", "cfg", "not", "test", "Then", "adjusting", "the", "propose", "test", "here", "to", "accommodate", "both", "scenarios", "i", "NUMBER", "e", "NUMBER", "all", "file", "containing", "cfg", "test", "would", "have", "to", "either", "contain", "a", "mod", "test", "string", "or", "a", "closing", "cfg", "not", "test", "Or", "maybe", "having", "the", "exclusion", "tied", "to", "mod", "test", "be", "actually", "imprecise", "and", "really", "the", "problem", "NUMBER", "Should", "it", "really", "be", "get", "tied", "to", "cfg", "test", "exclusively", "Then", "we", "don", "t", "care", "about", "module", "name", "typo", "like", "mod", "test", "NUMBER", "Not", "sure", "really", "I", "guess", "it", "be", "like", "this", "for", "a", "reason", "NUMBER", "But", "yeah", "back", "to", "the", "drawing", "board", "I", "think", "NUMBER", "Ok", "so", "if", "this", "propose", "test", "had", "be", "run", "against", "the", "commit", "you", "mention", "it", "would", "have", "flagged", "up", "the", "file", "containing", "cfg", "test", "without", "the", "corresponding", "mod", "test", "NUMBER", "But", "might", "that", "be", "correct", "from", "a", "kcov", "perspective", "i", "NUMBER", "e", "NUMBER", "code", "flagged", "cfg", "test", "in", "the", "codebase", "that", "isn", "t", "be", "excluded", "from", "the", "kcov", "report", "Appreciate", "it", "s", "not", "desirable", "from", "a", "code", "perspective", "NUMBER", "For", "the", "aforementioned", "situation", "no", "because", "kcov", "excludes", "in", "its", "report", "the", "imports", "and", "use", "s", "region", "This", "be", "what", "I", "was", "talking", "about", "LINK", "L", "NUMBER", "NUMBER", "But", "your", "point", "be", "valid", "when", "it", "comes", "to", "function", "that", "be", "marked", "with", "cfg", "test", "and", "be", "not", "defined", "in", "mod", "test", "NUMBER", "We", "be", "trying", "to", "avoid", "these", "situations", "but", "sometimes", "people", "prefer", "to", "define", "them", "there", "because", "it", "probably", "seems", "easier", "nicer", "to", "import", "them", "from", "there", "than", "from", "a", "test", "module", "NUMBER", "I", "took", "a", "look", "in", "our", "codebase", "and", "it", "seems", "like", "we", "have", "a", "few", "places", "with", "test", "function", "that", "be", "not", "defined", "in", "a", "test", "module", "and", "can", "be", "easily", "moved", "I", "ll", "open", "an", "issue", "for", "that", "NUMBER", "If", "it", "did", "flag", "adjusting", "the", "exclude", "region", "option", "in", "kcov", "LINK", "to", "include", "regions", "marked", "cfg", "test", "might", "be", "possible", "Something", "like", "exclude", "region", "mod", "test", "cfg", "test", "cfg", "not", "test", "Then", "adjusting", "the", "propose", "test", "here", "to", "accommodate", "both", "scenarios", "i", "NUMBER", "e", "NUMBER", "all", "file", "containing", "cfg", "test", "would", "have", "to", "either", "contain", "a", "mod", "test", "string", "or", "a", "closing", "cfg", "not", "test", "It", "would", "be", "really", "nice", "to", "do", "that", "but", "unfortunately", "we", "don", "t", "usually", "mark", "the", "end", "of", "a", "cfg", "test", "section", "with", "a", "cfg", "not", "test", "NUMBER", "As", "suggested", "here", "LINK", "do", "i", "exclude", "test", "function", "from", "code", "coverage", "when", "use", "kcov", "we", "could", "enforce", "people", "to", "only", "add", "this", "kind", "of", "function", "at", "the", "end", "of", "the", "non", "test", "module", "NUMBER", "But", "we", "can", "also", "have", "cfg", "test", "for", "some", "statements", "or", "field", "and", "again", "cfg", "not", "test", "wouldn", "t", "be", "required", "NUMBER", "So", "it", "looks", "like", "we", "can", "t", "add", "this", "kind", "of", "restriction", "NUMBER", "Or", "maybe", "having", "the", "exclusion", "tied", "to", "mod", "test", "be", "actually", "imprecise", "and", "really", "the", "problem", "NUMBER", "Should", "it", "really", "be", "get", "tied", "to", "cfg", "test", "exclusively", "Then", "we", "don", "t", "care", "about", "module", "name", "typo", "like", "mod", "test", "NUMBER", "Not", "sure", "really", "I", "guess", "it", "be", "like", "this", "for", "a", "reason", "NUMBER", "We", "could", "name", "test", "modules", "whatever", "we", "want", "but", "then", "we", "would", "lose", "consistency", "and", "it", "would", "be", "pretty", "weird", "I", "guess", "to", "have", "test", "in", "all", "sorts", "of", "modules", "also", "would", "be", "hard", "to", "tell", "kcov", "which", "sections", "to", "exclude", "NUMBER", "But", "yeah", "back", "to", "the", "drawing", "board", "I", "think", "NUMBER", "I", "gave", "some", "more", "thought", "to", "this", "and", "at", "this", "moment", "the", "cleanest", "solution", "seems", "to", "be", "the", "following", "search", "for", "mod", "test", "only", "in", "the", "file", "that", "contain", "a", "test", "in", "them", "because", "in", "the", "end", "this", "be", "a", "clear", "sign", "that", "we", "have", "test", "in", "that", "file", "as", "oppose", "to", "cfg", "test", "NUMBER", "make", "sure", "to", "do", "this", "search", "only", "in", "the", "src", "dirs", "of", "crates", "not", "in", "the", "test", "ones", "because", "the", "last", "ones", "contain", "integration", "test", "which", "be", "also", "marked", "with", "test", "attribute", "and", "we", "shouldn", "t", "care", "about", "them", "for", "the", "scope", "of", "this", "PR", "also", "kcov", "excludes", "these", "dirs", "in", "its", "report", "NUMBER", "What", "do", "you", "think", "Hi", "lauralt", "sounds", "good", "to", "me", "thank", "you", "very", "much", "for", "the", "clarification", "and", "explanation", "NUMBER", "So", "I", "ve", "amended", "as", "follows", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "def", "test_ensure_mod_tests", "TAG", "Hi", "lauralt", "sounds", "good", "to", "me", "thank", "you", "very", "much", "for", "the", "clarification", "and", "explanation", "NUMBER", "So", "I", "ve", "amended", "as", "follows", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "def", "test_ensure_mod_tests", "TAG", "file", "with", "matches", "recursive", "cfg", "test", "NUMBER", "src", "exclude", "dir", "src", "_gen", "test", "NUMBER", "src", "src", "TAG", "file", "with", "matches", "recursive", "mod", "test", "NUMBER", "src", "exclude", "dir", "src", "_gen", "mod", "test", "NUMBER", "src", "src", "With", "the", "additional", "step", "of", "excluding", "the", "generate", "file", "which", "I", "assume", "we", "don", "t", "want", "flagged", "NUMBER", "The", "only", "file", "that", "be", "be", "flagged", "after", "these", "change", "be", "this", "one", "src", "devices", "src", "virtio", "vsock", "mod", "NUMBER", "rs", "which", "appears", "to", "have", "a", "mod", "test", "but", "no", "test", "defined", "NUMBER", "I", "m", "guessing", "we", "shouldn", "t", "really", "be", "flagging", "this", "and", "can", "probably", "remove", "it", "by", "anchoring", "the", "mod", "test", "pattern", "to", "the", "start", "of", "line", "NUMBER", "But", "it", "s", "beyond", "my", "rust", "skills", "to", "say", "definitively", "NUMBER", "Hmm", "I", "kind", "of", "hoped", "that", "we", "won", "t", "don", "t", "have", "mod", "test", "without", "unit", "test", "NUMBER", "But", "we", "should", "allow", "that", "kind", "of", "special", "test", "modules", "i", "NUMBER", "e", "NUMBER", "helpers", "for", "the", "modules", "that", "actually", "contain", "test", "NUMBER", "If", "you", "re", "ask", "me", "that", "module", "could", "be", "renamed", "to", "test_helper", "or", "something", "like", "that", "without", "any", "big", "concern", "except", "the", "fact", "that", "kcov", "won", "t", "exclude", "it", "but", "it", "will", "be", "an", "isolated", "case", "anyway", "NUMBER", "That", "s", "why", "I", "propose", "to", "search", "for", "mod", "test", "only", "in", "the", "file", "where", "test", "be", "present", "this", "way", "you", "won", "t", "even", "care", "about", "the", "file", "that", "you", "mention", "NUMBER", "I", "think", "this", "PR", "should", "stick", "to", "just", "one", "purpose", "check", "that", "unit", "test", "be", "in", "a", "mod", "test", "don", "t", "check", "also", "that", "a", "mod", "test", "has", "at", "least", "one", "unit", "test", "NUMBER", "From", "the", "kcov", "perspective", "I", "agree", "it", "s", "not", "the", "best", "thing", "to", "have", "a", "mod", "TAG", "marked", "with", "cfg", "test", "and", "which", "doesn", "t", "contain", "any", "test", "not", "excluded", "from", "the", "report", "but", "I", "assume", "the", "number", "of", "this", "kind", "of", "modules", "will", "be", "very", "very", "small", "NUMBER", "The", "solution", "that", "you", "propose", "be", "indeed", "elegant", "but", "it", "kind", "of", "do", "NUMBER", "things", "at", "a", "time", "NUMBER", "I", "would", "like", "the", "test", "in", "the", "end", "to", "tell", "me", "something", "like", "this", "if", "it", "fail", "you", "have", "unit", "test", "s", "in", "a", "module", "that", "be", "not", "call", "test", "NUMBER", "Please", "check", "blah", "blah", "file", "NUMBER", "NUMBER", "Apologies", "a", "few", "ahem", "reading", "and", "comprehension", "challenges", "at", "my", "end", "NUMBER", "I", "ve", "had", "another", "shot", "hopefully", "it", "s", "closer", "to", "what", "you", "had", "in", "mind", "NUMBER", "Thanks", "very", "much", "lauralt", "for", "your", "help", "time", "and", "patience", "much", "appreciated", "NUMBER", "Reason", "for", "This", "PR", "Solve", "issue", "NUMBER", "Description", "of", "Changes", "Set", "the", "mod", "block", "to", "mod", "test", "instead", "of", "mod", "test", "in", "the", "cpuid", "crate", "NUMBER", "This", "will", "make", "the", "test", "code", "in", "cpuid", "crate", "get", "excluded", "by", "kcov", "NUMBER", "If", "it", "s", "not", "excluded", "kcov", "counts", "the", "test", "code", "as", "code", "and", "then", "the", "test", "coverage", "result", "gets", "messed", "up", "NUMBER", "x", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "lauralt", "Sure", "NUMBER", "I", "ll", "do", "that", "shortly", "NUMBER", "I", "had", "to", "amend", "the", "commit", "then", "force", "push", "it", "to", "update", "the", "value", "of", "COVERAGE_TARGET_PCT", "to", "a", "suitable", "value", "to", "pass", "the", "test_coverage", "integration", "test", "without", "committing", "twice", "for", "the", "same", "thing", "NUMBER", "I", "don", "t", "know", "if", "this", "be", "the", "best", "git", "approach", "to", "do", "NUMBER", "I", "d", "appreciate", "if", "someone", "proposes", "a", "better", "approach", "NUMBER", "the", "test_coverage", "now", "pass", "locally", "at", "least", "I", "can", "now", "hope", "it", "pass", "on", "the", "CI", "test", "bash", "test", "session", "starts", "platform", "linux", "Python", "NUMBER", "pytest", "NUMBER", "py", "NUMBER", "pluggy", "NUMBER", "cachedir", "NUMBER", "build", "pytest_cache", "rootdir", "firecracker", "test", "inifile", "pytest", "NUMBER", "ini", "plugins", "timeout", "NUMBER", "timeout", "NUMBER", "s", "timeout", "method", "signal", "timeout", "func_only", "False", "collected", "NUMBER", "item", "unsafe", "NUMBER", "test", "NUMBER", "worker", "s", "PASSED", "integration_tests", "build", "test_coverage", "NUMBER", "py", "test_coverage", "NUMBER", "pass", "in", "NUMBER", "s", "NUMBER", "NUMBER", "NUMBER", "That", "makes", "sense", "NUMBER", "I", "just", "squashed", "the", "commit", "and", "force", "push", "the", "change", "NUMBER", "Okay", "NUMBER", "So", "should", "I", "change", "the", "commit", "message", "to", "omit", "the", "part", "about", "the", "coverage", "target", "value", "be", "decreased", "Now", "the", "test", "test_rx_rate_limiting", "fail", "bash", "FAILURES", "____________________", "test_rx_rate_limiting", "ubuntu_with_ssh", "____________________", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "test_rx_rate_limiting", "_check_rx_rate_limit_patch", "test_microvm", "guest_ips", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_rate_limit_patch", "_check_rx_bandwidth", "test_microvm", "guest_ips", "NUMBER", "bandwidth_kb", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_bandwidth", "assert", "diff_pc", "TAG", "Now", "the", "test", "test_rx_rate_limiting", "fail", "shell", "FAILURES", "____________________", "test_rx_rate_limiting", "ubuntu_with_ssh", "____________________", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "test_rx_rate_limiting", "_check_rx_rate_limit_patch", "test_microvm", "guest_ips", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_rate_limit_patch", "_check_rx_bandwidth", "test_microvm", "guest_ips", "NUMBER", "bandwidth_kb", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_bandwidth", "assert", "diff_pc", "TAG", "E", "assert", "NUMBER", "TAG", "I", "ll", "check", "it", "out", "Have", "you", "update", "the", "branch", "before", "the", "push", "A", "tentative", "fix", "was", "put", "in", "yesterday", "NUMBER", "Closing", "this", "since", "we", "decided", "to", "allow", "partial", "writes", "for", "MMIO", "devices", "config", "space", "NUMBER", "Reason", "for", "This", "PR", "The", "current", "PR", "refactors", "arch", "aarch", "NUMBER", "src", "regs", "NUMBER", "rs", "and", "add", "change", "for", "a", "smoother", "path", "towards", "saving", "and", "restoring", "vcpus", "on", "aarch", "NUMBER", "Description", "of", "Changes", "See", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "raduiliescu", "sorry", "had", "some", "rust", "clippy", "issue", "NUMBER", "Had", "to", "force", "push", "again", "NUMBER", "sandreim", "please", "take", "a", "look", "again", "NUMBER", "Fixes", "NUMBER", "Fixed", "by", "NUMBER", "NUMBER", "Not", "completely", "do", "yet", "NUMBER", "For", "example", "src", "api_server", "src", "lib", "NUMBER", "rs", "test_bind_and_run", "src", "vmm", "src", "vmm_config", "vsock", "NUMBER", "rs", "TempSockFile", "this", "can", "be", "reworked", "to", "the", "same", "simple", "model", "NUMBER", "Hi", "shioyama", "NUMBER", "I", "ve", "reopened", "this", "as", "your", "PR", "didn", "t", "address", "all", "occurrences", "where", "we", "can", "apply", "this", "model", "NUMBER", "Let", "us", "know", "if", "you", "want", "to", "continue", "with", "these", "improvement", "NUMBER", "Hi", "acatangiu", "I", "would", "like", "to", "keep", "work", "on", "this", "issue", "but", "I", "have", "two", "question", "NUMBER", "Should", "I", "update", "doc", "test", "too", "LINK", "microvm", "firecracker", "blob", "master", "src", "micro_http", "src", "server", "NUMBER", "rs", "L", "NUMBER", "L", "NUMBER", "In", "my", "opinion", "TempFile", "should", "not", "be", "use", "in", "usage", "example", "so", "I", "was", "going", "to", "leave", "it", "as", "it", "be", "NUMBER", "NUMBER", "For", "src", "api_server", "src", "lib", "NUMBER", "rs", "test_bind_and_run", "current", "test", "works", "because", "static", "str", "implement", "Copy", "trait", "NUMBER", "When", "I", "replace", "the", "path_to_socket", "with", "TempFile", "path_to_socket", "be", "moved", "to", "closure", "but", "it", "be", "referred", "later", "by", "current", "thread", "to", "read", "and", "write", "to", "socket", "NUMBER", "moved", "LINK", "microvm", "firecracker", "blob", "master", "src", "api_server", "src", "lib", "NUMBER", "rs", "L", "NUMBER", "referenced", "LINK", "microvm", "firecracker", "blob", "master", "src", "api_server", "src", "lib", "NUMBER", "rs", "L", "NUMBER", "Do", "you", "have", "good", "idea", "to", "work", "around", "this", "issue", "Should", "I", "update", "doc", "test", "too", "It", "d", "be", "useful", "so", "doc", "test", "don", "t", "leave", "the", "unix", "sock", "hanging", "around", "when", "they", "re", "do", "NUMBER", "On", "the", "other", "hand", "add", "TempFile", "logic", "in", "doc", "examples", "will", "hurt", "readability", "so", "I", "think", "we", "can", "stick", "with", "the", "current", "doc", "examples", "NUMBER", "When", "I", "replace", "the", "path_to_socket", "with", "TempFile", "path_to_socket", "be", "moved", "to", "closure", "but", "it", "be", "referred", "later", "by", "current", "thread", "to", "read", "and", "write", "to", "socket", "NUMBER", "Indeed", "you", "need", "to", "have", "each", "thread", "owns", "its", "object", "NUMBER", "You", "can", "do", "so", "by", "work", "with", "owned", "String", "s", "instead", "of", "str", "references", "NUMBER", "Something", "like", "rust", "let", "mut", "tmp_socket", "TempFile", "new", "NUMBER", "unwrap", "tmp_socket", "NUMBER", "remove", "NUMBER", "unwrap", "let", "path_to_socket", "tmp_socket", "NUMBER", "as_path", "NUMBER", "to_str", "NUMBER", "unwrap", "NUMBER", "to_owned", "let", "api_thread_path_to_socket", "path_to_socket", "NUMBER", "clone", "It", "d", "be", "useful", "so", "doc", "test", "don", "t", "leave", "the", "unix", "sock", "hanging", "around", "when", "they", "re", "do", "NUMBER", "On", "the", "other", "hand", "add", "TempFile", "logic", "in", "doc", "examples", "will", "hurt", "readability", "so", "I", "think", "we", "can", "stick", "with", "the", "current", "doc", "examples", "NUMBER", "Okay", "rust", "let", "mut", "tmp_socket", "TempFile", "new", "NUMBER", "unwrap", "tmp_socket", "NUMBER", "remove", "NUMBER", "unwrap", "let", "path_to_socket", "tmp_socket", "NUMBER", "as_path", "NUMBER", "to_str", "NUMBER", "unwrap", "NUMBER", "to_owned", "let", "api_thread_path_to_socket", "path_to_socket", "NUMBER", "clone", "Thanks", "for", "the", "example", "NUMBER", "I", "ll", "create", "another", "PR", "after", "I", "update", "src", "vmm", "src", "vmm_config", "vsock", "NUMBER", "rs", "TempSockFile", "NUMBER", "Ideally", "do", "all", "of", "them", "in", "a", "single", "PR", "different", "commit", "NUMBER", "Multiple", "PRs", "just", "add", "extra", "load", "on", "reviewer", "CI", "and", "the", "merge", "process", "NUMBER", "Ideally", "do", "all", "of", "them", "in", "a", "single", "PR", "different", "commit", "NUMBER", "Multiple", "PRs", "just", "add", "extra", "load", "on", "reviewer", "CI", "and", "the", "merge", "process", "NUMBER", "Sorry", "about", "that", "NUMBER", "I", "ll", "create", "single", "PR", "from", "next", "fix", "NUMBER", "Why", "do", "we", "need", "to", "serialize", "VcpuResponse", "Fixed", "by", "NUMBER", "Fixed", "by", "NUMBER", "Reason", "for", "This", "PR", "Make", "the", "network", "setup", "example", "documentation", "a", "little", "bit", "more", "useful", "by", "add", "instructions", "for", "use", "a", "config", "file", "and", "support", "DNS", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "We", "should", "definitely", "check", "if", "we", "can", "relax", "the", "restrictions", "on", "the", "Versionize", "interface", "so", "that", "clone", "be", "not", "needed", "NUMBER", "At", "the", "same", "time", "having", "FamStruct", "clone", "implement", "in", "such", "a", "way", "that", "it", "be", "only", "cloning", "the", "number", "of", "entries", "and", "the", "actual", "entries", "doesn", "t", "seem", "correct", "to", "me", "NUMBER", "Can", "you", "also", "open", "an", "issue", "in", "vmm", "sys", "util", "so", "that", "we", "can", "fix", "it", "or", "remove", "the", "autogenerated", "clone", "Need", "also", "to", "modify", "the", "MMDS", "documentation", "and", "mention", "that", "The", "ipv", "NUMBER", "_address", "value", "must", "be", "a", "valid", "link", "local", "IPv", "NUMBER", "address", "NUMBER", "Need", "also", "to", "modify", "the", "MMDS", "documentation", "and", "mention", "that", "The", "ipv", "NUMBER", "_address", "value", "must", "be", "a", "valid", "link", "local", "IPv", "NUMBER", "address", "NUMBER", "Related", "to", "this", "aspect", "I", "ve", "opened", "NUMBER", "with", "MMDS", "user", "guide", "and", "MMDS", "configuration", "API", "complete", "description", "inside", "the", "firecracker", "swagger", "file", "NUMBER", "I", "guess", "we", "can", "have", "this", "PR", "merge", "without", "documentation", "and", "keep", "track", "of", "the", "MMDS", "docs", "in", "that", "opened", "PR", "NUMBER", "I", "ve", "opened", "an", "issue", "also", "for", "the", "MMDS", "docs", "update", "NUMBER", "NUMBER", "Ok", "NUMBER", "Is", "fine", "like", "that", "NUMBER", "Need", "also", "to", "modify", "the", "MMDS", "documentation", "and", "mention", "that", "The", "ipv", "NUMBER", "_address", "value", "must", "be", "a", "valid", "link", "local", "IPv", "NUMBER", "address", "NUMBER", "Related", "to", "this", "aspect", "I", "ve", "opened", "NUMBER", "with", "MMDS", "user", "guide", "and", "MMDS", "configuration", "API", "complete", "description", "inside", "the", "firecracker", "swagger", "file", "NUMBER", "I", "guess", "we", "can", "have", "this", "PR", "merge", "without", "documentation", "and", "keep", "track", "of", "the", "MMDS", "docs", "in", "that", "opened", "PR", "NUMBER", "I", "ve", "opened", "an", "issue", "also", "for", "the", "MMDS", "docs", "update", "NUMBER", "NUMBER", "Any", "reason", "why", "we", "should", "merge", "this", "PR", "without", "the", "documentation", "Adding", "documentation", "be", "one", "of", "the", "PR", "s", "check", "list", "NUMBER", "Just", "wondering", "why", "we", "should", "take", "an", "exception", "for", "this", "one", "NUMBER", "Ideally", "we", "should", "close", "firecracker", "issue", "when", "the", "fix", "code", "reaches", "firecracker", "NUMBER", "For", "this", "fix", "to", "go", "in", "I", "believe", "we", "still", "need", "to", "publish", "a", "new", "version", "of", "LINK", "microvm", "versionize_derive", "right", "Make", "sure", "all", "the", "structures", "use", "for", "saving", "restoring", "state", "be", "versionized", "NUMBER", "This", "be", "a", "prerequisite", "for", "NUMBER", "Hi", "alicelambda", "This", "issue", "be", "available", "NUMBER", "Should", "I", "assign", "you", "to", "it", "MacAddr", "be", "a", "simple", "wrapper", "and", "a", "utility", "use", "by", "multiple", "crates", "NUMBER", "Right", "now", "this", "be", "in", "dumbo", "and", "dumbo", "be", "use", "in", "a", "dependency", "in", "the", "following", "crates", "vmm", "for", "MacAddr", "devices", "for", "MacAddr", "and", "for", "the", "MMDS", "network", "stack", "utils", "for", "MacAddr", "By", "moving", "MacAddr", "to", "utils", "we", "make", "utils", "a", "tinier", "crate", "NUMBER", "We", "can", "also", "push", "this", "code", "to", "rust", "vmm", "vmm", "sy", "util", "NUMBER", "iulianbarbu", "this", "be", "a", "sane", "separation", "of", "concerns", "NUMBER", "Do", "you", "want", "to", "create", "issue", "to", "describe", "what", "needs", "to", "be", "do", "Your", "issue", "explains", "it", "pretty", "well", "already", "NUMBER", "I", "had", "an", "attempt", "at", "this", "as", "a", "first", "issue", "here", "NUMBER", "LINK", "microvm", "firecracker", "pull", "NUMBER", "iulianbarbu", "if", "the", "issue", "you", "mention", "above", "be", "still", "open", "I", "would", "be", "interested", "to", "have", "an", "attempt", "at", "them", "NUMBER", "Right", "now", "the", "MMDS", "functionality", "be", "backed", "into", "the", "virtio", "net", "implementation", "NUMBER", "We", "should", "find", "a", "way", "of", "separating", "this", "or", "make", "it", "pluggable", "so", "that", "we", "can", "consume", "Virtio", "Network", "from", "rust", "vmm", "when", "it", "be", "going", "to", "be", "available", "NUMBER", "Hmm", "why", "do", "you", "say", "they", "re", "opposite", "I", "think", "of", "them", "as", "separate", "issue", "NUMBER", "This", "be", "relate", "to", "the", "VirtioNetwork", "interface", "and", "how", "we", "make", "the", "interface", "implementation", "not", "depend", "on", "Mmds", "NUMBER", "This", "issue", "doesn", "t", "really", "care", "where", "the", "MmdsNetworkStack", "be", "defined", "NUMBER", "It", "be", "just", "about", "separating", "the", "core", "functionality", "of", "the", "virtio", "network", "device", "from", "mmds", "in", "such", "a", "way", "that", "mmds", "can", "easily", "become", "a", "feature", "for", "example", "NUMBER", "Reason", "for", "This", "PR", "For", "the", "moment", "there", "be", "no", "information", "about", "Firecracker", "network", "performance", "like", "what", "be", "the", "throughput", "that", "the", "emulation", "layer", "be", "able", "to", "achieve", "or", "how", "much", "latency", "it", "add", "NUMBER", "Description", "of", "Changes", "Add", "a", "page", "with", "info", "about", "Firecracker", "network", "performance", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Is", "this", "performance", "NUMBER", "md", "file", "gonna", "be", "an", "entry", "point", "for", "data", "about", "performance", "in", "general", "relate", "to", "firecracker", "At", "the", "moment", "it", "contains", "data", "only", "about", "the", "network", "performance", "hence", "I", "would", "rename", "it", "network", "performance", "NUMBER", "md", "NUMBER", "My", "intention", "was", "to", "make", "it", "generic", "to", "all", "firecracker", "performance", "items", "bootup", "time", "network", "block", "device", "NUMBER", "But", "indeed", "the", "first", "phrase", "in", "the", "doc", "be", "misleading", "NUMBER", "Is", "this", "performance", "NUMBER", "md", "file", "gonna", "be", "an", "entry", "point", "for", "data", "about", "performance", "in", "general", "relate", "to", "firecracker", "At", "the", "moment", "it", "contains", "data", "only", "about", "the", "network", "performance", "hence", "I", "would", "rename", "it", "network", "performance", "NUMBER", "md", "NUMBER", "My", "intention", "was", "to", "make", "it", "generic", "to", "all", "firecracker", "performance", "items", "bootup", "time", "network", "block", "device", "NUMBER", "But", "indeed", "the", "first", "phrase", "in", "the", "doc", "be", "misleading", "NUMBER", "Some", "of", "that", "be", "also", "present", "in", "SPECIFICATION", "NUMBER", "md", "LINK", "microvm", "firecracker", "blob", "master", "SPECIFICATION", "NUMBER", "md", "NUMBER", "Does", "it", "make", "sense", "to", "improve", "that", "file", "instead", "of", "creating", "a", "new", "one", "Is", "this", "performance", "NUMBER", "md", "file", "gonna", "be", "an", "entry", "point", "for", "data", "about", "performance", "in", "general", "relate", "to", "firecracker", "At", "the", "moment", "it", "contains", "data", "only", "about", "the", "network", "performance", "hence", "I", "would", "rename", "it", "network", "performance", "NUMBER", "md", "NUMBER", "My", "intention", "was", "to", "make", "it", "generic", "to", "all", "firecracker", "performance", "items", "bootup", "time", "network", "block", "device", "NUMBER", "But", "indeed", "the", "first", "phrase", "in", "the", "doc", "be", "misleading", "NUMBER", "Some", "of", "that", "be", "also", "present", "in", "SPECIFICATION", "NUMBER", "md", "LINK", "microvm", "firecracker", "blob", "master", "SPECIFICATION", "NUMBER", "md", "NUMBER", "Does", "it", "make", "sense", "to", "improve", "that", "file", "instead", "of", "creating", "a", "new", "one", "Thanks", "for", "the", "suggestion", "I", "will", "update", "that", "file", "with", "a", "summary", "NUMBER", "For", "performance", "test", "be", "important", "to", "mention", "the", "environment", "and", "conditions", "where", "that", "numbers", "were", "taken", "NUMBER", "This", "way", "customers", "can", "build", "their", "own", "benchmarks", "and", "replicate", "NUMBER", "Not", "sure", "SPECIFICATION", "NUMBER", "md", "if", "that", "be", "the", "place", "to", "mention", "it", "NUMBER", "I", "suggest", "to", "add", "in", "SPECIFICATION", "NUMBER", "md", "something", "like", "_", "NUMBER", "Gbps", "when", "use", "NUMBER", "emulation", "thread", "cpu", "and", "NUMBER", "ms", "of", "add", "latency_", "and", "a", "link", "to", "this", "file", "with", "more", "details", "which", "I", "will", "rename", "as", "network", "performance", "NUMBER", "How", "do", "this", "sounds", "Some", "of", "that", "be", "also", "present", "in", "SPECIFICATION", "NUMBER", "md", "LINK", "microvm", "firecracker", "blob", "master", "SPECIFICATION", "NUMBER", "md", "NUMBER", "Does", "it", "make", "sense", "to", "improve", "that", "file", "instead", "of", "creating", "a", "new", "one", "Thanks", "for", "the", "suggestion", "I", "will", "update", "that", "file", "with", "a", "summary", "NUMBER", "For", "performance", "test", "be", "important", "to", "mention", "the", "environment", "and", "conditions", "where", "that", "numbers", "were", "taken", "NUMBER", "This", "way", "customers", "can", "build", "their", "own", "benchmarks", "and", "replicate", "NUMBER", "Not", "sure", "SPECIFICATION", "NUMBER", "md", "if", "that", "be", "the", "place", "to", "mention", "it", "NUMBER", "I", "suggest", "to", "add", "in", "SPECIFICATION", "NUMBER", "md", "something", "like", "_", "NUMBER", "Gbps", "when", "use", "NUMBER", "emulation", "thread", "cpu", "and", "NUMBER", "ms", "of", "add", "latency_", "and", "a", "link", "to", "this", "file", "with", "more", "details", "which", "I", "will", "rename", "as", "network", "performance", "NUMBER", "How", "do", "this", "sounds", "Sounds", "good", "Regarding", "the", "statement", "above", "can", "we", "reach", "NUMBER", "emulation", "thread", "CPU", "usage", "even", "with", "small", "VMs", "NUMBER", "NUMBER", "cores", "Note", "that", "since", "we", "advise", "all", "users", "to", "disable", "hyperthreading", "in", "production", "we", "should", "maintain", "the", "same", "frame", "of", "reference", "in", "our", "performance", "test", "report", "NUMBER", "Some", "of", "that", "be", "also", "present", "in", "SPECIFICATION", "NUMBER", "md", "LINK", "microvm", "firecracker", "blob", "master", "SPECIFICATION", "NUMBER", "md", "NUMBER", "Does", "it", "make", "sense", "to", "improve", "that", "file", "instead", "of", "creating", "a", "new", "one", "Thanks", "for", "the", "suggestion", "I", "will", "update", "that", "file", "with", "a", "summary", "NUMBER", "For", "performance", "test", "be", "important", "to", "mention", "the", "environment", "and", "conditions", "where", "that", "numbers", "were", "taken", "NUMBER", "This", "way", "customers", "can", "build", "their", "own", "benchmarks", "and", "replicate", "NUMBER", "Not", "sure", "SPECIFICATION", "NUMBER", "md", "if", "that", "be", "the", "place", "to", "mention", "it", "NUMBER", "I", "suggest", "to", "add", "in", "SPECIFICATION", "NUMBER", "md", "something", "like", "_", "NUMBER", "Gbps", "when", "use", "NUMBER", "emulation", "thread", "cpu", "and", "NUMBER", "ms", "of", "add", "latency_", "and", "a", "link", "to", "this", "file", "with", "more", "details", "which", "I", "will", "rename", "as", "network", "performance", "NUMBER", "How", "do", "this", "sounds", "Sounds", "good", "Regarding", "the", "statement", "above", "can", "we", "reach", "NUMBER", "emulation", "thread", "CPU", "usage", "even", "with", "small", "VMs", "NUMBER", "NUMBER", "cores", "Note", "that", "since", "we", "advise", "all", "users", "to", "disable", "hyperthreading", "in", "production", "we", "should", "maintain", "the", "same", "frame", "of", "reference", "in", "our", "performance", "test", "report", "NUMBER", "We", "can", "t", "get", "NUMBER", "utilization", "of", "emulation", "thread", "use", "NUMBER", "cores", "NUMBER", "You", "need", "at", "least", "NUMBER", "cores", "to", "get", "NUMBER", "utilization", "NUMBER", "Signed", "off", "by", "Ioana", "Chirca", "TAG", "Reason", "for", "This", "PR", "Being", "able", "to", "serialize", "the", "RateLimiter", "be", "a", "requirement", "for", "serializing", "the", "Block", "NUMBER", "and", "Net", "NUMBER", "devices", "NUMBER", "Description", "of", "Changes", "Implemented", "the", "Persist", "trait", "for", "the", "RateLimiter", "and", "the", "TokenBucket", "structs", "and", "derived", "the", "Versionize", "trait", "for", "them", "NUMBER", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Np", "new", "add", "unsafe", "code", "NUMBER", "x", "No", "API", "change", "NUMBER", "x", "No", "user", "facing", "change", "NUMBER", "aghecenco", "acatangiu", "I", "ve", "address", "your", "comments", "PTAL", "Right", "NUMBER", "last_update", "needs", "to", "be", "renamed", "a", "bit", "though", "because", "it", "will", "tell", "us", "the", "time", "elapse", "NUMBER", "Reason", "for", "This", "PR", "NUMBER", "Description", "of", "Changes", "Added", "these", "new", "strings", "to", "the", "codebase", "Cannot", "start", "HTTP", "server", "Cannot", "update", "send", "VMM", "fd", "VMM", "disconnected", "Cannot", "convert", "from", "UTF", "NUMBER", "No", "field", "key", "Field", "value", "not", "a", "string", "Time", "conversion", "overflow", "Failed", "to", "clone", "API", "event", "FD", "EventManager", "exiting", "Poisoned", "subscriber", "lock", "Poisoned", "VMM", "lock", "Unexpected", "VirtioDevice", "type", "IRQ", "chip", "not", "set", "vCPU", "already", "start", "Poisoned", "legacy", "serial", "lock", "Failed", "to", "parse", "version", "Failed", "to", "parse", "ident", "Failed", "to", "parse", "array", "length", "I", "did", "not", "update", "unwrap", "s", "in", "test", "or", "example", "code", "change", "exist", "expect", "s", "or", "update", "unwrap", "s", "where", "the", "comments", "context", "stated", "it", "was", "safe", "NUMBER", "If", "this", "_is_", "desirable", "please", "say", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "iulianbarbu", "that", "s", "fine", "I", "m", "new", "to", "Firecracker", "so", "I", "pick", "up", "this", "issue", "as", "it", "forces", "me", "to", "look", "around", "a", "nice", "varied", "selection", "of", "the", "code", "base", "but", "that", "obviously", "means", "that", "I", "don", "t", "understand", "some", "of", "the", "context", "surrounding", "the", "expect", "s", "I", "m", "happy", "to", "change", "any", "of", "it", "as", "it", "s", "a", "great", "way", "to", "learn", "NUMBER", "In", "aarch", "NUMBER", "it", "be", "fail", "due", "to", "this", "error", "E", "NUMBER", "temporary", "value", "drop", "while", "borrowed", "src", "vmm", "src", "device_manager", "mmio", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "let", "int_evt", "serial", "________________________", "NUMBER", "NUMBER", "lock", "NUMBER", "NUMBER", "expect", "Poisoned", "legacy", "serial", "lock", "__________________________________________________", "creates", "a", "temporary", "which", "be", "freed", "while", "still", "in", "use", "NUMBER", "NUMBER", "interrupt_evt", "temporary", "value", "be", "freed", "at", "the", "end", "of", "this", "statement", "NUMBER", "vm", "NUMBER", "register_irqfd", "int_evt", "self", "NUMBER", "irq", "borrow", "later", "use", "here", "note", "consider", "use", "a", "let", "binding", "to", "create", "a", "longer", "lived", "value", "error", "aborting", "due", "to", "previous", "error", "It", "s", "simple", "to", "change", "but", "do", "anyone", "know", "why", "this", "works", "on", "x", "NUMBER", "_", "NUMBER", "This", "be", "a", "lifetime", "issue", "so", "I", "would", "have", "thought", "not", "architecture", "dependent", "Or", "be", "optimisers", "in", "the", "different", "compiler", "backends", "re", "ordering", "the", "code", "differently", "In", "aarch", "NUMBER", "it", "be", "fail", "due", "to", "this", "error", "E", "NUMBER", "temporary", "value", "drop", "while", "borrowed", "src", "vmm", "src", "device_manager", "mmio", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "let", "int_evt", "serial", "________________________", "NUMBER", "NUMBER", "lock", "NUMBER", "NUMBER", "expect", "Poisoned", "legacy", "serial", "lock", "__________________________________________________", "creates", "a", "temporary", "which", "be", "freed", "while", "still", "in", "use", "NUMBER", "NUMBER", "interrupt_evt", "temporary", "value", "be", "freed", "at", "the", "end", "of", "this", "statement", "NUMBER", "vm", "NUMBER", "register_irqfd", "int_evt", "self", "NUMBER", "irq", "borrow", "later", "use", "here", "note", "consider", "use", "a", "let", "binding", "to", "create", "a", "longer", "lived", "value", "error", "aborting", "due", "to", "previous", "error", "It", "s", "simple", "to", "change", "but", "do", "anyone", "know", "why", "this", "works", "on", "x", "NUMBER", "_", "NUMBER", "This", "be", "a", "lifetime", "issue", "so", "I", "would", "have", "thought", "not", "architecture", "dependent", "Or", "be", "optimisers", "in", "the", "different", "compiler", "backends", "re", "ordering", "the", "code", "differently", "The", "function", "where", "the", "error", "takes", "place", "i", "NUMBER", "e", "NUMBER", "register_mmio_serial", "be", "aarch", "NUMBER", "labeled", "it", "be", "not", "compiled", "on", "x", "NUMBER", "_", "NUMBER", "Technically", "these", "constitute", "user", "facing", "change", "but", "they", "don", "t", "change", "the", "API", "so", "should", "there", "be", "an", "entry", "in", "CHANGELOG", "NUMBER", "md", "The", "x", "NUMBER", "_", "NUMBER", "CI", "test", "be", "fail", "with", "this", "FAILED", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "test_rx_rate_limiting", "ubuntu_with_ssh", "NUMBER", "FAILURES", "____________________", "test_rx_rate_limiting", "ubuntu_with_ssh", "____________________", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "test_rx_rate_limiting", "_check_rx_rate_limit_patch", "test_microvm", "guest_ips", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_rate_limit_patch", "_check_rx_bandwidth", "test_microvm", "guest_ips", "NUMBER", "bandwidth_kb", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_bandwidth", "assert", "diff_pc", "TAG", "The", "x", "NUMBER", "_", "NUMBER", "CI", "test", "be", "fail", "with", "this", "FAILED", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "test_rx_rate_limiting", "ubuntu_with_ssh", "NUMBER", "FAILURES", "____________________", "test_rx_rate_limiting", "ubuntu_with_ssh", "____________________", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "test_rx_rate_limiting", "_check_rx_rate_limit_patch", "test_microvm", "guest_ips", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_rate_limit_patch", "_check_rx_bandwidth", "test_microvm", "guest_ips", "NUMBER", "bandwidth_kb", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "NUMBER", "in", "_check_rx_bandwidth", "assert", "diff_pc", "TAG", "E", "assert", "NUMBER", "TAG", "But", "it", "be", "passing", "on", "my", "machine", "and", "aarch", "NUMBER", "NUMBER", "tool", "devtool", "test", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "test_rx_rate_limiting", "Firecracker", "devtool", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "Firecracker", "devtool", "Starting", "test", "run", "NUMBER", "test", "session", "starts", "platform", "linux", "Python", "NUMBER", "pytest", "NUMBER", "py", "NUMBER", "pluggy", "NUMBER", "cachedir", "NUMBER", "build", "pytest_cache", "rootdir", "firecracker", "test", "inifile", "pytest", "NUMBER", "ini", "plugins", "timeout", "NUMBER", "timeout", "NUMBER", "s", "timeout", "method", "signal", "timeout", "func_only", "False", "collected", "NUMBER", "item", "unsafe", "NUMBER", "test", "NUMBER", "worker", "s", "PASSED", "integration_tests", "functional", "test_rate_limiter", "NUMBER", "py", "test_rx_rate_limiting", "ubuntu_with_ssh", "NUMBER", "pass", "in", "NUMBER", "s", "I", "can", "t", "see", "how", "my", "change", "could", "have", "affected", "this", "so", "do", "anyone", "have", "any", "clues", "on", "how", "to", "fix", "it", "It", "be", "a", "bug", "on", "our", "side", "NUMBER", "sorry", "for", "that", "NUMBER", "Changes", "look", "good", "please", "sign", "your", "commit", "git", "commit", "s", "amend", "and", "update", "the", "commit", "message", "to", "follow", "the", "git", "NUMBER", "NUMBER", "rule", "LINK", "s", "with", "the", "NUMBER", "NUMBER", "rule", "NUMBER", "Done", "NUMBER", "Great", "Please", "also", "rebase", "on", "top", "of", "latest", "master", "git", "pull", "upstream", "master", "rebase", "and", "solve", "conflict", "NUMBER", "Will", "this", "help", "in", "be", "able", "to", "attach", "block", "devices", "to", "a", "run", "Firecracker", "I", "be", "trying", "to", "post", "a", "new", "version", "of", "vmm", "sys", "util", "soon", "ish", "in", "a", "couple", "of", "days", "because", "there", "be", "some", "derives", "needed", "by", "vmm", "epoll", "see", "PR", "LINK", "vmm", "vmm", "sys", "util", "pull", "NUMBER", "NUMBER", "Can", "we", "hold", "off", "to", "this", "switch", "before", "the", "new", "version", "be", "publish", "Signed", "off", "by", "Anish", "Shah", "TAG", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Description", "of", "Changes", "Introduced", "two", "static", "method", "to", "Argument", "struct", "NUMBER", "value_argument", "returns", "an", "argument", "that", "can", "take", "user", "value", "NUMBER", "flag_argument", "returns", "a", "flag", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Thanks", "lauralt", "for", "trying", "out", "NUMBER", "I", "had", "all", "these", "same", "thoughts", "when", "I", "tried", "the", "trait", "approach", "NUMBER", "I", "think", "to", "do", "this", "correctly", "we", "have", "to", "rethink", "designing", "arg_parse", "NUMBER", "rs", "NUMBER", "I", "don", "t", "feel", "this", "be", "a", "good", "first", "issue", "for", "me", "NUMBER", "I", "will", "try", "to", "take", "up", "some", "other", "issue", "NUMBER", "Sorry", "for", "abandoning", "this", "NUMBER", "AnishShah", "no", "problem", "at", "all", "NUMBER", "Let", "us", "know", "if", "you", "need", "help", "in", "selecting", "the", "next", "issue", "NUMBER", "I", "was", "a", "bit", "rushing", "when", "I", "add", "the", "label", "Good", "First", "Issue", "on", "this", "one", "and", "I", "should", "ve", "double", "check", "NUMBER", "Sorry", "NUMBER", "MacAddr", "be", "just", "NUMBER", "bytes", "and", "should", "qualify", "as", "a", "small", "structure", "NUMBER", "For", "small", "structures", "copy", "vs", "reference", "becomes", "a", "discussion", "on", "code", "readability", "rather", "than", "performance", "NUMBER", "In", "some", "synthetic", "benchmarks", "pass", "by", "copy", "outperforms", "pass", "by", "reference", "NUMBER", "When", "you", "use", "a", "reference", "you", "use", "NUMBER", "bytes", "irrespective", "of", "the", "size", "of", "the", "structure", "and", "since", "this", "one", "only", "has", "NUMBER", "bytes", "copy", "be", "actually", "saving", "more", "space", "NUMBER", "I", "don", "t", "think", "this", "change", "be", "necessary", "NUMBER", "Benchmarks", "available", "here", "LINK", "small", "rust", "structs", "be", "pass", "by", "copy", "or", "by", "borrow", "Just", "a", "tiny", "clarification", "kcov", "report", "the", "coverage", "for", "all", "the", "test", "but", "the", "problem", "be", "that", "the", "report", "that", "calculates", "the", "coverage", "be", "wrong", "without", "having", "the", "test", "section", "excluded", "because", "it", "be", "counting", "the", "test", "line", "as", "code", "lines", "as", "well", "NUMBER", "Would", "this", "work", "An", "additional", "test", "in", "the", "test_coverage", "module", "that", "diffs", "the", "list", "of", "file", "containing", "the", "cfg", "test", "attribute", "with", "the", "list", "of", "file", "containing", "the", "string", "mod", "test", "NUMBER", "def", "test_ensure_mod_tests", "Fail", "if", "mod_tests", "hasn", "t", "be", "defined", "as", "the", "test", "module", "name", "NUMBER", "List", "all", "source", "file", "containing", "rust", "test", "attribute", "NUMBER", "List", "all", "file", "containing", "string", "mod", "test", "NUMBER", "Diff", "the", "two", "lists", "NUMBER", "Diff", "returns", "zero", "if", "file", "lists", "match", "non", "zero", "if", "different", "NUMBER", "Redirect", "file", "diff", "list", "to", "stderr", "NUMBER", "cmd", "bin", "bash", "c", "diff", "TAG", "NUMBER", "Giving", "unsafe", "NUMBER", "test", "NUMBER", "worker", "s", "FAILED", "integration_tests", "build", "test_coverage", "NUMBER", "py", "test_ensure_mod_tests", "FAILURES", "____________________________________________________________________________________", "test_ensure_mod_tests", "____________________________________________________________________________________", "integration_tests", "build", "test_coverage", "NUMBER", "py", "NUMBER", "in", "test_ensure_mod_tests", "stdout", "PIPE", "usr", "lib", "python", "NUMBER", "subprocess", "NUMBER", "py", "NUMBER", "in", "run", "output", "stdout", "stderr", "stderr", "E", "subprocess", "NUMBER", "CalledProcessError", "Command", "bin", "bash", "c", "diff", "TAG", "NUMBER", "returned", "non", "zero", "exit", "status", "NUMBER", "Captured", "stderr", "call", "NUMBER", "NUMBER", "d", "NUMBER", "TAG", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Description", "of", "Changes", "Changes", "in", "arg_parse", "NUMBER", "rs", "to", "support", "default", "value", "for", "boolean", "argument", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Hey", "AnishShah", "NUMBER", "The", "issue", "description", "was", "a", "bit", "fuzzy", "sorry", "for", "that", "NUMBER", "I", "will", "shortly", "update", "it", "so", "that", "it", "makes", "more", "sense", "and", "it", "gives", "some", "hints", "about", "how", "this", "can", "be", "implement", "NUMBER", "As", "lauralt", "said", "it", "doesn", "t", "make", "a", "lot", "of", "sense", "to", "allow", "to", "specify", "a", "default", "other", "than", "false", "for", "the", "argument", "that", "don", "t", "take", "a", "value", "because", "if", "the", "default", "value", "be", "true", "there", "be", "no", "way", "for", "users", "to", "change", "that", "default", "NUMBER", "The", "presence", "of", "a", "flag", "means", "that", "its", "value", "be", "true", "the", "absence", "of", "the", "flag", "should", "mean", "that", "its", "value", "be", "false", "NUMBER", "How", "this", "can", "actually", "be", "implement", "be", "a", "bit", "more", "complicated", "than", "I", "initially", "anticipated", "NUMBER", "We", "need", "to", "think", "about", "a", "better", "way", "to", "have", "defaults", "as", "false", "NUMBER", "I", "will", "also", "sync", "with", "lauralt", "and", "we", "will", "think", "about", "a", "solution", "NUMBER", "Please", "let", "us", "know", "if", "you", "have", "any", "other", "ideas", "about", "how", "to", "map", "this", "in", "the", "arg", "parser", "NUMBER", "Issue", "update", "with", "some", "options", "LINK", "microvm", "firecracker", "issue", "NUMBER", "Thanks", "for", "the", "quick", "reply", "on", "this", "PR", "lauralt", "andreeaflorescu", "and", "acatangiu", "NUMBER", "I", "have", "made", "some", "change", "to", "value_as_bool", "fn", "NUMBER", "Let", "me", "know", "what", "do", "you", "think", "NUMBER", "Thanks", "lauralt", "NUMBER", "I", "can", "wait", "till", "we", "finalize", "a", "design", "NUMBER", "Closing", "this", "in", "favor", "of", "a", "new", "PR", "NUMBER", "Reason", "for", "This", "PR", "Added", "a", "new", "pub", "fn", "in", "the", "VMM", "runtime", "controller", "that", "retrieves", "the", "KVM", "dirty", "bitmap", "NUMBER", "Description", "of", "Changes", "NUMBER", "dirty", "bitmap", "fetching", "functionality", "in", "the", "vmm", "NUMBER", "support", "for", "enabling", "disabling", "dirty", "page", "track", "at", "runtime", "in", "the", "vmm", "NUMBER", "rustacean", "vmm", "integration", "test", "with", "a", "noisy", "guest", "This", "functionality", "can", "be", "add", "in", "rust", "vmm", "LINK", "vmm", "NUMBER", "The", "core", "component", "be", "already", "present", "in", "kvm", "ioctls", "and", "the", "rest", "be", "glue", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "I", "just", "add", "NUMBER", "comments", "for", "the", "moment", "NUMBER", "They", "be", "nit", "ish", "NUMBER", "I", "be", "not", "sure", "about", "the", "unit", "test", "NUMBER", "It", "s", "a", "lot", "of", "code", "that", "has", "to", "be", "add", "just", "for", "test", "one", "small", "thing", "NUMBER", "I", "have", "to", "spend", "some", "more", "time", "thinking", "about", "it", "NUMBER", "Indeed", "there", "be", "a", "pretty", "big", "quantity", "of", "code", "for", "one", "small", "thing", "in", "the", "same", "place", "NUMBER", "One", "idea", "that", "pops", "in", "mind", "would", "be", "to", "move", "the", "code", "that", "do", "the", "general", "setup", "of", "the", "vmm", "i", "NUMBER", "e", "impl", "Vmm", "create_guest_workload", "create_device_managers", "in", "a", "test", "folder", "inside", "the", "vmm", "crate", "NUMBER", "That", "way", "we", "hopefully", "make", "this", "setup", "code", "reusable", "from", "multiple", "unit", "test", "NUMBER", "WDYT", "src", "vmm", "test", "mod", "NUMBER", "rs", "pub", "fn", "setup", "Vmm", "src", "vmm", "src", "controller", "NUMBER", "rs", "Vmm", "setup", "let", "mut", "vmm_controller", "VmmController", "new", "VmResources", "default", "Arc", "new", "Mutex", "new", "vmm", "We", "discussed", "offline", "and", "agreed", "that", "this", "functionality", "and", "others", "like", "it", "be", "better", "test", "through", "Rust", "integ", "test", "NUMBER", "This", "PR", "be", "therefore", "blocked", "on", "creating", "adequate", "test", "NUMBER", "NUMBER", "Will", "rebase", "on", "top", "of", "NUMBER", "Blocked", "by", "LINK", "microvm", "firecracker", "issue", "NUMBER", "iulianbarbu", "ioanachirca", "feedback", "address", "approves", "lost", "please", "take", "another", "look", "I", "think", "we", "can", "improve", "the", "following", "in", "help", "content", "Display", "default", "values", "along", "with", "the", "description", "It", "will", "be", "a", "single", "line", "change", "in", "format_help", "in", "arg", "parser", "NUMBER", "Segregate", "mandatory", "and", "optional", "argument", "properly", "NUMBER", "Display", "sorted", "list", "in", "the", "current", "implementation", "each", "time", "I", "executed", "a", "help", "command", "list", "will", "be", "in", "a", "different", "order", "This", "be", "because", "we", "be", "use", "hashmap", "in", "arg", "parser", "NUMBER", "Constant", "alignment", "NUMBER", "Jailer", "v", "NUMBER", "exec", "file", "TAG", "File", "path", "to", "exec", "into", "NUMBER", "extra", "args", "TAG", "Arguments", "that", "will", "be", "pass", "verbatim", "to", "the", "exec", "file", "NUMBER", "id", "TAG", "Jail", "ID", "NUMBER", "daemonize", "Daemonize", "the", "jailer", "before", "exec", "by", "invoking", "setsid", "and", "redirecting", "the", "standard", "I", "O", "file", "descriptors", "to", "dev", "null", "NUMBER", "uid", "TAG", "The", "user", "identifier", "the", "jailer", "switches", "to", "after", "exec", "NUMBER", "gid", "TAG", "The", "group", "identifier", "the", "jailer", "switches", "to", "after", "exec", "NUMBER", "chroot", "base", "dir", "TAG", "The", "base", "folder", "where", "chroot", "jails", "be", "located", "NUMBER", "netns", "TAG", "Path", "to", "the", "network", "namespace", "this", "microVM", "should", "join", "NUMBER", "node", "TAG", "NUMA", "node", "to", "assign", "this", "microVM", "to", "NUMBER", "help", "Show", "the", "help", "message", "NUMBER", "Firecracker", "v", "NUMBER", "start", "time", "us", "TAG", "id", "TAG", "MicroVM", "unique", "identifier", "NUMBER", "seccomp", "level", "TAG", "Level", "of", "seccomp", "filtering", "that", "will", "be", "pass", "to", "executed", "path", "as", "argument", "NUMBER", "Level", "NUMBER", "No", "filtering", "NUMBER", "Level", "NUMBER", "Seccomp", "filtering", "by", "syscall", "number", "NUMBER", "Level", "NUMBER", "Seccomp", "filtering", "by", "syscall", "number", "and", "argument", "values", "NUMBER", "start", "time", "cpu", "us", "TAG", "no", "api", "Optional", "parameter", "which", "allows", "starting", "and", "use", "a", "microVM", "without", "an", "active", "API", "socket", "NUMBER", "api", "sock", "TAG", "Path", "to", "unix", "domain", "socket", "use", "by", "the", "API", "NUMBER", "help", "Show", "the", "help", "message", "NUMBER", "config", "file", "TAG", "Path", "to", "a", "file", "that", "contains", "the", "microVM", "configuration", "in", "JSON", "format", "NUMBER", "Hi", "everyone", "Taking", "a", "step", "back", "it", "seems", "a", "lot", "complexity", "stems", "from", "the", "multi", "step", "Firecracker", "configuration", "process", "NUMBER", "Is", "there", "any", "reason", "for", "devices", "memory", "mmds", "etc", "NUMBER", "to", "be", "configured", "via", "separate", "API", "calls", "at", "this", "point", "If", "the", "API", "only", "allow", "the", "one", "call", "configuration", "we", "talked", "about", "a", "while", "ago", "or", "to", "push", "things", "even", "further", "Firecracker", "be", "always", "start", "use", "a", "config", "file", "and", "only", "keep", "the", "API", "for", "runtime", "PATCHes", "etc", "quite", "a", "lot", "of", "logic", "gets", "eliminated", "and", "we", "get", "configuration", "information", "upfront", "NUMBER", "This", "be", "a", "breaking", "change", "but", "it", "seems", "worthwhile", "to", "seriously", "consider", "sooner", "rather", "than", "later", "NUMBER", "Also", "wanted", "to", "mention", "the", "VirtioDevice", "interface", "from", "rust", "vmm", "be", "still", "mostly", "based", "on", "the", "old", "crosvm", "Firecracker", "code", "so", "unfortunately", "it", "s", "unclear", "at", "this", "point", "how", "it", "will", "end", "up", "looking", "like", "NUMBER", "FWIW", "not", "immediately", "going", "back", "to", "tying", "device", "memory", "configuration", "to", "activation", "might", "be", "better", "in", "terms", "of", "keep", "options", "open", "NUMBER", "Right", "now", "the", "arg_parser", "only", "support", "custom", "default", "values", "for", "String", "values", "NUMBER", "Specifying", "a", "custom", "default", "values", "for", "bool", "argument", "also", "call", "flags", "doesn", "t", "make", "a", "lot", "of", "sense", "because", "when", "the", "flag", "be", "not", "pass", "as", "an", "argument", "it", "means", "that", "its", "value", "be", "false", "and", "when", "the", "flag", "be", "pass", "as", "an", "argument", "its", "value", "be", "true", "NUMBER", "Even", "though", "custom", "default", "values", "don", "t", "make", "a", "lot", "of", "sense", "for", "Value", "bool", "we", "should", "nevertheless", "have", "a", "default", "value", "for", "these", "types", "of", "argument", "and", "that", "default", "value", "should", "always", "be", "false", "NUMBER", "I", "couldn", "t", "really", "find", "a", "clean", "way", "for", "implement", "this", "so", "ideas", "be", "welcomed", "NUMBER", "One", "option", "that", "I", "was", "thinking", "about", "be", "to", "specify", "in", "the", "constructor", "of", "Argument", "the", "default", "value", "NUMBER", "Right", "now", "the", "constructor", "of", "Argument", "assumes", "that", "the", "type", "of", "the", "argument", "be", "flag", "because", "it", "specifies", "that", "takes_value", "false", "rust", "Argument", "name", "required", "false", "requires", "None", "takes_value", "false", "default_value", "None", "help", "None", "user_value", "None", "Since", "this", "be", "the", "case", "we", "could", "also", "set", "the", "default_value", "to", "Some", "false", "NUMBER", "When", "the", "takes_value", "function", "be", "call", "with", "true", "we", "can", "reset", "the", "default_value", "to", "None", "in", "case", "that", "value", "was", "Some", "false", "NUMBER", "This", "be", "a", "bit", "a", "not", "very", "nice", "workaround", "and", "be", "also", "a", "bit", "weird", "because", "the", "order", "in", "which", "you", "call", "takes_value", "and", "default_value", "matters", "NUMBER", "Another", "option", "be", "to", "implement", "default_value", "for", "both", "Value", "String", "and", "Value", "bool", "but", "for", "Value", "bool", "only", "allow", "the", "default", "to", "be", "false", "NUMBER", "From", "these", "two", "options", "I", "think", "I", "prefer", "the", "second", "one", "because", "it", "be", "a", "less", "weird", "workaround", "As", "I", "said", "both", "options", "be", "pretty", "meh", "NUMBER", "Other", "suggestions", "be", "welcomed", "NUMBER", "I", "would", "like", "to", "take", "a", "stab", "at", "this", "NUMBER", "I", "really", "like", "the", "approach", "acatangiu", "propose", "NUMBER", "I", "wouldn", "t", "change", "the", "enum", "variant", "from", "Value", "Bool", "bool", "to", "Value", "Bool", "even", "though", "it", "makes", "the", "code", "a", "bit", "simpler", "because", "it", "be", "also", "make", "it", "be", "a", "bit", "weird", "NUMBER", "We", "would", "end", "up", "with", "a", "Value", "type", "with", "no", "actual", "value", "NUMBER", "Present", "and", "NotPresent", "be", "the", "Option", "TAG", "in", "Rust", "so", "I", "don", "t", "think", "we", "should", "redefine", "that", "NUMBER", "I", "would", "stick", "with", "Option", "TAG", "NUMBER", "I", "also", "think", "that", "be", "makes", "sense", "for", "value_as_bool", "to", "still", "return", "an", "None", "for", "the", "case", "where", "the", "argument", "be", "invalid", "NUMBER", "Here", "be", "an", "use", "case", "where", "returning", "None", "for", "invalid", "flags", "makes", "sense", "you", "want", "to", "see", "if", "the", "flag", "no", "api", "was", "pass", "NUMBER", "instead", "of", "write", "no", "api", "you", "write", "noapi", "in", "the", "code", "by", "mistake", "NUMBER", "the", "behaviour", "I", "would", "expect", "be", "for", "the", "program", "to", "crash", "because", "I", "have", "a", "programming", "error", "in", "my", "code", "and", "I", "write", "noapi", "instead", "of", "no", "api", "but", "instead", "value_as_bool", "returns", "false", "NUMBER", "This", "wrong", "behaviour", "be", "not", "easy", "catch", "NUMBER", "Instead", "of", "my", "buggy", "program", "to", "crash", "fast", "it", "misbehaves", "NUMBER", "Value", "as_bool", "can", "return", "just", "a", "bool", "because", "I", "don", "t", "think", "there", "be", "a", "better", "option", "to", "map", "the", "default", "value", "be", "false", "NUMBER", "acatangiu", "I", "don", "t", "see", "how", "use", "ArgState", "or", "ArgValue", "in", "Argument", "struct", "be", "useful", "here", "NUMBER", "default_value", "will", "be", "PresentWithValue", "Present", "or", "NotPresent", "depedending", "on", "takes_value", "field", "NUMBER", "This", "be", "a", "problem", "similar", "to", "what", "andreeaflorescu", "mention", "in", "the", "comment", "above", "LINK", "microvm", "firecracker", "issue", "NUMBER", "issue", "NUMBER", "NUMBER", "It", "be", "weird", "because", "the", "order", "in", "which", "takes_value", "or", "default_value", "be", "call", "will", "matter", "NUMBER", "I", "have", "another", "suggestion", "that", "be", "to", "explicitly", "differentiate", "between", "an", "Argument", "and", "a", "Flag", "trait", "builder", "fn", "default_value", "NUMBER", "NUMBER", "fn", "user_value", "NUMBER", "NUMBER", "fn", "help", "NUMBER", "NUMBER", "fn", "required", "NUMBER", "NUMBER", "fn", "requires", "NUMBER", "NUMBER", "impl", "builder", "for", "Argument", "impl", "builder", "for", "Flag", "Basically", "we", "won", "t", "have", "to", "expose", "takes_value", "fn", "NUMBER", "AnishShah", "would", "you", "then", "have", "initialize", "the", "ArgParser", "like", "this", "rust", "ArgParser", "new", "NUMBER", "arg", "Argument", "new", "exec", "file", "NUMBER", "required", "true", "NUMBER", "help", "exec", "file", "info", "NUMBER", "NUMBER", "arg", "Flag", "new", "no", "api", "NUMBER", "requires", "config", "file", "NUMBER", "help", "no", "api", "info", "NUMBER", "That", "d", "be", "pretty", "neat", "Yes", "NUMBER", "Should", "I", "go", "ahead", "and", "try", "implement", "this", "design", "I", "be", "super", "onboard", "and", "excited", "about", "this", "solution", "laughing", "NUMBER", "Let", "s", "see", "what", "lauralt", "and", "acatangiu", "say", "NUMBER", "We", "probably", "need", "to", "do", "some", "renaming", "though", "NUMBER", "Builder", "be", "not", "saying", "a", "lot", "about", "the", "interface", "NUMBER", "We", "can", "t", "name", "it", "Argument", "because", "the", "implementation", "be", "Argument", "NUMBER", "Or", "we", "can", "name", "it", "Argument", "and", "then", "we", "can", "name", "the", "Argument", "implementation", "that", "takes", "values", "ArgumentWithValue", "and", "name", "the", "flags", "Flag", "Other", "ideas", "be", "more", "than", "welcome", "NUMBER", "NamedArgument", "speaks", "more", "that", "the", "argument", "has", "a", "name", "not", "that", "it", "has", "a", "value", "NUMBER", "Naming", "be", "hard", "NUMBER", "What", "do", "you", "think", "about", "naming", "the", "trait", "Argument", "and", "the", "NUMBER", "structs", "ValueArgument", "and", "FlagArgument", "This", "might", "make", "the", "distinction", "between", "them", "clearer", "NUMBER", "Thanks", "for", "the", "feedback", "NUMBER", "I", "ll", "send", "a", "new", "PR", "in", "few", "days", "since", "this", "involves", "a", "lot", "of", "change", "NUMBER", "Hi", "guys", "NUMBER", "When", "I", "implement", "the", "above", "design", "I", "realized", "it", "be", "not", "a", "good", "one", "because", "there", "was", "a", "lot", "of", "similar", "code", "in", "ValueArgument", "and", "FlagArgument", "struct", "impl", "NUMBER", "Instead", "I", "add", "two", "static", "methods", "value_argument", "and", "flag_argument", "to", "Argument", "method", "in", "the", "new", "PR", "NUMBER", "Let", "me", "know", "your", "thoughts", "NUMBER", "x", "Simplify", "the", "vsock", "code", "NUMBER", "More", "details", "here", "LINK", "microvm", "firecracker", "pull", "NUMBER", "file", "r", "NUMBER", "x", "Replace", "struct_util", "with", "BytedValue", "NUMBER", "For", "an", "example", "you", "can", "check", "the", "PR", "that", "introduce", "this", "change", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "file", "dianpopa", "we", "still", "need", "to", "do", "the", "replacement", "of", "BytedValue", "NUMBER", "We", "can", "also", "open", "a", "new", "issue", "with", "that", "if", "you", "think", "ti", "makes", "more", "sense", "NUMBER", "What", "do", "you", "say", "Interested", "to", "help", "out", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Description", "of", "Changes", "This", "PR", "be", "a", "proposal", "for", "support", "custom", "IPv", "NUMBER", "address", "configuration", "for", "our", "MicroVM", "Metadata", "Service", "NUMBER", "It", "comprises", "a", "new", "API", "for", "configuring", "the", "MMDS", "IPv", "NUMBER", "address", "and", "some", "change", "refactoring", "in", "our", "current", "MMDS", "logic", "for", "cleansing", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "x", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "x", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "acatangiu", "I", "ve", "do", "some", "significant", "change", "to", "this", "PR", "NUMBER", "Please", "take", "a", "look", "again", "NUMBER", "alexandruag", "acatangiu", "andreeaflorescu", "this", "PR", "be", "ready", "for", "functional", "code", "review", "NUMBER", "Can", "you", "please", "take", "a", "look", "I", "m", "seeing", "lots", "of", "print", "out", "in", "VM", "with", "the", "following", "text", "anonymous", "instance", "ERROR", "src", "devices", "src", "virtio", "net", "device", "NUMBER", "rs", "NUMBER", "The", "RX", "queue", "be", "empty", "there", "be", "no", "available", "buffer", "NUMBER", "The", "exact", "case", "might", "be", "hard", "to", "reproduce", "NUMBER", "I", "m", "run", "GPU", "virtualization", "use", "LINK", "scea", "ava", "with", "TensorFlow", "inference", "workload", "NUMBER", "The", "GPU", "virtualization", "software", "be", "forwarding", "apis", "which", "creates", "lots", "of", "network", "traffic", "NUMBER", "The", "guest", "os", "be", "Linux", "NUMBER", "Hi", "photoszzt", "This", "be", "a", "log", "which", "I", "ve", "introduce", "in", "Drive", "net", "device", "with", "polly", "PR", "LINK", "microvm", "firecracker", "pull", "NUMBER", "commit", "NUMBER", "aa", "NUMBER", "d", "NUMBER", "b", "NUMBER", "fb", "NUMBER", "fb", "NUMBER", "dd", "NUMBER", "ac", "NUMBER", "b", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "ab", "NUMBER", "diff", "NUMBER", "a", "NUMBER", "fab", "NUMBER", "cb", "NUMBER", "c", "NUMBER", "fefR", "NUMBER", "NUMBER", "Before", "this", "change", "instead", "of", "logging", "an", "error", "for", "NoAvailBuffer", "we", "were", "throw", "an", "error", "which", "was", "not", "handle", "by", "any", "means", "so", "it", "was", "a", "noop", "catch", "for", "it", "NUMBER", "If", "I", "be", "not", "mistaken", "I", "think", "that", "the", "log", "be", "not", "really", "necessary", "or", "at", "least", "it", "shouldn", "t", "be", "considered", "an", "error", "NUMBER", "As", "far", "as", "I", "understand", "the", "reason", "behind", "this", "log", "be", "that", "the", "network", "device", "RX", "queue", "do", "not", "have", "any", "available", "descriptors", "for", "incoming", "data", "when", "the", "event", "for", "incoming", "data", "happens", "NUMBER", "This", "can", "happen", "as", "you", "said", "for", "heavy", "network", "traffic", "applications", "NUMBER", "If", "I", "be", "not", "wrong", "this", "can", "be", "do", "with", "an", "one", "line", "fix", "in", "which", "we", "remove", "the", "line", "with", "the", "log", "NUMBER", "firecracker", "microvm", "compute", "capsule", "WDYT", "Other", "option", "would", "be", "to", "implement", "log", "ratelimit", "functionality", "as", "in", "linux", "kernel", "LINK", "L", "NUMBER", "Also", "this", "sounds", "more", "like", "a", "condition", "where", "a", "metric", "be", "enough", "we", "don", "t", "need", "a", "log", "NUMBER", "Reason", "for", "This", "PR", "NUMBER", "Outlines", "one", "possible", "approach", "to", "build", "rootfs", "filesystems", "NUMBER", "Description", "of", "Changes", "Adds", "the", "rfstool", "and", "associated", "Dockerfile", "for", "build", "a", "container", "image", "with", "wget", "and", "libguestfs", "tool", "install", "NUMBER", "The", "tool", "be", "currently", "restricted", "to", "build", "just", "the", "minimal", "test", "rootfs", "NUMBER", "It", "will", "fetch", "a", "minifs", "image", "from", "the", "Alpine", "repos", "extract", "it", "then", "customise", "the", "OS", "in", "order", "to", "make", "it", "suitable", "for", "run", "on", "Firecracker", "NUMBER", "To", "test", "NUMBER", "Build", "Docker", "image", "from", "the", "Dockerfile", "in", "the", "commit", "NUMBER", "Amend", "the", "line", "RFSCTR_IMAGE", "in", "the", "rfstool", "script", "to", "point", "to", "your", "new", "docker", "image", "NUMBER", "Run", "NUMBER", "tool", "rfstool", "build", "Expected", "output", "NUMBER", "tool", "rfstool", "build", "Firecracker", "rfstool", "Starting", "rootfs", "minimal", "build", "NUMBER", "NUMBER", "Examining", "the", "guest", "NUMBER", "NUMBER", "Setting", "a", "random", "seed", "virt", "customize", "warning", "random", "seed", "could", "not", "be", "set", "for", "this", "type", "of", "guest", "NUMBER", "Installing", "package", "ca", "certificates", "NUMBER", "Installing", "package", "curl", "NUMBER", "Installing", "package", "iperf", "NUMBER", "NUMBER", "Installing", "package", "iproute", "NUMBER", "NUMBER", "Installing", "package", "iptables", "NUMBER", "Installing", "package", "openrc", "NUMBER", "Installing", "package", "openssh", "server", "NUMBER", "Installing", "package", "util", "linux", "NUMBER", "Linking", "etc", "init", "NUMBER", "d", "agetty", "NUMBER", "ttyS", "NUMBER", "agetty", "NUMBER", "Running", "echo", "ttyS", "NUMBER", "etc", "securetty", "NUMBER", "Running", "rc", "update", "add", "agetty", "NUMBER", "ttyS", "NUMBER", "default", "NUMBER", "Running", "rc", "update", "add", "devfs", "boot", "NUMBER", "Running", "rc", "update", "add", "procfs", "boot", "NUMBER", "Running", "rc", "update", "add", "sysfs", "boot", "NUMBER", "Running", "rc", "update", "add", "local", "default", "NUMBER", "Writing", "etc", "local", "NUMBER", "d", "umount", "NUMBER", "op", "NUMBER", "Changing", "permissions", "of", "etc", "local", "NUMBER", "d", "umount", "NUMBER", "op", "to", "NUMBER", "NUMBER", "Setting", "passwords", "NUMBER", "Finishing", "off", "Firecracker", "rfstool", "Minimal", "rootfs", "build", "and", "available", "at", "NUMBER", "firecracker", "build", "img", "local", "x", "NUMBER", "_", "NUMBER", "minimal", "fsfiles", "boottime", "rootfs", "NUMBER", "ext", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "issue", "no", "NUMBER", "or", "explanation", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Any", "required", "documentation", "change", "code", "and", "docs", "be", "include", "in", "this", "PR", "NUMBER", "Any", "newly", "add", "unsafe", "code", "be", "properly", "documented", "NUMBER", "Any", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Any", "user", "facing", "change", "be", "mention", "in", "CHANGELOG", "NUMBER", "md", "NUMBER", "Hi", "iggy", "thanks", "for", "your", "comments", "I", "ll", "review", "the", "Alpine", "docs", "NUMBER", "Perhaps", "this", "isn", "t", "quite", "work", "as", "I", "think", "NUMBER", "I", "ll", "park", "make", "any", "amendments", "to", "your", "other", "comments", "until", "after", "project", "feedback", "NUMBER", "Something", "along", "these", "lines", "perhaps", "A", "clone", "and", "cut", "down", "of", "the", "devtool", "with", "virt", "make", "fs", "and", "virt", "customize", "be", "run", "in", "the", "container", "NUMBER", "There", "be", "a", "tnotw", "img", "v", "NUMBER", "container", "available", "in", "Docker", "should", "anyone", "wish", "to", "give", "it", "a", "spin", "or", "the", "Dockerfile", "be", "in", "the", "commit", "NUMBER", "Only", "an", "x", "NUMBER", "_", "NUMBER", "container", "currently", "NUMBER", "Hi", "serban", "NUMBER", "Thank", "you", "for", "your", "review", "and", "feedback", "NUMBER", "Apologies", "this", "hasn", "t", "be", "a", "very", "coherent", "attempt", "at", "contribute", "on", "my", "part", "NUMBER", "The", "fix", "I", "was", "proposing", "to", "address", "NUMBER", "be", "the", "addition", "of", "these", "commands", "to", "the", "Alpine", "rootfs", "images", "rc", "update", "add", "local", "default", "echo", "umount", "etc", "local", "NUMBER", "d", "umount", "NUMBER", "op", "chmod", "NUMBER", "etc", "local", "NUMBER", "d", "umount", "NUMBER", "op", "Where", "the", "intention", "be", "that", "when", "the", "local", "daemon", "runs", "on", "shutdown", "it", "unmounts", "and", "hence", "syncs", "the", "root", "disk", "hopefully", "eradicating", "the", "corruption", "mention", "in", "the", "ticket", "NUMBER", "I", "m", "not", "really", "sure", "if", "that", "fix", "the", "issue", "but", "anyway", "NUMBER", "I", "had", "nowhere", "to", "add", "that", "in", "the", "codebase", "and", "no", "way", "of", "modifying", "the", "rootfs", "images", "so", "the", "code", "in", "this", "branch", "be", "really", "a", "misguided", "attempt", "at", "sharing", "a", "solution", "i", "NUMBER", "e", "NUMBER", "a", "rootfs", "build", "with", "the", "change", "applied", "NUMBER", "In", "retrospect", "I", "should", "have", "just", "outlined", "the", "above", "on", "the", "ticket", "and", "asked", "if", "that", "sounded", "sensible", "NUMBER", "Apologies", "again", "NUMBER", "Thanks", "very", "much", "for", "your", "code", "review", "agree", "with", "all", "the", "points", "NUMBER", "Hey", "tnotw", "As", "serban", "NUMBER", "said", "having", "a", "tool", "that", "build", "rootfs", "images", "brings", "a", "lot", "of", "value", "NUMBER", "Closing", "the", "PR", "it", "was", "not", "something", "that", "we", "had", "in", "mind", "NUMBER", "We", "can", "still", "push", "forward", "with", "this", "PR", "but", "it", "will", "need", "some", "update", "NUMBER", "It", "has", "to", "be", "linked", "to", "an", "issue", "which", "explains", "the", "nature", "of", "the", "contribution", "NUMBER", "A", "simple", "rootfs", "build", "tool", "proposal", "issue", "might", "be", "enough", "NUMBER", "What", "do", "you", "think", "Ok", "apologies", "I", "wasn", "t", "completely", "convinced", "this", "wasn", "t", "just", "noise", "for", "you", "but", "I", "ll", "have", "another", "go", "at", "it", "NUMBER", "Hi", "iulianbarbu", "Sure", "NUMBER", "I", "ve", "push", "what", "I", "have", "so", "far", "I", "can", "see", "about", "add", "something", "to", "address", "NUMBER", "So", "for", "a", "NUMBER", "G", "ext", "NUMBER", "filesystem", "Alpine", "image", "with", "the", "Stream", "binary", "install", "say", "you", "would", "do", "something", "like", "this", "ext", "NUMBER", "_", "NUMBER", "G_stream", "profile", "details", "declare", "A", "RFS_STREAM", "NAME", "stream", "NUMBER", "rootfs", "NUMBER", "ext", "NUMBER", "SIZE", "NUMBER", "G", "FS", "ext", "NUMBER", "CUST", "install", "openrc", "copy", "in", "firecracker", "stream", "bin", "chmod", "NUMBER", "bin", "stream", "link", "agetty", "etc", "init", "NUMBER", "d", "agetty", "NUMBER", "ttyS", "NUMBER", "run", "command", "echo", "ttyS", "NUMBER", "etc", "securetty", "run", "command", "rc", "update", "add", "agetty", "NUMBER", "ttyS", "NUMBER", "default", "Global", "options", "received", "by", "NUMBER", "These", "options", "be", "not", "command", "specific", "so", "we", "store", "them", "as", "global", "vars", "OPT_UNATTENDED", "false", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "cmd_build", "case", "NUMBER", "in", "h", "help", "cmd_help", "exit", "NUMBER", "minimal", "profile", "minimal", "stream", "profile", "stream", "ubuntu", "profile", "ubuntu", "ubuntu_with_ssh", "profile", "ubuntu_with_ssh", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "cmd_build", "The", "rootfs", "build", "be", "a", "combination", "of", "OS", "profile", "case", "profile", "in", "minimal", "build_rootfs", "minimal", "alpine", "stream", "build_rootfs", "stream", "alpine", "ubuntu", "build_rootfs", "ubuntu", "ubuntu_bionic", "ubuntu_with_ssh", "build_rootfs", "ubuntu_with_ssh", "ubuntu_bionic", "So", "it", "be", "sortof", "data", "driven", "and", "there", "be", "sortof", "a", "separation", "between", "the", "base", "OS", "install", "and", "customization", "steps", "NUMBER", "So", "all", "you", "essentially", "do", "be", "add", "a", "profile", "to", "the", "alpine", "base", "install", "NUMBER", "But", "it", "s", "obviously", "not", "separated", "out", "into", "json", "it", "s", "a", "bit", "clunky", "and", "as", "you", "say", "there", "be", "lots", "of", "limitations", "you", "hit", "fairly", "quickly", "NUMBER", "So", "yeah", "postpone", "or", "just", "bin", "NUMBER", "We", "re", "run", "NUMBER", "build", "of", "firecracker", "jailer", "use", "the", "API", "server", "via", "LINK", "microvm", "firecracker", "go", "sdk", "NUMBER", "While", "evaluating", "the", "NUMBER", "and", "NUMBER", "release", "we", "find", "occasionally", "NUMBER", "NUMBER", "VMs", "firecracker", "will", "block", "with", "NUMBER", "CPU", "usage", "and", "not", "actually", "boot", "the", "guest", "NUMBER", "VMM", "logs", "of", "hung", "boots", "were", "identical", "to", "VMs", "that", "booted", "without", "issue", "NUMBER", "gdb", "did", "not", "seem", "productive", "two", "threads", "in", "epoll_wait", "and", "the", "vmm_cpu", "thread", "in", "ioctl", "NUMBER", "Is", "there", "any", "other", "debugging", "context", "I", "can", "provide", "This", "isn", "t", "an", "issue", "with", "NUMBER", "and", "I", "couldn", "t", "reproduce", "it", "with", "a", "devtool", "build", "from", "master", "NUMBER", "This", "may", "be", "a", "wontfix", "wait", "for", "NUMBER", "NUMBER", "wave", "dianpopa", "The", "API", "socket", "appears", "the", "client", "be", "able", "to", "connect", "configure", "and", "start", "the", "machine", "NUMBER", "But", "the", "machine", "doesn", "t", "produce", "any", "output", "e", "NUMBER", "g", "NUMBER", "the", "guest", "kernel", "booting", "it", "just", "sits", "at", "NUMBER", "CPU", "until", "killed", "NUMBER", "By", "VMM", "logs", "I", "mean", "LINK", "microvm", "firecracker", "go", "sdk", "blob", "e", "NUMBER", "eaff", "NUMBER", "c", "NUMBER", "f", "NUMBER", "fd", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "e", "NUMBER", "c", "NUMBER", "ca", "NUMBER", "machine", "NUMBER", "go", "L", "NUMBER", "LINK", "microvm", "firecracker", "blob", "v", "NUMBER", "src", "api_server", "src", "request", "logger", "NUMBER", "rs", "L", "NUMBER", "I", "hadn", "t", "checked", "dmesg", "will", "do", "Logs", "from", "a", "hanging", "process", "Running", "Firecracker", "v", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "machine", "config", "with", "body", "cpu_template", "T", "NUMBER", "ht_enabled", "false", "mem_size_mib", "NUMBER", "vcpu_count", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "API", "server", "received", "a", "Get", "request", "on", "machine", "config", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "OK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "boot", "source", "with", "body", "boot_args", "pci", "off", "nomodules", "quiet", "ro", "noapic", "reboot", "k", "panic", "NUMBER", "kernel_image_path", "NUMBER", "ed", "NUMBER", "ca", "NUMBER", "efd", "NUMBER", "d", "NUMBER", "aa", "NUMBER", "bddcf", "NUMBER", "ecc", "NUMBER", "e", "NUMBER", "ee", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "drives", "NUMBER", "with", "body", "drive_id", "NUMBER", "is_read_only", "true", "is_root_device", "false", "path_on_host", "config", "NUMBER", "ext", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "drives", "NUMBER", "with", "body", "drive_id", "NUMBER", "is_read_only", "true", "is_root_device", "false", "path_on_host", "NUMBER", "c", "NUMBER", "bd", "NUMBER", "c", "NUMBER", "e", "NUMBER", "b", "NUMBER", "b", "NUMBER", "f", "NUMBER", "cd", "NUMBER", "c", "NUMBER", "c", "NUMBER", "ext", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "drives", "NUMBER", "with", "body", "drive_id", "NUMBER", "is_read_only", "false", "is_root_device", "false", "path_on_host", "tmp", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "drives", "root_drive", "with", "body", "drive_id", "root_drive", "is_read_only", "false", "is_root_device", "true", "path_on_host", "tmp", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "network", "interfaces", "NUMBER", "with", "body", "guest_mac", "NUMBER", "NUMBER", "ff", "a", "NUMBER", "NUMBER", "e", "NUMBER", "d", "host_dev_name", "tap", "NUMBER", "iface_id", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "API", "server", "received", "a", "Put", "request", "on", "actions", "with", "body", "action_type", "InstanceStart", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "VMM", "received", "instance", "start", "command", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "Guest", "memory", "starts", "at", "NUMBER", "x", "NUMBER", "f", "NUMBER", "b", "NUMBER", "fb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "INFO", "The", "request", "was", "executed", "successfully", "NUMBER", "Status", "code", "NUMBER", "No", "Content", "NUMBER", "Burning", "CPU", "for", "i", "in", "seq", "NUMBER", "do", "ps", "aux", "grep", "firecracker", "id", "NUMBER", "grep", "v", "grep", "sed", "s", "USER", "g", "sleep", "NUMBER", "do", "USER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "seccomp", "level", "NUMBER", "USER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "seccomp", "level", "NUMBER", "USER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "seccomp", "level", "NUMBER", "USER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "seccomp", "level", "NUMBER", "USER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "seccomp", "level", "NUMBER", "USER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "seccomp", "level", "NUMBER", "USER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "seccomp", "level", "NUMBER", "USER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "seccomp", "level", "NUMBER", "USER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "seccomp", "level", "NUMBER", "USER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Sl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "seccomp", "level", "NUMBER", "rust", "gdb", "p", "NUMBER", "GNU", "gdb", "Debian", "NUMBER", "NUMBER", "b", "NUMBER", "NUMBER", "NUMBER", "Attaching", "to", "process", "NUMBER", "New", "LWP", "NUMBER", "New", "LWP", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "in", "epoll_pwait", "gdb", "info", "threads", "Id", "Target", "Id", "Frame", "NUMBER", "LWP", "NUMBER", "firecracker", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "in", "epoll_pwait", "NUMBER", "LWP", "NUMBER", "fc_api", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "NUMBER", "in", "epoll_pwait", "NUMBER", "LWP", "NUMBER", "fc_vcpu", "NUMBER", "NUMBER", "x", "NUMBER", "in", "ioctl", "Dmesg", "seems", "uninteresting", "unrelated", "message", "from", "a", "nearby", "containerd", "dmesg", "wc", "l", "NUMBER", "dmesg", "grep", "tap", "NUMBER", "link", "becomes", "ready", "wc", "l", "NUMBER", "dmesg", "grep", "overlayfs", "wc", "l", "NUMBER", "Our", "test", "suite", "queues", "NUMBER", "VMs", "that", "sleep", "NUMBER", "NUMBER", "seconds", "before", "self", "terminating", "NUMBER", "The", "runner", "be", "restricted", "to", "NUMBER", "concurrent", "guest", "VMs", "but", "there", "be", "no", "rate", "limiting", "NUMBER", "From", "this", "pass", "NUMBER", "of", "the", "NUMBER", "jobs", "ended", "up", "in", "this", "state", "NUMBER", "dianpopa", "thanks", "for", "the", "pointers", "I", "had", "to", "fixup", "src", "vmm", "src", "vstate", "NUMBER", "rs", "NUMBER", "but", "otherwise", "test", "that", "branch", "I", "still", "ended", "up", "with", "NUMBER", "of", "NUMBER", "VMs", "spinning", "as", "previously", "describe", "NUMBER", "I", "build", "firecracker", "jailer", "from", "NUMBER", "a", "NUMBER", "bb", "NUMBER", "b", "NUMBER", "fd", "NUMBER", "fc", "NUMBER", "f", "NUMBER", "d", "NUMBER", "cdc", "master", "re", "run", "without", "change", "to", "our", "client", "and", "repeated", "with", "NUMBER", "of", "NUMBER", "VMs", "stuck", "NUMBER", "As", "things", "behave", "fine", "on", "master", "I", "m", "not", "concerned", "so", "will", "close", "this", "issue", "NUMBER", "I", "keep", "back", "test", "and", "ended", "up", "reproducing", "this", "all", "the", "way", "back", "to", "NUMBER", "it", "may", "be", "cause", "by", "something", "else", "in", "our", "environment", "change", "around", "the", "same", "time", "as", "we", "attempted", "the", "NUMBER", "upgrade", "NUMBER", "All", "my", "test", "was", "on", "NUMBER", "NUMBER", "cloud", "amd", "NUMBER", "NUMBER", "SMP", "Debian", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "debian", "buster", "ami", "NUMBER", "d", "NUMBER", "e", "NUMBER", "af", "NUMBER", "e", "NUMBER", "on", "us", "east", "NUMBER", "NUMBER", "Thanks", "for", "taking", "a", "look", "sorry", "for", "the", "red", "herring", "NUMBER", "We", "have", "a", "few", "PRs", "touching", "the", "micro", "http", "code", "that", "were", "merge", "to", "Firecracker", "NUMBER", "We", "should", "first", "port", "those", "PRs", "and", "then", "use", "it", "as", "a", "crate", "from", "firecracker", "microvm", "micro", "http", "NUMBER", "To", "avoid", "breaking", "the", "build", "we", "should", "either", "use", "a", "specific", "commit", "from", "the", "micro", "http", "repository", "or", "create", "a", "tag", "and", "use", "that", "NUMBER", "After", "we", "publish", "it", "to", "crates", "NUMBER", "io", "we", "will", "not", "have", "that", "problem", "any", "more", "NUMBER", "We", "need", "to", "add", "epoll", "to", "vmm", "sys", "util", "before", "the", "switch", "NUMBER", "We", "need", "to", "add", "epoll", "to", "vmm", "sys", "util", "before", "the", "switch", "NUMBER", "Is", "there", "an", "issue", "to", "track", "this", "Yap", "we", "need", "a", "release", "of", "vmm", "sys", "util", "NUMBER", "Coming", "up", "NUMBER", "vmm", "sys", "util", "v", "NUMBER", "be", "release", "and", "available", "on", "crates", "NUMBER", "io", "NUMBER", "Just", "start", "having", "this", "issue", "and", "this", "fix", "it", "NUMBER", "Thanks", "Reason", "for", "This", "PR", "There", "was", "a", "typo", "in", "Serban", "Iorga", "s", "email", "NUMBER", "Description", "of", "Changes", "I", "have", "fix", "the", "typo", "in", "Serban", "Iorga", "s", "email", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "stefannita", "NUMBER", "Please", "sign", "your", "commit", "git", "commit", "s", "amend", "NUMBER", "Hello", "Laura", "I", "believe", "my", "commit", "be", "in", "fact", "sign", "NUMBER", "There", "s", "a", "green", "Verified", "card", "next", "to", "it", "which", "on", "hover", "informs", "me", "that", "it", "has", "be", "sign", "with", "GPG", "key", "NUMBER", "AEE", "NUMBER", "F", "NUMBER", "AFDEB", "NUMBER", "I", "didn", "t", "tick", "the", "checkbox", "in", "the", "Pull", "Request", "comment", "because", "I", "wasn", "t", "sure", "at", "the", "time", "NUMBER", "Let", "me", "know", "if", "further", "steps", "need", "to", "be", "taken", "NUMBER", "Thanks", "for", "the", "fix", "NUMBER", "The", "commit", "be", "indeed", "sign", "but", "you", "also", "need", "to", "add", "a", "signout", "line", "in", "the", "commit", "message", "NUMBER", "You", "can", "do", "this", "use", "the", "command", "that", "Laura", "provide", "git", "commit", "s", "amend", "NUMBER", "Hi", "stefannita", "NUMBER", "NUMBER", "Could", "you", "sign", "out", "your", "commit", "so", "we", "can", "merge", "this", "PR", "Thanks", "Hi", "stefannita", "NUMBER", "NUMBER", "Could", "you", "sign", "out", "your", "commit", "so", "we", "can", "merge", "this", "PR", "Thanks", "Sorry", "it", "took", "forever", "NUMBER", "I", "believe", "it", "s", "good", "to", "go", "now", "NUMBER", "Thanks", "NUMBER", "stefannita", "NUMBER", "yes", "now", "it", "s", "sign", "out", "NUMBER", "Thanks", "Sorry", "could", "you", "also", "squash", "your", "commit", "into", "one", "please", "Right", "now", "there", "be", "NUMBER", "And", "Also", "could", "you", "move", "the", "sign", "out", "line", "after", "the", "commit", "description", "Right", "now", "it", "s", "Signed", "off", "by", "Stefan", "Nita", "TAG", "Fixed", "typo", "in", "Serban", "Iorga", "s", "email", "Please", "change", "it", "to", "Fixed", "typo", "in", "Serban", "Iorga", "s", "email", "Signed", "off", "by", "Stefan", "Nita", "TAG", "I", "m", "not", "sure", "what", "happened", "but", "I", "see", "that", "there", "be", "NUMBER", "commit", "now", "You", "can", "squash", "them", "by", "doing", "git", "rebse", "i", "upstream", "master", "and", "then", "marking", "all", "but", "the", "first", "commit", "with", "fixup", "NUMBER", "Then", "do", "a", "git", "push", "f", "NUMBER", "stefannita", "NUMBER", "will", "you", "do", "that", "please", "If", "not", "I", "can", "try", "to", "do", "it", "and", "force", "push", "into", "your", "branch", "NUMBER", "Let", "me", "know", "if", "you", "need", "any", "help", "with", "this", "NUMBER", "I", "m", "not", "sure", "what", "happened", "but", "I", "see", "that", "there", "be", "NUMBER", "commit", "now", "You", "can", "squash", "them", "by", "doing", "git", "rebse", "i", "upstream", "master", "and", "then", "marking", "all", "but", "the", "first", "commit", "with", "fixup", "NUMBER", "Then", "do", "a", "git", "push", "f", "NUMBER", "stefannita", "NUMBER", "will", "you", "do", "that", "please", "If", "not", "I", "can", "try", "to", "do", "it", "and", "force", "push", "into", "your", "branch", "NUMBER", "Let", "me", "know", "if", "you", "need", "any", "help", "with", "this", "NUMBER", "Yes", "I", "had", "some", "issue", "figuring", "out", "how", "to", "squash", "the", "commit", "last", "night", "and", "I", "couldn", "t", "get", "to", "my", "PC", "or", "laptop", "today", "until", "now", "NUMBER", "I", "see", "you", "guys", "did", "that", "already", "NUMBER", "Sorry", "for", "the", "headaches", "for", "such", "a", "simple", "commit", "NUMBER", "Also", "poetic", "how", "there", "s", "now", "a", "typo", "in", "the", "commit", "title", "NUMBER", "While", "I", "be", "somewhat", "of", "a", "specialist", "in", "fix", "typo", "I", "be", "clearly", "nowhere", "near", "as", "well", "versed", "in", "the", "subtleties", "of", "git", "so", "I", "think", "it", "s", "best", "I", "don", "t", "get", "involved", "there", "NUMBER", "Reason", "for", "This", "PR", "NUMBER", "Description", "of", "Changes", "Updated", "test_shut_down", "NUMBER", "py", "to", "assert", "the", "flushing", "of", "metrics", "when", "a", "reboot", "be", "issue", "from", "within", "the", "booted", "microVM", "NUMBER", "mod", "test", "from", "vmm", "lib", "NUMBER", "rs", "be", "not", "neccessary", "for", "this", "file", "since", "the", "units", "test", "fit", "better", "for", "integration", "test", "which", "be", "already", "covered", "by", "our", "current", "integration", "test", "NUMBER", "Modified", "the", "API", "for", "creation", "and", "flags", "manipulation", "of", "a", "logging", "Fifo", "NUMBER", "These", "change", "offer", "flexibility", "in", "choosing", "if", "the", "opened", "pipe", "be", "blocking", "or", "non", "blocking", "and", "support", "for", "change", "file", "descriptor", "flags", "for", "the", "opened", "fifo", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Bo", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "I", "do", "think", "there", "be", "some", "potential", "scenarios", "that", "vmm", "src", "lib", "NUMBER", "rs", "should", "get", "unit", "test", "ci", "test", "against", "Unit", "test", "get_bus_device", "device_type", "DeviceType", "device_id", "str", "isn", "t", "it", "worth", "it", "to", "test", "that", "not", "registering", "a", "device_type", "id", "tuple", "would", "make", "this", "function", "return", "None", "Or", "also", "what", "about", "make", "sure", "that", "registering", "a", "net", "device", "with", "the", "same", "id", "as", "a", "block", "device", "works", "correctly", "Testing", "this", "unit", "means", "test", "the", "MmioDeviceManager", "get_bus_device", "because", "it", "be", "a", "wrapper", "which", "do", "not", "have", "any", "relate", "logic", "which", "be", "covered", "by", "device_manager", "mmio", "NUMBER", "rs", "test_device_info", "unit", "test", "NUMBER", "I", "genuinely", "do", "no", "think", "it", "would", "bring", "any", "value", "to", "have", "a", "unit", "test", "for", "this", "function", "NUMBER", "guest_memory", "why", "not", "test", "that", "it", "be", "actually", "returns", "what", "we", "configured", "pub", "fn", "kvm_vm", "self", "be", "not", "use", "at", "all", "Unit", "test", "for", "getters", "if", "they", "do", "not", "have", "any", "complex", "logic", "it", "would", "require", "enough", "effort", "just", "for", "nothing", "in", "my", "opinion", "NUMBER", "I", "ve", "excluded", "them", "from", "the", "report", "NUMBER", "just", "because", "they", "lack", "any", "relate", "logic", "that", "would", "bring", "value", "for", "a", "unit", "test", "NUMBER", "CI", "Are", "metrics", "flushed", "upon", "pub", "fn", "stop", "mut", "self", "exit_code", "i", "NUMBER", "I", "think", "this", "be", "a", "scenario", "that", "can", "be", "test", "inside", "an", "integration", "test", "NUMBER", "I", "will", "add", "an", "integration", "test", "for", "this", "NUMBER", "Does", "configure_system", "fail", "if", "there", "be", "not", "enough", "memory", "to", "setup", "the", "mptable", "vmm", "lib", "NUMBER", "rs", "configure_system", "be", "a", "wrapper", "over", "arch_", "configure_system", "without", "any", "relate", "logic", "to", "it", "besides", "effective", "calls", "to", "arch_", "configure_system", "NUMBER", "Testing", "it", "for", "NotEnoughMemory", "for", "mptable", "means", "test", "configure_system", "from", "arch", "x", "NUMBER", "_", "NUMBER", "NUMBER", "This", "be", "already", "covered", "in", "unit", "test", "NUMBER", "I", "be", "not", "on", "the", "same", "page", "here", "regard", "not", "make", "sense", "to", "test", "simple", "bits", "of", "code", "NUMBER", "Unit", "test", "be", "not", "made", "only", "for", "complex", "units", "NUMBER", "Testing", "a", "getter", "ensures", "that", "the", "getter", "stays", "a", "getter", "NUMBER", "Unit", "test", "should", "also", "be", "seen", "as", "an", "extra", "layer", "of", "protection", "against", "malicious", "or", "unintentional", "mistakes", "in", "PRs", "NUMBER", "I", "agree", "with", "you", "that", "you", "generally", "want", "to", "test", "even", "the", "simple", "bits", "of", "code", "NUMBER", "In", "this", "particular", "usecase", "test", "the", "Vmm", "requires", "a", "lot", "of", "setup", "and", "comes", "with", "test", "that", "be", "hard", "to", "maintain", "NUMBER", "The", "value", "add", "by", "test", "setters", "and", "getters", "tends", "to", "fade", "away", "when", "taking", "into", "consideration", "the", "long", "time", "required", "for", "maintaining", "the", "test", "and", "their", "setup", "NUMBER", "I", "think", "it", "makes", "more", "sense", "to", "invest", "this", "time", "in", "write", "integration", "test", "NUMBER", "WDYT", "Re", "the", "unit", "test", "of", "small", "bits", "of", "code", "I", "agree", "with", "dianpopa", "that", "we", "should", "test", "everything", "even", "if", "it", "s", "already", "covered", "NUMBER", "I", "ve", "seen", "way", "too", "many", "getters", "that", "were", "sneaking", "in", "a", "bit", "of", "logic", "on", "the", "side", "before", "returning", "a", "value", "NUMBER", "I", "believe", "that", "code", "that", "isn", "t", "thoroughly", "test", "has", "a", "better", "chance", "of", "not", "aging", "well", "NUMBER", "dianpopa", "acatangiu", "aghecenco", "I", "think", "I", "ve", "managed", "your", "concerns", "NUMBER", "Please", "take", "a", "look", "again", "NUMBER", "Signed", "off", "by", "karthik", "nedunchezhiyan", "TAG", "Description", "of", "Changes", "This", "PR", "has", "the", "following", "change", "block", "device", "replaced", "hardcoded", "value", "with", "CONFIG_SPACE_SIZE", "NUMBER", "virtio", "remove", "redundant", "import", "statements", "NUMBER", "rate", "limiter", "nit", "previously", "gcd", "took", "for", "complete_refill_time_ms", "and", "NANOSEC_IN_ONE_MILLISEC", "separately", "NUMBER", "current", "implementation", "provides", "the", "same", "result", "but", "this", "time", "with", "lesser", "code", "NUMBER", "I", "hope", "complete_refill_time_ms", "NANOSEC_IN_ONE_MILLISEC", "should", "not", "cause", "overflow", "issue", "as", "it", "be", "unsigned", "NUMBER", "NUMBER", "Overflow", "issue", "will", "happen", "if", "user", "provides", "a", "huge", "complete_refill_time_ms", "value", "for", "more", "than", "NUMBER", "years", "I", "hope", "fc", "users", "will", "not", "have", "such", "use", "case", "NUMBER", "vmm", "builder", "nit", "previously", "single", "logic", "be", "split", "into", "two", "parts", "some", "outside", "the", "for", "loop", "and", "some", "inside", "the", "for", "loop", "as", "a", "reader", "I", "thought", "it", "will", "be", "better", "if", "we", "merge", "into", "one", "just", "to", "make", "better", "readability", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "acatangiu", "nice", "suggestion", "will", "add", "the", "description", "for", "change", "shortly", "acatangiu", "lauralt", "change", "do", "as", "like", "you", "suggested", "NUMBER", "kindly", "take", "another", "look", "acatangiu", "add", "git", "description", "acatangiu", "I", "guess", "commit", "description", "aligned", "as", "you", "expect", "NUMBER", "lauralt", "change", "commit", "description", "as", "like", "you", "suggested", "kindly", "take", "a", "look", "NUMBER", "In", "the", "firecracker", "we", "need", "to", "check", "whether", "the", "user", "has", "supplied", "at", "least", "one", "root", "block", "device", "and", "throw", "an", "appropriate", "error", "message", "if", "not", "provide", "NUMBER", "In", "current", "flow", "if", "the", "user", "has", "not", "supplied", "any", "root", "block", "device", "he", "will", "end", "up", "in", "kernel", "panic", "like", "below", "NUMBER", "NUMBER", "VFS", "Cannot", "open", "root", "device", "null", "or", "unknown", "block", "NUMBER", "NUMBER", "error", "NUMBER", "NUMBER", "Please", "append", "a", "correct", "root", "boot", "option", "here", "be", "the", "available", "partitions", "NUMBER", "fe", "NUMBER", "NUMBER", "vda", "NUMBER", "driver", "virtio_blk", "NUMBER", "Kernel", "panic", "not", "syncing", "VFS", "Unable", "to", "mount", "root", "fs", "on", "unknown", "block", "NUMBER", "NUMBER", "But", "recent", "version", "of", "firecracker", "support", "initrd", "NUMBER", "Users", "may", "handle", "rootfs", "mounting", "logic", "there", "NUMBER", "Need", "to", "find", "a", "way", "to", "handle", "this", "elegantly", "NUMBER", "Reason", "for", "This", "PR", "Occasionally", "the", "vsock", "test", "fail", "because", "the", "created", "file", "descriptors", "already", "exist", "NUMBER", "This", "PR", "try", "to", "avoid", "that", "situation", "by", "trying", "multiple", "file", "names", "NUMBER", "This", "can", "also", "happen", "when", "concurrent", "firecracker", "test", "runs", "be", "executed", "from", "the", "same", "path", "NUMBER", "Description", "of", "Changes", "When", "a", "file", "be", "created", "first", "check", "if", "it", "exists", "NUMBER", "If", "it", "do", "try", "to", "append", "a", "number", "to", "the", "file", "name", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "x", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "no", "API", "change", "be", "include", "in", "this", "PR", "x", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "Looks", "like", "simply", "calling", "strip", "on", "the", "firecracker", "release", "binary", "reduces", "the", "size", "from", "NUMBER", "MB", "to", "NUMBER", "MB", "NUMBER", "Investigate", "if", "this", "affects", "in", "any", "way", "the", "functionality", "NUMBER", "Yeah", "according", "to", "the", "strip", "command", "s", "description", "the", "ability", "to", "interpret", "back", "stack", "traces", "be", "affected", "NUMBER", "But", "what", "do", "we", "gain", "Does", "the", "binary", "size", "reduction", "also", "result", "in", "memory", "usage", "reduction", "If", "not", "do", "the", "binary", "size", "reduction", "help", "in", "any", "other", "way", "Probably", "strip", "strip", "debug", "discard", "locals", "be", "a", "better", "option", "than", "what", "strip", "do", "by", "default", "for", "production", "build", "NUMBER", "You", "can", "still", "get", "some", "useful", "information", "from", "stack", "traces", "that", "way", "NUMBER", "raduweiss", "in", "this", "case", "the", "binary", "size", "reduction", "doesn", "t", "result", "in", "a", "memory", "usage", "reduction", "NUMBER", "It", "s", "only", "a", "disk", "size", "optimization", "NUMBER", "Does", "this", "bring", "any", "value", "If", "not", "we", "can", "close", "the", "issue", "NUMBER", "Reopening", "this", "NUMBER", "The", "PR", "was", "merge", "NUMBER", "Removed", "VmmController", "stop", "method", "which", "was", "not", "use", "anywhere", "in", "the", "codebase", "NUMBER", "Returned", "DeviceIdNotFound", "if", "rate", "limiter", "patch", "fail", "due", "to", "not", "finding", "the", "net", "device", "with", "a", "specific", "net_iface_id", "attached", "to", "the", "bus", "NUMBER", "Signed", "off", "by", "iulianbarbu", "TAG", "Reason", "for", "This", "PR", "Initial", "reason", "for", "this", "PR", "was", "add", "unit", "test", "for", "vmm", "controller", "NUMBER", "rs", "NUMBER", "NUMBER", "Found", "that", "there", "be", "a", "corresponding", "integration", "test", "for", "every", "uncovered", "unit", "from", "vmm", "controller", "NUMBER", "rs", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "lauralt", "I", "ve", "update", "the", "commit", "message", "NUMBER", "Please", "take", "a", "look", "again", "What", "do", "you", "think", "if", "we", "handle", "the", "events", "registration", "after", "activation", "for", "block", "and", "net", "devices", "like", "vsock", "do", "With", "the", "vsock", "pattern", "of", "events", "registration", "we", "do", "not", "register", "the", "queue", "backend", "rate", "limiters", "events", "until", "the", "activation", "but", "only", "after", "NUMBER", "We", "wouldn", "t", "need", "to", "have", "the", "corresponding", "checks", "inside", "handle_read", "of", "net", "and", "block", "devices", "and", "the", "actual", "event", "handle", "flow", "will", "seem", "more", "natural", "IMO", "NUMBER", "We", "could", "do", "that", "definitely", "in", "a", "separate", "PR", "but", "it", "d", "require", "a", "two", "step", "event", "registration", "process", "like", "vsock", "do", "NUMBER", "register", "an", "activate", "event", "NUMBER", "on", "receipt", "of", "an", "activate", "event", "we", "register", "the", "other", "events", "NUMBER", "It", "d", "be", "formally", "cleaner", "but", "I", "don", "t", "have", "any", "problem", "with", "the", "current", "flow", "either", "NUMBER", "We", "can", "do", "it", "in", "another", "PR", "NUMBER", "Basically", "what", "we", "would", "gain", "choosing", "the", "vsock", "way", "of", "events", "registration", "be", "proper", "handle", "of", "device", "events", "after", "device", "activation", "NUMBER", "We", "will", "still", "need", "the", "set_device_activated", "and", "is_activated", "interface", "for", "logic", "relate", "to", "device", "reset", "NUMBER", "I", "ve", "opened", "an", "issue", "to", "track", "this", "alignment", "for", "all", "the", "devices", "NUMBER", "NUMBER", "What", "do", "you", "think", "if", "we", "handle", "the", "events", "registration", "after", "activation", "for", "block", "and", "net", "devices", "like", "vsock", "do", "With", "the", "vsock", "pattern", "of", "events", "registration", "we", "do", "not", "register", "the", "queue", "backend", "rate", "limiters", "events", "until", "the", "activation", "but", "only", "after", "NUMBER", "We", "wouldn", "t", "need", "to", "have", "the", "corresponding", "checks", "inside", "handle_read", "of", "net", "and", "block", "devices", "and", "the", "actual", "event", "handle", "flow", "will", "seem", "more", "natural", "IMO", "NUMBER", "We", "could", "do", "that", "definitely", "in", "a", "separate", "PR", "but", "it", "d", "require", "a", "two", "step", "event", "registration", "process", "like", "vsock", "do", "NUMBER", "register", "an", "activate", "event", "NUMBER", "on", "receipt", "of", "an", "activate", "event", "we", "register", "the", "other", "events", "NUMBER", "It", "d", "be", "formally", "cleaner", "but", "I", "don", "t", "have", "any", "problem", "with", "the", "current", "flow", "either", "NUMBER", "We", "can", "do", "it", "in", "another", "PR", "NUMBER", "Basically", "what", "we", "would", "gain", "choosing", "the", "vsock", "way", "of", "events", "registration", "be", "proper", "handle", "of", "device", "events", "after", "device", "activation", "NUMBER", "We", "will", "still", "need", "the", "set_device_activated", "and", "is_activated", "interface", "for", "logic", "relate", "to", "device", "reset", "NUMBER", "I", "ve", "opened", "an", "issue", "to", "track", "this", "alignment", "for", "all", "the", "devices", "NUMBER", "NUMBER", "Synced", "offline", "NUMBER", "We", "do", "not", "need", "set_device_activated", "NUMBER", "Also", "the", "PR", "LGTM", "NUMBER", "For", "certain", "platforms", "and", "host", "kernel", "configurations", "on", "aarch", "NUMBER", "the", "guest", "kernel", "hangs", "during", "arch_timer_of_init", "LINK", "rc", "NUMBER", "source", "drivers", "clocksource", "arm_arch_timer", "NUMBER", "c", "L", "NUMBER", "NUMBER", "I", "encountered", "this", "issue", "use", "the", "pre", "build", "Firecracker", "NUMBER", "binary", "distributed", "from", "this", "repository", "NUMBER", "Here", "be", "an", "example", "log", "log", "NUMBER", "txt", "LINK", "microvm", "firecracker", "file", "NUMBER", "log", "NUMBER", "txt", "NUMBER", "That", "include", "both", "Firecracker", "log", "output", "with", "level", "Debug", "and", "guest", "kernel", "output", "with", "loglevel", "NUMBER", "NUMBER", "Using", "GDB", "I", "ve", "determined", "that", "the", "guest", "kernel", "hangs", "during", "arch_timer_of_init", "but", "I", "haven", "t", "figured", "out", "why", "NUMBER", "The", "point", "during", "that", "function", "at", "which", "the", "guest", "kernel", "hangs", "varies", "and", "seems", "to", "depend", "on", "the", "timing", "of", "some", "asynchronous", "event", "NUMBER", "I", "ve", "encountered", "this", "issue", "with", "a", "variety", "of", "platform", "host", "kernel", "configuration", "pairs", "all", "resulting", "in", "a", "log", "similar", "to", "the", "above", "NUMBER", "First", "on", "qemu", "system", "aarch", "NUMBER", "machine", "virt", "with", "host", "Linux", "at", "NUMBER", "rc", "NUMBER", "build", "with", "defconfig", "and", "then", "on", "a", "Raspberry", "Pi", "NUMBER", "with", "host", "Linux", "at", "rpi", "NUMBER", "y", "build", "with", "bcm", "NUMBER", "_defconfig", "augmented", "with", "some", "KVM", "relate", "options", "NUMBER", "After", "hearing", "that", "Firecracker", "works", "on", "aarch", "NUMBER", "on", "Ubuntu", "NUMBER", "for", "the", "Raspberry", "Pi", "NUMBER", "I", "build", "a", "host", "kernel", "similar", "to", "that", "which", "ships", "with", "Ubuntu", "NUMBER", "for", "the", "Raspberry", "Pi", "NUMBER", "The", "guest", "did", "not", "hang", "under", "this", "host", "NUMBER", "I", "then", "build", "a", "very", "similar", "kernel", "to", "run", "on", "qemu", "system", "aarch", "NUMBER", "machine", "virt", "only", "add", "some", "virtio", "relate", "options", "and", "build", "the", "same", "version", "from", "mainline", "instead", "of", "the", "Raspberry", "Pi", "tree", "NUMBER", "A", "guest", "run", "under", "this", "host", "on", "qemu", "system", "aarch", "NUMBER", "machine", "virt", "hung", "during", "arch_timer_of_init", "just", "as", "before", "NUMBER", "For", "guest", "kernels", "I", "ve", "tried", "both", "NUMBER", "rc", "NUMBER", "build", "with", "defconfig", "and", "NUMBER", "build", "with", "the", "recommended", "configuration", "provide", "by", "this", "repository", "NUMBER", "The", "details", "of", "the", "conditions", "of", "these", "failures", "can", "be", "find", "in", "this", "repository", "nspin", "firecracker", "repro", "LINK", "repro", "NUMBER", "It", "include", "all", "kernel", "version", "and", "configurations", "along", "with", "QEMU", "invocations", "Firecracker", "invocations", "and", "userlands", "NUMBER", "I", "can", "spend", "more", "time", "in", "GDB", "to", "narrow", "in", "on", "the", "issue", "here", "NUMBER", "Does", "anyone", "more", "familiar", "with", "the", "Firecracker", "on", "aarch", "NUMBER", "effort", "so", "far", "have", "ideas", "on", "what", "might", "be", "the", "cause", "Has", "anyone", "successfully", "booted", "a", "microvm", "with", "qemu", "system", "aarch", "NUMBER", "machine", "virt", "as", "the", "host", "platform", "Thanks", "andreeaflorescu", "I", "ll", "be", "available", "on", "Slack", "to", "take", "part", "in", "the", "investigation", "NUMBER", "Hey", "nspin", "thanks", "for", "the", "extensive", "info", "Just", "to", "clarify", "be", "you", "encountering", "the", "error", "when", "a", "trying", "to", "run", "nested", "firecracker", "guest", "over", "qemu", "guest", "over", "metal", "or", "b", "comparing", "a", "firecracker", "guest", "with", "a", "qemu", "guest", "Hi", "aghecenco", "I", "m", "encountering", "this", "issue", "in", "case", "a", "firecracker", "host", "guest", "run", "in", "an", "virtual", "machine", "emulated", "by", "qemu", "system", "aarch", "NUMBER", "machine", "virt", "on", "an", "x", "NUMBER", "host", "NUMBER", "I", "m", "also", "encountering", "this", "same", "issue", "directly", "on", "the", "Raspberry", "Pi", "NUMBER", "no", "QEMU", "with", "certain", "host", "kernel", "configurations", "NUMBER", "For", "the", "nested", "use", "case", "we", "don", "t", "officially", "support", "run", "nested", "it", "s", "be", "attempted", "several", "times", "and", "successful", "on", "a", "few", "platforms", "but", "Firecracker", "be", "only", "qualified", "on", "baremetal", "NUMBER", "On", "the", "RPi", "do", "you", "mean", "you", "see", "this", "issue", "when", "the", "host", "boots", "or", "when", "the", "Firecracker", "guest", "on", "the", "metal", "RPi", "boots", "It", "sounds", "like", "a", "kernel", "issue", "nonetheless", "could", "you", "please", "post", "detailed", "repro", "steps", "for", "this", "use", "case", "host", "kernel", "config", "guest", "kernel", "config", "rootfs", "resources", "if", "available", "build", "steps", "starting", "from", "the", "nix", "scripts", "I", "observed", "this", "issue", "while", "the", "Firecracker", "guest", "was", "booting", "NUMBER", "I", "ve", "messed", "around", "a", "bit", "more", "and", "find", "that", "Firecracker", "works", "fine", "on", "the", "Raspberry", "Pi", "NUMBER", "with", "_mainline_", "NUMBER", "rc", "NUMBER", "and", "defconfig", "NUMBER", "Furthermore", "I", "m", "having", "trouble", "reproducing", "this", "issue", "on", "the", "Raspberry", "Pi", "NUMBER", "at", "all", "NUMBER", "It", "s", "possible", "that", "the", "time", "I", "observed", "this", "issue", "on", "the", "Raspberry", "Pi", "NUMBER", "was", "under", "some", "mistaken", "conditions", "not", "recorded", "in", "my", "repository", "such", "as", "a", "kernel", "Kconfig", "mismatch", "NUMBER", "My", "focus", "was", "on", "QEMU", "and", "I", "was", "more", "treating", "the", "Raspberry", "Pi", "NUMBER", "more", "as", "a", "baseline", "NUMBER", "The", "issue", "under", "QEMU", "remains", "but", "it", "seems", "that", "s", "out", "of", "scope", "NUMBER", "I", "may", "investigate", "further", "anyways", "and", "will", "report", "back", "if", "I", "find", "anything", "interesting", "NUMBER", "Also", "I", "ll", "try", "a", "bit", "more", "to", "figure", "out", "under", "what", "conditions", "I", "observed", "this", "issue", "on", "the", "Raspberry", "Pi", "NUMBER", "Sorry", "for", "the", "bother", "Thanks", "nspin", "We", "ll", "close", "this", "for", "now", "as", "there", "s", "nothing", "needed", "from", "our", "side", "if", "you", "find", "anything", "that", "we", "can", "help", "with", "please", "feel", "free", "to", "reopen", "this", "issue", "NUMBER", "And", "if", "you", "come", "across", "something", "interesting", "in", "your", "investigation", "it", "would", "be", "great", "if", "you", "d", "consider", "a", "PR", "to", "update", "one", "of", "the", "docs", "NUMBER", "LINK", "microvm", "firecracker", "blob", "master", "docs", "get", "start", "NUMBER", "md", "NUMBER", "LINK", "microvm", "firecracker", "blob", "master", "FAQ", "NUMBER", "md", "beer", "Reason", "for", "This", "PR", "NUMBER", "Description", "of", "Changes", "In", "new", "release", "Firecracker", "v", "NUMBER", "the", "command", "line", "arg", "version", "be", "miss", "NUMBER", "NUMBER", "firecracker", "v", "NUMBER", "x", "NUMBER", "_", "NUMBER", "version", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "firecracker", "src", "main", "NUMBER", "rs", "NUMBER", "Arguments", "parsing", "error", "Found", "argument", "version", "which", "wasn", "t", "expected", "or", "isn", "t", "valid", "in", "this", "context", "NUMBER", "And", "the", "version", "be", "quite", "an", "universal", "command", "line", "arg", "to", "print", "application", "version", "number", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "Pennyzct", "how", "will", "this", "combine", "with", "jailer", "for", "jailer", "users", "NUMBER", "I", "think", "there", "will", "be", "some", "inconsistency", "if", "we", "handle", "version", "param", "only", "in", "firecracker", "without", "jailer", "WDYT", "Hi", "KarthikNedunchezhiyan", "thanks", "for", "notice", "NUMBER", "jailer", "be", "also", "use", "the", "new", "args", "parser", "PR", "NUMBER", "and", "version", "be", "also", "miss", "for", "jailer", "binary", "NUMBER", "NUMBER", "jailer", "v", "NUMBER", "x", "NUMBER", "_", "NUMBER", "version", "Arguments", "parsing", "error", "Found", "argument", "version", "which", "wasn", "t", "expected", "or", "isn", "t", "valid", "in", "this", "context", "NUMBER", "And", "for", "jailer", "user", "wants", "to", "print", "firecracker", "version", "number", "this", "flag", "should", "be", "specified", "after", "end", "of", "command", "options", "in", "order", "to", "be", "forwarded", "to", "firecracker", "process", "NUMBER", "for", "jailer", "user", "wants", "to", "print", "firecracker", "version", "number", "this", "flag", "should", "be", "specified", "after", "end", "of", "command", "options", "in", "order", "to", "be", "forwarded", "to", "firecracker", "process", "NUMBER", "Pennyzct", "Yes", "we", "can", "do", "like", "this", "but", "we", "need", "to", "provide", "all", "argument", "with", "valid", "values", "to", "jailer", "NUMBER", "also", "the", "jailer", "will", "create", "the", "root", "folder", "and", "cgroups", "just", "to", "know", "the", "version", "of", "firecracker", "NUMBER", "Hello", "Pennyzct", "thanks", "for", "the", "PR", "we", "didn", "t", "indeed", "add", "support", "for", "version", "flag", "in", "the", "new", "arg", "parser", "implementation", "NUMBER", "I", "took", "a", "look", "at", "your", "commit", "and", "I", "think", "version", "argument", "should", "be", "treated", "like", "help", "i", "NUMBER", "e", "NUMBER", "check", "directly", "for", "this", "argument", "in", "arg_parser", "NUMBER", "rs", "in", "parse", "function", "and", "not", "insert", "it", "when", "creating", "the", "ArgParser", "object", "in", "main", "NUMBER", "As", "for", "the", "jailer", "we", "should", "also", "add", "support", "for", "this", "flag", "because", "jailer", "can", "be", "seen", "as", "another", "application", "and", "user", "may", "want", "to", "see", "the", "version", "for", "it", "too", "jailer", "NUMBER", "for", "example", "NUMBER", "So", "basically", "just", "add", "a", "check", "for", "this", "argument", "in", "main", "function", "from", "jailer", "NUMBER", "What", "do", "you", "think", "Please", "ping", "me", "if", "you", "need", "any", "help", "with", "the", "PR", "or", "if", "something", "be", "not", "clear", "NUMBER", "Hi", "lauralt", "thanks", "NUMBER", "You", "re", "right", "It", "should", "be", "treated", "like", "help", "then", "it", "will", "also", "fix", "what", "KarthikNedunchezhiyan", "worried", "I", "ll", "update", "asap", "for", "you", "guys", "to", "review", "lauralt", "personally", "I", "will", "not", "suggest", "keep", "jailer", "version", "jailer", "NUMBER", "as", "separate", "from", "the", "firecracker", "version", "firecracker", "NUMBER", "NUMBER", "It", "will", "lead", "to", "introduce", "a", "compatibility", "table", "between", "firecracker", "and", "jailer", "just", "my", "opinion", "NUMBER", "WDYT", "Hi", "lauralt", "update", "plz", "take", "a", "review", "NUMBER", "NUMBER", "and", "do", "you", "think", "it", "should", "be", "back", "ported", "to", "v", "NUMBER", "lauralt", "personally", "I", "will", "not", "suggest", "keep", "jailer", "version", "jailer", "NUMBER", "as", "separate", "from", "the", "firecracker", "version", "firecracker", "NUMBER", "NUMBER", "It", "will", "lead", "to", "introduce", "a", "compatibility", "table", "between", "firecracker", "and", "jailer", "just", "my", "opinion", "NUMBER", "WDYT", "In", "my", "opinion", "it", "makes", "sense", "to", "introduce", "this", "flag", "also", "for", "the", "jailer", "as", "it", "be", "another", "binary", "and", "the", "version", "for", "it", "be", "taken", "from", "a", "different", "Cargo", "NUMBER", "toml", "file", "NUMBER", "lauralt", "personally", "I", "will", "not", "suggest", "keep", "jailer", "version", "jailer", "NUMBER", "as", "separate", "from", "the", "firecracker", "version", "firecracker", "NUMBER", "NUMBER", "It", "will", "lead", "to", "introduce", "a", "compatibility", "table", "between", "firecracker", "and", "jailer", "just", "my", "opinion", "NUMBER", "WDYT", "KarthikNedunchezhiyan", "jailer", "and", "firecracker", "be", "considered", "crates", "in", "our", "project", "repository", "NUMBER", "Every", "crate", "has", "a", "specific", "package", "version", "which", "be", "update", "before", "a", "release", "of", "the", "crate", "NUMBER", "In", "our", "specific", "case", "we", "have", "multiple", "crates", "with", "dependencies", "between", "them", "and", "a", "workspace", "which", "manages", "these", "crates", "as", "to", "what", "binaries", "to", "extract", "from", "this", "multiple", "crate", "project", "NUMBER", "A", "new", "release", "version", "of", "firecracker", "comes", "with", "two", "artifacts", "namely", "the", "firecracker", "and", "jailer", "binaries", "which", "correspond", "to", "firecracker", "and", "jailer", "crates", "NUMBER", "With", "this", "in", "mind", "this", "means", "that", "the", "binaries", "be", "relate", "to", "the", "crates", "version", "which", "can", "diverge", "presumably", "but", "not", "really", "in", "our", "case", "NUMBER", "Because", "they", "can", "diverge", "it", "makes", "sense", "to", "keep", "firecracker", "version", "and", "jailer", "version", "separated", "NUMBER", "lauralt", "iulianbarbu", "ok", "Hi", "lauralt", "update", "plz", "take", "a", "review", "NUMBER", "NUMBER", "and", "do", "you", "think", "it", "should", "be", "back", "ported", "to", "v", "NUMBER", "I", "will", "thanks", "NUMBER", "No", "I", "don", "t", "think", "it", "should", "be", "backported", "as", "it", "be", "not", "actually", "a", "bug", "NUMBER", "Pennyzct", "Changes", "look", "good", "NUMBER", "I", "would", "rephrase", "a", "little", "bit", "the", "commit", "message", "something", "like", "The", "version", "flag", "be", "quite", "an", "universal", "command", "line", "argument", "for", "printing", "the", "application", "version", "number", "NUMBER", "Therefore", "add", "flag", "version", "to", "both", "firecracker", "and", "jailer", "NUMBER", "Hi", "lauralt", "thanks", "code", "and", "commit", "update", "NUMBER", "plz", "take", "a", "review", "NUMBER", "No", "I", "don", "t", "think", "it", "should", "be", "backported", "as", "it", "be", "not", "actually", "a", "bug", "NUMBER", "FYI", "I", "ve", "raise", "this", "request", "because", "of", "that", "in", "some", "app", "e", "NUMBER", "g", "NUMBER", "kata", "container", "which", "be", "use", "firecracker", "may", "use", "version", "to", "acquire", "version", "info", "for", "pre", "run", "compatibility", "check", "NUMBER", "Hi", "lauralt", "andreeaflorescu", "Pennyzct", "can", "you", "please", "update", "test_parse", "with", "a", "test", "also", "for", "version", "argument", "I", "ve", "already", "update", "test_parse", "with", "a", "new", "test", "for", "version", "argument", "NUMBER", "And", "a", "little", "bit", "more", "since", "we", "use", "clone", "to", "acquire", "the", "argument", "we", "probably", "don", "t", "need", "to", "build_arg_parser", "every", "time", "for", "each", "small", "test", "union", "just", "the", "one", "in", "the", "beginning", "be", "enough", "NUMBER", "Pennyzct", "The", "code", "coverage", "integration", "test", "be", "fail", "right", "now", "NUMBER", "Can", "you", "please", "update", "the", "target", "value", "from", "test_coverage", "NUMBER", "py", "with", "the", "current", "value", "NUMBER", "because", "unfortunately", "the", "newly", "add", "lines", "can", "not", "be", "test", "properly", "thanks", "for", "the", "debugging", "NUMBER", "NUMBER", "Since", "we", "add", "test", "for", "the", "version", "arg", "the", "coverage", "test", "may", "not", "fail", "If", "it", "still", "fail", "I", "ll", "then", "edit", "the", "value", "target", "accordingly", "NUMBER", "Hi", "lauralt", "andreeaflorescu", "If", "you", "re", "now", "all", "fine", "with", "the", "back", "porting", "to", "v", "NUMBER", "I", "add", "an", "new", "FIXED", "entry", "in", "CHANGELOG", "under", "v", "NUMBER", "plz", "take", "a", "review", "sorry", "NUMBER", "will", "re", "base", "asap", "NUMBER", "I", "created", "a", "release", "branch", "for", "v", "NUMBER", "LINK", "microvm", "firecracker", "tree", "release_v", "NUMBER", "You", "should", "be", "able", "to", "create", "a", "PR", "against", "that", "branch", "and", "then", "we", "can", "do", "a", "patch", "release", "NUMBER", "Hi", "guys", "I", "ve", "find", "that", "in", "new", "release", "Firecracker", "v", "NUMBER", "the", "command", "line", "arg", "version", "V", "be", "miss", "NUMBER", "NUMBER", "firecracker", "v", "NUMBER", "x", "NUMBER", "_", "NUMBER", "version", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "firecracker", "src", "main", "NUMBER", "rs", "NUMBER", "Arguments", "parsing", "error", "Found", "argument", "version", "which", "wasn", "t", "expected", "or", "isn", "t", "valid", "in", "this", "context", "NUMBER", "Checking", "out", "the", "exist", "flags", "through", "help", "see", "version", "V", "be", "also", "not", "there", "NUMBER", "But", "help", "will", "display", "the", "version", "info", "in", "the", "first", "line", "NUMBER", "Firecracker", "v", "NUMBER", "api", "sock", "TAG", "Path", "to", "unix", "domain", "socket", "use", "by", "the", "API", "NUMBER", "id", "TAG", "MicroVM", "unique", "identifier", "NUMBER", "help", "Show", "the", "help", "message", "NUMBER", "no", "api", "Optional", "parameter", "which", "allows", "starting", "and", "use", "a", "microVM", "without", "an", "active", "API", "socket", "NUMBER", "start", "time", "us", "TAG", "seccomp", "level", "TAG", "Level", "of", "seccomp", "filtering", "that", "will", "be", "pass", "to", "executed", "path", "as", "argument", "NUMBER", "Level", "NUMBER", "No", "filtering", "NUMBER", "Level", "NUMBER", "Seccomp", "filtering", "by", "syscall", "number", "NUMBER", "Level", "NUMBER", "Seccomp", "filtering", "by", "syscall", "number", "and", "argument", "values", "NUMBER", "So", "version", "V", "has", "already", "be", "deprecate", "in", "the", "new", "release", "I", "ve", "find", "that", "in", "PR", "LINK", "microvm", "firecracker", "pull", "NUMBER", "we", "ve", "replaced", "clap", "with", "our", "own", "args", "parser", "and", "maybe", "forgot", "to", "add", "the", "dealing", "with", "version", "V", "PR", "for", "switching", "to", "the", "new", "implementation", "NUMBER", "First", "commit", "before", "decoupling", "NUMBER", "d", "NUMBER", "e", "NUMBER", "f", "NUMBER", "ea", "NUMBER", "fe", "NUMBER", "e", "NUMBER", "c", "Last", "decoupling", "commit", "NUMBER", "eb", "NUMBER", "ccf", "NUMBER", "bb", "NUMBER", "d", "NUMBER", "f", "NUMBER", "d", "NUMBER", "d", "NUMBER", "aed", "NUMBER", "d", "Hi", "I", "have", "just", "finished", "the", "performance", "test", "on", "block", "net", "devices", "and", "you", "can", "find", "the", "result", "attached", "bellow", "NUMBER", "I", "run", "each", "test", "net", "block", "twice", "NUMBER", "minutes", "each", "NUMBER", "decoupling", "NUMBER", "zip", "LINK", "microvm", "firecracker", "file", "NUMBER", "decoupling", "NUMBER", "zip", "Adding", "some", "plots", "on", "the", "results", "posted", "above", "NUMBER", "Also", "here", "be", "some", "details", "about", "the", "test", "methodology", "the", "network", "performance", "was", "test", "use", "iperf", "NUMBER", "while", "the", "block", "device", "was", "test", "use", "Fio", "NUMBER", "The", "parameters", "and", "test", "cases", "can", "be", "seen", "in", "the", "results", "NUMBER", "the", "test", "were", "run", "on", "an", "i", "NUMBER", "metal", "instance", "use", "only", "by", "me", "so", "there", "should", "be", "no", "additional", "noise", "NUMBER", "the", "test", "were", "run", "one", "by", "one", "so", "each", "one", "took", "advantage", "of", "full", "capabilities", "on", "the", "machine", "NUMBER", "I", "use", "the", "already", "implement", "test", "framework", "run", "Firecracker", "on", "a", "local", "docker", "image", "spawning", "guest", "machines", "inside", "it", "etc", "so", "the", "test", "environment", "should", "be", "identical", "to", "a", "CI", "one", "NUMBER", "test", "use", "NUMBER", "decoupling_plots", "NUMBER", "zip", "LINK", "microvm", "firecracker", "file", "NUMBER", "decoupling_plots", "NUMBER", "zip", "Added", "a", "legend", "for", "the", "test", "case", "name", "and", "labels", "for", "block", "test", "features", "NUMBER", "decoupling_plots", "NUMBER", "zip", "LINK", "microvm", "firecracker", "file", "NUMBER", "decoupling_plots", "NUMBER", "zip", "Adding", "some", "update", "note", "on", "the", "issue", "the", "network", "performance", "test", "results", "don", "t", "show", "a", "high", "variation", "so", "I", "think", "we", "can", "use", "them", "as", "a", "reference", "NUMBER", "It", "seems", "like", "there", "be", "a", "small", "degradation", "on", "the", "udp", "g", "NUMBER", "h", "UDP", "protocol", "host", "to", "guest", "transmission", "NUMBER", "on", "the", "other", "hand", "the", "block", "performance", "test", "present", "big", "variations", "in", "some", "of", "the", "following", "test", "cases", "NUMBER", "randread", "NUMBER", "read", "NUMBER", "readwrite", "NUMBER", "randread", "NUMBER", "read", "NUMBER", "readwrite", "to", "be", "notice", "that", "all", "of", "them", "be", "test", "read", "or", "both", "read", "write", "NUMBER", "The", "variations", "may", "be", "causes", "by", "I", "O", "latencies", "of", "the", "normal", "disk", "NUMBER", "I", "be", "going", "to", "perform", "some", "more", "test", "but", "this", "time", "use", "a", "ramdisk", "which", "should", "provide", "more", "stable", "results", "NUMBER", "I", "will", "update", "this", "issue", "with", "the", "new", "results", "as", "soon", "as", "possible", "NUMBER", "Test", "results", "for", "block", "device", "with", "ramdisk", "NUMBER", "They", "were", "run", "on", "the", "same", "environment", "as", "mention", "before", "blk_ramdisk", "NUMBER", "zip", "LINK", "microvm", "firecracker", "file", "NUMBER", "blk_ramdisk", "NUMBER", "zip", "I", "ve", "do", "multiple", "test", "for", "assessing", "network", "device", "performance", "for", "the", "inconclusive", "data", "pertaining", "UDP", "guest", "to", "host", "traffic", "after", "decoupling", "NUMBER", "The", "resulted", "data", "do", "not", "indicate", "any", "regression", "for", "this", "case", "NUMBER", "My", "conclusion", "be", "that", "we", "do", "not", "have", "any", "network", "device", "performance", "degradation", "NUMBER", "However", "we", "must", "investigate", "further", "the", "guest", "CPU", "performance", "to", "understand", "why", "we", "have", "these", "variations", "NUMBER", "I", "ve", "attached", "plots", "with", "network", "throughput", "for", "the", "udp", "g", "NUMBER", "h", "NUMBER", "mbit", "s", "use", "case", "every", "iteration", "has", "NUMBER", "loss", "NUMBER", "udp", "g", "NUMBER", "h", "NUMBER", "plot", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "b", "NUMBER", "NUMBER", "cfe", "NUMBER", "ea", "NUMBER", "d", "NUMBER", "NUMBER", "a", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "png", "udp", "g", "NUMBER", "h", "NUMBER", "plot", "NUMBER", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "ba", "NUMBER", "NUMBER", "cfe", "NUMBER", "ea", "NUMBER", "NUMBER", "b", "NUMBER", "png", "udp", "g", "NUMBER", "h", "NUMBER", "NUMBER", "_iter", "NUMBER", "_vcpu", "plot", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "NUMBER", "cfe", "NUMBER", "ea", "NUMBER", "d", "d", "NUMBER", "e", "NUMBER", "e", "NUMBER", "png", "I", "ve", "attached", "a", "comparison", "of", "the", "block", "device", "performance", "before", "and", "after", "decoupling", "use", "the", "same", "commit", "referenced", "here", "LINK", "microvm", "firecracker", "issue", "NUMBER", "issuecomment", "NUMBER", "Testing", "methodology", "NUMBER", "For", "each", "test", "type", "add", "in", "PR", "NUMBER", "a", "NUMBER", "minute", "test", "was", "executed", "on", "a", "commit", "before", "decoupling", "and", "on", "another", "commit", "after", "decoupling", "NUMBER", "NUMBER", "FIO", "was", "configured", "to", "output", "the", "bandwidth", "iops", "and", "latency", "status", "every", "NUMBER", "second", "NUMBER", "NUMBER", "In", "parallel", "to", "the", "FIO", "process", "every", "one", "second", "the", "guest", "CPU", "load", "was", "sampled", "NUMBER", "NUMBER", "The", "raw", "outputted", "data", "was", "parsed", "and", "grouped", "into", "a", "CSV", "NUMBER", "NUMBER", "For", "each", "generate", "CSV", "a", "graph", "has", "be", "created", "NUMBER", "Result", "format", "Each", "graph", "be", "actually", "rendered", "as", "a", "HTML", "file", "and", "it", "contains", "all", "the", "generate", "measurements", "for", "each", "test", "NUMBER", "Since", "it", "s", "an", "interactive", "HTML", "individual", "lines", "can", "be", "enable", "or", "disabled", "in", "order", "to", "have", "a", "proper", "scale", "of", "the", "data", "NUMBER", "blk_compare", "NUMBER", "zip", "LINK", "microvm", "firecracker", "file", "NUMBER", "blk_compare", "NUMBER", "zip", "We", "decided", "that", "for", "large", "block", "sizes", "there", "be", "a", "performance", "degradation", "of", "NUMBER", "NUMBER", "For", "all", "other", "cases", "there", "be", "situation", "where", "code", "after", "decoupling", "performs", "better", "and", "there", "be", "situation", "where", "the", "code", "before", "decoupling", "performs", "better", "NUMBER", "All", "within", "NUMBER", "range", "NUMBER", "We", "can", "close", "this", "issue", "NUMBER", "Hey", "I", "would", "love", "to", "try", "to", "work", "on", "this", "one", "can", "you", "provide", "some", "more", "details", "andreeaflorescu", "Got", "it", "thanks", "i", "will", "try", "to", "find", "something", "in", "issue", "NUMBER", "Because", "the", "Vcpu", "thread", "be", "left", "in", "the", "Running", "state", "at", "the", "end", "of", "the", "test", "it", "sometimes", "panics", "on", "sending", "its", "exit", "reason", "to", "the", "now", "dead", "Vmm", "object", "once", "the", "test", "completes", "NUMBER", "All", "test", "with", "a", "separate", "run", "vcpu", "thread", "have", "the", "same", "problem", "NUMBER", "The", "fix", "be", "to", "make", "sure", "vcpus", "be", "in", "the", "Paused", "state", "at", "the", "end", "of", "test", "s", "NUMBER", "Reason", "for", "This", "PR", "Brings", "all", "the", "decoupling", "work", "relate", "to", "Firecracker", "v", "NUMBER", "to", "the", "master", "branch", "NUMBER", "Fixes", "NUMBER", "Fixes", "NUMBER", "Fixes", "NUMBER", "Fixes", "NUMBER", "Fixes", "NUMBER", "Fixes", "NUMBER", "Fixes", "NUMBER", "Fixes", "NUMBER", "Description", "of", "Changes", "Merge", "method", "use", "Rebased", "the", "refactoring", "epoll_handler", "branch", "on", "top", "of", "master", "this", "PR", "will", "do", "a", "clean", "merge", "back", "into", "master", "NUMBER", "High", "level", "summary", "NUMBER", "Implement", "an", "I", "O", "EventManager", "polly", "crate", "NUMBER", "NUMBER", "MicroVM", "lifetime", "clearly", "split", "between", "pre", "boot", "and", "post", "boot", "NUMBER", "NUMBER", "Vmm", "interface", "organized", "in", "stacked", "layers", "each", "with", "its", "own", "concern", "NUMBER", "NUMBER", "Metrics", "driver", "and", "Serial", "device", "driven", "by", "EventManager", "polly", "NUMBER", "NUMBER", "Block", "device", "driven", "by", "EventManager", "polly", "NUMBER", "NUMBER", "Net", "device", "driven", "by", "EventManager", "polly", "NUMBER", "NUMBER", "Vmm", "Exit", "event", "and", "Api", "events", "driven", "by", "EventManager", "polly", "NUMBER", "NUMBER", "Vsock", "device", "driven", "by", "EventManager", "polly", "NUMBER", "High", "level", "microVm", "interface", "vmm", "components", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "b", "NUMBER", "NUMBER", "e", "NUMBER", "NUMBER", "ea", "NUMBER", "NUMBER", "f", "NUMBER", "dab", "NUMBER", "png", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "It", "looks", "like", "not", "all", "the", "change", "from", "f", "NUMBER", "ended", "up", "in", "this", "rebase", "NUMBER", "Specifically", "we", "be", "loosing", "the", "ability", "to", "specify", "a", "different", "seccomp", "filter", "for", "VMM", "and", "for", "the", "vcpus", "NUMBER", "What", "didn", "t", "make", "it", "exactly", "We", "should", "be", "able", "to", "specify", "different", "filters", "for", "each", "thread", "now", "we", "still", "specify", "the", "same", "cloned", "filter", "set", "but", "the", "capability", "for", "independent", "sets", "should", "be", "there", "NUMBER", "aghecenco", "andreeaflorescu", "iulianbarbu", "I", "ve", "address", "all", "your", "comments", "please", "take", "a", "look", "NUMBER", "We", "synced", "on", "this", "offline", "NUMBER", "On", "the", "master", "branch", "the", "Vmm", "would", "allow", "setting", "different", "seccomp", "filters", "on", "the", "vmm", "and", "vcpu", "threads", "through", "its", "public", "interface", "NUMBER", "The", "functionality", "was", "call", "through", "the", "public", "function", "start_microvm", "which", "received", "as", "parameters", "NUMBER", "filters", "one", "for", "vmm", "and", "one", "for", "the", "vcpus", "NUMBER", "Since", "start_microvm", "no", "longer", "exists", "and", "the", "start_vcpu", "function", "that", "allows", "setting", "up", "custom", "seccomp", "filters", "be", "private", "setting", "up", "different", "seccomp", "filters", "outside", "of", "the", "Vmm", "be", "not", "possible", "NUMBER", "Since", "there", "be", "other", "interface", "change", "required", "we", "ll", "do", "these", "all", "at", "once", "in", "a", "future", "PR", "NUMBER", "I", "ve", "add", "a", "commit", "to", "make", "the", "Vmm", "programmatic", "interface", "public", "NUMBER", "Last", "part", "of", "the", "review", "NUMBER", "Sorry", "for", "the", "delay", "NUMBER", "It", "looks", "like", "we", "be", "miss", "one", "commit", "the", "one", "that", "remove", "block", "device", "rescan", "NUMBER", "We", "re", "not", "miss", "the", "commit", "there", "was", "just", "a", "leftover", "action", "definition", "which", "I", "ve", "now", "remove", "NUMBER", "Good", "catch", "Fixed", "NUMBER", "Jailer", "requires", "a", "NUMA", "node", "for", "deploying", "a", "microVM", "this", "NUMA", "node", "be", "use", "to", "pin", "the", "new", "microVM", "to", "the", "cores", "all", "of", "them", "and", "memory", "of", "node", "by", "write", "cpuset", "NUMBER", "cpus", "and", "cpuset", "NUMBER", "mems", "cgroup", "file", "NUMBER", "It", "would", "be", "useful", "to", "be", "able", "to", "not", "only", "isolate", "the", "process", "in", "a", "NUMA", "node", "but", "be", "able", "to", "isolate", "it", "in", "a", "specific", "CPU", "or", "CPU", "set", "NUMBER", "This", "be", "needed", "to", "mitigate", "recent", "micro", "architecture", "CPU", "vulnerabilities", "Spectre", "Meltdown", "and", "friends", "NUMBER", "The", "idea", "be", "not", "to", "share", "threads", "of", "the", "same", "core", "across", "micro", "VMs", "NUMBER", "As", "mention", "before", "jailer", "not", "only", "pins", "the", "process", "to", "the", "node", "CPUs", "it", "also", "pins", "the", "memory", "to", "the", "same", "NUMA", "node", "NUMBER", "It", "would", "be", "useful", "also", "to", "select", "the", "memory", "node", "independently", "NUMBER", "Note", "that", "some", "architectures", "allows", "NUMA", "nodes", "without", "memory", "associated", "LINK", "issuecomment", "NUMBER", "and", "jailer", "will", "not", "run", "in", "such", "machines", "NUMBER", "If", "it", "s", "interesting", "for", "the", "project", "I", "can", "prepare", "an", "RFC", "PR", "for", "this", "NUMBER", "christian", "NUMBER", "It", "be", "possible", "to", "override", "cgroup", "which", "was", "created", "by", "jailer", "before", "booting", "firecracker", "right", "In", "our", "use", "case", "we", "start", "the", "microVMs", "with", "config", "file", "option", "so", "as", "soon", "as", "we", "start", "the", "jailer", "it", "starts", "the", "firecracker", "process", "and", "the", "VM", "starts", "automatically", "NUMBER", "We", "ve", "do", "some", "test", "and", "if", "we", "overwrite", "cpuset", "NUMBER", "cpus", "content", "it", "seems", "that", "the", "process", "be", "migrated", "to", "the", "new", "CPU", "s", "NUMBER", "This", "do", "not", "works", "for", "memory", "cpuset", "NUMBER", "mems", "NUMBER", "Also", "we", "don", "t", "like", "the", "idea", "of", "starting", "the", "VM", "in", "a", "CPU", "and", "later", "switching", "it", "to", "another", "one", "NUMBER", "The", "most", "required", "use", "case", "for", "isolating", "a", "process", "in", "a", "single", "core", "use", "to", "be", "increasing", "security", "as", "explained", "in", "the", "description", "and", "this", "kind", "of", "break", "it", "NUMBER", "We", "think", "this", "can", "be", "useful", "to", "more", "people", "and", "it", "would", "be", "nice", "to", "have", "this", "options", "available", "at", "the", "jailer", "NUMBER", "Hi", "christian", "NUMBER", "The", "production", "setup", "recommendation", "docs", "LINK", "microvm", "firecracker", "blob", "master", "docs", "prod", "host", "setup", "NUMBER", "md", "provide", "a", "couple", "of", "ways", "to", "mitigate", "micro", "architecture", "CPU", "vulnerabilities", "at", "the", "host", "level", "NUMBER", "These", "should", "provide", "the", "protection", "you", "be", "looking", "for", "NUMBER", "Are", "there", "any", "other", "reasons", "you", "want", "to", "pin", "the", "VMs", "to", "specific", "CPUs", "on", "top", "of", "that", "Also", "we", "need", "some", "time", "to", "dive", "deep", "on", "cpu", "pinning", "and", "it", "s", "implications", "NUMBER", "We", "will", "get", "back", "to", "you", "next", "week", "NUMBER", "Hello", "sandreim", "Let", "me", "give", "you", "some", "info", "about", "our", "use", "case", "NUMBER", "I", "m", "work", "on", "integrating", "Firecracker", "with", "OpenNebula", "LINK", "NUMBER", "The", "CPU", "pinning", "feature", "was", "a", "really", "useful", "feature", "for", "our", "users", "and", "we", "would", "like", "to", "be", "able", "to", "have", "it", "totally", "integrated", "with", "Firecracker", "NUMBER", "Apart", "from", "security", "reasons", "we", "think", "that", "add", "this", "as", "an", "optional", "configuration", "will", "add", "more", "flexibility", "for", "managing", "the", "available", "resources", "at", "different", "scenarios", "NUMBER", "For", "example", "it", "will", "allow", "to", "reduce", "the", "noisy", "neighbor", "effect", "although", "this", "could", "to", "some", "extent", "go", "against", "the", "resource", "sharing", "approach", "adopted", "by", "Firecracker", "it", "can", "be", "useful", "in", "some", "specific", "cases", "NUMBER", "Also", "it", "will", "allows", "to", "select", "the", "memory", "node", "for", "NUMA", "architectures", "use", "nodes", "without", "memory", "NUMBER", "Thanks", "for", "the", "interest", "I", "ll", "be", "waiting", "to", "know", "your", "thoughts", "about", "it", "NUMBER", "Hello", "dianpopa", "Yes", "that", "s", "one", "of", "our", "use", "cases", "our", "idea", "be", "to", "be", "able", "to", "select", "different", "NUMA", "nodes", "for", "CPU", "and", "memory", "but", "also", "we", "d", "like", "to", "be", "able", "to", "pin", "a", "MicroVM", "to", "a", "specific", "core", "not", "to", "the", "entire", "NUMA", "node", "if", "needed", "NUMBER", "Our", "idea", "be", "to", "add", "more", "flexibility", "to", "jailer", "to", "accommodate", "these", "use", "cases", "while", "preserving", "its", "current", "NUMA", "behavior", "NUMBER", "I", "did", "try", "to", "override", "the", "cgroups", "and", "it", "works", "for", "CPU", "NUMBER", "And", "for", "memory", "if", "cpuset", "NUMBER", "memory_migrate", "be", "enable", "NUMBER", "However", "memory_migrate", "produces", "unnecessary", "trashing", "of", "memory", "pages", "with", "the", "associated", "cross", "noise", "for", "the", "other", "micro", "vms", "NUMBER", "Moreover", "for", "machines", "with", "no", "memory", "nodes", "we", "could", "not", "test", "it", "directly", "in", "a", "system", "with", "a", "NUMA", "node", "without", "memory", "but", "it", "most", "probably", "fail", "the", "allocation", "NUMBER", "Hello", "acatangiu", "sure", "I", "ll", "be", "there", "NUMBER", "Thanks", "for", "the", "interest", "There", "be", "a", "high", "number", "of", "CI", "failures", "with", "following", "error", "currently", "from", "NUMBER", "PR", "NUMBER", "be", "affected", "by", "this", "NUMBER", "_", "Firecracker", "devtool", "Error", "accessing", "Docker", "NUMBER", "Please", "make", "sure", "the", "Docker", "daemon", "be", "run", "and", "that", "you", "be", "part", "of", "the", "docker", "group", "NUMBER", "For", "more", "information", "see", "LINK", "postinstall", "_", "Happens", "mostly", "on", "X", "NUMBER", "Reason", "for", "This", "PR", "The", "Python", "style", "check", "test", "was", "doing", "all", "the", "operations", "by", "serializing", "commands", "which", "took", "a", "lot", "of", "time", "NUMBER", "This", "PR", "runs", "all", "commands", "use", "the", "async", "module", "reducing", "execution", "time", "from", "NUMBER", "s", "to", "NUMBER", "s", "on", "a", "typical", "desktop", "NUMBER", "Description", "of", "Changes", "Run", "all", "commands", "asynchronously", "and", "take", "into", "account", "all", "executed", "commands", "including", "their", "stdout", "stderr", "and", "return", "code", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "x", "No", "new", "unsafe", "code", "has", "be", "add", "We", "could", "but", "we", "need", "to", "make", "sure", "that", "we", "don", "t", "lose", "the", "current", "things", "that", "we", "check", "for", "NUMBER", "As", "far", "as", "I", "ve", "seen", "we", "actually", "need", "to", "check", "for", "more", "things", "such", "as", "alphabetically", "sorted", "imports", "which", "can", "be", "do", "by", "add", "flake", "NUMBER", "Either", "way", "it", "s", "something", "that", "needs", "to", "be", "looked", "into", "but", "it", "should", "be", "do", "in", "a", "different", "PR", "NUMBER", "The", "point", "of", "this", "PR", "be", "to", "reduce", "test", "duration", "and", "add", "more", "clarity", "to", "commands", "executed", "in", "separate", "shells", "NUMBER", "Send", "any", "signal", "to", "a", "run", "Firecracker", "and", "it", "will", "crash", "with", "epoll", "interrupted", "error", "NUMBER", "Epoll", "can", "be", "interrupted", "by", "signals", "and", "returns", "EINTR", "NUMBER", "This", "should", "be", "not", "treated", "as", "error", "NUMBER", "One", "relate", "issue", "be", "that", "you", "be", "unable", "to", "do", "gdb", "attach", "NUMBER", "Occasionally", "we", "see", "that", "the", "PR", "test", "fail", "due", "to", "reasons", "that", "be", "not", "relate", "to", "the", "change", "code", "itself", "NUMBER", "We", "should", "investigate", "and", "fix", "this", "NUMBER", "Reason", "for", "This", "PR", "NUMBER", "Description", "of", "Changes", "Raised", "the", "coverage", "for", "builder", "NUMBER", "rs", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "Update", "on", "this", "NUMBER", "Worked", "with", "iulianbarbu", "and", "identified", "the", "code", "paths", "that", "be", "not", "test", "as", "follows", "MMIO", "VirtioDevice", "implementation", "for", "Net", "some", "function", "BlockDeviceConfig", "NetDeviceConfig", "These", "will", "be", "test", "in", "a", "subsequent", "PR", "NUMBER", "We", "also", "looked", "at", "the", "builder", "function", "that", "can", "be", "test", "in", "a", "meaningful", "way", "and", "we", "agreed", "on", "the", "following", "create_vcpus_", "attach_", "_devices", "For", "the", "rest", "we", "can", "only", "have", "coverage", "test", "and", "some", "of", "them", "actually", "come", "with", "the", "disadvantage", "that", "it", "makes", "it", "impossible", "to", "run", "the", "test", "in", "parallel", "in", "the", "future", "NUMBER", "I", "somewhat", "disagree", "here", "NUMBER", "The", "idea", "of", "unit", "test", "be", "to", "test", "each", "individual", "unit", "NUMBER", "Start", "from", "the", "smallest", "unit", "and", "test", "other", "units", "above", "with", "the", "assumptions", "that", "the", "units", "below", "be", "also", "test", "and", "function", "correctly", "NUMBER", "Therefore", "I", "believe", "test", "the", "individual", "function", "and", "that", "they", "return", "Ok", "when", "that", "s", "expected", "be", "fine", "and", "be", "not", "false", "coverage", "as", "long", "as", "we", "also", "independently", "test", "the", "underlying", "units", "NUMBER", "I", "think", "I", "ve", "address", "your", "feedback", "lauralt", "acatangiu", "andreeaflorescu", "please", "take", "a", "look", "again", "NUMBER", "Reason", "for", "This", "PR", "NUMBER", "musl", "calls", "sigprocmask", "from", "pthread_exit", "but", "we", "don", "t", "want", "to", "whitelist", "the", "syscall", "NUMBER", "This", "change", "be", "currently", "blocking", "firecracker", "containerd", "to", "use", "Firecracker", "NUMBER", "While", "the", "issue", "did", "exist", "in", "NUMBER", "we", "be", "seeing", "this", "seccomp", "violation", "more", "than", "before", "somehow", "NUMBER", "See", "LINK", "microvm", "firecracker", "containerd", "build", "NUMBER", "for", "the", "actual", "test", "failure", "NUMBER", "Description", "of", "Changes", "Basically", "follows", "what", "acatangiu", "has", "propose", "on", "NUMBER", "keep", "vCPU", "threads", "run", "to", "avoid", "calling", "pthread_exit", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "The", "x", "NUMBER", "build", "LINK", "pr", "NUMBER", "s", "NUMBER", "amazonaws", "NUMBER", "com", "pr", "logs", "x", "NUMBER", "_", "NUMBER", "NUMBER", "kzys", "firecracker", "NUMBER", "df", "NUMBER", "log", "be", "fail", "but", "it", "seems", "like", "not", "relate", "to", "the", "change", "NUMBER", "Firecracker", "devtool", "Error", "accessing", "Docker", "NUMBER", "Please", "make", "sure", "the", "Docker", "daemon", "be", "run", "and", "that", "you", "be", "part", "of", "the", "docker", "group", "NUMBER", "For", "more", "information", "see", "LINK", "postinstall", "andreeaflorescu", "That", "be", "true", "NUMBER", "for", "_i", "in", "NUMBER", "be", "pretty", "arbitrary", "NUMBER", "How", "about", "change", "that", "to", "loop", "pytest", "will", "kill", "the", "test", "if", "it", "takes", "forever", "NUMBER", "andreeaflorescu", "I", "think", "we", "could", "NUMBER", "In", "production", "the", "transition", "to", "exit", "calls", "Barrier", "wait", "to", "block", "indefinitely", "NUMBER", "In", "test", "the", "test", "code", "calls", "Barrier", "wait", "to", "unblock", "the", "thread", "then", "reads", "exit_evt", "NUMBER", "It", "looks", "much", "better", "Thanks", "for", "the", "suggestion", "NUMBER", "The", "aarch", "NUMBER", "build", "LINK", "pr", "NUMBER", "s", "NUMBER", "amazonaws", "NUMBER", "com", "pr", "logs", "aarch", "NUMBER", "NUMBER", "kzys", "firecracker", "NUMBER", "b", "NUMBER", "a", "NUMBER", "log", "be", "fail", "but", "it", "seems", "unrelated", "to", "the", "change", "I", "m", "make", "NUMBER", "I", "didn", "t", "squash", "the", "last", "commit", "NUMBER", "b", "NUMBER", "a", "NUMBER", "ce", "NUMBER", "c", "NUMBER", "d", "NUMBER", "feeb", "NUMBER", "c", "NUMBER", "a", "NUMBER", "dd", "NUMBER", "b", "NUMBER", "b", "NUMBER", "into", "the", "first", "one", "NUMBER", "ee", "NUMBER", "ae", "NUMBER", "c", "NUMBER", "b", "NUMBER", "c", "NUMBER", "b", "NUMBER", "a", "NUMBER", "d", "NUMBER", "fe", "NUMBER", "a", "NUMBER", "bc", "NUMBER", "for", "make", "code", "review", "easier", "but", "would", "do", "after", "review", "NUMBER", "serban", "NUMBER", "Hmm", "how", "did", "you", "reproduce", "the", "issue", "on", "your", "end", "Just", "starting", "multiple", "Firecrackers", "to", "simulate", "heavy", "load", "Splitting", "the", "PR", "makes", "sense", "NUMBER", "Here", "be", "the", "one", "without", "KVM_EXIT_SHUTDOWN", "fix", "NUMBER", "serban", "NUMBER", "Hmm", "how", "did", "you", "reproduce", "the", "issue", "on", "your", "end", "Just", "starting", "multiple", "Firecrackers", "to", "simulate", "heavy", "load", "Splitting", "the", "PR", "makes", "sense", "NUMBER", "Here", "be", "the", "one", "without", "KVM_EXIT_SHUTDOWN", "fix", "NUMBER", "kzys", "Thanks", "for", "splitting", "the", "PR", "NUMBER", "For", "reproducing", "the", "issue", "I", "just", "start", "a", "VM", "with", "NUMBER", "vCPUs", "and", "then", "issue", "a", "reboot", "command", "NUMBER", "I", "tried", "this", "a", "couple", "of", "times", "max", "NUMBER", "times", "and", "the", "issue", "reproduced", "once", "NUMBER", "I", "made", "sure", "that", "I", "was", "on", "your", "branch", "NUMBER", "serban", "NUMBER", "Hmm", "how", "did", "you", "reproduce", "the", "issue", "on", "your", "end", "Just", "starting", "multiple", "Firecrackers", "to", "simulate", "heavy", "load", "Splitting", "the", "PR", "makes", "sense", "NUMBER", "Here", "be", "the", "one", "without", "KVM_EXIT_SHUTDOWN", "fix", "NUMBER", "kzys", "Thanks", "for", "splitting", "the", "PR", "NUMBER", "For", "reproducing", "the", "issue", "I", "just", "start", "a", "VM", "with", "NUMBER", "vCPUs", "and", "then", "issue", "a", "reboot", "command", "NUMBER", "I", "tried", "this", "a", "couple", "of", "times", "max", "NUMBER", "times", "and", "the", "issue", "reproduced", "once", "NUMBER", "I", "made", "sure", "that", "I", "was", "on", "your", "branch", "NUMBER", "Sorry", "kzys", "I", "did", "the", "test", "on", "an", "old", "binary", "NUMBER", "I", "can", "t", "reproduce", "the", "issue", "with", "your", "fix", "NUMBER", "But", "I", "would", "like", "to", "analyze", "the", "solution", "a", "bit", "NUMBER", "serban", "NUMBER", "Good", "to", "hear", "Let", "me", "know", "if", "anything", "I", "can", "help", "NUMBER", "Currently", "this", "issue", "be", "blocking", "us", "to", "use", "Firecracker", "post", "NUMBER", "on", "firecracker", "containerd", "NUMBER", "BTW", "I", "m", "going", "to", "squash", "the", "commit", "NUMBER", "kzys", "I", "investigated", "the", "problem", "NUMBER", "I", "think", "we", "should", "change", "the", "way", "we", "handle", "the", "VcpuExit", "Shutdown", "signal", "that", "we", "get", "from", "KVM", "NUMBER", "Right", "now", "we", "treat", "it", "as", "an", "VcpuUnhandledKvmExit", "error", "LINK", "microvm", "firecracker", "blob", "c", "NUMBER", "e", "NUMBER", "c", "NUMBER", "b", "NUMBER", "b", "NUMBER", "d", "NUMBER", "ad", "NUMBER", "ecfee", "NUMBER", "ab", "NUMBER", "db", "NUMBER", "src", "vmm", "src", "vstate", "NUMBER", "rs", "L", "NUMBER", "in", "which", "case", "we", "end", "up", "sending", "a", "signal", "to", "the", "VMM", "thread", "to", "exit", "with", "status", "NUMBER", "LINK", "microvm", "firecracker", "blob", "c", "NUMBER", "e", "NUMBER", "c", "NUMBER", "b", "NUMBER", "b", "NUMBER", "d", "NUMBER", "ad", "NUMBER", "ecfee", "NUMBER", "ab", "NUMBER", "db", "NUMBER", "src", "vmm", "src", "vstate", "NUMBER", "rs", "L", "NUMBER", "NUMBER", "This", "be", "usually", "an", "error", "code", "and", "doesn", "t", "seem", "fit", "for", "this", "use", "case", "NUMBER", "Personally", "I", "would", "probably", "send", "a", "success", "code", "instead", "pause", "the", "vCPU", "thread", "and", "wait", "for", "the", "VMM", "thread", "to", "kill", "the", "process", "NUMBER", "The", "barrier", "be", "also", "an", "option", "but", "I", "wouldn", "t", "send", "an", "error", "status", "code", "anyway", "NUMBER", "firecracker", "microvm", "compute", "capsule", "what", "do", "you", "think", "serban", "NUMBER", "I", "don", "t", "have", "strong", "opinion", "on", "that", "NUMBER", "Regarding", "the", "exit", "code", "doesn", "t", "it", "send", "FC_EXIT_CODE_OK", "LINK", "microvm", "firecracker", "blob", "NUMBER", "fb", "NUMBER", "e", "NUMBER", "a", "NUMBER", "f", "NUMBER", "aed", "NUMBER", "f", "NUMBER", "a", "NUMBER", "c", "NUMBER", "b", "src", "vmm", "src", "lib", "NUMBER", "rs", "L", "NUMBER", "I", "guess", "the", "cleanest", "solution", "here", "be", "to", "drop", "the", "exited", "state", "and", "just", "keep", "run", "and", "paused", "NUMBER", "This", "also", "keep", "our", "logic", "simple", "and", "clear", "NUMBER", "On", "error", "or", "valid", "exit", "commands", "the", "Vcpu", "s", "will", "write", "to", "the", "exit_evfd", "to", "notify", "the", "Vmm", "then", "move", "to", "the", "paused", "state", "NUMBER", "The", "responsibility", "and", "control", "be", "thus", "pass", "to", "the", "Vmm", "thread", "NUMBER", "acatangiu", "Calling", "StateMachine", "finish", "Self", "paused", "instead", "of", "StateMachine", "finish", "Self", "exited", "be", "possible", "NUMBER", "We", "have", "some", "error", "cases", "that", "transition", "the", "state", "machine", "to", "exited", "NUMBER", "Do", "you", "want", "to", "change", "all", "of", "them", "to", "use", "paused", "What", "do", "you", "think", "about", "Error", "VcpuUnhandledKvmExit", "I", "agree", "it", "be", "not", "unhandle", "but", "technically", "all", "of", "the", "error", "cases", "be", "not", "unhandle", "NUMBER", "So", "I", "don", "t", "have", "strong", "opinion", "on", "that", "and", "want", "to", "see", "on", "firecracker", "microvm", "compute", "capsule", "team", "s", "agreement", "regard", "the", "approach", "first", "NUMBER", "kzys", "you", "re", "right", "it", "exits", "with", "FC_EXIT_CODE_OK", "NUMBER", "I", "thought", "that", "it", "exits", "with", "the", "value", "that", "has", "be", "write", "in", "exit_evt", "NUMBER", "This", "still", "looks", "like", "a", "problem", "to", "me", "because", "it", "means", "that", "Firecracker", "also", "exits", "with", "FC_EXIT_CODE_OK", "in", "case", "a", "vCPU", "receives", "a", "KVM_EXIT_INTERNAL_ERROR", "for", "example", "NUMBER", "I", "guess", "the", "cleanest", "solution", "here", "be", "to", "drop", "the", "exited", "state", "and", "just", "keep", "run", "and", "paused", "NUMBER", "This", "also", "keep", "our", "logic", "simple", "and", "clear", "NUMBER", "I", "jumped", "the", "gun", "a", "bit", "here", "NUMBER", "It", "seems", "the", "exited", "state", "do", "have", "value", "NUMBER", "I", "propose", "the", "following", "mechanism", "run", "state", "encounters", "exit", "reason", "X", "where", "X", "could", "be", "an", "exit", "command", "an", "error", "etc", "return", "StateMachine", "next", "Self", "exited", "exited", "state", "NUMBER", "exited", "state", "NUMBER", "vcpu", "NUMBER", "exit_evfd", "NUMBER", "write", "NUMBER", "NUMBER", "use", "the", "exist", "communication", "channels", "to", "send", "to", "Vmm", "the", "exit", "reason", "VcpuResponse", "Exited", "X", "NUMBER", "block", "on", "waiting", "for", "another", "command", "from", "Vmm", "vcpu", "NUMBER", "event_receiver", "NUMBER", "recv", "NUMBER", "another", "command", "should", "never", "come", "but", "even", "if", "it", "do", "this", "state", "should", "return", "next", "state", "as", "StateMachine", "finish", "Self", "exited", "which", "will", "just", "stop", "the", "state", "machine", "NUMBER", "This", "flow", "should", "solve", "all", "our", "requirements", "NUMBER", "I", "guess", "the", "cleanest", "solution", "here", "be", "to", "drop", "the", "exited", "state", "and", "just", "keep", "run", "and", "paused", "NUMBER", "This", "also", "keep", "our", "logic", "simple", "and", "clear", "NUMBER", "I", "jumped", "the", "gun", "a", "bit", "here", "NUMBER", "It", "seems", "the", "exited", "state", "do", "have", "value", "NUMBER", "I", "propose", "the", "following", "mechanism", "run", "state", "encounters", "exit", "reason", "X", "where", "X", "could", "be", "an", "exit", "command", "an", "error", "etc", "return", "StateMachine", "next", "Self", "exited", "exited", "state", "NUMBER", "exited", "state", "NUMBER", "vcpu", "NUMBER", "exit_evfd", "NUMBER", "write", "NUMBER", "NUMBER", "use", "the", "exist", "communication", "channels", "to", "send", "to", "Vmm", "the", "exit", "reason", "VcpuResponse", "Exited", "X", "NUMBER", "block", "on", "waiting", "for", "another", "command", "from", "Vmm", "vcpu", "NUMBER", "event_receiver", "NUMBER", "recv", "NUMBER", "another", "command", "should", "never", "come", "but", "even", "if", "it", "do", "this", "state", "should", "return", "next", "state", "as", "StateMachine", "finish", "Self", "exited", "which", "will", "just", "stop", "the", "state", "machine", "NUMBER", "This", "flow", "should", "solve", "all", "our", "requirements", "NUMBER", "This", "could", "work", "NUMBER", "I", "guess", "the", "cleanest", "solution", "here", "be", "to", "drop", "the", "exited", "state", "and", "just", "keep", "run", "and", "paused", "NUMBER", "This", "also", "keep", "our", "logic", "simple", "and", "clear", "NUMBER", "I", "jumped", "the", "gun", "a", "bit", "here", "NUMBER", "It", "seems", "the", "exited", "state", "do", "have", "value", "NUMBER", "I", "propose", "the", "following", "mechanism", "run", "state", "encounters", "exit", "reason", "X", "where", "X", "could", "be", "an", "exit", "command", "an", "error", "etc", "return", "StateMachine", "next", "Self", "exited", "exited", "state", "NUMBER", "exited", "state", "NUMBER", "vcpu", "NUMBER", "exit_evfd", "NUMBER", "write", "NUMBER", "NUMBER", "use", "the", "exist", "communication", "channels", "to", "send", "to", "Vmm", "the", "exit", "reason", "VcpuResponse", "Exited", "X", "NUMBER", "block", "on", "waiting", "for", "another", "command", "from", "Vmm", "vcpu", "NUMBER", "event_receiver", "NUMBER", "recv", "NUMBER", "another", "command", "should", "never", "come", "but", "even", "if", "it", "do", "this", "state", "should", "return", "next", "state", "as", "StateMachine", "finish", "Self", "exited", "which", "will", "just", "stop", "the", "state", "machine", "NUMBER", "This", "flow", "should", "solve", "all", "our", "requirements", "NUMBER", "This", "could", "work", "NUMBER", "Although", "it", "might", "be", "easier", "to", "have", "separate", "eventfds", "for", "exit", "one", "for", "i", "NUMBER", "and", "one", "for", "all", "the", "vCPUs", "NUMBER", "When", "we", "receive", "data", "on", "i", "NUMBER", "_evt", "we", "exit", "with", "success", "NUMBER", "When", "we", "receive", "data", "on", "vcpus_exit_evt", "we", "read", "the", "exit", "code", "from", "it", "NUMBER", "Otherwise", "we", "have", "to", "query", "all", "the", "vCPUs", "for", "VcpuResponse", "Exited", "X", "since", "we", "don", "t", "know", "which", "one", "issue", "the", "exit", "command", "NUMBER", "I", "wouldn", "t", "use", "separate", "events", "for", "i", "NUMBER", "and", "vcpu", "exits", "for", "a", "few", "reasons", "on", "an", "exit", "event", "the", "Vmm", "needs", "to", "query", "all", "Vcpu", "s", "for", "the", "reason", "but", "that", "query", "needs", "to", "be", "a", "recv_timeout", "a", "dozen", "ms", "or", "so", "since", "not", "all", "Vcpu", "s", "might", "have", "exited", "NUMBER", "If", "none", "report", "any", "error", "exit", "reason", "then", "process", "can", "end", "with", "retcode", "NUMBER", "NUMBER", "This", "works", "nicely", "for", "the", "i", "NUMBER", "path", "as", "well", "as", "the", "error", "path", "and", "kvm", "exit", "shutdown", "path", "NUMBER", "further", "down", "the", "line", "I", "d", "like", "us", "to", "investigate", "why", "on", "newer", "kernels", "we", "get", "KVM_EXIT_SHUTDOWN", "from", "kvm", "while", "on", "older", "ones", "we", "don", "t", "NUMBER", "If", "we", "can", "make", "that", "work", "on", "all", "version", "we", "can", "simply", "drop", "the", "i", "NUMBER", "mechanism", "NUMBER", "I", "wouldn", "t", "use", "separate", "events", "for", "i", "NUMBER", "and", "vcpu", "exits", "for", "a", "few", "reasons", "on", "an", "exit", "event", "the", "Vmm", "needs", "to", "query", "all", "Vcpu", "s", "for", "the", "reason", "but", "that", "query", "needs", "to", "be", "a", "recv_timeout", "a", "dozen", "ms", "or", "so", "since", "not", "all", "Vcpu", "s", "might", "have", "exited", "NUMBER", "If", "none", "report", "any", "error", "exit", "reason", "then", "process", "can", "end", "with", "retcode", "NUMBER", "NUMBER", "This", "works", "nicely", "for", "the", "i", "NUMBER", "path", "as", "well", "as", "the", "error", "path", "and", "kvm", "exit", "shutdown", "path", "NUMBER", "further", "down", "the", "line", "I", "d", "like", "us", "to", "investigate", "why", "on", "newer", "kernels", "we", "get", "KVM_EXIT_SHUTDOWN", "from", "kvm", "while", "on", "older", "ones", "we", "don", "t", "NUMBER", "If", "we", "can", "make", "that", "work", "on", "all", "version", "we", "can", "simply", "drop", "the", "i", "NUMBER", "mechanism", "NUMBER", "Ok", "looks", "good", "to", "me", "NUMBER", "I", "think", "it", "s", "ok", "to", "use", "the", "same", "eventf", "for", "i", "NUMBER", "and", "for", "the", "vCPUs", "exit", "signal", "NUMBER", "I", "have", "only", "one", "comment", "NUMBER", "I", "wouldn", "t", "block", "on", "vcpu", "NUMBER", "event_receiver", "NUMBER", "recv", "in", "the", "exited", "state", "NUMBER", "I", "wouldn", "t", "want", "to", "risk", "receiving", "another", "command", "NUMBER", "Who", "knows", "NUMBER", "I", "would", "do", "an", "infinite", "wait", "with", "something", "like", "let", "barrier", "Barrier", "new", "NUMBER", "barrier", "NUMBER", "wait", "Infinite", "wait", "should", "work", "fine", "NUMBER", "I", "wouldn", "t", "want", "to", "risk", "receiving", "another", "command", "NUMBER", "Who", "knows", "NUMBER", "Even", "if", "another", "command", "be", "received", "exited", "state", "should", "return", "StateMachine", "finish", "Self", "exited", "which", "will", "end", "the", "thread", "loop", "NUMBER", "Whether", "we", "block", "forever", "or", "wait", "for", "a", "message", "which", "should", "never", "arrive", "be", "fine", "with", "me", "NUMBER", "The", "second", "option", "allows", "a", "bit", "more", "flexibility", "in", "case", "we", "ever", "want", "to", "actually", "join", "the", "thread", "we", "control", "when", "it", "finishes", "and", "can", "be", "joined", "but", "practically", "we", "should", "never", "need", "that", "so", "again", "either", "option", "works", "for", "me", "NUMBER", "kzys", "acatangiu", "andreeaflorescu", "I", "created", "a", "draft", "LINK", "microvm", "firecracker", "pull", "NUMBER", "with", "a", "possible", "implementation", "of", "the", "solutions", "that", "we", "discussed", "NUMBER", "Please", "take", "a", "look", "serban", "NUMBER", "Thanks", "I", "ve", "test", "the", "draft", "PR", "on", "firecracker", "containerd", "and", "seems", "it", "s", "work", "Let", "me", "close", "this", "pull", "request", "NUMBER", "Closed", "in", "favor", "of", "NUMBER", "Reason", "for", "This", "PR", "This", "update", "unit", "test", "NUMBER", "Add", "test", "cases", "for", "sub", "domain", "url", "and", "ip", "port", "NUMBER", "Re", "organize", "test", "cases", "by", "vector", "of", "tuple", "to", "identify", "original", "input", "and", "exp", "value", "NUMBER", "I", "assume", "this", "make", "test", "code", "flexible", "NUMBER", "Description", "of", "Changes", "refactor", "test_uri", "in", "request", "NUMBER", "rs", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "aghecenco", "Thanks", "for", "your", "comment", "NUMBER", "I", "d", "be", "do", "NUMBER", "PTAL", "NUMBER", "The", "associated", "image", "for", "the", "test_microvm_with_api", "i", "NUMBER", "e", "ubuntu", "folder", "do", "not", "lead", "to", "successful", "boot", "on", "aarch", "NUMBER", "We", "did", "not", "detect", "this", "up", "until", "now", "because", "we", "only", "test", "that", "API", "be", "successful", "but", "we", "might", "need", "it", "to", "boot", "in", "the", "future", "NUMBER", "Adding", "support", "for", "a", "memory", "balloon", "device", "will", "allow", "Firecracker", "users", "to", "reclaim", "memory", "unuse", "by", "their", "guests", "NUMBER", "We", "should", "emulate", "a", "virtio", "balloon", "device", "as", "describe", "in", "the", "VIRTIO", "spec", "NUMBER", "More", "details", "on", "memory", "ballooning", "concept", "here", "LINK", "_ballooning", "NUMBER", "Related", "issue", "NUMBER", "I", "m", "run", "a", "buildkite", "agent", "inside", "a", "firecracker", "microVM", "which", "in", "turn", "runs", "a", "docker", "daemon", "NUMBER", "I", "notice", "memory", "be", "not", "be", "reclaimed", "after", "a", "large", "build", "NUMBER", "My", "VM", "has", "NUMBER", "vCPUs", "and", "NUMBER", "GB", "of", "memory", "allocated", "NUMBER", "It", "also", "uses", "a", "vsock", "for", "controlling", "a", "few", "things", "from", "the", "host", "NUMBER", "During", "a", "build", "memory", "usage", "sore", "inside", "the", "VM", "and", "then", "quickly", "drop", "back", "to", "NUMBER", "NUMBER", "MB", "after", "the", "build", "NUMBER", "From", "the", "host", "RSS", "and", "shared", "memory", "remained", "at", "NUMBER", "GB", "NUMBER", "I", "saw", "there", "was", "some", "talk", "experiment", "regard", "ballooning", "NUMBER", "NUMBER", "would", "that", "help", "my", "case", "Should", "I", "allocate", "less", "memory", "to", "my", "container", "leading", "to", "memory", "be", "reclaimed", "faster", "The", "host", "had", "to", "OOM", "kill", "the", "VM", "when", "it", "reached", "NUMBER", "NUMBER", "of", "its", "allocated", "NUMBER", "GB", "NUMBER", "That", "host", "was", "a", "bit", "loaded", "at", "the", "time", "but", "given", "that", "this", "memory", "wasn", "t", "_really_", "be", "use", "I", "was", "hoping", "it", "would", "get", "reclaimed", "faster", "NUMBER", "Edit", "I", "also", "notice", "that", "as", "memory", "usage", "reaches", "closer", "to", "NUMBER", "the", "build", "gets", "much", "slower", "NUMBER", "I", "assume", "because", "of", "it", "trying", "to", "allocate", "the", "memory", "in", "the", "zero", "delete", "space", "See", "pmap", "output", "below", "NUMBER", "Edit", "NUMBER", "Using", "firecracker", "NUMBER", "kernel", "NUMBER", "in", "the", "VM", "kernel", "NUMBER", "on", "the", "host", "NUMBER", "Here", "be", "some", "data", "I", "collected", "after", "the", "build", "TAG", "TAG", "Host", "TAG", "pmap", "x", "TAG", "for", "the", "firecracker", "process", "TAG", "pmap", "x", "NUMBER", "NUMBER", "firecracker", "id", "NUMBER", "d", "NUMBER", "c", "NUMBER", "seccomp", "level", "NUMBER", "start", "time", "us", "NUMBER", "start", "time", "cpu", "us", "NUMBER", "api", "sock", "api", "NUMBER", "socket", "Address", "Kbytes", "RSS", "Dirty", "Mode", "Mapping", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "r", "x", "firecracker", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "r", "x", "firecracker", "NUMBER", "af", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "firecracker", "NUMBER", "af", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "firecracker", "NUMBER", "bd", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "bd", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "fd", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "fd", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "anon", "NUMBER", "f", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "anon", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "anon", "NUMBER", "f", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "anon", "NUMBER", "f", "NUMBER", "b", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "anon", "NUMBER", "f", "NUMBER", "b", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "anon", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "zero", "delete", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "zero", "delete", "NUMBER", "f", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "zero", "delete", "NUMBER", "f", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "zero", "delete", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "zero", "delete", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "zero", "delete", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "zero", "delete", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "zero", "delete", "NUMBER", "f", "NUMBER", "c", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "zero", "delete", "NUMBER", "f", "NUMBER", "c", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "s", "zero", "delete", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "anon", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "anon", "NUMBER", "ffdebe", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "stack", "NUMBER", "ffdebe", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rw", "stack", "NUMBER", "ffdebf", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "r", "anon", "NUMBER", "ffdebf", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "r", "anon", "NUMBER", "ffdebf", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "r", "x", "anon", "NUMBER", "ffdebf", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "r", "x", "anon", "ffffffffff", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "r", "x", "anon", "ffffffffff", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "r", "x", "anon", "total", "kB", "NUMBER", "NUMBER", "NUMBER", "TAG", "TAG", "TAG", "Guest", "TAG", "free", "TAG", "TAG", "total", "use", "free", "shared", "buff", "cache", "available", "Mem", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Swap", "NUMBER", "NUMBER", "NUMBER", "TAG", "Hi", "edengarza", "amaniduncker", "and", "I", "be", "students", "at", "UT", "and", "be", "looking", "to", "contribute", "to", "an", "open", "source", "project", "for", "our", "virtualization", "class", "NUMBER", "We", "were", "wondering", "if", "we", "could", "get", "assigned", "to", "this", "issue", "NUMBER", "Thanks", "Hi", "Sure", "I", "assigned", "you", "to", "the", "issue", "NUMBER", "Please", "let", "us", "know", "if", "you", "need", "any", "help", "here", "NUMBER", "LGTM", "NUMBER", "Can", "you", "please", "squash", "the", "commit", "that", "add", "fix", "on", "top", "of", "the", "first", "commit", "Individual", "commit", "be", "supposed", "to", "successfully", "build", "NUMBER", "P", "NUMBER", "S", "NUMBER", "There", "might", "be", "an", "interface", "change", "before", "publishing", "vm", "memory", "to", "crates", "NUMBER", "io", "rust", "vmm", "vm", "memory", "NUMBER", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "I", "squashed", "the", "commit", "that", "add", "fix", "as", "you", "suggested", "NUMBER", "Thanks", "for", "the", "heads", "up", "regard", "the", "interface", "change", "NUMBER", "Doesn", "t", "look", "very", "big", "NUMBER", "I", "will", "adapt", "this", "PR", "after", "that", "change", "be", "merge", "into", "mainline", "NUMBER", "Thanks", "very", "much", "to", "everyone", "involved", "It", "s", "a", "great", "validation", "for", "rust", "vmm", "vm", "memory", "NUMBER", "It", "looks", "like", "the", "aarch", "NUMBER", "build", "fail", "because", "of", "an", "API", "timeout", "in", "integration_tests", "functional", "test_shut_down", "NUMBER", "py", "test_reboot", "ubuntu_with_ssh", "unrelated", "to", "my", "change", "NUMBER", "Can", "we", "re", "drive", "this", "or", "do", "I", "need", "to", "push", "a", "dummy", "commit", "This", "issue", "appears", "to", "be", "fix", "in", "master", "branch", "with", "PR", "NUMBER", "not", "sure", "if", "that", "was", "intentional", "bug", "not", "mention", "or", "just", "happened", "by", "coincidence", "NUMBER", "But", "as", "this", "bug", "existed", "as", "of", "yesterday", "and", "in", "the", "current", "release", "I", "thought", "I", "should", "share", "the", "details", "NUMBER", "In", "VM", "logs", "this", "bug", "looks", "like", "the", "following", "instance", "ERROR", "src", "devices", "src", "virtio", "block", "NUMBER", "rs", "NUMBER", "Failed", "to", "parse", "available", "descriptor", "chain", "DescriptorChainTooShort", "tl", "dr", "be", "that", "checked_range_offset", "function", "has", "off", "by", "one", "comparison", "bug", "which", "discards", "valid", "buffers", "and", "drops", "some", "read", "or", "write", "request", "which", "eventually", "leads", "to", "filesystem", "corruption", "if", "write", "request", "be", "drop", "NUMBER", "Long", "version", "There", "be", "three", "places", "in", "parse", "function", "which", "might", "return", "DescriptorChainTooShort", "error", "I", "find", "out", "it", "was", "returned", "from", "rust", "let", "data_desc", "let", "status_desc", "let", "desc", "avail_desc", "NUMBER", "next_descriptor", "NUMBER", "ok_or", "Error", "DescriptorChainTooShort", "So", "the", "next", "buffer", "after", "the", "header", "doesn", "t", "have", "next", "NUMBER", "Function", "next_descriptor", "depends", "on", "has_next", "rust", "Gets", "if", "this", "descriptor", "chain", "has", "another", "descriptor", "chain", "linked", "after", "it", "NUMBER", "pub", "fn", "has_next", "self", "bool", "self", "NUMBER", "flags", "VIRTQ_DESC_F_NEXT", "NUMBER", "self", "NUMBER", "ttl", "NUMBER", "But", "this", "descriptor", "has", "next", "flag", "set", "and", "ttl", "was", "always", "pretty", "high", "NUMBER", "Next", "thing", "next_descriptor", "depends", "on", "be", "chained_new", "which", "itself", "returns", "None", "be", "build", "descriptor", "chain", "be", "is_valid", "NUMBER", "is_valid", "was", "defined", "as", "rust", "fn", "is_valid", "self", "bool", "self", "NUMBER", "mem", "NUMBER", "checked_range_offset", "self", "NUMBER", "addr", "self", "NUMBER", "len", "as", "usize", "NUMBER", "is_none", "self", "NUMBER", "has_next", "self", "NUMBER", "next", "self", "NUMBER", "queue_size", "Condition", "self", "NUMBER", "has_next", "self", "NUMBER", "next", "self", "NUMBER", "queue_size", "was", "fine", "so", "looked", "like", "checked_range_offset", "self", "NUMBER", "addr", "self", "NUMBER", "len", "as", "usize", "returned", "None", "NUMBER", "I", "inspected", "the", "actual", "buffer", "address", "and", "length", "and", "notice", "that", "all", "of", "the", "problematic", "buffers", "laid", "exactly", "at", "the", "guest", "address", "space", "boundary", "NUMBER", "MB", "or", "NUMBER", "x", "NUMBER", "E", "NUMBER", "g", "NUMBER", "python", "hex", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "Function", "checked_range_offset", "had", "following", "source", "code", "rust", "Returns", "the", "address", "plus", "the", "offset", "if", "base", "and", "the", "result", "belong", "to", "the", "same", "memory", "region", "Firecracker", "currently", "do", "not", "use", "adjacent", "memory", "regions", "so", "distinct", "regions", "always", "have", "a", "gap", "in", "between", "NUMBER", "pub", "fn", "checked_range_offset", "self", "base", "GuestAddress", "offset", "usize", "Option", "TAG", "if", "let", "Some", "addr", "base", "NUMBER", "checked_add", "offset", "as", "u", "NUMBER", "for", "region", "in", "self", "NUMBER", "regions", "NUMBER", "iter", "let", "last_addr", "region", "NUMBER", "last_addr", "if", "base", "region", "NUMBER", "guest_base", "base", "TAG", "region", "NUMBER", "guest_base", "addr", "TAG", "GuestAddress", "unchecked_add", "be", "safe", "as", "the", "region", "bounds", "were", "checked", "when", "it", "was", "created", "NUMBER", "self", "NUMBER", "guest_base", "NUMBER", "unchecked_add", "self", "NUMBER", "mapping", "NUMBER", "size", "NUMBER", "as", "u", "NUMBER", "It", "returns", "address", "of", "the", "last", "bye", "of", "the", "region", "which", "be", "off", "by", "one", "with", "start", "offset", "NUMBER", "So", "check", "addr", "TAG", "as", "it", "needs", "to", "implement", "the", "EpollHandler", "trait", "for", "the", "exit", "event", "NUMBER", "We", "can", "change", "this", "in", "a", "future", "PR", "by", "either", "deciding", "on", "dropping", "Arc", "for", "all", "implementors", "of", "EpollHandler", "or", "just", "lock", "parts", "of", "the", "Vmm", "in", "an", "Arc", "which", "be", "actually", "needed", "for", "handle", "the", "read", "event", "NUMBER", "Sure", "we", "can", "close", "this", "issue", "NUMBER", "Done", "in", "NUMBER", "The", "PRs", "on", "which", "this", "one", "depends", "be", "all", "merge", "now", "NUMBER", "You", "can", "go", "ahead", "and", "rebase", "NUMBER", "serban", "NUMBER", "can", "you", "also", "make", "the", "corresponding", "change", "so", "that", "crates", "depend", "on", "GuestMemory", "and", "not", "GuestMemoryMmap", "serban", "NUMBER", "can", "you", "also", "make", "the", "corresponding", "change", "so", "that", "crates", "depend", "on", "GuestMemory", "and", "not", "GuestMemoryMmap", "andreeaflorescu", "there", "be", "a", "separate", "issue", "LINK", "microvm", "firecracker", "issue", "NUMBER", "for", "this", "and", "I", "would", "like", "to", "implement", "it", "as", "part", "of", "a", "different", "PR", "or", "even", "a", "batch", "of", "PRs", "because", "it", "s", "not", "a", "blocker", "for", "the", "migration", "to", "rust", "vmm", "vm", "memory", "NUMBER", "I", "plan", "to", "do", "it", "as", "soon", "as", "possible", "but", "I", "would", "prefer", "to", "work", "incrementally", "here", "NUMBER", "There", "will", "be", "a", "lot", "of", "change", "and", "I", "would", "like", "these", "PRs", "to", "be", "as", "easy", "to", "review", "as", "possible", "NUMBER", "I", "actually", "find", "it", "harder", "to", "review", "because", "you", "miss", "the", "bigger", "picture", "and", "there", "be", "a", "lot", "of", "PRs", "that", "need", "to", "pass", "the", "test", "NUMBER", "We", "then", "need", "to", "chase", "away", "all", "references", "of", "GuestMemoryMmap", "and", "replace", "them", "with", "GuestMemory", "NUMBER", "Reason", "for", "This", "PR", "Simplified", "the", "interface", "of", "EventManager", "Removed", "the", "pollable", "NUMBER", "rs", "abstractions", "NUMBER", "Removed", "the", "wrapper", "over", "the", "HashMap", "of", "fd", "callback", "NUMBER", "We", "now", "use", "just", "insert", "contains_key", "and", "get", "NUMBER", "Get", "do", "not", "create", "a", "clone", "of", "the", "entry", "anymore", "as", "it", "be", "no", "longer", "needed", "NUMBER", "Removed", "EventHandlerData", "NUMBER", "The", "EventManager", "only", "keep", "track", "of", "pollable", "fds", "and", "their", "corresponding", "callback", "NUMBER", "Removed", "the", "implementation", "of", "cascaded", "epoll", "as", "it", "be", "not", "needed", "NUMBER", "Removed", "the", "PollableOp", "builder", "NUMBER", "For", "registering", "events", "the", "subscriber", "returns", "the", "epoll_events", "in", "a", "vector", "NUMBER", "The", "other", "usecase", "for", "PollableOp", "be", "now", "covered", "by", "calling", "the", "corresponding", "operations", "directly", "on", "the", "event_manager", "mutable", "reference", "NUMBER", "The", "EventHandler", "now", "call", "Subscriber", "trait", "now", "only", "has", "NUMBER", "methods", "interest_list", "returns", "a", "list", "of", "events", "that", "the", "subscriber", "be", "interested", "in", "NUMBER", "These", "be", "add", "to", "epoll", "as", "soon", "as", "add_subscriber", "be", "call", "NUMBER", "process", "handles", "the", "processing", "of", "the", "event", "NUMBER", "This", "be", "replacing", "handle_", "function", "from", "the", "previous", "interface", "in", "an", "attempt", "to", "give", "some", "more", "flexibility", "to", "the", "subscriber", "in", "terms", "of", "order", "in", "which", "events", "be", "processed", "but", "also", "handle", "of", "error", "which", "be", "now", "pass", "to", "the", "Subscriber", "implementation", "NUMBER", "We", "also", "pass", "a", "mutable", "reference", "to", "the", "event_manager", "when", "processing", "events", "so", "that", "the", "subscriber", "can", "call", "ADD", "REMOVE", "MODIFY", "directly", "NUMBER", "Description", "of", "Changes", "Details", "above", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "alexandruag", "sandreim", "acatangiu", "iulianbarbu", "I", "think", "I", "ve", "address", "all", "your", "comments", "NUMBER", "Please", "take", "another", "look", "NUMBER", "When", "be", "dirty", "logging", "enable", "When", "How", "be", "it", "disabled", "Dirty", "logging", "be", "enable", "implies", "that", "transparent", "hugepages", "be", "not", "use", "which", "has", "performance", "implications", "NUMBER", "Firecracker", "currently", "support", "transparent", "hugepages", "depending", "on", "the", "system", "configuration", "correct", "What", "use", "cases", "checkpointing", "interval", "lengths", "downtimes", "do", "you", "want", "to", "support", "When", "be", "dirty", "logging", "enable", "When", "How", "be", "it", "disabled", "The", "current", "design", "keep", "dirty", "logging", "always", "enable", "without", "any", "option", "of", "disabling", "it", "NUMBER", "The", "reasoning", "for", "this", "was", "to", "simplify", "the", "API", "and", "the", "UX", "NUMBER", "Dirty", "logging", "be", "enable", "implies", "that", "transparent", "hugepages", "be", "not", "use", "which", "has", "performance", "implications", "NUMBER", "Firecracker", "currently", "support", "transparent", "hugepages", "depending", "on", "the", "system", "configuration", "correct", "We", "did", "not", "consider", "THP", "yet", "but", "we", "be", "not", "aware", "of", "any", "limitations", "on", "kvm", "dirty", "page", "track", "and", "THP", "NUMBER", "Do", "you", "have", "any", "data", "points", "on", "this", "What", "use", "cases", "checkpointing", "interval", "lengths", "downtimes", "do", "you", "want", "to", "support", "We", "be", "support", "both", "full", "and", "incremental", "snapshot", "NUMBER", "There", "be", "no", "constraints", "on", "checkpointing", "frequency", "or", "interval", "NUMBER", "The", "snapshot", "restore", "latency", "be", "very", "much", "dependent", "on", "the", "configuration", "of", "the", "microVM", "vcpu", "count", "devices", "memory", "NUMBER", "The", "current", "design", "focuses", "on", "minimizing", "the", "snapshot", "size", "to", "enable", "very", "fast", "restore", "times", "TAG", "We", "did", "not", "consider", "THP", "yet", "but", "we", "be", "not", "aware", "of", "any", "limitations", "on", "kvm", "dirty", "page", "track", "and", "THP", "NUMBER", "Do", "you", "have", "any", "data", "points", "on", "this", "kvm_dirty_log", "on", "x", "NUMBER", "_", "NUMBER", "at", "least", "support", "only", "NUMBER", "K", "pages", "NUMBER", "Yes", "specifically", "it", "means", "that", "the", "dirty", "bitmap", "will", "have", "the", "same", "size", "as", "for", "NUMBER", "k", "pages", "instead", "of", "be", "NUMBER", "x", "smaller", "but", "I", "think", "it", "should", "not", "have", "affect", "the", "performance", "of", "the", "run", "microVM", "NUMBER", "We", "did", "not", "consider", "THP", "yet", "but", "we", "be", "not", "aware", "of", "any", "limitations", "on", "kvm", "dirty", "page", "track", "and", "THP", "NUMBER", "Do", "you", "have", "any", "data", "points", "on", "this", "kvm_dirty_log", "on", "x", "NUMBER", "_", "NUMBER", "at", "least", "support", "only", "NUMBER", "K", "pages", "NUMBER", "Yes", "specifically", "it", "means", "that", "the", "dirty", "bitmap", "will", "have", "the", "same", "size", "as", "for", "NUMBER", "k", "pages", "instead", "of", "be", "NUMBER", "x", "smaller", "but", "I", "think", "it", "should", "not", "have", "affect", "the", "performance", "of", "the", "run", "microVM", "NUMBER", "If", "dirty", "logging", "be", "enable", "for", "a", "slot", "only", "NUMBER", "k", "PTE", "will", "be", "use", "for", "that", "slot", "NUMBER", "When", "you", "enable", "dirty", "logging", "and", "use", "PML", "for", "dirty", "logging", "large", "pages", "be", "zapped", "if", "you", "be", "use", "write", "protection", "large", "pages", "be", "write", "protected", "NUMBER", "Subsequently", "in", "both", "cases", "pages", "faults", "will", "fault", "in", "NUMBER", "k", "pages", "NUMBER", "As", "a", "consequence", "you", "be", "not", "get", "the", "benefits", "of", "large", "pages", "NUMBER", "How", "much", "you", "be", "miss", "out", "on", "will", "of", "course", "depend", "on", "the", "benchmark", "and", "setup", "NUMBER", "LINK", "mm", "NUMBER", "org", "TransparentHugepage", "action", "AttachFile", "do", "get", "target", "transparent", "hugepage", "NUMBER", "pdf", "url", "has", "a", "graph", "NUMBER", "For", "a", "kernel", "compile", "in", "a", "VM", "with", "a", "couple", "GB", "memory", "I", "recall", "a", "difference", "of", "about", "NUMBER", "NUMBER", "So", "now", "you", "need", "to", "figure", "out", "how", "big", "the", "difference", "be", "in", "the", "use", "cases", "you", "care", "about", "and", "if", "the", "simplicity", "of", "having", "dirty", "logging", "always", "enable", "be", "worth", "whatever", "the", "impact", "be", "even", "if", "you", "be", "not", "use", "snapshotting", "at", "all", "NUMBER", "What", "use", "cases", "checkpointing", "interval", "lengths", "downtimes", "do", "you", "want", "to", "support", "We", "be", "support", "both", "full", "and", "incremental", "snapshot", "NUMBER", "There", "be", "no", "constraints", "on", "checkpointing", "frequency", "or", "interval", "NUMBER", "The", "snapshot", "restore", "latency", "be", "very", "much", "dependent", "on", "the", "configuration", "of", "the", "microVM", "vcpu", "count", "devices", "memory", "NUMBER", "The", "current", "design", "focuses", "on", "minimizing", "the", "snapshot", "size", "to", "enable", "very", "fast", "restore", "times", "TAG", "If", "dirty", "logging", "be", "enable", "for", "a", "slot", "only", "NUMBER", "k", "PTE", "will", "be", "use", "for", "that", "slot", "NUMBER", "When", "you", "enable", "dirty", "logging", "and", "use", "PML", "for", "dirty", "logging", "large", "pages", "be", "zapped", "if", "you", "be", "use", "write", "protection", "large", "pages", "be", "write", "protected", "NUMBER", "Subsequently", "in", "both", "cases", "pages", "faults", "will", "fault", "in", "NUMBER", "k", "pages", "NUMBER", "As", "a", "consequence", "you", "be", "not", "get", "the", "benefits", "of", "large", "pages", "NUMBER", "How", "much", "you", "be", "miss", "out", "on", "will", "of", "course", "depend", "on", "the", "benchmark", "and", "setup", "NUMBER", "LINK", "mm", "NUMBER", "org", "TransparentHugepage", "action", "AttachFile", "do", "get", "target", "transparent", "hugepage", "NUMBER", "pdf", "url", "has", "a", "graph", "NUMBER", "For", "a", "kernel", "compile", "in", "a", "VM", "with", "a", "couple", "GB", "memory", "I", "recall", "a", "difference", "of", "about", "NUMBER", "NUMBER", "So", "now", "you", "need", "to", "figure", "out", "how", "big", "the", "difference", "be", "in", "the", "use", "cases", "you", "care", "about", "and", "if", "the", "simplicity", "of", "having", "dirty", "logging", "always", "enable", "be", "worth", "whatever", "the", "impact", "be", "even", "if", "you", "be", "not", "use", "snapshotting", "at", "all", "NUMBER", "Thanks", "for", "the", "deep", "and", "helpful", "comments", "I", "was", "not", "aware", "of", "these", "limitations", "NUMBER", "We", "will", "discuss", "about", "huge", "pages", "support", "use", "cases", "and", "see", "if", "when", "we", "need", "to", "support", "them", "NUMBER", "What", "I", "be", "wondering", "be", "what", "trade", "off", "between", "performance", "and", "complexity", "you", "want", "to", "make", "Whatever", "the", "checkpointing", "technique", "at", "some", "frequency", "the", "checkpointing", "overhead", "becomes", "prohibitive", "NUMBER", "Or", "suppose", "you", "want", "to", "be", "able", "to", "snapshot", "a", "VM", "without", "network", "connections", "timing", "out", "for", "some", "large", "amount", "of", "memory", "that", "will", "not", "be", "possible", "NUMBER", "If", "you", "stop", "the", "VM", "and", "copy", "all", "memory", "that", "point", "will", "come", "earlier", "than", "if", "you", "use", "say", "pre", "copy", "as", "in", "live", "migration", "NUMBER", "The", "current", "design", "be", "not", "fine", "tuned", "for", "high", "frequency", "checkpointing", "and", "it", "focuses", "more", "on", "the", "ease", "of", "use", "NUMBER", "You", "be", "right", "about", "the", "network", "connectivity", "issue", "the", "current", "design", "kind", "of", "assumes", "the", "potential", "loss", "of", "connectivity", "for", "microVMs", "with", "a", "large", "amount", "memory", "NUMBER", "If", "you", "want", "to", "evolve", "the", "snapshotting", "implementation", "you", "might", "want", "to", "consider", "the", "implications", "for", "the", "API", "NUMBER", "For", "pre", "copy", "that", "seems", "straight", "forward", "you", "would", "add", "a", "create", "diff", "mem", "operation", "that", "can", "be", "call", "while", "the", "VM", "be", "run", "NUMBER", "Alternatively", "you", "might", "decide", "to", "do", "post", "copy", "via", "userfaultfd", "in", "which", "case", "I", "be", "guessing", "you", "would", "add", "an", "option", "to", "do", "post", "copy", "to", "the", "exist", "snapshot", "operations", "and", "add", "some", "way", "to", "inform", "the", "user", "when", "the", "snapshot", "be", "do", "NUMBER", "I", "think", "these", "be", "very", "good", "suggestions", "and", "look", "very", "promising", "as", "optimizations", "but", "it", "s", "a", "bit", "to", "early", "to", "do", "that", "now", "NUMBER", "Also", "maybe", "it", "be", "not", "a", "good", "approach", "to", "offer", "an", "async", "UX", "NUMBER", "We", "will", "do", "a", "deep", "dive", "of", "these", "subjects", "NUMBER", "Thanks", "for", "this", "valuable", "feedback", "NUMBER", "We", "need", "to", "implement", "Drop", "for", "EventManager", "so", "that", "when", "the", "event", "manager", "object", "be", "destroyed", "the", "epoll", "fd", "be", "close", "NUMBER", "We", "might", "also", "want", "to", "call", "unregister", "on", "all", "events", "NUMBER", "This", "issue", "refers", "to", "the", "refactoring", "epoll_handler", "branch", "NUMBER", "Reason", "for", "This", "PR", "In", "the", "case", "that", "the", "guest", "kernel", "be", "either", "non", "cooperative", "i", "NUMBER", "e", "NUMBER", "do", "not", "shut", "down", "when", "Ctrl", "Alt", "Delete", "be", "sent", "or", "hangs", "and", "do", "not", "respond", "it", "s", "convenient", "to", "be", "able", "to", "forcefully", "stop", "a", "microVM", "NUMBER", "Description", "of", "Changes", "Building", "off", "the", "work", "do", "in", "NUMBER", "I", "simply", "wired", "through", "use", "of", "VcpuEvent", "Exit", "NUMBER", "Feedback", "be", "appreciated", "this", "be", "my", "first", "time", "contribute", "to", "Firecracker", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "It", "looks", "like", "the", "integration", "test", "be", "fail", "with", "a", "code", "coverage", "error", "integration_tests", "build", "test_coverage", "NUMBER", "py", "NUMBER", "in", "test_coverage", "assert", "coverage", "min_coverage", "coverage_low_msg", "E", "AssertionError", "Current", "code", "coverage", "NUMBER", "be", "below", "the", "target", "NUMBER", "NUMBER", "E", "assert", "NUMBER", "NUMBER", "I", "would", "appreciate", "advice", "on", "how", "to", "test", "the", "new", "code", "do", "the", "python", "based", "integration", "test", "not", "count", "towards", "code", "coverage", "acatangiu", "Hello", "and", "thank", "you", "for", "taking", "a", "look", "I", "asked", "NUMBER", "a", "while", "back", "about", "how", "to", "force", "stop", "a", "Firecracker", "VM", "and", "was", "told", "that", "SIGKILL", "ing", "the", "Firecracker", "process", "was", "the", "recommended", "method", "but", "that", "the", "Firecracker", "process", "be", "killed", "there", "be", "no", "guarantee", "of", "immediate", "cleanup", "NUMBER", "I", "don", "t", "know", "enough", "about", "KVM", "to", "know", "if", "there", "would", "be", "a", "resource", "leak", "or", "other", "issue", "with", "simply", "SIGKILL", "ing", "the", "main", "Firecracker", "process", "if", "doing", "that", "be", "perfectly", "safe", "and", "doesn", "t", "leak", "any", "KVM", "resources", "then", "yes", "this", "code", "be", "redundant", "NUMBER", "I", "m", "happy", "to", "look", "into", "the", "KVM", "side", "further", "if", "you", "have", "any", "pointers", "The", "other", "minor", "use", "case", "be", "that", "it", "s", "possible", "to", "grant", "access", "to", "an", "unprivileged", "client", "to", "call", "InstanceForceStop", "via", "the", "control", "socket", "NUMBER", "AFAIK", "allowing", "someone", "to", "send", "SIGKILL", "to", "the", "Firecracker", "process", "would", "require", "that", "either", "they", "re", "a", "run", "as", "the", "same", "uid", "which", "means", "that", "that", "uid", "also", "has", "direct", "access", "to", "dev", "kvm", "since", "Firecracker", "needs", "it", "or", "b", "be", "run", "as", "root", "NUMBER", "Killing", "the", "Firecracker", "process", "will", "not", "leak", "any", "host", "resources", "kvm", "or", "otherwise", "NUMBER", "Good", "to", "know", "thank", "you", "IO", "buffers", "both", "in", "the", "guest", "kernel", "and", "in", "the", "firecracker", "process", "don", "t", "get", "flushed", "so", "disk", "drives", "might", "end", "up", "in", "dirty", "state", "NUMBER", "Yep", "I", "would", "expect", "this", "to", "be", "true", "if", "I", "ever", "had", "to", "kill", "a", "Firecracker", "VM", "NUMBER", "We", "could", "make", "sure", "to", "flush", "the", "firecracker", "internal", "buffers", "before", "closing", "the", "process", "but", "without", "flushing", "the", "guest", "OS", "ones", "as", "well", "it", "will", "not", "solve", "much", "maybe", "just", "slightly", "decrease", "the", "probability", "of", "dirty", "disk", "state", "NUMBER", "Does", "Firecracker", "guarantee", "that", "buffers", "be", "write", "to", "disk", "in", "the", "same", "order", "as", "the", "guest", "submits", "them", "Ignoring", "Firecracker", "s", "buffers", "for", "a", "second", "if", "the", "guest", "be", "use", "a", "journaling", "filesystem", "then", "killing", "the", "VM", "while", "it", "s", "run", "be", "the", "same", "as", "a", "power", "loss", "event", "and", "as", "long", "as", "the", "guest", "code", "properly", "uses", "fsync", "and", "a", "journaling", "filesystem", "modern", "systems", "should", "handle", "this", "just", "fine", "NUMBER", "However", "if", "Firecracker", "do", "not", "guarantee", "that", "it", "writes", "its", "internal", "buffers", "to", "disk", "in", "order", "then", "use", "InstanceForceStop", "becomes", "important", "since", "that", "could", "break", "many", "filesystems", "assumptions", "about", "how", "the", "disk", "works", "NUMBER", "I", "m", "happy", "to", "look", "into", "the", "KVM", "side", "further", "if", "you", "have", "any", "pointers", "Looking", "into", "KVM", "further", "regard", "what", "exactly", "Ah", "sorry", "I", "meant", "if", "you", "didn", "t", "know", "off", "the", "top", "of", "your", "head", "whether", "there", "d", "be", "a", "leak", "NUMBER", "Thank", "you", "very", "much", "for", "investigating", "this", "it", "s", "greatly", "appreciated", "Given", "the", "results", "agreed", "that", "this", "change", "be", "unnecessary", "thank", "you", "for", "your", "time", "NUMBER", "serban", "NUMBER", "can", "you", "please", "open", "an", "issue", "in", "vm", "memory", "as", "well", "to", "check", "with", "the", "maintainers", "if", "this", "be", "something", "they", "want", "tot", "do", "I", "created", "a", "draft", "PR", "in", "rust", "vmm", "vm", "memory", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "We", "should", "keep", "in", "mind", "that", "these", "test", "also", "need", "to", "be", "exercised", "on", "aarch", "NUMBER", "There", "be", "multiple", "issue", "which", "bring", "down", "the", "overall", "performance", "of", "our", "block", "device", "emulation", "NUMBER", "I", "be", "listing", "them", "below", "sorted", "by", "their", "impact", "from", "high", "to", "low", "Serial", "block", "file", "I", "O", "Guest", "interrupt", "rate", "Double", "processing", "of", "virtio", "descriptors", "in", "parse", "and", "execute", "Serializing", "the", "block", "file", "I", "O", "also", "serializes", "the", "latencies", "of", "each", "IO", "request", "resulting", "in", "very", "low", "throughput", "NUMBER", "NUMBER", "k", "IOPS", "on", "nvme", "SSDs", "NUMBER", "This", "also", "temporarly", "blocks", "our", "emulation", "thread", "meaning", "increase", "latency", "in", "all", "other", "emulated", "devices", "NUMBER", "Possible", "solutions", "Implement", "AIO", "io_submit", "which", "be", "available", "since", "Linux", "NUMBER", "x", "Implement", "io_uring", "Linux", "NUMBER", "LINK", "An", "increase", "guest", "interrupt", "rate", "add", "significant", "overhead", "in", "the", "guest", "due", "to", "frequent", "context", "switches", "NUMBER", "Possible", "solutions", "driver", "and", "device", "event", "suppression", "Interrupt", "mitigation", "andreeaflorescu", "Yes", "we", "do", "have", "NUMBER", "Done", "in", "NUMBER", "Description", "of", "Changes", "This", "PR", "include", "Changed", "level", "representation", "of", "seccomp", "from", "u", "NUMBER", "to", "u", "NUMBER", "Some", "code", "and", "docs", "adjustments", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "aghecenco", "I", "have", "also", "change", "some", "other", "code", "in", "NUMBER", "da", "NUMBER", "LINK", "microvm", "firecracker", "commit", "NUMBER", "da", "NUMBER", "d", "NUMBER", "ff", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "a", "NUMBER", "d", "NUMBER", "other", "than", "modifying", "of", "level", "representation", "NUMBER", "it", "that", "ok", "aghecenco", "applied", "change", "as", "like", "you", "suggested", "NUMBER", "aghecenco", "please", "take", "a", "another", "look", "NUMBER", "Reason", "for", "This", "PR", "Refactor", "net", "device", "and", "drive", "it", "with", "polly", "NUMBER", "NUMBER", "Description", "of", "Changes", "In", "this", "PR", "the", "net", "device", "be", "ported", "on", "polly", "IO", "event", "manager", "NUMBER", "The", "change", "contained", "by", "this", "PR", "be", "as", "follows", "add", "edge", "triggered", "event", "type", "to", "polly", "aggregated", "the", "information", "from", "NetEpollHandler", "RxVirtio", "TxVirtio", "Net", "into", "one", "single", "struct", "Net", "NUMBER", "implement", "handle_read", "for", "Net", "device", "which", "be", "now", "also", "a", "polly", "EventHandler", "and", "can", "handle", "events", "relate", "to", "Net", "device", "queue", "events", "tap", "events", "rate", "limiter", "events", "NUMBER", "provide", "a", "single", "execution", "path", "which", "registers", "the", "Net", "device", "and", "also", "handles", "the", "PATCH", "rate", "limiters", "request", "from", "microvm", "runtime", "NUMBER", "separated", "the", "Net", "device", "into", "specific", "and", "self", "contained", "components", "which", "resembles", "the", "Block", "refactoring", "which", "will", "help", "us", "to", "draw", "a", "more", "generic", "view", "of", "devices", "NUMBER", "ported", "net", "unit", "test", "on", "polly", "NUMBER", "Note", "the", "commit", "be", "reflecting", "incremental", "change", "in", "the", "refactoring", "which", "might", "present", "change", "to", "change", "but", "the", "overall", "change", "be", "reflected", "in", "the", "commit", "description", "so", "keep", "this", "in", "mind", "when", "reviewing", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Docs", "have", "be", "provide", "NUMBER", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "serban", "NUMBER", "most", "of", "these", "renames", "will", "need", "to", "be", "revert", "once", "we", "switch", "to", "vm", "memory", "because", "we", "will", "want", "crates", "to", "take", "a", "dependency", "on", "the", "GuestMemory", "trait", "and", "not", "the", "mmap", "implementation", "NUMBER", "Crates", "that", "take", "dependency", "on", "vm", "memory", "should", "only", "be", "use", "the", "trait", "NUMBER", "serban", "NUMBER", "most", "of", "these", "renames", "will", "need", "to", "be", "revert", "once", "we", "switch", "to", "vm", "memory", "because", "we", "will", "want", "crates", "to", "take", "a", "dependency", "on", "the", "GuestMemory", "trait", "and", "not", "the", "mmap", "implementation", "NUMBER", "Crates", "that", "take", "dependency", "on", "vm", "memory", "should", "only", "be", "use", "the", "trait", "NUMBER", "Yes", "but", "I", "would", "suggest", "to", "migrate", "like", "this", "and", "then", "do", "those", "change", "incrementally", "as", "part", "of", "another", "item", "NUMBER", "What", "would", "be", "the", "benefit", "in", "doing", "that", "The", "rescan_block_device", "function", "which", "can", "only", "be", "triggered", "after", "the", "guest", "has", "booted", "up", "do", "not", "update", "disk_nsectors", "field", "NUMBER", "This", "field", "be", "use", "in", "the", "process_queue", "so", "it", "be", "vital", "to", "the", "good", "function", "of", "the", "block", "s", "transport", "request", "NUMBER", "The", "change", "fix", "this", "bug", "should", "also", "make", "sure", "this", "duplicate", "warning", "here", "LINK", "microvm", "firecracker", "blob", "refactoring", "epoll_handler", "src", "devices", "src", "virtio", "block", "NUMBER", "rs", "L", "NUMBER", "and", "here", "LINK", "microvm", "firecracker", "blob", "refactoring", "epoll_handler", "src", "vmm", "src", "controller", "NUMBER", "rs", "L", "NUMBER", "gets", "deduplicated", "and", "be", "use", "both", "when", "Block", "new", "be", "created", "and", "also", "at", "rescan_block_device", "NUMBER", "Signed", "off", "by", "karthik", "nedunchezhiyan", "TAG", "Reason", "for", "This", "PR", "api", "sock", "value", "was", "constant", "in", "jailer", "and", "not", "allow", "to", "modify", "by", "the", "user", "NUMBER", "Description", "of", "Changes", "Removed", "constant", "api", "sock", "from", "the", "jailer", "NUMBER", "Now", "user", "can", "pass", "api", "sock", "value", "as", "an", "extra", "argument", "after", "to", "the", "jailer", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "I", "would", "like", "to", "understand", "why", "this", "change", "be", "needed", "NUMBER", "From", "the", "usability", "point", "of", "view", "it", "be", "easier", "for", "users", "of", "Firecracker", "to", "have", "the", "api", "socket", "created", "for", "them", "inside", "the", "jail", "at", "a", "know", "location", "root", "api", "NUMBER", "socket", "NUMBER", "Changing", "this", "be", "breaking", "backwards", "compatibility", "and", "I", "don", "t", "see", "any", "obvious", "benefit", "for", "doing", "it", "NUMBER", "If", "there", "be", "no", "good", "reason", "to", "change", "the", "exist", "behavior", "I", "find", "it", "more", "clear", "as", "it", "be", "right", "now", "NUMBER", "Could", "you", "explain", "a", "bit", "the", "reasoning", "behind", "the", "PR", "andreeaflorescu", "apart", "from", "the", "obvious", "reason", "that", "some", "users", "might", "want", "to", "modify", "the", "location", "of", "the", "api", "socket", "when", "use", "a", "jailed", "Firecracker", "this", "PR", "solves", "an", "inconsistency", "also", "when", "FIrecracker", "be", "jailed", "the", "default", "location", "be", "chroot", "api", "NUMBER", "socket", "while", "with", "a", "non", "jailed", "Firecracker", "the", "default", "location", "be", "tmp", "firecracker", "NUMBER", "socket", "NUMBER", "To", "me", "it", "do", "not", "look", "nice", "Additionally", "there", "be", "also", "the", "scenario", "when", "the", "user", "wants", "to", "make", "use", "of", "the", "extra", "args", "feature", "i", "NUMBER", "e", "and", "pass", "another", "api", "socket", "through", "the", "jailer", "and", "notice", "that", "nothing", "happens", "isn", "t", "it", "weird", "I", "totally", "agree", "that", "from", "a", "usability", "point", "of", "view", "it", "be", "easier", "for", "users", "of", "Firecracker", "to", "have", "the", "api", "socket", "created", "for", "them", "NUMBER", "But", "this", "still", "happens", "with", "this", "PR", "right", "The", "breaking", "of", "compatibility", "lies", "in", "the", "fact", "that", "when", "jailed", "the", "location", "of", "the", "socket", "will", "be", "chroot", "tmp", "firecracker", "NUMBER", "socket", "NUMBER", "I", "propose", "we", "have", "a", "good", "discussion", "with", "the", "team", "and", "conclude", "whether", "or", "not", "backwards", "compatibility", "be", "reason", "enough", "to", "compromise", "consistency", "and", "flexibility", "NUMBER", "Additionally", "there", "be", "also", "the", "scenario", "when", "the", "user", "wants", "to", "make", "use", "of", "the", "extra", "args", "feature", "i", "NUMBER", "e", "and", "pass", "another", "api", "socket", "through", "the", "jailer", "and", "notice", "that", "nothing", "happens", "isn", "t", "it", "weird", "This", "be", "a", "really", "good", "point", "that", "I", "ve", "miss", "NUMBER", "I", "think", "the", "miss", "on", "our", "part", "be", "that", "we", "created", "the", "jailer", "after", "we", "defined", "the", "UX", "for", "Firecracker", "and", "never", "get", "back", "to", "it", "to", "see", "if", "it", "still", "makes", "sense", "in", "that", "context", "NUMBER", "Our", "internal", "customers", "use", "Firecracker", "exclusively", "with", "the", "jailer", "which", "was", "also", "why", "we", "ignored", "the", "inconsistent", "behavior", "and", "the", "fact", "that", "whatever", "we", "pass", "to", "api", "socket", "be", "discarded", "NUMBER", "How", "about", "we", "open", "an", "issue", "regard", "this", "Since", "we", "want", "to", "make", "progress", "on", "Firecracker", "UX", "this", "year", "and", "offer", "a", "better", "usage", "pattern", "I", "think", "we", "should", "think", "a", "bit", "more", "about", "how", "we", "want", "to", "fix", "the", "inconsistency", "that", "you", "re", "mentioning", "NUMBER", "I", "don", "t", "think", "the", "solution", "here", "be", "obvious", "nor", "straightforward", "NUMBER", "For", "example", "having", "the", "api", "socket", "under", "tmp", "firecracker", "NUMBER", "socket", "by", "default", "inside", "the", "chroot", "be", "not", "an", "obvious", "choice", "to", "me", "NUMBER", "My", "thinking", "be", "that", "the", "chroot", "lives", "as", "long", "as", "the", "firecracker", "process", "lives", "NUMBER", "In", "this", "context", "the", "api", "socket", "be", "not", "a", "temporary", "resource", "but", "rather", "a", "permanent", "one", "NUMBER", "Hence", "placing", "it", "by", "default", "under", "a", "temporary", "directory", "tmp", "inside", "the", "chroot", "be", "misleading", "when", "looking", "at", "the", "bigger", "picture", "NUMBER", "dianpopa", "some", "users", "might", "want", "to", "modify", "the", "location", "of", "the", "api", "socket", "when", "use", "a", "jailed", "Firecracker", "I", "don", "t", "see", "this", "as", "a", "necessity", "not", "just", "because", "nobody", "asked", "for", "it", "but", "because", "users", "already", "kinda", "have", "this", "possibility", "because", "they", "pick", "the", "jail", "s", "ID", "which", "in", "turn", "defines", "the", "chroot", "s", "path", "and", "the", "socket", "will", "be", "at", "a", "know", "location", "by", "default", "under", "that", "path", "NUMBER", "I", "think", "that", "s", "a", "on", "usability", "NUMBER", "andreeaflorescu", "the", "chroot", "lives", "as", "long", "as", "the", "firecracker", "process", "lives", "Or", "longer", "because", "Firecracker", "doesn", "t", "clean", "it", "up", "which", "means", "that", "NUMBER", "In", "this", "context", "the", "api", "socket", "be", "not", "a", "temporary", "resource", "but", "rather", "a", "permanent", "one", "NUMBER", "Hence", "placing", "it", "by", "default", "under", "a", "temporary", "directory", "tmp", "inside", "the", "chroot", "be", "misleading", "when", "looking", "at", "the", "bigger", "picture", "NUMBER", "NUMBER", "from", "the", "host", "s", "point", "of", "view", "it", "s", "not", "a", "temporary", "location", "unless", "the", "whole", "chroot", "root", "heh", "be", "temporary", "in", "which", "case", "it", "s", "so", "because", "the", "user", "explicitly", "wanted", "it", "to", "be", "NUMBER", "So", "my", "suggestion", "be", "to", "remvoe", "api", "socket", "from", "the", "jailer", "s", "parameters", "and", "change", "no", "defaults", "WDYT", "The", "jailer", "do", "not", "have", "a", "api", "socket", "parameter", "NUMBER", "It", "hardcodes", "a", "location", "name", "LINK", "microvm", "firecracker", "blob", "master", "src", "jailer", "src", "main", "NUMBER", "rs", "L", "NUMBER", "and", "then", "it", "pass", "LINK", "microvm", "firecracker", "blob", "master", "src", "jailer", "src", "env", "NUMBER", "rs", "L", "NUMBER", "it", "to", "Firecracker", "which", "has", "an", "api", "socket", "parameter", "NUMBER", "Did", "I", "understand", "correctly", "your", "proposal", "I", "think", "the", "direction", "propose", "in", "this", "PR", "be", "the", "right", "one", "and", "mostly", "matches", "all", "your", "comments", "The", "jailer", "should", "not", "concern", "itself", "with", "the", "api", "socket", "in", "any", "way", "NUMBER", "It", "should", "just", "build", "the", "jail", "and", "pass", "any", "firecracker", "relevant", "parameters", "directly", "to", "firecracker", "through", "the", "use", "of", "the", "newly", "ish", "add", "mechanism", "NUMBER", "This", "sounds", "sane", "to", "me", "NUMBER", "Just", "to", "re", "iterate", "we", "remove", "the", "api", "sock", "parameter", "from", "the", "jailer", "NUMBER", "To", "specify", "a", "non", "default", "api", "socket", "path", "you", "will", "use", "the", "firecracker", "parameter", "api", "sock", "which", "can", "be", "provide", "to", "the", "jailer", "via", "the", "extra", "argument", "which", "be", "sent", "without", "change", "from", "the", "jailer", "to", "the", "firecracker", "binary", "NUMBER", "when", "no", "such", "param", "be", "provide", "it", "will", "just", "default", "to", "some", "path", "currently", "tmp", "firecracker", "NUMBER", "socket", "subject", "to", "change", "in", "a", "different", "PR", "if", "there", "be", "a", "case", "to", "do", "so", "NUMBER", "I", "would", "like", "to", "re", "iterate", "this", "part", "NUMBER", "Placing", "the", "api", "socket", "inside", "tmp", "be", "not", "a", "sane", "default", "NUMBER", "The", "api", "socket", "be", "not", "a", "temporary", "resource", "NUMBER", "Since", "we", "be", "fix", "a", "broken", "behavior", "and", "change", "the", "default", "path", "of", "the", "api", "socket", "inside", "the", "chroot", "when", "use", "the", "jailer", "we", "should", "also", "make", "sure", "that", "this", "new", "default", "be", "the", "appropriate", "one", "NUMBER", "I", "strongly", "believe", "that", "change", "the", "default", "directory", "should", "not", "happen", "in", "a", "separate", "PR", "NUMBER", "My", "reasoning", "be", "as", "follows", "tmp", "be", "not", "the", "appropriate", "directory", "we", "be", "make", "a", "breaking", "change", "by", "placing", "it", "inside", "the", "chroot", "under", "tmp", "NUMBER", "There", "be", "no", "need", "to", "have", "another", "PR", "to", "break", "that", "compatibility", "again", "just", "to", "fix", "a", "problem", "that", "we", "didn", "t", "have", "when", "run", "with", "the", "jailer", "NUMBER", "I", "also", "chatted", "with", "dhrgit", "a", "bit", "about", "this", "and", "the", "default", "directory", "we", "were", "thinking", "about", "be", "var", "run", "or", "run", "NUMBER", "This", "seems", "to", "be", "the", "generally", "accepted", "directory", "for", "runtime", "variables", "NUMBER", "See", "some", "documentation", "here", "LINK", "_", "NUMBER", "fhs", "ch", "NUMBER", "s", "NUMBER", "html", "NUMBER", "I", "also", "chatted", "with", "dhrgit", "a", "bit", "about", "this", "and", "the", "default", "directory", "we", "were", "thinking", "about", "be", "var", "run", "or", "run", "NUMBER", "This", "seems", "to", "be", "the", "generally", "accepted", "directory", "for", "runtime", "variables", "NUMBER", "See", "some", "documentation", "here", "NUMBER", "Nice", "suggestion", "andreeaflorescu", "we", "can", "prefer", "run", "over", "var", "run", "the", "reason", "why", "run", "introduce", "and", "preferred", "be", "explained", "here", "LINK", "just", "my", "opinion", "I", "think", "the", "direction", "propose", "in", "this", "PR", "be", "the", "right", "one", "and", "mostly", "matches", "all", "your", "comments", "The", "jailer", "should", "not", "concern", "itself", "with", "the", "api", "socket", "in", "any", "way", "NUMBER", "It", "should", "just", "build", "the", "jail", "and", "pass", "any", "firecracker", "relevant", "parameters", "directly", "to", "firecracker", "through", "the", "use", "of", "the", "newly", "ish", "add", "mechanism", "NUMBER", "This", "sounds", "sane", "to", "me", "NUMBER", "Just", "to", "re", "iterate", "we", "remove", "the", "api", "sock", "parameter", "from", "the", "jailer", "NUMBER", "To", "specify", "a", "non", "default", "api", "socket", "path", "you", "will", "use", "the", "firecracker", "parameter", "api", "sock", "which", "can", "be", "provide", "to", "the", "jailer", "via", "the", "extra", "argument", "which", "be", "sent", "without", "change", "from", "the", "jailer", "to", "the", "firecracker", "binary", "NUMBER", "when", "no", "such", "param", "be", "provide", "it", "will", "just", "default", "to", "some", "path", "currently", "tmp", "firecracker", "NUMBER", "socket", "subject", "to", "change", "in", "a", "different", "PR", "if", "there", "be", "a", "case", "to", "do", "so", "NUMBER", "I", "would", "like", "to", "re", "iterate", "this", "part", "NUMBER", "Placing", "the", "api", "socket", "inside", "tmp", "be", "not", "a", "sane", "default", "NUMBER", "The", "api", "socket", "be", "not", "a", "temporary", "resource", "NUMBER", "Since", "we", "be", "fix", "a", "broken", "behavior", "and", "change", "the", "default", "path", "of", "the", "api", "socket", "inside", "the", "chroot", "when", "use", "the", "jailer", "we", "should", "also", "make", "sure", "that", "this", "new", "default", "be", "the", "appropriate", "one", "NUMBER", "I", "strongly", "believe", "that", "change", "the", "default", "directory", "should", "not", "happen", "in", "a", "separate", "PR", "NUMBER", "My", "reasoning", "be", "as", "follows", "tmp", "be", "not", "the", "appropriate", "directory", "we", "be", "make", "a", "breaking", "change", "by", "placing", "it", "inside", "the", "chroot", "under", "tmp", "NUMBER", "There", "be", "no", "need", "to", "have", "another", "PR", "to", "break", "that", "compatibility", "again", "just", "to", "fix", "a", "problem", "that", "we", "didn", "t", "have", "when", "run", "with", "the", "jailer", "NUMBER", "I", "also", "chatted", "with", "dhrgit", "a", "bit", "about", "this", "and", "the", "default", "directory", "we", "were", "thinking", "about", "be", "var", "run", "or", "run", "NUMBER", "This", "seems", "to", "be", "the", "generally", "accepted", "directory", "for", "runtime", "variables", "NUMBER", "See", "some", "documentation", "here", "LINK", "_", "NUMBER", "fhs", "ch", "NUMBER", "s", "NUMBER", "html", "NUMBER", "Sounds", "good", "to", "me", "too", "Only", "one", "little", "litle", "obs", "the", "jailer", "do", "not", "have", "a", "api", "sock", "parameter", "NUMBER", "KarthikNedunchezhiyan", "could", "you", "please", "rename", "the", "PR", "adjust", "the", "commit", "to", "something", "more", "accurate", "Something", "like", "jailer", "remove", "hardcoded", "api", "socket", "location", "Your", "first", "commit", "mentions", "a", "change", "that", "be", "do", "in", "the", "second", "commit", "NUMBER", "A", "solution", "would", "be", "to", "simply", "change", "the", "order", "of", "the", "commit", "NUMBER", "You", "can", "do", "that", "with", "git", "rebase", "i", "NUMBER", "Reviewing", "please", "do", "not", "merge", "NUMBER", "Thanks", "Reason", "for", "This", "PR", "It", "s", "be", "decided", "we", "re", "not", "going", "to", "upstream", "the", "checked_range_offset", "and", "the", "modify", "version", "of", "get_host_address", "to", "vm", "memory", "and", "these", "change", "bring", "things", "in", "line", "with", "the", "future", "vm", "memory", "integration", "NUMBER", "checked_range_offset", "has", "be", "remove", "entirely", "together", "with", "the", "associated", "check", "in", "DescriptorChain", "is_valid", "NUMBER", "The", "validity", "of", "memory", "accesses", "be", "checked", "at", "the", "time", "of", "read", "write", "when", "the", "device", "model", "calls", "GuestMemory", "methods", "NUMBER", "Vsock", "devices", "be", "currently", "an", "exception", "but", "they", "do", "enforce", "their", "own", "validations", "via", "get_host_address", "the", "two", "parameter", "version", "that", "won", "t", "get", "upstreamed", "NUMBER", "On", "that", "front", "we", "revert", "GuestMemory", "get_host_address", "to", "the", "original", "single", "parameter", "version", "and", "add", "a", "new", "one", "local", "to", "vsock", "packet", "NUMBER", "rs", "that", "implement", "the", "two", "parameter", "behavior", "to", "keep", "current", "validation", "functionality", "NUMBER", "As", "we", "transition", "to", "vm", "memory", "we", "ll", "decide", "what", "primitive", "we", "ll", "base", "the", "check", "on", "seems", "like", "GuestMemory", "do_in_region", "will", "not", "be", "available", "anymore", "NUMBER", "Also", "in", "the", "longer", "term", "we", "plan", "to", "switch", "the", "Vsock", "implementation", "to", "do", "all", "accesses", "via", "a", "GuestMemory", "abstraction", "but", "that", "s", "still", "incipient", "at", "this", "point", "NUMBER", "Fixes", "NUMBER", "Signed", "off", "by", "Alexandru", "Agache", "TAG", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "Rebased", "please", "take", "one", "more", "look", "NUMBER", "Fixes", "NUMBER", "Reviewing", "please", "don", "t", "merge", "yet", "NUMBER", "Just", "finished", "having", "a", "look", "at", "the", "latest", "change", "and", "I", "don", "t", "think", "there", "be", "any", "immediate", "concerns", "besides", "just", "reiterating", "that", "we", "ll", "have", "to", "add", "a", "bit", "more", "work", "towards", "having", "a", "generic", "in", "terms", "of", "devices", "and", "memory", "for", "example", "way", "of", "build", "and", "run", "a", "Vmm", "NUMBER", "Atm", "looks", "like", "it", "s", "best", "to", "add", "this", "and", "other", "potential", "finishing", "touches", "after", "the", "ongoing", "device", "polly", "efforts", "NUMBER", "Reviewing", "please", "don", "t", "merge", "yet", "NUMBER", "Kioxia", "be", "experimenting", "to", "bring", "Native", "Flash", "access", "via", "API", "to", "Cloud", "Applications", "Firecracker", "be", "one", "of", "the", "cloud", "applications", "I", "be", "porting", "to", "use", "this", "API", "NUMBER", "I", "was", "curious", "if", "there", "s", "interest", "in", "pursuing", "something", "like", "this", "NUMBER", "Firecracker", "can", "use", "flash", "more", "efficiently", "by", "managing", "the", "flash", "NAND", "directly", "rather", "than", "letting", "the", "SSD", "control", "where", "the", "data", "be", "write", "or", "when", "certain", "things", "like", "garbage", "collection", "occur", "NUMBER", "I", "thought", "this", "may", "be", "useful", "for", "microVMs", "that", "compete", "for", "storage", "resources", "on", "the", "same", "storage", "devices", "NUMBER", "The", "benefit", "would", "be", "an", "SSD", "that", "last", "many", "times", "longer", "and", "speeds", "up", "reads", "writes", "by", "allowing", "control", "of", "the", "SSD", "s", "internal", "garbage", "collection", "among", "other", "things", "which", "be", "know", "to", "stall", "critical", "reads", "writes", "in", "traditional", "SSDs", "NUMBER", "andreeaflorescu", "as", "you", "request", "that", "I", "file", "an", "issue", "for", "easier", "track", "Hi", "acatangiu", "thanks", "for", "your", "response", "NUMBER", "To", "answer", "your", "question", "Would", "it", "work", "with", "another", "process", "instead", "of", "the", "OS", "filesystem", "Correct", "it", "do", "not", "use", "the", "OS", "filesystem", "NUMBER", "Would", "it", "do", "device", "passthrough", "Similar", "in", "concept", "but", "it", "goes", "a", "level", "further", "Flash", "Passthrough", "NUMBER", "How", "would", "that", "work", "from", "Firecracker", "s", "perspective", "Firecracker", "would", "use", "the", "new", "API", "to", "directly", "access", "Flash", "from", "the", "microVMs", "A", "sample", "FTL", "be", "part", "of", "the", "SDK", "that", "puts", "the", "host", "in", "control", "of", "garbage", "collection", "wear", "leveling", "and", "over", "provisioning", "to", "maintain", "control", "on", "latency", "and", "data", "placement", "this", "FTL", "can", "be", "replaced", "with", "one", "of", "your", "own", "internal", "design", "NUMBER", "We", "can", "can", "organize", "a", "call", "to", "get", "you", "more", "details", "about", "the", "project", "if", "you", "would", "like", "to", "learn", "more", "Hi", "acatangiu", "just", "checking", "in", "NUMBER", "Let", "me", "know", "how", "the", "discussions", "go", "I", "m", "looking", "forward", "to", "your", "response", "NUMBER", "Hi", "acatangiu", "iulianbarbu", "Thank", "you", "again", "for", "your", "question", "and", "considering", "this", "feature", "NUMBER", "I", "want", "to", "let", "you", "know", "that", "our", "public", "announcement", "about", "Software", "Enabled", "Flash", "Technology", "has", "be", "release", "KIOXIA", "Redefines", "Hyperscale", "Digital", "Storage", "LINK", "Redefines", "Hyperscale", "Digital", "Storage", "Software", "Enabled", "Flash", "NUMBER", "In", "addition", "to", "the", "public", "announcement", "there", "will", "be", "a", "presentation", "at", "the", "virtualOCP", "summit", "with", "material", "similar", "to", "the", "introduction", "we", "have", "given", "you", "a", "few", "weeks", "ago", "NUMBER", "The", "presentation", "will", "be", "given", "on", "Wednesday", "May", "NUMBER", "at", "NUMBER", "NUMBER", "be", "Link", "to", "OCP", "Summit", "Virtual", "Meeting", "LINK", "be", "you", "still", "use", "flash", "like", "a", "drive", "presented", "by", "kioxia", "NUMBER", "The", "good", "news", "virtualOCP", "Registration", "LINK", "summit", "registration", "be", "free", "for", "all", "attendees", "NUMBER", "Please", "join", "us", "online", "at", "the", "summit", "to", "learn", "more", "about", "this", "exciting", "technology", "NUMBER", "Regards", "Remington", "Should", "we", "remove", "testrun", "NUMBER", "sh", "It", "doesn", "t", "look", "like", "we", "keep", "it", "up", "to", "date", "and", "the", "preferred", "way", "of", "run", "the", "test", "be", "with", "the", "devtool", "NUMBER", "CC", "firecracker", "microvm", "compute", "capsule", "Reason", "for", "This", "PR", "Closes", "NUMBER", "Closes", "NUMBER", "integration", "test", "suite", "run", "time", "down", "from", "NUMBER", "min", "to", "NUMBER", "min", "on", "m", "NUMBER", "d", "NUMBER", "metal", "single", "test", "rerun", "overhead", "eliminated", "use", "to", "be", "NUMBER", "min", "i", "NUMBER", "e", "NUMBER", "release", "binary", "build", "time", "NUMBER", "Description", "of", "Changes", "Added", "a", "pytest", "plugin", "and", "the", "necessary", "plumbing", "to", "enable", "run", "the", "integration", "test", "concurrently", "NUMBER", "This", "plugin", "add", "a", "new", "command", "line", "option", "to", "pytest", "concurrency", "allowing", "the", "user", "to", "choose", "the", "max", "number", "of", "worker", "processes", "that", "may", "be", "spawned", "during", "an", "integration", "test", "run", "NUMBER", "Made", "the", "test", "session", "root", "dir", "truely", "session", "unique", "so", "that", "multiple", "test", "sessions", "can", "run", "concurrently", "Removed", "the", "option", "to", "keep", "the", "test", "session", "root", "dir", "alive", "across", "test", "sessions", "since", "it", "be", "no", "longer", "useful", "Updated", "the", "process", "startup", "time", "test", "to", "use", "different", "thresholds", "for", "x", "NUMBER", "_", "NUMBER", "and", "aarch", "NUMBER", "since", "m", "NUMBER", "d", "NUMBER", "metal", "and", "a", "NUMBER", "metal", "instances", "perform", "quite", "differently", "NUMBER", "Improved", "code", "coverage", "computation", "precision", "to", "NUMBER", "NUMBER", "Also", "relaxed", "the", "coverage", "test", "threshold", "to", "NUMBER", "NUMBER", "Fixed", "a", "bug", "in", "the", "integration", "test", "framework", "that", "would", "cause", "the", "jailer", "context", "cleanup", "code", "to", "unlink", "more", "than", "just", "its", "own", "jail", "directory", "NUMBER", "Switched", "to", "run", "unit", "test", "in", "release", "mode", "NUMBER", "Removed", "the", "standalone", "build", "test", "all", "build", "be", "covered", "by", "run", "unit", "test", "and", "the", "coverage", "test", "NUMBER", "Reuse", "the", "release", "binaries", "for", "integration", "test", "NUMBER", "Instead", "of", "build", "the", "Firecracker", "binaries", "from", "scratch", "with", "each", "test", "run", "the", "integration", "test", "now", "perform", "a", "cargo", "build", "release", "and", "use", "the", "binaries", "placed", "in", "the", "workspace", "target", "dir", "NUMBER", "The", "build", "command", "be", "issue", "with", "each", "testrun", "thus", "ensuring", "all", "source", "change", "be", "pick", "up", "but", "also", "makes", "use", "of", "the", "rust", "cargo", "build", "cache", "to", "elide", "unnecessary", "rebuilds", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "loosely", "linked", "to", "an", "issue", "and", "the", "reasons", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "No", "docs", "need", "to", "be", "update", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "use", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "After", "this", "change", "there", "seems", "to", "be", "a", "difference", "in", "number", "of", "integration", "test", "skipped", "NUMBER", "Take", "x", "NUMBER", "_", "NUMBER", "on", "a", "previous", "PR", "NUMBER", "there", "be", "NUMBER", "pass", "NUMBER", "skipped", "while", "on", "this", "one", "there", "be", "NUMBER", "pass", "NUMBER", "skipped", "NUMBER", "Take", "x", "NUMBER", "_", "NUMBER", "on", "a", "previous", "PR", "NUMBER", "there", "be", "NUMBER", "pass", "NUMBER", "skipped", "while", "on", "this", "one", "there", "be", "NUMBER", "pass", "NUMBER", "skipped", "NUMBER", "On", "x", "NUMBER", "_", "NUMBER", "it", "looks", "the", "same", "now", "NUMBER", "NUMBER", "and", "on", "aarch", "NUMBER", "NUMBER", "be", "skipped", "indeed", "but", "they", "re", "skipped", "with", "the", "current", "CI", "too", "NUMBER", "See", "a", "sample", "log", "LINK", "pr", "NUMBER", "s", "NUMBER", "amazonaws", "NUMBER", "com", "pr", "logs", "aarch", "NUMBER", "NUMBER", "serban", "NUMBER", "firecracker", "a", "NUMBER", "f", "NUMBER", "be", "NUMBER", "log", "NUMBER", "I", "looked", "again", "and", "seems", "fine", "NUMBER", "Maybe", "I", "mix", "the", "outputs", "NUMBER", "Please", "consider", "this", "resolve", "NUMBER", "Reason", "for", "This", "PR", "implement", "NUMBER", "Description", "of", "Changes", "Provided", "in", "the", "commit", "description", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "Had", "some", "pending", "nits", "before", "the", "push", "f", "smile", "The", "memory_model", "function", "that", "have", "be", "migrated", "to", "the", "Bytes", "trait", "should", "still", "be", "documented", "with", "usage", "examples", "they", "show", "up", "in", "the", "generate", "documentation", "NUMBER", "Besides", "we", "already", "have", "the", "comments", "they", "just", "need", "to", "be", "adapted", "NUMBER", "Good", "point", "NUMBER", "Done", "NUMBER", "For", "example", "here", "NUMBER", "That", "line", "should", "be", "covered", "by", "We", "make", "the", "prev", "desc", "write_only", "with", "no", "other", "flag", "to", "get", "a", "chain", "which", "be", "writable", "but", "too", "short", "NUMBER", "Perhaps", "you", "re", "thinking", "of", "the", "tx", "PartialBuffer", "case", "which", "be", "indeed", "not", "covered", "you", "probably", "could", "test", "it", "by", "creating", "a", "descriptor", "that", "ends", "after", "the", "end", "of", "memory", "NUMBER", "There", "be", "two", "ways", "of", "approaching", "a", "better", "implementation", "for", "achieving", "with", "ease", "temporary", "file", "directory", "creation", "management", "NUMBER", "We", "consume", "rust", "vmm", "vmm", "sys", "util", "crate", "TempFile", "and", "TempDir", "structs", "inside", "Firecracker", "NUMBER", "These", "structs", "miss", "file", "operations", "implementations", "like", "read", "write", "and", "seek", "NUMBER", "We", "need", "this", "support", "from", "within", "rust", "vmm", "vmm", "sys", "util", "crate", "and", "consume", "it", "like", "that", "in", "Firecracker", "because", "otherwise", "it", "would", "mean", "to", "add", "wrappers", "inside", "Firecracker", "NUMBER", "It", "be", "worth", "mentioning", "that", "while", "we", "would", "implement", "these", "file", "operations", "we", "should", "take", "into", "account", "that", "when", "we", "read", "and", "write", "to", "file", "we", "have", "to", "open", "file", "with", "specific", "file", "permissions", "NUMBER", "So", "we", "might", "want", "to", "add", "support", "for", "file", "permissions", "too", "NUMBER", "NUMBER", "There", "be", "another", "suggestion", "that", "says", "that", "when", "creating", "a", "temporary", "file", "directory", "we", "should", "unlink", "it", "immediately", "then", "return", "a", "File", "that", "represent", "the", "handle", "for", "that", "unliked", "file", "directory", "that", "we", "re", "gonna", "operate", "with", "and", "leave", "altogether", "the", "TempFile", "TempDir", "structs", "as", "builders", "for", "these", "temporary", "file", "NUMBER", "This", "would", "simplify", "a", "lot", "the", "implementation", "and", "wouldn", "t", "need", "any", "support", "for", "file", "operation", "as", "the", "current", "implementation", "needs", "NUMBER", "Should", "we", "add", "this", "issue", "in", "rust", "vmm", "vmm", "sys", "util", "instead", "so", "more", "people", "can", "chime", "in", "Option", "NUMBER", "be", "not", "an", "alternative", "to", "option", "NUMBER", "option", "NUMBER", "assumes", "that", "we", "change", "nothing", "in", "rust", "vmm", "and", "implement", "the", "miss", "functionality", "in", "Firecracker", "NUMBER", "I", "don", "t", "like", "that", "tempfile", "I", "O", "be", "unrelated", "to", "the", "consumer", "of", "the", "tempfiles", "and", "I", "find", "the", "I", "O", "functionality", "basic", "enough", "to", "make", "sense", "in", "the", "standalone", "vmm", "sys", "util", "crate", "NUMBER", "If", "we", "all", "agree", "that", "this", "makes", "sense", "we", "should", "move", "the", "implementation", "discussion", "to", "rust", "vmm", "NUMBER", "Option", "NUMBER", "be", "not", "an", "alternative", "to", "option", "NUMBER", "option", "NUMBER", "assumes", "that", "we", "change", "nothing", "in", "rust", "vmm", "and", "implement", "the", "miss", "functionality", "in", "Firecracker", "NUMBER", "I", "don", "t", "like", "that", "tempfile", "I", "O", "be", "unrelated", "to", "the", "consumer", "of", "the", "tempfiles", "and", "I", "find", "the", "I", "O", "functionality", "basic", "enough", "to", "make", "sense", "in", "the", "standalone", "vmm", "sys", "util", "crate", "NUMBER", "If", "we", "all", "agree", "that", "this", "makes", "sense", "we", "should", "move", "the", "implementation", "discussion", "to", "rust", "vmm", "NUMBER", "We", "be", "on", "the", "same", "page", "here", "tempfile", "I", "O", "should", "be", "include", "in", "standalone", "vmm", "sys", "util", "crate", "and", "I", "will", "open", "an", "issue", "there", "NUMBER", "To", "be", "clear", "in", "Option", "NUMBER", "I", "was", "referring", "to", "the", "addition", "of", "file", "operations", "functionality", "inside", "rust", "vmm", "vmm", "sys", "util", "crate", "NUMBER", "Can", "you", "tell", "me", "what", "led", "you", "to", "the", "opposite", "conclusion", "To", "be", "clear", "in", "Option", "NUMBER", "I", "was", "referring", "to", "the", "addition", "of", "file", "operations", "functionality", "inside", "rust", "vmm", "vmm", "sys", "util", "crate", "NUMBER", "Can", "you", "tell", "me", "what", "led", "you", "to", "the", "opposite", "conclusion", "I", "guess", "I", "get", "stuck", "on", "otherwise", "it", "would", "mean", "to", "add", "wrappers", "inside", "Firecracker", "and", "get", "the", "wrong", "idea", "thanks", "for", "clarifying", "NUMBER", "To", "be", "clear", "in", "Option", "NUMBER", "I", "was", "referring", "to", "the", "addition", "of", "file", "operations", "functionality", "inside", "rust", "vmm", "vmm", "sys", "util", "crate", "NUMBER", "Can", "you", "tell", "me", "what", "led", "you", "to", "the", "opposite", "conclusion", "I", "guess", "I", "get", "stuck", "on", "otherwise", "it", "would", "mean", "to", "add", "wrappers", "inside", "Firecracker", "and", "get", "the", "wrong", "idea", "thanks", "for", "clarifying", "Yep", "sure", "NUMBER", "Opened", "LINK", "vmm", "vmm", "sys", "util", "pull", "NUMBER", "Firecracker", "containerd", "recently", "update", "a", "test", "case", "that", "previously", "run", "NUMBER", "VMs", "to", "now", "run", "NUMBER", "and", "start", "seeing", "the", "following", "error", "occur", "in", "NUMBER", "NUMBER", "VMs", "per", "test", "case", "issue", "LINK", "microvm", "firecracker", "containerd", "issue", "NUMBER", "NUMBER", "As", "part", "of", "terminating", "VMs", "we", "tell", "systemd", "in", "the", "guest", "to", "reboot", "the", "system", "NUMBER", "Most", "of", "the", "time", "this", "works", "fine", "we", "see", "reboot", "machine", "restart", "in", "the", "systemd", "logs", "and", "the", "VMM", "exits", "with", "NUMBER", "as", "expected", "right", "after", "NUMBER", "Occasionally", "though", "the", "guest", "reaches", "that", "reboot", "machine", "restart", "line", "and", "then", "we", "see", "a", "few", "logs", "lines", "from", "Firecracker", "like", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "Received", "KVM_EXIT_SHUTDOWN", "signal", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "Shutting", "down", "VM", "after", "intercepting", "a", "bad", "syscall", "NUMBER", "NUMBER", "Followed", "by", "the", "VMM", "exiting", "with", "code", "NUMBER", "The", "KVM_EXIT_SHUTDOWN", "case", "LINK", "microvm", "firecracker", "blob", "b", "NUMBER", "c", "NUMBER", "ec", "NUMBER", "a", "NUMBER", "b", "NUMBER", "fbfe", "NUMBER", "de", "NUMBER", "a", "NUMBER", "caa", "NUMBER", "a", "NUMBER", "b", "NUMBER", "src", "vmm", "src", "vstate", "NUMBER", "rs", "L", "NUMBER", "and", "bad", "syscall", "which", "appears", "to", "be", "rt_sigprocmask", "seem", "to", "only", "ever", "occur", "together", "never", "just", "one", "or", "the", "other", "and", "only", "right", "after", "the", "reboot", "call", "should", "be", "occurring", "NUMBER", "EDIT", "I", "ve", "now", "very", "rarely", "seen", "KVM_EXIT_SHUTDOWN", "occur", "without", "an", "accompanying", "rt_sigprocmask", "call", "that", "results", "in", "the", "seccomp", "violation", "NUMBER", "When", "KVM_EXIT_SHUTDOWN", "occur", "by", "itself", "the", "VMM", "exits", "with", "NUMBER", "with", "no", "apparent", "issue", "NUMBER", "Additionally", "I", "don", "t", "see", "this", "for", "every", "VM", "that", "exits", "like", "that", "but", "be", "occasionally", "get", "a", "line", "like", "this", "in", "dmesg", "after", "a", "run", "of", "the", "test", "case", "where", "failures", "occur", "NUMBER", "traps", "fc_vcpu", "NUMBER", "NUMBER", "trap", "invalid", "opcode", "ip", "NUMBER", "d", "NUMBER", "sp", "NUMBER", "f", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "error", "NUMBER", "in", "firecracker", "NUMBER", "NUMBER", "ab", "NUMBER", "No", "idea", "if", "it", "s", "relate", "or", "if", "it", "be", "why", "it", "wouldn", "t", "be", "write", "every", "time", "a", "VM", "exits", "with", "KVM_EXIT_SHUTDOWN", "the", "bad", "syscall", "but", "figured", "it", "was", "worth", "mentioning", "NUMBER", "This", "same", "behavior", "occur", "in", "both", "NUMBER", "w", "rust", "NUMBER", "musl", "and", "a", "NUMBER", "binary", "I", "build", "from", "here", "LINK", "w", "rust", "NUMBER", "musl", "NUMBER", "Let", "us", "know", "what", "if", "anything", "would", "be", "helpful", "for", "further", "reproducing", "or", "debugging", "as", "it", "seems", "to", "be", "a", "pretty", "rare", "issue", "NUMBER", "We", "can", "run", "our", "NUMBER", "VM", "test", "case", "with", "debugging", "binaries", "and", "or", "see", "if", "it", "s", "possible", "to", "make", "docker", "container", "reproducer", "for", "you", "to", "use", "or", "something", "like", "that", "NUMBER", "Hey", "sipsma", "last", "time", "we", "saw", "sigprocmask", "cause", "trouble", "it", "originated", "in", "Firecracker", "aborting", "NUMBER", "See", "LINK", "microvm", "firecracker", "issue", "NUMBER", "issuecomment", "NUMBER", "Do", "you", "collect", "metrics", "for", "the", "run", "vms", "If", "so", "do", "any", "of", "them", "emit", "vmm", "NUMBER", "panic_count", "NUMBER", "aghecenco", "I", "update", "the", "test", "to", "flush", "the", "metrics", "fifo", "to", "our", "logs", "but", "it", "doesn", "t", "look", "like", "panic_count", "ever", "goes", "above", "NUMBER", "It", "s", "a", "bit", "hard", "to", "read", "at", "the", "moment", "but", "these", "be", "some", "example", "firecracker", "containerd", "logs", "showing", "systemd", "reaching", "the", "reboot", "stage", "a", "final", "metrics", "flush", "showing", "seccomp", "NUMBER", "num_faults", "increasing", "to", "NUMBER", "panic_count", "staying", "at", "NUMBER", "and", "then", "the", "KVM_EXIT_SHUTDOWN", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "debug", "msg", "NUMBER", "reboot", "machine", "restart", "jailer", "noop", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "vmm_stream", "stdout", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "utc_timestamp_ms", "NUMBER", "api_server", "process_startup_time_us", "NUMBER", "process_startup_time_cpu_us", "NUMBER", "sync_response_fails", "NUMBER", "sync_vmm_send_timeout_count", "NUMBER", "block", "activate_fails", "NUMBER", "cfg_fails", "NUMBER", "event_fails", "NUMBER", "execute_fails", "NUMBER", "invalid_reqs_count", "NUMBER", "flush_count", "NUMBER", "queue_event_count", "NUMBER", "rate_limiter_event_count", "NUMBER", "update_count", "NUMBER", "update_fails", "NUMBER", "read_bytes", "NUMBER", "write_bytes", "NUMBER", "read_count", "NUMBER", "write_count", "NUMBER", "get_api_requests", "instance_info_count", "NUMBER", "instance_info_fails", "NUMBER", "machine_cfg_count", "NUMBER", "machine_cfg_fails", "NUMBER", "i", "NUMBER", "error_count", "NUMBER", "missed_read_count", "NUMBER", "missed_write_count", "NUMBER", "read_count", "NUMBER", "reset_count", "NUMBER", "write_count", "NUMBER", "logger", "missed_metrics_count", "NUMBER", "metrics_fails", "NUMBER", "missed_log_count", "NUMBER", "log_fails", "NUMBER", "mmds", "rx_accepted", "NUMBER", "rx_accepted_err", "NUMBER", "rx_accepted_unusual", "NUMBER", "rx_bad_eth", "NUMBER", "rx_count", "NUMBER", "tx_bytes", "NUMBER", "tx_count", "NUMBER", "tx_errors", "NUMBER", "tx_frames", "NUMBER", "connections_created", "NUMBER", "connections_destroyed", "NUMBER", "net", "activate_fails", "NUMBER", "cfg_fails", "NUMBER", "event_fails", "NUMBER", "rx_queue_event_count", "NUMBER", "rx_event_rate_limiter_count", "NUMBER", "rx_tap_event_count", "NUMBER", "rx_bytes_count", "NUMBER", "rx_packets_count", "NUMBER", "rx_fails", "NUMBER", "rx_count", "NUMBER", "tx_bytes_count", "NUMBER", "tx_fails", "NUMBER", "tx_count", "NUMBER", "tx_packets_count", "NUMBER", "tx_queue_event_count", "NUMBER", "tx_rate_limiter_event_count", "NUMBER", "tx_spoofed_mac_count", "NUMBER", "patch_api_requests", "drive_count", "NUMBER", "drive_fails", "NUMBER", "network_count", "NUMBER", "network_fails", "NUMBER", "machine_cfg_count", "NUMBER", "machine_cfg_fails", "NUMBER", "put_api_requests", "actions_count", "NUMBER", "actions_fails", "NUMBER", "boot_source_count", "NUMBER", "boot_source_fails", "NUMBER", "drive_count", "NUMBER", "drive_fails", "NUMBER", "logger_count", "NUMBER", "logger_fails", "NUMBER", "machine_cfg_count", "NUMBER", "machine_cfg_fails", "NUMBER", "network_count", "NUMBER", "network_fails", "NUMBER", "rtc", "error_count", "NUMBER", "missed_read_count", "NUMBER", "missed_write_count", "NUMBER", "seccomp", "num_faults", "NUMBER", "vcpu", "exit_io_in", "NUMBER", "exit_io_out", "NUMBER", "exit_mmio_read", "NUMBER", "exit_mmio_write", "NUMBER", "failures", "NUMBER", "filter_cpuid", "NUMBER", "vmm", "device_events", "NUMBER", "panic_count", "NUMBER", "uart", "error_count", "NUMBER", "flush_count", "NUMBER", "missed_read_count", "NUMBER", "missed_write_count", "NUMBER", "read_count", "NUMBER", "write_count", "NUMBER", "memory", "dirty_pages", "NUMBER", "signals", "sigbus", "NUMBER", "sigsegv", "NUMBER", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "Received", "KVM_EXIT_SHUTDOWN", "signal", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "info", "msg", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "Shutting", "down", "VM", "after", "intercepting", "a", "bad", "syscall", "NUMBER", "NUMBER", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "Z", "level", "warning", "msg", "firecracker", "exited", "exit", "status", "NUMBER", "runtime", "aws", "NUMBER", "firecracker", "vmID", "NUMBER", "The", "pretty", "printed", "metrics", "json", "in", "case", "it", "s", "helpful", "utc_timestamp_ms", "NUMBER", "api_server", "process_startup_time_us", "NUMBER", "process_startup_time_cpu_us", "NUMBER", "sync_response_fails", "NUMBER", "sync_vmm_send_timeout_count", "NUMBER", "block", "activate_fails", "NUMBER", "cfg_fails", "NUMBER", "event_fails", "NUMBER", "execute_fails", "NUMBER", "invalid_reqs_count", "NUMBER", "flush_count", "NUMBER", "queue_event_count", "NUMBER", "rate_limiter_event_count", "NUMBER", "update_count", "NUMBER", "update_fails", "NUMBER", "read_bytes", "NUMBER", "write_bytes", "NUMBER", "read_count", "NUMBER", "write_count", "NUMBER", "get_api_requests", "instance_info_count", "NUMBER", "instance_info_fails", "NUMBER", "machine_cfg_count", "NUMBER", "machine_cfg_fails", "NUMBER", "i", "NUMBER", "error_count", "NUMBER", "missed_read_count", "NUMBER", "missed_write_count", "NUMBER", "read_count", "NUMBER", "reset_count", "NUMBER", "write_count", "NUMBER", "logger", "missed_metrics_count", "NUMBER", "metrics_fails", "NUMBER", "missed_log_count", "NUMBER", "log_fails", "NUMBER", "mmds", "rx_accepted", "NUMBER", "rx_accepted_err", "NUMBER", "rx_accepted_unusual", "NUMBER", "rx_bad_eth", "NUMBER", "rx_count", "NUMBER", "tx_bytes", "NUMBER", "tx_count", "NUMBER", "tx_errors", "NUMBER", "tx_frames", "NUMBER", "connections_created", "NUMBER", "connections_destroyed", "NUMBER", "net", "activate_fails", "NUMBER", "cfg_fails", "NUMBER", "event_fails", "NUMBER", "rx_queue_event_count", "NUMBER", "rx_event_rate_limiter_count", "NUMBER", "rx_tap_event_count", "NUMBER", "rx_bytes_count", "NUMBER", "rx_packets_count", "NUMBER", "rx_fails", "NUMBER", "rx_count", "NUMBER", "tx_bytes_count", "NUMBER", "tx_fails", "NUMBER", "tx_count", "NUMBER", "tx_packets_count", "NUMBER", "tx_queue_event_count", "NUMBER", "tx_rate_limiter_event_count", "NUMBER", "tx_spoofed_mac_count", "NUMBER", "patch_api_requests", "drive_count", "NUMBER", "drive_fails", "NUMBER", "network_count", "NUMBER", "network_fails", "NUMBER", "machine_cfg_count", "NUMBER", "machine_cfg_fails", "NUMBER", "put_api_requests", "actions_count", "NUMBER", "actions_fails", "NUMBER", "boot_source_count", "NUMBER", "boot_source_fails", "NUMBER", "drive_count", "NUMBER", "drive_fails", "NUMBER", "logger_count", "NUMBER", "logger_fails", "NUMBER", "machine_cfg_count", "NUMBER", "machine_cfg_fails", "NUMBER", "network_count", "NUMBER", "network_fails", "NUMBER", "rtc", "error_count", "NUMBER", "missed_read_count", "NUMBER", "missed_write_count", "NUMBER", "seccomp", "num_faults", "NUMBER", "vcpu", "exit_io_in", "NUMBER", "exit_io_out", "NUMBER", "exit_mmio_read", "NUMBER", "exit_mmio_write", "NUMBER", "failures", "NUMBER", "filter_cpuid", "NUMBER", "vmm", "device_events", "NUMBER", "panic_count", "NUMBER", "uart", "error_count", "NUMBER", "flush_count", "NUMBER", "missed_read_count", "NUMBER", "missed_write_count", "NUMBER", "read_count", "NUMBER", "write_count", "NUMBER", "memory", "dirty_pages", "NUMBER", "signals", "sigbus", "NUMBER", "sigsegv", "NUMBER", "I", "m", "consistently", "seeing", "panic_count", "stay", "at", "NUMBER", "like", "above", "across", "multiple", "reproductions", "of", "the", "error", "NUMBER", "Anything", "else", "worth", "trying", "I", "m", "not", "sure", "if", "it", "s", "helpful", "but", "I", "run", "the", "test", "case", "with", "strace", "attached", "to", "all", "firecracker", "processes", "the", "occurrence", "of", "the", "error", "w", "full", "rt_sigprocmask", "args", "looks", "like", "ioctl", "NUMBER", "KVM_RUN", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_RUN", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_RUN", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "Received", "KVM_EXIT_SHUTDOWN", "signal", "n", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "munmap", "NUMBER", "x", "NUMBER", "f", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "sigaltstack", "ss_sp", "NULL", "ss_flags", "SS_DISABLE", "ss_size", "NUMBER", "NULL", "NUMBER", "munmap", "NUMBER", "x", "NUMBER", "f", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "rt_sigprocmask", "SIG_BLOCK", "QUIT", "ILL", "BUS", "FPE", "KILL", "USR", "NUMBER", "PIPE", "TERM", "CHLD", "CONT", "STOP", "TSTP", "TTIN", "TTOU", "URG", "NUMBER", "NUMBER", "SIGSYS", "si_signo", "SIGSYS", "si_code", "SYS_SECCOMP", "si_call_addr", "NUMBER", "x", "NUMBER", "dff", "NUMBER", "si_syscall", "__NR_rt_sigprocmask", "si_arch", "AUDIT_ARCH_X", "NUMBER", "_", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "Shutting", "down", "VM", "after", "intercepting", "a", "bad", "syscall", "NUMBER", "NUMBER", "n", "NUMBER", "NUMBER", "write", "NUMBER", "utc_timestamp_ms", "NUMBER", "api_server", "process_startup_time_us", "NUMBER", "process_startup_time_cpu_us", "NUMBER", "sync_response_fails", "NUMBER", "sync_vmm_send_timeout_count", "NUMBER", "block", "activate_fails", "NUMBER", "cfg_fails", "NUMBER", "event_fails", "NUMBER", "execute_fails", "NUMBER", "invalid_reqs_count", "NUMBER", "flush_count", "NUMBER", "queue_event_count", "NUMBER", "rate_limiter_event_count", "NUMBER", "update_count", "NUMBER", "update_fails", "NUMBER", "read_bytes", "NUMBER", "write_bytes", "NUMBER", "read_count", "NUMBER", "write_count", "NUMBER", "get_api_requests", "instance_info_count", "NUMBER", "instance_info_fails", "NUMBER", "machine_cfg_count", "NUMBER", "machine_cfg_fails", "NUMBER", "i", "NUMBER", "error_count", "NUMBER", "missed_read_count", "NUMBER", "missed_write_count", "NUMBER", "read_count", "NUMBER", "reset_count", "NUMBER", "write_count", "NUMBER", "logger", "missed_metrics_count", "NUMBER", "metrics_fails", "NUMBER", "missed_log_count", "NUMBER", "log_fails", "NUMBER", "mmds", "rx_accepted", "NUMBER", "rx_accepted_err", "NUMBER", "rx_accepted_unusual", "NUMBER", "rx_bad_eth", "NUMBER", "rx_count", "NUMBER", "tx_bytes", "NUMBER", "tx_count", "NUMBER", "tx_errors", "NUMBER", "tx_frames", "NUMBER", "connections_created", "NUMBER", "connections_destroyed", "NUMBER", "net", "activate_fails", "NUMBER", "cfg_fails", "NUMBER", "event_fails", "NUMBER", "rx_queue_event_count", "NUMBER", "rx_event_rate_limiter_count", "NUMBER", "rx_tap_event_count", "NUMBER", "rx_bytes_count", "NUMBER", "rx_packets_count", "NUMBER", "rx_fails", "NUMBER", "rx_count", "NUMBER", "tx_bytes_count", "NUMBER", "tx_fails", "NUMBER", "tx_count", "NUMBER", "tx_packets_count", "NUMBER", "tx_queue_event_count", "NUMBER", "tx_rate_limiter_event_count", "NUMBER", "tx_spoofed_mac_count", "NUMBER", "patch_api_requests", "drive_count", "NUMBER", "drive_fails", "NUMBER", "network_count", "NUMBER", "network_fails", "NUMBER", "machine_cfg_count", "NUMBER", "machine_cfg_fails", "NUMBER", "put_api_requests", "actions_count", "NUMBER", "actions_fails", "NUMBER", "boot_source_count", "NUMBER", "boot_source_fails", "NUMBER", "drive_count", "NUMBER", "drive_fails", "NUMBER", "logger_count", "NUMBER", "logger_fails", "NUMBER", "machine_cfg_count", "NUMBER", "machine_cfg_fails", "NUMBER", "network_count", "NUMBER", "network_fails", "NUMBER", "rtc", "error_count", "NUMBER", "missed_read_count", "NUMBER", "missed_write_count", "NUMBER", "seccomp", "num_faults", "NUMBER", "vcpu", "exit_io_in", "NUMBER", "exit_io_out", "NUMBER", "exit_mmio_read", "NUMBER", "exit_mmio_write", "NUMBER", "failures", "NUMBER", "filter_cpuid", "NUMBER", "vmm", "device_events", "NUMBER", "panic_count", "NUMBER", "uart", "error_count", "NUMBER", "flush_count", "NUMBER", "missed_read_count", "NUMBER", "missed_write_count", "NUMBER", "read_count", "NUMBER", "write_count", "NUMBER", "memory", "dirty_pages", "NUMBER", "signals", "sigbus", "NUMBER", "sigsegv", "NUMBER", "n", "NUMBER", "NUMBER", "exit_group", "NUMBER", "exited", "with", "NUMBER", "What", "s", "kind", "of", "interesting", "be", "that", "I", "can", "also", "see", "some", "strace", "logs", "for", "different", "VMs", "showing", "fc_vcpu", "NUMBER", "threads", "that", "apparently", "receive", "KVM_EXIT_SHUTDOWN", "but", "then", "don", "t", "call", "rt_sigprocmask", "allowing", "them", "to", "exit", "with", "NUMBER", "ioctl", "NUMBER", "KVM_RUN", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_RUN", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_RUN", "NUMBER", "NUMBER", "futex", "NUMBER", "xb", "NUMBER", "FUTEX_WAIT_PRIVATE", "NUMBER", "NULL", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "Received", "KVM_EXIT_SHUTDOWN", "signal", "n", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "exited", "with", "NUMBER", "so", "I", "think", "my", "previous", "statement", "that", "KVM_EXIT_SHUTDOWN", "and", "the", "seccomp", "violation", "always", "occur", "together", "actually", "isn", "t", "true", "very", "rarely", "KVM_EXIT_SHUTDOWN", "will", "happen", "without", "the", "bad", "syscall", "NUMBER", "Looks", "like", "you", "find", "the", "root", "cause", "of", "the", "problem", "NUMBER", "We", "do", "not", "whitelist", "KVM_EXIT_SHUTDOWN", "NUMBER", "Now", "the", "interesting", "question", "be", "why", "do", "the", "guest", "initialize", "a", "reboot", "andreeaflorescu", "We", "be", "purposely", "telling", "the", "guest", "to", "do", "a", "reboot", "as", "part", "of", "our", "attempts", "to", "gracefully", "shut", "down", "VMs", "as", "oppose", "to", "an", "ungraceful", "shutdown", "of", "just", "sending", "SIGTERM", "to", "the", "VMM", "process", "NUMBER", "This", "be", "far", "out", "of", "my", "area", "of", "expertise", "but", "I", "m", "curious", "why", "this", "would", "only", "happen", "rarely", "maybe", "NUMBER", "NUMBER", "times", "NUMBER", "Most", "of", "the", "time", "guests", "reboot", "there", "isn", "t", "any", "KVM_EXIT_SHUTDOWN", "sent", "to", "the", "VMM", "process", "at", "all", "NUMBER", "For", "example", "most", "of", "the", "strace", "outputs", "for", "fc_vcpu", "threads", "I", "get", "end", "like", "this", "ioctl", "NUMBER", "KVM_RUN", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_RUN", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_RUN", "TAG", "exited", "with", "NUMBER", "andreeaflorescu", "We", "be", "purposely", "telling", "the", "guest", "to", "do", "a", "reboot", "as", "part", "of", "our", "attempts", "to", "gracefully", "shut", "down", "VMs", "as", "oppose", "to", "an", "ungraceful", "shutdown", "of", "just", "sending", "SIGTERM", "to", "the", "VMM", "process", "NUMBER", "Do", "you", "need", "to", "send", "that", "command", "from", "the", "guest", "Why", "not", "use", "the", "CTR", "ALT", "DEL", "functionality", "instead", "This", "be", "far", "out", "of", "my", "area", "of", "expertise", "but", "I", "m", "curious", "why", "this", "would", "only", "happen", "rarely", "maybe", "NUMBER", "NUMBER", "times", "NUMBER", "Most", "of", "the", "time", "guests", "reboot", "there", "isn", "t", "any", "KVM_EXIT_SHUTDOWN", "sent", "to", "the", "VMM", "process", "at", "all", "NUMBER", "For", "example", "most", "of", "the", "strace", "outputs", "for", "fc_vcpu", "threads", "I", "get", "end", "like", "this", "ioctl", "NUMBER", "KVM_RUN", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_RUN", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_RUN", "TAG", "exited", "with", "NUMBER", "I", "would", "need", "to", "investigate", "this", "before", "giving", "a", "good", "answer", "NUMBER", "I", "will", "assume", "that", "most", "of", "the", "cases", "the", "Firecracker", "process", "dies", "before", "KVM_EXIT_SHUTDOWN", "be", "call", "but", "I", "ll", "need", "to", "look", "a", "bit", "at", "the", "code", "to", "understand", "what", "s", "happening", "there", "NUMBER", "Do", "you", "need", "to", "send", "that", "command", "from", "the", "guest", "Why", "not", "use", "the", "CTR", "ALT", "DEL", "functionality", "instead", "We", "decided", "to", "go", "with", "just", "having", "the", "guest", "init", "system", "do", "a", "reboot", "because", "ctrl", "alt", "del", "doesn", "t", "work", "on", "all", "kernels", "and", "isn", "t", "support", "on", "aarch", "NUMBER", "which", "we", "d", "like", "to", "support", "someday", "LINK", "microvm", "firecracker", "containerd", "pull", "NUMBER", "discussion_r", "NUMBER", "so", "avoiding", "it", "keep", "our", "dependencies", "to", "a", "minimum", "NUMBER", "sipsma", "do", "you", "want", "to", "submit", "a", "PR", "with", "the", "fix", "aghecenco", "I", "thought", "we", "already", "whitelisted", "it", "NUMBER", "If", "there", "s", "no", "way", "around", "it", "we", "can", "whitelist", "it", "I", "guess", "NUMBER", "gc", "plp", "Are", "you", "going", "to", "work", "on", "this", "issue", "soon", "ish", "I", "ve", "just", "made", "a", "one", "line", "fix", "while", "work", "on", "LINK", "microvm", "firecracker", "containerd", "pull", "NUMBER", "since", "it", "impacts", "firecracker", "containerd", "and", "seems", "my", "fix", "be", "work", "NUMBER", "So", "I", "m", "going", "to", "send", "a", "PR", "if", "you", "be", "not", "actively", "work", "on", "NUMBER", "Updated", "proposal", "NUMBER", "Use", "the", "vmm", "NUMBER", "exit_evt", "on", "aarch", "NUMBER", "as", "well", "as", "x", "NUMBER", "_", "NUMBER", "currently", "we", "don", "t", "have", "a", "clean", "exit", "mechanism", "on", "aarch", "NUMBER", "and", "this", "would", "address", "that", "as", "well", "NUMBER", "On", "aarch", "NUMBER", "the", "exit_evt", "will", "simply", "be", "populated", "with", "a", "EventFd", "new", "instead", "of", "use", "the", "i", "NUMBER", "reset_evt", "NUMBER", "NUMBER", "Currently", "when", "vcpu", "s", "move", "to", "their", "exited", "state", "they", "write", "NUMBER", "to", "the", "exit_evt", "and", "then", "exit", "their", "main", "loop", "leading", "to", "the", "thread", "cleanup", "which", "hits", "the", "blacklisted", "syscall", "NUMBER", "Instead", "of", "directly", "finishing", "their", "main", "loop", "the", "vcpu", "could", "write", "NUMBER", "to", "exit_evt", "like", "before", "then", "either", "block", "on", "a", "std", "sync", "Barrier", "waiting", "for", "the", "vmm", "thread", "to", "unblock", "them", "or", "move", "to", "their", "paused", "state", "and", "through", "the", "current", "code", "in", "the", "paused", "state", "block", "on", "waiting", "for", "a", "new", "command", "from", "the", "vmm", "thread", "NUMBER", "Looking", "at", "logs", "for", "various", "PRs", "it", "seems", "our", "CI", "skips", "test_rescan_dev", "from", "integration_tests", "functional", "test_drives", "NUMBER", "py", "on", "x", "NUMBER", "_", "NUMBER", "for", "no", "apparent", "reason", "NUMBER", "The", "test", "be", "not", "skipped", "when", "run", "on", "a", "local", "dev", "machine", "NUMBER", "The", "relevant", "part", "in", "the", "CI", "log", "be", "something", "like", "integration_tests", "functional", "test_drives", "NUMBER", "py", "resize", "NUMBER", "fs", "NUMBER", "NUMBER", "Mar", "NUMBER", "Resizing", "the", "filesystem", "on", "tmp", "firecracker_test_session", "NUMBER", "f", "NUMBER", "cd", "NUMBER", "NUMBER", "ee", "NUMBER", "ebb", "be", "NUMBER", "a", "NUMBER", "cae", "NUMBER", "e", "NUMBER", "e", "fsfiles", "scratch", "NUMBER", "ext", "NUMBER", "to", "NUMBER", "NUMBER", "k", "blocks", "NUMBER", "The", "filesystem", "on", "tmp", "firecracker_test_session", "NUMBER", "f", "NUMBER", "cd", "NUMBER", "NUMBER", "ee", "NUMBER", "ebb", "be", "NUMBER", "a", "NUMBER", "cae", "NUMBER", "e", "NUMBER", "e", "fsfiles", "scratch", "NUMBER", "ext", "NUMBER", "be", "now", "NUMBER", "NUMBER", "k", "blocks", "long", "NUMBER", "NUMBER", "s", "NUMBER", "This", "be", "skipped", "when", "you", "cannot", "create", "a", "loopback", "device", "on", "the", "host", "NUMBER", "Actual", "code", "here", "LINK", "microvm", "firecracker", "blob", "abfa", "NUMBER", "a", "NUMBER", "e", "NUMBER", "dda", "NUMBER", "e", "NUMBER", "e", "NUMBER", "cb", "NUMBER", "d", "NUMBER", "bbd", "test", "integration_tests", "functional", "test_drives", "NUMBER", "py", "L", "NUMBER", "PR", "that", "introduce", "the", "test", "LINK", "microvm", "firecracker", "pull", "NUMBER", "Yes", "NUMBER", "losetup", "somehow", "didn", "t", "work", "on", "the", "CI", "host", "NUMBER", "LINK", "pr", "NUMBER", "s", "NUMBER", "amazonaws", "NUMBER", "com", "pr", "logs", "NUMBER", "kzys", "firecracker", "NUMBER", "d", "NUMBER", "dd", "NUMBER", "log", "losetup", "dev", "loop", "NUMBER", "fail", "to", "set", "up", "loop", "device", "No", "such", "file", "or", "directory", "and", "aghecenco", "recommended", "to", "comment", "out", "the", "test", "for", "a", "moment", "and", "log", "an", "issue", "on", "GitHub", "NUMBER", "I", "did", "the", "former", "but", "forgot", "the", "latter", "NUMBER", "We", "seem", "to", "have", "hit", "a", "mix", "of", "a", "few", "issue", "that", "lead", "to", "losetup", "not", "work", "correctly", "inside", "our", "dev", "container", "the", "host", "kernel", "doesn", "t", "have", "the", "loop", "module", "loaded", "consequently", "dev", "loopX", "block", "devices", "aren", "t", "present", "at", "container", "start", "time", "the", "container", "dev", "space", "be", "set", "only", "once", "at", "container", "start", "losetup", "causes", "the", "loop", "module", "to", "be", "loaded", "after", "container", "start", "so", "dev", "loopX", "show", "up", "on", "the", "host", "but", "not", "inside", "the", "container", "therefore", "losetup", "fail", "inside", "the", "container", "a", "possible", "workaround", "could", "be", "to", "bind", "mount", "dev", "however", "this", "doesn", "t", "work", "because", "we", "also", "launch", "the", "container", "with", "a", "default", "init", "process", "docker", "run", "init", "and", "older", "version", "of", "docker", "use", "dev", "init", "as", "the", "fix", "location", "for", "its", "init", "process", "tini", "LINK", "There", "be", "different", "ways", "to", "approach", "this", "but", "the", "one", "I", "m", "inclined", "towards", "be", "to", "rework", "our", "container", "to", "use", "tini", "from", "a", "location", "of", "our", "choosing", "e", "NUMBER", "g", "NUMBER", "sbin", "tini", "meaning", "we", "no", "longer", "need", "to", "rely", "on", "the", "docker", "init", "switch", "and", "the", "conflicting", "dev", "init", "NUMBER", "Reason", "for", "This", "PR", "Just", "a", "tiny", "cleanup", "NUMBER", "I", "had", "some", "outstanding", "comments", "on", "the", "polly", "PR", "but", "it", "was", "merge", "before", "I", "get", "a", "chance", "to", "look", "at", "it", "again", "NUMBER", "Since", "they", "re", "tiny", "change", "I", "just", "fix", "them", "in", "this", "PR", "NUMBER", "Description", "of", "Changes", "See", "above", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "Good", "idea", "to", "pull", "in", "master", "branch", "change", "as", "well", "so", "we", "don", "t", "diverge", "NUMBER", "Rebasing", "this", "branch", "on", "top", "of", "the", "master", "branch", "in", "a", "PR", "like", "so", "will", "not", "be", "possible", "however", "NUMBER", "Unless", "we", "want", "to", "push", "f", "to", "this", "branch", "all", "the", "time", "NUMBER", "I", "don", "t", "know", "what", "the", "best", "approach", "be", "here", "NUMBER", "I", "ve", "remove", "the", "rebased", "commit", "as", "we", "would", "need", "to", "push", "force", "Reason", "for", "This", "PR", "Invalid", "field", "in", "PATCH", "request", "should", "be", "fail", "properly", "with", "an", "error", "message", "not", "silently", "NUMBER", "See", "NUMBER", "for", "more", "information", "NUMBER", "Description", "of", "Changes", "Added", "serde", "macro", "to", "the", "RateLimiterConfig", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "acatangiu", "I", "have", "do", "as", "you", "said", "update", "the", "commit", "message", "sign", "the", "commit", "and", "add", "a", "test", "case", "NUMBER", "acatangiu", "will", "get", "it", "do", "soon", "NUMBER", "I", "be", "having", "some", "issue", "just", "figuring", "out", "how", "to", "squash", "the", "commit", "because", "I", "seem", "to", "have", "pull", "master", "recently", "NUMBER", "should", "have", "it", "figured", "out", "either", "today", "or", "tomorrow", "NUMBER", "Thanks", "dianpopa", "acatangiu", "everything", "should", "be", "do", "and", "ready", "to", "merge", "now", "Hi", "sandreim", "could", "you", "give", "some", "more", "context", "to", "this", "problem", "Hi", "sandreim", "I", "think", "mi", "yu", "and", "I", "can", "help", "take", "a", "stab", "at", "this", "problem", "NUMBER", "Just", "for", "reference", "we", "re", "two", "students", "at", "UT", "Austin", "who", "be", "looking", "to", "make", "a", "couple", "of", "open", "source", "contributions", "for", "our", "final", "Virtualization", "project", "NUMBER", "Hi", "sandreim", "I", "was", "wondering", "if", "you", "could", "explain", "what", "you", "meant", "by", "two", "of", "your", "suggested", "fix", "configure", "edge", "triggered", "epoll", "for", "the", "tap", "fd", "we", "looked", "through", "the", "code", "and", "find", "the", "part", "of", "the", "code", "that", "do", "not", "unregister", "the", "epoll", "event", "when", "the", "tap", "RX", "be", "be", "blocked", "due", "to", "reaching", "its", "budget", "NUMBER", "Could", "you", "clarify", "what", "you", "meant", "by", "configuring", "the", "edge", "triggered", "epoll", "rework", "the", "current", "state", "machine", "and", "use", "edge", "triggered", "epoll", "could", "you", "give", "some", "general", "context", "towards", "how", "to", "make", "this", "proper", "fix", "NUMBER", "Thank", "you", "for", "your", "time", "Hey", "pyrito", "NUMBER", "sandreim", "already", "has", "a", "fix", "for", "this", "and", "he", "will", "probably", "post", "it", "early", "next", "week", "NUMBER", "Do", "you", "need", "help", "in", "finding", "another", "issue", "andreeaflorescu", "yes", "that", "would", "be", "greatly", "appreciated", "If", "there", "be", "any", "issue", "of", "easy", "difficulty", "that", "we", "could", "tackle", "within", "a", "week", "or", "so", "with", "a", "proof", "of", "concept", "that", "would", "be", "much", "appreciated", "NUMBER", "Thanks", "Not", "sure", "if", "someone", "be", "work", "on", "this", "but", "mi", "yu", "and", "I", "worked", "on", "a", "fix", "for", "this", "Hi", "pyrito", "unfortunately", "this", "issue", "be", "already", "assgined", "and", "andrei", "cosmin", "be", "already", "work", "on", "it", "NUMBER", "As", "a", "tip", "for", "finding", "a", "good", "issue", "please", "look", "at", "those", "with", "the", "Contribute", "help", "wanted", "and", "Contribute", "good", "first", "issue", "labels", "NUMBER", "For", "example", "LINK", "microvm", "firecracker", "issue", "NUMBER", "Fixed", "by", "NUMBER", "Fixed", "in", "PR", "NUMBER", "Signed", "off", "by", "Iulian", "Barbu", "TAG", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Description", "of", "Changes", "Some", "of", "Firecracker", "crates", "have", "dev", "dependency", "on", "tempfile", "crate", "from", "crates", "NUMBER", "io", "NUMBER", "This", "crate", "has", "other", "dependencies", "on", "its", "own", "that", "be", "brought", "into", "Firecracker", "as", "well", "NUMBER", "Removed", "tempfile", "crate", "dev", "dependency", "and", "use", "instead", "vmm", "sys", "util", "tempfile", "module", "which", "basically", "replaces", "tempfile", "crate", "with", "a", "simpler", "implementation", "for", "temporary", "file", "temporary", "directories", "without", "additional", "dependencies", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "I", "ve", "include", "the", "received", "feedback", "NUMBER", "Please", "take", "a", "look", "at", "LINK", "microvm", "firecracker", "commit", "NUMBER", "abc", "NUMBER", "cfea", "NUMBER", "e", "NUMBER", "e", "NUMBER", "e", "NUMBER", "a", "NUMBER", "Will", "continue", "work", "here", "only", "after", "LINK", "vmm", "vmm", "sys", "util", "pull", "NUMBER", "has", "be", "merge", "NUMBER", "iulianbarbu", "if", "we", "merge", "it", "like", "this", "please", "add", "an", "issue", "describing", "the", "leftover", "improvement", "so", "we", "can", "track", "them", "NUMBER", "I", "ve", "add", "the", "following", "issue", "LINK", "microvm", "firecracker", "issue", "NUMBER", "We", "meet", "the", "issue", "with", "firecracker", "in", "LINK", "container", "kata", "container", "issue", "NUMBER", "And", "I", "find", "that", "hybrid", "vsock", "will", "drop", "or", "truncate", "the", "first", "package", "and", "qemu", "doesn", "t", "have", "this", "issue", "NUMBER", "I", "add", "code", "that", "send", "an", "empty", "package", "and", "wait", "the", "first", "package", "arrive", "from", "client", "to", "handle", "this", "issue", "in", "LINK", "sandreim", "Thanks", "for", "your", "comments", "NUMBER", "I", "find", "that", "this", "be", "an", "issue", "of", "kata", "NUMBER", "I", "just", "post", "a", "PR", "to", "fix", "this", "issue", "in", "LINK", "container", "agent", "pull", "NUMBER", "Reason", "for", "This", "PR", "Allow", "users", "to", "run", "Firecracker", "with", "a", "configurable", "custom", "whitelist", "of", "syscalls", "to", "avoid", "the", "need", "to", "recompile", "a", "new", "binary", "NUMBER", "See", "NUMBER", "for", "more", "details", "NUMBER", "Description", "of", "Changes", "Added", "a", "new", "optional", "configuration", "field", "to", "be", "documented", "syscall", "whitelist", "NUMBER", "An", "example", "of", "configuration", "be", "below", "other", "config", "options", "syscall", "whitelist", "arch", "x", "NUMBER", "_", "NUMBER", "toolchain", "musl", "syscalls", "NUMBER", "arch", "aarch", "NUMBER", "toolchain", "musl", "syscalls", "NUMBER", "NUMBER", "NUMBER", "Whitelists", "be", "configured", "per", "architecture", "and", "per", "toolchain", "and", "represented", "by", "a", "list", "of", "syscall", "numbers", "NUMBER", "Currently", "there", "be", "no", "syscall", "number", "validation", "it", "be", "up", "to", "the", "user", "to", "provide", "valid", "syscall", "numbers", "NUMBER", "Additionally", "whitelisted", "syscalls", "be", "all", "add", "to", "the", "seccomp", "filter", "with", "the", "Allow", "action", "conditionals", "argument", "based", "filters", "not", "implement", "NUMBER", "Whitelisted", "syscalls", "be", "merge", "with", "default", "syscalls", "as", "specified", "by", "the", "seccomp", "level", "option", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "I", "m", "work", "on", "cleaning", "up", "commit", "message", "and", "docs", "but", "in", "the", "meantime", "be", "there", "any", "suggestions", "concerns", "about", "the", "structure", "of", "the", "change", "Hi", "acatangiu", "thanks", "for", "the", "followup", "No", "worries", "about", "the", "timeline", "NUMBER", "In", "response", "to", "your", "points", "My", "initial", "implementation", "first", "applied", "the", "default", "syscalls", "then", "tried", "to", "apply", "the", "custom", "whitelist", "but", "it", "seem", "to", "crash", "the", "process", "NUMBER", "If", "I", "understand", "correctly", "this", "be", "because", "the", "syscall", "to", "update", "the", "filters", "be", "not", "whitelisted", "NUMBER", "Is", "this", "actually", "the", "case", "If", "so", "would", "the", "API", "endpoint", "be", "readonly", "and", "just", "return", "the", "list", "of", "whitelisted", "syscalls", "I", "have", "an", "implementation", "of", "per", "thread", "filtering", "addressing", "NUMBER", "but", "haven", "t", "push", "it", "to", "my", "fork", "yet", "NUMBER", "It", "build", "off", "of", "the", "change", "in", "this", "PR", "and", "I", "wanted", "to", "get", "the", "change", "in", "this", "PR", "review", "first", "NUMBER", "Ideally", "we", "allow", "users", "to", "pass", "in", "syscalls", "by", "name", "rather", "than", "by", "number", "for", "better", "UX", "but", "I", "didn", "t", "find", "an", "easy", "way", "to", "map", "from", "syscall", "name", "to", "number", "NUMBER", "I", "was", "looking", "for", "something", "that", "lets", "me", "check", "whether", "or", "not", "a", "variable", "be", "export", "from", "the", "libc", "crate", "be", "that", "possible", "in", "Rust", "Hi", "mi", "yu", "I", "m", "going", "to", "jump", "in", "and", "work", "with", "you", "on", "the", "design", "and", "UX", "here", "beer", "In", "the", "meantime", "quick", "answers", "this", "be", "because", "the", "syscall", "to", "update", "the", "filters", "be", "not", "whitelisted", "NUMBER", "Is", "this", "actually", "the", "case", "That", "s", "right", "prctl", "be", "not", "whitelisted", "nor", "should", "it", "be", "NUMBER", "We", "have", "to", "think", "a", "lot", "about", "what", "to", "apply", "and", "in", "which", "order", "NUMBER", "We", "ll", "iterate", "on", "this", "in", "the", "design", "phase", "NUMBER", "Ideally", "we", "allow", "users", "to", "pass", "in", "syscalls", "by", "name", "rather", "than", "by", "number", "for", "better", "UX", "Agreed", "NUMBER", "I", "didn", "t", "find", "an", "easy", "way", "to", "map", "from", "syscall", "name", "to", "number", "NUMBER", "I", "was", "looking", "for", "something", "that", "lets", "me", "check", "whether", "or", "not", "a", "variable", "be", "export", "from", "the", "libc", "crate", "be", "that", "possible", "in", "Rust", "Not", "that", "I", "know", "of", "what", "s", "more", "libc", "doesn", "t", "export", "all", "of", "them", "so", "we", "shouldn", "t", "count", "on", "it", "NUMBER", "Off", "the", "top", "of", "my", "head", "it", "looks", "like", "we", "should", "hardcode", "the", "mappings", "somewhere", "NUMBER", "aghecenco", "thanks", "for", "the", "clarifications", "Just", "curious", "be", "there", "a", "reason", "why", "libc", "doesn", "t", "export", "all", "syscalls", "Since", "it", "doesn", "t", "seem", "like", "there", "isn", "t", "a", "simple", "alternative", "I", "can", "add", "a", "hardcoded", "list", "of", "syscalls", "to", "the", "code", "NUMBER", "mi", "yu", "I", "don", "t", "know", "maybe", "some", "just", "get", "omitted", "NUMBER", "dianpopa", "find", "one", "a", "while", "back", "see", "LINK", "lang", "libc", "issue", "NUMBER", "On", "second", "thought", "maybe", "it", "would", "be", "better", "and", "it", "would", "definitely", "be", "cleaner", "to", "do", "what", "she", "did", "and", "add", "any", "new", "miss", "ones", "to", "libc", "then", "consume", "them", "from", "there", "instead", "NUMBER", "That", "way", "you", "d", "enrich", "one", "codebase", "while", "not", "unnecessarily", "complicating", "Firecracker", "NUMBER", "This", "PR", "change", "the", "interface", "for", "installing", "seccomp", "filters", "slightly", "so", "it", "might", "impact", "your", "PR", "LINK", "microvm", "firecracker", "pull", "NUMBER", "petreeftime", "thanks", "for", "the", "heads", "up", "aghecenco", "add", "the", "miss", "syscalls", "to", "the", "libc", "crate", "would", "definitely", "be", "cleaner", "but", "would", "that", "solve", "the", "issue", "We", "still", "need", "a", "way", "to", "check", "if", "a", "user", "supplied", "string", "be", "export", "as", "a", "variable", "from", "libc", "and", "read", "the", "value", "right", "Closing", "in", "favor", "of", "make", "new", "PR", "with", "cleaner", "git", "history", "With", "a", "Vmm", "controller", "builder", "in", "place", "the", "road", "to", "freeing", "the", "seccomp", "filter", "of", "the", "timerfd_create", "syscall", "seems", "a", "lot", "simpler", "since", "the", "Vmm", "Builder", "could", "simply", "just", "allocate", "the", "needed", "timerfds", "before", "starting", "the", "microVm", "NUMBER", "If", "we", "aim", "for", "a", "more", "forward", "looking", "solution", "we", "could", "try", "implement", "a", "resource", "pooling", "approach", "like", "the", "one", "display", "in", "NUMBER", "Fixed", "with", "this", "PR", "LINK", "vmm", "vmm", "sys", "util", "pull", "NUMBER", "and", "contained", "by", "NUMBER", "version", "use", "currently", "in", "Firecracker", "NUMBER", "NUMBER", "Reason", "for", "This", "PR", "Tidy", "be", "good", "tidy", "be", "love", "NUMBER", "Description", "of", "Changes", "workspace", "all", "sources", "be", "now", "placed", "in", "their", "respective", "crates", "under", "src", "TAG", "workspace", "unified", "the", "jailer", "source", "under", "a", "single", "bin", "crate", "src", "jailer", "remove", "jailer", "dependency", "from", "the", "firecracker", "crate", "workspace", "configured", "the", "build", "artifacts", "dir", "via", "NUMBER", "cargo", "config", "devctr", "remove", "env", "variable", "use", "to", "override", "the", "cargo", "build", "dir", "update", "to", "Rust", "toolchain", "NUMBER", "clippy", "add", "safety", "doc", "comments", "vsock", "switched", "to", "use", "zeroed", "memory", "for", "the", "TX", "buffer", "instead", "of", "mem", "uninitialized", "since", "the", "latter", "be", "both", "unsafe", "and", "deprecate", "by", "Rust", "NUMBER", "also", "fix", "up", "some", "whitespace", "error", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "Changes", "LGTM", "NUMBER", "I", "ll", "approve", "this", "once", "the", "arm", "build", "be", "fix", "as", "well", "NUMBER", "My", "personal", "take", "on", "this", "be", "I", "that", "it", "makes", "more", "sense", "as", "the", "source", "code", "be", "clearly", "separated", "from", "the", "documentation", "and", "other", "utilities", "NUMBER", "It", "be", "much", "easier", "to", "navigate", "through", "misc", "docs", "and", "tool", "as", "they", "don", "t", "mingle", "with", "rust", "code", "as", "well", "NUMBER", "Do", "you", "have", "a", "quick", "reference", "resource", "you", "can", "link", "that", "explains", "why", "moving", "the", "crates", "under", "src", "be", "tidy", "while", "the", "current", "state", "be", "not", "I", "don", "t", "have", "one", "handy", "NUMBER", "However", "you", "can", "look", "at", "it", "like", "this", "just", "as", "a", "crate", "be", "structured", "use", "a", "src", "dir", "for", "the", "sources", "a", "target", "dir", "for", "the", "build", "artifacts", "and", "the", "root", "for", "support", "file", "such", "as", "Cargo", "NUMBER", "toml", "so", "should", "a", "workspace", "be", "NUMBER", "I", "NUMBER", "e", "NUMBER", "sources", "go", "under", "src", "integration", "test", "go", "under", "test", "documentation", "goes", "under", "docs", "and", "so", "on", "NUMBER", "Also", "in", "this", "particular", "case", "it", "s", "more", "tidy", "because", "this", "arrangement", "enable", "decoupling", "the", "firecracker", "and", "jailer", "crates", "NUMBER", "In", "the", "previous", "layout", "the", "jailer", "main", "was", "part", "of", "the", "firecracker", "crate", "while", "the", "jailer", "core", "lived", "in", "its", "own", "crate", "NUMBER", "Now", "they", "be", "two", "independent", "bin", "executable", "crates", "NUMBER", "My", "_esthetics", "only_", "opinion", "be", "NUMBER", "NUMBER", "The", "docs", "that", "let", "you", "know", "how", "to", "build", "a", "custom", "rootfs", "and", "vmlinux", "LINK", "microvm", "firecracker", "blob", "master", "docs", "rootfs", "and", "kernel", "setup", "NUMBER", "md", "be", "not", "complete", "in", "the", "idea", "that", "they", "do", "not", "show", "how", "to", "configure", "the", "VM", "after", "build", "both", "rootfs", "and", "vmlinux", "and", "log", "in", "successfully", "inside", "the", "VM", "NUMBER", "It", "would", "be", "nice", "to", "provide", "configuration", "for", "simple", "use", "cases", "like", "use", "a", "rootfs", "with", "ssh", "and", "a", "kernel", "build", "from", "linux", "git", "and", "the", "setup", "that", "be", "needed", "in", "order", "to", "ssh", "into", "the", "VM", "with", "root", "user", "NUMBER", "There", "be", "an", "issue", "on", "firecracker", "demo", "repo", "NUMBER", "LINK", "microvm", "firecracker", "demo", "issue", "NUMBER", "issue", "NUMBER", "which", "proves", "that", "the", "docs", "be", "not", "clear", "enough", "in", "the", "environment", "restrictions", "and", "common", "use", "cases", "for", "those", "who", "want", "to", "use", "Firecracker", "with", "rootfs", "kernel", "build", "from", "zero", "NUMBER", "This", "LINK", "initrd", "could", "be", "a", "great", "starting", "point", "NUMBER", "Actually", "that", "be", "the", "script", "that", "was", "use", "to", "create", "the", "initrd", "image", "for", "aarch", "NUMBER", "The", "image", "be", "an", "alpine", "one", "with", "all", "package", "needed", "NUMBER", "Maybe", "we", "can", "tweak", "it", "a", "little", "bit", "and", "be", "able", "to", "specify", "if", "the", "resulting", "image", "will", "contain", "an", "initrd", "or", "not", "NUMBER", "Ignite", "has", "some", "docs", "on", "how", "to", "do", "it", "too", "e", "NUMBER", "g", "NUMBER", "in", "LINK", "LINK", "_arm", "NUMBER", "images", "kernel", "my", "temp", "NUMBER", "fork", "update", "for", "arm", "NUMBER", "LINK", "for", "other", "OSes", "might", "be", "of", "interest", "Hi", "alicelambda", "I", "talked", "with", "iulianbarbu", "NUMBER", "This", "issue", "was", "more", "relate", "to", "also", "configuring", "a", "ssh", "server", "in", "the", "example", "rootfs", "NUMBER", "But", "on", "another", "thought", "this", "be", "use", "case", "specific", "and", "I", "don", "t", "know", "if", "it", "makes", "sense", "to", "include", "this", "in", "the", "Firecracker", "documentation", "NUMBER", "Closing", "for", "now", "NUMBER", "I", "ve", "update", "the", "PR", "based", "on", "the", "received", "feedback", "NUMBER", "Please", "take", "a", "look", "NUMBER", "I", "might", "need", "to", "up", "the", "coverage", "a", "little", "bit", "but", "I", "need", "to", "get", "more", "feedback", "first", "NUMBER", "In", "this", "commit", "net_util", "sys_util", "fc_util", "crates", "were", "combined", "into", "a", "single", "crate", "named", "utils", "NUMBER", "Also", "utils", "crate", "be", "a", "wrapper", "over", "vmm", "sys", "util", "which", "be", "now", "consumed", "in", "Firecracker", "replacing", "sys_util", "NUMBER", "Signed", "off", "by", "Iulian", "Barbu", "TAG", "Reason", "for", "This", "PR", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "Blimey", "NUMBER", "file", "change", "to", "re", "review", "Is", "the", "same", "thing", "basically", "but", "spread", "out", "on", "multiple", "commit", "NUMBER", "D", "It", "should", "be", "faster", "to", "re", "review", "NUMBER", "Redesign", "virtio", "devices", "in", "Firecracker", "NUMBER", "The", "plan", "be", "to", "consume", "virtio", "devices", "build", "blocks", "from", "rust", "vmm", "NUMBER", "For", "this", "goal", "we", "need", "to", "make", "sure", "that", "MMIO", "transport", "can", "be", "easily", "replaced", "with", "PCI", "Rate", "Limiter", "be", "not", "tightly", "coupled", "to", "the", "emulation", "of", "virtio", "Metrics", "be", "opt", "in", "Logging", "be", "do", "via", "the", "default", "Rust", "logger", "implementation", "others", "The", "output", "of", "this", "issue", "be", "a", "design", "doc", "for", "virtio", "devices", "that", "takes", "in", "consideration", "the", "aforementioned", "constraints", "NUMBER", "re", "others", "device", "identification", "be", "split", "into", "device", "type", "currently", "expose", "by", "the", "VirtioDevice", "trait", "user", "facing", "device", "ID", "NUMBER", "See", "LINK", "microvm", "firecracker", "pull", "NUMBER", "discussion_r", "NUMBER", "aghecenco", "how", "about", "we", "created", "a", "separate", "issue", "for", "the", "device", "identification", "This", "issue", "was", "created", "before", "the", "decoupling", "work", "was", "start", "and", "I", "assume", "that", "now", "we", "have", "a", "few", "more", "things", "that", "need", "to", "be", "do", "NUMBER", "We", "can", "link", "the", "separate", "issue", "in", "this", "one", "NUMBER", "Task", "Breakdown", "LINK", "microvm", "firecracker", "issue", "NUMBER", "LINK", "microvm", "firecracker", "issue", "NUMBER", "LINK", "microvm", "firecracker", "issue", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Done", "add", "NUMBER", "to", "the", "list", "above", "Reason", "for", "This", "PR", "Remove", "superfluous", "vcpu", "count", "variable", "NUMBER", "Description", "of", "Changes", "We", "can", "use", "the", "length", "of", "the", "vcpus", "variable", "to", "get", "the", "count", "of", "vcpus", "NUMBER", "This", "way", "we", "also", "discarding", "unuse", "variables", "for", "x", "NUMBER", "_", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "x", "No", "new", "unsafe", "code", "has", "be", "add", "NUMBER", "Fixed", "by", "NUMBER", "Closed", "by", "PR", "NUMBER", "We", "have", "to", "check", "the", "following", "the", "overall", "architecture", "be", "ok", "the", "crate", "be", "safe", "to", "use", "there", "be", "no", "methods", "that", "can", "generate", "undefined", "behavior", "all", "the", "unsafe", "blocks", "be", "absolutely", "necessary", "all", "the", "unsafe", "methods", "and", "traits", "be", "marked", "as", "unsafe", "This", "be", "already", "do", "in", "rust", "vmm", "vm", "memory", "NUMBER", "We", "should", "switch", "to", "that", "crate", "very", "soon", "NUMBER", "Progress", "tracked", "in", "NUMBER", "Since", "kvm", "bindings", "be", "consumed", "by", "multiple", "projects", "I", "touched", "base", "with", "the", "rust", "vmm", "community", "on", "this", "topic", "in", "today", "s", "syncup", "NUMBER", "I", "will", "follow", "up", "with", "a", "doc", "proposal", "in", "the", "kvm", "bindings", "repo", "as", "a", "PR", "so", "folks", "can", "comment", "NUMBER", "Fixed", "in", "LINK", "microvm", "kvm", "bindings", "pull", "NUMBER", "acatangiu", "how", "about", "we", "keep", "this", "open", "to", "track", "the", "work", "for", "merge", "it", "upstream", "It", "looks", "like", "it", "be", "do", "in", "firecracker", "microvm", "kvm", "bindings", "NUMBER", "track", "the", "work", "for", "merge", "it", "upstream", "I", "agree", "but", "be", "LINK", "microvm", "firecracker", "the", "right", "repo", "to", "track", "that", "I", "think", "both", "LINK", "microvm", "kvm", "bindings", "and", "LINK", "vmm", "kvm", "bindings", "be", "better", "locations", "to", "keep", "a", "track", "issue", "NUMBER", "WDYT", "Hmm", "it", "looks", "like", "the", "action", "item", "be", "on", "Firecracker", "side", "not", "on", "rust", "vmm", "NUMBER", "I", "would", "prefer", "to", "track", "this", "on", "the", "Firecracker", "side", "until", "we", "switch", "back", "to", "use", "the", "upstream", "version", "NUMBER", "We", "can", "also", "track", "this", "in", "firecracker", "microvm", "kvm", "bindings", "NUMBER", "My", "impression", "was", "this", "be", "a", "temporary", "state", "and", "we", "want", "to", "still", "consume", "kvm", "ioctls", "from", "upstream", "NUMBER", "acatangiu", "can", "you", "please", "expand", "on", "why", "be", "this", "work", "blocked", "on", "NUMBER", "My", "understanding", "was", "that", "you", "can", "still", "use", "the", "newer", "version", "of", "kvm", "ioctls", "and", "just", "replace", "the", "occurrence", "of", "sys_util", "EventFd", "with", "vmm", "sys", "util", "Eventfd", "NUMBER", "With", "this", "approach", "we", "can", "unblock", "the", "work", "on", "this", "issue", "and", "at", "the", "same", "time", "make", "sure", "we", "take", "the", "time", "that", "we", "need", "for", "switching", "to", "vmm", "sys", "util", "NUMBER", "Reason", "for", "This", "PR", "Add", "the", "env", "variable", "KEEP_TEST_SESSION", "to", "keep", "the", "created", "test", "session", "file", "tree", "at", "the", "end", "of", "a", "test", "NUMBER", "This", "allow", "re", "launching", "test", "on", "a", "previous", "test", "session", "without", "rebuilding", "all", "binaries", "NUMBER", "Description", "of", "Changes", "conftest", "NUMBER", "py", "and", "integration", "test", "README", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "x", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "dianpopa", "this", "be", "the", "followup", "of", "LINK", "microvm", "firecracker", "pull", "NUMBER", "discussion_r", "NUMBER", "Hey", "marcov", "thanks", "for", "this", "PR", "At", "a", "first", "glance", "it", "looks", "like", "the", "new", "env", "var", "has", "effect", "when", "run", "the", "test", "directly", "via", "pytest", "could", "you", "extend", "it", "to", "work", "with", "the", "container", "too", "The", "recommended", "way", "to", "run", "integ", "test", "be", "tool", "devtool", "test", "this", "spins", "up", "a", "Docker", "container", "and", "runs", "pytest", "inside", "it", "NUMBER", "I", "think", "the", "devtool", "script", "should", "pick", "up", "the", "env", "var", "and", "propagate", "it", "to", "the", "container", "NUMBER", "Thank", "you", "aghecenco", "do", "and", "sorry", "for", "taking", "some", "time", "NUMBER", "I", "bump", "into", "an", "error", "cause", "by", "the", "default", "jail", "root", "srv", "jailer", "LINK", "microvm", "firecracker", "blob", "NUMBER", "bf", "NUMBER", "ad", "NUMBER", "a", "NUMBER", "f", "NUMBER", "a", "NUMBER", "d", "NUMBER", "e", "NUMBER", "eef", "NUMBER", "af", "NUMBER", "af", "NUMBER", "jailer", "src", "lib", "NUMBER", "rs", "L", "NUMBER", "be", "on", "a", "different", "partition", "than", "the", "default", "test", "directory", "root", "tmp", "firecracker_test_session", "NUMBER", "The", "test", "suite", "can", "t", "hardlink", "the", "chroots", "to", "the", "test", "session", "dir", "in", "this", "case", "NUMBER", "You", "could", "either", "check", "that", "the", "test", "session", "dir", "be", "on", "the", "same", "partition", "as", "srv", "jailer", "as", "the", "test", "suite", "doesn", "t", "overwrite", "it", "anywhere", "risky", "and", "unrecommended", "not", "persist", "the", "jails", "persist", "just", "the", "build", "artefacts", "NUMBER", "Ok", "rolled", "back", "to", "the", "initial", "version", "and", "clarified", "about", "the", "need", "to", "be", "use", "inside", "a", "container", "NUMBER", "Thanks", "for", "the", "in", "depth", "review", "What", "s", "with", "the", "new", "TR_TMPDIR", "env", "var", "aghecenco", "apparently", "you", "can", "override", "the", "default", "tmp", "firecracker_test_session", "see", "conftest", "NUMBER", "py", "Change", "logger", "options", "type", "from", "Value", "to", "Vec", "TAG", "for", "strictly", "type", "checking", "which", "would", "prevent", "potential", "unwrap", "on", "None", "panics", "NUMBER", "Signed", "off", "by", "lifupan", "TAG", "Reason", "for", "This", "PR", "Fix", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Either", "no", "new", "unsafe", "code", "has", "be", "add", "or", "the", "newly", "add", "unsafe", "code", "be", "unavoidable", "and", "properly", "documented", "NUMBER", "Hey", "lifupan", "the", "PR", "description", "be", "miss", "the", "checklist", "did", "you", "accidentally", "remove", "it", "Hey", "lifupan", "the", "PR", "description", "be", "miss", "the", "checklist", "did", "you", "accidentally", "remove", "it", "Yeah", "I", "remove", "them", "by", "accident", "and", "I", "restored", "them", "now", "NUMBER", "lifupan", "please", "also", "update", "CHANGELOG", "NUMBER", "md", "as", "this", "fix", "a", "panic", "condition", "NUMBER", "Add", "a", "new", "line", "in", "the", "Fixed", "section", "something", "in", "the", "lines", "of", "Fixed", "an", "issue", "in", "logger", "configuration", "that", "could", "crash", "the", "Firecracker", "process", "on", "invalid", "input", "NUMBER", "Issue", "NUMBER", "NUMBER", "Remember", "to", "adhere", "to", "format", "NUMBER", "lifupan", "please", "also", "update", "CHANGELOG", "NUMBER", "md", "as", "this", "fix", "a", "panic", "condition", "NUMBER", "Add", "a", "new", "line", "Hi", "aghecenco", "Updated", "Hey", "lifupan", "andreeaflorescu", "point", "out", "that", "problem", "be", "bigger", "than", "this", "fix", "NUMBER", "Any", "option", "pass", "to", "options", "other", "than", "an", "array", "will", "lead", "to", "a", "panic", "NUMBER", "The", "right", "thing", "to", "do", "would", "be", "to", "add", "a", "deserialize_with", "for", "this", "member", "NUMBER", "See", "an", "example", "here", "LINK", "microvm", "firecracker", "blob", "caddf", "NUMBER", "b", "NUMBER", "bb", "NUMBER", "a", "NUMBER", "bd", "NUMBER", "db", "NUMBER", "b", "NUMBER", "vmm", "src", "vmm_config", "machine_config", "NUMBER", "rs", "L", "NUMBER", "The", "deserialize_with", "function", "should", "skip", "Option", "None", "s", "accept", "nothing", "other", "than", "arrays", "of", "LogOption", "s", "Hi", "aghecenco", "andreeaflorescu", "Updated", "Hi", "aghecenco", "The", "default", "CI", "fail", "with", "test_coverage", "as", "below", "integration_tests", "build", "test_coverage", "NUMBER", "py", "NUMBER", "in", "test_coverage", "assert", "coverage", "COVERAGE_TARGET_PCT", "coverage_low_msg", "E", "AssertionError", "Current", "code", "coverage", "NUMBER", "be", "below", "the", "target", "NUMBER", "NUMBER", "E", "assert", "NUMBER", "NUMBER", "How", "can", "I", "fix", "this", "issue", "Hi", "aghecenco", "The", "default", "CI", "fail", "with", "test_coverage", "as", "below", "integration_tests", "build", "test_coverage", "NUMBER", "py", "NUMBER", "in", "test_coverage", "assert", "coverage", "COVERAGE_TARGET_PCT", "coverage_low_msg", "E", "AssertionError", "Current", "code", "coverage", "NUMBER", "be", "below", "the", "target", "NUMBER", "NUMBER", "E", "assert", "NUMBER", "NUMBER", "How", "can", "I", "fix", "this", "issue", "Let", "s", "see", "if", "it", "pass", "with", "the", "latest", "change", "address", "the", "coverage", "delta", "looks", "small", "indeed", "NUMBER", "You", "can", "also", "run", "the", "test", "locally", "bash", "sudo", "env", "PATH", "PATH", "cargo", "kcov", "all", "and", "visually", "inspect", "the", "file", "you", "modify", "in", "target", "cov", "index", "NUMBER", "html", "NUMBER", "If", "any", "of", "your", "modifications", "aren", "t", "covered", "you", "need", "to", "add", "unit", "test", "that", "cover", "them", "let", "us", "know", "if", "that", "s", "not", "the", "case", "NUMBER", "Hi", "aghecenco", "Unfortunately", "the", "code", "coverage", "be", "still", "fail", "even", "though", "I", "get", "a", "NUMBER", "in", "my", "local", "test", "NUMBER", "lifupan", "I", "checked", "the", "coverage", "test", "too", "and", "none", "of", "your", "code", "be", "uncovered", "NUMBER", "On", "my", "dev", "machine", "too", "the", "coverage", "score", "be", "NUMBER", "but", "on", "the", "test", "instance", "it", "must", "be", "below", "that", "with", "a", "really", "small", "delta", "different", "machines", "might", "get", "different", "coverage", "scores", "NUMBER", "Unfortunately", "the", "code", "coverage", "be", "still", "fail", "even", "though", "I", "get", "a", "NUMBER", "in", "my", "local", "test", "NUMBER", "My", "bad", "I", "didn", "t", "give", "you", "the", "full", "command", "the", "coverage", "test", "excludes", "some", "code", "from", "the", "calculation", "autogenerated", "stuff", "test", "and", "the", "actual", "value", "be", "currently", "NUMBER", "NUMBER", "Full", "command", "bash", "cargo", "kcov", "all", "exclude", "pattern", "CARGO_HOME", "HOME", "NUMBER", "cargo", "build", "test", "usr", "lib", "gcc", "lib", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "bootparam", "NUMBER", "rs", "elf", "NUMBER", "rs", "mpspec", "NUMBER", "rs", "msr_index", "NUMBER", "rs", "_gen", "exclude", "region", "mod", "test", "verify", "firecracker", "microvm", "compute", "capsule", "the", "aarch", "NUMBER", "CI", "machine", "pass", "coverage", "but", "the", "x", "NUMBER", "_", "NUMBER", "one", "doesn", "t", "if", "we", "drop", "the", "target", "on", "x", "NUMBER", "_", "NUMBER", "we", "ll", "get", "the", "reverse", "effect", "NUMBER", "I", "propose", "we", "relax", "the", "coverage", "delta", "from", "NUMBER", "to", "NUMBER", "and", "see", "how", "that", "goes", "NUMBER", "Thoughts", "lifupan", "I", "checked", "the", "coverage", "test", "too", "and", "none", "of", "your", "code", "be", "uncovered", "NUMBER", "On", "my", "dev", "machine", "too", "the", "coverage", "score", "be", "NUMBER", "but", "on", "the", "test", "instance", "it", "must", "be", "below", "that", "with", "a", "really", "small", "delta", "different", "machines", "might", "get", "different", "coverage", "scores", "NUMBER", "Unfortunately", "the", "code", "coverage", "be", "still", "fail", "even", "though", "I", "get", "a", "NUMBER", "in", "my", "local", "test", "NUMBER", "My", "bad", "I", "didn", "t", "give", "you", "the", "full", "command", "the", "coverage", "test", "excludes", "some", "code", "from", "the", "calculation", "autogenerated", "stuff", "test", "and", "the", "actual", "value", "be", "currently", "NUMBER", "NUMBER", "Full", "command", "shell", "cargo", "kcov", "all", "exclude", "pattern", "CARGO_HOME", "HOME", "NUMBER", "cargo", "build", "test", "usr", "lib", "gcc", "lib", "x", "NUMBER", "_", "NUMBER", "linux", "gnu", "bootparam", "NUMBER", "rs", "elf", "NUMBER", "rs", "mpspec", "NUMBER", "rs", "msr_index", "NUMBER", "rs", "_gen", "exclude", "region", "mod", "test", "verify", "firecracker", "microvm", "compute", "capsule", "the", "aarch", "NUMBER", "CI", "machine", "pass", "coverage", "but", "the", "x", "NUMBER", "_", "NUMBER", "one", "doesn", "t", "if", "we", "drop", "the", "target", "on", "x", "NUMBER", "_", "NUMBER", "we", "ll", "get", "the", "reverse", "effect", "NUMBER", "I", "propose", "we", "relax", "the", "coverage", "delta", "from", "NUMBER", "to", "NUMBER", "and", "see", "how", "that", "goes", "NUMBER", "Thoughts", "We", "do", "not", "yet", "collect", "coverage", "results", "for", "aarch", "NUMBER", "kcov", "do", "not", "have", "support", "for", "it", "yet", "so", "we", "should", "be", "okay", "with", "whichever", "solution", "NUMBER", "I", "personally", "vote", "for", "the", "NUMBER", "NUMBER", "one", "since", "it", "will", "hopefully", "free", "us", "of", "the", "annoyance", "that", "comes", "with", "having", "to", "drop", "it", "much", "more", "often", "NUMBER", "dianpopa", "NUMBER", "be", "suffering", "from", "the", "same", "issue", "now", "coverage", "test", "pass", "on", "both", "platforms", "I", "merge", "latest", "upstream", "change", "and", "now", "it", "fail", "on", "x", "NUMBER", "_", "NUMBER", "NUMBER", "firecracker", "microvm", "compute", "capsule", "do", "anyone", "have", "anything", "against", "lowering", "the", "coverage", "delta", "We", "ve", "discussed", "live", "and", "in", "cases", "where", "all", "touched", "code", "has", "better", "or", "same", "coverage", "it", "be", "fine", "to", "adjust", "overall", "coverage", "if", "necessary", "because", "of", "rounding", "off", "error", "or", "because", "deriving", "Debug", "or", "because", "some", "covered", "code", "has", "be", "completely", "remove", "and", "the", "overall", "percentage", "decreases", "NUMBER", "What", "I", "fear", "in", "this", "case", "be", "that", "if", "we", "drop", "the", "coverage", "bar", "to", "NUMBER", "the", "coverage", "test", "will", "fail", "on", "arm", "because", "the", "value", "there", "exceeds", "the", "threshold", "NUMBER", "We", "need", "to", "adjust", "the", "delta", "too", "NUMBER", "AFAIK", "there", "be", "no", "coverage", "test", "on", "aarch", "NUMBER", "as", "kcov", "be", "not", "support", "there", "You", "re", "right", "I", "m", "worried", "about", "nothing", "NUMBER", "We", "can", "also", "relax", "the", "delta", "maybe", "in", "a", "separate", "PR", "so", "we", "can", "comment", "on", "it", "NUMBER", "Yup", "NUMBER", "Meanwhile", "lifupan", "don", "t", "worry", "about", "the", "coverage", "we", "ll", "review", "your", "change", "disregarding", "the", "fail", "test", "and", "fix", "that", "separately", "NUMBER", "Yup", "NUMBER", "Meanwhile", "lifupan", "don", "t", "worry", "about", "the", "coverage", "we", "ll", "review", "your", "change", "disregarding", "the", "fail", "test", "and", "fix", "that", "separately", "NUMBER", "That", "sounds", "great", "thanks", "NUMBER", "Hi", "aghecenco", "The", "CI", "happy", "now", "NUMBER", "Hi", "I", "m", "at", "student", "at", "UT", "Austin", "and", "be", "looking", "to", "contribute", "to", "container", "relate", "project", "as", "part", "of", "my", "virtualization", "course", "NUMBER", "I", "m", "interested", "in", "picking", "this", "issue", "up", "for", "our", "project", "NUMBER", "mi", "yu", "be", "also", "part", "of", "my", "group", "NUMBER", "Hey", "pyrito", "mi", "yu", "thanks", "for", "the", "interest", "Some", "pointers", "to", "get", "you", "start", "syscalls", "be", "dependent", "on", "architecture", "x", "NUMBER", "_", "NUMBER", "aarch", "NUMBER", "and", "build", "toolchain", "musl", "gnu", "NUMBER", "You", "should", "need", "to", "take", "this", "into", "consideration", "we", "don", "t", "want", "to", "whitelist", "any", "more", "than", "strictly", "necessary", "i", "NUMBER", "e", "NUMBER", "don", "t", "whitelist", "in", "the", "musl", "build", "a", "syscall", "that", "only", "glibc", "emits", "NUMBER", "the", "recommended", "way", "to", "run", "Firecracker", "be", "jailed", "LINK", "microvm", "firecracker", "blob", "master", "docs", "prod", "host", "setup", "NUMBER", "md", "so", "make", "sure", "the", "paths", "be", "relative", "to", "the", "chroot", "ed", "root", "NUMBER", "also", "side", "effect", "of", "the", "jailer", "the", "command", "line", "parameters", "need", "to", "be", "pass", "to", "the", "jailer", "first", "and", "propagated", "to", "Firecracker", "where", "the", "filters", "be", "actually", "install", "NUMBER", "the", "filters", "be", "install", "in", "the", "last", "moment", "before", "starting", "to", "execute", "guest", "code", "right", "before", "the", "vCPUs", "start", "run", "if", "you", "move", "the", "filter", "installation", "to", "any", "moment", "prior", "to", "that", "you", "ll", "need", "to", "whitelist", "more", "syscalls", "including", "some", "potentially", "dangerous", "ones", "think", "SYS_clone", "I", "think", "this", "feature", "can", "go", "nicely", "with", "NUMBER", "it", "d", "be", "nice", "to", "see", "a", "separation", "between", "syscalls", "that", "come", "from", "the", "API", "thread", "the", "emulation", "thread", "and", "the", "vCPUs", "NUMBER", "Reach", "out", "any", "time", "if", "you", "need", "more", "pointers", "slightly_smiling_face", "Looking", "forward", "to", "the", "PRs", "NUMBER", "Thanks", "aghecenco", "I", "have", "a", "few", "question", "How", "be", "the", "whitelist", "going", "to", "be", "inputted", "ideally", "Are", "we", "looking", "at", "something", "that", "will", "be", "defined", "in", "a", "config", "file", "or", "will", "it", "be", "a", "list", "of", "argument", "pass", "through", "by", "the", "user", "Do", "you", "have", "any", "recommendations", "on", "how", "we", "can", "test", "quickly", "to", "see", "how", "our", "change", "be", "affecting", "the", "build", "Thanks", "To", "follow", "up", "a", "Slack", "conversation", "with", "aghecenco", "we", "be", "looking", "for", "more", "input", "on", "how", "exactly", "users", "should", "specify", "syscalls", "to", "whitelist", "NUMBER", "For", "example", "would", "they", "configure", "a", "custom", "whitelist", "as", "part", "of", "the", "config", "file", "NUMBER", "syscall_whitelist", "connect", "read", "etc", "NUMBER", "And", "do", "we", "want", "to", "support", "allowing", "users", "to", "configure", "each", "individual", "syscall", "in", "terms", "of", "allow", "argument", "and", "conditionals", "Finally", "how", "should", "we", "approach", "configuration", "options", "for", "different", "architectures", "Would", "it", "be", "better", "to", "have", "something", "like", "this", "NUMBER", "syscall_whitelist", "x", "NUMBER", "TAG", "aarch", "NUMBER", "TAG", "as", "oppose", "to", "the", "first", "code", "snippet", "NUMBER", "The", "first", "option", "seems", "easier", "for", "the", "user", "but", "would", "complicate", "the", "parsing", "logic", "quite", "a", "bit", "NUMBER", "Not", "sure", "what", "a", "good", "tradeoff", "be", "NUMBER", "This", "all", "looks", "very", "reasonable", "to", "me", "Just", "one", "point", "Is", "the", "idea", "for", "the", "thread", "property", "to", "act", "as", "a", "regex", "like", "string", "The", "proposal", "mentions", "thread", "should", "be", "one", "of", "vmm", "vcpu", "api", "but", "in", "the", "example", "config", "file", "I", "see", "fc_vcpu", "as", "one", "of", "the", "thread", "names", "NUMBER", "Do", "we", "want", "to", "support", "different", "filters", "for", "different", "vcpu", "threads", "It", "seems", "to", "make", "more", "sense", "to", "have", "the", "same", "filters", "for", "all", "vcpu", "threads", "NUMBER", "My", "partner", "and", "I", "will", "be", "work", "on", "this", "issue", "Signed", "off", "by", "Laura", "Loghin", "TAG", "Reason", "for", "This", "PR", "Let", "users", "configure", "the", "logger", "via", "command", "line", "parameter", "and", "not", "only", "use", "the", "API", "socket", "NUMBER", "Partially", "address", "NUMBER", "Description", "of", "Changes", "Renamed", "log_fifo", "to", "log_path", "and", "metrics_fifo", "to", "metrics_path", "NUMBER", "Added", "log", "path", "level", "show", "level", "show", "log", "origin", "parameters", "to", "firecracker", "for", "recording", "the", "logs", "immediately", "after", "starting", "a", "Firecracker", "process", "and", "without", "needing", "to", "configure", "the", "logger", "via", "an", "API", "call", "NUMBER", "The", "value", "for", "the", "log", "path", "parameter", "must", "be", "the", "path", "to", "the", "resource", "fifo", "or", "file", "that", "will", "be", "use", "for", "logging", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "an", "issue", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "dhrgit", "dianpopa", "I", "address", "all", "of", "your", "comments", "NUMBER", "Please", "take", "another", "look", "NUMBER", "dhrgit", "dianpopa", "I", "address", "all", "of", "your", "comments", "NUMBER", "Please", "take", "another", "look", "NUMBER", "Will", "do", "NUMBER", "lauralt", "I", "created", "a", "commit", "LINK", "_logs", "on", "top", "of", "your", "PR", "which", "reflects", "my", "thoughts", "on", "how", "this", "functionality", "could", "be", "achieved", "in", "the", "cleanest", "way", "I", "could", "think", "of", "NUMBER", "You", "can", "see", "there", "that", "the", "src", "firecracker", "be", "freed", "of", "the", "two", "dependencies", "introduce", "by", "this", "PR", "serde_json", "and", "vmm", "sys", "util", "since", "I", "think", "that", "make", "firecracker", "depend", "on", "serde_json", "be", "not", "good", "as", "far", "as", "our", "desires", "of", "separation", "of", "concerns", "NUMBER", "Also", "as", "far", "as", "having", "firecracker", "create", "the", "path", "for", "the", "user", "I", "understand", "the", "flexibility", "argument", "however", "we", "expose", "ourselves", "to", "inconsistent", "behavior", "since", "we", "be", "not", "offering", "the", "same", "flexibility", "when", "initializing", "the", "logger", "through", "the", "API", "and", "so", "we", "be", "run", "the", "risk", "of", "users", "get", "confused", "NUMBER", "Firecracker", "should", "be", "creating", "only", "the", "paths", "that", "be", "vital", "to", "its", "proper", "function", "NUMBER", "Log", "destinations", "together", "with", "kernel", "file", "disk", "images", "be", "external", "resources", "that", "should", "be", "created", "by", "the", "user", "NUMBER", "Moreover", "I", "myself", "be", "very", "skeptical", "to", "creating", "paths", "for", "the", "user", "since", "this", "be", "an", "expensive", "operation", "and", "if", "not", "careful", "about", "it", "we", "may", "be", "heading", "to", "process", "startup", "time", "penalties", "NUMBER", "lauralt", "I", "created", "a", "commit", "LINK", "_logs", "on", "top", "of", "your", "PR", "which", "reflects", "my", "thoughts", "on", "how", "this", "functionality", "could", "be", "achieved", "in", "the", "cleanest", "way", "I", "could", "think", "of", "NUMBER", "You", "can", "see", "there", "that", "the", "src", "firecracker", "be", "freed", "of", "the", "two", "dependencies", "introduce", "by", "this", "PR", "serde_json", "and", "vmm", "sys", "util", "since", "I", "think", "that", "make", "firecracker", "depend", "on", "serde_json", "be", "not", "good", "as", "far", "as", "our", "desires", "of", "separation", "of", "concerns", "NUMBER", "Also", "as", "far", "as", "having", "firecracker", "create", "the", "path", "for", "the", "user", "I", "understand", "the", "flexibility", "argument", "however", "we", "expose", "ourselves", "to", "inconsistent", "behavior", "since", "we", "be", "not", "offering", "the", "same", "flexibility", "when", "initializing", "the", "logger", "through", "the", "API", "and", "so", "we", "be", "run", "the", "risk", "of", "users", "get", "confused", "NUMBER", "Firecracker", "should", "be", "creating", "only", "the", "paths", "that", "be", "vital", "to", "its", "proper", "function", "NUMBER", "Log", "destinations", "together", "with", "kernel", "file", "disk", "images", "be", "external", "resources", "that", "should", "be", "created", "by", "the", "user", "NUMBER", "Moreover", "I", "myself", "be", "very", "skeptical", "to", "creating", "paths", "for", "the", "user", "since", "this", "be", "an", "expensive", "operation", "and", "if", "not", "careful", "about", "it", "we", "may", "be", "heading", "to", "process", "startup", "time", "penalties", "NUMBER", "Nice", "suggestions", "I", "agree", "we", "should", "offer", "the", "same", "flexibility", "when", "configuring", "logger", "via", "command", "line", "parameter", "and", "via", "logger", "NUMBER", "I", "ve", "include", "your", "change", "in", "the", "current", "commit", "please", "take", "another", "look", "lauralt", "I", "created", "a", "commit", "LINK", "_logs", "on", "top", "of", "your", "PR", "which", "reflects", "my", "thoughts", "on", "how", "this", "functionality", "could", "be", "achieved", "in", "the", "cleanest", "way", "I", "could", "think", "of", "NUMBER", "You", "can", "see", "there", "that", "the", "src", "firecracker", "be", "freed", "of", "the", "two", "dependencies", "introduce", "by", "this", "PR", "serde_json", "and", "vmm", "sys", "util", "since", "I", "think", "that", "make", "firecracker", "depend", "on", "serde_json", "be", "not", "good", "as", "far", "as", "our", "desires", "of", "separation", "of", "concerns", "NUMBER", "Also", "as", "far", "as", "having", "firecracker", "create", "the", "path", "for", "the", "user", "I", "understand", "the", "flexibility", "argument", "however", "we", "expose", "ourselves", "to", "inconsistent", "behavior", "since", "we", "be", "not", "offering", "the", "same", "flexibility", "when", "initializing", "the", "logger", "through", "the", "API", "and", "so", "we", "be", "run", "the", "risk", "of", "users", "get", "confused", "NUMBER", "Firecracker", "should", "be", "creating", "only", "the", "paths", "that", "be", "vital", "to", "its", "proper", "function", "NUMBER", "Log", "destinations", "together", "with", "kernel", "file", "disk", "images", "be", "external", "resources", "that", "should", "be", "created", "by", "the", "user", "NUMBER", "Moreover", "I", "myself", "be", "very", "skeptical", "to", "creating", "paths", "for", "the", "user", "since", "this", "be", "an", "expensive", "operation", "and", "if", "not", "careful", "about", "it", "we", "may", "be", "heading", "to", "process", "startup", "time", "penalties", "NUMBER", "Nice", "suggestions", "I", "agree", "we", "should", "offer", "the", "same", "flexibility", "when", "configuring", "logger", "via", "command", "line", "parameter", "and", "via", "logger", "NUMBER", "I", "ve", "include", "your", "change", "in", "the", "current", "commit", "please", "take", "another", "look", "Cool", "I", "will", "take", "another", "look", "asap", "Thanks", "From", "the", "looks", "of", "it", "this", "enable", "the", "user", "to", "provide", "both", "a", "log", "arg", "and", "a", "log", "via", "config", "file", "NUMBER", "This", "conflict", "doesn", "t", "appear", "to", "be", "resolve", "anywhere", "and", "to", "lead", "to", "a", "startup", "failure", "due", "to", "logger", "double", "initialization", "NUMBER", "I", "this", "correct", "From", "the", "looks", "of", "it", "this", "enable", "the", "user", "to", "provide", "both", "a", "log", "arg", "and", "a", "log", "via", "config", "file", "NUMBER", "This", "conflict", "doesn", "t", "appear", "to", "be", "resolve", "anywhere", "and", "to", "lead", "to", "a", "startup", "failure", "due", "to", "logger", "double", "initialization", "NUMBER", "I", "this", "correct", "Yep", "it", "will", "fail", "with", "Reinitialization", "of", "logger", "not", "allow", "NUMBER", "but", "this", "will", "happen", "also", "if", "after", "configuring", "the", "logger", "via", "cmd", "line", "parameter", "the", "user", "sends", "a", "PUT", "api", "request", "for", "logger", "NUMBER", "I", "think", "it", "should", "be", "up", "to", "the", "user", "to", "be", "careful", "and", "use", "only", "one", "method", "for", "the", "configuration", "what", "do", "you", "think", "Question", "I", "don", "t", "think", "we", "need", "the", "infamous", "preinitialized", "or", "configured", "the", "current", "name", "be", "needed", "anymore", "NUMBER", "This", "was", "a", "workaround", "that", "we", "introduce", "so", "that", "we", "can", "have", "logs", "when", "starting", "Firecracker", "NUMBER", "We", "can", "now", "have", "logs", "by", "configuring", "Firecracker", "from", "the", "start", "of", "the", "process", "NUMBER", "Can", "we", "remove", "that", "workaround", "It", "can", "be", "do", "in", "another", "PR", "to", "not", "clutter", "this", "one", "but", "I", "think", "we", "should", "do", "this", "before", "publishing", "a", "new", "version", "of", "Firecracker", "NUMBER", "WDYT", "From", "what", "I", "recall", "even", "with", "this", "type", "of", "configuration", "for", "the", "logger", "panic", "set_hook", "would", "still", "be", "problematic", "because", "we", "can", "t", "be", "sure", "whether", "to", "use", "error", "or", "println", "NUMBER", "Damn", "NUMBER", "I", "always", "forget", "about", "that", "one", "NUMBER", "I", "still", "think", "we", "can", "work", "around", "it", "NUMBER", "I", "ll", "open", "an", "issue", "about", "that", "one", "as", "well", "NUMBER", "Closing", "this", "for", "now", "as", "no", "urgent", "need", "for", "this", "functionality", "has", "be", "identified", "NUMBER", "Feel", "free", "to", "reopen", "if", "otherwise", "NUMBER", "The", "failure", "occur", "here", "register_irqfd_evt", "com_evt_", "NUMBER", "_", "NUMBER", "NUMBER", "I", "think", "the", "failure", "be", "cause", "by", "this", "LINK", "patch", "NUMBER", "What", "be", "the", "error", "message", "code", "number", "returned", "when", "it", "fail", "NUMBER", "EINVAL", "sandreim", "serban", "NUMBER", "I", "did", "a", "rebase", "and", "decreased", "the", "coverage", "after", "make", "sure", "all", "the", "code", "I", "add", "remove", "be", "covered", "by", "unit", "test", "NUMBER", "Please", "take", "a", "look", "and", "re", "review", "Currently", "instance", "id", "has", "little", "limitation", "NUMBER", "Here", "introduces", "some", "Regex", "to", "limit", "it", "more", "strict", "NUMBER", "It", "allows", "only", "alphanumeric", "and", "starting", "with", "alphanumeric", "and", "max", "length", "of", "NUMBER", "Signed", "off", "by", "xiekeyang", "TAG", "Reason", "for", "This", "PR", "Limit", "instance", "id", "strictly", "Remove", "previous", "error", "enum", "items", "for", "this", "has", "more", "causes", "to", "fail", "and", "should", "depend", "on", "regexp", "NUMBER", "This", "seems", "less", "strong", "but", "it", "can", "bring", "more", "flexible", "improvement", "via", "fix", "the", "regex", "pattern", "NUMBER", "Description", "of", "Changes", "The", "commit", "says", "it", "all", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Hi", "andreeaflorescu", "thanks", "for", "your", "explain", "NUMBER", "It", "sounds", "ok", "I", "ll", "close", "this", "PR", "NUMBER", "Hi", "can", "mi", "yu", "and", "I", "go", "ahead", "and", "get", "assigned", "to", "this", "issue", "To", "follow", "up", "do", "you", "have", "more", "specifics", "on", "how", "to", "go", "about", "the", "emulation", "for", "aarch", "NUMBER", "I", "m", "looking", "at", "the", "code", "here", "LINK", "microvm", "firecracker", "blob", "master", "devices", "src", "legacy", "i", "NUMBER", "rs", "but", "I", "m", "not", "sure", "what", "be", "x", "NUMBER", "specific", "NUMBER", "Hi", "mi", "yu", "The", "i", "NUMBER", "be", "a", "keyboard", "driver", "that", "be", "x", "NUMBER", "specific", "you", "cannot", "enable", "it", "for", "a", "arm", "NUMBER", "kernel", "config", "NUMBER", "You", "can", "try", "do", "a", "make", "menuconfig", "inside", "a", "linux", "kernel", "on", "an", "arm", "NUMBER", "and", "x", "NUMBER", "_", "NUMBER", "machine", "in", "parallel", "NUMBER", "If", "you", "go", "to", "Device", "drivers", "input", "device", "support", "hardware", "i", "o", "ports", "you", "will", "see", "that", "on", "the", "x", "NUMBER", "_", "NUMBER", "you", "get", "the", "i", "NUMBER", "PC", "keyboard", "controller", "option", "while", "on", "the", "arm", "NUMBER", "machine", "you", "do", "not", "NUMBER", "What", "we", "could", "do", "for", "arm", "NUMBER", "in", "this", "scenario", "be", "to", "implement", "an", "GPIO", "controller", "which", "be", "use", "in", "virtualized", "ARM", "systems", "to", "provide", "injection", "of", "keycodes", "through", "the", "linux", "gpio", "keys", "driver", "without", "the", "need", "for", "a", "more", "complex", "device", "i", "NUMBER", "e", "NUMBER", "a", "keyboard", "controller", "NUMBER", "We", "could", "use", "the", "gpio", "device", "to", "send", "a", "combination", "of", "CTRL", "ALT", "DELETE", "just", "like", "we", "do", "on", "x", "NUMBER", "_", "NUMBER", "by", "implement", "the", "i", "NUMBER", "Fortunately", "enough", "the", "linux", "kernel", "offers", "support", "for", "the", "ARM", "PrimeCell", "GPIO", "PL", "NUMBER", "which", "be", "a", "AMBA", "Advanced", "Microcontroller", "Bus", "Architecture", "compliant", "device", "NUMBER", "In", "Firecracker", "we", "already", "have", "the", "RTC", "which", "be", "also", "an", "AMBA", "device", "implement", "the", "PL", "NUMBER", "specification", "NUMBER", "So", "the", "next", "step", "here", "as", "far", "as", "introduce", "ctrl", "alt", "del", "functionality", "on", "aarch", "NUMBER", "would", "be", "to", "try", "to", "implement", "the", "pl", "NUMBER", "specification", "LINK", "NUMBER", "Take", "a", "look", "at", "the", "RTC", "implementation", "devices", "src", "legacy", "for", "a", "little", "bit", "of", "inspiration", "NUMBER", "mi", "yu", "pyrito", "be", "you", "still", "interested", "in", "contribute", "here", "acatangiu", "apologies", "for", "the", "late", "response", "NUMBER", "I", "don", "t", "think", "I", "will", "have", "the", "time", "to", "contribute", "to", "this", "issue", "in", "the", "near", "future", "NUMBER", "I", "ll", "unassign", "myself", "NUMBER", "Thanks", "We", "currently", "have", "a", "use", "case", "where", "we", "need", "to", "dynamically", "attach", "drives", "we", "do", "this", "by", "creating", "stub", "drives", "and", "later", "use", "patch", "to", "replace", "the", "stub", "drive", "with", "an", "actual", "drive", "NUMBER", "However", "we", "ve", "find", "that", "we", "want", "to", "give", "the", "option", "to", "our", "users", "to", "allow", "them", "to", "specify", "the", "rate", "limiter", "and", "write", "permissions", "during", "patching", "NUMBER", "We", "can", "work", "around", "this", "by", "doing", "it", "all", "in", "the", "beginning", "when", "we", "create", "the", "initial", "drives", "NUMBER", "However", "this", "requires", "our", "users", "to", "know", "upfront", "what", "rate", "limiting", "and", "write", "permissions", "they", "need", "NUMBER", "While", "implement", "this", "work", "around", "isn", "t", "too", "much", "work", "having", "the", "ability", "to", "specify", "the", "rate", "limiters", "and", "write", "permissions", "during", "patch", "would", "really", "simplify", "things", "NUMBER", "Hello", "I", "be", "interested", "in", "work", "on", "this", "issue", "NUMBER", "Do", "you", "have", "any", "tips", "for", "get", "start", "Hey", "mprey", "NUMBER", "This", "issue", "has", "two", "parts", "NUMBER", "We", "need", "to", "provide", "two", "actions", "update", "block", "device", "permissions", "update", "rate", "limiter", "for", "block", "device", "The", "block", "device", "permission", "be", "set", "when", "doing", "the", "device", "feature", "negotiation", "NUMBER", "Once", "the", "device", "be", "live", "you", "can", "only", "update", "the", "block", "device", "permission", "only", "if", "you", "be", "reseting", "the", "device", "NUMBER", "You", "can", "take", "a", "look", "at", "the", "specification", "section", "NUMBER", "LINK", "open", "NUMBER", "org", "virtio", "virtio", "v", "NUMBER", "cs", "NUMBER", "virtio", "v", "NUMBER", "cs", "NUMBER", "html", "x", "NUMBER", "NUMBER", "We", "don", "t", "support", "block", "device", "reset", "in", "Firecracker", "right", "now", "NUMBER", "We", "need", "to", "discuss", "whether", "this", "be", "something", "that", "we", "want", "to", "support", "NUMBER", "For", "patching", "the", "rate", "limiter", "we", "already", "have", "a", "patch", "on", "Rate", "Limiter", "for", "network", "devices", "NUMBER", "The", "work", "should", "be", "similar", "NUMBER", "You", "can", "take", "a", "look", "at", "this", "PR", "that", "introduce", "the", "patch", "as", "an", "example", "LINK", "microvm", "firecracker", "pull", "NUMBER", "We", "be", "currently", "re", "work", "the", "devices", "in", "Firecracker", "so", "the", "code", "that", "be", "handle", "devices", "might", "change", "quite", "a", "lot", "NUMBER", "CC", "firecracker", "microvm", "compute", "capsule", "do", "you", "think", "it", "makes", "sense", "to", "add", "this", "feature", "now", "or", "should", "we", "wait", "for", "the", "rework", "of", "devices", "to", "get", "merge", "Ok", "well", "let", "me", "know", "if", "you", "decide", "to", "pursue", "this", "feature", "now", "NUMBER", "I", "can", "start", "work", "on", "this", "issue", "NUMBER", "acatangiu", "Both", "be", "probably", "equally", "as", "important", "but", "if", "I", "had", "to", "choose", "one", "probably", "drive", "permissions", "NUMBER", "mremap", "gets", "issue", "at", "NUMBER", "K", "used_capacity", "NUMBER", "needed_extra_capacity", "NUMBER", "Thread", "NUMBER", "fc_api", "hit", "Breakpoint", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "in", "mremap", "gdb", "bt", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "in", "mremap", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "ec", "in", "realloc", "NUMBER", "NUMBER", "x", "NUMBER", "in", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "d", "NUMBER", "in", "core", "result", "Result", "LT", "T", "C", "E", "GT", "map", "h", "NUMBER", "d", "NUMBER", "b", "NUMBER", "a", "NUMBER", "aa", "NUMBER", "self", "NUMBER", "op", "NUMBER", "at", "rustc", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "e", "NUMBER", "fc", "NUMBER", "caa", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "src", "libcore", "result", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "b", "in", "alloc", "raw_vec", "RawVec", "LT", "T", "C", "A", "GT", "current_layout", "h", "NUMBER", "dc", "NUMBER", "self", "NUMBER", "x", "NUMBER", "ffff", "NUMBER", "db", "NUMBER", "at", "rustc", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "e", "NUMBER", "fc", "NUMBER", "caa", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "src", "liballoc", "raw_vec", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "c", "NUMBER", "d", "in", "alloc", "raw_vec", "RawVec", "LT", "T", "C", "A", "GT", "reserve_internal", "h", "NUMBER", "aaccf", "NUMBER", "ef", "NUMBER", "e", "self", "NUMBER", "x", "NUMBER", "ffff", "NUMBER", "ff", "NUMBER", "df", "NUMBER", "used_capacity", "NUMBER", "needed_extra_capacity", "NUMBER", "fallibility", "Infallible", "strategy", "Amortized", "at", "rustc", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "e", "NUMBER", "fc", "NUMBER", "caa", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "src", "liballoc", "raw_vec", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "in", "alloc", "raw_vec", "RawVec", "LT", "T", "C", "A", "GT", "reserve", "h", "NUMBER", "ebc", "NUMBER", "e", "NUMBER", "fd", "NUMBER", "self", "NUMBER", "x", "NUMBER", "ffff", "NUMBER", "ff", "NUMBER", "df", "NUMBER", "used_capacity", "NUMBER", "needed_extra_capacity", "NUMBER", "at", "rustc", "NUMBER", "e", "NUMBER", "bb", "NUMBER", "e", "NUMBER", "fc", "NUMBER", "caa", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "ca", "NUMBER", "d", "NUMBER", "src", "liballoc", "raw_vec", "NUMBER", "rs", "NUMBER", "If", "I", "understand", "correctly", "if", "we", "be", "not", "whitelisting", "mremap", "firecracker", "will", "panic", "when", "it", "try", "to", "process", "request", "with", "payload", "greater", "than", "NUMBER", "Kilobytes", "NUMBER", "A", "workaround", "for", "this", "be", "to", "use", "multiple", "PATCH", "request", "which", "implement", "JSON", "Merge", "PATCH", "functionality", "per", "MMDS", "docs", "The", "MMDS", "contents", "can", "be", "update", "either", "via", "a", "subsequent", "PUT", "that", "replaces", "them", "entirely", "or", "use", "PATCH", "request", "which", "feed", "the", "JSON", "body", "into", "the", "JSON", "Merge", "Patch", "functionality", "based", "on", "RFC", "NUMBER", "Would", "this", "be", "considered", "a", "limitation", "What", "would", "be", "the", "conclusion", "for", "this", "issue", "My", "thoughts", "be", "that", "we", "can", "address", "this", "issue", "by", "documenting", "this", "aspect", "of", "MMDS", "request", "then", "close", "it", "NUMBER", "firecracker", "microvm", "compute", "capsule", "WDYT", "Your", "proposal", "sounds", "reasonable", "NUMBER", "MMDS", "was", "not", "designed", "with", "huge", "payloads", "in", "mind", "and", "NUMBER", "KiB", "sounds", "like", "a", "good", "enough", "size", "NUMBER", "IMO", "the", "proposal", "sounds", "reasonable", "NUMBER", "But", "if", "we", "ever", "need", "to", "support", "huge", "payloads", "we", "could", "store", "the", "MMDS", "data", "in", "a", "temporary", "directory", "file", "structure", "on", "disk", "and", "only", "use", "a", "small", "buffer", "in", "Firecracker", "to", "stream", "the", "data", "via", "the", "API", "server", "NUMBER", "It", "wouldn", "t", "be", "as", "fast", "as", "an", "in", "memory", "data", "store", "but", "the", "memory", "footprint", "be", "reduced", "NUMBER", "Is", "this", "filesystem", "approach", "going", "to", "work", "around", "the", "fact", "that", "the", "mremap", "syscall", "be", "call", "when", "we", "process", "huge", "payloads", "I", "guess", "we", "will", "hit", "this", "syscall", "either", "way", "NUMBER", "This", "limitation", "comes", "from", "the", "fact", "that", "the", "micro", "http", "lib", "be", "retrieving", "the", "body", "of", "a", "HTTP", "request", "in", "memory", "instead", "of", "streaming", "it", "NUMBER", "I", "guess", "we", "would", "need", "to", "provide", "change", "to", "micro", "http", "lib", "as", "well", "to", "get", "around", "mremap", "NUMBER", "Your", "proposal", "sounds", "reasonable", "NUMBER", "MMDS", "was", "not", "designed", "with", "huge", "payloads", "in", "mind", "and", "NUMBER", "KiB", "sounds", "like", "a", "good", "enough", "size", "NUMBER", "Yep", "I", "think", "we", "have", "to", "firmly", "differentiate", "the", "recommended", "MMDS", "usages", "NUMBER", "I", "think", "it", "be", "best", "to", "assume", "that", "the", "intended", "and", "the", "recommended", "MMDS", "usage", "implies", "small", "payloads", "in", "size", "at", "maximum", "NUMBER", "KiB", "NUMBER", "I", "will", "open", "a", "PR", "with", "this", "update", "NUMBER", "Iulian", "please", "also", "check", "with", "customers", "NUMBER", "I", "don", "t", "remember", "the", "whole", "stack", "when", "I", "initially", "repro", "d", "this", "but", "please", "re", "repro", "and", "pinpoint", "where", "that", "NUMBER", "K", "comes", "from", "NUMBER", "I", "vaguely", "remember", "that", "it", "wasn", "t", "a", "fix", "limit", "but", "the", "details", "be", "lost", "Docs", "be", "one", "way", "to", "address", "the", "limitation", "but", "I", "think", "we", "should", "at", "least", "look", "if", "it", "be", "possible", "to", "return", "an", "error", "to", "the", "user", "when", "the", "payload", "exceeds", "NUMBER", "KiB", "instead", "of", "triggering", "the", "mremap", "call", "NUMBER", "Firecracker", "can", "enforce", "a", "custom", "limit", "too", "by", "forcing", "the", "vec", "to", "a", "maximum", "capacity", "we", "decide", "NUMBER", "If", "the", "initial", "allocation", "fail", "Firecracker", "won", "t", "be", "able", "to", "process", "the", "PUT", "anyway", "NUMBER", "If", "the", "payload", "exceeds", "the", "maximum", "capacity", "Firecracker", "can", "reject", "it", "NUMBER", "Docs", "be", "one", "way", "to", "address", "the", "limitation", "but", "I", "think", "we", "should", "at", "least", "look", "if", "it", "be", "possible", "to", "return", "an", "error", "to", "the", "user", "when", "the", "payload", "exceeds", "NUMBER", "KiB", "instead", "of", "triggering", "the", "mremap", "call", "NUMBER", "Firecracker", "can", "enforce", "a", "custom", "limit", "too", "by", "forcing", "the", "vec", "to", "a", "maximum", "capacity", "we", "decide", "NUMBER", "If", "the", "initial", "allocation", "fail", "Firecracker", "won", "t", "be", "able", "to", "process", "the", "PUT", "anyway", "NUMBER", "If", "the", "payload", "exceeds", "the", "maximum", "capacity", "Firecracker", "can", "reject", "it", "NUMBER", "Yep", "totally", "agree", "NUMBER", "I", "ll", "look", "into", "reproducing", "the", "issue", "and", "then", "try", "to", "understand", "what", "solution", "fits", "best", "NUMBER", "I", "confirm", "that", "this", "be", "fix", "by", "NUMBER", "Because", "we", "whitelist", "mremap", "we", "can", "send", "payloads", "greater", "than", "NUMBER", "KiB", "NUMBER", "When", "we", "be", "not", "whitelisting", "mremp", "sending", "a", "payload", "bigger", "than", "NUMBER", "KiB", "induce", "a", "panic", "with", "an", "error", "relate", "to", "NUMBER", "syscall", "mremap", "NUMBER", "This", "PR", "get", "rid", "of", "some", "discover", "incorrect", "usages", "of", "checked_offset", "and", "checked_range_offset", "from", "memory_model", "crate", "NUMBER", "It", "also", "renames", "memory", "model", "function", "like", "region_end", "and", "end_addr", "which", "with", "their", "naming", "bring", "ambiguity", "in", "how", "their", "usage", "should", "be", "NUMBER", "Signed", "off", "by", "Iulian", "Barbu", "TAG", "Reason", "for", "This", "PR", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Haven", "t", "yet", "looked", "at", "the", "code", "but", "wanted", "to", "call", "out", "the", "need", "for", "a", "better", "commit", "and", "PR", "summary", "the", "first", "line", "the", "title", "NUMBER", "It", "should", "summarize", "the", "intention", "of", "the", "change", "along", "with", "the", "area", "module", "they", "be", "in", "NUMBER", "I", "ve", "update", "accordingly", "NUMBER", "Please", "take", "a", "look", "at", "the", "commit", "title", "again", "NUMBER", "I", "ve", "add", "the", "modules", "where", "the", "change", "reside", "in", "the", "commit", "description", "because", "of", "the", "NUMBER", "chars", "length", "rule", "for", "the", "commit", "title", "NUMBER", "In", "your", "last", "push", "the", "queue", "unit", "test", "be", "fail", "test", "virtio", "queue", "test", "test_checked_new_descriptor_chain", "NUMBER", "FAILED", "Event", "though", "be", "WIP", "at", "least", "unit", "test", "should", "be", "clean", "at", "every", "push", "NUMBER", "In", "your", "last", "push", "the", "queue", "unit", "test", "be", "fail", "test", "virtio", "queue", "test", "test_checked_new_descriptor_chain", "NUMBER", "FAILED", "Event", "though", "be", "WIP", "at", "least", "unit", "test", "should", "be", "clean", "at", "every", "push", "NUMBER", "Yes", "I", "get", "your", "point", "NUMBER", "I", "was", "thinking", "more", "on", "actual", "backing", "up", "my", "latest", "change", "NUMBER", "I", "can", "also", "keep", "a", "mirror", "branch", "to", "push", "to", "it", "which", "be", "not", "linked", "in", "any", "way", "to", "the", "PR", "branch", "but", "it", "be", "not", "that", "straight", "forward", "NUMBER", "I", "guess", "it", "be", "not", "so", "impactful", "if", "we", "force", "push", "change", "that", "be", "on", "their", "way", "to", "be", "fix", "or", "be", "it", "In", "your", "last", "push", "the", "queue", "unit", "test", "be", "fail", "test", "virtio", "queue", "test", "test_checked_new_descriptor_chain", "NUMBER", "FAILED", "Event", "though", "be", "WIP", "at", "least", "unit", "test", "should", "be", "clean", "at", "every", "push", "NUMBER", "As", "long", "as", "it", "doesn", "t", "create", "unnecessary", "work", "for", "other", "people", "why", "would", "this", "be", "an", "issue", "In", "your", "last", "push", "the", "queue", "unit", "test", "be", "fail", "test", "virtio", "queue", "test", "test_checked_new_descriptor_chain", "NUMBER", "FAILED", "Event", "though", "be", "WIP", "at", "least", "unit", "test", "should", "be", "clean", "at", "every", "push", "NUMBER", "Yes", "I", "get", "your", "point", "NUMBER", "I", "was", "thinking", "more", "on", "actual", "backing", "up", "my", "latest", "change", "NUMBER", "I", "can", "also", "keep", "a", "mirror", "branch", "to", "push", "to", "it", "which", "be", "not", "linked", "in", "any", "way", "to", "the", "PR", "branch", "but", "it", "be", "not", "that", "straight", "forward", "NUMBER", "I", "guess", "it", "be", "not", "so", "impactful", "if", "we", "force", "push", "change", "that", "be", "on", "their", "way", "to", "be", "fix", "or", "be", "it", "To", "me", "looked", "like", "the", "failure", "wasn", "t", "notice", "and", "the", "unit", "test", "was", "pretty", "simple", "to", "fix", "NUMBER", "If", "that", "be", "not", "the", "case", "than", "I", "m", "fine", "with", "the", "way", "it", "be", "NUMBER", "Reason", "for", "This", "PR", "There", "s", "a", "typo", "in", "the", "README", "unkown", "instead", "of", "unknown", "Description", "of", "Changes", "typo", "fix", "in", "the", "README", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Done", "the", "only", "two", "required", "checks", "be", "now", "aarch", "NUMBER", "which", "runs", "on", "a", "NUMBER", "metal", "and", "x", "NUMBER", "_", "NUMBER", "NUMBER", "Reason", "for", "This", "PR", "Issue", "NUMBER", "Description", "of", "Changes", "This", "PR", "add", "support", "for", "a", "configurable", "MMDS", "IP", "address", "NUMBER", "Previously", "the", "MMDS", "IP", "was", "hardcoded", "to", "NUMBER", "NUMBER", "Following", "this", "PR", "the", "user", "can", "choose", "the", "MMDS", "IP", "when", "configuring", "the", "microvm", "network", "interfaces", "via", "PUT", "network", "interfaces", "TAG", "NUMBER", "To", "that", "end", "the", "NetworkInterfaceConfig", "struct", "now", "holds", "a", "new", "field", "named", "mmds_ip", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "This", "PR", "close", "NUMBER", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "The", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "The", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "The", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Regarding", "sandreim", "s", "comment", "I", "agree", "it", "makes", "sense", "NUMBER", "There", "should", "be", "no", "reason", "to", "tie", "the", "MMDS", "to", "a", "specific", "network", "interface", "NUMBER", "I", "m", "not", "sure", "how", "your", "proposal", "fits", "in", "our", "code", "base", "how", "easy", "it", "be", "to", "make", "that", "happen", "but", "it", "be", "conceptually", "a", "better", "design", "NUMBER", "One", "obvious", "downside", "be", "that", "when", "having", "MMDS", "enable", "all", "interfaces", "will", "take", "a", "performance", "latency", "hit", "as", "they", "inspect", "dest", "ip", "of", "every", "outgoing", "packet", "NUMBER", "And", "I", "think", "that", "s", "fine", "NUMBER", "This", "also", "would", "create", "a", "breaking", "API", "change", "but", "we", "could", "handle", "that", "by", "still", "support", "and", "deprecating", "the", "per", "net", "device", "configuration", "and", "applying", "it", "globally", "NUMBER", "Eventually", "we", "will", "remove", "the", "old", "configuration", "method", "NUMBER", "As", "you", "said", "probably", "this", "would", "require", "significant", "effort", "to", "fit", "it", "to", "the", "current", "code", "base", "NUMBER", "Maybe", "someone", "with", "more", "context", "can", "estimate", "this", "effort", "so", "we", "can", "plan", "to", "do", "it", "later", "when", "we", "want", "refactor", "the", "device", "model", "MMDS", "service", "NUMBER", "I", "think", "it", "be", "useful", "to", "have", "per", "interface", "mmds", "configurability", "NUMBER", "We", "can", "run", "multiple", "apps", "with", "different", "networking", "requirements", "within", "a", "microvm", "so", "we", "wouldn", "t", "want", "to", "be", "limited", "by", "an", "all", "or", "nothing", "switch", "NUMBER", "For", "example", "if", "I", "be", "run", "a", "container", "from", "which", "I", "want", "to", "hide", "metadata", "and", "you", "make", "mmds", "config", "global", "then", "there", "be", "nothing", "I", "can", "do", "to", "prevent", "that", "container", "from", "accessing", "mmds", "NUMBER", "I", "could", "add", "blackhole", "routes", "or", "iptables", "rules", "to", "filter", "out", "traffic", "but", "a", "that", "be", "visible", "to", "the", "container", "b", "privileged", "container", "can", "remove", "thouse", "routes", "filters", "NUMBER", "Also", "address", "in", "the", "NUMBER", "NUMBER", "block", "be", "link", "local", "NUMBER", "By", "definition", "they", "be", "valid", "only", "for", "the", "specific", "network", "interface", "s", "connected", "to", "that", "link", "NUMBER", "Because", "firecracker", "can", "t", "know", "which", "link", "a", "given", "interface", "be", "connected", "to", "it", "can", "t", "define", "a", "NUMBER", "x", "NUMBER", "y", "address", "as", "a", "global", "endpoint", "NUMBER", "Also", "suggest", "renaming", "mmds_ip", "to", "mmds_ipv", "NUMBER", "_addr", "ess", "NUMBER", "I", "think", "it", "be", "useful", "to", "have", "per", "interface", "mmds", "configurability", "NUMBER", "We", "can", "run", "multiple", "apps", "with", "different", "networking", "requirements", "within", "a", "microvm", "so", "we", "wouldn", "t", "want", "to", "be", "limited", "by", "an", "all", "or", "nothing", "switch", "NUMBER", "For", "example", "if", "I", "be", "run", "a", "container", "from", "which", "I", "want", "to", "hide", "metadata", "and", "you", "make", "mmds", "config", "global", "then", "there", "be", "nothing", "I", "can", "do", "to", "prevent", "that", "container", "from", "accessing", "mmds", "NUMBER", "I", "could", "add", "blackhole", "routes", "or", "iptables", "rules", "to", "filter", "out", "traffic", "but", "a", "that", "be", "visible", "to", "the", "container", "b", "privileged", "container", "can", "remove", "thouse", "routes", "filters", "NUMBER", "Thank", "you", "Onur", "for", "provide", "this", "use", "case", "at", "least", "I", "was", "not", "aware", "of", "it", "NUMBER", "What", "do", "you", "think", "about", "change", "the", "Firecracker", "REST", "API", "to", "provide", "a", "separate", "endpoint", "for", "configuring", "the", "MMDS", "IPs", "while", "still", "keep", "the", "allow_mmds_requests", "flag", "on", "the", "interface", "configuration", "IMO", "this", "would", "decouple", "the", "configuration", "of", "MMDS", "completely", "from", "the", "network", "interface", "while", "still", "support", "the", "use", "case", "you", "describe", "NUMBER", "What", "do", "you", "think", "about", "change", "the", "Firecracker", "REST", "API", "to", "provide", "a", "separate", "endpoint", "for", "configuring", "the", "MMDS", "IPs", "while", "still", "keep", "the", "allow_mmds_requests", "flag", "on", "the", "interface", "configuration", "Yes", "I", "think", "that", "would", "be", "sufficient", "for", "our", "purposes", "NUMBER", "From", "the", "previous", "conversations", "I", "think", "we", "can", "extract", "two", "approaches", "for", "support", "custom", "MMDS", "IP", "address", "which", "can", "fit", "also", "requirements", "in", "terms", "of", "MMDS", "visibility", "per", "network", "interface", "NUMBER", "NUMBER", "MMDS", "configurable", "IP", "address", "list", "This", "solution", "provides", "MMDS", "custom", "IP", "address", "support", "through", "a", "dedicated", "REST", "API", "which", "permits", "setting", "up", "custom", "MMDS", "IP", "address", "NUMBER", "This", "MMDS", "IP", "address", "list", "will", "be", "bound", "to", "a", "MmdsNetworkStack", "of", "every", "net", "device", "and", "it", "will", "default", "to", "a", "list", "comprised", "from", "the", "default", "NUMBER", "NUMBER", "Every", "network", "device", "can", "be", "configured", "to", "allow", "MMDS", "request", "NUMBER", "The", "default", "be", "to", "not", "allow", "MMDS", "request", "NUMBER", "_Advantages_", "Clear", "separation", "between", "MmdsNetworkStack", "and", "Net", "device", "resources", "NUMBER", "_Disadvantages_", "We", "will", "have", "a", "performance", "hit", "NUMBER", "Every", "time", "we", "want", "to", "transmit", "or", "receive", "a", "packet", "we", "will", "have", "to", "confront", "its", "src", "IP", "address", "or", "dst", "IP", "address", "with", "the", "custom", "MMDS", "IP", "address", "list", "NUMBER", "The", "IP", "address", "check", "can", "be", "optimized", "and", "depends", "mostly", "on", "the", "number", "of", "configured", "MMDS", "IP", "address", "access", "time", "for", "elements", "from", "the", "list", "and", "their", "subnet", "s", "validation", "of", "an", "IP", "address", "before", "the", "list", "access", "NUMBER", "ofiliz", "firecracker", "microvm", "compute", "capsule", "what", "do", "you", "think", "Do", "you", "have", "any", "concerns", "relate", "to", "the", "performance", "hit", "that", "we", "ll", "have", "with", "this", "approach", "Do", "you", "think", "it", "be", "a", "real", "concern", "for", "the", "discussed", "use", "cases", "NUMBER", "MMDS", "configurable", "IP", "address", "per", "network", "interface", "This", "solution", "provides", "MMDS", "custom", "IP", "address", "support", "through", "the", "network", "device", "configuration", "REST", "API", "and", "it", "be", "mostly", "covered", "by", "this", "PR", "NUMBER", "The", "Net", "device", "will", "process", "a", "packet", "and", "will", "detect", "it", "as", "a", "MMDS", "packet", "if", "the", "src", "IP", "address", "or", "dst", "IP", "address", "of", "the", "packet", "be", "equal", "to", "the", "IP", "address", "configured", "for", "that", "network", "device", "NUMBER", "If", "no", "MMDS", "custom", "IP", "address", "be", "specified", "at", "Net", "device", "configuration", "time", "the", "MMDS", "IP", "address", "for", "that", "specific", "Net", "device", "will", "default", "to", "NUMBER", "NUMBER", "The", "Net", "device", "can", "be", "configured", "to", "allow", "MMDS", "request", "NUMBER", "_Advantages_", "We", "will", "not", "have", "any", "performance", "hit", "and", "the", "current", "execution", "flow", "for", "MMDS", "packet", "detection", "and", "transmission", "will", "remain", "the", "same", "NUMBER", "_Disadvantages_", "Separation", "of", "MmdsNetworkStack", "and", "Net", "resources", "be", "not", "achieved", "NUMBER", "We", "would", "end", "up", "with", "a", "MMDS", "IP", "address", "bound", "to", "a", "Net", "device", "NUMBER", "A", "global", "MmdsNetworkStack", "be", "responsible", "for", "processing", "MMDS", "request", "and", "it", "will", "depend", "on", "resources", "bound", "to", "the", "Net", "device", "NUMBER", "ofiliz", "firecracker", "microvm", "compute", "capsule", "what", "do", "yo", "think", "Can", "we", "compromise", "this", "rather", "aesthetic", "concern", "for", "the", "benefits", "that", "it", "will", "bring", "At", "the", "moment", "closing", "this", "in", "favour", "of", "NUMBER", "NUMBER", "This", "PR", "be", "another", "solution", "for", "the", "same", "thing", "which", "was", "less", "preferred", "because", "the", "lack", "of", "MMDS", "Net", "device", "resource", "separation", "NUMBER", "Issue", "from", "upstream", "LINK", "lang", "rustfmt", "issue", "NUMBER", "track", "this", "NUMBER", "Per", "comment", "LINK", "microvm", "firecracker", "blob", "NUMBER", "a", "NUMBER", "c", "NUMBER", "d", "NUMBER", "c", "NUMBER", "f", "NUMBER", "c", "NUMBER", "c", "NUMBER", "f", "NUMBER", "adcab", "NUMBER", "e", "NUMBER", "devices", "src", "virtio", "net", "NUMBER", "rs", "L", "NUMBER", "L", "NUMBER", "virtio", "net", "implementation", "in", "firecracker", "do", "not", "support", "VIRTIO_NET_F_MRG_RXBUF", "NUMBER", "The", "VIRTIO_NET_F_MRG_RXBUF", "allows", "for", "much", "finer", "memory", "management", "that", "the", "exist", "one", "that", "relies", "on", "humongous", "NUMBER", "K", "NUMBER", "pages", "buffers", "on", "guest", "side", "NUMBER", "As", "I", "understand", "the", "NUMBER", "K", "buffers", "also", "have", "to", "be", "contigous", "in", "physical", "memory", "and", "may", "come", "hard", "to", "achieve", "under", "memory", "shortage", "pressure", "NUMBER", "Please", "see", "relevant", "snipper", "from", "virtio", "spec", "NUMBER", "Driver", "Requirements", "Setting", "Up", "Receive", "Buffers", "If", "VIRTIO_NET_F_MRG_RXBUF", "be", "not", "negotiated", "If", "VIRTIO_NET_F_GUEST_TSO", "NUMBER", "VIRTIO_NET_F_GUEST_TSO", "NUMBER", "or", "VIRTIO_NET_F_GUEST_UFO", "be", "negotiated", "the", "driver", "SHOULD", "populate", "the", "receive", "queue", "s", "with", "buffers", "of", "at", "least", "NUMBER", "bytes", "NUMBER", "Otherwise", "the", "driver", "SHOULD", "populate", "the", "receive", "queue", "s", "with", "buffers", "of", "at", "least", "NUMBER", "bytes", "NUMBER", "If", "VIRTIO_NET_F_MRG_RXBUF", "be", "negotiated", "each", "buffer", "MUST", "be", "at", "greater", "than", "the", "size", "of", "the", "struct", "virtio_net_hdr", "NUMBER", "Hi", "wkozaczuk", "thank", "you", "for", "report", "this", "and", "for", "the", "thorough", "investigation", "Looks", "like", "this", "be", "a", "pre", "exist", "functionality", "gap", "that", "we", "haven", "t", "stumbled", "across", "since", "now", "NUMBER", "We", "will", "look", "into", "it", "as", "soon", "as", "we", "have", "bandwidth", "in", "the", "meantime", "if", "you", "have", "a", "fix", "ready", "PRs", "be", "welcome", "I", "cannot", "speak", "to", "whether", "virtio", "spec", "mandates", "this", "feature", "or", "not", "NUMBER", "I", "be", "also", "not", "sure", "how", "it", "affects", "memory", "utilization", "in", "Linux", "guest", "which", "clearly", "handles", "that", "but", "I", "wonder", "at", "what", "cost", "NUMBER", "On", "OSv", "side", "for", "now", "I", "came", "up", "with", "a", "patch", "that", "makes", "it", "use", "large", "NUMBER", "K", "sg", "buffers", "for", "RX", "ring", "if", "VIRTIO_NET_F_MRG_RXBUF", "be", "not", "negotiated", "NUMBER", "This", "unfortunately", "leads", "to", "much", "higher", "memory", "utilization", "NUMBER", "MiB", "vs", "NUMBER", "MiB", "NUMBER", "NUMBER", "K", "buffers", "vs", "NUMBER", "NUMBER", "K", "buffers", "but", "at", "least", "it", "works", "NUMBER", "As", "I", "understand", "each", "packet", "whether", "small", "TAG", "dianpopa", "andreeaflorescu", "It", "seems", "the", "CI", "could", "not", "start", "Should", "we", "re", "kick", "it", "Yes", "indeed", "sorry", "for", "that", "we", "still", "have", "no", "idea", "why", "that", "happens", "sometime", "NUMBER", "Please", "do", "a", "push", "f", "NUMBER", "No", "worries", "NUMBER", "I", "just", "rebased", "and", "push", "force", "NUMBER", "Signed", "off", "by", "Laura", "Loghin", "TAG", "Reason", "for", "This", "PR", "We", "want", "to", "allow", "the", "user", "to", "configure", "and", "start", "a", "microVM", "by", "sending", "only", "one", "PUT", "request", "to", "the", "API", "server", "NUMBER", "Description", "of", "Changes", "Added", "a", "new", "type", "of", "PUT", "request", "vm", "config", "for", "configuring", "a", "microVM", "NUMBER", "The", "JSON", "body", "of", "this", "request", "will", "contain", "the", "whole", "configuration", "for", "the", "vm", "NUMBER", "Sending", "this", "type", "of", "request", "will", "also", "start", "the", "microVM", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "The", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Signed", "off", "by", "Laura", "Loghin", "TAG", "Reason", "for", "This", "PR", "On", "some", "machines", "test_sec_audit", "NUMBER", "py", "fail", "because", "the", "output", "of", "cargo", "audit", "command", "contains", "some", "random", "characters", "between", "Success", "and", "No", "vulnerable", "package", "find", "NUMBER", "We", "can", "avoid", "that", "by", "checking", "the", "exit", "code", "of", "the", "command", "instead", "NUMBER", "Description", "of", "Changes", "Changed", "test", "to", "check", "exit", "code", "of", "cargo", "audit", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "The", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "My", "guess", "be", "that", "the", "particular", "output", "string", "change", "slightly", "NUMBER", "Checking", "return", "code", "will", "always", "be", "more", "robust", "than", "parsing", "output", "NUMBER", "Recent", "version", "of", "cargo", "audit", "e", "NUMBER", "g", "NUMBER", "v", "NUMBER", "the", "one", "from", "fcuvm", "v", "NUMBER", "docker", "image", "feeds", "those", "characters", "into", "stdout", "if", "the", "terminal", "emulator", "support", "colors", "NUMBER", "So", "those", "characters", "LINK", "_escape_code", "be", "a", "way", "to", "colorize", "stdout", "and", "the", "terminal", "emulator", "be", "able", "to", "interpret", "it", "NUMBER", "In", "the", "previous", "docker", "image", "fcuvm", "v", "NUMBER", "the", "version", "of", "cargo", "audit", "be", "v", "NUMBER", "which", "apparently", "do", "not", "feed", "those", "escape", "characters", "into", "stdout", "NUMBER", "When", "start", "a", "VM", "in", "AARCH", "NUMBER", "with", "more", "than", "NUMBER", "vcpus", "the", "VM", "can", "start", "but", "only", "NUMBER", "vcpus", "can", "be", "online", "in", "VM", "NUMBER", "For", "example", "I", "start", "a", "VM", "with", "NUMBER", "vcpus", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "NUMBER", "psci", "fail", "to", "boot", "CPU", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "to", "boot", "NUMBER", "NUMBER", "CPU", "NUMBER", "fail", "in", "unknown", "state", "NUMBER", "x", "NUMBER", "After", "boot", "into", "VM", "use", "lscpu", "NUMBER", "The", "vcpu", "NUMBER", "NUMBER", "be", "online", "and", "NUMBER", "NUMBER", "be", "offline", "NUMBER", "BTW", "I", "can", "t", "make", "them", "offline", "NUMBER", "Hello", "dianpopa", "Thanks", "for", "answering", "NUMBER", "I", "use", "the", "vmlinux", "NUMBER", "bin", "and", "xenial", "NUMBER", "rootfs", "NUMBER", "ext", "NUMBER", "in", "get", "start", "guide", "NUMBER", "bin", "bash", "arch", "uname", "m", "kernel_path", "root", "image_source", "vmlinux", "NUMBER", "bin", "if", "arch", "x", "NUMBER", "_", "NUMBER", "then", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "source", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "kernel_image_path", "kernel_path", "boot_args", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "elif", "arch", "aarch", "NUMBER", "then", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "source", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "kernel_image_path", "kernel_path", "boot_args", "keep_bootcon", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "maxcpus", "NUMBER", "else", "echo", "Cannot", "run", "firecracker", "on", "arch", "architecture", "exit", "NUMBER", "fi", "rootfs_path", "root", "image_source", "xenial", "NUMBER", "rootfs", "NUMBER", "ext", "NUMBER", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "drive_id", "rootfs", "path_on_host", "rootfs_path", "is_root_device", "true", "is_read_only", "false", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "config", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "vcpu_count", "NUMBER", "mem_size_mib", "NUMBER", "ht_enabled", "false", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "H", "accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "log_fifo", "logs", "NUMBER", "fifo", "metrics_fifo", "metrics", "NUMBER", "fifo", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "action_type", "InstanceStart", "My", "host", "be", "linux", "version", "NUMBER", "aarch", "NUMBER", "environment", "with", "NUMBER", "cpus", "and", "NUMBER", "T", "memory", "NUMBER", "Unlimited", "Witchcraft", "investigating", "this", "NUMBER", "I", "get", "it", "this", "afternoon", "NUMBER", "I", "will", "contribute", "it", "in", "next", "days", "NUMBER", "Hi", "Unlimited", "Witchcraft", "Do", "you", "have", "any", "update", "on", "the", "fix", "or", "need", "help", "with", "the", "PR", "I", "have", "prepared", "a", "PR", "but", "it", "depends", "on", "this", "one", "here", "LINK", "vmm", "kvm", "ioctls", "pull", "NUMBER", "Hi", "Unlimited", "Witchcraft", "Do", "you", "have", "any", "update", "on", "the", "fix", "or", "need", "help", "with", "the", "PR", "With", "the", "next", "few", "days", "so", "busy", "NUMBER", "Your", "PR", "be", "great", "Reason", "for", "This", "PR", "Testing", "coverage", "implicitly", "test", "all", "unit", "test", "but", "not", "doc", "test", "NUMBER", "This", "makes", "re", "test", "unit", "test", "redundant", "NUMBER", "This", "redundancy", "should", "be", "remove", "NUMBER", "Description", "of", "Changes", "This", "PR", "makes", "unit", "test", "not", "be", "run", "on", "x", "NUMBER", "since", "on", "this", "platform", "coverage", "test", "implicitly", "test", "them", "NUMBER", "It", "also", "explicitly", "test", "doc", "test", "in", "test_doctests", "NUMBER", "py", "on", "x", "NUMBER", "since", "coverage", "test", "do", "not", "implicitly", "test", "these", "test", "NUMBER", "It", "do", "not", "effect", "test", "behaviour", "on", "aarch", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Hello", "firecracker", "containerd", "has", "begun", "work", "on", "the", "upgrade", "from", "Firecracker", "v", "NUMBER", "to", "v", "NUMBER", "The", "vsock", "relate", "update", "have", "gone", "well", "so", "far", "but", "there", "appears", "to", "be", "an", "unrelated", "regression", "relate", "to", "patching", "drives", "after", "VM", "startup", "NUMBER", "Whenever", "firecracker", "containerd", "issue", "a", "PatchGuestDrive", "request", "it", "now", "gets", "this", "error", "message", "PATCH", "drives", "drive_id", "NUMBER", "patchGuestDriveByIdBadRequest", "FaultMessage", "Error", "retrieving", "device", "epoll", "handler", "I", "can", "see", "in", "the", "logs", "that", "the", "calls", "prior", "to", "this", "error", "that", "attach", "the", "drives", "were", "successful", "and", "it", "doesn", "t", "look", "like", "there", "were", "any", "drive", "relate", "API", "change", "from", "NUMBER", "NUMBER", "so", "I", "think", "we", "be", "still", "use", "the", "API", "correctly", "NUMBER", "I", "m", "not", "at", "all", "familiar", "with", "the", "Firecracker", "codebase", "so", "I", "easily", "may", "be", "misinterpreting", "this", "but", "I", "did", "notice", "there", "was", "a", "test", "add", "between", "NUMBER", "and", "NUMBER", "that", "seems", "to", "actually", "assert", "that", "get", "this", "error", "response", "be", "the", "expected", "behavior", "LINK", "microvm", "firecracker", "blob", "NUMBER", "e", "NUMBER", "cb", "NUMBER", "f", "NUMBER", "f", "NUMBER", "e", "NUMBER", "bdce", "NUMBER", "d", "NUMBER", "f", "NUMBER", "feb", "NUMBER", "a", "NUMBER", "f", "NUMBER", "vmm", "src", "lib", "NUMBER", "rs", "L", "NUMBER", "L", "NUMBER", "Was", "there", "any", "expected", "change", "in", "behavior", "relate", "to", "patching", "drives", "between", "NUMBER", "and", "NUMBER", "If", "on", "the", "other", "hand", "this", "be", "suspected", "to", "be", "a", "bug", "let", "me", "know", "if", "I", "can", "provide", "more", "information", "or", "try", "reproducing", "on", "different", "Firecracker", "commit", "to", "help", "track", "down", "the", "cause", "NUMBER", "dhrgit", "Thanks", "for", "the", "clarification", "that", "makes", "much", "more", "sense", "NUMBER", "Based", "on", "your", "explanation", "I", "tried", "add", "an", "artificial", "NUMBER", "second", "sleep", "before", "the", "drive", "PATCH", "call", "to", "see", "if", "it", "was", "just", "happening", "too", "early", "in", "the", "boot", "cycle", "it", "did", "indeed", "fix", "the", "issue", "and", "allow", "the", "PATCH", "to", "complete", "successfully", "NUMBER", "I", "m", "now", "suspecting", "this", "be", "actually", "indirectly", "relate", "to", "the", "vsock", "update", "NUMBER", "I", "believe", "what", "s", "happening", "be", "NUMBER", "We", "start", "the", "VM", "and", "then", "from", "the", "host", "try", "to", "connect", "to", "the", "Agent", "process", "we", "run", "inside", "the", "VM", "which", "listens", "on", "a", "vsock", "port", "NUMBER", "NUMBER", "The", "first", "connect", "attempt", "fail", "because", "the", "VM", "be", "still", "booting", "and", "the", "Agent", "be", "not", "yet", "run", "listening", "NUMBER", "This", "results", "as", "the", "firecracker", "vsock", "docs", "state", "in", "the", "socket", "get", "close", "after", "the", "host", "side", "writes", "CONNECT", "TAG", "NUMBER", "NUMBER", "However", "the", "code", "I", "write", "didn", "t", "check", "whether", "the", "socket", "was", "close", "it", "assumed", "after", "the", "successful", "write", "of", "CONNECT", "TAG", "that", "the", "socket", "was", "ready", "and", "pass", "it", "off", "to", "be", "use", "NUMBER", "This", "resulted", "in", "the", "connect", "succeeding", "much", "earlier", "than", "it", "should", "have", "and", "thus", "the", "PATCH", "drives", "to", "occur", "much", "earlier", "than", "it", "should", "have", "resulting", "in", "the", "error", "we", "saw", "NUMBER", "This", "be", "thus", "user", "error", "but", "I", "do", "have", "a", "follow", "up", "question", "NUMBER", "Do", "you", "have", "any", "recommendation", "on", "ways", "to", "check", "that", "the", "socket", "was", "not", "close", "after", "write", "CONNECT", "TAG", "Ways", "I", "can", "think", "of", "NUMBER", "Have", "the", "host", "side", "socket", "attempt", "to", "write", "something", "after", "CONNECT", "TAG", "i", "NUMBER", "e", "NUMBER", "write", "HELLO", "n", "which", "should", "only", "succeed", "if", "the", "socket", "be", "not", "close", "NUMBER", "Then", "have", "the", "VM", "guest", "side", "socket", "be", "sure", "to", "read", "that", "message", "before", "passing", "the", "socket", "off", "to", "be", "use", "by", "anything", "else", "so", "there", "aren", "t", "unexpect", "stray", "bytes", "sitting", "on", "the", "socket", "NUMBER", "NUMBER", "I", "tried", "doing", "a", "zero", "byte", "write", "to", "the", "socket", "from", "the", "host", "side", "but", "that", "appears", "to", "succeed", "even", "if", "the", "socket", "was", "not", "actually", "connected", "successfully", "I", "can", "t", "find", "any", "definitive", "docs", "on", "what", "the", "expected", "behavior", "be", "for", "zero", "byte", "writes", "to", "close", "sockets", "so", "maybe", "it", "s", "undefined", "I", "suspect", "NUMBER", "above", "works", "but", "it", "do", "seem", "to", "introduce", "a", "fair", "bit", "of", "extra", "complication", "and", "more", "error", "cases", "to", "handle", "so", "I", "want", "to", "make", "sure", "there", "s", "not", "an", "obviously", "better", "way", "of", "handle", "this", "that", "I", "m", "miss", "NUMBER", "dhrgit", "Makes", "sense", "will", "give", "that", "a", "try", "and", "open", "a", "separate", "issue", "if", "I", "run", "into", "anything", "else", "NUMBER", "Closing", "this", "one", "thanks", "for", "your", "help", "Hi", "I", "have", "a", "setup", "where", "I", "need", "to", "deploy", "multiple", "container", "on", "different", "VMs", "and", "I", "be", "use", "firecracker", "VMs", "to", "measure", "these", "workloads", "LINK", "epfl", "cloudsuite", "NUMBER", "I", "be", "trying", "to", "setup", "an", "overlay", "network", "the", "setup", "runs", "fine", "with", "normal", "host", "machines", "but", "I", "be", "not", "able", "to", "get", "it", "work", "on", "firecracker", "VMs", "when", "I", "do", "docker", "service", "create", "to", "launch", "a", "container", "on", "one", "of", "the", "microVMs", "it", "fail", "with", "NUMBER", "NUMBER", "network", "sandbox", "join", "fail", "subnet", "sandbox", "join", "fail", "for", "NUMBER", "NUMBER", "NUMBER", "I", "have", "checked", "firecracker", "networking", "and", "its", "able", "to", "ping", "properly", "NUMBER", "I", "be", "not", "sure", "if", "this", "be", "relate", "to", "firecrakcer", "specifically", "or", "docker", "NUMBER", "Docker", "creates", "a", "new", "network", "interface", "and", "I", "be", "not", "sure", "if", "firecracker", "will", "automatically", "connect", "to", "this", "interface", "through", "docker", "CLI", "or", "whether", "I", "can", "even", "attach", "two", "network", "interfaces", "to", "the", "microVM", "NUMBER", "If", "someone", "has", "run", "into", "this", "issue", "or", "give", "me", "some", "direction", "on", "how", "to", "debug", "this", "please", "let", "me", "know", "NUMBER", "I", "would", "really", "appreciate", "any", "help", "NUMBER", "Thanks", "Anjali", "My", "partner", "and", "I", "will", "be", "work", "on", "this", "issue", "Hi", "dhrgit", "Hope", "all", "be", "well", "NUMBER", "Just", "checking", "did", "you", "get", "our", "email", "ask", "for", "more", "direction", "on", "this", "issue", "iabestever", "The", "next", "step", "here", "was", "to", "test", "the", "performance", "impact", "of", "IRQ", "sharing", "in", "order", "to", "determine", "if", "a", "round", "robin", "assignment", "was", "good", "enough", "NUMBER", "IRQ", "sharing", "may", "cause", "extra", "VM", "exists", "upon", "interrupt", "delivery", "since", "multiple", "drivers", "may", "end", "up", "querying", "their", "respective", "devices", "for", "their", "interrupt", "status", "NUMBER", "These", "queries", "be", "do", "via", "MMIO", "reads", "and", "every", "read", "incurs", "a", "VM", "exit", "NUMBER", "For", "instance", "if", "multiple", "high", "throughput", "virtio", "net", "devices", "would", "share", "an", "interrupt", "every", "IRQ", "delivery", "would", "incur", "some", "extra", "VM", "exists", "which", "might", "have", "some", "impact", "on", "performance", "i", "NUMBER", "e", "NUMBER", "throughput", "frames", "per", "second", "NUMBER", "No", "idea", "on", "the", "magnitude", "of", "that", "impact", "though", "so", "this", "scenario", "should", "be", "test", "NUMBER", "So", "as", "a", "first", "step", "a", "straight", "forward", "approach", "would", "be", "to", "iperf", "a", "few", "virtio", "net", "devices", "under", "two", "different", "scenarios", "NUMBER", "each", "device", "gets", "its", "own", "IRQ", "and", "NUMBER", "all", "devices", "share", "an", "IRQ", "and", "see", "when", "if", "throughput", "decays", "NUMBER", "Thank", "you", "dhrgit", "we", "ll", "get", "right", "on", "it", "deviceOnIrq", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "d", "NUMBER", "e", "NUMBER", "NUMBER", "d", "NUMBER", "ea", "NUMBER", "f", "NUMBER", "da", "NUMBER", "db", "NUMBER", "d", "NUMBER", "e", "NUMBER", "a", "NUMBER", "png", "dhrgit", "so", "we", "run", "iperf", "NUMBER", "test", "to", "see", "the", "throughput", "of", "virtio", "net", "devices", "NUMBER", "As", "we", "increase", "the", "number", "of", "virtio", "net", "devices", "we", "ensured", "they", "were", "all", "assigned", "to", "the", "same", "IRQ", "NUMBER", "As", "you", "can", "see", "as", "the", "numbers", "of", "devices", "on", "an", "IRQ", "increases", "the", "throughput", "gradually", "decreases", "NUMBER", "We", "did", "this", "be", "make", "x", "TAP", "interfaces", "and", "then", "attaching", "them", "to", "a", "microVM", "as", "describe", "in", "NUMBER", "In", "addition", "we", "test", "only", "one", "device", "of", "all", "the", "devices", "on", "one", "IRQ", "receiving", "network", "packets", "and", "then", "we", "took", "the", "average", "to", "get", "the", "data", "points", "seen", "in", "the", "graph", "NUMBER", "To", "combat", "this", "decrease", "in", "throughput", "should", "we", "devise", "an", "irq", "affinity", "scheme", "that", "ensures", "network", "interfaces", "actively", "avoid", "sharing", "IRQs", "with", "other", "network", "interfaces", "Or", "alternatively", "be", "there", "a", "way", "to", "see", "which", "interfaces", "be", "high", "load", "and", "which", "interfaces", "be", "low", "load", "over", "the", "lifecycle", "of", "a", "microVM", "and", "then", "should", "we", "reassign", "IRQs", "based", "on", "that", "information", "If", "I", "m", "reading", "this", "correctly", "your", "test", "show", "the", "throughput", "maxing", "out", "at", "about", "NUMBER", "Gbps", "NUMBER", "This", "sounds", "a", "bit", "low", "NUMBER", "Can", "you", "please", "post", "the", "full", "test", "setup", "i", "NUMBER", "e", "NUMBER", "vm", "configs", "hardware", "use", "kernel", "version", "etc", "Also", "it", "looks", "like", "there", "s", "a", "higher", "throughput", "for", "two", "devices", "vs", "one", "NUMBER", "That", "sounds", "a", "bit", "counter", "intuitive", "NUMBER", "Can", "you", "please", "post", "your", "data", "samples", "Thanks", "hardware", "NUMBER", "txt", "LINK", "microvm", "firecracker", "file", "NUMBER", "hardware", "NUMBER", "txt", "This", "file", "be", "my", "hardware", "information", "NUMBER", "runscript", "NUMBER", "txt", "LINK", "microvm", "firecracker", "file", "NUMBER", "runscript", "NUMBER", "txt", "This", "file", "has", "the", "API", "commands", "we", "use", "to", "attach", "the", "virtio", "network", "devices", "to", "the", "microVM", "NUMBER", "Here", "be", "the", "kernel", "I", "be", "use", "Linux", "iabestever", "Inspiron", "N", "NUMBER", "NUMBER", "NUMBER", "generic", "NUMBER", "NUMBER", "Ubuntu", "SMP", "Tue", "Nov", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "NUMBER", "x", "NUMBER", "_", "NUMBER", "x", "NUMBER", "_", "NUMBER", "x", "NUMBER", "_", "NUMBER", "GNU", "Linux", "Here", "be", "the", "qemu", "version", "I", "have", "QEMU", "emulator", "version", "NUMBER", "Debian", "NUMBER", "NUMBER", "dfsg", "NUMBER", "ubuntu", "NUMBER", "I", "think", "the", "higher", "throughput", "for", "two", "devices", "vs", "one", "may", "have", "be", "an", "outlier", "an", "expression", "of", "the", "limitation", "of", "my", "hardware", "NUMBER", "I", "also", "only", "run", "once", "for", "one", "device", "so", "maybe", "more", "samples", "for", "one", "and", "two", "devices", "may", "yield", "better", "more", "intuitive", "results", "NUMBER", "Here", "be", "the", "data", "sample", "list", "for", "your", "reference", "data", "NUMBER", "xlsx", "LINK", "microvm", "firecracker", "file", "NUMBER", "data", "NUMBER", "xlsx", "Thanks", "for", "the", "detailed", "information", "Quick", "question", "thought", "for", "what", "be", "you", "use", "qemu", "in", "these", "test", "Also", "with", "Firecracker", "please", "keep", "in", "mind", "that", "all", "emulation", "runs", "on", "a", "single", "thread", "NUMBER", "So", "even", "without", "IRQ", "sharing", "throughput", "be", "likely", "to", "drop", "with", "the", "number", "of", "net", "devices", "be", "emulated", "NUMBER", "What", "we", "re", "looking", "for", "be", "the", "difference", "in", "throughput", "drop", "for", "the", "two", "difference", "scenarios", "sharing", "vs", "dedicated", "IRQs", "NUMBER", "In", "the", "experiments", "I", "performed", "only", "one", "device", "was", "be", "emulated", "at", "any", "given", "time", "NUMBER", "So", "I", "would", "attach", "x", "amount", "of", "network", "interfaces", "to", "a", "microVM", "and", "then", "inside", "the", "microVM", "I", "would", "set", "each", "of", "them", "to", "be", "listening", "on", "a", "unique", "IP", "address", "NUMBER", "However", "from", "outside", "the", "microVM", "when", "doing", "the", "test", "at", "any", "given", "time", "only", "network", "packets", "were", "be", "sent", "to", "only", "one", "IP", "address", "NUMBER", "I", "believe", "that", "should", "only", "be", "test", "having", "network", "devices", "on", "a", "dedicated", "IRQ", "and", "the", "throughout", "decrease", "due", "to", "the", "increase", "VM", "exits", "as", "devices", "increase", "NUMBER", "Please", "correct", "me", "if", "I", "be", "wrong", "NUMBER", "So", "the", "first", "IRQ", "be", "taken", "up", "by", "the", "root", "block", "device", "IRQ", "NUMBER", "in", "Intel", "NUMBER", "Then", "I", "devised", "a", "test", "such", "that", "there", "was", "one", "network", "device", "to", "one", "IRQ", "NUMBER", "Since", "there", "be", "NUMBER", "IRQs", "available", "I", "run", "this", "experiment", "NUMBER", "times", "NUMBER", "In", "essence", "I", "did", "throughput", "test", "with", "one", "network", "device", "to", "one", "IRQ", "NUMBER", "Then", "I", "did", "another", "test", "where", "I", "had", "two", "network", "devices", "each", "with", "their", "own", "dedicated", "IRQ", "NUMBER", "I", "test", "the", "throughput", "of", "both", "devices", "individually", "i", "NUMBER", "e", "NUMBER", "the", "throughput", "of", "network", "device", "one", "indpendently", "of", "the", "throughput", "of", "network", "device", "two", "NUMBER", "Then", "I", "did", "repeated", "this", "test", "with", "three", "network", "devices", "each", "with", "their", "own", "dedicated", "IRQs", "NUMBER", "I", "repeated", "this", "for", "NUMBER", "network", "devices", "as", "we", "only", "have", "NUMBER", "IRQs", "NUMBER", "At", "each", "point", "I", "find", "the", "throughput", "to", "remain", "practically", "constant", "only", "minor", "variations", "NUMBER", "And", "this", "number", "be", "NUMBER", "Gbps", "NUMBER", "So", "with", "NUMBER", "network", "interfaces", "with", "dedicated", "IRQs", "the", "throughput", "for", "each", "interface", "be", "NUMBER", "Gbps", "NUMBER", "However", "if", "NUMBER", "network", "interfaces", "all", "shared", "one", "IRQ", "then", "the", "throughput", "for", "each", "interface", "be", "NUMBER", "Gbps", "NUMBER", "I", "hope", "this", "helps", "NUMBER", "Please", "let", "me", "know", "if", "my", "understanding", "be", "unclear", "NUMBER", "It", "makes", "sense", "for", "the", "throughput", "to", "drop", "even", "if", "only", "one", "device", "be", "under", "load", "since", "every", "interrupt", "will", "incur", "a", "VM", "exit", "for", "each", "attached", "device", "regardless", "of", "the", "device", "be", "idle", "or", "not", "NUMBER", "Hence", "the", "drop", "from", "NUMBER", "Gbps", "to", "NUMBER", "Gbps", "you", "observed", "NUMBER", "While", "the", "above", "be", "a", "very", "interesting", "result", "it", "would", "also", "be", "helpful", "to", "have", "the", "devices", "loaded", "concurrently", "and", "see", "the", "difference", "in", "the", "compound", "throughput", "though", "NUMBER", "I", "NUMBER", "e", "NUMBER", "compare", "these", "two", "scenarios", "NUMBER", "N", "devices", "sharing", "an", "IRQ", "be", "loaded", "with", "traffic", "at", "the", "same", "time", "and", "NUMBER", "N", "devices", "each", "with", "their", "own", "dedicated", "IRQ", "be", "loaded", "with", "traffic", "at", "the", "same", "time", "NUMBER", "Also", "since", "there", "appears", "to", "be", "a", "considerable", "throughput", "drop", "it", "would", "be", "interesting", "to", "know", "if", "the", "overall", "performance", "be", "more", "impacted", "by", "pairing", "similar", "or", "different", "devices", "on", "a", "single", "IRQ", "NUMBER", "I", "NUMBER", "e", "NUMBER", "if", "multiple", "net", "devices", "share", "an", "IRQ", "there", "s", "a", "throughput", "drop", "but", "if", "a", "net", "and", "a", "block", "device", "share", "an", "IRQ", "how", "would", "that", "impact", "their", "compound", "performance", "throughput", "for", "net", "IOPS", "throughput", "for", "block", "NUMBER", "To", "sum", "it", "up", "we", "have", "three", "types", "of", "virtio", "deivces", "block", "net", "and", "vsock", "NUMBER", "If", "two", "devices", "need", "to", "share", "an", "IRQ", "we", "be", "interested", "in", "seeing", "which", "pairing", "options", "e", "NUMBER", "g", "NUMBER", "net", "block", "on", "one", "IRQ", "or", "block", "vsock", "on", "one", "IRQ", "etc", "have", "the", "least", "impact", "on", "the", "overall", "performance", "when", "the", "devices", "that", "be", "sharing", "an", "IRQ", "be", "driven", "to", "high", "load", "NUMBER", "Sounds", "good", "NUMBER", "I", "will", "have", "performance", "results", "for", "the", "different", "device", "type", "matchups", "to", "you", "by", "Friday", "NUMBER", "LINK", "to", "create", "virtual", "block", "device", "loop", "device", "filesystem", "in", "linux", "Does", "this", "website", "accurately", "define", "how", "to", "create", "a", "virtual", "block", "device", "I", "was", "following", "these", "steps", "and", "just", "want", "to", "confirm", "if", "this", "be", "indeed", "the", "correct", "way", "NUMBER", "Also", "I", "realise", "Firecracker", "only", "has", "the", "option", "to", "attach", "devices", "before", "boot", "NUMBER", "May", "I", "ask", "why", "be", "that", "Additionally", "will", "it", "be", "possible", "to", "reassign", "IRQs", "based", "on", "measuring", "load", "Say", "further", "down", "the", "line", "we", "have", "arrived", "at", "the", "conclusion", "that", "pairing", "a", "network", "device", "and", "a", "vsock", "on", "one", "IRQ", "yields", "the", "least", "amount", "of", "of", "overall", "impact", "on", "performance", "NUMBER", "However", "during", "runtime", "we", "see", "that", "we", "have", "paired", "a", "high", "load", "network", "device", "and", "a", "high", "load", "vsock", "NUMBER", "Say", "another", "IRQ", "has", "a", "low", "load", "vsock", "and", "a", "low", "load", "network", "device", "NUMBER", "In", "that", "scenario", "can", "we", "during", "runtime", "reassign", "IRQs", "such", "that", "a", "high", "load", "network", "device", "be", "paired", "with", "a", "low", "load", "vsock", "Firecracker", "doesn", "t", "currently", "support", "any", "hotplug", "mechanism", "e", "NUMBER", "g", "NUMBER", "PCI", "NUMBER", "All", "device", "configuration", "including", "the", "assigned", "IRQ", "be", "pass", "to", "the", "kernel", "at", "boot", "time", "only", "via", "the", "kernel", "command", "line", "NUMBER", "This", "be", "why", "it", "isn", "t", "possible", "to", "reassign", "IRQs", "nor", "attach", "new", "devices", "at", "runtime", "NUMBER", "Reason", "for", "This", "PR", "NUMBER", "Description", "of", "Changes", "When", "we", "insert", "virtio", "mmio", "devices", "into", "fdt", "we", "should", "add", "it", "in", "order", "from", "low", "to", "high", "NUMBER", "For", "now", "they", "were", "iterated", "and", "inserted", "in", "agnostic", "order", "NUMBER", "To", "avoid", "that", "we", "re", "store", "them", "in", "Vec", "for", "sorting", "out", "lately", "in", "right", "order", "NUMBER", "Signed", "off", "by", "Penny", "Zheng", "TAG", "Signed", "off", "by", "Haibo", "Xu", "TAG", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "dianpopa", "thanks", "for", "the", "detailed", "comments", "NUMBER", "NUMBER", "you", "re", "right", "if", "we", "use", "Vec", "instead", "the", "insertion", "order", "will", "be", "what", "we", "need", "from", "low", "to", "high", "and", "the", "sorting", "part", "will", "be", "in", "no", "need", "NUMBER", "I", "will", "update", "asap", "Hi", "dianpopa", "I", "have", "already", "update", "NUMBER", "Feel", "free", "to", "take", "a", "look", "thanks", "Hi", "dianpopa", "Sorry", "for", "all", "clippy", "error", "actually", "unfamiliar", "with", "the", "grammar", "will", "be", "more", "careful", "NUMBER", "NUMBER", "And", "already", "re", "based", "and", "update", "ptal", "NUMBER", "I", "m", "not", "sure", "about", "this", "change", "NUMBER", "I", "understand", "how", "it", "simplifies", "things", "when", "build", "the", "FDT", "but", "personally", "I", "don", "t", "like", "the", "idea", "of", "use", "a", "Vec", "instead", "of", "a", "HashMap", "here", "and", "implement", "get_device", "and", "remove_device_info", "by", "iterating", "over", "the", "entire", "collection", "NUMBER", "I", "don", "t", "have", "a", "better", "idea", "right", "now", "but", "I", "would", "look", "for", "alternatives", "before", "merge", "this", "NUMBER", "I", "m", "curiousif", "there", "be", "any", "other", "opinions", "here", "NUMBER", "firecracker", "microvm", "compute", "capsule", "The", "number", "of", "devices", "a", "VM", "can", "have", "be", "already", "limited", "by", "the", "number", "of", "IRQs", "you", "have", "at", "your", "disposal", "which", "actually", "deems", "the", "use", "of", "a", "hashmap", "useless", "NUMBER", "Iterating", "over", "a", "NUMBER", "entries", "NUMBER", "NUMBER", "in", "the", "case", "of", "aarch", "NUMBER", "stored", "in", "a", "Vec", "be", "insignificant", "as", "far", "as", "performance", "NUMBER", "Another", "observation", "be", "that", "remove_device_info", "be", "use", "only", "in", "test", "NUMBER", "The", "only", "operation", "in", "dev", "code", "be", "get_device", "NUMBER", "I", "m", "also", "worried", "about", "readability", "and", "ease", "of", "use", "NUMBER", "Since", "each", "device", "has", "a", "key", "and", "some", "data", "the", "natural", "option", "here", "seems", "to", "hold", "them", "in", "a", "hashmap", "NUMBER", "If", "performance", "be", "not", "a", "problem", "then", "you", "can", "build", "a", "Vec", "starting", "from", "the", "initial", "hashmap", "and", "sort", "it", "NUMBER", "Hi", "guys", "dianpopa", "serban", "NUMBER", "acatangiu", "So", "sorry", "for", "the", "delayed", "response", "NUMBER", "Just", "get", "back", "from", "holiday", "NUMBER", "NUMBER", "I", "will", "update", "the", "commit", "as", "you", "all", "suggest", "asap", "and", "immediately", "inform", "you", "guys", "when", "it", "s", "do", "NUMBER", "thanks", "NUMBER", "Hi", "Combined", "with", "suggestion", "from", "serban", "NUMBER", "and", "acatangiu", "maybe", "we", "should", "choose", "the", "Option", "NUMBER", "when", "build", "the", "FDT", "copy", "the", "elements", "in", "the", "HashMap", "in", "a", "temp", "Vec", "then", "sort", "then", "insert", "in", "FDT", "NUMBER", "Code", "be", "update", "NUMBER", "Plz", "feel", "free", "to", "review", "NUMBER", "NUMBER", "Hi", "acatangiu", "Sorry", "for", "the", "delayed", "response", "get", "side", "tracked", "for", "a", "while", "NUMBER", "You", "re", "right", "should", "take", "reference", "not", "copy", "I", "ve", "change", "all", "three", "function", "create_virtio_node", "create_serial_node", "and", "create_rtc_node", "NUMBER", "it", "s", "not", "too", "much", "work", "since", "it", "s", "all", "defined", "and", "call", "in", "this", "only", "file", "NUMBER", "Feel", "free", "to", "review", "NUMBER", "Hi", "guys", "I", "and", "my", "colleague", "xiaobo", "NUMBER", "x", "be", "work", "on", "enabling", "firecracker", "with", "Kata", "Containers", "NUMBER", "For", "now", "the", "launching", "error", "be", "as", "follows", "time", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "level", "error", "msg", "rpc", "error", "code", "Internal", "desc", "Could", "not", "mount", "dev", "vdb", "to", "run", "kata", "container", "shared", "container", "NUMBER", "bd", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "b", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "f", "NUMBER", "eb", "NUMBER", "a", "NUMBER", "a", "NUMBER", "de", "NUMBER", "f", "NUMBER", "input", "output", "error", "arch", "arm", "NUMBER", "command", "create", "container", "NUMBER", "bd", "NUMBER", "d", "NUMBER", "e", "NUMBER", "b", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "ee", "NUMBER", "f", "NUMBER", "f", "NUMBER", "eb", "NUMBER", "a", "NUMBER", "a", "NUMBER", "de", "NUMBER", "f", "NUMBER", "name", "kata", "runtime", "pid", "NUMBER", "source", "runtime", "It", "be", "because", "that", "Before", "launching", "the", "VM", "kata", "will", "create", "NUMBER", "block", "devices", "as", "Device", "Pool", "NUMBER", "It", "creates", "a", "empty", "temporary", "file", "as", "a", "placeholder", "backend", "for", "the", "drive", "at", "the", "beginning", "and", "use", "the", "patch", "command", "to", "modify", "the", "host", "backend", "at", "runtime", "NUMBER", "This", "be", "how", "they", "convey", "the", "container", "rootfs", "NUMBER", "On", "aarch", "NUMBER", "we", "use", "HashMap", "to", "store", "all", "NUMBER", "virtio", "mmio", "device", "nodes", "NUMBER", "But", "when", "we", "iterate", "whole", "HashMap", "to", "insert", "device", "nodes", "into", "fdt", "it", "can", "t", "be", "guaranteed", "that", "the", "sequence", "in", "fdt", "be", "the", "same", "order", "in", "which", "we", "inserted", "the", "nodes", "into", "the", "HashMap", "NUMBER", "That", "s", "because", "that", "HashMap", "be", "iterated", "in", "an", "agnostic", "way", "NUMBER", "You", "could", "see", "that", "all", "device", "nodes", "be", "in", "random", "order", "NUMBER", "root", "penny", "ls", "sys", "bus", "platform", "devices", "NUMBER", "virtio_mmio", "driver", "driver_override", "modalias", "of_node", "power", "subsystem", "uevent", "virtio", "NUMBER", "root", "penny", "ls", "sys", "bus", "platform", "devices", "NUMBER", "virtio_mmio", "driver", "driver_override", "modalias", "of_node", "power", "subsystem", "uevent", "virtio", "NUMBER", "root", "penny", "ls", "sys", "bus", "platform", "devices", "NUMBER", "virtio_mmio", "driver", "driver_override", "modalias", "of_node", "power", "subsystem", "uevent", "virtio", "NUMBER", "root", "penny", "ls", "sys", "bus", "platform", "devices", "NUMBER", "virtio_mmio", "driver", "driver_override", "modalias", "of_node", "power", "subsystem", "uevent", "virtio", "NUMBER", "The", "fix", "PR", "be", "on", "the", "way", "NUMBER", "LGTM", "Reason", "for", "This", "PR", "Remove", "Duplicated", "Device", "Feature", "detection", "function", "NUMBER", "Description", "of", "Changes", "Methods", "features", "and", "ack_features", "implement", "in", "every", "virtio", "device", "that", "provide", "an", "implementation", "for", "VirtioDevice", "trait", "e", "NUMBER", "g", "block", "net", "vsock", "contain", "identical", "body", "which", "be", "not", "device", "specific", "NUMBER", "This", "PR", "remove", "code", "duplication", "and", "move", "the", "aforementioned", "methods", "in", "the", "VirtioDevice", "trait", "with", "an", "implementation", "for", "each", "method", "which", "will", "be", "common", "to", "every", "virtio", "device", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Also", "your", "PR", "checklist", "has", "nothing", "ticked", "on", "it", "Squashed", "into", "a", "single", "commit", "NUMBER", "Ticked", "the", "items", "of", "the", "checklist", "NUMBER", "Also", "add", "some", "documentation", "comments", "for", "the", "newly", "introduce", "methods", "from", "VirtioDevice", "trait", "NUMBER", "Please", "also", "update", "the", "commit", "message", "to", "capture", "all", "the", "change", "right", "now", "the", "information", "from", "the", "squashed", "commit", "message", "be", "lost", "NUMBER", "Description", "of", "problem", "firecracker", "terminates", "the", "host", "connection", "before", "starting", "the", "init", "process", "systemd", "or", "kata", "agent", "in", "the", "guest", "OS", "NUMBER", "This", "issue", "happens", "when", "the", "CONNECT", "TAG", "command", "be", "sent", "immediately", "after", "InstanceStart", "NUMBER", "To", "mitigate", "this", "issue", "in", "kata", "container", "the", "runtime", "host", "try", "to", "connect", "with", "the", "agent", "guest", "several", "times", "until", "the", "connection", "succeed", "we", "see", "this", "approach", "more", "like", "a", "workaround", "than", "a", "real", "solution", "since", "we", "consider", "this", "be", "prone", "to", "failures", "in", "slow", "systems", "where", "the", "number", "of", "try", "can", "be", "bigger", "NUMBER", "Proposal", "NUMBER", "Firecracker", "should", "never", "terminate", "the", "host", "connection", "like", "virtio", "vsocks", "implementation", "NUMBER", "Proposal", "NUMBER", "Add", "a", "timeout", "parameter", "in", "the", "json", "request", "that", "creates", "the", "vsock", "vsock_id", "root", "guest_cid", "NUMBER", "uds_path", "vsock", "timeout", "NUMBER", "where", "timeout", "be", "in", "seconds", "cc", "sboeuf", "sandreim", "dhrgit", "stefanha", "dhrgit", "thanks", "for", "answering", "NUMBER", "terminating", "the", "host", "connection", "be", "the", "correct", "behavior", "since", "the", "host", "be", "trying", "to", "connect", "to", "something", "that", "isn", "t", "there", "NUMBER", "ok", "that", "make", "sense", "can", "the", "timeout", "be", "configurable", "On", "Thu", "Sep", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "PM", "Dan", "Horobeanu", "TAG", "write", "I", "m", "not", "sure", "I", "understand", "what", "timeout", "that", "would", "be", "NUMBER", "In", "the", "use", "case", "I", "mention", "there", "be", "no", "timeout", "involved", "the", "host", "connection", "be", "immediately", "refused", "by", "the", "guest", "since", "there", "be", "no", "listeners", "present", "NUMBER", "Also", "I", "don", "t", "really", "understand", "how", "this", "would", "work", "with", "vhost", "either", "NUMBER", "When", "use", "vhost", "were", "you", "issue", "an", "AF_VSOCK", "connect", "call", "right", "after", "InstanceStart", "I", "don", "t", "see", "how", "that", "could", "ve", "worked", "reliably", "NUMBER", "Unless", "some", "AF_VSOCK", "socket", "be", "bound", "and", "listened", "to", "on", "the", "guest", "any", "incoming", "connection", "would", "get", "immediately", "refused", "NUMBER", "Is", "there", "something", "I", "m", "miss", "I", "think", "so", "too", "NUMBER", "If", "a", "client", "try", "to", "connect", "to", "a", "server", "that", "may", "not", "yet", "be", "run", "it", "must", "handle", "the", "fail", "connection", "and", "try", "again", "NUMBER", "If", "there", "be", "a", "message", "bus", "or", "service", "registry", "then", "maybe", "the", "client", "can", "get", "notified", "when", "the", "server", "comes", "online", "NUMBER", "Otherwise", "the", "client", "needs", "to", "sleep", "and", "retry", "it", "s", "ugly", "but", "you", "do", "the", "same", "thing", "with", "TCP", "IP", "services", "too", "NUMBER", "dhrgit", "stefanha", "Your", "explanation", "seems", "logical", "but", "I", "be", "still", "not", "clear", "about", "why", "this", "fix", "was", "not", "needed", "for", "Kata", "till", "now", "NUMBER", "From", "what", "I", "understand", "when", "the", "vhost", "vsock", "backend", "be", "use", "this", "means", "the", "host", "kernel", "receives", "the", "connection", "from", "the", "application", "NUMBER", "And", "I", "think", "in", "this", "case", "no", "matter", "if", "someone", "be", "listening", "inside", "the", "guest", "the", "connection", "succeed", "NUMBER", "My", "guess", "be", "it", "do", "succeed", "since", "the", "VMM", "initialized", "the", "vhost", "vsock", "backend", "with", "a", "specific", "CID", "PORT", "NUMBER", "When", "the", "kernel", "receives", "the", "connection", "it", "simply", "accept", "it", "since", "it", "knows", "the", "incoming", "CID", "PORT", "NUMBER", "Later", "when", "the", "guest", "application", "start", "listening", "onto", "this", "AF_VSOCK", "socket", "the", "communication", "can", "really", "happen", "NUMBER", "If", "and", "only", "if", "my", "theory", "be", "correct", "this", "means", "the", "hybrid", "version", "from", "Firecracker", "behaves", "differently", "NUMBER", "And", "if", "that", "s", "the", "case", "we", "need", "to", "discuss", "if", "we", "want", "to", "handle", "buffering", "from", "a", "VMM", "perspective", "until", "the", "guest", "application", "starts", "listening", "NUMBER", "I", "think", "I", "find", "the", "main", "issue", "NUMBER", "I", "did", "the", "next", "experiment", "in", "both", "QEMU", "and", "Firecracker", "NUMBER", "Add", "boot_delay", "NUMBER", "in", "the", "guest", "kernel", "command", "line", "NUMBER", "Connect", "to", "the", "unix", "vsock", "address", "from", "the", "host", "Use", "net", "NUMBER", "Dial", "LINK", "Dial", "to", "connect", "to", "the", "unix", "address", "Firecracker", "Use", "vsock", "NUMBER", "Dial", "LINK", "to", "connect", "to", "the", "vsock", "address", "QEMU", "In", "the", "QEMU", "case", "vsock", "NUMBER", "Dial", "returns", "the", "same", "error", "dial", "vsock", "vm", "NUMBER", "NUMBER", "connection", "reset", "by", "peer", "until", "the", "kernel", "continues", "with", "its", "execution", "and", "creates", "the", "vsock", "connection", "in", "the", "guest", "NUMBER", "But", "in", "the", "Firecracker", "case", "net", "NUMBER", "Dial", "returns", "no", "error", "even", "if", "the", "kernel", "has", "not", "start", "or", "it", "has", "fail", "so", "when", "the", "runtime", "try", "to", "send", "a", "request", "it", "fail", "because", "of", "it", "expects", "the", "connection", "be", "ready", "once", "net", "NUMBER", "Dial", "returns", "like", "the", "QEMU", "vsocks", "case", "NUMBER", "so", "I", "guess", "the", "runtime", "has", "to", "sleep", "and", "retry", "until", "the", "agent", "reads", "the", "message", "NUMBER", "worried", "dhrgit", "after", "doing", "some", "test", "I", "find", "something", "interesting", "If", "the", "unix", "socket", "be", "read", "after", "having", "write", "CONNECT", "TAG", "EOF", "error", "be", "returned", "if", "the", "vsock", "be", "not", "ready", "but", "when", "the", "vsock", "be", "ready", "in", "the", "guest", "and", "the", "socket", "be", "read", "again", "no", "error", "be", "returned", "and", "the", "buffer", "use", "to", "read", "the", "message", "contains", "NUMBER", "x", "NUMBER", "EOT", "end", "of", "transmission", "NUMBER", "be", "this", "an", "expected", "behaviour", "If", "so", "I", "guess", "we", "can", "use", "it", "to", "know", "when", "the", "agent", "be", "ready", "NUMBER", "What", "be", "the", "answer", "of", "Firecracker", "when", "the", "CONNECT", "TAG", "command", "be", "sent", "dhrgit", "thanks", "for", "explaining", "NUMBER", "Closing", "issue", "since", "we", "find", "a", "solution", "that", "may", "work", "for", "kata", "thanks", "again", "NUMBER", "NUMBER", "Kata", "container", "and", "Qemu", "run", "on", "the", "same", "cluster", "without", "problem", "but", "not", "firecracker", "NUMBER", "Versions", "Ubuntu", "server", "NUMBER", "LTS", "kernel", "NUMBER", "NUMBER", "generic", "kubernetes", "NUMBER", "firecracker", "NUMBER", "cri", "containerd", "NUMBER", "kata", "runtime", "NUMBER", "alpha", "NUMBER", "commit", "TAG", "OCI", "specs", "NUMBER", "dev", "The", "config", "file", "cat", "etc", "kata", "container", "configuration", "NUMBER", "toml", "hypervisor", "NUMBER", "firecracker", "path", "usr", "bin", "firecracker", "kernel", "usr", "share", "kata", "container", "vmlinuz", "NUMBER", "container", "image", "usr", "share", "kata", "container", "kata", "container", "NUMBER", "img", "block_device_driver", "virtio", "mmio", "enable_debug", "true", "use_vsock", "true", "kernel_params", "firmware", "default_vcpus", "NUMBER", "default_maxvcpus", "NUMBER", "default_bridges", "NUMBER", "default_memory", "NUMBER", "disable_block_device_use", "false", "factory", "proxy", "NUMBER", "kata", "path", "usr", "libexec", "kata", "container", "kata", "proxy", "shim", "NUMBER", "kata", "path", "usr", "libexec", "kata", "container", "kata", "shim", "agent", "NUMBER", "kata", "netmon", "path", "usr", "libexec", "kata", "container", "kata", "netmon", "runtime", "internetworking_model", "tcfilter", "disable_guest_seccomp", "true", "The", "firecracker", "pod", "has", "be", "stuck", "at", "the", "ContainerCreating", "status", "NUMBER", "It", "returns", "the", "following", "error", "Failed", "create", "pod", "sandbox", "rpc", "error", "code", "Unknown", "desc", "fail", "to", "create", "containerd", "task", "PUT", "vsocks", "id", "NUMBER", "putGuestVsockByIdBadRequest", "FaultMessage", "unknown", "field", "id", "expected", "one", "of", "vsock_id", "guest_cid", "uds_path", "at", "line", "NUMBER", "column", "NUMBER", "unknown", "Are", "you", "use", "the", "latest", "Firecracker", "version", "We", "change", "the", "vsock", "implementation", "and", "there", "be", "some", "change", "required", "on", "Kata", "side", "as", "well", "NUMBER", "Thank", "you", "for", "the", "quick", "response", "NUMBER", "That", "s", "right", "I", "was", "use", "the", "latest", "version", "NUMBER", "I", "downgraded", "to", "firecracker", "NUMBER", "and", "I", "overcame", "this", "error", "but", "now", "I", "get", "a", "new", "one", "NUMBER", "The", "new", "error", "Failed", "create", "pod", "sandbox", "rpc", "error", "code", "Unknown", "desc", "fail", "to", "create", "containerd", "task", "PUT", "vsocks", "id", "NUMBER", "putGuestVsockByIdBadRequest", "FaultMessage", "Invalid", "request", "method", "and", "or", "path", "PUT", "vsocks", "root", "unknown", "Kernel", "modules", "alias", "char_major_", "NUMBER", "_", "NUMBER", "vhost_net", "alias", "char_major_", "NUMBER", "_", "NUMBER", "vhost_vsock", "alias", "devname", "vhost_net", "vhost_net", "alias", "devname", "vhost_vsock", "vhost_vsock", "alias", "tcm_vhost", "vhost_scsi", "alias", "symbol", "vhost_add_used", "vhost", "alias", "symbol", "vhost_add_used_and_signal", "vhost", "alias", "symbol", "vhost_add_used_and_signal_n", "vhost", "alias", "symbol", "vhost_add_used_n", "vhost", "NUMBER", "And", "QEMU", "Checking", "for", "hardware", "virtualization", "PASS", "QEMU", "Checking", "if", "device", "dev", "kvm", "exists", "PASS", "QEMU", "Checking", "if", "device", "dev", "kvm", "be", "accessible", "PASS", "QEMU", "Checking", "if", "device", "dev", "vhost", "net", "exists", "PASS", "QEMU", "Checking", "if", "device", "dev", "net", "tun", "exists", "PASS", "NUMBER", "Thank", "you", "Building", "firecracker", "with", "feature", "vsock", "fix", "the", "error", "NUMBER", "Reason", "for", "This", "PR", "The", "NUMBER", "Roadmap", "LINK", "microvm", "firecracker", "issue", "NUMBER", "welcomes", "contributions", "that", "add", "initrd", "support", "NUMBER", "A", "previous", "PR", "was", "opened", "to", "add", "it", "NUMBER", "but", "cannot", "be", "reused", "as", "be", "because", "it", "also", "add", "support", "for", "loading", "a", "compressed", "kernel", "NUMBER", "Hence", "NUMBER", "was", "reworked", "and", "rebased", "to", "only", "include", "initrd", "support", "NUMBER", "Fixes", "NUMBER", "NUMBER", "Description", "of", "Changes", "Add", "initrd_path", "property", "to", "the", "boot", "source", "API", "NUMBER", "Pass", "ramdisk_image", "memory", "offset", "and", "ramdisk_size", "to", "the", "guest", "bootparams", "table", "NUMBER", "Implement", "the", "load_initrd", "loader", "function", "to", "load", "the", "initrd", "file", "content", "into", "the", "guest", "memory", "at", "a", "for", "the", "moment", "fix", "address", "at", "then", "end", "of", "the", "available", "low", "memory", "for", "x", "NUMBER", "_", "NUMBER", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Disclaimer", "I", "be", "complete", "rust", "n", "NUMBER", "b", "Missing", "things", "x", "aarch", "NUMBER", "support", "x", "test", "NUMBER", "had", "dedicated", "commit", "for", "test", "that", "can", "be", "ported", "too", "NUMBER", "For", "x", "NUMBER", "_", "NUMBER", "I", "be", "now", "loading", "the", "initrd", "at", "the", "end", "of", "the", "available", "low", "memory", "instead", "of", "use", "a", "fix", "address", "NUMBER", "Hi", "x", "NUMBER", "_", "NUMBER", "be", "now", "ready", "for", "review", "NUMBER", "I", "just", "need", "a", "new", "fixture", "add", "to", "S", "NUMBER", "for", "initrd", "test", "NUMBER", "Do", "you", "expect", "aarch", "NUMBER", "be", "support", "too", "or", "can", "it", "be", "postponed", "in", "a", "later", "PR", "I", "would", "suggest", "merge", "and", "postponing", "aarch", "NUMBER", "so", "that", "x", "NUMBER", "_", "NUMBER", "people", "can", "test", "sooner", "more", "easily", "NUMBER", "Spent", "some", "more", "hours", "and", "add", "aarch", "NUMBER", "support", "NUMBER", "But", "I", "don", "t", "have", "any", "aarch", "NUMBER", "hardware", "with", "KVM", "hypervisor", "mode", "to", "be", "able", "to", "test", "it", "NUMBER", "Update", "aarch", "NUMBER", "be", "functional", "NUMBER", "Also", "almost", "all", "test", "be", "passing", "just", "waiting", "for", "a", "initrd", "update", "on", "S", "NUMBER", "to", "align", "the", "ramdisk", "images", "with", "the", "test", "NUMBER", "All", "test", "be", "now", "passing", "apart", "test_microvm_initrd_with_serial", "on", "aarch", "NUMBER", "It", "needs", "a", "kernel", "update", "on", "S", "NUMBER", "since", "the", "current", "kernel", "do", "not", "support", "booting", "with", "initrd", "grep", "initrd", "proc", "kallsyms", "andreeaflorescu", "kind", "ping", "Let", "me", "know", "if", "you", "be", "waiting", "for", "any", "action", "from", "my", "side", "to", "finalize", "this", "PR", "NUMBER", "I", "tried", "to", "replicate", "the", "failure", "on", "aarch", "NUMBER", "for", "the", "test_microvm_initrd_with_serial", "and", "indeed", "the", "kernel", "panics", "with", "message", "NUMBER", "VFS", "Cannot", "open", "root", "device", "null", "or", "unknown", "block", "NUMBER", "NUMBER", "error", "NUMBER", "NUMBER", "Please", "append", "a", "correct", "root", "boot", "option", "here", "be", "the", "available", "partitions", "NUMBER", "Kernel", "panic", "not", "syncing", "VFS", "Unable", "to", "mount", "root", "fs", "on", "unknown", "block", "NUMBER", "NUMBER", "NUMBER", "CPU", "NUMBER", "PID", "NUMBER", "Comm", "swapper", "NUMBER", "Not", "tainted", "NUMBER", "NUMBER", "NUMBER", "Hardware", "name", "linux", "dummy", "virt", "DT", "As", "far", "as", "my", "previous", "knowledge", "this", "could", "also", "mean", "that", "the", "initrd", "NUMBER", "img", "be", "not", "correctly", "formatted", "NUMBER", "How", "exactly", "were", "the", "initrd", "NUMBER", "img", "created", "for", "both", "x", "NUMBER", "_", "NUMBER", "and", "aarch", "NUMBER", "dianpopa", "the", "initrd", "be", "build", "use", "LINK", "initrd", "If", "I", "recall", "correctly", "I", "did", "test", "the", "same", "initrd", "with", "a", "different", "aarch", "NUMBER", "kernel", "image", "and", "it", "was", "work", "NUMBER", "dianpopa", "the", "initrd", "be", "build", "use", "LINK", "initrd", "_If", "I", "recall", "correctly_", "I", "did", "test", "the", "same", "initrd", "with", "a", "different", "aarch", "NUMBER", "kernel", "image", "and", "it", "was", "work", "NUMBER", "Thanks", "I", "will", "try", "create", "an", "initrd", "for", "aarch", "NUMBER", "myself", "and", "build", "a", "kernel", "with", "initrd", "NUMBER", "I", "will", "let", "you", "know", "the", "results", "NUMBER", "If", "I", "be", "successful", "I", "will", "also", "update", "the", "minimal_with_initrd", "folder", "from", "S", "NUMBER", "marcov", "please", "solve", "the", "conflict", "that", "github", "be", "complaining", "about", "so", "that", "I", "can", "continue", "reviewing", "the", "latest", "code", "change", "NUMBER", "I", "uploaded", "a", "new", "kernel", "to", "S", "NUMBER", "for", "aarch", "NUMBER", "that", "should", "pass", "the", "test", "for", "aarch", "NUMBER", "too", "Thank", "you", "dianpopa", "aarch", "NUMBER", "kernel", "be", "now", "OK", "NUMBER", "I", "want", "us", "to", "upload", "the", "kernel", "configs", "use", "for", "build", "kernels", "with", "initrd", "support", "in", "the", "resources", "folder", "of", "the", "codebase", "NUMBER", "I", "already", "have", "them", "so", "if", "it", "be", "ok", "with", "you", "I", "can", "make", "a", "different", "commit", "on", "top", "of", "your", "commit", "after", "you", "solve", "conflict", "NUMBER", "let", "me", "know", "NUMBER", "Sure", "conflict", "be", "now", "solve", "NUMBER", "Also", "I", "d", "like", "to", "see", "this", "review", "soon", "rebasing", "on", "master", "was", "harder", "than", "expected", "because", "of", "the", "many", "change", "NUMBER", "Thank", "you", "Also", "I", "d", "like", "to", "see", "this", "review", "soon", "rebasing", "on", "master", "was", "harder", "than", "expected", "because", "of", "the", "many", "change", "NUMBER", "Thank", "you", "We", "will", "do", "our", "best", "to", "review", "this", "asap", "Thanks", "for", "the", "quick", "review", "dianpopa", "NUMBER", "I", "ll", "update", "based", "on", "your", "feedbacks", "NUMBER", "Pushed", "a", "new", "version", "with", "change", "based", "on", "reviews", "NUMBER", "Pushed", "a", "new", "version", "with", "change", "based", "on", "reviews", "NUMBER", "Cool", "Ill", "review", "your", "latest", "change", "while", "also", "trying", "to", "see", "why", "the", "aarch", "NUMBER", "test", "fail", "NUMBER", "About", "the", "aarch", "NUMBER", "failure", "the", "reason", "be", "that", "in", "test_boottime", "the", "Guest", "boot", "time", "line", "takes", "a", "while", "before", "be", "printed", "and", "the", "time", "NUMBER", "sleep", "call", "may", "not", "wait", "enough", "NUMBER", "A", "way", "to", "avoid", "that", "be", "to", "keep", "reading", "the", "log", "with", "a", "timeout", "until", "the", "line", "the", "line", "be", "find", "NUMBER", "About", "the", "aarch", "NUMBER", "failure", "the", "reason", "be", "that", "in", "test_boottime", "the", "Guest", "boot", "time", "line", "takes", "a", "while", "before", "be", "printed", "and", "the", "time", "NUMBER", "sleep", "call", "may", "not", "wait", "enough", "NUMBER", "A", "way", "to", "avoid", "that", "be", "to", "keep", "reading", "the", "log", "with", "a", "timeout", "until", "the", "line", "the", "line", "be", "find", "NUMBER", "After", "a", "little", "bit", "of", "debugging", "I", "notice", "the", "the", "Guest", "boot", "time", "message", "be", "not", "outputted", "at", "all", "NUMBER", "Seems", "that", "this", "mmap", "LINK", "initrd", "blob", "master", "guest", "boot_done", "NUMBER", "c", "L", "NUMBER", "fail", "NUMBER", "marcov", "as", "far", "as", "I", "remember", "the", "test", "were", "passing", "after", "I", "uploaded", "a", "new", "kernel", "to", "S", "NUMBER", "but", "I", "cannot", "recall", "whether", "or", "not", "you", "did", "have", "the", "initrd", "boottime", "test", "back", "then", "NUMBER", "I", "be", "ask", "this", "because", "I", "be", "trying", "to", "figure", "out", "what", "change", "in", "the", "meantime", "NUMBER", "The", "boot", "time", "performance", "test", "were", "enable", "just", "recently", "for", "aarch", "NUMBER", "so", "maybe", "that", "s", "a", "reason", "why", "we", "did", "not", "see", "the", "failure", "before", "Anyway", "when", "test", "the", "initrd", "kernel", "with", "a", "rootfs", "the", "boot", "time", "log", "be", "generate", "so", "there", "s", "likely", "something", "wrong", "in", "the", "inirtd", "init", "launcher", "NUMBER", "In", "addition", "I", "also", "tried", "to", "create", "a", "custom", "initrd", "by", "use", "as", "init", "with", "the", "bin", "busybox", "find", "in", "a", "rootfs", "image", "NUMBER", "When", "run", "it", "I", "be", "get", "Can", "t", "map", "memory", "Bad", "file", "descriptor", "The", "boot", "time", "performance", "test", "were", "enable", "just", "recently", "for", "aarch", "NUMBER", "so", "maybe", "that", "s", "a", "reason", "why", "we", "did", "not", "see", "the", "failure", "before", "Anyway", "when", "test", "the", "initrd", "kernel", "with", "a", "rootfs", "the", "boot", "time", "log", "be", "generate", "so", "there", "s", "likely", "something", "wrong", "in", "the", "inirtd", "init", "launcher", "NUMBER", "In", "addition", "I", "also", "tried", "to", "create", "a", "custom", "initrd", "by", "use", "as", "init", "with", "the", "bin", "busybox", "find", "in", "a", "rootfs", "image", "NUMBER", "When", "run", "it", "I", "be", "get", "Can", "t", "map", "memory", "Bad", "file", "descriptor", "I", "be", "able", "to", "replicate", "the", "failure", "meaning", "I", "do", "not", "receive", "the", "log", "message", "by", "use", "the", "NUMBER", "firecracker", "build", "img", "aarch", "NUMBER", "minimal_with_initrd", "kernel", "vmlinux", "NUMBER", "bin", "as", "kernel", "path", "and", "the", "NUMBER", "firecracker", "build", "img", "aarch", "NUMBER", "minimal_with_initrd", "fsfiles", "initrd", "NUMBER", "img", "as", "initrd_path", "which", "be", "what", "the", "fail", "test", "LINK", "microvm", "firecracker", "pull", "NUMBER", "file", "diff", "NUMBER", "dacca", "NUMBER", "f", "NUMBER", "a", "NUMBER", "a", "NUMBER", "eed", "NUMBER", "c", "NUMBER", "b", "NUMBER", "R", "NUMBER", "be", "actually", "use", "and", "leaving", "behind", "NUMBER", "But", "as", "far", "as", "I", "understand", "you", "be", "able", "to", "see", "a", "boot", "time", "log", "when", "you", "do", "the", "same", "right", "I", "also", "tried", "use", "the", "NUMBER", "firecracker", "build", "img", "aarch", "NUMBER", "minimal", "fsfiles", "boottime", "rootfs", "NUMBER", "ext", "NUMBER", "to", "create", "an", "initrd", "but", "the", "kernel", "complains", "that", "it", "cannot", "unpack", "it", "and", "I", "have", "no", "idea", "why", "NUMBER", "But", "as", "far", "as", "I", "understand", "you", "be", "able", "to", "see", "a", "boot", "time", "log", "when", "you", "do", "the", "same", "right", "Sorry", "no", "I", "can", "also", "reproduce", "the", "problem", "locally", "for", "aarch", "NUMBER", "Basically", "the", "mmio", "write", "be", "not", "work", "as", "expected", "NUMBER", "I", "also", "tried", "use", "the", "NUMBER", "firecracker", "build", "img", "aarch", "NUMBER", "minimal", "fsfiles", "boottime", "rootfs", "NUMBER", "ext", "NUMBER", "to", "create", "an", "initrd", "but", "the", "kernel", "complains", "that", "it", "cannot", "unpack", "it", "and", "I", "have", "no", "idea", "why", "NUMBER", "initrd", "should", "be", "be", "an", "ASCII", "cpio", "archive", "NUMBER", "Another", "test", "worth", "doing", "be", "to", "create", "a", "custom", "rootfs", "with", "this", "init", "LINK", "initrd", "blob", "master", "guest", "boot_done", "NUMBER", "c", "and", "see", "if", "the", "boot", "message", "log", "be", "generate", "NUMBER", "Update", "just", "do", "the", "above", "test", "the", "mmio", "write", "be", "work", "well", "NUMBER", "So", "this", "be", "definitely", "some", "other", "problem", "relate", "to", "change", "introduce", "in", "this", "PR", "I", "add", "a", "perror", "here", "LINK", "initrd", "blob", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "a", "NUMBER", "d", "NUMBER", "b", "NUMBER", "b", "NUMBER", "cd", "NUMBER", "ba", "NUMBER", "d", "NUMBER", "f", "NUMBER", "guest", "boot_done", "NUMBER", "c", "L", "NUMBER", "and", "it", "returns", "MAP_FAILED", "with", "Bad", "file", "descriptor", "NUMBER", "Wondering", "why", "NUMBER", "Ok", "I", "think", "I", "find", "an", "explanation", "NUMBER", "The", "mmap", "fail", "because", "the", "fd", "for", "dev", "mem", "be", "bad", "I", "should", "have", "checked", "that", "on", "open", "my", "fault", "and", "that", "s", "because", "the", "dev", "mount", "point", "be", "not", "yet", "set", "up", "when", "the", "open", "be", "do", "NUMBER", "Ok", "I", "think", "I", "find", "an", "explanation", "NUMBER", "The", "mmap", "fail", "because", "the", "fd", "for", "dev", "mem", "be", "bad", "I", "should", "have", "checked", "that", "on", "open", "my", "fault", "and", "that", "s", "because", "the", "dev", "mount", "point", "be", "not", "yet", "set", "up", "when", "the", "open", "be", "do", "NUMBER", "Cool", "I", "was", "also", "suspecting", "that", "it", "might", "be", "something", "wrong", "with", "dev", "mem", "especially", "because", "if", "you", "do", "a", "ls", "al", "dev", "after", "booting", "the", "alpine", "image", "with", "an", "initrd", "the", "devices", "have", "wrong", "dates", "some", "even", "have", "the", "classic", "NUMBER", "JAN", "NUMBER", "NUMBER", "Maybe", "our", "problem", "might", "be", "relate", "to", "that", "NUMBER", "Hi", "dianpopa", "I", "push", "a", "initrd", "fix", "for", "the", "issue", "LINK", "initrd", "commit", "d", "NUMBER", "e", "NUMBER", "cb", "NUMBER", "c", "NUMBER", "a", "NUMBER", "ecbefee", "NUMBER", "f", "NUMBER", "fd", "NUMBER", "b", "NUMBER", "a", "NUMBER", "I", "can", "finally", "get", "the", "boot", "do", "log", "with", "that", "Though", "I", "be", "not", "sure", "if", "the", "performance", "test", "be", "going", "to", "stay", "within", "the", "maximum", "boot", "time", "NUMBER", "When", "you", "have", "some", "time", "can", "you", "please", "rebuild", "the", "initrd", "and", "put", "it", "on", "S", "NUMBER", "Hi", "dianpopa", "I", "push", "a", "initrd", "fix", "for", "the", "issue", "marcov", "firecracker", "initrd", "d", "NUMBER", "e", "NUMBER", "LINK", "initrd", "commit", "d", "NUMBER", "e", "NUMBER", "cb", "NUMBER", "c", "NUMBER", "a", "NUMBER", "ecbefee", "NUMBER", "f", "NUMBER", "fd", "NUMBER", "b", "NUMBER", "a", "NUMBER", "I", "can", "finally", "get", "the", "boot", "do", "log", "with", "that", "Though", "I", "be", "not", "sure", "if", "the", "performance", "test", "be", "going", "to", "stay", "within", "the", "maximum", "boot", "time", "NUMBER", "When", "you", "have", "some", "time", "can", "you", "please", "rebuild", "the", "initrd", "and", "put", "it", "on", "S", "NUMBER", "Oh", "nice", "Thanks", "for", "the", "fix", "I", "will", "upload", "it", "in", "S", "NUMBER", "soon", "enough", "NUMBER", "marcov", "do", "you", "need", "help", "in", "addressing", "the", "outstanding", "review", "comments", "Thank", "you", "for", "the", "ping", "andreeaflorescu", "push", "some", "update", "now", "NUMBER", "marcov", "I", "created", "a", "prototype", "on", "my", "branch", "on", "top", "of", "your", "commit", "LINK", "The", "initrd_load_addr", "function", "doesn", "t", "need", "to", "live", "in", "arch", "NUMBER", "It", "be", "more", "of", "a", "utility", "function", "for", "loading", "the", "initrd", "image", "into", "guest", "memory", "NUMBER", "I", "moved", "it", "to", "the", "kernel", "crate", "along", "with", "load_initrd", "function", "NUMBER", "To", "break", "the", "dependency", "between", "the", "arch", "crate", "and", "the", "kernel", "crate", "we", "can", "send", "the", "page", "size", "as", "a", "parameter", "to", "load_initrd", "NUMBER", "This", "be", "still", "not", "an", "ideal", "state", "because", "now", "arch", "depends", "on", "kernel", "which", "be", "not", "something", "that", "we", "want", "NUMBER", "This", "dependency", "can", "further", "be", "broke", "by", "refactoring", "the", "fdt", "implementation", "in", "arch", "but", "this", "be", "out", "of", "scope", "of", "this", "PR", "NUMBER", "To", "give", "you", "more", "context", "it", "be", "important", "to", "have", "the", "loading", "of", "initrd", "in", "the", "kernel", "crate", "because", "we", "be", "work", "towards", "consuming", "the", "linux", "loader", "crate", "from", "rust", "vmm", "NUMBER", "Once", "we", "make", "sure", "that", "loading", "the", "initrd", "works", "as", "expected", "we", "should", "also", "send", "a", "PR", "with", "the", "code", "here", "LINK", "vmm", "linux", "loader", "NUMBER", "If", "you", "don", "t", "want", "to", "also", "send", "a", "PR", "in", "rust", "vmm", "one", "of", "the", "Firecracker", "maintainers", "can", "take", "care", "of", "that", "NUMBER", "Loading", "an", "initrd", "image", "be", "quite", "a", "common", "feature", "that", "we", "would", "like", "to", "have", "in", "linux", "loader", "as", "well", "NUMBER", "Having", "that", "functionality", "in", "the", "vmm", "crate", "makes", "it", "impossible", "to", "share", "the", "common", "code", "with", "the", "other", "VMMs", "write", "in", "Rust", "for", "example", "with", "Cloud", "Hypervisor", "NUMBER", "Besides", "this", "there", "be", "an", "ongoing", "effort", "to", "minimize", "the", "code", "in", "vmm", "NUMBER", "marcov", "I", "created", "a", "prototype", "on", "my", "branch", "on", "top", "of", "your", "commit", "andreeaflorescu", "NUMBER", "b", "NUMBER", "d", "LINK", "NUMBER", "The", "initrd_load_addr", "function", "doesn", "t", "need", "to", "live", "in", "arch", "NUMBER", "It", "be", "more", "of", "a", "utility", "function", "for", "loading", "the", "initrd", "image", "into", "guest", "memory", "NUMBER", "I", "moved", "it", "to", "the", "kernel", "crate", "along", "with", "load_initrd", "function", "NUMBER", "To", "break", "the", "dependency", "between", "the", "arch", "crate", "and", "the", "kernel", "crate", "we", "can", "send", "the", "page", "size", "as", "a", "parameter", "to", "load_initrd", "NUMBER", "This", "be", "still", "not", "an", "ideal", "state", "because", "now", "arch", "depends", "on", "kernel", "which", "be", "not", "something", "that", "we", "want", "NUMBER", "This", "dependency", "can", "further", "be", "broke", "by", "refactoring", "the", "fdt", "implementation", "in", "arch", "but", "this", "be", "out", "of", "scope", "of", "this", "PR", "NUMBER", "To", "give", "you", "more", "context", "it", "be", "important", "to", "have", "the", "loading", "of", "initrd", "in", "the", "kernel", "crate", "because", "we", "be", "work", "towards", "consuming", "the", "linux", "loader", "crate", "from", "rust", "vmm", "NUMBER", "Once", "we", "make", "sure", "that", "loading", "the", "initrd", "works", "as", "expected", "we", "should", "also", "send", "a", "PR", "with", "the", "code", "here", "LINK", "vmm", "linux", "loader", "NUMBER", "If", "you", "don", "t", "want", "to", "also", "send", "a", "PR", "in", "rust", "vmm", "one", "of", "the", "Firecracker", "maintainers", "can", "take", "care", "of", "that", "NUMBER", "Loading", "an", "initrd", "image", "be", "quite", "a", "common", "feature", "that", "we", "would", "like", "to", "have", "in", "linux", "loader", "as", "well", "NUMBER", "Having", "that", "functionality", "in", "the", "vmm", "crate", "makes", "it", "impossible", "to", "share", "the", "common", "code", "with", "the", "other", "VMMs", "write", "in", "Rust", "for", "example", "with", "Cloud", "Hypervisor", "NUMBER", "Besides", "this", "there", "be", "an", "ongoing", "effort", "to", "minimize", "the", "code", "in", "vmm", "NUMBER", "The", "initrd_load_addr", "do", "need", "to", "live", "in", "arch", "or", "at", "least", "this", "be", "how", "we", "achieve", "consistency", "with", "the", "way", "the", "kernel", "deals", "with", "initrd", "NUMBER", "Please", "take", "a", "look", "at", "how", "things", "work", "for", "x", "NUMBER", "_", "NUMBER", "starting", "here", "LINK", "electrons", "NUMBER", "com", "linux", "v", "NUMBER", "source", "arch", "x", "NUMBER", "kernel", "setup", "NUMBER", "c", "L", "NUMBER", "the", "first", "interaction", "of", "the", "kernel", "with", "the", "initrd", "config", "data", "be", "in", "the", "setup_arch", "LINK", "electrons", "NUMBER", "com", "linux", "v", "NUMBER", "source", "arch", "x", "NUMBER", "kernel", "setup", "NUMBER", "c", "L", "NUMBER", "function", "which", "contains", "the", "architecture", "specific", "boot", "time", "initializations", "LINK", "electrons", "NUMBER", "com", "linux", "v", "NUMBER", "source", "arch", "x", "NUMBER", "kernel", "setup", "NUMBER", "c", "L", "NUMBER", "which", "be", "kind", "of", "the", "equivalent", "of", "our", "configure_system", "function", "NUMBER", "You", "can", "see", "there", "that", "the", "two", "essential", "things", "that", "the", "kernel", "needs", "be", "the", "address", "LINK", "electrons", "NUMBER", "com", "linux", "v", "NUMBER", "source", "arch", "x", "NUMBER", "kernel", "setup", "NUMBER", "c", "L", "NUMBER", "where", "the", "initrd", "be", "loaded", "and", "the", "size", "LINK", "electrons", "NUMBER", "com", "linux", "v", "NUMBER", "source", "arch", "x", "NUMBER", "kernel", "setup", "NUMBER", "c", "L", "NUMBER", "of", "it", "NUMBER", "For", "the", "first", "one", "i", "NUMBER", "e", "the", "address", "you", "need", "to", "be", "aware", "of", "the", "memory", "layout", "for", "a", "specific", "platform", "which", "we", "be", "defining", "in", "arch", "NUMBER", "The", "one", "function", "that", "do", "the", "job", "for", "that", "be", "initrd_load_address", "from", "arch", "NUMBER", "If", "we", "were", "to", "move", "this", "in", "the", "kernel", "crate", "as", "it", "be", "the", "case", "with", "your", "model", "let", "lowmem_size", "usize", "guest_mem", "NUMBER", "region_size", "NUMBER", "NUMBER", "map_err", "_", "Error", "InitrdAddress", "we", "would", "make", "the", "kernel", "crate", "dependent", "on", "memory", "layout", "representation", "for", "a", "specific", "platform", "NUMBER", "Does", "not", "that", "break", "the", "separation", "of", "concerns", "we", "strive", "for", "As", "far", "as", "the", "size", "a", "fseek", "be", "sufficient", "NUMBER", "This", "functionality", "be", "achieved", "in", "the", "current", "implementation", "by", "the", "load_initrd", "function", "from", "the", "vmm", "NUMBER", "After", "address", "and", "size", "be", "obtained", "the", "image", "be", "write", "to", "memory", "NUMBER", "If", "we", "want", "to", "avoid", "passing", "around", "the", "guest", "memory", "which", "be", "what", "we", "should", "be", "striving", "for", "in", "our", "decoupling", "goal", "this", "should", "also", "stay", "in", "vmm", "NUMBER", "Taking", "load_kernel", "as", "example", "I", "can", "keep", "part", "of", "load_initrd", "in", "vmm", "to", "retrieve", "the", "initrd", "address", "and", "size", "and", "have", "a", "load_initrd", "in", "kernel", "to", "write", "data", "into", "the", "guest", "memory", "NUMBER", "The", "kernel", "function", "would", "only", "be", "a", "one", "liner", "though", "NUMBER", "marcov", "that", "was", "my", "initial", "thought", "as", "well", "and", "notice", "the", "same", "problem", "as", "you", "NUMBER", "Let", "s", "keep", "it", "as", "be", "for", "now", "and", "we", "will", "find", "a", "better", "place", "for", "it", "in", "a", "future", "iteration", "NUMBER", "I", "be", "still", "a", "bit", "concerned", "regard", "the", "rather", "large", "boot", "time", "on", "aarch", "NUMBER", "I", "was", "thinking", "about", "doing", "some", "comparison", "with", "Qemu", "boot", "times", "if", "they", "have", "something", "similar", "we", "can", "compare", "against", "NUMBER", "I", "can", "check", "that", "tomorrow", "NUMBER", "andreeaflorescu", "use", "a", "non", "gzipped", "initrd", "will", "shave", "off", "around", "NUMBER", "ms", "but", "even", "doing", "that", "we", "be", "still", "far", "aways", "from", "the", "max", "time", "of", "NUMBER", "ms", "NUMBER", "Checking", "the", "boot", "log", "timestamp", "most", "of", "the", "time", "be", "spent", "by", "the", "kernel", "unpacking", "the", "initramfs", "and", "that", "time", "depends", "on", "the", "size", "of", "the", "initrd", "file", "NUMBER", "This", "be", "with", "a", "NUMBER", "MB", "initrd", "NUMBER", "UDP", "Lite", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "Unpacking", "initramfs", "NUMBER", "NUMBER", "Freeing", "initrd", "memory", "NUMBER", "K", "andreeaflorescu", "use", "a", "non", "gzipped", "initrd", "will", "shave", "off", "around", "NUMBER", "ms", "but", "even", "doing", "that", "we", "be", "still", "far", "aways", "from", "the", "max", "time", "of", "NUMBER", "ms", "NUMBER", "Checking", "the", "boot", "log", "timestamp", "most", "of", "the", "time", "be", "spent", "by", "the", "kernel", "unpacking", "the", "initramfs", "and", "that", "time", "depends", "on", "the", "size", "of", "the", "initrd", "file", "NUMBER", "This", "be", "with", "a", "NUMBER", "MB", "initrd", "NUMBER", "UDP", "Lite", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "Unpacking", "initramfs", "NUMBER", "NUMBER", "Freeing", "initrd", "memory", "NUMBER", "K", "On", "the", "a", "NUMBER", "metal", "aarch", "NUMBER", "machine", "NUMBER", "MB", "initrd", "things", "look", "like", "this", "NUMBER", "Unpacking", "initramfs", "NUMBER", "NUMBER", "Freeing", "initrd", "memory", "NUMBER", "K", "NUMBER", "audit", "initializing", "netlink", "subsys", "disabled", "NUMBER", "Initialise", "system", "trusted", "keyrings", "dianpopa", "try", "to", "gzip", "d", "the", "initrd", "NUMBER", "img", "you", "should", "gain", "around", "NUMBER", "ms", "NUMBER", "If", "it", "be", "expected", "for", "the", "boot", "time", "to", "be", "so", "large", "with", "the", "provide", "initrd", "image", "we", "can", "merge", "the", "PR", "as", "be", "NUMBER", "I", "didn", "t", "really", "have", "time", "to", "investigate", "this", "and", "I", "don", "t", "want", "to", "block", "the", "PR", "NUMBER", "Feel", "free", "to", "update", "the", "time", "for", "aarch", "NUMBER", "to", "a", "value", "that", "you", "re", "confident", "with", "NUMBER", "dianpopa", "try", "to", "gzip", "d", "the", "initrd", "NUMBER", "img", "you", "should", "gain", "around", "NUMBER", "ms", "NUMBER", "I", "tried", "with", "the", "initrd", "NUMBER", "img", "that", "the", "CI", "leaves", "behind", "NUMBER", "marcov", "be", "you", "implying", "that", "it", "would", "be", "a", "good", "idea", "to", "reupload", "in", "S", "NUMBER", "the", "decompressed", "version", "dianpopa", "right", "An", "ASCII", "cpio", "archive", "should", "be", "faster", "NUMBER", "I", "m", "going", "to", "do", "a", "final", "squash", "and", "set", "a", "reasonable", "boot", "time", "for", "aarch", "NUMBER", "checking", "for", "platform", "NUMBER", "machine", "Happy", "to", "see", "this", "merge", "Thanks", "for", "the", "help", "dianpopa", "andreeaflorescu", "and", "happy", "holidays", "Thanks", "for", "the", "effort", "and", "responsiveness", "marcov", "Happy", "holidays", "Reason", "for", "This", "PR", "Implement", "Debug", "Display", "for", "Errors", "that", "can", "generate", "panics", "NUMBER", "Description", "of", "Changes", "I", "ve", "add", "mostly", "Display", "traits", "to", "describe", "friendlier", "user", "facing", "error", "from", "api_server", "which", "inherits", "error", "from", "vmm", "devices", "arch", "etc", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Close", "this", "PR", "since", "it", "needs", "to", "be", "divided", "in", "two", "to", "be", "easy", "review", "NUMBER", "Also", "rebase", "on", "top", "of", "master", "since", "you", "re", "change", "file", "anyway", "save", "some", "CI", "time", "NUMBER", "HttpServer", "be", "a", "struct", "that", "leverages", "HttpConnection", "for", "exchanging", "data", "with", "a", "client", "and", "epoll", "to", "be", "able", "to", "run", "on", "the", "same", "thread", "as", "the", "rest", "of", "the", "code", "NUMBER", "Example", "usage", "use", "micro_http", "HttpServer", "Response", "StatusCode", "let", "mut", "server", "HttpServer", "new", "path_to_socket", "NUMBER", "unwrap", "server", "NUMBER", "art_server", "NUMBER", "unwrap", "loop", "for", "request", "in", "server", "NUMBER", "incoming", "NUMBER", "unwrap", "let", "response", "request", "NUMBER", "process", "request", "Your", "code", "here", "NUMBER", "This", "should", "return", "a", "http", "Response", "NUMBER", "server", "NUMBER", "respond", "response", "Fixes", "NUMBER", "Signed", "off", "by", "George", "Pisaltu", "TAG", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "This", "PR", "be", "linked", "to", "issue", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "No", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "NUMBER", "x", "Code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "No", "API", "change", "be", "include", "in", "this", "PR", "NUMBER", "x", "The", "change", "in", "this", "PR", "have", "no", "user", "impact", "NUMBER", "The", "HttpConnection", "class", "contains", "Request", "Parsing", "logic", "NUMBER", "It", "would", "be", "better", "to", "decouple", "this", "logic", "from", "HttpConnection", "and", "move", "it", "in", "a", "separate", "class", "RequestParser", "NUMBER", "See", "this", "LINK", "microvm", "firecracker", "pull", "NUMBER", "issuecomment", "NUMBER", "comment", "NUMBER", "Probably", "it", "s", "not", "worth", "doing", "this", "NUMBER", "I", "will", "close", "this", "issue", "NUMBER", "Reason", "for", "This", "PR", "Fixes", "NUMBER", "Description", "of", "Changes", "NUMBER", "parse", "UDP", "datagrams", "NUMBER", "replace", "pnet", "packet", "with", "dumbo", "s", "sutff", "NUMBER", "move", "MacAddr", "from", "net_util", "to", "dumbo", "NUMBER", "use", "UdpSocket", "in", "test_write", "test_read", "in", "tap", "NUMBER", "rs", "ARP", "reply", "construction", "was", "needed", "to", "make", "this", "work", "NUMBER", "Use", "host", "IPs", "instead", "of", "hardcoded", "ones", "since", "the", "packets", "will", "be", "routed", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Hi", "shakram", "NUMBER", "be", "this", "PR", "complete", "Hey", "Adrian", "it", "s", "almost", "complete", "I", "just", "have", "one", "small", "discussion", "about", "the", "correct", "IP", "to", "assigned", "to", "the", "TAP", "but", "it", "pass", "all", "the", "test", "already", "except", "the", "percentage", "of", "code", "coverage", "the", "required", "percentage", "be", "NUMBER", "and", "now", "the", "code", "be", "at", "NUMBER", "NUMBER", "Plus", "I", "m", "refactoring", "the", "code", "in", "the", "test", "now", "acatangiu", "so", "this", "be", "the", "almost", "finalized", "code", "I", "ll", "tell", "you", "if", "I", "do", "any", "significant", "change", "in", "case", "you", "want", "to", "review", "the", "code", "shakram", "NUMBER", "would", "you", "mind", "cleaning", "up", "reorder", "squash", "etc", "your", "commit", "a", "bit", "before", "review", "I", "see", "that", "some", "commit", "be", "fix", "to", "other", "commit", "and", "so", "on", "NUMBER", "acatangiu", "do", "Hi", "everyone", "NUMBER", "I", "d", "love", "to", "have", "a", "look", "at", "this", "PR", "as", "well", "please", "give", "me", "a", "couple", "more", "days", "s", "okay", "do", "Reason", "for", "This", "PR", "This", "PR", "be", "meant", "to", "address", "NUMBER", "for", "support", "GICv", "NUMBER", "devices", "on", "aarch", "NUMBER", "architecture", "NUMBER", "Description", "of", "Changes", "This", "makes", "the", "GIC", "relate", "code", "more", "flexible", "and", "implement", "a", "GICv", "NUMBER", "device", "NUMBER", "It", "introduces", "a", "GICDevice", "Trait", "which", "needs", "to", "be", "implement", "by", "GIC", "device", "implementations", "NUMBER", "We", "implement", "the", "Trait", "for", "GICv", "NUMBER", "and", "GICv", "NUMBER", "devices", "NUMBER", "When", "creating", "the", "GIC", "device", "for", "the", "microVM", "we", "initially", "try", "to", "create", "a", "v", "NUMBER", "device", "and", "if", "that", "fail", "we", "fall", "back", "to", "creating", "a", "v", "NUMBER", "device", "NUMBER", "I", "have", "tried", "this", "on", "a", "Hikey", "NUMBER", "board", "and", "it", "works", "so", "far", "NUMBER", "I", "m", "trying", "this", "out", "on", "a", "RPi", "NUMBER", "as", "well", "to", "double", "check", "everything", "be", "work", "NUMBER", "In", "any", "case", "I", "m", "not", "greatly", "familiar", "with", "the", "GIC", "architecture", "I", "did", "some", "research", "for", "this", "PR", "so", "any", "comments", "on", "what", "I", "ve", "do", "so", "far", "be", "more", "that", "welcome", "NUMBER", "License", "Acceptance", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "PR", "Checklist", "Author", "TODO", "Meet", "these", "criteria", "NUMBER", "Where", "there", "be", "two", "options", "keep", "one", "NUMBER", "Reviewer", "TODO", "Verify", "that", "these", "criteria", "be", "met", "NUMBER", "Request", "change", "if", "not", "x", "All", "commit", "in", "this", "PR", "be", "sign", "git", "commit", "s", "NUMBER", "x", "Either", "this", "PR", "be", "linked", "to", "an", "issue", "or", "the", "reason", "for", "this", "PR", "be", "clearly", "provide", "NUMBER", "x", "The", "description", "of", "change", "be", "clear", "and", "encompassing", "NUMBER", "x", "Either", "no", "docs", "need", "to", "be", "update", "as", "part", "of", "this", "PR", "or", "the", "required", "doc", "change", "be", "include", "in", "this", "PR", "NUMBER", "Docs", "in", "scope", "be", "all", "NUMBER", "md", "file", "located", "either", "in", "the", "repository", "root", "or", "in", "the", "docs", "directory", "NUMBER", "x", "Either", "no", "code", "has", "be", "touched", "or", "code", "level", "documentation", "for", "touched", "code", "be", "include", "in", "this", "PR", "NUMBER", "x", "Either", "no", "API", "change", "be", "include", "in", "this", "PR", "or", "the", "API", "change", "be", "reflected", "in", "firecracker", "swagger", "NUMBER", "yaml", "NUMBER", "x", "Either", "the", "change", "in", "this", "PR", "have", "no", "user", "impact", "or", "the", "change", "in", "this", "PR", "have", "user", "impact", "and", "have", "be", "add", "to", "the", "CHANGELOG", "NUMBER", "md", "file", "NUMBER", "Ok", "I", "did", "a", "re", "write", "of", "the", "PR", "which", "try", "to", "do", "what", "was", "discussed", "in", "the", "issue", "comments", "i", "NUMBER", "e", "NUMBER", "the", "GIC", "relate", "code", "try", "to", "setup", "a", "GIC", "v", "NUMBER", "device", "and", "if", "it", "doesn", "t", "succeed", "it", "fail", "back", "to", "create", "a", "GIC", "v", "NUMBER", "device", "NUMBER", "Moreover", "the", "GIC", "code", "returns", "the", "version", "of", "the", "GIC", "chip", "that", "was", "created", "and", "that", "info", "be", "use", "in", "order", "to", "create", "the", "correct", "FDT", "later", "on", "NUMBER", "Moreover", "I", "tried", "to", "update", "the", "relevant", "test", "to", "take", "these", "change", "into", "account", "NUMBER", "Disclaimer", "my", "rust", "knowledge", "be", "very", "limited", "so", "comments", "be", "more", "than", "welcome", "Thanks", "bchalios", "Could", "we", "get", "a", "review", "of", "this", "PR", "from", "any", "of", "the", "maintainers", "please", "cc", "dianpopa", "andreeaflorescu", "Thanks", "in", "advance", "clap", "I", "didn", "t", "have", "time", "to", "take", "a", "detailed", "look", "on", "this", "and", "I", "don", "t", "know", "this", "area", "of", "our", "code", "very", "well", "but", "at", "first", "sight", "I", "would", "prefer", "a", "more", "extensible", "and", "object", "oriented", "design", "NUMBER", "I", "think", "it", "would", "make", "sense", "to", "have", "a", "class", "for", "GicV", "NUMBER", "that", "contains", "all", "the", "gicv", "NUMBER", "specific", "logic", "and", "a", "different", "class", "for", "GicV", "NUMBER", "that", "contains", "all", "the", "gicv", "NUMBER", "specific", "logic", "NUMBER", "Also", "they", "can", "implement", "a", "common", "trait", "NUMBER", "This", "way", "it", "would", "be", "easier", "to", "add", "support", "for", "gicv", "NUMBER", "in", "the", "future", "for", "example", "NUMBER", "Also", "the", "code", "would", "probably", "be", "more", "readable", "NUMBER", "Thanks", "for", "your", "review", "serban", "NUMBER", "I", "ve", "tried", "to", "refactor", "the", "PR", "to", "implement", "the", "feature", "in", "the", "way", "you", "suggested", "NUMBER", "Please", "take", "a", "look", "and", "let", "me", "know", "if", "the", "change", "make", "sense", "to", "you", "NUMBER", "Essentially", "I", "be", "use", "this", "PR", "as", "a", "way", "to", "as", "well", "practice", "Rust", "I", "ve", "never", "write", "anything", "before", "in", "Rust", "so", "please", "let", "me", "know", "if", "something", "strikes", "badly", "to", "you", "NUMBER", "I", "didn", "t", "have", "time", "to", "take", "a", "detailed", "look", "on", "this", "and", "I", "don", "t", "know", "this", "area", "of", "our", "code", "very", "well", "but", "at", "first", "sight", "I", "would", "prefer", "a", "more", "extensible", "and", "object", "oriented", "design", "NUMBER", "I", "think", "it", "would", "make", "sense", "to", "have", "a", "class", "for", "GicV", "NUMBER", "that", "contains", "all", "the", "gicv", "NUMBER", "specific", "logic", "and", "a", "different", "class", "for", "GicV", "NUMBER", "that", "contains", "all", "the", "gicv", "NUMBER", "specific", "logic", "NUMBER", "Also", "they", "can", "implement", "a", "common", "trait", "NUMBER", "This", "way", "it", "would", "be", "easier", "to", "add", "support", "for", "gicv", "NUMBER", "in", "the", "future", "for", "example", "NUMBER", "Also", "the", "code", "would", "probably", "be", "more", "readable", "NUMBER", "Thanks", "for", "your", "review", "serban", "NUMBER", "I", "ve", "tried", "to", "refactor", "the", "PR", "to", "implement", "the", "feature", "in", "the", "way", "you", "suggested", "NUMBER", "Please", "take", "a", "look", "and", "let", "me", "know", "if", "the", "change", "make", "sense", "to", "you", "NUMBER", "Essentially", "I", "be", "use", "this", "PR", "as", "a", "way", "to", "as", "well", "practice", "Rust", "I", "ve", "never", "write", "anything", "before", "in", "Rust", "so", "please", "let", "me", "know", "if", "something", "strikes", "badly", "to", "you", "NUMBER", "Thanks", "for", "addressing", "the", "comments", "NUMBER", "I", "will", "try", "to", "take", "a", "look", "on", "the", "code", "as", "soon", "as", "possible", "NUMBER", "Worst", "case", "scenario", "I", "will", "do", "this", "at", "the", "beginning", "of", "the", "next", "week", "NUMBER", "I", "be", "super", "busy", "right", "now", "NUMBER", "acatangiu", "I", "push", "a", "commit", "that", "try", "to", "apply", "the", "request", "change", "NUMBER", "The", "new", "functionality", "be", "implement", "through", "static", "function", "as", "I", "could", "not", "figure", "out", "a", "clean", "way", "to", "incorporate", "it", "in", "the", "common", "Trait", "NUMBER", "If", "you", "see", "any", "alternative", "let", "me", "know", "Cheers", "Babis", "Ok", "I", "think", "that", "I", "ve", "address", "the", "request", "change", "NUMBER", "Please", "take", "a", "look", "and", "let", "me", "know", "if", "the", "change", "make", "sense", "Ok", "could", "you", "take", "a", "look", "now", "I", "don", "t", "think", "we", "can", "avoid", "the", "problem", "with", "multiple", "argument", "per", "version", "since", "the", "external", "code", "creating", "the", "device", "cannot", "know", "what", "device", "be", "support", "NUMBER", "Ok", "do", "with", "the", "last", "comments", "as", "well", "Everything", "looks", "ok", "NUMBER", "It", "s", "as", "good", "as", "approved", "on", "my", "side", "but", "please", "sign", "your", "commit", "use", "git", "commit", "ammend", "s", "NUMBER", "Also", "I", "think", "it", "would", "make", "sense", "to", "reduce", "the", "number", "of", "commit", "NUMBER", "You", "can", "fixup", "everything", "in", "one", "commit", "NUMBER", "Hmmm", "I", "thought", "the", "commit", "were", "sign", "already", "NUMBER", "GitHub", "marks", "them", "as", "verify", "NUMBER", "Am", "I", "miss", "something", "Everything", "looks", "ok", "NUMBER", "It", "s", "as", "good", "as", "approved", "on", "my", "side", "but", "please", "sign", "your", "commit", "use", "git", "commit", "ammend", "s", "NUMBER", "Also", "I", "think", "it", "would", "make", "sense", "to", "reduce", "the", "number", "of", "commit", "NUMBER", "You", "can", "fixup", "everything", "in", "one", "commit", "NUMBER", "Hmmm", "I", "thought", "the", "commit", "were", "sign", "already", "NUMBER", "GitHub", "marks", "them", "as", "verify", "NUMBER", "Am", "I", "miss", "something", "I", "be", "not", "sure", "why", "github", "marks", "them", "as", "verify", "maybe", "that", "s", "something", "else", "NUMBER", "But", "there", "should", "be", "a", "sign", "off", "message", "at", "the", "end", "of", "each", "commit", "NUMBER", "Something", "like", "Signed", "off", "by", "Serban", "Iorga", "TAG", "and", "git", "commit", "ammend", "s", "will", "add", "it", "automatically", "NUMBER", "Everything", "looks", "ok", "NUMBER", "It", "s", "as", "good", "as", "approved", "on", "my", "side", "but", "please", "sign", "your", "commit", "use", "git", "commit", "ammend", "s", "NUMBER", "Also", "I", "think", "it", "would", "make", "sense", "to", "reduce", "the", "number", "of", "commit", "NUMBER", "You", "can", "fixup", "everything", "in", "one", "commit", "NUMBER", "Hmmm", "I", "thought", "the", "commit", "were", "sign", "already", "NUMBER", "GitHub", "marks", "them", "as", "verify", "NUMBER", "Am", "I", "miss", "something", "I", "be", "not", "sure", "why", "github", "marks", "them", "as", "verify", "maybe", "that", "s", "something", "else", "NUMBER", "But", "there", "should", "be", "a", "sign", "off", "message", "at", "the", "end", "of", "each", "commit", "NUMBER", "Something", "like", "Signed", "off", "by", "Serban", "Iorga", "TAG", "and", "git", "commit", "ammend", "s", "will", "add", "it", "automatically", "NUMBER", "Ok", "I", "m", "generally", "use", "git", "commit", "S", "which", "actually", "signs", "the", "commit", "with", "GPG", "but", "doesn", "t", "add", "the", "Signed", "off", "by", "bit", "in", "the", "commit", "message", "NUMBER", "Thanks", "bchalios", "serban", "NUMBER", "acatangiu", "tada", "Hello", "Currently", "the", "MMDS", "get", "operation", "be", "defined", "as", "follows", "yaml", "mmds", "NUMBER", "snip", "NUMBER", "get", "summary", "Get", "the", "MMDS", "data", "store", "NUMBER", "responses", "NUMBER", "description", "The", "MMDS", "data", "store", "JSON", "NUMBER", "schema", "type", "object", "NUMBER", "description", "Cannot", "get", "the", "MMDS", "data", "store", "due", "to", "bad", "input", "NUMBER", "schema", "ref", "definitions", "Error", "default", "description", "Internal", "server", "error", "schema", "ref", "definitions", "Error", "The", "schema", "be", "defined", "as", "object", "which", "be", "parallel", "to", "the", "schema", "of", "the", "put", "and", "patch", "operations", "as", "well", "NUMBER", "In", "the", "Firecracker", "SDK", "for", "Go", "LINK", "microvm", "firecracker", "go", "sdk", "we", "ve", "received", "a", "pull", "request", "LINK", "microvm", "firecracker", "go", "sdk", "pull", "NUMBER", "to", "add", "a", "GetMetadata", "method", "to", "retrieve", "the", "metadata", "from", "the", "MMDS", "NUMBER", "However", "the", "definition", "of", "the", "schema", "as", "object", "and", "the", "way", "that", "go", "openapi", "LINK", "openapi", "generates", "a", "client", "makes", "that", "difficult", "to", "work", "with", "NUMBER", "When", "object", "be", "defined", "our", "Swagger", "client", "generator", "gives", "us", "an", "interface", "which", "be", "Go", "s", "equivalent", "of", "a", "void", "pointer", "we", "then", "need", "figure", "out", "some", "way", "of", "converting", "that", "to", "a", "useful", "value", "NUMBER", "One", "mechanism", "be", "to", "implement", "dynamic", "type", "discovery", "which", "be", "a", "lot", "of", "boilerplate", "and", "error", "prone", "code", "NUMBER", "Another", "be", "to", "send", "this", "back", "through", "another", "serialization", "deserialization", "round", "trip", "to", "use", "Go", "s", "build", "in", "JSON", "decoding", "but", "that", "will", "be", "inefficient", "especially", "for", "large", "objects", "NUMBER", "Or", "there", "be", "other", "approaches", "that", "involve", "digging", "beneath", "the", "Swagger", "client", "library", "s", "abstractions", "NUMBER", "Would", "you", "be", "willing", "to", "change", "this", "to", "a", "string", "and", "format", "binary", "instead", "of", "object", "If", "this", "were", "defined", "as", "a", "string", "we", "would", "get", "the", "serialized", "data", "back", "and", "can", "deserialize", "it", "ourselves", "instead", "of", "needing", "these", "workarounds", "NUMBER", "If", "this", "isn", "t", "a", "change", "you", "d", "be", "willing", "to", "make", "we", "do", "have", "some", "options", "NUMBER", "Dynamic", "type", "discovery", "NUMBER", "Reserialize", "deserialize", "round", "trip", "NUMBER", "Patch", "the", "swagger", "spec", "ourselves", "NUMBER", "Implement", "a", "separate", "Client", "with", "a", "separate", "runtime", "NUMBER", "ClientResponseReader", "just", "for", "this", "operation", "But", "these", "approaches", "be", "all", "more", "complicated", "and", "though", "I", "haven", "t", "looked", "I", "suspect", "that", "other", "Swagger", "client", "generators", "in", "other", "programming", "languages", "will", "have", "similar", "challenges", "with", "a", "returned", "object", "NUMBER", "Thanks", "Sam", "samuelkarp", "We", "be", "use", "type", "object", "on", "all", "request", "not", "just", "MMDS", "NUMBER", "The", "code", "that", "parses", "request", "from", "client", "into", "json", "be", "generic", "and", "the", "same", "for", "all", "request", "NUMBER", "Changing", "only", "one", "of", "the", "request", "would", "introduce", "messy", "code", "in", "the", "api_server", "which", "we", "also", "work", "on", "change", "any", "way", "NUMBER", "Considering", "this", "I", "would", "like", "us", "to", "avoid", "change", "the", "request", "type", "at", "least", "until", "we", "replace", "the", "api_server", "with", "our", "custom", "implementation", "NUMBER", "I", "do", "find", "it", "a", "bit", "weird", "that", "it", "s", "so", "hard", "to", "get", "a", "JSON", "from", "type", "object", "because", "reading", "through", "the", "Swagger", "documentation", "this", "be", "the", "only", "way", "I", "can", "find", "to", "represent", "a", "JSON", "object", "LINK", "models", "dictionaries", "NUMBER", "Isn", "t", "this", "a", "miss", "of", "the", "Go", "SDK", "We", "be", "use", "type", "object", "on", "all", "request", "not", "just", "MMDS", "NUMBER", "As", "far", "as", "I", "can", "tell", "mmds", "be", "the", "only", "API", "that", "directly", "uses", "type", "object", "NUMBER", "All", "other", "usage", "of", "type", "object", "be", "in", "defining", "the", "structure", "of", "a", "specific", "object", "in", "the", "definitions", "section", "NUMBER", "I", "do", "find", "it", "a", "bit", "weird", "that", "it", "s", "so", "hard", "to", "get", "a", "JSON", "from", "type", "object", "because", "reading", "through", "the", "Swagger", "documentation", "this", "be", "the", "only", "way", "I", "can", "find", "to", "represent", "a", "JSON", "object", "NUMBER", "Does", "MMDS", "depend", "on", "it", "specifically", "be", "JSON", "My", "understanding", "be", "that", "MMDS", "be", "accepting", "and", "serving", "arbitrary", "data", "NUMBER", "Isn", "t", "this", "a", "miss", "of", "the", "Go", "SDK", "It", "s", "specifically", "an", "implementation", "detail", "of", "the", "go", "openapi", "LINK", "openapi", "go", "swagger", "LINK", "swagger", "go", "swagger", "client", "generator", "NUMBER", "The", "Firecracker", "Go", "SDK", "be", "an", "additional", "library", "on", "top", "of", "the", "generate", "client", "NUMBER", "However", "I", "suspect", "that", "other", "Swagger", "client", "generators", "in", "other", "languages", "be", "going", "to", "have", "similar", "issue", "NUMBER", "I", "do", "find", "it", "a", "bit", "weird", "that", "it", "s", "so", "hard", "to", "get", "a", "JSON", "from", "type", "object", "because", "reading", "through", "the", "Swagger", "documentation", "this", "be", "the", "only", "way", "I", "can", "find", "to", "represent", "a", "JSON", "object", "NUMBER", "For", "the", "other", "type", "object", "types", "that", "be", "specified", "in", "the", "spec", "the", "client", "generator", "be", "able", "to", "generate", "real", "types", "and", "deserialize", "the", "JSON", "into", "objects", "of", "those", "types", "NUMBER", "However", "when", "we", "look", "at", "the", "MMDS", "the", "lack", "of", "defined", "field", "for", "the", "type", "object", "return", "value", "means", "that", "the", "client", "generator", "can", "t", "generate", "types", "and", "instead", "we", "get", "an", "interface", "which", "be", "not", "usable", "without", "additional", "work", "NUMBER", "Yes", "we", "can", "handle", "this", "in", "the", "Firecracker", "Go", "SDK", "through", "one", "of", "the", "workarounds", "I", "listed", "above", "NUMBER", "But", "we", "suspect", "that", "other", "clients", "in", "other", "languages", "will", "need", "similar", "workarounds", "and", "we", "d", "prefer", "to", "not", "use", "them", "NUMBER", "If", "the", "MMDS", "be", "really", "holding", "arbitrary", "data", "arbitrary", "bytes", "can", "it", "just", "return", "those", "bytes", "and", "let", "the", "client", "deal", "with", "it", "The", "function", "name", "allocate_virtio_tokens", "be", "misleading", "since", "this", "function", "also", "has", "as", "a", "side", "effect", "NUMBER", "The", "name", "implies", "that", "it", "only", "allocates", "tokens", "whereas", "it", "also", "creates", "a", "device", "handler", "NUMBER", "We", "should", "either", "rename", "this", "function", "or", "refactor", "it", "out", "somehow", "NUMBER", "Issue", "won", "t", "apply", "anymore", "once", "NUMBER", "be", "do", "NUMBER", "LINK", "ci", "aarch", "NUMBER", "build", "NUMBER", "bd", "NUMBER", "e", "NUMBER", "c", "NUMBER", "f", "a", "NUMBER", "f", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "af", "NUMBER", "faf", "NUMBER", "b", "NUMBER", "warning", "function", "be", "never", "use", "default_log_options", "vmm", "src", "vmm_config", "logger", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "fn", "default_log_options", "Value", "note", "warn", "dead_code", "on", "by", "default", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "serban", "NUMBER", "do", "you", "see", "the", "build", "fail", "relating", "to", "my", "update", "ion", "warning", "LINK", "container", "firecracker", "PR", "NUMBER", "console", "Hi", "gliptak", "These", "warning", "error", "be", "relate", "to", "support", "for", "gathering", "dirty", "pages", "from", "kvm", "which", "be", "miss", "on", "aarch", "NUMBER", "We", "be", "planning", "on", "starting", "work", "on", "add", "that", "in", "the", "near", "future", "NUMBER", "See", "NUMBER", "So", "my", "opinion", "be", "that", "it", "isn", "t", "worth", "investing", "effort", "into", "make", "a", "temporary", "fix", "like", "this", "one", "NUMBER", "What", "do", "you", "think", "serban", "NUMBER", "do", "you", "see", "the", "build", "fail", "relating", "to", "my", "update", "ion", "warning", "LINK", "container", "firecracker", "PR", "NUMBER", "console", "You", "do", "not", "need", "to", "worry", "about", "the", "kata", "container", "CI", "fail", "NUMBER", "It", "be", "not", "relate", "to", "this", "particular", "PR", "NUMBER", "I", "already", "let", "them", "know", "about", "this", "issue", "and", "they", "be", "handle", "it", "NUMBER", "dianpopa", "the", "reason", "I", "was", "work", "these", "warnings", "because", "after", "cleaning", "them", "up", "you", "can", "configure", "rustc", "fail", "on", "these", "as", "error", "offering", "tighter", "validation", "NUMBER", "If", "this", "be", "of", "limited", "no", "value", "I", "will", "close", "this", "PR", "dianpopa", "the", "reason", "I", "was", "work", "these", "warnings", "because", "after", "cleaning", "them", "up", "you", "can", "configure", "rustc", "fail", "on", "these", "as", "error", "offering", "tighter", "validation", "NUMBER", "If", "this", "be", "of", "limited", "no", "value", "I", "will", "close", "this", "PR", "Are", "you", "referring", "to", "the", "D", "flag", "that", "turns", "error", "into", "warnings", "I", "agree", "with", "this", "approach", "moreover", "we", "use", "that", "flag", "in", "the", "integration", "test", "doing", "clippy", "validation", "and", "we", "be", "planning", "to", "add", "clippy", "enforcement", "for", "aarch", "NUMBER", "too", "NUMBER", "See", "NUMBER", "What", "I", "be", "saying", "be", "that", "we", "would", "prefer", "to", "do", "them", "sequentially", "NUMBER", "and", "then", "NUMBER", "so", "that", "we", "do", "not", "add", "and", "then", "remove", "the", "same", "code", "NUMBER", "The", "build", "instruction", "requirement", "in", "the", "README", "be", "somewhat", "vague", "and", "maybe", "too", "broad", "NUMBER", "_", "You", "can", "build", "Firecracker", "on", "any", "system", "that", "has", "Docker", "run", "_", "Looks", "like", "one", "needs", "at", "least", "Bash", "or", "a", "UNIX", "Linux", "system", "because", "the", "build", "script", "uses", "Bash", "NUMBER", "I", "was", "able", "to", "build", "Firecracker", "use", "Ubuntu", "as", "host", "NUMBER", "But", "with", "Windows", "NUMBER", "Pro", "and", "Docker", "install", "I", "don", "t", "know", "how", "to", "do", "it", "because", "the", "build", "script", "requires", "Bash", "NUMBER", "Maybe", "we", "can", "make", "it", "build", "from", "Windows", "NUMBER", "with", "Docker", "if", "we", "create", "a", "build", "script", "for", "it", "NUMBER", "I", "tried", "also", "use", "GitBash", "for", "Windows", "but", "get", "an", "error", "message", "there", "too", "NUMBER", "Indeed", "bash", "be", "a", "requirement", "for", "Windows", "too", "but", "it", "s", "not", "enough", "NUMBER", "There", "s", "an", "error", "in", "the", "container", "invocation", "here", "LINK", "microvm", "firecracker", "blob", "NUMBER", "e", "NUMBER", "ff", "NUMBER", "ccc", "NUMBER", "de", "NUMBER", "bdd", "NUMBER", "fc", "NUMBER", "tool", "devtool", "L", "NUMBER", "LINK", "microvm", "firecracker", "blob", "NUMBER", "e", "NUMBER", "ff", "NUMBER", "ccc", "NUMBER", "de", "NUMBER", "bdd", "NUMBER", "fc", "NUMBER", "tool", "devtool", "L", "NUMBER", "dev", "can", "t", "be", "bind", "mounted", "as", "be", "on", "a", "Windows", "host", "because", "it", "s", "not", "there", "by", "default", "NUMBER", "I", "don", "t", "know", "at", "the", "moment", "if", "creating", "a", "placeholder", "would", "help", "more", "deep", "dive", "be", "required", "to", "find", "out", "what", "the", "build", "container", "needs", "from", "dev", "and", "if", "it", "can", "be", "made", "to", "work", "with", "replacements", "on", "Windows", "or", "if", "we", "should", "update", "the", "build", "instructions", "restricting", "them", "to", "unix", "systems", "NUMBER", "features", "and", "ack_features", "function", "from", "the", "VirtioDevice", "trait", "have", "the", "same", "implementation", "in", "net", "block", "and", "soon", "enough", "vsock", "device", "NUMBER", "Provide", "an", "in", "trait", "implementation", "instead", "of", "duplicating", "implementation", "for", "each", "device", "NUMBER", "virtio", "balloon", "can", "be", "useful", "in", "the", "snapshotting", "scenario", "NUMBER", "to", "cut", "down", "on", "snapshot", "size", "by", "reclaiming", "unuse", "guest", "memory", "before", "snapshotting", "NUMBER", "This", "pull", "request", "add", "support", "for", "a", "memory", "balloon", "device", "NUMBER", "Description", "of", "change", "Added", "a", "memory", "balloon", "device", "to", "devices", "src", "virtio", "also", "add", "support", "for", "this", "device", "in", "the", "api_server", "NUMBER", "To", "do", "this", "new", "metrics", "were", "needed", "and", "also", "a", "way", "to", "remove", "memory", "in", "the", "memory", "model", "NUMBER", "TODO", "add", "support", "for", "GET", "s", "on", "the", "balloon", "x", "add", "integration", "test", "NUMBER", "Fixes", "NUMBER", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "One", "observation", "I", "raise", "verbally", "and", "will", "likely", "forget", "about", "unless", "I", "write", "it", "down", "if", "it", "s", "possible", "to", "add", "multiple", "virtio", "balloon", "devices", "then", "the", "RESTful", "resource", "to", "operate", "in", "be", "not", "balloon", "but", "rather", "balloon", "balloon_id", "NUMBER", "So", "if", "this", "be", "a", "feasible", "use", "case", "the", "API", "needs", "a", "bit", "of", "refactoring", "NUMBER", "Issue", "if", "available", "Description", "of", "change", "use", "this", "patch", "we", "will", "put", "all", "the", "virtio", "device", "into", "a", "base", "class", "NUMBER", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "Hi", "muya", "zj", "PR", "NUMBER", "remove", "support", "for", "vhost", "based", "vsock", "devices", "and", "brings", "change", "to", "the", "code", "that", "you", "be", "modifying", "here", "NUMBER", "I", "would", "suggest", "to", "take", "a", "look", "at", "the", "code", "in", "question", "I", "guess", "LINK", "microvm", "firecracker", "pull", "NUMBER", "file", "diff", "NUMBER", "ea", "NUMBER", "c", "NUMBER", "a", "NUMBER", "e", "NUMBER", "de", "NUMBER", "e", "NUMBER", "b", "NUMBER", "R", "NUMBER", "and", "in", "case", "your", "change", "still", "hold", "work", "with", "dhrgit", "to", "integrate", "them", "there", "NUMBER", "Thanks", "Diana", "We", "need", "to", "use", "the", "change", "in", "micro_http", "to", "replace", "hyper", "and", "get", "rid", "of", "its", "dependencies", "NUMBER", "Issue", "if", "available", "NUMBER", "Description", "of", "change", "This", "PR", "add", "a", "vsock", "connection", "state", "machine", "that", "will", "later", "be", "use", "by", "the", "Unix", "Domain", "Sockets", "backend", "NUMBER", "This", "machine", "residing", "under", "devices", "virtio", "vsock", "csm", "implement", "the", "bulk", "of", "the", "vsock", "communication", "protocol", "and", "be", "designed", "to", "work", "not", "necessarily", "with", "a", "backing", "Unix", "socket", "but", "with", "any", "implementor", "of", "Read", "Write", "AsRawFd", "NUMBER", "Note", "this", "PR", "be", "build", "on", "top", "of", "NUMBER", "so", "not", "all", "commit", "in", "this", "branch", "be", "in", "its", "scope", "NUMBER", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "A", "pain", "point", "with", "global", "state", "be", "that", "we", "cannot", "run", "unit", "test", "in", "parallel", "aka", "we", "run", "unit", "test", "with", "RUST_TEST_THREADS", "NUMBER", "which", "also", "add", "problem", "like", "we", "be", "out", "of", "memory", "because", "the", "state", "be", "not", "clean", "also", "check", "NUMBER", "NUMBER", "We", "should", "discuss", "if", "we", "should", "refactor", "Firecracker", "such", "that", "we", "don", "t", "have", "global", "state", "METRICS", "LOGGER", "others", "NUMBER", "This", "would", "also", "help", "in", "creating", "mock", "objects", "in", "test", "NUMBER", "Switch", "to", "use", "vm", "memory", "LINK", "vmm", "vm", "memory", "instead", "of", "the", "memory_model", "Firecracker", "crate", "NUMBER", "The", "next", "steps", "be", "merge", "this", "PR", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "and", "going", "through", "the", "code", "one", "more", "time", "NUMBER", "After", "any", "potential", "change", "be", "handle", "we", "ll", "start", "experimenting", "with", "the", "actual", "integration", "NUMBER", "P", "NUMBER", "S", "NUMBER", "let", "s", "first", "publish", "a", "v", "NUMBER", "of", "vm", "memory", "on", "crates", "NUMBER", "io", "NUMBER", "I", "would", "rather", "not", "consume", "crates", "from", "GitHub", "NUMBER", "To", "publish", "it", "on", "crates", "NUMBER", "io", "there", "might", "be", "some", "other", "things", "that", "need", "to", "be", "address", "NUMBER", "Can", "you", "also", "open", "an", "issue", "on", "vm", "memory", "with", "publish", "to", "crates", "NUMBER", "io", "so", "we", "can", "track", "the", "progress", "there", "Submitted", "LINK", "vmm", "vm", "memory", "issue", "NUMBER", "Copied", "my", "comment", "from", "the", "other", "issue", "for", "visibility", "This", "task", "be", "currently", "blocked", "by", "vm", "memory", "not", "be", "publish", "on", "crates", "NUMBER", "io", "NUMBER", "Check", "the", "repository", "here", "LINK", "vmm", "vm", "memory", "bonzini", "did", "the", "switch", "in", "his", "fork", "LINK", "but", "it", "s", "not", "ready", "for", "merge", "in", "Firecracker", "as", "per", "his", "comment", "LINK", "vmm", "vm", "memory", "pull", "NUMBER", "issuecomment", "NUMBER", "NUMBER", "CC", "firecracker", "microvm", "compute", "capsule", "Here", "be", "my", "strategy", "for", "adopting", "the", "rust", "vmm", "vm", "memory", "crate", "In", "the", "first", "phase", "we", "will", "work", "in", "parallel", "on", "the", "following", "NUMBER", "directions", "NUMBER", "Examining", "the", "rust", "vmm", "vm", "memory", "crate", "NUMBER", "Here", "we", "have", "to", "check", "the", "following", "the", "overall", "architecture", "be", "ok", "the", "crate", "be", "safe", "to", "use", "there", "be", "no", "methods", "that", "can", "generate", "undefined", "behavior", "all", "the", "unsafe", "blocks", "be", "absolutely", "necessary", "all", "the", "unsafe", "methods", "and", "traits", "be", "marked", "as", "unsafe", "We", "will", "submit", "PRs", "to", "rust", "vmm", "vm", "memory", "in", "order", "to", "fix", "problem", "as", "we", "discover", "them", "NUMBER", "Owners", "alexandruag", "serban", "NUMBER", "NUMBER", "Aligning", "firecracker", "memory_model", "namings", "with", "rust", "vmm", "vm", "memory", "without", "change", "the", "functionality", "NUMBER", "We", "will", "change", "the", "GuestAddress", "inner", "value", "type", "from", "usize", "to", "u", "NUMBER", "We", "will", "perform", "roughly", "the", "following", "steps", "for", "each", "of", "the", "memory", "model", "components", "GuestAddress", "DataInit", "BytedValue", "GuestMemory", "Check", "vm", "memory", "naming", "and", "functionality", "in", "detail", "NUMBER", "Submit", "PR", "proposing", "change", "if", "necessary", "NUMBER", "Align", "firecracker", "memory_model", "naming", "to", "rust", "vmm", "vm", "memory", "naming", "NUMBER", "Import", "the", "rust", "vmm", "vm", "memory", "traits", "where", "applicable", "NUMBER", "Add", "unit", "test", "and", "documentation", "where", "necessary", "NUMBER", "Submit", "a", "PR", "to", "rust", "vmm", "vm", "memory", "with", "all", "the", "add", "unit", "test", "and", "documentation", "NUMBER", "It", "s", "true", "that", "direction", "NUMBER", "might", "affect", "the", "rust", "vmm", "vm", "memory", "naming", "but", "I", "don", "t", "expect", "it", "to", "have", "a", "significant", "impact", "here", "NUMBER", "Owners", "serban", "NUMBER", "In", "the", "second", "phase", "we", "will", "have", "to", "do", "the", "following", "test", "firecracker", "with", "vm", "memory", "on", "a", "local", "branch", "NUMBER", "Fix", "any", "problem", "that", "might", "occur", "NUMBER", "contribute", "with", "unit", "test", "and", "documentation", "to", "rust", "vmm", "vm", "memory", "where", "still", "needed", "work", "with", "the", "rust", "vmm", "vm", "memory", "gatekeepers", "in", "order", "to", "publish", "the", "rust", "vmm", "vm", "memory", "to", "crates", "NUMBER", "io", "make", "the", "switch", "to", "rust", "vmm", "vm", "memory", "Owners", "serban", "NUMBER", "Work", "breakdown", "x", "Examine", "the", "rust", "vmm", "vm", "memory", "crate", "LINK", "microvm", "firecracker", "issue", "NUMBER", "x", "GuestAddress", "use", "u", "NUMBER", "instead", "of", "usize", "as", "inner", "type", "LINK", "microvm", "firecracker", "issue", "NUMBER", "x", "memory_model", "rename", "DataInit", "trait", "to", "ByteValued", "LINK", "microvm", "firecracker", "issue", "NUMBER", "x", "GuestMemory", "use", "rust", "vmm", "vm", "memory", "method", "names", "LINK", "microvm", "firecracker", "issue", "NUMBER", "x", "make", "final", "adjustments", "for", "switching", "to", "rust", "vmm", "vm", "memory", "LINK", "microvm", "firecracker", "issue", "NUMBER", "x", "contribute", "with", "unit", "test", "and", "documentation", "to", "rust", "vmm", "vm", "memory", "where", "still", "needed", "LINK", "microvm", "firecracker", "issue", "NUMBER", "x", "publish", "the", "rust", "vmm", "vm", "memory", "to", "crates", "NUMBER", "io", "LINK", "microvm", "firecracker", "issue", "NUMBER", "It", "looks", "like", "KVM_CAP_MANUAL_DIRTY_LOG_PROTECT", "was", "introduce", "in", "the", "Linux", "Kernel", "version", "NUMBER", "In", "Firecracker", "we", "currently", "use", "KVM_GET_DIRTY_LOG", "which", "has", "two", "problem", "as", "describe", "in", "the", "patch", "LINK", "that", "introduces", "manual", "dirty", "log", "it", "can", "report", "false", "positives", "it", "has", "a", "performance", "impact", "For", "kernel", "version", "NUMBER", "we", "should", "use", "KVM_CAP_MANUAL_DIRTY_LOG_PROTECT", "instead", "NUMBER", "From", "my", "understanding", "KVM_GET_DIRTY_LOG", "will", "no", "longer", "reset", "the", "dirty", "bitmap", "with", "this", "cap", "enable", "but", "we", "d", "need", "to", "manually", "call", "the", "newly", "introduce", "KVM_CLEAR_DIRTY_LOG", "NUMBER", "I", "don", "t", "understand", "the", "benefit", "this", "would", "bring", "NUMBER", "We", "d", "need", "a", "new", "ioctl", "to", "solve", "a", "problem", "I", "m", "not", "sure", "we", "have", "Second", "in", "some", "cases", "a", "large", "amount", "of", "time", "can", "pass", "between", "a", "call", "to", "KVM_GET_DIRTY_LOG", "and", "userspace", "actually", "use", "the", "data", "in", "the", "page", "NUMBER", "This", "doesn", "t", "affect", "Firecracker", "we", "only", "retrieve", "the", "dirty", "log", "to", "count", "the", "dirtied", "pages", "and", "don", "t", "care", "about", "the", "contents", "NUMBER", "Also", "we", "d", "need", "to", "check", "how", "a", "Firecracker", "build", "on", "kernel", "NUMBER", "handles", "capabilities", "not", "present", "in", "kernels", "TAG", "Issue", "NUMBER", "Description", "of", "change", "add", "new", "public", "function", "start_vmm_without_api", "to", "vmm", "module", "that", "creates", "and", "starts", "VMs", "based", "on", "pass", "in", "parameters", "add", "firecracker_cmd", "that", "implement", "basic", "functionality", "of", "new", "executable", "that", "accepts", "parameters", "from", "command", "line", "in", "the", "future", "it", "could", "accept", "new", "parameter", "specify", "config", "file", "An", "example", "to", "start", "a", "VM", "use", "new", "executable", "NUMBER", "build", "release", "firecracker_cmd", "kernel", "image", "path", "NUMBER", "hello", "vmlinux", "NUMBER", "bin", "block", "device", "path", "NUMBER", "hello", "rootfs", "NUMBER", "ext", "NUMBER", "kernel", "cmdline", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "Please", "note", "be", "be", "an", "RFC", "and", "it", "be", "miss", "appropriate", "unit", "test", "NUMBER", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "wkozaczuk", "I", "think", "this", "functionality", "should", "be", "part", "of", "the", "same", "Firecracker", "binary", "in", "main", "NUMBER", "rs", "NUMBER", "There", "be", "a", "few", "problem", "with", "having", "firecracker_cmd", "as", "a", "separate", "binary", "Testing", "becomes", "more", "difficult", "because", "you", "ll", "have", "to", "test", "basic", "Firecracker", "functionality", "with", "both", "binaries", "NUMBER", "There", "be", "no", "way", "to", "apply", "actions", "on", "the", "VMM", "after", "it", "was", "start", "like", "for", "example", "BlockDeviceRespan", "NUMBER", "We", "end", "up", "with", "a", "lot", "of", "duplicate", "code", "logger", "initialization", "panic", "hook", "parsing", "argument", "NUMBER", "This", "will", "make", "the", "code", "hard", "to", "maintain", "as", "we", "will", "need", "to", "modify", "these", "things", "in", "two", "places", "NUMBER", "I", "notice", "that", "you", "pass", "the", "individual", "configuration", "like", "number", "of", "cpus", "memory", "size", "and", "others", "as", "command", "line", "argument", "NUMBER", "The", "plan", "was", "to", "have", "a", "configuration", "file", "instead", "NUMBER", "The", "main", "reason", "why", "a", "configuration", "file", "be", "more", "appropriate", "be", "that", "it", "add", "flexibility", "and", "you", "don", "t", "end", "up", "with", "an", "ever", "increasing", "number", "of", "command", "line", "parameters", "thus", "make", "it", "more", "usable", "and", "maintainable", "NUMBER", "By", "flexibility", "here", "I", "mean", "that", "you", "can", "start", "prototyping", "with", "one", "configurable", "component", "say", "for", "example", "machine_config", "and", "then", "add", "more", "and", "more", "components", "configurable", "through", "the", "file", "NUMBER", "You", "can", "also", "take", "a", "look", "at", "this", "PR", "that", "start", "on", "the", "path", "with", "the", "configuration", "file", "LINK", "microvm", "firecracker", "pull", "NUMBER", "Some", "additional", "things", "to", "think", "about", "be", "already", "in", "the", "conversation", "there", "NUMBER", "One", "thing", "though", "I", "don", "t", "think", "you", "need", "the", "configuration", "through", "the", "API", "but", "both", "firecracker", "and", "jailer", "should", "be", "able", "to", "take", "the", "configuration", "file", "as", "a", "parameter", "NUMBER", "andreeaflorescu", "I", "appreciate", "your", "points", "and", "I", "think", "they", "be", "very", "valid", "NUMBER", "But", "before", "I", "go", "into", "arguing", "my", "case", "let", "me", "list", "NUMBER", "scenarios", "I", "think", "users", "would", "be", "able", "to", "use", "firecracker", "in", "NUMBER", "Start", "firecracker", "configure", "it", "and", "start", "the", "VM", "and", "at", "some", "point", "stop", "it", "use", "REST", "API", "endpoint", "NUMBER", "NUMBER", "Start", "firecracker", "and", "implicitly", "the", "VM", "with", "some", "initial", "configuration", "_without", "use", "REST", "API_", "and", "then", "at", "some", "point", "change", "some", "configuration", "for", "example", "rate", "limiter", "and", "eventually", "stop", "it", "use", "REST", "API", "NUMBER", "NUMBER", "Start", "firecracracker", "and", "implicitly", "the", "VM", "with", "configuration", "let", "it", "run", "and", "eventually", "stop", "itself", "and", "firecracker", "NUMBER", "No", "REST", "endpoint", "be", "use", "NUMBER", "Right", "now", "only", "NUMBER", "scenario", "be", "support", "by", "firecracker", "executable", "NUMBER", "The", "NUMBER", "scenario", "be", "very", "desirable", "from", "my", "perspective", "as", "it", "allows", "for", "fastest", "startup", "least", "overhead", "and", "remove", "one", "more", "entry", "point", "REST", "API", "from", "security", "perspective", "NUMBER", "Now", "we", "can", "definitely", "have", "single", "executable", "handle", "all", "NUMBER", "scenarios", "and", "it", "would", "have", "benefits", "as", "you", "point", "out", "but", "would", "also", "have", "following", "drawbacks", "more", "complex", "and", "more", "combinations", "to", "unit", "test", "inherently", "less", "secure", "from", "NUMBER", "scenario", "perspective", "as", "REST", "API", "code", "be", "embedded", "in", "it", "and", "available", "probably", "start", "the", "VM", "slower", "bigger", "executable", "the", "firecracker_cmd", "executable", "be", "NUMBER", "MB", "only", "after", "stripping", "Now", "regardless", "if", "we", "have", "one", "or", "two", "executables", "I", "think", "users", "should", "be", "able", "to", "pass", "VM", "configuration", "in", "following", "ways", "REST", "API", "currently", "support", "there", "should", "be", "ability", "to", "turn", "REST", "API", "off", "if", "one", "executable", "through", "a", "file", "through", "command", "line", "parameters", "Now", "without", "option", "to", "pass", "configuration", "as", "command", "line", "parameter", "users", "would", "need", "to", "construct", "a", "file", "for", "every", "combination", "which", "sometimes", "would", "be", "tedious", "and", "impractical", "imagine", "starting", "NUMBER", "VMs", "where", "each", "has", "different", "command", "line", "TAP", "device", "id", "etc", "NUMBER", "file", "I", "think", "ideally", "we", "should", "allow", "specify", "configuration", "file", "for", "common", "values", "and", "command", "line", "parameters", "for", "only", "certain", "things", "that", "typically", "be", "unique", "per", "VM", "command", "line", "TAP", "id", "block", "device", "file", "path", "and", "override", "the", "values", "from", "file", "NUMBER", "What", "do", "you", "think", "Lastly", "in", "the", "comments", "I", "add", "to", "NUMBER", "I", "be", "report", "that", "I", "was", "able", "start", "firecracker", "and", "a", "VM", "run", "it", "and", "stop", "it", "in", "NUMBER", "NUMBER", "ms", "NUMBER", "Per", "strace", "it", "actually", "takes", "only", "NUMBER", "ms", "from", "the", "start", "of", "the", "firecracker", "process", "until", "exit_group", "system", "call", "NUMBER", "But", "then", "it", "takes", "another", "NUMBER", "NUMBER", "ms", "until", "process", "exits", "NUMBER", "Would", "you", "have", "any", "idea", "why", "I", "be", "speculating", "that", "possibly", "VCPU", "thread", "takes", "long", "time", "to", "terminate", "but", "why", "Is", "something", "wrong", "in", "this", "code", "LINK", "_rfc", "vmm", "src", "lib", "NUMBER", "rs", "L", "NUMBER", "L", "NUMBER", "Thanks", "wkozaczuk", "it", "looks", "like", "the", "time", "of", "starting", "Firecracker", "without", "lots", "of", "API", "commands", "has", "come", "NUMBER", "Here", "s", "a", "few", "more", "data", "points", "in", "this", "discussion", "in", "addition", "to", "the", "argument", "already", "made", "Working", "backwards", "from", "all", "the", "FaaS", "Fargate", "Kata", "Containers", "Kubernetes", "Lambda", "use", "cases", "I", "think", "that", "we", "want", "to", "optimize", "for", "situations", "where", "there", "be", "many", "microVMs", "on", "a", "host", "with", "more", "be", "killed", "and", "start", "all", "the", "time", "but", "with", "an", "average", "microVM", "lifetime", "measured", "at", "least", "in", "minutes", "not", "milliseconds", "NUMBER", "And", "there", "may", "be", "more", "hosts", "like", "this", "in", "a", "larger", "system", "NUMBER", "Most", "systems", "behaving", "like", "that", "will", "likely", "prefer", "to", "keep", "all", "configuration", "in", "config", "file", "rather", "than", "have", "some", "of", "it", "present", "in", "start", "up", "script", "command", "line", "parameters", "NUMBER", "For", "development", "prototyping", "proof", "of", "concepts", "command", "line", "params", "be", "great", "but", "I", "think", "that", "can", "be", "handle", "via", "firectl", "e", "NUMBER", "g", "NUMBER", "firectl", "config", "file", "my_config", "extra", "param", "param", "NUMBER", "Firecracker", "s", "current", "API", "implementation", "uses", "hyper", "which", "be", "great", "but", "may", "be", "much", "bigger", "than", "an", "API", "endpoint", "needs", "to", "be", "for", "something", "that", "gets", "NUMBER", "NUMBER", "request", "over", "its", "entire", "lifetime", "NUMBER", "So", "yes", "it", "may", "add", "extra", "cost", "in", "both", "memory", "and", "time", "but", "the", "first", "optimization", "there", "might", "be", "to", "have", "a", "light", "API", "server", "rather", "than", "none", "at", "all", "since", "there", "s", "a", "clear", "need", "for", "post", "start", "commands", "NUMBER", "We", "trust", "the", "host", "in", "most", "cases", "it", "will", "have", "access", "to", "memory", "anyway", "and", "the", "API", "be", "endpoint", "be", "only", "expose", "there", "NUMBER", "Indeed", "the", "extra", "code", "be", "build", "in", "the", "binary", "which", "add", "_some_", "additional", "risk", "but", "we", "don", "t", "consider", "the", "API", "endpoint", "its", "self", "an", "attack", "surface", "NUMBER", "Finally", "wkozaczuk", "as", "you", "mention", "there", "be", "one", "situation", "under", "which", "a", "separate", "binary", "with", "no", "API", "makes", "sense", "if", "your", "VM", "be", "supposed", "to", "live", "and", "die", "within", "a", "few", "milliseconds", "and", "you", "start", "a", "new", "one", "for", "whatever", "you", "want", "to", "compute", "NUMBER", "That", "s", "an", "interesting", "scenario", "but", "I", "think", "we", "should", "handle", "that", "as", "a", "separate", "feature", "request", "since", "it", "may", "imply", "other", "things", "and", "not", "as", "an", "improvement", "to", "the", "exist", "start", "up", "control", "plane", "interface", "NUMBER", "wkozaczuk", "When", "we", "first", "start", "Firecracker", "we", "had", "both", "an", "API", "server", "and", "the", "command", "line", "argument", "NUMBER", "We", "had", "a", "rather", "long", "discussion", "about", "this", "and", "we", "decided", "to", "not", "keep", "the", "command", "line", "argument", "NUMBER", "Unfortunately", "it", "doesn", "t", "look", "like", "we", "have", "any", "write", "conclusions", "but", "from", "what", "I", "remember", "it", "was", "a", "burden", "to", "maintain", "them", "both", "and", "we", "had", "some", "bug", "where", "configuring", "something", "through", "the", "API", "worked", "but", "the", "same", "thing", "didn", "t", "work", "from", "the", "command", "line", "NUMBER", "Some", "issue", "and", "PRs", "that", "be", "relevant", "to", "this", "discussions", "PR", "that", "remove", "the", "command", "line", "LINK", "microvm", "firecracker", "pull", "NUMBER", "issue", "about", "remove", "the", "non", "api", "interface", "LINK", "microvm", "firecracker", "issue", "NUMBER", "LINK", "microvm", "firecracker", "issue", "NUMBER", "LINK", "microvm", "firecracker", "issue", "NUMBER", "In", "any", "case", "we", "can", "revisit", "that", "decision", "but", "we", "should", "get", "more", "people", "involved", "in", "the", "conversation", "NUMBER", "Pinging", "firecracker", "microvm", "compute", "capsule", "NUMBER", "My", "personal", "preference", "be", "still", "to", "have", "one", "Firecracker", "binary", "with", "configurable", "options", "NUMBER", "You", "mention", "one", "usecase", "where", "you", "don", "t", "want", "the", "API", "at", "all", "NUMBER", "In", "this", "case", "you", "can", "also", "just", "add", "a", "command", "line", "parameter", "no", "api", "and", "not", "initialize", "the", "API", "server", "NUMBER", "You", "would", "get", "the", "same", "outcome", "as", "with", "the", "separate", "binary", "approach", "NUMBER", "This", "would", "not", "require", "change", "to", "our", "integration", "test", "because", "you", "be", "build", "the", "same", "firecracker", "code", "and", "test", "the", "same", "binary", "firecracker", "NUMBER", "But", "when", "run", "integration", "test", "you", "might", "want", "to", "test", "it", "with", "and", "without", "the", "API", "with", "and", "without", "an", "initial", "configuration", "file", "NUMBER", "We", "will", "need", "to", "add", "new", "integration", "test", "only", "for", "these", "scenarios", "as", "oppose", "to", "have", "integration", "test", "for", "a", "new", "binary", "which", "I", "would", "expect", "to", "add", "more", "overhead", "as", "you", "have", "to", "test", "all", "configurations", "twice", "once", "with", "api", "and", "once", "without", "NUMBER", "I", "ll", "provide", "some", "more", "input", "on", "this", "by", "replying", "to", "your", "comment", "inline", "soonish", "NUMBER", "Hey", "wkozaczuk", "I", "forgot", "to", "send", "my", "inline", "replies", "NUMBER", "Here", "they", "be", "Now", "we", "can", "definitely", "have", "single", "executable", "handle", "all", "NUMBER", "scenarios", "and", "it", "would", "have", "benefits", "as", "you", "point", "out", "but", "would", "also", "have", "following", "drawbacks", "more", "complex", "and", "more", "combinations", "to", "unit", "test", "Why", "do", "you", "say", "it", "be", "more", "complex", "to", "test", "and", "it", "has", "more", "combinations", "For", "me", "it", "sounds", "like", "it", "should", "be", "exactly", "the", "same", "as", "for", "a", "separated", "binary", "NUMBER", "Moreover", "with", "a", "separate", "binary", "you", "need", "to", "run", "most", "of", "the", "integration", "test", "we", "currently", "have", "again", "NUMBER", "Another", "thing", "to", "keep", "in", "mind", "be", "that", "most", "of", "the", "hard", "core", "functionality", "be", "test", "with", "integration", "test", "rather", "than", "unit", "test", "NUMBER", "inherently", "less", "secure", "from", "NUMBER", "scenario", "perspective", "as", "REST", "API", "code", "be", "embedded", "in", "it", "and", "available", "This", "doesn", "t", "necessarily", "need", "to", "happen", "NUMBER", "You", "can", "compile", "out", "the", "REST", "API", "by", "use", "features", "NUMBER", "For", "example", "we", "can", "have", "http", "api", "as", "a", "default", "Firecracker", "feature", "and", "if", "you", "do", "not", "want", "to", "run", "with", "the", "API", "then", "you", "can", "build", "firecracker", "use", "cargo", "build", "release", "no", "default", "features", "NUMBER", "probably", "start", "the", "VM", "slower", "If", "you", "compile", "out", "the", "API", "server", "the", "boot", "time", "should", "be", "the", "same", "as", "when", "having", "a", "separate", "binary", "NUMBER", "Am", "I", "miss", "something", "else", "here", "bigger", "executable", "the", "firecracker_cmd", "executable", "be", "NUMBER", "MB", "only", "after", "stripping", "If", "we", "use", "http_api", "as", "a", "feature", "this", "shouldn", "t", "be", "a", "problem", "any", "more", "NUMBER", "We", "also", "want", "to", "work", "on", "optimizing", "the", "API", "server", "itself", "in", "the", "future", "by", "replacing", "hyper", "and", "tokio", "with", "an", "in", "house", "developed", "API", "NUMBER", "This", "should", "also", "help", "in", "reducing", "the", "binary", "size", "even", "when", "use", "the", "API", "NUMBER", "Now", "regardless", "if", "we", "have", "one", "or", "two", "executables", "I", "think", "users", "should", "be", "able", "to", "pass", "VM", "configuration", "in", "following", "ways", "REST", "API", "currently", "support", "there", "should", "be", "ability", "to", "turn", "REST", "API", "off", "if", "one", "executable", "through", "a", "file", "through", "command", "line", "parameters", "I", "honestly", "dislike", "the", "command", "line", "parameters", "as", "it", "was", "so", "tedious", "to", "maintain", "in", "the", "past", "NUMBER", "But", "again", "we", "can", "get", "more", "input", "from", "other", "people", "in", "the", "team", "NUMBER", "Now", "without", "option", "to", "pass", "configuration", "as", "command", "line", "parameter", "users", "would", "need", "to", "construct", "a", "file", "for", "every", "combination", "which", "sometimes", "would", "be", "tedious", "and", "impractical", "imagine", "starting", "NUMBER", "VMs", "where", "each", "has", "different", "command", "line", "TAP", "device", "id", "etc", "NUMBER", "file", "I", "think", "ideally", "we", "should", "allow", "specify", "configuration", "file", "for", "common", "values", "and", "command", "line", "parameters", "for", "only", "certain", "things", "that", "typically", "be", "unique", "per", "VM", "command", "line", "TAP", "id", "block", "device", "file", "path", "and", "override", "the", "values", "from", "file", "NUMBER", "What", "do", "you", "mean", "by", "a", "file", "for", "every", "combination", "The", "way", "I", "was", "seeing", "this", "be", "implement", "be", "by", "passing", "a", "json", "file", "that", "be", "serialized", "into", "vmm_config", "structures", "NUMBER", "There", "be", "a", "few", "structures", "that", "be", "mandatory", "like", "the", "kernel", "config", "and", "the", "root", "file", "system", "NUMBER", "Everything", "else", "be", "optional", "and", "the", "order", "of", "these", "should", "not", "matter", "NUMBER", "The", "start_microvm", "function", "will", "be", "responsible", "for", "stopping", "the", "execution", "when", "one", "of", "the", "required", "configurations", "be", "not", "present", "NUMBER", "Lastly", "in", "the", "comments", "I", "add", "to", "NUMBER", "I", "be", "report", "that", "I", "was", "able", "start", "firecracker", "and", "a", "VM", "run", "it", "and", "stop", "it", "in", "NUMBER", "NUMBER", "ms", "NUMBER", "Per", "strace", "it", "actually", "takes", "only", "NUMBER", "ms", "from", "the", "start", "of", "the", "firecracker", "process", "until", "exit_group", "system", "call", "NUMBER", "But", "then", "it", "takes", "another", "NUMBER", "NUMBER", "ms", "until", "process", "exits", "NUMBER", "Would", "you", "have", "any", "idea", "why", "I", "be", "speculating", "that", "possibly", "VCPU", "thread", "takes", "long", "time", "to", "terminate", "but", "why", "Is", "something", "wrong", "in", "this", "code", "LINK", "_rfc", "vmm", "src", "lib", "NUMBER", "rs", "L", "NUMBER", "L", "NUMBER", "I", "notice", "that", "blitz", "responded", "for", "this", "one", "on", "the", "issue", "NUMBER", "Did", "the", "suggestions", "he", "was", "mentioning", "work", "Lastly", "I", "would", "like", "to", "add", "that", "this", "be", "a", "rather", "complex", "issue", "NUMBER", "If", "you", "think", "it", "makes", "sense", "I", "would", "propose", "to", "setup", "a", "call", "to", "discuss", "about", "the", "design", "and", "the", "next", "steps", "for", "this", "issue", "NUMBER", "What", "do", "you", "say", "raduweiss", "andreeaflorescu", "Thanks", "for", "your", "detailed", "responses", "NUMBER", "A", "lot", "of", "good", "points", "NUMBER", "I", "agree", "that", "it", "might", "be", "best", "to", "setup", "a", "call", "to", "discuss", "all", "this", "NUMBER", "I", "be", "fairly", "open", "and", "available", "this", "and", "next", "week", "NUMBER", "I", "live", "in", "US", "East", "time", "zone", "NUMBER", "Regarding", "blitz", "es", "advice", "indeed", "it", "has", "helped", "somewhat", "I", "managed", "to", "shave", "off", "NUMBER", "ms", "NUMBER", "I", "will", "be", "update", "the", "original", "issue", "comments", "with", "more", "details", "soon", "ish", "NUMBER", "wkozaczuk", "should", "we", "setup", "a", "call", "for", "the", "end", "of", "this", "week", "to", "discuss", "about", "the", "design", "What", "about", "this", "Thursday", "or", "Friday", "between", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "EST", "On", "Tue", "Jun", "NUMBER", "NUMBER", "at", "NUMBER", "NUMBER", "AM", "Andreea", "Florescu", "TAG", "write", "wkozaczuk", "TAG", "should", "we", "setup", "a", "call", "for", "the", "end", "of", "this", "week", "to", "discuss", "about", "the", "design", "You", "be", "receiving", "this", "because", "you", "were", "mention", "NUMBER", "Reply", "to", "this", "email", "directly", "view", "it", "on", "GitHub", "TAG", "or", "mute", "the", "thread", "TAG", "NUMBER", "Friday", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "AM", "EST", "sounds", "good", "NUMBER", "Can", "you", "send", "me", "an", "email", "fandree", "amazon", "NUMBER", "com", "so", "I", "can", "setup", "the", "meeting", "wkozaczuk", "any", "update", "on", "this", "PR", "andreeaflorescu", "Based", "on", "the", "email", "you", "sent", "after", "the", "design", "meeting", "the", "first", "action", "was", "supposed", "to", "be", "write", "up", "a", "detailed", "design", "on", "this", "issue", "from", "your", "side", "NUMBER", "I", "still", "owe", "open", "new", "issue", "regard", "the", "shutdown", "overhead", "NUMBER", "The", "PR", "itself", "can", "be", "close", "at", "this", "moment", "as", "it", "do", "apply", "given", "design", "be", "in", "flux", "NUMBER", "wkozaczuk", "I", "took", "a", "look", "at", "the", "comments", "on", "this", "PR", "and", "it", "looks", "like", "most", "of", "the", "things", "we", "discussed", "in", "the", "meeting", "be", "in", "this", "PR", "comments", "already", "NUMBER", "I", "will", "take", "all", "points", "and", "write", "them", "in", "the", "issue", "as", "well", "NUMBER", "Thanks", "Issue", "NUMBER", "Description", "of", "change", "Removed", "experimental", "vhost", "based", "vsock", "support", "Added", "a", "vhost", "less", "vsock", "device", "Added", "a", "generic", "vsock", "backend", "trait", "Implemented", "the", "vsock", "packet", "assembly", "NUMBER", "Note", "the", "vsock", "series", "be", "now", "split", "across", "this", "PR", "together", "with", "NUMBER", "and", "NUMBER", "for", "a", "leaner", "review", "process", "NUMBER", "Considering", "that", "the", "experimental", "vhost", "based", "vsock", "functionality", "gets", "remove", "here", "the", "entire", "series", "should", "get", "merge", "as", "closely", "as", "possible", "NUMBER", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "As", "of", "NUMBER", "API", "request", "be", "no", "longer", "timed", "in", "vsock", "enable", "Firecracker", "build", "the", "test", "itself", "will", "time", "out", "if", "an", "API", "takes", "more", "than", "the", "default", "timeout", "value", "though", "NUMBER", "This", "can", "make", "it", "harder", "to", "detect", "regressions", "with", "vsock", "NUMBER", "Once", "vsock", "be", "stable", "API", "request", "should", "be", "timed", "again", "NUMBER", "I", "m", "find", "an", "issue", "after", "use", "command", "call", "API", "SendCtrAltDel", "on", "server", "NUMBER", "Currently", "instance", "use", "Linux", "version", "NUMBER", "Linux", "firework", "vm", "NUMBER", "NUMBER", "NUMBER", "amd", "NUMBER", "NUMBER", "SMP", "Debian", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "_", "NUMBER", "GNU", "Linux", "Linux", "run", "under", "the", "VMWare", "ESXi", "version", "NUMBER", "This", "be", "log", "from", "console", "NUMBER", "sudo", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "H", "accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "action_type", "SendCtrlAltDel", "HTTP", "NUMBER", "NUMBER", "No", "Content", "Date", "Tue", "NUMBER", "May", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "GMT", "Console", "prints", "result", "as", "below", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "WARN", "devices", "src", "legacy", "i", "NUMBER", "rs", "NUMBER", "Failed", "to", "trigger", "i", "NUMBER", "kbd", "interrupt", "disabled", "by", "guest", "OS", "rchatsiri", "Do", "you", "have", "i", "NUMBER", "and", "atkbd", "support", "enable", "in", "the", "guest", "kernel", "We", "have", "this", "doc", "LINK", "microvm", "firecracker", "blob", "master", "docs", "api_requests", "actions", "NUMBER", "md", "sendctrlaltdel", "describing", "the", "requirements", "for", "use", "SendCtrlAltDel", "NUMBER", "I", "m", "not", "find", "destination", "link", "from", "you", "reference", "NUMBER", "Grub", "change", "configuration", "by", "use", "i", "NUMBER", "and", "atkbd", "parameter", "add", "to", "etc", "default", "grub", "NUMBER", "It", "didn", "t", "help", "to", "receive", "shutdown", "signal", "from", "firecracker", "api", "caller", "NUMBER", "GRUB_CMDLINE_LINUX_DEFAULT", "i", "NUMBER", "reset", "atkbd", "NUMBER", "reset", "i", "NUMBER", "nomux", "quiet", "The", "message", "show", "an", "error", "when", "we", "send", "action", "type", "be", "SendCtrlAltDel", "NUMBER", "localhost", "login", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "WARN", "devices", "src", "legacy", "i", "NUMBER", "rs", "NUMBER", "Failed", "to", "trigger", "i", "NUMBER", "kbd", "interrupt", "disabled", "by", "guest", "OS", "Result", "of", "device", "message", "which", "command", "line", "filter", "type", "name", "i", "NUMBER", "sudo", "dmesg", "grep", "i", "NUMBER", "NUMBER", "i", "NUMBER", "PNP", "PS", "NUMBER", "Controller", "PNP", "NUMBER", "KBC", "PNP", "NUMBER", "f", "NUMBER", "MOUS", "at", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "irq", "NUMBER", "NUMBER", "NUMBER", "serio", "i", "NUMBER", "KBD", "port", "at", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "irq", "NUMBER", "NUMBER", "serio", "i", "NUMBER", "AUX", "port", "at", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "irq", "NUMBER", "NUMBER", "input", "AT", "Translated", "Set", "NUMBER", "keyboard", "as", "devices", "platform", "i", "NUMBER", "serio", "NUMBER", "input", "input", "NUMBER", "NUMBER", "input", "VirtualPS", "NUMBER", "VMware", "VMMouse", "as", "devices", "platform", "i", "NUMBER", "serio", "NUMBER", "input", "input", "NUMBER", "NUMBER", "input", "VirtualPS", "NUMBER", "VMware", "VMMouse", "as", "devices", "platform", "i", "NUMBER", "serio", "NUMBER", "input", "input", "NUMBER", "rchatsiri", "Apologies", "this", "be", "the", "API", "doc", "LINK", "microvm", "firecracker", "blob", "master", "docs", "api_requests", "actions", "NUMBER", "md", "sendctrlaltdel", "NUMBER", "As", "per", "that", "doc", "please", "try", "to", "add", "this", "to", "the", "guest", "kernel", "command", "line", "i", "NUMBER", "noaux", "i", "NUMBER", "nomux", "i", "NUMBER", "nopnp", "i", "NUMBER", "dumbkbd", "rchatsiri", "I", "use", "this", "command", "it", "works", "in", "my", "system", "NUMBER", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "source", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "kernel_image_path", "NUMBER", "vmlinux", "boot_args", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "i", "NUMBER", "noaux", "i", "NUMBER", "nomux", "i", "NUMBER", "nopnp", "i", "NUMBER", "dumbkbd", "Closing", "for", "now", "since", "we", "ve", "not", "heard", "back", "from", "rchatsiri", "NUMBER", "Feel", "free", "to", "reopen", "if", "need", "be", "NUMBER", "This", "be", "not", "work", "I", "be", "having", "the", "same", "issue", "even", "after", "add", "the", "command", "lines", "NUMBER", "in", "my", "guest", "OS", "I", "see", "that", "it", "was", "add", "successfully", "localhost", "cat", "proc", "cmdline", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "i", "NUMBER", "noaux", "i", "NUMBER", "nomux", "i", "NUMBER", "nopnp", "i", "NUMBER", "dumbkbd", "root", "dev", "vda", "rw", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "it", "worth", "maybe", "to", "note", "that", "while", "booting", "the", "kernel", "and", "rootfs", "I", "downloaded", "from", "LINK", "vmlinux", "NUMBER", "bin", "hello", "rootfs", "NUMBER", "ext", "NUMBER", "I", "see", "these", "modprobe", "failures", "as", "well", "modprobe", "can", "t", "change", "directory", "to", "lib", "modules", "No", "such", "file", "or", "directory", "modprobe", "can", "t", "change", "directory", "to", "lib", "modules", "No", "such", "file", "or", "directory", "I", "use", "the", "kernel", "provide", "by", "you", "in", "the", "comment", "NUMBER", "still", "didn", "t", "work", "NUMBER", "I", "will", "try", "build", "my", "own", "kernel", "with", "these", "options", "and", "will", "let", "you", "know", "what", "happens", "NUMBER", "I", "think", "the", "image", "xenial", "NUMBER", "rootfs", "NUMBER", "ext", "NUMBER", "provide", "in", "readme", "LINK", "microvm", "firecracker", "blob", "master", "docs", "get", "start", "NUMBER", "md", "run", "the", "integration", "test", "suite", "itself", "be", "miss", "the", "modules", "NUMBER", "new", "Build", "of", "kernel", "with", "required", "drivers", "still", "have", "the", "same", "issue", "NUMBER", "Note", "that", "lsmod", "list", "no", "drivers", "loaded", "at", "all", "localhost", "lsmod", "Module", "Size", "Used", "by", "Not", "tainted", "when", "issue", "the", "halt", "action", "I", "still", "see", "this", "localhost", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "WARN", "devices", "src", "legacy", "i", "NUMBER", "rs", "NUMBER", "Failed", "to", "trigger", "i", "NUMBER", "kbd", "interrupt", "disabled", "by", "guest", "OS", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "WARN", "devices", "src", "legacy", "i", "NUMBER", "rs", "NUMBER", "Failed", "to", "trigger", "i", "NUMBER", "kbd", "interrupt", "disabled", "by", "guest", "OS", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "WARN", "devices", "src", "legacy", "i", "NUMBER", "rs", "NUMBER", "Failed", "to", "trigger", "i", "NUMBER", "kbd", "interrupt", "disabled", "by", "guest", "OS", "your", "Kernel", "shows", "localhost", "dmesg", "egrep", "i", "i", "NUMBER", "kbd", "NUMBER", "Command", "line", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "i", "NUMBER", "noaux", "i", "NUMBER", "nomux", "i", "NUMBER", "reset", "i", "NUMBER", "nopnp", "i", "NUMBER", "dumbkbd", "root", "dev", "vda", "rw", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "Kernel", "command", "line", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "i", "NUMBER", "noaux", "i", "NUMBER", "nomux", "i", "NUMBER", "reset", "i", "NUMBER", "nopnp", "i", "NUMBER", "dumbkbd", "root", "dev", "vda", "rw", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "i", "NUMBER", "i", "NUMBER", "controller", "selftest", "timeout", "mhhajeer", "Can", "you", "please", "provide", "the", "steps", "to", "reproduce", "this", "behaviour", "I", "NUMBER", "e", "NUMBER", "Firecracker", "argument", "API", "calls", "kernel", "binary", "rootfs", "image", "etc", "NUMBER", "I", "haven", "t", "be", "able", "to", "hit", "this", "issue", "on", "my", "own", "NUMBER", "I", "followed", "the", "wiki", "link", "on", "git", "for", "get", "start", "NUMBER", "so", "I", "use", "these", "commands", "NUMBER", "firecracker", "api", "sock", "tmp", "firecracker", "NUMBER", "socket", "then", "cloned", "the", "kernel", "and", "root", "fs", "from", "you", "and", "I", "also", "tried", "those", "commands", "below", "NUMBER", "arch", "uname", "m", "dest_kernel", "hello", "vmlinux", "NUMBER", "bin", "dest_rootfs", "hello", "rootfs", "NUMBER", "ext", "NUMBER", "image_bucket_url", "LINK", "if", "arch", "x", "NUMBER", "_", "NUMBER", "then", "kernel", "image_bucket_url", "hello", "kernel", "hello", "vmlinux", "NUMBER", "bin", "rootfs", "image_bucket_url", "hello", "fsfiles", "hello", "rootfs", "NUMBER", "ext", "NUMBER", "elif", "arch", "aarch", "NUMBER", "then", "kernel", "image_bucket_url", "aarch", "NUMBER", "ubuntu_with_ssh", "kernel", "vmlinux", "NUMBER", "bin", "rootfs", "image_bucket_url", "aarch", "NUMBER", "ubuntu_with_ssh", "fsfiles", "xenial", "NUMBER", "rootfs", "NUMBER", "ext", "NUMBER", "else", "echo", "Cannot", "run", "firecracker", "on", "arch", "architecture", "exit", "NUMBER", "fi", "echo", "Downloading", "kernel", "NUMBER", "curl", "fsSL", "o", "dest_kernel", "kernel", "echo", "Downloading", "rootfs", "NUMBER", "curl", "fsSL", "o", "dest_rootfs", "rootfs", "echo", "Saved", "kernel", "file", "to", "dest_kernel", "and", "root", "block", "device", "to", "dest_rootfs", "NUMBER", "then", "I", "Set", "the", "kernel", "and", "rootfs", "NUMBER", "note", "that", "with", "default", "param", "and", "with", "the", "params", "you", "mention", "both", "gave", "the", "same", "results", "kernel", "params", "arch", "uname", "m", "kernel_path", "hello", "vmlinux", "NUMBER", "bin", "if", "arch", "x", "NUMBER", "_", "NUMBER", "then", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "source", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "kernel_image_path", "kernel_path", "boot_args", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "elif", "arch", "aarch", "NUMBER", "then", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "source", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "kernel_image_path", "kernel_path", "boot_args", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "i", "NUMBER", "noaux", "i", "NUMBER", "nomux", "i", "NUMBER", "reset", "i", "NUMBER", "nopnp", "i", "NUMBER", "dumbkbd", "else", "echo", "Cannot", "run", "firecracker", "on", "arch", "architecture", "exit", "NUMBER", "fi", "rootfs_path", "hello", "rootfs", "NUMBER", "ext", "NUMBER", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "drive_id", "rootfs", "path_on_host", "rootfs_path", "is_root_device", "true", "is_read_only", "false", "then", "I", "start", "the", "VM", "curl", "unix", "socket", "tmp", "firecracker", "NUMBER", "socket", "i", "X", "PUT", "LINK", "H", "Accept", "application", "json", "H", "Content", "Type", "application", "json", "d", "action_type", "InstanceStart", "mhhajeer", "If", "I", "understand", "this", "correctly", "you", "be", "still", "use", "the", "hello", "vmlinux", "NUMBER", "bin", "kernel", "which", "as", "no", "i", "NUMBER", "atkbd", "support", "NUMBER", "I", "can", "replicate", "the", "problem", "with", "that", "kenel", "which", "be", "to", "be", "expected", "NUMBER", "The", "kernel", "I", "was", "suggesting", "be", "the", "one", "we", "use", "for", "test", "SendCtrlAltDel", "and", "which", "has", "i", "NUMBER", "and", "atkbd", "compiled", "in", "NUMBER", "This", "one", "LINK", "_", "NUMBER", "minimal_with_atkbd", "kernel", "vmlinux", "NUMBER", "bin", "NUMBER", "dhrgit", "I", "did", "in", "one", "experiment", "NUMBER", "however", "this", "be", "not", "the", "only", "one", "I", "tried", "NUMBER", "hello", "vmlinux", "NUMBER", "bin", "NUMBER", "LINK", "_", "NUMBER", "minimal_with_atkbd", "kernel", "vmlinux", "NUMBER", "bin", "NUMBER", "compiled", "my", "own", "with", "CONFIG_SERIO_I", "NUMBER", "and", "CONFIG_KEYBOARD_ATKBD", "NUMBER", "all", "three", "experiments", "resulted", "in", "same", "outcomes", "NUMBER", "your", "Kernel", "shows", "exp", "NUMBER", "showed", "localhost", "dmesg", "egrep", "i", "i", "NUMBER", "kbd", "NUMBER", "Command", "line", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "i", "NUMBER", "noaux", "i", "NUMBER", "nomux", "i", "NUMBER", "reset", "i", "NUMBER", "nopnp", "i", "NUMBER", "dumbkbd", "root", "dev", "vda", "rw", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "Kernel", "command", "line", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "i", "NUMBER", "noaux", "i", "NUMBER", "nomux", "i", "NUMBER", "reset", "i", "NUMBER", "nopnp", "i", "NUMBER", "dumbkbd", "root", "dev", "vda", "rw", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "i", "NUMBER", "i", "NUMBER", "controller", "selftest", "timeout", "mhhajeer", "Unfortunately", "I", "still", "can", "t", "reproduce", "the", "problem", "NUMBER", "Can", "you", "please", "try", "run", "our", "SendCtrlAltDel", "integration", "test", "on", "your", "machine", "and", "let", "me", "know", "if", "it", "pass", "I", "NUMBER", "e", "NUMBER", "with", "Docker", "and", "git", "install", "bash", "git", "clone", "LINK", "microvm", "firecracker", "NUMBER", "git", "firecracker", "tool", "devtool", "test", "integration_tests", "functional", "test_api", "NUMBER", "py", "test_send_ctrl_alt_del", "If", "the", "test", "pass", "it", "will", "download", "an", "atkbd", "enable", "kernel", "to", "firecracker", "build", "img", "x", "NUMBER", "_", "NUMBER", "minimal_with_atkbd", "kernel", "vmlinux", "NUMBER", "bin", "and", "a", "test", "rootfs", "to", "firecracker", "build", "img", "x", "NUMBER", "_", "NUMBER", "minimal_with_atkbd", "fsfiles", "atkbd", "rootfs", "NUMBER", "ext", "NUMBER", "NUMBER", "If", "the", "test", "pass", "can", "you", "please", "try", "starting", "Firecracker", "with", "that", "kernel", "and", "that", "rootfs", "Note", "that", "in", "the", "example", "you", "provide", "you", "were", "setting", "the", "kernel", "command", "line", "for", "aarch", "NUMBER", "not", "for", "x", "NUMBER", "_", "NUMBER", "Great", "this", "one", "be", "work", "NUMBER", "test", "pass", "and", "I", "copied", "the", "kernel", "and", "it", "worked", "big", "thanks", "NUMBER", "I", "be", "going", "to", "try", "again", "and", "compile", "my", "own", "kernel", "LINK", "microvm", "firecracker", "blob", "master", "docs", "rootfs", "and", "kernel", "setup", "NUMBER", "md", "I", "will", "be", "use", "the", "NUMBER", "config", "provide", "here", "LINK", "microvm", "firecracker", "blob", "master", "resources", "microvm", "kernel", "config", "be", "there", "a", "way", "to", "get", "the", "NUMBER", "config", "use", "to", "build", "the", "test", "kernel", "that", "pass", "somewhere", "I", "want", "to", "compare", "it", "with", "the", "one", "in", "the", "link", "above", "I", "will", "let", "you", "know", "if", "it", "works", "NUMBER", "by", "the", "way", "no", "kernel", "param", "use", "this", "time", "other", "than", "keep_bootcon", "console", "ttyS", "NUMBER", "reboot", "k", "panic", "NUMBER", "pci", "off", "and", "it", "worked", "mhhajeer", "If", "you", "start", "from", "our", "reference", "config", "for", "kernel", "v", "NUMBER", "and", "add", "CONFIG_SERIO_I", "NUMBER", "y", "CONFIG_KEYBOARD_ATKBD", "y", "then", "run", "make", "vmlinux", "the", "kernel", "build", "system", "will", "guide", "you", "through", "add", "the", "dependent", "options", "like", "CONFIG_SERIO", "y", "since", "that", "s", "needed", "by", "CONFIG_SERIO_I", "NUMBER", "y", "NUMBER", "The", "minimal", "diff", "that", "I", "get", "was", "CONFIG_INPUT_KEYBOARD", "y", "CONFIG_KEYBOARD_ATKBD", "y", "CONFIG_SERIO", "y", "CONFIG_SERIO_I", "NUMBER", "y", "CONFIG_SERIO_LIBPS", "NUMBER", "y", "As", "for", "the", "additional", "kernel", "command", "line", "args", "we", "be", "suggesting", "those", "just", "for", "a", "shorter", "boot", "time", "NUMBER", "SendCtrlAltDel", "will", "work", "just", "fine", "without", "them", "but", "booting", "the", "microvm", "will", "take", "longer", "if", "the", "kernel", "has", "to", "probe", "the", "i", "NUMBER", "during", "boot", "NUMBER", "Those", "args", "tell", "the", "kernel", "to", "skip", "that", "probing", "process", "NUMBER", "Closing", "as", "not", "reproducible", "NUMBER", "Please", "reopen", "if", "necessary", "NUMBER", "Thanks", "serban", "NUMBER", "for", "point", "this", "out", "NUMBER", "When", "Firecracker", "panic", "s", "it", "emits", "a", "blacklisted", "SYS_mremap", "which", "breaks", "the", "seccomp", "filter", "NUMBER", "To", "repro", "I", "add", "a", "dummy", "panic", "in", "the", "api_server", "thread", "just", "after", "installing", "the", "seccomp", "filters", "diff", "diff", "git", "a", "api_server", "src", "lib", "NUMBER", "rs", "b", "api_server", "src", "lib", "NUMBER", "rs", "index", "afb", "NUMBER", "f", "NUMBER", "b", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "api_server", "src", "lib", "NUMBER", "rs", "b", "api_server", "src", "lib", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "impl", "ApiServer", "panic", "Terminating", "This", "runs", "forever", "unless", "an", "error", "be", "returned", "somewhere", "within", "f", "but", "nothing", "happens", "bash", "target", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "musl", "debug", "firecracker", "api", "sock", "tmp", "a", "NUMBER", "sock", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "main", "NUMBER", "rs", "NUMBER", "Firecracker", "panicked", "at", "Terminating", "api_server", "src", "lib", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "vmm", "src", "sigsys_handler", "NUMBER", "rs", "NUMBER", "Shutting", "down", "VM", "after", "intercepting", "a", "bad", "syscall", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "vmm", "src", "sigsys_handler", "NUMBER", "rs", "NUMBER", "Failed", "to", "log", "metrics", "while", "stopping", "Logger", "was", "not", "initialized", "NUMBER", "The", "mremap", "originates", "in", "libbacktrace", "rust", "NUMBER", "__mremap", "old_addr", "NUMBER", "x", "NUMBER", "ffff", "NUMBER", "db", "NUMBER", "old_len", "NUMBER", "new_len", "new_len", "entry", "NUMBER", "flags", "flags", "entry", "NUMBER", "at", "src", "mman", "mremap", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "c", "in", "realloc", "p", "NUMBER", "x", "NUMBER", "ffff", "NUMBER", "db", "NUMBER", "n", "NUMBER", "at", "src", "malloc", "malloc", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "dca", "NUMBER", "in", "__rbt_backtrace_vector_grow", "NUMBER", "NUMBER", "x", "NUMBER", "dddab", "in", "add_unit_addr", "NUMBER", "NUMBER", "x", "NUMBER", "de", "NUMBER", "in", "add_unit_ranges", "NUMBER", "NUMBER", "x", "NUMBER", "decb", "NUMBER", "in", "find_address_ranges", "NUMBER", "NUMBER", "x", "NUMBER", "df", "NUMBER", "d", "in", "build_address_map", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "in", "build_dwarf_data", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "da", "in", "__rbt_backtrace_dwarf_add", "NUMBER", "NUMBER", "x", "NUMBER", "dc", "NUMBER", "bf", "in", "elf_add", "NUMBER", "NUMBER", "x", "NUMBER", "dc", "NUMBER", "e", "NUMBER", "in", "__rbt_backtrace_initialize", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "a", "in", "fileline_initialize", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "in", "__rbt_backtrace_pcinfo", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "ce", "in", "backtrace", "symbolize", "libbacktrace", "resolve", "h", "NUMBER", "c", "symaddr", "NUMBER", "x", "NUMBER", "d", "NUMBER", "ac", "TAG", "cb", "NUMBER", "at", "HOME", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "backtrace", "NUMBER", "src", "symbolize", "libbacktrace", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "cd", "NUMBER", "in", "backtrace", "symbolize", "resolve_unsynchronized", "hb", "NUMBER", "eccc", "NUMBER", "fdd", "NUMBER", "a", "addr", "NUMBER", "x", "NUMBER", "d", "NUMBER", "ac", "TAG", "cb", "NUMBER", "at", "HOME", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "backtrace", "NUMBER", "src", "symbolize", "mod", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "cd", "NUMBER", "in", "backtrace", "symbolize", "resolve", "h", "NUMBER", "fa", "NUMBER", "bc", "NUMBER", "addr", "NUMBER", "x", "NUMBER", "d", "NUMBER", "ac", "TAG", "cb", "NUMBER", "at", "HOME", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "backtrace", "NUMBER", "src", "symbolize", "mod", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "de", "in", "backtrace", "capture", "Backtrace", "resolve", "h", "NUMBER", "b", "NUMBER", "e", "NUMBER", "e", "NUMBER", "self", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "db", "NUMBER", "at", "HOME", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "backtrace", "NUMBER", "src", "capture", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "in", "backtrace", "capture", "Backtrace", "new", "h", "NUMBER", "dc", "NUMBER", "a", "NUMBER", "dec", "NUMBER", "at", "HOME", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "backtrace", "NUMBER", "src", "capture", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "in", "firecracker", "main", "_", "u", "NUMBER", "b", "u", "NUMBER", "b", "closure", "u", "NUMBER", "d", "u", "NUMBER", "d", "hdc", "NUMBER", "da", "NUMBER", "fa", "NUMBER", "ee", "NUMBER", "info", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "a", "NUMBER", "at", "src", "main", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "ea", "in", "std", "panicking", "rust_panic_with_hook", "h", "NUMBER", "b", "NUMBER", "ce", "NUMBER", "fa", "NUMBER", "a", "NUMBER", "b", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "in", "std", "panicking", "begin_panic", "hc", "NUMBER", "a", "NUMBER", "ae", "NUMBER", "cfa", "NUMBER", "ae", "msg", "NUMBER", "file_line_col", "NUMBER", "xd", "NUMBER", "b", "NUMBER", "at", "rustc", "NUMBER", "fda", "NUMBER", "c", "NUMBER", "db", "NUMBER", "e", "NUMBER", "d", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "b", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "d", "NUMBER", "in", "api_server", "ApiServer", "bind_and_run", "h", "NUMBER", "ab", "NUMBER", "ac", "NUMBER", "c", "NUMBER", "ac", "NUMBER", "self", "NUMBER", "x", "NUMBER", "fffffffd", "NUMBER", "e", "NUMBER", "path", "NUMBER", "start_time_us", "NUMBER", "start_time_cpu_us", "NUMBER", "seccomp_level", "NUMBER", "at", "api_server", "src", "lib", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "f", "in", "firecracker", "main", "h", "NUMBER", "df", "NUMBER", "fa", "NUMBER", "d", "NUMBER", "at", "src", "main", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "in", "std", "rt", "lang_start", "_", "u", "NUMBER", "b", "u", "NUMBER", "b", "closure", "u", "NUMBER", "d", "u", "NUMBER", "d", "h", "NUMBER", "e", "NUMBER", "f", "NUMBER", "df", "NUMBER", "eeb", "NUMBER", "at", "rustc", "NUMBER", "fda", "NUMBER", "c", "NUMBER", "db", "NUMBER", "e", "NUMBER", "d", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "b", "src", "libstd", "rt", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "in", "std", "rt", "lang_start_internal", "_", "u", "NUMBER", "b", "u", "NUMBER", "b", "closure", "u", "NUMBER", "d", "u", "NUMBER", "d", "hbd", "NUMBER", "e", "NUMBER", "f", "NUMBER", "efb", "at", "src", "libstd", "rt", "NUMBER", "rs", "NUMBER", "NUMBER", "std", "panicking", "try", "do_call", "hf", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "d", "NUMBER", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "e", "NUMBER", "in", "__rust_maybe_catch_panic", "at", "src", "libpanic_abort", "lib", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "da", "in", "std", "panicking", "try", "h", "NUMBER", "b", "NUMBER", "fe", "NUMBER", "e", "NUMBER", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "std", "panic", "catch_unwind", "h", "NUMBER", "a", "NUMBER", "b", "NUMBER", "bdbd", "NUMBER", "d", "at", "src", "libstd", "panic", "NUMBER", "rs", "NUMBER", "NUMBER", "std", "rt", "lang_start_internal", "h", "NUMBER", "b", "NUMBER", "bd", "NUMBER", "c", "NUMBER", "c", "NUMBER", "d", "at", "src", "libstd", "rt", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "in", "std", "rt", "lang_start", "h", "NUMBER", "fdb", "NUMBER", "f", "NUMBER", "main", "NUMBER", "x", "NUMBER", "e", "NUMBER", "TAG", "argc", "NUMBER", "argv", "NUMBER", "x", "NUMBER", "fffffffdd", "NUMBER", "at", "rustc", "NUMBER", "fda", "NUMBER", "c", "NUMBER", "db", "NUMBER", "e", "NUMBER", "d", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "b", "src", "libstd", "rt", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "ca", "in", "main", "The", "panic", "terminates", "the", "process", "anyway", "but", "the", "backtrace", "be", "lost", "because", "of", "the", "seccomp", "issue", "New", "problem", "even", "with", "mremap", "whitelisted", "we", "get", "another", "violation", "this", "time", "cause", "by", "rt_sigprocmask", "NUMBER", "Firecracker", "has", "panic", "abort", "configured", "LINK", "microvm", "firecracker", "blob", "ffd", "NUMBER", "e", "NUMBER", "e", "NUMBER", "f", "NUMBER", "d", "NUMBER", "fd", "NUMBER", "dd", "NUMBER", "a", "NUMBER", "d", "NUMBER", "a", "NUMBER", "Cargo", "NUMBER", "toml", "L", "NUMBER", "in", "which", "case", "Rust", "panic", "s", "by", "deferring", "the", "abort", "to", "libc", "LINK", "lang", "rust", "blob", "NUMBER", "fda", "NUMBER", "c", "NUMBER", "db", "NUMBER", "e", "NUMBER", "d", "NUMBER", "a", "NUMBER", "e", "NUMBER", "a", "NUMBER", "b", "NUMBER", "e", "NUMBER", "b", "src", "libpanic_abort", "lib", "NUMBER", "rs", "L", "NUMBER", "which", "in", "the", "musl", "implementation", "literally", "raises", "SIGABRT", "LINK", "libc", "NUMBER", "org", "cgit", "musl", "tree", "src", "exit", "abort", "NUMBER", "c", "n", "NUMBER", "NUMBER", "musl", "be", "also", "careful", "to", "block", "other", "signals", "LINK", "libc", "NUMBER", "org", "cgit", "musl", "tree", "src", "signal", "raise", "NUMBER", "c", "n", "NUMBER", "while", "it", "s", "raising", "said", "SIGABRT", "and", "uses", "sigprocmask", "to", "do", "so", "LINK", "libc", "NUMBER", "org", "cgit", "musl", "tree", "src", "signal", "block", "NUMBER", "c", "n", "NUMBER", "NUMBER", "Stack", "rust", "NUMBER", "__block_app_sigs", "set", "set", "entry", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "ef", "NUMBER", "at", "src", "signal", "block", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "a", "NUMBER", "ae", "in", "raise", "sig", "sig", "entry", "NUMBER", "at", "src", "signal", "raise", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "e", "in", "abort", "at", "src", "exit", "abort", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "in", "panic_abort", "__rust_start_panic", "abort", "h", "NUMBER", "f", "NUMBER", "bf", "NUMBER", "c", "NUMBER", "at", "src", "libpanic_abort", "lib", "NUMBER", "rs", "NUMBER", "Ah", "and", "the", "raise", "needs", "SYS_tkill", "whitelisted", "too", "NUMBER", "slightly_smiling_face", "Is", "there", "another", "problem", "associated", "with", "this", "behavior", "other", "than", "not", "having", "the", "backtrace", "Not", "unless", "we", "randomly", "choose", "to", "raise", "signals", "ourselves", "NUMBER", "Not", "that", "I", "can", "think", "of", "anyway", "NUMBER", "But", "the", "backtrace", "be", "the", "only", "debug", "info", "we", "have", "in", "case", "of", "unexpect", "exits", "NUMBER", "Not", "NUMBER", "but", "rt_sigprocmask", "NUMBER", "be", "hit", "instead", "rt_sigprocmask", "SIG_BLOCK", "RTMIN", "RT_", "NUMBER", "RT_", "NUMBER", "BUS", "KILL", "SEGV", "ALRM", "TERM", "STKFLT", "CHLD", "TTIN", "URG", "PROF", "WINCH", "PWR", "RT_", "NUMBER", "RT_", "NUMBER", "RT_", "NUMBER", "RT_", "NUMBER", "RT_", "NUMBER", "RT_", "NUMBER", "RT_", "NUMBER", "RT_", "NUMBER", "RT_", "NUMBER", "RT_", "NUMBER", "RT_", "NUMBER", "RT_", "NUMBER", "NUMBER", "NUMBER", "From", "the", "looks", "of", "it", "it", "s", "the", "same", "rt_sigprocmask", "I", "identified", "when", "I", "first", "looked", "into", "this", "issue", "NUMBER", "rust", "Thread", "NUMBER", "fc_api", "received", "signal", "SIGSYS", "Bad", "system", "call", "NUMBER", "Switching", "to", "LWP", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "in", "__block_app_sigs", "gdb", "bt", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "a", "in", "__block_app_sigs", "NUMBER", "NUMBER", "x", "NUMBER", "fcb", "in", "raise", "musl", "be", "also", "careful", "to", "block", "other", "signals", "LINK", "libc", "NUMBER", "org", "cgit", "musl", "tree", "src", "signal", "raise", "NUMBER", "c", "n", "NUMBER", "while", "it", "s", "raising", "said", "SIGABRT", "and", "uses", "sigprocmask", "to", "do", "so", "LINK", "libc", "NUMBER", "org", "cgit", "musl", "tree", "src", "signal", "block", "NUMBER", "c", "n", "NUMBER", "NUMBER", "This", "rt_sigprocmask", "be", "unavoidable", "as", "it", "originates", "albeit", "after", "a", "convoluted", "way", "in", "the", "panic", "abort", "configuration", "NUMBER", "Since", "the", "Firecracker", "process", "dies", "anyway", "and", "be", "irrecoverable", "at", "this", "point", "I", "don", "t", "think", "it", "s", "that", "big", "of", "a", "problem", "if", "it", "dies", "with", "SIGSYS", "instead", "of", "SIGABRT", "NUMBER", "firecracker", "microvm", "compute", "capsule", "thoughts", "The", "executable", "be", "bigger", "NUMBER", "KB", "when", "compiled", "with", "panic", "unwind", "bash", "ls", "l", "build", "cargo_target", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "musl", "release", "firecracker", "rwxr", "xr", "x", "NUMBER", "aghecen", "domain", "users", "NUMBER", "Oct", "NUMBER", "NUMBER", "NUMBER", "build", "cargo_target", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "musl", "release", "firecracker", "rwxr", "xr", "x", "NUMBER", "aghecen", "domain", "users", "NUMBER", "Oct", "NUMBER", "NUMBER", "NUMBER", "build", "cargo_target", "x", "NUMBER", "_", "NUMBER", "unknown", "linux", "musl", "release", "firecracker_unwind", "After", "more", "digging", "looks", "like", "the", "rt_sigprocmask", "be", "unescapable", "NUMBER", "It", "s", "also", "call", "from", "__block_all_sigs", "LINK", "libc", "NUMBER", "org", "cgit", "musl", "tree", "src", "signal", "block", "NUMBER", "c", "which", "be", "in", "turn", "call", "by", "pthread_exit", "LINK", "libc", "NUMBER", "org", "cgit", "musl", "tree", "src", "thread", "pthread_create", "NUMBER", "c", "n", "NUMBER", "NUMBER", "Basically", "musl", "took", "every", "precaution", "and", "blocks", "signals", "whenever", "something", "signal", "unsafe", "be", "underway", "NUMBER", "Nice", "NUMBER", "Signal", "handle", "however", "appears", "to", "overwrite", "the", "stack", "so", "the", "backtrace", "we", "get", "when", "panic", "abort", "be", "empty", "and", "useless", "NUMBER", "In", "case", "of", "panic", "we", "need", "the", "full", "backtrace", "the", "process", "to", "exit", "That", "leaves", "us", "with", "NUMBER", "options", "IMO", "NUMBER", "panic", "unwind", "libbacktrace", "with", "the", "cc", "dependency", "sorry", "libc", "exit", "in", "the", "panic", "handler", "gets", "the", "backtrace", "and", "cleanly", "exists", "at", "the", "expense", "of", "a", "bigger", "binary", "and", "a", "complicated", "dependency", "we", "can", "t", "shake", "NUMBER", "panic", "abort", "libbacktrace", "adios", "backtrace", "but", "we", "also", "get", "rid", "of", "libbacktrace", "cc", "shrink", "the", "binary", "and", "the", "process", "do", "eventually", "die", "by", "SIGSYS", "NUMBER", "firecracker", "microvm", "compute", "capsule", "WDYT", "How", "about", "dropping", "libbacktrace", "together", "with", "the", "concept", "of", "logging", "a", "stack", "trace", "on", "panic", "We", "could", "then", "just", "use", "a", "simple", "core", "dump", "and", "rely", "on", "the", "user", "to", "configure", "proc", "TAG", "coredump_filter", "NUMBER", "But", "backtrace", "works", "with", "unwind", "and", "do", "not", "with", "abort", "as", "far", "as", "I", "understand", "NUMBER", "Right", "Yes", "NUMBER", "How", "about", "dropping", "libbacktrace", "together", "with", "the", "concept", "of", "logging", "a", "stack", "trace", "on", "panic", "We", "could", "then", "just", "use", "a", "simple", "core", "dump", "and", "rely", "on", "the", "user", "to", "configure", "proc", "TAG", "coredump_filter", "NUMBER", "Core", "dumps", "be", "a", "bigger", "discussion", "NUMBER", "Recommending", "core", "dumps", "as", "be", "high", "density", "makes", "me", "wary", "NUMBER", "Moreover", "we", "can", "t", "just", "do", "simple", "core", "dumps", "as", "be", "at", "the", "very", "least", "we", "d", "need", "to", "exclude", "the", "guest", "memory", "from", "them", "NUMBER", "Maybe", "more", "NUMBER", "Also", "from", "my", "understanding", "unwind", "do", "not", "work", "if", "you", "have", "dependencies", "that", "have", "the", "panic", "mode", "set", "to", "abort", "NUMBER", "I", "tried", "this", "out", "and", "it", "looks", "like", "dependency", "panic", "mode", "be", "overridden", "the", "whole", "profile", "section", "be", "NUMBER", "bash", "warning", "profiles", "for", "the", "non", "root", "package", "will", "be", "ignored", "specify", "profiles", "at", "the", "workspace", "root", "package", "firecracker", "fc_util", "Cargo", "NUMBER", "toml", "workspace", "firecracker", "Cargo", "NUMBER", "toml", "aghecenco", "do", "anything", "get", "display", "when", "compile", "with", "unwind", "and", "by", "use", "Backtrace", "new_unresolved", "which", "frees", "us", "from", "the", "cc", "dependency", "rust", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "main", "NUMBER", "rs", "NUMBER", "Firecracker", "panicked", "at", "Terminating", "vmm", "src", "vstate", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "main", "NUMBER", "rs", "NUMBER", "stack", "backtrace", "NUMBER", "TAG", "NUMBER", "x", "NUMBER", "c", "NUMBER", "da", "NUMBER", "TAG", "NUMBER", "x", "NUMBER", "NUMBER", "TAG", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "NUMBER", "TAG", "NUMBER", "x", "NUMBER", "a", "NUMBER", "ea", "NUMBER", "TAG", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "TAG", "NUMBER", "x", "NUMBER", "a", "NUMBER", "f", "NUMBER", "TAG", "NUMBER", "x", "NUMBER", "cc", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "main", "NUMBER", "rs", "NUMBER", "do", "printing", "backtrace", "This", "be", "pretty", "useless", "on", "its", "own", "but", "we", "can", "use", "the", "address", "proc", "TAG", "maps", "and", "addr", "NUMBER", "line", "to", "do", "a", "post", "mortem", "NUMBER", "We", "d", "need", "to", "save", "the", "memory", "maps", "in", "the", "panic", "handler", "NUMBER", "aghecenco", "as", "the", "one", "investigating", "this", "what", "be", "your", "recommendation", "Something", "new", "smile", "dianpopa", "s", "Backtrace", "new_unresolved", "which", "frees", "us", "from", "cc", "and", "gets", "us", "a", "partial", "stack", "strace", "proc", "TAG", "maps", "dumped", "in", "the", "log", "It", "s", "a", "lot", "of", "output", "but", "I", "have", "no", "better", "idea", "addr", "NUMBER", "line", "memory", "maps", "for", "offset", "magic", "original", "binary", "for", "post", "mortem", "I", "haven", "t", "actually", "test", "this", "yet", "if", "it", "turns", "out", "to", "be", "a", "dud", "I", "d", "keep", "libbacktrace", "even", "with", "all", "the", "pain", "NUMBER", "Core", "dumps", "be", "a", "bigger", "discussion", "NUMBER", "Recommending", "core", "dumps", "as", "be", "high", "density", "makes", "me", "wary", "NUMBER", "Moreover", "we", "can", "t", "just", "do", "simple", "core", "dumps", "as", "be", "at", "the", "very", "least", "we", "d", "need", "to", "exclude", "the", "guest", "memory", "from", "them", "NUMBER", "Maybe", "more", "NUMBER", "Not", "as", "be", "but", "filtered", "via", "proc", "self", "coredump_filter", "NUMBER", "Actually", "we", "could", "set", "that", "up", "to", "initially", "include", "only", "the", "stack", "i", "NUMBER", "e", "NUMBER", "filter", "NUMBER", "NUMBER", "From", "man", "core", "Since", "kernel", "NUMBER", "the", "Linux", "specific", "proc", "pid", "coredump_filter", "file", "can", "be", "use", "to", "control", "which", "memory", "segments", "be", "write", "to", "the", "core", "dump", "file", "in", "the", "event", "that", "a", "core", "dump", "be", "performed", "for", "the", "process", "with", "the", "corresponding", "process", "ID", "NUMBER", "The", "value", "in", "the", "file", "be", "a", "bit", "mask", "of", "memory", "mapping", "types", "see", "mmap", "NUMBER", "NUMBER", "If", "a", "bit", "be", "set", "in", "the", "mask", "then", "memory", "mappings", "of", "the", "corresponding", "type", "be", "dumped", "otherwise", "they", "be", "not", "dumped", "NUMBER", "The", "bits", "in", "this", "file", "have", "the", "following", "meanings", "bit", "NUMBER", "Dump", "anonymous", "private", "mappings", "NUMBER", "bit", "NUMBER", "Dump", "anonymous", "shared", "mappings", "NUMBER", "bit", "NUMBER", "Dump", "file", "backed", "private", "mappings", "NUMBER", "bit", "NUMBER", "Dump", "file", "backed", "shared", "mappings", "NUMBER", "bit", "NUMBER", "since", "Linux", "NUMBER", "Dump", "ELF", "headers", "NUMBER", "bit", "NUMBER", "since", "Linux", "NUMBER", "Dump", "private", "huge", "pages", "NUMBER", "bit", "NUMBER", "since", "Linux", "NUMBER", "Dump", "shared", "huge", "pages", "NUMBER", "bit", "NUMBER", "since", "Linux", "NUMBER", "Dump", "private", "DAX", "pages", "NUMBER", "bit", "NUMBER", "since", "Linux", "NUMBER", "Dump", "shared", "DAX", "pages", "NUMBER", "I", "like", "the", "idea", "but", "it", "introduces", "a", "new", "artefact", "for", "users", "to", "collect", "NUMBER", "Firecracker", "already", "has", "NUMBER", "output", "channels", "in", "the", "logs", "and", "metrics", "destinations", "and", "libbacktrace", "allow", "us", "to", "leverage", "one", "NUMBER", "While", "stack", "traces", "currently", "don", "t", "work", "at", "all", "get", "them", "to", "work", "with", "this", "quirk", "of", "an", "extra", "requirement", "might", "not", "be", "desirable", "for", "all", "users", "especially", "since", "they", "expect", "the", "stack", "trace", "to", "come", "through", "the", "logging", "channel", "NUMBER", "If", "we", "take", "a", "step", "back", "and", "look", "at", "the", "problem", "our", "pain", "be", "with", "backtrace", "rs", "which", "swallows", "a", "bunch", "of", "C", "sources", "and", "pulls", "in", "the", "extra", "dependency", "on", "cc", "to", "compile", "them", "NUMBER", "Last", "time", "we", "had", "this", "problem", "it", "was", "with", "libseccomp", "and", "we", "considered", "doing", "exactly", "that", "gulp", "up", "the", "C", "sources", "compile", "them", "and", "present", "them", "as", "a", "Rust", "crate", "NUMBER", "We", "ended", "up", "not", "doing", "that", "and", "instead", "rewriting", "in", "native", "Rust", "only", "what", "we", "needed", "from", "libseccomp", "NUMBER", "I", "think", "the", "best", "thing", "to", "do", "here", "be", "to", "repeat", "that", "take", "what", "we", "need", "from", "libbacktrace", "rewrite", "it", "and", "profit", "beer", "It", "s", "back", "backtrace", "introduce", "a", "change", "in", "NUMBER", "LINK", "lang", "backtrace", "rs", "commit", "NUMBER", "b", "NUMBER", "d", "NUMBER", "be", "NUMBER", "b", "NUMBER", "c", "NUMBER", "c", "NUMBER", "da", "NUMBER", "cc", "NUMBER", "cad", "NUMBER", "that", "strips", "the", "cwd", "from", "the", "path", "to", "pretty", "print", "the", "stack", "trace", "NUMBER", "This", "in", "turn", "calls", "SYS_getcwd", "it", "s", "blacklisted", "seccomp", "violation", "NUMBER", "Firecracker", "requires", "NUMBER", "so", "we", "could", "either", "a", "Lock", "backtrace", "to", "NUMBER", "b", "Whitelist", "SYS_getcwd", "c", "Remove", "backtrace", "as", "it", "doesn", "t", "appear", "to", "be", "of", "much", "use", "this", "be", "what", "it", "logs", "for", "a", "sample", "repro", "on", "my", "machine", "rust", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "NUMBER", "backtrace", "backtrace", "libunwind", "trace", "at", "HOME", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "backtrace", "NUMBER", "src", "backtrace", "libunwind", "NUMBER", "rs", "NUMBER", "backtrace", "backtrace", "trace_unsynchronized", "at", "HOME", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "backtrace", "NUMBER", "src", "backtrace", "mod", "NUMBER", "rs", "NUMBER", "NUMBER", "backtrace", "backtrace", "trace", "at", "HOME", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "backtrace", "NUMBER", "src", "backtrace", "mod", "NUMBER", "rs", "NUMBER", "Stack", "rust", "NUMBER", "NUMBER", "x", "NUMBER", "adc", "NUMBER", "a", "in", "getcwd", "NUMBER", "NUMBER", "x", "NUMBER", "a", "NUMBER", "in", "std", "sys", "unix", "os", "getcwd", "hba", "NUMBER", "bebb", "NUMBER", "bce", "at", "src", "libstd", "sys", "unix", "os", "NUMBER", "rs", "NUMBER", "NUMBER", "std", "env", "current_dir", "h", "NUMBER", "b", "NUMBER", "efd", "NUMBER", "b", "NUMBER", "d", "NUMBER", "at", "src", "libstd", "env", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "in", "_", "LT", "backtrace", "NUMBER", "capture", "NUMBER", "Backtrace", "u", "NUMBER", "as", "u", "NUMBER", "core", "NUMBER", "fmt", "NUMBER", "Debug", "GT", "fmt", "h", "NUMBER", "e", "NUMBER", "badea", "NUMBER", "c", "NUMBER", "c", "NUMBER", "self", "NUMBER", "x", "NUMBER", "fffefde", "NUMBER", "bc", "NUMBER", "fmt", "NUMBER", "x", "NUMBER", "fffefde", "NUMBER", "at", "HOME", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "backtrace", "NUMBER", "src", "capture", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "c", "NUMBER", "c", "in", "core", "fmt", "write", "h", "NUMBER", "e", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "d", "at", "src", "libcore", "fmt", "mod", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "in", "_", "LT", "core", "NUMBER", "fmt", "NUMBER", "Arguments", "u", "NUMBER", "as", "u", "NUMBER", "core", "NUMBER", "fmt", "NUMBER", "Display", "GT", "fmt", "h", "NUMBER", "ea", "NUMBER", "bbc", "NUMBER", "ee", "at", "src", "libcore", "fmt", "mod", "NUMBER", "rs", "NUMBER", "NUMBER", "_", "LT", "core", "NUMBER", "fmt", "NUMBER", "Arguments", "u", "NUMBER", "as", "u", "NUMBER", "core", "NUMBER", "fmt", "NUMBER", "Debug", "GT", "fmt", "he", "NUMBER", "cec", "NUMBER", "b", "NUMBER", "fb", "at", "src", "libcore", "fmt", "mod", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "a", "NUMBER", "in", "_", "LT", "RF", "T", "u", "NUMBER", "as", "u", "NUMBER", "core", "NUMBER", "fmt", "NUMBER", "Display", "GT", "fmt", "h", "NUMBER", "fea", "NUMBER", "b", "NUMBER", "c", "NUMBER", "ec", "NUMBER", "self", "NUMBER", "x", "NUMBER", "fffefde", "NUMBER", "d", "NUMBER", "f", "NUMBER", "x", "NUMBER", "fffefde", "NUMBER", "at", "rustc", "NUMBER", "ea", "NUMBER", "cb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "src", "libcore", "fmt", "mod", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "c", "NUMBER", "c", "in", "core", "fmt", "write", "h", "NUMBER", "e", "NUMBER", "ee", "NUMBER", "d", "NUMBER", "d", "at", "src", "libcore", "fmt", "mod", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "in", "core", "fmt", "Write", "write_fmt", "h", "NUMBER", "ec", "NUMBER", "e", "NUMBER", "e", "NUMBER", "b", "NUMBER", "b", "NUMBER", "c", "NUMBER", "at", "rustc", "NUMBER", "ea", "NUMBER", "cb", "NUMBER", "f", "NUMBER", "a", "NUMBER", "c", "NUMBER", "e", "NUMBER", "f", "NUMBER", "src", "libcore", "fmt", "mod", "NUMBER", "rs", "NUMBER", "NUMBER", "alloc", "fmt", "format", "h", "NUMBER", "ef", "NUMBER", "e", "NUMBER", "a", "NUMBER", "a", "NUMBER", "b", "NUMBER", "at", "src", "liballoc", "fmt", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "ee", "NUMBER", "c", "in", "_", "LT", "logger", "NUMBER", "logger", "NUMBER", "Logger", "u", "NUMBER", "as", "u", "NUMBER", "log", "NUMBER", "Log", "GT", "log", "hbea", "NUMBER", "fb", "NUMBER", "d", "NUMBER", "self", "NUMBER", "xa", "NUMBER", "TAG", "record", "NUMBER", "x", "NUMBER", "fffefde", "NUMBER", "c", "NUMBER", "at", "src", "logger", "src", "logger", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fe", "NUMBER", "in", "log", "__private_api_log", "h", "NUMBER", "e", "NUMBER", "b", "NUMBER", "dbcea", "NUMBER", "c", "args", "NUMBER", "level", "Error", "at", "HOME", "NUMBER", "cargo", "registry", "src", "github", "NUMBER", "com", "NUMBER", "ecc", "NUMBER", "db", "NUMBER", "ec", "NUMBER", "log", "NUMBER", "src", "lib", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "b", "in", "firecracker", "main", "_", "u", "NUMBER", "b", "u", "NUMBER", "b", "closure", "u", "NUMBER", "d", "u", "NUMBER", "d", "h", "NUMBER", "d", "NUMBER", "eacef", "NUMBER", "info", "NUMBER", "x", "NUMBER", "fffefde", "NUMBER", "d", "NUMBER", "at", "src", "firecracker", "src", "main", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "bc", "in", "std", "panicking", "rust_panic_with_hook", "h", "NUMBER", "d", "NUMBER", "f", "NUMBER", "bb", "NUMBER", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "de", "NUMBER", "in", "std", "panicking", "continue_panic_fmt", "hd", "NUMBER", "be", "NUMBER", "eb", "NUMBER", "cfd", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "dd", "NUMBER", "in", "rust_begin_unwind", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "Includes", "snapcraft", "NUMBER", "yaml", "to", "build", "snap", "NUMBER", "Issue", "if", "available", "LINK", "microvm", "firecracker", "issue", "NUMBER", "Description", "of", "change", "Added", "snapcraft", "NUMBER", "yaml", "to", "build", "snap", "NUMBER", "By", "submit", "this", "pull", "request", "I", "confirm", "that", "my", "contribution", "be", "made", "under", "the", "terms", "of", "the", "Apache", "NUMBER", "license", "NUMBER", "Thanks", "for", "get", "this", "start", "NUMBER", "We", "don", "t", "have", "much", "experience", "with", "snaps", "yet", "but", "we", "ll", "take", "a", "look", "NUMBER", "For", "anyone", "else", "looking", "at", "this", "any", "info", "on", "how", "you", "would", "use", "such", "a", "snap", "will", "help", "mikeroyal", "be", "you", "still", "interested", "in", "driving", "this", "PR", "Hi", "dianpopa", "I", "m", "get", "back", "to", "work", "on", "it", "this", "week", "NUMBER", "Thank", "you", "for", "the", "reminder", "NUMBER", "I", "find", "two", "other", "problem", "that", "we", "need", "to", "solve", "The", "jailer", "be", "not", "install", "when", "doing", "snap", "install", "NUMBER", "The", "firecracker", "binary", "obtained", "as", "part", "of", "the", "build", "process", "be", "build", "with", "the", "gnu", "target", "NUMBER", "We", "want", "to", "publish", "the", "musl", "build", "binary", "NUMBER", "Hi", "dianpopa", "I", "ll", "look", "into", "add", "jailer", "and", "musl", "build", "binary", "for", "the", "snap", "NUMBER", "Hi", "dianpopa", "I", "ll", "look", "into", "add", "jailer", "and", "musl", "build", "binary", "for", "the", "snap", "NUMBER", "Unfortunately", "seems", "that", "the", "gnu", "target", "be", "hardcoded", "inside", "the", "sources", "LINK", "NUMBER", "I", "will", "open", "an", "issue", "to", "get", "their", "opinion", "on", "change", "this", "NUMBER", "Hi", "dianpopa", "I", "ll", "look", "into", "add", "jailer", "and", "musl", "build", "binary", "for", "the", "snap", "NUMBER", "Unfortunately", "seems", "that", "the", "gnu", "target", "be", "hardcoded", "inside", "the", "sources", "LINK", "NUMBER", "I", "will", "open", "an", "issue", "to", "get", "their", "opinion", "on", "change", "this", "NUMBER", "Seems", "that", "there", "was", "an", "effort", "LINK", "sometime", "to", "add", "support", "for", "musl", "enable", "build", "for", "the", "Rust", "plugin", "but", "exceeded", "performance", "limitations", "for", "them", "NUMBER", "Received", "response", "LINK", "for", "various", "build", "target", "for", "the", "rust", "plugin", "NUMBER", "NUMBER", "from", "Snap", "Team", "NUMBER", "I", "cannot", "install", "clippy", "on", "aarch", "NUMBER", "Apparently", "it", "didn", "t", "land", "in", "stable", "yet", "LINK", "lang", "rust", "clippy", "issue", "NUMBER", "Seems", "like", "we", "can", "use", "cargo", "clippy", "target", "aarch", "NUMBER", "unknown", "linux", "musl", "on", "x", "NUMBER", "_", "NUMBER", "When", "the", "status", "check", "for", "a", "pull", "request", "fail", "it", "s", "hard", "to", "decipher", "from", "the", "thousands", "of", "lines", "of", "log", "output", "what", "be", "actually", "the", "problem", "NUMBER", "One", "solution", "would", "be", "to", "have", "multiple", "individual", "status", "checks", "for", "unit", "test", "integration", "test", "rust", "format", "python", "format", "NUMBER", "The", "user", "could", "then", "click", "on", "the", "red", "X", "and", "get", "the", "report", "for", "the", "one", "check", "that", "fail", "NUMBER", "That", "s", "definitely", "something", "we", "need", "to", "do", "along", "with", "run", "said", "individual", "checks", "run", "in", "parallel", "since", "the", "total", "time", "be", "too", "long", "now", "NUMBER", "It", "s", "something", "we", "have", "in", "the", "backlog", "and", "will", "probably", "prioritize", "with", "the", "next", "couple", "of", "months", "NUMBER", "Actually", "we", "re", "also", "thinking", "about", "make", "our", "medium", "term", "plan", "more", "transparent", "and", "this", "might", "be", "a", "good", "catalyst", "stay", "tuned", "NUMBER", "Added", "to", "the", "roadmap", "as", "part", "of", "NUMBER", "dianpopa", "Indeed", "NUMBER", "Looks", "far", "nicer", "now", "NUMBER", "Thanks", "Using", "firecracker", "v", "NUMBER", "and", "I", "notice", "that", "if", "there", "be", "a", "vsock", "error", "firecracker", "still", "behaves", "as", "if", "there", "was", "no", "error", "and", "continues", "to", "run", "NUMBER", "The", "desired", "behavior", "would", "be", "for", "the", "firecracker", "process", "to", "panic", "and", "exit", "with", "a", "non", "zero", "exit", "code", "if", "an", "error", "was", "to", "occur", "NUMBER", "TAG", "TAG", "NUMBER", "Linux", "version", "NUMBER", "NUMBER", "amzn", "NUMBER", "x", "NUMBER", "_", "NUMBER", "mockbuild", "ip", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "gcc", "version", "NUMBER", "NUMBER", "Red", "Hat", "NUMBER", "NUMBER", "GCC", "NUMBER", "SMP", "Wed", "Jul", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "UTC", "NUMBER", "NUMBER", "Command", "line", "console", "ttyS", "NUMBER", "noapic", "reboot", "k", "panic", "NUMBER", "pci", "off", "nomodules", "rw", "root", "dev", "vda", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "x", "NUMBER", "floating", "point", "registers", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "SSE", "registers", "NUMBER", "x", "NUMBER", "fpu", "Supporting", "XSAVE", "feature", "NUMBER", "x", "NUMBER", "AVX", "registers", "NUMBER", "x", "NUMBER", "fpu", "xstate_offset", "NUMBER", "NUMBER", "xstate_sizes", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fpu", "Enabled", "xstate", "features", "NUMBER", "x", "NUMBER", "context", "size", "be", "NUMBER", "bytes", "use", "standard", "format", "NUMBER", "NUMBER", "e", "NUMBER", "BIOS", "provide", "physical", "RAM", "map", "NUMBER", "BIOS", "e", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fbff", "usable", "NUMBER", "BIOS", "e", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "usable", "NUMBER", "NX", "Execute", "Disable", "protection", "active", "NUMBER", "DMI", "not", "present", "or", "invalid", "NUMBER", "NUMBER", "Hypervisor", "detected", "KVM", "NUMBER", "tsc", "Fast", "TSC", "calibration", "use", "PIT", "NUMBER", "e", "NUMBER", "last_pfn", "NUMBER", "x", "NUMBER", "max_arch_pfn", "NUMBER", "x", "NUMBER", "NUMBER", "MTRR", "Disabled", "NUMBER", "x", "NUMBER", "PAT", "MTRRs", "disabled", "skipping", "PAT", "initialization", "too", "NUMBER", "NUMBER", "CPU", "MTRRs", "all", "blank", "virtualized", "system", "NUMBER", "NUMBER", "x", "NUMBER", "PAT", "Configuration", "NUMBER", "NUMBER", "WB", "WT", "UC", "UC", "WB", "WT", "UC", "UC", "NUMBER", "find", "SMP", "MP", "table", "at", "mem", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "f", "mapped", "at", "ffffffffff", "NUMBER", "c", "NUMBER", "NUMBER", "Scanning", "NUMBER", "areas", "for", "low", "memory", "corruption", "NUMBER", "No", "NUMA", "configuration", "find", "NUMBER", "Faking", "a", "node", "at", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "NODE_DATA", "NUMBER", "allocated", "mem", "NUMBER", "x", "NUMBER", "ffde", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "kvm", "clock", "Using", "msrs", "NUMBER", "b", "NUMBER", "d", "NUMBER", "and", "NUMBER", "b", "NUMBER", "d", "NUMBER", "NUMBER", "kvm", "clock", "cpu", "NUMBER", "msr", "NUMBER", "ffdc", "NUMBER", "primary", "cpu", "clock", "NUMBER", "kvm", "clock", "use", "sched", "offset", "of", "NUMBER", "cycles", "NUMBER", "clocksource", "kvm", "clock", "mask", "NUMBER", "xffffffffffffffff", "max_cycles", "NUMBER", "x", "NUMBER", "cd", "NUMBER", "e", "NUMBER", "dffb", "max_idle_ns", "NUMBER", "ns", "NUMBER", "Zone", "ranges", "NUMBER", "DMA", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "ffffff", "NUMBER", "DMA", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "Normal", "empty", "NUMBER", "Movable", "zone", "start", "for", "each", "node", "NUMBER", "Early", "memory", "node", "ranges", "NUMBER", "node", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "efff", "NUMBER", "node", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "Initmem", "setup", "node", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fffffff", "NUMBER", "Intel", "MultiProcessor", "Specification", "v", "NUMBER", "NUMBER", "MPTABLE", "OEM", "ID", "FC", "NUMBER", "MPTABLE", "Product", "ID", "NUMBER", "NUMBER", "MPTABLE", "APIC", "at", "NUMBER", "xFEE", "NUMBER", "NUMBER", "Processor", "NUMBER", "Bootup", "CPU", "NUMBER", "IOAPIC", "NUMBER", "apic_id", "NUMBER", "version", "NUMBER", "address", "NUMBER", "xfec", "NUMBER", "GSI", "NUMBER", "NUMBER", "NUMBER", "Processors", "NUMBER", "NUMBER", "smpboot", "Allowing", "NUMBER", "CPUs", "NUMBER", "hotplug", "CPUs", "NUMBER", "PM", "Registered", "nosave", "memory", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "fff", "NUMBER", "PM", "Registered", "nosave", "memory", "mem", "NUMBER", "x", "NUMBER", "f", "NUMBER", "NUMBER", "x", "NUMBER", "fffff", "NUMBER", "e", "NUMBER", "mem", "NUMBER", "x", "NUMBER", "NUMBER", "xffffffff", "available", "for", "PCI", "devices", "NUMBER", "Booting", "paravirtualized", "kernel", "on", "KVM", "NUMBER", "clocksource", "refined", "jiffies", "mask", "NUMBER", "xffffffff", "max_cycles", "NUMBER", "xffffffff", "max_idle_ns", "NUMBER", "ns", "NUMBER", "random", "get_random_bytes", "call", "from", "start_kernel", "NUMBER", "x", "NUMBER", "NUMBER", "x", "NUMBER", "with", "crng_init", "NUMBER", "NUMBER", "setup_percpu", "NR_CPUS", "NUMBER", "nr_cpumask_bits", "NUMBER", "nr_cpu_ids", "NUMBER", "nr_node_ids", "NUMBER", "NUMBER", "percpu", "Embedded", "NUMBER", "pages", "cpu", "ffff", "NUMBER", "fc", "NUMBER", "s", "NUMBER", "r", "NUMBER", "d", "NUMBER", "u", "NUMBER", "NUMBER", "KVM", "setup", "async", "PF", "for", "cpu", "NUMBER", "NUMBER", "kvm", "stealtime", "cpu", "NUMBER", "msr", "fc", "NUMBER", "NUMBER", "PV", "qspinlock", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Built", "NUMBER", "zonelists", "mobility", "grouping", "on", "NUMBER", "Total", "pages", "NUMBER", "NUMBER", "Policy", "zone", "DMA", "NUMBER", "NUMBER", "Kernel", "command", "line", "console", "ttyS", "NUMBER", "noapic", "reboot", "k", "panic", "NUMBER", "pci", "off", "nomodules", "rw", "root", "dev", "vda", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "NUMBER", "PID", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Memory", "NUMBER", "K", "NUMBER", "K", "available", "NUMBER", "K", "kernel", "code", "NUMBER", "K", "rwdata", "NUMBER", "K", "rodata", "NUMBER", "K", "init", "NUMBER", "K", "bss", "NUMBER", "K", "reserved", "NUMBER", "K", "cma", "reserved", "NUMBER", "SLUB", "HWalign", "NUMBER", "Order", "NUMBER", "NUMBER", "MinObjects", "NUMBER", "CPUs", "NUMBER", "Nodes", "NUMBER", "NUMBER", "Kernel", "User", "page", "tables", "isolation", "enable", "NUMBER", "Hierarchical", "RCU", "implementation", "NUMBER", "NUMBER", "RCU", "restricting", "CPUs", "from", "NR_CPUS", "NUMBER", "to", "nr_cpu_ids", "NUMBER", "NUMBER", "RCU", "Adjusting", "geometry", "for", "rcu_fanout_leaf", "NUMBER", "nr_cpu_ids", "NUMBER", "NUMBER", "NR_IRQS", "NUMBER", "nr_irqs", "NUMBER", "preallocated", "irqs", "NUMBER", "NUMBER", "Console", "colour", "dummy", "device", "NUMBER", "x", "NUMBER", "NUMBER", "console", "ttyS", "NUMBER", "enable", "NUMBER", "tsc", "Detected", "NUMBER", "MHz", "processor", "NUMBER", "Calibrating", "delay", "loop", "skipped", "preset", "value", "NUMBER", "NUMBER", "BogoMIPS", "lpj", "NUMBER", "NUMBER", "pid_max", "default", "NUMBER", "minimum", "NUMBER", "NUMBER", "Security", "Framework", "initialized", "NUMBER", "SELinux", "Initializing", "NUMBER", "NUMBER", "Dentry", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Inode", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Mount", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Mountpoint", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "Last", "level", "iTLB", "entries", "NUMBER", "KB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "Last", "level", "dTLB", "entries", "NUMBER", "KB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "MB", "NUMBER", "NUMBER", "GB", "NUMBER", "NUMBER", "Spectre", "V", "NUMBER", "Mitigation", "Full", "generic", "retpoline", "NUMBER", "Spectre", "V", "NUMBER", "Spectre", "v", "NUMBER", "mitigation", "Enabling", "Indirect", "Branch", "Prediction", "Barrier", "NUMBER", "Spectre", "V", "NUMBER", "Enabling", "Restricted", "Speculation", "for", "firmware", "calls", "NUMBER", "Speculative", "Store", "Bypass", "Mitigation", "Speculative", "Store", "Bypass", "disabled", "via", "prctl", "and", "seccomp", "NUMBER", "Freeing", "SMP", "alternatives", "memory", "NUMBER", "K", "NUMBER", "smpboot", "Max", "logical", "package", "NUMBER", "NUMBER", "Not", "enabling", "interrupt", "remapping", "due", "to", "skipped", "IO", "APIC", "setup", "NUMBER", "smpboot", "CPU", "NUMBER", "Intel", "R", "Xeon", "R", "Processor", "NUMBER", "GHz", "family", "NUMBER", "x", "NUMBER", "model", "NUMBER", "x", "NUMBER", "f", "stepping", "NUMBER", "x", "NUMBER", "NUMBER", "Performance", "Events", "unsupported", "p", "NUMBER", "CPU", "model", "NUMBER", "no", "PMU", "driver", "software", "events", "only", "NUMBER", "NUMBER", "Hierarchical", "SRCU", "implementation", "NUMBER", "NUMBER", "smp", "Bringing", "up", "secondary", "CPUs", "NUMBER", "NUMBER", "smp", "Brought", "up", "NUMBER", "node", "NUMBER", "CPU", "NUMBER", "smpboot", "Total", "of", "NUMBER", "processors", "activated", "NUMBER", "BogoMIPS", "NUMBER", "devtmpfs", "initialized", "NUMBER", "x", "NUMBER", "mm", "Memory", "block", "size", "NUMBER", "MB", "NUMBER", "clocksource", "jiffies", "mask", "NUMBER", "xffffffff", "max_cycles", "NUMBER", "xffffffff", "max_idle_ns", "NUMBER", "ns", "NUMBER", "futex", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "cpuidle", "use", "governor", "ladder", "NUMBER", "cpuidle", "use", "governor", "menu", "NUMBER", "HugeTLB", "registered", "NUMBER", "MiB", "page", "size", "pre", "allocated", "NUMBER", "pages", "NUMBER", "dmi", "Firmware", "registration", "fail", "NUMBER", "NUMBER", "NetLabel", "Initializing", "NUMBER", "NetLabel", "domain", "hash", "size", "NUMBER", "NUMBER", "NetLabel", "protocols", "UNLABELED", "CIPSOv", "NUMBER", "CALIPSO", "NUMBER", "NetLabel", "unlabeled", "traffic", "allow", "by", "default", "NUMBER", "clocksource", "Switched", "to", "clocksource", "kvm", "clock", "NUMBER", "VFS", "Disk", "quotas", "dquot_", "NUMBER", "NUMBER", "VFS", "Dquot", "cache", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "TCP", "established", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "TCP", "bind", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "TCP", "Hash", "tables", "configured", "established", "NUMBER", "bind", "NUMBER", "NUMBER", "UDP", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "UDP", "Lite", "hash", "table", "entries", "NUMBER", "order", "NUMBER", "NUMBER", "bytes", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "virtio", "mmio", "Registering", "device", "virtio", "mmio", "NUMBER", "at", "NUMBER", "xd", "NUMBER", "NUMBER", "xd", "NUMBER", "fff", "IRQ", "NUMBER", "NUMBER", "virtio", "mmio", "Registering", "device", "virtio", "mmio", "NUMBER", "at", "NUMBER", "xd", "NUMBER", "NUMBER", "xd", "NUMBER", "fff", "IRQ", "NUMBER", "NUMBER", "virtio", "mmio", "Registering", "device", "virtio", "mmio", "NUMBER", "at", "NUMBER", "xd", "NUMBER", "NUMBER", "xd", "NUMBER", "fff", "IRQ", "NUMBER", "NUMBER", "platform", "rtc_cmos", "registered", "platform", "RTC", "device", "no", "PNP", "device", "find", "NUMBER", "Scanning", "for", "low", "memory", "corruption", "every", "NUMBER", "seconds", "NUMBER", "audit", "initializing", "netlink", "subsys", "disabled", "NUMBER", "Initialise", "system", "trusted", "keyrings", "NUMBER", "Key", "type", "blacklist", "registered", "NUMBER", "audit", "type", "NUMBER", "audit", "NUMBER", "NUMBER", "state", "initialized", "audit_enabled", "NUMBER", "res", "NUMBER", "NUMBER", "workingset", "timestamp_bits", "NUMBER", "max_order", "NUMBER", "bucket_order", "NUMBER", "NUMBER", "squashfs", "version", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "Phillip", "Lougher", "NUMBER", "Key", "type", "asymmetric", "registered", "NUMBER", "Asymmetric", "key", "parser", "x", "NUMBER", "registered", "NUMBER", "Block", "layer", "SCSI", "generic", "bsg", "driver", "version", "NUMBER", "loaded", "major", "NUMBER", "NUMBER", "io", "scheduler", "noop", "registered", "default", "NUMBER", "io", "scheduler", "cfq", "registered", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "Failed", "to", "enable", "NUMBER", "bit", "or", "NUMBER", "bit", "DMA", "NUMBER", "Trying", "to", "continue", "but", "this", "might", "not", "work", "NUMBER", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "Failed", "to", "enable", "NUMBER", "bit", "or", "NUMBER", "bit", "DMA", "NUMBER", "Trying", "to", "continue", "but", "this", "might", "not", "work", "NUMBER", "NUMBER", "virtio", "mmio", "virtio", "mmio", "NUMBER", "Failed", "to", "enable", "NUMBER", "bit", "or", "NUMBER", "bit", "DMA", "NUMBER", "Trying", "to", "continue", "but", "this", "might", "not", "work", "NUMBER", "NUMBER", "Serial", "NUMBER", "NUMBER", "driver", "NUMBER", "ports", "IRQ", "sharing", "disabled", "NUMBER", "serial", "NUMBER", "ttyS", "NUMBER", "at", "I", "O", "NUMBER", "x", "NUMBER", "f", "NUMBER", "irq", "NUMBER", "base_baud", "NUMBER", "be", "a", "U", "NUMBER", "_", "NUMBER", "A", "NUMBER", "loop", "module", "loaded", "NUMBER", "tun", "Universal", "TUN", "TAP", "device", "driver", "NUMBER", "NUMBER", "hidraw", "raw", "HID", "events", "driver", "C", "Jiri", "Kosina", "NUMBER", "nf_conntrack", "version", "NUMBER", "NUMBER", "buckets", "NUMBER", "max", "NUMBER", "ip_tables", "C", "NUMBER", "NUMBER", "Netfilter", "Core", "Team", "NUMBER", "Initializing", "XFRM", "netlink", "socket", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "Segment", "Routing", "with", "IPv", "NUMBER", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "Bridge", "firewalling", "registered", "NUMBER", "NET", "Registered", "protocol", "family", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "main", "NUMBER", "rs", "NUMBER", "Panic", "occur", "PanicInfo", "payload", "Any", "message", "Some", "Failed", "to", "activate", "device", "BadVhostActivate", "VhostVsockSetCid", "IoctlError", "Os", "code", "NUMBER", "kind", "AddrInUse", "message", "Address", "in", "use", "location", "Location", "file", "src", "libcore", "result", "NUMBER", "rs", "line", "NUMBER", "col", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "main", "NUMBER", "rs", "NUMBER", "stack", "backtrace", "NUMBER", "NUMBER", "x", "NUMBER", "df", "NUMBER", "d", "backtrace", "backtrace", "trace", "h", "NUMBER", "c", "NUMBER", "b", "NUMBER", "cac", "NUMBER", "a", "NUMBER", "NUMBER", "x", "NUMBER", "firecracker", "main", "closure", "hd", "NUMBER", "f", "NUMBER", "dec", "NUMBER", "b", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "std", "panicking", "rust_panic_with_hook", "h", "NUMBER", "b", "NUMBER", "ce", "NUMBER", "fa", "NUMBER", "a", "NUMBER", "b", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "d", "std", "panicking", "continue_panic_fmt", "h", "NUMBER", "c", "NUMBER", "b", "NUMBER", "bc", "NUMBER", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "rust_begin_unwind", "at", "src", "libstd", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "db", "core", "panicking", "panic_fmt", "h", "NUMBER", "d", "NUMBER", "bc", "NUMBER", "f", "NUMBER", "d", "NUMBER", "a", "at", "src", "libcore", "panicking", "NUMBER", "rs", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "c", "NUMBER", "d", "core", "result", "unwrap_failed", "h", "NUMBER", "e", "NUMBER", "a", "NUMBER", "ae", "NUMBER", "d", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "e", "NUMBER", "TAG", "write", "ha", "NUMBER", "f", "NUMBER", "ebfd", "NUMBER", "d", "NUMBER", "NUMBER", "x", "NUMBER", "devices", "bus", "Bus", "write", "h", "NUMBER", "aba", "NUMBER", "b", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "b", "NUMBER", "f", "NUMBER", "std", "sys_common", "backtrace", "__rust_begin_short_backtrace", "hd", "NUMBER", "ab", "NUMBER", "a", "NUMBER", "be", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "TAG", "call_box", "hf", "NUMBER", "fa", "NUMBER", "d", "NUMBER", "f", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "f", "NUMBER", "TAG", "Welcome", "to", "Alpine", "Linux", "NUMBER", "Kernel", "NUMBER", "NUMBER", "amzn", "NUMBER", "x", "NUMBER", "_", "NUMBER", "on", "an", "x", "NUMBER", "_", "NUMBER", "ttyS", "NUMBER", "TAG", "TAG", "Made", "obsolete", "by", "NUMBER", "raduweiss", "this", "be", "not", "directly", "relate", "to", "vsock", "NUMBER", "This", "looks", "like", "a", "bug", "in", "our", "VMM", "loop", "that", "was", "discover", "through", "a", "vsock", "failure", "NUMBER", "We", "still", "need", "to", "fix", "it", "NUMBER", "I", "tried", "signing", "up", "for", "firecracker", "slack", "channel", "NUMBER", "The", "invitation", "email", "do", "not", "include", "the", "workspace", "URL", "NUMBER", "This", "be", "particularly", "true", "if", "the", "registered", "user", "be", "already", "subscribed", "to", "it", "NUMBER", "Here", "be", "a", "image", "capture", "from", "the", "email", "TAG", "git", "grep", "too_many_arguments", "for", "affected", "code", "blocks", "NUMBER", "We", "can", "group", "argument", "to", "fix", "this", "NUMBER", "Ref", "NUMBER", "LINK", "lang", "NUMBER", "github", "NUMBER", "io", "rust", "clippy", "master", "too_many_arguments", "At", "the", "moment", "Firecracker", "be", "configured", "by", "sending", "API", "request", "via", "a", "AF_LOCAL", "socket", "that", "Firecracker", "creates", "NUMBER", "This", "means", "that", "a", "user", "of", "Firecracker", "has", "to", "start", "Firecracker", "poll", "some", "directory", "to", "figure", "out", "when", "the", "API", "endpoint", "appears", "send", "multiple", "request", "to", "configure", "a", "VM", "This", "be", "unfortunate", "because", "it", "requires", "quite", "a", "bit", "of", "code", "and", "a", "lot", "of", "synchronous", "and", "stateful", "interaction", "just", "to", "get", "a", "basic", "VM", "going", "NUMBER", "As", "an", "alternative", "I", "would", "propose", "handing", "in", "the", "static", "configuration", "of", "a", "VM", "vCPU", "configuration", "disks", "network", "devices", "NUMBER", "as", "a", "JSON", "file", "that", "be", "provide", "to", "Firecracker", "when", "it", "be", "start", "via", "a", "file", "or", "via", "stdin", "or", "if", "it", "s", "small", "via", "the", "command", "line", "NUMBER", "Firecracker", "then", "requires", "no", "additional", "interaction", "from", "starting", "the", "process", "to", "run", "guest", "code", "NUMBER", "This", "relate", "to", "NUMBER", "Or", "to", "put", "it", "differently", "Simple", "things", "should", "be", "simple", "complex", "things", "should", "be", "possible", "NUMBER", "Alan", "Kay", "I", "like", "the", "idea", "of", "use", "a", "JSON", "file", "as", "its", "format", "can", "be", "largely", "the", "same", "as", "the", "REST", "API", "NUMBER", "I", "understand", "why", "the", "REST", "API", "be", "there", "but", "for", "development", "it", "seems", "that", "everyone", "has", "some", "scripts", "around", "to", "start", "firecracker", "with", "curl", "invocations", "NUMBER", "I", "probably", "have", "three", "variations", "NUMBER", "I", "understand", "why", "the", "REST", "API", "be", "there", "I", "would", "be", "really", "interested", "in", "the", "rationale", "for", "why", "the", "initial", "VM", "configuration", "be", "designed", "this", "way", "NUMBER", "From", "my", "current", "understanding", "I", "think", "this", "add", "lots", "of", "complexity", "on", "both", "the", "user", "and", "Firecracker", "s", "side", "of", "things", "NUMBER", "I", "did", "some", "crude", "measurements", "and", "from", "starting", "firecracker", "to", "actually", "run", "the", "VM", "i", "NUMBER", "e", "NUMBER", "get", "a", "response", "to", "the", "InstanceStart", "request", "it", "takes", "more", "than", "NUMBER", "ms", "NUMBER", "NUMBER", "ms", "be", "waiting", "for", "the", "API", "socket", "to", "appear", "and", "the", "rest", "be", "for", "the", "NUMBER", "request", "via", "the", "AF_LOCAL", "socket", "NUMBER", "I", "d", "assume", "that", "most", "of", "this", "would", "go", "away", "when", "just", "use", "a", "config", "file", "NUMBER", "Hi", "I", "have", "just", "submitted", "an", "RFC", "pull", "request", "that", "provides", "a", "rough", "proposal", "implementation", "that", "works", "NUMBER", "I", "have", "experimented", "with", "it", "a", "bit", "and", "on", "my", "NUMBER", "years", "old", "MacBook", "I", "be", "able", "to", "start", "and", "complete", "new", "VM", "within", "NUMBER", "ms", "NUMBER", "However", "for", "some", "reason", "exiting", "new", "executable", "process", "takes", "additional", "NUMBER", "NUMBER", "ms", "NUMBER", "Please", "see", "output", "of", "strace", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "init_logger", "fail", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "VMM", "received", "instance", "start", "command", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "vstate", "NUMBER", "rs", "NUMBER", "Guest", "memory", "starts", "at", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "f", "NUMBER", "OSv", "v", "NUMBER", "NUMBER", "ge", "NUMBER", "d", "NUMBER", "edb", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Guest", "boot", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "Booted", "up", "in", "NUMBER", "ms", "Hello", "from", "C", "code", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Vmm", "be", "stopping", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Failed", "to", "log", "metrics", "while", "stopping", "Logger", "was", "not", "initialized", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Vmm", "be", "REALLY", "about", "to", "stop", "NUMBER", "INFO", "sa_restorer", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rt_sigaction", "SIGBUS", "sa_handler", "NUMBER", "x", "NUMBER", "sa_mask", "sa_flags", "SA_RESTORER", "SA_ONSTACK", "SA_SIGINFO", "sa_restorer", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "sigaltstack", "NULL", "ss_sp", "NULL", "ss_flags", "SS_DISABLE", "ss_size", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mmap", "NULL", "NUMBER", "PROT_READ", "PROT_WRITE", "MAP_PRIVATE", "MAP_ANONYMOUS", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "sigaltstack", "ss_sp", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ss_flags", "NUMBER", "ss_size", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "brk", "NULL", "NUMBER", "xa", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "brk", "NUMBER", "xa", "NUMBER", "NUMBER", "xa", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "open", "etc", "localtime", "O_RDONLY", "O_NONBLOCK", "O_CLOEXEC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fstat", "NUMBER", "st_mode", "S_IFREG", "NUMBER", "st_size", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mmap", "NULL", "NUMBER", "PROT_READ", "MAP_SHARED", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "START", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "n", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rt_sigaction", "SIGSYS", "sa_handler", "NUMBER", "x", "NUMBER", "sa_mask", "RTMIN", "RT_", "NUMBER", "RT_", "NUMBER", "sa_flags", "SA_RESTORER", "SA_SIGINFO", "sa_restorer", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rt_sigaction", "SIGBUS", "sa_handler", "NUMBER", "x", "NUMBER", "sa_mask", "RTMIN", "RT_", "NUMBER", "RT_", "NUMBER", "sa_flags", "SA_RESTORER", "SA_SIGINFO", "sa_restorer", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rt_sigaction", "SIGSEGV", "sa_handler", "NUMBER", "x", "NUMBER", "sa_mask", "RTMIN", "RT_", "NUMBER", "RT_", "NUMBER", "sa_flags", "SA_RESTORER", "SA_SIGINFO", "sa_restorer", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "brk", "NUMBER", "xa", "NUMBER", "NUMBER", "xa", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "getrandom", "xfa", "x", "NUMBER", "x", "NUMBER", "x", "NUMBER", "b", "xb", "NUMBER", "xfc", "x", "NUMBER", "x", "NUMBER", "x", "NUMBER", "x", "NUMBER", "f", "xe", "NUMBER", "x", "NUMBER", "x", "NUMBER", "c", "xcb", "x", "NUMBER", "x", "NUMBER", "NUMBER", "GRND_NONBLOCK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "brk", "NUMBER", "xa", "NUMBER", "NUMBER", "xa", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "eventfd", "NUMBER", "NUMBER", "EFD_NONBLOCK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_create", "NUMBER", "EPOLL_CLOEXEC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_ctl", "NUMBER", "EPOLL_CTL_ADD", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "timerfd_create", "CLOCK_MONOTONIC", "TFD_CLOEXEC", "TFD_NONBLOCK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_ctl", "NUMBER", "EPOLL_CTL_ADD", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "open", "dev", "kvm", "O_RDWR", "O_CLOEXEC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fcntl", "NUMBER", "F_SETFD", "FD_CLOEXEC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_GET_API_VERSION", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_CHECK_EXTENSION", "KVM_CAP_IRQCHIP", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_CHECK_EXTENSION", "KVM_CAP_IOEVENTFD", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_CHECK_EXTENSION", "KVM_CAP_IRQFD", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_CHECK_EXTENSION", "KVM_CAP_SET_TSS_ADDR", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_CHECK_EXTENSION", "KVM_CAP_USER_MEMORY", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_CHECK_EXTENSION", "KVM_CAP_NR_MEMSLOTS", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_CREATE_VM", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_GET_VCPU_MMAP_SIZE", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "brk", "NUMBER", "xa", "NUMBER", "NUMBER", "xa", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_GET_SUPPORTED_CPUID", "nent", "NUMBER", "entries", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "eventfd", "NUMBER", "NUMBER", "EFD_NONBLOCK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "eventfd", "NUMBER", "NUMBER", "EFD_NONBLOCK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "eventfd", "NUMBER", "NUMBER", "EFD_NONBLOCK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "eventfd", "NUMBER", "NUMBER", "EFD_NONBLOCK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "brk", "NUMBER", "xa", "NUMBER", "NUMBER", "xa", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "open", "home", "wkozaczuk", "projects", "osv", "build", "release", "loader", "stripped", "NUMBER", "elf", "O_RDONLY", "O_CLOEXEC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fcntl", "NUMBER", "F_SETFD", "FD_CLOEXEC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fcntl", "NUMBER", "F_GETFD", "NUMBER", "x", "NUMBER", "flags", "FD_CLOEXEC", "NUMBER", "NUMBER", "NUMBER", "brk", "NUMBER", "xa", "NUMBER", "a", "NUMBER", "NUMBER", "xa", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "stat", "home", "wkozaczuk", "projects", "osv", "build", "release", "usr", "NUMBER", "raw", "st_mode", "S_IFREG", "NUMBER", "st_size", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "open", "tmp", "fc", "NUMBER", "log", "O_RDWR", "O_NONBLOCK", "O_CLOEXEC", "NUMBER", "ENOENT", "No", "such", "file", "or", "directory", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "clock_gettime", "CLOCK_PROCESS_CPUTIME_ID", "tv_sec", "NUMBER", "tv_nsec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mmap", "NULL", "NUMBER", "PROT_READ", "PROT_WRITE", "MAP_SHARED", "MAP_ANONYMOUS", "MAP_NORESERVE", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_USER_MEMORY_REGION", "slot", "NUMBER", "flags", "NUMBER", "guest_phys_addr", "NUMBER", "memory_size", "NUMBER", "userspace_addr", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_TSS_ADDR", "NUMBER", "xfffbd", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_CREATE_IRQCHIP", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_CREATE_PIT", "NUMBER", "NUMBER", "x", "NUMBER", "ffcefc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "open", "home", "wkozaczuk", "projects", "osv", "build", "release", "usr", "NUMBER", "raw", "O_RDWR", "O_CLOEXEC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fcntl", "NUMBER", "F_SETFD", "FD_CLOEXEC", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_END", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "eventfd", "NUMBER", "NUMBER", "EFD_NONBLOCK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "eventfd", "NUMBER", "NUMBER", "EFD_NONBLOCK", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IOEVENTFD", "NUMBER", "x", "NUMBER", "ffcefc", "NUMBER", "fc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IRQFD", "NUMBER", "x", "NUMBER", "ffcefc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "TIOCGWINSZ", "ws_row", "NUMBER", "ws_col", "NUMBER", "ws_xpixel", "NUMBER", "ws_ypixel", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "TCGETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "SNDCTL_TMR_START", "or", "TCSETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IRQFD", "NUMBER", "x", "NUMBER", "ffcefc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IRQFD", "NUMBER", "x", "NUMBER", "ffcefc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_IRQFD", "NUMBER", "x", "NUMBER", "ffcefc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_SET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "ELF", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_SET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_SET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "ELF", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_SET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_CREATE_VCPU", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mmap", "NULL", "NUMBER", "PROT_READ", "PROT_WRITE", "MAP_SHARED", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "b", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_CPUID", "NUMBER", "nent", "NUMBER", "entries", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_MSRS", "NUMBER", "xa", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_REGS", "rax", "NUMBER", "NUMBER", "rsp", "NUMBER", "x", "NUMBER", "ff", "NUMBER", "rbp", "NUMBER", "x", "NUMBER", "ff", "NUMBER", "NUMBER", "rip", "NUMBER", "x", "NUMBER", "ba", "NUMBER", "a", "rflags", "NUMBER", "x", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_FPU", "NUMBER", "x", "NUMBER", "ffcefc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_GET_SREGS", "cs", "base", "NUMBER", "xffff", "NUMBER", "limit", "NUMBER", "selector", "NUMBER", "type", "NUMBER", "present", "NUMBER", "dpl", "NUMBER", "db", "NUMBER", "s", "NUMBER", "l", "NUMBER", "g", "NUMBER", "avl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_SREGS", "cs", "base", "NUMBER", "limit", "NUMBER", "selector", "NUMBER", "type", "NUMBER", "present", "NUMBER", "dpl", "NUMBER", "db", "NUMBER", "s", "NUMBER", "l", "NUMBER", "g", "NUMBER", "avl", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_GET_LAPIC", "NUMBER", "x", "NUMBER", "ffcefc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "KVM_SET_LAPIC", "NUMBER", "x", "NUMBER", "ffcefc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_ctl", "NUMBER", "EPOLL_CTL_ADD", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_ctl", "NUMBER", "EPOLL_CTL_ADD", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "dup", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "rt_sigprocmask", "SIG_UNBLOCK", "RT_", "NUMBER", "RT_", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mmap", "NULL", "NUMBER", "PROT_NONE", "MAP_PRIVATE", "MAP_ANONYMOUS", "NUMBER", "NUMBER", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mprotect", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "a", "NUMBER", "NUMBER", "PROT_READ", "PROT_WRITE", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "clone", "child_stack", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "a", "NUMBER", "d", "NUMBER", "flags", "CLONE_VM", "CLONE_FS", "CLONE_FILES", "CLONE_SIGHAND", "CLONE_THREAD", "CLONE_SYSVSEM", "CLONE_SETTLS", "CLONE_PARENT_SETTID", "CLONE_CHILD_CLEARTID", "NUMBER", "x", "NUMBER", "parent_tidptr", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ab", "NUMBER", "tls", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ab", "NUMBER", "child_tidptr", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "ab", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "brk", "NUMBER", "xa", "NUMBER", "b", "NUMBER", "NUMBER", "xa", "NUMBER", "b", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "futex", "NUMBER", "x", "NUMBER", "a", "NUMBER", "FUTEX_WAKE_PRIVATE", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "futex", "NUMBER", "x", "NUMBER", "a", "NUMBER", "FUTEX_WAIT_PRIVATE", "NUMBER", "NULL", "NUMBER", "EAGAIN", "Resource", "temporarily", "unavailable", "NUMBER", "NUMBER", "NUMBER", "brk", "NUMBER", "xa", "NUMBER", "e", "NUMBER", "NUMBER", "xa", "NUMBER", "e", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "futex", "NUMBER", "x", "NUMBER", "a", "NUMBER", "FUTEX_WAKE_PRIVATE", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "prctl", "PR_SET_NO_NEW_PRIVS", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "prctl", "PR_SET_SECCOMP", "SECCOMP_MODE_FILTER", "len", "NUMBER", "filter", "NUMBER", "xa", "NUMBER", "ddc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "futex", "NUMBER", "x", "NUMBER", "fc", "NUMBER", "b", "NUMBER", "a", "NUMBER", "FUTEX_WAKE_PRIVATE", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "futex", "NUMBER", "xa", "NUMBER", "FUTEX_WAKE_PRIVATE", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "timerfd_settime", "NUMBER", "NUMBER", "it_interval", "tv_sec", "NUMBER", "tv_nsec", "NUMBER", "it_value", "tv_sec", "NUMBER", "tv_nsec", "NUMBER", "it_interval", "tv_sec", "NUMBER", "tv_nsec", "NUMBER", "it_value", "tv_sec", "NUMBER", "tv_nsec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_pwait", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_SET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_pwait", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_SET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "B", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_pwait", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_SET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "mnttab", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "fstab", "t", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_pwait", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_SET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "dev", "vblk", "NUMBER", "rofs", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_pwait", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_SET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "ELF", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_pwait", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "lseek", "NUMBER", "NUMBER", "SEEK_SET", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "ELF", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "P", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_pwait", "NUMBER", "EPOLLIN", "u", "NUMBER", "NUMBER", "u", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_ctl", "NUMBER", "EPOLL_CTL_DEL", "NUMBER", "NUMBER", "x", "NUMBER", "ffcefc", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "TIOCGWINSZ", "ws_row", "NUMBER", "ws_col", "NUMBER", "ws_xpixel", "NUMBER", "ws_ypixel", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "TCGETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "SNDCTL_TMR_START", "or", "TCSETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "exit_group", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "exited", "with", "NUMBER", "As", "you", "can", "see", "it", "start", "at", "NUMBER", "NUMBER", "NUMBER", "and", "exit_group", "was", "call", "at", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "milliseconds", "in", "this", "case", "but", "per", "last", "line", "NUMBER", "NUMBER", "NUMBER", "exited", "with", "NUMBER", "the", "process", "did", "not", "die", "for", "another", "NUMBER", "milliseconds", "NUMBER", "What", "could", "be", "a", "cause", "of", "it", "As", "far", "as", "I", "understand", "exit_group", "terminates", "all", "threads", "and", "in", "this", "case", "there", "be", "one", "vCPU", "thread", "apart", "from", "the", "main", "one", "NUMBER", "But", "I", "do", "not", "understand", "why", "it", "would", "take", "so", "long", "for", "this", "thread", "to", "terminate", "NUMBER", "Any", "ideas", "Where", "be", "a", "flaw", "in", "my", "implementation", "wkozaczuk", "Very", "nice", "One", "comment", "strace", "be", "usually", "not", "a", "good", "way", "to", "measure", "time", "because", "the", "system", "call", "tracing", "it", "uses", "be", "very", "inefficient", "NUMBER", "So", "likely", "the", "performance", "be", "better", "than", "what", "you", "measured", "above", "For", "measurements", "like", "these", "it", "s", "better", "to", "have", "the", "application", "itself", "generate", "timestamps", "and", "log", "them", "NUMBER", "the", "process", "did", "not", "die", "for", "another", "NUMBER", "milliseconds", "NUMBER", "What", "could", "be", "a", "cause", "of", "it", "Wild", "guess", "Maybe", "it", "only", "counts", "as", "fully", "destroyed", "once", "the", "parent", "process", "fetches", "the", "exit", "status", "via", "wait", "NUMBER", "Since", "my", "last", "comments", "I", "have", "made", "more", "improvement", "to", "my", "command", "line", "prototype", "of", "firecracker", "with", "aim", "to", "improve", "startup", "and", "shutdown", "time", "NUMBER", "The", "shutdown", "part", "be", "really", "where", "I", "think", "the", "crux", "of", "the", "problem", "lies", "NUMBER", "I", "ended", "up", "creating", "another", "branch", "for", "those", "interested", "LINK", "_optimize", "please", "see", "the", "diff", "between", "this", "and", "older", "sockless", "branch", "NUMBER", "I", "mostly", "followed", "blitz", "s", "advice", "to", "make", "vcpu", "thread", "child", "thread", "end", "orderly", "and", "main", "parent", "thread", "join", "it", "instead", "of", "calling", "exit", "on", "guest", "shutdown", "request", "NUMBER", "In", "general", "I", "managed", "to", "shave", "off", "around", "NUMBER", "ms", "but", "there", "be", "still", "NUMBER", "ms", "wasted", "somehow", "after", "the", "process", "terminates", "as", "report", "per", "time", "NUMBER", "Here", "be", "the", "average", "times", "from", "the", "NUMBER", "times", "run", "of", "firecracker", "launching", "simple", "OSv", "hello", "world", "example", "with", "single", "vCPU", "back", "to", "back", "NUMBER", "timestamp", "from", "the", "start", "to", "the", "point", "main", "thread", "joins", "with", "vCPU", "thread", "after", "guest", "exits", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "Complete", "time", "average", "NUMBER", "ms", "total", "NUMBER", "ms", "NUMBER", "timestamp", "from", "the", "start", "to", "the", "last", "statement", "in", "the", "main", "thread", "before", "the", "process", "gracefully", "terminates", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "Main", "complete", "time", "average", "NUMBER", "ms", "total", "NUMBER", "ms", "real", "NUMBER", "m", "NUMBER", "s", "user", "NUMBER", "m", "NUMBER", "s", "sys", "NUMBER", "m", "NUMBER", "s", "The", "average", "run", "per", "time", "be", "NUMBER", "ms", "As", "you", "can", "see", "on", "average", "it", "took", "NUMBER", "ms", "to", "execute", "firecracker_cmd", "per", "time", "NUMBER", "ms", "to", "execute", "firecracker_cmd", "main", "thread", "NUMBER", "ms", "from", "start", "until", "vCPU", "thread", "termination", "NUMBER", "ms", "from", "start", "until", "guest", "booted", "not", "part", "of", "the", "logs", "shown", "above", "NUMBER", "ms", "for", "OSv", "to", "boot", "report", "each", "time", "by", "OSv", "also", "not", "part", "of", "the", "logs", "shown", "above", "So", "there", "be", "NUMBER", "question", "outstanding", "NUMBER", "What", "be", "the", "time", "spent", "on", "between", "the", "point", "vCPU", "loop", "terminates", "and", "the", "point", "the", "main", "thread", "completes", "NUMBER", "What", "be", "the", "time", "spent", "on", "between", "the", "point", "the", "main", "thread", "completes", "and", "the", "point", "Linux", "considers", "the", "process", "really", "terminated", "per", "time", "utility", "Regarding", "NUMBER", "it", "might", "be", "useful", "to", "look", "at", "this", "fragment", "of", "strace", "output", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "vmm", "src", "vstate", "NUMBER", "rs", "NUMBER", "run_emulation", "loop", "broke", "NUMBER", "NUMBER", "NUMBER", "read", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Stopping", "from", "EpollDispatch", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "ERROR", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Gracefully", "terminated", "VMM", "control", "loop", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Vmm", "be", "stopping", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "epoll_ctl", "NUMBER", "EPOLL_CTL_DEL", "NUMBER", "NUMBER", "x", "NUMBER", "ffd", "NUMBER", "ff", "NUMBER", "b", "NUMBER", "c", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "TIOCGWINSZ", "ws_row", "NUMBER", "ws_col", "NUMBER", "ws_xpixel", "NUMBER", "ws_ypixel", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "TCGETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "ioctl", "NUMBER", "SNDCTL_TMR_START", "or", "TCSETS", "B", "NUMBER", "opost", "isig", "icanon", "echo", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "clock_gettime", "CLOCK_PROCESS_CPUTIME_ID", "tv_sec", "NUMBER", "tv_nsec", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "CPU", "us", "NUMBER", "CPU", "ms", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "munmap", "NUMBER", "x", "NUMBER", "f", "NUMBER", "e", "NUMBER", "d", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "vmm", "src", "lib", "NUMBER", "rs", "NUMBER", "Vmm", "be", "REALLY", "about", "to", "stop", "NUMBER", "again", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "munmap", "NUMBER", "x", "NUMBER", "f", "NUMBER", "e", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "close", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "write", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "a", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "T", "NUMBER", "NUMBER", "NUMBER", "anonymous", "instance", "INFO", "src", "bin", "firecracker_cmd", "NUMBER", "rs", "NUMBER", "Main", "complete", "time", "NUMBER", "us", "NUMBER", "ms", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "sigaltstack", "ss_sp", "NULL", "ss_flags", "SS_DISABLE", "ss_size", "NUMBER", "NULL", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "munmap", "NUMBER", "x", "NUMBER", "f", "NUMBER", "e", "NUMBER", "f", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "exit_group", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "exited", "with", "NUMBER", "real", "NUMBER", "m", "NUMBER", "s", "user", "NUMBER", "m", "NUMBER", "s", "sys", "NUMBER", "m", "NUMBER", "s", "These", "I", "think", "be", "new", "comparing", "to", "the", "output", "I", "report", "NUMBER", "weeks", "ago", "system", "call", "that", "come", "of", "firecracker_cmd", "orderly", "closing", "all", "file", "descriptors", "NUMBER", "I", "be", "new", "to", "Rust", "nor", "I", "understand", "firecracker", "code", "well", "but", "I", "think", "it", "comes", "from", "one", "one", "of", "the", "drop", "method", "destructors", "possibly", "triggered", "by", "destruction", "of", "the", "Vmm", "object", "EpollContext", "The", "bottom", "line", "be", "that", "at", "least", "in", "this", "example", "it", "takes", "NUMBER", "ms", "to", "close", "around", "NUMBER", "file", "descriptors", "one", "of", "them", "for", "dev", "kvm", "NUMBER", "As", "far", "as", "the", "NUMBER", "question", "goes", "I", "have", "no", "idea", "what", "happens", "there", "NUMBER", "There", "must", "be", "some", "other", "resources", "Linux", "needs", "to", "close", "when", "handle", "implicit", "exit", "NUMBER", "Any", "other", "ideas", "of", "what", "these", "could", "be", "Some", "wild", "guess", "be", "it", "because", "of", "seccomp", "A", "few", "weeks", "ago", "we", "had", "a", "design", "discussion", "about", "passing", "a", "configuration", "file", "instead", "of", "use", "API", "calls", "to", "configure", "the", "initial", "state", "of", "the", "microVM", "NUMBER", "Passing", "the", "configuration", "For", "passing", "the", "initial", "configuration", "we", "have", "a", "few", "options", "as", "follows", "NUMBER", "Command", "line", "parameters", "NUMBER", "At", "the", "moment", "we", "don", "t", "consider", "this", "to", "be", "the", "right", "way", "of", "implement", "an", "alternative", "to", "the", "API", "server", "NUMBER", "When", "we", "first", "start", "Firecracker", "we", "use", "command", "line", "parameters", "for", "configuring", "resources", "such", "as", "network", "boot", "source", "drives", "and", "others", "NUMBER", "While", "the", "API", "server", "was", "under", "development", "we", "choose", "to", "keep", "both", "configuration", "options", "available", "NUMBER", "As", "time", "pass", "we", "had", "a", "few", "bug", "due", "to", "the", "fact", "that", "the", "API", "server", "and", "the", "command", "line", "parameters", "were", "get", "out", "of", "sync", "NUMBER", "As", "it", "was", "hard", "to", "maintain", "them", "both", "with", "only", "the", "API", "server", "be", "use", "in", "production", "we", "decided", "to", "drop", "the", "command", "line", "parameters", "and", "today", "we", "still", "stand", "by", "this", "choice", "NUMBER", "For", "prototyping", "with", "Firecracker", "people", "can", "use", "firectl", "LINK", "microvm", "firectl", "a", "command", "line", "tool", "which", "allows", "you", "to", "configure", "and", "run", "microVMs", "without", "interacting", "with", "the", "API", "server", "NUMBER", "NUMBER", "Configuration", "file", "NUMBER", "The", "configuration", "file", "should", "be", "in", "the", "JSON", "format", "so", "that", "it", "can", "be", "easily", "deserialized", "into", "exist", "VMM", "structures", "use", "serde", "NUMBER", "In", "the", "meeting", "we", "identified", "some", "disadvantages", "to", "use", "file", "NUMBER", "For", "the", "usecases", "where", "the", "file", "need", "to", "be", "created", "on", "the", "fly", "it", "add", "overhead", "for", "write", "the", "file", "on", "the", "customer", "side", "NUMBER", "There", "will", "also", "be", "overhead", "on", "the", "Firecracker", "side", "when", "reading", "the", "configuration", "file", "NUMBER", "NUMBER", "Configuration", "via", "STDIN", "NUMBER", "This", "be", "currently", "the", "preferred", "mechanism", "for", "provide", "the", "initial", "configuration", "because", "it", "remove", "the", "overhead", "of", "creating", "file", "NUMBER", "If", "Firecracker", "users", "want", "to", "use", "file", "instead", "of", "STDIN", "this", "can", "be", "easily", "achieved", "by", "redirecting", "the", "file", "contents", "to", "STDIN", "NUMBER", "The", "configuration", "should", "be", "in", "JSON", "format", "and", "map", "to", "exist", "VMM", "structures", "NUMBER", "Running", "Firecracker", "without", "the", "API", "Running", "Firecracker", "without", "the", "API", "should", "be", "possible", "but", "the", "default", "will", "still", "be", "having", "the", "API", "server", "NUMBER", "We", "have", "two", "options", "here", "NUMBER", "Conditional", "compilation", "with", "Rust", "features", "for", "compile", "out", "the", "API", "server", "NUMBER", "This", "should", "be", "a", "default", "Firecracker", "feature", "that", "can", "be", "disable", "by", "use", "cargo", "build", "release", "no", "default", "features", "NUMBER", "The", "advantages", "of", "this", "solution", "be", "faster", "build", "time", "as", "you", "don", "t", "need", "to", "download", "all", "the", "hyper", "and", "tokio", "dependencies", "and", "smaller", "binary", "NUMBER", "It", "might", "make", "the", "code", "hard", "to", "read", "and", "add", "multiple", "cfgs", "if", "we", "have", "multiple", "usages", "of", "the", "api_server", "NUMBER", "I", "believe", "this", "isn", "t", "the", "case", "and", "this", "would", "be", "my", "favourite", "option", "NUMBER", "With", "this", "solution", "we", "don", "t", "need", "to", "pass", "a", "no", "api", "flag", "to", "Firecracker", "because", "we", "can", "use", "the", "cfg", "macro", "and", "the", "API", "code", "will", "be", "drop", "hence", "not", "executed", "NUMBER", "NUMBER", "No", "change", "NUMBER", "We", "can", "compile", "the", "API", "server", "code", "just", "not", "use", "it", "NUMBER", "We", "would", "also", "not", "initialize", "the", "API", "server", "start", "a", "thread", "for", "it", "NUMBER", "The", "advantages", "disadvantages", "be", "reversed", "from", "the", "conditional", "compilation", "option", "NUMBER", "Some", "other", "requirements", "Configuration", "via", "STDIN", "should", "be", "optional", "so", "that", "the", "change", "be", "backwards", "compatible", "NUMBER", "Configuration", "via", "STDIN", "should", "be", "possible", "when", "run", "with", "the", "API", "server", "as", "well", "NUMBER", "Deserializing", "the", "configuration", "For", "deserializing", "the", "configuration", "my", "proposal", "would", "be", "to", "define", "a", "VmmConfig", "structure", "that", "derives", "Serde", "deserialize", "NUMBER", "The", "field", "of", "this", "struct", "be", "vmm_config", "LINK", "microvm", "firecracker", "tree", "master", "vmm", "src", "vmm_config", "structures", "which", "also", "should", "implement", "serde", "deserialize", "NUMBER", "For", "this", "to", "work", "the", "Firecracker", "code", "should", "be", "refactored", "such", "that", "the", "NUMBER", "Config", "structures", "be", "static", "in", "the", "sense", "that", "they", "do", "not", "contain", "live", "objects", "like", "file", "eventfds", "or", "other", "similar", "objects", "NUMBER", "We", "should", "also", "discuss", "about", "having", "separate", "API", "and", "VMM", "structures", "where", "API", "structures", "be", "static", "and", "use", "serde", "serialize", "deserialize", "and", "the", "VMM", "structures", "can", "have", "live", "objects", "and", "probably", "shouldn", "t", "have", "the", "standard", "serialize", "deserialize", "functionality", "derived", "from", "serde", "NUMBER", "rust", "use", "serde", "Deserialize", "derive", "Deserialize", "serde", "deny_unknown_fields", "struct", "VmmConfig", "boot_source", "BootSourceConfig", "block_devices", "BlockDeviceConfigs", "network_devices", "NetwordDeviceConfigs", "NUMBER", "The", "current", "configuration", "file", "do", "not", "derive", "Serde", "deserialize", "at", "the", "moment", "so", "this", "also", "needs", "to", "be", "change", "NUMBER", "CC", "firecracker", "microvm", "compute", "capsule", "please", "let", "me", "know", "if", "you", "have", "any", "feedback", "other", "comments", "NUMBER", "Hi", "I", "like", "the", "STDIN", "configuration", "best", "NUMBER", "We", "can", "add", "a", "new", "parameter", "which", "represents", "that", "configuration", "data", "should", "be", "read", "from", "stdin", "NUMBER", "I", "guess", "we", "ll", "have", "to", "extend", "this", "over", "to", "the", "jailer", "as", "well", "NUMBER", "Regarding", "Running", "Firecracker", "without", "the", "API", "I", "d", "go", "with", "the", "second", "option", "for", "now", "NUMBER", "It", "looks", "difficult", "to", "cleanly", "separate", "the", "API", "server", "from", "the", "Vmm", "struct", "via", "conditional", "compilation", "until", "we", "do", "some", "pretty", "significant", "refactoring", "NUMBER", "I", "like", "the", "bit", "about", "having", "separate", "API", "and", "VMM", "structures", "at", "least", "where", "they", "wouldn", "t", "overlap", "perfectly", "and", "it", "s", "something", "we", "should", "pursue", "NUMBER", "However", "for", "the", "time", "be", "be", "there", "anything", "wrong", "with", "use", "a", "composition", "of", "the", "current", "API", "structures", "Hi", "I", "like", "the", "STDIN", "configuration", "best", "NUMBER", "We", "can", "add", "a", "new", "parameter", "which", "represents", "that", "configuration", "data", "should", "be", "read", "from", "stdin", "NUMBER", "I", "guess", "we", "ll", "have", "to", "extend", "this", "over", "to", "the", "jailer", "as", "well", "NUMBER", "Do", "you", "mean", "that", "we", "should", "only", "read", "the", "configuration", "from", "stdin", "when", "that", "flag", "be", "present", "Or", "that", "we", "should", "support", "both", "file", "and", "stdin", "I", "don", "t", "want", "to", "have", "them", "both", "honestly", "as", "it", "complicates", "the", "code", "for", "no", "good", "reason", "NUMBER", "I", "think", "we", "should", "stick", "to", "one", "either", "file", "or", "stdin", "NUMBER", "Regarding", "Running", "Firecracker", "without", "the", "API", "I", "d", "go", "with", "the", "second", "option", "for", "now", "NUMBER", "It", "looks", "difficult", "to", "cleanly", "separate", "the", "API", "server", "from", "the", "Vmm", "struct", "via", "conditional", "compilation", "until", "we", "do", "some", "pretty", "significant", "refactoring", "NUMBER", "Why", "do", "you", "say", "that", "vmm", "do", "not", "depend", "on", "api_server", "NUMBER", "I", "like", "the", "bit", "about", "having", "separate", "API", "and", "VMM", "structures", "at", "least", "where", "they", "wouldn", "t", "overlap", "perfectly", "and", "it", "s", "something", "we", "should", "pursue", "NUMBER", "However", "for", "the", "time", "be", "be", "there", "anything", "wrong", "with", "use", "a", "composition", "of", "the", "current", "API", "structures", "I", "think", "the", "problem", "be", "add", "more", "technical", "dept", "which", "I", "would", "very", "much", "like", "to", "avoid", "NUMBER", "To", "workaround", "this", "issue", "I", "think", "we", "can", "prioritize", "the", "aforementioned", "refactoring", "and", "block", "this", "issue", "till", "that", "be", "do", "NUMBER", "andreeaflorescu", "Thanks", "for", "the", "very", "nice", "write", "up", "NUMBER", "It", "really", "helps", "NUMBER", "I", "be", "definitely", "in", "favor", "of", "Configuration", "via", "STDIN", "most", "elegant", "and", "flexible", "NUMBER", "As", "far", "as", "Running", "Firecracker", "without", "API", "I", "be", "in", "favor", "of", "Conditional", "compilation", "mostly", "because", "of", "the", "smaller", "executable", "and", "fewer", "dependencies", "NUMBER", "Also", "it", "feels", "to", "me", "that", "somehow", "Passing", "the", "configuration", "and", "Running", "Firecracker", "without", "API", "deserve", "to", "be", "separate", "issue", "though", "very", "relate", "no", "Also", "I", "was", "wondering", "if", "the", "potential", "implementation", "should", "be", "part", "of", "a", "single", "PR", "or", "many", "smaller", "ones", "If", "many", "in", "what", "order", "way", "we", "should", "divide", "it", "to", "allow", "for", "best", "code", "and", "reviewing", "experience", "wkozaczuk", "I", "agree", "with", "you", "and", "run", "Firecracker", "without", "the", "API", "should", "be", "a", "separate", "issue", "NUMBER", "We", "can", "create", "a", "few", "more", "issue", "relate", "to", "this", "one", "and", "convert", "this", "one", "to", "a", "story", "aka", "we", "can", "track", "the", "progress", "of", "all", "other", "issue", "in", "this", "one", "NUMBER", "If", "we", "have", "multiple", "PRs", "be", "far", "more", "easier", "to", "review", "and", "the", "chance", "of", "get", "them", "merge", "fast", "be", "higher", "NUMBER", "I", "will", "think", "about", "a", "split", "that", "actually", "makes", "sense", "NUMBER", "But", "before", "that", "we", "should", "decide", "if", "we", "want", "to", "include", "the", "refactoring", "relate", "to", "separate", "structures", "for", "VMM", "and", "API", "NUMBER", "I", "be", "inclined", "to", "say", "yes", "as", "I", "be", "afraid", "that", "otherwise", "the", "code", "will", "be", "a", "bit", "spaghetti", "and", "parts", "of", "it", "will", "be", "throw", "away", "later", "NUMBER", "CC", "firecracker", "microvm", "compute", "capsule", "please", "take", "a", "look", "at", "the", "suggestions", "NUMBER", "Configuration", "via", "STDIN", "use", "same", "structs", "api", "as", "when", "configuring", "through", "unix", "socket", "be", "my", "preferred", "choice", "as", "well", "NUMBER", "Regarding", "the", "api", "server", "when", "run", "with", "stdin", "input", "I", "be", "leaning", "towards", "option", "NUMBER", "of", "simply", "not", "initializing", "starting", "the", "api", "thread", "NUMBER", "Conditional", "compilation", "brings", "in", "extra", "complexity", "on", "the", "test", "side", "and", "less", "versatility", "for", "customers", "NUMBER", "I", "don", "t", "see", "the", "argument", "of", "smaller", "attack", "surface", "as", "particularly", "strong", "in", "this", "case", "NUMBER", "As", "for", "separating", "resources", "structs", "into", "descriptor", "structs", "and", "functional", "structs", "it", "would", "be", "an", "improvement", "but", "I", "don", "t", "believe", "it", "necessary", "NUMBER", "Would", "be", "great", "if", "the", "person", "tackling", "this", "story", "would", "also", "tackle", "this", "particular", "topic", "but", "I", "wouldn", "t", "make", "it", "a", "requirement", "NUMBER", "API", "less", "Firecracker", "I", "don", "t", "find", "much", "value", "either", "in", "shrinking", "the", "binary", "size", "at", "the", "expense", "of", "cfg", "s", "NUMBER", "In", "any", "case", "if", "we", "have", "a", "solid", "use", "case", "for", "API", "less", "Firecracker", "we", "should", "track", "that", "separately", "stdin", "vs", "file", "stdin", "NUMBER", "I", "m", "thinking", "NUMBER", "firecracker", "stdin", "or", "something", "to", "tell", "Firecracker", "that", "it", "needs", "to", "listen", "to", "stdin", "NUMBER", "Otherwise", "why", "listen", "needlessly", "and", "try", "to", "parse", "incoming", "data", "as", "json", "I", "d", "like", "to", "have", "shared", "data", "structures", "between", "VMM", "and", "API", "which", "be", "what", "mostly", "we", "have", "now", "anyway", "It", "looks", "like", "we", "have", "an", "agreement", "regard", "file", "vs", "stdin", "and", "we", "want", "to", "move", "forward", "with", "stdin", "NUMBER", "As", "this", "be", "not", "necessarily", "relate", "to", "the", "other", "issue", "I", "propose", "track", "them", "in", "separate", "issue", "and", "resolving", "them", "in", "separate", "PRs", "NUMBER", "For", "this", "purpose", "I", "ve", "opened", "two", "issue", "Running", "Firecracker", "with", "no", "API", "LINK", "microvm", "firecracker", "issue", "NUMBER", "Split", "structures", "into", "configuration", "structures", "that", "be", "export", "via", "the", "VMM", "interface", "and", "internal", "VMM", "structures", "that", "should", "not", "be", "export", "LINK", "microvm", "firecracker", "issue", "NUMBER", "I", "think", "we", "should", "postpone", "the", "decision", "of", "use", "conditional", "compilation", "vs", "soft", "disable", "for", "now", "NUMBER", "Our", "API", "server", "be", "currently", "rather", "complex", "and", "brings", "in", "a", "lot", "of", "dependencies", "last", "time", "I", "checked", "there", "were", "NUMBER", "transient", "dependencies", "NUMBER", "It", "would", "be", "interesting", "to", "know", "how", "do", "the", "complexity", "of", "the", "api_server", "translates", "into", "memory", "and", "build", "time", "overhead", "NUMBER", "But", "since", "we", "be", "trying", "to", "implement", "our", "custom", "api_server", "and", "thus", "remove", "hyper", "and", "tokio", "I", "would", "say", "to", "take", "a", "decision", "after", "we", "start", "work", "on", "NUMBER", "My", "concern", "about", "the", "STDIN", "variant", "be", "that", "parsing", "JSON", "out", "of", "a", "stream", "be", "generally", "error", "prone", "if", "the", "document", "be", "badly", "formatted", "you", "might", "not", "be", "able", "to", "tell", "easily", "eg", "NUMBER", "miss", "or", "NUMBER", "Also", "from", "a", "usability", "standpoint", "JSON", "be", "not", "very", "human", "friendly", "in", "case", "you", "want", "to", "pre", "generate", "some", "configurations", "you", "need", "the", "parent", "process", "of", "firecracker", "to", "always", "open", "the", "config", "file", "to", "pass", "the", "filedescript", "as", "the", "STDIN", "of", "firecracker", "instead", "of", "just", "passing", "an", "argument", "NUMBER", "Is", "there", "be", "any", "reason", "not", "to", "support", "both", "file", "and", "STDIN", "This", "shouldn", "t", "be", "very", "complex", "to", "implement", "NUMBER", "Hi", "everyone", "In", "light", "of", "petreeftime", "s", "comment", "and", "thinking", "a", "bit", "more", "about", "the", "different", "implications", "of", "STDIN", "vs", "other", "ways", "of", "passing", "parameters", "how", "about", "actually", "use", "a", "single", "command", "line", "parameter", "to", "pass", "the", "entire", "JSON", "content", "for", "example", "NUMBER", "firecracker", "startup", "config", "ACTUAL_JSON_BODY", "NUMBER", "It", "seems", "easy", "to", "support", "having", "the", "actual", "JSON", "config", "in", "a", "file", "with", "this", "approach", "as", "well", "NUMBER", "We", "mention", "use", "command", "line", "parameters", "for", "configuration", "passing", "but", "I", "think", "we", "were", "still", "reminiscing", "about", "the", "old", "way", "of", "having", "different", "parameters", "for", "different", "VM", "configuration", "options", "such", "as", "vCPU", "number", "memory", "size", "etc", "NUMBER", "and", "not", "simply", "use", "the", "value", "of", "a", "single", "parameter", "to", "hold", "the", "entire", "JSON", "config", "NUMBER", "Also", "one", "problem", "of", "the", "STDIN", "approach", "that", "I", "totally", "forgot", "about", "initially", "be", "that", "the", "Firecracker", "process", "created", "by", "the", "jailer", "has", "STDIN", "bound", "to", "dev", "null", "whenever", "the", "daemonize", "flag", "be", "present", "and", "we", "d", "have", "to", "go", "around", "that", "somehow", "NUMBER", "x", "Build", "specific", "test", "pass", "x", "Functional", "specific", "test", "pass", "x", "Performance", "specific", "test", "pass", "x", "Security", "specific", "test", "pass", "x", "Remove", "all", "aarch", "NUMBER", "warnings", "x", "Add", "clippy", "test", "for", "aarch", "NUMBER", "specific", "regions", "x", "Create", "dockerfile", "for", "x", "NUMBER", "_", "NUMBER", "and", "aarch", "NUMBER", "x", "Create", "docker", "image", "for", "x", "NUMBER", "_", "NUMBER", "and", "aarch", "NUMBER", "x", "Update", "our", "CI", "so", "that", "it", "runs", "against", "aarch", "NUMBER", "instances", "x", "Add", "CI", "specific", "test", "for", "aarch", "NUMBER", "if", "needed", "NUMBER", "x", "Remove", "cross", "compilation", "relate", "code", "This", "looks", "more", "like", "Adding", "integration", "test", "for", "ARM", "NUMBER", "We", "should", "probably", "also", "add", "an", "issue", "for", "update", "our", "CI", "so", "that", "we", "can", "spawn", "ARM", "instances", "and", "run", "our", "integration", "test", "there", "NUMBER", "What", "do", "you", "say", "Hi", "dianpopa", "andreeaflorescu", "Are", "there", "any", "user", "manual", "to", "boot", "a", "microVM", "on", "arm", "NUMBER", "machine", "NUMBER", "It", "seems", "that", "the", "provide", "manual", "be", "for", "x", "NUMBER", "machine", "NUMBER", "Regards", "Haibo", "hi", "We", "do", "not", "yet", "have", "documentation", "for", "booting", "a", "microVM", "on", "arm", "NUMBER", "machine", "even", "though", "firecracker", "now", "has", "support", "for", "that", "NUMBER", "I", "be", "currently", "work", "on", "PRs", "that", "fix", "issue", "NUMBER", "and", "NUMBER", "Once", "those", "be", "merge", "I", "will", "start", "work", "on", "setting", "up", "the", "CI", "write", "documentation", "and", "assess", "performance", "NUMBER", "For", "the", "moment", "the", "ioctl", "for", "get", "dirty", "pages", "use", "for", "firecracker", "be", "available", "only", "for", "x", "NUMBER", "and", "x", "NUMBER", "_", "NUMBER", "We", "need", "to", "implement", "the", "equivalent", "for", "arm", "NUMBER", "See", "get_and_reset_dirty_page_bitmap", "function", "inside", "kvm", "src", "lib", "NUMBER", "rs", "Is", "there", "an", "ioctl", "on", "ARM", "support", "by", "KVM", "that", "will", "give", "you", "the", "dirty", "pages", "I", "fail", "to", "find", "something", "and", "I", "was", "considering", "disabling", "the", "LogDirtyPages", "functionality", "for", "ARM", "for", "now", "NUMBER", "Nope", "NUMBER", "The", "KVM", "API", "LINK", "marks", "the", "KVM_GET_DIRTY_LOG", "ioctl", "as", "x", "NUMBER", "specific", "NUMBER", "There", "seems", "to", "have", "be", "an", "attempt", "LINK", "arm", "kernel", "NUMBER", "November", "NUMBER", "html", "to", "add", "ARM", "support", "but", "I", "can", "t", "find", "any", "evidence", "of", "it", "having", "be", "merge", "we", "need", "to", "ask", "around", "NUMBER", "FYI", "I", "made", "the", "LogDirtyPages", "options", "available", "only", "on", "x", "NUMBER", "in", "this", "PR", "LINK", "microvm", "firecracker", "pull", "NUMBER", "Hi", "dianpopa", "andreeaflorescu", "KVM_GET_DIRTY_LOG", "api", "be", "not", "support", "on", "arm", "NUMBER", "platform", "it", "s", "a", "feature", "currently", "specific", "to", "x", "NUMBER", "architecture", "NUMBER", "Hi", "dianpopa", "andreeaflorescu", "KVM_GET_DIRTY_LOG", "api", "be", "not", "support", "on", "arm", "NUMBER", "platform", "it", "s", "a", "feature", "currently", "specific", "to", "x", "NUMBER", "architecture", "NUMBER", "It", "be", "support", "on", "all", "major", "architectures", "x", "NUMBER", "arm", "NUMBER", "mips", "powerpc", "s", "NUMBER", "x", "NUMBER", "The", "Documentation", "be", "outdate", "NUMBER", "What", "be", "I", "miss", "suzukikp", "you", "be", "right", "NUMBER", "We", "were", "looking", "at", "the", "documentation", "though", "so", "that", "s", "where", "the", "confusion", "was", "from", "I", "believe", "NUMBER", "Support", "for", "get", "dirty", "pages", "on", "aarch", "NUMBER", "was", "add", "in", "kvm", "ioctls", "NUMBER", "Since", "we", "be", "planning", "on", "remove", "the", "metric", "that", "relies", "on", "that", "capability", "no", "more", "work", "be", "needed", "in", "Firecracker", "NUMBER", "x", "Add", "support", "for", "VIRTIO_BLK_T_FLUSH", "NUMBER", "Flush", "request", "be", "currently", "not", "advertised", "during", "feature", "negotiation", "VIRTIO_BLK_F_FLUSH", "incorrectly", "handle", "i", "NUMBER", "e", "NUMBER", "the", "driver", "be", "incorrectly", "expected", "to", "pass", "a", "data", "descriptor", "so", "the", "request", "fail", "with", "DescriptorChainTooShort", "instead", "of", "Unsupported", "see", "NUMBER", "NUMBER", "x", "Look", "into", "request", "parsing", "currently", "exactly", "three", "descriptors", "be", "expected", "with", "each", "request", "a", "request", "header", "descriptor", "a", "data", "descriptor", "and", "a", "status", "descriptor", "the", "virtio", "spec", "doesn", "t", "appear", "to", "force", "this", "exact", "layout", "on", "the", "driver", "what", "if", "the", "driver", "splits", "the", "data", "across", "multiple", "descriptors", "NUMBER", "There", "be", "a", "couple", "of", "issue", "relate", "to", "the", "state", "of", "Firecracker", "logging", "right", "now", "The", "jailer", "logs", "all", "of", "its", "message", "to", "stdout", "err", "which", "be", "not", "really", "compatible", "with", "run", "daemonized", "NUMBER", "We", "should", "encourage", "customers", "to", "make", "an", "explicit", "choice", "regard", "the", "destination", "of", "logs", "metrics", "as", "oppose", "to", "having", "them", "off", "or", "sent", "to", "dev", "null", "by", "default", "NUMBER", "One", "solution", "be", "to", "ensure", "the", "user", "specifies", "destinations", "for", "logs", "and", "metrics", "via", "Jailer", "parameters", "NUMBER", "These", "can", "be", "pass", "on", "to", "Firecracker", "either", "as", "file", "descriptors", "or", "by", "name", "NUMBER", "This", "would", "benefit", "us", "a", "lot", "NUMBER", "For", "now", "we", "re", "going", "to", "have", "to", "run", "this", "through", "a", "different", "process", "to", "redirect", "stdout", "and", "stderr", "where", "we", "want", "them", "NUMBER", "I", "ve", "pick", "this", "up", "NUMBER", "I", "m", "still", "get", "it", "in", "the", "latest", "version", "For", "a", "temporary", "fix", "I", "use", "vmm", "log", "level", "fatal", "option", "with", "firectl", "The", "bindgened", "file", "needed", "for", "doing", "x", "NUMBER", "_", "NUMBER", "specific", "configuration", "bootparam", "NUMBER", "rs", "mpspec", "NUMBER", "rs", "msr_index", "NUMBER", "rs", "be", "autogenerated", "from", "committ", "NUMBER", "b", "NUMBER", "f", "NUMBER", "a", "NUMBER", "a", "NUMBER", "cc", "NUMBER", "f", "NUMBER", "bb", "NUMBER", "ef", "NUMBER", "c", "NUMBER", "d", "NUMBER", "a", "NUMBER", "of", "the", "linux", "kernel", "NUMBER", "That", "corresponds", "to", "NUMBER", "We", "should", "auto", "generate", "them", "from", "the", "NUMBER", "release", "NUMBER", "Make", "sure", "we", "also", "add", "PartialEq", "as", "a", "trait", "NUMBER", "When", "make", "this", "crate", "public", "this", "issue", "will", "should", "be", "solve", "NUMBER", "If", "firecracker", "be", "pass", "a", "multiqueue", "tap", "device", "created", "use", "ip", "tuntap", "add", "name", "tap", "NUMBER", "mode", "tap", "multi_queue", "It", "report", "an", "error", "PUT", "network", "interfaces", "iface_id", "NUMBER", "putGuestNetworkInterfaceByIdBadRequest", "FaultMessage", "Cannot", "open", "TAP", "device", "NUMBER", "Invalid", "name", "permissions", "NUMBER", "CreateTap", "Os", "code", "NUMBER", "kind", "InvalidInput", "message", "Invalid", "argument", "Does", "firecracker", "not", "support", "multi", "queue", "tap", "devices", "cc", "nmeyerhans", "egernst", "Hello", "you", "be", "right", "we", "do", "not", "currently", "support", "multi", "queue", "TAP", "devices", "NUMBER", "We", "might", "at", "some", "point", "because", "it", "s", "a", "relatively", "low", "hanging", "fruit", "but", "there", "be", "no", "clear", "plan", "right", "now", "NUMBER", "Hey", "alexandruag", "pardon", "me", "if", "I", "m", "miss", "be", "it", "feasible", "to", "return", "an", "error", "here", "so", "it", "be", "clear", "In", "our", "case", "we", "determined", "there", "s", "an", "error", "because", "we", "notice", "firecracker", "was", "creating", "its", "own", "tap", "instead", "of", "utilizing", "ours", "NUMBER", "Being", "more", "explicit", "may", "be", "helpful", "On", "multi", "queue", "tap", "devices", "I", "ve", "just", "read", "a", "bit", "of", "the", "docs", "to", "understand", "what", "they", "do", "NUMBER", "Now", "I", "m", "wondering", "what", "the", "use", "case", "for", "them", "be", "NUMBER", "egernst", "what", "be", "Kata", "use", "it", "for", "raduweiss", "On", "multi", "queue", "tap", "devices", "I", "ve", "just", "read", "a", "bit", "of", "the", "docs", "to", "understand", "what", "they", "do", "NUMBER", "Now", "I", "m", "wondering", "what", "the", "use", "case", "for", "them", "be", "NUMBER", "egernst", "what", "be", "Kata", "use", "it", "for", "We", "use", "multiqueue", "to", "achieve", "higher", "throughput", "NUMBER", "We", "scale", "up", "the", "number", "of", "queues", "based", "on", "the", "number", "of", "vCPUs", "till", "we", "reach", "the", "point", "of", "diminished", "returns", "NUMBER", "Inside", "Kata", "we", "enable", "multiple", "queues", "also", "on", "the", "interface", "NUMBER", "This", "helps", "when", "guest", "be", "active", "on", "many", "connections", "at", "the", "same", "time", "with", "traffic", "run", "between", "guests", "guest", "to", "host", "or", "guest", "to", "an", "external", "system", "NUMBER", "This", "helps", "when", "guest", "be", "active", "on", "many", "connections", "at", "the", "same", "time", "with", "traffic", "run", "between", "guests", "guest", "to", "host", "or", "guest", "to", "an", "external", "system", "NUMBER", "LINK", "us", "red_hat_enterprise_linux", "NUMBER", "html", "virtualization_tuning_and_optimization_guide", "sect", "virtualization_tuning_optimization_guide", "networking", "techniques", "Hey", "alexandruag", "pardon", "me", "if", "I", "m", "miss", "be", "it", "feasible", "to", "return", "an", "error", "here", "so", "it", "be", "clear", "In", "our", "case", "we", "determined", "there", "s", "an", "error", "because", "we", "notice", "firecracker", "was", "creating", "its", "own", "tap", "instead", "of", "utilizing", "ours", "NUMBER", "Being", "more", "explicit", "may", "be", "helpful", "Yea", "provide", "friendlier", "non", "misleading", "error", "message", "be", "definitely", "something", "we", "ll", "iterate", "through", "PRs", "welcome", "D", "NUMBER", "The", "part", "where", "Firecracker", "starts", "creating", "interfaces", "by", "itself", "when", "run", "with", "the", "appropriate", "capabilities", "be", "tricker", "to", "get", "rid", "of", "due", "to", "how", "open", "create", "works", "for", "TAP", "interfaces", "NUMBER", "We", "could", "check", "for", "the", "existence", "of", "the", "specified", "interface", "beforehand", "but", "that", "s", "kinda", "awkward", "and", "add", "overhead", "NUMBER", "Btw", "why", "be", "you", "run", "Firecracker", "with", "elevated", "privileges", "Vsock", "I", "guess", "Yea", "provide", "friendlier", "non", "misleading", "error", "message", "be", "definitely", "something", "we", "ll", "iterate", "through", "PRs", "welcome", "D", "NUMBER", "The", "part", "where", "Firecracker", "starts", "creating", "interfaces", "by", "itself", "when", "run", "with", "the", "appropriate", "capabilities", "be", "tricker", "to", "get", "rid", "of", "due", "to", "how", "open", "create", "works", "for", "TAP", "interfaces", "NUMBER", "We", "could", "check", "for", "the", "existence", "of", "the", "specified", "interface", "beforehand", "but", "that", "s", "kinda", "awkward", "and", "add", "overhead", "NUMBER", "Btw", "why", "be", "you", "run", "Firecracker", "with", "elevated", "privileges", "Vsock", "I", "guess", "alexandruag", "we", "pre", "create", "the", "network", "interface", "and", "send", "it", "into", "firecracker", "NUMBER", "Yes", "we", "need", "vsock", "today", "as", "we", "need", "a", "method", "to", "setup", "a", "communication", "channel", "between", "the", "host", "and", "the", "agent", "we", "run", "within", "the", "VM", "NUMBER", "We", "be", "open", "to", "alternate", "mechanisms", "too", "NUMBER", "Currently", "we", "find", "the", "vsock", "be", "the", "one", "that", "be", "easiest", "for", "us", "to", "use", "with", "firecracker", "as", "kata", "already", "has", "support", "for", "the", "same", "NUMBER", "We", "also", "support", "virtio", "serial", "but", "firecracker", "currently", "do", "not", "have", "support", "for", "it", "NUMBER", "The", "current", "experimental", "vsock", "support", "makes", "use", "of", "vhost", "and", "elevated", "privileges", "be", "required", "for", "the", "initial", "setup", "phase", "NUMBER", "The", "final", "vsock", "implementation", "will", "not", "be", "vhost", "based", "so", "you", "ll", "be", "able", "to", "run", "Firecracker", "as", "a", "regular", "process", "NUMBER", "We", "re", "also", "interested", "by", "this", "NUMBER", "For", "now", "we", "re", "just", "setting", "a", "bigger", "TX", "queue", "on", "our", "tap", "interfaces", "NUMBER", "firecracker", "build", "from", "HEAD", "of", "master", "commit", "NUMBER", "b", "NUMBER", "fe", "NUMBER", "c", "NUMBER", "shows", "NUMBER", "firecracker", "version", "firecracker", "NUMBER", "This", "be", "clearly", "a", "few", "commit", "ahead", "of", "the", "NUMBER", "release", "NUMBER", "It", "would", "be", "better", "if", "it", "report", "something", "like", "NUMBER", "TAG", "to", "easier", "identify", "the", "version", "note", "the", "or", "just", "the", "commit", "hash", "for", "none", "release", "NUMBER", "If", "firecracker", "was", "build", "from", "a", "dirty", "repository", "ie", "local", "un", "commit", "change", "indicating", "this", "with", "dirty", "would", "also", "help", "NUMBER", "Would", "the", "output", "of", "git", "describe", "do", "the", "trick", "Release", "commit", "NUMBER", "ad", "NUMBER", "b", "NUMBER", "b", "NUMBER", "f", "NUMBER", "b", "NUMBER", "d", "NUMBER", "ec", "NUMBER", "c", "NUMBER", "d", "NUMBER", "e", "NUMBER", "fccfcddfd", "bash", "git", "describe", "NUMBER", "ad", "NUMBER", "b", "NUMBER", "b", "NUMBER", "f", "NUMBER", "b", "NUMBER", "d", "NUMBER", "ec", "NUMBER", "c", "NUMBER", "d", "NUMBER", "e", "NUMBER", "fccfcddfd", "v", "NUMBER", "Following", "commit", "d", "NUMBER", "c", "NUMBER", "bda", "NUMBER", "e", "NUMBER", "ec", "NUMBER", "eb", "NUMBER", "feccee", "NUMBER", "f", "NUMBER", "fea", "bash", "git", "describe", "d", "NUMBER", "c", "NUMBER", "bda", "NUMBER", "e", "NUMBER", "ec", "NUMBER", "eb", "NUMBER", "feccee", "NUMBER", "f", "NUMBER", "fea", "v", "NUMBER", "NUMBER", "gd", "NUMBER", "c", "NUMBER", "yeah", "that", "looks", "good", "NUMBER", "I", "would", "maybe", "also", "add", "a", "dirty", "if", "build", "from", "a", "repository", "which", "do", "not", "have", "uncommitted", "change", "NUMBER", "The", "reliable", "way", "to", "get", "this", "be", "with", "something", "like", "this", "git", "update", "index", "q", "refresh", "git", "diff", "index", "quiet", "HEAD", "NUMBER", "echo", "dirty", "the", "update", "index", "be", "necessary", "in", "case", "the", "timestamp", "but", "no", "the", "content", "of", "a", "local", "file", "change", "Within", "another", "code", "base", "I", "use", "the", "following", "for", "generating", "a", "short", "description", "for", "version", "report", "GIT_VERSION", "shell", "git", "no", "pager", "describe", "tags", "always", "dirty", "For", "a", "current", "checkout", "it", "report", "the", "version", "as", "v", "NUMBER", "NUMBER", "g", "NUMBER", "aa", "NUMBER", "rn", "I", "m", "confused", "be", "repos", "without", "uncommitted", "change", "dirty", "I", "was", "thinking", "the", "opposite", "NUMBER", "aghecenco", "You", "be", "correct", "in", "your", "understanding", "in", "that", "dirty", "implies", "the", "presence", "of", "uncommitted", "change", "NUMBER", "This", "model", "be", "support", "by", "the", "version", "string", "generate", "by", "git", "itself", "in", "the", "example", "I", "have", "provide", "NUMBER", "There", "be", "a", "library", "which", "do", "exactly", "that", "LINK", "version", "NUMBER", "git_version", "index", "NUMBER", "html", "However", "quickly", "pulling", "it", "into", "Firecracker", "gives", "me", "a", "No", "such", "file", "or", "directory", "error", "inside", "the", "macro", "NUMBER", "Should", "I", "investigate", "this", "error", "further", "or", "be", "this", "the", "wrong", "way", "to", "go", "anyways", "because", "this", "add", "a", "new", "dependency", "May", "be", "LINK", "cab", "help", "Issue", "was", "fix", "by", "PR", "NUMBER", "Constantly", "run", "a", "fuzzer", "against", "guest", "facing", "attack", "surfaces", "including", "the", "entire", "device", "model", "as", "well", "as", "the", "MMDS", "interface", "NUMBER", "The", "Rust", "Fuzzing", "Authority", "LINK", "fuzz", "has", "a", "lot", "of", "resources", "that", "can", "help", "us", "get", "start", "with", "this", "NUMBER", "What", "be", "the", "timeline", "for", "this", "I", "be", "new", "to", "rust", "but", "would", "like", "to", "try", "this", "fuzz", "test", "NUMBER", "There", "s", "nobody", "work", "on", "this", "right", "now", "so", "no", "timeline", "either", "NUMBER", "If", "you", "want", "to", "give", "it", "a", "shot", "it", "s", "all", "yours", "NUMBER", "We", "do", "have", "some", "previous", "work", "here", "for", "virtio", "fuzzing", "which", "we", "also", "plan", "to", "add", "to", "the", "repo", "but", "in", "the", "fuzzing", "world", "the", "more", "the", "merrier", "NUMBER", "A", "good", "first", "step", "might", "be", "to", "figure", "out", "how", "to", "run", "NUMBER", "fuzzing", "session", "against", "one", "category", "of", "attack", "surface", "and", "then", "leave", "the", "continuous", "integration", "part", "for", "another", "step", "NUMBER", "We", "do", "have", "some", "previous", "work", "here", "for", "virtio", "fuzzing", "Is", "that", "code", "somewhere", "available", "to", "grok", "konradwilk", "not", "at", "this", "time", "NUMBER", "Updating", "title", "description", "to", "better", "reflect", "the", "path", "we", "re", "taking", "here", "NUMBER", "The", "how", "to", "contribute", "part", "of", "the", "website", "links", "directly", "to", "the", "slack", "cahnnel", "rather", "than", "the", "invite", "flow", "to", "join", "it", "NUMBER", "I", "think", "this", "can", "be", "fix", "with", "an", "easy", "change", "from", "LINK", "microvm", "NUMBER", "slack", "NUMBER", "com", "to", "LINK", "microvm", "screenshot_", "NUMBER", "NUMBER", "LINK", "images", "NUMBER", "githubusercontent", "NUMBER", "com", "NUMBER", "NUMBER", "b", "NUMBER", "b", "NUMBER", "f", "NUMBER", "e", "NUMBER", "e", "NUMBER", "NUMBER", "f", "a", "NUMBER", "c", "NUMBER", "bac", "NUMBER", "png", "Should", "be", "fix", "NUMBER", "Please", "verify", "probably", "refresh", "your", "browser", "cache", "and", "close", "the", "issue", "if", "things", "look", "good", "NUMBER", "raduweiss", "fast", "turn", "around", "Just", "verify", "NUMBER", "So", "excited", "about", "this", "project", "NUMBER", "The", "feedback", "loop", "be", "impressive", "FYI", "Slack", "be", "now", "saying", "This", "invite", "link", "be", "no", "longer", "active", "NUMBER", "Please", "check", "with", "the", "person", "who", "shared", "it", "with", "you", "to", "see", "if", "there", "s", "a", "new", "link", "available", "NUMBER", "when", "I", "follow", "the", "link", "LINK", "microvm", "on", "the", "website", "NUMBER", "We", "want", "to", "have", "vsock", "support", "to", "enable", "container", "integration", "but", "we", "don", "t", "want", "to", "use", "vhost", "since", "that", "would", "be", "another", "attack", "surface", "to", "directly", "exposes", "the", "host", "kernel", "NUMBER", "Instead", "we", "ll", "write", "another", "back", "end", "for", "vsock", "NUMBER", "See", "NUMBER", "Currenty", "virtio", "vsock", "exists", "in", "the", "codebase", "as", "an", "experimental", "development", "only", "rust", "feature", "with", "the", "vhost", "implementation", "NUMBER", "Updating", "this", "issue", "with", "the", "current", "state", "of", "affairs", "as", "discussed", "internally", "NUMBER", "The", "main", "focus", "be", "on", "maintaining", "the", "Firecracker", "security", "barrier", "NUMBER", "I", "NUMBER", "e", "NUMBER", "Firecracker", "must", "control", "all", "data", "exchanged", "between", "the", "guest", "and", "the", "host", "NUMBER", "Using", "the", "stock", "vsock", "via", "vhost", "mechanism", "would", "bypass", "this", "barrier", "allowing", "a", "malicious", "guest", "to", "pass", "data", "directly", "to", "the", "host", "kernel", "NUMBER", "Currently", "I", "see", "two", "possible", "approaches", "to", "have", "both", "vsock", "and", "our", "security", "barrier", "NUMBER", "Emulate", "a", "vsock", "device", "via", "a", "different", "back", "end", "on", "the", "host", "e", "NUMBER", "g", "NUMBER", "a", "unix", "socket", "NUMBER", "That", "would", "mean", "the", "guest", "end", "would", "use", "AF_VSOCK", "while", "the", "host", "end", "AF_UNIX", "NUMBER", "pro", "vhost", "be", "not", "use", "at", "all", "so", "no", "new", "attack", "surface", "be", "add", "con", "add", "complexity", "to", "make", "AF_UNIX", "and", "AF_VSOCK", "work", "together", "con", "non", "standard", "vsock", "use", "requires", "the", "user", "to", "write", "more", "Firecracker", "specific", "code", "NUMBER", "Use", "vhost", "as", "back", "end", "for", "an", "emulated", "vsock", "device", "with", "a", "twist", "NUMBER", "I", "NUMBER", "e", "NUMBER", "implement", "both", "device", "specific", "and", "driver", "specific", "behavior", "in", "Firecracker", "such", "that", "both", "the", "guest", "and", "vhost", "think", "they", "re", "taking", "to", "each", "other", "while", "they", "re", "actually", "talking", "to", "Firecracker", "NUMBER", "This", "might", "work", "since", "vhost", "doesn", "t", "depend", "on", "KVM", "but", "needs", "further", "investigating", "test", "NUMBER", "pro", "standard", "AF_VSOCK", "functionality", "on", "both", "ends", "no", "Firecracker", "specific", "code", "required", "from", "the", "user", "con", "still", "use", "vhost", "code", "new", "attack", "surface", "all", "data", "fed", "into", "vhost", "be", "strictly", "controlled", "by", "Firecracker", "though", "I", "m", "inclined", "towards", "the", "latter", "and", "I", "ll", "need", "to", "test", "it", "since", "it", "s", "just", "a", "hypothesis", "at", "the", "moment", "NUMBER", "Will", "update", "here", "in", "a", "couple", "of", "weeks", "NUMBER", "An", "example", "of", "option", "NUMBER", "can", "be", "find", "in", "LINK", "_virtio_sock", "NUMBER", "c", "Update", "internal", "discussion", "has", "settled", "on", "approach", "no", "NUMBER", "The", "guest", "end", "would", "be", "an", "emulated", "AF_VSOCK", "socket", "while", "the", "host", "end", "would", "be", "provide", "via", "an", "AF_LOCAL", "AF_UNIX", "socket", "NUMBER", "This", "will", "require", "establishing", "some", "convention", "to", "support", "vsock", "ports", "such", "as", "appending", "the", "port", "number", "to", "the", "host", "end", "unix", "socket", "file", "path", "e", "NUMBER", "g", "NUMBER", "path", "to", "host_socket", "NUMBER", "sock", "NUMBER", "NUMBER", "Also", "from", "the", "host", "end", "this", "will", "require", "at", "least", "one", "listener", "one", "socket", "per", "guest", "since", "each", "Firecracker", "VMM", "be", "designed", "to", "be", "isolated", "and", "independent", "NUMBER", "If", "anybody", "track", "this", "issue", "has", "any", "input", "please", "feel", "free", "to", "chime", "in", "NUMBER", "There", "be", "details", "not", "decided", "upon", "yet", "so", "we", "d", "appreciate", "any", "input", "into", "make", "this", "feature", "easier", "to", "integrate", "for", "Firecracker", "users", "NUMBER", "dhrgit", "Trying", "to", "make", "sure", "I", "understand", "the", "proposal", "here", "NUMBER", "With", "the", "chosen", "approach", "no", "NUMBER", "you", "will", "basically", "implement", "some", "sort", "of", "translation", "abstraction", "layer", "in", "Firecracker", "from", "AF_UNIX", "to", "AF_VSOCK", "NUMBER", "By", "AF_VSOCK", "emulation", "in", "the", "guest", "I", "guess", "you", "mean", "you", "be", "thinking", "about", "write", "a", "virtio", "driver", "that", "would", "communicate", "with", "the", "Firecracker", "backend", "and", "that", "would", "expose", "an", "AF_VSOCK", "socket", "from", "the", "guest", "perspective", "be", "that", "right", "I", "don", "t", "have", "a", "good", "grasp", "on", "potential", "performance", "issue", "relate", "to", "this", "approach", "but", "it", "d", "be", "nice", "to", "include", "stefanha", "in", "this", "discussion", "since", "he", "s", "vsock", "maintainer", "and", "I", "m", "sure", "he", "could", "give", "some", "valuable", "input", "here", "NUMBER", "Approach", "NUMBER", "be", "comparable", "to", "port", "forwarding", "NUMBER", "It", "s", "fine", "if", "you", "control", "all", "applications", "and", "the", "protocols", "they", "speak", "NUMBER", "If", "you", "wish", "to", "support", "exist", "applications", "then", "you", "may", "be", "forced", "to", "make", "invasive", "change", "to", "those", "applications", "When", "communication", "involves", "exchanging", "network", "address", "information", "over", "an", "exist", "connection", "the", "host", "application", "receiving", "AF_VSOCK", "address", "information", "would", "be", "confused", "because", "that", "address", "isn", "t", "directly", "usable", "with", "AF_LOCAL", "NUMBER", "Also", "managing", "port", "forwarding", "complicates", "things", "if", "you", "wish", "to", "allow", "users", "to", "add", "their", "own", "applications", "but", "be", "easy", "with", "a", "fix", "set", "of", "applications", "that", "you", "control", "NUMBER", "sboeuf", "There", "shouldn", "t", "be", "a", "need", "for", "any", "vsock", "driver", "change", "NUMBER", "I", "meant", "Firecracker", "would", "emulate", "a", "vsock", "device", "that", "works", "with", "the", "guest", "vsock", "driver", "NUMBER", "So", "nothing", "change", "on", "the", "guest", "driver", "end", "NUMBER", "On", "the", "host", "side", "though", "the", "only", "way", "to", "support", "AF_VSOCK", "would", "be", "via", "vhost", "NUMBER", "Since", "the", "dominant", "opinion", "be", "to", "avoid", "add", "vhost", "as", "a", "new", "dependency", "and", "attack", "surface", "we", "need", "to", "find", "another", "solution", "NUMBER", "The", "propose", "approach", "to", "use", "an", "AF_UNIX", "socket", "be", "what", "hyperkit", "LINK", "do", "and", "be", "linked", "to", "above", "by", "rn", "NUMBER", "This", "do", "impose", "some", "limitations", "since", "there", "s", "no", "perfect", "translation", "between", "AF_VSOCK", "and", "AF_UNIX", "NUMBER", "Both", "the", "host", "apps", "and", "the", "guest", "apps", "will", "need", "to", "be", "aware", "of", "these", "limitations", "in", "order", "to", "establish", "a", "communication", "channel", "NUMBER", "The", "implementation", "details", "be", "not", "yet", "set", "so", "my", "proposal", "be", "to", "use", "this", "issue", "here", "to", "discuss", "them", "and", "come", "up", "with", "a", "solution", "that", "makes", "sense", "to", "everyone", "NUMBER", "Is", "it", "one", "AF_UNIX", "socket", "per", "guest", "or", "one", "AF_UNIX", "socket", "per", "AF_VSOCK", "port", "I", "think", "either", "would", "work", "for", "firecracker", "containerd", "but", "we", "expect", "to", "use", "multiple", "ports", "and", "would", "need", "to", "handle", "multiplexing", "if", "there", "s", "only", "a", "single", "AF_UNIX", "socket", "per", "guest", "NUMBER", "dhrgit", "samuelkarp", "mcastelino", "and", "I", "talked", "about", "the", "approach", "you", "re", "about", "to", "take", "NUMBER", "From", "a", "Kata", "Containers", "perspective", "it", "should", "be", "fine", "as", "we", "can", "tweak", "the", "application", "kata", "runtime", "and", "kata", "shim", "in", "this", "case", "to", "handle", "the", "AF_UNIX", "socket", "instead", "of", "the", "regular", "AF_VSOCK", "one", "NUMBER", "Now", "from", "an", "implementation", "perspective", "we", "were", "discussing", "how", "there", "were", "two", "distincts", "use", "cases", "that", "you", "need", "to", "handle", "depending", "if", "the", "application", "run", "inside", "the", "VM", "runs", "as", "__Server__", "the", "virtio_vsock", "device", "will", "be", "the", "one", "run", "the", "server", "exposing", "an", "AF_UNIX", "socket", "to", "the", "host", "NUMBER", "The", "core", "logic", "will", "retrieve", "the", "vsock", "frames", "through", "the", "virtqueues", "and", "will", "run", "one", "AF_UNIX", "socket", "server", "per", "vsock", "port", "use", "in", "the", "VM", "NUMBER", "I", "can", "imagine", "the", "user", "of", "Firecracker", "specify", "the", "guest", "CID", "and", "a", "root", "directory", "path", "where", "to", "create", "the", "sockets", "NUMBER", "You", "will", "need", "some", "sort", "of", "convention", "so", "that", "the", "user", "knows", "how", "to", "find", "the", "created", "socket", "name", "inside", "this", "directory", "where", "you", "could", "have", "several", "sockets", "all", "relate", "to", "a", "specific", "port", "NUMBER", "Another", "approach", "might", "be", "to", "let", "the", "user", "create", "a", "virtio_vsock", "device", "per", "CID", "port", "pair", "in", "which", "case", "the", "socket", "path", "could", "be", "also", "fully", "provide", "by", "the", "user", "NUMBER", "__Client__", "This", "case", "means", "we", "expect", "to", "run", "the", "server", "on", "the", "host", "side", "NUMBER", "The", "user", "will", "have", "to", "provide", "a", "full", "socket", "path", "where", "it", "expects", "to", "listen", "from", "and", "this", "will", "expose", "to", "the", "guest", "a", "single", "port", "NUMBER", "Globally", "you", "will", "proxy", "everything", "through", "the", "virtio_vsock", "device", "NUMBER", "Let", "me", "know", "if", "I", "m", "miss", "something", "or", "if", "I", "actually", "misunderstood", "parts", "of", "the", "design", "NUMBER", "dhrgit", "samuelkarp", "rn", "mcastelino", "and", "I", "thought", "about", "a", "slightly", "different", "approach", "that", "would", "not", "require", "the", "wrapper", "translation", "between", "AF_UNIX", "and", "AF_VSOCK", "NUMBER", "The", "idea", "would", "be", "to", "create", "a", "new", "AF_VSOCK", "implementation", "in", "kernel", "we", "need", "a", "brand", "new", "kernel", "module", "for", "this", "purpose", "something", "like", "vsock_user", "NUMBER", "ko", "get", "rid", "of", "all", "the", "vhost", "part", "NUMBER", "Bottom", "line", "the", "kernel", "executes", "socket", "callbacks", "on", "behalf", "of", "the", "application", "on", "the", "host", "request", "some", "interactions", "with", "the", "socket", "but", "instead", "of", "having", "vhost_vsock", "NUMBER", "ko", "interacting", "with", "the", "guest", "memory", "virtqueues", "directly", "it", "would", "copy", "data", "frames", "come", "from", "the", "app", "to", "the", "firecracker", "virtio", "vsock", "device", "NUMBER", "We", "could", "have", "virtio", "vsock", "setting", "things", "up", "with", "the", "kernel", "by", "registering", "a", "CID", "associated", "to", "a", "file", "descriptor", "NUMBER", "When", "the", "kernel", "receives", "some", "socket", "connection", "matching", "the", "same", "CID", "it", "would", "dump", "the", "data", "to", "the", "file", "descriptor", "previously", "registered", "NUMBER", "It", "would", "remain", "virtio", "vsock", "responsibility", "to", "write", "those", "data", "to", "the", "guest", "memory", "NUMBER", "This", "approach", "be", "very", "similar", "to", "the", "one", "you", "propose", "since", "it", "prevents", "the", "kernel", "from", "interacting", "directly", "with", "the", "virtqueues", "NUMBER", "It", "be", "also", "similar", "in", "the", "way", "that", "the", "kernel", "would", "still", "be", "the", "one", "passing", "data", "from", "the", "application", "in", "userspace", "to", "the", "virtio", "vsock", "device", "also", "in", "userspace", "NUMBER", "The", "__main__", "benefit", "of", "this", "approach", "be", "that", "you", "could", "run", "unmodified", "applications", "since", "they", "would", "still", "talk", "to", "an", "AF_VSOCK", "socket", "NUMBER", "The", "__second__", "benefit", "be", "that", "virtio", "vsock", "device", "will", "not", "have", "to", "figure", "out", "a", "non", "standard", "way", "to", "translate", "AF_UNIX", "connections", "into", "AF_VSOCK", "ones", "NUMBER", "The", "__main__", "drawback", "of", "this", "approach", "be", "that", "we", "would", "need", "to", "introduce", "a", "new", "kernel", "module", "but", "long", "term", "this", "could", "be", "reused", "by", "a", "bunch", "of", "applications", "that", "would", "simply", "encapsulate", "the", "data", "that", "could", "be", "shared", "across", "a", "cluster", "of", "VMs", "for", "instance", "NUMBER", "Basically", "this", "would", "make", "vsock", "more", "portable", "NUMBER", "Anyway", "let", "me", "know", "what", "you", "think", "about", "this", "approach", "cc", "stefanha", "sboeuf", "A", "vhost_user", "transport", "be", "technically", "not", "necessary", "since", "vhost_vsock", "already", "provides", "the", "same", "functionality", "to", "any", "userspace", "process", "NUMBER", "While", "it", "might", "not", "be", "obvious", "at", "first", "glance", "vhost_vsock", "be", "not", "tied", "to", "virtualization", "NUMBER", "You", "don", "t", "need", "to", "expose", "vhost_vsock", "to", "a", "guest", "NUMBER", "vhost_vsock", "be", "just", "a", "way", "of", "claiming", "a", "CID", "and", "transferring", "vsock", "message", "to", "from", "userspace", "NUMBER", "The", "main", "difference", "between", "reusing", "vhost_vsock", "and", "implement", "vhost_user", "be", "the", "userspace", "API", "vhost", "ioctls", "eventfd", "vs", "a", "tap", "like", "file", "descriptor", "NUMBER", "Both", "of", "these", "drivers", "still", "have", "to", "parse", "vsock", "message", "in", "order", "to", "hand", "them", "to", "net", "vmw_vsock", "af_vsock", "NUMBER", "c", "there", "be", "control", "message", "not", "just", "payloads", "NUMBER", "The", "security", "argument", "becomes", "whether", "you", "believe", "parsing", "an", "equivalent", "header", "from", "a", "tap", "like", "file", "descriptor", "be", "more", "secure", "than", "parsing", "the", "header", "from", "the", "vring", "NUMBER", "In", "other", "words", "the", "vsock_user", "code", "could", "also", "have", "bug", "that", "lead", "to", "a", "host", "kernel", "compromise", "NUMBER", "If", "you", "be", "willing", "to", "accept", "that", "risk", "then", "I", "think", "it", "makes", "more", "sense", "to", "reuse", "vhost_vsock", "NUMBER", "ko", "without", "exposing", "it", "to", "the", "guest", "NUMBER", "This", "will", "save", "you", "a", "lot", "of", "time", "now", "and", "maintenance", "in", "the", "future", "NUMBER", "stefanha", "While", "it", "might", "not", "be", "obvious", "at", "first", "glance", "vhost_vsock", "be", "not", "tied", "to", "virtualization", "NUMBER", "I", "can", "see", "that", "since", "the", "memory", "regions", "given", "to", "vhost_vsock", "don", "t", "have", "to", "be", "guest", "memory", "they", "could", "be", "any", "process", "memory", "on", "the", "host", "NUMBER", "The", "main", "difference", "between", "reusing", "vhost_vsock", "and", "implement", "vhost_user", "be", "the", "userspace", "API", "vhost", "ioctls", "eventfd", "vs", "a", "tap", "like", "file", "descriptor", "NUMBER", "How", "would", "I", "register", "a", "CID", "to", "the", "driver", "from", "the", "virtio", "vsock", "in", "userspace", "if", "the", "only", "interface", "be", "a", "file", "descriptor", "Both", "of", "these", "drivers", "still", "have", "to", "parse", "vsock", "message", "in", "order", "to", "hand", "them", "to", "net", "vmw_vsock", "af_vsock", "NUMBER", "c", "there", "be", "control", "message", "not", "just", "payloads", "NUMBER", "The", "security", "argument", "becomes", "whether", "you", "believe", "parsing", "an", "equivalent", "header", "from", "a", "tap", "like", "file", "descriptor", "be", "more", "secure", "than", "parsing", "the", "header", "from", "the", "vring", "NUMBER", "Well", "I", "thought", "the", "point", "was", "that", "because", "you", "receive", "a", "vsock", "frame", "through", "the", "vring", "and", "because", "the", "data", "has", "to", "be", "retrieved", "based", "on", "what", "be", "provide", "by", "the", "vring", "it", "d", "be", "better", "to", "make", "this", "happen", "from", "userspace", "NUMBER", "The", "virtio", "code", "in", "the", "VMM", "itself", "would", "reach", "out", "the", "virtqueue", "buffer", "point", "by", "the", "descriptor", "table", "and", "in", "case", "of", "a", "malicious", "guest", "putting", "wrong", "address", "in", "the", "descriptor", "table", "it", "would", "not", "be", "able", "to", "access", "some", "random", "memory", "on", "the", "host", "NUMBER", "Instead", "by", "having", "the", "vrings", "processed", "by", "vhost", "in", "kernel", "you", "leave", "the", "possibility", "to", "a", "malicious", "guest", "to", "access", "any", "address", "on", "the", "host", "NUMBER", "I", "might", "be", "miss", "something", "but", "I", "thought", "that", "was", "the", "main", "security", "concern", "here", "NUMBER", "The", "parsing", "of", "each", "frame", "can", "subsequently", "happen", "in", "kernel", "but", "at", "least", "we", "ensure", "the", "data", "be", "parsed", "be", "not", "come", "from", "somewhere", "else", "than", "the", "guest", "memory", "NUMBER", "stefanha", "The", "main", "difference", "between", "reusing", "vhost_vsock", "and", "implement", "vhost_user", "be", "the", "userspace", "API", "vhost", "ioctls", "eventfd", "vs", "a", "tap", "like", "file", "descriptor", "NUMBER", "How", "would", "I", "register", "a", "CID", "to", "the", "driver", "from", "the", "virtio", "vsock", "in", "userspace", "if", "the", "only", "interface", "be", "a", "file", "descriptor", "The", "tun", "tap", "driver", "uses", "an", "ioctl", "to", "register", "the", "interface", "NUMBER", "Something", "similar", "could", "be", "do", "for", "the", "vhost_user", "fd", "NUMBER", "But", "we", "should", "first", "discuss", "whether", "vhost_user", "be", "necessary", "NUMBER", "Both", "of", "these", "drivers", "still", "have", "to", "parse", "vsock", "message", "in", "order", "to", "hand", "them", "to", "net", "vmw_vsock", "af_vsock", "NUMBER", "c", "there", "be", "control", "message", "not", "just", "payloads", "NUMBER", "The", "security", "argument", "becomes", "whether", "you", "believe", "parsing", "an", "equivalent", "header", "from", "a", "tap", "like", "file", "descriptor", "be", "more", "secure", "than", "parsing", "the", "header", "from", "the", "vring", "NUMBER", "Well", "I", "thought", "the", "point", "was", "that", "because", "you", "receive", "a", "vsock", "frame", "through", "the", "vring", "and", "because", "the", "data", "has", "to", "be", "retrieved", "based", "on", "what", "be", "provide", "by", "the", "vring", "it", "d", "be", "better", "to", "make", "this", "happen", "from", "userspace", "NUMBER", "The", "virtio", "code", "in", "the", "VMM", "itself", "would", "reach", "out", "the", "virtqueue", "buffer", "point", "by", "the", "descriptor", "table", "and", "in", "case", "of", "a", "malicious", "guest", "putting", "wrong", "address", "in", "the", "descriptor", "table", "it", "would", "not", "be", "able", "to", "access", "some", "random", "memory", "on", "the", "host", "NUMBER", "Instead", "by", "having", "the", "vrings", "processed", "by", "vhost", "in", "kernel", "you", "leave", "the", "possibility", "to", "a", "malicious", "guest", "to", "access", "any", "address", "on", "the", "host", "NUMBER", "Here", "be", "the", "vhost_vsock", "solution", "that", "be", "not", "expose", "to", "the", "guest", "The", "VMM", "opens", "dev", "vhost", "vsock", "and", "issue", "ioctls", "to", "set", "the", "guest", "s", "CID", "and", "a", "userspace", "memory", "region", "where", "message", "will", "be", "placed", "NUMBER", "The", "VMM", "emulates", "the", "virtio", "vsock", "device", "NUMBER", "Virtqueue", "processing", "be", "do", "by", "the", "VMM", "NUMBER", "It", "takes", "message", "from", "the", "virtqueue", "and", "sanity", "checks", "them", "NUMBER", "It", "may", "also", "copy", "data", "buffers", "to", "from", "guest", "memory", "if", "the", "goal", "be", "never", "to", "expose", "guest", "RAM", "to", "the", "host", "kernel", "NUMBER", "The", "virtio", "vsock", "device", "constructs", "new", "virtio", "vsock", "message", "in", "the", "userspace", "memory", "region", "registered", "with", "vhost", "vsock", "and", "signals", "the", "kick", "eventfd", "NUMBER", "The", "host", "kernel", "vhost_vsock", "module", "then", "processes", "those", "message", "and", "communicates", "with", "AF_VSOCK", "sockets", "on", "the", "host", "NUMBER", "Replies", "from", "host", "AF_VSOCK", "sockets", "come", "back", "in", "the", "reverse", "direction", "NUMBER", "vhost_vsock", "signals", "the", "notify", "eventfd", "which", "the", "VMM", "be", "monitoring", "NUMBER", "The", "virtio", "vsock", "device", "emulation", "code", "takes", "reply", "message", "from", "the", "userspace", "memory", "region", "and", "places", "them", "into", "the", "vring", "in", "guest", "RAM", "and", "notifies", "the", "guest", "NUMBER", "This", "way", "the", "guest", "never", "directly", "interacts", "with", "vhost_vsock", "NUMBER", "vhost_vsock", "serves", "only", "as", "the", "API", "for", "communicating", "with", "the", "host", "kernel", "network", "stack", "NUMBER", "In", "this", "solution", "the", "guest", "vrings", "be", "processed", "by", "the", "VMM", "not", "by", "vhost_vsock", "NUMBER", "vhost_vsock", "plays", "the", "same", "role", "as", "vhost_user", "it", "never", "touches", "the", "guest", "s", "vrings", "NUMBER", "I", "might", "be", "miss", "something", "but", "I", "thought", "that", "was", "the", "main", "security", "concern", "here", "NUMBER", "We", "need", "input", "from", "folks", "who", "originally", "said", "they", "cannot", "use", "vhost_vsock", "for", "security", "reasons", "NUMBER", "There", "be", "a", "spectrum", "here", "from", "I", "don", "t", "want", "the", "host", "kernel", "network", "stack", "involved", "at", "all", "it", "s", "too", "risky", "and", "I", "only", "trust", "AF_UNIX", "to", "I", "just", "don", "t", "want", "the", "host", "kernel", "to", "process", "guest", "vrings", "NUMBER", "I", "m", "not", "sure", "what", "the", "consensus", "on", "this", "be", "in", "the", "Firecracker", "community", "NUMBER", "This", "way", "the", "guest", "never", "directly", "interacts", "with", "vhost_vsock", "NUMBER", "vhost_vsock", "serves", "only", "as", "the", "API", "for", "communicating", "with", "the", "host", "kernel", "network", "stack", "NUMBER", "This", "be", "quite", "an", "accurate", "description", "of", "the", "solution", "I", "ve", "be", "advocating", "NUMBER", "I", "NUMBER", "e", "NUMBER", "reconstruct", "and", "possibly", "sanitize", "the", "virtio", "vsock", "frames", "in", "the", "VMM", "userspace", "and", "only", "have", "the", "VMM", "interact", "with", "vhost", "NUMBER", "The", "main", "argument", "against", "it", "as", "I", "understood", "them", "were", "a", "vhost", "would", "be", "an", "extra", "dependency", "on", "the", "host", "and", "b", "sanitization", "code", "would", "be", "too", "complex", "NUMBER", "Perhaps", "rn", "would", "be", "better", "suited", "to", "go", "into", "more", "details", "on", "those", "argument", "NUMBER", "stefanha", "But", "we", "should", "first", "discuss", "whether", "vhost_user", "be", "necessary", "NUMBER", "Of", "course", "agreed", "here", "NUMBER", "This", "way", "the", "guest", "never", "directly", "interacts", "with", "vhost_vsock", "NUMBER", "vhost_vsock", "serves", "only", "as", "the", "API", "for", "communicating", "with", "the", "host", "kernel", "network", "stack", "NUMBER", "In", "this", "solution", "the", "guest", "vrings", "be", "processed", "by", "the", "VMM", "not", "by", "vhost_vsock", "NUMBER", "vhost_vsock", "plays", "the", "same", "role", "as", "vhost_user", "it", "never", "touches", "the", "guest", "s", "vrings", "NUMBER", "Now", "I", "get", "it", "You", "re", "still", "proxying", "things", "from", "the", "VMM", "but", "vhost_vsock", "interacts", "with", "another", "memory", "region", "that", "has", "be", "provide", "by", "the", "VMM", "not", "the", "vring", "buffers", "NUMBER", "And", "your", "description", "of", "the", "whole", "solution", "be", "very", "accurate", "and", "makes", "sense", "to", "me", "NUMBER", "Based", "on", "this", "I", "now", "understand", "why", "it", "do", "not", "make", "too", "much", "sense", "to", "introduce", "a", "new", "vsock_user", "driver", "NUMBER", "dhrgit", "vhost", "would", "be", "an", "extra", "dependency", "on", "the", "host", "Why", "do", "that", "matter", "since", "it", "s", "on", "the", "host", "sanitization", "code", "would", "be", "too", "complex", "Even", "with", "the", "AF_UNIX", "to", "AF_VSOCK", "solution", "wouldn", "t", "you", "be", "sanitizing", "frames", "received", "from", "vrings", "before", "to", "inject", "them", "into", "the", "kernel", "through", "the", "socket", "Looking", "forward", "to", "rn", "feedback", "rn", "Any", "feedback", "Apologies", "for", "the", "long", "delay", "in", "replying", "NUMBER", "I", "had", "a", "hectic", "schedule", "NUMBER", "Our", "main", "concern", "with", "use", "vhost", "be", "that", "there", "would", "be", "direct", "interaction", "of", "the", "guest", "with", "a", "complex", "in", "kernel", "component", "beyond", "MMIO", "NUMBER", "So", "the", "guest", "could", "provide", "arbitrary", "inputs", "and", "can", "try", "to", "exploit", "flaws", "in", "the", "in", "kernel", "implementation", "NUMBER", "Hence", "the", "proposal", "of", "implement", "the", "virtio", "vsock", "backend", "in", "firecracker", "a", "process", "which", "can", "be", "jailed", "NUMBER", "In", "my", "opinion", "this", "be", "a", "very", "important", "property", "NUMBER", "Now", "once", "we", "do", "that", "the", "next", "question", "be", "how", "to", "we", "expose", "the", "vsocks", "to", "other", "processes", "We", "could", "have", "the", "firecracker", "vsock", "backend", "basically", "proxy", "vsock", "in", "to", "the", "kernel", "NUMBER", "For", "that", "there", "seem", "to", "be", "two", "options", "either", "feeding", "stuff", "into", "rings", "directly", "after", "sanitizing", "or", "proxy", "at", "a", "higher", "level", "like", "a", "byte", "streams", "NUMBER", "I", "think", "the", "sanitizing", "be", "tricky", "to", "get", "right", "and", "you", "still", "risk", "the", "guest", "be", "able", "to", "more", "or", "less", "directly", "control", "the", "inputs", "into", "the", "kernel", "NUMBER", "If", "you", "proxy", "at", "a", "higher", "level", "like", "byte", "streams", "you", "basically", "terminate", "and", "re", "originate", "vsock", "connections", "and", "this", "be", "not", "much", "different", "to", "proxying", "to", "a", "AF_UNIX", "socket", "NUMBER", "I", "would", "think", "that", "AF_UNIX", "be", "better", "understood", "and", "test", "hardened", "and", "do", "not", "require", "the", "host", "kernel", "to", "be", "configured", "to", "include", "vsock", "support", "less", "code", "NUMBER", "Hence", "the", "suggestion", "to", "go", "with", "AF_UNIX", "NUMBER", "Thanks", "for", "the", "feedback", "rn", "I", "would", "think", "that", "AF_UNIX", "be", "better", "understood", "and", "test", "hardened", "and", "do", "not", "require", "the", "host", "kernel", "to", "be", "configured", "to", "include", "vsock", "support", "less", "code", "NUMBER", "I", "agree", "this", "looks", "a", "bit", "more", "secure", "but", "the", "price", "to", "pay", "be", "the", "introduction", "of", "some", "kind", "of", "hybrid", "protocol", "that", "will", "need", "to", "be", "handle", "by", "the", "application", "on", "the", "host", "NUMBER", "This", "means", "the", "application", "will", "not", "be", "compatible", "with", "other", "hypervisors", "unless", "specific", "modifications", "NUMBER", "Also", "bypassing", "the", "vsock", "kernel", "code", "like", "this", "we", "be", "definitely", "not", "contribute", "for", "make", "it", "better", "long", "term", "NUMBER", "I", "think", "the", "sanitizing", "be", "tricky", "to", "get", "right", "What", "about", "the", "complexity", "of", "translating", "AF_VSOCK", "into", "AF_UNIX", "I", "would", "think", "that", "AF_UNIX", "be", "better", "understood", "and", "test", "hardened", "and", "do", "not", "require", "the", "host", "kernel", "to", "be", "configured", "to", "include", "vsock", "support", "less", "code", "NUMBER", "I", "agree", "this", "looks", "a", "bit", "more", "secure", "but", "the", "price", "to", "pay", "be", "the", "introduction", "of", "some", "kind", "of", "hybrid", "protocol", "that", "will", "need", "to", "be", "handle", "by", "the", "application", "on", "the", "host", "NUMBER", "This", "means", "the", "application", "will", "not", "be", "compatible", "with", "other", "hypervisors", "unless", "specific", "modifications", "NUMBER", "As", "mention", "in", "a", "previous", "comment", "one", "way", "to", "consider", "this", "trade", "off", "be", "whether", "you", "have", "a", "small", "fix", "number", "of", "vsock", "services", "you", "wish", "to", "run", "then", "the", "AF_UNIX", "approach", "be", "fine", "or", "whether", "vsock", "should", "be", "generally", "usable", "for", "user", "defined", "purposes", "then", "the", "AF_UNIX", "approach", "be", "impractical", "because", "it", "requires", "extensive", "modifications", "to", "Sockets", "API", "applications", "and", "some", "protocols", "may", "be", "unportable", "NUMBER", "Which", "use", "case", "do", "you", "have", "in", "mind", "Which", "use", "case", "do", "you", "have", "in", "mind", "I", "believe", "we", "be", "looking", "at", "the", "first", "use", "case", "NUMBER", "I", "NUMBER", "e", "NUMBER", "we", "be", "add", "vsock", "in", "order", "to", "enable", "container", "orchestrators", "to", "deploy", "and", "communicate", "with", "their", "agents", "inside", "the", "virtualized", "container", "microvm", "NUMBER", "We", "haven", "t", "explored", "in", "depth", "the", "idea", "of", "enabling", "generic", "applications", "over", "vsock", "NUMBER", "Is", "there", "demand", "for", "that", "stefanha", "your", "question", "be", "spot", "on", "and", "probably", "something", "we", "should", "have", "made", "more", "clear", "initially", "NUMBER", "Indeed", "we", "just", "want", "to", "support", "whatever", "minimum", "set", "of", "functionality", "works", "for", "container", "orchestrators", "we", "ve", "arrived", "here", "by", "taking", "in", "requirements", "from", "firecracker", "contaierd", "and", "Kata", "Containers", "NUMBER", "I", "think", "a", "good", "next", "step", "will", "be", "to", "detail", "the", "actual", "proposal", "and", "get", "feedback", "from", "container", "folks", "that", "want", "to", "use", "Firecracker", "as", "a", "microVM", "runtime", "NUMBER", "By", "the", "way", "if", "there", "s", "demand", "for", "the", "vhost", "vsock", "solution", "I", "m", "actually", "very", "much", "inclined", "to", "work", "towards", "a", "place", "where", "this", "vsock", "unix_socket", "and", "the", "full", "vsock", "vhost", "if", "there", "s", "demand", "for", "it", "be", "optional", "Firecracker", "features", "in", "the", "Rust", "sense", "that", "live", "in", "separate", "rust", "vmm", "LINK", "vmm", "crates", "NUMBER", "Such", "work", "would", "probably", "happen", "after", "the", "initial", "implementation", "we", "ll", "do", "now", "NUMBER", "raduweiss", "a", "place", "where", "this", "vsock", "unix_socket", "and", "the", "full", "vsock", "vhost", "if", "there", "s", "demand", "for", "it", "be", "optional", "Firecracker", "features", "in", "the", "Rust", "sense", "that", "live", "in", "separate", "rust", "vmm", "crates", "NUMBER", "That", "s", "definitely", "what", "the", "end", "goal", "should", "be", "IMO", "NUMBER", "As", "per", "the", "previous", "discussions", "vsock", "AF_UNIX", "sounds", "like", "a", "bit", "more", "secure", "approach", "but", "has", "a", "very", "limited", "scope", "run", "an", "agent", "inside", "the", "VM", "as", "the", "server", "side", "of", "the", "connection", "NUMBER", "This", "scope", "be", "fine", "for", "specific", "use", "cases", "but", "if", "someone", "try", "to", "use", "Firecracker", "for", "more", "general", "purpose", "without", "the", "container", "use", "case", "in", "mind", "we", "might", "want", "a", "full", "vsock", "AF_VSOCK", "support", "there", "NUMBER", "I", "m", "glad", "to", "see", "you", "re", "considering", "this", "as", "a", "viable", "option", "for", "Firecracker", "NUMBER", "Such", "work", "would", "probably", "happen", "after", "the", "initial", "implementation", "we", "ll", "do", "now", "NUMBER", "Agreed", "as", "part", "of", "this", "work", "will", "be", "reused", "shared", "with", "vsock", "AF_VSOCK", "accessing", "the", "queues", "while", "the", "backend", "proxying", "should", "be", "different", "NUMBER", "That", "s", "definitely", "what", "the", "end", "goal", "should", "be", "IMO", "NUMBER", "And", "I", "think", "this", "be", "the", "path", "we", "re", "on", "now", "Firecracker", "keep", "developing", "as", "a", "very", "narrow", "focused", "and", "optimized", "build", "block", "as", "per", "our", "charter", "statement", "_", "Our", "mission", "be", "to", "enable", "secure", "multi", "tenant", "minimal", "overhead", "execution", "of", "container", "and", "function", "workloads", "NUMBER", "_", "NUMBER", "and", "_nothing_", "more", "while", "rust", "vmm", "grows", "into", "a", "community", "project", "where", "the", "various", "crates", "provide", "really", "top", "quality", "VMM", "functionality", "and", "there", "s", "no", "problem", "if", "there", "more", "than", "one", "way", "to", "do", "things", "So", "if", "Firecracker", "users", "end", "up", "wanting", "the", "full", "vsock", "AF_VSOCK", "stack", "down", "the", "line", "then", "we", "ll", "take", "it", "from", "rust", "vmm", "and", "have", "it", "as", "a", "feature", "NUMBER", "If", "not", "it", "will", "still", "be", "available", "in", "rust", "vmm", "for", "use", "cases", "other", "than", "Firecracker", "NUMBER", "I", "guess", "a", "discussion", "for", "the", "near", "future", "once", "dhrgit", "comes", "up", "with", "his", "vsock", "AF_UNIX", "proposal", "be", "if", "vsock", "AF_UNIX", "be", "wanted", "in", "rust", "vmm", "sboeuf", "stefanha", "andreeaflorescu", "NUMBER", "raduweiss", "I", "guess", "a", "discussion", "for", "the", "near", "future", "once", "dhrgit", "comes", "up", "with", "his", "vsock", "AF_UNIX", "proposal", "be", "if", "vsock", "AF_UNIX", "be", "wanted", "in", "rust", "vmm", "As", "long", "as", "the", "scope", "be", "clear", "for", "potential", "users", "I", "can", "see", "how", "other", "VMM", "could", "benefit", "from", "it", "hence", "no", "reason", "not", "to", "have", "this", "in", "rust", "vmm", "NUMBER", "Hey", "everyone", "I", "ve", "posted", "NUMBER", "as", "an", "RFC", "on", "the", "propose", "vsock", "design", "NUMBER", "We", "ll", "be", "happy", "to", "hear", "everyone", "s", "feedback", "comments", "The", "chosen", "solution", "has", "a", "great", "property", "which", "has", "no", "dependency", "on", "the", "host", "kernel", "version", "NUMBER", "Update", "for", "visibility", "x", "old", "vhost", "based", "code", "remove", "x", "new", "vsock", "device", "add", "x", "new", "vsock", "components", "and", "data", "path", "device", "virtq", "TAG", "epoll", "handler", "TAG", "muxer", "TAG", "connection", "TAG", "unix", "socket", "x", "nested", "epoll", "dispatch", "mechanism", "for", "the", "vsock", "muxer", "x", "PoC", "level", "guest", "initiated", "connection", "multiplexing", "and", "data", "exchange", "x", "improve", "packet", "assembly", "logic", "to", "use", "properly", "aligned", "data", "x", "add", "traits", "and", "logic", "for", "generalizing", "the", "vsock", "backend", "i", "NUMBER", "e", "NUMBER", "unix", "sockets", "should", "be", "only", "one", "instance", "implementation", "x", "handle", "graceful", "connection", "shutdown", "x", "add", "flow", "control", "x", "handle", "incoming", "connections", "host", "initiated", "x", "add", "connection", "shutdown", "kill", "timers", "x", "major", "code", "cleanup", "x", "improve", "throughput", "currently", "really", "low", "NUMBER", "mbps", "add", "metrics", "and", "test", "Current", "code", "available", "in", "my", "WiP", "branch", "LINK", "wip", "The", "PR", "be", "up", "NUMBER", "Enhance", "the", "micro_http", "in", "order", "to", "replace", "hyper", "with", "it", "NUMBER", "The", "reason", "for", "doing", "this", "be", "to", "get", "rid", "of", "the", "multiple", "transient", "dependencies", "that", "come", "with", "hyper", "and", "tokio", "NUMBER", "x", "enhance", "micro_http", "implementation", "NUMBER", "x", "implement", "HTTP", "Connection", "NUMBER", "x", "implement", "HTTP", "Server", "NUMBER", "x", "plumbing", "to", "get", "rid", "of", "hyper", "dependency", "NUMBER", "x", "Move", "the", "code", "from", "kvm_sys", "src", "lib", "NUMBER", "rs", "to", "the", "kvm", "code", "because", "that", "code", "be", "not", "autogenerated", "NUMBER", "x", "Same", "for", "net_gen", "NUMBER", "There", "be", "remaining", "unwrap", "s", "in", "the", "code", "that", "cannot", "be", "avoided", "which", "lead", "to", "a", "not", "so", "user", "friendly", "error", "message", "be", "printed", "NUMBER", "All", "such", "failure", "cases", "should", "print", "a", "descriptive", "message", "along", "with", "the", "panic", "location", "NUMBER", "Lowering", "priority", "since", "this", "be", "not", "very", "impactful", "in", "practice", "NUMBER", "Is", "this", "just", "a", "case", "of", "replacing", "the", "unwrap", "calls", "with", "expect", "Is", "there", "a", "documented", "requirement", "for", "the", "format", "of", "the", "error", "message", "I", "ve", "made", "the", "change", "I", "think", "be", "required", "but", "I", "ve", "hit", "across", "an", "unexpect", "issue", "NUMBER", "Because", "I", "ve", "add", "an", "error", "string", "this", "has", "push", "some", "lines", "over", "the", "column", "limit", "for", "the", "rust", "style", "so", "cargo", "fmt", "has", "split", "them", "over", "multiple", "lines", "NUMBER", "Unfortunately", "this", "has", "push", "the", "code", "coverage", "percentage", "below", "the", "minimum", "FAILURES", "_____________________________________________", "test_coverage", "_____________________________________________", "integration_tests", "build", "test_coverage", "NUMBER", "py", "NUMBER", "in", "test_coverage", "assert", "coverage", "min_coverage", "coverage_low_msg", "E", "AssertionError", "Current", "code", "coverage", "NUMBER", "be", "below", "the", "target", "NUMBER", "NUMBER", "E", "assert", "NUMBER", "NUMBER", "What", "do", "I", "do", "I", "haven", "t", "made", "any", "change", "that", "warrant", "new", "unit", "test", "NUMBER", "Metrics", "x", "PUT", "mmds", "x", "PATCH", "mmds", "x", "GET", "mmds", "Logging", "x", "PUT", "mmds", "x", "PATCH", "mmds", "x", "GET", "mmds", "Others", "To", "Be", "Defined", "Metrics", "have", "be", "add", "NUMBER", "Logging", "still", "to", "come", "NUMBER", "We", "still", "need", "to", "add", "metrics", "for", "API", "request", "NUMBER", "We", "only", "have", "metrics", "for", "internal", "MMDS", "logic", "NUMBER", "I", "will", "update", "the", "description", "NUMBER", "This", "issue", "be", "really", "old", "NUMBER", "But", "I", "wanted", "to", "know", "if", "this", "be", "still", "needed", "and", "can", "I", "work", "on", "it", "andreeaflorescu", "Can", "you", "provide", "some", "example", "of", "metrics", "Also", "can", "you", "please", "add", "some", "more", "details", "NUMBER", "vbmade", "NUMBER", "we", "need", "to", "add", "API", "metrics", "that", "be", "incremented", "when", "PUT", "PATCH", "GET", "on", "mmds", "be", "call", "NUMBER", "First", "they", "need", "to", "be", "defined", "in", "the", "appropriate", "structure", "NUMBER", "We", "need", "to", "use", "PutRequestsMetrics", "LINK", "L", "NUMBER", "Patch", "LINK", "L", "NUMBER", "and", "GetRequestsMetrics", "LINK", "L", "NUMBER", "structures", "NUMBER", "After", "defining", "the", "metrics", "in", "those", "structures", "we", "should", "increment", "them", "when", "the", "appropriate", "request", "be", "handle", "NUMBER", "The", "entry", "point", "in", "the", "api_server", "that", "we", "re", "interested", "in", "be", "here", "LINK", "_server", "src", "parsed_request", "NUMBER", "rs", "L", "NUMBER", "NUMBER", "You", "can", "look", "at", "other", "API", "metrics", "examples", "in", "the", "machine_configuration", "LINK", "_server", "src", "request", "machine_configuration", "NUMBER", "rs", "module", "as", "this", "one", "has", "all", "metrics", "we", "re", "interested", "in", "put", "patch", "get", "NUMBER", "Sure", "NUMBER", "I", "ll", "take", "a", "look", "NUMBER", "Thanks", "for", "details", "andreeaflorescu", "NUMBER", "andreeaflorescu", "Referring", "to", "machine_configuration", "LINK", "_server", "src", "request", "machine_configuration", "NUMBER", "rs", "parse_get_machine_config", "calls", "METRICS", "NUMBER", "get_api_requests", "NUMBER", "machine_cfg_count", "NUMBER", "inc", "NUMBER", "Should", "mmds", "GET", "use", "same", "vbmade", "NUMBER", "you", "should", "define", "new", "entries", "for", "MMDS", "if", "they", "do", "not", "exist", "yet", "NUMBER", "machine_cfg_", "metrics", "refer", "to", "machine", "config", "NUMBER", "So", "we", "would", "need", "ones", "under", "METRICS", "NUMBER", "get_api_requests", "for", "MMDS", "as", "well", "NUMBER", "I", "understand", "that", "NUMBER", "I", "think", "I", "asked", "wrong", "question", "NUMBER", "Anyways", "I", "find", "MmdsMetrics", "struct", "at", "LINK", "L", "NUMBER", "Can", "it", "be", "use", "My", "assumption", "be", "it", "can", "t", "be", "use", "as", "by", "names", "it", "seems", "they", "be", "not", "defined", "to", "count", "number", "of", "GET", "request", "etc", "NUMBER", "I", "understand", "that", "NUMBER", "I", "think", "I", "asked", "wrong", "question", "NUMBER", "Anyways", "I", "find", "MmdsMetrics", "struct", "at", "LINK", "L", "NUMBER", "Can", "it", "be", "use", "No", "that", "be", "not", "the", "right", "structure", "NUMBER", "The", "MmdsMetrics", "structure", "that", "you", "find", "contains", "metrics", "relate", "to", "the", "internal", "functionality", "of", "the", "MMDS", "device", "and", "not", "relate", "to", "the", "API", "NUMBER", "The", "type", "of", "METRICS", "NUMBER", "get_api_requests", "be", "GetRequestsMetrics", "NUMBER", "If", "you", "look", "at", "the", "definition", "LINK", "L", "NUMBER", "you", "will", "see", "that", "there", "be", "one", "metric", "for", "each", "GET", "request", "NUMBER", "You", "need", "to", "add", "a", "mmds_count", "field", "there", "NUMBER", "There", "be", "corresponding", "structures", "for", "PUT", "PATCH", "API", "request", "as", "well", "NUMBER", "Does", "that", "make", "sense", "Indeed", "it", "do", "NUMBER", "I", "will", "go", "in", "that", "direction", "NUMBER", "We", "merge", "PARTUUID", "support", "but", "we", "currently", "supply", "no", "documentation", "example", "which", "describes", "the", "change", "required", "from", "the", "user", "NUMBER", "It", "s", "important", "to", "mention", "that", "in", "order", "to", "use", "this", "feature", "the", "customer", "has", "to", "provide", "a", "disk", "image", "rather", "than", "a", "partition", "image", "which", "must", "be", "configured", "in", "a", "certain", "way", "NUMBER", "We", "should", "also", "look", "into", "remove", "PARTUUID", "support", "since", "this", "be", "not", "strictly", "required", "customers", "can", "extract", "partitions", "from", "the", "disk", "image", "NUMBER", "Kcov", "report", "NUMBER", "coverage", "for", "all", "the", "file", "that", "be", "jailer", "relate", "NUMBER", "Interested", "in", "work", "on", "this", "to", "ramp", "up", "on", "Firecracker", "Just", "some", "context", "I", "be", "a", "graduate", "student", "at", "UT", "trying", "to", "know", "more", "about", "Firecracker", "and", "will", "be", "work", "with", "Xiang", "Gu", "NUMBER", "Does", "commenting", "here", "implicitly", "mean", "this", "issue", "gets", "assigned", "to", "me", "Rate", "limiting", "currently", "works", "by", "allowing", "or", "temporarily", "blocking", "virtio", "virtqueue", "request", "based", "on", "the", "request", "size", "and", "the", "ratelimiter", "token", "bucket", "remaining", "budget", "NUMBER", "We", "can", "easily", "reproduce", "scenarios", "where", "a", "virtio", "request", "can", "exceed", "the", "token", "bucket", "size", "in", "such", "scenarios", "traffic", "be", "forever", "blocked", "since", "there", "will", "never", "be", "enough", "budget", "to", "serve", "that", "request", "NUMBER", "Solutions", "NUMBER", "Augment", "the", "design", "and", "implementation", "to", "be", "able", "to", "do", "partial", "processing", "of", "virtio", "request", "NUMBER", "This", "means", "we", "need", "to", "do", "extra", "internal", "accounting", "of", "queue", "processing", "NUMBER", "NUMBER", "Enforce", "limits", "and", "validations", "in", "rate", "limiter", "configurations", "to", "disallow", "such", "scenarios", "NUMBER", "Hi", "acatangiu", "I", "be", "a", "student", "in", "UT", "Austin", "s", "virtualization", "class", "NUMBER", "We", "be", "a", "group", "of", "NUMBER", "and", "were", "wondering", "if", "this", "was", "still", "an", "open", "issue", "NUMBER", "If", "so", "could", "we", "get", "a", "little", "more", "information", "on", "what", "needs", "to", "be", "do", "georgepisaltu", "accidentally", "stumbled", "upon", "a", "TODO", "that", "still", "needs", "be", "remove", "LINK", "microvm", "firecracker", "blob", "NUMBER", "a", "NUMBER", "d", "NUMBER", "e", "NUMBER", "e", "NUMBER", "c", "NUMBER", "c", "NUMBER", "a", "NUMBER", "a", "NUMBER", "d", "NUMBER", "c", "NUMBER", "d", "NUMBER", "e", "src", "rate_limiter", "src", "lib", "NUMBER", "rs", "L", "NUMBER", "When", "booting", "Linux", "you", "get", "the", "following", "warning", "Firmware", "Bug", "CPU", "NUMBER", "APIC", "id", "mismatch", "NUMBER", "The", "cause", "be", "that", "we", "don", "t", "set", "the", "APIC", "ID", "in", "the", "extend", "topology", "with", "CPUID", "NUMBER", "We", "re", "still", "seeing", "this", "in", "our", "setup", "NUMBER", "Running", "a", "pretty", "recent", "firecracker", "version", "NUMBER", "Not", "sure", "why", "NUMBER", "I", "think", "it", "cropped", "up", "when", "we", "upgrade", "the", "kernel", "of", "our", "microvms", "NUMBER", "It", "seems", "to", "only", "happen", "on", "our", "AMD", "servers", "NUMBER", "Specifically", "these", "models", "AMD", "EPYC", "NUMBER", "P", "NUMBER", "Core", "AMD", "EPYC", "NUMBER", "P", "NUMBER", "Core", "Below", "the", "details", "of", "one", "occurrence", "of", "the", "issue", "NUMBER", "NUMBER", "smpboot", "CPU", "NUMBER", "AMD", "EPYC", "family", "NUMBER", "x", "NUMBER", "model", "NUMBER", "x", "NUMBER", "stepping", "NUMBER", "x", "NUMBER", "NUMBER", "Performance", "Events", "Fam", "NUMBER", "h", "core", "perfctr", "AMD", "PMU", "driver", "NUMBER", "NUMBER", "NUMBER", "version", "NUMBER", "NUMBER", "NUMBER", "bit", "width", "NUMBER", "NUMBER", "NUMBER", "generic", "registers", "NUMBER", "NUMBER", "NUMBER", "value", "mask", "NUMBER", "ffffffffffff", "NUMBER", "NUMBER", "max", "period", "NUMBER", "fffffffffff", "NUMBER", "NUMBER", "fix", "purpose", "events", "NUMBER", "NUMBER", "NUMBER", "event", "mask", "NUMBER", "f", "NUMBER", "rcu", "Hierarchical", "SRCU", "implementation", "NUMBER", "NUMBER", "random", "crng", "do", "trusting", "CPU", "s", "manufacturer", "NUMBER", "smp", "Bringing", "up", "secondary", "CPUs", "NUMBER", "NUMBER", "x", "NUMBER", "Booting", "SMP", "configuration", "NUMBER", "NUMBER", "node", "NUMBER", "CPUs", "NUMBER", "NUMBER", "kvm", "clock", "cpu", "NUMBER", "msr", "NUMBER", "secondary", "cpu", "clock", "NUMBER", "x", "NUMBER", "cpu", "Activated", "the", "Intel", "User", "Mode", "Instruction", "Prevention", "UMIP", "CPU", "feature", "NUMBER", "Firmware", "Bug", "CPU", "NUMBER", "APIC", "id", "mismatch", "NUMBER", "Firmware", "NUMBER", "APIC", "NUMBER", "NUMBER", "KVM", "setup", "async", "PF", "for", "cpu", "NUMBER", "NUMBER", "kvm", "stealtime", "cpu", "NUMBER", "msr", "NUMBER", "baa", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "kvm", "clock", "cpu", "NUMBER", "msr", "NUMBER", "secondary", "cpu", "clock", "NUMBER", "x", "NUMBER", "cpu", "Activated", "the", "Intel", "User", "Mode", "Instruction", "Prevention", "UMIP", "CPU", "feature", "NUMBER", "Firmware", "Bug", "CPU", "NUMBER", "APIC", "id", "mismatch", "NUMBER", "Firmware", "NUMBER", "APIC", "NUMBER", "NUMBER", "KVM", "setup", "async", "PF", "for", "cpu", "NUMBER", "NUMBER", "kvm", "stealtime", "cpu", "NUMBER", "msr", "NUMBER", "bb", "NUMBER", "NUMBER", "NUMBER", "NUMBER", "kvm", "clock", "cpu", "NUMBER", "msr", "NUMBER", "c", "NUMBER", "secondary", "cpu", "clock", "NUMBER", "x", "NUMBER", "cpu", "Activated", "the", "Intel", "User", "Mode", "Instruction", "Prevention", "UMIP", "CPU", "feature", "NUMBER", "Firmware", "Bug", "CPU", "NUMBER", "APIC", "id", "mismatch", "NUMBER", "Firmware", "NUMBER", "APIC", "NUMBER", "NUMBER", "KVM", "setup", "async", "PF", "for", "cpu", "NUMBER", "NUMBER", "kvm", "stealtime", "cpu", "NUMBER", "msr", "NUMBER", "bba", "NUMBER", "NUMBER", "smp", "Brought", "up", "NUMBER", "node", "NUMBER", "CPUs", "NUMBER", "smpboot", "Max", "logical", "package", "NUMBER", "NUMBER", "smpboot", "Total", "of", "NUMBER", "processors", "activated", "NUMBER", "BogoMIPS", "root", "NUMBER", "acf", "app", "cat", "proc", "cmdline", "init", "fly", "init", "cgroup_enable", "memory", "swapaccount", "NUMBER", "i", "NUMBER", "dumbkbd", "reboot", "k", "panic", "NUMBER", "quiet", "random", "NUMBER", "trust_cpu", "on", "i", "NUMBER", "noaux", "i", "NUMBER", "nomux", "i", "NUMBER", "nopnp", "console", "ttyS", "NUMBER", "pci", "off", "root", "dev", "vda", "rw", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "virtio_mmio", "NUMBER", "device", "NUMBER", "K", "NUMBER", "xd", "NUMBER", "NUMBER", "Guest", "CPU", "root", "NUMBER", "acf", "app", "lscpu", "Architecture", "x", "NUMBER", "_", "NUMBER", "CPU", "op", "mode", "s", "NUMBER", "bit", "NUMBER", "bit", "Byte", "Order", "Little", "Endian", "CPU", "s", "NUMBER", "On", "line", "CPU", "s", "list", "NUMBER", "NUMBER", "Thread", "s", "per", "core", "NUMBER", "Core", "s", "per", "socket", "NUMBER", "Socket", "s", "NUMBER", "NUMA", "node", "s", "NUMBER", "Vendor", "ID", "AuthenticAMD", "CPU", "family", "NUMBER", "Model", "NUMBER", "Model", "name", "AMD", "EPYC", "Stepping", "NUMBER", "CPU", "MHz", "NUMBER", "BogoMIPS", "NUMBER", "Virtualization", "AMD", "V", "Hypervisor", "vendor", "KVM", "Virtualization", "type", "full", "L", "NUMBER", "d", "cache", "NUMBER", "K", "L", "NUMBER", "i", "cache", "NUMBER", "K", "L", "NUMBER", "cache", "NUMBER", "K", "L", "NUMBER", "cache", "NUMBER", "K", "NUMA", "node", "NUMBER", "CPU", "s", "NUMBER", "NUMBER", "Flags", "fpu", "vme", "de", "pse", "tsc", "msr", "pae", "mce", "cx", "NUMBER", "apic", "sep", "mtrr", "pge", "mca", "cmov", "pat", "pse", "NUMBER", "clflush", "mmx", "fxsr", "sse", "sse", "NUMBER", "ht", "syscall", "nx", "mmxext", "fxsr_opt", "pdpe", "NUMBER", "gb", "rdtscp", "lm", "constant_tsc", "rep_good", "nopl", "xtopology", "nonstop_tsc", "cpuid", "tsc_known_freq", "pni", "pclmulqdq", "ssse", "NUMBER", "fma", "cx", "NUMBER", "sse", "NUMBER", "_", "NUMBER", "sse", "NUMBER", "_", "NUMBER", "x", "NUMBER", "apic", "movbe", "popcnt", "aes", "xsave", "avx", "f", "NUMBER", "c", "rdrand", "hypervisor", "lahf_lm", "cmp_legacy", "svm", "cr", "NUMBER", "_legacy", "abm", "sse", "NUMBER", "a", "misalignsse", "NUMBER", "dnowprefetch", "osvw", "topoext", "perfctr_core", "ssbd", "ibrs", "ibpb", "stibp", "vmmcall", "fsgsbase", "tsc_adjust", "bmi", "NUMBER", "avx", "NUMBER", "smep", "bmi", "NUMBER", "rdseed", "adx", "smap", "clflushopt", "clwb", "sha_ni", "xsaveopt", "xsavec", "xgetbv", "NUMBER", "xsaves", "clzero", "xsaveerptr", "arat", "npt", "nrip_save", "umip", "rdpid", "Host", "CPU", "Architecture", "x", "NUMBER", "_", "NUMBER", "CPU", "op", "mode", "s", "NUMBER", "bit", "NUMBER", "bit", "Byte", "Order", "Little", "Endian", "CPU", "s", "NUMBER", "On", "line", "CPU", "s", "list", "NUMBER", "NUMBER", "Thread", "s", "per", "core", "NUMBER", "Core", "s", "per", "socket", "NUMBER", "Socket", "s", "NUMBER", "NUMA", "node", "s", "NUMBER", "Vendor", "ID", "AuthenticAMD", "CPU", "family", "NUMBER", "Model", "NUMBER", "Model", "name", "AMD", "EPYC", "NUMBER", "P", "NUMBER", "Core", "Processor", "Stepping", "NUMBER", "CPU", "MHz", "NUMBER", "BogoMIPS", "NUMBER", "Virtualization", "AMD", "V", "L", "NUMBER", "d", "cache", "NUMBER", "K", "L", "NUMBER", "i", "cache", "NUMBER", "K", "L", "NUMBER", "cache", "NUMBER", "K", "L", "NUMBER", "cache", "NUMBER", "K", "NUMA", "node", "NUMBER", "CPU", "s", "NUMBER", "NUMBER", "Flags", "fpu", "vme", "de", "pse", "tsc", "msr", "pae", "mce", "cx", "NUMBER", "apic", "sep", "mtrr", "pge", "mca", "cmov", "pat", "pse", "NUMBER", "clflush", "mmx", "fxsr", "sse", "sse", "NUMBER", "ht", "syscall", "nx", "mmxext", "fxsr_opt", "pdpe", "NUMBER", "gb", "rdtscp", "lm", "constant_tsc", "rep_good", "nopl", "nonstop_tsc", "cpuid", "extd_apicid", "aperfmperf", "pni", "pclmulqdq", "monitor", "ssse", "NUMBER", "fma", "cx", "NUMBER", "sse", "NUMBER", "_", "NUMBER", "sse", "NUMBER", "_", "NUMBER", "x", "NUMBER", "apic", "movbe", "popcnt", "aes", "xsave", "avx", "f", "NUMBER", "c", "rdrand", "lahf_lm", "cmp_legacy", "svm", "extapic", "cr", "NUMBER", "_legacy", "abm", "sse", "NUMBER", "a", "misalignsse", "NUMBER", "dnowprefetch", "osvw", "ibs", "skinit", "wdt", "tce", "topoext", "perfctr_core", "perfctr_nb", "bpext", "perfctr_llc", "mwaitx", "cpb", "cat_l", "NUMBER", "cdp_l", "NUMBER", "hw_pstate", "sme", "ssbd", "mba", "sev", "ibrs", "ibpb", "stibp", "vmmcall", "fsgsbase", "bmi", "NUMBER", "avx", "NUMBER", "smep", "bmi", "NUMBER", "cqm", "rdt_a", "rdseed", "adx", "smap", "clflushopt", "clwb", "sha_ni", "xsaveopt", "xsavec", "xgetbv", "NUMBER", "xsaves", "cqm_llc", "cqm_occup_llc", "cqm_mbm_total", "cqm_mbm_local", "clzero", "irperf", "xsaveerptr", "rdpru", "wbnoinvd", "arat", "npt", "lbrv", "svm_lock", "nrip_save", "tsc_scale", "vmcb_clean", "flushbyasid", "decodeassists", "pausefilter", "pfthreshold", "avic", "v_vmsave_vmload", "vgif", "umip", "rdpid", "overflow_recov", "succor", "smca", "Firecracker", "version", "v", "NUMBER", "jeromegn", "could", "you", "also", "specify", "what", "version", "of", "linux", "kernel", "be", "you", "use", "Both", "on", "the", "guest", "and", "on", "the", "host", "Thanks", "On", "this", "particular", "host", "NUMBER", "NUMBER", "generic", "the", "guest", "be", "NUMBER", "build", "with", "a", "default", "config", "with", "these", "change", "Enable", "dummy", "network", "interfaces", "CONFIG_DUMMY", "y", "Enable", "VXLAN", "support", "as", "a", "module", "CONFIG_VXLAN", "m", "Enable", "wireguard", "on", "newer", "kernels", "CONFIG_WIREGUARD", "y", "IPv", "NUMBER", "fun", "CONFIG_IP", "NUMBER", "_NF_NAT", "y", "CONFIG_IP", "NUMBER", "_NF_TARGET_MASQUERADE", "y", "CONFIG_NF_NAT_IPV", "NUMBER", "y", "CONFIG_IP", "NUMBER", "_NF_IPTABLES", "y", "Enable", "support", "for", "soft", "shutdown", "of", "amd", "NUMBER", "VMs", "See", "LINK", "microvm", "firecracker", "blob", "master", "docs", "api_requests", "actions", "NUMBER", "md", "sendctrlaltdel", "CONFIG_KEYBOARD_ATKBD", "y", "CONFIG_SERIO", "y", "CONFIG_SERIO_I", "NUMBER", "y", "CONFIG_SERIO_LIBPS", "NUMBER", "y", "Make", "the", "guest", "s", "wall", "clock", "not", "drift", "LINK", "microvm", "firecracker", "blob", "master", "FAQ", "NUMBER", "md", "my", "guest", "wall", "clock", "be", "drifting", "how", "can", "i", "fix", "it", "CONFIG_PTP_", "NUMBER", "_CLOCK", "y", "CONFIG_PTP_", "NUMBER", "_CLOCK_KVM", "y", "Some", "patches", "for", "keep", "network", "functionalities", "that", "Kubernetes", "needs", "might", "need", "CONFIG_IPVLAN", "y", "CONFIG_IPVTAP", "y", "CONFIG_TAP", "y", "CONFIG_IP_VS_MH", "m", "Enable", "proc", "config", "inside", "of", "the", "VM", "LINK", "kernel", "config", "from", "currently", "run", "linux", "system", "CONFIG_IKCONFIG", "y", "CONFIG_IKCONFIG_PROC", "y", "Misc", "CONFIG_ZBUD", "y", "It", "looks", "like", "KVM_GET_SUPPORTED_CPUID", "returns", "a", "cpuid", "that", "contains", "the", "NUMBER", "xb", "leaf", "on", "AMD", "even", "though", "this", "be", "an", "Intel", "specific", "leaf", "NUMBER", "It", "looks", "like", "a", "kernel", "bug", "but", "I", "be", "not", "sure", "NUMBER", "I", "have", "to", "do", "some", "more", "research", "NUMBER", "jeromegn", "Would", "it", "be", "acceptable", "for", "you", "to", "use", "a", "different", "host", "or", "guest", "kernel", "version", "I", "be", "not", "sure", "which", "one", "be", "the", "first", "release", "that", "fix", "the", "issue", "NUMBER", "Also", "could", "you", "try", "this", "LINK", "firecracker", "patch", "please", "and", "let", "us", "know", "if", "it", "mitigates", "the", "problem", "I", "upgrade", "the", "guest", "kernel", "to", "NUMBER", "and", "the", "Firmware", "bug", "be", "gone", "NUMBER", "I", "m", "not", "entirely", "sure", "which", "version", "fix", "it", "though", "NUMBER", "For", "example", "Catch", "the", "EINTR", "error", "when", "run", "the", "epoll", "loop", "NUMBER", "Error", "thread", "TAG", "panicked", "at", "VMM", "thread", "fail", "Poll", "Error", "repr", "Os", "code", "NUMBER", "message", "Interrupted", "system", "call", "checkout", "src", "libcore", "result", "NUMBER", "rs", "NUMBER", "NUMBER", "I", "run", "into", "this", "issue", "when", "my", "laptop", "went", "to", "sleep", "NUMBER", "I", "guess", "the", "firecracker", "process", "get", "a", "EINTR", "signal", "that", "we", "don", "t", "handle", "properly", "in", "the", "epoll", "loop", "in", "run_control", "NUMBER", "Solved", "by", "NUMBER", "Umm", "NUMBER", "this", "looks", "wrong", "LINK", "firecracker", "pull", "NUMBER", "doesn", "t", "touch", "VMM", "code", "NUMBER", "Yap", "i", "close", "the", "wrong", "issue", "NUMBER", "The", "particular", "issue", "describe", "in", "the", "initial", "message", "be", "fix", "as", "part", "of", "NUMBER", "Waiting", "for", "the", "PR", "to", "be", "merge", "before", "closing", "this", "NUMBER", "We", "currently", "aren", "t", "blocking", "masking", "any", "signals", "within", "Firecracker", "and", "we", "don", "t", "expect", "to", "receive", "any", "during", "normal", "operation", "NUMBER", "Without", "a", "handler", "install", "most", "signals", "will", "kill", "the", "process", "anyway", "which", "immediately", "indicates", "abnormal", "host", "behavior", "NUMBER", "One", "potential", "issue", "with", "this", "approach", "be", "relate", "to", "signals", "whose", "default", "disposition", "be", "to", "core", "dump", "as", "we", "might", "inadvertently", "leak", "potentially", "sensitive", "data", "NUMBER", "If", "the", "Firecracker", "process", "be", "already", "deprivileged", "as", "the", "core", "dump", "attempts", "to", "write", "its", "data", "nothing", "will", "happen", "because", "of", "insufficient", "permissions", "NUMBER", "However", "Linux", "allows", "this", "behavior", "to", "be", "change", "to", "pipe", "the", "core", "dump", "data", "to", "a", "program", "which", "be", "executed", "rather", "than", "write", "it", "directly", "to", "a", "file", "NUMBER", "This", "be", "unlikely", "to", "leak", "something", "because", "it", "has", "to", "be", "configured", "in", "a", "pretty", "specific", "way", "taking", "into", "consideration", "the", "jailing", "and", "all", "but", "do", "not", "eliminate", "the", "risk", "altogether", "NUMBER", "There", "be", "a", "couple", "of", "ways", "around", "this", "Add", "handlers", "for", "all", "signals", "with", "core", "disposition", "and", "bring", "down", "the", "process", "ourselves", "NUMBER", "Use", "madvise", "with", "MADV_DONTDUMP", "but", "this", "seems", "to", "be", "the", "most", "awkward", "solution", "s", "Write", "all", "zeros", "to", "proc", "PID", "coredump_filter", "as", "part", "of", "jailing", "or", "better", "to", "the", "parent", "process", "shell", "that", "spawns", "all", "Firecrackers", "since", "this", "be", "inherited", "NUMBER", "I", "think", "this", "prevents", "dumping", "unwanted", "data", "things", "might", "get", "a", "bit", "complicated", "if", "there", "be", "some", "data", "which", "we", "DO", "want", "to", "dump", "but", "we", "ll", "have", "to", "double", "check", "NUMBER", "The", "PR", "NUMBER", "was", "not", "merge", "as", "it", "requires", "a", "host", "kernel", "version", "NUMBER", "Hi", "andreeaflorescu", "I", "be", "a", "student", "in", "UT", "Austin", "s", "virtualization", "class", "NUMBER", "We", "be", "a", "group", "of", "NUMBER", "and", "were", "wondering", "if", "this", "was", "still", "an", "open", "issue", "NUMBER", "If", "so", "could", "we", "get", "a", "little", "more", "information", "on", "what", "needs", "to", "be", "do"], "text_count": [0, 42040, 9652, 4751, 2737, 1024, 3110, 10, 207, 4896, 6474, 11168, 6632, 3453, 4333, 1803, 0, 0, 0, 0, 12674, 3728, 1989, 1145, 2560, 2103, 0, 0, 0, 0, 25384, 15634, 10501, 605, 5305, 1625, 0, 0, 0, 0, 30455, 96, 12223, 10615, 9385, 0, 0, 0, 0, 0, 7994, 3514, 4462, 1891, 2643, 1729, 2819, 0, 0, 0, 25135, 1484, 20571, 1807, 0, 0, 0, 0, 0, 0, 17652, 2050, 12756, 6131, 2268, 0, 0, 0, 0, 0, 32459, 15212, 2444, 13506, 1596, 1459, 0, 0, 0, 0, 2128, 9041, 768, 0, 0, 0, 0, 0, 0, 0, 26429, 5730, 15988, 5253, 0, 0, 0, 0, 0, 0, 53704, 100298, 1319, 3931, 1500, 1475, 0, 0, 0, 0, 128654, 601, 92552, 2793, 21647, 30797]}]